{
    "facelessuser": "Fix is now in place\n. Fixed in last commit\n. Fixed in last commit\n. Fix has been applied.\n. Issue fixed on latest commit.\n. Thanks for the code.  I am just curious at what is being addressed here.  Is this just to allow the explicit declaration of having no styling for highlight for clarity sake?\nEssentially just setting the style to empty \"\" will show no style, though \"none\" is a bit more explicit.  Your code adds the additional styling of style |= sublime.HIDDEN.  Were you getting some kind of adverse affect before this was applied?\nI have tested your code, and \"none\" vs \"\" seem to have the same affect.\nJust trying to understand the why behind the code.\nEdit: thinking about it more, I think a clear none style is not a bad idea.  sublime.HIDDEN is a bit more clear as to what is being done as well.  I will go ahead and pull the changes.\n. Makes much more sense now.  Are you talking about the little white underline marker in ST2?  If you are, I usually disable that.  I have found that ST2, on occasion, does some inconsistent matching.  There seems to be some situations where ST2 matches a bracket you were not expecting and avoids matching what you are.\nIt is a matter of taste though I guess.  I like your change though. Thanks!  It seems it does work better than just calling \"\".  \"none\" leaves the gutter marker while \"\" did not.  I had not noticed that before. \n. I am new to Python, so please forgive the non-standard issues in the plugin right now.  I have recently run pep8 on the scripts but haven't yet addressed all things yet, but I have addressed a lot.  pep8 does have some suggestions that are at odds with me stylistically, but I will run this through SublimeLinter and take a look at how bad it looks. \nEdit: Just ran sublimelinter and it gave me the same things back as pep8 did.\npep8 seems to hate the lining up of variables and their values (I have a hard time with this stylistically)\nval1      = 1\nvalue2 = 2\nIt does not like the white space, but I find it easier to read.\npep8 also hates anything beyond 80 chars, but this is not always reasonable.  Especially with wide screen monitors, many lines fit quite comfortably on screen and don't break that nice.\nThe recent pep8 compliancy changes I made really helped it in sublime linter, but right now \"white space before operators\" and \"lines too long\"  are the last ones, and I am having a difficult time wanting to make the changes.\nLet me think about these changes.\n. Here is my plan.  I will bring everything under compliance using sublimelinter except there may be some long lines that get left.  I think the 80 char standard comes from an ancient time.  Where it makes sense I will shorten lines, but where it doesn't, I will leave them long.\n. Changes have been made let me know what you think.\n. Thanks!  You beat me to this.\n. Zips are now working again.\n. Some important questions, because this seems to work for me on every OS:\n1.  On what OS and where and how did you install it? \n   (It must be in //Packages/BracketHighlighter)\n2. Which setting file are you trying to access?\n   (The \"Default\" ones will be populated with settings; these are the ones in the BracketHighlighter folder.  The \"User\" setting file will be empty at first; the settings in User override Default if available; the Default setting file is overwritten on every Update, so you specify the User ones so your settings persist after update.)\nBasically I cannot reproduce your issue, so I need more info to verify this issue is on my side or not.\n. Yeah, github always  packages things that way, and I find it frustrating.  If you clone it, it downloads fine.  It is the zip package that mangles the name.\nIf you use wbond's Package Control, you can install BracketHighlighter without thinking about all of that.  It will even update it for you.  I will this info in the readme in the future though.  I am glad it is working for you now.  I will close the issue.\n. Yeah, I should put that in the readme too.  It is always better to give too much info than too little.\n. Sadly, this happens to me too, but it is not related to Bracket Highlighter (as far as I am aware).  Please disable Bracket Highlighter and perform some testing and report back.\nMy tests have shown this is a problem with ST2 and unrelated to the Bracket Highlighter plugin, but I would be happy to look into it if it proves to be Bracket Highlighter.\nTheoretically, the more lines you select, the more time it will take Bracket Highlighter to do its thing because it has to evaluate each unique selection.  I could throttle how many unique selections it evaluates in the future.  If that is pleasing I can do that, but I would still like to know if your current issue is related to the plugin or ST2. \n. Nevermind, I just followed my own advise, you may be right about this.  I will look into the issue and see what I can do.  I think throttling the number of unique evaluations would help.\n. Interesting.  I will take a look. and see what I can do.\n. I was testing on windows earlier, but I just tested on mac, and I was able to reproduce the issue \"without\" bracket highlighter enabled.  I had to work a little harder (scroll up and down an little while selecting), but I was able to reproduce the exact same issue. Complete lock up.\nI will confirm this with Sublime Brackets as well.\n. I was able to reproduce the issue as well with Sublime Brackets.  Again I had to do a bit more scrolling up and down, but I was able to completely lock up my machine with that plugin enabled as well.\nWhat this means, is there is an issue in ST2, but it appears that Bracket Highlighter might exacerbate the issue.  I will see if I can relax the situation some with a bit of tweaking.\n. I did some tweaking and wondering if you would be willing to try an experimental branch and let me know if it clears things up for you.  I don't have the branch up yet, but I should tonight.\nBasically, I was spawning multiple threads with on change events for debouncing the bracket matching event, but there is no need to have multiple threads, one should be plenty if coded right.  I am hoping this eases things up for you.\n. Branch is up:\nhttps://github.com/facelessuser/BracketHighlighter/tree/LockUpFix\n. Great!  It was literally the only thing I could find.  Allowing threads to balloon like that is never a good idea; poor execution on my part.\nYou can still on rare occurrence have this issue occur (with or without Bracket Highlighter), but Bracket Highlighter is no longer inflaming it; ST2 is the culprit.\nI will try and get this to the Master tonight.\n. Now on Master\n. They are related in a way, but probably not enough algorithmically to fit in with the current implementation.\nThere would be special considerations to take into account if this were implemented.  I would need to allow for lists for each kind of syntax: ruby, c/c++, etc. to allow searching only for related blocks only in that language.  We would want to limit the searching to the current syntax to limit the strain on the algorithm;  the more searching that is allowed, the longer it would take.\nIt is surely possible, but I fear that trying to squeeze it into the current BracketHighlighter frame work might be difficult to do well without bloating it.  With that said, there is nothing saying I couldn't just write a specific plugin to do exactly this; I have often wanted such functionality in languages.\nThough I feel this is probably out of scope for this plugin, I will leave the issue open until I have some time to evaluate if I would like to try and squeeze this into this plugin, write a separate plugin, or pass altogether (this would be most likely if someone gets to it before me;  I don't yet know when I would undertake this).\n. Meh.  Not necessarily more difficult to implement.  I am highlighting quotes which are identical.  In cases like this, using the underlying scope of the syntax highlighter can help.  I am still on the fence about this though because the algorithm is streamlined to find very specific things fairly quickly.\nImplementing a bunch of different matches could bog things down if they are not restricted to certain file types.  If I were to do something like this, I would also need to come up with a more generalized way to handle such things or the code could become a huge mess in a hurry.\nAs mentioned earlier, this request is more than likely out of scope of bracket highlighter which really is mainly geared towards brackets and bracket related things (HTML tags leverage the angle bracket matching).  Strings were also added so I could search for brackets within strings/regex.\nI haven't really sat down yet to fully think about this yet; I have been pretty busy with other stuff.  I will update this issue when I have made  a decision.\n. @askeeve you wouldn't need to replace angle.  Since the starting character and ending character are different, you could probably easily add just another rule.  Also, angle is needed for tag matching.\nin BracketHighlighter.py  you could add a bracket type called special.  Just follow the two examples below.  These are the only two places you need to add them.\ndef init_brackets(self):\n        quote_open = \"r ' \\\"\"\n        quote_close = \"' \\\"\"\n        return {\n            'bh_curly':  self.get_bracket_settings('curly', '{', '}'),\n            'bh_round':  self.get_bracket_settings('round', '(', ')'),\n            'bh_square': self.get_bracket_settings('square', '[', ']'),\n            'bh_special': self.get_bracket_settings('special', '`', '\\''),\n            'bh_angle':  self.get_bracket_settings('angle', '<', '>'),\n            'bh_tag':    self.get_bracket_settings('tag', '<', '>'),\n            'bh_quote':  self.get_bracket_settings('quote', quote_open, quote_close)\n        }\n```\n    def init_match(self):\n        # Current language\n        syntax = self.view.settings().get('syntax')\n        language = basename(syntax).replace('.tmLanguage', '').lower() if syntax != None else \"plain text\"\n        # Reset objects\n        self.sels = []\n        self.targets = []\n        self.highlight_us = {}\n        self.lines = 0\n    # Standard Brackets\n    if self.exclude_bracket('bh_curly', language) == False:\n        self.add_bracket('bh_curly')\n    if self.exclude_bracket('bh_round', language) == False:\n        self.add_bracket('bh_round')\n    if self.exclude_bracket('bh_square', language) == False:\n        self.add_bracket('bh_square')\n    if self.exclude_bracket('bh_angle', language) == False:\n        self.add_bracket('bh_angle')\n    if self.exclude_bracket('bh_special', language) == False:\n        self.add_bracket('bh_special')\n\n```\nAfter that, you would just need to add all the settings in the settings file.\nSo if there was a setting called round_language_list, you would create one called special_language_list.  Also special_scope, special_style, etc.  Obviously for the icon, you would have to use something generic like dot.\nYou can replace the special with whatever name you want.  This works well for simple single character brackets that are different.\nBrackets that have the opening the same as the closing are much different and require special handling.  If one day I generalize the quote matching enough, I may be able to allow for simple addition of single character same brackets.  Then I could just expose a setting allowing for defining bracket rules.  Multi-character opening and closing brackets is much more difficult in the current algorithm and would require me shuffling a lot around.\n. Tough to say without me playing with it.  If you can fork BracketHighlighter and add your changes and maybe post an example file with your special syntax, I can play with it when I have time and maybe give you an answer/possible fix. Nothing comes to mind off the top of my head that would cause this; so I would have to play with it.\n. @ryanlecompte \nI am doing a possible re-write.  Performance will determine if it sees the light of day, but so far I am optimistic.\nThis is in very, very early stages.  I have been tinkering with it only for a little, and it has quite a bit until it can catch up feature wise.  But if it goes well, something like this may appear in BH2.\nAs originally requested...highlighting of ruby if|while|do etc.\n\nThe method of detecting brackets is much different allowing me to grab multi char brackets  (obviously using brackets loosely here).  I haven't worked out how I will expose this functionality to the user, but I am hoping to abstract it enough to essentially allow for modules to be dropped in for whatever language quirks a user would like to add...we shall see though.\n@charlesroper \nI don't see a problem with BH2 also supporting your markdown interests either.  It appears that the markdown tmLanguage in ST2 scopes the entire underline or bold etc. with a consistant identifiable scope.\nI imagine there would be two kinds of bracket styles a user could define.  One where end caps are specified, and one where the scope is the base...like strings is done, and how markdown bold, underline would be done.\nIf you guys still have interest in this feature, when I get it more fleshed out (and if it doesn't to turn to crap on me), I may need some testers.\n. @charlesroper \nThought you might like this.\n\nCompletely generalized.  This is done simply by an entry in the settings file:\njavascript\n        {\n            \"open\": \"(\\\\*|_)\",\n            \"close\": \"(\\\\*|_)\",\n            \"highlight_subgroup\": [1, 1],\n            \"name\": \"mditalic\",\n            \"color\": \"bracket.curly\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Markdown\"],\n            \"scopes\": [\"markup.italic\"],\n            \"style\": \"underline\",\n            \"icon\": \"dot\",\n            \"enabled\": true\n        },\n        {\n            \"open\": \"(\\\\*\\\\*|__)\",\n            \"close\": \"(\\\\*\\\\*|__)\",\n            \"highlight_subgroup\": [1, 1],\n            \"name\": \"mdbold\",\n            \"color\": \"keyword\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Markdown\"],\n            \"scopes\": [\"markup.bold\"],\n            \"style\": \"underline\",\n            \"icon\": \"dot\",\n            \"enabled\": true\n        }\nThings are still subject to change, but right now I am thinking it might look something like that for people to create their own scope based brackets.  Traditional brackets will be slightly different.  Still working towards a testable alpha, but I am very pleased in the progress made so far.\n. New algorithm seems to be faster as well.  In retrospect this makes sense, but initially I though the inverse would be true.  So this is looking like a win win re-write.  This means thresholds can be extended further without slowing things down.\n. I am thinking sometime next week I will have a testable branch.\n. An early Alpha branch is up at https://github.com/facelessuser/BracketHighlighter/tree/BH2\nI still need to add the bracket swapping and bracket removing plugin.  There is no documentation right now so...you are on your own right now :).\nFeel free to ask questions, make suggestions, report bugs, and do let me know how it is performing for you.\n. A couple of fixes since the initial Alpha post.\n- Icons path was incorrect in the settings file\n- Included bracket remove plugin\n- A number of other small tweaks\nMake sure to restart ST2 after updating to this branch.\n. No worries, I've had a couple people over on the forums trying it out and giving some feedback.  It helped getting feedback about ruby; I think ruby support is much better now.\nAlso got some feedback on styling brackets and I am going to play around with that in the next number of days.\nJust let me know what you think whenever you get a chance.\n. If you were using the alpha before now, I changed some important stuff in the settings file during the last commit that will require reconfiguring your personal settings again, but that should be last non-backwards compatible change hopefully.  Also, shortcuts related to tags probably need to be reconfigured if you used those as well.  See Example.sublime-keymap for examples.\n. The official release of BracketHighlighter 2 is coming very soon.  All planned features are in.  I simply need to write up the documentation, and if there are no critical bugs, I will release it.  Hopefully it will have a positive reception.  I believe it should be capable of handling most everyone's bracket desires now.\nNow would probably be the time for anyone to file last minute issues or suggestions.\n. BracketHighlighter 2 is now on the master branch.  This issue is now solved.\n. Due to the way ST2 does colored regions, it is done by scopes, and your theme file determines what color those scopes are.\nI explain all of this in this post: \nhttp://www.sublimetext.com/forum/viewtopic.php?f=5&t=3327&p=17315&hilit=brackethighlighter#p16694\nI also explain how you can do custom colors by modifying your theme with custom scopes.\nI will add some more detailed instructions in the readme in order to address this issue, but I believe the post should clear up all confusion.\n. There currently is no way to change the font style of highlighted regions with the Sublime Text 2 API (I have looked into it before).  If there was a way, I would gladly do it, but unfortunately there is not.\nI will close this issue, but I will keep this in mind if things change in the future with the API.\n. Can you give me an example of a document that makes the plugin crawl?  I just haven't seen this issue anymore.  I don't mind pulling it if it helps, but I would like to understand the issue first before I wrap a delay inside a delay.\nIs this because you have decreased the original debounce delay or increased your search threshold?  I have seen it crawl when the delay is low or the search threshold is quite large (especially in large documents).\n. What kind of computer are you on?  Win/Linux/Mac?  Is it a fairly fast one or a slow one?  I tried it on my Windows computer at work, and I was seeing very slight stuttering either way.\nI cranked my thresholds up since I am on a very speedy computer.\n\"search_threshold\"     : 40000000,\n\"tag_search_threshold\" : 40000000,\nI started to see some more heavy stuttering at this point.  Only at this point did your change start to make a difference.  I am going to see if I can get my hands on some slower systems and give this a try.\nWhile I may pull in your change (I would like to accommodate all peoples preferences and code that improves some scenarios without hurting others is good), I probably cannot reasonably change the default delay to 0.  I still see lag when you are not holding down the key, like if I need to move four lines down, I will give the down key 4 taps and then get some lag between the taps.  Your change is optimal when the key is held down or the events are firing quite rapidly, but when the events slow down, it starts to show the lag again.\nI still have more testing to do I need to try a slow system that exaggerates the issue, but I wanted to give my initial impression.  It seems to help in very specific scenarios, and any help is good, but I don't think it is the sure fire fix to reduce or eliminate the original default delay yet.\n. > I'm on Windows XP Core 2 duo 1.6GHz.\nWell this gives me a better idea of the specs.  I can't foresee anything keeping me from pulling this in.  It seems to have a definite improvement for zero delay users, and I know there are more users than you using zero delay.\n\nI think there is no way to remove the lag with a threshold of 40000000 without using a separated thread. The processing takes CPU and cannot be avoided.\n\nIt is more a scaling thing.  Faster processor forced me to bump it greater to get the same issues, so some computers will bare the stress better than others.  I originally did my testing on a netbook with a lot lower specs, and 0 delay and 4000 threshold just isn't reasonable for that for more reasons than typing.  That is generally why out of the box I am conservative with the settings, but I leave it open for tweaking because not everyone is okay with the delay on highlight; I personally don't mind, but others like yourself do.  I might end up decreasing the default threshold, but that would happen after testing it on slower computers, I am just not comfortable pushing 0 delay on everyone...at least not yet.\nI imagine I will probably get around to pulling this in tonight.  Thanks.\n. Problem, your changes are having an adverse affect in OSX.  It actually is slowing things down a bit when the normal even when the normal delay is enabled.  I am just not seeing the gains in OSX either.\nI am going to take my time with this and try and understand the issue better.\n. I know.  I was merging it on my on my laptop and preparing to push it and decided just to repeat the tests.\nMac continues to have stuttered typing regardless of whether your changes are present or not.\nOn windows, there was a noticeable improvement, and even if 12ms was set on the old delay without your changes, yours still had some improvements.  Mac just isn't showing it, and it even gives an odd stutter when the default delay is set to 500 which is usually quite smooth.\nI need to verify some things and make sure I am not having some odd interference from else where.  I still plan on pushing it as soon as I can figure out why I am getting this odd behavior.\nJust wanted to give you heads up; I wasn't expecting this.  I am not saying it is specifically your changes, I just need to figure out what it is.\n. Looks like I would have to disable this for Mac.  Not sure about Linux yet.  By changing the timeout form 0.12 to 0.0 mac begins behaving normally.  I think ST2 does some things internally a little bit different on different platforms.  It is a very reproducible oddity.  And there are virtually no gains on Mac with your fix; I think it actually gets a little worse.  It tough to be really sure because I don't have a large sample of systems.\nWindows is a different story, it seemed to work well on mine, and it obviously works well on yours.\nIf I do this, I would probably just check the platform when the timer class is setting up and just pick 0 for mac and assign 0.12 for windows.\nI will check linux later.  This may in the end only be beneficial for windows.\n. Can you please try setting the old delay to 120ms and let me know if it is solving your typing dilemma.\nLooking at this more and thinking about it more, all you are doing is throwing away matches if 120ms didn't pass.  Have you tried setting your normal delay to 120ms (the 0.12 you are using in your workaround).  My current method is already throwing away matches if so much time has not occurred and it ensures that the match will happen.  Yours throws away matches before the delay is reached and in some instances causes the match to not get performed at all (rare, but it does happen).\nI tried setting my current implementation's setting to 120ms (I was incorrectly comparing it to 12ms earlier)  and it gives me instant highlighting, it doesn't have the issue your workaround has where if I am scrolling with the arrow key and stop in a code block the brackets don't get highlighted, and it keeps my key presses from stuttering (I have not yet tried it on windows, but I will).  Essentially, the current delay method can do the same thing your workaround is attempting, or I am I mistaken?  There is some more overhead, but we are talking maybe a few ms of overhead, so maybe instead of it being 120ms you get a little more like 125, but then you could just scale back the delay, but 5ms or so isn't going to make a difference.\nAfter evaluating this further, I am not sure I am seeing the advatage of adding this especially since it seems to give to no advantage to other platforms.\n. > The problem on OS X is still reproducible?\n\nFor me it is.  I am going to try it on my wife's macbook when I get a chance.\nI'm aware of the problem that maybe moving the cursor fast does not highlight the last one. This can be easy solved by running a thread that checks if there is something to highlight. btw, I find the problem of slow typing worse than a no-highlight ( easy solved by clicking or moving the cursor again )\n\nI understand performance hits are more important.  I need to confirm this issue still exists with something low on windows like 120 ms.  I was able to reproduce your original scenario on windws with 4000 thresh and 0 delay.  Earlier ST2 wasn't updating things right, a restart caused it function like yours.  I need to do some more testing.\n\nEssentially are similar, but no, you method waits after the last iteration to highlight. My method tries instant highlight if at least xms passed.\n\nThis causes jitters and lag while typing because it will trigger a highlight in the middle of your typing. If you are in a small bracket block this won't cause much of a jitter, but in a big one, it will.\n. Cool.  I will check it out probably tomorrow.  How did it respond for you compared to your old method? Comparable response?\nSorry I am being a bit picky on this, I do appreciate the work you are putting into this.  If I do this I want to do it right across the board.  Introducing issues on some users to fix other users issues isn't something I want to do, especially with as many people as use this thing.  But I would like to make this better, it is one of the problems that as of yet, no one has gotten 100% perfect.\n. Found my problem with OSX; it wasn't your changes, but I have to say I like the direction this is heading; your new implementation is much better, and its failure to highlight is much much lower.  I am going to make a branch and play around with your changes.   I'll keep you in the loop if I change anything, but I think this will be making it to the main branch.\nI am going to explore the idea of possibly reducing the original delay or removing it altogether.\n. Experimental branch:\nhttps://github.com/facelessuser/BracketHighlighter/tree/Response-Improvements\nIt think this might be an overall good compromise to give instant highlighting, and not run a excessive matches.  Be honest and let me know what you think, and how it performs for you.  It is built off of your work, so I am hoping it addresses your response issues, and my response issues, and will be an agreeable solution.\nThe idea is to longer require a delay from the user.  General usage should give instant highlighting.   If a user is typing or scrolling with the arrow keys, it shouldn't be choppy (unless a ridiculous threshold is used).  Logic for when to launch a match is greatly reduced (old delay method has been thrown away).\nIf this still isn't working for you, no worries, we can get over this some more.  I want to make this as good as we can for everyone, and maybe even a solution we can recommend for other plugins.  If you have any suggestions, let me know.  If you have criticism, let me know.\nI am willing to rehash this until we are all pleased with this and we get the best solution we can.\n. Moved to Issue 16\n. I literally did the thread print statement when I was debugging too :).  I will try out your code.  I knew there were some extra matches occurring, but I hadn't taken time yet to really dig in (I was just pleased at the general performance so I pushed it out), it is nice having two people coming at this ironing it out.\nI'll let you know when I try it.\n. Tried it out, worked great.  I am glad we spent some extra time on this; I feel much better about pushing this out now.  I will commit this to the experimental branch tonight, and I will hopefully push this out to the main branch tomorrow.\n. Fix committed.\n. I am busy making tiny icons :).  I will pull this when I get a chance.\n. I ended up reposition some of the icons and creating all the small icon variants and just optimizing them all in one shot, but thanks for bringing it to my attention.\nI will close this issue.\n. Three things.\n1. The brackets highlighting inside of strings is a special string feature.  When a string is targeted, a special pass of bracket highlighting is performed inside the string.  I am already adding a feature that will ignore parent quotes altogether and only highlight a strings child parenthesis if exists, and disregard the string altogether if child parenthesis do not exist, but it is kind of an all or nothing thing.  You either highlight quoted string ends or you don't.  I can possibly look into selective highlighting.\n2. strings inside strings kind of purposefully get ignored (as well as angled brackets).  I currently detect strings by scope.  Since a string inside a string has the same scope as the parent, it isn't possible to differentiate using my current method.  Well, can't you use regex?  Well maybe.  it can still be difficult to pick out stuff like \"why aren't you highlighting this: ' \".  You can see in this example, the quotes aren't pairs.  How do you determine when a quote should be highlighted?  I might play around with this. \n3. Angles are a bit tougher to catch inside a string.  I currently compare angle brackets scope against 'keyword.operator' because it is difficult to determine when a \"<\" is a \"less than\" symbol or a \"angle bracket\".  Not without parsing it with a bunch of different regex syntaxes to ensure it isn't a less than.\nI will at least play around with some regex for quotes inside of strings.  And I might toy with selectively hiding parent quotes when child brackets are highlighted.  I will let you know what I decide to do with this issue as I play around with the code.\n. I won't close it just yet.  The highlighting of string quotes when the child brackets are highlighted does seem a little out of sorts even if it is a string sub-feature.  And I am planning on getting the bracket plugins to work on internal string brackets as well, so parent quote highlighting might make it confusing as to what the plugin is going to act on. So I do plan on addressing that part.\nI do wish there was an easy answer for the quotes inside quotes.  If it was known that only code was inside a string it would be easy because in code, quotes are only used to denote strings.  But in language, quotes are used everywhere.\n\nI suspect that what you have going on in there would make my head spin if I looked at it\n\nIt is funny because it seems like the code would be so simple to do something like highlight brackets, but I guess there is a whole lot of crazy code in there :)\n. > Out of curiosity, is this issue what would cause a PHP highlighting anomaly?\nYes.  It is not specific to PHP though; it was done purposefully to distinguish brackets in strings from brackets outside of strings.  Brackets inside strings didn't have all of the extra features  that the brackets outside of strings had (like bracket plugins etc.).  Though I have begun to think that it might be confusing to people, so I am pushing to finish off all the features of brackets inside strings.\nI have an experimental branch that I believe  has brackets inside strings now functioning completely like brackets outside of strings, and I have removed the additional highlighting of the parent quotes if you are inside a child bracket.  I am still tweaking stuff, but I hope to have it done this week.\n. You are welcome to try out the new branch if you want to tinker with it early: https://github.com/facelessuser/BracketHighlighter/tree/String-Improvements\nI will probably still be tweaking it, but it should work as is.\n-deprecate \"enable_forward_slash_regex_strings\" in favor of\n\"find_brackets_in any_strings\" (this works with any string scope)\nThe current default is to only highlight quotes when a string child bracket is not highlighted, but you can ignore quote highlighting altogether  and only highlight string child brackets with  \"highlight_string_brackets_only\".  (probably not what you want to do by default though, it is more for those who never want to see string highlighting, but want the special string bracket feature).\n-new setting \"highlight_string_brackets_only\"\n. Shouldn't be too long.  I have been running it all day.  Seems to work good.  I was hoping to be able to use Package Control to alert users of the deprecation of one of the settings, but I am still unclear as to how to get my version to line up with the message version...oh well, maybe I'll just release it anyways.\n\nWho are we kidding? You'll just find something else to do. Heh heh.\n\nYou are probably right :)\n. It is now on the main branch\n. Closed\n. I give detailed instructions on how to change the color in the readme.  I would start there first and if you are still confused, just ask some more questions, and I will try and make it clearer.\nAlso, if you look in the settings file I have an options to change highlight style to solid, outline, and underline...even none if all you want is the gutter icon.\n// Outline? (solid|outline|underline|none)\n    \"quote_style\" : \"solid\",\n    \"curly_style\" : \"solid\",\n    \"round_style\" : \"solid\",\n    \"square_style\": \"solid\",\n    \"angle_style\" : \"solid\",\n    \"tag_style\"   : \"outline\",\nLet me know if I am misunderstanding.  I have tried to make this as configurable as I can so it can meet my needs, and everyone else's as well.\n. This is kind of an exaggerated case.  I won't limit the on demand highlight, because if you select over threshold amount of brackets and wish to apply one of the bracket plugins to them, it assumed you know what you are doing.  \nBut auto highlight should be limited for sure, this is easy to do.  I will create a configurable threshold for auto match.\n. I sometimes use it in files where I have a list of similar lines, and I tap into the bracket plugin for each line, maybe I will select 20 lines give or take.  Auto highlighting in this case could be throttled.  This is what is really your issue.  If I am running a specific command like \"Swap Brackets\" or whatever, it is because I have purposefully selected X brackets with the intent to use bracket highlighter.\nSo yes a configurable threshold for auto highlight is very reasonable I can default it to 10 or whatever.  The auto highlighting for more than many selections isn't as useful, but sometimes the bracket plugin features which must be manually invoked can be very handy.\nSo that is why I said I will limit auto-highlighting which happens without permission; this will solve the issue you are seeing.  Having to make sure I am not exceeding my auto limit when I am manually invoking the built in features would be annoying.  I would have to make sure I select exactly 10 or less.\n. Version 1.7.1\n- Reorganize some settings\n- Limit auto-highlight selections by configurable threshold setting\nDone.  Thanks for letting me know.\n. Sadly, Sublime Text regions do not allow the changing of the text (only background)  color.  If you need a lower profile showing of brackets, you can try outline or underline in the settings file.  Just copy it to your User folder and make changes.\n// Outline? (solid|outline|underline|none)\n    \"quote_style\" : \"underline\",\n    \"curly_style\" : \"underline\",\n    \"round_style\" : \"underline\",\n    \"square_style\": \"underline\",\n    \"angle_style\" : \"underline\",\n    \"tag_style\"   : \"outline\",\nYou can also change the color by selecting a different scope to use for the region (it will use the color of whatever scope you give it in the setting).  You can even add your own scope to your color scheme file and use that scope (details on how to do this are found in the readme.md file).\nExample: Custom Color Scopes (scope must be found in your Color Scheme file):\n// Scope? (Defined in theme files.)\n    // Examples: (keyword|string|number)\n    \"quote_scope\" : \"bracket.quote\",\n    \"curly_scope\" : \"bracket.curly\",\n    \"round_scope\" : \"bracket.round\",\n    \"square_scope\": \"bracket.square\",\n    \"angle_scope\" : \"bracket.angle\",\n    \"tag_scope\"   : \"bracket.tag\",\nThat is really the best I can offer with the limitations of the Sublime Text API.\n. > i still get the same awful solid green block on all my angle brackets\n:)\nI assure you it does work, but you are probably missing the other piece of the puzzle.  Defining it in the color scheme file is not enough.  You then need to use the scope by telling BH to use it in the settings file.  Copy BracketHighlighter.sublime-settings to your Packages/User folder and change the setting below.\n\"tag_scope\"   : \"bracket.tag\",\nThat should change tags for you.  You can then proceed to change all of them.\nI know it isn't the most intuitive system.  I still wish Sublime would just let me give it a color directly, but it doesn't.  Post back if you are still having issues.  It works, but you have to do it just right.\n. No problem.  You aren't the first to have this issue.  If we ever get the ability to directly set the colors, I will pick a less \"eye hurting\" color.  I kind of assume most people will change it from the default scope anyways, and since everyone uses different color schemes, I have no idea what color it will actually be for someone. So changing it for one theme may cause ugliness to ensue in other themes.\n. @ckizer I am not entirely sure everything you are asking about, but if you follow the instructions above you should be able to get solid.  Use the solid option for the respective bracket style.  For any further help, I will need very specific info from you, like your settings file.\n. You can...I don't understand what you are doing.  When you ask, you need to explain how you are doing what you are doing, so I can correct you if you are doing it wrong.\nExample: Here I defined no transparency in my theme file.\nxml\n        <dict>\n            <key>name</key>\n            <string>Bracket Round</string>\n            <key>scope</key>\n            <string>brackethighlighter.round</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#FFCC66</string>\n            </dict>\n        </dict>\n\nHere I defined transparency:\nxml\n        <dict>\n            <key>name</key>\n            <string>Bracket Round</string>\n            <key>scope</key>\n            <string>brackethighlighter.round</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#FFCC6688</string>\n            </dict>\n        </dict>\n\nI can't promise ST2 will blend the background color well.  It appears ST2 simulates transparency.  I don't know if ST2 will blend the background colors proper with the bracket regions, but that would be a ST2 problem not a BracketHighlighter problem.\n. You have the ST bracket matcher still enabled along with BracketHighlighter's.   You need to disable the ST matcher in Preferences.sublime-settings: http://facelessuser.github.io/BracketHighlighter/usage/#suggested-user-settings.\n. If you look in the BracketHighlighter settings file, you will see that angle/tag are whitelisting certain tmLanguages.  You can note that filter lists can be set up as blacklists or whitelists.  In the example below I have added HTML (Rails) to the whitelist for angle and tag to make it start working.  Notice the name is the same as the syntax file HTML (Rails).tmLanguage.  Hopefully this helps.\n```\n    // exclude or include bracket by language type (example: C++ for C++.tmLanguage)\n    // Note: this is particularly useful with Angle. Some languages do not attribute any special scope to angle brackets making it hard\n    // to tell when the bracket is beign used in a valid scenario.  C++ is a perfect example.  It is better to disable completely than\n    // to ignore angle.  Ignoring will not show angle matches, but will also interfere with other bracket matches.\n    \"angle_language_list\" : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"HTML (Rails)\"],\n    \"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"HTML (Rails)\"],\n    \"quote_language_list\" : [\"Plain text\"],\n    \"curly_language_list\" : [\"Plain text\"],\n    \"round_language_list\" : [\"Plain text\"],\n    \"square_language_list\": [\"Plain text\"],\n//filter type (whitelist|blacklist)\n\"angle_language_filter\" : \"whitelist\",\n\"tag_language_filter\"   : \"whitelist\",\n\"quote_language_filter\" : \"blacklist\",\n\"curly_language_filter\" : \"blacklist\",\n\"round_language_filter\" : \"blacklist\",\n\"square_language_filter\": \"blacklist\",\n\n```\n. Currently BH uses scopes to determine when a '<' or '>' is not a less than or greater than sign.  You can't check that in a string because the scope is simply string.  Tag matching is a subset of angle bracket matching currently.  This is not a problem with curly, round, and square brackets because they are seldom used for anything else.\nI might look into adding some logic to check if an angle bracket is spotted in a string and matches a tag regex, to then count it, but I am not sure how easy that will fit into the algorithm.  I won't promise anything, but I will look into it.\nOn a side note, seems like matching might get off if finding tags in strings.  With conditional if/else statements and such or parts of HTML in strings in functions.  I just don't see how that could be that reliable.  I will play around with it though when I have time.\n. @appel this will be possible in the BracketHighlighter 2 which I am currently working on (it is meant to replace the current version).  Your milage may vary, but it will be possible to enable with a little tweaking.\nActual results from BracketHighlighter 2:\n\n. I am working to make this a bit more robust, if it is too fragile, I may not allow it, but I still think I can make it work.  Anyways, hopefully I can make this work.  If not, I will close this request.\nYou won't actually see this feature until BH2 is relased, but hopefully that won't be too far off.\n. BH2 is now live.  I will post some instructions on how to do this later, but your milage may vary with it.  Technically BH2 can do what you want...but it isn't perfect and not without side effects on occasion.\n. Enable string sub search in angle brackets by adding find_in_sub_search as shown below:\nJavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)\",\n            \"close\": \"(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"find_in_sub_search\": \"true\",\n            \"enabled\": true\n        },\nRemove string from tag_scope_exclude:\nJavascript\n    // scopes to exclude from tag search\n    \"tag_scope_exclude\": [\"comment\"],\nMake sure if you want to do this in a specific language, that you add it in the angle definition, and also the define what kind of tags you want matched for that language in tag_mode:\nJavascript\n    // Determine which style of tag-matching to use in which syntax\n    \"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Jinja Templates)\", \"JavaScript\"],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\nKeep in mind, this might cause side effects, and I am not directly supporting this as a feature, but just showing you how you can kind of get the functionality you desire (I am not promising it will be to the quality you desire, but it is the best I can offer at this point in time).\n. You will have to be very specific and explain what is not working or what you would like working with said ColdFusion.\nI do not code with ColdFusion, so I am unfamiliar with what you are wanting.\n. Can you provide me with an example Coldfusion script file.\nThere are a couple of things I must check.  I will install the ColdFusion plugin, and attempt to enable BracketHighlighter for ColdFusion, and using the script you provide, I will verify that the BracketHighlighter can recognize ColdFusion tags properly (I am not sure if there will be issues).\nIf there are issues, I will look into fixing them.  If there are no issues, I will give you steps to enable BracketHighlighter with ColdFusion.\n. I am not sure where the attachments are.  Can you create a gist?  or put them on pastebin or something?\nNo worries about running.  I don't plan on running them.  I just want to make sure BH works when editing them.\n. I would really like to help with this, but without legitimate test files, I will have to close this issue.  Since I do not use ColdFusion I need accurate files using ColdFusion's syntax so I can see what possible issues there are.\nI will be closing this by the end of the week if I am not able to get some ColdFusion test files.  If at some point after that you are able to provide some test files, we can reopen the issue.\n. \"angle_language_list\" : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"ColdFusion\", \"ColdFusionCFC\"],\n    \"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"ColdFusion\", \"ColdFusionCFC\"],\nThis should get ColdFusion mostly working.  BracketHighlighter will not recognize ColdFusion self closing tags currently.\nSo for instance this will not work\n<cfinvoke \n         component = \"Images\" \n         method=\"ImageFlipper\" \n         returnvariable=\"imgpath\" \n         directory=\"Images/Runners\">\nBut if you explicitly close it with a slash, it will:\n<cfinvoke \n         component = \"Images\" \n         method=\"ImageFlipper\" \n         returnvariable=\"imgpath\" \n         directory=\"Images/Runners\"/>\nIf you can provide me with a list of cold fusion tags that optionally self close (don't need a closing tag in certain circumstances), I can maybe add a more official support.\n. I am closing this.  If I get around to figuring which Coldfusion tags are self closing, or if someone provides a list, I will look into adding more appropriate Coldfusion tag support.\n. Cool.\nYou can probably just put the list up in gist and provide a link here.  Thanks for putting in the effort here, I am sure others will appreciate it.  I don't personally use Coldfusion, but I know there are others that do.\nThanks.\n. I don't see a list, can you put them on a gist or something?  Also, I will need to know which ones are actually allowed to be self-closing.  They are handled differently to make sure they get highlighted when in self closing state.  If a non self closing tag is written as a self closing, Bracket Highlighter should not highlight them because they are not valid.  That is why I need the distinction between the two.\nAlso, thanks.  I am sure a lot of ColdFusion people will be grateful for your efforts.\n. Looks like I am making some good progress with ColdFusion support.\nSadly, I am not getting much follow through from ColdFusion users...I don't use ColdFusion, so it would be nice to get some help on this.  I won't be using this...\nAnyways, I got a list of self-closing ColdFusion tags here: http://www.webveteran.com/blog/web-coding/coldfusion/coldfusion-tag-usage-syntax/\nI don't know how accurate this is.  Basically, I am looking at the left column and making all of those optionally self-closing.  If this list is inaccurate, please correct me now.  Also, something that would be nice is to identify tags that never use closing tags (if there are any in ColdFusion).\nI am also adding the ability for BracketHighlighter to detect optionally self-closing tags in general.  This will be useful because it appears a lot of ColdFusion users do not end there self-closing tags like this <sometag/>  but many use the more ambiguos style of <sometag>.\nIf you are a ColdFusion user and would like to test this out and give feedback before I push it out, please do let me know.  Again, this is for you, not me.\n. @rhpt \nThanks!  I think what I will do is try to expose some of this stuff in the settings file so, if what I do isn't quite right, people can tweak it.\nCustom tags seem like they could be trouble which leads me to think exposing this in the settings file is the way to go.  I don't even know what custom tags are :).  I imagine if I can allow people to add custom tags in a settings file, that might do.  If everyone used the <sometag/> notation this would be a non-issue, but in order to catch these ambiguous tags <sometag>, I will have to require a list of expected self-closing.  I guess the other alternative is to treat all ColdFusion tags as possible self-closing.  That would make it harder to catch mistakes with tags in the code because BracketHighlighter would skip right over those kinds of errors.\nThe good news is that I have some rough code that works on an example CF code someone gave me, so I am at least heading in a good direction.\nI am oblivious to ColdFusion, so having someone who knows about this stuff is helpful.  Thanks again.\nWhen I get a less rough branch together, can you do some testing with it and give me feedback?\n. I see.  Ugh...I am going to have to write a script to extract the info I need, but thanks for the link; this will be very helpful.\nI am glad to here that custom tags have a predictable pattern, this will make things easier for me.  I agree, allowing self closing and not requiring them seems to be safest for custom.  BH already supports explicit self-closing </>, so I am good there.  Hopefully, the experimental self-closing detection I plan on adding will be sufficient to catch all of these pesky non-explicit self-closing.\nI can see CF support is going to be a big headache, I appreciate the info provided thus far, it is definitely helping.\n. > Also, I wonder if BracketHighligther can just look for any tags that start with <cf to flag whether or not it's a CFML tag and then make the forward closing tag optional.\nThat is certainly a possibility.  I can roll out a branch for testing with that and see if people find it sufficient.  If not, I can add more specific functionality.\n@rhpt I will let you know when I have a branch up.  It should be up sometime this week.  It all depends how lazy I am :).\n. @rhpt I actually got around to it tonight.  The branch is here: https://github.com/facelessuser/BracketHighlighter/tree/SelfClosing-and-CFML\nJust add  \"detect_self_closing_tags\": true, to your User/BracketHighlighter.sublime-settings file and set the following setting to this: \"tag_type\" : \"cfml\",.\nLet me know how it works for you.  Thanks.\n. @rhpt \nSorry, you need to add the ColdFusion plugin's syntax in the BracketHighlighter settings below (It is assumed you have the ColdFusion Plugin installed):\n\"angle_language_list\" : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"ColdFusion\", \"ColdFusionCFC\"],\n\"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\", \"ColdFusion\", \"ColdFusionCFC\"],\n. Also, you might need to restart ST2 after update?  I don't know, but it was working for me, let me know if you are still having trouble after trying my above additions.\n. Definitely restart ST2 after upgrading to the new branch.  The changes are significant enough and buried in the dependencies, so a restart is needed to re-include the dependencies proper.  Just tried it on my Windows Computer at work, and it works fine if you follow the settings instructions and then restart ST2.\n. @rhpt Great.  I may go ahead and merge these changes into the mainline defaulted to off, and let people play around with it.  I was mainly concerned about the cfif and cfelseif tags; they didn't follow normal tag conditions, but it seems you haven't run into any issues with that yet.\nOne thing though:\nI also noticed that cfml attributes can use dot notation somevalue.somemember=\"some value\".  Tags names can't do this as well in cfml can they?\n. I am counting this closed.  Experimental CFML support is on the main branch.  Read the readme for more info.  If there are issues with CFML support, open up a new issues to have those resolved.\n. I don't know.  I am not sure of what you are using for your cfml highlighter, nor do I use cfml.  The status is probably as I last posted.\nWith that said, CFML was probably based on the ColdFusion package here https://packagecontrol.io/packages/ColdFusion, but as you can see, it is only for ST2 (which is when I added this), but it may work with ST3 even though the author did not enable the package for ST3.  If you find an ST3 compatible syntax highlighter, you can add support for it via pull request, or lastly, you can modify tag settings to use cfml searches in regular HTML: http://facelessuser.github.io/BracketHighlighter/customize/#tag-plugin-settings.\n. I would test it out and put together a pull request if it works for you.  You probably only need to add the syntax file in a couple of places in bh_core-sublime-settings and tag.sublime-settings:\nhttp://facelessuser.github.io/BracketHighlighter/customize/#tag-plugin-settings\nhttp://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets\nI leave language support up to the community: http://facelessuser.github.io/BracketHighlighter/contributing/.\nI mainly support the core code, though if you get stuck, I don't mind offering advice or answering questions to help you get your pull request moving forward.\n. Do you have a BracketHighlighter.sumblime-settings file in User and in the plugin directory?  Usually the User one overrides the actual plugin ones.  I would delete the User settings file and unistall and reinstall the plugin and restart ST2.  \nI am not sure what happened to the plugin on your end, so my advise is to try and give you a clean install of the plugin to essentially reset it back to default.\n. Not sure what you mean; can you elaborate?\n. Ahh, I see what you are saying now.  I agree, the little details can make things.  I can possibly split each bracket type group into single line and non-single line groups, but the truth is, I am not too excited about making more icons and getting them all lined up proper :).  That was a PITA.  It was worth it though, I think took it a step up.\nIf I can motivate myself to not be lazy and make single line icons for all the variations, I will look into adding this.\n. Sure, take a swing at it.  I am no designer either.  The important thing is that there are two sizes.  The smaller ones take effect when the font is very small.  The actual small icon still has to be 16x16 (I think it is 16), you just have to use the upper corner.\nIf you pull off something pretty good, looks like I will have to look into adding this feature then. :)\n. @gnclmorais it looks like @Greduan has decided to help with the icons.  This will be in version 2 of BracketHighlighter, which is a complete re-write to allow all sorts of things: like custom brackets, faster matching, icons as you have suggested, and other features.  It is currently in an Alpha state and testers are already giving positive feedback.\n. Issue #42 is the current addition on the BH2 branch https://github.com/facelessuser/BracketHighlighter/pull/42.  You can watch that for updates, we will hopefully have it soon on the alpha branch.\nIf you try the alpha branch, remember that things can break very quickly because it is under high development, and I may change how things are done at any moment.  Once things get to beta, it will be much safer.\n. BracketHighlighter 2 is now on the master branch.  This issue is now solved.\n. There is a setting to disables multiple gutter icons.  Make sure yours is set to false in User/BracketHighlighter.sublime-settings\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n. So you want it not to highlight just the current bracket, but to crawl out and highlight each parent as well?  BracketHighlighter has never done that.  The picture in the repo shows multi-selection (each cursor is matched), but does not show nested highlighting.\nThe overhead to crawl out and find parent parenthesis would be a bit much.  I currently do not have intentions to add this feature because the overhead would be too much.\n. > Is it really that much different than highlighting one level?\nFor the algorithm it is.  Currently, to make something like this happen, I would have to do some major changes to how the algorithm works.\nSecondly, bracket matching is done under some threshold, close matching brackets are matched very quickly, far away are match slower.  By searching for parent brackets up to the threshold (not the entire file) would now make every bracket match the worse case scenario.  Now as long as you have a reasonable threshold, it wouldn't be too bad, but the algorithm changes to allow the recursive crawling out to find parent brackets would kind of be a pain.\nIf I thought there were enough people that would use a feature like this, I would be more inclined to consider it.  I kind of feel it would be distracting because in ST2, I can't really differentiate like bracket colors.  All round brackets are assigned to one scope color.  ST2 does not allow dynamically colored regions; all colors must be assigned to a scope in the color scheme file.  Certain brackets with certain colors would also loose their meaning because as you crawl out the colors would change making the assigned colors for bracket type pointless.  Basically it would require rethinking the current infrastructure and functionality of the plugin.\nThe current plugin is optimized for a certain way of thinking.  By changing that way of thinking, I have to change the whole plugin.\n. Closing.  I have no current plans to add such a feature.  If I change my mind I will reopen this issue.\n. You can not define the color as the scope for Sublime Text 2.  That is not a limitation I placed on the plugin, but Sublime Text 2 itself.  What you are asking me to do is currently impossible.  The method for changing colors in the readme does work if you follow the directions.\nYou are correct that the theme files do not contain the XML content I specified...you must add it.\nI am closing this issue since it is not an actual issue with the plugin, but if you are still confused, feel free to ask more questions.\n. You are getting a json  parsing error, not a BracketHighlighter error.  \nThe last item in a json array or hash cannot have a comma.\nExample Bad:\n{\n    \"some_item\": true,\n    \"another_item\": true,\n}\nExample Good: (notice there is no comma on the last item)\n{\n    \"some_item\": true,\n    \"another_item\": true\n}\nDouble check your settings file and report back.  I use underline on my settings, and I can verify it works.\n. It is tough to say.  If you can post them somewhere (maybe in a gist), I will take a look.  Theming brackets definitely works, so I imagine it is a user error.\n. The theme you posted doesn't have the new scopes added to them.\n. Cool, then I will close this.\n. This is by design to prevent the editor from getting bogged down by searching for brackets too much.  If you would like to increase the search threshold or disable it, you can use these settings in the settings file.  Be warned, excessively large thresholds (or no threshold) will cause the editor to freeze in large files.\n. Forgot to post the settings:\n// Threshold distance to search\n    \"search_threshold\"     : 2000,\n    \"tag_search_threshold\" : 2000,\n    \"use_search_threshold\"     : true,\n    \"tag_use_search_threshold\" : true,\n. Yeah, I don't think this was the case when I originally implemented the shortcut.  I purposely picked one that was clear of shortcuts.  The problem is that ST2 keeps adding shortcuts invalidating plugin shortcuts.  Not mention plugins overriding each others shortcuts.\nAt this point I can probably make everything in BH use the ctrl+shift+alt modifier (which will throw everyone off and probably cause a number of github issues to get filed), but if that gets overridden, my next step would be to remove all shortcuts entirely and simply provide an example and let users try and find their own non-conflicting shortcuts.\nMost of the shortcuts for BH were awkward enough as is, this will probably make it more so, but I guess it can't be helped.\n. Let me think about how I want to approach this.  I have another plugin also using the ctrl+shift+b sequence as well. At the very least, I will add a warning to the readme.\n. Yeah, I know.  I am still thinking about a good solution.  This is a new development, and it is going to affect a lot of people.  I am starting to think I will just remove all Ctrl+Shift+B shortcuts (maybe even all shortcuts), and just mention they can be added and give some examples and let the user define them or not.  I may expose the commands in the command palette if they are not currently defined as well.\nIt is impossible to tell if/when ST2 is going to add more default shortcuts that people do not want overridden; therefore, having a plugin define shortcuts is pretty useless since they may accidentally override a default shortcut in the future and fluster users.  Handing the responsibility over to the user to find suitable shortcuts will make them and me happier in the long run.  Me, because I don't have to break some many thousand installs of BracketHighlighter if ST adds/changes new shortcuts that conflict with mine, and users because I am not unintentionally borking their shortcuts...ST2 and the user would then be responsible.\nI think this is the best solution for me.  If I change the shortcuts now, they may get broken again some months down the road.  If I go ahead and remove all shortcuts now, I confuse/piss off people only once, then they can configure it however they want.\n. ST seems to only use ctrl+alt for a very few things.  So, in a way, using ctrl+alt is safer.  But it doesn't stop issues where a user is using the BracketHighlighter plugin and XXXX plugin and they both use the same shortcut.  Which plugin fixes the issue?  Issues like this are very difficult to avoid.  I am not looking into debating with other plugin devs over who was using which shortcut first etc, or which plugin is used by more people.  I want to fix the issue where I don't have to update BracketHighlighter for the same issue over and over again.\nSo, giving an example of how to configure each command in a shortcut and letting the user pick the shortcuts they like, is much better for me.  I can do it once and the problem is solved for the lifetime of the plugin.  If another plugin conflicts with the user's shortcuts, it is up to the user to convince XXXX plugin dev to change their shortcuts, or they can just change their own.  I basically want to wash my hands from shortcut conflict issues; it is a situation I cannot control.\n. We could, but best case scenario, it will take quite a while for Jon to get around to it, if he even decides to something about it.  ST2 is made to be very configurable, and some people actually like changing the default shortcuts to match editors they used to use (I don't, but some do), so ST2 would also have a difficult time identifying what is a valid override  and what is not.\n. This will not be an issue in BracketHighlighter 2 when it releases.\n. BracketHighlighter 2 is now on the master branch.  This issue is now solved.\n. It is specifically catered towards single brackets.  This is not the first request for such a thing, and there is an open request here for it as well https://github.com/facelessuser/BracketHighlighter/issues/12.  When I have time, I plan on seeing how much work it would take to do something like this, but as of right now, it is simply a wish list item that I have made no guarantee on.\nWith something like \"{{}}\", this currently would add a bit more unexpected complexity.  I would have to add in some kind of weight on matches to tell the code if it finds \"{\", keep looking to see if it can find \"{{\" and \"{{\" takes precedence over \"{\".  What it boils down to, is I would have to rework the algorithm, which is why I have promised nothing and have left it simply as I will look into it for now.\nSince this is a duplicate request, I will close this request and simply refer you to issue 12 to track any progress on this request.\n. Please check out this thread of issue 21, where I helped someone with this very problem:  https://github.com/facelessuser/BracketHighlighter/issues/21.\nST2 API makes this a bit confusing, but BracketHighlighter at this point has no choice but to require this odd way to color brackets.\nHopefully the link will help.\n. Great! Glad you got it working.\n. A couple of things on this request.\n1. I wouldn't merge anything thing like this until it was officially on the theme branch in question (it doesn't look like it has been pulled yet on the theme).\n2. I don't want to start a precedence where every time someone's theme supports BH they append instructions and such to the BH readme causing bloat.  I have provided general instructions, and I feel that is sufficient.  It would make more sense for these instructions to be included in the Theme's readme since it is really theme specific settings.\nWith that said, I don't mind adding a link in the future to all themes that officially support BH out of the box.  That way, I could just add a simple little section of Themes Supporting BH and include the theme names and a link.  Themes should be responsible for providing detailed info on their own specific settings or configuration.\nIdeally, I would suggest that all Themes would standardize the scope configuration across all themes.  I would be willing to change the documentation to reflect a theme standard.\njson\n{\n    \"quote_scope\" : \"brackethighlighter.scope\",\n    \"curly_scope\" : \"brackethighlighter.curly\",\n    \"round_scope\" : \"brackethighlighter.round\",\n    \"square_scope\": \"brackethighlighter.square\",\n    \"angle_scope\" : \"brackethighlighter.angle\",\n    \"tag_scope\"   : \"brackethighlighter.tag\"\n}\n. Then what I will do is just add a section showing themes that support BH and add a little blurb about reading the Theme's readme for more info because the settings convention might not match the example.\nI will also change the BH's readme to show settings that do not collide like I posted above, but I have no plans of mentioning brackethighlighter.all.   Some Themes might be configured to show per bracket colors, some might paint them all the same like you are doing.  I would like to promote a method that always works no matter what theme you use. I feel specifying each bracket individually in the theme is the best way to handle that.\nI am working on merging in some CFML support and auto-detect of self-closing tags.  After that merge, and if/when the Solarized Theme pulls in your changes, I will update my read me.\n. Yeah.  If you had all of them set to the same color it would be a compatible convention for themes that use multi-color, and would only show orange in Solarized.   I completely understand why you did what you did though.\nIf you standardize it by doing the suggestion above, then the BH readme will go right along with it.  But if not, no worries; I would just put the instructions into the Solarized readme to use brackethighlighter.all.\n. Looks like the referenced pull requests were closed, so I will close this pull request as well.\n. I don't have an easy way to add something like this right now.  Maybe in the future.  The algorithm would really need to be re-written to handle complex \"brackets\" like this, or at least heavily modified to do something like this.\nIt is one of those that might happen if/when I am ambitious enough.\n. @webthingee I am moving forward with a possible re-write of BH for BH 2.0.  It is very possible you may get what you are looking for.  See this issue for tracking progress info https://github.com/facelessuser/BracketHighlighter/issues/12.\nI will be closing this issue, since your request is essentially the same as Issue 12.  I would follow Issue 12 to be informed of future progress.  It will probably be a while for BH 2.0 (assuming it meets my expectations).\n. I will let you know as soon as I have something usable.  A tester would be very helpful.  Since the approach is so different, I expect there to be some buggy quirks in the beginning.\n. I assume this is roughly what you are looking for?  You didn't really provide any examples, so I am roughly guessing the syntax from a couple of things I read.\n\nThe re-write (which I will refer to as BH2) is generalized enough that all I had to do to get what you see in the screenshot is provide a definition.\njavascript\n        {\n            \"name\": \"cssedit_groups\",\n            \"icon\": \"dot\",\n            \"open\": \"(/\\\\* *@group .*\\\\*/)\",\n            \"close\": \"(/\\\\* *@end *\\\\*/)\",\n            \"color\": \"bracket.curly\",\n            \"style\": \"underline\",\n            \"scope_exclude\": [],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"CSS\"],\n            \"ignore_string_escape\": true,\n            \"wrap_swap_entries\": [\n                {\n                    \"name\": \"CSS: @group\",\n                    \"brackets\": [\"/* @group name */\", \"/* @end */\"],\n                    \"insert_style\": \"block\"\n                }\n            ],\n            \"enabled\": true\n        },\nHopefully this is what you are looking for.\n. Nested work just like any other nested bracket...just fine.\nSo something like this will work fine:\ncss\n/* @group level1 */\n/* @group level2 */\n/* @group level3a */\n.something {\n    background: #FFFFFF;\n}\n/* @end */\n/* @group level3b */\n.something_else {\n    background: #FFFFFF;\n}\n/* @end */\n/* @end */\n/* @end */\nAs for folding.  I have written a sub modules (bracket plugin) that can do that just fine.  So you would simply place your cursor between or on one of the group end caps and invoke the \"Fold By Bracket\" command.  Then ST2 creates a little unfold icon in the gutter when it folds it.  To unfold, you can click the gutter icon or you can also toggle unfold with the same bracket plugin command; it is a toggle fold by bracket command really.\n. The fold command has been in the original BracketHighlighter for a while, but most of the Bracket Plugins aren't really documented too well.  I think I briefly mention they exist.  The difference now, is that you can define new brackets.  Most of the Bracket Plugins will work with any bracket (unless they were coded for a specific one;  I do this for tag specific features, and I think for swapping quotes since you must escape the same kind of quotes inside).\n. ?\nI need examples.  I have never seen this issue before.  I just tested some code with 7 sets of brackets enclosed in each other and performed mult-select on each one and they all highlighted.\n. Do you mean it doesn't show show more than x instances of brackets simultaneously when multi-selecting?  \nIt doesn't automatically show nested brackets (this is not a feature)?\n. Oh, I know what it probably is.  The brackets are too far apart.  There is a search threshold in the settings file.  That limits how far BH will search for brackets.  It has nothing to do with parent or child enclosures, only distance.  Without a limit, if you were in a 10,000 line file (I have been in bigger than that), BH bogs things down.  Look in the settings file and you can adjust this to your liking of performance and functionality.\nLet me know if that was the issue.\n. No worries.  The documentation isn't really that good.  I would write up a better guide except that I am currently re-writing the plugin for BH2 so it can be more flexible for other people and allow for some new stuff I couldn't do before, so a lot of the setup will change...similar, but different.  It is unfortunate, but with progress comes change.\nThanks for your interest in the plugin.\n. This was discussed in the forum.  The idea is that xeno-by wanted a way to toggle on a high visibility mode when working with certain kinds of  files.  This would be something that would be off by default and only enabled if you purposefully toggled it on.\nThe plan is to implement this in the rewrite of BracketHighlighter that is almost finished (BracketHighlighter 2).  Whether this is included in the first release of BH2 or sometime after is still to be decided.\n. @xeno-by   Let me know what you think.\nHigh visibility mode is in the alpha branch now.  Turned off by default and can be toggled via a command palette, menu, or you can create a shortcut.\nYou can select either solid or outline as the style.\nAnd you can select any color you want.  If you want to use the default color, use __default__.  If you want to inherit the color of the bracket you are overriding, use __bracket__.  This is the default.  Currently I highlight the whole region as a single line region, so you will only see one bracket icon at the beginning.  I will probably tweak this to show the opening and closing proper later.\njavascript\n    // High visibilty style and color for high visibility mode\n    // (solid|outline)\n    \"high_visibility_style\": \"outline\",\n    // (scope|__default__|__bracket__)\n    \"high_visibility_color\": \"__bracket__\",\n. Fixed icons for high visibility.  That's it for tonight.  I will wait for feedback before I do anything else with this.\n. -Allow high visibility to use underline\n-Add fixes so that underline will only show icons at end points if\nspanning multiple lines\nNow I am really done.\n. It is on the alpha branch if you want to give it a try, but if not, I will post a screenshot when I get some more time.\n. How it would look with either of the three styles.  Color is configurable.  High Visibility (HV) mode uses the same highlighting style across all brackets.  Icons are used from the actual defined bracket style that HV is overriding.  And color can be inherited from the bracket style or you can define a generic color that will be used by on all brackets.  Pretty straight forward highlighting.\n\n. Should be safe.  I made a non-backwards compatible change today, but that is the last one.  I will be upgrading this branch's status to Beta tomorrow.  I have been using this branch at my work with no issues for weeks now.\nI just need to finish one non-critical feature, and then I will begin documenting everything.  After that, if no more bugs crop up, I will officially push it out.\n. BracketHighlighter 2 is now on the master branch.  This issue is now solved.\n. This may only be possible in the re-write of BH that I am currently doing.  Please post an example Latex code and let me know what syntax language you use (if it is not included with ST2) so I can answer if it will be configurable.  I do not code in all languages, nor am I interested in doing a great deal of research to discover and understand every language's syntax, so I like to ask those requesting an arbitrary bracket configuration to provide me with examples and explanations of how it is used.\nTo follow progress of the BH2 re-write, please refer to this issue: https://github.com/facelessuser/BracketHighlighter/issues/12\n. Noticing you mentioned it is a string, this should be possible in the rewrite.  I added some kludges to the old version to find some regex, but it isn't very well done.   BH2 should have no problem with your request.  Please reference Issue #12 as I posted previously to stay up on the ongoing effort.  I should have an alpha in maybe two weeks...don't hold me to that though.\n. I understand much better.  This will be resolved in the re-write I am currently doing.  I am trying to abstract most of this stuff so that users can define it anyway they want.  It is very difficult to maintain the code with lots of little exceptions.\nIn a lot of files, you might not really want to try and match brackets in strings.  In some languages you do, because they aren't really strings.  So BH2 aims to take that burden off of me, and allow the user to define rules to do whatever they want.  I would follow the issue I linked earlier.\nIf after BH2 releases, you still are not satisfied, we can reopen this issue.  For now, I am grouping this in the arbitrary bracket issue, since it is basically more brackets with odd rules specific to a language.\n. @AGS-Knight Hows this look?\n\nBH2 will deliver the goods ;)\n. If you take a look in the settings file, I show in the comments the acceptable settings.  You can turn off icons, you can change highlight style, you can also change color (scope...its the only way to change color via the ST2 API; this is arguably the most confusing setting).\nAnyways, I just had someone bring this question up to me again and I gave an answer on the forum, so I will redirect you there.  http://www.sublimetext.com/forum/viewtopic.php?f=4&t=9462#p37787\nIf you are still having issues, feel free to post back here even though I have now closed the issue.\n. Holy icons batman!  Thanks.  I will take a look at these.\n. Oh, there isn't an option to use both yet, it will happen automatically once I add the code.  There was no sense in adding that part yet since I didn't have icons.  You can test by setting different brackets to the different icons, That is probably what I am going to do to make sure they look okay,  Particularly the small icons (they are always the most tricky to get looking good.)   And then add the code to pick them up.\nWho knows, maybe I will add the code then test.  We shall see.\n. That's cool.  My plan was to add the code first and then merge the icons manually if they look good.  Haven't had a chance to touch this yet.  As soon as I get to it, I will let you know if they need any adjustments.\n. Looks good.  I am a little iffy about the single and double.  I know why you offset them...but I am trying to decide if I like them, I wonder if it would look better they were lined up, but the opening set were upside down and the right were normal?\n. But both curled towards each other.  I hope that all makes sense.\n. Oh and maybe do an open quote and closing quote for single and double quotes?  That might come in handy for things like python multi-line quotes.\n. If the variant of singe and double I suggested doesn't look good, I will pull these current quotes, but it would be nice to have an opening and closing icon for single and double quotes for use in multi-line strings in various languages.\n. Nevermind, you did provide opening and closing of quotes.  Singles were mis-named so they weren't showing up.\nSo yeah, if the variant I suggested looks better, we can use that, if not, I will probably pull these.\n. Yeah, I like them flipped, but maybe on the same line opposed to being offset.  We can always get rid of the original quote icon as well and just have quote_single and quote_double.\nI am hoping that by flipping the first it will be different enough that it won't be a problem and we won't need to have the closing set higher.\nI guess you could include both  quote_single, quote_double, quote_single_offset, quote_double_offset, then people could choose the offset version if they have a difficult time telling them apart.\nFantastic work, and thanks for your patience with my pickiness.\n. Can you flip the opening quote_single and quote_double to match the one with both for consistency?  After that I think I will pull the trigger on this.\nSure, look into to Retina.  I haven't done that yet.  I don't have a retina MAC (just a normal one) so I can't test.  I don't even no if there is a preference setting I can check for that.\n. Sure, we can make that a separate pull request.  Don't worry about it this minute.\n. Cool I will check it out.  Coding was done last night; I already knew what had to be done.  That is why I have been making icon requests :smile: .\n. No I merged it manually with the code.  It is officially in now.\n. I like it as well, it is quite nice. Thanks again.\n. BracketHighlighter does not control the actual syntax highlighting of the language, it only creates special highlight regions within the view.\nThis needs to be fixed in the PHP language.\n. I can take a look at it on my sublime-languages repo.   It is my personal repo, where I tweak languages I use to fix issues or add stuff I want.  I really don't take feature requests on it because it is my own personal languages, but some people use it and file bug on it which I usually fix if/when I get time.\n. Just file an bug for php on that repo.  I will take a look when I have time.\n. I have a Mac and a Windows PC, and I occasionally run some linux VMs (I used to have a linux box as well).\nI think I used \"Consolas\" for most of them (Consolas is a Microsoft font, but I have it installed on my Mac as well).  There are possibly a couple that are not made with Consolas, like the star (can't remember what I used..maybe Courier New?  I was looking for a particular look with the star).  I also copied and pasted the dot, circle, bookmark icons from the ST2 theme.  The tag icon was made by COD312 in forum (also known as BoundInCode on github and bitbucket).  He can probably be contacted to make a retina sized tag icon.\nI do not use Photoshop.  I use Pixelmator (Mac only) or GIMP.\n. Yeah, PS is a rip off for the weekend graphic designer.  \nPixelmator takes some getting used to, but it works pretty good.\nGIMP is clunky but still quite powerful, but some things it does just isn't as good as PS or even Pixelmator.\nAnyways, I don't don't mind if you use a different font for Retina.  As long as they look good.  If they look better than the non Retina version, you could even just make them all the same.  Some fonts pronounce the brackets better than others.   I code in Consolas everyday, and I generally like the look of the brackets, so I didn't look much further.  Didn't like Consolas star for an icon though.\nSo, feel free to experiment.  My only rules are: keep it simple and clear,  and don't make it ugly :smiley:.\n. It might be buried in the settings or something.  I don't know all the ins and outs of Pixelmator, but its a steal compared to PS.\n. This issue appears to be dead, it can be reopened if work resumes on it.\n. I don't have a retina display on my Mac, so I am not currently working on ST3 retina gutter icons because I cannot test them.  If someone with a retina Mac wants to create the icons and offer a pull request, I will pull them in.\n. I still don't have a retina display, so I can take it or leave it, but as you can see, there are still people who would like this as well.  I will leave it up to you if you would like to continue work on this.  I have too much going on right now to tackle it myself.\n. Yeah, I know what you mean.  I will try and confirm when I get time.\n. Thanks.  It looks like you would just create 32x32 size icons and get rid of all of the 16x16 icons.  It looks like ST handles all of that (this is based on the fact that GitGutter appears to only have 32x32 icons and no 16x16 icons).\n. It would seem that way.\n. Retina Icons Pull Request (#114)\n. Thanks, I will pull this.\n. Good catch on the typo.  Hadn't run down that path yet, so I missed it.\nThanks for the Objective-C addition.\n. Post example Erlang file with the example stuff you want to highlight, and I will see if I can add the highlight of fun for you.\n. Yeah, we shouldn't add fun unless we are highlighting it proper, but no worries, this should be doable.  If we use a regex lookahead, we check for that stuff but not capture it in the highlight and allow the () brackets to still get processed separately.  I will take a look today or tomorrow.  If you can point me at some good Erlang example files to run through some tests I will post some better regex here for you.\n. @eproxus Let me know if this works well for you:\njavascript\n        // Erlang conditional statements\n        {\n            \"name\": \"erlang\",\n            \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n            \"enabled\": true\n        }\n. @eproxus I would love to merge this for you, but I need you to verify my changes.  I don't use Erlang, so I need someone who does to verify that this works as expected.\nIf issues remain too long with no progress being made, I will be forced to close them.\nThanks\n. It appears that this pull request is dead.   If there is no response by the end of the week, I will close this issue.\n. Due to inactivity, I am closing this pull request.\n. Thanks for letting me know it works. It has now been merged.\n. Yeah...probably...whoops!   I don't use ruby, so unless someone tells me I got sloppy, I'd never notice :smiley: .\n. Yeah.  You can also just use \\d instead of 0-9.  I will fix this later today.\n. Fixed on branch\n. Are you using the main branch (BH1) or the alpha (BH2) branch?  The BH2 branch already has in place icons for using { and  } on separate lines and {} for same line.  They are still icons though.\nST2 does not support fonts directly in the gutter, so that is currently out of the question.  Also the positioning of images within the gutter icon shifts for small icons (when lines are small).  So you would have to generate two variants of icons.  Also, not all brackets use font icons because some can't fit in an icon (this is even more the case for BH2's ability to create custom brackets, so some brackets will just use generic icons.\nAnother thing, ST2 seems to cache icons, so if an icon has been loaded already into a gutter, and it changes with the theme, you won't see it update.\nI don't mind including a supplemental tool to aid people in creating new icons, but I currently don't have the time or interest to implement one at this time.  I would be happy to include one if someone else provided one with a reasonable license, or at least point them in that direction if the license was too strict.\n. Yeah, BH2 is still an alpha, so there is a chance I will break things :smiley:.  That is why Package Control does not install that branch yet.\n. cshtml is not a standard html file.  BracketHighlighter cannot be expected to know every obscure language out there without input from the user.  Tag searching and angle bracket searching can cause issues sometimes matching brackets in non-html languages that don't scope < and > as keyword operators and have them outside of string scopes, so I use a whitelist to only search them in languages that use HTML.\n``` javascript\n    // exclude or include bracket by language type (example: C++ for C++.tmLanguage)\n    // Note: this is particularly useful with Angle. Some languages do not attribute any special scope to angle brackets making it hard\n    // to tell when the bracket is beign used in a valid scenario.  C++ is a perfect example.  It is better to disable completely than\n    // to ignore angle.  Ignoring will not show angle matches, but will also interfere with other bracket matches.\n    \"angle_language_list\" : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\"],\n    \"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\"],\n    \"quote_language_list\" : [\"Plain text\"],\n    \"curly_language_list\" : [\"Plain text\"],\n    \"round_language_list\" : [\"Plain text\"],\n    \"square_language_list\": [\"Plain text\"],\n//filter type (whitelist|blacklist)\n\"angle_language_filter\" : \"whitelist\",\n\"tag_language_filter\"   : \"whitelist\",\n\"quote_language_filter\" : \"blacklist\",\n\"curly_language_filter\" : \"blacklist\",\n\"round_language_filter\" : \"blacklist\",\n\"square_language_filter\": \"blacklist\",\n\n```\nWhatever language you are using to highlight cshtml, should be added to the whitelist for angle and tag (name of the tmLanguage file; don't include the extension).\nI have never enabled tags in cshtml language files, so it may work perfect...it may not.  I don't know how different the syntax for cshtml is.\nLet me know if this helps.\n. I will give this issue another week, and if i do not here a response, I will consider it resolved.\n. Thanks for responding back.\n. You can already set it to use simple colored underlines, you can also turn off icons if they are too much as well.  Just look in the settings file and change solid to underline for the brackets you want to change.  In BH2, which I hope to release sometime soon, underline will be the default.\n. I am closing this issue since the ability to do simple underlines already exists.\n. Yes and no.  The main branch does not and cannot highlight ruby code blocks, but the BETA BH2 branch can and does https://github.com/facelessuser/BracketHighlighter/tree/BH2.  It was a complete re-write of the plugin to allow for such things as custom brackets, and to expose, as much as possible, the inner workings to allow users of the plugin to define custom brackets so I don't personally have to add support for every language out there that I may or may not use.\nIt is pretty close to being done.  Documentation was never really good on BracketHighlighter...pretty much non-existent. I am currently working on actual documentation for the BH2 branch.  The BH2 branch is meant to replace the current Master branch as soon I am finished and have determined it to be as bug free as possible.\nBH2 branch should be very stable; I use it full time now without issues and I currently have no known bugs on my plate with it, nor do I have any other features currently planned for it.  Feel free to give it a try and let me know if it works for you.\n. Duplicate of Issue #12.  Will be resolved in new BracketHighlighter release when completed.\n. I would check out Issue https://github.com/facelessuser/BracketHighlighter/issues/38.  This seems to be a duplicate.\nThere are limitations to what we as plugin developers can do with the ST2 API.  There are times when having a higher visibility for brackets and bracket content would be nice so Issue 38 was solved by adding a high visibility mode that can be toggled.  That is pretty much the best you are going to get with the current ST2 API.\nThis feature only exists on the BETA branch of BracketHighlighter that is to be released sometime soonish.\n. Check out Issue #12.   This is a duplicate issue, so I am going to close it.  By the way, this is already implemented on the Beta branch for the next major release of BracketHighlighter.  You can check it out here https://github.com/facelessuser/BracketHighlighter/tree/BH2\n. If you are using the Beta branch (that will be the new official release when I finish it) it can detect missing brackets (for the most part).\n\nIf brackets are very far apart, they will also appear with a question mark, but if you use the shortcut to do an on demand match or use the shortcut to jump between the brackets, it will match them regardless of how far apart they are.\nBH will only match brackets within a threshold during automatic matches to keep from bogging down the editor.\nFYI, the Beta branch does not define shortcuts anymore, but simply provides an example shortcut file.  There were shortcut conflicts between ST2 and BH, so now I let the user define the shortcuts how they like.\nThe beta branch is here: https://github.com/facelessuser/BracketHighlighter/tree/BH2\n. BracketHighlighter 2 is now on the master branch.  This issue is now solved.\n. It's not silly at all.  BracketHighlighter already has the ability to configure the colors, but due to the limitations of ST2, I cannot simply put the colors in the settings file.  Please see Issue #21 to read about how to change colors in BH.  The next release will have actual documentation.\n. This is not controllable by Bracket Highlighter.  This is a Sublime Text issue.  I would suggest using underline style if you are having a difficult time seeing the caret.  Sorry.\n. Sorry, Sublime Text is what draws the outline when using solid, not the plugin.  I have no control over the outline when using solid.\n. I am not saying you border them, I am simply saying, Sublime, when it draws solid regions will draw different colored borders depending on the solid color.  Some solid colors, you don't really notice a border, but others, you do.  There is absolutely nothing I can do about this.  I am simply using the Sublime API to draw regions; there is no other way to draw regions but to use the Sublime API.  I wish I could do more, but I can not.\n. I really don't have any interest in attempting to implement this.\nIf some wants to do the work and make this optional and work in such a way that it doesn't interfere with bracket plugins, I will gladly pull it.\n. Would love to.  I have tried.  Highlight regions are created by the ST2 API.  I have tried to do such things like playing with the themes foreground and background colors to kind of create that, but it didn't not seem to work.  There is no way to specify a region to change just text color.  Sorry.  If anything changes in the future I will revisit this.\n. This exists already on the BH2 branch.  On the BH2 branch you can define any arbitrary brackets you like.  A lot of work went into completely rewriting BH to do stuff like this.  You can try it now if you like.  I use it everyday.  I have just been meaning to finish documentation before officially releasing it since a lot of things have changed.  I have some stuff that keeps getting in the way of me finishing the documentation etc.\n. You can look at the bh_core.sublime-settings file and see a lot of examples.\nFor instance  CSSEdit uses a notation that I configured for someone that they use to block off CSS stuff\n``` css\n/ @group something /\n/ @end /\n```\nIt is configured like this:\njavascript\n        // CSSedit groups\n        {\n            \"name\": \"cssedit_groups\",\n            \"open\": \"(/\\\\* *@group .*\\\\*/)\",\n            \"close\": \"(/\\\\* *@end *\\\\*/)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"CSS\"],\n            \"enabled\": true\n        },\nKeep in mind the regex for open and close must only have one capturing group.  And remember that since the regex is contained int he json string in the settings file, you have to do string escapes as well.\nIf you are really having a hard time with this, let me know, and I will see if I can throw something together when I have some free time.\n. There are a number of Bracket Plugins for doing special things with brackets...one is folding.  I don't define any keymaps by default, but I do provide the commands in the command palette and under the menu item Tools->Packages->BracketHighlighter.\nIf you want a keymap, look at the example https://github.com/facelessuser/BracketHighlighter/blob/BH2/Example.sublime-keymap#L121\nSublime Text won't allow me to create a fold triangle, but with a simple keymap you can simply place your cursor between them and hit the shortcut and fold.\n. Thanks!\nHopefully I will find the time to finish up the documentation and officially release BH2 soon.\n. Yeah, I know the new way is much more convoluted, but it is much more flexible... trade-offs and all that...\nEasiest way is just copy the entire bh_core.sublime-settings to your User directory.  Then probably just modify this below:\njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)\",\n            \"close\": \"(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\nThe tag matching is actually a bracket plugin that is applied to angle matches, so its settings I have included at the bottom of the settings file.  I assume you would just be adding this for HTML.\njavascript\n    // Determine which style of tag-matching to use in which syntax\n    \"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\"HTML\", \"HTML 5\", \"HTML (Jinja Templates)\", \"PHP\"],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\n. Try restarting ST3.  There are some things that still are not implemented in ST3, namely the function that run functions when settings file get updated on_change.\nYou can see here in the sublime.py that they are not implemented:\n``` python\n    def add_on_change(self, tag, callback):\n        print(\"Not yet implemented!\")\ndef clear_on_change(self, tag):\n    print(\"Not yet implemented!\")\n\n```\nYou can also see that BracketHighlighter 2 relies on them to reload the bracket class when the settings get updated.\n``` python\nclass BhCore(object):\n    \"\"\"\n    Bracket matching class.\n    \"\"\"\ndef __init__(self, override_thresh=False, count_lines=False, adj_only=None, ignore={}, plugin={}, keycommand=False):\n    \"\"\"\n    Load settings and setup reload events if settings changes.\n    \"\"\"\n\n    self.settings = sublime.load_settings(\"bh_core.sublime-settings\")\n    if not keycommand:\n        self.settings.clear_on_change('reload')\n        self.settings.add_on_change('reload', self.setup)\n    self.setup(override_thresh, count_lines, adj_only, ignore, plugin)\n\n```\nI couldn't get Jinja to work with BH2 until I restarted ST3 because the bracket class never re-initialized when the settings changed.\nThis will work when Jon gets around to implementing the rest of the API.\n. Make sure you are using the very latest version.  I was having that issue on OSX as well.  Jon changed some things about default packages, and OSX seems to not be able to find Theme - Default.  Icons must be relative to Theme - Default because Jon hasn't really added support for directly specifying where gutter icons are (I am kind of uses a hack).\nSo to fix this, I create a Theme-Default in the User Packages directory, and gutter icons began working for me.\n``` python\ndef plugin_loaded():\n    global bh_match\n    bh_match = BhCore().match\nicon_path = join(sublime.packages_path(), \"Theme - Default\")\nif not exists(icon_path):\n    makedirs(icon_path)\n\nif not 'running_bh_loop' in globals():\n    global running_bh_loop\n    running_bh_loop = True\n    thread.start_new_thread(bh_loop, ())\nelse:\n    BhThreadMgr.restart\n\n```\nIf you don't see icon_path being created at the bottom of your bh_core.py file, you need to update, and probably restart ST3.\n. Oh, you mentioned colors...not icons in general.  You probably have to reconfigure colors:\nBrackets now have a style atribute you must configure:\njavascript\n// Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)\",\n            \"close\": \"(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\nIt is linked to the style object settings under bracket_styles  where color is the scope in your theme file.\njavascript\n        \"angle\": {\n            \"icon\": \"angle_bracket\",\n            \"color\": \"brackethighlighter.angle\"\n            // \"style\": \"underline\"\n        },\nIt is done this way so that you can define style profiles, and multiple bracket types can use the same style.  Again, convoluted, but flexible.\n. Tags of course have their own style setting because it is a separate plugin.\njavascript\n    // Style to use for matched tags\n    \"tag_style\": \"tag\",\n. No problem.  Hopefully I will get the documentation done soon to curb confusion in the future.\n. Not at the moment.  I can look into though when I have the time.\n. This now exists on the BH2ST3 branch.  I will backport it to the BH2 branch when I have some time.  I only plan on supporting this for BracketHighlighter2 branches, so if you are on ST2 and still using the master branch, it will not receive this feature.\n. This now exists on the BH2 branch for ST2.  As stated earlier this will not be backported to the BH1, but BH1 will be replaced with the BH2 branch as soon as I finish up documentation.  Give it  a try if you haven't already.\n. Yes BH2 functionality and features are complete and it is stable now.  Documentation is all I need to do...but it is the part I dislike the most.\n. Package Control has a command \"Add Repository\".  For ST2 I would use this as the repository: https://github.com/facelessuser/BracketHighlighter/tree/BH2, and for ST3 I would use this one: https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3.  After that you can perform an upgrade.\nSide note, ST3 Package Control seems a little sketchy with upgrades, sometimes it can take a day before it will properly pull down the upgrade...it is almost like it doesn't update its internal list very often of when to upgrade...there are times I have been forced to install a repo manually because ST3 Package Control won't pull down the update.\n. You are using the old BracketHighlighter which isn't going to be ported to ST3.  Use the BracketHighlighter2 for ST3 branch https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3.\n. Take a look in the settings file.  You can define what kind of bracket highlighting you want with what syntax.\n. Yes, all styles are configurable in the settings file.\n. I will be honest, I don't know much about latex.  With that said, the dollar sign is changing the syntax highlighting significantly.  I am sure that is having an unexpected effect on BracketHighlighter.\nI don't know how familiar you are with latex either (new or a seasoned veteran)  but are you sure your syntax is correct?  I imagine the LaTex syntax highlighter is doing something weird when you add the dollar sign, and that affects BracketHighlighter causing brackets to not get marked.\nWhen I add the dollar sign on my machine, the syntax color of my brackets change, meaning the scope of those brackets are changing.  You need to first find out if the syntax highlighter is incorrectly scoping latex stuff, or if you are using bad syntax first.  Once we determine that, I can see if there is something that needs to be done on my part.\n. Please respond to the issue so I can evaluate this request.  If I do not hear a response by the end of next week, I will close this issue.\n. Well, it sounds like you figured things out?  I will go ahead and close this issue.  If I am mistaken, feel free to reopen it.\n. I don't use Latex, but make sure your syntax is proper.  Referencing Issue #39, the example provided to me works fine using the Latex syntax.  I don't understand what you mean by \"regular prose\" in Latex, since I don't use this language.  If you are desiring me to look into an issue, I will need detailed info like example code, what syntax are you using to highlight your code, etc.\nI will be honest though, I have coded the new BracketHighlighter to empower users to add support for their desired languages since I do not use every language, so please spend some time and try to solve this issue and create a pull request, if not, I will get to it when I have time.  I have a couple of issues right now that will take priority over this.\n. While I agree that ST3 Pacage Control is sketchy with side branches and upgrades of repos, this is not a BracketHighlighter issue, but an issue with Package Control.  Package Control provides a command \"Add Repository\" which allows you to add alternate branch which are supposed to override the default, but on ST3 Package Control seems to not to work well with this.\nI have no plans to merge the ST2 branch and the ST3 branch of BracketHighlighter together; I will support these branches individually until I get tired of supporting both or when ST3 releases (which ever comes first).\nEventually I may swap the master branch with the ST3 branch putting ST2 branches on the side branch having ST3 on the master branch.\nI would create an issue on Package Control.\n. Yes, BH2 is a colossal re-write from the ground up.  I am expecting a crap storm about this which is why I plan on leaving this issue open or creating an issue called \"OMG BH CHANGED!\",  so I can redirect everyone there :smile:.\nBH2 pushes bracket highlighting as far as it can go, adding features people have been wanting for for a long time that just weren't possible before due to the pyparadigm's (the author long before I set in to fix and add everything I felt was missing) original implementation.  I put off a rewrite for a long time, but finally got around to doing it.  BH2 is now flexible enough so a user can configure almost any kind of bracket highlighting they can think of: conditional statements, if statements, compiler switches, etc.  In most cases it is faster too.  Now user's can add anything without me having to update the core code (yea easier maintenance).  I have explained everything (yes it is a little complicated, but its all there), so now users can add their own custom brackets and pull request them if they are common enough.\nThere is no way I could make BH2 backwards compatible with the BH1 config file.  I wanted to, but in order to pack in all the features and configurability, I had to rethink the settings.  I agree that the new settings file is more convoluted, but it had to be to allow all the flexibility.\nNever could get messages to work in the past, but I really haven't felt like giving it another go right now, but I plan on creating a packages.json file moving forward with the new Package Control for ST2 and ST3 (when it is more mature and the package channel supports it).  I hear it is much easier to get messages working when you are managing your own packages.json file because you can trigger the message off of versions opposed to stupid timestamps.\nSo yes, I expected an issue like this to appear, but I sat down yesterday writing up that long documentation (I hate doing documentation :smile: ) to educate people on how to resolve these issues, which it looks like worked well for you.  Even with a message, I am sure people will be scrambling and creating issues so that I can explain to them how to get things back to the way they were because they don't want to take time to read the documentation, but it is all there.  If you feel it can be more clear, please feel free to contribute to the documentation to make it easier for people.  I realize this is a huge change moving forward, but one I spent a long time on for everyone so they can finally have and do all those things they have wanted for oh so long.\n. By the way, the pngs were never in color;  I just used a color scope by default in the setting, and on some color schemes it was quite ugly, so now I make sure they are the color of normal text which is less jarring by default.\n. It is funny, when I defaulted the original BH to a color for gutters, some people liked it, some people really hated the color since it is different in different color schemes.  All I can do is set it to a scope, and the color scheme decides what that scope color is.  Example configs are good though, especially to show what can be done.  Maybe the wiki would be a good place for stuff like that.\nThere is a ST3 branch here https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3.  The code is a little different due to the way ST3 and Python3 do things differently, but configuration and functionality is the same.  It just makes is sloppy to having one branch supporting both ST2 and ST3.  The new Package Control (still in development) is supposed to make it easier for developers to point users at a specific branch for ST2 or ST3, so that is what I am waiting for, and another reason I will need to create and host a package.json file moving forward.\n. You have to use the branch I pointed you at for ST3 above.  That kind of stuff is fixed in that branch.\n. This is related to issue #72 \n. Depends, have you ever configured your colors previously, or were they always green by default?\n. Well this recent version is a complete re-write, and everything is done different so that I can provide more flexibility to users and new features; you should read the section about customizing colors.\nI used to set it to scope color to entity.name.class by default, now I set it to brackethighlighter.default which doesn't usually exist in people's color scheme files forcing the color to be the color of normal source code.\nSo look fo this section:\njavascript\n        // \"default\" style defines attributes that\n        // will be used for any style that does not\n        // explicitly define that attribute.  So if\n        // a style does not define a color, it will\n        // use the color from the \"default\" style.\n        \"default\": {\n            \"icon\": \"dot\",\n            \"color\": \"brackethighlighter.default\",\n            \"style\": \"underline\"\n        },\nand change it to this:\njavascript\n        // \"default\" style defines attributes that\n        // will be used for any style that does not\n        // explicitly define that attribute.  So if\n        // a style does not define a color, it will\n        // use the color from the \"default\" style.\n        \"default\": {\n            \"icon\": \"dot\",\n            \"color\": \"entity.name.class\",\n            \"style\": \"underline\"\n        },\n. Hmm...maybe I will revert it back and once again bring sunshine and rainbows to all those who have felt lost without their green icons (or insert other color if they used a theme other than Monokai).\nIf someone wants to create a pull request, it will probably get in that much quicker.\n. It works fine on every system.  Did you copy the entire bh_core.sublime-settings to your user folder and then make the edits.  This is what I use:\nXML\n        <dict>\n            <key>name</key>\n            <string>Bracket Tag</string>\n            <key>scope</key>\n            <string>brackethighlighter.tag</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66CCCC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Curly</string>\n            <key>scope</key>\n            <string>brackethighlighter.curly</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#CC99CC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Round</string>\n            <key>scope</key>\n            <string>brackethighlighter.round</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#FFCC66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Square</string>\n            <key>scope</key>\n            <string>brackethighlighter.square</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699CC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Angle</string>\n            <key>scope</key>\n            <string>brackethighlighter.angle</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#F99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Quote</string>\n            <key>scope</key>\n            <string>brackethighlighter.quote</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99CC99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Unmatched</string>\n            <key>scope</key>\n            <string>brackethighlighter.unmatched</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#F2777A</string>\n            </dict>\n        </dict>\nsettings:\n``` javascript\n    \"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracekt pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\",\n        \"color\": \"brackethighlighter.curly\"\n        // \"style\": \"underline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\",\n        \"color\": \"brackethighlighter.round\"\n        // \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\",\n        \"color\": \"brackethighlighter.square\"\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\",\n        \"color\": \"brackethighlighter.angle\"\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        \"style\": \"outline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"star\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    }\n},\n\n``\n. Were you having a problem with the selection style?  You can override them for certain brackets or change the default which affects all that do no specify their ownstyle`.\nGlad you got it working though.\n. Okay, the default color scope from BH1 is now the default color scope in BH2.  This should relieve a number of confused people who don't have their green (or whatever color it is in their specific scheme for entity.name.class) in BracketHighlighter.  I guess once I had established the default color, I probably shouldn't have tried to change it.\n. I have reverted the default color back to brackethighlighter.default  it appears some people are starting to use the default as I had originally hoped they would in theme files.  I feel that this is probably more important than keeping with the BH1 legacy convention.  This may annoy people coming from BH1, but I much prefer theme files specifying the colors than BH picking some random scope that may just be awful in other themes.  I am sorry if this disappoints anyone.  I probably should have stuck to my guns on this one opposed to waffling...oh well.\n. @micck\nIn regards to thin underlines, squiggly, etc, they do not work for BH2.  These were adding in ST3 only recently.  Nothing I can do about that.  There is no API access to them in BH2.\nIt should work fine without restarting...it does for me.  I have absolutely no control over that though, that is all controlled by Sublime.  The plugin simply keeps setting up regions with that scope, it is Sublime's job to use the appropriate color or refresh the internal tables to pick the appropriate color, I have no way of forcing sublime to do that.\n. I would love to back-port the new highlight styles into ST2...but Jon is pretty much done with ST2, so I don't imagine any of the new styles will ever make it back to ST2...which is a shame, because some of the new styles are pretty cool.\n. @aaronmw You didn't install the ST3 branch.  The ST3 branch doesn't have any calls to begin_edit anymore, because begin_edit isn't properly accessible anymore.\n. @RobGraham It is more because Package Control for ST3 is still in development.  All of my plugins work on ST3, you just have to install the ST3 branch.\n@aaronmw You can try adding the BH2ST3 branch using the add repo command in Package Control, but I always just use git directly;  read here https://github.com/facelessuser/BracketHighlighter/issues/96#issuecomment-17877880\nAs soon as Package Control for ST3 is working and wbond posts the info for how to post separate branches for a plugin using the new framework, I will have all my packages added to Package Control for ST3.  But wbond has been pretty busy.\n. This has been open for a while, and I think most people now know what is going on.  Closing this issue.\n. There is a module load issue that was introduced recently that some how got missed before pushing the new BH2.  I should have a fix shortly.\n. tags.py module had carriage returns and that seemed to cause some issues loading it on some computers.\nLet me know if it is fixed for you.\n. Hold on sync didn't go through\n. Okay it should now be fixed; let me know if it is still broken for you.\n. Extra protection has been added as well. When bracket plugins are read in, carriage returns will be stripped.  I have verified the issue is fixed.\n. Yeah, sorry, I rewrote module import and testing all plugins...except tags.  Didn't know carriage returns would be an issue.\n. To ensure good performance, BH has a search threshold https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L22.\nSo, brackets that simply can't be matched or (due to the threshold) brackets far away won't match by default, and you will often get a question mark.  If you want to match brackets far away or jump between them, you can add a shortcut.  Manually calls to BH ignore thresholds:\nThese are from Example.sublime-keymap found on the repo:\njavascript\n    // Search to end of file for bracket\n    {\n        \"keys\": [\"ctrl+alt+super+b\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true\n        }\n    },\n    // Go to left bracket\n    {\n        \"keys\": [\"ctrl+alt+super+up\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\n    // Go to right bracket\n    {\n        \"keys\": [\"ctrl+alt+super+down\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\"}\n            }\n        }\n    },\nYou can also play with the threshold to see what your machine can handle.\n. You mean from command palette?  Menu Tools->Packages->BracketHighlighter?  Or from the example keymap?\nIt should just perform a match in place without threshold.\nKeymap example:\njavascript\n    // Search to end of file for bracket\n    {\n        \"keys\": [\"ctrl+alt+super+b\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true\n        }\n    },\nFrom the menu:\njavascript\n                            // Search to end of file for bracket\n                            {\n                                \"caption\": \"Match Brackets (ignore threshold)\",\n                                \"command\": \"bh_key\",\n                                \"args\": {\"lines\" : true}\n                            },\nFrom the command palette:\n// Search to end of file for bracket\n    {\n        \"caption\": \"BracketHighlighter: Match Brackets (ignore threshold)\",\n        \"command\": \"bh_key\",\n        \"args\": {\"lines\" : true}\n    },\nThey are all implemented the same way.  Are one or more or all of them not working?\n. I am seeing the issue too, but it is working for me from the menu, but not the palette.  You can see they are configured the exact same way...I will look into it, but I think this may be a Sublime bug because the command looks to be configured correctly.  I will verify everything tonight.\n. For some reason, it appears in ST3, the window gets activated again after the command palette one is called, so then the view reruns the match command with the threshold...but it doesn't seem to do it with the jump between brackets which makes no sense.  I will see if I can hack a fix in there later.\n. Should be resolved.  Let me know if you are still having this problem after updating.\n. Just Ruby and Plain Text, or every file?  Did you restart after you installed, because it is best to do that after installing BH.  \nBy default, it won't match brackets in plain text.  Code is usually very structured, so you can count on there not being any hanging brackets.  Plain Text is has no format so anything goes which is why I ignore Plain Text, but if you want to catch brackets in Plain Text, copy bh_core.sublime-settings to your user file and remove \"Plain Text\" from the blacklist for the brackets you want to be able to find.  Quotes won't work in Plain Text since Plain Text doesn't scope strings.\nLet me know if you are still having issues after restarting etc.\n. BH is developed on MAC (since that is what I have at home) and tested well on Windows (that is what I use at work).  \nSo the original question is:  Does it not work in all files?  Did you try enabling it in Plain Text via the instructions I gave above?\nAlso, do you see any errors in the Console?\n. I can't reproduce your issue on MAC at all. How did you install the plugin?\n. I am closing this issue since I have heard no response, and it appears to be an issue specific to your machine.\n. This is probably because you haven't added the HTML (Rails) syntax file to the Angle and Tag structures in the settings file.  Take a look at bh_core.sublime-settings and let me know if you have more questions.  Remember, the name that goes in the settings file is the name of the syntax file, not the text that pops up in the bottom right hand corner of your screen.  If you want such functionality added by default, make a pull request.\n. Fixed\n. Thanks!\n. I believe it is because <input> is a self closing tag (it doesn't have a closing tag even though you include it).  I think BH 's current logic is to not look for a closing </input> on tags that are explicitly self closing which throws it off.  Click on the opening input, and BH won't even try and match the closing </input>\nWith that said, BH should probably try and handle this situation better, so I will look into it.  But if you remove the self closing </input>, BH will function normally.\n. See this to see what I mean: http://www.456bereastreet.com/archive/201005/void_empty_elements_and_self-closing_start_tags_in_html/\nI will look into adding logic to handle your situation, but technically, from what I understand, input tags do not require a closing.\n. I will consider logic to not get tripped up on this in the future, but I will close this issue for now since technically the issue is with invalid document format. \n. It could, but I don't use Rspec. I would read the readme and look at the current examples and see if you can put together a pull request. I have exposed everything so others can add support for their favorite languages. \n. 2 weeks old, so I am closing this.  If you do end up doing some work on this, but get confused or stuck, I would be happy to help, but I do not plan on implemented bracket selections for languages I don't use, I prefer to assist those looking to add their own language so I can offload the work and spend time fixing bugs for this and my other plugins.\n. This is a question I get every now and then.  There is a search threshold that limits the distance searched to keep the plugin snappy on auto-matching.  You can adjust the threshold in the settings file if you want, but there will always be a threshold.\nBut in these situations, you may still want to quickly see the match, or even jump between them.  All of the plugin calls are configured to ignore the threshold since they are only called \"on-demand\".\nTry any of these commands from the command palette, and you will see it match them.  You can bind these to shortcuts if you want.  I have provided an example keymap file with the plugin.\njavascript\n    // Search to end of file for bracket\n    {\n        \"caption\": \"BracketHighlighter: Match Brackets (ignore threshold)\",\n        \"command\": \"bh_key\",\n        \"args\": {\"lines\" : true}\n    },\n    // Go to left bracket\n    {\n        \"caption\": \"BracketHighlighter: Jump to Left Bracket\",\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\n    // Go to right bracket\n    {\n        \"caption\": \"BracketHighlighter: Jump to Right Bracket\",\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\"}\n            }\n        }\n    },\n. Fixed\n. Yeah, I was just happy I finished writing it.  Thanks for making it easier to navigate.\n. Good catch, though what you are doing fixes one issue, the full fix needs a bit more.  I was going to suggest the rest of the fix to you, but then I just decided to do it because it was easier to do it than explain.  Thanks for pointing this out; I was too quick with the initial addition.\nThe fix is in facelessuser/BracketHighlighter@1be871d212092250a96860b672d89ab73c1b1b98\n. Well, first lets not get too snarky about the \"improvements\".\nWhat do you mean it can't find the parent div?  Post some example please.  The new BH can search further faster.  The default threshold is much greater on BH2 than it ever was on BH1.  I have also been over the algorithm extensively.  Usually when a user reports that BH cannot find a tag, it is because the formatting of their HTML is bad or non-standard or something like that.  Web browsers are extremely forgiving of bad tags...BH will not be so forgiving.  If it is highlighting the wrong tag or no tag, it is more than likely your HTML format.\nSo please post an example of your code.\n. Okay, so that is the expected when the threshold gets larger.  I believe BH1 had a character threshold of 2,000 by default.  BH2 by default has 5,000 I think.  I personally use 10,000 on BH2 with no issues; BH1 would have choked on 10,000...so improvement.\nSo I don't really understand your claim about BH1 never having this problem.  The search algorithm was much slower in BH1.  And BH1 would not have even alerted you it gave up on searching, it would have simply shown nothing while BH2 alerts you with the question mark.  I can't see how much content is on each one of your lines, but the more content it has to search through, the less lines it can match a bracket across.\nI also provide a command to that will allow you to search with no threshold on demand in the command palette, or even jump between the brackets without a threshold, but the performance hit for automatic matching would be too much without the threshold...as it was in BH1.\nTweak the value to what you find appropriate for distance and performance.\njavascript\n    // Character threshold to search\n    \"search_threshold\": 10000,\nUse the command palette to jump between or view brackets with no threshold.  Bind them to shortcuts if you prefer.\nPost bugs and/or questions kindly without insulting the hard work I have put into this plugin.  I do this for free and make it publicly available, and I take time to respond to people with issues, and even implement things I don't need by request on occasions for people.\n. BH2 was a massive re-write.  I have gotten requests for awhile about highlighting in all sorts of languages that just wasn't possible in BH1.  I turned down the requests for a long time, or simply just told them it may happen one day in the future.  I finally took the time to re-write the plugin completely from scratch making it fully customizable, and surprisingly faster as well.  So there are a number of very happy people with this re-write.\nPeople don't like change, and I get that.  BH2 is radically different in how it is set up etc., but it had to be.  People have a tendency to complain more than they praise.  Sometimes a certain phrasing can rub me wrong, and if I am having one of those days, I will vocalize my displeasure.  I think you just struck a nerve with me today.\nWhen doing a massive re-write like I did, sometimes some functionality can be forgotten or overlooked.  If BH ever doesn't match a bracket that is far away for me, I usually just use a shortcut to jump to the opposing bracket to see where it is, so it didn't occur to me that people want or used the disabling of thresholds in BH1, so it got overlooked.  I also beta tested this in the forums for a while, and no one ever mentioned the lack of that feature.\nIf you would like the ability to ignore the threshold, I can expose that functionality...all you have to do is ask :smile: .  I will try and look into it in the next couple of days.\n. BracketHighlighter has its own plugin system to make adding and maintaining new features easy for me.  This way, I rarely have to modify the core code for new functionality.  All BracketHighlighter plugins currently run without thresholds because they are \"on demand\"  and not \"automatic\".  They are all available in the command palette, but I provide an example key map file that shows how to configure shortcut binding in your User/Default.sublime-keymap file.  So selecting content between brackets and/or jumping between brackets is performed by BracketHighlighter's internal bracketselect plugin.\nJump left: https://github.com/facelessuser/BracketHighlighter/blob/master/Example.sublime-keymap#L16\nJump right: https://github.com/facelessuser/BracketHighlighter/blob/master/Example.sublime-keymap#L31\nSo if you drop these two keybindings in your Default.sublime-keymap file in your User folder, you will have the functionality I speak of.  Or you can just bring up the command palette and start typing \"BracketHighlighter\" and you will see all of BracketHighlighter's commands.\n. ignore_threshold setting has been added.\n. Oh, that is weird...well, I don't use Ruby, so when I get some time, I will take a look, but I will get a fix in hopefully within the week.\n. @fabianfetik \n\nReasons why you would have to match every single legal unicode character, in my opinion, is because of possible (although admittedly ill-advised) behaviour in ruby where you can have any character in a method or variable name. (see http://www.rubyinside.com/the-split-is-not-enough-whitespace-shenigans-for-rubyists-5980.html for a representation of that)\n\nThis is why ruby and perl kind of annoy me, they are hard to parse.\n\njust found this which would add that support https://pypi.python.org/pypi/regex\n\nThis is neat, but then I have to compile it for all platforms...not probably going to happen.  So what then?  I stumbled upon someone who coded up a hack in the public domain, that is more portable for a plugin http://difnet.com.br/opensource/unicode_hack.py.txt.  The only slightly annoying thing is that it wraps the unicode in square brackets all the time, so if you put the notation \\p{Lu} between square brackets, you get nested square brackets.  I could probably add some preprocessing step to select when to add square brackets.  It would be a little slower, but I compile the regex upfront anyways.  I think this is path I am more likely to take.\n. I am in no hurry.  I am very much of the opinion of putting the work in up front to save work later.  Even if I don't use the unicode stuff in the ruby regex, it would be available for the future.  More and more I plan on pushing that people put in the effort to come up with their own regex definitions opposed to me doing it for them.  I have provided the framework, and  I am getting a bit tired of requests for language X (that I don't use and have very little knowledge of, so I then have to research that language etc.) and no effort being put in to help me add the language syntax support that is desired except creating an issue on the plugin.\nPS. I am not complaining about this issue, just ranting in general.  I want to give people sufficient tools so that I can just merge pull requests or fix actual bugs or add actual features...that is what I plan on pushing for and why I think I might add the unicode property support to make things easier on other people adding/fixing language X..\n. The more I thought about what I wanted, the more I decided I just needed to write my own unicode properties script https://github.com/facelessuser/BracketHighlighter/blob/master/ure.py\nIt builds up the unicode properties table via unicodedata module and wraps re with functions that will look for unicode properties and insert them correctly whether they are in character groups or not.  Then it calls re.\nThis should allow logical inclusion of unicode properties in regex:\npython\nr\"[\\p{Ll}\\p{Lu}]\"\nr\"\\p{Ll}\\p{Lu}\"\nRuby stuff seems to be working now, I may need to tweak some stuff if we run into a weird case, but hopefully things are working well now.\n. Not currently.  It is all or nothing right now.  I hadn't considered that some may desire greater resolution with this.  I will look into allowing per bracket override for this feature.\n. Just to let you know, if allowing per bracket resolution for the feature requires massive internal changes, I may pass or wait a while before implementing this.\n. I will take a look.  This might be easier.  There might be some minor side effects, but I probably can do this.  What it would probably do is allow Tag to trigger on adjacent or non-adjacent based on user input, but if it does, when it isn't triggering, it would default to angle highlight based on the global rule.  If that is sufficient, I can probably do that.\n. This is currently more complicated than I care to to do right now.  I will take this as a consideration maybe for the next major release (BH3; don't ask when this will be because I have no roadmap;  it is more like when I feel like overhauling major stuff), but I don't think I will be adding support for this in the immediate future.\n. Please see this post regarding HTML (Rails): https://github.com/facelessuser/BracketHighlighter/issues/75#issuecomment-16082517\nPS. Thanks!\n. Oh, my mistake, you are commenting on the if, end statements.  You would need to add a new bracket definition.  If you need help, please provide example code, and when I have time, I will see if I can get one working.\n. This should hopefully work now.  Let me know.\n. Try restarting.  It is working for me:\nST2:\n\nST3:\n\n. Did you edit your Ruby definition at all?  Your debug looks different from mine:\nBracketHighlighter: Search patterns:\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\])|(<)(?!\\?|%)|(?<!\\?|%)(>)|(?:<%\\s*\\b|^\\s*\\b)((?:(?:if|case|until|unless|while|begin|class|module|\\bdo)\\b|def\\b[\\p{Ll}\\p{Lu}]*))|\\b(end)\\b)\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S]))\n. I think I know what your problem might be; disregard the earlier reference of adding HTML (Rails) to your Ruby definition, your definitions for angle, ruby_embedded_html, and ruby should look like this as found in the default settings: \njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?|%)\",\n            \"close\": \"(?<!\\\\?|%)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\n        // Ruby embedded HTML\n        {\n            \"name\": \"ruby_embedded_html\",\n            \"open\": \"(?:<%\\\\s*\\\\b|^\\\\s*\\\\b)((?:(?:if|case|until|unless|while|begin|class|module|\\\\bdo)\\\\b|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*))\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"source\", \"comment\", \"string\"],\n            \"scope_exclude_exceptions\": [\"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Rails)\"],\n            \"enabled\": true\n        },\n        // Ruby conditional statements\n        {\n            \"name\": \"ruby\",\n            \"open\": \"(^\\\\s*\\\\b(?:(?:if|case|until|unless|while|begin|class|module|\\\\bdo)\\\\b|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*))\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Ruby\"],\n            \"enabled\": true\n        },\n. Yeah, I broke do loops a couple commits ago.  I should have a fix soon.\n. Okay, I fixed a number of regressions and patched rubykeywords.py.  Make sure your ruby settings match:\njavascript\n        // Ruby embedded HTML\n        {\n            \"name\": \"ruby_embedded_html\",\n            \"open\": \"((?:<%\\\\s*\\\\b|^\\\\s*\\\\b)(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"source\", \"comment\", \"string\"],\n            \"scope_exclude_exceptions\": [\"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Rails)\"],\n            \"enabled\": true\n        },\n        // Ruby conditional statements\n        {\n            \"name\": \"ruby\",\n            \"open\": \"(^\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Ruby\", \"Ruby on Rails\"],\n            \"enabled\": true\n        },\n. One more fixed was just pushed.  There was a strange windows issue with the regex, and there was an issue where if statements etc would be targeted outside <% %> blocks.  You can update to pick up the fixes.\njavascript\n        // Ruby embedded HTML\n        {\n            \"name\": \"ruby_embedded_html\",\n            \"open\": \"((?:(?<=<)%|^)\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"text.html\", \"source\", \"comment\", \"string\"],\n            \"scope_exclude_exceptions\": [\"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Rails)\"],\n            \"enabled\": true\n        },\n. Sorry, one more update:\njavascript\n        // Ruby embedded HTML\n        {\n            \"name\": \"ruby_embedded_html\",\n            \"open\": \"((?:(?<=<%)|(?<=^))\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"text.html\", \"source\", \"comment\", \"string\"],\n            \"scope_exclude_exceptions\": [\"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"plugin_library\": \"bh_modules.rubykeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Rails)\"],\n            \"enabled\": true\n        },\nThat should work as expected now.\n. This would be a better solution because disable angle brackets disables HTML Tag matching.  This ignores php angled brackets:\njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\nI will probably update tis later and add an option PHP angle bracket for those who want them.\nEdit: fixed the close tag.\n. PHP angled brackets are now their own rule which can be disabled.\n. The example you show above will never work with  PHP enabled.  Bracket Highlighter would need specific code dedicated to PHP to handle logic of embedded curly brackets (and others) spread across different PHP blocks.\nI think we both agree that BH should not match the curlys here:\n({)(})\nSince BH has no dedicated PHP code to handle this, it is handled the same as above:\n<?php { ?><?php } ?>\nI don't think I am planning to add that kind of complexity any time soon.  PHP would essentially need to have a dedicated BH bracket plugin that triggers off of <?php and ?>.  It would then need to duplicate the bracket hunt logic across all PHP blocks.\nBH is designed to be generalized to allow for fairly easy bracket customization (in comparison to hard coded logic).  If I were to add PHP specific code to the core code, it would make things uglier and tougher to maintain.\n\nAlso, I can't get the goto-matching-bracket keyboard shortcuts to work at all for PHP brackets. Is this a bug or is it just because we have brackets inside brackets?\n\nWhat shortcut do you have it binded to?  BH no longer provides shortcuts out of the box.  The shortcuts it used to use conflicted with build shortcuts.  Now I just provide an example keymap file to help you create your own.\n. Yes, this would have to get added at the BH level.  I am not near a Windows machine right now, but as soon as I get to work, I will test out a solution and push it.\n. Seems to be specifically an ST2 issue not ST3.  It is now fixed.\n. You can go here http://facelessuser.github.io/ExportHtml/ and see the ExportHtml plugin demo page.  Go to Tomorrow Night Demo and mouse over the upper right corner and select the download icon.  It is the Tomorrow Night theme that I have tweaked to what I like.  Feel free to take what you like from it.  Keep in mind, some things may not be exactly like they are on mine just because I have tweaked some of my language files as well so that certain things can get highlighted that aren't usually highlighted, but overall, it will work fine.\n. Not sure what you mean.\n. Okay, I get what you mean.  The way BH2 is architected, this is not currently possible, and I do not have any intentions of doing so right now.\nThis could be done, and maybe one day I might change my mind for BH3, but it would change how I do a lot of things, and I just don't have the interest to do any of that right now.\n. PHP is now a separate definition in the default settings file, you can pick it up and create your own PHP icon for it.\nAs for script tags, I could be done via the tag BH plugin module, but I don't have any icons for it right now even if I could.  Would there be some kind of advantage to this?  I am not sure I see how it could be helpful, I more lump this with eye candy than anything, since the script should tell you the language right in the script tag attribute.\nNot saying I won't do it, but I would have to create a bunch of icons for different sources, and then add the code (which probably wouldn't be too bad I think), but it sounds like greater work work than the actual payout.\n. Let me take a look at the possibility of adding it in the code first before you start anything.  I need to see how motivated I can get on this.  If/once I add it, I will let you know, but basically, icons would go in the same folder as the rest of the icons.\n. I think for now I am going to pass on this feature.  It would be a lot of code for very little actual enhancement to BH.  It is more eye candy.  I wouldn't be adverse to someone adding something like this, but I am a bit busy right now to spend a lot of time of features that don't add to the functionality.  If I change my mind on this moving forward, or someone else implements this, it will be added.\nI am doing a bit of house keeping on issues.\n. Please see issue #88.  I am closing this as a duplicate.\n. I will consider it.  It is the one thing I didn't carry over from BH1  due to the complexity of all of the recent flexibility additions.  I have a lot going on right now, so I cannot promise if/when I will look into this.  But I will leave this issue open for a possibility for when things settle down for me.\n. Okay, everyone that has been wanting this, take some time to test the new experimental feature (ST3 only currently)\nAdd this setting to your bh_core.sublime-settings.\njavascript\n\"bracket_outside_adjacent\": true,\nThere is going to be some more overhead when this is turned on, but hopefully the impact won't be too noticeable.  I did this for you guys, so please do test.  If you are waiting for ST2, it may be a tomorrow or the day after.\n. FY!, a known issue is that when outside adjacent to tags, they just highlight the angles and not the tags.  I haven't updated the tags plugin yet for the adjacent feature, so that is why.\n. Tag support for experimental outside adjacent is in\n. ST2 Experimental outside adjacent matching has been merged in.\nSide note, I may add an additional option to have some bh_plugins ignore the \"outside adjacent\" setting.  Things like pressing select and having it expand does not work with adjacent; instead, it just expands and shrinks over and over  :).\n. I updated certain command in the menu, command palette, and example keymap file so they ignore the outside adjacent call.  Things like selection will ignore the outside adjacent and expand to the parent group if you are outside the bracket.  There are a couple of others like jump to begin and end bracket where I do the same.  Anyways, if you defined any of your own custom keymaps to do any of these actions, take a look at the example keymap file to see what you need to do to update your own keymaps.\nI will consider this issue closed.  Any new bugs or issues should be filed in a new issue.\n. @princemaple Thanks, I certainly do not speak Chinese :smile:.  So does what you suggest solve the issue?  I still have no idea what the issue is.\n. Should.  Hopefully they will report back if it worked so I can close it if that was indeed the issue.  Thanks @princemaple!\n. Glad everything is working now.  Thanks for the help @princemaple; I would not have been able to help otherwise.\n. @jackwong2000 you have to use the language file name minus the extension.  They can often be different than what shows up  in the bottom right of editor.\n. cd Packages/\ngit clone https://github.com/facelessuser/BracketHighlighter.git BracketHighlighter\ncd BracketHighlighter\ngit checkout BH2ST3\nWorks for me.  I just did this.  There is nothing special or strange about the BH2ST3 branch.\nYou can also add the BH2ST3 branch to Package Control via the add repository command.  Package Control 2 can be a bit buggy sometimes in pulling down the right branch on occasion, but that is out of my control.\nUntil PackageControl is to a stable point and provides a method to distinguish between branches that work for ST2 and ST3, BH2 will still have to be installed using one of these methods.\n. Problem looks to be resolved.\n. I don't have a retina display; therefore, it hasn't been a priority for me.  Someone from the community has agreed to make icons when he has time (see issue #44).  I have left it at that for now.  Making a bunch of new icons takes time, something I don't have right now.  If I get a retina display sometime in the future, I am sure the priority for this will jump for me, but right now I am requiring contribution from the community for this feature to be implemented so I can focus on bugs and features of all my plugins.\n. Done in #114 \n. Do you mind explaining what you mean?  Currently, BH marks unmatched brackets when it detects them (but there are some cases where it doesn't detect them well enough).  Is this what you are referring to?\n. I was looking for clarification on this issue.  Please give more information or I will have to close this.\n. No response for 25 days\n. Did you install the BH2ST3 branch?  If not, that is why it doesn't work, install the BH2ST3 branch and restart ST3.  Also, make sure you are using the latest ST3 (though 3033 doesn't seem old enough to cause problems). \nCurrently BracketHighlighter works on all Platforms using the latest ST3.\n. Well, I don't really have any info from you on your setup, so at this point I can't really help you.  It works for me on the latest on all platforms.  Also, I advise you update to the latest ST3; even if there are differences between 3033 and the latest, I don't plan on supporting old dev builds.\n. I am going to need some details, or I am going to have to close this issue.  Are you getting errors in your console?  What platform are you on?\n. Your BracketHighlighter folder should be called BracketHighlighter not BracketHighlighter-BH2ST3.  It can't find the modules because it is looking for them under BracketHighlighter.  Change the plugin folder name and restart.\n. While I know how to fix the string issue, I have discovered yet another swapping issue.  Multiple selected brackets (that are nested) will cause swapping to fail...I need to do this all inline on each bracket.  I cannot remove all brackets and then wrap all.  It all needs to be done in one shot for each bracket.  I need to think about this.\n. Swap in strings is fixed.  Main issue updated.  I will have to think about how to handle multi-select with nested brackets.\n. For now, I am going to call this a feature limitation.  Maybe I should document it. But I am going to close this issue as I have no intentions to change it at this time.\n. I know you think you are running the BH2ST3 branch, but in your log, it says line 3 in bh_swapping is import bh_wrapping but the BH2ST3 branch has this on line 3 import BracketHighlighter.bh_wrapping as bh_wrapping.  You are not running the BH2ST3 branch.\n. Pull request?  Sounds like you know what is going on.  I don't use LaTeX, so you are more of an expert on that than I.\n. Pull request created and merged for this feature.\n. Notice I added a space between the scopes, not a comma.\n. I did this from the console, the order may be important (this showed True for me):\nsublime.active_window().active_view().match_selector(sublime.active_window().active_view().sel()[0].a,\"text.tex.latex string.other.math\")\nThe comma between scopes mean OR the space means AND (though for some reason the order made a difference).\n. Thanks, that will hopefully be sufficient.\n. This is because the next version of Package Control for ST3 is not done.  The new Package Control will allow developers to define branches for ST2 or ST3.  I do not have a unified branch, but two separate branches.  ST2 is the master right now, and the BH2ST3 branch is for ST3.  You will have to check out the BH2ST3 branch for ST3 manually at the current time.  As soon as Package Control for ST3 is up and running, I will begin the process of adding BH2 for ST3 on Package Control.\nManual install:\ncd Packages/\ngit clone https://github.com/facelessuser/BracketHighlighter BracketHighlighter\ncd BracketHighlighter\ngit checkout BH2ST3\n. Does BracketHighlighter work?  Manually install simply checks out BracketHighlighter.  It doesn't do anything to Package Control.  I have a Package folder full of manually checkedout git folders so I can develop on plugins.  Package Control works for me (I am using the ST3 alpha version of Package Control).\nBut, with that said, if Package Control can't handle a git checked out folder on your system, you need to file an issue on Package Control's Issues page, not Bracket Highlighter.  Bracket Highlighter is working fine, and developers manually check out their own plugins all the time.\n. No problem\n. Anytime BH is not matching proper, it is usually a formatting issue on the part of the programmer.  Web browsers are very forgiving of format, where BH is not.\nBH is pretty good at matching tags when the format is valid.\nAlso, BH has a threshold limit for searches.  I imagine your issues are either one of these things or both.\nIf you want to post some code, I can see what is wrong to give you an idea the kinds of things BH trips up.\n. Email Isaacmuse@Gmail.com\n. It might not be, that is why I say \"usually\".  I am not arrogant enough to say \"always\". :smile:\n. No worries, I was just making a joke.\n. It might be BH can't handle the curly bracket notation in the opening tag.  I am not by a PC to verify.  That would mean BH needs to update its regex.\n. Sorry it took me a while to get back to you.  Basically the regex can't handle the additional syntax if outside of the attributes.  For example, it can handle PHP, except when the PHP is outside of the quoted attributes.  It is possible for me to use a much more relaxed regex and maybe that would help.  The problem though is that these additional compile time like switches can have symbols such as > and < which can mess up the logic in trying to determine tags.  This poses a problem for me because there are a variety of syntaxes that people use inside of HTML, and I have to be aware of all of them so I can properly ignore them.\nI will have to think about how I would like to approach this.  If you have any ideas, feel free to let me know.\n. It is not a problem between <?php and <tag>  it is a problem with  <tag <?php /*some code*/ ?>>  Bracket Highlighter does not mistake php tags as html, nor does it mistake html tags as php tags, it just can't detect html tags when php code is embedded in the tag.  But it can detect this (most of the time)<tag attribute=\"<?php /*some code*/ ?>\">.\nThe regex detects html and php fine, but when they share the same space, things get messy. This is just how it is architected right now.  Even if I add clever regex to catch the PHP, it won't protect me against  some other language embedded in the tag (like the issue above with the tpl type file).\nIt may require different regex for HTML files mixed with different languages.  But I have to come up with the regex  and apply that logic to the other sub-modules that also identify tags.  It is a bit of work that I haven't had time to look into.\n. @simonzack Your issue is not the same XML format is so structured, that unless your XML is malformed BH will match the brackets.  But here is the catch, there is a threshold of how far it will search for the matching bracket for performance sake.  If you run the BracketHighlighter: Match Brackets (ignore threshold) command from the command palette, you will see it matches the tag just fine.  You can tweak the threshold to your liking in the bh_core.sublime-settings file as well, just copy it over to your User folder first.  This won't change moving forward, but you can increase the threshold if you like, and if you are feeling dangerous, you can disable the threshold in the settings file as well (I wouldn't recommend it, but the option is there).\n. Due to the complexity of tags with different template languages, tags can become unpredictable because the definition of the tag is altered by the template language.  Because of this, there will always be some degree of issues with certain languages.  While, this is an issue, I consider this to be an acceptable, or at least an expected and understood issue with the current architecture of BH.\nIn the next major iteration, I may play with an experimental way of highlighting tags that may work better, but I make no promises.  I feel there is no need to track this issue since I am fully aware of it.  If I am able to come up with a clever way to resolve this in the future, I will, but if not, this will just need to be accepted as a limitation of BH.\nI will close this issue marking it as will not fix, but as I said, if I can come up with a fix in the future, I will implement it.\n. When I get a chance I will add it to the readme, but you can find the instructions here: https://github.com/facelessuser/BracketHighlighter/issues/96#issuecomment-17877880\n. Pull request #112 is was created to document this and resolve this issue.\n. Info for installing ST3 branch is now on the ST3 branch.  The ST2 branch directs people to ST3 branch for ST3.\n. ST2 Usually uses more than 20MB for me.  On OSX with ST3 and BH unloaded, it uses 98MB (I have a number of tabs open and a number of other plugins).  After enabling BH, it went up about 10MB.  \nOn ST2 it uses about the same, but after enabling BH it jumped roughly 30MB.\nI highly doubt BH is gobbling up 120MB of ram.  And there are a number of things to consider as well.  I am not sure how often or when Python is garbage collecting memory, and ST2 isn't as efficient with memory as ST3.\nBH has one thread that runs and one instance of the actual class running (though it does pull in external modules depending when needed).  Files are read into memory where the regex is performed on them to find matches.  This stuff gets garbage collected as needed.  I am not sure about the Linux version of ST and if it has memory issues.\nI will give it a try on a portable windows when I get a chance to get a full stripped down ST, but I have never seen BH gobble 120 MB of ram before by itself; I have checked before.  Also there is no difference the code for Linux in regards to the plugin.\nWith all of that said, there may be ways to make BH more memory efficient.\n. I will look into it.  I didn't expect people would want it on all the time.\n. Not a problem.  When I get a chance, I will add this.\n. You can now use high_visibility_enabled_by_default to have high visibility mode on by default when sublime starts.  It won't change the state of visibility when you update the setting, but it will ensure it is on when sublime starts or the plugin itself is reloaded.\n. Thanks\n. This is easier said than done.  BH strings all of the regexes together and searches the whole file for opening and closing tags (indexes of the groups are important to so that openings are matched with closing).\nBracketHighlighter: Search patterns:\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\]))\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\]))\nTurning on Case sensitivity for just erlang is not so easy. Some languages require case insensitive matching.  Depending on how rigid the syntax is for what you are matching, usually case isn't a big deal.  I don't use erlang, but as I recall, those ends can appear in odd places and still be valid, which makes catching them harder.\nUsually in a language you could just give the rule that end must have nothing in front of it but whitespace, but I don't think that works well for elrang.  I am open to suggestions if you have any ideas. \n. Hard coding languages in the core code is exactly what I am trying to avoid.  I was getting tired of having request for languages I don't even use, so everything was redesigned to expose the knobs to the user.\nAlso, for erlang, this might work fine, but other languages might mix multiple rules that may not all want case sensitivity the same.\nA better idea would possibly be an event when a bracket is found, it could be forwarded to an external plugin where the user can do further validation. There it could be rejected.\n. I have actually had some time this week to start looking at this.  I should have a solution by the end of the week.  As I mentioned earlier, I will not allow a case_senstive switch, but I will create a new event.  This will keep the core code from being polluted with language switches.\nTo gain case_sensitivity, the erlang language will have to validate the brackets via some match event in a bh_plugin (I have not decided the event name yet,  but I have some rough code working).  Writing the simple bh_plugin for case sensitivity should be very easy and straight forward to accomplish.  And other case sensitive languages will also be able to do the same without touching the core code..\n. The next update will have a bh_module called erlangcase.py.  Erlang definition will need to include the bh_module in order to use case sensitivity:\njavascript\n        // Erlang conditional statements\n        {\n            \"name\": \"erlang\",\n            \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"plugin_library\": \"bh_modules.erlangcase\",\n            \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n            \"enabled\": true\n        }\nIt will use a new validate event to check for case sensitivity (from erlangcase.py):\npython\ndef validate(name, bracket, bracket_side, bfr):\n    text = bfr[bracket.begin:bracket.end]\n    return text.lower() == text\nI will commit it first to the BHST3 branch in the next couple of days, and later back port it to ST2.\n. This solution is now on available for ST2 and ST3.\n. The diff seems to only be showing changes from the master.  I will give it a pull and see if it gets the BH2ST3 branch.\n. @justrjlewis It didn't take.  It probably was because you modified two branches, so it triggered on the first.  If you can refork and make changes just to the BH2ST3 branch, I will be able to pull it no problem.  Usually changes to different branches need to be done as separate pull requests (I realize the master changes were an accident).\n. No worries, I think you got it this time.\nThanks\n. Thanks for this.  Did you verify the small version by decreasing your font size?  As I recall, the icons for the small variants must be positioned in the upper left quadrant.\n. I will try out your branch later today and verify the icons.  If all goes well, you will make a lot of retina users happy.  I will let you know if I find any issues.\n. I usually would have to restart sublime between changes to see them update properly.   Sometimes if you name something wrong, it will cause this as well, and sublime will cache the image so even when you fix it the problem persists until restarting.\n. I am not sure why you are getting the colored squares.  It is a very strange issue.  I am getting the error:\nunsupported color type\nUnable to decode /C/Users/facelessuser/AppData/Roaming/Sublime Text 2/Packages/Theme - Default/../BracketHighlighter/icons/round_bracket_close.png\nI don't understand exactly yet why this is happening.  A little later, I will try this in ST3 to see if it is ST2 specific or not.\n. @vemec, I found the issue.  Some of your PNG files are not using the RGB profile.  I opened one up in Gimp and it said indexed.  I changed the color profile to RGB, saved it, and the icon started working when I restarted Sublime.  Double check how you are generating/exporting/saving (or whatever).\n. @vemec, I think it is the exporter.  I use imageoptim, and it has never given me an issue.\nGive me a shout when you feel you are done tweaking the icons.  At that point, I will check them, and merge them if everything is good.\n. Looks good.  You saved me a lot of work, not to mention, made a lot of retina users happy.\n. I like them (I haven't gone through each one, but they seem to fit nice and are generally aligned).  I know people are picky about the the fonts used to generate the icons.  I know it was mentioned to me I should have used XXXXX font before.  Meh...the icons got the point across :).\nFeel free to add more if you think of some good ones.\nThanks again!\n. This is fixed on my end. Sublime on Mac might be the only version that automatically uses the high res icons.  But that is something sublime handles not the plugin.  The plugin just needs to provide the high res variants, which I do.\n. Is this still an issue?  GitGutter has a HiDPI theme, but if you look at them, they are just 32x32 images.  BH already provides 32x32 images.  Images used to be super tiny, but on recent Sublime beta builds, they seem scaled more proper.. FYI.  Historically, no matter what size gutter icons where, Sublime scaled them down to 16x16 regardless of DPI.  I just created 32x32 icons and called it a day.  I figured that one day sublime would actually use the full resolution.  Recent builds (I'm on 3131) seem to no longer scale down the 32x32 icons to super tiny 16x16 on my 4k monitor.  If you are seeing something different or can provide more info as to more I can do, please let me know.. They might be a little smaller as I recall I do not take up the entire height and width of the 32x32 image.  This stems from the fact that old Sublime builds I believe clipped the image some (maybe I am remembering incorrect).  But also, as you shrunk line size the gutter size remained the same and would overlap other lines.  This is also why I provide a small variant that uses even less of the 32x32 image for really small lines (wouldn't really see this on a 4K monitor though).\nAnyways, I'll be honest, I am not super excited about redoing all the icons, especially if we are talking about a very minimal difference in size. But I do understand that people may feel that new icons might help with distinguishing them.  I color code mine, and don't have a big issue with their shape in recent builds, but not all eyes are created equal.\nMost likely, if I where to redo the icons, I would do what I did with original retina support (which is what got us to 32x32 size instead of 16x16) and ask the community to help out with providing new icons.. @MilllerTime, Glad to hear.  It seemed good to me, but I wanted to make sure :slightly_smiling_face: .. As mentioned earlier, you're going to have to get on a dev build (which requires a license) to get Sublime to scale them. Also, why are you posting GitGutter support info?  This is BracketHighlighter.. No problem \ud83d\ude42 .. Styling is outlined in the readme.  There is only one way.  It is the price you must pay for how configurable this plugin is.  People want to configure everything, so I have exposed everything.  Sadly, this means you have to get your fingers dirty twiddling the knobs.  It used to be easier, but now with the custom brackets and such, this is what you have...but you also have custom brackets.\n. As long as the folder is named BracketHighlighter and it is found in Data/Packages, I am not sure why it wouldn't work.  I won't be able to try this out in a portable environment until tomorrow.  The new Package Control 2.0 has been released recently by wbond, that would be the preferred install recommendation.  But I have not formally tested it out yet.\nI will let you know what I found when I have a chance to verify if BH is working in a portable environment.\n. PC 2.0 didn't find ST2 for ST3, it points to to ST3 version for ST3, and ST2 version for ST2; that was the big new addition to PC 2.0.  I assure you that the ST2 version would not and does not work at all for ST3.\nGlad you got it working.  I will go ahead and close the issue.\n. Cool, I probably need to update the readme on the main branches of my various plugins.  Thanks for pointing that out.\n. Sounds like a Package Control issue (are you sure you are using the latest?).  BH has been confirmed to work in ST3 and ST2 for quite some time.\nI have also confirmed in Windows that BH installs just fine with package control.  I would try and uninstall PC 2.0 and try to re-install it using the guide here https://sublime.wbond.net/installation.  Restart, install BH, and restart again.\nI don't know what to say though if it doesn't work.  Your error above clearly shows your PC downloaded and installed the wrong branch.  But I cannot reproduce that issue with PC 2.0.  If you have further issues with PC 2.0, I would file an issue there because BH is working fine in ST3 if you are using the correct branch.\n. It is already there https://github.com/wbond/package_control_channel/blob/master/repository/b.json#L377\n. I do need to update the readme.\n. @Narretz \nContact Package Control (PC) author, this is not a BH issue.  As mentioned above, the the PC Channel is pointing to the correct branch.  The problem is, PC seems to sometimes install the wrong branch.  I am predicting you have errors in your console even though it \"Installed successfully\".  I am also predicting those errors are Python 3 errors which have all been fixed on the ST3 branch of BH.\nI have been hearing complaints like this off and on now, and every time I look into them I see the same thin: Python 3 errors in the console that have been fixed on the ST3 branch.\nI don't know why PC is incorrectly installing the wrong branch, but I suggest uninstalling BH and uninstalling PC and reinstalling PC using the instructions on wbond's site and re-installing BH and seeing if that fixes your issues.\nThere is absolutely nothing I can do; PC needs to install the right branch, and I am currently doing everything I am supposed in regards to setting up the logic in the repo channel.  I have also ensured BH works as a sublime-package zip file as well, which is the new default format for packages when they are installed.\n. Side note, if you have an unzipped BH for ST2 folder in your Packages folder, it will override the ST3 sublime-package archive in InstalledPackages as well.  Make sure BH has been completely removed from your system before using PC2 to install the BH for ST3.\n. This is not an actual bug, but general growing pains of users switching over to ST3 and the new Package Control.  Closing.\n. I can confirm that jump to left and right work on all of my machines.  I imagine you have a conflict on your specific machine.\nIf you have the commands bound to a shortcut, there are plugins you can install to find shortcut conflicts: https://sublime.wbond.net/packages/FindKeyConflicts.\nThe command should work if you access it directly from the command palette, but if it doesn't, I imagine something is interfering on your specific setup, and you may have to play with disabling packages to find the culprit.  If none of that works, you might need to revert sublime http://www.sublimetext.com/docs/3/revert.html.\nBut this does not appear to be a problem with BracketHighlighter directly (not in ST2 or ST3).\nHopefully one of these suggestions can help you get everything working, but I am afraid that is about as much help as I can be since the issue isn't directly with BracketHighlighter.\n. How far apart are your PHP tags.  There is a threshold search limit for performance sake.  If you use the \"jump to left/right bracket command\" you will see the threshold gets ignored and usually your match will be found (assuming no other things in your file confuse the matcher).  Also there is a command to simply search without the threshold.  If you would like a bigger threshold, you will have to increase your threshold via the settings file....I don't remember if I added an option or not, but there might also be setting to turn off threshold (but keep in mind, your performance may drop in large files).\nAlso, keep in mind that PHP tags can also break bracket pairs causing bracket matching errors.  Example:\nphp\n<?php if ($condition) { ?>\n<?php } ?>\nThis will break matching for the same reason this will break matching:\n{ ( }\n{ ) }\nThere is no special parser for just PHP tags, or any language (except html tags to some extent; and even then there are some limitations there when pairing it with PHP and a number of languages that augment the tags with special notations).  It is one generalized bracket matching engine; it doesn't really specialize the algorithm for separate languages (but you can do special things per language with bracket plugins, but they have their limits as well).\n. There is a limit of time I am willing to spend on various languages (especially this being a free plugin).  This is why BH2 was written in a more general way to allow users to add their own languages saving me from adding lots of language specific code, and addressing issues for the hundreds of languages that exist today.  And as flexible as the current system is, it is not without limitations (this is also the downside of a very generalized system; or maybe just the current system).  One day, maybe in BH3, I will finally be able to make the system flexible enough...if nothing maybe at least make the tag matching plugin flexible enough since it has so many variations of acceptable tags depending on what language the HTML is embedded in or vice versa..\nSadly the threshold issue will always be an issue (brackets too far apart) it is just the nature of the plugin.  If this was done at a much lower level, to handle the far apart brackets much quicker, but currently, even ST3 I believe stops matching brackets when they are too far apart.\n. Nothing to be done on this issue at this time.\n. You are going to need to provide examples of non-working files so I can understand what your problem is.  I use a very specific set of languages, so I am not familiar with everyone's language of choice.\n. Due to no additional info from requester in over a month.  Issue is now deemed stagnant and will be closed.\n. What is the physical name of the Django syntax file, not the name it shows in the status bar.  That is what you should be using.\n. Please post your settings file and a link to the actual repo.  The code that handles this is pretty straight forward and is how all HTML language variants are being recognized.  All it does is ask sublime what the current syntax file being used is, and then compares that with the list.  There shouldn't be anything specific or special about Django that would break this.  I am guessing this is a user error, and as such, I will need to see exactly what you are using and what you are modifying:\n- Provide me with the Django syntax repo link.\n- Provide me with your entire bh_core.sublime-settings file\n. You need to add HTML (Django) here as well:\njavascript\n  // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\", \"Handlebars\", \"AngularJS\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\ntag_mode tells the bh_modules.tags what type of tags it will be finding for a syntax, but the angle rule, which calls bh_modules.tags, also needs to know what languages it is enabled in.\n. @pirate I don't know what \"Django\" package you are using, but you need to add the file name of the syntax highlighting file (the actual name on disk minus the extension).\n. BH matches great when the format is good.  When the format is bad, all bets are off.  Though you might expect that BH would find the the same match forward and backwards, that is only the case when the format is good.\nSearching in one direction will expose different malformed tags.  This is because BH is trying to find tags as quick as it can only looking for what it needs to.  In one direction, BH clearly sees the  tag is bad because it is focused on opening tags, but going the other way, it doesn't because it is focused on the closing tags\nYour example above creates a situation that is not identical forward and backwards (at least not to the current algorithm).  When parsing forward (down), BH starts with a matched opening tag, and proceeds down to find the closing tag.  When parsing backwards (up), BH starts with a closing tag, begins searching for the opening tag, finds this unmatched opening title tag and bails.  It ends up bailing because BH can't tell if the the title tag has a match or not, so it can't tell if maybe everything is supposed to be nested under title, but something got broken etc.  Without the context of the whole file, BH has no way of knowing which tag is bad, it just knows something is wrong.\nIf BH parsed the entire file every time, it would have an easier time understanding the context of every tag and seeing that title is in fact the bad tag when searching both forward and backwards (but it would be much slower).  But since it doesn't parse the entire file, it just parses knowing \"I have a closing or an opening tag, I just need to find the other\".\nBH tries to find a match looking only as long as it needs to to try and be quick.\nFor instance, which tags do you match here?  Which div tag(s) is the malformed one?  Are they nested, are they all separate?\nhtml\n<body>\n<div>\n<div>\n<div>\n</div>\n</body>\nIf I remember correctly, BH starts from the tag you have selected and and crawls up or down in the direction where the matching tag should be.  The algorithm going one way clearly sees something wrong because it is looking for and opening tag, but it finds a broken opening tag, but going the other way, it is focused on closing tags, so it doesn't notice the broken opening.\nCompare these two behaviors and you will understand better what I am saying:\nhtml\n<body>\n<div>\n</div>\n</div>\n</div>\n</body>\nhtml\n<body>\n<div>\n<div>\n<div>\n</div>\n</body>\nThe two examples are the same issue, just mirrored.  Now you see that the BH breaks in the opposite direction.\nIn short, BH is meant to match tags in a well formatted file.  When it is clearly apparent there are bad tags (or unrecognized tag format) you will see a ?.  But BH isn't coded to lint tags, it isn't coded to find bad tags, it is coded to try, to the best of its ability, to find the right tag and find it quickly.  If you go out of your way (or in this case a coworker or a stranger) with sloppy coding to confuse it, it will get confused.\nMaybe there is an even better algorithm I could use to find tags...maybe in BH3.\nI hope this helps you understand better what BH is doing and that what you are seeing isn't necessarily a bug, but currently just the way it is designed (for better or for worse).\n. The algorithm finds all closing and opening tags in the buffer (buffer is limited by the threshold).  And then it starts resolving the matches.  When it encounters a bad tag, it throws everything off.  All tags are handled the same.  The current algorithm doesn't say \"hold up, I know body tags are never nested in other tags\", but instead it just treats it like another tag.  It just finds tags and says, \"are you an opening?\", \"are you a closing?\", \"can you possibly be a self closing tag?\"...that is about the extent of of things it considers.  If it stumbles on a non-matched tags, it will bail.\n. Current issue is not really deemed as a bug, but maybe in the future better tag enhancements can be added.  I may create a more specific issue to address general enhancements to the tag algorithm in the future if/when I decide this is the direction I wish to take.\nClosing issue for now.\n. I don't know ruby, so the ruby setup doesn't account for all of ruby's oddities.\nThis line is the culprit:\nruby\n    strings = if searches[nm].to_s.strip.empty? # <==== Move the cursor here!\n                nil\n              elsif options[:tokenize]\n                searches[nm].strip.split(/ +/)[0..8]\n              else\n                [searches[nm].strip]\n              end\nIf you have a better rule settings for ruby, let me know, but if not, you will have to wait until I get around to try and come up with something better that can account for this kind of case.\nBH doesn't currently expect strings = to come before if this way; that is weird, maybe not in ruby, but again I don't do ruby, so I was not aware that you could do that\n. I think you could probably isolate if and only remove the anchor for if, and that might help.  But yeah, the more flexible a language becomes, the more difficult it is define rules for it in BH.\n. Thanks for the info.  I have some ideas of how to fix this, but I've been busy.\n. Alright Ruby people, I just pushed a fix.  Someone please let me know if everything is working as expected now so I can close this.\n. Keep in mind, cases like x = 1 if y == 3 will be ignored.\nBasically, it is looking for cases where if is preceded by whitespace or =.  So the above case, which doesn't have an end, won't even be evaluated; which I believe is how it should be.\n. Should be easy enough to fix.   I will probably take a look tomorrow.\n. The original people who told me what to highlight in ruby never mentioned for needs to be highlighted.  I will add it when I fix the begin issue.  I am going to need a new issue opened if you guys find any other Ruby issues.\nIdeally, Pull Requests would be better.  I am pushing to stop personally fixing and creating rules for people's different languages unless the problem is far beyond the requesters capability to figure out.  I don't really use all of these languages, and I am often pretty busy.  It was the main motivation with pushing all the highlight rules to the settings file.  I want people to attempt to fix their own language issues so I can focus more on core issues and features in BH.\n. @benhoskings Please, when posting examples, also post in plain text so I can easily copy and paste and not have to copy examples from pictures.  It really helps.\n. Hopefully everything is now fixed.  Any new issues need to be opened in a new issue.\n. You're welcome.  These weren't really that much trouble.  I've just been trying for some time now to get people to not rely on me for language specific support (unless it requires changes to the bracket system itself).   It is a quest that I've been on for some time now...it has only been mildly successful.\nDon't get me wrong, I don't mind assisting if people get stuck trying to solve issues (I understand regex can be intimidating to some; not everyone is a black belt in regex fu).\nThe plan when I re-wrote BH as BH2 was to expose all of the knobs, and then people would start making pull requests because then they wouldn't have to understand the algorithm to get their language going...instead, I get more issues filed for more languages :smile:.\n. @gdelfino please issue a pull request.\n. @gdelfino at the bare minimum, I need you to open a new issue like I mentioned just a few posts up.  But you should easily be able to fix this and issue a pull request because the current rule already fixes this for if and begin.  You just need to move case to be with if and begin.\n. I don't know anything about Blade...you will have to educate me, provide examples, explain how Sublime treats them etc.  I am sure you can understand that I don't have time to become familiar with every language known to man (HTML alone apparently has a bunch of different template languages) :smile:.\nThis is why I let most people add support for their own languages, but I am willing to help explain things when people get stuck, but I need background and a better understanding of how Sublime interacts with the language in question.\n. Bottom right of the editor (in the status bar), what language does it say it is using?\n. That is the problem.  The php Larvel Blade tmlanguage name needs to be added in the settings file to the appropriate place.  What is the php larvel file name (minus the tmlanguage extension).  That is the name I need in order to get this working. \n. @kavarell \nPlease edit in your bh_core.sublime-settings the following existing sections as shown below and let me know if this fixes your issue.  If so, I will commit these changes.:\njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\njavascript\n    // Determine which style of tag-matching to use in which syntax\n    \"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML (Rails)\", \"HTML (Twig)\", \"laravel-blade\"],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\n. Navigate via menu: Preferences->Package Settings->Bracket Highlighter->Bracket Settings - Default\nSave As to Sublime Text 3/Packages/User/bh_core.sublime-settings\nThen modify.\n. I will officially commit the changes tonight then.\n. Finally got around to doing this. Merged and closed.\n. As you install more plugins, load time is affected because Sublime Text loads all plugins before you see the window (I believe this is so at least).  This changed in ST3, and plugins are loaded in the background after startup, so you get a quick startup for sublime.\nNow, you say ST is slow loading.  The is a very vague statement.  I am certain that ST will have a hit on loading when a plugin is installed, (any plugin, and that time will vary from plugin to plugin and based on whatever processes you already have running on you computer at the time ST tries to load the plugin).  I personally have found ST2 slow in general when starting especially when loading lots of files from your last session.\nI am not aware of BH taking an abnormal amount of time loading for a plugin.  Is this the only plugin you have running? If you have others, you would have to do more in depth analysis to show that BH is specifically taking a long time loading (close all files, measure multiple instances of startup with BH and without BH to get a good average).  But there is nothing special about BH loading.  It is just a plugin, and ST has to load all of BH modules for it to work (except for the ones that are dynamically loaded on demand via the BH plugin system).\nYou can look into your console and see startup times (these are mine for ST2, but this can vary for me):\nplugin init time: 0.391929\nloading bindings\nloading pointer bindings\nfound 0 files for base name Phoenix Dark.sublime-theme\ntheme loaded\napp ready\npre session restore time: 3.86547\nusing gamma: 2 (err: 6.9282)\nwrote startup cache, added files: 41 orphaned files: 0 total files: 41 cache hits: 0\nstartup time: 4.19076 (package setup was run)\nThis can vary greatly sometimes by just closing sublime and restarting.\nBut frankly there isn't much that can be done since I don't control the loading of plugins.  If there was anything that might be done to improve BH load times, it would maybe be hardcoding the Unicode table that is dynamically created on first load for regex...but in my tests, the time taken to dynamically create this list is vary small and it really doesn't make that much of a difference.\nYou can always disable or uninstall BH if you really feel it is slowing you down, but in my tests, I just don't see that being the case.  ST2 is slow in general starting compared to ST3...which is why Jon rewrote the ST3 startup.\n. Look in ure.py and you will see what is taking up the time. A unicode table is dynamically built at startup to allow things like [\\p{Ll}\\p{Lu}] in regex.  To make this faster, a unicode table could be hardcoded.  So, dump the table that is dynamically generated and put it in a file, and instead just import this table opposed to generating it.  It is generating a pretty big table so that is the why.  I didn't care to hard code it, but if this is really a problem, I imagine you would gain back the 1.8 - 2.8 seconds (I did during my test).\nSimply removing the table generation yields better times (as I theorized above):\n```\ndef _build_unicode_property_table(unicode_range):\n    \"\"\"\n    Build property table for unicode range.\n    \"\"\"\n    table = {}\n    # p = None\n    # for i in range(*unicode_range):\n    #     try:\n    #         c = uchr(i)\n    #         p = unicodedata.category(c)\n    #     except:\n    #         continue\n    #     if p[0] not in table:\n    #         table[p[0]] = {}\n    #     if p[1] not in table[p[0]]:\n    #         table[p[0]][p[1]] = []\n    #     table[p[0]][p[1]].append(c)\n# # Join as one string\n# for k1, v1 in table.items():\n#     for k2, v2 in v1.items():\n#         v1[k2] = ''.join(v2)\n\nreturn table\n\n```\nSo to make it faster these two items should be hardcoded (but then it makes the file size exponentially greater):\n_unicode_properties\n_unicode_key_pattern\nmeh, it is a give and take.  But ultimately, to answer your question, that is what is taking so long.  And above would be the solution (hard coding the tables opposed to generation).\n. Another option would be to defer the table generation to the first time it is actually called.\n. Keep in mind though, that Unicode feature will now be broken for any rules that utilize it, when commenting out those lines.  I will look into deferring the table generation moving forward.\n. Changed status of issue to bug.  Enhancements to deffer table generation will be implemented moving forward to reduce the slowing of Sublime load time.\n. The fix is now in.\n. Thanks\n. As soon as I get a chance, I will take a look and let you know what I find.\n. Technically when the attribute is selected using the next attribute command, the cursor gets placed at the end of the attribute, so that position is considered out of the current attribute.  When cycling through attributes, it has to be considered out of the attribute so the selecting the next/previous attribute works.  So technically, this is expected and not a bug.\nIn order to make this work as you suggest, I would have to consider this position as part of the attribute, but then how  would I trigger to the next attribute or wrap back to the first?\nI know you don't like the current functionality, but what kind of proposal would you suggest?\n. That seems reasonable.  I will take a look and see what it entails and play around and see what I think seems reasonable.  Keep in mind, I don't actually do much HTML programming (I do firmware c\\c++ and use some scrfipting languages pearl, python, etc.) so some of the things I implement in HTML and other languages  I rarely use (and sometimes don't use at all), so I rarely see the issues that someone using HTML daily would see, since I have only done hobbyist web programming. \n. @aronwoost I pushed a change to the ST3 branch for this, do you use ST3 or ST2?  I can push it to ST2 as well if needed, but I was hoping to get some feedback before doing that, but then I realized, you might not even be on ST3.\n. Will do, I will hopefully get it in today or tomorrow.\n. Should be fixed on both branches now.\n. Package Control is usually the best way for installation. It is one of the more common knowledge things with Sublime Text these days...with that said, new users aren't always aware of this, and manual instructions would also probably be nice to document as well; it is on my list to do, but in short, I suggest using Package Control.\n. done\n. The limit of styles is due to the API.  ST3 has more like: squiggle, thin underline, etc., but it is still dependent on what the API provides.  Sublime API also doesn't allow developers to directly set the colors, that must be done in your theme file and/or syntax file.\nThis is simply the limitations of the API and the current architected system of sublime.  I am afraid there isn't much I can about that.\nSorry.\n. You would be correct.  RSpec needs to be added to the language_list.  Copy bh_core.sublime-settings to your user folder and make the change there for testing.  Once you get it working, you can fork BrackeHighlighter and make the changes.  Then you can make a pull request.\nYou could also just fork and clone in your Packages folder (it will override the package control version) and make the changes directly until you get it working and then just commit and pull request.\nThat would be the way to go.\n. Added in latest commit\n. Wow, yeah something looks odd :smile:.  I need to clean out my branches.\nI will hand merge the changes.  They look fine.\n. The chicken is very important.\nUsually when installing BH, a restart is needed.  It has to do with not everything being imported correctly on first install.  A restart allows everything to get imported correctly.  Also the Master branch is for (ST2), so if you are using ST3, you need the BH2ST3 branch.  I will let you know when I get around to merging this.\n. Finally got around to doing this.  Merged and closed.\n. Since I now let people bind their own keys, I can add an option to select entire tag (content and tag), and then people can choose to use what they like.\nExpand selection works with most other brackets, but tags are kind of done special, so expand selection doesn't really work for them.  Tags require you to be in a tag, while most other brackets locate the bracket when you are between them.  I would have to think how I wish to do that and if it is possible with the current framework.\nIt all gets complicated, you can take a look at the code and see what I mean.  It gets very complicated to allow people to have all these custom brackets with a common core that uses regex.  HTML is hard enough to target with regex by itself.\n. @mkleehammer I added a flag for the bracket select command to always select the tags with content.  So by just taking the current command and adding the always_include_brackets argument, you can select the content and tags:\njavascript\n    // Select text including brackets\n    {\n        \"keys\": [\"ctrl+alt+super+d\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"always_include_brackets\": true}\n            }\n        }\n    },\n. I am going to consider this issue closed.  Report back if you find issues.\n. I will take a look when I get a chance and let you know if this is a feature I plan on adding.\n. I am afraid I just don't have interest in adding this feature.  Sorry.  I am willing to take pull requests.\n. You can use Package Control for ST3 now (assuming your Package Control is up to date).\nBut, if you wanted to do manual checkout, the ST3 branch documentation explains (assuming the git binary is in your PATH):\nbash\ncd Packages/\ngit clone -b BH2ST3 git://github.com/facelessuser/BracketHighlighter.git \"BracketHighlighter\"\n. Did you try this setting? https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L10\n. Hmm.  Yeah, that is not currently possible.  I would have to create some kind of selective disable unmatch rule so people could add their desired languages to it.\n. Now you can define unmatch exceptions via:\njavascript\n\"show_unmatched_exceptions\": [\"Some Language\", \"Another\"],\nThis will make the behavior of the listed languages to be the opposite of whatever show_unmatched is configured as.\n. Power shell will probably need its own rules defined.  I encourage you to read the documentation and look at examples etc. of how to create custom bracket rules.\nTake a look in bh_core.sublime-settings and you can see how all of the brackets are created.  A few require additional scripts, but most of the simple ones are done strictly by configuring rules in the settings file.\nI would start there and see how far you can get.  If you get stuck, you can post here what you have, and I can help guide you in the right direction.  If you get it working well, consider doing a pull request for other power shell users to take advantage as well.\n. I am closing this since I don't plan on personally adding support for powershell unless I start using powershell.  If you get stuck on adding support, or have a pull request, just open a new issue.\n. The current quote rules are scope based.  Text files have no string scopes.  Some brackets are regex rules only, but other brackets, usually things like quotes (where the opening bracket and closing bracket are the same), scopes are used, and the regex is used on that scope to identify if it has the appropriate \"end caps\" (the brackets).\nThat is why it doesn't work in your Plain Text file.\n. Text files don't really have a predictable structure. So creating a rule that will work reliably in text files is nearly impossible.\n. Try it now.  It should cache on the first time, but after that, it should hopefully be faster.\nLet me know how it works.\n. Make sure you have the latest package control (uninstall and re-install if you don't)\nRemoved Bracket Highlighter by deleting the folder in Packages (if it exists); an old version in Packages can override the Package Control one in Installed Packages.\nRemove BracketHighlighter via Package Control.\nRe-install BracketHighlighter.\nI assure you it works.  This is an issue with your setup.  The error you are seeing is because you are running the ST2 branch of BracketHighlighter in ST3.\n. Closing since this is not an actual issue with BracketHighlighter, but a local setup issue.\n. Package Control 2 (the latest) has the ability to pick the correct branch for ST2 and ST3.  It has been this way for a bit now, and I have personally verified it works.  You can install BH for ST2 or ST3 via Package Control 2 if everything is setup correctly.  If you have the latest and Package Control 2 is not installing the correct branch, you need to file an issue on Package Controls repo.\nYou can see I have already done the necessary things to tell PC which branch to select: https://github.com/wbond/package_control_channel/blob/master/repository/b.json#L476\n. BH does nothing in regards to installation.  Package control handled where the package gets installed.  This would be a Package control issue.  Please file an issue on the package control repo on GitHub.\n. If Package control isn't working for you, you can try a manual install.\n. In the Packages folder.  Goto Preferences > Browse Packages.. in your menu.\n. Works for me.  I am on Win7 x64 here at work.  I copied and pasted your keybinding exactly, and it worked straight out of the box.  I would double check key conflicts with other plugins.\n. In closing this issue since it doesn't appear to be a BracketHighlighter issue.\n. If the scopes don't show up as tags, BH can't highlight them.\nSounds like you need to modify your html tmLanguage file to highlight <script type=\"text/html\"> content as html.  I don't think BH should need to do a crazy workaround to highlight html code in a javascript syntax embedded in a script tag.  I just don't think this is going to happen.\nWith that said, modifying your tmLanguage file should, theoretically get it working.\n. You should read this:\nhttps://github.com/facelessuser/BracketHighlighter#configuring-highlight-style\n. > My question is why did you set this limit to only 5000 characters?\nI need an arbitrary limit.  Not everyone's computer will perform the same.  A conservative value will work on everyone's computer.  That way people can evaluate that it works without it slowing down their machine.  After they are satisfied, they can push it to its limits.  The plugin can slow down typing etc. if the threshold is too big.\n\nI nearly removed your plugin because in some cases it didn't show the end of a tag in a larger >30000 character long HTML file.\nThe plugin works perfectly even in a 100000 character HTML too, so that's all!\n\nI worked hard to make it run with as little lag as I could, so yes the actual limit on some computers can be pushed well over what I set as default.  I show in the readme that the threshold is configurable: https://github.com/facelessuser/BracketHighlighter#settings\nI don't show this in the readme, but if you look in the settings file, you can ignore the threshold all together (I would not advise this though):\njavascript\n    // Ignore threshold\n    \"ignore_threshold\": false,\nEven if the threshold is there to protect against performance issues, on-demand plugin commands all ignore the threshold.  So if you want to jump to the other bracket with the BH jump to left/right bracket command, this should work regardless of threshold setting.  There is even an on-demand match command, so if BH doesn't match your bracket because the distance is too great, just use the match command and it will force the match.\nIn short, it is there to protect your performance first and foremost.  Once you install it, you can push it to whatever limit you like.\n. Since the question was answered.  I will close this issue.\n. > I'm doing wrong. :D\nProbably :smile:.  What have you tried?  Out of the box, it works fine for me.  The default is underline for everything except html/xml tags which our outlines.\nYou can see here, I just changed my user settings to stippled for an example:\n\nI am currently using build 3061, but when I was using build 3059, I didn't have a problem either.  I imagine there is something not quite right on your end.\nWhat have you tried, or what is your setup like now?\n. Check for console errors.  You are probably using the wrong branch.\n. No response back in 20 days.  closing\n. BH works fine in ST3.\nUse Package Control to get the correct branch.  Do not copy from ST2 because that branch will not work in ST3.  ST3 installs packages in a zipped form in Installed Packages instead of Packages when using Package Control (there are some exceptions though).  If you want to install manually, you must use the BH2ST3 branch.\nMake sure you delete any versions you have installed before using Package Control.  Versions in Packages will override versions in Installed Packages.\n. > It shouldn't be too difficult, because this is only the case if the opening PHP tag is at the very start of a .php file.\nAssuming PHP support was specifically hard coded into the plugin, then you might be right, but it is not.  BH simply provides a framework to define any kind of bracket you need.  It is all generalized.  I have no intention of adding hard-coded logic for any language in the core algorithm.  I would say if this is a problem for you, you might want to disable the highlighting for these php tags? brackets? (or whatever they are actually called).\nI have used PHP before, and I understand why people have to leave off the closing PHP tag, but I have always felt this is a deficiency with PHP and/or programming practices using PHP.  I understand it is what it is though, and it isn't going to change any time soon.  I have been forced to do the same.\nBH simply matches tags and brackets.  If the tags don't match (whether it is because the brackets are so far apart they exceed the search threshold, or a language has some goofy reason why you would leave a dangling open bracket), it is going to choke.\nWith that said, I will look and see if I can resolve it with an external bh_plugin.  If I can't, and I can think of a reason to add a bh_plugin hook that would allow a fix that would be useful outside of this very specific use case then I may try that.  If both of these options are not doable, I would suggest you ignore the question mark or turn off the php tag matching.  It is the price we pay for a free generalized bracket matching plugin :smile:.\n. Yeah, sometimes things rub me a bit funny.  It depends on the day.  Because of how popular this plugin is, and the amount of time I have put into this thing, I am sometimes a bit more sensitive to this plugin in particular.\nAnyways, no worries, I will take a look when I get some time and let you know my final answer.\n. After taking a look at the code and refreshing my memory again.  It does appear you can use the post_match event to do your desired action.\nCreate a file called Packages/User/phpunmatched.py (or whatever you want to call it):\npython\ndef post_match(view, name, style, first, second, center, bfr, threshold):\n    left = first\n    right = second\n    bracket_style = style\n    if first is not None and second is None:\n        if first.begin == 0:\n            left = None\n            right = None\n    return left, right, bracket_style\nThen you will have to modify the bh_core.sublime-settings file.  Copy the original one to Packages/User/bh_core.sublime-settings. (Keep in mind that if I change default rules in the future, you will have to merge those rules yourself).\nThen point the php_angle rule at your new bh_plugin library:\njavascript\n        // PHP Angle\n        {\n            \"name\": \"php_angle\",\n            \"open\": \"(<\\\\?)(?:php)?\",\n            \"close\": \"(\\\\?>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\"],\n            \"plugin_library\": \"User.phpunmatched\",\n            \"enabled\": true\n        },\nI don't think I want to add this by default.  Some people may want to know if their PHP file doesn't have a closing tag.  The inconsistent need for the closing tag makes it difficult for me to include this by default.  So I feel disabling it by default isn't going to happen, but for those who do, this method should work.\n. With the solution I provided, I feel this issue can now be closed.  Feel free to re-open it if you have troubles with the solution I provided.\n. > I was able to override settings only by adding this to user file.\nThis will kill all your other rules.  If you edit the array, you have to copy the whole array.\n\nWouldn't be better to use dictionary instead of array with name so definitions can be over-writen easily in user config?\n\nNo, dictionaries are not ordered.  Some rules take precedence over others, so order is important to some (not all).\n\nNot sure if it is best way to do it (ST3).\n\nActually, last week, I added a new feature to the ST3 branch of BracketHighlighter that allows you to easily override parts of rules and even insert rules without having to copy brackets.  You can use user_brackets.  And you only have to specify the attribute you are overriding (and the rule name).  See the forum post for more info http://www.sublimetext.com/forum/viewtopic.php?f=5&t=3327&start=170#p61550.\n. \n:smile:  It was from another project I was working on, but it all goes to the same place.  I really need to update it to something more general.\n. Thanks!\n. > Second, it all seems unnecessary.\nIf it wasn't necessary, I would have done it differently.  The Sublime API does not allow us to feed in hex values directly.  They must be fed in via a KEY that is found in your color scheme.\n\nUnless I am missing something, highlight colours can only be defined by defining a custom scope in the theme file and then referencing it in the BH user settings. First of all - I can't get it to work. I tried this in my theme, but no joy:\n\nYou are probably doing something wrong since this is a well tested feature.  You will need to give me more info if you would like me to take a look:  ST2 or ST3?  Make available your color scheme in question.  Make available your BH user settings if your modified the default.\n. Your theme worked fine for me. Any of my brackets that were configured to use brackethighlighter.default showed up as red.\nST2 or ST3?\nCan you make available your bh_core.sublime-settings?  Did you modify it or are you using the default?\n. I will take a closer look later today.  But, if I cannot reproduce your issue, which I feel is a very likely scenario, you may need to evaluate your Sublime environment.  Once I confirm the plugin is working, I can give you some pointers, but it would then be out of my control.\nLet me throw out a possibility that might be occurring; one you can look into.  If you have a color scheme and edit it, usually those changes take place immediately.  But if you have a plugin that modifies your color scheme, usually the plugin will copy the original to a temp file and modify the copy and then set that copied version as your current theme theme in memory.  In this case, usually resetting the theme as the original will cause the plugin at fault to then use the new original.\nIt is also possible that Sublime is just nor reloading your changes (which does happen on occasions, but is less likely).\nAnyways, I will let you know once I formally evaluate your settings file in ST2 with the theme you provided me with.\n. I can find nothing wrong with what you gave me.  It works fine in ST2.\n. There is something interfering with it, or somehow you aren't using what you think your using.  I would try a revert.  http://www.sublimetext.com/docs/2/revert.html\nAnyways, sorry I couldn't be more help. \n. Post your theme and BH settings you are using so I can test.  Changing colors is a well tested feature that I use on a regular basis.  I imagine there is something wrong with your setup.\n. I will take a look when I get a chance.\n. This is a user error.\nYou modified your theme file incorrectly, the new scope must be placed in the scope array correctly; a working theme is shown below.  Please compare it to what you provided me to see your error:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>author</key>\n    <string>Chris Kempson (http://chriskempson.com)</string>\n    <key>name</key>\n    <string>Base16 Eighties Dark</string>\n    <key>semanticClass</key>\n    <string>base16.eighties.dark</string>\n    <key>colorSpaceName</key>\n    <string>sRGB</string>\n    <key>gutterSettings</key>\n    <dict>\n        <key>background</key>\n        <string>#393939</string>\n        <key>divider</key>\n        <string>#393939</string>\n        <key>foreground</key>\n        <string>#747369</string>\n        <key>selectionBackground</key>\n        <string>#515151</string>\n        <key>selectionForeground</key>\n        <string>#a09f93</string>\n    </dict>\n    <key>settings</key>\n    <array>\n        <dict>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#2d2d2d</string>\n                <key>caret</key>\n                <string>#d3d0c8</string>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n                <key>invisibles</key>\n                <string>#747369</string>\n                <key>lineHighlight</key>\n                <string>#393939</string>\n                <key>selection</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Text</string>\n            <key>scope</key>\n            <string>variable.parameter.function</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Comments</string>\n            <key>scope</key>\n            <string>comment, punctuation.definition.comment</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#747369</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Punctuation</string>\n            <key>scope</key>\n            <string>punctuation.definition.string, punctuation.definition.variable, punctuation.definition.string, punctuation.definition.parameters, punctuation.definition.string, punctuation.definition.array</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Delimiters</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Operators</string>\n            <key>scope</key>\n            <string>keyword.operator</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Keywords</string>\n            <key>scope</key>\n            <string>keyword</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Variables</string>\n            <key>scope</key>\n            <string>variable</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Functions</string>\n            <key>scope</key>\n            <string>entity.name.function, meta.require, support.function.any-method</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Classes</string>\n            <key>scope</key>\n            <string>support.class, entity.name.class, entity.name.type.class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#ffcc66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Classes</string>\n            <key>scope</key>\n            <string>meta.class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2f0ec</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Methods</string>\n            <key>scope</key>\n            <string>keyword.other.special-method</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Storage</string>\n            <key>scope</key>\n            <string>storage</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Support</string>\n            <key>scope</key>\n            <string>support.function</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Strings, Inherited Class</string>\n            <key>scope</key>\n            <string>string, constant.other.symbol, entity.other.inherited-class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Integers</string>\n            <key>scope</key>\n            <string>constant.numeric</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Floats</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Boolean</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Constants</string>\n            <key>scope</key>\n            <string>constant</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Tags</string>\n            <key>scope</key>\n            <string>entity.name.tag</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Attributes</string>\n            <key>scope</key>\n            <string>entity.other.attribute-name</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Attribute IDs</string>\n            <key>scope</key>\n            <string>entity.other.attribute-name.id, punctuation.definition.entity</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Selector</string>\n            <key>scope</key>\n            <string>meta.selector</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Values</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Headings</string>\n            <key>scope</key>\n            <string>markup.heading punctuation.definition.heading, entity.name.section</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Units</string>\n            <key>scope</key>\n            <string>keyword.other.unit</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bold</string>\n            <key>scope</key>\n            <string>markup.bold, punctuation.definition.bold</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#ffcc66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Italic</string>\n            <key>scope</key>\n            <string>markup.italic, punctuation.definition.italic</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Code</string>\n            <key>scope</key>\n            <string>markup.raw.inline</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Link Text</string>\n            <key>scope</key>\n            <string>string.other.link</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Link Url</string>\n            <key>scope</key>\n            <string>meta.link</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Lists</string>\n            <key>scope</key>\n            <string>markup.list</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Quotes</string>\n            <key>scope</key>\n            <string>markup.quote</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Separator</string>\n            <key>scope</key>\n            <string>meta.separator</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#515151</string>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Inserted</string>\n            <key>scope</key>\n            <string>markup.inserted, markup.inserted.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Deleted</string>\n            <key>scope</key>\n            <string>markup.deleted, markup.deleted.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Changed</string>\n            <key>scope</key>\n            <string>markup.changed, markup.changed.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Ignored</string>\n            <key>scope</key>\n            <string>markup.ignored, markup.ignored.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Untracked</string>\n            <key>scope</key>\n            <string>markup.untracked, markup.untracked.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Colors</string>\n            <key>scope</key>\n            <string>constant.other.color</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Regular Expressions</string>\n            <key>scope</key>\n            <string>string.regexp</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Escape Characters</string>\n            <key>scope</key>\n            <string>constant.character.escape</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Embedded</string>\n            <key>scope</key>\n            <string>punctuation.section.embedded, variable.interpolation</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d27b53</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Invalid</string>\n            <key>scope</key>\n            <string>invalid.illegal</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#f2777a</string>\n                <key>foreground</key>\n                <string>#2d2d2d</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Curly</string>\n            <key>scope</key>\n            <string>brackethighlighter.curly</string>\n            <key>settings</key>\n            <dict>\n                        <key>background</key>\n                        <string>#2352A4</string>\n                <key>foreground</key>\n                <string>#2352A4</string>\n            </dict>\n        </dict>\n    </array>\n    <key>uuid</key>\n    <string>36594751-36ac-443a-9f2f-111b815085cf</string>\n</dict>\n</plist>\n. > Unclear if this is from the right branch for ST3?\n\nIf you're seeing brackets in the gutter, you must have the correct branch.\nThe class definition does not match, either by clicking on class or the closing end.\nRemoving the method ajax_last_edited_rollup will make them match.\n\nIs this the entire file? Because this snippet matches fine for me with Ruby.  I see no problem.  It does not match brackets in comments, but it does match brackets in a string, but only between the parent string quotations.  If this isn't the entire file, then I would imagine there is some syntax it is getting tripped up on that you have not posted.\n. Unless I am missing something, or yours is behaving different than mine for some reason, it works perfect here.\nYou mentioned yours will not match class from either end, but mine matches them with no problem.  Everything matches up perfect here.\n. I folded the case statement to make the picture smaller.\n\n. Did you restart after installing?  Are you getting bugs in the console?  I usually recommend a Sublime restart after installing BH.  Check your match threshold in the settings file as well if the non-demo file is really big.  I might have my threshold for search distance bigger than yours.\nEdit: errors in the console...not bugs\n. > And now... it's no longer observer the Mark Style. I have it set to outlines. I am not getting outlines.\nI think it might be sick :)\n. I have my threshold set to 10000  that is twice as big as the default.\n\nWell, I've always had these kind of problems with it. I thought I'd give it a go in ST3, hoping that either ST3 or new BracketHighligher might fix it. But no luck.\n\nNot sure what to say.  I have it working 100% percent here.  It respects my Mark Styles with no issues.  I use this editor everyday with BH running all the time on different platforms (Windows, OSX, and Linux).  So it is very well tested.  It also has quite a large user base, and I have not had any reports of these kinds of issues.\nI feel whatever your issues are, they are particular to your machine/setup and not the plugin.  It is difficult for me to debug, because the issue doesn't seem to be in my plugin.\n. > OK, sorry, did not realize that setting High Visibility from the menu is not sticky.\nYeah, it is not sticky.  It isn't usually something that people want on all the time because it can be distracting after a while.\n. Not a problem.  The search must be limited with a threshold because when the file is really big, BH can bog down the editor since it is run on every modification, and every cursor move.  So by limiting it, we keep performance good.  Granted I use a very conservative for the threshold by default (one that I don't even use), but that is so people don't file a bunch of issues saying BH slows down my editor.  It ensures a good first impression, then I let them crank it up as high as they want, then when things get laggy because they pushed it too far, they know why :).\n. It is possible it doesn't recognize some of the bracket cases.  I don't use Ruby, so when you eventually can isolate what types of brackets or scenario it fails on, report back and we can fix that.  I mainly leave specific syntax issues up to the community to fix.  I fix the languages I personally use, but other languages, I usually just give pointers.  It is better that way since I don't intimately know every language.\nSomeone pointed out to me a bit ago that BH couldn't match if statements if they were like this somevar = if condition.  We fixed that, but it wouldn't surprise me if there were other similar issues.\n. I am afraid I cannot address this issue because I do not speak this language.  I am hoping that maybe someone who knows what language this is  and follows this repository can translate this for me so I can help you with your issue.\n. @youryida Used google translate to figure out this was in Chinese.\n```\nEnglish is not good, forgive me use Chinese. \nBH2ST3 this version, downloaded to the local Packages, the name of the folder is BracketHighlighter-BH25T3, but Main.sublime-menu this file, folder path using BracketHighlighter, (193 OK \"args\": {\"file\": \"$ {packages} / BracketHighlighter / bh_core.sublime-settings\"}). \nThis will cause the package to be invalid. \nI was white, I do not know this is not a bug, the easiest method is to download the fix down the folder name changed from BracketHighlighter-BH25T3 BracketHighlighter.\n```\nWhen downloading the package manually, it should be downloaded to BracketHighlighter not BracketHighlighter-BH25T3.  BracketHighlighter expects the plugin to be found in BracketHighlighter, so this should always be used.\n. I recommend Package Control to be used to install plugins.  This ensures the proper installation of plugins. https://sublime.wbond.net/installation.\n. Issue closed since there is no problem.\n. I will take a look when I get time since I do actually use XML.\n. -This should be fixed now.\n. It used to, but with the rewrite to add all kinds of custom brackets, it is a bit harder due to the current implementation.  See issue #94 for any further developments since this issue is a duplicate.  I will not promise the addition of this feature, only that I will consider it.\n. Okay, everyone that has been wanting this, take some time to test the new experimental feature (ST3 only currently)\nAdd this setting to your bh_core.sublime-settings.\njavascript\n\"bracket_outside_adjacent\": true,\nThere is going to be some more overhead when this is turned on, but hopefully the impact won't be too noticeable.  I did this for you guys, so please do test.  If you are waiting for ST2, it may be a tomorrow or the day after.\nSee issue #94\n. > I believe it's the primitive type you're using?\nNot sure what you mean by this, but let me explain how BH works:\nBH sometimes does not match a valid bracket pair because of the threshold that is required on instant matching.  Matching tags across excessive content can slow down typing etc since matches are performed on every cursor change and key press.  The settings file has a default threshold of 5000; I personally use 10000 which is twice as big, but you can push it even further if you like (but keep in mind the further you push it, the greater chance you will experience performance issues in brackets with great distance between them).  You can even disable threshold checks in the settings file, but I would not advise that.  If you use any of the on demand plugin commands found in the command palette, they skip the threshold since they are not run automatically.\nThe question mark is just visual feedback telling you \"I tried to match, but there is no valid match, or I had to give up because I hit the threshold limit\".\nI short this is not a bug, but a built in feature.  Hopefully, I have armed you with the information you need to tweak it to your liking.\nEven though I have closed this issue, feel free to ask more questions if you are still confused.\n. I was just going to suggest that you take a shot at it; I now require people to at least take a stab at it before I touch it because I am pretty busy.   It also makes since for people who are intimately familiar with a language to be the implementers; I ran into that issue when adding ruby definitions (I don't use Ruby as of yet, so there were numerous rehashing of the rules).  But it looks like you are taking initiative, which is great!  I will take a look when I get a chance and see if I can give you some advice (I do use bash now and then), if you haven't already come to a good solid working solution.\n. Ruby had similar issues.  A matter of fact, Ruby was actually even more complicated, so I am pretty certain we can get this working fairly reliably in bash.\nYou can look at the Ruby definition to get some ideas, though the Ruby definition is a bit more complicated due to other silly exceptions.  I think Ruby has a minor issue with case statements which I will have to fix, but I know how to fix it.\nAnyways, in short, I am sure we can get this working.\n. Oh wait I didn't notice you were talking about unclosed )s.  That is an odd one that might not be solvable.\n. Let me look at this later.  I do have some tricks up my sleeve that might help.\n. You might think about adding an ignore for the scope meta.scope.case-pattern.shell in the () bracket definition.\njavascript\n        {\n            \"name\": \"round\",\n            \"open\": \"(\\\\()\",\n            \"close\": \"(\\\\))\",\n            \"style\": \"round\",\n            \"scope_exclude_exceptions\": [\"string.other.math.block.environment.latex\"],\n            \"scope_exclude\": [\"string\", \"comment\", \"meta.scope.case-pattern.shell\"],\n            \"language_filter\": \"blacklist\",\n            \"language_list\": [\"Plain text\"],\n            \"find_in_sub_search\": \"true\",\n            \"ignore_string_escape\": true,\n            \"enabled\": true\n        },\n. \nWorks when patching round brackets.\n. You can use my ScopeHunter plugin to view scopes.  If you want to reduce false positives, you can test the scope in a bh_plugin compare event.  For instance, it looks like if fi keywords are found in a block that is scoped as meta.scope.if-block.shell and shell keywords are noted by keyword.control.shell.  You can possibly do some tricks and get away with only using the definition.  Maybe by excluding the match of if fi in source.shell, but use the exception when it is in a if block  meta.scope.if-block.shell and the scope is keyword.control.shell.\nThese are just ideas.  I don't have time right now to go into it further, but good luck, and let me know if you make some more progress or get stuck.\n. > Found a better way to fix the ) problem without breaking other round brackets:\nThere are a number of approaches, I am more just pointing you at them :smile:.  Though I think you can see now why I try to get the community involved, it can be time consuming coming up with the perfect definitions for every language.\n\nIs there a simple way to allow anything inside strings?\n\nNot sure what you mean...You control the allowed scopes and non-allowed scopes in the defintion as you are doing.  If you look in the default settings file for BH, you will see I elaborate in the comments about scope syntax -scope vs !scope vs scope etc.  It uses the same notation that tmTheme files use since the Sublime API uses that same notation when testing scopes.  You can combine scopes for an and scope1 scope2.  I think an or would be something like scope1; scope2.  I don't know all of it off the top of my head.\nIt can get quite complicated explaining all of the dynamics of how all these things interact.\n. Also, sometimes you might have to decide what is most important to target and match.  Highlighting case and esac might be more important than highlighting the individual statements.  There are a number of approaches, and you will have to weigh what is most important. \n. Let me start by saying scope bracket definitions are different than bracket definitions.  From your example above, it looks like you are trying to combine them.  I don't know where you actually defined them.\nBracket Definitions use regex to search the code for patterns; here are the rules you can define and they go under the brackets key in the settings file:\nhttps://github.com/facelessuser/BracketHighlighter#configuring-brackets-1\nScope Bracket Definitions search for an entire scope(s) and then looks at the beginning and end of the scope and applies a regex to see if said beginning and end of that scope match the regex.  The rules are defined here and go under the scope_brackets key in the settings file:\nhttps://github.com/facelessuser/BracketHighlighter#configuring-scope-brackets\nI would focus more on your earlier iteration and ignore the round brackets in case statements option keys since they can very often be unpaired.  I feel this is an acceptable compromise in this scenario.  In the case statement values I see no problem matching the round brackets because it is expected they will be paired.  I am also not sure I see the usefulness of paring the beginning of a case key with the value end.\nI would also advise against highlighting then/fi, but instead would highlight if/fi.  Using then/fi would break the bracket pairing below not to mention it breaks the precedence already laid down by similar highlighting in other languages.  Additionally, which then below gets paired with the fi?  (that is why other languages don't pair this way):\nbash\nif test-commands; then\n  consequent-commands;\n[elif more-test-commands; then\n  more-consequents;]\n[else alternate-consequents;]\nfi\nYou can always add to the rules to enhance them after you get the basics working.  I would get the basics working and pull request that.  Then you can play around with additional enhancements for an additional pull request if it pans out.\n. ST2 and ST3 support complete\n. > Works well in most cases, however it will still highlight ifs even when not followed by ; then.\nGive me an example where this would fail.  Things like this I am pretty good at fixing.  Is this the same reason you are pairing do/done instead of for/done?\n. > Of course we could as well use \\b(select|until|while|for)\\b + your magic to match code + (?:(?:;|^)\\s*)\\b(do)\\b\nI like this because it marks the beginning of the block.  It also follows the convention of how we do this in other languages.\n\nif invalid\n  echo \"there should be ';then' after 'invalid'\"\nfi\n\nI will take a look tonight.\nThanks for doing this.  It helps me to just focus on the really hard issues.\n. > if invalid\n\necho \"there should be ';then' after 'invalid'\"\nfi\n\nOkay, after looking at this, I don't think this is a problem.  The code is invalid, but I don't think BH should need to validate the code.  Technically, the syntax highlighter highlights if/fi properly as well even though the code is invalid, I don't think BH should be faulted doing the same thing.  I believe this is more a \"user should pay attention to what they are coding\" problem than a BH problem.  Now if we could show valid code that caused the if/fi to fail I would be more concerned.\nI think something like this would keep it simple and compact (we can keep it one entry like we do for most other languages since they all seem to use the same rules).  And also you can basically one line most of bash with semicolons:\njavascript\n        //Bash\n        {\n            \"name\": \"bash\",\n            \"open\": \"(?:(?:;|^)\\\\s*)\\\\b(if|case|while|select|until|for)\\\\b\",\n            \"close\": \"(?:(?:;|^)\\\\s*)\\\\b(fi|esac|done)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"plugin_library\": \"bh_modules.bashkeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Shell-Unix-Generic\"],\n            \"enabled\": true\n        }\nPlus the round bracket patch:\njavascript\n            \"scope_exclude\": [\"string\", \"comment\", \"punctuation.definition.case-pattern.shell\"],\nThen drop this in bh_modules/bashkeywords.py to pair the right open with the right close:\n``` python\ndef compare(name, first, second, bfr):\n    o = bfr[first.begin:first.end].lower()\n    c = bfr[second.begin:second.end].lower()\nmatch = False\nif o == \"if\" and c == \"fi\":\n    match = True\nelif o in [\"select\", \"for\", \"while\", \"until\"] and c == \"done\":\n    match = True\nelif o == \"case\" and c == \"esac\":\n    match = True\nreturn match\n\n```\n\nLet me know what you think.\n. I am not sure if case sensitivity is a problem with bash keywords.  If they must be lower case we can force a case check like we do for erlang in https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/erlangcase.py\nThis would only be needed if there was a big concern of IF be confused with if.  If this isn't usually allowed, then don't worry about it.\n. > couldn't we just use this to force lower case?\nI am not sure what you mean.\nFirst, the real question is do these keywords get used in different cases for other reasons (reasonable reasons) outside of strings and comments (which we already ignore).  If not, we don't need to worry about it.  For the most part, I don't think people will be using variables and such with the same name, but if we could think of a reasonable situation where someone would, we should address it.  My guess is that we don't need to concern ourselves with this.\nBut if we did need to worry about it, we would check a potential bracket's case in the validation event and rule it out as being considered a valid bracket.  You don't want invalid brackets being compared; it would cause matching to break. So those should never make it to the evaluation list to be compared in the compare event.\nBut like I said, my guess this isn't really a concern for us.  I just mentioned it on the off chance you could think of a good reason to add it.\n. > o = bfr[first.begin:first.end].lower() # this changes \"IF\" to \"if\"\nThis was part of my question, is IF a valid if?  If so, then lets lowercase the check like you show.\n\n{\n  \"open\": \"(?:(?<!\\\\n)(?:;|^)\\s_)\\b(if|case|while|select|until|for)\\s\",\n  \"close\": \"(?:(?<!\\\\n)(?:;|^)\\s_)\\b(fi|esac|done)(?:\\s|$)\"\n}\n\nCool, I will verify this as well once you commit bashkeywords.py as well.\nThis might wrap things up.\n. Ideally they wouldn't get included, but I guess it will throw up matching errors which will lead to the user fixing the if statements etc.  So I guess it's fine.\nI will validate, and if everything looks good, I will merge it.\n. Seems to work great.  The falsely targeting IF etc. does bother me though.   I figure if we are going to let the wrong case throw an un-match error, we probably shouldn't even allow it in the list to be compared.\nCan we rename bashkeywords.py to bashsupport.py and drop this in?\n``` python\ndef validate(name, bracket, bracket_side, bfr):\n    return bfr[bracket.begin:bracket.end].islower()\ndef compare(name, first, second, bfr):\n    o = bfr[first.begin:first.end]\n    c = bfr[second.begin:second.end]\nmatch = False\nif o == \"if\" and c == \"fi\":\n    match = True\nelif o in [\"select\", \"for\", \"while\", \"until\"] and c == \"done\":\n    match = True\nelif o == \"case\" and c == \"esac\":\n    match = True\nreturn match\n\n```\nYou would have to update this line as well in the settings file:\njavascript\n            \"plugin_library\": \"bh_modules.bashsupport\",\nThis will ensure we never consider a bracket that is the wrong case.  I see no other issues.  I will merge after this small change and then back-port it to ST2.\n. Fantastic job, thanks!\n. Done for now.\n. > Obviously I can tweak bh_core.sublime-settings to do this but it would be even better if it worked out of the box.\nAnd then pull request for out of the box functionality :smile: \n. I will have to be honest.  I don't spend any time on languages I don't use.  The reason I exposed custom brackets via the settings file and via bh_plugins is because I don't have time to learn the nuances of languages I don't use.  And those nuances are important to get good working rules setup for a given language.  Find a bug in the core, and I will fix that.  The current infrastructure needs adjusting so you can add support for a language, I can do that.  It is a language that I am invested in, no problem.  Some language I never touch, sorry, but I can offer advise.\nSo what I ask, is that users of BH do their best to create the rules for their languages.  If they get stuck etc., I can offer helpful guidance.  You can look at #159 and #160 and see how one user went about putting together bash support.  He had questions, but I didn't leave him high and dry.\n. Looks good.\n. There is already a branch that supports ST3 https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3.  Package Control automatically installs the correct one: see here: https://sublime.wbond.net/packages/BracketHighlighter\n. That is weird Package Control shouldn't be putting it put in Tag.  Package Control must have goofed.  I don't do any renaming of the package location, so it should just install in BracketHighlighter.\nIn cases like this, an uninstall and reinstall are usually your best bet.\nGlad you got it working.\n\nThanks for the time you've put in on developing BH!\n\nYou're welcome!\n. Cool.  I will take a look maybe later today.\n. Looks okay to me.\n. https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L249\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L420\n. I don't know what package you are using for angular.js support, but keep in mind that what you see in the sublime window's bottom right corner is not what you put in the settings file.  You put the name of the tmLanguage file.  Point me at the package you use, and I can show you what I mean.\n. https://github.com/angular-ui/AngularJS-sublime-package/blob/master/AngularJS.tmLanguage\nNotice the file is called AngularJS.tmLanguage, so you would use AngularJS.  Hope that helps.\n. Cool, if you would like to help out other AngularJS users, you can submit a pull request.  Glad you got it working.\n. The problem is a syntax highlighting issue.  The curly brackets (when coupled with the #^ characters) are scoped as comments.  BH does not search comments for brackets.  Notice if you put a space between the # and the ^ or ^ and { the curly brackets work again.  This is because the scoping changes.\nI have another plugin called https://github.com/facelessuser/ScopeHunter that will allow you to look at this in more detail.\nQuotes are not working because, again the scope region changes subtly when #^{ are together.  The way quote matching works is:\n1. we find if we are in a string scope region\n2. we check the beginning of the string region: Does is start with \" or '?\n3. Does the region end with the same character as the start?\nSo why is the quote match failing?  Because when in this docstring format, the string counts the leading space in this region _\"somestring\" (boo! where _ is a space).  This is a problem with the syntax highlighter being sloppy with its scoping.  When you disrupt the #^{ by deleting a character or spacing them apart, the syntax highlighter no longer scopes it as a docstring, then the string is properly scoped as \"something\" (woohoo, no space).\nBH works as intended.  Hopefully this at least explains why the quotes and curly brackets don't work in the posted example.\n\nBut faceless, how can I change this behavior?\n\nAhh, now we are asking the right questions :wink:.  Now keep in mind, I don't code in clojure, so if a fix is comming, it would probably have to come from you or one of your clojure minded peers in the internet ether.\n- But I imagine you could create a clojure rule to match #\\\\^(\\\\{) with (\\\\}) (represented as regex).  This would fix the docstring curly issue.\n- And patch clojure to highlight docstrings proper.\n\nBut facelss, I don't want to change the default clojure syntax!\n- Bah.  Well, I guess an alternative would be to create another clojure rule that copies the quote rules, but only targets clojure files, and targets specifically string.docstring scope.  Then you can match \\\\s*(\") with (\") (represented as regex). Repeat if desired for single quotes.  I feel like this is a hack for sloppy highlighting, but ultimately people probably don't care.\n\nSo that should arm you with enough knowledge to solve this.  If you need more info, just checkout the readme.  If you are still baffled, feel free to ask some more questions.\n. Perhaps I was over-thinking this.  Forget the curly_metadata definition, and modify your original curly rule to look like this:\njavascript\n        {\n            \"name\": \"curly\",\n            \"open\": \"(\\\\{)\",\n            \"close\": \"(\\\\})\",\n            \"style\": \"curly\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"scope_exclude_exceptions\": [\"string.other.math.block.environment.latex\", \"comment.punctuation.definition.metadata.begin.clojure\", \"comment.punctuation.definition.metadata.end.clojure\"],\n            \"language_filter\": \"blacklist\",\n            \"language_list\": [\"Plain text\"],\n            \"find_in_sub_search\": \"true\",\n            \"ignore_string_escape\": true,\n            \"enabled\": true\n        },\nI think that will do it.\n. Glad I could help :smile: \n. I don't use EJS:\n- Did you take a look at the settings file and read the readme?\n- What package do you use for EJS?\n. @rooc You cant just put it in tag_mode, you need to also put it here:\njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\n. You have to add the colors to your theme.  Please read the readme.\nAs for no_multi_select_icons, that works as well.  It simply disables the gutter icon when there are more than one selections.\nI am not certain what your issue is.\n. BracketHighlighter only adds one bracket for a single selection.  If you see more than one for a single selection, something else is adding them.  Did you leave Sublime's native bracket highlighter on?\nIn your Preferences.sublime-settings file, try setting all the following to false:\njavascript\n    \"match_brackets\": false,\n    \"match_brackets_angle\": false,\n    \"match_brackets_braces\": false,\n    \"match_brackets_content\": false,\n    \"match_brackets_square\": false,\n    \"match_selection\": false,\n    \"match_tags\": false,\nI currently use themes that highlight all the brackets, so I know it works.  More than likely you put them in the wrong place in the theme or something like that.  Can you share your theme so I can look at how you inserted the curly rule?\n. I will take a look sometime today when I get a chance.\n. Oh, I do see something...  JSON does not allow trailing commas:\njavascript\n    \"curly\": {\n            \"icon\": \"curly_bracket\"\n            ,\"color\": \"brackethighlighter.curly\", <----- Remove this comma the last item cannot have a trailing comma\n            // \"style\": \"underline\"\n        },\n. Haven't had a chance to look at your theme yet.  I will try tomorrow.\n. > OK. But I disabled that plugin, still the same. Thanks.\nWhatever theme you are using, colors won't work if your custom scope (in this case brackethighlighter.curly) is not in it.  You don't need to disable that package.  Also, you have yet another trailing comma I missed the first time which was breaking your settings:\njavascript\n    \"curly\": {\n            \"icon\": \"curly_bracket\"\n            ,\"color\": \"brackethighlighter.curly\",\n            // \"style\": \"underline\"\n        }, <--- Remove this comma as well\n. Your theme is fine and worked for me.  Here is your last problem: you did not configure your settings file correctly.  You all style options need to appear under the bracket_style key like they do in default settings file.\nSo remove this entire setting:\njavascript\n\"curly\": {\n            \"icon\": \"curly_bracket\",\n            \"color\": \"brackethighlighter.curly\"\n            // \"style\": \"underline\"\n        }\nAnd instead copy this.  And in the future, edit this in your user settings.\n``` javascript\n    // Define region highlight styles\n    \"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracekt pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        // \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\"\n        \"color\": \"brackethighlighter.curly\"\n        // \"style\": \"underline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\"\n        // \"color\": \"brackethighlighter.round\",\n        // \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\"\n        // \"color\": \"brackethighlighter.square\",\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\"\n        // \"color\": \"brackethighlighter.angle\",\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        // \"color\": \"brackethighlighter.tag\",\n        \"style\": \"outline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"regex\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    }\n}\n\n``\n. There are plenty of examples in thebh_core.sublime-settings`:\nBut you could do it a number of ways:\nLook ahead which won't capture the ;\n(do)(?=;)\nor just capture the ;, but only highlight the do:\n(do);\nBH highlights what is in the first capturing group.  And there can only be one capturing group for a close or open definition, but you can use as many non-capturing groups as you like.  Keep in mind any characters you capture, will not be seen by other rules if they match.\n. You can try out this branch https://github.com/facelessuser/BracketHighlighter/tree/ST3 or wait till I push this back onto the main ST3 branch (BH2ST3...yeah I should have named it just ST3 in the beginning).\nI am busy doing cleanup and breaking apart functional parts into separate files, but on this branch I added endpoint highlighting.  This looks like it did on BH1.  I added it because it is very general and translates easy to non tag rules if this is ever required for another kind of rule.  Highlighting tags names is very language specific and would require hard coded stuff in the core, or a lot of work extending the bracket plugin or rule API (which I am just not interested in doing right now).\njavascript\n        \"tag\": {\n            \"icon\": \"tag\",\n            \"color\": \"brackethighlighter.tag\",\n            \"style\": \"underline\",\n            \"endpoints\": true  // <---- Just add this\n        },\n. \n. >  I would prefer underline \"dict\"\nMaybe when I am done with what I am doing now I can experiment with adding a selection event that can be tapped into by the tag bh_plugin.  We'll see how it goes and how motivated I am.\n. Done.  I will consider your tag name highlight request for the future, but I at this point, I will consider this issue closed.\n. I am reopening this issue as I think I am willing to tackle tag name underlining now.  I imagine I will just add a bh_plugin hook that can alter the highlighting after all other plugin modifications to selections and regions have been completed.\nSo for tag bh_plugin, it will tap into this hook and adjust the highlight to be just the name.\n. So a highlighting hook as been added on the main/dev branch (https://github.com/facelessuser/BracketHighlighter/commit/8c01c8c6b03671be96c9f16f785a0648fa400d93).  Tag is now utilizing it to highlight only the tag name.\n\nA bit of testing still needs to be done before I push it to the ST3 branch officially.  But so far it is looking good.  Hopefully I will have it pushed out officially sometime soon.\n. This has been merged to the ST3 branch.\n. 1.  I am currently on OSX, ALT+F3, what is this?  Find All?  On OSX it is ALT+ENTER.  Just trying to confrim.\n2. What is your bracket threshold set to?  And if you lower that to lets say 5000 do you see it working more useable?\nSo let me explain why i am asking this:\n-  BH already lets you limit your search \njavascript\n    // Set max number of multi-select brackets that will be searched automatically\n    \"auto_selection_threshold\" : 10,\n- The re-write of BH2 uses a different algorithm than BH1. And is now applying regex to a buffer region.  In most cases it is faster than the original, but in some cases, it can be slower, especially when this is set real high in a large file.\njavascript\n    // Character threshold to search\n    \"search_threshold\": 5000,\nIn an HTML when matching tags, you can expect even more delay because each tag searches twice, one to determine if the cursor is between <>, then another to match tags.\n\nSo is there anything I can currently do?\n\nWell there are some possibilities, first if you can play with search_threshold and auto_selection_threshold (which was added in #20 and currently exists in BH2) independently and report on the difference of performance, this will help.  I believe by limiting search_threshold more, your performance will increase.  Then, setting search_threshold back to your original and playing with auto_selection_threshold I expect performance increase as well.\n\nWhat about you, can you do anything?\n\nIf things are as I think, it is possible.  If the search_threshold limit makes a difference  when performing multi-selection matches, I can probably cache the first regex search and gain some performance, maybe a lot.  I think right now, each selection is causing the buffer to be re-searched.  I think you can see why this is not as effective.\n. Hmm.  I search every time because the window of search changes every time.\nFor me just setting search_threshold and auto_selection_threshold to the defaults gave me better performance.  I will wait to hear back from you.\nI do warn that increasing search_threshold may have performance hits in some scenarios.\nSublime itself, will have a penalty for number of selections as well, so take that in to account as well.  Try opening a large file and Find All for \\w  You will notice lag even with BH disabled (other plugins that are called during on_modified etc. will also play into this as well).\n. Fixed it with one small line change https://github.com/facelessuser/BracketHighlighter/commit/440e83deb1513b92d63b4f9781df9d9be08007b4\nTry it now and notice how much faster it is with no settings changes.\n. FYI, on my ST3 clean up branch I've been cleaning out dead code and fixing overlooked issues.  While doing this, I came across broken code that was supposed to completely turn off highlighting if max selections were exceeded.  Apparently, I decided to do things different, but didn't remove the code.  So when I get this cleanup merged back to the main branch, you will be able to use:\njavascript\n    // Enable this to completely kill highlighting if \"auto_selection_threshold\"\n    // is exceeded.  Default is to highlight up to the \"auto_selection_threshold\".\n    // Key command plugins ignore this since they are \"on demand\" and not \"auto\".\n    \"kill_highlight_on_threshold\": false,\nThis will give you nice smooth editing with many selections since BH will essentially do nothing in this case.\n. I agree.  I will probably be making kill_highlight_on_threshold true by default moving forward.  This behavior turns out was default in BH1.  With kill_highlight_on_threshold, outside adjacent brackets, and minimal tag highlighting, I think all legacy features from BH1 are finally ported into BH2 now.\n\nWhat about some very carefully selected default settings? To allow highlight in situations were makes sense, and disable it when the common sense is exceeded.\n\nI feel this may be subjective.   Most of the settings are pretty conservative out of the box for anything automatically performed.   I feel kill_highlight_on_threshold is adding to that kind of thinking which is good.   I don't know how much more intelligence can be added in this regard, but if there is more that can be done, I am open to suggestions.\n. Kill highlight won't block 3000 or even 30000.  Auto select should be fine in all those scenarios.  Now, if you select 3000 regions and run a bh_plugin on it like select bracket content, you're on your own.  Anything on demand, I defer to the logic processor between the user's ears ;).  Also, once Sublime gets enough regions, it bogs down itself without plugins.  I did a search on your test json for \".*?\" which created 37,000 regions.  There was no noticeable difference with BH enabled or disabled as long as kill highlight was enabled.  Even with kill highlight disabled, 37,000 regions wasn't much worse. \n. > I've no idea if the plugin \"select bracket content\" is on\nIts not a matter of on and off.  You've never had a problem with select bracket content because you've never used it.  It is a manual call available in the command palette.  You can bind it to keys like I do, but I don't force that on a user by default; I just provide an example keymap file.  You have to go out of your way to use it; therefore, if you use it on 37,000 regions, you get what's coming.\nSo when I talk about defaults, I am specifically referring to auto match which is what everyone uses without a choice if installed.  This is also why people install it, everything else is bonus.\n\nwhen your plugin is installed with default settings, selecting 40/50/600/3000 or more Regions will add more overhead than default ST overhead?\n\nEvery plugin adds more overhead if it is on a listener, even if all it does is run and exit.  But with kill_highlight_on_threshold that is pretty much what it does; runs and exits.  So, is there noticeable overhead? No.\n. > OK.. so that means that kill_highlight_on_threshold defaults makes it friendly? and there is no noticeable overhead?\nYes.\n. Kill highlight feature is now in.\n. Thanks for the pull request, and the changes look fine, but please read https://github.com/facelessuser/BracketHighlighter#pull-requests.  Pull requests should be done against the main branch not a separate Angular JS branch. You are already forked, so no need to branch on a separate branch on a fork.  I will be merging into the main branch, and then I will push it out to the ST3 branch when I am ready.\nIf this is meant for ST2, I am no longer actively supporting ST2, so I then require an additional step of modifying the main branch and the ST2 branch in order to get the changes accepted.  This is to encourage that new changes make it to the current supported branch.\n. @endorama I am going to go ahead and merge the pull request because it looks like your branched fork was based off of the main branch.  In the future, make it clear which branch you based it on, or I will have to pass on the request.\n. Thanks.  I don't require ST2 changes if committing to ST3; I just require ST3 changes when ST2 changes are committed.  Probably wasn't clear on that, but the ST2 people will thank you :).\n. Works for me on Windows 7 64.  What do you mean it isn't there?   Where are you looking?  Are you getting errors in the console after reboot?\n. I really don't have enough info to help you.  You are the only one having problems installing it, and I can only assume their is something very specific with your setup.  It is neither a Windows specific issue or Sublime Text 3 issue as I and others are installing it fine. Right now, I can only guess what your problem is because I cannot reproduce such an issue.\n. Nope. Plugins don't ever check permissions.  None that I know of.\n. Nope.  They should be installed in a location that already has sufficient permissions.\n. This is not an issue with BracketHIghlighter\n. Not sure what you mean...there is this (https://github.com/facelessuser/BracketHighlighter/blob/master/Example.sublime-keymap#L9) which will ignore the search threshold and highlight both the opening and closing, but you can't jump to both simultaneously...which one would the editor focus on?\n. You want it to toggle back and forth? Currently, if you press the key multiple times, it jumps to the bracket, and then jumps out of the bracket:\n(  |  )    ]\njump right\n(    |)    ]\njump right again\n(     )|   ]\njump right again\n(     )   |]\nBut you want?\n(  |  )    ]\njump right\n(    |)    ]\njump right again\n(|    )    ]\njump right again\n(    |)    ]\n. I will look into it when I get some time.\n. This will be in the next release.  I just committed to the main branch https://github.com/facelessuser/BracketHighlighter/commit/d4e736d6a935bffcdb0aeb38a3d28a1041b8b107, but you won't see it in package control until I merge it into the ST3 branch.  I will let you know when main gets merged with the ST3 branch.  I am no longer adding features to the ST2 branch, hopefully you are on ST3.\nBasically you set up the traditional command to jump left or right (in this case left or right will determine which one it jumps to first), and then add the argument alternate and set it to true.  Then you will only need one command to jump back and forth.\njavascript\n    {\n        \"keys\": [\"ctrl+alt+super+up\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": true,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\", \"alternate\": true}\n            }\n        }\n    },\n. This feature is now on the ST3 branch.\n. @ivangabriele I am not really willing to merge this in its current state, it seems a bit hacky.  Instead, I want you to try this:\n- Remove your current rule and do not patch the curly rule\n- Put this as the first entry under scope_brackets:\njavascript\n    \"scope_brackets\": [\n        // Twig\n        {\n            \"name\": \"twig\",\n            \"open\": \"(\\\\{(?:\\\\{|%))\",\n            \"close\": \"((?:%|\\\\})\\\\})\",\n            \"style\": \"curly\",\n            \"scopes\": [\"meta.tag.template.value.twig\", \"meta.tag.template.block.twig\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML (Twig)\"],\n            \"sub_bracket_search\": \"false\",\n            \"enabled\": true\n        },\nLet me know how that works.  If it works well, please modify your pull request.\n. @ivangabriele, I am going to need a response from you, or I will have to close this issue.  Thanks.\n. @ivangabriele Since I haven't heard a response from you, I am going to assume you are not serious about getting this feature in.  I am closing the issue.\n. I know nothing about jsp, and I will be honest, I have very little intention of looking at more languages.  This is the reason I exposed everything in the settings.\nI would take a look at the documentation and the examples and do you best to put something together.  I don't mind giving ideas and guidance, but I require people to come up with a starting point  and come to me with specific questions.  With a questons as vague as \"How do I do this?\", I say \"Read the documentation and look at the examples.\"\nUltimately, you know jsp better than I do, and I don't want to spend 2 - 3 days trying get the basics down and then spend more time coming up with rules for a language I do not use.  But I am more than willing to help you figure it out if you get stuck.\n. Notice the rule you grabbed as an example is disabled (look at the enabled key).  I wouldn't use that; it was an experiment to try and highlight tags inside strings.\nIf all you want to do is add html tag support, all you need to do is add your syntax to the angle rule, and the tag plugins tag_mode setting.  See this pull request: https://github.com/facelessuser/BracketHighlighter/commit/04fa640c987944310f21f09d8810e97320c48c8c\nPrevious commits are an excellent way to see how people have done things before.\nThe angle rule is used to find the angled brackets. It then feeds that info to the bh_plugin module tags.  You just need to have your syntax also in tag_mode setting to tell tags what type of file xml or html etc. it is.\nI am not trying to be difficult.  I used to spend a lot of time looking into everyone's language specific issues; it ate up a lot of my time.  People usually prefer to just make requests than to look into the problem themselves.  It is usually my free time that takes the hit there.  So, I have started pushing people to make an effort before I step in.\n. Your problem is probably that you are using the wrong name for your syntax file.  You can't rely on the name you see in the status bar, menu, or command palette.  You need to look at the actual file: my_syntax.tmLanguage would be my_syntax, but it might show up in your status bar as My Syntax.  In this case, you need to use my_syntax.\n. If you got it working, consider doing a pull request.  I will consider this issue closed.\n. Yep.  There is a threshold limit for searches to keep things responsive.  This is by design.  You can increase the threshold more in the settings file.  The default is kind of conservative.  You will need to find the balance of threshold and performance that works for you.\n. I can add bar icons, but then it looks weird if line spacing isn't just so.  The gutter API just ins't capable of doing this well.  And it breaks down further if you have other plugins fighting to show an icon where we would be simulating a bar.  Anyways, if the API ever allows for things like this in the future, I would gladly consider adding it.  But currently, you really wouldn't like it much if I gave you a half baked hack, and that is my only option right now.\n. My point is, it looks like crap, and other icons can override the line destroying the point of it. See this post where I experimented with it: http://www.sublimetext.com/forum/viewtopic.php?f=5&t=3327&start=70#p26797.\nSublime has a feature that has indent guide lines which can kind of get a similar feature.\nBasically, I can't just draw  a line.  I can only insert icons in the gutter which doesn't look, nor work that well.\n. There is no \"draw a line in the code\" API; not everything the editor can do is exposed to plugins.  It might be possible to create an empty vertical selection at the beginning of every line between two brackets to simulate a line, I don't know what the overhead on that would be, or how good it would even look.  Also not sure how multi-select brackets would play together.\n. This is a test of how it could work.  I am showing multi brackets selected, and because I have each bracket type colored different, you can see them working together.  It is never guaranteed that brackets will be aligned, so the line would always be at the beginning of the line.  This is currently just a test, but this is about as good as anyone is going to get with the current API.\n\nIf I did this officially, it would be optional.\n. It is not public yet.  I need to tie it to a settings feature, clean it up, and test out performance.\n. This feature is currently on the Master branch under commit https://github.com/facelessuser/BracketHighlighter/commit/b28081e0f86388bc65f3c95b1617714bd56623a6, but is not on the ST3 or ST2 branch yet.\nAs I am no longer adding new features to ST2, this will be ST3 only.  You can manually check out the Master branch into ST3 and try it out and give feedback.\nThe feature can be enabled via:\njavascript\n    // Creates a visible bar at the beginning of all lines between\n    // multiline bracket spans.\n    \"content_highlight_bar\": false,\n. > I just would like to recommend showing the line at the same indent (right where the brackets are) and not just one line (that now is only very close to the gutter).\nThat works great when brackets are aligned, but quite often people don't align their brackets:\nc\nif (condition) {\n    // Do Something\n}\npython\nsomefunction(var1, var2, var3, var4\n                      var5, var6, var7, var8,\n                      var9, var10)\netc.\n\nIs there a way to change it's color?\n\nThe color will always match the bracket, so if you change the bracket color, you change the bar's color: https://github.com/facelessuser/BracketHighlighter#configuring-highlight-style.\n. > I just would like to recommend showing the line at the same indent (right where the brackets are) and not just one line (that now is only very close to the gutter).\nAlso I can only draw the line where content exists. So you can imagine that if there are empty lines between brackets, there will be no line.\nI am afraid the beginning of the line is the best I can do.\n. Yes, I am aware, and I technically could add something that emulates this.  There are two potential things to be aware of:\n-  There will be gaps in the bar (when the brackets are indented) every place there is a blank line:\n``` javascript\n// Function is indenting giving leading whitespace\n// Blank lines will be shorter than where the bar needs\n// to be.\n    function myFunction(p1, p2) {\n    |    var somevar = 7;\n    |    p1 += somevar;\n|    // Gap above this line\n|    return p1 * p2;\n}\n\n```\n- There will be a lot of overhead, because now I would need to calculate the position of the bar (taking into account how many tabs vs. spaces there are, and converting tabs to the appropriate number of spaces and translating that info to column position).  And then parse the beginning of each line between the brackets doing similar calculations to account for tabs etc.  A simple three line logic addition can easily turn into a lot more.  Whether this overhead will be noticeable, I can't say.  I imagine though, that their are scenarios where it would, at the very least, be noticeable.\nIt might be possible that non-monospace font scenarios might get the bar unaligned, I may have to not draw the bar on lines where there is more than just whitespace before the bar.\n. I have added the aligned content bar feature in commit https://github.com/facelessuser/BracketHighlighter/commit/8d8a322a7b01fe8ba23552978aa9ee72653d0e13 on the main branch.\nNote its behavior:\n- When the brackets are part of an indented block, and the content contains empty lines, those empty lines will create a gap in the bar\n- If text ever comes before or crosses the content bar, the content bar will not be shown on that line.\n\nIf the last line has text before the bracket but after the content bar, the content bar will extend to the last line as seen below:\n\nThese features are experimental, and as such, I have not decided whether all of these features will become standard on the official ST3 branch.  I am still evaluating the features as a whole.  But feel free to give feedback as I decide the future of these features.\n. align_content_highlight_bar is the new option.  Set it to true.\n. Keep in mind this is a hack to provide you with emulation of the feature you really desire.\n\nFrom my point of view, I would margined the line one more pixel to the right so it goes right into the bracket (and don't appear kindda separate from it).\n\nPersonally, I think I am going to leave it in its current location as it most appropriately defines the region of the brackets.  And it even matches the provided reference you gave :wink:.\n\nI'm sorry, but is there a way to make the line nicely thin without really bold dashes?\n\nNope, I am fresh out of ideas to make that happen.  This is literally as good as it gets with the current capabilities of Sublime.\nThe only alternative that is available is to go to Sublime's preference file and enable indent guide lines.   Sublime makes the indent guide lines a little brighter for the indent block you are in (or maybe it matches your selection color, I can't remember).  One way or another they can be colorized in your theme file (either directly or indirectly via the selection color depending on how it actually works).  But those only work with with indentations.  This solution is not indent specific. and will work even if you don't indent a block.\nAnyways, I might try this experiment out on a larger audience before making a final decision.\n. Yes, I mentioned above that that was something to be aware of.\nIn order to draw these lines, I am basically using the same API I call to underline, outline, or generally highlight the actual brackets.  I create a highlight region of zero width and enable the flag to draw zero width regions with a vertical line.\nSince these highlight regions can only exists in the buffer where there are actual characters, lines with no characters cannot have lines.\nAlso, if I draw the lines through non-whitespace characters, it will look fine in monospace fonts; mono-space fonts align nicely in a grid.  But with non-monospace fonts, the characters vary in width, so if any text occurs before the drawn line, it can cause a broken, crooked line which is also not desirable.\nIf sublime where to give us access to the layer that draws view rulers, but also gave us the ability to start and stop it on certain lines and colorize it and style it with stippling, then I could easily do what you want, but like I said, this is a hack to get you as close as I feasibly can.\nThis is literally as good as it gets. I didn't omit the styling; I just couldn't do it.\n. This feature is now available on the ST3 official branch to get feedback from a larger audience.  Feedback from a larger group will help determine the feature's future.\n. @PixelT, please refer to our discussion in the beginning of this thread as to why I am not adding this to the gutter.\n. It would be bad form for me to start dirtying the buffer by adding spaces or tabs.  Unedited files will perpetually look like you need to save them.  I would have to be constantly inserting whitespace, not to mention tracking the white space I inserted and track white space a user adds so that I can track what I added and what they added so I can resolve what I need to remove.  I am afraid this just isn't going to happen.\nThere is just nothing (reasonable) I can do to make the line without breaks.\nIf this is something you just can't live with, the only other option is to utilize the indentation guides as I briefly mentioned before.\nPreferences.sublime-settings\njavascript\n    \"indent_guide_options\":\n    [\n        \"draw_normal\", // <- Normal indent guides\n        \"draw_active\"   // <- Draw a separate guide for active indentation that can be colored differently\n    ],\nTheme file:\nxml\n<key>activeGuide</key> <!-- Active indent guide: the closest thing to what you want -->\n<string>#CCCCCC</string>\n<key>stackGuide</key> <!-- Active indent stack: Essentially the active parents of the active indent guide -->\n<string>#CCCCCC88</string>\n<key>guide</key>  <!-- Inactive indent guides: All the other guides-->\n<string>#CCCCCC22</string>\nIn most cases, this would give you what you want without enabling the BracketHighlighter content line feature.  It would give you a line (colored to your preference) for the whatever active indentation you are in.  It would be a stippled line without breaks.  The downside is it is not directly tied to your current highlighted brackets, so there are some cases where your highlighted brackets will not be represented by the line, but overall, you get the same feel.\nThose are really your best options: overlook the gaps, or use indentation guides.  I wish there was a way to create the desired lines with BH, but (currently) the API is just too limited, and injecting spaces would just be a huge mess.  If the API ever changes to allow me to ultimately do what you are requesting, I will adjust the logic.  But until that day comes, this is as good as it gets.\n. I think I will leave this feature in.  It is actually separated pretty good, so it has no impact on any other part of the code.  So it really doesn't hurt me to leave it in.\n. You can, have you looked at the settings file?\n. Also, always post if you are using ST2 and ST3.\n. Right now, there is only a global toggle in the command palette.\n. Closed as question was answered.\n. Potential fix found at commit https://github.com/facelessuser/BracketHighlighter/commit/bb00091ab89445f6d86ce795ecc08921f192dcf7.\nStill need to do more testing, but it looks like this might resolve the issue.\n. You are correct.  This is not a bug.  Can you explain why you think it is a bug?\n. Okay, we are talking about quotes, though the statement still stands.\nI will make all my references in regards to JSON since I don't use SASS and frankly don't know much about it.\n1. First lets start with the JSON specs.  Strings in JSON are double quoted.  Single quoted strings are invalid.\n2. Now let's talk about how BH works.\n   1. BH finds brackets in two different ways.\n      1. Regex: searches for opening and closing brackets and then pairs them up with each other\n      2. Scopes and Regex: this is used for things like quotes where it is difficult to tell if you have the opening bracket or the closing because they are the same.  With quotes it is tricky because without parsing the whole line (or whole file in Python's case with multiline strings) or understanding the the context of the file's syntax, it can be almost impossible to tell if you are between an opening or closing quote.  So BH actually looks at the syntax scope the cursor is in to tell the string regions, and then looks at the beginning and end of the string region to see if it finds single or double quotes.\nWith the description above, you can see why BH won't toggle single quotes back to double in JSON.  Single quotes are not valid.  They are not scoped as strings in the JSON syntax; therefore, BH will not recognize them as quoted strings.\nWithout the scope, the regex becomes a lot more difficult with regex.  In the example below, it is easy for you to tell the bar is not inside a string, but for BH that is only looking for something with rules like this: \"open\": \"(')\", \"close\": \"(')\" it is very unclear.\n'test' | 'test'\nSingle quote strings are illegal in JSON, so I can't imagine why someone would need to toggle the quote options (unless they just keep accidentally typing them when they meant to use double).  But BH will not be able to recognize them unless you find a way to give BH the ability to recognize invalid strings in JSON.\n. If BH highlightes single and double quotes for SCSS and SASS, then support already exists.  You would just use the BracketHighlighter: Swap Quotes command.  If BH does not highlight single and double quotes then the support for recognizing the missing string support must be added.\nI don't know what package you use for SCSS and SASS, but in general, I would expect that SCSS has support in most cases because I am pretty sure SCSS supports single quote syntax just like CSS, and I would imagine the syntax highlighting is pretty close to CSS.  I have never really used SCSS though.  SASS on the other hand, I know absolutely nothing about (and I don't intend to learn it anytime soon as I am not a web developer :wink:).\nKeep in mind if the syntax language does not scope the string as a quoted string, BH will not see it, and you will have to either add a BH rule that can target them or modify the existing one to extend support for your syntax.  If neither of those are possible, you may need to change your syntax language to scope strings in a reasonable way.\nNow I personally don't add support for other languages anymore, but I require the requester to add support for the languages they use, but I do help people if they get stuck, but I require them to do the work.  I don't have time to add support for languages I don't use.  I spend my time on the core code instead and offer advise and direction to those who are trying to add new languages.  I was spending too much time learning everyone's languages so I could highlight their brackets.  So now, I have a hard rule that I won't specifically add support for languages that I am not currently using.  Everything is exposed in the settings file now so that anyone can add or augment rules.\nI have an example of a person who I worked with to get his language working https://github.com/facelessuser/BracketHighlighter/pull/160.  If you are serious about adding support for your languages, you will find a bunch of examples in the settings file, and the readme explains a number of things.  If you get stuck, show me what you have and explain where you are stuck, and I can probably give you some pointers.\n. If there is a problem with the toggle quote bh_plugin, I will fix that, but I can't imagine there being anything SASS specific that would break it.\nGive me an example SASS snippet to test.  I don't code in SASS.\n. I don't see an attachment.  You probably need to embed the text directly in the issue feed.\n. Sass does not scope single quotes as strings:\nHere are its scopes for single quoted strings:\nScope Extent pts:         (0, 546)\nScope Extent row/col:     (line: 1 char: 1, line: 8 char: 72)\n==> Scope:                    source.sass \nScheme File:              Packages\\User\\Tomorrow-Morning (SL).tmTheme\nforeground:               #4d4d4c\nforeground selector:      foreground\nbackground:               #FAFDFF\nbackground selector:      background\nstyle:                    normal\nHere are double quoted string scopes:\nScope Extent pts:         (413, 431)\nScope Extent row/col:     (line: 7 char: 14, line: 7 char: 32)\n==> Scope:                    source.sass string.quoted.double.sass \nScheme File:              Packages\\User\\Tomorrow-Morning (SL).tmTheme\nforeground:               #718c00\nforeground selector:      String, Symbols, Inherited Class, Markup Heading\nbackground:               #FAFDFF\nbackground selector:      background\nstyle:                    normal\nThe creator of the SASS package was being unrealistic probably coded the syntax to his coding convention which probably always uses double quotes.\n. Glad you got it working.  Usually you have two options, fix the defective syntax highlighter or use a different one.  It appears you have chosen the latter.\n. > In my naive view, it's just a matter of counting line lengths... :-)\nI know it seems like I should be able to do this, but the limitation is Sublime's API, not me being lazy :wink: .\nThe sublime API only allows you to outline, underline, or generally highlight real characters.  After the end of line, there are no characters; therefore, I can't extend the outline past the end of line.\n. Closed since there is actually no way to do this currently.\n. > Oh sorry, I never intented to say that you are lazy!\nI was just kidding.\n\nOne solution could be to insert spaces before drawing the outline and delete them afterwards. but this is not a very elegant solution...\n\nSadly, this is an unacceptable solution as it will dirty the buffer.  BH should not cause a buffer to go into an unsaved state when simply matching and highlighting.  Things would get extremely complicated if tried to do all this.  I am afraid as things stand right now, there just isn't way to do this that I find acceptable.\n. > If the cursor is at the >>> mark, pressing ctrl+shift+space will incrementally select each bracket scope (so first {} then will go to () then again to {} and so on).\n\nOk, here is where bracket_outside_adjacent start messing around. If i set it to true, then select will actually work as a toggle (will select/deselect first brackets found, but will stop there).\n\nThis is exactly why I avoided outside adjacent for so long.  Let's talk about how the bracket matching and bh_plugin system works:\n- Brackets are matched based on where the cursor is.  So, when the cursor fulfills the outside adjacent requirement, the outside bracket is matched.\n- bh_plugins are sent the current matched bracket and base all of their logic off the that\nThe bracketselect plugin was written with this in mind.  It takes the bracket and adjusts the selection. If I give you this scenario (where >>> is the cursor):\n(word >>>() more stuff)\nHow does it find the next enclosing bracket?\nI will break down how bracketselect works in a simple manner:\n- if cursor is between brackets, it selects the content.\n- if the full content is already selected, it extends the selection outside adjacent to the bracket, \n- if the bracket is outside adjacent, we expect BH to return us with the next bracket not the current bracket we are outside adjacent to.  bracketselect only operates on the current matched bracket, it knows nothing about the next bracket.\nThat is basically how it expands the selections.  It basically relies on the behavior of outside adjacent being turned off.\nI hope you can see how this gets complicated.  Because in order to get this working, we either have to change how the BH core works or how the plugins operate.\nSo the options are:\n1. The core code must have some kind of foreknowledge of what bracket matching it should use (outside adjacent or normal).  This isn't going to happen because the plugins are supposed to extend the matching not the matching extend the plugins.\n2. The plugin in certain scenarios would need to recursively call the BH core matching code (ensuring it launches the plugin) to recursively find the next bracket and then re-call the plugin to ensure the content of the enclosing bracket's content gets selected....but wait, we haven't actually selected the content yet, we only tell the core code what the selection region will be from the plugin.  The recursive call will finish before the originating call and the first selection calculation will be the one updated in the end, or possibly modify the current selections we are iterating through causing a rip in the space time continuum...\nOkay, the framework doesn't lend well to this in its current implementation.  This is why I reference the example file to help people properly setup all their plugin calls:\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/Example.sublime-keymap\nWith all that said, outside eyes might see something I don't; I may be too close to the project to see how easy it can actually be accomplished.  Any suggestions?\n. Anyways, I don't plan on doing much about this as things stand right now.  I don't view this as a bug because I was well aware of this functionality when I implemented it, and technically it works as \"I\" intended it (if you use the commands as defined in the example).  There was a compromise to get it useable with outside adjacent, but it was a compromise I willingly made.\nWill BH 3.0 change this functionality?  Who knows, I would need to rethink the framework and have the motivation to change it, but BH is evolving little by little.  BH 2.0 was a huge jump from BH 1.0, anything is possible if I am motivated.\n. You installed the ST2 branch.  Use Package Control to get the correct branch.\n. ST3 package works fine as I am using it as we speak.\nI know you have the wrong branch due to this:\nFile \"bh_logging in /home/roman/.config/sublime-text-3/Installed Packages/BracketHighlighter.sublime-package\", line 5\n    print \"BracketHighlighter: %s\" % msg\n1. The proper Python 3 syntax requires parenthesis print(\"BracketHighlighter: %s\" % msg)\n2. If we look at the ST3  branch we can see I am using the correct syntax: https://github.com/facelessuser/BracketHighlighter/blob/ST3/bh_logging.py#L5\n3.  Looking at Package Control's repo, we can see I have specified everything correctly: https://github.com/wbond/package_control_channel/blob/master/repository/b.json:\njavascript\n        {\n            \"details\": \"https://github.com/facelessuser/BracketHighlighter\",\n            \"releases\": [\n                {\n                    \"sublime_text\": \"<3000\",\n                    \"details\": \"https://github.com/facelessuser/BracketHighlighter/tree/ST2\"\n                },\n                {\n                    \"sublime_text\": \">=3000\",\n                    \"details\": \"https://github.com/facelessuser/BracketHighlighter/tree/ST3\"\n                }\n            ]\n        },\nSo based on this, it is clear you are using the wrong branch.  Maybe Package Control messed up, but everything on my end is as it should be.\nI would try uninstalling and reinstalling BH.  If Package Control is installing the incorrect branch, you may have to create an issue on that repo.\n. No problem.  Glad you got it working.\n. I am going to need a lot more information than that.  There is nothing wrong on my end.  Please investigate your console etc.  as I am positive there is nothing new that would break things as you are describing.\n. Glad it's working again :).\n. Please search and read the readme before posting questions (it has a table of contents to help you find what you are looking for :wink: ).  I answer and re-answer this kind of question much too often.  The readme should give you all the info you need to do as you desire.  If after reading the readme you are still confused, please post a more direct question of what specifically you are confused about.\n. I understood your request.  The readme contains the answer, and my answer here will be the same as the readme.   This section should have all you need to change the style, icon, or even color: https://github.com/facelessuser/BracketHighlighter#configuring-highlight-style.  It explains what each parameter does.\nIf you are having problems, then you are modifying the wrong thing or using the wrong value.  I cannot help you if you do not show me what you are trying to do.  I need to see what you are doing so I can correct you.\n. Yes, this is well known because this breaks the sane logic of determining the matching pair.\nBasically, BH grabs all the opening brackets and all the closing brackets from a \"window\" (a pre-determined region) and then tries to resolve which ones match which until it is left with an unresolved opening (in relation to the cursor) and then walks out from that resolving brackets until it is left with the closing.\nNow understanding that, which opening bracket should I match with the closing bracket below?\n``` c\nif SOME_SWITCH\nif (some_value)\n   {\n        // Do something\nelse\nif (some_value && some_other_condition)\n   {\n       // Do something else\nendif\n  // Do some more stuff\n\n}\n```\nPHP in HTML is no different than C compiler switches above; it makes a mess out of resolving stuff without adding a complex language specific code lexer to be paired with the matching process.  And without knowing what SOME_SWITCH is above, what do I do?  Do highlight both openings?  What if there is a nest of switches adding even more complexity?\nI bet you can see how excited I am to do that (hint: not really excited :smile: ).\nSo yeah, I am aware, and I currently have no interest in resolving it at the current time.\n. P.S.  Never say relatively easy to a coder without knowing if it is actually relatively easy.  It drives me crazy when people say stuff like that without looking at the code.\n. I'm not defensive.  At least I did not mean to come off that way.  I took the time to explain how the plugin worked to illustrate why complex things (like you are asking) cannot be easily resolved, maybe I should have added a more pointed example?  Well here it goes...\nIf you turn off matching <?php and ?>, curly brackets will match up.  If you turn off curly brackets, <?php and ?>, php brackets will match up.  It's kind of the same thing as I showed, just a slightly different variant.  PHP tags are breaking up the flow.\nBH gets hung up on this for the same reason.  This scenario is not valid.\n[    (    ]    [    )   ]\nBasically, if you want the curly brackets to match up, you need to ignore php tags.  You can turn off php tag matching, but if you have normal tag matching, it will still get hung up as html tags trigger off the angle bracket rule.\nSo if you turn off php bracket matching and modify the angle bracket rule to ignore <?php and ?> but still find < and > you can probably get things working, but php angle bracket highlighting will not work.\nSo my statement is still true, though I purposefully gave a more complex example to illustrate the complexity involved.\nMaybe mentioning my pet peeve made you think I was defensive?  ...It's true, it does drive me crazy...does it help if I say it with a smiley :smile:?\n. Looks like I already had the foresight to ignore php brackets in the angle rule:\njavascript\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\nIf you are using ST3, in bh_core.sublime-settings file you can add this to override PHP angle brackets and disable them:\n\"user_brackets\": [\n        {\n            \"name\": \"php_angle\",\n            \"enabled\": false\n        }\n    ]\nIf you are using ST2, you have to copy and paste all the rules to your user version of the settings and set and modify php_angle to false (I no longer provide patches for the ST2 variant).\nYou can have one or the other, but sadly not both.  The way it is architected just doesn't allow for a simple fix.  Using  a regex as opening<non greedy regex>closing has its own set of problems which I won't go into.\nAnyways, that should actually give you a workable solution.  Pretty much all configuring is done in the settings file, and if it can't be accomplished, I will consider feature requests.  But feature requests need to be non-language specific.  It can aide in configuring a language, but the feature itself needs to be non-language specific as the core shouldn't ever care what language it is working with.  Language external extensions and rules now come from the community unless I specifically use that language, and then I usually just do it myself.\n. > P.S. Believe it or not, but smileys do indeed help\nIndeed.  In retrospect, I see how it could be conveyed.  Fair point :wink:.\n. It creates a table of Unicode properties.  It shouldn't recreate it if it already exists.  It allows for regex using Unicode properties r\"\\p{Ll}\".\n. Yes it should be safe.\n. From what I understand, ruby can use all sorts of weird unicode in variable names (though I imagine it isn't common practice: http://www.rubyinside.com/the-split-is-not-enough-whitespace-shenigans-for-rubyists-5980.html.\nI would simply try the following (which should be sufficient):\njavascript\n\"close\": \"(?:(?<=^)|(?<=\\\\s))\\\\b(end)\\\\b\"\nI don't use Ruby, so give it a try, and if it works, please create a pull request.  I don't directly manage languages I don't use.  I expect the the community who uses them to keep them up to date.\n. Looks good.  Thanks for your efforts.\n. I am not sure what you mean.  I don't provide keymaps out of the box, I only provide an example keymap file.  You are responsible for setting up your keymaps.  BracketHighlighter has no keymap specific code.  Keymaps are handled completely by Sublime.\nWith that said, I copied your keymap to my keymap file, and it worked great, so  the command works as expected.  Maybe you have a key conflict with another plugin.\n. They would have to be associated with a specific scope.  Just matching angled brackets with plain text will cause problems as less than and greater symbols, bit shift operators, etc. will get matched. If there is a way to obtain context for the specific brackets you are talking about, then it may be possible, but BH does not actually parse the languages, so in most cases, it is pretty ignorant to what it is matching.  It either looks for unique text with regex or a combination of scopes and regex.  The better the match rules, the better the results.\n. Anyways, I currently have no plans to add <> support for C++.  I would need a compelling reason to.  In my day to day usage of C++, I haven't yet run into a scenario where I wished it was there (granted I do embedded programming, so maybe this is due to the type of coding I do).\nIf you can provide a compelling example, (and assuming it can also be targeted without getting false positives from less than and greater than symbols etc.), then I may consider changing my stance.\n. I guess the main thing I could see angle brackets being needed for is maybe template libraries...was that the use case you had in mind?\nIn embedded environments, we don't really use template libraries, so that case has not been something I run into day to day.  And I was never really compelled to add highlighting for includes with angle brackets.  If template stuff is what you were referring to, I can maybe look into it, but please list the use cases you desire first before I look into this so I can really understand what it was you were actually wanting.  I imagine if no use cases are provided, I will probably just close the issue.\n. @MattSeen  TypeScript is a completely different language, and would probably need its own rule.  Since I don't use TypeScript, I have no intentions of adding TypeScript, but I accept pull requests, and I don't mind giving advice when people get stuck  trying to add new rules.\n. @scottstensland  The current C/C++ syntax highlighter (which is pretty poor to begin with) in Sublime doesn't appear to scope angled brackets for templates.  That extra step by the syntax lexer would give enough context for BH to easily be able to target brackets. But since it doesn't tokenize them, I have to use pure regex to filter them out; getting the context is very tough.  I am open to suggestions, but at this point, I think I will probably be passing on angled in C++ in the foreseeable future.\nAfter seeing that, I haven't spent anymore time in thinking about how to add support for the templates\n. @MattSeen sorry if I come off a bit...abrupt, that is just my standard canned answer for languages I don't use.  I used to get a bunch of requests for languages I just don't know the ins and outs of.   So I would invest a bunch of time in a language I would never use.  I now put the burden on the requester unless I have a personal interest in it.  I manage the core, I extend the API if needed, but I let the community expand the language support.\nSo when people say \"hey, I want this\", I just make it clear that I probably won't be spending time on it except to maybe mentor someone through the process.\n. I am closing this for now as I have now current way to implement this in a way that would give the desired results.  If someone has a good way, I will accept a pull request.  If I happen to have a good idea, I may reopen, but as things stand, angled brackets in C are no going to be possible without a better syntax highlighter.\n. @conundrumer, If you are proposing these changes, a better place is pull requests.  Since you made this a whitelist instead of enabling it globally, there is a good chance we can merge it as long as the enabled languages were well tested.. When posting issues, please also post code snippets I can easily copy and paste.  I don't like having to manually type test cases from images.  I imagine your problem has to do with HTML5 tags not being recognized as self closing (HTML5 support is probably far from complete).  But until I have a test case I can easily copy and paste, I will wait to look into this.\n. Check out code at this line: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/tags.py#L19\nsingle_tags are tags that never have content.  self_closing tags are tags that don't have to be closed in certain situations.  Now I am not a web coder, so my list is probably very incomplete.\nIf you add HTML5 tags in the appropriate places, you should have things working.  So just allocate source and any others you can think of to the appropriate variables and issue a pull request.  At the very least (if you aren't comfortable doing a pull request), provide me with a list of tags and which variable they should be assigned to.  I would much prefer to modify this once with as complete a list as we can from an actual web designer than me updating this every time someone uses a tag that isn't properly in the list.\n. Cool.  I will give it a couple of days in case you think of more, and then I will add them.  General testing with these seem to fix your issue.\n. Fix is in https://github.com/facelessuser/BracketHighlighter/commit/182a5e735110c2b485b47e70c7937a6672357f52\n. Nope, sorry, this is a limitation of Sublime.  BracketHighlighter uses the Sublime API command to create colored regions.  Regions affect the background.  I have tried playing with foreground and background, but it always doesn't quite work right.  If Sublime ever allows this, I will gladly make sure BH supports it, but currently it does not.\n. I don't really know what you mean...could you elaborate?\n. Oh, so you want exterior?  I though I had this setting listed in the settings file, but apparently I don't...\njavascript\n    // Experimental outside adjancent bracket matching\n    \"bracket_outside_adjacent\": true,\nIt has a couple of issues (which are on my list to fix) but overall it works pretty well.  I personally have it enabled on my machines.\n. It isn't official mainly because of issue #184.  I just haven't had the time to look at the issue yet.  For most use cases though, people will find it works quite well; like I said, have been using it by default.\n. I'll be honest, it is possible to port, but since I don't use Atom, there is no upside to motivate me.  It would just add more work for me.  More repos to maintain, more time invested in something I don't even use.  I cut off active support of Sublime Text 2 because I use Sublime Text 3.  Adding Atom would just create more work for me.\nBasically, when  I write free, public code, it is because I have a personal investment in it.  I am either interested in learning about the particular subject, or generally having fun, or I actually use what I am working on.  BracketHighlighter was mainly written to make coding more enjoyable for \"me\".   But I also don't mind sharing :wink:.  If I switched to using Atom, then that would probably motivate me, but more than likely I would then discontinue Sublime support or pass support on to someone else.  Since I currently have no compelling reason to switch to Atom at this time, I would probably only be motivated if the project was funded.  If at anytime in the future I decide, \"Hey, Atom is the way for me\", then you probably see a port of BracketHighlighter.\n. > Sublime does have a basic highlighter but I do enjoy the way this plugin works more.\nThanks, a lot of time and feedback from people went in BracketHighlighter.  Though there are areas that could use improvements one day, I like to think it is pretty good at what it does.\n\nMaybe I'll check that out to see how can I make that more this :sweat_smile:\n\nHopefully a little BH can rub off on Atom, good luck :smile:.\n. This is not directly a BH problem.  I exclusively use the ST3 version now all day on ST3 build 3066 with Windows 7 64-bit.  And at night I use ST3 build 3066 on OSX 10.10.  I assure you, it is well tested in its current state.  I even have custom rules and overrides in by User folder.\nBH wouldn't highlight every tag anyways as it only highlights tags that surround a cursor.  Unless you had cursors everywhere, it just doesn't make sense.\nI am betting money on a clean install, you wouldn't have this problem.  You can try pulling down the portable Sublime 3 version and do a test.\nNow granted, I cannot verify exactly what you did, but I would imagine either something is wrong with your Sublime local installation, or you did something wrong that you don't realize.  But I can in no way reproduce your issue.  And like I said, it is well tested, I code with it all day.  The only difference is you are on 3065, and I am on 3066.  But I was on 3065 before the recent 3066 version, and I had no issues in that time as well.\n. What you should probably do is just go to Preferences->Package Settings->Bracket Highlighter->Bracket Settings - Default in your menu, then you can copy what you need.\n. I am assuming you have no more issues as there hasn't been a comment in 14 days.\n. Thanks.\n. Thanks for the heads up.  This sounds specifically like a Vintageous issue as BH is just looking for Sublime events.  If a plugin somehow circumvents those events, BH will have no idea it needs to do anything.\nBut this is good to know in case people complain about the issue here.  Now I will know what answer to give them.\n. I have to be honest.  I kind of feel Vintageous needs to fix this.  If they are intercepting commands and preventing on_modified or on_selection events from being triggered, I feel they need to generate the events.  As I understand it, BH is not the only plugin affected by this.  To create a plugin that breaks a bunch of other plugins and expect all other plugins to work around yours...I find that to be a bold move.  I am kind of feeling like they need to fix it on their end.  I also suspect this is a new issue.  Maybe they should revert the recent change that breaks things until they can do it right.  I haven't taken time to look into it, and since I don't use Vintageous, I haven't yet had the motivation to spend an evening looking into how they are breaking BH and others.\n. I don't use rails , so I usually defer to rails users to fix rails problems.   With that said, I may take small look and see if there is anything obvious, but please provide an example I can copy and paste.   Images are nice, but I don't want to have to copy examples by hand from images.\n. The angle rule was messing with the ruby stuff.\nIt should be changed to this:\njs\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?=[^?%]|$)\",\n            \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\", \"Handlebars\", \"AngularJS\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\n\n. I will patch it on the main branch this weekend...assuming I remember :smile:.\n. No worries. It is committed.  I just need to merge it to the ST3 branch when I get a chance.\n. Merged\n. There already is a toggle.  Check the command palette.  You can bind it to a shortcut if you wish.  By default, I provide no shortcuts, but the ability for a user is there.\n. That is the default value.  But there is a command palette command that can toggle it https://github.com/facelessuser/BracketHighlighter/blob/master/Default.sublime-commands#L119.\nI mentioned \"I provide no key bindings\".  Users need to create their own.  Take the command palette command and format it as a keybinding in your key map file.\n. No problem :smile:.\n. input tags don't have closing generally....  XHtml setting should fix that.\nSadly, when I switch to xhtml style tags, it was still broken :disappointed:.  So by default, this is the expected behavior (but maybe it could be improved to at least not force that behavior when not in xhtml mode), but in XMLs, input shouldn't break like this.  So I need to double check the xhtml logic.  After I verify what is going on, and fix it if it needs it, this should be configurable as usual in the settings file.\nI will let you know when I get some time to look at this.\n. @ErikVDW smarter void tag and self closing tag handling has been added https://github.com/facelessuser/BracketHighlighter/commit/5451c6f8e944feff51c18a830b86a508c8c3e782.\nWhat this means is:\nxhtml mode:\nWill allow closing tags on all tags and will only allow explicit self closing tags: <tag />.\n\nhtml modes:\nThese will ignore closing tags on void tags.\n\nAnd will refuse to match an opening for a closing void tag as it is not valid HTML (there is a cursor in the opening tag and a separate cursor in the closing to show that the opening counts itself as a match, and the closing is invalid):\n\nThanks for the bug report.  I don't do a lot of HTML coding, so I never really noticed that I forgot to handle this stuff.\nEDIT: Let me know if I missed something.\n. See issue #181 for an answer as this is a duplicate.  This is working as expected.\n. Basically, BH needs to run when there are modifications to the file (deleting chars causes highlights to become offset incorrectly etc.), when the cursor moves (this highlights are relative to the cursor), and when a file becomes active.  If BH ran on every one of these events things would get slooooow.  So BH notes each event, and if the events are happening in rapid succession, it waits for a break of about a half second to determine it is safe to run the highlighting command.  That is how non-key commands work.\nNow originally, key commands were executed right away, but there was some kind of quirk (can't remember off the top of my head what it was), but certain scenarios didn't quite work as expected unless I called the core code with a set_timeout https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.py#L637.  I basically needed to let the key command finish and then execute the highlight.  I wish I had added a comment now as to what the original quirk was.  It was an issue related to how sublime handled the events...if I recall correctly, I think there was some issue when called from the command palette.  I think I needed to wait long enough for the command palette to close.  I don't even know if the issue still exists, I guess I there might be a way to force the command palette closed which would possibly be better.  If I was able to resolve the original issue without a timeout, I could execute the BH key commands instantly again.\n. > Could you add a bh command which runs another command (on the current view) in such a way that it preserves the order? So it would literally be a command name and args but are run when your timer goes off.\nNot exactly sure what you are requesting here...\n\nWould you consider a setting which allows running the keyboard commands synchronously? It would at least be fun to experiment with.\n\nYes, one thing I can probably do is first verify if the original issue is still present.  If not, I can just make it synchronous to everyone (except the auto highlight events of course).  If it is, I could probably just create a separate command palette command, or an option on BhKeyCommand to optionally launch synchronously.\n\nAnother option is to differentiate between commands which simply move the cursor from commands that draw the adornments for the current position. It would seem to me that the timer would just be for performing those updates and not tne entirety of the commands. Or do you rely on the adornments to implement some of the motion commands?\n\nIn general, I need to first refresh myself on what the issue originally was.  The way BH is currently designed, it is first and foremost a a bracket finder and highlighter; it finds the brackets around the current cursor, and highlights them.  All other features are plugins to the core system, and what they do is at key points in the process either add context to the bracket matching or run some code that can alter the cursor position or highlight regions (if modifying the view, updating the cursor position and/or regions to highlight is very important).\nSo basically, cursor movement is actually injected after we have determined where the brackets are.  We usually then alter the text if desired, update a list of cursor positions, and alter the highlight region if necessary.  After plugins run, BH as a final step. updates cursor positions from the list provided and applies highlights.\nThere are a few exceptions, things like bracket swapping I kick off with a wrapper, and then I asynchronously run a finalization method to do some more stuff after the fact https://github.com/facelessuser/BracketHighlighter/blob/master/bh_swapping.py#L43.  Asynchronously because I am currently running BH asynchronously, but I guess I could update that as well.  Granted the current flow is not entirely without flaws #101.\n. It all depends on what I have going on and how spry I am feeling after I get home.  I plan on eventually working on it...maybe today, tomorrow, later...\nWith that said, you are more than welcome to play :smile:.  Most people avoid touching the code and stick to just pull requests in the settings, but I am okay with anyone who wants to dig and do a pull request on the core.\n. Found the original issue; it is #74.  This issue was the reason for the asynchronous calling.  Sadly, the issue still exists.  In short, on demand calls don't use a threshold.  But people would call them from the command palette, and then when the command palette closed, a view activation event was called.  After that the auto-match variant was called that uses the threshold.  So if you used an on demand call from the command palette, the final match would use the threshold and not match to the end of the file when the user expected the final match to not use the threshold.  This behavior affects the end highlighting state only.  Hope that makes sense. \nOn the main development branch, I have created bh_async_key which the panel uses, but key maps can use bh_key.\nFeel free to try out the main branch.  Once tested more, I will merge this to the ST3 branch.\n. It was no big deal.  I already knew what had to change, I was mainly waiting till I found what the original issue was so I could verify its existence.  \nThe commands always worked with async or sync from the palette.  It is just the auto-match thread steps on the the on-demand's final highlighting results because the palette causes a view activation event which causes a auto-match to run.  The async was just in place to allow the palette to close and cause its event before we called the on-demand command.  Thresholds are used on auto matches as they are executed constantly on events, and we don't want to slow down Sublime.  If BH only did key or palette commands, I wouldn't even need the async commands as their would be no conflict.\n\nI co-author the emacs plugin sublemacspro. I implemented forward/backward s-expression manually but it has some issues. I think I am going to add an option that uses your package if it's installed to handle the motion over brackets, parens and quotes. I should probably study your code some more. Me thinks you have a better understanding of things than I do.\n\nNo problem, hope it helps.  The actual bracket select code is pretty straight forward, though I should really clean it up and break things up into separate methods to reduce the complexity at some point.  The real headache comes when digging through the the code that finds the brackets.  It is one of those things that was super straight forward, but when I added customizable bracket rules, the complexity jumped exponentially.  It one of those things that sound easy \"just match brakcets\", but when you need to implement in a general way every case people can think of, things get complicated.\n. Oh, and this will only exist on the ST3 branch.  I don't actively support the ST2 branch anymore.  If someone wants to back port it there, I am okay with that.  I will merge this to the ST3 branch later today.\n. I actually didn't intend in writing a novel on BH, but anyways here is some info:\n\nI turned off all threshold at one point and noticed things slowed down a lot and I couldn't imagine why (given my laptop is a super computer compared to just a few years ago) until I saw the code and thought, It might be slow to make complete copies of large buffers.\nThe way I did it with the sublemacs plugin was to scan one character at a time until I found one sort of bracket or another, and then use the built-in functionality to find the matching one. \n\nThe default threshold is very conservative, I actually use a threshold of 10000 others I know use thresholds even higher with no problems.  If you are implementing a search that crawls out from the cursor, you have speedy performance when brackets are close, and slow performance when brackets are far away.\nClearly I am not doing that, but it used to be done that way.  Using the old system, it was much more difficult to implement the same search and find custom brackets of varying length and with various considerations.  If you are just matching curly, round, and square, this isn't necessarily a bad way to go. The method I am using kind of normalizes search and generally brackets close and far have a much smaller delta in performance.  Surprisingly with this current implementation, on average, distant searches are much much faster than they were using the old way.  People use much higher thresholds than they used before because overall performance is much better.  Granted there were a number of other improvements that were implemented when rewriting as well.\nHistory\nOriginally BH was hard-coded to do as you say, search character by character etc.  This was not my design.  BH is actually a fork of a long dead Sublime plugins: TagMatcher and SublimeBrackets.  I forked it to increase performance as they would lag a lot in certain scenarios.  I also added various features I wanted as well.  The author never really got back to me about pulling the changes, and eventually the original repos disappeared.\nAfter a while I got logs of requests for things like ruby if/end statements etc.  This required me to hard code more and more stuff in the core code, which meant I had to understand every language that was requested, so I threw away all the code and started from scratch to make a better BH.  Now let me preface this with saying, by no means do I think what I have is necessarily the best implementation, but it is the best I have employed so far :wink:.\nBasically, I wanted a BH that could more easily be managed and offload adding new languages to the requester to cause me less work.  I don't want to learn every language's nuances that comes across in a request.  I want to make it (relatively) easy to specify any kind of bracket a user would want without modifying the core code.  That way I don't have to personally add a language I don't care about.  And I don't have to keep mucking with the search algorithm.\nGoals When Re-Writing BH for 2.0 Release\n\nThe core should not need to know what bracket it is searching for.  It should not need any specific knowledge of any language.\nA user should be able to define rules in the settings file that can target almost any bracket desired with regex, scope, and syntax definitions.\nProvide a plugin interface so users can inject certain logic at key points to augment matching that cannot be otherwise done with regex, scopes, or syntax rules alone.\nProvide a way to run code on that can do things with the brackets after they are found via plugins.  This allows extra functionality to be self contained.\nMake less work for me in the long run.\nIncrease perfornamce.\n\nWhy Not Use Sublime's Regex Engine?\nBecause it isn't designed to be used like I am using it.  I can't truncate its search to a window.  I can give it a start, but if I am at the beginning of a file, I don't want to search the whole buffer.   Even Sublime's built-in bracket highlighter employs a threshold, but the regex engine just doesn't allow me to provide a start and end bounds.\nI am matching much more than simple {[()]} cases, I am matching all sorts of code block starts and ends.  The regex search engine should allow me to manipulate the search groups on return.  Not just return regions.   I need to be able to find a string scope and just apply regex to that string.  And I needed a way that I could do this without hard coding info about a specific language in the core. \nWhat BH Does\nLike I said before, there is probably ways this whole system could be improved maybe for BH 3.0, who knows; it depends how motivated I am to research even better methods.  Anyways, I won't go into scope brackets here, but I will illustrate the flow of simple regex bracket search:\n- BH for a given view loads up all the brackets rules that are defined for that given view's syntax, this is done once when a view becomes active or loads.  Necessary search plugins that are needed for that view are loaded once.\n- It constructs an opening regex to search for all opening brackets, and a regex for all closing regexs.  Enable \"debug_enable\": true in the settings file to see them written to the console.\n- For a search, it grabs a window around the given cursor and finds all openings and closing in that window.\n- Each bracket has an id associated with it so I don't match the wrong opening with the wrong closing.\n- It then pairs up the brackets until it is left with the bracket pair closest to the cursor. Because it is accounting for nested matches, it usually gives very reliable match pairs.\n- There are no if lang == 'ruby' or checks for any language.  If special language considerations are needed, they are done in a bh_module: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/rubykeywords.py that is loaded when the view becomes active.  It runs the bh_module logic at key points in the core code.\n- If BH is loaded via a bh_key command, it can load other specified bh_plugin commands to augment view content, cursor position, etc.\nHope that helps.  I am always open to suggestions on how to improve.  If someone wants to cobble together an even better search method that is aligned with my goals and can support the same features, I am open to it.\n. I get these kind of questions on occasions.  I know when looking at the code, there is a lot going on.  So the question always comes up \"Why don't you just do XXXX?\".  It helps to understand what I wanted to accomplish and what hurdles I was trying to overcome.  Again, BH was a learning experience for me, and I am sure there is someone out there who is much smarter than me and can implement an even better way.\nAt least now I have a post I can point others at :smile:.\n. Now merged to ST3 branch.\n. I leave language support up to the community, except for languages I use.  I don't really use ERB.\nAnd frankly you don't want support for <% %>.  I'll explain:\nTaking this code:\n``` erb\n\n\n\nDocument\n\n  <% if %>\n  <% else %>\n  <% end %>\n\n\n```\nYou would want it to highlight the if and end, but BH does not support things like this [ round bracket will not match (  ][ ) ].  BH doesn't allow splitting the round bracket like this.  This is an invalid match.  Now imagine if <% %> support was added.  I think you can see why you wouldn't want it.\n. If someone preferres highlighting <% %> instead of the ruby conditionals, I guess I could see this being added, but I would require a pull request as I have no intentions of implementing it myself.\n. I see brackets underlined, and the bracket indicator icon in the gutter for that line.\nWhat do you mean misplaced?\n. They seem to look fine on my systems.  Yours looks slightly than mine, but it's on the right line though :smile:.  Maybe your font choice and line height change things?  Either way, I probably won't be tweaking them.  I guess if someone tweaked them better, I would be okay with that.  If it makes it worse on other systems but better on some, I would probably turn it down though.\n. Nope.  Sublime offers no way to add padding.  All you do is physically create the image with padding.\nEverything looks fine on my system.  If I recreate the icon to be positioned differently.  It might fix it for you, but break it for me.\nThis is just a limitation of sublime.  If someone wants to spend time on trying to make it work for everyone perfectly, pull requests are welcome.  But I don't really have the time to work on something that I have no issues with.  Sorry.\n. By the way, is this for ST2 or ST3?  Rendering may be different for ST2.\n. I don't know then, it may be related to your font or line height choices.  But there isn't much I can do about that.\n. If your php brackets have nothing to match, then you should disable php matching.  I find the current behavior of BH acceptable.\n. I have no problem disabling by default.  I find people generally don't like that it shows the question mark in these cases.  BH is designed to match specified brackets...not to not match.\n. Oh, I see now.  You want to remove the matching from pure php files (no HTML).  That makes more sense.  I didn't pick up on this until I looked at the actual code change.\n. Okay, looks good!\n. If you are on ST3, then there already is a way.  When I get a chance, I will explain.\n. http://www.sublimetext.com/forum/viewtopic.php?f=5&t=3327&p=61550&hilit=brackethighlighter#p61550\nI need to add this to the official documentation, but here is the forum post.\n. Documentation has been updated with instructions https://github.com/facelessuser/BracketHighlighter/commit/11e6e1537a2c6700950061453797a8327a06c7d0.\n. Please provide instructions for replicating the issue.  Since I would be supporting this fix in the future, I want to know exactly why this can only be solved by putting a hack in BH, and not fixing it in Vintageous.  I am not necessarily against accepting a hack in BH, but I want to understand the issue better before I consider evaluating this pull.\n. I am afraid I don't think merging this is the right thing to do.  BH should not be run on every window command.  I really feel vintageous needs to first look at this issue before BH gets involved.  BH should not have to hide or mask vintageous issues.  Maybe by not masking it with BH, vintageous will be urged to look into fixing this.\n. There is a search threshold for auto bracket match to help with performance.  The threshold is split around the cursor so if you have a threshold of 1000, the search window is 500 chars before the cursor and 500 after the cursor.   When you are at the bottom of the file, you can' search 500 after because there is no after, so instead of throwing away that portion of the search window, I just reallocate it to before.  I guess I could just throw it away for consistency, but currently I don't.\n. >  The threshold starts at the cursor and goes both ways. In that case, since you are already dynamically reallocating parts of the threshold, would it make sense to reallocated extra chars to the back as soon as you find the opening bracket? I think that would fix it and improve performance.\nSadly no, this logic is making some assumptions about the algorithm that just aren't the case; it would actually decrease performance.  When a search window is acquired all closing and opening brackets are found with the window, and they are then sorted through finding the closest matching pair around the cursor, and terminates as soon as it thinks it found the closet valid pair.  I wrote up a post in another issue kind of explaining what BH does: https://github.com/facelessuser/BracketHighlighter/issues/207#issuecomment-65661647.\n. Nope.  This is a Sublime limitation.\n. Nope.  But if you want to completely disable BH gutter icons, you can in the settings file.  You will find many plugins cause conflicts in the gutter, so I guess the best answer is to live with it or disable the ones you can that you feel are not as important.\n. This is covered in the docs: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.\n. Package Control is the the recommended way.  Have you used Package Control before?  Usually select the \"Install Package\" (or whatever it is called) in the command palette, and it should appear in the list.  Select and install.  If you are having trouble with Package Control, their repo might be the place to post questions or file issues.  BH has done nothing recently to change how it interacts with Package Control, and people have been using Package Control to install BH for at least two years now.\n. You can change your bracket color, and that will in turn change your highlight bar color, but that is all that is currently available.\n. Limitation of ST API, sorry.\n. It's because PHP is messing up the HTML syntax.   See line 4 and line 6 (double quotes embedded in double quotes).   With things like PHP breaking the flow of HTML and the multiple variants of template languages out there, it becomes increasingly difficult to reliably find HTML tags.  If I keep relaxing the regex to find HTML that has PHP or Handlebars or whatever other scripting language or template out there, it will come to a point where I am getting false positives on HTML matches.\nI know HTML is not meant to be parsed with regex as it is not a regular language, but that is the BracketHighlighter framework.  Maybe one day in the future things for HTML will be implemented a different way, but currently, it is done with regex, and  you can only stress those rules so much.\n. Reference of what I am currently working with: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/tags.py#L10.\n. I am not experiencing this. \n\nI am assuming you are using a C/C++ syntax highlighter?  I am using a custom syntax highlighter, but it should be noted that if a syntax highlighter is not highlighting things appropriately, it can have an effect.\nAnyways, please be more specific about the details of the environment: what syntax highlighter are you using, ST2 or ST3, etc.\nBut I will say this, there doesn't appear to inherently be a problem with the algorithm, if there is a problem, I suspect it is with the code view's environment not playing nice with the current settings and/or bracket rules.\n. Ahh, groovy; I see.  I don't use groovy, but after quickly switching to the syntax I see some problems with the groovy syntax.  Using another of my plugins Scope Hunter  I was able to conclude that on line 2, that the first parenthesis is scoped as the opening, the second (right after meta) is scoped as the end, and the actual end is not scoped as a end bracket at all.\nNow, the round bracket rule doesn't really care about the scope except to make sure a round bracket is not a string or comment...but the groovy syntax doesn't seem to scope strings as strings.  So the default groovy syntax kind of sucks.\nBasically, since the bracket right after meta is not scoped as part of the string, BH thinks that all three round brackets on that line are valid.  So now we have a condition like this: { ( ) ) }.  BH can't resolve the second closing round bracket because the first is getting paired with the opening throwing off the matching of the curly.\nSo I will be honest, what you need is a better groovy highlighter.\n. Correction.  The groovy syntax highlighter doesn't seem to scope the first or second string as double quoted strings, but it does scope the last string proper which is why you don't see the same problem on the last function.\n. As this is not an issue with BH, this issue will be closed.\n. Is this a new thing since 3067?  Or something that has existed before 3067?\n. This has got to be new.  In JSON, you can do this and get a hang as well:\njs\n{\n    \"\"\nThis is no good :frowning:.\nIt appears to be related to the scope (in this case string) being at the end of the file.  By adding a few newlines and then adding the curly and string, there is no hang.\nSublime has changed something, and now it appears some of my previous assumptions are causing problems.\nI may get time this weekend to solve it, but maybe not.  I am still not certain there is anything inherently wrong with what I am doing.  It may just be a Sublime bug, but first I have to narrow down what exactly causes the hang.\n. One more bit of info.  This appears to something specifically related to scope_brackets (double quote matching etc.).  Disabling all scope_brackets rules removes the issue.\nAt least my suspicions of scope related issues are confirmed.  I will try and narrow down what specifically I am doing with scopes that is causing the issue this weekend (depending on the difficulty of isolating the problem and how much time I have).  Hopefully it is something I can work around.\n. Yes, this is what I have been discovering.  I have the hang fixed, but now I am working on fixing how matching at EOF works as well.\n. Commit https://github.com/facelessuser/BracketHighlighter/commit/6ce6e3de7845be9f4fe7db48b7221efbb480c725 should fix this issue.  Let me know.  I pushed it to the ST3 branch, so update via Package Control when available.\n. > I still have problem in javascript files, as soon as I open a bracket to write a string ST3 hangs :/\nI do not see this issue anymore.  I have tried strings in Javascript, Python, Yaml, JSON, etc.  and they are now working fine for me, but I am using the the latest version.  Make sure Package Control has updated to the latest fixed BH and restart to make sure it is loaded proper.\nAlso, if you are having issues, you need to provide code and/or steps so I can reproduce the issue, especially since things are working good for me now.\n. No worries.  Just glad it's working now.\n. It doesn't even look like you have a TLA syntax highlighter; I don't even know what TLA is.  By default, BH doesn't highlight in plain text files.\n. Yeah, you would have to modify the current bracket rules that you want to appear in plain text.  Plain text is usually excluded because brackets in strings or comments can't be filtered out.  Plain text isn't structured like code syntax, so you can get a lot of weird unmatched brackets in plain text without syntax context.\nAnyways, you can remove Plain text from your desired rule's blacklist.  But keep in mind that not all rules will work or work well without syntax scoping context.\n. @joewilliams, I am assuming you have what you need now?  Or do you have any questions?\n. I don't understand what this is.  Angular JS is already on all the branches.  What is the purpose of this pull request?\n. It has been almost a week since I asked for an explanation for this pull request.  Since I have heard no response, I am closing this.\n. I don't mind posting my config when I get a chance.  I just don't set it that way out of the box as it would probably clash with other people's themes.\n. I will go ahead and post it hear till I get around to adding it to the doc.\nNow, the scopes below are custom scopes that I have added to my color scheme.  The color scheme I use is from my Aprosopo theme https://github.com/facelessuser/Aprosopo.  If a scope is not defined, it will just look like the same color as the source code text.  For instance, below I assign the hash rule for C/C++ preprocessors conditionals to brackethighlighter.c_define (though, I should really use a better name), but I have nothing in my theme; so those will look like the source code text.\nBH settings:\n``` js\n    // Define region highlight styles\n    \"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracekt pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\",\n        \"color\": \"brackethighlighter.curly\"\n        // \"style\": \"underline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\",\n        \"color\": \"brackethighlighter.round\"\n        // \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\",\n        \"color\": \"brackethighlighter.square\"\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\",\n        \"color\": \"brackethighlighter.angle\"\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        // \"style\": \"underline\"\n    },\n    \"c_define\": {\n        \"icon\": \"hash\",\n        \"color\": \"brackethighlighter.c_define\"\n        // \"style\": \"underline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"star\",\n        \"color\": \"brackethighlighter.quote\"\n        // \"style\": \"underline\"\n    }\n},\n\n```\nCustom Scopes:\nxml\n        <dict>\n            <key>name</key>\n            <string>Bracket Tag</string>\n            <key>scope</key>\n            <string>brackethighlighter.tag</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66CCCC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Curly</string>\n            <key>scope</key>\n            <string>brackethighlighter.curly</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#CC99CC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Round</string>\n            <key>scope</key>\n            <string>brackethighlighter.round</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#FFCC66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Square</string>\n            <key>scope</key>\n            <string>brackethighlighter.square</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699CC</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Angle</string>\n            <key>scope</key>\n            <string>brackethighlighter.angle</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#F99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Quote</string>\n            <key>scope</key>\n            <string>brackethighlighter.quote</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99CC99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bracket Unmatched</string>\n            <key>scope</key>\n            <string>brackethighlighter.unmatched</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#F2777A</string>\n            </dict>\n        </dict>\n. Looks good to me, thanks!\n. Your's is a different issue than this.  With that said, can you be more specific?  What language are you having trouble in?\n. @reagle ctrl-shift-m is the native jump between brackets.  If you want to tap into BH's jump between bracket feature, you will have to define your shortcut as outlined in the example keymap file (you can even override the built-in one if you like).\n. > In markdown, I don't get the buffer icon either.\nThe quote rule works based on scopes to find quotes as regex is not sufficient to tell a starting \" from a closing \".  If markdown doesn't scope a string as a string scope, then BH is not going to find it.\n. It's just how things are.  Without context, there is no way someone could tell you which of the following quotes is the opening or closing \"hello, \" this is a string\" BH isn't always looking at the entire file when scanning for brackets, and though it may be easy for a human to look at the screen and go obviously the string starts there, it is a bit trickier to do it programmatically with code.\n. I think it is probably safe to close this notice.\n. Reopen for people who haven't seen this yet.\n. Okay, I think it has really been long enough to close this for good.\n. Please read https://github.com/facelessuser/BracketHighlighter#configuring-highlight-style as it explains how to set colors.  The Sublime API does not allow me to directly set a color, but it must be done through indirection via scopes.  If you want a custom color, please follow the guide.\n. Though I have closed the issue, please feel free to continue the conversation if you are confused (after reading the guide of course :wink:).\n. I'm afraid this is not an issue with BH.  BH just sets a region with the scope, I don't do anything directly with the colorscheme.  I don't load it; I don't reload it; nothing.  Whatever colorscheme at the time that is loaded with that scope is what will determine the color.  So I would suspect that you changed your colorscheme, but for whatever reason, Sublime did not reload that theme yet.\nNow keep in mind if you use a plugin like SublimeLinter, it will take your current theme copy it appending (ST) to it because it injects its own color stuff into it.  So if you modify your original color scheme, SublimeLinter won't re-copy the color scheme and reapply it until you physically re-apply the original color scheme.  That is the one thing that really annoys me about SublimeLInter.\n. I believe sublime picks the border color automatically except when doing outlines.  You can play with the scheme colors, but basically I believe sublime also high jacks the don't color as well.  This is just when you use the highlight region API command.  Try it out and let me know if you find something different.\n. As for the minimap, I would have to see what I am doing internally.  Technically it's possible, I just don't think there would be much use for it.\n. Hmm.  Maybe it could be enabled for high visibility mode...\n. I've decided to add this as an optional feature in the settings file.  It won't work with the underline style, but it will work with other underline styles such as thin_underline.\njs\n // Show brackets in the minimap.\n // Depending on your highlight style, regions may not be visible in minimap.\n // \"underline\" won't show up due to it being a style consisting of\n // multiple zero width selections to create a fat underline.\n // But the following styles should show up fine as they are normal regions styles:\n //     - thin_underline\n //     - solid\n //     - outline\n //     - squiggly\n //     - stippled\n \"show_in_minimap\": false,\nFeature is added in commit https://github.com/facelessuser/BracketHighlighter/commit/928bdec3187690d8a5ec8b4ff40079c72dac154f.\n. BH, in a number of cases, will show you it can't match a bracket.  Admittedly, it won't always as the algorithm was designed for matching, not identifying mismatched brackets.\nI could maybe improve the algorithm to possibly pair am unmatched bracket with where it expected to find the other bracket, showing invalid opening and closing and maybe improve invalid catching, but everything is streamlined for focusing on the current bracket scope.  I doubt I would change the algorithm to scan globally all brackets.\n. I guess I would need to better understand what you mean, can you explain how you invision it would work?  Then I can contrast that with the current framework.\n. The way BH works, is it either takes the entire view buffer in the case of on demand matches via shortcuts or command palette, or  a limited window on automatic matches for performance.\nUsing the enabled rules, it complies two lists of brackets; opening and closing.  It then starts paring up brackets until it is left with the closest opening that cannot be matched on the left side of the cursor.  Then it searches the right side resolving brackets until it finds the one that matches the opening.\nBut BH is designed to kick out as soon as it finds what it needs though.  So yes, it takes parents into consideration, but only as much as it needs to.\nThe algorithm always defaults search starting from the left, that is why it won't always show the invalid question mark if the opening bracket is missing on the left side opposed to the right; it doesn't even bother searching the right side for closing brackets if a valid opening is not found.  This was done for performance.  The opening searches inwards from the outside of the region to make sure the opening bracket makes sense and doesn't get paired incorrectly with a like type.  And the closing bracket search searches outwards from the cursor comparing against the opening.  So it is coded strongly to find a bracket match and kick out as soon as it knows it is fruitless to continue further.\nSo to get what you want, would require a rework of the algorithm and a possible performance hit.  Mainly I would have to implement a right side search that also searches out to in and run it regardless of whether a bracket on the left was found.  I would also need to change how I flag a bracket as invalid as currently if I can find only one, it is invalid, but in your desired case, you could have an invalid and have two bad brackets to highlight.  So there would need to be substantial changes to the algorithm and how it interacts with bh_plugins.\n. I'm not saying I won't implement something better for catching bad brackets, I am just laying out the pros/cons and giving an explanation as to why it wouldn't be a simple quick add.\n\nBut just a thought:\ncan't you like say copy bracketGuard's function and have your package run both?\nInstead of having to mess with your original code?\n\nI guess my counterargument would be: couldn't you just install both plugins?\nKeep in mind, bracketguard is approaching this with a very specific goal it wants to accomplish. BH is approaching this with a completely different mindset and goals.\nBracketGaurd is very simplistic in its implementation.  It won't catch complex brackets like ruby's if end blocks.  I had to completely redesign BH to handle custom blocks such as Ruby's as before BH only handled [] () {} and hardcoded algorithm for tags.  Everything has been generalized in BH so that almost any open and closing block marker can be targeted.  With that comes complexity.  So copy and paste is a no go, but you can run both plugins side by side (I guess their highlighting may conflict).  Given some time, and if I decide to move forward on this, I could greatly improve BH's invalid bracket matching.\nKeep in mind that BH not matching brackets also tells you a lot about invalid brackets.  If a bracket won't highlight, you can quickly select brackets on the other side and quickly understand where the problem is.  Yeah it doesn't currently auto-highlight your problem, but you can quickly detect the exact problem by using what it does tell you.\n. After thinking about this more, I really don't have any intention to add this at this time.  If I change my mind in the future, then I will, but I will consider this request as a Won't Fix and close the issue.\n. Disable:\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L152\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L163\nAdd Markdown to:\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L93\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L104\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L182\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L195\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L208\nPlease read https://github.com/facelessuser/BracketHighlighter#configuring-brackets for more info.\n. I assume you got what you needed, so I will close this thread.\n. It's actually a problem when the package gets disabled (by Package Control or whatever). Restarting Sublime should get it working again.  This is an issue that was pointed out to me a number of days ago.  I just posted a new release that re-worked thread stuff and should fix this: ST3 2.4.3.  Package Control should see it within the hour.  You can update then via Package Control, and probably a restart will be required.\n. Wait, are you on ST2?  If you are on ST2, no fix is coming.  I just checked, and on ST3 BhEventMgr was renamed to BhThreadMgr and my recent fix just removed that.  If you are on ST2, I don't actively support that branch anymore.  If you are on ST3 and seeing that error, you are either on an old BH revision, or Package Control installed the wrong branch.\n. Did this get resolved?\n. Good enough for me.  Maybe it upgraded, but this issue doesn't appear to exist on the latest release, so I will close this.\n. I think you are mistaken and maybe you are running a swap command from some one else plugin, but BH translates these quotes just fine for me.\n. Just to back this up a little bit, you can see in the code here that I convert all old quotes to the new quotes in a given open and closing bracket region.\nbh_plugins get the whole region for the opening and closing. So the swap quotes module then converts all quotes in those regions and then parses the content  between them  and swaps escaped chars: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/swapquotes.py#L35.\nSo unless your language file is some how making it so BH can no longer recognize triple quotes strings, I can't see how this would be a problem.\nIf it is your language file, then putting back in the appropriate scopes would fix this.  Or adjusting the quote rules in the bh_core.sublime-settings file to properly find the entire opening and closing of python strings again would fix it.  But I don't think there is anything inherently wrong with the swap quotes module or BH in general.\n. Another option is to add a rule in BH's settings for Python Improved.  Whatever makes the most sense.\n. Let me take a look at what you have.\nBut basically, BH is basically just a bracket highlighting framework.  I am hesitant to lay blame on the current infrastructure as I am supporting a ton of different languages.  Some languages require tweaking existing rules, or sometimes inserting new rules entirely.  Generally, I leave maintaining the rules up to the community to maintain (unless I have a vested interest in the particular language).   I do not view rule tweaks as anything wrong with BH.  I basically try to just maintain the framework, and other people sort out the rules for their given languages.\nSo if a problem is exposed in the framework, I will rework it.  With that said, I do follow Matt's Python Improve as I do merge back changes into my personal language occasionally, so I am interested to see what is different now.  I want to see if it is a scoping issue or what.\nI will get back to you once I test it.\n. Using the tip of your fork, this was all I needed to get things working; all I did was add PythonImproved to the language list:\njs\n        {\n            \"name\": \"py_single_quote\",\n            \"open\": \"u?r?((?:'')?')\",\n            \"close\": \"((?:'')?')\",\n            \"style\": \"single_quote\",\n            \"scopes\": [\"string\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Python\", \"PythonImproved\"],\n            \"sub_bracket_search\": \"true\",\n            \"enabled\": true\n        },\n        {\n            \"name\": \"py_double_quote\",\n            \"open\": \"u?r?((?:\\\"\\\")?\\\")\",\n            \"close\": \"((?:\\\"\\\")?\\\")\",\n            \"style\": \"double_quote\",\n            \"scopes\": [\"string\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Python\", \"PythonImproved\"],\n            \"sub_bracket_search\": \"true\",\n            \"enabled\": true\n        },\n. > So, back to the underlying problem.\nAlleged problem :wink:.\n\nDo you think using a base-scope list is a better idea than specifying the the syntax names?\n\nLet me explain what I am doing here.  I don't want to load every rule in bh_core.sublime-settings file when I enter a view.  I don't want to search every rule that may be irrelevant.  To plow through all of those regex rules every time would probably impact performance.   Performance is what I care about most.\nSo, what I do, is allow people to specify a language to allow the rule in, or to blacklist.  That way I only load the relevant regex that will be used and the the relevant bh_plugins that support a language.  This way on activation, I do that stuff once, and then I am done.  Then I focus just on matches.\nIf I were to do it the other way, I would have to check the scope on every match and then walk through all the rules every time compiling a list of relevant rules to then load up and execute.  Not only that, when I am preparing my search window, I now need take into account all the scope extents that should also limit my search range.  Basically I would be preparing rules for various subregions of my search window.  If I let all the languages mix, I run the risk of letting all the rules gobble up each others tokens.  it's complicated, and their is a trade off even now with allowing what rules in what file.\nIt's possible I will revisit this stuff in BH 3.0, but to do what you are suggesting would require quite an overhaul, and we still might get more issues than what we gain.\n\nAlso, is there a better way currently than to copy the entire scope_brackets list when you want to override just two language_list filters?\n\nI need an ordered list.  Order is important with rules, but yes, there is a way to manage rules withoug copying the entire list: https://github.com/facelessuser/BracketHighlighter#bracket-rule-management\n. > By \"base-scope\" I mean something like this. It could then be used with the sublime.match_selector API and matched agains a language_selector like source.python. Since this supports scope selectors, it would also allow negative selectors like - text.plain so language_filter is not needed.\nMaybe, but I would need to actually evaluate how well this idea works first.  Anyone can make a language with the same scope as another.  I would have to play around with the idea first to see how feasible it would be and what gains, if any, and what side-effects, if any.  Again, maybe in BH 3.0, but I will make a note of this to consider.\n\nEdit: You should mention this in the settings file, in the spirit of the \"Just in Time\" theory.\n\nTrue, so true.\n. I believe it is possible (your link took me nowhere, so I am not sure what package you are using).\nJust an FYI, I require the community to add support for desired languages as it allows me to focus on maintaining and adding features to the core, and you will understand the nuances of dust better than I.  With that said, I am more than happy to help guide you on adding your desired language, but I would first take a look at examples in the settings file, and I would also take a look at the documentation.\n. I am going to close this.  Hopefully someone will pull request this feature.  If you give it a shot and get stuck, I am open to guiding people through their issues, I just don't plan on spending time on implementing dust support myself since I don't know anything about dust (nor am I looking to learn :wink:).\n. Yep, I am aware.  It is has been on my list, just haven't gotten around to it yet.\n. Fixed here https://github.com/facelessuser/BracketHighlighter/commit/3f8fd78eb497f175d90ffb627393c141ec214602.\n. Glad you figured it out.  I hadn't had a chance to answer yet.\n. I don't think I understand what you are saying...can you elaborate and/or post a screenshot of what you mean?\n. Can you post the screenshots directly to the github issue?  If sent by mail, github strips out attachments.\n. BH requires a cursor movement or the buffer to change to trigger a match. Matches occur around the cursor(s); that is fundamentally how it works.  Search selection doesn't trigger an event that can be intercepted by plugins, so I don't think this possible. \n. I think Package Control was having some issues when Github was under a DDOS attack.  I think the problem should be resolved now.  If you need to manually check it out in the future, you can download the release and drop it in your Packages folder.  Make sure the plugin's folder name is BracketHighlighter.\n. Feel free to add a rule or alter the round rule to add functionality.  By default, BH avoids highlighting brackets in the string scope.  Bash highlights $() as strings.  BH will highlight sub brackets in strings if they are a recognized quoted string; in this case they only match within the scope of the string.\nSo in short, it was bad form for bash to use the string scope for a non-string. So it doesn't work for the current rules.  Modification to the existing rules may be all you need, but if not, you will have to create a new rule.\nI mainly focus on the core code and require language support to be added by the community.\n. I'll post some pointers to get you going in a little bit.  I think your problem will be easy to fix, but you will have to run with the suggestion and do the general testing for a pull request.\n. Alright, to get you on your way, I would first take care of strings embedded in your the string scopeing of $().\nYou can do this by modifying the double quoted and single quoted rules to use a more specific scope if there first fails:\njs\n        {\n            \"name\": \"single_quote\",\n            \"scopes\": [\"string\", \"string.quoted\"]\n        },\n        {\n            \"name\": \"double_quote\",\n            \"scopes\": [\"string\", \"string.quoted\"]\n        }\nSecondly, we need to modify the round rule to make an exception and target the round brackets within strings if they are scoped as the start and end punctuation of the shell command:\njs\n        {\n            \"name\": \"round\",\n            \"scope_exclude_exceptions\": [\n                \"text.tex string.other.math\",\n                \"punctuation.definition.string.begin.shell\",\n                \"punctuation.definition.string.end.shell\"\n            ]\n        },\nNow you can see we treat embedded strings properly, can match sub-brackets in the strings as usual, and we can now see the round brackets.  I will leave it up to you to do further tests and make further changes if necessary.  I will look for a pull request.  Hope this helps.\n\n. By the way, ScopeHunter is a great tool for exploring scopes to help you with your BH rules.\n. As noted, language support is supported via the community pull requests.  This issue will be closed and will await a pull request.\n. I am afraid I don't understand the question.  Can you explain?\n. You can't set it in my picture, but I had three cursors in three different places, showing three different brackets being matched.  Sublime just picked the outside one to be down in the gutter.\nBH will show the closest bracket match around your current cursor(s).\n. I don't know what twig is.  I don't have a twig highlighter.  You need to provide me with detailed steps to reproduce.  I need to know ST3 version, I need to know platform, I need to know syntax highlighter package you are using.\nKeep in mind there was a freeze issue that was introduced around ST build 3070.  ST changed some things that caused BH to freeze. BH was adjusted to fix this issue latest BH releases.  So, everything needs to be updated to the latest.\nAnyways, if you provide the requested info, I will be able to look into it.\n. Not a problem.  This is why I recommend Package Control to stay up to date.\n. Are you sure BH has been updated to the latest as well?\nSee https://github.com/facelessuser/BracketHighlighter/issues/226.\nI don't know what ST version you are on, but around build 3070 some things changed that required me to make some changes in BH to keep  Sublime from freezing.  Jon of Sublime reached out to me, and in order to prevent sublime freezing up if when people upgraded Sublime without upgrading BH, we implemented a check to disable BH if the BH version didn't have the fix needed.\n. No problem.  Glad you got it working.\n. I'm not really sure what you mean.  Some screencaps might help.  Now keep in mind that C/C++ programming allows for things like #if switches and such that can add quite  a bit of complication to files. They can allow for inserting of brackets that have no pairs that can throw off the matching.\nFor instance:\n``` c++\nif (CONDITION)\nif (m_some_flag)\n{\nelse\nif (m_some_flag && m_some_additional_flag)\n{\nendif\n// Some Code\n}\n```\nWhich opening bracket gets matched with the end bracket?  You can see the github Syntax Highlighter isn't even highlighting the #endif correctly because these types of situations add a much higher level of complexity.  Obviously this situation could be remedied above my moving the opening bracket after the #endif and just have a common one, but this is simply an illustration to show what I mean.  I won't go into the algorithm behind BracketHighlighter (BH), but it is simply not well suited for this type of situation as the unmatched bracket will throw off it's ability to pair other brackets. In general, I found that BH handles C/C++ code find in other scenarios.  I would have to do a lot of work to get BH to handle such complex scenarios, which  I currently have no interest in dealing with at this time (who knows maybe in the future).  I am a C/C++ programmer, and I do run into these kinds of issues in our code base, but in general, I just overlook these situations and currently accept this as a a weakness in the BH.\nI don't even know if this is the kind of issue you are experiencing as I would need an example.\n. FYI, make sure you check the console for errors and such.  I would basically need either need a way to replicate the problem, or enough info like console errors to identify this as a BH problem.\nKeep in mind that there may be the possibility that another plugin outside of BH may be interfering.\n. Cool, this gives me something to look at.  I will take a look.  What diff plugin do you use so that I can reproduce this?  I may be able to patch without it, but if I am able to install the plugin to reproduce, it will be much easier for me to understand why it is failing.\n. Thanks, I will let you know when I have time to isolate the issue.\n. Okay, I cannot reproduce your problem.  But after looking at your screencaps and analyzing the section of code that your error is showing, I suspect I know what the issue is.\nI believe you have added your own custom rules or modified existing rules?  If so, please post them.  I believe what you have done is broken some rules.  Each open and close entry must have 1 and only 1 capturing regex group.  If you don't have 1 group you mess up BH's ability to index the brackets.  This is covered in the documentation: https://github.com/facelessuser/BracketHighlighter#configuring-brackets-rules.\nPlease respond with the requested info so that I can confirm.\n. Also, oddly, your two screencaps seem to have slightly different syntax highlighting.  It seems some weird stuff is going on with your setup...\n. BH will now cleanly handle bad regex groups without crashing: https://github.com/facelessuser/BracketHighlighter/commit/d1f9128051e752e82cace9ac241fec909e584688.  When an invalid regex group amount is used, BH will now silently log the error in the console but continue cleanly.\nThis will be in the next official release.\n. It looks like your original method shouldn't have caused an indexing issue.  I will dig a little deeper and see if there is something else I am not accounting for.\n. Okay, technically your original pattern shouldn't have broken anything, though the new way you are doing things is much better and is the advised way.  After digging deeper, I found the actual issue and fixed it here: https://github.com/facelessuser/BracketHighlighter/commit/863abc4e60ea9b90d9569233806c6886f93c5510.\nThis fix should be in the next release.\n. Looks good.  Thanks for the pull.\n. I'm afraid I don't debug keybinding conflicts.  I really don't have time for such things, you will have to figure out your own keybinding conflicts.  I ensure the plugin features work, which they do.\nI use the following keymaps which work fine on 3084:\njs\n    // Go to left bracket\n    {\n        \"keys\": [\"ctrl+alt+super+up\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": true,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\n    // Go to right bracket\n    {\n        \"keys\": [\"ctrl+alt+super+down\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": true,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\"}\n            }\n        }\n    },\nIf you are having problems with keymaps, another plugin may be interfering.  Maybe reinstalling BH will get things working again (make sure to restart after installing).  But everything is checking out okay on my system with the keybindings listed above. \n. You would have to rewrite a number of the rules, but it could possibly be done depending what you are actually trying to do, but I have no interest to do it by default.  Feel free to read the documentation to augment your own personal rules to get your desired behavior.\n. Are you sure you are attributing this to the right package?  I haven't added any open file calls to BH.  I am also not seeing this behavior.  I think whatever the issue is, it is coincidently appearing along side the BH upgrade.\n. Wow, that is weird. Definitely looks like a Sublime thing :).\n. Thanks!\n. I'm sorry!!!!!  But that is the way it works with Sublime.  Sublime places limitations on how I can affect the color.\n\nOK, I do. I find /Applications/Sublime Text.app/Contents/MacOS/Package.\n\nDon't do that.  Go to your menu Sublime Text->Preferences->Browse Packages  and you will see the User folder in finder.  In your User folder, create a BracketHighlighter.sublime-settings and copy over any setting you want to override.  You can find the original settings file via the menu Sublime Text->Preferences->Package Settings->BracketHighlighter->Bracket Settings - Default.\nHope that helps.\n. Glad you figured it out.\n. This is a limitation to how sublime highlights a region.  I am afraid there isn't much I can do about this.  You can play with your theme colors associated with the highlighting http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style, but that is about it.  There is nothing I can do on my side.\n. Thanks!\n. It should be possible, but my current policy is that languages are supported by the community, unless it is a language I use.  I just don't have time to learn the nuances of new languages. So this is going to need a pull request.\n. No need to cry, a pull request can add support.\n. > But sometimes it make not so much sense \u2013 in case when I have a cursor inside string, or inside single-line brackets.\nI used to at one time have an option to ignore matches on a single line, but on the rewrite, that didn't actually make it back in.  Maybe in the future it can make it back in.\nI personally find single line inside strings useful when dealing with regex in strings; that is the main reason why I added the ability to do sub brackets inside strings.  Highlighting string quotes in general aren't really that useful, but everything is generalized in BH.  By targeting quotes, I can then utilize bh_plugins to select the string content, swap double to single quotes, jump to the end of the string, stuff like that.\n\nIs it possible to highlight (and draw icons on the left) for several parent brackets? (Say, for 3-5 levels, or by any other limit).\n\nNo, I've just never had adequate motivation to do something like that.  It would be a bit of work for something I don't think I'd ever use.  There is a lot I'd have to change to allow something like that.   BH is geared to target your current bracket scope.  Since everything is coded around that idea, it would be a pretty big thing to change\n. I guess I would need more info.  The default settings won't change.  User settings should override the default no problem.  I personally override a number of the defaults.\nIf you could provide more info, I may be able to guess better what your issues is.\n. What is your style setting.  show_in_minimap is either true or false, but it doesn't work on normal underline, on all other styles it works great.  You can read the description in the defaults:\njs\n// Show brackets in the minimap.\n    // Depending on your highlight style, regions may not be visible in minimap.\n    // \"underline\" won't show up due to it being a style consisting of\n    // multiple zero width selections to create a fat underline.\n    // But the following styles should show up fine as they are normal regions styles:\n    //     - thin_underline\n    //     - solid\n    //     - outline\n    //     - squiggly\n    //     - stippled\n    \"show_in_minimap\": false,\n. http://facelessuser.github.io/BracketHighlighter/customize/#bracket-rule-management\nThere are a number of examples.  The old way was to copy the entire bracket list, but now you can override existing ones without copying the entire list, you can read about it in the link above.  But yeah, when you override it, you would set the enabled to false.\n. > Ok, this part I've got, thanks! (But it's almost invisible on minimap with any style...)\nI don't control how it looks, that is all Sublime.  I only added it because it was requested; I don't particularly find it useful myself.\n\nAnyway, what about disabling string rules (double & single quotes)?\n\nDid you read http://facelessuser.github.io/BracketHighlighter/customize/#bracket-rule-management?  Your answer is in the first three paragraphs.  I'm just going to end up rephrasing that part, so if you read and are still confused, I can clarify the specific part you are confused about.\n. I am assuming that your question was answered as things have gone silent here.\n. There's also a string escape mode that you can swap to regex mode.  Look in the command palette and the settings file.\n. Please read here about escape modes: http://facelessuser.github.io/BracketHighlighter/usage/#toggle-string-bracket-escape-mode.\nAnd here about changing the default setting: http://facelessuser.github.io/BracketHighlighter/customize/#bracket_string_escape_mode.\nLet me think about this change.  I also deal with regex in actual strings that aren't handled raw, and in those cases, I need to be able to count an escape as \\\\( opposed to '(`.  For this reason, I added the escape modes.  Normal strings may still need  escape modes, and if so, I don't want to merge this unless I have them playing nice together.\n. Okay, I understand better.  The feature I mentioned works for sub-brackets in strings, but since yaml omits brackets for some strings, they aren't recognized by BH as quoted strings; therefore, they get they don't have the escape modes applied.\nSo I actually took time to install AAAPackageDev, and I have a couple more suggestions for this pull:\n1. For changes that are very language specific, and really aren't desired globally, I would prefer that the excludes scopes be namespaced so that unexpected behavior doesn't get picked up my unsuspecting languages.  So I would prefer a format like this: constant.character.escape.general.regexp.\n2. AAAPackageDev also has a problem with quoted regex strings as the way AAAPackageDev scopes quoted strings, they will not be recognized by BH.  This can be fixed by applying a exclude exception for those types of strings via meta.value.yaml-tmlanguage.  But since we want to uphold your constant.characer.escape.general.regexp, we would format it like this: meta.value.yaml-tmlanguage -constant.character.escape.general.regexp\njs\n{\n            \"name\": \"round\",\n            \"open\": \"(\\\\()\",\n            \"close\": \"(\\\\))\",\n            \"style\": \"round\",\n            \"scope_exclude_exceptions\": [\n                \"text.tex string.other.math\",\n                \"punctuation.definition.string.begin.shell\",\n                \"punctuation.definition.string.end.shell\",\n                \"meta.value.yaml-tmlanguage -constant.character.escape.general.regexp\"\n            ],\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"punctuation.definition.case-pattern.shell\",\n                \"constant.character.escape.general.regexp\"\n            ],\n            \"language_filter\": \"blacklist\",\n            \"language_list\": [\"Plain text\", \"Hex\"],\n            \"find_in_sub_search\": \"true\",\n            \"ignore_string_escape\": true,\n            \"enabled\": true\n        },\n. > I fail to see how adding \"meta.value.yaml-tmlanguage -constant.character.escape.general.regexp\" to scope_exclude_exceptions does anything since that should not be excluded in the first place.\nDid you look at regex in quoted strings in your syntax?  I did.\n. I make no assumptions about escapes.  What about some embedded language in another languages string?  Escaped brackets are more of a regex thing, so why not limit the expectation to that?\n. I'll reinstall AAAPackageDev again later and post some screencaps.  What I posted was what I tested with; though I only posted the round example.  Whether you address quoted regex is really up to you.  I was just letting you know what was broken and how to fix it.\nI will evaluate the escaping and let you know my final verdict.  I just don't think always excluding escaping chars in ALL syntaxes will turn out as expected.  That is why i want it more specific.  There is an assumption that all syntax writers are going to follow what you expect.\n. > Can you give me an example please? I still can't see it.\nQuoted regex has no bracket recognition.  This is due to how it is scoped.\n\nWith \"meta.value.yaml-tmlanguage -constant.character.escape\" applied in scope_exclude_exceptions (plus your previous changes).\n\nYou can fix it if you want, but since I don't use AAAPackageDev, I am okay if you don't want to.  I just thought I would be helpful since I noticed it.  I might add something like this to highlight in unquoted strings in normal YAML.\n\nSo, the current state is: change the exclude scope selector to meta.value.yaml-tmlanguage constant.character.escape to be more specific about the syntax used.\n\nNo.  I was more referring to constant.character.escape.general.regexp instead of constant.character.escape.  Though something like source.yaml-tmlanguage constant.character.escape might be even better as it targets source.yaml-tmlanguage.\nIn normal strings, regex escape or string escape mode mode kicks in for sub-brackets.  What you are adding is specifically needed because your syntax does not have its strings get recognized as quoted strings for the builtin feature to kick in. This is partly because YAML allows non-quoted strings, and partly because how AAAPackageDev scopes quoted strings in the syntax file.  So let's keep it scoped to just what we are trying to fix for now until I can evaluate things globally.  It better to start conservative and fix the problem we are seeing, than to be liberal and cause more problems we didn't expect.\nUsing constant.character.escape globally might be fine and I understand the logic that we never want to include escaped brackets, and maybe I will go that route in the future, but I need to time to evaluate a change that will globally affect things.  How will this play with string/regex other strings?  Do I need to kill off regex mode in Python raw strings if constant.character.escape solves this issue?  Would people want to use string mode escape instead of regex mode escape in Python raw strings for some reason?  I don't know yet, but I need time.\nConclusion\n\nUse source.yaml-tmlanguage constant.character.escape for scope_exclude to solve the specific issue we are seeing.\nOptionally add meta.value.yaml-tmlanguage -constant.character.escape to scope_exclude_exceptions to fix your quoted regex problem.\n\nIf am open to other suggestions as well.  If you see some flaws in my logic, feel free to point them out.\n. > Ah, you mean the real brackets. I was a bit confused about your usage of \"brackets\" and \"sub-brackets\" earlier, which is why I didn't think of this being the real brackets.\nSorry if I wasn't more clear.  Just thought if you were going through the effort to fix part of it, might as well fix all of it, but that is up to you.  I'm only picky if it affects something I use; just thought I'd point it out.\n. Package control either thinks it is already installed (check the uninstall command) or Package Control is messing up.  It is either a Package Control issue or a user error.  There is nothing I can do from my end.  If it is a Package Control issue, you will need to create an issue on that repo.\n. I know this may seem confusing, but it is expected.  The current implementation of bracketselect.py handles the selection of content and moving the caret/cursor (basically zero width selections).  So if we run a jump to end bracket command it we get this:\n{ { tes|t } more text } -> { { test |} more text }\nWe run it again, we get :\n{ { test |} more text } -> { { test }| more text }\nAnd again:\n{ { test }| more text } -> { { test } more text |}\nAnd so on. So this is nice functionality.  And I bet you can see what I am using to trigger the logic; I check if the caret is on the inside or outside.  So you can see, even though these brackets highlight on the outside with bracket_outside_adjacent enabled , when you invoke the command, we run without \"outside adjacent\" matching.\njs\n// Go to left bracket\n    {\n        \"caption\": \"BracketHighlighter: Jump to Left Bracket\",\n        \"command\": \"bh_async_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": true,  // <----------- No outside adjacent\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\nNow I know what your thinking, let's split the logic, but what about expanding selections?  With this logic in place, we can do this on running the selection command ('<>` will be highlights).\n{ { tes|t } more text } -> { {< test >|} more text }\nagain\n{ {< test >|} more text } -> { <{ test }>| more text }\nagain\n{ <{ test }>| more text } -> {< { test } more text >|}\netc.\nSo this is my intended functionality.  So your caret must be inside the brackets to select the content inside.\nYou can create your own custom keybinding or command and set no_outside_adj to false.  If you like that functionality, have at it.  Keep in mind this changes functionality as discussed here in #187.\nBracket plugins only know about the current bracket; not the parent. So the only way to get the parent bracket instead of the current is to ignore outside adjacent matching.  This is fully intentional and is the current limitation of the bracket matching framework.\n. > However, on the menu it seems more logical to make the option \"no_outside_adj => false\" by default.\nAhh, but you forget that bracket_outside_adjacent is disabled by default.  So by default, no one has this problem, and they get the expanding selections and the ability to jump to parent brackets without any confusion.\nbracket_outside_adjacent was only added to appease the masses who were requesting it, but BH was built around it being off by default.  Your issue is one of the small compromises that have to be made to have the outside adjacent feature.\nMaybe I can add a command wrapper that for selection commands that allows for users to control the no_outside_adj functionality via the settings file.  I think that would be the best approach.\n\nP.S. Sorry for my bad English.\n\nNo problem.\n. > Indeed, if it were so - the problem would not exist.\n\nBut in the default configuration file option \"bracket_outside_adjacent => true\":\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L48\nThat's what is confusing.\n\nTouch\u00e9.  I didn't realize I had that enabled; it wasn't supposed to be.  #258 should still provide an easy way for a user to adjust the behavior moving forward which is what I think needs to happen.  As long as a the behavior is documented and a way for people to adjust it, I think we should be fine.\n. I decided to expose a setting called ignore_outside_adjacent_in_pugin in the settings file that can globally control this for a user if in the command no_outside_adj is set to null (or None in Python).  All selection commands will use null by default allowing users to just pop into the settings file alter the behavior of the default commands as they see fit.  This will be released in 2.9.0 whenever I get around to that.\n. Please follow the guidelines for issues: http://facelessuser.github.io/BracketHighlighter/contributing/#bug-reports.\n- Sublime build number?\n- Post example example code so I can copy and paste to reproduce\n- What syntax language do you use?\netc.\nThanks\n. > maybe it just needed a restart?\nPossible.  Usually a restart is good right after some packages install as all their dependencies might not be loaded proper during an install/upgrade.  Glad its working again for you.\n. I understand the desire for the parent to be match in this scenario, but BH's current algorithm will not allow this without chaining multiple commands.  That is because the inner bracket was used as the match when calculating the jump outside the brackets.  The matching bracket is never aware of the parent bracket as BH only searches one bracket at a time.\nSo for clarification, the algorithm goes like this (highlight in bold):\n1 . Match bracket:  ( [ |] )\n2. Move cursor: ( [ ]| )\nThe only way to end with ( [ ]| ) is if BH did the \"jump outside\" call and then called a command to do a secondary match after the move.\nCommands are set up to do one thing and that is what they do.  The alternative would be to have it highlight nothing, but it can't highlight the parent without calling an additional match command  If you must have it highlight the command, I suggest writing a command wrapper that chains the jump with a secondary highlight.\n. Maybe I could expose something in the bh_plugin API that would trigger an auto match...let me think about this more.\n. I have a fix for this which will be released in 2.9.0 whenever I get around to it.  Probably some time this mid to late August.\n. I am using the very latest ST3 and BH with custom colors.  Colors work great.  I can only assume this is a user error.  A matter of fact, in the picture you posted, a : is highlighted red because you forgot a comma after curly_bracket; so that is at least one of your issues.\nThough I may generally instruct people to uncomment certain lines, I do expect that they will ensure that they do not break JSON format in the settings file.  I give general instructions, but I may not give every little detail.\nThe problem is because you either haven't configured the settings file right, or haven't configured the theme file right.  Please try to make sure you have the proper syntax in both your theme file and settings.  If you are still struggling, I will require you to post your settings file and theme file here as the problem is is in one or both of those files. \n. I should say color scheme instead of theme file (in case there is some confusion here).\n. No problem.  Glad you got it working.\n. Since BH uses regex to find the tags, breaking the the HTML syntax with PHP tags breaks the bracket matching.  As PHP can be placed literally anywhere in HTML, it is impossible to come up with a regex that can account for the many diverse ways someone can break HTML syntax with PHP.  This extends not only to PHP, but to template languages with HTML as well.\nThe way the HTML code is parsed with the syntax highlighter lexer doesn't lend itself well to using scope bracket logic either.   I've tried to use the tag scope before, but touching tag scopes bleed together.\nThis is simply a limitation of BH at this current time.  The best way to handle this would be to tie bracket matching together with the syntax lexer, but that is something that BH can't easily do.\nI currently leave language support up to the community.  If you can come up with a way to reliably handle this, I would be willing to merge it.  If you need additional support the core code to pull it off, I am open to a proposal.  If said proposal was accepted, I would have no problem implemented that code in the core.\nWe mainly have regex and syntax scoping to work with, if you can come up with a way to handle this in a general way that could work in the existing framework, then I am willing to move forward on this.  Any requests for code in the core must be general.  I will not add syntax specific code to the core, that is meant for bh_plugins.\n. I will close this as at this time there as I have no plans to move further on this.\n. 1. I would read overview in the Contribution and Support section in the docs: http://facelessuser.github.io/BracketHighlighter/contributing/#overview.  In short, I require the community to support the language rules, and I deal with core framework code (and languages I usually have a vested interest in).  I don't use ruby, so this will require a pull request from someone.\n2. With that said, I can at least give some guidance.  If a regex look ahead could be constructed to sniff out these one liners, then you could effectively ignore these one liners. FYI, we already ignore some_action if condition.\n3.  Maybe look aheads aren't the way to go and you need a more programmatic approach.  You can look in bh_modules\\rubykeywords.py and add a validate check: http://facelessuser.github.io/BracketHighlighter/customize/#validate.  Here you can maybe do some more advanced logic to sniff out whether you want to count the given keyword.\n4. If core changes are needed to accomplish the goal, I am open as long as no language specific code is requested in core.  The idea was to push language specific things out of the core so the community could contribute new rules and fixes to existing rules without having to understand all the core stuff.\nI am willing to give advise, answer questions, and provide guidance to those willing to try and put in the effort.  In short, you are more of an expert on ruby than I am, so I will defer this issue to you or some other brave soul who wishes to tackle this. \n. @jtgrenz Are you sure you're not mistaken about the examples you gave me?  I don't use ruby, but for the sake of my own curiosity I opened up an interactive ruby session on my mac and tried out your examples:\nThis didn't work as it would not evaluate until I entered an end:\nruby\nif condition then action\nThis worked great:\nruby\nif condition then action end\nLooking online, nobody seems to do it the way you mentioned, but they do it with the end at the end.\nThis is valid and works fine in BH, so nothing to be done here:\nruby\nsome_action if condition\nAgain, this did not work in my session:\nruby\nunless condition some action\nBut this did work and is the way all examples online look.  BH handles this fine.\nruby\nsome action unless condition\nThis is looking more like BH is handling things well.  Please confirm as I intend to close this as your examples seem invalid.\n. I'll leave this open till the end of the week.  If I still haven't gotten a response, I will just close this. \n. Good enough for me, thanks!\n. Looks fine.  Thanks.\n. When highlighting with solid sublime controls the font color.  I can't really control that well.  You can try setting background and foreground color in your theme, but I have found in the past that it doesn't work proper.  You can choose something like underline, and the color font should remain.  Sublime only changes the font color if the background is changed with solid.\n. In general, sublime lets you control the colors via the color scheme file by assigning color to scopes.  You assign scopes via the syntax file as that controls the the syntax highlighting.  From a programmers perspective it makes sense.  From a user's perspective it can be a little convoluted.\nAs far as losing control of the foreground when a background selection is set, this also kind of makes sense...a little.  Sublime  tries to ensure the foreground color is visible when a background selection via the API is set that is too similar.  It's approach is to always use the opposite color (inverted) from what I can tell which works in most cases, but sometimes I find it a little tough to read the text with certain combinations.  Like I said, you can play with it and see if in recent builds you can control both foreground and background, but in the past, I haven't really had much success.\n. I don't really understand the request.  Can you elaborate more?\n. If that is what you want, I would just turn on the content highlight bar and use outline style for the tag brackets instead.  Then you don't even need high visibility mode.  I am afraid I have no intention of changing high visibility mode at this time.\n. I am assuming this is resolved.\n. I think you may be attributing something to BracketHighlighter that has nothing to do with BracketHighlighter.  BH doesn't touch tmThemes.  It doesn't try to load tmThemes.  If you look at the release notes for 2.9.0, none of the the changes has anything to do with tmThemes.  I think you are incorrectly attributing your problem with BH updating.\n. Color changing documentation is found here: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.  I even post my personal bracket settings there as well; both BH settings and color scheme settings.  Please follow those instructions, and if you are having issues understanding the documentation, please post specific questions about the documentation.\n. https://github.com/facelessuser/Aprosopo/blob/master/Tomorrow-Night-Eighties-Stormy.tmTheme#L347-L423\nhttps://github.com/facelessuser/sublime-settings/blob/master/bh_core.sublime-settings#L83-L157\n. Maybe I'll throw to together a small tmTheme file example.  I don't want to link the docs to an external repo as those names and lines are subject to change.  I look into something, don't worry about it.\n. I'm going to go out on a limb here and guess you have a high resolution monitor?  Maybe 4K?\nWhen text is real small, BH uses smaller icons.  When text is bigger BH uses bigger icons.  The size of icons used to be 16x16 px, but the actual image inside is what varies in size as it was found that the image would just stretch to fit the UI element.   With OSX retina displays, it was found that 32x32 px was sufficient to get a good icons in both retina and non-retina, so that is what is now used (though I have never physically confirmed it myself as I do not have a retina display).\nAt home I use OSX (no retina), but at work I use Windows with 4K monitors.  My brackets look small, so I am guessing your setup is similar?  On my 4K monitor, line height never drops below 16px, so BH never actually uses the smaller icons.  So it is always using the largest, which is still small.\nOn a non high resolution monitor, I have found the current setup works well.\nBut here's the thing, Sublime's icons are no larger than mine on my 4K monitor.  So I am doing things as good as Sublime is currently.  Try bookmarking a line and compare the icon sizes.\n. > It seems your Jedi senses are finely tuned\nThe force is strong in my family\n\nSo, same size as regular Sublime Text icons apparently. Do you know of any way to overcome this?\n\nIf I created new icons and used all the space available in the image, it would be marginally bigger.  Probably not really worth the effort to be honest.  I am currently taking the stance of as good as Sublime is good enough for me :smile:...I really just don't feel like redoing all the icons again for maybe slightly bigger icons.  When Sublime itself has a way to show bigger icons on a 4K, then I would probably force myself to get off my lazy butt.\n\nI am getting a Macbook Pro Retina next week. Will it display properly?\n\nTheoretically, retina support was added by via pull request by someone who had a retina display...my wife has a retina display...maybe I should install this on her computer...I'll let you know what I find when I get a chance.  Retina just uses 2px for every 1px.  Since we provide a 32px image for a 16px image, it should look fine.\n. Checked out my wife's retina display.  Looks on par with non retina, so better than 4K.\n. If default Sublime icons still don't scale to 4k, then BracketHighlighter won't be able to scale either.  Until Sublime addresses this, there is nothing I can do.. You have formatted it incorrectly.  It should be in JSON format, but it allows Javascript style comments.  So if you are breaking the JSON format (trailing commas where there should be none etc.), then it will break in ST2.  Recent ST3 builds are more forgiving.  Since I don't see your bh_core.sublime-settings posted here, all I can say is double check your settings and format it correctly.\n. I am afraid I have no idea why ST2 was giving you issues, but I would suspect if there was a malformed stock settings file, then I would be having more than 1 person having trouble by now since I haven't made an ST2 release in over a year.\nAnyways, I am glad ST3 is working for you.\n. Thanks for this.\n. Merged via https://github.com/facelessuser/BracketHighlighter/commit/4c39c6b696539d40234e3692d44a6ec1f6ef9803.\n. Thanks again.  Sorry it took so long.\n. This is not a bug.  Please see info about search threshold.  I personally use a value of about 10000, you can pick what works best for you.  Allowing no limit can lead to performance issues in very large files.\n. Without more specific information on what package you are using all I can do is reference you back to the issues you cited.  I would need to know a number of things before I can help:\n- What package are you using for JSP and where can I acquire it?\n- What config file did you edit and where did you put it?  People often edit the wrong file, or put the file in weird locations.\n- What changes did you make?  People often don't edit things properly, or break the config file with invalid syntax.\n- Do you see errors in the console?  This can sometimes be a big help as then you might see errors related to the breaking of the config file.\n. I need you to answer the questions I posted. #95 already tells you what you need to do.  For personalized help, I need you to answer those questions.  I can't tell you what you need to do unless I know exactly what JSP package you are using.  I can't tell you what's wrong with your configuration if you don't post your configuration.  I am happy to help if you can give me that info.\n. Please point me to the JSP package you use.\n. I mean where is the repository?  Where do I get the package?\n. I looked in the default packages, and I see this language Java Server Pages (JSP).sublime-syntax, I will assume you are using this.  I am on ST3 3095, so I don't know if it is different for you.\n. If this were a pull request, you would modify the angle rule directly in default settings file, but I will show you how to override the angle rule in your User config locally.  See documentation for more info.\nThe documentation above states that you use the syntax file name.  So if your language is called My Language.tmLanguage or My Language.sublime-syntax, you would use the name My Language.\nSo assuming 3095's Java Server Pages (JSP).sublime-syntax, you use as the name Java Server Pages (JSP).\nPackages/User/bh_core.sublime-settings:\njs\n{\n    \"user_brackets\": [\n        // Modified angle with JSP.  I just need the name of the rule I am overriding\n        // and the key or keys I want to override.\n        {\n            \"name\": \"angle\",\n            \"language_list\": [\n                \"HTML\",\n                \"HTML 5\",\n                \"XML\",\n                \"PHP\",\n                \"HTML (Rails)\",\n                \"HTML (Jinja Templates)\",\n                \"HTML (Twig)\",\n                \"HTML+CFML\",\n                \"ColdFusion\",\n                \"ColdFusionCFC\",\n                \"laravel-blade\",\n                \"Handlebars\",\n                \"AngularJS\",\n                \"Java Server Pages (JSP)\"  // <--- My new language\n            ]\n        }\n    ]\n}\nPackages\\User\\bh_tag.sublime-settings:\njs\n{\n    // Remember, the HTML tags are handled by a bh_plugin called `tag`.\n    // Recent versions of BH have moved the tag settings into their own settings file.\n    // Here is where you define what tag mode will be used.\n    \"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"laravel-blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"   // <-- My new HTML tag mode language.\n        ],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\n}\nI tired it out and it works fine.\n. https://packagecontrol.io/packages/PackageResourceViewer allows you to navigate the default packages and see what is inside them.\n. <]> and this |] are effectively the same thing, the only difference is your interpretation of it.  A block cursor and non block cursor are still positioned the same even though they are represented differently.\nYour issue is that you don't want \"outside adjacent\" bracket matching when in a different vim mode.  BH defaults to the left if between two brackets for a consistent and predictable matching.  If you turn off outside adjacent matching in the settings file, you will only match brackets that the cursor is between, which in this case would be [].\n. Why not add this to Vintageous?  It seems it would be better to add it there as you could add the code directly in at toggle state to change the BH setting.\nI would have to intercept the toggle command and change the BH setting.  To be honest, this doesn't even have to be done in BH, you could have your own plugin that intercepts Vintageous toggle mode commands and changes BH's outside adjacent setting.  I personally am not interested in adding this code.\nPersonally, I think non-outside adjacent isn't what you really want.  What about this:\n<[>{}]  Outside adjacent will select the [ bracket; remember BH defaults to the left if it has to make a choice between a bracket on the left or right, but in this case the [ bracket is clearly the one to choose.  Turning off outside adjacent in this case will select nothing as the selection is not inside and between [], but it is on the outside to the left.  And what about this scenario [{}]< >, do you still want the square bracket highlighted?  I would think not based on your reasoning.\nThe truth is, what I think you really want is a special outside adjacent that will default to the right and possibly ignores to the left if it isn't in front of a bracket.  Is this what you really want?  If so, that would be a new and different bracket highlight convention.  Which means a bit of involved work.  Now, since I don't use Vintageous, my motivation for this is already a bit low.  As you are the only requester for this, I am still not sure I have sufficient reason to do this as at this time.  I could maybe add a block cursor mode that does as I described above, but I would need more people to be calling for this first as I would need to devote my free time to add such a feature.\nI would probably still prefer Vintageous or a separate plugin to implement the bracket highlight mode toggle; I have purposely been avoiding adding code that is dependent on other plugins.\n. I'll at least look at how hard a block mode would be. If it isn't too hard, maybe I'll add it.  I did provide some abstraction for bracket selection already, so maybe it isn't as bad as i think.  At least then you could tap into it from vintageous or a separate plugin.\n. @jordwalke Okay, adding block mode wasn't too bad.  Here is a separate experimental branch: https://github.com/facelessuser/BracketHighlighter/tree/block.  Now to get this merged, I do expect you would give it a try and give feedback and note any bugs etc.\nThe following will highlight:\n<[>some text]\n[some< >text]\n[some text<]>\nThe following will not highlight:\n[some text]<>\n<>[some text]\nThe following will yield the shown results:\n| Scenario | Highlights |\n| --- | --- |\n| <[>{}] | [] |\n| [<{>}] | {} |\n| [{<}>] | {} |\n| [{}<]> | [] |\nI have not figured out how this will play with bh_plugins like bracketselect.py, but that will be handled once I play with this more.\nAgain, I am not concerned with how this gets integrated with vintageous or other vim like plugins, but I am providing so it could be integrated in some fashion.  I don't want to add various implementations to support all vim like plugins.  Each one will need to do it themselves, or another third party plugin can integrate the desired vim plugin with BH.\n. Did you look at the new setting? Block_cursor_mode?  Obviously, I tested it before I let you know :wink:.\n. Well minimally tested it :smile:.\n. Cool, finding bugs (if any) and making sure it works well with some of the bh_plugins, is all that is left.  After that, from a BH perspective, I will consider this done.\n. Added block_cursor_selected_only settings to provide a block mode equivalent of match_only_adjacent.  With this set along side block_cursor_mode, highlighting will only occur when the cursor is on top of (or selecting) either the opening or closing bracket.\nhttps://github.com/facelessuser/BracketHighlighter/commit/7785bed7eb84600ffff52906509f78b173e398bc\nStill haven't worked out how this is supposed to operate with bracketselect.py bh_plugin, but that is low priority for me.  Worst case scenario, bracketselect will ignore block mode, or simply disable expanding for block cursor mode.\n. Okay, I decided against using block_cursor_selected_only, we will just use match_only_adjacent for block mode and non-block mode.  Bracketselect should now work fine with block cursor mode; though it should be noted that bracket navigation with bracketselect will ignore block cursor mode as it hinders bracket navigation.\nSo I think I will play with this a little more and then probably add this noting it is an experimental feature.\n. Track progress over at #280.\n. I take pull requests. http://facelessuser.github.io/BracketHighlighter/contributing/#overview.\n. For personal use, user_brackets is the way to go.  For pull requests, you edit the default rule.\nNow the common mistake is people look at the text in the bottom right hand corner of the editor and enter that, but BracketHighlighter uses the actual file name (minus the extension) of the syntax being used.  That is not always the same as the display name.\n. So, the tag highlighting is a bh_plugin attached to the angle bracket rule.  bh_plugins will keep their own settings, so check out bh_tag.sublime-settings.\n. There is no standardize way for packages to have their entires in the menu.  With that said, BH is not the only package that puts things under Packages as I actually followed the trend of others.  The idea was to minimize clutter in the top level menu.  If many packages did what you suggest, the top level menu would  potentially get cluttered fast.\nTo be honest, I don't feel the BH \"tool\" menu items deserve to be at the top level as they are not nearly as useful as a menu item.  I feel they work much better as keybindings or command palette options.  If I hadn't already made them as menu items, moving forward, I would be more likely to not add them as menu items at all.  I just don't want to remove them for the small percentage of people that may have gotten used to them being there; I personally never use them from the menu.\n. > It's just that I frequently find myself navigating to Tools|Packages|BracketHighlighter\n\nespecially for the Match Brackets (ignore threshold)\"\nand I thought that by omitting Packages it would make it easier.\n\nYeah, I get that.  There are number of people that really like using menus; which is why I left them in :).\nYou can just drop menu commands into your own context menu file in your User folder.  You just create a Context.sublime-menu file in your User folder and copy this in it (remove whatever commands from it that you don't want to see):\njs\n[\n    {\n        \"caption\": \"BracketHighlighter\",\n        \"children\":\n        [\n            // Toggle Global Enable\n            {\n                \"caption\": \"BracketHighlighter: Toggle Global Enable\",\n                \"command\": \"bh_toggle_enable\"\n            },\n            { \"caption\": \"-\" },\n            // Search to end of file for bracket\n            {\n                \"caption\": \"Match Brackets (ignore threshold)\",\n                \"command\": \"bh_key\",\n                \"args\": {\"lines\" : true}\n            },\n            // Remove brackets\n            {\n                \"caption\": \"Remove Brackets\",\n                \"command\": \"bh_remove_brackets\"\n            },\n            // Go to left bracket\n            {\n                \"caption\": \"Jump to Left Bracket\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"no_outside_adj\": null,\n                    \"lines\" : true,\n                    \"plugin\":\n                    {\n                        \"type\": [\"__all__\"],\n                        \"command\": \"bh_modules.bracketselect\",\n                        \"args\": {\"select\": \"left\"}\n                    }\n                }\n            },\n            // Go to right bracket\n            {\n                \"caption\": \"Jump to Right Bracket\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"no_outside_adj\": null,\n                    \"lines\" : true,\n                    \"plugin\":\n                    {\n                        \"type\": [\"__all__\"],\n                        \"command\": \"bh_modules.bracketselect\",\n                        \"args\": {\"select\": \"right\"}\n                    }\n                }\n            },\n            // Select text between brackets\n            {\n                \"caption\": \"Select Bracket Content\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"no_outside_adj\": null,\n                    \"lines\" : true,\n                    \"plugin\":\n                    {\n                        \"type\": [\"__all__\"],\n                        \"command\": \"bh_modules.bracketselect\"\n                    }\n                }\n            },\n            // Select text including brackets\n            {\n                \"caption\": \"Select Bracket Content with Brackets\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"no_outside_adj\": null,\n                    \"lines\" : true,\n                    \"plugin\":\n                    {\n                        \"type\": [\"__all__\"],\n                        \"command\": \"bh_modules.bracketselect\",\n                        \"args\": {\"always_include_brackets\": true}\n                    }\n                }\n            },\n            // Fold contents between brackets\n            {\n                \"caption\": \"Fold Bracket Content\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"plugin\": {\n                        \"type\": [\"__all__\"],\n                        \"command\" : \"bh_modules.foldbracket\"\n                    }\n                }\n            },\n            { \"caption\": \"-\" },\n            // Toggle between string and regex escape mode for string brackets\n            {\n                \"caption\": \"Toggle String Bracket Escape Mode\",\n                \"command\": \"bh_toggle_string_escape_mode\"\n            },\n            // Toggle high visibility mode\n            {\n                \"caption\": \"Toggle High Visibility Mode\",\n                \"command\": \"bh_toggle_high_visibility\"\n            },\n            { \"caption\": \"-\" },\n            // Select tag name of HTML/XML tag (both opening name and closing)\n            {\n                \"caption\": \"Select Tag Name (closing and opening)\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"plugin\":\n                    {\n                        \"type\": [\"cfml\", \"html\", \"angle\"],\n                        \"command\": \"bh_modules.tagnameselect\"\n                    }\n                }\n            },\n            // Select the attribute to the right of the cursor (will wrap inside the tag)\n            {\n                \"caption\": \"Select Next Attribute (right)\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"plugin\":\n                    {\n                        \"type\": [\"cfml\", \"html\", \"angle\"],\n                        \"command\": \"bh_modules.tagattrselect\",\n                        \"args\": {\"direction\": \"right\"}\n                    }\n                }\n            },\n            // Select the attribute to the left of the cursor (will wrap inside the tag)\n            {\n                \"caption\": \"Select Next Attribute (left)\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"plugin\":\n                    {\n                        \"type\": [\"cfml\", \"html\", \"angle\"],\n                        \"command\": \"bh_modules.tagattrselect\",\n                        \"args\": {\"direction\": \"left\"}\n                    }\n                }\n            },\n            { \"caption\": \"-\" },\n            // Convert single quote string to double quoted string and vice versa\n            // Will handle escaping or unescaping quotes within the string\n            {\n                \"caption\": \"Swap Quotes\",\n                \"command\": \"bh_key\",\n                \"args\":\n                {\n                    \"lines\" : true,\n                    \"plugin\":\n                    {\n                        \"type\": [\"single_quote\", \"double_quote\", \"py_single_quote\", \"py_double_quote\"],\n                        \"command\": \"bh_modules.swapquotes\"\n                    }\n                }\n            },\n            // Swap brackets\n            {\n                \"caption\": \"Swap Brackets\",\n                \"command\": \"swap_brackets\"\n            },\n            // Surround selection with brackets from quick panel\n            {\n                \"caption\": \"Wrap Selections with Brackets\",\n                \"command\": \"wrap_brackets\"\n            },\n            {\"caption\": \"-\"},\n            {\n                \"caption\": \"Debug Mode\",\n                \"command\": \"bh_debug\"\n            },\n            {\n                \"caption\": \"Filter Rules by Key\",\n                \"command\": \"bh_debug_rule\",\n                \"args\": {\"filter_key\": true}\n            },\n            {\n                \"caption\": \"Show Merged Rules\",\n                \"command\": \"bh_debug_rule\"\n            }\n        ]\n    }\n]\n. Only because the default Context menu has defined an end key can you do this, but remember, I can't promise it will show up after SublimeLinter because that is controlled by the order of plugin load, but it should be in the same group.\nAdd this before the rule;\njs\n[\n    { \"caption\": \"-\", \"id\": \"end\" },  // <-- **ADD THIS**\n    {\n        \"caption\": \"BracketHighlighter\",\n        \"children\":\n        [\n            // Toggle Global Enable\n            {\n                \"caption\": \"BracketHighlighter: Toggle Global Enable\",\n                \"command\": \"bh_toggle_enable\"\n            },\n            { \"caption\": \"-\" },\n            // Search to end of file for bracket\n            {\n                \"caption\": \"Match Brackets (ignore threshold)\",\n                \"command\": \"bh_key\",\n                \"args\": {\"lines\" : true}\n            },\n. No problem :).\n. See here https://github.com/facelessuser/BracketHighlighter/issues/278#issuecomment-149745836.  You will need to add blade to the bh_tag settings as well.\n. I'm most likely still waiting on a pull request from the community.  People have found their answer, but no one has bothered to issue a pull request to help out others.\n. Let me clarify.  I don't know if you are using the same blade syntax highlighters as mentioned earlier in this thread or in duplicate issues.  If you need further support you are going to have to point me at the blade package you are using and pay your actual settings.  It could be your highlighter is different and needs a new entry in your settings.  Or your settings could be corrupt.  I just don't have enough info in your post.\n. I leave language support up to the community.  Language changes should be made via pull requests.  If updating, make sure you don't break existing support.\n. If you are using bracket highlighter, you probably want to disable Sublime's default highlighter.  What you are seeing is bracket highlighters highlighting AND sublimes.  I would pick one or the other.\n. It's because of this http://facelessuser.github.io/BracketHighlighter/extended-regex/.  I need to revisit and test out the search backrefs more; looks like I simply didn't test them well enough.  You can get around it in the mean time by doing (\\\\\\\\\\\\\\\\l).\n. Okay, I understand why you are getting the odd results, it will take me a couple of days before I can even sit down to fix this.\nJust be aware that you will run into this issue with l, L, c, C.  In some scenarios you may also see this with p and P.\n. oh and Q and E. \n. Actually had a little time and it wasn't that bad.  My unittests for backrefs was incorrect which in turned caused some bad logic to be added.  I should have a fix posted here soon.\n. Should be in new release https://github.com/facelessuser/BracketHighlighter/releases/tag/st3-2.10.0.  A release was well over due.\n. With so little info from you I have no idea what you've done or what you haven't.  You would need to post your personal bh_core.sublime-settings, your Preferences.sublime-settings (so I can verify you are using the color scheme you say you are using), and your color scheme.  It sounds like you have at least read of the docs some, so that is good.\nOS should not matter.\nIf you can provide more info that would be great.  Make sure to also look in your console to see if there are errors; people sometimes mess up there settings files so things aren't getting parsed right.\n. Please read http://facelessuser.github.io/BracketHighlighter/customize/#my-personal-configurations and note my theme and my settings.  Your settings file must point to colored scores in your theme.  I provide mind as an example.  You can try out my setup, and use that as a guide.\n. I am assuming you got your answer?\n. I don't know which ones support colors.  The color scopes in my example.  They don't tell me anything.  I know mine do, but since I use different colors for each bracket, you have to modify your settings file to use theme.  If you want it to work with your current color scheme, you just need to point the settings at scopes that exist in your scheme instead of what I show in the example.\n. Tell you what.  Just do it the old way as it talks about in the settings:\njs\n        \"default\": {\n            \"icon\": \"dot\",\n            // BH1's original default color for reference\n            // \"color\": \"entity.name.class\",\n            \"color\": \"brackethighlighter.default\",\n            \"style\": \"underline\"\n        },\nJust change \"color\": \"brackethighlighter.default\" to \"color\": \"entity.name.class\" and it will pick up whatever color in you scheme that is assigned to entity.name.class.  Or change it to something else like comment or string.  You don't have to individually configure them; I do, but if you just tweak the default only, all brackets will use the default color.\n. I am closing this as everything works.  I feel things are documented, and multiple suggestions have been given here.\n. Have you tried things with just BH?  I am also not sure what other plugins you are using with BH.  Your threshold is pretty small too, so you aren't being aggressive.\nIs this also a new problem you are seeing?  Like how long have you experienced these issues?\n. Try a portable version maybe.  I'll take a look and see what has been introduced and such, but with such a vague problem description, I can't promise anything.  It would be nice if you could isolate a test case that I can reproduce; without one, unless I start experiencing it, there may be nothing I can do.\n. You can also try manually rolling back to a previous release and see if one of them improves things.  If performance is only sometimes poor, then knowing something like it goes down the longer it runs would be helpful.  I doubt it's leaking memory, but any context would be nice.\n. Oh, and post your plugin list.\n. Maybe roll back to https://github.com/facelessuser/BracketHighlighter/releases/tag/st3-2.7.1 and see if that helps.  Only one major change was introduced after that release.  If that doesn't help, you might be targeting the wrong plugin.\n. It's sounding less like BH with every post :smile:.\n. I'll leave this open for a bit to see if more people comment.  I am not experiencing your issue, and I leave my editor open for days.  There is little hard evidence at this point that BH has any real part in this issue, but I will wait to see if more people come to complain about BH's performance.\n. I'm still not seeing performance issues, and I haven't heard of others having performance issues.  I am going to close this for now.\n. I would much prefer this to be moved into the docs https://github.com/facelessuser/BracketHighlighter/blob/master/docs/usage.md.\nThe readme is really just for a quick rundown of the package, I prefer all the details in the docs.\n. Can you update it to style the text?  Then it should be good.\n```js\n\"match_brackets\": false // disable default ST bracket highlighting\n```\n. Looks good, thanks!\n. > Hello I am new to Github, so perhaps I am making a mistake. However when following the installation instructions I finish installing the package control and then open the list of installable plugins, but am unable to locate the bracket high lighter.\nIt's BracketHighlighter, and it is there.  Do you see other packages?  Did you restart after installing Package Control?\n\nWhen that didn't work I dragged the unzipped installation files into the packages folder and then was able to find something on the plugins list, but none of them were obvious choices.\n\nI would use Package Control as you are going to probably install more packages and want to keep them up to date.\n. Feel free to ask more questions if you are still confused, but I suspect you are just having issues with using Package Control as PC is the most common way BracketHighlighter is installed.  Restarting Sublime will most likely get you were you need to be unless PC didn't instal correctly (in that case I would reinstall PC).\n. > Edit: I just saw that you used plugin_library and bh_modules.phpkeywords. Should I do this as a plugin too?\nProbably.  I am not entirely sure what you mean about repeat and until (I don't code in Lua).  But looking at the rule, it looks like you have two types of closings which I assume means that some openings pair with one and some pair with the other.  If this is the case, then you probably need a compare event where you can ensure the right opening are paired with the right closing (also ensuring case sensitivity can be done there as well).\n. > Followup question: Is there anything for handling the middle parts of an if .. elseif .. else .. end block? Referring to elseif and else here. You certainly don't seem to handle them for php or ruby, which are one of the few cases where this would be an issue.\nNo, BH matches brackets or end caps: start and end.  We apply it to if blocks because it works well enough, but obviously if blocks aren't simple brackets.\n\nFollowup bug: When specifying a plugin_library that does not exist, the following is printed to the console: BracketHighlighter: 'tuple' object has no attribute 'splitlines'. It's kind of ... intransparent.\n\nFair enough.  I always put in the correct plugin, so I never really knew what it spit out.\n\nFollowup suggestion: extend BracketRegion class to have a text attribute, since bfr[first.begin:first.end] is a really common expression in plugins. Downside is that you kind of hard-code something view-specific.\nOr better rename it to Bracket and include the bfr view context to it because when will you ever use this on a different object than bfr?\n\nI agree it could be improved.  It isn't something that people dive into too much, so the motivation to enrich the experience was low, but I can make a note an improve it when I get some time.\n\nYour description of find_in_sub_search is borked:\n\nProbably not the only thing that is borked.\n\nI think you should mention the case-insensitivity earlier than here.\n\nYeah, probably.\n\nThe \"validate\" code is outdated, but still valid.\n\nYeah, maintaining docs is my weakness.\n\nSuggestion: Allow multiple plugins to be specified, and rename erlangcase.py to just lowercase.py. That way I could utilize the lowercase check for Lua too without awkwardly including it via from .erlangcase import validate (not gonna do that actually).\n\nYou can actually import other modules into other modules either using import_from or import_module  I guess you could chain the calls together.  I wonder if I documented that...I'll have to look that up.  \npython\nfrom BracketHighlighter.bh_plugin import ImportModule as ImpMod\nBracketRemove = ImpMod.import_from(\"bh_modules.bracketremove\", \"BracketRemove\")\nI should probably create a lowercase.py and import it into others as an example.  I guess I would prefer that than looping multiple modules in the API.\n\nAlternative suggestion: param for case-sensitive matching of brackets.\n\nI think just importing the common module and chaining them should be enough.\n\nI can open separate issues if you want me to.\n\nI say read through my responses, and anything without a suitable answer, just open a new issue.  Separate issues is easier for me to track.\nThanks for all the input and the request!\n. > re importing: The name erlangcase.py just threw me off, kind of. It screams \"I am context-sensitive\" to me, so importing it just for the case-sensitivity seemed too insecure to me. I'm fine with importing from something named lowercase.py.\nYeah, renaming is what I need to do.  I agree.\n\nI don't really see an advantage for using bh_plugin.ImportModule over just relative importing what I need.\n\nbh_modules are not in the system path, that's why it exists.  You are free to just import if you want, but you won't get what you need.  I won't go into all the details, but currently it is a necessity, but basically, I don't won't Sublime auto loading them, so I load and unload as needed.\n. > Edit: I suppose the copyright notice I copy-pasted is ... wrong. You obviously can't have copyright on that starting 2013 if it was only added in 2015. I'm not a fan of per-file license/copyright plates anyway, if they are identical to the project's.\nYeah, I'll clean that up some time.  It's more project wide just copied in every file.  But then that requires maintenance.  Really it should just be more generic header stating license and and author, and the project license should detail dates etc.  Don't worry about.  I'll fix it.\n. > place the cursor(=click) to the right of the bracket in line 203 (the bracket is highlighted and a ? appears in the gutter). Now, pressing Ctrl+Win+Alt+B(\"Match brackets(ignore threshold\") shows that it's left bracket is in line 18. \n\nAlso, placing the cursor to the left of that bracket and pressing Match brackets(ignore threshold), shows line 18 again, as expected.\n1. There is no line 203 in the example code you pointed me at.  Maybe I am confused, but the there were only 172 lines in that snippet.\n2. Anyways, as for getting the ? and then not getting the ? when ignoring the threshold should be clear.  BH uses a search threshold.  It will only search so far before giving up to on auto matches.  Since auto matches are performed quite frequently on selections, and edits, we don't want to do excessive searching for performance reasons.  If you want to increase your threshold in the settings file, feel free to find a value that works best for your performance and distance for you.\n3. As your snippet didn't have line 203, I can't comment further on your other points.\n. > Now, place the cursor to the right of the bracket in line 203 again and press Ctrl+Win+Alt+Up:\nit doesn't go to the end of line 18, as expected - instead it does nothing.\nNow, place the cursor to the left of the bracket in line 203 and press Ctrl+Win+Alt+Up:\nnow it works ok (takes you to line 18).\nAlso, placing the cursor to the right of the bracket in line 202 and press Ctrl+Win+Alt+Up,\ntakes you to line 18 (instead of line 192).\nPlacing the cursor to the left works ok.\n\nThis is actually expected.  Let me explain:\nBH deals with one bracket pair during a command, it is not aware of parents, but it has the ability to to jump up through the parents if you keep pressing Ctrl+Win+Alt+Up....so why is that?  Well because when doing jump mode, if you are outside of a bracket, it turns off outside adjacent matching even if you have it enabled so that it will find the parents and not the adjacent.\nIf you don't like this behavior change this setting http://facelessuser.github.io/BracketHighlighter/customize/#ignore_outside_adjacent_in_plugin.  But then you won't be able to jump to the parent.  This is a current limitations in BHs algorithm.  I want it to be fast, so it concerns itself with the least number of matching brackets (1).  It doesn't care about the parents, because matching the parents takes more time.\n. Because of course ruby allows keywords in hash keys :frowning:.\nDon't worry about the travis failures.  flake8_docstrings changes some crap again.  I'll take care of that.\n. Seems to look okay.  I will try it out locally and if all checks out, I will merge it.\n. You should use package control as BH now relies on Package Control dependencies to get backrefs.  This is so I can update backrefs in one place and all plugins that rely on it can get the update.  This means less work for me.\n. FYI, I would install Package Control, restart, and then run \"Satisfy Dependencies\".  Restart may be needed after dependencies install.\n. I hope it works out for you.  I was really just trying to make things easier on myself.  I hadn't considered that it may adversely certain people.\nIf you are really having trouble, I think we can come up with something to get it going.  The backrefs dependency is here.  You just have to get it to add the st3 folder to the system path before BH gets loaded so it can find the backrefs module.  This can probably be done with a very simple plugin.  If this is the way you need to go, let me know and maybe I can help out.\n. Thanks for the details.  I am really not sure the number of people not using Package Control.  I imagine it is a very small percentage, but it is good to at least have this info for those people.\n. For those who want to install BH without package control, here are the steps.  I will put this in the official docs when I get a chance.\n\nDownload the latest releases of the following dependencies and unpack in the Packages folder as shown below:\n- https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe\n- https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2\n- https://github.com/packagecontrol/pygments -> pygments\n- https://github.com/facelessuser/sublime-markdown-popups -> mdpopups\n- https://github.com/facelessuser/sublime-markdown -> python-markdown\n- https://github.com/facelessuser/sublime-backrefs -> backrefs\nGet the latest BracketHighlighter release and unpack as BracketHighlighter:\n- https://github.com/facelessuser/BracketHighlighter -> BracketHighlighter\nCreate a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py:\nCopy the following code to 00-dependencies.py (this code was taken from Package Control):\n``` python\nimport sys\nimport os\nfrom os.path import dirname\nif os.name == 'nt':\n    from ctypes import windll, create_unicode_buffer\nimport sublime\nif sys.version_info >= (3,):\n    def decode(path):\n        return path\ndef encode(path):\n    return path\n\nif os.path.basename(__file__) == 'sys_path.py':\n    pc_package_path = dirname(dirname(__file__))\n# When loaded as a .sublime-package file, the filename ends up being\n# Package Control.sublime-package/Package Control.package_control.sys_path\nelse:\n    pc_package_path = dirname(__file__)\nst_version = u'3'\n\nelse:\n    def decode(path):\n        if not isinstance(path, unicode):\n            path = path.decode(sys.getfilesystemencoding())\n        return path\ndef encode(path):\n    if isinstance(path, unicode):\n        path = path.encode(sys.getfilesystemencoding())\n    return path\n\npc_package_path = decode(os.getcwd())\nst_version = u'2'\n\nst_dir = dirname(dirname(pc_package_path))\ndef add(path, first=False):\n    \"\"\"\n    Adds an entry to the beginning of sys.path, working around the fact that\n    Python 2.6 can't import from non-ASCII paths on Windows.\n:param path:\n    A unicode string of a folder, zip file or sublime-package file to\n    add to the path\n\n:param first:\n    If the path should be added at the beginning\n\"\"\"\n\nif os.name == 'nt':\n    # Work around unicode path import issue on Windows with Python 2.6\n    buf = create_unicode_buffer(512)\n    if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n        path = buf.value\n\nenc_path = encode(path)\n\nif os.path.exists(enc_path):\n    if first:\n        try:\n            sys.path.remove(enc_path)\n        except (ValueError):\n            pass\n        sys.path.insert(0, enc_path)\n    elif enc_path not in sys.path:\n        sys.path.append(enc_path)\n\ndef remove(path):\n    \"\"\"\n    Removes a path from sys.path if it is present\n:param path:\n    A unicode string of a folder, zip file or sublime-package file\n\"\"\"\n\ntry:\n    sys.path.remove(encode(path))\nexcept (ValueError):\n    pass\n\nif os.name == 'nt':\n    buf = create_unicode_buffer(512)\n    if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n        path = buf.value\n    try:\n        sys.path.remove(encode(path))\n    except (ValueError):\n        pass\n\ndef generate_dependency_paths(name):\n    \"\"\"\n    Accepts a dependency name and generates a dict containing the three standard\n    import paths that are valid for the current machine.\n:param name:\n    A unicode string name of the dependency\n\n:return:\n    A dict with the following keys:\n     - 'ver'\n     - 'plat'\n     - 'arch'\n\"\"\"\n\npackages_dir = os.path.join(st_dir, u'Packages')\ndependency_dir = os.path.join(packages_dir, name)\n\nver = u'st%s' % st_version\nplat = sublime.platform()\narch = sublime.arch()\n\nreturn {\n    'all': os.path.join(dependency_dir, 'all'),\n    'ver': os.path.join(dependency_dir, ver),\n    'plat': os.path.join(dependency_dir, u'%s_%s' % (ver, plat)),\n    'arch': os.path.join(dependency_dir, u'%s_%s_%s' % (ver, plat, arch))\n}\n\ndef add_dependency(name, first=False):\n    \"\"\"\n    Accepts a dependency name and automatically adds the appropriate path\n    to sys.path, if the dependency has a path for the current platform and\n    architecture.\n:param name:\n    A unicode string name of the dependency\n\n:param first:\n    If the path should be added to the beginning of the list\n\"\"\"\n\ndep_paths = generate_dependency_paths(name)\n\nfor path in dep_paths.values():\n    if os.path.exists(encode(path)):\n        add(path, first=first)\n\nadd_dependency('pygments')\nadd_dependency('backrefs')\nadd_dependency('markupsafe')\nadd_dependency('python-markdown')\nadd_dependency('python-jinja2')\nadd_dependency('mdpopups')\n```\nRestart and enjoy.\n\nYou will have to keep all the packages updated yourself.\n. You will need to read this: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.\nParticularly where you configure the gutter icon.  If you want a command that toggles the gutter, you may need to write your own command to automate the change.\n. Yes, because BH's swap quotes feature is scope based because BH quote detection is scope based.  It works in languages that support both quote types.  JSON syntax highlighter only supports double quotes because the JSON syntax only supports double quotes.\nSwitch your syntax to JavaScript and you will see that swapping works fine as JavaScript scopes both single quote and double quote as strings.  It is just a limitation of BH.  The bh_plugins can only work with brackets that BH actually identifies, and BH currently only identifies quotes when scoped as string.\n. Finding quotes well requires either context or for you to parse the file from the beginning.  I won't go into the details,  but since BH tries to do the least amount of searching,  it uses scope for context. \n. I'll just leave these right here:\n- http://facelessuser.github.io/BracketHighlighter/customize/#content_highlight_bar\n- http://facelessuser.github.io/BracketHighlighter/customize/#align_content_highlight_bar\n. You provided no details.   And please search issues as this has been answered before: recently even https://github.com/facelessuser/BracketHighlighter/issues/295.\n. Thanks!\n. This is a fairly common question that I have answered many times.  A search in the issues will bring up the answer:\nhttps://github.com/facelessuser/BracketHighlighter/issues/181#issuecomment-49748985\nI would advise you read the documentation or even read the info provided in the settings file.\nIn short there is a search threshold that is fairly conservative out of the box that can be adjusted; this is there by design for performance.  There is also an on demand match command in the palette for times when you really want to match without the threshold.\n. Yeah, I am sure it is because of the syntax used in the upper example.  I don't use Ruby and a number of \"supported\" syntaxes used in BracketHighlighter, so I don't know all the nuances of different languages.  I really don't have the time to dig into every language that people want supported.  For this reason, language rules are supported by the community as noted in the documentation http://facelessuser.github.io/BracketHighlighter/contributing/#overview.  Feel free to create a pull request to address the Ruby issue.  Keep in mind though, that I am available to answer general questions you may have if you are struggling with modifying the bracket rules.\n. Looks fine to me.  Thanks!\n. Thanks! \n. This is a frequently asked question: see here.\n. Can you give more details as I have never seen this issue.  The object in question gets initialized at plugin load and shouldn't ever not have that attribute. \nWas this introduced in the latest Sublime release?   What operating system is this on? \n. Hmm.  I haven't updated yet,  but this kind of sounds like a new Sublime bug.  Events shouldn't get called before plugins finish loading. \nI will test it out or when I get a chance,  but if it is what I think it is,  it may be something that needs to get fixed in Sublime. \n. I am not sure if there is possibly a problem occurring earlier with your BH install that later causes the failure.  To be safe, maybe run the Package Control commands \"Upgrade Package\" and select BracketHighlighter (if shown) and run \"Satisfy Dependencies\" and restart ST.  Package Control for some reason does not seem to upgrade dependencies all the time when the main package is upgraded.\nThe fact that this persists on 3083 is odd.  I use Sublime Text 3095 on OSX and have not yet seen the issue and I have been using both for quite a while.  I actually develop most of my plugins on OSX and they are usually very well tested on those platforms.  It may be be an issue where you need to revert: https://www.sublimetext.com/docs/3/revert.html.\nIt may also be possible another plugin is somehow interfering with BracketHighlighter?\nSadly I am just not seeing these issues.\n. > proposed solution: add a .no-sublime-package file.\nI'll be honest, I doubt this is the problem.  The uninitialized object in question is contained within the same file that uses it.  The file will have to be loaded completely in memory before Python would even  process and execute it.  Unpacking is not the problem.  You could maybe argue that if it was a dependency that wasn't unpacked yet, but that isn't the case here, and I have a lot of experience with the Sublime packages and I can assure you that .no-sublime-package is only needed if you have something that just can't be easily accessed with the API in packaged or run from the zip.\nFurther, I think your issue is specific to your machine.  I imagine I would be have had a complaint long before now if zipping where the problem.  BH has been zipped for a long time under ST3 with no complaints.\nAssuming the debug statement actually fixes the issue for you, I would be more inclined to think it is a timing issue then a packing issue.  But even then, I don't think that is the problem as we assign the thread object on the main thread.  We are also not using asynchronous events in the API.  Further, plugin_loaded must complete before we start events.  This is from the sublime plugin api:\n``` python\ndef on_api_ready():\n    global api_ready\n    api_ready = True\nfor m in list(sys.modules.values()):\n    if \"plugin_loaded\" in m.__dict__:\n        try:\n            m.plugin_loaded()\n        except:\n            traceback.print_exc()\n\n# Synthesize an on_activated call\nw = sublime.active_window()\nif w:\n    view_id = sublime_api.window_active_view(w.window_id)\n    if view_id != 0:\n        try:\n            on_activated(view_id)\n        except:\n            traceback.print_exc()\n\n```\nIt really seems like there is something wrong with your specific setup.\n. Now, maybe I don't see this because I am always using a dev version that is unpacked, but again, I would have expected an issue by now.  I will try running on OSX for a week with the zipped version and see if I can reproduce, that is really all I can do at this point.  If I can't reproduce it, I can't fix it.  It is possible that there may be an additional plugin on your systems that is causing an unintended side effect, but since I don't know what else your running with, it is hard for me to know.\nSo let me run with BH zipped for a week or so and I will see if I can reproduce this issue.\n. I have not been able to reproduce this under any circumstance.  If you are able to narrow it down to something more specific, I may be able to address it, but I have restarted over and over with a zipped version of BH on Windows and OSX and cannot make it crash.  There must be some other kind of criteria or plugin or something that is causing it to crash on your system.  While, for whatever reason, adding an extra a print line may \"seem\" to fix the problem, I cannot justify inserting a random print statement without hard evidence of it actually fixing a problem.  Right now I cannot even confirm there is a problem.\nInserting a print statement that fixes things would make me believe there is a timing issue, but that doesn't make sense in the context of the given function in question.  I personally believe there is some other common thread on all your machines that is causing the issue, but I am not convinced yet BH is to blame.  I feel the print statement may be masking the real problem, but I have no evidence yet to suggest BH is to blame.  As I cannot reproduce this issue in any way, I can only assume this is not a BH issue.  I am very much against inserting random unexplained code without any clear understanding of how or what it is even fixing.  If down the road we are able to understand and identify a problem, then I have no problem addressing the problem with a clear understandable fix.\nSorry I cannot be of more assistance.\n. Latest update of Sublime or BH?  I don't think I added any fixes to this really.  I just added or improved specific language support.  Well, maybe getting a new version cleared out a corrupted cache, who knows.  Glad it's working though.\n. > When you click the sublime text icon to open it, when a view shows, you instantly tap \"cmd + `\" to show the console, then with large probability you will see this error:\nI just don't find this to be the case.  When developing, I often have to close down Sublime and reopen and check the console right away.  Though I haven't done this with with a just a zipped version of BH.    I can give it a try later tonight, but again, if I can't reproduce it, then I don't know what to say.  This sounds like more of an issue with how Sublime may load packages, but like I said, I will at least attempt to reproduce.\n. Without more info or examples, I am afraid I cannot offer assistance.  Please be more specific with examples.  As I personally use a bh_core.sublime-settings in my own setup, I can confirm that it does work.\nIf you haven't already, I would take a look at the documentation as it may answer your questions: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets.\n. I will give this issue another week for you to give more details then I will have to close it if I don't hear anything. \n. So, what are you expecting?  I think this is a case of misunderstanding what the settings do.\n. You need to read the documentation; specifically http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.\nYou are trying to change the high visibility look, but you don't have high visibility enabled.  That is why you see no change.  Please follow the link and read the documentation about changing the highlight style.\n. I don't understand what you are requesting.   Can you elaborate? \n. I will leave this issue open for another week, and if there is no response, I will just close it.\n. Okay, I at least understand now.  This gets more complicated with multi-cursors.  And what to do if both brackets are off screen (sublime I think will only allow one tooltip).\nThe tooltip API is a little limited, but I think it is possible.  I personally think this would get in my way.  I might be okay with it if it were on demand.\nI'm not going to promise anything, but I won't quickly dismiss it either.  Let me think about it, possibly play with some ideas.  Worse case scenario, I will pass, but maybe something will come out of this.\n. This may actually be possible now with Sublime's new hover event.\nThe plan is to allow a popup to show on mouseover of the shown bracket if the other matched bracket is off the screen.  There will also be a link to jump to the offscreen bracket in the popup.\nThis is experimental and is not guaranteed to make it in or remain.  But I think I may code something up under a setting (disabled by default) and let people try it out and see if it is worth keeping.\n. The experimental feature is now in st3-2.18.0 release.  You will have to enable it in you settings file and you have to be on ST3 dev build 3116+ (recommend 3117).\nI will consider this closed, but feel free to give feedback on the feature.  Whether it sticks around as a permanent feature will depend on how it is received.\n. @alexanderadam, this is covered in the documentation: http://facelessuser.github.io/BracketHighlighter/usage/#find-matching-offscreen-brackets.. Example code  snippet I can test,  or is all that is needed is a file with that one line? \n. Oh, also tell me what XML package you are using.\n. Also, OS?\n. I'll see if I can reproduce.\n. Are dots even allowed in the attributes in the XML spec?  I know my syntax highlighter isn't allowing them?\nI am experiencing a hang which needs to be addressed, but I am not even sure if dots in the attribute name are formally allowed (obviously this may differ depending the parser, but I am talking officially).  I haven't been able to locate yet the exact spec on this yet.\n. In any case, it looks like the tag detection regex isn't efficient enough.  I will at least look into a regex that is better in these non-ideal cases.\n. I am afraid that the current design of BH will not allow such a feature.  BH focuses on one pair and one pair only to accomplish its different tasks.  At the present, I do not have a desire to rewrite the framework.  I appreciate the suggestion, but at this time, I will have to decline.\n. I'm not sure how I feel about modifying the default HTML tag to accept invalid HTML.  I kind of feel this should be a separate regex.\nDo you use a separate syntax highlighter for polymer?\n. I will think about it.  I'm not too concerned with what Polymer users expect; I don't want to pollute normal tag detection if I can help it.  I imagine the $= will break current HTML syntax highlighting to some degree.  Do polymer files use a different file extension than HTML?\n. Thanks for the info.  I guess that means there will be no easy way to distinguish polymer from HTML.  Hmm...this might be the only reasonable way then...\n. The plan moving forward is to expose the tag regex so people can modify it in their settings file.  This way I can ship with something more standard, but allow people to modify it for less standard HTML moving forward.  I've started the work here https://github.com/facelessuser/BracketHighlighter/commit/a7cc1e2a17bc854bd4a86af4233c38e3aa69e3c7.\n. The next version of BH will allow you to change a tag_mode's settings locally to support non-standard HTML like polymer.  You can even add new tag_modes if desired to keep your non-standard HTML tag modes separate. https://github.com/facelessuser/BracketHighlighter/blob/master/bh_tag.sublime-settings.  \nThis will allow you to have your desired functionality moving forward by updating your user bh_tag.sublime-settings file.  I've done it this way so anyone can come in add support for whatever HTML variant they need, and if I choose to not accept the pull request, they will still be able to just modify their user setting and have what they want regardless.\nThough I still need to do documentation, I will consider this issue closed.  I will hopefully have a new release within the week.\n. Hey, glad your interested in BracketHighlighter.  Because I am so busy, I mainly only work on issues in the core framework of BracketHighlighter.  Syntax support is supported by the community via pull requests as stated in the documentation: http://facelessuser.github.io/BracketHighlighter/contributing/#overview.\nI'd be happy to merge a pull requests.  If I am not mistaken, you should already have {}, [], and () support in C Improved.  What support exactly are you hoping to be added in C Improved?\n. As a very busy man as well, I understand.  If you run into issues, I don't mind providing guidance or advice when you get around to working on it.\n. Did you put this in Preferences.sublime-settings?  If so, that is a big misunderstanding.  If you read the documentation it mentions that the settings file is bh_core.sublime-settings: http://facelessuser.github.io/BracketHighlighter/customize/#core-settings.\nYou need to create a bh_core.sublime-settings file in your User folder and override the settings in that file.  Please read the documentation for more info.\n. Glad you got it figured out.\n. As stated in the docs, support for bracket rules is provided by the community (unless it is in a language I specifically use).  Pull requests are welcome.  I don't mind offering guidance or suggestions if you get stuck while trying to implement the rule for a pull request.  Feel free to ask questions.\n. I will go ahead and close this in anticipation of a pull request.  Again, if you decide to tackle the pull request and have questions, please feel free to ask.  I am willing to help, I just don't have time to familiarize myself with all the nuances of different languages that I don't use.\n. I will have to check if this is currently possible by tweaking settings.  I can't remember as I have had people request various different bracket jumping behavior (some possible in the current architecture, some not).\nI see nothing impossible with your request.  I will probably leave the current behavior as is by default.\nIf it is not currently possible with current selection bh_plugin, you may need to create a custom bh_plugin for your own purposes.  As I am pretty busy right now, my best suggestion is to create a bh_plugin based off the original selection bh_plugin: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/bracketselect.py. Place that in a folder in User\\bh_modules.  You can modify your custom bh_plugin to suite your own purposes and just change all your shortcut commands to use your new plugin instead.\nFor more info on bh_plugins see: http://facelessuser.github.io/BracketHighlighter/customize/#bracket-plugin-api.  Also see http://facelessuser.github.io/BracketHighlighter/customize/#run-instance-plugins to see how to change your command to support your plugin.\nWhen I get a little time, I will let you know whether there is already an existing way to achieve what you desire, if not, you will probably need to create a specialized bh_plugin.\n. Let me think about it.  I always knew it could be added, but that plugin is getting pretty complicated with all the different bracket jump options.  I think I almost prefer separate bh_plugins to handle different bracket jump styles.\nThanks for posting your work though to help others out.  Let me consider the direction I want to take and then I will get back to you.\n. Sorry it's taken me forever to get back to this.  I think I am going to leave things as is for now.  Since BH is flexible enough to support the current implementation and allow you to easily override it with your own stuff, I think I will pass on this feature for now since even if I included it, I wouldn't have BH use it by default.\nIf I get more requests for this, I will gladly include JumpOutRight so it is an available option, but users would still need to configure their commands in there user files as I would not have the commands use it by default.\nThanks for posting the example for others.\n. Thanks!  I will take a look at this soon and try and get it in.\n. I will assume that you tested this well enough.\n. As I recall, each region name is different as the icons are different for not only different bracket types/name, but for opening, closing, and even lines where the opening and closing are on the same line.  So each bracket variant has its own region name so they can exist simultaneously (multi-cursor etc.).\nIn the future, I would probably like to namespace them brackethighlighter.name.type etc., but currently, they follow the pattern bh_name_type (just replace type with close or open or whatever other type I use).  The code is found here: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_regions.py#L487.  So theoretically more names could always be added. Now I would have to dig a little deeper to be able to tell you how I determine name in the above examples, but it is likely that it is derived from the bracket style settings (name of each defined style entry https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L465).\nI don't know if any of that helps, but hopefully :).\n. Yep, I just checked, the names are derived from the bracket style rules.  It's an area of code I haven't bothered to look at in a while.  It's funny how quickly you can forget things that you create.\n. I guess I am not sure what you mean.  I'm not exactly sure how Sublime determines priority for gutter icons, but it was my understanding that this isn't really something that can be controlled.  What exactly did you do with those region names?\n. Well, this is of course assuming that BH has rendered it's icon before GitGutter checks.  It is possible that GitGutter is checking before BH renders.\n. > Sometimes I write error messages with a sad emoticon\n\n\"Sorry, this does not look good :(\"\n\nThis is because BH is always going to have a difficult time with plain text as plain text isn't structured like code is.  For instance, plain text is usually confined to either comments and strings in code which allows BH to simply ignore those scopes. Not so with plain text documents.  You are free to modify/override the bracket rules with more complex regex to try and avoid such things in your LaTeX/Markdown/whatever files.  I would simply exclude your file's source scope from the default round bracket rule and maybe add a new bracket rule specifically for the language(s) of interest provided a regex that maybe has a lookback or something similar to exclude emoji like characters that come before or after ) or (.\n\nor use literates in LaTeX (recently supported)\n{(} { {\\textbf{(}} }1\n\nThis statement illustrates that you are more knowledgeable about LaTeX than I am.  For this reason, bracket rules are supported by the community: http://facelessuser.github.io/BracketHighlighter/contributing/#overview.  I simply don't have the time to learn the nuances of everyone's favorite languages.   I usually add modify rules of languages I use, but leave all other languages up to the community to support.\nI provide the framework and documentation, and the community adds the rules they are interested in.  Keep in mind, I am willing to give ideas, advice, guidance to help about, but I leave it to the community to issue pull requests.  So if you run into problems trying to put together a pull request, or aren't exactly how to approach a certain bracket issue, feel free to ask questions.\n. As syntax specific changes are supported by the community via pull requests, this issue will be closed as I do not plan on personally spending time on it as I don't use LaTeX.\n. > Maybe label it and store it away as a to-do or something?\nBut that is the point, it isn't something I plan on doing.  It is tagged as Pull Request Only.  I could leave it open for someone later to come and see and fix, but I will be honest,  no one comes to the BH issues to look for issues to resolve except me as I am the maintainer (at least I am yet to see anyone).  I don't have a team, so I don't have anyone to assign tasks to outside myself.  So if it isn't an issue that I specifically plan to work on, it usually gets closed as it is just noise for me.\nThe only people who historically create pull requests for BH (or any of my Sublime related repos) are those who have a specific issue and have the motivation to solve it themselves.  So I usually inform the person who creates an issue that they are welcome to create a pull request (if it is something I decide to pass on), and if I don't  see any activity after a while, I assume they have no intention to personally address the issue (which is fine, I understand that people are busy, or maybe creating a fix is too difficult for them).  So I close the issue and await the next person to see if they will be more motivated.  I usually reference any past requests.\nGithub doesn't allow me to set up default filtering rules to hide stuff I don't care about, so leaving issues like this open just creates noise for me that I don't want.  If I am still considering an issue or just don't have the time right now, but plan to address it in the future, I leave it open.  This helps keep my backlog clean of issues that I am not going to touch.\n. @r-stein Thanks for taking the time.  @stdedos I would take a look at r-stein's suggestion, it will definitely solve the round bracket in LaTeX issue for you.  You can probably leave out redefining the language_filter; you only need to define the name and the key you want to override, in this case, language_filter is still the same, so no need to include it (but it won't hurt anything).\n. > In fact, it does not matter what the search threshold is set to, it defaults to the build-in limit and ignores user setting. \nThis is simply not what I see.  The threshold works for me.\n\nCould you help debug this?\n- I don't know what your code looks like or how much content is between your brackets.\n- I don't know if you've configured your settings right or named the settings file proper in your user folder to override the default.\n- There are a lot of things I don't know about your setup right now.\n\nWithout more info, I can't possibly help.  There could be any number of reasons you aren't getting the results you expect: not configuring the settings correctly, misinterpretation of settings, something corrupted in your sublime setup, a bug in the code, etc. I will need very specific examples for me to even begin to assess the issue.  I will say this though, there are times brackets will be very far apart, and auto-matching them on selection would cause too much lag; this is why the threshold exists.  But there is a command palette command BracketHighlighter: Match Brackets (ignore threshold) which will ignore the threshold and match the brackets no matter how long it takes.  It is an on demand command so you can run it only when you need to.\nI think it's a bad idea, but due to requests, I also have the setting \"ignore_threshold\": false.  I will always discourage usage of this, but I added it to appease those who kept requesting such a setting.  If you enable this and have terrible performance in large files, that is on you.\nI would play with the  search_threshold to find a good compromise of functionality  and performance.  This will differ from machine to machine.  If the setting isn't working for you, I would double check that you are overriding it in the proper file name.  Double check the setting name.  Double check the console to make sure you aren't getting an settings error (like if you got the JSON format wrong), etc.\nFor more help, you will have to give me very specific examples that I can reproduce the issue with.\n. > Didn't know about the command palette option. This toggle per case is much better than having a huge threshold all the time. I will start using that when needed instead. \nYeah, that is the way I use it.  It just doesn't make since to push it super far.  I use about 10000 and that works smooth on my computers.  Anytime bracket content exceeds that, I just use the manual option when I need to find the other bracket.\nAnyways, glad you got it working.\n. Based on the error, it would appear you are setting up the macro incorrectly, but you didn't post the macro content so I cannot be sure.  If you would like me to comment on the macro, you will have to post it.\nSecond, the main BH command is a WindowCommand instead of a TextCommand, so I imagine it wouldn't work in macros as it is now.  I believe it is required for the commands that are used in macros to be TextCommands.  Maybe in the future this could be changed.\n. I will look into potentially changing this to use a TextCommand instead of a WindowCommand.  I cannot promise when I will get around to validating such a change, but I will look into and make a decision.\n. Recently I moved BH commands to TextCommands.  Unfortunately it didn't seem to make any difference.  I think Sublime is very limited in what gets tracked in macros.  Sadly, based on what I know at the present, I don't think I can fix this.  If I or someone else brings to my attention more info to help resolve this, I will reopen.\n. I can't tell what the problem is from your description, but BH doesn't auto select text if that is what you are implying.  BH highlights brackets (not select).\nI don't think this is a BH bug.\nJust an aside, screenshots are helpful, but if you want me to try and reproduce a bug, please post code I can copy and paste as well.\n. > Unfortunately I can't really provide you with code due to the nature of the business I work for, the most I can suggest is to use any PHP file that is 500 lines long or more and ensure you are scrolled to the very bottom.\nJust provide me with an example that works.  I don't know, some foobar stuff or whatever.  Then just provide me with step by step instructions so I can replicate your issue.  If you can hunt me down some PHP example from the web works, do that.  I am just asking you to provide me the necessary examples and info so I can replicate it and debug if necessary.\n\nI can't really explain it but I know it's definitely this plugin because I've uninstalled it and it no longer happens.\n\nI am very doubtful that this is BH related, but I am willing to look into it.  Highlighting is a completely different API call than selecting text.  Absolutely no selection commands are invoked during highlight or bracket detection.  A \"window\" of text within the view is copied to a separate buffer and cursor positions are noted (but not altered), and bracket detection is performed within that separate buffer.  Afterwards we just add the highlight regions.  In some cases we reference back to the view to get scopes, but again, this is read only stuff.  If you were using the bracket jump calls, then I would be more likely to believe there was something.\nBut with all that said, if you provide me with the examples, I will confirm.\n. I will leave this open for another week to await a working (or non-working as the case may be) example to reproduce the issue.  I use various languages in some very large files and have never experienced these kinds of issues.  This is why I want to get an exact example that fails for you.  If an example that exhibits the problem for you can be posted here, I will look into it.  But after a weeks time, if no example has been posted, I will consider this issue stale and close it.\nBeing that you are the only one I have ever heard this from, I suspect there is something unique to your system.  It is possible another plugin you are using is interacting badly with BH, but as stated earlier, I am very doubtful that BH is directly to blame.\n. As I haven't received the info I requested, I am closing this issue.\n. Thanks for your work on this!\n. I wonder if a bh_plugin would be needed to help with situations like:\n``test`\nI also wonder if we should apply more liberal rules to fenced blocks as some markdown engines allow for tics greater than 3.  I think some also allow for ~~~ as well.  I'll have to check what the default markdown syntax allows.\n. > To the first point: This is only possible at the begin of inline code blocks?\nI think so.\n. I will probably test out your changes locally as Markdown is a language I use, so my interest in this is greater than with pulls of languages I don't use.  I'll let you know if I find anything in my testing.\nThanks for this pull!\n. I think I am going to merge this my hand with a couple of changes.\n. Sure, instead of adding new scopes, use existing scopes already colorized in your tmTheme file.  You are limited to the scopes and colors already in your tmTheme file.  You can try things like keyword, constant.numeric, etc.\n. Yup.  It's just how Sublime works.  I wish there was a way to do it outside the color scheme file, but there isn't.\n. You will have to write a simple plugin that detects when a file is latex on file activation and then call the BH toggle command when appropriate.\nOr you can modify your personal BH bracket rules to ignore latex.\n. No, I mentioned you can alter the default rules to ignore latex.\n. I won't alter latex by default though, so you would have to do it for your setup.\n. That is one way.  The other is to simply use the rules to do the same like we blacklist Plain Text here: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L133.\nThere are rules that whitelist certain syntaxes and ignore all else, and rules that blacklist certain syntaxes and enable for all else.\nSince you can just override the default settings already, this makes the most sense, but a plugin can laos do the same.\n. Yup.  For instance, LaTeX specific rules could just be disabled, and blacklist rules that aren't already blacklisting LaTeX would just need to have LaTeX (or whatever the name of the LaTeX syntax highlighter you are using) added to the language_list.  So taking a quick look, this might be sufficient:\nNotice, that I use the settings user_brackets and user_scope_brackets, and that I only override the option I want to change:\njs\n    \"user_scope_brackets\": [\n        // Quotes\n        {\n            \"name\": \"single_quote\",\n            \"language_list\": [\"LaTeX\", \"Plain text\", \"Hex\"],\n        },\n        {\n            \"name\": \"double_quote\",\n            \"language_list\": [\"LaTeX\", \"Plain text\", \"Hex\"],\n        },\n        // LaTeX\n        {\n            \"name\": \"latexmath_inline\",\n            \"enabled\": false\n        }\n    ],\n    \"user_brackets\": [\n        // Basic brackets\n        {\n            \"name\": \"curly\",\n            \"language_list\": [\"LaTeX\", \"Plain text\", \"Hex\"],\n        },\n        {\n            \"name\": \"round\",\n            \"language_list\": [\"LaTeX\", \"Plain text\", \"Hex\"],\n        },\n        {\n            \"name\": \"square\",\n            \"language_list\": [\"LaTeX\", \"Plain text\", \"Hex\"],\n        },\n        // LaTeX\n        {\n            \"name\": \"latexenv\",\n            \"enabled\": false\n        }\n    ],\n. Originally you had to modify the default rule, but that meant you would miss out on bracket regex fixes or new rules as your user default rules would be used instead of the default.  By splitting user overrides to a separate settings, I could overlay user settings on top of default settings. This allows you to override parts of a rule, but still get all the other updates.  Just seemed cleaner from a user's perspective.\n. I feel this question has been answered.\n. Thanks!  I don't know much about RTF, so I will take your word on it has the expert.  The changes look clean, so I don't imagine any problems with merging.\n. Like a pop-up?\nMy opinion on this is if you are doing complex conditional nesting that span a lot of lines where the begin cannot be seen on the screen, you should be added some comments on the end as you show in your example.  Though, in the example above, current BH highlighting should be plenty in a compact piece of code as shown.\nThis is a duplicate of #307 which I haven't ruled out yet, but I make no promises.  I will close this in favor of #307.\n. > And just recently somebody told me that he finds it difficult to maintain these comments.\nWe do stuff like this in our firmware where I currently work (where it makes sense).  We mainly use it for C compiler switches, but I have seen it used at the end of long conditional blocks as well.  It isn't too difficult to maintain, but again I'm not saying everyone has to work like we do.\n\nI thought rather to a similar visualisation like the comments. How about showing it if the particular line does not have a comment in the end?\n\nI am currently only interested in showing a hint when the opening (or possibly closing) isn't on the screen.  If on the screen, the opening (or closing) will be visibly highlighted making the hint not needed.  I don't think I would waste time determining if an end contains a comment if I add this.\nIf I do add any hints, it will probably be something quick and simple.  I don't want to add a lot of complexity that will slow down matching as it occurs on every selection and edit (well not every, but you get the idea).  At most, I will grab the opening line with maybe +1 lines of context before and after (up to X characters for each line) and show a popup next to the end highlight (or maybe vise versa if only the opening is shown).  I would not do this for multi-selections: only single selections.  I am not likely to include regex to target specific context on the opening bracket line as I don't want to learn nuances and context of all BH's supported languages as I don't use all languages and it would be slower.  If all this is still too slow, it would be limited to an on demand matching only and not be shown automatically on selection change or edit.\nI haven't bothered to experiment with any of this yet, and I do't know when I would get to it, but currently it is tagged as a maybe.\n. Ughh.  The current detection works for HTML and XML as unquoted attributes are not valid in XML.  I personally never use unquoted attributes as the very thought makes me cringe, not because I don't understand them, but because a lot of other people don't understand them.  You are the first to report this problem as I imagine you are one of a very few who ever used them.\nAnyways, I guess it isn't really important how I feel about them, but that they should be handled proper.  I usually leave language issues up to pull requests, but since I do use HTML, I will address this personally.\n. Just a note: this issue was introduced in #308.  I originally removed this code because the regex hung.  This new fix does not seem to cause a hang.\n. > But it simply doesn't work.\nIt does.\n\nWhat am I doing wrong?\n\nCould be a number of things.\n- I see what you put in your color scheme, but I have no way to verify it is placed in appropriately.\n- Do you use SublimeLinter?  If you do, SublimeLinter has a habit of copying themes and changing its name to yourtheme(SL).tmTheme; I forget where in your User folder it places them, but you get the idea.  So if you do use SublimeLinter, and you change your original theme, Sublime is probably pointed at your SL version instead, so you have to reset your colorshcme to the original, and then SublimeLinter will recreate your SL version...I know...\n- Something else I am unaware of.\n\nWhy does it have to be so difficult\n\nI would prefer to just give BH a color opposed to scopes, but I don't get to make that decision.  This is a limitation of the Sublime API.  Some people want the ability to color different brackets differently.  More options requires more complexity.\n\nwhy not just let us change the \"internal default\"\n\nYou can.  You don't have to create your own scopes for individual brackets, you can just change the default one.  You can leave your color scheme untouched if you want as well.  Instead of creating your own scopes, you can use one of the existing ones in your color scheme.\nI have to work in the environment that Sublime allows.\n. > It was indeed Color Highlighter causing the issue, Sublime simply ignored any color scheme I tried to install EVEN after uninstalling Color Highlighter (it kept living in the Local/Session.sublime_session file). \nI'm honestly not a huge fan of that plugin.  It is extremely invasive and at times fragile.\n\nIt seems that under the bonnet Sublime is rather messy.\n\nMeh, it isn't perfect, but I am yet to find an editor that is.  I personally think it is a small thing.  Once I set up my color scheme or settings file, I don't have to look at it again.\n\n[resolves to learn VIM and dump sublime]\n\nSublime isn't for everyone, nor is any editor.  To each their own.  VIM just never worked the way I work, but I know some people that swear by it and are very fast with it.\n. ?...I think there is a misunderstanding here.  BracketHighlighter is a plugin for Sublime Text.\n. Due to the way the Sublime API handles highlight regions, it isn't really practical as an \"always on\" feature (as least I don't think so, but some people like it).  But there is a high visibility mode available that is available that basically does this.\nIf you try to highlight the background with the Sublime API the solid style, the color of the text is all white or black (depending on what Sublime picks for to standout with the background) and you loose syntax highlighting in that region.  By default I think I set the feature up with an outline which allows the syntax highlighting to still work.  It works, but I personally only turn it on when I really need to increase the visibility (such as files with ridiculous nesting of brackets).\nThere is a command in the command palette to toggle the high visibility mode.  If you need to turn it on by default or tweak the style etc., you can see the high visibility settings here: http://facelessuser.github.io/BracketHighlighter/customize/#high_visibility_enabled_by_default.\n. > thanks this solves my question. I'm using the content_highlight_bar instead.\nUnderstood.  I guess we have a couple of features in there that do similar things.  Everyone likes something different :).\n. Whoops!  Thanks!\n. Glad you got it figured out.\n. Thanks for the report.  I've found the issue.\n. The following release fixes the issue: https://github.com/facelessuser/BracketHighlighter/releases/tag/st3-2.14.2. As soon as it is available in Package Control, you should be able to upgrade.\n. If you can issue a pull request, we can ensure it gets in.  The community supports the language rules as I don't use all languages.  It allows me to focus on the core code.\n. I am afraid this looks like a Package Control problem, not a BracketHighlighter problem.  I would try uninstalling BH and reinstalling via Package Control.\n. This may or may not be related to BH commands being window commands opposed to text commands (per window opposed to per view/file).  Text commands I think are actually tracked for things like this.  This would be related to #320 which would make this a duplicate issue.  I cannot promise that if/when I change BH commands to Text Commands that it will solve the issue, but if I do, and it doesn't work, then there is nothing else I can do.\nI would follow #320 to monitor progress on a potential resolution.\n. You will most likely have to modify the angle bracket rules.  Usually we don't disable angle bracket support in JS because JS is mixed with HTML (and we want to find angled brackets in HTML).  Looking at your image, there is good news as it appears that your syntax highlighter scopes ES6 => notation.  We can use that to exclude the scope of => in the angle bracket rule: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L316.\nPlease issue a pull request for others when you are able to target the correct scope.  If you are still having issues, just let me know and I will see if I can offer some other suggestions.\n. I went a head and plugged your example into some HTML and (at least with the JS syntax highlighter I am using) this scope exclusion seemed to work storage.type.function.arrow.js.  I didn't test beyond a quick check, but maybe that is what you need.  This may vary form highlighter to highlighter which is why I usually just have the affected party issue a pull when they encounter such issues.\n\n. I don't, I just dropped this in my User/bh_core.sublime-settings:\njs\n    \"user_scope_brackets\": [],\n    \"user_brackets\": [\n        {\n            \"name\": \"angle\",\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"keyword.operator\",\n                \"source.ruby.rails.embedded.html\",\n                \"source.ruby.embedded.html\",\n                \"storage.type.function.arrow.js\"\n            ]\n        }\n    ],\nuser_scope_brackets and user_brackets are used to either insert/append new rules or modify existing rules (but just the fields of existing rules you need to :wink:).  The way it works is if you use a name that already exists, you can just specify the keys of that rule that you want to override.  The rest of the keys will use their values found in the default settings file.\n. It looks like the scope I mentioned fixes this in the default Javascript and JavascriptNext which supports ES6 (both of which I happened to have installed).  I will commit the changes and consider this closed as this will be fixed in the default JavaScript that is provided with Sublime (and additionally JavaScriptNext).  If I have missed your specific JavaScript highlighter, just issue a pull request to fix that.\n. Yes, I need a release, but I was planning on doing some php rule fixes before that happens; just haven't had that moment yet to sit down and do it.\n. I thought I'd be able to work out what I needed to by yesterday, but since I didn't, I will do a release today.\n. Release was made.\n. You need to be a bit more specific with \"but can't highlight if it is in single line\".\n. This is a conflict most likely between using <?php ?> detection and phpkeywords (if endif etc.) detection.\nBH can't deal with situations like this [(] [)].  It will think that the round bracket is broken, and then won't be able to resolve the square brackets either. This is a problem because you can do some wacky things with PHP and some other languages.  For instance in C, you can do stuff like this:\n``` c\nif SWITCH\nif (condition) {\nelse\nif (condition && other_condition) {\nendif\n/some code/\n}\n```\nWhich opening curly bracket do I match the closing bracket to?  The correct answer is both, but BH doesn't have that intelligence.\nTo be honest, in HTML I do not think you should enable PHPkeywords and PHP angle brackets; you should really pick one or the other.  Depending on how crazy you get with your PHP conditionals, I imagine there can sometimes be some issues with HTML tags and PHP as well, especially if you create a scenario like I showed with C above.  PHP is like a preprocessor step on the HTML, that kind of complexity just is a bit much for BH.\nSecond the regex for PHP keywords isn't the best.  The rule was sloppy and doesn't allow for conditional ends on the same line as conditional starts (it also doesn't handle comments after conditionals).\nFor the first issue, you can disable either PHP keywords or PHP angles.  For the second issue, we need a better regex.  I don't really use PHP much, but if you can test the following and let me know how it works for you, I can add the new regex in:\nAdd this in your User/bh_core.sublime-settings file to override the parts of the rules we need to:\njs\n    \"user_brackets\": [\n        // PHP Angle\n        {\n            \"name\": \"php_angle\",\n            \"enabled\": false\n        },\n        // PHP Keywords\n        {\n            \"name\": \"php_keywords\",\n            \"open\": \"(?:^\\\\s*|<\\\\?(?:php)?\\\\s*)?\\\\b(if|foreach|for|while|switch)\\\\b(?=.*:\\\\s*(?://.*?|/\\\\*.*?\\\\*/\\\\s*?)?(?:\\\\?>|$))\",\n            \"close\": \"(?:^\\\\s*|<\\\\?(?:php)?\\\\s*)?\\\\b(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*;\\\\s*(?://.*?|/\\\\*.*?\\\\*/\\\\s*?)?(?:\\\\?>|$))\",\n            \"enabled\": true\n        }\n    ]\nI personally find PHP angles less useful which is why I have disabled them.  If you find the inverse true, disable the other instead, but to get better conditional support, I would need you to test out the PHP keywords.\nHope that helps.\n. Improvements to PHP keywords should be coming in the next release.   I will consider this closed.\n. Yup, you can disable markdown specific rules, and you can disable general brackets by excluding markdown scopes.\n. A better way is to just use user_scope_brackets.  You can do stuff like this: https://github.com/facelessuser/BracketHighlighter/issues/341#issuecomment-223422241.  It allows you to just override the fields of rules you want to modify.  That way when BH updates, you will get the latest rules and still be able to override what you want.\n. > Oh wait, I made a booboo, I should have used `user_scope_brackets', all working now \ud83d\ude04\nYup.  Scope rules go under the scope variant.  Glad you got it working.\n. I would condense these into one rule.\n. Maybe just call that rule verilog... or system_verilog if you need to distinguish it from verilog... Haven't used verilog since college so I don't know if there is a reason to distinguish.\n. Most likely you will need to throw together a simple bh_plugin to pair the correct begin with end when condensing to a single rule.  There should be plenty of examples in the settings file.  Let me know if you are struggling to make sense of it.\n. I would probably also make sure they start and end on word boundaries:\njs\n{\n    \"name\": \"system_verilog\",\n    \"open\": \"\\b(function|interface|package)\\b\",\n    \"close\": \"\\b(endfunction|endinterface|endpackage)\\b\",\n    \"style\": \"default\",\n    \"scope_exclude\": [\"string\", \"comment\"],\n    \"language_filter\": \"whitelist\",\n    \"language_list\": [\"SystemVerilog\"],\n    \"enabled\": true\n}\nI say this because while you don't see it in your results, I am betting the opening rule is matching function in your endfunction.\nI would look at php_keywords's bh_plugin:   https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L404 and https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/phpkeywords.py.  You can ignore the regex example in php_keywords as it is a different use case, and I need to improve it as well.\n. > ok, so that code is very straightforward. But where do I put it? in my user space somewhere I assume, but where?\nThis is covered in the documentation.  I would just take a look there.  If you plan to keep it only for personal use, then I would put it under a folder in your User directory.\n\nIf you'll notice, however, I didn't use the \\b for boundaries. Doing that made for some wonky behavior.\n\nI imagine you are just doing something a little off.  \\b will do nothing except protect you from mistakenly highlighting incorrect things.  What if you have  a variable named testcase?  What will stop your rules from incorrectly targeting testcase or some other similar scenario?\nAnyways, I am glad you got it working.  If you ever decide to do a pull request for other verilog users, I would suggest a more robust regex incorporating \\b.  I would also probably combine sv_begin and sv_pairs and just ignore begin and end in the compare logic.  I like to reduce a language down to the minimum rules where possible (and reasonable).  When not possible, additional rules can be used.\nSince it looks like you have what you need, I will consider this issue closed.\n. Not really sure what the request is here.  Did you look at http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style?  Maybe you want to use the solid option?\n. I missed that you said High Visibility mode.  You could use solid here: http://facelessuser.github.io/BracketHighlighter/customize/#high_visibility_style\nChange color by changing the scope used: http://facelessuser.github.io/BracketHighlighter/customize/#high_visibility_color\nIf you want a color not in your theme, you would have to add a new scope and color in your theme first, and then reference it in the settings file (it's just the way Sublime works).\nOther than that, there just isn't any other way to configure the background.\n. Styles should be under bracket_styles.  Just copy bracket_styles from the default settings file and copy it to your user settings file and modify it there.  If you look in the default settings file, you will see how it is laid out, but here is part of it so you get the idea.\n``` js\n\"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracket pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        // \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\"\n        // \"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    }\n    // etc.\n\n}\n```\n. Even though that is were styles go, high visibility is a little different.  In the default file you can read what they expect:\n``` js\n    // High visibility style and color for high visibility mode\n    // (solid|outline|underline)\n    // ST3 has additional options of (thin_underline|squiggly|stippled)\n    \"high_visibility_style\": \"outline\",\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n```\nAs you can see style just takes solid, outline, underline, thin_underline, squiggly, and stippled.\ncolor takes either default, bracket, or a scope from your theme example <string>brackethighlighter.custom</string> you would use brackethighlighter.custom.\nSo do something like this:\njs\n\"high_visibility_style\": \"solid\",\n\"high_visibility_color\": \"brackethighlighter.custom\"\nThat should give you the the custom color but use the solid style.\n. Sorry it took me a week to get back to you on this.  Totally didn't see the notification.\n. This has been open a while, so I am assuming this has been answered.  If you have any more questions, feel free to ask, but I am going to close this as there has been no activity here in over a month.\n. Did you see it again after restarting Sublime?  Sometimes after an update a restart is needed.\n. I figured that would be the case.  Glad it's working for you.\n. Please read this to see what I am looking for in bug reports: http://facelessuser.github.io/BracketHighlighter/contributing/#bug-reports.\nAlso, mentioned in the above link is that specific language rules are supported by the community (though I do occasionally address issues in languages I actually use and or extremely problematic issues).\nI am not entirely sure what language you are showing me above as you didn't mention what language I am looking at.\n. I'll explain why this is the case.  In a language like C you have if statements like this:\n``` c\nif (condition) {\n    i++;\n}\nif (condition)\n    i++;\n```\nPHP is the same way, but they also have this other format:\n``` php\n<?\nif ($condition):\nendif\n\n?\n```\n\nSo two of those scenarios you don't want to highlight if, and only one you do.  BH has fairly simple rules to try and detect brackets.  The more exceptions you have for when it is okay to highlight something, the more difficult it is for BH to know when it needs to highlight.  Since the if is scoped no differently in these three cases, I can't use scope to get context.  I have to rely on regex, and Python's re doesn't handle recursive regex to help me be 100% sure that I can find if ($condition):, so instead we use a naive regex.\nWith that said, I did recently touch this keyword rule to try and simplify things a bit and reduce conflicts with other rules, but I did forget about such things as self:: throwing things off (this is why the community supports the language rules, I don't use all programming languages). What I will do is adjust the rule to look for a line end after : or comments followed by a line end after :.  This is closer to how it used to be.  That will make it more reliable.\nWhat really needs to probably happen is for the rule to look for all if and then use a bh_plugin to use procedural logic to scan ahead and make sure the conditional statement is a valid if ($condition): scenario as regex has a difficult time with this.  Though I don't use PHP enough to for me dig into that at this point.\n. I've released a bug fix release with this issue fixed.\n. > Maybe some other statements can use self::, like while(self::something()), for($i = self::count()) and etc... \nThe fix above address all those.\n\nThanks for your plugin and time..!\n\nNo problem\n. Normally rule changes are supported by the community.  As I don't use ruby, this falls into that category, but since I am aware that this ruby rule setup is a little complicated, if this is fairly straight forward, I can patch this.\nWhat are all the prefixes that can be used?  I would assume at the very least public and private, but are there more?  Maybe something like protected or anything else?\n. Thanks\n. Okay, I've removed some captions, and added some back in.  I added some back in because if BH is installed, and another package hasn't defined the caption, then the caption will be blank.  So I can only omit a caption if it is defined by Sublime by default.   I am closing this issue.\n. This looks like a Package Control issue.  See the recent issue opened: https://github.com/wbond/package_control_channel/issues/5543.\n. Basically there is nothing I can do until someone can tell me that I did something wrong recently that broke it, or the issue is resolved on Package Control.  Anyone who is interested in trying the recent version, or just needs to do a fresh install will probably have to just install manually.  Wbond has said he will look into to it probably tomorrow on the Package Control side.\n\nHow to install manually\n\nDownload the latest tag from here: https://github.com/facelessuser/BracketHighlighter/releases.\nUnpack the zip into your Packages folder (renaming the folder from BracketHighlighter-st3-0.0.0 to just BracketHighlighter).\nRun Package Control's Satisfy Dependencies command to get all the dependencies\nrestart Sublime\n\nInstalling with git is also nice an option if you are comfortable with git, but you would still need to do steps 3 and 4.\n\nIt is our hopes that BracketHighlighter will be returned to us safe and sound.\n. It's back.  Had to delete some old tags.  Still think there should be a better way to handle this.\n. Try running the command pallette command satisfy dependencies and try restarting ST.\n. BracketHighlighter had been using backrefs for a while now.  This shouldn't be a new thing that suddenly can't be resolved.  Try uninstalling BH and reinstalling BH.\n. It is possible i interpreted how dependencies get load incorrectly.  I install backrefs if version is greater than version A, but I install other dependencies if greater than a later revision B.  I assumed that since the current version met both requirements that both sets would get installed, maybe that is not the case.  Maybe I need to specify backrefs in both dependency rules.  As I already had the dependencies, I probably didn't notice.\n. I'm working on a patch.\n. Release made.  When it drops, if it is still throwing errors, try satisfy dependencies again and restart.  Please let me know when if there are no issues.\n. I did it from my phone :(.\n. Okay, I fixed it.  Hopefully in the next hour or will drop.\n. It's available now\n. Run this from the console and tell me what you see:\nimport mdpopups;mdpopups.version()\nAnything less than (1, 5, 0) requires you to run the Package Control command Satisfy Dependencies (watch for it to complete in the console) and then a restart of Sublime Text.\n. > I've found that I need to have the selection caret next to the bracket\nI don't think that is a requirement.  There are no checks on where the caret is,  only where the hover occurs and its relation to highlighted brackets in the view.\n\nOps, sorry for that. \"Check for new updates\" tells me \"No available Updates\"\n\nYou have to be on the dev channel.  If you are a registered Sublime user, you can download dev releases:\nhttps://www.sublimetext.com/3dev\n. I'll clarify, it will work on strong word as well, but only if they are not visible, but Sublime won't tell you if brackets aren't visible in the horizontal, only in the vertical.  I will have to experiment if there are ways to predict the horizontal, but maybe I'm out of luck with that.\n. String word not strong... Stupid phone autocorrect.\nEdit: Okay, I fixed that post now, there were more wrong words.\n. > Horizontal non-visible brackets aren't as important IMO :)\nI feel the same, but if there is way, I don't mind trying :).\n\nwhen the selection is inside one of the strings, or between the [ and ], hovering over the { or } (depending which is on screen) does nothing.\n\nYeah, it will only work on highlighted brackets, so yes, only the brackets surrounding a caret.  It will work with multi-select.  On-hover works by looking at the view settings to see where current highlighted brackets exist.  It doesn't perform an on demand match.  I was trying to make it quick and avoid any labor intensive calculations.  I must have misunderstood what you were saying.\n. > @facelessuser understood, thanks for the clarification. Maybe this could be added to the documentation so that people know what to expect? :)\nYeah, I will update the doc once I understand all the diverse ways people are confused :).\n. I'm going to close this issue and open a new one dedicated to discussing this new feature.\n. Issue #355 is available for discussing the new feature.  Hopefully the new title will draw people to it so we don't get multiple threads.\n. Thanks!  Good idea.\n. Thanks! Glad you like it.\n. I think in general people like it and there is nothing more to discuss.  Closing issue.\n. I don't really understand.  I use multiple files everyday, and I don't have a problem with BH highlighting.  I feel like I'm missing something.\n. It appears you are using BracketHighlighter and you still have Sublime's default bracket highlighter enabled.\n1. The top one looks like BH is doing its thing.\n2. It looks like the built-in highlighter (not BH's) is showing in the other file.  Notice that the underlines are thinner in the second and no icons.\n3. I am assuming you are talking about cloned files?  I can only guess as this was not made clear.  I did just try out cloning a file, and it appears the cloned view doesn't register selection events or even modified events.  If Sublime won't create on_selection events and on_modified events in the clone, then BH can't  do anything as you move the cursor around.\n4. But it does appear that on_activated events do get created in the clone which is why activating a different view, and then going back to the clone causes it to work.\n5. Also on demand commands seem to work (you can run from the command palette BracketHighlighter: Match Brackets (ignore threshold) and you can see it works.\nBH works around the Sublime API.  If Sublime limits the API in a cloned view, then there is nothing I can do because I need the API to make it work.  I imagine Sublime is treating cloned views differently as it is constantly syncing it with the original.\n. It's really not worth it to me to do an elaborate work around for cloned views.  I'm afraid at this point in time I am passing on this.\nThank you for bringing this to my attention though.  It is good to know.\n. Yeah its probably getting confused on the escaped brackets.  What's the scope of the escaped round brackets?\n. And scope of escaped square brackets?\n. This is probably what you need in your square bracket rule:\ndiff\ndiff --git a/bh_core.sublime-settings b/bh_core.sublime-settings\nindex 41a8aa9..adf517c 100755\n--- a/bh_core.sublime-settings\n+++ b/bh_core.sublime-settings\n@@ -326,9 +326,13 @@\n             \"scope_exclude\": [\n                 \"string\",\n                 \"source.regexp constant.character.escape\",\n+                \"source.yaml-tmlanguage constant.character.escape\",\n                 \"comment\"\n             ],\n-            \"scope_exclude_exceptions\": [\"text.tex string.other.math\", \"source.yaml-tmlanguage meta.value -constant.character.escape\"],\n+            \"scope_exclude_exceptions\": [\n+                \"text.tex string.other.math\",\n+                \"source.yaml-tmlanguage meta.value -constant.character.escape\"\n+            ],\n             \"language_filter\": \"blacklist\",\n             \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n             \"find_in_sub_search\": \"true\",\n. Hmm.  Now I look more, I think we can ditch one of the scope_exclude_exceptions as well:\ndiff\ndiff --git a/bh_core.sublime-settings b/bh_core.sublime-settings\nindex 41a8aa9..37fa89a 100755\n--- a/bh_core.sublime-settings\n+++ b/bh_core.sublime-settings\n@@ -326,9 +326,12 @@\n             \"scope_exclude\": [\n                 \"string\",\n                 \"source.regexp constant.character.escape\",\n+                \"source.yaml-tmlanguage constant.character.escape\",\n                 \"comment\"\n             ],\n-            \"scope_exclude_exceptions\": [\"text.tex string.other.math\", \"source.yaml-tmlanguage meta.value -constant.character.escape\"],\n+            \"scope_exclude_exceptions\": [\n+                \"text.tex string.other.math\"\n+            ],\n             \"language_filter\": \"blacklist\",\n             \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n             \"find_in_sub_search\": \"true\",\nI think they have just been tweaking it since the last time they issued a pull request.\n. We need to give them a more specific scope.  We are fixing the issue in this yaml file, so we don't want to cause more headaches by potentially introducing side effects in other languages. Constant.character.escape is too broad.  Some languages it might not work as expected.\n. So did my suggestion work for you?  What did you end up settling on?\n. Not sure if this was resolved.  Marking stale and giving it another week.\n. @MattDMo I guess I am closing this as I've heard nothing else.  If per chance you were able to get things working satisfactorily, please issue a pull request.  I don't really use AAAPackageDev, so I need someone who does that is willing to test out changes before it gets committed (which is why I require a pull request).\n. > Sorry for leaving you behind, I just started a new job two weeks ago, and haven't had as much time to fiddle around with stuff like this.\nNo worries.  I just try and address this stuff within a time frame because if I don't, I will forget about it as support a bunch of repos.\nSounds good.  I probably wouldn't accept just constant.character.escape on the main branch as though it may work for you in all the languages you try, it is the other languages you don't try that I am more concerned about.  Better to start narrow and broaden as needed.  If it is working well for you, I'd be happy to accept a pull for others.\nAnyways, good luck with your new job!  And thanks for for updating me on this.\n. No worries.  It's from the Aprosopo theme: https://github.com/facelessuser/Aprosopo.\n. @r-stein Thanks! \n. Your on too old a version.  You should be fine without it.  Mdpopups won't install unless you are on ST 3116+.\n. Sorry, it requires it if you are on 3116+.  I really should have made a more specific message.\n. I now see I closed this when I shouldn't have.  Ref #362.  This will be fixed in the next version.\n. It actually has nothing to do with Material Theme.  I can see what the issue is.  Thank you for reporting.\n. New release was just made.  When available on Package Control, you should be able to upgrade.\n. You can see @r-stein is defining a scope called brackethighlighter.default in his color scheme and assigning the color #CC99CC to that scope.  You can also see that the default bracket style assigns that scope to the color key.\nYou can also change the default style or another predefined style to match a scope already in your theme if you don't want to modify your theme.   Just take a look at the scope colorization rules in your color scheme and pick a scope that works for you. The key name color is the scope.  color is the name because the scope determines the color.  ColorSchemes colorize certain scopes, so to colorize the regions with underlines or whatever, we assign a scope, and the color scheme colorizes that scope.   That is just how Sublime requires regions to be defined. \n``` js\n        // \"default\" style defines attributes that\n        // will be used for any style that does not\n        // explicitly define that attribute.  So if\n        // a style does not define a color, it will\n        // use the color from the \"default\" style.\n        \"default\": {\n            \"icon\": \"dot\",\n            \"color\": \"brackethighlighter.default\",\n            \"style\": \"underline\"\n        },\n    // This particular style is used to highlight\n    // unmatched bracket pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        // \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\"\n        // \"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        // \"endpoints\": true,\n        // \"color\": \"brackethighlighter.tag\",\n        \"style\": \"outline\"\n    },\n\n```\nIf you have more questions, please be specific about what you don't understand in our documentation as we are always looking to improve the documentation for people.\n@r-stein  Thanks for for your help on the issue.  It is always appreciated :smile:.\n. You use the scope that is highlighted blue in your color scheme.  If nothing is highlighted blue in your color scheme, you have to add a new color rule in your color scheme and define the scope that you will use.\nFor instance, since I don't know what color scheme you use and what scope in that theme gets highlighted a shade of blue, if we add a rule like this to our color scheme, and we use that defined scope for bracket style, we should bet blue as #0000FF is blue.\nxml\n        <dict>\n            <key>name</key>\n            <string>Bracket Default</string>\n            <key>scope</key>\n            <string>brackethighlighter.default</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#0000FF</string>\n            </dict>\n        </dict>\n. I think you should spend some time reading about color schemes: http://docs.sublimetext.info/en/latest/reference/color_schemes.html.\n\nplease facelessuser respond or reply faster\n\nI do this in my free time, so I respond when I have time and when I am not doing other things.  I do not drop everything to offer support. \n. > Doesnt do anything\nIt is possible you might not have put it in the correct space.\n- You will have to provide us with the full color scheme content so we can verify you have done it correctly.\n- You will also need to provide us us with any modifications you have made to your settings file (if any).\n- You will also have to identify for us which bracket you are using as your reference to determine that it is working.\n. You don't really have control over the bracket size and thickness per se.   What you can do is change the style to one of Sublime's allowed preset styles.  By default we use underline and I think outline for tags.  All available styles are listed here: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.\n. Just replace bracket with bracket underline. That is what I meant.\n. So it looks like the original question was answered, so I will close this issue.\n. > As far I know one could only add icons left of the numbers, where the other bracket symbols are already added.\nThat is correct, we can't really change the background of the gutter, but we can use icons.  I once experimented with having a visual indicator like the highlight line in the gutter, but unfortunately since other plugins also fight for the gutter, it turned out pretty bad.\n@MakhouT Also, please do create separate issues for questions like this.  This is mainly so others can search for answers to the same questions, and so I can search and direct people to the same question.\n. Yeah...I messed up.  Give me a sec to fix it.\n. Sorry about that.  New release: https://github.com/facelessuser/BracketHighlighter/releases/tag/st3-2.21.5.\n. Without the example source you are trying this in, it is tough to tell if 1005000 is enough or if there is something odd in your source that is interfering with BH's ability to resolve all brackets.\nI would try a pair of working brackets and reduce the threshold to a number of chars less than the working distance.  You will see that the threshold does in fact work, and you will no longer be able to find the bracket pair that previously worked.\nSo if 1005000 is a more than sufficient threshold, then I would say there is some syntax in your file getting in BH's way.  Maybe it is some template language syntax, or maybe it is PHP syntax getting in the way.  If you can point me at a non-working example, I can maybe tell you why it isn't working, but without an example, I am afraid I am not able to help.\n. Yup, that will cause an issue :smile:.  Glad you figured it out.\n. I think this is because it expects a semi-colon at the end of endforeach.  You can issue a pull request that will accept endforeach; or endforeach ?> if you like.\n. Maybe test out something like this for a closing rule and see if it works for you.  If it does, you can issue a pull request.\n(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*(?:;|;?\\\\?>))\n. @kitanga, I am fairly certain you are not experiencing the same thing.  What you are most likely experiencing is BH halting search because it reached its distance threshold.  This is covered in the documentation.  You can increase the threshold, but as you increase the threshold you will impact performance; when that impact becomes noticeable and negative will depend on your system.  If you have a particular bracket you want to search that is outside the threshold, you can run a command that will match without the threshold which should find the other bracket assuming you don't have an error in your code.  But we always use a threshold for instant searching for performance sake.\n. FYI, I tried out your code and I had no problems.  My threshold is set to this:\njs\n    // Character threshold to search\n    \"search_threshold\": 10000,\nSmaller thresholds (like the default value) may not be able to search the full content in your example.\n. @paKanhu I am assuming you did not try my suggestion or it did not work for you, but since there has been no response from you, I am closing this issue.  Requesters should be willing to participate in discussion in order to get support, but since discussion has ceased, I will close the issue.\n. > Essentially, why not plain text?\nThis is answered here: https://github.com/facelessuser/BracketHighlighter/issues/137\nSpecifically here: https://github.com/facelessuser/BracketHighlighter/issues/137#issuecomment-29111069.\nI will rephrase and elaborate though.  We capture brackets either by scope and/or regular expression.  Text is not really scoped (or it is all scoped the same), so we can't use scopes.  Text is also not a regular language, therefore regular expressions don't work well.  Text is free form.  Which brackets do I match here?\nThis is an example (mainly to demonstrate why plain text is avoided :) ).\nI know that the last round bracket should be matched, but how do I tell BH that the smiley round bracket should be ignored?  I have to provide that logic. It isn't contained in a comment scope or a string scope, but it isn't really used as a bracket either.\nI hope this illustrates why by default I do not allow bracket finding in plain text.  Feel free to enable it if you like, but understand it's limitations.\n. Most of this is covered in the documentation.  But scopes within syntax highlighting are used to find quotes.  Since quotes have an opening marker that looks identical to the closing marker, it becomes very difficult to detect where a string starts and ends without scanning the entire file, but BH doesn't always scan an entire file, but instead uses a sliding window for performance reasons.  We might get confused with apostrophes and quotes etc.  Yes there are heuristics we could add to look for to rule these out to some extent, but I doubt it would be 100% accurate.\nWhat BH does in regards to most brackets where the opening looks like the closing is search for a specific scope in the view (for quotes that would be string or something similar), and then check that the end caps of that scope region are what we expect (and in the case of strings, they would be single or double quotes). \nSince text files don't scope anything as string, but instead just scope everything as text.plain, I can't find the quotes with the current method.  You would have to create a rule that didn't use scopes, but as mentioned earlier, I am doubtful of the reliability of a pure regex quote search.\n. No problem\n. This is not pure HTML.  Please describe what you are actually using and go into details.  I see @click which I am unfamiliar with.  If this is not pure HTML, I see no bug and would recommend you issue a pull request to add your desired functionality for the template language you are using.  If @click is some HTML standard that I am not familiar with (I am not a web developer), then please explain and point at the appropriate documentation.\n. You will probably need to take a look at the the bh_tag.sublime-settings.  I've pushed most of the logic into the settings file to allow for pull requests without me having to modify the main bh_plugin.\n. > is there away to give foreground & background to the unmatch ? \n\nso whatever the unmatched tag fg & bg is currently set ,it gets changed to the unmatched style.\n\nI don't think I understand the question.  Can you elaborate?\n. I think this should be placed under a new vue profile.\n. Linters cab be written however they want, but vue files are opens in view syntax right?  I mean yeah, you could open a vue file in plain html syntax, but that isn't even really supported in html syntax highlighter, right?  I don't want to muddy the html tag rule unless there is a really good reason to.\n. Why not create a blade/vue profile?  People open lots of template type languages in straight html, but I don't think it is a good idea to modify the HTML regex to support all not default HTML derivatives.  There is nothing stopping you from opening a vue file with an html extension and from the quick panel selecting the vue syntax.  If I throw in vue, why not mix in cold fusion and other various implementations?  The rule will get really hard to maintain.\n. I know nothing about angular and very little about blade, but PHP doesn't particularly change the HTML format, it can break up the format which can cause trouble, but I know of no way to create a regex that can detect all the different ways PHP can break HTML syntax as it can literally be inserted anywhere; there is nothing regular about it which is why regular expression I don't think will detect tags broken up with PHP very well.  The same could be said for Jinja2 or other template languages.  But the @ support is predictable enough that a profile could be created to detect it as it is placed right before an HTML attribute.\nI want make sure I am clear, detecting @ is doable.  Detecting this <tag <php? /*mucking up a tag with all sorts of nonsense*/ ?>></tag> is very different.  BH has a difficult time with PHP in these scenarios and always will.\n. I'm just saying we don't do anything special for PHP.  We have a separate non-tag related rule for PHP <?php ?> or even php keywords if endif etc.  Millage varies for those, but they are there.\nI'm also saying, how do you create a rule that covers all these?\nphp\n<<?php \"t\" ?>ag></tag>\n<t<?php \"a\" ?>g></tag>\n<ta<?php \"g\" ?>></tag>\nI'm simply trying to illustrate the difference between \"PHP\" support as a whole vs the problem you are seeing in vue, and I only brought it up to answer your question about  PHP, blade, vue, etc.  PHP is not really related to this discussion.  Maybe blade and angular is.  You are probably a bigger expert on this than I.\nAs for vue, I don't know what vue supports.  If it supports :, ::, _, @, then include them all.  Include anything that can be specifically and fully covered by regex.  It doesn't just have to come before the attribute, but it needs to be predictable.\nShould blade, vue, and other template variants be included together?  I don't know, is the syntax the same for all of them?  Can they coexist with each other without getting difficult to maintain?  What would we need to support?  I am open to discussion.  Clearly I am not an expert on all the template languages, and understanding the situation better might help me make a better informed answer.\n. Let me think about this.\nI had thought with the current settings users could allow what they wanted.  I believe that statement to be true even now, but you are requesting this additional flexibility which I am not yet sold on.\nThis is kind of limited in the regard that I can create a special list of attributes and assign them to particular syntaxes, but if I want to add one attribute to one kind of syntax, and one to another, this will not support that:\njs\n\"cstm-attrs\":\n{\n    syntax: ['html','blade.php','vue','ng.html'] // where u want those attrs to be supported,\n    attrs: ['@',':+','_'] // here u put ur custom attrs, this setting support both string and regex, ex. ':+'\n},\n. I've been thinking about this, and I still don't really see an advantage of adding another special attribute setting.  We already have an attribute setting, and that setting is used in things like attribute selection as well.  I understand you want to append additional attributes to the base html setting.  I would argue that you could just change the attribute setting for HTML in your personal setting to accommodate this if it is important to have as part of your personal settings.  Essentially, I am sticking with my original statement in #310.\nThe reason I suggested this be moved to a template profile or a vue profile is that this is not standard HTML syntax, so I suggested we create a non-standard profile for vue or possibly other templates that share similar syntax; I think this is a reasonable request.  With the current framework, we can create a non-standard profile by default.  If people want to make a non-standard profile their default for all HTML, they can do that in their User settings by changing the syntax associated with the given profile in bh_tag.sublime-settings.  They could even just copy the regex for attributes to their default HTML attribute regex if they desire.  This would be a User override choice.  The reason why I pushed all the settings to bh_tag.sublime-settings is 1) to make it easy for people to do pull request and 2) I figured the default will not always make everyone happy so they can override it in their User settings.  I am willing to put sane defaults in the settings, but users have the opportunity to deviate from the defaults if it suits their needs.  Users even have the option of adding whole new profiles in their user settings as well.\nI am willing to accept vue syntax being added to the angle bracket rules, I willing to add a vue, blade, or whatever other template profile as necessary for blade and vue syntax etc.  If users want to copy the regex for non-standard vue and blade attributes to their default HTML attribute they can in their User settings.  If they want to map all HTML to use the template attributes in their User settings, that is good too.  This is why we have the settings file and settings file overrides.\n. Because we add vue to the angle rule which includes the tag bh_plugin to handle the more complex tag search logic.  Tag bh_plugin settings are kept to their own settings file to make a clear distinction that they are not core features.  Everything in bh_tag.sublime-settings is used in tags bh_plugin.  The only exception is that the attributes bh_plugin also reads in the attributes setting.\nIn short, the core angle rule would search vue syntax and pass that info to the tag bh_plugin. The tag bh_plugin identifies XML, html, cfml tags according to its settings.\n. I guess I don't understand. We have to specify what syntax triggers a tag search, then we have to sort the syntax to apply the correct tag logic.  The previously suggested attributes setting doesn't really change that, it just presents the data in a different way.  Or maybe you are referring to something else?\n. > which is not easily accessible in the doc\nI'll give you that.  The documentation could probably be better, but hey it's a free plugin and there is some documentation, so I guess it isn't that bad \ud83d\ude09 .\n\nbut currently it requires extra steps\n\nWhat extra step?  Defining the syntax?  You have to do that in both. Defining the attribute?  You have to do that in both.  Attach it to the type of html document?  You have to do that to both.\nThe reason why it implemented in its current form is because it is flexible (maybe not pretty, but flexible).  And it is done in such a way that the code can easily use the settings. Any aspect of the attribute that needs to be changed can be changed.  Does your use case allow unquoted attributes? Does it allow special characters within the attribute name? Does it allow special prefixes? You can change all of that. What you are asking for is very specific to your current interest, which is understandable, but when I exposed these settings my interest was a bit more broad: \"how can I provide settings where anything the user wants to change can be changed so I don't have to do any extra work in the future\".  The idea was to create less work for myself by exposing all the knobs so I could just say \"you want it, modify it here\".  I feel like a simple attribute regex setting was more than sufficient to fulfill that need.  Yeah you have to setup a profile, but it works well in the code like that:\nWhat is current syntax?  PHP\nWhat profile does PHP belong to? HTML\nWhat does the attribute look like for HTML? some pattern\nI just can't justify time implementing more code to essentially do what is already possible.  This isn't something that people are going to be frequently doing.  They deal with it maybe once or twice and then they set it and forget it.  When I am evaluating whether a feature is worth my time on the weekend, an alternative way to specify attributes that can already be specified just doesn't quite make the cut.\n. Yeah, I try to explain things in the docs, but it doesn't always come out clear.  It is possible some better explanation in the documentation will clear up the confusion.\n. Everyone always thinks they've made their docs clear at first; it's always after the fact that it becomes obvious it is not.  I do accept pull requests on documents.  I'm not sure when I'll get to refactoring this particular area of the docs, but if no one gets to it before me, I'll take care of it... Assuming I don't just rephrase it in an equally confusing manner :wink:.\n. No progress for a month.  Closing.\n. Isn't this the same issues as #368?  You have @click.\n. Is this for tracking purposes maybe for a pull request?\n. What I was saying is if you remove the @ from click, tags are highlighted and the icon returns.  It looks like you have ST tag highlighting enable simultaneously as well.  On my machine I see question mark for template. I see angle highlight with gutter icon for slot and span because the parent.  This is because highlighting is broken because of @click.  When replace with click, everything works and I get tag highlighting with gutter icons.\n. Did you break something in tags?  It is working for me.  This leads me to believe something is wrong with your setup.\n. > btw the style & script still have issues\nI'm not seeing issues, sorry.\n\ncan u show me ur config ?\n\nI will a little later when I get a chance\nPlease also post what syntax highlighter and such you are using, and also post your settings if you have modified them.\n. Then I will revert my system to default settings and try out those packages (removing @click of course).  If I still don't see your issue, you will have to dig more on your side.\n. Okay, so you are using vue.  You need to add support for vue.  Check the angle rule in the bh_core.sublime-settings.  vue will need to be added there.  Also you will have to update the rules in bh_tag.sublime-settings to use vue as well.  As languages are supported by pull requests, you will need to do this in a pull request.  You will notice that things work fine when setting syntax to HTML (with @click removed).\nI missed that you mentioned this was a vue component file.  This is covered in the support documentation that new language support is provided by the community.\n. I was referring to this section with the orange note: http://facelessuser.github.io/BracketHighlighter/contributing/#overview.\n. > also when adding the syntax name to the language_list , am not sure what exactly to add \n\nshould the name be exactly as the same in the syntax list Vue Component or should it the file extension vue ?\n\nYeah, I just realized I never really explain that...if you have a file vue.tmLanguage, you would put vue.\n. Okay, I need to look into this stuff more before I come up with a final answer.\nI'm not yet convinced we need @ support by default in plain html.  I have no problem with it in a separate profile, and with the ability to override this in user settings, there is no reason some people can't have it in html if they really want.\nWith that said, I'm not ruling out the possibility of a work around yet.  I'll let you know once I've had proper time to sit down and consider things fully.\n. @ctfo was attached to the idea of mixing this into the default html profile, but I was against that to prevent us from having the html profile having multiple non-html attribute variations for vue and others.  If you view his original pull request, you can see what he did: https://github.com/facelessuser/BracketHighlighter/pull/369/files.\nThere is nothing wrong with this approach if you desire all HTML to support this convention, but to get this in the official settings, I would prefer a separate vue profile that enables this for vue syntax.  Cold fusion was done this way as it allows for it's own subset of attributes and start tags etc.. Can you post your setting file to see what you did? It's hard for me to offer suggestions without knowing what you actually did.. It looks like you've added Vue to HTML and XHTML profile.  Ideally I'd prefer a new Vue profile, and you'd alter the attributes regex to include the @ prefix.. All of this is covered in the docs, but here you go:\nbh_tag.sublime-settings.  You can see there is a new profile, and each tag setting defines a value for the new profile.\n```js\n{\n    / If you add a new key to one of these settings, you must add one to all! /\n// This is where you intially define a new tag mode.\n// This new tag_mode key must be used in all other settings in this file\n// to set up its specific settings.\n// Determine which style of tag-matching to use in which syntax.\n\"tag_mode\": [\n    {\"mode\": \"xml\", \"syntax\": [\"XML\"]},\n    {\n        \"mode\": \"xhtml\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ],\n        \"first_line\": \"^[ \\\\t]*<\\\\?xml\"\n    },\n    {\n        \"mode\": \"html\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ]\n    },\n    {\n        \"mode\": \"cfml\",\n        \"syntax\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    },\n    {\n        \"mode\": \"vue\",\n        \"syntax\": [\"vue\"]\n    }\n],\n\n// Style to use for matched tags\n\"tag_style\": {\n    \"xml\": \"tag\",\n    \"xhtml\": \"tag\",\n    \"html\": \"tag\",\n    \"cfml\": \"tag\",\n    \"vue\": \"tag\",\n},\n\n// Scopes to exclude from tag searches.\n\"tag_scope_exclude\": {\n    \"xhtml\": [\"string\", \"comment\"],\n    \"html\": [\"string\", \"comment\"],\n    \"cfml\": [\"string\", \"comment\"],\n    \"vue\": [\"string\", \"comment\"]\n},\n\n// Optional closing HTML tags. You can use 'null' if it does not require a pattern.\n\"optional_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n    \"cfml\": \"cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n    \"vue\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n},\n\n// Tags that never have a closing.  You can use 'null' if it does not require a pattern.\n\"void_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"cfml\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"vue\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\"\n},\n\n// Self closing tags.  Single tags that are closed like this <tag />\n\"self_closing_tag_patterns\": {\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": null,\n    \"cfml\": \"cf.+\",\n    \"vue\": null,\n},\n\n// Regex for tag name. Do not use capturing groups.\n\"tag_name\":\n{\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"cfml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"vue\": \"[\\\\w:\\\\.\\\\-]+\"\n},\n\n// HTML attributes.  Do not use capturing groups.\n\"attributes\":\n{\n    \"xml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"xhtml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"html\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\",\n    \"cfml\": \"[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\",\n    \"vue\": \"(?:@)?[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\"\n},\n\n// Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator '/' only.\n// Attributes and tag names are inserted using python string formatting:\n// the keyword 'attributes' and `tag_name` are used.\n\"start_tag\": {\n    \"xml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"xhtml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"html\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"cfml\": \"<(%(tag_name)s)(?:(?:\\\\s+%(attributes)s)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\\\s*(/?)>\",\n    \"vue\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\"\n},\n\n// Regex for end/closing tag.  Only use a capturing group for name.\n\"end_tag\": {\n    \"xml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"xhtml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"html\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"cfml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"vue\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\"\n}\n\n}\n```\nBut then you also want to enable vue in the angle match rule in bh_core.sublime-settings:\njs\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?=[^?%]|$)\",\n            \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"keyword.operator\",\n                \"source.ruby.rails.embedded.html\",\n                \"source.ruby.embedded.html\",\n                \"storage.type.function.arrow.js\"\n            ],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\n                \"HTML\",\n                \"HTML 5\",\n                \"XML\",\n                \"PHP\",\n                \"HTML (Rails)\",\n                \"HTML (Jinja Templates)\",\n                \"HTML (Twig)\",\n                \"HTML (Django)\",\n                \"HTML+CFML\",\n                \"ColdFusion\",\n                \"ColdFusionCFC\",\n                \"laravel-blade\",\n                \"blade\",\n                \"Handlebars\",\n                \"AngularJS\",\n                \"Java Server Pages (JSP)\",\n                \"vue\"\n            ],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\nThis should work with https://github.com/vuejs/vue-syntax-highlight.\n    . The template for issues was not followed.  If you read the template, it explains that these things are covered in the documentation.  If after reading the documentation on this matter you still have questions, I'd be happy to answer your questions.\n. Do you know why I have a template?  To save me time.  Your question is covered in the documentation.  It is also covered in numerous, previous issues (which you can also search).  I have a template to remind people to first, before contacting me, read the documentation and search issues.\nIn the documentation I cover customizing brackets etc.  In the issues I have guided many people through the process.  Based on your comment, which I did read (and it has yet saved me any time reading it), it would appear you did not read the template which requires all who wish to solicit support from me to first search and read the documentation.\nIn the template I am clear that I want people to do their part before I spend any of my free time on their issues.  I require people to follow the template, not improve or argue with me about the template.  If you would like to open a separate, specific issue to offer constructive improvements to the template or the issue process, feel free.\nPlease read the documentation and then respond with questions accordingly.  If this is going to become a discussion of how you think I should offer up my free time to help people, then I will close the issue now and we can both move on.  I am increasingly become more firm about this as these questions have been answered more times than I can count.\n. I've heard no response, so I am marking this stale.  I will close it in a week if I hear no answer.\n. No response.  Closing issue.\n. Please follow the template: https://raw.githubusercontent.com/facelessuser/BracketHighlighter/master/.github/ISSUE_TEMPLATE.md.\nAnd it is working fine for me in 3124 (I use 3123 -- 3124 is the public beta release of the dev release of 3123, so they are the same).\n. @orcinus, if you create an issue following the template I can look into the issue.\n. > Just updated to 3126.\n\nWorking again.\n\nNice, I was going to suggest an upgrade.\n. Most likely it has to do with the search window.  I don't know what your search window settings are.  Are your BH thresholds set to default?  If so, try increasing them.  Your search window will not be the exact same buffer of source code when selecting the end bracket vs the first bracket, and if your search threshold window is small, it won't match.  You can test if BH has a logic error by running the command BracketHighlighter: Match Brackets (ignore threshold) from the command palette to confirm if it matches the brackets when no threshold is applied.  If it matches fine, then it isn't a logic error, but it reaching the current threshold limit.  I personally use a threshold of 10000 which is much bigger than the default.\n. No problem.\n. 1.  JSTL should be lower case as the actual tmLanguage file name is jstl not JSTL.  It is possible I lowercase everything in the check, but in general, you should use the same case that the file name uses, not what shows up in the bottom right hand corner of Sublime.\n2. I see nothing wrong with how it currently works on the latest Sublime with the latest BH.  If you are expecting BH to be aware of custom tags, then I am sorry to tell you, it won't be.  It is setup to handle HTML, XML, and currently Cold Fusion.  If you want custom tag support for jsp, you will need to add a new profile.\nYou will need to create a profile for jsp in bh_tag.sublime-settings, and then add the proper search patterns for opening self_closing_patterns, single_tag_patterns, tag_name, attributes, start_tag, end_tag, etc.  Take a look at bh_tag.sublime-settings, and take a look at the documentation to see how to add your own custom tag profile.  If you plan to only do this locally on your machine, you can edit the existing HTML profile, but in general, I would recommend creating a separate profile for jsp.\n. I am not seeing the errors you are describing.  I am on the latest dev build 3125 which is equivalent to the latest beta build 3126.  I would try uninstalling BH and reinstalling (make sure to restart after installing BH).  If you are having issues still, you can try disabling other 3rd party plugins to see if they are interfering (restart afterwards).  As a last ditch effort, you can revert your Sublime install: https://www.sublimetext.com/docs/3/revert.html.\nThere is nothing inherently wrong with BH as it is working for me on Windows, Linux, and Mac.  Also, there are a lot of people using the latest ST3 with the latest BH, and you are the only one with this issue.  All signs point to something odd with your specific install.  Maybe something got corrupt, I'm not sure, but I can't reproduce your issue.   As far as I can see, there are no other issues with BH.\n. Make sure that template gets followed when creating an issue on this repo.  Eventually, all of my repos will  follow a similar pattern.  I appreciate the clearness of expected vs actual, but it is also helpful for me to get info such as BracketHighlighter version and such as that can be critical in helping to solve bugs.\n\nI don't understand, how I can highlight angle brackets in tags.\n\nTo answer your question now.  The main picture on the readme does show the entire tag being highlighted.  That was from a much earlier version of bracket highlighter.  It became kind of annoying having the entire tag highlighted (attributes and all).  So a change was made directly in the tag module to just highlight the tag name to be a little more less annoying.  It is a bit more low profile, but it is also less distracting than when it was encompassing the entire tag with attributes.\nUnfortunately, it is not configurable.  Ideally, I should update the main image to reflect the current behavior.\n. lol.  Well that is new :smile:.  It was unintentional, but I guess that works.  That setting was supposed to give an alternative icon when the tag module overrides the angle rule, but it looks like I added an undefined state that brings back full tag highlight.\n. I can not promise this will always remain, but I have no intention of going out of my way to change this behavior.\n. As question has been answered, I will close this.\n. Not currently.  It is implemented as hover only at the present.\n. Please explain in full detail how you imagine the feature working. Do you mean when (and only when) the caret is adjacent to the bracket is when the popup would be displayed?  I imagine the desire is possibly for those who are keyboard only users?  I can't really give you an answer unless you layout fully how the proposed feature would work.  I could say yes, and then the feature might actually turn out not as I expect.   I just want to make sure we are on the same page.\nSo please explain how you envision the feature to work, and please do it using the issue template (omitt the things that don't apply -- I don't need version info for feature proposals etc.).\nThe issue template is probably more important for bug reports, but I've been barking at people about following the template, so I kind of have to bark at everyone to make it equal.  I would just revise your opening post.\n. Please read this https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md.\nPeople often make vague feature requests or bug reports that tell me very little.  That is why I created the issue template to encourage people to think these things out before bringing me in.  From our short discussion, it is clear that I  didn't fully understand your feature proposal as your end goal wasn't fully described.\nPlease write up the proposal proper in the template and I will be happy to give a response.  It is a small thing that I ask.\n. When you created the issue, there was a template (which I pointed you to in the last post).  You deleted all the content (but you weren't supposed to), but it is stated in the template to not delete the content.  Please use the template as I require all to use it.  It's just my new policy to encourage people to create better issues.\nDescription is fine, just modify the opening post with the template and place your info under description.  If it is easier to close this issue and reopen a new issue to get the template, that is fine.\n. Thanks for updating.  I updated the opening post with your updated description.  You didn't need version and reproduce for a feature request.  I know it may seem silly, I am just trying to get people to follow my instructions.  So I require everyone to follow it (even when it isn't as important), people are likely to see the pattern and follow through when it is important.  Thank you for your patience.\nIn answer to your question, yes I would be okay with a command that could be bound to a key mapping.  I am open to a pull request. If it turns out to be too confusing to implement cleanly, I am open to adding this feature myself.\n. Before you get started on this.  I might want to tackle this myself.  I want to push popups to their own library.  I might want the popup to display both opening and closing bracket if both are offscreen etc.  I think I have an idea of what I want, and it may be easier for me to implement.\n. Okay, I went ahead and refactored this to work via a command.  In the future I may make it work when the cursor isn't on the visible bracket, but just between the brackets.  And I may even may it show both brackets if both are off the screen.  But for now, it works just like hover.  It requires the cursor to be on the bracket, and then you can run the manual command.   Thanks for the suggestion.\n. > Thank you so much for the work. I deeply appreciate your work and the time you spend writing comments.\nThanks.  It is always nice to hear \ud83d\ude04 .\n. Looks like the next release you should be able to run the command anywhere (even when cursor is not on one of the brackets), and it will show both brackets if they are both offscreen.  When a match cannot be found, the new search without threshold link will auto_run the popup command again.  You can also feed in a no_threshold option in your keybinding to always execute by performing a no threshold search before attempting to show offscreen cursors.\n\nStill have some cleanup to do, but I like the new feature.\n. Alright, full feature is in.\n. I agree.  I am trying to be more thorough, but it doesn't surprise me that bad examples exist from previous pulls.\n. Yeah, I was surprised the linter didn't pick it up.  I would have easily missed it if it wasn't the only change in that last revision :).\nThanks for the pull.   This should make it in the next release.\n. This is already possible.  All I did was write a front end for it: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_remove.py#L31.\nSo if you want a keymap:\njs\n    {\n        \"keys\": [\"alt+shift+w\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketremove\",\n                \"args\": {\"remove_content\": true, \"remove_indent\": false, \"remove_block\": true}\n            }\n        }\n    },\n. Please do follow the template in the future.  Post version and put description under description.  Omit things that aren't applicable.\n. @JoeGutierrez I assume you figured out the issue?\n. Got it.\n. I know why it's failing, I just don't have an easy solution yet.\nPHP, for some reason, has two different ways to specify conditional blocks.  I hate that PHP has too different ways because that means you have to have a way to differentiate between them.\n1. foreach(): //some comment\n2. foreach() { // some comment\nSo one of these scenarios we end the statement in :.  This one will end the block with endforeach.    The other ends in { and we don't want to match the keyword, but we instead want to match the {.  So current the regex looks for the block to end with : and will allow comments to come after it.\nThis is what you have foreach ($xml_obj->designs as $design) { // Source: http://www.domain.com/.  Crap, do you see it? ://.  Sigh, well regex isn't good enough.  And frankly I don't think regex should be used.  What we really need for PHP is to look for the keyword, and then use a BH hook to then validate the keyword by looking ahead (probably with more complex logic than regex)  to determine if we are in a condition 1 or condition 2.\nBasically, what you are seeing is a result due to PHP not picking 1 way to do their conditional statements, and also us using  regex (which is frankly not well suited to this scenario) to try and differentiate.\nSo yeah, for consistent PHP keyword matching, the rule needs to be overhauled to probably use a bh_plugin to validate each keyword.\n. I might have a temporary solution in mind.  Let me play with this and get back to you later.\n. I submitted a fix, so it will be a little better, but it is still flawed.  This would need to be reworked as I mentioned previously, but hopefully this will be better until I or someone else provides a more permanent solution.\n. > I'll test it once you release the update and let you know if I find any other issues. Thanks.\nI am sure if you look hard enough you will find more issues.  This is not the final fix.  My aim is to reduce the chance of issue until this is fixed proper.\n. I'm afraid I need you to follow the template for support: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md.  Read the template and read this http://facelessuser.github.io/BracketHighlighter/contributing/.  Please provide as much info as you can, such as a link to the syntax highlighter you use etc.\nI require everyone to follow the template to get an official response or support.\n. > You are human and should be able to understand what is meant. \nSlow your roll.  This is rude.  You are asking for me to look into something in my free time, but you don't want to do what I ask of you to get a piece of my free time.  I can understand if what I want isn't clear in the template; I can fix that.  But I am not okay with rudeness.\n\nSo let's step back a minute and take a look.  Maybe there is a misunderstanding here.\nYou said :\n\nHowever when I testet it with this spintax structure\n{Word1|Word2|Word3}\nit didn't work.\n\nSounds like a bug, not a proposal. But even then maybe there just isn't support for spintax language and that is what is being asked. The template also asks people to read this: http://facelessuser.github.io/BracketHighlighter/contributing/.\nBut I will quote it here:\n\nThe most common requested enhancement for BracketHighlighter is for new rules to add support for {insert your favorite language here}. I, like you, am proficient in very specific languages. I probably don\u2019t use your favorite language or there would already be a support for it. I don\u2019t have time to learn the nuances of your language. For these reasons, support for new language brackets requires pull requests from the community.\nThough I will not personally implement rules for your favorite language, I am more than willing to offer suggestions and guidance to help those who may struggle to create rules for their specific language of interest.\n\nYou go on to suggest:\n\nIt would be great if your addon could show unclosed {} brackets.\n\nSounds like a feature request.\n\nSo, I am a reasonable guy.  Maybe it isn't clear that I want the structure followed in the templates with headers etc.  I want that.  I will update the template to clearly state that.  Hopefully that is clear now.\nI want to know if there is a bug with highlighting or if this is just a feature request.  This was not made clear.  I want as much info as possible.  Is there a highlighter for spintax that you are using?  Or is this just done in plain text syntax highlighting?  I don't know the context of your question.  So please give me all of that in the template structure I provide with version info posted.  Sometimes people are on outdated versions and that is why they see issues.  I think I will probably just require versions even for feature requests to avoid people requesting existing features because they are on an old version.  So I will update the template there as well.\n\nThe appropriate response in the future is maybe: \"what did I do wrong?\"  not to insult me with \"You are human and should be able to understand what is meant. \".  Am I clear?  Remember, I don't owe anyone anything.  You are asking for support.  You don't get to demand support.\n. I imagine your language isn't working because you are most likely looking at the file in plain text.  All bracket highlighting is excluded from plain text as plain text is free form without predictable structure or scoping context.  \nI don't see any spintax highlighters on Package Control, so you should write your own syntax highlighter, or you can enable basic brackets in your local settings.  See documentation for more info.\nIf your language requires additional rules once it has a syntax highlighter, additional language support can be added via a pull request.\nIn the future, fill out the template and be respectful.\n. > Because It seems a little bit like you've had enough by user requests etc and every request pisses you off a little bit, because it means work to do, to think again in how to code that etc. Isn't it behind this? \nYou would be wise to not make grand assumptions without experience as a programmer that supports multiple repositories.  What pisses me off is not requests, it is rudeness and disrespect.  My request for you to follow the template was business like and without malice.  You can spin this however you want, but you are in the wrong as you have been both rude and disrespectful.  I ask very little for my time.  I don't ask for money.  But what I do ask is that people simply first try to do what they can to help themselves (read the documentation), and simply fill out a template.  Instead of apologizing, you have instead doubled down and added more insults.\nI've been patient and even answered your question despite your rudeness, and I have pointed you to the documentation.  You have not read the documentation as all of your current questions would have been answered if you had: colors, enabling brackets in plain text, etc.  By reading the documentation and default settings files, you should get a vague idea of how languages are supported even if the concept of Python and other languages is unfamiliar.\nIf you choose to read the documentation and are still confused, you can open a new issue and follow the template appropriately, citing what in the documentation you don't understand so it can be further clarified in the future.  I don't expect my documentation to be perfect, and I don't expect all people will understand it easily, so I have no problem addressing confusing concepts.  I am very accommodating to those who are respectful and kind, but my patience only extends so far to those who are not.\nThere is documentation on this site.  BH may in the future present a message that directs people to the documentation on first install. But in general basic BH works out of the box except in languages that have no formal syntax highlighting support.  Plain text is free form and doesn't have a structure like code does.  This presents difficulties with the current way BH operates.  Things like smilies (which are not meant to be treated as brackets) would be treated as brackets breaking the bracket matching, as would apostrophes and the like.  Code usually has the concept of comments and strings which are scoped in syntax highlighters (that colors the code), and those scopes are used to allow BH to avoid troubling free form text issues in things like comments and strings.  You can already enable these things, and you can change their color as desired.\nAgain, please direct future questions to a new issue following the template.  I will close the issue promptly next time if rude behavior is displayed.  I am locking this issue.\n. @deathaxe.  Your description is fine, but please follow the template format.  I require people to follow the template to ensure I get all the information I desire, like BH version and version of dependencies.  Please update the opening post following the template, and I'd be happy to look at this issue.  Thanks.\n. @deathaxe, please make sure you update the issue as requested as work will not start on this issue until it is updated with the requested changes.  I will probably be making a release within the week, and any changes associated with this issue may not make it in.  It is important for me to have version info for the plugin to ensure people are seeing the issue in the very latest version with the latest dependencies etc.  I don't think you need to provide steps as you have done fine in the description.\nI have a policy that if issues remain in an invalid state for a week, I close them.\n. > What template? \nI see you posted the template in the first post now.  But usually you would just fill out the appropriate section.  I leave info under each section to tell people what I am looking for.  You would just remove the text under the headings.\n\nYou provide a very comprehensive description, but I do not recognize it as template nor do I get an idea where to put which information to\n\nIs there some way I can help make it more recognizable as a template?  I'm running into the issue where if I just tell people to check out a page in the the documentation explaining what I want, people don't bother to check it.  So I try to give people everything upfront that I want in the issue template.  But maybe people are still confused they are supposed to fill out the appropriate section with what is described there?  Any insight will be helpful.  I find some people intuitively get it, but others either do not, or just choose to not follow it.  I am open to suggestions that can make it more clear what I am looking for. Thanks.\n\n\nI am always at the latest patch level available\n\nIn practice I found this is not the case with everyone.  And sometimes (for what ever reason) people can be on old versions.  Package Control also doesn't always do a good job of keeping dependencies up to date either, so that info is useful as well.  In the template I mention the following which is what I was looking for.\nRun the following command from the menu: Preferences->Package Settings->BracketHighlighter->Support Info. Post the result here.\nAnyways, I will take your word that everything is up to date.  Please in the future use the Support Info command in the menu and post the results in issues.\n. I see you've updated the opening post.  Thanks!\nIf you can think of any ways to make the issue process less confusing, please do let me know.\n. Thanks @r-stein, I will give that a try.\nI've been iterating through different templates to try and not be annoying but also trying to make it clear what I expect.  I know I will never get 100% of people to comply as there will always be someone who doesn't want to do it just because you asked them to, but if people are generally making an attempt to give what is asked, I think that will be a win.\n. As for the issue at hand.  I know what needs to be done.  I need to refactor how special tags are treated.  I've been treating things improper. I will need the following moving forward:\n- optional_tag setting: tags that can optionally not be closed (will not allow self closing style)\n- void_tag setting: tags that never have closing (can take self closing style or not, but are always single)\n- self_closing tags: Require a closing unless done in self closing style.\nI will also add a new profile called xml, and will instead have the xhtml style be moved to a different profile.  I will provide a first line setting for the xhtml profile that will enable xhtml profile if we are in HTML files that start with an XML header.\nI think this will clean up special tags in all formats.\n. The fix contains some breaking changes to bh_tag.sublime-settings.  This should improve special tag handling quite a bit as previous logic wasn't that great, which was mainly because of my initial misunderstandings.  XML will be handled differently than XHTML (which should have been the case from the beginning).  HTML tag handling for optional, void, and self closing tags should be better now.  Unfortunately with optional tags I don't have logic determining whether the the optional tags are valid, but BH is not meant to be an HTML validator anyways.\n. > Just for clearance, I did not want to be unpolite with my comment, that's why I deleted it again.\nI didn't catch anything impolite (unless I missed something you edited later).  I had no problems with our interactions.  If some how it was interpreted that I did have a problem, that was incorrect.   Apologies if I have left an impression otherwise.  I usually try to be patient unless people are rude.\nYour description was very thorough and acceptable, but I did also want the version stuff.  In general I am trying to create a level of consistency.   I get so many vague issues, or things I have no idea how to reproduce, or pictures where I have to transcribe the whole picture's content by hand to reproduce the issue when they could have also just provided plain text I could copy and paste.  I hold everyone to the same requirements to encourage those who create exceptionally vague issues to give me something more I can work with so I don't have to keep bugging them for more info.\nIf everyone has to follow the same procedure, it becomes very clear to newcomers what I am looking for.  Like you, they can look at past issues and see.\n\nThat's why I would suggest the following change to your current template to clearly show up gaps to fill and put descriptions in the background a little bit to make clear they are hints only.\n\nI will take this into consideration.  Anything I can do to appropriately emphasize my expectations is appreciated.  Maybe it will make things more clear.  I will probably omit the Suggestion in favor of Requirement as that is what I actually mean :smile: .\nThanks for your contributions, they are very much appreciated.  And this was a good one that had greater implications when I looked into it further.\n. Thank you for your contribution to BracketHighlighter.  Unfortunately BracketHighlighter now requires all issues to follow the issue template. \nPlease read and fill out this template by replacing the instructions with appropriate information.  If the template is not followed, the issue will be marked Invalid and closed.\nOne the opening post has been updated, I will be happy to help you with this issue \ud83d\ude04 .\n. @jfcherng  thanks!\nSo there is actually a whole section in the documentation that explains how to deal with your issue, I will paraphrase here.\nSo yes, user brackets do get appended to the end.  In a lot of cases this is fine, but obviously not all.  Some times you may not only need to move your rule before the default ones, but you might need to your rule before the defaults, but one or two defaults need to be before yours.  This creates something more complicated than  a user_brackets and override_brackets could easily handle.\nBut no fear, you manually specify the index of your rule, or even change the index of your existing rule.  So each rule has an implicit position.  The first default rule is in position zero and so on through user brackets.  If in your user_brackets you override an existing default rule that is position 0, it will still be in position 0.  This is nice so that overriding doesn't break the existing carefully constructed order.  But if you need to, you can  enable debug mode and run a command to see all the position indexes of all the rules.  And then you can manually specify the index with the position parameter.  This allows you to insert, append, prepend, and even move existing rule positions.  Check out the documentation and let me know if you have any other questions.\n. FYI, I did notice a mistake in the documentation.  Where I use mylang as the example language, I mess up in one of the examples and it is called trex.  Don't let that confuse you.  I'll fix that tonight.\n. I should probably mention that you don't have to assign positions to all defaults, but it doesn't hurt.  If you create a new rule with position 0, all the implicit positions should shift as now position 0 is taken.  Manual have the highest weight, then implicit fill in the gaps.  But either way it should work.\n. @jfcherng, I will take a look at that later.  Thanks for letting me know.\n. Yeah, now that I see the picture you posted, yeah that is a bug.\n. This will be fixed in the next version via https://github.com/facelessuser/BracketHighlighter/commit/3ffac9122b6c7bbe937f18c538e470e6f80738ea.\n. Thank you @r-stein.  Yes Markdown syntax would need to have a special syntax for quotes.\nThis is due to the fact that BH only scans a window of the file for matching the brackets for performance, and since start quotes look the same as end quotes, this causes problems.  Not only that, Markdown, being prose, introduces more complicated situations dealing with quotes as you would need more complicated heuristics, and even then you will still have false positives at times.  So scope context is very important for quote type where start and end brackets look the same.\n. I'll say this.  You could probably add your own personal rule to do this.  You would have to construct a regex with lookaheads and lookbehinds to get some sense of context for each quote.  You could maybe get it fairly reliable.  It is probably no different than some markdown plugins that convert quotes to fancy quotes, but even those mess up at times.  The only reason I wouldn't spend my time to make this a default rule is because I doubt it would ever be 100% reliable, which means I would get issues regularly filed to fix situations.  I do think it is possible to construct something with maybe 80%-90% reliability for personal use.\n. You're going to feel silly when I point this out...\nUser/Preferences.sublime-settings:\n\"match_tags\": true,\nYou should probably pick 1 tag highlighter \ud83d\ude09 .\n. @evandrocoan The dotted line is the builtin tag matcher.  BH does the solid.  When they are both on, you get both, but one is going to be more dominant I guess.\n. Glad you got it working.  This makes me think I probably need to mention this in the documentation.   This is not the first time someone has asked about the match_tag conflict.\n. It's not just dotted line issues.  Sublime's matcher behaves differently at times.  I think the real point is that people need to turn off one or the other and not try to use both.\n. > 1. At the first part on this video is enabled the search_threshold to 500 and performed mouse selections from down to up, very fast. Here we may notice a very good response.\n\n\nAt the second part, is set the `search_threshold``to 50000 and performed the same mouse selections form down to up as on the first part, however Sublime Text does not respond most of the time and we got stuck.\n\n\nThis is completely expected and understood.  This will vary on machine to machine which is why in steps to reproduce you mention underclocking the CPU.  I personally use 10000 as that gives me a good distance with good performance.  Some of my faster PCs could probably take more without  too much issue, but I have found 10000 to be fine for me.\nEven Sublime's builtin bracket matcher has a limit (or used to -- I haven't bothered checking recently).\nThe reason I don't plan on  making the actual bracket matching asynchronous is that I am referencing the view at different times while I am calculating the bracket pairs.  Since the buffer could change mid match(es), this could be very problematic.  For certain matches I have to validate by checking the syntax of matches etc.\nEven if I did things asynchronously, it will still take a bit for brackets very far apart, and though you might not get the lag, you would have incorrect brackets appearing at different intervals (which would then get cleared).  Suppose I didn't just show those brackets because they were now invalid, they hold us up from showing your next selected bracket as though the matching is on a separate thread, we are still only utilizing one extra thread.  The first one has to finish before I start the next.\nBH tries to match during idle time.  So it is good to limit it to tasks that are reasonable for that machine to accomplish during idle time. If 50000 isn't reasonable for your machine, I would suggest using something less that is.  If I can't match the bracket in idle time, it is likely I have moved on.  When you have brackets very far apart, you can execute the search with out threshold command and find those, but you will then be prepared for the wait as you've made a purposeful effort to invoke the match, and you will wait for the result.\n. Some further thoughts.  I'm not sure what gitgutter is doing, but if it's main implementation is to show you the status from the git app, that makes sense.  That entire process is offloaded to another thread because it doesn't need to know about the sublime view.  It is diffing the saved file against the last git revision etc.  Since I need to actually process a live view, this isn't as useful to offload.\nAnother plugin I wrote is ColorHelper.  I present color previews, but I do that asynchronously even though it is applying it to a live view, as I generally feel the situation lends better to it.  I am dealing with only text that is viewable.  I do all my syntax scope checks in one shot up front.  It's also generally okay that the previews aren't always instant.\n. Closing this as I don't really think running the matcher through asynchronous matching will work too well do the way BH does things.  For the time being, we will stick with synchronous matching with a threshold.. I've had something like this reported before by one person, but I am yet to reproduce something like this ever.  It may have to do when packages are bundled as sublime-package files.  But here's the thing.  Sublime is supposed to run plugin_loaded for all packages before it starts firing off their events.\nWe can see that we initialize bh_thread in plugin_loaded: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.py#L1179.\nBut your error report shows this:\nFile \"bh_core in D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\Data\\Installed Packages\\BracketHighlighter.sublime-package\", line 1077, in ignore_event\nAttributeError: 'NoneType' object has no attribute 'ignore_all'\nBut when we see that is an attribute of bh_thread: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.py#L1077.\nIf I were to patch that one attribute, another one probably throw an error because you are having some weird case where sublime is running plugin events before plugin_loaded.  Not sure what is expected for me to do as I need to initialize things in plugin_loaded before events get handled.  This feels like a Sublime bug.  It also seems to only happen to very certain people.  Is it because you are syncing your plugins with dropbox?  Is it only when with zipped forms of BH?  From what I remember, the other guy who had this issue, it was only a problem on first load of Sublime.\nOne thing that seems clear is that it has to do with a Sublime bug.  Maybe I can initialize the structures and classes I need outside of plugin_loaded, I don't know yet.  But I know I shouldn't have to.\nI will look and see if there is something I can do to ensure the important thread class is loaded, but if it turns out I have to have it loaded  in plugin_loaded, then there is nothing I can do.. I might just have to put a check to exit all Sublime events if bh_thread is none.  Maybe that will fix things.. > You cannot reproduce this? Create a package with the same name as mime:\nIt's more complicated than that.  I mentioned I've seen this before:\n\nhttps://github.com/facelessuser/BracketHighlighter/issues/305\nhttps://github.com/facelessuser/BracketHighlighter/issues/232\n\nIt's not just you need your plugin and and then it fails.  It is a bit more complicated.  I have all of mine installed locally as I develop on them, and they are not zipped like they would be for those who use Package Control.  Is that part of it?  I don't know.  I've tried to reproduce this issue before with people.  I figured they were isolated situations, but this is the third time.\n\nI do not sync anything with dropbox, it is on the dropbox folder for backup purposes. I sync things with git at the develop branch: https://github.com/evandrocoan/SublimeTextStudio/commits/develop, but only the absolute necessary as settings and source code files.\n\nThe point really is that I have a hard time duplicating this and I feel there is some other factors at play.\n\nYou can, you just cannot call the Sublime API outside the plugin_loaded() forward.\n\nYes I am aware it is possible, I just didn't know if it was possible for how I was doing things.   The statement was more suggesting that I need to look at how I handle things in my code to determine if I could do it.\n\nSeems simple, if it being called when its state is None, check for None before call it.\n\nI don't want to waste cycles on this, but if I have to, I will. I don't think I want to mask other errors by using a try catch.  And I would need to implement this in every event to be safe.  I could evaluate the failure in the catch, but I'm just not sure if it is worth all that to save the insignificant amount of time lost to do the None check.\n. I believe HexViewer is still susceptible to this as well, not just ScopeHunter, but ColorHelper looks to be protected against this currently.. Sounds good.  I will have a fix in a release probably tomorrow.. Glad you figured it out. Next time please do follow the template for support.. Thanks @r-stein, you are correct.  PackageDev chooses a different way to style their strings.  If they choose to do things differently than how the current string rules expect, you will not get string matching in those syntaxes.\nMy stance on bracket rule support is that they are supported by the community (unless I have a vested interest in the specific rule).  I don't use PackageDev, so there is no motivation for me to dig in and come up with a PackageDev specific quote highlighting rules, but I would gladly accept them via a pull request.  I am even available to answer questions if you or someone else attempts a pull and gets stuck on something.\nWith all I have going on, it is quite time consuming looking into the nuances of every syntax highlighter package and obscure language that I don't use.  I will gladly add them via pulls, but I need the community to pitch in to help with these kind of things so I can focus on actual bugs and features of this plugin and others (which I always have coming in :wink:).\nIn short, PackageDev needs to either conform to the current string logic, or there will need to be a pull request to add PackageDev string logic.  Or alternatively, don't worry about quotes in PackageDev :smile:.\n. Thank you for your contribution to BracketHighlighter.  Unfortunately BracketHighlighter now requires all issues to follow the issue template. \nPlease read and fill out this template by replacing the instructions with appropriate information.  If the template is not followed, the issue will be marked Invalid and closed.\nMake sure to be as descriptive as possible so I can easily assess what your issue is, or what kind of work it would take to implement your feature request.\nOnce the opening post has been updated, I will be happy to discuss the issue \ud83d\ude04 .. This request is too vague and and didn't follow the template.  I will give it a couple more days to be updated with more details following the template, and if it is not updated proper, I will close it.. Thanks!. Yup, @r-stein is right on track with his answer.\n\n\nCreate your own.\n\n\nI don't know if it is \"easily\" added or not as I haven't looked at Ruby's backtick quote scoping (and this can vary from highlighter to highlighter, but theoretically it is possible.  Since I imagine it is a case of opening and closing scopes being identical, it is likely you would scope it like quotes, but depending on the syntax highlighter, you could search for all backticks and filter them by scope if the highlighter scopes opening and closing backticks differently.  It is tough to say without me looking into it further.  I do cover this in the docs, and there are examples.\n\n\nI don't know what your plans are exactly, but I do store some info in the view, see here: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.py#L978.  It's not documented as I added just for dealing with hovers if I recall.  Maybe that can help you.  There are probably different approaches you could take.. What is your middle idea?. You should be able to handle two brackets flanking the cursor.  Do you have some code I can look at and try?. Also, if you have a good working ruby backtic rule, please issue a pull.  It would make sense to include it here if it's working well.. One thing to note.  BH, when posed with a choice of two brackets, BH always favors left for consistency.  That is probably why you are having issues with two brackets on either side.  It sounds like you would prefer a system that favors right.... I see now... And since BH doesn't really consider the next pair fully, that is where you are stuck.\n\n\nYeah, I don't really have an easy answer for that.  I would have to adjust the algorithm to always look ahead for an additional pair.... > I think that rule would also apply to shell scripts and perhaps many others (perl even?)\nMaybe, the scopes would probably be different for every syntax highlighter, so I would probably fold them in as each one gets tested and confirmed.. What about when your bracket is between the opening square and the closing round?\n()[]\n. > I am unclear on the values for the language settings. I tried adding \"Shell Script (Bash)\" to the language_list value as shown above, but that is not working. \"Shell Script (Bash)\" is what is displayed by the editor in the lower right of the window. Meanwhile, if I try to set syntax-specific settings it says something about \"Unix Shell Generic\".\nYou would use the name of the syntax file, ignore the name shown by the editor.  Also, @r-stein is using this scope \"string.interpolated.ruby\".  It is probably different for bash.. > Luckily for me, I always want to favor in one direction or the other. Isn't that good enough?\nIf it is always a manual thing, and never expected to be auto decided, then yes.\nIn order to do this, I would need to add the logic to handle this reverse sense of priority.  As things get complicated to have both enabled simultaneously, this could never be implemented in the auto bracket finding.  It could only be used as either left or right priority, though you could manually switch priority.\nNow, I need to think about whether this is a direction I want to go in :wink:.. It's probably ShellScript/Shell-Unix-Generic.  I just used PackageResourceViewer and navigated through the packages to find it.. I am only aware of brackets before and after the cursor in the moment of evaluation, then it is forgotten.  Except I also store highlighted bracket info in the view.  I only highlight one bracket.  You mentioned a darker underline for one over the other, but I only highlight one.  If you see another underline, it is likely you still have Sublime's highlighter enabled at the same time.. ScopeHunter will also tell you the name of the Syntax File if you have that option enabled.. I guess I do match them as I go sort of.  I might take some shortcuts in certain areas. But yeah, I don't currently do anything with them because I don't care about them.  If brackets aren't the closest to the cursor, they get tossed.  And I stop matching as soon as I have the bracket of interest matched.  It may not be as helpful as you would think...maybe the initial brackets, but anything after the target match would be missing I imagine...I'd have to look at the algorithm again.. > Shall I do a pull request and place this into the bh_core.sublime_settings file?\nYes.  I think someone has requested it before, so imagine there will be some happy people.. The purpose of this plugin wasn't necessarily to provide a match library for other plugins in ST.  Though I am not against it being used as such, it is more work to make it so than I have time to do.  I am going to go ahead and close this.  If I have time in the future and find the motivation to do so.. There's too issues here.\n\n\nHover isn't disabled on global disable.\n\n\nWhen we do global disable we incorrectly set locations to an empty list instead of an empty dict: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.py#L368.\n\n\nSo then we enter into the hover, when we shouldn't, and then access a list, when it should be a dict.\nThat's the story \ud83d\ude09 .. I wouldn't use the rule you are using.  I would append your go stuff to the default tag rule: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L369.. You should use the syntax file name (minus the extension), not what you see in the bottom right hand corner of Sublime.  I believe you are looking for GoSublime-HTML.\n. Ah...I know what's going on... :(.\nOkay, I can fix that.  I added a test to check document spelling, but it's in the root, so Sublime tries to import it.  I need to move it out of the root or require yaml in dependencies.. st3-2.23.3 has been released.  Let me know if (when available in Package Control) fixes your issue.. Just thought I'd break everyone's workstation today :smile:.. 1. Please follow the template next time.\n2. The bracket search framework is purposefully generic.  I am afraid I have no intentions of adding specific logic to account for one specific type of bracket.\nI'm going to have to pass on this.  You can always use the on-demand bracket search which ignores the threshold if you need to see the pairing.. Is it already installed?  Check your Packages folder and/or Installed Packages folder.  It seems to be showing up in Package Control for ST3  https://packagecontrol.io/packages/BracketHighlighter.\nIf it isn't showing up, and you don't have it already installed (even a broken version), you may need to file an issue with Package Control as it seems to be showing up on their site fine which indicates that they see it.\nThere is nothing I can do here, but I suspect you already have it installed.  Maybe you tried to clone it or the install went bad, but I think Package Control is most likely seeing a local copy and not giving you a chance to install.  If that is not true, you'll have to ask them why else it might not be showing up.. I can only guess what what was going on, but I just support the plugin, not Package Control.  I'm glad you were able to get it installed.. I'm going to need you to follow the template (https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md) for me to address your problem.  Please read the contribution guidelines to also get more info on what I am looking for: http://facelessuser.github.io/BracketHighlighter/contributing/#bug-reports.  I didn't mention this in the last issue as you weren't even able to install the plugin.  Please update the opening post.. Your description of the problem is very vague.  Please describe in detail what you are wanting that you aren't seeing.\nPlease also read the documentation as they may answer your question.. Since I haven't received anymore clarification on the issue you are having, I will have to close this issue.. I think this is what you are looking for: https://github.com/facelessuser/BracketHighlighter/issues/405.\nPlease use the issue template when creating issues next time.  Thanks.. Did the suggestion work for you?  If not please give a detailed instructions.  I leave issues open for about a week when waiting for additional info to determine if the issue is valid.  If I don't hear back in about a week, I usually close the issue.. @r-stein is correct.  I rarely add any shortcuts by default to my plugins to prevent shortcut conflicts.  I let the user manage their own shortcuts.. > Yeah, the problem is that at the moment I do not have time to learn how to write the definitions of shortcuts...\nIs what you were looking for not here? https://github.com/facelessuser/BracketHighlighter/blob/master/Example.sublime-keymap.\nIt's a challenge at times managing all the plugins that I do.  To a large degree, I rely on the community to help me get this kind of stuff documented.  If you feel an example could be added to help out people in the future, please do issue a pull request.. @r-stein beat me to it :slightly_smiling_face: .  Yes, that is exactly what I use.. That's basically what I already did.  But I if I tweak my settings, I don't always remember to update examples in BH.  My personal settings aren't auto synced to BH.  Again, that is why pull requests can be helpful to make sure this information gets out there.. Glad you figured out out.. I can't look at this unless you provide an example I can copy and paste. Pictures are fine, but I'm not going to try and look at the picture to recreate the issue.  Also, please provide an me with what syntax highlighter you are using for your PHP code.  If you are using the default one, then just let me no that it is the default.  Thanks.\n. What syntax highlighter are you using (not color scheme)?. Yeah, PHP.  Is it the default one or a 3rd party package?. Thanks.  I'll take a look and let you know what I find.. I need you to provide me with a tested failing example.  The example you gave me did not show the issues you described.  Please test out the snippet before posting.  For instance, the snippet you posted may fail when included with the rest of your original file, but by itself, it is not failing.. I could not reproduce your issue until I lowered my threshold for search.\nI use the following setting in bh_core.sublime-settings:\njs\n    // Character threshold to search\n    \"search_threshold\": 10000,\nIf you use that setting, I imagine your issue will disappear.  BH, to keep things performing well, doesn't auto-search the entire view, but it searches a window around the cursor whose size is controlled by search_threshold.  I just can't let it search the whole file on every key press or selection or BH would slow down Sublime.  Sometimes BH has a hard time resolving all brackets without a bigger window.  I use the setting 10000 in my personal settings as it works well on my system, you can play around with that setting to get your best setting for your system.  Also, if you ever have a bracket that is too far to allow auto-search to find, you can always utilize the mouse-over popup window to search with no threshold (search entire file), or use the command palette command to search with no threshold.\nAnyways, it looks like things are working as expected.. Just to explain things a little further.  The reason why sometimes a bracket can be matched one way and not the other is for the following reasons:\n\n\nThe search window created uses the size from search_threshold.\n\n\nIt splits the size around the cursor equally (or as equal as possible).\n\n\nSelecting opening vs closing bracket shifts the window since the window is around the cursor.  In the case the window doesn't cover exactly the same chars.  So if a a bracket or parent bracket that is needed to resolve bracket nesting is right on the edge when selecting the opening bracket, it can sometimes throw off the calculation.\n\n\nI do find the matching of the div, when threshold is low a little concerning.  It seems that clicking the two different closing divs causes them to match the same opening div.  I may look to see if I can improve the algorithm to fix this corner case.  I'll have to analyze things to get a better idea why this happening in this low threshold environment.. I'm okay with a tag not matching if the window shifts which is what you showed in the example with the a tag. What I am concerned about is multiple closing brackets matching the same opening bracket like what you showed with the div.  I am doing a test right now where I can put multiple closing div tags, and they all match the same opening.  There is a bug that is allowing multiple ends to match to the same beginning.   That needs to be fixed.. Thanks for the report.  Now that I've looked into things a bit closer, I've created a new issue to handle the weird div matching issue.  It seems this bug is not specific to threshold per se, but an issue that manifests itself when at the tail end of the search.  When I have some time I will work through the issue to provide better tail end search logic.  From what I can tell, it is specific to matching only.. Hmm.  I assumed all of your issues were related to threshold, but I have a tentative fix that resolves the issues you showed even with low threshold.  I probably need to run it through more extensive testing before I release it though.  Anyways, I suspect this should be fixed in the next release as I seem to have a fix or am really close to having a fix.. It appears we are kicking out of the match loop too early.  We seem to break in a specific scenario when looking for tag open or close.  But it seems we should only break if looking for tab close.\n```diff\ndiff --git a/bh_modules/tags.py b/bh_modules/tags.py\nindex d860bdd..b3ef476 100755\n--- a/bh_modules/tags.py\n+++ b/bh_modules/tags.py\n@@ -406,7 +406,7 @@ class TagMatch(object):\n                     self.right = c\n                 elif self.left.optional:\n                     self.right = self.left\n-            break\n+                break\n     if match_type == TAG_OPEN:\n         # Find the rest of the the unmatched left side open brackets\n\n```\nThis is a tentative fix that needs more testing to ensure we don't regress in other areas.. I'm assuming you figured out your question?  Anyways, next time please do follow the issue template.  Version numbers can be important as some times people are behind and that is the reason for their issues.. Seems like gutter icons are at fault.  I think this is a ST3 Window's bug and not BH, but I am going to wait and see.. This was a Sublime bug in the recent 3127 release, not in BH.  Issue is fixed in 3128.. Add \"no_outside_adj\": true, to your command to get rid of some of the oddities.  But when you understand how BH works they won't seem odd anymore, but maybe you just expect it to work different than it does.\nBH always defers to the bracket on the left when given two choices. That allows for consistency.  Maybe some matchers defer to the right.  Left is what I chose though when I wrote this.  I get the impression that you expect it to defer right.  Changing the whole match engine's preference (or providing a configurable preference) would be kind of a pain.  Not sure if I'm willing to do that.  \nSo, as an example, if you are allowing the cursor to match a bracket when it is on adjacent on the outside (()_), then when presented with [()_] it will match () and not [].  Makes sense?  By turning off outside adjacent when do the match.  [] will be matched instead of ().. As for controlling where the cursor is placed for a given match, you write your own bh_plugin using the current when to get you started: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/bracketselect.py.\nYou can drop your personal one in a subdirectory in your user directory and load it instead of the provided one.  But preference will still be left unless I overhaul things in the future.. Try block cursor mode as well.  Turn off \"outside adjacent\"  and turn on block cursor mode.  I forgot that I added this for a vintage user: https://github.com/facelessuser/BracketHighlighter/issues/275.\n```js\n// Experimental outside adjancent bracket matching\n    \"bracket_outside_adjacent\": false,\n// EXPERIMENTAL: Special matching mode for block cursor.\n// Essentially, this provides a matching mode that makes a little more\n// sense to some in regards to the visual representation of block cursors.\n// This will override \"match_only_adjacet\" and \"bracket_outside_adjacent\".\n\"block_cursor_mode\": true,\n\n```\nAnyways, I think this \"block mode\" is more what you are looking for.. But to position cursor \"on\" the character when matching, you would need to modify the bh_plugin I pointed you at.. As for how the popup works, it just get fed the bracket location and selects it.  It's a little different than the bh_plugin bracketselect.  But there is no reason you couldn't write your own bracketselect that does the same thing instead of what it currently does.. Maybe in the future I will add a vim like bracket select module by default that people can use if they want to.\nAnyways, glad you solved your problem. I'll go ahead and close this for now.. As I recall, those \"cloned\" views don't have event listeners attached to them.  I don't think there is anything I can do about it as it is a limitation of Sublime Text.. This is a duplicate of #356.  I knew this sounded familiar :slightly_smiling_face:.  I believe my answer will remain the same as what I said there.  As this is a duplicate, I will close this issue.. 1. Next time please follow the template.\n\n\nIf you are going to post settings always post them in text.\n\n\nYour settings are not valid JSON. Place curly brackets around your high_visibility_enabled_by_default setting.\n. Which Lua syntactic highlighter? Default?. I currently leave support for languages I don't use up to the community, but as this one looks pretty straight forward, I'll take care of it . I have had people come over here about this issue on OmniMarkupPreviewer before.  They continue vendoring their own Python Markdown and Pygments.  This might be because they support ST2, and recent Markdown versions drop Py2.6 support. Even if this is the case, I would accept a pull to support Py2.6 via pull request for at least for the last known working version on Py2.6 on the common Markdown dependency.  On top of that, OmniMarkupPreview also refuses to access the package relatively and instead imports its vendored version into sys.path.  That's were the common Markdown dependency is (which is the point of dependencies).  That is why there is a conflict.\n\n\nIf they continue to ship their own vendored libs, they need to switch to using them relatively instead of importing them into the global path, or switch to using the common dependency. BracketHighlighter is not the only package using the common Markdown dependency. If they must continuing supporting ST2, they can issue a pull to the dependency to add the last known working version for Py2.6, or even port existing versions of Markdown to Py2.6. Or stop importing theirs globally. I'm putting this issue fully on them.  Instead of fixing this they continue to allow people to do hacky workarounds: https://github.com/timonwong/OmniMarkupPreviewer/issues/85.\n. Closing as I view this as an issue with their package.. Yeah, I don't know any they do it the way they do. It requires everyone to use their\u200b version, and no packages can count on it being there.  With dependencies, you can require it, and count on it. And it is the same for everybody.\nI can understand why you'd want to be locked to a single version. You don't have to worry about it changing and breaking on you. But you have to do it right so you don't break everyone else. Even if it requires modifying the package so it works in a relative manner.\nAnyways.  I hope it does get fixed. You aren't the first to come to me about this . Please follow the template and provide support info. I don't know what version of BH you are using.. Not only do you need to post the support info, but also post relevant syntax highlighter you are using.  If it is the default PHP syntax highlighter, most likely it is because the default highlighters have all been going through a massive overhaul causing scope changes etc.  I suspect the angle in -> is getting targeted for HTML.  I don't use PHP, so this may require a pull request as I leave most bracket support up to the community, but imagine you just need to add a scope_exclude in the angle bracket rule with whatever they use to scope ->.. I know, but the template explains that I want people to run the support command via the menu which copies all that information over to the clipboard so you can copy and paste it here.  People sometimes think they have the latest, but don't.  It really helps me as I don't have to guess.\nI took a brief look before I headed into work today.  I don't remember the scope off hand....something.accessor.php, but that seemed to fix the issue in default PHP.  I just added that piece of the scope (not the whole thing) to the exclude_scope.\nDefault syntaxes have really gotten a lot better allowing me to drop 3rd party and custom syntaxes, but they have introduced small things like this.  Luckily these kinds of things are pretty easy to patch up.. This is a duplicate of https://github.com/facelessuser/BracketHighlighter/issues/417 and is already fixed on master: https://github.com/facelessuser/BracketHighlighter/commit/87c7f1ee343c141a0585974eb6c595cb5c870e69.\nThis is due to recent changes in the default PHP syntax (I am assuming that is what you are using).  Next release will fix this.  Release is scheduled for the end of the week.\nThanks for reporting.. Went ahead and release it.. If you have an issue, please open an issue following the template giving details. I don't specifically use PHP, so depending on what the issue is, it may be required that a pull request is needed.\nSyntax files get updated, and can possibly break things that used to work. But this issue was resolved whether or not it has resurfaced for a new reason. I also have no info on versions or syntax files you are using etc. But don't post that here; create a new issue.. Did you restart after installing? That is usually recommended to ensure all dependencies get loaded in proper.. It's from the mdpopups dependency.  I should probably make the pop-up failure be more specific where it came from.. As I'm the author of the dependency as well, I'll try to make it more clear in the future.\n\nIf you're in the US, have a good holiday weekend!\n\nI am, and thanks!. Thanks for the pull request.  I'll take a look soon.. You should also be able to hover over the bracket with the ? and a popup will appear allowing you search without the threshold.\nUsually you want to find a search_threshold that performs well, but not too big to cause issues when auto matching.  When you have a bracket beyond the threshold, you can mouse over the problem bracket and get the popup, and then click the link to do an \"on-demand\" search with no threshold.  This is of course if you have popups enabled.. @r-stein, Thanks!. Rainbowth takes your colorschemes and inserts a bunch of colors.  It is also pretty specific to your language syntax as it must add the colors by scope, and scope differs from syntax to syntax.  BracketHighlighter's mission is highlight scopes around the cursor making it clear where you are, not to colorize brackets.\nUnfortunately, I have no desire to add such a feature. I'm going to pass on this request.. Meh, it is what it is.. By the way, if you are upset with rainbowth, create an issue there or issue a pull request there to fix your issue. Or fork it and maintain your own version.. Thanks!  I'll take a look when I get a chance.. It really depends on what they are initially committed as and what your gitconfig settings are. \nMost likely, the first commit was done from my Windows system.  My global line ending settings allow cr as some projects I work on are Windows specific and use cr in all files. So this happens on occasion depending on what system I do initial work on for a file. I prefer nix style endings, but it is no big deal in this project if some are cr. When I notice these, I usually convert them over to nl.. 1.  Since you didn't follow the template, I'm not sure what version you're on.  I guess I'll assume latest....\n\nI don't program in Ruby. I leave language support (for languages I don't use) up to the community.  Unfortunately, I don't have time to learn the all the intricate uses of ruby keywords.  I support a lot of repos.\n\nI am going to need you to take a look at the ruby rules in bh_core.sublime-settings and issue a pull request.  I can give some pointers if you get stuck.   Alternatively, you can wait until someone else comes along and fixes it for you.\nAt the very least I would provide information here outlining the details about your corner case.  It may be helpful to mention other keywords that might fall into a similar corner case so that they can be fixed all at once.  I am guessing this situation is arising because case is preceded by return but I am not sure as I haven't really looked into it.. This regex seems to fix it.  Here we allow return for if, begin, and case.  I would assume if you can return a case, you can probably return an if, but I'm not sure if you can return a begin or not.  I'll let you run with it, but maybe testing is all you need to do.  If this is all you need, feel free to create a pull request with this, but this would need to be applied to both ruby and embedded ruby in the settings.\njs\n\"open\": \"((?:(?<=^)|(?<==)|(?<=<<)|(?<=return))\\\\s*\\\\b(?:if|begin|case)\\\\b(?!:)|^\\\\s*(?:(?:private|public|protected)\\\\s*)?def\\\\b[\\\\p{Ll}\\\\p{Lu}]*\\\\b(?!:)|^\\\\s*\\\\b(?:for|until|unless|while|class|module)\\\\b(?!:)|(?<!:)\\\\bdo\\\\b(?!:))\"\n. Is begin block valid after a return? If not, we still need to restructure the regex.  Please don't forget to issue a pull so we can get it in if it works.. As long as we are targeting valid ruby code, then I think a pull request would be acceptable for this.. \nWorks for me.  Keep in mind, my results are with the default ruby syntax on the latest dev branch.\nRegardless, you are more of a Ruby expert than I am.  I don't have time to debug Ruby specific brackets, nor do I know all of the Ruby corner cases to check.  If you have specific questions about BH rules, I can answer those, but again, I am counting on a Ruby user to solve this issue.\n. Also, you didn't have to close the pull request, you can update it when you figure out what needs to change.. Okay, I've reread this thread. \n\nIt highlights \"def - end\", even if I place cursor on \"example\"\n\nIf quotes is enabled, this should show quotes, so I don't know what was happening on your system.  If you only want highlighting to occur when you select the def or end, and not when your cursor is between them, there is an option for that match_only_adjacent.  So this seems to have nothing to do with the main issue discussed in this thread.  From my tests, what I suggested works fine.  Nothing was outlined or explained that didn't work as expected, so I am going forward with my suggestion and if it breaks something in ruby, a ruby user can fix it.\n. You won't see the images by looking at the file on GitHub. Images are loaded differently for phantoms.\nWhat happens is I reorganized the documents folder and moved the images location, but I also forgot to update the quick start links.. Next time please do follow the template.  It is difficult for me to get people to follow the template on issues that really require that information, so it helps when everyone sets a good pattern for other issue creators.  Thanks!\nThe issue has been fixed on master.. @braver People want a piece of my time and the only thing I ask is for is that people follow the template.  It requires little effort to do so, and I find it disrespectful when people argue about something that requires so little effort that helps maintaining this package so much.\nPlease respect the time and effort a developer puts into maintaining these public, free repositories.  It is a lot of work and effort, and this isn't the only repo I support.  Developers may require templates from time to time, and at the very least, even if it takes 30 seconds more, it shows you respect the time and effort the developer is still putting in to support these public packages.  Some people think their time is to valuable to waste on such a trivial thing.  How valuable is my time?  How valuable is the package I have provided for you to use?\nNext time I will close the issue as invalid. I ask very little from people.  I don't beg for donations, or provide nag popups.  I don't close the issues section and only provide pull request (but sometimes I do consider it).  It is not too much to ask to follow a template.. > I'm sorry if I came across as annoyed in any way, I'm not.\nIt's okay.  I do really appreciate the apology.  This is definitely a sore nerve for me.\nYour information for this issue was perfectly fine, and I don't want you to think it wasn't sufficient.  I didn't reject the issue like I normally do \ud83d\ude42 . In this case, gifs and such aren't really necessary.\nYes I'm looking for higher quality issues than what I often get, but yours was fine.  I'm not looking for perfect issues.  But what I am also looking for is a standardized issue so that generally people know what I expect, and they can look at other issues and see examples for what I expect.  In this case, all I was looking for is this.  It really wouldn't have taken but seconds extra.  I provide a command that captures all the version info in the plugin itself, you just have to run it.\nDescription\n\nI'm seeing big stretched placeholder images instead of something real when opening the Quick Start Guide via package settings, immediately after installing the package via package control.\nNo useful info in the console or elsewhere.\nThe source file here seems to be missing images too: https://github.com/facelessuser/BracketHighlighter/blob/master/quickstart.md\nSupport Info\n\nST ver.: 3142\nPlatform: osx\nArch: x64\nPlugin ver.: 2.24.2\nInstall via PC: True\nmdpopups ver.: 2.1.0\nbackrefs ver.: 1.0.post1\nmarkdown ver.: 2.6.6\npygments ver.: 2.1a0\njinja2 ver.: 2.8\n\nI can't make GitHub enforce template format.  I've essentially done everything I can to encourage people to do so.  I've tried to make it as easy as possible and explain exactly what I want and provide the tools necessary to provide me what I ask for.\nI know my latter words come off a bit hard, but I do mean what I said.\nWith all of that said, I do appreciate the bug report. And I appreciate that it was clear and that I didn't have to do any psychic debugging or pester you for more info.\nI personally always try to fill out a developers template issue the best I can.  If things aren't applicable, I may put NA.  Some templates are sillier than others, but I always try to fill them out to show respect for the work they put into their project.\nAgain, thanks for being understanding.\n. Please follow the template on any issues in the future.  I usually close issues that don't follow the template as invalid.\nSome reading on this issues:\n\nhttps://github.com/jisaacks/GitGutter/issues/113\nhttps://github.com/facelessuser/BracketHighlighter/issues/317\nhttps://github.com/SublimeTextIssues/Core/issues/1664\nhttps://github.com/SublimeTextIssues/Core/issues/319\n\nAt this point there is nothing I can do as this is an issue with how Sublime handles gutters. There is no actionable item for this.. You are going to have a difficult time because JSX allows you to break HTML with non-traditional HTML.  To be honest it turns HTML more into a template language.  BH is looking for valid HTML.  What you have posted above is valid JSX, not valid HTML.  You'd have to provide something that is supportive of a JSX specific HTML.\nYou can play with creating a new HTML profile with regex for an HTML that.  It seems that is the path that you are on.\nI'll say this.  I see this in your regex {[^}]+}. I am assuming you are trying to capture curly brackets.  But you need to escape curly brackets in regex: \\{ etc.  Further, you need to escape backslashes in JSON strings: \\\\{ etc.\nSecond, order of regex rules is important.  BH will already try and target {} pairs.  You may need to  inject a JSX specific rule that is separate from the default HTML rule and have it before the {} rule so that it doesn't gobble up your curly brackets before they can be evaluated in your custom HTML rule.. > Python re module? I'm asking because I've tested regex with unescaped { using the python command line and it does seem to work \nYes, we use re.  Maybe what you are doing works, maybe it doesn't.  I don't know.  I always explicitly escape those, but I see it comes right after |, so because it is not followed after part of a pattern, maybe re doesn't require those to be escaped.  So, I won't comment on that further.  If you are confident, then I guess that is fine.\n\nUnless I'm mistaken, I've tried to capture in my regexes, the places where I think JSX differs from HTML (the self-closing tag name and the attributes)\nJust to clarify, when you say \"new HTML profile\" do you mean creating a new tag-mode, like I'm trying to do or is that something else entirely?\n\nI was speaking generally, and then I mentioned that seemed to be the direction in which you were going. So yes, you seem to be creating a new profile.\n\nI've just noticed that on my machine, none of the tags (html, cfml, etc) appear as a rules But BH still highlights tags without problem in an HTML file...\n\nI believe the angle rule is what you are looking for.  It includes the tag bh_plugin.  Maybe if you move it before curly you will have some success?\n. If you have a branch somewhere, maybe you can reference it here and someone can look at it in the future.  I am personally less likely to look at things unless I have an actual branch.\nI understand you personally may be done with work on it, but I know there are a number of people who'd like to see this feature.  Maybe your starting point will be enough to get someone to finish it.  I guess if you were doing it all in local settings files, that isn't as easy to link as a fork.\nIn general, I'll say this about JSX, it is often not guaranteed that tags will be ordered and match like they do in HTML as you can store away parts in to variables in any order.  It may have always suffered issues to some extent.  It's why I have never tried to match tags in JS strings.\n. Not sure.  You'd have to point me at the package you use for REXX as I know nothing about it.  Not sure if case is important, but remember that the language_list should be the file name minus the extension, not what appears in the bottom right hand corner of Sublime when the syntax is loaded.. If you want me to personally verify this, I need you to update the opening post with general version info so I can confirm what version of BH and dependencies you are using. Also so I can verify what system you are on etc.\nIf you forgot what the issue template was asking for, you can find the template here: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md.\n. Thanks for the update.  I will take a look when I get a chance.. I had no problems with this.  What I did was copy bh_wrapping.sublime-settings to my User folder and added your rule to the existing settings (you can't jus drop what you have on the opening post into User, you copy the original and add yours to the existing settings).\nCreated a file set to REXX and add the text test. Selected test and ran the option BracketHighlighter: Wrap Selections with Brackets.  Selected REXX: do and it wrapped test.\nI see no issues.. Okay, so you just want to highlight brackets?  That really wasn't clear from the issue.  You will have to look at bh_core.sublime-settings and add REXX rules.  Also read the the related docs http://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets.\nI make clear in the documentations that I don't have time to learn everyone's favorite languages to write rules for them.  But I can give pointers if you get stuck.. I'm going to go ahead and close this.  If you start going down the road of creating bracket rules and get stuck, feel free to ask questions.  Just make sure you provide as much info as possible.. Thank you for the detailed issue, but please, please, please follow the template.  The details are fine, but please always attach the version info stuff.  I require this from everyone as I am trying to standardize these issues to encourage good issues. And when all examples exhibit the same pattern, it encourages others to do so as well. Thanks.\n---end rant---\n\nEach change triggers sublime_plugin.check_view_event_listeners and it then checks if all the ViewEventListener's are applicable to the current view.\n\nThis is definitely a new development since the introduction of ViewEventListener's. But it is possible this could be addressed.  I'm not sure when I'll have the time to look into this though as I've been pretty busy recently. I'm a bit stretched by all the things I am maintaining and contributing to.\n\nBH should avoid using a view setting to flag its working status, may be a global variable?\n\nIf you have a solution, I would encourage a pull request.  Without looking into this, I can't say exactly how well simply using a generic global will work.  Will I have to maintain a dictionary in which you index in per view id, and if so, require pruning of old view id's?  Can I get away with a simple, single global variable?  I'm not sure yet, and this will require further investigation. If this is becoming very troubling for you, a pull may get us there faster.\n. > My bad. I have edited the post and tried my best to match the template.\nThanks for being understanding :slightly_smiling_face: .\n\nNo problem. I appreciate you work to the ST community.\n\nThanks!\n\nI am also not sure if a simple global will do the job properly. So I wanted to contact with you first to check if you have any insights. The situation is not that bad with a regular usage. But I could image it could be a problem if more packages are using ViewEventListener's given that BH is such a popular package. With that being said, I will look into this issue when I am free.\n\nOff the top of my head I am unfortunately not sure.  I haven't had to touch that area in quite some time.  I'd have to refresh myself to see if this is an issue. BH uses a normal EventListener, which I think only one is created per Window?  I don't know if you can run the risk of multiple view's running the BH matcher simultaneously or not.  I was probably being cautious and used the view settings as it would tell me if I was currently busy in that view, and I wouldn't have to prune it since it is destroyed along with the view.  It is possible that can be simplified.\nI'll say this though, when executing a match, I do store that match info in the view setting as well, so this could still be an issue.  I'm not sure if I have an easy solution for that.. Restart Sublime after installing.. The documentation mentions restarting after installing. Sometimes packages that load dependencies don't quite get everything loaded proper on install. In general, restarting Sublime is good advice after installing anything.. Can you post support info like the issue template asked for?  Also check console for errors and post those?\nAlso I haven't upgraded my license to for the official release, so I am still of dev 3142.  Not sure when I plan to upgrade my license yet, but it won't be during the month of September.. Looks like a dependency issue from your support info. Run the Package Control: Satisfy Dependencies command, look in log and wait for it to complete, then restart.  Hopefully that will help.. I'd try to shut down Sublime, manually remove failing dependency, start Sublime, rerun satisfy dependencies again, if the missing module doesn't get auto installed, and restart Sublime.\nI've had package control dependencies break on me before.  While this should get fixed upstream, we are just looking for a short term work around for the time being.. I think at times I even had to delete the auto created dependency loader plugin as well. This may not be a new issue, but hopefully this can be worked around in the short term by deleting related failing pieces and forcing a reinstall of said pieces.. Yup, I will close this. Dependency issues are kind of known and briefly discussed in the documents, but maybe I can elaborate more on possible issues and how to overcome them, but in general, I'll consider this issue resolved.. @englishextra \n\nYou need to create a new issue following the template.\n\nAnd be clear about your issue and provide as much info as you can to help understand what your problem is.. 1. Issues need to follow the template.\n\n\nThe documentation explains how to add new rules etc.\n\nhttp://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets\nhttp://facelessuser.github.io/BracketHighlighter/customize/#tag-plugin-settings\n\nTake a look at both these settings as this is where languages are configured generally:bh_core.sublime-settings, and this is where additional tag specific settings are configured:bh_tag.sublime-settings.\n\n\nFor additional help, please update the opening post to follow the template guidelines: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md. Take a look at the documentation, and existing examples in the settings files.\nIf after all that, you are still confused and have a specific question with something in particular covered in the the examples and documentation, you can ask those questions here, but provide information of what you are currently trying, and please be specific with your questions as my answer for for vague, broad questions is generally to \"read the manual\".\n. As there is no actionable item here, I am closing this issue.  In general, support for new languages is provided by the community, not me directly (unless I specifically have an interest in said language).\nLiquid may not be easy to add as I imagine it is more a template language that breaks HTML format.  There are many, many different template languages, and they cannot all be supported with one rule.  In general, different HTML profiles would need to be set up.  Another issue is it seems most people want their specific template language also recognized as basic HTML syntax.  Again this is related to the fact that one profile cannot be provided that uses the HTML syntax but also handles everyone's favorite template language.. Please follow the issue template (https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md) and post relevant info like what color scheme you are using, and if it is modified, please make available the modified copy, etc.. Also please post full BH use settings. Now that I've reread, probably don't care about color scheme.. The template requests the following:\n\nRun the following command from the menu: Preferences->Package Settings->BracketHighlighter-> Support Info. Post the result here.\n\nPlease post that so I can see versions and such.. Here's the thing with JSX.  I don't use JSX.  So I leave new language support up to the community.  I mention this in the documentation as I don't have time to learn the nuances of every language everyone uses. It's not simply highlight HTML in Javascript as JSX is actually a template language which breaks the HTML syntax.\nWith that said, this is a commonly requested feature and unfortunately, no one has stepped up to the plate.\nIf you are very interested in JSX support, maybe I can look into it if I have someone who is familiar with JSX and who is willing to explain the nuances (I really don't have the time to dig around to and test to understand all of this).  This is all assuming that JSX doesn't break the HTML is ways that are so bad it is impossible to reliably identify tags with the current BH system.  Since tags are found with regex, depending on how flexible JSX is, this might be too difficult.\nSo, from what I understand (with my extremely limited knowledge of JSX), it seems that JSX requires a full tag to be defined as it is a preprocessor on JavaScript that can replace the HTML syntax with code that actually creates the HTML object.  So that is good.  I imagine we don't have to worry about the opening tag getting assigned in one variable and the closing tag in another.  All bets are off if that was the case.\nSome starter questions:\n\n\nWhere are the template variables allowed: {some_var}.  Can they be anywhere?  Or does JSX require sane locations for them?  It is going to be impossible to support JSX if it allows crazy stuff like this <{tag_name} {attribute_name}={attribute_value}>Content.</{tag_name}>.\n\n\nAre curly brackets the extent of how JSX tags are modified?  How do you escape curly brackets and show literal ones?. Okay, then I'll close the issue.. Actually, since I do get asked this from time to time, I'll leave this open in the hopes that someone will have the time to help out here.  And hopefully this one will keep duplicates from getting opened.. > I have to say.. I am a fan of BracketHighlighter already.. helps me out in so many areas.\n\n\n\nThank you for your hard work. It's GREATLY appreciated. Kudos.\n\nOh, and thanks for the kind words! \ud83d\ude42 . @htchaan, unfortunately, what you have provided is extremely fragile as it assumes the JSX code to be pure HTML.\nAs the opening poster illustrates, JSX users use substitution to set HTML attributes and such in JSX, and the default HTML profiles in bh_modules.tags will not recognize those if they get too advanced.  You'd have to modify the patterns for JSX to allow almost anything in {} if used as a HTML attribute.  And even then I'm not sure how complicated of code it allows in those. I'd hope regex would be enough to parse it, but maybe not.  Then if JSX allows substitution of a tag name, we have no way of handling that, unless JSX restricts that in a way that is easily detectable.  But even then, BH may fail as the tag name will be some generic variable name, and we won't know if it is allowed to be  self closing, void, etc.\nJSX content is not HTML until the variable substitutions take place, so you'd need patterns that could recognize JSX tags before substitution.  Which might be possible with regular expression, I just don't know since I don't know JSX well enough to understand how complicated these substitutions can get and how badly it can screw up the syntax.. I don't seem to understand what the complaint is.  Care to elaborate?\nYou seem to not like that Swap Brackets works as expected?  The current selected brackets get swapped with the selected brackets, but you want it not to?\nIf you don't like quote highlighting, you can disabling them in your user settings: http://facelessuser.github.io/BracketHighlighter/customize/#bracket-rule-management..  I see it, but I am assuming the quotes were highlighted, why is this unexpected? We're you expecting it to wrap instead of replace? If so, you could use the wrap command that wraps a selection.. Okay, I think we are getting into semantics here, yes quotes are not \"brackets\".  Bracket Highlighter works on brackets and arbitrary start end markers on blocks. You can configure BH to not operate on anything you don't like, so what I assume you want is achievable in the user settings I pointed out. Or am I still misunderstanding?. As stated previously, BH handles brackets and bracket like objects.  If it helps you can replace the term \"bracket\" with \"start/end block markers\".  I am unconcerned with whether or not quotes are technically brackets.\nBH was designed to handle brackets, tags, and any other custom start end marker generically.  I don't have bracket specific logic in the main code to make maintainability easier.  This is a free plugin, so I keep the features quite generic.\nAlso BH handles one match (per cursor) at a time, it doesn't recursively find multiple nested brackets around the current currsor(s), so it cannot just select a different bracket (outer or inner most).\nIf it is troubling that \"quotes\" are treated as \"brackets\", you can just disable them and then you won't have to worry about BH applying bracket like functionality to them.  You can even modify your swap settings in bh_swapping.sublime-settings (which is covered in the documentation) if you feel some behavior there needs to be modified. . 1. > I just installed the plugin on sublime and at first I had no highlight AT ALL.\nYou have to restart sublime after installing the plugin.  No other action is needed.  If you \"got it working\", it was most likely because you finally restarted, not because of settings tweaks.\n\n\n\nPlease follow the the template and provide things like the version info of the plugin and its dependencies: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md\n\n\n\nIs there a way to highlight only the background color of this same portion of code when I click on the brackets ? Thanks !!\n\nI'm not sure what you are asking for.  I see you've enabled high visibility mode.  I see that you are overriding all the scope brackets with your own (why?).  Maybe this is related to point (1.), but if so, none of that was necessary to get BH working.\n\n\nSo I'd remove your scope bracket overrides (remove the entire key).  Provide me with version info stuff per the template (I don't troubleshoot issues without it).  And please clarify what your actually issue is as I am currently uncertain what you are asking.\n. Post version info like I asked please.\nBrackets underlined (highlighted) so it is working.\nI'm making this invalid until the info I requested is posted.. > When Install the plugin and restart sublime, the plugin doesn't work properly. It only shows the brackets on the line number.\nThis is not true.  It is underlining the brackets as well.\n\nWhat I want is to highlight all block of code inside selected brackets, like the \"line_highlight\" but with the brackets.\n\nHigh visibility mode is always going to be slightly flawed for everyday use as it uses Sublime regions in the API (the only way to accomplish this). You could use the solid option (and even modify your color scheme to have a less severe color and have BH use that less severe color for the BH highlighting), and that will highlight the background, but you will loose syntax highlighting and have plain looking text.\nThis is a Sublime limitation.  I understand what you are wanting, but unless Sublime updates the regions API with an option to highlight backgrounds with a color and keep syntax highlighting, it is currently not a good direction as it is will not look good for everyday coding.  You can set solid for high visibility and toggle it on and off when you want to see it which would be more practical.\nI more look at high visibility for either people with lower vision, or people that just need to temporarily make it VERY obvious the extend of the bracket content.\nA better option is to not use high visibility mode and instead change the highlight style of the brackets to something like solid. Now the brackets will be more visible without obscuring all the syntax highlighting. See documentation: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.. I'm either assuming I've answered your question, or there is no plan to ask more questions?\nI will mark this stale and close in a couple of days as there is currently no actionable item.. The template was not followed: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md. For in depth support, the template is required.\nSo I'll just say this, I can't control how Sublime renders.  The thick underline is special in the way it is done, but the rendering is still out of my control.  If you want a solid line, try thin_undlerline (see documentation: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style).. Interesting.  Does the view parameter come in as None?  If so, I'd prefer:\npy\nif view is None:\n    view = sublime.active_window().active_view(). Hmm. This is a problem then.  Currently I can have bracket highlighter work in the find input panel, but if we try to get the active view, it will mess things up for the find input and other widgets where this is available.\nSee setting:\njs\n    // Experimental: Allow bracket highlighter to search in widgets.\n    // Most widgets use Plain Text which BH should ignore,\n    // But regex find views views are usually regular expression\n    // Which should be the only views to trigger BH.\n    \"search_in_widgets\": true,. As this fix isn't able to directly target the clone, this pull would actually break other functionality.  As this is basically a bug in Sublime as far as I am concerned, I will wait for this to be fixed upstream.  If a solution can actually target the specific scenario of  a cloned view, I'd be happy to merge it.  I just don't want to loose highlighting in my find replace panel and other styled widgets.. I need you to follow the template: https://github.com/facelessuser/BracketHighlighter/blob/master/.github/ISSUE_TEMPLATE.md.\nI have no idea what version of anything you are using.. I've actually mentioned this in the forum: https://forum.sublimetext.com/t/dev-build-3152/32710/3?u=facelessuser, but we probably need to create an official Sublime bug report.. This must be fixed upstream, not in BH.. I've created the official Sublime issue report.  Hopefully the next build will have a fix.  Usually, as long as Jon sees it, issues related to things he's just added get fixed pretty quick.. This doesn't look like pure HTML, what is this?  What syntax do you use for this.  Is this vue?  If so, see: https://github.com/facelessuser/BracketHighlighter/issues/370.. > It's html with vue modifiers\nYou do realize that proves my point?  If it isn't in the HTML spec, then it isn't HTML.\nIf you can point out in the spec that I'm not handling attribute name characters correctly, then I will happily update the rules accordingly.  I'm not always checking for updates in the spec, so I rely on others to help me understand if we aren't properly handling things.  So if what is being done isn't up to spec, please point me at that so we can get it fixed.. Hmm. That is fair.  I don't have any svg specific logic in there to check that. I think in XHTML mode that may work...but maybe not HTML.\nSo it appears it the issue wasn't related to attribute names, so that is good, but I've found some discussion that [a-zA-Z_:][-a-zA-Z0-9_:.] is acceptable, so I may update attribute names to allow _ and . as well.. You can edit bh_tag.sublime-settings and adjust this behavior for the path tag.\n```html\n    // Optional closing HTML tags. You can use 'null' if it does not require a pattern.\n    \"optional_tag_patterns\": {\n        \"xml\": null,\n        \"xhtml\": null,\n        \"html\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n        \"cfml\": \"cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\"\n    },\n// Tags that never have a closing.  You can use 'null' if it does not require a pattern.\n\"void_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"cfml\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\"\n},\n\n```. If you have a list of svg tags like path that may not ever have a closing, we can add all of them if required.. > I think that you should add the XHTML highlighting stuff into HTML for the SVG and MathML although that might be a bit of an edge case. But it'll be more general and there's a lot of tags in SVG, and it seems like every svg tag can self close, so you don't have to code every single svg tag into your plugin.\nUnfortunately, I do need to know all the tags.  BH scans a window of text at a time, so it might not know it is inside an <svg> tag.  It needs to be able to identify tags that are self closing.  This can be done in the self_closing_tag_patterns option in the settings, but I will need to know the tag names.\nI found a list here: https://github.com/jonschlinkert/self-closing-tags/blob/master/index.js.  Not sure how accurate or how these were obtained.  I know there are many more SVG tags, but it is probably unheard of some being self closed.  Anyways, this may be a good start. . SVG self closing tags added: https://github.com/facelessuser/BracketHighlighter/commit/cec05437e8601fa2fccaf91eb9dd1fe4604f9751.\nIf you come up with more, feel free to add them via a pull request.  MathMl tags would also be appreciated.\nAs far as this issue is concerned, I think we have SVG working.\n. The underline is still there, it is just really, really faint as it is almost the same color as the background.  But this is not a BH issue (not directly). This is actually an upstream Sublime issue: https://github.com/SublimeTextIssues/Core/issues/2020.\nWith that said, I will cut a release this morning that uses the thin_underline style as default to mitigate this issue temporarily.  Once Sublime fixes the issue, I will use the thicker underline style again by default.. New release cut with thin_underline as the default style.  It will now be visible, but a little less due to the line being so thin. I'll await Sublime Text to fix the issue 2020 before returning the original style.. Next time post the support info.\nSee here for an answer: https://github.com/facelessuser/BracketHighlighter/issues/422.  You can also mouse over the unmatched bracket, and a popup will appear and you can click the option to search with no threshold.. Pop-up is pretty quick for me. I recommend not ignoring the threshold as you will run into performance issues in large files. You can increase the threshold to a comfortable size though, but either way, it looks like this has been answered.. 1. In the future, all issues are required to follow the template. By making everyone follow the template, it ensure the ones who really need to give me more info get it to me and I don't have to argue with people whether they feel they've provided me with enough info or not.\n\n\n\nplease provide a simpler method of overriding your current colour schemes... because... DAMN. \ud83d\ude31\n\nI realize that this methodology seems convoluted, but I didn't come up with this way because I like convoluted things; it's just what the Sublime API requires.  If I could get away with #FF2600, I would gladly embrace that.. As there is no actionable item here, I am closing this issue.. @r-stein is region.redish auto generated? . Nice! Good to know.  Unfortunately migrating to this is a bit tricky as now there is a long standing convention for BH that people have adopted.  I'd love to just assign things like region.redish by default, but I know there are color schemes configured to specifically target the old brackethighlighter.curly etc.\n\n\nAlso, it would need to be conditional to 3152+, but at least people can customize it themselves using those scopes.  I should maybe put a mention in the docs about it.. :thinking: That might work.  I'll have to play with that.. So, I'm going to utilize the new regions for recent Sublime builds to provide colors out of the box.  With new color scheme support, it is super easy to change colors, or add existing ones with a simple override file in User.  Obviously this doesn't translate back to the stable branch yet, but that is fine.  If people are using color schemes with the old example, they should still work as well.. While all of my examples show brackethighlighter.some_scope, I've apparently never actually defaulted the settings to these except for brackethighlighter.default.  Currently, I also require that you override the entire bracket_style option to change anything, so as long as I default brackethighlighter.default to region.yellowish brackethighlighter.default (or whatever), I should be fine.  The rest I can directly set to region.redish etc.\nMoving forward, I will add a user_bracket_styles which will allow you to specify only what you wish to override so you no longer have to copy everything.  Anyone who overrides the old way will be unaffected even if I change the defaults.  So this will actually work quite well moving forward.. New style overriding is available on this branch: https://github.com/facelessuser/BracketHighlighter/tree/feature/better-styles.\nThis will allow you to add and override only what you want to in the styles without having to copy the entire style rule list.  Documentation has been updated to address common misconceptions and to (hopefully) better explain how to change colors. By default region-ish colors will be provided to colorize brackets out of the box on Sublime builds (3148+) that support region-ish colors.  Users who have overridden styles in the old way will still have their's work as the old way completely overwrites the defaults.  Moving to the new way will allow them to override exactly what they want, but still receive the updated defaults for things they are not overriding.. This is addressed (as much as I can for now) on the main branch.. @swashata, looks good!  Thanks for the pull.  Errors can be ignored as they are due to recent document dependency changes.. @mtomov, Glad you like!  Recent changes in Sublime are slowly taking off the shackles that kept BH from doing things like picking a reliable highlight color despite scheme being used.. You need the latest mdpopups.  Run Package Control: Satisfy dependencies, check console to ensure it finishes, then restart Sublime.. Restart Sublime and run the command again. 3.1.1 is the latest mdpopups.. I'll try on a portable Sublime when I get into work in the next hour or so. I'm running my dev channel, so I always get the tip. I need to check if package control is pulling the most recent tag for normal users.. Okay, I installed a new clean portable version and it pulled mdpopups 3.1.1.  So you have a local Package Control issue.  So now I'll suggest some more aggressive options.\n\nExit Sublime Text\nDelete mdpopups folder in your Packages folder.\nStart Sublime Text.  Package Control should install mdpopups fresh (check console).\nRestart Sublime Text.\n\n. If with the above steps it doesn't auto install the missing dependency, run Satisfy dependencies and then restart.. This is not a BH issue.  I imagine somehow Package Control is messed up for you, or your local install of packages is messed up.  All I do is provide the release and Package Control downloads it for you.  I have no more control than that.\nI would check if you have more than one BH installed.  Check Sublime Text 3/Packages/User and Sublime Text 3/Installed Packages.  It is possible you have more than BH installed and the unpacked one is overriding the other.\nAlso please don't post issues without following the template.  I expect people to providing the info from the Support command as well to see versions of package and package dependencies, and whether they are installed through package control, etc.  Thank you.. That's the thing. There is no BH install script. Package Control just downloads the latest tag. For BH ST3, it downloads the latest tag prefixed with st3-.\nAs for the template, it instructs you to run a support command to get the general version info to paste into the issue, but I do appreciate the effort.. Also, when checking Package Control, it appears to show the latest tag: https://packagecontrol.io/packages/BracketHighlighter.\nYou can try and force an update by going to Package Control: Upgrade package.  If that doesn't work, I'd take this issue to Package Control.  I'd have to analyze your Sublime install to understand further why your install hasn't upgraded or is installing the wrong version, but that really is beyond the scope of BH and is better suited as a Package Control issue.. Is this even valid? Keep in mind I'm not a ruby programer, but why would you ever code like that? Wouldn't it make more sense to do something like this:\nruby\ndef isSSL(url)\n  uri = URI.parse(url)\n  return uri.scheme != 'https'\nend\nWouldn't uri.scheme != 'https' yield a boolean?\nI would expect either of these two for valid ruby if statements:\n```ruby\nif\ncode\nend\n```\nOr maybe\nruby\ncondition ? if_true : if_false\nBut even if Ruby allows a single line return if uri.scheme != 'https', it seems unnecessary (to me, a non Ruby programmer).  And how do I even begin to to tell when an if condition is a one line condition or when it is not? BH uses simple patterns to find an opening or closing bracket.  It does not take in consideration via context how it is nested in parent blocks.\nI might think that if if followed a return, maybe it is a one liner, but based on a recent issue filed here: https://github.com/facelessuser/BracketHighlighter/issues/425, I also know that Ruby allows even more wackiness:\nruby\ndef isSSL(url)\n  uri = URI.parse(url)\n  return if uri.scheme != 'https'\n    true\n  else\n    false\n  end\nend\nIn short, BH has no way of looking at an if in this scenario and telling that it is expected to be evaluated without an end.  But I would argue further, IMHO, that there are better ways to represent what you mean to in your code regardless of what Ruby allows. Just use return uri.scheme != 'https'.  It makes much more sense (at least to me), but maybe I'm missing something?\nAnyways, I don't use Ruby, so I would not be implementing a fix for this and require a pull request from the community as Ruby users understand Ruby better than me.  But based on what I see here, I'd argue that there is no way BH could tell this was meant to be a one line if as it simply doesn't have access to the context necessary to determine this.\n. > So, the example was simplified to illustrate the problem\nFair enough\n\nIs there a way to have it match and ignore a return if or return unless?\n\nYes we can ignore return if as it used to be ignored before #425. A matter of fact, you'll find unless is still ignored in the scenarios you posted above.  Basically, I would just revert that change. I was actually horrified by the example in #425, but I figured it was a Ruby thing.\nPeople unfortunately don't usually care to put in the time to help offer a good solution or help me come to a good understanding of the issue. The guy in #425 took a stab at it then went dark without explaining why. So I ended up just throwing in a solution without understanding the rippling effects. I don't have the time to learn the nuances of languages I don't use.  This is why I rely on the community for such languages.\nIf it is more proper to ignore an if following a return, then we can do that.  I just need to know what's best. I'm limited to how much context I can gather with regex, but ignoring a preceding return is no big deal.\n\nAnd how does it internally handle else, could it match against else end by itself with no if or unless? That may also solve your example from issue #425\n\nIt doesn't handle else.  BH only looks for opening brackets and closing brackets in a sliding window of your view.  It then matches them up until it is confident that the brackets are the closest ones around your cursor.  else is neither an opening or closing.  Keep in mind that these conditional caps are just piggy backing off the bracket logic as they are not really brackets.\nIn general, there is no deep analysis of a language.  It uses syntax scope and regular expression.  You can get some additional logic if you implement a bh_plugin, so tags is a special exception as I built a fairly elaborate plugin for it.\nFor the most part tags are well defined.  You have tags that must have closings.  You have tags that can be self closing.  You have tags that must be self closing.  And then you have tags that can have closings omitted in certain cases -- this is where BH reaches it's limits.  BH is more concerned with getting the job done as soon as it can so not to bog down the editor. It has been coded with no knowledge of parents, so in the tag example (where a tag is allowed to have a closing omitted in special cases), if a closing cannot be found for it, BH just assumes it is okay to omit the tag.\nTags is the most elaborate case, all others bracket logic is pretty simple with occasional hooks with plugins to do mundane stuff.. > There is a case of return x if x > 5, that should be handled the same as return if whatever.\nThis would be ignored after I revert the recent change.  Originally, if if was preceded by anything that was not whitespace, it was assumed to have no end.\nSo basically I'm looking for something more clear cut.  Which of these should be allowed to follow a return and still have an end? I've crossed out the ones I think should not.\n\n~~if~~\nbegin\ncase\n~~private~~\n~~public~~\n~~protected~~\nfor\nuntil\n~~unless~~\nwhile\nclass\nmodule\n~~do~~\n\n. > The following should expect an end statement\ndo, class, begin, case, loop, for, until, while, module\n\n\nAll of these can follow a return? If so, then when I get some time I can throw something together to cover this case.  I'll post it here as I'll need you to test it to verify it.\n\n\nFrom what little I understand, loop is usually associated with do?  If so, in that case do would get paired with the end and not loop and that is already covered.. Okay, so in the end it looks like we are just allowing: class, begin, case, for, until, while, and module to follow return with an end.  do doesn't ever directly follow return and is already handled.\n\n\nI don't know when I'll get to this, but when I do, I'll post a solution here to ensure it is a working solution.  Thanks for taking time to clearly outline this.. This is issue is pending review of #458.  Please review and test changes to help get this in the next release.. Meh, #458 meets the specs we discussed, and it the cases described in #425 still works, and the issue you complained about works.  I'm going to go ahead and push the changes just so I can be done for the day with BH work.  It won't regress anything we didn't already talk about.  I figure any issues that it remain after it were already there before the pull or we explicitly deemed here as acceptable (like rejecting if following a return)\nThanks again for taking the time to talk this out so we could get this as good as possible. If you stumble on any other issues, we can address them in separate issues.. My first assumption would be that the is something wrong with your code, but there is not enough context in your screenshot to determine what the issue would be.\nPlease post, in plain text, a minium amount of code needed to reproduce your error, and post the syntax language you are using. If the syntax language is not a default syntax language, provide a link to where I can get that syntax.\nObviously I don't want to see proprietary code, so you may have to code up with a simple failing example.. Without an example that I can copy and paste to reproduce, this isn't going to get looked at.  Please post a failing example I can copy and paste.. 1. I am assuming you are using the default PHP syntax, if not, please tell me what you are using with a link to the 3rd party syntax.\n\n\n\nBH is not matching bracket even if ignore threshold is set to true.\n\nPlease don't do that. It is just going to give you performance issues in large files.\n\n\nThe example you gave me will not match things proper as there needs to be a <?php or <? at the start of the file for it to get highlighted as PHP.  Then things will be highlighted proper and BH will be able to avoid -> as scopes that BH can ignore will be assigned to those characters, but until then, BH will keep tripping on those characters.\n```php\n<?php\nfunction getFiles($directory, $extension = null, $age = null, $search = null, $fileType = \"older\", $howMuch = 600)\n{\n    $filesArray = array();\n    $files      = new DirectoryIterator($directory);\n    foreach ($files as $file)\n    {\n        if (!$file->isDot() && $file->isFile())\n        {\n            if ($age != \"\")\n            {\n                if ($fileType == \"older\")\n                {\n                    if ($file->getMTime() >= strtotime($age))\n                    {\n                        continue;\n                    }\n                }\n                else if ($fileType == \"newer\")\n                {\n                    if ((time() - $file->getMTime()) >= $age)\n                    {\n                        continue;\n                    }\n                }\n            }\n            if ($search != \"\" && !stristr($file->getFilename(), $search))\n            {\n                continue;\n            }\n        if ($extension == \"\")\n        {\n            $filesArray[$file->getFilename()] = $file->getPath() . DIRECTORY_SEPARATOR . $file->getFilename();\n        }\n        else if (($file->getExtension() == $extension))\n        {\n            $filesArray[$file->getFilename()] = $file->getPath() . DIRECTORY_SEPARATOR . $file->getFilename();\n        }\n    } // if ends\n} // foreach ends\nif (count($filesArray) > 0)\n{\n    print_r(count($filesArray));\n    return $filesArray;\n}\nreturn false;\n\n}\n```\n\n\nSo, things are working for me as long as I have <?php or <? at the file's start:\n\nNow if this is in an HTML file that is not highlighting PHP content as PHP, then it is because -> doesn't have a scope applied to it, and neither will less than or greater than symbols. If BH doesn't know it those symbols are in PHP syntax, it can't resolve them as it triggers on < and > when looking for tags.\n. It's possible instead of excluding certain scopes, we can flip it and only include certain scopes...At least then we could avoid < and > in all cases except when it is scoped like it is in an HTML tag.  I'd have to look at HTML scoping before doing those to make sure this would be a legitimate approach.. > Do you think other plugins might be conflicting with BH?\nCould be.  In reality, the main plugin that would affect BH in this way is if you were using a different syntax than the default.  Like some 3rd party PHP or something like that.  I'd be interested to see if you've installed any 3rd party PHP or HTML syntaxes.\nCan you post a list of installed plugins that are on the failing machine?\n\nOn a side note, I probably will be changing how we target angles in the future. Whitelisting a tags opening and closing angles in a tag seems to work much better than blacklisting problem angles as people discover them.. Unfortunately, none of those stand out to me as problematic.  I don't know if you've ever manually checked out BracketHIghlighter or used something like Package Resources to unpack BracketHighlighter before, but I'd check the location of your installed packages Sublime Text 3->Packages and Sublime Text 3->Installed Packages.\nPackage control should have installed in the Installed Packages location.  You should not have one in the normal Packages location.  If you do, some of those files can override the Installed Packages one causing unexpected issues.\nIf that is not the case, I'd next want to see your user User/bh_core.sublime-settings file to see if you have any rule overrides.. You shouldn't copy brackets, scope_brackets, or bracket_styles.  Instead, you should use user_brackets, user_scope_brackets, and user_bracket_styles to only override the rule you need to, and only the specific parameters in that rule as you need.  Check out the documentation on customizing brackets.  When you override a bracket rule, you won't see updates/fixes to that rule because you are overriding it, so only override what you need, and check after updates to see what you are still overriding.. As there is no bug or actionable item on this, I will close this issue.. This is because \"cloned\" views always pass a None in for the view in the view listener.  I can get the active view in this case, but I need to know that I'm not in a widget or something like that.  I haven't figured out (or taken the time to figure out) a way to reliably know that I'm in a cloned view yet.. I've actually figured out how to get the highlighting working in cloned views. So I'll have a fix for this soon.. 1. Pictures are good, but please always post plain text samples of code as well for easy copy and paste.  This issue's example is very short, but it is really annoying to have to manually translate a person's example from a picture, especially when the example is long.  I will generally ignore issues that provide examples with pictures that have lots of text and no copy/paste sample as well.  Just an FYI.\n\n\nAs for your issue, it is already fixed in the latest BH 2.27.0. So update as it is working there: \n\n\n\nI mentioned this before in #425 , but these kinds of issues are not helpful unless I already use the language, and I don't use Ruby .  If you are not going to provide a pull request, please spend the time to explain in depth how a fix could be achieved, or issue a pull request.  Like you could explain that while cases generally (as you requested in #425) can follow return statements, it is bad form to have if statements follow return statements with end blocks etc. and that BH should avoid looking for end statements if an if block follows a return.\nI did try to work on this issue with you on #425, but then you disappeared, so I just implemented a solution.  It wasn't until #452 that I had someone explain in depth how we should approach these kinds of issues.\nDo not assume I know what you are talking about.  Generally it is best to assume that I don't use your language and do not have the time or desire to learn your language's nuances. If I don't use the language, my response is always going to be, \"please issue a pull request\", unless the issue creator spends the time to explain the nuances of the issue in detail and offer, at the very least, a high level explanation of a solution, even if they don't understand how to actually implement their suggested solution with code or regular expression.\n\n\nAnyways, your problem does not exist in the latest release, but please do keep these things in mind if you find another Ruby corner case.  I appreciate the bugs being filed, but it does me no good unless you, the expert Ruby, describes how things should be handled.. > As I understood, there is no automated tests, so it's hard to me to make changes.\nYeah, it is kind of hard to automate as it would have to be done through the editor to tap into the syntax highlighter and such as brackets are often found by regular expression and scopes.  I just don't have the time to implement such a system.  For languages I use, I create user overrides and use the new pattern for like a week to make sure I don't see any issues while using it in actual working environments.  Then if it seems fine, I commit it.\nWith that said, maybe I can at least implement some tests for the regular expression patterns themselves, even if I can't really  tap into actual scopes.\n\nP.S. you did great job. This plugin is the only reason I'm staying on ST.\n\nThanks! I'm always happy to hear some of my plugins are useful to people.. Duplicate of #296.  In short, this is a limitation of the SublimeText API.  See #296 for more details.. Please read http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.\nParticularly:\n\nOften I am asked why you can just add a color directly like \"color\": \"#D04321\". This is not a decision made by me, but is a limitation of the Sublime API, specifically with region coloring (which is what BH uses to highlight brackets). Sublime needs a scope that exists in your color scheme file. If finds the rule regarding that scope, and applies the color specified in that rule.. Because the template wasn't followed, I'm not going to bother to spend much time on this as I would need more info.  So I'm going to take a wild guess and say that BracketHighlighter will not highlight brackets in plain text files.  Plain text has no real structure and scoping, and BracketHighlighter triggers off file scoping to know when it is inside a string or comment etc.\n\nI am assuming that BH stops highlighting in new files because they are plain text.  If you want to highlight in plain text, I suggest reading the documentation to learn how you can customize the existing rules to highlight brackets in plain text.. Marked as stale as I haven't received any additional information to answer this question.  If no further information is given, this issue will be closed in about a week.. Line 194 you have an extra </div>.  Remember that just because your HTML loads in a browser, it doesn't mean that it is proper, valid HTML. HTML browsers are, in my opinion, too forgiving, which leads to people writing bad HTML. In the future, at least when dealing with HTML, please run it through an HTML validator first: https://validator.w3.org/#validate_by_input. 90% of the time when BH fails in HTML, it is because of bad HTML, not a problem with the algorithm for matching.. Also, BH can help you figure out issues like this if you take the time to walk down the file and see where the matching goes wrong. You can very quickly identify where things go wrong by simply testing out blocks down the document. You'll see sub-blocks match fine, and then you'll find some that don't. And as you descend into the ones which don't, you'll find the smallest possible failing blocks and usually see why your matching failed.. As this is a user error, I'll close this issue.. 1. Please follow the template next time.\n\nPull requests are welcome.\n\nAs I am a C++ user, I may get to this in the future, but it is low priority for me, so a pull request will most likely get it in much quicker.. Unfortunately, I rarely touch templates in the kind of C/C++ coding I do (mostly embedded systems). That's not to say templates aren't used in our code, I just rarely have to touch that area.  Because of that, this has been pretty low on my priority list.\nAlso, If the current syntax language doesn't scope these special, it may be difficult to pull this off as there are many ways angle brackets are used: shifting, comparing, header include, templates, etc.\nAnyways, it is on my list, I just can't promise when I'll get around to looking into this.. I haven't looked yet, but if I have to code up a special template highlighter, that would be more difficult. I may be able to use existing Scopes, I just don't know yet. When I get a chance, I'll let you know.. Next time please use the template.\nI don't use Lua, so you're going to have to explain to me how BracketHighlighter is supposed to behave.\nSince i don't have time to research languages I don't use, you will have to either issue a pull request, or explain exactly what the issue is.\nI'm going to guess that we are highlighting while and do as a block start. Should do be ignored in all cases? Even outside a while loop?. Would it be a fair assumption to say that when do is only preceded by whitespace it is safe to include it?\n\nI could try to play with the regexes if you pointed me to where I should change them :)\n\nIt is covered in the documentation: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets.\nBut remember, there can be only one capturing group. Non capturing groups are fine.  Sometimes we have to implement a plugin hook to strip out things due to the one capture group limit.. Ugh.  Well, what I need is a reliable way to tell when we can capturedo and when we can not.  BH is unaware of language context except through either the regex, or additional plugin hooks.\nIf we are not able to quantify the cases, we can't write a rule to fix this.\nOkay, maybe this.  Is while always followed by a do we shouldn't capture?  If so we could extend the while portion of the pattern to something likewhile\\s+.+?\\bdo\\b.  We'd have to add a hook to strip everything after while once we capture it, but then we'll have the while, and we'll be able to throw away that do as it is already captured.. Replace BracketHighlighter\\bh_modules\\luakeywords.py with:\n```py\n\"\"\"\nBracketHighlighter.\nCopyright (c) 2013 - 2016 Isaac Muse isaacmuse@gmail.com\nLicense: MIT\n\"\"\"\nfrom BracketHighlighter.bh_plugin import import_module\nlowercase = import_module(\"bh_modules.lowercase\")\nLOOPS = ('while', 'for')\ndef validate(args):\n    \"\"\"Check if bracket is lowercase.\"\"\"\n    return lowercase.validate(args)\ndef post_match(view, name, style, first, second, center, bfr, threshold):\n    \"\"\"Strip trailing while garbage.\"\"\"\nif first is not None:\n    # Strip whitespace from the beginning of first bracket\n    open_bracket = bfr[first.begin:first.end]\n    for key in LOOPS:\n        if open_bracket.startswith(key):\n            first = first.move(first.begin, first.begin + len(key))\nreturn first, second, style\n\ndef compare(name, first, second, bfr):\n    \"\"\"Differentiate 'repeat..until' from '*..end' brackets.\"\"\"\n    brackets = (bfr[first.begin:first.end], bfr[second.begin:second.end])\n    return (brackets[0] == \"repeat\") ^ (brackets[1] == \"end\")\n```\nChange lua rule in bh_core.sublime-settings to:\njs\n        // Lua\n        {\n            \"name\": \"lua\",\n            \"open\": \"(?:(?<=[\\\\s;])|(?<=^))(if|(?:while|for)\\\\s+.+?\\\\bdo\\\\b|function|do|repeat)\\\\b\",\n            \"close\": \"(?:(?<=[\\\\s;])|(?<=^))(end|until)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"plugin_library\": \"bh_modules.luakeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Lua\"],\n            \"enabled\": true\n        },\nTested on:\n```lua\nwhile (...) do\n  (...)\nend\nfor (...) do\n  (...)\nend\nwhile (...) do  -- this is a part of the while loop syntax\n  do  -- this is a \"do-end\" block start (used for variable scoping purposes)\n    (...)\n  end\nend\nwhile (...) do (...) do (...) end end;\nfor i=1,10 do do print(i) end end;\n```\nLet me know if you find issues.  If it is fine, let me know and I can get a patch in when I get time, or just issue a pull request with these changes.\nBut please let me know once you've had a chance to do some testing whether you found additional corner cases.. Ignore some of the comments in the BH hook.  I copied and pasted some of that code from another hook.. Hmm...we'll lose the ability to highlight brackets between while and do...I think I have an idea though.. I think we need a new hook for when a new match is starting.  I figure this flow could work:\n\nReset any trackers\nOn while or for validation, look ahead in the validate hook and track where the next do (if any) is.\nOn do validate, check that it is not tracked and clear the tracker afterwards.\n\nI think this could work.  This can give us a little context and prevent us from capturing what we want to scan later.\nI'll play with this later tonight.. > I think we should track\nExactly how it gets done will be decided once I get the hook in. The previous suggestion was made based on previous thinking of looking ahead for the do.  Regardless of what gets tracked, we still need the hook.\nI think we may still get weird corner cases as BH works in a sliding window.\nUnfortunately, lua context seems to be best understood scanning from the start of the file than analyzing a snippet. So I'll just have to play around and find the least bad idea.\n. Ha! Now we're thinking! I'm pretty sure I've done that with other languages. Wonder why I didn't come up with that here? To close to the problem I guess.... > Hm, that would work but visually the highlighted \u2018do\u2019 which is usually on the right hand side of the screen would not be very noticable for the eyes comparing to the properly highlighted \u201cwhile|for\u201d.\nMeh. BH can't waste time processing the file from the beginning, so it uses a sliding window.  Sliding window may not always capture a while or for before a do leading to unreliable highlighting in certain cases.  The current syntax highlighter doesn't scope a while...do different than a do, so I don't have any context.\nHighlighting do makes the most sense.  If the syntax highlighter ever scopes the while..do differently, I can use that to make decisions.  There will be some people bothered by while and for not getting highlighted, but that is the best that can be done.  I'm okay with it, so I'll sleep fine \ud83d\ude42 .  It's better than incorrect or none at all.\nI'm open to better suggestions, but right now, highlighting do is the most reliable and best suggestions.. @FichteFoll, yeah, that is probably the real way to give people what they want.  Scoping is where context should really be acquired from since the syntax processing is context aware.  I'll be more than happy to utilize that for proper while|for highlighting (if/when available), but until then, I think sticking to do is the appropriate compromise.. I don't understand what you are asking for, so please be specific in what enhancements/features you are requesting.  If it is more than one, please create a bullet list explaining each enhancement/feature in detail.  After that, I will evaluate and give a response.. Okay, if you were looking for features like Rainbowth, then my answer is the same as I gave in #423.. Thanks @michaelblyons, LGTM.  I will most likely pull this into the next release.. So is this dependent on the changes you made here: https://github.com/sublimehq/Packages/pull/1432?\nOr does it work without those changes?  Or a least work well enough to not falsely highlight something?. Package Control is having issues with dependencies: https://github.com/wbond/package_control/issues/1334. See duplicate issue: https://github.com/facelessuser/BracketHighlighter/issues/469. Please follow the issue template in the future.\nPlease read http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style which should answer your question.  There is no global option, but you can tweak your highlight style for each bracket that you don't want to show icons for.. I'm assuming this question was answered, so closing.. This is not a trivial request and would be weeks of work.  I only contribute to things I am actually using or have considerable incentive to invest my time in, and since I don't use vs code, I currently have no interest in pursuing such a request.. Instead of \\s* we should probably use [ \\t]*.. On an aside, I should probably add a highlight extension to only highlight the word part and not the spaces and hash symbol.. I'll think about the highlighting, but please update the whitespace to not include line breaks.. Cool. I may move the capturing groups to be just around the keywords to avoid highlighting spaces before release, but I'll evaluate that separately. I think this looks good though.. There isn't currently such a shortcut.  The way that BracketHighlighter implements its current selections is by using a bh_module: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/bracketselect.py.  Which can then be used in a command:\njs\n    // Go to left bracket\n    {\n        \"keys\": [\"ctrl+alt+super+up\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_block_mode\": null,\n            \"no_outside_adj\": null,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\n    // Go to right bracket\n    {\n        \"keys\": [\"ctrl+alt+super+down\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_block_mode\": null,\n            \"no_outside_adj\": null,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\"}\n            }\n        }\n    },\nI believe most of this information is covered in the documentation: http://facelessuser.github.io/BracketHighlighter/customize/#run-instance-plugins.\nTheoretically, you could write your own specialized command to do exactly what it is you want.. It is possible to add it to the existing bh_module. If we're talking about a pull request, that would make sense.  Ideally in such a way that the code is not hard to follow. If it is going to get super messy, then having a separate module makes more sense.\nIf it is only for personal use, then doing a separate module probably makes the most sense.. When selecting, you can control selection direction by reversing the start and end of the selection:\npy\n        self.selection = [sublime.Region(last, first)]\nThat should be all you need.. >  Yesterday everything was fine, tags can be highlighted by a beautiful orange color. Now that Brown is not a beautiful color, you can fix this as?\nProbably related to your theme. Please see documentation to learn how to tweak the color yourself: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-highlight-style.. @mrG0bliN, I only leave issues open if there is an actionable item that I haven't decided to ignore. As there is no actionable item here, I will be closing the issue.  Feel free to reopen if it occurs again, but only if the issue is attributable to something BracketHighlighter is doing.  Theme issues, or general Sublime issues cannot be solved by BracketHighlighter.\nAlso, please follow the issue template in the future, thanks.. 1. Please follow the issue template when creating any issues in the future.  I generally will close issues that are not following the template.\n\nI don't use JavaScript very much, so adding tilde is very low priority to me.  I general, I leave new bracket support up to the community while I focus on the core code.  The exception is when it touches a language I use a lot, and I also have interest in adding said bracket.\n\nI will leave this issue open until either a) someone issues a pull request addressing this issue or b) I get around to doing it myself.. I did actually go ahead and add this support for default JavaScript.  Should be available in next release.   . This is because Laravel is not HTML and breaks HTML syntax.  BracketHighlighter currently only highlights HTML, not Laravel.. There would need to be Laravel specific support added. Ideally not to the default HTML.  The more various template support added to HTML, the less reliable HTML tag detection would most likely become, and the harder it would be to keep the quality up as there would be conflicting template rules etc.\nAnyways, as I don't use Laravel, this would have to be included via pull request by the community.. This issue is invalid and did not follow the template.  Please create an issue following the template, or update this one and reopen.. I don't use HEREDOC, so you would need to provide me with links to syntax highlighters, copy and pasteable code example etc. before I would be able to make any workaround suggestions or explanations of what is happening here.. The issue is that the < in <<<HTML where being identified as opening angle brackets with no closing.  So it broke matching.\nYou can put this in your User/bh_core.sublime-settings file:\njs\n{\n    \"user_brackets\": [\n        {\n            \"name\": \"angle\",\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"keyword.operator\",\n                \"source.ruby.rails.embedded.html\",\n                \"source.ruby.embedded.html\",\n                \"storage.type.function.arrow.js\",\n                \"punctuation.accessor.php\",\n                \"punctuation.accessor.arrow.php\",\n                \"source.php meta.embedded.html punctuation.section.embedded.begin.php\" // <--HEREDOC experimental fix\n            ]\n        }\n    ]\n}\nI don't know if this introduces any side effects, so I won't make an official fix with this unless you are able to test this for a bit and determine it to be safe.. Did you try my suggestion above? If you override in user_brackets the angle rule's scope_exclude as I have above, do you still see issues?  It wasn't clear if you tried it or not.  I don't see issues on my machine, so I need to know if you are doing what I am doing.. Also, I am using this on my machine for BracketHighlighters threshold:\njs\n    // Character threshold to search\n    \"search_threshold\": 10000,. Make sure you read the docs. Sometimes you'll get ? due to matching bracket being outside threshold. Usually on mouse over you'll get a popup with an option to search without threshold. Anyways, check it out as you may learn a bit about how and why things work the way they do.. Cool, let me know if you find any others, but if you don't find any more issues, we can probably patch these in the next release.. Thanks.  Seems reasonable.. I can understand the appeal of this, but the current code is optimized to set all like bracket types in one shot.  For the sake of maintenance, I don't think this is something I'm currently interested in doing.\n\nThank you for this amazing plugin!\n\nNo problem :).. Pull requests is the way to include languages. Especially ones that I don't use because I don't have the time to learn the nuances of the languages I don't use.  I would test it thoroughly, and use scope_exclude to avoid problematic scopes.  Often languages will allow you to use a bracket in a string and comment, and it shouldn't be recognized as a bracket.  You'll see a number of existing rules that specifically exclude string and comment (to name a few):\njs\n        {\n            \"name\": \"round\",\n            \"open\": \"(\\\\()\",\n            \"close\": \"(\\\\))\",\n            \"style\": \"round\",\n            \"scope_exclude_exceptions\": [\n                \"text.tex string.other.math\",\n                \"punctuation.definition.string.begin.shell\",\n                \"punctuation.definition.string.end.shell\"\n            ],\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"source.regexp constant.character.escape\",\n                \"punctuation.definition.case-pattern.shell\",\n                \"source.yaml-tmlanguage constant.character.escape\"\n            ],\n            \"language_filter\": \"blacklist\",\n            \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n            \"find_in_sub_search\": \"true\",\n            \"ignore_string_escape\": true,\n            \"enabled\": true\n        },. This will only be included via pull requests, if you are having difficulty implementing this, feel free to ask specific questions.. Look forward to the pull, thanks!. Why is this impossible? There isn't enough information for me to really understand the request/issue being described.. Every if/else has an end. BH only highlights openings and closings. Better put, BH highlights brackets and bracket like conventions which is often leveraged to highlight if and if/else blocks. It will only highlights the start and end of an if/else block (if configured correctly), it will not highlight the 'else' in the middle if that is what you are requesting. I have no intentions to add such functionality as BH is only meant to target starts and ends.. Right, and I leave adding new language support up to the community so I can focus on the core code. With that said, you should not add else to the end definitions as else is not an end. It is a middle. BH targets beginnings and ends.. BH doesn't highlight else and has no intentions of doing this. Then you have ends that are also beginnings, and BH looks for clear beginnings and ends.\nI understand that huge elseif blocks do not get a huge benefit from the highlighting, but BH was not designed for highlighting language if/else blocks, it is just commonly leveraged for that. It will show you the start of the entire block and the end as it is designed to show you the start of a bracketed group and the end.. I know the location implementation changed a couple times in development, most likely I missed some things.\nAs the hover was bolted on later, it looks like I forgot to add support for ignore...\nYeah, I'll have to take a look at this and sort it out.. Yes, that's not the only issue:\n\n\nIt looks like normal views are only clearing clone locations, but they should clear normal locations.  Clone locations are also clearing clone_locations.  This looks like a mistake on my part.\n\n\nAround line 790, I'm using the wrong key name for locations.\n\n\nLastly, as you pointed out, I'm using [] instead of {} as a default.\n\n\nOh, and I need to double check disabling and on_hover.\n\n\nNo doubt originated from another one of my late night patches.\nI'll work on getting a fix out hopefully by the end of the week. I'm currently out of town, but I'll at least start a pull with some of the fixes.\n. Yeah, there are some issues with hover events and clone views as well.  This isn't working how I remember it working... it appears hover events only work currently for clone views where the brackets were highlighted in the original non-cloned view.  When testing, I must have been comparing the same brackets in both views, but didn't try and other brackets in the clone view.\nUgh.  Clones were tricky to get recognized properly, but there appears to be more work to get hovers working properly.  Anyways, I'll look more into this when I get back.. I have some fixes in for some of these issues.  I don't expect this will fix all the clone related issues, but at least the errors you were seeing: list/dict error, on_hover issue, etc.  I know this is way later than I originally said, but better late than never.. The originally mentioned issues have been resolved.  I will investigate clone views as a separate issue when I have time.. It seems to work for me.  I don't recommend enabling ignore_threshold unless you want BH to lock up and slow things down in really big files though.. You simply aren't giving me enough information to go on.  If you are able to look at your console in Sublime, maybe there is a helpful error, but based on my ability to reproduce, it works like it should on my system.\nBut if you consider your question answered, I'll close this. Are you moving on?. > t says \"Unable to open /C/Users/{UserName}/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/bh_core.sublime-settings\".\nOkay, at least we know there is something wrong on your system.\nHow did you install BracketHighlighter?  I'm assuming you used package control? You didn't also check it out locally with git did you?\nWhen you installed it, did you restart Sublime Text?  If you didn't, you definitely need to do that.\nI would probably try uninstalling BracketHighlighter reinstall, restart Sublime, and then try it out again. . No problem.. Just an FYI, I haven't forgotten about answering this, just been very busy.  Hopefully I'll get to this soon.. Sorry I haven't gotten to this, but curly brackets are already highlighted in strings. So I personally feel this is already handled.\nIf you want wholly separate highlighting for inside and outside strings, you would have to disable subsearch for the brackets that are already providing that functionality, and introduce a new one that only highlights those brackets in string scopes.   I don't have time to implement an example for you, but hopefully the information I've provided is sufficient. Feel free to comment more if you have more questions and I'll try to answer them as I have time, but I will consider this issue answered.. @CuriousPhilomath, BracketHighlighter does not control how Sublime renders colored regions, we simply use Sublime's API to create the region with the given scope.  You will have to play with foreground and background colors in your color scheme file yourself to see if you can find some combination that does what you want it do.\nAs far as BracketHighlighter Documentation goes, we mainly show simplistic examples, to control both foreground and background colors, you will have to experiment yourself.  Maybe this previous issue will help you get closer to what you are looking for: #483.. You'll have to give me some time to get around to looking at this. I'm not sure I understand exactly what the issue is, but I'll hopefully get around to looking at this soon.. So, as far as I can tell, the command below works fine.  At least as I would expect it to work.  I will elaborate.\njs\n    // Select text between brackets\n    {\n        \"keys\": [\"super+k\", \"[\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"square\"],\n                \"command\": \"bh_modules.bracketselect\"\n            }\n        }\n    },\nBH, no matter what, targets the closest, valid bracket around a cursor(s), and only that one (per cursor).  Then the plugin is applied to that target if it meets the appropriate criteria.\nBH does not match all brackets around the cursor and then apply the plugin to one of the many matched brackets.\nSetting type square does not currently filter BH's actual matching rules, it only controls when the plugin is applied to a given matched target.\nHopefully that makes it a little clearer?\n. > So, what I'm looking for, is to create a shortcut where BH will select the nearest pair of square brackets from my cursor (ignoring other brackets on the way).\nIf the closest surrounding bracket is a square, then it will select the content of the square, but if the closest bracket is something else, it should cancel the command.\nThe only way to get what you want would to alter the list of valid bracket patterns on each command instance on the fly. Like if I set type to square, BH only looks for squares and no other bracket types.  You lose context in that case so something like ([)(]) would select the [)(] which normally wouldn't get selected due to context with () patterns.  Or you would have to keep matching brackets further and further out until you find a valid one.  Performance on executions could be quite bad in certain cases.\nBasically, out of the box, BH matches the closest bracket and immediately stops searching for performance reasons.  No parent brackets are matched.  There is no current way to match anything except the current surrounding bracket, but you conditionally due things based on the type of surrounding bracket.\nSo, in short, the answer is no.\n. Well, I'm glad you found something to get what you need \ud83d\ude04 .\nThere are a number of features that I think would be cool, but really are more practical if implemented (or at least partially implemented) on a much lower level to get good support, which isn't really possible with the current Sublime API.\nMore complexity could be integrated into the source to maybe allow cooler things, but honestly, maintainability is my biggest priority at this point.  I maintain too many plugins and repos.  Most of my plugins are more in a state of fixing bugs and maintaining support with the latest ST and only the occasional new feature.  That's not to say I don't add new features, but I am a lot more selective these days.. Can you post a copy pastable example?. Yeah, I understand the problem.  Lua keywords are currently required to be at the start of the line.  The rule will have to be updated accordingly, most likely to provide an exception for function. Obviously I am not an expert in all languages, so languages I don't use are supported via pull requests by the community as I am not familiar with the nuances of each language.. BracketHighlighter is more a bracket highlight plugin, not a folding plugin. It allows you to perform special operations on highlighted/found brackets, but that is about as far as its ability goes.\nBracketHighlighter does not track bracket depth. A matter of fact, it abandons matching brackets as soon as it is sure it sound match.  This is to ensure good auto-highlight performance.\nUnfortunately, advanced level detection and folding is not really something that fits with what I am trying to accomplish with this plugin at this time.. There are number of issues that highlight various issues when trying to highlight HTML with PHP, you are free to search them in the issues if you are curious, but I will briefly touch on why this breaks, and why I have no intentions to fix this at the present.\nIn short PHP breaks HTML syntax.  If I were to construct a regular expression that allows for PHP, what would it be?  PHP can break HTML syntax in an infinite number of ways.  To try and account for all of them would simply leave us with a regex that would detect all sorts of false positives.\nIt's been a while since I've reviewed tag highlighting and the current state of HTML syntaxes, but if in the future, I get some time, and find a different, more reliable way of highlighting HTML tags, I would be more than happy to make a change, but based on the current algorithm, there is no way to give you what you desire in regards to PHP breaking HTML syntax and highlighting tags.. BracketHighlighter is optimized to target the bracket directly surrounding the cursor(s). Unfortunately, at no time, does BracketHighighter have an understanding of all brackets.  This is not something I have particular interest in changing, and currently have no suggestions currently to make it do such as it would require very big changes.. Closed as answered. I just finally looked at this.  Do you have the full setup of your personal BracketHighlighter settings?  Order can be important and such. The small snippet provided doesn't really let me know how everything is setup.. @sharunkumar, this rule needs to come before the square bracket rule, that is why it is having issues.  The square bracket rule consumes the closing ] before the XML rule ever gets there.. I will consider this answered. Feel free to reopen if you have more questions.. Can you post what syntax highlighter you are using for PHP?  The PHP text snippet you posted works fine for me.  If you want me to look onto other cases, I will need copy/pastable text that fails and I need to know what syntax highlighter you are using.. The color scheme doesn't really matter for this.  If you are using the default PHP syntax, that is enough to know, but if you are using a custm syntax file, let me know.\nThe snippet you gave me has an extra } // ENDFUNCTION im360_authentication_check() which I removed, and I had to wrap it in <?php ?> to get it to work proper.\nIf you post complete failing examples that I can copy and paste, and post your custom bracket highlighter settings, I'll look into it further.. Everything is working fine for me with your example.\nWith your PHP view having focus, bring up the editor's console and enter the command below and tell me what syntax it reports:\n```py\n\n\n\nsublime.active_window().active_view().settings().get(\"syntax\")\n'Packages/PHP/PHP.sublime-syntax'\n```\n\n\n\nAlso, please provide me with any overrides you have in bh_core.sublime-settings.. My answer for this issue is the same as for #504. Please see the answer here: https://github.com/facelessuser/BracketHighlighter/issues/504#issuecomment-436780526.. I will consider this issue resolved, but please feel free to respond with further comments if something is still unclear.. Please post support info as instructed by the issue template.. What syntax to you have enabled on the file.  Is it the built in PHP or something else.  I'm not having issues with the example you linked.. Your custom settings are overriding the default:\njs\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?=[^?%]|$)\",\n            \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"keyword.operator\",\n                \"source.ruby.rails.embedded.html\",\n                \"source.ruby.embedded.html\",\n                \"storage.type.function.arrow.js\",\n                \"punctuation.accessor.php\",\n                \"punctuation.accessor.arrow.php\",\n                \"source.php meta.embedded.html punctuation.section.embedded.begin.php\",\n                \"source.php meta.embedded.js punctuation.section.embedded.begin.php\",\n                \"source.php meta.embedded.css punctuation.section.embedded.begin.php\"\n            ],\nI suggest you look into using \"user brackets\" if you want to add or change existing brackets. Overriding all the brackets means you don't see fixes.. > do you mean that your default app settings are not good to use as they are?\nNo, that is not what I'm saying. Look at the current release's angle settings, which are the default, and work out of the box: https://github.com/facelessuser/BracketHighlighter/blob/st3-2.27.4/bh_core.sublime-settings#L398.\nWhat you posted does not match the latest release.  You are not using the default settings.  If you override all of them, you don't see the latest which may have updates as syntax files change sometimes, so we must add fixes.  You also don't get new bracket rules because you are overriding the entire list.\n\"User brackets\" allow you to add custom brackets, or tweak existing ones to your liking but still get updates for everything you are not overriding. Copying and pasting the entire bracket configurations into user folder is not recommended as stated in the documentation.  All other settings are fine.  Most other settings can all be copied, unless notified in future releases that there are breaking changes.. Duplicate of #500 . I've generally been resistant to adding such special attribute chars to HTML and have been encouraging people to create a vue profile in the settings to be used with vue syntax.  I was unaware that the default HTML syntax allows @ in attributes. What all does the default syntax allow in attributes? If I start adding in syntax for one template (or HTML derivative) language, I will get an influx for others.  If I knew more about what the default syntax allows, maybe I can just match that.. Yes : is handled by BH to cover namespaces that can occur in HTML5 with embedded XML content. Sublime syntax allowance is a bit more permissive than I'd like, but maybe I should just cave and allow some of these other symbols. Is @ the only needed one? I assume it is restricted to only attributes?. Okay, when I get a chance I'll make the adjustment.. Package Control should not be installing BH. I don't actively support ST2 on Package Control anymore. You can see that Package Control site shows only ST3 support: https://packagecontrol.io/packages/BracketHighlighter.\nI do have a ST2 branch available, but some manual installation is required.. You've provided me with no info on what version of Sublime you are using. Please provide that information. It seems odd that it is trying to download such an old version though. Depending on more info, this may be   a Package Control issue.. Also, please open a new issue as your issue may be very different than the opening post.. I'm not sure what webarchive is.. I'm closing this as the original issue was answered.  In additional issues should be opened in a new issue.. This is because PHP syntax is quite invasive and breaks HTML syntax.  Bracket Highlighter has a difficult time resolving such cases.  Syntax and scopes and bracket nesting get all messed up in this case.  Maybe some scope settings can be tweaked for HTML/PHP strings, I'd have to see.  Pull requests are welcome, but if you 'd like me to take a look, please paste a copy and pastable example, and if I get some time, I'll take a look and see if there is a reasonable solution.. I missed this when it was originally posted. The example style quotes not getting highlighted is due to a change in the HTML syntax.  Particularly in how the attribute value for styles is scoped.  Double quote highlighting is scope based.  It checks that the cursor is on a string scope, and if so, it retrieves the extent of the string scope and checks the ends to see if there are  quotes.  In the case of style, that specific attribute, for some reason, is no longer scoped as a string. This breaks BracketHighlighters ability to to highlight scopes for this. A new rule would have to be added for this specific case.. So, I don't understand, how is BH \"messing with the regions\". I'm not understanding how BH is breaking indentation.\nAre we just not happy with performance? I can see that being related to #431.\n. > This should break any package, which heavily relies on regions (as WrapAsYouType).\nI will have to investigate this.  BH uses regions as well, and I have never seen regions disappear due to how it does things.  I also use multiple plugins that use regions, all of which I haven't experienced regions being removed.\nI'm not saying there isn't a link somehow between BH and WrapAsYouType, but WrapAsYouType is a very new plugin, the first that has complained that BH is causing regions to be removed. Performance, as I stated earlier I understand. But I am suspicious of what WrapAsYouType is doing specifically.\nI will play with the snippet you've provided.  You haven't exactly explained what I should experience using the above snippet though.  Is it meant to mimic how BH is breaking things?  Or something WrapAsYouType is employing?. Hmm.  It is possible that WAYT is greatly abusing regions and forcing us into some corner case.  I find it interesting that WAYT is the only plugin experiencing this issue, and the response is that everyone else is at fault, even though this issue has never been experienced by other plugins.\nNow, that doesn't mean we aren't contributing in some way to the issue.  I'll need to try and reproduce this issue outside of WAYT and BH.  I don't want to debug WAYT, and I need to verify that what BH is doing can somehow break regions.  If it does, I would still argue it is a Sublime bug, but maybe we could mitigate the issue.\nI'll be honest, this is low priority for me as only WAYT is experiencing this issue.\n. Great.  Not sure when I'll look at this, but I'll let you know if there is anything else I need.. Tags work different from normal brackets. But, as far as outside adjacent is concerned, instead of being between brackets (| ), you can be touching the outside |( ).  But with tags, this is a little different.  Tags is really just matching < >, but applying a BracketHighlighter plugin that then matches tags.  So tags require to to be in or touching an opening or closing tag.  It will not work in this case <html>    |    </html>. But it's just based on how tags is implemented. If it worked like normal brackets, you'd still run into issues with HTML content  that has brackets, so you'd have to disable HTML content bracket matching so it would match the tags in the content.\nHopefully that made sense.. It is most likely possible.  I strongly suggest not doing it in plain text documents as text could contain anything.  As there is no real syntax highlighting in a plain text file, we can't get scope context, which means you might get all sorts of conflicts.  But in a Markdown file, it is certainly possible. You'd have override HTML rules and add your Markdown syntax (see documentation) and possible tweak some scope rules.. Probably not tag mode. I was thinking just updating the angle rule to include markdown syntax, but I admit, I haven't looked too closely at the implications. Give me a few days, and maybe I can take a closer look and possibly give more details instructions on this.. You will have to take this over to Package Control. I do not control certificate handling on a user's system. My code is hosted on GitHub, which is where Package Control retrieves it from, and I do not control GitHub's certificates either.. LGTM. Thanks for the pull!. You shouldn't need a Julia parser.  I would think that inline for and if should not be highlighted.  You only want to highlight block if and for keywords. Most likely, only highlighting if and for blocks that start a line (accounting for whitespace) may be all you need. I know we do something similar with some languages. You will have to give me more time to provide more info.\nKeep in mind that I don't know Julia all that well, so I don't know if there are cases with block if and for that don't start a line, I'm just making a generalized guess.. Is there any difference in syntax scoping that could be used?. Hmm, you may need a bh_plugin to figure out context.. What syntax file are you using? BH uses scopes to avoid strings, if the string scope isn't used for strings then it won't avoid strings. This is why plain text isn't enabled by default for BH. We can't get proper context in plain text without parsing the whole file, which is too expensive.. Never mind, I see you said JSON syntax. I'll try it out, but your screenshot doesn't look highlighted by JSON.. I cannot reproduce this\n\nAre you sure you don't have some custom BH rules?\n. If you want me to test your specific code, please post it as something I can copy & paste.. No problem. . 1. I cannot reproduce this. On both Mac and Windows there is no issue. This may be only reproducing on Linux with very specific configurations.\n\n\nBH isn't doing anything to the cursor in this scenario.\n\n\nBH has no way of controlling Sublime's graphical refresh.\n\n\nI would search or file an issue over at Sublime's issue tracker. There is nothing BH can do to fix this issue in your scenario. Redrawing and refreshing the UI should be properly handled by Sublime.. Closing this as not reproducible.. I recently pushed them into their own file as they are actual settings for the bh_tag plugin and not the core.   Just forgot to update the docs.\n. Whoops. Totally need to remove block_cursor_selected_only.\n. A couple of things:\n\nThis will not catch try if it is on the first line.  Maybe something like this would work better? (?:(?<=^)|(?<=[\\\\s;]))(try|class|record|begin|unit|repeat)\\b?\nYou should probably create a bh_plugin to handle pairing end and until to the proper opening brackets: see the luakeywords bh_plugin as an example: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/luakeywords.py.  I imagine unitl can only be linked to specific opening keyworkds as well as end.\n. Is (brackets[0] == \"unit\" and brackets[1] == \"end.\") and (brackets[0] != \"repeat\" and brackets[0] != \"unit\" and (brackets[1] == \"end\")) necessary?  I feel like you could remove both and just have: (brackets[0] != \"repeat\" and (brackets[1] == \"end\")).  From the code, it appears that until is only used for repeat and all others use end, or am I misinterpreting?\n. I see, it is looking for end. not end.  I missed that.\n. > I debated adding unit, so I could remove the cases for unit and end.since almost every Pascal file will start with one and end with the other, so highlighting them is almost pointless. Then I could use the simplified logic of lua (repeat XOR end).\n\nI'll leave that up to you.  Just let me know what your final decision is and I think we're ready to go.  Everything seems to look fine.  I am indifferent to whether unit stays in or not.  I don't really use Pascal, so I leave those kinds of decisions up to the users of the language.\n. Now that I am looking at this again, I would collapse class, record, and interface into a common pattern: (?<=\\\\=\\\\s)(?:class|record|interface).  This will clean things up a bit.\n. I agree, I personally use parentheses and never use line continuations.  I don't always ding people on it, but I didn't realize they actually mentioned this in PEP8.  I guess in that guess, I think I will enforce it more.\n. Do you mind indenting the content between the newly added brackets?  After that, I have no problems merging.\n. Checking if name is mdcodeinline is probably not necessary since we are only attaching this plugin to mdcodeinline.\n. Understood, but I like to run the least amount of instructions where possible for performance as these will be run on every select or edit.  So unless it is needed, I would prefer it to be removed.\n. Why are you putting this directly under Tools?  I see your commit message as \"Fix the error menu items\"...what are you fixing?\n. I already see these changes in your first pull request.  Were you hoping for me to take this pull over the other one?\n. This is only partly true as packages usually either put them under Tools/Packages or Tools.  When I first added the menu options people were putting them under Tools/Packages.\n\nThis was my first package, but if I had created this package today, I would never have added these menu items as I feel the command palette is a better and more useful place.  I  honestly would love to remove the menu items entirely, but I haven't because there are some people who use the menu for some reason...but I still may remove them entirely in future as I just don't find them useful as menu items.  As I will never use the menu items, I like them tucked under Packages to not clutter up my Tools menu.\n. As your other pull patched the mnemonics already (which I merged), the only other thing this pull offers is moving the tools entries which I don't really want to do.  I am probably going to pass on this.\n. You are going to have to put BracketHighlighter back under \"id\": \"packages\" before I consider merging this.  I don't mind merging the other stuff.\n. You are going to have to close the string with a double quote.\n. Is UNTIL meant to be REPEAT?  If so, you might want to implement a bh_module to ensure this pairing.  You can check out existing bh_modules.  Maybe this one would help: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/luakeywords.py.\n. Don't use (?i), it should already be case insensitive.  If you need to enforce case, do it in a bh_module.  These flags will affect all currently active rules.\n. Instead of creating a new list instance every time the compare method is called, how about creating a static tuple up front?\n```\nS840D_HMI_CLASSES = (\"//a\", \"//b\", \"//g\", \"//m\", \"//s\")\n...\nif o in S840D_HMI_CLASSES and c == \"//end\":\n```\nSee the following for reference: https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/rubykeywords.py.\nWe don't really need a dynamic list and tuples are faster to assign to. And this way we only bother allocating the object when the file is loaded, after that all calls to the compare method just references the object.\nEverything else looks fine.\n. Only one blank line is needed before this.  You will only see two before functions and classes in the global scope.  It's a Python PEP8 thing.\n. Same as mentioned previously.  Only one blank line before this.\n. This wasn't meant to be included here.  Revert this change to angle matching.. Thanks for pointing this out.  I had put this on ice for a bit as I wasn't happy with my first implementation of the spelling tool and only recently got around to refactoring.  This got overlooked as I'm specifically avoiding things in back ticks (mainly non-words like function names and settings values etc.). . ",
    "douglas": "Thanks a lot =)\nMy problem was this:\nNow SublimeText2 shows (if the theme supports it) a little marker in the elements like [, ], (, ), {, } so i do not need BracketHighlighter do mark then anymore.\nBut i could not find a documented way to disable the plugin highlight, then i searched for outline (what i was using to minify the clutter and discovered sublime.HIDDEN which made sense for me).\nAlso, i need to complement this patch with documentation and adding this preference in the plugin default config.\nThank you so much for your efforts with this plugin, it is helping me a lot =)\n. Thanks you so much ! I also do not follow the 80 char limitation, but i tend follow it as much as i can as i use SublimeText2 and vim with splitted windows.\nIf the code has 80 chars or something near it (100 char) it works great to split the window in two and work with two code files, like the code file and the test file.\nAgain, thanks for your work =)\n. ",
    "bzx": "Sorry, you're right, I should have included some repro steps and details.\nIn fact - I just found the issue cause ;)\nOSX 10.6.8\nSublime Text 2 Beta, Build 2139\nI downloaded the package and placed in:\n~/Library/Application Support/Sublime Text 2/Packages/facelessuser-BracketHighlighter\nI was trying to access ANY settings file, both user and global.\nBut it looks like I just had the directory name wrong..\nSo the directory of the package must be exactly \"BracketHighlighter\" - you probably should include that thing in the description of your package on github - on OSX, when you unzip the directory gets the same name as the zip file. Or.. just remove that limitation.\nThanks!\nbzx\n. I wanted to clone but wasn't sure as the description doesn't say to clone ;) silly me.\nI'll try that Package Control plugin.\nThanks,\n. ",
    "freejosh": "I'm pretty sure it's BH, I can't recreate the freeze with it disabled. It consistently freezes even when selecting about 8 lines (120 characters), but only if the selection causes scrolling. I also tested this with SublimeBrackets and it isn't an issue.\n. Sounds good, thanks for checking it out!\n. For sure, I'll try it out when it's up\n. That fixed it for me!\n. ",
    "ryanlecompte": "Thanks for explaining your thoughts regarding this issue. After thinking about it a bit more, I also agree that it's most likely out of scope for the current plugin. Thanks again!\n. Awesome work!!!!!\nOn Oct 1, 2012, at 8:34 PM, Isaac Muse notifications@github.com wrote:\n\n@ryanlecompte \nI am doing a possible re-write. Performance will determine if it sees the light of day, but so far I am optimistic.\nThis is in very, very early stages. I have been tinkering with it only for a little, and it has quite a bit until it can catch up feature wise. But if it goes well, something like this may appear in BH2.\nAs originally requested...highlighting of ruby if|while|do etc.\nThe method of detecting brackets is much different allowing me to grab multi char brackets (obviously using brackets loosely here). I haven't worked out how I will expose this functionality to the user, but I am hoping to abstract it enough to essentially allow for modules to be dropped in for whatever language quirks a user would like to add...we shall see though.\n@charlesroper \nI don't see a problem with BH2 also supporting your markdown interests either. It appears that the markdown tmLanguage in ST2 scopes the entire underline or bold etc. with a consistant identifiable scope.\nI imagine there would be two kinds of bracket styles a user could define. One where end caps are specified, and one where the scope is the base...like strings is done, and how markdown bold, underline would be done.\nIf you guys still have interest in this feature, when I get it more fleshed out (and if it doesn't to turn to crap on me), I may need some testers.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "charlesroper": "I came to the repo looking for something similar. I use Markdown a lot and would like a way of including asterisks and underscores. Trouble with this is that the opening and closing tokens are the same, so I'm guessing that makes it harder to implement.\n. Sweet. Definitely interested in this. Also been doing some rst lately so it\nwould be useful there too.\nThanks for doing into this - very much appreciated.\n. That, frankly, is music to my eyes. Nice one indeed, and sincere thanks.\n. Just wanted to let you know I'm chronically busy at the moment and won't have a chance to have a look-see for another week or so. Didn't want you to think I was unappreciative - on the contrary, I'm really looking forward to digging in. :smiley: \n. Thank you for your work on this Isaac, it's very much appreciated. Kudos.\nOn 23 Mar 2013 23:26, \"Isaac Muse\" notifications@github.com wrote:\n\nBracketHighlighter 2 is now on the master branch. This issue is now solved.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/12#issuecomment-15348038\n.\n. \n",
    "askeeve": "I wonder, would it be easy enough for somebody to modify the package locally for something like this?  I have a strange syntax to work with where lists start with a ` and end with a ' .  Would I be able to replace something like angle-brackets, which I don't use, with these for my own use?  Also, would this matching be likely to interfere with a single-quoted string match?\nThanks so much!\n. That seems to work fantastically!  Thank you so much.  One small issue (and\nI probably should have mentioned this before) inside the ' syntax, items\nare separated by ,'s.  It looks like if the cursor is on or just to the\nright of a comma the highlight turns off for the and '.  Is there\nsomething simple I'm overlooking for this?  Thanks!\nOn Mon, Jul 9, 2012 at 12:35 PM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\n@askeeve you wouldn't need to replace angle.  Since the starting character\nand ending character are different, you could probably easily add just\nanother rule.\nin BracketHighlighter.py  you could add a bracket type called\nspecial.  Just follow the two examples below.  These are the only two\nplaces you need to add them.\ndef init_brackets(self):\n        quote_open = \"r ' \\\"\"\n        quote_close = \"' \\\"\"\n        return {\n            'bh_curly':  self.get_bracket_settings('curly', '{', '}'),\n            'bh_round':  self.get_bracket_settings('round', '(', ')'),\n            'bh_square': self.get_bracket_settings('square', '[', ']'),\n            'bh_special': self.get_bracket_settings('special', '`', '\\''),\n            'bh_angle':  self.get_bracket_settings('angle', '<', '>'),\n            'bh_tag':    self.get_bracket_settings('tag', '<', '>'),\n            'bh_quote':  self.get_bracket_settings('quote', quote_open,\nquote_close)\n        }\n```\n    def init_match(self):\n        # Current language\n        syntax = self.view.settings().get('syntax')\n        language = basename(syntax).replace('.tmLanguage', '').lower() if\nsyntax != None else \"plain text\"\n        # Reset objects\n        self.sels = []\n        self.targets = []\n        self.highlight_us = {}\n        self.lines = 0\n    # Standard Brackets\n    if self.exclude_bracket('bh_curly', language) == False:\n        self.add_bracket('bh_curly')\n    if self.exclude_bracket('bh_round', language) == False:\n        self.add_bracket('bh_round')\n    if self.exclude_bracket('bh_square', language) == False:\n        self.add_bracket('bh_square')\n    if self.exclude_bracket('bh_angle', language) == False:\n        self.add_bracket('bh_angle')\n    if self.exclude_bracket('bh_special', language) == False:\n        self.add_bracket('bh_special')\n\n```\nAfter that, you would just need to add all the settings in the settings\nfile.\nSo if there was a setting called round_language_list, you would\ncreate one called special_language_list.  Also special_scope,\nspecial_style, etc.  Obviously for the icon, you would have to use\nsomething generic like dot.\nYou can replace the special with whatever name you want.  This works\nwell for simple single character brackets that are different.\nBrackets that have the opening the same as the closing are much different\nand require special handling.  If one day I a generalize the quote matching\nenough, I may be able to allow for simple addition of single character same\nbrackets.  Then I could just expose a setting allowing for defining bracket\nrules.  Multi-character opening and closing brackets is much more difficult\nin the current algorithm and would require me shuffling a lot around.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/12#issuecomment-6851994\n\n\n-Adam\n. Fair enough, I'll play around with it a little more and see about doing that if I can't figure it out.  Thanks!\n. That fixed it.  Thanks! :)\nOn Mon, Jul 9, 2012 at 7:04 PM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\nDo you have a BracketHighlighter.sumblime-settings file in User and in the\nplugin directory?  Usually the User one overrides the actual plugin ones.\n I would delete the User settings file and unistall and reinstall the\nplugin and restart ST2.\nI am not sure what happened to the plugin on your end, so my advise is to\ntry and give you a clean install of the plugin to essentially reset it back\nto default.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/25#issuecomment-6862493\n\n\n-Adam\n. ",
    "jtmkrueger": "Fantastic!  This is exactly what I was looking for.\n. ",
    "scout4u": "Thank you for your prompt reply. You do a great work. Hope API will include bolding for brackets. \n. ",
    "titoBouzout": "Of course.\nWith the default installation change debounce_delay to '0. ( I prefer instant highlight )\nI also have \n\"search_threshold\"     : 4000,\n\"tag_search_threshold\" : 4000\n1 - Now open the file ../Pacakges/HTML/HTML.tmLanguage\n2 - Scroll to the end, click after < /plyst>\n3 - Press any key and don't release it.\nYou will notice the key writes very slow. Changing search_threshold and tag_search_threshold to 2000 ( default value ) improves a little bit the situation. But still is slow.\nIf you test my pull request you will notice typing is fast (as when the plugin is not installed) without compromising debounce_delay and the thresholds. I also think  debounce_delay should be 0 by default with this commit.\n. I'm on Windows XP Core 2 duo 1.6GHz.\nI noticed this problem typing in a document I can't remember. Problem was that characters that I was typing started to appear after a very noticeable delay. I believe there is no need to check on every keypress\n\nYour change is optimal when the key is held down or the events are firing quite rapidly, but when the events slow down, it starts to show the lag again.\n\nI think there is no way to remove the lag with a threshold of 40000000 without using a separated thread. The processing takes CPU and cannot be avoided.\n. Thanks a lot for taking the time to check this.\nRegards\n. Hard to believe, this is just checking the time.\n. > Can you please try setting the old delay to 120ms and let me know if it is solving your typing dilemma.\n\nLooking at this more and thinking about it more, all you are doing is throwing away matches if 120ms didn't pass. Have you tried setting your normal delay to 120ms (the 0.12 you are using in your workaround). My current method is already throwing away matches if so much time has not occurred and it ensures that the match will happen. Yours throws away matches before the delay is reached and in some instances causes the match to not get performed at all (rare, but it does happen).\n\nThe same happens even with high delay value, and the problem is that the logic of your delay is doing a lot of operations in every cursor moving or keypress to see if some processing should start.\nI'm aware of the problem that maybe moving the cursor fast does not highlight the last one. This can be easy solved by running a thread that checks if there is something to highlight.  btw, I find the problem of slow typing worse than a no-highlight ( easy solved by clicking or moving the cursor again )\n\nEssentially, the current delay method can do the same thing your workaround is attempting\n\nEssentially are similar, but no, you method waits after the last iteration to highlight. My method tries instant highlight if at least xms passed.\n. The problem on OS X is still reproducible?\n. I'll update this commit\n. I've pushed new code. I'll try to explain\n1 - The loop is there to fix the bug you noticed: moving the cursor fast does not highlight the last position.\n2 - I noticed on_selection_modified is dispatched twice when clicking. ignore_next is there to take care of this. btw, sometimes these two calls run at the same time and I believe we can't do nothing. ( with the timer implementation )\nI left some prints to let you know from where the highlight is dispatched.\nI also noticed that the delay on the first characters when typing super fast are because of the autocomplete function.\n. Looks and works very good! :) \nFinding more improvements...\nI noticed that every \"on_modified\" causes an \"on_selection_modified\" ( not so obvious, but if you think on this, every char write makes the cursor to change of position )\nThen.. when typing we just flag modified to True and time to now. This allow to NOT highlight on first char write and highlight when the user stops typing. Will try to push code.\n. Take a look to this diff: https://github.com/facelessuser/BracketHighlighter/pull/16/files\n- add some prints to know from where is running.\n- improves handling of \"on_modified\"\nI can't think now of a situation that \"on_modified\" is dispatched but not \"on_selection_modified\"\n. I'm glad to be of help, and thanks for your help and work on this.\n. I don't think someone will use this plugin with more than 10 selection. If the amount of selection is 100 then the user is trying to do something else like replacing or something.\nBetter is to allow the user to configure the amount of max selections. IF you adjust the threshold the same thing will happen because the threshold will work for each selection right?\n. OK, Thanks for looking into this! You plugin does more things that I never used, will check that with time.\nRegards\n. Thanks! I would prefer underline \"dict\" ... :100: \n. OK\n. I think the package should limit it to let say 5, and the value can be changed manually in settings. As mentioned in https://github.com/facelessuser/BracketHighlighter/issues/20#issuecomment-4677803\nIf someone ALT+F3 something is looking for Find and Replace, multi editing cursors, typing at the same time in a lot of lines, is not looking for highlighting. \n. Thanks Isaac, I'm currently testing. My testing file, which is almost exactly as a real life file but with generated data: https://dl.dropboxusercontent.com/u/9303546/SublimeText/Packages/BracketHighlighter/test.js\nTest case: \n1. single click \"title\" (in line number 11) \n2. double click \"title\" (in line number 11) \n3. hit \"ALT+F3\", this should create 600 Regions. \n4. Now type \"not a title\". The view should re-write the 600 Regions and insert \"not a title\" in place of \"title\".\nWith no packages:\n1. single clicking \"title\": no noticeable delay.\n2. Double clicking \"title\": no noticeable delay.\n3. Hit ALT+F3: Delay is a fraction of a second.\n4. Type \"not a title\", Delay is two fractions of a second.\nEnable BracketHighlighter with the following settings, and repeat Test case.\n{\n    \"search_threshold\": 50,\n    \"bracket_outside_adjacent\": true,\n    \"no_multi_select_icons\": true,\n    \"auto_selection_threshold\" : 1\n}\n1. single clicking \"title\": no noticeable delay. (outlines perfect)\n2. Double clicking \"title\": no noticeable delay. (outlines perfect)\n3. Hit ALT+F3: Delay is two fractions of a second.\n4. Type \"not a title\", Delay is three fractions of a second.\nNow.. change BracketHighlighter settings to\n{\n    \"search_threshold\": 5000,\n    \"bracket_outside_adjacent\": true,\n    \"no_multi_select_icons\": true,\n    \"auto_selection_threshold\" : 1\n}\n1. single clicking \"title\": Delay is a permissible fraction of a second. (outlines perfect)\n2. Double clicking \"title\": Delay is a permissible  fraction of a second (outlines perfect)\n3. Hit ALT+F3: The editor blocks for at least 20 seconds.\n4. Type \"not a title\", The editor blocks for at least 20 seconds.\nThis is what I expect:\n- As my setting \"auto_selection_threshold\" is set to \"1\", BracketHighlighter should take the same amount of time to search for 1 bracket when no selection is done and when multiple selections are present. This is not the case.  \nTo stay clear:\n- I single click \"title\", BracketHighlighter highlights the brackets in a fraction of a second.\n- If I select many \"title\", BracketHighlighter should highlight the first \"title\" in a fraction of a second, and skip everything else. But instead it blocks\n. Outstanding thanks\n. Thanks @facelessuser, I think it is important to conserve the extreme fast behaviour that ST has. \nWhat about some very carefully selected default settings? To allow highlight in situations were makes sense, and disable it when the common sense is exceeded. I like the idea to kill it when selections are exceeded\n. If someone installs BracketHighlighter with default settings, creates 40/50/600/3000 or more Regions and the editor does not block, then I think we are safe. Is that true with the next improvements? \n. I'm speaking of default settings, I used your plugins for years and I've no idea if \"select bracket content\" plugin is on or off. I consider I'm on my own if I actually known what your package really does, which is not the case as I've no idea if the plugin \"select bracket content\" is on. If we talk about default settings, new users or people that just don't know:\nLet me rephrase the question, when your plugin is installed with default settings, selecting 40/50/600/3000 or more Regions will add more overhead than default ST overhead?\n. > if you use it on 37,000 regions, you get what's coming\nMakes sense!\n\nEvery plugin adds more overhead if it is on a listener, even if all it does is run and exit. But with kill_highlight_on_threshold that is pretty much what it does; runs and exits. So, is there noticeable overhead? No.\n\nOK.. so that means that kill_highlight_on_threshold defaults makes it friendly? and there is no noticeable overhead? for what I asked.\n. That would make a great experience for people using both BracketHighlighter with default settings and multiple selections. Many thanks!\n. Thank you for looking into this\n. This is very weird thing. Step to reproduce:\n1. Have an unzipped version of BH in Package Folder.\n2. Main menu bar -> Preferences -> Package Control -> Upgrade Packages\n3. BH will be listed as a package that needs update. \n4. Click the item in the quick panel to upgrade, and THEN very quickly (before the package updates) Go to Main menu bar -> Preference -> Package Control (but don't click the menuitem! just stay there... ) \n5. Wait a bit... click \"Package Control\" \n6. A new view/tab appears holding a file named \"Default (OSX).sublime-keymap\"\nThis is probably triggered because the menu is updated after it was opened but before it was used. \no.O\nSo if you open the menu, a package updates the menu in between and you click something after it was updated, an unexpected command will run\n. https://github.com/SublimeTextIssues/Core/issues/824\n. ok thanks\n. ",
    "phillipkoebbe": "Thanks for such a detailed response, and quick, too. It's really not a problem to me that the strings inside of strings don't get highlighted. I reported this as an issue only because it seemed like a miss, but with your explanation, I see that it's just not reasonable to think that all combinations of embedded strings, quotes, braces, etc are going to be picked up like one might expect. I suspect that what you have going on in there would make my head spin if I looked at it, so feel free to close this issue at will.\n. Out of curiosity, is this issue what would cause a PHP highlighting anomaly? When I have parentheses inside a multiline (double quoted) string, the double quotes remain highlighted when the parens are highlighted. It sounds like the same thing, but I just wanted to make sure.\nHere's an example:\nphp\n<?php\n        $q = \"\n            select\n                a.*,\n                array(\n                    select p.fname || ' ' || p.lname as coordinator\n                    from area_coordinators ac\n                    inner join person p\n                        on p.id = ac.coordinator_id\n                    where ac.area_id = a.id\n                        and ac.season_id = ?\n                    order by coordinator\n                ) AS coordinators\n            from areas a\n            where a.dist_id = ?\n            order by a.name\n        \";\n?>\nWhen the cursor is inside the parens of array, the parens highlight and the double quotes that surround the whole string remain highlighted.\n. > I have an experimental branch that I believe  has brackets inside strings now functioning completely like\n\nbrackets outside of strings, and I have removed the additional highlighting of the parent quotes if you are\ninside a child bracket.  I am still tweaking stuff, but I hope to have it done this week.\n\nGreat. Looking forward to trying it out!\n. Looks like it's working just fine. I'm using it with the default settings, other than match_brackets_only_when_between (which is true), and everything looks good. The double quotes dont highlight any more when embedded braces or parens are highlighted.\nNice work. Thanks for the quick response. Hope you get it \"finished\" soon so you can take a break. Who are we kidding? You'll just find something else to do. Heh heh.\n. ",
    "mpmont": "Ok apparently this is changed in my theme file and not in your package. \nI just can't find where it is. I actually didn't want to change the color. \nI just want to remove all the background colors and use just that outline.\n. Exactly what I needed, I just wanted to change from solid to outline on all of them :) \nthanks mate...\nonce again, \ncheers for the package.\n. ",
    "helgatheviking": "well that's sad about the API limitation.  so i'm trying to change the colors with no success.  according to the readme i can put \n<dict>\n    <key>name</key>\n    <string>Bracket Tag</string>\n    <key>scope</key>\n    <string>bracket.tag</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#FD971F</string>\n    </dict>\n</dict>\nin the color scheme file?  and that will change the color for the bracket tag highlight?  i must be missing something,  b/c when i copy the whole sample from the readme, i still get the same awful solid green block on all my angle brackets that i had before.  i can't even read what style of bracket it is anymore.  i'd appreciate any more help you could spare.\n. > It works, but you have to do it just right.\ni say the same thing to people who can't get their wordpress themes to work.  :)  thanks for your patience, i'm obviously new to sublime.  i definitely didn't realize that there were 2 parts to the puzzle.  i edited the user settings for brackethighlighter and still wasn't getting any color changes, until i realized that i was editing the wrong part of my new color scheme.  the color XML must be inside the settings array of the color scheme.  \nnow to pick some colors that won't hurt my eyes!  thanks for your help.\n. ",
    "jrosadocruz": "Thx =D\n. ",
    "xuechengwei": "Be taught\n. ",
    "ckizer": "I still can't get it to do anything but outline as default. Outline is so distracting. How can I get solid color. The trick would be setting it as RGBa value so that you can set the alpha very low to work on any color theme. Does the plist support RGBa?\nPlease help me switch it to solid. Also I only want it to highlight the open/close bracket of tag I'm inside of (i ONLY use it for HTML)\n. Why can't I do alpha transparent color? RGBa values? It allows my highlight color to work with any theme :-(\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\nCheers,\nCourt Kizer\nkizer@me.com\n\u201cWe are the universe experiencing itself\u201d\nOn Dec 24, 2012, at 4:21 PM, Isaac Muse notifications@github.com wrote:\n\n@ckizer I am not entirely sure everything you are asking about, but if you follow the instructions above you should be able to get solid. Use the solid option for the respective bracket style. For any further help, I will need very specific info from you, like your settings file.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dotku": "\nMy question is, why my underscore is thin little one?\nI'm using spacegray theme, it seems there is another setting for curly braket highlight?(thre are two underscore tegether with one white underline and other red underline)\n. @facelessuser Great\uff01It works~!\n. ",
    "dsandstrom": "Thanks.  I guess I tried \"Ruby\" and \"Ruby on Rails\", but those syntaxes don't work well with mixed languages so they don't make sense for tag highlighting.\n. ",
    "appel": "Thanks for your swift response! Here's hoping you'll find a way somehow. Thanks again!\n. Thank you so much for your efforts! Really hoping you're able to pull it off, fingers crossed here... ;)\n. ",
    "mattbolt": "For what its worth ... I would really love this feature also. I do hope you continue persisting with it. How's BH2 coming along ?\n. ",
    "seanvikoren": "Please forgive my ignorance here.  I am a recent convert to Sublime Text 2\nand I am really hoping to get BracketHilighter working for me.\nColdFusion is (sometimes) a tag based language:\n...\nAdditionally, it can embed css, html, jajvascript, SQL.  There is also a\nnon tag based form of the language that can be mixed in.\nAfter installing the ColdFusion Package via Package Control, I attempted to\nget the tags to match by changing a line in BracketHighlighter.sublime-settings\nfrom:\n\"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\"],\nto\n\"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\",\"Coldfusion\"],\nI was unclear on what additional steps I might take next to get the\nmatching to work and would deeply appreciate any assistance or advice.\nCheers,\nSean\nOn Thu, Jun 28, 2012 at 1:01 PM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\nYou will have to be very specific and explain what is not working or what\nyou would like working with said ColdFusion.\nI do not code with ColdFusion, so I am unfamiliar with what you are\nwanting.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/24#issuecomment-6639913\n\n\nSincerely,\nSean Vikoren http://vikoren.com\n702-425-3332\n415-671-9645 (cell)\n. I have attached three files just make sure you get a good set of\nexamples.  They\nhave not been run, but I have taken care to go over them a few time looking\nfor bugs and they appear clean.\nThere is also a possible issue of an html file that has ColdFusion\nembedded, though this is not as pressing for me personally.\nCheers,\nSean\nOn Fri, Jun 29, 2012 at 11:39 AM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\nCan you provide me with an example Coldfusion script file.\nThere are a couple of things I must check.  I will install the ColdFusion\nplugin, and attempt to enable BracketHighlighter for ColdFusion, and using\nthe script you provide, I will verify that the BracketHighlighter can\nrecognize ColdFusion tags properly (I am not sure if there will be issues).\nIf there are issues, I will look into fixing them.  If there are no\nissues, I will give you steps to enable BracketHighlighter with ColdFusion.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/24#issuecomment-6673200\n. Isaac,\n\nMy apologies for the delay, here is the gist info:\n Description:\nColdFusion Test Files\nPublic Clone URL: git://gist.github.com/3043063.git Private Clone URL:\ngit@gist.github.com:3043063.git\nAnd vanilla just in case:\ngit://gist.github.com/3043063.git\nCheers,\nSean V.\nOn Tue, Jul 3, 2012 at 9:04 AM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\nI would really like to help with this, but without legitimate test files,\nI will have to close this issue.  Since I do not use ColdFusion I need\naccurate files using ColdFusion's syntax so I can see what possible issues\nthere are.\nI will be closing this by the end of the week if I am not able to get some\nColdFusion test files.  If at some point after that you are able to provide\nsome test files, we can reopen the issue.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/24#issuecomment-6738510\n\n\nSincerely,\nSean Vikoren http://vikoren.com\n702-425-3332\n415-671-9645 (cell)\n. Isaac,\nI thank you for your plug-in and your attention to date.\nOnce I get to making the list, what is a good way to contact you?\nSean\nOn Wed, Jul 25, 2012 at 3:49 PM, Isaac Muse <\nreply@reply.github.com\n\nwrote:\nI am closing this.  If I get around to figuring which Coldfusion tags are\nself closing, or if someone provides a list, I will look into adding more\nappropriate Coldfusion tag support.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/24#issuecomment-7264686\n\n\nSincerely,\nSean Vikoren http://vikoren.com\n702-425-3332\n415-671-9645 (cell)\n. ",
    "tjahjono": "Here's a list of all the tags in ColdFusion 9. I konw you wanted a list of only self-closing tags, but probably about 60-75% of these tags are self-closing. \n. That page is a nice find! I tried googling for the information but couldn't find anything, and I was trying to give you a list without having to go and document every tag. \nBriefly looking over the list, it does look accurate. In my experience, some tags, like <cfset>, are never closed, even though it wouldn't thrown an error if it had a self-closing tag. Others can either be self-closing or require a closing tag, depending on usage, such as <cfhttp>.  Making all the tags on the left optionally self-closing is a good and probably the best way to cover everything.  \nThe problem is that ColdFusion has soooo many tags (and I won't mention custom tags), and only a percentage of them are used regularly. Nevertheless, I've put out a clarion call for other CF devs over at StackOverflow to assist in this task (http://stackoverflow.com/questions/12452831/self-closing-coldfusion-tags). (However, I have a feeling the question will be closed)\nOff the top of my head, the tags below are never self-closing. I'll do my best to go through the CF tags list and find more.\n<cfoutput>\n<cfif><cfelseif><cfelse>\n<cfquery>\n<cfloop>\n<cfswitch><cfcase><cfdefaultcase>\n<cftry><cfcatch>\nAnd if you want to see a list of every CF tag, check out this page http://cfquickdocs.com/cf9/#cat:categories:All\n. To keep it manageable, I'm not sure @facelessuser should worry about Railo and OpenBD specific tags.  Also, I wonder if BracketHighligther can just look for any tags that start with <cf to flag whether or not it's a CFML tag and then make the forward closing tag optional. This would take care of custom tags. As for <cfimport> tags, it could just look for what's in the prefix attribute, and match those tags. \nOh, and I will also help test when it's ready :) \n. @facelessuser I updated BracketHighlighter.sublime-settings, Elements.py, and BracketHighlighter.py, but now it doesn't highlight any cfml. I also edited User\\BracketHighlighter.sublime-settings, prt yout instructions.\n. I had just replaced the files that were updated. I downloaded the project and re-installed, and that worked. Testing it out now.\n. Worked with it for a couple of days now. Looking good so far!\n. ",
    "boughtonp": "CFEclipse dictionaries specify if tags must/can/cannot be closed:\nhttps://github.com/cfeclipse/cfeclipse/tree/master/org.cfeclipse.cfml/dictionary\nNote that alongside the different CF versions - cf7, cf8, cf9, cf10 - there is also Railo and OpenBD which have extra tags.\nNothing contradictary (in terms of closing tags), but depending on what kind of info you're storing, there's extra tags (e.g. cfwhile in Railo, which acts the same as cfif/cfloop), which may need to be catered for appropriately.\nCustom tags (either called directly with <cf_tagname... or via <cfmodule template=\"tagname.cfm\"...) have behaviour which can vary, so the simplest action is to allow but not require self-closing for any custom tag.\nOf course, there are also custom tags imported via cfimport which have custom prefixes and must always be closed.\n(It's also possible to override HTML tags by having a blank prefix, but fortunately I don't think that's common behaviour, and if anyone does do it, most shouldn't expect an editor to handle it.)\n. Heh, if you think this is bad, try writing a full parser for it. ;) But yeah, the flexibility of CFML is great when working with it, and a huge PITA when writing tools to handle it.\nOh, and just to clarify in case the distinction hasn't been made yet:\nCFML = the language\nColdFusion = the Adobe product.\n(A lot of developers say \"CF\" or \"ColdFusion\" when they're actually referring to the CFML language, so it's useful to be aware what they may or not be referring to.)\n. ",
    "srconklin": "What is the status of this. I am not seeing any bracket highlighting for cfml pages at all\n. This is the new cfml package that is regularly maintained for ST3 \nhttps://packagecontrol.io/packages/CFML\n. ",
    "gnclmorais": "Gladly.\n\nIn this example, the \" tag is opened and closed in the same line, thus showing only one \" icon at the left side, next to line numbers.\nIn these cases, i.e., when there's only one left symbol because the highlighted tag is opened and closed in the same line, its icon could be a little different.\nQuick and rough example:\n\nIt's a very simple and probably dumb suggestion, but I think this little detail would somewhat improve the plugin.\n. I'm very far from being a designer, but I'd be glad to take a look at the current icons and try to come up with some single line and non-single line versions of them... What do you think?\n. Awesome @facelessuser! I am very happy to hear so, as I been incredibly busy and had no time to pick up my own suggestion and actually doing it. I love this plugin, and I can't wait to try the alpha version. :clap: Cheers!\n. ",
    "Venut": "It's already set to false.\nIt's not the gutter icons I'm wanting anyway. What I want the most is to be able to differentiate several layers/levels of parenthesis / other brackets. Having multiple colors would help my eyes an awesome lot figuring out those really nested function-calls.\n. Aha. I see. Thanks for the quick reply.\nHmm. Highlighting matching parent parenthesis would be an insanely useful thing to have. Is it really that much different than highlighting one level? It doesn't have to go all the way back to the first bracket in the file, just current line / lines in view - that's where it would matter anyway. :) \nLike I said, it would make a universe of a difference when working with nested one-liners! :P \n. ",
    "AdamBrodzinski": "Doh! yea that was it ... must be time for bed :D\nThanks for the fast reply!!\n. ",
    "ghost": "Thanks. https://gist.github.com/3296122\n. Figured out what it was. I had an old install of ST2 on another drive, and\nwas editing the old theme.\nFixed.\nOn Wed, Aug 8, 2012 at 2:11 PM, Isaac Muse notifications@github.com wrote:\n\nThe theme you posted doesn't have the new scopes added to them.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/30#issuecomment-7597655.\n. Ok, I went into the bh_core settings and noticed that most of the settings in the '// Define region highlight styles' section where commented out where the key was 'color' and 'style'.  So, I uncommented the color and style keys and now 'outline' is working, however, the icons are still not in color.  I did notice the icons are pulling png's from a directory, so I think I'll probably just modify the png's, cause I really liked them colorized (they all seem to be white with transparency. \n\nAny ideas on how this could've happened?\n. thanks for the link... i figured that out after the plugin switched behaviors on me.  My question is why all of a sudden did the plugin switch switch behaviors?  And why were all of the png's no longer in color?  \nI've fixed it all up so it's working close to it was before.  If there was a recent update, I didn't get a package control notice or anything telling me there was a change.\n. Me too... and I'd like to thank the author for maintaining this plugin... it is really helpful, and very quick.\nI had some fun adjusting the color scheme too, so it wasn't really an awful situation.( thankfully it's the weekend :] )\nI wish I knew more python so I could contribute.\n. Well I had just got bracket highlighter working again, and I fixed up my theme so that it looked incredible (in my opinion of course).  Then I installed this really cool plugin and made some really dumb adjustments that completely messed up my configuration.  I ended up re-installing ST2 and ST3, which wasn't so bad cause I needed to clean some things up.\nI'm glad to hear that BH will be available for ST3.  After installing ST3 today and realizing it wasn't working I was curious what would happen with that. \nPersonally, I felt that just going through the package info was clear enough for me to fix the issue.  Unfortunately I don't have the ability with ST3 to browse the package directory and check everything out, but I can get logs from the console. (but my Python skills are nowhere near debugging ability).\nI'd be happy to help in any way... maybe I can provide my user config file for BH, which goes really well with Block Cursor Everywhere and Vintage enabled, but would be fine on it's own too. Subtle enough so I don't get lost, and clear enough for me to see what I'm doing... since I'm getting pretty blind.\n\n. Here's what I get from the console when trying to use BH in ST3\npython\nreloading plugin BracketHighlighter.bh_core\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 72, in reload_plugin\n    m = importlib.import_module(modulename)\n  File \"X/importlib/__init__.py\", line 88, in import_module\n  File \"<frozen importlib._bootstrap>\", line 1577, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 1558, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1525, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 586, in _check_name_wrapper\n  File \"<frozen importlib._bootstrap>\", line 1023, in load_module\n  File \"<frozen importlib._bootstrap>\", line 1004, in load_module\n  File \"<frozen importlib._bootstrap>\", line 562, in module_for_loader_wrapper\n  File \"<frozen importlib._bootstrap>\", line 854, in _load_module\n  File \"<frozen importlib._bootstrap>\", line 981, in get_code\n  File \"<frozen importlib._bootstrap>\", line 313, in _call_with_frames_removed\n  File \"C:\\xxx\\xxx\\AppData\\Roaming\\Sublime Text 3\\Packages\\BracketHighlighter\\bh_core.py\", line 638\n    except Exception, e:\n                    ^\nSyntaxError: invalid syntax\n. I did restart Sublime after installing BH, but still not working. The plain text file I was testing with contains a firewall config with lots of brackets, such as this,\nfirewall {\n    all-ping enable\n    group {\n        address-group A1 {\n            address 1.0.0.0-1.0.0.255\n            address 2.2.2.2\n        }\n        port-group P1 {\n            port 1-6\n            port 10\n            port 9\n        }\n        port-group P2 {\n            port 1-10\n        }\n    }\n    ipv6-name TEST6 {\n        default-action drop\n        rule 10 {\n            action accept\n        }\n    }\n    name {\n    }\n}\nEven with a ruby file it doesn't seem to work.\n. I only have a couple packages installed. I can pretty much say BracketHighlighter is the culprit. Here's my startup without BH:\nplugin init time: 0.425267\nloading bindings\nloading pointer bindings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\napp ready\npre session restore time: 0.612758\nusing gamma: 2 (err: 6.9282)\nNo handlers could be found for logger \"process\"\nstartup cache, total files: 103 cache hits: 103\nstartup time: 0.992244 (package setup was not run)\nI can restart Sublime several times and get consistent numbers. Now, with BH installed:\nplugin init time: 2.86328\nloading bindings\nloading pointer bindings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\napp ready\npre session restore time: 3.06121\nusing gamma: 2 (err: 6.9282)\nNo handlers could be found for logger \"process\"\nwrote startup cache, added files: 5 orphaned files: 0 total files: 106 cache hits: 101\nstartup time: 3.4607 (package setup was not run)\nThis happens on both Linux and Mac OS.\n. Of course, 3-4 seconds isn't terribly bad. :) But I'm used to ST2 starting up blazing fast. Just curious why BH slows it down.\n. I commented the code out and it loads much faster now. Thanks!\n. Cool, thanks Isaac!\n. Awesome, much improved loading time. Thanks again!\n. I mean it's not installed and it doesn't appear either on the package control's installed packages. And no, there aren't errors, consoles says it install succesfully but when I reboot it appears as not installed\n. I know why it's happening now, its a matter of permission, if I run sublime 3 with administrator privileges now I can install it but it seems weird, it shouldn't ask por administrator privileges right?\n. not permissions of the plugins, permissions of the directory where they are installed\n. - ST3, build 3065 (registered)\n- Syntax = Groovy (and you're right, if i use C syntax everything is as it should be)\n\n. facelessuser i found bh_core.sublime-settings\nNow how do i make it so the underline of the brackets is blue\n. i still cant do it and please facelessuser respond or reply faster i cant understand you are typing about stuff dat i dont know and what colorization rules i dont see any anywhere\n. <dict>\n        <key>name</key>\n        <string>Bracket Default</string>\n        <key>scope</key>\n        <string>brackethighlighter.default</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#CC99CC</string>\n        </dict>\n    </dict>\nDoesnt do anything\n. http://i.imgur.com/5cTuwny.png      http://i.imgur.com/HzfYSuQ.png\n. about http://i.imgur.com/8wl5Fgk.png i dont understand i dont know what to do and about the one http://i.imgur.com/7meU6JS.png\n. well this happened http://i.imgur.com/QsFWuEK.png and also http://i.imgur.com/9I8gXJ2.png\n. I did this http://i.imgur.com/j7829iT.png and this http://i.imgur.com/ZeYcSq9.png but i the underlines of the brackets havent changed http://i.imgur.com/j9EPfDW.png\n. Thank you soo much you 2 helped me alot im very thankful to both of you\n. erm how do i change the bracket underline size or thickness\n. i didnt type bracket size and thickness i typed bracket underline size and thickness\n. ",
    "jonathanwiesel": "Oh, good to know then. Tx ;)\n. ",
    "merlinthered": "The plugin has a lot of users, which probably have arranged with the fact already, so changing the existing shortcuts you provide is probably not such a good idea (the \"Run\" command isn't used that often anyway I guess). Perhaps you could add some sort of warning to the README or some other suitable place so users get notified of this when they install?\n. I'm not 100% sure but I think Sublime recommends user shortcuts are made using ctrl+alt. This won't avoid conflicts with other packages though. Many packages don't define any shortcuts because of this. Perhaps that is indeed the best option...\n. ",
    "Iristyle": "I use the build system in Sublime, so for me, I'd prefer BracketHighlighter to not use Ctrl + Shift + B\n. Yeah, I agree with your final statement -- you're in a tough position really.\n- Provide some bindings and hope that they don't conflict in the future.\n- Provide a sucky user experience by saying -- heres an example file, go figure out what you want to assign.  For someone with a lot of plugins like me, it becomes burdensome maintaining your own keymap, but its really the only thing that you can do.  I don't mind tweaking out my environment for efficiency, but it turns off a lot of (lazy) users.\nReally, the burden of detecting overlapping key bindings should fall on Sublime itself IMHO -- not plugin authors.  I wonder if we can just escalate this issue to Jon and let him provide a Sublime-level solution.\n. Yeah, forgot to add the pull req links here to watch for when it gets accepted.\nhttps://github.com/deplorableword/textmate-solarized/pull/37\nhttps://github.com/deplorableword/textmate-solarized/pull/38\nA section with Themes supporting BH is fine... just wanted to get the ball rolling on putting this info somewhere\nAnd yeah, you noticed that I changed bracket to brackethighlighter -- with all the potential causes for collision, I figured it best to customize the theme to use a more specific name.\n. No worries... \nBTW - I tried all the different colors in the Solarized theme as background highlight colors for the brackets, and that's why I ended up with brackethighlighter.all.  There were only one or two colors that looked reasonable, so I figured instead of assigning a whole mess of colors, I'd just use one that had good contrast.\nBut I understand that other themes might want to get more exotic -- no problem.\n. Yeah, I'm taking over an official port of Solarized for Sublime with @braver since there are some interop issues with Sublime and TextMate.\nThe pull has been sent to package control, and I would hope that the url would change shortly.\nhttps://github.com/SublimeThemes/Solarized\n. ",
    "ndungi": "Thanks a lot !! It finally worked !! Ok, for the benefit of any other user\nwho (will) run into this frustration :\ni took :\n\"quote_scope\" : \"bracket.quote\",\n   \"curly_scope\" : \"bracket.curly\",\n   \"round_scope\" : \"bracket.round\",\n   \"square_scope\": \"bracket.square\",\n   \"angle_scope\" : \"bracket.angle\",\n   \"tag_scope\"   : \"bracket.tag\",\nand replaced a similar section in my BracketHighlighter.sublime-settings\nthen i took :\n\nname\nBracket curly\nscope\nbracket.curly\nsettings\n\nbackground\n#eee\n\n\nand put it in my color scheme file [\n/home/ndungi/.config/sublime-text-2/Packages/Color Scheme\nFilmgirl/Coda.tmTheme\n ] . The trick is to put it inside the  tags. heck , here is an\nexample :\nxml version=\"1.0\" encoding=\"UTF-8\"?\nplist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"\nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\"\n\n\nname\nCoda\nsettings\n\n\nname\nBracket curly\nscope\nbracket.curly\nsettings\n\nbackground\n#eee\n\n\n{..the rest of the xml...}\nAnd now i have curly brackets highlighted with a gray background color.\nSu[er Cool B-)\n\nNdungi Kyalo\nneno.co.ke ~ Your word O Lord, lights my $PATH.\nOn 10 September 2012 16:19, Isaac Muse notifications@github.com wrote:\n\nPlease check out this thread of issue 21, where I helped someone with this\nvery problem: https://github.com/facelessuser/BracketHighlighter/issues/21\n.\nST2 API makes this a bit confusing, but BracketHighlighter at this point\nhas no choice but to require this odd way to color brackets.\nHopefully the link will help.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/34#issuecomment-8423138.\n. \n",
    "webthingee": "Thanks for the info!!!\nGreat PLUG IN!!!\n. Thanks for the updated, I will be watching that issue :)\nIf you need any help testing, I'd be glad to offer any support I can.\nSean Lange\nsean@webthingee.com\np: 925.344.5678\nOn Oct 1, 2012, at 8:41 PM, Isaac Muse wrote:\n\n@webthingee I am moving forward with a possible re-write of BH for BH 2.0. It is very possible you may get what you are looking for. See this issue for tracking progress info facelessuser/BracketHighlighter#12.\nI will be closing this issue, since your request is essentially the same as Issue 12. I would follow Issue 12 to be informed of future progress. It will probably be a while for BH 2.0 (assuming it meets my expectations).\n\u2014\nReply to this email directly or view it on GitHub.\n. That looks pretty awesome :)\n\nsome debug thoughts...\nHow does it react if they are nested?\nTo get sublime to fold...  uuu\n:)\n. That is pretty awesome!!\n. ",
    "accrisoft-zmart": "rem\n. Thanks! My apologies for logging this as an issue when it was PEBKAC.\n. ",
    "israelcurtis": "I would really prefer this to only highlighting the brackets themselves. It can get rather hard to visualize what they encompass over large blocks of code.\nIn a perfect world, it would co-exist with other highlighting. Maybe a priority system, where the bracket matching highlighting (in subtle shades) is active when the cursor is within, but any cursor-selections override those character positions (in stronger shades).\n. ",
    "xeno-by": "Could you please post a screenshot here?\n. Looks great, thanks! Time to switch, I suppose. Are there any significant problems with the alpha branch that make it unusable from the everyday standpoint?\n. ",
    "AGS-Knight": "Thanks for the reply and redirect.  A simple LaTeX code where highlighting currently fails:\n```\n\\documentclass[12pt,reqno]{amsart}\n\\usepackage{amsfonts}\n\\usepackage{amsmath}\n\\begin{document}\nWhile bracket highlighting works great {here}, (here), and {here}, it fails\n\\newline\n\\begin{align}\n    &\\text{anywhere within here.}\\\n    W^{}{11} &= W{11(A)}^{k_{A}} W_{11(B)}^{k_{B}} \\hdots W_{11(H)}^{k_{H}}\\[1em]\n    W^{}{12} &= W{12(A)}^{k_{A}} W_{12(B)}^{k_{B}} \\hdots W_{12(H)}^{k_{H}}\\[1em]\n    W^{*}{22} &= W{22(A)}^{k_{A}} W_{22(B)}^{k_{B}} \\hdots W_{22(H)}^{k_{H}}\n\\end{align}\n\\newline\n\\end{document}\n``\n. Outstanding!!  I cannot wait to test out BH2!  Thanks for doing this!\n. Ok cool, looks like adding the0-9` works:\nJSON\n\"open\": \"(^\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b\\\\s*[0-9a-zA-Z_]+)|do)\\\\b\",\n. ",
    "Andy-Soper": "This works for  me\n$\\dfrac{\\text{\\hl{x}}}{\\text{\\hl{y}}}$. ",
    "greduan": "Great! I noticed I hadn't restarted Sublime so I did and it works, now I'm searching for the option to use both. :)\n. It would probably make sense to add the code first, so that it's easier to test, and we're gonna use them anyway so.\n. OK, I forgot to update the already used quotes icons so that they show the close and open on the same line. I implemented it now with these new icons.\nRemember to add to the functionality of the package, the fact that it tracks single quotes ( ' ) and double quotes ( \" ) differently so that it shows the correct icon. :)\n. OK, if you need a better icon then don't be afraid to tell me, I'm all ears, wanna get it right now that I got myself in this mess. :P\n. Sorry about the misnaming. Do the icons look more like what you wanted? I did think of doing them like this, but I didn't want them confused with the actual quotes that are like this (I think French do it like this).\nBTW, I will still improve the single quote icon for when the start&end on the same line, I am not satisfied with them.\n. OK, well I'll rename it to offset version and make the version that you want. :)\n. All right, I did those changes. :)\n. BTW, would you like me to do some research on Retina display, and implement that?\n. Sure, I'll get working on that.\nI don't actually have Retina display either. :P\nI meant just scaling it up manually for Retina display, read some articles on best resolution etc.\n. All right I made that change.\nHow's the code side of it doing?\n. Oh OK. :D\nExcellent! All you have to do is accept the pull request then right?\n. Yay! Thanks a bunch. :)\n. I checked it right now, it is beautiful! I feel proud of myself now. :P\n. No problem. :)\nI'll probably come back soon in order to add support for Retina display. :)\n. I see, thanks! I will see what I can do. :)\n. I would appreciate that! :)\nI actually asked a question in StackOverflow cause I'm a noob at REGEX, and I tried but wasn't able to solve it in all this time, let's hope somebody comes up with a solution. :)\nIn any case, I will share the file once it's fixed. ;)\n. BTW, you can follow the question if you're interested: http://stackoverflow.com/questions/13114104/matching-all-three-kinds-of-php-comments-with-regex\nJust so that you can help if you figure it out. ;)\n. OK, will do.\n. I see, is it OK for you if I use Monaco and Menlo for the Retina version? Seeing how it's a Mac-users only version.\nBTW, thanks for the tip on PixelMator. :) Gonna start using that instead of a cracked version of PhotoShop (wish I could pay for it, but $1000 for one license is a little [which means a lot] out of my budget). lol\n. OK, will do. :)\nI can see why making the icons was difficult for you, it doesn't have guides, Pixelmator, as far as I know at least.\n. @facelessuser I'm back!\nSorry for abandoning this. I stopped using Sublime Text and switched to Vim for a while, so I completely forgot about this.\nCurrently I have no longer any access to a Mac so I can't really test it. I didn't have retina to start off with anyway. :stuck_out_tongue: \nIn any case, if you want me to I can look into this again. :wink:\nFYI, I'm using Arch Linux now. :)\n. @facelessuser I can pick it up again if you could confirm that Sublime Text now supports it. Because even though people want it, doesn't matter if Sublime Text doesn't even support it, know what I mean?\n. @facelessuser OK. Take your time. :)\n. @facelessuser OK. So I just create the retina version and get rid of the normal version?\n. All right. Once I find time I'll do this. It's probable I'll actually redesign most of these images, with a better font, or whatever, just make them look nicer. :wink:\n. I see. I thought it would be nice since a less than sign might not be as obvious (or nice) as PHP specific symbol making it obvious.\nWhen I find time I could make these for you. Just tell me in which folders they should be. :wink: \n. OK. I've no problem with that. :)\n. ",
    "unphased": "Are there any plans for continuing work on the retina icons for the gutter icons in ST3? \n. GitGutter has retina icons. They are supported. You might want to take a look at it to see how to make them. Good luck!\n. ",
    "eproxus": "Broken branch, see #49 instead.\n. I tried to highlight ... fun(_, _) -> ok end ... where only the fun and the end part would be highlighted. It should match fun followed by optional whitespace and then an opening parenthesis. There are also expressions in erlang which looks like fun myfunction/2 but there fun shouldn't be highlighted since there is no following end keyword (this is currently found as a unmatched open by BracketHighlighter).\n. Sorry for the late reply, your fix solves the issue! Should I edit my commits and push again or do you want to merge manually?\n. :+1: Thanks!\n. ",
    "artlawry": "I figured there was a restriction with using fonts.  I'm happy to make my own icons, but thought font integration would make it easier for others.\nI must still be using the BH1 branch (installed about a week ago using Package Install).  I'll try out BH2!\n. Closing as this can't really be a feature request until text in the gutter is supported by ST2 proper.\n. ",
    "elzii": "Got it - thanks for the help!\nOn Nov 19, 2012 6:26 AM, \"Isaac Muse\" notifications@github.com wrote:\n\ncshtml is not a standard html file. BracketHighlighter cannot be expected\nto know every obscure language out there without input from the user. Tag\nsearching and angle bracket searching can cause issues sometimes matching\nbrackets in non-html languages that don't scope < and > as keywordoperators and have them outside of\nstring scopes, so I use a whitelist to only search them in languages that\nuse HTML.\n```\n// exclude or include bracket by language type (example: C++ for C++.tmLanguage)\n// Note: this is particularly useful with Angle. Some languages do not attribute any special scope to angle brackets making it hard\n// to tell when the bracket is beign used in a valid scenario.  C++ is a perfect example.  It is better to disable completely than\n// to ignore angle.  Ignoring will not show angle matches, but will also interfere with other bracket matches.\n\"angle_language_list\" : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\"],\n\"tag_language_list\"   : [\"HTML\",\"HTML 5\",\"XML\",\"PHP\"],\n\"quote_language_list\" : [\"Plain text\"],\n\"curly_language_list\" : [\"Plain text\"],\n\"round_language_list\" : [\"Plain text\"],\n\"square_language_list\": [\"Plain text\"],\n//filter type (whitelist|blacklist)\n\"angle_language_filter\" : \"whitelist\",\n\"tag_language_filter\"   : \"whitelist\",\n\"quote_language_filter\" : \"blacklist\",\n\"curly_language_filter\" : \"blacklist\",\n\"round_language_filter\" : \"blacklist\",\n\"square_language_filter\": \"blacklist\",\n```\nWhatever language you are using to highlight cshtml, should be added to\nthe whitelist for angle and tag (name of the tmLanguage file; don't include\nthe extension).\nI have never enabled tags in cshtml language files, so it may work\nperfect...it may not. I don't know how different the syntax for cshtml is.\nLet me know if this helps.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/52#issuecomment-10515129.\n. \n",
    "ramigg": "Thanks, I'll give it a try\n\u05d1\u05ea\u05d0\u05e8\u05d9\u05da 27 \u05d1\u05e0\u05d5\u05d1 2012 19:39, \u05de\u05d0\u05ea \"Isaac Muse\" notifications@github.com:\n\nYes and no. The main branch does not and cannot highlight ruby code\nblocks, but the BETA BH2 branch can and does\nhttps://github.com/facelessuser/BracketHighlighter/tree/BH2. It was a\ncomplete re-write of the plugin to allow for such things as custom\nbrackets, and to expose, as much as possible, the inner workings to allow\nusers of the plugin to define custom brackets so I don't personally have to\nadd support for every language out there that I may or may not use.\nIt is pretty close to being done. Documentation was never really good on\nBracketHighlighter...pretty much non-existent. I am currently working on\nactual documentation for the BH2 branch. The BH2 branch is meant to replace\nthe current Master branch as soon I am finished and have determined it to\nbe as bug free as possible.\nBH2 branch should be very stable; I use it full time now without issues\nand I currently have no known bugs on my plate with it, nor do I have any\nother features currently planned for it. Feel free to give it a try and let\nme know if it works for you.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/54#issuecomment-10768085.\n. \n",
    "fibers": "Good news.  Thanks for your effort~~\n. ",
    "simbeto": "Yes i too noticed that when not using this plugin. Its the sublime's native style to highlight the MATCHED keywords of the search. on matching tags too it does the same.\nBut it do not border the text highlights! and we can select multiple highlights by holding down the 'ctrl' key.\nSo any way this functionality can be used for our purpose of matching tags?\n. ",
    "dromanov": "If I am corrent, outline color is taken from some scope which has color defined in theme of yours. \nSo here comes the questions :-) :\n- what scope do you use? I mean what should I tweak in my theme file to select the default outline color? \n- is there any way to add your own scope or, even better, scopes, and set them as well?\n. ",
    "andyscott12": "hi totally awesome\nwould be able to give me a quick tip on how to add that ? i've installed that branch just a bit unsure of the structure that you are using to create\n```\nregion adsf\nendregion\n```\nfor example ?\n. Hey thanks heaps!\nSo I've got that all working and now i'm wondering whether you can actually fold down these sections so that you don't have to see them other than the title assigned ? So it would look essentially like \nsomething\nor\n@group something\nAt the moment when I use your above code as an example - it highlights the start and ending points but doesn't give me any ability to actually fold it and hide ?\nAny tips on that ? Sorry to be such a pain - but this is such an unreal plugin. Amazing frankly and thanks so much for putting it together.\n. awesome thanks heaps - placed that into my user_keybindings and works like a treat! \nyou're a legend!\n. ",
    "weslly": "Tried that but still no luck :(\nHere's my bh_core.sublime-settings file (the one at my User directory):\nhttps://gist.github.com/weslly/4714155\nFWIW, I'm trying to make it work with the Jinja2 package.\n. It worked when I restarted ST3, thanks!\n. Btw, I've also noticed that the gutter icons colors aren't working on any syntax, i'm on OSX.\n. The gutter icons are showing but they're monochromatic.\n. Got it working now, thanks!\n. ",
    "princemaple": "Does it mean the functionality part of BH2 has finished?\n. OK, Thanks. Keep up the good work!\n. https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3#configuring-highlight-style\n. I wonder too. Let's wait for the author to share his thoughts :)\nI love the colors in the previous version.\n. I don't get what you mean, in your first paragraph. There isn't any self closing tag.\nIf I move the caret to the opening tag with id=\"nums\", it matches correctly.\nJust when caret is in the closing tag, it doesn't manage to find the correct opening tag.\n. Oh I see. It was a div, then I used emmet to change it to an input tag, where I forgot to delete the extra closing tag. Sorry for that! Thanks! It's all working fine now. I'm not sure if you want to keep it open, feel free to close it.\n. @meihangbo \u4e3a\u4ec0\u4e48\u5728\u8fd9\u91cc\u7528\u4e2d\u6587?\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\?)\",\n            \"close\": \"(?<!\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\n\u8fd9\u91cc\u9762\u6ca1\u6709jsp, \u5728user\u8bbe\u7f6e\u91cc\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e0b\u52a0\u4e0ajsp\u5c31\u53ef\u4ee5\u4e86.\n@facelessuser Guess you can't read Chinese, so I answered it. Great plugin BTW.\n. @facelessuser\nThe issue is, he is working on jsp files, BH doesn't work for him. My suggestion is to redefine that entry in user setting, adding jsp into the language list. It should do the job, shouldn't it?\n. No problem!\n. \u590d\u5236\u7c98\u8d34\u5230preferances/package settings/bracket highlighter/bracket setting - user\u91cc\n{\n    \"brackets\": [\n        {\n            \"name\": \"html\",\n            \"open\": \"(<)(?=[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?>|\\\\/[\\\\w\\\\:\\\\-]+[^>]*>)\",\n            \"close\": \"(?<=<)(?:[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?|\\\\/[\\\\w\\\\:\\\\-]+[^>]*)(>)\",\n            \"style\": \"tag\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"JSP\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"find_in_sub_search\": \"only\",\n            \"enabled\": false\n        },\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"JSP\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        }\n    ]\n}\n@facelessuser pasting this into the user setting won't overwrite the whole brackets, right?\n. He just ated the wrong name....\nTransferring thank to @facelessuser ...dah, dahh dahh, dah. Transfer finished. :+1: \n. @facelessuser Glad I could help :)\n. I think you can close this one. I code in Ruby everyday and have not seen problems with BH.\n. \"match_brackets\": true,\noverwrite it with false\n. Love this new feature. Thanks!\n. ",
    "deiga": "Is there a way to install a certain branch with Package Installer?\n. ",
    "sethgrid": "Nice. Did not notice that. Thanks! Changed the styles to underline and all is great. Great plugin.\n. ",
    "SunBob": "Hi Isaac,\nyes you are right! In Latex the Dollar sign stands for a mathematically equation.\nProbably had a blockhead. \nThanks for your fast reply. Wish you a nice Week.\nSunBob\n. ",
    "bradysalz": "Hi there,\nSame issue here. With BracketHighlighter on, I get matching in regular \"prose\" LaTeX, but no math mode ${stuff}$ matching. Regardless if it's on or off, I do get a change in the coloring of everything in math mode. I'm not quite what you meant before of  \"incorrectly scoping stuff\", but all I know right so far is that this plug-in worked fantastically a few weeks ago but now isn't quite working. \nThanks!\n. ",
    "dvdplm": "For the time being, are there any instructions somewhere on how to install the st3 branch?\n. ",
    "ptim": "@dvdplm I was having the same issue - cloning the git repo switching to BH2ST3 worked for me; try:\n- remove BH using Package Control\n- cd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\n- git clone -b BH2ST3 git@github.com:facelessuser/BracketHighlighter.git\n- restart Sublime\n. ",
    "RobGraham": "Just opened up sublime today to see that none of my original green highlighting is working. I see you recently published some changes which I likely took on via package control... How do i get my green highlighting back? Right now everything is white underlines. \n. They've always been green. I installed the same plugin on 3 other computers i work with. The only thing i had to configure was the bracket range threshold. After loading up sublime and taking a peek at the settings, they're completely different. No colors are present. \n. That did it! Thanks so much\n. Thats why i uninstalled ST3. None of my plugins worked. Just gotta be patient i guess\n. Ok, here's an example of my working and non-working scenario.\nWorking:\n\nNow if i take the second div, copy it and paste it a bunch of times to make the distance between the fieldset tags further apart, i get this:\n\n. I never intended to insult your work faceless. If anything sublime's syntax highlighting is the most pathetic piece of the entire program. I've just had a lot of frustration with the newer version of bracket-highlighter and my work  difficulties I've had between it and the plugin haven't helped. \nAlso, I've already used 10,000 threshold and I still hit a wall occasionally. Your old version gave me the option to completely disable the threshold. I was using it in that configuration across multiple computers/platforms and never had any performance issues other than a slight lag depending on the distance of the related tag/bracket. Can I not do this in BH2? \nThank you.\n. Sorry again. You've put a lot of work into this clearly! And I think people take it for granted.\nIf it's not too much trouble and rather easy thing to do, that would be great. However, i'm not aware of this jump to shortcut you speak of. Is this native to ST2?\n. You're a rock star! \n. ",
    "eblanshey": "Thanks, I had the same problem. Wouldn't it be better to set the default to entity.name.class? That way it's a lot more usable from the start for most people; I was confused for a couple of days. Who knows how many people lost their green highlighting and don't know how to get it back?\n. Yeah, I find it very odd. It may be an issue with the linux version of ST2 that's messing up somewhere due to this plugin. I don't recall exact details, but when I used Windows, ST2 never used up that much RAM with BH, even with more plugins that I have now.\nI'm not running short on RAM, so I'll let it pass for now.\n. ",
    "halian-vilela": "Yeah, I was confused until now. I guess it should be nice to add this note in the settings files saying that \"if you want the old functionality, just switch this propertie back to \"entity.name.class\".\nI have some issues with sublime text in my notebook, the desktop works fine but some things do not work on my laptop, so I was rather confused about highlights not working anymore.\n. ",
    "Narretz": "So how exactly do I get all the color definitions back that I wrote into my theme file, e.g. \n<dict>\n            <key>name</key>\n            <string>Bracket.curly</string>\n            <key>scope</key>\n            <string>bracket.curly</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#D2691E</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#F9F9F9</string>\n            </dict>\n        </dict>\nThis doesn't work:\n{\n    \"bracket_styles\" : {\n        // User defined region styles\n        \"curly\": {\n            \"color\": \"bracket.curly\"\n            // \"style\": \"underline\"\n        }\n    }\n}\nI find the new readme quite confusing (but ST2's theme / color system is confusing to begin with)\nWhat do I have to add to the config, and do I have to change something in the color definition, too?\n. Yay, it works! the problem was \"default\" \"style\" : \"underline\".\n. There seems to be a problem here ... I tried to install with Package Control, and even though it said \"Installed successfully\" it's not listed in installed packages or disabled packages.\n. Thanks, I think it had to do with completely removing BH2 before installing. I removed the git repo install, and PC installed the correct branch automagically on startup. Before it didn't even install the package, so there were no errors in the console at all.\n. Here's a gist with the changes that work for me for both Vue and plain html:\nhttps://gist.github.com/Narretz/d496b92f850306d7c2eeb325bb9aa188\nIt's a bit disappointing that this was never merged. Here's a gist with the changes that work for me for both Vue and plain html: \nhttps://gist.github.com/Narretz/d496b92f850306d7c2eeb325bb9aa188. ",
    "micck": "Should any other form of style, beside \"underline\" work in BH2?  Because if yes, they don't.  If I choose \"style\": \"thin_underline\" in ST2 (with BH2) the brackets get outlined and filled.  If I use  the same style in ST3 with BH2ST3, everything works as expected.\n. And, btw, regarding the color scheme styling.  When I added the brackethighlight.<name> tags to my color scheme, I needed to restart ST3 (with BH2ST3) in order that BH2 would use the color--till the restart BH used plain white.  That happend to me both on Mac OS X as well as on my Windows 7 system.\n. Thank you for clearing out the styles missing in ST2.  Didn't knew that.  As I'm currently \"reverting\" ST3, I'll look into the coloring issue again.\n. ",
    "aaronmw": "I can't get keyboard shortcuts to work... I've copied and pasted from the examples into the User keymap for Sublime, but pressing the shortcuts does nothing.\nI turned on debug mode and tried running \"wrap selection with brackets\" from the command window:\nTraceback (most recent call last):\n  File \"bh_wrapping in /Users/aaronwright/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 275, in wrap_style\n  File \"bh_wrapping in /Users/aaronwright/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 234, in wrap_brackets\nTypeError: begin_edit() missing 2 required positional arguments: 'edit_token' and 'cmd'\nI can't really get this plugin to do anything at all in ST3. What have I missed? :|\n. I installed with Package Control. I'm guessing that's my problem... Heh. I'll try cloning it into my Packages directory and see how that goes, I guess? Is that how I'd do it? I've only ever used Package Control to install plugins :| Except for using Git to install Package Control for ST3. Heh.\n. @facelessuser Well that worked a treat :smile: Thanks! I'll have to manually check the repos of all my plugins to make sure they don't have ST3 branches I should be using... Fortunately, I only use a handful.\nThanks again!\n. I've done a manual installation, and now my package control is busted with the following console error if I attempt to run \"Package Control: Install Package\":\n\nException in thread Thread-14:\nTraceback (most recent call last):\n  File \"X/threading.py\", line 639, in _bootstrap_inner\n  File \"/Users/aaronwright/Dropbox/Config Files/Sublime Text 3/Packages/Package Control/package_control/commands/install_package_command.py\", line 43, in run\n    'reinstall', 'pull', 'none'])\n  File \"/Users/aaronwright/Dropbox/Config Files/Sublime Text 3/Packages/Package Control/package_control/package_installer.py\", line 54, in make_package_list\n    packages = self.manager.list_available_packages()\n  File \"/Users/aaronwright/Dropbox/Config Files/Sublime Text 3/Packages/Package Control/package_control/package_manager.py\", line 252, in list_available_packages\n    provider = downloader.get_provider(repo)\n  File \"/Users/aaronwright/Dropbox/Config Files/Sublime Text 3/Packages/Package Control/package_control/downloaders/background_downloader.py\", line 52, in get_provider\n    return self.used_providers[url]\nKeyError: 'https://github.com/facelessuser/BracketHighlighter.git'\n. It does work. I just went into the Packages folder and did a git pull on Package Control. Seems there were some changes. It was working one minute, broken the next, so not sure what happened exactly... But after the pull and a restart of ST3, it's brining up the package list again and all seems well.\n\nSorry for pointing the finger!\n. ",
    "YvesChan": "Same here..... I have spent almost a whole day trying to figure it out, but I failed.... \nI just wonder why this great plugin in ST2 doesn't work in a sudden. Before I come here, I almost doubt whether my PC has something wrong. I read the README file carefully, but it seems that configuration file doesn't work in tag\nAny help please?\n. Yeah~ First I change the tags.py and it doesn't work. Then I see your change in bh-plugin.py, so I replace my old file.\nNow it works fine!\nThanks a lot :+1: \n. ",
    "xipx": "Yes! Works great now! Thanks a lot!!\n. ",
    "deepfriedmind": "Thanks for the description. From the Command Palette; Jump to Right Bracket and Select Bracket Content work fine when a match can't be made with the default threshold, but what is Match Brackets (ignore threshold) supposed to do then?\n. I have only tried that feature from the Command Palette and it doesn't seem to do anything.\n. It works perfectly now. Thank you for an excellent package and excellent support!\n. ",
    "sandroqz": "@facelessuser I'm having this issue with HTML (Rails) tagmatcher. Everything is fine. But  is not working.\n. @facelessuser You're right. This worked for me and I've not more questions. Thank you. :+1: \n. ",
    "jsvensson": "Oh, and there are a bunch of other valid non-alphabetic method names too:\n- + - / * **\n- [] []=\n- == < <= << (ditto with >)\nI probably missed some.\n. :+1: \n. ",
    "fabianfetik": "This would be easy achievable by using unicode properties [\\P{Ll}\\P{Lu}] which would match any unicode character like so:\n(^\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\P{Ll}\\\\P{Lu}]+)|\\\\bdo)\\\\b\nThe problem is that, from my understanding, python doesn't yet support unicode properties, just unicode code points.\nReasons why you would have to match every single legal unicode character, in my opinion, is because of possible (although admittedly ill-advised) behaviour in ruby where you can have any character in a method or variable name. (see http://www.rubyinside.com/the-split-is-not-enough-whitespace-shenigans-for-rubyists-5980.html for a representation of that)\nI think the easiest achievable way to handle this issue, if python doesn't have a similar way to handle it, would be to literally specify all the most common characters like @jsvensson mentioned, although that has drawbacks as to the possibility of missing some cases\njust found this which would add that support https://pypi.python.org/pypi/regex\n. @facelessuser \nI wholeheartedly agree with your assessment.\nAdding a whole new library that causes more trouble than it really solves at this point is over the top. Guess I should have added a caveat, because I felt this way about it too ;)\nI think the script you found is actually a nice tradeoff between what you want and what you can have.\nThe other thing I have in the back of my mind though is, if it's going to be matching absolutely any- and everything anyways at this point, maybe my original idea was over the top already and a simple .*? with some boundaries would do as well.\nIf you're not in a rush I would play around with it a little this weekend and see\n. I understand, that makes a lot of sense :+1: \n. Essentially to account for this you would have to remove the anchoring to be able to match when \"if\"'s occur mid-code for if/unless/until/while and then decide whether to look for an end or not.\nBecause if/unless/until/while don't necessarily need any terminating characters and can be chained to anything, not just return statements\nConsider the following valid (although convoluted) statements:\nex. ways to write a conditional assignment\n```\nx = 1 if y == 3\nif y == 3\n  x = 1\nend\nif y == 3; x = 1; end;\nx = if y == 3\n        1\n     end\n```\nwhile/until can be appended just like if/unless\n```\nx+=1 while x<30\nx+=1 until x == 30\n```\nHow do you determine in which case to look for an 'end'?\nYou will probably always have edge cases. I code mainly in ruby and I personally really like brackethighlighter, despite it sometimes failing, it really helps to get a quick overview in most other cases imo\nBtw it'll properly resolve it if you re-arrange the format from\nstrings = if searches[nm].to_s.strip.empty? # <==== Move the cursor here!\n                nil\n              elsif options[:tokenize]\n                searches[nm].strip.split(/ +/)[0..8]\n              else\n                [searches[nm].strip]\n              end\nto the following, where the if is on a new line\nstrings =\n  if searches[nm].to_s.strip.empty? # <==== Move the cursor here!\n    nil\n  elsif options[:tokenize]\n    searches[nm].strip.split(/ +/)[0..8]\n  else\n    [searches[nm].strip]\n  end\n. ",
    "maliayas": "Ok, thanks very much.\n. Ok, sure. It's not urgent. On the other hand, IMHO, instead of implementing this by config overriding, you could make this behaviour default for tags. Probably most of the people want to get a tag highlighted when the cursor is anywhere in <tagname att=\"val\">. Because, putting the curser right after < is a little bit against accessibility. For other bracket types, that's totally okay.\n. Ok, thank you. And for all your other plugins.\n. OK. Thanks anyway.\n. For python noobs like me, it's worth to note these steps:\n1. Download/clone https://github.com/facelessuser/sublime-backrefs to somewhere\n2. Move st3/backrefs to Packages/backrefs or make a sym link such that Packages/backrefs/bre.py, Packages/backrefs/bregex.py, etc. exists.\n. Probably very little. In my case, I use git for all the packages, so that I can control updates perfectly and make modifications to the package otherwise not possible. ST allow to override some stuff but apparently it's not as powerful as a git repo.\n. ",
    "chinghanho": "@facelessuser Here is the example code: https://gist.github.com/anonymous/5465045. Thank you for your help. :smiley: \n. I tried it in the same example code, It still can't match. This is the debug message:\nBracketHighlighter: Search patterns:\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\])|(<)(?!\\?)|(?<!\\?)(>)|(?:<%\\s*\\b|^\\s*\\b)((?:(?:if|case|until|unless|while|begin|class|module|\\bdo)\\b|def\\b[\\p{Ll}\\p{Lu}]*))|\\b(end)\\b|(^\\s*\\b(?:(?:if|case|until|unless|while|begin|class|module|\\bdo)\\b|def\\b[\\p{Ll}\\p{Lu}]*))|\\b(end)\\b)\n(?:(\\{)|(\\})|(\\()|(\\))|(\\[)|(\\])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S])|([^\\s\\S]))\n. Awesome! if...end works now, but do...end invalid, it should be working before.\n\nHere is another example code: https://gist.github.com/anonymous/932f9a82ad77ffa17d0c\n. It works perfect now. :thumbsup: \n\nThank you very much!\n. Good work! :thumbsup: \n. ",
    "coptang": "Superb work, TY! \nI get the original problem when I enable the PHP bracket matching though (curly brackets don't work if they have inline HTML in them). \nAlso, I can't get the goto-matching-bracket keyboard shortcuts to work at all for PHP brackets. Is this a bug or is it just because we have brackets inside brackets?\n. No worries, it's doing a fine job, just wanted to ensure that you knew what was / wasn't working. Definitely no need to add any more complexity just to match curly brackets with PHP angle bracket matching enabled.\nWith regard to the note about goto-matching-bracket not working for PHP brackets: It's the same issue as above but reversed. PHP brackets won't match if they are wrapped in a PHP if statement. I've just re-tested and it does work fine without the \"if\". My apologies. Thanks very much for your near instant support :)\n. ",
    "jum4": "It seems to be specific to windows. Unicodedata.pyd from Sublime Text installation folder is not correctly loaded. You can fix it by adding this line in your sublime_plugin.py :\nsys.path.append(os.path.dirname(sys.executable))\nMaybe this line could be include in BracketHighlighter code ?\n. ",
    "gl3n": "OK, waiting for your update.\nThanks\n. ",
    "derekleverenz": "sound great, thanks!\n. ",
    "NoICE": "Hello! I'm searching for tips how to do it too. It means that you have different color per bracket/parentheses.\nIt really helps for lisp-like languages (clojure, etc.) and maybe JSON, etc.\nhttps://github.com/kien/rainbow_parentheses.vim\nHere it is in action: http://writequit.org/blog/?p=386\nBut I don't know if it can be even done in sublime...?\n. ",
    "simonzack": "I'm interested in having this as well, +1.\n. I'm not sure whether this is the same problem, but the first dict tag in this xml (a file from the default sublime text packages) shows no matching tag: http://pastebin.com/cxA1kqPf\nIf I remove the element <key>endCaptures</key> however, it does.\nThere's no php in the xml.\n. Thanks for the suggestion. Yes I did, but that turns off the unmatched bracket feature globally, I would like it to only be turned off when editing plain text files.\n. ",
    "RomeshA": "I would love this feature too\n. Works great for me with normal brackets, thanks for the update! :) I appreciate it\n. ",
    "meihangbo": "Thank you for your answer!\nI'm sorry, my English is poor, so the use of Chinese,\nBut I did not set the User is successful, I do not know how to go to add the JSP set.\n. @facelessuser   @princemaple \nThank you for your answer!\nI'm sorry, my English is poor, so the use of Chinese,\nBut I did not set the User is successful, I do not know how to go to add the JSP set.\n. @princemaple \n\u975e\u5e38\u611f\u8c22\u60a8\u89e3\u51b3\u4e86\u6211\u7684\u95ee\u9898,\u8c22\u8c22!\nThank you very much to solve my problem, thank you!\n@princemaple  Thank you for creating this great plugin!\n. ",
    "jackwong2000": "\u8c01\u5e2e\u6211\u89e3\u51b3\u4e00\u4e0bhtml(asp)\u540c\u6837\u7684\u95ee\u9898\uff0c\u6211\u628ahtml(asp)\u653e\u5230language_list\u91cc\u4e0d\u884c\u3002\n. The same problem for HTML(ASP). It doesn't work even if I put \"HTML(ASP)\" in \u201clanguage_list\u201d.\n. ",
    "followgiant": "@princemaple \nIt didn't work for my ST3 build 3065 in JSP, please help\nWhen I copy you config to preferances/package settings/bracket highlighter/bracket setting - user, this plugin didn't work in all the other syntax\n. ",
    "yangsaipp": "@followgiant i hit the same problem with you\uff0care you sovle ? \n. anyone can help me ? @facelessuser \n. Think you for reply,  more information is as follows:\n-  I use Sublime Text 3(version:Build 3083) Package Contorl to install BH.\n-  BH version is 2.9.1\nBH work well in file on default config  except JSP file, The JSP page performance is as follows:\n- Html tag can not Bracket Highlight when normal use.  you can refer to images at #95 \n- \"{ }\"  symbol  work well\n. I try to modify the configuration files as #95 said.\nI use ST3 to edit preferances/package settings/bracket highlighter/bracket setting - user.\nAdd the following content:\njavascript\n    {\n    \"brackets\": [\n        {\n            \"name\": \"html\",\n            \"open\": \"(<)(?=[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?>|\\\\/[\\\\w\\\\:\\\\-]+[^>]*>)\",\n            \"close\": \"(?<=<)(?:[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?|\\\\/[\\\\w\\\\:\\\\-]+[^>]*)(>)\",\n            \"style\": \"tag\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"JSP\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"find_in_sub_search\": \"only\",\n            \"enabled\": false\n        },\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"JSP\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        }\n    ]\n}\nhowever, it did not work\n. so i reset my config file which i modify.\nthen i copy  preferances/package settings/bracket highlighter/bracket setting - Dafeult file content to  preferances/package settings/bracket highlighter/bracket setting - user,  and just modify  the angle rule that add Java Server Page to langue_list value. like this:\njavascript\n{\n            \"name\": \"angle\",\n            \"open\": \"(<)(?=[^?%]|$)\",\n            \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\n                \"string\",\n                \"comment\",\n                \"keyword.operator\",\n                \"source.ruby.rails.embedded.html\",\n                \"source.ruby.embedded.html\"\n            ],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\n                \"HTML\",\n                \"HTML 5\",\n                \"XML\",\n                \"PHP\",\n                \"HTML (Rails)\",\n                \"HTML (Jinja Templates)\",\n                \"HTML (Twig)\",\n                \"HTML+CFML\",\n                \"ColdFusion\",\n                \"ColdFusionCFC\",\n                \"laravel-blade\",\n                \"Handlebars\",\n                \"AngularJS\",\n                \"Java Server Page\"\n            ],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\nit also did not work\n. You can use this simple error.jsp for testing:\n. html\n<html>\n<head>\n    <!-- Meta Tags -->\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>error page</title>\n</head>\n<body>\n<p>This is error page</p>\n</body>\n</html>\n<div class=\"wrapper\">\n    <div class=\"header\"></div>\n</div>\n. Thanks for your careful reply.\nSB3 console no error message.\n. Thinks, the JSP package what you said mean ?  \nThe JSP is mixed by javascript and html.\nif you want to get a jsp pape to test, you can do this:\nCreate a call error.jsp file on SB3, and copy this text\nJSP\n<html>\n<head>\n    <!-- Meta Tags -->\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>error page</title>\n</head>\n<body>\n<p>This is error page</p>\n</body>\n</html>\n<div class=\"wrapper\">\n    <div class=\"header\"></div>\n</div>\n. Thank you for help me!\n i think ST3 3095 is ok , so can you test error.jsp? do BH work well?\n. Thank you very much, really.  haha, now BH work well. \nps:  Packages\\User\\bh_tag.sublime-settings  you must create by youself not ST3.\nthe Document is very good. if have some example will be best. \nBTW: I want to know How to find  the default packages that you said. Thanks a lot.\n. ",
    "chrishough": "that worked for me @facelessuser thank you for posting\n. ",
    "vemec": "Retina Icons Pull Request (https://github.com/facelessuser/BracketHighlighter/pull/114)\n. Thanks for the tip! I will bear in mind that about decreasing the font size and generating the corresponding changes so that it can be seen properly\n. Ok, I will be waiting for your feedback to fix any issue that you find.\nAt this moment i\u2019m making some improvements and tests to get better icons, i\u2019m having this issue \nwith this characters () \u201c\u201c, Do you have any idea what is generating this?\n. @facelessuser, it is very strange, I am exporting all the icons at once with default RGB profile (sRGB), then I use imageoptim to optimize the icons, I think that for some reason, when using http://imageoptim.com/, the issue comes up, but not with all the images... weird. I am going to commit a new version with:\n- Correct Position for small fonts.\n- Best position and definition for the normal version.\n. You can check them now :)\n. Happy to help, in case you want to make changes or improvements I am available to do so. :)\n. ",
    "riyogarta": "Yes of course, I install from BH2ST3 and I've already restart ST3, but the package don't work :(\n. I install from https://github.com/facelessuser/BracketHighlighter/tree/BH2ST3\nand I use ST3 build 3033 on Ubuntu 13.04\nHere message I get from the console:\nImportError: No module named 'BracketHighlighter'\nreloading plugin BracketHighlighter-BH2ST3.bh_wrapping\nreloading plugin BracketHighlighter-BH2ST3.ure\nis there anything wrong with me?\n. It works! Thanks a lot :)\n. ",
    "amsz": "Yes, I didn't checkout BH2ST3 branch, it work now, thanks a lot.\n. ",
    "kragol": "Mmm ok. I'm a github noob so I don't know how that stuff works. Time to try it then I guess.\n. Good point. Apparently, the only other definition of string.other.math in the default sublime packages is for shell scripts in Shell-Unix-Generic.tmLanguage. I am not sure if bracket highlighting would be meaningful there.\nFrom my experiments and reading your code, it looks like your scope_exclude_exceptions works as an OR list.\nSo if I use string.other.math, source.latex (or actually string.other.math, text.tex.latex because text.tex.latex is the global scope for LaTeX files), then it does work but not only in math environments (for instance in comments).\nI don't know any simple way of specifying an exception that requires both string.other.math and text.tex.latex in your settings file definition.\nFrom my point of view, it looks like there are three possibilities.\n1. Define specific brackets for LaTeX files and blacklist LaTeX from the standard definitions. That is actually what I have done for my personal use so that I can ignore escaped brackets such as \"{\" in my LaTeX code. It seems a bit overkill though if that is only for exception handling.\n2. Add all variations of the string.other.math to the exception list. There are 4 of them in the default tmLanguage files:\n   string.other.math.tex\nstring.other.math.block.tex\nstring.other.math.latex\nstring.other.math.block.environment.latex\n3. Improve the exception handling syntax. For instance define the scope_exclude_exceptions as a list of strings (OR rule between the strings), with each string being a comma separated list corresponding to a single exception which requires all substrings to be matched (AND rule within the string). Currently, what you have done is simply join all strings in the list into a comma separated list, so there is no possibility of defining complex AND/OR rules.\n. I did but I thought it was a mistake. Sorry.\nI am not sure how the match_selector API function (which is the one you used for illegal scope detection) is supposed to work in this case, but in my tests it just did nor recognize the exception if I used a space.\nI confirmed it in the console by placing the caret inside a math string. Here is what I got:\n\n\nview.match_selector(view.sel()[0].a,\"string.other.math text.tex.latex\")\nFalse\nview.match_selector(view.sel()[0].a,\"string.other.math, text.tex.latex\")\nTrue\nview.match_selector(view.sel()[0].a,\"text.tex.latex\")\nTrue\nview.match_selector(view.sel()[0].a,\"string.other.math\")\nTrue\n\n. You are right. I just did not think that the order would matter. I updated my code to limit the exception to text.tex which is the general scope for LaTeX and plain TeX documents (and possibly other variations that are not in the default language files).\n. \n",
    "felyx": "Well I noticed two more problems:\n1st:\nthere is a td which has smarty code inside the td tag but BH will match the starting < to the ending > and I mean the td tags starting end ending <> signs, it will not match it to the ending td tag.\n(this is inside a smarty tpl)\n2nd:\nI really do not know why but in the same file for one of the td's it shows like its matched but does not highlight the closind td tag just the starting td while when clicking on the closing td tag it will show it as unmatched. Very starange. The code is valid btw, I checked it in my ide no issues there.\n. I could just show you the tpl file if you can tell me how, I do not want to make it publicly avaible.\nEdit: My bad im gona use pastebin, can I send it to you personally so that I do not have to paste the link here?\n. Alright I sent it to you just now. I am still not convinced that it is a formatting issue but maybe you can tell me what is the problem. Divs at the bottom are also doing some weird stuff, try to match the tags from both directions from start to end and vica versa. Also I do not know if it is intended or not but at the bottom for example BH does not highlight \"\" inside {}. I also checked this tpl in PHPStorm, no issues there with matching.\n. I know that you are not arrogant, I did not mean to make you feel that way, its fine anyhow, if it is my fault at least I will learn something from it :) Thank you for looking into this.\n. Alright. Please let me know when you get to the bottom of this, thank you very much and have a nice weekend. :)\n. Thank you, it was indeed the threshold that was set to too small which caused my \"issue\". Thank you once again for taking the time to help me out!\n. ",
    "CMCDragonkai": "Perhaps you can base it off what the file type is. Since you can set it to be HTML or PHP. Now when it's set to HTML, the only brackets that are recognised should be HTML based tag brackets. Not the PHP/(Insert Language Here)'s brackets.\n. Hmm this problem seems close the regex language parsing problem.\n. Yep. Thanks for your efforts none the less. Language parsing will always be a problematic AI problem. But in the future it may be interesting to look into abstract syntax tree like PHP Parser.\n. Oh, it started working again. Strange. Don't worry.\n. ",
    "tomByrer": "+1  I have no idea to manually install the ST3 version...\n. Cool, ty\n. ",
    "nalply": "+1 I wanted to create an issue about the missing installation instructions.\n. To help others with OS X installations (thanks for the link to issue #96).\nOpen Terminal and type:\ncd; cd \"Library/Application Support/Sublime Text 2/Packages\"\ngit clone https://github.com/facelessuser/BracketHighlighter.git BracketHighlighter\nthen restart Sublime 2. This worked for me.\n. ",
    "Rivanni": "I also would like this option. I have somewhat lmited vision so this is a nice helpfull feature.\n. ",
    "s1eepwalker": "fast patch bh_core.py line 707\nbefore: \n\nself.sub_pattern = ure.compile(\"(?:%s)\" % '|'.join(self.sub_find_regex), ure.MULTILINE | ure.IGNORECASE)\nself.pattern = ure.compile(\"(?:%s)\" % '|'.join(self.find_regex), ure.MULTILINE | ure.IGNORECASE)\nafter:\n\nif language == \"erlang\":\n      self.sub_pattern = ure.compile(\"(?:%s)\" % '|'.join(self.sub_find_regex), ure.MULTILINE)\n      self.pattern = ure.compile(\"(?:%s)\" % '|'.join(self.find_regex), ure.MULTILINE)\nelse:\n      self.sub_pattern = ure.compile(\"(?:%s)\" % '|'.join(self.sub_find_regex), ure.MULTILINE | ure.IGNORECASE)\n      self.pattern = ure.compile(\"(?:%s)\" % '|'.join(self.find_regex), ure.MULTILINE | ure.IGNORECASE)\n\n. A good idea is to insert an option in the settings for the module\n\n \"brackets\": [\n..............................................\n        // Erlang conditional statements\n        {\n            \"name\": \"erlang\",\n            \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n            \"close\": \"\\\\b(end)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n            \"enabled\": true,\n>>>         \"case_sensitive\": true                    \n        }\n    ]\n\n. ",
    "justrjlewis": "@facelessuser sorry about that. I updated the readme for the branch and changed the other one back.  I also added a TOC to the BHST3 readme and updated where some of the anchors weren't working. \nHave a good one!\nRJ \n. I thought about that when you said that the change was only appearing on the master.  Let me give it a go. just a sec.\n. Sorry for my newb-i-ness.  I specifically selected BH2ST3 this time.  Last time I didn't edit the selection and it defaulted master to master.  Oddly when I selected the branches, it still said that it had already merged that and that the repositories were both up to date, so I made some superficial change then opened this pull request.\nHere's hoping it works.  I'd hate to be making work than I am helping. :smile: \n. I checked Package Control and it said there were no updates available, BUT I removed BH and reinstalled - now it seems to work fine.\nSorry to bother!\n. Do you think that the terms i'm using are okay?\n\"GoSublime\", \"GoSublime: HTML\". Yay!  It's working now.  Thanks!. Hi.  Looks like I'm using: Monokai.sublime-color-scheme and I don't have any additional php scopes like twig or anything installed.  \nThe snippet that I posted fails spectacularly for me. \nThanks for taking a look!. Sorry!.  Yes the default php syntax.  In this one the if statement doesn't highlight because of the foreach as far as I can tell\n```\n<?php\n   // get the myhrsc user list, decode it and iterate over it\n    $body  = wp_remote_retrieve_body($response);\n    $data  = json_decode($body);\nif (!empty($data)) {\n\n  function update_ref_id($url,$target,$token,$info_id) {\n\n    $update_args = array('user' => array(\n        'reference_id' => $target\n      )\n    );\n    $update_params  = array(\n      'headers'     => array(\n        'Content-Type'  => 'application/json; charset=utf-8',\n        'Authorization' => 'Bearer ' . $token\n      ),\n      'body'        => json_encode($update_args),\n      'method'      => 'PATCH',\n      'data_format' => 'body'\n    );\n\n    // this function checks the button click and sends the PATCH request to update a user\n      if(isset($_POST['update_user'])) {\n        $new_req  = wp_remote_post($url, $update_params);\n      }\n\n    // Check the response and sign in if okay\n      if ( $new_req['response']['code'] == 200 ) {\n        $uid = $info_id;\n        sso_auth_user($uid);\n      } //ENDIF(SSO)\n\n  }\n  echo '<div>';\n        // print_r($data->data[0]->attributes);\n    foreach ($data->data as $info):\n\n\n      switch (true) {\n        case $info->attributes->reference_id == $target:\n          $info_id = $info->id;\n           echo \"\n              <div>\n                <form action='' method='post'>\n                  <input type='submit' name='mhrsc_user' value='Sign in to My HR Support Center' />\n                </form> \n              </div>\n               <hr>\n               <br>\n            \";\n\n            if(isset($_POST['mhrsc_user'])) {\n              $sso_url = MYHRSC_GF_SSO_TOKEN_URL;\n              $mhrsc_param_url = $sso_url.\"?user_id=264400\";\n              $mhrsc_args = array(\n                'headers'       => array(\n                'Content-Type'  => 'application/json; charset=utf-8',\n                'Authorization' => 'Bearer ' . $access_token \n                ),\n              );\n\n              // $mhrsc_user_params = array(\n              //   'headers'     => array(\n              //     'Content-Type'  => 'application/json; charset=utf-8',\n              //     'Authorization' => 'Bearer ' . $access_token\n              //   ),\n              //   // 'body'        => json_encode($mhrsc_args),\n              //   'method'      => 'POST',\n              //   'data_format' => 'body'\n              // );\n\n              wp_remote_post($mhrsc_param_url, $mhrsc_args);\n            }\n          break;\n\n        case $info->attributes->reference_id !== $target && $info->attributes->email == $wp_user_email:\n            echo \"\n              <strong>\n                <p>\n                  Your information is in the HR Support Center database, but your Member ID is not on file and we need that to log you in.\n                </p>\n              </strong>\n            \";\n\n            $info_id = $info->id;\n            echo \"\n              <form action='' method='post'>\n                <input type='submit' name='update_user' value='Update My User Profile' />\n              </form>\n            \";\n            echo $info_id.\"<br>\";\n\n           $url = $url.\"/\".$info_id;\n           $token = $access_token;\n            echo $token.\"<br>\";\n           update_ref_id($url,$target,$token,$info_id);\n\n          break;\n\n        default:\n          # code...\n          break;\n      }\n\n\n    endforeach;\n\n  echo '</div>';\n} //ENDIF(!empty$data)\n\n```\n.. Sorry!  I get \ud83d\udc4d \nSyntaxError: invalid syntax\nfrom my user settings: \n```\n{\n    //Debug logging\n    \"debug_enable\": false,\n\"show_in_minimap\": true,\n\n// When only either the left or right bracket can be found\n// this defines if the unmatched bracket should be shown.\n\"show_unmatched\" : true,\n\n// High visibilty style and color for high visibility mode\n// (solid|outline|underline|thin_underline|squiggly|stippled)\n\"high_visibility_style\": \"stippled\",\n\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n// Match brackets only when the cursor is touching the inside of the bracket\n\"match_only_adjacent\": false,\n\n// Character threshold to search\n\"search_threshold\": 50000,\n\n// Ignore threshold\n\"ignore_threshold\": false,\n\n// Set mode for string escapes to ignore (regex|string)\n\"bracket_string_escape_mode\": \"string\",\n\n// Set max number of multi-select brackets that will be searched automatically\n\"auto_selection_threshold\" : 10,\n\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n\n\"show_offscreen_bracket_popup\": true,\n\n// Rules that define the finding and matching of brackets\n// that are contained in a common scope.\n// Useful for bracket pairs that are the same but\n// share a common scope.  Brackets are found by\n// Finding the extent of the scope and using regex\n// to look at the beginning and end to identify bracket.\n// Use only if they cannot be targeted with traditional bracket\n// rules.\n\"scope_brackets\": [\n    // Quotes\n    {\n        \"name\": \"py_single_quote\",\n        \"open\": \"u?r?((?:'')?')\",\n        \"close\": \"((?:'')?')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Python\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"py_double_quote\",\n        \"open\": \"u?r?((?:\\\"\\\")?\\\")\",\n        \"close\": \"((?:\\\"\\\")?\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Python\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"single_quote\",\n        \"open\": \"(')\",\n        \"close\": \"(')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"double_quote\",\n        \"open\": \"(\\\")\",\n        \"close\": \"(\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Regex for different Languages\n    {\n        \"name\": \"jsregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[igm]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"JavaScript\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"perlregex\",\n        \"open\": \"(?:m|s|tr)(.|\\n)\",\n        \"close\": \"(.|\\n)(?:[igmos]*)\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string.regexp\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Perl\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"rubyregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[imxo]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Markdown\n    {\n        \"name\": \"mditalic\",\n        \"open\": \"(\\\\*|_)\",\n        \"close\": \"(\\\\*|_)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.italic\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdbold\",\n        \"open\": \"(\\\\*\\\\*|__)\",\n        \"close\": \"(\\\\*\\\\*|__)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.bold\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    }\n],\n\n// Rule definitions for finding and matching brackets.\n// Brackets are found by using regex and can use scope\n// qualifiers exclude certain matches.\n// Once all matches are found, the closest pair surrounding\n// the cursor are selected.\n\"brackets\": [\n    // Basic brackets\n    {\n        \"name\": \"curly\",\n        \"open\": \"(\\\\{)\",\n        \"close\": \"(\\\\})\",\n        \"style\": \"curly\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"round\",\n        \"open\": \"(\\\\()\",\n        \"close\": \"(\\\\))\",\n        \"style\": \"round\",\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"square\",\n        \"open\": \"(\\\\[)\",\n        \"close\": \"(\\\\])\",\n        \"style\": \"square\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    // HTML\n    {\n        \"name\": \"html\",\n        \"open\": \"(<)(?=[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?>|\\\\/[\\\\w\\\\:\\\\-]+[^>]*>)\",\n        \"close\": \"(?<=<)(?:[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?|\\\\/[\\\\w\\\\:\\\\-]+[^>]*)(>)\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"GoSublime-HTML\"],\n        \"plugin_library\": \"bh_modules.tags\",\n        \"find_in_sub_search\": \"only\",\n        \"enabled\": true\n    },\n    // CFML\n    {\n        \"name\": \"cfml\",\n        \"open\": \"(<)(?=[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\\\s*\\\\/?>|\\\\/[\\\\w\\\\:\\\\-]+[^>]*>)\",\n        \"close\": \"(?<=<)(?:[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\\\s*\\\\/?|\\\\/[\\\\w\\\\:\\\\-]+[^>]*)(>)\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n        \"plugin_library\": \"bh_modules.tags\",\n        // \"find_in_sub_search\": \"only\",\n        \"enabled\": false\n    },\n    // PHP Angle\n    {\n        \"name\": \"php_angle\",\n        \"open\": \"(<\\\\?)(?:php)?\",\n        \"close\": \"(\\\\?>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\"],\n        \"enabled\": true\n    },\n    // Angle\n    {\n        \"name\": \"angle\",\n        \"open\": \"(<)(?!\\\\?)\",\n        \"close\": \"(?<!\\\\?)(>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\n    \"string\",\n    \"comment\",\n    \"keyword.operator\",\n    \"source.ruby.rails.embedded.html\",\n    \"source.ruby.embedded.html\",\n    \"storage.type.function.arrow.js\"\n  ],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"GoSublime-HTML\"],\n        \"plugin_library\": \"bh_modules.tags\",\n        \"enabled\": true\n    },\n    // CSSedit groups\n    {\n        \"name\": \"cssedit_groups\",\n        \"open\": \"(/\\\\* *@group .*\\\\*/)\",\n        \"close\": \"(/\\\\* *@end .*\\\\*/)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"CSS\",\"SCSS\",\"SASS\"],\n        \"enabled\": true\n    },\n    // Ruby embedded HTML\n    {\n        \"name\": \"ruby_embedded_html\",\n        \"open\": \"((?:(?<=<%)|(?<=^))\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"text.html\", \"source\", \"comment\", \"string\"],\n        \"scope_exclude_exceptions\": [\"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Rails)\"],\n        \"enabled\": true\n    },\n    // Ruby conditional statements\n    {\n        \"name\": \"ruby\",\n        \"open\": \"(^\\\\s*\\\\b(?:if|case|until|unless|while|begin|class|module|def\\\\b[\\\\p{Ll}\\\\p{Lu}]*)|\\\\bdo)\\\\b\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"Ruby on Rails\"],\n        \"enabled\": true\n    },\n    // C/C++ compile switches\n    {\n        \"name\": \"c_compile_switch\",\n        \"open\": \"(\\\\#(?:if|ifdef|ifndef))\\\\b\",\n        \"close\": \"(\\\\#endif)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"C++\", \"C\", \"Objective-C\"],\n        \"enabled\": true\n    },\n    // PHP conditional keywords\n    {\n        \"name\": \"php_keywords\",\n        \"open\": \"(?:^\\\\s*|<\\\\?(?:php)?\\\\s*)?\\\\b(if|foreach|for|while|switch)\\\\b(?=.*:\\\\s*(?:\\\\?>\\\\s*)?$)\",\n        \"close\": \"(?:^\\\\s*|<\\\\?(?:php)?\\\\s*)?\\\\b(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*;\\\\s*(?:\\\\?>\\\\s*)?$)\",\n        \"style\": \"default\",\n        \"language_filter\": \"whitelist\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.phpkeywords\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"],\n        \"enabled\": true\n    },\n    // Erlang conditional statements\n    {\n        \"name\": \"erlang\",\n        \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n        \"enabled\": true\n    }\n],\n\n// Define region highlight styles\n\"bracket_styles\": {\n    // \"default\" and \"unmatched\" styles are special\n    // styles. If they are not defined here,\n    // they will be generated internally with\n    // internal defaults.\n\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"outline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracekt pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"squiggly\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\",\n        \"color\": \"brackethighlighter.curly\",\n        \"style\": \"outline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\",\n        \"color\": \"brackethighlighter.round\",\n        // \"style\": \"outline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\"\n        // \"color\": \"brackethighlighter.square\",\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\",\n        \"color\": \"brackethighlighter.angle\",\n        \"style\": \"outline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        \"style\": \"outline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"regex\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    }\n},\n\n/* Plugin settings */\n\n// Style to use for matched tags\n\"tag_style\": \"tag\",\n\n// Scopes to exclude from tag searches\n\"tag_scope_exclude\": [\"string\", \"comment\"],\n\n// Determine which style of tag-matching to use in which syntax\n\"tag_mode\": {\n    \"xhtml\": [\"XML\"],\n    \"html\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML (Rails)\", \"HTML (Twig)\", \"GoSublime-HTML\"],\n    \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n}\n\n}\n```. ",
    "ktaragorn": "Is this fixed? This is happening to me on my linux machine but not Mac, on ST2. Same issue, plus the fact that I dont have \"Theme - Default\" package(am i supposed to?)\n. Ah.. hmm guess you are right.. Am having this issue with gitgutter as well.. Odd\n. ",
    "MilllerTime": "I'm on Windows 10 and am also experiencing tiny icons in the gutter, for this and other plugins like gitgutter. I guess it's beyond the control of package authors, which is a shame. Windows 10 has been notoriously awful at getting high-DPI scaling right, though. Looking forward to the day this works as expected, whether at the OS level or Sublime itself.\nI assume there is no update on this?. @r-stein Fantastic!! \ud83c\udf89 This is a great workaround for GitGutter, thanks for the pointer!\nIt'd be nice if something similar could be achieved with BracketHighlighter, but either way this is a nice package as well \ud83d\ude42. Hey @facelessuser, I'm on build 3126, which is the latest stable. I'll give the beta build a shot and see if that improves things. I'm using a 4K monitor as well.\nThe BH icons are nearly the same size as GG, but they are not nearly as large as what is shown in the README. I believe the GG icons are smaller by design, as they are less detailed. With BH, I currently have trouble distinguishing parens from curly brackets (the image below is scaled up 250%).\n\nStill, the other features are awesome! Thanks for all the effort!. > They might be a little smaller as I recall I do not take up the entire height and width of the 32x32 image.\nThat makes sense.\n\nI am not super excited about redoing all the icons\n\nHaha, I don't blame you! Good news, though: I gave the beta build a try and everything is much better! Not only are gutter icons scaled properly, but now other aspects of the native UI aren't blurry at 4K like they are in the stable build. I see in build 3127 they \"Refreshed UI theme, including full high DPI support\". I imagine that will land in stable soon, but regardless it resolves this issue \ud83c\udf89. ",
    "r-stein": "@MilllerTime For GitGutter you can change GitGutter theme to Default HiDPI.gitgutter-theme to use a different image set for the gutter\nhttps://github.com/jisaacks/GitGutter/issues/199#issuecomment-284456805. Thanks for the advice. I made a small specialized plugin:\npy\nclass JumpOutRight(bh_plugin.BracketPluginCommand):\n    def run(self, edit, name):\n        self.refresh_match = True\n        pos = self.right.end\n        self.selection = [sublime.Region(pos, pos)]\nHowever this could also easily added with an additional arg into the selectbracket plugin. I made this changes here and could create a PR.\n. At least for the second part you can easily just disable round parens in LaTeX:\nAdd to the user bracket settings (Preferences >>> Package Settings >>> Bracket Highlighter >>> Bracket Settings - User) the language LaTeX to the blacklist for round brackets\njs\n{\n    \"user_brackets\": [\n        {\n            \"name\": \"round\",\n            \"language_filter\": \"blacklist\",\n            \"language_list\": [\"Plain text\", \"Hex\", \"LaTeX\"],\n        }\n    ]\n}\n. For the second point: yes I agree that should be added. Since this a scope bracket it should only be triggered if the scope matches, I think it is reasonable to include such things even if it is not in the default syntax.\n. To the first point: This is only possible at the begin of inline code blocks? I made a plugin to exclude the backticks in the content scope at the start of the match.\n. ok nice :)\n. This might not be the best way to to it, but you can easily write a listener to toggle the enabled value:\nJust press Tools >>> New Plugin... and paste the following:\n``` py\nimport sublime_plugin\nimport BracketHighlighter\nclass DisableBhOnLatexListener(sublime_plugin.EventListener):\n    def _set_bh_enabled(self, view):\n        if view.score_selector(0, \"text.tex\"):\n            # disable BH\n            BracketHighlighter.bh_core.GLOBAL_ENABLE = False\n        else:\n            # enable BH\n            BracketHighlighter.bh_core.GLOBAL_ENABLE = True\non_load = _set_bh_enabled\non_activated = _set_bh_enabled\n\n```\nThis keeps the bracket highlighting in non-LaTeX files and has a very small overhead. it\n. @facelessuser one would have to change all rules, which are enable in LaTeX?\n. Thanks that looks nice =)\n. Yes thats better\n. Do you have Color Highligher installed? That package creates a copy if your colorscheme, such that changes does not directly have an effect. You can open the console ctrl+`` and writeview.settings().erase(\"color_scheme\")` to update the colorscheme.\nThe highlighting color is limited by the sublime api, which requires a scope to define the highlighting color and you can not simply pass the color itself. It is white because your colorscheme does not define the scope brackethighlighter.default and hence that is highlighted by the default color of your colorscheme, which is usually white.\n. 1. Install PackageResourceViewer\n2. Press ctrl+shift+p and write PackageResourceViewer: Open Resource\n3. Select your colorscheme (it should be under Color Scheme - Default if you use a default scheme)\n4. Add this at a reasonable position and save (You can change the foreground color):\nxml\n        <dict>\n            <key>name</key>\n            <string>Bracket Default</string>\n            <key>scope</key>\n            <string>brackethighlighter.default</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#CC99CC</string>\n            </dict>\n        </dict>\n5.. If you use SublimeLinter or other packages you might need to reselect the colorscheme\n. Have you tried to follow my stepwise manual? It describes how to edit your colorscheme. If you did not change it, then it will be under Color Scheme - Default/Monokai.tmTheme.\n. Your bhcore settings file must be encapsulated by {..}, i.e. add a { a the start and a } at the end.\nIn the colorscheme tmTheme file you need to move it inside the plist attribute. Move it between an closing </dict> and an opening <dict> tag of the same indentation.\n. In http://i.imgur.com/7meU6JS.png you add a line, with the content { above line 1 and a line, with the content } below the last line.\nand change http://i.imgur.com/8wl5Fgk.png to this:\n\n. You are missing a > behind </dict in line 567\n. Bracket Highlighter is disabled by default in Plain Text files.\nAdd this to your bh_core.sublime-settings file in line 2 under the opening {:\njs\n    \"user_brackets\": [\n        {\n            \"name\": \"curly\",\n            \"language_list\": [\"Hex\"],\n        },\n        {\n            \"name\": \"round\",\n            \"language_list\": [\"Hex\", \"RTF\"],\n        },\n        {\n            \"name\": \"square\",\n            \"language_list\": [\"Hex\", \"RTF\"],\n        },\n    ],\n. @MakhouT In contrast to Atom the Sublime Text API is very limited on customizing the GUI. (The API is small and fast, but has nearly everything one needs.). As far I know one could only add icons left of the numbers, where the other bracket symbols are already added.\nIn short: no that is not possible in Sublime Text.\n. @excetara2 An example keybinding would be:\njs\n    {\n        \"keys\": [\"ctrl+k\", \"ctrl+b\"],\n        \"command\": \"bh_offscreen_popup\",\n        \"args\": {\"no_threshold\": false}\n    },\nno_threshold is false by default.. @facelessuser You could replace the first sentence by \"Please read and fill this template by replacing the instructions with their outcomes.\" This would clearify how the template is supposed to filled out.\n. The highlighting of quotation marks is based on the scope, but the markdown syntax has no string scope for quotation marks. So you would have to edit your syntax definition to add the string.quoted scope for quotation marks.\n. This is essentially an issue of the PackageDev syntax definition https://github.com/SublimeText/PackageDev/issues/43. It may be worth to mention, that you can just write your own commands and even ship them with your plugin (as long it has a consistent name).\nE.g. create something based on https://github.com/facelessuser/BracketHighlighter/blob/master/bh_modules/bracketselect.py\nname it yourbracketselect and put it in the folder bh_modules inside your sublimemacspro package. Then add a keybinding\njs\n{\n    \"keys\": [\"{\"],\n    \"command\": \"bh_key\",\n    \"args\":\n    {\n        \"no_outside_adj\": null,\n        \"no_block_mode\": null,\n        \"lines\" : true,\n        \"plugin\":\n        {\n            \"type\": [\"__all__\"],\n            \"command\": \"sublimemacspro.bh_modules.yourbracketselect\",\n            \"args\": {\"select\": \"right\"}\n        }\n    }\n},\nHence you can create the behavior requested in 1. and you have most likely the information available requested at 3.\nFor 2. I am not familiar with rubys backtick, but in general you can add new quote types in the settings. This is either in the user settings or in the default settings. Hence it might be the best to create a PR to add a new quote type.. For 3. You would like a method to request the surrounding brackets from any point/run a search to get the bracket positions?\nI don't think that is currently supported without a lot of overhead (re-implement parts of the core).\nFor 2. it would be something like this:\njs\n    \"user_scope_brackets\": [\n        {\n            \"name\": \"rubybackticks\",\n            \"open\": \"(`)\",\n            \"close\": \"(`)\",\n            \"style\": \"default\",\n            \"scopes\": [\"string.interpolated.ruby\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Ruby\"],\n            \"sub_bracket_search\": \"true\"\n        },\n    ]. You can get the scopes with ScopeHunter and the syntax names by wrinting to the console (ctrl+`) view.settings().get(\"syntax\") and only use the last part before the extension.. If you hover over highlighted bracket and the matching bracket is offscreen, a popup will appear, which shows the text around the matching bracket and has a button to jump to the matching bracket.. Just add this to your keymap:\njs\n    {\n        \"keys\": [\"ctrl+m\"],\n        \"command\": \"bh_async_key\",\n        \"args\": {\n            \"no_outside_adj\": null,\n            \"lines\": true,\n            \"plugin\": {\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\", \"alternate\": true},\n                \"type\": [\"__all__\"]\n            },\n            \"no_block_mode\": null\n        },\n    },. Use this keybinding:\njs\n    {\n        \"keys\": [\"ctrl+shift+space\"],\n        \"command\": \"bh_async_key\",\n        \"args\": {\n            \"plugin\": {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\"\n            },\n            \"lines\": true,\n            \"no_outside_adj\": null\n        },\n    },\nThe \"no_outside_adj\": null musst be in the \"args\". You can just create a keybinding for the executed command:\njs\n    {\n        \"keys\": [\",\", \"b\", \"d\"],\n        \"command\": \"bh_key\",\n        \"args\": {\n            \"plugin\": {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketremove\",\n                \"args\": {\n                    \"remove_indent\": false,\n                    \"remove_block\": false,\n                    \"remove_content\": false\n                }\n            }\n        },\n    },. Have you tried to increase the search_threshold?. GitGutter has a setting to not add its icons if there are already regions present. However if I am correct you need to add all regions defined in the bracket styles:\njs\n\"bh_default\",\n\"bh_default_open\",\n\"bh_default_close\",\n// ...\n\"bh_curly\",\n\"bh_curly_open\",\n\"bh_curly_close\",\n// .... @AJgotBeard I assume it does work (it works for the linter) and I may add it to the shipped GitGutter settings file.. @AJgotBeard Open Preferences > Package Settings > GitGutter > Settings and add to the user settings:\njs\n  \"protected_regions\": [\n    \"bh_default\",\n    \"bh_default_open\",\n    \"bh_default_close\",\n    \"bh_unmatched\",\n    \"bh_unmatched_open\",\n    \"bh_unmatched_close\",\n    \"bh_curly\",\n    \"bh_curly_open\",\n    \"bh_curly_close\",\n    \"bh_round\",\n    \"bh_round_open\",\n    \"bh_round_close\",\n    \"bh_square\",\n    \"bh_square_open\",\n    \"bh_square_close\",\n    \"bh_angle\",\n    \"bh_angle_open\",\n    \"bh_angle_close\",\n    \"bh_tag\",\n    \"bh_tag_open\",\n    \"bh_tag_close\",\n    \"bh_c_define\",\n    \"bh_c_define_open\",\n    \"bh_c_define_close\",\n    \"bh_single_quote\",\n    \"bh_single_quote_open\",\n    \"bh_single_quote_close\",\n    \"bh_double_quote\",\n    \"bh_double_quote_open\",\n    \"bh_double_quote_close\",\n    \"bh_regex\",\n    \"bh_regex_open\",\n    \"bh_regex_close\",\n    \"sublimelinter-warning-gutter-marks\",\n    \"sublimelinter-error-gutter-marks\",\n    \"bookmarks\"\n  ],\nHowever I am not sure whether we will add it to GitGutter, because if you move the cursor the brackethighlighter icon will be removed, but the GitGutter icon won't be added until it runs a diff again (save, modification, ...).. There seems to be a problem with dependencies, related: https://github.com/jisaacks/GitGutter/issues/443. I think with the newest dev release from yesterday (Build 3153) you can define colors by names, i.e. use the region.redish to add the red color. Hence you can set the scope to \"color\": \"region.redish\" / \"color\": \"region.yellowish\" to set the corresponding color.. I guess so, because it is available for every of my colorschemes.. It think if you use something like view.add_regions(..., \"region.redish brackethighlighter.default\", ...) it will only use red if there is no color for brackethighlighter.default, so that should not be a problem.. Just a small remark from PEP8:\n\nThe preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces\n\nHence I would add a paren around the or's instead of line continuations.\n. Yes it is not necessary, but I added it to indicate and ensure it cannot used for something else. In contrast to pyquotes, which could be used in a lot of cases.\nIn addition I don't have to worry about other preconditions, e.g. a bracket inside an inline code could result in end being less than first.begin.\n. Okay I removed it.\n. ",
    "danilokleber": "After the latest update I got non-retina icons. They used to work nice.\nHere's my support info:\n- Sublime Text 3126\n- Platform: osx\n- Arch: x64\n- GitGutter 1.7.1\n- Install via PC: True\n- git version 2.13.0\n- mdpopups 1.13.1\n- markdown 2.6.6\n- pygments 2.1a0\n- jinja2 2.8. Wow, sorry mate. Messed up the comments... \ud83d\ude05. ",
    "skarfacegc": "Cool.  I got it working, just thought I was missing something.\n. ",
    "astronaute77": "PC 2.0 found the BH for ST2, but it seems to work (installed in Data/Installed Packaged/BracketHighlighter.sublime-package)\n. You are probably right, I saw the description saying ST2:\n\nThank you anyway, it works now :+1: \n. ",
    "solcik": "Sory for spam than. Readme confused me - maybe you can add something like install via PackageControl both ST2/3 ?\n. ",
    "lmartins": "You're absolutely right, it seems to be a shortcut conflict although I cant find it. \nVia menu the option works as expected.\nThanks.\n. ",
    "nqst": "Observed the same issue. Plugin called Djaneiro just adds few more languages to Sublime Text to highlight Django templates, including \"HTML (Django)\" (Simply HTML code with some Django).\nTried to add\"HTML (Django)\" to the arrays at lines 214 & 448 on my bh_core.sublime-settings, but it hasn't helped me \u2014 tags are not highlighted. When I switch language to HTML BracketHighlighter works good.\nSo the question is \u2014 what am I doing wrong with adding a new language to BH settings? Thank you in advance for your help. \n. They match: file name is HTML (Django).tmLanguage. I even tried to use this with extension, but no luck.\n. - Repo: https://github.com/squ1b3r/Djaneiro\n- .tmLanguage file: https://github.com/squ1b3r/Djaneiro/blob/master/Syntaxes/HTML%20(Django).tmLanguage\n- BH Settings: https://dl.dropboxusercontent.com/u/951035/tmp/bh_core.sublime-settings\nThank you!\n. It works! Thanks a lot for your help :) Best regards.\n. ",
    "pirate": "How do I get HTML (Django) tag highlighting working in the most recent version?  These line numbers are no longer up-to-date: \"Tried to add \"HTML (Django)\" to the arrays at lines 214 & 448 on my bh_core.sublime-settings\"\n. @facelessuser Thanks, I got it working, see my PR's https://github.com/facelessuser/BracketHighlighter/pull/272 for the code.\n. See related PR: https://github.com/facelessuser/BracketHighlighter/pull/272 for my updates to the docs.\n. :+1: no worries\n. I looked in bh_regions.py before opening this ticket and tried these with no luck: \n``` python\n\n\n\nview.settings().get('bh_regions')\n['bh_c_define', 'bh_c_define_center', 'bh_c_define_open', 'bh_c_define_close', 'bh_c_define_content', 'bh_curly', 'bh_curly_center', 'bh_curly_open', 'bh_curly_close', 'bh_curly_content', 'bh_angle', 'bh_angle_center', 'bh_angle_open', 'bh_angle_close', 'bh_angle_content', 'bh_square', 'bh_square_center', 'bh_square_open', 'bh_square_close', 'bh_square_content', 'bh_double_quote', 'bh_double_quote_center', 'bh_double_quote_open', 'bh_double_quote_close', 'bh_double_quote_content', 'bh_regex', 'bh_regex_center', 'bh_regex_open', 'bh_regex_close', 'bh_regex_content', 'bh_unmatched', 'bh_unmatched_center', 'bh_unmatched_open', 'bh_unmatched_close', 'bh_unmatched_content', 'bh_tag', 'bh_tag_center', 'bh_tag_open', 'bh_tag_close', 'bh_tag_content', 'bh_round', 'bh_round_center', 'bh_round_open', 'bh_round_close', 'bh_round_content', 'bh_default', 'bh_default_center', 'bh_default_open', 'bh_default_close', 'bh_default_content', 'bh_single_quote', 'bh_single_quote_center', 'bh_single_quote_open', 'bh_single_quote_close', 'bh_single_quote_content']`\n```\n\n\n\nI was hoping there might be another source of key names... Oh well, I guess it could be a GitGutter bug that's not giving these regions precedence.\n. GitGutter has a protected_regions setting that makes it not draw icons if the gutter is already occupied by another icon. The setting takes a list of region keys to give precedence to, e.g. sublimelinter-errors or bh_curly_open. You can see the discussion in the issue I linked to.  I was trying to add BracketHighlighter region keys to that list to no avail.  It seems like either GitGutter is unable to tell that the gutter is occupied by BH keys, or this list of keys is wrong.  I'm betting it's probably the first one.\n. Not sure if this is intentional or if the docs were just out of date.  I found the tag settings in the bh_tag file though, and none of them were in the default bh_core settings, so they're essentially totally hidden.\n. Coolio, that's what I figured. I added a context menu item in PR #271 so people can access that file from the Sublime preferences menu.\n. ",
    "keith0305": "Thumbs up for the detailed explanation. Thanks for clarifying. But I wondered why is the <body></body> tag affected as well? The body tag is not contained within the broken <title> tag nor the <head> tag.\n. ",
    "bachue": "To help you to reproduce this issue, I can paste the code here:\nruby\nmodule Solr\n  def set_searching(searches)\n    return unless self.class.search\n    name, query, label, options = self.class.search\n    nm = \"#{prefix}_search\"\n    strings = if searches[nm].to_s.strip.empty? # <==== Move the cursor here!\n                nil\n              elsif options[:tokenize]\n                searches[nm].strip.split(/ +/)[0..8]\n              else\n                [searches[nm].strip]\n              end\n    if strings\n      if query.kind_of?(Proc)\n        and_conditions, or_conditions = query.call(strings, self)\n        if or_conditions.empty?\n          query = and_conditions\n        else\n          query = \"(#{and_conditions.join(' ')}) \" + or_conditions.join(' OR ')\n        end\n      end\n      query = \"(\" + query + \")\"\n      @active_search = name\n      @active_search_criteria = searches[nm]\n      @large_result = true\n      @conditions << query\n    end\n  end\nend\n. @facelessuser @fabianfetik Thanks for both of your help, it looks really difficult for BH to parse Ruby correctly without understanding Ruby completely.\n. @facelessuser \n\nAlright Ruby people, I just pushed a fix. Someone please let me know if everything is working as expected now so I can close this.\n\nAWESOME !!!!\n. @facelessuser \nSo is for\n``` ruby\nclass Test\n  # ...\nfor user in users\n    i += users.age # <= Move your cursor here\n  end\nend\n```\n. @gdelfino It works well on my Sublime?\n\n. ",
    "benhoskings": "Just noticed the same issue in my own code:\n\nAssigning conditional blocks like this is very common in ruby. The idea is that you can think of the code less imperatively by treating it as a value. Instead of writing code like this:\nruby\nif opts[:template]\n  @template ||= Base.sources.template_for(opts[:template], :from => dep_source)\nelse\n  @template ||= Base.sources.template_for(suffix, :from => dep_source) || self.class.base_template\nend\nYou can treat the whole conditional as a value:\nruby\n@template ||= if opts[:template]\n  Base.sources.template_for(opts[:template], :from => dep_source)\nelse\n  Base.sources.template_for(suffix, :from => dep_source) || self.class.base_template\nend\nIt has an added advantage in this case: the outer conditional won't be re-evaluated if @template is already set.\n. No problem. That little bug aside, this is an awesome plugin, thanks :)\n. @facelessuser It's working well for me. And that postfix behaviour is correct, I'd say: it shouldn't be highlighted at all because it doesn't open a scope.\nThanks!\n. Just found another similar case: the begin keyword.\n\nFor the purposes of BracketHighlighter, the permissible syntaxes for begin..end blocks are the same as if..end.\n. Yep, it's fixed. Thanks, and sorry for the trouble; if I find any more issues I'll fix them myself in a PR.\n. That would get exasperating :) Maybe a note at the top of the readme would help? A short example with a link to one of the regexes in question, to point people in the right direction.\n. ",
    "gdelfino": "...and also for case\n\ndef myMethod\n  x = case y\n        when 1\n          true\n        when 2\n          false\n        end\nend\n. ",
    "kavarell": "Blade uses \"filename.blade.php\" (instead of \"filename.php\"), and for purposes of the Bracket Highlighter plugin, I believe that's the only meaningful difference between it and a standard PHP file. I've attached a screenshot of an entire include file so you can see that substantively, the contents of a blade.php can be identical to a .php file containing HTML. As you can see in the attached, the bracketing doesn't appear in this file. Is it because of the blade.php file extension? Because if I copy and paste the contents of this file to a standard php file extension, the brackets appear just fine. \nI appreciate the help. Awesome plugin by the way.\n\n. It shows \"PHP - Laravel Blade\".\nOn Sep 12, 2013, at 3:03 PM, Isaac Muse notifications@github.com wrote:\n\nBottom right of the editor (in the status bar), what language does it say it is using?\n\u2014\nReply to this email directly or view it on GitHub.\n. Great. It's laravel-blade.tmLanguage.\n\nOn Sep 12, 2013, at 5:00 PM, Isaac Muse notifications@github.com wrote:\n\nThat is the problem. The php Larvel Blade tmlanguage name needs to be added in the settings file to the appropriate place. What is the php larvel file name (minus the tmlanguage extension). That is the name I need in order to get this working.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm using ST3 on my mac, and I cannot find the file bh_core.sublime-settings. I find lots of other sublime-settings files, but not that one in particular. I've searched my hidden system files and looked at library / application support/ sublime text 3 etc folder. Am I looking in the wrong place?\n. It worked. Thank you!!\n. \n",
    "aronwoost": ":+1: \n. I see what you mean.\nCan't you check whether the style attribute is already selected? If so select class otherwise select style. Would this make sense?\n. Works like a charm. Awesome, thanks! Please also apply to ST2 since we still use it mostly.\n. ",
    "nicohvi": "No worries, thanks for an amazing plugin! :-)\n. ",
    "ashmoran": "@facelessuser - Thanks for the advice. I decided to clone the repo to my usual development folder and Symlink it into ~/Library/Application Support/Sublime Text 3/Packages.\nI've submitted a pull request for this ( https://github.com/facelessuser/BracketHighlighter/pull/131 ) but I'm not sure if I've used the right branch. I can re-do this if necessary (it's only a 2 line change).\n. Ah brilliant, thanks! This works a charm.\n. Heh, I didn't notice the 9 months of previous commits until I saw this pull request page again!!!\nCool, when that's done I'll unlink my repo and re-install via Package Control.\nSpeaking of oddness, when I first linked the cloned repo in (with master checkout out), BracketHighlighter just stopped working, stone cold dead. Moving it into User didn't help, nor did uninstalling it. Eventually after moving the repo around, re-installing a few times, and waving a rubber chicken in the air, it started working again off my BH2ST3-rspec branch. I have absolutely no idea what happened, but I plan to leave it alone now until you've merged the changes :)\n. Ah that could be it! I tried restarting it at various points but it didn't seem to have any consistent effect. (Sublime Text is usually really good at reloading plugins in-process.) It's possible I missed a necessary restart though.\nEither way I'll leave it with you for now :-)\nSent from my iPhone\n\nOn 5 Nov 2013, at 12:56 am, Isaac Muse notifications@github.com wrote:\nThe chicken is very important.\nUsually when installing BH, a restart is needed. It has to do with not everything being imported correctly on first install. A restart allows everything to get imported correctly.  Also the Master branch is for (ST2), so if you are using ST3, you need the BH2ST3 branch. I will let you know when I get around to merging this.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "garymh": "Ahh, bummer :( Can I remove the scope section to have it work for all scopes within the bracket entry?\n. Darn. ok, thanks anyway!\n. ",
    "mkanet": "Thanks!!  This may sound silly, but how do I update the plugin?  Im still learning ST 3.  Do all packages get updated automatically on startup?\n. Actually nevermind... I am CERTAIN I got the update.  Because now all-of-a-sudden all scripts load instantly!!!  Im guessing all packages are updated automatically.\n. ",
    "farfromrefug": "@facelessuser i do believe you but i thought the version on PC was now the version for ST3. Is that correct?\nI just installed it by cloning the BH2ST3 and it worked. Thanks !\n. ",
    "jeremychone": "Ha ok, make sense. \nI did not realize the scope in the tmLanguage, kind of new in Sublime. So, you are totally right, this is tmLanguage issue and not a BH one. Feel free to close this issue or I can close it if you want me to. \nThank you for the fast response. BH rocks! \n. ",
    "hobocta": "Oh. I see. Sorry for my question.\nThank you. It work! :)\n. ",
    "andoro": "Thx for your quick answer. I appreciate your hard work in connection with speed.\nWell, you are right, the setting is there. I just wanted to tell you, if I were you I'd communicate this setting more highlighted (for new users) :)\n. ",
    "KostiantynKondratiuk": "\u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442(.. ",
    "ajitbohra": "My Bad just notice it was already installed so didnt show up in list \nSilly me :p\n. ",
    "gnarmedia": "I missed this reply, sorry.  Thank you so much, it completely works now! :D\n. ",
    "pietrofxq": "I also did it, but still not working. Downloaded the BH2ST3, copied to Package folder but nothing happens. \n. Found the problem... My document was set to HTML (Jekkyl) syntax, and BracketHighlighter works by default only in html and xml documents.\n. ",
    "BenjaminRH": "Hey, I clearly struck a nerve. I realize \"it shouldn't be too difficult\" sounds annoying coming from a random dude posting an issue, and I wasn't intending it that way, or trying to trivialize it. I was just hoping for an easy solution or a hook of some sort, as you mentioned.\nThanks for taking the time to reply, and develop this plugin, which is excellent.\n. I understand. I really appreciate your time, I've only been using the plugin for about a week but I really love it. I apologize again for the tone of my issue request.\n. ",
    "mishak87": "I was able to override settings only by adding this to user file. Not sure if it is best way to do it (ST3).\njson\n{\n    \"brackets\": [\n        // PHP Angle\n        {\n            \"name\": \"php_angle\",\n            \"open\": \"(<\\\\?)(?:php)?\",\n            \"close\": \"(\\\\?>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"PHP\"],\n            \"plugin_library\": \"User.phpunmatched\",\n            \"enabled\": true\n        }\n    ]\n}\nI don't know how ST merges settings. Wouldn't be better to use dictionary instead of array with name so definitions can be over-writen easily in user config?\nThanks for this plugin!\n. @facelessuser Point me to the donate button sir!\n. Names matche that's all that matters :)\n. ",
    "gotofritz": "Understood. Thanks for the reply.\nI use the theme zenburn. The theme file (${packages}/zenburn/zenburn.tmTheme) is here - the extra color is at the end.\nhttps://gist.github.com/gotofritz/26a131a7f045995e272b\n. Ah, sorry, ST2\nHere are the settings\nhttps://gist.github.com/gotofritz/9468403\n. Thanks for your time and prompt replies. I'll have another look.\n. Tried again, no joy. Never mind, thanks for your help.\n. Hi thanks for your prompt answer and your patience :-)\nIt was indeed Color Highlighter causing the issue, Sublime simply ignored any color scheme I tried to install EVEN after uninstalling Color Highlighter (it kept living in the Local/Session.sublime_session file). It seems that under the bonnet Sublime is rather messy. \n[resolves to learn VIM and dump sublime]\n. ",
    "jhardy1974": "Here are the theme settings:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>author</key>\n    <string>Chris Kempson (http://chriskempson.com)</string>\n    <key>name</key>\n    <string>Base16 Eighties Dark</string>\n    <key>semanticClass</key>\n    <string>base16.eighties.dark</string>\n    <key>colorSpaceName</key>\n    <string>sRGB</string>\n    <key>gutterSettings</key>\n    <dict>\n        <key>background</key>\n        <string>#393939</string>\n        <key>divider</key>\n        <string>#393939</string>\n        <key>foreground</key>\n        <string>#747369</string>\n        <key>selectionBackground</key>\n        <string>#515151</string>\n        <key>selectionForeground</key>\n        <string>#a09f93</string>\n    </dict>\n    <key>settings</key>\n    <array>\n        <dict>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#2d2d2d</string>\n                <key>caret</key>\n                <string>#d3d0c8</string>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n                <key>invisibles</key>\n                <string>#747369</string>\n                <key>lineHighlight</key>\n                <string>#393939</string>\n                <key>selection</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Text</string>\n            <key>scope</key>\n            <string>variable.parameter.function</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Comments</string>\n            <key>scope</key>\n            <string>comment, punctuation.definition.comment</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#747369</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Punctuation</string>\n            <key>scope</key>\n            <string>punctuation.definition.string, punctuation.definition.variable, punctuation.definition.string, punctuation.definition.parameters, punctuation.definition.string, punctuation.definition.array</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Delimiters</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Operators</string>\n            <key>scope</key>\n            <string>keyword.operator</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Keywords</string>\n            <key>scope</key>\n            <string>keyword</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Variables</string>\n            <key>scope</key>\n            <string>variable</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Functions</string>\n            <key>scope</key>\n            <string>entity.name.function, meta.require, support.function.any-method</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Classes</string>\n            <key>scope</key>\n            <string>support.class, entity.name.class, entity.name.type.class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#ffcc66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Classes</string>\n            <key>scope</key>\n            <string>meta.class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2f0ec</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Methods</string>\n            <key>scope</key>\n            <string>keyword.other.special-method</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Storage</string>\n            <key>scope</key>\n            <string>storage</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Support</string>\n            <key>scope</key>\n            <string>support.function</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Strings, Inherited Class</string>\n            <key>scope</key>\n            <string>string, constant.other.symbol, entity.other.inherited-class</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Integers</string>\n            <key>scope</key>\n            <string>constant.numeric</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Floats</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Boolean</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Constants</string>\n            <key>scope</key>\n            <string>constant</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Tags</string>\n            <key>scope</key>\n            <string>entity.name.tag</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Attributes</string>\n            <key>scope</key>\n            <string>entity.other.attribute-name</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Attribute IDs</string>\n            <key>scope</key>\n            <string>entity.other.attribute-name.id, punctuation.definition.entity</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Selector</string>\n            <key>scope</key>\n            <string>meta.selector</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Values</string>\n            <key>scope</key>\n            <string>none</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Headings</string>\n            <key>scope</key>\n            <string>markup.heading punctuation.definition.heading, entity.name.section</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#6699cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Units</string>\n            <key>scope</key>\n            <string>keyword.other.unit</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bold</string>\n            <key>scope</key>\n            <string>markup.bold, punctuation.definition.bold</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#ffcc66</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Italic</string>\n            <key>scope</key>\n            <string>markup.italic, punctuation.definition.italic</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Code</string>\n            <key>scope</key>\n            <string>markup.raw.inline</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Link Text</string>\n            <key>scope</key>\n            <string>string.other.link</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Link Url</string>\n            <key>scope</key>\n            <string>meta.link</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Lists</string>\n            <key>scope</key>\n            <string>markup.list</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Quotes</string>\n            <key>scope</key>\n            <string>markup.quote</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f99157</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Separator</string>\n            <key>scope</key>\n            <string>meta.separator</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#515151</string>\n                <key>foreground</key>\n                <string>#d3d0c8</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Inserted</string>\n            <key>scope</key>\n            <string>markup.inserted, markup.inserted.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#99cc99</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Deleted</string>\n            <key>scope</key>\n            <string>markup.deleted, markup.deleted.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#f2777a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Changed</string>\n            <key>scope</key>\n            <string>markup.changed, markup.changed.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#cc99cc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Ignored</string>\n            <key>scope</key>\n            <string>markup.ignored, markup.ignored.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Untracked</string>\n            <key>scope</key>\n            <string>markup.untracked, markup.untracked.git_gutter</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#515151</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Colors</string>\n            <key>scope</key>\n            <string>constant.other.color</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Regular Expressions</string>\n            <key>scope</key>\n            <string>string.regexp</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Escape Characters</string>\n            <key>scope</key>\n            <string>constant.character.escape</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#66cccc</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Embedded</string>\n            <key>scope</key>\n            <string>punctuation.section.embedded, variable.interpolation</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d27b53</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Invalid</string>\n            <key>scope</key>\n            <string>invalid.illegal</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#f2777a</string>\n                <key>foreground</key>\n                <string>#2d2d2d</string>\n            </dict>\n        </dict>\n    </array>\n    <key>uuid</key>\n    <string>36594751-36ac-443a-9f2f-111b815085cf</string>\n</dict>\n<dict>\n    <key>name</key>\n    <string>Bracket Curly</string>\n    <key>scope</key>\n    <string>brackethighlighter.curly</string>\n    <key>settings</key>\n    <dict>\n                <key>background</key>\n                <string>#2352A4</string>\n        <key>foreground</key>\n        <string>#2352A4</string>\n    </dict>\n</dict>\n</plist>\n. Here are the BH settings:\n```\n{\n// Define region highlight styles\n    \"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"tag\",\n        // BH1's original default color for reference\n        \"color\": \"bh.default.tag\",\n        // \"color\": \"brackethighlighter.tag\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracekt pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"tag\",\n        // \"color\": \"#a70000\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    },\n    \"round\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.round\",\n        // \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.square\",\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.angle\",\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        \"style\": \"outline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    }\n}\n\n}\n```\n. ",
    "jtara": "This is the entire file. I cut it down for demo.\nYes, I see brackets in the gutter.\n. Mine is behaving differently, then.\nIt seems inconsistent, as well. Now it doesn't match on the class end any more. No question mark. No nothing.\nI click on class, I get a question mark. I click on the corresponding end I get nothing in the gutter.\nIf I click on the def for ordered_audit_list I get a question mark. If I click on the corresponding end I get a bullet.\nThe nesting arrows work correctly.\n. And now... it's no longer observer the Mark Style. I have it set to outlines. I am not getting outlines.\n. Well, I've always had these kind of problems with it. I thought I'd give it a go in ST3, hoping that either ST3 or new BracketHighligher might fix it. But no luck. So, I don't think it's a sick installation. Maybe somehow a sick OS or sick computer, but not a sick installation.\nMaybe try my Linux box and see if I get the same results... (This is on OSX 10.9.2)\n. OK, sorry, did not realize that setting High Visibility from the menu is not sticky.\n. It's search_threshhold. I set it to 10,000, and now it works.\nI guess I need to bump this up. We have a lot of methods that go to an unfortunate length...\n100k and it will even match the class. (The real file is 60K long... I know, I know... I didn't write it.)\nNow I need to go re-read the docs and see what else I missed that's important.\n. Hmmm, with it at 100K I still have a problem, but can live with it.\nWhen I try to match on the class, it claims it matches, but it matches to the end of one of the enclosed method refs! It shows a bullet but the ending bullet is in the wrong place, outline stopped short of the real end. Clicking on the end gets a ?.\nBut at least this makes the package useful in most cases.\nIs there some internal limit on the max size of search_threshold?\n. Uninstall/reinstall does not help.. - ST ver.: 3143\n- Platform: osx\n- Arch: x64\n- Plugin ver.: 2.25.0\n- Install via PC: True\n- mdpopups ver.: Version could not be acquired!\n- backrefs ver.: Version could not be acquired!\n- markdown ver.: 2.6.9\n- pygments ver.: 2.1a0\n- jinja2 ver.: 2.8\n. FYI: Have you asked for a complimentary license? I should think (hope) the ST author would be happy to provide one!\nI will update with console in the morning. Long day.. Satisfy dependencies seems to have done the trick. \nI'm afraid I didn't think to open the console before I did that. I opened it after, and all I saw was \"all dependencies satisfied\". I closed and reopened, and now BH works.\nFrankly, I wasn't aware of Satisfy Dependencies. I wouldn't have thought of it. Since ST likes to do updates automagically (alas, often in the middle of editing...) I'd think that they'd automagically do that as well. \nGuess I should actually RTM...\nThanks for the help. I will let you close or leave open as you see fit. Dunno if there's some action item here for you.. ",
    "youryida": "I got it ! Thanks for your patient reply!\n. ",
    "chongivan": "Understood, thanks!\nOn Tue, Apr 8, 2014 at 10:30 AM, Isaac Muse notifications@github.comwrote:\n\nI believe it's the primitive type you're using?\nNot sure what you mean by this, but let me explain how BH works:\nBH sometimes does not match a valid bracket pair because of the threshold\nthat is required on instant matching. Matching tags across excessive\ncontent can slow down typing etc since matches are performed on every\ncursor change and key press. The settings file has a default threshold of\n5000; I personally use 10000 which is twice as big, but you can push it\neven further if you like (but keep in mind the further you push it, the\ngreater chance you will experience performance issues in brackets with\ngreat distance between them). You can even disable threshold checks in the\nsettings file, but I would not advise that. If you use any of the on demand\nplugin commands found in the command palette, they skip the threshold since\nthey are not run automatically.\nThe question mark is just visual feedback telling you \"I tried to match,\nbut there is no valid match, or I had to give up because I hit the\nthreshold limit\".\nI short this is not a bug, but a built in feature. Hopefully, I have armed\nyou with the information you need to tweak it to your liking.\nEven though I have closed this issue, feel free to ask more questions if\nyou are still confused.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/facelessuser/BracketHighlighter/issues/158#issuecomment-39805925\n.\n. \n",
    "jomo": "I came up with this:\nJSON\n[\n  // bash do/done\n  {\n      \"name\": \"bash_do\",\n      \"open\":  \"(?:(?:;|^)\\\\s*)\\\\b(do)\\\\b\",\n      \"close\": \"(?:(?:;|^)\\\\s*)\\\\b(done)\\\\b\",\n      \"style\": \"default\",\n      \"scope_exclude\": [\"string\", \"comment\"],\n      \"plugin_library\": null,\n      \"language_filter\": \"whitelist\",\n      \"language_list\": [\"Shell-Unix-Generic\"],\n      \"enabled\": true\n  },\n  // bash then/fi\n  {\n      \"name\": \"bash_if\",\n      \"open\":  \"(?:(?:;|^)\\\\s*)\\\\b(then)\\\\b\",\n      \"close\": \"(?:(?:;|^)\\\\s*)\\\\b(fi)\\\\b\",\n      \"style\": \"default\",\n      \"scope_exclude\": [\"string\", \"comment\"],\n      \"plugin_library\": null,\n      \"language_filter\": \"whitelist\",\n      \"language_list\": [\"Shell-Unix-Generic\"],\n      \"enabled\": true\n  },\n  // bash case/esac\n  {\n      \"name\": \"bash_case\",\n      \"open\":  \"(?:(?:;|^)\\\\s*)\\\\b(case)\\\\b\",\n      \"close\": \"(?:(?:;|^)\\\\s*)\\\\b(esac)\\\\b\",\n      \"style\": \"default\",\n      \"scope_exclude\": [\"string\", \"comment\"],\n      \"plugin_library\": null,\n      \"language_filter\": \"whitelist\",\n      \"language_list\": [\"Shell-Unix-Generic\"],\n      \"enabled\": true\n  }\n]\nIt might have a few false positives (doesn't check for \"in\" in the case, doesn't check for \"if\" before then, also \"do\" is not restricted to work with for/while/until/select)\n. The code above is working so far, besides the false positives. Would be nice to get that fixed somehow, so errors won't go unnoticed.\nI have no idea how to adress the ) issue though. A case can look like this:\nBASH\ncase \"$1\" in\n  potato) echo \"foo\";; # *could* be (potato) instead\n  banana) echo \"bar\";;\nesac\nThis will produce this problem:\n\n. Found a better way to fix the ) problem without breaking other round brackets:\n\nJSON\n{\n  \"name\": \"bash_case_statement\",\n  \"open\":  \"(?:(?:;|^)\\\\s*)([^\\\\);&]+\\\\))\",\n  \"close\": \"(;;&|;;|;&)\",\n  \"style\": \"default\",\n  \"scope_exclude\": [\"string\", \"comment\", \"source.shell\"],\n  \"scope_exclude_exceptions\": [\"meta.scope.case-body.shell\"],\n  \"plugin_library\": null,\n  \"language_filter\": \"whitelist\",\n  \"language_list\": [\"Shell-Unix-Generic\"],\n  \"enabled\": true\n}\nIn some rare cases it's not working:\n\nIs there a simple way to allow anything inside strings?\nThanks for suggesting ScopeHunter, very useful! :+1: \nI'll look into the false positive things later.\n. Scopes are more detailed than I thought!\nJSON\n    {\n      \"name\": \"bash_case_statement\",\n      \"open\":  \"(?:(?:;|^)\\\\s*)(.+)(?:\\\\))\",\n      \"close\": \"(;;&|;;|;&)\",\n      \"style\": \"default\",\n      \"scopes\": [\"meta.scope.case-pattern.shell\", \"punctiation.terminator.case-clause.shell\"],\n      \"scope_exclude\": [\"string\", \"comment\"],\n      \"language_filter\": \"whitelist\",\n      \"language_list\": [\"Shell-Unix-Generic\"],\n      \"enabled\": true\n    }\nSeems to be working very wel, except for this:\n\nI don't really understand why that's happening. \"comment\" is in the exclude list. I've even tried using - and ! with no success.\n. > Give me an example where this would fail.\nBASH\nif invalid\n  echo \"there should be ';then' after 'invalid'\"\nfi\n\nIs this the same reason you are pairing do/done instead of for/done?\n\nNo. I did that because there's\n| 1 | 2 | 3 |\n| --- | --- | --- |\n| select | do | done |\n| until | do | done |\n| while | do | done |\n| for | do | done |\nThey all have some special cases and aren't completely equal.\nOf course we could as well use \\\\b(select|until|while|for)\\\\b + your magic to match syntax + (?:(?:;|^)\\\\s*)\\\\b(do)\\\\b\n. thanks for making this plugins, it's awesome :)\nHere's the syntax for the different blocks [1]:\n\nselect name [in words \u2026]; do commands; done\nuntil test-commands; do consequent-commands; done\nwhile test-commands; do consequent-commands; done\nfor name [ [in [words \u2026] ] ; ] do commands; done\nfor (( expr1 ; expr2 ; expr3 )) ; do commands ; done\n\nCheck out this part of the man to see the meaning of the words above ;)\n[1][https://www.gnu.org/software/bash/manual/bash.html#Compound-Commands]\n. couldn't we just use this to force lower case?\nPython\no = bfr[first.begin:first.end] # not lower()\nc = bfr[second.begin:second.end] # not lower()\n. > I am not sure what you mean.\n``` python\no = bfr[first.begin:first.end].lower() # this changes \"IF\" to \"if\"\n...\nif o == \"if\" and c == \"fi\":\n\n```\nthe above will work with any capitalization of \"if\", while this\n``` python\no = bfr[first.begin:first.end] # removed .lower()\n...\nif o == \"if\" and c == \"fi\":\n\n```\nwill only work with \"if\" and not with other capitalizaion.\n\ndo these keywords get used in different cases for other reasons\n\nThis here is a bit unlikely, but still valid:\nbash\nfunction case {\n  echo case # echo \"case\"\n}\ncase=case # set $case to \"case\"\ncase $case in\n  case) \\case;; # if the var $case is \"case\", run case as defined above\nesac\nThe only thing that would currently break is variable assignment and the case).\nThis can be solved by checking if the keyword is followed by \\s and \\s|$ for closing tags.\n. Another one:\nbash\necho multi\\\n line\\\n stuff\\\n case\necho this breaks\nFix for both issues:\njson\n{\n  \"open\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(if|case|while|select|until|for)\\\\s\",\n  \"close\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(fi|esac|done)(?:\\\\s|$)\"\n}\n\n. IF is not valid. I have removed the .lower() from bashkeywords.\n. awesome! :beers:\n. Done, that should be it.\n. awesome, thank you too!\n. Thanks\n. ",
    "eoinkelly": "No worries :smile: \n. ",
    "KatieK2": "Great, thanks!\nBracketHighlighter wasn't working for me; I assumed it was because I didn't get the ST3 version through PC since I upgraded. \nBut the actual problem was that for some reason, the BracketHighlighter directory was in Packages/Tag, not in Packages. After moving BracketHighlighter to Packages and restarting ST3, it worked fine.\nThanks for the time you've put in on developing BH!\n. ",
    "lombardi-gux": "Thanks.  I copied the code and added it to my user folder bh_core.sublime-settings but I don't see any change.  I must've done it wrong.\nPlease see http://cl.ly/2A2F1Y1Z2H0c/bh_core.sublime-settings or http://pastebin.com/hNdWf5H6\n. https://github.com/angular-ui/AngularJS-sublime-package\n. Yes, I opened its packages.json file, and that was the \"name\" there. Seems to work now:\n\n. ",
    "PunkWare": "Thanks a lot for your prompt and detailed answer :)\nI'll try as you suggest and let you know quickly how I'm progressing.\nThanks again !\n. Hi,\nI've managed to solve the quote match issue by modifying the clojure.tmLanguage file so that the syntax highlighter no longer scopes it as a docstring format (hence solving the leading space issue) :smiley: \nI'm still struggling with the rule to match #\\\\^(\\\\{) with (\\\\}) :sweat: \nHere's what I'm doing:\nIn the \"brackets\":section of my user settings file, I've added the rule\n{\n    \"name\": \"curly_metadata\",\n    \"open\": \"#\\\\^(\\\\{)\",\n    \"close\": \"(\\\\})\",\n    \"enabled\": true,\n    \"ignore_string_escape\": true,\n    \"language_filter\": \"whitelist\",\n    \"language_list\":[ \"Clojure\" ],\n    \"scopes\": [\"comment\", \"punctuation\"],\n    \"style\": \"curly\"\n},\nI have the feeling that the issue is coming from the fact that when the cursor is on #^{ScopeHunter says that the scope is comment.punctuation.definition.metadata.begin.clojure and as you said, BH does not search comments for brackets.\nI keep on looking for a solution...\n. Yes, it works now ! :+1:\nThanks a lot for your great support !\nAdd a star for Faceless\n:smiley: \n. ",
    "rooc": "that is EJS syntax - http://goo.gl/wXWbdr\nor you can use one from plugins repository.\nas example of EJS file you can take any html file\nI've tried option \"tag_mode\": .. \"html\":[... \"HTML (EJS)\" ] - no effect\n. Thank you! It helped\n. ",
    "gclsoft": "But I've added colors to my theme, not work:\nxml\n     <dict>\n            <key>name</key>\n            <string>Bracket Curly</string>\n            <key>scope</key>\n            <string>brackethighlighter.curly</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#CC99CC</string>\n            </dict>\n        </dict>\nI mean if I select one bracket, there will be four bracket shows, but I only want to see a pair of  brackets, not two pair of brackets.\nThanks very much!\nMy setting:\n``` cpp\n{\n //Debug logging\n    \"debug_enable\": false,\n// When only either the left or right bracket can be found\n// this defines if the unmatched bracket should be shown.\n\"show_unmatched\" : false,\n\"high_visibility_enabled_by_default\": true,\n\n// High visibilty style and color for high visibility mode\n// (solid|outline|underline|thin_underline|squiggly|stippled)\n\"high_visibility_style\": \"outline\",\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n// Match brackets only when the cursor is touching the inside of the bracket\n\"match_only_adjacent\": false,\n\n// Character threshold to search\n\"search_threshold\": 5000,\n\n// Set mode for string escapes to ignore (regex|string)\n\"bracket_string_escape_mode\": \"string\",\n\n// Set max number of multi-select brackets that will be searched automatically\n\"auto_selection_threshold\" : 10,\n\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n\"curly\": {\n        \"icon\": \"curly_bracket\"\n        ,\"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    },\n\n}\n```\n. I use https://github.com/gclsoft/Sublime3-Theme-NotepadPlusPlus\nThe two pair of brackets problem is because of that theme, using your setting code above has solved it.\nBut the color still not work.\nThanks very much!\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n\n\nname\nNotepad-Plus-Plus\nsettings\n\n\nsettings\n\nbackground\n#FFFFFF\ncaret\n#000000\nforeground\n#000000\ninvisibles\n#BFBFBF\nlineHighlight\n#66FF66\nselection\n#A7CAFF\n\n\n     <dict>\n    <key>name</key>\n    <string>WordHighlight</string>\n    <key>scope</key>\n    <string>wordhighlight</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#EDF2E9</string>\n\n        <key>background</key>\n        <string>#009933</string>\n    </dict>\n</dict>\n\n\n\n\n\n    <dict>\n        <key>name</key>\n        <string>Comment</string>\n        <key>scope</key>\n        <string>comment</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>italic</string>\n            <key>foreground</key>\n            <string>#3C802C</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>String</string>\n        <key>scope</key>\n        <string>string</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#777777</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Number</string>\n        <key>scope</key>\n        <string>constant.numeric</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#0F20F6</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Built-in constant</string>\n        <key>scope</key>\n        <string>constant.language</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#916319</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>User-defined constant</string>\n        <key>scope</key>\n        <string>constant.character, constant.other</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#916319</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Variable</string>\n        <key>scope</key>\n        <string>variable</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#000000</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Keyword</string>\n        <key>scope</key>\n        <string>keyword</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#000000</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Storage</string>\n        <key>scope</key>\n        <string>storage</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#AA2063</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Class name</string>\n        <key>scope</key>\n        <string>entity.name.class</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#291FB7</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Inherited class</string>\n        <key>scope</key>\n        <string>entity.other.inherited-class</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#CC4C07</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Function name</string>\n        <key>scope</key>\n        <string>entity.name.function</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#0000FF</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Function argument</string>\n        <key>scope</key>\n        <string>variable.parameter</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#C96916</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Tag name</string>\n        <key>scope</key>\n        <string>entity.name.tag</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#291FB7</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Tag attribute</string>\n        <key>scope</key>\n        <string>entity.other.attribute-name</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#881181</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Library function</string>\n        <key>scope</key>\n        <string>support.function</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#0000FF</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Class Variable</string>\n        <key>scope</key>\n        <string>variable.other, variable.js, punctuation.separator.variable</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#000000</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Language Constant</string>\n        <key>scope</key>\n        <string>constant.language</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#000000</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Keyword Operator</string>\n        <key>scope</key>\n        <string>keyword.operator, declaration.function.operator, meta.preprocessor.c.include</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#0000FF</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Meta Brace</string>\n        <key>scope</key>\n        <string>punctuation.section.embedded -(source string source punctuation.section.embedded), meta.brace.erb.html</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#F02A1D</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Invalid</string>\n        <key>scope</key>\n        <string>invalid</string>\n        <key>settings</key>\n        <dict>\n            <key>foreground</key>\n            <string>#EB291C</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Normal Variable</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#000000</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Function Call</string>\n        <key>scope</key>\n        <string>meta.function-call</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string>bold</string>\n            <key>foreground</key>\n            <string>#0000FF</string>\n        </dict>\n    </dict>\n    <dict>\n        <key>name</key>\n        <string>Keyword Control</string>\n        <key>scope</key>\n        <string>keyword.control</string>\n        <key>settings</key>\n        <dict>\n            <key>fontStyle</key>\n            <string></string>\n            <key>foreground</key>\n            <string>#C96916</string>\n        </dict>\n    </dict>\n\n\nname\nBracket Curly\nscope\nbrackethighlighter.curly\nsettings\n\nforeground\n#CC99CC\n\n\n</array>\n<key>uuid</key>\n<string>57E9F1F4-9556-47AF-A24D-61BFA4E53138</string>\n\n\n\n```\n``` cpp\n{\n //Debug logging\n    \"debug_enable\": false,\n// When only either the left or right bracket can be found\n// this defines if the unmatched bracket should be shown.\n\"show_unmatched\" : false,\n\"high_visibility_enabled_by_default\": false,\n\n// High visibilty style and color for high visibility mode\n// (solid|outline|underline|thin_underline|squiggly|stippled)\n\"high_visibility_style\": \"outline\",\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n// Match brackets only when the cursor is touching the inside of the bracket\n\"match_only_adjacent\": false,\n\n// Character threshold to search\n\"search_threshold\": 5000,\n\n// Set mode for string escapes to ignore (regex|string)\n\"bracket_string_escape_mode\": \"string\",\n\n// Set max number of multi-select brackets that will be searched automatically\n\"auto_selection_threshold\" : 10,\n\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n\"curly\": {\n        \"icon\": \"curly_bracket\"\n        ,\"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    },\n\n}\n```\n. Thanks, but still the same.\nI am using https://github.com/SublimeText/WordHighlight , maybe it's because of that plugin.\n. OK. But I disabled that plugin, still the same. Thanks.\n. I had removed that comma, too. But still the same,no colors. Thanks!\n. It's OK now! Thanks so much! Sorry for taking you so much time. \n. ",
    "endorama": "Sorry for the late reply, and thanks for merging! The angularjs branch I used to create the PR was a branch created from master immediatly after fork, sorry for the troubles that this has created to you.\nI've created a new PR #178 to add ST2 support as requested.\nCheers\n. ",
    "adis-io": "\"args\": {\"select\": \"left\"}\nAre there only two parameters in select argument?\nI mean is there something like \"match\" parameter?\nI want to jump right bracket when I'm in left and vice versa using only one hotkey.\nNow  my keybinding:\n// Go to left bracket\n    {\n        \"keys\": [\"alt+1\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\"}\n            }\n        }\n    },\n    // Go to right bracket\n    {\n        \"keys\": [\"alt+shift+1\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"right\"}\n            }\n        }\n    },\nI want to have something like that:\n// Go to match bracket\n    {\n        \"keys\": [\"alt+1\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"match\"}\n            }\n        }\n    },\n. Yes\n. Thank you\n2014-06-25 21:36 GMT+06:00, Isaac Muse notifications@github.com:\n\nI will look into it when I get some time.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/177#issuecomment-47118321\n. Yes, I'm on ST3. Thanks for a such great feature.\n\n2014-07-30 8:45 GMT+06:00, Isaac Muse notifications@github.com:\n\nThis will be in the next release.  I just committed to the main branch\nhttps://github.com/facelessuser/BracketHighlighter/commit/d4e736d6a935bffcdb0aeb38a3d28a1041b8b107,\nbut you won't see it in package control until I merge it into the ST3\nbranch.  I will let you know when main gets merged with the ST3 branch.  I\nam no longer adding features to the ST2 branch, hopefully you are on ST3.\nBasically you set up the traditional command to jump left or right (in this\ncase left or right will determine which one it jumps to first), and then add\nthe argument alternate and set it to true.  Then you will only need one\ncommand to jump back and forth.\njavascript\n{\n        \"keys\": [\"ctrl+alt+super+up\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": true,\n            \"lines\" : true,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"bh_modules.bracketselect\",\n                \"args\": {\"select\": \"left\", \"alternate\": true}\n            }\n        }\n    },\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/facelessuser/BracketHighlighter/issues/177#issuecomment-50567517\n. Okay, thanks for response. I'll try to fix it myself.. Awesome. It works! Thanks!. > I would assume if you can return a case, you can probably return an if    \n\nyes, you can return if\n\nIs begin block valid after a return?\n\nseems so\n\n. I didn't notice at first. But it \"sees\" only parent brackets. For example:\ndef method\n  3.times do\n    puts \"example\"\n  end\nend\nIt highlights \"def - end\", even if I place cursor on \"example\". I got you, thanks.. Sorry, @facelessuser\nMy bad.\nAs I understood, there is no automated tests, so it's hard to me to make changes.\nP.S. you did great job. This plugin is the only reason I'm staying on ST.. ",
    "stevenfrog": "I understand you just want to fix your readme to make more people help themselves.\nI hope you just just give us more useful information.\nAlso you give us many configs for different language, but many people just know one or two of them, we can not find relation from examples.\nThe first problem is about config structure, also you give detail doc for each part, but I still not know how to config it for myself.\nExample, I try to add rule for jsp just as html.\nThen I change language_list like this:\n// HTML\n        {\n            \"name\": \"html\",\n            \"open\": \"(<)(?=[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?>|\\\\/[\\\\w\\\\:\\\\-]+[^>]*>)\",\n            \"close\": \"(?<=<)(?:[\\\\w\\\\:\\\\-]+(?:(?:\\\\s+[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^>\\\\s]+))?)*)\\\\s*\\\\/?|\\\\/[\\\\w\\\\:\\\\-]+[^>]*)(>)\",\n            \"style\": \"tag\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"Handlebars\", \"Java Server Page (JSP)\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"find_in_sub_search\": \"only\",\n            \"enabled\": false\n        },\nBut no use, :-(\nCan you tell me how to add jsp's bracket highlight to html bracket highlight at least?\n. Thanks for your careful reply.\n```\n // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\?)\",\n            \"close\": \"(?<!\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\", \"Handlebars\", \"AngularJS\", \"Java Server Page (JSP)\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        },\n\"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\"HTML\", \"HTML 5\", \"PHP\", \"HTML (Jinja Templates)\", \"HTML (Rails)\", \"HTML (Twig)\", \"laravel-blade\", \"Handlebars\", \"AngularJS\", \"Java Server Page (JSP)\"],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\n```\nI change the setting just as your show. But it's not work.\nYou can use this simple error.jsp for testing:\n<html>\n<head>\n    <!-- Meta Tags -->\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>error page</title>\n</head>\n<body>\n<p>This is error page</p>\n</body>\n</html>\n<div class=\"wrapper\">\n    <div class=\"header\"></div>\n</div>\n. Oh my god!\nAll name in menu, syntax is  \"Java Server Page (JSP)\",  but I find \"Java Server Pages (JSP).tmLanguage\" in Java.sublime-package\nThen I change the name into \"Java Server Pages (JSP).tmLanguage\", it works.\nI hope others can see this to not trouble you again with same problem.\nMany thanks! \n. ",
    "Ferdi265": "okay, thanks for the tip with the settings file, works now.\n. ",
    "rostovtsev": "I personally don't need those + and - to maximize/minimize the code. If I understood correctly, it's a mess to do it. \nIs it easier/possible,  just to draw an orange line, from one bracket to the other? It's really important on long codes.\nThank you. \n. Ahh. I see the point. Why you can't just draw a line where the code is but not in the gutter?\n. I understood. \nThanks for your help and work, my friend!\n. Great job!! What is your current code for that so I could try?\n. Understood! Good luck!! ;)\n. Thanks you for you beautiful enhancement and most of all effort. It works alright! I just would like to recommend showing the line at the same indent (right where the brackets are) and not just one line (that now is only very close to the gutter).\nIs there a way to change it's color?\n. Alright, I think it's already amazing but if you could add an option for code styles (Allman, GNU) that have brackets on a new line, so they would be able to have a line right next to brackets and not to the gutter - it would be even more amazing. \nGeany manages it like this:\n\nI don't know if it's possible but if so - it would be ultimately great!!\nThank you for your work!\n. Thank you! Wow! Looks good. I have reinstalled a packge from your repo but there were no visible changes after all. Do I need any new options to active?\nP.S. Sorry for being offline for a while.\n. Ahh, alright. I think it's almost perfect, no really!! :) Thank you!! From my point of view, I would margined the line one more pixel to the right so it goes right into the bracket (and don't appear kindda separate from it).\nI'm sorry, but is there a way to make the line nicely thin without really bold dashes?\n. Alright. I understand. And there is also a limitation for removing that gaps that happen sometimes in the line? Is this possible to make the line contiguous without spaces or it's also limited by Sublime?\n. Got it! Thank you for all!! It's gorgeous!\n. Great job, thanks!!\n. I have finally had time to figure out how to set colors and tweak other settings. Right now, everything is set up and works just perfect but one little detail.\nIt's the - interrupting line:\n\nI have found out, that if you go to the code and add enough tabs (one the line where the gap is) to reach the area of the code, then the line is getting fixed, even though it's just empty.\nI thought, that if you could just imitate the tabs/empty spaces or found other workaround to make those nasty line breaks disappear - BracketHighlighter would be absolute master piece.\nThank you very much for your time and your amazing plugin!!\n. I understood! Actually downside solution would be possible for someone! Thank you very very much!!\n. ",
    "PixelT": "Maybe display this line on the gutter? :)\n. ",
    "DoctorMalboro": "I've found it. Sorry, I'm using ST2. What about turning it off for a single file?\n. ",
    "cachaito": "I don't understand then, user can toggle switch\n quote type in .js, .html or *.css files back and forth (from ' to \") but\nin sass and json is only one way?\n2014-08-08 15:14 GMT+02:00 Isaac Muse notifications@github.com:\n\nYou are correct. This is not a bug. Can you explain why you think it is a\nbug?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/185#issuecomment-51598236\n.\n. Ok, thank You for explaining things, finally I think that in SCSS, SASS\nthere should be support for quotes toggling (like in CSS).\n\nCheers!\n2014-08-09 22:12 GMT+02:00 Isaac Muse notifications@github.com:\n\nOkay, we are talking about quotes, though the statement still stands.\nI will make all my references in regards to JSON since I don't use SASS\nand frankly don't know much about it.\n1. First lets start with the JSON specs. Strings in JSON are double\n   quoted. Single quoted strings are invalid.\n2. Now let's talk about how BH works.\n   1. BH finds brackets in two different ways.\n      1. Regex: searches for opening and closing brackets and then\n         pairs them up with each other\n      2. Scopes and Regex: this is used for things like quotes where\n         it is difficult to tell if you have the opening bracket or the closing\n         because they are the same. With quotes it is tricky because without parsing\n         the whole line (or whole file in Python's case with multiline strings) or\n         understanding the the context of the file's syntax, it can be almost\n         impossible to tell if you are between an opening or closing quote. So BH\n         actually looks at the syntax scope the cursor is in to tell the string\n         regions, and then looks at the beginning and end of the string region to\n         see if it finds single or double quotes.\nWith the description above, you can see why BH won't toggle single quotes\nback to double in JSON. Single quotes are not valid. They are not scoped as\nstrings in the JSON syntax; therefore, BH will not recognize them as quoted\nstrings.\nWithout the scope, the regex becomes a lot more difficult with regex. In\nthe example below, it is easy for you to tell the bar is not inside a\nstring, but for BH that is only looking for something with rules like this: \"open\":\n\"(')\", \"close\": \"(')\" it is very unclear.\n'test' | 'test'\nSingle quote strings are illegal in JSON, so I can't imagine why someone\nwould need to toggle the quote options (unless they just keep accidentally\ntyping them when they meant to use double). But BH will not be able to\nrecognize them unless you find a way to give BH the ability to recognize\ninvalid strings in JSON.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/185#issuecomment-51697155\n.\n. Hi again,\n\nfor Sass syntax I'm using a https://github.com/nathos/sass-textmate-bundle.\nPlease look at steps of toggle quotes in SASS/ SCSS file. BH does highlight\nsingle and double quotes in those files but toggle quores only once.\n. Dummy SASS file attached.\n2014-08-11 18:47 GMT+02:00 Isaac Muse notifications@github.com:\n\nIf there is a problem with the toggle quote bh_plugin, I will fix that,\nbut I can't imagine there being anything SASS specific that would break it.\nGive me an example SASS snippet to test. I don't code in SASS.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/185#issuecomment-51806761\n.\n. Sorry, content of the file:\n\nbody {    background-color: rgba(yellow, 0.5);    color: black;}p {color:\nblack; animation: all 1s ease-in 0; font-size: 5em;\ntransform:rotate(7deg);} p {box-sizing: border-box; opacity: 0.5;\nborder-radius: 90%;}strong {color: red;}b {text-align: right;}object\n{border: 1px solid magenta}footer {    color: red;    &:before {\ncontent: 'some pseudo element string'        display: block;    }}.image\n{    $image: \"../img/gggg.jpeg\";    width: image-width($image);    height:\nimage-height($image);     background: inline-image($image) no-repeat;}\n2014-08-11 19:06 GMT+02:00 Isaac Muse notifications@github.com:\n\nI don't see an attachment. You probably need to embed the text directly in\nthe issue feed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/185#issuecomment-51809174\n. So what does it meaning? I should switch to another Sass syntax package?\n. Ok, I've installed Syntax Highlighting for Sass package and toggle quotes\nis working now. Thank You for pointing out the problem!\nSo what does it meaning? I should switch to another Sass syntax package?\n. \n",
    "dr-falsch": "Oh sorry, I never intented to say that you are lazy!\nOne solution could be to insert spaces before drawing the outline and delete them afterwards. but this is not a very elegant solution...\n. ",
    "rgorel": "@facelessuser Actually I've installed it via Package Control (as I mentioned in the first post). Should I perform any additional actions other than standard Package Control installation flow?\n. @facelessuser After reinstalling Package Control everything works fine. Thanks for your help and for your awesome plugin.\n. ",
    "oroalej": "I was trying to remove this because it is annoying and it block the code. i already edit the setting and change it one by one but still there.. i already spent 2 hours searching for answer.HAHAH.\n\n. ",
    "TheDutchCoder": "No need to get defensive about this...\nYour example is missing brackets, which logically makes it difficult to match against. Mine doesn't, that's why I found it strange that it's not working.\nI understand that it's difficult or simply to cumbersome to make exceptions/lexicons per language, but in my example it would still ideally have to work without exceptions.It is no different from:\n``` php\nif ($foo) {\necho \"foo\";\n}\n```\nThe opening and closing bracket match up nicely, regardless of what's in between them.\nMaybe giving users the option to configure what types of brackets/symbols to match would be a solution?\nI could then configure HTML (or PHP) to only match brackets, as I don't need it for regulars strings anyway (syntax highlighters take care of that).\n. Fair enough, I see your point now and I will give modifying the settings file a go.\nI understand that people saying \"it should be relatively easy\" can sometimes convey as being ignorant and yes it (of course) has to do with not having full knowledge of how your plugin's internals work, but it's usually done from a user's perspective and not so much to tell you \"hey, this is easy to fix, do it already!\".\nMy comment makes sense from a user's point of view, but it might be hard (or impossible) to solve for the developer, which leads to very interesting questions for which this is not the place nor time. :wink:\nAnyways, I'll give it a shot!\nP.S. Believe it or not, but smileys do indeed help :wink: \n. ",
    "arnisjuraga": "This is awesome! Saved my day to find a missing closing \"}\" bracket for mixed PHP + HTML file! \n. ",
    "JeriXNet": "Thanks for reply.\nSo, if I'm using git repo for synchronization sublime profile on different machines, I can add this file to .gitignore?\n. ",
    "mmainz": "I made a pull request that fixes my issue. Tested it on several files and does not seem to break anything. Let me know if you are satisfied with the pull request or whether I should make some further changes.\n. I implemented and tested your suggestions. Seems to work fine, so I updated the pull request.\n. ",
    "j5shi": "When I changed the keybinding to \n{\n    \"keys\": [\"alt+b\", \"alt+p\"],\n    \"command\": \"wrap_brackets\"\n  },\nit works like a charm, so probably some config files with higher priority overwrote the previous key binding.\nAnyway it works now, thank you.\n. ",
    "scottstensland": "Yes,  the use case was c++ templating ... when they are nested it would be good to highlight matching pairs of <  >\n. ",
    "MattSeen": "I second this for TypeScript.\n. Hey @facelessuser sorry if I sounded a bit rude or presumption there. I certain would like to help and probably will try and put a rule together to cover my case. Thanks for the offer of help, I'll see what it looks like and might get back to you soon.\n. ",
    "conundrumer": "bumping because it's common to do stuff like this in Rust: Vec<Rc<RefCell<Box<Trait>>>>\nhere's my take on matching templates/generics:\njson\n{\n    \"name\": \"generic_angle\",\n    \"open\": \"(<)\",\n    \"close\": \"(>)\",\n    \"style\": \"angle\",\n    \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"punctuation.separator\", \"meta.tag\"],\n    \"language_filter\": \"whitelist\",\n    \"language_list\": [\"C++\", \"Java\", \"Rust\", \"TypeScript\"],\n    \"enabled\": true\n}\nI haven't searched/tested for other languages with angle bracket generics but wanted to put this somewhere. ",
    "LeusMaximus": "Sorry. Here is the example \n<div>\n    <audio controls=\"controls\">\n        <source src=\"media/Song-1.mp3\" title=\"First song\" type=\"audio/mp3\">\n        <source src=\"media/Song-2.mp3\" title=\"Second song\" type=\"audio/mp3\">\n        <source src=\"media/Song-3.mp3\" title=\"Third song\" type=\"audio/mp3\">\n    </audio>\n</div>\n. There are several single tags in the html5.\n<source>\n<wbr>\n<keygen>\n<track>\n. ",
    "matthieugomez": "Thanks a lot. Is it possible to activate the highlight when closing a bracket ?\n. Basically the idea is given in these images\n\n\nIn BracketHilighter, the bracket is highlighted only when the cursor is at the interior of the region.\n. That's great! Thanks a lot\n. It seems to work pretty well indeed! You may even want to make it a default setting - I find it very handy.\n. ",
    "bsides": "Very nice answer, thank you very much for the honest reply.\nSublime does have a basic highlighter but I do enjoy the way this plugin works more. Maybe I'll check that out to see how can I make that more this :sweat_smile: \n. ",
    "DavidCheshire": "Thanks for getting back to me so quickly, and I wasn't casting aspersions on BH which is a fine piece of software. I am sure you are right that the problem is with me and how I got my User folder copy of  bh_core.sublime-settings, I had some problems in downloading the file from GitHub so I created a file of the correct name in my Sublime user directory and the copied and pasted the code from the ST3 file on GitHub, so I guess this could be the source of the problem.\nThe problem only affected the opening <p> tags, but all of them, sorry this didn't come over clearly in my first post because I didn't realise that the HTML tag would be acted on rather than printed.\nI'll have another go at downloading the bh_core.sublime-settings file.\nQuestion: I have a problem downloading the bh_core.sublime-settings file directly to my Sublime user folder. I just downloaded it and then dragged it into my user folder, and then I got an error message from Sublime itself saying \"Error trying to parse settings: Expected value in Packages\\User\\bh_core.sublime-settings:5:1\" - does this mean anything to you?\nThanks for your help!\nKind regards - David\n. ```\nHi Isaac,\nYes, sorry I should have let you know, thanks for your help, and\nthanks for BracketHighlighter.\nKind regards - David\nOn 21/11/2014 08:48, Isaac Muse wrote:\nI am assuming you have no more issues as there hasn't been a\n    comment in 14 days.\n  \u2014\n    Reply to this email directly or view\n      it on GitHub.\n```\n. ",
    "cassidyclawson": "I came searching for a solution to this exact same problem. Sad to heard it's not fixable at this time. Consider this a vote of encouragement to find a workaround! :) Thanks for the awesome plugin.\n. ",
    "carrollgt91": "Using  4.0.3 of Vintageous and 2.6.0 of BracketHighlighter, everything seems to be working fine now. \n. ",
    "jasonblalock": "Sure no problem. And thanks for looking into it.\nfile.html.erb\n``` rails\n html tag also showing question mark \n\n\n\nDocument\n\n incorrect code but shows correct do/end highlighting \n  <%= form_for :test do |f %> \n  <% end %>\n should highlight do/end \n  <%= form_for :test do %>\n  <% end %>\n should highlight do/end \n  <%= form_for :test do |f| %>\n  <% end %>\n based on what happens in ruby code, should highlight if/end when the cursor is on if/else/end \n  <% if %>\n  <% else %>\n  <% end %>\n\n\n```\n. Awesome thanks so much for looking into that!\n. Great! Thanks again. I was going to offer to make a PR with the change if it made things easier.\n. ",
    "IGRACH": "Well there is not keybind for that command and settings file says that you need to restart sublime to enable/disable it?\n// Enable high visibility by default when sublime starts up\n    // If sublime is already running and this gets changed,\n    // you will not see any changes (restart requrired to see change)\n    \"high_visibility_enabled_by_default\": false,\n. haha, You are awesome XD , and I just spend 2 hours writing powershell script xD\n. ",
    "ErikVDW": "You're amazing!  Thank you.\n. ",
    "canoeberry": "Thanks for the reply. I am wondering a couple of things:\n- Could you add a bh command which runs another command (on the current view) in such a way that it preserves the order? So it would literally be a command name and args but are run when your timer goes off.\n- Would you consider a setting which allows running the keyboard commands synchronously? It would at least be fun to experiment with.\n- Another option is to differentiate between commands which simply move the cursor from commands that draw the adornments for the current position. It would seem to me that the timer would just be for performing those updates and not tne entirety of the commands. Or do you rely on the adornments to implement some of the motion commands?\nThanks for your response and hope to hear back.\nJP\n. Do you think you will look at this or is it something I should play with on my own? I guess you showed me some pointers in your previous comment. Did you want me to go play?\n. Wow - go to bed and wake up and problem solved! It works like a charm! So much nicer!\nI co-author the emacs plugin sublemacspro. I implemented forward/backward s-expression manually but it has some issues. I think I am going to add an option that uses your package if it's installed to handle the motion over brackets, parens and quotes. I should probably study your code some more. Me thinks you have a better understanding of things than I do.\n. I looked at more of your code today and eventually I found the code which seemed to do the searching and matching. If I am not mistaken (and I probably am) you make a string copy of the entire buffer (or  perhaps a subregion if thresholds are to be honored) and then you use normal python regex matching to find things? If so I am wondering why you don't use the sublime code to find all the instances of brackets, etc., and just avoid the copy altogether? I turned off all threshold at one point and noticed things slowed down a lot and I couldn't imagine why (given my laptop is a super computer compared to just a few years ago) until I saw the code and thought, It might be slow to make complete copies of large buffers. Could that be the reason? I suppose it depends on how often you make the copy ...\nThe way I did it with the sublemacs plugin was to scan one character at a time until I found one sort of bracket or another, and then use the built-in functionality to find the matching one. Unfortunately, that does not work well if you encounter a bracket inside a string, something I somehow managed not to notice until very recently!\n. And I didn't intend for you to do that either! But this is great information if I ever get brave enough. There's a lot more here than I realized.\n. Thanks to both of you for your replies. Like a little kid, these two comments kept me in a fitful sleep last night, excited about the possibilities.\nMy plan until now has been to walk the buffer looking for trigger characters, e.g., brackets or quotes, and then invoke either native sublime functionality or now your functionality to navigate \"to the other side\" of whatever was just encountered. It works better than ever now but I really want it to work properly for all bracket supported items, including HTML tags, Ruby begin/end pairs, etc.\nSo now I am thinking I will implement the s-expression functionality within one of your plugins entirely. I will poke around looking for more information in your docs, but I am now guessing that one of your plugins, when invoked, already has variables for the immediate surrounding, matched \"brackets\" in the left and right instance variables. I can now see the code which is moving beyond the right or the left in that bracketselect plugin (at least I think I see it), so I know what to do for that.\nAt any given time, when invoking my command, I am probably between some matching brackets, but what I need to be able to detect is when I am approaching another pair inside the initial pair. It looks like I might need to use the view setting stuff you pointed me at. Perhaps I will initialize the code from those settings by searching for the closest matched tag  in the direction and I am moving, and all will just fall into place from that.\nThanks for your help. I will report back if I have any more questions.. Well, not having much luck. Here's a test case. The cursor is at the \"(\", i.e., between the \"n\" and the \"(\":\nsome_function(\"With a string argument\")\n\n\nUnless no_outside_adjacent=False, the plugin command will not actually run when the cursor is just before the \"(\". When it's false, the left and right values are the two parens and all is well.\nHowever, if I put the cursor just before the first double-quote character, left and right are still the two parens. This is not right for me because I want it to be the quotes.\n\nSo I need False to be set in order for the command to run just outside the brackets, but then I lose the ability/fine-control to have it use the quotes when just outside the quotes. In other words, if we allow outside adjacent, we lose the ability to handle the situation when two open brackets of any type are right next to each other.\nSo my status is: I can definitely implement #1. I do not think I can implement #3 because the information in the view seems just to mirror the left/right values anyway. (I admit I have seen brackets that were different from left/right but I can't reproduce that at the moment for some reason.)  I don't think the plugin API allows me to move the cursor around in the plugin and having the brackets recalculated from that new position so that I can move around some more with the new information. Meanwhile, I think I can do #2 if I just learn the way to specify brackets, hopefully without clobbering the existing brackets. I saw a section on that but it wasn't crystal clear where to define things. (I am notoriously slow on the uptake though ...)\nAm I missing something?. Thanks again.\nI think it's time for me to look at the bh_core code and grok how it all works.. I was able to add a definition for rubybackticks if it's not already in the settings, and that works nicely. Thanks for the tip.\nI almost asked some generic questions about how this is all supposed to work, but then I remembered this thread as a result of the first time I contacted facelessuser.\nOh well. I think I got most of what I wanted. My middle ideas seems impossible and due to buffer copying, I am afraid it might never perform well enough. Perhaps a buffer window cache would be an OK approach to making it perform better, actually. Not sure about that.. Oops - I misspoke when I said \"middle idea\" which was bullet 2 in my original request.\nA general purpose API is what I really want. But short of that, a way to ask for the nearest bracket end to me that I am not current inside.\nSo for example, if I am\ndef this_is_a_ruby_function(with, some, arguments)\n    ....\nend\n\nand my cursor is just after \"def\", it would be great if I could know\n1. what brackets I am currently in (I think the answer is def/end and that is currently supplied as \"left\" and \"right\")\n2. what are the closest bracket pairs in both directions that I am not inside, which in this case would be the \"(\" and \")\" of the function call. I would also want that information looking backwards in the buffer. I think it is the case that you would not have to  look beyond the boundaries of the bracket pair we're already inside, which is why the answer in this case is just the forward looking \"(\", \")\" pair.\nThis would allow me to walk through the buffer doing various things, but then notice when I have reached a bracket in one direction or the other, in which case I would jump to the other side of that pair.\n. Regarding the rubybacktick rule, I just used the one supplied by @r-stein and it worked perfectly as far as I could tell with some basic testing. So that might be all you need.\nI think that rule would also apply to shell scripts and perhaps many others (perl even?). Maybe not always look ahead. Maybe just do it if an argument is supplied. The interesting thing is, you probably have already encountered it while finding the matching pair that you automatically supply to the plugin.\nStill catching up on your previous message about favoring left vs. favoring right.\nWas I right that the plugin will not be invoked if you are not within brackets and adjacent is disallowed?. I am unclear on the values for the language settings. I tried adding \"Shell Script (Bash)\" to the language_list value as shown above, but that is not working. \"Shell Script (Bash)\" is what is displayed by the editor in the lower right of the window. Meanwhile, if I try to set syntax-specific settings it says something about \"Unix Shell Generic\".\nI wanted to supply you with the two most common backtick cases I know of.. Regarding favoring left or right, the answer to that is No :-). I favor right when moving in the forward direction, and I favor left when moving in the backward direction.\nNow that would be a great option to add to the plugin call, instead of the adjacent option.. Here is another example:\nself.call_some_function(\"with a string as an argument\")\n\nIf the cursor is just to the left of the \"(\" I want to use the parens. If the cursor is just after the \"(\" and sitting next to the double quote, I want to use the string boundaries.\nBut that is in the forward direction. In the backward direction, if the cursor is sitting just after the \")\" I want it to use the parens as the bracket, but if I am just before the double quote, I want it to use the string.\nIs there any chance to add a favor=\"left|right\" option, which by its very definition means it will allow you to be NEXT to the bracket rather than inside it? If you think that's reasonable and feasible, I will consider trying to make that work myself (if you can give me a gentle push in the right direction).. Luckily for me, I always want to favor in one direction or the other. Isn't that good enough?\n. I have the scope for bash. So how do I find the name of the syntax file? I tried editing syntax-specific settings which gave me the unix shell generic string but that seemed not to work either.. I am not sure how your stuff works, of course. But I am under the impression that you have some knowledge of where the currently applicable (based on the value of the selections) brackets are at all times. The UI displays it, you know it.\nIn the case of being between the () and [] below:\n()[]\n\nyou seem to know about both, and have favored with a darker underline the () over the [].\nIn the case of\nmethod(\"string_argument\")\n\nyou seem aware of just the parens when just before the \"(\" and just after the \")\" and you seem aware of both the parens and the string if you're just before the \")\" but not if you're just after the \"(\".\nSo that's the one thing which seems problematic at this point. Otherwise you already seem to have all the information you need, and you just need to be told which to favor.\nLet me know what you decide. Things are already a lot better for me than they were before. In the meantime, I will keep trying to get the backtick working for bash shell. Once that works, should I issue a pull request?\n. Now that's funny. I tried turning off built-in brackets a long time ago and again recently, but that caused some of my other plugin code to stop working. Now that I have switched to your plugin for navigating over brackets and turned off the built-in matching, I only see one set of underlines. I seriously could never understand what you were doing highlighting multiple things.\nI wonder if you can store all the matched brackets you encounter while calculating the actual left and right values? I am not sure whether you keep track of existing balanced pairs as you go, but I am pretty sure that what I want is typically somewhere inside what you have already calculated is the left and right values. That's what I figured I would find in the view settings you mentioned a earlier in this thread.. I got the syntax working for shell and ruby. It was the last component of the syntax name that I needed, which in this case was Unix-Shell-Generic.\nI am doing this and it works.\nI think I will change the name to backticks, and I think style=\"single_quote\" is better than default.\nShall I do a pull request and place this into the bh_core.sublime_settings file?\nscope_brackets_settings.append({\n                \"name\": \"rubybackticks\",\n                \"open\": \"(`)\",\n                \"close\": \"(`)\",\n                \"style\": \"single_quote\",\n                \"scopes\": [\"string.interpolated.ruby\", \"string.interpolated.backtick.shell\"],\n                \"language_filter\": \"whitelist\",\n                \"language_list\": [\"Ruby\", \"Shell-Unix-Generic\"],\n                \"sub_bracket_search\": True\n            }). Hmmm - I think I did the pull request right. Let me know what you think.. ",
    "rlex": "I mean that indicator icon is not centered against line number.\nSorry for my english.\n. Maybe you can intoduce some padding variable so users can adjust position of brackets in gutter, or that's not possible?\n. ST3, build 3065\n. ",
    "denis-sokolov": "It is acceptable, of course.\nI am trying to suggest an improved default for better experience for other developers.\nAs I tried to show, it is accepted in PHP generally to not use the closing bracket.\nAs such it is likely to serve a bigger majority if it was disabled by default in PHP files.\nThe final call is yours, of course.\n. The PR is updated with a new commit!\n. Great, thanks.\n. ",
    "alexgirdler": "To replicate install Vintageous and BracketHighlighter, then place cursor inside brackets to show gutter bracket marks. Next enter normal mode and move cursor inside of an area that should cause gutter to update(new code block/string) and gutter will not update.\nAgain because of my lack of experience with python I can't really grok what Vintageous is doing in its code but it does intercept all keys by binding them to a window command called \"send_key\" which gets intercepted by Vintageous somewhere? and I am assuming doesn't actually manipulate the cursor's position until it goes into insert mode. This assumption is based off the fact that BracketHighlighter works with the built in Vintage plugin in ST3.\nSorry for the late response been busy with finals. If you need more information please just let me know.\nArch Linux 3.17.3 \nST3 3065\n. ",
    "kgizdov": "I understand now. The threshold starts at the cursor and goes both ways. In that case, since you are already dynamically reallocating parts of the threshold, would it make sense to reallocated extra chars to the back as soon as you find the opening bracket? I think that would fix it and improve performance.\n. OK, nevermind then. Thanks and keep up the good work!\n. It was working before and I haven't touched it until I started seeing the errors. Deleting and recreating the file, seems to have fixed it. Maybe something got corrupted as you said.\nDidn't know about the command palette option. This toggle per case is much better than having a huge threshold all the time. I will start using that when needed instead. Thanks for the help.\n. ",
    "techdev5521": "Is there a way to disable BH using the gutter when the brackets are on the same line?\n. ",
    "pkmital": "Follow up, how can I entirely disable the gutter icons for BracketHighlighter so that another plugin may use the gutter?\n. ",
    "StreetStrider": "Hello.\nIs it possible to customize highlight bar width? I want it to be 1px instead of 2px which is too thick especially in the time I'm having very bright color. I've tried to use alpha-transparent color, but this is resulted in poor bracket icons visibility (since they use the same color rule).\nAccodring to documentation I can't customize it, but is this a limitation of ST API? Should I expect improvements in this part of styling? Thanks.\n. ",
    "joemaller": "So far as I know, it started today with build 3067. I installed that and my YAML files started hanging. I've had BracketHighlighter installed forever...\nbtw, I tested on 10.10.2 and 10.9.5\n. fyi, can't ask for a better source: \n\nthere has indeed been a change to selector matching at EOF: previously it would return the default scope, whereas now it returns whatever scope is used by the last character. This improves auto complete behavior when typing at EOF, and is more in line with general expectations, e.g., consider a Python file consisting of nothing but the 3 characters '#foo': the scope returned when querying at EOF now indicates that EOF is in a comment, whereas before it would just indicate 'source.python'.\n\nhttp://www.sublimetext.com/forum/viewtopic.php?f=2&t=17470&start=40#p65416\n. Awesome job turning this around so quickly @facelessuser, thank you!\n. ",
    "ingro": "I still have problem in javascript files, as soon as I open a bracket to write a string ST3 hangs :/\n. Sorry, now I've removed and reinstalled the plugin and everything is working again. I suppose the auto-update didn't work the first time.\nThanks and sorry for bothering!\n. ",
    "joewilliams": "@facelessuser correct, afaik there isn't a syntax highlighter for TLA. Is it possible to toggle BH on for plain text files?\n. Thanks!\n. ",
    "arianf": "@facelessuser thank you, it would be interesting to see your configuration file.\n. @facelessuser I added your personal configurations into the docs to save you some time. Here: https://github.com/facelessuser/BracketHighlighter/pull/225\n. ",
    "reagle": "I'm new to trying BH and I'm using ST3 3070. I just installed BH from package control and it is very nifty but isn't working for single and double quotes. Is there debug info I can provide to help with this?\n. I suspect this is because I'm a newbie. In python files I will get the buffer icon within a quote but ctrl-m and ctrl-shift-m don't work for moving/selection within the quotes. In markdown, I don't get the buffer icon either.\n. That's too bad, but reading the \"Additional Info\" on https://github.com/int3h/SublimeSelectQuoted (and trying it) I think I understand now. Thank you for the quick help.\n. Okay, I'll take that as a non-trivial problem not soon to be addressed. At least I know it's not because I was missing a simple configuration option. I'll close and perhaps if others have the same question they will find this. Thanks for the quick response!\n. ",
    "Enteleform": "Yes, I've also now experienced it with non-BH color settings after a few hours of tweaking theme/style related settings.  Must be my color preview plugin or something else...\nIs it possible to change the text & border colors when high visibility is enabled?  I've tried using:\nfontStyle\n\nforeground\n#FE0101\nin a variety of nested  arrangements and have been unable to get it to work. Also blew out my theme a few times... :-X\n. Also, I found a thread where you mentioned the ST API:\nhttps://www.sublimetext.com/forum/viewtopic.php?f=5&t=3327&start=10\n& saw that it mentions \"sublime.HIDE_ON_MINIMAP\"\nis there a way to enable BH on the Minimap?\n. The Minimap could be useful for searching within particular regions, & perhaps other functions as well.\nUsage example here:\nhttps://lh6.googleusercontent.com/hxsIHJ4cl9GHZY4SOV7Pic1F1aRF9hW5khoBatMFD6I=w0-h0\n. Nice!  Awesome feature, thanks for adding it!\nWorks great with multiple selections also, useful for quickly jumping between related bracket sections via the minimap.\n:+1: \n. Haven't looked much into the new hover & phantoms features yet. What hover functionality do you have in BracketHighlighter?\nThe in-line color phantoms in ColorHelper are pretty awesome \ud83d\ude00. ",
    "eorroe": "What if you only scan mismatched in the scopes. Because programmers are likely to mismatch a bracket only where there current scope is.\n. Ok using BracketHighlighter the brackets are only highlighted depending on where my cursor is. So instead of searching the whole file for bracketMismatch, only search the scope of where my cursor is for bracketMismatch?\nYet seeing how BracketGuard works you'll probably have to go up the parent scope to find the mismatch, because I believe when there's a mismatch no scope is found.\n. Ok. I don't understand how sublime plugins work. But just a thought:\ncan't you like say copy bracketGuard's function and have your package run both?\nInstead of having to mess with your original code?\n. Oh Ok thanks Please let me know through here or whenever you update pop it up on my sublime text. Thanks. \nOh and just found this package (just incase you haven't seen it): https://packagecontrol.io/packages/EasyMotion\nReally cool.\n. Ok thanks.\n. ",
    "N4M3Z": "Restarting Sublime did not fix the issue on my end given the current version of BracketHighlighter. I will wait for the update from Package Control and let you know. As far as I can tell, functionality of the plugin is not affected.\n. ST3, weird. How can I tell the revision/branch?\n. Well, the issue did not reappear at least.\n. ",
    "FichteFoll": "You are correct, it works with the default Python syntax. I'll need to tweak Python Improved then.\n. It appears to me the issue is actually within BH since the scope names are exactly identical.\nI first assumed that BH restricts Python quote highlighting to the \"Python\" syntax only (according to bh_core.sublime-settings), but adding \"PythonImproved\" to the language_list didn't help.\n(may I suggest using scope name (source.python) instead for this?)\nAny other ideas?\nI'm using the version of my fork in case you want to try for yourself.\nNote: It also only highlights the first and last quoting character and not the entire three.\n. ... Whops. That's actually what I did as well, but I only added it to the single quote variant and not to the double quote one while testing it in a double triple quoted string. Thanks I guess.\n(And here I was trying to get behind the source code.)\nSo, back to the underlying problem. Do you think using a base-scope list is a better idea than specifying the the syntax names? That would be a more general and less specific approach.\nAlso, is there a better way currently than to copy the entire scope_brackets list when you want to override just two language_list filters? Since it's currently saved as a list it's not easy to determine which one you'd want to override. If it was a dictionary with the \"name\" as key it would be easier.\n. By \"base-scope\" I mean something like this. It could then be used with the sublime.match_selector API and matched agains a language_selector like source.python. Since this supports scope selectors, it would also allow negative selectors like - text.plain so language_filter is not needed.\nNot a huge issue ofc, but sounds like a good idea to me.\n\nthere is a way to manage rules withoug copying the entire list\n\nVery nice. I actually remember seeing this not too long ago but I didn't actually read it, heh.\nEdit: You should mention this in the settings file, in the spirit of the \"Just in Time\" theory.\n. For some reason, running the \"Toggle String Bracket Escape Mode\" command only displays text about the current mode in the status bar, but doesn't actually change behavior. I tested with the text in https://github.com/SublimeText/AAAPackageDev/issues/61 and the \"Sublime Text Syntax Def (YAML)\" syntax. Neither string nor regex mode seem to help at all. I don't think there is anything else I need to do?\n. Well, the reason why I used constant.character.escape is that in almost no situation would you ever want to bracket-match escaped brackets, and the constant.character.escape scope is exactly that. \nI fail to see how adding \"meta.value.yaml-tmlanguage -constant.character.escape.general.regexp\" to scope_exclude_exceptions does anything since that should not be excluded in the first place.\n. > Did you look at regex in quoted strings in your syntax? I did.\nCan you give me an example please? I still can't see it.\n\nI make no assumptions about escapes. What about some embedded language in another languages string? Escaped brackets are more of a regex thing, so why not limit the expectation to that?\n\nSo, the current state is: change the exclude scope selector to meta.value.yaml-tmlanguage constant.character.escape to be more specific about the syntax used.\nAlternatively, what can I do to make regex mode work in this syntax?\n. > Quoted regex has no bracket recognition. This is due to how it is scoped.\nAh, you mean the real brackets. I was a bit confused about your usage of \"brackets\" and \"sub-brackets\" earlier, which is why I didn't think of this being the real brackets. Yes, I am aware of the issue because I decided to mark brackets as strings for different highlighting purposes. I do not think it's a problem if this is not highlighted because the syntax highlighting makes it pretty obvious where the bounaries are. I suppose it's better for consistency.\n. Updated.\nI would have split the other lists into multiple lines, but I wanted to keep the changes at a minimum.\n. Alright, docs were really helpful with that.  :+1: Works like a charm now.\n\nI'll apologize for my following tidbits in advance, but they are really well-intentioned.\nFollowup question: Is there anything for handling the middle parts of an if .. elseif .. else .. end block? Referring to elseif and else here. You certainly don't seem to handle them for php or ruby, which are one of the few cases where this would be an issue.\nFollowup bug: When specifying a plugin_library that does not exist, the following is printed to the console: BracketHighlighter: 'tuple' object has no attribute 'splitlines'. It's kind of ... intransparent.\nFollowup suggestion: extend BracketRegion class to have a text attribute, since bfr[first.begin:first.end] is a really common expression in plugins.  Downside is that you kind of hard-code something view-specific.\nOr better rename it to Bracket and include the bfr view context to it, because when will you ever use this on something different than bfr? With this, it could also just be a property that performs self.bfr[self.begin:self.end] on the fly.\nFollowup minor things concerning the docs:\n- Your description of find_in_sub_search is borked: http://facelessuser.github.io/BracketHighlighter/customize/#configuring-brackets-rules\n- I think you should mention the case-insensitivity earlier than here.\n- The \"validate\" code is outdated, but still valid.\n- Suggestion: Allow multiple plugins to be specified, and rename erlangcase.py to just lowercase.py. That way I could utilize the lowercase check for Lua too without awkwardly including it via from .erlangcase import validate (not gonna do that actually).\n- Alternative suggestion: param for case-sensitive matching of brackets.\n\nI can open separate issues if you want me to.\n. Answers are suitable. Just a few clarifications.\nre BracketRegion section: I edited that, so you might want to check out the changes too.\nre importing: The name erlangcase.py just threw me off, kind of. It screams \"I am context-sensitive\" to me, so importing it just for the case-sensitivity seemed too insecure to me. I'm fine with importing from something named lowercase.py.\nI don't really see an advantage for using bh_plugin.ImportModule over just relative-importing what I need.\nEdit: I suppose the copyright notice I copy-pasted is ... wrong. You obviously can't have copyright on that starting 2013 if it was only added in 2015. I'm not a fan of per-file license/copyright plates anyway, if they are identical to the project's.\n. Yes, default Lua.. Yeah, I was the one who added proper bracket support to Lua in the first place. I could take a look, but I also believe my time is better spent elsewhere.. As a workaround idea, how about ignoring while and for and just putting the markers on their do that will eventually follow? Not a perfect solution, obviously, but it will work with the current tech.. When I (or someone else) take the time to rework the Lua syntax, this is most likely something that would happen. However, don't put your money on that happening any time soon.. https://github.com/sublimehq/Packages/blob/289782ff2e4cb58de171579c7fc86fe00d280619/HTML/HTML.sublime-syntax#L13\nyaml\nattribute_char: (?:[^ \"'>/=\\x00-\\x1f\\x7f-\\x9f])\nMy point for supporting Vue is that it's not new syntax unlike some other templating languages I've seen where you need to track parens for example. It just uses an unusual character (two, actually, since : is also unusual afaik, but : is handled by BH).. Yes, I believe @ is the only other attribute character used by Vue and is short for v-on:, just like a leading : is short for v-bind:. Only for attribute names.. ",
    "ay18": "Resolved by looking at your Aprosopo theme. Placed snippet between \"settings\" <array> tags and reloaded the theme.\n. ",
    "crumpley": "Hi Isaac,\nThanks for your quick response. I'll try to explain more clearly, and I've\nincluded a couple of screenshots.\nIn the first screenshot, AfterFind.jpg, I have just searched for a single\nleft brace. The first one found is highlighted in yellow. You'll notice\nthat there is nothing showing in left gutter to indicate any matching\nbracket.\nIn the second screenshot, AfterClicking.jpg, all I did was click the mouse\non the found character. You can see that the left gutter now shows a pair\nof braces indicating matches.\nI want this matching information to show automatically for each new found\nbrace (each time I click the Find button). This way I can go through a file\nand quickly see this information so I can correct any mismatched braces (or\nbrackets or parentheses).\nIs that clearer? Can this be done?\nThanks,\nGlenn\nOn Thu, Mar 26, 2015 at 3:05 PM, Isaac Muse notifications@github.com\nwrote:\n\nI don't think I understand what you are saying...can you elaborate and/or\npost a screenshot of what you mean?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/237#issuecomment-86673184\n.\n. Here are the screenshots refereced in  my earlier commenbt.\n\n\n. \n",
    "rexdf": "I have make a pull request. It just contains all you write above.\nHow can you make gutter icon to be the most outside match? \n. \n. Your gutter is () but mine is []\n. ",
    "jproffitt3ge": "I apparently installed BracketHighlighter manually so I was still using an old version from before the EOF patch. I updated it and the issue was of course fixed. My apologies.\n. ",
    "xdmiodz": "I experienced the issue in much simpler situations. Here the screenshot of what I mean\n\nOn this screenshot BH works well - there are the underscores under paired brackets, the bracket mark on the right near the line numbers, etc. But under some conditions BH stops working on the same file. Unfortunately (or luckily) BH didn't encounter this conditions the time I took the screenshot, but I provide it as soon as I notice the issue again.\n. After your note about interfering of plugins I think I found what the issue is. \nI have a git plugin to see diff in sublime. It opens another tab in sublime and shows everything I changed since the last commit.\nSo BH crashes while trying to parse the pane. Logs are the following:\nTraceback (most recent call last):\n  File \"bh_core in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 858, in payload\n  File \"bh_core in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 380, in match\n  File \"bh_core in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 446, in find_matches\n  File \"bh_core in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 567, in match_brackets\n  File \"bh_search in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 110, in new_bracket_search\n  File \"bh_search in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 232, in __init__\n  File \"bh_search in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 373, in findall\n  File \"bh_search in /Users/dmitry/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 273, in is_illegal_scope\nIndexError: list index out of range\nThe result is on screenshot below - no underscores, no marks.\n\n. Here it is\nhttps://github.com/kemayo/sublime-text-git\nThe command that I use to see diff is \"Git: Diff All Files\"\n. You are right, looks like it's my fault. I had custom angle brackets in bh_core, like this\n{\n    \"brackets\":\n    [\n  // Angle\n        {\n            \"name\": \"angle\",\n            \"open\": \"(<)(?!\\\\?)\",\n            \"close\": \"(?<!\\\\?)(>)\",\n            \"style\": \"angle\",\n            \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\", \"source.ruby.rails.embedded.html\", \"source.ruby.embedded.html\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\", \"C++\"],\n            \"plugin_library\": \"bh_modules.tags\",\n            \"enabled\": true\n        }\n    ]\n}\nI've copied it from the default settings and and added C++ to language_list and this was crashing BH.\nSo I checked the manuals once again and replaced my custom configuration with the following:\n{\n    \"user_brackets\":\n    [\n  // Angle\n        {\n            \"name\": \"angle\",\n            \"language_list\": [\"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\", \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\", \"C++\"]\n        }\n    ]\n}\nand now BH works like a charm. \nThanks for support and sorry for bothering you!\n. ",
    "nkanellopoulos": "This might be useful for debugging:\njson\n//----------------\n//All Key Mappings\n//----------------\n [\"]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\"}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"not_regex_contains\", \"operand\": \"[\\\"a-zA-Z0-9_]$\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": false}]\n   move                                     Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\"\"}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\"}]\n [#]\n   insert_snippet                           Ruby                  [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"(string.quoted.double.ruby | string.interpolated.ruby) - string source\"}]\n [']\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\"}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"not_regex_contains\", \"operand\": \"['a-zA-Z0-9_]$\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": false}]\n   move                                     Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^'\"}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\"}]\n [(]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": false}]\n [)]\n   move                                     Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\"}]\n [/]\n   close_tag                                Default               [{\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"(text.html, text.xml) - string - comment\"}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_match\", \"operand\": \".*<$\"}, {\"key\": \"setting.auto_close_tags\"}]\n [:]\n   insert_snippet                           CSS                   [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"source.css - meta.selector.css\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\}|$)\"}]\n [;]\n   move                                     CSS                   [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"source.css - meta.selector.css\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^;\"}]\n [[]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": false}]\n []]\n   move                                     Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\"}]\n [alt+ctrl+down]\n   scroll_lines                             Default               \n [alt+ctrl+enter]\n   replace_all                              Default               [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n [alt+ctrl+h]\n   dash_doc                                 DashDoc               \n [alt+ctrl+left]\n   move                                     Default               \n [alt+ctrl+right]\n   move                                     Default               \n [alt+ctrl+shift+left]\n   move                                     Default               \n [alt+ctrl+shift+right]\n   move                                     Default               \n [alt+ctrl+super+down]\n   bh_key                                   User                  \n [alt+ctrl+super+e]\n   bh_toggle_enable                         User                  \n [alt+ctrl+super+s]\n   bh_key                                   User                  \n [alt+ctrl+super+t]\n   bh_key                                   User                  \n [alt+ctrl+super+up]\n   bh_key                                   User                  \n [alt+ctrl+super+v]\n   bh_toggle_high_visibility                User                  \n [alt+ctrl+up]\n   scroll_lines                             Default               \n [alt+enter]\n   find_all                                 Default               [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n   find_all                                 Default               [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n   find_all                                 Default               [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n [alt+f2]\n   select_all_bookmarks                     Default               \n   context_menu                             Default               \n [alt+shift+super+2]\n   set_layout                               Default               \n [alt+shift+super+3]\n   set_layout                               Default               \n [alt+shift+super+g]\n   find_under_prev                          Default               \n [alt+shift+super+n]\n   advanced_new_file_new                    AdvancedNewFile       \n [alt+super+.]\n   close_tag                                Default               \n [alt+super+1]\n   set_layout                               Default               \n [alt+super+2]\n   set_layout                               Default               \n [alt+super+3]\n   set_layout                               Default               \n [alt+super+4]\n   set_layout                               Default               \n [alt+super+5]\n   set_layout                               Default               \n [alt+super+[]\n   fold                                     Default               \n [alt+super+]]\n   unfold                                   Default               \n [alt+super+a]\n   toggle_preserve_case                     Default               [{\"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true}]\n [alt+super+c]\n   toggle_case_sensitive                    Default               [{\"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true}]\n [alt+super+down]\n   goto_definition                          Default               \n [alt+super+e]\n   replace_next                             Default               \n [alt+super+f]\n   show_panel                               Default               \n [alt+super+forward_slash]\n   toggle_comment                           Default               \n [alt+super+g]\n   find_under                               Default               \n [alt+super+left]\n   prev_view                                Default               \n [alt+super+n]\n   advanced_new_file_new                    AdvancedNewFile       \n [alt+super+o]\n   toggle_overwrite                         Default               \n [alt+super+p]\n   show_scope_name                          Default               \n [alt+super+q]\n   wrap_lines                               Default               \n [alt+super+r]\n   toggle_regex                             Default               [{\"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true}]\n [alt+super+right]\n   next_view                                Default               \n [alt+super+s]\n   save_all                                 Default               \n [alt+super+up]\n   switch_file                              Default               \n [alt+super+w]\n   toggle_whole_word                        Default               [{\"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true}]\n [backspace]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\"$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\"\"}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\"}]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"'$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^'\"}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\"}, {\"key\": \"eol_selector\", \"match_all\": true, \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\"}]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\\($\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\"}]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\\[$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\"}]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\"}]\n   run_macro_file                           CSS                   [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"source.css - meta.selector.css\"}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \":$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^;\"}]\n [ctrl+0]\n   focus_side_bar                           Default               \n [ctrl+1]\n   focus_group                              Default               \n [ctrl+2]\n   focus_group                              Default               \n [ctrl+3]\n   focus_group                              Default               \n [ctrl+4]\n   focus_group                              Default               \n [ctrl+5]\n   focus_group                              Default               \n [ctrl+6]\n   focus_group                              Default               \n [ctrl+7]\n   focus_group                              Default               \n [ctrl+8]\n   focus_group                              Default               \n [ctrl+9]\n   focus_group                              Default               \n [ctrl+backquote]\n   show_panel                               Default               \n [ctrl+backspace]\n   delete_word                              Default               \n [ctrl+c]\n   exec                                     Default               \n [ctrl+delete]\n   delete_word                              Default               \n [ctrl+f5]\n   sort_lines                               Default               \n [ctrl+f6]\n   next_misspelling                         Default               \n [ctrl+g]\n   show_overlay                             Default               \n [ctrl+h]\n   dash_doc                                 DashDoc               \n [ctrl+k]\n   run_macro_file                           Default               \n [ctrl+l]\n   show_at_center                           Default               \n [ctrl+left]\n   move                                     Default               \n [ctrl+m]\n   move_to                                  Default               \n [ctrl+minus]\n   jump_back                                Default               \n [ctrl+o]\n   insert_snippet                           Default               \n [ctrl+q]\n   toggle_record_macro                      Default               \n [ctrl+right]\n   move                                     Default               \n [ctrl+shift+1]\n   move_to_group                            Default               \n [ctrl+shift+2]\n   move_to_group                            Default               \n [ctrl+shift+3]\n   move_to_group                            Default               \n [ctrl+shift+4]\n   move_to_group                            Default               \n [ctrl+shift+5]\n   move_to_group                            Default               \n [ctrl+shift+6]\n   move_to_group                            Default               \n [ctrl+shift+7]\n   move_to_group                            Default               \n [ctrl+shift+8]\n   move_to_group                            Default               \n [ctrl+shift+9]\n   move_to_group                            Default               \n [ctrl+shift+down]\n   select_lines                             Default               \n [ctrl+shift+f6]\n   prev_misspelling                         Default               \n [ctrl+shift+k]\n   run_macro_file                           Default               \n [ctrl+shift+left]\n   move                                     Default               \n [ctrl+shift+m]\n   expand_selection                         Default               \n [ctrl+shift+minus]\n   jump_forward                             Default               \n [ctrl+shift+p]\n   show_scope_name                          Default               \n [ctrl+shift+q]\n   run_macro                                Default               \n [ctrl+shift+right]\n   move                                     Default               \n [ctrl+shift+super+d]\n   noop                                     Default               \n [ctrl+shift+super+f]\n   toggle_distraction_free                  Default               \n [ctrl+shift+tab]\n   prev_view_in_stack                       Default               \n [ctrl+shift+up]\n   select_lines                             Default               \n [ctrl+shift+w]\n   insert_snippet                           Default               \n [ctrl+space]\n   auto_complete                            Default               \n   replace_completion_with_auto_complete    Default               [{\"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\"}, {\"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": false}, {\"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true}]\n [ctrl+super+d]\n   noop                                     Default               \n [ctrl+super+down]\n   swap_line_down                           Default               \n   nop                                      User                  \n [ctrl+super+f]\n   toggle_full_screen                       Default               \n [ctrl+super+g]\n   find_all_under                           Default               \n [ctrl+super+p]\n   prompt_select_workspace                  Default               \n [ctrl+super+up]\n   swap_line_up                             Default               \n   nop                                      User                  \n [ctrl+t]\n   transpose                                Default               \n [ctrl+tab]\n   next_view_in_stack                       Default               \n [ctrl+y]\n   yank                                     Default               \n [enter]\n   commit_completion                        Default               [{\"key\": \"auto_complete_visible\"}, {\"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false}]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"meta.scope.between-tag-pair\"}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}]\n   find_next                                Default               [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n   find_next                                Default               [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n   hide_panel                               Default               [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n [escape]\n   single_selection                         Default               [{\"key\": \"num_selections\", \"operator\": \"not_equal\", \"operand\": 1}]\n   clear_fields                             Default               [{\"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true}]\n   clear_fields                             Default               [{\"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true}]\n   hide_panel                               Default               [{\"key\": \"panel_visible\", \"operator\": \"equal\", \"operand\": true}]\n   hide_overlay                             Default               [{\"key\": \"overlay_visible\", \"operator\": \"equal\", \"operand\": true}]\n   hide_popup                               Default               [{\"key\": \"popup_visible\", \"operator\": \"equal\", \"operand\": true}]\n   hide_auto_complete                       Default               [{\"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": true}]\n [f12]\n   goto_definition                          Default               \n [f2]\n   next_bookmark                            Default               \n [f4]\n   next_result                              Default               \n [f5]\n   sort_lines                               Default               \n [f6]\n   toggle_setting                           Default               \n [f7]\n   build                                    Default               \n [shift+enter]\n   run_macro_file                           Default               [{\"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selector\", \"match_all\": true, \"operator\": \"equal\", \"operand\": \"meta.scope.between-tag-pair\"}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}]\n   find_prev                                Default               [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n   find_prev                                Default               [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n   find_prev                                Default               [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n [shift+f2]\n   prev_bookmark                            Default               \n [shift+f4]\n   prev_result                              Default               \n [shift+super+[]\n   prev_view                                Default               \n [shift+super+]]\n   next_view                                Default               \n [shift+super+a]\n   expand_selection                         Default               \n [shift+super+b]\n   build                                    Default               \n [shift+super+d]\n   duplicate_line                           Default               \n [shift+super+e]\n   slurp_replace_string                     Default               \n [shift+super+enter]\n   run_macro_file                           Default               \n [shift+super+f]\n   show_panel                               Default               \n [shift+super+f2]\n   clear_bookmarks                          Default               \n [shift+super+g]\n   find_prev                                Default               \n [shift+super+i]\n   show_panel                               Default               \n [shift+super+j]\n   expand_selection                         Default               \n [shift+super+l]\n   split_selection_into_lines               Default               \n [shift+super+n]\n   new_window                               Default               \n [shift+super+p]\n   show_overlay                             Default               \n [shift+super+r]\n   goto_symbol_in_project                   Default               \n [shift+super+s]\n   prompt_save_as                           Default               \n [shift+super+space]\n   expand_selection                         Default               \n [shift+super+t]\n   reopen_last_file                         Default               \n [shift+super+u]\n   soft_redo                                Default               \n [shift+super+v]\n   paste_and_indent                         Default               \n [shift+super+w]\n   close_window                             Default               \n [shift+super+z]\n   redo                                     Default               \n [shift+tab]\n   insert                                   Default               \n   unindent                                 Default               [{\"key\": \"setting.shift_tab_unindent\", \"operator\": \"equal\", \"operand\": true}]\n   unindent                                 Default               [{\"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^[\\t ]*\"}]\n   unindent                                 Default               [{\"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\"}]\n   prev_field                               Default               [{\"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true}]\n [super+,]\n   open_file                                Default               \n [super+0]\n   select_by_index                          Default               \n [super+1]\n   select_by_index                          Default               \n [super+2]\n   select_by_index                          Default               \n [super+3]\n   select_by_index                          Default               \n [super+4]\n   select_by_index                          Default               \n [super+5]\n   select_by_index                          Default               \n [super+6]\n   select_by_index                          Default               \n [super+7]\n   select_by_index                          Default               \n [super+8]\n   select_by_index                          Default               \n [super+9]\n   select_by_index                          Default               \n [super+[]\n   unindent                                 Default               \n [super+]]\n   indent                                   Default               \n [super+a]\n   select_all                               Default               \n [super+b]\n   build                                    Default               \n [super+backspace]\n   run_macro_file                           Default               \n [super+c]\n   copy                                     Default               \n [super+d]\n   find_under_expand                        Default               \n [super+delete]\n   run_macro_file                           Default               \n [super+e]\n   slurp_find_string                        Default               \n [super+enter]\n   run_macro_file                           Default               \n [super+equals]\n   increase_font_size                       Default               \n [super+f]\n   show_panel                               Default               \n [super+f2]\n   toggle_bookmark                          Default               \n [super+forward_slash]\n   toggle_comment                           Default               \n [super+g]\n   find_next                                Default               \n [super+i]\n   show_panel                               Default               \n [super+j]\n   join_lines                               Default               \n [super+k,shift+super+left]\n   move_to_neighboring_group                Default               \n [super+k,shift+super+right]\n   move_to_neighboring_group                Default               \n [super+k,shift+super+up]\n   new_pane                                 Default               \n [super+k,super+0]\n   unfold_all                               Default               \n [super+k,super+1]\n   fold_by_level                            Default               \n [super+k,super+2]\n   fold_by_level                            Default               \n [super+k,super+3]\n   fold_by_level                            Default               \n [super+k,super+4]\n   fold_by_level                            Default               \n [super+k,super+5]\n   fold_by_level                            Default               \n [super+k,super+6]\n   fold_by_level                            Default               \n [super+k,super+7]\n   fold_by_level                            Default               \n [super+k,super+8]\n   fold_by_level                            Default               \n [super+k,super+9]\n   fold_by_level                            Default               \n [super+k,super+a]\n   select_to_mark                           Default               \n [super+k,super+b]\n   toggle_side_bar                          Default               \n [super+k,super+backspace]\n   run_macro_file                           Default               \n [super+k,super+c]\n   show_at_center                           Default               \n [super+k,super+d]\n   find_under_expand_skip                   Default               \n [super+k,super+down]\n   close_pane                               Default               \n [super+k,super+g]\n   clear_bookmarks                          Default               \n [super+k,super+j]\n   unfold_all                               Default               \n [super+k,super+k]\n   run_macro_file                           Default               \n [super+k,super+l]\n   lower_case                               Default               \n [super+k,super+left]\n   focus_neighboring_group                  Default               \n [super+k,super+right]\n   focus_neighboring_group                  Default               \n [super+k,super+space]\n   set_mark                                 Default               \n [super+k,super+t]\n   fold_tag_attributes                      Default               \n [super+k,super+u]\n   upper_case                               Default               \n [super+k,super+up]\n   new_pane                                 Default               \n [super+k,super+v]\n   paste_from_history                       Default               \n [super+k,super+w]\n   delete_to_mark                           Default               \n [super+k,super+x]\n   swap_with_mark                           Default               \n [super+k,super+y]\n   yank                                     Default               \n [super+l]\n   expand_selection                         Default               \n [super+minus]\n   decrease_font_size                       Default               \n [super+n]\n   new_file                                 Default               \n [super+o]\n   prompt_open                              Default               \n [super+option+v]\n   paste_from_history                       Default               \n [super+p]\n   show_overlay                             Default               \n [super+plus]\n   increase_font_size                       Default               \n [super+r]\n   show_overlay                             Default               \n [super+s]\n   save                                     Default               \n [super+t]\n   show_overlay                             Default               \n [super+u]\n   soft_undo                                Default               \n [super+v]\n   paste                                    Default               \n [super+w]\n   close                                    Default               \n [super+x]\n   cut                                      Default               \n [super+y]\n   redo_or_repeat                           Default               \n [super+z]\n   undo                                     Default               \n [tab]\n   insert_best_completion                   Default               \n   insert_best_completion                   Default               [{\"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"not_regex_match\", \"operand\": \".*\\\\b[0-9]+$\"}]\n   replace_completion_with_next_completion  Default               [{\"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\"}, {\"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true}]\n   reindent                                 Default               [{\"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"preceding_text\", \"match_all\": true, \"operator\": \"regex_match\", \"operand\": \"^$\"}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_match\", \"operand\": \"^$\"}]\n   indent                                   Default               [{\"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\"}]\n   next_field                               Default               [{\"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true}]\n   commit_completion                        Default               [{\"key\": \"auto_complete_visible\"}, {\"key\": \"setting.auto_complete_commit_on_tab\"}]\n   insert                                   AdvancedNewFile       [{\"key\": \"setting.anf_panel\"}]\n   bh_next_wrap_sel                         BracketHighlighter    [{\"key\": \"bh_wrapping\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}]\n [{]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|$)\"}]\n   wrap_block                               Default               [{\"key\": \"indented_block\", \"match_all\": true}, {\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_match\", \"operand\": \"^$\"}]\n   insert_snippet                           Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": false}]\n [}]\n   move                                     Default               [{\"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true}, {\"key\": \"selection_empty\", \"match_all\": true, \"operator\": \"equal\", \"operand\": true}, {\"key\": \"following_text\", \"match_all\": true, \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\"}]\n. Reinstalling BracketHighlighter fixed it.\nThanks for the tip.\n. ",
    "ekampp": "Cheers :+1: \n. ",
    "mqliutie": "Sorry, Where is color scheme ?  in other words ,Where will the code below  be added? \n<dict>\n       <key>name</key>\n       <string>Bracket Curly</string>\n       <key>scope</key>\n       <string>brackethighlighter.curly</string>\n       <key>settings</key>\n       <dict>\n            <key>foreground</key>\n            <string>#CC99CC</string>\n       </dict>\n</dict>\n. Thanks \uff0c I have solved this problem \uff0c Thank you very much\n. ",
    "pjmp": ":cry: :sob: :disappointed: \n. ",
    "norlin": "Which info do you need?\nFor example, after BH install, I have tried to set my User's setting to show on minimap:\njson\n{\n    \"show_in_minimap\": \"outline\"\n}\nnor \njson\n{\n    \"show_in_minimap\": true\n}\nAlso, I have tried to disable strings matching \u2013 but this part is unclear how to do it properly \u2013 do I need to copy-paste whole matching settings (with no 'quotes') from the Default config, or just 'quotes' rules with enabled: false?\nAnyway, both options did not have any visible effect.\n. Yeah, I have read it, but it's not clear which style is it. Next line is \"high_visibility_style\": \"outline\", \u2013 so, I thought it's about this one... Ok, this part I've got, thanks! (But it's almost invisible on minimap with any style...)\nAnyway, what about disabling string rules (double & single quotes)?\n. ",
    "ricardozea": "You are correct, it was a Package Control issue. I reinstalled it and I was then able to install BracketHighlighter. Awesome plugin. Thanks!\n. ",
    "ysaroka": "Thank you, I understood the logic of \"no_outside_adj\", not a bug, but a feature.\n\"no_outside_adj => false\" solves my problem.\nHowever, on the menu it seems more logical to make the option \"no_outside_adj => false\" by default.\nBecause with the new option \"bracket_outside_adjacent => true\" is unclear why the text is selected from the outside, rather than inside, without further explanation.\nOr why the command \"bh_key\" moves to the parent bracket, while the children are marked.\nP.S. Sorry for my bad English.\n. > Ahh, but you forget that bracket_outside_adjacent is disabled by default. So by default, no one has this problem, and they get the expanding selections and the ability to jump to parent brackets without any confusion.\nIndeed, if it were so - the problem would not exist.\nBut in the default configuration file option \"bracket_outside_adjacent => true\":\nhttps://github.com/facelessuser/BracketHighlighter/blob/master/bh_core.sublime-settings#L48\nThat's what is confusing.\n. ",
    "kule": "Opps, sorry about that and doubly sorry as I was just writing all the details out; quit & restarted Sublime to get a clear console log, it updated the package and it seems to be working ok now (maybe it just needed a restart?).\n. ",
    "veniceXu": "It works!! thank you very much!\n. ",
    "rhernandog": "Ok thanks.\nFor what I've read here, it seems that Sublime's API makes it really hard to mess with colors, any idea of why is that?.\nBest,\nRodrigo.\n. Hi,\nThe normal behaviour is this (using outline as option)\n\nWhat I'd like would be a combination of this and the standard highlight with the vertical line. Now it only creates an underline in the open and closing tags. Id' like to highlight like this (again using outline, but it would be nice to use any highlight option)\n\nHopefully is more clear now.\nAlso for the key codes, what function is the one that toggles the high visibility mode?. I'd like to create a short-cut for that.\nThanks,\nRodrigo.\n. ",
    "Fabianred": "thanks, sorry, it was \"Color Highlighter\" another one\n. ",
    "anmoljagetia": "I am unsure about where to paste the settings listed at the above link. I tried modifying my theme and use setting files, and ended up with a broken theme file, had to un-install and reinstall the theme to get back to work. I am getting the gutter icons for all the brackets, but they are all white, even when I copy and paste your configurations into them (I am new to this).\nCan you please show me where should I add those lines in the setting files above? Google search also didn't return any relevant help, so I have been stuck here for a while.\n. Thanks a lot, this works for me :+1: :smile:\nNow, looking at the question again, I think, I should have rephrased it as Where should I put the sample configuration in my .tmTheme file. Thanks a lot for the help. Should I issue a PR for the slight change in documentation that might me helpful for beginners (like me) ?\n. ",
    "sadokx": "Thank you for your reply.\nIt seems your Jedi senses are finely tuned: I am using a high res display. Here's the screenshot of the bookmarked line:\n\nSo, same size as regular Sublime Text icons apparently. Do you know of any way to overcome this?\nThis is on Windows. I am getting a Macbook Pro Retina next week. Will it display properly?\nThanks!\n. Awesome. Thank you very much my man! Keep up the good work, yours is one of the most useful packages I've seen for ST. May your future (or current) children be blessed with a high midichlorian count, as yourself.\n. ",
    "rodrigobutta": "Hi!! \nNice conversation there, i've read it all. Now, a year leater, i'm still having this problem in a deamt 4k screen. Do you have any workarround there for me?? Thanksss from Argentina!!!!. I understand. Thank you! . ",
    "visualsbysina": "Cool, well I ended up upgrading to ST3, but I actually had deleted all the original ST2 files, reinstalled, deleted again, reinstalled, same error. So my files must have been stock, but it kept giving me the error. Not sure why. Either way I'm happy with ST3, thanks for the help! \n. ",
    "medifle": "I see...THX!\n. ",
    "jordwalke": "Right, and with Vintageous, you'd want to be able to switch between those two modes depending on which Vintageous mode you are in. This is indeed currently already working as expected - but what I'm requesting is a feature to integrate with Vintageous since it is such a popular plugin.\n. Unfortunately, that did not seem to work (I tried all combinations of)\n\"match_only_adjacent\": true/false,\n\"bracket_outside_adjacent\": true/false,\nEach combination of those settings failed in it's own to produce your table test cases.\n. No I did not! Retesting.\n. Seems to work great!\n. Okay, we'll let this bake (I'll test for a while) and then check back in with any additional bug reports?\nThanks for keeping your project tidy and well supported.\n. ",
    "wwhtoledo": "Hmm, I thought it should have work if I just added the user_brackets with the new language set as \"HTML with mustaches\" as described in docs here: http://facelessuser.github.io/BracketHighlighter/customize/#bracket-rule-management. But it doesn't. What am I doing wrong? Here are my user settings:\n{\n    \"user_brackets\": [\n        // Angle\n        {\n            \"name\": \"angle\",\n            \"language_list\": [\n                \"HTML\", \"HTML 5\", \"XML\", \"PHP\", \"HTML (Rails)\",\n                \"HTML (Jinja Templates)\", \"HTML (Twig)\", \"HTML+CFML\",\n                \"ColdFusion\", \"ColdFusionCFC\", \"laravel-blade\",\n                \"Handlebars\", \"AngularJS\",\n                \"HTML with mustaches\" // <--- New language\n            ]\n        }\n    ]\n}\n. Oh, ok. Is sorta working now, except is using the angle brackets style instead of the HTML tag. Is there a way to tell it to use the tag style?\n. Cool. That worked! Thanks. Btw, awesome plugin.\n. ",
    "darkred": "You're probably right, I guess it should be the other way around: SublimeLinter inside Packages., too \nIt's just that I frequently find myself navigating to Tools|Packages|BracketHighlighter\nespecially for the Match Brackets (ignore threshold)\"\nand I thought that by omitting Packages it would make it easier. \nBTW, is there a setting to add a rightclick context menu (i.e. containing all these useful commands this package provides in Tools|Packages|BracketHighlighter) -like SublimeLinter does- ? \nI think it would be practical to also have it,  apart from the Command Palette and the keyboard shortcuts.\n. Thank you very much! \nOne last thing: is it possible to make the BracketHighlighter entry appear to the end of the context menu? Currently it appears as 2nd entry, while I'd prefer if it appeared after the last separator and just before the SubmlimeLinter entry:\n\n. This works great. Thanks a lot once more!\n. > There is no line 203 in the example code you pointed me at. \nIt was 208 lines long initially. He has changed the code in the meanwhile (sorry I didn't notice that). Anyway, I just pasted the snippet in http://pastebin.com/XaGNxQ6d.\nPlease copy-paste the snippet from there.\n(or in the current code, it's line 167 that should match line 18, and 166 that should match to 160)\n. Alright, then. Thank you for the detailed reply explaining this.\n. It was indeed a Package Control issue:\nafter uninstalling and reinstalling BH, all is ok again.\nThanks for your reply!\n. I have the following 3 keyboard shortcuts in Preferences|Key Bindings - User\n```\n[\n    { \"keys\": [\"ctrl+keypad0\"], \"command\": \"reset_font_size\" },\n// All 3 are for BracketHighlighter\n// Search to end of file for bracket\n{\n    \"keys\": [\"ctrl+alt+super+b\"],\n    \"command\": \"bh_key\",\n    \"args\":\n    {\n        \"lines\" : true\n    }\n},\n// Go to left bracket\n{\n    \"keys\": [\"ctrl+alt+super+up\"],\n    \"command\": \"bh_key\",\n    \"args\":\n    {\n        \"no_outside_adj\": null,\n        \"lines\" : true,\n        \"plugin\":\n        {\n            \"type\": [\"__all__\"],\n            \"command\": \"bh_modules.bracketselect\",\n            \"args\": {\"select\": \"left\"}\n        }\n    }\n},\n// Go to right bracket\n{\n    \"keys\": [\"ctrl+alt+super+down\"],\n    \"command\": \"bh_key\",\n    \"args\":\n    {\n        \"no_outside_adj\": null,\n        \"lines\" : true,\n        \"plugin\":\n        {\n            \"type\": [\"__all__\"],\n            \"command\": \"bh_modules.bracketselect\",\n            \"args\": {\"select\": \"right\"}\n        }\n    }\n},\n\n]\n```\nCould they be related? But this has occurred only after this update - never before.\n\nAlso, I'd like to add that closing and restarting ST3\nthat error doesn't appear in console again.\n\nMaybe this was just another Package Control problem (i.e. not a BH one), and I should just ignore it?\n. No, I don't see that error again, in any subsequent restarts. \nIt must be that a restart was needed.\nThanks for answering\n. I just did and unfortunately it didn't make any difference.\n. I just did that again (uninstall BH, restart ST3, reinstall BH)\nand even ran satisfy dependencies after re-installing, but with the same result.\n. The update is not available yet, but I noticed in your latest commit that backrefs is written as backrfs. \nShouldn't it be backrefs instead (as in here)?\n. It's fixed. Thank you very much!\n. No problem.\n. Yes, it's fixed now. Thanks. ",
    "churiart": "Adding blade to both bh_tag.sublime-settings and bh_core.sublime-settings solved issue. Thanks\n. ",
    "techns27": "Its still not working for me.\nIts already in both the settings file.\nAny suggestion ?\n. ",
    "tvercruysse": "hi, Blade is part of the laravel PHP framework. This is about the only maintained blade syntax package atm : https://github.com/medalink/laravel-blade \nEdit: at the core blade is just php with some added syntax.\n. I fixed it for me, the syntax name changed from laravel-blade.syntax to blade.syntax, you included \"blade\" as an option in bh_tag.sublime settings but not in bh_core.sublime settings.\nIn Preferences->package-settings->BracketHighLighter->Bracket settings - user\nSearch for \"laravel-blade\", hit enter, paste \"blade\",\n. ",
    "davidchl": "Thank you, it worked!\nI just went to Preferences -> Settings-User\nAnd added the following:\n\"match_brackets\": false\n. ",
    "randy3k": "Great, it works now. Thanks for the prompt fix.\n. My bad. I have edited the post and tried my best to match the template.\n\nI'm not sure when I'll have the time to look into this though as I've been pretty busy recently.\n\nNo problem. I appreciate you work to the ST community.\n\nIf you have a solution, I would encourage a pull request.\n\nI am also not sure if a simple global will do the job properly. So I wanted to contact with you first to check if you have any insights. The situation is not that bad with a regular usage. But I could image it could be a problem if more packages are using ViewEventListener's given that BH is such a popular package. With that being said, I will look into this issue when I am free.\n. Even setting bracket_highlighter.ignore does not disable on_hover to run.. The default value for bracket_highlighter.clone_locations should be a dict.",
    "venatiodecorus": "Hello, thank you for responding so quickly. My bh_core.sublime-settings file is empty. Here is my preferences file as it currently stands: https://gist.github.com/venatiodecorus/c794bafce82ec653a6f9\nI checked my console and I don't see any errors. My current color scheme is the one I've been using but I did try a bunch of different themes to see if I could get the colors to work.\n. Not really. I guess I'd have to go through and set colors for each bracket type manually. I haven't had time to make that effort for such a small payoff. It was nice when the colors just seemed to work though. But for now, single color gutter brackets work fine for me. Still a great plugin :)\nEDIT: Perhaps somewhere you could list themes that have support built in? \n. ",
    "iamntz": "I think it's over a month.\nDisabling every single other plugin would be a pain in both terms of actually disabling them (they are quite a lot) and in terms of functionality.\nI was hoping that there is something other experienced as well :D \n. That's the problem, I often have DAYS without issues. It's very hard to isolate (and running for days without any package would be impossible for me)\n. Is the latest version available via Package Control... No custom rules, no nothing. It's a sublime as pristine as possible :D \nI'll dig into scope_exclude thingy and let you know.\nThanks!. ",
    "saulhudson": "Agreed, New request sent\n. Roger that!\n. ",
    "liuhewei": "I don't use packagecontrol. I just use \"git clone\" style installation. After \"git checkout st3-2.10.1\" (the newest release), everything is back to normal. I assume the backrefsmodule is missing in master branch.\n. @facelessuser Thanks for the explanation. I didn't install package control because of the network problem. I'll try to re-use it.\n. ",
    "coodoo": "Prefect, that did the trick, thanks for helping out!\n. ",
    "ezk84": "Ahh! Okay, that's a shame I thought it would work in any place where quotes are found. Cheers!\n. ",
    "r44083": "I understood. Thank you for the explanation. Hopefully future Sublime Text versions will add missing API.\n. ",
    "MxJ24": "Thanks, I have read the comments in #295 , now I know why it don't work.\n. ",
    "DominikSerafin": "NP. Thank you for such amazing plugin!\n. ",
    "iBublik": "@facelessuser Ok, thanks for clearing it out. And thanks for the great plug-in too.\n. ",
    "divinites": "Yes, I see the code and think that it is really weird that this object is not initialized.\nI am using OS X 11, the sublime text version is 3099 (just updated, before is 3098).\nThis problem does not happen each time, roughly 1 time of three starts.\n. I have tested this plug-in with version 3098, and the official release (3083), the bug that I mentioned above persists. \n. I opened the debug flag in the setting file and add a debug(\"object created\") just below bh_thread() object is created. I can no more replicate this bug, every time the object is correctly initialized with no problem. I will not assume that it is because I add one line debug code, since it does not make any substantial difference -- on the other hand, I think that a plausible explanation would be: after I modify the code, there is a bh_core.py in the package folder. Therefore,  every time when sublime text starts, it no more needs to extract from installed package first and load this plugin. \nDepending on the speed and process of extracting packages, sometimes it works, sometimes it does not.  From the user's angle, I thus see the randomness of trackback message. \nproposed solution: add a .no-sublime-package file.\n. I have three difference macs, one Hackintosh, two Mac book pro, all of them have similar problems. I also look through all issues before and I am also surprised that no one reported this issue before.  In the mean time, I will use my modified file as a temporary workaround.\n. Thanks a lot! I appreciate your positive attitude and patience.\n. Thanks for your patience and explanation. \nI am also curious about the reason behind\u2026 When sometime the trace back information appears, BH still works after a few seconds, So bh_thread successfully initializes any way. I think that there might be some mysterious consequences that I cannot figure out at this moment. But since it does not have any substantial effect on daily usage, I will put it aside and keep an eye on it.\nbest wishes \u2014 T.W.  \n\n\u5728 2016\u5e742\u67089\u65e5\uff0c\u4e0b\u53484:38\uff0cIsaac Muse notifications@github.com \u5199\u9053\uff1a\nClosed #305 https://github.com/facelessuser/BracketHighlighter/issues/305.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/facelessuser/BracketHighlighter/issues/305#event-544587102.\n. The lastest update solved this ghost issue, Thanks for your impressive work!\n. I think that I found the reason finally.\n\nWhen you click the sublime text icon to open it, when a view shows, you instantly tap \"cmd + `\" to show the console, then with large probability you will see this error:\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 389, in run_callback\n    expr()\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 522, in <lambda>\n    run_callback('on_activated', callback, lambda: callback.on_activated(v))\n  File \"bh_core in /Users/divinites/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 1176, in on_activated\n  File \"bh_core in /Users/divinites/Library/Application Support/Sublime Text 3/Installed Packages/BracketHighlighter.sublime-package\", line 1207, in ignore_event\nAttributeError: 'NoneType' object has no attribute 'ignore_all'\nHowever, If you wait until all plugins loaded and then open the console, nothing happens.\nThat's why this bug seems to be random... \n. Thanks. I just open and close sublime text 10 times.  with instantly openning the console 5 times, the error show 4 times; with waiting 5 seconds and openning the console 5 times, the error does not appear. I agree with you that this is probably related to how plugin_host works, but at least now I know how to avoid this. \nI appreciate your positive attitude towards this seemingly trivial bug as well.\ncheers\n. ",
    "asdf23": "I apologize I had some things come up and could not get back to this. I'll include my settings file tomorrow. I had a unrelated error with an unrelated package and found an issue with a corrupted file, perhaps that was causing the same issue here as well.  Again sorry for the delay.\n. Here is my bh_core.sublime-settings file.  And a screenshot of what I am seeing below.\n{\n     \"show_in_minimap\": true\n    ,\"show_unmatched\": true\n    ,\"align_content_highlight_bar\": true\n    //solid, outline, underline, thin_underline, squiggly, and stippled.\n    ,\"high_visibility_style\": \"outline\"\n}\nhttp://i.imgur.com/5IPbdOO.png\n. In the image beneath the quotation marks surrounding \"outline\" I see a underline mark. I am expecting to see a square surrounding \"outline\". Also if I change the file say to squiggly I expect to see squiggly lines instead of the underline. Also I assume that there should be some sort of indicator in the minimap area, I do not see any change to the minimap. \n. ",
    "meetjaydeep": "I'll explain in detail.\nIn Visual Studio if you see the 1st screenshot you will notice the bracket highlighted which is similar to Sublime text\n\nIn Screenshot 2 opening bracket is not visible but still the bracket highlighter shows it as the popup/tooltip.\n\nIf you compare the similar thing with the Sublime text the 2nd case is missing\n\n\n. ",
    "alexanderadam": "@facelessuser how is the name of the setting if I may ask?. Thank you for the fast response. So it's show_offscreen_bracket_popup.. I thought rather to a similar visualisation like the comments. How about showing it if the particular line does not have a comment in the end?\nAnd of course I know that you can add \"real\" comments indicating the relation but the problem is foreign code. You will probably find unstructured foreign code without any hints like these. And just recently somebody told me that he finds it difficult to maintain these comments.\nSo if you editor supports these hints natively anyway it could be easier to work with foreign code.\n. ",
    "daanvosdewael": "I encountering it while working on a project that uses krpano. This is included in one of the config files. If you save that as an .xml en try to open it, ST crashes.\nNot sure what you mean with 'XML package'. I guess just the standard one that comes with ST?\n. Mac OS X 10.11.3\n. Yeah, when I saw the syntax I thought the same. But it's being used by that panorama framework. So I don't really have a choice if it's valid or not.\nThanks for checking out my edge-case\u2026\n. ",
    "chigur": "I use the default HTML syntax highlighter that ships with Sublime Text 3 and given how close the syntax of Polymer's HTML is to the vanilla HTML a new syntax highlighter can hardly be justified. I do agree that it is kind of a bad idea to modify the default regular expression, but I couldn't think of a better way to do it. Also, most Polymer users will expect BracketHighlighter to work out of the box.\n. > I will think about it. I'm not too concerned with what Polymer users expect; I don't want to pollute normal tag detection if I can help it.\nMakes sense, no problem.\n\nDo polymer files use a different file extension than HTML?\n\nNo. They are almost plain HTML with the exception that you can annotate markup with bindings. There is no special syntax for control structures like if-else statements or for-loops in Polymer, they are handled via template tags and attributes.\n. ",
    "xtotdam": "Yes, {}, [], () already do work as expected and a little bit better =) But #ifdef, #endif etc are not yet highlighted. I will create a pull request, if I will be able, as I am really busy too.\n. Oh, I am very sorry for the lack of information about this issue in my first comment, honestly, should have written more.\n. ",
    "vishrutarya": "Thank you. This solved my problem.\nI did open the documentation but I mistakenly overlooked the first paragraph\non creating the bh_core.sublime-settings file. Thanks and I apologize for the\ninconvenience.\n\nOn Feb 19 2016, at 11:02 am, Isaac Muse <notifications@github.com>\nwrote:  \nDid you put this in Preferences.sublime-settings? If so, that is a big\nmisunderstanding. If you read the documentation it mentions that the settings\nfile is bh_core.sublime-settings:\nhttp://facelessuser.github.io/BracketHighlighter/customize/#core-settings.\nYou need to create a bh_core.sublime-settings file in your User folder and\noverride the settings in that file. Please the read the documentation for more\ninfo.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "stdedos": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\nMaybe label it and store it away as a to-do or something?\nOn 6/4/2016 6:25 \u03bc\u03bc, Isaac Muse wrote:\n\nAs syntax specific changes are supported by the community via pull \nrequests, this issue will be closed as I do not plan on personally \nspending time on it as I don't use LaTeX.\n\u2014 You are receiving this because you authored the thread. Reply to\nthis email directly or view it on GitHub \nhttps://github.com/facelessuser/BracketHighlighter/issues/318#issueco\nmment-206426127\n\nYours faithfully,\nNtentos Stavros\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBCAAGBQJXBSrWAAoJEAQJ50Mm6gMIbzsQAIF/JdzaGhaVMYGtzkVm+Mop\n84muKoxZX9pvD4alpDM665GzLcNV9d9oDvTZJwdYkgAyMFvSWBXXMYfrxZozRIgm\nEycJMrf5jvhQjEeRUiyC+lmFvf9LZLQfs9We+xF7YpYPHoO8nonyOTknATopzqqN\nSVMMCCoS1b9LtSiqTlxH9Xq6FDctpMqe4G1W2qzoWaUEZ8FYTmQhvwWWWDvRurDa\n+m/aw7wRB0ArLC0EInaIyUaJc4Oi3oS/j88D3VWUi8+m8U3wfxlJVlD0ChmVHquP\nrzha45BkbaNbl8U70dSr0BMyVCPJgRLni7qpjMyQ1WPKYFIFbJxlgWg9nZ/QjruJ\nDiMWv0p3jwEMaTEZyF5/Qhaf/1izDvzZG814Oy/OWgc0jisKY7+Z8rXBWn4kZ7XG\nEpPpBo9stu0UaS3NbJLu9SdmAbZW4+WbsfAIAWZ+wAXPz/zDvLx+DYahBocWst8z\nr3y91iNelIr1/HBvBZvMfy6ms4oyziB7eHRYOu+ZrXNLXfXL52fIIwunsTvoTKTp\noKP0ATjrUyVDp2qonp6lx3C3gU/XoK5WFgI2ggCvW9bm7FOYXXsUz2MDTIWmEyj0\nQRIgH41+M0d+uBKPCF/dpfzCacyHJKG/GuX7x9RfZcDT4OXHbVGnWF5WZwuIYQIK\n8e7TA4aqdxcTzW6Ru55z\n=k3uq\n-----END PGP SIGNATURE-----\n\n\u0391\u03c5\u03c4\u03cc \u03c4\u03bf e-mail \u03b5\u03bb\u03ad\u03b3\u03c7\u03b8\u03b7\u03ba\u03b5 \u03b3\u03b9\u03b1 \u03b9\u03bf\u03cd\u03c2 \u03b1\u03c0\u03cc \u03c4\u03bf \u03c0\u03c1\u03cc\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 Avast antivirus.\nhttps://www.avast.com/antivirus\n. It is not swapping the brackets, it swaps the quotes with brackets.\nMaybe seeing them on top of each other helps:\nV                                        V\ncd ${1} || {echoErr \"Could not cd to '${1}'. Please try again\" ; return -1 ; }\ncd ${1} || {echoErr {Could not cd to '${1}'. Please try again} ; return -1 ; }\n                    ^                                        ^. When I am Swap Brackets-ing, technically I expect to swap brackets. I expect the mechanism that detects the replace positions to verify that it's swapping brackets instead of whatever other detection might be in place i.e. IMHO the innermost bracket group.\nAlso technically, I was just touching the quotes, so, according to my previous understanding of the definition it shouldn't detect it anyway. But even if I am wrong on the match locality, as you also noted quotes != brackets. Package Control: No updated packages\nPackage Control: All dependencies have been satisfied\n :/. I have already done that before posting. Nuking mdpopus works.\nQuestion: Do \"you\" control final cursor location?\nLoading Changelog I see this\n\n. ",
    "RyanMcEvoy": "I can't really explain it but I know it's definitely this plugin because I've uninstalled it and it no longer happens.\nI think it might relate to when it is attempting to find the nearest bracket, it hits the end of the file due to the length of my search threshold and the code being folded which ends up leaving me with highlighted text.\nUnfortunately I can't really provide you with code due to the nature of the business I work for, the most I can suggest is to use any PHP file that is 500 lines long or more and ensure you are scrolled to the very bottom.\n. ",
    "101100": "Ready for round 2.\n. OK, read for round 3-ish.\n. @facelessuser Thanks for the plugin!\n. I've updated the RegEx patterns with interface and to requre = before certain keywords that are reused.  I've also added a bh_module to make sure the various mates match up properly.\n. Unfortunately, there is a subtle difference.   The overall unit starts with unit and ends with end. while all of the other blacks (other than repeat) end with end; or end (as part of end else ...).\nI debated adding unit, so I could remove the cases for unit and end.since almost every Pascal file will start with one and end with the other, so highlighting them is almost pointless.  Then I could use the simplified logic of lua (repeat XOR end).\n. Good catch, I've updated the RegEx.\n. Luckily the continuations no longer matter as I've removed the unit support.  I'll keep that in mind for future Python work.\n. ",
    "zheeeng": "@facelessuser OK, I got your point, I thought of that and now with your reply, it seems that the colors I can use all are predefined in the theme file.\n. ",
    "excetara2": "Okay so the toggle is the only way to turn it off then?\nI didn't know if it set a value so I could just set that to false on start. Thanks for the tips.\n. Okay no worries. I got it.\nOn Mar 30, 2016 12:47 AM, \"Isaac Muse\" notifications@github.com wrote:\n\nI won't alter latex by default though, so you would have to do it for your\nsetup.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/326#issuecomment-202900423\n. Yes maybe that will do but I just realized from looking at other plug-ins like expand-region is they forced an edit to begin with a different token id to enable soft undo to be triggered so maybe just changing to Text Commands won't fix the issue but I am not entirely sure. If you do change them over and it doesn't work I will have a look at getting it working.\n. Is there an example keybinding for this? Do you set no_threshold to true?. Thanks @r-stein\n\nOn Thu, Jan 5, 2017, 20:27 Richard Stein notifications@github.com wrote:\n\n@excetara2 https://github.com/excetara2 An example keybinding would be:\n{\n    \"keys\": [\"ctrl+k\", \"ctrl+b\"],\n    \"command\": \"bh_offscreen_popup\",\n    \"args\": {\"no_threshold\": false}\n},\n\nno_threshold is false by default.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/378#issuecomment-270623487,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAtO1hhdaBCCcgqWWaRNe_CAxtdiQAHwks5rPNO7gaJpZM4KcjOZ\n.\n. \n",
    "goyox86": "\ud83d\udc4d \n. ",
    "thenikso": "thanks this solves my question. I'm using the content_highlight_bar instead.\n. ",
    "fsaad": "I see now,\n```\n{\n        // Define region highlight styles\n    \"bracket_styles\": {\n        // \"default\" and \"unmatched\" styles are special\n        // styles. If they are not defined here,\n        // they will be generated internally with\n        // internal defaults.\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"none\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"thin_underline\"\n    },\n}\n\n}\n```\n. @facelessuser Thanks for the quick follow-up.\n\nMost likely, only highlighting if and for blocks that start a line (accounting for whitespace) may be all you need.\n\nThe main challenge here is that non-block if and for can (and often do) still start a new line, as in the following example:\njulia\nx = [\n   some_very_long_function_name(y, \"hi\", 10, i)\n   for i=1:10\n   if conition_on_iterator(i)\n]\nalthough I might be misunderstanding what it means to start a line accounting for whitespace.. I checked the Julia.sublime-syntax file using the ScopeHunter to check what is happening in the block and non-block versions and they seem to be in the same syntax scope.. ",
    "wesbos": "Cool - do you have that in a branch so I can try it? I'll test with the three major JS highlighters\n. Thanks @facelessuser :) \n. Do you need to cut a release for this to be updated? \n. ",
    "nicolasxu": "There is question mark \"?\" at the beginning of the line, and there is no highlight. \nIf I change the one line code to the following multi line code. It highlights well. \n. Thanks a lot for helping me understanding the situation!\n. ",
    "fgimian": "Thanks so much for the reply @facelessuser \ud83d\ude04 \nThat seems to have done trick.  I simply copied the scope_brackets block to my user settings for your plugin and removed all Markdown regex definitions.\nHuge thanks for your help\nFotis\n. Oh that's way better, thank you so much!!! \ud83d\ude04 \n. Hmm, perhaps I'm doing something wrong but I can't get that solution to work.  Here's what I'm trying:\n{\n    // Override regexes used to apply bracket highlighting so we can exclude\n    // Markdown for a cleaner Markdown editing experience\n    \"user_brackets\": [\n        // Markdown\n        {\n            \"name\": \"mditalic\",\n            \"scope_exclude\": [\"markup.italic\"]\n        },\n        {\n            \"name\": \"mdbold\",\n            \"scope_exclude\": [\"markup.bold\"]\n        },\n        {\n            \"name\": \"mdcodeinline\",\n            \"scope_exclude\": [\"markup.raw.inline.markdown\"]\n        },\n        {\n            \"name\": \"mdcodeblock\",\n            \"scope_exclude\": [\"markup.raw.block.fenced.markdown, markup.raw.block.markdown.fenced\"]\n        }\n    ]\n}\nCheers\nFotis\n. Oh wait, I made a booboo, I should have used `user_scope_brackets', all working now :smile:\n. ",
    "Wargazm": "crap, I'm sorry, what I wrote above isn't true. I neglected to define a rule for case ... endcase (I had all the other ones).  It actually does work how I'd like. \nAnother issue, though:  given all the examples of brackets in SystemVerilog that follow the thing ... endthing pattern, can I declare all of these in a single rule somehow?  What I'm trying to avoid is my bh_core.sublime_settings file looking like this:\n{\n    \"user_brackets\": [\n        {\n            \"name\": \"sv_function\",\n            \"open\": \"(function)\",\n            \"close\": \"(endfunction)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },        {\n            \"name\": \"sv_case\",\n            \"open\": \"(case)\",\n            \"close\": \"(endcase)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_module\",\n            \"open\": \"(module)\",\n            \"close\": \"(endmodule)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_interface\",\n            \"open\": \"(interface)\",\n            \"close\": \"(endinterface)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_task\",\n            \"open\": \"(task)\",\n            \"close\": \"(endtask)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_generate\",\n            \"open\": \"(generate)\",\n            \"close\": \"(endgenerate)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_package\",\n            \"open\": \"(package)\",\n            \"close\": \"(endpackage)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_begin\",\n            \"open\": \"(begin)\",\n            \"close\": \"(end)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n    ]\n}\n. I am struggling a bit, yes.  Can you point me to a specific example, perhaps?\n. Like you say, a single rule makes the most sense:\nsomething like this (only with more open/close items):\n{\n    \"name\": \"system_verilog\",\n    \"open\": \"(function|interface|package)\",\n    \"close\": \"(endfunction|endinterface|endpackage)\",\n    \"style\": \"default\",\n    \"scope_exclude\": [\"string\", \"comment\"],\n    \"language_filter\": \"whitelist\",\n    \"language_list\": [\"SystemVerilog\"],\n    \"enabled\": true\n}\nbut the bit about the bh_plugin is confusing me.\n. ok, so that code is very straightforward.  But where do I put it?  in my user space somewhere I assume, but where?\n. Ok, got it to work by just re-purposing the phpkeywords plugin (and not copying to make it my own.  My rule file looks a lot cleaner now!\n{\n    \"user_brackets\": [\n        {\n            \"name\": \"sv_pairs\",\n            \"open\": \"(function|case|module|interface|task|generate|package)\",\n            \"close\": \"(endfunction|endcase|endmodule|endinterface|endtask|endgenerate|endpackage)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"plugin_library\": \"bh_modules.phpkeywords\",\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n        {\n            \"name\": \"sv_begin\",\n            \"open\": \"(begin)\",\n            \"close\": \"(end)\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"SystemVerilog\"],\n            \"enabled\": true\n        },\n   ]\n}\nIf you'll notice, however, I didn't use the \\b for boundaries.  Doing that made for some wonky behavior.\n. ",
    "darkenvy": "A good read. I'm still having a hard time getting this to work however. I have played with the settings and once I set \"high_visibility_style\" to anything than the pre-defined options, it falls back to solid.\nhttp://pastebin.com/F4zzqTZ5\n. ",
    "KaduAmaral": "The language is PHP.\n. Maybe some other statements can use self::, like while(self::something()), for($i = self::count()) and etc... Thanks for your plugin and time..! :smile: \n. ",
    "jjgh": "Public, private and protected should be all of them. \nI checked the official documentation and other sources and couldn't find others so I'd go with those.\nThanks a lot for taking care of this, appreciated. \n. ",
    "pdanpdan": "import mdpopups; mdpopups.version()\n(1, 3, 4)\nBut now it's working as expected.\nThank you\n. ",
    "keith-hall": "I've found that I need to have the selection caret next to the bracket (either the opening or closing bracket, and making sure one is out of view) for the popup to be displayed when hovering over the bracket that is in view. Note that currently, hovering over the bracket in the gutter doesn't trigger the popup, you have to hover over the bracket in the main document. (With the aforementioned caveat of needing the caret next to the bracket.)\n. @LeonardoGentile the release notes state that you must be using ST3 build 3116 or newer - it won't work in 3114.\n. > > I've found that I need to have the selection caret next to the bracket\n\nI don't think that is a requirement. There are no checks on where the caret is, only where the hover occurs and its relation to highlighted brackets in the view.\n\nI've done some more testing, and it seems that the bracket you want to hover over must be highlighted/underlined and shown in the gutter by BH. So it only works for the outermost bracket where the selection is.\ni.e. having the cursor inside a string in a JSON file, the gutter shows the quotation marks, and thus the outermost actual brackets that contain the string have the popup functionality disabled.\n. Horizontal non-visible brackets aren't as important IMO :)\nLet's take the following JSON file (following the instructions inside):\n```\n{\n    \"example_json\": true,\n    \"array\": [1, 2, 3, 4],\n    \"now\": \"insert enough new lines below to ensure the } is not visible without scrolling\"\n}\n```\nwhen the selection is inside one of the strings, or between the [ and ], hovering over the { or } (depending which is on screen) does nothing.\n. @facelessuser understood, thanks for the clarification. Maybe this could be added to the documentation so that people know what to expect? :)\n. I figured I'd add a link to the forum post where a few things were already discussed, so people won't ask about it twice :) https://forum.sublimetext.com/t/st3-brackethighlighter-2/8725/55\n. ",
    "LeonardoGentile": "Thanks @keith-hall, I've tried your suggestion but still no luck, nothing happens for me\n. Ops, sorry for that. \"Check for new updates\" tells me \"No available Updates\" so I've assumed I was running on the latest one. I will wait for the updates then \ud83d\udc4d \n. ",
    "evandrocoan": "Note, they are the same file on each tab:\n\n\n. Thank you very much for your promptness and work.\nAnswers:\n\nYes, sorry for not make it clear.\nYes, it is working fine using 'BracketHighlighter: Match Brackets (ignore threshold)'.\n\nI understand, if the events 'on_selection' and 'on_modified' are not created, then it is impossible to BH do it thing. But may be could be some workaround, I cannot say for sure 'cause I do not know about the sublime API/programming. But I can give some thoughts:\n(workaround) Update by 'polling' instead of 'interruption'\nCould be registered an event to be called every 0.1 seconds and each time call the command palette 'BracketHighlighter: Match Brackets (ignore threshold)', then we would not need to relay on the sublime's 'on_modified' or 'on_selection' events.\nOn C language it would be an thread which run an while(true) sleeping 0.1 seconds every loop after call the command palette 'BracketHighlighter: Match Brackets (ignore threshold)'.\nOn scripting, where probably we do not have such freedom, the API could provide an event registering where we can create a repeating task to be called on specified intervals as 0.1 seconds.\nAlso, could be used/hooked another event which is as called as we need our event to be called, then after such event to proceeds, we can call ours the command palette 'BracketHighlighter: Match Brackets (ignore threshold)'.\nClosing it\nHence if anything else can be done, we can close this thread or request to the sublime's team to provide one of the tools we need to implement the BH behavior on cloned views.\n. Thanks for your time, and sorry for do not find it.\nBut I kinda do not understood the match_tags behavior from the settings doc:\n// Enable visualization of the matching tag in HTML and XML\n    \"match_tags\": true,\nWhy does this would create dotted underline instead of continue/solid underline on my tags, anyways\nthe other settings as match_brackets, states it is underline.\n// Set to false to disable underlining the brackets surrounding the caret\n    \"match_brackets\": true,\n. Yes, and thank you for doing it solid. Much better this way. Highlighting stuff on the text is not the Sublime Text builtin strength.\n. May be some examples could be useful when you say it. But not necessary as they could found them when searching the issues for the dotted underline behavior.\n\nor you will have matching conflicts\n\nor you will have matching conflicts as dotted underlines instead of solid ones.\n. ## Question 1\n\nI am yet to reproduce something like this ever. It may have to do when packages are bundled as sublime-package files. \n\nYou cannot reproduce this? Create a package with the same name as mime: \nFix Project Switch-Restart Bug\\fix_project_switch_restart_bug.py\nWith the same contents:\n```python\nimport sublime\nimport sublime_plugin\nthis var is not used yet\nlastOnLoadViewCallTime = 0\ndef plugin_loaded():\n# print( \"( fix_project_switch_restart_bug.py )\" )\n\nviews         = None\nwindows       = sublime.windows()\ncurrentViewId = 0\n\nfor window in windows:\n\n    views         = window.views()\n    currentViewId = window.active_view().id()\n\n    for view in views:\n\n        # print( \"( fix_project_switch_restart_bug.py ) View id {0}, buffer id {1}\".format( view.id(), view.buffer_id() ) )\n\n        if currentViewId != view.id():\n\n            restore_view( view )\n            view.run_command( \"move\", {\"by\": \"lines\", \"forward\": False} )\n            view.run_command( \"move\", {\"by\": \"lines\", \"forward\": True} )\n\ndef restore_view( view ):\n    \"\"\"\n        view.set_viewport_position( , False )\n    \"\"\"\n# for selection in view.sel(): print( \"( fix_project_switch_restart_bug.py ) Iterating view.sel()[i].begin() {0}\".format( selection ) )\n\n# print( \"( fix_project_switch_restart_bug.py ) Setting show_at_center to view id {0}\".format( view.id() ) )\nview.show_at_center( view.sel()[0].begin() )\n\ndef are_we_on_the_project_switch_process():\n    \"\"\"\n        Call plugin_loaded() only one time, after the project switch process is finished.\n    Restrictions:\n    1. We cannot call `plugin_loaded()` if this function is called only one time.\n    2. If this function is called consequently 2 times with less than 0.1 seconds, then we\n       must to return True.\n       Basically, on each call\n\"\"\"\n\n# set task to call plugin_loaded() after 2 seconds, if this task currently does not exists.\n\nreturn False\n\nclass OnLoadedViewCommand( sublime_plugin.EventListener ):\n    \"\"\"\n        This partially fix the issues:\n    Restore session, does not set the last scroll position after a project change, or sublime restart #1379\n    https://github.com/SublimeTextIssues/Core/issues/1379\n\n    Scroll sync doesn't work (ST3 3084)\n    https://github.com/titoBouzout/BufferScroll/issues/23\n\n    Finish the package: Fix Project Switch-Restart Bug\n    https://github.com/evandrocoan/SublimeTextStudio/issues/26\n\"\"\"\n\n# def on_load( self, view ):\ndef on_load_async( self, view ):\n# def on_activated( self, view ):\n# def on_activated_async( self, view ):\n\n    # { \"keys\": [\"up\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": false} },\n    # { \"keys\": [\"down\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": true} },\n    # view.run_command( \"move\", {\"by\": \"lines\", \"forward\": False} )\n    # view.run_command( \"move\", {\"by\": \"lines\", \"forward\": True} )\n    #\n    # print( \"( fix_project_switch_restart_bug.py ) Calling restore_view, view id {0}\".format( view.id() ) )\n\n    # Need to fix to the bug on the Sublime Text core, where all cloned views are called with the same\n    # view object. If we do not fix this here, it would set all the cloned views to the same\n    # position. So to overcome this, we call all the views to center with `plugin_loaded()`.\n    #\n    # #1253 Event handlers for cloned views get called with the wrong view object\n    # https://github.com/SublimeTextIssues/Core/issues/1253\n    #\n    # The `on_load_async()` is called for each view on for the project change, however\n    # due the bug https://github.com/SublimeTextIssues/Core/issues/1253, the cloned\n    # views are called with the wrong `view`, then we need to call `plugin_loaded()` to catch\n    # all the correct views (including the cloned ones) to apply the scroll fix for the bug\n    # https://github.com/SublimeTextIssues/Core/issues/1379.\n    #\n    if not are_we_on_the_project_switch_process():\n\n        restore_view( view )\n\n```\nQuestion 2\n\nIs it only when with zipped forms of BH? \n\nI uninstalled the package and cloned it. Stills the same error, but now pointing to the real .py file.\nplugins loaded\nTraceback (most recent call last):\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\sublime_plugin.py\", line 389, in run_callback\n    expr()\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\sublime_plugin.py\", line 505, in <lambda>\n    run_callback('on_selection_modified', callback, lambda: callback.on_selection_modified(v))\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\Data\\Packages\\BracketHighlighter\\bh_core.py\", line 1055, in on_selection_modified\n    if self.ignore_event(view):\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\Data\\Packages\\BracketHighlighter\\bh_core.py\", line 1077, in ignore_event\n    bh_thread.ignore_all or\nAttributeError: 'NoneType' object has no attribute 'ignore_all'\nQuestion 3\n\nIs it because you are syncing your plugins with dropbox?\n\nI do not sync anything with dropbox, it is on the dropbox folder for backup purposes. I sync things with git at the develop branch: https://github.com/evandrocoan/SublimeTextStudio/commits/develop, but only the absolute necessary as settings and source code files.\nQuestion 4\n\nMaybe I can initialize the structures and classes I need outside of plugin_loaded\n\nYou can, you just cannot call the Sublime API outside the plugin_loaded() forward.\nQuestion 5\n\nI will look and see if there is something I can do to ensure the important thread class is loaded, but if it turns out I have to have it loaded in plugin_loaded, then there is nothing I can do.\n\nSeems simple, if it being called when its state is None, check for None before call it. However it seems not worth spend all the plugin life cycle checking for None, just for something which happens exactly for some microseconds on the plugins load. On this case would be wise on start calling the events those microseconds later.\nI looked over the code and just surrounding it with a try... catch block seems appropriate. I just did it and seems to be working properly. Is it patched?\npython\nFile: D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\Data\\Packages\\BracketHighlighter\\bh_core.py\n1077:         try:\n1078: \n1079:             return (\n1080:                 bh_thread.ignore_all or\n1081:                 settings.get('bracket_highlighter.ignore', False) or\n1082:                 (\n1083:                     settings.get('is_widget') and\n1084:                     not sublime.load_settings(\"bh_core.sublime-settings\").get('search_in_widgets', False)\n1085:                 )\n1086:             )\n1087: \n1088:         except Exception as e:\n1089: \n1090:             pass\n1091: \n1092:         return True\nQuestion 6\nAfter my patch on Question 5, it stopped doing it. Now it looks like we got the same problem only with ScopeHunter:\npython\nTraceback (most recent call last):\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\sublime_plugin.py\", line 389, in run_callback\n    expr()\n  File \"D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\sublime_plugin.py\", line 505, in <lambda>\n    run_callback('on_selection_modified', callback, lambda: callback.on_selection_modified(v))\n  File \"scope_hunter in D:\\User\\Dropbox\\Applications\\SoftwareVersioning\\SublimeText\\Data\\Installed Packages\\ScopeHunter.sublime-package\", line 632, in on_selection_modified\nAttributeError: 'NoneType' object has no attribute 'is_enabled'. Basically it looks like the static initialization problem. Sublime Text cannot call all the forwards plugin_loaded() at the same time. So some of them are called before the others. I would bet they are called alphabetically by package name, for example. But it just a matter of test to know exactly.\nThe code I am presenting to trigger the bug is moving the caret/cursor up and down fastly. This trigger the BracketHighlighter to perform its function. However, my plugin seems to be loaded before the BracketHighlighter's plugin_loaded() forward. This way, the registered BracketHighlighter's forward on_selection_modified(2) is called when the BracketHighlighter plugin is on an inconsistent state.\nThis indeed seems to be a Sublime Text core bug. Sublime Text cannot call the plugins forwards as on_selection_modified(2) before the plugin goes through the forward plugin_loaded(). Because it seems funny bug, I am gonna try to create a small code reproduction and report it on the Sublime Text core issue tracker. But before I am going to check whether this an issue and if it was already reported.. ",
    "MattDMo": "Escaped round:\nsource.yaml-tmlanguage \nmeta.repository-block.yaml-tmlanguage \nmeta.match.yaml-tmlanguage \nmeta.value.yaml-tmlanguage \nmeta.regexp.group \nmeta.regexp.group \nconstant.character.escape.general.regexp\nEscaped square:\nsource.yaml-tmlanguage \nmeta.repository-block.yaml-tmlanguage \nmeta.match.yaml-tmlanguage \nmeta.value.yaml-tmlanguage \nmeta.regexp.group \nmeta.regexp.group \nconstant.character.escape.general.regexp\nSo they're exactly the same...\nAs far as the change in \"scope_exclude\", do you think just having a plain constant.character.escape would be better? After all, we don't want to be matching any escaped characters, right?\n. Sorry for leaving you behind, I just started a new job two weeks ago, and haven't had as much time to fiddle around with stuff like this. I basically took your suggestion; the relevant part of my user settings is this:\njs\n\"brackets\": [\n    // Basic brackets\n    {\n        \"name\": \"curly\",\n        \"open\": \"(\\\\{)\",\n        \"close\": \"(\\\\})\",\n        \"style\": \"curly\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"round\",\n        \"open\": \"(\\\\()\",\n        \"close\": \"(\\\\))\",\n        \"style\": \"round\",\n        \"scope_exclude_exceptions\": [\n            \"text.tex string.other.math\",\n            \"punctuation.definition.string.begin.shell\",\n            \"punctuation.definition.string.end.shell\"\n        ],\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"punctuation.definition.case-pattern.shell\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"square\",\n        \"open\": \"(\\\\[)\",\n        \"close\": \"(\\\\])\",\n        \"style\": \"square\",\n        \"scope_exclude\": [\n            \"string\",\n            \"source.regexp constant.character.escape\",\n            \"comment\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\", \"source.yaml-tmlanguage meta.value -constant.character.escape\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\nand it's been working well so far. I may end up experimenting with just setting constant.character.escape in \"scope_exclude\", but I haven't had any issues in other languages yet, so I'll just let it be for now. Thanks for your help!\n. ",
    "badraufran": "Oh awesome, thanks.\n. ",
    "MakhouT": "I'm adding an other question here as it's also regarding visuals. I didn't want to open a new issue for this. If you'd rather me open a new issue let me know. \nBasically I'm trying to figure out if what I am trying to do is possible with BH. Currently I am using the experimental feature content_highlight_bar. But would it be possible to have the content hightlight inside the brackets highlighter. \nReason for this is:\n- You'll have a bit of a thicker line\n- less aggresive\n- \"not in the way\"\n- and because I'm used to it from an other IDE (jDeveloper) I use on a day to day basis \nI'll paste in a screenshot of the IDE I'm using with the highlighting in action, as that will make more sense than my explanation. \n\nBasically it's that lightblue color, I would like to achieve that in ST with BH. But have the highligting between the brackets of BH on the left hand side from the line numbers.\n. @r-stein Ok thanks for the info. Was hoping it was just adding a background-color somewhere :)\n. ",
    "Kristinita": "@facelessuser , I'm sorry, the mistake was mine. I checked my code HTML-pages via SublimeLinter, it was discovered that I had an extra slash in the tag <a> \u2014 /.\nCorrect:\n<a href=\"http://example.com\">Sasha Zeitgeist</a>\nI have:\n<a href=\"http://example.com\"/>Sasha Zeitgeist</a>\nNow all works. Thanks.\n. ",
    "Kitanga": "This is also true for javascript. I have been trying to fix the issue, but still no success. Weirdest part is that when I took my code and pasted it function by function into another file (I was looking for where the issue might be), I noticed that if I removed comments with '//' and used '/**/' then the bracket matching would work. Now it's still stuck on '?'. You can seethe code here:\n```\nvar test = (function() {\n    / Removing /\n    / Public Variables /\n    var t = this;\n    this.images = {}; / This is where all the loaded images are saved /\n    this.sprites = []; / This is where are sprites are saved /\n    this.anim = ''; / This is the main animation loop. Uses requestanimationframe to animate rooms /\n    this.canStart = false; / Can the game start? Should be set to true when loading finishes /\n    this.rooms = {}; / This is where all the rooms are saved. /\n    this.display = ''; / Display canvas /\n    this.world = ''; / This is the reference to the world canvas on which all the currrent running room's objects will live. /\n/* ./Public Variables */\n\n/* Private Variables */\nvar toBeLoaded = 0,\n    /* Total number of images that need loading */\n    isLoaded = 0,\n    /* Images that have loaded */\n    perLoadedDec = 0,\n    /* Percentageloaded in decimal form */\n    iDontDoAnything; /* Self explanatory, doesn't do anything */\n/* ./Private Variables */\n\n/* Private Functions */\nfunction getSqr(num) {\n    /* This function will return the square (or to the power of two) of num */\n    return num * num;\n}\nfunction Vector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.normalize = function() {\n        var length = this.length();\n        if (length > 0) {\n            return vector(this.x/length, this.y/length);\n        } else {\n            // zero-length vectors cannot be normalized, as they do not have direction.\n            return vector();\n        }\n    };\n    this.length = function() {\n        return Math.sqrt(getSqr(this.x) + getSqr(this.y));\n    };\n    console.log(this.force)\n    return this; /*{\n        x: x || 0,\n        y: y || 0\n    };*/\n}\nfunction point(x, y) {\n    /* Returns x and y */\n    this.distance = function(a, b) {\n        var x = b.x - a.x;\n        var y = b.y - a.y;\n        return Math.sqrt(getSqr(x) + getSqr(y));\n    };\n    return {\n        x: x || 0,\n        y: y || 0\n    };\n}\nfunction Sprite(layer, key, x, y, isAlive) {\n    /* Sprite Class */\n    var spr = this;\n    this.pos = point(x, y);\n    this.mass = 1;\n    this.force = Vector(0, 0);\n    this.velocity = Vector();\n    this.acceleration = Vector(this.force.x/this.mass, this.force.y/this.mass);\n    this.layer = layer; /* The layer onto which to draw this sprite */\n    this.canvas = this.layer.canvas; /* The layer's canvas */\n    this.ctx = this.layer.ctx; /* The layer canvas' drawing context */\n    this.img = new Image(); /* The sprite's main image */\n    this.img.src = t.images[key].src;\n    this.rotImg = undefined; /* The rotated version of the main image. To be used when rotating towards mouse/Vector */\n    this.doIRotate = undefined;\n    this.rotAngleRad = undefined; /* This is the angle between mouse and sprite */\n    this.mouse = Vector();\n    this.alive = isAlive; /* Whether the sprite should be drawn onto the world */\n    this.init = function() {\n        /* Create the drawer canvas */\n        /*debugger*/\n        this.drawer = undefined;\n        this.cW = 0;\n        this.cH = 0;\n        this.imgW = this.img.width;\n        this.imgH = this.img.height;\n\n        /* Find dimensions for canvas */\n        this.cW = (Math.sqrt(getSqr(this.imgW/2) + getSqr(this.imgH/2))) * 2;\n        this.cH = this.cW;\n        this.imgOnDrawerX = 0 - (this.imgW/2);\n        this.imgOnDrawerY = 0 - (this.imgH/2);\n        this.drawer = t.createCanvas(this.cW, this.cH, '0');\n        this.drawer.ctx.translate(this.cW/2, this.cH/2);\n        t.drawOnCanvas(this.drawer, this.img, this.imgOnDrawerX, this.imgOnDrawerY);\n        t.drawOnWorld(this.drawer.canvas, this.pos.x, this.pos.y);\n        /* END Create the drawer canvas */\n\n        /* Event Listeners */\n        this.canvas.onclick = function(ev) {\n            ev.preventDefault();\n            if (spr.doIRotate) {\n                spr.mouse = Vector(ev.pageX - spr.canvas.offsetLeft, ev.pageY - spr.canvas.offsetTop);\n                console.log(spr.mouse);\n                spr.setMouseToPointAngle(spr.mouse);\n                spr.rotationInit(spr.drawer);\n            }\n            spr.applyImpulse(spr.xy(10, 10),spr.mouse.normalize());\n        };\n    };\n    this.kill = function() {\n        /* This will remove sprite from world canvas */\n        if (this.alive) {\n            this.alive = false;\n        }\n\n    };\n    this.rotationInit = function(drawer) {\n        this.drawer.ctx.clearRect(0 - (this.drawer.canvas.width/2), 0 - (this.drawer.canvas.height/2), this.drawer.canvas.width, this.drawer.canvas.height);\n        this.drawer.ctx.save();\n        this.drawer.ctx.rotate(this.rotAngleRad);\n        t.drawOnCanvas(this.drawer, this.img, 0 - (this.img.width/2), 0 - (this.img.height/2));\n        t.drawOnWorld(this.drawer.canvas, this.pos.x, this.pos.y);\n        this.drawer.ctx.restore();\n    };\n}\n\n})();\n```\n. Thank you for your reply. Btw, my laptop only has 2GB of RAM :sob:\nEven opening this tab took time :laughing:  So yea, this will be fun. Thanks though\n. Thank you\ud83d\ude06\nOn 9 Sep 2016 02:56, \"Isaac Muse\" notifications@github.com wrote:\n\nFYI, I tried out your code and I had no problems. My threshold is set to\nthis:\n// Character threshold to search\n\"search_threshold\": 10000,\nSmaller thresholds (like the default value) may not be able to search the\nfull content in your example.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/facelessuser/BracketHighlighter/issues/366#issuecomment-245778684,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANdyOobSNabEakUDcAPobW7hFpwggISVks5qoKCqgaJpZM4J0QIN\n.\n. \n",
    "paKanhu": "Sorry for delay in reply. I was ill for last 15 days. I have tested the suggested closing rule and it's working.\n(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*(?:;|;?\\\\?>))\n. Fixed.\n. ",
    "nicholashh": "Ahhh, smilies. Good point. I see why that would be hard to check for. I guess all of the text files I look at are more formal than this example and thus don't have that (or a related) problem.\nKind of as a follow up question, tho... Since you mentioned possibly escaping the smiley with quotes, I tried that to see what would happen, only to realize that quote matching isn't working at all (neither single nor double) in my file, even tho plain text has been removed from their blacklists. Do you know why this might be?\n. Ahhh. Again, a very clear answer. Thanks for explaining! :)\n. ",
    "ctf0": "u r correct, the @click is the one that was causing the issue, its a vue syntax which is derived from html, however can u plz point me to how i can add this function ? \n. okay , i will try to play with it and see what will comeout,\none last question,\nis there away to give foreground & background to the unmatch ? \nso whatever the unmatched tag fg & bg is currently set ,it gets changed to the unmatched style.\n. i got it, i just needed to change the setting for unmatched to \"solid\" , thanx again\n. not necessarily because \n- u can write vue syntax in html,blade,vue components\n- the same linters that run on html can run on vue\n- the @ is used in blade to force blade to ignore the {{ }}\nbut for vue component it self i will open an issue for it because there is something strange with its tag hl which is out of this pr scope.\n. i can write vue syntax in blade as well as html, u r correct that not most of vue syntax will be properly highlighted in html but vue syntax is picked up only by files with .vue which mostly is made only for the vue components files same as angular\n. in that case , we should remove php,blade,angular from the html scope and add them to its own settings.\n. am lost, so u want to make a new option just for the @ ? if so then its better to have a setting for all the non officially supported html attrs <tag (: , :: , _ , @)attr=\"\"></tag>\n. okay i understand the issue about php, clearly solving this with regex will be kinda messy but regarding the attributes i have an idea, what if we made a separate setting just for those attributes like\njs\n\"cstm-attrs\":\n{\n    syntax: ['html','blade.php','vue','ng.html'] // where u want those attrs to be supported,\n    attrs: ['@',':+','_'] // here u put ur custom attrs, this setting support both string and regex, ex. ':+'\n},\nso now we can have the html main setting cleaned like below , and any other language that derive from html will have everything supported automatically because in essence they are the same as html except some small changes & custom attrs wont give unmatched error anymore\njs\n\"tag_mode\": {\n        \"xhtml\": [\"XML\"],\n        \"html\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"Java Server Pages (JSP)\"\n        ],\n        \"cfml\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    },\nso what u think ?\n. we can reverse it\njs\n\"cstm-attrs\":\n{\n    \"html\":['@',':+','_']\n    \"blade\":['@',':+','_']\n    // etc\n},\n. i believe the best option is having a separate profile for each template instead of adding them all in html so the html stays true to its own specs,\nbut am kinda uncertain of why we have to add the template names in the html setting in both bh_tag & bh_core ???\ni was hoping of having like a global setting where we just tell the lib to combine which settings together like\njs\n\"html\": {[\"vue\",\"blade\",etc...]}\nand now everything that applies to html, will apply to other childrens, this is much easier to maintain and easier for user to edit.\n. okay but maybe instead of the user having to add the rule in both places, maybe we can use the prev mentioned idea to make it easier, then the plugin will internally does the routing or piping from one setting to another :tada: partyyyyyyy\n. yes it does the same thing except it follows a pattern which many users are accustomed to, same like using ur smart phone to contact someone \"the same pattern in any device , right ?\", \nbut currently it requires extra steps to do something very simple which is not easily accessible in the doc\n. okay, so the solution i believe for all that is simply refactoring the docs\n. and some simplifying would help big aswell, maybe try from a 6 years old pov instead of a dev one\n. no its not related to the other PR, am not sure how exactly BH works but as u can see in the ss the tags are hl with the underscore but no icons in the gutter, maybe because BH only add the gutter icons if the file is correctly formatted according to html specs ex.\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n     ...\n</body>\n</html>\n. i have removed the @click even b4 i create the ticket, gutter icon work for everything except the tags & unmatched\n. can u show me ur config ?\nbtw the style & script still have issues\n. config is default, \npackage is https://packagecontrol.io/packages/Vue%20Syntax%20Highlight \nscheme is https://packagecontrol.io/packages/Seti_UX\n. sure, lets see what u will get.\n. okay, first parts are done, can u give me the link to the docs ? u mean this http://facelessuser.github.io/BracketHighlighter/contributing/#pull-requests \n. also when adding the syntax name to the language_list , am not sure what exactly to add \nshould the name be exactly as the same in the syntax list Vue Component or should it the file extension vue ?\n. > I was referring to this section with the orange note: http://facelessuser.github.io/BracketHighlighter/contributing/#overview.\nyeah i already figured that by now :smile: , however i think solving the @ issue should be taken care of first before i can send a PR for this one. \"more of a complete solution\"\n. okay sure, np, gonna close this one and will keep the PR as reminder \n. ",
    "BB-000": "I am still unclear how to add support for vue @click=\"example()\" attributes\nI can't find 'bh_tag.sublime-settings' ?. ",
    "rr326": "@ctf0  - did you ever manage to get vue components files working with HTML tagging? Any tips on how to do it? I've added \"Vue Component\" and \"vue\" to the syntax sections of bh_tag.sublime-settings - User, and it isn't working. Though if I copy the code to an HTML file it works as expected. . Hi @facelessuser, thanks for the response. I'm happy to do it your preferred way.  I've added the \"vue\" syntax, as his PR suggests, and I'm not running into any \"@\" issues, but it still isn't recognizing tags in my .vue file (though it works if I copy the same code to a .html file).\nAny suggestion of how to make it work, or how to debug? . Duh - sorry about that!\nThe title of the syntax (in the lower right corner of Sublime) is \"Vue Component\". But the syntax settings are under \"vue\" so I figured I'd do both to be safe. Neither worked. (I also added \"Jinja2\" for my .j2 files. It didn't work either.)\n```\n{\n    / If you add a new key to one of these settings, you must add one to all! /\n// This is where you intially define a new tag mode.\n// This new tag_mode key must be used in all other settings in this file\n// to set up its specific settings.\n// Determine which style of tag-matching to use in which syntax.\n\"tag_mode\": [\n    {\"mode\": \"xml\", \"syntax\": [\"XML\"]},\n    {\n        \"mode\": \"xhtml\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\",\n            \"Vue Component\",\n            \"vue\",\n            \"Jinja2\"\n        ],\n        \"first_line\": \"^[ \\\\t]*<\\\\?xml\"\n    },\n    {\n        \"mode\": \"html\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\",\n            \"Vue Component\",\n            \"vue\",\n            \"Jinja2\"\n        ]\n    },\n    {\n        \"mode\": \"cfml\",\n        \"syntax\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    }\n],\n\n// Style to use for matched tags\n\"tag_style\": {\n    \"xml\": \"tag\",\n    \"xhtml\": \"tag\",\n    \"html\": \"tag\",\n    \"cfml\": \"tag\"\n},\n\n// Scopes to exclude from tag searches.\n\"tag_scope_exclude\": {\n    \"xhtml\": [\"string\", \"comment\"],\n    \"html\": [\"string\", \"comment\"],\n    \"cfml\": [\"string\", \"comment\"]\n},\n\n// Optional closing HTML tags. You can use 'null' if it does not require a pattern.\n\"optional_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n    \"cfml\": \"cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\"\n},\n\n// Tags that never have a closing.  You can use 'null' if it does not require a pattern.\n\"void_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"cfml\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\"\n},\n\n// Self closing tags.  Single tags that are closed like this <tag />\n\"self_closing_tag_patterns\": {\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": null,\n    \"cfml\": \"cf.+\"\n},\n\n// Regex for tag name. Do not use capturing groups.\n\"tag_name\":\n{\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"cfml\": \"[\\\\w:\\\\.\\\\-]+\"\n},\n\n// HTML attributes.  Do not use capturing groups.\n\"attributes\":\n{\n    \"xml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"xhtml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"html\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\",\n    \"cfml\": \"[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\"\n},\n\n// Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator '/' only.\n// Attributes and tag names are inserted using python string formatting:\n// the keyword 'attributes' and `tag_name` are used.\n\"start_tag\": {\n    \"xml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"xhtml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"html\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"cfml\": \"<(%(tag_name)s)(?:(?:\\\\s+%(attributes)s)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\\\s*(/?)>\"\n},\n\n// Regex for end/closing tag.  Only use a capturing group for name.\n\"end_tag\": {\n    \"xml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"xhtml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"html\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"cfml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\"\n}\n\n}\n```. 1) I deleted the Vue in the xhtml section and it didn't work.\n2) In the default bh_tag.sublime-settings, it has all the syntaxes listed in both xhtml and html.  Is that not correct?\n3) I'd be happy to make a vue PR, but i'm brand new to vue and to BH. I'd like to get BH working on .vue files just like they are .html files, and then as I play with vue I can create a custom one like cfml. \n. Aha! It was that angle match rule that was the key!  Maybe you should add a note about that in the bh_tag.sublime-settings comment?\nAlso, thanks so much for helping out. I really was trying but even with all the documentation coming into a new software product is baffling at the beginning. \nI appreciate it. You've just earned some karma points. ;). ",
    "mumuxizzz": "You are a genius ! Your help was greatly appreciated. @facelessuser . ",
    "minikN": "Sorry to dig this out once more, but I copied @facelessuser changes to bh_tag.sublime-settings and bh_core.sublime-settings. Now I get correct bracket matching in vue component files (Using Vue Syntax Highlight package). Great!\nHowever, in HTML, or rather Laravel blade files (.blade.php) the brackets still get messed up if I have a @click attribute:\n\n\n\nbh_tag.sublime-settings:\n```\n{\n    / If you add a new key to one of these settings, you must add one to all! /\n// This is where you intially define a new tag mode.\n// This new tag_mode key must be used in all other settings in this file\n// to set up its specific settings.\n// Determine which style of tag-matching to use in which syntax.\n\"tag_mode\": [\n    {\"mode\": \"xml\", \"syntax\": [\"XML\"]},\n    {\n        \"mode\": \"xhtml\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ],\n        \"first_line\": \"^[ \\\\t]*<\\\\?xml\"\n    },\n    {\n        \"mode\": \"html\",\n        \"syntax\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Rails)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ]\n    },\n    {\n        \"mode\": \"cfml\",\n        \"syntax\": [\"HTML+CFML\", \"ColdFusion\", \"ColdFusionCFC\"]\n    },\n    {\n        \"mode\": \"vue\",\n        \"syntax\": [\"vue\", \"Vue Component\"]\n    }\n],\n\n// Style to use for matched tags\n\"tag_style\": {\n    \"xml\": \"tag\",\n    \"xhtml\": \"tag\",\n    \"html\": \"tag\",\n    \"cfml\": \"tag\",\n    \"vue\": \"tag\",\n},\n\n// Scopes to exclude from tag searches.\n\"tag_scope_exclude\": {\n    \"xhtml\": [\"string\", \"comment\"],\n    \"html\": [\"string\", \"comment\"],\n    \"cfml\": [\"string\", \"comment\"],\n    \"vue\": [\"string\", \"comment\"]\n},\n\n// Optional closing HTML tags. You can use 'null' if it does not require a pattern.\n\"optional_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n    \"cfml\": \"cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n    \"vue\": \"colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr\",\n},\n\n// Tags that never have a closing.  You can use 'null' if it does not require a pattern.\n\"void_tag_patterns\": {\n    \"xml\": null,\n    \"xhtml\": null,\n    \"html\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"cfml\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\",\n    \"vue\": \"area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr\"\n},\n\n// Self closing tags.  Single tags that are closed like this <tag />\n\"self_closing_tag_patterns\": {\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": null,\n    \"cfml\": \"cf.+\",\n    \"vue\": null,\n},\n\n// Regex for tag name. Do not use capturing groups.\n\"tag_name\":\n{\n    \"xml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"xhtml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"html\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"cfml\": \"[\\\\w:\\\\.\\\\-]+\",\n    \"vue\": \"[\\\\w:\\\\.\\\\-]+\"\n},\n\n// HTML attributes.  Do not use capturing groups.\n\"attributes\":\n{\n    \"xml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"xhtml\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'))?\",\n    \"html\": \"[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\",\n    \"cfml\": \"[\\\\w\\\\-\\\\.:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\",\n    \"vue\": \"(?:@)?[\\\\w\\\\-:]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s\\\"'`=<>]+))?\"\n},\n\n// Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator '/' only.\n// Attributes and tag names are inserted using python string formatting:\n// the keyword 'attributes' and `tag_name` are used.\n\"start_tag\": {\n    \"xml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"xhtml\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"html\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\",\n    \"cfml\": \"<(%(tag_name)s)(?:(?:\\\\s+%(attributes)s)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\\\s*(/?)>\",\n    \"vue\": \"<(%(tag_name)s)(?:\\\\s+%(attributes)s)*\\\\s*(/?)>\"\n},\n\n// Regex for end/closing tag.  Only use a capturing group for name.\n\"end_tag\": {\n    \"xml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"xhtml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"html\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"cfml\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\",\n    \"vue\": \"</([\\\\w\\\\:\\\\.\\\\-]+)[^>]*>\"\n}\n\n}\n```\nbh_core.sublime-settings:\n```\n{\n    \"high_visibility_enabled_by_default\": false,\n    \"high_visibility_style\": \"outline\",\n    \"search_threshold\": 30000,\n    // Define region highlight styles\n    \"bracket_styles\": {\n        \"default\": {\n            \"icon\": \"none\",\n            \"color\": \"region.yellowish brackethighlighter.default\",\n            \"style\": \"outline\"\n        },\n    // This particular style is used to highlight\n    // unmatched bracket pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        \"color\": \"message.error\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"none\",\n        // \"color\": \"region.purplish\"\n        // \"style\": \"underline\"\n    }\n},\n\"brackets\": [\n    {\n        // Angle\n        \"name\": \"angle\",\n        \"open\": \"(<)(?=[^?%]|$)\",\n        \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"keyword.operator\",\n            \"source.ruby.rails.embedded.html\",\n            \"source.ruby.embedded.html\",\n            \"storage.type.function.arrow.js\"\n        ],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"XML\",\n            \"PHP\",\n            \"HTML (Rails)\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"HTML+CFML\",\n            \"ColdFusion\",\n            \"ColdFusionCFC\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\",\n            \"vue\",\n            \"Vue Component\"\n        ],\n        \"plugin_library\": \"bh_modules.tags\",\n        \"enabled\": true\n    }\n]\n\n}\n```\nChanging the syntax to Vue doesn't help either.\nWhat am I doing wrong?\nThanks.. ",
    "taggedboy": "If you read the comment, you'll come to know that it will take 1/10th time to read the above comment than readting the comment created following that template, and the meaning of the comment is also clear.\n. ",
    "orcinus": "Doesn't work for me in 3124 either.\n. Done.\n. Just updated to 3126.\nWorking again.\n. ",
    "eparisio": "Hi, thanks a lot for the answer, i will do the necessary edits.\ni will awaits for the second problem answer, about the error that occours even in normal html file with a clean installation, so not only in my syntax but even on standard html and jsp language.\nif you need more info, in case you can't replicate, i can make some other tests to find if is caused by some other plugin installed.\n. Ok, thanks. i made some edits a deactivate some plugin and seems to works again, probably it's a conflict with some other ones.\n. ",
    "D-side": "Surprisingly enough (for me, anyway) I've found a way to do this without modifying the source code, only using configuration.\nPutting the following in \"Tag Settings \u2013 User\" does just that for HTML:\njson\n{\n  \"tag_style\": {\n    \"html\": null\n  }\n}\nUndocumented, no promises, YMMV, etc.\n. ",
    "stoivo": "Is this something interesting if I implement it?\n. All I want to make it so you can have a command in command palette to open the popup. Than I can add it to al keybinding if I want to.\n. ### Requirements\nDo not delete this. Template must be followed or the issue will be marked Invalid and closed.\nPlease mark if you have done done this.  Mark by placing an x in the box: - [ ] -> - [x].  Support will not be offered without this.\n- [x] Search past issues and read the area of the documentation related to your specific question, issue, or request. Often the answer to your question is already found there.  You may also find the feature you are requesting already exists. It is okay if after doing this you are still confused, just mention what you didn't understand in the documentation below so we can make it better.\nDescription\nFor bugs, provide errors from console, examples etc.  For feature requests, describe the desired feature.  Be as detailed as possible. Vague issues/requests will be marked with Insufficient Details for about a week.  If not corrected, they will be marked Stale for about a week and then closed.\n\nIssue Support Info\n\nST ver.: 3126\nPlatform: osx\nArch: x64\nPlugin ver.: 2.21.6\nInstall via PC: False\nmdpopups ver.: 1.10.0\nbackrefs ver.: 1.0.post1\nmarkdown ver.: 2.6.6\npygments ver.: 2.1a0\njinja2 ver.: 2.8\n\nSteps to Reproduce Issue\nI would like to open the popup with needing to hover over the ending or start brachet. \nThese are the steps I would like to do.\n- I would like to move my cursor to bracket. \n- Open Command Palette\n- Find BracketHighlighter: Open offscreen bracket popup which would open the same popup. \nIs this more descriptive? \n. Is this better?\n. Thank you so  much for the work. I deeply appreciate your work and the time you spend writing  comments. \nThis is the exact behaviour I wanted to have.\n. Awsome!\n. ",
    "deathaxe": "Added bh_modules for both syntaxes and removed the (?i) tags.\n. This is actually a good idea. I unfortunatelly took the bashsupport.py as an example, which creates a list, too. So I would suggest to change it to use static tubles, too.\n. You are very thorough now, even more than me. ;-) Neither SublimeLinter nor your travis-ci displayed an linting error for this blank line. But I agree, with you and removed it to make code as clean as possible.\n. Just for clearance, I did not want to be unpolite with my comment, that's why I deleted it again. I was just a bit surprized as I did not expect to have missed something. I really had to search through the closed issues to learn what information and format you expect. The core issues clearly shows the gaps to fill. I didn't found them here and expected everything to be an description only. I know how hard it is to find the correct way to clearly document something. That's why I would suggest the following change to your current template to clearly show up gaps to fill and put descriptions in the background a little bit to make clear they are hints only.\n\nTemplate suggestion\nPlease read and fill out this template by replacing the instructions with appropriate information.  Make sure you've read: http://facelessuser.github.io/BracketHighlighter/contributing/.  If the template is not followed, the issue will be marked Invalid and closed.\nSearch past issues and read the area of the documentation related to your specific question, issue, or request. Often the answer to your question is already found there.  You may also find the feature you are requesting already exists. It is okay if after doing this you are still confused, just mention what you didn't understand in the documentation below so we can make it better.\n\nDescription\n...   what is the issue / request ?\n\nVague issues/requests will be marked with Insufficient Details for about a week.  If not corrected, they will be marked Stale for about a week and then closed.\nFor feature requests or proposals:\n- Clearly define in as much detail as possible how you imagine the feature to work.\n- Examples are also appreciated.\nFor bugs and support questions:\n- Describe the bug/question in as much detail as possible to make it clear what is wrong or what you do not understand.\n- Provide errors from console (if available).\n- Pictures or screencasts can also be used to clarify what the issue is or what the question is.\n- Provide links to 3rd party syntax highlighting package you are using if applicable.\n\nSupport Info\n...\n\nPaste version information from menu: Preferences->Package Settings->BracketHighlighter->Support Info. \n\nSteps to Reproduce Issue\n\nFirst step\nSecond step\nThird step\n\n\nProvide steps to reproduce the issue. Pictures are fine, but also provide code/text I can copy and paste in order to reproduce. Omit for feature requests and feature proposals.\n. \n",
    "drew-wallace": "Ah, thank you.\n. ",
    "JoeGutierrez": "@facelessuser Sorry, I moved it to: https://github.com/facelessuser/BracketHighlighter/issues/382\n. That would be awesome, thanks facelessuser!\n. I'll test it once you release the update and let you know if I find any other issues. Thanks.\n. ",
    "MaximPro": "What didn't you understand?\nWhat more details do you need?\nI used the following template for that above. \nFor feature requests or proposals:\nClearly define in as much detail as possible how you imagine the feature to work.\nExamples are also appreciated.\nFeature requests and proposals do not require reproduction steps.\nYou are human and should be able to understand what is meant. This isn't a template for a bot/machine.\nSo would be so kind and look into it?\nThe purpose of your addon is to help users finding errors and highlight brackets, isn't it?\nSo I just would like to help you, as an user, so that your addon is able to help even more people.\n. Ok well, let me state my position. \nI understand that you do that in your free time and owe the users nothing. this is done by you.\nAnd I also can understand that you need to know as much as possible about the bug or feature.\nHowever instead of just using your time to tell people to use the template, you should ask questions or prepare those questions in your template, because only questions give you awnsers or more details.\nAlso try more to understand, what the user wants. Because It seems a little bit like you've had enough by user requests etc and  every request pisses you off a little bit, because it means work to do, to think again in how to code that etc. Isn't it behind this? Ask yourself.\nBut thanks anyway for your help, I can now understand, why it isn't working properly, like I expected it to work, because it does not work in plain text. \nSo it would be great if you could just give us an option to let us activate your bracket highlighter even in plain text.\nTo be honest, I don't know how your highligther works so far, because I didn't saw it in action. I except it to highlight brackets, like the name already suggests. You can only highlight text either with color, size, bold or underscore.\nSo let us choose wich brackets and wich color to highlight it, if it isn't already there. \nWe only have these 3 types of brackets: ( ) [ ] { }\nWould be great to have it like this:\n( ) = bold green \n[ ] = bold #A52A2A\n{ } = violet\nWouldn't that be a fair option for both of us?\nSomething like that. It just should be easy!\nBecause other then programmers the user don't think deep into the matter. \nIt's more like activating the light be a switch, either it works or not. I'm also not a programmer, I'm more like an editor and understand the princibles behind the logic and a few things, however I don't speak python, javascript or c++ etc. Only html, css.\nBest way to have it is like that logic:\nUser installs bracket highlighter, a new tab appears with documentaries and how to change the options, maybe even a small tutorial screenplay (youtube) and done! Perfect for everyone, much more stress for you as well.\nSounds reasonable to me and it probably will be nice for future coming users as well as the users you have right now. Just to install it, have them see that it works\nThats just my thoughts as well, thanks man!\nHave a great time!\n. ",
    "jfcherng": "@facelessuser sorry about that. updated.\n. @facelessuser Thanks. I assign a position shift to built-in rules and it resolves my problem perfectly. :+1: \njavascript\n    \"user_brackets\": [\n        // shift positions of built-in rules\n        {\"name\": \"curly\", \"position\": 50},\n        {\"name\": \"round\", \"position\": 51},\n        {\"name\": \"square\", \"position\": 52},\n        {\"name\": \"php_angle\", \"position\": 53},\n        {\"name\": \"angle\", \"position\": 54},\n        {\"name\": \"cssedit_groups\", \"position\": 55},\n        {\"name\": \"ruby_embedded_html\", \"position\": 56},\n        {\"name\": \"ruby\", \"position\": 57},\n        {\"name\": \"c_compile_switch\", \"position\": 58},\n        {\"name\": \"php_keywords\", \"position\": 59},\n        {\"name\": \"erlang\", \"position\": 60},\n        {\"name\": \"bash\", \"position\": 61},\n        {\"name\": \"fish\", \"position\": 62},\n        {\"name\": \"lua\", \"position\": 63},\n        {\"name\": \"latexenv\", \"position\": 64},\n        {\"name\": \"pascal\", \"position\": 65},\n        {\"name\": \"elixir\", \"position\": 66},\n        {\"name\": \"cmake\", \"position\": 67},\n        {\"name\": \"s840d_gcode\", \"position\": 68},\n        {\"name\": \"s840d_hmi\", \"position\": 69},\n...\n. @facelessuser I was doing that because position 0 is curly by default but assigning 0 would cause nothing to happen just like there is no position assignment. Assigning 1 works as expected so I am not sure that assigning 0 triggers a bug or not.\n\n\n. ",
    "raimondsf": "That was my mistake. The code wasn't correctly written.. ",
    "Armour": "I just found this bug lol, thx!. ",
    "kangarooo": "Yes it was in there but still wasnt showing. I thought that https://packagecontrol.io/ was already embedded in sublime since i could find and install a lot packages but this one wasnt able to until i installed again. And even 2 times. Even got sublime to crash. I have no idea what made it finally to work and appear since appeared after 2nd time installing https://packagecontrol.io/ and restarting programm again.\nBut trying to remove channel says that only 1 channel is added. So that means i didnt installed 3rd time but brackets appeared without logic i saw.. That was one issue. This is another. That one works. This one is not showing blocks like in screenshot. Is my screenshot correct?\nI have installed Sublime 3 on windows 10 yesterday coming from atom. Today installing plugins.\n- ST ver.: 3126\n- Platform: windows\n- Arch: x64\n- Plugin ver.: 2.23.3\n- Install via PC: True\n- mdpopups ver.: 1.13.1\n- backrefs ver.: 1.0.post1\n- markdown ver.: 2.6.6\n- pygments ver.: 2.1a0\n- jinja2 ver.: 2.8\n. ",
    "LucaMoschella": "That's great, thanks!. Yeah, the problem is that at the moment I do not have time to learn how to write the definitions of shortcuts...\nWould be great if in the \"shortcuts examples\" there were the ones that are supposed to be overrided.\neg. the one that \"expands\" the selection to the next pair of brackets (CTRL+SHIFT+SPACE if I remember well). I see. No... it's not there. \nThere is the shortcut that \"Select text between brackets\" and if the text is already selected, it deselects the text.\nI was thinking to have a similar behavior of the CTRL+SHIFT+SPACE, that is \"expand the current selection\" to the next pair of brackets (or scope). \neg. (where | is the cursor)\nInitial situation: { test1 \" te|st2 \" test3 }\n1\u00b0 press : {test1\"te|st2\"test3}\n2\u00b0 press: {test1\"te|st2\"test3}\n3\u00b0 press: {test1\"te|st2\"test3}\n4\u00b0 press: { test1\"te|st2\"test3}\n. I get the impression that sharing your shortcuts (related to BH), by inserting them in the example file, would be a huge help :D\nThanks a lot!. ",
    "Drarok": "This feature seems like an absolute must-have! Installing BracketHighlighter with the recommended settings disables the built-in ctrl+m and ctrl+shift+m shortcuts for jumping between brackets, and selecting between brackets.\nThis should definitely be included in the example keymap, at the very least.. ",
    "hxss": "Seems to have found.\nIn bh user config:\n\"bracket_styles\": {\n    \"default\": {\n        \"style\": \"solid\"\n    },\n}\nAnd in theme:\n<dict>\n            <key>name</key>\n            <string>Bracket Default</string>\n            <key>scope</key>\n            <string>brackethighlighter.default</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#f00</string>\n            </dict>\n        </dict>\n. ",
    "kanlukasz": "Information for people looking for a solution based on ST3 JSON (.sublime-color-scheme)\nExample with brackets:\nA. In BH Bracket Settings (bh_core.sublime-settings) put\n\"user_bracket_styles\": {\n    \"curly\": {\n        \"color\": \"brackethighlighter.curly\",\n    }\n},\nand change bracket_styles { default { style }} from underline to solid\nB. In your Color Scheme (xxxxxx.sublime-color-scheme)\n```\n\"rules\":\n[\n    {\n        \"scope\": \"brackethighlighter.curly\",\n        \"background\": \"gray\"\n    }\n]\n```\n. Ok, i understand. Thanks for your answer.\nBelow are two examples of this problem:\nExample one:\n<?php while ($row = mysqli_fetch_array($results)) { ?>\n    <tr>\n        <td><?php echo $row['name']; ?></td>\n        <td><?php echo $row['address']; ?></td>\n        <td>\n            <a href=\"index.php?edit=<?php echo $row['id']; ?>\" class=\"edit_btn\">Edit</a>\n        </td>\n        <td>\n            <a href=\"server.php?del=<?php echo $row['id']; ?>\" class=\"del_btn\">Delete</a>\n        </td>\n    </tr>\n<?php } ?>\nExample two:\n<?php while ($row = mysqli_fetch_array($results)) { ?>\n    <div>\n        <img src=\"/assets/uploads/<?php echo $row['foto']; ?>.png\">\n    </div>\n<?php } ?>\nIf you solve this problem in the future, I will be grateful if you write back here. Thanks a lot and thank you for your time.. ### Example three:\nIn this example its about html syntax only. Inline css style does not highlight matching double quote\n<button class=\"btn\" type=\"submit\" name=\"update\" style=\"background:#556B2F;\">update</button>. ",
    "gavalierm": "Here is my sample code:\nhtml\n        <div id=\"logo\">\n            <a href=\"/<?php echo $html->locales['selected']['region']; ?>\"><img src=\"/img/logo/logo_skarper_red_black_vert.svg\">\n                <div class=\"slogan\">Professional woodchipper</div>\n            </a>\n            <div class=\"wellcome_message\">\n                <?php echo $html->messages['wellcome_message']; ?>\n            </div>\n            <div class=\"wellcome_note\">\n                <?php echo $html->description; ?>\n            </div>\n        </div>\nHere is my user settings:\n```json\n{\n    \"bracket_styles\": {\n\"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        \"style\": \"background\"\n    }\n}\n\n}\n```\nHere is my scheme edit:\nxml\n        <dict>\n            <key>name</key>\n            <string>Tag nam</string>\n            <key>scope</key>\n            <string>brackethighlighter.tag</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#000000</string>\n                <key>background</key>\n                <string>#ffeb3b</string>\n            </dict>\n        </dict>\nMy theme is: Monokai. Here is video of behavior (stored on cloud, because have 60MB) - please watch it if it possible\nhttp://www.uschovna.cz/zasilka/LI2J9EYN5GKKV75T-2B9/\n. Sorry maybe i dont uderstand what you mean, i use BracketHighlighter. Is this an answer?\n\nMaybe you mean \"PHP syntax\" ?\n\n. Is default. I dont use anything special on sublime. \n\n. :O is truth, lol, sorry i dont realize that.\nSo, this is my all code\n```html\n<?\n$html->messages['wellcome_message'] = get_translation_phrase(\"dd11d6a6739913f5\");\n$html->description = get_translation_phrase(\"257c66fd3660a1a3\");\n//echo \" \";\n?>\n    <!DOCTYPE html>\n    \n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Skarper - Professional woodchipper | Skarper.AT</title>\n    <meta name=\"description\" content=\"<?php echo $html->description; ?>\" />\n    <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img/logo/favicon7/apple-icon-57x57.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img/logo/favicon7/apple-icon-60x60.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img/logo/favicon7/apple-icon-72x72.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img/logo/favicon7/apple-icon-76x76.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img/logo/favicon7/apple-icon-114x114.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img/logo/favicon7/apple-icon-120x120.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img/logo/favicon7/apple-icon-144x144.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img/logo/favicon7/apple-icon-152x152.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img/logo/favicon7/apple-icon-180x180.png\">\n    <link rel=\"icon\" type=\"image/png\" href=\"/img/logo/favicon7/favicon-96x96.png\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <?php \n//hreflangs\n\nforeach($html->locales['all_locales'] as $locale_key => $locale ){\n    echo ''.\"\\n\";\n  }\n  ?>\n        \n\n",
    "z-engine": "Thx, exactly what is needed\n. ",
    "tansongyang": "Thanks for the quick reply. Setting no_outside_adj gets closer, and your explanation of how BH works is helpful.\nIt just occurred to me that I may have over complicated my original description. I believe the behavior I'm looking for boils down to getting the \"Find Matching Offscreen Bracket\" \"jump to bracket\" link behavior as its own command. That is:\n\nHow feasible is it to get the behavior of the link separated out into its own command? I took a look at bh_popup.py, and it wasn't clear to me how the jumping happens.. Great, that's exactly it. Thanks for the help! I'll fiddle with a custom plugin and post here if I can get it working.. Thanks for all the help. Basically, I removed the parts of bracketselect.py that I didn't need, and I used self.left.end - 1 instead of self.left.end\nUser\\bh_modules\\vimovetobracket.py\n```Python\nimport BracketHighlighter.bh_plugin as bh_plugin\nimport sublime\nclass ViMoveToBracket(bh_plugin.BracketPluginCommand):\n    \"\"\"\n    Move to Bracket plugin for Vintage.\n    Based on Select Bracket plugin.\n    \"\"\"\ndef run(self, edit, name):\n    \"\"\"\n    Jump to matching bracket\n    \"\"\"\n\n    self.current_left, self.current_right = self.selection[0].begin(), self.selection[0].end()\n    first, last = self.left.end, self.right.begin\n\n    first, last = self.select_match(name, first, last)\n\n    self.selection = [sublime.Region(first, last)]\n\n\ndef select_match(self, name, first, last):\n    \"\"\"Select the matching bracket.\"\"\"\n\n    if self.left.end != self.right.end:\n        first, last = self.right.begin, self.right.begin\n        if first == self.current_left and last == self.current_right:\n            self.refresh_match = True\n            first, last = self.left.end - 1, self.left.end - 1\n    else:\n        first, last = self.right.end, self.right.end\n        if first == self.current_left and last == self.current_right:\n            self.refresh_match = True\n    return first, last\n\ndef plugin():\n    \"\"\"Make plugin available.\"\"\"\nreturn ViMoveToBracket\n\n```\nUser\\Default (Windows).sublime-keymap\nJSON\n{\n    \"keys\": [\"ctrl+m\"],\n    \"command\": \"bh_key\",\n    \"args\": {\n        \"lines\" : true,\n        \"plugin\": {\n            \"type\": [\"__all__\"],\n            \"command\": \"User.bh_modules.vimovetobracket\"\n        }\n    }\n},\n. I've added a gist. Any updates I make will go there.. ",
    "tobiashochguertel": "Hopefully some developer with python knowledge can fix the thing at OmniMarkupPreviewer and create there an pull request.\nOkay. Thanks for pointing this out.. ",
    "swashata": "Yes that is correct. Sorry for the duplicate. I was searching with Object Operator :( You are right about the changes in default PHP syntax as this is exactly what I am using.\nIt is great to know that you have resolved this. Would be waiting for the release.. Great. Working seamlessly now. \ud83d\ude04 . @facelessuser I have added the following scope to the exclusion list and it started working. punctuation.accessor.arrow.php. Do I need to send in a pull request?\nEDIT:\nPlease review #446 . ",
    "jsieler": "Is it possibe that the issue still exists? Using last version of ST and BH from Package Control. Some brackets are still not highlited, and it looks like that \">\" cause the problem.. ",
    "rusterholz": "A restart of Sublime Text does turn out to solve the issue. Thank you.\nIs the shrug an error coming from BracketHighlighter? If so, could it be made more user-friendly?\nAlso, could the instruction to restart Sublime Text be added to the Package Control message? I've never had to do that for any other ST3 plugin I've ever installed, so it seems like a nonstandard requirement.. Thanks. It was a really frustrating error. If you can add some additional color to the failure, it would go a long way. Not that you should have to make up for mdpopups' shortcomings, but I honestly thought that was the content of the Guide for a few seconds there.\nI appreciate the help. I'll go ahead and close.\nIf you're in the US, have a good holiday weekend!. ",
    "Jakitto": "@r-stein Thanks, that works!. ",
    "jonasflint": "booooo.   throws tomoatoes. ",
    "lwolfsonkin": "Awesome!\nAlso, not totally sure if this matters or not, but I just noticed that specifically in bh_wrapping.sublime-settings, all the lines end on the carriage return (CR) character. Not really sure what effect that has. I've just never really seen inconsistent line endings. (Usually just line feed (LF) I think.). ",
    "braver": "While I understand why you have a template, to be honest I simply wouldn't have reported the issue. \nThanks for fixing it though!. Sorry, my wording could've been more friendly. I really appreciate the effort you put into all your packages and contributions to the community at large.\nHowever, I didn't want any of your time. This isn't a support request. I catched a bug and hopefully helped improve the package indirectly. I could have not spent the effort to do so. If you're requiring a higher quality of contribution that's ok, I'm just letting you know that it might also prevent such contributions. \nAgain, I understand the need to guard against one-line babelfish support requests. However, I think my report here was clear enough that you were able to fix it quickly. I wasn't going to do a full report with version numbers, installed packages and steps to reproduce for something as obvious as this. If the template were a hard requirement, it would have prevented me and will prevent others from trying to help you catch bugs. If that's ok for you, it's ok for me too.. Sheesh, did I get out of bed on the wrong side today or what? You make excellent points and I do not disagree. Let me stress I mean no disrespect at all. \nI'm just trying to make a practical point here. I ran into a bug while trying to accomplish something else (it was office hours here, I wanted to be at least somewhat productive), and wanted to let you know quickly. If the template was a hard requirement, I would have dropped it and let someone else find the bug. That's all. I totally get that the template is a minor annoyance versus the value it has for you, but the practical reality will also be it reduces reports. And I think my report was good enough without the template, otherwise I wouldn't have made it. I got the hint by the template being there in the first place. \nIt's drive-by-issue-reporting and if not done well it's a time sink for the maintainer. I hope I didn't waste your time by being snarky and am super sorry if you feel disrespected. \nI'm sorry if I came across as annoyed in any way, I'm not. If anyone deserves respect in this community it's you man. If I actually needed a response and expected the bug to be hard to reproduce I would have saved till I had time and put in animated gifs and a complete novel with steps to reproduce. I will next time and will try to put \ud83e\udd84 's in there or something. . ",
    "DrDonkey": "Gotcha\nThanks for the info.. @r-stein does it work?. @r-stein So what do i need to do, I didn't clearly understand the solution.. ",
    "teehemkay": "First thank you very much for the quick feedback!\n\nBH is looking for valid HTML. What you have posted above is valid JSX, not valid HTML. You'd have to provide something that is supportive of a JSX specific HTML.\n\nUnless I'm mistaken, I've tried to capture in my regexes, the places where I think JSX differs from HTML (the self-closing tag name and the attributes)\n\nYou can play with creating a new HTML profile with regex for an HTML that. It seems that is the path that you are on.\n\nJust to clarify, when you say \"new HTML profile\" do you mean creating a new tag-mode, like I'm trying to do or is that something else entirely?\n\nI'll say this. I see this in your regex {[^}]+}. I am assuming you are trying to capture curly brackets. But you need to escape curly brackets in regex: { etc. Further, you need to escape backslashes in JSON strings: \\{ etc.\n\nYes. In JSX attribute values can be specified within curly braces e.g. {1 + 1} or {...some_data}. Thank you for the heads up re: escaping curly brackets. I'll escape them. I was wondering though, is BH using the Python re module? I'm asking because I've tested regex with unescaped { using the python command line and it does seem to work \ud83d\ude32 \n\nSecond, order of regex rules is important. BH will already try and target {} pairs. You may need to inject a JSX specific rule that is separate from the default HTML rule and have it before the {} rule so that it doesn't gobble up your curly brackets before they can be evaluated in your custom HTML rule.\n\nAre referring to Bracket Rule Management? \nI've just noticed that on my machine, none of the tags (html, cfml, etc) appear as a rules But BH still highlights tags without problem in an HTML file...\nThis is what I get when I run the BracketHighlighter: (Debug) Filter Rules by Key using the position key. \njson\n        {\"name\": \"curly\", \"position\": 0},\n        {\"name\": \"round\", \"position\": 1},\n        {\"name\": \"square\", \"position\": 2},\n        {\"name\": \"php_angle\", \"position\": 3},\n        {\"name\": \"angle\", \"position\": 4},\n        {\"name\": \"cssedit_groups\", \"position\": 5},\n        {\"name\": \"ruby_embedded_html\", \"position\": 6},\n        {\"name\": \"ruby\", \"position\": 7},\n        {\"name\": \"c_compile_switch\", \"position\": 8},\n        {\"name\": \"php_keywords\", \"position\": 9},\n        {\"name\": \"erlang\", \"position\": 10},\n        {\"name\": \"bash\", \"position\": 11},\n        {\"name\": \"fish\", \"position\": 12},\n        {\"name\": \"lua\", \"position\": 13},\n        {\"name\": \"latexenv\", \"position\": 14},\n        {\"name\": \"pascal\", \"position\": 15},\n        {\"name\": \"elixir\", \"position\": 16},\n        {\"name\": \"cmake\", \"position\": 17},\n        {\"name\": \"s840d_gcode\", \"position\": 18},\n        {\"name\": \"s840d_hmi\", \"position\": 19}\nAs opposed to\njson\n[\n        {\"name\": \"curly\", \"position\": 0},\n        {\"name\": \"round\", \"position\": 1},\n        {\"name\": \"square\", \"position\": 2},\n        {\"name\": \"html\", \"position\": 3},\n        {\"name\": \"cfml\", \"position\": 4},\n        {\"name\": \"php_angle\", \"position\": 5},\n        {\"name\": \"angle\", \"position\": 6},\n        {\"name\": \"cssedit_groups\", \"position\": 7},\n        {\"name\": \"ruby_embedded_html\", \"position\": 8},\n        {\"name\": \"ruby\", \"position\": 9},\n        {\"name\": \"c_compile_switch\", \"position\": 10},\n        {\"name\": \"php_keywords\", \"position\": 11},\n        {\"name\": \"erlang\", \"position\": 12},\n        {\"name\": \"bash\", \"position\": 13},\n        {\"name\": \"fish\", \"position\": 14},\n        {\"name\": \"mylang\", \"position\": 15}\n    ]\nfrom the documentation. OK, quick update. I've now spend spent an inordinate amount of time on this but to no avail.\nI think I'm going to give up on this one.\nThanks again for you help and please feel free to close the issue if you wish.\n. ",
    "Xerocry": "https://packagecontrol.io/packages/REXX\nI've tried to point different cases and names, but still no result... Yeah, it wrap something in do-end, but I want to highlight do-end construct, like in Ruby!. ",
    "chriscarpenter12": "Ok seems to be fine after restarting. Thanks. ",
    "englishextra": "Try to paste in ST3 3143 that code and see what happens \u2014 ?\nSatisfy Dependencies wont help.\nphotoswipe.com\nFind  line\njs\nvar openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {\ndo you see the ending curly bracket?\n```js\n(function() {\n\n    var initPhotoSwipeFromDOM = function(gallerySelector) {\n\n        var parseThumbnailElements = function(el) {\n            var thumbElements = el.childNodes,\n                numNodes = thumbElements.length,\n                items = [],\n                el,\n                childElements,\n                thumbnailEl,\n                size,\n                item;\n\n            for(var i = 0; i < numNodes; i++) {\n                el = thumbElements[i];\n\n                // include only element nodes \n                if(el.nodeType !== 1) {\n                  continue;\n                }\n\n                childElements = el.children;\n\n                size = el.getAttribute('data-size').split('x');\n\n                // create slide object\n                item = {\n                    src: el.getAttribute('href'),\n                    w: parseInt(size[0], 10),\n                    h: parseInt(size[1], 10),\n                    author: el.getAttribute('data-author')\n                };\n\n                item.el = el; // save link to element for getThumbBoundsFn\n\n                if(childElements.length > 0) {\n                  item.msrc = childElements[0].getAttribute('src'); // thumbnail url\n                  if(childElements.length > 1) {\n                      item.title = childElements[1].innerHTML; // caption (contents of figure)\n                  }\n                }\n\n\n                var mediumSrc = el.getAttribute('data-med');\n                if(mediumSrc) {\n                    size = el.getAttribute('data-med-size').split('x');\n                    // \"medium-sized\" image\n                    item.m = {\n                        src: mediumSrc,\n                        w: parseInt(size[0], 10),\n                        h: parseInt(size[1], 10)\n                    };\n                }\n                // original image\n                item.o = {\n                    src: item.src,\n                    w: item.w,\n                    h: item.h\n                };\n\n                items.push(item);\n            }\n\n            return items;\n        };\n\n        // find nearest parent element\n        var closest = function closest(el, fn) {\n            return el && ( fn(el) ? el : closest(el.parentNode, fn) );\n        };\n\n        var onThumbnailsClick = function(e) {\n            e = e || window.event;\n            e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n            var eTarget = e.target || e.srcElement;\n\n            var clickedListItem = closest(eTarget, function(el) {\n                return el.tagName === 'A';\n            });\n\n            if(!clickedListItem) {\n                return;\n            }\n\n            var clickedGallery = clickedListItem.parentNode;\n\n            var childNodes = clickedListItem.parentNode.childNodes,\n                numChildNodes = childNodes.length,\n                nodeIndex = 0,\n                index;\n\n            for (var i = 0; i < numChildNodes; i++) {\n                if(childNodes[i].nodeType !== 1) { \n                    continue; \n                }\n\n                if(childNodes[i] === clickedListItem) {\n                    index = nodeIndex;\n                    break;\n                }\n                nodeIndex++;\n            }\n\n            if(index >= 0) {\n                openPhotoSwipe( index, clickedGallery );\n            }\n            return false;\n        };\n\n        var photoswipeParseHash = function() {\n            var hash = window.location.hash.substring(1),\n            params = {};\n\n            if(hash.length < 5) { // pid=1\n                return params;\n            }\n\n            var vars = hash.split('&');\n            for (var i = 0; i < vars.length; i++) {\n                if(!vars[i]) {\n                    continue;\n                }\n                var pair = vars[i].split('=');  \n                if(pair.length < 2) {\n                    continue;\n                }           \n                params[pair[0]] = pair[1];\n            }\n\n            if(params.gid) {\n                params.gid = parseInt(params.gid, 10);\n            }\n\n            return params;\n        };\n\n        var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {\n            var pswpElement = document.querySelectorAll('.pswp')[0],\n                gallery,\n                options,\n                items;\n\n            items = parseThumbnailElements(galleryElement);\n\n            // define options (if needed)\n            options = {\n\n                galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n                getThumbBoundsFn: function(index) {\n                    // See Options->getThumbBoundsFn section of docs for more info\n                    var thumbnail = items[index].el.children[0],\n                        pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n                        rect = thumbnail.getBoundingClientRect();\n\n                    return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};\n                },\n\n                addCaptionHTMLFn: function(item, captionEl, isFake) {\n                    if(!item.title) {\n                        captionEl.children[0].innerText = '';\n                        return false;\n                    }\n                    captionEl.children[0].innerHTML = item.title +  '<br/><small>Photo: ' + item.author + '</small>';\n                    return true;\n                },\n\n            };\n\n\n            if(fromURL) {\n                if(options.galleryPIDs) {\n                    // parse real index when custom PIDs are used \n                    // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n                    for(var j = 0; j < items.length; j++) {\n                        if(items[j].pid == index) {\n                            options.index = j;\n                            break;\n                        }\n                    }\n                } else {\n                    options.index = parseInt(index, 10) - 1;\n                }\n            } else {\n                options.index = parseInt(index, 10);\n            }\n\n            // exit if index not found\n            if( isNaN(options.index) ) {\n                return;\n            }\n\n\n\n            var radios = document.getElementsByName('gallery-style');\n            for (var i = 0, length = radios.length; i < length; i++) {\n                if (radios[i].checked) {\n                    if(radios[i].id == 'radio-all-controls') {\n\n                    } else if(radios[i].id == 'radio-minimal-black') {\n                        options.mainClass = 'pswp--minimal--dark';\n                        options.barsSize = {top:0,bottom:0};\n                        options.captionEl = false;\n                        options.fullscreenEl = false;\n                        options.shareEl = false;\n                        options.bgOpacity = 0.85;\n                        options.tapToClose = true;\n                        options.tapToToggleControls = false;\n                    }\n                    break;\n                }\n            }\n\n            if(disableAnimation) {\n                options.showAnimationDuration = 0;\n            }\n\n            // Pass data to PhotoSwipe and initialize it\n            gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);\n\n            // see: http://photoswipe.com/documentation/responsive-images.html\n            var realViewportWidth,\n                useLargeImages = false,\n                firstResize = true,\n                imageSrcWillChange;\n\n            gallery.listen('beforeResize', function() {\n\n                var dpiRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;\n                dpiRatio = Math.min(dpiRatio, 2.5);\n                realViewportWidth = gallery.viewportSize.x * dpiRatio;\n\n\n                if(realViewportWidth >= 1200 || (!gallery.likelyTouchDevice && realViewportWidth > 800) || screen.width > 1200 ) {\n                    if(!useLargeImages) {\n                        useLargeImages = true;\n                        imageSrcWillChange = true;\n                    }\n\n                } else {\n                    if(useLargeImages) {\n                        useLargeImages = false;\n                        imageSrcWillChange = true;\n                    }\n                }\n\n                if(imageSrcWillChange && !firstResize) {\n                    gallery.invalidateCurrItems();\n                }\n\n                if(firstResize) {\n                    firstResize = false;\n                }\n\n                imageSrcWillChange = false;\n\n            });\n\n            gallery.listen('gettingData', function(index, item) {\n                if( useLargeImages ) {\n                    item.src = item.o.src;\n                    item.w = item.o.w;\n                    item.h = item.o.h;\n                } else {\n                    item.src = item.m.src;\n                    item.w = item.m.w;\n                    item.h = item.m.h;\n                }\n            });\n\n            gallery.init();\n        };\n\n        // select all gallery elements\n        var galleryElements = document.querySelectorAll( gallerySelector );\n        for(var i = 0, l = galleryElements.length; i < l; i++) {\n            galleryElements[i].setAttribute('data-pswp-uid', i+1);\n            galleryElements[i].onclick = onThumbnailsClick;\n        }\n\n        // Parse URL and open gallery if it contains #&pid=3&gid=1\n        var hashData = photoswipeParseHash();\n        if(hashData.pid && hashData.gid) {\n            openPhotoSwipe( hashData.pid,  galleryElements[ hashData.gid - 1 ], true, true );\n        }\n    };\n\n    initPhotoSwipeFromDOM('.demo-gallery');\n\n})();\n\n```. @facelessuser thanks \nAdded in %AppData%\\Roaming\\Sublime Text 3\\Packages\\User\\bh_core.sublime-settings:\njson\n{\n    \"ignore_threshold\": true\n}\nI didnt see the popup, because you have to wait for some time for it to appear.\nThe existence of search threshold is not obvious. \nThe README needs mentioning about this feature, and explanation why is it so.\nI use Notepad++, so I had no idea of such a thing could have existed.. ",
    "lang-ji": "me too... ",
    "guylepage3": "Ok cool. responding now... So i am trying to have my HTML tags and tag endings highlighted. \nBut as you can see by the following screen shot i am not seeing any highlighting going on\n\nI have applied the following settings to my Sublime Text User Settings as seen here: http://facelessuser.github.io/BracketHighlighter/usage/\n\"match_brackets\": false,\n    \"match_brackets_angle\": false,\n    \"match_brackets_braces\": false,\n    \"match_brackets_content\": false,\n    \"match_brackets_square\": false,\n    \"match_tags\": false\nAn FYI: Before I installed the above Sublime Text User Settings I did see a dotted underline beneath the HTML tags.\nThen I have tried to apply these \"Custom\" BracketHighlighter settings as seen below:\n```\n{\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"outline\"\n    },\n// This particular style is used to highlight\n// unmatched bracket pairs.  It is a special\n// style.\n\"unmatched\": {\n    \"icon\": \"question\",\n    // \"color\": \"brackethighlighter.unmatched\",\n    \"style\": \"outline\"\n},\n// User defined region styles\n\"curly\": {\n    \"icon\": \"curly_bracket\"\n    // \"color\": \"brackethighlighter.curly\",\n    // \"style\": \"underline\"\n},\n\"tag\": {\n    \"icon\": \"tag\",\n    // \"endpoints\": true,\n    // \"color\": \"brackethighlighter.tag\",\n    \"style\": \"outline\"\n}\n\n}\n.\n- ST ver.: 3143\n- Platform: osx\n- Arch: x64\n- Plugin ver.: 2.25.0\n- Install via PC: True\n- mdpopups ver.: 2.1.1\n- backrefs ver.: 2.1\n- markdown ver.: 2.6.9\n- pygments ver.: 2.1a0\n- jinja2 ver.: 2.8\n```. Ahh... i see.. no worries my friend. i barely sleep as it is so i cannot assist with this. if you have someone assist and update, please let me know..\nI have to say.. I am a fan of BracketHighlighter already.. helps me out in so many areas.\nThank you for your hard work. It's GREATLY appreciated. Kudos.\n. ",
    "htchaan": "\nI can get the JSX HTML highlight working with these settings:\nbh_tag.sublime-settings:\njson\n{\n  \"tag_mode\": [\n    {\n      \"first_line\": \"^[ \\\\t]*<\\\\?xml\",\n      \"mode\": \"xhtml\",\n      \"syntax\": [\n        \"JavaScript (Babel)\"\n      ]\n    },\n    {\n      \"mode\": \"html\",\n      \"syntax\": [\n        \"JavaScript (Babel)\"\n      ]\n    }\n  ]\n}\nbh_core.sublime-settings:\njson\n{\n  \"align_content_highlight_bar\": true,\n  \"content_highlight_bar\": true,\n  \"user_brackets\": [\n    {\n      \"name\": \"jsx_angle\",\n      \"open\": \"(<)(?=[^?%]|$)\",\n      \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n      \"style\": \"angle\",\n      \"scope_exclude\": [\n        \"string\",\n        \"comment\",\n        \"keyword.operator\",\n        \"source.ruby.rails.embedded.html\",\n        \"source.ruby.embedded.html\",\n        \"storage.type.function.arrow.js\",\n        \"punctuation.accessor.php\",\n        \"punctuation.accessor.arrow.php\"\n      ],\n      \"language_filter\": \"whitelist\",\n      \"language_list\": [\n        \"JavaScript (Babel)\"\n      ],\n      \"plugin_library\": \"bh_modules.tags\",\n      \"enabled\": true\n    }\n  ]\n}. ",
    "alannaidon": "\nYou have to restart sublime after installing the plugin. No other action is needed. If you \"got it working\", it was most likely because you finally restarted, not because of settings tweaks.  \n\nI did. Many times actually, nothing changed.  \n\nI'm not sure what you are asking for. I see you've enabled high visibility mode. I see that you are overriding all the scope brackets with your own (why?)  \n\nThe reason why I started to tweek and enabled high visibility is exactly because nothing had changed.\nMay this be cause by my theme ?    \nI installed > Restarted > Nothing changed > started to tweek  \nThis is what happen with a Fresh Installation + Restart sublime:\n \nYou can see the brackets on the line number, but there is no highlight on the code.\n. ### Description  \n\n... what is the issue / request ?   \n\nWhen Install the plugin and restart sublime, the plugin doesn't work properly. It only shows the brackets on the line number. So I decided to try to tweek the package configuration, without success.  What I want is to highlight all block of code inside selected brackets, like the \"line_highlight\" but with the brackets.\nSupport Info\nI'm currently using:  \n\nMaterialize Theme  \nSublime Build 3126    \nPlugin ver: 2.25.0  \nmdpopups ver: 2.1.1  \nbackrefs ver: 2.1  \nmarkdown ver: 2.6.9  \npygments ver: 2.1a0  \njinja2 ver: 2.8  \n\nSteps to Reproduce Issue\n1- Ctrl + Shift + p > Install Package > BracketHighlighter > Install;\n2 - Restart Sublime Text;\n3 - Without success I changed the config file as shown in the first post.\n. ",
    "neilalex": "Ah, good question. Let me try that.. It's not coming is as None... it's coming in incorrectly as the original file view. (It's been marked as an ST3 bug... see SublimeTextIssues/Core#349 and SublimeTextIssues/Core#289.). ",
    "ikenfin": "Sorry for duplicate, did'nt see #423.:( (Need more sleep). ",
    "Fossil01": "\nST ver.: 3152\nPlatform: osx\nArch: x64\nPlugin ver.: 2.25.1\nInstall via PC: True\nmdpopups ver.: 3.0.0\nbackrefs ver.: 2.1\nmarkdown ver.: 2.6.9\npygments ver.: 2.1a0\njinja2 ver.: 2.8\n\nSee here: https://imgur.com/j5uPEjW. Roger. ",
    "ninja542": "It's html with vue modifiers, so I'm pretty sure it's HTML. I fixed it, apparently <path something something /> doesn't highlight correctly, and I changed it into <path></path> and now everything works. I think all the svg tags could either be self closing or explicitly closed with another tag. (MathML too apparently, but idk if that's relevant)\nSo I guess there are two ways, you can make the highlighter skip the closing tag or you can make the highlighter highlight the ending />\nI would personally like to have the end highlighted but it might not make sense to other people, maybe make it a preference flag?\nI think that you should add the XHTML highlighting stuff into HTML for the SVG and MathML although that might be a bit of an edge case. But it'll be more general and there's a lot of tags in SVG, and it seems like every svg tag can self close, so you don't have to code every single svg tag into your plugin.. thank you!. ",
    "h0rn3z0r": "@facelessuser,\nExcuse me for bumping an old issue, but Vue support is still an opened question due to this specific case. You found out that self-closing <path /> tag was causing problem, and proposed to add it to self_closing_tag_patterns.\nBut Vue style guide recommends to remove ANY closing tag if tag itself has no content (whether its <div/> or <MyComponent/>), which leads to indeterminate amount of self-closing tags and makes impossible to use suggested option.\nSo the title should be much wider than just recognizing table or path tag. And my question is how difficult it would be to support unlimited amount of self-closing tags? Because 'extending' HTML syntax with Vue was rather easy (thanks to this comment and \"user_brackets\" option), it required only additional '@' symbol in regex.\n. ",
    "benfrain": "@facelessuser brilliant, thanks for the swift resolution. Back up and running perfectly now \ud83d\udc4d . ",
    "mtomov": "Hey @facelessuser, just wanted to say thanks - the new bracket highlighting colors are just awesome! Big fan of the thick underlines underneath, and the deep yellow color for tags is just lovely, thanks a lot!\n\n\n. ",
    "corneliusio": "Sorry mate, went through each item in the template and made sure to include the relevant info I had available to me. Have gone back to make sure the headers are still in place and info for them correctly placed.\nGuess I really just wanted to make sure there was no logic that installs the package differently depending on system that could be going wonky because I've made sure I've completely wiped it from my machine (purged all BH settings and package file, as well as clear out Package Control's cache and remove all deps listed here in my packages directory).\nIf there's definitely no chance there's anything weird with an install script, that's fine. Just wanted to make sure it couldn't be a BH issue.. ",
    "green-lizzy": "@corneliusio I just had brackethighlighter silently fail to install because it failed to pull in dependencies from bitbucket.   It was evidentially  a transient problem with bitbucket because a retry an hour later succeeded.  . ",
    "x9prototype": "So, the example was simplified to illustrate the problem, but a common design pattern to check data is return if or return unless in ruby (unless is basically a !if and will match with end \"brackets\" as well).  See the Ruby Style Guide's No Nested Conditionals Section (rubocop a ruby linter follows this style guide).  I have pulled some code from the style guide and pasted it below:\n```ruby\nbad\ndef compute_thing(thing)\n  if thing[:foo]\n    update_with_bar(thing[:foo])\n    if thing[:foo][:bar]\n      partial_compute(thing)\n    else\n      re_compute(thing)\n    end\n  end\nend\ngood\ndef compute_thing(thing)\n  return unless thing[:foo]\n  update_with_bar(thing[:foo])\n  return re_compute(thing) unless thing[:foo][:bar]\n  partial_compute(thing)\nend\nbad\n[0, 1, 2, 3].each do |item|\n  if item > 1\n    puts item\n  end\nend\ngood\n[0, 1, 2, 3].each do |item|\n  next unless item > 1\n  puts item\nend\n```\nIs there a way to have it match and ignore a return if or return unless? And how does it internally handle else, could it match against else end by itself with no if or unless?  That may also solve your example from issue #425. An interesting thing about Ruby is that any statement/expression returns the value of the last evaluated expression.  This could lead to code that looks like this:\nruby\ndef numberFour\n  4\nend\nThis is the same as\nruby\ndef numberFour\n  return 4\nend\nDue to that, it is common to have a return case end pairing (or return any result of a block execution), and it would be valid (since the result of the case block would be what you want to return).\nIt is less common however to see a return if end or return unless end, so I would lobby for reverting the change on return if return unless, but if possible leaving it for other generic cases of return <something_else>.\nThere is a case of return x if x > 5, that should be handled the same as return if whatever.. The following usually don't come with an end if using return\nif, unless, public, private, protected\nThe following should expect an end statement\ndo, class, begin, case, loop, for, until, while, module. do is usually associated with an enumerator (loop, each, map, etc...) and wouldn't come by itself, but is never without an end, and what you stated makes sense.. ",
    "saurabh-gohil": "Language is PHP, I will share the dummy code to reproduce the error soon.\nBut I have noticed this issue when you have a lengthy code.. As you requested dummy code to reproduce the issue, Please check following PHP snippet.\nI am getting the same issue when file contains only following of code.\nHope it helps to find out the issue\nLet me know in case any more details ae required.\n```\nfunction getFiles($directory, $extension = null, $age = null, $search = null, $fileType = \"older\", $howMuch = 600)\n{\n    $filesArray = array();\n    $files      = new DirectoryIterator($directory);\n    foreach ($files as $file)\n    {\n        if (!$file->isDot() && $file->isFile())\n        {\n            if ($age != \"\")\n            {\n                if ($fileType == \"older\")\n                {\n                    if ($file->getMTime() >= strtotime($age))\n                    {\n                        continue;\n                    }\n                }\n                else if ($fileType == \"newer\")\n                {\n                    if ((time() - $file->getMTime()) >= $age)\n                    {\n                        continue;\n                    }\n                }\n            }\n            if ($search != \"\" && !stristr($file->getFilename(), $search))\n            {\n                continue;\n            }\n        if ($extension == \"\")\n        {\n            $filesArray[$file->getFilename()] = $file->getPath() . DIRECTORY_SEPARATOR . $file->getFilename();\n        }\n        else if (($file->getExtension() == $extension))\n        {\n            $filesArray[$file->getFilename()] = $file->getPath() . DIRECTORY_SEPARATOR . $file->getFilename();\n        }\n    } // if ends\n} // foreach ends\nif (count($filesArray) > 0)\n{\n    print_r(count($filesArray));\n    return $filesArray;\n}\nreturn false;\n\n}\n```. I am using default PHP syntax only and I have opening PHP statement <?php at the beginning.\nHowever, I tried the same patch of code on my windows machine which works fine but the same code is not working on my laptop with Ubuntu.\nDo you think other plugins might be conflicting with BH?\nIf that is the case then how can we debug it?\nAnd file only contains PHP code and not the HTML within it. > Can you post a list of installed plugins that are on the failing machine?\nYes, I will post the list of installed plugins as soon as I start the laptop.. Here is the list of packages currently installed.\n\nA File Icon\nAlignment\nBootstrap 3 Autocomplete\nBracketHighlighter\nCodeFormatter\nColor Highlighter\nDocBlockr\nFileHeader\nFunction Name Display\nGitGutter\nINI\nInsert Nums\njQuery\nLocal History\nPackage Control\nPaste as Column\nSassy Comments\nSFTP\nSideBarEnhancements\nSublimeCodeIntel\nSublimeLinter\nSublimeLinter-csslint\nSublimeLinter-json\nSublimeLinter-pep8\nSublimeLinter-php\nSublimeLinter-pyflakes\nSublimeLinter-shellcheck\nSyncedSideBar\nToggle Word. BH is installed in Installed Packages so there is no override.\nAs you pointed out that issue might be with the user config and you are correct.\nI removed user config and let BH run on the default setting and viola it is working as expected.\nBut would like to know which settings in user config are conflicting.\nPlease take a look at my user config given below.\n```\n{\n    // Debug logging\n    \"debug_enable\": false,\n\n// Try to ensure dependencies are up to date.\n// If it is not desirable to have this done (like developing) on a specific dependency,\n// or some other reason, set this to False.\n\"upgrade_dependencies\": true,\n\n// When only either the left or right bracket can be found\n// this defines if the unmatched bracket should be shown.\n\"show_unmatched\": true,\n\n// Do the opposite of \"show_unmatched\" for the languages listed below\n\"show_unmatched_exceptions\": [],\n\n// Enable high visibility by default when sublime starts up\n// If sublime is already running and this gets changed,\n// you will not see any changes (restart required to see change)\n\"high_visibility_enabled_by_default\": false,\n\n// Experimental: Creates a visible bar at the beginning of all lines between\n// multiline bracket spans.\n\"content_highlight_bar\": true,\n\n// Show hover popup\n// This will show a hover popup when mousing over\n// the visible bracket if the other\n// highlighted matching bracket is off screen.\n// It will show line text of the off screen bracket -/+ 128 chars\n// from the bracket start and end points.\n// A link will be available allowing the user to click and jump to\n// the other bracket.\n\"show_offscreen_bracket_popup\": true,\n\n// Adjust char per line context of bracket popup.\n\"popup_char_context\": 120,\n\n// Adjust number of lines of additional context\n// that are shown when brackets are vertically off screen.\n// Specified line count is split to context before and after the target line.\n// So a value of 4 would give you two lines of context before and two lines after.\n\"popup_line_context\": 4,\n\n\n// Experimental: Use 'popup_bracket_emphasis' to customize the popup's bracket emphasis color\n\"use_custom_popup_bracket_emphasis\": false,\n\n// Experimental: Specify the scope (to get color) to emphasize the off screen bracket\n// in popups.  Alternatively you can use a hex value in the form '#rgb' or '#rrggbb'.\n\"popup_bracket_emphasis\": \"keyword\",\n\n// Experimental: Align the content highlight bar at the bracket indent level\n\"align_content_highlight_bar\": true,\n\n// Experimental: Allow bracket highlighter to search in widgets.\n// Most widgets use Plain Text which BH should ignore,\n// But regex find views views are usually regular expression\n// Which should be the only views to trigger BH.\n\"search_in_widgets\": true,\n\n// Show brackets in the minimap.\n// Depending on your highlight style, regions may not be visible in minimap.\n// \"underline\" won't show up due to it being a style consisting of\n// multiple zero width selections to create a fat underline.\n// But the following styles should show up fine as they are normal regions styles:\n//     - thin_underline\n//     - solid\n//     - outline\n//     - squiggly\n//     - stippled\n\"show_in_minimap\": false,\n\n// High visibility style and color for high visibility mode\n// (solid|outline|underline)\n// ST3 has additional options of (thin_underline|squiggly|stippled)\n\"high_visibility_style\": \"outline\",\n\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n// Match brackets only when the cursor is touching the inside of the bracket\n\"match_only_adjacent\": false,\n\n// Outside adjacent bracket matching\n\"bracket_outside_adjacent\": true,\n\n// Experimental: Special matching mode for block cursor.\n// Essentially, this provides a matching mode that makes a little more\n// sense to some in regards to the visual representation of block cursors.\n// This will ignore \"bracket_outside_adjacent\".\n\"block_cursor_mode\": true,\n\n// When \"bracket_outside_adjacet\" is set, and a plugin command explicitly sets\n// \"no_outside_adj\" to \"None\" instead of \"true\" or the default \"false\",\n// this value will be used.\n\"ignore_outside_adjacent_in_plugin\": true,\n\n// When \"block_cursor_mode\" is set, and a plugin command explicitly sets\n// \"no_block_mode\" to \"None\" instead of \"true\" or the default \"false\",\n// this value will be used.\n\"ignore_block_mode_in_plugin\": true,\n\n// Character threshold to search\n\"search_threshold\": 5000,\n\n// Ignore threshold\n\"ignore_threshold\": true,\n\n// Set mode for string escapes to ignore (regex|string)\n\"bracket_string_escape_mode\": \"string\",\n\n// Set max number of multi-select brackets that will be searched automatically\n\"auto_selection_threshold\" : 10,\n\n// Enable this to completely kill highlighting if \"auto_selection_threshold\"\n// is exceeded.  Default is to highlight up to the \"auto_selection_threshold\".\n\"kill_highlight_on_threshold\": true,\n\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n\n// Rules that define the finding and matching of brackets\n// that are contained in a common scope.\n// Useful for bracket pairs that are the same but\n// share a common scope.  Brackets are found by\n// Finding the extent of the scope and using regex\n// to look at the beginning and end to identify bracket.\n// Use only if they cannot be targeted with traditional bracket\n// rules.\n\"scope_brackets\": [\n    // Quotes\n    {\n        \"name\": \"py_single_quote\",\n        \"open\": \"(?:u|b|f)?r?((?:'')?')\",\n        \"close\": \"((?:'')?')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\", \"meta.string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"Python\",\n            \"PythonImproved\",\n            \"MagicPython\"\n        ],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.pyquotes\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"py_double_quote\",\n        \"open\": \"(?:u|b|f)?r?((?:\\\"\\\")?\\\")\",\n        \"close\": \"((?:\\\"\\\")?\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\", \"meta.string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"Python\",\n            \"PythonImproved\",\n            \"MagicPython\"\n        ],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.pyquotes\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"single_quote\",\n        \"open\": \"(')\",\n        \"close\": \"(')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\", \"string.quoted\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"double_quote\",\n        \"open\": \"(\\\")\",\n        \"close\": \"(\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\", \"string.quoted\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"backtick_quote\",\n        \"open\": \"(`)\",\n        \"close\": \"(`)\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string.interpolated.ruby\", \"string.interpolated.backtick.shell\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"Shell-Unix-Generic\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Regex for different Languages\n    {\n        \"name\": \"jsregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[igm]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"JavaScript\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"perlregex\",\n        \"open\": \"(?:m|s|tr)(.|\\n)\",\n        \"close\": \"(.|\\n)(?:[igmos]*)\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string.regexp\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Perl\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"rubyregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[imxo]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"RSpec\", \"Better RSpec\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Markdown\n    {\n        \"name\": \"mditalic\",\n        \"open\": \"(\\\\*|_)\",\n        \"close\": \"(\\\\*|_)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.italic\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\", \"Markdown Extended\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdbold\",\n        \"open\": \"(\\\\*\\\\*|__)\",\n        \"close\": \"(\\\\*\\\\*|__)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.bold\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\", \"Markdown Extended\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdcodeinline\",\n        \"open\": \"(`+)\",\n        \"close\": \"(`+)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.raw.inline.markdown\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\", \"Markdown Extended\"],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.mdcode\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdcodeblock\",\n        \"open\": \"\\\\s*(`{3,}|~{3,})\",\n        \"close\": \"(`{3,}|~{3,})\\\\n?\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.raw.block.fenced.markdown, markup.raw.block.markdown.fenced\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\", \"Markdown Extended\"],\n        \"plugin_library\": \"bh_modules.mdcode\",\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // LaTeX\n    {\n        \"name\": \"latexmath_inline\",\n        \"open\": \"(\\\\$)\",\n        \"close\": \"(\\\\$)\",\n        \"style\": \"default\",\n        \"scopes\": [\"string.other.math.tex\", \"meta.environment.math.inline.dollar.latex\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"LaTeX\", \"LaTeX (TikZ)\", \"knitr (Rnw)\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    }\n],\n\n// Rule definitions for finding and matching brackets.\n// Brackets are found by using regex and can use scope\n// qualifiers exclude certain matches.\n// Once all matches are found, the closest pair surrounding\n// the cursor are selected.\n\"brackets\": [\n    // Basic brackets\n    {\n        \"name\": \"curly\",\n        \"open\": \"(\\\\{)\",\n        \"close\": \"(\\\\})\",\n        \"style\": \"curly\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"round\",\n        \"open\": \"(\\\\()\",\n        \"close\": \"(\\\\))\",\n        \"style\": \"round\",\n        \"scope_exclude_exceptions\": [\n            \"text.tex string.other.math\",\n            \"punctuation.definition.string.begin.shell\",\n            \"punctuation.definition.string.end.shell\"\n        ],\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"punctuation.definition.case-pattern.shell\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"square\",\n        \"open\": \"(\\\\[)\",\n        \"close\": \"(\\\\])\",\n        \"style\": \"square\",\n        \"scope_exclude\": [\n            \"string\",\n            \"source.regexp constant.character.escape\",\n            \"comment\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\", \"source.yaml-tmlanguage meta.value -constant.character.escape\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    // PHP Angle\n    {\n        \"name\": \"php_angle\",\n        \"open\": \"(<\\\\?)(?:php)?\",\n        \"close\": \"(\\\\?>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\"],\n        \"enabled\": true\n    },\n    // Angle\n    {\n        \"name\": \"angle\",\n        \"open\": \"(<)(?=[^?%]|$)\",\n        \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"keyword.operator\",\n            \"source.ruby.rails.embedded.html\",\n            \"source.ruby.embedded.html\",\n            \"storage.type.function.arrow.js\",\n            \"punctuation.accessor.php\"\n        ],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"XML\",\n            \"PHP\",\n            \"HTML (Rails)\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Jinja2)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"HTML+CFML\",\n            \"ColdFusion\",\n            \"ColdFusionCFC\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ],\n        \"plugin_library\": \"bh_modules.tags\",\n        \"enabled\": true\n    },\n    // CSSedit groups\n    {\n        \"name\": \"cssedit_groups\",\n        \"open\": \"(/\\\\* *@group .*\\\\*/)\",\n        \"close\": \"(/\\\\* *@end *\\\\*/)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"CSS\"],\n        \"enabled\": true\n    },\n    // Ruby embedded HTML\n    // !!! May conflict with 'php_keywords' if enabled in same file !!!\n    {\n        \"name\": \"ruby_embedded_html\",\n        \"open\": \"((?:(?<=<%)|(?<=^)|(?<==)|(?<=<<))\\\\s*\\\\b(?:if|begin|case)\\\\b(?!:)|(?:(?<=<%)|(?<=^))\\\\s*(?:(?:private|public|protected)\\\\s*)?def\\\\b[\\\\p{Ll}\\\\p{Lu}]*\\\\b(?!:)|(?:(?<=<%)|(?<=^))\\\\s*\\\\b(?:for|until|unless|while|class|module)\\\\b(?!:)|(?<!:)\\\\bdo\\\\b(?!:))\",\n        \"close\": \"(?<=[\\\\s;])(end)\\\\b(?!:)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"text.html\", \"source\", \"comment\", \"string\"],\n        \"scope_exclude_exceptions\": [\n            \"source.ruby.rails.embedded.html -comment -string\",\n            \"source.ruby.embedded.html -comment -string\"\n        ],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"HTML (Rails)\"],\n        \"enabled\": true\n    },\n    // Ruby conditional statements\n    {\n        \"name\": \"ruby\",\n        \"open\": \"((?:(?<=^)|(?<==)|(?<=<<))\\\\s*\\\\b(?:if|begin|case)\\\\b(?!:)|^\\\\s*(?:(?:private|public|protected)\\\\s*)?def\\\\b[\\\\p{Ll}\\\\p{Lu}]*\\\\b(?!:)|^\\\\s*\\\\b(?:for|until|unless|while|class|module)\\\\b(?!:)|(?<!:)\\\\bdo\\\\b(?!:))\",\n        \"close\": \"(?<=[\\\\s;])(end)\\\\b(?!:)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"RSpec\", \"Better RSpec\", \"Ruby on Rails\"],\n        \"enabled\": true\n    },\n    // C/C++ compile switches\n    {\n        \"name\": \"c_compile_switch\",\n        \"open\": \"(\\\\#(?:if|ifdef|ifndef))\\\\b\",\n        \"close\": \"(\\\\#endif)\\\\b\",\n        \"style\": \"c_define\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"C++\", \"C\", \"Objective-C\", \"CCpp\", \"C Improved\"],\n        \"enabled\": true\n    },\n    // PHP conditional keywords\n    // !!! May conflict with 'ruby_embedded_html' if enabled in same file !!!\n    {\n        \"name\": \"php_keywords\",\n        \"open\": \"(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(if|foreach|for|while|switch)\\\\b(?=.*?\\\\)\\\\s*:\\\\s*(?://.*?|/\\\\*.*?\\\\*/\\\\s*?)?(?:\\\\?>|$))\",\n        \"close\": \"(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*(?:;|;?\\\\?>))\",\n        \"style\": \"default\",\n        \"language_filter\": \"whitelist\",\n        \"scope_exclude\": [\"string\", \"comment\", \"text.html\"],\n        \"scope_exclude_exceptions\": [\n            \"source.php -comment -string\"\n        ],\n        \"plugin_library\": \"bh_modules.phpkeywords\",\n        \"language_list\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML+CFML\",\n            \"ColdFusion\",\n            \"ColdFusionCFC\"\n        ],\n        \"enabled\": true\n    },\n    // Erlang conditional statements\n    {\n        \"name\": \"erlang\",\n        \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"plugin_library\": \"bh_modules.lowercase\",\n        \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n        \"enabled\": true\n    },\n    //Bash\n    {\n        \"name\": \"bash\",\n        \"open\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^|&|\\\\|)\\\\s*)\\\\b(if|case|while|select|until|for)\\\\s\",\n        \"close\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(fi|esac|done)(?=;|\\\\s|$)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.bashsupport\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Shell-Unix-Generic\"],\n        \"enabled\": true\n    },\n    //Fish shell\n    {\n        \"name\": \"fish\",\n        \"open\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^|&|\\\\||and|or|not)\\\\s*)\\\\b(begin|if|while|for|switch|function)(?:;|\\\\s)\",\n        \"close\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(end)(?=;|\\\\s|$)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"fish\"],\n        \"enabled\": true\n    },\n    // Lua\n    {\n        \"name\": \"lua\",\n        \"open\": \"(?:(?<=[\\\\s;])|(?<=^))(if|while|function|do|repeat)\\\\b\",\n        \"close\": \"(?:(?<=[\\\\s;])|(?<=^))(end|until)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.luakeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Lua\"],\n        \"enabled\": true\n    },\n    // LaTeX\n    {\n        \"name\": \"latexenv\",\n        \"open\": \"(\\\\\\\\begin{[^}]*})\",\n        \"close\": \"(\\\\\\\\end{[^}]*})\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"comment\"],\n        \"plugin_library\": \"bh_modules.latexenvironments\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"LaTeX\", \"LaTeX (TikZ)\", \"knitr (Rnw)\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Pascal\n    {\n        \"name\": \"pascal\",\n        \"open\": \"(?:(?<=^)|(?<=[\\\\s;]))(try|(?<=\\\\=\\\\s)(?:class|record|interface)|begin|repeat)\\\\b\",\n        \"close\": \"(?<=[\\\\s;])(end(?=[;\\\\s])|until(?=\\\\s))\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.pascalkeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Pascal\"],\n        \"enabled\": true\n    },\n    // Elixir\n    {\n        \"name\": \"elixir\",\n        \"open\": \"\\\\b(do$|fn)\\\\b\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Elixir\"],\n        \"enabled\": true\n    },\n    // CMake\n    {\n        \"name\": \"cmake\",\n        \"open\": \"\\\\b(foreach|function|if|macro|while)\\\\b\",\n        \"close\": \"\\\\b(end(?:foreach|function|if|macro|while))\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"-keyword.cmake\"],\n        \"plugin_library\": \"bh_modules.cmakekeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"CMake\"],\n        \"enabled\": true\n    },\n    // SINUMERIK 840D SL G-Code\n    {\n        \"name\": \"s840d_gcode\",\n        \"open\": \"\\\\b(IF(?!.*GOTO)|FOR|WHILE|REPEAT(?!.*GOTO))\\\\b\",\n        \"close\": \"\\\\b(END(?:IF|FOR|WHILE)|UNTIL)\\\\b\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.s840d_gcode\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"s840d_gcode\"],\n        \"enabled\": true\n    },\n    // SINUMERIK 840D SL RunMyHmi\n    {\n        \"name\": \"s840d_hmi\",\n        \"open\": \"^\\\\s*(//[ABGMS]|ACTIVATE|CHANGE|FOCUS|IF|LOAD|UNLOAD|OUTPUT|PRESS|SUB)\\\\b\",\n        \"close\": \"^\\\\s*(//END|END_(?:ACTIVATE|CHANGE|FOCUS|IF|LOAD|UNLOAD|OUTPUT|PRESS|SUB))\\\\b\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.s840d_hmi\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"s840d_hmi\"],\n        \"enabled\": true\n    }\n],\n\n// user_scope_brackets and user_brackets will be appended\n// to the tail of scope_brackets and brackets respectively\n// If you have custom rules that you don't want to commit to\n// the official list, and do not need to be inserted before\n// one of the official definitions, this is a good place to\n// put yours rules and keep in sync with the defaults.\n\"user_scope_brackets\": [],\n\"user_brackets\": [],\n\n// Define region highlight styles\n// solid, outline, underline, none, thin_underline\n// squiggly, stippled\n\"bracket_styles\": {\n    // \"default\" and \"unmatched\" styles are special\n    // styles. If they are not defined here,\n    // they will be generated internally with\n    // internal defaults.\n\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracket pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\",\n        \"color\": \"brackethighlighter.curly\",\n        \"style\": \"outline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\",\n        \"color\": \"brackethighlighter.round\",\n        \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\",\n        \"color\": \"brackethighlighter.square\",\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\",\n        \"color\": \"brackethighlighter.angle\",\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\",\n        \"color\": \"brackethighlighter.tag\",\n        // \"style\": \"underline\"\n    },\n    \"c_define\": {\n        \"icon\": \"hash\",\n        \"color\": \"brackethighlighter.c_define\",\n        // \"style\": \"underline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\",\n        \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\",\n        \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"regex\",\n        \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    }\n}\n\n}\n```. ",
    "TruePath": "Thanks for the reply (and the great plugin).  Any chance you could do something simple to just disable highlighting in the cloned view?  Would you like me to suggest an edit to the docs so other users don't have to fight with the settings for a long time before realizing what is going on?. ",
    "sin911": "thank you~. ",
    "jctiru": "Thank you for the fast reply and tips. It is clearly my bad and sorry for the trouble. Thanks again for the whole awesome project.. ",
    "SoilRos": "This is something that will be really helpful for me!\nI have had horrible bugs in template meta-programming just because sometimes is hard to distinguish if angles were right or not, and the compiler does not help very much.\nAnother example of use, is to analyse errors of the generated code after some meta-programing. You literally get hundreds of angles, and one of them can give you clues where the error is coming from.. Yes I understand that is very demanding, even compilers had troubles in the beginning to understand these codes. Even if you could program something that can recognise these scopes, I guess it will make BracketHighlighter very slow. So, I don't think that should be the approach here.\nInstead I would go in another direction which might be very easy to implement: activate template highlighter (i.e. a simple angle highlighter) with a hotkey when needed. The reason is that outside templates, angle brackets are very messy and difficult to understand and would require a lot of work to distinguish, however, inside templates there cannot be pointer operators, shifts operator, and static comparisons must be done within a parenthesis scope. It means that a simple angle highlighter is more than enough. \nRight now my approach is something near to that: I have a simple angle highlighter that I enable by hand only when i really need to be sure that templates are correct. \nDo you think that is too hard to add such a hotkey?. ",
    "bofm": "Thanks for the reply.\n(...) below is any Lua expression.\nWe should ignore do as a block start in these cases:\n```lua\nwhile (...) do\n  (...)\nend\nfor (...) do\n  (...)\nend\n``` \nbut we should consider do as a bock start in this case:\nlua\ndo\n  (...)\nend\nAnd the mixed case:\nlua\nwhile (...) do  -- this is a part of the while loop syntax\n  do  -- this is a \"do-end\" block start (used for variable scoping purposes)\n    (...)\n  end\nend\nI could try to play with the regexes if you pointed me to where I should change them :). > Would it be a fair assumption to say that when do is only preceded by whitespace it is safe to include it?\nCannot answer, but this is valid:\nwhile (...) do (...) do (...) end end;\nfor i=1,10 do do print(i) end end;. Yes, that should work. And the same for for loop.. Hi, I am going to test it but I cannot figure out how to manually install BracketHighlighter from master branch with all the dependencies. Could you please advise or maybe point me to the related docs or Sublime forum thread?\nEdit:\nI've figured it out.. > On do validate, check that it is not tracked and clear the tracker afterwards.\nStill don't understand check that it is not tracked and clear the tracker afterwards part.. I think we should track while ,for, end keywords as we scan the buffer and put \"loop scope open \" and \"loop scope close\" events on a stack. Whenever we get do we should check if there is an open loop scope on the stack and decide whether to ignore the do.. Hm, that would work but visually the highlighted \u2018do\u2019 which is usually on the right hand side of the screen would not be very noticable for the eyes comparing to the properly highlighted \u201cwhile|for\u201d.. ",
    "ellipticaldoor": "I just found this https://github.com/facelessuser/BracketHighlighter/issues/423. Yep, that's why I closed. Thank you.\nVery good plugin!! I'm going to use it though.. ",
    "michaelblyons": "It works well enough not to falsely highlight anything. This PR will support all the cases above except \n verbatim_singleline_interpolated_yes and verbatim_multiline_interpolated_yes. When sublimehq/Packages#1432 is merged, those cases will work, too.. Should be bracket_outside_adjacent (missing n).. ",
    "eugenr2": "Thank you for answering.  I'll keep an aye on that thread.. ",
    "Kronuz": "@facelessuser, you are right, I fixed it so it now uses only space and tab. Done!. ",
    "dsterda": "Would it be easy to modify bracketselect.py to support selecting to the beginning/end of the bracket? Or would the best approach be to create a new plugin?. Thanks for the tips, I was able to create my own module. I'd be happy to post it here in case it helps anyone else.\nI was wondering if you could help me with one thing; when selecting to the left bracket, the cursor remains at the original position. Is it possible to move the cursor as well as setting the selection?\nFor example, if the shortcut to select to the left bracket is ctrl+shift+left, and the line is \"thisis|atest\", pressing ctrl+shift+left followed by shift+right should result in this selection: \"t[hisis]atest\", but currently results in this selection: \"[thisisa]test\". The solution (I think) is to position the cursor at left before making the selection.\nI tried using self.view.run_command('move_to', {'to': first}), but that didn't seem to work.\nIn case it helps, here is the code:\n```\n    def run(self, edit, name, direction, always_include_brackets=False):\n        self.current_left, self.current_right = self.selection[0].begin(), self.selection[0].end()\n        first, last = self.left.end, self.right.begin\n    if first == self.current_left and last == self.current_right or always_include_brackets:\n        first, last = self.select_expand(first, last)\n\n    if direction == 'right':\n        first = self.selection[0].begin()\n    elif direction == 'left':\n        last = self.selection[0].end()\n\n    self.selection = [sublime.Region(first, last)]\n    self.refresh_match = True\n\n```. Worked like a charm, thank you!\nHere is the full plugin in case it's helpful to anyone else in the future:\n```\nimport BracketHighlighter.bh_plugin as bh_plugin\nimport sublime\nclass SelectToBracket(bh_plugin.BracketPluginCommand):\ndef run(self, edit, name, direction, always_include_brackets=False):\n    self.current_left, self.current_right = self.selection[0].begin(), self.selection[0].end()\n    first, last = self.left.end, self.right.begin\n\n    if first == self.current_left and last == self.current_right or always_include_brackets:\n        first, last = self.select_expand(first, last)\n\n    if direction == 'right':\n        first = self.selection[0].begin()\n        self.selection = [sublime.Region(first, last)]\n    elif direction == 'left':\n        last = self.selection[0].end()\n        self.selection = [sublime.Region(last, first)]\n\n    self.refresh_match = True\n\ndef plugin():\n    return SelectToBracket\n```\nand keybindings:\n{\n        \"keys\": [\"ctrl+shift+right\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": null,\n            \"no_block_mode\": null,\n            \"lines\" : false,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"<path_to_plugin>\",\n                \"args\": {\"direction\": \"right\"}\n            }\n        }\n    },\n    {\n        \"keys\": [\"ctrl+shift+left\"],\n        \"command\": \"bh_key\",\n        \"args\":\n        {\n            \"no_outside_adj\": null,\n            \"no_block_mode\": null,\n            \"lines\" : false,\n            \"plugin\":\n            {\n                \"type\": [\"__all__\"],\n                \"command\": \"<path_to_plugin>\",\n                \"args\": {\"direction\": \"left\"}\n            }\n        }\n    },. ",
    "mrG0bliN": "i dont know what happend?! Now all be fine =\\\n\npls dont close this issues, mb bug come againe, after grow my html code ;D. @facelessuser thank you very much for the answer. ",
    "Spraynard": "Thanks for responding! Allow me to explain myself further. I currently just use the syntax highlighter that comes with ST3 if that helps. I'm using the \"Mariana\" color scheme. I've linked to a file that can be copy and pasted into a ST3 window and hopefully produce the same results that I'm seeing, based on the comments that I wrote in the linked file.. Thank you! I actually work on both macOS and Ubuntu and saw that it was grabbing those \"<\" as brackets in the help text. Didn't show the help text when I was on Ubuntu. Anyway, I tested the same file out on example #2 and I have written down new comments on the file where I was seeing most-likely undesired behavior. This is the link.. Oh yeah I meant to say that yes I did override the settings in my bh_core.sublime_settings file that you linked up. \nI changed the search_threshold to 10000 like you put up and that fixes the issue. As of right now I'd say that it works fine so I'll let you know if I find anything in my work.. Hey so been working and I saw that a similar issue was happening with <<<JAVASCRIPT type HEREDOC. There is javascript syntax highlighting that happens on this so I'm assuming that this is a tag that ST3 would recognize. Anwyay, in order to get past that I applied a scope_exclude similar to your other fix: \"source.php meta.embedded.js punctuation.section.embedded.begin.php\". OK \ud83d\ude01 \nThe only other one that I can think of to add is support for <<<CSS as well. Surprisingly to me, there isn't an issue with using HEREDOC or NOWDOC with arbitrarily named identifiers ( e.g. <<<PANCAKE or <<<'PANCAKE' ).\nThe scope_excluded parameter for <<<CSS is \"source.php meta.embedded.css punctuation.section.embedded.begin.php\". ",
    "simov": "It turns out that Sublime inverts the colors when the background color is the same as the global one for the color scheme (or something like that).\nI had #000000 set as backround color under the globals key of my color scheme. Then all I had to do was to set the background color for each bracket to #000001:\njson\n{\n  \"name\": \"Bracket Curly\",\n  \"scope\": \"brackethighlighter.curly\",\n  \"foreground\": \"cyan\",\n  \"background\": \"#000001\"\n},\nAnd now it works as expected:\n\n. ",
    "ascendbruce": "Thanks \ud83d\ude04 . ",
    "chere005": "I will submit a pr when I have time, thanks \nSent from my iPhone\n\nOn Jun 12, 2018, at 8:25 PM, Isaac Muse notifications@github.com wrote:\nThis will only be included via pull requests, if you are having difficulty implementing this, feel free to ask specific questions.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "lab313ru": "I mean it is only possible to define\nif-else,\nelse-endif,\nif-endif\nBut I need to highlight if-else-endif together.\nIsaac Muse notifications@github.com 1 \u0438\u044e\u043b\u044f 2018 \u0433. 15:04:48 \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\nWhy is this impossible? There isn't enough information for me to really \nunderstand the request/issue being described.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. For now it doesn't work at all, because there is no Makefile brackets highlighting, so I added such definition. And it is doesn't work.\n{\n            \"name\": \"makefile_defs\",\n            \"open\": \"^(if|ifdef|ifndef|ifeq)\\\\b\",\n            \"close\": \"^(endif|else)\\\\b\",\n            \"style\": \"default\",\n            \"scope_exclude\": [\"string\", \"comment\"],\n            \"language_filter\": \"whitelist\",\n            \"language_list\": [\"Makefile\"],\n            \"enabled\": true\n        },. Else-endif block is the same as if !(cond)-endif, so it is the same as \"beginning\".\nso supporting such blocks will be good feature.\nFor example if you have huge if-else block and then you have else-endif block it will be very difficult to analyze it.. ",
    "eduard-tkv": "Can't make it work. What's weird is that bracket_styles work but ignore_threshold in the same file doesn't work. Will try to reinstall Sublime.. Tried reinstalling Sublime, removing/installing BH, still no luck... Back to VS Code then.... I didn't know about the console. It says \"Unable to open /C/Users/{UserName}/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/bh_core.sublime-settings\". Where supposed to be bh_core.sublime-settings? How come it finds it when I go Preferences->Package Settings->BracketHighlighter->Bracket Settings? Any ideas?. I installed using package control. Still not working, will give it another clean go whenever I have time. Thanks for the tip. You may close the issue. Thanks. ",
    "CuriousPhilomath": "Thanks for the feedback and the reference. That issue does help. Thanks!. ",
    "acheronfail": "According to the documentation about customising bracket rules, I can override the default rule's scope_exclude option (since it has \"string\" inside).\nAlthough, this doesn't seem to work.\nI also don't think it has anything to do with the scope_exclude option either, because selecting between [ and ] won't work if there's any other kind of bracket (like if it's between { and }, which aren't in the scope_exclude list). Eg, this doesn't work either:\n```js\n// BEFORE: [{     }]\n// cursor      ^\n// AFTER: [{     }]\n// cursor  ^-----^\n```\nI've tried many options and I can't get that to work for me at all... \ud83e\udd14 . > BH, no matter what, targets the closest, valid bracket around a cursor(s), and only that one (per cursor). Then the plugin is applied to that target if it meets the appropriate criteria.\nHmm, right. I suppose then, the behaviour I'm looking for is not something that BH actually does at the moment?\nTo be really clear, I've attached a gif of what I'd like to do. Take note, that every single command I run in the gif should be to select square brackets.\n\nSo, what I'm looking for, is to create a shortcut where BH will select the nearest pair of square brackets from my cursor (ignoring other brackets on the way).\nAm I correct in thinking this isn't currently possible?\n. > Basically, out of the box, BH matches the closest bracket and immediately stops searching for performance reasons. No parent brackets are matched. There is no current way to match anything except the current surrounding bracket, but you conditionally due things based on the type of surrounding bracket.\n\nSo, in short, the answer is no.\n\nYeah, I figured something like this would be the case.\nI appreciate the time you've taken to talk to me about this! And I'm not sure the benefits of adding this feature to BH outweigh the complexity and performance concerns. \ud83d\ude04 \n. @facelessuser FWIW, I managed to get the functionality I wanted by using a custom run instance plugin.\nYou'll probably be ashamed of the performance considerations of this code \ud83d\ude05 haha, but I only wanted this for a way to quickly select a specific type of enclosing brackets. It works well enough for me at the moment, I'll test it out and see how I go.\nHere it is:\n```python\nimport BracketHighlighter.bh_plugin as bh_plugin\nimport sublime\nHow many characters to search through before giving up.\nSEARCH_THRESHOLD = 5000\nclass NaiveBracketSelect(bh_plugin.BracketPluginCommand):\n  \"\"\"\n  A na\u00efve bracket selector. This plugin will search for the nearest enclosing\n  pair of brackets that you pass into it, whether or not the cursor is already\n  inside a different type of bracket.\n  \"\"\"\ndef _find(self, start, args, region, is_left):\n    \"\"\"Find the nearest bracket before/after the starting position.\"\"\"\nbalance, should_balance = 0, args.get('balanced', False)\ntarget = args['left' if is_left else 'right']\nother = args['right' if is_left else 'left']\ntext = self.view.substr(region)\n\nfor i, ch in enumerate(reversed(text) if is_left else text):\n  if balance == 0 and ch == target:\n    return start - i if is_left else start + i\n\n  if should_balance:\n    if ch == other:\n      balance += 1\n    if ch == target:\n      balance -= 1\n\nreturn None\n\ndef _left_region(self, start):\n    \"\"\"Max region of text to search to the left.\"\"\"\n    return sublime.Region(max(0, start - SEARCH_THRESHOLD), start)\ndef _right_region(self, start):\n    \"\"\"Max region of text to search to the right.\"\"\"\n    return sublime.Region(start, min(self.view.size(), start + SEARCH_THRESHOLD))\ndef run(self, edit, name, **kwargs):\n    new_selection = []\n    should_wrap = kwargs.get('wrap', False)\n    for sel in self.selection:\n      a, b = sel.begin(), sel.end()\n      left = self._find(a, kwargs, self._left_region(a), True)\n      right = self._find(b, kwargs, self._right_region(b), False)\n  # Do nothing if we couldn't find both brackets.\n  if left == None or right == None:\n    return\n\n  # If we're already sitting on a pair of brackets, expand to select them.\n  if should_wrap or (left == a and right == b):\n    new_selection.append(sublime.Region(left - 1, right + 1))\n  else:\n    new_selection.append(sublime.Region(left, right))\n\nself.selection = new_selection\n\ndef plugin():\n  return NaiveBracketSelect\n```\nAnd the key binding:\njs\n{\n    \"keys\": [\"super+k\", \"[\"],\n    \"command\": \"bh_key\",\n    \"args\": {\n        \"lines\" : true,\n        \"plugin\": {\n            \"type\": [\"__all__\"],\n            \"command\": \"User.bh_modules.naivebracketselect\",\n            \"args\": {\n                \"left\": \"[\",\n                \"right\": \"]\",\n                \"balanced\": true\n            }\n        }\n    }\n}\nThis pretty much emulates the same behaviour as vscode-quick-select.\nWhile I love how efficient and flexible BH is, sometimes these na\u00efve selections are useful too. \ud83d\ude04 . I agree my syntax theme is confusing, here it is with Marinara: \n\nIt's the default JSON syntax.. I've mapped this command to a hotkey:\njson\n{\n  \"args\": {\n    \"lines\": true, \n    \"no_block_mode\": null, \n    \"no_outside_adj\": null, \n    \"plugin\": {\n      \"args\": {\n        \"select\": \"left\"\n      }, \n      \"command\": \"bh_modules.bracketselect\", \n      \"type\": [\n        \"__all__\"\n      ]\n    }\n  }, \n  \"command\": \"bh_key\", \n  \"keys\": [\n    \"alt+[\"\n  ]\n}. Also, if it helps, these are the scopes in that string:\n\n. > If you want me to test your specific code, please post it as something I can copy & paste.\nI think you've reproduced it fine enough, since the screenshot you posted above doesn't work on my machine.\n\nI think it might actually be a custom rule, let me verify.. Ah yep. It was my custom rules. \ud83e\udd26\u200d\u2642\ufe0f \nAppreciate the quick response and help, though!\nSorry for wasting your time!. ",
    "haolly": "@facelessuser  try this:\nlua\nlocal mt = {}\nfunction mt:fine()\n    self.update_id = global.updater:register(function(_, dt)\n        self:update(dt)\n    end)\nend. ",
    "kortschak": "Looking further into this, I suspect this is a GoSublime issue. I'll close this and file there. Apologies for noise.. ",
    "sharunkumar": "Hi thanks for your answer! I will try adding this before the square bracket rule.\nEdit: yes, it works now.. ",
    "7starsone": "- ST ver.: 3176\n- Platform: windows\n- Arch: x64\n- Plugin ver.: 2.27.4\n- Install via PC: True\n- mdpopups ver.: 3.3.3\n- backrefs ver.: 3.5\n- markdown ver.: 2.6.11\n- pygments ver.: 2.1a0\n- jinja2 ver.: 2.8\n. View\u2192Syntax\u2192PHP\nmy user settings\n{\n    \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\",\n    \"font_size\": 14,\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    \"match_brackets\": false,\n    \"match_brackets_angle\": false,\n    \"match_brackets_braces\": false,\n    \"match_brackets_content\": false,\n    \"match_brackets_square\": false,\n    \"match_tags\": false,\n    \"show_encoding\": true,\n    \"theme\": \"Default.sublime-theme\"\n}\nBH settings\n```\n{\n    // Debug logging\n    \"debug_enable\": false,\n// Try to ensure dependencies are up to date.\n// If it is not desirable to have this done (like developing) on a specific dependency,\n// or some other reason, set this to False.\n\"upgrade_dependencies\": true,\n\n// When only either the left or right bracket can be found\n// this defines if the unmatched bracket should be shown.\n\"show_unmatched\": true,\n\n// Do the opposite of \"show_unmatched\" for the languages listed below\n\"show_unmatched_exceptions\": [],\n\n// Enable high visibility by default when sublime starts up\n// If sublime is already running and this gets changed,\n// you will not see any changes (restart required to see change)\n\"high_visibility_enabled_by_default\": false,\n\n// Experimental: Creates a visible bar at the beginning of all lines between\n// multiline bracket spans.\n\"content_highlight_bar\": false,\n\n// Show hover popup\n// This will show a hover popup when mousing over\n// the visible bracket if the other\n// highlighted matching bracket is off screen.\n// It will show line text of the off screen bracket -/+ 128 chars\n// from the bracket start and end points.\n// A link will be available allowing the user to click and jump to\n// the other bracket.\n\"show_offscreen_bracket_popup\": true,\n\n// Adjust char per line context of bracket popup.\n\"popup_char_context\": 120,\n\n// Adjust number of lines of additional context\n// that are shown when brackets are vertically off screen.\n// Specified line count is split to context before and after the target line.\n// So a value of 4 would give you two lines of context before and two lines after.\n\"popup_line_context\": 2,\n\n\n// Experimental: Use 'popup_bracket_emphasis' to customize the popup's bracket emphasis color\n\"use_custom_popup_bracket_emphasis\": false,\n\n// Experimental: Specify the scope (to get color) to emphasize the off screen bracket\n// in popups.  Alternatively you can use a hex value in the form '#rgb' or '#rrggbb'.\n\"popup_bracket_emphasis\": \"keyword\",\n\n// Experimental: Align the content highlight bar at the bracket indent level\n\"align_content_highlight_bar\": false,\n\n// Experimental: Allow bracket highlighter to search in widgets.\n// Most widgets use Plain Text which BH should ignore,\n// But regex find views views are usually regular expression\n// Which should be the only views to trigger BH.\n\"search_in_widgets\": false,\n\n// Show brackets in the minimap.\n// Depending on your highlight style, regions may not be visible in minimap.\n// \"underline\" won't show up due to it being a style consisting of\n// multiple zero width selections to create a fat underline.\n// But the following styles should show up fine as they are normal regions styles:\n//     - thin_underline\n//     - solid\n//     - outline\n//     - squiggly\n//     - stippled\n\"show_in_minimap\": false,\n\n// High visibility style and color for high visibility mode\n// (solid|outline|underline)\n// ST3 has additional options of (thin_underline|squiggly|stippled)\n\"high_visibility_style\": \"outline\",\n\n// (scope|__default__|__bracket__)\n\"high_visibility_color\": \"__bracket__\",\n\n// Match brackets only when the cursor is touching the inside of the bracket\n\"match_only_adjacent\": false,\n\n// Outside adjacent bracket matching\n\"bracket_outside_adjacent\": true,\n\n// Experimental: Special matching mode for block cursor.\n// Essentially, this provides a matching mode that makes a little more\n// sense to some in regards to the visual representation of block cursors.\n// This will ignore \"bracket_outside_adjacent\".\n\"block_cursor_mode\": false,\n\n// When \"bracket_outside_adjacet\" is set, and a plugin command explicitly sets\n// \"no_outside_adj\" to \"None\" instead of \"true\" or the default \"false\",\n// this value will be used.\n\"ignore_outside_adjacent_in_plugin\": true,\n\n// When \"block_cursor_mode\" is set, and a plugin command explicitly sets\n// \"no_block_mode\" to \"None\" instead of \"true\" or the default \"false\",\n// this value will be used.\n\"ignore_block_mode_in_plugin\": true,\n\n// Character threshold to search\n\"search_threshold\": 10000,\n\n// Ignore threshold\n\"ignore_threshold\": false,\n\n// Set mode for string escapes to ignore (regex|string)\n\"bracket_string_escape_mode\": \"string\",\n\n// Set max number of multi-select brackets that will be searched automatically\n\"auto_selection_threshold\" : 10,\n\n// Enable this to completely kill highlighting if \"auto_selection_threshold\"\n// is exceeded.  Default is to highlight up to the \"auto_selection_threshold\".\n\"kill_highlight_on_threshold\": true,\n\n// Disable gutter icons when doing multi-select\n\"no_multi_select_icons\": false,\n\n// Rules that define the finding and matching of brackets\n// that are contained in a common scope.\n// Useful for bracket pairs that are the same but\n// share a common scope.  Brackets are found by\n// Finding the extent of the scope and using regex\n// to look at the beginning and end to identify bracket.\n// Use only if they cannot be targeted with traditional bracket\n// rules.\n\"scope_brackets\": [\n    // Quotes\n    {\n        \"name\": \"py_single_quote\",\n        \"open\": \"(?:u|b)?r?((?:'')?')\",\n        \"close\": \"((?:'')?')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"Python\",\n            \"PythonImproved\",\n            \"MagicPython\"\n        ],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.pyquotes\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"py_double_quote\",\n        \"open\": \"(?:u|b)?r?((?:\\\"\\\")?\\\")\",\n        \"close\": \"((?:\\\"\\\")?\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"Python\",\n            \"PythonImproved\",\n            \"MagicPython\"\n        ],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.pyquotes\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"single_quote\",\n        \"open\": \"(')\",\n        \"close\": \"(')\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string\", \"string.quoted\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"double_quote\",\n        \"open\": \"(\\\")\",\n        \"close\": \"(\\\")\",\n        \"style\": \"double_quote\",\n        \"scopes\": [\"string\", \"string.quoted\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"backtick_quote\",\n        \"open\": \"(`)\",\n        \"close\": \"(`)\",\n        \"style\": \"single_quote\",\n        \"scopes\": [\"string.interpolated.ruby\", \"string.interpolated.backtick.shell\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"Shell-Unix-Generic\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Regex for different Languages\n    {\n        \"name\": \"jsregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[igm]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"JavaScript\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"perlregex\",\n        \"open\": \"(?:m|s|tr)(.|\\n)\",\n        \"close\": \"(.|\\n)(?:[igmos]*)\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string.regexp\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Perl\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"rubyregex\",\n        \"open\": \" *(/)\",\n        \"close\": \"(/)[imxo]*\",\n        \"style\": \"regex\",\n        \"scopes\": [\"string\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"RSpec\", \"Better RSpec\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Markdown\n    {\n        \"name\": \"mditalic\",\n        \"open\": \"(\\\\*|_)\",\n        \"close\": \"(\\\\*|_)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.italic\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdbold\",\n        \"open\": \"(\\\\*\\\\*|__)\",\n        \"close\": \"(\\\\*\\\\*|__)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.bold\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdcodeinline\",\n        \"open\": \"(`+)\",\n        \"close\": \"(`+)\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.raw.inline.markdown\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\"],\n        \"sub_bracket_search\": \"true\",\n        \"plugin_library\": \"bh_modules.mdcode\",\n        \"enabled\": true\n    },\n    {\n        \"name\": \"mdcodeblock\",\n        \"open\": \"\\\\s*(`{3,}|~{3,})\",\n        \"close\": \"(`{3,}|~{3,})\\\\n?\",\n        \"style\": \"default\",\n        \"scopes\": [\"markup.raw.block.fenced.markdown, markup.raw.block.markdown.fenced\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Markdown\", \"Multimarkdown\", \"GithubFlavoredMarkdown\"],\n        \"plugin_library\": \"bh_modules.mdcode\",\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // LaTeX\n    {\n        \"name\": \"latexmath_inline\",\n        \"open\": \"(\\\\$)\",\n        \"close\": \"(\\\\$)\",\n        \"style\": \"default\",\n        \"scopes\": [\"string.other.math.tex\", \"meta.environment.math.inline.dollar.latex\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"LaTeX\", \"LaTeX (TikZ)\", \"knitr (Rnw)\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    }\n],\n\n// Rule definitions for finding and matching brackets.\n// Brackets are found by using regex and can use scope\n// qualifiers exclude certain matches.\n// Once all matches are found, the closest pair surrounding\n// the cursor are selected.\n\"brackets\": [\n    // Basic brackets\n    {\n        \"name\": \"curly\",\n        \"open\": \"(\\\\{)\",\n        \"close\": \"(\\\\})\",\n        \"style\": \"curly\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"round\",\n        \"open\": \"(\\\\()\",\n        \"close\": \"(\\\\))\",\n        \"style\": \"round\",\n        \"scope_exclude_exceptions\": [\n            \"text.tex string.other.math\",\n            \"punctuation.definition.string.begin.shell\",\n            \"punctuation.definition.string.end.shell\"\n        ],\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"source.regexp constant.character.escape\",\n            \"punctuation.definition.case-pattern.shell\",\n            \"source.yaml-tmlanguage constant.character.escape\"\n        ],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    {\n        \"name\": \"square\",\n        \"open\": \"(\\\\[)\",\n        \"close\": \"(\\\\])\",\n        \"style\": \"square\",\n        \"scope_exclude\": [\n            \"string\",\n            \"source.regexp constant.character.escape\",\n            \"comment\"\n        ],\n        \"scope_exclude_exceptions\": [\"text.tex string.other.math\", \"source.yaml-tmlanguage meta.value -constant.character.escape\"],\n        \"language_filter\": \"blacklist\",\n        \"language_list\": [\"Plain text\", \"Hex\", \"RTF\"],\n        \"find_in_sub_search\": \"true\",\n        \"ignore_string_escape\": true,\n        \"enabled\": true\n    },\n    // PHP Angle\n    {\n        \"name\": \"php_angle\",\n        \"open\": \"(<\\\\?)(?:php)?\",\n        \"close\": \"(\\\\?>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\"string\", \"comment\", \"keyword.operator\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\"],\n        \"enabled\": true\n    },\n    // Angle\n    {\n        \"name\": \"angle\",\n        \"open\": \"(<)(?=[^?%]|$)\",\n        \"close\": \"(?:(?<=[^?%])|(?<=^))(>)\",\n        \"style\": \"angle\",\n        \"scope_exclude\": [\n            \"string\",\n            \"comment\",\n            \"keyword.operator\",\n            \"source.ruby.rails.embedded.html\",\n            \"source.ruby.embedded.html\",\n            \"storage.type.function.arrow.js\"\n        ],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"XML\",\n            \"PHP\",\n            \"HTML (Rails)\",\n            \"HTML (Jinja Templates)\",\n            \"HTML (Twig)\",\n            \"HTML (Django)\",\n            \"HTML+CFML\",\n            \"ColdFusion\",\n            \"ColdFusionCFC\",\n            \"laravel-blade\",\n            \"blade\",\n            \"Handlebars\",\n            \"AngularJS\",\n            \"Java Server Pages (JSP)\"\n        ],\n        \"plugin_library\": \"bh_modules.tags\",\n        \"enabled\": true\n    },\n    // CSSedit groups\n    {\n        \"name\": \"cssedit_groups\",\n        \"open\": \"(/\\\\* *@group .*\\\\*/)\",\n        \"close\": \"(/\\\\* *@end *\\\\*/)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"CSS\"],\n        \"enabled\": true\n    },\n    // Ruby embedded HTML\n    // !!! May conflict with 'php_keywords' if enabled in same file !!!\n    {\n        \"name\": \"ruby_embedded_html\",\n        \"open\": \"((?:(?<=<%)|(?<=^)|(?<==)|(?<=<<))\\\\s*\\\\b(?:if|begin|case)\\\\b(?!:)|(?:(?<=<%)|(?<=^))\\\\s*(?:(?:private|public|protected)\\\\s*)?def\\\\b[\\\\p{Ll}\\\\p{Lu}]*\\\\b(?!:)|(?:(?<=<%)|(?<=^))\\\\s*\\\\b(?:for|until|unless|while|class|module)\\\\b(?!:)|(?<!:)\\\\bdo\\\\b(?!:))\",\n        \"close\": \"(?<=[\\\\s;])(end)\\\\b(?!:)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"text.html\", \"source\", \"comment\", \"string\"],\n        \"scope_exclude_exceptions\": [\n            \"source.ruby.rails.embedded.html -comment -string\",\n            \"source.ruby.embedded.html -comment -string\"\n        ],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"HTML\", \"HTML 5\", \"HTML (Rails)\"],\n        \"enabled\": true\n    },\n    // Ruby conditional statements\n    {\n        \"name\": \"ruby\",\n        \"open\": \"((?:(?<=^)|(?<==)|(?<=<<))\\\\s*\\\\b(?:if|begin|case)\\\\b(?!:)|^\\\\s*(?:(?:private|public|protected)\\\\s*)?def\\\\b[\\\\p{Ll}\\\\p{Lu}]*\\\\b(?!:)|^\\\\s*\\\\b(?:for|until|unless|while|class|module)\\\\b(?!:)|(?<!:)\\\\bdo\\\\b(?!:))\",\n        \"close\": \"(?<=[\\\\s;])(end)\\\\b(?!:)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.rubykeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Ruby\", \"RSpec\", \"Better RSpec\", \"Ruby on Rails\"],\n        \"enabled\": true\n    },\n    // C/C++ compile switches\n    {\n        \"name\": \"c_compile_switch\",\n        \"open\": \"(\\\\#(?:if|ifdef|ifndef))\\\\b\",\n        \"close\": \"(\\\\#endif)\\\\b\",\n        \"style\": \"c_define\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"C++\", \"C\", \"Objective-C\", \"CCpp\", \"C Improved\"],\n        \"enabled\": true\n    },\n    // PHP conditional keywords\n    // !!! May conflict with 'ruby_embedded_html' if enabled in same file !!!\n    {\n        \"name\": \"php_keywords\",\n        \"open\": \"(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(if|foreach|for|while|switch)\\\\b(?=.*?\\\\)\\\\s*:\\\\s*(?://.*?|/\\\\*.*?\\\\*/\\\\s*?)?(?:\\\\?>|$))\",\n        \"close\": \"(?:(?<=^)|(?<=<\\\\?php)|(?<=<\\\\?))\\\\s*(endif|endfor|endforeach|endwhile|endswitch)\\\\b(?=\\\\s*(?:;|;?\\\\?>))\",\n        \"style\": \"default\",\n        \"language_filter\": \"whitelist\",\n        \"scope_exclude\": [\"string\", \"comment\", \"text.html\"],\n        \"scope_exclude_exceptions\": [\n            \"source.php -comment -string\"\n        ],\n        \"plugin_library\": \"bh_modules.phpkeywords\",\n        \"language_list\": [\n            \"HTML\",\n            \"HTML 5\",\n            \"PHP\",\n            \"HTML+CFML\",\n            \"ColdFusion\",\n            \"ColdFusionCFC\"\n        ],\n        \"enabled\": true\n    },\n    // Erlang conditional statements\n    {\n        \"name\": \"erlang\",\n        \"open\": \"\\\\s*(\\\\b(?:if|case|begin|try|fun(?=\\\\s*\\\\()|receive)\\\\b)\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"plugin_library\": \"bh_modules.lowercase\",\n        \"language_list\": [\"Erlang\", \"HTML (Erlang)\"],\n        \"enabled\": true\n    },\n    //Bash\n    {\n        \"name\": \"bash\",\n        \"open\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^|&|\\\\|)\\\\s*)\\\\b(if|case|while|select|until|for)\\\\s\",\n        \"close\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(fi|esac|done)(?=;|\\\\s|$)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.bashsupport\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Shell-Unix-Generic\"],\n        \"enabled\": true\n    },\n    //Fish shell\n    {\n        \"name\": \"fish\",\n        \"open\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^|&|\\\\||and|or|not)\\\\s*)\\\\b(begin|if|while|for|switch|function)(?:;|\\\\s)\",\n        \"close\": \"(?:(?<!\\\\\\\\\\\\n)(?:;|^)\\\\s*)\\\\b(end)(?=;|\\\\s|$)\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"fish\"],\n        \"enabled\": true\n    },\n    // Lua\n    {\n        \"name\": \"lua\",\n        \"open\": \"(?<=[\\\\s;])(if|while|function|do|repeat)\\\\b\",\n        \"close\": \"(?<=[\\\\s;])(end|until)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.luakeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Lua\"],\n        \"enabled\": true\n    },\n    // LaTeX\n    {\n        \"name\": \"latexenv\",\n        \"open\": \"(\\\\\\\\begin{[^}]*})\",\n        \"close\": \"(\\\\\\\\end{[^}]*})\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"comment\"],\n        \"plugin_library\": \"bh_modules.latexenvironments\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"LaTeX\", \"LaTeX (TikZ)\", \"knitr (Rnw)\"],\n        \"sub_bracket_search\": \"true\",\n        \"enabled\": true\n    },\n    // Pascal\n    {\n        \"name\": \"pascal\",\n        \"open\": \"(?:(?<=^)|(?<=[\\\\s;]))(try|(?<=\\\\=\\\\s)(?:class|record|interface)|begin|repeat)\\\\b\",\n        \"close\": \"(?<=[\\\\s;])(end(?=[;\\\\s])|until(?=\\\\s))\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.pascalkeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Pascal\"],\n        \"enabled\": true\n    },\n    // Elixir\n    {\n        \"name\": \"elixir\",\n        \"open\": \"\\\\b(do$|fn)\\\\b\",\n        \"close\": \"\\\\b(end)\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"Elixir\"],\n        \"enabled\": true\n    },\n    // CMake\n    {\n        \"name\": \"cmake\",\n        \"open\": \"\\\\b(foreach|function|if|macro|while)\\\\b\",\n        \"close\": \"\\\\b(end(?:foreach|function|if|macro|while))\\\\b\",\n        \"style\": \"default\",\n        \"scope_exclude\": [\"-keyword.cmake\"],\n        \"plugin_library\": \"bh_modules.cmakekeywords\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"CMake\"],\n        \"enabled\": true\n    },\n    // SINUMERIK 840D SL G-Code\n    {\n        \"name\": \"s840d_gcode\",\n        \"open\": \"\\\\b(IF(?!.*GOTO)|FOR|WHILE|REPEAT(?!.*GOTO))\\\\b\",\n        \"close\": \"\\\\b(END(?:IF|FOR|WHILE)|UNTIL)\\\\b\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.s840d_gcode\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"s840d_gcode\"],\n        \"enabled\": true\n    },\n    // SINUMERIK 840D SL RunMyHmi\n    {\n        \"name\": \"s840d_hmi\",\n        \"open\": \"^\\\\s*(//[ABGMS]|ACTIVATE|CHANGE|FOCUS|IF|LOAD|UNLOAD|OUTPUT|PRESS|SUB)\\\\b\",\n        \"close\": \"^\\\\s*(//END|END_(?:ACTIVATE|CHANGE|FOCUS|IF|LOAD|UNLOAD|OUTPUT|PRESS|SUB))\\\\b\",\n        \"style\": \"tag\",\n        \"scope_exclude\": [\"string\", \"comment\"],\n        \"plugin_library\": \"bh_modules.s840d_hmi\",\n        \"language_filter\": \"whitelist\",\n        \"language_list\": [\"s840d_hmi\"],\n        \"enabled\": true\n    }\n],\n\n// user_scope_brackets and user_brackets will be appended\n// to the tail of scope_brackets and brackets respectively\n// If you have custom rules that you don't want to commit to\n// the official list, and do not need to be inserted before\n// one of the official definitions, this is a good place to\n// put yours rules and keep in sync with the defaults.\n\"user_scope_brackets\": [],\n\"user_brackets\": [],\n\n// Define region highlight styles\n\"bracket_styles\": {\n    // \"default\" and \"unmatched\" styles are special\n    // styles. If they are not defined here,\n    // they will be generated internally with\n    // internal defaults.\n\n    // \"default\" style defines attributes that\n    // will be used for any style that does not\n    // explicitly define that attribute.  So if\n    // a style does not define a color, it will\n    // use the color from the \"default\" style.\n    \"default\": {\n        \"icon\": \"dot\",\n        // BH1's original default color for reference\n        // \"color\": \"entity.name.class\",\n        \"color\": \"brackethighlighter.default\",\n        \"style\": \"underline\"\n    },\n\n    // This particular style is used to highlight\n    // unmatched bracket pairs.  It is a special\n    // style.\n    \"unmatched\": {\n        \"icon\": \"question\",\n        // \"color\": \"brackethighlighter.unmatched\",\n        \"style\": \"outline\"\n    },\n    // User defined region styles\n    \"curly\": {\n        \"icon\": \"curly_bracket\"\n        // \"color\": \"brackethighlighter.curly\",\n        // \"style\": \"underline\"\n    },\n    \"round\": {\n        \"icon\": \"round_bracket\"\n        // \"color\": \"brackethighlighter.round\",\n        // \"style\": \"underline\"\n    },\n    \"square\": {\n        \"icon\": \"square_bracket\"\n        // \"color\": \"brackethighlighter.square\",\n        // \"style\": \"underline\"\n    },\n    \"angle\": {\n        \"icon\": \"angle_bracket\"\n        // \"color\": \"brackethighlighter.angle\",\n        // \"style\": \"underline\"\n    },\n    \"tag\": {\n        \"icon\": \"tag\"\n        // \"color\": \"brackethighlighter.tag\",\n        // \"style\": \"underline\"\n    },\n    \"c_define\": {\n        \"icon\": \"hash\"\n        // \"color\": \"brackethighlighter.c_define\",\n        // \"style\": \"underline\"\n    },\n    \"single_quote\": {\n        \"icon\": \"single_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"double_quote\": {\n        \"icon\": \"double_quote\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    },\n    \"regex\": {\n        \"icon\": \"regex\"\n        // \"color\": \"brackethighlighter.quote\",\n        // \"style\": \"underline\"\n    }\n}\n\n}\n```\n. Please, let me better understand...\ndo you mean that your default app settings are not good to use as they are? Do I need to delete all the BracketHighlighter user settings? Leave some settings for user only? So, I just need that it works as usual on PHP...nothing more \ud83d\ude03 . maybe understood: that user settings copy was from a previous version where you required to copy all the settings on user...ok, thank you \ud83d\udc4d  . ",
    "anneCarlson": "Oops! Thank you!. ",
    "OlehCherenkov": "\nPackage Control should not be installing BH. \nHi, i have same problem\n\nplugins loaded\nSublimeLinter: debug mode: off \nPyV8: Creating new thread\nEmmet: Creating thread\nEmmet: Loading https://api.github.com/repos/emmetio/pyv8-binaries/contents\nEmmet: Loading PyV8 binary from https://raw.github.com/emmetio/pyv8-binaries/master/pyv8-linux64-p3.zip\nPackage Control: No updated packages\nignored packages updated to: [\"BracketHighlighter\"]\nreloading settings Packages/User/Package Control.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\nPackage Control: Error downloading package. HTTP error 404 downloading https://codeload.github.com/facelessuser/BracketHighlighter/zip/st3-2.11.0.\nerror: Package Control\nUnable to download BracketHighlighter. Please view the console for more details.\nHow can i install BH now?. > You've provided me with no info on what version of Sublime you are using. Please provide that information. It seems odd that it is trying to download such an old version though. Depending on more info, this may be a Package Control issue.\n\nI installed BH by webarchive channel package control =) Tnx\n- ST ver.: 3176\n- Platform: linux\n- Arch: x64\n- Plugin ver.: 2.27.4\n- Install via PC: True\n- mdpopups ver.: 3.3.4\n- backrefs ver.: 3.5\n- markdown ver.: 2.6.11\n- pygments ver.: 2.1a0\n- jinja2 ver.: 2.8\n. \n",
    "dhelonious": "The problem is, that BH does something, which makes Sublime Text delete stored regions. I think it is a bug in Sublime Text itself, which, however, seems to occur, because BH changes the view settings very often. I can imagine, that this API feature is not intended to be used in such a way.\nThe problem is nicely illustrated in this code snippet:\n```python\nimport sublime\nimport sublime_plugin\nclass BreakWrapAsYouType(sublime_plugin.EventListener):\n    def on_selection_modified(self, view):\n        def break_wrap_as_you_type():\n            view.settings().set('foo', True)\n            view.settings().set('foo', False)\n        sublime.set_timeout(break_wrap_as_you_type, 0)\n```\nThis should break any package, which heavily relies on regions (as WrapAsYouType).. Thank you for investigating this issue. I don't really understand it either. Except for WAYT I did not notice any problems so far, although I used and still use quite a lot of packages (and many of yours). I could not find anything special in the source code of WAYT, but I'm fairly inexperienced. I also failed to reproduce this issue of WAYT with a test plugin using regions. So I really do not understand what distinguishes WAYT.\nSome addition explanation for the issue: WAYT will wrap text paragraphs according to some width. However, if line breaks are inserted manually, WAYT will preserve these line breaks. It uses a region called \"wrap_as_you_type_explicit_line_break\" to remember intended line breaks as long as the cursor is not moved manually. This region seems to be erased when a setting is set very often, which results in the behavior shown in this gif.\nFrom the description of #431:\n\nIt seems that every time I moved the cursor, BH changes the value of a view setting bracket_highlighter.busy twice, from False to True then False again.\n\nIf I'm not mistaken, this is effectively what the snipped above does?. I see your point, it is quite suspicious. If there is something I can do to help you, then let me know.\nI also see this issue as low priority. For everyone who wants to use WAYT along with BH (without which I cannot live anymore \ud83d\ude09), there is now a \"wrap_as_you_type_passive\" setting which kind of solves the issue by disabling some functionality of WAYT.. ",
    "duranivan": "Sure, I understand. Thanks again! I'm closing this then.. ",
    "FatherOfAlways": "Thank you for your answer and your advice and apologies for the late reply.\nI'll avoid plain text as suggested, not really a problem since most of my text files are in .md anyway.\nForgive my lay knowledge on the subject as I am not a programmer, but from what I've seen of the documentation I should be able to achieve my desired result through the use of \"tag_mode\" with added criteria, correct?. I would be very grateful for your help, whenever you get around to it. Otherwise I'll just try a few things and see if I can figure something out. In any case, thank you.. ",
    "uitta": "Also i've just noticed that it works on another line, but the base64 string is much shorter that the one above\n\n. sorry my fault... solved\n\"ignore_threshold\": true. ",
    "hhxjzyr": "Ok,I have amended my last commit to indent the content between the newly added brackets\n. ",
    "osdu": "Third-party packages usually are placed directly Tools menu below\n. The \"caption\": \"Tools\" should be removed too.\n. "
}