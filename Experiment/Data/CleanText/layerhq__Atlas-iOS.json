{
    "kcoleman731": "Merging to Master so Klemen has my latest\n. I think keeping optional is fine. \n. Nice catch. \n. Understood on not having clearly defined responsibility here. Lets chat about it tomorrow and decide on a way forward...not going to merge for now. \n. This is beautiful. Thank you. \n. Looks very nice. Merged\n. Thank you ben\n. Thank you Ben, looks great.\n. Looks good. Thanks ben\n. Really Solid. \n. Looks great man. \n. Thank you Kevin.\n. Thank you @h0lyalg0rithm \n. Hi @melvynhills, we were waiting on you making changes to the API that blake suggested. I'm happy to do so if you'd like. \n. @melvynhills Thank you very much! I can take care of adding the tests. Merging.\n. @melvynhills If you are interested, the test can be found here. \nhttps://github.com/layerhq/Atlas-iOS/pull/759/files#diff-f23e7fc20b11e74e9d2cdd8d2bd647deR426\n. @grevolution Looks like this branch needs a rebase now. Care to address the spacing comments from @blakewatters  and push it up?\n. @grevolution We added this functionality to Atlas. It is on master and will be in our next release. \n. Thank you @maju6406 \n. Where is the test?\n. Hi @danipralea We just added this functionality to Atlas. It is on master.\n. @danipralea The Atlas test suite is now building Travis as well. Please add a test for this functionality. \n. @danipralea we added this to Atlas. It is on master. \n. Ah...my apologies @danipralea. I missed an #import line. We decided to not use SDWebImage. Should be good to go now. \n. Thank You. \n. Thank you @sanvean \n. @melvynhills Thank you for the PR. I think these are very reasonable additions. Want to add a few tests for em and we can get it merged?\n. Hi @melvynhills. Never heard back from you on this PR?\nI'm going to go ahead and close this as it is actually unnecessary. The searchBar property of the ATLConversationListViewController is set as self.tableView.tableHeaderView. If you subclass ATLConversationListViewController, you can just set the tableHeaderView property to nil if you don't want a search bar displayed. \nYou can also set the leftAccessoryButton to nil if you don't want to see the edit button. \nFair enough? \n. @melvynhills Nice catch. Merged. \n. Also, tests?\n. Thanks @danipralea \n. Thank you @andrewcopp!\n. @andrewcopp  The diameter property is actually meant to be configure via UIAppearanceProperty. It is documented the the default diameter is 30 (I need to correct the actual implementation).  \n@property (nonatomic) CGFloat avatarImageViewDiameter UI_APPEARANCE_SELECTOR;\nYour suggestion to use CGRectGetHeight(self.frame); will have no effect if the view is not initialized with a frame. \n. Hey @andrewcopp my apologies for the delay on this. Trying to catch up on some Atlas stuff today. \nDoes using the public property not suit your use case? If so, can you tell me (explain the problem a bit more) why and we can figure out the ideal solution?\nThanks!\n. Thanks Chad!\n. @piotrbernad Thank you for this PR!\nWe sort the conversation list according to the conversations lastMessage.receivedAt property. If you would like the flexibility to change the sorting and also the date displayed in the cells, I would be very open to a PR that provides that functionality. \nAlso, your PR has changes to the ruby version file and the podfile.lock which we wouldn't want to merge.\n. @andrewcopp  This a a really great addition and something I've wanted to add for a bit. Thank you for the PR. \n. @andrewcopp rather than creating a new property, this same effect can be achieved via the tag property on the Action sheet. Would you be opposed to using that?\n. @kmahal lets add a test to explicitly exercise the new ATLConversationPresenting method and this bad boy will be good to merge. \n. @mailyan Not sure how this PR fell through the cracks for so long. If you are able to rebase. I'll take a look at merging it quickly. \n. Mered #1188 \n. @timominous I'm doing a bit of repo clean up and am going to close this PR unless you have any objections.\n. @artonragsdale I'm doing a bit of repo cleanup and it looks like this PR slipped through the cracks. It looks reasonable to me however. If you'd like to rebase, I'll take a look at getting it merged quickly. Thanks!\n. @sammcd going to close this PR due to no response. Let me know if you want to rebase and get it merged it. \n. @dfinzer  going to close this PR due to no response. Please let me know if you want to pick up the discussion,\n. Thanks for this @WANGjieJacques \n. @klep picking this up for Kabir. Did you guys sort this out or still pending decision?\n. @marioradonic Picking this one up for Kabir. If you wouldn't mind rebasing, we can look at getting this merged. Thanks!\n. @dulaccc Apologies for the delay. \nThank you very much for the PR! Merging away. \n. @sebyddd Any chance you can update per Kabirs comments?\n. Looks good to me. Thanks @tomco \n. What if the developers don't want to show an action sheet? What if they just one a specific thing to happen when the left button is tapped. \n. @mathmatrix828 Thanks for the PR! I just left a few comments on the actual Podfile. If you can make those changes we will get this merged!\n. @mathmatrix828 we had to merge a few PRs on Friday to bump Atlas to CocoaPods 1.0.0 compatibility for our release. Thank you very much for your PR but I am going to close as it is no longer necessary. \n. Thanks for the PR @mailyan. I'm going to close your other one and the old issue.\n. Thanks for this @mrackwitz. I've been trying to sort out the 1.0 podspec issues on my end. \nHave you tried linting the Podspec? I get the following failure. \n\n. @mrackwitz disregard previous comment...it was a derived data issue with the lint build. Thank you very much for your PR. \n. Amazing. I love finding simple API that I previously did not know about.\n. Done\n. As you should. This is me being lazy. Apologies\n. Added\n. I think you are right. This was covered up by my usage of appearance proxy. Nice catch. \n. See the method - (void)configureLayoutConstraintsForLabels\n. Agree..for now I use these logs for debugging purposes so I'd like to keep around. If you want me to change logging format, I'm happy to discuss. \n. Ok yeah that works for me, I'll remove.\n. White space?\n. done\n. Fixed\n. done\n. I think this resulted from a merge issue. I ended up with duplicate methods and removed the first one. Apologies and will fix\n. done\n. done\n. Cool...can't tell you why that was added. Don't remember. Was probably trying to debug something. \n. Thought the QueryControllerDelegate methods were required....I was wrong.\n. Done\n. Actually...this is documented as optional, but gets called everytime and is causing crashes. I'll give blake a PR\n. fixed\n. Dumb...thank you\n. cool\n. Cool\n. Cool\n. Nice catch\n. Done\n. Indeed, you are correct. This issue was with my mock object. Thank you. \n. Done\n. Got em!\n. It does do work asynchronously... from the doc\nThis method is asynchronous. When groups are enumerated, the user may be asked to confirm the application's access to the data; the method, though, returns immediately. You should perform whatever work you want with the assets in enumerationBlock.\n. Done\n. Done\n. Done\n. Done\n. That makes sense\n. Message content cannot currently change...I think this keeps things simple. \n. done\n. Done\n. Done\n. Cool...my mistake\n. Nice\n. Done\n. They were duplicate lines of code. \n```\n        _bubbleView = [[LYRUIMessageBubbleView alloc] init];\n        _bubbleView.translatesAutoresizingMaskIntoConstraints = NO;\n        _bubbleView.bubbleViewLabel.font = _messageTextFont;\n        _bubbleView.layer.cornerRadius = _bubbleViewCornerRadius;\n        [self.contentView addSubview:_bubbleView];\n    _avatarImageView = [[LYRUIAvatarImageView alloc] init];\n    _avatarImageView.backgroundColor = LYRUILightGrayColor();\n    _avatarImageView.translatesAutoresizingMaskIntoConstraints = NO;\n    _avatarImageView.layer.cornerRadius = _avatarImageViewCornerRadius;\n    [self.contentView addSubview:_avatarImageView];\n\n``\n. Possibly...I think it depends on how far we want/need to take this feature. The case you are describing would be a problem if the number of objects in the queryController == the pagination window. In that case, if more messages arrive in the query controller...none would be automatically broadcast to the UI. If the pagination window is higher that the total count when the new messages come in, then the UI gets them automatically. \n. done\n. done\n. Good call\n. done\n. why also check for!_conversationhere? Don't you just need!conversation`?\n. Yes! I was looking all over for a function like that but could not find. Thank you. \n. Cool\n. Right, your last line there is why I opted to go for a notification as opposed to delegation. It seems a bit much to delegate a link tap back to the cell, controller, then ultimately the delegate. This also does add some bloat to the conversation view controller delegate.\nI think proper documentation on our part + proper handling of notifications on the developers part make notifications a better solution personally. If you feel strongly the opposite is true, I'm happy to change. \n. done\n. That is indeed cleaner\n. The issue with adding an NSLinkAttributeName is that is automatically colors the link string to blue. It also overrides any color I set for NSForegroundColorAttributeName. I've yet to find a way to override that color. Any ideas?\n. I think we could document that changes to properties wont take effect without calling present message again...ie reloading the section.\n. Also, my original reason for removing these is because I switched bubble view to use an attributed string. I guess if these methods get called we could just call updateWithAttributedText: again?\n. I'm cool with that. Will change\n. We do. I added back and added a test as well. Thank you. \n. This diff is wrong. Check out the actual file. \n. Correct....we have discussed this before how in the subclasses of the MessageTableView cell we were setting the property directly as opposed to using ivars. I tried actually synthesizing the property in the subclasses, thus giving me access to the ivar but this still overrode the UIAppearance proxy. Therefore, I think we set a default behavior for the Super Class and allow developers to customize the subclass. Or perhaps we could check for class type in the initializer?\n. Yes, that is the reason here. \n. Done and done\n. Simply cosmetic. If there is no data and you pod this on screen, you no longer see an empty table view and can display an empty state view. Similarly, if you have 2 or 3 conversations, you don't get a bunch of other empty cells. \n. Cool with me\n. done\n. done\n. Understood. The actual object doesn't really do much though. Whereas for a protocol, they can implement this on existing objects they already have. For example, a User object. \n. Done\n. Done\n. Done\n. done\n. Done\n. Done\n. Done\n. Dibe\n. Done\n. Ah, ok. I thought it would be ok for a view to set this property on itself...but if that is not correct, I'm happy to change. \n. https://github.com/Masonry/Masonry/blob/master/Masonry/View%2BMASAdditions.m\nI looked at this library which is a pretty popular iOS autolayout library. It looks like in there, views set the property on themselves directly. \n. Agree...I have the conversationViewController cleanup PR coming. I'll be removing all the whitespace around constraints. \n. Done\n. yep\n. Cool\n. Should be private\n. thnx\n. Yup\n. Yup\n. Yep\n. Cool\n. ok\n. Done\n. Done\n. Understood.\n. Cool\n. Cool\n. Makes sense\n. Correct\n. I don't think it is. Removing. \n. That there is\n. Cool\n. Cool\n. Cool\n. done\n. Done\n. Removing commented out lines. Just got clarification from Klem on what he wanted here. He will come back and clean up finish his desired implementation later. \n. Cool\n. Yes it is no longer necessary. \n. Yea, I need to fix the predicate parsing. I'll get to it. \n. shoot sorry...I saw that in the diff and thought it had been removed! Now it is gone\n. Yeah sure, that is fair. I am relying on layerKit to always give me 3 message parts if sending an image, but it doesn't hurt to guard against. \n. Understood on this. I feel like it may be a bit of an over optimization for the time being however. I like the encapsulation we get by putting the snapshotter logic in the function. I've also tested having a bunch of location messages in a conversation and scrolling is still buttery. Especially with the new Cache you added. \n. Switched these back. \n. done\n. done\n. done\n. Done\n. No I'm not sure why I put that in there. I changed the interplay between footers and headers a bit but this is wrong.\n. ok, sounds great. \n. done\n. I like that. \n. Actually, we will need to keep the below. \nif (section == LYRUINumberOfSectionsBeforeFirstMessageSection) return YES;\nAt section 1, we want to return yes always. Without that line however, the following line gets executed causing a crash in the queryController index path calculations. \nLYRMessage *previousMessage = [self messageAtCollectionViewSection:section - 1];\n. Done\n. done\n. thank you\n. done\n. done\n. Would you recommend calling [self appearance]?\n. I switched the line to\nCGSize participantNameSize = LYRUITextPlainSize(participantName, [[self appearance] participantLabelFont]);\nAnd it works like a charm ;).\n. The height evaluates to 0...which is what I want. Basically, before I had these height values hardcoded...now they are dynamic. \n. Ahh ok. I see what you are saying....testing this out now to see what works. \n. Done\n. done\n. done\n. Ok so a combo of having a dispatch once, single cell + changing the message sizing method to \n+ (CGFloat)cellHeightForMessage:(LYRMessage *)message inView:(UIView *)view\nWorks nicely. I apps in the LYRUIConversationViewController's view and everything in hunky dory. \n. done\n. Yeah, lets talk about that as an optimization of the feature after we merge this. We want to have this functionality for testing external content.\n. shit...that is a good call. I'll change back. \n. done\n. done\n. done\n. Yep\n. keeping em. You are correct...my mistake on being inconsistent.\n. yes\n. ok that makes sense. I'll lose the comment.\n. done\n. works for me. \n. Jesus...I always miss this shit. Thank you\n. I'll go through and scrub for these comments and make sure all are in line tomorrow. \n. They should and it can\n. thank you\n. Changed to start with dataSource\n. I think that is a nice idea.\n. thank you\n. That was my thinking. Thank you.\n. fixed\n. yep, fixed. Need to do a full scrub and add copyright in a bunch of different places. \n. The Conversation VC sets the query controller and its delegate to nil at some point so I added a resetQueryController method to handle this. \n. I like that. Just implemented\n. Yes, I like that. Done\n. Done\n. done\n. Done\n. Done\n. Done\n. Needs Copyright \n. need copyright\n. hahaha...best comment ever. Happy to rethink and refactor. \n. Done\n. Done\n. cool\n. done\n. done\n. There are a handful or them. \n. Ben had this suggestion before he left. I've also seen it in other open source projects. \ncommonInit could be used by another developer and unknowingly override our method. Happy to remove if you don't think it is necessary. If we keep I'll have another PR to change to atl_\n. This is updated. \n. Why are we choosing 0.5 here? Do we want to make this a constant?\n. No. If you look ate the method scrollToBottomOfCollectionViewAnimated, it actually now contains a comment about why we no longer use the collection view layout's content size when scrolling to the bottom. This comment is out dated. \n. Cool. Why does apple use instancetype in their init snipped out of curiosity?\n. Yep, my mistake. \n. This is actually a larger question. I ran into an issue last night where the Layer Messenger conversation subclass overrode the same method. This caused a bug which prevented the collection view from scrolling with the keyboard. \nBen had actually brought this up...but it would de pretty easy for developers to mistakenly override our internal methods and break functionality. He actually suggested prefixing all internal methods. Thoughts on this?\n. Yea, I was looking at snippets yesterday because I want to create some for Atlas data source and implementation methods. Init has instance type. I dont care either way. \n. K sounds gooc. \n. Format the we use here. \n```\n- (void)testToVerifyCaseInsensitiveSearch\n{\n}\n```\nAdd a space after the dash and then put the opening brace on the next line. \n. extra line after closing brace\n. we can remove setup and teardown methods is not being used. \n. space in between - and (void)\n. self.typingParticipantIDs is already an NSMutableOrderedSet. Calling the following returns another mutable ordered set so is not necessary. \n[self.typingParticipantIDs mutableCopy]\nYou are also assigning removedParticipantIdentifiers to be an NSMutableSet which contains one object, an NSMutableOrderedSet. Don't think that is what you want correct?\nYou probably want the following...\n[NSMutableSet setWithArray:[self.typingParticipantIDs array]];\nThe array call on an NSMutableOrderedSet returns a facade object which you can then use to create the Mutable set. \nOh collections!\n. This class need documentation as well as our stock header comments\n. Also, put credit link in implementation \n. All C functions need our ATL prefix. See ATLMessagingUtilities for reference. \n. Opening brace for C functions goes on next line. \n. number is a non descriptive variable name. Lets chose something that describes the instance a bit more.\n. a and b are rough variable names. We need to make this class conform to our style...including function names, variable names, formatting etc.\n. - (void)configureBubbleViewForImageContent has become a bit of a beast with GIF support. Lets break out Gifs into its own configuration method. \nconfigureBubbleViewForGIFContent\n. Spaces after the double back ticks. Rendered in the UI. \n. Break this out into two doc blocks. Your @param statement makes it sound like the first method takes two parameters. \n. extra white space\n. need braces here for the if statement. Difficult to debug if otherwise\n. Braces here for if statement\n. Opening brace should be on next line.\n. No need for stringWithFormat here...it is just a string. Let's make this a constant so we can use it in tests\n. No, we set the text often internally...every time we flip from enabled to disabled....it is necessary for when we switch back and forth between image and text. I can change and make it more flexible if you like. \n. text string is redundant.\n. The conversation for which the last message text should be returned. \n. A string representing the content of the last message. \n. We use the presenting pattern all over Atlas so that controllers can inform cells of their content. It also allows custom cells to conform to the presenter protocols if they wish to implement their own subclass. We should add a method to the ATLConversationPresenting protocol rather than add a datasource. \n. Understood. What we should probably do then is break out the default logic that determine the last message text and move it into the controller. TBH, that is probably where it belongs anyways. So then you keep the presentConversation method, because people def will want that, but we add the updateWithLastMessageText:. This mirrors what we have for conversation title. \n. if (!lastMessageText) {\n     lastMessageText = [self defaultLastMessageTextForConversation:conversation]\n}\n[conversationCell updateWithLastMessageText:lastMessageText];\nI think this is more readable...less logic. \n. Looks good man. We are going to need to add documentation to the public data source method that the media attachments array can be nil...and what this means. \n. Let's update the old docs to be accurate....\n@discussion Called when a user taps the `leftAccessoryButton` on an `ATLMessageInputToolbar`.\n. The media attachments array can also be empty, which indicates the leftAccessoryButton was tapped when it contained no content. \n. Be consistent with your property access. Use either . or brackets...not both. \n. easier to do if (!pushText)\n. I think you will have to do something else here. What happens if I have text part, then image part, then another text part? The third test part will override everything else?\n. Not a big fan of the class extension here. Should we just make this method public? Why would we not?\n. expand the if statement\n. Expand the if statment\n. I'd like to see a bit more test coverage here. You should test different media attachments and ensuring they send correctly. \n. I think this configureRightAccessortyButtonState call  should be unnecessary? The bar should just update if you set its text or insert an attachement\n. lets give this a more descriptive name...mediaAttachementCache...or something. \n. conforms to a protocol \n. Looks like you have an old LayerKit dependency here. \n. The answer is Yes, and that is the point of the PR. Whenever a cell is reused, the resetView method is called by the cell in which the avatar image view will reside. This will cancel any inflight request the image view possess. This all happens before the next request is made. \n. Done\n. I'd put this logic in the controller itself. Passing an entire collection view object to a convenience method is a bit strange.\n. is there a use case for different actions for different MIMEtypes? If so perhaps this should be a data source method. \n. On second thought, I'm reading your comment for this property. Why is it even necessary?\n. Probably don't want to commit this file\n. Don you want to move this entire implementation ?\n. What the heck does this thing do. \n. Yo def need test coverage on this stuff. Set up a few different scenarios, type the search string in the search bar and verify the expected results. \n. No...this subclass does not override the method. Therefore self is fine. \n. developers take care of it. \n. works\n. Are we sure we want to just return nil here? Why not assert in the case there is no query controller?\n. IMO we are gonna want to put a completion block on the synchronizeMoreMessages call. This addObserver, remove observe fun is gonna screw people up. \n. just cocoapods stuff. They have a few scripts in the project. \n. we want a line here. \n. Check with @blakewatters  for cocoa protocol naming convention here. \n. Why not check if delegate responds to selector first?\n. Wow dumb. Thank you.\n. No need to introduce an Atlas target here. \n. OCMock is not a dep of the Programmatic or Storyboard targets...It should only be included for the test targets. \n. Unit tests requires Expecta. \n. ",
    "brblakley": "I rebased this on to master and fixed the merged conflicts.\n. I think I can improve this so I\u2019m going to close it.\n. I think I found a way to get the toolbar to slide on correctly so I\u2019ll close this for now.\n. This shouldn\u2019t be commented out since we only want to scroll if the collection view already was at the bottom, right?\n. Don\u2019t we need to use whatever font is going to be used by the cell to get the size calculation right?\n. Are options required by newMessageWithParts:options:error:? If not, then we could just make this:\nNSDictionary *pushOptions;\n. There\u2019s a missing space here after the =.\n. There\u2019s an extra space here after the =.\n. Do we need this to be left as commented out or can it be removed?\n. For consistency, we should ideally come to a rule about these empty lines at the beginning of if statements. I\u2019ve been removing them.\n. Should this be LYRUIAvatarImageDiameter / 2?\n. Maybe this should get moved up to the superclass for clarity.\n. There\u2019s a typo here in \u2018avatarImageViewConrnerRadius\u2019.\n. What is this referring to? The casing of \u2018UIConstants\u2019 makes me read that as the name of a class.\n. Since most developers will think of Apple\u2019s UIKit, I think we should use the full name of LayerUIKit. Although in this case we probably don\u2019t need to mention the name at all since it\u2019s likely implied. But I think we should be clear that the bug was a developer\u2019s customizations via UIAppearance might get overridden. So maybe something like:\n- Fixed possibility of customizations via UIAppearance being overridden.\n. There\u2019s a typo here in \u2018UIActivitiyIndicator\u2019.\nLike above, the casing of \u2018UI Cells\u2019 makes me read it as a class.\nIn a more general sense, is this change about adding support for external content? If so, maybe that\u2019s just what we say, something like: \u2018Added support for external content.\u2019 \n. There\u2019s an extra blank line here.\n. There\u2019s one of those blank lines here.\n. For our UIAppearance-compatible properties, we have to set our default values without the setters, right?\n. Here\u2019s an extra blank line.\n. I suppose this typo fix / name change should get added to the change log.\n. \u2018UI\u2019 appears twice here in the prefix.\n. Same double \u2018UI\u2019 here in the prefix.\n. Looks like there was already a typo here (i.e. a missing \u2018t\u2019) before the prefix change.\n. Do these two default values get used? That is, if the values aren\u2019t customized via UIAppearance, are the defaults used? It seems like here in initWithFrame: we\u2019d need to do something like:\n_bubbleView.layer.cornerRadius = _bubbleViewCornerRadius;\n_avatarImageView.layer.cornerRadius = _avatarImageViewCornerRadius;\nOr maybe I missed that happening elsewhere.\n. Sorry, for these I meant that we need both to set the default values and then use them when setting up the subviews. So this part above would be just setting the default values:\n_bubbleViewCornerRadius = 12;\n_avatarImageViewCornerRadius = LYRUIAvatarImageDiameter / 2;\n. Do these default values all get used when setting up the cell/subviews?\n. I think we should try to keep logging out unless it\u2019s for errors.\n. Does the logging need to be in release builds? That is, if it\u2019s just for debug builds then I\u2019d recommend just not committing those logging statements. (I do that a lot, i.e. add a bunch of logging while I\u2019m developing something but then leave them out of my commit.) Or another common technique is to set up a macro (e.g. DLog) that only logs in debug builds, i.e. it gets ignored in release builds. That works well too, although it still can be problematic if there\u2019s a ton of debug logging going on that\u2019s unrelated to what you\u2019re currently working on.\n. Should this go in the change log?\n. There\u2019s a missing backtick for registerClass:forMessageCellWithReuseIdentifier:.\n. Are custom conversation cells new to the pending release? If so, I suppose we don\u2019t need these new lines about custom conversation cells in the change log.\n. I\u2019d keep blank lines like this one so that all headings are followed by one blank line.\n. There\u2019s a typo here in the string.\n. Should we note this change in default behavior in the change log?\n. Why was tableView:canEditRowAtIndexPath: moved and the UITableViewDelegate pragma mark deleted?\n. There\u2019s a typo here with \u2018initialize\u2019.\n. There\u2019s a typo here with \u2018initialize\u2019.\n. I take it we\u2019re making this public just for the sake of testing? I get that changes often need to be made to make things easier to test but I think ideally those changes would be justified without their testing implications. For example, refactoring some internal logic into a separate class not only makes it easier to test that logic but also likely improves the clarity of the code. But exposing internal logic/properties just for testing could actually make the code weaker / more vulnerable to problems since we\u2019re exposing internal stuff that isn\u2019t meant for external usage. That said, this is just my two cents on the topic. If it must be public then I would recommend making it readonly.\n. Same comment here on avoiding making things public that don\u2019t need to be.\n. Same comment here on avoiding making things public that don\u2019t need to be.\n. I don\u2019t think this change is necessary.\n. I\u2019d leave out empty method implementations.\n. There\u2019s a typo: \u2018in downloading\u2019 instead of \u2018is downloading\u2019\n. I don\u2019t think we need this extra blank line.\n. Same comment here on avoiding making things public that don\u2019t need to be.\n. Looks like a mistaken extra space.\n. We\u2019re calling a different method here on super. With that fixed, we could remove the whole method since it only calls super.\n. For clarity, I\u2019d recommend rewriting this as:\nif (participantIdentifiers.count == 0) return @\"Personal Conversation\";\n. For simplicity, I\u2019d recommend rewriting this as:\n[participantIdentifiers removeObject:self.layerClient.authenticatedUserID];\n. Same as above, I\u2019d recommend rewriting this as:\nif (participants.count == 0) return @\"No Matching Participants\";\n. There\u2019s a missing space before the curly bracket at the end of the line.\n. It looks like it\u2019s called correctly:\nhttps://github.com/layerhq/LayerKit/blob/master/Code/LYRQueryController.m#L185\n. It looks like the blank line is still being deleted here.\n. I think we mean UICollectionViewCell here.\nAlso, there\u2019s a typo on \u2018to\u2019.\n. Do we need to mention the index property here? It seems like it could be left out, so just:\nReturns the `UICollectionViewCell` corresponding to the provided `LYRMessage` object.\n. Same thing here with the mention of the index property.\n. I\u2019d recommend leaving logging like this out of master if we can.\n. This extra space is still there.\n. Does this function do its work asynchronously? If not then I would just have it return the image for simplicity.\n. OK. It looks like there are a couple of cases where the completion block wouldn\u2019t get called currently:\n1. On failure, i.e. failureBlock.\n2. If there aren\u2019t any photos.\n. To clarify, I\u2019m assuming that the completion block is suppose to be called no matter what. So a caller would have to check in its block to see if the returned image is present or nil.\n. For consistency, I\u2019d use dot notation for the property, that is:\n[UIApplication sharedApplication].applicationState\nAnd I find it easier to read a condition like that if it just uses !=.\n. Could you change this to LayerUIKit?\n. Same here, LayerUIKit instead of Pods.\n. Why was the label\u2019s \u2018right\u2019 attribute constraint removed? I think we need that to prevent the (admittedly unlikely) case of a very long string shown on a small screen.\n. Same here: I think we ideally would have left and right constraints to deal with unlikely, long strings.\n. I\u2019d remove this logging on success.\n. Can messages be updated in other ways we care about? E.g. can a message\u2019s content be changed?\n. To avoid magic numbers I\u2019d recommend using the content inset top here. (I\u2019m assuming that\u2019s where the 64 comes from.)\n. Same thing here with the 64.\n. I\u2019ve been changing pragma marks to use the protocol name.\n. I\u2019d simplify this if statement with:\nNSDate *date = message.sentAt ?: [NSDate date];\ndateString = [self.dataSource conversationViewController:self attributedStringForDisplayOfDate:date];\n. I think this should be weak so that as the header is scrolled offscreen and reused, we no longer have a reference to it.\n. Don\u2019t we need logic to prevent displaying the loading indicator when there are no more messages to load?\n. Don\u2019t we need logic to handle the number of available messages changing? For example, we scroll to the top, we don\u2019t increase the pagination window because there aren\u2019t any more to load, later more messages become available.\n. Why were these removed?\n. Ah, I see. Good catch.\n. Why were the header and footer classes renamed? I don\u2019t think of them as being the header/footer of the collection view controller, but rather the header/footer of the collection view. So the original names seem more fitting to me. Well, to be more precise, they\u2019re the header/footer of the collection view section so I suppose they could be named according to that.\n. There\u2019s a missing space after the =.\n. Would conversation.hasUnreadMessages be an even more direct way of specifying this?\n. Since dateString is only used inside the if statement, I\u2019d just declare it there for clarity.\n. Same thing here for participantString, i.e., I\u2019d recommend declaring it inside the if statement.\n. I\u2019m remembering now the difference between accessibility identifiers and accessibility labels. Sorry, I think I was using them interchangeably when we were discussing. So this constant name should probably use \u2018Label\u2019 instead of \u2018Identifier\u2019. There\u2019s also the question of how the values should be formatted since they\u2019re used by VoiceOver, I think. Accessibility is a huge topic though. Maybe just title case phrases is good for now, e.g. \u2018Conversation Collection View\u2019 and that will then match \u2018Conversation Table View\u2019.\n. This line combined with the one below it check if the new value is equal to the old value (since we don\u2019t want to continue if they\u2019re the same). The first line handles the case of both values being nil. The second line handles all other cases (i.e. at least one value isn\u2019t nil). We need the first line since [nil isEqual:nil] is NO.\n. I think it\u2019s best to have the prefix in the string value as well for consistency and to make conflicts less likely.\n. Could we just pass the frame\u2019s size here directly?\n. Could we remove the extra spaces around the = for consistency?\n. Can we use NSLocationInRange for this?\n. We could break out of the loop here since we found what we\u2019re looking for.\n. I think we might run into that problem here if I\u2019m remembering correctly where setting a UIAppearance compatible property via its setter prevents it from being set later with the proxy. I remember there were solutions but that they weren\u2019t\u2019 pretty. Since it looks like we\u2019re already in that situation with the existing properties, I suppose we could just go forward with this addition but make sure we address the situation at some point.\n. It doesn\u2019t look like creating this new attributed string is necessary.\n. The documentation says:\n\nThis property is set automatically when you add an NSLayoutManager to an NSTextStorage object; you should never need to set it directly.\n\nSo since we\u2019re already calling [textStorage addLayoutManager:layoutManager], it sounds like we don\u2019t need the above line, i.e. [layoutManager setTextStorage:textStorage].\n. For the layoutManager property the docs say:\n\nAvoid assigning a layout manager directly through this property. Adding the text container to a layout manager through the NSLayoutManager method addTextContainer: assigns the new layout manager to this property.\n\nSo since we\u2019re already calling [layoutManager addTextContainer:textContainer], it sounds like we can remove the above line, i.e. textContainer.layoutManager = layoutManager.\n. This variable isn\u2019t used.\n. We can use NSUnderlineStyleSingle for the value.\n. There\u2019s an extra blank line here.\n. We could add an attribute with NSLinkAttributeName then in the tap handler we wouldn\u2019t have run the data detector again since we could just enumerate using that attribute.\n. I meant to add that another benefit to that technique is that we can set the attribute\u2019s value to the URL that is given to us by the data detector (result.URL) so that we later don\u2019t have to do any work to covert the string into a URL.\n. I\u2019m wondering if using notifications to communicate tapped links could be problematic in that there might be a case for having multiple observers (say, different view controllers in a navigation controller stack) where they\u2019d need to be careful to not react to notifications that weren\u2019t meant for them / already acted upon. Of course they could distinguish notifications based on the passed object and userInfo if we provided them but that doesn\u2019t seem ideal. I\u2019m wondering if delegation is a better fit. That would be more difficult on our side since we\u2019d need to communicate the tap from the bubble view to the cell to the view controller to the view controller\u2019s delegate. But my feeling is that might be better.\n. There\u2019s extra space around = in the three lines above.\n. There\u2019s a missing space before {.\n. There\u2019s a missing blank line here.\n. For these methods that set the font and colors, as they\u2019re written now it looks like changing their values wouldn\u2019t take effect immediately without calling presentMessage: after. LYRUIParticipantTableViewCell has a similar situation. There we reconfigure the part of content that is dependent on the new value each time the setters are called. I imagine this is an edge case though so I don\u2019t know if it\u2019s fine as is.\n. If we want to support the values being used immediately then, yes, we\u2019d need to call updateWithAttributedText: but that method is only called depending on the mime type. So probably the easiest would be to add a message property that gets set in presentMessage: and then in the font and color setters call presentMessage: again (or extract the logic out of presentMessage: into a helper and call the helper and perhaps even a helper specific to the text mime type that doesn\u2019t do anything if the mime type isn\u2019t text).\n. This should be if (error) I think.\n. If this setter isn\u2019t ever called, will the default diameter be used for the cornerRadius?\n. There\u2019s a typo for \u2018separated\u2019.\n. Should these color names just be all lowercase?\n. Don\u2019t we still need this setter?\n. Here\u2019s another \u2018separated\u2019 typo I missed on the first pass.\n. Here\u2019s a typo on \u2018recommended\u2019.\n. There\u2019s a blank line here at the end of the method.\n. Is the reason for this property over just using the superclass\u2019s backgroundColor that we can\u2019t easily set backgroundColor to a default value and still allow customizations via UIAppearance? (I don\u2019t know if that\u2019s true or not, but I\u2019m guessing there\u2019s at least some complexity there.)\n. Are we no longer providing the separate default values for incoming and outgoing cells? That is, the default appearance is blue text on gray bubbles for both incoming and outgoing cells.\n. I wonder if we could set our default values by using UIAppearance ourselves. I know we had a version of that a while back but I mean the class would set its own default values so that it wouldn\u2019t (I don\u2019t think) override any settings any other classes make for it. Maybe using initialize. I just did a quick search and came across this. It doesn\u2019t describe our exact situation but discusses what sounds like that technique: http://www.malolans.com/2014/04/11/uiappearance-and-default-styles/\n. There\u2019s a space in the old method name and there\u2019s a missing period at the end of the line.\n. There\u2019s an extra \u2018an\u2019 here.\n. The error param is missing here.\n. What\u2019s the reason for this change?\n. I think we\u2019ve been excluding the space between id and the protocol.\n. This is missing \u2018LayerUIKit\u2019.\n. This .m should be .h.\n. There\u2019s a typo here on \u2018conforming\u2019.\n. There are two spaces after \u2018@discussion\u2019.\n. This \u2018a\u2019 should be \u2018are\u2019.\n. Should this be something like: \nThe avatarItem is used to display either an image or initials with a LYRUIAvatarImageView in an LYRUIConversationTableViewCell.\n. Even that isn\u2019t completely accurate, I suppose, since the cell class could be a custom one.\n. Since the avatar image view uses \u2018full name\u2019 maybe this should as well.\n. I\u2019m wondering if making this a protocol puts more work (i.e. creating a class or modifying an existing class to conform to the protocol) on the developer unnecessarily. Is there a benefit to making it a protocol?\n. If you want to remove the cell separators that are shown below the last cells to fill the screen, you can set the table view footer to an empty view.\n. By 'an empty view' I mean a view with 0 height.\nhttp://stackoverflow.com/questions/1369831/eliminate-extra-separators-below-uitableview-in-iphone-sdk\n. The \u2018an\u2019 isn\u2019t capitalized here.\n. We\u2019re missing backticks around the image view and cell classes. And for consistency, I suppose it should be \u2018an\u2019 instead of \u2018a\u2019 LYRUIAvatarImageView.\n. There\u2019s an extra blank line here.\n. This is using the old method name.\n. This line caught my eye because if reads like it\u2019s a magic number or hidden behavior. So this means that if a message part isn\u2019t downloaded then we know there\u2019s another following part and that other part is JSON describing the size of the image?\n. There\u2019s a typo here on \u2018Attachment\u2019.\n. The same typo is here on \u2018Attachment\u2019.\n. I see below how the message parts are created. I\u2019m not sure what would clear this up. Maybe adjusting it to handle cases where messages aren\u2019t in that format. That is, before getting parts[2] we first check that it exists. And when it does exist but doesn\u2019t contain JSON or the data we expect, we fail gracefully. I\u2019m assuming that\u2019s what the 40x40 size returned above is for, i.e. to fallback when encountering an error for a downloaded image.\n. There are extra blank lines here.\n. There\u2019s an extra blank line here.\n. There\u2019s an extra blank line here.\n. There\u2019s an extra semicolon here.\n. We\u2019ve been putting the space after the * instead of before it. Also, there\u2019s an extra space after the =.\n. quality is passed to UIImageJPEGRepresentation and it takes a CGFloat.\n. I had thought that ideally views aren\u2019t suppose to set their own translatesAutoresizingMaskIntoConstraints property just like they\u2019re not suppose to set constraints for their dimensions and such. That is, it\u2019s the job of the superview or view controller. I\u2019m not positive. I searched through the project and it looks like currently, the only place we\u2019re doing that is in LYRUIMessageInputToolbar. I think that was to workaround all those ridiculous input accessory view issues.\n. We usually keep a single blank line here.\n. I\u2019d recommend deciding on a consistent usage of white space for constraints and then update all instances throughout LayerUIKit and the sample app.\n. That is, if you follow that recommendation, I\u2019d recommend doing more white space updates to constraints in a separate PR.\n. There\u2019s a typo on \u2018available\u2019.\n. Same comment here a view setting its own translatesAutoresizingMaskIntoConstraints property.\n. I think the second attribute passed should be NSLayoutAttributeNotAnAttribute.\n. Same thing here, I think the second attribute passed should be NSLayoutAttributeNotAnAttribute.\n. The indentation here is inconsistent.\n. For consistency, the blank line should be below the break.\n. There\u2019s an extra blank line here.\n. Is this suppose to be a public property? If so, is it suppose to be readwrite?\n. I\u2019d use firstObject instead of [0].\n. I\u2019d use firstObject instead of [0].\n. I\u2019d recommend making sure that part exists and that its MIME type is what is expected.\n. I\u2019d use firstObject instead of [0].\n. It seems like these are actually representing two things: style and options. Style can be one of five values. Options are a mask. So I think I\u2019d separate them.\n. I\u2019d recommend making sure this part exists and that its MIME type is what is expected.\n. This is minor but I\u2019ll point it out if you care: There\u2019s some inconsistency in the progress values, i.e. 1.0f vs 1.00. I think we have some inconsistency like that with floats throughout the project so I\u2019m not sure that it matters all that much. I think it might just be more noticeable here because the same value for one parameter is formatted differently.\n. I suppose we should be using constants for these keys. I know this was already being done prior to this PR so maybe it\u2019s just something we address in the future.\n. There\u2019s an extra blank line here.\n. Won\u2019t this create a retain cycle?\n. I don\u2019t think I follow why this is needed, i.e. using userInfo to store a reference to the cell/self.\n. Since the if statement\u2019s body has a return, I\u2019d drop the else and put this line after/outside of the if statement for clarity.\n. I think setting these values explicitly is unnecessary.\n. It looks like LYRProgress defines fractionCompleted as a double. Perhaps, this should be as well (including the methods that use this value).\n. These break statements are unnecessary. Also, the switch statement syntax we\u2019ve been using is to have a single blank line between each case.\n. This property is used for the lineWidth property of CAShapeLayer. Since lineWidth is a CGFloat, I\u2019d make this one too.\n. I\u2019d use kCAAlignmentCenter here.\n. Is this code suppose to be commented out? Related to that, it doesn\u2019t look like the animated parameter is currently used.\n. For consistency, I\u2019d use dot notation syntax here.\n. Is this code suppose to be commented out and left in?\n. Should this comment be removed with the following code?\n. There\u2019s a space before the ].\n. I don\u2019t know anything about Masonry but looking at its readme, it looks like those are helpers that some object would call. So it\u2019s not exactly that a view is setting its own translatesAutoresizingMaskIntoConstraints value. Rather, it\u2019s some caller that is calling that method to set up constraints and the method sets that view\u2019s property. (I suppose the caller could be the view itself but I don\u2019t think that would be the recommended approach.) Whereas what we\u2019re doing here is setting the value in init.\n. This guy is still here.\n. I think we need to use isEqualToString:.\n. Do you want to check that this part exists first? For example, you could change the else to an else if.\n. I\u2019m wondering if a possible tradeoff to this setup is that we\u2019re no longer canceling any in-progress snapshots when cells are reused. That is, if a cell that is configured to show a location appears onscreen but then is scrolled offscreen before the snapshot finishes, the snapshot will continue to be performed and, I\u2019m guessing, have some impact on performance. Although, I have no idea how much of an impact.\nCome to think of it, I suppose that same situation could also lead to a cell/bubble view\u2019s completion block being called after it has been reused causing it to display a location image in the wrong cell.\nSo one solution would be to keep the function but have it return the snapshotter and then like before it\u2019s the bubble view\u2019s responsibility to call cancel when being reconfigured.\n. I suppose this could be private now.\n. There\u2019s an extra blank line here.\n. Should this be downloading previewPart?\n. Should this be if (!...?\n. When the cell is reused, I\u2019m guessing we need to clear out self.progress so that this delegate method doesn\u2019t get called after being reused and cause us to display content in the wrong cell.\n. This line isn\u2019t indented all the way.\n. Same thing here, this line isn\u2019t indented all the way.\n. For consistency, I think progress should be a double.\n. I think for consistency this should be a CGFloat (along with the property definition).\n. OK. What about the cell reuse case though where we could end up displaying the snapshot in the wrong cell?\n. This will cause a crash if the item doesn\u2019t exist. You could do something like message.parts.count > 2.\n. OK. This one still remains.\n. There\u2019s a semicolon at the end of this line.\n. I think we need a return in this if statement.\n. I think we need to set self.bubbleImageView.hidden = NO before this if statement.\n. I think we need to set self.bubbleImageView.alpha = 0.0 before calling this animation.\n. I think we need to call [self.snapshotter cancel] in this case as well since a cell that was used for a location could be reused for a different location and we don\u2019t want to get the old location\u2019s snapshot. Or we could just call it before the switch statement instead of calling it for each of the cases since it needs to be called for all cases.\n. This should be a CGFloat to match the getter.\n. Do we need to keep this line since we\u2019re not having the views set it themselves?\n. There\u2019s an extra space after the +.\n. There\u2019s a typo here on \u2018Vertical\u2019.\n. What happens on these two lines when participantName and/or dateString are nil?\n. There\u2019s a typo here on \u2018Configuration\u2019.\n. We can just return 0 for the width since it\u2019s not used in a vertically scrolling flow layout. (I know we already had this prior to the PR but I figured I should still point it out while I\u2019m thinking of it.) We can do the same for the section header size.\n. Is this right?\n. There\u2019s a missing space after the (. Also, could we use LYRUINumberOfSectionsBeforeFirstMessageSection? So it would be:\nif (section < LYRUINumberOfSectionsBeforeFirstMessageSection) return NO;\n. There\u2019s a missing space after the ).\n. I don\u2019t think this font will always be accurate because if the font was set via UIAppearance with a containment hierarchy, the font won\u2019t get set until the view is added to the hierarchy (and the hierarchy matches the UIAppearance containment requirements). That was the reason for that messageCellFontForMessage: workaround.\nIt\u2019s not pretty, but one solution would be that this method gets passed the collection view that the cell is going to appear in and then we use the messageCellFontForMessage: workaround.\n. This is missing the LayerUIKit name and the copyright.\n. This is missing the LayerUIKit name and the copyright.\n. There\u2019s a missing blank line here.\n. The words \u2018the left edge of\u2019 are repeated here.\n. There\u2019s a blank line here.\n. I think this is another case of a UIAppearance property potentially not being set and used because the view isn\u2019t added to the hierarchy.\n. Instead of creating a new cell each time, we could just reuse the same one by making the variable static and just allocating and initializing once e.g. with dispatch_once.\n. This is another spot where we could reuse the same view instead of creating a new one each time.\n. I\u2019d leave out this blank line.\n. There\u2019s a space before the ].\n. Is it OK that we\u2019re changing these values (i.e. from \u2018lat\u2019 and \u2018lon\u2019) since that will break backwards compatibility?\n. Should we skip adding a preview image if the original image is small enough that the preview image will be the same size as the original?\n. There\u2019s a typo here on \u2018Vertical\u2019.\n. I think this is another case of needing to add the view to the hierarchy to get the accurate UIAppearance property value. So I think we\u2019d just use the same technique as we do with the cell.\n. There\u2019s a space missing before the {.\n. Elsewhere we have a blank line separating each case.\n. Same thing here regarding having blank lines separating each case. Personally, I\u2019d be fine with not having the blank lines, but I think it should ideally be consistent one way or the other. If we want to remove the blank lines throughout, I think it would be fastest to do a separate, subsequent PR to do only that.\n. Should we remove this?\n. OK. Now I think we just need to use header.participantLabelFont.\n. I\u2019m wondering we should include a comment here to explain what\u2019s happening since it\u2019s a pretty bizarre technique. Something like:\nWe have to temporarily add the view to the hierarchy so that UIAppearance property values will be set based on containment.\nAnd then I suppose the same thing for using the technique for the cell (or maybe at some point extract this into some kind of helper).\n. I\u2019ve only seen the term \u2018designated initializer\u2019 used with an instance\u2019s init... method.\n. There\u2019s a space here before the ].\n. It might just be me, but I usually think of incrementing and decrementing as changes by just one. Anyway, since we have the whole negative pagination window thing going and we\u2019re already using expandingPaginationWindow, maybe calling the method expandPaginationWindow?\n. The LayerUIKit name is missing here and the copyright too if we need to include that consistently.\n. This name doesn\u2019t match the file.\n. There\u2019s a typo here on \u2018convenience\u2019.\n. I think we mean \u2018index paths\u2019.\n. Should this be \u2018index path\u2019 as well?\n. This is defined as a class method but its name looks like an instance method.\n. There\u2019s a typo here on \u2018Translation\u2019. This might also be a place where we use the \u2018Index Path\u2019 wording if we\u2019re doing that elsewhere.\n. Oh, I see now that we do have all those other methods that deal only in integers/indexes instead of index paths. Hmm. I guess just \u2018index\u2019 does make more sense then.\n. This name doesn\u2019t match the file name.\n. The LayerUIKit name and, if needed, the copyright aren\u2019t shown here.\n. This doesn\u2019t appear to be used. Although, could it be used instead of the view controller\u2019s property? That is, could we remove the view controller\u2019s expandingPaginationWindow and add a readonly getter to the data source?\n. Should these be defined with extern?\n. Could LYRUIQueryControllerPaginationWindow be private?\n. Should this be readonly?\n. There\u2019s a typo on paginationWindow\u2019.\n. Would it make sense to instead just setconversationDataSourcetonilsince another one will get created anyway whensetConversation:` is called with a conversation?\n. I\u2019d define this like so:\n@property (nonatomic, readonly, getter=isExpandingPaginationWindow) BOOL expandingPaginationWindow;\n. I think elsewhere we say YES with backticks.\n. The designated initializer for UIViewController is initWithNibName:bundle: so I think ideally in a case like this the simplest solution would be to override that method instead of init so that our method gets called no matter which method is called externally. (I don\u2019t know that we\u2019ve been following that rule elsewhere in the project.)\n. We should do this work in viewDidLoad since a view controller is designed to be initialized without loading its view.\n. Since we\u2019ll be moving all this setup to viewDidLoad (see other comment) I suppose we can then just remove this method altogether.\n. I\u2019d remove this blank line since it\u2019s at the start of the for body.\n. I liked the prior setup where one method returned the string or nil and the label was updated in one place. So something like:\n- (void)updateWithParticipants:(NSMutableArray *)participants animated:(BOOL)animated\n{\n    NSString *text = [self textWithParticipants:participants];\n    if (text.length > 0) {\n        self.label.text = text;\n    }\n    [self configureVisibility:text.length > 0 withAnimation:animated];\n}\n. I\u2019d recommend changing withAnimation: to just animated: for consistency.\n. Oh, it looks like there are places where Apple uses withAnimation:. Still, I think animated: is more common/expected.\n. We should put the new view controller\u2019s .h and .m files in the Controllers folder.\n. This is missing the \u2018UI\u2019 portion of the prefix.\n. Same here, this is missing the \u2018UI\u2019 portion of the prefix.\n. I suppose we should just make participants an NSArray.\n. Wouldn\u2019t this mean that we\u2019re saying the label\u2019s left edge has to be to the left of the footer\u2019s left edge + 20? Don\u2019t we want to keep it to the right of that point, i.e. using NSLayoutRelationGreaterThanOrEqual how it was?\n. I just noticed that our height calculation isn\u2019t quite right.\nWhen we get the height of the date, we\u2019re currently using an NSString calculation rather than an NSAttributedString calculation that uses all the string attributes. So instead of:\n+ (CGFloat)heightForAttributedString:(NSAttributedString *)attributedString\n{\n    CGRect rect = [attributedString.string boundingRectWithSize:CGSizeMake(LYRUIMaxCellWidth(), CGFLOAT_MAX)\n                                                        options:NSStringDrawingUsesLineFragmentOrigin\n                                                     attributes:[attributedString attributesAtIndex:0 effectiveRange:nil]\n                                                        context:nil];\n    return rect.size.height;\n}\nWe\u2019d do this:\n+ (CGFloat)heightForAttributedString:(NSAttributedString *)attributedString\n{\n    CGRect rect = [attributedString boundingRectWithSize:CGSizeMake(LYRUIMaxCellWidth(), CGFLOAT_MAX)\n                                                 options:NSStringDrawingUsesLineFragmentOrigin\n                                                 context:nil];\n    return rect.size.height;\n}\nHowever, if the attributed string doesn\u2019t specify a font for every part of the string then the calculation could use a default font that is different than our label\u2019s default font. So instead of just:\nCGFloat dateHeight = [self heightForAttributedString:dateString];\nWe\u2019d have to do something like this:\nNSMutableAttributedString *defaultFontDateString = [dateString mutableCopy];\n    [defaultFontDateString enumerateAttribute:NSFontAttributeName inRange:NSMakeRange(0, defaultFontDateString.length) options:0 usingBlock:^(id value, NSRange range, BOOL *stop) {\n        if (value) return;\n        [defaultFontDateString addAttribute:NSFontAttributeName value:header.dateLabel.font range:range];\n    }];\n    CGFloat dateHeight = [self heightForAttributedString:defaultFontDateString];\n(There might be a cleaner way to set a default font. I\u2019m didn\u2019t look into it.)\nI think we\u2019d also need to use ceil:\nCGFloat dateHeight = ceil([self heightForAttributedString:defaultFontDateString]);\nAn alternative to those changes would to be to just let the label do the calculation for us since we already have a dummy header view at our disposal:\nheader.dateLabel.attributedText = dateString;\n    CGSize dateSize = [header.dateLabel sizeThatFits:CGSizeMake(LYRUIMaxCellWidth(), CGFLOAT_MAX)];\n    CGFloat dateHeight = dateSize.height;\nI\u2019m not sure if there are performance implications to that approach. It\u2019s the technique I\u2019ve used in the past and have seen recommended because it\u2019s the most accurate / direct way of doing the calculation, i.e. asking the object that is responsible for display to return how big it will be. (And if we decide to use that technique here we could also use it for the participant label and elsewhere in the codebase.)\nWith that technique I don\u2019t think using ceil is necessary since it handles that itself. Well, it allows .5 values on retina screens which I think is OK for a header view.\nWe\u2019re also using LYRUIMaxCellWidth() when making our calculations but that\u2019s narrower than the height we actually give the header content. I think that\u2019s not doing any harm though since the labels are limited to one line. But to avoid confusion I suppose we could do:\nCGSize dateSize = [header.dateLabel sizeThatFits:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)];\nFor the padding logic, I\u2019m not sure if it\u2019s correct as is but it might be clearer with something like this:\n```\n    CGFloat paddingHeight = LYRUIConversationViewHeaderTopPadding + LYRUIConversationViewHeaderBottomPadding;\n    if (participantName.length && dateString.length) paddingHeight += LYRUIConversationViewHeaderInBetweenPadding;\n...\n\nreturn paddingHeight + participantHeight + dateHeight;\n\n```\nSo putting that together we\u2019d get something like:\n```\n+ (CGFloat)headerHeightWithDateString:(NSAttributedString )dateString participantName:(NSString )participantName inView:(UIView )view\n{\n    // Temporarily adding the view to the hierarchy so that UIAppearance property values will be set based on containment.\n    LYRUIConversationCollectionViewHeader header = [self sharedHeader];\n    [view addSubview:header];\n    [header removeFromSuperview];\nCGFloat paddingHeight = LYRUIConversationViewHeaderTopPadding + LYRUIConversationViewHeaderBottomPadding;\nif (participantName.length && dateString.length) paddingHeight += LYRUIConversationViewHeaderInBetweenPadding;\n\nCGFloat participantHeight = 0;\nif (participantName.length) {\n    [header updateWithParticipantName:participantName];\n    CGSize participantSize = [header.participantLabel sizeThatFits:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)];\n    participantHeight = participantSize.height;\n}\n\nCGFloat dateHeight = 0;\nif (dateString.length) {\n    [header updateWithAttributedStringForDate:dateString];\n    CGSize dateSize = [header.dateLabel sizeThatFits:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)];\n    dateHeight = dateSize.height;\n}\n\nreturn paddingHeight + participantHeight + dateHeight;\n\n}\n```\nOr I think another option could be to have Auto Layout calculate the height for us using systemLayoutSizeFittingSize:UILayoutFittingCompressedSize. However, that would at least take some work to set up the header such that the padding logic is handled by constraints being added and removed.\n. I see the Auto Layout error that you\u2019re talking about. I think this is the same situation that we had with the section header. Here\u2019s the comment from that workaround:\n// To work around an apparent system bug that initially requires the view to have zero width, instead of a required priority, we use a priority one higher than the content compression resistance.\nSo if we do this, I think we\u2019re good:\nNSLayoutConstraint *recipientStatusLabelRightConstraint = [NSLayoutConstraint constraintWithItem:self.recipientStatusLabel attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem:self attribute:NSLayoutAttributeRight multiplier:1.0 constant:-20];\n        // To work around an apparent system bug that initially requires the view to have zero width, instead of a required priority, we use a priority one higher than the content compression resistance.\n        recipientStatusLabelRightConstraint.priority = UILayoutPriorityDefaultHigh + 1;\n        [self addConstraint:recipientStatusLabelRightConstraint];\n. OK. Now that we have the right side constraint using a less than required priority, I think we can put the left side constraint back the way it was, i.e. using NSLayoutRelationGreaterThanOrEqual.\n. I\u2019m wondering if my assumptions about what the layout is suppose to be aren\u2019t accurate. So it seems like we have four different cases:\n1. A date and a name.\n2. A date without a name.\n3. A name without a date.\n4. No date and no name.\nMy assumption was:\n1. A date and a name: Top padding + date height + in between height + name height + bottom padding.\n2. A date without a name: Top padding + date height + bottom padding.\n3. A name without a date: Top padding + name height + bottom padding.\n4. No date and no name: Top padding + bottom padding.\nIn other words, we always use the top and bottom padding. We only add in the in-between padding when we have both a date and a name. Are you thinking of different behavior?\n. I wouldn\u2019t add a blank line here since it\u2019s at the very beginning of an if body.\n. For consistency with the section header, we could call this LYRUIConversationViewFooterEmptyHeight.\n. There\u2019s an extra blank line here.\n. There\u2019s an extra blank line here.\n. There\u2019s a typo here on \u2018Minimum\u2019.\n. If it\u2019s truly meant as a minimum height then I think it would be something like:\nif (height < LYRUIMessageCellMinimumHeight) {\n    height = LYRUIMessageCellMinimumHeight;\n}\n. I think it would be more clear if this if were an else if.\n. Same thing here, i.e. I think it would be more clear if this if were an else if.\n. There\u2019s an unnecessary return here.\n. Could you update the header file documentation for this change please?\n. For consistency I\u2019d recommend changing this so that the initWithTitle:nil is on the same line as [[UIActionSheet alloc] and then the colons are aligned based on that line.\n. There\u2019s a space here after the #.\n. There\u2019s an extra blank line here.\n. We should pass YES here.\n. It looks like this method is only used for the permanent state. Do you want to just remove the option and rename it accordingly?\n. There\u2019s a typo here on \u2018Identifier\u2019.\n. The second word (\u2018Label\u2019) is capitalized.\n. Should these properties be set up for UIAppearance customizations?\n. The default is currently set as LYRUILightGrayColor().\n. On second thought, aren\u2019t these properties already accessible since the UILabel and content view are public?\n. I suppose we should set our default background color value to our variable so that the getter returns our default value instead of nil.\n. Since another class could set the font and text color values via sectionHeaderLabel.font and sectionHeaderLabel.textColor, our getters for sectionHeaderFont and sectionHeaderTextColor would then return inaccurate values. So I suppose we could implement the getters to just return the values from sectionHeaderLabel.font and sectionHeaderLabel.textColor and do away with our own instance variables.\n. I guess that\u2019s the same situation with the background color too.\n. There\u2019s an extra blank line here.\n. Should we change this variable name and method name for consistency, i.e. changing \u2018label\u2019 to \u2018title\u2019?\n. It looks like this blank line was already here, but we could remove it for consistency.\n. Should this mention something about wrapping the LYRDeletionMode integer values using NSNumber?\n. Is the default no deletion modes?\n. For iOS 7, we use this method and show a UIActionSheet for the deletion modes.\n. ",
    "chipxsd": "Merged\n. Merging...\n. Looks solid, merged!\n. looks great\n. One thing to note here, NSCache might evict some (or all) objects from the cache under memory pressure, which in this case might look like you left the input bar with five images, but when coming back to the view there might be only one image left.\n. Is that all? Feels like there should be more text in the code than this.\n. A few missing non-localized strings (use my checkboxes if you need to keep track):\n- [x] bull shit \n  https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLTypingIndicatorViewController.m#L108-L110\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLTypingIndicatorViewController.m#L144-L155\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLAddressBarViewController.m#L485-L486\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLConversationListViewController.m#L278-L282\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLConversationListViewController.m#L301\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLConversationViewController.m#L488-L490\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Controllers/ATLConversationViewController.m#L1139\n- [ ] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Models/ATLMediaAttachment.m#L155\n- [ ] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Models/ATLMediaAttachment.m#L221\n- [ ] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Models/ATLMediaAttachment.m#L242\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Utilities/ATLLocationManager.m#L45-L49\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Views/ATLAddressBarTextView.m#L80\n- [x] https://github.com/layerhq/Atlas-iOS/blob/d5dd054c584ab1f5fcac85d4c40f905f67a32932/Code/Views/ATLConversationTableViewCell.m#L81-L82\n. I have to hand it to you for pulling it off, because dealing with video is not straight forward on iOS.\nBut I do have to add a few remarks on your pull request. I'll start with the most important one.\n1. Who should own the content transfer logic?\nRight now, you get the URL to the video file inside ATLConversationViewController which should only be in charge of controlling the UITableView (and other tightly connected UI components in there).\nThat's why we implemented the ATLMediaInputStream, so that the whole logic of copying bytes from the media asset into LayerKit is completely isolated. ATLMediaInputStream is a media streaming wrapper that acts as an NSInputStream which you can throw directly at the LYRMessagePart.\nThe way how it operates with photo assets should also operate with videos. And this is all doable with the existing API too (including resizing and compression).\nTo give you an example:\n``` objective-c\n// How to create an input stream for photo assets\nATLMediaInputStream *photoInputStream = [ATLMediaInputStream mediaInputStreamWithAssetURL:photoAsset.defaultRepresentation.url];\nphotoInputStream.maximumSize = 768; // limits the image size to 768px\nphotoInputStream.compressionQuality = 0.8; // enables photo compression (JPEG) and sets the compression quality to 80%\n// How to create an input stream for video assets\nATLMediaInputStream *videoInputStream = [ATLMediaInputStream mediaInputStreamWithAssetURL:videoAsset.defaultRepresentation.url];\nphotoInputStream.maximumSize = 480; // tries to resize the video size to close to 850x480px (preserving the aspect ratio)\nphotoInputStream.compressionQuality = 0.8; // enables video compression (h264) using high quality preset\n```\n1.1 MOV files won't work on Android or other devices\nMOV is a QuickTime video container format which is rarely supported on non-apple platforms. Output format should be the H.264 video codec wrapped in a 'MPEG4' container.\n1.2 How to achieve that?\nFirst place to look at would be the AVAssetExportSession.h. Apple documented this framework very nicely, and it's not as scary as it looks.\nSo the ATLMediaInputStream should recognize the video (based on the UTI) and try to compress it (if user required it via the compressionQuality parameter).\nHere's the checklist on how to approach it:\n- [x] Figure out which presets are possible and match it to the desired output format using the [AVAssetExportSession exportPresetsCompatibleWithAsset:videoAsset]; based on the ATLMediaInputStream parameters\n- [x] Video should be optimized for network use, which makes it streamable in case LayerKit ever supports partial content part downloads.\n- [x] As mentioend before, file type should be MPEG4, H.264 codec will be automatically applied.\n- [x] Define a temporary path for the converted video.\n- [x] Once video conversion is complete (when export session finishes) a video file will be waiting at the URL you specified. Provide the content through a file reading NSInputStream proxy. Once ATLMediaInputStream receiver closes the stream,\n  delete that temporary file (stream can also be closed in case of an error).\nA few notes: If user did not desire any maximum size or compression quality, pass the video through with the AVAssetExportPresetPassthrough preset -- this will still wrap the video into an MPEG4 container, where as if you point directly to the asset file, you get the .mov file again.\n1.3 Future improvements\nWe could add the video snapshot making logic (for the thumbnail) with a new type of input stream. But if you ask me, we could make the preview show a montage of short 1 second clips of the full size videos.\n``` objective-c\n// How to create an input stream for video assets\ntypedef NS_ENUM(NSUInteger, ATLMediaVideoTrimmingType) {\n  /\n   @abstract Creates a trimmed video based on the desired range.\n   */\n  ATLMediaVideoTrimmingTypeRange,\n  /\n   @abstract Creates a video montage with short clippings.\n   */\n  ATLMediaVideoTrimmingTypeMontage,\n};\nATLMediaInputStream *previewVideoInputStream = [ATLMediaInputStream mediaInputStreamWithAssetURL:videoAsset.defaultRepresentation.url];\npreviewVideoInputStream.maximumSize = 240; // tries to resize the video size to close to 320x240px\npreviewVideoInputStream.compressionQuality = 0.3; // enables video compression (h264) using high quality preset\npreviewVideoInputStream.trimmingType = ATLMediaVideoClippingTypeRange;\npreviewVideoInputStream.trimmingStartTime = 0;\npreviewVideoInputStream.trimmingEndTime = 5; // creates a 5 second video\n```\n2. Draw the play button with a tirangle cutout.\nCheck out this example on how to do boolean operations on shapes: https://github.com/layerhq/Atlas-iOS/blob/master/Tests/ATLTestUtilities.m#L75-L98\n. There's still references of ATLMIMETypeVideoMP4Preview in the code. Remove it, and make the video thumbnail have the jpeg+preview mime type (the one that's already defined).\n. Can you add a kif test (no LayerKit in the mix) that verifies what happens when a giant gif gets asynchronously decoded and the cell is out of the view's scope?\nAdd a large .gif resource file (of your choice) to the UI test suite and create 20 text messages and a single message with that big gif content. Make the view start decoding the gif, then scroll back to the top, and using OCMock reject any [self.bubbleView updateWithImage:displayingImage width:size.width]; calls.\n. After a discussion with @kmahal, we decided that a KIF test doesn't make sense. But we can completely verify the behavior with a unit test.\nHere's how:\n- [ ] Create an instance of ATLMessageCollectionViewCell (initWithFrame:yadayadayada:...).\n- [ ] Create a partial mock (id partiallyMockedCell = OCMPartialMock(...)) from that ^^^ instance and reject any calls to updateWithImage:width:.\n- [ ] Create two LYRMessageMock objects\n  - [ ] One containing an animated gif (let's call it messageWithGif).\n  - [ ] One containing a text (let's call this one messageWithText).\n- [ ] Set the partiallyMockedCell.message = messageWithGif;\n- [ ] Call configureBubbleViewForGIFContent on the partiallyMockedCell.\n- [ ] Now set the partiallyMockedCell.message = messageWithText;\n- [ ] And call the configureBubbleViewForGIFContent again.\n- [ ] Verify the behavior with OCMVerifyAll(partiallyMockedCell).\nIn case the GIF gets decoded to fast for the test, use the same stalling technique you used in the previous attempt (blocking the messagePart.data with a semaphore).\n\nTo giva little more context, we need to prevent the cell to make any actions after an async process, if the cell's been reused. It means that the cell will have to be a little smarter, either with a simple state machine (BOOL isReused) or with a simple pointer comparison of the self.message before calling the updateWithImage:width: selector.\n. aww, you didn't check the checkboxes I prepared for you \ud83d\ude14\n. Stale branch. Closing ...\n. pull to the wrong branch (should've been feature/videoSupport). Closing...\n. Add a test where the conversation controller is embedded in another view controller, and shrink the parent's view size. Expect the width of the parent view frame to equal the input bar's.\n. Nice work, looks good! One last thing though, can you add a short test that verifies the width of the button frame and the frame of the input bar when the text changes?\n. Wait, was this fixed, or just straight merged?\n. Add spaces around the bitwise OR |, and it should be good to merge.\n. Add an entry to the changelog.md.\n. It fails to build now after pulling changes from master\n\n. Rebased. There are tests failing intermittently, both locally and on CI\n\n. happens the same on master:\n2017-03-06 10:45:36.817 Storyboard[18088:738066] KIFTester loaded\n2017-03-06 10:45:36.873 Storyboard[18088:738066] Simulator user has requested new graphics quality: 100\nTest Suite 'Selected tests' started at 2017-03-06 10:45:37.129\nTest Suite 'StoryboardTests.xctest' started at 2017-03-06 10:45:37.130\nTest Suite 'ATLConversationListViewControllerTest' started at 2017-03-06 10:45:37.131\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingCellClassAfterViewLoadRaiseException]' started.\n2017-03-06 10:45:38.844099 Storyboard[18088:738066] [Warning] Attempting to load the view of a view controller while it is deallocating is not allowed and may result in undefined behavior (<UISearchController: 0x7fd63be21640>)\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingCellClassAfterViewLoadRaiseException]' passed (1.716 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyCustomCellClassNotConformingToProtocolRaisesException]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyCustomCellClassNotConformingToProtocolRaisesException]' passed (0.640 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingEditingSettingAfterViewLoadRaiseException]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingEditingSettingAfterViewLoadRaiseException]' passed (1.707 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyAvatarImageURLLoad]' started.\n2017-03-06 10:45:41.206 Storyboard[18088:738066] *** Assertion failure in -[UITableView _endCellAnimationsWithContext:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3600.6.21/UITableView.m:1610\n/Users/chipxsd/Development/Layer/Layer-Messenger-iOS/Submodules/Atlas-Messenger-iOS/Libraries/Atlas/Tests/ATLTestInterface.m:89: error: -[ATLConversationListViewControllerTest testToVerifyAvatarImageURLLoad] : failed: caught \"NSInternalInconsistencyException\", \"Invalid update: invalid number of rows in section 0.  The number of rows contained in an existing section after the update (1) must be equal to the number of rows contained in that section before the update (1), plus or minus the number of rows inserted or deleted from that section (1 inserted, 0 deleted) and plus or minus the number of rows moved into or out of that section (0 moved in, 0 moved out).\"\n(\n    0   CoreFoundation                      0x0000000109bcbd4b __exceptionPreprocess + 171\n    1   libobjc.A.dylib                     0x000000010929b21e objc_exception_throw + 48\n    2   CoreFoundation                      0x0000000109bcfe42 +[NSException raise:format:arguments:] + 98\n    3   Foundation                          0x0000000108e3066d -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195\n    4   UIKit                               0x000000010765377d -[UITableView _endCellAnimationsWithContext:] + 17558\n    5   Atlas                               0x0000000106425078 -[ATLConversationListViewController queryControllerDidChangeContent:] + 88\n    6   Storyboard                          0x00000001061f4591 -[LYRQueryControllerMock mockObjectsDidChange:] + 1441\n    7   CoreFoundation                      0x0000000109b695ec __CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 12\n    8   CoreFoundation                      0x0000000109b694eb _CFXRegistrationPost + 427\n    9   CoreFoundation                      0x0000000109b69252 ___CFXNotificationPost_block_invoke + 50\n    10  CoreFoundation                      0x0000000109b2c282 -[_CFXNotificationRegistrar find:object:observer:enumerator:] + 2018\n    11  CoreFoundation                      0x0000000109b2b31b _CFXNotificationPost + 667\n    12  Foundation                          0x0000000108d6181b -[NSNotificationCenter postNotificationName:object:userInfo:] + 66\n    13  Storyboard                          0x00000001061efb09 -[LYRMockContentStore broadcastChanges] + 297\n    14  Storyboard                          0x00000001061e9b6d -[LYRConversationMock sendMessage:error:] + 941\n    15  StoryboardTests                     0x00000001189f5a5f -[ATLTestInterface conversationWithParticipants:lastMessageText:] + 399\n    16  StoryboardTests                     0x0000000118a13621 -[ATLConversationListViewControllerTest newConversationWithMockUser:lastMessageText:] + 209\n    17  StoryboardTests                     0x0000000118a131cf -[ATLConversationListViewControllerTest testToVerifyAvatarImageURLLoad] + 415\n    18  CoreFoundation                      0x0000000109b5244c __invoking___ + 140\n    19  CoreFoundation                      0x0000000109b522d1 -[NSInvocation invoke] + 289\n    20  XCTest                              0x0000000118402f77 __24-[XCTestCase invokeTest]_block_invoke_2 + 481\n    21  XCTest                              0x000000011843b7df -[XCTestContext performInScope:] + 190\n    22  XCTest                              0x0000000118402d83 -[XCTestCase invokeTest] + 255\n    23  XCTest                              0x000000011840359c -[XCTestCase performTest:] + 457\n    24  XCTest                              0x0000000118400664 -[XCTestSuite performTest:] + 491\n    25  XCTest                              0x0000000118400664 -[XCTestSuite performTest:] + 491\n    26  XCTest                              0x0000000118400664 -[XCTestSuite performTest:] + 491\n    27  XCTest                              0x00000001183ec618 __25-[XCTestDriver _runSuite]_block_invoke + 51\n    28  XCTest                              0x000000011840dd2b -[XCTestObservationCenter _observeTestExecutionForBlock:] + 602\n    29  XCTest                              0x00000001183ec4b5 -[XCTestDriver _runSuite] + 436\n    30  XCTest                              0x00000001183ed302 -[XCTestDriver _checkForTestManager] + 287\n    31  XCTest                              0x000000011843cd67 _XCTestMain + 628\n    32  CoreFoundation                      0x0000000109b706ac __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 12\n    33  CoreFoundation                      0x0000000109b556f4 __CFRunLoopDoBlocks + 356\n    34  CoreFoundation                      0x0000000109b54e65 __CFRunLoopRun + 901\n    35  CoreFoundation                      0x0000000109b54884 CFRunLoopRunSpecific + 420\n    36  GraphicsServices                    0x000000010c6b0a6f GSEventRunModal + 161\n    37  UIKit                               0x0000000107514c68 UIApplicationMain + 159\n    38  Storyboard                          0x00000001061e887f main + 111\n    39  libdyld.dylib                       0x000000010a94d68d start + 1\n    40  ???                                 0x0000000000000005 0x0 + 5\n)\nTest Case '-[ATLConversationListViewControllerTest testToVerifyAvatarImageURLLoad]' failed (0.663 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyDefaultQueryConfigurationDataSourceMethod]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyDefaultQueryConfigurationDataSourceMethod]' passed (0.522 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyDefaultShouldDisplaySearchControllerFunctionality]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyDefaultShouldDisplaySearchControllerFunctionality]' passed (1.088 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyShouldDisplaySearchControllerFunctionality]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyShouldDisplaySearchControllerFunctionality]' passed (0.508 seconds).\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingCellHeighAfterViewLoadRaiseException]' started.\nTest Case '-[ATLConversationListViewControllerTest testToVerifyChangingCellHeighAfterViewLoadRaiseException]' passed (1.644 seconds).\nTest Suite 'ATLConversationListViewControllerTest' failed at 2017-03-06 10:45:45.626.\n     Executed 8 tests, with 1 failure (1 unexpected) in 8.488 (8.495) seconds\nTest Suite 'StoryboardTests.xctest' failed at 2017-03-06 10:45:45.627.\n     Executed 8 tests, with 1 failure (1 unexpected) in 8.488 (8.497) seconds\nTest Suite 'Selected tests' failed at 2017-03-06 10:45:45.627.\n     Executed 8 tests, with 1 failure (1 unexpected) in 8.488 (8.498) seconds. Also, do we have any policy around versioning (semantic), there's a breaking change ATLAvatarImageView got renamed to ATLAvatarView along with some properties.. I don't get this PR. Where's the presence work?. Should we user nil for fallback to default behavior and use an empty NSOrderedSet to not send anything?\n. Could be an IBOutlet, this has been around since XCode3.\n. smart thinking with prefixing the commonInit.\n. My thoughts exactly... But I tried avoiding changing any existing method names.\nThere are two kinds of objects we're talking about, and both were named messageParts, which I agree, is confusing.\nIn this method, we are actually dealing with objects that can contain any media (text, image, location, video ...), and are attachable to text (in the UI). We call them ATLMediaAttachment. Those are basically sendable and editable items before they are turned into LYRMessages.\nSo if you agree, we should name those sendable items as attachments? Which changes the method signature to:\n- -defaultMessagesForAttachments:(NSArray *)attachments or\n- -defaultMessagesForMediaAttachments:(NSArray *)mediaAttachments.\n. fixed, but comment didn't become outdated.\n. Documented this function, and I can also help Kevin document the rest of the utility functions, once he explains their functionality. Maybe there are a few unused there, or could be done differently.\n. yeah, you can't access ivars of superclasses when using self, unless they are real ivars (not defined with @property syntax).\n. Good catch!\n. You could do the cast in the block method argument, no difference, just makes the code neater.\nobjective-c\n[mutableParticipants enumerateObjectsUsingBlock:^(id<ATLParticipant> participant, NSUInteger idx, BOOL *stop) {\n    NSString *expandedString = [NSString stringWithFormat:@\"%@, %@\", disabledString, participant.firstName];\n    ...\n}];\n. yes, you're right, thanks\n. Can do.\n. add a space in between }completion:^(\nshould be } completion:^{\n. use the setObject:forKey:cost:, it's smarter.\n. add:\nobjective-c\n__weak typeof(self) weakSelf = self;\nbefore the async call and use weakSelf instead of self inside the code blocks.\n. Don't set the member variables asynchronously.\n. I would suggest you move the queryController.execute: from the factory method. Or if you really have to do it there, do it asynchronously internally (in the factory method) and add a completionHandler: to the factory method's signature, which you can then execute on the main thread right after the queryController.execute:.\n. A few options for the macro: ATLStr, ATLLocStr, ATLLocString, ATLLocalizedString. I would go with the last one to make it feel closer to cocoa standards.\n. You missed a spot \u2191\nself.placeholder = ATLPlaceholderText; is this some kind of a default value?\n. To add more context... if the self.placeholder is meant for run-time text customization, you have to be careful so that you don't always return the localized string.\nIn other words: if the property is overridden, use that one, if not, use localized.\n. If it's a shared session, do you really need a member var for it? Either use an ephemeral session and have it as a member variable, or use the singleton directly where needed.\n. Does the ATLAvatarImageView instance live inside of a cell or any other view that's reusable?\n- If yes, how do you guarantee that this avatar view instance won't get recycled when an asynchronous image download is still in progress? Because then you can expect that the just-downloaded image (requested from before) would trump the new one.\n- If no or if the reusable parent view instantiates a new ATLAvatarImageView, then how do you guarantee that instance is still alive when download completes? (null pointer reference assertion)\n. Remove this definition. Video previews in our case at the moment are only going to be thumbnails -- which is a normalized jpeg snapshot from the video (it's the definition we already have ATLMIMETypeImageJPEGPreview)\n. Change to:\nobjective-c\nif ([assetType isEqualToString:ALAssetTypeVideo]) {\n    self.mediaMIMEType = ATLMIMETypeVideoMP4;\n} else {\n    self.mediaMIMEType = (__bridge NSString *)(UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)(asset.defaultRepresentation.UTI), kUTTagClassMIMEType));\n}\nin case someone has videos packed in different container types (mov, mp4, m4v, mpg, ...) in their photo library.\n. Initializers should never do any processing. Imagine this object gets initialized on the main thread, it'll freeze the UI until it retrieves the video from the asset library, then decodes the frame from video, makes a snapshot and encodes the frame into a JPEG.\nThis needs to happen during the stream process, which always happens in one of the background threads.\n. This signature describes the initializer as it's able to take in any file and make it a media attachment, but it would most definitely crash when trying to open an image, gif, or some other video format (that's not in a mov container) from the disk.\nWe need to generalize it so that it works the same as the media attachment that takes in assets. That means, inspecting the file's UTI and then deciding what to do after we know what it is. If it's an image, bring it into memory (UIImage) and just use the logic from the image media attachment. If it's a video, use the file video converter input stream, etc.\n. Same as the previous comment: https://github.com/layerhq/Atlas-iOS/pull/905#discussion_r37231817\nVideo previews in this case are jpegs, and since we already have this logic handled in the collection view cell let's just reuse the ATLMIMETypeImageJPEGPreview.\n. TODO: figure out if there's any way to generate thumbnail from videos in the streaming process or asynchronously (in case NSTextAttachment's image property is KVO compliant).\n. Extract it into a C function. Put the function declaration at the top of the file (below the ATLMediaAttachmentFromAssetURL and ATLMediaAttachmentDataFromInputStream declarations), and define the function at the bottom of the file.\nDefine the C function as:\nobjective-c\n/**\n @abstract Generates a thumbnail from the desired video by taking a still\n   snapshot of 30th frame in the video.\n @param fileURL File path of the video asset in a form of an `NSURL`\n @return Returns a thumbnail image in a form of an `NSUImage`; In case of a\n   failure, function returns `nil`.\n */\nUIImage *ATLMediaAttachmentGenerateThumbnailFromVideoFileURL(NSURL *videoFileURL);\n. Argument variable should be videoFileURL.\n. objective-c\nAVAssetImageGenerator *generate = ...\nshould be\nobjective-c\nAVAssetImageGenerator *assetImageGenerator\n. Use full names on variables, as if you're just stripping away the prefix.\nobjective-c\nNSError *error;\n. If you want the 30th frame.\nobjective-c\nCMTime time = CMTimeMake(1, 30);\nOr this, if you want to make a snapshot of the frame located in the first second of the video:\nobjective-c\nAVAssetTrack *videoAssetTrack = [[asset tracksWithMediaType:AVMediaTypeVideo] firstObject];\nif (videoAssetTrack) {\n    CMTime time = CMTimeMake(1, videoAssetTrack.nominalFrameRate);\n}\n. imageRef\n. Memory leak, do this:\nobjective-c\nUIImage *outputImage = [UIImage imageWithCGImage:imageRef];\nCGImageRelease(imageRef);\n. For the sake of breakpoints:\nobjective-c\nif (!self.shouldDisplayReceipts) {\n    return NO;\n}\n. Remove unused imports. And import <AVFoundation/AVFoundation.h>\n. A few steps:\n- [x] check if the file exists, if it doesn't log an error and return nil.\n- [ ] check for the UTI type of the file\n  - [ ] if it's kUTTypeImage use input streams to set the mediaInputStream, thumbnailInputStream and attachableThumbnailImage.\n  - [x] if it's kUTTypeMovie use the input stream to set the mediaInputStream and use the ATLMediaAttachmentGenerateThumbnailFromVideoFileURL(fileURL) to generate thumbnail for both thumbnailInputStream and attachableThumbnailImage.\n  - [ ] Also set the appropriate MIMEType, metadata and text representation.\n  - [ ] If it's anything else, log an error for unsupported type.\n. Change to ATLAssetVideoInputStream.\n. Change it to ATLFileVideoInputStream.\n. The error condition is not getting handled which makes the behavior after this line undefined.\n. Same as before.\n. same\n. Let's try to avoid single line expressions.\nobjective-c\nif (self.viewController) {\n    self.viewController = nil;\n}\n. whoopsies\n. also this\n. run pod install when good, and add the lock file back\n. add \"instead of firstName\".\n. While I see the concern of the race condition, viewWillAppear: can get called multiple times (say you're either transitioning or just popping up a modal view controller on top of this one), this will make the controller register to notifications more than once. Unlike viewDidLoad which is invoked only once.\nIf you really need to register it on viewWillAppear: then make sure you remove the observer on viewWillDissapear: as well.\n. I think it might be cleaner registering them and removing them viewWillAppear: and viewWillDissapear: respectively, this way NSNotificationCenter has less work to do when the view is not in focus.\n. Extract the instance method into a C function (since you don't need any state from the self). You can call it:\nobjective-c\n(UIView *)ATLMakeLoadingMoreConversationsIndicatorView();\n. I'd just like to suggest a few coding style practices we have:\n- wrap if then scopes into new lines:\nobjective-c\n  if (decelerate) {\n      return;\n  }\n- variable declarations (note spaces and pointer annotation):\nobjective-c\n  NSString *string = @\"string\";\n. rename to\nobjective-c\n- (void)configureLoadingMoreConversationsIndicatorView;\n. I haven't tried the code though, but is this one necessary?\n. Define the 200 as a const CGFloat at the top of the implementation file:\nobjective-c\nstatic CGFloat const ATLConversationListLoadMoreConversationsDistanceThreshold = 200.0f; // or trigger, whichever you prefer\n. Define the 30 as a const CGFloat at the top of the implementation file:\nobjective-c\nstatic CGFloat const ATLConversationListViewLoadMoreConversationIndicatorViewFrameHeight = 30.0f;\n. Maybe there's a method that does that for you, I haven't done UIKit in a while, but try a few:\nobjetive-c\n[self.tableView.tableFooterView sizeToFit];\n[self.tableView.tableFooterView setNeedsLayout];\n[self.tableView sizeToFit];\n. Also not sure, but you can give it a try, see if you can return the UIActivityIndicatorView directly (and apply the autoresizingMask same as you're doing it to the UIView).\n. Switch to automatic.. Same here.. And here.. And here.. Same here. And here.. And here.. It's cleaner to exclude the source from the target than to comment everything up, it ruins the commit history.. do an early exit, rather commenting out that particular test. Having the code still there can expose problems when refactoring, even if we're not running the test.\n```\n- (void)testToVerifyToVerifyTextChangesLocationButtonToSendButton\n{\n    // TODO: crashing here, fix me\n    return;\n[self setRootViewController];\n[tester waitForViewWithAccessibilityLabel:ATLMessageInputToolbarAccessibilityLabel];\n// leaving the rest of the code here...\n\n}\n``. same here. and here.. exclude the.mfrom the target.. same here. Also worth disabling the test?. You can probably revert all the changes inAtlas.xcworkspace/xcshareddata/Atlas.xcscmblueprint. Can we put this guy into.gitignore, in fact everything that gets autogenerated should be git ignored.. Can you clean up the git ignore file? Remove instructions and everything that's disabled, you can leave the section comments.. No, so the.gitignore` file you added was computer generated with instructions for you, not for me, not for our customers, but only for you, you are checking in that file into the repo, which makes you responsible for knowing which rule to add to the list and which ones to take out.\nIn this commit, I don't have a clear sight to which rules are taking effect, because there's a bunch of leftover instructions made by someone (which is the author of https://www.gitignore.io) for someone (you) who's responsibility is to comb through the list, make changes and clean it up, and check-in a clean .gitignore file.\nThe .gitignore file should have rules in them and comments describing the reasoning behind the rules that were added (if it's not self explanatory).\nThis to me looks like leftovers from a template (and to anyone who'll open the .gitignore file):\n```\nfor a library or gem, you might want to ignore these files since the code is\nintended to run in multiple environments; otherwise, check them in:\nGemfile.lock\n.ruby-version\n.ruby-gemset\n```\nAgain, these comments are not for our customers, nor for me since I'm not the one adding rules to the .gitignore file.. It's not, it was always at 1.0.1. Someone pushed a podfile.lock change but forgot to commit the podspec change.\n\n. Here's the blame: https://github.com/layerhq/Atlas-iOS/blame/master/Podfile.lock#L8. I'll do it on master for the sake of a clearer history.. wait, why did this get back in here??. @armcknight and I already had this conversation on #ios channel already.\nTo recap, this environment variable LAYER_USE_CORE_SDK_LOCATION is great not only for us (developers at @layerhq/developers) to point at the LayerKit sources, but also for developers pointing to any arbitrary pre-compiled version of LayerKit they want to try out (this is what we do with our pre-releases).\nNow we're literally exposing, again, one of our private repos. If anybody outside layer uses the LAYER_USE_CORE_SDK_LOCATION environment variable, they'll trigger this condition in ruby that will make pod fetch an unknown CocoaPods repo that nobody has access to, and throw a stack trace.\n\n. I'm not sure I get this line, I don't see nothing wrong with keeping it the old way, since it's configurable via the public property.. what's our policy now with the @import vs #import?. you can't do it on subclassed properties, but I agree, -init and load like methods should work modify ivars directly.. well, true that cpu mul/mod instructions cost different, but let's leave that to the compiler to optimize. Plus you lose a lot of precision, if you invert the float number, especially rounded at the third digit.. I'll fix these. ",
    "kmahal": "+1\n. @kcoleman731 tests added\n. updated format fixes\n. @kcoleman731 check out the changes.  I also added in new GIF placeholder text for lastMessageLabel\n. Hey @piotrbernad any update on this PR?  If not we can close it out.  It also must be re-based since it's not mergeable anymore.\n. @piotrbernad I'll be closing this out.  Feel free to re-open if you update this.\n. hey @piotrbernad just a few minor annotations.  once it's cleaned up then we can merge.\n. Hey @andrewcopp any update on this one?  Cleaning up the repo and trying to close out open items.\n. Hey @andrewcopp slight detail, but we like to avoid merging master into our branches, since we rebase instead.  Rebase your last commit on top of master and we can get this guy merged down.  Thanks!\n. @andrewcopp looks good.  merged.\n. @kcoleman731 existing ATLConversationTableViewCellTest class already exercises ATLConversationPresenting to ensure the lastMessage label is correct, which now directly draws from the newly added method, so no new test is required.\n. @mikewu1211 this was an older dependency when Android only sent 1 message part for images with the specific MIMEType.  We compare that array to another array @[ATLMIMETypeImageJPEG], so it still functions as expected.\n. Thanks @ccrazy88.\n. Thanks @thomasgpeng.\n. @ccrazy88 I've annotated your PR.  Have you specifically seen the avatar initials on top of the image?  Or is this just a preference?\n. @ccrazy88 I've captured that change and a few others in: https://github.com/layerhq/Atlas-iOS/pull/834 so will close this PR.  I was making a change to the specific method and just roped it in.  Thank you for your input!\n. @ccrazy88 Thank you for this PR.  Merging.\n. @Rupert-RR is the method + (instancetype)conversationListViewControllerWithLayerClient:(LYRClient *)layerClient not sufficient for initializing purposes?\n. @Rupert-RR All Atlas specific properties are initialized in that lyr_commonInit method called in the private method.  For custom, non-Atlas properties, you can initialize them yourself in viewDidLoad or as public properties before presenting the controller on screen.  You can create your own subclass initializer which will call + (instancetype)conversationListViewControllerWithLayerClient:(LYRClient *)layerClient and set your properties while returning the instance you desire.\nI'll be closing this pull request since we don't want to expose the ability for a developer to overwrite the atlas initializers which are required.\n. @timominous apologies for the late reply, just reviewing your pull request.  Though the search updates with [cd] are great, what crashes were you experiencing after search? I just checked Atlas Messenger and a few other sample apps and everything looks to be running fine.\n. Hey @ntnmrndn I'll be reviewing your pull request.  One specific thing I noticed by glancing at is the formatting - please erase every new-line you introduced, as well as the indentations that you changed.  I'll comment on implementation details in line.\n. I pulled it down and ran it - the behavior looks good.  However there a few questions on the implementation details that we'll have to fix.\n. @ntnmrndn let's just add the private interface to the top of the implementation file instead of creating the new header file completely.\n. @ntnmrndn comments added.  In addition, there's an issue in the use case that shouldDisplayAvatarItems is true, but shouldDisplayAvatarItemForOutgoingMessages is not (any default conversation with more than 2 participants).  If you have the layout constraint improvements I mentioned above, the spacing is still off due to the cell:shouldDisplayAvatarItem: moved into the superclass ATLMessageCollectionViewCell instead of the subclasses:\n``` objc\n- (void)configureCell:(UICollectionViewCell )cell forMessage:(LYRMessage )message indexPath:(NSIndexPath *)indexPath\n{\n    [cell presentMessage:message]; \n    [cell shouldDisplayAvatarItem:self.shouldDisplayAvatarItem];\nif ([self shouldDisplayAvatarItemAtIndexPath:indexPath]) {\n    [cell updateWithSender:[self participantForIdentifier:message.sender.userID]];\n} else {\n    [cell updateWithSender:nil];\n}\n\n...\n}\n```\nThe line [cell shouldDisplayAvatarItem:self.shouldDisplayAvatarItem] doesn't account for shouldDisplayAvatarItemForOutgoingMessages, resulting in spacing as if there were an avatar item, but nothing there.  [cell:updateWithSender:] only handles hiding or showing the avatar item, not the cell's constraints.   In the previous implementation ATLOutgoingMessageCollectionViewCell only had the constraint without the avatar item, so it never had to worry about this protocol method.  \nBecause both cells adhere to the ATLMessagePresentingProtocol, let's find new logic to handle this newly introduced property.\n. Something like this would work:\nobjc\n    BOOL displayAvatarItem = self.shouldDisplayAvatarItem;\n    if ([message.sender.userID isEqualToString:self.layerClient.authenticatedUserID]) {\n        displayAvatarItem = displayAvatarItem && self.shouldDisplayAvatarItemForOutgoingMessages;\n    }\n    [cell shouldDisplayAvatarItem:displayAvatarItem];\nor\nobjc\nBOOL willDisplayAvatarItem = (![message.sender.userID isEqualToString:self.layerClient.authenticatedUserID]) ? self.shouldDisplayAvatarItem : (self.shouldDisplayAvatarItem && self.shouldDisplayAvatarItemForOutgoingMessages);\n[cell shouldDisplayAvatarItem:willDisplayAvatarItem];\nThis will compensate for both states.\n. Reviewing now, @kartikthapar.  Have you tested this implementation?  Does it solve your problem from https://github.com/layerhq/Atlas-iOS/issues/818?  Getting tests on this would be good too.\n. commented.  You must also set the default values in the default initialization method + (void)initialize.\n. Thanks @kartikthapar.  Have you confirmed this PR fixes the layout constraint issue you mentioned in #818?  If you can provide a before and after screenshot that would be helpful.\n. @kartikthapar The buttons must be kept at the bottom, similar to how iMessage functions.  I'll pull down this code and test the implementation.  Thanks for your work!\n. @kartikthapar this PR looks good.  Before I merge, can you confirm that your initial question in: https://github.com/layerhq/Atlas-iOS/issues/818 was referring to the placeholder text alignment, and not entered text?  I tested setting the messageInputToolbar.textInputView's font directly and the toolbar scales fine, though the placeholder is the only thing off.\n. @kartikthapar this is better solved by simply adding\nobjc\n    self.dummyTextView.font = self.textInputView.font;\nin layoutSubviews before it sets its frame.  Let's go with this simpler approach.  Feel free to close this PR and submit a new one to keep the commit history cleaner.\n. @mailyan Solid PR.  I've annotated a few small changes.  We do require the default cell label text color to be ATLBlueColor().  You can add a property that is a UI_APPEARANCE_SELECTOR that is defaulted on load but then can be customized.\n. @mailyan good point, we don't want that.  Since there already exits\nobjc\n/**\n @abstract The color for the title label displayed in the cell. Default is black.\n */\n@property (nonatomic) UIColor *titleColor UI_APPEARANCE_SELECTOR;\non ATLParticipantTableViewCell.  This can be solved by creating a new table view cell subclass for the ATLAddressBarController, or a better implementation is a subclass of ATLParticipantTableViewCell that can specify it's own selector value.\n. Thanks @timominous.\n. @timominous we already set the thumbnailSize for the thumbnail images, which the developer can specify already.  The developer can also choose to not download the full size image in their implementation.  Is this pull request still necessary?  I see it's for the full image, but that's why we have the thumbnail for compression size.\n. Thank you @ccrazy88, excellent PR.  For the last issue, it's one that we've seen.  I went through every possible implementation and decided on: https://github.com/layerhq/Atlas-iOS/pull/829.  We have to override the first responder, but it still doesn't feel great.  The collection view delegate methods don't work unfortunately, so we'll wait to see if we need this before merging.\n. Thanks @sammcd \n. Hi @thomasgpeng I believe this merged PR also fixes your issue: https://github.com/layerhq/Atlas-iOS/pull/882/files.  It has the same check for the collectionView nilness.  I'll close out this PR and the corresponding issue, but let me know if anything else happens.\n. @chipxsd we store all of the attachments under one key.  any memory pressure would release the entire object.  I can make it an NSMutableDictionary, but I think the cache would suffice.\n. @andrewcopp overall the structure looks good.  If you see https://github.com/layerhq/Atlas-iOS/pull/861 they implement it similarly.  Because both subclasses can have avatar items, a lot of the common logic is moved to ATLMessageCollectionViewCell (the superclass), with just the specific layout constraints applied in the lyr_CommonInit.  The superclass can then change constraints in - (void)shouldDisplayAvatarItem:(BOOL)shouldDisplayAvatarItem.  Your ATLAvatarItemDisplayFrequency implementation looks solid.  Once this other PR gets refined and merged down (still has comments on it) then we can put your changes on top as well.\n. Closing this out due to the outgoing cell already merged PR and https://github.com/layerhq/Atlas-iOS/pull/896\n. @andrewcopp commented.  Because it's just a pointer to the object, even reassigning it wouldn't change the internal queryController from the data source.  Plus the public property you defined is readonly as well.\n. Closing this out due to a forthcoming LayerKit update.\n. Merged in https://github.com/layerhq/Atlas-iOS/pull/894\n. @varkor I'm not able to reproduce these issues.  Can you create a gif that shows the use case?  I long pressed a bubble to show the UIMenuController.  Panning outside the cell closes it on the first touch as expected.  The location images are working as expected as well so a further detailed explanation will be required to investigate. \n. Thanks @varkor!  Much appreciated.\n. @kfweber can you explain what you mean that UIKeyboardWillShow and UIKeyboardWillHide notifications aren't being called?  While testing the application both are being called and responded to correctly.\n. Hey @kfweber I tested it again, and it looks to be working still.  I'm going to close this out, but feel free to open it up again if something else pops up.\n. @varkor it doesn't pass a ATLMessageCollectionViewCell to retain Atlas' full customization capabilities.  The default cells provided implement the ATLMessagePresenting protocol, which allows the developers to create their own cells for custom MIMETypes or even for default ones.  The collection view does not know (or care) about the specific cell class, just that it implements the protocol, thus the delegate method passes a cell adhering to the protocol.\nYou can check if ([cell isMemberOfClass:[ATLMessageCollectionViewCell class]]) and then get the bubbleView property, and customize the menu controller items as you see fit.\n. @varkor In Atlas we want to give developers the abilities to do things themselves, rather than having convenience methods for every possible use case (which could get out of hand).  If you want the exact location, look at how the cell renders it:\nobjc\n- (void)configureBubbleViewForLocationContent\n{\n    LYRMessagePart *messagePart = self.message.parts.firstObject;\n    NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:messagePart.data\n                                                               options:NSJSONReadingAllowFragments\n                                                                 error:nil];\n    double lat = [dictionary[ATLLocationLatitudeKey] doubleValue];\n    double lon = [dictionary[ATLLocationLongitudeKey] doubleValue];\n    [self.bubbleView updateWithLocation:CLLocationCoordinate2DMake(lat, lon)];\n    [self.bubbleView updateProgressIndicatorWithProgress:0.0 visible:NO animated:NO];\n}\nBy getting the message part you can find the information directly.\n. Thanks @artonragsdale for your PR.  I've added a few comments.  In addition, please squash your commits down to 1 commit, as 10 commits including a few merge commits are excessive for the functionality change.  Thank you for the work!\n. Thanks @garhiggins.  Merged.\n. @garhiggins this PR incorrectly sizes the button.  By having the size width defined in first appearance, the width is defined to be 40 by default, which compresses the button when displaying text.\n. @garhiggins see below.  When running your branch with no other configuration (default Send text):\n\n. @garhiggins merged a feature implementation: https://github.com/layerhq/Atlas-iOS/pull/1022.\n. @ricardorover I've commented on your PR.  I've added several comments to it with implementation issues that must be resolved before we can proceed.\n. @ricardorover any follow up? If not I'll be closing out this PR.\n. Hi @ricardorover I've added a few comments.   The PR is no longer mergeable, so if you rebase on master too then we can get it in.  Thanks!\n. A fix was merged in https://github.com/layerhq/Atlas-iOS/pull/950.  And 1.0.11 was just released as well.  Thank you for your work!\n. Hi @sammcd apologies for the late response.  Added one comment.  Additionally, there would be more work to be done to make this work correctly.  These cells are designed to have the constraints specified, and could lead to layout issues without them.  In what case would you not want to set these, as otherwise the avatar image view would have broken constraints.\n. Hey @sammcd apologies for the late response again.  I just tested this out - if a subclass does not set these constraints, the cells do not render correctly.  We can discuss adding them to the header file, but either way these are important constraints for correct layout.\n. HI @sammcd if we get this rebased on master and mergeable we'll get it in.  Let me know if you're still on this, or else we can close it out.  Thanks!\n. Thanks @varkor \n. @varkor apologies for the late response.  This looks good; it just needs to be rebased on master and then we can merge it.\n. @dfinzer looks good, just needs to be rebased.  The Podfile.lock cannot be merged, so rebase your branch on master and we'll get this merged in.  Thank you for the work.\n. @dfinzer merged. Thanks!\n. One small comment on it, and then we'll get this merged in.  We are still considering how far we want to remain backwards compatible per your UIAlertController suggestion.\n. Thanks. The check should be if (messageInputToobar.inputTextview.isFirstResponder) since that's what will resign FR status. Apologies for the mix up. \n. HI @dfinzer I've added a few comments for you to look at.  Thanks for the PR!\n. @dfinzer Testing out the implementation - after selecting participants and sending a message to the conversation, the table view is not hidden, so the conversation can't be seen.  Please re-think the implementation for these use cases.  Additionally, please add a test in ATLAddressBarControllerTest for the new delegate method.\n. @dfinzer added a few more comments.\n. @dfinzer I'll look at this today and provide any feedback, apologies for the delay.\n. @dfinzer after pulling this branch down it mostly looks good - however when the addressbar first becomes first responder the delegate is not called.  Only on subsequent typing and then deletion does it occur - once you get a fix for that we can merge it in.\n. @dfinzer Old branch but cleaning up Atlas right now.  One thing I noticed is that if the user scrolls on the pre-loaded page then the text view resigns first responder and the table view clears itself.  Get a fix in for that case and then we can bring this one in.  Feel free to close this PR if you are no longer working on this feature.\n. @dfinzer There are color and font changes that occur this way.  Adding configurable properties to the ATLParticipantTableViewCell would perhaps work best.  Additionally, instead of implementing a delegate, adding a public property to ATLAddressBarController would work best.\nTake a pass at a new implementation and we can discuss from there.\n. @dfinzer I've added one comment to fix.  Once complete I'l pull down the branch and verify its behavior again and then we can get it merged.  Thank you for this PR!\n. @alexmaie I've added a few comments.  We're also discussing internally if we would want this behavior or not, as not all users would want avatar initials to show up during load.  Finding a way to make this behavior optional would be optimal.\n. @alexmaie This behavior is not one we would want to accommodate for in Atlas, as it is not the likely use case for most of our users.  The best approach may be forking Atlas for your own needs, or as suggested finding an implementation that allows for customization.\n. @alexmaie if you are going to keep it forked instead of a PR, feel free to close this out then.\n. HI @neil477 do you want to make it customizable for localization, or just fully customizable text?  If it's the latter, implementing the delegate method conversationViewController:defaultMessagesForMediaAttachements: and implementing your own custom push text there is the appropriate way to do so.\n. @neil477 any update on this?\n. @neil477 one small comment and then we can merge.\n. @neil477 thanks for the PR.  System messages aren't participants in a conversation, thus we are hesitant to have a return type conform to ATLParticipant.  Ideally we would expose the LYRActor object on a conversation's participants instead of participantID strings which would let us use one delegate for both cases.  Let me re-think an implementation here and get back to you.\n. @neil477 I'm going to close this out for now - there are forthcoming changes to LayerKit in the coming weeks that will address this and impact Atlas.  Instead of introducing this and changing it soon, feel free to fork Atlas if you require a fix immediately, and I'll update this ticket when we begin the future work.\n. @DevMoz please see how we set bubbleViewColor internally in ATLMessageCollectionViewCell and follow a similar implementation, including default set up in lyr_commonInit.  Be sure to also add tests in ATLMessageCollectionViewCellTest for these 2 new properties as well.\n. @DevMoz I'll close this one out, but we can re-open it if the PR is updated.\n. @dfinzer there is another open PR: https://github.com/layerhq/Atlas-iOS/pull/946 that will be merged soon with this functionality that allows for implicit use of the Atlas implementation without needing to set the input accessory view yourself.  I'm going to close this PR for now, and you should see an update on that thread soon.\n. @charlespsdowd look at the delegate method conversationViewController:configureCell:forMessage: that will let you configure each cell on a per-cell basis.  This way you can get the radius customized as you see fit.  LMK if that works and we can close this out.\n. @charlespsdowd thanks for the kind words.  You wouldn't have to rebuild it all, just implement your custom logic here for how you want to size it. UI_Appearance is great for a one size fits all approach, but your needs will require the use of additional customization that is allowed for within our APIs.  We can re-open this ticket if the solution doesn't work.\n. thanks @rynecheow for this.  I updated the PR here with slight formatting changes: https://github.com/layerhq/Atlas-iOS/pull/1100 and we got it merged in with your commits.\n. @chlebta you can customize UIMenuController actions by implementing the delegate conversationViewController:configureCell:forMessage: and configuring the cell options with the actions you'd like to see.\n. @jeffdgr8 can you explain further?  Is this causing a specific bug for you?  The reasoning for using the containerViewController's view was to define the width of the input bar no matter where it's placed.  The Atlas Messenger project sets up the project in a UISplitViewController, which allows for the input accessory view to just remain the width of the containerViewController, like how iMessage functions across the 6s+ and iPad.  If the ATLConversationViewController is added as a child view controller and arbitrarily placed at an origin not aligned with the superview, then this could get thrown off.\nLet me know if there is something I'm missing here.\n. @jeffdgr8 apologies for the late response.  I'll test this behavior out in the AM and merge it in.  One thing to note - this container view's frame is only used to calculate the x of the input toolbar, not the y.  How would this code calculate the incorrect y coordinate as well?\n. Thanks @jeffdgr8!\n. Reasonable.  Let's follow the documentation closer to how the ATLConversationViewController has it:\nobjc\n/**\n @abstract The `LYRQueryController` object managing data displayed in the controller.\n */\n@property (nonatomic, readonly) LYRQueryController *queryController;\nOnce you make this change we'll get it merged in.  Thanks!\n. @jeffdgr8 one small comment.  thanks!\n. @jeffdgr8 one thing you missed from the comment: Instead, move the property and it's abstract below the layerClient property a little further up in the file. once that's there then we're good to merge!\n. merged.  thanks @jeffdgr8 \n. @devloopers a new Atlas version hasn't been released since then.  You can point your podfile to master or wait for the new release (coming in the next few days)\n. Thanks for this @ricardorover!\n. Thanks for the PR @ricardorover.\nInstead of opening up this customization as 2 separate methods, for state of 0 input and with 1+ items, consider adding an optional delegate method to the ATLMessageInputToolbarDelegate and moving the protocol from the ATLConversationViewController.m to the .h file.  \nA delegate such as - (BOOL)messageInputToolbar:(ATLMessageInputToolbar *)messageInputToolbar configureStateForTextInputView:(ATLMessageComposeTextView *)textInputView would pass all relevant information to the delegate and let them choose to customize the input bar (button included) as they see fit, instead of forcing them into those 2 methods.  In cases where the default behavior is wanted simply return YES, and in cases where customization is required it can be done and NO is returned.\n. @ricardorover have been doing some Atlas cleanup today and dropped a few comments!\n. Already available via:\n`` objc\n/**\n @abstract A Boolean value that determines whether or not an avatar is shown if there is only one other participant in the conversation.\n @defaultNO.\n Should be set before[super viewDidLoad]` is called.\n */\n@property (nonatomic) BOOL shouldDisplayAvatarItemForOneOtherParticipant;\n/*\n @abstract A Boolean value that determines whether or not an avatar is shown next to the outgoing messages\n @default NO.\n /\n@property (nonatomic) BOOL shouldDisplayAvatarItemForAuthenticatedUser;\n``\n. Apologies, this is about the naming not avatars.  I'll reopen and check it soon.\n. @klep this looks good.  Let's get a test inATLConversationViewControllerTest` for this behavior and then we'll be good to merge.\n. \n@klep the test looks good, however if the controller does not also set shouldDisplayAvatarItemForOneOtherParticipant true then the above occurs.  The name isn't aligned with the bubble in this case.  Let me know when you fix that functionality and we can discuss.\n. @jessearmand This would lead to a cut off participant list which we do not want.  If there are sizing fixes in textViewHasSpaceForParticipantString then by all means submit a PR to fix that, but as it stands this PR would break intended functionality.\n. @alexandrwang thank you for this PR.  On of our iOS engineers merged in https://github.com/layerhq/Atlas-iOS/pull/1151 which was a fix for this issue as well before seeing this PR.  Apologies for the mix up and thank you for contributing!\n. @kcoleman731 this PR doesn't change that.  If they wanted to override the left button action, they can remove all selectors on the button and add their own as they'd do today.  This PR just enhances the already existing functionality of the left accessory button action, not replacing it.\n. delete extra spaces here\n. You can set the UIActionsheet initializer here directly to self.photoActionSheet instead of setting the pointer to the created instance since the property is explicitly only used here.\n. use self.photoActionSheet here to follow the coding style\n. extra whitespace.  Remove these 2 lines.\n. extra line\n. 2 extra lines\n. extra line\n. extra line\n. extra line\n. please give it a more descriptive name like libraryError like it had before\n. extra line\n. @kcoleman731 I was thinking about that, but that's already taken care in custom cells in ATLConversationPresenting:\nobjc\n- (void)presentConversation:(LYRConversation *)conversation;\nFor custom cells, the user can handle the conversation, and it's lastMessage as they see fit.  This data source method is used for non-custom cells, where they send custom MIMETypes in the ATLConversationViewController (and subsequently have custom UICollectionViewCell subclasses they register in that controller).\n. We'd like to keep the initials if the image hasn't yet loaded.  Add that validation and then it should be good to go.\n. @kcoleman731 the bracket notation was already used, and we the dot notation for direct property accessors in the class.  The bracket notation was used to signify the protocol properties, whereas dot notation is for the class's own properties.  But I can change it if you want more consistency.\n. create a C helper function in ATLMessagingUtilities instead of a method just used in this once instance.\n. we want to keep the common initializers in each subclass still due to their own layout constraints.\n. What is this class for?  What couldn't be implemented in an existing subclass?\n. We want to keep common init and the layer standards.\n. remove commented out items.\n. an example of the extra new-lines introduced.\n. you must set the property's value here too.\n. remove extra line\n. remove extra line\n. can't these be set in viewDidLoad?  The subclass can then call [super viewDidLoad] and overwrite these set properties in their own viewDidLoad\n. remove extra line\n. these 4 properties can be called through self\n. remove extra line\n. We totally can make it public, I'll do so.\n. Unfortunately not.  That only occurs from textView delegate methods from user input, not from direct insertion as media attachments.\n. I'll add in tests for that and test the implementation.\n. you can assign it to the public ivar, without needing the internal property as well.\n. Space before opening (\n. Few issues here that affect spacing, if you check all of the potential states.  Your layout constraint is setting the contentView in relation to other views.  It should be:\nobjc\n- (void)configureConstraintsForOutgoingMessage\n{\n    [self.contentView addConstraint:[NSLayoutConstraint constraintWithItem:self.avatarImageView attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem:self.contentView attribute:NSLayoutAttributeRight multiplier:1.0 constant:-ATLAvatarImageLeadPadding]];\n    self.bubbleWithAvatarLeadConstraint = [NSLayoutConstraint constraintWithItem:self.avatarImageView attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem: self.bubbleView attribute: NSLayoutAttributeRight multiplier:1.0 constant:ATLAvatarImageTailPadding];\n    [self.contentView addConstraint:self.bubbleWithAvatarLeadConstraint];\n    self.bubbleWithoutAvatarLeadConstraint = [NSLayoutConstraint constraintWithItem:self.bubbleView attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem: self.contentView attribute:NSLayoutAttributeRight multiplier:1.0 constant:-ATLMessageCellHorizontalMargin];\n}\nAlso, since we are setting the right cell (outgoing), the constant used should also be negative for ATLAvatarImageLeadPadding and ATLMessageCellHorizontalMargin as shown above.\n. Why have this here?  [super configureLayoutConstraints] isn't being called anywhere.\n. Why have this here?[super configureLayoutConstraints] isn't being called anywhere.\n. let's rename this to shouldDisplayAvatarItemForAuthenticatedUser\n. It's possible to encounter a case where shouldDisplayAvatarItemForOthers is NO, while shouldDisplayAvatarItemForUser is YES.  This would leave spaces on the right side of the outgoing cells for avatar items and not the left, which probably isn't desired behavior.  and because shouldDisplayAvatarItemAtIndexPath: returns NO for both cases if (!self.shouldDisplayAvatarItemForOthers) return NO;, then it would not show any avatar items either, which is not desired.\nThe other PR has an example snippet for this issue.\n. Actually our best practice is keeping the property  Ignore ^ comment.\n. add (nonatomic, readwrite) even though it's readwrite by default, just to signify that we have a public readonly property.\n. @blakewatters in the previous implementation we log the error and continue with normal execution in either state.  I can definitely put the main thread operations in a  if (!success)\n. remove extra line\n. The behavior change is actually in the ATLConversationViewController, not the message input toolbar.  Let's move the test there.\n. Tested out the behavior and it should be if (messages.count == 0 && self.messageInputToolbar.displaysRightAccessoryImage) since this unfortunately won't let Atlas send location messages even if they want to.\n. This actually won't let the whitespace problem be fixed.  One second.\n. should be if (messages.count == 0 && self.messageInputToolbar.textInputView.text.length == 0) since ^ would still occur in white space or in no space clicks.\n. shouldn't it be self.linkTypes == NSTextCheckingTypeLink?\n. same as above\n. this only allows the support of 1 NSTextCheckingtype at a time.  Let's allow users to set several types at once.  This could pass in an array of values and be used like:\nobjc\n- (NSAttributedString *)attributedStringForText:(NSString *)text\n{\n    NSDictionary *attributes = @{NSFontAttributeName : self.messageTextFont, NSForegroundColorAttributeName : self.messageTextColor};\n    NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:text attributes:attributes];\n for (NSTextCheckingType type in self.messageLinkTypes) {\n    NSArray *linkResults = ATLLinkResultsForText(text, type);\n    for (NSTextCheckingResult *result in linkResults) {\n        NSDictionary *linkAttributes = @{NSForegroundColorAttributeName : self.messageLinkTextColor,\n                                         NSUnderlineStyleAttributeName : @(NSUnderlineStyleSingle)};\n        [attributedString addAttributes:linkAttributes range:result.range];\n    }\n}\n    return attributedString;\n}\n. with the proper casting to be put in an array, etc.  and self.messageLinkTypes would be an array\n. add documentation here explaining the default is NSTextCheckingTypeLink but it currently supports NSTextCheckingTypeLink and NSTextCheckingTypePhoneNumber.\n. change from ATLLinkResultsForText ATLTextCheckingResultsforText since it's now general purpose\n. testToVerifyTextCheckingTypePhoneNumber\n. let's also add tests for default configuration since we are opening up the property, and for the case of adding both.\n. Posted\n. let's make the property name messageTextCheckingTypes\n. extra whitespace\n. extra whitespace\n. extra whitespace\n. extra whitespace\n. extra whitespace\n. @kcoleman731 This was implemented to allow more than 1 menu action item for ATLMessageCollectionViewCells.  It shouldn't be a data source method, as not all cells require these options.  Previously the only UIMenuItem we had was copy:, but this opens it up so that way in conversationViewController:configureCell:forMessage: developers can add their own UIMenuItems to the default cells.\n. the developer can also specify menu items based on MIMEType if they so choose.  I reviewed this with Blake, as my 2 proposed implementations were: https://gist.github.com/kmahal/c290b0f8e9ac08b30812 and this one is the best, we think.\n. do your changes here change any functionality or simply space it out?\n. use NSUInteger \n. remove extra line\n. add { to the next line\n. remove extra line\n. no need for == YES, just keep it if (self.disabled)\n. extra white space line\n. Added a return if nil\n. We don't handle the error below either.  I can return early.\n. We return an object even if the below execution fails with error, what else should we change here then?\n. extra space here\n. This implementation logic is incorrect.  This does not change the input accessory view of the ATLConversationViewController, which is the actual desired behavior.  A subclass that implemented this logic would override the super class's behavior, effectively just returning an unused instance of your toolbar.\n. Adding properties like this can get out of hand - subclassing is the best approach here for customization to this level.\n. Must add docs.  Additionally, properties set here and meant to be customized via UI_APPEARANCE selectors.\n. instead of self just use the messageInputToolbar instance passed in the delegate.  also check if (messageInputToolbar.isFirstResponder) before calling it.\n. If your subclass overrides initializeMessageInputToolbar with your own custom ATLMessageInputToolbar instance, and you set self.messageInputToolbar = [self initializeMessageInputToolbar], this would not actually change the inputAccessoryView that the keyboard owns.  This would only change the pointer self.messageInputToolbar, and not change the UI.\nIf you want to allow customization, then make ATLConversationView *view a public property in ATLBaseConversationViewController to allow the developer to directly set the inputAccessoryView property of the view.\n. @ricardorover Apologies, you are right about this, I misread the implementation.  Thanks for the PR.  I'll add a few more comments and we can get this merged down.\n. @ricardorover Can you explain the use case you'd like to override the default behavior that cannot be set otherwise?  Additionally lets get some docs on this.\n. Make this \"Initializes the input accessory view of the ATLBaseConversationViewController, which by default is an instance of ATLMessageInputToolbar.  Override this method to return a subclass of ATLMessageInputToolbar.\"\n. With this line, after you select 1 participant to insert into the address bar, the table view will never be preloaded.  Is that the expected behavior?  After each insertion the user would expect to see the default list again.\n. typo, spell it retrieval.\n. add a @discussion that notes when this should or would be used.\n. Rename to setDefaultParticipantsWithCompletion:\n. rename to setDefaultParticipantsIfNecessary\n. Why would this be a fallback if the avatar is not available on the server?  It will be making a network call to the server, and the initials are only temporary.\n. After the image is downloaded, the initials are still shown.  We wouldn't want that behavior.\n. do we want to merge this before cutting the layerkit release?\n. Do we wanna add this?  or add it to the git ignore?\n. remove retain\n. instead of breaking it out into this method and several others, you can keep the implementation in this method, with the new default behavior you'd like to see.\n. If the delegate takes time to respond with an array of objects (such as making a network call every query) and the user selects the input bar to send a message before the delegate responds, then the table view shows up on screen and won't go away.  Have a check here to see if the address bar is still first responder.\n. { on next line\n. This is a property for ATLAvatarImageView not for ATLAvatarItem.\n. This is not a clean implementation.  The view already has:\nobjc\n/**\n @abstract Sets the diameter for the avatar image view. Default is 30.\n @discussion Bounds for the image view are clipped to half of the diameter to create a circular\n image.\n */\n@property (nonatomic) CGFloat avatarImageViewDiameter UI_APPEARANCE_SELECTOR;\nWhat use case are you trying to achieve?  a square?  If necessary to change the circle/the corner radius then add a property here that is set internally and configured by changing avatarImageViewDiameter, but can be overridden if necessary.\n. I should have been more explicit - let's remove this \"subclassing\" since it implies that to subclass this controller you need to directly access this object somehow.  Instead, move the property and it's abstract below the layerClient property a little further up in the file.\n. group these 2 methods above the loadAvatarImageWitihURL method.  Add a pragma mark as well to describe this group of methods.\n. @ricardorover A few changes have been implemented in Atlas, including allowing the developer to choose a default right button text.  Additionally, the developer can choose to remove the current target and add their own selector to the right button action to override this behavior completely.  I don't think we need this here but happy to discuss.  Ideally we can open up another PR with this if you'd like to further comment so the message input toolbar changes can be merged promptly.\n. remove UI_APPEARANCE_SELECTOR tag.  The vertical margin property has already been merged so you can undo your changes and just leave the message input toolbar subclassing method.\n. property should be set in cell initializer as default NO, as well as header docs explaining what this property does when set.\n. The default value of this property is not set in viewDidLoad currently.  The default value should be set to NO and documented.\n. capital m\n. super\n. talk with Steven, but I think we can get rid of this part now.\n. where's the code for setting up different cell types based on MIMEtype?\n. This wouldn't be correct design, because you first want to check to see if it responds to the delegate before calling it, thus the || is misplaced.  Instead, do something like this:\n``` objc\n - (void)configureRightAccessoryButtonState\n{\n  if ([self.inputToolBarDelegate respondsToSelector:@selector(messageInputToolbar:configureStateForTextInputView:)] {\n    BOOL shouldDefaultConfiguration = [self.inputToolbarDelegate messageInputToolbar:self configureStateForTextInputView:self.textInputView];\n    if (shouldDefaultConfiguration) {\n      [self defaultRightButtonConfiguration];\n    }\n  }\n} else {\n   [self defaultRightButtonConfiguration];\n}\n\n(void)defaultRightButtonConfiguration\n{\n// default config here\n}\n```\n\nLooking at the design, the 2nd part of the delegate isn't required since the input toolbar already has the right button and text input view as public properties, so just passing down the input toolbar would work.\n. discussion and result differ.  YES should do default config, NO should let the user override it. Additionally there is no need to point out what key is used since it's in the other part of the docs.\n. bump\n. Yea I think so.  Query controller is a property defined outside of the context of the method, and I think this should be a soft failure instead of a hard exception, since calling it early with a valid conversation shouldn't be exceptional.\n. I believe so, but it's always good to check if something responds to a selector before calling it anyways, since at that point you could just not use the check.\n. just remove the key and we'll be good!\n. remove extra line\n. this block can just be\nobjc\nreturn (tableView == self.tableView) ? _queryController : _searchDisplayController;\nsince it's handled internally and we know what tableviews exist\n. what's this line about?\n. extra line\n. instead of https://github.com/layerhq/Atlas-iOS/pull/1134/files#diff-8084b06af0aedab95a9154e11adf050dR332 just have it be rowActionsForDeletionModes:(NSArray < UITableViewRowAction*> *)deletionModes; so it gives a warning if they don't put in the right type\n. for an NSArray of UITableViewRowAction objects\n. Add a @note that describes if they use this then the implementation won't call the other 2 data source methods for color and text since it's in the else statement.\n. Instead of TableView doesn't have query controller let's go with Controller does not support additional tableviews. since it's not the query controller, but the table view that would be additional.\n. @sebyddd we guarantee that text is encoded into only 1 part.  let's get a fix for that and we can get it in.\n. remove extra line\n. not necessary.  we already have this in \n+ (CGSize)cellSizeForMessage:(LYRMessage *)message inView:(UIView *)view\n{\n    if ([[self sharedHeightCache] objectForKey:message.identifier]) {\n        return [[[self sharedHeightCache] objectForKey:message.identifier] CGSizeValue];\n    }\n. @kcoleman731 either way the 3 actions should be added, and this adds the new actions to the bottom of the action sheet instead of the top as they are optionals\n. ",
    "blakewatters": "Thanks for the contribution! This is a totally reasonable addition. I\u2019ll circle up with @chipxsd and @kcoleman731 re: delegate vs. other approaches and either merged or drop in an alternate implementation.\n. General question: How are we going to ensure that this list stays up to date as the codebase evolves? \n. Also, what do you think about hot linking all the class names to the CocoaDocs API reference?\n. Hi @Rupert-RR -\nKabir grabbed me to discuss this in depth. While we don\u2019t currently have heavy investments in Swift we are certainly interested in ensuring that both LayerKit and Atlas play well as the language develops. We are extremely excited about the developments in Swift 2 and feel like the maturity is finally there for us to begin investing in Swift support.\nIn any case, I\u2019ve reviewed your changes and find them perfectly suitable for merging. I understand the designated initializer patterns in Swift and will make sure the rest of the team is sensitive to these requirements as we extend and enhance the APIs.\n. @Rupert-RR @kmahal I have merged this PR into master with 192514c955c98fbbf5896a2ff33ebddf014c1f7c\nCleanup changes include:\n- Fixed mismatched spacing in one of the files.\n- Tuned up the initializer language to better match and init method than a factory method.\n- Rebased against master to eliminate merge commits.\nHope this helps.\n. Pushed FMWK change to master, but frameworks don't have an executable\n. Why are we using ivar assignment in some places and property access in others? You probably want to just standardize to ivar since this is an initializer\n. There is a bunch of commented out shit here\n. Let\u2019s rename this to disable and change the comment to:\n@abstract Disables user input and searching.\n. Spelling: permanent\n. isPermanent\n. Backticks around UIButton and spelling fix seperated -> separated: \"The class displays two customizable UIButton objects separated by a message input text view.\"\n. \u201cInstances are automatically resized in response to user or system input\"\n. The block has has no return value and accepts a single argument: an NSSet of objects conforming to the LYRUIParticipant protocol that were found to match the search text.\n. Hrm how about:\nobjc\n- (void)conversationListViewController:(LYRUIConversationListViewController *)conversationListViewController didSearchForText:(NSString *)searchText completion:(void (^)(NSSet *filteredParticipants))completion;\n. This code is hard to follow \u2014 the method is inputted with a variable called messageParts, you then iterate it as attachment, then create a new inner collection that is also called messageParts and then compose that into a message. I\u2019m assuming that the input collection is actually an array of ATLMediaAttachment objects and we should rename the method and the input variable.\n. ATLThumbnailSize should probably be ATLDefaultThumbnailSize\n. Missing docs\n. All of the above need docs that are in Doxygen format or they won\u2019t appear in API docs\n. All of the above should be refactored into a designated initializer and route all the calls through it\n. Why are we getting a new queue on every call?\n. Docs\n. What\u2019s up with the indentation here?\n. instancetype instead of id\n. instancetype instead of id\n. Mention the default\n. More weird indention. Also mention the default\n. Should be ATLMediaInputStream.m\n. Instead of this you could just do an initWithImage:assetURL:\n. You could just do this as a derived property and use keyPathsForValuesAffectingValueForKey: instead of the setter overrides + durable lossless property\n. Why do we create a queue on every invocation? Also the queue name should be a constant like the others\n. Size doesn\u2019t match implementation (256 vs 512)\n. All of these need docs\n. Bad spacing here ATLAssetMediaAttachment : ATLMediaAttachment\nIt\u2019s repeated on down through the file\n. These should probably be directly assigned to the ivars \u2014 or are they masked out because of the subclassing?\n. This method is a train wreck. You can\u2019t have something that looks like it answers a question, but also happens to trigger UI. We need to rethink this.\n. If you are going to do fixed height you could just use the rowHeight property\n. What\u2019s up with these lyr_ prefixes?\n. Expand this conditional\n. Expand this one too\n. return (interval < 60);\n. Expand this conditional\n. This sound name should be a constant\n. Not sure how many colors you have, but\u2026\nobjc\nUIColor *ATLColorWithRGBA(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)\n{\n    return [UIColor colorWithRed:red/255.0f green:green/255.0f blue:blue/255.0f alpha:alpha];\n}\n. typo in comment \u2018clustred\u2019 -> \u2018clustered'\n. You can just blindly assign to nil\n. Are we reintroducing the aforementioned crash?\n. Kill this log message\n. id instead of instance type on methods that begin with init\n. You probably want to start skipping the Podfile.lock in these PR\u2019s or you are going to have a lot of extra merge work. Don\u2019t commit everything in your tree \u2014stage the changes with SourceTree\n. Why are we prefixing methods in our own class?\n. These are the same changes from #156...\n. Also overlaps #156\n. did they start doing that? minor nit. don\u2019t care all that much\n. If you just ran into it then it\u2019s probably going to happen to others. Let\u2019s add it on the backlog\n. Needs the comment header boilerplate. Currently says the project is Pods\n. objc\n///---------------------------------------------------------------\n/// @name Accessing User Interface Components\n///---------------------------------------------------------------\n. objc\n///----------------------------------------------\n/// @name Configuring View Options\n///----------------------------------------------\n. objc\n///-------------------------------------\n/// @name Managing Scrolling\n///-------------------------------------\n. Why are we lyr_ prefixed?\n. Expand this conditional\n. Expand this conditional\n. LAYER - ?\n. Add to the end:\nruby\nsystem(\"git push origin HEAD\") if agree(\u201cPush version update to origin? (y/n) \")\n. Add before the tag:\nruby\nputs \u201cFetching remote tags from origin\u2026\u201d\nrun \"git fetch origin \u2014tags\"\n. Drop the Slack notifications, pull the notifier out of the Gemfile, and then run the bundle again\n. Drop this docs invocation\n. We can drop this reconfigure step and just leave the normal homepage in the Podspec\n. Inline this up into the previous task. I want to see 3 versions/release tasks:\n- rake version - Report the version\n- rake version:set 0.4.0 - Set the version to v0.4.0\n- rake release - Tag and push the release to CocoaPods\n. this should probably also be != NULL\n. Can we please move these to the top of the file or create a ATLTestUtilities.{h,m} file? I think it\u2019s valuable to be able to jump to the bottom of the file and just start appending tests\n. Spacing: \nobjc\n// Only to calculate when leftAccessroyButton is available\nif (self.leftAcessoryButton) {`\n. Spacing on the comment as well\n. Is it necessary to provide the conversation? Are there cases when you might want to vary the button text based on the individual conversation?\nCould be compressed to something like:\nobjc\n- (NSString *)conversationListViewController:(ATLConversationListViewController *)conversationListViewController textForButtonWithDeletionMode:(LYRDeletionMode)deletionMode;\n. Same comment as above \u2014 are there really cases where color varies based on target conversation?\n. \u201cThe following is a list\"\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Throw spacing in between the header and the code block\n. Star belongs to the variable: NSURLRequest *request\n. Since you have specified the main queue in the call to sendAsynchronousRequest:queue:completionHandler: you don\u2019t need to dispatch onto the main queue here \u2014 you\u2019ll already be running on it.\n. Star belongs to the variable: UIImage *image\n. Put a space between the headers. That drives me nucking futs\n. Line break before the list starts. Match the style in the file broham.\n. Is this really accurate \u2014 can\u2019t you switch the text now that you\u2019ve exposed the buttons?\n. Does this need to be in the public API?\n. ah I see now. Sorry I did a very quick look earlier\n. Can\u2019t this just be:\nobjc\n- (void)conversationListViewController:(ATLConversationListViewController *)viewController willLoadWithQuery:(LYRQuery *)query;\n. objc\n- (void)conversationViewController:(ATLConversationViewController *)viewController willLoadWithQuery:(LYRQuery *)query;\n. Fix indention\n. All of these constants should be outside the @implementation block\n. You are still going through the callback in the event of a failure\n. Expand this conditional\n. You don\u2019t actually need to do the weakSelf dance here because dispatch queues are single execution. You need to worry about constructs that copy their blocks and hold them (objects with completion handlers, NSBlockOperation, etc)\n. If you are going to do the weakSelf thing then you should take a strong reference inside the block. This ensures that you don\u2019t complete the work halfway:\nobjc\nNSError *error = nil;\n__strong typeof(weakSelf) strongSelf = weakSelf;\nBOOL success = [strongSelf.conversationDataSource.queryController execute:&error];\nif (!success) {\n     NSLog(@\"LayerKit failed to execute query with error: %@\", error);\n}\n. Wouldn\u2019t it be cleaner / more convenient to just add this support to LayerKit?\nobjc\n[_queryController executeWithCompletion:(void (^)(BOOL success, NSError *error) {\n    if (success) {\n        [self.collectionView reloadData];\n    }\n}];\n. We\u2019d also want async query primitives on LYRClient: executeQuery:completion:, countForQuery:completion:\n. You should also do this during dealloc\n. This should be a CGFloat\n. This should be a CGFloat\n. Change variable name from containing Local. Instead of Sync I'd go with My Devices. Maybe we should change Global to Everyone ?\n. @kcoleman731 Here title needs to be changed to atlasAlertActionTitle\n. Put this on the same line as the switch statement\n. You probably want to track some state to conditionalize the reload otherwise you may be unnecessarily flushing the UI\n. Remove the leading space to conform with the established style\n. ditto\n. ditto\n. Remove extra space\n. Extra space\n. Space\n. Extra space\n. You can do this in a single statement:\nobjc\nNSString *participantName = participant.displayName ?: @\"Unknown Participant\";. I don't particularly care right this second. If we want to make any changes to enforce a standard header that's fine but it needs automation to ensure conformance. ",
    "melvynhills": "@blakewatters any plans to merge this soon?\n. Oh ok my bad, will do!\nI'm not familiar with the test system though. \nSent from my iPhone\n\nOn 13 Mar 2015, at 18:50, Kevin Coleman notifications@github.com wrote:\nHi @melvynhills, we were waiting on you making changes to the API that blake suggested. I'm happy to do so if you'd like. \n\u2014\nReply to this email directly or view it on GitHub.\n. There you go\n. Fair enough. Thanks for the alternative tricks.  I guess it's something more specific to my needs anyway. Didn't have the time to figure out the whole testing system either. \n\nSent from my iPhone\n\nOn 09 Apr 2015, at 19:24, Kevin Coleman notifications@github.com wrote:\nHi @melvynhills. Never heard back from you on this PR?\nI'm going to go ahead and close this as it is actually unnecessary. The searchBar property of the ATLConversationListViewController is set as self.tableView.tableHeaderView. If you subclass ATLConversationListViewController, you can just set the tableHeaderView property to nil if you don't want a search bar displayed.\nYou can also set the leftAccessoryButton to nil if you don't want to see the edit button.\nFair enough?\n\u2014\nReply to this email directly or view it on GitHub.\n. Given the way deletions are currently implemented & are customizable, I'd say this is enough indeed!\n. \n",
    "grevolution": "the CI build failed because of rake version according to logs. Do I have to do something about it?\n. ",
    "maju6406": "Updated content based on your feedback, removed references of ATLParticipantPicker, and added links to all the classes.  I don't see us adding new UI components often so I think we can just manually update the README.\n. Thank @mathmatrix828 . I don't think the changes to Atlas.xcodeproj/project.pbxproj are necessary to get Cocoapods working. I believe they're just project changes that happen after you run Pod install. Also in the interested of keeping this PR clean can you put the changes to \"Examples/Storyboard/StoryboardAppDelegate.m\" in a separate PR? Thanks!\n. Yes @mathmatrix828 please roll back those changes to the project files.\n. ",
    "joshgosse": "Alternatively, you can drop in AFNetworking's UIImageView+AFNetworking to handle this case: https://github.com/AFNetworking/AFNetworking/blob/master/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.h\n. ",
    "danipralea": "Actually, that's what I have done eventually\n. Thanks Kevin, but I'm receiving \n'SDWebImage/UIImageView+WebCache.h' file not found\nI'm not seeing the SDWebImage pod in the project\n. ",
    "andrewcopp": "Good catch. What about configuring the cornerRadius in layoutSubviews where you will have access to the frame? If the documentation says it's a circle view, having to configure the diameter seems like an extra step.\n. I think got it working using the public property. I can't remember my thought process after rereading my last comment so let's close it.\n. I suppose that's the intended use of the tag property. It would differentiate the action sheets without having to store one in a property. :+1: \n. This fell off of my radar. Will revisit next week when I return.\n. @kmahal we should be good to go!\n. @kmahal should be good now.\n. One major concern. The LYRQueryController is readonly when accessed through the LYRConversationViewDataSource. By exposing it through LYRConversationViewController it isn't protected and is subject to be modified. Not the end of the world but I want to make sure this doesn't break some intentional design.\n. NSTextCheckingType is a bitmask. You want to use bitwise operators in this case.\n. ",
    "piotrbernad": "Second change is about clearing text from input toolbar. There are some situations when it shouldnt be cleared for example when there is no coversation to send message.\n. ",
    "ccrazy88": "Hi! I have, but now that I think about it, the initials didn't always correspond to the user \u2014\u00a0for instance, the avatar and the message would belong to me, but the initial on top of the image would be someone else's. Might this be more of a cell reuse issue instead?\nAs far as the image URL validation goes, my bad, I can add that!\n. Note: There are still some edge cases with the background image downloading (i.e. the same image is requested multiple times due to cell reuse so subsequent requests make the avatar flicker in and out even though the image is the same). We could compare the image that's already there w/ the image we want to replace it with, but I'm not sure what you guys have in mind :).\n. I think I have a better solution that will get rid of the animation. Hold on!\n. Thanks for fixing this! I noticed it a while ago but haven't had the time to whip up a PR\u2014glad to see someone beat me to it :).\n. Since we use it in other places (ATLConversationTableViewCell, ATLMessageCollectionViewCell, ATLParticipantTableViewCell), I believe so... can you think of a more elegant way to accomplish this?\n. ",
    "Rupert-RR": "By the way, I did run the tests, but so many of them seem to be failing anyway (iOS 8.3 on simulator) that there didn't really seem to be any point.\n. @kmahal Unfortunately not - this does not allow for sub-classes with custom initialisers (we're using Swift and have extra properties which must be initialised in the designated initialiser).\nWhat is the logic behind not exposing this method anyway?\n. @kmahal  While I appreciate that this was not written for Swift, it does seem that Swift is the way forward.\nIf you were using this in Swift then, in a custom initialisation method, you would have to call one of the designated initialisers in the superclass (which means that if you have designated a particular initialiser then you can guarantee that it will be called).\nIf you are not using Swift then there are plenty of ObjC runtime ways to get around the hiding of the initialiser, so you are not preventing anything.\nHowever, by not exposing an initialiser you are basically preventing any kind of meaningful sub-classing. In Swift there is an emphasis placed on using immutable (and preferably non optional) properties where possible (which avoids many programming errors and pitfalls). Such properties can only be initialised in an init method, which means that you are completely preventing their use in this class.\nI understand that you have required initialisers that must be called, but surely in this case if the developer makes the effort to sub-class and override, the onus is on him to make sure he does so in a way which is compatible with the superclass.\nThe idea of not trusting the developer, and not giving him the choice, especially in an open-source library seems counter-productive. Our use of Atlas will depend on being able to make it work with our FRP paradigm, which at the moment means having to use a customised fork and could easily mean that we don't actually use Atlas other than for a bit of inspiration.\n. @blakewatters Thank you for taking the time to look this through.\n@kartikthapar The problem with the factory API is specific to Swift - if you sub-class a class, and add your own immutable (let) properties to that class, those properties can then only be initialised in a custom init method in that class, which must then call a designated initialiser on its super-class (which is obviously not possible using the factory pattern).An immutable property cannot be set once its owner object has been initialised.\n. @kartikthapar Thinking about it, an analgous problem in Objective C would be if you had private properties in your sub-class. In that case, once you have obtained your initial instance in your factory method, by calling the super-class factory method, you would be unable to set the private properties on it.\n. This would certainly be good to have!\n. ",
    "kartikthapar": "\nUnfortunately not - this does not allow for sub-classes with custom initialisers (we're using Swift and have extra properties which must be initialised in the designated initialiser).\n\nI had similar issues too and the factory method was not very helpful. So I had to have my own initializers like:\n+ (instancetype)conversationListViewControllerWithLayerClient:(LYRClient *)layerClient loadQuery:(LYRQuery *)query;\nBut in any case, this doesn't really affect the whole situation in terms of the factory API provided by Atlas. Simply call the factory API and set your properties in your own custom initializer.\n```\n+ (instancetype)conversationListViewControllerWithLayerClient:(LYRClient )layerClient loadQuery:(LYRQuery )query\n{\n    NSParameterAssert(query);\nMyConversationViewController *controller = [super conversationListViewControllerWithLayerClient:layerClient];\n\n// set the load query here\ncontroller.loadQuery = query;\n\nreturn controller;\n\n}\n```\nSo, I am not sure what the issue really is here. Exposing the initWithLayerClient API doesn't seem to influence the specified use case.\n\nWhat is the logic behind not exposing this method anyway?\n\nI do agree here though \u2014 there is no reason for not exposing designated initializers.\n. I don't know much about swift to comment on it. As far as Objective-C is concerned, nothing is really private. The loadQuery variable is in fact a property declared in the implementation file rather than the header file. :)\n. Ya its a pretty loose PR, was just trying to get my things working. I\u2019ll have this updated with tests, etc in a while. Thanks.\n\u2014 Kartik Thapar\n\nOn Jun 23, 2015, at 7:59 PM, Kabir Mahal notifications@github.com wrote:\ncommented. You must also set the default values in the default initialization method + (void)initialize.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/layerhq/Atlas-iOS/pull/862#issuecomment-114677617.\n. There are issues with the current upstream; so I have revoked the PR. I will resubmit this in due time. Thanks.\n. Image below shows setting the font for compose view in the ATLConversationViewController subclass using:\n\nself.messageInputToolbar.textInputView.font = [UIFont fontWithName:@\"Georgia\" size:30];\n\nImage below shows setting text input view font using the new UI_APPEARANCE_SELECTOR API:\n[[ATLMessageInputToolbar appearance] setTextInputView:[UIFont fontWithName:@\"Georgia\" size:24]];\n\nThe only potential issue here is the frame for the toolbar which depends on the frame of the text input view instance.\n. Also, want to point out that the accessory views are for some reason restricted to the bottom of the frame instead of sticking them to the center. I am not sure of the reasoning behind this but I didn't change it as there were specific comments about this requirement.\n. @kmahal Ok. That's understandble. Although, if your text size is bigger, they appear to be weird. In iMessage, its not really noticeable as apply uses the default font and size (-1, maybe). I'd rather given an option for that. Further, if the font size is small, they appear to be out of place as the toolbar sizes according to the size of the compose view (as mentioned before). I am not sure if resizing the accessory buttons is the way to go. I suggest leaving that workload to the developer.\n. That is true. When you start entering the text, it resizes the frame. So this whole PR is primarily about setting the frame as soon as the view is displayed by using one of the appearance properties. I am sorry wasn't very clear in the question \u2014 it was mainly about the placeholder alignment but it had other side effects as well.\n. That is strange as I thought I tried setting the font in the layoutSubviews method before. Nevertheless, I'll submit a new PR. Thanks.\n. ",
    "timominous": "@kmahal I just figured out that the crashing was a problem on my part. Will create a new PR for just the searching improvements.\n. @kmahal I just thought it would be better to have the option. The preview works great for the receiver as they are able to view the image almost instantly. However, it still means that the sender would have to send the full sized image before the receiver can see the preview. Also, I think users would prefer the larger image if a he/she chooses to implement a fullscreen preview (or save to library) module.\n. @kcoleman731 I have nothing against it. I'm closing it now.\n. ",
    "ntnmrndn": "I re pushed. \nAbout Code/Views/ATLMessageCollectionViewCell_Subclass.h, maybe renaming the header ATLMessageCollectionViewCell_Protected.h would make its usage clearer ? \n. Pushed again.\n. Is there anything else to add/edit ? \n. As it uses a reference to self, this would be a bit difficult. I rolled back to the previous code.\nThe exacte same snippet is used 5 time in the class. An other solution would be to let the method and refactor the 5 codes to call the method.\n. This is not a class, just a header to simulate protected access. I used it to access to some parent properties and methods from the subclass, without exposing it to others.\n. ",
    "mailyan": "@kmahal I have a question about UI_APPEARANCE_SELECTOR color property for ATLAddresBarViewController. If I give it a default value and change ATLParticipantTableViewCell's titleColor's appearance on load according to it then it will also override any previously set appearance for ATLParticipantTableViewCell. It will change the appearance for ATLParticipantTableViewCell in ATLParticipantTableViewController as well. Is this a normal behavior?\n. @kmahal I came up with another idea. We can customize  ATLParticipantTableViewCell appearance just for ATLAddressBarController by using UIAppearance appearanceWhenContainedIn: method.\n. @kmahal  I set default value for ATLAddressBarController default cell to ATLBlueColor(). In defaultCellTitleColor property setter method I set title color for ATLParticipantTableViewCell only when it is contained in ATLAddressBarController. The only problem now is when setting ATLParticipantTableViewCell appearance title color it does not affect cell color in ATLAddressBarController. Is this a right behavior? \nI also tried subclassing ATLParticipantTableViewCell. The problem here is when changing super class appearance it changes subclass appearance as well and I think that kind of a behavior is not right .\n. Are there any updates on this?\n. @kcoleman731 I made a new PR. Please take a look #1188 \n. ",
    "sammcd": "There is more work to do here.\n. Any thoughts on this? Let me know if there is anything I can do to help this get pulled in.\n. I have fixed the spacing.\nMy case is that I have a custom cell subclass that supports a custom mimetype, which atlas handles very well. However when I updated to the latest atlas, this new requirement was added that forces all subclasses to set a layout constraint to a hidden property. This seems like a strange practice. My current change simply fixes crashes caused by this new requirement. \nI think there are lot of ways to move forward to remove this requirement, but I also think this change provides value with minimal risk. One thing I could do is log some sort of warning in this case alerting subclasses they they should set this constraint. We could also create an alternative api for subclasses to layout this view. \nLet me know what I can do to help!\n. The use case here is subclassing the cell to make my own custom cell. My custom cell may or may not need to change the leading constraint depending on an avatar. In my current use case my custom cell does not need this constraint to change, therefore there is no issue with layout, however there is a crash without my fix.\nBasically \u2014 not every custom cell requires these properties, so I believe it makes more sense to avoid crashing to build for the case that the properties are not set. The extent of this change is to prevent crashes \u2014 and in the worst case, you will get a layout issue instead of a crash (which is the current status).\n. ",
    "varkor": "I'm sorry, I should have explained the situation more clearly to begin with. The difference in behaviour is when the pan action is initiated by dragging on the message bubble that the menu originated from. By dragging from the message bubble, one can displace the bubble from its menu entirely, which looks odd, and it not what users expect (see Apple's Messages app to see how they dismiss the menu upon any pan gesture, regardless of where it originates).\nCurrent panning behaviour (focusing on the second pan):\n\nAdapted panning behaviour (in the pull request):\n\nThe location issue is not noticeable to users at the moment. However, in the future it could well cause problems\u2014if, for example, an option was added to open locations in Apple Maps. Maps that are loaded from the cache are treated simply as images, containing no position data. Thus, if you try to use the location's position data, you will be given an invalid kCLLocationCoordinate2DInvalid value. This is fixing a bug that won't affect users now, but could well rear its head in the future.\n. Why doesn't conversationViewController:configureCell:forMessage pass an ATLMessageCollectionViewCell instead of a UICollectionViewCell? That way, it'd be immediately clear how one could access the ATLMessageBubbleView from the cell.\n. Ah, all right, that makes sense\u2014thanks!\n. Another quick question: why was the convenience method removed? If we wanted to get the MIME type of the message, and perhaps more specific information such as the location of a shared location, what would be the best way to go about it? Would we reimplement the same technique as was previously in the convenience method?\n. Okay\u2014the branch should be up to date with master now!\n. ",
    "kfweber": "@kmahal We integrated Atlas into our project and found that those notifications were never being sent.   Only when we changed the notification to UIKeyboardWillChangeFrame was the selector called.  Our project was not removing the observer before posting, or had any other conflicts, so we thought it may be an iOS 9 issue.  If it's working for you, then I have no idea what the issue is or was.\n. ",
    "artonragsdale": "I have created a new pull request with your desired changes and have closed this request.\n. It does not change functionality. It was modified to make it easier to debug.\nDo you want me to remove this part from the new pull request?\n. ",
    "garhiggins": "I'm not an iOS developer (or, at the very least, I'm a very bad one ;) ), this was just what I hacked together to make it work for us. Are you saying the button text gets compressed by this change? Maybe a screenshot of what you're seeing would help me understand.\n. yeah, that's unfortunate - not sure why it worked for us in our fork of atlas - probably related to the fact that I changed some stuff to drop the 'share location' button.  oh well.\n. Awesome!\n. ",
    "ricardorover": "@kmahal sorry the delay. I've replied with my questions.\n. In the next few days I will do those adjusts. Thank you\n. Done! If some adjust is still required, please let me know.\n. Hey @kmahal, I created a pull request from a feature branch (not from master like this one, sorry about that), with the code that allow use a custom ATLMessageInputToolbar: #1075\nAlso, I created another pull request for the custom right accessory button issue, #1076, to discuss the need and an implementation of this feature.\nIf that's all right I'm closing this pull request.\n. Nice suggestion, @kmahal. I changed the code to use the delegate way, see if the code and the docs I added are ok.\n. @kmahal I pushed the changes, let me know if there is yet any adjust to be made.\n. I did not understand your point. I've changed \"self.messageInputToolbar = [ATLMessageInputToolbar new];\" to \"self.messageInputToolbar = [self initializeMessageInputToolbar];\" to allow any ATLBaseConversationViewController subclass override \"initializeMessageInputToolbar\" method, thus initialising a custom ATLMessageInputToolbar. I can't see why the returned instance would be unused.\n. I revisited this code, as I already have a ATLMessageInputToolbar subclass I've tried to do this change on the subclass only, doing the verticalMargin change in layoutSubviews, as ATLMessageInputToolbar does. It does not work, setting self.frame starts layoutSubviews all over again, and also seemed wrong. If there is some tutorial or a way to change the verticalMargin in a better way compared to the PR code, please make me know.\n. Yes, I will add docs to configureRightAccessoryButtonState declaration.\nYour comment about UI_APPEARANCE is related to property verticalMargin? If yes, I agree.\n. The inputAcessoryView that the keyboard owns is set by self.view.inputAccessoryView = self.messageInputToolbar, is that right? When a subclass overrides initializeMessageInputToolbar, it just changes [ATLMessageInputToolbar new] to anything the subclass wants (must be a subclass of ATLMessageInputToolbar). \nIn ATLBaseConversationViewController at line 79, immediately after instantiating a ATLMessageInputToolbar the inputAccessoryView is set with the new created instance, so keyboard owns the right view (the view instantiated by initializeMessageInputToolbar).\nAlso, if I undo all initializeMessageInputToolbar related code, and just set ATLConversationView *view as a public property, the developer will be able to set view.inputAccessoryView, but all the messageInputToolbar references inside ATLBaseConversationViewController and ATLConversationViewController will hold a unused ATLMessageInputToolbar instance, and the developer will have to handle all behaviors that are already programmed in those 2 classes (anywhere that calls self.messageInputToolbar).\nIf you think this conversation is going nowhere please be free to close this PR, but I would like to understand how is the right way to implement this feature, and then fix this PR.\n. Overriding configureRightAccessoryButtonState method now is possible, for example, change the \"send location\" behavior to \"start record voice message\" and change \"Send\" text to an icon with the same semantics (the requirements in my project).\n. I will do the changes you suggest, but it's only code styling, right? The delegate method is only called if respondsToSelector is true.\nI couldn't find a similar snippet in Atlas code, so I implemented that way, but I'm happy to adjust the code style.\nI agree about the 2nd part of the delegate. I was following your suggestion, I have not spent much time thinking about it. I will adjust that as well.\n. Sorry, I forgot to fix the discussion text.\nI couldn't find another reference to \"atl.messagetoolbar.send.key\" in docs, only in the code. Should I just remove the key from the discussion text, or do I remove the discussion itself? Since I wrote the discussion to describe the default behavior\n. ",
    "DanielsCode": "looking forward to it .... great work! thanks\n. ",
    "jeffdgr8": "Any update on when this PR can be ready for merging?\n. Yes, I understand what it's doing. I came across the bug because I'm doing something similar to also allow a subclassed ATLMessageInputToolbar to appear above the tab bar which contains our UISplitViewController. But the way you are calculating the convertRect:toView: relative to the ATLConversationViewController's own view is incorrect. The view's frame is relative to it's superview, so this method should be called from the superview. It's not obvious that it's incorrect because both calculations come out to the same result in this case, specifically because the ATLConversationViewController's frame.origin.x is 0.\nIn my case, how I discovered the bug, when the nav bar is set to non-translucent it causes the ATLConversationViewController's frame.origin.y to be 64, which is offset from its superview's frame.origin.y. So calling this method from the ATLConversationViewController's view to get the rect in screen coordinates ends up doubling the origin.y value to 128 because its being called incorrectly from the frame's own view. Calling it correctly from the superview returns the correct screen coordinate results.\nThis would only be obvious as a bug in your use case if the ATLConversationViewController had an x offset set on its frame so that it wasn't equal to its superview's x offset. So even though its not causing an issue as is with the way its frame is set in the UISplitViewController, it should still be corrected.\n. It doesn't affect the y coordinate in your use. I just used the same line of code in order to calculate the y coordinate and since there is an offset in the y coordinate when setting the nav bar to non-translucent, this is how I discovered that the calculation is incorrect. Again, you'll only see an issue if the frame has a non-zero origin. In your use, a non-zero origin.x would be an issue. In my use, a non-zero origin.y caused the issue.\n. Updated the documentation comment. Thanks.\n. @kmahal Nixed it!\n. @kmahal OK, think I got it now.\n. This logic appears sound to me. I've had to subclass the ATLMessageInputToolbar myself in order to keep it from covering the tab bar that contains the messaging view controller. Without a mechanism to override the instantiation of the message input toolbar, I have to duplicate much of the init code to reinitialize the message input toolbar after instantiating the subclass. This includes casting self to id<ATLMessageInputToolbarDelegate> in order to set the ATLMessageInputToolbar subclass' inputToolBarDelegate property, since ATLConversationViewController's implementation of ATLMessageInputToolbarDelegate is hidden. It'd be much cleaner and avoid breaking if the view controller ever does anything differently to the message input toolbar during init if there was a way to explicitly instantiate a subclass of ATLMessageInputToolbar.\nThe other changes in this PR are unnecessary for my specific subclassing of ATLMessageInputToolbar, but the ability to override the instantiation of the message input toolbar by instantiating a subclass and have that used helps in my use case.\n. ",
    "wallerdev": ":+1: would like to see this merged\n. ",
    "dfinzer": "@kmahal @blakewatters @kcoleman731 let me know if this looks reasonable\n. @kmahal rebased, ready for merge. Thank you!\n. @kmahal @blakewatters wanted to check in and see if this change sounds reasonable\n. @kmahal thanks for taking a look. Addressed your comments.\n. @kmahal fixed the issue you mentioned and added a test. Please take another look when you get a chance.\n. @kmahal addressed comments, thanks!\n. @kmahal any updates on whether this looks okay?\n. @kmahal @blakewatters any updates on whether this looks okay?\n. @kmahal just want to check in on this pull request\n. @kmahal just want to check in on this, would love to get it merged in.\n. @kmahal any chance we could get this PR in? Been waiting for quite some time.\n. @kmahal good catch. Fixed by placing the call in textViewDidBeginEditing\n. @kmahal Added configurable properties to match existing UI. Let me know how this looks.\n. Any updates on whether this looks ok?\n. @kmahal @blakewatters any updates on whether this looks okay?\n. @kmahal just want to check in on this. Thanks!\n. @kmahal any chance we could get this PR in? Been waiting for quite some time.\n. Changed. Let me know if this looks better.\n. Done.\n. Done.\n. Done.\n. Done.\n. I added a doc, but since this is a view controller property I'm not sure what you mean by setting it in the \"cell initializer\"\n. Ah, got it. Set the default value and added documentation\n. ",
    "bradytate": "@kmahal Still seeing this issue. What version of Atlas should include this fix?\n. ",
    "neil477": "not sure if you're bumping the min version of atlas to ios 8, if so we stop using alertsheet and just present an alertcontroller\n. @kmahal oops my bad yeah fixed it based on your suggestions.\n. @kmahal ahh embarassed i didnt see that, ok checked first responder on the textView.\n. @haemi can you give more context? does it not work when the keyboard is open or just doesnt work in general? I can't reproduce this problem on iOS 9. maybe create a new issue?\n. @haemi hmm for sanity check you could check on your phone you've given your app location permissions?\n. @kmahal ah ok missed that thanks! I'll close this.\n. @kmahal will fix tonight sorry\n. @kmahal fixed sorry for the delay\n. @kmahal added a comment too just to document the assumption\n. I just thought it might be easier to read if I broke it out into multiple functions. I'll update it to just be in one function though!\n. ",
    "haemi": "do you know when this will be available via cocoapods?\n. the location button still doesn't work in iOS 9\n. for me, nothing happens at all, no matter if the keyboard is present or not. Doesn't work in Simulator nor on device.\nOn an iOS 7 device it works as expected.\n. in iOS 9, it's not listed there and I'm not asked (which I am on the iOS 7 device)\n. I also have this problem, are there any plans for this Pull request?. ",
    "chlebta": "@kmahal Even using UIAlertController the Action sheet will appear behind keyboard is visible\n. ",
    "cashmash": "the variable is beeing ignored (Atlas 1.0.13)\nI set it to NO but it still shows it.\n. this was never merged?\n. ",
    "alexmaie": "Hey, \nSo basically I will tell you the use case for our current project.\nThe avatar is an optional element for a participant in our case. But this we can find out after we try to download the avatar and the url request with a 404 http code. \n. Ok,\nThanks for the heads up\n. ",
    "DevMoz": "Thank you for your feedback. I've tried to follow the implementation for bubbleViewColor. This is my very first contribution to an open source project. Sorry, it may take me a bit to figure out how to add the tests. I can close this out if you prefer.\n. ",
    "charlespsdowd": "I love what yo've done with Atlas+Layer. I really want to be able to contrbute and continue to upgrade the code base, so I'm motivated to get the right solution.\nI will look at that and make that work. I was hoping to not have to rebuild all of the message rendering just to overcome the current hard-coded avatar cropped to a circle.\n. I still need to do this for every View subclass that uses the AvatarItem\n1. ConversationListViewController\n2. ConversationViewController\n3. ParticipantViewController\nI know I must be missing something obvious here but the radius (not the diameter) is hard-coded in the AvatarImageView???\n. I want to change the avatar shape depending on the type of Avatar. The current implementation forces everything to be a circle or the same...very specific to my needs but it's the lack of access to the circle avatar I wanted to find a fix for. Happy to go in another direction for this!\n. ",
    "rynecheow": "Thanks!\n. ",
    "JRam13": "I'm still experiencing some bad scrolling performance issues, not to mention a whole bunch of NSLayoutConstraint warnings. \nusing iOS 9.1 and Atlas 1.0.15\n. ",
    "capitanomikejobs": "hi, i installed Atlas with cocoapods, the version installed is  1.0.15, but the property LYRQueryController *queryController in ATLConversationListViewController is not present.\nit's normal?\n. ",
    "klep": "Unless I'm missing something, that flag will not display the sender label due to this check in shouldDisplaySenderLabelForSection:\nif (self.conversation.participants.count <= 2) return NO;\n. @kmahal: Test added!\n. Good catch. Do you think it's better to make it one flag? I'm not sure why you'd have one without the other, and we don't have that level of granularity on showing avatars or labels when there are > 2 participants. I'd suggest either always showing the label if we're showing the avatar, or renaming the flag shouldDisplaySenderInfoForOneOtherParticipant. \n. I don't think we ever did. I'm not sure I understand why this distinction exists between conversations with 1 person or multiple people. Seems like in all cases, you'd want the name and avatar, hence the proposed flag. But I'll defer to you guys -- I don't have a problem maintaining our own version of Atlas to get this functionality.\n. ",
    "jessearmand": "@kmahal Well that is the issue, textViewHasSpaceForParticipantString is using sizeWithAttributes: which from my experience is rarely reliable to calculate width of multiline-text. \nNevermind I'm closing this, originally this is an issue that I posted in #1083, just trying to explain more. \nFor now, I don't see how the original disabledString is better than cutting it off when it doesn't fit, as they serve the same purpose (just with different labels), and I can workaround it by showing all participants in other areas of the UI.\n. ",
    "dulacp": "I fixed the tests also because I needed them to have a simple way of showing the changes I made for swift compatibility were still compiling correctly\n:beers: \n. Thanks for bringing the fix on the master branch.\nTrue, frameworks don't have executables in the strict sense of it, but when you configure a new Target in XCode and choose the Cocoa Framework template, the resulting Info.plist contains an CFBundleExecutable entry with the default value of $(EXECUTABLE_NAME).\nI know Carthage is causing issues due to the high maintenance it requires right now.\nThough, Carthage is using this default plist entry to find the binary.\nDon't you think it worth considering including this entry ?\n. Of course I can do that,\nbut don't you think it's obvious from these lines ? The binary won't ever be found if there is no such CFBundleExecutable entry\nI'm sending you the Xcode project in addition :)\n. ",
    "feifanzhou": "@dulaccc Thanks for giving this a go \u2014 if adding CFBundleExecutable causes the Carthage build to work, can you fork and send us a sample working Xcode project? \n. @flogg acknowledged, we're working on a fix. If you have an approach to support both Carthage and iTunes connect, feel free to open a PR\n. @flogg we've got a PR for a fix: https://github.com/layerhq/Atlas-iOS/pull/1144\n. Thanks @mathmatrix828, closing since we have a fix in progress\n. Hey @gautier-gdx,\nThanks for the PR and the kind words!\nCurrently I won't merge because nullable CGFloat doesn't make much sense. We'd like to move towards standardizing on a value such as CGFLOAT_MAX to signal that the collection view should use the default calculations. \nFeel free to update the PR to include that change (and the updated implementation in the collection view), or remove that line from the PR to match the original scope you're going for. Otherwise, I've backlogged the change but it'll be a while before we get a chance to address it.\n. @mlequeux I understand your point, but we don't believe that's the right way to resolve this \u2014 it's a quick win at the expense of additional tech debt (beyond what we've already taken on by allowing nil to be a possible return value). In particular, it doesn't make sense to make some values nullable; nullable CGFloat doesn't make sense as CGFloat is a primitive.\n\nWe'd like to move towards standardizing on a value such as CGFLOAT_MAX to signal that the collection view should use the default calculations.\n. We will likely address these methods one-at-a-time. Conceivable, developers might want to use 0 to indicate a cell that should be fully collapsed; that is more likely than actually wanting a CGFLOAT_MAX height cell. The methods that return an object (pointer) can certainly be made nullable.\n. Hi @suninrain086,\nThanks for this PR! The AppDelegate change looks good. The ATLConversationDataSource change is unnecessary, however, as that method was introduced in an earlier version of LayerKit and Atlas is bound to a compatible version. I'll merge this PR if you rollback that commit. \n. Great, thanks!\n. @jaderfeijo thanks for this PR! First part looks good. We're in the process of updating Atlas for LayerKit 0.22.0 \u2026 if you could isolate the first commit, I'll merge this\n. Looks good\n. Looks good\n. Wow I've been searching for ?: in C for ages \u2026 didn't know it was possible until now. \n",
    "flogg": "Hey Gang,\nI think this change set may introduce an issue with submitting to iTunes. I use Cocoapods and built with SHA a819ff2d89. I'm having to go back before this was merged in order to resolve. The addition CFBundlePackageType of to Info.plist provokes this when I upload to iTunes:\n\n...Atlas.bundle' does not contain a bundle executable. If this bundle intentionally\ndoes not contain an executable, consider removing the CFBundleExecutable key from its\nInfo.plist and using a CFBundlePackageType of BNDL. If this bundle is part of a third-party\nframework, consider contacting the developer of the framework for an update to address this issue.\n. \n",
    "ikesyo": "Could you check this? https://github.com/Carthage/Carthage/issues/1185#issuecomment-201109981\n. ",
    "damirstuhec": "+1 Let's get this merged!\n. ",
    "bitomule": "Please merge this. Can't believe Swift support is 100% broken on cocoapods and carthage :(\n. ",
    "pkluz": "+1 due to:\n*** Skipped building Atlas-iOS due to the error:\nDependency \"Atlas-iOS\" has no shared framework schemes for any of the platforms: iOS\nPrevious PR that seemingly fixed the issue didn't entirely fix it. This one might.\n. ",
    "LukeDurrant": "Your probably looking for this\nhttps://github.com/layerhq/Atlas-iOS/pull/1265\n. Someone will need to publish the pod spec before the tests will pass\n. No response?. Nice!. @daniel-maness did you run the project?\nIt still crashes..... Created another PR which fixes the remaining issues \nhttps://github.com/layerhq/Atlas-iOS/pull/1451. ",
    "grimabe": "+1\n. ",
    "MatrixSenpai": "Resolved #1187\n. Great stuff! Glad I could help!\n. Note that checks have failed due to TravisCI issue, not code\n. Please note that most of the changes are due to re-linking the Cocoapods dependencies. And I can go ahead and roll back those changes as I don't think they're necessary\n. ",
    "lucacolumbu": "This seems to be actually overwriting the links recognizer, as pointed out by Abir. \n. Done! \n. ",
    "mrackwitz": "Note: This would supersede #1169 and fix #1070.\n. Always glad to help!\n. ",
    "maxeeem": "I updated CocoaPods today and Atlas wouldn't compile complaining about missing headers. This was the key! Thank you @mrackwitz\n. ",
    "RDorange": "@kcoleman731 \nDo you have timeline to package this into a upcoming Cocoapods release ?\nNo pressure at all, but we have major release mid June migrating from our old messaging system to Layer.com (World Economic Forum, substantial event in China), and just wondering if we should tweak the code ourselves in the meanwhile or not.\n. ",
    "mlequeux": "/\n @abstract Asks the delegate for the height to use for a message's cell.\n @param viewController The ATLConversationViewController where the message cell will appear.\n @param message The LYRMessage object that will be displayed in the cell.\n @param cellWidth The width of the message's cell.\n @return The height needed for the message's cell.\n @discussion Applications should only return a value if the message object requires a custom cell class. If nil is returned, the collection view will default\n to internal height calculations.*\n/\nYou should also change your documentation, please merge this, and add nullable to all the others nullable return values, thanks.\n. @feifanzhou \nWhy are you doing this then ? \nAre you checking for a nullable primitive ? I think 0 should be a valid return value.\n```\n- (CGSize)heightForMessageAtIndexPath:(NSIndexPath )indexPath\n{\n    CGFloat width = self.collectionView.bounds.size.width;\n    CGFloat height = 0;\n    if ([self.delegate respondsToSelector:@selector(conversationViewController:heightForMessage:withCellWidth:)]) {\n        LYRMessage message = [self.conversationDataSource messageAtCollectionViewIndexPath:indexPath];\n        height = [self.delegate conversationViewController:self heightForMessage:message withCellWidth:width];\n    }\n//THIS\nif (!height) {\n    height = [self defaultCellHeightForItemAtIndexPath:indexPath];\n}\n\nreturn CGSizeMake(width, height);\n\n}\n```\nOtherwise, you should go with NaN to check for invalid CGFloat.\nFor the method :\n+- (NSOrderedSet <LYRMessage*> *)conversationViewController:(ATLConversationViewController *)viewController messagesForMediaAttachments:(NSArray <ATLMediaAttachment*> *)mediaAttachments;\nBeing able to return null is very handful for this one, if you don't want to generate the ATLMediaAttachment for every LYRMessage with a natively handled MIMETYPE.\n. ",
    "suninrain086": "OK, this project is awesome, and I'll take more time to know it better.\n2016-06-21 6:56 GMT+08:00 Feifan Zhou notifications@github.com:\n\nHi @suninrain086 https://github.com/suninrain086,\nThanks for this PR! The AppDelegate change looks good. The\nATLConversationDataSource change is unnecessary, however, as that method\nwas introduced in an earlier version of LayerKit and Atlas is bound to a\ncompatible version. I'll merge this PR if you rollback that commit.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/layerhq/Atlas-iOS/pull/1224#issuecomment-227294549,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABB5r0HI_HHQQFxvQfihlGTabp_Zch69ks5qNxq5gaJpZM4I5Mck\n.\n. \n",
    "jaderfeijo": "I believe the integration has failed due to an old version of cocoapods being used by the CI system. The line that is causing integration to fail was not actually introduced by this PR.\n\n. @feifanzhou sure thing.\n. @feifanzhou all done :)\n. ",
    "jpmcglone": "I think we should close this @daniel-maness because of soon changes to AvatarView for Presence. If this is important, we can revisit. What are your thoughts?. @melbic can you please rebase off the latest master to get CI passing? . I'd like to get our team to review this. Can you please pull in the latest changes from master to get CI passing @jcsinck? Thanks!. Take a look at and potentially remove rake travis?. Please pull in the latest changes from master to get CI passing.. Thanks @rivera-ernesto!. Will merge when Travis passes. Hey can you pull in the latest changes from master and see if its passing?. automatic?. Also automatic?. +1. how do you feel about \nreturn _insertedRowIndexPath ?: (_insertedRowIndexPaths = [[NSMutableArray alloc] init]);. Removing commented out stuff. Leaving section comments (they're useful actually haha). Good idea.. I found skip_docs. Going to do that instead. If they ever make better README's we can remove that.. done.. Why is this downgraded?. Can you update the podspec. It should fix it.. ok, thanks. needed for LayerThrift dependency in LayerKit. only needed when building LayerKit locally. . Commented out code. commented out code. 1. if we were it wouldn't go here, really. We'd have to have colors per presence or something, to make it sensible.\n\n\nAFAIK no, we're doing one set of colors across the platforms right now.\n\n\nBackground color is the circle behind the status. Status color is the status. So e.g. in most places, the bg color is white. I think this is a good first pass. Ideally, perhaps we get rid of background color (or at least make it \"clear\" for default) and use it to 'clip' the view underneath it. This requires more discussion, so I did only what the task asked of us (and I think this aligns with how Android is doing it). +1 if true. Idk if true, but at a past job, one of our engineers said it was more performant to multiply by a float than divide. Regardless, our code base never used divides when we could have easily multiplied. So for me, its just an old habit. I really don't care if this gets updated or not. \n\n",
    "daniel-maness": "Yep that sounds good, closing.. Fixed and merged in #1441 . Fixed and merged in #1441 . Fixed and merged in #1441 . Ah good point. So I can move it inside if (!self.hasAppeared) or keep it and remove it on viewWillDisappear. What do you think is best practice?\n. Cool I like that. Changes pushed.\n. extra space\n. This is the fix for the spinner issue\n. Yeah much cleaner, I like it. Will update.. Good call. Changed it so objectChanges is always removed.. Default value for backgroundColor is nil, and a quick test by removing it turns the background black in the UI, so it's needed.. The rest of Atlas is filled with author info right now. Probably @blakewatters call on what the rule is going forward. @chipxsd avatarImageViewDiameter was removed from ATLAvatarView, and trying to use the size of self.avatarItem.imageView fails because it's nil at this point, so nothing shows for the avatar. I'll do some refactoring to get it working without using magic numbers.. Instead of deleting line, change @param participant to @param property. ",
    "cpiggott": "Can anyone update why this failed? It seems like most of the recent travis-ci tests have failed.\n. \ud83d\udd25 . ",
    "oferRounds": "Following this change I sometimes get the following crash on ATLConversationListViewController.m, where on the method: setupConversationQueryController, this assertion fails:\n    NSAssert(self.queryController == nil, @\"Cannot initialize more than once\");\nI don't have a clear reproducible steps, it happens when sometimes when a viewed conversation is popped to return to the conversation list screen.\n. ",
    "elitalon": "I cannot run the tests due to an issue with KIF. I have reported it and submitted a PR for that too.\n. ",
    "markkrenek": "I'll make these changes. Some of the coding style came from the previous branch that I was referencing when making this change.\n. Should I bring the rest of the file up to this convention? There are several if blocks that don't use curly braces and new lines.\n. scrollViewDidScrollToTop is not necessary. I inherited it from the previous implementation but will be removing it.\n. UIActivityIndicatorView size is generally controlled by the OS. It does seem however in this case, I can force it's height to 30 when installed in as the table view's footer. Normally it's height is 20.\n. Adjusting the height of the footer dynamically is a challenge, as there is no API to do that. Attempts at sizeToFit and setNeedsLayout do nothing. The only apparant way to change the height is to assign a view to the tableViewFooter property. To make this bullet-proof, I no longer try to use the same view to represent the two different states that are needed. Instead, I simply swap out the current footer view with what is currently needed, either the activity indicator or an empty view.\n. ",
    "geoffmacd": "I dont know how people could have implemented custom cells without this being a problem\n. this is an easy win\n. I think you should put this block after the removal of objectChanges just in case -didChangeObject: is called just before a window is remove and you have a leftover changes that were already applied by reloadData. ",
    "PatrickNLT": "+1.\nI just encountered this bug and made the exact same fix.. ",
    "fmecklen": "We also need this feature. This would be amazing . ",
    "delox": "Merge this already!. ",
    "petec029": "I am getting following in my console log when I try to send a GIF message part.\n2016-12-09 12:17:36.864664 g2g[29012:6069924] [LayoutConstraints] Unable to simultaneously satisfy constraints.\n    Probably at least one of the constraints in the following list is one you don't want. \n    Try this: \n        (1) look at each constraint and try to figure out which you don't expect; \n        (2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"UILabel:0x7fcda770   (active, names: '|':ATLMessageBubbleView:0x7fbdbf50 )>\",\n    \"\",\n    \"\"\n)\nWill attempt to recover by breaking constraint \n\n. ",
    "rivera-ernesto": "This only fixes displaying PNG images. Yeah. I think that making it wider is important for wide devices, maybe just not growing linearly.\nMaybe something like return max(215, screenWidth * 0.7)?. Right. Let me make those changes.\nAs for making it relative to the available view width. That would require us to stop having a global fixed constant as we do now, and have a per-instance value instead.\nShould we keep it fixed and adjusted to the screen for now to avoid having too many changes?. This removes the image from the button as soon as some text is input.\n. ",
    "ebobe": "I'm experiencing some crashes related to this. It'd be nice to get this merged for the next Layer release.. ",
    "melbic": "@jpmcglone @ebobe Sorry, I didn't have the time back then. Just merged the current master branch into this bugfix branch.. ",
    "Przytua": "I've fixed it with PR #1435 which was merged and released in v1.1.4 (https://github.com/layerhq/Atlas-iOS/releases/tag/v1.1.4) so I'm closing this PR.. @woutergoossens @bakwarte can you please check v1.1.4 (https://github.com/layerhq/Atlas-iOS/releases/tag/v1.1.4) as this was probably fixed with #1435 ?. @jwyld updated with accessory buttons fixed as well.. @jwyld updated according to comments.. Please note that this is fixed in https://github.com/layerhq/Atlas-iOS/pull/1441. This throws a warning in Xcode:\n\nThis is a new way of checking availability, introduced in Xcode 9 and it removes warnings:\n. This is recommended by Apple (https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Chapters/Introduction.html):\n\nTo guard the use of new APIs, use an if statement combined with @available, a new Objective-C expression that checks the system version. For example:\nif (@available(macOS 10.13, iOS 11, *)) {\n    --\n    // The compiler will not warn about uses of APIs from macOS 10.13\n    // or iOS 11 here\n}\n\nI believe this is a better solution, as the propery/method call is strongly related to the object and it's type (so it's impossible to use a similarly named selector from another class by mistake), and as well it throws the warning when it's not guarded with @available so if one would forget to wrap it with if statement, the compiler will remind about it.. And of course it's better for refactoring, as if this would be our own class, and we'd rename the method/property, the selector in @selector might not get changed during renaming.. ",
    "jcsinck": "@jpmcglone Thanks for the ping -- just merged and pushed with the latest. Should be good to go!. ",
    "V-FEXrt": "@jpmcglone Should be done. @daniel-maness  @blakewatters @chipxsd Pinging for visibility . Spent all day yesterday trying to figure this out. \ud83d\udc4d . After looking into that, you are correct. The comment here might be wrong, but this did fix an issue we were having. I don't remember the exact details because its been 7 months since I made this PR.\nWe have been running a fork of the dependency with this fix (and others) because it seems like maintenance of this repo has ceased in favor of https://github.com/layerhq/iOS-XDK\nAs for the issue, we were consistently seeing the location message be sent unintentionally by our users and this was the only way we could allow the delegate to disable the ability to send location entirely.\nI can take another look tomorrow and try to reinternalize how this solved our specific issue, but I believe we used used to so that our delegate method could just return nil and call it a day.. That is an interesting solution, but that should be determined by the client code that implements the delegate. That change would make it so that the location can never be sent. This would be a breaking change in projects that currently expect the location to send when a user taps the button with no text.\nIdeally, we would allow the implementing delegate to decide if location should be sent. That is what the documentation here is saying. But the code doesn't seem to actually follow what the documentation claims. ",
    "jwyld": "This is essentially what we did with Cola, but we abstracted to a \"change set\" object which held all the changes.  We were able to reuse this for the conversation as well as the conversation list.  In Atlas' ATLConversationViewController, the code has gone through a number of iterations along this similar code path.  I'm not sure if we're seeing failures there.  If not, I would ask why not.  If we are seeing crashes, we should apply similar treatment there as well.. After a lot of testing with Messages, I found 0.72 seems to be about the correct value.\nBTW, it's not against the screen width.  It should be against available view width.. This doesn't do the right thing for the left and right accessory buttons.  I.e. they're left in the same state like the problem with the text field.. I'm concerned about all the ruby and gemfile changes.  Is it possible to do this without those?. Looks good. \ud83d\udc4d . Looks good. hahaha... all that worry over clock performance of multiply versus divide yet .bounds is executed 4 times!. I thought JP removed a bunch of these.  I see a lot more of them in this PR.. This should really be checking to see [self respondsToSelector:@selector(safeAreaInsets)] instead of checking for iOS 11.. That's because it should use [self performSelector:@selector(safeAreaInsets)].. I worry about this name change.  Although it's not public, it's still possible developers latched onto the name already.  It's a core method for computing the collection view, so if they did overrides, they likely need to call this method.. How often does this fire?  If frequent, consider a dispatch_once to hold the result.. How often does this fire?  If frequent, consider a dispatch_once to hold the result.. How often does this fire?  If frequent, consider a dispatch_once to hold the result.. ",
    "armcknight": "yeah we were only using that because we hadn't pushed 1.0.2 to pod trunk. Just saw the definition of run below, will retry using that with autoexit to see if it properly fails and writes all the output.. done. This was accidental somehow, fixed.. Purely preferential, I always sort imports. Here's an automator service (Automator -> \u2318N -> Service) I have that sorts all selected lines. Then you can create a custom shortcut for it, I have it mapped to \u2318\u2325^S\n\n. If we're gonna put in a capitalized camelcased AvatarView, may as well add the ATL prefix.. Unless there's an overridden setter for accessibilityLabel, I suggest replacing self. with _ for consistency and also I believe that is best practice for @property initialization in objc.. Could we define these colors in a reusable, self documenting way?\nThere are many ways I've done this in the past:\n- category on UIColor, less preferred here because I don't like delivering categories in SDKs (requires the -ObjC linker flag in consumer projects)\n- #defines\n- FOUNDATION_EXPORTed constants\nDon't really have a preference, other than not using \"magic colors\". . Never reach into the bounds struct directly in ObjC, use these functions:\n- CGRectGetWIdth/CGRectGetWidth for size values\n- CGRectGetMinX/CGRectGetMinY for origin coordinates (there are also mid/max variants). I'm confused as to why this comment is here. Could someone add to it the explanation for why NSLayoutRelationLessThanOrEqual was considered (but rejected)?. update copyright year. Open source projects I've worked on typically omit author info, not sure on our rules.. Are we purposefully not making this a UI_APPEARANCE_SELECTOR? (Sorry if this has been discussed.) I see that it's passed in the init, why do we use two different approaches for statusColor and statusBackgroundColor?. I believe this is the default value for backgroundColor, so we could omit this line.. The comment is pretty redundant. Why not \nCGFloat borderWidth = diameter / 6.0;\n?. Extract the magic numbers in this file to constants.. Why do we replicate the interfaces in the Readme? That's a lot of extra maintenance burden to keep in sync. The .h files should be the one and only source of truth.. ",
    "joshtheancraite": "Finally, I've been looking for this for a while\n. ",
    "adina-abduraman": "Hi guys, any news on this? Any idea when you can merge this request? Thanks!. ",
    "woutergoossens": "Can this be approved? Have this problem with LayerKit 0.26.10 and Atlas 1.1.2 . ",
    "magneticrob": "We are also still getting this bug, on the latest version of Atlas and LayerKit. However, we've noticed that it is isolated to when the app is put into the background. Try it a few times in a row if you can't get it to happen straight away.\nSteps:\n1 - Join a conversation\n2 - Put app in background\n3 - Send message to that conversation\n4 - Observe crash. @laposheureux Also still getting this, specifically when the app is in the background.. We're still experiencing crashes due to this issue, although reports are showing that 97% of the time the app is in the background. Any ideas?\nError message:\nFatal Exception: NSInternalInconsistencyException\nInvalid update: invalid number of sections. The number of sections contained in the collection view after the update (13) must be equal to the number of sections contained in the collection view before the update (13), plus or minus the number of sections inserted or deleted (2 inserted, 0 deleted).. Sorry I should have mentioned - we have pulled the changes from commit d3879d6 directly into our Atlas build and are still experiencing the crashes.. ",
    "edwinruan": "Thanks for fixing that issue. :). Is that a way to display timestamp but hide sender Label? Look like this fix will hide time stamp if shouldDisplaySenderLabelForSection return false.. ",
    "pikor": "Hi,\nis it ready to merge? It would be awesome to see Carthage support :). ",
    "laposheureux": "Came here from #1403...\n@Przytua: We are encountering insert related crashes even with the change in this PR. An insert comes along and upon hitting the batch update, the number of sections remains constant despite a number of insertions, e.g.:\nInvalid update: invalid number of sections. The number of sections contained in the collection view after the update (33) must be equal to the number of sections contained in the collection view before the update (33), plus or minus the number of sections inserted or deleted (2 inserted, 0 deleted).. ",
    "cliss": "Taking a second stab at this.. It looks like this is a possible duplicate of #1441.. ...and #1440.. @Przytua as I noted above. :) \n@daniel-maness looks like #1441 is waiting on your review; any chance we could get that merged? \ud83d\ude07. Ping @daniel-maness . ",
    "T-Pham": "Probably a better fix for #1403 . @daniel-maness @chipxsd can you review this please?. messages is not nil here but an empty set {} so the location is still sent.. Another issue I ran into is that the \"Send\" button is always enabled after we set a conversation to ATLConversationViewController. And it's because the Send button is enabled, user can just tap it even when the message field is blank, which makes the location being sent.\nWe can just make sure to disable the \"Send\" button in case the message field is blank and the problem in the PR would not happen at all because user would not be able to send empty message from the first place. I think it is good to do that here\nBOOL shouldEnableButton = self.conversation != nil && self.messageInputToolbar.textInputView.hasText; . ",
    "karimhm": "When this gonna be merged? i get the same issue.. ",
    "dinkk89": "changed\n. ",
    "marioradonic": "Little defensive programming never hurt nobody. At this point I can't see why, but someone could be adding the third tableView to this view controller and this is just a little helper to whoever does that.\n. ",
    "sebyddd": "@kmahal \u2013 The issue is that there are cases where the message is split into different parts, with different encodings. This is reproducible with emojis and non-latin characters. Therefore we need to check for encoding on each part and return the concatenated result. \n. ",
    "prabhupb": "Shouldn't this be [header updateWithParticipantName:@\" \"]; ? Please note the space in the participant name, otherwise it ends up displaying 'Unknown User'. Currently this hides all the timestamps if the sender label is not displayed.. ",
    "vinzen": "PR created #1404. "
}