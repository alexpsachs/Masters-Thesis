{
    "davidfowl": "From Katana/Logging#1\n. Hey @Eilon can you take a look.\n. Yea I'm not concerned with this change making it in right now. This is more for discussion than anything else.\n. That assembly should be called Mvc and the other one should be called Mvc.Core. Startup looks a bit silly.\n. How do you get the root namespace today in full desktop? or on system web?\n. I'm not a fan of this change. It feels really premature to be making freezable objects at this point. I'm all for experimentation but this change seems to lump together the caching and controller discovery and optimizations for skipping assemblies. \nNot to mention the fact that scanning the app domain for assemblies won't work if the assembly hasn't been loaded yet (webapi has this issue today in self host).\n. @yishaigalatzer I like the fact that you don't have to have thread safe collections if you can ensure the object is basically readonly at a certain point. I just don't like the current implementation. There might be better ways to handle that taking into account the fact that our DI container isn't the only one that will be used. \nHow will the current solution work when a user plugs in ninject?\nAnyways, seems like that is completely unrelated to controller discovery. It does impact the thread safety of the ControllerDescriptorCache but besides that, it seems like it needs alot more thought at this point.\n. For what purpose?\n. :shipit: Looks fine\n. We name the assembly an the class so this should be trivial to do right?\n. Yes, I saw that as well. I wonder if we need new xunit VS tooling to make this work..\n. I think we should be using the vsix anyways. Do we just need a new version for xunit2? \n. Sweet. Let's wait on that version to come out. I can ping Brad about that if necessary.\n. Isn't the List<IRouter> a stack?\n. Yes this should flow by default. If it's not then we need a fix to the do container. MVC shouldn't register this.\n. I think this should be working:\nhttps://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/HostingServices.cs#L29\n. We need to move off self host and move to helios to make this work\n. Yep, after all samples are ported to the MvcSample.Web it should work.\n. I think you want scoped instead of singletons. The problem with singletons is that it's viral.\n. I'm not sure this was a great change to make. MVC can only be used with autofac at this point...\n. Also, the wrong sample was updated.\n. You guys busted all the demos :-1: . As long as we get this thing working as soon as possible... It's even worse because the way we did the open generics here means the application has to register those strange MVC types. It isn't even part of GetServices().\n. It's ok. We just need to make sure we have an idea of when the other functionality comes online. It might be worth forking autofac and seeing what it looks like trying to convert that thing to core clr (it has to happen anyways).\n. People still have PRs in flight that adds new samples. So that those arent disrupted I left the other one in for now. When those PRs are in the samples should be ported over to the .Web sample.\n. Merged\n. Why is the name Http*?\n. :shipit: \n. @dougbu The host offers up services that are assembly neutral. There isn't much more to it. There's an interface ILibraryManager that has this wonderful function to get get referencing libraries based on what dependencies are relevant for the application. \n. Nope\n. :shipit: \n. ViewData shouldn't be deriving from DynamicObject in the first place. Why patch this when that needs to change all up?\n. So what's the point of this change then?\n. Where is the other bug? To fix ViewData all up?\n. I'm not sure you need a PR for something this small \n:shipit:\n. @Eilon fair enough. PR then push cuz this is trivial...\n. I think this needs to be split into 2 things. There needs to be a testing library that works for all frameworks that builds on top of hosting (SignalR wants to use it as well). That piece would go into the the testing repository. None of this is specific to MVC and I think this is the wrong place to put it.\n. :shipit: \n. Sounds good\n. This will all be redone after the filter work in #245 \n. @NTaylorMullen If there's full path specified, make it ends with cshtml. \n. github\n. yay\n. No, this is a forcing function. The tooling team is working on making it easier to debug tests but we want to get all the projects converted to improve the feedback cycle asap.\n. Made a few more changes\n. :shipit: \n. :shipit: \n. :shipit: \n. A nice way to handle this might be to return something like an ObjectActionResult:\n``` C#\npublic class ObjectActionResult : IActionResult\n{\n    public object Value { get; private set; }\npublic ObjectActionResult(object value)\n{\n    Value = value;\n}\n\npublic Task ExecuteResultAsync(ActionContext context)\n{\n    // Put the default logic in here, which is JSON today\n}\n\n}\n```\nThis way a ResultFilter can look at the value if nobody else has processed it.\n. Yea, I think the IActionResultFactory (yes I know I added it in the initial prototype :smile:) is a shitty service that needs to be removed. We have result filters for this exact reason. This also lets you get back at the original result if nobody modified it. \nOne abstraction, one way to modify the result of an action, One Microsoft :trollface: \n. Yea, I think the IActionResultFactory (yes I know I added it in the initial prototype :smile:) is a shitty service that needs to be removed. We have result filters for this exact reason. This also lets you get back at the original result if nobody modified it. \nOne abstraction, one way to modify the result of an action, One Microsoft :trollface: \n. I disagree, they serve the exact same purpose, to modify the result of an action. This is a more elegant way to do it than the action result factory (which needs to die)\n. I disagree, they serve the exact same purpose, to modify the result of an action. This is a more elegant way to do it than the action result factory (which needs to die)\n. The amount of branches in each stage of the pipeline makes the code extremely hard to follow. Makes me wonder about the sync and async code paths /cc @loudej \n. The amount of branches in each stage of the pipeline makes the code extremely hard to follow. Makes me wonder about the sync and async code paths /cc @loudej \n. Will add method that takes IConfiguration as well (for completeness).\n. Will add method that takes IConfiguration as well (for completeness).\n. Let's do Model.ValidationState instead of GetValidState()\n. Let's do Model.ValidationState instead of GetValidState()\n. Shouldn't we always just do what MVC did unless there's a good reason to differentiate \n. Shouldn't we always just do what MVC did unless there's a good reason to differentiate \n. @rynowak Can you take a look at this? It needs to coordinated with your filter work.\n. @rynowak Can you take a look at this? It needs to coordinated with your filter work.\n. @rynowak, you'll love this :smile: \n. @rynowak, you'll love this :smile: \n. yep\n. yep\n. It isn't and it is in MVC. This is from the default template, notice the Request and User properties that are first class:\n```\n@using Microsoft.AspNet.Identity\n@if (Request.IsAuthenticated)\n{\n    using (Html.BeginForm(\"LogOff\", \"Account\", FormMethod.Post, new { id = \"logoutForm\", @class = \"navbar-right\" }))\n    {\n    @Html.AntiForgeryToken()\n<ul class=\"nav navbar-nav navbar-right\">\n    <li>\n        @Html.ActionLink(\"Hello \" + User.Identity.GetUserName() + \"!\", \"Manage\", \"Account\", routeValues: null, htmlAttributes: new { title = \"Manage\" })\n    </li>\n    <li><a href=\"javascript:document.getElementById('logoutForm').submit()\">Log off</a></li>\n</ul>\n}\n\n}\nelse\n{\n    \n@Html.ActionLink(\"Register\", \"Register\", \"Account\", routeValues: null, htmlAttributes: new { id = \"registerLink\" })\n@Html.ActionLink(\"Log in\", \"Login\", \"Account\", routeValues: null, htmlAttributes: new { id = \"loginLink\" })\n\n}\n```\n. It isn't and it is in MVC. This is from the default template, notice the Request and User properties that are first class:\n```\n@using Microsoft.AspNet.Identity\n@if (Request.IsAuthenticated)\n{\n    using (Html.BeginForm(\"LogOff\", \"Account\", FormMethod.Post, new { id = \"logoutForm\", @class = \"navbar-right\" }))\n    {\n    @Html.AntiForgeryToken()\n<ul class=\"nav navbar-nav navbar-right\">\n    <li>\n        @Html.ActionLink(\"Hello \" + User.Identity.GetUserName() + \"!\", \"Manage\", \"Account\", routeValues: null, htmlAttributes: new { title = \"Manage\" })\n    </li>\n    <li><a href=\"javascript:document.getElementById('logoutForm').submit()\">Log off</a></li>\n</ul>\n}\n\n}\nelse\n{\n    \n@Html.ActionLink(\"Register\", \"Register\", \"Account\", routeValues: null, htmlAttributes: new { id = \"registerLink\" })\n@Html.ActionLink(\"Log in\", \"Login\", \"Account\", routeValues: null, htmlAttributes: new { id = \"loginLink\" })\n\n}\n```\n. @yishaigalatzer can we get somebody on this?\n. @yishaigalatzer can we get somebody on this?\n. @Praburaj we're all using the new tooling now. Can't we just ctrl+f5? Are you using specific versions?\n. @Praburaj we're all using the new tooling now. Can't we just ctrl+f5? Are you using specific versions?\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. Can't be the exact same attribute unless we make it purely metadata.\n. Can't be the exact same attribute unless we make it purely metadata.\n. > Yes, MVC 6 is light years better than Web Forms, but it still has a long way to go. I am bitter that a superior RESTful application framework--Web API 2--was abandoned for an inferior set of abstractions in MVC 6.\nnit: It's not MVC 6, it's MVC Core 1.x.\n. nit nit nit: It's Microsoft ASP.NET Core MVC 1.x. :shipit: \n. :shipit: \n. Why are we doing this if we're going to do #242 ?\n. Why are we doing this if we're going to do #242 ?\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. What's the reason for fixing this in the first place?\n. What's the reason for fixing this in the first place?\n. Yea I'm not sure I agree with this change. Creating the async state machine just to make exceptions consistent?\n. Yea I'm not sure I agree with this change. Creating the async state machine just to make exceptions consistent?\n. The exceptions are all async instead of being sync. If you do:\nC#\npublic async Task Something()\n{\n    throw new Exception(\"Something\");\n}\nIt's like doing:\nC#\npublic Task Something()\n{\n    var tcs = new TaskCompletionSource<object>();\n    tcs.SetResult(new Exception(\"Something\"));\n    return tcs.Task;\n}\n. The exceptions are all async instead of being sync. If you do:\nC#\npublic async Task Something()\n{\n    throw new Exception(\"Something\");\n}\nIt's like doing:\nC#\npublic Task Something()\n{\n    var tcs = new TaskCompletionSource<object>();\n    tcs.SetResult(new Exception(\"Something\"));\n    return tcs.Task;\n}\n. Consistent exception means messed up call stack :trollface:\n. Consistent exception means messed up call stack :trollface:\n. Abort!\n. Abort!\n. Why? This is risky?\n. Why? This is risky?\n. @RoboBurned make the action asynchronous instead.. @DamianEdwards file this in HttpAbstractions\n. One of the great things about the new model is that nothing comes for free. There's no ASP.NET pipeline in the way. Expect to see layers on top that provide similar functionality (because it is useful) but it will be off by default.\n. That's the idea. Everything uses the new logging infrastructure\n. Looks perfect\n. Is this the only place that has code like this when generating urls?\n. :shipit: \n. @jgauffin CoreCLR has nothing to do with full CLR. So even though it may have been on all versions of the full CLR, that has little to no bearing on if it exists or not.\nThat said, @pranavkm I believe we have HttpStatusCode now.\n. You don't need it anymore\n. @aliostad whatever we do will likely live in middleware or as part of the HttpAbstractions repository. Mvc will expose those primitives using things like filters.\n. Yes!\n. UseMvc or AddMvc?\n. @javiercn global.json\n. Not a real bug. We decided to hard code the ASP namespace in razor views\n. We already spoke about this. Will close\n. :shipit:  Check the samples\n. CORS will likely go through a full redesign, but we'll take this into account when we do it.\n. :shipit: \n. :shipit: :dancer: \n. Yep, this is pretty buggy. It seems like we're trying to grab model metadata for built in types like string/int etc. Those should be skipped. On top of that, it seems like we don't have any logic to filter out indexers.\n. @pranavkm how isn't that correct? Is there a case where we enumerate the properties of Int32? String? Int64 etc?\n. Content negotiation isn't done yet. As for the string return value, how often do you return a json encoded string as a string from the action itself (if the answer is often, then you should make a custom action result)? I think text/plain is completely fine and intuitive as the return value if a string is returned from the action and it should be a special case. As for it living in object content itself, I can see it being elsewhere, I don't have any hangups about that.\n. @rynowak mark as done\n. This is already filed https://github.com/aspnet/FileSystem/issues/6\n. @dougbu wrong emoticon :shipit: \n. This doesn't have a bug/feature tag @yishaigalatzer @danroth27 \n. What does this speed up?\n. Well sure, but is it impactful enough?\n. Was this done? If so why is it still working? /cc @yishaigalatzer @danroth27 \n. Was this done? If so why is it still working? /cc @yishaigalatzer @danroth27 \n. I'd change the bug title to something more specific. There's tons of breaking changes.\n. Seems like a routing bug, not an mvc one.\n. Also, the compilation options should probably be the same. Maybe we can flow more info from the host\n. Any compilation settings for the current configuration, and target framework\n. Why is this still working /cc @danroth27 @yishaigalatzer \n. Why is this still working /cc @danroth27 @yishaigalatzer \n. Again? Didn't we revert this before?\n. Sure but won't that break in the short term?\n. This issue has no tags and the issue you pointed to has no milestone, when was it done?\n. :shipit: \n. Don't ship it until the solution file is fixed\n. You should specify a version for all of your dependencies. The MVC sample isn't doing that because it's a project reference so you shouldn't really copy it. It's also over specifying dependencies since all you need is \"Microsoft.AspNet.Mvc\": \"6.0.0-*\". All the other MVC packages aren't required in project.json\n. Your project.json dependencies should look like this:\nJSON\n{\n  \"dependencies\": {\n    \"Kestrel\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\"\n  }\n}\nThat will give you the latest of everything.\n. When you expand the references list in visual studio everything looks good?\n. It also looks like you're running an older KRE, you can't update MVC and not update the KRE it's running on. \n. Can't use alpha3 KRE and alpha4 packages. \n. You need to use the KRE from the dev branch. Before you do that though why are you using the alpha4 packages instead of the alpha3 packages?\n. You can try:\nJSON\n{\n  \"dependencies\": {\n    \"Kestrel\": \"1.0.0-alpha3\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-alpha3\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-alpha3\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-alpha3\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-alpha3\"\n  }\n}\n. What feeds do you have configured in visual studio? You need http://myget.org/F/aspnetmaster in the list of configured NuGet sources. It looks like you only have the nightly feed in there (http://myget.org/F/aspnetvnext)\n. There is a cache but it's per feed so you wouldn't/shouldn't get alpha4 unless kpm couldn't find alpha3 in any of your configured feeds. The aspnetvnext feed has the latest bits, and the aspnetmaster feed has the specific alpha3 bits. \n. Sweet!\n. Technical reason? Because sometimes discovery is nice. When you don't want discovery and want to be explicit about everything, you can be but discovery makes the getting started much simpler.\n. I'm guessing that the majority would prefer to write it that way. The rest that don't can use whatever mechanism this bug gets resolved with.\n. Thanks for the lesson. I think only a few of these apply since we have to look past route definitions and discovery and do what is idiomatic given that c# is the language. \nIf we did inline routes (and we'll probably have a low level way of doing that directly in routing as isn't mvc specific at all) that would be cool for simple stuff.\nNow the mvc pipeline includes, action selection, model binding filter execution, conneg etc . \nSome of these features completely would need to be handled differently when you change the pattern and I think it'll take alot more effort to design a system around those patterns (and some are worse imo, at least for c#).\nThat said, if you want an explicit way to map controller classes, there will probably be one. Other than that, you can extend the framework or use one of the many others that exist on .net.\nFor comparison though, you should look around at some existing .net web frameworks as well to compare and contrast the approaches. Nancy is one that stands out pattern wise.\n. This an example of this in webforms. By default when you bind to an object in a grid view or any data control, any property you specify ends up being off the bound model (Name = model.Name). There's a special syntax to bind the entire model. I think it's something like \"!\" or something /cc @Eilon \n. lies\n. its actually not, git fu:\ngit merge release -s ours\n. :shipit: \n. It's doing 2 things:\n- Using the _mvcAssemblyList to find referencing projects\n- Skipping assemblies in the _mvcAssemblyList itself\nI think the first check should be reduced to just mvc core. Not sure why we need to check if the assembly references any of the mvc assemblies since those themselves reference Mvc.Core :smile: \n. Ah! I think I know what this is. Our cookie middleware handles AJAX requests by preserving the status code in the X-Responded-JSON header while returning a 200. The reasoning is that javascript clients don't follow redirects (properly) so this lets the client issue a client side redirect by detecting that header. The SignalR client uses this. Here's the default logic:\nhttps://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNet.Security.Cookies/Notifications/DefaultBehavior.cs#L15\nBy default, cookie middleware redirects, but it sounds like you don't even want cookie authentication. What kind of auth are you looking for?\n. This issue is more about the fact that you're doing cookie auth rather than whatever auth you're trying to do. The cookie middleware behavior seems appropriate, you doing cookie auth might not be though. Is that assumption correct?\n. Did this ever work in MVC without customizations?\n. Ah OK, because it doesn't work like that. You can't just search all referenced projects for views, that would just be inefficient to do by default. The view locations should be customizable though /cc @yishaigalatzer @pranavkm \n. File these types of broad issues on aspnet/Home. This in particular has nothing to do with mvc.\n. We're not providing midfunc from individual frameworks/components anymore. We have a single adapter that can turn an ASP.NET 5 pipeline into an Owin pipeline. https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNet.Owin/OwinExtensions.cs#L114\n. :shipit: \n. Thats because it's not available on CoreCLR. Use new StringWriter(File.OpenWrite(path)) instead\n. File issues on the https://github.com/dotnet/corefx repository. They will be able to clarify why things are missing in the new framework. I believe the reason this particular overload was removed was because of layering issues between the new packages.\nThe assembly that contains StreamWriter shouldn't be directly referencing FileStream:\nnew StreamReader(path) actually does new StreamReader(new FileStream(path, options)).\n. :shipit: \n. Is the mvc build currently broken? /cc @pranavkm \n. Looks like it might be a bug with tooling aggressively killing the process on any file change /cc @mayurid @BillHiebert @PradeepKadubandi \n. That doesn't matter. It looks like an IDE issue.\n. What about if that method returned a builder kinda like UriBuilder that you could then use to get the full url?\nvar urlBuilder = Url.RouteUrlAsBuilder(\"GetDinnerById\", new { id = dinner.DinnerId });\nvar full = urlBuilder.ToFull();\n. Nope, we don't support content packages right now.\n. I'm trying to extract something concrete from the listed pain points for Mvc 6:\n- wiredep and useref don't work well with razor files because of ~\nIs that the biggest problem?\n/cc @madskristensen @sayedihashimi @DamianEdwards \n. /cc @DamianEdwards \n. :shipit: \n. Yah, we don't use tabs.\n. Almost :smile: \n. Thats ok for now. Will bug @pranavkm when he gets back to fix it all properly.\n. :shipit: \n. :shipit: \n. See https://github.com/aspnet/Home/issues/368\n. Yes\n. :shipit: !!! Do this with more things in general.\n. @pranavkm Can you get this in?\n. FWIW, I'm seeing this on dnx as well with the latest VS builds. It's pretty damn annoying.\n. Seems like it might be every test project\n. :shipit: \n. Yep, that's why it references that bug :smile: \n. This is done\n. Why?\n. Wait the cookie name or the form field name?\n. Spoke too soon. Seems like everything is overridable and that's just the default value.\n. CookieName is a property on the same object....\n. Can you move this to aspnet/Home?\n. :shipit: \n. Logging.Interfaces\n. Until then :smile: \n. I dont think you depend on logging you only depend on interfaces (in Core)\n. MVC uses LoggerFactory in Core? Something is terribly wrong there.\n. Anyways :shipit: \n. :shipit: \n. Why not use a partial?\n. It is a mono issue. export MONO_MANAGED_WATCHER=false and see if it works\n. No idea, I don't think anybody debugged it.\n. :shipit:\n. Wait what?\n. :shipit: \n. @atrauzzi it would be great if you could come up with an end to end proposal for what you would like to see. Seems like you know laravel and MVC well enough to come up with something that works well in C# or VB.\n. That migh actually be pretty nice\n. The samples require beta5 not beta4. Update your dnx if you want to run samples from the latest Mvc branch\n. After you updated did you close and open the solution.\n. Looks like a compilation error. Run restore on those projects.\n. Definitely don't use that. Avoid statics.\n. Can you file this issue on aspnet/dnvm?\n. Try clearing %userprofile%.dnx\\packages\n. @HornerGrahame Here's an example of a console application https://github.com/aspnet/Entropy/tree/dev/samples/Runtime.CustomLoader\n. Can you provide an end to end sample that doesn't work so we can reproduce the problem?\n. :thumbsup: \n. Wut?\n. This should be replaceable without having a derived action result.\n. Why do we need to make decisions on both the declared return type vs the runtime type? Isn't  Task the only special case?\n. Lets avoid the internal keyword as much as possible and try to put things in a hidden namespace:\n- Microsoft.AspNet.{thing}.Internal\n- Microsoft.AspNet.{thing}.Infrastructure\netc.\n. Not really a solution to the shared source problem but related. This is more the fact that were open source and the internal keyword hurts more than it helps. There is indeed a difference between public and published API and C# made a keyword to denote this (but we shouldn't use it. No other languages have this feature). \nThere's often useful utilities that we end up hiding because we don't want them to maintain them for users. Exposing them via the internal namespace means you don't have to use private reflection just because you didn't want to expose the API (Visual Studio also does this and we've been using this strategy in SignalR). \n. The earlier prototypes in Owin.Prototypes had a much better strategy for narrowing the search space which I think we should use in the new mvc. \nhttps://github.com/Katana/Owin.Prototypes/blob/master/ReferenceGenerator/CreateReferencesMetadataTask.cs\nhttps://github.com/Katana/Owin.Prototypes/blob/master/Framework.Infrastructure/ReferenceAssemblyResolver.cs\nThe basic idea was to create a list of assemblies that were referencing mvc, either directly or indirectly and only scan those.\n. Why are these the same thing? Why is it a RouteContextProvider?\n. ??\n. That's a good point but most people will use the controller base class anyways. We do need to think about that though. It might be one reason we want people to use a base class. \nOf course, the alternative is that we can make people call a method to register their controllers if they don't want to use the base class. That's not great but it beats this whitelist of assembly names.\n. Seems like you're basing everything on what already exists in webapi/mvc today...\n. Is this what we do today in Mvc?\n. Also, it's only possible not reference mvc if you don't return any of the MVC intrinsics. So sure you can theoretically not return IAcitonResult or any type of result but I'd argue that controller is pretty useless. And you can always replace discovery.\n. Just always use this and get rid of the ifdef.\n. var everywhere.\n. Formatting\n. So we have RouteContext and RequestContext. Should we just pick one?\n. Do you need this?\n. Suggestions? CreateDescriptor?\n. No it has RouteValues. I think we should just put RequestContext in routing and use it in mvc.\n. Ah your feedback is about what MVC exposes. I thought you were talking about the describer...\n. You're looking at the wrong branch:\nhttps://github.com/aspnet/Routing/blob/cleanup/src/Microsoft.AspNet.Routing/RouteContext.cs\nIt is a bit different though. Though I'm not sure what RequestPath is for...\n. Why is it called an EndPoint?\n. Extra space\n. Let's make sure we're using the same version of Moq across the board.\n. This isn't right. You'll need to update this PR as a bunch of code has shifted. This flows via chaining resolvers.\n. I think we said this would flow up through the route handler itself right?\n. Let's go with the pattern we agreed on for helpers. The interface should have the longest overload of each unique method and extension methods should be used for the rest. (what @dougbu and @pranavkm mentioned above)\n. Use the named parameter syntax here.\n. Why is this virtual?\n. IUrlHelper?\n. Let's ifdef this for NET45 and leave the old code for K10\n. Put this in net45\n. Named routes?\n. That's a compatibility shim. We don't want to depend on it\n. It's to help with porting code not to use when writing new code.\n. There's a new reflection surface area that is drastically different from the old one. The compatibility shim is there to make porting code from desktop easier. \n. Actually this should already be flowing from the host:\nhttps://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/HostingServices.cs#L29\n. Can we rename callNext to next?\n. +1, it feels out of place especially since it seems more like data than a service.\n. This needs to be updated to match the other test projects.\n. We really support this? Interesting.\n. Should this be here? Seems like this is specific to the type of ActionDescriptor being used.\n. File bug\n. Intentional\n. Yes it'll be in the interfaces assembly, and no it doesn't need to be internal.\n. It's not wrong that it's public. It's not part of the contract of this project nor will it be exported from this project. It's magical\n. There is. \n. Make this NotNull\n. Isn't this always null?\n. Can't you just set this to null?\n. Yes don't seal anything\n. Use optional parameter syntax when passing null. \n. Assert.Equal(\"property\", ViewData[\"Another\"])\n. So this means you want to keep the view data dictionary but change viewdata.model?\n. Rename to ViewDataDictionary?\n. Why do this lazily?\n. Why is FindView even async. This should be synchronous.\n. None of that should be async, it's all cpu bound. That can come in a later commit though\n. Exactly, thats why the hosting library should be reused.\n. Ignoring the important part of this PR. This should be using the ITypeActivator no?\n. RouteImpl :trollface: \n. What is an IActionHttpMethodProvider?\n. goto\n. These tests don't work. This project didn't even compile when I tried\n. So many nulls, so little named parameters.\n. Why is this property called Url\n. Why isn't this IDictionary<string, object>? @Eilon \n. Yes it can.\n. These tests should probably all be async (cc @Eilon)\n. Having to cast this thing still sucks\n. What do you mean? If you mean so you can write a test that uses the sample, that's not a real scenario. You can already replace services so I think this change is more about testing the sample than anything else.\n. _applicationServiceProvider\n. Could you update your tooling?\n. next?\n. Is this to avoid nested generics?\n. Well it would be Func<Task<ActionExecutedContext>>\n. This was decided on. Use came up but we felt it was too close to other middleware (UseSignalR for e.g.). It's also in line with the other methods on ServiceCollection (Add*)\n. Possibly. \n. As long as we have great error messages/defaults that makes sense.\n. Why isn't this just a service?\n. authorizationService\n. rename all of these variables\n. Will nuke it\n. +1!!\n. I don't think this should be first class on the interface.\n. instead or as well as?\n. will do\n. I don't think so. This is a special case\n. Probably. {id?}\n. This part looks a little ghetto to me but I saw the other conversation so I'll drop it for now.\n. Yea the whole thing about modifying the filter list if the controller itself is a filter seems odd...\n. JIRA??\n. This entire abstraction needs to go away #242 \n. Why is this thing an interface?\n. This isn't right... Don't register closed generics for things that are already registered as an open generic.\n. Just use +\nrequest.PathBase + request.Path + request.QueryString\n. +1\n. You don't need any of these dependencies\n. Not required\n. This is wrong, and not required. Nothing is here is required actually.\n. Not needed\n. fomatting?\n. We could base it off the application name\n. That's not how its going to work but we should chat in person.\n. This is no longer needed\n. Why is this virtual?\n. AntiForgeryOptions\n. yah nuke this\n. This is the last change\n. Always assume something is specific until we have more than one consumer. When patterns emerge we can always change things. Leave it here for now.\n. pedantic: Lamda's are equivalent to the caching you do manually. Look at reflector at the generated code when you use the lambda. The compiler is smart enough to do exactly what you suggested.\n. This is just like a ServiceDescriptor, how is this a provider?\n. This looks weird and looks pretty similar to IModelBindersProvider. Why do we need both?\n. Yes\n. Use Task.FromResult\n. Isn't this the same as Encoding.UTF8\n. Yah\n. Take a look at model binders. The idea to allow passing an instance or to allow passing in a type in case you want to be activated by the di system. \n. What;s up with the solution file changes? I think you messed something up here. \n. Except it's not IAppBuilder.UseServices\n. Nah this is pretty awful. I'll fix the configuration bug :smile: \n. This might not be set. The relative path is file.Path\n. /cc @GrabYourPitchforks @blowdart \n. Should we be using Crc32 here?\n. It's wrong in general though. You should never use the PhysicalPath to make decisions. It might be null. Why you need it anyways?\n. Don't use as just cast since you aren't checking for null.\n. +1\n. Huh?\n. I think @Tratcher 's approach works well.\n. I'm don't agree with this but lets take it offline. Throwing here makes no sense.\n. var\n. Why don't we throw until we support it? i.e. if (!Path.IsRooted(...)) throw\n. Then remove the check when it's resolved. Until then, throw.\n. @sornaks update your VS version\n. What is the null parameter? Also, use the named parameter syntax\n. This might be too high /cc @lodejard \n. public? I guess we're going to add other stuff here?\n. This line is too long \n. Needs moar string.equals\n. This doesn't look right. What services are being added that require fallback? Seems like we just need to delegate to the fallback when we can't find a service in our own container. \n. Neither should be in the container. The IFileSystem is a worker object that can be rooted at different places. It should be part of the razor options\n. We need to avoid these for now if you care about building on mono\n. Why Runtime? Why not just ICompilationException?\nThis might be interesting for the runtime to use as well. Helios could take advantage of this for application compilation errors as well.\n. It would be great if we could use it for both. Even though they are both runtime compilation errors, I dunno if that name is required.\n. Nuke this\n. What changed here?\n. Some of these extension methods look like they would be useful outside of MVC. Maybe a candidate for M.A.Http.Extensions? /cc @Tratcher  @lodejard \n. Not sure about the namespace either. Maybe we can go Microsoft.Framework here.\n. Set instead of Add\n. Set here too\n. Here too\n. That's an ugly API\n. Why is it so ugly?\n. Why?\n. Should this be in WebUtilities? /cc @GrabYourPitchforks @Tratcher \n. Make sure it works with read only files \n. left over from Debugger.Launch\n. You don't actually need this services to do precompilation. \n. I filed a bug for this. The RazorPreCompiler not use ISP in the ctor.\n. This is a pretty weird test. \n. Yes it'll happen\n. Why do you have to call GetRequiredService? https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs should take in the dependencies it needs to new up the razor view engine right?\n. Count > 0\n. That's what you're worried about? MVC doesn't even work right now :stuck_out_tongue_closed_eyes:\n. It's not inherently broken. It's because it's marked as a build time dependency so nothing will catch this until you build the package.\n. On top of that you guys have inconsistent spacing in your project.json files.\n. It only does that for the top level. If you did a cache.Get within the tag helper, it would automagically pick up the link.\n. descriptor, that's fine right. It's a common convention to use a single letter for linq queries like this.\n. public?\n. Why dynamic? Did you compare the before and after performance impact of this change?\n. Why does it derive from FileResult?\n. Why are we newing this up everywhere? Don't we get it from DI?\n. IRequiresTempData\n. Yes this is wrong. Shared sources should never have dependencies.\n. Should this move to common?\n. Do you need this?\n. Would a better name by FileProviderResult?\n. I'm also assuming that if this were a struct you'd lose all the benefits because all of the places that call through are expecting IList right?\n. This is broken. Can't return directly if a using is there.\n. This is broken. Can't return directly if a using is there.\n. This is broken. Can't return directly if a using is there.\n. This is broken. Can't return directly if a using is there.\n. Too complicated. Just do Task.FromResult(0)\n. We also don't s_\n. hash code combiner?\n. readonly\n. nuke\n. viewEgineType -> viewEngineType\n. C#\nfor (int i = Count - 1; i >= 0; i--)\n{\n    var formatter = this[i];\n    if(formatter is T)\n    {\n        Remove(formatter);\n    }\n}\n. Yar\n. I'm +1 for the type. It make sense if this is the common use case.\n. cached task?\n. Add a comment so this doesn't regress \n. :smile: \n. Make sure you can pass null here\n. DiagnosticSource?.IsEnabled(EndContextEvent) == true\n. Remove the ?. CreateLogger should never return null.\n. flowed* /cc @JunTaoLuo \n. Debug log level is going away.https://github.com/aspnet/Logging/issues/299\n. Can IHostingEnvironment really be null?\n. That makes no sense. This is the RazorViewEngine, not the Razor parser.\n. Is it really a factory if it's get not create? \n. User code can add it if needed \n. Why?\n. Why does this need to be extracted? All we need to do is add the hook and call it. This logic doesn't need to be moved into another class.\n. Defines and language version, it's no different to what you have access to today\n. sorta, with renames\n. Don't see why that matters? What if they do? This basically exposes everything that we use as part of the compilation process.\nWe at least have a single test that uses it :smile: \n. Eventually\n. Because it can be null.\n. Do you need to reset the hostingEnvironment still? Doesn't it rebase itself on the new app base?\n. nit: UseStartup<TStartup>()? \n. Why?\n. This is a weird thing to expose\n. Internal namespace?\n. Not good enough, needs the time taken to compile.\n. ?\n. nit: this.?\n. What :smile: \n. :smile: \n. change the variable name to be less about dotnet and more about compilation services missing. \n. Meh, it's a change anyways and @pakrym loves inheritance :smile: \n. Doesn't this need to be in the finally?\n. Yar\n. stylecop 13040: Move these to the top of the file.\n. ? \n. Dead code?\n. Sort usings\n. Why not use the Task helper used elsewhere?\n. yea\n. Nit: sort using a properly \n. Only do this if ssl port is non null\n. It would be great to show sample input in comments\n. Yas\n. Dx?\n. what?\n. That change was reverted temporarily because @pranavkm ran into a bunch of issues.\n. Yeah this is pretty bad. We've recommended building a temporary container to resolve some dependencies but that's pretty bad as well.\n. string.join?\n. nit: variable name provider\n. Yea, feels like a case where we should compile another expression tree. We're pretty good at that now \ud83d\ude04 \n. Is it better to do GetOrAdd to avoid double hashing metadata.ElementType\n. This is still required\n. Can you file an issue to make sure we don't hold onto the dependency context forever?\n. Hmm, when is this ever null?\n. We should move this helper to common. Kestrel has the same thing\n. ?\n. Because we're trying to compile things \ud83d\ude04 \n. We could do a builder API\n. Why are we exposing this as a public API?\n. Show me a sample of that? Why wouldn't they just add a metadata reference?\n. yes please. don't bring it back \ud83d\ude04 \n. What's the lifetime of this object and when is this method called? Is it a singleton? and is the method called per request?\n. There's prior art so I'd say follow it.\n. That's correct, you have to await or bad things will happen\n. We could fix that by referencing the DiaSymReader but then it'll get deployed with every ASP.NET site\n. shouldn't this be IAuthorizationService?\n. Shouldn't this be a list of policies?\n. > Ah, that's an interesting question - now that the content result writing is all nice and shiny - is there a string output formatter that has the same technique in it?\nWe'd also want to do this with response.WriteAsync(...): https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNetCore.Http.Abstractions/Extensions/HttpResponseWritingExtensions.cs#L63\n. @kichalla add that comment in the codez\n. Use an object instead of a string here.\n. Rename to MiddlewareFilter\n. typeof(ResourceFilterContext)? is kinda gross (and public). Make it an interal object (unless we want people to muck with it.\n. Wut? Dependency injection all the things. Register these things in the container and just call GetService on it.\n. Use GetOrAdd though that has the same problems or being called multiple times. You could store:\nC#\nprivate readonly ConcurrentDictionary<Type, Lazy<RequestDelegate>> _pipelinesCache = new ConcurrentDictionary<Type, Lazy<RequestDelegate>>();\nAnd then change it to:\nC#\n_pipelinesCache.GetOrAdd(type, key => new Lazy<RequestDelegate>(() => BuildPipeline(key)));\nThat way the lazy may get created multiple times but when you'll run .Value on one of them.\n. why is this a property?\n. I hate that this feature exists in the first place. Lets not spread it further.\n. This needs to be \"1.1.0-*\". \n. File a bug\n. Is this the assembly qualified type name?\n. ? @NTaylorMullen @cjqian \n. type build?\n. You can avoid allocating an object here if you set the ResultExecutingContext as a property on the Filter and then passing this.\n. Are filters cached across requests?\n. Don't we this thing pooled? Why aren't we using it.\n. Can you humor me and take a profile of the allocations when this method is called? With and without the chunking.\n. Use var\n. Holy shit string allocations....\n. Maybe we need to expose an AddHostingServices()\n. Is Microsoft.CSharp not in the standard library?\n. hmm k\n. Make sure you account for it being null.\n. This should be PrivateAssets=\"all'. Yes. It'll make sure it doesn't end up in the dependencies of the packages produced. Hopefully we get this fixed https://github.com/NuGet/Home/issues/4125. Which means this will automatically happen for packages marked as dev dependencies.. Why not use the return value of TryGetValue?. nit: remove extra space. That's a troll API. Why do you store nulls? I'm probably missing something obvious.. Ah, I see this is just route data.. AlI see are allocations. LINQ. Why ToArray(). Ah, I thought this was the provider itself. This is the taghelper.. GetBuffer isn't right. That returns the entire underlying array even if it has more than what was written. You need to pass ToArray here.. This should just be forreal internal.. I love this pattern for decorators.. More pranav points for value?.GetType().FullName ?? \"null\". Ohhh this is super nice to see. Any way we could make these work in razor via a directive @rynowak @DamianEdwards ?. Hmmm, this is kinda ugly.. Yes!. ",
    "yishaigalatzer": "Fixed\n. Freezable controller list (at least by default) is an important stake in the ground we want to put in.\nScanning for assemblies in app domain (or generally getting a list of assemblies) can be pulled out as a separate source of input, that's not a bad idea.\nCaching is just an implementation detail of how GetControllers acts behind the scenes.\n. Pushed to dev. Thanks for all the good feedback\n. Pushed as squashed. Leaving open for more feedback\n. We need to figure out if we even call the thing MVC at the end of the day.\n. Yes that makes sense.\nLets make an overall engineering call on naming packages across K. This pattern is fine lets just make it consistent\n. We should consider changing the signature of CompilationResult if we potentially want to consume more than one type\n. Right now we plan not to do anything further in this area.\n. We had a chat to make these use the Options system.\n@pranavkm please look at the samples @harshgMSFT was doing for anti forgery options. Feel free to chat with @loudej or @davidfowl they have specific ideas as well\n. Breakout incoming formatters as we are executing this separately\n. I don't necessarily agree this needs to get done. The controller factory is a singleton and we pass it context. Perhaps just pass it the actioncontext like we flow everything else?\n. We are planning to do API reviews, so this bug is not relevant as we haven't decided if we care to change the pattern, and the effect of such a decision is much bigger than this issue.\n. This is add a method (or extension method) to ModelStateDictionary.\nNow model state will return a single generic error with default resourced message.\n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcServices.cs#L53 - Singleton\n. [Configuration] Some services carry configuration state, we need to look at the service signature and decide if it need to become singleton (and the user grabs it and modifies the state at startup), or we use the options and surface it as top level configuration.\n[Caching/Perf] Some services should/could cache their results allowing other services to be more effectively making decisions or be able to optimize. (ADP)\n[Perf] Currently, most Services are configured to have transient scope. We need to redesign and assign proper scoping for better performance.\nServices are defined in Microsoft.AspNet.Mvc.MvcServices\n. #517 (detail)\n572 (duplicate)\n. This will be part of general optimization.\n. @rynowak are you confident you are not missing commits here?\n. IVPF seems correct in ModelBinding, because one of the design goals was to make modelbinding independent from MVC.\nIt is weird though for RequestContext to live in model binding. Why can't it just live in routing?\n. Not by any means a high pri scenario. The initial discussion was to make model binding stand alone, and not have MVC dependencies in it. Either way Request context doesn't seem to belong here.\n. @rynowak There was chat around merging RequestContext with RouteContext. If you feel this is still relevant do them both (move to routing and merge) in one go.\n. @davidfowl who is working on flowing this up?\n. @halter73 I'm assuming this is the one I signed up to fixup?\nPushed the MVC specific fixes, now just need to flow host services.\n. :+1: ship it\n. That is the intent, MVC can only be used with Autofac at this point. This was discussed with @halter73 and @loudej with the intent that the core services are going to catch up shortly and this is a point in time thing.\nIf this assumption is wrong please holler\n. Can you please add a sample that proves this works to the MVC sample?\nRegarding the Write methods, please log an item on the backlog. I chatted with @davidfowl and we decided to not pursue this for Alpha, and we can look at it either post Alpha or if a strong customer demand/good scenario shows up.\n. :+1:  good to go\n. thanks\n. @halter73 we think this is an Autofac issue, can you please take a look\n. Can you please put the \"hack\" as a separate PR\n. Merged\n. This will come with the HTML Helpers work @dougbu is currently working on. This is not a bug\n. Fixed\n. :shipit: \n. No implemented yet, please don't open bugs for stuff that's not implemented yet. (Talk to your local friendly dev first :) )\n. :shipit: \n. Your comment on top mentions proof of concept with open edge cases. Either resolve the edge cases or change the comment\n. :shipit: \n. @davidfowl is this still relevant?\n. This PR merges a bunch of concepts & infrastructure pieces. It will be helpful if they came in actual small pieces 1 by 1\n. @rynowak - need to discuss this and at least get to a conclusion if we need to fix or not pre alpha\n. Fixed\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. Other than the error message comment (and other reviewers opinions)\n:shipit: \n. :shipit: just make sure we track the sync work\n. Add an item to Jira tracking ExpressionFingerprintChaing was pulled in. And that it should be considered pending PERF input.\n. :shipit: \n. other than the minor comments :shipit: \n. :shipit:\nUp to you if you make the ?? change.\nFile an issue for reviving the JsonSerializer and followup with a separate review\n. Probably not. @kulmugdha has a repro\n. This should actually work. I'm going to take a quick look\n. Seems that this has nothing to do with flags, or arrays. Binding enum by string value simply doesn't bind.\n`\n[Flags]\n    public enum HttpVerbs\n    {\n        None = 0,\n        Get = 1 << 1,\n        Post = 1 << 2,\n        Put = 1 << 3\n    }\n// Place the following method in a controller:\npublic string Config(HttpVerbs verbs)\n{\n    return verbs.ToString();\n}\n`\n@pranavkm FYI\n. apart from my minor comments (and others that commented) :shipit: \n. @pranavkm can we just follow up with IsSection defined after this PR, rather than tracking post Alpha \n. :shipit: \n. Other than my comment above (aka lets drive that decision and discussion tomorrow) :shipit: \n. :shipit: \n. Chatted with @davidfowl and it's sounds like a really good idea to break stuff apart. Lets get together tomorrow and make the change\n. other than the minor indent issues :shipit: \n. Fixed\n. @Praburaj this one is for your ask. Please verify\n. :shipit: \n. @davidfowl this is step one of relayering we discussed today. We are holding off a bit on merging rendering as there are a gazzilion PRs in flight. It should happen at the latest early next week.\n:shipit: \n. Merged\n. @pranavkm where does this stand?\n. We decided against taking this attribute for now.\n. @davidfowl you can plug an IActionResultFactory and wrap our default one.\n. The abstraction is not bad and serves a different purpose than a filter does.\notherwise you need to put a similar one at the end of the filter pipeline OR have a last resort filter.\n-----Original Message-----\nFrom: David Fowler\nSent: 4/30/2014 12:53 AM\nTo: aspnet/WebFx\nCc: Yishai Galatzer\nSubject: Re: [WebFx] Make Filters the end all be all extensibility point formodifying incoming/outgoing action execution (#242)\nYea, I think the IActionResultFactory (yes I know I added it in the initial prototype ) is a shitty service that needs to be removed. We have result filters for this exact reason. This also lets you get back at the original result if nobody modified it. \nOne abstraction, one way to modify the result of an action, One Microsoft \n\u2014\nReply to this email directly or view it on GitHub.\n. @davidfowl suggests that we keep the conversion but remove the extension point. The action invoker will convert results that are none action results to a new class called ObjectContentResult that will expose the original raw result.\n@sornaks this will follow the pattern in ViewComponent where conversion is done with the CoerceToViewComponentResult private static method (except a lot simpler :) )\n@davidfowl if you envision changes to ViewComponents as well, lets do them in this go\n. @rynowak don't see your point. This issue is about removing the customization capability and converting raw non action results to a result, and the suggestion is to follow the pattern in ViewComponents where we have a static method to do the conversion rather than a service. Am I missing something?\n. @pranavkm  what's the state of this bug?\n. :shipit: \n. @pranavkm let's address this soon\n. @Praburaj what is ManageMessageId (I assume it's enum)\n. Fixed by Pranav's changes to support enum flags\n. We reviewed this again today, and don't think there is anything to do here. If there is anything specific we want to address we should open a more focused bug.\n. @davidfowl is this done?\n. Seems arbitrary, we didn't have this in MVC, and haven't seen a single user feedback on this. So why?\n. Yeah, my bad. I tried @User and for some reason intellisense didn't kick in :( Just tried again and it definitely is first class. I take it back.\n. Make the properties match what the MVC page had. Open followup bugs to things that are not easy to add at this point. Send out a list for discussion first.\n. :shipit: better late than never\n. We didn't discuss the IAllowAnonymous marker is an abomination or not. But we did discuss the ability to apply AllowAnonymous per controller and override the AllowAnonymous attribute per action and concluded it's not a scenario.\nAlso in the spirit of the last few discussions, this is identical to what MVC does today.\n. We are on it this sprint.\n-----Original Message-----\nFrom: David Fowler\nSent: 4/24/2014 9:46 PM\nTo: aspnet/WebFx\nCc: Yishai Galatzer\nSubject: Re: [WebFx] Should we bring back ActionResult? (#284)\n@yishaigalatzer can we get somebody on this?\n\u2014\nReply to this email directly or view it on GitHub.\n. For compat though we need to also change the controller built in View methods, and the actionresulthelper\n. Current controller code\nc#\n        public IActionResult View()\n        {\n            return View(view: null);\n        }\nSo the user code still looks like\nc#\n    public IActionResult Method()\nrather than\nc#\n    public ActionResult Method()\n. Merged #318 \n. @suhasj @Praburaj this is now resolved, please verify and close\n. #147 \n. How about tests?\n. @sornaks I'd like to see your PRs fully up to date and all comments addressed by Monday.\n. other than the nit comments :shipit: \n. @Praburaj this should work now\n. Verify with @GrabYourPitchforks that the coverage is reasonable and there are no missing tests\n. After addressing the comments :shipit: pending a :ship: from @rynowak \n. Please work with @loudej as there is new Options support coming in\n. @Praburaj I don't think there is an issue anymore, can we take a look.\n@Eilon / @davidfowl - Is there anything special here or just if it works on coreclr we are good?\n. @Praburaj can you look at this again?\n. :shipit:\n. :shipit: \n. @pranavkm Please be specific, we don't quite understand what this bug is, what is blocks or what is the scenarios it enables\n. #336 \n. @Praburaj now fixed.\n. No further discussion was made. We need to reach a design and execute for rc\n. Related to #1097 \n. :shipit: \n. :shipit:\n. @rynowak is this done?\n. @rynowak - Any more thoughts after implementing IFilterFactory.\nThis hinges on adding Initialize pattern to filters (yuck) or property injection.\n. You get services from HttpContext\n. Chatted with @davidfowl - Will show a design (either fleshing more things in the helper, or getting rid of it).\nThe meta question is what is the purpose of the POCO controller\n1. Should it be easy to return views/json etc. Should we \n2. Should it be easy to return objects (like the previous try of int => status code, string => text content, Other objects => Json/Conneg, IActionResult ...\n3. Should is be easy to build another base controller without deriving from Controller\n. @davidfowl @loudej this is what we discussed this morning\n. Moving out beyond RTM, we will bring back based on user feedback. Seems lower priority for now,\n. @pranavkm  can you be more specific to what types are missing?\n. In the works \n. Add a test (it's ok if you add it in your next PR, just open a bug to track that the test is missing).\n:shipit:\n. This issue is to add more tests on top of what was in the #319 PR\n. Merged and resolved #289 \n. @loudej @NTaylorMullen @pranavkm please take a look.\n@loudej - Should we enable specifying the encoding by the user?\n. #286 \n. Merged - This fixes #286 \n. @loudej @rynowak @Eilon \n. Merged and resolved #300 \n. Assigned to Ryan, we are going to split this into two separate issues\n1. What @Eilon says - We should prioritize constrained actions over non constrained. This was missed as a requirement when @harshgMSFT added constraints (Good catch @Praburaj)\n2. Overload resolution should have been smarter and figured out that there is a more specific action. This one needs more discussion, as i'm sure we are going to have several opinions on this matter. @rynowak is going to open a bug with more details for discussion.\n. Can you try again with latest bits?\n-----Original Message-----\nFrom: Praburaj\nSent: 5/9/2014 8:59 PM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] [MusicStore]: Action selector to chose the best match whenchosing actions (#339)\nThis fix seems to have regressed some other scenarios. Open MusicStore and click Login button to see a 404. \nFor example:\n        //\n        // GET: /Account/Login\n        [AllowAnonymous]\n        //Bug: https://github.com/aspnet/WebFx/issues/339\n        [HttpGet]\n        public IActionResult Login(string returnUrl)\n        {\n            ViewBag.ReturnUrl = returnUrl;\n            return View();\n        }\n```\n    //\n    // POST: /Account/Login\n    [HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public async Task Login(LoginViewModel model, string returnUrl)\n    {\n        if (ModelState.IsValid)\n        {\n            var signInStatus = await SignInManager.PasswordSignInAsync(model.UserName, model.Password, model.RememberMe, shouldLockout: false);\n            switch (signInStatus)\n            {\n                case SignInStatus.Success:\n                    return RedirectToLocal(returnUrl);\n                case SignInStatus.LockedOut:\n                    ModelState.AddModelError(\"\", \"User is locked out, try again later.\");\n                    return View(model);\n                case SignInStatus.Failure:\n                default:\n                    ModelState.AddModelError(\"\", \"Invalid username or password.\");\n                    return View(model);\n            }\n        }\n    // If we got this far, something failed, redisplay form\n    return View(model);\n}\n\n```\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks will take a look today \n-----Original Message-----\nFrom: victorhurdugaci\nSent: 5/10/2014 11:35 AM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] [MusicStore]: Action selector to chose the best match whenchosing actions (#339)\nI can repro with the latest bits. I get a 404 when clicking the Login button\n\u2014\nReply to this email directly or view it on GitHub.\n. Got a fix. But for now if you want optional parameters like \nc#\nActionResult Login(string redirectUrl)\nyou will have to make it \nc#\nActionResult Login(string redirectUrl = null)\n. @Praburaj / @victorhurdugaci / @suhasj  note that I did not make the changes on Music Store, I verified them locally with the MVC sample. I'm leaving it up to you to make the change to the Music Store, I'll be around if you need my help. \n. This is it for alpha\n-----Original Message-----\nFrom: Suhas Joshi\nSent: 5/10/2014 11:52 PM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] [MusicStore]: Action selector to chose the best match whenchosing actions (#339)\nVerified that this works. Need to add null to the Login POST method well. I can send out a PR\n@yishaigalatzer : is this a temporary fix ? if yes then when might we see the permanent one ?\n\u2014\nReply to this email directly or view it on GitHub.\n. :shipit: \n. We will need to discuss null values on public APIs as a followup @davidfowl \n. was that it? :shipit: \n. @rynowak - More details please, this is currently actionable by you alone\n. :shipit: \n. @dougbu - Here is the first replacement for enum support for this sprint\n. We decided to throw and not autofix\n-----Original Message-----\nFrom: Ryan Nowak\nSent: 4/30/2014 11:34 AM\nTo: aspnet/WebFx\nCc: Yishai Galatzer\nSubject: Re: [WebFx] Throw a better exception when the user didn't add the MVCservices (#347)\n@davidfowl Had an earlier suggestion to auto-fix this problem for the user rather than throwing here. #128 #Demoware\n\u2014\nReply to this email directly or view it on GitHub.\n. Same as #543\n. :shipit: \n. Where are the tests?\n. @sornaks what is webfx-170? Please add links to the issue you refer to. But regardless please include tests in PRs, unless there are very good reasons (like you have second PR in flight with tests, and this PR is only to demonstrate shape of an API)\n. :shipit: \n. @HaoK Where is this PR standing?\n. Use in a sample\n. Putting on the back burner till post Alpha\n. Other than outstanding comments :shipit: \n. Can we add IOrderedFilter support? We don't have to add the implementation ourselves\n. other than the nit comment :shipit: \n. Other than fixing the sample :shipit: \n. :shipit: \n. Yup, it has to do with using Declared methods. Once we fix this issue, the public methods from the base controller type are going to start getting exposed. So we should make sure they get blocked and write a test to verify that the default action descriptor provider doesn't pick them up.\n. #301 \n. Timing, this was in PR long before we agreed on #242. PRs where blocked from merging because of Alpha.\n. @puncsky please hold off on submitting this.\n. Other than the minor comments :shipit: \n. :shipit: \n. :shipit: \n. Add tests, there is no rush here\n. :shipit: \n. Consistent exceptions \n-----Original Message-----\nFrom: David Fowler\nSent: 5/8/2014 7:39 PM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] Made virtual empty task returning methods async. (#412)\nWhat's the reason for fixing this in the first place?\n\u2014\nReply to this email directly or view it on GitHub.\n. @davidfowl and I had a <3 to <3. We want to take this to the engineering team and come up with a common practice. This pattern (async wrapping sync) repeats in many places.\n@Eilon lets discuss in our next meeting.\n. This is going to become an inline constraint, so not pushing. Harsh will take it from here\n. Hmm. Based on eilons email. Hold off\n-----Original Message-----\nFrom: Jane Zhou (MS)\nSent: 5/15/2014 4:17 PM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] Adjust context property on RazorView. (#414)\nWe snapped alpha already. Yeah, feel free to get this in.\n\u2014\nReply to this email directly or view it on GitHub.\n. That's exactly it. No reason to rush it\n-----Original Message-----\nFrom: Louis DeJardin\nSent: 5/15/2014 5:25 PM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] Adjust context property on RazorView. (#414)\nother than that \n\u2014\nReply to this email directly or view it on GitHub.\n. :shipit: \n. :shipit: \n. Whaat?\n. @KKhurin I'm assuming you didn't actually hit any real issue here. So I'm moving post RTM where we can try and take a second look.\n. The idea is to complete porting over the HtmlHelper tests and see if we come up with any new bugs. The code doesn't have to be comitted into the Beta3 branch but the work has to happen before we are shipping Beta3 to find any issues we might have missed.\n. Need more discussion around is this supposed to return 406 or 415. \n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Formatters/TempInputFormatterProvider.cs#L34\n. We are sticking with ActionContext because it is generic and useful.\n. @NTaylorMullen this belongs in the Razor repo\n. Duplicate of #1550 that has more data\n. Hey @filipw  this is currently not planned for RTM (you can see from the backlog milestone).\nYou can achieve this currently by using an ActionDescriptorProvider that will remove the filter from the action descriptor and introspect properties on the ActionDescriptor (or attributes on the methodinfo). It's a pretty big hammer, but it can definitely work and it's not too complicated to write.\n. The code looks reasonable but I have a few issues with it. First some code comments\nCode feedback\n\nYou don't need to remove the override filter when you are done, you can just leave it there. Its harmless\nYou need to inspect for factory filters (namely TypeFilter or ServiceFilter) if you care.\nThe loop can go over context.Results.Where() directly (so no var and if)\nYou need an inner loop for all instances of overrides.\n\nThe limitations of this approach\n\nThis will remove defined filters, but removing by type is hard (or not 100% guaranteed) for factory filters for example.\nRemove by Type was something I never liked, it is not specific enough and quite limiting. By the way MVC 6 doesn't take the approach of Web API where only one type of filter per action will run.\nFilters can be created by FilterProvider (though none are today), these don't show up on the list of filters on the action descriptor.\n\nAlternative\nI looked at the MVC code again, and I think there is another approach for this. You can write a FilterProvider. FilterProviders run at execution time, and can remove the filters materialized from metadata, so it will work for factory filters or filters coming from the provider. Since the provider is a nested model, you can easily interact with other providers if someone else adds them (just like ActionDescriptorProvider).\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Filters/FilterProviderContext.cs\nhttps://github.com/aspnet/Mvc/blob/12c2759cec61674eb00f60a66a4df73b1af0e309/src/Microsoft.AspNet.Mvc.Core/Filters/DefaultFilterProvider.cs\nhttps://github.com/aspnet/Mvc/blob/db0841d00d312d8e525aad6a980e2732881421fe/src/Microsoft.AspNet.Mvc/MvcServices.cs#L77\n. I thought about it, and i wouldn't worry about running it again and again without any form of measurements proving its an issue. My wild guess here is that you wouldn't see it show up in your profile\n. Awesome blog: One comment though, don't derive from the base type. It might do more than you bargained for. If you do, do not call base.\nIt's better to just go with the interface it is super simple. And you get to explain the next() call \ud83d\ude0a \n-----Original Message-----\nFrom: \"Filip W\" notifications@github.com\nSent: \u200e2/\u200e12/\u200e2015 3:07 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Filter overrides (#474)\nthanks - it really helped. I have published a blog post summarizing this discussion\n\u2014\nReply to this email directly or view it on GitHub.\n. Probably because you didn't call next\n-----Original Message-----\nFrom: \"Filip W\" notifications@github.com\nSent: \u200e2/\u200e13/\u200e2015 4:44 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Filter overrides (#474)\nI'm not sure what is the use case for IFilterContainer (doesn't seem to be used anywhere at the moment), but if I don't call the base, the reconciliation between IFilterContainer as created by the filter factory and the filter metadata will never happen - and if there ever is an IFilterContainer in the list, it simply didn't seem right; that was really the only reason.\n\u2014\nReply to this email directly or view it on GitHub.\n. There is nothing to do here.\nThe general Error handling will come from middleware, as a note we have modified the filter pipeline it currently looks like this:\n\n. Yeah - this is all covered by logging, there is nothing else to do here.\n. Nothing to do here, this is tracked by a large set of logging issues.\n. Cors support is going to mostly happen in middleware. This is to track the MVC portion of the work.\n. Followup and related to #499\n. https://aspnetwebstack.codeplex.com/workitem/2045 - Is an ask to have a reasonable sort order..\n. We decided not to implement a Help Page for MVC vNext and instead provide 3rd parties with proper metadata through an improved Api Explorer replacement.\n. Implemented already - Areas are supported :)\n. Consider the scenario in this bug - https://aspnetwebstack.codeplex.com/workitem/2008 filenamestar is being set and not just filename, and the providerhelper misinterprets the data.\n. #458\n. Depends on aspnet/HttpAbstractions#68\n. Another thing to consider here, we consistently see folks struggling to understand the content negotiation process and why a certain format was chosen. This feature should probably take a cue from  route debugging and enable some sort of tracing, understanding without having to debug through the MVC source code\n. Suggested breakdown: HttpAbstractions temporary parser (PR out), Output formatter interface, MVC Options, ProducesContentAttribute, Filter assigning formatters as a sample, Automatic basic negotiation when no attributes are set, object result update.\n. @harshgMSFT please close this item and open followup items as necessary (if not already opened).\nitem number 1, can go away.\n. Done\n. Remove the .sln change and :shipit: \n. Any reason to not just go for the permanent fix?\n. The point here is to make folks that port an MVC app to have a really easy life. Code should compile with minimal changes\n. We want to have NotFound() method on controller, we don't necessarily need a notfound result\n. We currently have no support for providing reason phrase. We can follow up on this in a different issue, but currently there is no plan to add it.\n. :shipit: \n. :shipit: \n. @kirthik can you please validate for bug tracker and music store?\n. We don't plan to support [DisplayName] use [Display] instead as it is cross platform.\n. This is currently a need design item. More for tracking a replacement for the old https://aspnetwebstack.codeplex.com/workitem/608 and combine it with the MVC behavior.\nThat really means we haven't spent much time thinking about it yet. So if you have specific ideas for HTTP caching, it's a good place to add them. We are probably going to break this item down to more fine grained items.\n. Duplicate of #596 that is a more specific \n. This is already supported - \nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/BinderMetadata/ModelBinderAttribute.cs#L78\nCC / @harshgMSFT @pranavkm please re-open if this is wrong\n. @dougbu please followup on the design decision here. If we think it's appropriate then work with @JesperTreetop to follow the guidelines in https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md#contributing-code-and-content so we can consider taking it.\n. Test?\n. Need to add an integration test to verify the default value is actually used.\n. What is the bug tracking this change? And why are we doing it? Is it necessary for a sample running on IIS?\n. Fix the minor comments (styling related), then :shipit: \nAddress the other comments in another iteration\n. The work suggested here is:\n1. Build an action filter inside the framework\n2. Templates will hook up the filter by default\n. I think the suggestion was to provide such a filter, not to turn it on.\nSound like a simple sample though. So not sure why it will go in the framework \n-----Original Message-----\nFrom: Eilon Lipton\nSent: 5/24/2014 10:16 AM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] Global switch to by default return a 400 Bad Request whenmodel state is invalid (#550)\nThat doesn't sound like a good idea to me. The whole idea is that your action method is supposed to check for ModelState.IsValid. With this filter in all projects, no controller action would ever see invalid model state. None of our scaffolded code would work, and this would be super undiscoverable to users.\nI'd rather do nothing at all here.\n\u2014\nReply to this email directly or view it on GitHub.\n. We looked at this again, and believe that a filter will work for only very rudimentary cases.\nThe user is of course free to build such a filter if his scenarios are simple enough.\nThe issue here is that automatically returning a result is going to break MVC scenarios, where in a form post we just want to show the view again with the errors in place.\n. @kichalla for the sake of clearly reviewing and deciding on this, can you provide more input on what you'd expect to see as the output?\n. @pranavkm Why is json.NET writing out the ints rather than the string here?\n. Moving to backlog, we will reconsider if we get strong user feedback.\nThe proposed work for this can be one of a few things\n1. A simple extension method to turn model state into a list of errors that can then be simply serialized.\n2. A spec'd wire format with client side components that help binding to client UI.\n. @pranavkm please verify if this is ours or should move to another repo\n. @Eilon that's a good point. But we can just mark these as [NonAction].\nWe should just get on our cleanup broom.\n. Sounds like a nice enhancement. \nNot sure about it's priority though, and it poses a bunch of problems with traditional routing (like defining constraints and defaults are usually by key).\nCome back with an alternate suggestion\n. @kichalla that should like a different issue to me :) Do we have it already?\n. Bug was already rejected\n-----Original Message-----\nFrom: Eilon Lipton\nSent: 5/24/2014 10:18 AM\nTo: aspnet/Mvc\nCc: Yishai Galatzer\nSubject: Re: [Mvc] Consider supporting positional binding of route parameters(#559)\nPositional sounds like a recipe for disaster. The order of named parameters on a method should never matter.\n\u2014\nReply to this email directly or view it on GitHub.\n. @Eilon and I discussed this morning. There is tension between the helper and the return types. Need to chat with @davidfowl and @rynowak and get to a conclusion\n. :shipit: but note that this need to be quickly followed up with #598 \n. :shipit: \n. @dougbu please investigate, and chat with @Eilon once you nail down the repro, to see if this is the same issue he refers to above.\n. This is relevant for all routes, not just rest routes.\n. Thanks @jgauffin\n. @dougbu please review with @GrabYourPitchforks when you are ready to PR\n. @rynowak / @puncsky  please provide specific examples to what this is supposed to look like. At this point this is very vague and cannot be triaged.\n. @rynowak can you specify what exactly needs to change, so we can reassign to be executed on.\n. @dougbu can you please take a look at this PR\n. @mojtabakaviani can you please explain why you need this. Minification is useful to save bandwidth when you write long and large javascript files. This is not very common (and not recommended) practice to write them inline.\n. You can change the base page, and add the feature there.\nWe are planning to create taghelpers where you might be able to provide a built in script minifier tag helper.\nWe welcome you to provide such a helper (once they are out). Typically we suggest that folks build nuget package and get some use in the wild. Then later this might be a good thing for  PR.\n. We should look at this after finishing action selection & attribute routing\n. Duplicate of #55 \n. We do plan for this to evolve into conneg\n. Other than the \"as\" comment :shipit:\nPlease follow up with the test to verify execution order in action results, and open an issue to track it\n. :shipit:\nAdd another test (or modify one of these) to test that we don't produce the BOM on Json result and view result. We only need to do it once.\n. @DamianEdwards can you help drive the design for this?\n. @rynowak @pranavkm where does this stand?\n. The intent was to keep top level object null if there is nothing providing data in it.\nIs this the behavior after this fix?\n. @troydai, Does this repro with the normal json result?\n. This repros with the normal json result\n. We will handle this, when we implement Web API shim. Some of the features here where added because we want to support porting (verbatim) both frameworks with one model.\n. :shipit: \n. This is already supported. Use the action descriptor provider and do your filtering. This does not justify a top level concept in the framework, mostly because it is not a framework top level concept.\nThe framework is action based and you can have multiple controllers with the same name.\n. :shipit: see comments on the other PRs to add doc comments\n. :shipit: \n. Looks good to me, :shipit: but follow up with commonizing the instance of UTF8 without BOM in MVC. \n. @pranavkm - More context on the bug please\n. @pranavkm @kichalla Please provide comparisons to Web API V2 and MVC V5\n. Get it from CultureInfo.CurrentCulture\n. @pranavkm I've seen the extra commit you IM'd me, but the PR still seems to have encoding helper. So please fix that and the kproj file and :shipit: \n. Blocked on making the tests run on mono, we want to call it fixed, when we can actually test it in the CI. @pranavkm I'm ok with a code fix, and to keep this or a followup item open until we get testing\n. other than the minor comments :shipit: \n. :shipit: \n. :shipit: \n. Investigate, compare MVC & Web API, and come up with a recommednation\n. What about tests?\n. @rynowak @pranavkm - Please don't shipit for PRs without completion of test coverage for new features or updated features (P0), and preferrably existing features (P1 or at least a follow up bug detailing missing tests)\n. :shipit: \n. Followup with a PR for doc comments, you can combine all the current set of PRs together with one new PR just for the doc comments \n. This all looks fine to me, but I do have one thing to discuss.\nIn previous frameworks (both WebAPI and MVC) the object that floats around is RequestContext and not RouteContext, it looks like a natural choice to stick with RequestContext.\nIf you think otherwise lets have a quick discussion about it.\n. @rynowak and I has the discussion I'm ok with RouteContext.\n:shipit: \n. 1. Make sure we don't get rid of the overload that takes in a view engine, because that's a way to customize the view result.\n2. We should discuss this, as this is an anti pattern to DI and should only be used in specific cases (like when we want to be lazy). Speaking of lazy there is a very similar pattern in view components, where we take the full set of services (including view engine) where we are many times not going to use it.\n. @rynowak I see your point. Lets get together with @loudej and discuss the design alternatives.\n. @rynowak lets do it, touch base with @loudej but this keeps coming up.\n. @loudej @davidfowl @danroth27 - I think we should kill this one. Please reopen if you think otherwise\n. This change is out for feedback, but mostly intended to gauge actual perf impact.\n. Pushed https://github.com/aspnet/Mvc/commit/6d78f8adb30c50db7c28867f2507a4b15f504494\n. Note that converting a simple string to a format (Json) is (the Web API behavior) and is also weird and unexpected. As typically serializers take key value pairs or collections. A simple string doesn't have a key, and you end up with a manufactured arbitrary key.\nNote that a string is always going to get serialized when your return type is string or object, which are really not very common cases. And if I asked what is the expected serialized Json from that, I don't expect consistent answers anyways.\n. We discussed this and believe the behavior is correct. With the new design for content negotiation, you can just apply a global filter and replace ContentResult with content of type string with another class (or completely different action result).\n. We think the textplain formatter provides a very neat way to escape this default behavior if you dislike it. It also makes stuff a lot more customizable (see the followup where we will add stringwriter / stringbuilder support\n. Let's leave it at that, we can reconsider based on customer feedback.\nYou can just async call any piece of random code to achieve the same effect.\n. @HaoK @blowdart is this a thing with the new design?\n. Fix the test the to do the right thing like @rynowak says, so we don't have a timebomb. Then :shipit: \n. @rynowak an area can have a value and match, but the application might not have any areas in it. This enables putting default routes that only become active if the app uses these specific constraints. Now we can just include areas support in the template.\n. @harshgMSFT add it to the sample, and add a functional test that has no areas where a potential url will match the route and select the wrong action without this feature\n. Route table that will fail without this constraint:\n``` c#\n    routes.MapRoute(\n                  \"areaRoute\",\n                  \"{area}/{controller}/{action}\",\n                  new { controller = \"Home\", action = \"Index\" });\nroutes.MapRoute(\n            \"controllerActionRoute\",\n            \"{controller}/{action}\",\n            new { controller = \"Home\", action = \"Index\" });\n\n```\nHave two controllers in the app:\n``` c#\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            ...\n        }\n    }\npublic class UsersController : Controller\n{\n    public IActionResult Index()\n    {\n        ...\n    }\n}\n\n```\nAnd hit the following url - /Users. The first route will match, and you will go to Home/Index instead of the expected /Users/Index.\n@rynowak - This is a good example for route debugging to see if you can easily figure it out.\n. Add a test for a subarea scenario (where the user manually created an area like attribute).\n. :shipit: after logging all the issues for followup (and put them in the current sprint as the next thing to work on)\n. :shipit:\n. Please drive the discussion. I'd like to reach a consensus on the design and either keep what we have or remove the one place in the code that does it today.\n. Remove the current code, it's not adding a lot of value. When we need to throw specific exception we might create a custom exception type instead. But that will happen very sparingly, e.g. AmbiguousActionException\n. This doesn't look like it has to do with our code, diagnostics pre-generate the .cs files before compiling.\nSee: https://github.com/aspnet/Diagnostics/blob/dev/src/Microsoft.AspNet.Diagnostics/Views/ErrorPage.cs\n. It's the odata delta but the json.net implementation can be found in aspnet.codeplex.com in the webapi samples.\nNothing is set in stone, we haven't started looking into the new design at all\n-----Original Message-----\nFrom: \"Andrey Shchekin\" notifications@github.com\nSent: \u200e1/\u200e29/\u200e2015 6:13 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Support patch / Delta in MVC (#650)\n@yishaigalatzer which Delta?\nI've just googled and read http://www.strathweb.com/2013/01/easy-asp-net-web-api-resource-updates-with-delta/. It seems I did a very similar thing independently. However I think I used a different approach (haven't looked at OData code in detail yet).\nFor JSON.NET, I mostly delegate JsonContract of Patch to JsonContract of T so that logic is similar to deserializing original object (all property types should be handled as they would normally be handled by JSON.NET). However I replace the property setter with my own property setter, which records an attempt to set the property instead of actually setting it.\nHere is my current design in full:\nhttps://gist.github.com/ashmind/20b234e2fd69db542beb\nNote that it is very raw at the moment and can have bugs, but it works for me in main scenarios (including Guids as JSON.NET is able to rely on original object property types).\nThat wouldn't work with default XmlSerializer -- but that serializer is terrible anyway, so I am using NFormats.Xml which is easier to extend (I haven't added patch support it yet though).\n\u2014\nReply to this email directly or view it on GitHub.=\n. @ashmind just took a quick look at NFormatters.xml, the project seems abandoned :(\n. @sergkr thanks for the feedback. We will take a look before proceeding with this.\n. @sergkr while we try to make up our mind, I would be glad to assist in porting the existing libraries (particularly I noticed you contribute to myquay/jsonPatch) to MVC 6. Though they do seem pretty straightforward. It will make it a lot easier to consider as a PR as well as it matures.\nNote I'm not making any promises about taking it in or not, will need to discuss with the rest of the team first.\n. From the looks of it, you will have to create an InputFormatter and OutputFormatter, the rest doesn't seem to require changes. You can look at StringOutputFormatter or StreamOutputFormatter as an example for a greedy formatter. There is no sample for an input counterpart, but its rather simple.\nUnless I'm missing something I also noticed that the implementation there doesn't go and create items at arbitrary index (which is a good thing). I would suggest to open a follow up bug for json patch as a separate issue.\nAlso opened a separate issue to track this suggestion: #1976 \n. Not sure what is webapi odata vnext? None of the work on that has started yet. And  'delta' was always an odata feature.\n. There is no such notion in the pipeline and I doubt there will ever be one. On the odata port, I think a straight port is an interesting exercise. I was hoping moving data to mvc6 would not be a straight port but a point in time to rethink the architecture and morph the design with a longer term viability in mind.\nDelta can be placed in a 3rd package that is separate than mvc and odata (like it should have been from day 1). Many people are reluctant to depend on it because its odata specific.\n. I would advice reading through the contribution guide. It's pretty neat that you are taking initiative and it might even be in the right direction, but I wouldn't like you to be disappointed if the guidance will be totally different once we get to a point where we actually sit down and start investing in odata. And that you realize that this work is a prototype and can be scrapped at any point and that ultimately the team is responsible to come up with the guidance and basic design.\n'Ipatch' of entity imho ends up being nothing more than having an apply method. And each patch mechanism will have his own error handling exceptions being thrown, etc. So I'm very hesitant to agree with this suggestion. It's better to avoid unnecessary abstractions, that can always be added later when a read need arise. I can't think of a strong need at the moment.\n. The odata team works hand in hand with the ASP.NET team.\nWhen it comes to mvc6 we are attempting not to just move over the code and make it work, but reflect on the limitations, and pitfalls we had and redesign appropriately. I think the exercise you are doing is useful, in my experience with mvc6 work so far, these types of attempts (including some of mine) typically end up as thought exercises more than actual shippable code.\n. I wasn't ignoring it. Been on regular calls with Congyong. They are going to do the porting. We are well coordinated, and the plan was to do a design before starting the work in earnest.\nI'm not trying to dissuade you from doing the work. It is useful, I've seen too much disappointment in the past when stuff gets scrapped or heavily modified. I applaud you for the care and effort. I'd hate to see you drop it.\n. @pranavkm the guidance is to keep legacy names in place unless they are bad. We can discuss this one further, I'm not sure how common it is used and how much of an annoyance it will be if we change it. @Eilon might have more context\n. :+1: on tests, if you touch an area add coverage, doc comments etc.\n. :shipit: from me, as long as @pranavkm is ok\n. :shipit: \n. :shipit: \n. Add a test to cover Permanent for redirect result\n. The class\n-----Original Message-----\nFrom: \"Tian Pan\" notifications@github.com\nSent: \u200e6/\u200e12/\u200e2014 10:39 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Update controller methods to be all virtual (#656)\nFor RedirectResult class or RedirectPermanent here in the controller? RedirectPermanent has already been covered.\n\u2014\nReply to this email directly or view it on GitHub.\n. looks good overall to me, :shipit: when @rynowak is happy\n. :shipit: \n. Will look\n-----Original Message-----\nFrom: \"N. Taylor Mullen\" notifications@github.com\nSent: \u200e6/\u200e19/\u200e2014 12:00 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Add Autofac functional test. (#670)\nGood to get this in?\n\u2014\nReply to this email directly or view it on GitHub.\n. :shipit: \n. @NTaylorMullen can you please merge this?\n. Yup, I agree. So why do we need have application services at all?\n-----Original Message-----\nFrom: \"Ryan Nowak\" notifications@github.com\nSent: \u200e6/\u200e17/\u200e2014 10:24 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Use request services instead of application services bydefault (#672)\nThe general idea is that using per-request services is the default choice. Scoped services can only be resolved from the per-request container, so using per-request gives us (and users) the ability to register things with different lifetimes without needing code changes.\n@halter73 in case he wants to add anything\n\u2014\nReply to this email directly or view it on GitHub.\n. The property can delegate. Putting both out on context seems as a potential pit of failure\n-----Original Message-----\nFrom: \"Ryan Nowak\" notifications@github.com\nSent: \u200e6/\u200e17/\u200e2014 10:50 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Use request services instead of application services bydefault (#672)\nThere are cases where you need services, but don't have a request. In those cases you'd need to accept the limitations that affords you. \nFor MVC, request scoped services are required but in the wild and wonderful owin world it might not make sense for everyone's scenario.\n\u2014\nReply to this email directly or view it on GitHub.\n. :shipit: for now to unblock the ugliness, but we need to revisit because we agreed this is not the pattern for now. The pattern is no configuration in the test site, keep it simple\n. :shipit:\n. :shipit: will follow up on Razor 4.0 or 6.0. It's probably just a coin toss away :)\n. This is not exactly the same as aspnet/FileSystem#6 although they are related.\nWe discussed having a production mode where we don't hit the disk at all after loading a file (and not listen to notification vs. design mode where we do).\n. Can't this just go on the common initialization code (similar to what @pranavkm  is trying to do with the common base class/setup your site helper)\n. If you are ok with making AddTestConfiguration return new configuration() by default, :shipit: and use your best judgement on the other comments\n. We can probably do it now, going to make a sample for this.\n. @NTaylorMullen : fail, please signoff on this.\n:shipit: when Taylor says\n. We need to ask if these helpers @rynowak mentions need to come through @inject - The main reason to use @inject for a property is to replace the signature, not to replace the implementation. For just activation we still probably just need to decorate the existing properties with [Activate]\n. Duplicate of logging \n. This is super edge case, and not that interesting. Putting on the backlog and at some point we can consider if we actually want to do any work here.\nBuilding object hierarchies with new for data models seems very odd and shouldn't be encouraged.\nIf we can see a strong use case for a customer we can reconsider.\n. cc/ @DamianEdwards\n. :shipit: but please followup with the test work before proceeding with new work\n. Thanks @pranavkm \n. @rynowak @javiercn can you please update the bug title so it reflects what actually this bug accomplished for our users in Alpha4. If it is fully covered by other bugs please remove the feature label\n. Please add a functional test, and make sure these actually work in the sample.\n. :shipit: but please make sure you have an issue tracking the TODO item above\n. #813 also needs a change to use a cancellationtoken when applying the formatter\n. We should do the work for (at least as far as I can tell)\nFileResult\nStreamFormatter\nOther CopyToAsync if/where we use them\n. This is depending on having a ClientCancellationToken available as well as request aborted token.\n. :shipit: \n. We are going to remove support @helpers and thus this issue is not required.\n. Won't fix\n. #732 \n. :shipit:\n. Please name the branch link-generation\n. jit time (cold startup)\n. It cuts the jit time for this method in half (1% of the MVC startup)\n. Merged https://github.com/aspnet/Mvc/commit/039762c497b9d799ebe1b5313beedf646eb365d8\n. No\n. Not entirely accurate. We can place not notnull on implementations as well. For example we sometimes use a specific implementation of the interface in isolation, we need to verify the analysis tools actually pick up the annotation.\nEither way if the decision is to generally not do it, then we should track cleaning them out.\n. :shipit: \n. :shipit: \n. :shipit: and followup with turning this into a descriptor and a common descriptoractivators\n. @davidfowl @lodejard - We are thinking that editor templates should just be sync only.\nBut if you have other thoughts lets chat about it.\n. I was under the impression that wait calls can end up being deadlocks, and its generally frowned upon.\nCan we instead say that editor templates are sync only?\n. Should we have an extension method to do that?\n-----Original Message-----\nFrom: \"Pranav K\" notifications@github.com\nSent: \u200e8/\u200e14/\u200e2014 3:42 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] TemplateRenderer should not call renderasync().Wait()(#782)\nSpoke to @GrabYourPitchforks about this today and his opinion was that in the absence of a sync context, we shouldn't have the same sort of issues calling Wait(). His only suggestion was to change the actual Wait() call to task.GetAwaiter().GetResult(). This preserves the stack trace in the event the Task throws.\n\u2014\nReply to this email directly or view it on GitHub.\n. OData work is still going on in CodePlex. We are now working on 5.3\n. @jrote1 we updated the bug on codeplex. and it's probably not making it into 5.3, but we are look at taking it for 5.4.\n. @dotnetwise wrong repo. \n. Aspnetwebstack.codeplex.com\n. Yes that is it. I've pinged the team looks like it is not in 5.4 but I will let them confirm.\n. There are a few things to consider here:\n1. Controller is not a top level concept anymore, action is. Although the default actiondescriptorprovider finds actions through reflection over controller classes, that's not a requirement of the framework and actiondescriptor can be built in different ways that don't directly depend on having a controller class.\n2. You can have multiple controllers with the same name but in different namespaces.\n3. Using ActionContext in the view engine makes it less flexible from being consumed outside the method execution pipeline, but that part might be fine.\n@lodejard we are interested in your feedback here, @pranavkm will stop in person.\nOverall I think the design suggested here and in #802 is fine.\n. We can't just hook up the aspnet service provider to the ValidationContext because the contract on ValidationContext requires copying the services over to the ServiceContainer property.\nIt's unfortunate but I don't see a way to do this in the framework. And you will have to use something like CallContext to get at request services or set a global static to get to application services. This will be an application concern and we are not planning to build anything in MVC to make the scenario easier just for validation.\n. :shipit: when IOutputFormatter is done and everyone else is happy.\n. Talking with @lodejard, there is even a better idea here to just hold on to the strings in memoryspool (linked list/array of the original strings).\n. :shipit: let's followup on the property name discussion offline.\n. @rynowak this is the feature we discussed today with @lodejard.\nLike we discussed if this has an impact on the architecture (and looks like it does impact ApiExplorer) let's break it down to the pieces we need to accomplish for beta, and clearly specify what can be done later.\n. Putting in ready until we can break this down the pieces and decide what milestone each piece fits in.\n. Closely related to #38, we will deduplicate\n. :shipit:\n. Fixed: https://github.com/aspnet/Mvc/commit/4baa2910b78469f72e30f6a6153b470cd918b4f5\n. https://github.com/aspnet/Mvc/commit/80ef37ab0a4ef1de2619f80d72188a1cd008bdfb\n. :shipit: \n. Merged\n. Talk to @kichalla as he is fixing the issue with calling the formatter multiple times. #1836\n. Use [FromBody] for json posts\n. @lodejard this is the discussion we had about breaking out execution out of the page itself.\n. Looks good other than my basic comments. TextWriter style fix can wait for the next PR, just please followup these comments. So lets just fix up the names and organize the commits so history is preserved then :shipit: \n. @runxc1 you can do it today. If you save the view back to disk it just works by default.\nIf you want the view to come from memory, then you will need to build it yourself, but all the ingredients are there already.\n. The scenarios described above now are fully supported.\nWe would recommend using the ViewExpanders as the common way to extend the set of templates provided (because they preserve order by default, and don't require you to actually customize the services). \nRecommended approach sample: \nSetup piece: https://github.com/aspnet/Mvc/blob/dev/samples/MvcSample.Web/Startup.cs#L49-L54\nExpander sample: https://github.com/aspnet/Mvc/blob/dev/samples/MvcSample.Web/LanguageViewLocationExpander.cs\n. I think this is a reasonable behavior. You haven't provided any data. I think MVC5 is too aggressive when it comes up to newing up objects when data does not exist. \nIt makes it super weird when your objects have constructors and default values, that are never provided.\n. Let's chat about why a parser (see Eilon's feedback about parsing the parser :)) but if it makes sense I can dig deeper\n. :shipit: \n. Consider @inject doesn't have to execute to provide the @inject. The design of @inject was to just be metadata level directive, so the viewstart doesn't actually run. (Though this can be easily verified when we implement #824 \nI personally think that its ok. I think of viewstart and a view.config. \nDoes that make sense?\n. View start doesn't need to actually run. Just provide the inject metadata\n-----Original Message-----\nFrom: \"Pranav K\" notifications@github.com\nSent: \u200e7/\u200e19/\u200e2014 4:27 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Does using viewstart.cshtml to set layout pages _and@inject properties make sense (#825)\n@Eilon, one of the reasons we were considering having @inject \\ @using etc flow in from _ViewStarts into the page was because it seemed a lot more confusing to have two different types being generated \\ different set of properties being available to you depending on whether the page was being rendered as a regular or partial view.\nWe could potentially have a different type that expresses \"metadata\" to be flowed into pages, but _ViewStart's are a bit under used today (they largely don't do anything besides set Layout) that it made sense not to invent something new and simply repurpose them.\ncc @DamianEdwards \n\u2014\nReply to this email directly or view it on GitHub.\n. That's an interesting concept (I especially like the 3rd option)\nHere is one more option I'm interested in your thoughts.\nDirectives are always there an they are not optional (that's consistent with Razor in general).\nc#\n@inject IFoo foo\nThe rest can just run in the code, and by default we run everything, and use the dynamic mode from the 3rd option always.\nc#\nif (!context.IsPartial)\n{\n    Layout = \"~/layout.cshtml\";\n}\nHowever for Partial pages we just end up with a different renderer than the page renderer. So the decision to use layout or not can be left to the page. Something like:\n``` c#\n// either in viewstart or page\nRenderHierarchyForPartial = true;\n// just in viewstart\nif (context.ViewName.StartsWith(\"_\")) {\n     RenderHierarchyForPartial = true;\n} \n```\nNote that in this world the renderer is outside the webpage, we can end up with a partial renderer and a full renderer, where you will need to turn on the RenderHierarchyForPartial (TemporaryName) to have it walk through layout pages.\n. @pranavkm Can you please set up the design discussion for this?\n. I think what we want is to separate the clearing of the response buffer and headers to an API. Then we need to decide (separately) about the mechanism that decides when we convert an exception to a non-error page (and yes we will have to decide about content negotiation or not at that point as well). \nI think the way to do it, is to allow for content negotiation, but if it fails during a 500, it just means that exception escapes out and you get an error page.\n. Kiran - was this in Helios of weblistener?\n-----Original Message-----\nFrom: \"Kiran Challa\" notifications@github.com\nSent: \u200e8/\u200e30/\u200e2014 1:53 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Error handling when response is partially written (#826)\nJust adding details as I came across this now...\nFollowing exception occurs when json formatter is trying to write out the output..and I had a error page middleware which responded back with a html page and a 200 status code and the following headers..notice that the generated output from error page middleware is html, the content-type is application/json...this is understandable as headers are sent first and then the body...so its related to buffering to enable catching exceptions and sending out a con-neg response...\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=utf-8\nServer: Microsoft-IIS/8.0\nX-SourceFiles: =?UTF-8?B?QzpccHJvamVjdGtcU3RyZXNzXEtTdHJlc3NUZXN0c1xLU3RyZXNzXHNyY1xBcHBzXE1vZGVsQmluZGluZ0FuZEZvcm1hdHRlcnNcYXBpXHByb2R1Y3Rz?=\nX-Powered-By: ASP.NET\nDate: Sat, 30 Aug 2014 20:37:42 GMT\nContent-Length: 29272\n[] \nAn unhandled exception occurred while processing the request.\nSqlException: Invalid object name 'Product'.\nSystem.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\nDataStoreException: An error occured while running a data store operation. See InnerException for details.\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\nStack Query Cookies Headers Environment \nSqlException: Invalid object name 'Product'.\nSystem.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\nSystem.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\nSystem.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\nSystem.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\nSystem.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\nSystem.Data.SqlClient.SqlDataReader.get_MetaData()\nSystem.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource1 completion, Int32 timeout, Task& task, Boolean asyncWrite)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)\nSystem.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)\nSystem.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\nSystem.Data.Common.DbCommand.ExecuteReader()\nMicrosoft.Data.Entity.Relational.Query.QueryMethodProvider.Enumerable1.Enumerator.MoveNext()\nSystem.Linq.Enumerable.d__142.MoveNext()\nSystem.Linq.Enumerable.WhereSelectEnumerableIterator2.MoveNext()\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\nDataStoreException: An error occured while running a data store operation. See InnerException for details.\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\nNewtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\nMicrosoft.AspNet.Mvc.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)\nMicrosoft.AspNet.Mvc.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterContext context)\nMicrosoft.AspNet.Mvc.OutputFormatter.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.ObjectResult.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\nMicrosoft.AspNet.Mvc.MvcRouteHandler.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.Template.TemplateRoute.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.RouteCollection.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Builder.RouterMiddleware.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.RequestContainer.ContainerMiddleware.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Diagnostics.ErrorPageMiddleware.d__1.MoveNext()\nNo QueryString data.\nVariable Value \nAccept application/json \nHost localhost:57568 \nUser-Agent Fiddler \n\u2014\nReply to this email directly or view it on GitHub.\n. This belongs in error handling middleware, I am not sure if it is actually handled alreayd, but I recall it was the intent @muratg \n. :shipit: after cleanup\n. :shipit:\n. If a template ever renders a large portion of text > 80K there is definitely a major LOH issue that will cause pauses and lots of CPU spent in GC\n. @NTaylorMullen please tie this to the TagHelper Content change when working with @sornaks \n. Hey @lennygran this looks like a pretty neat nuget package!\nThanks for taking the time to publish it. We looked a bit at the code and think it is very appropriate as a standalone package outside the framework.\nWe'd suggest porting it to MVC vNext as a standalone package.\n. other than the minor comment on IServiceProvider documentation. :shipit: \n. @rosieks we don't plan to add support for pluralization.\nWhen it comes to modifying controller name, it is rather easy by applying a global application convention. We can consider building one in the box as part of this, but it is definitely doable by the user.\n@NTaylorMullen can you please make your code from tag helpers available publically\n. @Tratcher I believe this is part of your PR, can you resolve when you are done?\n. #1801\n. :shipit: walk through it with @DamianEdwards @Praburaj to verify the implementation is sound.\n. I suggest we just make NotFound(object) overload available on Controller. It will return ObjectResult with the status code. We can also just fork inside the method of the object is null to just return HttpNotFound\n. Create an NotFoundObjectResult similar to BadRequestObjectResult and an overload in controller.cs. @rynowak is there a reason we didn't include this as part of the last cleanup of action results?\n. StatusDescription is not coming back I guess. So this is just to add an override that takes an object\n. Depending on aspnet/Razor#85\n. Also update the sample see #1050 \n. @harshgMSFT please go ahead and make the change (preferably this week)\n. Need to walk through, I'm not sure all these generic data structures need to go public, and they definitely need more documentation.\n. We discussed in person. Overall the design approach looks ok. We want to include the verbs, and discussed some slight modifications. Waiting to see the final code.\n. Other than the minor comments, I'm not sure why we have the generic type explosion going on. If this is just so we can easily reuse in attribute routing, then that's ok. I wouldn't keep it generic otherwise.\nLet's talk about the other minor comments\nother than that :shipit: \n. I don't see functional tests, please do not push without full functional tests for this area\n. @lodejard do you want to take a look?\n. :shipit: pending updating the dispose\n. Please get signoff from @GrabYourPitchforks, then :shipit: \n. :shipit: \n. This is a razor bug, moved over to Razor - https://github.com/aspnet/Razor/issues/184\n. :shipit:\n. other than the doc comments looks ok to me. I'd get a signoff from @GrabYourPitchforks (for security) and on more fella from the team.\n/cc @DamianEdwards \n. Other than the comment on the XMLDoc looks good to me. But I'd like to have at least one more set of eyes on this (with knowledge in the area) so either @pranavkm or @Eilon or anyone else claiming to be an SME in this area \n. :shipit: I'm ok with the one minor casting change to push in, and followup with the stringbuilder support in another PR to reduce the clutter.\nHmm I take it back, there are essential pieces missing here\n. @RickStrahl this I think is a nice way to address your feedback in #629. It's easy enough to opt out of this behavior by simply removing this default formatter (or customizing it)\n. This PR should also include the change removing the string handling from the object content result\n. Enable the tests for string\n. This is a way to fix #878 \n. @pranavkm please specify what specific settings are you looking for.\nIs this just to enable release/debug compilation or is there anything else that is immediately needed.\n. Duplicate #1673\n. @NickCraver bug got assigned to @pranavkm, we will get a PR out in the next couple of weeks.\n. We are going to also look at current MVC after fixing this issue - https://aspnetwebstack.codeplex.com/workitem/2085\n. @NickCraver what a great suggestion. The perf test was very happy with you :)\n. This item depends on a decision on action selection.\n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Controller.cs#L636\n. @DamianEdwards lets decide if we want this for RTM (this is mostly depending on tooling, the fx change is minimal).\n. @davidfowl / @NTaylorMullen  this gets in the way of making the host completely standalone.\nShould we keep options around, or should we force you to change the host directly?\n. We are going to move everything to a RazorHostFactory. The factory is going to have no dependencies on the user's code startup.cs.\n. This is about generating a link back to the same resource to get different formats.\n. We decided not to do built in support for this feature. This could be an external nuget package/sample. \n. @rynowak if this affects the architecture lets pull it in for beta. Otherwise it can wait post beta\n. We should also have a way to turn the behavior off.\n. @rynowak there is no major need to get the feature in for RC, but I would like to verify we can do it without breaking the architecture. We could make it as simple as just making the basic determination and storing the data on the request, and have later a middleware that does the conversion.\nI think this will end up being quite complex when you have multiple routes competing for the action where they all fail for different reasons. So lets give it a quick glance and see how doable it is.\n. @pranavkm I think this is already part of your compilation change, if so please close this issue\n. Please open a separate issue and details the exact broken scenario. Also note that if example if you are using precompilation you will not get the generated code. \n. :shipit: when @rynowak is happy.\n. @rynowak this does not say a whole lot. Please provide detailed description.\n. @Tratcher the point here is if something up the filter pipeline already set a response code explicitly then we don't want the formatter to override. It does feel like the status code should be int? to make this more clear, but at the same time 0 is not a valid status code anyways\n. @harshgMSFT - Did we put it in the formatting without the text/plain formatter?\n. please fix this immediately so this makes it into the current milestone\n. @GrabYourPitchforks @harshgMSFT looks reasonable to me.\nI'm thinking this can go is post beta, let me know if you think otherwise.\n. @GrabYourPitchforks - When you get a chance, I'm interested in your view on this.\n. Based on the latest discussion here, I'm closing as won't fix.\n. Thanks for reporting. \nThis will be coming over at some point. \n. This is the expected behavior, and the work around seems fine.\n. :shipit: (just cleanup the comment, and open the issue for typeactivator)\n. @Tratcher do you think this kind of class belongs in HttpAbstractions for common Content types?\n. Depends on aspnet/HttpAbstractions#177\n. This is handled by #1074 and I don't think we need to do anything else for it.\n. :shipit: \n. Will do\n. Looks great!\nPlease split the commits so history is preserved and :shipit: \n. :shipit: when @pranavkm and @rynowak are happy\n. We are thinking that this behavior is fine and by design. \nWe can at some point implement a [StrictEumBehavior] validation attribute if asked for by users.\n. ping, we need this for in visual studio dependency. @rowanmiller showed me something that we might be able to leverage here\n. CC @muratg @danroth27 \n. Razor code is not coupled to the view engine. It's actually coupled to the virtualpathprovider.\nIf you have any specific ask that I'm missing please re open the bug and provide specific details to what you are trying to do.\n. @am11 ok I see what you are trying to do now.\nI think the code is actually factored reasonably well to achieve what you are trying to do. The entry point is indeed the viewengine but it's actually not where you are going to make the bulk of your changes. The task however is not small or simple, but it will be really cool to see how you take on it.\nLet me try and explain the architecture a little bit and see if it gets you in the right direction.\nViewEngine - Responsibility find views on disk (or in compiled code) and give them back to the viewresult for rendering.\nThe view engine is using DI to bring in services that allows several transformations to happen. You have full control to replace these services.\n1. Translate a virtual path to a path on disk, and get a physical path to a file\n2. Find a file or a compiled file in an assembly and cache it for later use.\n3. Take a (razor) file and generate a C# file out of it. Data from viewstart is also usable for applying directives to the code generation phase (like @using, @inherits, @inject).\n4. Compile the c# file into an assembly using the right set of references and directives coming from viewstart.\n5. To execute the hierarchy of files, layouts, and viewstart we use the RazorView class.\nThe Razor assembly responsibility is to translate the .cshtml file to C#, for that it uses a host. Some of the features are MVC specific (like @inject) and some/most are Razor like (@using).\nWhat it seems you want to do is to implement your own parser (and perhaps file extension), and let the rest of the \"stuff\" come from MVC. Correct?\nIf that so what you need to do is dive actually into the Razor project, implement your own parser, and build a chunk tree that will represent the same thing the current parser does. You will probably need to start by building your own mvchost, your own parser and customizing the viewengine itself will be the least of your concerns (although we do plan some improvements, I don't see a reason to implement a base, as you can just use the current view engine and just feed it with different services).\nGood luck on your journey, we are going to be a bit limited in the amount of documentation and support we can provide for this, but we will do our best to help out with advice here and there.\nBy the way, a good place to start by just working on the code generation stuff and avoiding the extra complexities of MVC for now is RazorSpy. It is a tool to visualize generated code from a razor file side by side with different code generators. You can drop in your own Razor host (and then compare generated codes). See https://github.com/razorspy \nNote: We have no VB support in the work for vNext.\n. As you get close to achieving your goal, and you find specific things you want us to change, please open specific issues for them.\n. There are a few ways to get json out of MVC.\n1. Return a JsonResult. If you do that just set the JsonSettings property with your settings.\n   https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ActionResults/JsonResult.cs\n2. Return an object and let content negotiation take it's place. In that case you want to access the JsonOutputFormatter from MvcOptions and replace it with a new one constructed with SerializerSettings.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ActionResults/JsonResult.cs\n. @harshgMSFT we should also expose the serializersettings on the formatter as a property. It will make it much more discoverable and easier to change by user.\n. also cover the scenario is #1215 (so both input/output formatters gets the settings and default settings static method).\n. :shipit: when the last comments are addressed and everyone else is happy\n. This looks like a dup, but it highlights more issues with the design, where here the user wants more token replacements.\nWe will consider a single fix for both issues.\n. @pranavkm please no :shipit: if you still have un-adressed feedback\n. This requires a lot of work, for seemingly a very minimal benefit\n. https://github.com/ninject/ninject/issues/143\nWe should just keep this bug around and verify when ninject fixes it.\n. The issue in this particular bug is addressed by b12c4c5ef81657baa484205612906c63afc6a075. However similar uses of open generics will still break ninject. This could come from users code as well as other framework code\n. There are a few other design issues:\n1. The CreateCompilationException can fail if the file cannot be read (e.g. locked or removed), we should be more protected there.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/Compilation/CompilationResult.cs#L107\n2. The class exposes a FilePath that relies on the file.PhysicalPath that doesn't necessarily exist. It should perhaps take the RazorFileInfo instead as input (or both) and provide a virtual path if the path is not available.\n. Please come up with a skeleton design and reassign\n. slim/trim and make sure there are functional tests\n. Duplicate of #972 fixed by #1074\n. Fixed by #1074\n. The fix here is to make sure the stream writer doesn't flush the stream upon closing it.\nThe content length header is generated by IIS and not by MVC. \nIt is expected that the web listener (self host) will still write chunked results.\n. other than the comment on removing the copying of the modelstate dictionary, I'm fine with most of the rest. Let's talk about that one in person.\nOther than that :shipit: when the other folks say :shipit: \n. This is related to view precompilation.\n. @loudej - Should we move this out of MVC\n. Unless this shows up in profiles, or we get user feedback for this, lets not spend more time here.\n. We should add the Bind attribute, but we should make sure our samples use nameof()\ne.g. [Bind(Include = nameof(Prop1) + \",\" + nameof(Prop2)]\n. @harshgMSFT \n. @pranavkm @loudej can someone explain why we want it this way? Putting things in MVC options makes it easier to find them, and since the view engine is tightly coupled to MVC, it's not really clear to me why the separation.\nis it to make Web Pages feel disconnected from MVC when we implement it or is there another idea behind this?\n. I think the extension should come from the host the view engine is consuming (which makes it back to singleton I guess). Otherwise its very easy to get a disconnect between the design time host and the view engine.\n. @dougbu please use the official :shipit: it actually is used in filtering PRs in queries\n. :shipit: \n. So in short:\n1. Add back the descriptor model for inputformatters\n2. Consider again the factoring of the context objects and the services\n3. Add a functional test that verifies a second formatter will ever get chosen.\n4. Place the formatter at the action context before filters are running (or perhaps right after Authorization filter) and Pick up the formatters from the action context.\n. I assume the catchall is done in the actual decision tree. :shipit: \n. Keep compat with MVC5\n. @am11 if you have a concrete suggestion for a feature ask please open an issue rather than commenting on a semi related issue.\nIt makes it really hard to track the requests this way.\nAlso when making a feature ask please try to provide coherent samples in the issue itself. Again its much easier to see what the ask is, rather than follow links.\nAt this moment we are ptobably not going to take new features for v1 RTM. There is plenty of work to get to parity with mvc5 but we would like to consider request and make sure either our current design supports them as additive features or there is a reasonable alternative for them and we are not going to do them.\n@pranavkm this is related to enabling layout for partials, so please handle these two together.\n. dup of #1065\n. Damian suggests that when we get an invalid/unknown accept headers, we provide an easy way to see the data in a filter\n. The reason we want to make this happen earlier, is that it shows up in tooling as it might happen on every keystroke\n. @rynowak waiting\n. This is already supported. Because we now have IView as a base type.\nSo just explicitly implement the interface or you can just wrap the existing RazorView in your class.\nHaving said that, we will gladly take it, please follow the contribution guidelines, and most importantly sign a CLA\nhttps://github.com/aspnet/Home/blob/master/CONTRIBUTING.md#general-feedback-and-discussions\nhttps://cla.msopentech.com/\n. @pranavkm when CLA is signed, this is good to merge.\n. It's the same amount of code :) Just IView.RenderAsync it.\nYou do have a point it is less discoverable, hence you spent the (most appreciated) time to fix it.\nAbout the CLA, thanks for submitting one. It's being processed at the moment, I do see it, it just hasn't been approved yet.\n. @pranavkm CLA is good to go. We can merge, and then build the other fix @Shandem wanted as part of #1031.\n. Yes - There is a PR out for the DataContract serializer to ignore types it is not aware of. And you can plug in the XML Serializer if you want. \nHere is one way to use XmlSerializer for things that don't work with the Xml DCS.\nYou can also just register it in MVC options instead of the Xml DCS\n https://github.com/aspnet/Mvc/blob/dev/test/WebSites/FormatterWebSite/Controllers/XmlSerializerController.cs\n``` c#\n    public class XmlSerializerController : Controller\n    {\n        public override void OnActionExecuted(ActionExecutedContext context)\n        {\n            var result = context.Result as ObjectResult;\n            if (result != null)\n            {\n                result.Formatters.Add(new XmlSerializerOutputFormatter());\n            }\n        base.OnActionExecuted(context);\n    }\n\n    [HttpPost]\n    public DummyClass GetDummyClass(int sampleInput)\n    {\n        return new DummyClass { SampleInt = sampleInput };\n    }\n}\n\n```\n. Here is the PR to make it not throw - You will get in that case the first formatter that can write the type will write it. Note that this doesn't work. Tracked by https://github.com/aspnet/Mvc/issues/1033, currently this will just return 406 (Unsupported Media Type).\n. This is an action filter, so yes absolutely\n-----Original Message-----\nFrom: \"borgdylan\" notifications@github.com\nSent: \u200e8/\u200e18/\u200e2014 6:25 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] XML output formatter that uses DataContractSerializerchokes on many object types (#1022)\n@yishaigalatzer would the fix code above work if turned into an action filter?\n\u2014\nReply to this email directly or view it on GitHub.\n. @dfugate thanks for reporting this. \nThis bug doesn't belong in MVC vNext because there is no documentation for vNext as of yet. I'm working with the MSDN team to look into it. In the meantime I'm going to close it, and if you want to follow up, please open a bug in aspnetwebstack.CodePlex.com. We are going to fix it regardless.\nCheers and thanks again!\nYishai\n. :shipit: \n. rename the title to match the actual attributes that use this. same for #844 \n. @Shandem - If you read the guidelines, we ask you to do a few things:\n1. open an issue\n2. Discuss the issue with the team and figure out the right approach\n3. If the team buys into the design and priority, code it up and add tests to verify it.\n4. Submit PR\n5. Merge and win.\nWe would really appreciate going down this path. In regards to this design, I'm not sure I agree that this is the right thing to do. So please open an issue and let's start a discussion. \n. It's probably better to build the whole thing in one go. @Shandem when @pranavkm comes up with his PR, go ahead and take a look as well for feedback. Should be a few days for it to get ready.\n. @loudej this is to match content negotiation behavior in Web API, where there is a fallback to the first formatter that can write the data.\n. @pawelpabich thanks for this suggestion. We met yesterday, and looked into it.\nWe are actually building another feature that will cover many of the things you are trying to do (if not all of them, specifically not that imperative vs. fluent api). The feature is called TagHelpers and it will let you just replace many of the HtmlHelpers with html look alike feature.\nHaving said that, we still believe your suggestion has merit, and we would like to look at doing it in the future after we execute some more fundamental features we need to get for the framework.\n. :shipit: We can deal with the factory later, it's for extensibility scenarios not this basic scenario.\n. @shandem see if this makes you a tad happier :)\n. :shipit: when @rynowak is happy\n. @nikmd23 that is a great reminder. Opened a followup item #1079\n@NTaylorMullen @DamianEdwards this is something we need to account for in the form taghelper as well.\nCC @GrabYourPitchforks @harshgMSFT \n. :shipit: \n. :shipit: after verifying @NTaylorMullen comment\n. Not a standalone item.\n. :shipit: but lets better the providerprovider thingie first\n. @GrabYourPitchforks @harshgMSFT I think this is a dup of #909. \n. Looks ok, but since your setup if rather complex you probably want also to verify that it does throw when headers are being written after the stream was written (by having a misbehaving formatter).\nYou probably also want a functional test that verifies that all the expected headers appear at the client side.\n. Note that this might impact the mapping media types through file extensions feature (and you want to verify it doesn't break any scenarios and add test coverage for that feature as well).\n. CC @kulmugdha @rynowak \n. Figured this doesn't quite work. Because the user sets more things on the viewbag.\nWe discussed various other solutions, and for now we are staying with body needs to be small and heavy rendering with flush goes to section.\n. I asked for the original bug to be opened.\nThe issue is that for some scenarios when the number of errors become very large (e.g. large null array with a lot of validation properties on the sub types). The number of errors become too large causing both memory pressure and time to process and generate all the errors.\nRealistically a user might not even be interested when the number of errors exceeds say 1,000. But with the old system we have no way to say that the value hasn't been validated and hence we had a concern with this fix in 5.2/Web API. The scenario we worried about was that parts of the upload is valid (say you uploaded 100 orders, and 99 where valid), and the user won't be able to tell and might add the wrong items to the database.\nIn this version validation state is a tri-state so items can be valid/invalid/not validated and that lifts this concern\n. @Eilon met with @GrabYourPitchforks and @blowdart and we think the design is reasonable. There are some things we want to add like add an error saying the max number of errors was exceeded.\nLet us know if you want more discussion with you.\n. The comment is not related to this issue. \nAlso I believe it is  fine. A user can add a buffering middleware, we are not going to add more unnecessary buffering in mvc. \nOpen an issue against the weblistener host yo be consistent with Helios if you want the behaviors to be identical.\n-----Original Message-----\nFrom: \"Kiran Challa\" notifications@github.com\nSent: \u200e8/\u200e30/\u200e2014 3:06 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Add unit tests to cover XML formatters and methodsreturning objects (#1072)\nJust FYI...ran into this just now...in my case i was using json formatter..a write from this formatter is giving a chunked response in case of weblistener where as in IIS it does not...\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed by #1074\n. There is no way to add functional tests for this, because this is host specific. We are tracking adding host specific tests separately\n. This will only work if you replace the controller factory\n. This is not related to the compat layer at all. This is the basic behavior we want in the system regardless of the compat layer.\n. like @rynowak says the tests shouldn't change, and we really should just react to a breaking change.\nShip it when @rynowak is happy\n. Related to #1073 \n. chat with @lodejard / @yishaigalatzer before implementing.\n. The idea is that we can just instead of providing \"~/path\", we can provide a view name, and the view engine will search for the user.\n. Current behavior - we throw\n. For this scenario the user should use\n```\n@{\nvar url = Url.Action(...);\nif (url != null)\n{\n    <a href=\"@url\" />\n}\n\n}\n```\nA user can also make custom ViewComponent or better yet a TagHelper for this\n. Interesting idea but please keep this issue list for issues only. Please don't use the issues as a discussion forum. This is a place to discuss a feature not vNext/VS features.\nI think another interesting approach is to minify the input to Razor, and not have the Razor code generator do any of that.\nTiming wise, I don't think this fits into V1, we got plenty of other things ahead of this.\nWe already decided against building a similar feature #571 in the runtime framework, so I'm inclined to reject this one as well. We will review in the next few days and make a decision.\n. https://github.com/aspnet/Mvc/commit/144a4b5921a277714c238cb293c90bf59c3c6723\n. :shipit: \n. @sornaks - Please make sure that all the tests covering the XML formatters are accounted for in this repo.\n. I believe that's just the behavior of the serialized itself. We don't plan to augment it further. But we chatted with the team that owns the serialized to look into it. Json behaves much better in this case.\n. This is not a super common thing to write, no need to add convenience code for non common user paths.\n. :shipit: and try to get a second set of eyes on it\n. If we do helpers, we will need to figure out how to do them outside app_code as we don't have the concept of special folders no more, but what made them work in the past is the fact that they where precompiled upfront. So from a brief thought, this looks like a pre compilation thing, except it seems wierd to have a built in feature rely on the current precompilation system.\nI don't think we have to have this feature in for RC, but I'd like to have a high-level design in place to ensure we are not missing any core behaviors that will enable such a feature.\nCC @davidfowl @lodejard @rynowak \n. We want to setup a design meeting, mostly to understand the scope and if changes are required to the framework/compilation model. The intent is not to implement for RTM, but to be able to build a preview package\n. :shipit: when @rynowak is happy\n. @rynowak please come up with a recommendation for this\n. when @rynowak is happy\n. :watch: \n. :shipit: \n. When @rynowak is happy\n. Code change looks good, missing a test to make sure the right inject pattern in generated.\n. @xqiu can you verify that in your scenario when you added these actions, the problem went away?\n. :shipit: from me\n. The question is: When the return value from a method is void or task, what should be the default behavior.\nIn MVC5 it got converted to a no op (or Empty Result). In MVC 6 we currently convert it to a 204 result, that is controlled by the formatters. A user can return an EmptyResult, write a filter, or change the formatters to work around it.\nThis was an explicit design choice and not a bug. We can revisit this decision.\n. Ok I see. Yes we should fix it\n. Moved to sprint backlog\n. :shipit: \n. #1657\n. :shipit: \n. :shipit: \n. @davidfowl @pranavkm \n. I have a couple more renames and basic tests for compiler cache coming.\n. :watch: I'll be off tomorrow. So if you just use delegating stream and get a signoff from someone else please don't wait for me.\n. :shipit: \n. :shipit: when you get signoff from everyone else\n. We should work with Matt Gibbs on this before making progress. Moving to post RTM as it is possible today (if not in a super friendly way)\n. Overall looks decent, lets discuss the comments in person I don't feel super strongly about any of them. Please also add a sample.  :watch: \n. :shipit: from me\n. @pranavkm this seems closely related to #1968\n. :shipit: when @harshgMSFT is happy\n. We have no current plans to change it.\n. Fixed with https://github.com/aspnet/Mvc/commit/4c31e2c58c847d4a98b061ef5cb22be61327f2a1\n. merged\n. @kichalla if you think this is important, please provide feedback for this item\n. Please fix as part of #932 \n. See information from #1220 \nThis has stemmed from #1219. \n Scenario: I want http://localhost:16600/person and http://localhost:16600/person/Index to both take you to Index using attribute routing.\nI specify \n [Route(\"[Controller]/[action]/{id?}\")] on the controller (PersonController)\n Then if I specify\n [Route(\"\")] on my Index method. It doesn't make Index as default method.\n http://localhost:16600/person/ -- 404\n http://localhost:16600/person/index -- works fine\nI tried specifying\n [Route(\"/person\")] on index method. This makes Index as default, but attribute route is lost, as it is overridden.\n http://localhost:16600/person -- works fine\n http://localhost:16600/person/index -- 404\nThe only way to make it work is to specify both of the following on Index method:\n [Route(\"/person\")]\n[Route(\"/person/Index\")]\nThis is a bit repetitive as we already have attribute route with action on top. \n. This really a duplicate of #1219 \n. @am11 thanks, we don't track the template work here. But we are going to take a look at this.\n. :shipit: \n. @HaoK - can you close this PR?\n. Looks like we can cover all these issues with unit tests instead of extra functional tests\n. We discussed doing the opposite.\nMake a solution without the functional tests, the main one should still include them.\n. #842\n. @dougbu these are not compatibility shim bugs, these are just bugs\n. Here are a few scenarios  I don't see covered:\n1. Short circuiting\n2. Filters configured on action/controller/global \n2.1 Do they all work\n2.2 ordering of their execution\n3. Filter order, both by directly specifying and by where they are configured\n4. Start from base class and start from the raw interface \n5. Filters on controller directly\n6. If you handle exception in exception filters make sure action and result filters don't run\n7. Make sure you can handle exception inside of an action filter, and then it runs result filters (and executed the result)\n. Also note that I didn't repeat the nit picky comments, find the common thread and clean out the rest of the PR.\n. Merged https://github.com/aspnet/Mvc/commit/144a4b5921a277714c238cb293c90bf59c3c6723\n. :shipit:\n. This is already done, tooling needs to verify once the tooling feature lights up. @vkichline \n. Hey @BernhardGlueck thanks for reporting this issue.\nI believe this is a duplicate of #1141 that was fixed in the beta milestone.\n. go for it\n. Browser link is not supported yet. We are just working on making the feature light up for beta.\n. @jodavis @pranavkm \n. I don't see strong argument above, closing as won't fix.\n. Turns out this was a red herring, some bug in the project system showed up bad errors in the error list. There is no need to change code gen.\n. Reads like a common file share, where its really a base assembly.\nRename assembly to Microsoft.AspNet.Mvc.Test.Common (TBD) (and so should the namespaces match)\nthen :shipit:\n. Make the tests more generic, then :shipit: \n. This could absolutely mean that, but of course you will have to do something to let us know your class is a controller. See the list above for details, but some short examples.\n1. Assuming you want to build your own base type that doesn't derive from controller\nC#\n    options.ControllersBaseTypes.Add(typeof(MyCustomBaseClass));\n// or\n   [Controller]\n   class MyCustomBaseClass\n// or\n   class MyCustomBaseController // <-- Controller suffix indicates controller\n1. Assuming you want a class that doesn't derive from controller but has a different naming convention\nC#\n    options.IsController = (Type t) => return t.Name.StartsWith(\"Foo\");\nYou can of course customize the existing service that picks up controllers, but we prefer to make it a bit easier, and we advocate that replacing services in MVC6 will most of the times mean we got something wrong. We'd rather get it right from the get go, or provide an option for the 99% case.\nIt would be nice if you can share you plans and reasoning for using POCO controllers, we might just be able to accomodate it when we lock the design for this feature.\n. So in MVC6 we don't recommend going with the pattern of defining routes with default objects, this was a very cumbersome syntax. When it comes to \"documentation\", the new templates are going to show the new pattern right from the get go.\nSo you would just: routes.AddRoute(\"{controller=Home}/{action=Index}/{id?}\". Of course when it comes to routes that don't mention the actual controller name that becomes a bit more complex in the default routes. But the suggestion there is to use attribute routes. Infact for APIs we are not even going to support conventional routes and you will have to decorate your actions/controllers with attribute routes. Again the pattern is established right in the Web API template (coming out in the next release).\nNow just like David suggests it is rather easy to implement something like you are looking for, but we are still debating what would an approach closer to your suggestion looks like. #1877 discuss a potential way to apply attribute routes in a centralized way, it can completely be written on top of current MVC without changing any of the MVC services implementing an IApplicationModelConvention. One can also make these methods be discovered (but that will require a service change, still doable but not very recommended).\n1877 It does not resolve the issue of having to have a controller suffix or derive from controller. But honestly I don't quite get why you won't do that. Following framework conventions makes new developers on your team having to learn less and be more effective.\nSo in short this issue is really about the following scenario:\n1. I'm used to the fact that as long I can derive from a controller, I don't have to name my class in any special way.\n2. My team decides to build a different base controller type (starting from a POCO), for example see ApiController\n3. MVC now doesn't pick up the controllers deriving from the new base type if they don't end with a suffix, which is not expected compared to the default framework behavior.\n. Design -\nWe will walk up and look for a base class that is named according to the \"standard\"\nAdd a NonControllerAttribute\n. @lodejard this is from our discussion today about default ordering\n. Addressed comments\n. I'm not sure I quite understand how ModelMetadata.DefaultOrder relates to this, and if or not it's a breaking change from MVC5. Lets chat tomorrow.\nThe main difference I see is that it's a get/set property where the ones I'm changing are get only\n. :shipit: \n. Merged\n. :shipit: when @pranavkm and @rynowak are happy, and follow up with an issue for the modelbindermetadataprovider if we think it is worth addressing\n. I think your change impacts precompilation, where no pre-compilation will not match.\n. So my other inline comments, this seems like a legit public surface, but is has bad names and no documentation\n. @rynowak That's what the bug says. The routekey is incorrect (in route values)\n. Looks ok to me, we can make the IHtmlString as a separate commit/PR as its mostly mechanic and will pollute this PR\n. Strawman design:\nInclude all objects that needs disposing on the Response/Request and dispose them with the request unwinds (or when exiting MVC).\nObjectResult, can upon setting the Value can register the type for disposal if it implement IDisposable, similarly FileStreamResult can do the same.\n. CC @davidfowl @pranavkm \n. See http://bitoftech.net/2014/11/18/getting-started-asp-net-5-mvc-6-web-api-entity-framework-7/?utm_content=buffer2ebb1&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer\n. @DamianEdwards there are the helpers we plan to add to the controller for API scenarios (other than improving the pattern), if there is anything missing please add here.\n@ashmind we are not planning to add support for (422) in a helper, and we do not own the HttpStatusCode enum. Since we are only picking the most common responses. Of course you are free to add your own controller base class with the set of helpers relevant to your app. In fact in MVC 5, you can just start from a POCO class and just include what you need.\n. 400 is what you return when you get model errors, so you are already in the controller.\nLike I mentioned above the helper method is trivial to write, is purely additive and we would like to keep the controller api surface minimal, as its already pretty large.\nWe can take a second look, and if we change our mind we will post here.\n. @ashmind Thanks for the samples. Reading the RFC, it is still a big ambiguous when it comes to invalid data in the query (or the url for that matter), but I do see your point.\nI suggest you open a separate issue, and we can follow up on this specifically. \n. @rynowak moving out to RC, ping me if you have feedback\n. I believe @loudej strongly objects to have this kind of behavior because\n1. It means model binding has to run before action selection (at least in some cases), webapi got around it by allowing only value providers based data (Url & Query).\n2. It leads to user confusion because some parameters can work this way and some cannot.\n3. Model binding should not run before authorization happens.\nSo I recommend won't fix for this. @danroth27 if you agree please close the issue, and if not lets talk about it.\n. If I really cared I would write this more explicitly like, note that \n``` C#\npublic IActionResult DoWork([FromQuery][Required]int? taskId)\n{\n    if (!ModelState.IsValid)\n    {\n        return BadRequest();\n    }\n// proceed\n...\n\n}\n```\n. Add to a functional test as well\n. This is now ready to go, the delegate is ready. \nThe task is to use the new delegate (talk to @halter73 for details), and verify performance improvement.\nThe design is to\n1. Use the static utilities rather than the ITypeActivator.\n2. Cache the delegate where it makes sense, and refactor appropriately.\n3. Avoid using the existing API (that activates directly) as we are considering removing it completely.\nCC @lodejard @victorhurdugaci \nRyan please reassign to whoever is free.\n. @pranavkm did you do the comparison to MVC5?\n. Yes what Ryan said\n-----Original Message-----\nFrom: \"Ryan Nowak\" notifications@github.com\nSent: \u200e10/\u200e21/\u200e2014 4:35 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] MVC should not depend on XmlDocument (#1424)\nAnother alternative is to support blocking based on the type name. This would allow us to block whole namespaces if it suits us, without taking a dependency.\n\u2014\nReply to this email directly or view it on GitHub.=\n. :watch: \n. Please merge and keep the PR open for feedback. I'm assuming the webpages branch is going to keep working after these changes.\n. I answered on stackoverflow, looks like you are just missing binding redirects in your web.config and thus Azure is trying in vain to find MVC 5.1.X.\nIn general bugs for MVC up to 5.X should be opened on aspnetwebstack.codeplex.com. This site is for tracking MVC 6.X bugs (also known as MVC vNext).\nLike I mentioned on stackoverflow, we are setting up a webrole to be absolutely sure. Please reply on this bug after verifying the suggested fix on your bug. \nThanks!\n. Fix the test issue and :shipit: Then lets get on the modelbinding exclusion\n. Merging to release and dev, reviewed in person with @davidfowl \n. #1044 merged to release and dev\n. https://github.com/aspnet/Mvc/commit/4efdae2190c740184f9bb1875d25aee2e65bec89\n. Fixed\n. Specifically for item number 2, you need only to support a controller convention for every controller\nC#\nConventions.Add(new ControllerModelConvention());  // apply to all controllers, and check for the controller type in the convention if you care.\nand not\nC#\nConventions.Add<HomeController>(new ControllerModelConvention()); // apply to a specific controller\nSimilarly should we have the same thing for all actions? I think yes. e.g. make all parameters with [FromHeader] required\n. We also want to support updating rather than straight binding over existing properties (similar to include/exclude in mvc5 or Delta in webapi)\n. [FromBody] is tricky because the body can really be read only once (unless the stream is buffered and rewound), so for [FromBody] support we need to decide if we want the support, and what is the mechanism.\n[FromHeader], [FromServices] and the likes should just work.\n. Added a bunch of minor comments, fix and push. :shipit: \n. :shipit: \n. Duplicate of #1654\n. looks good to me, I didn't go in details over the tests though, so when you get a review from that you have a :shipit: from me\n. @kulmugdha please verify as part of the signoff for beta2, this hopefully should work\n. Remove the sample and :shipit: \n. Thanks for reporting this, it is unfortunately a quirk of the C# language and not something to do with MVC.\nThe main reason for this not working is that anonymous types generate internal properties, the view is compiled into a separate assembly and dynamic does not do private reflection.\nThere are several blogs on this subject and a few suggestions for workarounds. Here is some sample code that will demonstrate the issue:\nIn Visual studio create a console app and a class library, reference the class library from the console app.\nThe console app code:\n``` c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing ClassLibrary1;\nnamespace ConsoleApplication1\n{\n    public class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Product product = new Product();\n        product.Name = \"Apple\";\n        product.Id = 1;\n\n        Product product2 = new Product();\n        product2.Name = \"Egg\";\n        product2.Id = 2;\n\n        var products = new List<Product>();\n        products.Add(product);\n        products.Add(product2);\n\n        var dyn = products.Select(p => new { p.Id, p.Name });\n\n        Print(dyn);\n        Console.WriteLine(\"----\");\n        Printer.Print(dyn);\n    }\n\n    public static void Print(IEnumerable<dynamic> dyn)\n    {\n        foreach (dynamic d in dyn)\n        {\n            Console.WriteLine(d.Id + \" \" + d.Name);\n        }\n    }\n}\n\n}\n```\nThe class library code:\n``` c#\nusing System;\nusing System.Collections.Generic;\nnamespace ClassLibrary1\n{\n    public static class Printer\n    {\n        public static void Print(IEnumerable dyn)\n        {\n            foreach (dynamic d in dyn)\n            {\n                Console.WriteLine(d.Id + \" \" + d.Name);\n            }\n        }\n}\n\n}\n```\nNote that the print method in the console app will work just fine, but the one in the class library will explode.\nHere is a blog with a general suggestions for workaround, This blog is using a dynamic object implementation to work around this issue.\nFootnote: There is a general idea of modifying the compilation in ASP.NET vNext - You might be able to try and modify the anonymous types to produce public properties instead of internal, we haven't explored this path, and the amount of work is not trivial. So we are not planning to pursue this avenue at the moment. If that changes we will post a sample.\nCC @pranavkm \n. Get together with @dougbu and @ToddGrun and get a consistent repro\n. @mayurid can your team get a consistent repro for this?\n. This looks like a bug in VS. @mayurid @barrytang can you please investigate?\n. why have it public at all then? Should it just go internal\n. We don't think it is a good idea to promote this pattern. The users can always write the formatter, but since we think most of the time this is a mistake we shouldn't put it in the framework.\nThis could go on a contrib style repo if someone finds it useful, but it shouldn't go out to the masses.\n. :shipit:\n. just make the change? Its as fast as logging the issue :)\n. Thanks for this bug. What would be very useful is a few samples of the specific controllers you got stuck with.\n. :watch: \n. Looks related to the WrapperFactory\n. fix the minor comments and :shipit: \n. @pranavkm ping, what is blocking this from being merged?\n. :+1: \n. Although this is by design, we realize there is a user confusion in some cases.\nI would like to review this around RC time frame to see if we can come up with something better.\n. @dougbu lets get a design meeting for this, and see if we can improve\n. Fair. No promises though, this is way down the list at the moment, but we will look at it at some point.\n. Don't add random .js files. Instead you can add a readme.md that explain why the empty folder is there :)\n. Discussed with @DamianEdwards and we decided not to implement this, as we deem it unnecessary.\n. Create a constructor that take also ModelState on top of https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ActionContext.cs#L24-L26 \n. The original user tried to put HttpPost on the controller because of the scenario below (the feature is surface controllers in Umbraco).\nThe scenario here was that the user wants to introduce a base controller type that only supports posts.\nWe ended up implementing this as a ControllerModelConvention, it would have been nicer to just slap an ActionModelConvention on the controller instead and have it applied to all the actions rather than implementing a foreach loop.\nThis is an alternate answer to the question above of allowing HttpPost on a controller. \n. We are working on removing except style attributes where security of concern, because this is implicitly not a safe way to do things. When you have such concerns, it is probably better to implement your own attribute, that you can reliably cover with tests.\nFor example if you added Hidden User to the system, you now need to remember to also add it to all the except attributes. The alternative is to write a custom attribute that knows about all the roles, and can be tested to reliably exclude all the right ones by making sure there is an explicit decision to all the roles.\n@GrabYourPitchforks @blowdart - Any further thoughts?\n. @ianhong moved this piece over to @ajaybhargavb but please be involved.\n. @rynowak #EngineeringDay\n. This is not just about filters updating the value (though it seems useful), this is mainly to make sure the values from options flow in, and a user constructing actioncontext does't have know know about it\n. We will move the setting to the entry point of model binding.\nWe will make the default maxerrors on model state the same as the default in mvc options\nWe will provide a constructor to model state with max errors, and review all uses of the modelstatedictionary default constructor.\n. @kulmugdha assigned to you to finish off this PR for @kichalla \n. We need to review the design for this prior to commencing coding with @loudej @davidfowl \n. We are going to coordinate the design for this with #1544. \nThe main questions we have at the moment are\n1. What gets cached (do we cache the string collection in the cache writer, or put it all in a large buffer).\n2. How does it work with Flush (one of the current thoughts in flush was to break out individual buffers).\n. Closing as we don't plan to take it at this point.\nThe only comment I have is that we should include a test to validate the return value (so nothing gets rendered and then value is consistent)\n. :shipit: from me\n. The decision is as follows:\nAll default folder paths are cased as detailed below. Action and Controller folder names are cases the same way the action/controller are cased in code.\nSo:\nViews\nAreas\n_ViewStart.cshtml\nViews/Shared\nBut the folders in wwwroot as still lower cased.\nAlso make sure we have tests covering the casing. Tooling team should follow the same guidance and have tests to make sure we don't accidentally break this when templates are updated.\nSimilarly although this is just template code \n_Layout.cshtml\nAnd general folder names (no impact at all on file system)\nControllers\nModels\nFYI: @kanchanm  @mayurid @DamianEdwards @rustd \n. We need to revisit the design here. @kichalla please set up a design meeting with @lodejard and friends to get this going\n. We should also log around validation\n. @dstarcev thanks for submitting this PR.\nThe idea of getting proper DI into filters is a good idea, and below are some steps to consider for moving this forward.\n1. Please read the contribution guidance https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md. \n2. Please start with filing an issue and discussing the need, the time frame, and the shape of the API. I'd like us to agree on what the user API looks like first before getting into coding. (Same practice applies to internal team members as well). Before going into reviewing the specifics of the implementation of the tests.\n. We should make sure that if there is content set by the taghelper we do need to render the end tag :)\n. Since the user have to set something explicitly in the body part of Razor for Flush to write headers and cookies and it has to run in the body so layout will be aware we can do something like\nAntiForgey.PresetCookieAndHeaders() that will run in the body, and will just place the cookies and headers.\nWe can even be nice and make the method always return string.Empty so it can be used directly in markup.\nThe name and property are of course temporary, feel free to suggest others.\n@nikmd23 I've heard similar suggestion from @darrelmiller for supporting trailing headers. I don't know about the status of browsers supporting them for cookies and headers.\n. Current workaround is to include a @Html.AntiForgeryToken() in the body inside a codeblock to avoid having it make it into the actual html.\n@{\n    var unusued = Html.AntiForgeryToken();\n}\n. We are going to implement asap, @harshgMSFT please include all the interested parties on the PR :)\n. :sheep: \n. Should this be just part of the script tag feature design (which we didn't quite do yet)?\nI like the pattern, I just want to keep the issue count under check.\n. Never mind, just noticed you made it go to RC rather than Beta2\n. Please in the future don't open follow up issues like this one, just reference the changes on the original issue.\n. What are the side effects here, and how is it different from MVC 5/Web API?\n. > , it will now in addition to creating top level object will try to bind inner properties and will have all sorts of problems.\n@harshgMSFT please provide concrete repro for what is going to break. If you think this is critical for Beta3 milestone please raise a flag\n. First thanks for filing the bug for discussion!\nYou can achieve the scenario you have above with service filter or type filter\nWith about the same complexity of the code.\nHere is a sample using TypeFilter (which is super nice because there is not registration required in the DI container for the filter.\n``` c#\n    public class HomeController : Controller\n    {\n        [SampleFilter(\"Hello\")]\n        public IActionResult Index()\n        {\n            return View();\n        }\n    }\npublic class SampleFilterAttribute : TypeFilterAttribute\n{\n    public string ExtraText { get; }\n\n    public SampleFilterAttribute(string extraText) : base(typeof(SampleFilter))\n    {\n        ExtraText = extraText;\n    }\n}\n\npublic class SampleFilter : IActionFilter, IFilterContainer\n{\n    IFilter IFilterContainer.FilterDefinition\n    {\n        get;\n        set;\n    }\n\n    public SampleFilterAttribute FilterDefinition\n    {\n        get\n        {\n            return (DummyServiceFilterAttribute)((IFilterContainer)this).FilterDefinition;\n        }\n    }\n\n    public DummyService DummyService { get; }\n\n    public SampleFilter(DummyService dummyService)\n    {\n        DummyService = dummyService;\n    }\n\n    public void OnActionExecuted(ActionExecutedContext context)\n    {\n        ((Controller)context.Controller).ViewBag.Title = FilterDefinition.ExtraText + \" \" + DummyService.Name;\n    }\n\n    public void OnActionExecuting(ActionExecutingContext context)\n    {\n    }\n}\n\n```\nAnd you just need to create the service you consume\nc#\n    public class DummyService\n    {\n        public string Name { get { return \"DummyServiceName\"; } }\n    }\nand register it in startup.cs\npublic void ConfigureServices(IServiceCollection services)\n        {            \n            // Add MVC services to the services container.\n            services.AddMvc();\n            services.AddSingleton<DummyService>();\n        }\n. @rynowak @lodejard \nWhat are your thoughts on a simplification to the sample above in the form of:\n``` c#\npublic class InjectedActionFilter : IActionFilter, IFilterContainer where TAttribute : ITypeFilter // add extra interface here e.g. IAsyncActionFilter ...\n{\n        IFilter IFilterContainer.FilterDefinition { get; set; }\n    public TAttribute FilterDefinition\n    {\n        get\n        {\n            return (TAttribute)((IFilterContainer)this).FilterDefinition;\n        }\n    }\n\n    public virtual void OnActionExecuted(ActionExecutedContext context) { }\n    public virtual void OnActionExecuting(ActionExecutingContext context) { }\n    // Add all other missing methods here ...\n\n}\n```\n. My solution does not use property injection, it uses constructor injection. The IFilterContainer has nothing to do with DI, it's a built in part of the filter system, that provides the captured attribute to the filter.\nAnd yes this solution is transient, which is probably the correct default pattern anyways, and hence there is no thread safety issue here. It also making writing the constructor simple and you don't have to know about IFilterContainer.\nSee - https://github.com/aspnet/Mvc/blob/ba1884aacb313393ea6eb48c6700b2c4582da599/src/Microsoft.AspNet.Mvc.Core/Filters/DefaultFilterProvider.cs#L98-L109\nIn DefaultFilterProvider.cs:\n``` c#\nprivate void ApplyFilterToContainer(object actualFilter, IFilter filterMetadata)\n{\n    Contract.Assert(actualFilter != null, \"actualFilter should not be null\");\n    Contract.Assert(filterMetadata != null, \"filterMetadata should not be null\");\nvar container = actualFilter as IFilterContainer;\n\nif (container != null)\n{\n    container.FilterDefinition = filterMetadata;\n}\n\n}\n```\n. So I do see your point with method injection (Where you can just make the service singleton). Had a quick discussion with the rest of the team and here is what we think.\nToday you can build the mechanism I have above rather simply and quickly. Before committing or making a decision on an improved pattern we would like to focus on other pressing issues.\nI think the work done so far proved that the framework doesn't need to change significantly or at all to support this kind of nicer API.\nSo my suggestion for now is twofold:\n1. Feel free to use your suggestion in your own code or as a third party nuget package.\n2. Close the PR for now, until we can get an agreement to what are the next steps and when is the appropriate time to take it.\n3. Continue the discussion on this thread until we reach some conclusion. When we do, we will more than welcome a PR from you.\nAgain thanks for bringing up the idea and following through.\n. :shipit: from me with some comments\n1. Make sure you are using the latest vs (so the changes to kproj are valid) or revert the kproj changes\n2. Squash the commits (duh!)\n3. Get a :shipit: from @rynowak as well\n. Please add a remark comment to the RazorViewEngine, clarifying how it works, and send a link to the UE folks and other interested parties\nCC @riande @MikeWasson @jongalloway \n. Where are the tests?\n. @PinpointTownes thanks!\n. '@' in front of a string is a C# language feature, so this doesn't look like it should make any difference. I'm suspecting there is something else in your code.\nI'm also not clear on what return action create recursively means. Please see if you changed something else in your code to make the problem go away.\nFeel free to reopen and provide a small full repro.\n. So first its an mvc5 bug and not mvc6. We don't track mvc5 bugs here.\nThe issue you see is because you have a new line in response.statusdescription which is nit valid http.\nThe support for status description was removed in vNext so this issue will not repro. And I don't think we will fix it for MVC5 (the fix is to just throw, it doesn't meet our bar of things to fix).\nThanks for the repro!\n. This is not an issue. Please post similar questions on stackoverflow. Feel free to add a link here.\nHere is the tag for vNext - http://stackoverflow.com/questions/tagged/asp.net-vnext\n. We do not plan to implement nested areas in the system.\nBut you can easily do it yourself by implementing your own 'SubAreaAttribute' - See the code for 'AreaAttribute'.\nYou will also have to implement a custom 'ViewExpander' to allow for views to come from the nested Areas.\nWe might come up with a sample that shows how to do it at some point, we just don't plan to make this a first class support.\n. Multiples don't mesh though, so its not really a design choice\n. @lodejard @davidfowl please provide guidance here.\n. @Alxandr it could, but in the scenario described here accessing the user before selecting an action and authorizing (say in middleware) will result in inconsistent results. We need to chat this through in more details, and will get back here with a more detailed design.\n. @RickStrahl this is a very valid concern. We are working on a slightly different mechanism to allow working with json (or formatted objects in general) and similar mechanism to update them.\nWe will post more details after we make some more headway on the design direction, it's on the plans for the Beta 2 or RC milestones\n. @RickStrahl this is a top priority, we have a developer working on this already. We are still in initial exploratory phase. If it's ok with you we might bounce the initial designs off you for experimenation.\n. We are planning to resolve this with #1776, the actual work is tracked by #1654 and #1642, we don't plan to build a mapper in the system, we verified our scenarios with AutoMapper on the desktop framework. When AutoMapper becomes available to CoreCLR it will enable the scenario there as well\n. Duped in #1204\n. Yes, that was the intent.\n. @HaoK - Please provide an issue that matches this item, so we can execute on this. Also please note when this is planned for.\n. @sheryever you won't be able to use @controller as a name reliably. \nAll this is going to do is interfere with the Razor parser, that takes @ as a transition.\nIt is something we spent a lot of time thinking about, and realized it is not something reasonably achievable at least not for RTM.\n. @mbeckenbach lets move this issue to the proper repo - https://github.com/aspnet/Security/issues \n. Thanks for the feedback, but we are not going to split the project again. We consistently got the exact opposite feedback, there is very little cost of having the Razor package in your project. On the other hand, formatting is a very important feature for an MVC framework as well, particularly when your application is heavily ajax based.\nPlease file a separate issue for the authentication story in the Identity repo, and we will help you with a sample.\n. Thanks for the feedback, we are going to take a look.\n. @Eilon was this an intentional supported feature?\n. @gibeon-andrew great catch. Thanks!\n. @alikor we are not planning to support composing multiple startups as part of MVC at least not in V1 RTM. This is where higher level frameworks come into play. The area is more complex that what it seems on the surface. And a framework like Orchard is something that supports this kind of thing through modules.\nThe closest you can do today is to:\n1. Write your own startup.cs that calls into other well known methods on the \"referenced\" projects. Build your controllers with route attributes.\n2. Write all controllers with attribute routes\n3. Write a custom deployment script that will copy and combine all the views in the views folder of the main app, or like @pranavkm suggests build a custom view engine that will provide access to all the views in the different folders of each project. You will have to be responsible for ordering (which folder to search first, and what to do with duplicates, and can layouts be shared etc.)\n. Like we discussed lets change this to use embedded resources file system (that will start with the actual file system, and fallback to the resources).\nI'm also not clear on why we need to create files on disk at runtime rather then pre-create at design time? I don't see what putting the datetime.now in the file achieves.\n. @avanderhoorn awesome! I was meaning to reach out to you, and see what else you guys need from logging. This one is already being worked on by @SonjaKhan (what I've seen today is logging for what filters are registered per action), we also plan to do the same for the execution itself.\n. We are working in sync on this. @SonjaKhan thanks for reaching out :)\n. First note that there is no more selection of what controller is going to run in MVC 6, this concept just does not exist. The only selection that happens is action selection.\nFilters cannot change what action is going to get invoked, they run after the action was selected. A filter though can short circuit (that's already tracked as an issue).\nI'm not sure what other state filters may change (in the built in filters), user code can change everything that flows in the request, the context is quite large and I don't think we are going to build any change notifications for that. I'm open to suggestion on this though, let me know what you think?\nActionMethodSelector is a mechanism allowing selection of methods based on arbitrary code (similar to MVC5 but with cooperative capabilities), I opened a issue to make sure we have adequate logging already tracking this. #1640\nHere is a sample site using the feature for versioning:\nhttps://github.com/aspnet/Mvc/tree/315908af5fa9e08dfc703b5070b39925d48360eb/test/WebSites/VersioningWebSite\n. I'm keeping this open for discussion, at the moment I don't see any direct action to be taken other than #1640.\n. There will be a few limited things that can be done here, and they can potentially be quite expensive. An example could be capture state and compare when in verbose mode.\nWe need to do some thinking about this, and see how far we can go down this path.\nCC @rynowak \n. Moved over to aspnet/HttpAbstractions#153\n. We will do this for all formatters.\nNeed to add a test for the text/plain formatter - also rename TextPlainOutputFormatter to StringFormatter\nIf the object result has a content type set, we will use that content type (instead of text/plain)\n. Decided to leave this alone. It causes very interesting subtle issues with respecting CharSet. And ultimately the user can just return a ContentResult if he wants to customize the ContentType\n. #1826 \nResolved by 9ac37fbc7\n. @sayedihashimi @davidfowl @rustd  - Please review\n@am11 - Thanks for reporting this. I'm adding the relevant team owner here. Scaffolding work does't happen in this repo, it will be useful to open tooling (scaffolding/templates) in the home repo.\n. @HaoK can you share the advantages of removing it, and putting everything in the extension method?\nRelevant code in MVC below:\nhttps://github.com/aspnet/Mvc/blob/27432d94530405f424e9015c8c5311907bd48b3f/src/Microsoft.AspNet.Mvc/MvcServiceCollectionExtensions.cs#L16\nhttps://github.com/aspnet/Mvc/blob/27432d94530405f424e9015c8c5311907bd48b3f/src/Microsoft.AspNet.Mvc/MvcServices.cs#L26\n. @pranavkm please provide specific details on what the task is. As it is it cannot be worked on or assigned to anyone\n. @pranavkm can you provide samples of what is broken here?\n. There is no real bug here. This should do both, because the path can come from precompilation, and the separators can be different between compile time and runtime.\nJust add a comment explaining why this is done this way.\n. @avanderhoorn they remain in that assembly. \nFor now this just works, but shortly we are going to add the target either on github, or by adding it to 5.2.3/5.2.4.\n. Although this issue might not actually end up implemented in this repo or on github. It's still a reasonable place to track it publicly.\n. Thanks @am11, sounds like a neat idea.\n. We will look at this post V1 RTM.\nThe issues we want to investigate are ordering and optional parameters\n``` c#\nTags[].Name\nTags[].Name\nTags[].Name\nTags[].Description\nTags[].Description // Note only two descriptions here\n``\n. @joanbarros is right,SelectListexposes theSelectedItemproperty thatIEnumerable`does not.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Rendering/SelectList.cs#L59\nThere is however a way to do it: You should be able to specify the selected item by setting Selected on the SelectedListItem\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Rendering/SelectListItem.cs#L20\n. Looking through the code in depth, I am reverting my statement above. These should behave the same. Can you please share a small repro?\n. Can you add a sample that shows the authentication selection piece? Both as a single policy and as composed?\nOther than that, it looks pretty clean. And I agree with backcompat feedback from @blowdart \nIf the policy does't exist we should throw, because it's a programming error, and the user will get a 500.\nOptional: We can add code at startup to verify that all asked for policies are configured, and not start the server with a decent error.\n. We are not hiding stuff from intellisense or obsoleting things for that matter.\nThe furthest we go is to hide stuff in non major namespace which unfortunately doesn't apply here.\n. Matter of principle. If we want a compat shim we should build it as such. Different attribute perhaps in a different package \n. @HaoK where does this PR stand?\n. CC @DamianEdwards @NTaylorMullen @dougbu \n. We should also rename the ConfigureMvc method in MvcOptionsSetup to avoid name collission/confusion.\nhttps://github.com/aspnet/Mvc/blob/9ac37fbc7a0be1138d69493a9a3d50a0a5e04826/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs#L24\n. Thanks for alerting us to this issue. I just talked with @lodejard and because all our other folder names are capitalized, we decided to change KRE to follow the same pattern.\nPlease change this to the following pattern\nCompiler/Preprocess\nnote the second P in Preprocess\n. @pranavkm can you please work on this. (Verify CLA with @Eilon , and content)\n. This issue is not clear enough. Please edit and add details.\n. Empty\n. Need to be specific about the trace level we want here.\nWe got to be careful when selecting the level, as for example Warning might be too verbose, for the cases exposed above.\n. This looks a lot like Glimpse.\n. Talked with @Eilon and @loudej and decided we don't want to address this (even as a side project) for MVC 6 first release.\n. Please specify exactly what options we want for each taghelper. I'm suspecting many of them don't need it.\nI'm also concerned with creating too many configure extension methods, polluting intellisense for the service collection. What do you think about an extension method: ConfigureTagHelpers that then exposes all of the other specific extension methods\n. I agree with separate options objects.\nI'm suggesting that the extensions methods don't extend IServicesCollection, instead extend something else that redirects to IServicesCollection like ITagHelperOptionsCollection. \nSo the extension method looks like\nc#\npublic static ITagHelperOptionsCollection ConfigureTagHelpers(this IServiceCollection serviceCollection)\n{\n    return new TagHelperOptionsCollection(serviceCollection);\n}\nAnd the extension method does exactly the same thing except it only shows a just the tag helper items\n``` C#\npublic static ITagHelperOptionsCollection ConfigureFormTagHelper(this ITagHelperCollection thp, ...)\n{\n}\n```\nThis way you create a list of individual objects, that will keep growing as third parties provide their tag helpers, but is not going to make the basic intellisense for configuring services horribly large.\n. @DamianEdwards do you want come up with the list of options we want to support per tag helper, or should we just assign this to an Engineer that will gather the requirements?\n. @pranavkm can you please merge?\n. https://github.com/aspnet/Mvc/commit/d3344f0766146ce0bb9ee81216f1c5058767a6ce\n. For the @addtaghelper comment - We want to add tag helpers explicitly, so you can opt in/out.\nCompilation is not necessary available at pre compilation, so you can't just consume it. It is not always available as sometimes you just have the compiled assemblies that contain the tag helpers. So this needs so more thought.\nFor now your best bet is to create custom tag helpers in a separate project you reference (its also making them a hell of a lot more reusable).\nCC @davidfowl @NTaylorMullen @DamianEdwards \n. What is the help page you are referring to? MSDN? Can you add a link?\n. We are tracking a similar item (except we don't plan to go through .cshtml but through formatters) and we also do not plan to support merging views and formatters (though its rather easy to add yourself)\n@rynowak can you please dedup with mugdha's items\n. You are very clear. We have considered this (in fact it is already tracked elsewhere) and decided not to support this at this moment.\nThough it is not too hard to write. We are going to plan converting extensions to data, so most of the heavy lifting will be done, and you will be able to do something as simple as a single if statement to switch between formatting and views. Or if you want to go down the view forking path you will be able to use a view extender.\nWe will consider revisiting this post RTM.\n. Please feel free to spike, but do not submit a pr. The question is not about if it can be made (it definitely can) rather if it fits in the core framework and if so for what version.\n. a rather simple way to get there:\n1. Include a .{extension} in the route pattern. You can do it manually OR write an application model to add it. https://github.com/aspnet/Mvc/blob/dev/test/WebSites/ApplicationModelWebSite/Controllers/ActionModelController.cs is a good start, but in your case you will apply the model directly to the MvcOptions\n2. You can either fork to use formatters vs. view, by checking the extension == html OR you can go with your suggestion where you fork by using different views.\n2.a Write a converter from extension to content type, and if the extension != html, return an object result/change the result to a content result in an actionfilter. You can also apply a Produces attribute or equivalent code based on the bound value.\n2.b. Write a viewengine extender, that will add the extension to the built in search paths. See this code for a sample - https://github.com/aspnet/Mvc/blob/dev/samples/MvcSample.Web/LanguageViewLocationExpander.cs\nNote - We are planning to implement item 1 (and some more) for RC.\n. I believe this is a dup. Can you dedup please?\n. I couldn't find a duplicate, but these two items are related #1204 #518\n. We discussed the precompilation scenario, and we don't think that for items in the precompilation stage we actually need to hook up a filewatcher. It is probably enough to just do the copying. We should never hit the disk (in the precompilation scenario) until we actually try to serve the view\n. @RickAndMSFT - Do you want to submit a PR for this?\n. @rafa-l thanks for your input. We are already tracking this issue in #1130, I added your comment about app_code.\nIn ASPNET 5 and MVC 6, there is no such concept as special folders, but app_code was a way to precompile a set of files at startup, so we need to come up with a replacement concept that will separate the .cshtml files for views and helpers (or come up with something else, like a different extension).\nThe feature is right now slated for RC, but there is a reasonable chance it will happen in a later milestone, we will figure this out in the next few weeks.\n. How does this work for other model binders when the value does not exist?\n. The suggestion is to fix this by changing the context to have another flag that indicates if a value was produced. This flag will be set to true by default if the value setter was invoked.\n. We also want to consider as part of this change moving default value setting to a single location (where now it is spread between MutableObjectModelBinder and ActionExecutor\n. We should consider the following things as well when fixing this:\n1. Controller\n2. Action\n3. Area\n4. View Expander sample\n. @guy-lud like @rynowak mentions, you really don't need to override the action invoker for this, neither in MVC 5 or Web API 2.\nWe don't plan to add this syntax as it's really non standard, feel free to ping us for more advice if the solutions above do not resolve your scenario.\n. Duplicate of #1571\n. I agree with @rynowak in general, and that was the original intent. Either way we are rewriting the authorize attribute and this overload will does not fit in the new design see #1664.\n@HaoK \n. Hi Tony,\nI looked at the design for the Web API 2, and I like the general approach to the design. But I would like to refrain from adding one specific extension method (like the one in the mediatypecollection) right in the framework.\nInstead what I would like to do is add a set of extension methods like #1787, that allows direct access to the formatters (and allows removing them/changing them and direct access to the instance etc.).\nWe can then add the configuration suggestion you have directly to the formatter itself. Although i'm 50/50 on the json one, as it is just a simple assignment, the XML one however seems very useful.\nIn the meantime make sure you have a CLA signed, so you can take your contributions. Once we lock down the design we would be happy to take both #1787 and this issue from you (if you'd like).\n. @tonysneed this is awesome. Note that we have locked on the API surface we are looking for yet, and we are going to have some discussion early next week. If you have more feedback on the design please bring it on, so we can consider it before finalizing the pattern.\nI will also let you know when you CLA was approved so we can actually take the PRs.\nThanks!\n. Your CLA has been approved.\nI would start with individual PRs.\nPR 1 - First lets make DCS expose settings, note that we are in the process of changing the XML formatters (moving them to another package, and removing XML by default),\nalso note that DCS unfortunately derives from XML formatter (which we plan to change soon).\nPR 2 - Add extension methods to access the formatters by type\nI wouldn't do the one shot method, we separated the formatters and I'd rather not have these methods, a user can write two lines of code instead of one.\n. It's a build break, should be resolved soon \n. Assigned to @kichalla so he can merge and close the issue (after we are done with the cleanup PRs as well).  The rest of the work is in #1787 \n. @pranavkm says you have a PR coming for this\n. Should probably do this as a sweep of public APIs\n. We have discussed this in detail and we want to come up with a design where even if you have Json+XML getting chrome to return json by default is not a thing.\nWe believe that for public APIs XML is still a thing you want to expose to make your service more accessible.\nFor that we decided on three prong attack\n1. We will remove XML from the default formatters (both input and output), and keep JSON.\n2. We will move XML to a separate nuget package. - Microsoft.AspNet.Mvc.Xml, and will have an AddXml() extension method, that will add both formatters and any other settings required to make them play well with the system. We are thinking about leaving XML in the template. With change 3, the chrome issue goes away.\n3. We will ignore accept headers with */* in them for the purpose of content negotiation (which will make all browsers go to the first formatter by default). This behavior will be controllable by MvcOptions.\n. @nvivo these are really good thoughts, we debated them and decided to go with the current approach.\nFor separating JSON to its own package - We do take dependency on json.net in the JSON result, so we have to have the formatter in the MVC package.\nAs for having JSON as a default formatter, we are carefully balancing how much code goes in the template, and how easy it is to start with a clean slate with concerns for future compatibility.\nAdding a a few lines to change the default formatter is reasonable (and we plan to make it easier and cleaner) see #1787 (we still haven't fully closed on the design, but the intent is to simplify). Our main concern was the compatibility between XML and JSON, and the fact that you have XML end point by default even if you didn't intend to. Like you correctly commented option 3 already addresses the default for browsers.\n. Broken down into two separate issues #1791 and #1792\n. @jamescurran this used to be the case but not anymore. With the current bits, as soon as we see */*` we opt out of accept header based content negotiation and pick the first formatter available. There is still content negotiation going on based on the runtime type of the object, so the first formatter than can handle the type wins.\nThe jist of this design is that browsers hitting an api are not really opting into content negotiation, it is more of a way to test an API (not the right way, but a very convenient way). So we would like a consistent experience. A client on the other hand will (should) never provide a */*, as a */* is implied anyways.\n. Fixed with 2cf56c7c83e26b114648e77ee93d7ff26528788a\n. #1721 \n. #1654\n. We are not planning to address this. If the DCS serializer will improve we will get the benefit in MVC, but we plan no major action here at this point.\n. Consider #1808 as part of this change\n. We decided not to implement this feature\n. I chatted earlier with @davidfowl and he wasn't convinced that this is the right path yet. So please chat with him first before proceeding.\n. :shipit: when @davidfowl is happy with the name consolidation.\n. @sornaks please include the design suggestion in the description.\n. Seems interesting thing to discuss. Not sure what is the benefit of model binding to immutable types though. Can you elaborate?\n. You can alternatively define the IOptionsDescriptor<T> interface and use InstanceOf<T>(IEnumerable<object>)\ne.g.\nC#\npublic class InputFormatterDescriptor : OptionDescriptor<IInputFormatter>, \n                   IOptionDescriptor<IInputFormatter>\n{\n     ...\n}\nand\nC#\npublic interface IOptionDescriptor<out TOption>\n{\n    Type OptionType { get; }\n    TOption Instance { get; }\n}\nand\nC#\npublic class OptionDescriptor<TOption> : IOptionDescriptor<TOption>\n{\n    ....\n}\nand finally\nC#\npublic static TInstance InstanceOf<TInstance>([NotNull] this IEnumerable<IOptionDescriptor<object>> descriptors) \n{\n    return default(TInstance);\n}\n. :shipit:\n. :shipit: when comments are addressed\n. @DamianEdwards  and @GrabYourPitchforks told me they have something we wrote for SignalR. We should first measure the difference in speed. Another alternative is to start by comparing the first say 0.5KB and only if it is the same compare the rest by chunks, because we want to fail fast.\n. :shipit: when comments addressed and the rest of folks are happy\n. We currently have no firm roadmap for OData in ASP.NET 5 on the server side.\nThe work for OData (and the team responsible to prioritize the work) tracks the work in - https://github.com/OData/WebApi/issues\n. @nfplee since the feature is not yet in, it's probably better to just comment on the PR first\n. We are tracking a potential improvement to make it easier to write this type of trigger #1873\n. When fixing this ignore the status code on the response, but respect the status code from ObjectResult. The NoContentFormatter should still act and short circuit so no json/XML with null is written\n. :shipit: when everyone else is happy\n. :shipit: when comments are addressed and others sign off\n. :shipit: \n. :shipit: when comments are addressed\n. @harshgMSFT we need the readme.md in one folder up, and keep something in the wwwroot folder (so it doesn't get removed). say HelloWorld.Html with the content Hello World\n. :watch: \n. :shipit: when comments are addressed.\n. Add verification for the other result types, even if it is just to verify what is that they return and the data. This will prevent inadvertent breaking changes\n. :watch: \n. :shipit: when @rynowak is happy\n. :shipit: but we need an issue for the functional test part\n. :shipit: \n. :shipit: when comments are addressed\n. Merged https://github.com/aspnet/Mvc/commit/0c5a7022454dccac267b62325372d313f0e69266\n. :shipit: and try to get @pranavkm to review the tests\n. :shipit: \n. :shipit: when done with comments\n. I do agree with you that we probably don't want the users to have to memorize or cast status codes. The issue for this belongs in Http Abstractions Repo, but we can chat further here on the overall design and then file it in the right place. @Tratcher \nAlso some other good news is we made a change (see https://github.com/aspnet/Mvc/commit/692a07240c34ee12c317eddb7cc28d744818b02d) that should alleviate some of this pain,\nWe tried to streamline the existing results and make them more useful without having to touch the response directly. For example, we added the status code directly to the json result.\nFor the specific sample in the comment above note that you already have the CreatedResult and you can control the fact that it will return json using the Produces attribute. (It does require a link, and you should probably provide it).\nSo your code can just look like:\n``` C#\n    [HttpPost(\"\")]\n    [Produces(\"application/json\")]\n    public async Task Post(Visit newVisit)\n    {\n      var username = User.Identity.GetUserName();\n  newVisit.UserName = username;\n\n  if (await _repository.AddVisitAsync(newVisit))\n  {\n      return Created(\"location\", newVisit); // or use Uri, or CreateAtXXX overloads\n  }\n\n  return BadRequest();\n}\n\nAlso note that by default the XML formatter is not in, so the produces is not strictly required.\nSo we are thinking that for most users there is a way to write your code without worrying about hard coding status codes.\n```\n. @shawnwildermuth please let us know if you expect any other changes other then the ones we completed and aspnet/HttpAbstractions#174, if so please go ahead and reopen the issue.\n. Need a functional test instead of the sample update\n. :shipit: \n. @rmja can you please clarify what your action code looks like?\nI assume you are calling return Json(model) which is when we might fallback to the default json formatter?\nIn that case I assume you can just return the model directly (or return ObjectResult(model))\n. We need to revert this change. This was an intended security guarantee. Instead we need to provide a non-generic version that takes the type as input in a non-generic way\n. In short people using mvc5 have exact opposite expectations (because that's how the code worked) so that would create an overbinding problem. Hence we provide an explicit overload just like mvc5 did.\n-----Original Message-----\nFrom: \"Max Toro\" notifications@github.com\nSent: \u200e1/\u200e29/\u200e2015 5:17 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] TryUpdateModel: Determine model type at runtime (#1837)\n@yishaigalatzer Would you mind explaining the security concerns?\n\u2014\nReply to this email directly or view it on GitHub.=\n. @doug if you have concerns with existing design file a separate bug. Lets keep the concerns separate\n-----Original Message-----\nFrom: \"Doug Bunting\" notifications@github.com\nSent: \u200e1/\u200e29/\u200e2015 2:16 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] TryUpdateModel: Determine model type at runtime (#1837)\nfor how many of the existing Controller.TryUpdateModelAsync(...) overloads will we create TryUpdateModelAsync(Type modelType, ...) equivalents? e.g. suspect overloads with [NotNull] params Expression>[] includeExpressions parameters won't be that helpful.\nseparately can we remove the ModelBindingHelper.TryUpdateModelAsync() overload that just defaults the predicate (do that in Controller) and change the overload that takes a predicate to use Type modelType as well? that is, let's try not to duplicate too much.\n\u2014\nReply to this email directly or view it on GitHub.=\n. I get your point. This is dealing with unsafe inputs scenarios, so we cannot be liberal with that.\nThe additional overloads provide an easy escape hatch.\n-----Original Message-----\nFrom: \"Max Toro\" notifications@github.com\nSent: \u200e1/\u200e29/\u200e2015 8:07 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] TryUpdateModel: Determine model type at runtime (#1837)\n@yishaigalatzer Cannot argue against back compat. There's little value in adding more overloads, which anyone can do. If the default behavior is not changed, what's the point.\nThere are other parts of the framework that work against the runtime type instead of the declared type, e.g. Html.EditorForModel(). My intention was to make these different parts work together without special configuration.\n\u2014\nReply to this email directly or view it on GitHub.=\n. From quick reading over the phone. I got a couple of comments:\n1. The new method should no be on the html helper.\n2. The method names should be consistent SetCookieAndHeader on an AntiForgery helper. The name getcookie doesn't fit in a method returning void\n. @danroth27 what do we want to do on docs for this?\n. @Shazwazza we haven't forgotten about this, still figuring out the doc story.\n. We are going to fix the quotes issue for Beta3, and followup with a bug in Http Abstraction for the aspnet/HttpAbstractions#175\n. :shipit: and keep the PR open for a few more hours to let other people take a look\n. :shipit: from me, get another reviewer though to signoff\n. Other than minor comments looks ok to me :shipit: \n@rynowak has investigated this so he might have more feedback\n. The build is not broken. The reference is available indirectly.\n@rmja thanks for this change, although we are not taking it (because it is not necessary), I would suggest you sign a CLA so the next PR can make it speedily in.\nPlease review the Contribution guidelines and sign the CLA\n. Throw when * is provided.\n. Overall the code looks good. Just need doc fixing :watch: \n. Add the missing comment then :shipit: \n. Figure out the couple of minor comments then :shipit: \n. @kirthik we discussed a set of other changes we wanted (which escapes my mind at the moment) please provide more details on the bug, or else its not very actionable.\n. There is no FormValueCollection type in MVC6 that I can find. Please reopen (if relevant with more specific pointers)\n. Boglen, so seems there is not much for MVC to do here.\nNote that we pushed a change to fix the binding issue you are seeing (assuming you are using the latest nightly build)\nFix issue commit:\nhttps://github.com/aspnet/Mvc/commit/67b078862ee36a846af1b81088e3f2f73f5de3e2\nOriginal commit:\nhttps://github.com/aspnet/Mvc/commit/437eb93bdec0d9238d672711ebd7bd3097b6537d\nPlease open a separate issue if the binding still doesn't work after getting the latest dev branch.\nCC // @ajaybhargavb \n. Good catch, thanks. We will merge shortly.\n:shipit: \n. :shipit: \n. @GrabYourPitchforks say something if you think we should fix this.\n. Quick note - It's much nicer to have a cleanup PR separate from the actual code change, makes the review goes a lot easier.\n. I'm not sure I quite follow the reasoning for adding ordering by Name, is it the same behavior as MVC5? Can you illustrate the benefit?\n. :shipit: but get one more set of eyes on the tests & Add the missing docs\n. Lets please separate the issues. @MattGal providing better error messages for startup scenarios doesn't really belong in the MVC repo. Please open an issue on Home or Kruntime.\n@mbeckenbach I think you have an incompatible KVM since the VS project templates point to Beta2. Feel free to go on Jabbr or SO for such support questions, this just doesn't seem like an actual bug we need to fix.\n. @tonysneed Thanks for the PR. Note the XML is going to shortly move into a separate nuget package, this might get in the way of rebasing.\nYour CLA is approved.\n. Overall looks pretty good to me. Waiting for another detailed review and :shipit: from one more person\n. One more thing, of course removing the TODO, means you have tested on Mono. Let us know if its hard and we can give it a try\n. > I've now completed all the requested changes for this PR. :clap:\n\nAt this point it, I have a few cosmetic improvements I'd like to suggest.\n1. Some changes to XmlDataContractSerializerInputFormatter.CreateDataContractSerializer (see >inline comments to follow).\n\nYes! Separate cleanup maybe?\n\n\nRename XmlDataContractSerializerInputFormatterTest (make it plural), and take out ASPNET50 >preprocessor directive if not needed.\n\n\nsure\n\n\nRename namespace of XmlDataContractSerializerOutputFormatterTests: remove \".Core\" to >make it consistent with the other test classes.\n\n\nThese tests should move to the .XML namespace\n\n\nRemove XmlDataContractSerializerFormatter from the test method names to make them more >readable, which had been suggested earlier.\n\n\nSure\n\n\nPossibly move the xml formatter tests to a separate project -- Microsoft.AspNet.Mvc.Xml.Test.\n\n\nPotentially yes but please examine carefully, because many of the tests involving them are really testing conneg in general which is a core framework feature. So we can't just take that dependency out of the core tests.\nLike I mention above these are good suggestions, we are trying to keep PRs focused on the changes they introduce, and make cosmetic cleanup in separate PRs.\nAnd thanks for being so diligent, this is turning to be the PR of the month :trophy:\n. Just need a final pass, if it is all ok than we will merge :)\n. @kichalla please merge\n. https://github.com/aspnet/Mvc/pull/1900\n. https://github.com/aspnet/Mvc/pull/1900\n. @DamianEdwards we took a second look, and it seems that other than @using no other directive really allows for a trailing ;\nSo I'm suggesting we deal with this post RTM, it's nice cleanup, but not something we ever supported. The issue with a lot of errors is an actual Roslyn bug that will get cleaned up at some point.\n. :shipit: \n. https://github.com/yishaigalatzer/ResourceController is a simple alrernative\n. :watch: \n. :shipit: from me after fixing minor issues\n. We don't think this is a common scenario enough to worry about. We have discussed this in detail and decided it is not useful enough to make the validation pipeline async considering that making one thing async is a viral change all the way up the stack from it.\nFor the scenario described above:\nWhen you validate a user in views you use a remote attribute.\nYou can validate the business decision in the action itself rather than in a validation rule for the object.\n. We don't think this is a common scenario enough to worry about. We have discussed this in detail and decided it is not useful enough to make the validation pipeline async considering that making one thing async is a viral change all the way up the stack from it.\nFor the scenario described above:\nWhen you validate a user in views you use a remote attribute.\nYou can validate the business decision in the action itself rather than in a validation rule for the object.\n. The good news is that filters are async so you can do the work in global action filter and not throw\n-----Original Message-----\nFrom: \"Brendan Ridenour\" notifications@github.com\nSent: \u200e1/\u200e28/\u200e2015 4:02 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Async IModelValidator (#1884)\nI understand this decision and knew you would have talked about this. Unfortunately for me though, my company's core validation cannot be ported over the use Mvc's model binding now. For good reason, our model validation implementation is async all the way up our stack. And we can't provably call our async code in Mvc's sync interfaces without deadlock issues (or always enforce ConfigureAsync(false)).\nSo we'll need to keep throwing typed exceptions in our Mvc apps and catch them in filters. Not ideal but I do understand why the masses wouldn't need async model validation 90% of the time. Oh well.\nThanks for the reply.\n\u2014\nReply to this email directly or view it on GitHub.=\n. The work involved in building this feature is negligible. Just need a good name.\n-----Original Message-----\nFrom: \"Eilon Lipton\" notifications@github.com\nSent: \u200e1/\u200e25/\u200e2015 8:20 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Consider adding a UseMvcWithDefaultRoute extension onBuilderExtensions that adds default routes to the route collection (#1885)\nI'd like to state that it is critical that trivial apps not require a bunch of setup code.\nAttribute routing solves this to a good degree. For conventional routing users it's now a bit of a hassle.\nIf we think attribute routing is the recommended approach for the \"getting started\" scenario, then I'd concede that the importance of this feature is lower. (And, it can be added at any time.)\n\u2014\nReply to this email directly or view it on GitHub.=\n. @kichalla please merge\n. Please work with the Roslyn and CLR folks to verify if:\n1. Is the order consistent if you use the same compiler and same code.\n2. Is the order the definition order if you have a simple POCO.\n3. Can the order change at runtime\n. We should fix CanAddErrors to return false when the next error being added is TooManyModelErrors.\nFix doc comment for MaxAllowedErrors (or add a remark).\nThe others are by design.\n. Combine it when you fix the other MaxModelErrors issue\n. :shipit: from me\n. Why would you have a delegate in your model? or an Assembly? Should this really belong on a DTO?\nFortunately with MVC 6 you can add anything you want us to skip, we don't plan to add additional types that are not commonly used, because that list is pretty much infinite. You have now the capability to add whatever you chose to exclude.\n. Why would you have a delegate in your model? or an Assembly? Should this really belong on a DTO?\nFortunately with MVC 6 you can add anything you want us to skip, we don't plan to add additional types that are not commonly used, because that list is pretty much infinite. You have now the capability to add whatever you chose to exclude.\n.  couple of comments: \n1. You can have a registration code for your package that adds them to options, along with the rest of your customizations for json.NET. The reason we shouldn't be adding every other type is because the list is pretty much infinite and we provided a decent extensible mechanism to add your own excludes.\nsomething like:\nC#\npublic static IServiceCollection AddPatch(this IServiceCollection services)\n{\n    services.Configure<MvcOptions>(options =>\n        {\n            options.InstanceOf<JsonInputFormatter>().SerializerSettings.DoYourThing(); // InstanceOf is in PR\n            options.ValidationExcludeFilters.Add(typeof(Assembly));\n        });\n}\nOr you can do something more involved like here - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/SimpleTypesExcludeFilter.cs\nAlso note that we are planning to add patch support before rtm-ing, so if you are interested in that kind of support you might want to participate in that feature design when we get closer so it actually happens in the framework. \nEither way please let me know if you are still blocked an we will take a second look.\nAnother thing to try out is decorating the property with [BindNever] attribute it should skip validation (though we might want to have proper [ValidateNever] attribute\n. > One other thing that might be worth considering is a configurable limit on validation time or count of objects visited, so if something weird happens developers might get an error instead of a random slowdown.\nWe added a limitation on number of errors produced in validation. But time limits don't quite work for a set of reasons\n1. You can't predict time in .NET reliably, you might be encountering GEN2 GC pass, that will inflate times.\n2. For the scenario you described the time will be very fast (ms) where some users do upload very large objects where validation can take easily longer and be expected.\nFor reason 2 you will have the same issue with objects visited limitation.\nWhat can you do about slowdowns You can write a logger for request taking longer than X, and log a warning. I also added a note to make sure we remember to log validation time in #1566 \n\nThat sounds interesting, where can I participate?\nStart by commenting and suggesting designs as well as following #650\n. :shipit: after addressing minor comments\n. If you are using the dev branch, you need to be updated with the latest KVM etc. (Note that in the last couple of days we have been renaming folders and commands, and I would suggest to wait a couple of days until the dust settles on that before going back to working on the dev branch.\n\nIn any case this is not an MVC issue, if you want further support working on the dev branch which is the current edge of development, best place is to go in to https://jabbr.net/#/rooms/AspNetvNext\n. If you are using the dev branch, you need to be updated with the latest KVM etc. (Note that in the last couple of days we have been renaming folders and commands, and I would suggest to wait a couple of days until the dust settles on that before going back to working on the dev branch.\nIn any case this is not an MVC issue, if you want further support working on the dev branch which is the current edge of development, best place is to go in to https://jabbr.net/#/rooms/AspNetvNext\n. When you are testing the beta build you should not use MVC with -* use specifically \"Microsoft.AspNet.Mvc\": \"6.0.0-beta2\". When you are testing the beta build you should not use MVC with-*use specifically \"Microsoft.AspNet.Mvc\": \"6.0.0-beta2\"\n. The right place for these reports in connect, this is not an MVC issue for sure. @mayurid do you have more info on this?\n. You welcome\n. @tonysneed thanks for bringing it up, I believe you meant you changed InputFormatterDescriptor and OutputFormatterDescriptor. I can take a look at the others as well and get back to you, I think it makes sense to make the similar but I want to take some time and think it through \n. This looks fine, here is the list of all the other\nExcludeValidation - No, we don't encourage removing stuff from here\nInputFormatter - No , clear should do it. There is just the json input formatter there\nModelBinder - Yes\nModelValidatorProvider - No, clear should do it for 99% of cases if you want to replace.\nOutputFormatter - Yes (done)\nValueProviderFactory - Yes , although not super common, might be useful to remove Form support.\nViewEngine - No, one entry by default, clear just does it.\nViewLocationExpander - No, Empty by default\n. @tonysneed  Not a bad idea, lets do it and call it a day for this PR.\n. Also looks like something is messed up with the changes (now showing 313 files with lots of other peoples commits). You might want to rebase on dev again.\n. Squash and @dougbu s going to do a final pass then merge\n. :watch: \n. :shipit: \n. Please provide more details here. Not sure this is actionable.\n. @rynowak lets discuss tomorrow and assign\n. Talking to @Eilon yesterday, I thought this was no ok to take?\nAlso please follow up with @GrabYourPitchforks we should probably provide a key to select hashing algorithm so we can change it if we find issues without a breaking change\n. > Could we remove RazorHash and just make the Crc32 a public type instead \\ change properties to be Crc32? Having algorithm lookups for this seems like overkill\nNo, this is exactly the problem. If we end up with collisions or wanting to do perf improvements for some reason you are stuck with CRC32\n. :shipit: when comments are addressed\n. :shipit: when @rynowak is happy\n. @DamianEdwards lets triage.\n. @stanislavromanov what you are seeing is the cshtml the html will not have any of these attributes or tags, only the localized string.\n. @DamianEdwards lets set up a design meeting so we can get loc supported up and down the stack\n. CC // @lodejard @Eilon \n. This would follow the casing, just like we do in tag helpers\n-----Original Message-----\nFrom: \"Eilon Lipton\" notifications@github.com\nSent: \u200e1/\u200e31/\u200e2015 8:23 AM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] FromHeader should auto translate properties to kebab casing(#1930)\nHow would you know what to translate? There's no transformation that can reliably do this. We could consider doing underscore to hyphen translation, as we do for HTML attributes.\n\u2014\nReply to this email directly or view it on GitHub.=\n. It's actually pretty straight forward for any one of the samples. If you just follow Pascal casing, but I like the idea of the well know header names (case insensitive translation).\nWithout it you end up with pretty ugly and none standard looking property names.\nSpecifically to the samples above:\nX-HTTP-Method-Override - XHttpMethodOverride\nEtag\nThe rule is quite simple and easy to understand, however I do have one concern with the fact that the translation is not as clear as it is in tag helpers. In tag helpers you get intellisense for generated html attributes. In html helpers you can see the generated html. Here you are left guessing when it doesn't work like you expected. So perhaps underscore conversion is the way to go.\nWill retriage next week.\n-----Original Message-----\nFrom: \"Eilon Lipton\" notifications@github.com\nSent: \u200e2/\u200e1/\u200e2015 4:00 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] FromHeader should auto translate properties to kebab casing(#1930)\nThe transformation in tag helpers doesn't generally work with HTTP header names. It's also a very different scenario: in tag helpers it's transforming one set of arbitrary strings to another; in this case it's attempting to do a specific transformation.\nA great example of why this won't work here is this: would the logic translate a property named ETag to E-Tag? In fact it should leave ETag alone. How would you describe the X-HTTP-Method-Override header as a C# identifier?\nThere are no rules for translating a property name to an HTTP header name with hyphenation, so I urge us not to try. However, converting underscores to hyphens is fairly predictable. An alternative that in my mind is almost as good is to just have a built-in dictionary of all the well-known HTTP header transformation and just use that. If it's not well-known, just leave it alone.\n\u2014\nReply to this email directly or view it on GitHub.=\n. @harshgMSFT - Please don't get started on this. And I have a related question: What does [FromHeader] with no Name specified means? Should we just move it to a constructor because it is currently required?\n. Add a test that verifies we get modelstate errors when header value is missing\n. :watch: \n. Verify this specifically even if it is just for a sample (header + required)\n. :Shipit: when test there\n. @HaoK I believe this is tracked in your redo of AuthorizationFilterAttribute but I couldn't find the specific bug/design tracking this.\n. Should we close this one as well https://github.com/aspnet/Mvc/issues/634?\n. We should consider doing something special for templates (as templates are similar to partial views, but they have a different context), so perhaps some indication of the type of view that the code is executing in (enum? or set of well known strings?).\nWe had a quick discussion with @pranavkm and we think ViewContext should work.\n. :+1: one a basic unit test\n. #2012 \n. Also change the samples:\nHere: https://github.com/aspnet/Mvc/blob/dev/samples/MvcSample.Web/Startup.cs#L63\nAdd an extension method for: RazorViewEngineOptions\nAnd look for other Option classes we have, and lets discuss if we want extension methods for them as well.\n. updated\n. Merged https://github.com/aspnet/Mvc/commit/5a3863d562561c9406e6bae5cc06c60c0d362b2b\n. updated\n. Merged https://github.com/aspnet/Mvc/commit/e94cec51fa122048aaf4fe0f510db7b1aba01be0\n. :shipit: after making the requested changes\n. Add an extension method in your code to remove repetitive tediousness?\n. WebApi had this feature named link - We should bring it back:\nFrom WebApi code\n``` C#\n    public class UrlHelper\n    {\n        // lots of other methods here\n        // ......\n        //\n    public virtual string Link(string routeName, object routeValues)\n    {\n        return Link(routeName, new HttpRouteValueDictionary(routeValues));\n    }\n\n    /// <summary>\n    /// Creates an absolute URL using the specified route and route data.\n    /// </summary>\n    /// <param name=\"routeName\">The name of the route to use for generating the URL.</param>\n    /// <param name=\"routeValues\">The route data to use for generating the URL.</param>\n    /// <returns>The generated URL.</returns>\n    [SuppressMessage(\"Microsoft.Usage\", \"CA2234:PassSystemUriObjectsInsteadOfStrings\", Justification = \"It is safe to pass string here\")]\n    public virtual string Link(string routeName, IDictionary<string, object> routeValues)\n    {\n        string link = Route(routeName, routeValues);\n        if (!String.IsNullOrEmpty(link))\n        {\n            link = new Uri(Request.RequestUri, link).AbsoluteUri;\n        }\n\n        return link;\n    }\n\n}\n```\n. @pranavkm please comment\n. We need mostly a doc that shows what a minimal base type should look like. @danroth27\nNeed to make it show up in helios/and diagnostics middleware\n. :shipit: when comments are addressed and @kichalla is happy.\nLets discuss having the StringInputFormatter be in the core system. File an issue, and consider using StringBuilder on top of a string as the object to bind to.\n. I would not go with this approach. it is fragmenting the runtime for tooling only scenarios. And at some point the tooling will depend fully on runtime code and not host it inside vs.\nHence my suggestion is: The caching code we give to Todd verbatim, and he is responsible to set up the host with a cache. We internally use MemoryCache.\n. Kevin would you be interested in working with us on the implementation (perhaps as a series of pull requests?\n. :shipit: \n. @JaroslawWaliszko we are tracking MVC issue in http://aspnetwebstack.codeplex.com\n. @dougbu can you please check what this does in this version of MVC\n. You can use [[ to escape the value.\nThat should be enough.\n. @Tragetaschen can you share a more exact code sample?\nCC @DamianEdwards \n. Activate != DI\nSince there is a single viewcontext it will be the view context of the page. You will need something like a TagHelper to understand the type change in the activator.\na few alternatives for now:\nDid you consider redirecting through a partial or view component?\nYou can build a factory for this scenario and di it in to make it more testable.\nMake your own base class?\nMoving forward we are going to think and see if we can/should improve this scenario.\n. Di is when the di container can directly provide the instance.\nActivator is a specific class activating some of the mvc components such as controller, view, view component and taghelpers. Each one of these has his own activator.\nThe activator can do more than what the container for example provide a viewdatadictionary which is an object that flows from the current context of the view but not come from di. Similarly contextualizing the html helper is an activation type activity.\nSee for example the code for the controller factory here: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/DefaultControllerFactory.cs\n. Fixed along with other uses of List<T> and Dictionary<T> in bcbbc585158dfa93b1bab1e903c091e7601ab2cf\n. :shipit: when @dougbu is happy with the comments\n. :shipit: \n. Why is this not the fix for #1517 ?\n. This is a small simple feature we can add at any point. No rush to make it happen for 6.0\n. also - Once WebUtility.JavaScriptStringEncode is added by aspnet/HttpAbstractions#72 we should remove our temporary version at src/Microsoft.AspNet.Mvc.TagHelpers/JavaScriptUtility.cs\n. Do this in conjuction with https://github.com/aspnet/Razor/issues/304 \n. :shipit: \n. Related to #2015\n. @HaoK can you please elaborate.\n. Looked at the feedback, it doesn't add much value other than following a pattern. It also doesn't affect the public surface much, it does add an extra indirection.\n. :shipit: when @dougbu is happy\n. Merged\n. I'm not sure why we worry about back compat here. Even if there is a knob (which I'm not sure why it should even be there) it should be off by default\n. I don't know why a knob is needed at all\n-----Original Message-----\nFrom: \"Doug Bunting\" notifications@github.com\nSent: \u200e2/\u200e18/\u200e2015 4:05 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [Mvc] Provide option to extend select list to contain currentvalue (#2027)\nI agree with you on this behaviour being off by default @yishaigalatzer. opt-in was the limit of my \"back-compatibility\" concern.\nI also agree we shouldn't need a \"knob\" anywhere higher than an individual DDL call, LB call, or  tag. nothing broader than new parameters for the HTML helpers and a new bound attribute for the  tag helper.\n\u2014\nReply to this email directly or view it on GitHub.\n. These helpers had to do with the Ajax based validation we are not carrying forward\n. @JamesNK if you have thoughts or a recommendation on this, please share here\n. :watch: looks like we need to follow up in person. Overall looks good though\n. :watch: \n. This is the final decision.\n. :shipit: \n. This was just trying something out\n. bb31e2aec5030ea52a27e2ffa391d152b43f8225\n. bb31e2aec5030ea52a27e2ffa391d152b43f8225\n. No, that is not possible. You need a controller that returns a partial view\n. You could build a standard proxy for viewcomponents if you'd like though (similarly you could build a proxy to partial views). e.g. you a catchall attribute route on an action\n. You should think of a viewcomponent as a fancy html helper and not a child action. \nThus you can and should probably have individual actions to handle the form post rather than a catchall.\n. This will be a resource filter (wrapping)\n. We are not planning to provide a general capability here. We have a very specific implementation for are uses, and its super simple to write your own cache (where you will control the lifetime and eviction policies)\n. This is a pattern we decided not to support by default. Because the body can only be read once, but in particular scenarios (when the body stream is buffered and rewound) it can actually work (and support [FromBody])\nYou can build something like - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/ValueProviders/FormValueProviderFactory.cs\nAnd register it like - \nhttps://github.com/aspnet/Mvc/blob/f19c2e493d338c6d8724e3a16bbad0ac92a03054/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs#L60\nIf you want [FromBody] for json to still work after this, you will need to rewind the stream.\n. @filipw FYI - we are making a change in INestedProviders you probably want to follow this PR, and update the blog if necessary?\n. ed8e5716ead3a6ba298a9b1877cec2009b0af8df\n. This sounds like a Web API 2.X question. This repository tracks MVC 6.\nI suggest you open a question in the forums or stackoverflow.\nin MVC 6 we will create an object rather than return null by default, so your issue is resolved in this framework. If you change the object in an action filter, you can always call TryValidate on it. This wasn't supported in Web API 2.x\n. In Web API 2 you can call Validate<T>(model) in the action body\nC#\n        /// <summary>\n        /// Validates the given entity and adds the validation errors to the <see cref=\"ApiController.ModelState\"/>\n        /// under the empty prefix, if any.\n        /// </summary>\n        /// <typeparam name=\"TEntity\">The type of the entity to be validated.</typeparam>\n        /// <param name=\"entity\">The entity being validated.</param>\n        public void Validate<TEntity>(TEntity entity)\n        {\n            Validate(entity, keyPrefix: String.Empty);\n        }\n. ### Here is how you can do it very simply\n``` C#\nusing System.ComponentModel.DataAnnotations;\nusing System.Web.Http;\nusing System.Web.Http.Controllers;\nusing System.Web.Http.Filters;\nnamespace WebApplication5.Controllers\n{\n    public class ValuesController : ApiController\n    {\n        [SetData]\n        public string Get(Foo foo)\n        {\n            string result = null;\n            if (foo == null)\n            {\n                result += \"Was Null\\r\\n\";\n            }\n        if (ModelState.IsValid)\n        {\n            result += \"Was Valid\\r\\n\";\n        }\n        else\n        {\n            result += \"Invalid Keys: \" + string.Join(\", \", ModelState.Keys);\n        }\n\n        return result;\n    }\n}\n\npublic class SetData : ActionFilterAttribute\n{\n    public override void OnActionExecuting(HttpActionContext actionContext)\n    {\n        var foo = new Foo();\n        actionContext.ActionArguments[\"foo\"] = foo;\n\n        ((ApiController)(actionContext.ControllerContext.Controller)).Validate(foo);\n    }\n}\n\npublic class Foo\n{\n    [Required]\n    public string Name { get; set; }\n}\n\n}\n```\nor alternatively just use the code from the Validate method on the controller in your filter like this:\n``` C#\n    public class SetData : ActionFilterAttribute\n    {\n        public override void OnActionExecuting(HttpActionContext actionContext)\n        {\n            var foo = new Foo();\n            actionContext.ActionArguments[\"foo\"] = foo;\n        Validate(foo, actionContext);\n    }\n\n    public void Validate<TEntity>(TEntity entity, HttpActionContext actionContext)\n    {\n        var configuration = actionContext.ControllerContext.Configuration;\n\n        var validator = configuration.Services.GetBodyModelValidator();\n        if (validator != null)\n        {\n            var metadataProvider = configuration.Services.GetModelMetadataProvider();\n\n            validator.Validate(entity, typeof(TEntity), metadataProvider, actionContext, keyPrefix: string.Empty);\n        }\n    }\n}\n\n``\n. There is noIDirectRouteFactoryyou can use theApplicationModel` to modify routes (and many other things).\nYou can start here:\nhttps://github.com/aspnet/Mvc/tree/dev/test/WebSites/ApplicationModelWebSite\nor here:\nhttps://github.com/yishaigalatzer/ResourceController\n. @blowdart seems to be a sake thing, not an MVC thing. Or am I wrong?\n. This code doesn't address the basic scenario of cancelling operations not written by the user.\n. The fixes where not accidental :)\n. @marcuslindblom one thing to consider is that this pattern is not really recommended, you can just write a \"greedy\" model binder instead. With MVC 6 you can now write async model binders, the reason we enabled them is exactly for this kind of scenario.\nSo although there might be a bug here, this is not the right approach for coding.\n. My comment is not around using dynamic, its around avoiding a custom route handler and using a model under instead.\n. You should still do the model binding in a model binder, and leave the custom route to do routing stuff. I'm also not clear about using dynamic, since you obviously know the type in your controller code, why not in the model binder?\nAnother alternative to using custom routes is to use attribute routes (if that works, not sure about your exact scenario), or provide the action name in the defaults section of the route (if possible of course) + some constraints.\nHere is a sample for a greedy model binder:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Binders/FormCollectionModelBinder.cs\nand registration:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs#L41\n. Yes I agree with the part of matching controllers to routes. I don't agree with dropping data in a route value and just let binding take over. You should just write a binder and register it, that's the right way to do it regardless of how this used to work in the past.\n. @marcuslindblom I'd be glad to help you with moving a CMS solution forward, I (and others on the team) have done a similar exercise with a few major CMS systems already. Feel free to reach out to me directly, as I think this is starting to pollute this thread.\n. IModelBinder is the right abstraction for the job. So although you might be satisfied with how it works in MVC5, you are doing a few things differently than the framework expects:\n1. RouteData is really intended for both incoming urls and link generation, the code sample you pasted obviously breaks that.\n2. Getting the data out of session could be expensive, and if the user code never binds to it, its unnecessary a modelbinder will try to read the data only when the user is trying to read the data, saving both compute and memory when that happens.\n3. Model binders run at the \"right\" point in the code making it much easier for you to debug if you use the MVC source code.\nFor your question above, I would try two things (and they apply also for the use of model binder). Create an action filter around the method, and look at the ActionExecutingContext.ActionArguments to make sure binding took place correctly (see https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Filters/ActionExecutingContext.cs).\nIf binding is correctly happening you can debug into here and here\nHope this helps. And remember MVC6 is not trying to maintain 100% compatibility with MVC5 for every extensibility scenario. And we are morphing the recommended programming model where it makes sense. This is one of these examples.\n. This is exactly what view component does, except there is no controller involved. You do all the async work in the C# part of the view component and the view work in the cshtml part. And there is no code duplication.\n. You can't. That piece was never meant to work. But I see the appeal of your idea now. Basically one less hop, by inferring the return type. It's a bit tricky with viewcomponents that don't return html but not too bad of a concept.\nProbably need an overload that takes content type, and need a way to take parameters, so perhaps a lambda style API might work.\n. @dougbu so there is a way to fix this and keep both advantages. By just changing IHtmlHelper to an abstract base class HtmlHelper with no implementations. You get the best of both worlds\n. MVC never supported [FromBody] this should probably be compatible with WebAPI rather than MVC \n. Agree with @bartmax\n. If anything should use const strings and no enum\n. @harshgMSFT is there anything practically blocking the use of antiforgery outside of the MVC pipeline?\n. ",
    "pranavkm": "We're using RequestContext and ViewContext in a couple of places that makes this refactoring it into Core currently difficult. Once we get HttpContext to be more elastic, we can remove RequestContext as discussed\n. In the current world, virtual paths are meant for two things:\na) Determining client urls (e.g. ~/Scripts/jquery.js -> //scripts/jquery.js) \nb) Mapping paths on the server (e.g. ~/views/home/index.cshtml -> /views/home/index.cshtml)\nI spoke to @loudej about this and his suggestion was to keep (a) as is and exposed via something that WebFx understands. For the second scenario, the PhysicalFileSystem that we rely on already roots us inside the application - https://github.com/aspnet/FileSystem/blob/master/src/Microsoft.AspNet.FileSystems/PhysicalFileSystem.cs#L75-L78. The idea would be to use this as an alternative to HostingEnvironment.MapPath(\"~/...\"). \n. Path.GetFileName(appRoot). In System.Web today, I think any generated content ends up in Asp. Having mangled namespaces versus mangled class names (as we do today) makes things like http://www.nuget.org/packages/RazorGenerator.Testing/ a lot cleaner\n. Fixed as part of https://github.com/aspnet/Mvc/commit/b482a9e3cbcc92ef49cd76d7fbd554eaa5577273\n. Checked in types that were brought over from WebAPI. Will send out a separate PR for the WebFx integration\n. Ignore this PR \n. Converting IModelBinder to async is independently tracked. \n. :ship:  it?\n. https://github.com/aspnet/Mvc/issues/879 - ModelValidationProviders\n. :shipit: \n. Checking this in to unblock @halter73 \n. :shipit: \n. bump\n. Anything around ModelValidationContext and it's extensions is new. The rest of it is essentially ported over code that uses this context instead of HttpActionContext \\ ControllerContext\n. Last call for comments. I'm planning on checking it in before noon today.\n. :heart_eyes_cat: \n. \n. I'm updating that type to use IApplicationEnvironment as part of #54. Missed removing the downcast as part of the first iteration but that would go away.\n. Also, we use the app relative path to generate file names today. I'm not entirely sure it's super important to maintain parity with the current Mvc behavior with this. \n. :shipit: \n. There's no work to be done here.\n. :shipit: \n. :+1: to moving it to Routing. It is a routing specific wrapper on top of HttpContext and it does feel like it belongs there rather than Mvc. \n. @Eilon RequestContext represents the notion of a routed request (HttpContext + Route dictionary). There's nothing Model-bindy about it. Primarily my reason to think it's misplaced in that assembly.\n. :shipit: \n. Bug in Helios: https://github.com/aspnet/Helios/issues/7\n. The InvalidModelValidatorProvider basically looks at private properties and fields and verifies that they don't have validation attributes on them. It's utility is questionable to start with. @rynowak wanted me to track if we should also add static properties in to the mix.\n. @GrabYourPitchforks could you have a look at this?\n. Too slow - #55 \n. PR Updated.\n. Would you be able to sign off on this today?\n. :sailboat: it\n. > On the other hand [Display] can't be applied to classes or events but [DisplayName] could be. \nOur code only deals with attibutes for properties. So perhaps it's ok that it's disappeared. \n. DisplayAttribute lives in DataAnnotations. We could make an ask of them to expand it to start supporting fields. Might be a nicer way than having two separate (and similarly named attributes) that do the same thing.\n. Need to change GenericModelBinder (which incidentally needs unit tests) and need to add ordering to the list of binders. Mutable and ComplexDto binders need to appear in specific sequences which isn't happening today.\n. @davidfowl dropped the Http* prefix as @rynowak pointed this out earlier.\n. Would you be able to sign off on this today?\n. :ship: \n. :shipit: \n. Merged in 072e2cc1f1c4ed2b5a1521b6362d9a52eaea2fee\n. - Removed skip attribute and replaced with a list of Mvc assemblies\n- Added a couple of unit tests for DefaultControllerAssemblyProvider\n. :shipit: \n. :shipit:\n. :shipit: \n. Fixed in changeset af7d61113bfe46776e6d6a7c558f49d5c19ed9ba\n. :shipit: \n. I thought what we had today was a stop-gap arrangement until we had agreed on a common ground with the DI. Refactoring it this way seems like we've settled on the current behavior being the right way to do this. \n. :shipit: \n. :shipit: \n. - Updated binders to update model state marking a field as valid.\n- Replaced ModelValidationState with Nullable based on @yishaigalatzer's suggestion\n- Updated ModelStateDictionary.IsValid, IsValidField to return bool?\n. :shipit: \n. :shipit: \n. @Eilon, I'll  file a bug for IsSectionDefined() for now until we find some proper use cases for it. Another change that I haven't ported over as yet is the ability to render sections more than once. Not hard to do, but it seems like an odd limitation. \n. Updated PR: Cleanup and added unit tests\n. @yishaigalatzer done. Yanked it out of the PR for now. \n. Maybe some more context here would help. Some binders need to appear in certain order - for instance MutableObjectModelBinder necessarily needs to run last in the queue. \nIn the old world, we got this because the DI \\ registration system allowed us to specify ordering for collection of items. Lacking this in the new DI, we've been adding an Order property to things (via INestedProvider ) that specify the sequence in which they'll be executed.\n. Fixed in d8ba998dec548da237344255cf9beb985780009e\n. :shipit: \n. Unrelated, but is the plan to allow IViewEngine to pipe the ActionContext to IViewEngine.FindView? Right now all it gets access to as the context is the route dictionary\n. Updated PR based on feedback\n. :shipit: \n. :shipit: \n. :shipit:\n. UrlAttribute is added as a DataTypeAttribute here - https://github.com/aspnet/WebFx/pull/239/files#diff-e65732abbf2c95b79f1a2258b131742cR108\n. Updated PR\n. :shipit: \n. @yishaigalatzer  https://github.com/aspnet/WebFx/pull/310#issuecomment-41569299\n. :shipit: \n. Now might be a good time to revive a couple of unit tests for this type. \n. :shipit: \n. :shipit: \n. Fixed by https://github.com/aspnet/WebFx/pull/310\n. Fixed in https://github.com/aspnet/WebFx/pull/399\n. Thanks @rynowak \n. fixes https://github.com/aspnet/WebFx/issues/247\n. @yishaigalatzer care to have a look at this?\n. @yishaigalatzer good to sign in with the changes we discussed?\n. :sheep: it\n. @dougbu adding ModelMetadata.Container was a recent addition based on popular request - https://aspnetwebstack.codeplex.com/workitem/1530. Might make sense to bring it back particularly since it's not a great deal of effort.\n. As the next iteration in this change, I'll modify the ValueProviderFactory to be synchronous. Does that sound alright?\n. Separate PR. It's not necessarily related to this one \n. @yishaigalatzer ship it?\n. :shipit: \n. :ship:  it\n. :shipit: \n. Duplicate of https://github.com/aspnet/Mvc/issues/605\n. @dougbu The kproj doesn't need to change - no file renames \n. Any thoughts on this?\n. @Eilon @yishaigalatzer do you have a preference of of the two choices? I was leaving towards the second one - I think the API is less frequently used than the first so it's less likely to break porting scenarios.\n. ModelValidationState ModelBindingDictionary.GetValidationState(string fieldName)\n. :shipit: after addressing comments\n. A couple of questions about this:\n1. In Mvc 5, the Controller type had special knowledge about things like ValueProviders, ModelMetadataProvider etc. This is not true in Mvc 6. There doesn't seem to be specific reasons to hanging this off of the Controller in particular if we want to support POCO controllers. Is there a better location to hang this off of - for instance the https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ParameterBinding/IActionBindingContextProvider.cs\\ ActionBindingContext or something along those lines? \n2. There's about a dozen overloads of this method in Mvc 5 (http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.tryupdatemodel(v=vs.118).aspx). Are all the overloads necessary?\n. Bump?\n. 1. We need to expose on controller, but also such that it's easy enough to do in a POCO controller.\n. @DamianEdwards @davidfowl do you have preferences or explicit list of which of these 10 overloads are useful? \n. Does this not affect any unit tests?\n. - ~~IHtmlHelper \\ IHtmlHelper<T> - no direct unit test coverage~~\n- Indexers and deeply nested lambdas for the various *For e.g InputFor, DisplayFor etc\n- Scenarios gap compared to 5.2\n- ~~Extension method testing.~~\n. Related to https://github.com/aspnet/Mvc/issues/356\n. Related to https://github.com/aspnet/Mvc/issues/605\n. Fixed as part of https://github.com/aspnet/Mvc/commit/6c8485b1efe35f681740230646e0fa20df703d58\n. https://github.com/aspnet/Mvc/issues/774 tracks the notion of IUsingsProvider. \n. request.Properties? What's that supposed to stand for?\n. Sounds like a terrible idea! That said, we have Context.Items which should give you the same behavior. \n. Not the makefile, each project has a checked in makefile that can be tailored to add custom targets and such. \n. @lodejard didn't realize there was an actual package dependency created from shared source files. That would make this change rather useless.\n. @Eilon  trying that now.\n. That seems to work. Updated the PR.\nPS: The code property reminds me of ItemGroups. I thought we were getting away from that?\n. Spoke to @loudej again. He says dev dependency is the way to go rather than this approach. To make this happen\n- I'll change the project name to Microsoft.AspNet.Mvc.Common so the thing we consume seems more uncommon. \n- I'll work with @davidfowl to get dev dependency support in KRuntime soon.\n. Will send out a new PR for this.\n. HttpStatusCodeResult exists but I think the HttpStatusCode enum doesn't in CoreCLR as yet.\n. Added the HttpStatusCode overload to the result of things to revive.\n. bump\n. Bump\n. There was a bug in KRuntime that caused this. Can you kvm upgrade and check if it solves this issue?\n. This was primarily from WebAPI - I ran into it as part of an app building exercise. Things like HttpNotFound existed in both. \n. @yishaigalatzer updated. \n. Added integration test\n. Partly from - https://github.com/aspnet/Mvc/issues/535. Essentially we shouldn't need to reference the assembly since referencing Microsoft.DataAnnotations should suffice. \nFor the second bit, running k.cmd web does not serve any static files if you don't have the StaticFile Middleware. \n. Will reopen with a work item to clear all project.json files. \n. No idea but that payload doesn't look like what you want to be sending to the client in the first place.\n. Dup of https://github.com/aspnet/KRuntime/issues/213\n. Updated PR. Unfortunately I amended my first of changes out of habit so you don't see what's changed since the last PR.\n. Added more tests + end-to-end tests for parsing and code generation\n. @dougbu could you have a look? \n. Related work item: https://github.com/aspnet/Mvc/issues/609\n. @dougbu :shipit: ?\n. @dougbu pushed the revert changeset. \n. > Why don't we just always plug in default(T) for complex types?\nSure, it's a design choice we can make in vNext and it might be the right one too. Having a non-null root means you get validation for top level required properties rather than a null object and no validation. \n. I haven't tested this lately, so I'm not sure if changes to routing affected this in some way. That said, the suggested behavior we had here was to do what @Eilon proposed in https://github.com/aspnet/Mvc/issues/822\n. Seems like we're null in both cases. @harshgMSFT would be making a fix for this to make it so that the top level object is never null.\n. First iteration checked in as part of https://github.com/aspnet/Mvc/commit/59e419ba0a592a8e9936582f0011689fda30180c\n. Fixed in https://github.com/aspnet/Mvc/commit/59e419ba0a592a8e9936582f0011689fda30180c\n. :shipit: \n. Updated.\n. @kichalla had some specific concerns about this. But on a more general note, we need to use the request culture as part of model binding while doing type conversions. Something that doesn't happen today\n. @Eilon does CurrentCulture reflect the request culture now?\n. Follow up to https://github.com/aspnet/Mvc/pull/590\n. @borgdylan Unfortunately I haven't gotten around to setting up a build agent on Ubuntu to test changes for this. It's on my list to get to very soon. \nThat said, @davidfowl's suggestion about skipping primitive types isn't correct - the provider looks at metadata for properties and goes on to create a delegate to the property getter. What I do want to do is change the ILGen based way of creating these delegates - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Metadata/AssociatedMetadataProvider.cs#L166 to an Delegate.CreateDelegate based one - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Internal/PropertyHelper.cs#L70 (tracked via https://github.com/aspnet/Mvc/issues/689). This might solve the issue we're seeing here.\n. @davidfowl Ok, that didn't come out correctly. We can exclude some types from the list but that might be a bigger change than this as we'd need to ensure model binders still function correctly in the absence of the ModelMetadata. \nFor resolving this issue, it's a lot simpler to change the way we create the property getter and exclude indexers. Sounds alright?\n. @borgdylan could you try out the latest bits from the feed and see if the issue is resolved?\n. Some additional considerations listed here - https://github.com/aspnet/Mvc/issues/5098. Should we close this?. Fixed in cca78bb0550f56a198e9220a5447e78254b03f6c\n. Fixed in cca78bb0550f56a198e9220a5447e78254b03f6c\n. Related to https://github.com/aspnet/Mvc/issues/454\n. Related to https://github.com/aspnet/Mvc/issues/454\n. @tugberkugurlu quick feedback - \nIPrincipal does not need to be injected it's directly supported from the Context now. Do you feel we need to support explicitly injecting it as a property and action parameter? We think not, but we are open to hearing a compelling argument :)\nSee controller code: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Controller.cs#L41-L52\nWe can look at CancellationToken but we need to figure out what to do about them top level. See https://github.com/aspnet/Mvc/issues/743\n. @tugberkugurlu quick feedback - \nIPrincipal does not need to be injected it's directly supported from the Context now. Do you feel we need to support explicitly injecting it as a property and action parameter? We think not, but we are open to hearing a compelling argument :)\nSee controller code: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Controller.cs#L41-L52\nWe can look at CancellationToken but we need to figure out what to do about them top level. See https://github.com/aspnet/Mvc/issues/743\n. This is being tracked via https://github.com/aspnet/Mvc/issues/801.\n. This is being tracked via https://github.com/aspnet/Mvc/issues/801.\n. @sephiroth2m I think that might be a still problem (due to how we reflection invoke). I'll file a separate bug for it.\n. @sephiroth2m, this doesn't work in general for integer values:\n``` C#\nint x = 1;\nInvoke(x); // Fails to compile\npublic IViewComponentResult Invoke(short y) => null;\n```\nYou could try doing @Component.Invoke((short)1) and that should work.\n. Think you need to update the kproj too\n. Think you need to update the kproj too\n. :shipit:\n. :shipit:\n. I had to deal with this when working with Activate (https://github.com/aspnet/Mvc/pull/648/files#r13678472). A POCO controller is forced to activate the service provider + ViewEngine to be able to produce a View rather than call the view result which eventually does have enough knowledge to obtain these values. \n. I had to deal with this when working with Activate (https://github.com/aspnet/Mvc/pull/648/files#r13678472). A POCO controller is forced to activate the service provider + ViewEngine to be able to produce a View rather than call the view result which eventually does have enough knowledge to obtain these values. \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :ship: \n. :ship: \n. :shipit: \n. :shipit: \n. cc @loudej \n. cc @loudej \n. Rebased and updated.\n. Rebased and updated.\n. Updated\n. Updated\n. Updated. Guess my comment didn't go through the last time.\n. Updated. Guess my comment didn't go through the last time.\n. Could we get some unit tests for this?\n. Could we get some unit tests for this?\n. On an unrelated note, could we call this thing DisplayText instead? The \"Simple\" prefix seems out of place\n. On an unrelated note, could we call this thing DisplayText instead? The \"Simple\" prefix seems out of place\n. The \"Simple\" bit doesn't convey anything meaningful though. We don't have a ComplexDisplayText or LocalizedDisplayText etc to go with this. \n. The \"Simple\" bit doesn't convey anything meaningful though. We don't have a ComplexDisplayText or LocalizedDisplayText etc to go with this. \n. @yishaigalatzer Consuming ModelMetadata is a slightly advanced scenario - most people probably don't consume it directly. Primarily the reason I thought it warranted a change in name.\n. @yishaigalatzer Consuming ModelMetadata is a slightly advanced scenario - most people probably don't consume it directly. Primarily the reason I thought it warranted a change in name.\n. :shipit:. @sornaks could we have this checked in?\n. :shipit:. @sornaks could we have this checked in?\n. :shipit: \n. :shipit: \n. @yishaigalatzer Does this pattern look like what we discussed?\n. @yishaigalatzer Does this pattern look like what we discussed?\n. Updated\n. Updated\n. Rebased and updated\n. Rebased and updated\n. Fixed as part of #578\n. Fixed as part of #578\n. :shipit: \n. :shipit: \n. I think we should make this change in release and merge it into dev. @Eilon ?\n. I think it's currently picking up the package from NuGet.org which is why it's not failing.\n. :shipit: \n. :shipit: \n. Rebased due to changes breaking Mvc and ammended my changes to reduce the amount of noise in the diff. \n. Fixed in https://github.com/aspnet/Mvc/pull/726.\n. :shipit: \n. Updated\n. Updated\n. First draft to vet design\n. Rebased and updated PR. \n. Fixed in https://github.com/aspnet/Mvc/issues/770\n. Duplicate of https://github.com/aspnet/Mvc/issues/778\n. Related to #479 \n. https://github.com/aspnet/Mvc/issues/881 tracks injection of metadata\n. :shipit:  once you've spoken to @yishaigalatzer about the two unresolved comments, \n. @yishaigalatzer @lodejard @davidfowl \n. This should be addressed as part of resolution to https://github.com/aspnet/Mvc/issues/814\n. Duplicate of https://github.com/aspnet/Mvc/issues/974\n. :shipit: \n. :shipit: \n. Unrelated, is there an inline constraint way of representing RequiredConstraint?\n. @rynowak Oh sure, I get that bit. I was looking at new { area = new RequiredConstraint() } and trying to figure out what that meant. That said, what does the presence of a token indicate? Isn't saying \"Admin/{controller}/{action}\" indicate you require \"Admin\"?\n. :shipit: \n. Right now you need to do:\n.AddMvc()\n.SetupOptions<MvcOptions>(options => {\n    options.AntiForgery =...\n});\nwhich is not very discoverable.\n. Might want to ping @davidfowl \\ @HaoK  to see what design for ConfigureOptions we landed on. Would be helpful for us to be consistent across EF, SignalR and Mvc.\n. Fixed in 5194adfaf5575bee74108c8b731de8932629075d\n. One of the issues we have with DI in the host is that we need to continue providing design time support even if the application does not compile. \nDiscussed this with @yishaigalatzer and we settled on attempting to read these values from the DI if available or falling back to using sensible defaults when we can't. \n. :shipit: \n. This might have an impact on activation of Layout pages.\n. Fixed in 9f8c656b31c4418fb454d5cb8d9029f9e4506981\n. @rynowak  I guess. I assumed we'd want people to use ValueProviders, but I guess it doesn't hurt for the context to be hanging off this.\n. Spoke to @loudej and he thinks we should have an async rendering pipeline for Html.EditorFor \\ DisplayFor. The synchronous calls will end up doing blocking calls (.Wait()) like they do now. \ncc @dougbu \n. Spoke to @GrabYourPitchforks about this today and his opinion was that in the absence of a sync context, we shouldn't have the same sort of issues calling Wait(). His only suggestion was to change the actual Wait() call to task.GetAwaiter().GetResult(). This preserves the stack trace in the event the Task throws.\n. We decided to reduce the scope of this bug and address the issue with calling Task.Wait().\n. We hadn't considered that so far, but it certainly is do-able. The model binding and formatter pipleline is async today, so this might not be a particularly large change. That said, could you give us a realistic example of where you needed to do async validation. It'd make it easier to reason about it when designing the validator .\n. > Why was ControllerContext removed?\nRemnant from an earlier design where the RazorViewEngine didn't depend on Mvc.Core. There's no good reason for it not have the ActionContext (which is a direct substitute for ControllerContext) any more.\n. :shipit: \n. Fixed in 51688089067a6535d77baf76bda8384cc6a5b86e\n. :shipit: \n. Added scenarios that cover IViewComponentHelper and IUrlHelper\n. Fixed in 9f8c656b31c4418fb454d5cb8d9029f9e4506981\n. :shipit: \n. At this point, the plan is to separate model binding - piecing back an object from data in Query, Route and Form - from deserialization (Json, Xml etc). By default, everything gets model bound. For deserialization \\ input formatting to kick in, you'll have to annotate the parameter with a [Body] attribute. \npublic async Task<IActionResult> Post([Body] TaskInput input)\nAdditionally, at this point, ModelBinding and deserialization are mutually exclusive i.e. posting form data to this action method would cause input to not be bound. I say at this point because we haven't had a serious design discussion about some of these things as yet.\n. Functional tests will be added once we settle on the design\n. Adding functional tests for changes. \n. cc @DamianEdwards @davidfowl \n. We have some ideas about making making the lookup semantics more pluggable and more refined than the current mechanism of using formatter tokens. We'll update https://github.com/aspnet/Mvc/issues/854 once we flesh out the design for it.\n. @Eilon Could you update the description?\n\nOn MVC 5 you get False, False.\nOn MVC 5 you get True, False.\n\nI'm guessing the second one is Mvc .\n. @Eilon, one of the reasons we were considering having @inject \\ @using etc flow in from _ViewStarts into the page was because it seemed a lot more confusing to have two different types being generated \\ different set of properties being available to you depending on whether the page was being rendered as a regular or partial view.\nWe could potentially have a different type that expresses \"metadata\" to be flowed into pages, but _ViewStart's are a bit under used today (they largely don't do anything besides set Layout) that it made sense not to invent something new and simply repurpose them.\ncc @DamianEdwards \n. ### Design discussion notes\n- Introduce a new file _GlobalImport.cshtml. Directives from this file are implicitly included to all views that are within its folder hierarchy (same hierarchy behavior as _ViewStart \\ web.config).\n- _ViewStart does what it does in Mvc 5 (does not push directives). Does not run before Partials \\ Layouts.\n- Remove @Layout directive\nFollowup\n\nDetermine the viability of using an alternate extension for _GlobalImport.cshtml. This would make transitioning to @import feature nicer.\n. :shipit: \n. :shipit: \n. I did not profile this in any way, but noticed this when I was looking at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/RazorTextWriter.cs. The intent of introducing that type was to avoid creating large strings in memory. \nIt would be nice if we could simply write to ViewContext.Writer without returning strings, but that would break the API surface.\nI guess some aspects of how the template gets rendered would change, but it might be worthwhile. That said, we certainly need profiling before making that claim.\nWe could leave default actions largely untouched, changing\n\nC#\nif (defaultActions.TryGetValue(viewName, out defaultAction))\n{\n    var result = defaultAction(MakeHtmlHelper(_viewContext, _viewData));\n    return new HelperResult(writer => writer.Write(result));\n}\n. Updated per PR comments. Updated OutputFormatterDescriptors to follow pattern\n. Currently blocked by https://github.com/aspnet/KRuntime/issues/462\n. This was an issue when we previously manipulated the ApplicationBasePath to construct potential paths for _ViewStarts. This is no longer the case (we rely on app-relative paths) so we no longer require specialized tests.\n. :shipit: \n. :shipit: \n. Updated to only reflect RenderSectionAsync which is the bothersome issue now. Tracking RenderBodyAsync via https://github.com/aspnet/Mvc/issues/1270 (maybe post beta?)\n. @yishaigalatzer, updated\n. Updated.\n. You need to use @await Html.PartialAsync. The RenderPartial* methods have always worked as things that don't return strings. \n. Reviewed with @yishaigalatzer in person. \n. We decided to document ModelBindingContext.ModelName better so it's role is more explicit.\n. :shipit: \n. :shipit: \n. @davidfowl compilation options bit is tracked via https://github.com/aspnet/Mvc/issues/871\n. Updated PR to include cshtml content.\n. Updated PR.\n. There's quite a few changes in the execution model in Mvc 6, which makes some of the analysis here not particularly applicable. \n1. In MVC 6, helpers no longer make copies of ViewDataDictionary (VDD) when they are initialized \\ contextualized. This removes the 3 VDD creations that happen as part of InitHelpers. I started a thread here https://github.com/aspnet/Mvc/issues/954 to ensure that this behavior change is correct.\n2. In the lifetime of a view, we create\na. One VDD for the Controller (if it has a injected ViewDataDictionary property),\n   b. One for each _ViewStart. (This might a bug due to the way _ViewStarts are generated. Today _ViewStarts are generated as RazorPage which causes us to create a VDD wrapping the controller's VDD. Tracked via #952)\n   c. One for the page\n   d. One for each partial \\ view component that is encountered as part of the page lifecycle.\n   e. One for each Layout\n   For a minimal View (one _ViewStart, no partials, one Layout), the number of VDDs created is 4.\nAt this stage, something along the lines of the copy-On-write might be the most impactful change. \n. We decided to leave the behavior discussed in #954 until we can see a strong reason to change it to the Mvc 5 behavior. That said, it would be incorrect to port this behavior back to Mvc 5.\nThe plan would be to to investigate the impact suggested in https://github.com/aspnet/Mvc/issues/878#issuecomment-50414180 in Mvc 5 in addition to Copy-On-Write that we have in Mvc 6. The bug on CodePlex (https://aspnetwebstack.codeplex.com/workitem/2085) links back to this location so we can make use of the discussion available here.\n. I ported over the CopyOnWriteDictionary changes to Mvc 5 and additionally was able to defer the creation of the two helpers on the base type that are discussed in https://github.com/aspnet/Mvc/issues/878#issuecomment-50414180. \n. @Shazwazza we added a new file _GlobalImport.cshtml to import these directives. The idea was to avoid repurposing _ViewStart to support this feature. See - https://github.com/aspnet/Mvc/pull/2020\n. The PR was closed prior to @yishaigalatzer 's comments. Need to address this.\n. This is a precursor to adding directives from _ViewStart to generated pages. Today, the IVirtualPathProvider is the one that can take a path and provide a razor page if it's present. The intent is for this type to support precompiled views too. \nThe intended changes is to consume the IVPP if it's available from the DI or fall back to a default if unavailable.\n. :shipit: \n. > I assume this is not a bug but not implemented yet?\nYup. There's a bug tracking this - https://github.com/aspnet/Mvc/issues/452.\n. Well, we don't have the same restrictions as before if we go down the design time host route.\n. Spoke to @davidfowl about this and he suggested we wait to do this until the DTH is concretely defined.\n. Seems like a specific issue with the Enum conversion - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/ValueProviders/ValueProviderResult.cs#L241 needs to use the ignoreCase overload.\n. TypeActivator change tracked via https://github.com/aspnet/Mvc/issues/976\n. Fixed when https://github.com/aspnet/FileSystem/issues/14 was resolved\n. I'll shelve this PR until we figure out what the design for https://github.com/aspnet/Mvc/pull/946 needs to look like.\n. Could you have a follow up item to add functional tests for this?\n. :shipit: \n. :shipit: \n. :shipit: \n. As far as I know, it doesn't seem to mess up VS. But we should fix this for RC since it's hoping VS does the right thing by ignoring incorrectly reported mappings.\n. @yishaigalatzer could you have a look at this when you have time? It's missing unit tests and some of the type names probably need to change, but I was looking at thoughts about the design.\n. Updated\n. Rebased and updated\n. Updated. Haven't made any changes with respect to the C# 6.0 features.\n. The changes made as part of ViewLocationExpanders largely covers the scenarios that you're trying to get to. ViewLocationFormats and AreaViewLocationFormats have also been made virtual in case you want to use the traditional route of subtyping the view engine although we recommend using expanders instead.\nhttps://github.com/aspnet/Mvc/issues/1212 is meant for tracking some additional enhancement to the changes in #1039.\n. :shipit: \n. :shipit: \n. We can revive this later on if we find this to be an issue. Closing this for now since no work needs to be done.\n. :shipit: \n. Preemptively checking it in since it might block development. \n. Needs functional tests too\n. We do type conversions for a list of types at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/ValueProviders/ValueProviderResult.cs#L151. The one way it differs from all of these other types is that Base64 encoded strings are one way to represent byte arrays, but not the definitive. You could still override it by putting a binder ahead of TypeConverterModelBinder, but it feels less clean than simply replacing this binder if you don't like the behavior. Thoughts?\n. @sornaks, this binder also needs to be registered with MvcOptions prior to https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs#L31\n. :shipit: \n. Updated PR\n. Updated\n. The change isn't going to come from DI. Moreover given that the signature of ITypeActivator is going to change to return a factory, this change might not work at all. We can revive this if we truly find this issue pertinent enough. \n. Updated\n. I'm planning on checking this in by today eve. Let me know if there's any more comments to be updated. \n. Background on the bug here - https://github.com/aspnet/Mvc/pull/839#discussion_r15354199\n. ViewLocationExpanders currently located on MvcOptions also needs to be part of this.\n. Fixed as part of ad8ab4b8fdb27494f5dece6f1186acea03f9dd52\n. :shipit: \n. Duplicate of #960 \n. Updated\n. Follow up item https://github.com/aspnet/Mvc/issues/1006 based on suggestions by @javiercn \n. We ran into this as part of porting exercises. Would be useful to get to this before RTM.\n. Fixed as part of https://github.com/aspnet/Mvc/commit/a490abc6e836581a1b3b86f298b49f9f7fe5a1f7\n. Decided to take this up because people were running into this very often and the workarounds were messy.\n. :shipit: \n. Merged in f6547d63e86d257b17e8849cf159067c9b679cb4\n. Duplicate of https://github.com/aspnet/Mvc/issues/821\n. :shipit: \n. Sure, go ahead. As long you have the CLA signed we should be able to accept your PR.\n. Update: For the 3rd item, we made a change as part of 2dcbbf70b0143388a7648d3e809f144bf6753332. Like I described, you can inject your own IRazorVIew instances as part of the DI and this way you get to control the execution of IRazorPage\n. I think you have a super old build of KRE. You might want want to install kvm and do an upgrade (kvm upgrade) prior to rebuilding.\n. We would like to keep most of this change, but change the way we go about it - the plan is to introduce factory methods in DI that we'd use to create the page and contextualize it. I'm waiting to speak to @yishaigalatzer to figure out what the design for the DI change needs to look like. \n. :shipit: from me. \n. cc @yishaigalatzer \n. - Moved FlushPoint behavior to RazorTextWriter.\n- Updated the functional test to actually verify chunked responses.\n. Updated. \nFYI @yishaigalatzer nested sections don't work (and did not in Mvc 5). Regardless, this approach would allow it but we can't write a functional test for it.\n. :clock1130: \n. @rynowak using a fixed set of files on disk rather than creating and deleting it every time. There's still the  IO of actually looking up the file on disk, but hopefully this is less contentious\n. Updated\n. Updated to not throw when we hit the max error count.\n. Slightly on a tangent, it seems like the most appropriate thing to return would be an EmptyResult which should be the equivalent of a no-op. However in Mvc 6, EmptyResult seems to be functionally equivalent to NoContentResult. This is a change from Mvc 5 where EmptyResult would have set no headers.\n. Pulling out this comment in to a separate bug - https://github.com/aspnet/Mvc/issues/1156\n. @yishaigalatzer the TestClient the current code is using is supposed to go away (it's a stop gap). This was changing it before we remove that type.\n. Updated\n. cc @DamianEdwards / @yishaigalatzer \n. :shipit: !\n. Duplicate of https://github.com/aspnet/Mvc/issues/1026\n. Duplicate of https://github.com/aspnet/Mvc/issues/821\n. Duplicate of https://github.com/aspnet/Mvc/pull/1004\n. :shipit: \n. :shipit: \n. cc @loudej / @yishaigalatzer \n. The support for this exists via directive inheritance in Mvc 6. The current build of Mvc 6 supports inheriting the @inherits keyword as part of this mechanism.\n. :shipit: \n. :shipit: \n. Based on the design discussion, the plan is to remove support for @helper until we have a better design for using and sharing them.\n. :shipit: \n. Tracked via https://github.com/aspnet/Razor/issues/160\n. Redone PR based on @loudej 's suggestions and updated\n. Updated\n. Updated\n. I think that's a separate question - what to do when you return void or Task. If I return EmptyResult from my action, I'd expect it to return 200 (or basically do nothing).\n. Where's this happening? Tests that do end-to-end parsing and code generation should already be using MvcRazorHost\n. :shipit: \n. :clock10: \n. These are Mono issue, but it would be useful for us to keep track of it in on our end too. I plan on filing bugs and using this item to track these.\n. We were doing that in one of our tests. Granted there wasn't any good reason to do that, it's still different behavior that what you get with .NET. \n. There's one more issue with PropertyHelper not working with value types. I'll send a fix for it separately.\n. The async () => await were totally unnecessary - except they got the line to fit under 120 in some cases\n. Updated to remove code cleanup changes. \n@harshgMSFT, I assigned https://github.com/aspnet/Mvc/issues/1208 to you for code cleanup\n. :shipit: \n. :shipit: \n. Could you update your PR? I think you pulled in @javiercn's changes for FileResult\n. :shipit: \n. > Can't redirect just the RazorPage.Output property\nThe @Html.BeginForm(..) simply does Write(Output, Html.BeginForm(..)) though, why does replacing Output not work here?\n. :shipit: \n. :shipit: once you've addressed comments\n. This was addressed as part of #872 and works for Helios + error page middleware\n\n. cc @NTaylorMullen \n. That's covered as part of https://github.com/aspnet/Mvc/pull/1200\n. But there's exactly one RazorHost here which is what we're testing. Plus we don't want to build a framework here (which is what test class hierarchies lead to)\n. :shipit: \n. :shipit: \n. :shipit: \n. Design looks fine\n. :shipit: \n. :shipit: after addressing removing ICanHasViewContextType\n. Fails with\n[Step 1/1] warn: Invalid JSON primitive: true\n[10:48:06][Step 1/1]\n[10:48:06][Step 1/1] verbose: Stack trace:\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.JsonDeserializer.ParseBuffer (System.Object& result) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.JsonDeserializer.ProcessCharacter (Char ch) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.JsonDeserializer.Deserialize (System.IO.TextReader input) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.Json.Deserialize (System.IO.TextReader input, System.Web.Script.Serialization.JavaScriptSerializer jss) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.Json.Deserialize (System.String input, System.Web.Script.Serialization.JavaScriptSerializer jss) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObjectInternal (System.String input) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject (System.String input) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at View3e264973bc3f4f3d9b0e9bec688038d0+<RenderViewLevel0>c__AnonStorey1.<>m__6 () [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at View3e264973bc3f4f3d9b0e9bec688038d0.<RenderViewLevel0>m__A () [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at View3e264973bc3f4f3d9b0e9bec688038d0.<RenderViewLevel0>m__10 () [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.SakeEngine.Execute (Sake.Engine.Options options) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Engine.SakeEngine.Execute (System.String[] args) [0x00000] in <filename unknown>:0\n[10:48:06][Step 1/1] at Sake.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0\notherwise\n. Didn't realize this was closed. Porting over comments to #1225 \n. My only concern is that these tests are more of a sample in that they do verbose and complicated things as part of the TagHelper. My understanding was that we were aiming to keep these focused at testing and not at creating functional samples. If that's ok by us, then :shipit: \n. Updated to use HtmlString\n. :shipit: \n. :shipit: when @rynowak's happy\n. :shipit\n. The value for enableInstrumentation is based on the presence of a request feature. This seemed like a simpler approach than having to DI in the request in to the type. \nThat said, the type was meant for supporting precompilation, but we're managing that at a different layer. We could potentially remove it and have the ViewEngine directly speak to Razor.\n. You can already use async code in the body. RenderBody simply copies the buffered contents that have been written into the Layout.\n. Clarification: The change is only meant for readability since the body has always been rendered in an async way and doesn't change the actual behavior of rendering. \n. Would Object methods - ToString, GetHashCode also need to be treated likewise?\n. :shipit:\n. I thought we won't have the equivalent of Server.MapPath for beta? cc @yishaigalatzer \n. The current plan is to not have an API equivalent for Server.MapPath. We'll close the bug and continue stripping ~ from paths\n. Updated\n. Any test that uses Configuration. It's unfortunate because they choose to use CallContextServiceLocator to resolve services rather than having it passed in.\n. The name changes were casing changes (website -> WebSites, Config.json -> config.json)\n. One of it is the MvcSample which we can't get rid of config from. The UrlHelper tests were the other. I considered removing it, but I think @kichalla wanted to use them\n. :shipit: \n. :shipit: \n. :shipit: once @javiercn is happy\n. :shipit: \n. Updated\n. cc @Eilon \n. Are we not adding unit tests for these?\n. :shipit: \n. cc @yishaigalatzer\n. Could you add a test for this?\n. Oops, didn't see the test earlier. :shipit: \n. Design looks fine\n. :shipit: once @dougbu's happy \n. :watch: \n. :shipit: \n. :clock10: \n. :shipit: once you address comments\n. :shipit: \n. cc @dougbu \n. Updated\n. cc @sornaks\n. You shouldn't have to depend on MvcOptions to set up validators for a unit test. If you really want to verify if the set of registered validators behaves correctly, it needs to be a functional test. Plus unit tests should almost always depend solely on the single assembly \\ project they're testing.\n. :shipit:\n. :shipit: \n. :shipit: after addressing comments\n. :shipit: once @dougbu's happy\n. I discovered a bug when testing _ViewStart inheritance with TagHelpers. If you'd like me to file a bug, I could do this. \n. @rynowak do we expect @ViewComponent.Invoke to call and block TagCloud.InvokeAsync. The change that I was making was specifically as part of #285 was allowing ViewViewComponentResult.Invoke from making a blocking call IView.ExecuteAsync. This seemed alright because we don't have a synchronous way to render a view now. For the scenario specified here, the user owns both the invocation and the callsite. Perhaps making the blocking call isn't the right thing to do\n. Fix for this is available as part of https://github.com/aspnet/Mvc/pull/1362\n. @halter73, you might have missed GetService<T>() invocations - for instance (https://github.com/aspnet/Mvc/blob/448ac5a0dc0bc8c53acd4f74df7c533fec6860d7/src/Microsoft.AspNet.Mvc.Core/MvcRouteHandler.cs#L50)\n. :+1 to @rynowak's comment. If we do have a helper method which gives us behavior identical to what GetService does today, I'd rather we ~~Find & Replace~~ sed -i 's/GetService/GetRequiredService/g'\n. :shipit: \n. :shipit: \n. cc @rynowak \n. Updated \n. We'll have coverage via functional tests, so this should be relatively safe.\n. The fix for this would be to use PrefixContainer like ReadableStringCollectionValueProvider\n. cc @dougbu \n. Looks good beside the comment. :shipit: \n. :shipit: \n. cc @dougbu \n. @dougbu updated. I'm not super sure what you mean by null expression result\n. I'll pass on the test name changes. Most of them seem to have a null model (DefaultTemplateUtilities.GetHtmlHelper doesn't set one) and the presence of the model doesn't seem to affect the result.\n. cc @yishaigalatzer \n. Updated\n. The #221 had this weird case \n\nThe string \"Value0\" will bind to MyFlagsEnum, but we dont have anything equivalent for flags that is \"Value0 | Value1\" will not bind.\n\nI can't recall why we suggested this, but I'm guessing we don't plan on creating new conventions for binding flags enum. In which case, could you update the work item saying this syntax is not going to be supported?\n. :shipit: \n. @kirthik  - https://github.com/aspnet/DependencyInjection/issues/164\n. cc @kichalla This issue seems to repro in WebAPI 2.3.2, so we might be able to port this fix back to WebAPI. \n. We don't have any code path that consumes this API so far. However invoking GetKeysFromPrefixAsync which is part of the IEnumerableValueProvider contract (also not currently used) throws.\n. I did want some functional tests rather than unit tests for model binding especially with uber binding partly in. I could move the name generation in to the test (although it ends up being a lot of mocks \\ hacking to instantiate a new instance of HtmlHelper<T>\n. Updated\n. Nope, will do\n. Could you specify more context as to what needs to be done here? Are we going to split Razor runtime and Razor compilation?\n. The reason we use the meta package is because Roslyn doesn't follow a sensible versioning scheme. We'll end up having to change the numbers on a daily basis to match KRuntime's version - which does the same thing by the way - https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/project.json#L5\n. cc @davidfowl \n. :shipit: after addressing comments\n. cc @davidfowl \n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. updated\n. Updated\n. :shipit: \n. :shipit: \n. :shipit: \n. :watch: \n. :shipit: \n. This was addressed as part of e25e4c4a5d3733a343c6dfac3dc07f9cf8fa16c8\n. Looks good otherwise :shipit: when @yishaigalatzer is happy\n. @rynowak do the route matches warrant as being TraceType.Information or is this fine as is?\n. cc @yishaigalatzer \n. I'll take care of this since merging this back into dev is a bit tricky\n. > I'll take care of this since merging this back into dev is a bit ~~tricky~~ unusual\n. project.json changes look fine, @danroth27 could you sign off on the content?\n. :shipit: \n. cc @yishaigalatzer let's walk through this in person when you have time\n. > If Debug / Options / General / \"Require source files to exactly match the original version\" is checked at the beginning of a debug session, breakpoints are hit in .cshtml files. Otherwise they are not. \nYup, I'm seeing this behavior. Also seeing this if I click on the breakpoint and tick the \"allow the source code to be different from the original version\". Seem non-intuitive since you'd expect these flags the make the source file matching less restrictive and not more.\nI'm using 14.0.22515.0 WPT with latest WTE.\n. :shipit: \n. :shipit:\n. :shipit: \n. Self assigning this - spoke to @yishaigalatzer about fixing this to unblock @DamianEdwards's demo.\n. Merged in 052ad3e95f2f8ae72c97d12eb4f5d118ae110af9\n. :shipit: \n. :watch: \n. :shipit: \n. We decided on using either embedded resource of multiline @ strings in our tests to work around. There's quite a few strings that are constructed at test runtime using Environment.NewLine - these need to be changed. \n. For instance if I need to change how ModelStateDictionary gets activated, I need to create a new dictionary, copy the base dictionary and then add an entry for typeof(ModelStateDictionary)\n. :watch: \n. :shipit: \n. @rynowak, sections used to generate synchronous code blocks. Using await inside of it would have resulted in a C# compilation failure..\n. :shipit: \n. Looks fine to me. :shipit: once comments are addressed.\n. :shipit: once @rynowak sign's off\n. :watch: \n. Could you update the PR once you address the comments?\n. :shipit: once you address the two formatting comments.\n. We had a discussion about this today. I had a working prototype for this change - https://github.com/aspnet/Mvc/commit/ab2f650e351b7a6b5984e2dc2573cf2b42fba833, but we realized this causes issues with items on HttpContext being used concurrently by the FlushAsync task and the page. This makes the feature quite problematic and we decided it's worth the trouble in changing things to guarantee synchronization to allow this feature to work.\n. :watch:\n. :watch:\n. :shipit: \n. Follow up issue to support Flush inside the tag helper - https://github.com/aspnet/Mvc/issues/1819\n. @santiagoaguiar I filed a bug with VS tooling to ensure that we generate lower cased _viewstart.cshtml for our templates. \nWe'll work on getting our samples updated to follow this format - https://github.com/aspnet/Mvc/issues/1559\n. @kirthik we decided to go ahead with this change. Could you rebase on dev and update the PR?\n. :shipit: \n. @rynowak \\ @dougbu  could you have a look at this PR? The design's been agreed upon, would love some code review.\n. Updated.\n. Holding off on this change since @Praburaj is working on getting expiration triggers working for files. \n. Updated. \n. It's good to go now. There's more file system changes coming in but it'll take time to use that for this feature. For now, this gets the job done and addresses the issue.\n. @dougbu we have the code in our current implementation and @yishaigalatzer it was verified when it was introduced.\n. Seems like it could be reduced to Mvc.Core and Razor.Host. @kulmugdha this would be relevant to https://github.com/aspnet/Mvc/issues/1529\n. cc @dougbu \n. Updated\n. Ping @dougbu \n. :watch:\n. Bit confused -  where did we land on the design for this?\n. :shipit: \n. :shipit: \n. Might want to get one more set of eyes on this, but :shipit: from me\n. Needs a couple of tests that verify the casing of paths that are used in RazorViewEngine, DisplayTemplates and EditorTemplates, ViewViewComponentResult match the one we're standardizing on.\n. :watch:\n. From an earlier comment: https://github.com/aspnet/Mvc/pull/1588#discussion_r20888833\nFor Display \\ Editor templates, I'm not entirely sure putting it on the utility types is helpful. They're not meant to be consumed by regular users so those remarks are probably not as effective. Should they instead live on the HtmlHelper.DisplayFor etc methods?\ncc @dougbu \n. Could you update the PR once you address comments? Changes look fine from me, but I'd suggest you wait for @dougbu to sign off on the the comments in particular the HtmlHelper ones.\n. Yup, it's broken now. This should fix it.\n. :shipit: \n. We haven't tried it out, but you might have some luck using \\ porting the Owin based CORS middlewares until #498 gets resolved.  cc @Tratcher \n. We'd be open to a PR for this. Our contribution guidelines are available here - https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md, \n. The method's made a comeback and there's possibly a good reason for it to have been there. So we could potentially revive this code.\n. :shipit: \n. Updated\n. @dougbu could you look at this when you have a bit of time?\n. Updated\n. Thanks. I'll hold off checking this in until https://github.com/aspnet/Mvc/pull/1660 to avoid randomization there.\n. :shipit: \n. At the application level, you should be able able to use RazorViewEngineOptions.FileSystem to change the directory where Razor looks for views. I pushed a functional test - https://github.com/aspnet/Universe/pull/130/files that shows how you'd go about using this feature. \nSetting it in a per controller basis doesn't exist, but I'm not entirely sure if there's a legitimate use case for this. You can always return a path as part of the returned ViewResult (e.g. return View(\"/Views/MyController/Test\");). Admittedly it's a bit more verbose, but it does get you there most of the way.\n. :shipit: \n. This is a purely test change and is open for a quick sign off.\n. The point of having it in done at runtime was to point to a show that it works when it's pointed to a completely different location on disk. Having it print out a dynamic value was to ensure this was coming through view engine and wasn't statically processed.\n. Updated to use embedded resources.\n. Updated\n. :watch: \n. Looks good apart from comments. :shipit: \n. The suggestion was to basically use Path.DirectorySeparatorChar and trim just one instance of leading slash (which should be the typical case) rather than use hardcoded back slashes.\n. Addressing this as part of https://github.com/aspnet/Mvc/issues/1556\n. Could you update the PR?\n. Merged in cfd5630cf21d4d17ce9dc39554d57f5abb88a8a0\n. Out of curiosity, what would one do in a resource filter on the way out?\n. :shipit: \n. cc @NTaylorMullen \n. Updated PR.\n. :shipit: \n. :shipit: \n. :clock1: \n. :shipit: \n. @rynowak could you look at this when you have time? The corresponding KRuntime changes are in.\n. Updated.\n. > Presumably this code is running under klr.exe right? Any settings that affected klr.exe are part of the current environment. So is there ANYTHING that affects the compilation behavior of klr.exe and isn't stored in project.json? (environment variables, commandline).\nAFAIK, we don't have anything that does this as yet. That said if we do have additional options that could modify the behavior of compilation, we'd probably evolve the interface to ensure these are covered. @davidfowl  might have more insight on the likelihood of something like this happening.\n. @Tragetaschen, if you haven't already done this, could you look at the contribution guidelines and fill out a contributor license agreement? @Eilon would be able confirm once the CLA has been received.\n. Merged in e0beec90f40c66f12d2213a8aa06a5165dbae755\n. Updated.\n. If the intention is to address issues that were brought up post beta2, :shipit: \n. :shipit: \n. Thanks for the analysis @Tragetaschen. One option we could explore is looking at the syntax trees in IBeforeCompileContext to extract TagHelperDescriptors from. This might avoid having to rely on the files being part of precompilation.\ncc @davidfowl\n. FYI - we do Assembly.Load to load tag helper assemblies. During precompilation, the AssemblyResolve event is not hooked up by KRE so you don't get any of the KRE behavior for assembly loading. Essentially even if you do have TagHelpers in a separate assembly, we fail to load it.\nWe should consider using the IAssemblyLoadContext to load tag helpers assembly. However this does not get flown from the KRE into the application today (both during runtime and precompilation).\ncc @davidfowl \n. :shipit: \n. :watch:\n. :shipit:\n. :shipit: \n. :shipit:\n. :shipit: \n. ### Additional requirements:\nDuring controller discovery, controller types in the application that are not registered in the service container should not be considered as controllers. The intent is to\n1. Use registration as a way to determine which controllers are available for an instance of the Mvc application.\n2. Ensure that accessing controller that are not registered result in 404 and not a 500 (due to GetRequiredService throwing).\nImplementation design:\n\nIntroduce a type (ServiceProviderControllerRegistration?) that allow registration of controller types. As part of registering a controller as a service, controllers must be additionally registered with this type. \nIntroduce IControllerProvider that will be consumed by the ControllerModelBuilder. In the default case, IControllerProvider will perform the scanning of controllers. This code exists in the DefaultControllerModelBuilder today.\nServiceBasedControllerProvider will be an additional implementation of IControllerProvider that will use the controller registration to produce a sequence of controllers that the application will use.\n\nUsage:\nC#\nservices.AddMvc()\n             .WithControllersFromDI()\n             .RegisterController(typeof(FooController))\n             .RegisterController<QuxController>()\n             .RegisterControllers(new[] { typeof(BarController), typeof(BazController) });\n. Yes, System.Web reads multi part form data and exposes it via Request.Form\n. :watch: \n. :shipit:  once comments are addressed. \n. cc @davidfowl. This change was the reason the release build of Mvc was broken. I'm not entirely sure what removing those dependencies did, so FYI for reference.\n. :watch: \n. Looks ok to me. Could you address the PR comments and I'll sign off.\n. :shipit: \n. :watch:\n. :shipit: \n. Can this be closed?\n. Fixed in 12243e7d97b50c4235c800d9a1ce94641cdf7d1c\n. Realized there a couple of scenarios that this PR doesn't address. The cache is populated at the time an instance of DefaultCompilerCache is created. Since this does not correspond to the time the application was initialized, we could potentially any changes in the filesystem that during this interval. Addressing this is a bit more involved so I'll hold off on this change.\n. It ends up being inconsistent with activation in Razor pages and View components. \nAcitvating a ViewDataDictionary works in both these scenarios versus for tag helpers it produces an exception stating the service could not be located. We should attempt to have the services we activate be consistent.\n. > RazorPageActivator won't activate a ViewContext property (handles only ViewDataDictionary properties and services from DI). And DefaultControllerActivator handles a few additional properties hanging off the main ActionContext it activates -- HttpContext, HttpRequest, and HttpResponse. So what is the consistency goal?\nShouldn't we address the lot in that case?\n. :watch: \n. :shipit: \n. We recently addressed the casing for files as part of #1559. The beta1 version of Mvc looks Views\\_viewstart.cshtml (all lower case file name) and the MusicStore sample has a file with pascal casing. Try upgrading to the build of Mvc from our CI build or change the file casing of the ViewStart.\n. :+1: We were discussing this earlier today. We use the Route dictionary in the ViewEngine to locate components. Instead we should rely on the ActionDescriptor to provide us values for Controller and Area.\n. Fixed in 54c1fed254d100d075500147f4b44368f391d99f\n. Verify your package sources (in VS or in %AppData%\\NuGet\\NuGet.config). The nuget.org source is most likely disabled (it's a bug in kpm \\ NuGet)\n. Yeah, let's not change the Mvc TagHelpers. The extra attribute name doesn't look too bad and makes the current code look more readable.\n:shipit: \n. :shipit: \n. :shipit: \n. :watch:\n. :watch: \n. :shipit: \n. Will merge this in once https://github.com/aspnet/Mvc/pull/1795 is done.\n. :shipit: \n. I'm guessing this doesn't compile. Have you built this?\n.  :shipit: \n. :watch: \n@harshgMSFT, could you have a look at this?\n. Could you also change the Activate method to be virtual? Think that was part of the bug.\n. :shipit: \n. :shipit:  once comments are addressed.\n. @nfplee the current API for the tag helper doesn't have a way to iterate \\ remove keys by prefixes. There's an API for adding additional expiration triggers, but it requires using a helper and isn't particularly intuitive. I'll work on adding a sample to the TagHelpersSample.Web application on what usage for this looks like. \n. @nfplee, you might want to file a work item for your requirement at - https://github.com/aspnet/Caching. That said\n1) This API doesn't exist so any prefix requirement is predicated on the feature existing to start with.\n2) The sample added as part of https://github.com/aspnet/Mvc/commit/6c21b40894ef93d8f97072991426a42ed324c074 demonstrates the usage of triggers to expire cached content. This API works today, so perhaps you could redesign your application to use this feature to evict items rather than prefixes. \n. :shipit: once comments are addressed.\n. Discussed this with @yishaigalatzer and @DamianEdwards. Currently FlushAsync or its variants do not work in tag helpers in general. A fix for this would require\n1. Supporting Flush inside of tag helper blocks. A change to this would have to tie in to https://github.com/aspnet/Razor/issues/296.\n2. Add additional behavior to CacheTagHelper that allows it to memoize the fact that Flush was called the first time content was rendered and replay it when serving the cached value.\n. cc @yishaigalatzer\n. :shipit: \n. Common is a shared source package but is a reference to every other src project. Consequently no project has a binary dependency on it and even though it's missing net45, kpm happily builds Microsoft.AspNet.Mvc.Razor.Host in net45. VS on the other hand shows an exclamation mark since it can't find a compatible package for that target framework. \nWith @PradeepKadubandi's recent tooling changes to avoid restoring until a missing package is found, this causes a restore to be kicked of every time the solution is opened. He opened a PR earlier (https://github.com/aspnet/Mvc/pull/1788) but I don't think he attempted to build it \n. cc @davidfowl \n. :shipit: \n. Updated. \n. Updated\n. Updated,\n. We now have precedence in doing this via TryValidateModel - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Controller.cs#L1062-L1064\n. Do these types not have any unit tests?\n. Looks good :shipit: \n. :shipit: \n. :shipit: \n. :shipit: once comments are addressed.\n. Fixed in 6c21b40894ef93d8f97072991426a42ed324c074\n. cc @Tratcher. Could you have a look and make sure I'm doing the right thing? \n. Could you show what the change might look like? If it's too complex \\ ugly, it might be better to file a bug with Mono and have them address it.\n. They have details about filing bugs here - https://github.com/mono/mono#reporting-bugs. We currently don't run Mvc tests on Mono although the plan's to do this in the near future. Once that happens, we'll have a way to track that the issue gets resolved. For now, it should be fine to ignore the test failures on Mono.\n. cc @DamianEdwards \\ @yishaigalatzer. I'll set up a design PR for this for next week.\n. Another motivation for this change is to avoid having to do the equivalent of https://github.com/aspnet/Templates/pull/8/files#r23467073 - i.e. add a call to app.UseMvc(() => {});.\n. Updated\n. cc @Eilon @dougbu @yishaigalatzer \n. We use the term Conventions for other things in Mvc - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ApplicationModels/ApplicationModelConventions.cs. Might result in confusing term overload.\n. :shipit: \n. Updated.\n. cc @yishaigalatzer \n. Updated.\n. Updated.\n. Updated.\n. :watch: \n. Looks good to me. :shipit: once @rynowak signs off\n. Spoke to @Eilon and sort of convinced him this was. His primary concern was with having algorithms checked in to Mvc. However, the alternatives weren't iterative or didn't work on byte streams so we ended up with just as much code in making things work.\n\nwe should probably provide a key to select hashing algorithm\n\nCould we remove RazorHash and just make the Crc32 a public type instead \\ change properties to be Crc32? Having algorithm lookups for this seems like overkill \n. Wouldn't we then introduce a new property at that point and use that? If we use a string based key, we'd need to store they algorithm name along with the hash. Seems cleaner to just have the property reflect the algorithm.\n. Updated.\n. Are folks still seeing this? I haven't see the tests timeout locally or on the CI.\n. :shipit: \n. This should get addressed as part of https://github.com/aspnet/Mvc/issues/2321\n. Deleting the base branch seems to have messed up this PR. Will reopen against dev\n. :shipit: \n. :shipit: when comments are addressed.\n. Updated.\n. Updated.\n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. cc @DamianEdwards  \\ @dougbu \n. cc @DamianEdwards  \\ @dougbu \n. Updated.\n. Updated.\n. cc @davidfowl \n. cc @davidfowl \n. With ANIs going away, we need a single assembly that Razor and browser link can reference.\n. With ANIs going away, we need a single assembly that Razor and browser link can reference.\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. cc @rynowak \\ @yishaigalatzer \n. cc @rynowak \\ @yishaigalatzer \n. Updated.\n. Updated.\n. Updated. I'm not super sure there's a lot of value in the way I've gone about testing ApiController usage now - the right way to have a second functional test application where we don't have a custom assembly provider.\n. Updated. I'm not super sure there's a lot of value in the way I've gone about testing ApiController usage now - the right way to have a second functional test application where we don't have a custom assembly provider.\n. Needs unit tests for the attribute. \n. Needs unit tests for the attribute. \n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. We actually fixed this as part of #3294. Closing this as dup \n. :shipit: \n. :shipit: \n. Updated.\n. Updated.\n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. cc @yishaigalatzer \n. cc @yishaigalatzer \n. @yishaigalatzer updated\n. @yishaigalatzer updated\n. Need to update https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/project.json#L12\n. Need to update https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/project.json#L12\n. Looks good otherwise  :shipit: \n. Looks good otherwise  :shipit: \n. cc @dougbu \n. cc @dougbu \n. Updated. I'll change the file names for RazorCompilation* before checking in\n. Updated. I'll change the file names for RazorCompilation* before checking in\n. Updated.\n. Updated.\n. Does jquery.js need to come from bower?\n. Does jquery.js need to come from bower?\n. :shipit: once @dougbu 's happy.\n. :shipit: once @dougbu 's happy.\n. We're noticing a large number of allocations pertaining to creating keys to lookup cached view locations. Using a IMemoryCache limits us to using string keys which would limit any optimizations we could create to resolve these. We'll continue using the current approach of a ConcurrentDictionary but use a custom comparer to avoid allocations.\n. _ViewStart and now _GlobalImport are the only ones that require the _ prefix. The prefix is optional for other view files. It might be simpler to leave the prefix for _ViewStart to make it easier to port applications. Additionally, the plan is to eventually bring back a Web Pages \\ Razor pages based framework built on top of Mvc which might require the underscore convention to denote files that cannot be directly requested.\n. :shipit: once somebody else's looked at it.\n. Could you also move the TestFileProvider from Razor.Host to the common project?\n. :shipit:\n. Updated.\n. Updated.\n. :watch:\n. :shipit: \n. Seems sound otherwise.\n. Updated.\n. Sure. The bug was marked for beta5 - I was under the impression I had to wait until we branched. I'll get this in.\n. I was already looking at a fix for this - should get a PR out for this in a bit.\n. cc @ajaybhargavb \n. Can't think of any reason why this might be problematic. @Eilon, any thoughts on @ajaybhargavb's scenarios?\n. Does seem like a change in behavior - we only required bodies to be rendered if no sections were defined. I can address this as part of the change.\n. Updated.\n. cc @dougbu \n. They are all in the same namespace Microsoft.AspNet.Mvc.Razor and don't use the folder hierarchy for namespacing. I could change that too - although we have precedence against having folder based namespaces in other code in Mvc \\ Razor.\nThe primary motivation for doing this change was to remove things that were nested two layers deep.\n. We've been using folders to keep projects logically segmented without actually namespacing them accordingly. For instance:\n- https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ActionConstraints/ActionConstraintContext.cs#L7\n- https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Binders/ArrayModelBinder.cs#L8\n- https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/Compilation/CompilationResult.cs#L8\nShould I file a separate bug to update all of these \\ move them to the root directory if we don't want to namespace based on folder hierarchy?\n. :ok: \n. Updated.\n. Sorry, I deleted the base branch which closed this PR. I'll send a new one.\n. :shipit: \n. It looks like we Json serialize values in TempDataDictionary as opposed to using binary serialization in Mvc 5. Consequently complex types don't deserialize correctly. Perhaps we should consider disallowing storing non-primitive value types + strings in our default implementation if the (totally reasonable) intention is to avoid binary serialization.\n. Minor note: In-memory session state is simply holding on to the object in memory, not serializing them. Consequently, you can store objects that cannot be deserialized in it\nC#\npublic class User\n{\n   public User(int id) {}\n   public string Name { get; set; }\n}\nThis is to counter @danroth27's suggestion to use Json.Net's type name handling behavior to serialize types.\n. I think this was meant to be assigned to @ajaybhargavb. Let's talk about this before you start working on it. \n. :shipit: \n. Changing AntiForgeryOptions.FormFieldName in startup should suffice:\nC#\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    services.Configure<AntiForgeryOptions>(options =>\n    {\n        options.FormFieldName = \"my-field-name\";\n    });\n}\n. Old PR: https://github.com/aspnet/Mvc/pull/2257\n. @sornaks, this is checked in, isn't it?\n. :shipit: when @dougbu signs off\n. cc @Eilon \n. We need functional tests that verify these values round trip correctly - if I throw in a IList<string> for instance. There's a bunch of other types that IsSimpleType allows (decimal, DateTime, Guid etc). @Eilon are we ok with that as long as it round trips correctly?\n. :shipit: it from me. Get sign off from @Eilon before you check this in \n. :watch: \n. :shipit: once the remaining comments are addressed.\n. :shipit: \n. cc @rynowak \n. @rynowak, let me give it a try. I can start by un-deleting the files to start with - perhaps it might make the diffs less daunting.\n. Ok - Sending it out in parts - this contains most of the code changes without the file deletions. Think this should be manageable.\n. > That said, I don't see InputFormatter having its own context as a problem to be solved.\nI guess the discussion was more along the lines of do we need the ActionContext to flown to the formatters - they currently don't make much use of it., \n. > as well as anything related to the action based on which it can choose to act differently.\nShouldn't that happen as part of the ResourceFilter?\n. Wouldn't that argument also apply to model binders \\ value providers \\ validators?\n. :shipit: \n. :watch: \n. :shipit: \n. :shipit: \n. :shipit: \n. Updated with some dead code cleanup + new functional tests\n. Updated.\n. @NTaylorMullen is bulk pushing to all the repos. We were testing this out on Travis and it looks good.\n. I haven't done any profiling for this. However, we did some profiling for activators in the past and decided that they needed to be cached. This is the same sort of code - so my guess it is likely to show up in profiles.\n. :shipit: \n. > Why provide the ability to change it in a filter if it's part of options?\nThere's also the secondary issue of the user performing model binding as part of one the early filters which now need to respect the set value.\n. This might be a gap in how we create ViewData instances and get to the model. For the time being, could you pass in your model using property on ViewResult: \nreturn View(model: new AccountLoginViewModel());? \n. :shipit: \n. I'm guessing we don't care about unit tests for this (I don't see a great deal of utility in testing logging).\n:shipit: if that's the case.\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. Ties into Diagnostics changes - https://github.com/aspnet/Diagnostics/pull/123 and Razor changes - https://github.com/aspnet/Razor/pull/357. The error page from Helios already supports multiple error files.\n. Couple more places where we could print out the path:\n- https://github.com/aspnet/Mvc/blob/render-body-fix/src/Microsoft.AspNet.Mvc.Razor/RazorPage.cs#L611-L612\n\n'{method name}' invocation in '{Path}' is invalid.\n- https://github.com/aspnet/Mvc/blob/render-body-fix/src/Microsoft.AspNet.Mvc.Razor/RazorPage.cs#L820\n- https://github.com/aspnet/Mvc/blob/render-body-fix/src/Microsoft.AspNet.Mvc.Razor/RazorPage.cs#L724\nSection '{section}' is not defined in '{Path}'.\n. :shipit: \n. Associated with https://github.com/aspnet/Common/pull/12.\n\ncc @harshgMSFT @rynowak \n. I think the idea was to use Unicode as the default encoding in places where we don't know what the Encoding is. Plus the property is unused in StringCollectionTextWriter - we don't do any string-to-byte conversions. That said, we should leave the code unchanged in places where we were already passing in the right encoding \n. a) Because it would better approximate the behavior of StringWriter in places where we drop-in replace it with StringCollectionTextWriter\nb) The strings we store are Unicode\n. Can we close this PR?\n. Does this work as a replacement - https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNet.WebUtilities/QueryHelpers.cs#L54?\n. Related work item: While making this change, we need to ensure that we do not write the preamble \\ BOM when a user specifies the Encoding. This is to keep parity with ContentEncoding in System.Web. The StreamWriter that we use to write to the Response writes the preamble by default.\n. :shipit: \n. :shipit: \n. There are two potential solutions already in place for this:\n- The RazorViewEngine uses the IFileProvider from RazorViewEngineOptions. You could simply implement a custom file provider so your searches don't hit the physical file provider. See https://github.com/aspnet/Mvc/blob/dev/test/WebSites/RazorEmbeddedViewsWebSite/Startup.cs#L20-L23\n- The RazorViewEngine also uses a IVirtualPathRazorPageFactory which gives you types for paths. This could be replaced to point to a custom location (and comes pretty close to the semantics of your proposal.)\n. Most of what RazorViewEngine does is create probing paths for files the file provider. If your intention is to not probe the disk - why not roll a custom view engine? The view engine in itself doesn't deal with parsing \\ compilation - so you're not going to get much out of introducing a new extensibility point on it.\n. :shipit:  cc @kichalla \n. Shouldn't we simply exclude CancellationToken from validation instead?\n. :watch: mostly done. There's a couple of un-addressed items. Would also like @rynowak to have a look at this?\n. :shipit:. Try and get @rynowak to look at this before you merge it in.\n. > I don't know. Depends if dnx locks emits or not. \ncc @davidfowl . AFAIK it does.\n. Could we perhaps start by re-seeking the stream:\n() => new MemoryStream(assemblyBytes) :arrow_forward: () => { assemblyStream.Position = 0; return assemblyStream; }\nWe can change it to create a new stream if we do see issues during compilation.\n. Ok, that makes sense. One of the things @DamianEdwards wants to discuss as part of the precompilation discussion today is to determine if we should conditionally precompile views (as part of release \\ prod builds, deployment) rather than attempting to support it at dev time. If we decide this is the way forward, the extra allocation here would be less of a concern. \nLet's wait until https://github.com/aspnet/Mvc/pull/2463#issuecomment-101106317 is completed to figure out how to proceed with this work item.\n. This is being addressed by https://github.com/aspnet/Mvc/pull/2463\n. @Eilon I agree. We should probably revisit how these tests are done. We have other tests in this test area that edit files on disk and they are problematic to run in parallel (dnx451 + dnxcore50).\n. :watch: \n. We do have unit tests for this type - https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Razor.Test/Compilation/CompilerCacheTest.cs - perhaps we can live with the absence of functional tests until we can sort out a plan for not doing disk IO. @Eilon thoughts?\n. I think we can leave the functional test you had as is - it just needs to be fixed. See https://github.com/aspnet/Mvc/pull/2463#discussion_r29489672.\n. @Alxandr, what issues are you running into?  The dev feed's been stable for some time now.\n. Looks good. I'll have this merged in.\n. @Alxandr looks like this broke one of our existing tests (see AppVeyor) - DeletingPrecompiledGlobalFile_PriorToFirstRequestToAView_CausesViewToBeRecompiled. \n@Eilon, suggestions on what we should do here - the test is trying to verify a scenario that is contrary to the change @Alxandr made here. The scenario:\n1. Create an application precomilation that has _GlobalImport.cshtml and Index.cshtml.\n2. Launch the application. \n3. Decide that you don't need _GlobalImport.Delete it prior to requesting Index.cshtml.\nShould the view now recompile? Without the change, it does.\n. @Alxandr we have a design meeting tomorrow afternoon to decide some open questions about precompilation. The other test might no longer be relevant once based on what we land on. I'll update this thread once we have a decision on this.\n. AppVeyor is fixed now. Unfortunately we haven't had Travis build successfully as yet. Tests need to be updated to account for differences in reflection order and exception messages. @sornaks is currently looking into it.\n@sornaks is there a work item tracking your effort?\n. :shipit: once comments are addressed.\n. :shipit: \n. :watch: \n. :shipit: once comments are addressed.\n. Updated.\n. :shipit: \n. Looks good to me. :shipit: once @dougbu  \\ @rynowak  sign off.\n. :watch:\n. :watch: for minor comments.\n. :shipit: \n. You need to use [FromServices] - see https://github.com/aspnet/Mvc/issues/2476 for a previous discussion on this.\n. One possible suggestion was to remove the Controller suffix in the templates:\nC#\nnamespace MyApp.Controllers\n{\n    public class Home : Controller\n    {\n       public void Index()\n       {\n       }\n   }\n}\nThis way we don't have to mess with strings when resolving controller names. \n. :shipit: \n. :shipit: \n. Duplicate of https://github.com/aspnet/Mvc/issues/2015\n. Using https://github.com/aspnet/Mvc/issues/599 to track the remainder of the work here. We need a bit of design around what the tag helper looks like since it affects things like labels as you noted.. :shipit: \n. Could you elaborate on what you're trying to run concurrently?\n. It would've be useful to see a code snippet of what you're doing. That said, the code sample in Entropy isn't designed to be run concurrently. You might be able to add it as a transient service and create a scope for each Task that gets executed. But I'm not sure if that necessarily works.\n``` C#\n// ConfigureServices\nservices.AddTransient();\n// Run\nvar serviceScopeFactory = serviceProvider.GetRequiredService();\nemailsToProcess.Select(t => Task.Run(() =>\n{\n  using (var scope = serviceScopeFactory.CreateScope())\n  {\n    var renderer = scope.ServiceProvider.GetRequiredService();\n    ....\n  } \n});\n```\n. Leave it as an exercise? Doing all the extra stuff probably detracts from the the primary purpose of the sample.\n. If you're up for it, feel free to send a PR to Entropy. You could fix the lifetime of the the service and maybe add a separate method that shows how it could be used to process more than one thing.\n. Closing this since it's not specifically and Mvc issue. Feel free to start a discussion in https://github.com/aspnet/Entropy/issues\n. > In my case, I am scoping the service provider, but the scope encompases many parallel Razor compilations.\nThe error you're seeing here shouldn't happen as part of compilation. It's a result of trying to render one or more views concurrently without the right kind of scoping. Do you still see this error if you create a scope per view execution? \n\nwould a PR to MemoryPoolViewBufferScope to make it thread-safe be considered? \n\nThere's probably other areas of the code in this area that aren't thread safe, so I'm not sure fixing the MemoryPoolViewBufferScope alone would suffice. \n. Filed https://github.com/aspnet/Entropy/issues/167 to track the Entropy work.\n. Follow up to https://github.com/aspnet/Razor/pull/814\n. cc @NTaylorMullen \\ @Eilon \n. Closing this for now. Will revive when we have a design for the host.\n. You'll have to move the Microsoft.NETCore.Platforms to the dependencies node under netcoreapp1.0. See https://github.com/aspnet/Mvc/blob/dev/samples/MvcSandbox/project.json#L33-L39\n. Yup. Closing.\n. Interesting part of the stacktrace:\nC#\nCan not find assembly file Microsoft.CodeAnalysis.CSharp.Workspaces.dll at 'C:\\Users\\kamil.galek\\Desktop\\WebSite\\refs,C:\\Users\\kamil.galek\\Desktop\\WebSite\\'\nSystem.InvalidOperationException: Can not find assembly file Microsoft.CodeAnalysis.CSharp.Workspaces.dll at 'C:\\Users\\kamil.galek\\Desktop\\WebSite\\refs,C:\\Users\\kamil.galek\\Desktop\\WebSite\\'\nw Microsoft.Extensions.DependencyModel.Resolution.AppBaseCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List1 assemblies) \nw Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List1 assemblies)\nPerhaps you have mismatched packages in your project. Could you list your project.json? The url looks like the auth middleware is redirecting to itself on failure. I'm not entirely sure what's up with that.\n. LKGTM. I'll let @rynowak sign off on this.\n. Unfortunately we missed updating the ViewComponent when we changed Controller. See https://github.com/aspnet/Mvc/issues/4964\n. :shipit: \n. Have you tried adding Mvc to the service collection - services.AddMvc()?\n. > When using preserveCompilationContext in a library, should it be generating project as the type value?\nMost likely not. The behavior for this flag for class libraries doesn't seem fleshed out. https://github.com/dotnet/cli/issues/4047 could be used to drive a better model for this.\n\nShould we be using preserveCompilationContext at all, what are the exact scenarios this should be used and for what types of projects?\npreserveCompilationContext has two purposes - \n1. It's used to detect what libraries reference Mvc. By default, we specifically look for Mvc specific types, such as Controllers and ViewComponents, in these libraries. \n2. It's used to detect the closure of libraries used to compile the application assembly. This is used to compile views. \n\nIn the most common cases, you shouldn't be using preserveCompilationContext in class libraries, just the main application. There might be scenarios around runtime loaded assemblies that require this flag, but it shouldn't be entirely common.\n\nHow do I solve my current issue.\n\nDoes removing preserveCompilationContext help?\n. Perhaps. The alternative might be for DependencyContext to fallback to packages when type is project. \n. @Antaris an option we were exploring here was to rely on a Roslyn feature that would allow us to embed sources for views in generated pdbs. Here's the discussion for it - https://github.com/dotnet/roslyn/issues/12625. Note: the feature hasn't landed and requires follow up work in the debugger to know how to get to these sources, so it'll be a while for the feature to light up.\nAt present, you have to point to files on disk for the debugger to find them. You could consider using a PhysicalFileProvider that points to the source project when developing locally and switching to an embedded one when you're deploying.\n. @jeanjn the default set of value providers get data from query string, route data and form posts. FromBody is handled by input formatters which is responsible for creating the object instance in entirety. \nWhat is that you're trying to do with a custom ModelBinder that doesn't work out of the box?\n. What version of dotnet are you using? Also, I'd recommend filing this in https://github.com/dotnet/cli since this is strictly not an Mvc specific issue.\n. Are you using a 3rd party library that has the generic RedirectToAction method? It's not part of Mvc's API.\n. :watch: \n. :watch: \n. :shipit: once comments are addressed.\n. We looked at this issue again during triage yesterday. While having a display \\ description metadata associated with ApiExplorerModel is a nice to have feature, we don't think it's very valuable when most community packages that use ApiExplorer (Swashbuckle \\ NSwag) don't actually consume it. They already have mechanisms to read some of this (for instance the description) using doc comments and I'm not sure how these attributes would play with it.\n. @lobster2012-user, we have symbols for our RTM builds available on  https://dotnet.myget.org/F/aspnetcore-master/symbols/. An alternative to using symbols is to use global.json to link to the cloned Mvc repo. This will compile your application against Mvc's sources which would help in cases where the compiler has optimized away chunks of code. https://blogs.msdn.microsoft.com/webdev/2015/02/06/debugging-asp-net-5-framework-code-using-visual-studio-2015/ is a blog post that uses RC1 + DNX, but you should be able to do something similar with RTM + dotnet. \n. Your custom action isn't overriding ExecuteResult. Perhaps that's your issue?. Closing because this looks like a bug in your code. Feel free to reopen if you have further questions.. Should be something along the lines of\nC#\npublic class API_Unauthorized : ActionResult\n{\n    public override void ExecuteResult(ActionContext context)\n    {\n        // Set the response code to 403.\n        context.HttpContext.Response.StatusCode = 403;\n    }\n}. @marcibur would you be able to address the PR comments any time soon?. @marcibur feel free to reopen this once you've had a chance to address the feedback. Thanks for your contribution!. Thanks!. > Why is that? Can the logic be enhanced to search the body for parameter values if they're not found on the query string?\nThe goal of parameter inference is meant to be easy to reasonable and intuitive. The problem with any form of fallback behavior makes it difficult to reason about the parameter source. Additionally, we want to be able to document ApiControllers using ApiExplorer \\ OpenAPI. The Swagger spec doesn't allow associating multiple sources for a parameter. A design that would be difficult to document would be a poor choice.. :shipit: . Unrelated, but @mkArtakMSFT \\ @dougbu do you know who added the WIP check?. *  aspnet:MaxJsonDeserializerMembers\n@JamesNK, is there an equivalent setting for aspnet:MaxJsonDeserializerMembers. From the docs,\n\naspnet:MaxJsonDeserializerMembers - Specifies the limit of the maximum number of items that can be present in any dictionary deserialized by the JavaScriptSerializer type.\n\nApplying MaxLengthAttribute would produce a validation error, but it doesn't look like it affects deserialization.\n\nUnobtrusiveJavaScriptEnabled - HtmlHelperOptions.ClientValidationEnabled would be the equivalent. That said, ASP.NET Core Mvc by default supports unobtrusive validation, so you don't need to explicitly enable it like MVC 4.\n\n. Bump @JamesNK  . @mgolois looks like you have your answers.. cc @rynowak \\ @kichalla . See PR: https://github.com/aspnet/Mvc/pull/8275. Fixed in https://github.com/aspnet/Mvc/commit/8eea0ad44c4d469abc2c2d52f1c79505bd6afaeb. @dotnet-bot test OSX 10.12 Release Build please. Trying a fix for https://travis-ci.org/aspnet/Mvc/jobs/416619672. The OSX issue turned out to be a bunch more involved. Using the WebHostBuilder callback to create a client per test resulted in too many instances of Startup being invoked in the Routing, Versioning, Cors website and consequently too many separate instances of FileSystemWatcher watching files. Relying on TestFixture to re-use server \\ client instances remediates this issue. The simplest way to do this was to create separate startups that configure apps and use that to drive compat version.. Can you share what you're doing with your custom IApiDescriptionProvider? You could just choose to use a different heuristic to determine if an action should appear in ApiExplorer.. This would be a dup of https://github.com/aspnet/Mvc/issues/7675. We've addressed this as part of 2.2 One way to fix this in 2.1 would be to use `ViewContext.ViewData[\"Title\"] = \"...\" rather than assigning it to the ViewData instance on the page.. Thanks for the detailed report. Closing since no further action needs to be taken here.. Do you have a more complete sample of what you are trying to do and what the expectation is? \n\n\nIn the absence of the ResponseCache middleware, specifying a header in the action works just fine - the ResponseCacheFilter executes first setting the header, followed by the actual action - so you're pretty free to modify it. \n\n\nIf you're specifically talking about the ResponseCache middleware, the middleware caches the initial request and the request does not get to MVC until there is a cache miss. . @JonasSamuelsson the sample code you listed action works just fine. If I try running it, I can see the the cache header from the action body being used. Do you have a repro app showing otherwise?. Try using [HttpGet(\"{id:int}\", Name = \"GetInstrumentView\")]. The code above is adding two separate routes - the HttpGet with an empty template and one with \"{id:int}\" which is not what you want here.. Stuff for future @pranavkm - https://gist.github.com/pranavkm/6612bf140f1e346f018f93bd56a022df. Dup of https://github.com/aspnet/Mvc/issues/8135. The parameter inference for ApiControllers doesn't look at model binding attributes on the properties of the parameter model. It basically goes - is GetQuery a complex type, then assume it's a FromBody parameter. One way to workaround this would be to set FromQuery on the actual parameter.. From @alca259 on August 20, 2018 14:23\n\n\nI was did more test. The _ViewImports.cshtml, _ViewStart.cshtml and _Layout.cshtml inside of a Area are ignored on publish. Works well in visual studio in debug and release.. Can you share a repro app or the folder structure? Looking at the logs, it looks like these were all the views that MVC discovered under the areas directory:\ndbug: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler[3]\n      Initializing Razor view compiler with compiled view: '/Areas/Diaries/Views/Diary/Index.cshtml'.\ndbug: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler[3]\n      Initializing Razor view compiler with compiled view: '/Areas/Diaries/Views/Emotion/Index.cshtml'.\ndbug: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler[3]\n      Initializing Razor view compiler with compiled view: '/Areas/Security/Views/Roles/Index.cshtml'.\ndbug: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler[3]\n      Initializing Razor view compiler with compiled view: '/Areas/Security/Views/Users/Index.cshtml'.. Does cleaning + rebuilding your original project work? If that doesn't work, could you run dotnet build /bl and attach the log file (msbuild.binlog)? That said, if the issue is resolved in a blank project, do you think it's still worthwhile investigating this further?. We could do ClientErrorProblemDetails and specify the value there. I'm not entirely sold on using extension members just because you have to write a custom (Xml + Json) formatter to support it.. \ud83c\udd99 \ud83d\udcc5 . @dougbu would you mind filing the issue with the BinderModelType? You'd be able to explain better.. Using https://github.com/aspnet/Mvc/pull/8471 to track fixing the issue\n. > So the following code does NOT return html escaped json:\nStringEscapeHandling determines how string values in the JSON document are escaped, it does not HTML escape the actual json object. Can you show what your expected output is and how it's different?\n. Seems to work fine - https://github.com/pranavkm/repro/blob/8446/Controllers/HomeController.cs\nOutput using default settings (https://github.com/pranavkm/repro/blob/8446/Controllers/HomeController.cs#L30-L33)\n{\"success\":true,\"result\":{\"someText\":\"<div class=\\\"some-css\\\"><h1>Hello world</h1></div>\"}}\nOutput using StringEscapeHandling.EscapeHtml (https://github.com/pranavkm/repro/blob/8446/Controllers/HomeController.cs#L20-L28) which looks correct\n{\"success\":true,\"result\":{\"someText\":\"\\u003cdiv class=\\u0022some-css\\u0022\\u003e\\u003ch1\\u003eHello world\\u003c/h1\\u003e\\u003c/div\\u003e\"}}\nFeel free to reopen this issue once you have a repro app demonstrating the bug.\n. > It would be nice if MVC could implicitly add application/problem+json and application/problem+xml to the result ContentTypes\nOver here - https://github.com/aspnet/Mvc/blob/release/2.2/src/Microsoft.AspNetCore.Mvc.Core/ObjectResult.cs#L54-L57?. > What are your thoughts on keeping them separate when I merge?\nSounds fine \ud83d\udc4d . cc @glennc . FYI @rynowak . @dotnet-bot build OSX 10.12 Release Build please. They were doing fine. It just meant that things like OkResult would now qualify for ProblemDetails which seemed somewhat misleading.. I'll just document the IClientErrorActionResult a bit better. This isn't necessary.. The behavior is by design - MVC's model binding falls back to an empty string if it cannot find the value for a top level parameter or property name appear in the request. The most common case for this is to allow posting user models without having a prefix. Consider:\n```C#\npublic class SearchFilter\n{ \n    string SearchTerm { get; set; }\n}\npublic IActionResult Search(SearchFilter filter)\n```\nThe filter parameter gets bound with a view that looks like:\n``html\n<form method=\"post\">\n    <input type=\"text\" name=\"SearchTerm\" /> \n    <!-- This is what you get when you do` -->\n    OR\n\n<input type=\"text\" name=\"filter.SearchTerm\" />\n...\n\n\n```\nIn a scenario like this, MVC looks for any input that start with the key \"filter\". This allows the second kind of input to bind correctly. In the absence of this, MVC falls back to an \"empty\" prefix and uses that to model bind the object graph of SearchFilter. \nThe scenario that you listed is a corner case of the behavior, MVC looks for the key \"a\", failing which it falls back to the empty prefix. Slightly related, browsers (I tried Chrome and Edge) don't send form elements with empty name (<input type=\"text\" name=\"\" />) with the request.\n. Reopening. We could ignore empty strings for QueryStringValueProvider. That said, @KLuuKer how did you end up with a empty-valued key? AFAIK, MVC wouldn't generate a link with an empty key and browser forms ignore it.. You could use Controller.Json or JsonResult that lets you specify a serializer settings.. Sorry, I missed the input part. Unfortunately there really isn't a good way to customize the settings on a per controller \\ action basis. Both the formatter collections are global and MVC does not have a feature that allows customizing it. You could use SupportedMediaType or possibly some other metadata on the model to determine what formatter applies.. @lorenzos70 another workaround outside using of using the response buffering middleware is to increase the buffer size used by JsonResult, and the JsonOutputFormatter (used in the code path @sebastienros pointed to). There isn't a setting to tweak it, but writing a custom factory that specifies the size is pretty trivial. Add a writer factory to your application and tweak the DefaultBufferSize to a larger value (you could start by doubling the current default):\n```C#\nusing System;\nusing System.Buffers;\nusing System.IO;\nusing System.Text;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing Microsoft.AspNetCore.WebUtilities;\nnamespace Microsoft.AspNetCore.Mvc\n{\n    public class CustomHttpResponseStreamWriterFactory : IHttpResponseStreamWriterFactory\n    {\n        public static readonly int DefaultBufferSize = 16 * 1024;\n    private readonly ArrayPool<byte> _bytePool;\n    private readonly ArrayPool<char> _charPool;\n\n    public CustomHttpResponseStreamWriterFactory(ArrayPool<byte> bytePool, ArrayPool<char> charPool)\n    {\n        _bytePool = bytePool;\n        _charPool = charPool;\n    }\n\n    public TextWriter CreateWriter(Stream stream, Encoding encoding)\n    {\n        return new HttpResponseStreamWriter(stream, encoding, DefaultBufferSize, _bytePool, _charPool);\n    }\n}\n\n}\n```\n2) Register the factory in DI as part of your startup:\nC#\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IHttpResponseStreamWriterFactory, CustomHttpResponseStreamWriterFactory>();\n}\n3. Use output formatter (i.e. returning the object or returning ObjectResult instead of JsonResult) until 2.2 becomes available.. > but I assume that the patch you are working on will be available in version 2.2, is that correct?\nYes. The fix is in our 2.2 release.. \ud83c\udd99 \ud83d\udcc5 . You could use an action constraint to do this:\n```C#\n[PortActionConstraint(5000)]\npublic class HomeController : Controller\n{\n    ...\n}\n[AttributeUsage(AttributeTargets.Class)]\npublic class PortActionConstraint : ActionMethodSelectorAttribute\n{\n    public PortActionConstraint(int port)\n    {\n        Port = port;\n    }\npublic int Port { get; }\n\npublic override bool IsValidForRequest(RouteContext routeContext, ActionDescriptor action)\n{\n    var port = routeContext.HttpContext.Request.Host.Port;\n    return Port == port;\n}\n\n}\n```. Note that this is going in to master (3.0). cc @rynowak . https://github.com/aspnet/Mvc/issues/5306#issuecomment-249616041 has some suggestions on how you'd go about doing this. That said, we don't have plans to add support for doing this out of the box.. @abjbhat I couldn't reproduce the issue with the file rename following the steps that you listed. I see the build fail as soon as the namespace is renamed. For instance:\n1>obj\\Debug\\netcoreapp2.1\\Razor\\Pages\\Host\\Model\\GenerationOptions.g.cshtml.cs(48,94,48,116): error CS0234: The type or namespace name 'GenerationOptionsModel' does not exist in the namespace 'repro.Pages.Host.Model' (are you missing an assembly reference?)\n1>obj\\Debug\\netcoreapp2.1\\Razor\\Pages\\Host\\Model\\GenerationOptions.g.cshtml.cs(49,104,49,126): error CS0234: The type or namespace name 'GenerationOptionsModel' does not exist in the namespace 'repro.Pages.Host.Model' (are you missing an assembly reference?)\n1>obj\\Debug\\netcoreapp2.1\\Razor\\Pages\\Host\\Model\\GenerationOptions.g.cshtml.cs(50,39,50,61): error CS0234: The type or namespace name 'GenerationOptionsModel' does not exist in the namespace 'repro.Pages.Host.Model' (are you missing an assembly reference?)\n\n\n\nif I change the name of the project assembly from OriginalHostName.dll to NewHostName.dll\nWhat are you doing to change the output file? \n\n\n\n\nhave cleared out all the temp files, restarted Visual Studio, but the problem still remains.\nHave you tried cleaning the solution?\n\n\n\n\nbut when I search for the old namespace string in Visual Studio, I see that a temp file is generated\nVS generates temporary files to process the contents of Razor, this might be a remnant from an earlier version of the file. I wouldn't pay too much attention to it.\n\n\n\nCould you share a screen capture of this process? Might help me reproduce this issue.. I'm not seeing the error. More specifically, your application does not have any Razor files which results in most of the build targets that produce the .Views.dll to skip. I'm not entirely sure why you're seeing that file being generated to start with. Could you run dotnet build /bl on the project directory and attach the build log? Alternatively, have you tried cloning the project in a different directory and tried building it?. I can't reproduce the issue and I'm not entirely sure where we would have state that preserves the content between cleans. I'd be happy to investigate if there was something more to go with it.. @Tornhoof the Json attribute was already there. More importantly, if it isn't JSON.NET, you almost have to write a converter of some sort to support the JsonExtensionData based property that was added in 2.2. . > Serialization should work with pretty much every Formatter, they should all support IDictionary.\n\n\nThe spec requires that the property be serialized at the root level e.g.\njson\n{ \"title\": \"..\",  \"status\" : 400, \"keyFromDictionary\": \"valueFromDictionary\" }\nand not as a property of a key named additionalProperties. The latter's fairly easy to do. Maybe I'm holding it wrong, but I couldn't find a trivial way to do this with Json and both kinds of Xml serialization without having to customize it.\n. \ud83c\udd99 \ud83d\udcc5 \nThe casing change is behind a compat flag now. . \ud83d\udc4d to @rynowak's scenario. That worked for me too.. CryptoUtil and TypeHelper are currently unused. We'll bring them back to the appropriate assembly once they find use again.\n. Unused type. Again, this can be revived once it finds use.\n. VIewContext currently resides in ModelBinding which we use n the VIew. In the diagram, these types existed in Rendering but @dougbu thought it would be a better place to locate these types. \n. Tracking this via #6. I'll do a scan sometime this week and have this addressed. That said, we do need to come up with some strategy for CommonResources now that shared files are no longer an option. @davidfowl any thoughts on that?\n. If it's only meant to be used in tests, could we get away with not having this methods at all? We could always move this code to a comparer that we pass in to Xunit\n. Isn't this used by ModelBinding? If so, let's not revive types until we actually find use for them.\n. Wouldn't having an serializer service (the way @rynowak suggested above) work better? \n. ViewContext, ViewData* got moved into .ModelBinding which should have been done during relayering. Taking this as an opportunity since I'm touching those files in this change.\n. Thoughts on leaving this public? \n. That makes sense. I'll go ahead and make the change. \nEdit: On second thoughts, I'll wait to see if IFileSystem will provide us an API so we don't have use this.\n. https://github.com/aspnet/KRuntime/issues/13. I'm not entirely sure it would exist in the context. Shoving it in the runtime so they can decide to expose it at the right layer. \n. https://github.com/aspnet/FileSystem/issues/2\n. https://github.com/aspnet/WebFx/issues/12\n. These might be better as individual implementations of IActionDiscoveryConventions: VerbBasedActionDiscovery and MethodBasedActionDiscovery wrapped by a CompositeActionDiscovery (or simply by us iterating over the collection)\n``` C#\npublic interface IActionDiscoveryConventions\n{\n  IEnumerable GetConventions(MethodInfo);\n}\nThere doesn't seem to be any particular reason to make Rest and RPC top-level constructs. \n```\n. ViewPath doesn't feel right in this context. \n. Definitely not a change for this review, but does a ControllerFactory exist? It's essentially a glorified ActivatorUtils.CreateInstance and we might be able to get away with it being a detail of the ActionInvoker. Thoughts?\n. I think we should defer that until we identify the scenarios that per-action context value providers make sense. For now, it's easier to reason that action selection solely depends on query and route parameters.\n. .First() because we're already guaranteed there's exactly one.\n. Ignore these for now. They're going to come from my code, so his stuff is simply a placeholder fornow\n. Isn't that ModelBinding though? \nDBModelBinder\n{\n Bind(ModelBindingContext mb) {\n   if (mb.Type == typeof(User) {\n    mb.Model = dbContext.Get<User>(mb.ValueProvider.Get(\"id\"));\n  }\n    // Continue populating data from the form. \n    return false;\n}\n. All the value provider factories \\ value providers in this PR are placeholders\n. Most of the code in ModelBinding namespace comes from current implementations. Most of the code areas related to validation have been commented out, I've created stubs for some data annotation attributes for the time being so it doesn't look particularly pretty. \nThere's room for code review suggestions but given the size of this PR, I'd recommend not digging too deep into types from this namespace.\n. Thoughts on this?\n. Thoughts on this bit of code\n. I had that coded and then removed it thinking it was premature optimization people are going to complain about. \n. This is about the discovery of the from-body parameters\n. The type specifically exists in Mvc because I think we'll need to be able to configure value providers \\ model binders etc at some level close to the actual action \\ parameter being bound. This is meant to be a replacement service for the per-controller services you have in WebAPI. Having the param descriptors alone might not go the full way in being a proper replacement.\n. I'll have it removed\n. Wouldn't having the ActionContext let you do this though? You have extra details that you can choose to ignore.\n. find a way to not repeat well known strings\n. This is a direct port of code from AspNetWebStack. It's been code reviewed in the past. \n. Name suggestion?\n. BodyAttribute? \n. This code will look a bit cleaner when exposed by the per action-context binding provider\n. It returns a Task. We can simply return that and have the calling code await on it.\n. The K engineering document recommends using var as much as the compiler would allow. \n. Needs to return null. \n. The QueryValueProvider already had caching when I ported it over from WebAPI. It didn't seem to correct to change the behavior of that type as part of this consolidation.\n. Actually that makes merging the two value providers needlessly messy. I'll redo this CR. \n. It would be interesting to see if there's an alternative way to implement the nested manager. It seems odd that we are reduced to having a single nondescript \"Invoke\" method simply because of the way it needs to be consumed via DI. \n. Did you mean IActionBindingContextProvider?\n. Yes, but I wanted to make that a separate PR since it meant changing the binders\n. Ooh. Serves me right for guessing what the content type must be. Also will fix the typo in the name of the const\n. Good catch. Needs to have the async suffix. \n. This is unrelated to the change. That said, this is going away in the next iteration. So I'll leave it as is\n. Probably, but this sounds more like an optimization (which we're actively trying to avoid) rather than a design decision?\n. Clarify what Results are vs. what's input (by commenting)\n. NestedContext\n. huh?\n. ReflectedActionInvoker\n. delete .\n. need to define how we model the context objects (get/set or get private set)\n. Pass actioncontext instead of httpcontext\n. where does the model binder property on type come from?\n. can we pass around the actioncontext instead of reconstructing a requestcontext?\n. sealed?\n. rename\n. GetArgumentsValues should fill in an IDictionary or IDictionary, and then executer should reorganize it.\n. perhaps even make it a sorteddictionary by parameterorder\nSo the actionfilter can access parameters by order (for the reflected case) OR by name\n. @yishaigalatzer suggested having the ActionBindingContext contain a IDictionary and filling it up in a single invocation of the ParameterValueProvider (maybe call it ActionValueProvider?).\nThinking about it, it might make sense to use a IDictionary. This way, the ActionInvoker calls the provider and then iterates over the MethodInfo.Parameters looking them up by name. Thoughts?\n. This would come as part of the next changeset. Tracking via https://github.com/aspnet/WebFx/issues/37\n. Next changeset. This is around to ensure our DI doesn't blow up.\n. :ok_hand: \n. :ok_hand: \n. Tracked via https://github.com/aspnet/WebFx/issues/38 for now.\n. :ok_hand: \n. For the time being we're making the ReflectedActionInvoker a heavy object. We can refactor it as we go. \n. I'm not sure I follow. We have one step that finds values for ParameterDescrptor and the other that looks up arg values. This one looks up parameter values\n. https://github.com/aspnet/WebFx/issues/39\n. Yup, I considered doing that, but it's a lot of change in the ModelBindingCode that I don't want to take as part of this change.  Tracking via https://github.com/aspnet/WebFx/issues/40\n. It's currently unused. \n. :ok_hand: \n. That sounds like info about the formatter rather than the body though. I think it sounds fine as it is, we have body parameters that we chose to consume using InputFormatters. Since BodyParameterInfo doesn't exist in the old world, it's not a deviation. \n. :ok_hand: \n. These should go away once they get pulled into DI. \n. Do we need this anymore if the DI would inject things for us as part of ActivatorUtilities.CreateInstance? \n. Missed removing the check. That should go away.\n. The former. The attribute + any other common code would be available if you need it.\n. @davidfowl could we also target methods \\ types with this thing - indicating every parameter has to be not null? \n. This allows us to share the NotNullAttribute across the Microsoft.AspNet.Mvc* projects. Think of it as being equivalent to the CommonAssemblyInfo.cs that we have in Mvc \\ WebAPI today. \n. Sure, I could do that. \n. Common project.json doesn't produce a package. It's KLR's way of doing what we do  in csproj \\ msbuild today. It shows up as a project reference today, but eventually that would go away once we get proper tooling support. \n. Wouldn't we need a non-generic overload for views that don't have a model associated with it?\n. We might need to go back to calling this HtmlHelper\n. It's unlikely we're going to have the non-unobtrusive validation. Might not need this setting\n. That's clever!\n. I think it's to generate urls pointing to the Get \\ Post \\ Delete etc action methods. \n. +1. Seems like this might be better suited for extension methods. \n. DefaultUrlGenerator \\ UrlHelper?\n. @yishaigalatzer mentioned something about avoiding name differences from the current framework\n. FYI - this is to opt into Microsoft.Ajax.Mvc.js (or some combination of names) that we haven't shipped with the framework since Mvc 3.\n. The namespace still says Filters. \n. readonly\n. So beautiful :)\n. Is this the replacement for ActivatorUtils.CreateInstance?\n. Typo\n. Could we consider making this IComparable(FilterDescriptor) instead?\n. Gotcha. It was returning null when I tried to consume it earlier, I assumed we'd have to reinject things on a per-service provider basis\n. :ok_hand: \n. I've been putting utility methods in the Internal namespace but leaving them public. The odds of needing this method in general are quite rare. \nShould I instead leave it in a public Internal namespace but move it a non-extension utility type? public static DictionaryHelper?\n. Tracking via https://github.com/aspnet/WebFx/issues/62\n. It's being tracked in Jira.\n. @dougbu already fixed this as part of https://github.com/aspnet/WebFx/pull/58. I'm going to pull in the unit tests from this changeset to get some coverage. \n. Should this be changed to Microsoft.AspNet.Mvc.Rendering?\n. +1\n. Happened to be sealed as part of the port\n. The attribute didn't exist when I first sent this PR. I think I can have it updated to start using it.\n. Agreed, this seems pretty hacky. \n. Update this comment. DefaultModelBinder doesn't quite exist\n. Yup. Changed the API half way through and didn't update it.\n. VS doesn't do spaces with json files :(\n. Unfortunately no. We use the individual validators to determine if any of them are Required validators.\n. That said, I'll remove CompositeModelValidator as it's currently unused.\n. Most likely. Our binding is also quite likely busted because we do something similar there.\n. I have a tracking item in Jira to figure out how we flow data around specifically in validation. I'll make a note of the perf issue there \n. The assembly exists in CoreCLR. All it lets you do is specify if a member is required, so there's probably not a great deal of utility in keeping it. \n. Refactored this in to calling the other two extension methods.\n. Made them private for now. There's a set of RegisterAdapter methods that weren't ported over as part of this change which is where these delegates were primarily used. \n. https://github.com/aspnet/WebFx/issues/75\n. Apparently it still is\n. Both ModelMetadata and ModelName are set via properties (as of today). My guess is by lazy init, they were guaranteed these properties were set (at least in the code paths we care about). Once we do fix #40 we could change this.\n. Didn't this get fixed?\n. Named params for null values.\n. Missed git rm-ing it. \n. You should be able to call GetMethod(typeof(ActionExecutor), \"Convert\", BindingFlags.NonPublic | BindingFlags.Static typeof(object)) instead if you reference System.Reflection.Compatiblity\n. return result;\n. Return as List. There's no reason to cast it to IEnumerable\n. This is hard to read. Ifs might be easier to read here.\n. Isn't this specifically invoked when we know we're dealing with a task?\n. IMO this doesn't need to be an extension method\n. I don't think we'd want this hanging off a public facing API. \n. Unrelated?\n. The filter changes seem unrelated.\n. Shouldn't need summary for internal types. At least ones with cref\n. Use [NotNull] instead of Constract.Assert\n. Can you use Theory instead?\n. Probably needs to be moved to common. We had a version of this in the old framework.\n. Not entirely. We use this as part of the validation tree walk. The older code passed it around as a parameter, I consolidated it into a context instead.\n. Right now Metadata.Provider is internal. I'd like to get to a point where Validation doesn't need to depend on IModelMetadataProvider by cleaning up the flow of data in that area. For now, I'll track this via https://github.com/aspnet/WebFx/issues/83\n. Yup.\n. You don't have T though, you have typeof(T). So this is probably the only way to do this. \n. var\n. string.Empty\n. string.\n. var\n. https://github.com/aspnet/WebFx/issues/74\n. var\n. Oops. I switched the model binding code to depend on the compat shim when I noticed they'd made a come back. \n. Forever losing this argument, aren't we? \n. But if the compat shim is doing the right thing and is significantly less verbose, why not use it?\n. This needs to made more robust once we decide where it'll live.\n. I'm planning on changing the type to TypeHelper. Hence it's not an extension.\n. General cleanup as part of changing this method to use TypeExtensions.GetDefaultValue\n. They aren't. This came about as part of this discussion - https://github.com/aspnet/WebFx/pull/23#discussion-diff-10286308 \n. At this point no. @yishaigalatzer is in talks to figure out where it needs to live. For now, I did this to unblock my changes.\n. I think they wanted to go with the friendlier \"JsonMediaTypeFormatter\" in the old world. That string does need to change :+1: \n. It's is an Input Formatter though \n. https://github.com/aspnet/HttpAbstractions/issues/19\n. @dougbu  is changing this.\n. Yeah, that would be nice\n. This needs refacatoring so this might change over time - The non-generic view exists so we could reference it without knowing the generic type parameter. RIght now all views we create are instances of RazorView\n. @yishaigalatzer, does this look alright?\n. :+1: \n. Sure!\n. Sure. \n. We do know the set of properties. However, in this case we look for attributes on the property. We don't have a way to get to that via the metadata (so far). \n. I was hoping to hear back from the K engineering team about the internals thing before I get this checked in. That ought to decide what happens to this.\n. :+1: \n. Does Xunit actually discover internal attributes?\n. :+1: \n. FxCop rules apparently. There was one on the base type with an explanation saying that it was intentionally not sealed. \n. @Eilon responded to the email thread. I'm going to change these to internal since it seems like we're ok with that. I didn't want to go through the trouble of slapping InternalsVisibleTo on assemblies without knowing where we stood on the internals discussion.\n. Yup. Needed to be targetInvocationException\n. I thought I could wait until we heard back from folks in the email thread. \n. I don't follow. The null coalescing was something that existed in the old code that I had missed when porting. It showed up as a result of a failing test\n. IVT does exist in CoreCLR under System.Runtime. So I guess this should just work.\n. Could you remove this? \n. Primarily because I'm not sure we have landed on this license as yet. Plus it'll make it harder when we eventually do make a pass and stick it on every file in the sln.\n. SequenceEquals instead?\n. I think @HaoK ported these to the Testing assembly. The next iteration in this series would be to switch over to that assembly.\n. We had a comment in the earlier iteration to remove the static helper that this was sitting in.\n. The way it's currently designed, individual formatters decide if they can handle a request. We could eventually refactor it in to a base type\n. https://github.com/aspnet/WebFx/issues/107\n. This is essentially what happens today. I think the expectation is that you have to return a new instance of JsonSerializer on each call of CreateJsonSerializer.\n. The cleanup will come separately. \n. Not when these params are well known and not-null :-1: \n. :+1: \n. What's the difference between the factory and provider?\n. For partials I think the second parameter is ViewData. Why not do something similar here instead of the args array?\n. Render()? RenderInvoke sounds odd\n. Unrelated to the change, but while you're changing this, could you make this var?\n. Need to update this CR - the property is going away for now. That said, it had an AllowMultiple = false, so it wouldn't be possible to have more than one of it on an assembly.\n. @davidfowl would this be added to the Runtime.Interfaces assembly eventually?\n. I think the idea is that we'll eventually have a Runtime.Contracts assembly that'll have these interfaces. \n. I agree, needs to be AssemblyNeutral. Unfortunately we're killing this attribute for now.\n. I think part of the AssemblyNeutral contract is that types definitions are identical across assemblies So changing it to internal might not work?. \n. This is tracked via WebFX-159\n. If the plan is to pass the writer via the context, do you want to go ahead and yank out the second (TextWriter) argument to RenderAsync?\n. Request.GetContentType is in an internal extension method as of now.\n. :+1: \n. Shouldn't fail with internal ctors. But fixed regardless\n. :+1: \n. You could use an ITypeActivator to instantiate this and it should do the injection for you. \n. > Model is null\n. Ignore, just saw @loudej's comments\n. Looks like the template for IsAssignableFrom. Is that gone?\n. Could this be changed so that you also do the name matching here? This way it seems like you might not need to create the anonymous type.\n. string.Join\n. You truly do love that extra space at the start of your document, don't you?\n. I did the same thing in a recent change and I had mixed feelings about throwing ArgsNull with the arg name \"value\". The user never specified something named \"value\"\n. var all around\n. sealed. I think FxCop complains about non-sealed attributes unless they're specifically meant to be derivable.\n. We have 2 different components that participate in controller discovery - IControllerAssemblyProvider and action discovery conventions. Given that view components are quite similar to this, we should attempt to have the same set of extensibility points for t\n. We aren't as yet. But we could save ourselves the trouble for later?\n. Should setting ViewData reset this?\n. Isn't this always a Dictionary type?\n. @Tratcher it would be nice if the error page preserved formatting (pre tag). This way we don't need to do anything special for printing these out. \nBonus points if you get it to support markdown\n. Extra space\n. public ViewEngineResult EnsureSuccessful(). \n. NeedsToGoAwayPropertyInjector \n. #region #fail.\n. These would fall back to the underlying dictionary. I like it this way, it doesn't null ref and throws the right exceptions.\n. @dougbu yes. Didn't see them until I removed ExceptionAssert.ThrowsArgNull\n. Wouldn't disposing the thing flush it?\n. Looks like this is already done in CreateJsonWriter\n. Does this need the leaveOpen flag? http://msdn.microsoft.com/en-us/library/gg712853(v=vs.110).aspx\n. Might be easier as a Linq expression:\nC#\nvar validMethodNames = controllerType.DeclaredMethods.Where(IsValidMethods).Select(m => m.MethodName);\nvar undefinedHttpMethods = _supportedMethodsForDefaultMethod.Except(validMethodNames, StringComparer.OrdinalIgnoreCase);\n. Could you split this as Arrange \\ Act \\ Assert?\n. Needs a #if net45\n. Might want to make these instance properties. This might have issues if we start running tests in parallel\n. needs a space following NotNull.\n. I almost feel like this method is better off as part of a IControllerDiscoveryConventions that does what we have in IControllerAssemblyProvider and this method. Seems like a more logical grouping of things.\n. Content-Type shouldn't matter for the action selector. What purpose does it serve having it here?\n. Same note as Content-Type below. You shouldn't need these in action selection\n. Curious as to why this and ModelBinding are needed for these tests?\n. @Eilon What are your thoughts on #regions?\n. Merge was the only missing method. The rest are expansions of IDictionary\n. Unrelated to this change, but do these properties need to be made private and set via the constructor? If so, could you file a tracking bug?\n. NotNull?\n. Unrelated, but does this need to be NotNull too?\n. Let's skip the copyright header until we've figured out what the right attributions need to be.\n. :disappointed:\n. Let me rephrase that: :broken_heart: \n. :+1: \n. In current Mvc, this derived from IHtmlString (which we don't have as yet). The only purpose of this seems to have been so that you could print out the result to a string. Do we want to continue doing this or keep it like this until we identify usage patterns and organically grow this type?\n. We might run down this code path when we've not model bound a property, and encounter it the first time when validating it. \n. In which case we'd say that the sub-tree is unvalidated. The current callers of this method handle this correctly.\n. Yup, this makes sense. I think I was sort of shooting for something like that but didn't think it through when I wrote the loop.\n. return entries.Min(f => f.ValidationState)\n. Does this look better:\nC#\nif (content != null)\n{\n    var helperResult = content as HelperResult;\n    if (helperResult != null)\n    {\n        helperResult.WriteTo(writer);\n    }\n    else\n    {\n        var htmlString = content as HtmlString;\n        if (htmlString != null)\n        {\n            writer.Write(content.ToString());\n        }\n        else\n        {\n            writer.Write(WebUtility.HtmlEncode(content.ToString()));\n        }\n    }\n}\n. Helpers would fail with \"The type or namespace name 'Template' could not be found\"\n. But the type itself is exposed via the interface. We could localize all null checks to ctors rather than individual consumers of this thing. For instance, something in the pipeline would null ref today if the action name was never set.\n. static? Why refactor string.Join into a separate method though?\n. I'm not sure if this works, but could we do away with this interface if all it does is provide the \"right\" ViewData type? Basically have HtmlHelper do the cast? \n. I thought the plan was to make this generic: INeedContext(TContext) since it's a common enough pattern we'd be using\n. FindView also does compilation. In the old code, our Csc compiler was async which forced this to be async. \n. That said, we need to correct the method name to have the Async suffix: https://github.com/aspnet/WebFx/issues/159\n. :+1: \n. You could inline it though: @{ await Html.RenderPartialAsync(\"HelloWorldPartial\", new User { Name = \"Bob\"})\nNot super sure having it as a method lends towards understanding what it's doing.\n. I recently investigated an issue with this bit of code - https://aspnetwebstack.codeplex.com/workitem/423. Essentially with the way it's written, there's no way to distinguish between the case where the user uses an overload that does not pass in a viewData and the case where they pass in a null viewData. It might be useful to change the method signature to explicitly identify these two cases.\n. List?\n. Does this need a NotNull check?\n. This might no longer work if we async views though. \n. Currently, the call to Html.RenderPartialAsync is in a separate method.We could simply inline it. Makes it easier to read\n. Should this be something like \"SetFieldRendered\"?\n. Also from the usage of this method, it almost seems like the backing type could be made a HashSet. \n``` C#\n            string fullName = ViewData.TemplateInfo.GetFullHtmlFieldName(name);\n            if (formContext.RenderedField(fullName))\n            {\n                return results;\n            }\n        formContext.RenderedField(fullName, true);\n\n``\n. You'd have to do that in the declaration too though. Doesn't get you much.\n. Not sure if this is an erroneous condition. Our code should never reach here, but this might be something a user might want to do.\n. Will remove\n. returnEnumerable.Empty();`\n. var\n. ViewData.ModelState.TryGetValue(key, out modelState) && modelState.Value != null\nreads better?\n. The way sections work is you register them in a page and then render them in the page that wraps it (i.e. layout). You'd use helpers instead of sections if you had to use them in the same page. \n. I imagine these would come from the DI and we'd register this as a singleton in the DI rather than have statics here? \n. Like above, seems like this should be a non-static type injected into the DI\n. Comment probably doesn't apply any more.\n. Wouldn't we continue throwing HttpAntiForgeryException here?\n. Policheck has trouble with foo? That's news!\n. Would we need that if our type does not use anything from the service provider?\n. In this case, we are instantiating one of the 4 types we determine - it's specifically one of Collection, Dictionary, Array or KeyValuePair - none of which depend on anything from the DI. \n. Path strings are guaranteed to start with leading slashes. So we don't have to deal with issues with slashes here.\n. NotNull instead?\n. Would we need to add this behavior to this method too?\n. You could drop the Length check too if you're doing StartsWith. It makes a lot more sense if you were to do\nif (path.Length > 0 && path[0] == '/')\n. :+1: This method seems like it needs needs to be backed by a better API with support for encoding.\n. This would get thrown if you do IsSectionDefined from the view (not the layout). IMO, this seemed like such an odd exception that I hadn't ported it over during the first iteration with DefineSection\\RenderSection\n. The method IsSectionDefined cannot be invoked as no view was previously rendered as part of this execution?\n. The signature of IModelValidator.GetValidationRules accepts a ModelValidationContext that has a ModelMetadata. This was a change in the signature of GetValiationRules, but it seemed consistent with the remainder of our code. \n- We could yank ModelValidationContext out and use ctor injection. The ModelValidatorProvider can do that for us. \n- We could have IClientModelValidator also take a similar context\n. var all around\n. I realize this is a direct port, but !char.IsLower(key[0]) || key.Skip(1).Any(c => !char.IsLower(c) && !char.IsDigit(c)) probably conveys what we're attempting to do a lot better. \n. Isn't this from Mvc futures?\n. Couldn't this be:\nif (!ViewContext.UnobtrusiveJavaScriptEnabled ||\n   !ViewContext.ClientValidationEnabled ||\n   ViewContext.FormContext == null)\n{\n    return results;\n}\n. In WebPages you could have done RenderPage and this would have made sense in a non-layout page. Partials don't quite have the same semantic \n. public?\n. Is #202 tracking the fact that this doesn't do ~/ urls as yet?\n. Could we use something other than @this? \n. properties.Select(createPropertyHelper).ToList()?\n. Shouldn't you be using cache.GetOrAdd?\n. Could you put the && on the previous line? Seems to be the pattern I've seen most folks follow in this codebase.\n. named param for bool\n. Do we care about this pattern anymore? I'd love to not have the FxCop rule that demands this not run in the new world anymore.\n. Could you use the second format (making an explicit call to EndForm) just so we have some coverage for that?\n. Done. Updated the review accordingly\n. Just return it in an array. yield returns generate super ugly code.\n. Seems like this thing only ever returns zero or one item. Could this be changed to return nulls \\ single values instead?\n. FYI - should be fine using optional parameters here. \n```\nprivate Task InvokeActionSelector(RequestContext context, \n                                       DefaultActionDiscoveryConventions conventions = null)\n{\n   conventions = conventions ?? _actionDiscoveryConventions;\n   ...\n   return defaultActionSelector.SelectAsync(context);\n}\n```\n. You can use Mock.Of if you don't plan on setting up anything on the object.\n. If it's part of core now, we could use the namespace = folder name guideline and change it to Microsoft.AspNet.Mvc.View(s)\n. I think the distinction they were trying to make was based on how much of the model binding pipeline we were executing to bind this (in terms of arrays and recursion into properties). That said, SimplePropertiesModel might be a better name. \n. The list of types here isn't exhaustive. It's simply the ones that were needed to port old unit tests over. \n. :+1: \n. https://github.com/aspnet/WebFx/issues/165. It should be fixed as part of this change. I'll go ahead and add a test for it.\n. Both. FYI - the only thing that wouldn't work is string values and flags \ne.g. \"Get|Post|Put\" -> HttpVerb.Get | HttpVerbs.Post | HttpVerbs.Put\nNot sure if we care about that\n. Interesting. Guess we have this bug in WSR today in that case\n. Well, like @rynowak mentioned, we could unwrap it up front. Probably easier to reason with too.\n. var\n. Apparently fixing this breaks the Flags scenario. For instance,\n[Flags]\n        private enum MyFlagsEnum\n        {\n            Value0 = 1,\n            Value1 = 2,\n            Value2 = 4\n        }\nThe value 5 gets bound correctly without the check, but it returns false for IsDefined. My guess is this was intentional?\n. https://github.com/aspnet/WebFx/issues/220\n. Tracking the scenario from https://github.com/aspnet/WebFx/pull/214#discussion_r11399232 with https://github.com/aspnet/WebFx/issues/220\n. Could we do this in a separate changeset? Less confusing this way\n. Could you used named params?\n. C#\nvar dictionary = value as Dictionary<string, object>;\nif (dictionary != null)\n{\n    return dictionary;\n}\n. You could use IsDefined instead: !method.IsDefined(typeof(NonActionAtribute));\n. Is this attribute going to be expanded to have members? If not, you could stick it as a boolean flag\n. > So many nulls, so few named parameter\n. shouldn't need an else. You'd have returned if it was not null\n. string (casing)\n. I love starting format wars, so what's our preferred convention for operators\nfoo +\nbar\nvs\nfoo\n+ bar\nfoo\n? \"A\"\n: \"B\";\nor \n```\nfoo ?\n\"a\" :\n\"b\"\n```\netc\n. Make var, not war\n. Is htmlFieldName guaranteed to be NotNull? \n. Could you wrap this over to the next line?\n. Could you change the description to say IHtmlHelper{T} (and exclude HtmlHelper)?\n. The registration methods that used these types are static in Mvc. I imagine we're no longer going to continue that pattern here. \n. This is ported over without changes from Mvc: https://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Mvc/DataTypeAttributeAdapter.cs\nWell, the only change was leaving it public rather than internal. \n. Not in private methods. It would be checked by the calling code.\n. It needed to change because of the earlier comment - I changed the registration methods to be instance methods. \n. Closer to what the old code did this way. You get the validation regardless\n. +1 to next? execution seems vague\n. Will redo this with build resx\n. I'll pass on this one unless you feel strongly about it. \n. In the subtypes https://github.com/aspnet/WebFx/pull/239/files#diff-8dba40320ec56000d6acb40a02c3a751R29\n. Yes, that would make sense once we revive the code\n. Will make it private.\n. Doesn't seem like it. It's injectable via the ctor and the way you go about it is either creating new instances of ModelClientValidationRule or subclassing this. Both lend to setting ValidationType\n. Couldn't it have this value injected via ctor?\n. string.Format\n. No :heart: for vbhtml?\n. Shouldn't need the parantheses around path.\n. Could you change the comments so that they're consistent. One of them is inside the braces and the other's outside. Stick to one format?\n. That sounds like it adds more confusion to the search behavior. @Eilon  might have more perspective on this though.\n. Aww, you finally learnt how to embed pictures. \n\n. RegisterMvcServices \\ UseMvc?\n. The code here looks quite similar to the Mvcs, NotNulls were used where the old code would have done an args checks. @dougbu suggested that this might be required for static analysis. I think I'm going to hold off doing that until we determine static analysis tools actually need it. The set of files that deal with adapters and client validation rules end up with far too many redundant NotNulls otherwise.\n. In this specific case, the base type's ctor has a NotNull. The conversation was about also adding it in the subtype - the args check is already done as part of the call to base() ctor. At this point the only utility for decorating the value on the sub type is for static analysis \\ if we had some sort of API documentation that would take advantage of these attributes\n. Fair enough. I checked in these changesets, I'll get a separate PR out for the NotNull today.\n. C#\nvar ex = Assert.Throws<InvalidOperationException>(() => viewEngine.FindPartialView(_areaTestContext, \"my-partial-view\");\n. FYI - Assert.Equal(new[] { \"foo\", \"bar\"}, searchedLocations) would work just as well\n. Sure\n. I think there was a reason to specifically to do this. The metadata might have independently discovered that it was readonly. If the propertyInfo determines it is not Readonly it would reset it. I guess the metadata wasn't designed very well but I'll leave this in for now.\n. Seems like you could refactor the SplitString + Select into a method\n. resx\n. Sort usings (System first)\n. Use named params instead\n. Convert.ToInt32 takes an object. \n. Yup\n. It was working when the code was ported as is from Mvc. Unfortunately it broke as part of the fix for this CR comment : https://github.com/aspnet/WebFx/pull/214#discussion_r11405304\n. The way we've designed this - you'd need to take in an IActionBindingContextProvider and use contextProvider.GetBindingContextAsync because that would give you per context validator providers. I'm not entirely sure how you'd convert it from async to sync though. \n. Should be able to cache the call to FromStringExpression.\nC#\n(name, metadata) => {\n   metadata = metadata ?? ExpressionMetadataProvider.FromStringExpression(name, ViewData, metadataProvider);\n   return validatorProvider.SelectMany(vp => vp.GetValidators(metadata))\n                            .OfType<IClientModelValidator>()\n                            .SelectManay(v => GetClientValidationRules(new ClientModelValidationContext(metadata)));\n}\n. Does this need to be internal?\n. key[0] maybe? Or better yet turn it into a regex? ^[a-z][a-z0-9]*$\n. See below. We changed this in an earlier PR - https://github.com/aspnet/WebFx/pull/214#discussion_r11405304\n. Fixing this in a followup change.\n. Also needs spacing between string,object. \n. Does this need a custom error message at all? The one ArgumentOutOfRangeException gives by default is pretty self explanatory. \n. It's an internal implementation detail though?\n. Set in else.\n. In WSR, value was allowed to be null which sort of makes having this attribute on it incorrect. Could you explain what this PR is about - why are we no longer allowing null values in the ModelState?\n. Yup. The other one was quite hacky - I'd made it as a quick fix without investigating much.\n. The way it works is when the model binder comes across a complex type that none of the other validators can bind, the ComplexModelDtoBinder sets the model to ComplexModelDto and proceeds to recurse. Consequently you unwind back out of a ComplexModelDto into the original type. The check was added to avoid running the validation twice for two representations of the same top level object.\n. No idea. Copied the code over.\n. https://github.com/aspnet/WebFx/issues/327 for the [DataType] adapter support. Not sure what we would do with [EnumDataType]. The adapters are meant for adding client validation support for these types and jquery.validation doesn't have any support for anything along the lines of enum \\ list of potential values. \n. https://github.com/aspnet/WebFx/issues/327\n. static readonly before readonly\n. Could we make this part of IApplicationEnvironment? It does seem like an AppEnvironment behavior.\n. readonly instead? \n. instead? It's not particularly expensive to check for Mono, should be ok to do this preemptively.\n. async Task. Xunit cannot await async void \n. Could you use a named param for the null value?\n. async Task\n. Is there a test that verifies the opposite? In that anonymous users fail when there isn't an AllowAnonymousAttr?\n. Could we not do an using block and instead simply Flush the stream after view.RenderAsync? That should sort this out without having to create a new type:\nC#\nvar writer = new StreamWriter(stream ...);\nvar viewContext = new ViewContext(context, view, ViewData, writer);\nawait view.RenderAsync(viewContext);\nwriter.Dispose();\n. Unrelated to your PR, but should this be Results?\n. string.\n. Tracking this via https://github.com/aspnet/WebFx/issues/386\n. :+1: \n. :+1: \n. Well more like !rule.ValidationType.All(char.IsLower) since he has the not.\n. Probably not. I think it was there to figure out what the behavior should be  - should we allow it to be explicitly reset by the user?\n. https://github.com/aspnet/WebFx/issues/400\n. @yishaigalatzer wanted me to have a discussion about it and track it separately.\n. We've used the term Unvalidated in the past specifically to mean something like this - http://msdn.microsoft.com/en-us/library/system.web.httprequest.unvalidated(v=vs.110).aspx\n. I'll go with my obviously better choice :smile: \n. Could you put parantheses around the || clause - makes it easier to read\n. Doesn't seem to be any benefit in sealing it though. All it has is getter-setter properties that don't do anything interesting. \n. > Gets or sets the name of the ....\n. readonly?\n. Sure.\n. This means it will get called after the package target in the standard lifecycle.\n. The CompositeValueProvider does that for us: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/ValueProviders/CompositeValueProvider.cs#L21-L22\n. I don't think so. I think it's just a convenience thing so you know what Culture your instance of ReadableString... is using\n. https://github.com/aspnet/HttpAbstractions/issues/3., I left the todo in there since it'd easier to scan for it as part of cleanup.\n. +1\n. You can always consume it as an IEnumerable though and AsArray seems like a premature perf optimization.\n. :+1: \n. How do you send a null value as part of a request though?\n. I think the context provider also needs to be sync. That said the type itself might need some redesign now that we have support for scoped services which was primarily what we designed this for.\n. I was doing this to show we specifically parse fully qualified names.\n. It does. But we had a similar conversation about NotNull when you want null or empty and decided that if we want the latter behavior, we should simply do a IsNullOrEmpty check.\n. Could we just make these 3 different methods instead?\n. If there aren't other things that go in the directory, leave these tests in the top directory.\n. I think we've been using the namespace of the the thing being tested. So this would be Microsoft.AspNet.Mvc.Core\n. async Task.\n. Could you use Task.FromResult instead? vc => { vc.Writer.Write(defaultViewContent); return Task.FromResult(0); }\n. You could set it up with the specific view name \"Components/Test/Default\" and mark it as Verifiable() and then call viewEngineMock.Verify() in the Assert.\n. Done.\n. Ignore this type. It's ported over from Microsoft.AspNet.Razor as is.\n. @yishaigalatzer Thoughts?\n. I think it's because we don't want it localized. We use the same pattern in one of the @model error messages although the inherits keyword seems to be included in the error message.\n. Not as yet.\n. Ehh, we can change the pattern once we do get to too many Chunks in Mvc.\n. Not really.\n. We figured out throwing any exception here leads to VS crashing. So yanked out the ArgNullOrEmpty check and decided against NotNull.\n. Fixed.\n. :+1: \n. :+1:\n. The current code does things like accept symbols with '@' and nullable types without hassle. There doesn't seem to be code in the parser that does this for you for free and handling all of those edge cases seems like more trouble than it's worth.\n. Types can be repeated, the TypeName isn't unique.\n. ActionContext doesn't seem to be used in this method. Do you need to pass it in?\n. I don't think there are plans on adding NotNull support for properties.\n. The type is a provider and doesn't carry any state. I think it should be a singleton once we sort out the lifetime of types in Mvc's DI. \n. :+1: \n. Some of these tests were ported over from WebAPI's suite and they don't do the implicit required check. With the implicit required attribute check, we get more than one errors. The context of the test doesn't change because it's testing if another validation kicked in.\n. It's removing trailing spaces, so yaay!\n. Sure, I can try and figure out if I can use an alternate property that is not implicitly required.\n. Done\n. Done\n. Digging into this is a bit interesting. It looks like we end up with the validation in two different locations - one from the RequiredAttribute that we added as part of this changeset and one as a consequence of this check - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Binders/MutableObjectModelBinder.cs#L288\nI think having the one in the DataAnnotations should suffice and we should be able to safely remove the other check.\n@GrabYourPitchforks might have more context about this. I can bother him tomorrow when he gets in and see what he thinks.\n. I'm a bit confused by what's happening in this test. Where's the actionResultHelperMock used? How does running the two different action results verify that you're invoking a JsonResult?\n. From @anurse \nAcceptSingleWhitespaceCharacter accepts a single whitespace character and returns a buffer containing the OTHER whitespace characters found between that first WS and the next non-WS. So if it returned non-null, the current position is at the next non-WS, but there are a pile of WS characters that haven't been added to a Span yet\n. Turn this into MemberData where you yield the MethodInfo.\n``` C#\npublic static IEnumerable NonActionAttributeData\n{\n    get\n    {\n        return typeof(Controller).GetTypeInfo()\n                                 .DeclaredMethods\n                                 .Select(method => new [] { method });\n    }\n}\npublic void NonActionAttribute_IsOnEveryPublicMethodFromController(MethodInfo method)\n {\n     Assert.True(method.IsDefined(typeof(NonActionAttribute)));\n }\n```\nThis way the test failure would say what method doesn't have the attribute as part of the failure.\n. You should be able to do this inline.\n. This feels very flaky - any other test that has these types might end up showing here. More importantly, all you care about is the behavior of ActionDiscoveryConventions, not the descriptor itself. Shouldn't the tests be around that type?\n. There was a todo to make it internal. It was public when I wasn't sure InternalsVisibleTo was ok.\n. ^ TODO\n. https://github.com/aspnet/Mvc/issues/450\n. Could we not do this as part of the ctor? If this thing fails for some reason, XUnit would fail to initialize the type and we would see a non-obvious error.\n. You could refactor this into a method in the type and call into that as part of your test.\n. I realize it depends on Reflection's behavior, but you could do \nAssert.Equals(new[] { \"GetFromDerived\", \"GetFromBase\", \"NewMethod\" }, actionNames);\n. Don't do regions! :see_no_evil: \n. For this test, it might be much nicer if we had a type that specifically has a the one operator overloading method in it and you verify it returns an empty collection. This way you don't depend on the way the compiler generates method names.\n. Do we have a sample that uses a POCO controller? We should keep that around in our sample\n. I'm a bit partial to this. If we're going to yank out the IActionResultHelper, maybe we have this type only take in an IServiceProvider so it's easier for a user to construct the instance. We could then grab the ViewEngine from the IServiceProvider\n. I have no idea. It didn't look like it had the extra ws in remainingWs when I tried it. \n. ??\n. Needs license header\n. This was @Eilon's recommendation - this way it acts as a verification for the resource itself and additionally adds a check to ensuring that if you do change the string it still makes sense in the context of where it is used.\n. :-1: \n. Not super sure. I don't want us to depend on project layout on disk for this and consuming test projects as packages seems a lil dirty. Plus at this point KRutnime doesn't produce packages for test\ncc @davidfowl \n. Would be nice to get the var rule in soon.\n. readonly goes first in the list.\n. It's specifically meant for unit tests though. What makes it bad in that case?\n. Not in a unit test though. You can't necessarily tell if the result of using it one test affects it's behavior in another test. \n. Oh nevermind. I'll yank it out.\n. Yank it out? \n. This exists as an extension method. Plus it seems entirely bizzare for this method to be hanging off of ModelMetadata. \n. The thing returns an Array type and we need IList to be able to index into it in a nicer way than Array.ElementAt\n. :+1:\n. :+1: \n. Can you have each condition on a separate line?\nC#\nif (Model != null &&\n    PrototypeCache.DisplayColumn != null && ...\n. There's a CanRead property. Maybe call that instead?\n. Put the braces on a separate line. Stylecop complains about this.\n. Gotcha!\n. Oh certainly. I think we could probably do better but left this simple for readability\n. I was looking at it, and it seems like the ControllerFactory is essentially a glorified type activator. It seemed useful in Mvc 5 where it was an entry point for DI but that doesn't seem necessary now. Additionally the DefaultControllerFactory is strongly tied to the ReflectedActionDescriptor - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/DefaultControllerFactory.cs#L24-L31 - which just makes the thing less interesting. Thoughts?\n. I suppose. It just seemed like it was more consistent plus you could have invoked the method with a MyActionContext and the assignment would have worked.\n. Does SimpleDisplayText take care of NullDisplayText?\n. Oh no, haven't discussed this. The primary reason for the change was that you now had to Activate IViewEngine + IServiceProvider into a Controller to call this which feels entirely odd.\n. It's very specific to Mvc Controllers, Views and ViewComponents\n. Sure.\n. @loudej had some thoughts about that when I mentioned this change to him.\n. @yishaigalatzer This was the change I mentioned earlier in the day. In Mvc 5, IControllerFactory took a string controllerName and turned that into an IController instance. In our case, the controller factory really is a wrapper around ITypeActivator. I'm not sure it makes sense for us to continue having that. \n. Isn't this RequestContext? Or are we not reviving that?\n. Fair enough.\n. Seems like we have two implementations for getting property values - ModelBinding has an ILGen based one and Mvc.Core has a Delegate.CreateDelegate based one. Neither seems to have a way to SetValues though, ModelBinding simply calls PropertyInfo.SetValue. \n. Missed this one. Will update.\n. I wasn't sure what the behavior for IServerProvider.GetService is in when the service provider does not know of the type. Is it expected to return default(T) \\ throw? \n. +1 to the getting rid of injecting view engine and service provider. ViewResult requiring a ViewEngine should be a detail of it's execution and we shouldn't burden the caller with that knowledge (unless they opt into it)\n. Somewhat analogous, but ModelBinding does not populate fields. We have a closer precedent of ignoring fields.\nI don't have a strong opinion on non-public properties. Odds are if you are unit testing the controller, you are probably going to need these properties to be accessible anyway.\n. This is about the controller being a value type and not the property itself. In this case, we use reflection\nWe do set end up setting properties on value types but using the slow reflection code path.\n. Sure\n. Tracking via https://github.com/aspnet/Mvc/issues/662\n. I was trying to avoid having to confuse the API consumer as to why there are two ways to get to the controller. \n\nThis interface is also somewhat limited\n\nWouldn't the consumer have to replace the ReflectedActionInvoker \\ ControllerFactory to make this work? At which point, they could not use this interface at all.\n. Spoke to @rynowak offline. I decided I was too lazy to make the suggested changes\n. Why not go the other way and store this as a List instead?\n. Is the setter intentionally not private? Same for IsOptional?\n. I don't fully understand how these would be used - but why do these come from Options as opposed to DI? \n. It used to have a GetInstance method on it that took a ITypeActivator \\ IServiceProvider.\n. Yikes! I did mess that up \n. @yishaigalatzer suggested doing this instead of instantiating it in the ActionBindingContextProvider. IMO, it felt cleaner instantiating it (or injecting and injecting it as an IAggregateModelBinder) so that it makes it clear that we expect a single binder that represents all the binders that the application uses.\n. Well then, what determines if something is configuration-ey versus service-ey? Is it just the ability to reorder them? Or that we expect some things to not participate in scoping?\n. @yishaigalatzer / @Eilon could you make sure this works for Razor vnext?\n. I thought we were still doing the caching is bad unless necessary bit :)\n. Format document\n. Yeah. Creating a HtmlHelper was inordinately hard\n. I was curious if we wanted to bump this up to 6.0 instead? Just to get them all in sync\n. @bricelam go ahead and check this in. We can make the Razor version change independently once we discuss this.\n. The returned value is cached, so there doesn't seem to be any benefit in caching it here.\n. You don't have to unwrap a Mock.Of() though which looks a lot cleaner than new Mock().Object\n. I could make it internal. The problem is in this case the things that are set up specifically work for my unit test. I think there are other tests that might require the IViewEngine to find a view and so on so this might end up looking very different once we get the other tests ported over. \n. It's not though. It's moving common code for the functional test into a single type. \n. Caching the delegate.\n. Isn't the same question as https://github.com/aspnet/Mvc/pull/648#discussion_r13762332? We let the DI's behavior control the result\n. Fair enough, I'll undo it.\n. https://github.com/aspnet/Mvc/pull/648/files#diff-922965ce7764d09698e076331ad56c7aR22\n. If you don't care about setting up the Mocked type, you could use Mock.Of() instead. Looks cleaner \n. string (casing). Also might want to throw in InvariantCulture for good measure.\n. just use the provider you created above.\n. Does the writer have a Write method? if not, you might want to set up a async call back\n. Right. The problem here is that you're calling an async method and not waiting it. \n. I thought the whole idea was to avoid using extension methods when unnecessary (and your suggestion sounds like one)\n. Make this public?\n. This Helper creation got moved to the common util type that @sornaks introduced. I imagine we are going to eventually start adding tests for validation being generated correctly. At that point configuring the right validator would be simpler, so I'll leave this in\n. Make sure you run stylecop before checking this in. Missing license headers and such.\n. Just do BaseType. That way you don't have non-localized strings\n. Should be InvariantCulture\n. Can we hold off on this change until we have support for Razor extensibility? Seems like we'd have redo these things + tests once we have Razor changes in. Especially if this issue is not blocking anything\n. We used to not write the <Model> when ModelType was null. Does that make a difference?\n. @yishaigalatzer looks ok?\n. The Composite model binder does the delegated call to IModelBinder.Bind. The other one simply instantiates the binders. @yishaigalatzer suggested creating the IModelBindersProvider. The intent was to \n1. not initialize things in the DefaultBindingContextProvider \n2. keep the Composite binder not initialize things\n3. DI the CompositeModelBinder \n. Fair enough. I spoke to @lodejard about this yesterday. Being able to return models from an action is a really nice feature. But the moment you start doing anything realistic (viz return status codes and error messages), you are forced to to wrap it in ObjectContentResults. \n. It's the other way around - it creates accessors if the instance is non-null\n. virtual properties get merged, but unfortuantely not new ones. I have a bug tracking this - https://github.com/aspnet/Mvc/issues/713. Seems like an edgy case but would be worth comparing the behavior with Mvc 5.0.\nRemoving the check causes test faiulres due to Mock. The base type has a public Mock Mock {get; } property and the derived type has a public new Mock<T> Mock { get; } and property helper discovers both of them.\n. According to https://github.com/aspnet/Mvc/issues/719, we need to change ViewResult to allow multiple IViewEngines to be passed in (probably via MvcOptions). In which case, do we envision allowing people to specify a sequence of engines they want to use for discovery?\n. Thoughts?\n. :sadpanda:\n. It's in Common. Making it public causes conflicts.\n. Oh sure. That I get. I was asking about the << TModel >> bit.\n. This mirrors DefaultControllerActivator. I left it like this in the event we get around to adding something to the dictionary\n. Except would require writing a comparer. Makes it less pretty\n. I guess\n. Yup, they're going to be represented as descriptors. \n. This was copied over from DefaultControllerActivator, and yes, perf!\n. The host doesn't have access to the ActivateAttribute type. The idea is to configure these from Startup but we didn't have a good way to do that. \n. They made ContentLength a nullable value specifically for this reason - https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNet.Http/HttpRequest.cs#L92\n. Wouldn't this be If NET45? I thought these methods don't exist in CoreCLR?\n. Could you have this sorted? Microsoft.AspNet.* are listed further up in this array.\n. What do you mean? Nevermind figured it out. It just seems like more API surface for a very limited use API.\n. We settled on this pattern with ModelBinders. I thought it made sense to keep it consistent.\nBut yes, in this case we don't benefit in any particular way.\n. Same thing as ModelBinding - it's pluralized - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Binders/IModelBindersProvider.cs. I don't mind changing it as long as we decide to do it in both places.\n. :+1: I'll do it as a follow up PR - https://github.com/aspnet/Mvc/issues/760\n. Sure\n. Our implementation of the ViewEnginesProvider does not cache the created views. The type itself is cached, but not the result of IViewEnginesProvider.ViewEngines.\n. My bad. This shouldn't be caching at all.\n. Just noticed that I was caching the results of ViewEngineProvider. That should be fixed.\n. You end up having to create a Func with this signature regardless for the .Select lambda. This ends up being a bit more readable overall.\n. This should move into wherever we land the ViewStart code - https://github.com/aspnet/Mvc/pull/747/files#diff-27d0f31c82c8c4cbbeebd55325e0364dR122. I'll leave this in for now\n. NotNull\n. Proper description?\n. Make these static readonly if the type is public. \n. Shouldn't need the FormattingUtilities prefix\n. readonly?\n. You should account for ContentLength being null. EIther do !request.ContentLength.HasValue || request.ContentLength == 0 or null-coalesce it request.ContentLength ?? 0 == 0\n. Fixed\n. #773 \n. #774 \n. Yes. In MvcCSharpCodeBuilder we pick the last one and run with it. However, having more than one @model statement is a parser error.\n. Shouldn't need this?\n. static class? Also, might want to choose a name other than Encodings. It's a little too similar to System.Text.Encoding. \n. Except the throwOnInvalidBytes, yes - http://msdn.microsoft.com/en-us/library/s756abs9(v=vs.110).aspx. Huh\n. Sort of - https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.WebPages/StartPage.cs#L101-L141. They had the advantage of using the VPP to provide an abstraction over the app root. \nI tried using the IFileSystem to start with, but that doesn't have a way to tell me that I have the site root. It does return false for any paths above the root path, but that's not sufficient information to determine if we've hit the app root.\n. .FirstOrDefault()?\n. I think @sornaks  checked in a helper type for this.\n. Undo\n. Wouldn't you need to check for the cancellationToken ?\n. Shouldn't need this, right?\n. I'm not sure these settings make sense for serialization? \n. Use Encodings.Utf8WithoutByteOrderMark\n. Remove?\n. Shouldn't need NotNull for private methods. You're passing in the parameter that's guaranteed to be not null\n. Aren't you supposed to call ThrowIfCancellationRequested?\n. You might not need to explicitly specify crefs. If you look at the MSDN docs, parameter types are specified after individual parameters. \n. Does it do this every time you update your project? Just seems like extra noise that's unrelated to your changes\n. The comment makes no sense though - \n\nSetting this to None prevents Json.NET from loading malicious, unsafe, or security-sensitive types.\n\nWe're not loading types here, are we?\n.  IViewEngine and IModelBinder didn't have factories and as such couldn't be created on a per-request basis. It seems odd to have a descriptor + provider for the value provider factory. \n. These were mutable in the old world - http://msdn.microsoft.com/en-us/library/system.net.http.formatting.mediatypeformatter.supportedencodings(v=vs.118).aspx \n. You could still have it be readonly as long as modifying MaxDepth doesn't change the instance of _readerQuotas you are referencing.\n. You could say /// <inheritdoc /> if the summary is identical to the interface declaration's.\n. protected?\n. Might want to revisit these numbers. The default values for some of these things is much smaller than Int32.MaxValue. In fact the DefaultMaxDepth is already set to 32. It might be sensible to stick with these numbers instead.\n. Would it make sense to simply expose the ReaderQuotas instance here?\n. namespace needs to be Microsoft.AspNet.Mvc.ModelBinding\n. Theories are better suited when you want to express the same scenario with different value sets. In this case, we want to specifically test the behavior of individual scenarios and each test name reflects that.\n. Shouldn't this be List<OutputFormatterDescriptor>?\n. Could you add the tracking item here?\n. typo\n\nwhich will typically be a value\n. Wouldn't this be easier to read if you do it as \n\nC#\nif (!ContextHasSameValue(context, requiredLinkValue.Key, requiredLinkValue.Value))\n{\n  var path = GenerateLink(context, entry);\n  context.IsBound = path != null;\n  return path;\n}\n. .FirstOrDefault(p => ...)\n. Should these dictionaries specify StringComparer.Ordinal \\ OrdinalIgnoreCase?\n. Sort usings\n. InterWebz bro. I should probably call it a \"view page\"\n. I'm not entirely sure having these as top level public types is a good idea. It's quite likely we'd end up modifying these controllers to account for new tests. The risk is that there's no telling if these changes somehow change the behavior of old tests in ways that cause tests to pass, but does not cover the code path that was originally intended to be tested. Having them localized to individual test classes avoids that risk.\n. It's a thing that creates views given a virtual path.\n. Sure.\n. This is interesting-ish - case sensitivity of paths is platform specific. \n. Comment's incorrect /> needs to be after cref\n. Remove\n. Or fix it?\n. Remove?\n. Needs more var\n. UtcNow?\n. Yaay!\n. Do these need to go too?\n. Doc comment\n. I know we did this with Antiforgery, but it seems semi odd to have a setter for replacing the entire option set. \nIt might lead to scenarios where say RazorHost ctor reads and stores specifically the ViewEngineOptions into a local variable as part of the ctor and then something else replaces the reference entirely. Having it be getter only would avoid conditions like these\n. Btw, do we want to simply call this IFileInfoCache. The fact that it expires is somewhat superfluous \\ implementation detail.\n. needs to be Microsoft.AspNet.Mvc.Core\n. Empty line\n. Sure\n. Are we going to name these types exactly the same as the ones in System.Net.Http? It's going to confuse people\n. Unrelated to this PR, but should formatters live in a sub-namespace Microsoft.AspNet.Mvc.Formatting?\n. As of today, we're only running tests in net45 for Mvc.Core. Might want leave the ifdefs out, it'll save us work removing these when we are able to start running tests in CoreCLR.\n. I was under the assumption that we allow multiple of these to be applied to the same action.\ni.e.\nC#\n[HttpGet]\n[HttpPost]\nIn which case wouldn't the description be \"that ~~only~~ supports the HTTP DELETE method\"\n. @rynowak I missed seeing your comment earlier. My suggestion was to not have these settings if they didn't apply to output formatting \\ leave them at default.\n. Maybe return this as IList? Would avoid the ToArray cost on the consumer end\n. Isn't this supposed to return an OutputFormatterDescriptor?\n. return from here?\n. Should this be called mediaTypes? It was a bit difficult to follow that this was the accept header and not content type header.\n. Also var\n. Could this return null?\n. Maybe call this mediaType and target or something like that. 1 and 2 don't convey much?\n. [NotNull]\n. Is this intentionally commented?\n. Yes. Isn't MvcOptions.OutputFormatter a List<OutputFormatterDescriptor>?\n. Make this a summary instead\n. Add an interface for this and a default implementation for it in Microsoft.AspNet.Razor. \n. If it's going to make porting apps a bit easier, we should probably revive it.\n. Would statusDescription be [NotNull]?\n. Seems like this could be pulled into a separate function \n. Nice!\n. Could you add one more that says \"A[0]\", \"A[0]\"\n. Is there a test case that covers the scenario when DisplayName is null and the expression is empty \\ null string?DisplayName_ReturnsEmptyString_IfPropertiesNotFound_AndExpressionIsEmpty.OptionBasedProviderworks for me. It's not a user-facing type so we should be fine not using the \"Base\" suffix on abstract base types.\n. OptionDescriptors?\n. Might need a [NotNull] here or guard for null values in GetContentTypes\n. Almost feels like this should be a behavior of the Parse method - it throws if it's unable to parse things. That's primarily the reason you have the Parse \\ TryParse pattern.\n.var objectResult = Assert.IsType(resultExecutingContext.Result);. What's the expected behavior if the filter has no content-types specified?var attribute = new ProducesContentAttribute();. new DefaultHttpContext()\n. Wouldn't your test break at that point? I thought the plan was to replace the parsing code once we find a home for it without having to change our code.\n. Typically nothing in our pages writes out individual chars. I thought it should be ok to represent it as strings instead. If you're asking about the specific way of converting it to a string, I'm open to suggestions.\n. I looked at what StringWriter \\ TextWriter do by default and they don't throw. See here - http://msdn.microsoft.com/en-us/library/cay30k2f(v=vs.110).aspx - their docs don't mention an ArgNull. I'm not entirely sure if something in our call stack does call Write with null strings.\n. :+1: \n. Yeah, I've always been shot down in the past when I've suggested structs. I'm not super-sure what the right use case for structs are.\n. Probably not. \n. Well, except that the data typeListOrValue\\BufferEntrywould also need to be made public. \n. There was an internal method that needed to be tested. I added an AssemblyInfo + InternalsVisibleTo for that\n. This was inspired by the pattern we have in https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ReflectedActionInvokerProvider.cs#L35. But I'd be fine using ITypeActivator instead.\n. Sure\n. Specifically *nix. I have a bug tracking this - https://github.com/aspnet/Mvc/issues/835. \n. It does mention that members aren't thread safe - http://msdn.microsoft.com/en-us/library/system.security.cryptography.randomnumbergenerator(v=vs.110).aspx. So invoking GetBytes concurrently might be bad.\n. Couldn'tProducesContentAttributereplaceResult`? You're not necessarily guaranteed it doesn't mutate the value.\n. It would mean you could remove the dependency on Moq \\ NET45 ifdef from this class.\n. There's a work item for changing some of this behavior - https://github.com/aspnet/Mvc/issues/854. I'll remove the current documentation and add it once we finalize on the new design.\n. :+1:\n. Minor typo: \n\nmay be provided by ~~the~~ DisplayAttribute\n. When you're binding, the Model binder first looks for things that start with the ModelName User.Name and then falls back to the prefix-free version:Name. When binding from an action, the parameter \\ argument name is the model name by default. When you're using this method, you have to pass it in.\n. Will change this to TryUpdateModelAsync\n. Could you move this to the OptionDescriptors namespace? This is not a user-facing type so it doesn't need to be top level\n. Look at DefaultModelBindersProvider for the pattern we decided on for using this.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/OptionDescriptors/DefaultModelBinderProvider.cs#L13\n. I think this lets you dot into properties. So you should be able to go represented by <paramref name=\"content.Object\" />.\n. Do we plan on using Base as a suffix for abstract base types? In this case OutputFormatterBase\n. Could we call this Result - seems like it better expresses what the property is. Also needs doc comments.\n. Remove spacing. \n. Any reason not to return from here? You could avoid having to declare a null value further up\n. PlanTextFormatter?\n. Shouldn't this be Encoding.Utf8 or Encodings.UTF8WithoutBom?\n. return base.CanWriteResult(content, contentType) &&\n           content.Object is string;\n. If you aren't doing any async work in this, you could return the result of WriteAsync\n. Sure. Could you file a tracking work item?\n. It's a pattern commonly used in the BCL. I'm not super sure what our convention is though.\n. Sure.\n. ModelState.IsValid is a boolean property now. Should be fine saying \n\nif (ViewData.ModelState.IsValid && (formContext == null || excludePropertyErrors))\n. Since formContext is unused anywhere else in this method, do you want to simply check for the result instead:\nif (!ViewContext.ClientValidationEnabled || ViewContext.FormContext == null)\n. I'm not super sure this comment actually makes sense. The errors are already written out to the div if they're present\n. Sounds good\n. Sure\n. @rynowak, no particular reason. The internal type was sealed, I simply translated it over. \n@yishaigalatzer I'm not sure I follow.\n. Fair enough. This message \\ condition was essentially ported over from Mvc v5\n. Whitespace!\n. named param.\n. On second thoughts, I think this message seems ok. It conveys the error message that users are most commonly going to run into - attempting to execute RenderBody from not-a-layout.\n. @rynowak Discussed your concerns with @yishaigalatzer. The number of things that the stack would have is generally few (one for the view being rendered, and presumably 1-2 layout pages).  That's not a particularly large number of boxing operations per view. \nThat said, we'll let these changes bake and see if these allocations do end up in the profile. \n. We were passing in an empty string to this method prior to this, so the change was simply culling the argument out. \nIf we were to do this correctly, we'd end up having to cache the generated code along with the generated type in our results. Seeing that you'd have these strings hanging around in memory with nearly no use, I don't see why we need to make this work.\n. You shouldn't need to do this any more. In fact, it should be safe to remove the Injector type once you make this change.\n. It's not a mocked ViewContext. Calling this GetViewContext should be fine.\n. DefaultHttpContext\n. The ViewEngine that this type uses is meant to be passed into the ViewViewComponentResult. Should we patternize it the same way we did it for ViewResult and read it from RequestServices? \n. This doesn't have much to do with System.Type'. Maybe use lowercase type? \n\nThe type of the model.\n. string.Empty (casing)\n. The accessor does get cached as a property on PropertyActivator on a per-property basis. \n. I'll go ahead and check this in to unblock the CI. We'll revert these changes once we get a new build of Moq (which is the current plan).\n. Going back to https://github.com/aspnet/Mvc/issues/765, this might not make sense. The presence of [NotNull] on an interface doesn't guarantee the implementation would have a NotNull.\n. It still means we'd end up sometimes giving you the generated content (the times we actually recompile the page). Let's solve this separately as part of the other issue - https://github.com/aspnet/Mvc/issues/895.\n. Sure.\n. In this case the fileInfo has the cshtml content and compilationContent is the stuff we codegen. We're passing in fileInfo to print out the cshtml content in the event we throw an exception.\n. Nice catch!\n. It's cleaner to have the abstraction to read from here - https://github.com/aspnet/Mvc/pull/873/files#diff-cd2a8fb37823c5f12400e18951f762d0R125 than to do File.ReadAlltext or something along those lines\n. I should have rolled this into a separate change. RoslynCompilationService is registered as a singleton, so the cache is already equivalent to static for the application. Having it be static readonly would cause issues running multiple Mvc middlewares in the same application. \n. It's not null though?\n. Would something like this work - https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Razor.Test/RazorViewTest.cs#L244?\n\nvar expected = \n@\"Compilation failed:\nhello\nworld\";\n. We never have a cs file, the cshtml is codegened in memory to produce C# content. In System.Web, these files had to be saved to disk since it was the only way to invoke csc.exe to produce a type. \n. Updated to \n\nGets the path to the Razor source file that produced the compilation failure.\n. We do have strings like this all over the place so I'd rather keep it consistent. \n\nGit shouldn't cause issues because it would checkout with \\n on non-Windows machines and Env.NewLine would be the \\n.\n. There's a SO link that says you could use urls in cref. In which case, does it make sense to say \n\nThe composite format specifier as detailed at see cref=\"http://msdn.microsoft.com/en-us/library/txafckwd.aspx\" /\n\nor something like that?\n. Unfortunately that's would change how this type is consumed. Can't fix it in this PR.\n. This was one of the primary reasons to the PR - we didn't give Roslyn the path of the file that was being compiled.\n. UTF8 comes from KRuntime\n. In the dictionary?\n. The method's an implementation detail. It was public when we hadn't decided on using internal for unit testing.\n. https://github.com/aspnet/Mvc/issues/955\n. I could leave the remark out since we're more explicit about what CompiledContent is and how it differs from the file content.\n. Removed the remark.\n. Nope. build stylecop fails to parse this.\n. :-1: \n. Not entirely sure. Might be a result of a bad merge. \n. We aren't doing any browser based UI testing in the in-memory tests, why do we need css in that case?\n. > antiforgery\n. This controller isn't used in the test.\n. Could you add files \\ actions once they get used in your test? This comment works for the second action public async Task<ActionResult> Login(LoginViewModel model, string returnUrl) this controller etc. Additionally, if the purpose of this test is to verify you can have multiple invocations of @Html.AntriforgeryToken(), you can remove a lot of the cruft that's part of the page. It just acts as noise and doesn't add to the test coverage.\n. @rynowak, would these services ever need to be contextualized the way things in views are - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/RazorPageActivator.cs#L101-L105? I think that would be the case.\n. Maybe they could be commonized. That said, there's ever so slight differences in behavior - for instance I think the services we activate here would need to be contextualized, they have different contexts - that you end up sharing very little. But it might be worth a shot to find out how it looks.\n. The one test we have for this (https://github.com/aspnet/Mvc/pull/923/files#diff-93a8563191a37d578ed7dcc4cbff588aR72) involved injecting a HtmlHelper. That does need to be contextualized.\n. No harm per se. @sornaks, could you look at how the view activator contextualizes things and write a test for it?\n. The plan would be that it would get injected into your application by default (like IHtmlHelper) rather than have this. That seems like a much cleaner solution than generating new for all properties by default.\n. I'll have this PR updated.\n. It's an implementation detail. It was public because we hadn't decided if it was ok to use InternalsVisibleTo for unit test\n. You need to check for the ModelType as the first step.\nC#\nif (bindingContext.ModelType != typeof(byte[])\n{\n   return false;\n}\n. I'm not entirely sure this change was meant for binding to Linq.Binary. (IMO seems like a very strange thing to have as an action argument). In which case could you remove this comment and the quotes until we have a work item for this.\n. Assert.IsType\n. var\n. Make this a byte[]\n. Shouldn't need this.\n. How does this test pass?\n. Could you add tests to CompositeModelBinder where a property is a byte[]? This way you can verify it works when the model is not top level\n. We don't throw an ArgNull exception anywhere in the ByteArrayModelBinder (not unless @davidfowl changed compilation). Wouldn't this null ref?\n. Yup, ignore quotes for now.\n. Needs to be async Task. My guess is this was probably why your test passed.\n. Updated. \n. Could you pick a different string?\n. Remove this test. We'll eventually have code generation supports for NotNull at which point it'll do a null-check for us.\n. Completely unrelated, but we should probably rename this type. SimpleValueProvider would suffice.\n. Could you use a different value here? There's no way to tell if this is the only string that the binder supports\n. ModelBindingBindsBase64EncodedStringsToByteArrays\n. You should be fine doing a get here. \n. Could you change the test name? HttpMethodProviderAttributes_ReturnsCorrectHttpMethodSequence?\n. This is tracked via https://github.com/aspnet/Mvc/pull/915\n. You're right, the right behavior would be to to capture the exception and put it in context.ModelState.\n. Fixed in https://github.com/aspnet/Mvc/commit/90b40832ff8628d53a461449d50b047c79da6fbe\n. I'm tracking this via - https://github.com/aspnet/Mvc/issues/980\n. I would go for no with this one. We do similar things with Layouts (copying sections and BodyDelegate) over and it would seem odd to do it for one thing and not the other. Maybe we need to design an alternate overload mechanism\n. It's in the style of current MSDN comments though - http://msdn.microsoft.com/en-us/library/ee703473(v=vs.118).aspx\n. Sure\n. They aren't all Dictionary types though - for instance - https://github.com/aspnet/Mvc/pull/973/files#diff-a3927970e87fd8e27a9c387e41b112c6R49\n. This is an internal type. I thought we didn't need to document these?\n. It's in Common (shared between ModelBinding and Core). We could move this to ModelBinding and make it public.\n. Sure, I'll change this to public. \n. In the link, the passed in type is a ViewDataDictionary (which is a IDictionary). Plus I'm not sure there's any benefit to trimming down one extra parameter to a ctor especially if the plan is to make this a public API.\n. The intent was to specifically not surface CopyOnWriteDictionary as part of public surface API. \n. Could you add a comment saying this is taken verbatim from https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/RoslynCompiler.cs#L164?\n. I would say you could drop Layouts and partials just so that you can test the very specific scenario you're testing. It's nice to exercise Mvc's features, but this takes the focus away from what the intent of the test is.\n. You could get away using the default overload for UseMvc\napp.UseMvc();\n. Could you have this sorted? It's probably going to be first in the list of dependencies\n. <see cref=\"ViewComponent\" />\n. Could you use something other than a string? It's not a realistic use case to DI strings.\n. @rynowak, out of curosity, was there a reason to not inject ITypeActivator here and instead consume it via GetService later on? Should IViewComponentActivator follow a similar pattern?\n. Tracked via https://github.com/aspnet/Mvc/issues/996\n. The population of the section writers happens as part of the execution of the page. We could pass in the flag into the IRazorPage and have it throw when you call DefineSection, but it seems like mixing view behavior (full or partial) with page behavior which felt dirty.\n. There isn't as yet. We could always pass something in - maybe as part of the ViewContext or make it a first class property of IView. The latter might not be a bad idea given that the notion partial and full views exists in the IViewEngine\n. Nope, but there's a way to optionally render it if it's defined RenderSection(\"foo\", required: false)\n. Tracking bug for this https://github.com/aspnet/Mvc/issues/1002\n. Fair enough. We could pass it in rather than having a fixed set here.\n. We handle that during the merge. The plan was to add caching to this in the next iteration so I thought it made it easier to separate the parsing and merging \\ overriding.\n. :+1: I didn't want to deal with extra code changes with this PR though. I'll have a follow up to remove this entirely. https://github.com/aspnet/Mvc/issues/1003\n. The way it worked was that this constructor invoked https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ViewDataDictionary.cs#L22 (as part of the this() call) and then copied individual items from the source to the newly created ModelStateDictionary. This effectively was the same pattern ViewDataDictionary followed and was thus affected by dictionary resizes depending on how many items are in the ViewDataDictionary. This change avoided by calling the copy constructor of ModelStateDictionary which was now backed by a CopyOnWriteDictionary internally.\n. This was used to check for not-null in a unit test. Spoke to @dougbu offline and we decided we could look at another property that MetadataProvider hydrates to verify it is being set.\n. More importantly, the ViewDataDictionary invokes this copy constructor - https://github.com/aspnet/Mvc/pull/973/files#diff-a3927970e87fd8e27a9c387e41b112c6R48.\n. There were extra spaces following the comma \n\n. Sure\n. This might not work if TKey is a value type though. I'd rather have the calling code do the NotNull checks for us\n. We could add a a type constraint to TKey since the 2 consumers we have now have string keys, but seeing that it's not public API, seems crummy. Thoughts?\n. Sure.\n. Perhaps use better names for the type parameters - I think in the absence of anything meaningful we typically use TVal and UVal\n. You'd still fail with warning as errors. Regardless, @dougbu suggested changing this to be an IDictionary(string, TValue) since either consumer is of that type. That should avoid this issue\n. Would this need null checks in the event x or y is null?\n. It doesn't look like there's anything else that I could check to verify if this property is set (it's entirely unused in this type). I'd much rather have this to verify the ctor does the right job than remove it for the sake of code niceness\n. :+1:\n. Does this comment still apply?\n. Nevermind\n. Why do you need to wrap it in a ReadOnlyCollection? The API for this returns it as an IEnumerable, so returning the list should be fine, shouldn't it?\n. > ObjectTemplate_Hono ~~u~~ rsHideSurroundingHtml\n. spacing - = \"value\"}, metadata\n. Assert.True\n. Does AttributeTargets.Class work? \n. Still confused. _properties is represented as an IEnumerable<T> though\n. Would this be Assert.Same? Nevermind, I was comparing the result of Properties but I think it's fine to do this rather than verify an implementation detail. \n. Nope, I could do that.\n. Tracked via https://github.com/aspnet/Mvc/issues/1016\n. https://github.com/aspnet/Mvc/issues/1016\n. As we discussed, made these virtual getter-only properties\n. We have a bug for it (this code was moved from ViewStartProvider) here - https://github.com/aspnet/FileSystem/issues/2. Would be useful to sort this out. \n. The other providers are in the Microsoft.AspNet.Mvc.OptionDescriptors namespace. Might want to move this to same namespace.\n. out var mediaTypeHeaderValue\n. IMO the list initializer syntax looks nicer. \n. That said, was there a specific reason we changed from readonly fields to private setters for this?\n. It would've been nice if this was done as two separate PRs. The two things that you're trying to achieve here are independent of each other.\n. We're only running tests in Net45 in Core. You shouldn't need this.\n. Would these parameters require [NotNull]\n. Don't init to null\n. What would be easier?\n. It follows the same pattern we have for CompilationResult - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/Compilation/CompilationResult.cs#L90. \n. string (casing)\n. It seems like the test for HideSurroundingHtml is getting repurposed for this. That doesn't seem right.\n. > cref=\"CachedDataAnnotationsMetadataAttributes(IEnumerable{Attribute}\" \nlooks invalid\n. Also, does this depend on the order in which ComputeEditFormatString and this method are called?\n. You could probably have culture in this line. But meh, don't care enough about this \n. Spoke to @NTaylorMullen offline. We don't merge in this piece of code and consequently don't deal with multiple instances of conflicting directives\n. It'll come in a later iteration.\n. String.Replace does Ordinal comparisons - http://msdn.microsoft.com/en-us/library/fk49wtc1(v=vs.110).aspx\n. We had nothing left in the type once the properties were removed. The suggestion was to make the properties public virtual to make customizing it easier\n. We run LastOrDefault() on the CodeTree not on the inherited chunks. Slightly different use cases\n. Yeah @NTaylorMullen is correct. When executing a page, we run all the _ViewStarts applicable to the current page\ni.e /_ViewStart.cshtml, /Views/_ViewStart.cshtml, /Views/Home/_ViewStart.cshtml \nThe behavior here is to also inherit from all of these\n. It's glorious though!\n. It was primarily for testing. But partly because the method was the only one of many Write* overloads that was not virtual\n. Added docs for the Write* overloads\n. The intent is to very specifically look for <TModel> (in a case sensitive manner) as a token. \n. It doesn't look like we have any nice way to go about this at present. Regardless, a change to how we go about could be made independent of this PR. Tracking it separately for now: \nhttps://github.com/aspnet/Mvc/issues/1043\n. This does wait for the task, so there's not much in terms of race condition here.\n. :+1: \n. You might want to pass in the names of methods into the resx string. This avoids having to deal with method names being accidentally localized: Please add required services by calling '{0}' before calling '{1}' or '{2}'.\nFormatUnableToFindServices(\"AddMvc()\", \"UseMvc()\", \"UseServices()\");\nand if you could actually get to the method from the place you're throwing, you could also do by doing nameof(AddMvc), nameof(UseMvc) etc\n. Spoke to @Tratcher about this and we landed on adding a new API to IFileSystem: https://github.com/aspnet/FileSystem/issues/12\n. The plan is to move most of this code to IFileSystem: https://github.com/aspnet/FileSystem/issues/12. I'll send a follow up work item to clean up this class.\n. Mark it sealed. There's no utility in modifying this type.\n. Just leave the service collection un-touched. Registering it as a IEnumerable just makes it slightly confusing to see what you're attempting to test.\n. :+1: \n. This is part of the sample and I thought this might be indicative of producing lots of content. But I could remove it.\n. Yes, that would work as long as it's inside the section and not in the body of the page. The problem at this point is that the section is synchronous and we would have to Wait on the result of FlushAsync() \n. https://github.com/aspnet/Mvc/issues/1050\n. Part of it was to simply verify if the page executes. I think the right test would be to check if we get the appropriate number of chunks with the contents split for each invocation of Flush. The API that we have on client isn't extensive enough to allow this. I an speak to @javiercn to figure out if there's some way to get to the raw results\n. It's sort of inline with the IValueProviderFactoryProvider. Not saying that one's a very inspired type name to start with\n. :+1: \n. :+1: \n. https://github.com/aspnet/Mvc/issues/980. This would go with the caching for the parsed results of ViewStarts\n. .Skip(1).Any()\n. .First(). You've already verified there's exactly one item in the sequence.\n. out var\n. Does this need to be Object.ReferenceEquals?\n. Since the comparison is based on TemplateText, it might be appropriate to return StringComparer.OrdinalIgnoreCase.GetHashCode(obj.TemplateText); \n. Could you provide it strings in the casing it would be (so you don't have to use the comparer)?\n. Doesn't matter here, but Mock.Of<IRouter>() is equivalent to doing this.\n. var\n. License header\n. The alternative to this would be to make ModelStateDictionary a scoped service. Seems like an abuse of DI though. Thoughts?\n. Sure. \n. :+1:\n. Switching to Headers.TryAddWithoutValidation should sort it out. Wasn't aware of it\n. Should go away once I switch to TryAddWithoutValidation. \n. I'm not super sure if there was any benefit in doing this that I'm missing - let me know if this needs to be reverted. \n. Could you elaborate on this? Should we pass IOptionsAccessor<MvcOptions> to the ActionContext ctor?\n. Yes. Isn't this an exceptional case regardless - your ordinary request shouldn't ever get to this, it doesn't seem like you'd be salvaging much.\n. Could you do if (isFromBody) here instead? Might be easier to read\n. Ctrl K + Ctrl D\n. Does The application's file system sound better?\n. You can avoid having the private setter if you declare it inline\n. Does it make sense to simply pass in a List into this method and expect the expander to manipulate that instance? \n. It might make sense to mock DefaultHttpResponse instead. Like @rynowak mentioned, this code doesn't lock down on top level properties on HttpResponse that modify the header. Since DefaultHttpResponse implements these properties by changing the header, you'll have an easier time verifying that nothing's changed.\n. Stream.Null \n. private class?\n. Seems like you're testing test code. HttpRequest doesn't throw and nothing in the formatter context enforces this behavior\n. The intent of this test is nice, but the this is testing host specific behavior. The test host behaves this way, but you can't guarantee this behavior. A more appropriate functional test might be to replace HttpContext.Response via the one that throws in the Output Formatter application and verify you have 200 OK in all your tests. This would future proof us from writing formatters that accidentally mutate the header collection once the response is written.\n. It might be nicer to rewrite this method as:\nC#\npublic XmlSerializer CreateSerialier([NotNull] Type type)\n{\n    try { return new XmlSerializer(); }\n    catch { /* don't throw */ }\n    return null;\n}\nIn particular the null assignment and specifying (Exception) in the catch block\n. Could this be written as\nC#\nreturn CanWriteResult() &&\n       CreateSerializer() != null;\n. We could leave it synchronous if we decide the act of producing the content for the view paths is synchronous. Does make it particularly hard to plug in a db or anything along those lines in that case. But if we're ok with that, I can revert this change.\n. Do any of these need to be marked as NotNull?\n. Apparently ?. is broken in Release builds. You might want to hold off on this until the next CTP of Roslyn\n. C#\nvar contentType = Assert.Single(contentTypes);\nAssert.Equal(\"application/json\", contentType.RawValue);\n. glorious!\n. The Values dictionary is only created if there's at least one View expander - https://github.com/aspnet/Mvc/pull/1153/files#diff-ba0a16bf08e5e36782c61a8695a1d6d6R107. In the default case, this will be null.\n. Oops. Will update it.\n. We use the result to query the IRazorPageFactory. In the event it returns null, we assume the cache is invalid and proceed as if we never had a hit.\n. We don't create the dictionary unless there's a ViewLocationExpander that is registered. For the out of the box scenario where you have none, it nobody except the IViewLocationCache gets to inspect this dictionary. Seemed like avoiding the allocation was a reasonable choice.\n. Not used. I'll remove it.\n. Once for the view, and one or more times for partials (and soon for Layouts). The values dictionary might be different per view name though depending on how you implement ViewLocationExpanders\n. These tests were moved to MvcRazorHostTest since it's actually testing the host and not just the visitor and we get to commonize code.\n. :+1:\n. This needs to work in design time \\ precompilation time at which point you cannot rely on the service descriptor being populated with MvcServices. The way to go about this would be to initialize the value inside the ctor (new TagHelperTypeResolver()) and provide a virtual property that allows overriding it in derived types.\n. GenericIdentity in the default mono profile derives from IIdentity rather than ClaimsIdentity. This seemed like a simpler fix than figuring out how to make it target NET45 .\n. Bug in Mono where they use the backing field rather than the Claims property to look for claims. So derived types don't work. Regardless, using the base type serves the purpose here.\n. These tests were a bit broken in Mvc. I think the intention of the test was to verify the values in the dictionary, however since it was an IDictionary<string, string>, we ended up treating it as a regular object and reflecting on it as part of the TypeHelper.ObjectToDictionary call. The resulting dictionary looked like { { \"Count\", 1}, { Keys, KeyCollection<string>}, ... and the comparison of these values was failing in Mono. \n. Remove\n. Use Type.EmptyTypes\n. Remove this if we're going to use the one that gets init via DI\n. _cache.TryAdd(fileInfo.RelativePath, cacheEntry)\n. Could you simply write this as \nC#\nreturn t.GetConstructor(Type.EmptyTypes) != null &&\n         typeof(VIewDescriptorCollection).IsAssignableFrom(type) && ..\nb and c aren't particularly meaningful\n. out var cacheEntry\n. named parameter for null\n. C#\nreturn types.Where(Match)\n                  .Select((RazorFileInfoCollection)Activator.CreateInstance(collectionType);\nDoesn't seem like there's much benefit in mixing Linq and yield returns. Also isn't there an Activator.CreateInstance<T>?\n. hasParameterlessConstructor\n. :100: \n. TryAdd does avoid creating the lambda though. \n. Couldn't this be reduced to having just one timestamp? If we need it for debugging, we could add a flag that says it's precompiled. \n. Create another OnCacheMiss(RelativeFileInfo, CompilationResult) that the other method calls into so you could avoid creating this delegate.\n. TryAdd\n. Indentation. Also why not move this to SyntaxTreeGenerator?\n. Why do you need this ctor?\n. Can you move this code to an extension method off of IFileSystem. Something along the lines of IEnumerable<IFileInfo> IFileSystem.GetDirectoryContentsRecursive(string path, string extension). Much cleaner than mixing it up with the actual precompilation.\n. string.Equals(cacheEntry.Hash, hash, StringCompaison.Ordinal)\n. Is the comment still valid?\n. Should this be called Checksum? \n. Move to a separate file.\n. Is this intentionally meant to be static?\n. var\n. Is there any likelihood that Template is null? In which case String.Equals(left.AttributeRouteInfo.Template, ...) would be safer\n. Would it make sense to short circuit early if the order is different?\n``` C#\nreturn left.AttributeRouteInfo.Order == right.AttributeRouteInfo.order &&\n         string.Equals(left.AttributeRouteInfo.Template, right.AttributeRouteInfo.Template, StringComparison.OrdinalIgnoreCase);\n. Sure. My only concern about the few places that we do test system error messages is that simply testing the exception (in this case `ArgumentException`), might not make for a sufficient test.\n. Apparently. We use the DataContractJsonSerializer in _k-test.shade which throws when it sees a non-quoted value. I had to make the same fix for routing too \n. Probably needs to worded better. The user has no idea what a writing scope is\n. `modelValidationContext`\n. What's the scenario this would throw? What property getter are we talking of in the comment?\n. This doesn't work if the body parameter is nested inside. We probably need to change validation to account for this along with @harshgMSFT's changes. \n. `type.GetTypeInfo().IsPrimitive`\n. Do you know why this is lazily initialized? validators from a type wouldn't apply to its properties, so this parameter would never be set, would it?\n. Aren't these already available on `ModelValidationContext`?\n. I think this is if you have large array of values\n. Leave this as `List<ActionDescriptor>` since it's never exposed \n. Sure\n. These depend on the order in which attributes are discovered via reflection. \n. The exception type is different between platforms - which is why it's using the `Assert.ThrowsAsync(Type exceptionType,` overload\n. `expectedException` does that\n. Does AttributeRouting call into ModelMetadata?\n. You are allowed to reference other entities in some data formats (like XML). This does make specifically for deserialization since ModelBinding doesn't allow for references.\n. I think it's trying to prevent allocating the iterator here by exiting early on. \n. Could you document why this is a singleton? \n. Why couldn't we do this in the `RazorEngineHost` in that case?\n. It's not a delegate though. If it'd thrown you'd have to catch it earlier on when creating the `ModelMetadata`\n. Could you add a comment for this?\n. @yishaigalatzer I don't follow. Could you elaborate on this?\n. Added a note to https://github.com/aspnet/Mvc/issues/986\n. We can skip this lookup by ordering on the dictionary items instead of Keys\n. There's an issue here where a higher ordered item in the view locations is added since the cache was last created, but we never see it.\n. Fix comment\n. > Initializes\n. Doesn't `Parse` throw if the header is invalid? If it's not we should change the method to be `TryParse` - that would be the more well established convention for returning failure to parse rather than returning null.\n. According to the specs, the quality value lies between 0 - 1. The NumberStyles matching this would be `NumberStyles.AllowLeadingWhite | NumberStyles.AllowDecimalPoint | NumberStyles.AllowTrailingWhite`. This shouldn't have to accept signs or separators.\n. You shouldn't have to trim if the NumberStyles allows for leading and trailing spaces\n. Could you add some cases to verify things with signs, exponents, negative values and values greater than 1 aren't accepted?\n. Missing `//Arrange`\n. Maybe call this `_originalWriter`\n. Formatting.\n. Yup - you sort of don't need to use Moq here when the ClaimsIdentity type gives you the behavior - http://referencesource.microsoft.com/#mscorlib/system/security/claims/ClaimsIdentity.cs#391\n. Essentially figuring out how to build Mono against the Net45 code path.\n. I could separate them out if it's difficult to PR this\n. Sorry, I don't follow?\n. Sure\n. I thought this wasn't particularly necessary since the exception message comes from FormatException. Unfortunately we don't have a way to get to the exception type.\n. It's tracked by my list of Mono bugs. I do need to file them with Mono though.\n. Needs a space after `[NotNull]`. Couple of other places with the same comment\n.  `Assert.Equal(buffer, outStream.ToArray())` \n. `var`\n. Sort usings\n. `Position = 0` is easier on the eyes\n. Could you use `Path.Combine` here? Avoids hardcoding path separator which is problematic in cross plat scenarios. Couple of places that have the same issue.\n. Or use forward slashes to represent these paths.\n. You can use `new DefaultHttpContext()` here instead and simply verify the actual property in the end.\n. Shouldn't need this check.\n. `[NotNull] byte[] fileContents`\n. I think the plan is to eventually add support for it when we know how to resolve this.\n. `Stream.Null` helps in case you need a stream that doesn't do anything.\n. Isn't this 4k?\n. Do we not have a site for testing action results in general? Seems very specific to have a site just for testing send file.\n. Sort usings\n. > binary array\n. Sort usings (System namespaces first)\n. You could get away by simply returning the result of WriteAsync rather than awaiting on it here. \n. Maybe pass this in from the base so you 'd have to change it one place when we flow the `CancellationToken` through the system.\n. Will Ctrl k - d before checking it in.\n. Yup. The resulting array is \"GET\", \"POST\" on Mono.\n. HttpContext.User is an instance of `ClaimsIdentity` which guarantees the associated Identity is a `ClaimsIdentity`. \n. C#\nif (!MediaTypeWithQualityHeaderValue.TryParse(item, out parsedAcceptHeader))\n{\n    return null;\n}\n``\n. > parse any of the Accept Headers\n. You don't need to initialize this.\n. Could you throw in an//Arrangehere?\n. The specific build we have on our CI uses the#elsecase - https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Security.Principal/GenericIdentity.cs#L41-L46. I'm not super sure how to get it to compile with theNET_4_5case which should bring it on par with .Net 4.5. \n. Is the test name accurate in that case -WriteFileAsync_WritesResponse_InChunksOfOneKilobyte.var`\n. Sort usings\n. Still not sorted \n. You could simply cast the instance here.\nC#\nvar canHasViewContext = tagHelper as ICanHasViewContext;\ncanHasViewContext?.Contextualize(ViewContext);\n. Extra space\n. > with <see cref=\"ViewContext\" />\nwould suffice. or \n\ncurrent page's\n. Is this going to be a common case for IActionConstraint - to call into async code paths?\n. typo:\nrepresenting a candidate\n. Maybe copy the description from the ctor argument\n. Are we keeping INestedProvider? I thought the plan was to move away from those types.\n. :100: \n. [NotNull] on interfaces wouldn't generate anything. Plus it doesn't become part of the actual interface contract - an implementation can not have this attribute and it would still compile.\n. This seems unrelated? This looks like @javiercn's changes - could you verify you rebased correctly?\n. Could this be simplified as \n\nC#\nList<ActionDescriptor> matchingActions = null;\nif (matchingActionConstraints != null)\n{ \n   ...\n}\n. Could we simplify this as \nC#\nif (startingOrder == null)\n{\n    // First iteration\n    order = constraint.Order;\n}\nelse if (order > constraint.Order)\n{\n   order = constraint.Order;\n}\n. ?. is good to use now. \n. DefaultOrder \\ DefaultConstraintOrder?\n. You should be able to remove this now.\n. You could consider passing MyService into the CreateTestRazorPage and use that to do Assert.Same(myService, tagHelper.PassedInService); here. The param could be null and initialized if it's not passed into CreateTestRazorPage. This should be fine as is if you don't feel like it.\n. Guess I didn't read it correctly. startingOrder could be non-null\n. I know @Eilon would complain about the extra space before <c>null</c>\n. The comma past displayFormat seems odd\n. If you aren't modifying global config (Startup.cs) as part of these tests, you should be able to merge this with RazorWebsite.\n. Don't do args checking in a test. If it's in the test code, use Assert.NotNull. If it's in the actual test, let it null ref.\n. The default overload for UseMvc should suffice\n. If you aren't modifying global config (Startup.cs) as part of these tests, you should be able to merge this with RazorWebsite.\n. Don't do args checking in a test. If it's in the test code, use Assert.NotNull. If it's in the actual test, let it null ref.\n. The default overload for UseMvc should suffice\n. Sort usings\n. Sort usings\n. Sort\n. Should be able to remove the ArgNull check \n. Should this be moved to UrlHelperWebSite? It doesn't have much to do with basic scenarios per se, does it?\n. Could you move this to the bottom along with the other inner type definitions?\n. Could you get this error message as var errorMessage = new MinLengthValidationAttribute().FormatErrorMessage(\"UserName\"); There's a ValidationAttributeUtil type where you could move this to for commonizing.\n. Could you ensure it's < 120?\n. modelAccessor: () => model\n. Formatting:\nif (implementedInterface.IsGenericType() && \n   implementedInterface.GetGenericTypeDefinition() == typeof(IEnumerable<>)\n. You could do this separately if you'd like if it's blocking this PR. It's to make these work on Mono.\n. You shouldn't need to use async \\ await inside this block. \nC#\nvar url = \"http://localhost/RandomNumber/GetFakeRandomNumber\";\nawait Assert.ThrowsAsync<Exception>(client.GetAsync(url));\nis equivalent\n. Add a comment here \n. Temporary for beta. We need to return something for the rendering to succeed. Post beta, we need to address https://github.com/aspnet/Razor/issues/85 so that this can return an AsyncHelperResult which gets evaluated by WriteAsync\n. We have a bug to do this for MvcOptions, but since this is a new type, you might want to follow the pattern SignalR does with the Add* - https://github.com/aspnet/SignalR-Server/blob/dev/src/Microsoft.AspNet.SignalR.Server/SignalRServiceCollectionExtensions.cs#L39.\nBasically return a WebApiServiceCollection that has a method ConfigureWebApi which is an Action<WebAPIOptions>. The user code would then look like:\nC#\nservices.AddWebApiConventions()\n             .ConfigureWebAPI(webAPI =>\n             {\n             });\n. Sort usings\n. Is this meant for our unit testing or for the consumer of this API? If it's the former, you could make it an internal setter\n. UriBuilder?\n. You could consider moving this to a separate method so that the property is easier to read\nC#\nif (_httpRequestMessage == null)\n{\n   _httpRequestMessage = CreateHttpRequestMessage();\n}\nreturn _httpRequestMessage;\n. _httpRequestMessage?.Dispose()\n. Is this pattern for back-compat? You shouldn't need it otherwise\n. Out of curiosity, why use a feature here as opposed to simply creating the RequestMessage and putting it in Request.Items\n. new MemoryStream(bytes); should avoid having to write the next two lines\n. If you use new() constraint, you will get a compilation failure, not a runtime error. \n. If you can enforce the new() constraint, that would be nice If not, we should throw an ArgumentException. The framework shouldn't be throwing MissingMethodExceptions\n. nameof(value)\n. Spacing\n. Does it need to keep the namespace?\n. Might not need the hashtag\n. Do not a yoda conditions. \nif (bindingContext.ModelType == typeof(CancellationToken))\n. Spacing\n. Sort \n. string.Empty\n. ArgumentException perhaps?\n. Sort\n. Without the unbuffered code, yes\n. Sure\n. new DefaultHttpContext\n. > Name to be validated on the current model.\n. Could you port the code from TypeConverterModelBinder as is? You should be able to replace this method via \nreturn TypeDescriptor.GetConverter(bindingContext.ModelType).CanConvertFrom(typeof(string)) (or preferably remove this method since it's no longer required to hang off this type) and not have to do the delegate stuff any more. \n. Seems like an overkill to have both a list in the options and a provider for specifying the excluded list. IMO, IMO, it might be simpler to simply consume MvcOptions from here and pass it on ModelBindingContext :arrow_forward: ModelValidationContext without introducing a new type. The extra indirection through a provider just makes it more confusing.\n. public IList<Type> ExcludedValidationTypes { get; } = new List<Type>();\n. Why not add this to the context?\n. :crying_cat_face: \n. It's less verbose though\n. You can't use named parameters inside an expression tree\n. Could you move this into ValueProviderResult since it's the only consumer of this API\n. There's a method in there called UnwrapNullableType that you could use there which effectively gets you this behavior.\n. I think you might not need to do this - we already unwrap nullable types at the start of this method\n. Assert.IsType(innerExceptionType, ex.InnerException);\n. Assert.Throws<InvalidOperationException>(() => vpr.ConvertTo(typeof(decimal));\nIn this case, the test name no longer makes sense. Could you change this test to cover float, double or DateTime instead and add a separate test to validate decimal throws?\n. Why does this not have an inner exception?\n. Could you format it so that the parameters are in separate lines (like the MvcForm) above? Makes it seem more consistent\n. I haven't seen the PR for DefaultHtmlGenerator - was all of this code simply copied over as is?\n. You shouldn't need this?\n. My complaint about this type is there's no way for the user to replace this type. At which point, why not just pass the list of delegates in and write a utility method which does what this type does?\n. Also, could we just stick the values in the context? We do want to start using this list for model validation too eventually.\n. This needs to be made an extension method. At that point, it might be safer to represent ExcludedValidationTypes as a custom delegate. Also the property ExcludedValidationTypes needs to be changed to represent that we're dealing with Funcs and not regular types.\n``` C#\npublic List ExcludeFromValidationPredicates\n/// Adds a predicate to the list that excludes the type and any derived type from being validated.\n/// This currently only works on types that are bound using formatters\npublic TypeExcludedFromValidationPredicate Add(this IList list, Type type)\n{\n    list.Add(t => t.IsAssignableFrom(type));\n}\noptions.ExcludeFromValidationPredicates.Add(typeof(XmlNode));\n...\n``\n. Ahh, missed the bit where we're parsing 12.5M. Nevermind this should be fine as is for now\n. Could you align the twoTypeHelpers\n. You could doInlineData[nameof(BasicController.RedirectToActionReturningTaskAction))]` and generate the urls in the test\n. ^ https://github.com/aspnet/Mvc/pull/1342#discussion_r18862085\n.  In addition to having removeTagHelper, it makes it much simpler to deal with the resulting set of types rather than strings. For instance\n@addtaghelper \"ns.mytype, foo\"\n   @addtaghelper \"foo\"\n   @removetaghelper \"foo ns:\"\nHaving the complexity of parsing and understanding these tokens in two separate areas to avoid creating additional TagHelperDescriptors does not make sense. Calls to Assembly.Load are very quick once the assembly has already been loaded.\n. If you don't care about throwing an exception if there's more than one item (and you shouldn't be relying on Singles exception message anyway), use First() instead.\n. C#\nif (!tagHelperOutput.Attributes.ContainsKey(entry.Key))\n{\n    tagHelperOutput.Attributes.Add(entry.Key, entry.Value.ToString());\n}\n. Also, what's the type of AllAttributes?\n. Since you do ContainsKey on the dictionary in some methods, use the same comparer as the one you get by default and verify comparison rule works. \n. TypesExcludedFromValidationPredicateExtensions\n. You could use <see cref=\"IList{T}\"/> here instead.\n. We should probably not throw if the value is optional. Just have it no-op instead\n. metadata.ModelType\n. Should this be called ExcludeFromValidationPredicate? cc @rynowak\n. > Adds a predicate  to the specified paramref name=\"list\" that excludes the specified paramref name=\"type\" and any derived types from validation\n. Could we move this check inside ValidateNonVisitedNodeAndChildren instead of doing it twice over?\n. It does seem like you get different behaviors depending on if you call Validate (no validation at all) or if we encounter the type as part of the object graph (shallow validate). Maybe move it inside so we do shallow validate? In which case we should make it explicit in Options that this means that we will validate an item of the specified type but not it's properties.\n. Separate PR\n. You could probably move it further down (right before the TryGetFileInfo) and don't have to initialize it.\n. Sort usings\n. StringComparer.Ordinal - assuming these map to action parameter names?\n. ``` C#\nvar bodyParameters = modelMetadatas.Where(m => m.Marker is IBodyBinderMarker);\nif (bodyParameters.Skip(1).Any())\n{\n throw;\n}\n``\n. Needs an empty line following this\n.GetArgumentAsync([NotNull] ActionContext context). If this comes from the DI \\ activated, you shouldn't need[NotNull].readonly. > to the HTTP request's body\n. There wouldn't be any reason to subtype these attributes, would there? If not, could you mark this as sealed?\n. Could you call the type parameterTBinder? \n. If the other method is public, this should probably beprotected. \n.return Task.FromResult(false);. UseStringComparer.Ordinal.Equals.methodInfoandparameterNameneed to be marked[NotNull]`\n. formatting (alignment)\n. Put these on the interface instead.\n. > The parameter {0} could not be found.\n\nto be consistent with the resx string above\n. [NotNull]\n. TBinder \n. Unrelated?\n. Unrelated?\n. Not as yet. In WebPages, we used to copy PageData, but we don't have that in Mvc.\n. nameof(actionContext)\n. [NotNull]\n. might want to be explicit? Specifically request's content isn't very obvious.\n. I thought we always sealed attributes unless there are reasons not to? I know FxCop complains if you don't.\n. nameof\n. - Spacing\n. TBinder\n. line length\n. TBinder\n. Undo?\n. Undo?\n. C#\nvar provider = Assert.Single(valueProvider);\nAssert.Same(valueProvider1.Object, provider);\n. We really need a better strategy to exclude these types. For instance none of the types in System.Runtime, System.Xml, etc) would ever have data annotations on their properties so there's no reason to recurse. For now, I'd rather keep compat though. @sornaks, is there a follow up item to get better defaults here?\n. Could you ensure this line is < 120 chars?\n. > Delegate that determines if the specified <paramref name=\"type\"/> is excluded from validation.\n<c>true</c> if excluded, <c>false</c> otherwise\n. This guy can probably live in OptionDescriptors directory in Mvc.Core under the Microsoft.AspNet.Mvc namespace (like the other option extensions)\n. that excluded the properties of the specified type and and it's derived types from validation.\n. named parameter\n. Revert?\n. This is ok, but as an FYI you really never need to do this. If the calling code throws, the test fails regardless\n. Shouldn't have to do ToString(), the string.Format would do that for you.\n. Does it only merge data- attributes? If not, could you use non data- attribute here to verify?\n. MockBehavior.Loose is the default ou don't need to specify it\n. Just use MockBehavior.Strict here instead of throwing\n. await Assert.ThrowsAsync<InvalidOperationException>(() => validationSummaryTagHelper.ProcessAsync(context: null, output: output));\n. Just make this internal and add a comment it's internal for unit testing.\n. Specifically if you're activating it, you might want to mark this protected internal to support derived types from being able to activate it too.\n. You could use TextWriter.Null for things you don't care about.\n. Use new EmptyModelMetadataProvider() in tests if you don't care about metadata from data annotations.\n. new DefaultHttpContext()\n. return IEnumerable<string> here since you're calling ToList() on this anyway.\n. ToList() \\ ToArray() since an array qualifies as a IReadOnlyList\n. Routing isn't used. This file was touched to allow removing the routing dependency from the test project.\n. Unfortunately not. Compiling Microsoft.AspNet.Mvc.WebApiCompatShim continues to produce the warning about System.Net.Http's version. I think @davidfowl  needs to fix that in KRuntime.\n. ReadableStringValueProvider lazily creates this structure and it was a direct port of what we have in WebAPI 3.0. Might be safer to stick to that pattern since it's likely there was reasoning around that choice.\n. It's the string we've always used and also hardcoded in our testing library - https://github.com/aspnet/Testing/blob/dev/src/Microsoft.AspNet.Testing/ExceptionAssertions.cs#L154\n. I'll fix the other ones too.\n. I'll send a follow up PR just so that this PR doesn't get randomized\n. Isn't checked a C# keyword?\n. It's trying to specify that the value checked that we calculate from isChecked can be overriden by values specified in htmlAttributes. In the absence of htmlAttributes we would have calculated those values in the method.\n. Apparently I missed adding the file to the commit. I'll update the PR in a bit.\n. In this case, we're trying to generate a checkbox for an item that's not part of TModel. In Mvc 5, they created an HtmlHelper<object> here with a null model. The code paths seem identical, but I could add a couple more variations of null model tests here.\n. For the unobtrusive validation tests.\n. It's nice to have this, but this isn't a particularly interesting scenario. None of the default value providers return object arrays so it's not testing anything from the default code paths.\n. Assert.IsType<FlagsEnum[]>\n. I think the practice is to use <c>true</c> here.\n. [NotNull] to match the previous case? Also I do agree, maybe we might not need all the combinations of model, includeProperties, excludeProperties, valueProvider and prefix here - seems like overkill especially since we do support passing in null. @Eilon, do you know how often these methods get used?\n. You could potentially merge the two methods. \n. prefix can be null now.\n. Assert.Empty\n. Do we actually have a Predicate<string> in our code? I'm not sure if we should prefer Func<string, bool> to this - Predicate<T> aren't very commonly used, are they?\n. We're missing a ton of code coverage with all the combinations. Let's wait for @Eilon's thought on the necessity of it before determining if we do need all the combinations.\n. These are functional tests though. In which case it should go in a separate file.\n. Yes they work the same. The one thing we might be potentially missing here is empty string, but that could be done separately.\n. I'm not entirely sure how specifying ContentType affects the ability to specify a status code.\n. Not per se, the names shouldn't change because the properties are inherited\n. var outValue = vpr.ConvertTo(typeof(FlagsEnum[]));\n. Could you add \"Value1,Value2\" as one of the cases here?\n. properties of the specified <paramref name=\"type\" />\n. :100:\n. [NotNull]. Probably needs the attribute on the other method too. \n. When is type null? Wouldn't we have the same issue with the other predicate?\n. +1 for FullName\n. Is this when it reaches object? Perhaps it might make sense to special case it rather than depend on it returning null BaseType?\n. IMO, we should just not this by default. We can advise users to add this type if they run into this issue particularly given that it's quite trivial to add this\n. In particular because we will end up walking the object graph for nearly every user type we encounter during validation. This makes this an expensive change. \n. ^ https://github.com/aspnet/Mvc/pull/1439/files#diff-f87445c6c1760492ba018e9a559bd865R461\n. Out of curosity, when would this happen?\n. > this method will be invoked once\n. Should this be IReadOnlyList<Attribute>?\n. If these aren't necessarily all attributes, should this be called metadata \\ actionMetadata instead?\n. actionName?.Name != null\n. extra space\n. Is the property supposed to determine if the ApiExplorer is to be visible or if the particular method needs to be visible in the API explorer? It sounds like the former\n. the given <paramref name=\"parameterInfo\"/>\n. > ToArray() is object[]\n. Isn't this equivalent to typeInfo.DeclaredMethods?\n. You use StringComparison.Ordinal when extracting the controller name. This should be whatever matches Mvc 5.0's convention\n. Spacing - [NotNull] TypeInfo\n. The list of ..? Or should we return an ISet<ControllerActionDescriptor>?\n. named param\n. If it's an IEnumerable there's no good reason to return a null value.\n. Could you specify it's capacity up front?\n. CultureInfo.InvariantCulture\n. Should these be constants in a publicly accessible type? View engines look these up, so it might be nice to be able to reference a constant.\n. Could you document why we only catch InvalidOperationException? Seems a bit specific\n. actionDescriptor.AttributeRouteInfo?.Template != null\n. Would a StringBuilder be a better choice here? How long are these strings going to be?\n. CultureInfo\n. The \"A\" should be dropped\n. Create it with a 1 one sized dictionary since you're guaranteed to add at least one element to it.\n. nameof\n. Assert.Null\n. I'm not sure I follow when you say \"ORsMultiple... You could return without awaiting here. Alternatively, return theActionSelectorhere and use that in theArrangeand callSelectAsyncon it as part ofAct.DefaultHttpContext. :-1: \n. It returns the stringp.Dependents[0].Age. Sure\n. It doesn't look like these collections get modified in the code that follows though?\n. Maybe rename this tonamedRouteError- nre sounds like NullRefException\n. CultureInfo\n. Depends on whetheraction.Parametersis an array. Just saves unnecessary collection resizes\n. I never implied this was for fun. If it is uncommon enough for us to not reference the type by default, why would we want to exclude it by default? In WebAPI 2.0, adding additional types required you to subtypeDefaultBodyModelValidatorand it made sense to have an expansive list since this was non-trivial. With MvcOptions, this is no longer an issue since discovering this collection and modifying it is very intuitive.\n. Do we account for that - say a convention removed all conventions that followed it? \n. CultureInfo \n. Collection resizes, doesn't seem particularly tricky to specify it\n. Perhaps add a line of comment that says these are consumed by theIActionDescriptorProvider` which are singletons so these can be transient.\n. Sort\n. Alignment\n. Makes the setup \\ Arrange and act separate. As it stands, this does arrangement as part of the execution \\ act\n. Extra space\n. Is there any good reason to change it all over? I can get properties, but these are commonly used values in tests all over.\n. > to ensure ViewDataDictionary is never checked, even when everything else is null \n\nThere's a test that validates if we pick up values from VDD if the value is null. I'm guessing there's a bug in HtmlHelpers.\n. Put at the top, and the parameters on the consumer should suffice to determine what the individual parameters are. The strong typing doesn't add any benefit.\n. We have code with foo, bar, baz for quite some time and they work with Policheck: https://github.com/aspnet/Mvc/blob/0d8a7368d941b8d20c0de1e6de831737c6293d52/test/Microsoft.AspNet.Mvc.HeaderValueAbstractions.Test/MediaTypeHeaderValueParsingTests.cs\n. :+1:\n. If this is primarily intended for tests, could we make this internal?\n. Making the ctors protected sounds like a good idea. It would prevent either our code or user code accidentally setting up these types in ways we don't anticipate and impossible to fix. Not super sure what the benefit of the Clone method is - would user code call into this?\n. :100:\n. > Also helps to avoid ~~ugly~~ field references in copy constructor.\n. Does this become an unit test only ctor? \n. Is there a risk of recursion here? For instance if the Model property on a derived type called SetModel as part of it's getter?\n. Would we be doing Activator.CreateInstance in ViewDataDictionary to support this? Seems a bit misplaced at that point.\n. :+1: \n. :+1:\n. :+1:\n. Don't do yoda condition\n. Could we add a functional sample test that verifies if this returns a 200 OK?\n. :+1: \n. :+1:\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. Seems unrelated\n. You could instead have a single line printed out here which is the assembly which would negate the need for having a separate file.\n. The mime type check doesn't add much to this test.\n. I think ReadAsStringAsync does an EnsureSuccesful check internally. This doesn't get you much per as. You could simplify this by saying var responseContent = await GetStringAsync(...):\n. It's a bit unfortunate we can't use TestEnvironment here. \n. IndexOf('.', StringComparison.Ordinal) != -1)\n. .Select(CreateCandidate)?\n. !string.IsNullOrEmpty(attribute?.Name)\n. Undo. If you're still having issues with this, clear the cache \\ %UserProfile%.kpm directories.\n. Would this match if it did not inherit from ViewComponent? If so, try dropping it. \n. Could we call this NotFullNameViewComponent. The 1 seems like a typo.\n. Much rather we change test code to use the ctor this calls into than making an internal ctor that is visible across multiple assemblies. I'm fine doing this in a follow up PR if it results in far too many test code changes\n. Could we kill this overload and simply have the derived type call into the other ctor with new ModelStateDictionary()? \n. Same as https://github.com/aspnet/Mvc/pull/1467/files#r19550787. \n. :100:\n. EnsureCompatible for consistency with other places where we do similar verification?\n. Should we do a reference equality check here?\nif (modelType == source.ModelMetadata.ModelType && object.ReferenceEquals(model, source.ModelMetadata.Model))\n. I know we get the ModelMetadata for the right type later on, but could we do the equivalent of GetModelType here instead of passing in typeof(object)? Might make it seem a bit more obvious that we're using the best guess here for what the type of model.\n. Could we have a couple of tests that verify when the declared type is less specific than the actual model type? declaredType: Person, model: Admin : Person\n. I agree - it's super unlikely you'll nest two model types with an overloaded equality operator that start off identical and later diverge - but it's a possibility nevertheless. I'm fine with deferring this for now\n. In particular with types in Mvc.Common being internal to every assembly, there's a risk that we might run in to types that would become impossible to reference in test code. \n. Couldn't we have derived types call into ViewDataDictionary([NotNull] ViewDataDictionary source, object model, Type declaredModelType)? It saves us the number of ctors to maintain and the corresponding documentation overhead.\n. I think something along the lines of \n``` C#\nvar vdd = new ViewDataDictionary(model: new Admin());\nvar vdd2 = new ViewDataDictionary(vdd);\nAssert.Equal(typeof(Admin), vdd2.ModelMetadata.ModelType);\n```\nI'm not super sure if this is already covered?\n. Huh, I always assuemd it used the default InvariantCultureIgnoreCase comparer. \n. Does this have to be a templated type? Couldn't it just accept the type as a ctor parameter?\n. I think we'll need to make this as a getter property to allow users to be able to search and remove specific items from the list.\n. Type type\n. Maybe Matches might be a better name for this method.\n. Seems unrelated?\n. Another reason not to make this generic. Just have it pass in the type as part of the ctor.\n. Isn't this essentially DefaultTypeBasedExcludeFilter?\n. Unrelated\n. The types that are filtered by this list should also be ignored for deep validation in model bound scenarios. We don't have that working as yet, but if the plan is to bridge the chasm between the two systems, then perhaps we should avoid naming it in ways that will eventually require refactoring.\n. Are we parsing the html contents of a page using Xml? That sounds like a terrible idea\n. Why not simply compare the expected output of the page as is?\n. named param\n. Should be StringComparison.Ordinal since method names are case sensitive.\n&& methodInfo.Name.Equals(nameof(IDisposable.Dispose), StringComparison.Ordinal)\n. Why not make the property a getter only? Saves the trouble of having to do null checks.\n. Plus this was a FxCop design violation.\n. Drop the private set\n. /// <inheritdoc />\n. Could we call this validationFilter instead?\n. > which is used to determine if <see cref=\"Type\"/>s are excluded from model validation.\n. Docs for this\n. Drop the setter\n. var filters\n. Could we have a test that verifies if the type name is same but located in a different namespace it doesn't exclude?\n. Do you want to just switch this out with the Type based exclusion filter?\n. public Type ExcludedType { get; } will get you the same semantics as what you have now.\n. If you're up for it, you could remove the private setters from other members of this type.\n. Is this intentionally settable?\n. Spoke to @yishaigalatzer  and @DamianEdwards and we agreed returning a token value is fine. I'm open to changing this to some arbitrary object rather than HtmlString.Empty if someone feels strongly about it.\n. We could cache this, couldn't we?\n. Seems like it would be just a lot cleaner to go\nprivate static MethodInfo _disposeMethod = typeInfo.GetRuntimeInterfaceMap(typeof(IDisposable)).TargetMethods[0];\n. Completely unrelated to this PR, we should settle on either Debug.Assert or Contract.Assert. I'd prefer Debug simply because we don't use CodeContracts and I'm guessing we don't actually expect the assert to be the one raising an exception for us.\n. Should we just pass in MvcOptions to ActionContext? I thought it sort of made sense to have it here since this is the type that instantiates the ModelState that the controller uses.\n. Could we instead verify that it's a copy by putting something in originalRouteData.Routers and making sure the value propogates to actionRouteData like we do for values?\n. Could you make sure this line is < 120 chars?\n. Alternatively you could do String.Equals(parameterValue2, parameters1[parameterKey], StringComparison.OrdinalIgnoreCase) and drop the null check. Note that this would return true if both values are null. Depending on the context, that might not be a realistic scenario.\n. ReadAsStringAsync will throw if the status code is non-successful. If the status code is uninteresting (like here), you could use that instead.\n. I'm not sure what the comments are trying to imply?\n. Might need a license header here.\n. Could you add 1-2 more combinations of lower-upper case chars Text/plain, tExT/plain etc\n. Yeah. In theory since the tests are very self-contained we should be able to repro any issues we encounter by simply re-running it.\n. Couldn't you have the expectedMediaType match the actual value instead of using ignoreCase? \n. Is there a benefit to returning this as a collection as opposed to an IEnumerable<string>\n. Could we make this attribute match the Html5 specs and have it be a boolean attribute?\n<option selected>Mango</option> < --- Selected\n<option>Bananas</option> <-- Attribute is absent to denote not selected\nIn this case we'd have to change this to be a boolean value and we can omit it if it is false. \n. Here's the spec - http://dev.w3.org/html5/spec-preview/common-microsyntaxes.html#boolean-attribute\n. +1. Could you drop this? We can bring it back if we really need to.\n. Sort usings.\n. Description isn't correct - there's no valueprovider in this context.\n. nameof(BindingContextProvider)\n. No value provider here either.\n. [NotNull]\n. [NotNull] \n. - Needs a bit of documentation\\examples on what we're trying to filter here.\n- Comparison needs to be Ordinal since property names are case sensitive.\n- Not super sure I follow doing the StartsWith either way - maybe adding examples would help\n. AFAIK, this supports things like method calls which doesn't make sense for model binding. We should probably throw in those scenarios. cc @dougbu\n. Could you simply verify the values inline rather than iterating over it? Easier to follow the assertion that way:\nC#`\nAssert.True(b.PropertyFilter(b, \"include1\"));\nAssert.True(b.PropertyFilter(b, \"include2\"));\n...\n. Could we add a couple more tests that verify inclusion on recursive property graphs:\n``` C#\npublic class Person\n{\n   Person Parent { get; set; }\n}\nm => m.Parent // only allow one level of parent\n. Also a couple of tests that verify if validation isn't triggered on graphs that aren't model bound?\n. @dougbu there are overloads of `TryUpdateModel` that accept a value provider. This one doesn't. Consequently, saying _using the value provider_ doesn't necessarily make sense in this description.\n. Could we have a copy of `GetExpressionText` instead? Presumably we only care about supporting property and index accessors for model binding.\n. Space after `[NotNull]`\n. Do we want to call out GET or POST since it's just a pass through string?\n. Does saying _`writes its output to <see cref=\"ViewContext.Writer\" />`_ make more sense?\n. Do these tests run? I vaguely recall it was creating a `ViewDataDictionary<ViewDataDictionary<T>>` when I ran these tests without the overload\n. License\n. \"post\" is a bit easier to read.\n. Shouldn't have to test for the nullability of the returned builder. \n. `var writer = Assert.IsType<StringWriter>(htmlHelper.ViewContext.Writer);`\n. Do we need to do `ToLowerInvariant` here? \n. :+1: I've always wanted to be able to look at `Exception.Data` and make sense of what the source of an exception was. We also do something similar with Razor compilation failures (stashing stuff in the exception)\n. Call this`viewFactory`. The `page` prefix seems unnecessary\n. Needs summary for the type.\n. In hindsight, this method seems a bit pointless now (since we're not pulling `IRazorView` from DI). Could you have the `RazorView` constructor additionally take `IRazorPage` and `isPartial`?\n. C#\nviewFactory.Setup(p => p.GetView(page, true)).Returns(view).Verifiable();`\n... \n// Assert\nviewFactory.Verify();\n``\n. Shouldn't need to do this. Nobody's going to pulling this in from the DI.\n. Undo\n. Undo\n. Add a test that verifies that forFindPartialViewthat are found, theviewFactoryis invoked withpartial: falseusing Mock's verification like above.\n. If you aren't doing anything interesting with these Mocks, don't pass it intoCreateViewEngine. The default that it constructs for null valuedrazorViewFactoryshould suffice. \n. You don't need to run the view. Just make theIRazorPageandIsPartialpublic properties onRazorViewand verify that their values are correct. Do this for non-partial views too.\n. Named parameters for bool values\n.new Mock();You shouldn't have to run the view here.\n. >A  that executes one or more  as part of it's execution.. Could you stack the parameters so their column offsets are all aligned?\n. Enumerable.Empty. \n. >A  instance that renders the contents of the specified .CreateViewEnginecreates aIRazorViewFactoryby default which should handle this for you (if it isn't already). It'll  make these tests less verbose. \n. Actually nevermind. You might have to pass in named params to make it work. This should work.\n. Make this a[Theory]instead with[InlineData(true)]and[InlineData(false)]forisPartial.Assert.IsType. You could drop this test if you do theAssert.IsTypefurther up.\n. Can you make sure this is fewer than 120 chars? If not wrap it on to the next line\n. Sort usings.\n. The type moved from Microsoft.AspNet.Mvc.Razor -> Microsoft.AspNet.Mvc.Razor.Host. In addition to the modifications that were made, git is no longer treating this as a rename. \n. @yishaigalatzer changed from the earlier implementation. We were callingOnCacheMisshere with aCompilationResult.Successful. However this caused the file to no longer be consideredPrecompiledsince it does not have a hash when we create it from aRelativeFileInfo. \n. From a DI perspective creating this type was being problematic sinceMvcRazorHostwould require an instance of it to compile which leads to a cyclic dependency. Given that the behavior of this type can be replaced by replacing theIRazorPageFactory, I changed it be replaced by a utility type that bothVirtualPathRazorPageFactoryandMvcRazorHostdepend on.\n. I'll come up with a better name for that lamda argument.\n. Will fix the typo in the comment.\n. This lends to slightly better coverage since it verifies that theChunkInheritanceUtility` gets the default chunks passed in from the host.\n. :+1:\n. Might want to say \n\nGets the set of assembly names that are used as root for discovery of Mvc controllers, view components and views.\n. Have the collection be getter only (drop theset;portion from the property)\n. Doing this doesn't necessarily let us verify that the property being virtual helps in any way. If the property is already public and mutable, do we care about having it be virtual at this point? cc @rynowak \n. Should this invokeGetRequiredServiceinstead or do we intend these services to be optional? For instance in the test you wrote, you'd end up with a null ref rather than a proper exception from the DI when the service could not be located.\n. Does it make sense forMetadataAwareBinderto ever return a non-true value? We've chosen the binder based on the metadata so it doesn't necessarily make sense for us to retry with a different binder when this returns false, does it?\n.[NotNull]on both args\n. Could we make use ofRequestServiceshanging off ofModelBindingContextto look up services instead of ctor injecting this value? \n. Could you make a service that consumes other services from the DI? It would ensure that we're not new-ing up instances ofDefaultCalculator. Seems unrelated?\n.FromServiceAttribute(singular casing) perhaps? It would be inline with the other namesFromBody,FromUrietc\n. Could we call thisFromServiceControlleror something like that? It would make it easier to look this up when browsing. \n. Could we get another sample where the model inherits from a base type and theFromServiceproperty exists on the base type? Also, doesFromServicework if you annotate the type with it (For instance if I annotateICalculatorwithFromService. It causes far too many lines to exceed past 120 chars. I'm going to won't fix this.\n. Not sure I follow what's being said here?\n. :+1:  \n. :+1:  \n. :+1:  \n. :+1:  \n. We have tests that verify this separately. Changing this requires passing in the expectation since there's no way to represent hypenated anonymous values.\n. It matches the behavior of theControllerActivator. It additionally means that the lifetime of this object is not tied to the lifetime of the service you're trying to get to. \n. Not really. Like I mentioned, it just makes it very explicit that the type is being DI-ed and we're not accidentally doing Activator.CreateInstance to create the property value.\n. I guess it behaves likeIsHandledin routing.\n. Totally unrelated to your PR, but this is super hard to read.\n. Do we need this?\n. Might not need to change unit tests - they specifically rely on the services that were manually added and shouldn't depend on services fromIServiceManifest. cc @rynowak  \n. We'll have a talk about this post-standup tomorrow.\n. Could you add an entry herex:\\myapparoot\\Views\\Home_viewstart.cshtmlto ensure it matches casing? TheTestFileSystemis case sensitive\n. Could be changed back to Ordinal with the changes to _ViewStart.cshtml casing.\n. Rename this toGetCompositeViewStartEntry. This needs to be thread safe. Verify what happens when something is reading theLastModifiedas we assign it.\n. @dougbu you might have more insight into this, but do we not need to do this during model binding? Would be cleaner if we build it as part ofAssociatedModelMetadataProvider`. \n\ncc @harshgMSFT \n. Formatting.\n. Formatting\n. Which might be alright. Presumably this would also be useful during validation when you would necessarily have a value for the Container.\n. Just so that I understand, there's going to be a follow up PR that changes AssociatedMetadataProvider?\n. Could you simply uncomment this line? The BodyModelValidator already uses this - https://github.com/aspnet/Mvc/blob/e21f15709509628cc33995bed3dd23800a2cccd5/src/Microsoft.AspNet.Mvc.ModelBinding/Validation/DefaultBodyModelValidator.cs#L40 - so we know it's reliable.\n. Assert.Null\n. This might break a test. Could you run functional test to verify the sample test still runs?\n. Could you stack the next two method calls:\nC#\nreturn ReferenceAssemblies.SelectMany(_libraryManager.GetReferencingLibraries)\n                           .Distinct()\n. Btw, you could use Mock to create these types instead of creating subtypes.\n. Assert.Empty\n. Each of these should be a different test case and the test name needs to reflect what the test is doing.\nCandidateAssemblies_ReturnsLibrariesReferencingOverriddenAssemblies\nCandidateAssemblies_ReturnsEmptySequenceWhenReferenceAssembliesIsNull etc \n. Why does this need to be changed?\n. Why does this need to be changed?\n. You could use <inheritdoc /> here since it's the interface contract property.\n. The test hasn't changed though?\n. Gotcha. Didn't realize the visibility changed from internal -> protected\n. FYI - response.GetStringAsync does an EnsureSuccessfulStatus check for you. Might be sufficient for cases where you don't necessarily care about the actual value of the status code\n. Missing //Arrange in nearly all tests\n. Isn't there a Regex constraint too?\n. Needs a license header + sort usings so that System namespaces appear first.\n. It's specifically for successful responses - that is when you don't necessarily care if the server returns a 200 or a 204.\n. @rynowak IMO TypeHelper.IsSimpleType seems like it shouldn't be on a helper. The expectation ValueProviderResult has with the use of IsSimpleType is things that are in mscorlib \\ System.Runtime that we know have TypeConverters from string. This is not the same expectation we have in this code - which is things we know that don't have any interesting subproperties to look at. \n. Revert\n. typo: composite\n. // comments.\n. IFileSystem is too generic an interface to put in the DI which is primarily why I used ICachedFIleSytsem. Merging the two allowed us to pass the type into ViewStartUtility, CompilerCache and MvcRazorHost - essentially all the places we were hitting the file system in Razor - which is what we should've been doing. Since CompilerCache needed both, this seemed like an opportune time to make this change.\n. The default implementation simply caches the results of RazorViewEngineOptions.FileSystem (which is what the ExpiringFileInfoCache does today). We had some a bit of discussion with @Tratcher to switch to using IMemoryCache with a file based expiration trigger, but there's quite a few missing pieces there at this point. But the plan is to eventually replace querying the file system to depending on file watcher.\n. expressions.Length == 0\n. Might want to change these test names to specify what they're specifically verifying  - TryUpdateModel_UsesPassedInPrefix\n. If you don't care about DataAnnotations kicking in, just use the EmptyModelMetadataProvider\n. Could you add one with a top level indexer too\nm => m[\"Name\"]\n. Also something that doesn't use m: var notUser = new NotUser(); m => notUser.Property\n. What you have is fine, but perhaps we should start using QueryBuilder from HttpAbstractions when we have a bunch of parameters to deal with. Makes it easier to read the setup.\n. We really shouldn't return nulls when we have the ability to return empty sequences.\n. Should this be IEnumerable<string> instead?\n. Extra line\n. Could we move this in to a separate method? I think we've avoided creating really large lambdas in Mvc.\n. Needs a bit more details on how this is used. It's not very obvious looking at the property what it's meant for.\n. Doesn't look like this was addressed?\n. Sure, being more specific about intent never hurts,\n. I thought we were ok making minor touch ups like these when we are touching these types.\n. Sorry I don't follow?\n. This is a new method though.\n. [NotNull] is specified in the implementation. \n. > if you actually want to special-case any relative path, change the method to check all characters for '/'\nThis would be introducing new behavior. This code was borrowed from Mvc 5 so I'd rather not change the semantics of it.\n. We use the value of pageName as part of an exception. Changing the value of pageName would make it harder for the user to identity what parameter they were passing in that was incorrect.\n. Unfortunately not. The value of Name is used to construct the exception message. Saying, \n\nThe view `/Views/MyController/Index.cshtml\" could not be found\n\nmake it much easier to diagnose than saying\n\nThe view `Index.cshtml\" could not be found \n\nsince it's not obvious if there's an user error in passing in the location or if something mutated it to remove the prefix. Additionally, ViewLocationExpanders could change what the view name could be, so mutating SearchedLocations is also incorrect.\n. https://github.com/aspnet/Mvc/issues/1635\n. Shouldn't this type be in ModelBinding namespace?\n. Chatted with @Praburaj and @Tratcher about the trigger. @Praburaj is going to be working on adding a file system watcher to IFileSystem that gets set up when you do IFileInfo.Watch(). IMemoryCache would have an adapter to the returned result which would allow us to largely remove this type.\n. > Contains methods to locate and render HTML display templates.\n. @dougbu would it make sense for these remarks to exist on Editor, EditorFor, Display, DisplayFor methods? I imagine most users don't typically use this type.\n. > Contains methods to locate and render HTML editor templates.\n. _ViewStart.cshtml is a behavior of RazorView and not this type. Might want to move the remark there. For this type, I think you could say something along the lines of\n\nFor ViewResults returned from a controller in an <c>Area</c>, <see cref=\"AreaViewLocationFormats\" /> is used. <see cref=\"ViewLocationFormats\" /> is used for locating all other views. Locations are composite format string (http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.110).aspx) where the following values for the following indexes are filled using the ActionContext: {0} - Action name, {1} - Controller name, {2} - Area Name. \nThe values for these tokens are filled in as is without change in casing. This means that returning a ViewResult from the Test action of HomeController would result in looking for the view at the location /Views/Home/Test.cshtml. If  performs case sensitive lookups either because it is backed by a physical file system that is case sensitive or is implemented to be case sensitive, locations such as /views/home/test.cshtml would not be discovered.\n. cc @dougbu for comment review :smile: \n. Additionally, add a remark to each of ViewLocationFormats and AreaViewLocationFormats that specifies what the default sequence looks like.\n. Don't do this. Change CreateViewEngine to return RazorViewEngine\n. Remove this test and instead add two separate tests, One which verifies the value of ViewLocationFormat and one which looks at AreaViewLocationFormat. All you need to do is check if the value returned by the two is identical to a hardcoded list in the test.\n. Verify the full path rather than doing a Contains\n. Verify the full path rather than doing a Contains\n. static?\n. Couldn't we simply cast these IEnumerable<T> and go from there rather than having a list of common collection type?\n. This seems like the wrong behavior - we could very well have validation on TestType and we shouldn't be ignoring it when the value is a primitive \n. Could you do an Assert.Equal instead and verify the exact output?\n. Seems like it's a very edge cased scenario\n1. Have a custom collection type\n2. That is composed of primitives\n3. Has a property with a validation attribute on it. \n\nIf you felt like being extra careful, you could throw in a check if the collection type is in the same assembly as IEnumerable<T>\n. Ahh. The files get modified as part of the functional test which is why the .gitignore was added to prevent modifications from accidentally showing up\n. Change the comment to match the one in RenderSectionAsync\n. You could leave these be, they don't change the nature of the executing code\n. This code definitely needs to be fixed: https://github.com/aspnet/Mvc/issues/1637\n. Could we leave the NotNull on actual implementation for now? We never got around to a consensus on how it's meant to behave if you define it in the definition.\n. You could accept a ViewEngineResult here instead. I'd be fine adding a few additional parameters here (partial for instance) to that type.\n. We might want to log the result of 2b (inside the foreach loop). ViewLocationExpanders transform the searched locations and it is useful to know what the transformations look like at each step.\n. Question for @lodejard  \\ @rynowak, are these types created with the intent that they're meant to be consumed by other authors of view engines? There are aspects such as Cached which are implementation details of the RazorViewEngine.\n. Shouldn't require the fileSystem any more. Also, change the name of the path parameter to applicationRelativePath.\n. :+1: @Eilon . You could simply chose to remove ~/ in the first option and trim the / in the second option instead of splitting it over two steps.\n. You could get away by doing\npath = Path.GetDirectoryName(path); here and not doing a string.IsNullOrEmpty check. That would happen as part of the while loop below.\n. Actually nevermind. This works as is without the inline assignment\n. Remove\n. Remove\n. @ianhong has a couple of changes that are related to this file. So you're probably going to have sort through quite a few merge conflicts here.\n. Did we settle on WriteContent as the interface contract?\n. Could you add a comment in the original thread saying this is a won't fix - https://github.com/aspnet/FileSystem/pull/20#discussion_r17691082. Seems like a bad choice but I don't see Mvc using it, so I don't particularly care.\n. InvokeActionAuthorizationFiltersAsync just to be consistent.\n. Does this get used?\n. Seems unrelated?\n. Yes, but individual transformations might be interesting, in particular if you're attempting to debug it. \n. I thought we were avoiding the use of versions in frameworkAssemblies?\n. Does AddMvc add areas?\n. Sure, I could add these to a subdir instead and make that the root.\n. > unhandled\n. Assert.Same\n. Could this be simplified as\nC#\nwhile (!string.IsNullOrEmpty(applicationRelativePath))\n{\n    applicationRelativePath = Path.GetDirectoryName(applicationRelativePath);\n    var viewStartPath = Path.Combine(applicationRelativePath, ViewStartFileName);\n    viewStartLocations.Add(viewStartPath);\n}\n. ``` C#\nif (!_lookup.TryGetValue(subpath, out fileInfo))\n{\n   fileInfo = new NotFoundFileInfo(subpath);\n}\nreturn fileInfo;\n```\n. to support ~~the~~ case-sensitive file systems.\n. to support ~~the~~ case-sensitive file systems.\n. > Path.GetDirectoryName() can return null when there is no parent directory\nWhen does this happen?\nPath.GetDirectoryName(\"some-dir\") => empty string\n. Could you use the one from https://github.com/aspnet/Mvc/pull/1588#discussion_r20890483 here?\n. from controllers that do not belong to an <c>Area</c>\n. Assert.Equal(viewLocations, viewEngine.ViewLocationFormats);\n. You shouldn't need a HashSet. Just use a regular array here.\n. Yup, the order is pertinent here.\n. var?\n. static?\n. ViewResults aren't meant to be re-used. So I think you should be fine simply assigning the result of loggerFactory.Create to a local variable here.\n. Might want to terminate each statement with a ..\n. :100: \n. new[] { viewLocation }\n. Warning would suffice. There could be other view engines that we scan for after this one which might discover the view.\n. Undo?\n. Seems unnecessary?\n. @rynowak do we need to log an Error if the application throws an error? \nThe EnsureSuccessful() on https://github.com/aspnet/Mvc/pull/1660/files#diff-54eb8d65d49bae77d473c5d6f40bcaa0R48 would throw if the view isn't found. Is this something we need to separately log or would we expect an application to log this via some error handling mechanism?\n. Needs doc comments\n. if (enumerable == null)\n. Might want to add Debug.Assert(actualTypes.Length > 0); here\n. C#\nif (actualTypes.Length == 1 &&\n    actualTypes[0].IsGenericType() && \n    actualTypes[0].GetGenericTypeDefinition() == typeof(KeyValuePair<,>))\n. I think we could add bigint and Uri to the list. Neither of them have any properties that have any validation.\n. Yaay!\n. This should be in ModelBinding.Test not in Core.\n. namespace Microsoft.AspNet.Mvc.ModelBinding needs to match the type being tested.\n. Could you also add List<decimal>, IList<DateTime>, ICollection<string>, HashSet<string> to the list?\n. Might want to make sure this is < 120 chars wide.\n. Might want to separate this out into three tests so it's slightly easier to read:\nSimpleTypeExcluceFilter_ExcludesSimpleType\nSimpleTypeExcluceFilter_ExcludesNullableSimpleType\nSimpleTypeExcluceFilter_ExcludesCollectionOfSimpleType\nAlternatively you could use a [MemberData] and add comments\n``` C#\nget\n{\n     return new TheoryData\n    {\n           // Simple types\n           typeof(int),\n           typeof(Guid),\n        // Nullable types\n       typeof(byte?)\n\n...\n``\n. ^ Is a nit. Up to you if you'd like to do this or just add moreInlineData`. Either works\n. :+1: \n. Might want to reduce the indentation.\n``` C#\nreturn new TheoryData\n{\n    typeof(int),\n    ...\n};\n``\n. *UseMvcdoesn't seem to add areas by default. \n. @SonjaKhan the exception is thrown fromViewResult\\PartialViewResult.\n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/RazorView.cs#L150 would be the more appropriate location to log this.\n. Could you move this toRazorView(https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/RazorView.cs#L150)?\n.NullLoggerFactory.Instance?\n. :+1: \n. :+1: \n. https://github.com/aspnet/FileSystem/blob/dev/src/Microsoft.AspNet.FileSystems/EmbeddedResourceFileSystem.cs\n. It is used to generate line mappings that are used in debugging. I'm not sure what it means to debug a file which is not located on disk (does not have a physical path).\n. I spoke to @yishaigalatzer and the intent was to support path's generated on one OS continuing to work on different OS. Depending onPath.DirectorySeparatorCharmakes this incorrect.\n. Revert changes to this file.\n. Is this intentionally non-sealed?\n. Is the namespace choice intentional?\n. Should this beIBinderTypeProviderMetadata?\n. What's this change for?\n. You might be able to get away by usingTypeActivactor(the implementation type) here. Here = this test class.\n.Mock.Of(). Isn't this the first binder in the list? Wouldn't theCountincrease by 1 for this test to continue passing?\n. Ok. The type is located inModelBindingand I wasn't sure if the namespace was a result of misplacement.\n. ^ Ignore this comment.\n. Do we not want to allow this on properties? Also, you might need to allow this on value types and enums.\n. Yaay!\n.AttributeTargets.Struct(Enum's repeated twice)\n. Could we get one more case with a simple value type (int \\ enum)? The intent would be to verify that binder specified inModelBinderAttributegets a chance to bind the value beforeTypeConverteretc\n. Could you write a remark in the same vein asRenderSectionstating that the returned value is a token value etc?\n.static readonly.StringComparer.Ordinal. Couldn't this be null?\n. Maybe I'm missing something, but why not simply call intoGetPropertyFilteras part of theWhereexpression instead of creating a delegate and invoking it?\n. Space\n.Composite(typo). Also, it might be nicer to make this type public (and outside of this type).\n. Does this behavior continue to get tested?\n.var. Remove usings.\n. Format (extra space)\n. Doc comment.\n. Space after[NotNull]. This is slightly related to your work item, but I think we might need a way for collection binders to call back into some of these types with additional metadata. The collection binder already has the smarts you have inConvertValuesToCollectionType` and we should be able to use that in a more general purpose way.\n@ajaybhargavb's HttpPostedFile change has similar issues so a design change here would have uses elsewhere too.\nI think the HttpPostedFile binding has a similar premise, \n. Remove\n. ^ Could we get a work item to track this for RC?\n. :100: \n. Does this continue to work if the [FromHeader] property is nested?\n. nameof\n. Could you also update the comment above this method declaration to state When running functional tests... since it's no longer necessarily in-memory?\n. nameof here since you're doing that elsewhere.\n. This seems unrelated?\n. In theory none of our functional tests should require StaticFiles. That said this looks like it was automated, so we'll live with it.\n. Could you add a /// <inheritdoc /> here?\n. Must've missed this the last time around - could you also remove this method?\n. You need to check for nulls here before.\nC#\nif (typeInfo.Properties != null)\n{\n   typeInfo.Properties = GetPropertyInformation(containerType);\n}\n. Undo\n. static\n. This comment needs to be above the assignment of the Properties property.\n. Could we also have a regular View that returns an IEnumerable<>? Would like to see some variants with Where, SelectMany , Take just so that we know it's not the Select iterator that is being covered.\n. Have a bug for this - https://github.com/aspnet/Mvc/issues/1696. It's intentionally bad data so that the test would fail once we fix the issue.\n. Sure, I can add a test for that. Although I think flowing the value of the IModelNameProvider into validation doesn't work today. @rynowak was this one of the goals of the Name property?\n. Why not just stash the Dictionary in the cache? The indirection doesn't help much. Same goes for TypeInformation\n. Shouldn't be any races any more.\n. Unrelated, but you could change this to use nameof\n. Moq has short cuts for these which read out a bit nicer: Times.Once(), Times.Never() etc.\n. You could throw in a MockBehavior.Strict ctor argument to enforce that it's the only method that gets called.\n. SetModelCallsGetMetadataForType ~~Only~~ ExactlyOnce\n. This is great, but it would be nice to have functional tests for some of the more common Linq methods. \n. Seems odd to see Of in the middle of a method name. GetPropertyLookup \\ GetPropertiesLookup maybe?\n. I think this needs to be SelectMany\n. Don't take in the linqQueryType from the query, just pass it through explicitly since you know what method this action does.\n. Should've noticed this earlier, but we should probably have a test where the model is a IEnumerable<SampleModel> and you use a partial to display the model\nHTML\n@foreach (var item in Model)\n{\n   @Html.Partial(\"MyPartial\", item);\n}\n@model SampleModel\n@Html.DisplayFor(m => m.Prop1)\nWe do want to make sure accessing the IEnumerable without reading values from the iterator works.\n. :+1: \n. // Arrange\n. A bit confused here - why does reading the Stream throw?\n. Why was this changed?\n. cc @davidfowl  \\ @Praburaj  \\ @Tratcher \n. I think the trigger would additionally perform the same checks we have today - it'll only cause a cache eviction if the disk based checks we used to perform determine the file has been modified.\n. Why do you have [Theory] with just one data source?\n. You probably want to read the Content after you've verified it is a 200 OK. I'm not entirely certain what the behavior is for reading the content of responses that aren't successful.\n. You could use a Dictionary<string, string> here. Much easier to read\nC#\nvar validPostValues = new Dictionary<string, string>\n{\n   { \"FullName\", \"Boo\" },\n   ...\n};\n. Just use a [Fact] here if there's exactly one data to be passed in.\n. License header\n. Remove spacing.\n. Use the int Range attribute here. I doubt it's a common practice to have a double range on an int property.\n. Are all of the tests going to be supplemented by @ianhong? Almost seems like it would make sense for him to do it as part of his PR\n. Why not use tag helpers here?\n. @NTaylorMullen, is there a tag helper equivalent for this? this = DisplayFor \\ DisplayNameFor?\n. What's the issue here?\n. Undo?\n. Let's use <label asp-for consistently here.\n. <a asp-action=\"Index\">Back to List</a> (not super sure on the attribute name)\n. We should have separate tests to cover HtmlHelpers behavior. In this case, let's stick to using tag helpers so we get the most coverage out of these tests.\n. Leave this in. @rynowak  specifically added this for the IIS functional tests.\n. Is this View and it's corresponding action used? If not, I would remove it\n. How does this work? Isn't the model an IEnumerable<Employee>?\n. That's not being covered via a functional test, is it?\n. It avoids creating an additional delegate () => compile().CompiledType\n. We use these as lookups in dictionaries. Having it be a different case was causing a cache miss when looking up the type.\n. Could you use @ strings here instead? We decided using those works better since it preserves the line endings of the source file.\n. This was the only type in that directory sitting in the subnamespace. I'm reasonably certain this was accidental.\n. This API is used in the runtime equivalent of kpm pack. So they pass in all combinations of framework, configuration for each project they come across.\n. Shouldn't be required. I'll yank it out.\n. Not sure, if specifying the term class is required. \n. Shouldn't you be setting controller \\ action etc here?\n. Drop this private set;. My guess is the compiler would generate a warning since you aren't currently setting them (which is a nice side-effect)\n. Docs\n. Formatting: space after [NotNull] and put the base ctor invocation on the next line.\n. Should these set the StatusCode property in the constructor instead? As it stands, a user specified status code always get over written by these hardcoded values.\nvar result = new CreatedAtRouteResult(...)\n{\n   StatusCode = 204\n};\nreturn result;\nExpected: 204 status code\nActual: 201\n. > Gets or sets\n. Drop the This is \n. I don't follow - what do you mean by current environment? \n. Had a discussion with @Praburaj, @rynowak @Tratcher about this. We decided on starting with supporting the disk based checks for paths without wildcards to start with. I'll have the PR sent for file system next. This should alleviate issues for Mvc. We'll track replicating the behavior for paths with wildcards separately since it's a bit more involved.\n. Not particularly. I could move this to GetOrAdd instead.\n. > Gets or sets the <see cref=\"IUrlHelper\" /> used to generate URLs. \nsounds a bit better?\n. This should be BadRequestResultTests\n. Could you use named parameters here?\n. This is fine as is, but you could do Mock.Of<IRouter>() if you don't care about setting up the Mocked type.\n. Shouldn't need this.\n. This (and the preceding 3 lines) seem unused?\n. The general pattern is to place MemberData property right above the test. Makes it easier to look up the values being used.\n. Could you remove and sort usings here? Doesn't look like they're being used.\n. Extra line\n. Doing return new[] { ..}; should suffice.\n. Use Assert.Equal here. We don't want to depend on the behavior of OriginalString returning the same instance of string every time here for the Assert.Same to succeed.\n. Assert.Equal\n. Could you split this across separate lines?\n. Could you come up with a better name for this test and the ones below? It's not entirely obvious what it's attempting to test from the name.\n. Could we come up with an alternate name for this? HomeController is overused in our solution and makes looking these tests up particularly hard. ActionResultsVerificationController perhaps?\n. Since you aren't validating, drop the annotations.\n. base on new line.\n. [NotNull] on context\n. [NotNull]\n. Yeah, the idea was Helios would also consume this type and pretty-print view compilation errors. I didn't realize we intended on using this for application compilation errors. If that's a something we plan for, I'll change this to ICompilationException\n. The diagnostic page (and Helios) print the exception message at the top of the error page. This   error message would cause diagnostic messages to be printed twice over - once at the top and once as we enumerate through the errors. Having it repeated was redundant especially given there's plans for Helios to support the type.\n. Yup. We specifically had a discussion about errors in multiple files at https://github.com/aspnet/Diagnostics/pull/79#discussion_r22322466. If we do want to support that sort of scenario, might make sense to change the interface. Thoughts @davidfowl \n. Shouldn't this be named ResponseCacheAttribute?\n. Wouldn't this throw if the value was never set? Seems kinda dirty\n. You shouldn't need to assign defaults\n. string.IsNullOrEmpty?\n. Consider using a local var headers = context.HttpContext.Response.Headers;. \n. Default should be 0. Also what enum did it map to in the past? Might be ok to use the term None here depending on how different it is from the System.Web equivalent.\n. > Gets or sets the value for the Vary response header.\n. Gets or sets the duration in milliseconds for which the response is cached.\n. Shouldn't the data ones following this comment throw in that case?\n. DefaultHttpContext?\n. Do you need a filter if it doesn't do anything?\n. If it's not meant to throw, split these out into separate tests e.g.\nOnActionExecuting_DoesNotSetLocationOrDuration_IfNoStoreIsSet\n. Undo?\n. Could we use a different name for this?\n. Need tests for the scenario where a a cache header is already Set. What was the behavior in System.Web?\n. @rynowak should this have AllowMultiple = false? ActionFilterAttribute allows multiple\n. Is it interesting to test having ResponseCache filters on the controller and on actions? (this is a supported scenario). Especially with the append semantics we take now, the filter has now, it might result in conflicting behavior.\n. new IFilter[0] / Enumerable.Empty<IFilter>() should work\n. This would throw from user's code though - \nvar filter = new ResponseCacheAttribute(); filter.Duration // Invalid operation exception about nullable types. Maybe  return 0 by default if it's not set\n. Unrelated, but we should get around to documenting these properties particularly since we want users to be using these types more often now.\n. Yup, separate unit tests since they are distinct scenarios you are trying to test here. IMO, its easier to reason about when you have unit tests drive scenarios and Theory-data drive data for specific scenarios.\n. Is the semantics for Default different from None? If not, let's just call it 1. IMO, we don't have to preserve the values for these enums.\n. We should consider changing the Model binder to have an additional method \\ bring back ModelBinderProvider so we can distinguish CanBind and SuccessfullyBound semantics\n. Preferably CopyToAsync. There's no reason to make a blocking call.\n. Shouldn't need to initialize this.\n. > An <see cref=\"ActionFilterAttribute\" />\n. > Gets or sets a value\n. Formatting\n. I think you can use <summary> blocks here.\n. Is this used?\n. QueryStringValueProvider \n. Could you add one more where it says NoStore in the action? Might reflect a more realistic scenario where you want to cache everything in a specific controller except an action.\n. @yishaigalatzer \\ @davidfowl, I'm not super sure if we decided on what happens if we call Flush inside of the tag. Currently that's not handled, but I suppose that's something we want to support? \n- Make it so that the content is buffered until the block is written and then invoke Flush. Keep track of this for the next time the tag is encountered and use that to flush for consecutive requests.\n- Throw if you invoke Flush inside a cache tag.\n. :+1: \n. That runs into the risk of unexpected collisions:\nVaryByQuery=PrefixSuffix and VaryByQuery=Prefix with ?PrefixSuffix=&Prefix=Suffix \n. It's meant to exhibit that the contents of the cache tag get cleared. I could be more explicit about it in a separate test.\n. :+1: \n. Can PreventExchange be deleted here?\n. Spoke to @DamianEdwards offline. We decided on going with the first approach. I'll follow up with a separate PR to reduce noise in this one.\n. I'll get that done prior to checking this in. Right now this is based off a separate branch since the Tag helper changes break the existing ones and I had to comment them out to get this one to work. Rebasing on #1770 would require redoing this PR since GitHub does not track changes to the base branch.\n. Will do.\n. I'm not entirely sure I buy this - the cache tag helper is a custom element and additionally it's designed to not render any content by itself. There really isn't much you can do to augment it from a different tag helper.\n. cc @GrabYourPitchforks  \\ @blowdart . The code's based off what we had in the OutputCacheAttribute in Mvc 5.\n. Sure. \n. It comes from here - https://github.com/aspnet/Mvc/commit/6600e68fc0d64e382f9172bfc4da1cbcb12bee10#diff-64a550e80195e44d72c7cba6ea99f428R107. I think you can drop it - the test name should suffice in explaining what scenario this is.\n. Also, why change this - it seems completely unrelated to your PR.\n. Let's make this change as part of a separate PR in that case.\n. Undo.\n. Undo.\n. Why did this change?\n. :+1: Duplicate test\n. :100:\n. Could you split the individual conditions across multiple lines like before? \n. Split like before (since it exceeds 120 chars line limit we use).\n. Line length.\n. Might be cleaner to simply return the realContext instance. All it would require is mocking the Request.RequestServices service provider.\n. What happened here?\n. Let's change this code before it gets checked in. Have this Controller Activate an IHostingEnvironment instance and save the files to Path.Combine(hostingEnvironment.WebRoot, \"UploadedFiles\", f.Name);\ncc @Tratcher should SaveAsAsync have an overload for IFileSystem SaveAsAsync(IFileSystem, string path); so you could do SaveAsAsync(hostingEnvironment, Path.Combine(\"UploadFiles\", f.Name));\n. License header\n. No, we want to bind to specific types here. In the other case you are likely to have List<IFormFile> or IFormFile[] etc which is why the IsAssignableFrom check is required.\n. Remove the false check. Instead do postedFiles.FirstOrDefault(); and return true here all the time.\n. Remove this check.\n. Formatting nit, add a new line here. Same suggestion on line 36 and 67.\n. Remove empty line.\n. Can you update the PR to remove this? The code's already been moved to an extension method in HttpAbstractions, hasn't it?\n. readonly\n. > Represents a <see cref=\"IValueProvider\" /> ...\n. Is there any consumer for this method? If not, let's remove this?\n. formCollectionFactory maybe? \n. public CultureInfo Culture { get; }. Assign this property in the ctor, we shouldn't need the backing readonly field.\n. Add a new line following thi.s\n. New line preceeding this.\n. var fileName \n. Revert this change too.\n. Mock the HttpContext if you aren't relying on the behavior of DefaultHttpContext.\n. namespace Microsoft.AspNet.Mvc.ModelBinding\n. This doesn't do enough in terms of testing the actual binding. Perhaps return a json payload which serializes the file content (or just their names)? Also would like to see at least one binding example where the object is nested inside a model so we know that scenario works too.\n. Needs <summary>\n. /// <inheritdoc />\n. Think this is unused.\n. Unused.\n. Assert.Equal(2, fileDetailsArray.Length);\n. fileDetailsDictionary \\ fileDetailsLookup.\n. Assert.Equal(2, fileDetailsLookup.Count);\n. Assert the lengths of the two arrays here.\n. Not that it matters, but couldn't you have used StringContent?\n. var files = Assert.Type<IList<IFormFile>>(bindingContext.Model);\n. Assert.Type\n. I think you might need a space after the semi-colon here. Check @Tratcher's pr changes for strongly typed header.\n. Well the key distribution characteristics of SHA256 is better. We don't want to use MD5 here because it could be forced to produce collisions and leak sensitive data. @blowdart thoughts?\n. Use [NotNull] instead\n. > <c>true</c> if the ModelState is valid; false otherwise.\n. Why do we need a modelBindingContext instance here? Shouldn't having a ModelValidationContext suffice?\n. Remove this test for now.\n. Extra spacing.\n. WOuld be useful to express the expectation as part of the test (e.g. TryValidateModel_WithValidModel_ReturnsTrue)\n. Formatting:\nC#\nvar validationResult = new [] \n{\n   new ModelValidationResult(string.Empty, \"Out of range!\")\n};\n. C#\nAssert.Equal(1, controller.ModelState.Count);\nvar error = Assert.Single(controller.ModelState[\"Prefix.IntegerProperty\"].Errors);\n. nameof(FormatterWebsite)\n. Why are you pointing to VersioningWebSite? Isn't the test in the formatter website?\n. indentation\n. indent.\n. Perhaps write a Razor comment here explaining why this is done. It's not the most obvious of pieces.\n. > <c>true</c> if the <see cref=\"ModelState\" /> is valid; <c>false</c> otherwise.\n. Indent this so that it is aligned with the argument in previous line.\n. Do you need this?\n. Remove\n. var modelName = prefix ?? string.Empty;\n. :(\n. indent\n. var error = Assert.Single(controller.ModelState[\"Prefix.IntegerProperty\"].Errors); and you can use that on the next line to avoid repetition.\n. This might not surface any additional error messages that could be added to the ModelState. Could you use BadRequestObjectResult here and deserialize as json on the client?\n. Shouldn't you just be able to cast to Administrator here instead of doing reflection?\n. Let's simplify this and just do the designation comparison.\n. In fact since you don't specifically care about how the validation happens, consider Adminstrator an instance of IValidatableObject. \n. Could you add a test for this exception?\n. Can we have a test without the prefix to ensure the modelstate keys are correctly generated?\n. The model to validate.\n. Model validation doesn't use IValueProvider\n. Did the method not allow null model in the past?\n. Was this the behavior in Mvc 5? If the ModelState was already invalid due to another model, this would return false for valid models\n. I think this should be in Microsoft.AspNet.Mvc. We don't use the 'Core' namespace in the application.\n. License header + Sort usings.\n. You might want to rewrite this as context.Filters.OfType<MyDesiredType>().FirstOrDefault()\n. Does this need to be virtual? What's the pattern with other filters? \n. Why have this method when the equivalent code is to simply reference the OutputFormatterOptions property?\n. You could simply call TrimStart here. Although you might want to be specify and truncate just the first '.' char depending on what your contract is. For instance is .....foo a supported format?\n. TryGetValue\n. Formatting.\n. Use an OrdinalIgnoreCase comparer on the dictionary.\n. Aren't we dropping xml from defaults?\n. License header.\n. You shouldn't need this. We aren't running these Core tests in AspnetCore50 as of now.\n. Do you need to call setup from a unit test? Couldn't you register defaults and have the functional tests verify if the setup is working correctly?\n. Move these setups to individual tests. Having conditional setups that are dependent on test data removed from the actual test code makes it harder to follow what's happening\n. License header\n. Needs better names.\n. nameof(FiltersWebsite)\n. :+1: \n. Reverted. We'll leave the changeset around since their code is a moving target.\n. Spoke @loudej and the plan is to share this. We don't need to do anything in particular to have it use TryAdd since we get that from using AddMvc - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcServiceCollectionExtensions.cs#L19\n. Done\n. Spoke to @NTaylorMullen and apparently the decision was to not make this change in this iteration.\n. Is there a reason this PR comment is being ignored:\n- https://github.com/aspnet/Mvc/pull/1807#discussion_r23041661 \n- https://github.com/aspnet/Mvc/pull/1807#discussion_r23058006\n- https://github.com/aspnet/Mvc/pull/1807#discussion_r23060229\n. See https://github.com/aspnet/Mvc/pull/1807/files#r23107995\n. Formatting.\n. Extra line.\n. Could you also check the exception message?\nC#\nvar exception = Assert.Throws<InvalidOperationException>(() => controller.TryValidateModel(model));\nAssert.Equal(\"...\", ex.Message);\n. Maybe add a comment when metadata could be null? Might make it easier to grock why that would cause useViewData to change.\n. Would this need to use InvariantCulture?\n. Do we not need this test?\n. Also a different variable name? There's a parameter isExplicitValue that follows which always has a false value. Reusing this name seems messy.\n. It is configured differently than the one in DI. Plus using specific ones avoid namespacing keys.\n. It's called recursively. We'll end up having to create another method which creates the list or create it with a null check - neither of which is any better than allocating it here.\n. Couldn't this be rewritten as \n``` C#\nif (!_validator.IsCookieTokenValid(oldCookieToken))\n{\n   var newCookieToken = _generator.GenerateCookieToken();\n   Debug.Assert(_validator.IsCookieTokenValid(newCookieToken));\n   return newCookieToken;\n}\nreturn null;\n. Doc comments.\n. `var`\n. c#\nvar cookie = Assert.Single(setCookieHeader);\nAssert.True(cookie.StartsWith(\"..\"));\n``\n. Yup. The module gets recompiled if project.json changes.\n. Yup, project json causes a hard reset on DTH. cc @davidfowl \n. I guess we could once people ask for it? Right now it seems like implementation detail that we don't expose?\n. Having no \\ very few diagnostic messages should be the more common case. Consequently a relatively low contention lock is preferable to using a concurrent collection. That said I couldn't necessarily see these in my profiles, so this might be a case of prematurely optimizing this bit. I'll use a separate lock for now - the code doesn't look any worse for having used the lock.\n. Could we do this once we find an ask for this? It might make it difficult to evolve this code in the future if we chose to expose an implementation detail?\n. :+1: \n. That looks like existing code though? Its likely that the value is never null, but why change it as part of this PR since it's existing code?\n. That should have mapped to the null check at https://github.com/aspnet/Mvc/pull/1835/files#diff-06929e243aba542b5cfbe01f30aae7a8L70? The return type is different, but the behavior is about the same though.\n. :+1: \n. View components are executed as partial views and consequently have the same-ish behaviors asPartialResult\\RenderPartial\\PartialAsync. I'll go ahead and add a_ViewStartto the current example to cover ViewComponents.\n. I'll send a separate PR out for docs since all of these types are missing docs.\n. It's part of the PR - https://github.com/aspnet/Mvc/pull/1846/files#diff-bf0a1f7364ebf0b4627661599633b1b4R67\n. Drop theprivate set;. You could iterate over the dictionary rather than the keys in the dictionary to avoid the extra lookup from the source\n. :100: \n. typo:IfNullIsAssigned. I'm guessing this is the drop in replacement for what the current code is doing\n. The WebRootFileSystemProvider is rooted at~/wwwrootversus Views are allowed to be found from~/or~/Views. Unfortunately this doesn't act as a drop in replacement.\n. It is (in a round-about way). It gets initialized via the OptionsSetup which gets called the first time you accessIOptionsAccessor. Its easier to say Startup instead\n. Is this no longer needed?\n. Couldnt' we simply check the actual properties rather than doing reflection? Seems like there's about half a dozen of these so shouldn't be hard to just test them out.\n. Yup.\n. Because I didn't write it :dancer: \n. Completely pointless, but the indentation here here looks odd. I think it should be 4 spaces for each indent.\n.var dummyModel = Assert.IsType(model);. Just use var here. We typically don't have const strings in test code.\n. Ehh, not super sure on this - remarks shouldn't be a place for specifying application design guidance. This sounds more like a sample \\ doc thing\n. Presumably we want to start using attribute routes in ours app?\n. Ok.\n. :+1: \n. I was hoping this might commonize that once https://github.com/aspnet/Mvc/issues/1416 gets addressed, cc @kirthik \n. I think not - at bare minimum, it's supposed to be equivalent toActivator.CreateInstance\\new T(). I guess. That said, I'm guessing this is interim code and should go away once we do true model binding here.\n. :+1: \n. This should be moving to model binding, so I'd rather not spend time tweaking this.\n. :+1: \n. will undo\n. Why?\n. Is this rebased on dev?\n. Couldn't you doif (id != 42) { return NotFound(); }. Does the culture need to be specified here?\n.NullOrEmpty? We don't have a precedence for doingNullOrWhitespacechecks in the application\n. Is this a new type?\n. Let's not commonize this code. \n. This feels dirty. Couldn't we just to pull theIUrlHelperfrom the context's RequestServices? That's the code we'd expect users to write if they required services when writing custom attributes. Alternatively, stick the property onClientValidationContext. \n. Unrelated. Undo\n. Check the error message inAssert.Throws. UseExceptionAssert.ThrowsArgs*`\n. XYZ?\n. Could you add a test for this?\n. Nevermind. I just wasn't certain if this would've successfully parsed:\n``` C#\nThread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(\"fr-FR\");\nThread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(\"fr-FR\");\nConsole.WriteLine(DateTimeOffset.Parse(\"1 April 2001\"));\n```\nBut it does.\n. https://github.com/aspnet/DependencyInjection/issues/164\n. string (casing)\n. :cactus: \n. When you get this in, could you send an email to the team on how to install npm, grunt and bower globally? It would avoid having to download these packages after every clean.\n. That might be to workaround Moq \\ Roslyn issue.\n. Layout = \"_Layout\";\n. Odd formating. \n. There's generally a high bar for having internal types in Mvc. Put it in an internal namespace Microsoft.AspNet.Mvc.TagHelpers.Internal unless there're specific reasons not to.\n. Do we expect to query these things both with and without the formatting? Seems sort of unlikely - maybe the key could be just the resourceName?\n. Just do streamReader.ReadToEnd(). The stream's in-memory so doing async is kinda pointless.\n. Could we make this a Func<Stream>. This way we know we'll own the lifetime of the Stream and we wouldn't have to deal with streams being created but not disposed because the pipeline never got here..\n. Why async? I thought we had settled on validation being sync?\n. Do we know when reusing the validation node might have made sense in the past? Is this a perf \\ security issue we are inadvertently creating here? \n. Would this have avoided looking at the KeyValuePair properties which we'd now start looking at? (since this does not have ValidateAllProperties)\n. > For scenarios involving TryUpdateModel this is broken for now\nThis might be a big issue since it breaks Mvc 5 expectation. Should TryUpdateModel do validation for you as a post step?\n. Couldn't you query this externally without creating an extra API?\n. Does this need to account for the MaxModelStateErrors somewhere?\n. > I don't think it was solving anything\nAs long we're certain this is certainly the case I'm ok removing it. \n\nWhat security concern do you think can happen here?\n\nPrimarily about doing more 2n work (or more?) for a n sized payload.\n. It's just a bit confusing having 2 different APIs that aren't well differentiated - GetValidationState, GetFieldValidationState particularly when this one is not the one we'd want users to use\n. https://github.com/aspnet/Mvc/issues/1884\n. You can drop the private set; for all your properties on this type.\n. NullOrEmpty?\n. :+1:. Plus we haven't had an ok from the engineering team for using this feature. Maybe you could bring it up.\n. You could move this check outside the GetOrSet. No reason to cache entries that are cheap to evaluate.\n. Should we evaluate the real set first (includes - excludes) and add an expiration trigger on the resulting set?\n. That said, it does result in adding far too many individual triggers rather than a few patterns\n. Nah, Appends aren't expensive.\n. CultureInfo.InvariantCulture\n. You could create an overload of JavaScriptStringEncode that accepts a StringBuilder and pass result in to it. Fewer builders.\n. Would this eventually go into WebUtils?\n. Could you split this? if (GlobbingUtility == null) { ... }\n. Formatting: \n- Have the params stacked (so matcher is on the next line)\n- Space after [NotNull]\n. Create a separate overload. No defaults on public API.\n. Formatting: \nC#\nif (includePattern.StartsWith(\"/\", StringComparison.Ordinal) ||\n   includePattern.StartsWith(\"\\\\\", StringComparison.Ordinal))\n. Maybe refactor this into a TrimLeadingSlash?\n. This method seems unnecessary.\n. Could we move this into Microsoft.AspNet.Mvc.TagHelpers?\n. named params for bool.\n. Create a private class here.  Hard to follow what Item1,Item2are inTuples\n.PresentMissingAttributesfor instance?\n. Make this a regular method. Also drop theNotNull- shouldnt need those on private methods.\n.presentAttributeNames. Maybe this needs a comment saying why we're looking forscripttags.\n. replace\n. For UseControllersFromServiceProvider with assemblies, call into this with aStaticAssemblyListProvider. Additionally move the heurisitics code into here.\n. WithControllersFromContainer\n. This is kinda bad - it's essentially a stripped down version ofMemoryCache` - but it avoid having to make MemoryCache and IOptions compile in Net45 and tooling depend on the binaries they produce.\ncc @yishaigalatzer thoughts on this?\n. Will undo.\n. The way this works in tooling is that they create one instance of MvcRazorHost per open Razor file open. Consequently we'll get _ViewStart caching on a per file basis. Changing it to be per project requires more effort on their end to manage what project a file belongs to which seemed problematic.\n. We specifically get here if the file info is no longer valid.\n. Perhaps. Although in production we'd want to drive people to be using precompilation and not runtime compilation at which point this should never be hit.\n. Ehh, it's easier to read.\n. For tooling, the cache should get GCed along with the host once they discard the RazorEditorParser that hold on to these instances once the page gets closed. For runtime, there's certainly issues of things getting pinned over long term. Alternatives to this might be \n- Implement this interface in Microsoft.AspNet.Mvc.Razor (that already depends on MemoryCache) and use that as the runtime cache type.\n- Have it be a pass through cache in runtime - we weren't seeing perf issues with this at runtime and we'd get the behavior we currently have.\n. To add to that - we have the same issue for file watchers in Razor's CompilerCache, the link and script tag helpers. We'd need for a way to turn off file watching in general. System.Web has this ability through some magical registry keys.\n. @yishaigalatzer, if we are serving precompiled views and the user never changes views on disk, we wouldn't hit this code path.\n. :+1:\n. :+1: \n. Should things externally call the activator directly to release the controller?\n. The delegate gets passed into ConcurrentDictionary.GetOrAdd. We could create a method, but we'd have to cache it as a delegate\n. I'll run it by Louis to see if this wouldn't require the config replacement behavior since you opted to call this method rather than the scenario with AddMvc where you get services wholesale.\n. Don't follow this comment.\n. public override DirectoryInfoBase ParentDirectory { get; }\n. Oops, I assumed we were only taking it from the Startup bit. I'll kill this\n. on non public types?\n. Maybe null coalesce this for succinctness? \nvar selected = selectedValues.Contains(item.Value ?? item.Text);\n. I think Xunit's simply treating dictionaries as IEnumerables and doing the equivalent of SequenceEqual. Wouldn't it be simpler to Assert the values and ignore the key entirely?\nvar savedDisabled = selectList.Select(item => item.Disabled).ToList();\nAssert.Equal(savedDisabled, selectList.Select(item => item.Disabled));\n. Might want to additionally specify that it does not change the SelectListItems as part of the test name.\n. What's this for? Looks like it's unused in all of the newly added tests.\n. public List<string> Property1 { get; } = new List<string>(); and drop the ctor.\n. Should this be in a separate file \\ test?\n. Needs an empty line.\n. This isn't going to be null. You could drop the null check.\n. > Provides methods to validate an object graph\nThere isn't a ModelStateDictionary associated with the type.\n. Should this be in ModelBinding?\n. Might want to explicitly call out that this recursively validates the model and all it's properties.\n. > The <see cref=\"ModelValidationContext\"/>.\n. Undo\n. Docs\n. This looks totally bogus.\n. This message seems too generic\n. unrelated, but could you remove the NotNull?\n. Remove the (\n. Should we continue validating if we've reached the max errors?\n. Indentation\n. Can you remove this dependency from Core?\n. Why was this added?\n. Can it be a transient? \n. > nit: ick; can't we limit ourselves to properties that look like properties?\nSadly not. Plus having the auto property just creates an unnecessary field \n. Interestingly, the VIewStart path generation is the only one that goes through Path::GetDirectoryName which normalizes the directory separator char. The other ones are produced by the view engine. Not super sure if there's a nice way to fix this or is it's particularly interesting to address this.\n. The generated code looks like:\nC#\npublic string Path\n{\n   get { return RazorPage.Path; }\n}\nThere are no delegates \\ backing field in the generated code .\n. Super nit : put the && on the end of the previous line\n. ToDictionary would throw if multiple entries with the same key are present. Could you verify this is handled? Also, does the dictionary need a comparer? \n. I'd guess we're not going to run into the multiple keys eyes since ReadFormAsync returns a string[] array of values, but would be useful to cover this via a test.\n. Sort usings.\n. Ctrl K + D (spacing)\n. Can you remove this dependency? We should get it transitively.\n. Undo?\n. I thought the copying  was intentional - ReadFormAsync() caches the result. So if you change the action parameter you'd affect Request.Form without necessarily knowing that. Super edge case though.\n. :+1: \n. We got an ok from the engineering team to use C# 6.0 features that aren't experimental. That said, seeing this is so contentious I'll just switch back to using a regular property declaration.\n. Extra space\n. You could throw in a MockBehavior.Strict for extra validation.\n. indentation.\n. var\n. C#\nvar error = Assert.Single(bindingContext.ModelState[\"someName.Key\"].Errors);\nAssert.Equal(\"A value is required.\", error.ErrorMessage);\n. var\n. Does this need to additionally act like a greedy model binder?\n. Typo: BindModel_MissingKeyAndMissingValue_DoesNotAddModelStateError\n. Formatting.\n. https://github.com/aspnet/Mvc/issues/2009\n. Remove\n. Needs an empty line here\n. Could we add tests that verify positive scenarios (MarkFieldSkipped_MarksFieldAndSubKeys_Valid)\n. Undo. I'll get a fix for this in so they don't show up in PRs with a diff.\n. Can we get scenarios with [FromServices] in here to ensure they don't get validated? \nC#\n[FromServices]\npublic TestService Service\n{\n   get { throw new Exception(\"Shouldn't be called\"}; }\n   set { }\n}\nAlso we should figure out what it means to validate things that previously wouldn't be validated - CancellationToken, IFormCollection, result of byte array model binder etc\n. > Gets a value that indicates whether any model state values in this model state dictionary is invalid or not validated.\n. Indentation (align with the line above)\n. Ctrl K + D\n. :100: \n. Could we commonize this delegate somewhere?\n. Need to rebase. This has changed\n. Is this needed?\n. readonly\n. @yishaigalatzer, do views need type activation for views (i.e. do they need services)? Could we go down the route of using Activator.CreateInstance or caching the ctor for the compiled type ?\n. The method name would be a misnomer though. I'd move it you can suggest a succinct name for it.\n. But the definition of a controller is a type that has the suffix Controller.\n. nameof(PrototypeCache.HiddenInput)?\n. Not sure why this code was structured this way but I spoke to @yishaigalatzer and we decided to\n1. Drop this check\n2. Make the Controller type in Mvc abstract. \nThis should get us the same-ish results with the guidance being if you want a base controller type named Controller but that isn't directly accessible, mark it abstract.\n. This is intentionally inherited. The suggestion would be to make CustomController abstract instead.\n. It's to verify we don't throw in the object graph walk when you don't have controller type in your hierarchy (it's the only scenario where we'll exit the while loop of DerivesFromController at the end.\n. Should this be ExportedTypes?\n. .Where(IsViewComponentType) to be consistent with the next line\n. > Turn off the status code page\n. > /// <inheritdoc />\n. Extra line\n. Attribute route?\n. Doesn't WebAPICompatShim depend on Mvc.Core? That causes it to become part of the candidate set. \n. Couldn't you run OnResultExecuted instead?\n. Assert.False\n. Need another test to verify it no-ops \\ doesn't null ref if the feature is missing.\n. Should've done this separately - ctors first, properties second formatting.\n. T -> TVal\n. This would be weird - you'd be activating a view with application services, not request. Either \n1. We need to flow ViewContext and use that to get RequestServices\n2. We should assume Views don't need to be type activated and should use Activator.CreateInstance\nI would prefer option 2.\n. odd formatting.\n. DefaultControllerActivator on Line 53 needs to be made transient.\n.type => ActivatorUtilities.CreateFactory(type, Type.EmptyTypes);. Named parameter for null value (in all uses ofObjectFactory)\n. Unused?\n. Lifetime ofVirtualPathRazorPageFactoryis scoped now. Needs to be become singleton for caching to take effect.\n. Just useActivatorUtilities.CreateInstance. No need to cache in a test.\n. IMO, it might be ok to use \"/\". We had a similar issue where we were constructing paths using the pathing APIs and we ended up with slashes being different since the APIs internally usePath.DirectorySeparatorChar. (https://github.com/aspnet/Mvc/pull/1996#discussion_r24517836). I have a follow up item and the right resolution for it would be to use \"/\" consistently.\n. Sure,TValueif you'd want. The guidance I'm aware of is to avoid usingT,Uetc and useTValif there isn't something more appropriate (likeTEntry,TResultetc).TInstancewould work here.\n. Named param\n. Might want to update the description of this method to say this method specifically validates the model in addition to binding it.\n. Consider returning aModelBindingResult.Failedresult here instead of null. Slightly better abstraction.\n. if - else for clarity?\n. Named params for nulls, booleans\n. Remove\n. The feedback is primarily based on a recent change toCompilationResultthat I recently made (@yishaigalatzer's suggestion) that used to return null but now returns a failed status value.\n. Ok. Need to update the docs in that case >.. Will change toAssociatedGlobalImportEntry. \n. We have an opportunity to make a perf improvement here - in the previous case compiling _ViewStarts helped since  they'd be used during view execution. Compiling global file entries is less useful since the ordinary case you might not need to execute them at all. We could instead create a combined hash of all applicable _GlobalImports and use that to figure out a difference.\n. Should we throw here if the resource is not found in the assembly?\n. Since we now attempt to read resources as assemblies given aRazorFileInfoCollection, our previous approach of passing theIEnumerabletoCompilerCachector was being problematic. The options were having a virtual method inCompilerCachethat we could override in the testGetCacheEntriesFromCollections()or refactoring the view discovery out of theCompilerCache`. This seemed like a cleaner choice.\n. Could we move these to a single line ?\nC#\nrouteOptions.ConstraintMap.Add(\"exists\", typeof(KnownRouteValueConstraint));\n. Or better yet, a comparer. Assert.Equal allows for a IEqualityComparer<> parameter, so you could roll this into a StringUrlComparer and use that instead. That said, none of of our tests actually have query strings or url fragments - couldn't we just use StringComparer.OrdinalIgnoreCase\n. We should verify the status code before reading this. Can we move this to a separate method that does : \nC#\npublic async Task<TVal> ReadValue<TVal>(HttpResponseMessage response)\n{\n   response.EnsureSuccessfulStatusCode();\n   return JsonConvert.DeserializeObject<TVal>(await response.Content.ReadAsStringAsync());\n}\n. Make this a theory instead. They're two separate test cases.\n. Person_CollectionBinderController\n. Needs a better name - PersonAddress? \n. Could we move this to ViewModels namespace so we don't have two directories in the app with models?\n. This doesn't necessarily hit the scenarios we'd want to test - leave this here as is - but could we get one where multiple values are selected:\n``` C#\npublic string CheckboxList(IEnumerable userPreferences)\n{\n}\npublic class UserPreference\n{\n   int Id { get; set; }\nbool Checked { get; set; }\n}\n```\nAnd the post would look like [0].Id = Foo&[0].Checked=true&[0].Checked=false&[1].Id=Bar&[1].Checked=false\n. We changed Diagnostics \\ Helios to not print compilation messages. So we can do better with showing exception messages in the debugger now.\n. Could we use typeof value === \"function\" here? There's only one other jQuery use here which is used in a similar way - we could remove jQuery dependency from this piece of code.\n. Why declare it here as opposed to passing it in?\n. function process\n. result += encodeUriComponent(prefix || key) + \"=\" + encodeUriComponent(value) + \"&\";\n. Don't need to pass in the null param\nProcess(element, data[element]);\n. Maybe call this mvcParam? stringify has a different semantic in Javascript (JSON.stringify) so this would be confusing.\n. If you plan on using jQuery, use $.each instead and remove the hasOwnProperty check.\n. substring?\n. $(function() {\n. I guess. It seemed like a less commonly used string method. \n. You would need to use encodeUrlComponent in all other places you're generating url components.\n. var\n. [NotNull]?\n. var all day\n. Maybe use IReadOnlyList here?\n. It's part of the work tiem - https://github.com/aspnet/Mvc/issues/955#issuecomment-73305257. We were relying of PhysicalPath to create diagnositcs which isn't guaranteed to be available.\n. [Fact]?\n. :+1: \n. We use this to print out the error stack in Helios \\ Diagnostics.\n. Updated the FormattedMessage fror RazorCompilationMessage - so exception.Message now looks like:\nC#\nOne or more compilation failures occured:\n/Views/Shared/MyView.cshtml (434,0) Expected \"}\".\n. If you're doing in you might need to hasOwnProperty check\n. You could do prefix || key. Alternatively, you might have to do a falsey value check tempPrefix = !prefix ? key : prefix to account for undefined. The first one's easier to read.\n. Same as https://github.com/aspnet/Mvc/pull/2049/files#r25395650\n. :ok: \n. It seems super trivial to be shared. I'd rather it be duped than have it be oddly misplaced on the error class.\n. Sure.\n. Super unrelated, but could we expose Attributes as an indexer on TagBuilder? We could do prettier initialization:\nC#\nvar inputTag = new TagBuilder(\"input\", _htmlEncoder)\n{\n   [\"type\"] = \"hidden\",\n   ...\n}\n. TextWriter textWriter\n. Alternatively use the Encoding from the current TextWriter - StartWritingScope(new StringCollectionTextWriter(Output.Encoding));\n. Looks like this is missing the if. Does this still work?\n. While you're updating all the repos, also update the build files in Universe\\build-template. @troydai's updated it recently, but the contents of this file look more correct\n. named arg for null\n. new line after\n. Out of curiosity, what's the runtime behavior when the Dispose throws? Is that something we should care about?\n. named arg.\n. You have to use this overload if you want to verify the number of times it was called. In which case, it's probably less verbose to remove the setup on L#431-L#432.\n. Remove empty lines.\n. Are we not using var convention in these files?\n. Need to add the typeparam to the docs.\n. DefaultInitializeTagHelpers?\n. Does this need to be fluent? The WithControllersAsServices in MvcServiceCollectionExtensions is\n. Microsoft.AspNet.Mvc.Razor\n. Needs one test that verifies when multiple initializers are setup, all of them get called and one which verifies InitializeTagHelper<FooTagHelper> does not get used when activating BarTagHelper\n. The property is settable. Why not do\nC#\nvar httpContext = new DefaultHttpContext();\nif (services != null)\n{\n    httpContext.RequestServices = services;\n}\n. Plus both the things that call this method always pass in services - just drop the null check and make it non-optional.\n. Is this used? Remove \\ sort usings maybe?\n. Out of curiosity - why not call this ITagHelperInitializer. It follows the naming convention used by other things - IControllerActivator, ITagHelperActivator etc\n. The factory caches things, consequently it's a singleton. Everything consumed by a singleton ends up having a singleton lifetime which is an unfortunate side effect.\n. Might want to add the that is going to be serialized bit to the comment\n\nformatter based on the object type being serialized.\n\nor something along those lines.\n. property initializer syntax? \n. Bracing on new line.\n. > takes precedence\n. :100:\n. Super nit, maybe change the conditionals so setting the prefixDirectiveDescriptor is closer to checking if it's a TagHelperPrefix directive\nC#\nif (descriptor.DirectiveType == TagHelperDirectiveType.TagHelperPrefix)\n{\n     prefixDirectiveDescriptor = descriptor;\n}\nelse\n{\n   mergedDescriptors.Add(descriptor);\n}\n. We are specifically using multi-line strings since Environment.NewLine is unreliable for functional scenarios. The line endings are determined by your git settings and not by your OS. Need to go back to using multi-line strings.\n. Why do you need named params here?\n. These are meant to match output produced from views so they aren't generated. Having it be multi-line strings ensures the expected output has the same line endings as view files.\n. Shouldn't this go in to the Validation namespace?\n. Does this need to be SingleOrDefault as opposed to FirstOrDefault? SingleOrDefault will throw if you have multiple entries which match the constraint. If we want to explicitly deal with this scenario, we should throw a better exception.\n. This might not address sections that are redefined but not rendered in the outer definition.\n``` C#\n// NestedLayout\n@{ Layout = \"OuterLayout\"; }\n@section scripts {\n   // stuff\n}\n// OuterLayout\n@{ Layout = \"BaseLayout\"; }\n@section scripts { \n  // Don't render inner scripts\n}\n// BaseLayout\n@RenderSection(\"scripts\");\n```\nIn this scenario, the scripts section defined by NestedLayout is never rendered but the view would happily succeed. Perhaps we shouldn't be flattening the results in unrenderedSections?\n. Perhaps this should belong in the remarks section? The summary should be more along the lines of \n\nGets the value for a route key from the route constraints or route value defaults of an <see cref=\"ActionDescriptor\"/> if it exists there, otherwise from the RouteData. \n\n(or something along those lines)\n. Consider having ActionContext be the first param?\n. Maybe add a comment here stating the scenario (attribute routed versus not?)\n. C#\nif (context.ActionDescriptor.RouteValueDefaults.TryGetValue(key, out match))\n{\n   return match.ToString();\n}\n. It's developer supplied as opposed to application user \\ browser supplied. Changing the cache key doesn't make a significant difference if the value ends up being the wrong case resulting a failure in lookup. \n. Sure.\n. Although the only issue is the keys are internal and maybe this method has some utility in user code - for instance in a custom view location expander. Although I suppose we could move it if we deem it necessary later.\n. Thought as much.\n. Would that mean it's something along the lines of\nC#\nif (actionDescriptor.RouteValueDefaults.TryGetValue(key, out match))\n{\n   var stringValue = match.ToString();\n   if (string.Equals(stringValue, routeDataValue, StringComparison.OrdinalIgnoreCase))\n   { \n       return stringValue; \n    }\n}\n. The use case was for users to be use these extensions in their custom precompilation modules - it was primarily the reason we have the other extension method.\n. Minor cleanup - you would to be able to access the property to be able to use it in any overriden method.\n. Does this need to account for other int-like types (short / ushort / byte etc?)\n. C#\ncatch (Exception exception) \nwhen (exception is FormatException || exception.InnerException is FormatException)\n{\n  return null;\n}\n. Shouldn't this specify the casing? The old code would have performed a case insensitive lookup versus the new code relies on the collection's Contains implementation.\n. GetCurrentValues is virtual and IReadOnlyCollection does not guarantee the case-insensitive contract. Changing to use the LInq extension sounds like the correct behavior. You could also get rid of using IReadOnlyCollection<string> (I don't think it's a commonly exposed interface on our API surface) and use IEnumerable<string> if you make the change.\n. Seems like the right fix though? Why not use a feature that's specifically designed for this scenario? See - http://www.volatileread.com/Wiki/Index?id=1087\n. Perhaps. When the code was written, the refactoring prevented doing this - I think it's in better shape now to allow this\n. :ok: \n. Formatting. \n. BindPropertiesAsync. Plus you could leave it as Task<Dictionary<ModelMetadata, ModelBindingResult>> since this isn't public surface.\n. Comment no longer makes sense.\n. Variables probably need to be renamed.\n. https://github.com/aspnet/Razor/issues/334\n. No idea, but seemed like a sensible thing to do since we don't do an error check for length in RazorError.\n. Could you add a test where the rootedFilePath and rootedAppPath don't have the same line ending formats\nFor instance: filePath: \"/foo/bar/baz.cshtml\", appPath: \"foo\\bar\\baz.cshtml\"\n. Ok. Just concerned given that the types are available to user code and consequently they could be used in this manner.\n. :100: \n. Does this need a comment saying this would result in safe races?\n. The editor ends up placing the cursor at the start of the error column when we do set the length to 0. Seems like an ok-ish behavior - so I'm leaving this as is.\n. :ok: \n. Did the resx generation change recently? This should be Resources.FormatInvalidIndexForArrayProperty\n. Why did this change?\n. readonly?\n. Undo?\n. I think this returns true for non-generic collections (like List). Maybe just do a check here specifically for IList<> and IDictionary<,>?\n. Needs tests that verify EnsureObjectCanBeSerialized succeeds for the types we expect it to work with.\n. $\"The type {type} cannot be serialized to Session.\"\n. Maybe call out what type specifically cannot deserialize here:\n\nThe type {0} cannot be serialized to the {1} by '{2}'.\n\n{1} -> nameof(TempDataDictionary), {2} -> typeof(SessionStateTempDataProvider).FullName\n. primitive types isn't accurate - call it simple types?\n. I'm partial to the JsonSerializer being instance-level, but keys don't benefit from that. In fact this should probably be a const since it's private.\n. Naming convention: private readonly JsonSerializer _jsonSerializer\n. Started a thread - https://github.com/aspnet/Mvc/issues/2330 - to discuss if we could change the contract for formatters. It might allow us to get away from doing GetRequiredService here.\n. cc @lodejard / @davidfowl \nI left it as ViewEngineDescriptor on MvcOptions. RazorViewEngine requires 4 services and it feels a bit dirty to be doing GetRequiredService to get to those as part of execution. Thoughts?\n. Can this be undone?\n. Formatting nit: member data needs to preceed the actual test.\n. Can you also add DateTimeOffset, TimeSpan and decimal and Array of non-primitive types (e.g. array of Uris)\n. Maybe also add Dictionary<object, string> and Dictionary<TestItem, TestItem> here. Maybe replace some instances of object with other random types\n. Use namespace from type - don't hardcode it here.\n. @davidfowl, that's certainly a possibility. There are types like the IMvcRazorHost that are created as part of the RazorViewEngine's object graph that are intended to be transient. We'd have to tweak those to ensure they're ok with longer lifespans or change how we consume them.\n. Unrelated, but mark this as [NotNull]\n. There's code on Line 430 that does reflection to fetch all properties. Could you file a follow up work item to remove using reflection and use model metadata?\n. We could probably refactor this code without having to specify the default factory.\n``` C#\nif (_attributeFactories.TryGetValue(attribute.GetType(), out factory))\n{\n    valdiator = factory(attribute);\n}\nelse if (validator is IClientModelValidator)\n{\n   validator = new DataAnnotationsClientModelValidator(attribute);\n}\nif (validator != null)\n{\n   context.Validators.Add(validator);\n}\n``\n. Should be able to inline this and remove the null check.\n. In terms of layering - can all of the client validation move to Rendering? It doesn't have much to do with model binding or the validation system in there now, does it?\n. Hopefully addressing the layering might solve this. We had a chat with @loudej and he thought this was ok. However I think there's an ongoing discussion \\ work item about visiting the usage ofGetRequiredServicesin our framework, so this should get covered as part of it.\n. Out of curiosity, is the casing forTruesupposed to look like this?\n. Are these due to theformatfix?\n. Maybe name thisDateWithDataTypeor something along those lines so it's easier to read as part ofMemberData?\n. :+1: \n. Couldn't we just filter it early on though - as part of the provider? I'd be ok doing this as part of a separate PR - but feels like it should be the responsibility of the validator provider to unwrap these attributes rather than the validator.\n. :100: \n. - For action parameters,MethodInfo.Invokeseems to take care of coercing null value types to default values for value types (this is verified by test). \n- For value type properties that are annotated with[FromBody]`, we end up getting a null ref as part of the property setter. Tracking this via https://github.com/aspnet/Mvc/issues/2357. \nThat said, it seems like fixing it specifically for BodyModelBinder is incorrect and we should have a single top level piece of code that addresses this, not individual binders.\n. Do we care about allowing IClientModelValidators to be changed via ResourceFilters (similar to your IOutputFormatter change)?\n. This should be get only.\n. This is different from what we'd discussed - but you could assign the value here rather than flow it two additional classes: context.ActionContext.ModelStateDictionary = _maxModelValidationErrors;;.It's less obvious, but it's fewer lines of code change. @rynowak,  thoughts?\n. This allows us to show errors if they happen to be produced in the generated code (for instance a custom base type that does not have a RenderAsync method). Mapping it to the cshtml file is not very helpful in diagnosing the issue.\n. Needs to be Ordinal\n. Does logging expand IEnumerables?\n. List this under private readonly ICompositeViewEngine _viewEngine;\n. loggerFactory.CreateLogger(GetType()); if you want to support the derived type scenarios we spoke about.\n. It's still considered a compilation failure.\n. The file system that we use for views specifically hangs off of RazorViewEngineOptions. It allows doing things like using resources as view sources - https://github.com/aspnet/Mvc/blob/dev/test/WebSites/RazorEmbeddedViewsWebSite/Startup.cs#L20-L23\n. Could you create a new dictionary rather than writing to this one (preferably one with StringComparer.OrdinalIgnoreCase semantics? Seems cleaner than doing a ToList here. An additional advantage is we could change the dictionary we wrap in TempDataDictionary to be a copy-on-write one.\n. This should probably throw if the mapping type could not be found. Silently ignoring might suppress issues in our filtering behavior.\n. Need unit tests verifying deserialization works + cover scenarios where we throw (deserializing an a json array of things we wouldn't have allowed).\n. Could you add a note here - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcServices.cs#L169 - saying that it needs to be a singleton because we have things that are cached on it?\n. This shouldn't be allowed. We wouldn't have serialized an object array.\n. What's this for?\n. Needs indentation.\n. When we spoke about this earlier today, I think the plan was to drop this - it's similar to Html.Partial \\ templates etc which we aren't logging.\n. Does this apply to the other messages that were changed in this PR?\n. _dictionaryConverters\n. Could you refactor this out in to a variable:\nvar arrayType = jArrayValue[0].Type;\n. Do this early on as part of detecting the IDictionary<,>. You can avoid having Type[] actualTypes and just have one.\n. TVal\n. StringComparer.Ordinal\n. Shouldn't this be jObject.Value<T>(item.Value)?\n. Remove\n. Maybe call this SimpleTypesCanBeStoredAndLoaded - it's slightly less vague than AsExpected.\n. This should look like:\nC#\nvar result = Assert.IsType<int>(TempData[\"int\"]);\nAssert.Equal(10, result);\n. Similarly for everything else here.\n. _innerDictionary\n. @Tratcher, is there an easy way to re-use SessionCollection for test purposes?\n. Yes, this is for generated code that we produce but don't map back to the cshtml - this includes things like default inherited directives (IHtmlHelper<TModel>) and any code that relies on a property \\ method being present on the base type DefineSection, RenderAsync etc). \n- I have a tracking bug for the first case - https://github.com/aspnet/Mvc/issues/2373.\n- I wasn't able to find the bug the last time I looked - https://github.com/aspnet/Mvc/issues/1968. Mapping to the generated code should give you more more useful information for errors of this sort.\n. Just split this out:\nC#\nif (itemType.ExtractGenericInterface(typeof(IList<>)))\n{ \n      Debug.Asser(itemType.GetGenericArguments().Length == 1, \"IList<T> has one argument\");\n       itemType = itemType.GetGenericArguments()[0];\n}\nif (itemType.ExtractGenericInterface(typeof(IDictionary<>)))\n{\n    var genericTypeArguments = itemType.GetGenericArguments();\n   Debug.Assert(genericTypeArguments.Length == 0);\n   ...\n}\n. Let's make JToken a parameter.\n. Should we assign a null value when jObjectValue.HasValues == false? It will avoid throwing a cast exception in user code:\n``` C#\nTempData[\"key\"] = new Dictionary();\n...\nvar myDictionary = (IDictionary)TempData[\"key\"]; // will throw now\n``\n.dictionaryConverter\\converter.ConvertDictionary(let's not abbreviate)\n. An empty dictionary would cause this (I think) - it's not particularly far fetched to run into that scenario.\n. This should probably bestring.IsNullOrEmpty.\n. We shouldn't need to this. If using the encoding set inContentTypeis incorrect, we have an issue with the wayMediaTypeHeaderValue.Encodingbehaves. cc @Tratcher \n. In this case, are we responsible for re-encodingfileStreamif it doesn't match theEncodingoncontentType?\n. Could we verify what the behavior was in Mvc 5 - what happened when theContentEncodingwas set toEncoding.Utf8- did we write the BOM?\n. Might be a question for @Eilon \\ @danroth27\n. Could you move this to aInternalsubdirectory \\ remove theInternalnamespace?\n.TVal. In which case the right fix for this would be to write a customStreamWriterthat doesn't write the BOM and not do whatever we ave here.\n. :panda_face: \n. Aren't :panda_face: always sad?\n. Can this not go away?\n.Encoding.Utf8should suffice.\n. While you're touching these files, could you add docs?\n. I think it should be fine to flow the encoding through in this case\n. I don't fully follow - why are weToStringing \\ reparsing this?\n. Doesn't this remove the overload withfileName. Will this throw ifcontentTypeis null?\n. Again, is this intentional - the single overload ctor disappeared.\n. If we remove the usage fromContentResult, then make this a private type inViewExecutor.\n. Maybe have a string with some Utf8 chars so we can differentiate between ASCII and UTF8 in the test\n.ExecuteResultAsync_SetsSuppliedContentTypeAndEncoding. Maybe dovar contents = Encoding.ASCII.GetString(bodyStream.ToArray());.result.ContentTypecannot be null. Drop the?.. :+1: \n. Maybe throw a[NotNull]on the argument instead?\n. Comment's out of date.\n. :100:\n. Bump.\n. Could you add a comment here calling out why we have a wrapper for the encoding?\n. Docs for this.\n. :100:\n. This doesn't actually cover the change you made in the code path. The first time the view is served,IsValidatedPreCompiledis set totrue` - so we don't use the code path that you made the change in. What I don't follow though is that we're serving views that have been deleted from disk after we added file watchers on it. That sounds like a bug and might be something we need to address.\nWhat your test might need to do would be closer along the lines of\n``` C#\ntry\n{\n   // Act\n   await DeleteFile(viewsDirectory, \"_ViewStart.cshtml\");\n   await DeleteFile(viewsDirectory, \"_Layout.cshtml\");\n   await DeleteFile(viewsDirectory, \"Index.cshtml\");\nvar response = await client.GetAsync(\"http://localhost/Home/Index\");\n// Assert\nAssert.Equal(HttpStatusCode.OK, response.StatusCode);\nvar parsedResponse1 = new ParsedResponse(responseContent);\nAssert.StartsWith(assemblyNamePrefix, parsedResponse1.ViewStart);\nAssert.StartsWith(assemblyNamePrefix, parsedResponse1.Layout);\nAssert.StartsWith(assemblyNamePrefix, parsedResponse1.Index);\n\n``\n. But they do exist in this case, right? Moving the deletion further up would more closely resemble your scenario?\n. Should we print a warning \\ make it an error to have any dependencies in a shared source project if this is the intended behavior?\n. cc @rynowak Would having this be a separate top level option be easier to deal with when it comes to layering?\n. Why not just write a newTextWriterinstead of doing this?\n. Perhaps. I'll have a look at the project.jsons\n. Yup.\n. My only issue with using that extension is that you end up with an unusedSystem.Reflectionusing in DNX451. ifdefing that seems like more trouble than just callingGetTypeInfotwice over.\n. The semantics are different in this method - we might be dealing with non-interface types (such asKeyValuePair<>).\n. Sadly not. We use a couple of methods fromTypeHelperinModelMetadata,ValueProviderResultetc.\n. :+1: \n. :dancers: \n. Yup - the intent was to trim down Common so it's easier to identify things that are truly common (and perhaps could go end up in the Common repo).\n. Would it work if we don't override this method? It probably calls intoWrite(char[], int, int). var remaining =Math.Min(_charBufferSize - _charBufferCount, count);.this?\n. This block of code starting from theifcould be moved into a separate method so you get to avoid repeating it in the async code block.\n.remainingto be consistent.\n. Call thisFlushInternaland remove the default arguments.\n. Is this comment accurate?\n. Oh nevermind. This makes sense. Maybe put this closer to theClose\\Dispose methods.\n. Isn't this charLength?\n. Tests look good to start with - but we should cover other Encodings as part of the writer.\n. :100: \n. Tabs sound fine - but we aren't going to have newlines in @inject property name\n. Can you remove the default args?\n. var\n. Do we need the backing field if we are using param: NotNull? Wouldn't\npublic HtmlHelperOptions HtmlHelperOptions { get; [param: NotNull] set; } work?\n. Sort usings.\n. This would create a new instance of IOptions<MvcOptions> each time you invoke GetService(typeof(IOptions<MvcOptions>)). I realize the test scenario doesn't rely on this behavior, but it would be nicer to have it behave closer to the real scenario and have it return a single value all the time. Could we change this to not use a lambda?\n. Sort usings.\n. You could initialize these values inline \npublic string IdAttributeDotReplacement { get; set; } = \"_\"; to avoid having to document this constructor.\n. > or sets\n. Have this use the default VS indentation.\n. Is the next part to figure out how to flow formatters through ModelBindingContext?\n. Use a fixed DateTime instead: new DateTime(2015, 05, 11, 12, 13, 14);\n. Also rename this to inputDateTime \\ inputDateTimeValue\n. Change this to Assert.Equal(inputDateTime, dateTimeValue);\n. Can we make this a Theory so we know both true and false work (and it's not returning default(bool)?\n. Maybe use a non-zero time so we know it round trips that part correctly?\n. Formatting.\n. Comments need to be updated.\n. Shouldn't it be available hanging off of MemoryCache? MemoryCache.CreateLinkingScope() -> MemoryCache.CurrentLinkingScope?\n. Do you need to pass cacheEntry in?\n. I think all you need here is the relativePath. Could we simplify this method to accept the RelativeFileInfo and use that on L#202 and L#204?\n. cc @loudej \\ @davidfowl \nThis does take away the ability to add an arbitrary expiration trigger without caching it. I'm fine if this is the intended design for this, but it's different from what we'd initially discussed when designing the CacheTagHelper.\n. Unrelated, but could you change _ViewStart -> _GlobalImport in the comment?\n. You should be ok passing in the relativePath here (in fact it's probably a bug in that we're using the normalizedPath here).\n. Why change this?\n. Could you pull this out into a variable?\n. Not sure I fully follow. With the previous design, I could add arbitrary expiration triggers to the tag helper without having to create new cache entries.\nEntryLinkHelpers.ContentLink.AddExpirationTriggers(new[] { FileProvider.Watch(\"/user.dat\") });\nWith this design you're forced to cache something for the linking to work. In this example, @kichalla is creating a featured_movies cache entry even though he doesn't actually particularly care about caching it.\n. Maybe make a comment this also affects the caching of the base thing. It's not particularly obvious looking at this.\n. Unrelated to this PR, but should this be marked [NotNull]?\n. Indentation\n. Removing the original is a bit problematic though - you'll never fall back to Home/Index.cshtml if Home/en-us/Index.cshtml is available.\n. One of the reasons this expander uses a yield return is because you could chain multiple expanders together and the number of strings that you generate will grow very quickly. In general, the expander should avoid creating strings until they're actually iterated upon.\nAdditionally appending the original list at the end might not be the correct behavior - for instance we should prefer Views/Home/_Partial.cshtml to Views/Shared/{locale}/_Partial.cshtml \n. This needs to put the CurrentUICulture in context.Values under some well known key.\n. There's a copy of this expander in one of the functional tests too. Might want to remove that.\n. Should we additionally have a check for this as part of setting the temp data?\nSo\nTempData[\"foo\"] = value; would throw if the backing TempDataProvider isn't \"enabled\". It avoids user exceptions being lost to ether \\ logging.\n. Formatting: Can you have context on the next line using VS's default indentation?\n. I'll leave this up to you, but it's nicer to limit the scope of try-catch be as specific as possible. In this case, this would be:\n``` C#\nCultureInfo culture;\ntry\n{\n   culture = new CultureInfo(value);\n}\ncatch (CultureNotFoundException)\n{\n   return viewLocations;\n}\nreturn ExpandViewLocationsCore(viewLocations, culture);\n``\n. Ctrl K - D\n. Should this justAdd\\Appendinstead of being first? This way if the user adds a expander, and calls this, their ordering is preserved.\n. Let's get a better name. :8ball: \n. Do we need this to be an enum? Is the plan to support additional modes?\n. Does this need to be a public settable property?\n. This doesn't seem like a suffix - shouldn't it be/Views/Home/Index.en.cshtmlas opposed to/Views/Home/en.Index.cshtml? cc @DamianEdwards \n. Need  docs for individual items.\n. Sort usings\n. Could you additionally add a layout (with partial path specification:Layout = \"MyLayout\";) and verify it uses the expander?\n. docs\n. Why is this a property?\n. Could you use forward slashes instead?\n. Mildly related to this PR - should we have anIHtmlStringinstead? We don't actually care about the behavior ofHtmlStringhere - just that Razor treats types it specially which is better achieved via marker interfaces\n.[NotNull]`\n. cc @kichalla \nDo we care about being particular about the encoding for output formatters? The BOM specification shouldn't apply since you made your change and we wouldn't be producing invalid bytes to throw, would we?\n. Could you verify there were tests for the places that were using these methods (and if not add some to ensure we work correctly \\ bubble the exception?)\n. My question was is there any utility in setting this for an output formatter? Seems like it's useful specifically for decoding, not encoding.\n. You should be fine using System.Text.Encoding. types here\n. Also the other test\n. Remove\n. Undo? You're going back in time\n. readonly?\n. static readonly\n. Could you use strings instead? Assert.Equal(abcdIndented, Encoding.UTF8.GetString(body.ToArray()) - easier to understand what's happening\n. [param: NotNull]\n. Use IndexOf \\ SubString instead - no point allocating an array if you don't care about the result.\n. We'll need to let the BrowserLink folks know if any API changes are made in this project.\n. This statement seems incorrect - wouldn't we be here if we are a top level object with some properties? Also, could we rewrite the earlier condition as\nC#\nif (context.PropertyMetadata != null && context.PropertyMetadata.Count == 0)\n{\n   return isTopLevelObject;\n}\nWe wouldn't require this check here.\n. Could we change the comment to follow the numbering scheme that the previous comment starts?\n. Could we get away with doing Any() on the sequence and not changing this?\n. formatting.\n. Would this never be hit once #2793 gets resolved?\n. Should we change the method signature to return a IReadOnlyList in that case? \n. I thought it wasn't. Let me verify.\n. Will do this once we move away from the nightly packages for Autofac.\n. We already have coverage for DI intergration with Autofac as part of AutofacWebsite. Hence removing from here rather than converting it to the official package.\n. @rynowak what's the best way to do this?\n. @Alxandr, for the time being we have a hybrid of what @loudej mentioned in the design notes in #2551. This approach lets us get away without having to introduce multiple IRazorPageFactorys or moving it into Options to allow for reordering instances. With the exception of scenario 3 from your design proposal, we do hit all the other bullet points. Thoughts?\n. I suppose we can just let Activator.CreateInstance attempt to initialize it and throw if the type cannot be initialized. \n. We had a similar discussion in the past and at that point we decided it was saner to initialize the constructor to avoid having to perform the EnsureInitialized check as part of GetOrAdd. \nWe have a test that verifies in the scenario where a View is never returned, the cache is never initialized. https://github.com/aspnet/Mvc/blob/dev/test/WebSites/RazorCompilerCacheWebSite/Services/CustomCompilerCache.cs#L20\nGranted it does assume that nobody except RazorViewEngine attempts to resolve this service, but my guess is that's the most common scenario.\n. @Eilon, the paths that are used in this API are always app relative (locating _ViewStart, _ViewImports). This would be a safe change.\n. Follow up item: https://github.com/aspnet/Mvc/issues/2933\n. Maybe just check the types? It's a small set of types and presumably isn't going to grow\n. Maybe change this to NumericDataTypeClientModelValidatorProvider if this is specifically going to work with numeric types?\n. Could we add another test for cases where it returns empty sequences for other data types?\n. [NotNull] (other method too)\n. Probably shouldn't be.\n. I haven't seen a module being returned with the set of samples we have. Some of this needs hardening (especially around assemblies\\types with errors)\n. Haven't tried. Should be easy to add a test for it.\n. It's not necessarily always called - so we just avoid doing extra string concats.\n. probably. We might want to throw just so that we know what's happening here. I need to verify how this work with more esoteric kinds of attributes \\ derived ones etc.\n. Yup. Need to add a couple of scenarios for Type - I think we have to do GetType there.\n. I am going to try and see if we can get it to both compile and be used as a resource.That way we can run same tests against RuntimeTypeInfo and SymbolsBasedTypeInfo to verify expectations match.\n. Possibly.\n. Might need to change the name. We already have a SymbolUtility which deals with pdbs.\n. It's once per precompilation. Although we don't necessarily do any work until we determine a view actually needs to be recompiled (i.e. view compilation gets cached the same runtime compilation does).\n. Formatting:\nif (typeToValidate == typeof(float) ||\ntypeToValidate == typeof(double) ||...\n. [NotNull]\n. Does this need to be split across lines?\n. There's a Microsoft.AspNet.Mvc.Razor.Compilation namespace that collides with this.\n. It's internal for testing. I'll add a comment.\n. :+1: \\  NumericTypeClientModelValidatorProvider. It's not a type most people are going to see, so I'm fine with either.\n. :+1: \n. Would this need to be on the interface?\n. Getter only.\n. [NotNull]\n. We rely on the ordering of chunks to inject them in the page being generated. The IList contract is meant to indicate this ordering.\n. Could you throw in an Assert.Equal(viewImportsPath, chunkTreeResult.FilePath); here?\n. NotNull\n. Slightly related but I don't think https://github.com/aspnet/Mvc/pull/3004/files#diff-88150cf385250544dc6321e6ef7c28fdR42 is true. If not, I'll clean it up as a follow up to this.\n. I guess we could. Initializing the cache for non-precompiled is pretty inexpensive (all it does is set up an empty MemoryCache instance).\n. ActivatorUtilities doesn't like it when we expect IEnumerable<> but pass in Assembly[].\n. VS ends up greying out the (IEnumerable<Assembly>) cast to indicate it is redundant. Rather than have to document why it's there, I'll leave the AsEnumerable which essentially does the same thing internally:\nhttp://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,825\n. :+1: \n. Seemed sort of intuitive since we don't need access to IRazorCompilationService later on.\n. Seems like there isn't a way to get back to the Compilation object from the symbol. Using a symbol, we are only allowed to do get GetType on a per assembly basis - which is just more work.\n. Nothing else I know of references these. Other services seem to have a justification as to why they are singletons, these simply don't.\n. :+1: \n. And you think my lambda properties look \"eww\"\n. ~~Isn't this equivalent to result.First?~~\n. The implicit conversion can return null which would cause this to throw.\n. Can we avoid getting the nullable int here?\n. SetModelValue has NotNull on both those arguments. Should that requirement be removed?\n. Remove\n. Do we not need need this anymore?\n. TVal\n. ``` C#\ncatch (Exception ex)\n     when (!(ex is FormatException))\n{\n}\n``\n. A bit unrelated, but we should probably rename this. There's nothingHttpabout it (anymore).\n. > ATaskthat on completion returns theinstance\n. Follow up PR with docs where missing?\n. We could do that. Maybe by definingTemplateContent : IHtmlContentwithin Razor.Runtime?\n. Might end up cleaning this up as part of https://github.com/aspnet/Mvc/issues/3030\n. I'm going to leave this as is if there aren't strong arguments against doing so.\n. MemoryCache is limited to using string keys - so we're stuck with either creating a composite key using the tfm and configuration - or varying the instance in itself. This seemed cleaner.\n. That should go away once this PR goes in - https://github.com/aspnet/Mvc/pull/2961\n. Not super familiar with routing code, but is it possible for the router to route without visiting the entry (and consequently invokeMergeAttributes?)\n. Had a talk with @sornaks aboutNormalizePathoffline. The intent of the method is to support users specifying virtual paths with back slashes on *nix. This allowsreturn File(\"~\\content\\files.txt\");to return the file/content/files.txtinstead of a file named\\content\\files.txt` at the root of the application (back slashes are valid file names on non-Windows platforms).\nI'm not sure if we should bother attempting to fix this - seems like a super esoteric case (in addition to it being bad practice). Thoughts?\n. Could we inline this method? \n. We should certainly not attempt to normalize physical paths.\n. // Arrange\n. Inline this too.\n. Could we potentially rely on the existence of fileInfo.PhysicalPath to switch to using IHttpSendFileFeature here? cc @Tratcher\n. Should the first argument be filePath \\ virtualPath? Also cc @Eilon for design\n. Where're the VirtualPhysicalFilePathResultTest :smile_cat: \n. Could we make it so that PhysicalFilePathResult doesn't go to disk? Should be able to get away by adding a  protected virtual Stream GetFileStream(string filePath) method to the type?\n. I debugged this and we don't request for the same attributes on types multiple times over. Seems pointless caching it as of now.\n. Interesting - hadn't thought about that. Will give it a try.\n. Will remove extra line.\n. These things change per compilation - so we can't reliably cache symbols beyond the lifetime of a single compilation. That said, _symbolLookup caches the actual lookup. I guess we could special case in that type so we don't have to go to a dictionary for the actual lookup.\n. Yup. IDictionary<,> produces the name IDictionary;2 - this is to accommodate scenarios along those lines.\n. It probably could be\n. Nope. One of the issues outlined in https://github.com/dotnet/roslyn/issues/4529.\nWe could potentially replace this with our own assembly visiting behavior so that we match assembly names.\n. The doc seems incorrect. It's for app rooted file system - in the default case the IFileProvider instance maps to IHostingEnvironment.WebRootFileProvider.\n@sornaks, could we use the code from StaticFile? Feel free to do this in a separate PR if you'd like to.\n. > A <see cref=\"FileResult\" /> that on execution writes the file specified using a virtual path to the response using mechanisms provided by the host.\n. StringComparer.Ordinal?\n. return await...\n. [NotNull]\n. Returns <see cref=\"Stream\"/> ..\n. :100: \n. Maybe have non-ASCII chars in here?\n. You could just make up the names here instead of doing Path.GetFullPath\n. Isn't this whatever exception GetFileStream throws? If there was a file at ./Properties/FilePathResultTestFile.txt- would this still throw a FileNotFound?\n. Remove\n. :+1: \n. We could look at all the views we previously looked at to see if they exist now. This would resolve the issue where a view with a better location appears since we last cached it.\n. Oh sure, I haven't changed that part. Just saying we could do that.\n. Do we need the ToArray()?\n. Should this be results.Values.Values ?? >result.Values.Value\n. Nevermind - that API doesn't exist.\n. While you're changing this line of code, could you also add named parameters to the boolean parameters?\n. cc @Eilon \n. Formatting:\nC#\npublic virtual Task<bool> TryUpdateModelAsync<TModel>(\n    [NotNull] TModel model,\n    [NotNull] string prefix)\n{\n. Same for other methods in this type.\n. bufferingFeature?.DisableResponseBuffering();\n. Is there a complementary scenario IfBufferingFeatureIsNotAvailable already covered? If not, could we add one just to verify things continue working?\n. We could create one fixture per test type - this is a lazier way of going about it.\n. Could we set the SkipReason instead of using a comment?\n. Aww, it's not settable.\n. Yeah. In the general case, we set the IRazorPage.Path to the location where we found the cshtml file so it shouldn't be null.\n. I was discussion this with @kichalla. There's an unorthodox scenario where you could eventually terminate the cycle:\n```\n// _Layout.cshtml\n@{\n   var node = (Node)Context.Items[\"node\"];\n   if (node != null)\n   {\n      Layout = \"_Layout\";\n     Context.Items[\"node\"] = node.Parent;\n   }\n}\n@RenderBody()\n``\n. I realize this is unrelated to your change - but is there a fixed set of names we could pass to this method? This seems kinda fragile.\n. If all we do is pass in aNullLoggerFactory, couldn't we simply change these websites to not use thisConfiguremethod?\n. :100: \n. :+1: \n. Updated + added tests\n. No particular reason - I could switch it to aConcurrentDictionary. https://github.com/aspnet/Mvc/pull/3134/files#diff-7f27afec00025f958d6da462dfbe5c93L83 - we specify the root path as an empty string.\n. It's guaranteed to be notnull, but not empty.\n. The type that is passed viaViewLocationExpanderContextis anIDictionary. \n. Does it make a difference forIDictionarys?\n. cc @rynowak \n. Seems like a bad idea to rely on behavior of external code?\n. Yup.\n. I'm going to work on removing NotNull in Mvc today. Consider throwing here instead.\n. Docs\n. Undo the move?\n. ArgNullException is located under System\n. Ahh. Not sure why its doing that. Will fix.\n. It looks up implemented interfaces and overriden methods.\n. I'll remove the null check.\n. Discussed with @NTaylorMullen offline - I'll fix the missing line mappings for this in a follow up PR.\n. Seemed simpler?\n. No idea. I just copied it from the test above.\n. It's going to printCompositeViewEngineall the time since thats the wrapper. You'd need to log this separately insideCompositeViewEngineor changeViewEngineResultto include theIViewEngineinstance that found the view.\n. Could we add aOrderproperty on validators instead? It'd be in line with the way we do ordering in other parts of the application.\n. Design change: the AnchorTagHelper can produce links that do not have urls.\n. Ok. We'll need to update a couple of functional tests in that case. Essentially if you have an anchor tag helper with incomplete information such as:Some value` - we'll throw a Arg Null Exception.\ncc @NTaylorMullen \n. I'll leave this as is for now and file a bug to change the design of anchor tag helper which includes a follow up to add a ArgNotNull here.\n. Filed - https://github.com/aspnet/Mvc/issues/3208\n. This surprisingly doesn't cause a compilation issue and works at runtime for value types.\n. Could you give this a meaningful name while you're modifying this type?\nValidateReturnsEmptyValidationResultSequence_WhenIsValidReturnsTrue?\n. A bunch of tests are named this way. Maybe leave it as is\n. Space after comment //\n. Localized string.\n. @dougbu, it just no-ops for value types. \n. Would you still need the call to Load() after this line?\n. Is this an exception from our stack? If so, could you verify the message?\n. If not, remove the unused exception variable. Similar changes for other tests.\n. new HttpContextAccessor();\n. Sure, I could do that.\n. Couldnt FindView + ExecuteAsync be combined?\n. Fair enough if it helps testing.\n. > PartialViewResultExecutor \n. Extra lines.\n. Shouldn't need the await here.\n. > Executes an <see cref=\"IView\" /> to the response.\nTo be in sync with derived types.\n. These would need null checks. \n. return ExecuteAsync\n. _leasedByteBuffer?.Owner.Return(_leasedByteBuffer);\n. :100: \n. What's the current behavior when you have no entries and you attempt to look it up? I'd think it throws a KeyNotFoundEx\n. Could you add a comment that calls out the not found behavior. Pretty nifty.\n. var\n. Can you add negative cases for the Contains \\ ContainsKeys (the Assert.False scenarios?)\n. Empty line\n. remove\n. Wouldn't the backing list take care of this?\n. I'm sad for us removing the Autofac dependency (temporarily) - but certainly not this from our sample.\n. Docs for the ctor\n. This is still deficient but it is slightly more robust than what we do. It filters non-public methods. The scenario that affects this is ifdefed in the test. It is a bit esoteric in that involves having a non-static method in the base class and a new static method in the derived class with the same arguments. \nI'll follow up with the CoreCLR team to see if they can add a Type.GetType(string methodName, BindingFlags, Type[] types) overload which should address this issue.\n. It doesn't do the same method resolution you get with C# overload resolution. That's what this selector is attempting to ensure.\n. DefinedTypes returns TypeInfo in DNXCore50 and Type in DNX451. It's kinda weird they broke this API.\n. The conversions do seem to work - added additional test for those.\n. Probably shouldn't.\n. Ok. \n. Could this be an array?\n. Could you add a comment saying this is done this way for perf so that this doesn't get replaced with .Count(i => i != null)\n. We have a property on this type GenerateSymbols which could deserve the same treatment - i.e. change it to a method which accept the context. Although I don't see why you would need symbols for precompiled modules.\n. There's another usage for this on https://github.com/aspnet/Mvc/pull/3267#discussion-diff-41322297R34 where it prints Task<T> (without nameof etc). Just wanted these two to be consistent.\n. Yeah it started off being different. I can trim a case or two since they test the same behavior\n. extra white space\n. You could use IMvcRazorHost.MainClassPrefix to determine if you're the the actual view being rendered.\n. AFAIK, it's the string as it would appear in code and not the GetType().FullName. In this case, it would be the right string to use.\n. Would it be easier to follow this if we this was written as a string and parsed? It'd be a lot easier to read than looking at a SyntaxTree structure.\n. formatting\n. Could we make a comment on what the generated code looks like before and after?\n. static\n. Care to also format the indentation for this while you're modifying this file?\n. Could we instead Assert rewriter.Visit(tree.GetRoot()).GetText() matches the expected output?\n. Sweet\n. var expectedMessage = $\"Given path '{path}' was not rooted. Paths must be rooted.\";\nAlso should the message say Path {path} was not rooted. instead? The current error message seems a bit atypical.\n. Could you remove the current resx string (FileResult_InvalidPath) if it's unused?\n. Spoke to @Eilon - instead of doing this, move it to Microsoft.AspNet.Mvc.TagHelpers. Users will import it via _ViewImports.\n. Why? For the EditorBrowsable bit?\n. Null checks\n. I know nested forms aren't a supported browser feature, but what's the behavior when you do make a malformed page?\n. public bool HasFormData => _formData != null;\n. we usually decorate tests with // Arrange, // Act and // Assert. Have a look at other tests in this class.\n. Move this test to ViewExecutorTest.cs. You shouldn't need a Controller to verify this.\n. It's less verbose. No reason not to adopt features when they are the better alternative.\n. Is this because we don't use context here?\n. Seems like it. Maybe it's just less work to throw in the null checks here so that we don't have to add that check if content starts being used?\n. The HttpContextAccessor might need to point to the current ActionContext.HttpContext\n. Isn't this from DI? We don't have null checks for any of these\n. I was trying to get it to look like all the other paths we generate by default - https://github.com/aspnet/Mvc/pull/3316/files#diff-91b20801581acc92340a5d67c51d172dL2. We could live with out it, but we assume all / rooted view paths are app rooted and not absolute paths.\n. It seemed easy to do it this way rather than doing string concats. I guess there's some perf benefit here but it might become negligible once we figure out some way to cache these.\n. Docs\n. :+1: \n. These on the other hand do need null checks.\n. Did none of these have any effect on the test?\n. Are these ported over from ObjectResultTest?\n. Split lines\n. Could we pass this in as an array?\n. // IE\n. Same as above\n. If you feel like making the change (since we don't actually have a guideline or preference):\npublic HttpContext HttpContext => ViewContext?.HttpContext;\n. I just noticed @rynowak's comment here - https://github.com/aspnet/Mvc/issues/3332#issuecomment-148739038 and we don't want to break compat here. Could you undo changes to this file?\n. @Eilon, casting for ints was currently broken.\n. Thoughts?\n. Sure\n. The casting.\nC#\nTempData[\"foo\"] = 1;\n...\nvar id = (int)TempData[\"foo\"];\n. You're far more likely to use ints than any other data type.\n. :8ball: \n. This is covered by a unit test - https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Razor.Test/RazorViewTest.cs#L1077\n. Is this still referenced?\n. should we keep Act 1 \\ Assert 1 without the file modification bit?\n. static?\n. @Tratcher was the one that came up with the term authentication components. Schemes seems a bit easier to follow\n. Well I care about unnecessary boxing.\n. > named param for null\nGo away :trollface: \n. Removed\n. Is this to support relative paths for partials? If it's specifically meant for Layouts, could we change FindPage to specify the basePath and calculate the Layout using that value? \n. :+1: \n. Do we need a better data type to represents paths here so that things like view components can be more explicit that the path is relative?\n. Success?\n. Wouldn't the stream eventually throw when you write to it?\n. Does this need to guard against double disposal?\n. Is the ConfigureAwait necessary?\n. var\n. Debug.Assert\n. We don't have CompressBuffer\n. Space\n. > Why did the chicken cross the road?\n. Is there an alternative name for n work that works better? remainingBuffer or some variation along those lines?\n. Could you throw in a new line after the while - readability\n. Should we cache this delegate?\n. Ice?\n. Oops\n. It calls AuthenticationManager.ForbidAsync so I thought calling it Forbid made sense?\n. @Eilon - Forbidden?\n. Yeah. We could figure out if this needs to be renamed.\n. cc @Eilon, what do you think about IRazorPageFactoryProvider?\n. Could we commonize this a CombinePath method? Pattern's identical to Line 228-231\n. This still feels very weird to me - it relies heavily on the way we construct ViewContext instances from ActionContext which happens to be an implementation detail and not a contract. How did this work for partials in the past? Did we resolve it in the HtmlHelper? \ncc @Eilon for thoughts?\n. private static method for this type.\n. Should this attempt to keep the order of validators relative to the order in which validator providers are listed? i.e.\nProvider1 -> A (Required), B\nProvider2 -> C, D (Required)\nResult: D, A, B, C\nIs A, D, B, C the more appropriate ordering in this case?\n. Do we have coverage for await inside of one of these things?\n. C#\nAssert.Collection(providerContext.Validators,\n  validator => \n  {\n      var dataAnnotationsValidator = Assert.IsType<DataAnnotationsModelValidator>(validator);\n      Assert.IsType<CustomRequiredAttribute2>(dataAnnotationsValidator);\n  },\n {\n      var dataAnnotationsValidator = Assert.IsType<DataAnnotationsModelValidator>(validator);\n      Assert.IsType<CustomRequiredAttribute1>(dataAnnotationsValidator);\n  },\n  ...\n  );\nVerify this succeeds on Mono since this depends on reflection order so internal ordering might be platform dependent.\n. :clap: \n. Spacing\n. This would be problematic for non-Razor view engines. Maybe we should check if the file has any extension?\n. It works fine for Razor specifically, but we can't use that semantic for the CompositeViewEngine. That sounds quite incorrect \n. Isn't this going to overflow?\n. Yup, I could do that now that I actually understand how .? works for value types - https://github.com/aspnet/HttpAbstractions/pull/461#discussion_r43961310\n. Use VS default formatting.\n. :+1: \n. DesignTime intellisense?\n. GetAbsolutePath? Make sounds a bit unusual.\n. The previous edition of the API was IRazorViewEngine.FindPage(ActionContext context, string path); - it didn't have a notion of partial at least not in the API surface. We shouldn't have it here\n. Might want to rebase on dev since this type's mutated a bit.\n. I guess this is no longer needed?\n. Isn't this essentially moving the check one layer up (out of the IViewEngine)? For any IViewEngine lookup aren't you essentially forced to perform both these checks (or is there a scenario where you can only have to call GetView \\ FindView but not the other?\n. This needs docs.\n. readonly\n. This used to work because it was relying on CallContext\n. More like DankException - paraphrasing @rynowak \n. Moq.Protected probably works correctly in CoreCLR now (the bug was addressed), but the change looks nicer + is strongly typed.\n. The code basically did nothing and sort of tested that services could be property injected.\n. Property injection doesn't work any more. The other example talks about parameter injection and I've left that alone.\n. That doesn't get flown in to the controller factory.\n. Doesn't exist in coreclr.\n. Quite likely that a Task.Result can throw AggregateException. This ensures it's unique.\n. Ok.\n. It does - there was a bug when I initially ported it which apparently was later fixed. Haven't seen if it works since the fix\n. Don't think there's CurrentThread.CurrentUICulture in CoreCLR.\n. One of the types in TestCommon gets included here and it used to exclude Moq out using #if MOQ_SUPPORT. This replaces it.\n. Internal types + strong naming doesn't work with Moq NetCore now. I don't see us referencing one test project from another so not seeing how this would be problematic. If it is, we can change this into a regular project instead.\n. Sure - let me figure out why these couldn't be run.\n. Is there any instance of this API where isMainPage is true?\n. Why move this?\n. Could we get before \\ after allocations for this if it's a perf change?\n. We typically don't document thrown exceptions. Why do it here?\n. Can we change this to be a bit more explicit - ViewEngineResult.UnsupportedPath or something along those lines? Seems cleaner than having to look at the SearchedLocations to determine if the view engine actually did any work.\n. Isn't this a pattern requirement and not a choice based on what's more expensive? We can't say GetView is necessarily less expensive for all IViewEngine implementations.\n. :+1: \n. We aren't varying the method name based on other parameters (FindView_ForAreas_WithMainView_Throws etc). That bit in the name shouldn't be necessary.\n. GetAbsolutePath_ReturnsPagePathUnchanged_IfAppRelative\n. Would we need tests to verify the behavior of relative paths outside app root? I'm guessing that's testing the implementation of IFileProvider at that point.\n. > The important thing is just that one ViewEngineResult has useful information for the caller and the other doesn't.\nBut the current API doesn't express this. We're repurposing the SearchedLocations to determine this. A proper API that expressively does this would be better. Avoiding extra ViewEngineResult instances seems tangential.\n. Yup, I'll switch\n. waitDuration is for safety. We do Set these elsewhere.\n. Sure.\n. Discussed this offline.\n. But there isn't a property IsMainPage on RazorPage (and probably shouldn't be one). We shouldn't need this parameter. \n. This is essentially called from IViewEngine.FindView \\IViewEngine.GetPageand all of that pipeline is synchronous. We made a design choice to make this pipeline entirely sync at one point.\n. Yup. The default forWaitOneis wait infinitely.\n. Super unrelated but could we potentially simplify this code? There's really no good reason for a controller type to have more than oneControllerContext.\n. It was to repent for my carelessness. Removed :+1: \n. That sounds nice.\n. Docs for the type + properties.\n. Follow up to remove the cast once younewthis property.\n. Remove whencontext.ActionDescriptorhas the right type.\n. Could this be replaced with afor` loop?\n. Could you fix the summary for this method:\n\nReturns a dictionary of representing the parameter-argument name-value pairs,\n. Unrelated, but this comment has a leading space.\n. Why did this change?\n. Can ControllerContext be null?\n. Should this repurpose the BindingContext == null exceptions for ControllerContext == null?\n. Remove this\n. Remove\n. Ok. We should remove all the null-safe accessors in properties in that case\n. ControllerContext is guaranteed to be non-null. Remove the null safe accessor for these properties.\n. The unit test only comment should probably go to remarks.\n. Should this account for ActionContext.ActionDescriptor being independently settable?\n. Docs\n. > Gets the <see cref=\"ActionContext\" />.\n. Undo\n. Do you need these casts? Same for the other controller\n. Could you just inline Namespace. It seems like such a poor variable \\ field name.\n. The property doesn't exist on Thread.CurrentThread.\n. We don't use Moq in functional tests.\n. Shouldn't be needed. If it's used in comments, fully qualify the comment.\n. Make this string.IsNullOrEmpty Generally use that to null checks for string values.\n. Looks like the values are inverted for the case (IsDevelopment -> Debug else Release).\n. private const string ConfigurationName\n. Completely unrelated - while you're modifying this type, could you reformat this bit of code so it uses the VS default indentation:\n\nC#\nreturn compilerOptionsProvider.GetCompilerOptions(\n        applicationEnvironment.ApplicationName,\n        applicationEnvironment.RuntimeFramework,\n        configuration)\n    .ToCompilationSettings(applicationEnvironment.RuntimeFramework, applicationEnvironment.ApplicationBasePath);\n. We assume everything passed in to the ctor is non null. You could remove the null check.\n. throw new ArgumentException(Resources.ArgumentCannotBeNullOrEmpty, nameof(value));\n. DevelopmentEnvironment (no need to abbreviate it)\n. Could you make this a Theory and include Production and Staging as InlineData?\n. The field is unused in CoreCLR which results in a warning \\ error.\n. cc @rynowak - the request.CreateResponse doesn't exist in CoreCLR and it ended up recursively calling this method.\n. Copied from https://github.com/aspnet/dnx/blob/167fff5c19a0864dcf4b31edaf7c17d13bd35a3f/src/Microsoft.Dnx.Compilation.CSharp.Common/CompilerOptionsExtensions.cs#L30-L34 since Roslyn prints assembly redirect warnings in CoreCLR.\n. :+1: I'll merge it in as a separate commit.\n. It was used as part of a contract with PageInstrumentation\n. The existing code was incorrect - we don't have 67 characters in _PartialView. Additionally the line mappings for _Layout were also incorrect. I didn't spend time investigating why it was incorrect.\n. We don't have more than one tests here - so it really doesn't matter. We could fix it if we ever add more. DiagnosticListener derives from DiagnosticSource and it would have been confusing to have two listeners here.\n. This was kinda hard to read.\n. Need to be IHtmlContent. Same for Serialize\n. If you're feel overtly enthusiastic, copy the description from the other *Results\n. Could we delete ObjectToDictionary or are there other places its still being used?\n. It used to check for nulls in the past.\n. > Still messy\nDo you have suggestions on what it should look like? \n. The HelperResult delegate changed from Func<TextWriter, Task>  to Func<IHtmlContentBuilder, Task> - which made it difficult to continue treating it as a IHtmlContent.\n. This used to swtich from buffering to unbuffered when you Flushed. It was hard to keep that behavior with the current flow. That said, I'm not sure if that behavior is useful or expected.\n. We have to keep this around for things that continue writing to ViewContext.Output (like Html.BeginForm)\n. Changed from HtmlString -> IHtmlContent\n. Needs a better name. There's a virtual method with the same name.\n. The delegate used to be invoked from IRazorPage.RenderBody(). We simply return the BodyContent from it since there's no async work involved.\n. We could. There are pieces of code that look at the stack to determine if they're inside a tag helper. Just makes them slightly obtuse now (if (_contentBuilderScopes.Count > 1) // 1 is fine since it's the default writer)\n. Yeah ignore the docs for now. I just did a find and replace so it's quite messed up.\n. Yeah - it probably expects a StringWriter. Let me figure out what scenarios causes it to land here.\n. This property is the buffered content that gets passed to a layout page, not super sure what it would look like if we were to turn it into a method.\n. I guess?\n. I'll file a bug for this.\n. We might be able to do away with not using a PhysicalFileProvider here. It looks like all it cares about is to get a NotFound file result which we could mock rather than use a real file.\n. Tsck tsck. You need to update VS\n. The code hasn't changed apart from not using the CopyTo semantics of writer. Append would be equivalent to Write.\n. Ok\n. Ok.\n. I should fix this\n. Would be nice to not use the term Chunk here - RazorBufferBlock? \n. The service is scoped to a request but view engines are singletons. So that wouldn't work.\n. The RazorBufferTextWriter deals with RazorBuffer instances.\n. > Then this can't be used safely on multiple threads.\nCould you explain the scenario where this fails?\n. > <typeparam name=\"TResource\">\n. Could this be static?\n. Is this copied as is from HtmlLocalizer? (does this need to be reviewed?)\n. char braces? \n. Where did this ctor go?\n. I'm still not following this - why is the same view instance being executed from multiple threads?\n. Yeah, doesn't seem like it needs to use the concrete type.\n. I'm not sure if there's value in doing it without knowing if \\ how we end up with large strings here.\n. Sure\n. :+1: \n. Looks like these are misplaced. Also why are we documenting types in the Internal namespace?\n. Not super vested. curly reminds me of a comedy act rather than the serious business that is localization.\n. Nope. We can change it as a follow up.\n. cc @ToddGrun for tooling.\n. With the hook, you should be able to use a minimal stub (a no-op ILibraryExporter) and that should suffice, wouldn't it?\n. I thought we weren't refactoring. It was just an extensibility point.\n. > Context object used to pass information about the current Razor page compilation.\n. > Gets or sets the ...\n. Think it should be ok for this to be null since it starts off as being null.\n. Thoughts on a better name?\n. > Gets or sets the callback that is used to customize Razor compilation?\n. startup\n. You could do this inline if it's meant to be non-null.\n. Split these across two lines (we use a 120 char limit)\n. Nevermind. Didn't see that this got instantiated to a value in the other type.\n. Making the suggested change exposed a potential issue. We end up with an instance of RazorBuffer inside of a CacheTagHelper and we cannot keep the RazorBuffer around between requests.\n. readonly\n. nevermnd. It's settable.\n. Granted we can make this work, but is there benefit in letting users customize this? Razor parser had to be modified to switch to C# 6, so changing the language version here might not be sufficient.\n. Are those interesting though? Do we expect people to use #ifdef in a view?\n. invokeViewStarts: false\n. Can you fix the indentation for these attributes?\n. readonly (also could you update the line above)?\n. > Provides validation based on <see cref=\"ValidationAttribute\" />.\nor something like that.\n. services.TryAddSingleton<IValidationAttributeAdapterProvider>(attributeAdapterProvider);\n. You could write this as:\n``` C#\n// Arrange\nvar expected = \"{\" + Environment.NewLine\n     + \"  \\\"first\\\": \\\"wall\\\",\" + Environment.NewLine\n     + \"  \\\"second\\\": \\\"floor\\\"\" + Environment.NewLine\n     + \"}\";\n// Act\nvar content = await Client.GetStringAsync(\"http://localhost/Home/Dict\");\n// Assert\nAssert.Equal(expected, content);\n``\n. Could we call thisIndexorDictionary. The abbreviation seems kinda bad.\n. Do we really need this remark? Might want to merge it into the summary perhaps.\n. Feels weird to call out the non-nullability of parameters. We don't do that elsewhere.\n. Use VS default indentation (i.e. just hit enter and let VS indent at 4 spaces)\n. Probably don't need functional tests for this if unit test covers this.\n. All the functional tests run under an in-memory host. Running it should be identical to a unit test. We went through an exercise of trimming functional tests so it really doesn't make to add coverage for trivial scenarios.\n. :100: \n. I think theCallbackis indented to align withSetup. Instead, just hit tab. We've been fixing existing code where we went out of the way to keep the.`s aligned.\n. See https://github.com/aspnet/Mvc/pull/3761/files#diff-c44a4239a9811abb5bf641f6210344c3R205\n. Ignore this for now. I'll revive this.\n. This.\n. Should we throw here if any values are null?\n. In the event an argument does not have a value?\nComponent.InvokeAsync(\"Foo\", new { a = \"some value\" }) -->  InvokeAsync(object a, object b) \n. Ok\n. Ahh. It sounded like we were getting rid of the synchronous variants. \n. I dropped the buffer size since this it resulted in lower allocations.\n. not super sure on this - it says Rent(minimumBufferSize). Does this mean we could end up with a larger buffer here and we'd have to do sub-chunking?\n. The default array is pretty crazy long: private const int DefaultArrayLength = 1048576; based on reflection. Is the idea that you're supposed to perform sub chunking on the one array that is pooled?\n. 100 points\n. Could this be moved out of the try block? Is there a scenario where the assignment would fail. Ran into this when I was working with the view buffer changes.\n. Is there a benefit to making it generic as opposed to it being IJsonBufferPool<char>?\n. _ => options since we use it.\n. Where does this get called?\n. Ok. I'll get rid of the comment.\n. @NTaylorMullen it doesn't look like we use this method (none of the functional tests rely on this). Is there a scenario I'm missing that isn't covered by the tests?\n. Should've removed it in an earlier PR, but this is entirely unused now.\n. Need to update docs.\n. Might be a negligibly small optimization but would be nice if we could pass the ContentBuilder into the ctor of the DefaultTagHelperContent. This would help avoid the backing List<IHtmlContent> from resizes. \n. Yeah, it would allocate a List of size 1 and append it. Might be pretty marginal\n. Did this get removed?\n. Remove (also I've been moving Kestrel down here so it's alphabetic). Second bit is totally optional.\n. Ctrl K - D to only have 2 space indents\n. Remove the weblistener dependency\n. Remove \n. Haven't checked. Let me verify.\n. Nope. Removed\n. I end up having to annotate TStartup : new(). It's less code this way :)\n. This is a bug in the TestHost implementation. Some apps register a ConsoleLogger which results in a null ref here: https://github.com/aspnet/Hosting/blob/0f0999161d5dfb12feba90f26bbc05795fdf00b3/src/Microsoft.AspNet.Hosting/Internal/HostingLoggerExtensions.cs#L144\nC#\nSystem.NullReferenceException : Object reference not set to an instance of an object.\nStack Trace:\n   at Microsoft.AspNet.Http.Internal.DefaultHttpRequest.get_Protocol()\n   at Microsoft.AspNet.Hosting.Internal.HostingLoggerExtensions.HostingRequestStarting.ToString()\n   at Microsoft.AspNet.Hosting.Internal.HostingLoggerExtensions.HostingRequestStarting.<>c.<.cctor>b__7_0(Object state, Exception exception)\n   at Microsoft.Extensions.Logging.Console.ConsoleLogger.Log(LogLevel logLevel, Int32 eventId, Object state, Exception exception, Func`3 formatter)\n   at Microsoft.Extensions.Logging.Logger.Log(LogLevel logLevel, Int32 eventId, Object state, Exception exception, Func`3 formatter)\nI'll file a bug for it.\n. Might want to consider using a StringBuilder to do these replaces \\ substrings if it happens in ordinary cases.\n. Sure. Depends on how common these cases are. Although my guess is nearly all view paths start with a leading slash and have an extension so it's not uncommon.\n. The code formerly referred to as ViewComponentMethodSelector is part of the descriptor provider now.\n. Not for this PR, but we could try to be clever in this case and attempt to make it work if the user does\n@await Component.InvokeAsync(\"ComponentWithRelativePath\", person) (similarly with a params array). The user experience for single parameters is a lot worse than what it used to be before.\n. Does VS intellisense look ok if the first entry is a para?\n. Is the casing for this View Component or view component? I saw some docs earlier which used the former and stuck with it.\n. @rynowak should we get rid of this (i.e. remove the arguments from logging?)\n. It's better than using Environment.TickCounts according to http://stackoverflow.com/a/8865560. I think the reason it doesn't use a Stopwatch is to avoid the allocation for logging.\n. Undo\n. Yeah, it can't be null anymore.\n. Okie dokie.\n. We don't have the descriptor at this point to figure out what the order is. Are there any other places that log a dictionary?\n. :+1: to @rynowak. You can't have a ViewComponent Invoke method that returns nothing. (which is pretty much what the exception message says)\n. view component it is.\n. It's settable and we only verify if the context is non null at the start of the method.\n. Tooling works fine.\n. This isn't new behavior, but this cache instance is shared with the user. We should use a better key than this to avoid collisions.\n. I guess. Just a preference to separate out the two separate actions\n. Or use a type with a comparer. Makes it more reliable than strings.\n. IChangeTokens created by PhysicalFileSystem are cached. Is that what you were concerned about?\n. Plus it also doesn't look like an accidental line copy.\n. Can you reuse the OperationBindingContext in the event it's already created?\n. for loop in that case\n. Could we use Array.Find here?\n. return it as Dictionary<string, object>\n. You could perform this after Line 174\n. Consider dropping the Core term. The other one helped to distinguish it from BindActionArgumentsAsync - this one just makes it verbose.\n. Ok. It seemed a bit easy to get away with sticking it on options. I can move it to a service if you feel strongly about it\n. Fine. I'll make it a service.\n. That seems worse.\n. Yeah, seems like this change is pretty unnecessary. I'll go ahead and close the PR.\n. I think the intent was to avoid allocating the StopWatch instance.\n. https://msdn.microsoft.com/en-us/library/system.web.mvc.jqueryformvalueprovider(v=vs.118).aspx\n\nThe JQuery Form Value provider is used to handle JQuery formatted data in request Forms.\n. I thought @DamianEdwards wanted us to use \"Represents ..\". \n. Ok, I guess we've not been using that term, so I'll keep up with that tradition.\nAn HTML form element in an MVC view.\n. Do you need to do this? The subtraction works fine regardless of overflows:\n\nC#\n        long x = long.MaxValue + 3;\n        long y = long.MaxValue - 5;\n        Console.WriteLine(x - y); // Prints 8\n. Could we add a test for this since the ordering is pretty important?\n. Looks like there is one - https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Test/MvcOptionsSetupTest.cs#L71 - shouldn't it fail?\n. It should be fine to remove the logger.IsEnabled(LogLevel.Information) check since that bit is already embedded in the startTimestamp != 0 condition. Apart from that, the PR looks good. Presumably we could do something similar with Hosting to avoid the IsEnabled query cost.\n. PathString.Add checked for this condition - https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNet.Http.Abstractions/PathString.cs#L192-L193\n. docs while you're at it?\n. extra space.\n. var ex = Assert.Throws<AmbiguousActionException>(() => selector.Select(context));\n. I'll run it by @DamianEdwards\n. I was looking at an alternative where we would flow ILogger to AttributeMatcher and collate data if logging is enabled. If the logging is something we care about, I could keep it around (albeit in a messier form).\n. return object.ReferenceEquals(this, filter);\n. return object.ReferenceEquals(this, filter);\n. Could we derive from the other type and move this check to ShouldValidateRequest? The Auto behavior is a special case of validation so this would be a reasonable candidate for type hierarchy.\n. The alternative was to say where TMode : IComparable but that would result in boxing.\n. I'll add the null check.\n. Ignoring it seems fine. \n. You could move this to be initialized inline and delete the ctor.\n. > Does not override all HTML encodings which\nwhere does it not get used?\n. Can this field be removed?\n. Tests.\n. Sure, I can do that\n. This was addressed as part of https://github.com/aspnet/Mvc/commit/c125b4e59badf551c85bbc8d6ae8cb133fe6de7c\n. 1.0.0-*\n. DI should inject an ILoggerFactory. You shouldn't need the NullLoggerFactory.\n. Look at https://github.com/aspnet/Mvc/commit/c125b4e59badf551c85bbc8d6ae8cb133fe6de7c for the timing pattern.\n. Indentation.\n. Razor (casing)\n. CompilerCacheLoggerExtensions \n. > Code generation for the Razor file at {FilePath}' started.\n. > Code generation for the Razor file at '{FilePath}' completed in..\n. > Compilation of the generated code for Razor file at '{FilePath}\n. Commonize it under one if-else.\n. name\n. If one of the derived types is meant to be throw-away code, I'd rather we duplicate this so we don't need to deal with this when we eventually remove the DNX support.\n. Oops, completely missed this bit. We have two levels of logging and I think what you have is the right place to log.\n. We don't have Razor specific logging elsewhere, so no. However we do use that term in our docs\nFor .e.g\n\nrender a view that uses Razor syntax\n. Should this be false?\n. Oh nevermind. This is the encoder.\n. Yeah - Use RazorViewEngine.GetNormalizedRouteValue to get the value.\n. Undo?\n. namespace MvcSubAreaSample? Just so that people don't assume the namespace has to do anything with the subarea discovery.\n. Remove\n. What's dataTokens: new { NameSpace = \"default\" } used for?\n. I guess this would be fine (since it's simply pulling the value out of the ViewLocationExpander dictionary. PopulateValues would need to change to use the GetNormalizedRouteValue method.\n. Weird indentation\n. Could we simplify this? We don't need to demonstrate tag helpers here.\n. Do we need this for the DependencyContext package? We should mirror these as part of the CoreCLR job so we can gate any breaking behavior.\n. Formatting (spaces)\n. Could you remove this? The package got removed but I missed removing it in the DefaultAssemblyProvider\n. In actual code, this is never null. I want to remove it in the next iteration but it causes a bunch of diff in the test. Sending this as a design PR to vet the changes independent of the clean up.\n. HashSet has no guarantee of ordering (which we expect from this result). It just happened to keep the order in which items were inserted.\n. I'll change this to IList and touch up any consuming code.\n. Yup.\n. PathString url encodes url segments as part of ToString(). We'd have to re implement that which seems like more hassle than necessary.\n. The unique id doesn't capture the value of patterns which are the things to vary on\n. It made things a bit more gnarly - but I've updated it to remove the String.Split in entirety.\n. Ran this by @dougbu, it feels like the code wanted distinct values in an order preserving collection. HashSet happened to preserve the order but this formalizes it.\n. IsReusable?\n. nameof(descriptor)\n. What happens this method is invoked an outdated (old version) ActionDescriptor?\n. Couldn't we use List<T>.RemoveAll and cache the predicate?\n. This seems weird - isn't this adding to the List twice (since it's already been added as part of the ctor?)\n. Is this piece of code equivalent to declaring _currentCache as volatile? If so, could we switch to the keyword since the variable isn't directly accessed outside of this property\n. Could we make this part of the if (allFiltersCached) condition? It isn't immediately used\n. This could be a List<T>\n. It's been used in IHttpHandler and folks might be aware of what it means. Not super vested in the name though.\n. Also docs. @ajaybhargavb has to add dummy docs to everything as part of the cli transition, so lets ease his burden :)\n. Extra line\n. public bool ShouldCache { get; } = true; (to be consistent with everything else)\n. Assert.Equal(filters1, filters2); is equivalent but this seems to convey the idea better.\n. GetFilters_DoesNotCacheFiltersWithShouldCacheFalse or something along those lines?\n. https://github.com/aspnet/Mvc/pull/3910/files#diff-c6cea4c77c2eec6adaf1e9469190828eR28\n. I tried using the HtmlContentTextWriter here - however the encoder writes values as characters and we end up allocating strings for each of these. \n. @rynowak the cache identifier does not capture the values of include \\ exclude which is what we want to unique-ify on.\n. The variable was left over from the earlier iteration. I'll clean it up.\n. That would changed the cached value - we could add the staticUrl to the cache key which wasn't previously done.\n. No - PathString accounts for trailing slashes.\n. Sure\n. No idea - but this sort of emulates the RemoveEmtpyEntries behavior.\n. No idea?\n. Not sure - tests fail if I remove this - so I'm leaving this in.\n. I could do this as a follow up. The substring doesn't show up significantly in profiles as yet.\n. It's covered in the OrdersGlobbedMatchResultsCorrectly test.\n. I removed the test-only ctor but forgot to update these tests.\n. The earlier code modified the list in place (https://github.com/aspnet/Mvc/pull/3923/files#diff-5574912c61dd39d9a17a1c579ae2a7c0L322) based on the value of AppendVersion. Since we return the cached IReadOnlyList, I changed the code to calculate the fallBackUrl in place and encode it. Passing AppendVersion + IFileVersionProvider to this method seems weird. I could refactor this bit out in to a separate method in LinkTagHelper if it's easier to read.\n. These were written when VIrtualFileResult did work with the specified paths. We don't do anything interesting with it now.\n. This tested a Assert.ThrowsAsync without awaiting it. Awaiting it fails the test since we no longer throw DirectoryNotFoundException.\n. The tests were meant for behavior that FileResult used to support - https://github.com/aspnet/Mvc/commit/ddc74e5396c5a09e950c5d0029bc23d452bc7783#diff-79ab8ced19b9f57a37b11093d8533ed4L112 to detect if a path was rooted . That code's been removed and we pass the path as is (with the exception of removing the tilde).\n. Ok.\n. ControllerContext controllerContext\n. /// <inheritdoc />\n. (controller as IDisposable)?.Dispose();\n. Should this throw if the ControllerTypeInfo is null? GetRequiredService might throw, but it might not be a particularly useful message.\n. Using ServiceCollection might be a bit cleaner here.\n. Could you modify the tab indentation for this so that it uses VS defaults?\n. Tab to VS defaults.\n. new ControllerContext()\n. Why do you have to set this up to Dispose?\n. Indentation.\n. We should move the DefaultControllerFactory_DisposesIDisposableController test out in that case. We're testing the behavior of the activator, not the controller factory.\n. Then the verification needs to be if controllerActivatorMock.Release is invoked. You shouldn't need to dispose it.\n. Would we have a flag that would ignore missing doc comments when we set xmlDocs: true? If not, consider adding some docs here.\n. Could you add this as a note so it doesn't get optimized by accident in the future?\n. Is this the same as 2 * otherPage.Count < otherPage.Capacity?\n. > let's copy\n\nI don't know if blit will make policheck unhappy.\n. Should this be in an else?\n. Exception message.\n. Properties before method.\n. You could generalize the second condition into the loop if it's a common case if (i == _currentPage && _currentIndex == 0)\n. Wouldn't this (and the other Rent) require a try-catch to prevent leaks?\n. It would avoid the 0-char WriteAsync although I imagine that no-ops to start with.\n. :100: points\n. > /// An <see cref=\"object\"/> containing arguments to be passed to the invoked view component method.\nsounds just like \n\nArguments to be passed to the invoked view component method.\n\nwhich the user complained wasn't very useful.\n. New line prior to this.\n. readonly volatile\n. // Assert - 2\n. // Assert - 2\n. return metadata.ValidatorMetadata.Select(m => new ValidatorItem(m)).ToList();\n. Why change this?\n. We should keep ViewBag around to for issues such as https://github.com/aspnet/Mvc/issues/3991. No reason to change it here.\n. Would it be better to have a class here instead of struct with these many fields? (Is there a cost to the copy semantics at this point?)\n. :+1: \n. private readonly\n. Could you add a comment to this effect? \n. Missing the <returns> node.\n. Think we have method overloads for a slew of other Action methods too. Let's stick with this pattern.\n. Could we lazily initialize this? We could avoid allocating the HashSet if this feature isn't used. \nC#\npublic void IgnoreSection(string name)\n{\n   ...\n   if (_ignoredSections == null)\n   {\n      _ignoredSections = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n    }\n    ...\n}\n. Could you verify that content written by the page - inside the delegate for CreatePage - gets written out (and not ignored?)\n. One more test that verifies that IgnoreSection does not affect EnsureRenderedBodyOrSections for sections that aren't ignored?\n. hasBindableProperty = true; (shouldn't need to or it) \n. Remove the doc comment too.\n. Could we refactor this into a separate method - this piece of code is repeated 3 times over.\n. var\n. Maybe I'm not reading this right - but doesn't this always break (either in the loop or in the if?)\n. return true; and you should be able to remove the outer if with a return false\n. We could avoid this substring although it makes the EndsWith check a lot messier.\n. Will undo prior to merging this in.\n. cc @pakrym \\ @davidfowl \n. Wouldn't you need this for coreclr? I haven't switched the dnxcore tests to use dotnet test as yet.\n. Sure, which we'll do it in a follow up. This one gets net451 to build and run tests using dotnet.\n. FirstOrDefault? We don't actually care if there's more than one IControllerTypeProvider, do we?\n. Not really. It's the queue for bfs we perform.\n. Could we represent it internally as StringSegment? The idea being we wouldn't have to create strings for intermediate (not Visible) nodes?\n. public bool Equals(BindingSource other) => string.Equals(other?.Id, Id, StringComparison.Ordinal);\n. This should probably be FirstOrDefault.cc  @rynowak \n. Should we throw a nicer exception in that case? SingleOrDefault's message isn't particularly intuitive. \n. Regardless, this change is fine as is.\n. In this test, you'd do something along the lines of \n``` C#\npage.PreviousSectionWriters = new Dictionary\n{\n           { \"section1\", _nullRenderAsyncDelegate },\n           { \"section2\", _nullRenderAsyncDelegate },\n};\npage.IgnoreSection(\"section1\");\n// Assert section2 is rendered.\n```\nJust to make sure we don't do something bad and ignore all sections in general after a IgnoreSection is called.\n. The suggestion was to add a v.WriteLiteral(expected); inside CreatePage and do a Assert.Equal(expected, page.RenderedContent); at the end. The intent is to verify that it's suppresses RenderBody content and not any of the content written by the layout.\n. It's a bit messy to deal with Merge, MarkFieldValid (for a previously not-visible node), Remove etc. I could do lazily evaluate so any of these operations would clear the count and we can rebuild the count once we request for it.\n. Not sure how to go about this - the equality comparison for item.Value will always return false since we create a copy of the one provided to us in Add or indexer. Should we just have this return false?\n. Same goes for Remove(KeyValuePair<string, ModelStateEntry>).\n. :+1: \n. Could do this recursively to avoid the enumerator allocation. Not sure how much we care about CopyTo.\n. :+1: Fixed\n. Yes. Do you have suggestions for a better name e.g. SegmentKey \\ SuffixKey?\n. Nevermind\n. We consume a portable class library (one of the CodeAnalysis packages) and consequently have to do this.\n. Could we move this to DependencyModel? \n. _options?.Count > 0\n. Would the user have an expectation that triggers created in inner contexts cause the outer cache to expire? Would documentation suffice to explain that this wouldn't work for IDistributedCache?\n. This will get you :100: points\n. License header.\n. return _memoryCache.Set(key, result, options);\n. Two levels of nesting seems like overkill. Plus the type is perfectly usable outside of the enumerable.\n. _memoryCache.Set<IHtmlContent>(key, result, options);. This API is kinda awful to use.\n. Looks like this could you'd need something like HttpResponseStreamWriter to avoid creating large strings here. @rynowak, would you recommend using that type here?\n. formatting.\n. You could create a ByteArrayHtmlString and simply write the encoded bytes to the output as part of the IHtmlContent.WriteTo call.\n. && on previous line.\n. Does it need to do && distributed?\n. TryGetDistributedService? \n. Could we light some of these properties up conditionally (i.e. have them throw at runtime if you're using the wrong cache?)\n. await Cache.SetAsync(key, output.GetChildContentAsync, cacheContext);\n. If the idea is to only ever use this for CacheTagHelper, could we pass in the TagHelperOutput here (instead of the Func?)\n. > discriminate\n. Unrelated to your PR, but could you indent it to VS defaults (4 spaces?)\n. AddCacheTagHelper? The plural feels weird.\n. You could add a second ctor which accepts the IDistributedCache. The DI is expected to use the longest ctor that works:\n``` C#\npublic HybridHtmlFragmentCache(IMemoryCache memoryCache)\n{ }\npublic HybridHtmlFragmentCache(IMemoryCache memoryCache, IDistributedCache distributedCache)\n{}\n``\n. Since this instance is instantiated by the DI it would call the right constructor. It would avoid theIServiceProvider.GetServicecall that @davidfowl loves to hate.\n. This is used for running tests from VS \\dnx testin command line for dnxcore50 tfm. I'll follow up with another PR that switches to the CLI test runner which removes dnx dependencies in command line builds.\n. Will revive this in a follow up - https://github.com/aspnet/Mvc/issues/4140\n. This + the change in FrameworkSpecificHelper is to let the test work in VS.\n. Couldn't you simply do a null check instead -if (IsDistributedEnabled() && _distributedCache == null) { throw .. }?\n. It doesn't have to. It would set the property on the context which would throw if you're using a feature the backing cache doesn't support. \n. No, using the longest matching feature (https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs#L542). It'll construct it withIDistributedCacheif the service is registered, otherwise pick the constructor with the singleIMemoryCacheargument.\n. Does theM:indicate a method?\n. > The full name of the model expression.\n. > The.\n. Unrelated, but could you change this tomodelState?\n. We're not ordering by name. There is no implicit ordering between root,Property2, andProperty3(they use the default order). We ignore the order attribute on sub-properties so there isn't specific ordering betweenProperty3.OrderedProperty2,Property3.OrderedProperty3andProperty3.Property2`.\n. > Do not depart from the order entries are added to the ModelStateDictionary.\nShouldn't the caller ValidationHelper in this case - re-sort things in the order it expects rather than expect the dictionary to preserve order? Preserving insertion order isn't a behavior guaranteed by dictionaries in general.\n. Undo?\n. Oops.\n. readonly\n. Ctrl K - D (remove extra whitespaces)\n. But you won't get free remove and sort usings anymore :crying_cat_face: \n. ExecuteNetStandardAppOperation\n. NETSTANDARD_CUSTOM_DEFINE (doesn't really matter since it's just a token)\n. Fixed in the commit.\n. Thoughts on this hack? \n. This isn't sorted. Fixing this would be a lot more painful though.\n. In which case, yes. I assumed he missed it in both places.\n. Yeah, that's correct. I'll add a comment explaining what the structure looks like.\n. If it ended in a delimiter. The if (current != null) { current.Key = key;} should be outside the loop.\n. This might need to be changed. I assumed ErrorCount kept track of all errors, but it's specifically errors added via AddModelError. So this change is incorrect.\n. I'll have a look.\n. Workaround for https://github.com/dotnet/cli/issues/1694. Should go away once we have a resolution for it.\n. This is some quirky behavior related to - https://github.com/dotnet/roslyn/issues/1920. If we return the SourceFilePath here, it ends up not allowing breakpoints to be set unless you have the Allow source files to be different... flag set in the VS.\n. Sure.\n. :+1: \n. It made debugging in the Modules window a tad simpler. I'll get this tracked in a separate work item\n. cc @Eilon \n. Should this use a TaskCompletionSource? Going by https://channel9.msdn.com/Events/TechEd/Europe/2013/DEV-B318 which recommends libraries against using Task.Run.\n. Null check for key\n. Why not TrySetResult on the TCS instead? Something like this:\n``` C#\nretry:\nTaskCompletionSource tcs = null;\nif (!MemoryCache.TryGetValue(key, out task))\n{\n    tcs = new TaskCompletionSource();\n    MemoryCache.Set>(key, tcs.Task, options);\n}\nif (tcs != null)\n{\n    // Create cache entry\n    try\n    {\n        content = await GetChildContentAsync();\n        tcs.TrySetResult(content);\n    return content;\n}\ncatch (Exception ex)\n{\n    tcs.TrySetException(ex);\n    throw;\n}\n\n}\ngoto retry;\n``\n.protected internal. Could we make the storage support non-string keys? It'd be nice if we can change this code to use a type withIEquatable<>` to avoid the string allocations.\n. Seems like something we should log (if we don't plan on throwing here)\n. > Doesn't this mean \".Prop\" and .Property will compare equal?\nWouldn't the lengths be different?\n. @rynowak is running this by @Eilon. We could potentially remove some of this complexity if we targeted a IReadOnlyDictionary and the only way for users to add content to the dictionary is via the specific APIs we expose.\n. Ok. I guess we can look for non-nested types.\n. cc @pakrym \\ @davidfowl. Is this a terrible thing to do for an assembly we are shipping?\n. We have a test that verifies if a list of package names we have is near identical to this assembly's dependencies. In the past we used the ILibraryManager to discover these dependencies.\n. We don't look at versions at all in our provider. I could change it to some random version if that makes it easier to grock. \n. I guess I can add this flag to the test and exclude any test assembly.\n. WebApiCompatShim gets low traffic for code changes. Is it ok to remove VS + DNX test support for this?\n. cc @Eilon \n. It's a test project, so it shouldn't matter. Plus I think System.Threading.Tasks is a real fx assembly so it's fine to list it unlike System.Runtime.\n. Yup. Fixed in actual commit.\n. We are ok with this design. With the ability to mutate the ModelStateDictionary removed (since it is now IReadOnlyDictionary) - there isn't a scenario where a user would have to create this type.\n. Would using ActivatorUtilities with a null IServiceProvider work? Alternatively could we add an overload to it that supports it? Seems like we might be able to reuse a bunch of code if we do that.\n. We use in the ValidationHelper to locate subproperties. The alternative would be to construct the property name from ModelMetadata as we traverse the tree.\n. This actually puts the items in the right order - Salary appears later in the class than JoinDate\n. Can you move this check to the setter?\n. Oh nevermind. You can instantiate it without ever invoking the setter\n. Formatting (space after while)\n. New line preceding this.\n. var\n. Can you add the wait duration here so the test doesn't hang forever in case something goes wrong? ~5-10 seconds should be good.\n. Use VS default indentation (4 spaces from [ on previous line).\n. Does QueryString conflict with other types? If not, move the Http. to a using.\n. Indentation.\n. Shouldn't have to Callbase to an interface\n. storage.Verify();\n. Didn't see the Times.Never. In which case, remove the Setup \\ Verifiable call from Line 318\n. Remove this since you're using .Verify later on.\n. Indentation.\n. Couple of other instances of this in tests that follow.\n. var\n. var all day every day.\n. Indentation.\n. Sure.\n. It's used from TryAddModelError.\n. We switched the indentation rules half way thru :8ball: \n. We set the MaxAllowedErrors. The other properties get computed as we copy records from the other dictionary.\n. Made an update to how we store the keys. In the previous iteration, we kept the '.' prefix. So property accessor nodes would appear as .foo. This made it tricky to search properties by name. I drop the . prefix now as part of key creation, so  foo.bar[0].baz[\"qux\"].property will appear as foo, bar, [0], baz, [\"qux\"], property\n. Yup - build resx\n. You might need to delete the .build directory. We made a bunch of changes to how we procure and layout the build scripts.\n. @davidfowl \\ @pakrym  Yeah, this is a guess at best. We could add an API to DependencyContext that says it doesn't have compilation context which might be nicer. Thoughts?\n. Which is sort of what ~_applicationReferences.Value.Any() represents. But it's a bit lossy compared to directly querying if the app is missing that flag in the project.json.\n. Well, wouldn't it NRE though?\n. It's used in ModelStateDictionaryExtensions.Remove<TModel>.\n. Based on our discussion, it sounded like we were ok with not having any sorting behavior with collection properties (either at the top level or for sub-properties). cc @Eilon ?\n. It's a continuation of the previous line.\n. We tried that change - https://github.com/aspnet/DependencyInjection/commit/99f4f17a88277c4edfabd988ae994db79c1b17a7 - but ended up reverting it because of odd CLI issues + issues with restore. I'll work on bringing it back soon.\n. No, that's not problematic. I added a unit test to cover this case.\n. This seems like a simpler solution to doing all that. It doesn't null-ref and throws the ArgNull.\n. Added a couple of unit tests to cover adding and retrieving keys.\n. That's what the debugger uses to format property values in to.\n. Fixed.\n. It's going to be faster to compare lengths first than run through the string.\n. In the event you have a collection type with properties - there's a test for it.\n. We could - but we'd have to expose StringSegments or perform susbtrings to get to those keys. We didn't want the former and this removes the need for the allocation in the latter.\n. > At least, the methods that will return ModelStateEntrys that were never explicitly added should have comments making this clear.\nOk.\n. I think it's a consequence of how model binding works (depth first).\n. Could we do {typeof(PersonControllerType).FullName}.{nameof(PersonController.GetPerson)} here?\n. This check shouldn't be required. Calling stringValue.Replace would no-op if it doesn't have a quote.\n. Why not use the property directly?\n. Maybe the assembly name too. var assemblyName = GetType().GetTypeInfo().Assembly.GetName().Name; (in case this assembly ever gets renamed)\n. Ahh gotcha. Fixed.\n. It's settable though, isn't it?\n. Huh?\n. This was in the old code too.\n. I'm leaving this as is. The dictionary has no guarantees of ordering and I think it's fine the way we have things now. If we need ordering for BadRequest we should change it there.\n. The type is internal now. So we can't expose it unless we make our private implementation public.\n. Breaking change in DependencyContext. It returns null now if an app has no defines (instead of an Empty sequence).\n. Done.\n. Couldn't we remove this?\n. Need a new line here.\n. Potential format?\n. public IList<ApiResponseFormat> ApiResponseFormats { get; set; } = new List<ApiResponseFormat>();\nThen you wouldn't have to document the ctor.\n. Could this go in a const OKStatusCode\n. Could we make it an explicit implementation just so it doesn't show up in the regular API surface?\n. You could do\npublic static TheoryData ReturnsActionResultWithProducesAndProducesContentTypeData to avoid having to split this\n. ``` C#\nAssert.Collection(\n   description.SupportedResponseTypes.OrderBy(r => r.StatusCode), \n   responseType =>\n   {\n      Assert.Equal(responseType.Type, typeof(Customer));\n      Assert.Equal(200, responseType.StatusCode);\n   },\n   ..\n   );\n``\n. Could you use collection asserts in a bunch of these places? Alternatively don't abbreviateresponseFrmt.\n. Who's setting this?\n., StringComparer.Ordinal);. The API is already broken due to the change in parameter, butGetBinderin case you want to use the same name as Mvc5's binder provider.\n. Do we need to clone it? Seems unlikely that this would be mutated in the common case where it's created by theComplexTypeModelBinderProvider. Nope, I'll remove these.\n. Not going to suggest we do anything in this PR, but do we want to try and consolidate binder providers that match on ModelType (if modelType == typeof(X) return y();)? I imagine it could be mildy useful for user scenarios too where they want to provide binding for a specific type.\n. Extra line\n.Debug.Assert(stack.Count > 0);since we're assuming it's non-empty.\n. This doesn't sound right.\n. Doesn't look like this is used\n. DoesAssert.IsType>(result);not work?\n. Does it work when it'sIList?\n. Empty line after\n.Assert.True(false.... Assert.True\n. >nullif the ...\n. You could skip this since it's not public API anymore.\n. :100: \n.return !string.Equals(...) ...;\n. Seems like an odd API name. Couldn't we have regular ctors for this instead of factories?\n. separate lines.\n..Add(_key, StringComparer,OrdinalIgnoreCase);. Need to use the same comparer as theEqualsmethod\n. Could we useStringTokenizerhere? Might avoid the list + array allocation.\n. Couldn't we just port this? The API doesn't seem significantly different and it avoids breaking people again.\n. Much nicer if you useAssert.Collection(services, service => { ...especially if new services get added or the sequence gets re-ordered.\n. Is this intentionallyinternal?\n. Could this go on the previous line?\n. Ctrl k - d?\n. Does this need aStringComparer.OrdinalIgnoreCasecomparer?\n. But what ifFormMethod.Get.ToStringreturnspost?\n. Unrelated to this change - shouldn't this verify the actual value (e.g.Assert.Equal(4, e.Precedence);) rather than verify it against the computed value?\n.AddRouteValue- also the comment above needs to be updated.DenyKeyno longer exists.\n. Can you move this intoAddIfNotKeys(string key, string value)? We repeat this several times in this type.\n.StringComparer.Ordinal.if (!action.RouteValues.TryGetValue(TreeRouter.RouteGroupKey, out value) && string.IsNullOrEmpty(value)).GetNormalizedRouteValue_ReturnsValueFromRouteValues_IfKeyExistsInRouteValues. It's sometimes null in unit test scenarios. Although I could remove this check now that we only create it when we compile and not as part of the ctor.\n. Nope, we cache the result of it (_applicationReferences) the first time we need to compile.\n. This is a cache specific type (CompilerCacheResult) and not the actualCompilationResultso this seems ok.\n. > Get a delegate that creates an instance of the.\n. Yeah. We could cache this as part of the compiled expression.\n. That'd be trickier because KoreBuild would need to know of said new directory. It specifically looks forsrc,test, andsampleswhen building.\n. They test the exact same page. All we care about is to ensure that the Sandbox compiles and runs fine.\n.public static readonly._options = options.Value;. Why change this?\n. Nevermind :)\n. Couldn't this declared inline like before?\n. Use  a format argument here and specify it in the calling code vianameof.\n. Does it requireToArray?\n.var areaViewLocations = new [](shouldn't needstring)\n. Can you use different strings than the defaults here? \n. We could modify the creation ofCompilerCacheResultto pass in the path and construct the result ofGetPageFactoryas a compiled expression.\n. Isn't this always going to be a property? Why look for a field?\n. This was meant to be analogous to ControllerActivator but we don't give the user a type now to do anything useful. I'm ok with removing this. cc @Eilon for API change\n. :eyes: \n. Nope. Just calling out that this used to be an extensibility point. This allowed \"decorating\" the page before returning to the view engine if you derived from this type.\n. But it's on the interface. Why would it not exist on the type?\n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor/IRazorPage.cs#L39\n. Formatting. (space before and after-)\n.IsValueTypewould be true for nullable types. Should we unwrap it and avoid the call toActivator.CreateInstance` here if it's one?\nFor instance:\n```\nif (parameterInfo.ParameterType.GetTypeInfo().IsValueType && Nullable.GetUnderlyingType(parameterInfo.ParameterType) == null) \n{\n   return Activator.CreateInstance(parameterInfo.ParameterType);\n}\nreturn null;\n``\n. Just perf. The behavior ofActivator.CreateInstance` is correct for nullable types.\n. > A CORS policy named '{0}' could not be found.\nperhaps?\n. Could you add a test for this? Seems like we're missing DiagnosticSource tests for this.\n. Could you write a test for this change?\n. Remove?\n. Nice catch.\n. Formatting (untab this)\n. The test site is set up so that the only AssemblyPart that was added was for the ClassLibrary that it was referencing. I added this so as to not perturb the arrangement.\n. We can remove this now.\n. It would rely on DependencyContext consistently casing this (including binaries that are compiled on different machines). Probably safer to leave it as is. Original code is here - https://github.com/aspnet/Mvc/pull/4672/files/549d113b37a6baed6871dee4be7721da0df6301e#diff-96cb3f263eeedd62fed8e95c300bb8b0L253\n. This site's application manager is wonky because of this line - https://github.com/aspnet/Mvc/pull/4672/files/549d113b37a6baed6871dee4be7721da0df6301e#diff-8b7f7cd9709495478436a4d926a77252L26. Other apps don't require this.\n. The compilation context \\ DependencyContext for this app isn't used. We use the one from the ClassLibrary. This enforces the expectation.\n. https://github.com/dotnet/cli/issues/1694 was the root cause for this bug. ResolveReferencePaths used to throw if you had any type: build dependencies\n. We'd have to make Mvc.Core depend on Roslyn \\ DependencyModel? Is that fine by you?\n. It's not the nicest API to work with. See https://github.com/aspnet/Mvc/pull/4672/files/8651e71758e11828e66b9175e999f938fb6a3c2e#diff-c1746f8559d5a5341fe8a1b87c65d5daL304. We could boil this down to reference paths or push the CLI to make this API easier to construct.\ncc @pakrym \\ @davidfowl \n. Not entirely sure. Maybe a utility method that constructs it given reference paths?\n. CandidatesResolver (typo)\n. Is the sequence of RuntimeLibrary guaranteed to be unique? ToDictionary will throw if two or items have the same key.\n. StringComparer.Ordinal(IgnoreCase)\n. Actually why create the lookup at all? Looking at the code, it would suffice to have the list here.\n. Would this cause us to perform discovery inside Mvc assemblies?\n. Filed https://github.com/dotnet/cli/issues/3157. I'll leave this interface be in that case. \n. Ahh nevermind. I missed https://github.com/aspnet/Mvc/pull/4685/files/a780921ca46ecd6f257b0c85793cd781ac559f8f#diff-c1d05e31da7395607e6b98cd37032d1eR110\n. In their case, adding a ApplicationPart  \\ AssemblyPart in Startup should suffice:\n.AddMvc()\n.ConfigureApplicationPartManager(manager => manager.ApplicationParts.Add(new AssemblyPart(typeof(MyTagHelper).GetTypeInfo().Assembly);\nThis test website was specifically trying to avoid adding the website as an ApplicationPart which is why I had one of these.\n. It should start working once this goes in. Prior to this change, we weren't looking for items in the assembly. It does bring up one issue - if the assembly was compiled without preserveCompilationContext we'll continue to ignore it. Perhaps we should add just the assembly if DependencyContext is null. We'd have to change the heuristic that tells people to add preserveCompilationContext to their application, but it might get views to compile more often.\ncc @rynowak \\ @davidfowl ?\n. Wouldn't it basically be the same type at that point? \nEdit: We really don't need the type at all that point. We could simply expose a sequence of reference paths (I suggested that earlier).\n. I think nuget usually doesn't allow a non-prerelease package to depend on a release version. Would this be problematic when Mvc RTMs? cc @emgarten\n. It's a gesture on the user's end that might be easy to miss\n. cc @JamesNK\n. > // The build system compiles every file under the resources folder as a resource available at runtime\n\n// with the same name as the file name. Need to update this file on disc.\n\nSound good?\n. We could move this to Line 209. Avoids the null - coalescing if we aren't going to ignore it for id attribute.\n. AddAttributes_WriteEmptyAttribute_WhenValueIsNullOrEmpty or something like that?\n. Perhaps this would be WriteTo_WriteEmptyAttribute_WhenValueIsNullOrEmpty and move it Line 112 closer to the other WriteTo test?\n. Did you mean ICompilationLibrariesProvider?\n. The intent is to allow users to add additional compilation libraries\n. There's two other places where we use IServiceProvider, but there's slightly more involved since they use GetService instead of GetRequiredService to get an optionally injected feature. We'd have to use constructor overloading to make those work correctly.\n. All of this is just untabbed. The diff is a bit messed up. The split view helps a bit\n. https://github.com/aspnet/Mvc/issues/4736\n. > sudo add comment\n. cc @dougbu \n. @rynowak \\ @javiercn we're adding an additional guard against ResolveReferencePaths failing. This happened in @dougbu's scenario for https://github.com/aspnet/Mvc/issues/4497 where the assembly was compiled with preserveCompilationContext but is dynamically loaded at runtime. \n. @rynowak I don't think there's much a user would be to able to do with the exception. I'll file a follow up on the CLI to figure out guidance on dealing with this.\n. Spoke to @pakrym - he says as long as the dependencies are in the application base path (bin dir), ResolveReferencePaths should behave correctly.\n. They're going to address those two. @davidfowl and @pakrym were discussing a plan for it. @pakrym could you update #4497 with the CLI issue tracking your change?\n. IOptions<MvcViewOptions> mvcViewOptions\n. Shouldn't need to initialize these two variables.\n. private static\n. Does this have to be protected virtual? It's not the most convenient of extensibility points. If it is, we should document the type + method.\n. In fact overriding it isn't useful at all when IHttpSendFileFeature is available. So extending it is kinda broken. \n. Why did this change? \n. IsASCII (it's an acronym)\n. Should we cache the fact that Combine was called? The current code will always call Combine in the event it returns null and a Policy isn't set.\n. That seems problematic. The Task could be executing after the jsonReader has been disposed.\n. See Encoding.ASCII\n. @dougbu, looks like https://github.com/aspnet/Mvc/issues/3587 is fixed \n. I revived old code which already had this.\n. This might also happen on machines without the COM component installed. It's not mono specific.\n. It's a bit more than that - we have to look for the SymWriter component which is not necessarily always present.\n. Let me check if that works well.\n. Could you copy description from the properties?\n. Is there benefit to caching EffectivePolicy? Doesn't seem like CombineAsync has per invocation data to work with.\n. Fair enough. I wasn't sure what the expectation was for the IPolicyProvider. Most Mvc provider types cache non-request specific things once and re-use the result, hence the question.\n. I'm not sure how to repro this. I tried this Win7 \\ Win 10 machines without VS and it had the SymWriter component installed (does Office install it?). I'll add a reference to DiaSymReader just as well. If that's the case, can we return false if it's Mono?\n. formatting: extra space after handle\n. if (!urlHelper.IsLocalUrl(destinationUrl)) or move the assignment after the conditional.\n. Could we just change this to say \"Only allow local urls\"? What is considered a IsLocalUrl depends on the implementation of IUrlHelper.\n. Similar to the previous comment. Something like resolve local url to absolute urls.\n. along with those discovered by MetadataReferenceFeatureProvider\n. GetCompilationReferencesPublic? I think we have a precedent to use that naming convention elsewhere.\n. ~~constrains~~ constraints\n. candidates\n. r or routeInfo instead of ri?\n. It doesn't look like we expect RouteInfo to be null elsewhere in this class. Do we need the null checks here?\n. Should MapOutbound have an overload without IRouteHandler to support this?\n. Can we remove imports from this project if we update to this version?\n. remove\n. We usually use one lettered (throw away) names or full names. ri seems like an abbreviation. Anyway, not super concerned about this.\n. I guess. Could you use the more it in a more convention way in that case:\nif (x == null)\n{\n   return y == null;\n}\nelse if (y == null)\n{\n  return false;\n}\n...\nxors are a bit uncommon in our codebase.\n. We could remove the async \\ await here.\n. Maybe a better name for this? _RejectsIfConstraintAtAnyOrderRejects?\n. Could you merge the two ifs?\n. ExplicitResponseTypeDecoration_WithExplicitDefaultStatus_SpecifiedViaProducesAttribute? Took me a while to figure out what this meant.\n. Leaving as is (just to avoid random failures on CI agents).\n. We'd have to specifically look for\n```\n                                    <ol start=\"2\" class=\"highlight\">\n                                            <li><span>  throw new Exception(&quot;Error from view&quot;);</span></li>\n                                    </ol>\n\n```\nMight be not the nicest thing to include the formatting for the diagnostics component in our code. We can add coverage to ensure line mappings are correct in the diagnsotics page\n. We end up having to #ifdef the usings too. So it ends up about the same number of #ifdefs \n. Could you use ExceptionAssert.ThrowsArgument here?\n. Is this still needed?\n. Totally unrelated to your change, but could you fix up the indentation on this line while you're touching this line of code?\n. It's a public extension method for a public type - no harm adding docs for this.\n. <returns>The <see cref=\"IMvcCoreBuilder\"/>.</returns>\n. I can make this change as part of merging this - you don't need to assign this to a variable if you don't intend on doing anything with it. I'm surprised the compiler doesn't warn here.\n. var all day every day\n. if (filter?.GetFormat(context) != null) for :100: points\n. Sorry, I don't entirely follow what the #define does in this case.\n. An alternative might be to return from the for loop, instead of a break (which avoids the need to define this variable). It does seem ever so slightly harder to read though.\n. Doesn't work unfortunately:\nNot found: SOME_TEST_DEFINE\n      In value:  String[] [\"DEBUG\", \"TRACE\", \"NETCOREAPP1_0\"]\n. Unrelated, the foreach loop below could be converted to a for loop.\n. Could you call this out in the test (saying it's specifically done this way to ensure 4960 works)?\n. is ~~scoped~~ transient\n. > // Arrange, Act, Assert\n. Might be better to add a message to the loader exception you added and verify that. Also, did we not change the text for this string to say \"Loader Exceptions\" (with the space?)\n. private static readonly string\n. In theory there's only one we generate. Probably needs some to be hardened against stale binaries.\n. Or better yet, look for the well known output name of the dll and use that.\n. We've assembly loaded it so consequently it's locked.\n. MemoryStream.ToArray() and Resource.Data is of type List<byte>. Hence the gymnastics. \n. Sure, we could make it so that it always has all the values it needs.\n. Yup. Probably need to normalize the slashes as part of precompilation.\n\n. Yup, that's the plan. Since it technically is very low cost discovery, the hope is that it doesn't have a significant startup cost. The gesture to precompile is entirely optional.\n. Does that work for this type? It doesn't look like a value type.\n. Because we're terrible - https://github.com/aspnet/HttpAbstractions/issues/561\n. Yup. @davidfowl has some plans for a build manager like thing too.\n. I'm going to look into this issue. It's related to https://github.com/aspnet/Razor/issues/803 and I didn't want to change the semantics without figuring out the right thing to do.\n. Ahh, I thought .Value() threw when you didn't have a value. I can change this.\n. Do we want to consider doing the feature collection change prior to this? (https://github.com/aspnet/Mvc/issues/4760)? Seems really bad to add an interface every time we introduce new work here.\n. Reducing the overall file size \\ deployment size. We could make it an opt-out feature (as opposed to opt-in) if we care about it one way or the other.\n. Yup, working on removing some of these dependencies.\n. Will do once I figure out what the repo is for this code.\n. The self sufficiency aspect of it is what makes it terrible.\n. We do the weird thing where we try to preserve the relative path which makes it slightly hard to express this as a generic extension method. I could call this type something different if you'd like.\n. There's a ReplaceSyntaxTree (singular) we could do, but ideally that would be part of the loop. The issue there is that we change the semantics of the rewrite ever so slightly (you'll see a rewritten tree if you are looking at other trees as part of the rewritter as opposed to the original tree).\ni.e.\n```\nforeach (var tree in compilation.SyntaxTrees)\n{\n    var semanticModel = compilation.GetSemanticModel(tree, ignoreAccessibility: true);\n    var rewriter = new ExpressionRewriter(semanticModel);\nvar rewrittenTree = tree.WithRootAndOptions(rewriter.Visit(tree.GetRoot()), tree.Options);\ncompilation = compilation.ReplaceSyntaxTree(tree, rewrittenTree);\n\n}\n``\n. I think this has to beSHA256CryptoHashProvider- https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Common/CryptoHashProvider.cs#L107\n. @rynowak thoughts on this?\n. @Eilon as discussed we'd end up with a fork in the code when we see this interface. Feel free to come up with a better name,\n. Unfortunately we have to thread the relative path all the way here. Seemed cleaner to flow the context in entirety rather than reuse the existing method and pass in the relativePath as part of the invocation. Let me know if you'd us to not introduce additional surface area.\n. I'll move these in to a different PR. \n. Do we have a preference over showing the relative path versus full path in the error page? Right now we show the relative path. I think full paths (when available) are probably better here.\n. No, look for special attributes that tell us the method to invoke (in lieu of the command line argument).\n. We need to fill in the else eventually.\n. This will change once we have the BuildManager code @cjqian will write. I'll remove the interface, but we'll leave the cast for now).\n. Not entirely sure it applies here - we're not using the output path from the xproj. It's something the user optionally passes in.\n. Having the developer exception page in production is pretty bad. AFAIK, the database error page lets you scaffold too, so you'd be in pretty bad shape.\n. We need both pieces of information, the full path for line pragmas and relative path for figuring out _ViewImports. The current API doesn't allow this.\n. Might be a question for @DamianEdwards, but would it be better if we had an interface that we discovered instead? There's the issue that we wouldn't be able to new it up, but are there other downsides to it? It does make the programming model for this a bit less magical.\n. I'm going to try the interface approach. EF has something similar so we have a bit of precedent around this. I'll run it by @DamianEdwards once he's back. If he feels strongly about keeping a static method we could revive the code.\n. Would it be useful to check if the value inStringRouteConstraintis the original value (and not escaped in any way)?\n.MapAreaRoute_UsesPassedInAreaNameAsIs(or something like that. (DotCheck doesn't necessarily say what this means).\n. Not really. This is the path at the runtime dir location. We'd have to recalculate it here. It's much easier to assume the tool has sorted this out and passed in the right value.\n. Could you add a comment saying why we're doing this? Specifically this exception?\n. The only issue with that is we'd have to account for the TFMs the library is targeting. i.e. if your project is targeting net451 and netstandard1.3, we'd need to ifdef for those two. Failing which on net46, net461 which have the bug we'd use the netstandard code path.\n. This works pretty well in the publish + post build scenario. Publish builds first to the default locations for a given configuration \\ framework option. Prebuild is too early since no binaries exist at this stage and we'd be responsible for the build. This gives us a way out which works well for our primary scenario.\n. Will bring this back once we're ok with the design.\n. Placeholder types until @cjqian gets around to this.\n. Name  \\ design suggestions?\n. We need to pass the key file through.\n. Isn't this just a container for stuff used for complication?\n. I don't want to define the type at all in release builds. AFAIK, you can't stick that attribute on a type.\n. We calculate the output path which is where publish would have dropped the output to. We don't need the build base path in this case.\n. Sure.\n. Sure. I was initially was playing around with trying to codegen the type factory we create in https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCacheResult.cs#L47 which is why I came up with this name. We could still do that here.\n. It doesn't, but we're only ever dealing with Razor view types and the view engine pipeline does not support instantiating generic types.\n. Yup. It'll come from the dispatch command (since we've already parsed the project file).\n. I kept expecting it play...\n. Yeah, in my sample, I added it to Startup. It made it more natural to take the code you had inConfigureServicesand move it into this one.\n. It might not be entirely too difficult. We could prefer types implementingIMvcBuilderConfigurationoverIMvcCoreBuilderConfiguration.\n. Should we name the typeIMvcDesignTimeBuilderConfigurationin that case? Would be nice to call out that the interface is specifically meant for design time.\n. I use these in codegen, so they have to separated.\n. See https://github.com/pranavkm/MvcPrecompilation/pull/1/files#diff-9a30a8c3e2e7e199409cca66c004b6bfR14\n. We have to invoke it from precompilation. I'll remove the method from here, or just leave it as part of the method but call the new static method instead.\n. We use case insensitive lookups in other view lookup places (for instance theCompilerCache). Sadly the case sensitivity here wouldn't make a big difference.\n. Sure, let's figure out the naming bit in a second iteration.\n. Yup.\n. Is the plan to move these changes to a separate sample?\n. Unrelated, but could you add a null check here?\n./// ` should suffice. You could add this as a remark to the type if you'd like, but that doesn't seem particularly necessary.\n. We should use ctor overloads for this instead of using GetService:\n``` C#\npublic MvcDataAnnotationsMvcOptionsSetup(IValidationAttributeAdapterProvider validationAttributeAdapterProvider) : this (validationAttributeAdapterProvider, null)\npublic MvcDataAnnotationsMvcOptionsSetup(IValidationAttributeAdapterProvider validationAttributeAdapterProvider, IStringLocalizerFactory localizerFactory)\n{\n ... \n}\n``\n. Null checkoptions.\n. Assignments after all the null checks.\n.readonly. Could you stashJsonSerializerSettingsinstead of the accessor?\n. Can't change this. It's a non-internal type.\n. cc @rynowak \\ @Eilon - suggestions?\n. You'd need two constructors here sinceIStringLocalizerFactoryis optional, one with and one withoutIStringLocalizerFactory.\n.[Obsolete(\"This type is for internal use and will be removed in a future version.\")]. Could we also add tests for this (with the default ServiceContainer)? This should have failed the setup ifIStringLocalizerFactorywasn't added to the container.\n.Assert.Collectiontakes care of the Count requirements. You can drop this.\n. Could we have ViewComponents with multiple params, withobjectparam type and one withIDictionary. The last two are special cases in theIsAssignableFrom\\PropertyHelperscenarios. The first one covers the alternate code path inGetArgumentDictionary. Lets get this in a separate commit.\n. Ordinal~~IgnoreCase~~\n.IEnumerable\\IReadOnlyList?\n. Add a null check fordescriptor`. \n. Formatting. We always use braces and put each statement on a separate line:\nC#\nif (!IsViewComponentDescriptor(descriptor))\n{\n  return null;\n}\n. ViewComponentNameKey or something like that?\n. Could this be done in the calling code? Doesn't seem like you need a separate method for this.\n. Generally don't use the lambda syntax when the code gets past a single statement. Just use a regular method body here.\n. License header.\n. private readonly IViewComponentDescriptorProvider _descriptorProvider;\n. Null check all the things!\n. This can be removed.\n. This can be removed.\n. Assert.Same\n. Wouldn't you want to derive from ChunkVisitor (the type) here? \n. Can a chunk be both a TagHelperChunk and a ParentChunk? If not, we could use a is check here instead to make it easier to follow where this code ends up in.\n. if (chunk is TagHelperChunk)\n{\n   var tagHelperChunk = (TagHelperChunk)chunk;\n   tagHelperChunk.Descriptors = Decorate(tagHelperChunk.Descriptors);\n}\nelse if ...\n. decoratedDescriptor?\n. Formatting: : goes on the next line.\n. Remove\n. Would it make sense to TryGetValue the ViewComponentNameKey and skip the descriptor if the property doesn't exist? Basically avoids looking up the key twice in the dictionary + fewer Linq calls.\n. Might want to prefix this with global::\n. Create~~Dummy~~CodeGeneratorContext\n. C#\nreturn new List<Chunk>\n{\n  GetTagHelperChunk(\"Baz\"),\n  GetNestedViewComponentTagHelperChunk(\"Foo\", visitedTagHelperChunks),\n  GetViewComponentTagHelperChunk(\"Bar\", visitedTagHelperChunks),\n};\n. ToLowerInvariant()\n. ToLowerInvariant also on Line 128\n. namespace Microsoft.AspNetCore.Mvc.Razor.Host \n. Isn't this a list? You should be able to index in it and do Count (versus Count())\n. C style cast\n. var resultTagHelperChunk = Assert.IsType<TagHelperChunk>(resultChunks[0]);\n. untab. Also\nC#\nAssert.Equal(\n  expectedTagHelperChunk.Descriptors.First().TypeName,\n  Assert.Single(resultTagHelperChunk.Descriptors).TypeName);\n. { on the next line.\n. \"global::Microsoft.AspNetCore.Mvc.IViewComponentHelper\"\n. We specifically care about converting non-empty strings so documenting the behavior of type converters for this scenario doesn't help.\n. Would _typeConverter.ConvertFrom trimmed the string in the past?\n. Should the global:: be part of the property definition? What do we do in other places @NTaylorMullen \n. eww\n. : this(validationAttributeAdapterProvider, dataAnnotationLocalizationOptions). You could remove the null checking from here in that case.\n. readonly?\n. Feel free to remove the doc comments for this ctor. The params are incomplete anyway.\n. We should consistently null check all the things. This makes it seem like charPool and objectPoolProvider might be optional.\n. readonly\n. Was there a reason we couldn't use the same pattern as MvcDataAnnotationsMvcOptionsSetup here?\n.  \u00a9\n. Missed one more readonly\n. Do you actually need to set this up? Would Mock.Of<IHostingEnvironment>() work instead?\n. Do we need this setup?\n. Not super sure we need that. The motive for this bug wasn't to make it simplify the ctor but more about making it possible to add AuthFilter as a global filter. \n. I thought as much. It's kinda awful.\n. What would be the same?\n. I don't think CreateInstance has to return the same instance every time. The filter provider should cache the value for you as long as the filter is reusable.\n. Could we just return here if it happens to be null? One fewer indentation.\n. Load_ReturnsEmptyDictionary_WhenSessionDataIsEmpty? It's not null is it?\n. I'll add in WriteLine(string) since it does a bunch of extra work: http://referencesource.microsoft.com/#mscorlib/system/io/textwriter.cs,452\n. This ends up being problematic when _buffer.Length is a multiple of PageSize.  We could do mod PageSize + 1, but IMO that's not as intuitive.\n. You probably don't have to initialize this.\n. When would this be null?\n. Ignore these\n. private readonly?\n. Why is this public?\n. Could we just call these two explicitly in Resolve rather than putting them in a list? It's probably terser too\ndescriptors.AddRange(_tagHelperDescriptorResolver.Resolve(resolutionContext));\ndescriptors.AddRange(_viewComponentTagHelperDescriptorResolver.Resolve(resolutionContext));\n. services.TryAddSingleton<TagHelperDescriptorResolver>();\n. Does designTime have to be passed in?\n. Name of the ViewContextAttribute type ~~for view execution~~.\n. How does this work with TagHelperDescriptorResolver? How are we passing in the designTime value?\n. Should this get the IViewComponentDescriptorProvider from the service container (once we've added enough of Mvc's services to it)?\n. return viewComponentTagHelperDescriptorFactory.CreateDescriptors(assemblyName);\n. How is this going to be used? It's a bit hard to review this since I don't know what the design for it is.\n. private static readonly string CurrentAssemblyName = typeof(ViewComponentTagHelperDescriptorProviderTest).GetTypeInfo().Assembly.FullName;\n. Let's not verify system message.\n. Untab\n. CurrentAssembly\n. This is kinda brittle. It relies on never adding another view component type to this assembly. Maybe do a Contains check instead?\n. string applicationName. \n. I wonder if we should have additional options to set content root and application root. \n. This one seems ok to me.\n. cc @davidfowl \n. Should this be an explicit implementation? It's really not meant to be part of the API surface.\n. Could we use an object key here? Makes it much harder to collide with user keys.\n. _convertDictionaryMethodInfo\n. readonly\n. TempDataTestScenarios or something like that?\n. Shouldn't need this.\n. Remove\n. We'd also have to move HostingEnvironment to abstractions. https://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNetCore.Hosting/Internal/HostingEnvironment.cs\n. We're going to leave the other piece as is. This will solely exist as a backdoor for RazorTooling.\n. Could we new up an ApplicationPartManager and put it in here with the AssemblyPart?\n. It ensures AddMvc doesn't try to run any of the application part discovery code (including probing for IHostingEnvironment).\n. Would it be easier to share the code between this piece and MoveTo if we separated the addition of pages and keeping track of where to write next:\n``` C#\npublic ViewBufferPage GetCurrentPage()\n{\n    if (_currentPage == null || _currentPage.IsFull)\n    {\n        _currentPage = new ViewBufferPage(_bufferScope.GetPage(_pageSize));\n        AddPage(_currentPage);\n    }\nreturn _currentPage;\n\n}\npublic void AddPage(ViewBufferPage page)\n{\n    if (_multiplePages != null)\n    {\n        _multiplePages.Add(page);\n    }\n    else if (_singlePage != null)\n    {\n        _multiplePages = new List(2);\n        _multiplePages.Add(_singlePage);\n        _multiplePages.Add(page);\n    }\n    else\n    {\n        _singlePage = page;\n    }\n}\n``\n. Could you add a couple of tests for use afterClear? \n. Ran this by @dougbu. They seem to have fixed the underlying issue so we no longer need the#else. Ongoing discussion in the email thread about this failure. I'll create a follow up work item to undo this\n. Err, missed this one. It's not in NETStandard.Library and should get bumped up to 4.3.0\n.Microsoft.AspNetCore.Mvc`\n. Yup - here's the issue for it https://github.com/dotnet/coreclr/issues/7381\n. Don't need to initialize any of these.\n. Gotcha. Maybe split it out into a separate scenario? It wasn't entirely obvious that you were trying to test use after Clear there. \nTest1 - Append_CreatesManyPages \nTest2 - Append_WorksAfterPagesHasBeenCleared (or something like that)\nMakes it easier to figure out what specific scenario is broken if we happen to change this in the future.\n. Yup, that works \ud83d\udc4d \n. I'm pretty neutral on this. It's one extra reference we need to ensure is kept up to date at all times, but it does make it a bit easier to reason about. \n. @Yves57, yeah wouldn't hurt to simplify Append_CreatesManyPages. Consider refactoring the 2nd set of Act and Assert (Assert_CreatesSinglePage) into a separate test if that hasn't already been covered. \n. Should we pin this to 3131 (as also update the KoreBuild version)? That's the LTS build of the SDK.\n. This looks identical to the previous test. What am I missing here?\n. Could this just no-op?\n. :100: \n. ~~w/in~~ when in?\n. Could you also add a test for the reverse sequence i.e. \n.Returns(new char[2 * PagedCharBuffer.PageSize])\n.Returns(new char[PagedCharBuffer.PageSize]);\n. It's fine. I just wasn't sure if this was a copy-paste error\n. :hankey: \n. // Act (a space after the comment)\n. ControllerBase is the only type you need to modify with this change. We shouldn't be adding anything to WebAPI shim unless absolutely necessary.\n. We should remove the null check here. location would be an optional component.\n. We don't use optional values in any of our public API. http://haacked.com/archive/2010/08/10/versioning-issues-with-optional-arguments.aspx has some background for why it's a bad idea. You'll have to add additional overloads that don't take value\n. Also add an overload that takes neither uri nor value\n. :space_invader: \n. C#\nreturn new ActionContext(\n    httpContext,\n    routeData,\n    new ActionDescriptor());\n. await ExceptionAssert.ThrowsAsync<InvalidOperationException>(() => result.ExecuteResultAsync(actionContext));\n. Do you need this?\n. Do you need a custom type? Can you just have it return a new object() in TestData\n. Can we just have this return a new object() instead?\n. Formatting:\nC#\nvar routeValues = new RouteValueDictionary(new Dictionary<string, string>()\n{\n   { \"test\", \"case\" },\n   { \"sample\", \"route\" },\n});\n. { on the next line\n. Could you use TheoryData here?\n. () => result.ExecuteResultAsync(actionContext),\n. untab.\n. Once you add the overload without value you wouldn't need null\n. un-tab\n. :clap: \n. AcceptedObjectResult -> Constructor \n. ExecuteAsync_SetsStatusCodeAndValueAsync\n. Constructor_SetsLocation\n. Optionally you can remove this test. We usually don't test trivial property setting code (even if this existed in the other code).\n. ExecuteResultAsync_SetsStatusCodeAndLocationHeader\n. Could you go through the other tests and rename the method names to better reflect the thing being tested?\n. It does. I'll use that instead.\n. You would need a null check here. \n. if (location == null) { throw new ArgNullException(nameof(location)); }\n. if (!string.IsNullOrEmpty(location))\n{\n  context.HttpContext.Response.Headers[HeaderNames.Location] = Location;\n}\n. return new AcceptedResult(uri: null, value: null);\n. remove\n. new AcceptedResult(uri: null, value: value);\n. Named param for null value.\n. I think it should be fine not to throw here. \n. See previous comment.\n. Coding convention: Each argument goes on a separate line. value: value would move to the next line.\n. Not entirely sure this is useful to test. We've already verified value gets assigned in the ctor. What might be more interesting is to determine if it gets written to the Response body.\n. tab this line + next.\n. Does it work with just the StringOutputFomatter?\n. Same comment as the previous test file\n. tab\n. return new ActionContext(\n   httpContext,\n   routeData,\n   new ActionDescriptor());\n. You could move this to the previous line.\n. ^\n. untab\n. access -> accessed?\n. _innerHtml?.WriteTo(writer, encoder);\n. Is this a super common scenario - to have a select list with no values? Might not be worth the added testing \\ maintaining for this scenario.\n. If you think this is worth keeping, is this already covered by a test case?\n. We typically use named parameters for null and primitives values (e.g. count: 10, validate: false etc). Other parameters should either match method arguments or be descriptive.\n. If the 406 is a result of the formatter throwing, you could use Moq to make this work:\n``` C#\nobject actual = null;\nvar formatter = new Mock();\nformatter.Setup(f => f.WriteAsync(It.IsAny()).Callback((OutputFormatterWriteContext context) =>\n{\n  actual = context.Object;\n});\n...\nAssert.Same(expected, actual);\n``\n. What \\ where does it fail? Could we use Mock formatter to work around this?\n. haters-gonna-hate.bmp\n. I thought this type was primarily for browser caching and not server side caching. Are we repurposing it?\n. Would be a question for @Eilon or @danroth27. TheResponseCacheAttribute's doc primarily focus on the browser caching aspects (and not server side caching) - https://docs.asp.net/en/latest/performance/caching/response.html?highlight=ResponseCache#what-is-response-caching\n. Mvc 5 had anOutputCacheAttribute(https://msdn.microsoft.com/en-us/library/system.web.mvc.outputcacheattribute(v=vs.118).aspx) which is what enabled server side caching. Maybe we need to bring that back.\n. That might work although I'm not sure if the current set of options on the attribute lets you configure server \\ client side caching with a good level of fidelity. (i.e. enable response caching on this action but not server caching etc) whichOutputCacheAttributeallowed via https://msdn.microsoft.com/en-us/library/system.web.ui.outputcachelocation(v=vs.110).aspx. Plus I assumed we specifically called it response caching ) to differentiate it from output caching (which was on the server side).\n.var` all day every day\n. Would it be easier to read if this was refactored in to a separate method?\nvar matchResult = FindNext(key, index);\nmatchResult.MatchType, matchResult.Index ..\nNot that it's particularly difficult to read now.\n. Does rearranging the ifs make a difference (if (subKey.Length == 0) { return this; } one)? It avoids the extra nesting\n. \ud83d\udc4d \n. var\n. Is indexing into the string problematic?\n. \ud83d\udc4d \n. Formatting:\nC#\nformatter.Setup(f => f.WriteAsync(It.IsAny<OutputFormatterWriteContext>()))\n   .Callback((OutputFormatterWriteContext context) => actual = context.Object)\n   .Returns(Task.FromResult(0));\n. // Assert (need a space after //)\n. Assert.Same(value, actual);\n. ExecuteResultAsync_ThrowsIfActionUrlIsNull\n. ExecuteResultAsync_ThrowsIfRouteUrlIsNull\n. // Assert\n. Could you not use a Mock formatter here?\n. Looks like this class is missing tests that verify if the value gets passed to the fomatter like the other two things\n. Formatting:\nC#\nif (current == null)\n{\n    break;\n}\n. The convention is to add a [Design] prefix to a PR title if it's something you'd want people to vet without digging in to it\n. VaryByQueryKeys = VaryByQueryKeys, (trailing comma)\n. resx string\n. Use TheoryData here\n. Braces on new line. \n. Property on separate lines\n. Assert.Equal(..)\n. > Gets or sets the query values to vary by.\nThe use of response caching middleware is a detail of the filter, not the attribute.\n. Similarly update the CacheProfile doc comment.\n. Maybe make a remark for this?\n. ~~deliverately~~ deliberately \n. vars all over\n. Can you limit the try-catch to this method? None of the code after should throw, should it?\ntry\n{\n   length = ..\n}\ncatch\n{\n  length = 0;\n}\n. Do you need this? \n. { on the next line.\n. Space following the comma , 1.0),\n. :100:\n. Can you add a scenario where a mediaa type has a valid quality factory mixed along with one that's invalid?\n. Could you make VaryByQueryKeys a param and pass it in as nameof(VaryByQueryKeys)?\n. readonly\n. We usually CamelCase consts (not uppercase it).\n. Could we also get independent tests for the new data type? \n. int length? I'm fine with this as is\n. Check the response status code too (since I assume we were 500 erroring before).\n. Would it help to change the ctor to use default(StringSegment) - https://github.com/aspnet/Mvc/blob/6be4eb1fd654b1c1ea281416c85d407846c9ae2d/src/Microsoft.AspNetCore.Mvc.Core/Formatters/MediaType.cs#L69? This should work as is, but it might make it easier to reason about.\n. We might end up overwriting a newer version of the collection with an older one here. Is this problematic?\n. This is the same namespace as IActionDescriptorCollection. Should this go in the root?\n. Is this necessarily true? I assumed this thing was a set and not a stack?\n. Might be nicer to have these be properties instead. \n. Why not leave the condition like before if (model != null && !_currentPath.Add(model))?\n. Microsoft.AspNetCore.Mvc.ModelBinding.Internal\n. Push_ReturnsFalseIfValueAlreadyExists\n. Pop_RemovesValueFromTheStack? In general we don't need to include the type name in the test since the test class already includes this.\n. Pop_DoesNotThrowIfValueIsNull. Additionally, does this require the stack to be preloaded? Does this work when the stack is empty?\n. PushingMoreThanCutOffElements_SwitchesToHashSet\n. Extra line\n. var all day every day \n. We generally don't test trivial property \\ field assignments in our tests. Is there a reason you thought these were necessary?\n. \ud83d\udc4d \n. Isn't this scenario covered by ExecuteResultAsync_SetsObjectValueOfFormatter?\n. Isn't this covered by ExecuteResultAsync_ThrowsIfActionUrlIsNull?\n. var provider = new BodyModelBinderProvider(formatterList, new TestHttpRequestStreamReaderFactory());\nShouldn't need the braces around formatterList\n. var formatterList = new List<IInputFormatter> { formatter }; would be equivalent to the .Add on next line.\n. Might want to use typeof(TestInputFormatter).FullName here.\n. ~~void~~ async Task\n. var exception = await Record.ExceptionAsync(() => binder.BindModelAsync(bindingContext));\n. Would including the model name from the context make this a bit nicer?\n. var srcProjects\n. directoryPath -> srcProjectPath\n. You should be able to Path.Combine(directoryPath, \"project.json\");. Alternate casings have difficulty building on xplat so we should have them all normalized.\n. All of our repos should be net451 on desktop. For net46 of higher we would target the netstandard equivalent.\n. what's EPI?\n. IMO, it should be fine to look for netstandard. The only netcoreapp targeting things we ship are tools and I don't think we'll want to guarantee API compatibility for those.\n. \ud83d\udca9 \n. Yeah, Configuration ignores the result of it - https://github.com/aspnet/Configuration/blob/38f770870cf1f7af062c02c7756263380e060d20/src/Microsoft.Extensions.Configuration.FileExtensions/FileConfigurationProvider.cs#L32. I'll remove the disposability here.\n. Fair enough. I was trying to avoid the eager work, but I guess it simplifies reasoning about this.\n. \ud83d\udc4e \n. Bracing style is inconsistent. Can you add a space after all the ifs?\n. Formatting - string.Join(\" \", arguments) \n. What if I had an library that was named Microsoft.AspNetCore.Mvc.TagHelpers.Test and relied on this to make my code compile? @Eilon and here I thought you were a champion of not breaking users. \n. I was trying to avoid creating objects for cshtml files that did not have an @page attribute or allocate Lists for non-index pages. But perhaps it might be alright if we cache the right data structure here.\n. https://github.com/aspnet/Mvc/issues/5475\n. There's a CompositeFileChangeToken in FileSystem but not just a vanilla CompositeChangeToken. I added a work item to figure out if we can commonize it - https://github.com/aspnet/Common/issues/163\n. We spoke offline and landed on keeping this in Razevolution. Filed https://github.com/aspnet/Razor/issues/842 to track moving this,\n. public ClaimsPrincipal UserClaimsPrincipal => ViewContext?.HttpContext?.User for \ud83d\udcaf points! \n. ExplicitlyImplementedIDisposableMethodsAreTreatedAsNonActions\n. We specifically wanted to avoid duplicating this code. CombineTemplate also handles additional cleanup which I'd like to avoid duplicating here. Is there a specific reason you'd not like additional API on that type?\n. This is throwaway code until Razor's code is ready for us to consume. See https://github.com/aspnet/Mvc/issues/5475\n. We could have fewer nestings:\nC#\nif (Assembly.IsDynamic)\n{\n  // Could you add a message here that says how it fails e.g. DependencyContext.Load on dynamically generated assemblies fails with x\n  return Enumerable.Empty<string>();\n}\n...\n. MethodsNamedDisposeAreTreatedAsActions\n. Just a comment should suffice.\n. This doesn't actually work. Unfortunately plumbing an ILoggerFactory through to this is just a bunch of work that we'd rather not. Let's just do the logging as part of the view execution instead.\n. This isn't correct. Not all views are precompiled views. That said, it might be better to print this in as part of RazorViewEngine: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor/RazorViewEngine.cs#L305. In the current usage, the other message would appear after this one which might be confusing.\n. Since CompilerCacheResult is a struct, you'd have to accept this in a ctor. We don't use mutable structs in the most common use cases.\n. > // Internal for unit testing\n. This isn't particularly useful information. I'd leave the precompiled view found message and remove this one.\n. _logger isn't optional here, so you shouldn't need the null-check operator here.\n. .Returns(new RazorPageFactoryResult(() => Mock.Of<IRazorPage>(), new , new IChangeToken[0], isPrecompiledView: true) and remove var page ...\n. Can you wrap parameters on separate lines?\n. Using precompiled view for '{RelativePath}'.\n. ``` C#\nforeach (var dependency in dependencies)\n{\n   if (_dependencies.ContainsKey(dependency))\n   {\n    throw new InvalidOperationException(Resources.FormatCandidateResolver_DifferentCasedReference(dependency.Name));\n   }\n   _dependencies.Add(dependency.Name, CreateDependency(..));\n}\n. > Duplicate entry for library reference `{0}` found. A common cause for this issue is difference in casings for the same package identifier in different project.json files.\n. @javiercn \\ @Eilon could you verify if this message sounds good?\n. `var` all day everyday. \n. Could we change the test name `CandidateResolver_ThrowsIfDependencyContextContainsDuplicateRuntimeLibraryNames` or something like that?\n. C#\nvar logMessage = Assert.Single(sink.Writes);\nAssert.Equal($\"Using precompiled view for '{relativePath}'\", logMessage.State.ToString());\n``\n.true if the view is precompiled, false otherwise.. >  Gets a value that determines if the view is precompiled.\n.IsPrecompiled~~View~~\n. Let's change this toisPrecompiled. Could you sort usings?\n. Are you unable to use the same pattern (callingPopulateFeature) here?\n.var assembly = .... Doesn't seem like it's used.\n.var assembly = .... Sorry, we listSystemnamespaces first followed by everything else in ascending. There's a VS setting that does this.\n.InvalidOperationException. HasParameterlessConstructor\n. Unable to create an instance of type '{0}'. The type specified in{1}` must not be abstract and must have a parameterless constructor.\n1 -> nameof(ConfigureType)\n. Can you write a comment that says why an empty string is problematic? \n. Assert.NotEmpty(setCookieValue);\n. Why do you need to filter these? Aren't they already filtered by TryGetValue?\n. CreateConfigureDelegate_ThrowsIfTypeIsAbstract\nNeed another one where the type is non-abstract but does not have a parameterless ctor.\n. static\n. AbstractType should suffice. The presence or absence of ctor shouldn't matter.\n. Also try specifying a scenario with an interface. You could make this test use a Theory to test these scenarios.\n. bool isSecure?\n. A functional test for this seems like a bit of overkill doesn't it? Couldn't you change one of the other tests to pass in https?\n. Missing trailing comma\n. public NoParameterlessConstructor(object a)\n. @rynowak, how do you feel about these APIs? I'm not particularly vested in this, but this was my interpretation of not duplicating code per https://github.com/aspnet/Mvc/pull/5450#discussion_r85363884\n. The type is public, I'm not sure if we are ok making a breaking change modifying the ctor. At the same time, there's plenty of optimizations here that I'd rather not copy to RazorPages\n. Calculating the ModelType (for VDD) is different in a Razor view and Razor pages. \n. I'll add docs for this.\n. Should this move the the descriptor?\n. This is inside of a failed TryGetValue of a ConcurrentDictionary so we cache it separately.\n. Something like a VDDProvider? Sure. The remainder of the code is also duplicated although it's less interesting than the VDD specific pieces.\n. Yup, primarily the reason why I did not make RazorPagePropertyActivator a service that gets injected. If we decide to simplify it to be just be a VDDActivator, it we might get away with a lot less change here. .\n. Oops. I thought this was on the base descriptor. I'll port that over.\n. Just realized this does type activation /w services. Do we want that for Razor pages?\n. @rynowak - thoughts on this? In theory if we use this model, I could do more work to cache the property activation as part of the closure rather than explicitly cache it via dictionary lookups.. Sure. I think I had some odd issues referencing TestCommon before we had rebased. I'll see if it's fixed now.. Suggestions for what this needs to look like? Should Create return a pair (or an interface) of creators of destroyers? Or should this be a separate Action<PageContext, object> that we independently cache?. I'll add tests for this.. A lot of projects do AddMvc() to test the service collection setup making it hard to remove.. This was just necessary. Think we use some DataAnnotationAttributes that required this.. \ud83d\udc4d I'll file a follow up for this.. Yeah, it's copied from ControllerActionInvokerCacheTest. I'll de-dup this as part of the follow up.. It is. We kick off the invocation from the subtype, and get called back at the end of resource filter invocation.. I could call this Outer. But it's basically the beginning of the \"inner\" loop.. Sure. I'll rename it.. Will change the comment.. Suggestions?. Nope. GetCacheableFilters includes the result of running the filter providers and cached filters. If you have a suggestion for an alternative name for the method, we could use that here.. Does the null check need to also apply to the next if?. Could we just merge the two conditions? \n`if (length != null)\n{\n  ....\n}\n```\nMight be easier to read. length: null. Moving this to RazorProject as follow up (https://github.com/aspnet/Razor/issues/962). We are going to rely on the IActionDescriptorChangeProvider invalidating the cache anytime any cshtml file is invalidated. This would allow us to cache ViewStarts with the page's cache.. How gross is this?. Format. Could we have the inverse order too:\n@model ModelType\n@inject PropertyType<TModel> PropertyName. Do we do anything funky with line endings anymore? Is it NewLine or \\r\\n all the time?. One more scenario mixing @inherits + @model hierarchy:\n@model Type2\n@inherits BaseType<TModel>\n@model Type1. Does the attribute and base type also require the global keyword?. extra line. We should probably commonize some of the code from these tests.. The equivalent code in Razor was to support building the vsix, so I don't think this is needed here. If you're trying to \"select\" the sln, you need to use dotnet restore. Can remove.. <Content Update=\"Views\\**\\*;web.config;wwwroot\" CopyToPublishDirectory=\"PreserveNewest\" />. Remove this + the next one.. <PackageReference Include=\"Microsoft.Extensions.ClosedGenericMatcher.Sources\" Version=\"1.2.0-*\" PrivateAssets=\"All\" /> and similarly below.. Remove. This gets added by the build. Remove. Doesn't look like this is in the csproj. Did this go missing?. Unify the pack + project reference ItemGroup. Remove. This used to be conditional in netstandard1.6. Desktop referenced the framework reference.. Fx reference \\ package reference like before. Not sure it matters though.. Remove. Remove. I think if you run restore on the sln, it should complain about implicit references. Sort references. I think these can be removed now. This was a stop gap for an issue with dotnet-test-xunit. Could you add a comment here as to why we're doing this?. ConditionalFact + Skip?. I think we might be able to add a comment to the .notest file above saying that this is a \"feature\" of KoreBuild. Don't think it looks at the content.. Remove. x64?. We could remove these. We don't actually do any IIS publishing tests so this isn't super necessary. I'll leave it up to you. Remove. Remove x n. Think you can remove the the Exclude node.. No idea. Maybe a remnant from when we did not have Microsoft.AspNet.Mvc and had individual projects?. I'll move this in to Razor. This is to unblock ourselves for now.. I worry this will be super bad especially when you have something like node_modules in the content root.. I guess we'll have to query the backing file providers in that case. Sound good?. @danroth27 had a question about what we'd need to preserve this across multiple requests. Resetting the value wouldn't work, would it?. sort. Hacks. Let's rename this to something more meaningful in the dev branch.. We can remove the Debug.Assert on Line 655 since this ensures Result is never null.. It should be good for now. @JunTaoLuo, we'll need to update the CLI to the version that's shipping in the release (if any). Could you file a tracking item for this?. What happens if the expression uses something from a type or namespace called \"Model\" e.g m => MyApp.Model.Constants.CopyrightYear or some weird variant like this.. Sounds good. . Undo.. @rynowak do you have any concerns about the verbiage here? It rings better to me.. Remove extra lines.. Docs since we have \u231b\ufe0f now. We set the BaseAddress on the Client. You might not need this concatenation.. Null or empty check - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ControllerBase.cs#L362-L365. public static readonly string. Spoke to @Eilon and we came up with this:\n\nOne or more compilation references are missing. Ensure that your project is referencing '{0}' and the '{1}' property is not set to false.\n\n{0} - Microsoft.NET.Sdk.Web\n{1} - PreserveCompilationContext\nthat get passed in.\n. I think we'd leave this pinned at1.1.0since that's the version that corresponds toNETStandard.Library 1.6.1. Probably don't need this in test apps. The issue is running tests on xplat, but compiling it should be fine.. \ud83d\ude2e . We're trying to verify that conditional constants defined in the project are available to views.. Looks like this missing thepreserveCompilationContextflag from the project.json. I think project.json required an executable to produce a deps file.. Nope. WebAPIShim references portable packages.. Is this still needed? The Formatter project should bring in this reference. Could we split this out in to a separate test?GetCSharpTypeName_ReturnsCorrectTypeNames_ForOutParameters`? This is kinda ugly. xml\n<DefineConstants Condition=\"'$(GenerateBaselines)'=='true'\">$(DefineConstants);GENERATE_BASELINES</DefineConstants>\n<DefineConstants>$(DefineConstants);__RemoveThisBitTo__GENERATE_BASELINES</DefineConstants>\nthis lets you do dotnet test /p:GenerateBaseLines:true to produce baselines without editing any files. The second one exists as an option inside VS.. We should probably add a tracking bug to re-add net4x testing. I forget why we decided to skip desktop here.. I think Taylor tried this earlier, but we might have had newer packages since.. Yup - the 1.1.0 package exists on nuget.org, so that's the build that'll get used: https://www.nuget.org/packages/Microsoft.Extensions.DependencyModel/1.1.0. Why would we remove it? Isn't the plan to enable the feature by default?. FYI @natemcmaster  - something for us to track in KoreBuild. . EmptyArray<RazorIRNode>.Value. global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute. Trailing comma. \"'$(OS)' != 'Windows_NT'\" versus \" '$(TargetFramework)' == 'netcoreapp1.1' \". We should pick one spacing. Do we need to file an SDK bug for this?. Shouldn't need docs. Readonly fields before ctor, properties go after. . readonly. This should be reusable, right?. Shouldn't we be using controllerModel.ControllerProperties?. This doesn't look like a boolean condition? Maybe we can use property.CustomAttributes.OfType<TempDataAttribute>().Any(). Don't need docs for internal types. Nice catch. It should be recursive. I guess this needs a test. Yeah. Path.Combine uses OS specific path chars which we don't use.. What's message for?. Could we get another test with a void OnGet? Unless that'a already covered.. New line at the end of file.. Look at the other tests. You can get at the non-internal PageCacheEntry thru the action descriptor.. why?. Add a comment that says it's internal for unit testing.. Rebase on dev. Do you have to specify PageContext? The compiler should be inferring it correctly?. You want https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.RazorPages/PageActionDescriptor.cs#L37. Neither the filter that we create here, nor the AuthorizeAttribute perform a null check for it. I think it's designed to be null.. Don't need these. Just use Mock.Of<IPageModelFactoryProvider>(). Why do you need to do this?. Need a better name. Also, it doesn't look like it does any verification for the page. . I think this test is covered by https://github.com/aspnet/Mvc/blob/d7bb910114e9232494f6a6751646d86ec3996dd7/test/Microsoft.AspNetCore.Mvc.RazorPages.Test/Internal/PageActionInvokerProviderTest.cs#L187-L188. FindsAllHandlerMethodDescriptors?. Also, not super sure this is different from https://github.com/aspnet/Mvc/blob/d7bb910114e9232494f6a6751646d86ec3996dd7/test/Microsoft.AspNetCore.Mvc.RazorPages.Test/Internal/PageActionInvokerProviderTest.cs#L76. You want to verify that the PageFactoryProvider is invoked with the right values of _PageStart.. This isn't true. Just a behavior of the TestFileProvider. Can you try and make it case sensitive and see what fails (apart from this test)?. Declare this inline.. What would be useful is to have tests for inheritance hierarchies, protected methods, overloads, methods overriden with with new etc, . Brace on next line. Sorry, I was looking at the docs for the IRazorPage.Path and it says it's the app relative path. ActionDescriptor.RelativePath is probably the better value here since it's not based on RazorPagesOptions.BasePath. Could you update this prior to checking this in?. Could you assert the MethodInfo? Count really doesn't verify enough.. If you do mock.Setup(...).Verifiable() during the setup, you can do mock.Verify() to verify the assumption about _PageStarts. Assert.Empty(factories);. Can you file a follow up work item to add tests for this method + cleaning up the resx string here.. This isn't really a good candidate for theory tests. Let's split it out and call out what we expect in each of these 3 scenarios e.g. PopulateHandlerMethodDescriptors_DiscoversHandlersFromBaseType etc.. Could you also add a OnGet<TVal> as a scenario. We should filter those out of discovery.. Make this non-static. @rynowak we should consider sticking EditorBrowsable(EditorBrowsableState.Never) on these sort of methods. Less intellisense pollution.. We generally don't use optional parameters in public APIs. Could you create another overload?. I think the tests are fine the way they are now.. Here's a blog post that explains why it's a tricky to version these: http://haacked.com/archive/2010/08/10/versioning-issues-with-optional-arguments.aspx/. You want to associate these filters with specific handlers, not the action descriptor. . We don't use internal for any code that's not meant to be test-only.. Let's avoid the Linq call entirely. Also, this needs to throw if PropertyHelpers is not initialized.. C#\nfor (var i = 0; i < PropertyHelpers.Count; i++)\n{\n   var property = PropertyHelpers[i].Property;\n    ...\n}. Nope. Have to use the PropertyHelper to call SetValue.. Why internal?. var all day every day.. public int Order => -1000 + 10;. && goes at the end of previous line.. This is a behavior of our implementation of cookie \\ session temp data provider. I don't think we should have this check here. \n@rynowak \\ @Eilon  can we use 2.0.0 as an opportunity to change the contract for ITempDataDictionary: IDictionary<string, string>? Neither of the default providers work with complex types and we can simplify a bunch of code there by hardening the restriction.. You don't need to return anything here since non-success code paths throw.. var message (casing). if (response.Headers.TryGetValues(\"Set-Cookie\", out var values)) for \ud83d\udcaf points. var controllerType = controller.GetType().GetTypeInfo();. Blank line. trailing comma. trailing comma. SaveTempDataPropertyFilter_PopulatesTempDataWithValuesFromControllerProperty or something like that. Better name. Do you need this call?. You could replace this with Mock.Of<ITempDataProvider>(). This + the following test are likely a good candidate for a Theory. You can leave it as is if you'd like.. > Cannot apply 'TempDataAttribute' on property 'MyNamespace.TestController_PrivateSet.TempDatasince it does not have a public getter or setter.. Remove extra line. Also needs tests to verify that it initializes the filter with the right PropertyHelpers. Not sure you need these. We aren't testing ModelBinding here (are we)?. Just use anOkResult.voidreturning actions are not very typical.. Add a new line at the end of the file..private const string. Instead of doing this, just call the other overload:public static RazorPagesOptions AuthorizePage(this RazorPagesOptions options, string path) => AuthorizePage(options, path, policy: string.Empty);. You want to use these filters to be run in the filter pipeline specifically after a handler is selected. Right now, you're gathering filters on any handler and applying it to all the handlers on the type by collating them. Unless that's specifically the design we're going for (@rynowak?), this isn't correct.. Isn't it doing that on the line above?. Yup - it's sort of showing what the expression tree is generating. I can remove it if it's confusing or not obvious.. Same thing asAuthorizePage?. Using https://github.com/aspnet/MusicStore/issues/757 to track if this works E2E.. The method already exists onRazorPageBase`. What are you trying to do here?. So the scenario that triggered it was unusual, but here's the line in the deps file the user had: https://github.com/Gonkers/Github-Issues/blob/master/Files/ConsoleApp1/WebApplication1/bin/Debug/PublishOutput/WebApplication1.deps.json#L2646\nIn this case, Library.Dependencies for Kestrel would list Libuv, but Libuv does not have a runtime component. The assert fails and throws a KeyNotFoundException. Also filed https://github.com/aspnet/MusicStore/issues/757, because I think the discovery might be broken if Mvc is referenced thru a metapackage which is something that's planned.. I had a look at the serializer and looks like we allow collection of primitive types in addition to just primitive types. That does throw a wrench in any changes to the contract of the dictionary. Presumably we don't want to deal with the overhead of managing collection types here?. This makes it difficult to share this as public API. I could pass the setter and property info separately if we don't want to create shared src files.. The PropertyHelper type is internal to each of the two assemblies. I'll work around by passing in the setter delegate + the propertyinfo.. I could use the ParameterBinder in the other code. I assumed we wanted to keep symmetry with the ControllerArgumentBinder but if that's going away, we might not need it.. Braces around if condition blocks:\n```C#\nif (_arguments != null)\n{\n   htmlContent = new HtmlFormattableString(Value, _arguments);\n}\nelse\n{\n}\n```\nthat said, new HtmlString(value) assumes value is already encoded. Calling WriteTo on it writes the value as is. Maybe we don't need that indirection. @dougbu maybe you have some thoughts here.. Sort usings.. Could you look at the tests below? They use TestStringLocalizer which has a conveniencehtmlLocalizer.GetString method that might do what you're currently doing.. Do we need to change the ctor above too? Just so that different code paths don't have different initialized values for the same thing.. Is this the right namespace for this type? . Keep the existing code that returned a completed task if there's nothing to bind?. These should also be global::System.Action. Not sure I fully understand, what's the intent of wrapping these in actions?. ```C#\nvar codeDocument = RazorCodeDocument.Create(RazorSourceDocument.Create(inputContent, inputFile));\ncodeDocument.Items[\"SuppressUniqueIds\"] = \"test\";\nvar csharpDocument = ...\n. Is this because it's trying to produce a `Task<ClaimsPrincipal>`?. Typical field order we use in most places in our code: `public const`, `non-public const`, `public static readonly`, 'private static readonly`, `readonly`,  and finally non-readonly fields..C#\nvar isReferenceTypeOrNullable =  !propertyTypeInfo.IsValueType || Nullable.GetUnderlyingType(ModelType) != null;\nif (value != null || isReferenceTypeOrNullable)\n{\n   property.SetValue(...);\n}\n```\nYou can remove the generic check once you do this.. Could you make this PropertyHelper.GetVisibleProperties(type: controllerModel.ControllerType.AsType()). Should eliminate accidental use of the object overload. C#\nvar propertyHelper = propertyHelpers[i];\nif (propertyHelper.Property.IsDefined(typeof(TempDataAttribute))\n.... Docs. Are you sure \\r\\n works in Travis? Can you trim the actual response so you don't have to include this?. private. Ok. Looks like you were only looking at the controller property being hydrated here, not the values being stashed.. nameof(TestController.TestString), similarly in other places. You could simply assert it's the exact property instead of verifying two pieces of information about it:\nvar expected = typeof(TestController_OneTempDataProperty).GetProperty(nameof(TestController_OneTempDataProperty.Test2);\n...\nAssert.Same(expected, tempDataPropertyHelper.Property);\n. var exception = Assert.Throws<InvalidOperationException>(() => provider.OnProvidersExecuting(context));. Could you add a scenario where some of the properties are valid and the others aren't allowed?. Can you add non-string properties to this one? For instance an int?. Can you include collection of primitives as a negative case? Cookie and session temp data provider allow IList<string> for example, but the property does not.. Also, should we print all possible errors when doing this? @rynowak is there any other equivalent in application model where the error includes all issues?. var exception = Assert.Throws<InvalidOperationException>(() => provider.LoadAndTrackChanges(controller, controller.TempData));. property.SetValue . Eww, just have these return TaskCache.CompletedTask. Shouldn't use delays unless you need them.. Would we still need this type if all its doing is delegating to the inner one?. Remove it for now. It's in the source control history if you need to look it up. Let's not leave commented out code.. Why does the test need an explicit reference?. Properties with vanilla ModelBinderAttribute don't have a BindingSource set. Is there another way to infer this?. Using a new type since ControllerActionInvokerTest primarily focuses on action invocation now and is already pretty lengthy.. Will revert.. Will undo. Nope, not changing the contract here, just following coding conventions.. cc @rynowak . this is a get request. Why not do var content = await GetStringAsync. HandlerTestPage? It does more than just CustomActionResult. Similarly, for the model.. Do we use message?. It's internal API so it wasn't particularly useful to start with. Plus it's wrapping a for loop now which is not very useful.. We actually use this type in two src projects, so kinda need this be to be non-internal.. We use the properties (avoids DI-ing them separately).. Sure. See https://github.com/aspnet/Mvc/issues/5937. ?. internal type.. I'll see if it looks any better. Maybe it provides a prettier stack trace.. This was accidental. Bad find-replace fu. For some reason when I build Universe with everything net46, I didn't need this. But building Mvc when we have upstream dependencies cross-compiling for net451 causes some weirdness. Other repos also had similar oddities. I've filed https://github.com/aspnet/Mvc/issues/6005 to remove this or at least figure out why we need this once I've updated everything in Universe. This failed with a MissingMemberException due to Roslyn. Didn't you see similar issues with the functional test?. The intent is for any ifdefs to follow this pattern so any of them fail if we miss updating them. . \ud83d\udc4d . We can't target anything lower than netstandard1.6 in most of our projects. We'll eventually replace net46 -> netstandard2.0  in src projects.. We don't do that in other repos. Let's do that separately if we want to also parameterize the TFMs. With the exception of #if in usings, I think I got them all?. Here's the exception stack trace without these flags:\n``\nFailed   Microsoft.AspNetCore.Mvc.Razor.RazorEngineTest.RazorEngine_InjectWithSemicolon_Runtime\nError Message:\n System.MissingMethodException : Method not found: 'System.Collections.Immutable.ImmutableArray1 System.Reflection.Metadata.MetadataReader.GetBlobContent(System.Reflection.Metadata.BlobHandle)'.\nStack Trace:\n   at Microsoft.CodeAnalysis.MetadataReaderExtensions.CreateAssemblyIdentityOrThrow(MetadataReader reader, Version version, AssemblyFlags flags, BlobHandle publicKey, StringHandle name, StringHandle culture, Boolean isReference)\n   at Microsoft.CodeAnalysis.MetadataReaderExtensions.ReadAssemblyIdentityOrThrow(MetadataReader reader)\n   at Microsoft.CodeAnalysis.PEAssembly..ctor(AssemblyMetadata owner, ImmutableArray`1 modules)\n``. Sure, I'll fix these before I merge this in.. \ud83d\udc4d . We should probably haveRazor.Runtimehere. There's not a whole lot of utility you could get only referencingmicrosoft.aspnetcore.mvc.razor.extensions. It was probably true with the host too.. ?. Might be ok - the most common issues I've seen are about users addingEmbeddedFileProvidersnot Physical. That said would be good to get feedback from @rynowak \\ @Eilon who originally asked for this property.. We explicitly initialize this - so we don't need that attribute.. The base type for models is optional, so if you wanted to create a custom base type, there needs to be a way to inject the context in to it.PageModeluses the same mechanism. The page factory on the other hand assumes you derive from thePagetype and sets it. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.RazorPages/Infrastructure/DefaultPageFactory.cs#L62-L63. We useIHostingEnvironment.ContentRootFileProvider, so I guess Hosting sorts it out for us.. I guess we can update the comment to say it's using. Might be nicer.. Dont' we also use this for TagHelpersAsServices?. It got moved to the base: https://github.com/aspnet/Mvc/pull/6034/files#diff-a4f1d91073db434f385e8192d601f7cdR106 . I know these types got moved, but putting it out there to figure out if this is the right approach.. This one wasn't super hard since it works with what we already had.asp-page-siblingis a bit less elegant since we'd have to post-process it here or call in to a RazorPages specific API.. Ok. We shouldn't haverazor.extensionshere either.. Extra newline. Should be good check in once the CI builds complete.. Need to use/Pages/Admin/Login.. I wasn't privy to the offline discussion - but was this the design we landed on? Calling the filter type directly from the invoker?. Nomodel?. Super unrelated to your PR, but we should be usingPropertyHelpersto do theGetValue. Right now it's doing a reflection call.. Can you move this toApplyTempDataChanges?OnActionExecutingalready initializes this property.. Can we set theSubject` outside of this so the API is symmetrical for action filters and this call i.e.\nfilter.Subject = page;\nfilter.ApplyTempDataChanges(httpContext);. The generator changed \ud83d\ude22 . Yeah, I copied the style \\ organization format from the one in Mvc.Core. I messed up the copy-pasta. @ryanbrandenburg filed a bug to make sure we aren't messing up elsewhere.. Yup. Although I realized the doc comments on it are a bit nicer. I'll update. \ud83d\ude49 . pageName since that's what we'd have in route values once https://github.com/aspnet/Mvc/pull/6053 goes in.. Sure. I'll push it to dev and rebase.. The page and view manifest are slightly different (pages have the route template and soon, the name embedded). Even if we switch to attributes, we would need two separate types.. I guess the application model provider would fix this.. I'll play around withe AppModelProvider and see if that remedies this. . I followed the pattern we have in Razor - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor/DependencyInjection/MvcRazorMvcCoreBuilderExtensions.cs#L64. I think this needs to be specific since a user could add a FeatureProvider<Blah>, but we still want the built in one to be registered. We're only trying to avoid double registration of the same thing.. Aren't they :trollface: . When we do precompilation, we use the list of files provided by MSBuild \\ csproj i.e. no directory traversals. Consequently the files there get embedded with /Pages/Home/Index.cshtml. However the route we need for routing needs to be /Home/Index.cshtml. Something has to account for this discrepancy.. Precompiled views don't get published so the project doesn't find these on disks. However if you ask the page factory for an instance, it happily produces one from the compiler cache. We do a similar thing with the view engine relying on the factory to produce instances regardless of file existence.. Array.Empty. Is there a reason to prefer this to a volatile field (https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Internal/ControllerActionInvokerCache.cs#L18)?. Might be easier to read if you invert the conditions:\n```C#\nif (cache.OrdinalEntries.TryGetValue(values, out var matchingRouteValues) || cache.OrdinalIgnoreCaseEntries.TryGetValue(values, out matchingRouteValues))\n{\n  return (IReadOnlyList)matchingRouteValues ?? EmptyActions;\n}\n_logger.NoActionsMatched(context.RouteData.Values);\nreturn null;\n. If the cost of using `StringComparer.Ordinal.Equals(x[i], y[i])` over this isn't much, consider having a single `StringArrayComparer` type that accepts a `StringComparer`. `out var entries`. `ToList`? . Looks like it's missing this test. I'll add one.. Sure. Braces on next line.. `List<TempDataProperty> results` (no need to declare it as an interface type). Could we not have this type? It's used in 4 places and we can construct the `TempDataProperty` manually in a helper method sans reflection. Trailing new line. Remove. ^. bracing \ud83d\ude22 . Guess I still need this. Presumably we can change this to the assembly attribute once we change how we do the compilation.. Could you also change this type to derive from `IConfigureOptions<RazorViewEngineOptions>`. Look at the other OptionsSetup type to see what they do..\nif (options == null)\n{\n   throw new ArgumentNullException(nameof(options));\n}\n``. Yup.. I was of verifying suppressing one attribute route doesn't affect the other. I can reword the test name. It's a test. So meh. Sure. Does it work reliably if you doTask.Delay(0)?. ?. Add this to the ErrorPageMiddlewareTest. The only way to configure this is via conventions \\ ApplicationModel, and I'd rather keep the tests for inbound and outbound together.. Can we undo this?. We just need this project system to give us all possible paths. The factoryprovider determines if the view exists. Should we call thisRazorPageNameso as to disambiguate with the notion ofisMainPage?.// Internal for unit testing.IndexOf+StringComparison.Ordinal. Extra line. \ud83d\udcaf . Could you show an example of the values we're producing here?. weird. Remove empty line. Just inline this.[Fact]. Can we add a test to verify how this works with theLanguageViewLocationExpander? It's the only other one we ship in the box afaik.. We should add tests for this type so we know caching works.. @NTaylorMullen  could you have a look at this?.var valueProvider = await CompositeValueProvider.CreateAsync(pageContext, pageContext.ValueProviderFactories);and delete theGetCompositeValueProvidermethod.. named parameter.. Should we change the signature of the type toFunc? We needed thePagein the past because the binder was a property on it. We can have the invoker determine what to pass in now and reduce the places of how the handler is discovered.. Trailing comma. Could we refactor this in to a separate method? 'js make me sad. . Trailing comma. Yup, Func<object, object[], Task<IActionResult>>. Basically drop the Page parameter since it's no longer useful for us to know about it.. GetArgumentsAsync. Ctrl k - ctrl d?. This doesn't make sense here. Leave this one out.. Similarly the one below.. Make this required. It really doesn't make sense to have a null page from a Controller.. Should this be 1? Seems like that's the eventId for all the other redirect methods declared here.. TryGetValue. Shouldn't need the Convert.ToString. Is this in addition to the PageBaseAttribute?. You can redim the httpMethod, formAction here. We sort of already had the infrastructure to test the Page method directly. Seemed convenient to test it in entirety.. Will remove this. It's nicer to use \"\" instead of \\\". Move these two checks inside the IsValidHandlerMethod (to be consistent with what we do in https://github.com/aspnet/Mvc/blob/0cee00aae1a4064aa2ab2608015dac92d6389c2e/src/Microsoft.AspNetCore.Mvc.Core/Internal/DefaultApplicationModelProvider.cs#L381. BindOnGet?. ModelBinderFactory_BindsPropertiesRegardlessOfSupportsGet_WhenRequestIsNotGet. We should probably move this in to application model providers. Nope. Just the property on the option.. I was relying on the option setter to do this, but presumably this would be easier to debug.. cc @DamianEdwards  - WithRazorPagesAtContentRoot. Sounds a little verbose though, but it's pretty clear. https://github.com/aspnet/Mvc/issues/6198. We'll have to rename the file since /Pages/Index.cshtml with a /Page root would collide with the Home/Index controller action.. Oops. StringComparison.Ordinal. pageName = pageName.Substring(2);. Should we do back-slashes too? ViewEnginePath allows ..\\ for path navigation.. Can you add a test in https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNetCore.Mvc.Razor.Test/RazorViewEngineTest.cs#L1475 if we're changing ViewEnginePath. Could you leave this untabbed?. ViewEngine test?. Handler (typo). You could write this test like ProcessAsync_InvokesGeneratePageForm. We just want to make sure we call the IHtmlGenerator with the right params here.. Another alternative might be to rename this method to CurrentPage(). It seems a bit clearer too in the intent of the method?. Why the ToString()?. Extra line. var all day every day. This seems odd. No commented code. You don't have to null-coalesce with null if it's already null.. Should be able to just return it (rather than awaiting the Task). GetPreconditionState \\ CalculatePreconditionState?. Extra line. Extra line. FileMetadata? PhysicalFileInfo is also a type from our libraries. I thought it worked correctly in netcoreapp. @blowdart ?. InvalidByteRangeException. Uses APIs that aren't available in the portable System.Net.Http.Formatting.. SHA256.Create() in netcoreapp works correctly on FIPS machines.. @blowdart is my statement correct? We don't need to worry about the desktop specific code here because calling SHA256.Create() works correctly in netcoreapp?. It's from System.Net.Http.Formatting.. See https://github.com/aspnet/Mvc/issues/6235. Presumably we want to keep IControllerActivator \\ IControllerFactory around. Thoughts on an alternate pattern to invoke them?. Needs to return _dispose. I actually removed the implementations. My plan was to leave the contract in to continue other systems that implemented it, but not carry forward our implementation. Alternatively, we can register the current one and check for an exact type match. . Yup. The alternative would be to leave this type in and registered, but use the factory if typeof(DefaultControllerActivator) == controllerActivator.GetType(). Sure. ControllerBinderHelper \ud83d\udc4d . Should I make the type \\ ctor internal instead?. Didn't think this warranted being moved to a shared directory\n. 1. We spoke about it offline, but I don't think there's a tracking work item for it. I'll make for now.\n2. I'll revive the types. We can do an exact match test so that it leaves users relying on the type unaffected.. @rynowak - thoughts on this?. We need to return two pieces of data (the cache entry and the filters. Any suggestions on how you'd want to surface this? . Null check this. Null check. Null check. Can you file a bug and link it here?. Does it warn because of these?. Shouldn't GetType() suffice?. Sure. As long as it works, that should suffice. The goal was to make this one method the user needs to invoke to get caching + compilation. DefaultRoslynCompilation required independently caching the result which isn't very obvious.. There's a bit of overlap in terms of creating CompilationFailedResult from both Razor and Roslyn. Combining the two here.. I'll check with @Eilon if we can remove the type entirely or mark it as obsolete for now and remove it in a later version.. Weird design - where the compiler cache did not know about the compiler. It might be cleaner to change this so that cache just calls in to the compiler from here.. FYI @Eilon since the interface was in a public namespace.. Because it's awesome?. We need some API to give us the import hierarchy \\ import file name. Nothing outside of the template engine has those bits of data today.. ?. I was following the same pattern as the ICompilerCacheProvider. Instantiating the cache requires reading precompiled view metadata and we wanted to avoid doing that at startup (because it involves a bunch of disk I/O looking for the precompiled assembly). The alternative was to lazy initialize things inside the RazorViewCompiler which ends up being messier.. We use it in DefaultControllerFactory (since that type wasn't changed).. Why the ToArray()?. If you feel up to it, can you change the type name to DefaultPageActivatorProvider?. Should we make a ctor without the TextWriter? I don't think we initialize it to the right value either here or in VIewExecutor. Shouldn't need this check. Extra line. Is the exception message good enough for people trying to return this result from a controller?. Would it be less code if we make a VDDFactory<T> (similar to CollectionModelBinder)?. Trailing newline (+ in the file above). Shouldn't need this. This returns null since switching to Assembly.Load. My guess is it's getting loaded in to a different load context. Regardless, since we already load the assembly by path, we can use that to look up types (and attributes in the future). Verified that this change fixes precompilation tests which are currently broken.. MapPageRoute in System.Web was additive. We could call it AddPageRoute if we want to be super clear, but I wasn't sure if @DamianEdwards wanted to keep the method signature.. Essentially what we do with /Index and / routes, no? Should we call this out in the summary \\ remarks of this method?. Renamed to AddPageRoute . Presumably this is just stuff moved from the other invoker. I don't need to fine-grain review it, right?. This should go away once we've have precompilation using the generated attribute. . \ud83c\udfb1 . Kept it in case we super care about supporting this. I'm not sure you'd want to support string tokens with quotes in them. And if you truly wanted a quoted route, you could use AddPageRoute.. Don't we want to to stop parsing early and all that? This code is used in action descriptor creation so we want it to be quick. > before the handler method is invoked, after. !HasPageModel. o.o?. Wouldn't you want to reset the cursor before the if?. Task.CompletedTask. . Couldn't we just set this when constructing the descriptor?. Boo. One assignment per line.. () => invoker.InvokeAsync(). Can you Assert the exception instance?. Can you verify the ResourceFilter. There's no way to tell if it got invoked.. There's a couple of types referenced by precompilation But we need to switch to attributes first to get precompilation tests to work once we delete codes from it. This is first pass. Once this is in, we can delete a bunch of code from precompilation and then follow up with removing code from this repo.. Same comments as other Antiforgery.. Yeah. Can't rename it right now because it's referenced in precompilation.. We have tests via ViewsFeatureProvider: https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNetCore.Mvc.Razor.Test/Compilation/ViewsFeatureProviderTest.cs#L94. Maybe not. We can remove the other page feature provider and let this type do the discovery for pages and views alike.. I'm going to get this in and clean up precompilation and follow up on this today. \ud83d\ude04 . The comparer wasn't set although it seems expressly designed for it.. this null refs. Just using a HashCodeCombiner instead.. doesn't look like there's any significance to count or this branch.. George Boole is disappoint.. unused. We null check prefix. We null check setupAction. Seems to be fixed. Presumably we want to call the Equals(ModelMetadata) overload.. Yup. I wanna do another PR with C# 7 shenanigans. . context?.. Can you add an assert that says TempDataProperty-Test2 isn't stashed in the tdd?. nameof(TestPageModel.Test). Couple of other places in this file . Mock.Of<PageSaveTempDataPropertyFilterFactory>(). Layering concerns?. Did we intentionally choose not to add a PageFilterAttribute or was that an oversight?. Will undo. Do we want PageModel to implement IPageFilter, IAsyncPageFilter and discover those too?. These are just testing parser behavior. We shouldn't need separate tests for it here.. eww tests\n. This is unused now. Formerly used by precompilation.. Could we use this in our functional test? So we test the tester?. The action descriptor(s) would still be valid if the compilation expires, but it's just the cached types that need to be invalidated. Thoughts \\ concerns?. Ahh, there's another overload that does not take basePath (which is what we use in the view engine). I'll switch to it.. We do have a couple of options here:\na) Pump the compilation change tokens to an IActionDescriptorChangeProvider. This seems difficult though given the layering.\nb) We could add change tokens _ViewImports for all files as part of the PageActionDescriptorChangeProvider. It's not super bad since already do file traversals as part of the PageADP. Given that there's so there's so much overlap in the actual number of distinct change tokens, this seems a bit unnecessary.\nc) We could add change tokens for _ViewImports for a (non-existent) file at Pages root. All the other _ViewImports are already tracked by the */.cshtml. \nThoughts on the lot?. Wouldn't we want to force add these  (and not TryAdd)?. This got removed as part of the netcoreapp2.0 conversion (https://github.com/aspnet/Mvc/commit/1c5e4176069ea20671e1738ac599e544633f47ce#diff-584adecdd95f7d31bf6950c51109cb36L17). I assumed bringing back portable pdb reader would suffice, but that solves a different problem. . The issue here is the /_ViewImports.cshtml (the one above the /Pages directory. For (c) we say GetHierarchicalItems('${PagesRoot}/Index.cshtml\") and watch all those files along with $\"{PagesRoot}/**/*.cshtml\". Cache the delegates as statics?. Should this break after the first item (similar to BindingSource)? It's picking predicate arbitrarily anyway. current ActionContext. Just seemed sensible not to have nested CompositeChangeTokens in the most common case.. No, the viewcontext gets you access to the two.. The methods should probably be named BeforeRazorPage \\ AfterRazorPage since they're logging individual page execution.. Also associated. Can you update the docs on PagesBaseClassAttribute:\n\nApplying this attribute to a type suppresses discovery of handler methods ~~and bound properties for that type~~.\n. What does that look like - something that looks like AttributeRouteInfo?. If all we do is set a feature, do we need functional tests for this? Wouldn't unit tests suffice?. ControllerModel has ControllerProperties (https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ApplicationModels/ControllerModel.cs#L96). BoundProperties is on the ControllerAD.. PageActionDescriptor doesn't have a type info (just the paths). We need to pass this to the provider in some format, no?. Don't worry, one of these days all our null checks are going to look like this \ud83d\ude08 . Well, that's the annoying bit - it only works for assignments, not regular null checks. Super inconsistent. Sort of one of the reasons I wasn't a big fan of it.. Where would you want them to go? (So I know for the work item). Looks like setting this might be short-circuiting an extra (unnecessary loop). Without this line, consider this:\n\n\nCaller A gets a cache miss and enters the critical sections sets a TCS.Task as the Cache Entry\nCaller B does a TryGetValue and gets the TCS.Task\nCaller A replaces the CacheEntry.Value with the task returned from the TagHelper.\nCaller A does TCS.SetResult(null);\nCaller A's output is valid html. Caller B's output is null. It has to redo the TryGetValue at step 2.\n\nIt's pretty unrelated to the actual change, but might help us remove the while loop. . Should this be baked into MemoryCache? Something along the lines of \nDefaultEvictionPolicy\n{\n   Absolute, Sliding, None\n}\nand consumers opt out if they explicitly want long-lived caches?. Don't think this is an eviction criteria.. Verifies we aren't attempting to register a call back on a disposed token.. Saves me 8 lines of code!. Sure, It's one fewer ns to import in your Startup.. <Content Include=\"xunit.runner.json\" CopyToOutputDirectory=\"Always\" />. handlers can be null. Probably. We should do what we do elsewhere. \n<None Include=\"xunit.runner.json\" CopyToOutputDirectory=\"PreserveNewest\" />. I should port these over to Pages as well.. ^? Presumably we don't want to expose this. Should this just be CultureInfo? It would match what we do in Localization (https://github.com/aspnet/Localization/blob/dev/src/Microsoft.AspNetCore.Localization/RequestLocalizationOptions.cs#L92). > build output folder or the {Path.GetFileName(depsFils.FullName)} file from your application's output directory must be copied. A common ~~case~~ cause for this ~~scenario~~ error is running tests with shadow copy enabled.. https://stackoverflow.com/a/6584150 . Do we actually want this thing to be public? Wouldn't you just try-catch the exception if you expect the server to throw?. Sorry, I meant the input - UseRequestCulture(string culture, string uiCulture) which would result in this being CultureInfo.. Is this meant as verification? Need docs if it is.. Their fluent setup is super weird. Undo?. Do we want to keep this behavior? We used to parse Razor with the project's language version, which nearly never does the right thing when users set it to the newest C# version.. virtual?. IList<MetadataReference> AdditionalCompilationReferences and Action<RoslynCompilationContext> CompilationCallback are both still on this type. So we're not necessarily doing much about\n\nPutting a Roslyn type like this in DI via options causes a LOT of things to be jitted even when we don't compile anything. I don't think the callback allows you to modify the parse options (since it's working on the already parsed syntax tree), you should be able to affect the compilation options though.. > Basically if you don't like the fact that a project setting is required to use c# 7.1\n\nI wasn't complaining about that. To me, it makes sense to explicitly tie parsing a Razor file to the version the Razor parser rather than the project's configuration in the default case. I'd be ok if we allowed the user to explicit way to configure CSharpParseOptions and they chose to set it to a language version rather than us implicitly changing it.\nThat said, I'm not super worried about this behavior. \n. Let me check. Does it use the ATF instead of the PTF and just work when you do this?. Can you add a test where the priority is specified (or just amend this to include it)/. > is no other expiration criteria ~~gets set for the tag helper~~ is specified\nUp to you if you want to change it. Not picky \ud83d\udc4d . Oops, this needs to be removed. . Presumably this doesn't affect tests (Travis \\ AppV are failing because the Razor changes are in).. lol. Yeah. I think it needs to be moved to the CreateEntry call.. You probably don't need the GetTypeInfo() call anymore. Type.Assembly is a thing now.. Same comment applies elsewhere.. Would we want these to settable since you can clear them?. If ~~we're~~ failed or some variation thereof. . Empty line. Should we have ProcessContentAsync return Task<CharBufferHtmlContent>? Wouldn't need the cast at that point.. We specifically want to await here because we want to evaluate this in the scope of CreateEntry. If you'd like you could expand the comment on Line #110. C#\nDebug.Assert(content is CharBufferHtmlContent);\nvar charBufferContent = (CharBufferHtmlContent)content;\nreturn charBuffer.Buffer.Length * 2;\n. public PagedCharBuffer Buffer { get; } and drop the field. Do we need an announcement for this since we could be breaking users consuming IMemoryCache in their applications? . Can you add a comment that says why we aren't using a using here. Just so that nobody changes it in the future.. Do we want this for 2.0.0?. Bad @Eilon . I could add more scenarios, but at that point, we'd be testing Roslyn's code base.. No tests for this because I wasn't sure if there's a specific reason controllers use the filter factory route to add the actual filter.. Why do we have these properties?. Use a different marker type for pages? I thought we were kinda ok changing this since it's in .Internal. We have two different types of ResponseCacheFilter though. I didn't want to go down the inheritance route because that seemed gross.. This is kinda annoying. ResponseCacheAttribute is a IFilterFactory and ends up adding ResponseCacheFilter : IActionFilter to the model. It ultimately does nothing, but it would be nice if we could avoid having it in the list at all.. null check?. Should this be an IApiDescriptorConvention instead? There's nothing restrictive about it being for errors only here. . Support for Extension Members. I'll play around with it. I just went with what we do in SerializableError because it looked easy . Good catch!. I guess we could use a standard \"An unknown error has occurred.\" That said, \"SHOULD\" is somewhat more lenient than \"MUST\", so maybe this is fine as it is.. leave this alone for 2.0.1?. Ideally I'd like to change how GetNormalizedRouteValue works to verify it returns a value only if it's present in RouteValues but that would be too wide a change for 2.0.1. We could consider it for 2.1.0 though.. Will fix it. Assemblies = assemblies ?? throw new ArgumentNullException(nameof(assemblies)); for \ud83d\udcaf points. We should probably document how this works i.e. we look for the first directory containing the pattern solutionName starting from the directory containing the application.. ArgumentException . Should this do a Console\\Debug.WriteLine saying no IWebHostBuilder was discovered and a default one would be used? Assuming of course the test runner \\ VS etc prints the message.. DefaultAssemblyPartDiscoveryProvider is an internal type. We shouldn't document it in our public APIs. Is the inverse supported IgnoreAntiforgeryToken on the controller and Validate on the action supported? Do we need a test for that?. Could we stash an instance of the context in the request rather than storing individual state pieces?. Intentionally not including new lines to avoid dealing with in the test. Let me know if you feel strongly about it.. var httpContext = (HttpContext)state;. Should this be a regular cast? I think it would be fine to blow up if something \\ someone replaced it with a random object instance.. Will remove. Seemed like a small enough change especially given how commonly we would now use this code path in the FindPage \\ FindView code path.. Doesn't work because it infers this IMemoryCache.TryGetValueu(string, out object) overload. . This sort of makes it easier to reason about the lookup by name.. Sure, this could be removed.. Addressed prior to merging this in https://github.com/aspnet/Mvc/commit/a7cc243942c4bdcf8028ad76571432258b1b2533.. Yeah, that doesn't sound too bad.. We want to preserve path separators (they are all meant to be forward slashes). Path.Combine canonicalizes paths to use OS dependent path separators.. Yeah, that's how @DamianEdwards wants this. The intent is to allow folks to migrate from Views -> Pages while keeping things working.. We disallow these in the property setter (https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.RazorPages/RazorPagesOptions.cs#L32), but sure, we can throw for extra goodness.. That's what the check in line #47 does, no?. Nope. That's just to get an idea of what the API description looks like. I'll undo the sample changes before this goes in.. The VS rules only complains if it's a single line statement. I can change it back if the difference is jarring.. @rynowak thoughts? We would change the type name too (it's currently named ProblemDescription) if we were to change this.. Good idea on the EF bit. I'll take a gander at their code.. > Does our ApiDescriptionProviderContext have some way to say that certain ApiResponseType values only apply to certain HTTP methods?\nUnfortunately not (and AFAIK neither does Swagger 2.0). \n\nAlso, what would be the design for how to say your action does not ever return a 404?\n\nI intentionally left out any way to configure behavior at this point. We can do this in a follow up iteration. But I agree, ideally you want to be able to describe these in some way that affects both the Api description and the filter.. This was for returning a \"default\" error response.. Sure. .Infrastructure namespace? It doesn't seem top-level worthy.. We have the pattern elsewhere in Mvc. Generally, you have a default provider and the user may append additional providers to run after to customize behavior. Doing so you let's you start from a default configured instance. The factory is meant to be a driver for the providers and we don't expect users to replace it.. ProblemDescriptionAttribute is already a filter, I guess I could use that instead.. Yup, missed updating it.. Yup. The check needs to be more stringent. . Could this be cached in the ctor? TypeDescriptor.GetConverter does a bunch of work.. ?? throw new ArgNull. For the following scenario:\n```\n// /_ViewImports.cshtml\n@inherits CustomBasePage\n// _ViewStart.cshtml\n@\"Hello world\"\n// Page.cshtml\n@page\n@model TestModel\n```\nThe model value ends up being null for the _ViewStart since no Model property is available on it. However we're starting with a VDD<TestModel>. This results in an exception when we attempt to initialize the page. The fix here is that if you're attempting to initialize a page without a model property, you will get a VDD<object>. We want users to derive from PageBase if they do choose a custom base type.. EF attempts to look for Id and {ModelName}Id. We wouldn't be able to do the latter, but I think it would be reasonable to look for the pattern {something}Id (exact case). I'll file a bug for this. We need a way to represent default response types. We could look for the value of the id argument and include it as part of the detail. . This is the only other StatusCodeResult subtype that's built in to the system. Seemed low cost to add it.. overtly complicated code ftw. But I do get \ud83d\udcaf points. Is there any value in making this contravariant? Maybe for scenarios like IActionResultExecutor<NotFoundResult> = new StatusCodeResultExecutor();. Sure.. This includes BufferBody which is not exactly a limit. Should this say \n\nUnable to apply requested form options since the request form has already been read.\". > Read request form with the configured form options.. if (filters[i] is IRequestFormLimitsPolicy policy){ return ReferenceEquals(this, filter); }. \n",
    "dougbu": "Feels like an early optimization.  Provides a shortcut but doesn't save that much typing.  Also users will still need to use HttpStatusCodeResult directly when they wish to set the status description.\nMy general suggestion is to build / integrate the code necessary to enable all important scenarios.  Leave shortcuts such as the existing HttpNotFoundResult and HttpUnauthorizedResult out for now.  Then evaluate difficult or uselessly verbose patterns for common scenarios once we have the core complete and we get familiar with the patterns they require.\n. Might just be me but virtual paths are an important security boundary, not just a bunch of code up for deletion.  We probably don't want the physical file system to resolve paths such as /Windows/System32/drivers/etc/hosts.\n. I'm not sure we should carry all of the current ViewData / ViewData<T> forward.  Later, when we're rendering views, templates, and so on, the Model will change frequently -- per-rendering.  But the dynamic aspects of ViewData (everything but Model and SetModel() today) are scoped to the request.\nIs it possible to split these two semantics and move the Model property somewhere else, together with other bits that will have narrower scopes -- e.g. down into the Controller and ViewContext types?  That might have the nice side-effect of making ViewData semantics more purely Dictionary and dynamic-oriented.\n. Always glad to be of service.\n1. I wrote a long description of the commit :)\n2. The intended public surface for views is all in IRenderHtml_.cs and Microsoft.AspNet.Mvc.Rendering\\Html\\Extensions_.  Note what's virtual and what we decided to leave as extension methods.\n3. IRenderHtml<TModel> and IProvideHtmlSettings are the new services (once open generics work in DI)\n4. INeedContext and its use in RazorView<TModel> shows the pattern we'll use for passing ViewContext around, especially for properties visible to users.  (We'll pass the ViewContext around explicitly to services and other classes.)\n5. If anything in the new Expressions namespace pops as a potential service, lemme know.\n6. And, yes, I copied over a lot of old code and changed it mostly to fit our new world.  For example some static classes contain methods previously hanging off ModelMetadata, ViewData, et cetera.  Remember, there's a certain quality in quantity.\n. All comments addressed with latest changes\n- well, I did turn a few questions into new issues\n. New iteration out.  Addresses all comments received.\n. Will send this out in pieces.\n. I'm done and only found a couple of nits. :ship: it\n. @pranavkm please have a look at this one.\n. @yishaigalatzer should we go ahead w/ this despite breaking testing in VS?\n. @bricelam I can't discover Data tests on my machine either.  Are these VS integration issues specific to my machine?  Or do we have a general problem w/ XUnit 2.0?\n. @bricelam are you recommending TestDriven.Net instead of updating the XUnit runner .vsix? Does that installation solve the test discovery problem in VS (specifically the RemotingException during that phase)?\n. @bricelam In addition TestDriven.Net costs $169 per developer for the Professional license needed in a corporate environment.\n. After correcting my smallish comments :shipit: \n. Yeah I've got some local changes that take care of them but won't update the PR 'til the weekend\n. Rebased and updated the commit on this branch.  Ready to go.\n. This bug is relatively minor and primarily about the backing store for FormContext.  The current semantics implemented in MVC 6.0 are fine but using HttpContext is a \"bit ugly\".\nSeparately @rynowak's original comment (in the discussion where I referenced this issue) was about another possibility: \"Should we add the default to the Items collection here?\"\n. This bug applies to most Generate*() methods in HtmlHelper and HtmlHelper<TModel> (all new names).  We will likely revisit the virtual in those classes as we implement MVC's tag helpers.\n. The (public) HtmlHelper.GetClientValidationRules() method and fact HtmlHelper.GetValidationAttributes() is protected virtual provide everything HtmlHelper subclasses need in this area.  Reopen if we get pushback.\n. looks like the AttributeEncode() methods never got ported into latest HtmlHelper class.  suggest we change this bug to instead port them over, perhaps as IHtmlHelper extension method that simply call their Encode() equivalents.  the updated issue is a minor back-compatibility issue.\nnote I'm no longer in favour of removing or discontinuing support for these methods.  they are familiar to MVC 5 developers and don't cost much to support.\n/cc triage (@yishaigalatzer) \n. Duplicate of #1232 given where these methods should live (if they live).\n. No don't ask me :smiling_imp:  But I'll add a bit anyhow.  [Display] has the nice feature of working for fields, which is helpful when changing enum constant names.  Less usefully for WebFx [Display] can be applied to parameters.  On the other hand [Display] can't be applied to classes or events but [DisplayName] could be.  Do we need support for renaming classes?\n. :package: looks ready btw; :shipit: \n. @Eilon the renaming classes \"thing\" was a question that @pranavkm answered.\n. @Eilon, I agree w/ @pranavkm .  We have [Display], that supports our enum features, and we don't need the class renaming / event renaming features of [DisplayName].  So we don't have an ask of the CoreCLR team (here :smiling_imp:).\n. Accidentally merged and immediately reverted.  Will open a new PR.\n. Added a commit which restores TypeExtensionTests\n- demonstrates use of [InternalsVisibleTo]\n. One more commit that @rynowak should like.\n. Squashed and merged: 4bc7c36522e979c6d8c06d4ff7e7ed78dca9420f\n. Not moving files around at this time. Such moves would mainly serve to make this PR harder to read.\n. Addressed comments\n. Squashed and merged as 3a0add8be8c21e312cb27d3fe0e0e6a2204fd951\n. You've merged this, correct?\n. Tests no longer fail because IValidatableObject is now available in CoreCLR.  Well, in my coreclr.test.build branch, where they can build :smiling_imp:\n. @Eilon I agree the TModel known to the controller (when an action calls View<TModel>()) is independent of the TModel in RazorView<TModel>.  My point wasn't to tie them together into one but to provide the controller's information to MvcRazorHost as a fallback -- an improvement over dynamic when the view lacks an @model directive.\nFor example IActionResultHelper.View() might be IActionResultHelper.View<TModel>() or have an overload accepting a Type or type name string, et cetera.  That is I was suggesting a change to the contracts here.\n. This PR seems to match the description on the lid: It updates the (renamed) AppDomainControllerAssemblyProvider implementation to focus on assemblies referencing ours (while ignoring ours).  But it's difficult to see why each new [AssemblyNeutral] interface is needed (at least on GitHub).  Do you have a diagram you could share or draw on a wall?\n. @davidfowl, @pranavkm OK I can see the tree with ILibraryManager at the root.\nSo to confirm: All [AssemblyNeutral] interfaces added in this review already exist and are being imported from the host?  And the ILibraryExport, IMetadataReference, and ISourceReference interfaces in Microsoft.AspNet.Mvc.Razor are already up-to-date?\n. :ship: it.\nGot positive answers from @pranavkm on my questions.  Given the urgency of this fix (MVC sample is failing due to removed interface), let's get it in.  Handle the internal constructor question, et cetera separately.\n. :ship: it, modulo fixing the ViewData copy constructor\n. :ship: it after dealing w/ at least the two non-nits\n. Updated this PR\n. bump\n. Squashed and pushed\n. Note we need to \"build make-roslyn-fast\" again to get far enough to see the warnings about multiple versions of the same dependent assembly.  Or build in VS :frowning: \n. This issue has 2 parts:\n1. ViewData and ViewBag properties are dropped when Controller.View() is called.  I've got a PR out (#116) that fixes this issue.\n2. ViewBag.Unset hangs the page.  This is issue #118.\nSo this issue will become a dupe of #118 once I push the fix for #116.\n. The status of the base branch isn't clear in GitHub.  I suspect this PR expects most IViewComponent* interfaces and attributes already exist.  but I am not sure where to look for definitions of types you're not touching here.  Where do I look for IViewComponentHelper and IViewComponentResult for example?  Any classes I'm missing when I look just at this PR?\n. My comments are predominantly minor.  Main things preventing me using a lovely ship icon are:\n- \"how would this user add a TagCloud property to their view page?\"\n- code / concept duplication between controllers and view components e.g. could some of this be shared and use a core ActionOrViewContext?\n- a nagging doubt about scenarios for replacing DefaultViewComponentInvokerFactory.  that seems to be about providing more context but ViewContext already contains at least a couple of dictionaries where users can stick anything they like e.g. viewContext.ViewData and viewContext.HttpContext.Items.\n. :ship: it\n. :ship: it\n. Addressed comments.  Also rebased the original commit.\n. Closing.  Will start new, smaller PRs as Yashai requested.  Let me know there if I miss some changes from here!\n. @rynowak, @davidfowl and I talked offline.  We agree this is the quick fix, for use 'til we have new tooling that supports assemblies containing only [AssemblyNeutral] interfaces.\n. Closing because I can't change the base branch GitHub uses for diffs\n. Agree we know the legacy pattern and that we'll make some change here.  In the meantime I accidentally found a fix for #118 and thought I'd send it out.\nIn any case we need a correct implementation however we do ViewBag.\n. To fix the bug.  As a secondary consideration, I need TryGetValue for @Html.Value() and so on.\n. Changing ViewData layering is tracked in Jira: WEBFX-169\n. Closing.  Will do a slightly larger fix for #118 and WEBFx-169 before next helpers infrastructure piece.  Will add TryGetValue() then.\n. :ship: it\n. Addressed all comments\n. Add commits to address comments\n. Squashed and merged\n. :ship: it\n. Squashed and pushed\n. :ship: it, modulo any nits you address\n. :ship: it; just hit this myself (hadn't been building in VS)\n. Addressed comments\n. Addressed recent comments\n. @NTaylorMullen what were the upshots of the following questions:\n- Whether to name the method FindView or FindViewAsync and same for FindPartialView?\n- Whether to take a different approach than passing errorMessage into EnsureViewEngineResult?\n. :ship: it\n. @NTaylorMullen doesn't look like you've updated this branch.\n. I'd still rather see the changes than sign off as-is.\nThat said, force-updating the base branch to match what you finally merge into dev and push should allow you to locally rebase or even set-upstream-to dev here.  As long as nothing changes dev before you push this branch, you should be able to continue to use this PR.\n. Updated branch to use latest inject.helpers base.  Currently that base matches dev.\n. :mount_fuji: or perhaps a smaller bump\n. @yishaigalatzer unfortunately the commit descriptions are kind-of buried.  Second commit mentions \"remove references to ExpressionFingerprintChain and so on to minimize classes we bring over now (and remove one cache)\".  Another way to go would be to remove all caches, pending performance data showing we need them in \nAre you suggesting I pull in the additional classes now?\n. Rebased and pushed (forgot to squash)\n. Branch updated\n. Squashed and merged\n. all comments addressed in latest commit on this branch\n. Squashed, pushed to make minor changes visible, and merged into dev\n. Main topic for conversation is #620.\n. Resolved not to support legacy validation.  Will shortly change #620 to cover removing the partial support already currently in MVC.  Therefore do not need GetJsonValidationMetadata().\n. Addressed comments, rebased, and updated this branch\n. Rebased.  @yishaigalatzer bump\n. Squashed and merged\n. Rebased and added a couple of commits to this branch\n. Addressed Taylor's nits and added that commit here\n. Squashed and merged\n. Squashed and merged\n. once VisitedObjects is gone and @yishaigalatzer agrees; :ship: it\n. maybe my naming comment is not a nit but in general :ship: it, after @yishaigalatzer confirms\n. waiting to see DisplayFor in the correct class\n. :ship: it ... other than a few long lines, the missed [NotNull], and @yishaigalatzer or @Eilon signing off\n. talk to @yishaigalatzer then :ship: it\n. :ship: it from my perspective\n. please clean up long lines to make this easier to review\n. Added a commit addressing comments so far\n. updated PR\n. Squashed and merged\n. Is this something we should get done for Alpha?  If so Jira will be a better bet because our focus is on the major gaps, tracked as features there.\n. nit: place TypeHelperTests at top level of Microsoft.AspNet.Mvc.Core.Test.  You've merged TypeHelper into a non-Rendering class.\n. :ship: it otherwise\n. Why are FormContext, ICanHasViewContext, and TemplateInfo moving files without changing their namespace?\n. Separately, I'm not sure it makes sense to put ICanHasViewContext in a namespace exposed almost everywhere.\n. Shouldn't this wait 'til our team are all using the latest tooling?  Right now only a couple of us have made that move -- by design.\n. @davidfowl you've merged a version of this and the PR can be closed, correct?\n. Updated this server branch as a FYI, showing comment I added for value as byte[] and VS-forced change to .kproj file.  Note first commit is squashed version of previous set.\n. Rebased and addressed CR comments; have updated the server branch\n. Squashed and merged\n. bump\n. Rebased and merged\n. Adding ViewBag to ViewComponent is a simple matter of pasting some boiler plate.  Is this an urgent issue?\n. @Praburaj GitHub auto-closed this issue.  Could you please confirm the fix?\n. :ship: it; but address my few nits and confirm @yishaigalatzer or @Eilon's agreement\n. @pranavkm your change to Microsoft.AspNet.Mvc.ModelBinding.Test doesn't compile for CoreCLR.  Issue is no longer that IValidatableObject is available only in .NET.  Now problem is Mock only exists in .NET.  Any objection to reverting the changes to that file?\nNote problem isn't visible in regular build.cmd.  Either build in VS or run k test in the test\\Microsoft.AspNet.Mvc.ModelBinding.Test directory.\n. Updated as a FYI, making minor self-review changes visible.  Merging now...\n. Squashed and merged\n. comments say you're \"Adding Regex and DataType validators\" but I only see support for one DataType attribute -- [Url].  am I missing something?\n. Does this PR support any other [DataType] attributes, including [DataType] itself?\n. Odd this PR wasn't auto-closed ...\n. :ship: it\n. looks good so far but I'd like to see the updated tests after rebasing\n. :ship: it\n. @Eilon we have a separate work item covering unit tests for IHtmlHelper<TModel> -- WEBFX-170.  This is pushed to later to reduce the size & complexity of these PRs.  But it's getting close to the top of our backlog :smiling_imp: \n. other than one space, looks :ship:-worthy to me\n. See also WEBFX-186\n. @Eilon we expose IHtmlHelper<TModel> in RazorView, not HtmlHelper or HtmlHelper<TModel>.  Nonetheless, we are \"leaky\" w.r.t. implementation detail helpers:\n- IHtmlHelper<TModel> includes all of the longest overloads for each of the helper methods.  But each of those method implementations do little more than (perhaps) look up metadata and call a Generate*() method.  So they're already acting as a facade to something else and we should make that line more crisp.\n- We could also argue the longest overloads themselves are not intended or useful for app developers.  I'm not positive about this one but have heard the point (from you :dancers:).\n- The new DisplayNameForInnerType() method exists in IHtmlHelper<TModel> only to work around C# limitations and is definitely not for app developers (though they could call it -- an ugly choice compared with using DisplayNameFor() overloads).\n. Added a quick fix and use of default templates in the MVC sample.  With these commits and the #266 fix / #267 PR cherry-picked into a branch, default display templates now work end-to-end.\nComments appreciated!\n. added a commit addressing @Eilon's comments\n. Squashed and merged\n. My PR (#267) essentially goes back to what MVC does.\n. Should have mentioned: Legacy MVC does what I've restored here.  Main differences are legacy MVC lacks the Success property and uses a StringBuilder to join the searched locations.\n. Rebased and merged\n. :ship: it\n. :ship: it; :love_letter: \n. does this help make more warnings visible when using build.cmd?\n. :ship: it; my question was just a potentially-unrelated hope\n. Please also update Microsoft.AspNet.Mvc.Core.ExpressionMetadataProvider, especially need the missing container property to GetMetadataFromProvider().  For more information on what we removed to work around the Container gap, see #170, specifically commit https://github.com/aspnet/WebFx/commit/3adafc58e83a3485a48cf30a54775205c32729ff.  (That commit doesn't exist in our history since I made additional changes and squashed things.)\n. FYI we inherited loads of properties from System.Web.UI.Page into System.Web.Mvc.ViewPage and similar classes.  User and Request are just two examples.\n. Please have a look at the \n. @yishaigalatzer we're still tracking HTML helper tests as a separate Jira item -- WEBFX-170.  For one thing it's really not a good idea to rewrite all the tests to workaround the lack of IHtmlHelper then fix WEBFX-186, restoring that interface.\n. @yishaigalatzer I think this is ready to :ship: now that @sornaks has the #190 fix out.  Do you agree?\n. This issue is about setting Container on the ModelMetadata instance ExpressionMetadataProvider.GetMetadataFromProvider() returns.  This method is used from both ExpressionMetadataProvider.FromStringExpression() and ExpressionMetadataProvider.FromLambdaExpression().  The MVC 6 implementation of this method does not set the Container property.\nNot clear this issue remains relevant since referenced PR (which restored ModelMetadata.Container in MVC 6) was not merged.\n@pranavkm do we need this property at all -- at least for backward compatibility of our public surface?\n. :ok: Probably makes sense to expand this to focus on the ModelMetadata.Container property rather than the detail of setting it in ExpressionMetadataProvider.\n@pranavkm do you agree we should update the scope (and title)?\n. I'd like to see this work split in 3: A PR for each of the NullDisplayText fix and the SimpleDisplayText addition, separate from the \"more trivial helper\" additions.  Please also address the SimpleDisplayText TODO in DefaultDisplayTemplates in that 2nd PR.\n. Looks :ship:-able.  Does this get the MVC sample FiltersController working again?\n. :ship: it after adding that [NotNull]\n. Updated server branch after rebasing\n- also add two commits to handle IHtmlHelper additions in new files\n@Eilon still ready to go?\n. Closing this one because we now have issues for all remaining pieces.  Current status:\n- SimpleDisplayText, ShowForDisplay, ShowForEdit, and IsRequired done\n  - small fix for IsRequired included in [DisplayName] PR\n- [DisplayName] support out for PR #841 (issue #532)\n- leaves only HideSurroundingHtml (issue #843) and HasNonDefaultEditFormat (issue #844)\n. Don't need [AllowHtml] or RequestValidationEnabled because we don't have request validation in this system.  Leaving that legacy behind in MVC 5.2.  Questions on need for other missing properties remain open.\n. One more property not present in MVC 6.0's ModelMetadata:\n- AdditionalValues, a Dictionary<string, object> which adds a property bag to ModelMetadata and together with [AdditionalMetadata] supports a non-provider way to extend ModelMetadata.  Odd the interface is a concrete class rather than IDictionary<string, object>.  Either way we probably want this extensibility point (including [AdditionalMetadata]) in MVC 6.0.\n. To reiterate, MVC 5 does not rely on these ModelMetadata properties and instead provides the additional metadata for user extensions to read.  But MVC 6 doesn't provide this metadata.\nThe remaining properties are:\n- AdditionalValues described just above and linked with the [AdditionalMetadata] attribute that also doesn't exist (yet) in MVC 6.0.\n- ShortDisplayName which it turns out MVC 5 writes based on [Display(ShortName=\"\")] when using the non-default metadata provider (DataAnnotationsModelMetadataProvider) but never reads.\n- Watermark which it turns out MVC 5 writes based on [Display(Prompt=\"\")] when using the non-default metadata provider (DataAnnotationsModelMetadataProvider) but never reads.\nLeave PropertiesAsArray aside since it's internal, likely mostly for performance (a micro-optimization from the looks of it), and doesn't fit well in this issue.\nside note: Not writing two of these properties when using the default metadata provider (CachedDataAnnotationsModelMetadataProvider) may be a minor MVC 5 bug.  If we add them in MVC 6, might want to provide correct default values.\n. See #1758 for an interesting use case of AdditionalValues.  Probably possible to create an ugly mess of static dictionaries to work around the missing property but AdditionalValues is the right way forward.\n. @yishaigalatzer this issue came from a conversation @pranavkm and I had.  One example is that we support [CreditCard] but not [DataType(DataType.CreditCard)].  We could definitely support base [DataType] attributes with the following passed to the attribute constructor, given the subtypes of [DataType] we already support.\n- DataType.CreditCard\n- DataType.EmailAddress\n- DataType.PhoneNumber\n- DataType.Url\nThe jQuery.Validation package (jquery.validate.js file) also supports date, dateISO, number, and digits validations.  Some of those might be useful if we want to go beyond the above 4 base [DataType] choices above.  Could check w/ @DamianEdwards.\n. made subject more specific since we have server-side validation adapters and those seem to be working\n. This request duplicates issue https://github.com/aspnet/WebFx/issues/323\n. Also part of https://github.com/aspnet/WebFx/issues/323\n. Branch updated ...\n. Rebase and add one more special case\n. bump @Eilon or @yishaigalatzer \n. :ship: it\n. Message already seems pretty good.  Certainly not throwing an NRE now.  Is this issue still relevant?\nFYI message from Autofac, when using .NET 4.5:\nThe requested service 'Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider' has not been\nregistered. To avoid this exception, either register a component to provide the service, check\nfor service registration using IsRegistered(), or use the ResolveOptional() method to resolve an\noptional dependency.\nand from the default ServiceProvider, when using K10:\nTODO: No service for type 'Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider' has been\nregistered.\n. My question was really about balancing that usability improvement (which seems slight) against breaking the preferred DI model and explicitly calling serviceProvider.GetService<IActionDescriptorsCollectionProvider>() from the DefaultActionSelector constructor.\n. @sornaks what is the status of this PR?\n. Looks good so far but I see a couple of comments like // TODO: add ModelMetadata.SimpleDisplayText and use here (return SimpleDisplayText) though SimpleDisplayText exists already.  Will filling those gaps be part of a separate PR?\n. :ship: it once @pranavkm is (moderately) happy\n. Updated branch.  Please review but I won't submit 'til I see the MVC sample working again.\n. Rebased and merged\n. @pranavkm don't the .kproj files also need to change?\n. :ship: it; other than that gap\n. Why reorder the items in the project.json files?  Are you changing any actual dependencies -- hard to tell with the reordering?\n. My suggestion is to remove the duplicates but not bother reordering.  Certainly don't mix the two in one commit since it makes it hard to see the \"real\" changes.\n. :ship: it -- thanks\n. curious: did you actually remove any duplicates here?  thought you cleaned those up last time around...\n. :ship: it\n. @DamianEdwards is @Html.Encode() what you're looking for?  It's implemented using the WebUtility class, which apparently (according to @GrabYourPitchforks) is better than HttpUtility anyhow.  We also don't need the old @Html.AttributeEncode() because that implemented a bogus subset of @Html.Encode().\nIf @Html.Encode() isn't what you need, please add a few details to this bug.\n. Specific update required to match MVC 5.2 non-unobtrusive validation: Modify FieldValidationMetada in GenerateMessageValidation() to include a generated Id and validation message,  This sets up information serialized in FormContext.GetJsonValidationMetadata() and included in JavaScript written out after the </form> end tag.\n. Resolved not to support legacy validation.  Will shortly change #620 to cover removing the partial support already currently in MVC.  Therefore do not need additions to GenerateMessageValidation() (fixing the new #620 will however remove code there).\n. Commits 22fafe298c586f6ab4c327086e9ffd2e9f8b2010 thru 7e8870cb9f0e47b3632e17165b32066866f681a0\n. design is fairly simple: when unable to find a select list for a non-[Flags] enum, generate a collection of SelectListItems based on the enum's type.  this generation will be analogous to EnumHelper.GetSelectList(Type) from MVC 5.  (that class' handling of the current expression result will not be included.  #2027 covers a similar but broader enhancement.)\nminor complication for <select/> tag helper is that the Razor source may contain <option/> elements covering at least some of the enum fields.  place a SelectedInformation instance into the FormContext instead of the current ICollection<string> collection of selected values.  this allows contained <option/> tag helpers to inform the <select/> tag helper of explicit values.  the <select/> tag helper will use this data to eliminate duplicates.  also reqruires the <select/> tag helper to call TagHelperContext.GetChildContentAsync().\nmuch of the above is shared with the #602 and #2027 fixes.\nTL;DR\nthis enhancement will not support [Flags] enums.  @Html.ListBox[For]() does not support non-collections.  and, while the form value provider correctly maps multiple values from a <select/> element to an object array, model binding accepts only the first element of that array.  so, no work to enable part of a scenario.\ndetails of preconditions:\n- DefaultHtmlGenerator.GenerateSelect() is called with selectList: null\n- no IEnumerable<SelectListItem> is found in ViewData\n- ModelMetadata.ModelType.GetTypeInfo().IsEnum or Nullable.GetUnderlyingType(ModelMetadata.ModelType).GetTypeInfo().IsEnum\n- enumType.GetTypeInfo().GetCustomAttribute<FlagsAttribute>() == null\n. based on conversations with @Eilon, have simplified the API surface to a helper method that returns a select list for a given enum type.  e.g. public IEnumerable<SelectListItem> GetSelectList<TEnum>() where TEnum : struct.  so basically redo the EnumHelper method from MVC 5.\ncould include ... GetSelectList(Type enumType) if people are passionate about that. \none requirement for placing that method is that it have access to an IModelMetadataProvider.  probably easiest to make it an IHtmlHelper instance method.  unfortunately a static method in SelectList won't meet that requirement (passing in the provider is ugly since user code rarely if ever needs it).\n. - fixed in commits 7dd3afe and 570b1e5\n- updated subject to match final change\n. fixed in commits 1af158330252d56e5828687b74506839febdbd33 to 6cc5cfeae205c934189459d4e827a277155dc93f\n. Needed only for non-unobtrusive client-side validation.  Since method was internal in MVC 5.2, we won't break compatibility if we leave this out.  Suggest closing as \"Won't fix\".\n/cc @yishaigalatzer \n. Copying an earlier comment:\nDiscussion with those who have attempted this work in the past should help determine viability. Work here is either to do a quick-and-dirty prototype or to demonstrate why we should close this issue and leave this code as-is.\n. Yes, I've closed #562 for that reason.  See that bug for some additional details on this one.  It contains a better description of the impact.\n. @Eilon I checked around a bit and now believe the original attempts to do something different here were done to improve performance.  Rewriting the Linq to perform the equivalent of null-conditional member accesses didn't perform any better than letting the original expression throw an NRE.  With a goal of improving the debugging experience, the performance information is good news.\n/cc @GrabYourPitchforks\n. Earlier comment mentioned the lack of performance profiles blocked this work.\n. Users cannot globally configure our HTML helpers.  That is they cannot make app-wide decisions about the helpers.  Their current fallback is to change ViewContext properties in layout pages or in every action.  Should instead allow changes in similar fashion to how AntiForgeryOptions gets changed.\nCurrently ClientValidationEnabled and Html5DateRenderingMode hang off HtmlHelper and are backed in ViewContext.  This makes them scoped and values are automatically copied to inner scopes (e.g. inside @Html.Editor()).  These properties are also relatively consistent with the same-named properties in MVC 5.2.  (HtmlHelper.ClientValidationEnabled was static and ViewContext.Html5DateRenderingMode didn't exist in MVC 5.2.)  However defaults for these properties could be set in web.config in MVC 5.2 and we have no similar settability for them in MVC 6.\n\nOddly IHtmlHelper.ClientValidationEnabled does not currently exist and HtmlHelper.ClientValidationEnabled does not have a setter (though the static property in MVC 5.2 was settable).  Should correct those minor inconsistencies at same time as we address this bug.\n\nThough less used and not scoped, may make sense to obtain default IHtmlHelper.IdAttributeDotReplacement value in similar fashion to IHtmlHelper.Html5DateRenderingMode.\n. Separately we can probably remove both the Feature and Needs design labels since we now have MvcOptions.  More like a small Enhancement now.\n. Updating title to generalize the point. Current HTML helper options must be set for every request.  Users cannot change the options at application startup.\nSpecific properties requiring wider set-ability:\n- IHtmlHelper.ClientValidationEnabled (see ViewContext.ClientValidationEnabled)\n- IHtmlHelper.Html5DateRenderingMode (see ViewContext.Html5DateRenderingMode)\n- ViewContext.ClientValidationEnabled\n- ViewContext.Html5DateRenderingMode\n- ViewContext.ValidationMessageElement\n- ViewContext.ValidationSummaryMessageElement\n- perhaps more that aren't specifically related to HTML helpers\nImplementation should extend settings available in MvcOptions to include the above.\nPrevious title mentioned these settings \"were [available] in MVC 5.2 web.config\".  So this might be considered a regression.\n. Rereading my earlier comments, should mention HtmlHelper.IdAttributeDotReplacement was static in MVC 5.2.2 and is an instance variable in 6.0.  since we don't want static properties in this world, this setting should move to MvcOptions to make it app-wide even though it wasn't read from web.config in earlier options.\n. Copying older comment:\nMuch of this work will focus on the design. Implementation should be relatively simple once that's agreed.\n. \"WEBX-179\" is now known as #448\n. Resolved not to support legacy validation. Will shortly change #620 to cover removing the partial support already currently in MVC. Therefore do not need the UnobtrusiveJavaScriptEnabled property at all.\n. Reassigning because I won't have time in the next 6 hours or so...\n. @pranavkm has greatly improved the coverage of many HTML helpers.  some remaining gaps:\n- ~~functional tests of HTML helpers (not exactly matching the bug title but also not covered elsewhere)~~\n- ~~@Html.DropDownList() / @Html.ListBox()~~\n- ~~@Html.RadioButton()~~\n- @Html.Raw()\n- ~~@Html.TextArea()~~\n- ~~@Html.TextBox() (yup, no kidding)~~\n- ~~@Html.ValidationMessage() / @Html.ValidationSummary()~~\na few other methods are exposed publicly but used in other helpers (and therefore tested indirectly, or will be):\n- @Html.Encode()\n- @Html.FormatValue()\n- @Html.GenerateIdFromName()\n- @Html.GetClientValidationRules()\n- @Html.GetFormMethodString()\n. Crossed out a couple of items in earlier comments.\nSome details on remaining DropDownList and ListBox test gaps.  Test do not currently:\n- use non-null optionLabel and htmlAttributes arguments\n- confirm value sources and their priorities\n- ~~mock an IHtmlGenerator and confirm how it is called~~\n- ~~mock an IHtmlHelper and confirm how extension methods call that~~\n. No idea why this issue was still open\n. We implemented much of this work prior to making these repositories public.  The extension methods provide only additional, simpler overloads in this implementation.  The IHtmlHelper and IHtmlHelper<TModel> interfaces allow replacement in the dependency injection system.  And the HtmlHelper and HtmlHelper<TModel> classes provide our default implementations as well as some extension / customization points.\nThis is not to say all work on HTML helpers is done.  We have some gaps in what has been implemented so far, including missing features e.g. #437, lack of tests (#453), and more.\nClosing this issue because we're tracking those gaps individually.\n. Yes, could be related -- especially if HttpRequest.Path starts after the virtual path root.  I'll look at it this evening.\n. This is our bug.  Current calculation ignores the request URI's PathBase.  I'll send out the fix tomorrow morning.\n. how do you mean \"code like this\"?  UrlHelper is the only other place I can find the string \"request.Path\" and it seems to do the Right Thing(tm) w.r.t. PathBase.\nUrlHelper does use the explicit Add() methods.\n. @davidfowl I've updated the branch per your comment\n. Fixed w/ commit 3ced6016a1bff14188ea8a8ae09c65dfc6279ae3\n. Don't we get this file from the Universe repo?  What will happen if / when the master version is updated?\n. I believe the remaining [DisplayName]-related gaps are limited to @Html.DisplayName[For]() and @Html.Label[For]().  We didn't address those TODO items when we added DisplayName to ModelMetadata.\n. @kirthik note the [DisplayName] attribute does not exist outside full .NET.  Recommend using [Display(Name = \"First Name\")] for consistent use everywhere.\n. Note PR #841 will not address this issue in next iteration.  We'll handle this issue separately, hoping to see [DisplayName] ported outside .NET.\n. Back to Ready because we're currently blocked on the lack of [DisplayName] everywhere\n. @JesperTreetop thank-you for your input.  We appreciate your interest in MVC 6 and hope to see additional suggestions from you going forward.\nHowever in this case we need to decline your suggestion.for a few reasons.  Mainly\n- MVC strives to generate HTML that is valid everywhere, including XHTML conformance.  Attribute names are case-sensitive in XHTML.\n- Special-casing this one attribute name in this one method is inconsistent with everything else in the system.\n. This and #347 are duplicates.  Pick one and carry that forward.  I vote for the one assigned to @sornaks :smile_cat: \n. What are the repro steps?\n. This issue is indeed a duplicate of #443.  I debugged MusicStore then duplicated the setup in the MVC Sample.  Found the stack traces were identical in the two cases, modulo the additional detail available in the MVC Sample because I had all sources available.\nThe NRE occurs whenever we invoke ExpressionMetadataProvider.FromLambdaExpression() when some part of the expression (other than the last) is null.  This affects @Html.CheckBoxFor() through @Html.ValueFor() -- all IHtmlHelper<TModel> methods except IdFor(), NameFor(), and ValidationMessageFor().  The most obvious impact is a first-chance Exception when loading views when the Model is null e.g. a scaffolded Create.cshtml view.\n. @Kukkimonsuta thank-you for your input.  We appreciate your interest in MVC 6.0 and agree this is an issue we should address.  We hope to fix the issue soon and make these helpers more generally usable.\n. :ok_hand: Have already had a conversation or two w/ him.  No concerns so far...\n. Fixed in commit 7845a8fbe10bb4dbd83fda2e2f84c863fcc4aa1a along w/ a few other IHtmlHelper API issues.\n. @yishaigalatzer yes\n. @pranavkm have you updated the branch?  I'm not seeing any obsoleted comments.\n. :ship: it after addressing my remaining minor comments; you addressed my \"outdated diff\" comments\n. @yishaigalatzer sure :smiling_imp: \n. :ship: it after fixing my XML comments comment\n. @danroth27 this feels like a duplicate of #687.  that's where we have all the links to the sub-issues, especially those completed in the most recent couple of sprints.  but this one (and not #687) remains open to mark fact we've got one last sign-off to go :smile_cat: \n. Fix here is to look up enumeration of SelectListItem instances elsewhere in ViewData.\n. as discussed in #1979, another symptom of this issue is that validation attributes are not generated when @Html.DropDownList() or @Html.ListBox() find the selected list in ViewData.  that additional symptom occurs because these string-based <select/> helpers find ModelMetadata about the select list rather than the model.\n. updated suggested fix after a few design discussions:\n- support a new, unique location for the select list in ViewData e.g. ViewData[\"{model key}$select\"]\n- to avoid compatibility breaks, check if ViewData[\"{model key}$select\"] exists and fallback to ViewData[\"{model key}\"] (the current ViewData entry) if not\n- make the behaviour when selectList: null is passed very clear in IntelliSense for the affected methods\n. Triage: this helper is fairly trivial but simple for customers to do themselves.  suggest we not fix this one for RC.\n. I wouldn't recommend using a <select/> for any regular bool.  just use a checkbox.  <select/> is possible but would look strange.\nfor bool?, assuming you want localization and have the resources in your resx file:\nc#\nvar selectListForNullableBool = new List<SelectListItem>\n{\n    new SelectListItem\n    {\n        Text = Resources.Common_NotSet,\n        Value = string.Empty,\n    },\n    new SelectListItem\n    {\n        Text = Resources.Common_True,\n        Value = \"true\",\n    },\n    new SelectListItem\n    {\n        Text = Resources.Common_False,\n        Value = \"false\",\n    },\n};\nthe first SelectListItem isn't :100:% required when using Html.DropDownList[For]() because you can call that method as follows:\nc#\n@Html.DropDownListFor(m => m.BoolQuest, selectList, optionLabel: Resources.Common_NotSet)\n. :ship: it\n. /cc @danroth27 @DamianEdwards this is a top-level question we need to answer in this milestone.\nSub-items such as #163, #435, and #449 would not be necessary if we decide only Unobtrusive validation (and the hooks to override the specific attributes generated) is necessary.  Should also look at whether we need all FormContext properties should that be our choice.  On the other hand, may need extensibility points allowing other non-Unobtrusive JavaScript to be included in or around a <form/> -- not just overriding the Unobtrusive attributes where we currently generate them.\n. Decision is to remove the legacy (non-Unobtrusive) client-side validation feature from MVC 6.0.  Current MVC 6.0 implementation is incomplete and our efforts are better spent on core scenarios.  Similar feature in MVC 5.2 is likely very little-used since it relies on a JavaScript package that isn't even in NuGet.\nTherefore the ask here is to remove ViewContext.UnobtrusiveJavaScriptEnabled and anything relying on that property.\n. Fixed in commits b5dcc9895d428df5fb45dbddf4ccdfea3064cb77 and 43d12539367f5cef0dee86e0ee6db30e5eeddfe0.\n. This is a large work item because it requires new testing infrastructure for a non-in-memory host, for browser (\"experience\") confirmation, and for firing up at least the browser as a separate process.  May also need to define a new test type which does not run on CI machines.\nOpen decisions include browsers and host types of interest as well as details for all of the above.\n. This issue is a subset of #843 and does not need to be tracked separately.  Note the relevant property in ModelMetadata is actually HideSurroundingHtml and the attribute is [HiddenInput].\n. :ship: it\n. :ship: it\n. I'll add tests once I finish repairing VS...\n. Rebased; added some ModelMetadata tests; fixed problems tests found\n. Closing to to reopen with a PR based on the #711 PR branch.  No comments lost.\n. @roryprimrose the general HTML helper extensibility point is the overall IHtmlHelper / IHtmlHelper<TModel> implementations placed in DI.  You're free to subclass HtmlHelper / HtmlHelper<TModel> or replace the default implementations with something entirely new.\nFor this particular coupling, I'd normally recommend overriding protected IDictionary<string, object> GetValidationAttributes(string name, ModelMetadata metadata).  If we made that method virtual, would we solve your issue?\n. Will generalize this ask a little bit and make a couple of other corrections to the HtmlHelper methods and properties available in extension methods and subclasses.  See https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore.Spa/Helpers/AngularHtmlHelper'T.cs for an example of current ugly workarounds for the general issue.\n. Small update related to the AngularHtmlHelper<TModel> class: The GenerateId() method should not need to be public.  For one thing Id() is a direct and public wrapper around this method.  Further ViewData.TemplateInfo.GetFullHtmlFieldName() is already public though admittedly it returns a string and does not HTML encode that value.  Most importantly GenerateIdFromName() is what really should be used (see #704) and it's also public.\n. Closed with commit 40eb05f7e46ed1b79c2ce8c6cb5c182cbdb5b315\n. @harshgMSFT must have fixed this one a while back.  No current symptoms.\n. product code ready and I've just got minor comments on the test code.  :ship: it once you've done those touch-ups\n. Pieces include:\n- add ModelExpression class to support Expression<Func<TModel, TValue>> properties; #1240 @dougbu\n- add code generation for ModelExpression instances i.e. Razor runtime support; #1241 @NTaylorMullen \n- create a sample .cshtml file showing expected MVC tag helpers and their usage; #1242 @dougbu\n- create a new project in the MVC repository to hold <textarea/> and other MVC tag helpers; #1243 @dougbu (part of the <textarea/> work item)\n- <textarea/> tag helper (simpler than <input/> but uses same Razor infrastructure as well as ModelExpression); #1244 @dougbu\n- <input/> tag helper; #1245 @dougbu\n- <form/> tag helper; #1246 @NTaylorMullen \n- <a/> tag helper (action / route links); #1247 @NTaylorMullen \n- <select/> tag helper; #1248 @dougbu\n- <label/> tag helper; #1249 @NTaylorMullen or @dougbu\n- <validation-message/> tag helper (corresponds to @Html.ValidationMessageFor()); #1250 @NTaylorMullen or @dougbu\n- <validation-summary/> tag helper (corresponds to @Html.ValidationSummary()); #1251 @NTaylorMullen or @dougbu\n- (later) add design-time support for ModelExpression instances and reasonable Expression<Func<TModel, TValue>> IntelliSense; #1252\n- (later) add support for leading @ in expression the user types; #1253\nExample open question:\n- should the helper methods exposed from Microsoft.AspNet.Mvc.Core be static in HtmlHelper, members of a new static class, or refactored into a new class (perhaps found in DI)?\n. Nothing left in this item that is not covered in the sub-items.\n. Does the order matter as long as we're careful when cherry-picking into the second branch?  Release is already a couple of commits behind.\n. The question is not whether or not to fix release but the order.  And, if we do release first, do we merge again or cherry-pick over to dev?\n. Fixed in commits 2bfc3e32e934953048ca44395a3038a4076b3839 (merge from release) and 23740085f146bac5ddfd88202ebaf2e413fe7684 (one more file)\n. :ship: it from my perspective\n. terribly sorry @davidfowl the guy's head doesn't mean anything to me. :ship: looks like a ship.\n. Actually two separate issues here:\n1. @Html.Id() does not call TagBuilder.CreateSanitizedId() on the returned value and therefore does not replace invalid characters, no matter what the current HTML prefix or expression name may be.  That is, currently @Html.Id() and @Html.Name() never return different values.\n2. TagBuilder.CreateSanitizedId() is used correctly when adding a default \"id\" attribute to an HTML element.  But it does not escape dots or other characters, confusing even simple jQuery use of CSS validators.\nBottom line the @Html.Id() value currently returned will often contain characters matching [][.#*, >+~=|^$:], all of which could be confused with CSS selector separators.  This not only breaks compatibility with MVC 5.2 but greatly reduces the utility of this method.  Cleaning up just whitespace doesn't make the default \"id\" attribute values much more useful.\n. Currently @Html.Id() returns same value as @Html.Name().  As mentioned above, this value can include characters that can be confused with CSS selector separators.  That breaks JavaScript we and our users may write.\n. As part of correcting the second part of this bug, should address issue discussed in MVC 5.2 bug 2124.  In particular should handle case where first character is invalid or at least the narrower case where first character is an open square bracket.\n. Fixed in commits f9e44ff7f9b358f8d13800165e13f7af10c8b304 and dd5da33a628a956e5f598defbcddb086ca4adc41\n. Thanks @victorhurdugaci and @yishaigalatzer  I suspect something got reversed when copied from MVC 5.2.  Seems important; so I'll look at the issue tonight -- at least enough to get an inkling of the root cause.\n. FYI fix out for review in PR #711 \n. commit added and branch rebased\n. The commit to end all commits and to address Ryan's comments\n. :ship: it\n. The HTML helpers generate valid XHTML and we will not deviate from that in MVC 6.  Instead use the non-minified version of these attributes.  For example @Html.TextBox(... , new { novalidate = \"novalidate\", }).\n. The requested overload already exists.  The following is found in HtmlHelperValidationExtensions:\nC#\npublic static HtmlString ValidationMessage([NotNull] this IHtmlHelper htmlHelper,\n    string expression,\n    string message)\n{ ... }\n. Have we decided to ignore static analysis tools?  For example a tool might warn the developer when that dev accidentally passes null to an interface method demanding [NotNull].\nSimilar points came up in earlier conversations such as https://github.com/aspnet/Mvc/pull/49/files#r10361155 and https://github.com/aspnet/Mvc/pull/239/files#r11693019.\n. @pranavkm could you clarify the issue?  Are you seeing poor performance numbers for a scenario involving templates read from disk?\nAlso\n- TemplateRenderer only creates the StringWriter instance when dealing with templates read from disk; the usual Func<IHtmlHelper, string> doesn't need anything more.\n- The Action<TextWriter> delegate would need the IView, ViewData and ViewContext in its closure; this might mess up the IView lifetime.\n- HelperResult would need to be moved into Microsoft.AspNet.Mvc.Core.\n- The Func<IHtmlHelper, string> default actions would need to be reworked significantly to operate on a TextWriter.\n. branch updated; @yishaigalatzer any comments?\n. From offline discussions: Since [DisplayName] exists only in full .NET and we don't expect it elsewhere anytime soon (if ever), I'll remove the ifdef'd support for that attribute in the next iteration.  Users will need to change [DisplayName(\"My Name\")] to [Display(Name=\"My Name\")] when migrating to MVC 6.0.\n. rebased and removed all references to [DisplayName] attribute\n. Pushed 4 commits, ending with 3746e44dc3e1b02b782ab54604e55c5899d6f897\n. Fixed w/ commit 796ff1d3d32d07522c7b2fedea5c038a03a7945c\n. We also have not fleshed out the DisplayFormatString and EditFormatString implementations.  Those properties exist but are not determined based on attributes (in this case [DisplayFormat]).  This gap is similar to #933 and #963 but closely tied to this bug.\nSince HasNonDefaultEditFormat is useless without setting EditFormatString correctly, I'll do these three properties together.\n. Closed with commits 4351ddd09255da3a3e389d80c5945fdcbc49d201 through 041d350d51c7504749a29ad869794a59aaee8281\n. Closed via cd0285183edd69eae3c4125b54c7595f315929c4\n. @yishaigalatzer @GrabYourPitchforks is away now but was fine w/ this change.\n@rynowak please look at the latest commit (just added).  Let me know if you think the comments in IHtmlHelper could be further improved. (@troydai has already pointed out we overuse \"ignore if\" and tend to leave the thing that's ignored ambiguous.)\nFYI I will split some of the wording fixes into another PR but want the final XML comments for the methods I'm changing elsewhere in this PR.\n. @pranavkm please have a look at these changes.  All prior comments have been fixed.\nFYI the latest set of commits does not include all changes @rynowak and I talked about in IHtmlHelper.  These commits only update XML comments for changed methods.  The remainder will come in a separate PR.\n. :ship: it after avoiding the short-term issue with the null propagating operator and fixing the bad .kproj merge.\n. Fixed in PRs listed above and merged in the following commits (newest on top).  Unfortunately a few of the commits mention #847 instead of this bug :frowning: \n- 77066a3ade6a7afbd0ceb12889a2b19a4a3c335c (line 1) with follow-up fix in 654d45812bfd370ab5c4bb14a7c96a74aebf69fe\n- 5bdf7955a0dfa87a9849dc1b62232cb036338dc3 (line 5)\n- f4d53a004593feb050e43c84fa09356c2dddc1e4 (line 7 sub-bullets)\n- 4c5aa15f0bf9c5b4555a542bd52a10dbe8ce7ea7 (line 7 main item)\n- 56d66c090eaedc33e4838437e7611ba2b9ca8929 (lines 3, 4, and 6)\n- 3db0a803062df19e83bdd62b63eba47c016af384 (line 2)\n- 7845a8fbe10bb4dbd83fda2e2f84c863fcc4aa1a (touched on line 1)\n- 40eb05f7e46ed1b79c2ce8c6cb5c182cbdb5b315 (line 8)\n. @NickCraver please note your last suggestion would undermine the contract MVC upholds w.r.t. ViewDataDictionary instances -- individual settings are scoped, not global.  For example, a change to ViewBag.MyItem in a ViewComponent does not affect reads of ViewBag.MyItem (or equivalently ViewData[\"MyItem\"]) in the containing IView.\nTherefore the solution to your last issue must involve copy-on-write semantics.  This would be relatively straightforward since ViewDataDictionary does not directly expose _data (_innerDictionary in MVC 5.2) to callers.  That is, we have complete control of how the indexer's setter, Add(), Clear(), and Remove() are implemented.\n. Fixed in commit b8960219b4ee4d4481ddb88a14edc1ab468b407b\n. /cc @rynowak ?  looks like protocol, hostname and fragment parameters are all ignored.\n. <inheritdoc /> is handled with post-processing in MVC 5.2.  We might want a different approach for MVC 6.0.  For example, could write a Roslyn extension to duplicate the XML comments automatically.\n. @rynowak  I've addressed comments, rebased, and fixed additional XML comment fails.\n. Need to set ModelMetadata.DataTypeName based on attributes, as described above.\nBetween this bug and #963, only a few of the default templates get chosen automatically -- based just on the model's Type and whether it's a complex object or collection.  Manual ModelMetadata changes are required to have the \"Date\", \"DateTime-local\", \"EmailAddress\", \"HiddenInput\", \"Html\", \"Password\", \"PhoneNumber\", \"Time\", or \"Url\" templates picked up.\n. Fixed in commit a5600a74a3e9c0351ec61ec00da8f9343335cdb4\n. Rebased and made a small addition to the commit description.  Otherwise unchanged.\n. Closed with (rebased) commits 4c5aa15f0bf9c5b4555a542bd52a10dbe8ce7ea7 through 7ab93d34e4ccc153101358e54ba7efc45f9d9394.\n. decided on the following:\n- name all string expression name and Expression<Func<TModel, TResult>> parameters \"expression\"\n  - single special case is GenerateIdFromName(string fullName) since every other expression name is relative to the current ViewData,TemplateInfo.HtmlFieldPrefix value\n- name all this parameters of type IHtmlHelper or IHtmlHelper<TModel> \"htmlHelper\"\n- rename TProperty and TValue to TResult\n. Fixed in commits 8eb63271b57b60c5200ef4d7bf0b042eb260596e and 966bfeb8c1113ccfd4880efa2a982583b46af93f\n. Removed Task label so this minor breaking change shows up in the next release notes.  Unlikely anyone is using named parameters here but just in case...\n. :watch: waiting\n. let's talk tomorrow about line 33 in MvcCSharpCodeBuilder\n. :shipit:\n. fix in commits 717c2bf and a4e01bf\n. :shipit: from me.  My remaining comment is a nit.\nEven less important, I wouldn't recommend filling OutputFormatterDescriptorTest gaps in a PR about the IInputFormatter interface.\n. Rebased and addressed comments\n. Branch updated after sending out https://github.com/aspnet/Universe/pull/101\n. Merged w/ commit 099adda3d74189d79bba74049f94bccf91f39203\n. fixed in commit 0549769fd0e467d6f6c96ef59b32c7700461336f\n. In addition ModelMetadata.Order is not currently used to sort the ModelMetadata.Properties enumeration.  This means this collection does not have a predictable order, even when a user sets Order themselves.\n. Main fix here is to set ModelMetadata.Order based on [Display] attributes in the model.\nMVC 5.2 does not provide a predictable property order when displaying / editing a complex object or filling in the @Html.ValidationSummary().  We could do a bit better here and sort by Order then by PropertyName.\n. fixed in commit 8779cafbab39e9a57666a81e4eb25ebd70de7ae4\n. Fix here is to address \"MultilineText\" template TODO item in TemplateRenderer and DefaultEditorTemplates.\n. Fixed w/ commit 34f17db94c05771c6d896a04544c0f2f2dcc3b67\n. Fixed with commit 7a1242f162d7f980c4a21f6d32a649fad2e1383c\n. :watch: waiting, primarily for tests that ModelStateDictionary and ViewDataDictionary have copy-on-write semantics.  Currently are primarily testing internal details -- the CopyOnWriteDictionary itself.\n. :ship: it if @rynowak agrees his comments have been addressed and once you do something about those internal fields.\n. :watch: waiting\n. :ship: it\n. This bug will impact use of [DisplayColumn] and [HiddenInput].  If they become available in .NET Core, this bug will also impact [ReadOnly] and [DisplayName].\nSeparately this bug foils user expectations.  In most cases ModelMetadata lookups about a property include more information than looks for that property's Type.  This makes sense because the first knows about the property in the context of its container (e.g. the property name) as well as the Type.  But this bug means [DisplayColumn] will never show up in ModelMetadata lookups about a property; that attribute may only be applied on a class.\n. /cc @pranavkm @yishaigalatzer \n. Branch updated w/ test fixes in new commit\n. Closed with commits 796ff1d3d32d07522c7b2fedea5c038a03a7945c through 1a4bd25e0f19a9bafc3153d49206f0e510197ea8\n. @Eilon's comment in PR #1010:\nSorting? Does seem important or apps will eventually start to fail. I think we should have something stable here (and everywhere else).\n. The CLR returns properties in the order they appear in the class.  For example, typeof(ClassInReverseAlphabeticOrder).GetRuntimeProperties() returns properties in the order \"E\", \"D\", \"C\", \"B\", \"A\" when using either .NET or .NET Core.  So there may be an argument the lack of .ThenBy(m => m.PropertyName) is a bug in MVC 5.2, albeit a bug requiring a breaking change to fix there.\nC#\nprivate class ClassInReverseAlphabeticOrder\n{\n    public string E { get; set; }\n    public string D { get; set; }\n    public string C { get; set; }\n    public string B { get; set; }\n    public string A { get; set; }\n}\n. Agree this is a behaviour worth defining.\nThere's at least three ways we could implement the proposed change:\n- Update the existing sort from .OrderBy(m => m.Order) to .OrderBy(m => m.Order).ThenBy(m => m.Name) in ModelMetadata.\n- Change AssociatedModelMetadataProvider's GetMetadataForProperties() implementation to return properties in name order.  This works because OrderBy(m => m.Order) provides a stable order i.e. will maintain name ordering of properties with the same Order.  It has the advantage of enabling AssociatedModelMetadataProvider to preserve the name ordering in its TypeInformation cache.\n- Change PropertyHelper.GetProperties() to return properties in name order.  This is similar to the above option but caches at a lower level but would sort entries in a few more dictionaries.  That may actually be a disadvantage since our code (e.g. TagBuilder.Attributes) would still need to sort user-provided dictionaries in most cases.\nnit: multiple classes :smiling_imp:\n. CachedDataAnnotationsModelMetadata will remain even if we fix #1034.\n. Fixed as part of commit 330328628820324ed5073056cfcd5a97a890723c.  Note \"nit\" mentioned in the commit message -- \"seal ModelMetadata.Properties collection as well\".\n. @yishaigalatzer branch updated\n. Close with commits 4351ddd09255da3a3e389d80c5945fdcbc49d201 through 041d350d51c7504749a29ad869794a59aaee8281\n. Issue #1021 is about one inconsistency in the current pattern.  There are a couple of other (odd) inconsistencies (see #933, #963, and #964) but they'll be cleaned up as we finish work to use attributes in setting ModelMetadata properties.  In any case those bugs are about the public surface while this bug (#1034) is about the internal implementation of that surface.\n. The Contributing page in the Home repository contains a high-level description of the process.  Start by submitting a Contributor License Agreement.\nFeel free to follow up here with any questions on your approach to fixing this particular issue.  No need for an offline conversation.\n. BTW may be fine for lazy-init to land in either ModelMetadata or CachedDataAnnotationsModelMetadata.  Then we wouldn't need Compute*() methods.  One important thing is to keep the default values together and avoid oddities mentioned in the summary.\n. :shipit: from me though without the empty private properties.  probably need another voice...\n. :shipit: when Ryan is happy\n. Confirmed k.cmd run works just fine for the MusicStore and MusicStore.Spa projects.  Also attached a debugger and confirmed I was running the updated code using the Modules window.  Will check in momentarily...\n. @marcuslindblom are you using Alpha2 MVC packages?  If so, 24e1ac7ca11ab04ddc8631eb9c16565cdff01266 went in early in the Alpha3 release and that should solve your problem.  If not, something odd is happening.\n. @glennc was this observed while using the latest code from \"dev\"?  #969 should have fixed this...\n. Might be better done later than Razor.  For example an output filter than takes in XHTML and spits out minified HTML would cover HTML helper and tag helper strings as well.\n@madskristensen what is the relative performance advantage of minified / bundled JavaScript versus minified HTML?  At least in MVC, the JavaScript is usually coming from static files.  So any performance hit of minifying dynamic content (mentioned in comments on your post) wouldn't apply.\n. @johnciliberti that class also matches the three <option/> elements in the generated <select />.  In what way does tri-state reduce value?\n. Unobtrusive validation does not use these CSS classes.  Generally MVC and the packages our templates reference by default do not use them.\nBut, yes, end users could certainly the list-box and tri-state classes in their MVC projects.  Further template developers could do the same.\nSo I'm having trouble seeing a downside to including these classes.  I also don't see anything to comment on in the code.  But please clarify your concern if I'm missing something.\n. If users expect just the form-control class, they're going to be disappointed.  MVC consistently merges the value of the \"class\" attribute with values it provides.  Sometimes the classes MVC provides are used in default CSS templates or updated by Unobtrusive; sometimes not.  Either way back-compatibility to MVC 5.2 is important here -- we'd break developers and users making use of the tri-state class.\n. Do we know of any MVC-specific data to be exposed?  That is addition to wrapping calls to tag helpers in the MVC-specific manager?\nIf this is about a potential requirement, why track it now?\n. And why would we need an additional context floating around just to get ViewContext to tag helpers?  Let's stick with existing ICanHasViewContext mechanism until / unless it proves insufficient.\n. in general this looks like a mixture of cleanup and Mono-specific fixes.  would have been much easier to review if separated into 2 PRs.  as-is I'm not sure whether I missed something glaring.\nfor example, were async () => await changes to () => required for tests to execute on Mono?  definitely didn't need to use var more for Mono\n:watch: \n. :watch: \n. :shipit: I'm happy ( :dancers: )\n. Reopening because that commit mentioned this issue but didn't fix it\n. /cc @pranavkm @yishaigalatzer \n. @pranavkm thanks.  I'll add tests and remove the \"[Design]\" bit from the title ...\n. Rebased, added tests, and fixed a one-line minor bug I found.\n. #1517 aka CodePlex#2183 is another similar request.\n. we will make related improvements when fixing #1998 and #1999.  closing this and #1517 as duplicates of those bugs.\n. See also\n- #298\n- #324\n- #440 (which I've suggested we don't fix)\n- one of the Web API Shim bugs may also cover adding a Controller.Initialize() method (in MVC 5.2 / Web API 3.2 that method exists in both Controller and ApiController)\n. @yishaigalatzer tomato / tomatoe.  I referenced those bugs because compat would be the reason to fix them. but agree that, if we fix most, we probably wouldn't do it in an \"MVC compat shim\".  guess I was confused by the bug's title :smiling_imp: \n. If we provideIHtmlHelper.AttributeEncode()methods (big if), we should do them in a compat shim.  There is no reason for methods that should do exactly what the existingIHtmlHelper.Encode()` methods do except back-compatibility.\nSee #81 for a bit more discussion of these methods.\n. Pushed in commits 639a788ed88610b7e65c1b9e6bb6a8a9e124b49a through 05c35dd3ba74327f371b59f946f8e4a97e69ca28\n. #1253 covers the separate work item mentioned above\n. Fixed /w commit 82cce78\n. Fixed in commit a9c2c4c5eb87253f866bb7cc3d013fb65cd819b2\n. Should at least answer one question from #687 when doing this item: should the helper methods exposed from Microsoft.AspNet.Mvc.Core be static in HtmlHelper, members of a new static class, or refactored into a new class (perhaps found in DI)?\n. Checked into TagHelperFeature branch w/ commits 408e108211912afb9562b11aec22d9dfe6ac13e0 and 1b181d30b4c612e8d7bec1c18d158134f3127442\n. Example open questions include:\n- should <input/> infer a \"type\" attribute if none is provided explicitly?\n- should <input/> infer a format for the generated \"value\" attribute if none is provided explicitly?\nFor both of these, note that today only @Html.Display() and related template helpers make similar inferences (based on data annotations).\n. Fixed w/ commit 012e03e5d0c94a3bdd7cd96be71cdb7f976ba87c\n. fixed w/ commit 2fd51c82f9d3bec9ffa3aeedbf58f6172170142a\n. previous title was \"support user typing entire RHS of a ModelExpression lambda expression\"\nexample attribute values to support:\n``` c#\n\n\n``\n. Fixed with a77d0718301cd1be5e3900e21167768c7f964d8d and d2fe1ebad763c948ecc47612d01c26a7eff9a1f6\n. /cc @NTaylorMullen \n. what does the water buffalo mean?\n. Rebased and added copyright notices\n. udpated\n. @NTaylorMullen and @yishaigalatzer could you please clarify this issue?\nactivators in the system other thanDefaultControllerActivator(DefaultViewComponentActivator,RazorPageActivatorand theDefaultTagHelperActivatorproposed in #1259) all make use ofICanHasViewContext. this is required to handle properties that themselves requireViewContextand meansICanHasViewContext` remains public-facing.\nso how does fixing this issue address the first part of the excerpt below and what does \"better\" mean?\n\nwe've decided that we don't want this interface to be publicly facing and that we can provide the ViewContext to the TagHelper in a better format\n\nseparately tag helpers are already instantiated using ITypeActivator. so we already have a mechanism to give them any service.\nnote I can see some potential advantages to using [Activate] once [NotBound] exists (or the opposite -- Razor not binding properties by default). for example it allows tag helpers to usefully contain properties that implement ICanHasViewContext. but I'm not sure why we'd address that for Beta.\n. this PR creates a second mechanism for tag helpers to get service instances. the first, and seemingly better, approach is to include service parameters in the constructor. why would authors choose the [Activate] approach, given these properties will by default (eventually by default, now always) show up in the TagHelperDescriptor for their type? why confusingly offer both approaches?\n. grudging :shipit: after fixing \"wont\"\n. @harshgMSFT what is the specific problem here? the activators are all specific to the type (controller, page, view component) they're activating. so the mix of sources is well understood and it isn't clear why the activated instance should need to know about the distinct sources.\nwe could have [Activate] cover only types not available in DI (because existing classes with [Activate] properties are created using an ITypeActivator, constructor injection Just Works(tm) for services) but some others seem to like having multiple solutions for providing services.\n. :watch:-ing just for answers to my questions\n. /cc @yishaigalatzer @DamianEdwards @NTaylorMullen \n. > Should showcase  with one or more of its allowed attributes.\n:ok_hand: \n\nWould be nice to see a _Layout with a few anchor tag helpers (to show they can be used there). They're perfect for navigation.\n\n:-1: already using <a/> and this sample doesn't need another file\n\n:water_buffalo: \n\nwhat does the water buffalo mean?\n. Rebased and updated\n@yishaigalatzer @Eilon @DamianEdwards please let @NTaylorMullen and I know if the sample and its comments misses anything from our meeting.\n. probably should cover ModelMetadata.DefaultOrder (currently 10x higher) as well\n. typo: meant \"-10x ~~higher~~\", since that field is 10000\n. please rebase TagHelpers_ModelExpressionCodeGen branch and force-push it here. no longer possible to see your changes\n. :shipit: \n. /cc @NTaylorMullen \n- \"[Design]\" PR primarily because HtmlHelper doesn't yet use an IHtmlGenerator\n- missing anti-forgery support in IHtmlGenerator\n- will likely file a Task to add missing XML docs (mostly copies from IHtmlHelper w/ slight edits)\n. - I just pushed the new project outline and one tag helper\n- in next update, will add DI registration and IAntiForgery -- that should be done consistently\n- saving HtmlHelper changes 'til last since you don't depend on that\n- what \"non-design piece\"? this is all runtime code\n. @natemcmaster updated. haven't added project.json version yet but have added anti-forgery.\n/cc @harshgMSFT @GrabYourPitchforks please take a quick look at change to AntiForgery.GetHtml() signature. any issues w/ returning TagBuilder and not HtmlString?\n. - updated commits, PR description, and title\n- rebased and checked into TagHelpersFeature branch\n- leaving this open for additional issues and because <textarea/> tag helper needs unit tests\n. Will open a new PR to complete this work later today...\n. :shipit: (immediately :smiley_cat:) after the Hosting change goes in\n. :watch: \n. :shipit: (all my comments are nits or less)\n. one caveat: this PR is infrastructure and needs a reason to exist. could have been a commit or two in #1323 for example. don't let this go to dev without product code using the new helpers.\n. @NTaylorMullen thought we were going to take all MVC tag helpers together to dev? but I'm fine doing away with TagHelperFeature once @yishaigalatzer is happy with this PR.\n. please close this PR and open one based on TagHelpersFeature\n. :watch: \n. :watch: \n. :watch: \n. :shipit: \n. looks like 3 major renames repeated across the MVC functional tests (especially). seems straightforward but I'd appreciate a link to the underlying PR where these dependencies are changing.\n. :watch: and if I missed some form-related comments, assume they apply here as well\n. :watch: for the restore some / throw on others follow-up\n. :shipit: after fixing Exception message arguments\n. :watch: \n. :shipit: with small comment fix if [HtmlAttributeName] is in Razor now\n. :watch: \n. :watch: \n. :watch: just for a quick look at doc comments in next iteration\n. :shipit: after addressing my 2 (or so) minor comments\n. not exact the same problem as #1253 (and #1408) but the same solution. e.g. <input asp-for=\"@Model[index].Blurb\" /> will work once #1253 is fixed.  treating this one as a duplicate...\n. rebased on latest TagHelperFeature, which I rebased on origin/dev just a bit ago\n. /cc @NTaylorMullen or @pranavkm and @sornaks (who should have some familiarity with the changed HtmlHelper methods)\n. we do have a few tests that cover the helpers.  I've also checked the MVC sample out...\n. Checked into TagHelperFeature w/ commit 50f7748630eca97471276648eb69bfa1124ae537\n. rebased on latest TagHelperFeature, which I rebased on origin/dev just a bit ago\n. /cc @NTaylorMullen \n. rebased and addressed PR comments\n. Now commit 73ae1e7c47a6a31e82c2a5eb404ef281a46a1544 in TagHelperFeature\n. :watch: mostly for another test or two\n. :shipit: with the one last change I saw you make :smiley_cat: \n. :watch:\n. :shipit: after fixing test-related comments\n. - rebased and updated\n- stop using that buffalo @NTaylorMullen \n. rebased and updated\n/cc @NTaylorMullen \n. - improve commit description -- does more than test something out\n- :watch: \n. :watch: let's discuss CopyHtmlAttribute() merging @class values offline\n. :shipit: \n. /cc @NTaylorMullen \n. Commit cb8e9c0143566564269dfeef74b370ba4b45275a in TagHelpersFeature\n. Commit 34f17db94c05771c6d896a04544c0f2f2dcc3b67\n. shouldn't TestableHtmlGenerator change to use DefaultHttpContext?\n. also LabelTagHelperTest still activates its LabelTagHelper\n. :watch: \n. :shipit: once I've pushed rebase and .\\build.cmd runs to completion (pushing in one sec)\n. also /cc @blowdart and @GrabYourPitchforks \n. @blowdart & @GrabYourPitchforks we could go further and check testChar <= '\\u007f' (like char's private IsAscii()) then use the regular char versions of both IsDigit() and IsLetter(). Thoughts?\n. Rebased and comments updated.\n. After squashing, pushed as commits f9e44ff7f9b358f8d13800165e13f7af10c8b304 and dd5da33a628a956e5f598defbcddb086ca4adc41\n. like it! :shipit: after testing both sample projects again -- bit nervous about those\n. updated and rebased\n. Rebased, added tests, and changed title to indicate this is ready to go\n. added a commit to address your comments @NTaylorMullen \n. commit 2fd51c82f9d3bec9ffa3aeedbf58f6172170142a\n. looks solid, :shipit: once @rynowak is pleased as punch.\nnit: if this is related to #453, please mention that bug in your commit description\n. - would like to see a couple of tests covering more complex expressions e.g. nest FooBarBazModel in ModelWithValidation (or visa versa)\n- nit: could extend the test names to make it clear which use a null expression result and which do not\n. :watch: \n. :shipit: \nw.r.t. the following comment\n\nnit: could extend the test names to make it clear which use a null expression result and which do not\n\nI meant: nice to name tests using DefaultTemplatesUtilities.GetHtmlHelper() (not passing a non-null model argument) to consistently end w/ _ForNullModel. only one does now.\nas an added bonus, nice to also have tests using ModelWithValidation to be named w/ _ForNullProperty or something similar. those that get values, get them from ViewData.\nagain, this was a nit.\n. @david-driscoll we have a couple of open issues related to ModelMetadata and our IModelMetadataProvider implementations e.g. #1021 and #1034. Nothing quite so broad as you're suggesting, for back-compatibility (as you thought). Another reason is IModelMetadataProvider override scenarios haven't been common in the past. Could you please let us know more about your scenario?\nMore details:\n\nIf I have the ModelMetadata for a Type, what is the PropertyName property for or do?\n\nPropertyName is null and serves to distinguish Type (or prototype in cached cases) metadata from property metadata.\n\nWhat if you don't know of the ModelMetadata is a type or a property?\n\nCan be determined using string.IsNullOrEmpty(metadata.PropertyName).\n\nWould it be possible to try and break ModelMetadata apart for each major piece that it works with?\n\nThe metadata system is currently split between a POCO base (ModelMetadata), a caching system (AssociatedMetadataProvider and CachedModelMetadata<TPrototypeCache>), and data annotations (DataAnnotationsModelMetadataProvider and CachedDataAnnotationsModelMetadata). We're considering eliminating the abstract caching layer and moving some features between the layers, see #1034.  What alternate split (which maintains a compatible current public surface) would you propose?\n. One common use case is exactly what I described in the bug: An @model type simple enough to use an <input/>, <select/>, <textarea/>, et cetera for the whole thing. Pretty easy to imagine scaffolding generating @Html.EditorFor() for properties of complex types and tag helpers for simple types (e.g. in templates).\nWhy don't you think <input for=\"\"/> is correct?  That syntax matches what MVC users are used to e.g. @Html.TextBox(name: string.Empty).  Anything else just forces users to type more for the capability.\nHow would users type out the entire model => model?  What exactly do we support allowing them to type that?  Even for=\"@model\" doesn't currently work.\n. - disagree on misleading and implied no-op behaviour but perhaps I've been using @Blah() too much\n- side note: our current lambda parameter is completely undiscoverable. Even if we special-cased @ here, @__model isn't something users would know to type.  That's one reason @ (once implemented) won't work around #1345.  (Another reason is the extra typing for simple cases.)\n. :shipit: with one more [Theory] test method\n. :watch: please combine this with #1412 and send out one updated PR for this issue. hard to see what's missing w/ current spread.\n. after offline conversation, I agree the two MVC PRs are about different scenarios -- using tag helpers in this case and HTML helpers in the #1412 case.\n:shipit: once https://github.com/aspnet/Razor/pull/198 is in.\n. may also need to change @Html.NameFor() to get this working end-to-end.  the name Values[height] is ambiguous, covering for example indexers using a variable named height.  shouldn't the generated name be Values[\"height\"] in this case?\nsince @Html.Namefor() defers naming of the indexer argument to Func<object, object>.ToString(), might not be simple to finish this scenario.\n. what about Web API 3?\n. Looks fine but why aren't these unit tests?  Sending a name over the pseudo-wire doesn't add much.\n. I can understand using the public Person Person(Person boundPerson) action extensively.  but each test method here checks two things -- that model binding and @Html.NameFor() agree on names and that complex objects round-trip as expected.\nshould be sufficient to add a few comments making the intent more clear.\n. :shipit: after fixing up the skipped test\n. Commit 2d32420f01f3a755c068b68d4162e30b1bdaa003 with support from preceding commits 3d84b528e58c007348f59cf483813b0ff635a1bb and 30f25fec99efcbffc6a9f3e892a7eaeff9419ca6.\n. hmm, removing last (incorrect) sentence in description.\n. Problem reproduces consistently if the project contains a _ViewStart.cshtml file, even one that's empty.\n. Fixed in Release (for Beta1) w/ commits 8d2a1c47e5e620deb6ab3f7ed3c806582bb8639e through cfcb1f2e2fec9d484ca0a32f054d699eb7c8a925 and merged into Dev\n. Fixed in Release (for Beta1) w/ commits 8d2a1c47e5e620deb6ab3f7ed3c806582bb8639e through cfcb1f2e2fec9d484ca0a32f054d699eb7c8a925 and merged into Dev\n. :watch: \n. :watch: for ViewComponent.ModelState resolution\n. :watch: \n. :watch: very close to covering the numerous Hidden() and HiddenFor() scenarios that come to mind. most of my comments are about scenario naming rather than missing scenarios.\n. :shipit: \n. :shipit: \n. Pushed into Release w/ commits 8d2a1c47e5e620deb6ab3f7ed3c806582bb8639e through cfcb1f2e2fec9d484ca0a32f054d699eb7c8a925 and merged into Dev\n. Pushed into Release w/ commits 8d2a1c47e5e620deb6ab3f7ed3c806582bb8639e through cfcb1f2e2fec9d484ca0a32f054d699eb7c8a925 and merged into Dev\n. should IFilter.CreateInstance() change to take the ITypeActivator instance implementations (e.g. TypeFilterAttribute) may need at the same time?\n. if not :shipit: \n. :shipit: after cleaning up the few occurrences of async () => await\n. At \"[Design]\" stage because I haven't updated some tests to ensure ViewDataDictionary instances are always constructed with an IModelMetadataProvider.\n. > This seems a like a lot of new code - what are the advantages of adding these extra constructors?\n@rynowak the new constructors help the base ViewDataDictionary determine ModelMetadata when Model==null. this avoids an awkward split were ViewDataDictionary understands runtime types and ViewDataDictionary<TModel> understands declared types.  more importantly it makes the #1426 issue impossible because ModelMetadata values are more consistent.\n. updated and complete w/ tests\n- no longer a design PR\n- testing out all the sample actions but no problems so far...\n. this PR is built on top of the #1441 branch.  that continues to make sense from a test perspective -- I added a few tests in #1441 that were good to have here.  but product code changes here comprise a more-comprehensive alternate fix for #1426 (and related bugs) and don't require anything from #1441.\n. Will reopen with a new bug to reference and on the dev branch.\n. Will reopen with a new bug to reference and on the dev branch.\n. :shipit: \n. remove null propagating member access from ControllerActionDescriptorBuilder and :shipit: \n. looks close to me.  what about the WriteValues() call in RouterMiddleware?  with this change, a Verbose message will be written if Informational is enabled.\n. :watch:\n. /cc @danroth27 @yishaigalatzer I'm moving this into current sprint as discussed today.  We have a fix for all the issues listed above.  And it'll be good to get that in soon to see if the fix itself has any corner cases.\n. Fixed w/ five commits especially the first, a3b07dacdb51919415879e18239a5764dffc0e31 through 5420b9d38289e2a973a4489f9a8dc4b7b934fc77\n. Fixed in commit ae4cafc002c8475d116b3c5c0be75fe9deb2cb11\n. Also need to update the Unobtrusive code to generate similar HTML for client validation errors.\n. see also #476, #1034, and #1407.  there's also a number of low-level bugs about pieces missing from the current ModelMetadata hierarchy e.g. #1000 and #1021.\n. :shipit: from me (my comments will be addressed in #1578, not here)\n. E.g. the following in a create view\nc#\nViewData[\"Alive\"] = true;\n...\n<td>\n    @Html.LabelFor(m => m.Alive)\n</td>\n<td>\n    @Html.CheckBoxFor(m => m.Alive)\n    or\n    @Html.RadioButtonFor(m => m.Alive, value: false) False\n    @Html.RadioButtonFor(m => m.Alive, value: true) True\n</td>\nresults in\n\nThe checkbox should not be selected.  The radio button by contrast correctly shows the expression result is neither true or false.\n. This bug also affects the <input type=\"checkbox\"/> tag helper.\nWorkarounds include not adding entries to ViewDataDictionary or avoiding null containers in the model (!!).\nFix is to change one line to ensure useViewData passed to DefaultHtmlGenerator.GenerateInput() is always false in CheckBoxFor() scenarios.  Could back-port this fix to MVC 5.2 (bug was inherited) as well.\n. Fixed via 12565daf88603501521bf0315617be443fa5f705\n. MVC 5.2 has the same issue.  This likely indicates templates aren't often used with string-based helpers.\nEx. Index.cshtml contains:\nc#\n@Html.DisplayFor(model => model.Dependent, templateName: \"Dependent\")\nDisplayTemplates/Dependent.cshtml contains:\nc#\n<td>\n    @Html.Label(expression: \"Name\", labelText: null, htmlAttributes: new { @class = \"control-label\", })\n</td>\n<td>\n    '@Html.Value(name: \"Name\")'\n</td>\n<td>\n    @Html.TextBox(name: \"Name\", value: null, htmlAttributes: new { disabled = \"disabled\", @readonly = \"readonly\", })\n</td>\nResult is:\n\nMore details:\nWorkaround is to use expression-based equivalents of these helpers (@Html.CheckBoxFor() etc.) or tag helpers.\nFix is to change lines 810 and 834 of DefaultHtmlGenerator to pass name and not fullName.\n. ... and the textbox should also contain \"Dependents name\" in the generated page.\n. This problem was inherited from MVC 5.2.\nFix would probably require a general change in how we evaluate expressions that may be in ViewDataDictionary or its Model when !string.IsNullOrEmpty(ViewData.TemplateInfo.HtmlFieldPrefix).  In that case, the full name of a dictionary entry and its name relative to the current Model are different.  Should pass both names to ViewDataEvaluator.Eval(), allowing that helper to evaluate the full name against ViewDataDictionary entries. Then, if that fails, the helper would evaluate the relative name against ViewDataDictionary.Model.  This preserves the current precedence of ViewDataDictionary entries over properties of ViewDataDictionary.Model.\nThe current code mixes ViewDataDictionary lookups with evaluating properties in the Model.  This works fine in many cases, but not in this specific situation.\nFix isn't particularly risky because we have good but still-improving (see @pranavkm's work on #453) unit tests touching on ViewDataEvaluator.Eval(),  Also have functional tests and samples demonstrating the behaviour of various HTML helpers.\n. My suggestion is to use the current [FromBody] behaviour (avoid creating an unnecessary empty instance) in the default case as well.  However validation is not done for properties of null objects; so we may need to either consistently provide a non-null model or special-case validation somehow.\n. BTW ~/Home/Post currently results in NREs.  I captured the above images with a fix for those problems in my MyView.cshtml.\n. chiming in.\nsee this has been moved out of RC1.  that's a shame because HTML helpers fully support the scenario now that @Html.BeginRouteForm() is supported (see #437).  users are currently better off using their named routes with HTML helpers.\n. Symptoms do not improve with precompilation removed from the MVC sample.\nOne other symptom is the error page in the MVC sample shows an incorrect / useless location for the NRE:\n\n. I'll double-check my experience w/ latest VS later today.  It's likely things have improved since I filed this bug.  I'm particularly hoping the bizarre landing spot for NREs in the page has improved.\nIf so, this issue should be re-titled \"Support breakpoints on attributes in .cshtml files\".\n. Not much better when debugging MVC or Tag Helper sample.\n- Breakpoints aren't hit, at least in the .cshtml files I tried.\n- NREs thrown in an attribute expression still land user much earlier in the .cshtml file.  I expected at least close.\n- NREs thrown in an expression elsewhere tend to highlight too much e.g. Model == null leads to the following:\n\n(The above is actually an improvement.  Was further off in earlier versions.)\n- Perhaps unrelated: Takes about 15 Continue clicks (oddly, many within the Monitoring Middleware) to get the error page to render.  Then highlighted code remains incorrect though stack trace looks about right:\n\n. Odd, I'll try different Debug / Options though I'm pretty sure they match our recommendations.\n. one-line fix at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.TagHelpers/SelectTagHelper.cs#L87\n. Fixed in commit 7e166295bac6f4f2d008c9c1db7a82bfca4ade0b\n. @wanghaolu we'll try to reproduce this using vNext.  However since you're reporting this issue against version 5.2.2, please file also file it on CodePlex.\n. See the same behaviour with vNext.  That is @Html.DisplayFor() shows the value from the model passed into the view but other helpers get the value from the ModelStateDictionary.\nIn particular, the id parameter is extracted from the URI (route values, query string values, form values are all handled similarly) and added to the ModelStateDictionary prior to calling the action method.\nNot sure this is a bug per se but it is a bit confusing.  The display helpers (@Html.DisplayFor(), @Html.DisplayTextFor(), ...) aren't intended for views containing forms.  On the other hand, the edit helpers (@Html.EditorFor(), @Html.TextBoxFor(), even @Html.ValueFor(), ...) must round-trip values the user submitted.  The second set thus check ModelStateDictionary and only fall back to the original (model) value.\nOne workaround is to rename the action parameter so it doesn't match a property in your model.  I'll talk to a few people on Monday in case there are other workarounds.\n\nFYI I expanded the test slightly:\n\n. @wanghaolu another option would be for you to include ModelState.Remove(\"id\"); in your action.  That would ensure the only model information available to the view is the MyModel instance you pass.\n\nFYI placing values from various providers into the ModelStateDictionary is an intrinsic part of binding.  So not placing something into that dictionary is similar to disabling binding.\nSimilarly the [BindNever] attribute (present in both MVC 5.2 and vNext) is not what you want.  That attribute can be used to exclude properties from binding.  But it's relevant only when passing a complex object (a MyModel instance in your case) to an action.\n. title was previously \"Html helper method bug\"\nwe will have a design discussion shortly about this issue as well as the proposed #1231 enhancement.\n. we will make related improvements when fixing #1998 and #1999.  closing this and #1231 as duplicates of those bugs.\n. /cc @NTaylorMullen\n. The root cause of these inconsistencies is declaring your property as an object.  That doesn't give the system enough information.  If you can't use a more specific type in the model and the runtime value will never be complex, I suggest adding [DataType(DataType.Text)] for that property.\nDetails:\n\nwhen the stored object is of type enum, only a blank line is rendered instead of an input\n\n@Html.EditorFor() does not have a default Action for enum types and falls through to using DefaultEditorTemplates.ObjectTemplate.  That Action generates nothing because the enum has no properties.  (You can see the opposite effect with a DataTimeOffset value.)\n\nWhen I change the type of Value in the view model to my enum type, an input type=\"text\" is rendered\n\nSpecial-cases for value types are based on the declared expression result type.  When that is an enum (et cetera), ModelMetadata.IsComplexType is correctly false and @Html.EditorFor() falls through to the StringTemplate instead.\n\nWhen I add en EditorTemplate named myenumtype.cshtml, the contents are rendered\n\n@Html.EditorFor() checks for templates matching the runtime type of the expression...\n\nWhen I add an EditorTemplate named Enum.cshtml, those contents are rendered\n\n... and for templates matching base types.  (It doesn't actually check base types if the declared type is a value types but does check \"Enum\" for enum types.)\n. @Triage we could change a few ModelMetadata properties to use the runtime type (if available) when deciding whether a property is complex.\nHowever this would lead to confusing inconsistencies e.g. between forms in Create and Edit views.  Probably better to describe potential pitfalls of using object properties in a model (especially with value runtime types) in our documentation.\n. @Triage then again forms are already inconsistent between Create and Edit views if you have object properties in your model.\n@Tragetaschen decisions here might come down to the prevalence of object properties.  Could you describe your scenario and why you chose object for that property?\n. @Tragetaschen the difference between an enum type and int or DateTime is the non-existence of a default Action for enum in TemplateRenderer._defaultEditorActions.  Values with runtime types in that dictionary never reach the !metadata.IsComplexType special case in TemplateRenderer.GetViewNames().\nThanks for the scenario description.\n. Code isn't much different in this area between the two versions.  Created a test application and demonstrated behaviour (note spelling :smiling_imp:) is identical in MVC 5.\nConfirmed following workarounds are also available in MVC 5.2.2:\n- add [DataType(DataType.Text)] for the object property in the model\n- add display and edit templates (either Enum.cshtml or YourEnumType.cshtml).  note we added Enum.cshtml support in MVC 5.2.\n. Fixed in commit 1b28e191140ab85270160401db1333a279cd8db5\n. /cc @pranavkm since you are deep in HTML helper testing and reviewed the original PR (#207) for Html.BeginForm()\n. updated @pranavkm @rynowak \n. updated\n. Commits 22fafe298c586f6ab4c327086e9ffd2e9f8b2010 thru 7e8870cb9f0e47b3632e17165b32066866f681a0 (should have squashed)\n. :watch: \n. :watch: for one open \"straightforward\" hope and test updates\n. :watch: only for odd User : List<User> inheritance.\n. :shipit: after squashing PR commits, especially the \"Temp\" one\n. :watch: \n. :shipit: from me w/ last resource fixup\n. at least one variant of our guidelines says \"We recommend using Contract.Assert(condition). Like Debug.Assert(), Contract.Assert() is stripped from retail builds.\"  unfortunately there's no rationale with those sentences.\nmore generally MVC should follow whatever the engineering team owners resolve.\n. do not block on me for this one\n. :shipit: from me after reverting CachedModelMetadata constructor.  but get input from someone else as well because I looked mainly at ModelMetadata and related tests\n. Our sample uses a couple of anonymous types which might lead to comparison issues.\nAlso the cache likely isn't \"bypassed\".  We currently only cache some type information (including a prototype ModelMetadata subclass instance) in AssociatedModelMetadata. Would otherwise confuse the system because each use (e.g. metadata for string property A versus string property B) has distinct metadata.\nCould cache metadata for individual properties and not just types.  But that doesn't exist today.  And adding such a cache (even returning the cache entry versus a copy when retrieving per-Type metadata) would break compatibility w/ earlier versions.\n. :watch: \nalso - are unit and functional tests for this tag helper going to be part of your work (thx!) on this?\n. > I intended for you to take it and make any coding changes needed and add tests\nI appreciate the clarification.  ignore my latest comments and I'll take it from here, including the discussion points we've marked.\n. :watch: \n. :watch: \n. @pranavkm what is the status of this PR?  holding off or updated because it's ready to go?\n. :shipit: if CompilerCache.NormalizePath works on a 'nix platform\n. as I said :shipit: \n. is the casing also as follows for the following sub-directories?\nViews/Shared/DisplayTemplates\n  Views/Shared/EditorTemplates\n  Views/{controller}/DisplayTemplates\n  Views/{controller}/EditorTemplates\n. nice, less than I expected\n:shipit: after Razor (https://github.com/aspnet/Razor/issues/218) changes go in\n. :shipit: \n. :watch: for mostly-minor changes\n. :shipit: with addition of a test covering an anonymous object with a attribute_name property (or similar, something containing an underscore)\n. @DamianEdwards could you add a few details on how this enhancement would interact w/ Gulp and the #1576 enhancement?  For example would Gulp generate \"~/js/site.min.js\"?\nAnd should the generated scripts for #1576 also support globbing?  If yes, does the primary source contain the globs while the fallback specifies only a different root URI?\n. Harsh fixed this in commit d00c7ef59723fa2d7d5a544b9a831b73eb397c12\n. @bgeihsgt we need to confirm the MVC 5 null versus empty collection behaviour and should probably align with that -- not the behaviour in earlier MVC 6 releases.  However there's another consistency issue that may be all-important: Action parameters of complex types are always non-null but will be uninitialized if the request contains no data.\nSo, we'll make a call here and pick back-compatibility or consistency.  Either way you'll see a resolution on this issue.  If the result is a further change, we'll also use the Announcements repo.\n. 323ec2f\n. Updated (including rebase)\n/cc @NTaylorMullen \n. :watch: \n. very close.  stop by tomorrow.\n. :shipit: \n. :shipit: as long as you've tested the MVC sample once\n. :watch: design fine but devil's in the details (and the Guidelines)\n. :watch: just for test names and using existing ModelMetadataTest theories.\n. @kirthik I double-checked and MVC 5.2 also sets Container in AssociatedMetadataProvider.GetMetadataForProperties().  Need the same code in our new GetMetadataForPropertiesCore() method.  Will also need a AssociatedMetadataProviderTest similar to what's in the older version.\n. :watch: for remaining small touch-ups\n. :shipit: \n. @anuraj this looks like a good / useful fix.  However I can't find a CLA for you.  Please follow the steps listed at https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\n/cc @Eilon \n. CLA verified; I'll merge this soon.\n. Commit 680cdf4d572ed6f5240515ad9863ce86e78079a2\n. :shipit: \n. fix in commit cc7b319\n. :shipit: with one reverted hunk\n. :watch: \n. :shipit: after reverting unrelated IRazorPage page parameter change (re-add [NotNull]) in IRazorViewFactory\n. :shipit: from me once class and filenames match (see my non-nit comment).  suggest re-running whatever script you used to detect incorrect filenames.\nplease get sign-off from @rynowak as well.  (we're likely thinking about different pet peeves.)\nAlso\n\nsrc/Microsoft.AspNet.Mvc.Common/NotNullArgument.cs \u2192 src/Microsoft.AspNet.Mvc.Common/NotNullAttribute.cs\n\nclose #1599 when you push this commit.  I think this is the only related open issue but might have missed one.\n. commit 27beca7\n. :watch:\nalso needs more tests, especially\n- boilerplate tests following the outline shown in ModelMetadataTest, CachedDataAnnotationsMetadataAttributesTest, and CachedDataAnnotationsModelMetadataTest\n- specific tests of the new error cases handled in CachedDataAnnotationsModelMetadata e.g. demonstrate that class can calculate the correct included properties list regardless of the whitespace in the [Bind] strings.\n. :shipit: with less mocking\n. \n. would appreciate a high-level description of the change, preferably in the PR comment above.  right now I see some refactoring, a new property or two, and lots of \"custom\" things.  couldn't tell you what's being customized.\n. :watch: needs another PR adding the appropriate tests for new properties etc. in ModelMetadata hierarchy\n. /cc @rynowak please double-check the rules I'm enabling in second commit\n. @rynowak updated.\nWill send out a second PR showing exactly what I think should be enable.  I'll include the \"why\" in PR description.  Might be less than previous second commit in this PR...\n. @rynowak rebased, reverted parts of first commit, addressed your comment\n. @rynowak, @pranavkm rebased and addressed last two review comments\nnote final \"Use more var\" commit relies on a couple of regex searches, not StyleCop\n- don't have a StyleCop runner that supports defining symbols such as ASPNETCORE50\n. /cc @NTaylorMullen, @DamianEdwards \n. @NTaylorMullen updated\n. /cc @NTaylorMullen \n. Commit 07523c6634a8f7b7ea29ba8dda100cf3b89e0c8e\n. @rynowak Did you mean to reference #1652 (not PR #1650) in the PR title?\n. :shipit: when @pranavkm and / or @sornaks are happy.  I could grok the new names :smiley: \n. @joanbarros SelectList inherits from IEnumerable<SelectListItem> and no useful information is lost when performing that cast.  You can think of SelectList as an easy way to create IEnumerable<SelectListItem> instances.\nAre you seeing any functional differences when passing your SelectList instance into @Html.DropDownList()?  If yes, please provide the details of that problem.\n. :shipit: \n. yup, :shipit: \n. previous subject was \"Tag Helpers: Enum properties should be typed as the Enum and not attempt any conversion\".  ValidationSummaryTagHelper is the only MVC tag helper that performs conversion.\n. @DamianEdwards current helper throws if it cannot parse the asp-validation-summary (string) value.  once I fix this, the compiler will handle asp-validation-summary=\"Garbage\" and similar errors.\nwhat behaviour would you like for undefined ValidationSummary values e.g. asp-validation-summary=\"ValidationSummary)23\"?  compiler would be happy but should the tag helper throw or ignore the value?\n. talked offline w/ @DamianEdwards:\n- undefined ValidationSummary values should throw\n- move the ValidationSummary type to the Microsoft.AspNet.Mvc namespace so .cshtml authors don't need to type Microsoft.AspNet.Mvc.TagHelpers.ValidationSummary.All or add the appropriate @using\n. Fixed via 9b2a9e397649a928f85f323fe44a915af260035a\n. :watch: \n. :shipit: \n. Works well for command-line builds and for VS builds when the PrecompilationWebSite project's \"Produce outputs on build\" option is enabled.\nTo repro\n- reset project's properties to default (think .kproj on GitHub is fine)\nor\n- right click PrecompilationWebSite in Solution Explorer\n- choose Properties\n- select Build tab on the left\n- ensure \"Produce outputs on build\" checkbox is clear\nthen build solution or the PrecompilationWebSite project.\nSample error:\nShow Details    Severity    Code    Description Project File    Line\n    Error       Initiate build in the design time host failed with the following error: Could not load file or assembly '6fbccd82-375c-4574-8829-1e75a5b0266f$Microsoft.AspNet.Razor.Runtime' or one of its dependencies. The system cannot find the file specified.    PrecompilationWebSite   Microsoft.Web.AspNet.targets    131\n. Not sure I agree on holding off.  Turns out the remaining problems are limited to building the PrecompilationWebSite project on its own -- what I tried first.  This fix gets at least the VS solution-level build (e.g. Build / Rebuild Solution) and kpm build working without breaking the functional tests.\nFYI I found \"Produce outputs on build\" was a red herring.  Project builds succeed on second or later attempts.  All I was doing changing the project settings was forcing another \"first\" build.  Rebuild reliably fails (with either setting).  So clicking Build again is another workaround.\n. in short :shipit: then we can figure out the remaining problem\n. :shipit: once aspnet/Razor#244 is in\n. Sounds a bit like an expansion of #1553 to handle additional conditions.\nThen again the disable possibility is somewhat new and different.  On its own that could be done today with\nhtml\n  @{ var disabled = User.IsAuthenticated; }\n  <div @disabled>\nbut we don't have support for mixing that with hiding the <div/> entirely.\n. Currently DefaultTagHelperActivator injects ViewContext and anything available in DI.  Since ViewContext contains a reference to the ViewDataDictionary and an isolated (per-helper) ViewDataDictionary isn't very useful, what exactly is missing?\nNote users can give themselves a ViewData property using\n``` c#\n[Activate]\npublic ViewContext ViewContext { get; set; }\nprivate ViewDataDictionary ViewData\n{\n  get\n  {\n    return ViewContext?.ViewData;\n  }\n}\n``\n.RazorPageActivatorwon't activate aViewContextproperty (handles onlyViewDataDictionaryproperties and services from DI).  AndDefaultControllerActivatorhandles a few additional properties hanging off the mainActionContextit activates --HttpContext,HttpRequest, andHttpResponse`.  So what is the consistency goal?\nFurther support for activating ViewDataDictionary properties is a bit problematic because such properties set up easy inconsistencies e.g. between RazorPage.ViewData and RazorPage.ViewContext.ViewData.  Since the ViewContext.ViewData property is settable, would be more consistent for ViewDataDictionary properties in RazorPage, ITagHelper, or ViewComponent to read / write through to ViewContext.\n. :watch: \n. :shipit: \n. :shipit: definitely harmless.\n@bbowyersmyth these changes are appreciated.  in the future, please file issues for problems you find and reference the issue when providing a PR to fix it.  that gives our triage team a chance to evaluate the issue.  we took a shortcut here.\nalso FYI we tend not to make performance-related changes unless something is significant enough to show up in a profile.\n. 95ae4cb3a58c3ad83e61c2dbfb27820bf98b9516\n. :shipit:\n@bbowyersmyth see #1751 for a few comments on future performance issues and related PRs.\n. af9e9f9113fb88d443c69925d5d77d7b3e450281\n. @pranavkm did a94d5223e1748b24a023fffbb8852066a028f40f fix this issue?\n. @marcuslindblom the AdditionalValues property bag will come in when we fix #324.  I don't have a good alternative to suggest in the meantime.\nWill add comments to #324 about this use case.  That bug is scheduled for the 6.0.0-rc1 milestone, which is the milestone we're currently working on.\n. Reopening since the larger #324 has been postponed.  Work here is to provide the AdditionalValues property bag (from MVC 5) in the MVC 6 ModelMetadata.\n. title was \"Group properties based on DisplayAttribute.GroupName\".  narrowing since aim here is to make that extension possible, not to provide it in MVC.\nwill do the following:\n- add AdditionalValues property bag and a few related unit tests\n- extend one of the functional tests to use [DisplayAttribute(GroupName=\"name\")] as suggested\n. Fixed in commits 330328628820324ed5073056cfcd5a97a890723c and f93fca1077174d7ca34bfae0eee143aeed45bb37\n. Suggest fixing the above point problems soon.  That can be done using CultureReplacer in the relevant actions.\nBroader fix involves a culture-replacing middleware for use in all functional test web sites, including the sample sites.\nDetail:\n[ReplaceCulture] doesn't work because that must be applied to the test methods and web sites run on a different thread even when using the in-memory host.  Flowing culture across threads likely won't help because the service thread starts prior to any particular test method.  We also want the functional tests to succeed when the sites are running in IIS or other separate process.\n. Commit c0d27ee56db35c77ff6201febb31058c1ba6bde7\n. :watch: for that typo fix and one more test\n. :watch: \n. :shipit: after adding \".Index\" to a few file names, matching the convention a bit better\n. :watch: primarily for XML docs and tests\n. :shipit: with [NotNull]\n. :watch: \n. :shipit: \n. Fixed with commits 2c21c7c9c7e83a058eb5aab7364119b52d2bc833 and 45aae5956d83006fdcba29cd464bb63d99323944.\n. what is changing to make \"type\": \"build\" dependencies fail for the \"net45\" framework?\n. see if you can reuse existing model classes in new actions; web site is getting complicated.  for example, might have existing Customer class derive from Person (adding the Key property) and use Person for properties named Employee.\n. :watch: \n. :shipit: \n. Rebased and correct dependency version\n. :watch:\n. :watch: for reverting tagHelperContext -> context churn.  (that'll make it easier to see real changes.)  otherwise looks very close.\n. :watch: for just a few open questions\n. :shipit: with one small fix and a rebase (since you signed off on ValidationSummaryTagHelper changes and it's likely 15 other commits happened since you last updated the PR)\n. :watch: \n. :shipit: after fixing my one (I think) non-nit and @pranavkm's still-open comments e.g. commas are sad w/o spaces after them\n. /cc @NTaylorMullen\nabout the only thing I might add is a few tests of more complicated attribute values (e.g. add another property or two to InputTestTagHelper and use that/them in ModelExpressionTagHelper.cshtml and the MvcRazorHostTest tests). playing with this but may punt because it would duplicate tests in the Razor repo\n. @pranavkm second commit updated.\n. Commits a77d0718301cd1be5e3900e21167768c7f964d8d and d2fe1ebad763c948ecc47612d01c26a7eff9a1f6\n. :shipit:\nSeparately it may be a bug that VS warns about the frameworks of source-only dependencies (i.e. \"type\": \"build\" in the consuming project and \"shared\": \"*.cs\" in its dependency).  Please follow up on that...\n. :watch:\nthere's a lot here and I'm hoping the final versions of this and the TryValidateModel PR can share a site and the model / attribute classes in that site.\n. :watch: \n. :watch: close but has a couple of unclear aspects\n. :shipit: \n. /cc @DamianEdwards @NTaylorMullen @pranavkm\nregarding the question I asked in #1685 \n\nwhat behaviour would you like for undefined ValidationSummary values e.g. asp-validation-summary=\"ValidationSummary)23\"? compiler would be happy but should the tag helper throw or ignore the value?\n\nI chose to ignore the value.  Only ValidationSummary.ModelOnly and ValidationSummary.All do anything.\n. got a couple of answers from @DamianEdwards.  closing this to make it obvious the current iteration isn't ready.\n. will update the branch shortly...\n. @NTaylorMullen @pranavkm updated and ready to go\n. Closed via 9b2a9e397649a928f85f323fe44a915af260035a\n. /cc @pranavkm (and thanks for the thorough unit tests!)\n. :ok: think there's something similar in the existing functional test views where I could add the to-be-ignored ViewData entry\n. on second thought: this isn't a mainline scenario; it's about junk in the ViewDataDictionary.  suggest it's sufficient to push only the second commit (no change to the sample or a functional test).\n. Closed via 12565daf88603501521bf0315617be443fa5f705\n. :watch: \n. :watch: for a few remaining comments, especially decision on exposing MaxDegreesOfParallelism\n. true though TryUpdateModel<TModel> and TryValidateModel are also inconsistent in MVC 5.  so there's a back-compat argument in favour of leaving MVC 6 as-is in this respect.  not sure how strong that argument is :smiley_cat: \nif we do make a change here, probably still want to prevent boxing and attempting to update a value type model.  the type parameter avoids that problem and moves errors to compile-time.\n. @maxtoroq perhaps.  then again, the use of TModel in includeExpressions is an argument in favour of using TModel everywhere in this method group.  would be confusing otherwise.\n. for how many of the existing Controller.TryUpdateModelAsync<TModel>(...) overloads will we create TryUpdateModelAsync(Type modelType, ...) equivalents?  e.g. suspect overloads with [NotNull] params Expression<Func<object, object>>[] includeExpressions parameters won't be that helpful.\nseparately can we remove the ModelBindingHelper.TryUpdateModelAsync<TModel>() overload that just defaults the predicate (do that in Controller) and change the overload that takes a predicate to use Type modelType as well?  that is, let's try not to duplicate too much.\n. @yishaigalatzer sure.  I'll file a bug if we end up with a couple of extra methods.\nhowever\n\nhow many of the existing Controller.TryUpdateModelAsync<TModel>(...) overloads will we create TryUpdateModelAsync(Type modelType, ...) equivalents?\n\nwas a question about the new way forward for this issue.  and my second paragraph was, in part, a plea not to go too crazy with helper overloads.\n. :watch: \n. :shipit: after at least wrapping the 2 (I think) long lines, squashing commits, and reverting the leftover file\n. /cc @pranavkm @ianhong \n. /cc @yishaigalatzer @pranavkm \n. /cc @pranavkm \n. :shipit: with a couple of fixes for my minor comments; seem to mostly have typed nits :smiley_cat: \n. original bug is better described in #2129.  changing the subject to make it clear the Vehicles model was actually bound incorrectly due to match between property and parameter names.  like #2129, the root cause is the model binding system not falling back to an empty prefix.  unlike #2129, the problem is specific to top-level POCO models\n. realized the \"top-level property\" in the subject was a bit misleading and have updated the subject again.  problems occur when an action parameter's name is an exact match for something in the value providers.  so the previously-mentioned property must have a value in the query, form, etc. to cause problems.\nalso edited the issue description to remove mention of collections.\n. commit 533474d\n. we had an offline discussion (sorry, not sure who all was there) where we agreed to make the property order predictable.  today, it's possible for the HTML Html.DisplayFor(...) (for example) generates to change between CLR or Roslyn builds.  with this fix in place, the UI will remain consistent no matter how the runtime and compiler choose to order properties.\nMVC 5 does not provide such a predictable property order.  the offline discussion basically supported my comment in #964:\n\nWe could do a bit better here and sort by Order then by PropertyName.\n. - previous title was \"Provide controllable (using [Display(Order=x)]) and predictable property order\"\n- also updated PR description\n\n(code does not yet match updated summary and description)\n. @yishaigalatzer rebased and updated to remove validation message and property ordering using PropertyName\n. FYI added PR comments commit; squashing and pushing soon...\n. commit 8779cafbab39e9a57666a81e4eb25ebd70de7ae4\n. :shipit: after minor fixes\n. :shipit: \n. :shipit: when @yishaigalatzer is happy\n. :shipit:  with minor non-nit corrected\n. have a design we'll prototype as a new, separately-tracked task.  approach centres on integration tests using the PhantomJS headless browser client, k kestrel server, and Karma coordinator.  reporters and assertion frameworks are open questions we'll answer while prototyping.\n. :watch: will look at tests after I understand the intentions here a bit more\n. :shipit: let me know when you've rebased / squashed branch (again, sorry) and removed the unnecessary change from from the commit.  up to you how many of the few remaining nits you address.  I'll push after you're done.\n. Fixed with commits 2c21c7c9c7e83a058eb5aab7364119b52d2bc833 and 45aae5956d83006fdcba29cd464bb63d99323944.  The second avoided a build break.\n@tonysneed thanks very much.  You can delete your branch now :smile_cat: \n. :shipit: \n. :shipit: \n. my experience of this bug was frustrating -- took a while to eliminate my code as the problem, then didn't grok the [Route(... Order= {not 0}] workaround 'til I went to the font of all routing knowledge (@rynowak).\nnote we're not quite as good as conventional routing because the problem is less easily seen with attribute routing.  conventional routes are usually defined in one or a few places; attribute routes are defined throughout the app.\n. separately could calculate how many Values matches (2 points, say) and AmbientValues (1 point) occur before an AttributeRouteLinkGenerationEntry is added to the matches.  then the AttributeRouteLinkGenerationEntryComparer could use that WeightedSatisfiedConstraints value together (somehow) with the existing Order and Precedence values.\nalternatively could ignore the Values / AmbientValues difference: calculate Precedence up front based on constraints in addition to their use in the route template.  right now the literal template /MyArea/MyController/MyAction with 3 constraints has the same Precedence as /come/here/please with 2.\n. @pranavkm please look at how [Remote] fits into validation (without itself being in the model binding project).\n@rynowak please look at the mocking in RemoteAttributeTest.  bet there's a simplification or two I missed.\nremainder includes the [Remote] details and unit / functional test scenarios.  up for grabs.\n. @pranavkm, @rynowak rebased and added a commit addressing all comments\n. @rynowak @pranavkm rebased and updated. works fine w/ volatile feed.\nmany thanks to @rynowak for help shortening RemoteAttributeTest.\n. @yishaigalatzer side question...\n\nlooks like the Moq / Roslyn issue (#246) has been resolved enough that we don't need to force a closure here.\n\nshould I open a low-pri task to track backing out #935?\n. commits 1af158330252d56e5828687b74506839febdbd33 to 6cc5cfeae205c934189459d4e827a277155dc93f\n. :shipit: when @rynowak is happy and you've cleaned up the couple of out-of-order using additions\n. :watch: \n. /cc @rynowak \n. Commit 6524930778bb8cfe71685d9195f4c5bd9671cc9a\n. /cc @pranavkm \n. @rynowak updated.\n. Commits 330328628820324ed5073056cfcd5a97a890723c and f93fca1077174d7ca34bfae0eee143aeed45bb37\n. :shipit: :dancers: \n. we both knew you could figure out how to spell Singleton before submitting!\n. :watch: \n. :shipit: with a couple of tiny fixes\n. :shipit: w/ field -> property change\n. @yishaigalatzer the behaviour with MVC 6 is the same.  this issue is another symptom of #600.\n@JaroslawWaliszko MVC isn't finding a \"weird object\": it's finding the select list placed in ViewBag. but we cannot change how ModelMetadata.FromStringExpression() works, nor anything else about the priority of items in the ViewBag / ViewData dictionary compared to ViewData.Model.  the ViewDataDictionary infrastructure is too broadly used for such a change.  fortunately the problem here is specific to how DropDownList() and ListBox() operate when passed a null selectList value.\nworkarounds include:\n- use DropDownListFor() instead; this option is mentioned in the discussion linked above\n- use a different location in the ViewBag for the select list\ne.g. in the controller,\nc#\nViewBag.CarModelIDs = new SelectList(db.CarModels, \"CarModelID\", \"CarModelName\", car.CarModelID);\nand in the views,\nc#\n@{ var selectList = (IEnumerable<SelectListItem>)(ViewBag.CarModelIDs);}\n@Html.DropDownList(\"CarModelID\", selectList, \"-- select --\", htmlAttributes: new { @class = \"form-control\" })\n. dupe of #600\n@JaroslawWaliszko we appreciate your help uncovering another negative side-effect of #600.  we're tracking the fix with the earlier bug.\n. :shipit: \n. should we consider including a [ModelName] attribute that implements only IModelNameProvider?  that would allow property renaming without an implied (or accidental) change in value provider.  would also mean a type could have consistent property names when bound from query / body / form / whatever.\n. > should we consider including a [ModelName] attribute that implements only IModelNameProvider?\n\nThere is already a [ModelBinder(Name=\"\")] attribute present. The intention here is to test From* attributes not so much as to showcase this as a sample.\n\nthere's a few problems here:\n- [ModelBinder] as a solution for the general naming issue isn't discoverable.  I could however see adding [ModelName] as a follow-on issue.\n- the [From*] attribute extensions are only part of this PR (and I didn't object to extensively unit testing these attributes).  the PR wouldn't change the binders at all if it were truly about a single concern.  as a result, this PR changes the meaning of [ModelBinder(Name=)] without testing the new behaviour.\n- our functional tests are commonly read as samples and we point our customers to them.  we should therefore be showcasing mainline scenarios e.g. [FromQuery(Name=\"customPrefix\")] on an action parameter and [ModelBinder(Name=\"EmployeeSSN\")] on various properties.\n. > I do not understand how this PR changes the meaning of [ModelBinder(Name=)] ?\nyou've changed ComplexModelDtoModelBinder and other classes to pay attention to BinderModelName and that may be provided using [ModelBinder(Name=)]\n\nLets open a separate issue to track that. This needs triage.\n\nperfect.  as I said \"I could however see adding [ModelName] as a follow-on issue.\"\n. :watch: for a few new tests using [ModelName] and confirming the updated binders work when the attribute's Name is non-null. that would address the only truly open comment I have above.\nnit: separately realized you're adding only functional tests.  that may be fine in general but CompositeModelBinderTest and similar unit tests exist.  may be good to add a few unit tests involving overridden names.\n. :shipit: \n. recommend using HtmlHelper.Editor() instead e.g. pass a ModelExpression instance's Name to that method.  or just call EditorFor() from a view directly.\n. :watch: \n. :watch: \n. :shipit: \n. :shipit: with another comment and test or two (perhaps)\n. /cc @DamianEdwards @NTaylorMullen \nThis is not the one-line fix mentioned in #1516 because that would leave us with lots of weird corner cases.\n. Commit 7e166295bac6f4f2d008c9c1db7a82bfca4ade0b\n. /cc @pranavkm \n. @pranavkm updated\n. Commit 3ced6016a1bff14188ea8a8ae09c65dfc6279ae3\n. :watch: \nI corrected the typo in the PR title.  please do the same in your commit description :smile: \n. I'm reluctant about the lambda property for a read only value.  if you can hold off pushing, let's talk about that tomorrow.\n. :shipit: \n. decision after our design discussion was to log new issues (now this one and #1998) and to close #1231 and #1517 as duplicates.  I wanted to talk to you before closing those issues...\n. /cc @pranavkm \n. Commit 731722ae36719baef3e137c56010ccbe10b1ceea\n. :shipit: \n. /cc @NTaylorMullen \n. commit 451db6fb1621c0b67f1948085dd0bafe8092badf\n. /cc @pranavkm \n. commit 0549769fd0e467d6f6c96ef59b32c7700461336f\n. fixes #963\n. @NTaylorMullen updated\n. commits 8eb63271b57b60c5200ef4d7bf0b042eb260596e and 966bfeb8c1113ccfd4880efa2a982583b46af93f\n. :watch: \n. :watch: please add a test or two in RazorPageCreateTagHelperTest showing successful activation of a TagHelper class containing a ViewDataDictionary property.  (that test class is really testing DefaultTagHelperActivator from one level up.)\nnit: would also like a couple of tests in that class that involve internal protected properties since we use internal protected with [Activate] in the MVC tag helpers.  but this gap is unrelated to your change.\n. :shipit: with suggested one-line change\n. /cc @DamianEdwards this is an issue we talked through earlier today.\n. I agree with you on this behaviour being off by default @yishaigalatzer.  opt-in was the limit of my \"back-compatibility\" concern.\nI also agree we shouldn't need a \"knob\" anywhere higher than an individual DDL call, LB call, or <select/> tag.  nothing broader than new parameters for the HTML helpers and a new bound attribute for the <select/> tag helper.\n. offline decisions:\n- when invoked using an HTML helper, always generate an additional <option/> element when the current value would not otherwise be shown\n  - this is the correct behaviour and makes the null and \"unknown\" cases visibly distinct\n- when invoked using the <select/> tag helper, have the contained <option/> tag helpers communicate their selection back (base on aspnet/Razor#238 or use existing ViewContext.FormContext.FormData approach)\n  - change the <select/> tag helper to execute children prior to making a decision on generating the additional <option/> element\n  - make this final decision based in part on whether an <option/> tag helper indicated it was selected.\n- do not attempt to help / confuse tag helper users by removing duplicates they introduce between explicit <option/> (or <!option/>) elements and entries in the asp-items collection passed to the <select/> tag helper\n. Updated subject to reflect unconditional nature\n. closing as Won't Fix per offline discussions\n. @MelGrubb agreed there was an issue here.  We fixed the problem earlier in the RC1 milestone.  See #524.  Thanks for your involvement.\n. Yes, we're tracking a similar issue for MVC 5.x at https://aspnetwebstack.codeplex.com/workitem/1913.  That issue may soon be closed due to the back-compatibility concerns @yishaigalatzer mentioned there.\n. @MelGrubb FYI the recommended workaround is to \"create separate enumerables, containing distinct SelectListItem instances, for each property in your model.\"\n. :watch: (looking good.  like the removal of all the modelAccessor: null and () => null arguments.)\n. :shipit: once build.cmd succeeds\n. :watch: \n. :shipit: with a couple of typos and nits fixed\n. commits 717c2bf and a4e01bf\n. - do not check jquery-2.0.3.min.js in.  use Bower and so on.  @pranavkm led you astray there.\n- stick with \"jquery\": \"1.11.2\" in bower.json unless we've decided IE 8 and lower don't matter (if that's the case, 2.1.3 is fine and we should use that in the ValidationWebSite as well)\n  - note 2.1.3, not 2.0.3, if we ignore IE 8\n- add another [TheoryData] or two in MvcSampleTests.Home_Pages_ReturnSuccess that exercise the new Sample controller\n. :watch: \n. :watch: \n. > Should we call this AspNetMVC instead of just MVC? We did not have a discussion around the name..\nno, this is a demonstration in which no name conflict exists\n. :watch: for PastJobs fix\n. :shipit: \n. can't see past src/Microsoft.AspNet.Mvc.Razor.Host on GitHub.  could you break this up?  if not I'll checkout the branch locally over the weekend.\n. :shipit: after addressing small-ish comments\n. /cc @DamianEdwards \n. marking this as a Task since it was a test-only fix\n. 43fc84452458594d055cfef12c5a671d63d6174b\n. address @NTaylorMullen's and my comments then :shipit: \n. @Daniel15 use htmlHelper.ViewContext.HttpContext.RequestServices.GetRequiredService<T>().  the GetRequiredService<T> extension method is in the Microsoft.Framework.DependencyInjection namespace.\nTL;DR\nnot recommended: it is also possible to subclass HtmlHelper and HtmlHelper<T>, add your required services to the constructor parameters, make the services visible as properties, and replace our default services in the DI container.  but would still need extension methods that down-cast to the new type. the new subclass would also be incompatible when we change parameters in the HtmlHelper and HtmlHelper<T> constructors.  (framework does not support property injection into services that are themselves property injected e.g. IHtmlHelper properties in a Razor page.)\n. :shipit: \n. FYI only.  will push immediately.\n. @GrabYourPitchforks FYI @ajaybhargavb updated this PR.\n. @ajaybhargavb, get @GrabYourPitchforks' opinion on whether #2085 needs to be handled before this goes in.\n. :shipit: after @GrabYourPitchforks is happy\n. /cc @rynowak since he created the \"extra branching\" here.  could be reasons for the WriteTo (HTML encode) / WriteLiteralTo (don't) inconsistency.  could also be another example of our standard confusion that \"Literal\" means \"string value\".\n. > seems to be a sake thing, not an MVC thing\nneither a MVC nor Sake thing.  fix will be in the *.shade files from the aspnet/Universe repo.  tracking here because it shows up in our builds.\n. fixed in commit aspnet/Universe@90294aa\n. :watch: very close\n. :shipit: must have missed a Refresh in there somewhere \n. :watch: \n. :shipit: \n. oops, meant :shipit: when @NTaylorMullen is pleased as punch\n. is this change still needed?  could we instead use the new NullLoggerFactory in the Common repo?\n. :watch: \n. :shipit: after another JavaScript-conversant reader has a look\n. :shipit: \n. @BrennanConroy suggest closing this PR unless you're planning to do something with it\n. :watch: \n. fixed in commit e9f5605\n. fyi only.  will merge shortly.\n/cc @rynowak\n. ae4cafc002c8475d116b3c5c0be75fe9deb2cb11\n. before I start: nice to see 90 files changing in a design PR :smiley_cat: \n. :watch: not much to comment on so far but I didn't look @ the tests in detail.  also looking forward to the shorter names we discussed today.\n. :watch: \n. :shipit: \n. fix will be in the *.shade files from the aspnet/Universe repo. tracking here because symptoms could be visible in our builds.\n. fixed in commit aspnet/Universe@f6ae75e\n. :watch:\n(changes to @pranavkm's style make this review noisy; please narrow to functional changes and perhaps a couple of wrapping / indentation improvements)\n. :watch: \n. :shipit: \n. :watch: \n. :shipit: \n. @branciat am I correct the partial view named _Observations.cshtml contains something like the following?\nc#\n@using System.Collections\n@model List\n...\n@Html.EditorFor(m => m)\nIf so you may get better results using @model List<Observation> instead.  In any case please provide the view and detail the unexpected results.\n. @branciat which part of the generated HTML is not what you expect?  anything similarly unexpected in the HTML generated when !ViewBag.ModeEdit?\n. @branciat did you edit the HTML slightly?  everything looks as I'd expect except it should be a self-closing tag e.g. <input ... />.\nand what in particular is empty?\n. the name attribute has value \"[0].Content\" in the sample you provided.  what is the problem?\n. good timing @rynowak I just reproduced this issue locally.  it occurs with or without [FromForm] on the parameter.  also tried MVC 5 (just the no attribute case) and see things working fine there.  so this is a regression from that version.\nI observe the data is submitted correctly and has the expected keys in the HttpRequest.  however the List<Observation> parameter is consistently null.\n[FromForm(Name = \"\")] is a rather counter-intuitive workaround but it works.\n. @harshgMSFT no, the collections are at different levels. also #1865 reproduces with MVC 5 and this bug does not.\n. might be why the bug's assigned to someone (me in this case).  I'm debugging further...\n. @branciat we're working on a fix for this.  it should be in our dev feed later this week.\nfor Beta3, the workaround is to add [Bind(Prefix =\"\")] to your action parameter.\n. updating the subject because reported issue is about problems model binding collections.  HTML generation is fine (at least in this respect :smiling_imp:)\n. commit 94e326f\n. will this configuration story relate in any way to the IOptions story?  I don't see how e.g. customers could configure <form/> tag helpers using a config.json file.\n. /cc @HaoK @davidfowl @lodejard \nplease chime in on which of the follow-up points (all toward not overriding a host-provided service) matter most.  I'll file an MVC issue about whatever you feel is urgent.\nhmm, we may not even need to fix AddAuthorization() to remove current AddMvc(configuration) overload.  that might be cleanup we could do separately.\n. @HaoK w.r.t. MvcOptions, AddMvc calls services.AddOptions() near where it calls services.AddAuthorization(configuration).  look at the bottom of MvcServiceCollectionExtensions.\n. @HaoK updated\n- got rid of more functional test hacks but still need to override IApplicationEnvironment\nfyi my plan is to get this in after aspnet/Mvc#2139 but I have not rebased on top of that PR's branch\n- of course, no plans to push anything this weekend\n. @HaoK one line removed in latest iteration\n. hmm, somewhat different scenario there.  suggest you file another bug similar to #1612 in the MVC repo with your thoughts on the importance / urgency of a fix.\n. @HaoK updated FYI.  will push later this evening unless you object to the fix for the\n\nsecond instance of the fallback stuff that lives in Precompilation\n\nissue discussed above.\ncommits are rebased and mostly squashed.  new stuff should be limited to c1270ce and 8408987.\n. @HaoK updated. I cleaned up the delegating IServiceProvider implementation but also moved the pre-compilation ApplicationBasePath workarounds into RazorPreCompileModule (not just one of its sub-classes).  noticed the other sites were not doing pre-compilation during functional test runs.\ncan't find any remaining IServiceProvider implementations in MVC.\n@Eilon please chime in if you think the ApplicationBasePath override has no place in product code.  from my perspective, duplicating this code in three web sites was ugly and didn't align with the work @ianhong is doing to make the framework easier to test.\n. @davidfowl updated per \"choice 2 (fallback)\" in our offline discussion.  would have needed to override the RazorViewEngineOptions setup to avoid IApplicationEnvironment entirely.  suspect customers are more likely to override the  RazorViewEngineOptions setup.\n. commit cc7b319\n. mostly FYI.  will push once the renaming kerfuffle ends.\n. closing because this does not reliably fix the problem.  leaves Git and GitHub knowing the correct folder names but local changes are unfortunately applied together.  that leaves local files unchanged.\nworse, kpm is case-sensitive even on Windows these days :frowning:\nI'll send out a PR shortly proposing new names for the affected web sites.\n. :shipit:\n. @Eilon this is the replacement for #2139.  any objection to the new names?\n. commit e7ee427\n. /cc @NTaylorMullen \n. FYI will make suggested wrapping changes and revert the private method changes locally before I squash and push.\n. commit e9f5605\n. FYI [FromServices] is named for how that attribute is used elsewhere in MVC model binding.  You can add [FromServices] to a property in your model type -- the same way you can use [FromBody], [FromQuery] and so on.  Further properties on the controller are now model bound fairly consistently with how action parameters are model bound.\nMore generally the names of some of these concepts and attributes haven't completely solidified.  Interesting discussion here...\n. please copy over the ScopedInstanceTest class\n. :shipit: \n. :watch: \n. we want to consistently run the functional tests with this middleware in place.  that's why the setup is in a central method and not the individual web site's Startup().  so, no.\n. @HaoK why did you revert all the Startup changes instead of just the app.GetTestConfiguration() calls?\n. shoot, wish you'd held off on pushing the DI change\n:shipit: \n. :watch: \n. :shipit: as long as the xml-docs-test is clean (I may have missed something there) and after we're clear to push to dev again.\n. commit e8091b7\n. FYI only; will push immediately\n. commit 7e3acd9\n. :shipit: \n. :shipit: once @pranavkm is mildly pleased\n. > we use [NotNull] on constructor parameters\nit's rare but we do use this attribute in at least the HtmlHelper, DefaultHtmlGenerator, and ControllerActionDescriptorProvider constructors.\n(the missing [NotNull] attributes e.g. on parameters of constructors directly invoked from MvcServices are also worrisome.)\n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. @marcuslindblom please provide more details on where you are updating RouteData.\ndoes MVC 6 bind the bar parameter if you change the action to public IActionResult Index([FromRoute] Foo bar) {}?\n. @marcuslindblom I could not find a special case for this scenario in the MVC 5 code.  might be a bit faster to debug if you could upload a simplified MVC 6 sample that e.g. does not use a database.  easiest for us if you could host the sample in a GitHub repo.\n. :watch: \n. :watch: \n. :watch: \n. :shipit: after fixing the remaining misleading comment, rebasing, and squashing\n. :shipit: \n. /cc @harshgMSFT @rynowak \n. /cc @harshgMSFT @rynowak \n. @rynowak @harshgMSFT rebased and updated.  changed mind after going back to earlier approach we discussed.  instead removed a special-case that seemed to have a few other poor side effects.\n. should be done except for perhaps one or two unit tests and a functional test for top-level collections (#2129)\n. @rynowak @harshgMSFT rebased and updated.  still needs one or two more MutableObjectModelBinder unit tests and a #2129 functional test.  but very close to non-[Design]\n. rebased and added more tests; have removed \"[Design]\" tag from title\n- comment changes and line-level reverts remain for tomorrow morning\n. done and dusted I hope; two new commits covering PR comments\n. commits 103538b thru 533474d\n. :shipit: thx for getting this in @HaoK \n. :shipit: thx for getting this in @HaoK \n. :watch: for less ugly names and new restrictions in the system.  (fyi expect non-design comments will be about [NotNull] and some odd spacing)\n. > I'd like to propose a moratorium on new names\nit's going to be murder but I'll try\n. it's likely views would perform better if tag helpers were not created only to no-op.  however we should measure things to confirm this is worthwhile since the MVC tag helpers are doing simple checks that work today.\nspecifically:\n\nValidationSummaryTagHelper shouldn't target \"div\" elements then no-op if the attribute doesn't exist: It should target the asp-validation-summary attribute on any HTML element.\n\n\"any\" is too broad.  we likely want to target <div> and <span> and that's about it.  in any case, we should strive to preserve the chosen behaviour and limit work on this issue to the implementation choice.  deal with reevaluating the behaviours separately.\n\nThis should also enable us to no longer have ambiguity between \"should I be a tag helper\" ...\n\ncould you clarify this statement?  is this another point about changing the current MVC tag helper behaviours?\n. @NTaylorMullen thanks, that was much clearer\n. see #327.\nthe basic answer is that we have adapters that could support [Validation] and any subclass.  instead we register only a few subclasses.  so we support [EmailAddress] but not [EnumDataType].\n@Samvrie [EmailAddress] has very permissive validation.  \"a\" is valid.  you could try to find something the following regular expression would reject:\nc#\n\"^((([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])+(\\\\.([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])+)*)|((\\\\x22)((((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(([\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x7f]|\\\\x21|[\\\\x23-\\\\x5b]|[\\\\x5d-\\\\x7e]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(\\\\\\\\([\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0d-\\\\x7f]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]))))*(((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(\\\\x22)))@((([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.)+(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.?$\"\n. @Samvrie please file a separate issue for your new concern.  include information about how your enum validator is being used.\ndo you agree with closing this issue as a duplicate of #327?\nbtw the regular expression I provided earlier is from at least one version of [EmailAddress]. my suggestion was to reverse-engineer that to find a string that would result in validation failures.\n. thx\n. :watch: \n. :watch: \n. 4b5dd19\n. :shipit: as long as you can build from root with aspnet/Razor#169 bits installed (slightly surprised we only have one test like this)\n. @danroth27 probably not.  the reason I mentioned the issue is not urgent is my inability to think of a scenario where problems would be visible.  so it's a potential problem and code smell but not a customer-visible bug.  of course I many be missing a corner case...\n. @harshgMSFT not at all.  that test's current behaviour is that a collection is created with a null element.  no uninitialized POCO instance is created.\nthe only unusual thing in that test is the (POCO) element type doesn't have a conversion from string.\nTL;DR\nthe test behaviour looks odd but is correct: we treat a submission containing \"collectionProperty=some value\" as if \"some value\" were a potentially-comma-separated string of values.  this also matches what a <select/> element with multiple=\"multiple\" would submit (in this case, when a single value is selected).\n. :shipit: \n. :watch: doesn't look ready\n. how are our tests passing?  or what part of the scenario is missing from our test suites?\n. OIC we were simply not testing the \"design-time\" scenarios correctly\n. :shipit: \n. :shipit: after quick fixes and conversation w/ @DamianEdwards \n. :shipit: \n. :watch: \n. :shipit: when @NTaylorMullen is happy\n. /cc @rynowak \n. Updated to include tests and removed [Design] label\n@rynowak any objection to the last commit I added (USE_REAL_RESOURCES)?\n. @rynowak to be clear, there's no \"limitations\" in our tests in this area.  I added USE_REAL_RESOURCES only to make it easy (a one-line addition to project.json) to test any workaround for the [Display] limitation we might come up with.  I agree that if we were successful, we'd remove TestResources and update the few places where we use USE_REAL_RESOURCES.\n. commit 7dd3afe\n. :shipit: after fixing the doc comment and once @rynowak is pleased as punch\n. /cc @Eilon (if you're back) or @rynowak \n. commit 570b1e5\n. nits:\n- your commit description (\"aggressive\" in particular) is a bit too general.  the issue here is that DataAnnotationsMetadataProvider was interfering with the default value provided in DefaultModelMetadata.\n- could have DataMemberBindingMetadataProvider short-circuit if IsRequired is already true.  extra check in that class doesn't add anything but doesn't really hurt either.\n. - please also add tests similar to GetBindingDetails_NoRequiredAttribute_IsRequiredLeftAlone for DataMemberRequiredValidationMetadataProvider\n- nit: IsReadOnly handling in DataAnnotationsMetadataProvider looks correct but isn't tested as thoroughly and could hit similar issues to IsRequired.  if you have time, please add a GetBindingDetails_NoEditableAttribute_IsReadOnlyLeftAlone test too.\n. :watch: for one or two more tests\n. :shipit: w/ one rename\n. /cc @rynowak or @NTaylorMullen\n. fyi I'm working on adding DefaultHtmlGenerator tests to cover GetCurrentValues().  done otherwise\n. Updated.\nNow focused on #2240 i.e. we've closed (or soon will close) #2027 and I'll update the commit descriptions to reflect the different focus.  Aims are now to\n- get rid of the ugly out parameter,\n- move associated code into one place, and\n- address #2240.\n. /cc @pranavkm \nfyi I've addressed @NTaylorMullen's last couple of comments\n. @pranavkm updated\n. 9ac6ebd\n. self-assigning and adding to current milestone per offline discussions\n. 9ac6ebd\n. @harshgMSFT suggest closing this PR\n. :watch: mostly for a couple of answers\n. :shipit: \n. :shipit: if @harshgMSFT is happy\n. fyi only; will submit shortly\n. @dpaquette FYI this should be a tag helper you could write for your own use, pulling what you want from the <link/> or <script/> tag helpers. Or feel free to submit a PR for this issue.\n.  ab4d2ee with thanks to @dpaquette \n. FYI only; will push changes once builds settle\n. @rynowak updated\n. fc1017f\n. :shipit: (didn't ask for you to wait for me)\n. :watch: \n. @weitzhandler server-side we simply execute any ValidationAttribute or subclass we find.  client side we do two things:\n1. special-case some attributes for Unobtrusive client-side validation e.g. [EmailAddress] and [Compare]\n2. if you use @Html.Editor(), @Html.EditorFor(), or the <input/> tag helper, generate <input/> elements with the appropriate type attribute based on [DataType] (and the property type).  this allows browsers to validate the inputs.\nI suspect the scenario you've opened this issue about is 2. in my list -- where we generate <input type=\"number\" .../> and where we don't.  your type=number list above matches what we have in both MVC 5 and 6.\nplease confirm your request is for helper calls such as @Html.EditorFor(m => m.ShortProperty) to generate <input type=\"number\" .../>.\n. updated subject to reflect what would need to change here.\n@weitzhandler In the meantime you could create a Shared/EditorTemplates/Short.cshtml file containing for example\nc#\n@model short\n@Html.TextBoxFor(m => m, htmlAttributes: new { type = \"number\" })\n. > not sure what I should include in the template, since I want the validations to be generated as well\ndo you mean validation attributes?  should get those automatically with what I recommended:\nc#\n@model short\n@Html.TextBoxFor(m => m, htmlAttributes: new { type = \"number\" })\nor, if you prefer tag helpers\nc#\n@model short\n@addTagHelper \"*, Microsoft.AspNet.Mvc.TagHelpers\"\n<input asp-for=\"@Model\" type=\"number\"/>\notherwise feel free to include @Html.ValidationMessageFor(...).  one downside is that would be very inconsistent with the default templates.\n\ndon't see any reason not to have decimal\n\ndecimal is already special-cased w.r.t. formatting.  but you are correct that the <input/> tag helper and @Html.Editor() currently use the basic type=\"text\" for that type.\n. fixed in 73e8fc1\n. @anfomin at least your first point is about validation, not model binding, and both may relate to bugs we recently fixed.  please:\n- file new (individual) issues rather than adding comments to a design discussion\n- let us know what MVC version you are testing\n. /cc @davidfowl any of this that should not be checked into the repo?\n. @BillHiebert will newer VS versions keep making changes like this?  if yes, I'll get it in.  if no, guess we'll try to avoid mixing these temp changes into other commits...\n. trying to find the thread but think @BillHiebert or someone said this related to letting VS know there's an associated test project.  the upshot might have been along the lines of \"well, these files are for VS\".\nprobably means we need an aspnet/DNX PR similar to this one.  but let's wait 'til we hear...\n. found the thread.  helpful though @BillHiebert didn't mention permanence.\n@sayedihashimi asked\n\n@billhiebert do you know how the Service item is added to the project file?\n\nand @BillHiebert responded\n\nIt is a VS thing. It is a way to have a project which is using a specific service load the service when the project opens. This avoids the service having to be loaded for all projects.\n\nwow, and someone named @davidfowl had earlier commented\n\nIt's ok. The project file exists for crap like this.\n. ok @rynowak one sec ...\n. :watch: for a simpler functional test setup\n. :shipit: \n\n@haruair thanks for catching this typo.  I'll get the change in shortly.\nfyi your branch is about 65 commits behind the current dev branch.  in the future please rebase on the latest prior to opening a PR.  (of course that's 65 commits done without catching this :smiley_cat: )\n. fefad34\n. /cc @Eilon @NTaylorMullen @DamianEdwards \nnote issue mentioned at bottom of description.  probably need to avoid that in release branch too (?)\n. updated\n. 5882cdb\n. low priority, I agree.  but we pay attention to [Display(Name=x)], so why not [Display[GroupName=y)] as well?\n. @anfomin could you please upload a small sample of what you're trying to do?  Want to avoid testing a slightly different scenario.\nA GitHub repository is easiest for me but feel free to send a Zip file offline or whatever.\n. thanks @anfomin.  I am able to reproduce the tightly-related issues you reported.  both appear to be regressions compared to MVC 5.\none workaround for the ModelState.IsValid issue is to remove the \"Collection.index\" fields entirely.  instead name the fields using the C# indices e.g.\nc#\nfor (var index = 0; index < Model.Collection.Count; index++)\n{\n    @Html.LabelFor(model => model.Collection[index])\n    <div>\n        @Html.EditorFor(model => model.Collection[index])\n        @Html.ValidationMessageFor(model => model.Collection[index])\n    </div>\n}\nhave not found a workaround for the problem binding directly to a collection (except not doing that at all).\n. 1. the root cause of the first problem @anfomin reported is model binding adds ModelState entries for the Guid-indexed collection entries e.g.\n   \n   but these remain Unvalidated because validation checks the created model and its int-indexed entries e.g.\n   \n   (all entries above except Collection[d6dc29c5].Name and Collection[8d51753e].Name are either Skipped (e.g. TempData) or Valid.)\n   in MVC 5, the final ModelState instead looks like the following and both entries are Valid:\n   \n2. the root cause of the second problem is MVC 6 lacks support for copying entries into an existing collection.  properties such as public IList<AnotherObject> Collection { get; } = new List<AnotherObject>(); and calls such as TryUpdateModel(collection, \"Collection\"); work fine in MVC 5 but MVC 6 does not support either case.\n. addressed item (2), the lack of support for copying entries into a collection in 3fd4991\n. @harshgMSFT if you get back to this before I do, I have a branch and a few thoughts to share...\n. :shipit: w/ one suggested change\n. > needs to be a way ... to provide attributes and keep otherwise default or common use case behaviour\n@chaoaretasty you have two options\n1) pass null for parameters you do not need when invoking the shortest HTML helper overload with the parameters you do need\n2) use the MVC tag helpers e.g. <input asp-for=\"expression\" data_foo=\"bar\" />\nwe may be missing some overloads that would not create ambiguities.  please let us know if you notice any as you use MVC 6.\nToHtmlAttribute() would allow more overloads containing htmlAttributes without ambiguity.  but it seems like overkill and could confuse users e.g. \"what is the difference between passing an anonymous object to this overload and an IHtmlAttribute to that?\" or \"can IHtmlAttribute handle multiple attributes?\".\n. > BeginForm() gives a form element using HttpContext.Request.RawUrl which no other overload uses\nhmm, good point.  in MVC 6 we use the raw request URL only when all parameters are null.  that special case is only a slight extension of the MVC 5  behaviour.\nhowever we could remove htmlAttributes from the condition to better support your scenario.  that would break compatibility slightly but might be justified here; without the history, looks a bit odd to include htmlAttributes in the URL calculation.\nbtw I believe no other HTML helper has a similar \"only if every argument is null\" special case.\n. 9eb87d4\n. thanks to @henkmollema \n. :watch: just for test issue\n. :shipit: \n. fixed in 689f5bf\n. :shipit: but update commit description to include a detail or two e.g. what's changing.  also reference the correct issue -- #2307.  2370 doesn't (yet) exist.\n. @victorhurdugaci \n- which is the base change you're reacting to here?\n- what is the timing for the set of changes?\n- suggest this change should not impact the generated files under test/Microsoft.AspNet.Mvc.Razor.Host.Test/TestFiles.  instead change MvcRazorHostTest.RunRuntimeTest() and ...RunDesignTimeTest() to use the same filenames as before (nput files are still read from disk) but check them against the renamed resources.\n. :watch: \n. :shipit: \n. @triage this is a dupe of #105.\nTL;DR\nTypeExtensions includes a few helper methods not available directly from TypeInfo e.g. IsCompatibleWith() and ExtractGenericInterface().  for a few other cases, it's probably just as good to use the provided System.Reflection.Extensions and System.Reflection.TypeExtensions packages.  the remainder are covered by #105.\n. @harshgMSFT suggest checking if this bug reproduces with a middleware in place that sets the current culture.  likely the behaviour @Muchiachio is seeing comes from the fact we haven't got such a thing yet.\n. :shipit: \n. :watch:\nalso\n- are CIs failing because you haven't rebased recently?\n- will ModelMetadata additions we discussed today be included in the next iteration?\n. :watch: looks like a couple of files are missing\n. :watch: for a few doc changes and additions\n. :shipit: with final (doc comment) fixes\n. :shipit: with final (doc comment) fixes\n. :shipit: (all nits)\n. FYI only; I'll merge this quick fix shortly\n. /cc @pranavkm \n. 73e8fc1\n. /cc @kichalla \n. oops, should reference #2311\n. fixed ref\n. 689f5bf\n. :shipit: (like it)\n. /cc @pranavkm @NTaylorMullen \n. cef32d4\n. /cc @sornaks \n. ping @sornaks \n. 8965ac9\n. :shipit:\n. @sornaks haven't you checked this in?  suggest closing the PR\n. > I am going to write a functional test for this instead\n@sornaks should this PR be closed now?\n. :shipit: after fixing the parameter / field names and @harshgMSFT signs off\n. please add details of your configured template routes and the view.  in addition, is model.Id == 2 at a breakpoint in the action (versus when displayed in the view, which would imply the ModelState contains unexpected values)?\nseparately we've fixed a few bugs in model binding lately.  which exact version of MVC are you using  i.e. which DNX feed is configured and what does your project.json contain?\n. :watch: \n. :watch: at a high level this looks good.  getting close to time for do the work for realz.\n. :watch: very close\n. please add a few tests of the new GetTypeNames() method.  coverage of Display() and Editor() helpers isn't great and we definitely lack anything like old tests of GetViewNames() in http://aspnetwebstack.codeplex.com/SourceControl/latest#test/System.Web.Mvc.Test/Html/Test/TemplateHelpersTest.cs  my suggestion is to use those tests as inspiration, not to copy everything.\n. :sihpit: after addressing @Eilon's comment and my less-important ones\n. :sihpit: after addressing @Eilon's comment and my less-important ones\n. :shipit: once you figure out why the CIs are failing (looks like Coherence-Signed and therefore the dev feed hasn't caught up)\n. @Bartmax the last sample you've shared includes conflicting [DataType] instances.  given the model itself is inconsistent, what exactly would you suggest change?\n\n[EmailAddress] does also affects display and processing\n\nyes, [EmailAddress] is a subclass of [DataType].\n. MSDN makes the relationship between the classes clear.\n. @pranavkm there's no gap.  views execute with a null model unless the action sets ViewData.Model, the action passes a non-null value to View(), or model binding succeeds (at least partially).  since none of those are true for the original Login() action, the view behaves as expected.\n. @dpaquette \n\nIf there is a class or attribute added to the validation summary then we can easily handle the show/hide via CSS\n\nThis is supported today: The GenerateValidationSummary() code adds one of the validation-summary-errors or validation-summary-valid classes depending on the status when the page is generated. Beg, borrow, or steal JavaScript code that does whatever you like for <div> elements with those classes.\n. @henkmollema could you please update this PR to include a couple of unit tests confirming the behaviour you prefer?  looks like you've fixed #2301 but there's nothing preventing a regression in the future.\nI also suspect your branch is somewhat out of date.  if you rebase to dev before updating the server branch, the CI checks should succeed.\n. we tend to run the tests from the command line i.e. use build.cmd or dnx . test in a specific test directory.\n. :shipit: which in this case means\n- please rebase to latest dev\n- please squash the commits into 1 so that me pushing doesn't lose your attribution\n- then let me know and I'll push\n. 9eb87d4\n. :watch:\n. :shipit: based on responses above and offline conversation\n. is @model already limited to a single line?  if not, why not isn't it changing in this PR?\n. :watch:\n. > which is covered in the Razor PR\nexcellent.  pls update commit description here to mention aspnet/Razor#360 (better, the final Razor commit when you push) also handled @model\n:shipit: from me\n. @Bartmax adding a tag helper similar to @Html.DisplayName(), @Html.Value(), et cetera would be very limiting and strange.  those HTML helpers can all be incorporated into attribute values, concatenated with other strings, and so on.  and a source element that wraps nothing and results in a generated string (not an element) looks Just Wrong:tm:  so don't expect direct tag helper counterparts.\nnote we've tossed around related ideas such as tag helpers that only add id, name, or value attributes to a targeted element.  beyond the existing <option/> tag helper (which only adds a selected attribute when it does anything), don't think we have any immediate plans in this area.\n. @Bartmax what you asked for originally was a tag helper variant of @Html.DisplayName().  what you implemented was a <th/> tag helper that generated an element with useful content.  your comment about IEnumerable makes more second context.\nit's true our tag helper expression context does not handle collections in the same way the @Html.DisplayName() HTML helper does.  what workaround did you use for that?\n. de63075 and fcf7b15\n@harshgMSFT sorry I missed fact this issue was assigned to you.\n@JamesNK thanks again.\n. @ChrisKlug your environment is not messed up.  You simply have older VS tooling than we currently need to use.  That tooling has not yet been released but should be soon.  Switching to the older paths is a fine temporary workaround.  The other option is to use one of our older branches -- something still using the older paths.\n. :shipit: \n. :watch:\n. :shipit: \n. should work fine.  suspect the issue is the second @.  try @Html.Raw(ViewBag.xxx) instead.\n. interesting.  there is absolutely nothing special about the @Html.Raw() methods and the ModelBinderException comes from much lower in the stack.  could one of you with a test project please try it out with different DNX variants -- x86 / x64 and CLR / Core CLR?\nalso, which MVC and DNX versions are you testing?\n. @Eilon @Html.Raw() remains an instance method https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Rendering/Html/HtmlHelper.cs#L524  casting probably works because the Raw(string) method is called instead of Raw(object) though why those are different remains unclear.\n. @GuardRex the behaviour seen here is as-expected when attempting to pass a dynamic value to an interface. The downside of that interface is a few cases involving dynamic such as the one you hit. (The upside is the ability to replace the implementation completely if you wish.)\nYou have a number of potential workarounds here, including the cast @henkmollema first mentioned. For example:\n<p>Raw title: @Html.Raw((object)ViewBag.Title)</p>\n<p>Raw title: @(((HtmlHelper)Html).Raw(ViewBag.Title))</p>\n<p>Raw title: @Html.Raw(ViewData[\"Title\"])</p>\nSince ViewData (Dictionary) look-ups far out-perform ViewBag (dynamic) invocations, the last is probably the best choice.\nBTW @Bartmax the specific casts, null checks, and overloads here are not that important. The relevant bit is just using IHtmlHelper versus calling a non-virtual method on the concrete HtmlHelper class in MVC 5.\n. @yishaigalatzer that approach might work in some cases but it isn't possible here. DefaultHtmlHelper<TModel> ends up inheriting from two base classes -- DefaultHtmlHelper and HtmlHelper<TModel>. Delegation to avoid that makes things very messy.\n. Clearing milestone and assignee in case triage wants to take another look at this.\n. :watch: \n. :shipit: \n. @harshgMSFT it isn't clear what the expected behaviour is in any of the cases you've outlined or why the current behaviour is incorrect.  please describe the exact Asp.Net 4 and MVC 5 behaviours for these cases.\nseparately what reported issues (if any) will this PR fix?\n. :shipit: with the perfect doc comment addition :smile_cat: \n. :+1 to @davidfowl's comment: what problem does this change solve? avoid one use of a system-provided default encoding?  the downside of making Encoding incorrect when specific information is known (from RazorPage.Output) seems to outweigh any such upside.\n. >  use Unicode as the default encoding in places where we don't know what the Encoding is\nwhy is Unicode more correct than the existing choice for those places?\n\nwe should leave the code unchanged in places where we were already passing in the right encoding\n\n:+1: \n. > the passed in encoding was not used anyway\nwe discussed this at length when adding StringCollectionTextWriter initially and decided to keep all TextWriter.Encoding values consistent -- pass it around.  the only inconsistency was a mistake: should pass ViewContext.Writer.Encoding in when creating a StringCollectionTextWriter in PartialAsync().\n. @sornaks please correct PartialAsync()\n. :watch: just for the resource rename. (and wondering why the CIs are still failing)\n. 323ec2f\n. Behaviour w.r.t. [MetadataType] or [ModelMetadataType] on a property's Type in MVC 5 and 6 is consistent: Neither version brings information in from AnotherType in the example below i.e. the only visible validators are PropertyTypeValidatorAttribute and the adapter for RequiredAttribute.\n``` c#\n    public class MergedAttributes\n    {\n        [Required]\n        public PropertyType Property { get; set; }\n    }\n[PropertyTypeValidator]\n[MetadataType(typeof(AnotherType))]\npublic class PropertyType\n{\n}\n\n// Not seen when using MVC 5 or 6.\n[AnotherTypeValidator]\n[HiddenInput]\npublic class AnotherType\n{\n}\n\n```\nHowever the two versions are inconsistent in a different way. Will open a new bug for that inconsistency.\n. /cc @rynowak @harshgMSFT \n. @rynowak @harshgMSFT updated\nmight add a few more unit tests in ControllerActionArgumentBinderTests tomorrow morning.  mainly to cover read-only properties that will be ignored, binding more than one controller property, and successful bindings after unsuccessful ones (previous implementation gave up activating on first failure).\n. @rynowak @harshgMSFT updated: rebased, addressed comments, added tests, and more\n. @harshgMSFT @rynowak updated to not use data annotations or the runtime type of controller properties\n. @harshgMSFT updated that test class...\n. 3fd4991\n. :watch: and haven't looked in detail at the tests yet\n. :watch: mostly for test gaps and potential ModelAttributes extension\n. :shipit:\n. :watch: for better encoding coverage in the test classes that are using just NullTestEncoder.\n. the following classes do not test using CommonTestEncoder at all.  please fill these gaps.\n- AnchorTagHelperTest\n- FormTagHelperTest\n- TagHelperOutputExtensionsTest\n- ValidationMessageTagHelperTest\n. :watch: \n. @ajaybhargavb the named tag helpers all get TagBuilder instances from DefaultHtmlGenerator.  they then at least call MergeAttributes.  so the basic thing is to ensure extra encoding does not occur.  for example, use the CommonTestEncoder instead in tests that just check output.Attributes (and see nothing is encoded).  or, in tests that look at the final string, should see HTML encoding of the attribute values.\nfor TagHelperOutputExtensionsTest I recommend creating the TagBuilder instances with CommonTestEncoder as well.  won't get used but that is still testing the scenario.\n. :shipit: \n. :shipit: but make sure the CI is green first\n. @harshgMSFT could you please check if de63075 (which removed the [Required] special case for JSON inputs) also fixed this compat issue?\n. dupe of #2203.  both are low-priority because we haven't come up with scenario where the \"bug\" (found through code inspection) makes any difference.\n. :shipit: once build.cmd runs cleanly\n. :shipit: once you've fixed the comment @NTaylorMullen mentioned\n. needs additional test cases involving attributes in the Razor source with duplicate names: identical names and just case-insensitive matches in both unit tests (especially involving tag helpers that recreate elements e.g. <link/> or restore attributes e.g. <form/>) and functional tests. otherwise are not confirming MVC uses Razor runtime correctly.\n. :watch: \n. :shipit: once aspnet/Razor#279 is in\n. :watch: \n. implemented but since removed.  the @helper feature imposed too many restrictions on other features in Razor e.g. tag helpers and FlushAsync().\n. Based on the tests that are disabled with this bug as the reason, problem is much more broad. All values bound from user input should have ModelState entries. This affects ByteArrayModelBinder, FormCollectionModelBinder, and FormFileModelBinder as well as the two mentioned in the original description (BodyModelBinder and HeaderModelBinder). So, \"type-matching\" as well as \"greedy\" binders.\n. @harshgMSFT could you please clarify the MVC 5 / 6 differences in these scenarios?\n. am I correct this is the first of a few (how many?) PRs and that later ones will add logging where other tag helpers currently throw or no-op?\n. :shipit: when @rynowak is moderately pleased\n. /cc @NTaylorMullen @DamianEdwards \n. c162209\n. FYI only\n. 838f672\n. Updated title. ByteArrayModelBinder is the only type-matching binder that ever returns null when the tested property is of the matched type. The rest of the binders work as expected. In particular all other tests skipped supposedly due to this bug had other issues.\n. e31eab0\n. /cc @Eilon \n. work with @ianhong to track testing this new code when we get to Html.TextBox() in #453 \n. :watch: \n. should close #2322 if we accept this one.  they aren't exactly duplicates and #2464 has a slightly wider scope.\n. @harshgMSFT why is this a bug?  what visible impact do the current choices have?  if there's an impact, suggest filing a bug about that.\nwe discussed the approach at length when making the changes you've highlighted and this was the best idea anyone came up with.  in particular changing the condition leads to a ripple of additional complexity in other parts of the system and unnecessary churn, ending up with no measurable improvement.\n. not seeing an actual impact in any of this.  you haven't described a difference in whether values are correctly bound, in the ModelStateDictionary instance, and so on.  ModelBindingResult isn't seen outside the model binding system.\nas I said in the test PR, a non-null ModelBindingResult with IsModelSet==false is only a signal to the next ComplexModelBinder up.  your test is broken because it mixes a IsModelSet==true case with IsModelSet==false and they are not the same scenario.\nthat said, the \"greedy\" model binders may not be not fitting well into the MutableObjectModelBinder / ComplexModelBinder world and we may need to add more information to ModelBindingResult to handle those differences.\n. I'm not talking about an implementation issue but think you are.  the greedy model binders are not the general case and we likely need to pass more information for them to integrate correctly.\n. @wobuzhudao please provide more information about your scenario e.g. the content of your action, view, and the model type. I suspect what you're seeing is by design since the raw value string[] {\"true\", \"false\"} should bind a bool property to true.  the form data identifies the state of the fields, not what has changed, and I'm assuming the property was originally true in this case.\n. > Is this also by design?\nYes. The browser submitted a value only for the type=\"hidden\" field and not the unchecked type=\"checkbox\" earlier in the form.\n. @danroth27 are we going with _ViewImports.cshtml?\n. Updated title since this is no longer a question\n. - 8a70172\n- aspnet/MusicStore@3bdaec5\n. FYI only; will push immediately\n. @rynowak yeah, it was just a warning from DNU about changes in the project.json syntax.\n. FYI only. Mvc.sln doesn't have a build impact so I'm not waiting on Travis or AppVeyor...\n. See also aspnet/RazorTooling#10\n. Basically there's two ways to go from here:\n1. Fix this bug or aspnet/RazorTooling#10 -- either should get Razor precompilation working reliably across the MVC repo.  Then revert commit 3fbead0.\n2. Decide Razor precompilation is unstable and will take a significant (unbudgeted) effort to get working reliably.  Then remove our support for this feature, along with the PrecompilationWebSite.\n. @Eilon @rynowak @pranavkm any thoughts on doing this until and unless we get pre-compilation working reliably when building functional tests within VS?\n. No other issues.  In fact VS freezes more often when I'm editing in the Razor repo :frowning: \nNote this leaves the #2498 errors in play.  I could remove those 10 as well.  But then we might as well throw away the PrecompilationWebSite entirely.\n. @Eilon \n1. I looked at #2498 some without narrowing the problem down much.  The symptoms certainly point toward a component used only when pulling the PrecompilationWebSite into a larger VS build (but I can't think of a component unique to that scenario) or some lack of generality in the site itself, the functional test setup, VS, or the runtime. So, yeah, it's one of the bits you listed :smile: and right now #2498 is filed in MVC.\n2. Sure.  Will file after I push.\nIn the meantime I'll add the additional errors seen without this change to the commit description.  That is, I'll make sure the change still makes a difference a few days later.\n. @rynowak I didn't get back to this over the last couple of days.  The change definitely makes debugging Razor code-generation orders of magnitude easier.  I'll try to reproduce the original issue(s) over the weekend and re-confirm the change helps even when not doing low-level debugging.\nWill take a more definitive action in the next day or two...\n. Checked VS behaviour without this change.  Much uglier -- 26 errors instead of the 10 (mentioned in #2498) just for PrecompilationWebSite.  And I can't start the tag helper sample from VS.\nSo I'll check this change in shortly.\n. 3fbead0\n. @Eilon w.r.t.\n\nalso log a bug to restore these (including pointing to the changeset that removes these)\n\nI added a link to the commit in the existing #2498 which is generally about Razor precompilation issues.\n. @kichalla looks like a typo. What happens if you pass routeName: \"ProductsApi\" into RouteUrl()?\n. :shipit: \n. but why is AppVeyor build failing?  looks like something related to IExpirationTrigger changed.\n. @mrchief in addition to @rynowak's suggestions, the single call to UnobtrusiveValidationAttributesGenerator.GetValidationAttributes() is in a virtual method. Your application could add a DefaultHtmlGenerator subclass to DI, overriding GetValidationAttributes(). This may also suffice for your scenario.  As @rynowak asked, what do you need to customize?\n. :watch: \n. :watch:\nWould also like to see some tests showing ViewContext properties getting values from HtmlHelperOptions or a \"parent\" ViewContext and perhaps confirming the equivalent IHtmlHelper properties don't get out of sync.  Right now ViewContextTests is very light.\n. looks like this PR needs a rebase to latest dev.  failing due to a recent HttpAbstractions namespace change.\n. fix small-ish comments, rebase, and :shipit: \n. :watch: \n. :shipit: with fixes for minor comments and after squashing your commits\n. :watch: \n. @maxbundchen looks like you want to prevent the view reading from the ModelState. The HTML helpers for inputs (e.g. EditorFor() and TextBoxFor()) always check ModelState first to ensure values round-trip correctly.\nTo override that behaviour, I recommend executing the following near the top of your IntegerList(IntegerListViewModel integerListViewModel) action:\nc#\n  for (var i = 0; i < integerListViewModel.List.Count; i++)\n  {\n    ModelState.Remove($\"List[{ i }]\");\n  }\n(If you deal separately with errors, do that before clearing those ModelState entries.)\n. > could be a potential problem in other situations\nGiving ModelState (the original data from the form) precedence is by design. To do otherwise would mean users are not given an opportunity to make small changes and resubmit.\nI provided a workaround for your unusual scenario.\n. :shipit: \n. @JamesNK yes, HtmlString is now used (not just special-cased) in RazorPage for example.  IViewComponentHelper also has a few methods that return HtmlString.  So think of HTML encoding and not HTML helpers when you read HtmlString.\n. > What is a ViewComponent?\nThe replacement for child actions in MVC 6. Application authors can create ViewComponents and call them from any view.  They have some similarities to Controller classes but are directly invoked, not model bound, routed to or otherwise automatically used during request processing.\nIn any case you made the right suggestion for ViewComponent in PR #2524.\n. ab4cd5c\n. @dpaquette  We just changed the repos from MS Open Tech to .NET Foundation so there's a different CLA. The new CLA is simpler than the old one and so should only take a few moments to re-sign. Apologies for the extra bit of work!\n. :shipit:\nPlease rebase your branch to latest dev then squash your commits down to one (git rebase -i head~8 and change pick to s or squash for all commits except the first.  We won't lose attribution when merging if you do that.\n. ab4d2ee Thanks for your contribution!\n. Change looks good for unnamed routes. But what about uniquely-named routes e.g.\n``` c#\n  [Route(\"A\", Name=\"Inherited\")]\n  public MyController\n  {\n  }\n[Route(\"B\")]\n  public DerivedController : MyController\n  {\n  }\n```\nShould the route named \"Inherited\" be available for the derived controller?\nIf that decision has already been made, :shipit: \n. lgtm in general but :watch: for one question\n. :shipit: \n. /cc @pranavkm @NTaylorMullen \n. Updated but FYI only. Will merge as soon as I've rebased & rebuilt Razor change and tested this again.\n. 517c013\n. You are using tag helpers in this scenario.  The <form/> tag helper matches all <form/> elements, enabling addition of an anti-forgery token even when the action is explicit.\nAnother workaround would be <!form action=\"@Url.Action(...)\" method=\"POST\" ...> in the Razor source.\nThat said, the # should not be lost when tag helpers are enabled.\n. The ModelMetadata and IModelMetadataProvider extensibility story is significantly different in MVC 6. You would need a HumanizerMetadataProvider which implements IDisplayMetadataProvider. Then update the ModelMetadataDetailsProviders collection in MvcOptions to add that humanizer at the end (see MvcOptionsSetup for the base).\n. @bojanrajkovic Assuming your request is about unit testing a custom model binder or similar extension, you may want to glance at our model binding unit tests e.g. https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Core.Test/ModelBinding/CompositeModelBinderTest.cs  We use EmptyModelMetadataProvider in at least some of those.\nAlternatively your example is perhaps a bit more like an integration test. https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.IntegrationTests/MutableObjectModelBinderIntegrationTest.cs and other test classes in that directory fit that category.\nThe final possibility would be to imitate our functional tests, which include the full request / response pipeline e.g. https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.FunctionalTests/ModelBindingFromQueryTest.cs and https://github.com/aspnet/Mvc/tree/dev/test/WebSites/ModelBindingWebSite\n. @ajaybhargavb :+1: to @JamesNK's comment:\n\nShould an overload be added for the ViewComponent.Json method?\n\nWe try to keep controllers and view components fairly consistent.  So it's probably also a bug (@rynowak ??) that ViewComponent.Json() does not currently register IDisposable data for disposal.\n. :watch: \n. :shipit: and handle the remaining comments (ViewComponent and an additional test) in a follow-up PR.\n. :watch: \n. :shipit: \n. Had three cases when we opened this bug:\n1. Property in model type has an associated [Required] attribute that strangely doesn't actually validate. Submission leaves the property null.\n2. Property in model type has associated [BindRequired] and [Required] attributes. [Required] attribute strangely does not actually validate. Submission does not include data for the property.\n3. Property in model type has associated [BindRequired] attribute but no [Required] attribute. Submission does not include data for the property.\nIn all cases, we previously provided a fallback error message.\nHowever case 1 no longer exists because the fallback code existed only in model binding. @rynowak removed the [Required] special cases from model binding. Validation code has no equivalent fallback so :dancers: \nWe have a number of other bugs and design change requests out related to cases 2 and 3. For now i.e. for this bug, I will just remove the fallback message from case 2. If there is no [Required] attribute (case 3), model binding will continue to provide its own error for the missing property data.\ntl;dr; wherever I said \"[Required] attribute\" above, I meant \"validator with IsRequired == true\".\n. Postponing based on offline conversations. Will discuss and decide what to do about the mentioned cluster of bugs touching on how [BindRequired] works.\n. /cc @pranavkm @rynowak \n. 61b76fd\n. Like the general direction.\n. :watch: \n. @JamesNK I tried to rebase your changes on dev now that @ajaybhargavb's d6012d4 is in.  Things went South and I'd appreciate you taking a crack at squashing and rebasing.\n. - de63075 is full merge of your much-appreciated changes @JamesNK \n- fcf7b15 removes a couple more tests depending on the odd [Required] behaviour\n. @JamesNK I forgot to ask you to please squash your commits. That will make our merge go more smoothly and help avoid losing your attribution.\n. I'll try it out.  Don't worry about the number of @ajaybhargavb 's commits that show up here or the extra stuff shown as your changes.  We're done reviewing and do not need another PR; the important thing is just how things compare to dev.\n. @JamesNK FYI git rebase -i head~9 worked wonderfully as I dropped out-of-place \"Merge\" commit that was attributed to @ajaybhargavb and squashed your 8 commits.  Testing final build now...\n. ab4cd5c\n. Thanks for the contribution @JamesNK !\n. :watch: \n. @Alxandr interested in doing a quick PR?  Looks like the DateTime object created here should either be a DateTimeOffset or have DateTimeKind.Utc.\n. @Matthew-Bonner sure I'll merge this.  :shipit: \n. 648f00c\n. Is this about just the property name?  Note that's irrelevant in every scenario except unit testing.  The attribute name (what users see in the Razor source) is currently asp-file-version.\nIf we're going to change the attribute as well, would the name there be asp-append-version?\n. 3fe0490\n. :watch: \n. Have you confirmed this works just as well after messing with the timezone on your machine?  If yes, :shipit: from me.\n. :watch: \n. :watch: primarily for response on open \"huh?\" comment\n. :shipit: \n. :shipit: \n. What fixes are contained in the SkippedFixesBase branch?  Is that the same branch as CleanupMSD, RestoreValidationNode, or something else?\n. Same as which branch?\n. :watch: \n. :shipit: with teensy rename\n. :shipit: \n. No longer needed since the public constructor in TagHelperAttributeDescriptor will remain unchanged.\n. General thought: In an erroneous line such as @model, errors will highlight model with this change.  Would including the entire line or at least the leading @ make more sense?  (Highlighting either @model or @model here.)\nCould / should we do that for all errors within directives?\n. :watch: \n. :shipit: \n. :shipit: when @NTaylorMullen is satisfied\n. :watch: \n. Agree with the separation of bugs we discussed offline. This PR is good to go.\n. :shipit: \n. @dgee2 the [DisplayName] attribute does not exist in .NET Core. To avoid inconsistencies between frameworks, MVC 6 does not use this attribute at all. Please use [Display].\n. :shipit: let me know if you can't address my minor comment. If so, I'll merge as-is and we'll do that cleanup some other time.\n. @dpaquette sorry to say, there is something else you can do. Not urgent (due to the long weekend) but please rebase your fork on our dev branch and fix the conflicts in your commit. No need to create a new PR; just git push -f to your server branch. Let me know when it's updated.\ntl;dr; Our recent stabilization work and large number of breaking changes means I can no longer automatically rebase [my copy of] your branch. If I were to address the conflicts, it wouldn't be your change anymore. There are ways around this but you fixing the conflicts is simpler.\n. 3fe0490\n. :shipit: \n. :shipit: \n. @Azaret where are you including the @addTagHelper directive?\n. sure\n. The Exception does not reproduce with Beta 5 bits. I needed to back up to Beta 4 to get that exact behaviour.\nHowever the problem is not fixed at all in Beta 5; the symptoms are just different. In particular <a asp-controller=\"Home\" asp-action=\"Index\">Index</a> is passed through into the generated HTML. In some ways this silent failure is worse than the previous exception.\nFix is relatively simple: We have a few visitors that need to consistently recurse into sections.\n. Clearing milestone so this confirmed bug can be triaged.\n. Closing because newer aspnet/Razor#412 issue is in the correct repo.\n. 8a70172\n. FYI was issue #2489\n. :shipit: \n. :watch:\n. > sprinkle [NotNull]\nNot if you mean on the constructor parameters @NTaylorMullen  We have those attributes in a few places but the norm is to leave things to DI.\n. :shipit: with two more public -> protected changes\nlike it a lot\n. :shipit: \n. This is a duplicate of #2581 (and a few other duplicates). @NTaylorMullen added the necessary infrastructure to Razor (issue aspnet/Razor#361, commit aspnet/Razor@0e61b49) and also changed the <a> and <form> tag helpers to use it (@e689863). In nightly Beta 5 builds, these tag helpers are now associated only with elements that have one of their asp-* attributes.\nWorkaround in earlier releases is to add an exclamation mark to the element name e.g. <!form>....\n. @anfomin are you calling Component2 directly from Component1? If yes, this is somewhat similar to calling one action method directly from another: It may work in some cases but is not recommended.\nView components are designed to be invoked from views. The implementation does such things as setting up ViewContext and ViewData correctly prior to the actual call.\n. @anfomin your scenario makes sense but making direct calls from one view component to another is not something MVC provides out-of-the-box. Either use another framework for managing your loaded widgets or ensure the inner component (component2) is configured correctly before calling Invoke() or InvokeAsync().\nIn current Beta 5 bits, \"configured correctly\" involves creating a ViewComponentContext instance containing a new ViewContext (liked to that of the parent ViewComponent) and ViewDataDictionary<TModel>. Assign that instance to the ViewComponentContext property if you have derived from the ViewComponent base class. Otherwise set the correct property or properties in your POCO view component.\n. @Bartmax the [Required] attribute is not part of MVC. What we are doing in MVC 6 is matching the BCL semantics and avoiding additional magic beyond that. See https://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.requiredattribute.aspx for more information.\nIf you prefer to ensure a particular value appears on the wire, please use [BindRequired].\n. @janna173 what DNX version are you using? If running the site from the command line, dnx --version shows this information. If running from within Visual Studio, instead check the global.json file for a sdk / version entry.\n. @janna173 I suspect your setup is fine but that you've hit one of the recent breaking changes introduced during Beta 5. If the @addTagHelper \"*, Microsoft.AspNet.Mvc.TagHelpers\" statement is in _GlobalImport.cshtml, try renaming that file to _ViewImports.cshtml. See this announcement for more information.\n. @Tragetaschen which Mono version are you using? What is the minimal repro for this problem? For example does the failure occur only with a string that does not match any enum value?\nActually even the full stack trace when using the latest Beta 5 bits would help.\nBTW ConvertEnumFromString() must return object, TEnum?, or perhaps Enum; it must indicate a failed parse to the caller. The caller's cast to Enum might be acting strange on Mono.\n. Thanks for the follow-up @Tragetaschen  Nice to see a few of our fixes are of real bugs :smiley_cat: \n. :shipit: \n. @harshgMSFT 4f419ee closes this, correct?\n. /cc @harshgMSFT @rynowak \n. Rebased and updated\n- also changed PR description to match latest overall changes\n- note additional fixes e.g. restoration of test skipped due to non-existent \"#2646\" issue and src nits\n. 26795bd\n. /cc @harshgMSFT @rynowak \n. Closing since this PR can be based on dev since we aren't doing the ModelBindingTestHelper.UpdateOptionsToEnsureNothingFollows<TModelBinder>() thing. Will open a new PR in a bit...\n. @jrock2004 the syntax is <a asp-controller=\"Shipping\">Help</a> and you need @addTagHelper \"*, Microsoft.AspNet.Mvc.TagHelpers\" in the file as well or in your _GlobalImport.cshtml file.\n. Yes, that will work too.\n. Remove the semicolon at the end of the addTagHelper directive.\n. Recommend using the IAssemblyLoadContext in DI. Best to add a parameter of this type to your tag helper's constructor.\nPlease let us know if this does not work a bit better. Would also appreciate additional details on the failure if problems continue.\n. :shipit: after correcting some more name typos.\n. /cc @harshgMSFT @rynowak \nSimilar to prior PR but with a bit of cleanup and checking only visible behaviours in byte[] integration tests.\n. e31eab0\n. /cc @rynowak @NTaylorMullen \n. ffd1dc1\n. :shipit: \n. @lovemory the examples you provided both pass attributes through to the generated HTML. The \"MVC 5\" example works the same way in MVC 6.\n- Html.BeginForm(..., new { enctype = \"multipart/form-data\" }) adds encType=\"multipart/form-data\" to the <form> tag.\n- All of the non-asp-... attributes in the tag helper example will appear in the <form> tag. This doesn't work in MVC 5 of course.\nWhat parameter support is missing?\n. Thanks @johnciliberti for the additional information on #2369 and the inspiration to update the title of that issue. This one is a duplicate of that earlier issue so I'm closing it.\n. ",
    "rynowak": "I don't love this pattern because it feels like something you graduate from pretty quickly when you start writing complex functions. (I have similar thoughts about returning string).\nThere's fundamentally 3 parts of a response (status, body, headers) and the action result pattern will support setting all three. This guy (and returning a string) are limited by nature, so as soon as you need to do something complex (return a custom error message on a 400) then you have have to rejigger all of your code to do action results directly.\nI have a concern that the number of concepts required for using action result is a bit too high, but this doesn't address that because any non-trivial controller will still require action results.\n. Suggestion the first: quote the resource names, and add an extension method on string like this.\nString.Format(\"MvcResources.Some_Error\".Localized());\nThen when we have resx support we can kill the extension method and be forced to restore all of the resources.\n. :shipit: \n. :shipit:\n. :shipit: \n. :shipit: \nThe only thing here that I'm not in love with is that caching. It seem likely that we'll end up doing it a different way in the future, but that can wait.\n. All the TODOs that aren't associated with a current, active bug have been addressed or removed.\n. 7c961e3ce894746bc703b1f00cf12e9aedb6c745\n. Feel free to edit the top-level comment for visibility on what work this tracks. You can make pranav say all kinds of things!\n. @yishaigalatzer We discussed exactly this last night and you were in support of it. \n. @javiercn did you mean to comment elsewhere?\n. There's so many files here... what's the most relevant stuff to review vs what is old and was just ported?\n. :shipit: \n. \n. :shipit: \n. This is extremely long (mostly because of porting old code I think). Do you want to give some pointers to the new code/apis so we can focus feedback?\n. :shipit: \n. I rebased this on top of #64 to simplify things.\nIRenderUrl is passed through the ViewContext, which keeps modelbinding from depending on routing.\n. Any more comments or feedback?\n. I've fixed all the major and minor feedback here and pushed, add more comments if you have more feedback and I'll address them.\n. @halter73 @davidfowl  this is gone from our codes\n. pushing to unblock CI\n. Merged\n. Yeah, I didn't end up pushing another iteration of this to the PR branch, but the comments were addressed and pushed to dev.\n. @ all of you\nYeah, the original comment here is a bit stale. Moving RequestContext to routing feels right. \n. We can merge them.\nI also want to add back RouteData like we discussed earlier - then all the plumbing for data tokens is present.\npublic class RouteData\n{\n    public IDictionary<string, object> DataTokens {}\n    public List<IRouter> Routers { }\n    public IDictionary<string, object> Values {}\n}\npublic class RouteContext\n{\n    public HttpContext HttpContext { }\n    public bool IsHandled { }\n    public RouteData RouteData { }\n}\n. can be. We use it like one. I don't :heart: the stack type because it has a count but no index. still probably better to use anyway\n. @davidfowl I remember why I don't like stack for this - the primary usage is to get the 'entry-point' router, which we need for link generation.\nvar first = routers[0];\nYou can of course do .Last() as well, which is silly.\n. @davidfowl I remember why I don't like stack for this - the primary usage is to get the 'entry-point' router, which we need for link generation.\nvar first = routers[0];\nYou can of course do .Last()  if it's a stack as well, which is silly.\n. yeah seemed wierd to me too. Will proceed with this after the DI issue is resolved.\n. I'll try this on Helios and push the fix if it's good\n. Meged \n. This has been fixed, it now returns a 404 running in helios.\n. Yeah, basically we throw if you have an an attribute on something we don't validate - currently that check skips statics. \nIMO this feature seems to be of marginal value and is potentially harmful if you're using shared model code.\n. Fixed\n. :shipit: \n. This should be fixed now, this was done during the big filter update.\n. Will port this to the helios sample and :sheep: it\n. Merged\n. Opened aspnet/DependencyInjection#40 - we can't currently make this part of GetServices unless we tie that to autofac.\n. :shipit: after changing that resource name :sunglasses: \n. Looks :ship:-able from where I'm sitting, you probably should get @yishaigalatzer to signoff as well since most comments were his.\n. :shipit: \n. sail it?\n. The whole display vs displayname thing is a mess, it will really simplify this code if it's not coming back  :smile_cat: Just ask Doug!\n. :shipit: \n. :shipit: \nDiscussed at standup, no one on the team has any pending work relying on this sample\n. :shipit: \n. :shipit:\n. :shipit: \n. :shipit:  x2\n. My understanding from an earlier discussion is that IValidatableObject isn't present in CoreCLR right now.\n. We have another big issue here that we didn't discuss today. The view engine itself is async (see IViewEngine.FindView, also IView.RenderAsync).\nIf we need to support synchronous Invoke then we need Task.Wait(), synchronous view engines, or synchronous components can't use views. If synchronous components can't use views, then it seems hardly worth it. \nWhat's the POR for partials? If we have a plan for sync/async there, then let's steal it :smile:.\n. Sample:\nCSharp\npublic class TagCloud : ViewComponent\n{\n    public async Task<IViewComponentResult> Invoke(int numberOfTags)\n    {\n          var tags = await db.Tags.Take(numberOfTags);\n          return Result.View(new TagsViewModel() { Tags = tags });\n    }\n}\n. Will push the apis along with the implementation. Out for PR shortly.\n. :shipit: \n. :shipit: \n. @yishaigalatzer signed off in person\n. Metacomment @davidfowl \nIs the need to update these (with no code change) just a point in time issue? It seems like the build system should be able to do the right thing here without us touching these project files all the time.\n. :shipit: \n. any more feedback?\n. :ship: \n. Wrong base branch. Ignore!\n. @dougbu See PR #108 or look at individual commits. \n. @dougbu \n\n\"how would this user add a TagCloud property to their view page?\"\n\nAnswered elsewhere, but this isn't a scenario we defined. There's another thing being done for injecting ad-hoc stuff into a view.\n\ncode / concept duplication between controllers and view components e.g. could some of this be shared and use a core ActionOrViewContext?\n\nThere's a few places where I logged issues that I discovered, most of the duplication is in part of the code that are still prototypes. I don't want to spin wheels polishing that code, when what it needs is to have scenarios defined and real support implemented. If you think I missed anything, let's log issues and get them considered for planning.\nI don't like the idea of more homogenization of context classes. Components are like partials views on 'roids which is why they only have access to things that views do. Don't think of them as controllers.  (Also ViewContext will have all the data that action context has in the near future).\n\na nagging doubt about scenarios for replacing DefaultViewComponentInvokerFactory. that seems to be about providing more context but ViewContext already contains at least a couple of dictionaries where users can stick anything they like e.g. viewContext.ViewData and viewContext.HttpContext.Items.\n\nI don't understand this feedback. You would replace the invoker factory if you wanted to define what it means to be a component in a totally different way. It has nothing to do with passing extra data to component.\n. Rebased and merged\n. Looks like my PR doesn't want to update anymore, here's the commit: https://github.com/aspnet/WebFx/commit/5637c70deccefcdc2205f34d8ddd08499bd85381\n. @halter73 signed off in person\nSquashed and pushed\n. any more feedback on this?\n. Updated comment, I think we're good to go here.\n. I'm with @davidfowl, why not move these contracts (all of them) into a standalone assembly, and then when the tooling is ready, we just nuke that project.\n. :shipit: \nThanks for cleaning it up\n. :shipit: \n. This is a routing issue, moving it there aspnet/routing#34\n. :shipit: \n. @pranavkm signed off in person\n. Merged\n. Addressed comments and merged\n. @pranavkm I would agree with you if there weren't 2 copies of this logic. Better to commonize it so these things can't diverge, then replacing it wholesale in the future will be trivial.\n. I think Yishai had some comments in your old pr about the implementation of GetFullHtmlFieldName... other than that :shipit: \n. :shipit: \n. Still repros after ffb73a1ed8a3fe6da38303127c277e33952efedb?\n. :shipit: \n. :shipit: \n. Other than minor stuff  :shipit: \n. After some discussion with @Eilon, I'll be resending a different twist on this change. There's a scenario that we care about that's not working with these changes, but will work with another slightly different way of doing the same thing. \n. Just like @dougbu 's change: one part to dump old code, one part to update it.\n. :shipit: \n. :shipit: \n. other than 'foo' :shipit: \n. @Eilon \nI'm confident that we're not changing things too much. The reason why I'm so confident is that we never add or edit values in the data that you supply as part of this process, we only ever 'null' ambient values - which you didn't supply.\nSo if you specify { controller = \"Home\", action = \"Index\" } one of three things happens:\n1) It generates a link to Home/Index \n2) It generates a link to Admin/Home/Index (if you were already in the Admin area)\n3) it doesn't generate a link\nWe never edit data - It can never go to a controller other than Home or an action other than Index.\nWe never add data - It can never spontaneously go to area Admin (unless you're in area Admin) or go to area Blog.\nThe only thing this process can do is evict ambient values (via an explicit null) - with our standard conventions, the only thing this is can do is transport you out of an area. \n. Updated PR addressing @Eilon 's comment\n. @Praburaj can you try this again? This should be fixed now\n. @kichalla can you take a look at this? filters have been redone\n. Also, I will integrate it with other stuff in a follow up. For now I'm just getting this infrastructure in place.\n. :+1: \n. :shipit: (after making @Eilon happy)\n. Also, wherever you see using Microsoft.AspNet.Mvc.Core that's because of resources, don't shoot the messenger\n. :shipit: (once @Eilon is happy)\n. @dougbu Will fix namespace of FormContext and TemplateInfo\n. @pranavkm  That's the next part. Are you on the edge of your seat?!?!?\n. After playing with it a little, I just left IView/IViewEngine/ICanHasViewContext where they were (Microsoft.AspNet.Mvc.Rendering). This is the minimal change and we can refactor later as better understanding surfaces.\nIt felt wrong to create a new namespace, since many thing had to refer to both .View and .Rendering - good evidence that one of them is superfluous.\n. Looking into this\n. Fix is out for review - see #216\n. @Praburaj   Fix for this is in, please verify\n. :shipit: after doing the test cleanup and making @Eilon happy\n. What's the ETA on tests working in VS?\n. You'll pry the spacing of the coloured boxes from my cold dead hands!\n. :shipit: \n. :shipit: (once @Eilon is happy)\n. :shipit: \nThanks!\n. This seems like there's a cycle causing a layout to render a viewcomponent, which returns a view and  renders the layout again. It's possible that this is caused by a bug inside the framework rather than a bad copy-paste.\nHowever, since ViewComponents are more like partials, it probably shouldn't be possible to include a layout.\n. @Praburaj The bug is in your code :laughing:\nhttps://github.com/Praburaj/MusicStore/blob/b51f54e98a41d970cfbe03ee2842215c33b86541/src/MusicStore/Views/Shared/Components/CartSummary/Default.cshtml#L3\nWe should prevent this from happening though so let's keep the bug.\n. @davidfowl\n. @ToddGrun \n. :shipit: \n. :trollface: ViewComponents don't have filters so there would be no way to customize what happens when you return an object as a result.\n. Sorry, I'm responding to @davidfowl as it pertains to ViewComponents.\n\nYea, I think the IActionResultFactory (yes I know I added it in the initial prototype :smile:) is a shitty service that needs to be removed. We have result filters for this exact reason. This also lets you get back at the original result if nobody modified it.\nOne abstraction, one way to modify the result of an action, One Microsoft :trollface:\n\nThere are no filters in ViewComponents, so there's no one way to modify the result. Seems reasonable to just decide that ViewComponents are more limited, but I wanted to point it out.\n. :+1: for putting this code in not-webfx\n. @Praburaj fixed\n. Point for discussion - in Legacy MVC, Auth filters are a 2-pass process.\nIf any filter returns a result, then it short circuits the subsequent filters on the 'authorize' pass - but all filters still run on the 'challenge' pass. This is a break from the 'nested' design that we envisioned, but I could put it back if we think it's important. \n. Different levels of nesting + different short circuit conditions x2 (sync and async) = over 9000\nWe could wrap any sync filters in an adapter which would simplify the main body a bit, but introduce an extra menagerie of objects.\nThis is actually seriously simplified from the legacy code.\n. @eilon I heard you like to read code\n. @Praburaj The issue here is that we didn't have a matching overload.\nInstead of @Html.ActionLink(text, action, controller, route-values), you were getting @Html.ActionLink(text, action, route-values, html-attributes). \nThis should be fixed now.\n. :shipit: \n. @pranavkm  happy now?\n. :shipit: \n. Sounds like this is blocking #265 \nMy suggestion is that we revert the old behavior to what MVC does. There should only be 3-4 locations where we're calling this today. \nIMO it's fine to duplicate the 2 lines of code that format a string and throw. If it ends up being more than that then just make a static function to do it. I would suggest a custom exception type, but I know @Eilon would bust a cap.\n. :shipit: \nI'm not really bothered by this duplication. It would be possible to put the message formatting in a static method somewhere, but I'm not convinced that's better.\n. Seems like a good idea to care about testability for TagHelpers and ViewComponents. Custom HtmlHelper implementations, I'm less convinced.\n. Yes, they be red.\nIf you're deeply passionate about this PR, I'd suggest also looking at #270\n. Since your tooling is broken: tried opening this in my VS and listed a few compile errors. I can't fully build without the security stuff.\nProject files are ok\n. fix minor stuff then :shipit:\n. other than minor stuff :shipit: \n. AFAIK this is part of the design and not an artifact of my changes - and in fact this is unchanged from what was implemented a few weeks ago.\nThe change that you're suggesting definitely seems like a reasonable way to address this scenario and doesn't add much complexity to the existing design.\n@davidfowl @loudej @yishaigalatzer thoughts? Was there a plan for this scenario when IAllowAnonymous was designed?\n. @loudej - still hoping we can come up with a way to set headers or status code on a result without needing to subclass. This was a pain point of action results in webapi.\n. :shipit: \n. @harshgMSFT @danroth27 \nWhat's the action we need to take here. Is this important for beta?\n. @yishaigalatzer is there a consensus here? or something we want to design for RC.\n. We have competing desires in link generation:\nSometimes a user wants to rapidly prototype and generate links to actions that don\u2019t yet exist. If link generation throws or returns bad data this really messes up your flow.\nSometimes you want to know if link generation fails \u2013 you probably have a bug in your code. Silently failing to generate a link, or silently generating one that we can prove will 404 is bad.\nThese desires are opposites, for prototyping you want to get as correct of an answer as possible, and for general maintenance you want to be able to find out as quickly as possible that you have a problem.\nDecision: We want to make this behavior configurable in MvcOptions. Default setting will be to only generate links to valid actions. \nSuggestion: We might want to add some code to the template that shows how to tweak this, or enable it in the dev environment in the template.\nBut wait, there\u2019s more\nMVC 6 link generation is smarter than previous versions. Link generation has fallback just like URL matching. After we generate a URL, we validate its value to ensure that it would reach a valid action if round-tripped. This allows us to avoid some ordering problems with conventional routes. If we  just stop validating the route values to implement this feature than the behavior is inconsistent in subtle ways.\nDecision: We\u2019ll pass through the option described above into routing on the VirtualPathContext. If we fail to validate the route values for all routes, then we\u2019ll fall back to the first route with URL but invalid values. This is consistent with the current behavior for successful link generation and provides a best guess in the prototyping scenario. \n. https://github.com/aspnet/Routing/pull/150\n. Fixed by aspnet/Routing 9ee946073a128f778cfc68fa796b95dc9c8e429a\n. Updates here\n. Good parallel for this pattern is action results. If you're writing a custom AR, currently that's the best way to get services, since we want to 'new' action results.\nIMO seems fine, but we might want to do something if we come up with anything good.\n. :shipit: \n. > Expectation: A POST request with right data for binding User object should select the best matching action.\nIIRC is the bold part above is the opposite of what was decided. We shouldn't try to determine best when overloads both use form-data and form-data is provided. \nPut another way, we do not wish to give any consideration to what is in the form data, just whether or not form data is present.\nThe following should be ambiguous.\n```\npublic IActionResult Create(User user)\n{\n}\npublic IActionResult Create(Dog doc)\n{\n}\n``\n. Let's sync up tomorrow.\n. :shipit: when Eilon an Yishai are happy\n. There's anIFilterContainerinterface that I found when doing theIFilterFactory` work, and I'm not familiar with how it should be used. It appears to do nothing useful right now.\nThis needs to be understood, tested, and have a sample\n. The best guess that I've been able to figure out here is that IFilterContainer is a way for a filter constructed through IFilterFactory to be informed about metadata.\nEx:\n```\nclass OutputCacheAttribute : Attribute, IFilterFactory { }\nclass OutputCacheFilter : Attribute, IActionFilter, IFilterContainer { }\n[OutputCache(Duration = 5)]\npublic class PersonController : Controller { ... }\n```\nThis provides a property on OutputCacheFilter that will be initialized with a reference to the OutputCacheAttribute so it can retrieve metadata like Duration.\n. @davidfowl Had an earlier suggestion to auto-fix this problem for the user rather than throwing here.  #128 #Demoware\n. @dougbu this still isn't good enough. It doesn't tell the user what to do to fix the problem. \n\nDid you call UseServices()? Did you call AddMvc()? Did you call .UseMvc()? you should do that.\n. This apparently works in some form already but conflicts with the implementation of ServiceFilterAttribute. Any IFilter that's registered in the service provider is considered a global filter.\n. This should follow the same design as modelbindings/value-providers/et-al and be registered in options with descriptors. \n\nWe already have a pattern for this, so we should probably go ahead and do it.\n. 7ed2de297e4744ee261d8fecbfc0f79df8c7916e\n. Holding off on this change because it would END ALL LIFE ON THIS PLANET.\nJust kidding, it would however break a bunch of the trivial MVC-like scenarios, which work by accident right now. We're likely going to just remove overload selection from our vocabulary.\n. :shipit: \n. :shipit: \n. Make sure you try running our sample as well, just make sure it starts up with your changes\n. my 2c if it's worth putting on the simple one then it's worth providing more. See other methods on MVC's controller class for examples (Json, Content, etc).\nAlso, I thought we wanted this on the AuthorizationFilter base class? \n. :shipit: \n. :shipit: \n. Adding an implementation to the 'base' controller to follow.\n. Yes, will add IOrderedFilter didn't get to updating this yet because everything was on the floor\n. any other feedback on this change?\n. :shipit: \n. :shipit: \n. Likely scenario: It's just a bug\nThe ADP code was all written from scratch against a new reflection API that we're not used it.\n. @harshgMSFT says:\n\nReflectedActionDescriptorProvider uses controllerTypeInfo.DeclaredMethods which returns methods only on the type.\n. :shipit:\n. Should we use a long here? What if I have more than 2,147,483,647 scopes?\n\n:trollface: \n. 383c6305e132f17dce38982c50eb95a227810481\n. This was blocking [Produces(...)] so I went ahead and fixed it by making the constants consistent with legacy MVC.\n. We're doing this now as part of the redesign of when the controller factory runs. \n. e1069dbf65182e5f13ba6ee863711b61521a2b81\n. See #268 \nThe state of things currently doesn't really reflect a final decision at this point, there's still work to do on these various objects. \nModelBindingContext will be particularly nasty to test if it uses the constructor style.\n. Could do something crazy with assembly neutral interfaces, and move the attribute implementation to identity. \nMore likely we'd just want to make sure the configuration surface (properties and the like) are the same.\n. :shipit: \n. @javiercn please make the API surface of ViewComponent and Controller base classes similar. Also look at the result types for ViewComponent (Content, Json, View) and make them have the same structure/options/behavior as those for controllers.\nRaise a flag if you find cases where something shouldn't be similar.\n. are the namespaces staying the same? or happening as part of another change?\n:shipit: \n. :shipit:  once yishai is happy\n. :shipit: \n. :shipit: \n. Yeth. Copying the info to that one.\n. :shipit: \n. :shipit: \n. There aren't really any tests for this. Most of this code was written in the first week and it's all going to change after alpha.\n. This was implemented already.\n. [FromBody] and form-data don't work together and are not intended to. Arguments over naming aside, [FromBody] means deserialization with formatters\nI'll investigate your issues with binding multiple parameters, and if charset has any impact.\n. We took another look at this, and for the case that was being tested, the variable was getting optimised out by the compiler. This is working as intended.\n. @yishaigalatzer this isn't the same. #1550 is about the lifetime of a particular service. This bug was about the number of model binding contexts we new up in code (1-per-property) and the number of validation contexts we new up in code.\n. This is on the ActionContext now (just like legacy). This change was made a long time ago.\n. Closing this item to break down into sub-features\n. This tracks the URL matching part of attribute routing, which is complete\n. Yishai is working on this\n. This really seems like this fix shouldn't just be for the MVC repo... don't other repos use the 'common' feature?\n. :shipit: \n. :shipit: \nAre there others like this? OverloadController intentionally does not have default values\n. Also, in old mvc/webapi note that attributes were defined directly on ActionDescriptor / HttpActionDescriptor. Regardless of whether or not you were dealing with a subclass of AD, this was the primary way we discovered 'attribute-like' data about the action. \nIf we choose to put attributes on ReflectedActionDescriptor there's still a benefit of providing a way for non-reflected ADs to provide the same data.\n. Is this coming from old MVC or old WebAPI? both?\n. If we do something similar to the readme we did for Dev12/MVC 5 maybe it could live there. Built in command with a tooling hookup also sounds useful\n. This was just an oversight, these should be virtual.\n. :shipit: (when we're taking changes again)\n. @Eilon is the choice of protected internal here intended to avoid confusing these with action methods?\nSeems odd that we'd do internal just for our own ability to test these methods, but still make it difficult for users to directly test any overrides they might have created.\n. We'll already want tests for action discovery, so it's really not much effort spent there.\n. This is fixed\n. @yishaigalatzer  I asked him to open this bug as a follow up to #410 - we already have a pattern for this in action results\n. Example: https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.Core.Test/ControllerTests.cs#L38\nThe result types for action results have properties on them so we can verify that data was passed through appropriately.\n. @yishaigalatzer suggest closing this item. I did some work in this area not too long ago, and it seems fine now.\n. :shipit:  once yishai is happy\n. :shipit: when yishai is happy\n. Starting work on attribute routing this week. It's very likely that this will already be addressed by the design we've chosen.\nThat said...\nIt's weird that model binding sometimes supplies a null-value for complex types. Whether or not the parameter is null or default(T) doesn't tell you anything because you don't know if any of the properties were bound at all. You still need to check ModelState.IsValid to know if it's a valid model object.\nThe case when the model is null is very limited (no query string values, no route values) so why do that at all? Why don't we just always plug in default(T) for complex types?\n. There are some related bugs here, but the original case is resolved - there's no behavior difference between attribute routing and conventional routing.\n. :shipit: from me once others are happy\n. I think the point is that it will soon. Regardless of the use of middleware that sets the culture based on the thread, I think we still want to use CurrentCulture where appropriate\n. Reviewed these and no action needs to be taken, we have MVC5/WebAPI2 behavior already: \n- QueryString = InvariantCulture\n- RouteData = InvariantCulture\n- FormData = CurrentCulture\n. Yep. Just a logic bug. \nAll of these filter base classes need unit tests.\n. Decision here is to use MVC5's behavior. Only public-top-level classes will be considered as controllers by default. This is easy to customize by overriding DefaultActionDiscoveryConventions.IsController.\n. Fixed by bff94f169fda00fa7ce9cb8ad0e71830161f8cda\n. Are there tests for the result types themselves? Should do in a follow up if not.\n. Other than the minor test issue :shipit: from me\n. Also interesting to bring back the idea of an expression-based syntax. We discussed this but stopped short of committing to build it.\n@Component.Invoke<TagCloud>(cloud => cloud.ShowTags(count: 10))\n. Or once we have @inject support..\n```\n@inject ViewComponent Cloud\nCloud.Render(c => c.ShowTags(count: 10))\n``\n. Bumping this up because we had more discussion about it.\n. :shipit: you're a hero\n. :shipit: \n. @yishaigalatzer ping\n. The advantage of it would be the ability to just saynew ViewResult(MyModel)` for POCO scenarios. \nWe could keep both overloads but it's a little strange to have an optional service passed.\n. this is happening.\n. This is partially done. We'll do more here when this area gets a fresh coat of paint. That's being tracked elsewhere\n. @kichalla \nRaises a good but separate question - we don't handle the case where the filter referred to by [ServiceFilter(...)] or [TypeFilter(...)] is itself an IFilterFactory. It seems like filterception, but this would allow you to have a filter factory registered as a service.\nFilter factories are already invoked during the filter provider stage, so these attributes would just delegate if the type was IFilterFactory\n@yishaigalatzer thoughts?\n. :shipit: \n. You can construct the HtmlString yourself without calling encode.\n. @yishaigalatzer what do you think about having an HtmlViewComponentResult here - and removing the support for pre-encoded text from ViewViewComponentResult.\nI don't feel like the current support is broken but this might be clearer\n. This is also a case of trying to use a scoped service in a singleton, which we don't provide diagnostics for currently.\n. aspnet/DependencyInjection#88\n. So, correct me if I'm incorrect... this is for scenarios like:\n{area:exist}/{controller}/{action}/{id?}\nHowever in this route template, area has to have a value (since it's not optional). So what's this really about?\n. Don't see a test for link generation yet, did I miss it? I'd just suggest an integration test in the style of the other MVC link generation tests.\n. 02f656667f8231d1be373ef523f078beeefbb23f\n. Prototype is out for this. Needs some discussion and PR cleanup. 1 day remaining.\n. 8bfb6eb8d5a0fbb42c20a1e9fbd1d91b5c114357\n848\n. :shipit: \n. @yishaigalatzer Branch updated\n. ping\n. @yishaigalatzer \n. Merged \n. Doing a pass and cleaning this up things that should be true in general.\nProperties are get/set by default\n- Some require a not-null value (FileStreamResult)\n- Services needed by the result are get/set and default to null. They are resolved inside Execute\nException to this is HttpStatusCodeResult and derived classes. Since all this class does is set a status code, it's not get/set. Then you can't end up with an NotFoundResult(201) or other nonsense.\nAdding a StatusCode property to the more complex result types where it makes sense. (ViewResult, ContentResult, but not FileResult).\n. 692a07240c34ee12c317eddb7cc28d744818b02d\n. :shipit: \nDidn't see much reason to make the changes I was suggesting. If CreateActionResult ever became an extensibility point we'd want to do it.\n. :shipit: when yishai is happy\n. Keep in mind that this will only happen if you build your own action descriptors. We already filter out all of these kinds of things during discovery.\n. Do we need to do this at all?\nWhat's wrong with just having multiple sites if you need a different config?\nCan we pass arguments to startup and use that as a config source?\n. Oh NOES PR #666 - and it's a:full_moon: tonite!\n. :shipit: \n. product code overall looks find + comments - Let's discuss the ApplicationServices thing if you think it's right. Other than that :shipit: \n. The general idea is that using per-request services is the default choice. Scoped services can only be resolved from the per-request container, so using per-request gives us (and users) the ability to register things with different lifetimes without needing code changes.\n@halter73 in case he wants to add anything\n. There are cases where you need services, but don't have a request. In those cases you'd need to accept the limitations that affords you. \nFor MVC, request scoped services are required but in the wild and wonderful owin world it might not make sense for everyone's scenario.\n. :shipit: code looks fine\n. The attribute is marked as applying to classes and methods, but currently we only look for it on classes.\nAn attribute present on an action with the same route data key should override the value on the controller.\n. @anfomin I'm curious... what are you trying to use it for? We haven't talked/blogged about this feature much so I'm really interested to know what you're trying to use it for. This will help us prioritize/trigae\n. Pretty cool, this is basically what the feature is for - we use it implement areas but it fits what you're doing as well. @yishaigalatzer thoughts on priority for this? it's a small item\nWhat you're trying will certainly work (assuming we complete this item), but there are also a few simple things you try as workarounds.\n- Use Order - set Order = 1 on your Index() action then it will have lower priority than the other overload\n- Use named routes\n- Rename one of your actions - If you're using attribute routing, there's nothing particularly meaningful about the action names, it's just there for link generation.\n. ae9fc793ece34b831bb2e2ae7fc073eaa8f66d7f\n. @Eilon  sure\n. @yishaigalatzer @Eilon PR updated\n. We tried a few ideas and didn't come up with anything that seemed appropriate. It needs to be looked at again later.\n. 90cef3b9ca86f56bd49700f632474e7db068816a\n. :shipit: \n. @yishaigalatzer not sure common init code you're referring to. This service needs to be injected in between the call to services.AddMvc(...) and app.UseMvc(...) to have any effect.\n. Branch updated\n. @yishaigalatzer any feedback? this is what we discussed yesterday\n. @harshgMSFT @javiercn branch updated and merged to dev. If you have more feedback I'll follow up later.\n. Hi Pawel,\nThis is something that will be possible when we finish attribute routing. You may need to write some code to define your conventions, but it should be simple. Sit tight, we'll have something to show here before too long.\n. IUrlHelper and IViewComponentHelper\n. :shipit: bro\n. We addressed this in RouteValueDictionary by reading the value of the most-derived property - in this case the one defined with new.\nConsider doing the same for model binding; ignore the hidden property and only set the one on the most derived class. Rationale is that the user explicitly put the model type in their signature, they would have to do some finagling to even see the value on the base type's property.\n```\nclass Base\n{\n    public int HelloPranav { get; set;\n}\nclass Derived : Base\n{\n    public new int HelloPranav { get; set;\n}\n```\n. Prototype for this + glimpse integration exists, so calling this done.\n. @pranavkm  is this done?\n. @javiercn come at me bro\n. @Eilon sure. I think most of us are still following the initial guidance not to do that. If you think it's time to bucket things, then they shall be bucketed. Excelsior!\n. Branch updated.\nAddressed namespaces, other naming feedback and doc comments.\n. Ping\n. :shipit:  once yishai is happy\n. 745239f09f559ae6d6d5b3d8fbecad29f625bf31\n. Updated title and description\n. Still good question about [Route(\"~/...\")] - my 2c is to be permissive here. Seems silly to throw when we kinda know what you mean already.\nPlus there's a reasonable extensibility scenario here. I'm a user, and I implement a global prefix for routes as a convention (using IReflectedApplicationModelConvention). I can use ~/ to escape that prefix (just like we support with action-level routes).\n. Need to update my PR after receiving feedback. 1 day or less remaining\n. Prototype is out for this. Needs some discussion and PR cleanup. 1 day remaining.\n. 9faca78a84347328355273a0412d2826730d6cb5\n. @sornaks how much of this is new code and how much is copy-paste?\n. :shipit: from me\n. They are also available via model binding\n. Blocked on aspnet/HttpAbstractions#197\n. :shipit: \n. @pranavkm yes, but there's no real value to doing it. \nIn a template like {area:required}/{controller}/{action} - the area is already required. \nIn a template like {controller}/{action?:required} why did you bother making action optional?\n. @pranavkm new { area = new RequiredConstraint() } specifies a required constraint on the {area} parameter. When the constraint is invoked, the route will pass it a key, which is the identifier that was used to add the constraint. In general it maps to a route parameter, though that's not a hard requirement.\n\nThat said, what does the presence of a token indicate? Isn't saying \"Admin/{controller}/{action}\" indicate you require \"Admin\"?\n\nThe intent of this change is to make the route value area = \"Admin\" required to generate a link using this route. Without the constraint, this route can generate a link when you didn't intend to go to the area - it's too greedy.\nThis also works with ambient values. If you're in the 'Admin' area on the current request, you don't need to specify Admin again.\n. @yishaigalatzer branch updated\n. Per response to the original issue, we recently added the following:\nservices.AddMvc().ConfigureMvc(o => { ... });\n. The original comment was about a test for link generation with a virtual path, but there's probably a good deal more stuff to test re: virtual paths.\n. :shipit: \n. But this is part of the signature in IModelBindingContext... if I want to access the HttpContext.Items inside a model binder this seems like the way you'd do it.\n. :shipit: \n. d7094fd32dd96eafcfce7eb9824b24a1329275ca\n. @ghstahl We'd love to hear from you about specific things that can be improved or made more reusable (including RazorViewEngine). Open bugs telling us what you're trying to accomplish and why it's hard.\n. Glimpse guys will do the work on their side to accept this PR - no additional work needed from us.\n. @kichalla yes, this is consistent with MVC and not with Web API.\n. bff94f1\n. :shipit: \n. :shipit: \n. @javiercn I was expecting to see this data show up inside the ReflectedModel in this PR. What's your plan for doing that? is it next?\n. :shipit: \n. This is needed in two separate places in attribute routing, and by route debugger. Could be quick for @SaggySanctum to knock out.\n. 2f9501458f28d9562438795fd9b3955f840d3571\n. @Eilon  branch updated\n. :shipit: \n. Still looks good, just wanted to see what it looked like updated. Thanks\n. Pattern looks good overall. :shipit: from me if we can improve naming.\n. We didn't do the original bug this because there's no support for statusdescription in HttpContext. \nIt sounds like this issue is more about not-found-with-context, which wasn't on our radar for the previous cleanup.\n. See https://github.com/aspnet/Mvc/commit/74d372ebe754d3f60875b780e922738e8bd3c9ec for the attribute routing link generation part of this. Pretty similar\n. per more discussion - doing anything with verbs isn't part of this change. There's benefits for maintenance/complexity to treat verbs as a separate stage.\n. 8bfb6eb8d5a0fbb42c20a1e9fbd1d91b5c114357\n. @balachir this was an intentional change, and it's now consistent with legacy MVC behavior. see #610 \n.  b4d1eec87a0a1bc7f641301b8074c303962c2f20\n. 2-3 days remaining here depending on feedback. Need to socialize design\n. @SaggySanctum Take a look at #820 - this bug tracks adding a printable name to action descriptor.\n@yishaigalatzer should he work on that next?\n. 3cd6d3e060c96f11ab0db43492a14da82a2988f9\n. 3cd6d3e060c96f11ab0db43492a14da82a2988f9\n. 09928a28182e2438686772569cff8c2add1ea5b6\n. @yishaigalatzer we need something like this a few places in the code, what do you think of this?\n. :shipit: \n. Needs a functional test\n. :shipit: \n. :shipit: from me\n. @javiercn if you want to PR just a single commit, the best way to do that is to push a server branch with the 'base' of what you need, and then when you create the PR set the base branch to that server branch instead of to dev.\n. It looks like your 'first two' commits here have diverged from their respective PRs. I didn't realize you'd be updating those as well. Can you please update #827/#828 so I can comment there?\n. Consider just making a static class with readonly instances on it and supporting instance of MediaTypeHeader in the ProducesAttribute.\nThen you can write code like this:\n[HttpGet(\"{id}\")]\n[Produces(MediaTypes.ApplicationJson, MediaTypes.ApplicationXml, Type = typeof(Product))]\npublic Product GetProduct(int id)\n{\n}\nAs a bonus our comparison for media types will generally just be a fast-path reference equality test.\n. :shipit: after checking on [AttributeUsage]\n. /cc @yishaigalatzer \n. @yishaigalatzer updated PR.\nRenamed IActionInvoker.InvokeActionAsync -> IActionInvoker.InvokeAsync. To the best of my memory this was the only change we decided on. Let me know if I forgot something.\n. @yishaigalatzer  ping\n. :shipit: \n. What's the behavior on 5.2?\n. @dougbu yes, the htmlhelper should be calling \n_urlHelper.Action(actionName, controllerName, routeValues, protocol, hostname, fragment);\n. :shipit: \n. :shipit: \n. :shipit: once dev is open again\n. :shipit:\n. Probably legacy from when model binding didn't reference MVC.\n. :shipit:  from me\n. Are functional tests already in place here?\n. :shipit: from me\n. :shipit: once universe is in\n. :shipit: \n. :shipit: once internal fields are gone\n. 78a4e7835856fc062c56d43446bf5fea7029432e\n. Resolved by: 5405e3b761ad8c55f8fbd1ef311454342568860\n. :shipit: \n. 7012b3fc2ba63af24dd981c54b076bca7cf3c5d9\n. :shipit: \n. Consider #676 together with this.\n. ae9fc793ece34b831bb2e2ae7fc073eaa8f66d7f\n. The action selector changes are in #848. These two need to go together\n. @yishaigalatzer - yes #848 implements the actual functionality. These two go in together.\n. b72b44c20c145d07475e06c8ea86e25db2d0a657\n. There's also a test to enable:\nCachedDataAnnotationsModelMetadataProviderTest.HiddenInputWorksOnPropertyType\n. :shipit: \n. this was done alpha 4 like it says?\n. :shipit: \n. :shipit: from me, but my feedback is of low value. This seems consistent with what other HTML helper code does, but I don't know much about this area of the codebase.\n. Does the 415 occur before this gets into a controller?\nI'd imagine that....\n\nthe recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource.\n\nis best left as an application defined process (probably a filter).\n. This probably needs to flow into a discussion about the design of the classes representing the header when we build the final version of that. The WebAPI design doesn't have much flexibility in that regard.\n. Per discussion in the review of strongly-typed headers - they are opt-in, so by default everything is available as unparsed. I propose we close this issue as there's nothing to do here.\n. @yishaigalatzer  ping\n. @yishaigalatzer updated\n. @sornaks I'm not really following what the purpose of this change is... can you say a little about the problem you're fixing?\n. @sornaks usually more organization is better than less - think about just grouping them by the formatter that they test.\n. @sornaks this sounds like it's time to introduce an abstract protected CanReadType(...). We'll need this for api explorer.\nThrowing here is absolutely wrong, because you need to allow other formatters a chance to write the response.\nLegacy code has this code to handle the scenario, we'll want to do something similar.\n```\n        /// \n        /// Determines whether this  can read objects\n        /// of the specified .\n        /// \n        /// The type of object that will be read.\n        /// true if objects of this  can be read, otherwise false.\n        public override bool CanReadType(Type type)\n        {\n            if (type == null)\n            {\n                throw Error.ArgumentNull(\"type\");\n            }\n        // If there is a registered non-null serializer, we can support this type.\n        // Otherwise attempt to create the default serializer.\n        object serializer = GetCachedSerializer(type, throwOnError: false);\n\n        // Null means we tested it before and know it is not supported\n        return serializer != null;\n    }\n\n```\n. :shipit: \n. 90cef3b9ca86f56bd49700f632474e7db068816a\n. :watch: \n. @davidfowl @Eilon \n\nExcept it's not IAppBuilder.UseServices\n\nYeah that's what I mean about getting more feedback. It's an extension method, but I dunno if using the full name of the extension methods makes it more or less clear what to do.\n. :watch: \n. :shipit: from me\n. :watch: \n. :shipit: \n. 83187945d1e72b8d632aeb14e4127a3b3af2381f\n. /cc @javiercn @harshgMSFT \n. comment from before not addressed:\n\nWhat's the breakdown - ie: what criteria motivates what's being tested and what's not? Is this intended to be a hello-world sort of thing or more in depth?\n. @sornaks ok, that seems good. Just wanted to understand the purpose.\n. :shipit: \n. :watch: \n. :watch: \n. :shipit: \n. This is a dupe of #1182\n. :watch: \n. :shipit: from me, get @yishaigalatzer to sign off as well\n. @pranavkm I thought we decided that this would be a functional test? \n. @yishaigalatzer  @harshgMSFT updated\n. /cc @domaindrivendev\n\nThis is just the basics in place while we work out more details as you can see, it's pretty similar to the old stuff. Would love to talk to you about ideas for grouping/other-asks.\n. Unless I get more feedback today I'm going to close this and move to a regular PR with tests and such.\n. @kichalla  you can also use a result filter to buffer\n. What seems central to this issue here is that we can't detect when an action intentionally did something to the raw response (like set the status code).\nSo basically any low-level action that writes directly to the response will potentially get turned into a 204 even though you wrote content. This is a bit at-odds with the design approach of NoContentFormatter\n. This is a great thing to consider for a compat layer discussion.\nThe problem with this is that if you do raw http through the .Response and return Task it wil mess with you. This change broke symbro, which was using the IHttpSendFile interface directly.\n. :watch: \n. :shipit:  x infinity\n. This is because you need to add [KnownType(typeof(DerivedApple))] to the base type. Try that and see if it still fails.\nhttp://stackoverflow.com/questions/8555089/datacontract-and-inheritance\n. Fixed by: 1916560546336a25fda17932b2d61e58ac6fc49d\n. :shipit: \n. @kichalla 4 thoughts\n- It's a bug that both xml formatters are registered by default. In the future only DCS will be included in the default configuration.\n- There's nothing special about the instance that we create:\noptions.OutputFormatters.Clear();\noptions.OutputFormatters.Add(new XmlSerializerOutputFormatter());\nworks just fine.\n- You're missing the best linq function OfType<T>()\noptions.Formatters.OfType<XmlSerializerOutputFormatter>().Single().SupportedMediaTypes.Add(...)\n- This is a temporary design for MediaTypeHeaderValue\nWe'll take a look at this in more detail in the future. Currently design doesn't really meet all of our needs so it will likely change.\n. test adds/refactoring looks good\n. Any functional tests that should be added?\n. @javiercn - the updated code looks good. \nThe difference is subtle and about the level of abstraction. A method call is necessarily at a higher-level of abstraction than the code inside the body. \n1. When reading a method call site I want to know what it means based on the context I have. \"The context I have\" in the scope of this PR probably means what is the effect on the AD. Often times good method naming takes care of this for you and there's no benefit to having a comment.\n2. When reading the body of a method, I want to know specifically why these lines of code are accomplishing the goal. Often times the purpose can be inferred from reading the code because the naming is good and the API is simple - and often times it can't because the design is complex. \nTLDR follow your heart. We all have different thresholds for when we think 1) or 2) above needs a comment, and code reviews help with that. \n. :shipit: \n. :watch: for now, will look at tests when we get a bit further\n. Functional test?\n. 623b733eaa16f7c6645040fd38a905511ccca370\n. /cc @pranavkm I know there's more good stuff for you to comment on here than just missing c#6 features\n. ping\n@pranavkm any more feedback?\n. @yishaigalatzer  updated\n. Also consider extensibility for the set of docs we return. Some users wanted to put additional info into the system that we don't know about. We could have a mechanism to pass this data through so another component (swashbuckle for one) could read it.\nExample: http://stackoverflow.com/questions/14997896/extending-apiexplorer-using-xml-documentation\n. e6b75de0af201538892914b8fe7d2b84f9a9fffc\n. we actually already have the cache this would be a straightforward code change to remove some linq from a hot path\n. :shipit: after addressing test nits\n. :shipit: \n. I'm still writing tests/sample for this, but please start reviewing. At this point defailed feedback is valuable.\n. Unit tests added.\nWill do functional tests in a separate PR because this is large\n. Updated after merging changes from @harshgMSFT \n. @harshgMSFT @yishaigalatzer updated\n. More update\n. updated\n. @sornaks per some conversation with @yishaigalatzer I'm going to merge this into the API explorer changes that I've got brewing. You can close out the PR.\n. Fix comments and then :shipit: !\n. :shipit: if @Tratcher  is happy\n. aspnet/Routing#31 should come along with this\n. The issue here is that we need functional/unit tests to verify that we're doing the right thing wrt Punycode.\n. Good summary. Let's walk though some scenarios for 2)... I'm worried that we could run into issues unless we do something smart.\n. updated\n. Considering that this changes a functional test to use dcs instead of xmls - what functional tests do we have in place for xml serializer? should we add a site where xml serializer is used instead of dcs?\n. :watch: \n. :shipit: \n. @PinpointTownes thanks for your help investigating this.\nThere's another double.TryParse at StringWithQualityHeaderValue@30 that should also be corrected.\n. /cc @harshgMSFT @sornaks \n. @yishaigalatzer updated\n. @yishaigalatzer updated PR\n. :watch: \nDiscussed with Sorna in person, he's also going to add tests for #1081 to this PR\n. cleanup asserts and then :shipit: \n. Both of our XML formatters cache the serializers now.\n. @pranavkm @yishaigalatzer @NTaylorMullen \nWorth discussion if this is worth doing or should be taken further. In current-razor there's virtual methods that are called by WriteAttributeTo so it's not just as simple as adding a private method, we want to make sure the user has an option.\nIdeally we'd really want to define WriteFoo - where Foo is any number of primitive types. For something at this low level in the code the boxing is an actual significant cost.\n. @NTaylorMullen this was about a 2% improvement on our benchmark for writing attributes. It should do more for general-case razor that does a lot of writing of literal text.\nSeems worth doing for just porting over what we did in wsr.\n. updated\n. @NTaylorMullen any more feedback?\n. Along with:\n\nAction Descriptor parameter metadata needs to be designed. \n\nshould we surface a way to customize this through reflected model for properties/parameters?\n. :watch: \n. :watch: \n. :watch: \n. :shipit: \n. The issue that we found here is that in some cases we can construct a serializer base on the information we have, but we still can't serialize the type. In the example above, your datacontracts aren't written correctly so it will fail at runtime.\nWe could take the extra effort here to see if anything was written to the stream and try to return a 500. However, as it's a programming error, it's probably best to let this bubble up to an error handling middleware. \nI asked @sornaks to open a bug for consideration.\n. If we decide to leave this behavior as-is we should add unit tests for it.\n. :shipit: \nPer discussion with @sornaks there are some cases that will throw at runtime, we want to consider #1157 and decide how to tests those based on that decision.\n. :watch: \n. :shipit:\n. This is definitely not an MVC bug - open it on tooling\n. @sornaks @NTaylorMullen - this is marked done - what still needs to happen here?\n. The approach seems reasonable, would be nice to see the effect on perf before moving this any further. We have a perf test in place here.\nSome thoughts:\n- Why just 0-9? Sure it was easy to code that way but is it best?\n- We had hoped early on to keep this somewhat readable by compressing the route-template string. This goes the other direction, worth considering though.\n. It should definitely be possible to add some tests for this.\n. The purpose of the test would just be to make sure it's doing what you expect and keeps doing what you expect.\n. :shipit: from me\n. We benchmarked this locally and the results were too close to call. Let's follow up next week with a run in the perf lab.\n. updated\n. @javiercn do you have any other feedback?\n. :shipit: from me. Get @harshgMSFT to look at the anti-forgery stuff\n. @sornaks How much of this is a straightforward port from webapi?\n. /cc @pranavkm \n. /cc @loudej \n. /cc @loudej \n. /cc @harshgMSFT @pranavkm \nRemoving the design tag from this one as it has docs and tests now.\nFunctional tests are being covered outside of this workitem see #1211 and also I'm working on porting the webapi action selection tests for the shim. That will provide excellent coverage of this feature\n. updated again - I think I addressed the comments. At least Javier's changes aren't showing up now\n. Functional tests are covered by what you're doing + the webapi tests that will be ported. Do you think any scenarios are missing?\n. Would be really nice to see a functional test for this, since it was the end-to-end behavior that was broken. \n:watch: \n. Would be really nice to see a functional test for this, since it was the end-to-end behavior that was broken. \n:watch: \n. looking pretty good, a few minor formatting things :watch: \n. :shipit:  from me. Make @dougbu  happy too\n. d8995a77671eab20de0499a483edbe1d661045da\n. Updated and added a few functional tests.\nThe next item I'm doing will be adding more stuff, and will include more functional tests.\n. Suggested change here is to change the way grouping of attributes is done for routing\nRules:\n1). Treat an IRouteTemplateProvider without a route template as a non-IRouteTemplateProvider\n2). When an IRouteTemplateProvider is not an IHttpMethodProvider, group IHttpMethodProvider attributes that aren't IRouteTemplateProvider with it.\nExamples: - Note that scenario 1 below is the only change from current  code\n1). Back compat\n[HttpGet]\n[Route(\"api/Products\")]\npublic void DoThing() { }\nRoute - Verb\n\"api/Products\" - GET\nRule 1 says that [HttpGet] is not a route template provider\nRule 2 says to put it together with [Route(...)]\n2). More routes/verbs\n[HttpGet]\n[HttpPost]\n[Route(\"api/Products\")]\n[Route(\"api/v2/Products\")]\npublic void DoThing() { }\nRoute - Verb\n\"api/Products\" - GET, POST\n\"api/v2/Products\" - GET, POST\nRule 1 says that [HttpGet]/[HttpPost] is not a route template provider\nRule 2 says to put them together with [Route(...)]\n3). Separate urls/verbs\n[Route(\"api/Products\"]\n[HttpPost(\"api/Products/Buy\")]\n[HttpPut(\"api/Products/Buy\")]\npublic void DoThing() { }\nRoute - Verb\n\"api/Products\" - *\n\"api/Products/Buy\" - POST\n\"api/Products/Buy\" - PUT\nRule 1 says that [HttpPut(...)]/[HttpPost(...)] are route template providers\nRule 2 says not to combine them with [Route(...)]\n4). Something that's still broken\n[HttpPost]\n[HttpPut(\"api/Products/Buy\")]\npublic void DoThing() { }\nRoute - Verb\n(no route) - POST - THIS WILL THROW\n\"api/Products/Buy\" - PUT\nRule 1 says that [HttpPost] is not a route template provider\nRule 2 says not to combine it with [HttpPut(...)]\n. @Encosia glad we could help!\nYes, your example is valid. You'll end up with two actions\nIndex(int ProductId) - GET - Products/{ProductId:int}\nIndex(int ProductId, [FromBody]Product Product) - POST - Products/{ProductId:int}\nAction selection will disambiguate based on the HTTP verb of the request.\nThe following are also valid if you want multiple verbs in the same action.\n```\n[HttpGet(...)]\n[HttpPost(...)]\npublic void DoStuff() { }\n[HttpGet]\n[HttpPost]\n[Route(...)]\npublic void DoStuff() { }\n[AcceptVerbs(\"GET\", \"POST\")]\n[Route(...)]\npublic void DoStuff() { }\n```\nDoes that answer your question?\n. ed8ba5a\n. What info do you want to be present in the error that is missing?\n. :shipit: \n. @javiercn is there a reason this is still open?\n. The problem is with value types as the model type. VDD tries to copy the VDD of the controller, and then encounters an error during construction because it tries to assign the model of the controller (which is null).\nWe have another issue that also reported this.\n. Add a unit test for UrlHelper and then :shipit: \n. :shipit: \n. :watch: -- update when you figure out what you want to do with the constructors. Other than that looks good\n. :shipit: \n. :watch: \n. Rename the functional test class name and then :shipit:\n. See: ProcessAsync_CallsGeneratorWithExpectedValues_ItemsAndMultiple for a test that needs to be updated when this is fixed.\n. Triage: This is a follow-on to the model-metadata change, and also is churn to the public API for validators. Would like to do for RC.\n. ## History: We used to have two validation systems.\n1). One that ran during model binding of things like query-string/form-data/route-values. This is the one you're describing above, which validates a property-at-a-time\n2). One that runs on the result of a formatter, which reads json or xml from the request body. \nWe're keeping number 2 and getting rid of number 1. This means that validation will run after-the-fact on the fully-constructed model. There is also the capability for model-binding/formatters to add validation errors for missing values, which we will keep because once model-binding/de-serialization is over we can't tell the difference between an explicit-null and a value that wasn't provided.\nExtensibility: We have two kinds of validation extensibility\n1). One that handles an individual property\n2). One that takes full-control and is responsible for all validation for a model-object-graph\nWe're planning on supporting both kinds of validation extensibility. Current names are placeholders (IObjectModelValidator and IModelValidator I believe).\nIObjectModelValidator is a replaceable service. If you swap it out, you're responsible for all validation other than what comes from the model-binders/formatters. If it's interesting to you we could factor this out into an  abstract-visitor + implementation.\nIModelValidator is a little tricky. You will be able to register multiple providers in MvcOptions, but for the kinds of extensibility most users do that won't be necessary. In general the approach is that model-metadata will carry a set of validator-metadata -- this metadata might just be attributes that's used by a provider, or it might be a validator itself. In the case of the latter, the default validator provider will just do a conditional cast. This puts the burden of caching on the model-metadata system and not on extensibility code.\nOther: Random thoughts\nI don't like that client validation rules have to implement IModelValidator - this seems like a big layering violation in that most client rules are stateless, and by definition don't care about the actual model value. Expect these to be decoupled (not sure if that has any impact on fluent-validation).\nI'm still looking for a way to get rid of IModelValidator.IsRequired. I really don't like that we make required validators first-class because it contorts the implementation code in all kinds of ways.\n@JeremySkinner anything on your wishlist that we should think about?\n/cc @harshgMSFT in case he wants to add anything\n. > Will it be possible to globally take control of this process if the value wasn't provided, without having to implement a custom binder/formatter? This was probably the biggest pain when dealing with MVC integration in the past.\nAny example of what you'd want to do? Current design is that we look for an IModelValidator where IModelValidator.IsRequired == true and then run it.... We're looking to improve on the current design. Maybe we'll record a breadcrumb in modelstate that validators can look for later. My two sticking points with the current design is that we don't really want validators running during model binding, and that I really don't like that a 'required' validator is special cased in some areas of the code.\n\nAgreed. Will the mechanism for registering new client-side rules be similar as with MVC5 and earlier?\n\nAdding new rules should be as simple as some combination of:\n1). Create an attribute that implements some TBD interface, put it on properties/types.\n2). Create an IlValidationMetadataProvider which can annotate ModelMetadata with any information you need\n3). Create and register (in MvcOptions) an IClientValidatorProvider that does what you want (possibly looking at data provided by number 2) - based on your criteria.\nThese are the same mechanisms available for a real validator in the new system. I plan to at the least separate the APIs for client valiators and server validators.\n. > With MVC5 and previous, the binder would then generate the generic \"A value is required\" message, which couldn't be overriden. I'd like it if the IModelValidator to be the one making the decision about whether this should be allowed or not.\nGood feedback. We'll have to look into improving this as that is the current behavior. The problem is distinguishing between a null that was provided on the wire and a lack of data. Do you feel like this distinction is important to your users?\n. > This is probably one of the most frequent questions I get asked with FluentValidation - where someone wants a non-nullable value type to simply keep its default value if no value was specified (rather than being an error condition).\nIn the new system you can change this in model-metadata. By default a non-nullable value type is considered required, but you can configure it. \n. Part 1 of this is here: f5e7a69693e517666766517cd64e4d4e77e00659\nStill to come:\n- renames\n- refactor of client rules\n- addressing some of @JeremySkinner specific concerns pointed out here.\n. Hi @JeremySkinner - I'm going to close this massive bug and open some more targeted ones based on our discussion. If you run into new issues, or you don't think I've captured all of the feedback, please open separate issues.\nSee #2303\nSee #2304\n. Just a note for anyone else reviewing this... The parameter support for API explorer is primitive, and hacky, and will be cleaned up by another item (#886).\nFor the purposes of this item, we're just trying to stub something out that lets us unit test the features we have.\n. Some minor feedback, and we need to look into what to do with defaults, but overall solid. :watch: \n. :shipit: \nYour choice on whether not to prefix urls with '/'. We might get feedback about it later anyway\n. 19fbcdf5a8345f14dfdf12868c6d05e66e5f3efe\n. Code and tests look good for this, but I think it's worth another discussion about whether or not we want this change. The bug mentions concerns with API explorer, and I think we've already addressed those elsewhere.\n:watch: \n. :shipit: \n. Merged into webapi-feature 5a63843309ff0bfd982b362fe0c9749629b97b30\n. Merged to webapi-feature 06e88a2f9b15927fa525ebaca486b68de7b55555\n. Merged into webapi-feature 931d97f5ecbb0997c6a1f7537044352662a4396c\n. 9fadcf74ca5865dd110bac9811c145d107d37613\n. Merged to webapi-feature 87f39fc92032c81861e0a0676a2e4b97484d65e3\n. Merged to webapi-feature 8203b1e1b382a61c09e8249e8ec566117d9f6816\n. Merged to webapi-feature 950cdb294f942d1f87248b01068b37ef784b46ca\n. Merged to dev 3968df90e45deddaaf61e9831da3347a36714bf1\n. Needs to also include api description provider and action constraint provider. Then :shipit:\n. change \"\" to \"null\" and then :shipit: \n. We already handle object methods specially\n. This isn't really name changes...\nIs this going to be needed for every test?\n. IMO then we should also cut out the usage of configuration files where it's not critical. We need it for the sample for a fairly good reason. Can we just remove it from the others?\n. Updated\n. :watch: \n. find and replace to fix all the names and then :shipit: \n. I also manually verified that this has the desired behavior wrt content-length/chunked when running in IIS. \nWebAPI had specialized code to force evaluation of the content length for certain hosts. In our IIS host this is not needed.\n. :watch: \n. :shipit: \n. Fix minor stuff then :shipit: \n. :watch: \nproduct code looks good, would like to see functional tests for a few more cases\n. :shipit: \n. I'm with @harshgMSFT on the tests. You could write a unit test that verifies that the proper services are invoked... but the functional test accomplishes the same thing in a less-fragile way. Sometimes a unit test can add negative value.\n. @harshgMSFT be sure to rebase, I had to force push some things webapi-feature. Just git rebase --skip for the conflicts on all of the commits that precede yours.\n. :shipit: to webapi-feature after fixing urls in tests\n. Check the actual RouteData.Values dictionary -- what's the key in there?. This is more likely than not a routing bug.\n. When reviewing please ignore the long lines here - we're going to do documentation cleanup on this after beta.\n. Good call, will add.\n. :watch: \n. :shipit: \n. @yishaigalatzer what's the use case for this? The reason we did this feature is to make the attribute routes + link generation work the same way as conventional routes. It sort-of brings balance to the universe. If this is for something similar then it's goodness.\n@danroth27 wat? Let's talk offline.\n. :watch: some minor comments looks good overall.\n. :watch: \nLet's figure out wwwroot\n. :shipit: \n. @pranavkm @harshgMSFT \nDo you know how model metadata is supposed to behave in this case?\n. @harshgMSFT updated\n. This is a much much larger change than I was expecting.. this seems like almost all the plumbing for uber-binding (minus properties). Let's discuss tomorrow.\n. @pranavkm  can you also take a look\n. :watch: looking pretty close to done!\n. Looks overall pretty good, and about as minimal as we can get while still in the direction of uberbinding!\n:shipit: when @pranavkm  is happy\n. :shipit: \n. @jrote1 It sounds like the error message is just unhelpful or wrong. Can you post the signatures of methods in your view component class, and the code used to invoke it so we can improve the message?\nCurrent there's coupling between the method call you make to invoke the view component, and the methods you define in it. \npublic class TagCloud: ViewComponent\n{\n    public async Task<IViewComponentResult> Invoke() { ... }\n    public async Task<IViewComponentResult> InvokeAsync() { ... }\n}\n@ViewComponent.Invoke(\"TagCloud\") can only call TagCloud.Invoke; however @ViewComponent.InvokeAsync(\"TagCloud\") can call TagCloud.Invoke or TagCloud.InvokeAsync.\nWe'll be changing this behavior for beta - @ViewComponent.Invoke will be able to call both methods.\n/cc @pranavkm \n. c0d8ca8aedf312d71d2339c3c3b495538377e3b8\n. What is GetRequiredService? Is this a helper in DI that provides a nice error message?\n. @halter73 we're just happy to be on board with a centralized solution for this issue, rather than doing our own thing.\n. Having a method like GetRequiredService provided by DI changes the analysis. It's 'worth it' if it's just a find and replace operation.\n. @kichalla @javiercn \n. @javiercn @harshgMSFT \n. @kichalla branch updated, still looking into escaping issues.\n. updated\n. 105c99cbf2f4e9d7a59d6aef998ba933ecea1f28\n. ## Recommendation for the scope of this item:\nEnhancements to ObjectResult\n\nAdd a status code property to ObjectResult\nAdd a protected virtual OnFormatting(...) method to ObjectResult that's called before writing to the body. This will be overridden by various result types.\n\nBadRequest()\n\nMove the BadRequestResult from WebAPI compat shim to Mvc.Core\nAdd an HttpBadRequest() method to Controller\nThe design/code is very consistent with HttpNotFoundResult\n\nCreated(string location, object content)\n\nMove CreatedNegotiatedContentResult<T> from the WebAPI compat shim to Mvc.Core\nIt should be called CreatedResult and no longer be generic\nIt should inherit from ObjectResult directly\nSet a status code and location header\nAdd a Created(string uri, object value) and Created(Uri uri, object value) method to Controller\n\nCreatedAtAction(...)\n\nCreate a result called CreatedAtActionResult\nIt should inherit from ObjectResult directly\nSet a status code and location header\nUse RedirectToActionResult as inspiration\nAdd the same methods to controller as RedirectToAction(...)\n\nCreatedAtRoute(...)\n\nMove CreatedAtRouteNegotiatedContentResult<T> from the WebAPI compat shim to Mvc.Core\nIt should be called CreatedAtResult and no longer be generic\nIt should inherit from ObjectResult directly\nSet a status code and location header\nUse RedirectToRouteResult as inspiration\nAdd the same methods to controller as RedirectToRoute(...)\n. The major thing that's missing here is enabling the functional tests for the compat shim on coreclr. Your choice if you want to do it here or in a follow up.\n. :shipit: \n. :watch: \n. :shipit: \n. :watch: \n. :shipit: after fixing minor comments, and then address naming in tests in a follow up.\n. :shipit: \n. Any test impact? is there a test that's only running on desktop that we should enable?\n\nOtherwise :shipit: \n. @harshgMSFT \n. :shipit: \n. @pranavkm What's the user impact of this. Can you come up with a simple repo?\n. Approved for beta\n. The fact that action is invoked is by-design. MVC has no required parameters. We plan to add the ability to specify required parameters via a set of attributes.\nThe behavior difference here is that MVC5 would 500 here. Instead of passing default(T) to the method, it would pass 'null', which would blow up. We need to think about doing something here because the user has no way to know if 0 was passed explicitly or as a default value.\n. :shipit: \n. /cc @pranavkm \n. :watch: \n. :shipit: \n. e9bcc3f0e879afc81dc620dbe8ee24e904872689\n. :watch: \n. :shipit:\n. :watch: \n. give the comment some more love and then :shipit: \n. @Eilon why not another repo? the tools/tests needed to build/package these guys will be substantially different from MVC.\n. 77c4391e476805bdce16fec4132ee44e7833e603\n. :shipit: \n. @harshgMSFT this has been merged right?\n. :watch: \n. :shipit: \n. What about invalid values? Would like to see that and a functional test. :watch: \n. :shipit: \n. 7ae5e66ccdfe326a83c3d0ae40b8f4173a1b11b9\n. See: RoundTrippedValues_GetsModelBound_ForStringIndexedProperties for a functional test that needs to be updated\n. @kichalla can you please update the original bug summary to include the supported and not supported formats - include a comparison with MVC5/WebAPI2.\n. This is being moved out to beta5. We have parity with MVC5/WebAPI2, but we feel like any change here would need to be accompanied by HtmlHelper template support to actually generate fields that we can model bind.\n. @danroth27 here's some customer demand. https://github.com/aspnet/Mvc/issues/2483#issuecomment-98223057\n. What's the repro case/user impact? \n. :shipit: \n. is this merged?\n. Another alternative is to support blocking based on the type name. This would allow us to block whole namespaces if it suits us, without taking a dependency.\n. :shipit: given that we have good tests in place for this already. Please double check\n. @yishaigalatzer - taking over this PR. Added docs and a few tests.\nWe need to resolve exactly what to do with JSON. Let's discuss.\n. Updated after taking over this PR.\nWe decided to simplify the model. JsonViewComponentResult will not attempt conneg, it will just use the registered 'fallback' JsonOutputFormatter\n. @dougbu updated\n. design mode over. \n. @pranavkm updated\n. more update\n. :shipit: \n. Hi @Kukkimonsuta, I'm going to reply to some of your input piecemeal, as there's already support for doing some of what you want to do. Your feedback is timely because I'm working in this area right now.\nFirst of all the hope is that you don't need to touch DefaultActionDiscoverConventions and especially not ControllerActionDescriptorProvider\nThis are big hammers, that affect your whole app, and are generally going to contain a lot of critical logic that will be hard to distill or duplicate. \nWe've got a new API surface as part of the product that that lets you customize the result of action discovery using an OM that's designed to be mutated. You can find the object model and some extensibility here:  https://github.com/aspnet/Mvc/tree/dev/src/Microsoft.AspNet.Mvc.Core/ApplicationModels\nEverything that you see on these classes that's mutable is designed to be messed with :grinning:.\nThis includes changing the controller name, changing the action's accepted http methods, adding filters, adding/removing actions, setting routes, areas, etc.\nThere are two ways to plug in to application model today:\n1) Create and register a class that implement IApplicationModelConvention.\nservices.Configure<MvcOptions>(options =>\n{\n    options.ApplicationModelConventions.Add(new MyControllerNameConvention());\n});\nSee: https://github.com/aspnet/Entropy/blob/dev/samples/Mvc.CustomRoutingConvention\nThe names are out of date, but the principle is the same.\n2) Create an attribute that implements one of the other various IFooConvention interfaces and stick it on a controller/method/parameter. This works with base-classes as well.\nIf you look at the WebApiCompatShim project, a significant number of WebAPI-isms are rebuilt using this API.\nThere's also another approach we're tentatively planning to support. This is not confirmed, just suggested\n3) Add startup code that customizes Application Model through a fluent API\nservices.Configure<MvcOptions>(options =>\n{\n    options.ApplicationModelConventions\n        .ForAllControllersInNamespace(\"MyApp.Admin\")\n        .SetRoute(\"api/Admin/[controller]/[action]/{id?}\")\n        .SetArea(\"admin\");\n});\nWe'd love to hear your feedback about Application Model, and what problems it's good and bad for.\nAdditionally, I'm in the middle of a big refactor of all of this. See #1431. The ADP will be much less monolythic. ActionModelBuilder and ControllerModelBuilder (replacing action conventions) will still be fairly complex, but will be easier to customize by subclassing.\n. Hi @Kukkimonsuta, I'm going to reply to some of your input piecemeal, as there's already support for doing some of what you want to do. Your feedback is timely because I'm working in this area right now.\nFirst of all the hope is that you don't need to touch DefaultActionDiscoverConventions and especially not ControllerActionDescriptorProvider\nThis are big hammers, that affect your whole app, and are generally going to contain a lot of critical logic that will be hard to distill or duplicate. \nWe've got a new API surface as part of the product that that lets you customize the result of action discovery using an OM that's designed to be mutated. You can find the object model and some extensibility here:  https://github.com/aspnet/Mvc/tree/dev/src/Microsoft.AspNet.Mvc.Core/ApplicationModels\nEverything that you see on these classes that's mutable is designed to be messed with :grinning:.\nThis includes changing the controller name, changing the action's accepted http methods, adding filters, adding/removing actions, setting routes, areas, etc.\nThere are two ways to plug in to application model today:\n1) Create and register a class that implement IApplicationModelConvention.\nservices.Configure<MvcOptions>(options =>\n{\n    options.ApplicationModelConventions.Add(new MyControllerNameConvention());\n});\nSee: https://github.com/aspnet/Entropy/blob/dev/samples/Mvc.CustomRoutingConvention\nThe names are out of date, but the principle is the same.\n2) Create an attribute that implements one of the other various IFooConvention interfaces and stick it on a controller/method/parameter. This works with base-classes as well.\nIf you look at the WebApiCompatShim project, a significant number of WebAPI-isms are rebuilt using this API.\nThere's also another approach we're tentatively planning to support. This is not confirmed, just suggested\n3) Add startup code that customizes Application Model through a fluent API\nservices.Configure<MvcOptions>(options =>\n{\n    options.ApplicationModelConventions\n        .ForAllControllersInNamespace(\"MyApp.Admin\")\n        .SetRoute(\"api/Admin/[controller]/[action]/{id?}\")\n        .SetArea(\"admin\");\n});\nWe'd love to hear your feedback about Application Model, and what problems it's good and bad for.\nAdditionally, I'm in the middle of a big refactor of all of this. See #1431. The ADP will be much less monolythic. ActionModelBuilder and ControllerModelBuilder (replacing action conventions) will still be fairly complex, but will be easier to customize by subclassing.\n. :shipit: \n. 305dd87b9b744a8ab5e7a451a14040819b9a9fd7\n. /cc @pranavkm \n. > should IFilter.CreateInstance() change to take the ITypeActivator instance implementations (e.g. TypeFilterAttribute) may need at the same time?\nHad F2F discussion about this. While it's possible, it seems like bloat, since we don't know if you'll need it.\n. 661583f6944a9689c6ba482904cc0f337683e20a\n. 9a77c2bc1e1e58cba2941a7c3690938a0edb641b\n. /cc @dougbu @pranavkm @javiercn - or whoever else is bored\n. There's a follow up item logged for considering a refactor of this static class - #1455 \n. @pranavkm @kichalla updated\n. I went ahead and cleaned up other cleanups in this file. It looks like it was written pretty early in our collective history.\n. This seems a like a lot of new code - what are the advantages of adding these extra constructors?\n. > @rynowak the new constructors help the base ViewDataDictionary determine ModelMetadata when Model==null. this avoids an awkward split were ViewDataDictionary understands runtime types and ViewDataDictionary understands declared types. more importantly it makes the #1426 issue impossible because ModelMetadata values are more consistent.\nOk, thanks I see the value now. I'll take a deeper look.\n. /cc @Eilon for his Ei-thoughts\n. :watch: \n. This is looking pretty complete - would like to see ListAllFilters expanded to include all combinations of scope/(auth/action/result) so we have every possible ordering issue specified in a single test :+1: \n. Add a global auth filter to the one test and then :shipit: \n. Triage: This is a medium-sized refactor and should be considered seriously for RC\n. 2b82ee0255e223ce2347e0e5b7067c7140779db5\n. Moving to @harshgMSFT as he's currently working on this\n. Ignore the base branch on the PR - this is currently slotted for beta1.\n. @pranavkm I think it's probably all verbose right now. Otherwise this will log \"I matched a route yay!\" on every request.\n:shipit: \n. Should this still be open?\n. :watch: \n. See SelectTagHelperTest.GeneratesExpectedDataSet (look for the TODO) when this is fixed for some test cases to enable.\n. 90cef3b9ca86f56bd49700f632474e7db068816a\n. I'm \u00fcnsatisfied with the title. \u00dcnrealised potential.\n. If this is part 1, what's in part 2 - part N?\n. :watch: \n. :watch: \n. :shipit: from me - assuming that we're following up by doing the changes we discussed to model metadata.\n. @harshgMSFT updated\n. @pranavkm updated\n. @harshgMSFT JsonResult_Null is already part of the PR\n. Hi @mojtabakaviani\nCan you please include a small sample (controller code, and view code) that demostrates the problem so that we're sure we understand your problem?\n. Is this a change from MVC 5?\nCan you include an example and what the expected behavior should be?\n. :watch: \n. Change the Assert.NotNull -> Assert.NotEmpty where appropriate, and then squash/rebase and :shipit: \n. 0a473b06003321f9dc9d455cf175c194c0a22cd6\n. So you can read it? This is very important based on the way IRouteTemplateProviders split the set of attributes when there are multiple. Looking at action.ActionMethod.GetAttributes(...) will not yield the same result.\nIf we change this behavior (splitting) then we don't need this property at all.\n. @ianhong - only ActionMethod and Attributes should be readonly. \nThe other properties are designed to be mutated by users for customization. Take a look at the routing sample in entropy to get a feel for it. \n. @ianhong \nThere shouldn't be any new classes introduced. Attributes should turn into IReadOnlyList<object> and come from the constructor.\n. @yishaigalatzer if we have a paper trail we can reactivate this issue for 1000 cool points if anyone ever does it again. Seemed worth it.\n. e37f1ad85fe46e86609cc1f2f78166d1d7c4f2ce\n. @yishaigalatzer @pranavkm  updated\n. @danroth27 Consider also then if we're going to fix IEnumerable<>/IQuerable<> in XmlSerializer. WebAPI had special casing for both of these types in xml - IEnumerable<> was only used for XmlSerializer, but my guess is that it needs IQueryable<> support as well.\n. This looks like a temporary build error from a mismatch of packages and source code, due to some changes that I made a week or so ago, does this still reproduce?\n. e65218d6dfe61424e53767b900af4c15afa07298\n. 08a578d01f46c918af91c765877af8d78ca45a19\n. @kirthik let's try to also repro this on alpha 4 to get the exact exception message so we can figure out how this was fixed.\n. @pranavkm @kirthik \nAgree, this sounds like the change that fixed the issue. This is helpful to capture here for anyone else that runs into the issue.\n. 42df4cf2eddd92221104c55fe6bc48a42e2b3030\n. Decision here is to do nothing for now.\n1563700feb65bc17e9ba8cbdbb64b9db6e03f981\n. :watch: \n. :shipit: after fixing minor comments\n. @NTaylorMullen take a look at responses\n. Rebased and updated\n. @pranavkm \n. We're probably going to go another way with this.\n. 3c380bc38ede2aa25680e40c02898f954b8a90f6\n. @davidfowl \n\nI think the first check should be reduced to just mvc core. Not sure why we need to check if the assembly references any of the mvc assemblies since those themselves reference Mvc.Core :smile:\n\nThis is correct now, but it wasn't when this code was written, some references used to go in other directions :laughing: \n. https://github.com/aspnet/Mvc/issues/1194#issuecomment-62968892 for the detailed description\n. ed8ba5ae9c14221b2f0f220e62051c2d72006f71\n. Can you give an example usage of this class? In what scenarios might I inherit from this - what do I do and what am I trying to accomplish?\n. Here's the comment you referred me to:\n\n@ajaybhargavb Example scenario: filtering to only discover assemblies from specific assemblies\n\nSeems like this is pretty tailor made to support just this scenario, (and the tests are a good example of this). \nThe trap here is that adding an assembly to ReferenceAssemblies does not make it a controller assembly. Assuming that you've got the following projects:\nControso.Core - doesn't reference MVC, but defines some POCO controller base-class you use in other projects\nContoso.Store\nContoso.Blog\nAnd you add Contoso.Core to ReferenceAssemblies, then store and blog light up. However if you add any controllers to Contoso.Core they don't get discovered. Consider making CandidateAssemblies virtual so you can write this code:\npublic virtual IEnumerable<Assembly> CandidateAssemblies\n{\n    get { return base.CandidateAssemblies.Concat(new [] { Assembly.Load(\"Contoso.Core\") }); }\n}\n(and yes you can do this without making the method virtual using interface-reimplementation, but many people don't know about that feature, we should be nice).\n. getting there! added some minor feedback :watch:\n. :shipit: after fixing minor comments\n. > if a controller failed to be registered because it didn't end with the \"Controller\" postfix, etc.\n@sonjakhan I want to specifically call out this feedback since it's something we didn't previously discuss. Everything else I think is already included in your PR.\n. :watch: \n. Please revert the kproj changes and rebase, I made these changes already in dev, so you don't need to struggle with VS.\n. :watch:\nProduct changes look good overall, test code could be simplified.\n. :shipit: \nMake sure to rebase and squash\n. I'm really liking the design of how we did IBinderMetadata that it's this simple to add a feature like this. \n. :watch: \n. You should also add a test to the RequestServicesTest in functional tests - this is a test suite that verifies everywhere a user interacts with type-activation or DI that we're able to resolve a service from request services. It's already patternized there what to do, so it should be easy.\n:watch: \n. :shipit: from me\n. 8f38650d1f3f0a31856fe7d05f0e5ca3ee39aa75\n. Please do a pass for long lines in the functional tests. 120 chars\n:watch: \n. :shipit:\n. Alternative would be to support multiples. We didn't do this originally because it wasn't needed, but it's a design option that might have some benefits.\n. :watch: \n. This is looking more complete - how about some unit tests?\n. @avanderhoorn \n\nadd when the message is being logged (i.e. \"before action is triggered\", etc) and what can be inferred from the message (i.e. \"contains the details/context of the action about to be triggered\", etc).\n\nWanted to drill into this to make sure it's not an issue... Currently all of this discovery logging will take place when action discovery runs (typically once at startup). Will this cause issues for you?\nWhat if we used scoping here to indicate when it's happening? IE create a 'startup' scope.\nnote: We are planning to log information about the action to be invoked in the context of a request. That will come as a separate PR.\n. :watch: \n. :shipit: \n. Just going to go ahead and do this as part of the TODO cleanup then.\n. 7c961e3ce894746bc703b1f00cf12e9aedb6c745\n. @pranavkm @dougbu @harshgMSFT @NTaylorMullen \n. :shipit: \n. @kulmugdha FYI - you'll need to rebase but there should be minimal impact for your additions\n. Duping this one to #756 and adding the info there.\n. > This is a purely test change and is open for a quick sign off.\nQuick signoff denied\n. :shipit: after cleaning up project.json\n. :watch: - trusting @dougbu to give most of the feedback here\n. :shipit: from me (when @dougbu is happy of course)\n. :watch: \n. @pranavkm  updated\n. @pranavkm updated please take a look.\nEnabled [ModelBinder] on properties (for view models) and added a functional test for the same.\n. We will definitely want to do something more (than just verify) here - the logging work that was done in this area was pre-IActionConstraint.\n. /cc @pranavkm \n. > Enable more StyleCop rules \u2026\nPlease no - it's impossible to review this PR because I can't tell what changes are due to new stuff and what are required based on old stuff.\nSecondly, the point of StyleCop for this team is to reduce time spent iterating on known mechanical issues (120 chars/line, casing of names, etc.). It's not a goal to have more rules enabled. Have the discussion first about how it's costing us efficiency to have these rules disabled.\n. :shipit: after reverting the new rule that readonly fields should be on top, this isn't something we want to enforce.\n. > Out of curiosity, what would one do in a resource filter on the way out?\nThe same kinds of things you can do in a result filter... except a resource filter always runs. Result filters only run if a successful result was produced by the action or by an action filter.\n. 0152aac\n. /cc @sornaks \n. @pranavkm @sornaks Updated PR\nDid a pass on the names, and they are much clearer now.\n. @dougbu Yes! Fixed\n. @pranavkm @sornaks any more feedback?\n. @dougbu can you try and put together a sample demonstrating this?\n. /cc @pranavkm \n. 9468d741ee344c89ae6087b3336b258eb9cdd807\n. @dougbu  signed off in person\n. mostly looks good\n:watch: \nWould like to see 1-2 unit tests for the compilation service if it's not extremely difficult.\n. Copying here since the comment got buried: \n\nBased on what I'm seeing here though it's going to resolve all the options from the project.json + defaults for the current framework and current configuration. What happens if there's commandline args affecting compilation as part of the current environment?\nI don't follow - what do you mean by current environment?\n\nPresumably this code is running under klr.exe right? Any settings that affected klr.exe are part of the current environment. So is there ANYTHING that affects the compilation behavior of klr.exe and isn't stored in project.json? (environment variables, commandline).\nIf that's possible (now or in the future), then this strategy is broken.\n. :shipit: after a brief discussion and adding a protected property for compilation settings\n. @harshgMSFT updated\n. Analysis suggests this is an undocumented issue from WSR webapi (which this code is based upon). \nI made the same change in the WSR codebase, and no unit tests broke as a result.\nSee https://github.com/aspnet/Mvc/blob/274c9dbc4bf621f2246cd73f07d13723442fc589/src/Microsoft.AspNet.Mvc.ModelBinding/Validation/ModelValidationNode.cs#L193\nModelStateKey will already be set to transactionId so this code will double up the name.\nWe encounter this issue because our 'greedy' model binders return true to halt the binding process. This is interpreted as a successful bind, and so validation runs. This has the effect of giving attributes like [FromHeader] 'required' behavior. This will be tracked by a separate issue.\n. Fixed in release 1631ca1a47823f8c23c16b336cef27105fcc6708\n. These are some issues that @SonjaKhan found while working on adding logging. I asked her to move to a separate pr.\n. :shipit: \n. @pranavkm @dougbu @yishaigalatzer please give feedback asap - this is for the current release.\n. I believe we got similar feedback re api-description from @domaindrivendev. The parameter names in user code often aren't relevant.\n. @kirthik what was the decision here? I see a PR out for review but I don't get what it's supposed to do. Is this behavior configurable? How?\n. Copied from #1676 - What happens when a greedy model binder can never bind the property in question? What if multiples of them exists? does this make sense?\n\nshould we throw rather than give up? This is clearly a user error at this point, it is never going to work and there is no indication to the user of why it didn't.\n. Updated description\n. 3dea6b11a3b44c0be831409eb174e94c20502f47\n. @dougbu \n. This is beyond my knowledge then. Let's wait on this until we can figure out what's really going on.\n. > signs off just on part 3\n\n:trollface: \n. :+1:\n. @pranavkm is this a compat break from 5.2?\n. :shipit: \n. :watch: had some discussion about this and I think we can simplify it. Waiting for the next go around\n. :watch: - please trim this down to the minimum of what's needed for the test\n. Triage: This is a follow-on to the model-metadata work and should be considered for RC.\n. f3679f214e85b64bc4d7387e34753f4b8e01beb8\n. The decision here (with input from @GrabYourPitchforks and @Tratcher) is to just ignore the chunked setting. The server already will do the right thing if chunking is needed.\n. :watch: overall direction looks good here. A few things need to be sorted\n. :shipit: after fixing minor comments\n. db961049851be53e9137c485fd4589f609ee4af9\n. :watch: \nIt would be great to see a unit test that verifies only the expected methods on the model metadata provider are called when constructing a VDD\n. :shipit: for the PR - but please get @pranavkm to sign off as well as official approval for whether or not we want to take this fix.\n. > How does this work for other model binders when the value does not exist?\nOther model binders aren't greedy and don't return true to halt model binding. The model binding system sees null and success = true and so sets the property to null.\n. 1e7812e7e0e5fc2e4e0d726f5903f9a8259c254\n. nice additions here. :shipit: after fixing minor stuff\n. @pranavkm please add details about scenarios and design\n. @TalalTayyab thanks for the detailed report, we'll take a look at this.\n/cc @pranavkm \n. A little more data here, as the model binding system in MVC 6 is based on WebAPI 2 and not MVC 4/5: \nIn legacy WebAPI this code when through the 'user-error-message-provider' extensibility point, ultimately falling back to a generic error message. \nWe got rid of that in MVC 6, but instead we're just taking the message from the exception, which is the cause of the regression. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Internal/ModelBindingHelper.cs#L97\n. @pranavkm @dougbu can you take a look?\n. General direction/approach is good here. This needs functional tests, and deletion of the webapi shim code that's similar to this.\n. :watch: \n. Still waiting for functional tests and unit tests :watch: \n. :watch: still waiting on functional tests\n. :shipit:  after fixing minor comments\n. This is supported today when a query string has multiple values for the same key:\n```\nhttp://localhost:5001/Home2/Sample?ids=5&ids=17&ids=18\n    public string Sample(int[] ids)\n    {\n        return string.Join(\", \", ids);\n    }\n\n```\nIf you want to support parsing your own format for multiple values, then the simplest way is to implement a custom value provider. Take a look at https://github.com/aspnet/Mvc/blob/5e067cdb9ecf7d910d45a427aef4e293c3d68801/src/Microsoft.AspNet.Mvc.ModelBinding/ValueProviders/ReadableStringCollectionValueProvider.cs#L61\nYou'd want to change the code in GetValueAsync to support your format. \nThen create a custom ValueProviderFactory and register it in options. See https://github.com/aspnet/Mvc/tree/dev/test/WebSites/ValueProvidersWebSite\nDoes this help? Or are you thinking of something different?\n. /cc @sebastienros \nYou can use this constructor if you're defining a derived class what expects specific claims. There's no legacy/back-compat concern here since neither of our old AuthorizeAttribute implementations had constructor parameters.\n. Also, since AuthorizeAttribute is a filter, you can manually construct it and add it as a global filter. Seems like we should leave this around.\n. http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\nSmall changes like this should also go into the dev/master branch as a single commit. I'll take care of it for you this time :grin: \n. db961049851be53e9137c485fd4589f609ee4af9 Merged\n. Might be easier to do this after @Tratcher is done porting over the strongly typed headers. Sync up with him please\n. :watch: for a functional test. \n/cc @Tratcher \n. :shipit: \n. > Yeah, this will not enable us to run on a real server scenario, but do we need to for logging related verification tests?\nPlease assume the opposite. We are planning to run everything in real server scenarios - there's a high bar for opting out.\n. > There are couple of issues with ElmLogger because of which the code here looks a bit clunky\nA few thoughts in random order:\n0) This is a big walk backwards from Sonja's PR with did serialization and would work on a real server. There were some minor points we wanted to address with the serialization, but it was largely ready to go.\n1) Users of elm will want to see messages in-order (regardless of timestame precision). If there's a bug that breaks ordering, then it's a product bug as well as blocking usefulness for tests.\n2) If elm's needs conflict with what you want to use it for in tests, then the product needs win every time. This is the inherent risk in using product code in tests.\n3) I'm not sure what you mean about the value of verifying scoping information. Largely MVC won't create scopes, and we don't want to invest much in verifying information created by other components as that introduces more coupling. Where we get the most value from scoping is being able to identify the messages associated with the current request.\n. Changes to Controller appear to be missing :watch:\n. :shipit: \n. /cc @kichalla \n. This was done fb21b73\n. :watch: \n. :shipit: after deleting commented-out code\n. :watch: \n. :watch: looking pretty good, just small comments here\n. :watch: Deleted too much! Just the action result types should go. All of the functionality needs to stay\n. :watch: \n. :shipit: \n. :shipit: once you and @davidfowl agree on the name\n. :watch: \n. :watch: \n. :watch: \n. :shipit: after changing the resource string to use nameof(..)\n. :shipit: \n. :watch: \n. :watch: \n. :shipit: after fixing minor comments\n. :watch: \n. :shipit: looks great!\n. :watch: overall direction looking good here\n. @sornaks rather than accessing the options in OnActionExecuting we probably want to make this an IFilterFactory that uses a service. This is a design change we made recently for URL format.\n. :watch: overall looking good, a few things need fixing, but tests look good.\n. :shipit: \n. :shipit: \n. see #1094 - the discussion around this bug motivated this sample as the chosen solution for users that want to do async work in routing.\n. /cc @harshgMSFT @kichalla \n. @harshgMSFT updated with comments and a test for attribute routing\n. Also, I perused our other binders to any similar code that needs to be cleaned up. The only one I saw that needed change was the one that @ajaybhargavb currently has in PR. I left comments there.\n. Copying on my buried comments here:\n\nrynowak:  This is the opposite of what I'd expect. I'd expect that the application/* goes into produces. A good example of this in practice would be an api that returns images in a few formats. You'd have [Produces(\"image/*\")] on the action, and use a format mapping to get the exact type you want.\nkulmugdha: Yes I tried that one too, it wouldn't work with current code. We check if any of the content type that produces produce is subset of the format content type. If it is not, we 404. We here assume that, produces is going to be specific and not /. I had a talk to @harshgMSFT on this. His point is the produces is meant to support specific types not . If you support multiple of these you list them all, but not *. Let me know what you think. @yishaigalatzer -- thoughts?\n\nLet's put aside a discussion of what the current PR does until we've arrived at what's supposed to be supported\n/cc @harshgMSFT and @yishaigalatzer\nI wouldn't expect registering a media-type-range (application/*) to be an intended/supported scenario, for the simple reason that a file extension is intended to replace the accept header for a limited client that wants to request exactly what they can process.\nNow let's look on the other hand at produces. Produces is designed to constrain the set of possible media types, but still play within the conneg system. I'd expect [Produces(\"image/*\")] to work (by allowing conneg based on accept, or based on the first formatter to choose to write an image/*.)\nThis implies that the check we have is backwards inside [FormatFilter]. \n. :watch:\n. :watch: for small comments\n. :shipit: \n. Ping\n. :watch: \n. :shipit: after fixing namespace\n. :shipit: \n. :shipit: from me, please get sign off from @yishaigalatzer as well.\n. :shipit: \n. Please look at #1818 first - as it needs to come before this\n. Updated \n. :shipit: \n. @yishaigalatzer \n. @rmja thanks for the thorough report. It looks like the issue might be in OutputFormatter@192. \n```\n            var selectedMediaType = context.SelectedContentType;\n        // If content type is not set then set it based on supported media types.\n        selectedMediaType = selectedMediaType ?? SupportedMediaTypes.FirstOrDefault();\n\n\n        context.SelectedEncoding = selectedEncoding;\n\n        // Override the content type value even if one already existed.\n        selectedMediaType.Charset = selectedEncoding.WebName;\n\n```\nselectedEncoding might refer to one of the values from SupportedMediaTypes. We should be making a copy before mutating it.\n. Please change all the unit tests to use the default constructor for the formatter (since that constructor creates a default settingts), then :shipit: from me.\n@harshgMSFT or @sornaks should have a look also.\n. :shipit: after adding a test for VS + viewstart\n. :shipit: after fixing minor comments. \nAlso please do a find-all-references on charset to make sure this is  the only place in code we do this. I called out this particular place in code as it was clearly the cause of the problem reported, but there might be more bugs lurking (ContentResult for instance)\n. Looks on the right track for now. The unit test you're probably hitting is one that we have to ensure the copy-constructor is updated when a new piece of data is added. You should need to update that test.\n:watch: \n. Would like to see some unit tests for ADP. That code is a bit complex so it's worth doing even though the feature you're adding is small\n. :shipit:  from me, please get signoff from @yishaigalatzer as well\n. @harshgMSFT updated - now with functional tests.\nNote that there are already really complete tests for the route-info part of the parameter data. I had to update a few things based on our decisions today.\n. Already added ApiExplorer_ThrowsForContentionalRouting\n. pushed an update addressing minor stuff. Going to rebase on release and push there\n. :shipit:  after fixing minor comments.\nI share the same concerns about the usability/discoverability of this. Product code looks fine.\n. :shipit:  from me after fixing long lines and removing TODOs.\nLooks solid\n. :watch: \nThis looks like it's mostly on-track. A few thoughts:\n1). Should we have one collection or multiple?\n2). Can we simplify the boilerplate somehow? There's a decent amount of code required to do this inside the formatter, and it's duplicated.\n. :watch: - there's a ton of little things in tests to clean up.\n. :shipit: after minor test cleanup\n. Those two FiltersTests seem unlikely to be related to Xml Formatting\n. /cc @dougbu \n. :shipit: \n. updates look great to :shipit: Can you squash/rebase this?\n. 42df4cf2eddd92221104c55fe6bc48a42e2b3030\n. Bonus points if you want to address https://github.com/aspnet/Mvc/issues/1889 as part of this change as well. \nI'd suggest something like:\n\nA URL is considered local if it contains an absolute path, but does not contain a host/authority portion. This also includes URLs using the virtual paths '~/'.\n\nAnd include a few examples.\n. One thing I don't love is the copying of tests. If we end up with duplicates it's easier for them to diverge.\nI'd suggest in this case deleting the UrlHelper copy of the tests, and replacing it with one simple test that chooses a few complex cases, and has a comment about where to find the thorough tests.\nAny other ideas @yishaigalatzer \n. :watch: docs need a little more precision, and some examples.\n. :shipit: after fixing minor comments\n. :shipit: after fixing minor comments\n. Do a quick pass here for style issues, this is sloppy compared to the new code we're writing :watch: \n. :shipit: \n. Some bad merging happened here and a bunch of my change have gone missing. Will resend\n. :watch: looking pretty close to done\n. :shipit: after fixing minor comments\n. > So if it's alight, I can force push the rebase for this branch. Is that OK? Hopefully that will solve the problem with my last attempt to rebase. :scream:\nYes. force push to your own fork or your own branch is totally OK. \nAlso while you're doing a rebase you can do git rebase --skip for a commit that's been subsumed by a change in another branch. \nI do this frequently if I'm working on feature B which depends on feature A. When I get CR feedback for A, I update it and it eventually merge it to dev as A'. I then rebase B on top of dev... when I get merge conflicts trying to apply A, I do git rebase --skip. In this case I want to skip commit A because A' is the real version.\nYou can also do this with git rebase -i <branch> by deleting lines \n. /cc @dougbu \n. :watch: \n. :shipit: \n. The suggested task here is to review our uses of Order when it's used as a property and make sure they all have consistent definitions and accurate and complete docs.\nEx: Does a route with higher order run first or last? \n. Did a review of all of the items here, and all of them are consistent. \nAll of our Order properties mean \"lower number goes first\". 90% of the time there's a use of .OrderBy(_ => _.Order) in the code.\nThe remaining work here is to add documentation.\n. 2b4702728d48ee6c34727afa09255c0e7c17b6f9\n. :shipit: \n. /cc @dougbu - this is what you reported to me. We're as-good-as conventional routing right now, but could potentially be better.\n. 7cb6c1065cce41b517a3e39459572bcf2bf63a99\n. :watch: for now. Product changes look like what I'd expect and I'm not the right person to review the test code (not familiar with unobtrusive). I nominate @pranavkm \n. :shipit: \n. Take a look at BadRequestErrorMessageResult and also ApiController. I think some stuff in webapi shim got missed.\n:watch: \n. > thought the decision was to get rid of HttpStatusCode use except in the functional tests? the functional tests are HttpClient apps and are already playing in the System.Net / System.Net.Http pool.\nI had the same feedback (leave the functional test code alone) and I'm equally confused. Let's discuss tomorrow\n. :shipit: \n. :shipit: from me when others are happy\n. > Creating a separate PR for the rebase seems to be paying off, because I can resolve the conflicts on my end. :sunglasses: I'm a bit new to git workflows, so let me know if there is a better way. :question:\nYou tend to create very well isolated commits that make things easy on reviewers which is great. It's totally fine to rebase your own work on your own branch and force push to your existing branch -- better to do that when you've got signoff. \n. We had also discussed allowing you to plug in our strongly-typed header classes with [FromHeader]. That might allow you to express which header you want to bind without having to copy-paste string like [FromHeader(Name = \"ETag\")] - which I think is the intent of this suggestion.\n. :shipit:\n. @harshgMSFT is this still open?\n. :shipit: - TY!\n. @kichalla what was the corresponding test originally testing?\n. :+1: \nNote that for a user scenario we're really want them to use BadRequestResult for this. I'd imagine the test is testing some of the details of ModelState, which is why it does what it does.\n. Looks to be on track. Would like to see one new basic unit test for each of the new APIs\n. :watch: \n. :shipit: from me after reverting changes to DefaultHtmlGenerator\n. :watch: \n. :shipit: from me\n. :shipit: !!!\n. /cc @harshgMSFT @yishaigalatzer \n. @harshgMSFT updated\n. > Should we add one test case which shows how to create a custom model binder which uses a value from a value provider and some external source( eg a combination of from form and from body)? This is interesting because we do not intend CompositeBindingSource to be used for this purpose, and having a test like this would really be a sample on how to do composite sources. \n\n:watch:\n\nI don't see how that's different than what our existing tests/product code do. If you wanted to do something like this, you'd be creating a new source, and then looking for it and doing model binding when you find it. This is exactly what our existing model binders do (including one in the functional tests).  If that model binder happens to use value providers then that's an implementation detail.\n. @harshgMSFT updated - still getting to the bottom of that one unit test with the wrong error message.\n. Updated again with a few things I missed\n. got :shipit: from @harshgMSFT in person\n. :shipit: from me after fixing namespace\n. rename test and :shipit: \n. :shipit: \n. :shipit: from me\n. I'm in :heart_eyes: which this change.\nWOW\nmuch refactor\n        so simplify\nvery delete-redundancy\nMy main concern is that we didn't replace the eventing system on ModelValidationNode. We should discuss if something like this is needed. \nOther concern is if there are some little deviations in behavior between the body validator and what model binding used to do in obscure cases (indexer-properties and the like).\n. One more top-level concern here is the handling of BindNever and friends. It looks like that was only done by the modelbinding-version of validation, and so the body-validation version needs to include this feature.\nMy suggestion is to first bake this into ModelMetadata, and then have the body validator look at it.\n. > Updated @rynowak I have not renamed IObjectModelValidator -> IModelValidator -> IPropertyValidator. That can be done in a followup PR. I want to get this in asap.\nSounds good to me\n. :watch: overall design of this is looking awesome! Please review comments and let's chat. \n. :shipit: \n. :shipit: \n. I haven't seen this in a long long time. IMO we'd need a repro or a dump to really investigate this. \n. For reviewers - there are effectively two giant cut-pastes that are responsible for most of the diff\n1). AttributeRoute -> InnerAttributeRoute moved the actual routing functionality\n2). AttributeRouting -> AttributeRoute moved the code to process ActionDescriptors into attribute routing data\n. Another change @yishaigalatzer  and I decided to do here is to throw errors on first request instead of on startup. Going to make that change and then :shipit: \n. :shipit: \n. :shipit: thanks for cleaning up\n. You guys signed off in haste, there's totally a typo in the code and it doesn't even compile\n. :watch: \n. :shipit: from me. I also have a suggestion about how to keep the implementation classes private which is worth considering\n. :shipit: nice\n. This seems like a tricky situation. If only there were some way to ESCAPE this peril. https://github.com/aspnet/Mvc/blob/af9e9f9113fb88d443c69925d5d77d7b3e450281/src/Microsoft.AspNet.Mvc.Core/ApplicationModels/AttributeRouteModel.cs#L229\nIf @Eilon were paying attention when we did this feature he might have insisted on adding escaping despite my objections :laughing: https://github.com/aspnet/Mvc/pull/823#discussion_r15145006\n. I'd agree also with what @Eilon is saying now. This seems like a complicated way to express something simple. If you want to read a collection of values, routing is not a simple way to do that.\nRather than trying to adapt routing to your DTO, adapt your DTO to routing. view-models for request data after-all aren't about  code reuse.\n. :shipit: \n. :shipit:  from me after minor cleanup\n. :shipit: \n. @harshgMSFT is this still open?\n. See https://github.com/aspnet/Routing/pull/150\n. @harshgMSFT  ping\n. thanks. The routing change for this is in. Currently waiting on a coherence pass to check in this test\n. d0e51187415fedf666e2f971f6d08cb74a57abae\n. @dougbu \n. Merging to unblock MVC build\n. /cc @pranavkm @harshgMSFT - this looks right from my POV, but I'm not the expert here :laughing: \n. :watch:\n. :watch: getting there. Please address minor comments. If you need help with the error message let's work on it together.\n. :shipit: \n. :shipit: \n. :watch: \n. :shipit: after removing redundant init in Link\n. :shipit: \n. :shipit: from me. @pranavkm any more comments?\n. :100: what @Eilon said. The \"ambient values\" are part of the system - they always apply. \nFortunately, all of this is highly tuneable, you can get the results your want with a little more work.\n1). You can change the order of your routes. It sounds like you prefer {controller}/{id} over {controller}/{action}/{id}. So then consider adding {controller}/{id} first so it's tried first. Anything that can't match/link with {controller}/{id} will fall back to your other routes.\nJust be aware if you do this that the constraint on id is important.\n2). You can use named routes. That would look like: @Url.RouteUrl(\"defaultWithoutAction\", new { controller = \"Page\", action = \"Index\" }); Using named routes will go directly to the route with that name instead of trying them in order.\nIf you end up using this heavily you could define your own extension methods for IUrlHelper that keep it DRY.\n3). You can just use attribute routes. If you want to really fine-tune the routing experience for your app then this is the most straightforward way.\nIf you don't like using attributes directly in your code, you can also write a convention to apply routes to your actions and controllers using any logic you want. https://github.com/aspnet/Entropy/tree/dev/samples/Mvc.CustomRoutingConvention\n. :shipit: after looking at changing mock back to strict\n. @dougbu updated\n. :watch: \n. :shipit: \n. :shipit: after addressing minor comments\n. @kulmugdha is there anything else to do here?\n. I wasn't part of the earlier discussions but how wedded are we to the name mvc.js? Asking because there are a lot of MVC frameworks in js, so we're likely to collide in name/concept unless we qualify it somehow.\n. :shipit: \n. :shipit: after a quick discussion about the feedback\n. Random thought, what if we bring back INestedProvider<T> as a base-interface with an extension method to dedupe the invoking code. Users still only have to know about IActionDescriptor provider but we can commonize the code for the pattern.\n. :watch: product code is fine, would like to see slightly better tests\n. :shipit: \n. I recently reviewed all of this code and it's pretty straightforward. We could add tests, but it's medium-cost low benefit.\n. :shipit: \n. @kichalla what was the behavior in MVC5?\n. Possible regression? https://github.com/aspnet/Mvc/issues/165\n. If you think that we're missing tests for an already supported scenario then please just add them if it's quick, otherwise open a separate issue. \n. :watch: \n. :shipit: after fixing minor issues.\n. @milutinovici sounds cool! We'd love to see examples if you get it working. Please keep the feedback coming if you run into more issues.\n. Pretty cool stuff Ivan, thanks for sharing.\nA few thoughts from looking at the sample. My assumption of course is that you can compute at startup-time what entity types you have in your app. If this isn't the case, then obviously what I'm suggesting doesn't apply.\nIf you wanted to, you could generate one ControllerModel for each controller X entity combination that you want to support. So if you have PetStoreController<T> and Dog, Cat, and Fish - you'd have a 3 descriptors. Then it would be simpler to attach the actual type PetStoreController<Dog> and actual method PetStoreController<Dog>.BuyFood() to the action descriptor. \nNow since the descriptor has the actual type and actual method you want, there's no need for a custom descriptor type - ControllerActionDescriptor would work fine.\nBut we still have to address action selection - because we need to find the right controller instead of finding all of them. To do that, add to ControllerModel.RouteConstraints -- these are like key-value pairs that have to make the data coming from routing. controller : <controllername> and action : <actionname> will be added for you. So to do this, create a new class that derives from RouteConstraintAttribute and sets the key to type and value to the type of the entity matching that controller.\nI think if you try this out you'll only need to customize controller discovery. \n. I want to also mention that the above RouteConstraintAttribute is how areas are implemented in MVC. So if you read the docs about that, that's gist of what it does. The difference in the new system you can build arbitrary levels of hierarchies. \n. Hi,\nThe design of routing has changed significantly since the system.web days, and doesn't really support a testing model like you may have used in WebAPI. If you take a gander at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/MvcRouteHandler.cs you'll see that the entry point into MVC is itself an IRouter.\nThe main difference is that there's no longer a separation between routes and handlers. Everything that does routing is still on the call stack when you invoke a handler.\nSo, to answer your first question, there really is no testing 'just routes'. If you wanted to do something as close as possible, you could add a resource filter in startup code that would return information about what action was chosen (this is pretty similar to what our test code does. \npublic class RoutingDataFilter : IResourceFilter\n{\n    public void OnResourceExecuting(ResourceExecutingContext context)\n    {\n        // get data into a format you like from context.RouteData.Values and context.ActionDescriptor\n        var data = ...\n        context.Result = new ObjectResult(data);\n    }\n}\nTo the second, I'm not sure what you mean exactly. These are normal action methods that return data, the JsonFormatter is writing it out.\nThirdly, these tests are written as client-server test. If you do a build in our repo you'll see them run on your box, but we have done the exercise of running them on a remote server - something we're ramping up as we get close to a v1 release. This isn't meant to be a pattern specifically for routing testing, it's across all of our functional/integration testing.\n. Hi @aanufriyev we made this change recently as part of a change to when controllers are instantiated and disposed. This is something we might consider adding back if it impacts some significant scenarios.\nWe've also anticipated scenarios like yours and have a few alternative ways of accomplishing that.  Would you mind sharing some sample code with us? If you can give me an example I want to take a crack at simplifying it based on the MVC 6 model for filters and get your feedback.\n. Thanks.  Here's what I'd suggest trying.\nThis is based on a new pattern that we have in vNext to place arbitrary metadata in filters. So, an IFilter might be something that acts (like IExceptionFilter) or it might just be data (ExceptionMappingAttribute). \nThe advantage of this is that it's scoped, so you can have a mapping apply globally, to just the controller, or to an action. It's also not coupled to a particular controller, so you can use the mappings and filters independent of the controller type.\nIt's also possible now to do DI in filters directly (see TypeFilterAttribute), so you don't need to reach into the controller and get its services.\n```\nprivate class ExceptionMappingAttribute : IFilter\n{\n    public ExceptionMappingAttribute(Type exceptionType, HttpStatusCode statusCode)\n    {\n        ExceptionType = exceptionType;\n        StatusCode = statusCode;\n    }\npublic Type ExceptionType { get; }\npublic HttpStatusCode StatusCode { get; }\n\n}\nprivate class MapExceptionsAttribute : Attribute, IExceptionFilter\n{\n    public void OnException(ExceptionContext context)\n    {\n        // Could also build a lookup table if desired\n        var mappings = context.Filters.OfType();\n        foreach (var mapping in mappings)\n        {\n            if (mapping.ExceptionType == context.Exception.GetType())\n            {\n                context.Result = new HttpStatusCodeResult((int)mapping.StatusCode);\n                return;\n            }\n        }\n    }\n}\n[ExceptionMapping(typeof(ScimResourceConstraintException), HttpStatusCode.PreconditionFailed)]\n[ExceptionMapping(typeof(ScimResourceNotFoundException), HttpStatusCode.NotFound)]\npublic class FooController : Controller\n{\n    [ExceptionMapping(typeof(InvalidScimOperationException), HttpStatusCode.BadRequest)]\n    [ExceptionMapping(typeof(ScimResourceConflictException), HttpStatusCode.Conflict)]\n    public void FooAction()\n    {\n    }\n}\n\nservices.ConfigureMvc(options =>\n{\n    options.Filters.Add(new ExceptionMappingAttribute(\n        typeof(NotImplementedException), \n        HttpStatusCode.NotImplemented));\n    options.Filters.Add(new MapExceptionsAttribute());\n// or if you need DI in your filter\noptions.Filters.Add(new TypeFilterAttribute(typeof(MapExceptionsAttribute)));\n\n});\n```\nLet me know what you think.. Is this an improvement?\n. /cc @loudej \n. Keep in mind that doing it this way works with inheritance and scoping, there's no need to duplicate. So the exception mappings on an action include those on:\n1). The action directly\n2). The controller\n3). Inherited from a base controller\n4). Registered in startup (options.Filters)\nIf your exception mappings are consistent you can register them all during startup. If you want to treat the same exception differently in different scopes/controllers this supports that.\n. > In old case - controller was owner of knowledge about it own exception mappings.\nI'm not really sure what you mean - you can put the [ExceptionMapping(...)] wherever it is meaningful. If you put [ExceptionMapping(typeof(FooException)...] on a controller, then it only applies to the actions in that controller.\nSame thing with [MapExceptions]. You don't have to register it in options.Filters -- it could go on a controller/action/controller-base-class, whatever you think is appropriate. If you only use this feature in general for certain controllers, then just add the filter there.\nIf you want to simplify things further you could do something like this, and you won't need [MapExceptions] at all. \n```\nprivate class ExceptionMappingAttribute : IExceptionFilter\n{\n    public ExceptionMappingAttribute(Type exceptionType, HttpStatusCode statusCode)\n    {\n        ExceptionType = exceptionType;\n        StatusCode = statusCode;\n    }\npublic Type ExceptionType { get; }\npublic HttpStatusCode StatusCode { get; }\n\npublic void OnException(ExceptionContext context)\n{\n    if (ExceptionType == context.Exception.GetType())\n    {\n        context.Result = new HttpStatusCodeResult((int)StatusCode);\n        return;\n    }\n}\n\n}\n```\n. No worries and thanks for your feedback. We still may bring back the ability to see the controller in exception filters, just gathering info for now.\n. :shipit: \n. :shipit: \n. /cc @dougbu \nStart with IModelMetadataProvider/DefaultMetadata\n. @dougbu  @harshgMSFT \nSome updates here - renames are in. Working on docs.\n. @dougbu @harshgMSFT updated\n. @dougbu @harshgMSFT updated\n. Hi Steven,\nMVC 6 by-default doesn't have a feature like WebAPI action overloading - additionally all action parameters are by-default optional. The 'MVC' way to build this would be just use one action with int? parameters and decide to page or not inside the action.\nIf you're not enamored with this idea we have some other options. We've a built a compatibility shim for porting WebAPI applications, which would restore the WebAPI 2 behavior. See  https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.WebApiCompatShim/ApiController.cs\nIf you're curious about the shim, this is all built on top of the new IActionConstraint api, which can let create your own type of semantics for disambiguating between actions. For an example, this is how we do overloading in the shim: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.WebApiCompatShim/OverloadActionConstraint.cs\nYou could also build something (using the above as a sample) much simpler than this that meets your needs. The above is intended to be exactly compatible with WebAPI2 (including all of its quirks). IActionConstraint can be implemented by an Attribute class and added directly to an action or controller.\n. :shipit: from me after fixing issues - as I will be traveling and probably not have a chance to look again. Please have @Eilon sign off as well. \nThere's another discussion we need to have about the impact of TempData on testability. We did a pass recently to enable unit testing when using most of the 'standard' features of MVC's built in Controller. Might want to just add a unit test that sets/gets data from temp-data to prove that it can be done in a unit test.\n. FYI if you find that you need to disable the filewatcher you may run into issues with timing when updating a .cshtml while the site is running. This is primarily what we're using it for. \n@pranavkm in case he has thoughts\n. Suggested name BoundProperties BindableProperties etc.\n. :watch: the overall approach seems good. I was pleased that the ApiExplorer piece was so simple. Haven't looked through tests in detail and I don't think I will get a chance before leaving town.\nI think there's going to be issues rebasing on top of my recent MM changes that we need to design/resolve.\n. :watch: looks mostly on track\n. :shipit: \n. A ViewComponent is not a public endpoint - it's exactly what you said \"a reusable component which can be displayed on different pages\". It's not reachable from via any URL or route, it's only part of the pages where you include\nIf you used a ViewComponent for a login form, then have it post to your login controller and if validation fails, redirect to a login page that can display errors. You might want a bespoke action anyway for a failed login to include things like a password reset.\n. Does this remove the ability to inject services from configuration? If so that will break almost all of the MVC functional tests.\n. :watch: \n. > I add \"id\" in the name of the html generated with the web development toolbox of firefox, no problem, the FromForm hydrate the entity.\nDoes the submission work correctly if you remove [FromForm]? What if you do [FromForm(Name = \"\")] (explicitly empty name).\nTo explain: traditional model binding does a pass where it tries first using the parameter name as the binding prefix - id[0].AddressableId, id[0].Content, etc.... If no result is found then it tries again with the the empty string as prefix - [0].AddressableId, [0].Content, etc.... When using an attribute like [FromForm(...)] it looks like it's requiring the parameter name as-prefix unless told otherwise.\n/cc @harshgMSFT \n. @branciat is [FromForm] missing from beta3 or just the Name =?.\nIf the former, subclass FromFormAttribute and implement IModelNameProvider. If the latter, just ModelBinderAttribute - you won't be able to restrict model binding to form-data, but this will allow you to set a name.\n. /cc @GrabYourPitchforks \n. :shipit: \n. @ianhong is this merged?\n. The tradeoff here seems to be that this code is going to execute for every instance of the taghelper used. Do you anticipate any cases where data used here is going to come non-trivial code? (Db, Configuration). This is much more pay-for-play than our other options-ey things.\nWhat's interesting here is access to the view context this becomes much more like a filter.\n. this has been fixed now.\n. :shipit: \n. :watch: \n. :shipit: \n. Closing this because we've done some parts of the plan discussed above and that's our resting place for beta-5. By no means do I want to stop the discussion here or avoid discussion of the changes we did decide to make.\nSee a general announcement here: https://github.com/aspnet/Announcements/issues/28\nTLDR summary:\n- @inject is staying as is, we're happy with it and the community feedback is positive\n- [Activate] is gone - we'd rather plug in a 3rd party DI for users who want property injection. There's a consistency issue with MVC providing this and other parts of Asp.Net which don't.\n- [FromServices] is staying as-is for beta-5. The product team is in agreement with some of the criticisms in this thread, we'll be thinking about it more.\nSee commits: \n92dbd8923b3adc22777b7a0a0e767e8997faf62d\nb393191cff77553fdd3635ff4d38695b40318058\naf5322e2ce295c9156e8422fbdfec0327b1cdb85\n144c1d3cf440506be6bca9f7fb2f1080d82828bb\n. :shipit: after addressing minor feedback. Let's review the docs quickly once updated.\n. This seems better, and doesn't require hard to understand settings on options. @harshgMSFT thoughts?\n. :watch: \n. Places where we (mistakenly) put validation attributes on parameters:\nModelBindingWebSite/Controllers/VehicleController.cs\nValidationWebSite\\Controllers\\ModelMetadataTypeAttributeController.cs\n. :watch: hopefully for the last time\n. :shipit: WITH GUSTO!\n. :shipit: \n. Added docs for the stuff I'm adding and also some namespace cleanup. I tried to be generous with adding docs but there's a TON of VC stuff that needs it. I don't want to spend more time on docs/cleanup in this PR unless it's for the new stuff.\n. Thanks for taking a look. I don't like any of your naming suggestions :stuck_out_tongue_winking_eye: \nYou're the only person I've run into saying that we use [NotNull] on constructor parameters. I've always wanted to do that and repeatedly been told that I'm not allowed.\n. @NTaylorMullen updated\n. > it's rare but we do use this attribute in at least the HtmlHelper, DefaultHtmlGenerator, and ControllerActionDescriptorProvider constructors.\nThis isn't a discussion for this PR, it's a discussion for the eng. team. There will be cleanup pass as part of API review.\n. @dougbu updated\n. @dougbu  updated\n. Hi Marcus, follow up question.. if you take the value from await session.LoadAsync<dynamic>(\"pages/1\"); and manually convert it to an instance of Foo in your custom route does that solve the problem?\nI'm trying to figure out if there's some conversion code that we're missing or if there's something else broken when using route data.\n. @marcuslindblom - the code that we're using to do the conversion here (between route values and the model) hasn't changed between versions.\nCan you share a complete sample of this working on an earlier version of MVC?\n. @marcuslindblom - sorry for the delay, I got some time to look at this today.\nEven though your await session.LoadAsync<dynamic>(...) is typed dynamic in the repro you gave me, it's returning a Foo which happens to be an exact match of your parameter type. \n\nThis is the critical factor for whether or not model binding will match it up with your parameter, I expected, MVC doesn't have any sort of special conversion code to turn an arbitrary dynamic object into something else, it requires the value to be assignable (or have a conversion via TypeConverter).\nSo based on the information that you've given us so far, I can't find any missing features here in MVC6 that are blocking this. Is it possible that the MVC6 code for your route is returning something not assignable to the parameter type? \nI'll second what Yishai said, in my opinion the best way to do this is to write an IModelBinder that can look at the route data or value providers. The biggest benefits are that inside a model binder you can see the parameter type, so you know what to convert to, and you can also add validation errors if that's meaningful in your scenario.\n. :shipit:  after fixing minor comments\n. :shipit: \n. :shipit: 4 is a party\n. There's no raisin bran emoji, or I would use it here. If you're not convinced about the null thing lets dicuss that and the model state piece tomorrow first thing. I think in terms of cleanliness and test coverage otherwise this is ready to go.\n. :shipit: \n. :watch: \n. :shipit: after adding back test and making docs tweaks\n. If you're game I'd like to propose a moratorium on new names for this PR. We have several more concepts that we should take a look at that aren't changing in this PR (IClientModelValidator, IObjectModelValidator and all the associated providers and contexts). \nI think your suggestions are where we're going to end up for these classes, but I'd rather us look at the bigger picture before making that conclusion.\nThe stuff that's here is consistent with the current names.\n. WOrking on removing the design tag.\n. @dougbu updated.\nThe namespace changes had a cascading effect, but I'd rather us just get this over with than do it halfsies.\n. @harshgMSFT updated\n. This has too many commits. :cry:  I don't think it's going to show what you intended it to show.\n. @Samvrie the simplest way would be to subclass ValidationAttribute. Nothing much should have changed here so any public docs you find for DataAnnotations should be valid for creating your own.\n. @borgdylan Have some controller code to share? Is this on mono?\nRelevant code is here: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Metadata/ModelAttributes.cs#L31\nGetCustomAttributes() is documented to return an empty collection, but it looks like it may be returning null.\nTry adding a do-nothing attribute to the parameter as a workaround.\n. @harshgMSFT is working on some changes to the design in this area, and ModelAttributes.GetAttributesForParameter will be going away.\nHowever it sounds like mono broke ParameterInfo.GetCustomAttributes() which is going to cause all kinds of havoc. Are you running on newest MVC bits or beta3?\n. @borgdylan thanks!\n. :watch: cleanup is looking better!\n. :watch: getting there\n. :shipit: after fixing small comments\n. :watch: \n. :watch: \n. :shipit: \n. :shipit: \n. :shipit: from me if @NTaylorMullen is happy\n. :shipit: after fixing minor comments\n. Would there already be a test for this or do we need to add one?\n. Thanks Kevin! Sounds like we have nothing to do here.\n. :shipit: \n. :shipit: please wait until coherence is clean. We don't want to inhibit someone else' ability to fix things.\n. Looks to be on the right track. I have some idea about how to clean up the cachability of this, but it can wait until later.\n. > @rynowak any objection to the last commit I added (USE_REAL_RESOURCES)?\nNo objection, I just don't see what it fixes. We're testing that we call the correct overload of DisplayAttribute so it will use reflection to call a static property on a static class. It seems super-insignificant to me what that static property does for the purposes of the test (we mock things constantly).\nI also don't see why/how we'd enable USE_REAL_RESOURCES as a define in the future. Basically IMO this just creates more ceremony on something we'd do 100% of the way in a perfect world. Due to limitations in our tests, we went 95% and to me that's good enough.\nIf you feel like this is worth it go ahead. :shipit: from me on the changes that actually related to the enum feature.\n. @dougbu :ok_hand: if you think it's better got for it!\n. :shipit: \n. :shipit: for re-enabling these. \nCan you please log/link bug a for the issue that's block CheckIfObjectIsDeserializedWithoutErrors. I want to make sure that we have something in face that tracks it.\n. Please open a bug in our repo explaining what's broken and link to the TFS bug. We can't point users to TFS bugs, and they aren't actionable for our team\n. :watch: \n. :shipit:  after adding a check for trailing slash\n. :watch: \n. :watch: Tests look good, I have a few small comments about the implementation.\n. :shipit: \n. /cc @dougbu \n. Hitting the pause button here. Making validation respect our ModelMetadata.IsRequired property might cause some trouble. Will have a discussion and come up with another PR.\n. :watch: looks mostly good, I had a few small questions\n. :shipit: consider me signed off after fixing the things you agreed to fix.\n. /cc @dougbu \n. @dougbu ping\n. 784021cf85f695d52479634afd8108bd5862ee07\n. I took a look through this and saw nothing that surprised me, just some refactoring. So a very weak :shipit: from me. Probably want to have someone more familiar than me look if possible.\n. I like the idea of it, I really don't like the idea of making changes here until we've got confidence that we're enforcing the right behavior with our tests. For one we lose the ability to do comparisons between our code and the original.\nSpeaking to the PR itself, it's super clean.\n. Would be good to also review https://aspnet.codeplex.com/downloads/get/110748 for any interesting tidbits.\n. /cc @harshgMSFT - this is for the next milestone. Got a chance to go profiling here finally. We probably want to go further, but this stops it from being a mess for now.\n. Any other feedback or is this gtg after removing checked? (Not that I'm in a hurry, going to wait for branching to complete first)\n. @harshgMSFT and I spent some time debugging this, the reason is that the entries for DerivedController::Action and BaseController::Action each end up defining the route base/Action.\n. 46db71cfceae350564135ecd2a810660e70a7c42\n8a476b5\n. @dougbu solid :shipit: once we get the all-clear.\n. @Eilon @danroth27 this is something we wanted to do in a follow up to the MMP changes and didn't quite get to yet. There's a few more places to cleanup also beyond the setter in modelbinding.\n. acb657d9511a88eb329fd5c87adf5dc469feb267\n. No, we didn't change this behavior as part of #2151. It does exactly what it did before with the new attributes like [ActionContext]\n. @NTaylorMullen please include sample code of the controller/action and the jsonpatch document being sent to the server so we can verify.\n@kirthik - there may be an issue with the detection for 'is this an array or a string'... \n. :shipit: :shipit: :shipit: \n. We can't do this until IHttpContextAccessor moves to interfaces. /cc @HaoK \n. c6a1af97b0fffaf04ddf04018e3689a54bbd33e8\n. Note we now have a dependency on M.F.Logging that should be M.F.Logging.Interfaces @kichalla will have to clean this up as part of logging work, because we use some classes in logging currently.\n. 6caa2871aab56c919be5ecb703a65e0cd3bf1626\n. @tuespetre by catch-all route, do you mean that you want every url coming into your app to be routed to Home::Index? I'd expect what you have there to work fine. \nCan you link to a more complete sample or else post your complete startup and controller code here so we can get to the bottom of this?\n. @tuespetre - Glad you found a solution.\nRouting is either one or the other. If you use attribute routes, then those actions are not reachable via conventional routes defined in startup and vice-versa.\nIf you did it like this instead:\npublic class HomeController\n{\n    [Route(\"{*url}\")]\n    public IActionResult Index(string url)\n    {\n    }\n}\nIt would have the same effect and you don't need the route in startup.\n. 70b56f157cc225b0c3668263189404068ad60eb9\n. > Logging.Interfaces\n\nKiran is working on removing the dependency on logging, but for now we still use it. We were getting it through the reference to Hosting before.\n\nL2ReadBro\n. Any other useful feedback? All the logging stuff we did earlier depends on classes in .Logging, and it's already in progress being redone.\n. https://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/ReflectionBasedLogValues.cs\nhttps://github.com/aspnet/Logging/blob/dev/src/Microsoft.Framework.Logging/LoggerFactory.cs\nI know because I tried it.\n. > MVC uses LoggerFactory in Core? Something is terribly wrong there.\nYep. I just found that. It's being used to log something that we're going to remove as part of logging cleanup so that will go away too.\n. The change in general looks right, let's cleanup the grammar a bit. :watch: \n. :watch: for a few more small things\n. :shipit: after fixing spacing. \nIs there an easy to test the \"The document was invalid and ...\" message? I didn't notice a test for it. Can you add something if it's reasonably possible to add in a test.\n. > This looks like a unfortunate side effect of using model binding to do property injection. \nSeems like it would be easy enough to just not record an entry in model state. BindingSources are classified as 'from user input' or 'not from user input' so we always know.\n. We opted when building this class to just make it as simple as possible. My suggestion is to just remove it, it's not really clear that there's a good usage scenario here. \nIf you want to just emit some JSON, using ContentViewComponentResult is pretty simple, and doesn't require us to bring in formatters.\n. Example callstack? ModelMetadata? The code you provided is not common.\n. This is a really gigantic PR, is it possible to break up at this point?\n. :shipit: \n. @pranavkm we're going to do something about the layering here as part of the current milestone. There's a few bugs already tracking it. \n\nA possible scenario is where users might want to deserialize the request stream before model binding stage, example authorization or resource filters, in which case ModelBindingContext would not be available..\n\n@kichalla we should more or less consider our guidance about what to do in various filter stages to be prescriptive. If it becomes hard to do something that we never intended you to do, then that's alright.\nThat said, I don't see InputFormatter having its own context as a problem to be solved. The layering problems related to the current state of all of this should be addressed.\n. The other issue here is that InputFormatters need ModelState - and not just ActionContext.ModelState - that breaks scenarios where you manually call model binding.\nFormatters are intentionally a bit more constrained than a model binder, and they really don't need everything. They don't need the action, if you want to make per-action decisions then use resource filters.\nProposal:\n```\npublic class InputFormatterContext\n{\n        public HttpContext HttpContext { get; }\n    public ModelStateDictionary ModelState { get; }\n\n    public Type ModelType { get; }\n\n}\npublic class OutputFormatterContext\n{\n        public object Object { get; set; }\n    public Type DeclaredType { get; set; }\n\n    public HttpContext HttpContext { get; set; }\n\n    public Encoding SelectedEncoding { get; set; }\n\n    public MediaTypeHeaderValue SelectedContentType { get; set; }\n\n    public int? StatusCode { get; set; }\n\n    public bool? FailedContentNegotiation { get; set; }\n\n}\n```\n. 39fe063\n. :watch: code seems fine, this will have to get rebased on top of pranav's changes of course.\nLet's discuss the scenario where a resource filter short-circuits.\n. :shipit: \n. Please update https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/ModelMetadata.cs#L255 to cache the result, that's the point of the bug :laughing: \nModelMetadata instance are cached, so doing it in a private field is fine.\n. :shipit: \n. :watch: for tests\n. :shipit: \n. :watch: \n. :heart_eyes: \n. :shipit: \n. :shipit: \n. :watch: - it's a good start. \n. :watch: design looks :100: - ready for minor fixes and tests\n. :shipit: \n. This bug is/was stale and this was already added to the modeling binding code: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/DefaultControllerActionArgumentBinder.cs#L92\nDefaultControllerActionArgumentBinder is a better place to do this re: separation of concerns anyway. We already have a reasonable default for ModelState.MaxModelErrors so a user would have to work hard to avoid this.\nSuggest just removing the code from MvcRouteHandler. \n. @harshgMSFT - That sounds like a reasonable reason - it just kinda conflicts with options in the first place. Why provide this obscure setting in options if it's possible to change in a filter? Why provide the ability to change it in a filter if it's part of options?  Anyone relying on this setting being a precise tool to optimise around is doing something bizzare. I think the change is fine, let's just double check that we're only doing this one place in code :+1: \n@Eilon invokers are created per-request from a factory - the factory is DI-ed and that's the one mediating between options and the ModelState\n. :watch: \n. :shipit: \n. :shipit: \n. :shipit: \n. Nope. ApiExplorer uses the IActionDescriptorCollectionProvider to get it's data (as does attribute routing). IActionDescriptorCollectionProvider has always been lazy, this just takes advantage of that.\n. @domaindrivendev \nIn that case, what we recommend for the app developer is that you use the attributes to specify precisely what you mean.\nDue to compat with MVC's ability to handle form posts, model binding always tries first to use the parameter name as a prefix and then again with the empty string as a prefix.\nSo for the example in the bug:\n```\npublic User GetUserWithComplexParameters(\n    [FromQuery] GetUserRequest getUserRequest,\n    [FromQuery] GetUserAdditionalRequest getUserAdditionalRequest)\npublic class GetUserRequest\n{\n    public string AdditionalField { get; set; }\n}\npublic class GetUserAdditionalRequest\n{\n    public string AdditionalField { get; set; }\n}\n```\nThere are three equally valid ways to set AdditionalField to a distinct value on both models. \n?getUserRequest.AdditionalField=foo&AdditionalField=bar\n?AdditionalField=foo&getUserAdditionalRequest.AdditionalField=bar\n?getUserRequest.AdditionalField=foo&getUserAdditionalRequest.AdditionalField=bar\nThis is great for MVC/browser scenarios, but for an API it's better to be precise. Many users don't realize that all of these are valid, and the risk is that an innocent-looking refactor will break existing clients.\nFor that reason we recommend that you be explict when defining an API about the behavior re:prefixes\npublic User GetUserWithComplexParameters(\n    [FromQuery(Name = \"\")] GetUserRequest getUserRequest,\n    [FromQuery(Name = \"getUserAdditionalRequest\")] GetUserAdditionalRequest getUserAdditionalRequest)\n. I'm not 100% sure that this guidance is relevant for a WebAPI 2 user, but this case is something we definitely want to support precision on in the next release.\n. 0f6b2331ce360f03ad16aafcd3bb69ad52a265f8\n. :shipit: \n. 7767251dad61beba3e9d789e3cbffc1bd3357c35\n. /cc @dougbu \n. :watch: \n. We could really just make the settings part of MVC options if we want to. This is one of the more frequently touched knobs and that's about as front and centre as we can put it.\n. There's an interesting parallel developing here with: \n[JsonIgnore] <-> [BindNever]\n[JsonRequired] <-> [BindRequired]\nJsonPropertyAttribute et al definitely do more than our BindingBehaviorAttributes, but I'm wondering if we can avoid having to double up on attributes if you use a model sometimes for JSON and sometimes for a form post.\nMaybe the default contract resolver is good enough for most and we ship a sample or in the box contract resolver that can respect our attributes (or an MMP that can respect Json.net's attributes). The MMP route seems a little more consistent with what we do already - ModelMetadata knows about and respects [DataContract(IsRequired = true)]\n. ~~@kichalla can we swap our dependency to ...Logging.Interfaces now?~~\nI see that you did that! 15.9 #FowlarPoints awarded.\n. :shipit: \n. /cc @dougbu \n. @dougbu updated\n. :shipit: \n. Where are the perf numbers?\n. Closing per discussion at standup, we're going a different way with this change.\n. :watch: comments and test improvements are awesome! :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: \n. :shipit: \n. See also #1712 which deals with BindingBehaviorAttribute.\n. Part of this is  fa56df9\n. Part 2: b64fd7ae39e27637ece40257dfdc5a3873299506\n. The initial hope with this feature was that the HTTP Context would give us a way to tell if the status code had been set, and that was never added.\n. In general the reason for the difference is what back-compat/legacy story each of these has. That's not to say we shouldn't consider improvements, but FileResult and ContentResult are more related to MVC 5, which didn't have a strongly-typed class for content-types.\n. @dougbu @harshgMSFT updated\n. @dougbu updated - added tests\n. We should also consider just removing this code. \nSee: https://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute%28v=vs.110%29.aspx\nA DefaultValueAttribute will not cause a member to be automatically initialized with the attribute's value.\nYou must set the initial value in your code.\n. Legacy info: \nMVC5 and WebAPI2 respected [DefaultValue(...)] applied to a parameter of an action method.\nMVC futures and WebAPI2 respected [DefaultValue(...)] for binding model properties.\n. > Remove DefaultValue support from model binding and do it only in the invoker for action parameters.\nDoes this include bound-controller-properties? This affects the shape of the implementation.\nIs the goal to limit the spread of a feature that we need for compat? Or to be consistent?\n. The interesting thing about doing it on both properties/parameters is that the implementation concerns would probably dictate that it be first-class at that point -- ParameterModel, ParameterDescriptor, customizing via convention, etc. \nSeems to me like that's a bit overkill, will just do it at a low-level for now and just for parameters :+1:\n. Part 1 checked in: 2fc983b23af5515cd1b4a32c47ea8203be92dddf\n. Part 2 checked in: cc4ee1068de55a0948c35f5a87f6c05907cb8461\n. Don't undo it now, but my advice in the future would be to send 2 PRs for this. The T -> TModel change is mechanical and could be reviewed by someone in 30 seconds if it's the only thing in the PR.\n. :shipit: \n. https://github.com/aspnet/Mvc/commit/8bae02928d9828205f79edcd8fcd2ab90ab1eb0e\n. :watch: Good start, I think it can be cleaned up a bit more, but this is what I had in mind.\n. :shipit: after fixing spacing\n. :shipit: conditionally - can you please try one thing - add a testscase which uses an unknown token in the route name, and verify that the error message makes sense.\nIf the error message doesn't make sense, let's fix that too.\n. Yep. Seems Ok.\n. :shipit: \n. :watch: \n. :shipit: after cleaning up spacing\n. :shipit: \n. @vncastanheira\nCalling View() doesn't actually execute the view - it just instantiates a ViewResult with the data necessary to find it later. The actual view execution will take place later and already is async. \nTake a look here: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/FilterActionInvoker.cs\nThe action returns an IActionResult instance, which will be executed later (surrounded by result filters).\n. yes, you can safely do async work in a view regardless of how your action is declared\n. :shipit: from me\n/cc @domaindrivendev - notice the namespace changes here.\n. 88ac4b94e451441da2a03c9f2f5a3c54b73f45cf\n. :shipit: \n. :watch: \n. :shipit: \n. :shipit: \n. This is also true of byte[] model binder. There are numerous cases where it doesn't handle a model of byte[].\n. :shipit: \n. /cc @harshgMSFT \n. > :shipit: after addressing comment.\nPlease be a gentleman and merge your changes so I can rebase on top :+1: \n. We actually already have code sitting around for a stream implementation that wraps a stream and prevents disposal. That would avoid creating the extra copy.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Internal/NonDisposableStream.cs\n. It's the ToArray() to create the buffer that makes a copy.\nThis might be irrelevant anyway, would this be accessed concurrently or re-entrantly? If that's the case what you're doing is necessary.\n. 88ac4b94e451441da2a03c9f2f5a3c54b73f45cf\n. :shipit: after adding one more test for byte-array\n. @harshgMSFT will rebase on top of your changes after they are merged.\n. Very likely fixed as part of 22f1881cc641c390773783ba5a982e63a3b91464 - this no longer repros.\nEnabled tests in 6e1226bfe46f75c894dfc162dc77435f0dbef208\n. :shipit: \n. /cc @harshgMSFT \n. > One thing that I missed commenting on : Should we add a test case for each category which is \n\nPOCO>POCO, where the nested POCO gets created because all properties are bound from a greedy model binder?\n\nSure, I'll add one.\n. This is a design change - [Activate] is for context items like ActionContext. Use [FromServices] in a controller to access a service (or take it as a constructor parameter).\nWe have some changes planned for the current milestone to make this consistent across taghelpers/controllers\n. [FromServices] on a controller property is expected to work in beta4 - is it a public get/set property?\n. :shipit: \n. There's a few others that are multi-service. I'll take a look.\n. Also take a look at the webapi compat shim project.\n. :shipit: \n. /cc @harshgMSFT \n. In the JIRA example - ConnectDescriptor also declares properties for all of the data members that are initialized: https://bitbucket.org/atlassian/atlassian-connect-.net/src/e4c5c85e7c2f578859843f7553b141a9c9c7590d/Atlassian.Connect/ConnectDescriptor.cs?at=master\n~~This behavior is part of JSON.Net, and I'm not aware of any changes to it between the version we use in 5.2 and the version we use in 6.0.~~\nIf you run your code sample in MVC 5 what is the result?\n. @TravisTheTechie \nDigging a little bit deeper here, I was wrong about this. This code goes through JavascriptSerializer in  MVC 5.0 which we're not planning on bringing forward. \nJSON.Net does have different behavior in this regard: See section on Dynamic http://www.newtonsoft.com/json/help/html/SerializationGuide.htm It looks like you can configure the behavior you want using attributes or a custom contract resolver.\n. /cc @Eilon \n. /cc @harshgMSFT \n. :shipit: after fixing typo\n. You can do this by building a convention: https://github.com/aspnet/Entropy/tree/dev/samples/Mvc.CustomRoutingConvention\nYou can either register the convention using options or turn it into an attribute and put it on your controllers/actions.\n. Very cool stuff. I'm currently reading and digesting your post. \nWhether or not to provide a higher-level routing experience in the box was a subject of much debate on the team. What we have today is really just building blocks and is conceptually compatible with what a user coming from MVC5 or WebAPI2 would have used.\nThere's of course potential to define something better, and it's not for a lack of trying on the team that we haven't yet :laughing: \n. BTW we do have activation of services in action arguments with [FromService]. It also works on Controller properties as well as properties of DTOs/ViewModels.\n. You'll find (contrived) examples if you look at the functional tests, my guess is https://github.com/aspnet/Mvc/tree/dev/test/WebSites/ModelBindingWebSite\n. :shipit: - trusting you that the resource -> resources change doesn't require any accompanying code changes.\n. :shipit: \nSorry, thought I had made this change. I guess I failed to hit save all before commiting. Thanks for the cleaning.\n. I'd want to have @eilon 's ok, but to me anything that's blocking developer workflow needs to be addressed.\nAre you seeing any issues other than errors in VS?\n. @dougbu should this be closed?\n. :laughing: \n. In his example there is not such route as ProductsApi. Adding a suffix at the action level makes it a new route and the name is not applied. Think about how this would work if it didn't do that :laughing:  almost every controller with a named route would end up having ambiguity.\n. /cc @domaindrivendev - this is the design change we discussed for parameters.\n. @dougbu should this be closed?\n. @mrchief - take a look here at: https://github.com/aspnet/Mvc/tree/dev/src/Microsoft.AspNet.Mvc.Core/ModelBinding/Validation (everything with 'client' in the name).\nYou can replace/add your own IClientModelValidatorProvider or IClientModelValidator implementations. That however is still based on the code in UnobtrusiveValidationAttributesGenerator which ultimately writes out the HTML, so if that's tripping you up, then we'd need to do more.\nWould what we have today be sufficient for your needs? What part of the behavior do you need to customize?\n. @mrchief - totally makes sense. Just wanted a little more clarity on what you were looking to customize :+1: \n. :watch: tests for TryUpdateModel look good.\n. Would be pretty easy for us to add. Should probably do because WebAPI had something similar:\nprotected internal JsonResult<T> Json<T>(T content, JsonSerializerSettings serializerSettings)\n. @henkmollema - we're pretty fully-bought into Json.Net at this point. You could use another serializer with MVC/WebAPI if you wanted to, but we don't plan to show an experience where Json.Net isn't a required dependency.\n. > In the main time, we need to pull the type converter dependency back into the abstractions library.\nWe need to take a look at slimming down MSD and VDD - right now there's a lot of code in these classes, but they're really just collections.\n. @davidfowl Assuming this was fixed by 5cec601abe968c8475bac7f3b6e7f48c154a6d63\n. We should just remove this instead, we have a better way of doing common/shared packages now for the things that are actually valuable.\n. > A design PR? Do you have an example of what one of those looks like.\nJust team-lingo for a PR demonstrating what APIs you'd add and how it would be used. IE - add a 'Json' property to RazorPage, add the new interface, add to MvcSample.Web sample showing usage.\n\nShould the JsonHelper methods return HtmlString\n\nHtmlString is one of the known types that Razor doesn't HTML-encode. If you return a regular string it will get encoded. \n. @dougbu - Your intuition is right, we're no longer supporting that on purpose. This feature very quickly becomes a pit of failure when you're try to leverage the 'inherit + add' semantics (removed by this change).\nIn the example that you give, assume that there's one action in each controller. You'd have a route A defined for both of them. You could use the name Inherited to generate a link - which would give you a 500 when you visit it....\nIf you really want to do something like this, you could still easily do it in a convention, which would give much more control.\n. This is a looking really good. :watch: for a few more tests for a different encoding\n. :shipit: once pranav is happy\n. :shipit: \n. @NTaylorMullen can elaborate further, but didn't we make a change to have taghelpers ignore data- attributes completely? \nMy guess is that this is fixed in current beta5 builds and that this is a manifestation of aspnet/razor#342\n. @mrchief - the new extensibility model is based on adding your own provider to a list, not based on subclassing or replacing a provider. Providers run in the order you put them in (in options) and each one can see and modify the results of the previous providers.\nThink of DefaultModelMetadataProvider as the factory for DefaultModelMetadata - subclassing it allows you to change what class is returned. I wouldn't recommend that approach for what you're tying to do.\nIf you do what @dougbu is suggesting - implement IDisplayMetadataProvider - add it to options. Then your provider will run after the DataAnnotationsMetadataProvider. You can make you modifications to DisplayName without impacting anything else that DataAnnotationsMetadataProvider normally does.\n. Cool, this is exactly the kind of scenario that new extensibility was intended to support, so we're glad to see that it helps you.\n. /cc @jamesnk\n. :watch: \n. > This PR does not bring back some aspects of ModelValidationNode like Validated and Validating events. (we can add that if we ever find a user scenario for it).\n:+1: for leaving this out. Eventing in a system like this is clumsy. It would be better solved another way\n. :watch: for some small comments, looking pretty close to done from my point of view.\n. :shipit: \n. This should probably be generalized to 'do a find and replace for non-disposable stream'. There's a bunch of functional tests where the old pattern was used, and we want as much as is feasible our tests to reflect our recommendation for a user writing the code.\n. /cc @pranavkm \n. > Can you point to the bug? Doesnt this change decouple ModelState and Input/Output FormatterContext and not ModelState and ActionContext?\nOpened #2546\nYeah, you're right. I'll update the description. \n. /cc @harshgMSFT @kichalla \n. James already removed that for us https://github.com/aspnet/Mvc/commit/de630754bfcd4ba4017a64f74f30f144e1977e96\n. This is really an investigate/add-tests should be easy to do.\n. Did some investigating, and our existing tests verify this well-enough. This was fixed as part of 39fe063aeec41bec2d93eaea3cfcc66c2b8c493d\n. :shipit: \n. This is awesome :heart_eyes: :heart_eyes: :heart_eyes: \n:watch: for small comments\n. :shipit: from me after fixing small comments and making @dougbu happy\n. :shipit: from me\n. :shipit: \n. /cc @harshgMSFT or @pranavkm \n. :shipit: from me\n. /cc @dougbu @harshgMSFT \n. :shipit: \n. @harshgMSFT any more feedback on this?\n. /cc @blowdart\nIt was a design decision to only have Include this time, it's too easy to get it wrong with Exclude when you add properties to the model.\nIf you look at the implementation, it's now a customizable extensibility point:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/BindAttribute.cs\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Abstractions/ModelBinding/IPropertyBindingPredicateProvider.cs\nYou could implement your own policy that does something creative if Include by itself isn't sufficient. Here's an example that does Include using expression trees: https://github.com/aspnet/Mvc/blob/64e726d2b26422c5452475627e4afaba307edec3/test/WebSites/ModelBindingWebSite/Controllers/BindAttributeController.cs#L73\nWe'd still recommend as the most secure option, only using view models that expose just what you want to bind. If you can't use viewmodels or are porting a legacy then whitelisting (Include) is the next best thing.\n. @harshgMSFT any more hard-hitting feedback?\n. :watch: \n. :shipit: after fixing minor comments\n. Updated\n. Also added 2 tests for the case where [BindRequired] and [Required] play together.\n. Callstack?\n. 92dbd8923b3adc22777b7a0a0e767e8997faf62d\n. @dougbu updated with some unit tests\n. @dougbu Addressed most feedback, have one idea we should discuss.\n. Updated. Moved the model-creation down into the CollectionModelBinder classes.\n. yay. :heart_eyes: \nI'm going to go ahead and check in this fix when the build is clean, and time given tomorrow do your suggestion.\n. Updated - changed to defensive copy of ViewContext instead of a copy of just ViewData\n. /cc @NTaylorMullen \n. I've also noticed a few places that I missed here for converting [Activate] -> [ViewContextAttribute] (mostly in samples and other code that isn't verified). Will do a pass with CTRL+F when I update this.\n. Updated with docs on constructor and cleanup of properties/attributes\n. Updated with protected\n. /cc @pranavkm \n. How old is this build? ActionDescriptorValues and related logging code was removed a long while ago.\n. @darrelmiller thanks. I'll likely that we just had an undiscovered bug in the logging code that could be triggered when using the webapi conventions. Regardless, all of that logging code was removed. \n. Hi @CodingGorilla - product changes look good to me, but it would be great to see some tests that validate the new scenario supported by this change. \nCan you add a unit test to ResponseCacheFilterTest that will call OnActionExecuting after \"completing\" the cache profile? It would also be nice to see a functional test that does the same (ResponseCacheTest + ResponseCacheWebSite).\n. > I believe here what you are looking for is a functional test that sets up a ResponseCacheAttribute and provides it a CacheProfileName and then overrides one of the cache profile settings with a property on the attribute. Please let me know if I'm misunderstanding your request.\nExactly\n. Wow! Super thorough. :shipit: - I'll merge this tomorrow.\n. 70b56f157cc225b0c3668263189404068ad60eb9 merged thanks!\n. @anfomin can you share your code?\n. The other thing you can if you want this behavior is just customize ModelMetadata. That's a much easier task now than it was in previous versions.\nSample:\n```\npublic class MyBindingDetailsProvider : IBindingMetadataProvider\n{\n    public void GetBindingMetadata(BindingMetadataProviderContext context)\n    {\n        if (context.PropertyAttributes.OfType().Any())\n        {\n            context.BindingMetadata.IsBindingRequired = true;\n        }\n    }\n}\n// In startup.cs\noptions.ModelMetadataDetailsProviders.Add(new MyBindingDetailsProvider());\n```\nNow [Required] implies [BindRequired]\n. What Darrel is suggesting is great if you want a message handler that sees all requests coming in.\nIf instead you want to attach something like a 'handler' to a specific route that's also possible by implementing IRouter and putting it between the route and MVC. If you need a sample I could write one up for you - I'm not aware of an existing one that we have.\n. > I curious about what the differences in behaviour would be if you were to stick an IRouter in front of the MvcRouteHandler.\nThe difference in behavior depends on what your IRouter implementation does :laughing: \nA key difference between MVC6 and MVC5/WebAPI2 is there there is no difference in interface contract between a route and a handler - it's all IRouter. An IRouter implementation might delegate (TemplateRoute) or it might produce a response itself (MvcRouteHandler) - or it might do nothing - allowing another route to handle it.\nFor clarification (and posterity) the typical pipeline of an MVC 6 app will look like this:\n(Other Middleware) -> (Router Middleware) -> [Route Collection] -> [Template Route \"{controller}/{action}/{id?}] -> [MvcRouteHandler]\nAnything in (...) is middleware, and anything in [...] is an IRouter implementation. If you want to consider attribute routing, replace [Template Route ...] with the attribute route.\nWhen you do a app.UseMvc(routes => { ... }) we're basically setting up a default configuration for you. The routes parameter is getting an instance of IRouteBuilder and its DefaultHandler property will be set to an instance of MvcRouteHandler. Any calls to MapRoute(...) you make are going to instantiate a new TemplateRoute instance which will attempt to match the URL and then delegate to the DefaultHandler.\nSo if you do the following:\n```\napp.UseMvc(routes =>\n{\n    routes.DefaultHandler = new MyHandler(routes.DefaultHandler);\nroutes.MapRoute(...);\n\n}\n```\nThen you get something like the following (middleware omitted):\n[Route Collection] ->  [Template Route \"{controller}/{action}/{id?}] -> [MyHandler] -> [MvcRouteHandler]\n. /cc @davidfowl @DamianEdwards \n. In short, there's no real 'recommended way' because routing is an imperative system. The user can always do something to circumvent diagnostic tools :laughing: The problem isn't so much that these things are hard to figure out, it's that there are a lot of them to account for, and they are fairly common in older MVC codebases.\nFor this reason, our ApiExplorer/Swashbuckle implementation only supports Attribute Routes. It's far easier to predict what's happening and to be precise about how things are defined. We recommend that users write APIs this way going forward. If you haven't already, take a look at https://github.com/domaindrivendev/ahoy\n\nHere's an incomplete and imperfect sample that does something similar using a different approach: https://github.com/aspnet/Mvc/compare/route-list-sample?expand=1 I want to call our here a few things that are done/not-done and why those limitations exist.\nI didn't include the verbs/filters. Those are part of the ActionDescriptor and would be trivial to add in the output. \nI included actions that use attribute routing. It's trivial to know exactly what URL patterns work for those actions.\nFor actions that don't use attribute routing, I assume that they use conventional routing. I assume assume that the top-level route collection is the only router, and all TemplateRoute instances in the top-level collection are interesting for conventional routing. \nHere's a few ways that these assumptions could go wrong:\n- The user could have multiple router middleware - you can really only know about the one that handled the current request\n- The user might have implemented a custom IRouter\n- The user might have routes which don't apply to all actions - this is very common\nOlder versions of MVC didn't have attribute routing, so it was common to write a route like:\nroutes.MapRoute(\"Blog/Posts/{postId}\", new { controller = \"Blog\", action = \"ReadBlogPost\" });\nThis route really will only ever link to the BlogController#ReadBlogPost action, but my sample will list it for all of them.\n\nAn alternative approach would be to take each conventionally routed action and attempt to generate a link to it. You have data like the action/controller name from the ActionDescriptor - you'd have to generate fake data like an {id} parameter. This would give you one canonical URL per action, but it's only as realistic as your fake data is.\n. :shipit: \n. FYI only - merging once it builds clean\n. :shipit: \n. :watch: \n. :shipit: \n. :shipit: \n. @logikaljay a view component is neither in nor out of an area. The concept doesn't apply.\nWhat matters is that for view lookup, the view search paths are based on the calling view/action. So if a controller from an area is calling into a VC, then the area's search paths are used.\n. > As I understand it ViewComponents are a replacement for PartialView's (correct me if I am wrong)\nVCs are a simplified replacement for child actions (Html.Action(...)). Though they're not intended to do everything that child actions could do. Think of it as a partial view with a little bit of controller code attached.\n\nSo is there a way to force the search path?\n\nA VC has both a short name and a full name. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ViewComponents/ViewComponentConventions.cs\nTypically that would looks like this:\n```\nnamespace Contoso.Web\n{\n    public class TagCloudComponent : ViewComponent\n    {\n    }\n}\nFull Name: Contoso.Web.TagCloud\nShort Name: TagCloud\n```\nYou can pass a full or short name to any of the methods that call a VC.\n\nBasically I just need to be able to call \"PartialViews\" from inside an Area like we used to be able to do in MVC5 - Maybe I am going about this wrong and need to re-think my approach.\n\nIs the VC code actually different or is the view that's being rendered the only piece that's different?\n. ",
    "NTaylorMullen": "We're using the same version tags for The Host and for the Microsoft.AspNet.Razor so it'd be nice to rev the version requirements based on a passed in value.  Otherwise everytime we rev the versions to say something like 0.2-alpha-* we'll have to revisit every repository and modify the project.json's\n. Awesome, will do\n. Updated PR\n. Updated PR, all code review comments should have been corrected.\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. Updated PR\n. Updated PR\n. Good to get this in?\n. 1. We're gonna have to rename them Async I believe but that will come with a later commit.  The purpose behind this is compilation is asynchronous which requires the rest of the pipeline to be. (not bad if you ask me).\n2. We're now passing in a string error message which is the best of the approaches that were previously tried.\n. After talking with @dougbu rebased this guy to be 100% up-to-date.  @yishaigalatzer waiting for your sign off before getting this in.\n. Committed to dev.\n. Updated PR\n. Good to get this in?\n. Will have to end up rebasing this thing on dev in order for it to be 100% updated but by doing that it'd invalidate the PR so i'd have to open a second one (because it'd be a PR off of a different branch).\n. I can't force push the part 1 branch though, i have the same iissue there because it's rebased off of the inject.helpers branch, not dev.  If you don't mind me nuking your version of the inject.helpers branch and setting it to dev then that'll work.\n. After talking with @dougbu rebased this guy to be 100% up-to-date. \n. @dougbu Addressed your feedback.\n. :shipit:\n. Still waiting for some responses on code review comments but updated it for the meanwhile.\n. Updated PR to address all code review comments thus far.\n. :shipit:\n. :shipit:\n. Updated PR, waiting for signoff.\n. @yishaigalatzer am I good to get this in?\n. Getting this in: This has to be manually rebased onto dev, closing out the PR.\n. Going to work on DisplayFor and DisplayForModel but will hold off on sending out PR's for them until an initial code review is conducted on this.\n. Updated PR\n. [NotNull] on all extension methods (the IHTMLHelper part)\n. Updated PR, waiting for sign off\n. @yishaigalatzer am I good to get this in?\n. Getting this in: This has to be manually rebased onto dev, closing out the PR.\n. [NotNull] on all extension methods (the IHTMLHelper part)\n. Updated PR, waiting for sign off\n. @yishaigalatzer @Eilon am I good to get this in?\n. Getting this in: This has to be manually rebased onto dev, closing out the PR.\n. [NotNull] on all extension methods (the IHTMLHelper part)\n. Updated PR, waiting for sign off\n. @yishaigalatzer am I good to get this in?\n. Getting this in: This has to be manually rebased onto dev, closing out the PR.\n. Based on @dougbu 's comment here: https://github.com/aspnet/WebFx/pull/201#discussion_r11301220 it looks like I very much misunderstood what this PR should encompass.  Going to close this PR for now and revisit it once I'm back from vacation.  Thank you all for the PR comments I will perform those fixes.\n. Updated base PR comments, looking into tests.\nAlso, after talking to @yishaigalatzer I made app-relative paths react the same way as root relative paths (\"/foo/bar\") and modified the error messages for when views are not found to mention what type of files they are looking for (.cshtml).\n. Added tests\n. @yishaigalatzer this good to get in?\n. @dougbu updated\n. @yishaigalatzer this good to get in?\n. @yishaigalatzer Sooo i'm good to get this in right?\n. @Eilon Yes, this is fixed\n. Do we want to add this helper to controllers as well?  It used to be available in the old world.\n. :shipit:\n. :shipit:\n. Note: With this change if a user were to do an EditorFor template and provide a full path template name it would fail.  In the old world it used to fall back to default templates.\nI feel like this is ok and is better to throw early than have unintended behavior.\n. Updated PR\n. :shipit: \n. Checked in\n. The second link is no longer an empty task, ignoring that.  Looks like the first link is the only instance.\n. Closing for now due to discussions in the linked PR.\n. :shipit: \n. Closing the PR, can always revisit later\n. @Eilon @yishaigalatzer should I push this in today?\n. I good to get this in now?\n. I'll get it in on Monday\n. This is a routing issue.  Moved.\n. This is a routing issue.  Moved.\n. This was fixed by https://github.com/aspnet/Razor/commit/32f6f4df009efeefca4f2ac720efffcc3b5bacfd and is a duplicate of https://github.com/aspnet/Razor/issues/28\n. Add a test to verify that the line mappings are accurate.  You can see others that do this via the CSharpRazorCodeGeneratorTest.cs file.  That'll also include creating a test file for verification purposes.\n. :shipit: \n. This seems like a decently high impact issue as far as design time experience goes for Razer.  Should this be backlog?\n. Last I talked with @danroth27 / @yishaigalatzer they wanted this issue as an umbrella item for ALL TagHelper issues (not just the default tag helpers).  That being said, we should probably fill this issue out with useage details of TagHelpers so when this hits the release notes users have a useful issue to reference.\n. :shipit:\n. :+1:\n. This PR failed StyleCop validation as of commit dda2735b8b77806974bd5419c258c7aa556e1234.  See https://github.com/NTaylorMullen/Mvc/pull/2 for details on what failed.\n. This PR failed StyleCop validation as of commit ea0ec7dac2438ef19c6789375da8a31593613ba8.  See https://github.com/NTaylorMullen/Mvc/pull/3 for details on what failed.\n. This PR failed StyleCop validation as of commit 2c1f2340a74c21db398d47aeb6021123022b8ca6.  See https://github.com/NTaylorMullen/Mvc/pull/5 for details on what failed.\n. This PR failed StyleCop validation as of commit b49ea1ccc541bda0087eb257e29bf1f4a6fd881f.  See https://github.com/NTaylorMullen/Mvc/pull/7 for details on what failed.\n. Ignore this\n. Good to get this in?\n. This PR failed StyleCop validation as of commit e19f857f94347f7fe2d1ec6a769beb3280c7ff73.  See https://github.com/NTaylorMullen/Mvc/pull/8 for details on what failed.\n. Invalid after re-design.\n. Ignore this\n. This was designed out.\n. Working on tests to validate the intellisense fix, we never had them in the past so I'm adding some new coverage!  Thought I'd get the PR out early for feedback.\n. :shipit: with 1 update to autofac website (remove k10 configuration because it's invalid under those circumstances).\n. This is implemented in todays world but hard to notice.  Closing as \"false alarm\"\n. :shipit:\n. :+1:  :+1:  :+1: \n. https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor.Host/MvcCSharpCodeBuilder.cs#L56-L58 This is the code in question.  It builds an unnecessary constructor in order to inject code inside of the member portion of the generated C# class.\n. :shipit:\n. A snippet to convert from pascal case to lower-kebab (DocumentType => document-type) for reference:\n``` C#\nvar name = \"DocumentType\";\nvar regex = new Regex(\"(?<!^)((?<=[a-zA-Z0-9])[A-Z][a-z])|((?<=[a-z])[A-Z])\", RegexOptions.None);\n// Outputs \"document-type\"\nConsole.WriteLine(regex.Replace(name, \"-$1$2\").ToLowerInvariant());\n// Other outputs:\n// SomeThing => some-thing\n// capsONInside => caps-on-inside\n// CAPSOnOUTSIDE => caps-on-outside\n// ALLCAPS => allcaps\n// One1Two2Three3 => one1-two2-three3\n// ONE1TWO2THREE3 => one1two2three3\n// First_Second_ThirdHi => first_second_third-hi\n```\nWe do this in TagHelpers.\n. :shipit:\n. :shipit:\n. :shipit:\n. :shipit:\n. :shipit: \n. This PR is huge, I skimmed through and put down some top level concerns.  Should definitely get more eyes than normal to ensure everything is accounted for.\n. Looks good.  May want to see how this change fairs in the Mvc music store to see if we break anything there.\n. Duplicate of https://github.com/aspnet/Mvc/issues/1253\n. Broke this issue out: \n@addtaghelper for ViewStart: https://github.com/aspnet/Mvc/issues/1166\n@removetaghelper for ViewStart: https://github.com/aspnet/Mvc/issues/1167\n. :shipit: \n. 082512f63c639381f79cb02589383fdf43bd80fd\n. This got designed out and is now encompassed as a manager.\n. d041249b2748ae6e01737d9491a79c223dc6574b\n. No longer valid after re-design.\n. c87de5a0fc3ef6bd356aeb16d83e406b1abab9ff\n. :sheep: it\n. :sheep: it\n. lol @Eilon love it.\n. 1. Add a line mapping test for partially written @inject code, something like:\n   https://github.com/aspnet/Razor/blob/dev/test/Microsoft.AspNet.Razor.Test/Generator/CSharpRazorCodeGeneratorTest.cs#L122-L134\n2. Add a syntax tree test to validate that the correct inject syntax tree is generated for the partially written inject case (if we don't have one for the fully written case we should add that).  Something like: https://github.com/aspnet/Razor/blob/dev/test/Microsoft.AspNet.Razor.Test/Parser/CSharp/CSharpDirectivesTest.cs#L16-L24 but for the partial case\n. :ship: :it: \n. Moved to Razor: https://github.com/aspnet/Razor/issues/158\n. I don't see the harm in doing it other than making the RazorPage decently large.  Do you happen to have any numbers associated for the perf impact?\n. :shipit: \n. @pranavkm You're right, the tests that were in question initially are unit testing the writers and aren't supposed to flow through the MvcRazorHost pipeline.\n. e995e7a3e21dbb36ea595b23354f642e80744dbe\n. @dougbu It'd be nice to expose the ViewContext and potentially direct access to sub-members such as the current HttpContext to an MvcTagHelper.  Is there anything specific from the page you'll need for the HTML helper equivalents that you couldn't get from DI?.\n. We designed this out.\n. Closing this PR out since we broke apart the TagHelper_Manager.  Will re-open with its pieces implemented.\n. Opening new pr because it'll be off of different branch.\n. Code reviewed in person with @pranavkm :ship: :it: \n. Can't redirect just the RazorPage.Output property, need to redirect the entire ViewContext.Writer if we want to also capture content from things like @Html.BeginForm(...)\n. Talked in person.\n. Aren't the test files supposed to have the checksum pragma?\n. Starting to feel that a common test base is a better approach.  That way we don't pigeon hole ourselves into having every Razor code type test in one file.\n. @pranavkm Adding a test class base wouldn't be creating a framework, it'd just enable us to not to throw all of our code gening tests into a single file, aka a better way to reuse code.  Ex: I'd much rather see all of the @inject tests in one place rather than have to go scouring around for them.\nThe test class will get abnormally large if we have all the tests in a single file, it'll be unusable and unreadable.\n. :shipit: \n. /cc @pranavkm \n. Addressed code review comments and rebased onto new Razor bits (TagHelper => ITagHelper)\n. Addressed code review comments.\n- Also rebased on latest dev to incorporate roslyn changes.\n- Modified tag helpers to work with new TagHelper format (swaped the TagHelperOutput and TagHelperContext params).\n. Addressed code review comments.\n. /cc @yishaigalatzer for @pranavkm's comment\n. Went through and made all the tag helpers simpler. Will push once building gets back in order and I can verify everything passes/runs correctly.\n. @javiercn went through the sample and pretty much everything showcases a specific piece of the TagHelpers and their interactions with each other. \nThe only thing left to really trim would be the filler text in the HTML pages, at that point they wouldn't be English sentences and would make the functional test confusing to a dev inspecting the output of the sample.\n. be4a6c8d98fa6122be2e26b2e8830dc6b36ed9fd\n. :shipit: \n. @yishaigalatzer oh I completely missed that.  I thought we wanted the default one to not have functional tests, will change.\n. Changed structure.\n. @yishaigalatzer this good to go in?\n. Talked in person, will :ship: this once the build issues are resolved.\n. Added this for reference, closing to reduce noise, feel free to comment though.\n. 2005c3cd857874c7ce6e58806eb46d0af858cf8e\n75a77e2d013e5c665b467a174c89d8762b10fa1d\n. 4c98c8fcb9f706b8e6f641f6b25ba8e44d6f94dd\n. 57d1c542dbbcebe3c890ec4e1a4a297607f9f4ed\n. f8b0249918c4ec2ffda48e3b066c32c4eef6c6fc\n. 2729cdc9b70a6174b37bcbf7ad3b0313c6226b92\n. 9c07055ac7cd98951f1a94094eca661943b78689\n. :water_buffalo: \n. :shipit: \n. :shipit: \n. 3dff1ca410befc33acef4b592a8db7d96ee6d44b\n. @dougbu Talked with @yishaigalatzer about this and we do this all over, ViewComponents, RazorPages, Controllers etc. which is why this approach seemed to be more consistent and flowed with what we already do.\n. Addressed code review comments.\n. Found a better solution than to add this, closing.  If we ever need it we can bring it back.\n. Should showcase <form> with one or more of its allowed attributes.\n. Would be nice to see a _Layout with a few anchor tag helpers (to show they can be used there).  They're perfect for navigation.\n. :water_buffalo: \n. Buffalo is my version of :watch: , trying to be a trend setter :trollface:.  I was thinking a _Layout would showcase that these things are useable in those pages but did not affect the resulting pages underneath it.\n. :shipit: \n. Reopening to be on TagHelpersFeature\n. :water_buffalo: \n. :shipit: \n. Addressed code review comments and rebased.\n. 2005c3cd857874c7ce6e58806eb46d0af858cf8e\n75a77e2d013e5c665b467a174c89d8762b10fa1d\n. b68fae9b8cbc723ebf16d59a2db800aeee2007b6\n. :+1: should I just inject the AntiForgery class for now? Assuming you'll add the MvcServices DI registration piece in the non-design piece \n. 63f8f7de6d015e2f33f70ca103eb52722e6f775d\n. Addressed code review comments. Will wait for rebase to pick up Mvc.sln fix.  My VS is in ruins :cry: \n. @dougbu I know you pushed your changes to TagHelpersFeature.  You good with me merging that into dev?\n. Addressed comments (changed static methods to extension methods).\n. Going to hold off on rebasing onto TagHelpersFeature until your textarea.tests PR is in.  The other PR's in the chain starting with this PR point to taghelper.refactor.1243 which we forced to be a copy of your textarea.tests branch.\n. Closing so I can reopen against TagHelpersFeature.\n. Addressed code review comments.\n. Added tests.\n. Addressed code review comments, added full test.\n. Addressed code review comments.\n. Will get in once previous PR's in the chain are in\n. @danroth27 Does this mean that https://github.com/aspnet/Razor/issues/186 also goes in sprint backlog/beta1?\n. 09af7bb77b7c2b626292a0a83816f6e969d55861\n. Addressed comments that didn't have a pending question.\n. Addressed comments. \n. Added tests.\n. Addressed code review comments & tests.\n. Addressed code review comments.\n. Addressed code review comments.\n. Addressed code review comments.\n. Will get in once previous PR's in the chain are in\n. 1cf6935f6b893f331f12e70023c5bb99df9384a8\n. Addressed code review comments to the exception of the one comment with differing opinions :smile: \n. Rebased on changes from other PRs\n. Addressed code review comments.\n. Update TagHelper sample to use new validation-summary format.\n. Updated.\n. Done in TagHelpersFeature via ba111a4fa837a542408748a5f64b9825eaa932a0\n. :water_buffalo: \n. Holy massive change.  I have to say it does make me a bit nervous having suchhh a large change set without https://github.com/aspnet/Mvc/issues/453 in.\n. :shipit: \n. Rebased/Addressed comment.\n. Addressed code review comments.\n. Will get in once dependent PR is signed off on.\n. Done in TagHelpersFeature via b4b01ff7c71fc4df5563aeb133c453491ceb6ae4\n. :water_buffalo: \n. :water_buffalo: \n. :shipit:\n. Addressed code review comments.\n. @dougbu After addressing nits am I got to ship since we discussed the one @class piece offline?\n. Addressed code review comments.\n. :shipit: \n. Hmm, I'd prefer the do-not override approach for other attributes.\n. Will look over this once I get in later.\n. O, it's small.  Haha, :shipit: \n. 0d4d7c6e978fd5f5d01929cbcec9c65861c788b2\n. :shipit:\n. :shipit: \n. :shipit: \n. Reopening against TagHelpersFeature.\n. Updated.\n- Addressed code review comments.\n- Modified new StringWriter() instances where we didn't care about the StringWriter to be TextWriter.Null\n- Removed unneeded namespaces.\n. :water_buffalo: \n. Looks good to me.\n. :water_buffalo: \n. :shipit: \n. :shipit: \n. What are common use-cases and how would a user specify model => model?  I don't think <input for=\"\" /> is a good solution. I'd rather the user type out the entire model => model.\n. I just think <input for=\"\" /> is misleading is all.  From a users perspective it looks like you're passing a no-op behavior into the \"For\" attribute.  If we wanted to match it exactly like the Html helpers then not providing a for=\"\" attribute in my mind would be equivalent but of course that'd wreck our no-op cases when we're in non-taghelper mode.\nNot entirely sure how we'd enable a user to type model => model, just saying in my mind it makes more sense.  Maybe @DamianEdwards has a better idea.  I like for=\"@model\" still slightly better, maybe too much magic though since the @model is referencing the passed in lambda parameter.\n. Updated\n. https://github.com/aspnet/Mvc/pull/1412 is not dependent on this.  It's a standalone item; ideally it could go in without this ever going in.\n. All TagHelper functional tests in Mvc already verify attribute case insensitivity. The only thing they don't verify is the class attribute being case insensitive since it'd require a custom TagHelper.  I don't feel like that is worth adding to the TagHelper functional test since we now validate that specific case in a unit test.\nI don't feel like merging the TagBuilder PR with this PR is a good idea since they don't correlate (shouldn't have made this PR based off of the other). Could open this up against dev and it have the same behavior/test passes etc.\n. 7934c432c8b4a6c229b1a461bfbc06c816a242fe\n. 7934c432c8b4a6c229b1a461bfbc06c816a242fe\n. I'm able to hit breakpoints in the expected locations (attributes are not supported for breakpoints):\n\n. I tried reproing the innability to hit breakpoints in the MvcSample.Web and was not able to. To go over each bullet point:\n1. I can hit breakpoints\n2. Attribute breakpoints have never been supported, if we want in the future to make it better we can.\n3. Large highlights has been around for a while and wont be able to be fixed until we get support from pdb files/another team.\n4. Unfamiliar with this bullet point.\n. :+1: \n. :shipit: \n. :watch:\n. :shipit: \n. :shipit: \n. 759fbbd661fe4f8d51203fd8b521e72f3f63e96d\n. Updated tests, somehow it built fine first time but when I tried to get it ready to be pushed in it failed.\n. @ianhong one of the commits is invalid.\n. Thanks @Bartmax, updated the issue to reflect that.\n. :watch: \n. :shipit: \n. @yishaigalatzer tests already exist. The hook itself is tested in Razor and the MVC related tests validate that _viewStart directives are inherited. We modified the TagHelperDescriptorResolver.Resolve signature in Razor so without this change MVC does not build (once the aspnet/Razor#228 is in).\n. Updated.\n. <3 branch name.\n. :shipit:\n. :watch:\n. :shipit: \n. I don't know .shade files enough to give an accurate shipit. :cry: \n. :watch: \n. :shipit: \n. Note that changing to IAssemblyLoadContext goes hand in hand with these two issues:\n1. https://github.com/aspnet/Razor/issues/254 - Add a first class extensibility point for assembly resolution of exported types\n2. https://github.com/aspnet/Razor/issues/230 - Tag Helpers: Investigate Assembly.Load vs. IAssemblyLoader.Load in DTH / Runtime\n. Looks good after the one comment. :shipit: once the Razor pieces are in.\n. :watch: \n. :shipit: \n. :shipit:\n. :watch: \n. :shipit:\n. /cc @pranavkm \n. Updated.\n. Updated.\n. Updated.\n. Rebased, verified test pass and updated.\n. :shipit: \n. :shipit: \n. :watch: \n. :shipit: \n. 14bd7dcd5ea57badcf37f02e2e5c035103b55d79\nbaa70d284d5fdf4e63d2208d05f16cad779a26d5\n. /cc @pranavkm @yishaigalatzer \n. Updated.\n. Closing to place onto release and merge.\n. Found out that all existing directives with the exception of @section and @using perform parsing invalidly for extra/invalid characters, this has been around for ages so the urgency of the issue is definitely less. This will be post-rtm.\n/cc @DamianEdwards \n. TagHelper side of things look good :+1: \n. @yishaigalatzer moved this one too: https://github.com/aspnet/Mvc/issues/1864\n. Moving this to Razor.\n. :watch: \n. Looks good 2 me, :shipit: \n. :watch: will look more at tests/smaller pieces when ready/out of design. Aside from comments design looks pretty good though.\n. :watch: \n. Looks good 2 me :shipit: \n. Couldn't get through everything, will continue on it more tomorrow.\n. Design is looking pretty good, :watch: Let me know when I can take a look at the more nitty gritty stuff\n. This still in Design?\n. :watch: \n. Need unit tests for: \n- TagHelperContextExtensions\n- ModeMatchResult.LogDetails\n- MatcherExtensions\n- JavaScriptResources\n. :watch: \n. Looking good, just waiting on Functional tests and new LinkTagHelper unit tests.\n. Once the site.css files have content that results in content being visibly different if viewing the functional test in a web browser then you have my :shipit:.\n. :shipit: \n. :watch: \n. :shipit: \n. If we have the allowMultiple tests validating when it's true then :shipit: \n. :watch: \n. :shipit: once @rynowak be happy\n. Note: You'll need to update the perf tests to reflect this as well.\n:shipit: \n. Gogogogo\n. :watch: \n. :shipit: \n. Pretty much there, :watch: \n. Looks good to me :shipit: \n. :shipit: \n. :watch: \n. Updated, broke into 3 commits. Feel free to comment on commits individually (even though we normally don't do that). That should solve the length issues.\n. Looks pretty solid. With the two comments addressed it looks good :shipit: \n. solid, looks good to me. :shipit: \n. :watch: \n. :shipit: \n. :watch: \n. :shipit: \n. :watch: \n. :shipit: \n. :shipit: \n. No reason for the NullLoggerFactory in common repo anymore, it's moving to testing. NullLoggerFactory is equivalent to new LoggerFactory()\n. :shipit: \n. :shipit: \n. Hmm well we have the test class already, lets keep it as is, makes it blatantly obvious what it's being used for.\n. Why is using base path a problem? Was that ability removed?\n. You're awesome, thanks @ChengTian \n. :watch: \n. Yup sure is! :smile: http://stackoverflow.com/questions/28719298/add-namespace-to-all-views-in-asp-net-mvc-6/28729828#28729828\n. :watch: for tests.\n. :shipit: once @pranavkm or someone else can confirm the smaller implications.\n. Duplicate of https://github.com/aspnet/Mvc/issues/1571\nNote that this has been fixed :smile: \n. f49d52b5fc1bfae9b78d3a9476a03fdc56f3e46e\n2a28e6f4ce80cbbb54acbb0e8f9f9cf6f7f08e1a\n. f49d52b5fc1bfae9b78d3a9476a03fdc56f3e46e\n2a28e6f4ce80cbbb54acbb0e8f9f9cf6f7f08e1a\n. Rebased and updated.\n. Updated and rebased.\n. Small comments, :shipit: \n. @sornaks the initial implementation of this will not be a true optimization (under the covers it'll just call string.Format). Ultimately its nice to have to make code easier to write/understand. \nIf we want to make true performance optimizations later on we have that option.\n. :shipit: \n. Nuke branch when you're ready.\n. xml doc error: warn: Invalid documentation syntax in src\\Microsoft.AspNet.Mvc.TagHelpers\\bin\\Debug\\aspnet50\\Microsoft.AspNet.Mvc.TagHelpers.xml:\nwarn:   712: An <see cref=\"!:ILoggerStructure\"/> for log messages regarding <see cref=\"T:Microsoft.AspNet.Razor.Runtime.TagHelpers.ITagHelper\"/> instances that opt out of\n. :watch: \n. Squash commits then :shipit: \n. I don't feel like this is a replacement for the current configuration system, per-instance seems overkill to make this a full replacement. If anything it should be an addition.\n. Design looks good, only semi-design comment is you should probably cache the configureEnumerableType in your DefaultTagHelperActivator since we'll be activating on a per-tag helper on the page basis.\n. Found an alternate way to pass through the TTagHelper to enable more magic and cleanness (no caching required). Talked in person.\n. :shipit: \n. :+1: \n. :watch: \n. :shipit:\n. :watch: \n. @rynowak I think that's a blatantly wrong decision by the engineering team, we should revisit with them.\n. :shipit: \n. :watch: \n. :watch: just for the re-gen, super close.\n. :watch: just for the re-gen, super close.\n. :shipit: once @dougbu is happy.\n. :shipit: \n. As long as it builds, looks good :smile:  :shipit: \n. :shipit: \n. @dougbu The ambiguity bit I mentioned will drastically improve TagHelper tooling. For instance, today in the pre-bits for TagHelper tooling every div tag is highlighted because of the validation summary maybe being a TagHelper on div elements. Same thing goes for all other TagHelpers.\n. Beautiful, :shipit: \n. solid, :shipit: \n. Tooling provides a rooted path for the source file where runtime provides an app relative path.\n. 0f1292abf6857c0a2d3a678a28c5fe8a03babf1d\n9ac346529c5b656b4860945f924fbe0e8cbcacea\n. :shipit: \n. :shipit: \n. Will re-visit tests in next iteration after:\n- File version defaults to true based on issue requirement double checked with @DamianEdwards that this is the intended functionality.\n- File version url bit should be ?v= OR &v= instead of always ?v=  Should add tests to validate this too\n. Talked with @DamianEdwards about caching and he said we should definitely be caching the disk reads.\n. :watch: Didn't look at tests, waiting for you to complete them.\n. :watch: \n. It looks good, just want to check on one thing with @DamianEdwards before we get it in.\n. Add two tests that flow the request app base from LinkTagHelper/ScriptTagHelper all the way through to the version provider. :watch: Almost done.\n. :shipit: \n. /cc @rynowak \n. Updated.\n. :watch:\n. :shipit: \n. /cc @danroth27 @Eilon @DamianEdwards Found why this is happening. Investigated it and it's an easy fix. Problem was caused by the same issue that resulted in the directives @tagHelperPrefix, @addTagHelper and @removeTagHelper no longer working in _GloblImport.cshtml during design time: just need to apply the fix in an additional location. \nI'd love to get this one into beta4 - super low impact since it only affects tooling.\n. Super quick fix to this out for PR now: assigned to beta5, feel free to move milestone if you decide there's enough value in getting it into beta4.\n. 9402f1485ccc245f874d5d530f8c8a1ad54f3ced\n. /cc @pranavkm \n. 9402f1485ccc245f874d5d530f8c8a1ad54f3ced\nb0b0836395e23dd9c02cd6b2450aabc373cb60a0\n. :shipit: \n. ``` C#\npublic class HomeController : Controller\n{\n    public static Users Users = new Users();\n// GET: /<controller>/\npublic IActionResult Index()\n{\n    return View();\n}\n\n[HttpPatch]\npublic string DoWork([FromBody] JsonPatchDocument<Users> patchDoc)\n{\n    patchDoc.ApplyTo(Users);\n\n    return JsonConvert.SerializeObject(Users);\n}\n\n}\npublic class Users\n{\n    public IList People { get; } = new List();\n}\n```\n``` JavaScript\nvar data = [\n    { \"op\": \"add\", \"path\": \"People/1\", \"value\": \"Taylor\"},\n];\n$.ajax({\n    url: 'Home/DoWork',\n    data: JSON.stringify(data),\n    type: 'PATCH',\n    dataType: 'json',\n    contentType: 'application/json-patch+json'\n});\n```\n. :watch: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. :watch: \n. Gonna have to wait on @dougbu for sign off on this one, that type hint resolution loop is rough to follow.\nI've added as much as I could to the PR, consider me signed off.\n. :shipit: \n. /cc @dougbu @pranavkm \n. Why is this a bug?\n. /cc @pranavkm \n. /cc @pranavkm \n. @dougbu @model uses the same core parsing mechanics as @inherits which is covered in the Razor PR. I updated the @model tests in this PR to account for the Razor change.\n. :shipit: \n. This is a duplicate of https://github.com/aspnet/Razor/issues/172 however this item seems to be more descriptive.\n. :shipit: once you've addressed the test comments.\n. Updated.\n. :shipit: \n. Looks as if AppVeyor is passing now. May want to close this issue if it's only tracking AppVeyor work; that is unless the build passing is an anomaly.\n. :shipit: \n. @rynowak You're absolutely correct, it is indeed a manifestation. I'm going to reopen aspnet/Razor#342 because it seems that the data- issue also occurs with unbound TagHelper attributes. Thank you @Inok for reporting this.\n. :watch: \n. :shipit: \n. :shipit: \n. Whatever we do for @model we should do for @inherits\n. oo I agree with @ajaybhargavb here, we don't highlight the @ for any other directive and never have\n. :watch: \n. :shipit: \n. e68986346176105db379da023eac245e0ad912bb\n. Actually @rynowak just had an epiphany tonight on how to remove the \"activatish\" attribute entirely. Only reason why the private backing field was bad was because it'd show up in IntelliSense... On CodeBuilderContext (you'll have access to this via Context) there's a DesignTime member indicating if it's generating code in DesignTime. You can actually conditionally generate the backing field/the getter content based on if its DesignTime or not. This way you have the best of both worlds:\n- No [Activate]\n- No IntelliSense badness.\n. Workarounds are:\n- Place an @using Microsoft.AspNet.Razor.Runtime.TagHelpers in your layout.\n- :trollface: workaround = Use an additional TagHelper outside of the section. :smile: \n. :shipit: \n. /cc @dougbu @DamianEdwards \n. When time permits should doc the new MVC TagHelper ctors and sprinkle [NotNull] :smile: Not vastly important for this week but should be done.\n. :shipit: \n. @dougbu oh ya, forgot about that guideline.... Don't like it one bit! Oh well can't fight the guidelines.\n. Good find, it even looks like we rely on this behavior a little bit in our own TagHelper samples which I believe is wrong. Could you move this issue to the aspnet/Razor repo?\n. /cc @pranavkm @dougbu \n. :watch: \n. :shipit: \n. ",
    "loudej": "That's orthogonal - we'll certainly need to rename everything several times before we're done in general. The requires to use a naming pattern of TheProduct and TheProduct.Core still applies, because adding a reference to \"TheProduct\" as the outermost all-up package is better.\n. :shipit:  :)\n. Agreed, post alpha, we'll take a look at incoming-body outgoing-result services and patterns\n. :shipit:\n. This is likely closer to a new'ed object than an activated thing. So passing service when new'ed is fine. ITypeActivator is more for types like Controller, View, Startup which are highly variable and often not registered in IoC.\n. Yep, it was there because (a) the nested generic was manky in user code, and (b) MVC 5 had a tendency to declare delegates that had a specific place and purpose (like ActionSelector)\n. Is there a sync? Wouldn't the sync be used here\n. Can be a method on base authorize filter? Check with seb on that stuff - but we prolly don't want HasAllowAnonymous popping up on every filter context\n. Prolly make these all virtual for MoQability? File another bug for that in general, don't need to fix in this PR \n. This could probably return Task now that you mention it... That could apply to a few other methods too.\n. ",
    "danroth27": "At this point we only generate one public type. If we were to generate more than one then we would new convention anyway and you would need a new compilation service.\n. No more method overloading - no longer relevant.\n. @pranavkm Please investigate any public types that should be fixed.\n. @pranavkm Is there anything to do here for beta2? If not, then close the issue. Thanks!\n. We removed InvalidModelValidatorProvider.\n. 'DefaultHtmlGenerator.GenerateInput()isvirtualand (helpfully) now returns aTagBuilder`.\n. We should do a quick scan to validate that we are consistent.\n. Let's do this as part of a broader API review for the platform.\n. We should keep in mind that some of these methods need to be compatible with previous versions of MVC.\n. We should discuss the need for this with @DamianEdwards. \n. @kulmugdha Can you check if this is still an issue in the latest bits? Thanks!\n. @kichalla Does this still repro?\n. Likely to be resolved by support for TypeConverters\n. @kulmugdha Could please verify if this issue is fixed? Thanks!\n. @rynowak discussed this with @GrabYourPitchforks and there's nothing that needs to be done here.\n. You can do this by:\n1. ServiceFilterAttribute\n2. TypeFilterAttribute\n3. Write a custom IFilterFactory\n4. Write a custom IFilterProvider\n5. Access services from the HttpContext\n. The thinking here is to only support the DataTypeAttribute for formats we already support (ex Email, CreditCard, etc).\n. Nothing to do here anymore.\n. No more method overloading.\n. This is available now through controller activation.\n. Fixed (see https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/BuilderExtensions.cs)\n. Duplicate of #268.\n. The authorize attribute in MVC uses a common service that could be reused, but the attribute is framework specific.\n. We don't have anyone working on this in part because we think the way the system is architected makes it difficult to do this in a general way that is still correct. Because of this I expect getting this feature into MVC will be difficult and involve a lot of discussion and iteration, but if you feel up to the challenge then go for it! :smile:\n. Duplicate of #785 and #982.\n. @loudej What is the desired behavior here? \n. Duplicate of #463 \n. Duplicate of #268 \n. This is technically an issue external to MVC and we decided not to do anything special for this.\n. The behavior should probably come from middleware\n. Fixed.\n. @kirthik What is the current behavior?\n. The [FromBody] attribute seems a bit misnamed given that it doesn't actually handle all data coming from the body - form data is special.\n. @dougbu Please split into specific work items\n. Consider property injection and injection into action methods through action parameters.\n. Depends on session state support from runtime.\n. Session support is coming from the core runtime.\n. We can revisit this based on feedback.\n. At this point we've covered as much as we want to do here.\n. Duplicate of #1039.\n. We are currently just using the default JsonContractResolver. We should investigate if we want to continue doing that or do something similar to what Web API does.\n. Formatter errors now show up in model state.\n. Validators are registered in order.\n. Dup of #453 \n. See also https://aspnet.uservoice.com/forums/41201-asp-net-mvc/suggestions/2685968-better-error-handling-support-for-404-and-500. \n. See related issues #565\n. @rosieks Batching is something we think should be handled outside of MVC. For example, you could deal with batch requests in middleware.\n. This should be handled as part of the core HTTP abstractions support. See https://github.com/aspnet/HttpAbstractions/issues/139. \n. Duplicate of #510 and #107.\n. The Web API results we will revive as part of the Web API compat shim.\n. We are looking at bringing some of the Web API action results into core as part of #1378.\n. Previously in MVC5 we supported OutputCacheProfiles in Web.config which is a pre-defined set of parameters for OutputCache. This provided a way to reuse the settings in multiple controllers/actions and a centralized place manage all Cache profiles. We do not have an equivalent for this in vNext.\nIt looked like this:\nIn Web.config:\nxml\n<caching>\n<outputCacheSettings>\n   <outputCacheProfiles>\n        <add name=\"Cache1Hour\" duration=\"3600\" varyByParam=\"none\"/>\n    </outputCacheProfiles>\n</outputCacheSettings>\n</caching>\nAccessed in the Action like this:\ncsharp\n[OutputCache(CacheProfile=\"Cache1Hour\")]\npublic string Index()\n{\n    return DateTime.Now.ToString(\"T\");\n}\nProposal for vNext:\nWe can use MvcOptions to achieve the same. It would look something like this:\nIn Startup.cs\ncsharp\nservices.Configure<MvcOptions>(options =>\n{\n    options.CacheProfiles.Add(new CacheProfile() {\n         Name = \u201dCache1Hour\u201d,\n         Duration = 3600,\n         VaryByHeader = \u201cAccept\u201d\n    });\n});\nAnd my action would look like:\ncsharp\n[ResponseCache(CacheProfile=\"Cache1Hour\")]\npublic string Index()\n{\n    return DateTime.Now.ToString(\"T\");\n}\nResponseCache\u2019s OnActionExecuting will look up the MvcOptions and get the CacheProfile with the particular name and populate the parameters needed to set the headers.\n. We are handling this as part of the Web API compatibility shim (#1278).\n. Closing this issue since this should be handled in tooling instead of in the MVC core.\n. @pranavkm Is this still an issue?\n. Provide a model binder for an HTTP posted file.\n. Duplicate of #429.\n. Another possibility is we could build check box list support directly.\nThis one is the second top user voice items: \nhttps://aspnet.uservoice.com/forums/41201-asp-net-mvc/suggestions/488893-better-binding-support-for-checkbox-lists.\n. @dougbu Could you please add a quick code sample to this bug that shows what a user would have to do to solve this problem?\n. @kulmugdha Could you please post the sample code that demonstrates the issue? Thanks!\n. Dup of #1528.\n. We think this was fixed in DI.\n. Anonymous types are internal, so Razor pages cannot access their properties. This is just how dynamic is implemented in C#.\n. Duplicate of #690.\n. We've decided there is nothing to do here.\n. Dup of #687 \n. We should look at this as part of looking at diagnostics for the entire platform.\n. Having customers have to set an extra option to return some JSON is not an acceptable user experience.\n. You can get the cancellation token from the HttpContext.\n. Should be unblocked now.\n. The thinking is [NotNull] should only appear on the interface method. Same for virtual/abstract methods. And it is not valid to change the contract (its preconditions) of a method.\n. We are going to move everything to a RazorHostFactory. The factory is going to have no dependencies on the user's code startup.cs.\n. Duplicate of #1047.\n. Duplicate of #582.\n. This gives us consistency with the [Bind] work. We should see if we can get this in after the [Bind] work is done.\n. Duplicate of #801.\n. Duplicate of #38.\n. @harshgMSFT We should handle this as part of #801.\n. ConsumesAttribute handles this.\n. This is being handled as part of the binding work - see #38.\n. We should take a look at what we can do with the existing support.\n. Duplicate of #487.\n. We'll handle this as part of #657.\n. @sornaks I believe this overload is now available and ready to be consumed.\n. @DamianEdwards is handling getting this published through bower.\n. We will do this as part of the Web API compat shim work.\n. Likely to be resolved with TypeConverter support.\n. Agree with @rynowak.\n. Not an issue.\n. We should support aliasing for property names in model binding, but DisplayAttribute is probably not the right attribute to use.\n. @terrajobst We should track supporting inheritdoc as part of our API ref doc work.\n. You can just write a result filter that looks for the 406 and changes it to whatever.\n. @pranavkm What's the user impact of this issue?\n. We decided not to do this.\n. Consider not using ITypeActivator and change the invocation pattern to use DI directly.\n. We should just use TypeDescriptor once it is made available on Core CLR.\n. We should make sure this behavior would not be a breaking change from MVC 5\n. The current behavior is that we silently ignore unused sections when rendering partials. This behavior is consistent with MVC 5 and we think its fine.\n. Something to keep in mind for #582.\n. @harshgMSFT Does this impact formatters?\n. DCS should be the default. The user can swap in the XmlSerializer one if they want it.\n. We will handle this all in one go as part of #1039.\n. @ironyx Are you still interested in working on this issue. Community contributions are more than welcome!\n. View components do not get associated with an area, but you should be able to put view components in specific namespaces and call them using a fully qualified name.\n. Consider allowing the namespace for view components to be specified using an attribute on a base class.\n. By default view component names are inferred from the fully type name (without the \"ViewComponent\" suffix\". You should be able to invoke a view component using the full name or the short name.\n. @harshgMSFT OK, if this is a dup, then please close this as a such.\n. Duplicate of #909 \n. Duplicate of #1179\n. We should have a way to switch the controller factor to be DI based if that's what you want.\n. See also aspnet/Razor#42.\n. See @rynowak's comments.\n. Duplicate of #1077 \n. We decided not to do this.\n. Duplicate of #969.\n. @rynowak Let's chat about what we want to do on this one.\n. Instead we decided to create a sample that shows how to use a custom IRouter with async logic.\n. Old title: Create an async version of IRouteConstraint\n. Duplicate of #1047.\n. @rynowak These should probably live somewhere in the core and then RouteValueDicitonary can take a dependency on them.\n. Duplicate of #824.\n. @davidfowl We should look at issues building on OS X more broadly.\n. @kanchanm Please investigate\n. @troydai Can you please more details in the bug on how much memory is actually getting allocated and what scenarios are affected? Thanks!\n. We should update all existing formatters to use the new property.\n. Looks like all FormatPropertyForClientValidation does is prepend \"*.\" so we think adding this method isn't critical, but we can re-evaluate based on customer feedback.\n. We should discuss if we still need @helper.\n. We decided there is nothing to do here. We can revisit based on customer feedback.\n. We discussed this and the decision is that for attribute routes you should constrain action selection instead of constraining the route. We should validate this design by writing a versioning sample.\n. In general we should not be catching server errors and returning 500s in MVC. We should let the exceptions bubble up and be handled externally.\n. Sounds like this could be a Mono issue.\n. @pranavkm Could you please make sure the appropriate Mono bugs have been opened and referenced here?\n. We should definitely improve the error message and also see if we can come up with a behavior that is more compatible with the MVC 5 behavior.\n. @loudej @davidfowl We need some way to figure out what file system we get.\n. @ianhong @rynowak Is the issue only with int? Do other unboxed types work?\n. This is not OData specific - there should not be a concept of content headers in our formatting abstractions.\n. The packages.config file is actually generated by NuGet. We are following up separately with the NuGet team, but we recommend opening an issue directly with them at https://nuget.codeplex.com/.\n. Thanks for reporting this issue, Jeremy! We will take a look at this post beta1.\n. @sornaks Please open an issue on Mono and provide the link here.\n. We are closing this because this is not specifically an MVC issue, but we are following up with the tooling folks on this one. Thanks.\n. @windhandel This bug is pretty old and was closed a while ago, so you should probably open a new issue for the problem you are seeing with detailed steps on how to reproduce the issue (ex what version of Visual Studio 2015 are you using?). Thanks!\n. @pranavkm How do you use async code in the body without this?\n. Some ideas we discussed:\n- Add a ControllerAttribute\n- Walk the hierarchy for derived types\n- Add a NonControllerAttribute\n- Consistency with view components\n- Add a predicate in options\n. We should also add Dispose to Controller.\n. Not sure if we should deal with the file path differences in the sample code - AddJsonFile should just deal with the OS differences. Everything else sounds good.\n. Should we throw in this case or silently fail? Anything that returns a string can't flush to the stream (i.e. HTML helper templates, PartialAsync, and ViewComponent).\n. We decided the expected behavior is that nothing should happen in this case.\n. @rynowak What should we do about constraints? Probably nothing as constraints could be handled by action constraints.\n. Closing as this issue is not specific to MVC. Please open where appropriate.\n. This is being addressed as part of the fix for #393.\n. This seems to be less related to view components and more related to passing an IEnumerable to a View.\n@BrennanConroy Can you provide us with the view for this issue. Or even better push a functional test that reproduces this issue?\n. You can call your method InvokeAsync to get async support.\nLooks like the error message could be improved.\n. @jrote1 Could you please share with us the version of the MVC packages that you are using? Thanks!\n. View components can have an InvokeAsync method (ex see https://github.com/aspnet/Mvc/blob/dev/test/WebSites/ViewComponentWebSite/ViewDataComponent.cs). We are not sure what is causing the specific error mentioned about, but without more info we are unable to investigate. \n. The explicitly specified formatter should always be used. The current behavior of using the specified formatter as a fallback from content negotiation is unexpected and incorrect.\nIf content negotiation fails and a formatter was not explicitly provided then the default JsonFormatter should be used.\n. Let's discuss BadRequest(ModelState) as part of #1377\n. Depends on outcome of discussion from #657.\n. See #1410 and #1411 for the issues @rynowak mentioned.\n. I chatted with @DamianEdwards about this and the simplest thing to do is put the source in the same repo as the bower packaging. This is how jQuery Validation manages their source.\n. Closing this issue. Opened https://github.com/aspnet/jquery-validation-unobtrusive/pull/2 to track checking in the source and updating the repository field.\n. In MVC the DefaultValueAttribute is really just metadata - it doesn't provide runtime behavior. You still have to implement the default value semantic yourself.\nThere is a nice way to do this with C# 6: public bool IsActive { get; set; } = true;\n. Thanks for reporting this feedback! We are tracking work on ModelMetadata with issue #1477, so closing this one as a duplicate.\n. You would not do for=\"\" for this scenario. Instead you would <input for=\"@Model\" />. See #1253.\n. This would be a way to specify an action constraint on a parameter. Related to #1411.\n. We decided not to add model state errors. Instead you should be able to tell that the parameter was not provided in the request by the absence of the parameter in the action arguments of the filter context.\n. The general requirement here is that you should be able to tell in an action or a filter that certain values were not provided in the request instead of being defaulted in by the system.\n. @pranavkm What is the behavior in MVC 5?\n. We can revisit this based on customer demand.\n. Clearing milestone so we look at this again.\n. If we get significant user feedback on this issue we can consider adding a more useful error message, but this behavior is intentional now that we have activated controllers.\n. We will take the copy constructor fix for beta1 and then revisit this for beta2.\n. Cool, thanks for the feedback and please file more issues for anything else you find.\n. Duplicate of #599.\n. Things that are intrinsic to the helper should generally not be overridden using the attributes.\n. We are in agreement on keeping the current fallback behavior for PUT/POST/PATCH.\nFor GET requests we prefer to keep the behavior consistent. This is in part to maintain compatibility with existing frameworks and also to avoid users having to understand too many special cases.\n. In the absence of an Accept header we have a very simple default heuristic that we apply consistently. If the request does not have an Accept header then we try to format the response using the same content type as the request. If you want to instead return a 400 response when a GET request contains a Content-Type header (or even worse it actually contains a body!) it is very easy to customize the system to do so. \nWe think it's better to keep our default behavior simple, pragmatic and flexible instead of trying to enforce every little nuance of the HTTP spec. We have found that being too heavy handed when it comes to HTTP compliance often causes more pain than good. As the server in general has complete freedom to format the response however it wants (Accept header or no Accept header) we see no reason to enforce a particular behavior in this case.\n. :shipit: \n. @kichalla Seems like we should split this bug into two separate issues: not requiring the assembly name and allowing the use of the tag helper name instead of the type name.\n. We decided that we don't want to impose any ambiguity on whether the string is referring to an assembly or a type.\n. The behavior is different because the scenarios are different - one is for handling form posts and the other is for Web API requests. We can revisit this behavior based on user feedback.\n. @DamianEdwards Putting in rc1 for now. Chime in if you want to see this done faster.\n. @dougbu Is this now working correctly for beta2?\n. @uliian SelectListItem is not serializable and we have no plans to make it serializable. Instead you can create your own serializable type and map the data you need to your type.\n. @ianhong We need should first decide what scenarios we want to simplify here and design the intended user experience.\n. We are investigating getting this fixed in the DataContractSerializer.\n. @wanghaolu Thank you for reporting this issue. The current behavior is intentional. By reading from the ModelStateDictionary we can preserve data that might not be possible to preserve in the model (ex. a mistyped value that failed validation).\n. @dougbu Is the current behavior the same as what we do in MVC 5?\n. @Tragetaschen Does one of the suggestions from @dougbu work for your scenario? If not, then please reopen and we will reconsider. Thanks.\n. @rynowak This should be done with the resource filter work.\n. We should change IReadOnlyDictionary to IDictionary and we should do this for all of the activators.\n. Needs to be done in conjunction with #1707.\n. @ajaybhargavb Example scenario: filtering to only discover assemblies from specific assemblies\n. @ajaybhargavb Please do as part of the beta2 signoffs.\n. @pranavkm \n. @ajaybhargavb We have decide to remove usage of Contract.Assert and just use Debug.Assert. We should do this for the MVC, Routing and Razor repos.\n. @pranavkm Work with @yishaigalatzer on a prototype for this so we can make a call if this is something we want to do for beta2.\n. This should be done as part of #974.\n. @santiagoaguiar Thanks for reporting this issue. We have decided to go with your suggestion and we are tracking the specifics in #1559.\n. All the remaining work is tracked by #1529. Closing.\n. @dougbu Correct.\n. @ianhong  We should also make sure templates and scaffolding follow the same casing.\n. Dup of #1629 \n. Dup of #2165\n. Dup of #2165 \n. From #1561, log when a filter short-circuits.\n. Dup of #1597.\n. @avanderhoorn For now you should be able to add the Microsoft.AspNet.WebApi.Client package as a top level dependency. This currently works thanks to a hack in the ASP.NET 5 runtime. Soon we will remove this runtime hack and we will need to update the Web API Client package.\n. Dup of #2165.\n. @joanbarros did you get a chance to put together a repro for this? Thanks!\n. Dup of #2165.\n. Dup of #2165.\n. You can use content negotiation, but the URL extension approach is convenient for adhoc testing from a browser where you can't control the Accept header and it can simplify your caching strategy (i.e. no need to mess around with the Vary header). The feature will also by default, so if you don't want it you can just leave it disabled.\n. Dup of #2165.\n. @kirthik Could you please investigate what the impact of this behavior is on when doing a JSON serialized jQuery POST to an action that renders a partial view? Do you not get validation errors in that case?\n. We think we can do this without the additional extension method.\n. @rynowak Could you please look at this as part of updating the binder contract?\n. See also #1204\n. We are happy to consider a pull request that makes configuring formatters easier. We should probably discuss the design further. Can we take a look at your code?\nPlease note that as part of #1765 we are planning on separating out the XML formatter into its own package.\n. Cool, please go ahead and submit a PR. Thanks.\n. We should look at doing a broader cleanup on the MVC sample\n. @kichalla Could you please enumerate the specific scenarios that you plan to cover for this? Thanks!\n. We already have great test coverage in this space.\n. No plans to support this.\n. Closing - we've done everything here we wanted to do.\n. Tracking this as part of #2012.\n. We don't have any immediate plans to support AjaxHelper in MVC 6, but we are certainly interested in customer feedback on the importance of supporting this in MVC 6. Putting this on our backlog for now.\n. We should measure the impact on memory given an app with lots of views.\n. We don't want to special case localhost for such a security sensitive scenario. Note that setting up HTTPS in development is pretty easy now with IIS Express.\nAlternatively, you can implement a filter override semantic based on the environment you are running in. See http://www.strathweb.com/2015/02/overriding-filters-asp-net-mvc-6/ for an example of how to do this.\n. @rynowak Is there any work still to be done here?\n. We should see what the current behavior is now that precompilation and taghelpers work nicely together.\n. @NTaylorMullen Does this also repro on Windows?\n. Dup of #1693. This is being fixed post beta3.\n. @ianhong Please try to repro the double encoding issue.\n. Closing for now.\n. Ah, makes sense. You can add this yourself right now by deriving from our tag helper and adding the property collection. We can also look at supporting this directly.\n. Some ideas on how you can preserve the validation messages:\n- Preserve the data in the query string\n- Preserve the data using TempData (coming soon)\nOr just post directly to the target controller that can do the validation.\n. @branciat Could you please share exactly what your cshtml view looks like and also the Mediagral.Core.Models.Observation type so that we can try to reproduce the issue? Thanks!\n. @dougbu Presumably the name attribute is empty - we should try to reproduce this. Could you please try it out? Thanks!\n. We decided this isn't worth doing.\n. For ASP.NET 5 there is a new Diagnostics middleware (Microsoft.AspNet.Diagnostics) that you can use during development. You can find an example of how to use it at https://github.com/aspnet/Diagnostics/tree/dev/samples. \nThe System.Web config section actually has no effect for ASP.NET 5 apps.\n. @rynowak @DamianEdwards @Eilon Do we still plan to move from [Activate] to [FromServices]?\n. We are definitely hearing a lot of feedback about the naming and behavior of [Activate], [FromServices] and @inject that we would like to address.\nFirst, some guiding principles:\n- We actually don\u2019t want to provide a general-purpose property-injection mechanism (like [Activate] on ViewComponents, TagHelpers), because there are lots of places we can\u2019t/won\u2019t support it, and it will lead to confusion.\n- There\u2019s a difference between the need to access services and the need to access context (ActionContext, ViewContext, etc). User-code will most frequently need to pull in services the user defines, or some common framework-provided services like DbContext/IUrlHelper/IHtmlHelper. Pulling in context is only really needed when writing a POCO controller or a controller-base-class.\n- [Activate] was created to support resolving context objects, and grew over time to be a general property-injection mechanism. An[Activate]-like mechanism is still needed for resolving context in controllers and ViewComponents \u2013 the alternative is constructor injection of context, which complicates the story for DI-integration and makes it harder to program against our base-classes.\n- [FromService] is a model-binding concept, and allows arbitrary plugging of services on parameters, models, properties. We\u2019re ok with how this works, and we\u2019re ok with it being limited to controllers.\n- @inject is working as intended. It\u2019s a necessary mechanism and still needed for writing Razor.\nProposal:\n- @inject will be renamed to @service. [FromServices] will be renamed to [FromService] for naming consistency.\n- @inject will only support real services (no ability to @inject ActionContext).\n- [Activate] will be removed.\n- For each context we want to support, we\u2019ll create a specific attribute as a marker. This allows us to validate usage if users find it confusing. We in-general prefer being explicit to just having magic names, like this:\ncsharp\npublic class MyController\n{\n        [ActionContext]\n        public ActionContext Context { get; set; }\n}\n. Adding @GrabYourPitchforks @blowdart for their thoughts on this.\n. @Bartmax Are you using MVC 5 or MVC 6?\n. Not worth doing\n. From #1665: Log the state before applying conventions, and the state after each convention is applied. In ControllerActionDescriptorProvider, following #1600\n. From #1662: Have  AttributeRouteRouteAsyncValues , etc. implement  ILoggerStructure \n. From #1640: Verify we have enough information tracking the execution of action method selectors (both single - Like  [HttpGet]  and multiple coordinating selectors).\nA good sample for usage can be found at - The versioning test website \nhttps://github.com/aspnet/Mvc/tree/315908af5fa9e08dfc703b5070b39925d48360eb/test/WebSites/VersioningWebSite\nWe will definitely want to do something more (than just verify) here - the logging work that was done in this area was pre-IActionConstraint.\n. From #1565, log anti-forgery validation failures.\n. From #1564, log the conneg process (inputs, formatter chosen, content-type)\n. See also #1686, #1629, #1566 and #1563.\n. In ASP.NET 5 there is a new configuration model that replaces the existing web.config model. We have no plans to add a config based model for setting up routes, but it's certainly something you could add for your own projects.\n. You can find a sample on how to use the config system here: https://github.com/aspnet/Entropy/blob/dev/samples/Config.Sources.Web/Startup.cs. You would need to write a component that reads in routing information from config and sets up whatever route you want.\n. @rynowak Please look into what the current behavior is on MVC 5.\n. @marcuslindblom If you have a sample that shows this behavior working on MVC 5 could you please share it with us? We would like to ensure that we haven't regressed any behavior in MVC 6. Thanks.\n. @dougbu Please investigate what the impact of this issue is. Thx.\n. This package is part of the build system and does not need a description.\n. @dougbu Is this just for DateTimeOffset[] or are other types affected as well?\n. @DamianEdwards Let us know if you think we need to pull this back into the current milestone.\n. @rynowak @dougbu Where are we at with support for these data annotations?\n. @dougbu Could you please provide a code sample the reproduces the issue so we don't lose track of the impact? Thanks.\n. Web API didn't do this, so we would only consider doing this based on customer feedback.\n. @kirthik Do we currently return a 400 level error response if someone tries a test operation?\n. @kirthik What happens if you don't use [FromBody] but just do a form post instead? What is the behavior on MVC 5 when using model binding?\n. This definitely something we want to look at improving, but probably not something we will get to for this release. Adding to the backlog.\nYou can take a look at how we currently do this in our Diagnostics package:\nhttps://github.com/aspnet/Diagnostics/tree/dev/src/Microsoft.AspNetCore.Diagnostics\nhttps://github.com/aspnet/Common/tree/dev/shared/Microsoft.Extensions.RazorViews.Sources\nhttps://github.com/aspnet/Razor/tree/dev/src/RazorPageGenerator\n. @dougbu Can you check if short is actually supported?\n. @loudej This has limited customer impact, so it seems like low priority.\n. We discussed this and decided the AllowAnonymous name still works even for policy based authorization.\n. @pranavkm Consider restricting to only primitives, dictionaries of primitives and arrays of primitives for now.\n. @rynowak Reconcile as part of #2151.\n. @rynowak Can this issue be closed now that #2151 is done?\n. @eilon Can we put it in it's own JsonPatch repo?\n. Moved to aspnet/HttpAbstractions/issues/245\n. @anfomin Are you literally sending Collection.index = key1,key2 or is this just a shorthand for sending Collection.index = key1 and then Collection.index = key2?\n. @dougbu We should at least be consistent with the MVC 5 behavior.\n. @DamianEdwards We should probably discuss how [FromServices] again. This looks like a unfortunate side effect of using model binding to do property injection.\n. The current behavior is fine. The settings used for putting JSON on the wire really are independent from the JSON returned by a View Component for embedding in a view.\n. The behavior is on the surface a bit strange, but we don't think users are likely to use these attributes in this way.\n. Let's only do this based on customer feedback.\n. @rynowak Please make it layer like a delicious cake.\n. Agree this is a dup of #105\n. I believe the behavior you are seeing is by design. The Invoke method for ViewComponents does not use model binding. It only uses the specific parameters that were passed when the ViewComponent was invoked. \nHandling a form post also isn't really a good use case for ViewComponents. ViewComponents are designed to handle rendering of complex data, not handling request data. Instead you should have your form POST to a specific controller action (ex for POST'ing the comment) and then from that action redirect back to the previous action (POST/Redirect/GET).\n. @borgdylan I'm not seeing the behavior you describe - I see 401's being returned. Can you try this out with our latest bits from the dev branch and send us a simple project that reproduces the issue?\n. @adriaanp  Could you please share with us your project code so that we investigate?\n. Looks like a Mono issue.\n. @pranavkm Please investigate why these files are being watched.\n. @pranavkm How important is this? Does this show up in the perf profiles?\n. We should profile to be sure, but we think this is a good optimization.\n. We should consider:\n- Do we really need a contract resolver at all? Can we make a change to use the RequiredAttribute without any wire semantic?\n- If we decide we do want the contract resolver should we use the same resolver by default for input and output?\n. Unfortunately the latest ASP.NET 5 bits from our dev branch are not compatible with Visual Studio 2015 CTP 6. We will be releasing new tooling soon that will address this issue. Thank you for your patience!\n. @Eilon Please assign to someone to review.\n. @kirthik Please verify what the MVC 5 behavior was with [MetadataType] and align our behavior if needed.\n. Should we just remove the behavior of turning void into a 204? How much do we care about the scenario where I write an action method that manipulates the HttpContext directly and I really want the method return type to be meaningless?\n. Detecting if stuff has been set on HttpContext seems like a slippery slope. What about headers? Content?\n. We decided to remove the 204 behavior when returning void.\n. Yup, we haven't done the work yet to support Web Pages scenarios in MVC 6. For this scenario you can use @Html.Partial(...) instead.\n. @korzh Is this really for blog posts? It seems a bit odd to allow server-side code in user blog posts. Or did you have another specific scenario in mind? Any information you can give us about your specific scenarios would help us understand what the right solution is here.\n. Putting on the backlog for now as we are already over booked for the current release. But we can re-evaluate as we understand the scenarios better.\n. Not sure if this info is too noisy to have in our logs. Pushing it out until we get customer feedback.\n. @sornaks Please confirm this issue has been fixed in Mono and then close as appropriate.\n. Note that we plan to clean up the naming of Inject vs Activate vs FromService. See https://github.com/aspnet/Mvc/issues/2151.\n. We plan to stick with the default JSON.NET behavior. \n. @davidebbo @davidfowl Thoughts on how to debug this?\n. @dougbu Please post to the Announcements repo when done.\n. @DamianEdwards \nSounds reasonable to me.\n. @davidfowl @Eilon What's the plan for precompilation all up?\n. @maxbundchen What version of MVC are you seeing this on? Could you please also show us the exact output you are seeing and what you expect to be produced?\n. Yup, we think this is a great idea. We experimented with this a bit in the Music Store sample. This feature would need some design and discussion. Would you be interested in proposing a design PR?\n. Yup, the fix is in beta5.\n. @DamianEdwards thoughts?\n. I can live with AppendVersion. I also like AddFileVersion.\n. Yup.\n. Moved to https://github.com/aspnet/CORS/issues/19.\n. @rynowak Let us know if you think we need to investigate this for beta5.\n. Instead of relying on statics we recommend passing through the services you need when creating your Entity.\n. We include Bootstrap in some of our project templates, but it isn't required. You can, for example, create an Empty project and add whatever you want.\n. Looks like this was due to recent API renames.\n. Tracking this as a tooling issue.\n. We are maintaining the existing folder name conventions from MVC 5 for compatibility reasons.\n. @blowdart How bad is the user impact? Does this need to be fixed for beta5?\n. @HaoK What issues would folks potentially run into if we don't fix this for beta5?\n. @dougbu Could you please try to reproduce this issue?\n. Could you please share with us more details on your Tag Helper project so that we can take a look at the 403.14 issue? Can you share the project with us?\n. @blowdart \n. Technically asp-action=\"@nameof(HomeController.Action)\" is problematic as well because you might have [ActionName(\"Foo\")] on your action.\nUsing nameof in this way may work in some cases (ex you name your controller \"Home\" instead of \"HomeController\") but nameof is not aware of the Application Model and so cannot work in all cases.\nWhat we could do is consider providing an API that allows you to get the controller name or action name based on a type.\n. @Tragetaschen Thanks for reporting this issue! Do you have a simple project you could send us that reproduces this issue so that we can investigate?\n. We can't change the underlying BCL semantics - those semantics are not specific to MVC. You have to use the features of the underlying formatter if you want these semantics.\n. @blowdart \n. MediaTypeFormatter has been split into IInputFormatter and IOutputFormatter in MVC6. You can take a look at the built-in formatters in MVC to get you started. For example:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/StringOutputFormatter.cs\n. Routing in general is not a declarative system. You might be able to do this for constrained cases (ex attribute routing) but not in general. Can you tell us more about your scenario? Is this simply for debugging/diagnostics purposes?\n. ",
    "harshgMSFT": "Changing the bug title.  We are already taking care of \nFromBody, FromForm, FromQuery and FromRouteData attributes for action parameters.  #860\nThe workitem remaining is \n1. Support FromHeader, FromServices for Action Arguments #38\n2. Support all these attributes at a property level. (Including controller properties.). #801 \n. This is already done.\n. Workitems: \n1. Provide a collection of Input formatters: The defaults will be exposed through MVCOptions.#851 -1 day.\n2. Changing the current api structure to use the httpabstraction header parsing and use that for content type matching. - 1 day.\n3. Need to design around how to return an exception back. #458 - 3 days\nWhere do the input formatters hang off ( it is helpful if someone wants to use a filter to add/overide the default formatters).\n. Closing this one as the items are being tracked separately. \n. @dougbu .. We discussed and we thought it is better for the class to remain a sealed class, and not be introduced in the DI System. The only scenarios where people want extensibility, is \na. When people want to use their own claim types and extract the claim id. \nb. On top of what the AF system does provide an additional check ( a good example would be to check the timestamp on the cookie and expire it if needed). These scenarios can be met by IAdditionalDataProvider.\nc. If an advanced user does want to replace the entire AF system, he /she can change the entry point by simply adding a new HTMLHelper which calls into their implementation.\n. @GrabYourPitchforks BranchUpdated.\n. I thought this is the call we made during the LAB session, and the reason was since we only supported these as our default for rest style calls, we wanted to expose support only those attributes. \nPlease let me know if we want to change that. (IMHO if we do then we should consider having convention based support for those verbs as well).\nBTW I have missed adding HttpPatch in this pr (my bad), I will update it to include that.\n. @yishaigalatzer / @Eilon Please have a look, esp at the HtmlString DisplayNameForInnerType<TInnerModel, TValue>(Expression<Func<TInnerModel, TValue>> expression);  method.\n. Branch updated @yishaigalatzer @rynowak @javiercn please have a look. Thanks. \n. @rynowak  Branch updated :)\n. Its not super important because we do not expose the methods publicly, but I think we should take this for beta. The risk here is minimal and the tests should catch a regression if any.\nCurrently we have a private implementation in https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/AntiForgery/AntiForgeryTokenSerializer.cs\n. eccefaffba461dfe8a12ec531bd66a35b8d627ee\n. Changes committed : b444f66689a43cebf64f967a4148e7f8b91218f0\nPrabhu Please verify and close.\n. Opend issue #333 to track the test case.\n. .5 day\n. BranchUpdated\n. @davidfowl ... have a look at BuilderExtensions ..\n. Opening a tracking bug for PR #290 \n. @yishaigalatzer how about \nAntiForgeryProvider  OR AntiForgerySystem\n. The class name is same as what MVC had.Keeping this for now, we can get back to this if we hear something. \n. @rynowak Branch Updated \n. @yishaigalatzer  branch updated.\n. @davidfowl ... please let me know if this is not the intended pattern use  :smile: \n. Branch Updated\n. @davidfowl , @yishaigalatzer Can I get a ship it please  :smiley: \n. @davidfowl .. ping can you please take a look. \n. @davidfowl  Branch updated.\n. @davidfowl .. ping can you please take a look. \n. @davidfowl  branch updated.\n. #458\n. #1046\n. 1. Need http abstractions for obtaining content type and accept headers.   aspnet/HttpAbstractions#68\n   a. Also something like request.Properties which are used to fetch things like ODataProperties.\n2. Infrastructure to expose configurations/Options  #709\n3. Flowing exceptions back ( how does conneg flow 406 or 415 responses). #458 \n4. Add existing output formatters: #707 \n5. Provide a way to access the request when doing conneg. -> What are the scenarios for this? (ODATA??)\n6. Diagnostics. #708 \n. @pranavkm  HttpRequestMessage.Properties ( its a Dictionary<string, object> and is used to populate ODataProperties).\n. Adding one more: Porting BSonFormatter.\n. Things remaining: \n1. Object Result exposed through DI. 1 day\n2. Move OutputFormatter provider to the latest MVCOptions  pattern #877 . .5 day\n3. ContentResult, JsonResult related items ( like returning 204 if there is null content. and making JsonResult participate in response conneg.)) .5day\n. 85b6382c69983d29404994dfc36572a4dab7eac7\n. @davidfowl, is there some place where we can get access to application name? THis one lives in options so i am not too sure how to get hold of application specific info. Is there a patter for this already?\n. 5818c0b5b71d4b0f21ef0ff5fc34a64200df10c0\n. :shipit: \n. looks good :shipit: \n. @yishaigalatzer  for the subarea like test, there is already one (Unit test) which tests it for a random key. I will add a new  functional test in a separate PR. \n. @yishaigalatzer , @rynowak  branch updated.\n. Already done.\n. Done\n. @kichalla : Regarding passing in HttpContext vs HttpReponse, I think you have a valid point, the reason why I removed was with httpcontext the api does not speak what is supposed to be done..\n. @yishaigalatzer, waiting for your feedback :).\n. Ping\n. TryUpdate model is updated with the predicate based include and no excludes. The work remaining here is to do the same for Bind Attribute in #1546\n. Ping .\n. @yishaigalatzer, Will handle the IOutputFormatter as a separate PR ( as I already have sign off for what this pr is supposed to address). \n. d00c7ef59723fa2d7d5a544b9a831b73eb397c12\n. branch updated.\n. add one more to make sure json formatter's stream not flushed\n. Branch updated\n. Branch updated.\n. Thanks @rynowak, @yishaigalatzer waiting for your sign off.\n. Branch updated!\n. @yishaigalatzer Ping.\n. @pranavkm branch updated. \n. Commit # 307c191c177d376004f3a7e045ee5f788c6c7423\n. Prabu can you please verify and close?\n. branch updated. \n. Branch updated.\n. Branch updated. \n. Branch updated.\n. Branch updated ( Rebased and addressed comments). \n. Branch updated\n. Branch updated. \n. #956 \n. @GrabYourPitchforks , @Praburaj \n. 8f933b2ac3290fd15a8950c20dcfc86cda5947dc\n. Branch updated.\n. The object result pr does remove that. I was planning to push this in post the changes of object result. \n. Branch Updated. \n. :shipit: \n. This is done .. 2fe2efa94a95a64da4a2b2cdb2ab5748909cfc64\n. :shipit:  when @rynowak  is happy.\n. @pranavkm this is fix for #877 \n. Pending on https://github.com/aspnet/Perf/issues/263\n. @yishaigalatzer , @rynowak ping\n. Ping....\n. Branch updated.\n. @yishaigalatzer ping\n. TODO:Cleanup JsonOutputFormatter as well. \n. Branch updated. \n. Ping\n. Ping .. @yishaigalatzer , @rynowak \n. @balachir this should be fixed now .. can you please verify and close?\n. Closing this pr as we decided not to have type based registration for input formatters. they are going to be instance only. Will open a separate pr. \n. It does not matter if it is not a SPA, you just need to use the cookie to get an authentication token and use that on every request hence forth. For a web api end point, that is the recommended way. \nIf you still want to use it anti forgery you can you don't have to pass in a old cookie, you can set it to null and the server will always generate a new af token and a new cookie everytime. Its up to you if you want to cache and reuse the cookie.\n. cc/ @yishaigalatzer \n. @kichalla, Is the scenario interesting for query alone? I would think the alias should work even if the value is read off something like Form.\n. :shipit: \n. :shipit: \n. @pranavkm, @yishaigalatzer  ping.\n. I'm planning on checking this in by today eve. Please let me know if you have any comments.\n@yishaigalatzer \n. Will be doing remaining comments as followups ( the change had gone in hence).\n. cc @pranavkm \n. @yishaigalatzer , ping.\n. @rynowak , @pranavkm Would be great if you folks can  help me review this final iteration. Thanks in advance.\n. rebased.\n. @rynowak , @pranavkm branch updated.\n. @yishaigalatzer , @rynowak, @pranavkm   ping.\n. @rynowak , @pranavkm .. branch updated. \n. @rynowak - Thanks for looking at it :). @dougbu branch updated.\n. merged 64d797a48913eba9a8ea2926245bf548b23ce318\n. cc @davidfowl \n. :shipit: \n. From @rynowak \nThis is a common scenario for data contracts - I might have a derived class D that inherits from type B, but I want to serialize it as type B. [Produces(..., Type=typeof(B))] should apply that behavior no?\nThe current thinking is for error scenarios, the object that returns can be different from the success case object. hence we are not doing it by default. \n. Has been changed to IApiResponseMetadataProvider by 3cd6d3e060c96f11ab0db43492a14da82a2988f9\n. :shipit: \n. Adding some more context about the bug: \nBind Attribute \n1. Can be specified at class or parameter level. \n2. It defines three properties : \n      a. Include: Can be used to selectively include properties.Is applicable for parameters and types.\n      b. Exclude: Can be used to selectively exclude the properties.Is applicable for parameters and types.\n      c. Prefix : Only applicable if this attribute is decorating a parameter. \n2.a and 2.b can be achieved using the \n[BindRequired] and [BindNever] attribute by defining them directly on the properties or on the Type definition. \nGaps: \n1. Bind Required and Bind Never cannot be annotated on Parameters. \n2. There is no way to provide prefix value for the parameters. \n3. [BindRequired] and [BindNever] do validation as well. Historically this was to prevent under binding ( i.e to ensure that the model has a user provided value and not a default value).\n- Given the above use cases, except for the addition of prefix, I don't see much value in having a Bind attribute along with a BindRequired and BindNever attributes. The prefix part also needs to be solved for https://github.com/aspnet/Mvc/issues/925 and that should not be solved using the bind attribute.\n. 75405e3b761ad8c55f8fbd1ef311454342568860\n. we are sticking with descriptor model.\n. Need to add tests. \n. yes. we would need to handle the case in the formatter selection algorithm. Right now the assumption is that headers are always correct ( and if not the parsing layer throws). \n. @Tratcher this would impact strongly typed header parsing...\n. Thanks for sign off :smile: \n. @sornaks, I think it is good to have two websites, one for the input side and one for output site, we can call it something other than \"Conneg Website\" if that makes more sense.\n. :shipit: \n. merged: \n7a3dc352c96831827efde3506dac763253b95c4b\ndd564a35fbdc48746a430fbb20d38e73289afd45\ne884a476e99eb7742053756484d4b129ab94fc57\nabf27d883f56813563ed058742d476abd0990baa\n7448bf2843d3123fea4db56138b155db293413c6\n33173d3031c251714fefcbc0f6fbafccb95c4e03\n. Fixes #458 \n. Updated.\n. :watch: \n. @yishaigalatzer yes - the solution for both is similar.\n. :watch: \n. I still see unaddressed feedback :watch: \n. @rynowak , @yishaigalatzer  branch updated.\n. @yishaigalatzer , @rynowak  branch updated. \n. @rynowak  branch updated.\n. @yishaigalatzer pending on your sign off..\n. looks good over all. Not very sure why are we calling it \"Resource\" ... \n. LGTM :shipit:  from me.\n. also close https://github.com/aspnet/Mvc/issues/971\nWhen  you merge.\n. Sorry I don't get why that should be the case, while the behavior would be identical since there is a no content formatter, returning null and returning no value are two different things and should be kept different. What is the downside of the current code?\n. Duplicate of #1077 \n. Not a duplicate reopening.\n. Fixes #958 as well\n. Also consider #919 ( writing the content-length).\n. :watch: \n. Also add a functional test which verifies that the response is not chunked. \n. :watch: \n. :shipit: \n. today for Web api, we do return 204, for MVC we return 200. To me it makes more sense to not break web api in this case and have 204 stamped on the response if the return type is a Task or void, simply because 200 might mean there is some response that might be present (depending on the type of the request). @Eilon , @yishaigalatzer  thoughts?\n. Changed the title to reflect the issue more accurately, this is not linked to #1071 as we thought earlier. The real issue here is that headers go out as soon as we start writing to the response and this behavior is host specific. At this point any output formatter/result filter would not be able to write anything to the response header. \n. Need functional and unit test for this.\n. #584 \n. Proposal is to wait till we have solved https://github.com/aspnet/Hosting/issues/70\n. Closing this as we will revisit once aspnet/Hosting#70 is fixed\n. :watch: \n. :shipit:  from me.\n. cc @GrabYourPitchforks , @Tratcher \n. @yishaigalatzer  branch updated. \n. :watch: \n. :shipit:  when @rynowak  is happy...\nON second thoughts, taking the shipit it back. .. please remove all other formatters from the collection in the XmlSerializer formatter.. to ensure we always test XmlSerializer. \n. @PinpointTownes , Can you please share the app I am unable to repro your scenario with \nGET http://localhost:42750/Binding/Action HTTP/1.1\nHost: localhost:42750\nConnection: keep-alive\nCache-Control: max-age=0\nAccept: text/html, application/xhtml+xml;q=0.9\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\n. Still doesnt repro: Could you tell me what is the version you are running against ? \nI ran it against \"Microsoft.AspNet.Mvc\" 6.0.0-beta1-11196\n. @PinpointTownes thanks for your help in getting to the bottom of this, @rynowak yes we should fix that as well.\n. :shipit: \n. I am not sure if we can answer should we surface a way to customize this through reflected model for properties/parameters? before seeing what the action descriptor parameter metadata looks like.\n. updated.\n. Closing the design PR. Will be following up with broken down pieces (separate prs) for this workitem.\n. :watch: \n. fix minor comments and then :shipit: \n. :watch: \n. fix line breaks. all over.\n. :watch: \n. :shipit: once @pranavkm is happy.\n. :watch: \n. Add the pending test case .. then :shipit: from me\n. :watch: \n. :watch: \n. :shipit: \n. @BernhardGlueck closing this as duplicate, if you hit this after applying the current bits, let us know.\n. Well the problem is - No clear separation of well known types ( which are known to the specific activators) and Services injected from DI. Its to do with Parameter and property injection using model binding. When we do that #801,#38, then there would be a model binder which works on injecting services for properties and parameters. That model binder will get selected based on a binder marker which is something like [FromService] , so for services having both FromService and Activate didn't make much sense to me. \nWe need to reach a conclusion on which pattern to support here. Obviously we still need to have Activate since classes like viewComponent are not populated using model binding, but we should avoid having two attributes which do similar things.\n. e319fef5cb39ba1a375545c86f8d8bc2f174ae9a\n. :watch: \n. :shipit: \n. e319fef5cb39ba1a375545c86f8d8bc2f174ae9a\n. @pranavkm The feature depends on 3 different services, i started writing the unit test, but felt that this can best be tested using a functional test. Let me know if you think otherwise.\n. pushed to the feature branch a50fdb6872f7c37869262d50db8cae54a268037e\n. cc @yishaigalatzer , @rynowak \n. @rynowak branch updated.\n. :shipit: \n. :watch: \n. :watch: \n. :shipit:\n. cc: @rynowak , @yishaigalatzer \n. @rynowak updated... Please have a look.\n. @rynowak , @pranavkm branch updated.\n. thanks @rynowak for taking a good crack at it even though time was short. :smile: \n. @pranavkm, Thanks for looking at it pranav :)\n. Prefix property will be added in a subsequent commit. \n. cc @rynowak @pranavkm \n. @rynowak  updated.\n. branch updated.\n. looks good overall, waiting for fixing minor comments :watch: \n. :shipit: \n. Rebase and :shipit: \n. d1c0213a101c2cc495c257e88f444803cc3ceda3\n. Closing this PR as the changes are radical and it will be easier to review in a separate PR.\n. @danroth27 , @yishaigalatzer \nLooking at the bug history from mvc 5.0 ( 225,800,891 on codeplex), No one requested addition of XmlNode to the list of excluded types, it was added  in \nhttp://aspnetwebstack.codeplex.com/SourceControl/changeset/ef2dfab3f6fbdf323230898608c867b7a4601fff commit with no specific bug info. \nI guess the reasoning was not to include anything from System.Xml.XmlDocument namespace. \nFor vnext though, if we do not want a dependency on System.Xml.XmlDocument,  I would recommend not adding XmlNode type to the list by default, the users who really depend on that type being excluded can easily do that. \nWe have #1372 to review the list of excluded types and addition of this type should be questioned at this point.\n. Blocking on the type name would require us to walk the inheritance chain (XmlNode is an abstract class), and match by name at every level. Kind of ugly to have in a framework. ... still think its worth it ? \n. If we want to go ahead with this IMHO instead of blocking on type, in this particular case blocking the entire namespace would be better. \n. Updated.\n. @pranavkm , @yishaigalatzer  ping.\n. Updated - Look at the last commit to see what changed.\n. @yishaigalatzer , @pranavkm - Updated Please have a look.\n. Updated.\n. f19c2e493d338c6d8724e3a16bbad0ac92a03054\n. cc: @rynowak , @pranavkm @yishaigalatzer \n. Part 2 will be the last part and will contain enabling FromXXX attributes on properties along with funtional tests around those.\n. Updated.\n. @rynowak updated.\n. @rynowak updated\n. :shipit: from me once we add the TreatNullValueAsNoContent test.\n. @rynowak I saw that, but that uses the NoContentFormatter, I wanted to have a scenario where the user wanted the behavior which kiran mentioned \nMy expectation is that when someones explicitly uses JsonResult, they really want json and no other formatter type should come into picture\nSo instead of NoContent, they get a valid response but with null content.\n. :shipit: \n. :watch: \n. :shipit: when @pranavkm  is happy.\n. cc @Eilon @pranavkm \n. @dougbu @pranavkm updated.\n. @dougbu updated.\n. @dougbu updated.\n. @dougbu updated.\n. @pranavkm can you please take a final look ?\n. updated.\n. 2353bd911ac137e7858de5bef88af8f7eccaa49f\n. Need to fix line breaks.\n. @yishaigalatzer, @rynowak updated, please take a look.\n. @pranavkm , @yishaigalatzer , @rynowak , Need more eyes. Can you help please.\n. @rynowak updated.\n. @rynowak spoke to @yishaigalatzer and he says I can go ahead if you give me a shipit :)...\n. Merged d00c7ef59723fa2d7d5a544b9a831b73eb397c12\n. if we start setting the form token in the request context, then it would be same as calling Html.AntiForgeryToken, which will result in the antiforgery token value floating outside where it is not needed. I would vote for a separate method which just adds the cookie. If the user really wants to play with the form token in HTML/Tag helpers he can use the Html.AntiForgeryToken overload.\nSomething like \npublic string AddCookieTokenToResponseCookie([NotNull] HttpContext context, string cookieToken);\nPlease note we can still name the HTML helper overload as PresetCookieAndHeaders or whatever name we come up with.\n. @DamianEdwards yes the cookie and the token have a common part (SecurityToken) that needs to match, \nSince the cookie is set on the request, it is already ambient, and can be used  to generate the corresponding af token .. Note : all this happens within the same request. The html helper does not need to do this because within the same request AntiForgeryWorker will try to see if there is a request cookie which can be used ( i.e is valid). and will use that to generate the form token.\nThe problem today is these two steps are munged into a single Html.AntiForgeryToken call.\n. @DamianEdwards yes If you have the cookie, you can generate the matching form token,\nalso for the \n\"Note that PresetCookieAndHeaders is a bit redundant as the only header that's set is a cookie\"\napart from the cookie we do set \"X-Frame-Options\" header to \"SAMEORIGIN\" unless the user has disabled it. \n. @pranavkm @rynowak @yishaigalatzer updated.\n. @pranavkm we agreed to take the activate vs from services discussion separately, from services is just a separate concept till we have that discussion.\n. @rynowak  updated\n. d2aff42e25dfb60684563f147ea82f8a8ec75b9c\n. The problem is since today CollectionModelBinder returns false, the MutableObjectBinder takes over and creates empty collection, going forward since the  mutable object binder has to deal with object creation based on IBinderMetadata (to support uber binding), it will now in addition to creating top level object will try to bind inner properties and will have all sorts of problems.\nEven design wise for collection models CollectionModelBinder should return true and the model binding process should stop there.\nis it different from MVC 5/Web API?\nWeb api and MVC did not create the object if there was no value. \nMvc 6 today does create an empty collection.\n. Ok .. sorry about not including a code sample : here is the actual issue ( after the Uber dust has settled :smile: ).\n``` C#\npublic class HomeController : Controller \n{\n           public void Action(IList  model)\n           {\n                  // Does something.\n           }\n    public override void OnActionExecuting(ActionExecutingContext context)\n    {\n        // context.ActionArguments[\"model\"] is null here.\n    }\n\n}\n```\nand consider a URL like so : \nhttp://localhost/home/Action\nWith no value provider having a value for Model or its properties, what happens is the model object created is null.\nThis is because GenericModelBinder ( which is the entry point for binding any collection based model) or more specifically CollectionModelBinder, does not create the model when  it does not see a value with a value provider. \nThis is contrary to what what we do with models in MVC 6.0. (we always create them).\nIdeally the CollectionModelBinder should have returned true after creating a default (non null) collection.\nThis is not a MUST fix as the user scenario is not broken but this provides an inconsistency in the system. \n. @bgeihsgt thanks for letting us know, as @dougbu said, we will need to pick back-compat or consistency. MVC 5.0 behavior for collections was to not create the collection (have them null) if there was no data on wire. (hence the back-compat vs consistency discussion :).\n. The reason for closing this pr was there was no way of specifying the name on individual [FromQuery],[FromRoute] and[FromForm]hence they needed to be clubbed with[ModelBinder(Name = \"custom\"]``` attribute which meant that this fix would have broken those scenarios. \nNow with #1983 we can go ahead with this fix. Also with BindingSource based implementations, there seems to be no good reason for not doing this. \nHanding with base types and properties,\nIt seems that the correct behavior is to have a behavior of closest to the model wins ( instead of throwing), as otherwise it seems too restrictive. \n@yishaigalatzer, @rynowak please share your concerns if you see any.\n. Closing this-> ROI on this is not high. We would have to implement this on MetadataProvider which would result in complicated code paths and not a clean design. \n. :shipit: \n. @dougbu  updated.\n. b54c326ee6d02f6a6e53fb97de2db1fa583bf8a1\n. cc : @rynowak @dougbu @pranavkm \n. @dougbu, I thought the code (with its detailed comments/summaries) was descriptive :) added a few comments in PR description. If this does not help lets sync offline.\n. This is already in.\n. looks pretty close to done :watch: on doc cleanup and tests.\n. :shipit: after reverting the unrelated changes.\n. @rynowak updated please take a look.\n. Updated.\n. @rynowak ping.\n. 262bb9a7323b664d4b860931c04d1aea8142facd\n. :watch: \n. Defining the pass through scenario more explicitly \nc#\n[Consumes(\"Application/XML\")]\npublic void ActionMethod([FromBody]UserType userType)\n{\n    // Selected if contentype is application/xml or if there is no content type/body in the request.\n}\n. :watch: \n. fix comments then :shipit:  from me.\n. @rynowak @yishaigalatzer \n. Updated\n. :watch: \n. We decided not to do it because there are scenarios where ModelBinder attribute can be combined with  a From* attribute, ModelBinder attribute is used to provide the name in this case. \n. #1597 \n. looks good overall waiting on on test and update to the readme. \n. :shipit: \n. :watch: \n. :watch: on pending comments. Please fix it and send another iteration.\n. :shipit: \n. 106b9fc30c33c4c165f0b7bbaf8b314cb02876c4\n. will send a separate one for helloworld.html\n. @rynowak .. yes thats exactly the conversation I had with @yishaigalatzer today .. the check inside [FormatFilter] needs to be reversed.\n. :shipit: \n. looks in the right direction :watch:  on name changes and the HtmlHelper removal change.\n. looks almost done :watch: for NotNull and test cases. \n. :shipit: after fixing the comments.\n. :shipit: from me once you fix minor cref comment.\n. fix comments then :shipit: \n. i'd expect\n[Produces(\"*/*\", Type = typeof(Person))] \nshould not be a supported scenario specifically after we have solved #1065, there should be no need for a user to specify / and we should probably block it. \nfor \n[Produces(\"application/*\", Type = typeof(Person))]\nI would expect content negotiation to kick in and we should fix this.\n. Looks close to done .. :watch:  on couple of tests and minor comments.\n. my bad .. didn't see that somehow, :shipit: after  fixing minor comments in tests. \n. @stanislavromanov renaming of AntiForgery cookie was always there in options. You could update the cookie name in startup.cs like so \nc#\n   public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc();\n            services.ConfigureMvc(options =>\n            {\n                options.AntiForgeryOptions.CookieName = \"YourCookieName\";\n            });\n        }\n. updated\n. :watch: \n. :watch: \n. @yishaigalatzer  please take a look if you want to. Let me know if I can go ahead without your sign off.\n. ### Decisions :\n1. The controller properties are not present in the actionArguments dictionary. If a filter needs it, he can get it via controller object. \n2. Activate attribute will be no longer applicable for Controller ( will still be used for view components etc). The activate concept for controllers will be replaced by a new attribute like FromBinding (or ModelBinderAttribute.. the jury is still out on that.). \n3. Controller properties are opt in. \n4. Controller Properties will be added to actionDescriptor.Parameters  collection. \n5. Validation, ApiExplorer, Errors for multiple FromBody, work as they look at actionDecriptor for parameters. \n. adeb1ba194ba24663bb41c954c0acbe12c494ced\n. :watch: \n. FromHeader with no name means it will use the property or the parameter name for model binding. It should not be in the constructor as it is not required.\n. Well we get model state error based on data annotations... From header is not related...if there is no value from header we do not add a model state error unless there is a required attribute. Curious if you had some specific scenario here.\n. nope e805e67b4c96dd619daab4ff57f5bea2d0b5c3f9\n. Add tests for error scenarios : ( binding source composite not allowed for model binders and value providers etc), ... other than that looks close to done.  :watch: \n. Should we add one test case which shows how to create a custom model binder which uses a value from a value provider and some external source( eg a combination of from form and from body)? This is interesting because we do not intend CompositeBindingSource to be used for this purpose, and having a test like this would really be a sample on how to do composite sources. \n:watch: \n. :watch: \n. :shipit: \n. Have not added the test changes which would have increased the scope of this pr .\n. Sure ... lets discuss tomorrow for the two concerns you have.\n. @rynowak @pranavkm Updated with the actual PR ( no longer a design PR). \n. @pranavkm @rynowak  updated.\n. Updated @rynowak  I have not renamed IObjectModelValidator -> IModelValidator -> IPropertyValidator. \nThat can be done in a followup PR. I want to get this in asap.\n. @rynowak updated.\n. Sure, the consumer in this case is model binding and there is nothing preventing model binding from consuming if a value provider ( in this case the route value provider) would give a value for Company/[action]/{company.Employees[0].TaxId}. The reason for this bug is today routing layer throws for such a key. We would have to decide if we want to allow such scenarios or explicitly block it ( even then I would say doing it at routing layer does not make much sense). \n. @rynowak .. yes this is still open I am not sure if @yishaigalatzer  wants to take a look. \n. @dougbu \n\nthe [From*] attribute extensions are only part of this PR (and I didn't object to extensively unit testing these attributes). the PR wouldn't change the binders at all if it were truly about a single concern. as a result, this PR changes the meaning of [ModelBinder(Name=)] without testing the new behaviour.\n\nI do not understand how this PR changes the meaning of [ModelBinder(Name=)] ?\n\nour functional tests are commonly read as samples and we point our customers to them.  we should therefore be showcasing mainline scenarios e.g. [FromQuery(Name=\"customPrefix\")] on an action parameter and [ModelBinder(Name=\"EmployeeSSN\")] on various properties.\n\nagreed, but what I meant was the functional test uses the same model to test FromQuery FromForm and FromRoute. This just showcases how this can be achieved. \n\n[ModelBinder] as a solution for the general naming issue isn't discoverable.  I could however see adding [ModelName] as a follow-on issue.\n\nLets open a separate issue to track that. This needs triage.\n. @dougbu  updated.\n. @dougbu  the tests with custom prefix for ModelBinderAttribute are already there please take a look at https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.FunctionalTests/ModelBindingModelBinderAttributeTest.cs\nPlease let me know if you see something missing.\n. @dougbu added a new test case for property.\n. 85b6382c69983d29404994dfc36572a4dab7eac7\n. :shipit: \n. fix line breaks all over.\n. :watch: \n. :shipit: from me after fixing the formatting. \n. :shipit: once @yishaigalatzer is happy\n. e0f7c1b810660a20df81292d7734e1e24e2b1ab2\n. :watch: \n. :watch:  on minor changes and few tests.\n. :watch on one more test.\n. :shipit: \n. @loudej @Eilon  Ping.\n. branch updated.\n. @lodejard ping.\n. @rynowak  updated.\n. 015edefa96c2eec7a474489a93a533e10ac74c7e\n. :shipit: with followup issues.\n. :watch: \n. :watch:  for more tests.\n. :shipit: from me\n. Well the reason for not naming the properties same is this: \nController properties which are bound are available for all actions and the intent of the design was to treat controller properties as nothing but action parameters. So ideally we should have never had two separate property collections. However we ended up here because action parameters can be seen by action filters and can be modified before the action is invoked, which meant if we made controller properties part of the same dictionary, we would have to 1. Update the controller object in case of modifications, 2. Handle name clashes (with controller name and property name). \nWhile these are solvable problems, we chose to deal with these re-actively (lou's suggestion). \nThe current abstraction (CommonParameters) is in direction of this intent.\nNow since the action descriptor does not know if there is a controller at all, I called it CommonParameters, (i'll be happy to use a better name though). The reason why its still ControllerProperties in ControllerModel is because that reflects the true state of the application, not a logical concept.\n. @rynowak everything except the property hiding logic... will do post your changes. \n. adeb1ba194ba24663bb41c954c0acbe12c494ced\n. Is this related to https://github.com/aspnet/Mvc/issues/1865? \n. I see, the cause of concern seems to be similar for both bugs, i think this is because in https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.ModelBinding/Binders/GenericModelBinder.cs#L29 we return a value even if there was no value bound. Which is why it does not fallback to empty prefix. We should fix this asap.\n. One thing that we would need to document is if there is a Produces with one or more content types specified, the flag does not matter .. We should add a test case to that effect. :watch: .. this is the last thing I promise :smile: .\n. :shipit:  when @rynowak is happy.\n. :heart: it ... :shipit: \n. @rynowak  updated.\n. @rynowak updated.\n. @rynowak  updated.\n. :watch: \n. :watch: \n. :shipit: \n. Should be affecting anything and everything related to a collection.\n. :shipit: \n. :watch: mainly for the comment on DefaultModelMetadata.cs\n. :shipit: \n. See https://github.com/aspnet/Mvc/blob/533474d07cf2e157a34b8e49194d5e5e6274e7b0/test/Microsoft.AspNet.Mvc.FunctionalTests/ModelBindingTest.cs#L1982\nfor a test which hits into this scenario.\n. ah I see.\n. Not Repro. the issue with @kirthik ran into was she was sending {} instead of an empty string ( no body) {} binds to a new object and not a null value. Hence the behavior.\n. Updated\n. :watch:  for minor comments. \n. :shipit: from me.\n. cc: @dougbu , @rynowak \n. Closing.. will create a new one if we decide to fix this.\n. :shipit: once unchecked is removed. \n. :watch: \n. 58a5ad22797f5dc3589a341832715dc188b0b3e9\n. 7f68a47fde0bd41608dedb6ccdb799898290a29e\n. This is not just limited to [FromServices] it would be the case for any property model bound in the base controller from model binding, and having a data annotation that fails.\nSince we own the type not adding a skipped entries for [FromServices] should work for now, but as soon as we start adding things like [Activate] using model binding instead of static dictionary in ControllerFactory this would not work. \nThe real problem is that validation and model binding share a common state which is ModelStateDictionary and that is the same as what we expose to the user. The ideal solution would be to separate them out.\n. @pranavkm I do not think that we should be using ModelBindingContext for input formatters simply because there are too many model binding specific properties on MBC which makes it the MBC ( and not  InputFormatterContext). The ActionContext was flown so that any custom input formatter can have access to Request data as well as anything related to the action based on which it can choose to act differently. \n@rynowak  can you point to the relevant layering bugs for better understanding. \n. as part of ResourceFilter it can add or remove an input formatter or modify a publicly exposed setting of the formatter, but if there is something that input formatter needs to decide ( not applicability but how to deserialize etc). Its really arguable but its more extensible this way.\n. Model binders already have an operation binding context, which gives them access to all they can need. Not getting into a debate here, I am not arguing if it is necessary or not, I am just mentioning why it was done :smile: .\n. @rynowak updated\n. @rynowak updated.\n. 0c0fa10ed0687e5e7885c4bda147858bc486ac05\n. fix comments and optional nits then :shipit: \n. updated.\n. > are CIs failing because you haven't rebased recently?\nYes, but they seem to be failing even post a rebase, I will check and update before I merge.\n\nwill ModelMetadata additions we discussed today be included in the next iteration?\n\nWhat changes the required changes are already there in DefaultValidationMetadataProvider.\n. @dougbu  updated.\n. :watch:  on one test case.\n. :shipit: \n. :watch: looks good overall. Waiting on cosmetic fixes.\n. :shipit: when @rynowak  is happy.\n. @rynowak I thought the whole idea was to do it right before  filter invocation so that ActionContext.ModelState has the correct value to begin with, doing it later (as we do it now) would mean that any filter that overrode the value would not be effective. i.e it would be reset.\n. :shipit: \n. > Where are the MVC options? I haven't touched MVC6 yet\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/MvcOptions.cs\nDefault set of options for MVC ( Gets added when Mvc is configured for an application).\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/MvcOptionsSetup.cs\n\nCan you point me towards your custom contract resolver? I didn't see it.\n\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/JsonContractResolver.cs\n. :shipit: \n. @dougbu  I have updated the comment to provide a better description. And no there is no issue for this one. \n. @dougbu @rynowak updated with the behaviors agreed on.\n. You probably want to throw in some functional tests which bind collections on controller property. \nTo enable this scenario I think you would need to update the line\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/DefaultControllerActionArgumentBinder.cs#L73\n. :shipit: \n. :shipit: after fixing minor issue in test.\n. @Bartmax The reason for not logging an error is that '[Required]' means that the value should be not null. In case of value types it can never be null. So instead of overloading Required to mean not present in the request we are going with what it is supposed to mean (not null). \n. @rynowak  updated\n. MVC 5.0\nFor \n``` c#\npublic ActionResult Foo(Person[] people)\n{\n}\npublic class Person : IValidatableObject\n{\n           public string Name { get; set; }\n           public IEnumerable Validate(ValidationContext validationContext)\n            {\n                if (Name ==  \"c\")\n                {\n                    yield return new ValidationResult(\"c is not allowed.\");\n                }\n            yield break;\n        }\n\n}\n```\nif there are three people bound\nwith query string as  ?people[0].Name=a&people[1].Name=b&people[2].Name=c\nthere would be FOUR entries \npeople[0].Name,people[1].Name,people[2].Name,people[2] - this one has an error and no value.\nFor the other scenario listed in the bug, MVC 5.0 does not add the key with parameter name. (adds only what is bound).\n. That's how we exclude, by marking it as skipped. Note that this also applies in cases when it shows up as property.\n. In alignment with the agreed principles, we would not be adding any entry in the model state.\n. :shipit:  after fixing minor comments.\n. :watch: \n. Sorry for commenting on the commit rather than on PR. :shipit: after addressing the comments.\n. :shipit: after addressing comment.\n. Related to the fix I was working on.. hence reassigning.\n. In Mvc 5.0 if Document implements IValidatableObject there are two entries \nDocument  and Document.Version.\nThe first entry is added only if there is an error reported by the IValidatableObject.\n. @rynowak @dougbu \n. @rynowak updated.\n. > we discussed the approach at length when making the changes you've highlighted and this was the best idea anyone came up with. in particular changing the condition leads to a ripple of additional complexity in other parts of the system and unnecessary churn, ending up with no measurable improvement.\nWell the only reason we (or at least I did) agreed that time was we wanted to move forward with the release in mind, having that line in the code is a hack and not a solution. And yes you are right I should have included the user impact. Sorry for the confusion and here is the detailed scenario : \n``` c#\npublic class Document\n{\n       [FromHeader]\n       [Required]\n       public string Version { get; set; }\n}\npublic void Action(Document doc)\n{\n}\n```\nIn this case if there is no header called Version we end up returning \nnew ModelBindingResult(model: null, isModelSet: false, key:\"Key\");\nwhich means a composite model binder chooses to return null from https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ModelBinding/CompositeModelBinder.cs#L120\nNow in this particular scenario the user visible problem is\nWe return null from https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ModelBinding/CompositeModelBinder.cs#L52\nThis results in ComplexDTOModelBinder returning a NON-NULL MBR from https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ModelBinding/ComplexModelDtoModelBinder.cs#L37\nwhich uses constructs a key which is later used to addvalidation errors - And hence the user impact. \nAll of this because we chose to hack our way in ComplexModelBinder.\nAlso consider the following scenario\nc#\npublic void Action([FromHeader] string Version)\n{\n}\nAssume there is no header called Version. In this case because we chose to ignore a non-null ModelBindingResult from a greedy model binder, we fall back to the emtpy prefix case even though we know for a greedy model binder, it should not make a difference.\nPlease note I took an example of HeaderModelBinder, but this happens with BinderTypeModelBinder, and any other greedy model binder which does not add a model state error with a key :).\n. > not seeing an actual impact in any of this. you haven't described a difference in whether values are correctly bound, in the ModelStateDictionary instance, and so on. ModelBindingResult isn't seen outside the model binding system.\nAs i mentioned which uses constructs a key which is later used to addvalidation errors - which implies that the model state entries are incorrect. I thought that was obvious. \nI do not want to get into what is the right implementation for the bug- \nI just want to make sure the behavior of the composite model binder is something we agree on. \nAlso please note the second scenario as well - there too the model state entries key change because they fallback to the empty prefix and that messes up the keys. \n. Fix minor comments then :shipit: \n. One thing that I missed commenting on : \nShould we add a test case for each category which is \nPOCO>POCO, where the nested POCO gets created because all properties are bound from a greedy model binder?\n. :shipit: \n. Fix test names then :shipit: \n. cc @rynowak \n. @rynowak ping.\n. @rynowak I removed the controller tests, there are already good unit tests covering the scenarios for mutable/arrayand readonly properties. \n. > in that we're trying to get the model binding infrastructure to \"run,\" without making a full request/response chain.\n@bojanrajkovic if you closely look at the integration tests pointed by @dougbu, they do operate without needing to set the response pipeline. They do still configure request as that is the place you fetch data from. They do not have to host a site which a functional test would. So in essence they are between unit and functional test and you should be able to write one pretty easily.\n. :watch:  for minor test name update.\n. :shipit: from me.\n. @rynowak , @dougbu updated it to not be a design pr anymore. \n. @rynowak , @kirthik @ajaybhargavb branch updated.\n. 204 is no content and is the right behavior for the middleware.chrome should display no content \ud83d\ude0a for this status code. Can you please post your request and response. \n. > This change is important especially for InputFormatterContext as it\n\ndecouples ModelState and ActionContext - allowing us to fix a\nrelated bug where the wrong ModelState can be passed in for a\nTryUpdateModel operation.\n\nCan you point to the bug?\nDoesnt this change decouple ModelState and Input/Output FormatterContext and not ModelState and ActionContext?\n. :shipit: \n. Would you be also handling removal of errors for required attributes on value types. \nBasically JsonInputFormatter  has code to add an error for those, we should yank that out as well.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/JsonInputFormatter.cs#L70-L80\n. @dougbu @rynowak updated.\n. :shipit: \n. @dougbu  Yes its the same, but i didn't want to update the other branches otherwise the PRs would have been messed up hence created a temp base branch. \n. @rynowak updated. @dougbu The base branch SkippedFixesBase is same as CleanupMSD branch and was created so that you can only see the changes which pertain to this PR, If you sign off it will be merged with CleanupMSD and if you sign off CleanupMSD it will be merged to RestoreValidationNode branch. If you sign off RestoreValidationNode it will be merged to dev.\n. :shipit: \n. :shipit: \n. :shipit: \n.  @darrelmiller - \nYou hit the nail on its head \n\nOn a related note, if this was to happen we would need an similar attribute to the Produces attribute for declaring which inputformatters are valid for the particular action.\n\nYes we do have an attribute which lets you specify which content type is supported for an action . \nIts called Consumes. \nexample\nc#\n        [Consumes(\"application/json\", \"text/json\")]\n        public Product CreateProduct([FromBody] Product jsonInput)\n        {\n            return jsonInput;\n        }\nThe above code will return a UnsupportedMediaTypeResult which means its a 415 if there are no formatters which support  application/json or text/json.\nNow coming back to how can an action detect this\nSince there can only be one and only one parameter (or property) which is bound from body the model state can be looked up to see if there is an error and return a 415. (Please note that there is no strongly typed way to detect that the error was due to a missing input formatter, so use consumes for your scenario.).\nHTH\n. It will be interesting to see what scenarios you have in mind. Can you please share what are we trying to achieve?\n. Fix line breaks all across.\n. Yes. Closed.\n. :watch: \n. :shipit: \n. open an issue and then :shipit: \n. related to this PR issue #2633\n. :shipit: \n. ",
    "javiercn": "2 days + PR\n. @harshgMSFT Ran into this exact scenario with Html.BeginForm, I think failing silently is a bad idea. \nI'm more inclined with the approach of throwing rather than generating broken links. The reason is because when I'm developing, if for example I misspell a letter from any of the values I still generate a link that I might think works (because I generated a link) but is not valid, rather than if I throw I get feedback instantly and get pointed on the right direction).\nHowever, I also understand that it'll be frustrating to throw just because you didn't wrote a controller or action for a link. I follow a similar flow as the one that you described when I develop MVC apps and I would find throwing every time very annoying.\nIn the end I believe there is no silver bullet for this so I think a third option could be to make this behavior configurable. (You might turn it off when you are developing (if you choose to do so)) and enforce it at runtime when you run tests, etc. That option is best of both worlds I think.\n. ActionLink needs tests\n. Porting HttpNotFound\nIn Mvc you have two versions of this method:\n1. HttpNotFound().\n2. HttpNotFound(string statusDescription).\nThe first one can be ported without problem. The second one is more interesting though. In MVC vPrev this ActionResult does \nResponse.StatusDescription = statusDescription;\nfor which there is no equivalent in the new Response abstraction.\nThe result of doing that is that the HTTP response heading looks as follows:\nHTTP/1.1 404 My status description\nAnd with the YSOD for the body of the message, which get's displayed on the browser. I'm not sure about how HTTP friendly is to change the reason phrase of a response, but I would say it isn't very friendly.\nCurrently what I'm doing is\nresponse.ContentType = \"text/plain; charset=utf-8\";\nresponse.WriteAsync(statusDescription);\nthe problem with that is that it doesn't get displayed in the browser window.\nHowever, I'm not aware of a good way to trigger the BSOD in the new stack. Is there any? Ideally I would like to have a way to return a not found response that would look like a BSOD and could be visible on the browser.\n@pranavkm @yishaigalatzer Thoughts?\n. I'm taking out HttpNotFound(statusDescription) from my PR and I've filed the following bug to track the issue separately https://github.com/aspnet/Mvc/issues/842\n. Part 1 is in.\nNext is BadRequest() which will be HttpBadRequest() to keep it consistent with the rest of the action results. See #888 \n. @Eilon @davidfowl I've solved some of the comments and changed the approach in order to be more correct and realistic.\nI still need to reference the samples folder in the project.json, but I think the overall contribution shows a good starting point to showcase how to perform these type of tests and provides the value of checking the integration of the different components when run on the CI.\nI don't expect this to live forever on the repository, so that's why I don't want to call it FunctionalTests, but for now It provides the value of ensuring that we don't inadvertedly change an existing behavior while modifying any part of the framework or that we don't break due to a change in any of our dependencies.\n. Based on the feedback of @Eilon I'm closing this PR. There is an alternative PR #549 that creates proper functional tests.\n. Sorry in advance for the jquery, bootstrap, etc. files in the PR, I want to have them on the project so that it runs as a regular web site on IIS and couldn't figure out a way to hide them from the PR.\n. @Eilon I've cleaned up all the scripts and css files (removed them), and cleaned all the bootstrap magic from the html files. The latest iteration should only contain files that matter.\n. I'll publish a new iteration with the cleaned up styles and I'll ship that, then I'll add tests for the other two scenarios in another iteration\n. @yishaigalatzer I've addressed the comments, am I ok to push?\n. @yishaigalatzer I've added a test to render a view without layout and a test that returns no content in #574. That should address the rest of the comments.\n. @yishaigalatzer Can I get you shipit on this?\n. I like cats :cat:\n. Needs discussion and break down.\n. :shipit: \n. See #733 #734 #45\n. | RouteAttribute on Controller | HttpGet on action | Result |\n| --- | --- | --- |\n| [Route(\"api\")] | [HttpGet(\"~/override\")] | \"override\" |\n| [Route(\"~/api\")] | [HttpGet(\"~/override\")] | \"override\" |\n| [Route(\"/\")] | [HttpGet(\"~/override\")] | \"override\" |\n| [Route(\"\")] | [HttpGet(\"~/override\")] | \"override\" |\n| null | [HttpGet(\"~/override\")] | \"override\" (null meaning no [Route(...)] on the controller |\n| [Route(\"api\")] | [HttpGet(\"/override\")] | \"override\" |\n| [Route(\"~/api\")] | [HttpGet(\"/override\")] | \"override\" |\n| [Route(\"/\")] | [HttpGet(\"/override\")] | \"override\" |\n| [Route(\"\")] | [HttpGet(\"/override\")] | \"override\" |\n| null | [HttpGet(\"/override\")] | \"override\" (null meaning no [Route(...)] on the controller |\nI've used HttpGet as a sample, same applies to other verbs. I'm going to start by implementing everything as override and making AttributeRouteTemplate.Combine strip the \"~\" from the left portion of the route, we can discuss if we want to fail early and throw an exception if we see \"~\" on the template for RouteAttribute\nAlso we need to figure out how \"~/\" plays with areas. Whether it should override the area or not.\n@rynowak Thoughts?\n. Discussed offline: No need to think of areas for this.\n. As per discussion offline, we are making \"/\" and \"~/\" will expose the same behavior (both will override the value in [Route(...)] The semantics on the table above will be the same for both values\n. @yishaigalatzer @rynowak take a look at the PR\n. commit 87c430ae1900478a5f8bfdd73551d41e8e6b82b3\n. 2 days + PR time\n. 2 days + PR time\n. The remaining work is to investigate the reason why this doesn't improve perf significantly to take it as a lesson for future perf optimizations.\n. @rynowak @yishaigalatzer This is the right place to comment.\n. commit 87c430ae1900478a5f8bfdd73551d41e8e6b82b3\n. It was a test failure.\n. @rynowak Take a look at this when you can :)\n. I'm radically changing this PR as per @yishaigalatzer feedback, so avoid commenting for now :)\n. @rynowak @yishaigalatzer I've started breaking #730 into smaller individual PRs. This one is a refactor that puts in place the data structure for storing all the attribute routing information in the action descriptor.\nI'll send another one to unseal the HttpAttributes and add more functional tests.\n. @rynowak Updated to address comments.\n. @rynowak rebased\n. 21b1174d76bf007674c3feb4907c92cdca31f711\n. @rynowak @yishaigalatzer This is part of the original pull request for #730, it adds more functional tests for attribute routing and improves the HttpAttributes.\n. Rebased and cleaned up.\n. 63d96255369dff110cfc2f1a3bc4cccbf56016b4\n. Commit b0d52f73\n. 1 day\n. On hold until we decide if it should be included or not.\n. @rynowak Order implemented and rebased with latest dev branch\n. See #920 that has the right set of changes\n. Addressed feedback and rebased to incorporate latest changes.\n. @rynowak @yishaigalatzer addressed feedback\n. 3ab0c3af29f68a891386f8b7f54ae49037a5cc18\n. Looks good to me, but I'd like to see a functional test for this also.\n. :shipit: \n. :shipit:\n. Addressed most of the feedback, some feedback on the test part of the PR\n. Based on offline discussion I'm holding off on this PR.\n. :shipit: \n. From what I believe, this task meant to add unit tests to cover the rest of the aspects of this class, test coverage in functional tests should be good already (and not part of this task anyway). I haven't specifically looked at functional tests, but this should have good coverage as part of the coverage for other features.\n. @rynowak Updated, I've addressed everything except whether the comments should be on the call site or inside the method. I don't think we have clear guidance for it and my usual take on it is that I prefer to have the why comments along with the place where I call them so that why and what are clear when I read the code and how (the body of the method) becomes an implementation detail.\nWith that said, if you think different and have reasons to do it differently I'm happy to change it, I don't have a strong opinion on it.\n. Need to send a new PR as I'm taking 900 before 739\n. :watch:\n. See d432e2c\n. @kichalla reference the commit hash in a comment and close the pull request :) A suggestion for the future is to use [Fixes #bugnumber] in the commit message and that you push the commit to this branch before pushing to dev. That way it merges the PR and closes the PR and the bug automatically.\n. @yishaigalatzer @rynowak ping\n. @yishaigalatzer @rynowak ping\n. @rynowak I don't see why we need to add tests for this as it's a perf improvement and we shouldn't expect a functional change, for which we already have tests, but anyway I'll add the test from the provided sample\n. updated\n. @rynowak Although looking into the route data directly and being able to read 0-template is interesting, I think that for debugging purposes, when the user looks at the route data he also has access to the action descriptor in most scenarios, so it should be fairly easy to look at the AttributeRouteInfo to correlate the group id with the template/action.\n. @pranavkm updated\n. Closed for now, will review it after beta\n. :watch:\n. :shipit:\n. are there any functional tests for this?\n. :shipit: \n. You can put the functional test for this on the BasicTests website. There is a test there involving views. You can take a similar approach\n. Functional tests will be added later\n. Updated\n. Updated\n. The current behavior is by design, [Route] defines an attribute routed action without a constraint. [HttpGet] without a valid template defines an IHttpConstraint. In the new behavior a method can define attributed actions or non attributed actions, but not both at the same time.\nThe same behavior can be achieved by just doing \nC#\n[HttpPost(\"foo\")]\nWe can discuss changing this when @rynowak is around.\n. @DamianEdwards Sorry, I didn't explain myself properly. Let me try to reword it in clearer terms. An action like Foo can define one or more actions that can either be conventionally routed or attribute routed, but not both at the same time.\nIf a method defines a valid attribute routed action (like the one produced by route) we consider that all the actions defined by that method have to be attribute routed (we don't allow mixing conventionally routed and attribute routed actions on the same method, that's the error message).\nThat said, If during action discovery we see that you don't define a valid route template (by providing a template using [Route] on the controller, or [Http_] or [Route] on the action) we just treat [Http_] as plain IHttpConstraints so that you can still have conventionally routed actions that use [HttpGet], [AcceptVerbs], etc.\nThe recomendation is not to do\nC#\n[Route(\"template\")]\n[Http*]\npublic void MyAction(){}\nbut to just do\nC#\n[Http*(\"template\")]\npublic void MyAction(){}\nor\nC#\n[AcceptVerbs(\"POST, GET\", Route = \"template\")]\npublic void MyAction(){}\nif you wan to support multiple HTTP methods.\nIf you want to enable this scenario\nC#\n[Route(\"template\")]\n[HttpPost]\npublic void MyAction(){}\nyou can easily do so by writing your own IActionDiscoveryConvention or by writing an IReflectedApplicationModelConvention that tweaks the orginal model we produce. \nThe reason why we chose this approach is that you can achieve the scenario above more succinctly by just using [Http*(\"template\")] and with the other option, scenarios like the following\nC#\n[HttpPut(\"v1/template/{id}\")]\n[HttpPatch(\"v2/template/{id}\")]\npublic void MyAction(int id, ...){}\nwon't work as expected out of the box.\nI hope this makes things clearer, but I completely agree with you that the error message could be improved.\n. This should be provided to the action result via a constructor or resolved within the action result\n. @davidfowl @Tratcher We need something like Server.MapPath exposed by the host, and this is probably also required for Razor, @pranavkm am I right?\n. https://github.com/aspnet/Hosting/issues/86\n. Last remaining work here is to actually support virtual paths using aspnet/Hosting#86\n. updated\n. 316939ebcd8709579ec1015722fa042b7efc24bc\n. I agree with @pranavkm It's not clear for me the specific scenarios you are trying to test, although I can infer from the different tag helpers that the basic things are covered. As Pranav mentioned, I would try to keep the complexity low and focus on the TagHelper functionality, but the rest looks good\n. @rynowak @yishaigalatzer I've added tests to cover the current behavior. We need to decide if we want to change it and how.\n. @yishaigalatzer These tests describe the current end to end behavior. URLs generated for html links should not punyencode the host. URL generated for headers like the Location header should punyencode the host.\nWhat we need to decide is:\n1) Do we want to punyencode the host in the places where the link is placed on a header?\n2) Should we do it directly on URL Helper (though an option to opt-in or an option to opt-out)\nIn any case, it's good to have a couple of functional tests to describe the actual end to end behavior. If we decide to change the behavior it will be reflected on the functional tests.\n. We have covered versioning scenarios from a routing point of view in #1155, but we need to ensure common patterns work in other areas like model binding and formatting\n. @rynowak \n. @rynowak updated\n. @rynowak \n. @rynowak It's not just about API Explorer, it also affects how people interact with ActionModel in conventions and makes it consistent with the way we handle attribute routed actions.\n. Looks good to me :shipit:\n. :clock1: \n. :shipit: \n. :shipit:\n. That\u00b4s a valid parameter with key values*. The correct way to express a catch all parameter is\nC#\n[Route(\"/foo/{*values}\")]\n. Reopening to fix on routing. We decided to throw when the parameter name contains *, which will make cases like:\nC#\n[Route(\"/foo/{a*}\")]\n[Route(\"/foo/{*a*b}\")]\ninvalid\n. https://github.com/aspnet/Routing/issues/108\n. Fixed with https://github.com/aspnet/Routing/issues/108\n. Some minor feedback, but looks good :shipit:\n. Add a functional test where you add an MVC route and a Web API route and make sure they don't get mixed up, and then :shipit:\n. :shipit:\n. @GrabYourPitchforks @Tratcher Mind taking a look?\n. @Tratcher Yeah, it's already mentioned on the implementation and that method is virtual so you can easily change it if you run on linux\n. Looks good, I leave the relative vs absolute Url comment to your criteria, but overall solid. :shipit: \n. Updated @rynowak \n. Looks good to me, but I would change IBinderMarker to IParameterSourceProvider or IParameterSourceMetadata, more inline with other similar interfaces like IActionConstraintMetadata, IActionHttpMethodProvider or IRouteTemplate provider. :shipit:\n. :shipit:\n. @yishaigalatzer - Updated\n. @yishaigalatzer - Updated\n. ",
    "sebastienros": "I have decided that you have to remove this attribute, you're welcome.\n. PR updated\n. Now I have a doubt. The current MVC implementation accepts no parameters and just validates the user is authenticated. Should we keep the same behavior? Right now you have to pass a claim.\n. [Authorize] will just validate an authenticated user now\n. Taking it\n. Related to https://github.com/aspnet/DependencyInjection/issues/71\nWill not wait for the resolution to fix it though.\n. Yeah !\n. ",
    "bricelam": "@dougbu @davidfowl It will work, but you need to install the latest (compiled from source) vsix.\nI've put it on a file share. I'll be sure to include a link in the email I send out about using xunit.\nThe next official drop should also work when it comes out.\n. @dougbu @davidfowl TestDriven.Net works without any additional installs.\n. @dougbu No, I was just listing it as an alternative; it's free for open source development.\n@davidfowl Yes, we forked between releases of the xUnit.net runner for Visual Studio 2012 and 2013, so a custom build is required. The k2 branch I'm working on will be compatible with the version released today.\n. :shipit:\n. :shipit:\n. ",
    "Eilon": ":shipit: , of course.\n. Using model binding outside of MVC? That doesn't strike me as realistic...\n. I think the same question can be made regarding any feature of any project. Should action filters be usable outside of MVC? View engines?\nIn the case of model binding my feeling is that it is very dependent on the flow and lifecycle of MVC that if we try to separate it then we'd end up with a system full of compromises.\n. @pranavkm sorry my comment wasn't about request context - I agree that should move. My comment was about model binding in general.\n. We should definitely talk about this before attempting this. I'm not sure it makes sense to validate static properties ever because they clearly shouldn't have values that are request-dependent.\n. Private fields and properties :question:  Yeah that sounds pretty suspicious to me.\n. Should we track this in the DataAnnotations repo instead?\n. I think that the work that @dougbu did for enum support in the Html.EnumDropDownList helper looked at this attribute to create \"human readable\" text for each enum value. In principle that should still be useful.\nNot sure what the \"renaming classes\" thing was about.\n. @dougbu I'm not sure I understand what the answer was. My understanding is that we'll like continue to want to have something like the EnumDropDownList helper, and for that helper to have good behavior, we'll need an attribute that can be applied to enum value to give them human-readable (and localizable) text. If the only attribute that we have on CoreCLR is one that doesn't support that feature (that is, applying it to a field), then don't we still need an extra attribute here?\n. Oh so the situation is that [Display] is strictly better than [DisplayName] (assuming we don't care about classes and events, which we don't)? If that's the case then that's great :smile: Sorry for the confusion!\n. It is not possible to pass the TModel used in the controller to the Razor host for use in the compilation. These are two completely independent concepts. The controller and view know nothing about each other. They speak only via contracts that they establish (such as what data goes in ViewData and what type the model is).\n. I'm saying the RazorHost cannot know anything about the code that is in the controller no matter what. There is no direct relationship between these two components. Providing some kind of fallback behavior creates non-predictable code. An innocuous change to a controller could affect how views get compiled. And how would you know whether to recompile them? And what if they're already compiled into a DLL?\n. Dup of https://github.com/aspnet/WebFx/issues/147 that @NTaylorMullen already ported.\n. @davidfowl I do believe it's worth a PR - that way others can see what's going on. But this is certainly something that can be committed prior to a sign-off of course.\n. @kulmugdha try again.\n. :shipit: \n. This might be due to lack of content negotiation. You might need to always return an actual action result, such as a JsonResult. I'm guessing this is just a missing feature and not a bug.\n. Overall looks fine to me. I believe in the old days we had at least one other utility method: IsSectionDefined() - do we want that too? Not sure if there was other section-related stuff. Might want to check Phil Haack's old blog posts because there might have been some neat ideas there that we should reconsider.\n. Proper use cases for IsSectionDefined() are well-known: People want to write a layout page that has default behavior if a content page defined no content for that section. It gets used quite often.\n. Once @rynowak 's comments are addressed, :shipit: \n. Plus the assembly name needs to be *.FunctionalTests (plural).\n. These changes look fine to me.\n. Yeah this is super important for unit tests. We should always return the strongly-typed type from these helpers.\n. :shipit: \n. @NTaylorMullen :shipit: \n. @NTaylorMullen you're good to go.\n. @NTaylorMullen yep go right ahead.\n. Very nice! I've been awaiting this all day :smile: \n. This stuff is of course rather tricky, so it's a bit difficult to truly understand all the code in the form of a code review. As such, I have a general question:\nAre there any cases (excluding \"error\" cases where your route couldn't have worked, and perhaps also excluding area-related stuff) that worked in MVC 5, but now works differently? In particular, was there anything in MVC 5 that would have matched one thing, but in WebFX would match something else? (E.g. a later route?)\n. This sounds very reassuring, :shipit: !\n. This seems really bizarre to me. It's the responsibility of the model binder author to know what order they should be? How can this be? Should not the author of the application have greater control here?\n. Order is for the developer to set - I don't see how having a static, permanent order in our own model binders solves this. Why did we do 10/20/30/40 instead of 1/2/3/4? That's a code smell - it means we're not really sure what the real order will be in an app. I don't have a particular suggestion on how to solve this, but having a static, permanent order is not a valid solution to this problem.\n. Looks :shipit: to me.\n. After fixing the assert it's :shipit: \n. :shipit: \n. :shipit:\n. More concretely:\n1. If given a full path (i.e. starts with / or ~/) then don't modify/format the path at all. However, do check that it ends with .cshtml to ensure we don't inadvertently try to load a random file as a Razor page (e.g. a static HTML file, or some other random file).\n2. If it's not a full path, do the various \"location format\" stuff.\n. Looks good :shipit: \n. Aside from the naming thing, :shipit: \n. I believe in MVC and Web API we had more than just these attributes, no? We had Options, Head, etc. We might as well add everything we had before...\n. I think this is :shipit: for now but worth revisiting. Should we log an issue on GitHub/Jira for the other verbs?\n. Yay :+1: and :shipit: \n. :shipit:\n. :shipit: \n. Looks :shipit: to me.\n. :shipit: \n. :shipit: \n. :shipit: thanks!\n. Minus the doc comment thing, :shipit: \n. Yes, forcing function. And Fowler even did all the work :smile: The tooling and everything else is going out in less than two short months - we need to know that it's working.\n. :shipit:\n. :shipit: \n. Looks :shipit: to me.\n. Overall this looks :shipit: to me with my somewhat limited knowledge of this. It does appear that there is an unrelated change here to dispose of views in all cases - that might have been better suited for a separate change, but here we are (no worries).\n. :shipit: \n. :shipit: \n. :shipit: \n. Looks :shipit: to me - I can't imagine why we wouldn't want it to build.\n. Yeah I think this is :shipit: for now. However post alpha we need to look at completely divorcing the app-developer set of HTML helpers from the \"implementation detail\" helpers that they all delegate to. Currently these two worlds are conflated and this ends up exposing unnecessary API to app developers.\nI logged https://github.com/aspnet/WebFx/issues/263 to track this separation.\n. Very nice :shipit: \n. It's not inconceivable that a view component would have its own layout. Back in the day with Html.Action() and even Html.Partial() I'm pretty sure each could have its own layout. You could imagine that a layout might include some common chrome or scripts or whatever. What was special, however, about partial pages in MVC was that they did not execute the _viewstart.cshtml page, thus not using the \"global\" layout page.\nSo I'm not sure there's a bug here in WebFX at all then.\n. Looks good :shipit: \n. Looks :shipit: to me.\n. :shipit: \n. The assembly should be .FunctionalTests.\n. Note to whoever implements it: Please consult with @GrabYourPitchforks (Levi) because there are security implications for this. The code that is used in MVC/Web Pages has been security reviewed so we are probably good to go with that. However, we might ultimately want to have code in HttpAbstractions and this just delegates to that. So please first check with @Tratcher (Chris Ross) if we have something like that there.\n. (We'll might still want a helper off of UrlHelper to make it easier to get to.)\n. Is returns true if the URL is \"on the same site.\" In particular I think it just makes sure it's a relative URL of sorts (that is, it can't be http://*** or //***). It's used to prevent open redirect attacks.\nHere's what we have in MVC/Web Pages: https://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.WebPages/RequestExtensions.cs\n. Well it's not really about checking that it is relative or not. Its purpose really is to make sure it's a local URL. For example a path of \"/foo/bar\" is not relative - it is absolute - but it is indeed \"local\". My earlier usage of \"relative\" was inaccurate.\n. Potato, puh-tah-toe when an average person (me) is concerned! :smile:\n. Yeah it's a weird method I agree. Obviously there's no 100% definitive way to know if a completely arbitrary URL will return you to the same site. But because this method has security connotations this would need a @GrabYourPitchforks seal of approval one way for another. I'm hoping he has some additional thoughts.\nI do think we need this type of method in a common place in the system because many frameworks end up needing it. As for the exact name, yeah, certainly worth debating, as well as the exact nature of what it does.\n. Talked to @Tratcher (Chris) and @GrabYourPitchforks (Levi) and we decided that for now we should just copy MVC's code verbatim and stick it in WebFX. At some future point in time we would like to move the code to some new \"web utils\" package. That future work will be tracked in https://github.com/aspnet/HttpAbstractions/issues/46.\n. @yishaigalatzer can you ensure this ends up on someone's plate for alpha? This is required for MusicStore and is one of our OGFs.\n. Yes, I read very much codes! Overall this looks great. I did have a few small comments, most of which need to be addressed I think even for alpha, but they are trivial. The \"anonymous\" thing I mentioned can definitely be post-alpha and tracking it as an issue should be fine.\n. Unit tests?\n. @dougbu ok sounds good.\n. @NTaylorMullen is this actually fixed by your PR to change how we look for areas? I just noticed that in my scenario it's not really that the // is doubled, but that the area name is blank, so the format just looks weird.\n. :shipit: \n. :shipit: please. This has been a huge source of confusion for everyone.\n. :shipit: \n. Looks fine :shipit: \n. BTW this is often for app developer unit tests; though we of course also benefit from this for our own unit tests.\n. Yeah let's start out with what @rynowak said.\n. Back in MVC I certainly always felt it was useful to have just [Authorize] mean that you need to be authenticated, but with no particular \"permission.\" I think preserving that behavior is important.\n. :shipit: so you can push, but please get confirmation after from @davidfowl and @lodejard.\n. Yeah might as well add some of the convenience properties to Controller as well.\n. It's definitely a scenario, it might just not be a scenario that we support - and I'm fine with that. I'm actually more interested in whether there's any more general pattern here for enabling/disabling filters or \"things that filters care about.\" In a similar vein, \"I want to output cache everything on the controller exception this one action.\" Sorta sounds like override filters that we have in MVC/Web API. But I think that if we wanted to we could come up with a cleaner design because we're doing it all from scratch now.\n. :shipit: \n. Looks groovy.\n. :shipit: \n. :shipit: \n. @davidfowl you said you'd look at it.\n. Haven't tried it recently but if it doesn't repro for others you can close. I'll open a new bug if I see anything again.\n. I think the new code is much simpler and easier to read, thanks! I think this is :shipit: \n. :shipit: \n. :shipit:\n. :fireworks: \n. Very nice, looks :shipit: to me, but should have an async/await expert have a peek at it too.\n. As a separate PR? I guess I don't really care either way as long as it's a separate commit :smile: \n. Using this does work:\nreturn Redirect(\"/foo\");\nHowever, the semantics of that are different. My app happens to be hosted in the root, so it happens to work for me.\n. One PR should be fine for this, it's all super related. It's also not a very big change.\n. :shipit: \n. @sebastienros can you take a look?\n. :shipit: \n. :shipit: \n. Yup, still :shipit: \n. :shipit: minus some of Doug's comments.\n. Looks :shipit: to me!\n. No action here. These attributes are to specify data type, not validation. They don't validate on the server, so we shouldn't make them validate on the client.\n. :shipit: after changing the test to use proper async per @pranavkm.\n. Otherwise looks :shipit: to me.\n. In MVC the behavior was that an \"undecorated\" action gets chosen only if no \"decorated\" action matched. Not sure what we want in WebFX.\n. Looks good to me.\n. I'll set up an engineering discussion mtg for the null thing.\n. Looks fine to me - pretty straightforward change, I think.\n. Looks :shipit: to me, but awaiting @yishaigalatzer.\n. I think it's :shipit: \n. :shipit: \n. @sayedihashimi can you log this in https://github.com/aspnet/KRuntime/issues ? This is unlikely to be WebFX-specific.\n. New code looks :shipit: to me.\n. Is this because the sub-classes don't have a Controller suffix? I think we still require that. In fact, aside from being a public class, I think that's all we require...\n. I'm glad we left a lot more room in between the filter categories, though :smile:\n. Or do some reflection and see if the particular controller class overrides any of the filter methods (or otherwise explicitly re-implements the interface). If we do this then it's purely an optimization without any API surface change or even an observable behavior change.\n. :shipit:\n. Honestly this was just fine as-is. Ultimately the dependencies don't matter: either it compiles or it doesn't. We should keep them sorted too - a lot easier to read (just like we do with namespaces).\n. @ChengTian yep exactly my thought, thanks!\n. I think this looks good to me, but I'll wait for @yishaigalatzer to sign off.\n. I think we should do it :smile: \n. For 2 I don't think we can have an IsXyz method that returns an enum. I'm fine having just one method but it presumably needs to be GetXyz.\n. I would be fine with that.\n. :shipit:\n. Dup of https://github.com/aspnet/Mvc/issues/378?\n. Added to my engineering list.\nWhat should we do now in this PR? Abort?\n. Beautiful :shipit: \n. I think it should be fine, but email @JaneZhouQ to see if she is OK with it.\n. I'm OK either way. @JaneZhouQ was OK with taking it.\n. Is https://github.com/aspnet/Mvc/issues/562 a dup of this?\n. Then we need to find the history of this again. All I recall is that we tried to fix this before for exactly this reason but it was a fundamentally wrong change. Perhaps this time around we can come up with a different design that doesn't require the NRE, but my recollection is that with the design that we have, it's simply not possible (it's not like we could just add a null check or something). Of course, my recollection could just be completely wrong about this.\nAs an aside, I'm still not sure why a stress test would have a debugger break on all first chance exceptions. Like it or not, there are lots of deliberate first chance exceptions in the system. For example, I think with DI the way we do TryGetService() is just a try-catch because the underlying DI frameworks don't always support that operation - they just have GetService() that either returns a service or throws. So while I'm not saying we shouldn't investigate avoiding the NRE in model binding, I don't think stress can depend on this behavior anyway.\n. Sorry I'm not sure I understand. The original reason for not changing this as I recall was a behavior difference, nothing to do with performance or debugging experience. All I'm saying is that if we want to improve either performance or debugging experience that we need to make sure the correct behavior is preserved.\n. Makes sense. I'm still just not sure that's realistic when stress testing a real app because of how 3rd party components work.\nEither way, I agree we need to revisit why the exception is thrown to begin with. I unfortunately just have a bad feeling that it has to be that way, but proving me wrong would make me very happy :smile: \n. @dougbu could this be related to the recent PR of yours that we were looking at?\n. Why can't we do what EF uses? That repo has a src/Shared/ folder and it's references from each project's project.json file:\n1. Shared code (no project): https://github.com/aspnet/EntityFramework/tree/dev/src/Shared\n2. Referenced from other projects, e.g. https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.Data.Entity.InMemory/project.json\n. Adding @divega for FYI regarding changes we'll want to do in EF for shared files as well once this work in KRuntime is done.\n. :shipit: from me.\n. Hi @johannes-brunner for bugs in MVC5 and earlier please file the bug in https://aspnetwebstack.codeplex.com/workitem/list/advanced - sorry about the confusion of the two different repos. This repo here is specifically for the newest version of MVC.\n. We're thinking of doing something at the middleware layer so that output caching is available to all other middleware components. Then frameworks such as MVC would merely be consumers of the output caching middleware and not implement any such caching on their own.\n. In MVC 5 the action descriptor is an ICustomTypeDescriptor, which gave easy access to all the attributes on the action method (regardless of whether it's from Reflection or not). In Core CLR we might have to invent a new equivalent.\n. Hi @JesperTreetop unfortunately we can't yet accept pull requests but we're working on enabling this. Please stay tuned and we hope to be able to accept this PR very soon!\n. Please put all the default stuff from NuGet packages in a separate PR. Can't review this with 20,000+ lines.\n. Though, I should add, why do we need Bootstrap and jQuery at all? These tests don't run in a web browser. Just remove them.\n. Nice!!!!!!!!!!!!! :shipit: \n. Global switch? I doubt it. But perhaps a global filter that maybe we include in the default template. Not saying we should do that, but it's likely better than a switch.\n. That doesn't sound like a good idea to me. The whole idea is that your action method is supposed to check for ModelState.IsValid. With this filter in all projects, no controller action would ever see invalid model state. None of our scaffolded code would work, and this would be super undiscoverable to users.\nI'd rather do nothing at all here.\n. In MVC5 / Web API 2 there was no \"confusion\" with action methods because the invokers ignored all methods defined on \"[Api]Controller\" and up. However, in this world, we don't really know who the \"base\" class is because there isn't one. We could hard-code our own, of course, but that's kind of lame.\nIf I had to guess then yes it was for unit testing and only for us, and that's kind of lame :smile:\nSo I think public [virtual] is just fine, but we do need to solve the first problem I mention regarding reachability.\n. That seems like kind of a pain, really. We could statically verify it with unit tests, I suppose.\n. Positional sounds like a recipe for disaster. The order of named parameters on a method should never matter.\n. I think this one might be \"by unfortunate consequences\" - it seems familiar to an old first chance NullRef exception from MVC. Someone once tried to fix it by adding a null check but it was semantically different, so we reverted the attempted fix. Or this could be something completely unrelated.\n. Hi and thank you for the PR. We took a look at it and we intend for these extension methods to remain internal because they are just a convenience for us when writing MVC. We want to keep the MVC DLLs as specific as possible to MVC and not have arbitrary utility methods exposed publicly.\n. Need to do whatever we did in MVC 5. E.g. the Route Data value provider should use InvariantCulture, and most (or all?) of the other value providers should use CurrentCulture.\n. @rynowak correct. MVC should have the \"right code\" as soon as possible. Not everyone will use the localization/request culture middleware anyway.\n. I think this is just an artifact of https://github.com/aspnet/DependencyInjection/pull/87 not yet being fixed. Right now DI provides null services when they are not available, and that is incorrect. Once we commit the PR you will get an error from DI saying it couldn't resolve the required service for your attribute.\n. @rynowak log a bug for that?\n. I believe this is the wrong place to do caching. MVC shouldn't have to do any caching here. The Razor view engine should just get types from a compilation provider and that provider should do caching (or not, or whatever).\n. Yeah I'd keep it the way it is in terms of names. Docs and samples no doubt use the existing term.\n. @DamianEdwards I think you were toying with some ideas around validation extensibility - were you?\n. I'm not sure it's that important to throw for value types, because who would do that. But other cases such as generic types, abstract types, etc. we should look at to ensure we're safe and provide good errors.\n. My recommendation in this scenario is to either:\n1. Most simply, call .ToString(...) on the DateTime object when calling the URL/HTML generation helper. That guarantees that the exact options and formatting that you want will be applied.\n2. A bit more generally, and easier to use: Write an extension method that encapsulates this logic and provides a better abstraction for the type of content being generated, e.g. Html.ActionLinkWithDate(...)\nI'm not sure that a general option to pick the culture would work here because each and every parameter would likely need a different culture (InvariantCulture is almost always right - it's far rarer to need CurrentCulture).\n. Can you put the obscure stuff in an obscure namespace?\n. Not sure I'm a fan of the new namespace but we'll do a pass on those in the future anyway. Thanks for moving them!\n. If this is broken in release then I think we should indeed fix there, no? Won't release otherwise end up being broken?\n. Would be really nice to start putting obscure implementation types in sub-namespaces - it can make code reviews easier too because it informs the reader which types are \"user types\" (and thus API names are more important), and which are the underlying implementation details where there's perhaps more technical logic.\n. Yeah I think the time for sub-namespaces is upon us. At this point really all code should be written in a reasonably-production-level style.\n. Also doesn't work for Html.PartialAsync. Seems like maybe a core kind of thing.\n. Duh, updated :monkey_face: MVC 6 is the oddball that sometimes provides a null value (\"True\").\n. At the airport on tethered Wi-Fi, so I took just a quick look and overall looks good! I didn't really parse the parser (har-har), but the fundamentals seem sound. Assuming someone can do a more in-depth code review of the parser, this looks :shipit: to me.\n. Sounds confusing to me. Either _viewstart.cshtml is used or it isn't. Not sure I like the idea of running/executing/parsing/applying just half of it.\n. @pranavkm yes I agree with the general motivation but I think that in the case I describe it's not quite so simple.\n@yishaigalatzer my argument has nothing to do with \"running\" vs. \"interpreting\" vs. anything else. It's about potentially having a file that looks like it's doing several things, but sometimes only does some of it.\n\nMaybe the real solution here is that _viewstart.cshtml needs to have some kind of groups in it? Imagine for a moment something like this:\n``` c#\n@run_for_all_pages {\n    @inject IFoo Foo\n    @ViewData[\"common\"] = \"value\";\n}\n@run_for_full_pages {\n    @layout \"~/layout.cshtml\"\n}\n@run_for_dynamic(context) {\n    if (context.ViewName.StartsWith(\"\")) {\n        context.View.ViewBag[\"whatever\"] = \"this is only for views that start with ''\";\n    }\n}\n```\nThis is of course all complete and utter pseudo-code, so ignore the syntax.\nYou could still imagine that there's maybe a \"default\" block of code in a _viewstart.cshtml page that has the back-compat behavior of running for only non-partial pages.\n. Now just tell me if these errors should be content negotiated :trollface:\n. I bet there was some super smart reason for how it was in MVC 1 - 5... not...\nI can see arguments for having it either way, but I have to admit that whenever I hear \"shallow copy\" I cringe a little bit because it often falls into the category of \"why bother.\" It's sort of a half-a-cat scenario (not always, but I think in this case it is).\nI think I'm supportive of going with the new behavior and seeing how it plays out...\n. Let me rephrase this sentence:\n\nThe CLR returns properties in the order they appear in the class.\n\nTo this:\n\nThe CLR coincidentally on one particular machine happens to return properties in the order they appear in one particular class.\n\nI think this \"breaking change\" is perfectly reasonable as the previous behavior was undefined.\n. @GrabYourPitchforks do you approve this change? I believe you had concerns about this when we investigated this in MVC5/WebAPI2. I believe I shared the same concerns as you. Please use email if this isn't the best place to discuss this.\n. No idea, the related bug doesn't say. But it sounds to me like it's saying that if the model has like a zillion errors that this will cause only the first X to appear in Model State. I believe you and/or I had a concern with this regarding a partially validated model appearing to be partially valid and partially invalid, while the truth of the matter is that part of the model is in an unknown state.\nBut perhaps @NTaylorMullen @pranavkm @yishaigalatzer can add info to the bug to indicate the motivation for this change.\n. Oh actually I guess @NTaylorMullen just did the bug porting, not really opening the original bug.\n. @rynowak for apparently opening the original bug.\n. Going to discuss with @yishaigalatzer @blowdart @GrabYourPitchforks to resolve this.\n. @yishaigalatzer sounds reasonable, I like the new design!\n. @NTaylorMullen do you mean :sheep: :alien: (sheep alien --> sheep ET)\n. @NTaylorMullen do you mean :sheep: :alien: (sheep alien --> sheep ET)\n. @ajaybhargavb can you take a look? Seems like @dougbu has some context on this.\n. The main issue is that it's ugly :trollface: Separation of concerns, bro!\n. This error is in VS, or in the browser?\n. :shipit: \n. As long as the CI is green all the way down I'm fine doing an optimistic checkin - and keep an eye on the CI machine to make sure it builds all the way through to a successful Coherence-Signed build.\n. :shipit: \n. I don't think they should go under the src/Microsoft.AspNet.Mvc/... folder because they're not in that assembly. They should go somewhere in the repo though (not even sure if they should be in /src/....\n. It could go in a completely different repo... then we'd have: Mvc (just MVC), jquery-validation-unobtrusive (source code), and jquery-validation-unobtrusive-bower (Bower drop).\nI guess the question is do we want another repo. I don't really care either way...\n@DamianEdwards thoughts?\n. We need to make sure we can model bind everything that our HTML helpers generate.\n. Packages should never reference meta-packages directly (e.g. the K.* packages). Instead, reference the specific packages that need to be used. Nothing here about splitting or anything.\n. Approved for Beta.\n. @ajaybhargavb please sync with @NTaylorMullen and @dougbu on how to get started with tag helpers.\n. Hasn't gone through the system yet - it takes a day sometimes. I'll reply back when it's gone through.\n. Yeah the idea was to allow having a partial view to have some chrome, e.g. a border, perhaps some icons/links (think like a Windows window or a WebPart), etc. Plus, it took nothing to implement it - there was no extra code to support it. It would be more code to prevent it from being supported.\nThe only difference I'm aware of between partial views and regular views in MVC5 and earlier is that in partial views the _viewstart files don't run.\nRelated SO answer from me: http://stackoverflow.com/questions/4210138/view-vs-partialview/4210291#4210291\n. @kichalla can you take a look and see what other framework components are doing here? Do we need to make any changes in order to be consistent? BTW @davidfowl is out for ~1wk but might be on email.\n. Overall looks good to me but I'll let an MVC engineer sign off.\n. @pranavkm CLA is confirmed.\n. Hi @SaarCohen , can you check out the contribution guidelines and fill out a contributor license agreement? It should take only a few minutes and will enable you to contribute code to any Microsoft OpenTech project. Thanks!\n. CLA confirmed. @yishaigalatzer \n. Can you make the Config.json file lowercase as in config.json as well?\n. Can you remove src/Microsoft.AspNet.Mvc/Properties/debugSettings.json then?\n. Looks good to me. Please squash the commits and then we can have someone merge for you.\n. @rynowak I'm sure can help you :smile: or he can squash them for you when he merges... right, Ryan?\n. Fixed in 4b1a708ba16ec19e2b85cec67ed0f6f3b6cca3ca\n. Wow, it certainly did used to do that... it still makes no sense to me - I don't see why we would prevent that. It seems to me where it's a case that we can totally do the right thing, but we actively refuse to. But I guess I don't care too much as long as we have a better error message...\n. CLA is confirmed.\n. CLA is confirmed. And BTW I'm surprised the compiler doesn't do some mini optimization for this but I just looked at the IL and it indeed boxes the char.\n. Will wait for someone on the MVC team to evaluate this but it looks good to me.\n. CLA is confirmed.\n. :shipit: from me too.\n. Mind sharing why?\n. CLA approved. @yishaigalatzer's team to merge.\n. I'd like to state that it is critical that trivial apps not require a bunch of setup code.\nAttribute routing solves this to a good degree. For conventional routing users it's now a bit of a hassle.\nIf we think attribute routing is the recommended approach for the \"getting started\" scenario, then I'd concede that the importance of this feature is lower. (And, it can be added at any time.)\n. Some ideas:\n1. .UseMvcWithDefaultRoute()\n2. .UseMvcConvention() / .UseMvcConventions()\n3. .UseMvcWithConvention() / .UseMvcWithConventions()\n4. .UseMvcAuto()\n5. .UseMvcDefault() / .UseMvcDefaults()\n. @ajaybhargavb let's go with the name UseMvcWithDefaultRoute for now.\n. @kirthik please sync with @rynowak on this.\n. How would you know what to translate? There's no transformation that can reliably do this. We could consider doing underscore to hyphen translation, as we do for HTML attributes.\n. The transformation in tag helpers doesn't generally work with HTTP header names. It's also a very different scenario: in tag helpers it's transforming one set of arbitrary strings to another; in this case it's attempting to do a specific transformation.\nA great example of why this won't work here is this: would the logic translate a property named ETag to E-Tag? In fact it should leave ETag alone. How would you describe the X-HTTP-Method-Override header as a C# identifier?\nThere are no rules for translating a property name to an HTTP header name with hyphenation, so I urge us not to try. However, converting underscores to hyphens is fairly predictable. An alternative that in my mind is almost as good is to just have a built-in dictionary of all the well-known HTTP header transformation and just use that. If it's not well-known, just leave it alone.\n. I believe in those examples the requirement is that developers follow arbitrary rules with uncommon casing to get the desired effect. The property names really should be ETag and XHTTPMethodOverride because those are closest to the HTTP header names, for better or for worse. Add to that any custom headers that of course have no rules whatsoever, and it gets far more confusing. It's not .NET Framework Design Guidelines casing, but that's irrelevant here.\n. Closing this because apparently no one has seen it. If we see it again we can log a new bug.\n. This should go in the docs instead.\n. The purpose of routing is to extract basic information from a URL. This seems waaay outside the scope of routing, no? This scenario is more about model binding, which can certainly feed off of information gleaned from routing.\n. What's the motivation for this?\n. Thanks for the explanation!\n. I think that if you do this you need to have a firm answer on how they will be sorted.\n. We have some logic in Bundling & Optimization but before grabbing code we should figure out what we want.\n. What does \"as found on disk\" mean? As far as I know the file system APIs on Windows don't make any guarantees at all. Not sure about *nix / Mac OS.\n. What routes have you defined? If the route has {controller} before {id} then if the id is required (because it's not empty), the controller is also required. This has always worked this way since the first version of routing several years ago. If you have code that reproduces this issue please reopen the issue.\n. @rynowak in case he has thoughts.\nI still think this is by design because there is a valid way to generate a URL for the first route. The \"ambient values\" of the current URL and matching route are factors in determining which URL to generate. You can use named routes to use a specific route when generating a URL and that avoids the linear matching algorithm whereby the system tries to match each route in order.\n. Do we have any info on the motivation for this change? I'm not sure this is correct behavior... will stop by to understand this more.\n. I talked to @kulmugdha @yishaigalatzer @lodejard @DamianEdwards and we don't think this is the right behavior. URLs by definition are case sensitive and contain case sensitive information such as database IDs, base64-encoded data, and other types of data that is completely opaque to the routing system.\nWe could instead consider (perhaps post-RTM) a feature whereby specific tokens in the URL are deemed to be lower-caseable, such as controller, action, and area, and let the user customize those. And then there could also be other types of modifications such as kebab-casification, etc.\n. The number of ='s doesn't matter for this kind of heading.\n. Beautiful, looks :shipit: to me.\n. :shipit: \n. What's the relationship between this issue and https://github.com/aspnet/Mvc/issues/2029?\n. Assuming this is @GrabYourPitchforks -approved, then :shipit: \n. indeed. We'll bring it back in a future update.\n. The current issue is that even for non-physical files it sometimes tries to use the SendFile feature.\n. :shipit: \n. And my personal opinion about a NuGet package doing such a thing is that it's quite evil. If I install a regular NuGet package with a DLL, I don't want it effectively adding a \"using\" statement to all my *.cs files. I don't want a Razor-related NuGet package doing that either.\n. I'm not super familiar with these components, but CSHTML is its own file format, so if a tool for processing just HTML is run on it, I wouldn't be surprised if it mangles the format. It's like running a JavaScript lint or minify tool on a TypeScript file. They're kinda similar, but not at all the same. Such a tool would no doubt ruin the TypeScript file. Or is this some other kind of problem?\n. :shipit: once the last comment is addressed - looks great!\n. Can you show any of your registration code from Startup.cs? And any relevant code from your custom view engine?\n. Overall looks good to me, but I have limited understanding of some of the tech.\nJust a naming thing: I did get a bit confused where the names seemed a bit inconsistent regarding CommonParameters and ControllerProperties because they seem like they're the same thing, so why not have the same name? I'd rather the API names be more explicit about what these things actually are: they're not common parameters (they're not parameters at all), but they are controller properties. Is there any reason not to use the name \"controller properties\" everywhere?\n. From where are you trying to post data? And posting it to where?\n. :shipit: \n. :shipit: \n. BTW all the ASPNET/ASPNETCORE stuff was renamed to DNX so you'll want to update that in the PR.\n. :shipit: \n. :shipit: \n. Need to add a test to ensure that if the object implements IDisposable that it indeed gets called.\n. Assuming you mean https://github.com/aspnet/Mvc/issues/2108 not https://github.com/aspnet/Mvc/issues/2107.\n. Edited the PR title for you :smile: \n. Looks good to me too.\n. :shipit: \n. :shipit: because three's a charm.\n. This work will be tracked by whatever unit test results we come up with.\n. @kirthik can you investigate the design for this?\n. Moved to backlog.\n. @dpaquette @DamianEdwards @dougbu I'm wondering what the scenario is for an <img> tag helper to support globbing. I totally get it for JS and CSS because you quite often want to include an entire folder or set of files. But for images, when does that happen? Images almost always have additional chrome around them (labels, links, onclick handlers, etc.).\n. Thanks, @DamianEdwards, great write-up, but umm, what do we do here? :smile: I'm all for having an ImageTagHelper, but maybe no globbing for now? The rest of it seems terrific.\n. Sounds good to me.\n. :shipit: thanks!\n. @ajaybhargavb so you're saying in MVC 5 a \"random\" section could call RenderBody() and that would work? If that's the case I'm guessing that was quite unintentional... If there's a breaking change in that scenario I'm totally fine shipping with that for now and if it turns out someone cared we can revisit... but I'd be surprised.\n. I think RenderBody was meant to be optional because there might not be an actual body, so requiring rendering it would be bad. Some users always use explicit sections, whereas some use body+sections, and some use body only.\n. Ohh yeah that's right there was that logic.\n. Should the namespaces be updated to reflect the path? Namespaces are supposed to match paths (they didn't before the file move, but they should match if we're cleaning this up).\n. These should use folder hierarchy as namespace hierarchy. Why would we make an exception here? If it's too many files in a folder, then it's too many files in the namespace.\n. Just fix the one at hand now. The other ones are also just wrong :smile: Can file a bug on the other ones and we'll deal with it later.\n. :shipit: \n. Clearing the milestone so we can triage in the morning.\n. Yeah either way.\n. :shipit: \n. :shipit: please check into release then port to dev.\n. Seemingly mildly approximately related to https://github.com/aspnet/Mvc/issues/2316\n. See if your Required change fixes this. If not, move to beta6.\n. A slightly unusual scenario because why would the type even implement IValidatableObject if it wasn't going to be validated. Nevertheless, a valid bug.\n. Yeah, it would just seem odd that someone would bother implementing validation logic on something that shouldn't be validated in a scenario (even though the two types are owned by different people). It's certainly possible, but seems odd.\n. What about dictionaries? Is it easy to support those?\n. Just some small string comments, then :shipit: !\n. :shipit: \n. Effectively a dup of https://github.com/aspnet/Mvc/issues/2464.\n. MVC itself has no authentication features - they are implemented as common middleware. Please file an issue here: https://github.com/aspnet/Security/issues\n. htaccess is a not a recommended practice with system such as MVC because there is no relationship between URLs that are served and the layout of the files on disk. As such, where would you place the .htaccess file? At most there would be one at the root of the app, but then that's not too different from just enabling authentication middleware to block access to the site.\n. Hmm on the face of it this sounds to me like a more esoteric scenario. I would suggest in the meantime writing a version of this and publishing a NuGet package to do this to gauge interest and see if others have feedback on it.\n. Yeah sounds good! BTW please continue the discussion in the aspnet/Security repo once you're ready.\n. :shipit: from me. Also please update the PR title so it's easier to find in the history.\n. Looks good! :shipit: \n. :shipit: \n. I have some general confusion with this, though it's not necessarily specific to this PR. There's a lot of stuff named \"T\" and \"action\" and it's not clear to me from the APIs what the purpose is of these generic arguments and parameters. Can they be given more specific names?\n. T -> TModel sounds fine. Maybe action to logErrorAction?\n. (Can do it in a separate PR)\n. Aside from the two small comments, :shipit: \nWe do need to do an overall API review of JsonPatch once it's stabilized. I think some of the namespaces and type names can be cleaned up a bit.\n. :shipit:\n. Confused... doesn't DI create the action invoker? If so, how does it work with there being a new int parameter?\n. @rynowak oh, of course, thanks :smile: \n. @femiot what is this helper for? These helpers are all internal so unless any part of MVC needs it, there's no value adding it here.\n. @femiot looking at open issues is one way. We sometimes mark bugs with the up-for-grabs label if we think it's an issue that is more easily approachable by someone new to the code. You can try to look for this same label in other repos as well.\n. Hmm not sure I fully understand. The [DataType] attribute just specifies the data type - that affects the display and processing of the field. It is not a validation attribute (despite its base class). On the other hand, the [EmailAddress] attribute is a proper validation attribute that checks for email@example.com formats.\nEven though these two attributes are in the same namespace and even have the same base class, their purposes are quite different.\nIt's interesting you just brought this up because just the other day I was talking to some other folks on the MVC team and we discussed how it is crucial for MVC to treat the Data Annotations attributes as they were designed and to make sure that MVC doesn't add/change any of these behaviors. Every time we've changed the behavior in the past (either on purpose or by accident) it came back to cause issues.\n. :shipit: \n. These logs do seem to say what, but not why. Would this help someone understand why JSON was selected instead of XML?\n. Looks much better - I think it now has information that would help a developer figure out why something isn't working.\n. :shipit: after the one comment I had.\n. @evil-shrike indeed there are quite a few differences between MVC 5 and 6, especially concerning Web API.\nWe have some brand new documentation that is in progress and hosted here: http://aspnet.readthedocs.org/en/latest/\nIn particular, these articles:\n- Migrating From ASP.NET MVC 5 to MVC 6\n- Migrating Configuration From ASP.NET MVC 5 to MVC 6\n- Migrating From ASP.NET Web API 2 to MVC 6\nPlease have a look through those documents and if you feel there is still content missing, please file a bug on https://github.com/aspnet/Docs/issues (though some bugs are already opened, so please take a quick look at those too and add any applicable comments).\n. Done, thanks!\n. :shipit: \n. Yup looks good.\n. @JamesNK we currently have this behavior because the input and output formatters are designed to have separate behaviors. For example, in MVC 6 by default for inputs there is extra behavior added to properties with the [Required] attribute to alter its behavior, but for outputs there is no such behavior.\nIs there any way to have the contract resolvers share their caches? If it's just internal caching then it seems like maybe they could share a cache because there should never be any conflicts - cached reflection data reflects truths and is thus immutable.\nRelated to this, is it possible to compose contract resolvers? Currently it seems like the behavior is that you can have only one and the way to compose it is to \"wrap\" the current one with a custom one. Is that the recommendation for customers? Or is there a way to have a \"pipeline\" of contract resolvers so that they can compose independently?\n. Re: Sharing caches\nYeah I agree that sharing caches has memory reclamation problems... don't know a great answer to this. Of course, instead of sharing the cache \"dictionary\" they can potentially share the cache entries, so of resolver 1 used A, B, C, D, E, and resolver 2 used A, B, X, Y, Z the entries (and cost) for A and B could be shared between both resolvers, and the non-overlapping items could be cleared out. Just a thought.\n. @JamesNK you know we've been wondering if our behavior is even correct when it comes to the Required attribute meaning \"must be in the JSON.\" That's somewhat of an abuse of what that attribute means, so we're actually thinking we remove that behavior entirely... in which case it might be easier for us to just use the defaults from Json.NET.\n. Now that would be interesting...\n. Yeah I don't think we'd need to depend on anything new in Json.NET. The new attribute, should you add it, would be strictly a \"convenience attribute\" for app developers. MVC would never reference it (except maybe in tests :smile: ).\n. :shipit: from me too\n. Html.Raw used to be an instance method but is now an extension method. Extension methods unfortunately cannot be called with dynamic parameters, and everything returned by ViewBag is always dynamic. That's why casting works.\nThis is technically by design but we could consider a different approach here perhaps, such as getting rid of IHtmlHelper.\n. @dougbu oh yeah weird I guess it's the same as it always was... so not sure what's going on here.\n. Thanks!\n. :shipit: thanks!\n@dougbu can you do a quick review and merge?\n. @henkmollema could you do that right now?\n. I think StackOverflow is a great place to ask these questions is on StackOverflow with the asp.net-mvc-6 tag.\n. Moving to @dougbu to verify the behavior in MVC 5.\n. Remove DefaultValue support from model binding and do it only in the invoker for action parameters.\n. Bound controller properties are an interesting case. They're more akin to action parameters, so that makes it more interesting.\nHaving said that, I'm fine not supporting DefaultValue on controller properties for now, and we could add that in the future if there's demand.\n. Yeah that sounds like the best plan for now. Thanks!\n. :shipit: from me. (Can do my comment in a separate PR so it's not too many changes in this PR.)\n. :shipit: \n. :shipit: from me too. I actually like this a lot now. It's so much easier to tell what's going on in the test.\n. @kichalla can you take a look and merge?\n. Other than the string, :shipit: \n. @jodavis @NTaylorMullen let's chat about this one to figure out the right behavior.\n. @kichalla can you merge?\n. Need to come up with a scenario and test it in MVC 5.\n. Overall looks good to me, just the project.json metadata values.\n. Again, overall looks good, just some small comments.\n. @kichalla please merge.\n. The model state entries should represent the structure of the posted data as opposed to how they were bound.\n. Also need to check what exactly happens today in MVC5 / MVC6 for the scenarios listed above, plus this one:\n``` c#\npublic ActionResult Foo(Person[] people)\n{\n}\npublic class Person : IValidatableObject\n{\n}\n``\n. :shipit: from me too.\n. Very nice! :shipit: \n. Also very nice...\n. The main concern is that this model binder currently allows other model binders to run after it. The correct behavior of this model binder should be to always produce a result, even if it didn't bind anything (e.g. because there was no file or body).\n. :shipit: \n. BTW for the record I think it's weird for a test to delete files that are checked in, and to then attempt to write them back to disk... no?\n. Doing disk IO might be fine if it's perhaps not editing files that are part of the repo. For example, can the test copy a folder with a sample site to another folder, do whatever it wants (e.g. edit files, delete files), then blow away the whole thing? And even put that whole folder in the.gitignore` to ensure it never gets checked in even if the test fails to clean up?\n. @pranavkm logically that should work, no? If you change a dependency of a CSHTML file (e.g. by changing the global imports), the CSHTML file should recompile...\n. @Alxandr if you'd like to attend this design discussion meeting I can send you a link to join us. I see you're in Norway so it might be a bit late for you though. The meeting is at 3pm Pacific Time, which is midnight for you.\nIf you're interested, let me know and I'll send you an invite code.\n. Oh sorry :smile: It's at 3pm Pacific Time 5/12/2015, and 12am Norway Time 5/13/2015 (that is, very, very early on Wednesday).\n. I sent you an invite in case you can attend.\n. @panesofglass yeah we had a meeting with several folks from the team, plus @Alxandr and we put down our notes here: https://github.com/aspnet/Mvc/issues/2551\nIf you'd like, please have a read through that and any extra notes/questions/comments you have.\nRight now the team is trying to wrap up the beta5 milestone, plus this weekend in the US is a long weekend (Sat-Sun-Mon off), and several folks are turning it into an extra-extra-long weekend (Fri-Tue off!), so I hope that later next week we can pick this up again and come up with a final design.\n. Please make sure that the scenarios covered in https://github.com/aspnet/Mvc/issues/2322 are in the tests.\n. Also need to check what happens in MVC 5 if Document implements IValidatableObject.\n. :shipit: \n@kichalla can you merge?\n. Not taking any direct action on this right now.\n@harshgMSFT feel free to investigate this further in terms of a more major overhaul of where CompositeModelBinder shows up in the hierarchy of model binders.\n. Are the only real changes here that it now call TryAddXyz?\nAlso per @HaoK's comments from #1634 are any of these multiply-registered services that should use AddXyz or are they all single-instance services? (Did that even make any sense? :smile: )\n. Dup of https://github.com/aspnet/Mvc/issues/1418\n. @NTaylorMullen use this to track any AppVeyor-related work; @sornaks 's bug will track the Travis work.\n. I just saw several successful builds on AppVeyor, so I'll assume it's not an anomaly. Will log a new bug if we see additional issues.\n. @ajaybhargavb please write a failing unit test first, TDD style. Then fix.\n. Need to mark as \"Done\"?\n. The case of [BindRequired] is one where the app developer has a programming error because they didn't post a value at all for the field, and so the displayed error could be improved to indicate something like \"A value for the '{0}' property was not provided.\"\nThe Data Annotations one is fine because that represents a user error (user didn't type a value into a required field).\n. Let's investigate what the MVC 5 behavior was to see if there are any compat concerns.\n. 1. Is this a tooling bug? Runtime bug? Where is the underlying bug logged?\n2. I'm ok checking this in, but also log a bug to restore these (including pointing to the changeset that removes these)\n. @dougbu ok thanks go ahead and merge.\n. So what was the issue? Wrong name being used? Bad parameters?\n. O I C, makes sense.\n. :shipit: \n. @dougbu that was a recent rename. Maybe this build hasn't caught up yet. @kichalla was making that change I believe.\n. :shipit: \n. Very nice.\n. BTW I logged https://github.com/aspnet/Mvc/issues/2540 to track changing the name of the FileVersion property.\n. Just a couple of small formatting comments then we can merge in.\n. I don't really care if it's squashed or not, but you should rebase your branch so that it's a cleaner merge commit when we merge it.\n. I think it'll be more work to change this than to just keep the code where it is so I'm not sure it's really worthwhile. The keys pretty much can't change because it would be a breaking change from the last 7 years of MVC...\n. Yeah that would be great. Let's settle on a name. Here are a few ideas:\n- AppendFileVersion / AddFileVersion\n- AppendVersion / AddVersion\n- AppendFileHash / AddFileHash\n- AppendHash / AddHash\n- CacheBust\nI do kind of like my original suggestion of AppendVersion because it's concise and reasonably clear about what it does.\nThoughts?\n. @dougbu yes it's just the property name and yes we'd rename the tag helper attribute name.\nSounds like everyone wants to go with AppendVersion!\n. :shipit: \n. @atrauzzi can you log this in the https://github.com/aspnet/Tooling/issues repo? That's where we track tooling/template issues. Thanks!\n. :shipit: \n. You want to use 6.0.0-beta4, 1.0.0-beta4, etc. packages. If you use just 6.0.0 and have the ASP.NET MyGet feeds configured, you'll get beta5 packages, yet you're using a DNX from beta4. All the packages you use, plus the DNX you use, must all be from the same \"ship train.\"\n. For reference, this is the dependencies section of a brand new ASP.NET 5 project in VS2015 RC:\njson\n  \"dependencies\": {\n    \"EntityFramework.SqlServer\": \"7.0.0-beta4\",\n    \"EntityFramework.Commands\": \"7.0.0-beta4\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta4\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta4\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta4\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta4\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.ConfigurationModel.UserSecrets\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta4\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-beta4\"\n  },\n. The specific build numbers will vary a lot, because each GitHub repo ends up having its own build numbers.\nPlease note that when running from VS, I believe VS will choose whichever DNX you have aliased as \"default\".\nActive Version           Runtime Architecture Location                       Alias\n------ -------           ------- ------------ --------                       -----\n       1.0.0-beta4       clr     x64          C:\\Users\\elipton\\.dnx\\runtimes\n       1.0.0-beta4       clr     x86          C:\\Users\\elipton\\.dnx\\runtimes default\n       1.0.0-beta4       coreclr x64          C:\\Users\\elipton\\.dnx\\runtimes\n       1.0.0-beta4       coreclr x86          C:\\Users\\elipton\\.dnx\\runtimes\n  *    1.0.0-beta5-11781 clr     x86          C:\\Users\\elipton\\.dnx\\runtimes\n       1.0.0-beta5-11781 coreclr x86          C:\\Users\\elipton\\.dnx\\runtimes\nThat's from my system - I have 1.0.0-beta4 as \"default\", but my current active DNX is a beta5 build.\nYou can change the \"default\" alias to point to a different build: dnvm alias default 1.0.0-xyz123 and then restart VS.\nOr, in VS, right-click on the project, choose Properties, and then pick a different DNX version/flavor/bitness to use to run the app.\n. But anyway, the code here looks great. BTW we're working on some stabilization right now so we will likely wait to merge this until next week if that's ok!\n. Looks :shipit: to me. Add to Announcements repo when you commit.\n. Overall looks good.\n. @CodingGorilla did you run git clean -xdf prior to building? Also, are you using the build script in the repo to build from command line or are you building in VS?\n. Do you have any particular NuGet feeds configured in VS? Or disabled any feeds?\n. @dythim can you log this in the https://github.com/aspnet/dnx/issues/ repo? This isn't specific to MVC.\n. There's no built-in way, but perhaps @rynowak can think of something with ApplicationModel where something like that could be hacked up?\n. Looks like this question was answered. If you have any further questions please let us know.\n. @ctyar thanks for sending the PR. The code overall looks good and I have some questions about the behavior:\n1. Should it be an error to ignore a section that isn't defined? E.g. should IgnoreSection(\"ASDFASDF\"); throw an exception?\n2. Did you want to change the error message for when a section is defined but isn't rendered or ignored? In the bug you mentioned a change, though I suggest slightly different wording to add: To ignore an unrendered section call {n}(\"sectionName\"). and pass in nameof(IgnoreSection) for the {n} substitution parameter (for whatever n is).\n. @pranavkm can you follow up on this again?\n. :shipit: \n. @AkbaraliShaikh can you show the exact code you have? The code you showed doesn't compile due to syntax errors.\n. It's worth noting that UseIISPlatformHandler needs to be called first, though I'm not sure that that affects this at all.\n. @Tratcher any thoughts on this?\n. Looks like this question was answered. If you have any further questions please let us know.\n. cc @DamianEdwards @SajayAntony \n:smiley_cat: \n. @danroth27 should we move this to the Backlog? :smile: \n. Oh, and where do I log the same bug but to thank @benaadams for all his hard work and contributions???\n. @stevedesmond-ca great blog post!\n. Closing because this is an old discussion. We always appreciate the kind words \ud83d\ude04 . This is the property in question: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.ViewFeatures/Rendering/IHtmlHelper.cs#L61-L64\nIt doesn't appear to be used anywhere in MVC, so it should be fairly clean to remove.\n. :shipit: for the updated doc comments too.\n. :shipit: \n. @giancarloa using a base class is certainly one way to do it.\nAnother option is to use MVC's new Application Model feature that enables you to create \"conventions\" that dictate certain behaviors in MVC. We have a sample that shows application model in general, and with the list of built-in conventions you should be able to modify the sample to create a convention that works for your app/site.\n. I don't think _ViewStart runs for View ViewComponent results, does it? It's not a \"main page\". But if you set the layout page in the view itself, it should work. Though maybe there's some issue with the search paths in that case?\n. @dougbu can you test if that works? In particular, that it searches the Shared folder for the layout.\n. Yeah that seems to me like a bug... I would think that even if a view component was rendering a layout page that the view engine would search the appropriate shared location. But I could be wrong and maybe there's some good reason it doesn't...\n. Oh yeah, that :smile: \n. @DamianEdwards @dougbu any idea if this was deliberate for some reason? Or just oops?\n. The recommended solution is indeed what @dougbu and @NTaylorMullen mentioned:\n\nget an instance of IHtmlHelper from DI and contextualize it: (_htmlHelper as ICanHasViewContext)?.Contextualize(viewContext);\n. @AndreiMaz please log a new issue so we can take a look. Posting on old, closed issues means we're likely to miss the comment \ud83d\ude04 . Wait a sec - I see an IUrlHelper.ActionContext property: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/IUrlHelper.cs#L13-L16\n\nIsn't that enough? It's on the interface, so it's always \"public\", regardless of the concrete UrlHelper, though it also has a public property implementing it.\n. Ah, nice :smile: \n. Discussed with @javiercn in person and this seems alright to me, but please discuss with @rynowak before starting.\n. Done?\n. @NTaylorMullen can you take a look?. @NTaylorMullen can you file a new bug about clearing up how the checkbox tag helper works per our discussion?. Hi, can you show what your CSHTML page looks like? I'm guessing there's code in the page that looks like @ViewBag.Papel and when you have that, Razor calls .ToString() on that value, which by default just shows the type's name.. @asoaresfil so your issue is fixed now?. @asoaresfil I would recommend putting some additional text, such as aaa and bbb and ccc around where the bad content is being rendered in order to isolate the Razor markup that is causing this to be rendered. Or, if you could share more of your app, that would help.. Closing because there is not enough information to reproduce this problem.. @programmar297 can you share some more info about which version of ASP.NET and MVC you're using? This sounds like MVC 5.x to me, but more info would be helpful. Also, do you know what changes you made to the app that happened before it started failing?. @rynowak - parking on your plate because this seems to be in the ballpark of what you've been up to.. @rynowak - that's what it looks like...?. Closing for the reason mentioned here: https://github.com/aspnet/Mvc/issues/6082#event-1245675832\nWe do thank you for the contribution, but we feel it isn't a good fit for ASP.NET Core MVC.. I think this is essentially a dup of https://github.com/aspnet/Mvc/issues/5983. The way the checkbox tag helper works is that it discards the original tag itself and create two new HTML elements (one for the checkbox, one for the hidden input). Because of this, when another tag helper (such as yours) tries to modify the tag, it isn't modifying the right tag.\ncc @NTaylorMullen . @sebastienros thoughts on this? It does seem like we're inadvertently caching stuff when an exception was thrown.. Closing because there are no plans to implement this.. The main problem with tuples is that they aren't really custom types. They're all just ValueTuple<T1, T2, ...> so the system would have to look at other metadata to \"put everything together.\" In my opinion this indeed makes them a poor fit for APIs where you're usually interesting in having more formal type knowledge.. Closing because there is not enough information to reproduce this problem.. I think this is a dup of https://github.com/aspnet/Razor/issues/1046 - Razor doesn't support C# 7 at all yet.\ncc @NTaylorMullen to confirm.. This issue was moved to aspnet/Logging#596. @jbagga - can you take a look? It does seem like chunked encoding isn't necessary here, so not sure why that's happening.\ncc @Tratcher in case you have any ideas on this.... BTW I doubt the assembly is actually loaded twice because I'd think everything is cached by the CLR. But still, good to clean this up!. @pranavkm / @javiercn please review.. @CoskunSunali nice catch! \ud83d\ude04 . Let's change the FormTagHelper to target all <form> elements without restrictions on which attributes it has.. Generally using one-offs, unless there are closely-related items.. We need to make sure we have these properties available on Page and PageModel:\nc#\npublic class Page / PageModel\n{\n    public HttpRequest Request { get; set; }\n    public HttpResponse Response { get; set; }\n    public HttpContext HttpContext { get; set; }\n    public PageContext PageContext { get; set; }\n    public ViewContext ViewContext { get; set; }\n}\n. @hishamco ah that's a good point about ViewContext. @rynowak thoughts on these two questions?. @hishamco we still provide convenience properties. It's nice to have a lot less .'s in the code, plus it makes code easier to copy & paste between various pages/controllers/views/etc.. I think they're usually settable for testing purposes, no?. Or, at least, the main properties (e.g. \"root\" properties) are usually settable. The ones that just \"dot\" into them for convenience probably don't need to be settable.. This type of question seems better suited to https://stackoverflow.com/ because it is fairly broad.\nIf you have an Entity Framework Core specific question, please ask on https://github.com/aspnet/EntityFramework/issues.\nBTW please be careful with the code you showed - it could be susceptible to a SQL injection attack, depending on where TableName comes from.. This issue was moved to aspnet/EntityFramework#8127. Thanks for sharing the apps. (BTW it's often easier to push things to GitHub as a public repo so that the code is browseable and linkable, but a ZIP works fine too!)\nRunning with a debugger attached will do all kinds of odd things because there are some parts of the code that check if the debugger is attached and do \"extra\" stuff to make it more debugger-friendly, so that could certainly explain some of it.\nAs to Docker, that's a whole different story.\nI recommend checking that the ASP.NET Core app is running in \"Production\" mode (ASPNETCORE_ENVIRONMENT either not set, or set to \"Production\").\n@natemcmaster - any idea if we've heard anything about perf issues when running in Docker?\ncc @davidfowl @rynowak @mikeharder FYI/thoughts. Where were you hosting Docker? On Azure? If so, using which Azure service?. Please earn maximum \ud83d\udcaf points.. Razor Pages has a feature called Tag Helpers, which have some similarities to Web Forms server controls, though they are also different in many significant ways.\nYou can read more about tag helpers here: https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro. Historically we don't throw in this case because we feel it would make the process of developing an app more difficult. In the case above, it's possible that you're still building your app, and you know that you will have an action named MyController.MisspeltAction, so in that view you generate the URL for the action, but you haven't yet written the action itself. Then, later, you'll go ahead and implement that new action.\nSo, maybe there just ought to be an option such as \"Strict URL Generation\" or similar?. Related previous discussion: https://github.com/aspnet/Mvc/issues/302. Closing because there are no plans to implement this.. I think this is the same issue as https://github.com/aspnet/Mvc/issues/6657, which was a deliberate change from ASP.NET Core MVC 1.x to 2.0. Can you look through the other issue and see if the workarounds listed there work for you?. @rynowak any further thoughts on this?. Closing as a dup of https://github.com/aspnet/Mvc/issues/6657, which has further thoughts on what we might do in the future.. Hmm I wonder if there's a Unicode Byte Order Mark (BOM) at the start of the file that's causing this? Can you open the CSHTML file in a hex editor (VS has one built-in) and see what's there?. cc @pranavkm @rynowak @NTaylorMullen . @pranavkm can you investigate and shed some light on this? This looks very odd.... Closing because there are no plans to implement this. It seems that there exist other ways to do what's being discussed here.. Glad to hear!. Closing because there is not enough information to reproduce this problem.. Closing because this needs to be reported through VSFeedback - that goes directly to the right team with all the required info.. In ASP.NET Core MVC there's a new ModelBindingMessageProvider abstract base class that has all the various messages on it. You can use its default implementation, DefaultModelBindingMessageProvider, to set a function that generates a custom message, for example, one that retrieves a localized value.\nYou can do all this easily in MVC's \"options\" configuration in Startup.cs, like so:\nc#\n     services.AddMvc(options =>\n    {\n        options.ModelBindingMessageProvider.SetAttemptedValueIsInvalidAccessor((v, p) => $\"The value '{v}' is not valid for {p}.\");\n    });\nBTW I wrote this without testing it, so give it a shot, and let me know if it's a bit wrong \ud83d\ude04 . @SteveSandersonMS - you've worked in this area before, can you help @drauch out? Apparently my previous code example was incorrect.. Indeed, we need a bit more info. View components should work exactly the same in Razor Pages as they do in MVC Razor views.. Ok then it doesn't sound like there's an issue here.\nIf you are still having an issue, please log a new issue with details about what you tried, what didn't work, and what version you are using.. I don't believe there's anything like filters for view components - @rynowak , is there?. @rynowak could you do this from within a model binder? Do those run \"normally\" for view components, or is parameter binding done via a different mechanism?. Closing because there are no plans to make changes to this area.. @kichalla - can you investigate?. Is the \"bug\" in the existing ScriptTagHelper because it's doing something weird?. Was this your own find, or is it from another discussion? That would help establish the priority.. This patch bug is approved for the 2.0.x patch. Please send a PR to the feature/2.0.1 branch and get it reviewed and merged. When we have the rel/2.0.1 branches ready please port the commit to that branch.. Hi, we have a public test feed that you can use to try out the ASP.NET/EF Core 2.0.3 patch!\nTo try out the pre-release patch, please refer to the following guide:\n https://github.com/aspnet/Announcements/issues/274 (info)\n https://github.com/aspnet/Home/issues/2254 (discussions and questions)\nWe are looking for feedback on this patch. We'd like to know if you have any issues with this patch by updating your apps and libraries to the latest packages and seeing if it fixes the issues you've had, or if it introduces any new issues. If you have any issues or questions, please reply on this issue to let us know as soon as possible.\nThanks,\nEilon\n. @cgountanis the TempData serializer currently supports only a limited set of data types for simplicity. It supports a few primitive types such as int, string, and bool, and simple containers of those types, such as lists. The [Serializable] attribute has no effect on this.\nWe'll discuss this with the team to see what we can change here.. So this is about Razor view compilation not respecting the app's programmatic preferences for Razor view compilation?. @zoinkydoink if you set type=\"text\" on your <input> tag, does that fix it? I think that might override ASP.NET Core's default processing of data types in input tag.\ncc @dougbu in case you have more thoughts on this.. @pranavkm can you take a look? Presumably we changed our expression generator here...\nAlso cc @rynowak . Not planning to patch this.. Hi @OpenSpacesAndPlaces , there is currently no way to do this directly.\nThere are two alternatives:\n1. Create a new type that has only the properties you want to be included in the route\n2. Use a dictionary type instead, and include only the keys/values you want to be included in the route. @NTaylorMullen so this already happens for Tag Helpers, but not Tag Helper Components?. Got it, this seems reasonable to me.\n@jbagga / @rynowak - any concerns about adding this to 2.1?. @Tratcher any idea on this limit?. @Tratcher parking this on your plate until we can figure out what's wrong.. @rynowak / @Tratcher - any idea on whether the current support for GET-with-body is deliberate?. @rynowak thoughts on adding this?. Correct, per https://github.com/aspnet/Mvc/issues/6754#issuecomment-326763351, we are not planning on adding ViewBag to Razor Pages.. I think this error is caused by having a tag helper that is incorrectly configured. Does your project include any custom tag helpers?\nHere's the code that throws the exception: https://github.com/aspnet/Razor/blob/8dfba25d5900a8fc4d0f73d56cbc110fcce5c3db/src/Microsoft.AspNetCore.Razor.Language/DefaultTagMatchingRuleDescriptorBuilder.cs#L98\ncc @NTaylorMullen in case you have other thoughts.. @thanhnntq can you upload your entire app to GitHub? We think there's another tag helper that is causing the problem (perhaps in another library the app is referencing).. There is no direct support for this in ASP.NET Core MVC. You might be able to write a custom controller convention to change this behavior. Here's a different sample showing some other capabilities of controller conventions: https://github.com/aspnet/Entropy/tree/dev/samples/Mvc.GenericControllers - perhaps you can use the code as a reference and adapt it to your needs.\nI think if you instead make the method virtual you can then override the method, and avoid using the new keyword.\ncc @rynowak in case you have other thoughts.. @kichalla can you take a look?. @dougbu / @rynowak thoughts on this?\n@drauch have you tried DisplayNameFor?\nI can't recall the exact differences between these methods.... @dougbu thanks for the details!\nI'm placing this in the Backlog because we have not current plans to do this, but it's listed as up-for-grabs in case someone would like to take a stab at it.. Indeed, the question ultimately is \"How can MVC provide additional value with respect to these HTML5 input type.\" For example, one type of value-add is that when MVC sees you're using a System.DateTime or System.DateTimeOffset, it automatically renders <input type=\"datetime-local\">, and sets the value= attribute to the correct format.\nSo, for the 4 input types above, what, if anything, can MVC do to provide added value?. @veikkoeeva thanks for the additional info. I've moved this out of the Backlog so that the team can re-consider it for a future release (no guarantees!).. @Rabadash8820 not too dangerous \ud83d\ude04 It's just a marker label for us that we need to review it again soon.. We need to be cautious about how much traversing is done. It would be dangerous to do a full scan of the tree because some solution folders can be enormous - easily thousands of folders, if not many more.\nBut, perhaps we could add some simple logic to handle some common cases, such as looking for <solution folder>/src/<assembly name>/*.csproj.\n@javiercn thoughts on this?. @RehanSaeed I believe the idea here is that if you have a custom scenario, you can override one of the virtual methods on WebApplicationTestFixture to suit your needs:\nhttps://github.com/aspnet/Mvc/blob/008a562bf5b1ab89e4b83c60faaabd1d12ffcb82/src/Microsoft.AspNetCore.Mvc.Testing/WebApplicationTestFixture.cs#L122\nIn general the app's startup code should be aware of multiple environments and use conditional logic to enable/disable certain parts as needed. The reason the test fixture calls the default method is that in any non-trivial scenario there are many services that need to be configured, so having two copies of that code seems less than ideal.\n@javiercn do you have additional thoughts on this?. @javiercn can you take a look?. @javiercn can you take a look at this flaky test?. @John0King can you upload a complete repro to GitHub so we can take a look? I'm not sure there's enough information here for us to reproduce this.. @John0King thanks for sharing the sample.\n@jbagga can you take a look?. Hi @dietrichha , the model binding system uses different cultures depending on where it gets the data, which is decided by the Value Providers, which create ValueProviderResults that have both the value and the culture associated with the value. Here's the data structure: https://github.com/aspnet/Mvc/blob/008a562bf5b1ab89e4b83c60faaabd1d12ffcb82/src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ValueProviderResult.cs#L57-L60\nThe value providers for Routing data and for Query String both always using InvariantCulture, whereas the value provider for Form data uses the current culture.\nThis is why setting the culture for the request doesn't affect model binding data from the Route or Query String.\nThere are a few alternatives:\n1. Have the property on the model be a string (e.g. DateAsString), and then have a helper property called RealDate that is a DateTimeOffset get-only property that parses the DateAsString property using the desired culture\n2. Write a custom model binder and/or value provider that has specific knowledge of your app's requirements to make decisions about the required culture.\nThe reason for this behavior is that URLs tend to be shareable and so having culture-specific data in there means that if user 1 is in de-DE culture, and user 2 is in ja-JP culture, they can't use the same URL.\nOf course this doesn't work for every scenario in every app, but we felt it was a reasonable compromise.. I believe this is currently by-design. @dougbu / @rynowak - can you confirm? I figured we must have had past discussions on this but I can't find them.. Closing because we are not planning to make changes in this area.. ",
    "tugberkugurlu": "So, any framework besides MVC won't be able to take advantage of this impl. of model binding and they need to do the work from scratch. Am I getting this correct or am I completely off here :smile:?\n. Is this going to be on top of new logging infrastructure? \nI always hated the fact that we have different logging structures for everything and I hope this time it will leverage the existing logging infrastructure w/o introducing new types :smile: \n. @davidfowl :+1: \n. @yishaigalatzer what are the current thoughts on HTTP caching? As MVC is now a unified framework which will also harbor the Web API, that would be something needed there.\n. I guess this means that we won't need custom parameter binding for things like IPrincipal, CancellationToken, etc. for actions, correct?\n. Imagine a scenario where you have model as below:\npublic class MyModel \n{\n    public string Type { get; set; }\n}\nIn my application, the Type can be only specific things which are defined dynamically. So, in each request I need to make request to my data storage system in order to get the valid types. So, that request can be made async.\n. Also, see #788 for a related issue.\n. ",
    "Praburaj": "I've been using something like <... src=\"/scripts/jquery...\" /> (without ~) until testing with IIS express which worked fine. This is an issue while hosting in IIS as in IIS its common to host in a vDir path like /myApp. Browser tries to resolve the above references as /scripts/jquery... instead of /myApp/scripts/jquery.js.\n. verified this works now. \n. This also happens if I have an @ inside a double quote in CoreClr. \n. verified. \n. Issue fixed now. Closing. \n. Issue solved. Closing the bug. \n. Yes - Music store needs it.\n. oops :). I can validate this if that's fine. \n. This fix worked! \n. @rynowak I verified this is indeed due to the layout page that I have included in the View Component :). I submitted a change to fix this in MusicStore app. It works now. \n. This looks like a false alarm. This seems to be working now. Closing it for now. \n. Thanks. I'll have a look. \n. verified.\n. This is fixed now. Closing. \n. Looks like this is fixed. closing the bug. \n. Sure. We will fix the samples.\n. This seems to be fixed.\n. Thanks. I'll fix the sample now. \n. verified.\n. I don't seem to be running into this issue. \n. I ran into this issue today when I try to run on desktop clr. Reopening the bug. \nRepro : Clone bug tracker app. Run it on net45 by setting SET TARGET_FRAMEWORK=. run k web.\n. Then you can run it on helios. Just change the target framework to desktop.\n. I'll update the thread what's happening with the latest bits since many things seems to have change with latest bits. \n. Helios is broken right now, but self host is still good. I can reproduce this issue on selfhost when running on net45. @yishaigalatzer I can show a repro of this if you would like to have a look. Alternatively the repro steps are quite simple: \n1. Clone BugTracker repo\n2. Run build.cmd\n3. Run kvm.cmd setup\n4. cd src\\BugTracker\\\n5. SET TARGET_FRAMEWORK=k10\n6. Run k web and navigate to url http://localhost:5002 to see razor working\n7. SET TARGET_FRAMEWORK=\n8. Run k web and navigate to url http://localhost:5002 to see the exception. \n. Thanks. I'll verify this. \n. verified.\n. verified.\n. verified this is fixed. \n. Sure. I'm going to verify this once I can build MusicStore. \n. This issue seems to reproduce still. \n. This fix seems to have regressed some other scenarios. Open MusicStore and click Login button to see a 404. \nFor example:\n```\n        //\n        // GET: /Account/Login\n        [AllowAnonymous]\n        //Bug: https://github.com/aspnet/WebFx/issues/339\n        [HttpGet]\n        public IActionResult Login(string returnUrl)\n        {\n            ViewBag.ReturnUrl = returnUrl;\n            return View();\n        }\n    //\n    // POST: /Account/Login\n    [HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Login(LoginViewModel model, string returnUrl)\n    {\n        if (ModelState.IsValid)\n        {\n            var signInStatus = await SignInManager.PasswordSignInAsync(model.UserName, model.Password, model.RememberMe, shouldLockout: false);\n            switch (signInStatus)\n            {\n                case SignInStatus.Success:\n                    return RedirectToLocal(returnUrl);\n                case SignInStatus.LockedOut:\n                    ModelState.AddModelError(\"\", \"User is locked out, try again later.\");\n                    return View(model);\n                case SignInStatus.Failure:\n                default:\n                    ModelState.AddModelError(\"\", \"Invalid username or password.\");\n                    return View(model);\n            }\n        }\n\n        // If we got this far, something failed, redisplay form\n        return View(model);\n    }\n\n```\n. @kichalla @KKhurin \n. As an additional note - this happens only on Ctrl + F5. Does not happen when doing F5. \n. This is fixed with the latest CoreCLR bits. \n. @harshgMSFT \n. This can be closed. If this is the same as the private that I tested, I can confirm this worked. \n. I verified that a private with this fix makes antiforgery support work on mono. \n. @victorhurdugaci - I'll add a check for this in the automation. \n. /cc @pranavkm @yishaigalatzer \n. This works fine now with @pranavkm 's fix. Closing the bug. \n. @pranavkm @Tratcher .I addressed all the feedback. Do you have any more feedback. Otherwise let me know I can merge.\n. @pranavkm - Can I get a sign off on this to merge? \n. PR updated after addressing the PR comments.\n. From @sebastienros on May 5, 2014 21:35\nWe should move this issue to WebFX. I agree we need an overload with a single claim, but multiple ones do make sense in the sense they represent a logical OR.\n. Moving this bug to MVC as it belongs to MVC. \n. @pranavkm fixed and updated.\n. This is merged. https://github.com/aspnet/Mvc/commit/4e9e33fc07044c768f8c82a2ed88888a206af953\n. I see. Feel free to close if it does not need a description. I filed bugs across the board for missing description. \n. ",
    "troydai": "As of now there are four unit test projects under test folder.\n. In a bottom up investigation of Music Store desktop memory consumption, following call took 2.1% of the total memory usage inclusively:\nName                                                                                                                                                                                                Exc %   Exc Exc Ct  Inc %\nmodule Microsoft.AspNet.Mvc.Core <<Microsoft.AspNet.Mvc.Core!Microsoft.AspNet.Mvc.DefaultActionSelector+<>c__DisplayClass20.<HasValidAction>b__21(class Microsoft.AspNet.Mvc.ActionDescriptor)>>      0.0     0      0    2.2\nThe memory were all spent on \nLIB <<System.Core.ni!System.Linq.Enumerable.All[System.__Canon](System.Collections.Generic.IEnumerable`1, System.Func`2)>>\nHere's the source codes:\n``` C#\n        public virtual bool HasValidAction([NotNull] VirtualPathContext context)\n        {\n            if (context.ProvidedValues == null)\n            {\n                // We need the route's values to be able to double check our work.\n                return false;\n            }\n        var actions =\n            GetActions().Where(\n                action =>\n                    action.RouteConstraints == null ||\n                    action.RouteConstraints.All(constraint => constraint.Accept(context.ProvidedValues)));\n\n        return actions.Any();\n    }\n\n```\nShould these route constraints be cached, the memory consumption can be reduce to minimal. \n. /cc @rynowak \nChange of plan. I'll retire this bug. More samples will be move to Performance repo instead.\n. will merge in seconds.\n. :shipit: \n. @pranavkm @dougbu @davidfowl \nChange in DNX has been merged to: https://github.com/aspnet/dnx/commit/46fa4afc233c01ea7192beb0c182c5ea41c28cff\nThis PR is updated.\n. Build pass locally (with build verify). As soon as a new DNX build is finished on CI, the MVC build will be broken by any minute. I'll merge this change soon.\n. @muratg @rynowak @pranavkm \nAll right, I talked to @pranavkm. Looks like MVC team plan to remove this package. So I'm not going to touch it. I'll close this issue then.\n. ",
    "kirthik": "Talked to Pranav this morning about this. He asked me to open a bug :)\nSent from my iPhone\nOn Mar 20, 2014, at 6:41 PM, \"Yishai Galatzer\" notifications@github.com<mailto:notifications@github.com> wrote:\nNo implemented yet, please don't open bugs for stuff that's not implemented yet. (Talk to your local friendly dev first :) )\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/WebFx/issues/121#issuecomment-38240609.\n. Validated the repro above and it works. \n. Fixed in a0629f4d2338e699eada71f7bc54edf8c982c3a5\n. Closing this since Register/Login actions(These actions have the filter attribute on them) work on Music Store\n. If I have [FromBody] attribute then sending post with form-urlencoded content type is not working. It does not matter if you have charset or not. If I remove [FromBody] attribute, then model binding works when action has one parameter. If an action has multiple parameters, for example - \npublic async Task<IActionResult> RemoveFromCart(int id, string x)\nid gets the value correctly but x does not.\nStatement below gives me x \nvar x= formParameters[\"x\"];\n. DisplayName and Display(Name=\"xxxx\") attributes both did not work. Once the TODO items you are talking about gets resolved, will both attributes work?\n. To add more info, \nOrder class has\n[DisplayName(\"First Name\")]\n        [StringLength(160)]\n        public string FirstName { get; set; }\nand view page is calling @Html.EditorForModel()\nOn running, view display FirstName property as 'FirstName' not 'First Name'\nI am seeing the same thing when the property has [Display(Name=\"First Name\")] attribute too.\n. Fix checked in - 9d2b1822d9e93bf74e3f1df8096b6bb2d6d43371\n. Code checked in - 5de210f5271c385d7bae47af0f866698518fccdc\n. @danroth27 - Microsoft.AspNet.Mvc package has 2 descriptions. Which one should I add in project.json?\n. Mvc commit - 028a2359a4cb13db910d691f8715d5bb41ef2488\nRazor commit - 85d0ddc45a57de5c2d839a3a2d2d06546c876ce3\nRouting commit - 40b2da7cc7240fbe7366331e819f3d3875181689\n. @yishaigalatzer , @danroth27 - It looks like we already have a perf test which covers basic scenario for viewcomponents(This is covered as part of razor perf test). Do we need more tests in this area covering different scenarios? \n. fix checked in perf repo (commit id - aceb53103848add6f1519227098e06118a970f5d)\n. I could not repro this issue against Preview bits. So closing it.\n@marcuslindblom - Could you please try this scenario against Preview bits and reopen if you see the error?\n. Here is the error. I am thinking 4ec6da1ed3e00b50f566ca841e885dbd038c2699 fixed the issue.\nMicrosoft.AspNet.Mvc.Razor.CompilationFailedException: Compilation for 'D:\\ProjectK\\WebApplication1\\src\\WebApplication1\\Views\\Home\\Index.cshtml' failed:\nViews\\Home\\Index.cshtml(6,6): error CS4034: The 'await' operator can only be used within an async lambda expression. Consider marking this lambda expression with the 'async' modifier.\n at Microsoft.AspNet.Mvc.Razor.CompilationResult.get_CompiledType()\n at Microsoft.AspNet.Mvc.Razor.CompilerCache.GetOrAdd(IFileInfo file, Func`1 compile)\n at Microsoft.AspNet.Mvc.Razor.RazorCompilationService.Compile(IFileInfo file)\n at Microsoft.AspNet.Mvc.Razor.VirtualPathRazorPageFactory.CreateInstance(String path)\n at Microsoft.AspNet.Mvc.Razor.RazorViewEngine.CreateViewEngineResult(ActionContext context, String viewName, Boolean partial)\n at Microsoft.AspNet.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean partial)\n at Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.ViewResult.FindView(IViewEngine viewEngine, ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.ViewResult.<ExecuteResultAsync>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.FilterActionInvoker.<InvokeActionResult>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.FilterActionInvoker.<InvokeActionResultFilter>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n at Microsoft.AspNet.Mvc.FilterActionInvoker.<InvokeActionResultWithFilters>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.FilterActionInvoker.<InvokeAsync>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.MvcRouteHandler.<RouteAsync>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Routing.Template.TemplateRoute.<RouteAsync>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Routing.RouteCollection.<RouteAsync>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Builder.RouterMiddleware.<Invoke>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Security.Infrastructure.AuthenticationMiddleware`1.<Invoke>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.VisualStudio.Web.BrowserLink.Runtime.BrowserLinkMiddleware.<ExecuteWithFilter>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.RequestContainer.ContainerMiddleware.<Invoke>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Loader.IIS.KlrHttpApplication.<ProcessRequestAsyncImpl>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Loader.IIS.HttpApplicationBase.<InvokeProcessRequestAsyncImpl>d__1.MoveNext()\n. @pranavkm - Could you please take a look? I updated the PR.\n. Fixed in d8455c3e648b181495e36ff19ba2de4ca3eb1d48\n. Checked in - 951ed05893d10beafbbe6449652684c19f2384ae\n. @dougbu - Updated the PR based on your comments. Could you please take a look?\n. @dougbu - Thanks for your feedback. I updated the PR. Please take a look when you get a chance.\n. @dougbu - addressed all issues(hopefully)\n. Checked in 678226a6bf6f5e4503953a2ad781241fd83e85e5\n. checked in - e41e5066f991c8ca74f8d6d87d2f41590784b634\n. checked in - 6a824a43948ae426299082d1072f0e342194aa5f\n. We do get validation errors from ModelState in partial view but validation errors(ModelState keys) are prefixed with parameter name(ex : cat.CategoryName). So if user wants to get validation error on a particular property, he needs to know the parameter name or loop through all validaton errors in modelstate.\n. @rynowak - the decision was to remove prefix.\n. Fix checked in - 2b246e7acc50a4a3fc19d5e36578e194d1bd94e3\n. @pranavkm - Could you please take a look?\n. Change looks good. \nOnce you sign the CLA, you are good to go, I think. cc @Eilon \n. I split the old PR into two separate PRs. This PR is just about adding ModelMetadataType attribute. I will send another PR for TryValidateModel.\n@dougbu, @rynowak - Could you please take a look?\n. @dougbu - Updated based on your comments. Could you please take a look?\n. @rynowak - I updated the PR based on your comments. \n. checked in - 6a824a43948ae426299082d1072f0e342194aa5f\n. Updated PR based on comments. @pranavkm, @rynowak  - Could you please take a look?\n. cc @pranavkm \n. checked in - e41e5066f991c8ca74f8d6d87d2f41590784b634\n. @dougbu , @rynowak - Could you please take a look?\n. checked in - f1c62ef30234c1ffe767abbd11e3c830402aea76\n. checked in - f6e701b2b2d01ae068b144416aeac080c623bc17\n. Ok. I will change method names all across to SetCookieAndHeader. Where should the new method be if not on HtmlHelper?\n. checked in - cbed666cba82b8a0984c8e047e0eb4f7b286894f\n. code checked in - 3c9456e2a33ce0d5a518ebad59b399421b96f87b\n. Updated the code. cc @rynowak \n. Thanks for reviewing. Code is checked in - 5de210f5271c385d7bae47af0f866698518fccdc\n. First check-in went into jsonpatch branch. I am closing this one. I will open new issues for the items we discussed.\n. @harshgMSFT - Updated the code. Could you please take another look?\n. Fix checked in - 7b18d1d3f1f04ba8952b13fd2b0f903e684bf78d\n. @harshgMSFT - Could you please take a look?\n. @harshgMSFT : Updated PR. Could you please take a look?\n. @harshgMSFT - Updated PR. Please take a look.\n. Fix checked in - 2b246e7acc50a4a3fc19d5e36578e194d1bd94e3\n. @harshgMSFT : updated code\n. Thanks for reviewing. This PR is checked in - 7b18d1d3f1f04ba8952b13fd2b0f903e684bf78d \n. @KevinDockx - Changes look fine to me but we need to fix spacing. I can fix that.\n. Checked this into jsonpatch branch. This is related PR for jsonpatch branch - https://github.com/aspnet/Mvc/pull/2212\n. Code checked in - a5da5b3acd1c397db3b06549d0a420697358829b\n. would it be easier if I squash them into 1?\n. closing this since I opened a cleaner one  - https://github.com/aspnet/Mvc/pull/2201\n. @rynowak - Rebased and updated code.\n. @rynowak - updated PR.\n. Thanks for reviewing. Code checked into jsonpatch branch - 801f4b57cb761daa6cf0721dba628bdf55494870\n. checked in - d87f00569ec5815388325876f551fb71ee480c1c\n. No. We don't. It does nothing today.\n. When I do a form post, ModelState shows validation error for Address property\n. merged 8b5223518f3fb1d4b90744370ef4a08d9a2a31c9\n. :shipit: \n. Since we are branching today afternoon for beta4 release, I checked this in - 0462dd6be39c031e04495e1fd22c4b0f9b30ba1f\n. code checked in - 924d50bd8f9684b08124463cf4bc677fc5f2e5a2\n. Fix checked in - 3962c597f3619d24c04822dd7e492ca9253ba5a3\n. Fix checked in - 3bc7599903dfd8ddc55d9249794efa65b2f527e1\n. Test operation is not supported yet. For reference - https://github.com/aspnet/Mvc/issues/2218\n. I manually created it but talked to @pranavkm. I will generate it with the command provided.\n. @rynowak - Could you please help look at updated PR?\n. I messed up something during rebase. I am fixing it. Please don't look at this PR until then.\n. @rynowak - I updated the PR. Could you please take a look?\n. We have a test DeserializationMustFailWithEnvelope in ObjectAdapterTests.cs. I added an Assert to check the exception message.\n. @Eilon - Are these ok  - T changed to TModel and action changed to logError?\n. @rynowak - Updated PR. Could you please take a look?\n@Eilon  - I changed action to logErrorAction in this PR. I will change T to TModel in a separate PR.\n. @rynowak - Added tests and fixed minor issue mentioned above. Could you please take a look?\n. @harshgMSFT , @rynowak : updated PR\n. checked in - 3962c597f3619d24c04822dd7e492ca9253ba5a3\n. @rynowak  : Updated code based on comments. Could you please take a look?\n. Checked in - 3bc7599903dfd8ddc55d9249794efa65b2f527e1\n. Fix checked in - 3042a62ba95c014179dd5604dc10fecfbd4c924a\n. @rynowak - updated code. Could you please take a look?\n. Here is the error message we see when unknown token is used - \nWhile processing template 'Products_[unknown]', a replacement value for the token 'unknown' could not be found. Available tokens: 'action, controller'.\nSeems ok to me. \n. checked in - 9d2b1822d9e93bf74e3f1df8096b6bb2d6d43371\n. @rynowak : updated code.\n. checked in - 924d50bd8f9684b08124463cf4bc677fc5f2e5a2\n. @rynowak : updated namespaces.\n. @Eilon, @rynowak - updated code.\n. fix checked in - 30e54609ccb2b083e7ea254cc96043f94f937545\n. Addressed all comments above. Code checked in - 3c9456e2a33ce0d5a518ebad59b399421b96f87b\n. @dougbu : Updated the code and add a couple of tests. Could you please take a look?\n. I missed few test updates in the last iteration. I rebased, addressed comments above and included the changes I missed last time.\n. @dougbu : updated.\n. Code checked in - caa8ea44fbc59d333dd82f571d756ce6876f0fae\n. cc @rynowak, @dougbu, @pranavkm \n. @dougbu : Yes I changed timezone on my machine and ran the test. It worked.\n. checked in - da740cd6a8e75895e72be28e367196aa3af9a6d4\n. @rynowak : updated\n. merged - 8b5223518f3fb1d4b90744370ef4a08d9a2a31c9\n. ",
    "kulmugdha": "This seems to be fixed now. I don't suppose I have rights to close the issue? I don't see a close button anywhere around. \n. Verified fixed on latest bits. \n. No this doesn't seem to be fixed. Talked to @pranavkm , he confirmed that we haven't fixed it. \n. Added the sample here: https://github.com/aspnet/Entropy/tree/dev/samples/Mvc.CustomRoutingConvention \n. I tried the scenario mentioned in the issue and it is working fine for me. \n. This is fixed and tests enabled in checkin 3aaeebd9c5bb1ad5d2a508622337084d45492972. \n. @rynowak -- I have completed the MVC changes. Can you please have a look? I have added link generation tests that was the final remaining piece and incorporated the PR comments. \n. @rynowak -- I have incorporated the feedback and changed regex tests. \n. @rynowak -- Please check. The formatting issues are fixed now. \n. 514460b8018ff84158196e6421652538297fa10c\n. @rynowak @harshgMSFT -- This is the first draft of the feature. Please have a look. This has feature and unit tests. Doesnt have functional tests yet. I sent it out so you can have a look while I work on functional tests. \n. @yishaigalatzer @rynowak @harshgMSFT -- Please have a look at the updated PR. @harshgMSFT -- I have incorporated some of the comments, but as we talked they are more of cleanup. I'll continue to incorporate them. \n. @rynowak @yishaigalatzer  -- I have incorporated your comments from this morning. Also I have couple of questions that I have asked. Please have a look. \n. @rynowak @harshgMSFT @yishaigalatzer -- please have a look at this iteration. I am trying to fix some aesthetic issues as I said above. \n. @rynowak -- Incorporated your comments\n. @rynowak incorporated final few comments.\n. @rynowak fixed the comments\n. @rynowak @yishaigalatzer I have made the Filter Factory change\n. Checked in 09b0aa51829e13012d011ea3185e7185761f2f18\n. @rynowak @NTaylorMullen @pranavkm -- Please have a look. I believe I have modified test cases for your code. \n. @Eilon \nHere is the original routing issue: https://github.com/aspnet/Routing/issues/140. You have looked at it. We set the lowercaseurls behavior on by default as the bug suggests. So this is the fix for the tests that break because of the new default behavior. \n. @Eilon Is this the final decision? Or we are still thinking about it?\n. No I have merged this change already, just forgot to close this one. \n. ",
    "victorhurdugaci": "Related (with some comments) https://github.com/aspnet/Routing/issues/29\n. This seems to work if I add the \".cshtml\" extension to the path. \nI think this still should be investigated because the error message is very confusing. When I use a tilde the reported path contains \"cshtml\" even though I did not specify it but without the path does not.\nIt seems that MVC5 has the same problem.\n. I can repro with the latest bits. I get a 404 when clicking the Login button\n. Looks good to me.\n. Hm... It seems that I need to explicitly set the Boolean flag to validate the model. \n@pranavkm is this a bug? Should this be on by default?\nC#\nbindingContext.ValidationNode.ValidateAllProperties = true;\n. Just for reference, the failures are:\nAssert.Equal() Failure\n                                    (pos 58)\n Expected: \u00fa\u00fa\u00fa<DummyClass xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-insta\u00fa\u00fa\u00fa\n Actual:   \u00fa\u00fa\u00fa<DummyClass xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmln\u00fa\u00fa\u00fa\n                                    (pos 58)\n    at Microsoft.AspNet.Mvc.Core.XmlSerializerOutputFormatterTests.<SuppliedWriterSettings_TakeAffect>d__7.MoveNext() in C:\\BuildAgent\\work\\cddf23d85192f3c3\\Universe\\Mvc\\test\\Microsoft.AspNet.Mvc.Core.Test\\Formatters\\XmlSerializerOutputFormatterTests.cs:line 105\n --- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n --- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n --- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n. @dougbu \nwhich is the base change you're reacting to here?\nhttps://github.com/aspnet/dnx/pull/1615\nwhat is the timing for the set of changes?\nsometime this week\nsuggest this change should not impact the generated files under ...\ngood point. updated\n. ",
    "kichalla": "This issue does not repro anymore. @rynowak \n. From what i have seen, Controller suffix is only required for POCO controllers. I have also tried with Controller suffix for above scenario, but got the same result.\n. Adding more info after discussing with Ryan...FilterB is decorated on the Controller and FilterC on the action. Following are the differences in the order of the execution between MVC5 & WebFx...as you can notice below, the ordering is reversed in WebFx\nMVC5\nInside FilterB.OnActionExecuting. Decorated on Controller\nInside FilterC.OnActionExecuting. Decorated on Action\nInside HomeController.Index\nInside FilterC.OnActionExecuted. Decorated on Action\nInside FilterB.OnActionExecuted. Decorated on Controller\nInside FilterB.OnResultExecuting. Decorated on Controller\nInside FilterC.OnResultExecuting. Decorated on Action\nInside FilterC.OnResultExecuted. Decorated on Action\nInside FilterB.OnResultExecuted. Decorated on Controller\nWebFx\nInside FilterC.OnActionExecuting. Decorated on Action\nInside FilterB.OnActionExecuting. Decorated on Controller\nInside HomeController.Index\nInside FilterB.OnActionExecuted. Decorated on Controller\nInside FilterC.OnActionExecuted. Decorated on Action\nInside FilterC.OnResultExecuting. Decorated on Action\nInside FilterB.OnResultExecuting. Decorated on Controller\nInside FilterB.OnResultExecuted. Decorated on Controller\nInside FilterC.OnResultExecuted. Decorated on Action\n. @danroth27 : can you please share the reason as to why this was closed? For more information, in MVC5, if filters of same type are decorated on action and controller, then the one on action overrides the one on controller.\n. One of the settings that JsonContractResolver is changing is how it behaves with Required data annotation attribute. It sets the setting called Required to AllowNull which states The property must be defined in JSON but can be a null value. For example, following scenario is broken currently without this:\nValue types having Required annotation do not trigger model state errors. This gets triggered in case of form-url-encoded correctly but not in case of Json or Xml.\n``` c#\npublic class Person\n{\n    [Required]\n    public int Id { get; set; }\n[Required]\npublic string Name { get; set; }\n\n}\n```\n\n@harshgMSFT @pranavkm \n. Just FYI...if we decide to fix going by the ContractResolver approach, then as you know it would only work for Json and not for Xml. \nIn Web API, we had something called InvalidModelValidatorProvider which used to make a requirement that if a value type is decorated with Required attribute, then it must also be decorated with DataMember(IsRequired=true) attribute. \nThe scenario behind this was that Web API used to support Json and Xml formatters out of the box. It was considered a security issue if validation got triggered when posting via Json but not via Xml. In MVC 6, Xml is not exactly out of the box as users have to explicitly add it, so not sure if we should consider this scenario.\nThat said, in Web API InvalidModelValidatorProvider used to be added out of the box but it proved to be an annoyance to users as some users would be working only with Json or bound from Uri but are forced to add reference to System.Runtime.Serialization and decorate with DataMember(IsRequired=true) attribute, so it was later removed from default validation providers list.\nA discussion came up that an end user should make sure to test his code across all formatters to make sure the validation happens, but as you may agree it is highly unlikely that they do and they could probably expect it to work the same across all formatters.\nSnippet from the following reference:\nc#\n// Validate that value-typed properties marked as [Required] are also marked as [DataMember(IsRequired=true)]\n// Certain formatters may not recognize a member as required if it's marked as [Required] but not [DataMember(IsRequired=true)]\n// This is not a problem for reference types because [Required] will still cause a model error to be raised after a null value is deserialized\nif (metadata.ModelType.IsValueType && attributes.Any(attribute => attribute is RequiredAttribute))\n{\n    if (!DataMemberModelValidatorProvider.IsRequiredDataMember(metadata.ContainerType, attributes))\n    {\n        yield return new ErrorModelValidator(validatorProviders, Error.Format(SRResources.MissingDataMemberIsRequired, metadata.PropertyName, metadata.ContainerType));\n    }\n}\nReference:\nhttp://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Http/Validation/Providers/InvalidModelValidatorProvider.cs\n. Commits:\nc276ddaa39735a8826b1da27b84dd793865a65e4 \nf737083c946137dd9a411759c3ca83856a0083a2\n. Sure...i agree...+1 for filter\n. Currently if you take a look at users' posts in StackOverflow, some of them just do not know that they can check for model state and find out that there are problems with their payload etc. We need to improve this experience. Sometimes I feel having template experience alone is not sufficient.\n. We need an aliasing feature right? values for action's parameters could be coming from route, query string, request header (custom value provider) etc....Web API had alias through Name property of [FromUri] attribute...i think we need something on similar lines..\n. One more use case:\nLet's say you are writing an in-memory test(Test1) which uses a custom inline constraint and you have applied this new inline constraint on your  attribute route. This test passes and everything is fine.\nBut now when someone else writes a new in-memory test(Test2) which uses attribute routing, then it would scan all the controllers in your test assembly to get the attribute routes and during this process Test2 would fail as it would have encountered an unrecognized inline constraint which was actually registered in Test1\n. Just a note so that we do not miss it...Json formatter needs to consider culture information (there are some settigns on SerializerSettings, JsonReader etc) when trying to serialize/deserialize data...currently we do not explicitly set any culture...but yeah this would depend on how we plan to implement this whole culture related stuff...related issues:\nhttps://github.com/aspnet/HttpAbstractions/issues/10\nhttps://github.com/aspnet/Helios/issues/2 (closed but has good info)\nScenarios to consider:\na. Browser's language preferences (probably set through Accept-language header)\nb. Browser's language could be 'en-US' but UI could provide a drop down to change language preferences\n. Also ServiceFIlterAttribute seems to check if a service is just an IFilter...since there can be only 4 'types' of filters (authorizatoin, action, exception & result) that we honor, should we throw if the registered one is neither of these?\n. :shipit: \n. Closing this issue as this feature has been cut.\n. Just FYI...one more scenario that I have come across: Generate a link to a local or cdn server url. In this case the user is currently having an extension on UrlHelper...making the Content method virtual would help in this case...\n. Resolved as part of commit: 43c7ddb9b78c3c0ea8101db34225677baabd2e64 \n. :shipit: \n. :shipit: \n. :shipit:\n. :shipit: \n. Discussed offline with @pranavkm  & @yishaigalatzer ...TryUpdateModel is targeted for non-formatter based scenario and since this helper sits on a controller, the question is if we can provide an experience which is consistent across value providers & formatters (ex: Json formatter) #650 \n. regarding \"This change exludes internal and nested types from being treated as\ncontrollers. This is consistent with MVC5's behavior\"...you specifically meant MVC and not Web API is it?...i say this because Web Api honors nested types...\n. :shipit: \n. Just adding details as I came across this now...\nFollowing exception occurs when json formatter is trying to write out the output..and I had a error page middleware which responded back with a html page and a 200 status code and the following headers..notice that the generated output from error page middleware is html, the content-type is application/json...this is understandable as headers are sent first and then the body...so its related to buffering to enable catching exceptions and sending out a con-neg response...\n```\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=utf-8\nServer: Microsoft-IIS/8.0\nX-SourceFiles: =?UTF-8?B?QzpccHJvamVjdGtcU3RyZXNzXEtTdHJlc3NUZXN0c1xLU3RyZXNzXHNyY1xBcHBzXE1vZGVsQmluZGluZ0FuZEZvcm1hdHRlcnNcYXBpXHByb2R1Y3Rz?=\nX-Powered-By: ASP.NET\nDate: Sat, 30 Aug 2014 20:37:42 GMT\nContent-Length: 29272\n```\n``\n[] \nAn unhandled exception occurred while processing the request.\nSqlException: Invalid object name 'Product'.\nSystem.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\nDataStoreException: An error occured while running a data store operation. See InnerException for details.\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\nStack Query Cookies Headers Environment \nSqlException: Invalid object name 'Product'.\nSystem.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\nSystem.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\nSystem.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\nSystem.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\nSystem.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\nSystem.Data.SqlClient.SqlDataReader.get_MetaData()\nSystem.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource1 completion, Int32 timeout, Task& task, Boolean asyncWrite)\nSystem.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)\nSystem.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)\nSystem.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\nSystem.Data.Common.DbCommand.ExecuteReader()\nMicrosoft.Data.Entity.Relational.Query.QueryMethodProvider.Enumerable1.Enumerator.MoveNext()\nSystem.Linq.Enumerable.d__142.MoveNext()\nSystem.Linq.Enumerable.WhereSelectEnumerableIterator2.MoveNext()\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\nDataStoreException: An error occured while running a data store operation. See InnerException for details.\nMicrosoft.Data.Entity.Query.EntityQueryExecutor.EnumerableExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\nNewtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\nMicrosoft.AspNet.Mvc.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)\nMicrosoft.AspNet.Mvc.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterContext context)\nMicrosoft.AspNet.Mvc.OutputFormatter.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.ObjectResult.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\nMicrosoft.AspNet.Mvc.MvcRouteHandler.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.Template.TemplateRoute.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.RouteCollection.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Builder.RouterMiddleware.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.RequestContainer.ContainerMiddleware.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Diagnostics.ErrorPageMiddleware.d__1.MoveNext()\nNo QueryString data.\nVariable Value \nAccept application/json \nHost localhost:57568 \nUser-Agent Fiddler \n```\n. @yishaigalatzer : this was on Helios...\njust FYI...the response headers give a hint about the server...example:\nServer: Microsoft-IIS/8.0 - for Helios\nServer: Microsoft-HTTPAPI/2.0 - for weblistener\n. I have verified that this works fine.\n. Just FYI..if its related to link generation and producing lower case urls in MVC, then one could derive from default UrlHelper and inject it...\nExample: https://github.com/aspnet/Mvc/blob/dev/test/WebSites/UrlHelperWebSite/CustomUrlHelper.cs\n. Re-opening this issue as it was originally fixed but got regressed due to the following commit:\nhttps://github.com/aspnet/Mvc/commit/6600e68fc0d64e382f9172bfc4da1cbcb12bee10#diff-8fe1e17d71f328d3f4fbff84450b9f51L108\n@pranavkm @yishaigalatzer \n. the logic of returning text/plain based content has been moved to a new formatter #868 which is not yet checked in i think...\n. Its the same behavior as above..\n. Hmm...for a scenario like mine above, i could directly access values from query string and assign to the properties also..\n. Fixed with commit: fdeff1188b87b7c2486a2ff3fe4f09cffeed7289\n. As you probably already know the issue here is not with the formatter as such but the way data contract serializer works...you can serializing your type outside MVC with datacontract serializer and should notice similar exception...\n. Yes, MVC should support Xml serialization support as in WebAPI vCurrent...currently in the xml formatters, DCS based formatter eagerly says that it can write any type and doesn't allow other xml formatters/serializers to take part in the decision...I believe fixing this is already in the works.. @sornaks \n. @rynowak, @yishaigalatzer  : Probably this is a stale bug...seems like we already have this ability...links:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Filters/ProducesAttribute.cs#L23\nhttps://github.com/aspnet/Mvc/blob/dev/test/WebSites/ApiExplorerWebSite/Controllers/ApiExplorerResponseTypeOverrideOnActionController.cs#L8\n. My bad...please ignore my previous comment...i see that we want to specify the Type without the content types...\n. Just FYI...ran into this just now...in my case i was using json formatter..a write from this formatter is giving a chunked response in case of weblistener where as in IIS it does not...\n. Sure, filed in WebListener repo now: https://github.com/aspnet/WebListener/issues/61\n. Thanks for reporting this issue...we have come across this earlier and are suspecting the issue is with rendering of view in this case...Can you try the following and let us know what information do you see?\nComment out the ErrorPage middleware and instead have the following in its place(here we just dumping out the raw exception messages)\n``` c#\napp.Use(async (context, next) =>\n{\n    string exceptionDetails = null;\ntry\n{\n    await next.Invoke();\n}\ncatch (Exception ex)\n{\n    exceptionDetails = ex.ToString();\n}\n\nif (!string.IsNullOrEmpty(exceptionDetails))\n{\n    context.Response.StatusCode = 500;\n    context.Response.ContentType = \"text/plain\";\n    await context.Response.WriteAsync(exceptionDetails);\n}\n\n});\n``\n. Moved to https://github.com/aspnet/Diagnostics/issues/34\n. @xqiu : Do you have actions calledtest1andtest2in your AccountController?...following could be the related issue: https://github.com/aspnet/Mvc/issues/302\n. Thanks for the tip! @javiercn \n. Commit: 43c7ddb9b78c3c0ea8101db34225677baabd2e64\n. Sure, moved to https://github.com/aspnet/Tooling/issues/97..\n. :+1: \n. Updated\n/cc: @rynowak @javiercn \n. Updated\n/cc: @rynowak @dougbu \n. Updated\n/cc: @rynowak @dougbu \n. Fixed with commit: fdeff1188b87b7c2486a2ff3fe4f09cffeed7289\n. Currently JsonInputFormatter has a flag calledCaptureDeserilizationErrors(false` by default) to add deserialization errors to model state dictionary.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/Formatters/JsonInputFormatter.cs#L61\nQuestions:\n- Should we still keep this flag CaptureDeserilizationErrors on JsonInputFormatter OR remove it entirely and by default add any deserialization errors to model state? i.e Xml input formatters also would automatically add the deserialization errors into model state by default.\n- Should the fix for this issue only handle deserialization errors of our out of box formatters like Json, Xml OR should we even consider custom formatters written by end users and errors that happen during deserialization and adding them to model state?\n  https://github.com/aspnet/Mvc/blob/f19c2e493d338c6d8724e3a16bbad0ac92a03054/src/Microsoft.AspNet.Mvc.Core/ModelBinders/BodyModelBinder.cs#L61\n  @yishaigalatzer \n. /cc: @yishaigalatzer \n. Fixed with commit: 1c8582d77a136907f133eea9ec5e4a2c7ab1a158\n. Updated. /cc: @yishaigalatzer , @harshgMSFT , @sornaks \n. Updated: /cc: @harshgMSFT @rynowak \n. Updated: /cc: @harshgMSFT @rynowak \n. Commit : e985c2252876abcb80069755c1335371216ac379\n. :shipit: \n. :shipit: \n. :+1: \n. @pranavkm : can you elaborate more..there is already a test for it in this PR...so checking..\n. Checked in commit: dd587f743b36009690cb24ba6d578e2e92a64b87\n. :shipit: \n. Thanks Chris...I agree with your assessment...In Web API also, the recommendation was to not set the chunked encoding header and let the buffer policy to take care of it...but then we noticed some users saying that setting the header doesn't do anything etc....so we then added some logic to prevent this behavior:\nYou can take a look at the PrepareHeadersAsync in the following WebHost based scenario (similar code is present for WebApi's Owin adapter too):\nhttp://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Http.WebHost/HttpControllerHandler.cs\nJust like you mentioned, saying that this practice is NOT recommended is the easiest to explain to end users to prevent them from using it incorrectly...for example, a user could be downloading  a file from disk and ideally in this scenario the response should not be chunked as we can calculate the length...but now since we allow them(in Web API) to set the chunked header, the content is sent as chunked unnecessarily even though it ideally need not...\nRegarding on Kestrel, I haven't checked the behavior there....will work with @suhasj regarding it...\n. Commit: acb2a99e9f9c89f35289b667dda260d02adbc95f\n. :watch: \n. :shipit: \n. :shipit: \n. :shipit: \n. Just FYI...I have tried in MVC 5 and it also didn't support this..\n. Pranav and I investigated earlier(please take a look at the earlier comment in this bug) about this for 2.3.2 and it was not supported there too..\n. Summary of findings:\nFor the following model and action:\nModel:\n``` c#\npublic class BugInfo\n{\n    public string Title { get; set; }\npublic Dictionary<string, string> Properties { get; set; }\n\n}\n```\nAction:\nc#\npublic ActionResult CreateBug(BugInfo bug)\n(Note that in case of Web API, we decorate it with FromBody attribute)\nFormUrlEncoded formats support in different versions:\nMVC4 supported following formats:\n- bug.Properties[0].key=Height&bug.Properties[0].value=160\n- bug.Properties[Height]=160 (So this seems to have regressed in MVC5 and later)\nMVC5 supported following format:\n- bug.Properties[0].key=Height&bug.Properties[0].value=160\nWeb API 2 supported following format(notice there is no prefix 'bug' here):\n- Properties[0].key=Height&Properties[0].value=160\nASP.NET 5 supports following format:\n- bug.Properties[0].key=Height&bug.Properties[0].value=160\n. :shipit: \n. Commit: 17e4dd2bf6eafa42f73b03d2038de3f3878a5544\n. :shipit: \n. :shipit: \n. Thanks Suhas...\n@yishaigalatzer, @rynowak , @sornaks \nJust to be clear...this issue is not directly related to WebApiShim as it can be reproed with a regular controller too...\nIQueryable was special-cased in Web API 2, where a concrete DelegatingEnumerable was created (kind of related to earlier discussion about IEnumerable<> and XmlSerializer)...\nhttp://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Net.Http.Formatting/Formatting/XmlMediaTypeFormatter.cs\n``` C#\nprivate void WriteToStream(Type type, object value, Stream writeStream, HttpContent content)\n{\n    bool isRemapped = false;\n    if (UseXmlSerializer)\n    {\n        isRemapped = MediaTypeFormatter.TryGetDelegatingTypeForIEnumerableGenericOrSame(ref type);\n    }\n    else\n    {\n        isRemapped = MediaTypeFormatter.TryGetDelegatingTypeForIQueryableGenericOrSame(ref type);\n    }\nif (isRemapped && value != null)\n{\n    value = MediaTypeFormatter.GetTypeRemappingConstructor(type).Invoke(new object[] { value });\n}\n\nobject serializer = GetSerializer(type, value, content);\n\nusing (XmlWriter writer = CreateXmlWriter(writeStream, content))\n{\n    XmlSerializer xmlSerializer = serializer as XmlSerializer;\n    if (xmlSerializer != null)\n    {\n        xmlSerializer.Serialize(writer, value);\n    }\n    else\n    {\n        XmlObjectSerializer xmlObjectSerializer = serializer as XmlObjectSerializer;\n        if (xmlObjectSerializer == null)\n        {\n            ThrowInvalidSerializerException(serializer, \"GetSerializer\");\n        }\n        xmlObjectSerializer.WriteObject(writer, value);\n    }\n}\n\n}\n```\nhttp://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Net.Http.Formatting/Formatting/DelegatingEnumerable.cs\nRepro Code\n``` C#\npublic class Person\n{\n    public int Id { get; set; }\npublic string Name { get; set; }\n\n}\n[Route(\"api/people\")]\npublic class PeopleController : Controller\n{\n    [HttpGet]\n    [Produces(\"application/xml\")]\n    public IQueryable GetAll()\n    {\n        return Enumerable.Range(0, 5).Select(i => new Person() { Id = i, Name = \"Name\" + i }).AsQueryable();\n    }\n}\n```\nException\n``\n[ERROR:Microsoft.AspNet.Server.WebListener.MessagePump] ProcessRequestAsync\nSystem.Runtime.Serialization.SerializationException: Type 'System.Linq.EnumerableQuery1[[WebApplication24.Controllers.P\nerson, WebApplication24, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]' with data contract name 'ArrayOfPerson\n:http://schemas.datacontract.org/2004/07/WebApplication24.Controllers' is not expected. Consider using a DataContractRes\nolver if you are using DataContractSerializer or add any types not known statically to the list of known types - for exa\nmple, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to the serializer.\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeAndVerifyType(DataContract dataContract, Xml\nWriterDelegator xmlWriter, Object obj, Boolean verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\nat System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiTypeAtTopLevel(DataContract dataContr\nact, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle originalDeclaredTypeHandle, Type graphType)\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObjectContent(XmlWriterDelegator writer, Object g\nraph, DataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObject(XmlWriterDelegator writer, Object graph, D\nataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObjectHandleExceptions(XmlWriterDelegator writer, Object gra\nph, DataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.DataContractSerializer.WriteObject(XmlWriter writer, Object graph)\n   at Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.WriteResponseBodyAsync(OutputFormatterContext contex\nt)\n``\n. Commit: e5176d22f6d2b3efacbed923fae1400903909766 fixes this issue\n. Updated /cc: @harshgMSFT @pranavkm \n. Commit: 17e4dd2bf6eafa42f73b03d2038de3f3878a5544\n. @yishaigalatzer : Yeah, I thought of doing so but ideally any files underwwwrootare serve-able, so thought adding jQuery script file which is a typical script file included in a web project :-)...anyway I am not too strong about this and will add a readme instead...\n. :shipit: \n. :shipit: \n. commit: c936ae80ca6b3df61e54e204444e088f5ced8051\n. Commit: e7728dde3f98cf02b0951ab8f1ad9108e337b06b\n. commit: c936ae80ca6b3df61e54e204444e088f5ced8051\n. 687ab258a192198bd3cf6e33cd46ad8a67cb2f45\n. Sure...I am looking into it now...\n. I foundGetDefaultServicesbeing used in following components:\n- [EncoderServices](https://github.com/aspnet/HttpAbstractions/blob/04707ccaa00c31967208aa076a7a59aac45e3283/src/Microsoft.Framework.WebEncoders/EncoderServices.cs) used byAddWebEncodersextension\n- [DataProtectionServices](https://github.com/aspnet/DataProtection/blob/e8cc1106d88710ce643104bb7aa6aebd4e7ceb3b/src/Microsoft.AspNet.DataProtection/DataProtectionServices.cs) used byAddDataProtection` extension\nWhile going through this exercise, I noticed that following extensions do not use TryAdd instead. We should ideally use TryAdd in order to prevent replacing any user registered service earlier?\n- AddCaching\n- AddAuthorization\n- AddCors\n. commit 284c8992333d5eeede4bfd9b34974994606e5c8b\n. Just FYI...I actually prefer the behavior that you are mentioning here(i.e ignoring the explicitly set chunked encoding header by the user and let the host figure it out)...we debated about this in Web API too, but later it got decided to honor the user's setting:\nhttp://aspnetwebstack.codeplex.com/workitem/1124 \nso wanted to check if I should ignore the user's chunked setting or honor it? @rynowak \n. :shipit: \n. :shipit: \n. all good points @rynowak ...some thoughts:\n0) True, I actually went far with this approach of serializing the content to the client to enable a real server scenario, but later felt that from anyone who might want to write a logging test, they would be loosing strong typing due the the State of the log messages which is error prone...I briefly played with json.net JObject to deserialize the State to the strongly type logging structure the test expected but it failed due to some types present on these structures (probably i will dig more into this)... \nfor example, \nhttps://github.com/aspnet/Mvc/pull/1714/files#diff-83562cefed82027a0c3e5404b0afaaefR96\nhttps://github.com/aspnet/Mvc/pull/1714/files#diff-83562cefed82027a0c3e5404b0afaaefR101\n1), 2) True, I mainly thought that the scoping would be a important think to consider and so thought of using ElmLogger as it seemed to have good built-in functionality..yeah, I agree that this does block the tests...\n3) I was thinking that probably we might want to even verify scoping information in our application, for example, we create scopes in the following locations...but was wondering the possibility of more scopes being created in future...but yeah, i agree that this should not create dependency on ElmLogger (we could easily replicate the necessary stuff in our TestLogger if we really want scopes)..\nAttributeRoute.cs , using (_logger.BeginScope(\"AttributeRoute.RouteAsync\"))\nDefaultActionSelector.cs, using (_logger.BeginScope(\"DefaultActionSelector.SelectAsync\"))\nMvcRouteHandler.cs, using (_logger.BeginScope(\"MvcRouteHandler.RouteAsync\"))\n. :shipit: \n. :shipit: \n. Updated. \n/cc: @rynowak \n. commit: 391816eb7141569ad8bb70b23e3fd2fa327dbdcc\n. Updated. /cc: @rynowak \n. Updated /cc: @rynowak \n. SerializableError in Mvc.Core and HttpError in WebApiCompatShim depend on System.Xml, so not sure if we can remove the dependency on System.Xml \nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ActionResults/SerializableError.cs#L19\n. Commit: 5c2dc5db11b63fd7b031aa265e8d51c10f2676f9\n. Updated /cc: @yishaigalatzer ...I did not address the comment related to a lazy property as it has problems with in-memory tests...will discuss with you in person..\n. Updated. @harshgMSFT @yishaigalatzer \n. Commit: 02f4ca9f05c4afb46657379cfd2020e0aaef0ab0\n. :shipit: \n. Updated @yishaigalatzer @harshgMSFT \n. Ping..i would like to check this in today :-)\n. Updated @harshgMSFT \n. Updated @harshgMSFT \n. Commit: 5c2dc5db11b63fd7b031aa265e8d51c10f2676f9\n. FYI @ajaybhargavb\n. Commit: 0e9091f0eb7ba7db0334b04d14e47163b14d726d\n. @rynowak : sure, I looked at ContentResult (there it looks to be safe as we new up a media type header value every time before we set charset on it)..yeah, i also looked in other places where this would be set but didn't find any...\n. Commit: eda4b16cc5dfc11528116c51e3a119c1b513e986\n. Just FYI...for an action like below:\nc#\n[Produces(\"application/*\", Type = typeof(Person))]\npublic IActionResult Foo()\n{\n    return new ObjectResult(new Person()\n    {\n        Name = \"mike\",\n        Id = 10\n    });\n}\na request like below gives json response...is this expected?\nGET http://localhost:49643/home/foo HTTP/1.1\nUser-Agent: Fiddler\nHost: localhost:49643\nAccept: application/xml\n. FYI: @yishaigalatzer @rynowak @harshgMSFT \n. @tonysneed : Could you please squash your commits so that its easier for us to merge?\n. Merged into aspnet/dev : 4821108307e3638bfedbe2ae0a1255fceaec041e\n. Commit: e5176d22f6d2b3efacbed923fae1400903909766\n. @victorhurdugaci \n. Actually those tests also are failing due to xml formatter issues since in the result filter the test is explicitly using xml serializer output formatter..\n. Looks good to me! :shipit: \n. @tonysneed : Could you please squash your commits so that its easier for us to merge?\n. Merged with aspnet/dev : c6de763a6cc262192dbe0c3904047da52df86f63\n. :watch: \n. Thanks! Tony...I have merged your commit to aspnet/dev... Commit: 4821108307e3638bfedbe2ae0a1255fceaec041e\n. Merged with aspnet/dev : c6de763a6cc262192dbe0c3904047da52df86f63. Thanks! Anthony.\n. Thanks! Anthony...merged the commit to aspnet/dev 1118315a9dac7e86d8b22ea6e192dd1c920df86a\n. I am not an expert in Git but some info:\n- if you got a sign-off on a PR already, you can squash and re-base your commits and push the changes to the same PR/branch for us to merge them in.\n- If you have not got a sign-off on a PR and if you squash and re-base your commits and push them to the same PR, then it would be difficult for the reviewers as several commits of yours have been merged to one...example: if i am a reviewer  I would like to see what were the feedback changes you incorporated since the last commit(example: changes to a single file) instead of seeing one single squashed commit(example: changes to a multiple files).\nAdding some git experts for their inputs: @rynowak @pranavkm @harshgMSFT \n. @rynowak : This custom result was being used in the model validation filter to return back a 400 bad request with error info. There are 2 tests which verify for the status code 400 and the model state errors.\nhttps://github.com/aspnet/Mvc/blob/00b61ec1e6f10e05fe0a83f0b42f71c714905ef1/test/Microsoft.AspNet.Mvc.FunctionalTests/InputObjectValidationTests.cs#L147\nhttps://github.com/aspnet/Mvc/blob/00b61ec1e6f10e05fe0a83f0b42f71c714905ef1/test/Microsoft.AspNet.Mvc.FunctionalTests/InputObjectValidationTests.cs#L117\n. Commit: 4ecbe8c709f713ad8ac51ea4b3fcb5b9fe5f9d7e\n. @harshgMSFT @sornaks \n. ping\n. Commit 2e938a51f86c4d1868341079c195a336819adb53\n. @rynowak \n. Commits:\nc276ddaa39735a8826b1da27b84dd793865a65e4 \nf737083c946137dd9a411759c3ca83856a0083a2\n. :shipit: \n. Updated. @rynowak @dougbu \n. Updated. @dougbu \n. @dougbu .Updated. Please take a look (I mistakenly squashed my previous commit, sorry about that.)\n. Updated. /cc: @dougbu \n. Updated. @rynowak \n. I have added support for caching error messages per-type. Please take a look. @rynowak @harshgMSFT .\n. @rynowak and @harshgMSFT ...can you please take a look at this today?\n. Updated. Addressed feedback and also added functional tests. @rynowak \n. Updated. @rynowak \n. Ping...I would like to check this in today.\n. Updated. @rynowak \n. Commit: c276ddaa39735a8826b1da27b84dd793865a65e4\n. :watch: \n. :shipit: \n. Updated. @yishaigalatzer \n. Ping\n. @yishaigalatzer : I updated the PR with a new test and comment. Please take a look.\n. Scenarios:\n- Client disconnects while request is being executed on the server.\n  Example:\n  An html page could be making ajax calls and when user navigates to other pages, the previous page's ajax calls could cause disconnects.\n- Execution timeout set on an action. Once the time elapses the given timeout value, the request should be aborted.\n. This feature has been cut, so closing it.\n. Updated. @rynowak \n. Good questions, @rynowak ...this was not supported in MVC 5 too...\nIn the bug you referenced, the scenario seems to be similar to mine(except that the data is coming from uri). The tests as part of this commit do not seem to be covering the scenario that the bug mentions but tests the comma separated scenario.\n. @Eilon, @rynowak, @GrabYourPitchforks: The latest commit has some major updates after some additional feedback from Levi and Ryan. Please take a look.\n. @yishaigalatzer : Just FYI...following was the discussion that came up yesterday that drove the latest update's design change:\n- Users writing code, which ideally should have been under a transaction, seem to not do it probably because they do not know that they have to do it or do not understand the implications of it. \n  In these kind of scenarios, if we project the client disconnect token as the token that they should use, then the concern is about leaving data in possibly corrupted state as we are leaving this decision to the client...since a client cannot be trusted for this, users should be dependent only on the timeout token instead. \nIf we consider to honor the above mentioned scenario, not sure if we should be cancelling operations not written by the user...like even this could lead to corruption in state...\nJust FYI...the HttpContext.RequestAborted is still present and has the client disconnected token which can be used...\n/cc: @GrabYourPitchforks\n. Sure..closing this PR now..thanks..\n. @milutinovici : I am going to work on fixing this but was curious to know what are the scenarios where you needed this?\n. great...thanks...this is helpful...\n. Current behavior:\n\n. :shipit: \n. Good catch!, it is #2108 indeed.\n. Updated. /cc: @Eilon \n. Updated. /cc: @harshgMSFT \n. Updated. /cc: @harshgMSFT \n. Updated as per our discussion offline. /cc: @harshgMSFT @rynowak \n. @rynowak @harshgMSFT @yishaigalatzer : Updated the PR with the new design that we discussed earlier.\n. Commit: 3d247ec028703513ef19c869e018946cdf947dbe\n. :shipit: \n. Closing this PR and updating the original one.\n. Closing this PR and updating the original one.\n. /cc: @harshgMSFT \n. Updated. /cc: @rynowak @harshgMSFT \n. @rynowak . I have updated the PR with new tests.\n@harshgMSFT\n. ping\n. Updated. /cc: @sornaks \n. Update. /cc: @sornaks \n. Sure @rynowak\n. TFS bug id for the failing test : 1140832\n. @rynowak : This issue got fixed in coreclr and it does not repro anymore. Will re-enable the test and send out a PR.\n. I think we should even make changes to view location cache (as the key is case sensitive)?\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/DefaultViewLocationCache.cs#L48\n. :shipit: \n. Commit: 20daab2fb59c57f9702fdd1a3656298330e435cf\n. This also happens with a ValidationAttribute implementation. Example type:\n``` c#\npublic class Customer\n{\n    public int Id { get; set; }\n[Required]\n[MaxLength(5)]\npublic string Name { get; set; }\n\n[AddressValidator]\npublic Address Address { get; set; }\n\n}\npublic class AddressValidator : ValidationAttribute\n{\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        return new ValidationResult(\"Something went wrong, bro!\");\n    }\n}\n``\n. Right, the scenario was more from point that the type having the validation is not owned by the user using in his application.\n. A possible scenario is where users might want to deserialize the request stream before model binding stage, example authorization or resource filters, in which caseModelBindingContextwould not be available...just curious, what are the properties on theModelBindingContext` that you are referring to?\nAlso wondering other scenario where there are no parameters on the action, but the user might want to deserialize within it, in this case i guess we would not have the ModelBindingContext?\n. :shipit: \n. :shipit: \n. The value of id is available in both the request body and the route named default (the default value for id there is 2)...in this case looks like the one on the route is being used.\nIn case of FromForm you are explicitly asking to only bound data from the request body form and hence you are seeing the desired behavior.\n. :+1: thanks...\n. Updated: Added more log statements. /cc: @rynowak @Eilon \n. updated. /cc: @rynowak @Eilon \n. Updated (I now have logging only for ViewResult and PartialViewResult. Please check)\n/cc: @rynowak @Eilon @pranavkm @dougbu \n. > I assume you want to support allowing the user to define their own resolver and have it live along side yours?\nYes right, an example scenario: A user would like to support camel casing of properties(which requires using camel case contract resolver) + our own resolver.\n. :+1: on the options idea!\n. Commits:\nede64dcc8aa9393771f057a5a41bc29b59818f60\ne4de86ee5ca5c4e689230e419810e57b70f853f0\n9843aea816dfa3d3d738711e6434ea95add1f808\n. commit 7e623258c02d8414422605679dc58f260574538b\n. commit 7e623258c02d8414422605679dc58f260574538b\n. Updated. /cc: @rynowak \n. Merged: https://github.com/aspnet/Mvc/commit/92554fa634b9feea1c3ad6688e83c598f8875aca\n. Updated. Please take a look. /cc: @rynowak \n. Thanks @henkmollema ...I will merge this PR today.\n. :shipit: \n. 955b45f995df0fa7a8a43641d979ae4184c733ac\n. ping\n. Updated. /cc: @pranavkm @rynowak @ajaybhargavb \n. Updated as per our discussion. /cc: @pranavkm @rynowak @harshgMSFT \n. Updated /cc: @rynowak @Eilon @HaoK \n. commit 284c8992333d5eeede4bfd9b34974994606e5c8b\n. This is a known issue. You can take a look at this comment to find the supported format as of now:\nhttps://github.com/aspnet/Mvc/issues/1418#issuecomment-84133190\n. commit 40794fcc336124870c67fe1dacf9e8a027b3b9f6\n. oops..that was a typo in my repro code...corrected the original post...the behavior is still the same..\n. Discussed with @rynowak ...this is by design... @danroth27 @Eilon \n. :+1: Yes, this was a change I pushed this morning (our CI is green related to this change)\n. Closing this PR as there is another PR out for this: https://github.com/aspnet/Mvc/pull/2518\n. Updated. Please take a look /cc: @rynowak @pranavkm @Tratcher \n. Updated. /cc: @pranavkm @rynowak \n. :watch: \n. :shipit: \n. Commit: 4bed2e6f2b3e775ee58deb82ac584210c3e41ed6\n. commit 6ef8be92ff7fbae610e3b03a93c399a0c1abae3d\n. Updated. /cc: @pranavkm \n. Are you seeing your tokenHeaders populated? Not sure if you were following the below code:\nhttps://github.com/aspnet/MusicStore/blob/master/src/MusicStore/Controllers/ShoppingCartController.cs#L65\nCan you show how your request(headers and body) looks like?\n. MVC doesn't have anything special about the action name \"Upload\"...without additional details it would be difficult to guess what the issue might be...could you provide details about the request url, route configuration and the skeletal structure of the controller?\n. ",
    "sornaks": "Checked in. Thanks!\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/eeabe2760698ea640e113063b546d10bd2737ece\n. Have updated with another iteration. Can you please take a look?\n. Have updated with the latest changes. Can you please take a look?\n. Have updated the PR. Can you please take a look?\n. Have updated the code. Can you please take a look?\n. Thanks for the comments guys! :) Checked this in now.\n. > The string \"Value0\" will bind to MyFlagsEnum, but we dont have anything equivalent for flags that is \"Value0 | Value1\" will not bind.\nThe ToString() equivalent of \"Value0 | Value1\" is \"Value0, Value1\" - which binds properly. I have added test cases for the same - https://github.com/aspnet/Mvc/pull/1413\n. Chedked in - https://github.com/aspnet/Mvc/commit/1dd1652dcfd1f1be9a0ef29b9d55b0e579eb859d\n. Checked in - https://github.com/aspnet/Mvc/pull/573\n. Have updated the PR. Can you please take a look at this?\n. Have updated the PR. Can you please take a look?\n. Have updated the PR. Can you please take a look?\n. Updated. Can you please take a look?\n. Checked in. Thanks.\n. Updated. Can you please take a look?\n. Checked in. Thanks.\n. Updated. Please have a look.\n. Checked in. Thanks.\n. Checked in. Thanks.\n. Checked this in. Thanks.\n. DisplayName is already present - https://github.com/aspnet/Mvc/commit/72732868c6852faba5479eef5528b8c1a1122744\n. @JaneZhouQ - Just discussed with @dougbu . As he has mentioned in the other issue, there is a TODO for this item to be complete.\n. Yes these were the only places. Other places we don't do the null check,\n. Checked in. https://github.com/aspnet/Mvc/commit/791518d44d14e4e86ea7b467e53b0e98168279ff\n. Currently I have added a sample. Tests, I am planning to write as a part of - WebFX-170.\n. @dougbu I'm currently working on a different issue. Will update this one by tomorrow.\n. @dougbu - Have updated the PR. Please have a look.\n. @dougbu - Yes, I'll send a separate PR for those. Can I go ahead with the commit?\n. Thanks, Checked in.\n. Checked in. https://github.com/aspnet/Mvc/commit/f1c15492677a362e323ed9190cb32c8918620b58\n. Components:\n1. Input Formatters - In PR\n2. Output Formatters - 3 days\n. Checked in. https://github.com/aspnet/Mvc/commit/cee73c0af32f75896afa8fa4d71a21f4f33130ba\n. No, I checked others. This is the only Controller where we would access Actions directly (and have parameters).\n. Checked in. Thanks!\n. @yishaigalatzer - This is a dup of https://github.com/aspnet/Mvc/issues/1377. Can we close one of these?\n. Updated the PR after addressing comments\n. Updated. Please have a look.\n. Updated. Please have a look.\n. Checked in. Thanks!\n. This work item is not required if https://github.com/aspnet/WebListener/issues/54 is fixed. Hence closing this.\n. In Mvc we call it SimpleDisplayText. Hence the name. If we make it just \"DisplayText\" does it not sound too generic?\n. Updated the PR - adding HtmlHelper Unit Tests.\n. Checked in. Thanks!\n. Estimate: 2 days + PR.\n. Checked in - https://github.com/aspnet/Mvc/commit/28e334d3dbe2bf265a470b4e30071cd34f252da7\n. Discussed with Pranav. Some estimates: Dev work - 2 days, Adding tests - 1 day + PR.\n. Checked in - https://github.com/aspnet/Mvc/commit/e6f4f0fec61bd321ce923e30ff2c1fd810e132cb\n. Checked in: https://github.com/aspnet/Mvc/commit/9c4d7806a78f14987d9055389ff4abdf893ef2aa\n. Have updated the PR.\n. @rynowak - Most parts of the code is copy pasted form the previous version. Have removed Caching related code + made changes to suit the new world.\n. @pranavkm Spoke to @yishaigalatzer. He says, it is quite common to have ContentLength more than 8192 and hence suggests me not to change it.\n. Sure. As discussed yesterday, Harsh is working on that item.\nChecked in - https://github.com/aspnet/Mvc/commit/cee73c0af32f75896afa8fa4d71a21f4f33130ba\n. Checked in. https://github.com/aspnet/Mvc/commit/fbaac1095a58415aec23e708bead08124afe8a2d\n. Checked in. Thanks!\n. Note to self: Move HelperResult to Razor.Runtime.\n. Opened bug #984946 on Fundementals team.\n. The existing function supports UTF16 encoding. The input XML should have \"encoding\" attribute mentioned as \"UTF-16\" and the body should be encoded in UTF-16.\n. Yes, the overload is available. Let me update it..\n. Checked in - https://github.com/aspnet/Mvc/commit/2920c551165ce0d3c0e98679e485f9c531e89b31\n. @rynowak - I've updated the PR Ryan. Please have a look :)\n. Checked in - https://github.com/aspnet/Mvc/commit/2920c551165ce0d3c0e98679e485f9c531e89b31\n. Checked in - https://github.com/aspnet/Mvc/commit/5fa8a9111163f5040afe6709fd0fa1bb05a11fe7\n. Updated. please have a look..\n. https://github.com/aspnet/Mvc/issues/985 - Issue tracking functional tests. Updated the PR. Please have a look..\n. Fixed comments and checked in: https://github.com/aspnet/Mvc/commit/e6f4f0fec61bd321ce923e30ff2c1fd810e132cb\n. Dividing this into 2 parts. 1 part is in PR. The second part will contain the following:\n1. Short circuiting\n2. Filters configured on action/controller/global \n      2.1 Do they all work\n      2.2 ordering of their execution\n3. Filter order, both by directly specifying and by where they are configured\n4. Start from base class and start from the raw interface \n5. Filters on controller directly\n6. If you handle exception in exception filters make sure action and result filters don't run\n7. Make sure you can handle exception inside of an action filter, and then it runs result filters (and executed the result)\n. Checked in. https://github.com/aspnet/Mvc/commit/d1782007958af882dd92516e0f53fdc01ca4d32a\n. :shipit: \n. Have updated the PR. Please have a look.\n. Updated. Please have a look..\n. Checked in: https://github.com/aspnet/Mvc/commit/9c4d7806a78f14987d9055389ff4abdf893ef2aa\n. This issue can be closed. More tests were added - https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNet.Mvc.FunctionalTests/ModelBindingTest.cs\n. Checked in. https://github.com/aspnet/Mvc/commit/3d5f4a2bfdc2a62e4e7a9f02a567b4a378ab3602\n. Based on the discussion with @rynowak and @harshgMSFT we decided to write Output based on the Runtime Type of the object.\n. https://github.com/aspnet/Mvc/commit/b9f158600820f3c34f32a4ee4eaab0bdec61e7cc\n. I would suggest going ahead with adding both to MvcOptions in a particular order - so that if the user doesn't mention anything, then the default gets picked up.\n. @rynowak  I was gathering all the OutputFormatterTests under one file.\nJust discussed with @harshgMSFT - We should do it the other way around. Move the OutputFormatters tests away from the ConnegWebsite and into the FormatterWebsite. I'll close this PR now. Not checking-in this change.\n. Sure.\n. https://github.com/aspnet/Mvc/commit/b9f158600820f3c34f32a4ee4eaab0bdec61e7cc\n. Will be fixed as a part of #1126 .\n. Have updated the PR. Please have a look..\n. Updated the PR.. Please have a look..\n. Updated..\n. Checked in. https://github.com/aspnet/Mvc/commit/791518d44d14e4e86ea7b467e53b0e98168279ff\n. Updated. Please have a look.\n. Updated..\n. This is intended just to touch a few Actions in the sample. It is not a complete list of tests for all the scenarios in the MvcSample.\n. Updated..\n. Checked in - https://github.com/aspnet/Mvc/commit/28e334d3dbe2bf265a470b4e30071cd34f252da7\n. Updated. Please have a look.\n. This work item is not required if https://github.com/aspnet/WebListener/issues/54 is fixed. Hence closing this PR.\n. Checked in with this commit - https://github.com/aspnet/Mvc/commit/28e334d3dbe2bf265a470b4e30071cd34f252da7\n. Checked in - https://github.com/aspnet/Mvc/commit/96318dcbc220097f781d8707a6ca9f011eee2fbf\n. Assigning to @rynowak since he has integrated these changes into his PR - https://github.com/aspnet/Mvc/pull/1119\n. This doesnt work when DeclaredType is a base type and the actual RuntimeType is derived from the previous type. In WebAPI we return a 500 and put the exception in the response body for this scenario.\nIn our new world, the formatter just throws and does not send a 500 as response. @yishaigalatzer - Should we handle this scenario? Should we catch and set the response status to 500 and body with the exception specifically for this formatter?\n. FYI: Response in case of WebAPI:\n\nAn error has occurred.The 'ObjectContent1' type failed to serialize the response body for content type 'application/xml; charset=utf-8'.</ExceptionMessage><ExceptionType>System.InvalidOperationException</ExceptionType><StackTrace /><InnerException><Message>An error has occurred.</Message><ExceptionMessage>Type 'WebApiXmlSerializer.Controllers.DerivedApple' with data contract name 'DerivedApple:http://schemas.datacontract.org/2004/07/WebApiXmlSerializer.Controllers' is not expected. Consider using a DataContractResolver or add any types not known statically to the list of known types - for example, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to DataContractSerializer.</ExceptionMessage><ExceptionType>System.Runtime.Serialization.SerializationException</ExceptionType><StackTrace>   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeAndVerifyType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, Boolean verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiTypeAtTopLevel(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle originalDeclaredTypeHandle, Type graphType)\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObjectContent(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObject(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObjectHandleExceptions(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\n   at System.Runtime.Serialization.DataContractSerializer.WriteObject(XmlWriter writer, Object graph)\n   at System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStream(Type type, Object value, Stream writeStream, HttpContent content)\n   at System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at System.Web.Http.WebHost.HttpControllerHandler.&lt;WriteBufferedResponseContentAsync&gt;d__1b.MoveNext()</StackTrace></InnerException></Error>\n. Checked in - https://github.com/aspnet/Mvc/commit/4c951cc635150c49ff86f4f1553331b22f374835\n. Updated..\n. Updated..\n. Sure @rynowak. Will do that.\n. Checked in - https://github.com/aspnet/Mvc/commit/5fa8a9111163f5040afe6709fd0fa1bb05a11fe7\n. Checked in https://github.com/aspnet/Mvc/commit/0b1ad4ce3547fd049e3ddfbf745c29b1d5da9f7e\n. @rynowak - Yes we should. I have a todo in the InputFormatterTests. I was hoping to fix the todo once the new filter stage was introduced to modify the InputFormatterCollection. But given that, that bug is moved to beta, I'll add a new website just for this scenario and update this PR..\n. Updated..\n. Updated..\n. Updated..\n. Thanks Ryan! Checked in - https://github.com/aspnet/Mvc/commit/0b1ad4ce3547fd049e3ddfbf745c29b1d5da9f7e\n. Checked in. Please see - https://github.com/aspnet/Mvc/commit/0d8a7368d941b8d20c0de1e6de831737c6293d52\n. :shipit: \n. Updated..\n. Updated.. I separated the #1081 PR..\n. Done. Thanks Ryan! Checked in - https://github.com/aspnet/Mvc/commit/96318dcbc220097f781d8707a6ca9f011eee2fbf\n. Pushed - https://github.com/aspnet/Mvc/commit/4c951cc635150c49ff86f4f1553331b22f374835\n. Checked in. https://github.com/aspnet/Perf/commit/8494ebf2b29c6cc92b10fe98647e4449d12749e3\n. Reopening to verify the results.\n. The results had to be verified from troy. We did this. I missed closing it.\n. Filed 2 issues. Tracked here - https://github.com/aspnet/External/issues/14, https://github.com/aspnet/External/issues/12\n. -ValidationAttributeissue is fixed - https://github.com/mono/referencesource/blob/mono/System.ComponentModel.DataAnnotations/DataAnnotations/ValidationAttribute.cs#L201\n-ClaimsIdentity` issue is fixed - https://github.com/mono/referencesource/blob/mono/mscorlib/system/security/claims/ClaimsIdentity.cs#L793\n. Checked in. https://github.com/aspnet/Mvc/commit/a88f59fc49c80d841d693c32fd70847a3f8d4626\n. @rynowak Most of DefaultBodyModelValidator.cs is a straighforward port from WebApi. (Made a few modifications to fit into the new ValidationContext.) The rest is new.\n. Updated..\n. Updated..\n. Updated..\n. Updated.. @harshgMSFT - pls have a look..\n. Thanks! Checked in. https://github.com/aspnet/Mvc/commit/f1c15492677a362e323ed9190cb32c8918620b58\n. /cc: @harshgMSFT \n. Updated..\n. Updated with @pranavkm's comments.\n. Updated.. @harshgMSFT pls have a look..\n. Checked in- https://github.com/aspnet/Mvc/commit/0d8a7368d941b8d20c0de1e6de831737c6293d52\n. /cc: @pranavkm \n. Thanks! Checked in. https://github.com/aspnet/Mvc/commit/3d5f4a2bfdc2a62e4e7a9f02a567b4a378ab3602\n. Checked in. https://github.com/aspnet/Mvc/commit/53379e4395fbd337222c970f57741dafb10fe2a9\n. Checked in. https://github.com/aspnet/Mvc/commit/5b1bcb607957b076465ad5f9252cb76a3773ef07\n. Checked in. https://github.com/aspnet/Mvc/commit/2c4b3dd3fc8f33f92a051e1f420540d1b67c476d\nTracking the remaining as a part of https://github.com/aspnet/Mvc/issues/937.\nThanks!\n. /cc: @pranavkm @rynowak \n. Thanks! Checked in. https://github.com/aspnet/Mvc/commit/a88f59fc49c80d841d693c32fd70847a3f8d4626\n. /cc: @pranavkm \n. Updated. @pranavkm - I was unable to find the reason for failure in Mono. I am suspecting there is a problem with the type. I have currently excluded that test case from Mono and updated the PR.\n. Checked in. https://github.com/aspnet/Mvc/commit/5b2948dd73af41ad59b8ff9f96401661277dc16b\n. Opened bug - https://bugzilla.xamarin.com/show_bug.cgi?id=25717\n. Checked in. https://github.com/aspnet/Mvc/commit/99ad37fa99f97f726bc30651346bc53f787a5cd4\n. Updated.. /cc: @pranavkm \n. Updated..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/5fa8a9111163f5040afe6709fd0fa1bb05a11fe7\n. Updated.. /cc: @pranavkm \n. Updated..\n. Updated.. /cc: @pranavkm \n. Updated and checked in. Thanks Pranav! :) https://github.com/aspnet/Mvc/commit/53379e4395fbd337222c970f57741dafb10fe2a9\n. @pranavkm - Why are we doing this? Is there a project dependency issue or is it for the correctness of the Mock?\n. Hmmm. Cool. :shipit: \n. @BrennanConroy - I am not able to repro this scenario.\nThis is my ViewComponent:\n\n``` C#\n[ViewComponent(Name = \"Test\")]\n    public class TestViewComponent : ViewComponent\n    {\n        public IViewComponentResult Invoke()\n        {\n            var kk = new List()\n            {\n                new Person() { Name = \"Hello\" },\n                new Person() { Name = \"World\" }\n            };\n        return View(kk as IEnumerable<Person>);\n    }\n}\n\n```\nMy View calls this like:\nC#\n@await Component.InvokeAsync(\"Test\")\nThe build I am using is - KRE-CoreCLR-x86.1.0.0.0-beta2-10709\n. So, the scenario which was pointed out does not work only for Anonymous objects. And we are not currently planning to support binding Anonymous objects. Please refer this issue - https://github.com/aspnet/Mvc/issues/1484 - for more details.\n. So, when you do a kk.Select(e => e) it returns an objects of Anonymous type and not IEnumerable. Hence the issue..\n. Actually, I am wrong. Select returns System.Linq.Enumerable+WhereSelectListIterator which is an Enumerable. Let me investigate further. Reopening this.\n. This seems to be a bug in CoreCLR. I have contacted the CoreCLR team with this repro:\n``` c#\n    public class Program\n    {\n        public void Main(string[] args)\n        {\n            var range = Enumerable.Range(0, 10).Select(x => x);\n            var prop = range.GetType().GetProperty(\"Current\");\n            var propertyGetterAsFunc = prop.GetMethod.CreateDelegate(typeof(Func<,>).MakeGenericType(range.GetType(), typeof(int)));\n        Console.WriteLine(propertyGetterAsFunc);\n    }\n}\n\n```\nWill follow up.\n. This is checked in - https://github.com/aspnet/Mvc/commit/07043ce1a9bd821f69374790bd5f9d20decb94f0\n. Currently we have a the following types ignored from Validation: XmlNode, XObject, Type, byte[] and JToken. This is the same list as in WebApi. However, this list was constructed based on user feedback. We should develop a more concrete list that needs to be excluded from validation. For ex: All types in System.Runtime should probably be excluded from validation.\n. Checked in - https://github.com/aspnet/Mvc/commit/5262dfd577be0f3e48473a9ddc9a40a000916028\n. Yes, the scenarios are covered in Functional tests and there is are no tests which we have to enable for this particular class. I'll go ahead and push this then. Thanks!\n. Checked in. https://github.com/aspnet/Mvc/commit/fbaac1095a58415aec23e708bead08124afe8a2d\n. /cc: @pranavkm @rynowak \n. Added comment and checked in. Thanks! https://github.com/aspnet/Mvc/commit/99ad37fa99f97f726bc30651346bc53f787a5cd4\n. /cc: @rynowak \n. Updated.. /cc: @rynowak \n. Done :) Checked in. Thanks Ryan! https://github.com/aspnet/Mvc/commit/5b1bcb607957b076465ad5f9252cb76a3773ef07\n. /cc: @pranavkm \n. Updated..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/1dd1652dcfd1f1be9a0ef29b9d55b0e579eb859d\n. :watch: \n. :shipit: when @pranavkm is happy.\n. https://github.com/aspnet/Mvc/commit/d2c3985cd60d01e355c89ed7eb9d2f6922da762a\n. Updated..\n. Updated.. Please have a look..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/d1782007958af882dd92516e0f53fdc01ca4d32a\n. :shipit: \n. https://github.com/aspnet/Mvc/commit/6e8cc6ba74089f5d821c2ae8342d7e8ec50448fc\n. /cc: @pranavkm @dougbu @rynowak \n. Updated the PR. Please have a look.\n. Updated..\n. Updated..\n. Yes. Checked in - https://github.com/aspnet/Mvc/commit/07043ce1a9bd821f69374790bd5f9d20decb94f0\n. Please have a look at ONLY this commit - https://github.com/aspnet/Mvc/commit/c64bb3a61916eeba706645f166e8d172c9e7172c. Have done changes over Ajay's existing PR for adding more action results.\n. @rynowak \n. Updated..\n. Updated.. I made this a single commit because it was tough to rebase. Now, pranav's commit is seen here because I am based on top of dev and not the one indicated in the PR..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/5262dfd577be0f3e48473a9ddc9a40a000916028\n. /cc: @Tratcher @rynowak \n. Updated.. Please have a look..\n. Updated. Please have a look..\n. Previously in MVC5 we supported OutputCacheProfiles in Web.config which is a pre-defined set of parameters for OutputCache. This provided a way to reuse the settings in multiple controllers/actions and a centralized place manage all Cache profiles. We do not have an equivalent for this in vNext.\nIt looked like this:\nIn Web.config:\nxml\n<caching>\n<outputCacheSettings>\n   <outputCacheProfiles>\n        <add name=\"Cache1Hour\" duration=\"3600\" varyByParam=\"none\"/>\n    </outputCacheProfiles>\n</outputCacheSettings>\n</caching>\nAccessed in the Action like this:\nc#\n[OutputCache(CacheProfile=\"Cache1Hour\")]\npublic string Index()\n{\n    return DateTime.Now.ToString(\"T\");\n}\nProposal for vNext:\nWe can use MvcOptions to achieve the same. It would look something like this:\nIn Startup.cs\nc#\nservices.Configure<MvcOptions>(options =>\n{\n    options.CacheProfiles.Add(new CacheProfile() {\n         Name = \u201dCache1Hour\u201d,\n         Duration = 3600,\n         VaryByHeader = \u201cAccept\u201d\n    });\n});\nAnd my action would look like:\nc#\n[ResponseCache(CacheProfile=\"Cache1Hour\")]\npublic string Index()\n{\n    return DateTime.Now.ToString(\"T\");\n}\nResponseCache\u2019s OnActionExecuting will look up the MvcOptions and get the CacheProfile with the particular name and populate the parameters needed to set the headers.\n. https://github.com/aspnet/Mvc/commit/4691823a5060db135c5672ba5b264183c999f5b3\n. https://github.com/aspnet/Mvc/commit/accf0c76f0bbcca71a1b2faa3532f021a29532fe\n. /cc: @rynowak \n. Updated.. Please have a look.\n. Updated. Please have a look.\n. Updated. @rynowak please have a look.\n. @yishaigalatzer looked at it as well and signed off in person. Checked in - https://github.com/aspnet/Mvc/commit/4691823a5060db135c5672ba5b264183c999f5b3\n. Updated.. Please have a look..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/accf0c76f0bbcca71a1b2faa3532f021a29532fe\n. https://github.com/aspnet/Mvc/commit/2c5ae68ab6e61ebc025c841336a3df41790d241d\n. Updated. Moved ConfigureRouteOptions to aspnet/Routing repo. PR - https://github.com/aspnet/Routing/pull/146\n. We have Option classes for Authorization for which we already have an extension method.\nUpdated the PR with ConfigureRazorViewEngineOptions. Please have a look.\n. Thanks! Checked in - https://github.com/aspnet/Mvc/commit/6e8cc6ba74089f5d821c2ae8342d7e8ec50448fc\n. https://github.com/aspnet/Mvc/commit/2c5ae68ab6e61ebc025c841336a3df41790d241d\n. /cc: @rynowak @yishaigalatzer \n. Updated.. Please have a look.\n. Modified that and checked in - https://github.com/aspnet/Mvc/commit/d2c3985cd60d01e355c89ed7eb9d2f6922da762a\n. /cc: @dougbu - I have incorporated the changes you suggested in Mvc.js and created a sample around it. Please have a look. Thanks!\n. Updated.. Please have a look.\n. Should we call this AspNetMVC instead of just MVC? We did not have a discussion around the name..\n. Updated..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/eeabe2760698ea640e113063b546d10bd2737ece\n. /cc: @NTaylorMullen @dougbu \n. I think we should just call string.Format directly and not optimize because we would end up rewriting the code for validating the content format string, handling alignment of the string, format of the type passed in, escaping etc. (https://msdn.microsoft.com/en-us/library/txafckwd(v=vs.110).aspx) While this is possible, I think this would open up a wider area for issues. We could try to optimize for arguments of type TagHelperContent but we would end up allocating the string as well as iterating through our buffer either ways - so there should be no difference in performance. What do you think @DamianEdwards @NTaylorMullen ?\n. Checked in - https://github.com/aspnet/Razor/commit/585002baf8b6ef5239f66257ba565cdf71ed3b4d\n. /cc: @NTaylorMullen \n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/b581ff343c46a9479282ba900407fe5ada20a163\n. https://github.com/aspnet/Mvc/commit/0e783ace5898c761435541aa937085a8593a75d0\n. https://github.com/aspnet/Mvc/commit/b08a2154c10a3c297f1ba61138cad5726a7c7dd9\n. https://github.com/aspnet/Mvc/commit/d2bdd4f1d4096e2387ff2435ef0c0eed1dcb2c53 and https://github.com/aspnet/Routing/commit/37dc8581de593aab1e8a535392671f89b40308e3\n. Updated..\n. Updated.. Please have a look..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/c1338a05428baaf1ba31ffd40a3078e5f8d013aa\n. /cc: @danroth27 \n. Thanks guys! https://github.com/aspnet/Mvc/commit/d2bdd4f1d4096e2387ff2435ef0c0eed1dcb2c53\n. :watch: \n. :shipit: \n. /cc: @DamianEdwards @NTaylorMullen \n. Updated the PR. Have some tests to add. Will do that tomorrow.\n. Updated.. Please have a look.\n. Thanks guys! https://github.com/aspnet/Mvc/commit/0e783ace5898c761435541aa937085a8593a75d0\n. /cc: @rynowak \n. Updated.. Please have a look.\n. https://github.com/aspnet/Mvc/commit/064c01cf2b022e365f82e5729a616e17b7f54d9a\n. Checked in - https://github.com/aspnet/Mvc/commit/6e9533ce9cf48536c27a09bf61fd48b113c2107b\n. /cc: @NTaylorMullen \n. Yes. I forgot to close sorry. https://github.com/aspnet/Mvc/commit/6e9533ce9cf48536c27a09bf61fd48b113c2107b\n. Thank you! https://github.com/aspnet/Mvc/commit/7e2420b93c6bbd322fee06dfade5f90bd47947bb\n. /cc: @NTaylorMullen \n. Thanks! https://github.com/aspnet/Mvc/commit/b08a2154c10a3c297f1ba61138cad5726a7c7dd9\n. :shipit: \n. Yes checked in.\n. Yeah. I'll send that in a separate PR.\n. Updated the PR.\n. Updated..\n. Checked in. Thanks! https://github.com/aspnet/Mvc/commit/064c01cf2b022e365f82e5729a616e17b7f54d9a\n. /cc: @dougbu @NTaylorMullen \n. Thank you! https://github.com/aspnet/Mvc/commit/7ea467f73dd6d6e166284e5fcf6a1ed40efbadcb\n. /cc: @pranavkm @rynowak  (this change will be helpful when I send PR for TemplateRenderer because I am using StringCollectionTextWriter in many places. Sending it as a separate PR because it is not really a part of that change.)\n. I changed it in existing places because the passed in encoding was not used anyway.\n. /cc: @rynowak @pranavkm \n. Yes this was fixed in Mono (https://github.com/mono/mono/commit/c73363cee456b32c726ef7a0c4d504f1d07eaad2). You will have to build mono from source to get this change. (Mono issue - https://bugzilla.xamarin.com/show_bug.cgi?id=25717)\n. Just opened one. https://github.com/aspnet/Mvc/issues/2492\n. ",
    "Tratcher": "What is this function actually used for?  And can you share a link to the WebFx implementation?\n. Oh, so it should actually be called IsRelativeUri?\nIsn't the ~/ specific to WebFx?\n. /foo/bar is actually a relative uri, though it's an absolute path.\n. IsLocal has some other mis-connotations, like should IsLocal(\"http://localhost/foo/bar\") return true for false?\n. http://stackoverflow.com/questions/25595548/using-the-mvc-authorize-attribute-with-roles-using-azure-active-directory-owin\n. I hesitate to provide statics like that because the header types like MediaTypeHeaderValue are mutable.\n. File a bug in HttpAbstractions for retrieving response cookies.\n. :shipit: \n. :shipit: \n. @loudej? We were discussing this Friday.\n. Explicitly setting the chunked header is NOT recommended. Chunked is a fallback state if Content-Length is missing, let the server set it.  In theory the only component that should set the chunked header is the one that actually does the chunking (the server).\nWebListener essentially ignores any chunked header set by the user and does its own chunking.  Helios doesn't, it interprets the users chunked header as a statement that the user did their own chunking.\nAt the very least we should have a consistent behavior. I'd recommend WebListener's behavior since I'm not aware of any scenario where the user needs to implement their own chunking, and you've already shown that Helios's behavior can easily leave misinformed users with hung requests.\nOut of curiosity, what does Kestrel do?\n. Also, this bug has nothing to do with MVC, I recommend moving it to Helios.\n. Seams ok for now. The IsPathRooted stuff probably won't work on Mac/Linux.\n. Acceptable for beta, but not for RTM.\n. That's the goal. I'll send the PR tomorrow.\nSent from my Windows Phone\n\nFrom: Yishai Galatzermailto:notifications@github.com\nSent: \u200e1/\u200e12/\u200e2015 5:20 PM\nTo: aspnet/Mvcmailto:Mvc@noreply.github.com\nCc: Chris Rmailto:tratcher@hotmail.com\nSubject: Re: [Mvc] [Fixes 1428] Setting ContentEncoding header in ContentResult (#1746)\n@Tratcher are strongly typed headers (and particularly support for content type/char set) is going to be available early this week?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aspnet/Mvc/pull/1746#issuecomment-69679654\n. The strongly typed headers PR is incoming and it's going to massively conflict with this one.\n. Rebase and try again....\n. @muratg @davidfowl @loudej @rynowak @yishaigalatzer \n. Enum was always a poor type for Http status codes. Static/const ints may be more appropriate. We recently added the following for common header names: https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.Net.Http.Headers/HeaderNames.cs. Something similar for status codes would be reasonable.\n. https://github.com/aspnet/HttpAbstractions/issues/174\n. Looks ok.\n. ",
    "ianhong": "ActionContext will be updated per #1934 \n. @rynowak and @Eilon \nI think I need a little bit more investigation on this. We added the default constructor to ActionContext to improve unit testability of Controllers. \nI think we should do this to improve unit-testability of custom HtmlHelpers, TagHelpers, and ViewComponents. \nSo, I'll start from doing unit tests to them to find out more requirements on this. \nI'm wondering if you have any more scenarios to add in addition to  HtmlHelpers, TagHelpers, and ViewComponents. ??\n. https://github.com/aspnet/Mvc/commit/3ea7daabfe41d986f713134ce09454c0e7c545b8\n. @yishaigalatzer  and @danroth27 \nNot sure if we still want to do this? I think this is already fixed. \nIn MVC, we can do \n                    services.AddMvc();\n                    services.ConfigureMvcOptions(options =>\n                    {\n                        options.Filters.Add(typeof(PassThroughAttribute), order: 17);\n                    });\nIn SignalR we can do\n                services.AddSignalR(options =>\n                {\n                    options.Hubs.EnableDetailedErrors = true;\n// options.Hubs.RequireAuthentication();\n            });\nI don't see many differences here except AddSignalR requiring Action configureOptions. But, in MVC this is a part of the ConfigureMvcOptions method.. \n. @rynowak \nI'm closing this issue, but please add more details about the decision that you made..\n. In the codeplex, it is located under src\\System.Web.Mvc\\JavaScript. \n@pranavkm, do you have an idea on this? \n. @rynowak It seems like ActionMethod, ActionName, Attributes, Filters, HttpMethods, and Prameters can be changed to readonly without breaking existing contracts. \nI'm not sure of the other properties with the public set method like ApiExplorer, Controller, IsActionNameMatchRequired, AttributeRouteModel, and ActionName. Which properties could you confirm we should change to read-only? \n. @rynowak I can make Attributes as ReadOnlyList, but I don't think there are things I can do with ActionMethod except creating a new type?? But I don't think introducing a new class shouldn't be what you meant. Let me know if I'm wrong. Otherwise, I'll send a PR soon. \n. 38b3b61485b890fb61219e03910cafb3f6f732e1\n. @anpete I opened the two issues #1772 and #1771 for tracking this, and I think we can resolve this. Please close this after reviewing two related issues. \n. @anpete, I'm closing this, and let me know if you have more requirements than #1771 and #1772 \n. dd1500dcfbac88e3f17d13ece9476b93c09e65d8\n. 1c6800beab42c69f8d5d724b6530305783bd2ec1\n. @pranavkm @rynowak @harshgMSFT, I updated the PR, please review this again. \n. @rynowak, @pranavkm I updated this PR again. please review this..\n. @rynowak could you review this? I updated this per your comments\n. @rynowak I upated this again. Please review this change. \n. @rynowak ah..I serialized them into collection as you suggested. I updated this PR. \n. @pranavkm I updated this PR per your comments except BigInt. \n. @pranavkm, Yep. I updated the PR. \n. 5b1eae494ea25bb88c34ed285dd76e6bcb2db99e\n. @rynowak I updated the PR per your comments.\nThanks,\n. 4bb85eeaeb479edf8abff34e9078886c14d32861\nand\n23e6264715b0055218611b3f36ac45098f6b0fb1\n. The invalid commit number is a Razor one, and the actual commit is https://github.com/aspnet/Razor/commit/23e6264715b0055218611b3f36ac45098f6b0fb1\n. @pranavkm I updated this PR, could you please review this again?\n. @pranavkm I addressed all your comments, please review these changes. \n. @dougbu Could you review the doc comments on HtmlHelperDisplayExtensions, HtmlHelperEditorExtensions, DefaultEditorTemplates, and DefaultDisplayTemplates to sign off??\n. @dougbu Could you review this again?? I think most of you comments were addressed. \n. 5b1eae494ea25bb88c34ed285dd76e6bcb2db99e \n. 21031a3aa82ac6618da6320701be7ea0af0fdf34\n. @dougbu please review this PR. I udpated as you suggested. \n. @dougbu, updated this PR. I'd like to sit together to review/fix if you have more concerns on this PR.. \n. We have more detailed work items for this #1934 and #1935, and I'm closing this\n. @dougbu please review this PR. \n. @yishaigalatzer and @rynowak I updated this PR per your comments..\n. @yishaigalatzer as Ryan said I have the unit test for View in the other PR, #1820. Please sign off this one if possible. \n. :shipit: \n. @rynowak and @yishaigalatzer \nI updated this PR per your comments. This is the summary:\n1) Changed the IUrlHeper interface to remove IsLocalUrl and made it a static method inside UrlHelper. I think I should send a seperate PR for this. \n2) The --Callback name changed to --Context to accommodate the simple value properties.\n3) Used DefaultHttpContext \n4) Helper is now a static class\n. @yishaigalatzer and @rynowak \nI think this Design PR has all the feature to support MusicStore and KEpense except:\n1. Context.User.Identity.GetUserId(),\n2. Content.Request.Cookies\n3. Contxt.User.Identity.GetUserId will be easy to support with this design\n4. I haven't looked into Cookies yet. \nThanks,\n. Opened #1935 and #1934 for more specific work items, and closing this one. \n. 70efc5ae0a94323fbbd9623f5842f9ae1bb530f4 \n. @rynowak and @yishaigalatzer I updated this PR per comments\n. @rynowak Updated the tests per our discussion and fixed the typo in the doc. \n. @rynowak Updated the tests per our discussion and fixed the typo in the doc. \n. The first part: c7d09d7ad743e3af9bea608bbcf139c290205068\n. 57c04835de917aab3eb417292b0ecee2436d11dc\n. https://github.com/aspnet/MusicStore/commit/1b502cbee7b86709a0b9a0afd4de4f3c97db52ae\n. :shipit: \n. @rynowak I updated per your comments.. \n. @rynowak and @yishaigalatzer \nI updated ActionContext as we discussed. Plus, I removed some trailing spaces from Controller.cs\n. @rynowak Updated per comments. \n. @rynowak  and @yishaigalatzer this is a kindly reminder just in case you forgot about this.\n. @rynowak Ryan, I updated this PR. Thank you.\n. 4bb85eeaeb479edf8abff34e9078886c14d32861\n. @danroth27 I can repro this, and I'm looking into the product code to find the root cause. \n. I think this happens because it calls WriteTo instead of WriteLiteralTo in the following code:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Razor/RazorPage.cs#L391-L394\nI think I should talk to @dougbu and @NTaylorMullen before making any fix. \n. @rynowak \nMVC5 has the same behavior. Users should use Html.Raw to avoid this  in this case. \n. @Boglen \nI'm closing this issue. This behavior hasn't been changed since MVC5. I think you can use Html.Raw as follows in this scenario. \n<A href=\"@Html.Raw(Url.Action(\"About\", new { Id = 1, PageNum = 2, Sol = 3}))\">Foo</A>\n. 1144ba72d50c00d0588bf26f2c4ec63b74733aeb\n. 1144ba72d50c00d0588bf26f2c4ec63b74733aeb\nSorry. I'm closing this.\n. ee49ab727f54b815aecc6bb998610f69c035d3d3\n. https://github.com/aspnet/Mvc/commit/27bdec40a6a26c83e8219b94f99c692f15dd126f\n. @HaoK, could you review this?? It is a very simple PR..ever..:-) \n. ee49ab727f54b815aecc6bb998610f69c035d3d3\n. @rynowak \nI updated per your comments. Please review this once more.\n. @rynowak \nI updated this PR, it took some time to find an another way to get ILibraryManager instead of relying on HostingServices.Create.\nThanks\n. 1c6800beab42c69f8d5d724b6530305783bd2ec1\n. c1eea5b3fabb01d44fbf74f8fe64b4bd087bd576\n. This PR is not ready for another iteration. I just push to move another dev machine. I'll let you know when it is ready to review.\n. @harshgMSFT and @rynowak \nI updated this PR for your and @Eilon's comments.\nThanks,\n. @Eilon, Update per your comments!\n. @Eilon \nI updated per your comments. I removed regex since the allowed positions of '-' in isbn numbers made it too complex. \n. @Eilon \nI update the sample to use private static readony.\nThanks\n. 21031a3aa82ac6618da6320701be7ea0af0fdf34\n. 852d6402eba1a6e4f996d4e62ef40b6544622ba2\n. 852d6402eba1a6e4f996d4e62ef40b6544622ba2\n. @Eilon decided not to fix this issue now instead of removing JsonViewComponentResult since this is for @DamianEdwards's request.\nI'll  remove the milestone label for triage for the future. \n. 9daf6b48a1246d1e341a9c7a82516a9d09257b97\n. 9daf6b48a1246d1e341a9c7a82516a9d09257b97\n. @Eilon and @rynowak \nThis is the PR for MusicStore. It shows how this change can be used to do unit tests for ViewComponents. \nhttps://github.com/aspnet/MusicStore/pull/474 \n. @rynowak  and @Eilon \nI updated ViewComponent to help its unit test scenario. Please take a look at them. With this change,\nhttps://github.com/aspnet/MusicStore/blob/ViewComponentUnitTest/test/MusicStore.Test/AnnouncementComponentTest.cs#L33-L46\ncan be like\n'''\n            var announcementComponent = new AnnouncementComponent()\n            {\n                DbContext = _serviceProvider.GetRequiredService(),\n                Cache = _serviceProvider.GetRequiredService(),\n            };\n'''\n. I'd like to update MusicStore once this is checked in. \n. ",
    "lodejard": "Authorize without claims would be nice\n. I could see that, where the async base method would call the sync... Not just compat, but overriding an async just to set headers or result code can seem odd.\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u00fd4/\u00fd19/\u00fd2014 8:13 PM\nTo: aspnet/WebFxmailto:WebFx@noreply.github.com\nSubject: [WebFx] Should we bring back ActionResult? (#284)\nFor compatibility?\npublic class ActionResult : IActionResult\n{\n    public virtual async Task ExecuteResultAsync(ActionContext context)\n    {\n```\n}\npublic virtual void ExecuteResult(ActionContext context)\n{\n}\n```\n}\nOr maybe we have a sync and async version?:\npublic interface IAsyncActionResult\n{\n    public Task ExecuteResultAsync(ActionContext context);\n}\npublic interface IActionResult\n{\n    void ExecuteResult(ActionContext context);\n}\npublic class ActionResult : IActionResult, IAsyncActionResult\n{\n    public virtual async Task ExecuteResultAsync(ActionContext context)\n    {\n```\n}\npublic virtual void ExecuteResult(ActionContext context)\n{\n}\n```\n}\nI'm spitballing here but what do you think @Eilonhttps://github.com/Eilon @loudejhttps://github.com/loudej ?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/WebFx/issues/284.\n. :shipit: very nice\n. :shipit: other than tiny question about params\n. I guess there could be a concern it would affect project templates that use Context\n. other than that :shipit: \n. Urrrr... Did you check if the mvc nupkgs have a dependency on Common? If so, simply deleting deleting the nupkg will produce an error in restore.\nLong term fix is to implement a dependency flag which will make the dependency on shared source not appear in the generated nuspec.\nShort term fix is to change the package name to something other than common.\n\nFrom: Pranav Kmailto:notifications@github.com\nSent: \u00fd5/\u00fd12/\u00fd2014 8:03 PM\nTo: aspnet/Mvcmailto:Mvc@noreply.github.com\nSubject: Re: [Mvc] Do not produce Common.nupkg from Mvc project (#526)\nNot the makefile, each project has a checked in makefile that can be tailored to add custom targets and such.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Mvc/pull/526#issuecomment-42906901.\n. The long term fix is a flag on dependencies which will make them not appear as a spec dependency. When that is implemented the shared code will be a compile-time only artifact and won't be published.\n. /cc @GrabYourPitchforks \n. Yes, we should cover that on Wednesday too \n. The current thinking is closest to option 2.\nAuthN middleware will be in the pipeline, but doesn't need to pre-calculate anything. Identity for an AuthN type are calculated when needed.\nThe AuthZ filter are then designed in a way that where you control which AuthN types their policy is based on. Passing through the AuthZ stage has the effect of materializing those identities, performing access checks as appropriate, and probably setting the User property for the remainder of the request...\nThis was always the long-term goal. Using \"Active\" mode on AuthN middleware at that point would be done only when you're using fwks that perform access checks based on the current User.\n. :shipit: ..?\n. Medium-ish impact in the sense it's a relatively common subsystem to extend, and is extremely intricate as it stands.\n. :shipit:\nAt some point we should consider adding event id in the calls to log. Not necessary in this PR, cuz we probably need to figure out if we want to standardize on that practice, but having the additional int can make it easier to query for a type of message w/out using the message text.\n. Hello @Alxandr, nice to meet you. And thanks again for the interest and participation!\nAs always with most problems there are several solutions which can work - this is probably one of those situations where we're looking at several perfectly valid approaches to the problem and weighing them against each other. Having more than one view factory could certainly be made to work, but I'm not sure it's really necessary. It might also be true that the way precompilation is currently supported at runtime could also be simplified. I'm thinking specifically of how I've seen other view engine support pre-compilation, so as always I'm biased in that way :). I'll try to walk though how it was done.\nSetting aside for a moment the idea of precompilation or running without files on disk - a view engine in its default configuration has three moving parts:\n1. A file system abstraction it interfaces with to ask what exists, read the contents, and ask for change notifications\n2. The view factory itself that turns the appropriate source files into a compiled Type. Massive over-simplication here. :)\n3. A caching layer which - given input criteria and other \"freshness\" factors like file change notification - holds onto the previously generated Type to re-use instead of going through the work of reading/transforming/compiling the source.\nGiven that - precompilation was implemented without actually making the view factory itself aware of the feature at all. When the call was made to AddPrecompiledViews(Assembly[]) the following happened:\n1. It looked in those assemblies to find the view classes. The paths of files which were used to make those Types was present as attributes.\n2. It chained in a IFileProvider onto the options which made it look like those files existed. All that provider did was enumerate/return the files if asked, which were zero-bytes in length and had the same modified date as the Assembly. That was done using a standard CombinedFileProvider : IFileProvider and the existing physical file provider came before the PrecompilationSaysTheseFilesExist : IFileProvider.\n3. It pre-populated the view cache layer with an entry for each view Type. \nThat's all it took - the view location resolvers and view factory themselves had no idea precompilation was even a feature! When a view name was turned into a path it matched the normal file path patterns because it looked like it was present (even if it wasn't copied as a content file with the web app.) Then, when that path was instantiated, the pre-populated cache-hit meant it would use the already loaded Type. So at runtime it was literally a normal cache-hit - not a special case - the engine had no idea that the Type was precompiled view rather than a previously-compiled view.\n. ",
    "GrabYourPitchforks": "This API is now in the Abstractions repo.  See commit https://github.com/aspnet/HttpAbstractions/commit/0f2b9b3701eab7e4bb651b4e95b04354828e0a93.\n. Turns out the API is internal to Helios right now, but I can make it public.  See Microsoft.AspNet.Loader.IIS.HttpApplicationBase.InvokeProcessRequestAsyncImpl.  There's logic in there that catches errors, clears out any buffered response, and writes an HTTP 500 error page.  Important note: this logic currently only kicks in if an exception makes its way up from middleware to the runtime.\n. :shipit:\n. Calls to Web API endpoints should be using explicit authentication tokens (such as via a custom Authorization HTTP request header).  CSRF is only an issue when the browser performs an implicit authentication step (such as by forwarding a cookie or a basic auth credential automatically on your behalf).  Therefore Web API endpoints that are using proper authentication don't need to rely on anti-CSRF tokens.\n. Addendum to above: for instance, look at the files home.viewmodel.js, WebApiConfig.cs, and MeController.cs in the ASP.NET SPA template in Visual Studio 2013.  You'll see that the Web API endpoint is explicitly ignoring auto-forwarded credentials like cookies and Windows authentication, so it doesn't need CSRF protection.  Instead, it makes a call to exchange the auto-forwarded credential for a bearer token, and that bearer token is provided as an Authorization header for all AJAX requests.\n. In your scenario, the client first makes Request A, and the server will respond with Set-Cookie: Cookie-A.  Then, when the client makes Request B, he'll send Cookie: Cookie-A to the server.  As long as you're taking the incoming value and passing it as the oldCookieToken parameter to AntiForgery.GetTokens, and as long as that parameter is valid, then the newCookieToken out parameter will be null.  This means that Response B doesn't have to generate a Set-Cookie: Cookie-B header, and the client may continue to use Cookie A with the newly-generated tokens.  This will prevent your \"the cookie gets overwritten when the client hits the back button\" problem.\nSee http://stackoverflow.com/questions/16192019/antiforgery-gettokens-what-is-the-purpose-of-the-oldcookietoken-parameter for a related question, and see the doc comments on AntiForgery.GetTokens at https://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.WebPages/Helpers/AntiForgery.cs for a further explanation of the APIs.\n. Early examples used a combined token just because it was easier to deal with, especially at the filter level.  Imagine that the incoming request body is JSON-encoded.  The JSON stream normally hasn't been parsed by the time filters run, so if the token is embedded in the JSON payload then the filter has to perform the parsing manually.  Yuck.  Sticking it in its own header makes it available early in the pipeline.  And if it's already going as its own header, there's no real reason to rely on the cookie since it's just a potential point of failure.  So the early examples combined the tokens into a single header.\nInteresting point to this - CSRF is only an issue in the first place if you're using implicit (browser does it on your behalf) authentication: cookie-based auth, Windows Auth, SSL client certificate, and basic auth are examples of this.  This is why newer examples use an explicit authorization header.  The client-side script is responsible for filling in the Authorization header when it makes the request.  There's no need to worry about CSRF in this scenario since untrusted third parties can't fake your Authorization header so can't take action on your behalf.  This has the additional advantage that if you have a rich client-side application (smartphone app, for instance), it's probably already using the Authorization header, so you only need a single authentication mechanism for your Web API endpoints.  Rely solely on the Authorization header and not on a cookie or anything else.\n. @Eilon I suppose I don't quite understand it - what is the specific problem this commit addresses?\n. I have no concerns re: the signature change.\n. Among your options are (a) cloning a stable implementation of String.GetHashCode or (b) cloning SignalR's implementation of SipHash [see https://github.com/SignalR/SignalR/blob/master/src/Microsoft.AspNet.SignalR.Core/Infrastructure/SipHashBasedStringEqualityComparer.cs].\n. The types IHtmlEncoder, IJavaScriptStringEncoder, and IUrlEncoder are in the Microsoft.Framework.WebEncoders package. To register them from within your own AddServices method, reference the Microsoft.AspNet.Http.Extensions package and call the AddEncoders extension method on IServiceCollection.\n. :watch: \n. #2085 needs to be handled eventually (preferably sooner rather than later), but I wouldn't hold up this PR for it.\n. FYI, per our discussion Friday afternoon I believe this feature was killed.\n. BTW, the HttpAbstractions repo already has this code for you to copy if you wish. See the implementation at https://github.com/aspnet/HttpAbstractions/blob/dev/test/Microsoft.Framework.WebEncoders.Tests/CommonTestEncoder.cs.\n. Anti-CSRF tokens aren't needed for anything other than typical form submissions where authentication is automatic (e.g., cookie, NTLM). Proper API calls done via XHR should really use an authentication mechanism that isn't susceptible to CSRF attacks. I vote won't fix.\n. ",
    "JaneZhouQ": "This seem to work already per alpha test validation activities.\n. MusicStore requires DisplayName and ScaffoldColumn.\n. @sornaks, could you please update https://github.com/aspnet/Mvc/issues/532 and assign that issue to @kirthik to validate?\n. fixed according Pranav\n. We snapped alpha already.  Yeah, feel free to get this in.\n. Reviewed the code earlier, and seems low risk, thus the earlier comment.  To be conservative on tomorrow's CTP1 build for tooling, let's be on the safe side to wait one more day.  Sorry for the confusion I might have caused on the previous comment. \n. done\n. ",
    "puncsky": "This is fixed in Issue #242 - Introducing ObjectContentResult #573\n. It is updated. Could you please take a look? Thanks!\n. Updated a new PR using git-amend. I'd append additional commits in the future.\n. This is fixed in Issue #242 - Introducing ObjectContentResult #573\n. #354 \n. The PR should be placed here, but this request cannot be updated after renaming to Mvc.git... So I have to send another PR.\n. Add a reference here that a specific description is \"Update controller methods to be all virtual #596 \".\n. Fixed at https://github.com/aspnet/Mvc/commit/6082cd9f36a2765b1b648af3445d6be5203e6fb7 and #598 will be updated soon.\n. Fixed in the changeset ec8d09dd65638d0b13826e947398419385a5c780 and assigned #552 to @kichalla .\n. Those component results should have covering unit tests, which could be added here in the same issue.\n. Fixed at https://github.com/aspnet/Mvc/commit/a6d89c44822a725497758d1dc9a15c1d5bdb3517 . Thanks for reviewing!\n. Add a reference here that we can close #301 and https://github.com/aspnet/Mvc/pull/398 after this check-in, as @sornaks and I discussed.\n. Did not simply add [NonAction] attribute to methods in Controller.cs. Instead, do not visit type Controller and System.Object (for POCO controllers) at all. Otherwise, methods from System.Object (Equals, GetHashCode, etc) may get exposed.\n. It is updated. Could you please take a look?\n. It is updated. Please take a look... :smile: \n. IsStatic check is taken out from the latest iteration. Filed a bug #638 to track this. Thanks for reviewing :smile: \n. Updated. Hope this is the last iteration.\n. Fixed at 60443101d5bba2a156b2a1183da2061282c2ae35\n. Potential fix locates at https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ReflectedActionDescriptorProvider.cs#L51 and https://github.com/aspnet/Mvc/blob/03b272380618aea35d8b43b63a982bc66a22ce4a/src/Microsoft.AspNet.Mvc.Core/DefaultActionDiscoveryConventions.cs#L34\n. In summary, I would recommend to add typeInfo.IsPublic (consistent with MVC5.2), which is true if the class is public and not nested in other classes. User-defined controllers should not be exposed to the user when they are private. It gives the user more choices on their controllers' visibility.\nOn the other hand, this kind of hierarchies below is meaningless because hierarchies are achieved by routes and areas.\npublic class FirstController\n{\n    public class SecondController\n    {\n        public class ThirdController\n        {\n            // ...\nTo make it even more explicit, we could also add !typeInfo.IsNested.\nRepro and Investigation\n```\npublic class ClassWithNestedController\n{\n    public class HomeController : [Api]Controller\n    {\n        // This controller is invalid in MVC5.2 but valid in Web API.\n    }\n}\npublic class ClassWithNestedController\n{\n    public class InnerController : [Api]Controller\n    {\n        // This controller is invalid in both MVC5.2 and Web API.\n    }\n}\n```\nThe inconsistency is caused by:\nMVC5.2:\ninternal static bool IsControllerType(Type t)\n    {\n        return\n            t != null &&\n            t.IsPublic && // false for both public and private InnerController\n            t.Name.EndsWith(\"Controller\", StringComparison.OrdinalIgnoreCase) &&\n            !t.IsAbstract &&\n            typeof(IController).IsAssignableFrom(t);\n    }\nWeb API:\ninternal static bool IsControllerType(Type t)\n    {\n        Contract.Assert(t != null);\n        return\n            t != null &&\n            t.IsClass &&\n            t.IsVisible && // false for private InnerController. true for public InnerController. \n            !t.IsAbstract &&\n            typeof(IHttpController).IsAssignableFrom(t) &&\n            HasValidControllerName(t);\n    }\nMVC6.0, neither IsPublic nor IsVisible existes.\n```\n    public virtual bool IsController([NotNull] TypeInfo typeInfo)\n    {\n        if (!typeInfo.IsClass ||\n            typeInfo.IsAbstract ||\n            typeInfo.ContainsGenericParameters)\n        {\n            return false;\n        }\n    if (typeInfo.Name.Equals(\"Controller\", StringComparison.OrdinalIgnoreCase))\n    {\n        return false;\n    }\n\n    return typeInfo.Name.EndsWith(\"Controller\", StringComparison.OrdinalIgnoreCase) ||\n           typeof(Controller).GetTypeInfo().IsAssignableFrom(typeInfo);\n}\n\n``\n. @yishaigalatzer , what is your idea?\n. @rynowak , could you please take a look?\n. A follow-up is opened at \"ComponentResult needs unit tests. #614\"\n. Addressed feedback. Please take a look. Thanks. \n. Updated. Hope this is the last iteration.\n. Fixed at 31915f0b46c3690006c666e7ae15705d37a29778\n. Sorry, it is a duplicate of #567.\n. It is updated. The commits are a little messed up for rebasing. Please take a look at [Files Changed](https://github.com/aspnet/Mvc/pull/615/files).\n. Updated. Hope this is the last iteration.\n. Fixed at e95585dfbde47cd50db95d314896a322c544ff2c\n. @yishaigalatzer @rynowak . Most of the comments are copied from MSDN (some with slight modifications), except forOnActionExecutionAsync. Some missing unit tests are added. Unit tests forOnActionExecutionAsyncare covered in #654 .\n. ForRedirectResultclass orRedirectPermanenthere in the controller?RedirectPermanent` has already been covered.\n. Updated. Thanks for reviewing! :smile: \n. @yishaigalatzer @rynowak , please sign off if it is good. Thanks.\n. Ping... @yishaigalatzer \n. @yishaigalatzer , please take a look.\n. Updated. Please sign off if it is good. Thanks.\n. Fixed at https://github.com/aspnet/Mvc/commit/e27742fd0bbc7570877c145317ffb7ed559de7e3 .\n. ",
    "xqiu": "For BeginForm razor generation in #1148, it's actually a bug without showing the correct link in the generated HTML even I don't have a controller yet. Because when I met this behavior, I didn't think it's because I don't have a controller, but think there are something wrong with my code that didn't give the correct ActionName. \n. I wish this to be fixed for alpha4. @dougbu, @davidfowl \n. Yes, it's duplicated with  #302 \n. yes, I verified that when I added the actions, the problem went away.\n. ",
    "suhasj": "+1 for the 404 error\n. Verified that this works. Need to add null to the Login POST method well. I can send out a PR\n@yishaigalatzer : is this a temporary fix ? if yes then when might we see the permanent one ?\n. @chmontgomery:  I ran the sample project on Mvc repo by commenting out the app.UseMvc(routes) and replacing it with the code you sent, but I  don\u2019t see the error. An empty page is rendered on the browser. Also I added app.UseMvc without routes along with your code and it seems to run fine too. Can you share a sample project for me to repro ?\u201d\n. Also it would be good to have the Error page middleware registered in the sample\n. ",
    "sayedihashimi": "Opened https://github.com/aspnet/KRuntime/issues/138\n. So do we need a dialog to tell the user? I think we could just create the missing folder right? Also for cmd line case shouldn't we update the gulp file to create the folder as needed?\n. Opened an internal bug to track this 1176458.\n. ",
    "HaoK": "Sorry forgot to close, merged https://github.com/aspnet/WebFx/commit/9bf42374b05845659a2ec295bcc8132da0eec236\n. We are revisiting the Authorization design, see https://github.com/aspnet/Security/pull/103\n. Short summary of the current iteration of authorize + authZ:\nThe below will authorize looking for a claim of Type with either AllowedValue1 or AllowedValue2, on a ClaimsPrincipal with the authType1, authType2 authenticationtype identities.\n```\nAuthorize(\"policyName\")\n// Add auth services, and policy via DI (options pattern)\nservices.AddAuthorization(options => options.AddPolicy(new AuthenticationPolicyBuilder(\"authType1\", \"authType2\").RequireClaim(\"Type\", \"AllowedValue1\", \"AllowedValue2\"))\n``\n. you mean filtering the httpContext.User identities?  That currently isn't addressed as the changes are specific to the auth service, and authorize attribute only so far\n. But if you want to enforce a specific authentication type as your authZ policy, without any additional rules, you can probably do:new AuthorizationPolicyBuilder(\"requiredAuthType\").RequireAuthenticatedUser() or RequireClaim()`\n. Yeah that is more Authentication, I don't think we want to do that as part of Authorization, but at least for now, that is not supported yet.  We do swap out httpContext.User to the ActiveAuthenticationTypes in the policy while we are authorizing, but we revert it back to the old user (which contains the 'active' auth types) after we are done authorizing.\n. yeah that part is definitely still in flux, we will keep this in mind for the next iteration, as I agree with you it feels weird that we need to pull all of the authentication types.  But as it stands now, its up to the policy to say what authTypes it cares about, so there's no way to know in advance which authTypes the AuthZ service needs until its invoked.\n. Reopening since this part of the design is once again in flux\n. Fixed\n. Yeah I will, once I merge it in, but the options change isn't merged yet\n. Merged 6dfcfaa7eb8784f8f4357cb6e2f73f50429efe9e\n. Merged b6bd7f5d7887797712c1856640ce0e0d2357e7c4\n. One is just undoing the UseServices rename, pending a better name reversing this PR: https://github.com/aspnet/Hosting/pull/88\nThe options changes are here:\nhttps://github.com/aspnet/Options/pull/21\n. Retiring this PR, will submit a new PR since we tweaked the DI/hosting changes a bit so the next one should have less changes, the change in signature on TestHost was undone\n. Merged d9893b260ae71152b832b9babff8945860104eef\n. We are revisiting the Authorization design, see https://github.com/aspnet/Security/pull/103 for more details.\n. So the basic idea is, if your authorization policy wants a specific authenticationType, it can ask for it via AuthorizationPolicy.ActiveAuthenticationTypes, if any are specified, the default authorization service will call httpContext.AuthenticateAsync(ActiveAuthenticationTypes) and use all of those as the ClaimsPrincipal for the authorization call\n. At least this is the current state of AuthZ, we are in the early stages of iterating on this, so its still subject to change\n. Active/Passive have been reworked a bit, and removed from base AuthenticationHandler and pushed to a new derived AutomaticAuthenticationHandler (which today only Cookies and Bearer extend).  Social auth middlewares no longer have this concept\n. Unified AddMvc methods and changed AddMvc to use TryAdd for its default services\n. Merged 27432d94530405f424e9015c8c5311907bd48b3f\n. @davidfowl asked me to file this issue, I guess its mostly for consistency, but so long as its not public, seems more like an implementation detail for each framework\n. Yes all of the framework AddXyz methods should be using try add. Shame on me for missing that in my own AddAuthZ hah\n. Never mind on add auth. I looked at the code and it's not using try add because it's registering multiple policy handlers for ienumerable resolution\n. Unknown policy returns false today, we can have it blow up with an exception if you want instead...  \nWell we can have an overload of Authorize which lets the attribute itself new up the auto policy...\nAuthorize(string policyName, user, resources) => Use policies in AuthorizationOptions\nAuthorize(IAuthorizationPolicy, user, resources) => Use whatever policy is passed in (auto policy)\n. Note: the one tweak I did was change IAuthorizationService to allow passing in just the policyName, rather than keeping the burden of resolving the Options/PolicyName mapping on the consumer of the service which felt yucky (as SignalR and MVC would both have to do the same thing)\n. In terms of backcompat, today MVC 5 only supports Roles = and Users = I thought?  We can special case those via a custom auth policy built into the AuthorizeAttribute for those two specifically... (But I don't see those supported in AuthorizeAttribute currently?)\nWe can continue the Authorize have some logic for an auto policy requiring one claim with a bunch of supported values, but that isn't a back compat feature since that is new to MVC6 no?  Personally I don't like how this looks/reads at all today:\n[Authorize(\"SomeClaimType\", \"SomeValue\", \"SomeOtherValue\", \"SomeOtherOtherValue\")]\n. Yeah my vote is to leave it out, if we really need to be able to tack on one required claims, I would prefer if it followed the policy naming, so something like:\n[Authorize(Policy = \"CanViewPage\", Requires = new string[] { \"ClaimType\", \"SomeValue1\", \"OrThisValue\"]\n. Yeah, so just to be clear I still would prefer no Requires support at all in the attribute, and have everything go through a policy as the only supported mechanism.  But if we must have a way to easily Authorize for a claim with no policy, I prefer a Requires property instead of just an unnamed string array...\n. Yeah so what we really want is to be able to inline the policy declaration in the Authorize, but we are only able to do that via string[] which is kinda meh.  \nThe one downside of not having a Roles/Requires =, would be that you need to define a policy for each and every Role which is pretty bad...\n. Okay I'll add Roles, Users, and Yishai's scenario now and update the PR.  I'll nuke the claims overloads of Authorize for now\n. Updated PR with roles, not supporting Users per Barry, still need to add Yishai's sample\n. I don't think having roles show up is that bad. Identity supports it as a first class citizen still as well. \n. My mvc build was broken for a while, I'll update the PR with the new MVC changes in the next day or two\n. Replaced by https://github.com/aspnet/Mvc/pull/1804\n. Fowler is ok, he was just concerned about potential naming, do the changes look ok otherwise, ignoring the name for now?\n. Updated with new name: IScopedInstance\n. Merged 157b63375829682be1f3f25c270c2c3b019e9833\n. @yishaigalatzer this is updated to latest auth changes, still pending fixing the functional which is setting httpContext.User, and I can't run tests until coherence builds push changes, so there might be some more minor changes, but this is roughly what it will look like now\n. @yishaigalatzer Updated Filters test with auth middleware that adds a custom identity rather than stomping on HttpContext.User.  Tests all pass now\n. @yishaigalatzer Fixed issue with AllowAnonymous not bypassing all authorize checks, looks like the original code was not doing this bypass, added a new functional verifying this\n. Moved DenyAnonymousRequirement/Handler to Security\n. Merged 7b2fb55ef6c4a85bda754d74f42636018b028214\n. Fixed in 94ef6cf8fa9e62bca108ef20161f77ce45789a04\n. Updated with latest iteration changes, and PR feedback:\n- AuthorizeFilter expects to get a combined policy (union of all the authorize attributes)\n- Returns 401 if anonymous, 403 if authorization service fails\n- Updated functional to be less verby\n. @borgdylan The new authorize filter expects the combined policies, if there is not supposed to be any authorization done at all (which is the empty policy less constructor case) there shouldn't be an authorize filter at all.  This is also a side effect of the decision to make an empty policy with no requirements always fail auth.\n. Sure, policy.RequireAnyAuthenticatedUser()\n. @harshgMSFT @yishaigalatzer @rynowak Is this PR ready for checkin?  There's another big wave of authN changes coming, so I want to get this iteration of AuthZ in before tackling that one.\n. Merged, will address any leftover feedback with the next authZ/N iteration update 94ef6cf8fa9e62bca108ef20161f77ce45789a04\n. We can discuss the exact behavior we want for this when we meet later today, I just wanted the initial prototype of this out there so we can appropriately shape this as desired.  I think allowing them in both places should be ok.\n. That is reasonable if we are ok losing the ability to filter/drop auth types that a list lets us do \n. That doesn't work if you want to let's say drop the active authentication type from the principle. I.e only want the \"bearer\" and not the cookie. I can't drop identities. Only request more. \n. I guess we could add a specific Anonymous flag to the attribute which signifies an empty claims principal. \n. Going with a slightly different variation, will submit a new PR, basically AuthorizeFilter will instead generate a combined policy from all of the AuthorizeAttributes (which will now each also contain ActiveAuthenticationTypes), and there will only be one combined filter which contains a union of all of the requirements and authentication types from all of the effective attributes (i.e. controller, method)\n. You can probably just use this bug to track all 401/403 issues for now https://github.com/aspnet/Security/issues/134\n. Merged 4eb9c777ffc999c29cca7f68cd4501c4a807798b\n. I don't have a ton of context I just filed it because harsh asked for something like this in the Mvc PR for authZ. I didn't want to make a big change as part of that so I filed this for tracking. \n. Merged 46aaf790c4fcb0f7a45e68d76b5cd0a2bf1a9413\n. Yeah I just realized that when 1003 out of 1033 Functional tests failed. I'll add back ServiceDescriber for now, and only MVC will continue to use it.  All the rest of the frameworks will directly add services, but MVC is relying on this behavior for now, so we can't remove it until there's a replacement :)\n. merged c290e897b0727dd287068484d3ce8495e1dc41d0\n. Merged ccb9f70545762abf48a7affa0a8494bb2d0a8248\n. Wasn't the main motivation behind splitting settings into an options POCO to standardize that as the new pattern to configure services?  Early on @divega and I suggested removing the new() restriction on Options and activating options from DI (which would have enabled this kind of scenario), but @lodejard felt strongly that options should just be data.  This proposal seems to move back towards configuring an instance instead of setting up a singleton Options, with all service instance just using the same Options.\n. Yeah I always felt configuring instances using the same mechanism as Options is useful, perhaps what's needed is exposing the options style configuration at a more basic level, so we could use it both to configure instances like you are doing, and also to configure options like we are doing today...  Basically its the Configure<MyThingy>, (me => me.Whatever = \"yolo\"; syntax that seems nice in general (for both instances/options)\n. @dougbu regarding AddAuthorization needing config, you can leave AddMvc taking config for now.  I will make a follow up pass through all of the AddXyz() methods once we rationalize what we want to do,  its primarily only for binding options to configuration automatically now, which still has some issues to iron out.  \nThat said, AddMvc should probably be binding MvcOptions against the configuration as well, unless this is being done somewhere else:\nservices.Configure<MvcOptions>(config)\n. That's not quite what I meant, AddOptions is registering Options, Configure<MvcOptions>(config) would automatically try to bind the configuration against MvcOptions.  But don't worry about it, I can do as part of a consistency pass\n. looks good to me :shipit:\n. @dougbu I almost forgot, there's a second instance of the fallback stuff that lives in Precompilation, could you apply any of the patterns you used to fix the functionals to the precompilaton module (in a different PR of course)\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc/RazorPreCompileModule.cs#L63\n. Well #1612 already talks about the razor pre compilation fallback hack, so we can just keep that bug alive to track removal of that instance\n. Looks good!  Finally all the old fallback hacks are all gone :)\n. Also removes configuration from AddMvc now that Authorization no longer needs it\n. Moved test over and fixed wrap\n. Updated PR to include fixing all the startup's for all the functional tests :/\n. So i removed them all and I see that it causes a few failures, but its only 4...\nTagHelpers, MvcTagHelpers, ModelBinding (culture replacement), how I about I just leave it for these 4 websites instead of everywhere?\n. That's fine, I'm going to revert the change to removing configuration from AddMvc and file a issue for MVC to remove it as a separate PR, this one is just for ScopedInstance\n. Updated PR to decouple AddMvc changes for now\n. CI build is broken, I just wanted to move IScopedInstance to MVC, I was doing some additional cleanup, but its become too noisy, I want to push a clean PR now\n. I backed out the breaking change to Mvc as that isn't something I need now\n. f3a9ce1ec176bcaf9170e9c984fd5fd94c9ec851\n. :shipit:\n. Updated with changes, 7 test failures remaining\n- Mostly TagHelpers, and RazorCompilerCacheTest.CompilerCache_IsNotInitializedUntilFirstViewRequest\n. Tests are all passing now\n. Yay, now I don't have to keep fixing this code whenever hosting changes :)\n. @dougbu @rynowak FYI looks like you should be able to simplify TestHelper further once this set of hosting changes go in, I think you can probably get rid of the test instance of HostingEnvironment and just mutate the instance that hosting creates since its fully get/settable now.  Also with IStartupFilter, you probably can automatically inject the culture replacer as part of test setup instead of having 450 instances of that line of code :)\n. Updated with PR feedback\n. bee20973c770c0bf6af27f8aa50c45206e89111e\n. Yeah so the general idea is, anything that is being resolved as IEnumerable of a service, you don't want to use TryAdd, because well, you'll never get more than one.  So I noticed that issue for IConfigureOptions, I am not familiar enough with all the other MVC services, but that's the review that needs to be done...\n. 5804856fe2e66be8a4087e5cc9c0fb2caf79f4f9\n. 1ea1cc43387850606d0799b930de66dd8ae838a2\n. 1ea1cc43387850606d0799b930de66dd8ae838a2\n. I don't think it's that bad so I can do it for beta 6 if no one has run into issues yet. It is an easy fix either way. Basically remove a bunch of the code and call SecurityHelper.AddUserPrincipal. \n. The AddUserPrincipal helper we just fixed recently to promote \"IsAuthenticated\" identities to the top, so user code which does User.Identity.IsAuthenticated will return true if any user identity is authenticated.  The MVC AuthorizeFilter doesn't have that, so potentially will run into issues if they configure multiple authentication schemes that return unauthenticated identities (unlikely in general, but possible)\n. Yeah this is how it used to work.  Eilon can confirm but I misunderstood this initially too. Basically allow anonymous means skip all authorization.\n. ",
    "darrelmiller": "If actionSelector.SelectAsync(context) returns null when an action cannot be found then how can we ever detect the difference between failing to match because of a HTTP method and failing because we can't match the URL.   Wouldn't we need to return some kind of ActionSelectionResult?\n. @Eilon @danroth27 Do you have someone working on this?  Would you entertain a PR from me on it?  I haven't done anything yet, just wanted to check with you before trying anything.\n. @danroth27 Yes, I spent some time looking at the way the action selection process evaluates constraints and there is no obvious solution.  I'll let you know if I think of something.\n. @danroth27 \n\"We think it's better to keep our default behavior simple, pragmatic and flexible instead of trying to enforce every little nuance of the HTTP spec. We have found that being too heavy handed when it comes to HTTP compliance often causes more pain than good.\"\nThat's what IE6 said about about HTML spec compliance.\n. It's the beta4.  I'll see if I can repro in beta5 and reopen an issue if I can.\n. Excellent.  Thanks.\n. You can add a piece of Middleware, similar to the way Owin middleware works.  I have an example here https://github.com/darrelmiller/Mvc6Sandbox/blob/master/src/Mvc6Sandbox/Startup.cs\n. I curious about what the differences in behaviour would be if you were to stick an IRouter in front of the MvcRouteHandler.\n. Fabulous information!  Thank you.\n. :+1: \n. ",
    "lajones": "Thanks Ryan. I'll check in once the DataAnnotations change is approved.\nWe are not intending to change the namespaces. We need them to stay the same to unify with the .NET45 DataAnnotations code.\n. Checked in with 235707e (following checkin 9e5173d which did the actual rename)\n. Checked in - commit ce46ac4.\n. ",
    "ChengTian": "I didn't change any dependency. I just reordered dependencies and deleted some duplicates. For example, Microsoft.AspNet.Mvc.Core.Test/project.json has two \"Microsoft.AspNet.Routing\": \"0.1-alpha-*\" in it.\nIf it is not necessary, I will discard this branch without merging.\n. Thank you. I will discard this PR and send a new one, in which duplicates will be eliminated.\n. I will sort the dependencies in a separate PR. Another good thing of keeping dependencies sorted is it makes finding duplicated dependencies easier.\n. Sorry I didn't check because ,instead of doing it manually, I applied a tool that does sort & remove duplicated lines. So if there were some duplicates, the tool would remove them, if there was no duplicate, no duplicate removal. I wrote the exactly same commit message for all repos, just for convenience :smile: \n. BTW, I just checked it manually, no duplicate was removed in this PR.\n. Yeah, some Mvc tests are resolving project with appbase, instead of app name. Working on more reactions. Sending PR soon.\n. Yes, it was removed\n. ",
    "divega": "I haven't seen exceptions become more consistent if you do this, but I might be missing something.\n. Yes, with the non-async method you get the same exception but with a less \"consistently messed up call stack\" :smile: It is not really a big deal, but I think doing this is weird. Besides, if you want to go ahead, I would prefer suppressing the warning over having an unnecessary await.\n. +1\n. @rusd if this is actually fixed, please also try to remove the reference to System.Data.dll as per EntityFramework #168. \n. @rustd can you verify and close this?\n. ",
    "DamianEdwards": "No, I need JavaScriptStringEncode, and HtmlAttributeEncode. I don't know of the details RE HtmlEncode being a suitable substitute for HtmlAttributeEncode, but that doesn't affect JavaScriptStringEncode.\n. I think we should re-triage this.\n. Thanks, feel free to fix it for me :)\n. This will not make it for RTM but we will likely revisit it when we start looking at building a new Web Pages replacement.\n. @javiercn was it really intended that HttpPost without a template argument defines a new route? You say that without a template it defines an IHttpConstraint. That does not appear to be what's happening right now. If that were the case, I'd expect the example above to result in a single route (foo) with a constraint of POST added.\n. This is a nice idea but I think it needs more thought as I'm not sure class is the only attribute that has that merge semantic, and what does it do for other attributes where the values differ?\n. This helper could end up doing a bunch of stuff, but for now the feature we want is auto-changing the reference path to a \"min\" version if one is available.\nConsider I have a wwwroot like so:\n- wwwroot\n  - js\n      site.js\n      site.min.js\nAnd in my view I have the following:\nHTML\n<script src=\"~/js/site.js\"></script>\nAt runtime, the src attribute should be changed to point to the .min version of the file, if it exists on disk next to the referenced version (with the paths being resolved using IHostingEnvironment.WebRoot).\nThe minfied file version extension should be controlled via a min-extension. An empty string value will disable the feature, e.g. <script src=\"~/js/site.js\" min-extension=\"\"></script>.\nFurthermore, there should be a ScriptTagHelperOptions class that has a single MinExtension property which is set to \".min.js\" by default. Applications can thus configure the MinExtension application-wide by placing a configured IOptionsAccessor<T> in the services collection. The ScriptTagHelper itself will thus default to \".min.js\" for its min-extension attribute as it will pull that value initially from the IOptionsAccessor<ScriptTagHelperOptions> activated from IoC. Any value specified inline via the min-extension attribute takes precedence over the value specified from the options type.\n. Honestly, I sent this as a PR because typing up the behavior in an issue was more work. I intended for you to take it and make any coding changes needed and add tests. The point is, the desired behavior here is implemented.\n. A thought: this Tag Helper (along with #1553) doesn't actually have any dependency on MVC. It depends on more than Razor however (ICache for this one, IHostingEnvironment for #1553) so I'm not sure another logical location exists. Open to suggestions.\n. @Bartmax agree on name/names, I'll change that.\nYou could certainly build a more generic conditional/if tag helper yourself, but we're not planning on doing it. We see environment being something people often conditionally render content on so we're promoting it as a first class tag helper, but fundamentally we don't to go super generic in the tag helpers (and have Razor end up looking like Spark).\n. @yishaigalatzer I like that approach, assuming we also change the helpers to throw in the scenario where they're run after the headers have already been flushed without the required cookie. The exception message can then point the dev to the fix using the method you suggest.\nNote that PresetCookieAndHeaders is a bit redundant as the only header that's set is a cookie :smile:\nPerhaps AntiForgery.SetCookie()? This would obviously generate the token pair and set the cookie while also storing the form token in the request context so that the HTML/Tag Helpers can use it to render the hidden input.\n. @harshgMSFT My understanding is the tokens are always generated in pairs, with one going in the cookie and the other going in the form. This means that if we have a method that just sets the cookie, we need the form portion of the token pair to be preserved somewhere during the request so that the related helpers can get it and use it.\n. @blowdart fair point, completely open on the name.\nNote that the proposal is for things to fail (throw an exception during the GET request) if the helper knows the cookie won't be set. This isn't the case right now (it happily renders then fails on POST).\nAlso, this is a special case that only affects pages that do preemptive flushing (a new feature in MVC 6). I don't see a way to address this without requiring the extra method call in the view, but like I said, at least it fails when only half the requirements are present thus pointing the dev in the right direction (a simple method call).\n@harshgMSFT I see, got it. If I have the cookie, I can generate the matching form token, yes?\n. @blowdart I thought you'd like that :grin: \n. @dougbu Yes, it's expected Grunt/Gulp would be used to generate ~/js/site.min.js during build/publish time.\nHere's a full example using both features:\nHTML\n<environment name=\"Development\">\n    <script src=\"~/lib/jquery/jquery.js\"></script>\n    <script src=\"~/lib/jquery-validation/jquery.validate.js\"></script>\n    <script asp-src-include=\"js/**/*.js\" asp-src-exclude=\"*.min.js\"></script>\n</environment>\n<environment names=\"Staging,Production\">\n    <script src=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"\n            asp-fallback-src=\"~/lib/jquery/jquery.min.js\"\n            asp-fallback-test=\"window.jquery\"></script>\n    <script src=\"http://ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.min.js\"\n            asp-fallback-src=\"~/lib/jquery-validation/jquery.validate.min.js\"\n            asp-fallback-test=\"window.jquery && window.jquery.validate\"></script>\n    <script asp-src=\"~/js/site.min.js\"></script>\n</environment>\n. Fixed in 8b64e3c7bbe27725cdf01810b6ccdd5c6f2b8431\n. @StuartQ honestly, because that's my personal preference right now. Like anything, that could still change. We're still considering adding support for specifying a prefix when you import Tag Helpers (aspnet/Razor#88) which would let you add your own prefix to custom elements too (although right now it would also mean you'd have to prefix the input tag too). Configurable prefixing is a lot more complicated than it first appears and I'm hesitant to start prefixing everything as everything we add makes the markup look that little bit less elegant to my eyes.\n@mbeckenbach the naming convention of HTML element/tag names is already being tracked at aspnet/Razor#240\n. I spoke about this with @davidfowl and we agreed they should be separate options objects for now. We can always roll them up if decide they're somehow unwieldly, but I don't think that'll be the case.\n-----Original Message-----\nFrom: \"Yishai Galatzer\" notifications@github.com\nSent: \u200e12/\u200e11/\u200e2014 7:43 PM\nTo: \"aspnet/Mvc\" Mvc@noreply.github.com\nCc: \"Damian Edwards\" damian@damianedwards.com\nSubject: Re: [Mvc] Tag Helpers: MVC Tag Helpers Options objects (#1689)\nPlease specify exactly what options we want for each taghelper. I'm suspecting many of them don't need it.\nI'm also concerned with creating too many configure extension methods, polluting intellisense for the service collection. What do you think about an extension method: ConfigureTagHelpers that then exposes all of the other specific extension methods\n\u2014\nReply to this email directly or view it on GitHub.=\n. We're changing plans slightly and instead going with a feature that allows simple initialization of Tag Helpers before they're executed. See PR #2135 for initial design discussion.\n. Reverting this in favor of Tag Helper initializers #2162\n. urgh\n. Review pls @NTaylorMullen @dougbu @yishaigalatzer \n. OK this is good to go once the dev branch is safe for RC commits (I'll squash before I push of course).\n. Merged in 759fbbd661fe4f8d51203fd8b521e72f3f63e96d\n. Merged in 3d33418f315ef73c03e777538360746878be744d\n. @glen-84 thank you very much for the fantastically detailed and thoughtful suggestions. It's really appreciated. I hear you on the naming and we'll certainly consider alternatives.\nAdding support for new syntax in Razor is obviously a fairly high bar and we're beyond the time for 1.0.0 where we could reasonably do that, so we'll support the standard HTML helper (@foo()) and Tag Helper approach for now (<foo>, <div asp-foo=\"\">).\nWe're fleshing out these plans right now for 1.0.0, but it will include at a minimum:\n- a middleware for setting the culture on the request (from header, cookie, and custom delegate);\n- a new localization abstraction API (ILocalizer) for easy retrieval of locale-specific strings including substitution of values with culture specific formatting (which would be backed by ResourceManager out of the box but of course you could implement your own to do whatever you want);\n- updates to MVC to support the new API, including a view specific ILocalizer and updates to the validation and metadata model provider system to support localization of strings from validation and model metadata attributes\n  - we might also support locale specific views (e.g. Index.fr.cshtml) but this may ship as a sample to start out\nWe won't be able to cover all your suggestions for 1.0.0 but of course we can improve our support in subsequent releases. Like I said, we'll support standard .NET ResourceManager/resx in v1.0.0 but it will be behind a new interface so you can substitute it in your app easily with a different system that supports whatever features you like. I don't see anything in your suggestions that our current plans for the contract won't support.\nI hope to have a sample project published in the following week that shows what we're planning for 1.0.0. I'll update this issue with a link when it lands.\n. @glen-84 the sample site containing a functional (but not at all complete and likely very buggy) prototype of much of our plans is now at https://github.com/DamianEdwards/i18nStarterWeb\nNote that it's using very recent bits that may not play well with your version of Visual Studio, but it should be enough to give you an idea.\n. Unit tests complete, functional tests to come.\n. OK this is ready to review proper now\n@dougbu @NTaylorMullen @pranavkm @yishaigalatzer \n. In 6e845f0171fe798c166efe1982d50450e43c27e9\n. Now at https://github.com/aspnet/jquery-ajax-unobtrusive\nOn bower:\n\n. @Eilon they'd be sorted as they're found on disk, hence the example above explicitly added libs first. This is essentially a straight port of what we have for the script & link tag helpers.\n. :shipit: \n. Merged in eef8884d0f5592bb279ff55d7b9ce8b00eca5b3f\n. Merged in e282d2a8613e45da998075ea2fd2d3a325a04bd4\n. The intent is you always use your configured webroot as that what the web server can see. If you want to have different files between different environments, you can configure multiple targets in your grunt config and call them accordingly. You can then use the <environment> tag helper along with the <link> and <script> tag helpers to serve the different files on different environments, e.g.\nHTML\n<environment name=\"Development\">\n    <script src=\"~/lib/jquery/jquery.js\"></script>\n    <script src=\"~/lib/jquery-validation/jquery.validate.js\"></script>\n    <script asp-src-include=\"js/**/*.js\" asp-src-exclude=\"*.min.js\"></script>\n</environment>\n<environment names=\"Staging,Production\">\n    <script src=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.1.min.js\"\n            asp-fallback-src=\"~/lib/jquery/jquery.min.js\"\n            asp-fallback-test=\"window.jquery\"></script>\n    <script src=\"http://ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.min.js\"\n            asp-fallback-src=\"~/lib/jquery-validation/jquery.validate.min.js\"\n            asp-fallback-test=\"window.jquery && window.jquery.validate\"></script>\n    <script asp-src=\"~/js/site.min.js\"></script>\n</environment>\n. @dougbu I replied to all your comments already :smile: \n. @NTaylorMullen ping\n. @dougbu  ping\n. @NTaylorMullen ping\n. This is done now, just waiting for the build to be fixed before pushing.\n. Merged in 8b64e3c7bbe27725cdf01810b6ccdd5c6f2b8431\n. Fixed in 6490b113d8f0e0ca4f7835e703593024f7adc332\n. merged in 6490b113d8f0e0ca4f7835e703593024f7adc332\n. @dougbu ping\n. Merged in 7c18e666a3f5ecb519e2f34604a422337c0c6de8\n. :shipit: \n. @haok\n. @rynowak really depends on the app, but I could imagine some scenarios. More likely you'd want the HttpContext so you could features on and off by query string or cookie. Accessing the user db might be interesting for A/B testing scenarios, but that could also be done by just setting a cookie and checking that.\n@dougbu we could integrate them, but right now you could still set it from config by just assigning the property in the delegate from an IConfiguration. The auto-binding from config feature is a little crappy right now anyway, e.g. doesn't work on .NET Core. That said, we could try to make this work via options, e.g. Putting something like IOptions<ITagHelperOptions<FormTagHelper>> in the container\n. @HaoK you're correct that is more configuring an instance of a thing. The argument here is that tag helpers are different/special. They're used many times in an app but not always owned by the app and generally have a bunch of properties that directly govern their behavior. This is a pattern to enable a very simple, generic way to set properties on tag helpers at runtime (so you can easily do default conditional behavior) without the tag helper itself explicitly needing to support it. It's more akin to the skinning feature in Web Forms than options.\n@NTaylorMullen per instance enables more interesting scenarios, e.g. conditional defaults based on the current request. But like i said, we could look at basing this same thing on IOptions without losing the per-instance capability.\n. Thanks all. I think we're in a good place now. I'll add tests, etc. and send this back as a real PR.\n. @BrianVallelunga great idea! The <img /> tag should support globbing too. Logged #2249 to track it\n. @NTaylorMullen updated\n. @dougbu updated\n. Pushed in 7d1c1ed8eb37f8dcb345cd2b41317cdc8789157d\n. We should do this now\n. It was honestly more of a \"why not\". I was thinking of really basic stuff like just render all the images that match this pattern, but that would almost never be truly useful for the reasons @Eilon points out.\nThat said, with the advent of the <picture> element and srcset, this could actually be useful if we made it also generate the relevant dimensions in the media attribute and/or the expanded viewport pixel density notation in the srcset attribte for each matched file. See https://html.spec.whatwg.org/multipage/embedded-content.html for examples of what I mean.\nE.g. of srcset expansion with an potential syntax for an inline matched string formatting ({*:0w})\n``` HTML\n Source CSHTML \n\n Output HTML \n\n```\nE.g. of <picture> expansion\n``` HTML\n Source CSHTML \n\n Output HTML \n\n\n\n\n\n```\nThis is only really scratching the surface of <picture> and adaptive images however and thus warrants a much deeper investigation of what a really useful img and/or picture Tag Helper would look like.\nIt would potentially also benefit greatly from work we intend to do in Razor v5 (after ASP.NET 5) to enable Tag Helpers to participate in code generation. Imagine if you will that second example written like this instead, using fields that were generated by the <picture> Tag Helper in other attributes of the element (_item and _matches in this case):\n``` HTML\n Source CSHTML \n\n Output HTML \n\n\n\n\n\n```\nThis is just a crazy idea, but it's interesting I think, and shows some of the further potential of Tag Helpers beyond the current version.\n. For now why don't we just do a simple image tag helper that supports the cache busting.\n. Sure\n. :+1:\n. ",
    "PinpointTownes": "IMHO, bringing back IAuthenticationFilter (and creating an IAsyncAuthenticationFilter to be consistent with IAsyncAuthorizationFilter) would be a better idea than introducing an AuthenticationType property on AuthorizeAttribute.\nIt would make the separation between authentication and authorization far clearer and would allow triggering on-demand authentication for passive handlers (by calling HttpContext.AuthenticateAsync with the AuthenticationType declared by the filter/attribute and setting HttpContext.User with the returned principal for the rest of the request) without blocking scenarios accepting both anonymous and authenticated calls.\nI suggest reusing and adapting the HostAuthenticationFilter from System.Web.Http.Owin to use ASP.NET vNext's new abstractions:\n``` csharp\nusing System.Collections.Generic;\nusing System.Diagnostics.Contracts;\nusing System.Net.Http;\nusing System.Security.Claims;\nusing System.Security.Principal;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web.Http.Filters;\nusing System.Web.Http.Owin.Properties;\nusing Microsoft.Owin;\nusing Microsoft.Owin.Security;\nnamespace System.Web.Http\n{\n    /// Represents an authentication filter that authenticates via OWIN middleware.\n    public class HostAuthenticationFilter : IAuthenticationFilter\n    {\n        private readonly string _authenticationType;\n    /// <summary>Initializes a new instance of the <see cref=\"HostAuthenticationFilter\"/> class.</summary>\n    /// <param name=\"authenticationType\">The authentication type of the OWIN middleware to use.</param>\n    public HostAuthenticationFilter(string authenticationType)\n    {\n        if (authenticationType == null)\n        {\n            throw new ArgumentNullException(\"authenticationType\");\n        }\n\n        _authenticationType = authenticationType;\n    }\n\n    /// <summary>Gets the authentication type of the OWIN middleware to use.</summary>\n    public string AuthenticationType\n    {\n        get { return _authenticationType; }\n    }\n\n    /// <inheritdoc />\n    public async Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken)\n    {\n        if (context == null)\n        {\n            throw new ArgumentNullException(\"context\");\n        }\n\n        HttpRequestMessage request = context.Request;\n\n        if (request == null)\n        {\n            throw new InvalidOperationException(OwinResources.HttpAuthenticationContext_RequestMustNotBeNull);\n        }\n\n        IAuthenticationManager authenticationManager = GetAuthenticationManagerOrThrow(request);\n\n        cancellationToken.ThrowIfCancellationRequested();\n        AuthenticateResult result = await authenticationManager.AuthenticateAsync(_authenticationType);\n\n        if (result != null)\n        {\n            IIdentity identity = result.Identity;\n\n            if (identity != null)\n            {\n                context.Principal = new ClaimsPrincipal(identity);\n            }\n        }\n    }\n\n    /// <inheritdoc />\n    public Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken)\n    {\n        if (context == null)\n        {\n            throw new ArgumentNullException(\"context\");\n        }\n\n        HttpRequestMessage request = context.Request;\n\n        if (request == null)\n        {\n            throw new InvalidOperationException(OwinResources.HttpAuthenticationChallengeContext_RequestMustNotBeNull);\n        }\n\n        IAuthenticationManager authenticationManager = GetAuthenticationManagerOrThrow(request);\n\n        // Control the challenges that OWIN middleware adds later.\n        authenticationManager.AuthenticationResponseChallenge = AddChallengeAuthenticationType(\n            authenticationManager.AuthenticationResponseChallenge, _authenticationType);\n\n        return TaskHelpers.Completed();\n    }\n\n    /// <inheritdoc />\n    public bool AllowMultiple\n    {\n        get { return true; }\n    }\n\n    private static AuthenticationResponseChallenge AddChallengeAuthenticationType(\n        AuthenticationResponseChallenge challenge, string authenticationType)\n    {\n        Contract.Assert(authenticationType != null);\n\n        List<string> authenticationTypes = new List<string>();\n        AuthenticationProperties properties;\n\n        if (challenge != null)\n        {\n            string[] currentAuthenticationTypes = challenge.AuthenticationTypes;\n\n            if (currentAuthenticationTypes != null)\n            {\n                authenticationTypes.AddRange(currentAuthenticationTypes);\n            }\n\n            properties = challenge.Properties;\n        }\n        else\n        {\n            properties = new AuthenticationProperties();\n        }\n\n        authenticationTypes.Add(authenticationType);\n\n        return new AuthenticationResponseChallenge(authenticationTypes.ToArray(), properties);\n    }\n\n    private static IAuthenticationManager GetAuthenticationManagerOrThrow(HttpRequestMessage request)\n    {\n        Contract.Assert(request != null);\n\n        IAuthenticationManager authenticationManager = request.GetAuthenticationManager();\n\n        if (authenticationManager == null)\n        {\n            throw new InvalidOperationException(OwinResources.IAuthenticationManagerNotAvailable);\n        }\n\n        return authenticationManager;\n    }\n}\n\n}\n``\n. @HaoK what if I want a specific authentication type being applied without enforcing any authorization policy?\n. @Haok filtering is probably not the right word. Basically, what I'm looking for is a filter that setsContext.Userusing the authentication handler corresponding to theAuthenticationTypedefined by the attribute (i.e anHostAuthenticationFilterequivalent, but that would concat identities inContext.User` instead of defining a new principal each time).\nYou'd use it like that:\n``` csharp\n[Authenticate(\"APIKey\")]\n[Authenticate(\"Bearer\")]\n[Route(\"/profiles/{profileID}\")]\npublic IActionResult Get(int profileID) {\n    if (Context.User.Identities.Any(identity => identity.AuthenticationType == \"Bearer\")) {\n        // When the profile is requested using an access token representing the associated user, return the whole entity.\n    }\nelse if (Context.User.Identities.Any(identity => identity.AuthenticationType == \"APIKey\")) {\n    // When the profile is requested using a simple API key representing an application, return a limited entity.\n}\n\n// When the request is unauthenticated, return a very limited entity.\n\n}\n``\n. That's indeed definitely more an authentication concern. That's why I'm not sure it should beAuthorizationService's concern to callAuthenticateAsync(https://github.com/aspnet/Security/commit/4a635835af1049679103fdca97716e814408addc#diff-1e9e57ee7433d6630e3e3cb634a0e8e4R44). Instead,context.Usershould be filled by an authentication filter and the authorization service should just have to checkcontext.User.Identitiesto determine whether the mandatory authentication types are there or not.\n. The question is: does it need to know that? That's not really an authorization concern (while enforcing thatContext.User` has specific authentication types would be).\nIMHO, to respect a clear separation between authentication and authorization, ActiveAuthenticationTypes should be removed from the authorization server and replaced by authentication filters, that would be combined with authentication handlers configured with the Active mode. The authorization service should just check the Context.User property, nothing more.\n. @yishaigalatzer does that mean that Delta won't be ported to MVC 6?\nI was considering removing IDelta/Delta from Web API OData vNext, but if there's no global/built-in support in the core, that won't be necessary :smile:\n. Meh: http://blogs.msdn.com/b/odatateam/archive/2015/03/12/early-investigation-into-supporting-the-odata-libraries-in-asp-net-5-mvc-6.aspx :smile: \nThe progress is tracked by these two tickets:\nhttps://github.com/OData/WebApi/issues/229\nhttps://github.com/OData/odata.net/issues/97\nI know that delta/patch is/was OData-specific, but MVC 6 could be the opportunity to support it at the core level. Currently, because it's implemented at the formatter level, it doesn't support the cool BindAttribute and its property filter stuff, so I suppose we'll have to implement a custom model binder to use it with Delta<>.\nMaybe that a generic IDelta/IPatch interface could be added to MVC to tell the pipeline (and specially the model binding part): \"hey, you received a JsonPatchDocument<Entity> or a Delta<Entity> but treat it like an Entity?\n. > There is no such notion in the pipeline and I doubt there will ever be one. On the odata port, I think a straight port is an interesting exercise. I was hoping moving data to mvc6 would not be a straight port but a point in time to rethink the architecture and morph the design with a longer term viability in mind.\nThe straight port is only the first part of the plan (starting from scratch would be a bit hard for a single man :man:). And actually, it's not really a straight port, because a few things have already changed (e.g I removed the routing part to re-unify ODataRoute and the MVC routing attributes). Of course, there are tons of things I'd like to change to make Web API OData better (allowing pluggable conventions for the model builder, separating the attributes from the core package, making querying more restrictive by default), but we're not there yet.\nIf you have particular suggestions, don't hesitate to share them.\n\nDelta can be placed in a 3rd package that is separate than mvc and odata (like it should have been from day 1). Many people are reluctant to depend on it because its odata specific.\n\nHence my remark on an IPatch<TEntity> that would be integrated to MVC and that could be implemented by third packages to support JSON document patches, OData patches or totally custom formats.\n. > I would advice reading through the contribution guide. It's pretty neat that you are taking initiative and it might even be in the right direction, but I wouldn't like you to be disappointed if the guidance will be totally different once we get to a point where we actually sit down and start investing in odata. And that you realize that this work is a prototype and can be scrapped at any point and that ultimately the team is responsible to come up with the guidance and basic design.\nDon't worry, I know exactly what the \"open source by MSFT\" sauce is :smile:\nHonestly, as long as someone (MSFT or the community) is working on the Web API OData port, I'm totally fine. Of course, I realize that my contribution is just a prototype - hence the \"prototype\" flag on the issue BTW - and that it could be finally rejected in favor of a totally different approach, but you imagine that I wouldn't waste my time if the OData team wasn't interested by my contribution (I had a phone call 2 weeks ago with @congysu and his coworkers). And on the other hand, I'm also totally free to fork it and release it with a new name if I'm not satisfied with the official package.\nI'm definitely not looking for glory or personal satisfaction, and my remarks have only one objective: helping MSFT to make people realize that OData (the whole ecosystem, not particularly Web API) is a serious option for both personal and business applications and not an obscure way to expose your database (don't laugh, that's probably the most recurrent argument OData bashers have and I read it a few times on #aspnetvnext :smile:).\nOut of curiosity, is the ASP.NET team still involved in the development of Web API OData? (I would say 'no' according to the recent commits list: https://github.com/OData/WebApi/commits/master).\n\n'Ipatch' of entity imho ends up being nothing more than having an apply method. And each patch mechanism will have his own error handling exceptions being thrown, etc. So I'm very hesitant to agree with this suggestion. It's better to avoid unnecessary abstractions, that can always be added later when a read need arise. I can't think of a strong need at the moment.\n\nUnderstood (even if a IPatch<> should have, of course, far more methods: GetChangedPropertyNames, GetUnchangedPropertyNames, methods to remove changes made to particular property or to apply the patch on specific properties only and methods to validate the changes).\n. > The odata team works hand in hand with the ASP.NET team.\nBut you ignored that the OData team was considering porting Web API OData to vNext. Meh.\n\nWhen it comes to mvc6 we are attempting not to just move over the code and make it work, but reflect on the limitations, and pitfalls we had and redesign appropriately. I think the exercise you are doing is useful, in my experience with mvc6 work so far, these types of attempts (including some of mine) typically end up as thought exercises more than actual shippable code.\n\nI'm convinced, sir: I'll wisely wait for you to start working on a real OData vNext version and stop wasting my time on these \"exercises\".\nThanks :bow: \n. @harshgMSFT sure: https://github.com/PinpointTownes/Issue1141 :smile: \n. \n\n. A few clues:\n\n\n\n. Okay, issue found: MediaTypeWithQualityHeaderValue.Parse calls double.TryParse without specifying a format provider (which is terribly baaaaad :smile:). Because the default format provider (NumberFormatInfo.CurrentInfo) relies on Thread.CurrentThread.CurrentCulture, it fails parsing 0.9 as a valid double value on machines/sessions configured with the French locale. This is also why it worked on your machine, where you're probably using an English-derived culture.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.HeaderValueAbstractions/MediaTypeWithQualityHeaderValue.cs#L25\nUsing double.TryParse(qualityStringValue, NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.AllowExponent, NumberFormatInfo.InvariantInfo, out quality) will fix this issue (you should check whether these number styles, used by the shorter TryParse overload, are valid in this case and exclude the ones that are not applicable to a quality factor)\nI'd also add a null check in HeaderParsingHelpers.GetAcceptHeaders to ensure that only non-null values are returned. You could also consider returning an header with a default quality factor or throwing an exception when double.TryParse fails to parse the factor rather than returning null.\n. @rynowak @harshgMSFT thanks :tada: \n. @sornaks it works like a charm, thanks sir! :+1: \n. @pranavkm ah yeah, I didn't realize that, thanks :smile_cat: \n. Duplicate: https://github.com/aspnet/Mvc/issues/634\n. :+1: \nEven if @davidfowl does not agree (and is scornful when you try to convince him :dancers:), we definitely need IAuthenticationFilter in MVC 6.\nI won't paste the long - but interesting - discussion we had with @Alxandr on JabbR (you can easily find it on #aspnetvnext) nor repeat the performance and security implications of not allowing passive authentication scenarios but:\nNow that MVC and Web API have been merged, we ABSOLUTELY need something like the HostAuthenticationFilter we had in Web API 2 to selectively choose which kind of authentication should be applied to a particular action or controller (ex: OAuth2 tokens for the API controllers, and cookies for the frontend controllers). Setting multiple controllers to use the active mode in mixed apps is just insane, as it decrease performance and has terrible security implications, that were clearly mentioned in this post: http://blogs.msdn.com/b/webdev/archive/2013/09/20/understanding-security-features-in-spa-template.aspx\n\nHowever, there is still a problem with Web API. What happens if your application enables other authentications?  For example, the SPA template enables application cookie middleware as active mode as well in order to enable other scenarios like MVC authentication. So Web API will still be authenticated if the request has session cookie but without a bearer token. That\u2019s probably not what you want as you would be venerable to CSRF attacks for your APIs. Another negative impact is that if request is unauthorized, both middleware components will apply challenges to it. The cookie middleware will alter the 401 response to a 302 to redirect to the login page. That is also not what you want in a Web API request.\n\n/cc @loudej @HaoK @Eilon \n. Oh yeah, :+1: \n. ",
    "KKhurin": "Stress is going to start running with debuggers attached in a few days. \nThis bug will immediately block stress runs because managed NREs are actually first chance AVs caught and converted to NRE by .NET runtime. \nPlease consider fixing it asap. Even a fix as simple as trading NRE for a 'NullModelException' would greatly improve all MVC debugging scenarios.\nStress intends to run with debuggers attached (and first chance AVs handling enabled). Otherwise a lot of bugs are going to be missed (both in the framework code and test apps) if stress disables handling first chance AVs.\n. \"I'm still not sure why a stress test would have a debugger break on all first chance exceptions\" \n- no debug break on first chance CLR/EH exceptions \n- always break on first chance AVs! \nLet me repeat again: before a managed NullReferenceException is thrown the process hits an Access Violation because we're tried to read/write at address 0. This is exactly the same Access Violation that happens when code reads/writes to random memory addresses (without having appropriate memory access and commit status). We (stress) simply can not ignore them - otherwise it means we'll ignore any kind of memory corruption as long as it won't result in a second chance exception. Debuggers never (by default) break in on first chance exceptions like C++ exceptions or CLR exceptions. They do however break in on other first chance events like invalid handle, stack overflow, etc. \n. The framework should neither allow AVs inside its code nor encourage having AVs in user code just because some 3rd party components or apps may have it. If we lower the bar and have AVs in the framework code the 3rd party components will follow the case and the end users won't even be able to find their own first chance NRE even if they try.\nAlso whenever selecting and stress testing a sample (\"real world\") app we end up fixing all null refs in the app code. And a good portion of those null refs end up being actual stress bugs...\n. Apologies for not including the repro steps:\n- run the latest MusicStore (https://github.com/aspnet/MusicStore)\n- attach VisualStudio/windbg to iis/iisexpress process\n- browse to http://localhost/Account/Register\n  The debugger will report an AV.  This gets converted to managed NullRefException and MVC actually handles it. But the underlying first chance AV is not something that we/customers ever want to see in the framework code.\n. This seems to be related to increased cost of jitting as the number of assemblies grows. I'll build a simple repro and follow up.\n. Nope. I don't see any obvious drop in the throughput with increased number of loaded assemblies.\nI do see the old assemblies and delegates still being referenced but I didn't reach the memory pressure high enough to cause any noticeable effect on performance.\n. This regressed in the past ~2 weeks\n. ",
    "filipw": "what is the status of this?\n. thanks. just to make sure I understood you correctly. \nso you are suggesting something like this (not sure if this would even work, typing in github not VS :smile: )\nLet's say I create a marker filter that allows me to override any defined filter type:\npublic class OverrideFilter : ActionFilterAttribute\n{\n    public Type Type { get; set; }\n}\nThen I create a custom IActionDescriptorProvider that does something like this in the Invoke?\n```\n    public void Invoke(ActionDescriptorProviderContext context, Action callNext)\n    {\n        var descriptorsWithFiltersToOverride = context.Results.Where(x => x.FilterDescriptors.Any(f => f.Filter is OverrideFilter));\n        if (descriptorsWithFiltersToOverride.Any())\n        {\n            foreach (var actionDescriptor in descriptorsWithFiltersToOverride)\n            {\n                var toRemove = actionDescriptor.FilterDescriptors.FirstOrDefault(f => f.Filter is OverrideFilter);\n                actionDescriptor.FilterDescriptors.RemoveAll(x => x.Filter.GetType() == ((OverrideFilter)toRemove.Filter).Type || x.Filter is OverrideFilter);\n            }\n        }\n    context.Results.AddRange(GetDescriptors());\n    callNext();\n}\n\n```\nso look for descriptors which have my marker filter at any level, and use its Type property to remove the matching filter from the pipeline?\nps. would be even easier if ControllerActionDescriptorProvider had virtual members\n. Thank you - this is very helpful. I looked at the filter provider and indeed it looks rather straight forward to override or reshuffle the necessary filters from there. \nI am only concerned about the unnecessary work happening over and over on every request; would you advise against caching the result of the filtering? \nIt seems caching this would be a reasonable thing to do, especially as, intuitively, whatever filter pipeline is relevant on request number 1 should be relevant forever. Unless the provider model was intended to also support scenarios such as injecting extra filters whenever needed, for example if it's Thursday, use this extra filter?\nI didn't realize that multiple filters of same type could run per action, I'll keep that in mind.\n. thanks - it really helped. I have published a blog post summarizing this discussion\n. I'm not sure what is the use case for IFilterContainer (doesn't seem to be used anywhere at the moment), but if I don't call the base, the reconciliation between IFilterContainer as created by the filter factory and the filter metadata will never happen - and if there ever is an IFilterContainer in the list,  it simply didn't seem right; that was really the only reason.\n. +10000. I can't remember the last time I built anything in Web API that didn't use PATCH and some sort of a Delta<T> shim.\nOriginally, you could get the OData one to work with JSON (at least partially) but after going through a lot of drama. I think this would be a terrific addition.\n. ",
    "jgauffin": "The error handling in MVC is confusing for many. I've answered a lot of questions in stackoverflow regarding error handling.\nThe exception filters in MVC is a good attempt, but as errors can happen in the ASP.NET pipeline it doesn't work for all cases.\nimho it's therefore better if the core team can created a new extensible way of handling errors which do not involve customErrors (or at least change from redirects as the default behavior)\n. If you are going to port the helpers, please move the logic from the extension methods to separate classes which are extendable. Use the extension methods as facades only.\n. Doesn't HttpStatusCodeResult result still exist? As it takes HttpStatusCode enum in one constructor overload it should be pretty easy to figure out how to return a custom error code.\n. HttpStatusCode have existed in System.Net since 1.1\n. Ahh ok. I read your link. CoreCLR seems like nice initiative.\n. Doesn't most other engines do #2? I.e. a dedicated page where both successful and failed attempts can be shown?\nShouldn't you also create a template where all database related operations is in a class library to promote practices (for instance separation of concern)?\n. For consistency, I think that a solution should resemble the regular HTTP Post validation (i.e. through a regular form).\nSomething like this:\nJSON\n    {[\n        {\n            \"FieldName\": \"FirstName\",\n            \"Errors\": [\"Must be between 1 to 20 characters\", \"Field is required\" ]\n        },\n        {\n             \"FieldName\", \"Address.City\",\n             \"Errors\": [\"Field is required\"]\n        }\n    ]}\nNo need to expose the value or validation state. Less is more secure. Just make it easy to extend the default error response handling if someone required a more detailed approach.\n. ",
    "borgdylan": "Can't this be done using ActionFilters? For example, I have an action filter that returns json with exception errors whenever an action returns a 500. For general 500s there is the new ErrorhandlerMiddleware in the Diagnostics library. To handle general 404s one could do a new middleware.\n. This is also needed for SignalR\n. I think he meant AddMvc. AddMvc adds Mvc services to IoC while UseMvc adds it to the request pipeline.\n. note that this fails if modelbinding a loose string from the request body. It does not fail however for arrays of string or if modelbinding an object that has a string property inside it from json\n. The problem does not exist when running under .NET/Windows\n. Attached below is the stack trace:\n```\nStarted\n/Home/Echo/11\nSystem.InvalidProgramException: Invalid IL code in (wrapper dynamic-method) object:GetCharsFromString (object): IL_0006: call      0x00000003\nat (wrapper managed-to-native) System.Delegate:CreateDelegate_internal (System.Type,object,System.Reflection.MethodInfo,bool)\n  at System.Delegate.CreateDelegate (System.Type type, System.Object firstArgument, System.Reflection.MethodInfo method, Boolean throwOnBindFailure, Boolean allowClosed) [0x00000] in :0 \n  at System.Delegate.CreateDelegate (System.Type type, System.Reflection.MethodInfo method, Boolean throwOnBindFailure) [0x00000] in :0 \n  at System.Delegate.CreateDelegate (System.Type type, System.Reflection.MethodInfo method) [0x00000] in :0 \n  at System.Reflection.Emit.DynamicMethod.CreateDelegate (System.Type delegateType) [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].CreateDynamicValueAccessor (System.Reflection.MethodInfo getMethodInfo, System.Type declaringType, System.String propertyName) [0x00000] in <filename unknown>:0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].CreatePropertyValueAccessor (System.Reflection.PropertyInfo property) [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].CreatePropertyInformation (System.Type containerType, System.Reflection.PropertyInfo property) [0x00000] in <filename unknown>:0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].CreateTypeInformation (System.Type type, IEnumerable1 associatedAttributes) [0x00000] in <filename unknown>:0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].GetTypeInformation (System.Type type, IEnumerable1 associatedAttributes) [0x00000] in <filename unknown>:0 \n  at Microsoft.AspNet.Mvc.ModelBinding.AssociatedMetadataProvider1[Microsoft.AspNet.Mvc.ModelBinding.CachedDataAnnotationsModelMetadata].GetMetadataForType (System.Func1 modelAccessor, System.Type modelType) [0x00000] in <filename unknown>:0 \n  at Microsoft.AspNet.Mvc.ReflectedActionInvoker+<GetActionArguments>d__1.MoveNext () [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[System.Collections.Generic.IDictionary`2[System.String,System.Object]].GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.ReflectedActionInvoker+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.ReflectedActionInvoker+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.ReflectedActionInvoker+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Mvc.MvcRouteHandler+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Routing.Template.TemplateRoute+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Routing.RouteCollection+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.AspNet.Builder.RouterMiddleware+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Startup+<b__2>d__0.MoveNext () [0x00000] in :0 \n```\n. As per teh stack strace teh method at https://github.com/aspnet/Mvc/blob/03b272380618aea35d8b43b63a982bc66a22ce4a/src/Microsoft.AspNet.Mvc.ModelBinding/Metadata/AssociatedMetadataProvider.cs#L158 is being used to modelbind a string.\nIt is trying to use teh Chars property on System.String without passing in an integer index.\nIt seems some other way shoudl have been used and not this code so on mono something has slipped thru teh cracks and allowed that code to be used\n. as pointed out by David Fowler, the AssociatedMetadataProvider should skip all simple types including string.\n. If a CI build gets pushed on myget I will test again and report the result\n. Three weeks have passed, is there any intention of merging the fix?\n. It has worked for me using yesterday's (sorry for the time difference). I will do a retest in the morning and close the issue.\n. Test on Jul 3rd 9:15 AM (CET) with MVC build 10181 and mono KRE build 10072 : bug is no longer existent.\n. Will MVC support XML serialization for any type(without type registration) just like WebAPI vCurrent?\n. @yishaigalatzer would the fix code above work if turned into an action filter?\n. The formatter also fails to write members of elements of ienumerables of an interface. For example outputting the enumeration of ILibraryInformation with the deps of the app succeeds for json output but for XML it returns a collection of empty ILibraryInformation tags.\n. I have dived into the mono sources. The claims private field is used which is what is returned by the claims property. It should not be an issue if no one inherits ClaimsIdentity and overrides the Claims property.\n. Then, I hope it gets fixed in mono. They usually fix any noticed incompatibility with .NET behaviour. So do file bugs if not already filed.\n. Shoudldn't the AuthorizeFilter support a policy less constructor? That would make basic usage easier rather than having to define policies in DI for a simple case.\n. But will there be a way to make a policy that allows anyone that presents valid credentials to pass successfully?\n. It is on mono/Linux x86.\n. The parameter happens to have a FromBodyAttribute on it (line 3 below puts it on).\nPart of the code(you may not understand it):\n```\n[method: HttpPost()]\n    [method: AntiXSRF()]\n    [parameter1: FromBody()]\n    method public Task LogOn(var model as LogOnModel)\n        if get_ModelState()::get_IsValid() then\n            var db = new MyIdentityContext()\n            var uman = new ApplicationUserManager(new UserStore(db))\n            var ac = new AccountClosure(db, uman, get_ModelState(), get_Context(), model) {_twofactor = true}\n        return ac::Await<of ApplicationUser>(uman::FindAsync(model::get_UserName(), model::get_Password()), _\n                                            new Action<of ApplicationUser>(ac::LogOnCore))              \n    end if\n    return Task::FromResult<of ActionResult>(new EmptyResult())\nend method\n\n```\n. I am using the newest bits of mono and ASP.NET 5.\n. This new behavior is due to mono switching to the MSFT reference source for System.Attribute (which misuses MethodInfo.GetBaseDefinition). This exception may therefore also be thrown on Windows with .NET.\n. https://github.com/mono/referencesource/blob/mono/mscorlib/system/attribute.cs#L45\n. I opened an issue with mono plus gave them a small non asp.net repro of the issue.\n. https://bugzilla.xamarin.com/show_bug.cgi?id=28184\n. fixed in mono master\n. This is happening in  a complex case with code that I cannot disclose. In some way the 401 is being changed/redirected by the cookie middleware. Also it happens when the auth cookie is rejected by the principal validation routine.\n. I get:\nUnable to locate Microsoft.AspNet.RequestContainer >= 1.0.0-beta4-11232\nwhen trying to replace all the packages with the latest ones.\n. The culprit is one of the security packages which still requires teh request container package which as far as I know was nuked some time ago.\nMicrosoft.AspNet.RequestContainer 1.0.0-beta4-11232\n    -> Microsoft.AspNet.Security 1.0.0-beta4-11758\n. My bad, I was referencing old packages. Now, I get the 401 as expected so that my javascript displays the login view.\n. I will try. The code I spotted thison is internal company code so I will have to make a separate repro from scratch.\n. After trying a repro the bug did not manifest itself. However I continued to reduce the request's complexity down to a simple get request and I concluded that the action name \"Upload\" is not liked by Mvc.\n. The uri was htpp://localhost:5002/api/Roxy/Upload?siteId=1. The controller had no other overloads of the Upload method. The route config was \"api/{controller}/{action}/{id?}\" with defaults of \"Home\" and \"Index\".\n. ",
    "rosieks": "It would be great if I could execute batch within transaction\n. It would be great if there will be support for multi words controller names eg: DocumenType to changed to document-type + support for pluralization so it finally will be document-types\n. ",
    "ctolkien": "\n\nThe application could redirect to a full error page, using a query string or session variable to flow the details. sample\n\n\nAm wary of the term \"redirect\" here, if a user enters in a bad URL (404 or otherwise), I do not want them redirected, the error should be presented at the specified URL.\n. I'd vote for filter as well.\n. I believe MVC5 issued a 302 for this as well, it would be good if there was an overload for a permanent redirect.\n. Do we still need uncompressed/uncombined files for local development? Can just use sourcemaps which simplifies the entire process (no need to rewrite any template files).\n. > This strategy can also work with gulp (i guess)\nYes that's what we're using for gulp. Here's a sample:\ngulp.task('less', function() {\n    gulp.src('./css/**/main.less')\n        .pipe(plumber({ errorHandler: onError    }))\n        .pipe(sourcemaps.init())\n        .pipe(less({compress: true}))\n        .pipe(sourcemaps.write('maps'))\n        .pipe(gulp.dest('./wwwroot/css/'));\nWe don't ever care about uncompressed \"development\" assets. Skips the whole HTML rewrite step entirely.\n. :+1:  on [Inject]\n. ",
    "rustd": "I still get build errors. Just tried now with the latest nightly\n. var myString = Url.RouteUrlAsBuilder(\"GetDinnerById\", new { id = dinner.DinnerId }).ToFull(); is much better\n. @DamianEdwards @Eilon this was for Beta5 for the templates. it would be great if we can get this in. not sure though\n. ",
    "aliostad": "As you might know, I have implemented HTTP Caching in CacheCow library. I am happy to contribute towards building the feature.\n. Well Output Caching is better than nothing but there is more (way more) to HTTP caching than Output Caching. \nOutput Caching in ASP.NET MVC/Web API is user-mode and not Kernel mode and its rules are usually system-wide (2 requests within 2 minutes or something) and changing them requires registry change. Its capacity bound by the memory available on the server and once threshold reached, it suddenly chucks out half of its content. \nI would like to see HTTP caching supported as a first class citizen.\n. @davidfowl sure. So is there another thread somewhere else that we can carry on discussion?\n. ",
    "nfplee": "I look forward to this feature being implemented. I hope it will support Donut Caching where components can be excluded from the parent action's cache.\n. @pranavkm I would remove the cache by adding an extension method to IMemoryCache such as:\nvoid RemoveAll(this IMemoryCache cache, string prefix)\nI would like a way to set a prefix for the key that the cache tag helper would use. For example I could say something like:\n<cache asp-cache-key-prefix=\"Widget_1\" ...>...</cache>\n<cache asp-cache-key-prefix=\"Widget_2\" ...>...</cache>\nNow I could call my extension method to delete an individual item with a prefix of \"Widget_1\" or both items with a prefix of \"Widget\".\nAs a side note (maybe this should be another issue) but it would be great if the OutputCache / ResponseCache attribute also supported this.\n. ",
    "JesperTreetop": "Fair enough. That might be a useful comment somewhere in the code, maybe near a constant with the comparison mode since uniformity (no special casing) is desired. Just a thought.\n. ",
    "mojtabakaviani": "this is best way to obfuscation and minification inline writed javascript in view pages\n. in controller for example pass anonymous\nc#\nreturn View(DbContext.Users.Select(u=> new { u.Id, u.Name, u.UserName }));\nand in view access that\n``` c#\n@model IEnumerable\n@foreach (dynamic user in Model)\n{\n    @user.Name //raise error\n}\n```\n. ",
    "saxx": "Is there any way at the moment to get a simple file upload working in MVC6? Some workaround until the nice way with HttpPostedFile is working again? Also, it seems that the modelbinder has problems with multipart/form-data forms?\n. ",
    "ajaybhargavb": "437eb93bdec0d9238d672711ebd7bd3097b6537d\n. dc49a2c194c777641bd86f51f071b75a0a00e477\n. 088bb18eed498d1b2df96bee52ffbaf744254f61\n. 13e1c9d5e1509b0df5c7a2317b6380fa1a401784\n. eb7283fced7935cde22781025a1c532f60b13e20\n. 7c0eb56e59b1e3632ad065ca3291462791ac259b\n. https://github.com/aspnet/Mvc/commit/8e85d53c888bc4c533652ccaf2ce7081985e1b75\n. Commit 232deb47d069426db94320615181bbfb0ee44fd6\n. a5a3eb44b9a23ff2fe4e8f64641c060088fbb1c9\n. @rynowak, Please refer @danroth27's comment here https://github.com/aspnet/Mvc/issues/1528\n. @rynowak :+1: Will change it.\n. @pranavkm @rynowak Updated PR.\n. @rynowak updated.\n. This will be fixed as part of the file upload feature. https://github.com/aspnet/Mvc/commit/685ed7f277fded9eb19f8998dc5465e468052c7e#diff-1\n. 437eb93bdec0d9238d672711ebd7bd3097b6537d\n. @dougbu \n. Updated\n. Updated\n. There is an open PR for this already. https://github.com/aspnet/Mvc/pull/1779\n. 5e704cd5efcb1d9ec3599791047686b0eab2d2b2\n. 9fcf31fa43340a21b4095561c24ecd693ed929ec\n. Updated. Haven't addressed this feedback yet.\n\nsince the name implies focus is on activation, should use  [Activate]  with  ViewContext  and another service e.g.  IHtmlGenerator ,  IHtmlHelper , or  IUrlHelper . so far are using activation less than the tag helpers functional test.\n. Updated.\n. Updated.\n. Updated.\n. Updated. Changes based on https://github.com/aspnet/HttpAbstractions/pull/164.\n. Updated.\n. Updated.\n. Updated.\n. Updated.\n. Updated.\n. https://github.com/aspnet/Mvc/commit/17aa21dc259a1d988faef80a576ed3b2bd4efc1c\n. 9f9dcbe6ec2e34d8a0dfae283cb5e40d8b94fdb7\n. Checked in - 67b078862ee36a846af1b81088e3f2f73f5de3e2\n. There are some failing unit tests. I am working on fixing them.\n. Updated. @pranavkm @rynowak @yishaigalatzer \n. Updated. @yishaigalatzer \n. Updated.\n. ac6a1a6a808ca4d88231db65cf3e5d0b54a1b92f\n. @rynowak, Should the System.Net HttpStatusCode also be replaced?\n. Updated. Replaced System.Net.HttpStatusCode usages.\n. 3d30fd653ec2e9d44296a4c62a274e578da145fe\n. https://github.com/aspnet/Mvc/issues/2002\n. d236d4ffde1f830dacd4ede323ea78cd5b6d7180\n. Updated.\n. Updated.\n. Updated.\n. Updated.\n. Updated. \n. Updated.\n. Updated.\n. Updated.\n. Updated. @NTaylorMullen \n. @NTaylorMullen  Updated.\n. Updated.\n. Updated.\n. Updated.\n. Updated.\n. Updated.\n. @Eilon, addressed your comments. Merging this for now. Will do a followup PR if you have any more comments.\n. Part 1 - https://github.com/aspnet/Mvc/commit/bfdeda797df054a4ae8a6fa9250e65f07cd63a1e\nPart 2 - https://github.com/aspnet/Mvc/commit/e2058905ec30facdf41d1eca2360be3c4b6b7314\nPart 3 - https://github.com/aspnet/Mvc/commit/fd5e07dd0323812263b9fc0160ad56be3a4f3f6c\n. Created a follow up issue https://github.com/aspnet/Mvc/issues/2220\n. bfdeda797df054a4ae8a6fa9250e65f07cd63a1e\n. Updated with tests.\n. Updated with test.\n. Updated.\n. Updated.\n. Not fully related to this PR: Just checked MVC 5 supports having RenderBody inside a section which is rendered in another layout. Do we plan to have the same support? Right now our code will throw when there is no explicit RenderBody call.\n. Actually it doesn't throw even when there is no RenderBody() call. It is ignored. It throws only for unrendered sections. @pranavkm, was this behavior change intended in MVC 6?\n. :+1: \n. :shipit: \n. Scratch that. Forgot to add services.AddWebApiConventions(). \n. Fixed in d0927bdc75cd88d1cba0a0e9264cb2b3ec81de76\n. Updated.\n. Updated. @Eilon @pranavkm \n. Updated. @Eilon @pranavkm \n. Updated with support for dictionaries. @Eilon @pranavkm \n. It can only be string because JObject implements IDictionary<string, JToken>\n. Updated.\n. Updated.\n. Updated @Eilon \n. Updated.\n. Updated.\n. Updated with tests. @dougbu @NTaylorMullen \n. Updated @dougbu \n. Updated.\n. 53f3a91f01c740f3cbf5209a9eeeefd614a6cbc2\n. Updated.\n. @dougbu Not sure what scenario actually uses encoding in these helpers. I couldn't find any part of the code that uses with encoding directly. Could you provide some scenarios? \nthe following classes do not test using CommonTestEncoder at all. please fill these gaps.\nAnchorTagHelperTest\nFormTagHelperTest\nTagHelperOutputExtensionsTest\nValidationMessageTagHelperTest\n. Updated.\n. Updated.\n. @dougbu, I don't think highlighting the leading @ is a good idea because it won't be consistent with other errors. Eg: When you type @abc without creating the variable abc it is going to highlight abc and not @abc.\n. Updated.\n. Updated.\n. :shipit: after addressing one minor comment\n. :shipit: \n. :shipit: \n. \n",
    "shhsu": "I have implemented a prototype of this proposed fix and ran the simple helloWorld test scenario on this in May. I saw 10~15% throughput improvement\n. ",
    "ashmind": "@yishaigalatzer which Delta<T>?\nI've just googled and read http://www.strathweb.com/2013/01/easy-asp-net-web-api-resource-updates-with-delta/. It seems I did a very similar thing independently. However I think I used a different approach (haven't looked at OData code in detail yet).\nFor JSON.NET, I mostly delegate JsonContract of Patch<T> to JsonContract of T so that logic is similar to deserializing original object (all property types should be handled as they would normally be handled by JSON.NET). However I replace the property setter with my own property setter, which records an attempt to set the property instead of actually setting it.\nHere is my current design in full:\nhttps://gist.github.com/ashmind/20b234e2fd69db542beb\nNote that it is very raw at the moment and can have bugs, but it works for me in main scenarios (including Guids as JSON.NET is able to rely on original object property types).\nThat wouldn't work with default XmlSerializer -- but that serializer is terrible anyway, so I am using NFormats.Xml which is easier to extend (I haven't added patch support it yet though).\n. @yishaigalatzer That is true, yet even in its current state I found it to be very stable and way more extensible than standard XmlSerializer. I can't advocate a project in that state for WebApi obviously, but I use it in my projects -- with custom converters it can handle anything, while XmlSerializer just ignored e.g. dynamic objects.\nAnyway to me it makes sense to design the Patch<>/Delta<> support for a good customizable serializer (Json.Net etc), and discuss question of improving WebApi XML serializer separately.\n. Not sure if this should be separate, but please also add a helper for HttpUnprocessableEntity (422).\nIt is annoying to create manually as it is not in HttpStatusCode enum.\nSee\n- http://stackoverflow.com/a/20215807/39068\n- http://tools.ietf.org/html/rfc5789#section-2.2 -- non-WebDav use of 422\n. @yishaigalatzer \n\nwe do not own the HttpStatusCode enum\n\nI realize this, that's why I ask for a helper and not for an enum entry.\n\nwe are only picking the most common responses\n\nBy this logic 422 is a more useful helper than 400. 400 is a malformed request, which should not really happen after you got inside the controller action (handled by ModelBinders/MediaFormatters etc).\n422 is most of semantic validation, which is pretty common inside controller actions.\n. If you take a look at http://tools.ietf.org/html/rfc5789#section-2.2 it is pretty clear 422 is recommended for validation errors (it is talking about PATCH, but that's only because patch spec is newer than all other verbs -- older specs existed before 422).\nSee also\n- http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data/20215807#20215807\n- http://stackoverflow.com/questions/15225325/is-http-status-422-appropriate-for-records-that-fail-uniqueness-validation\n- http://www.bennadel.com/blog/2434-http-status-codes-for-invalid-data-400-vs-422.htm\nOther users:\n- Rails returns 422 for validation errors (not sure if all)\n- GitHub returns 422 for validation errors (https://developer.github.com/v3/)\n- Shopify (https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/422-product-can-t-be-blank-error-when-trying-to-add-a-product-134876)\n- Recurly (https://docs.recurly.com/api/basics/validation-errors)\n- Redmine (http://www.redmine.org/projects/redmine/wiki/Rest_api#Validation-errors)\n- etc\n. @yishaigalatzer\n\nWhy would you have a delegate in your model?\n\nMy model is the following:\n``` csharp\npublic class Patch {\n    public IDictionary> Values { get; private set; }\n}\npublic class PatchValue {\n    ...      \n    public object Value { get; private set; }\n    public Action Apply { get; private set; } // this captures JSON.NET attempt to set corresponding property on TTarget\n}\n```\nSince I plan to release it (and related Json contract resolver) as a NuGet package at some point, this might cause a problem for people unless I solve it somehow.\n\nFortunately with MVC 6 you can add anything you want us to skip, we don't plan to add additional types that are not commonly used, because that list is pretty much infinite.\n\nYes, but the delegate is common type, and the current logic causes immense slowdown instead of outright failure. Developers might miss that slowdown when developing. I think it is important to avoid those scenarios.\nYou did add Type, why not other reflection types including Assembly?\n. > Also note that we are planning to add patch support before rtm-ing, so if you are interested in that kind of support you might want to participate in that feature design when we get closer so it actually happens in the framework.\nThat sounds interesting, where can I participate?\n\nthough we might want to have proper [ValidateNever] attribute\n\nThat sounds great. One other thing that might be worth considering is a configurable limit on validation time or count of objects visited, so if something weird happens developers might get an error instead of a random slowdown.\n. ",
    "sergkr": "Personally, I'd love to see ASP.NET add native support for the JSON Patch spec for supporting partial updates:\nhttp://jsonpatch.com/\nhttps://tools.ietf.org/html/rfc6902\nThere are a couple projects out there that add partial support for JSON Patch within Web API, but they're both kind of \"alpha\" at this stage (neither implement the spec fully):\nmyquay/JsonPatch\nBlog Post: http://michael-mckenna.com/Blog/how-to-add-json-patch-support-to-asp-net-web-api\nGithub: https://github.com/myquay/JsonPatch\nNuGet: https://www.nuget.org/packages/JsonPatch/1.0.0\nKevinDockx/JsonPatch\nGitHub: https://github.com/KevinDockx/JsonPatch\nNuGet: https://www.nuget.org/packages/Marvin.JsonPatch/0.3.0\nJust wanted to throw this out there - not sure if this has been considered already or not.\n. Understood, thank for considering this. I've put in an issue at myquay/JsonPatch to add support for MVC 6. I myself am not familiar yet with what exactly would have to go into this, but feel free to comment on that issue.\n. Couple questions to consider.\nFirst, is there a possibility we would (eventually) want to support the notion of patch documents in XML as well, using something like RFC 5261? Even if it's not going to be done right now, it's worth bring it up as I imagine it might potentially affect the implementation (i.e., we might want to have a generic PatchDocument that isn't tightly coupled to either JSON Patch or XML Patch, and can be deserialized from both JSON and XML).\nSecond, it's common to have separate classes for domain objects (\"entities\") versus what you send/receive over the wire (\"DTOs\"). This is especially true if your entities are Entity Framework model classes (which may have circular references to establish foreign key constraints / navigation properties).\nThe issue is the client is likely going to be sending a patch document against a DTO, but generally we want to apply the patch against the actual entity. Ideally, we would want to be able to do something like this:\n```\npublic IHttpActionResult Patch(int id, [FromBody]JsonPatchDocument patch)\n{\n      // get the expense from the repository\n      Entities.Expense expense = _repository.GetExpense(id);\n  // apply the patch document - can't actually be done if the types don't match\n  patch.ApplyTo(expense);\n\n  // changes have been applied.  Save the entity...\n\n}\n```\nThe above example wouldn't actually work since we're trying to apply a patch document of type DTO.Expense against an entity of type Entities.Expense. I think being able to support this use case is kind of important, as otherwise we're limiting being able to use Patch in all but the simplest of APIs.\nNow, when an API separates the domain objects from the DTOs, it would generally also have a mechanism for converting back and forth between the two (maybe just using AutoMapper, or something like the ModelFactory concept). So, the API author could load the entity from the database, convert it to a DTO using their preferred mechanism of choice, apply the patch against the DTO, then convert the patched DTO back to an entity, then finally save the entity:\n```\npublic IHttpActionResult Patch(int id, [FromBody]JsonPatchDocument patch)\n{\n      // get the expense from the repository\n      Entities.Expense expense = _repository.GetExpense(id);\n  // Convert to a DTO\n  DTO.Expense expenseDto = ConvertToDTO(expense);\n\n  // apply the patch document against the DTO\n  patch.ApplyTo(expenseDto);\n\n  // convert back to an entity\n  expense = ConvertToEntity(expenseDto);\n\n  // changes have been applied.  Save the entity...\n\n}\n```\nThe issue I see with this (besides the number of steps involved) is it's basically replacing the entire expense entity (and if that entity references other entities, it may potentially be replacing an entire object graph) even if the patch was for a single property on the root object. That's fine for PUT/POST, but it almost seems to defeat the entire purpose of PATCH to be doing this...\nKevin's implementation does have the notion of \"adapters\", which I think can be used to accommodate this use case:\n\nIf you want to provide your own adapter (responsible for applying the operations to your objects), create a new class that implements the IObjectAdapter interface, and pass in an instance of that class in the ApplyTo method.\n\nI like this idea, but the issue I see with this is implementing an IObjectAdapter is not a simple matter. If you look at how the default SimpleObjectAdapter is implemented, for instance, it's basically asking the user to implement all the operations in the JSON patch spec (though granted, there are helpers they can use for things like checking if the types are compatible, etc).\nHere are my own thoughts on this. I like the idea of having \"adapters\", but I'd like them to be simpler for the user to implement. For instance, if the only thing that's different between the entity and the DTO is the name of a property, that's something they should be able to express (ideally in a single line of code), and otherwise be able to rely on the default implementations of all the operations such as Add, Replace, Remove and so on. But at the same time, they should be able to accommodate complex things, too (for example, the DTO might have a \"Type\" property which, if changed, should result in instantiating a different type for the entity - might make sense if your entities form an OOP hierarchy, such as a base Question type, and inherited FillInQuestion and MultipleChoiceQuestion derived classes).\nFurthermore, I don't think the user's primary concern is going to be changing how the operations themselves (Add, Remove, Replace, etc) are implemented - they probably want those to remain as close to the spec as possible. They likely still want a copy to do what a copy normally does. The actual concern, I think, is likely going to be the fact that path \"/Foo/Bar\" in the DTO might actually correspond to property Foo.Qux in the entity; or, maybe the property does not exist in the entity at all, and must be retrieved from elsewhere. Or maybe they want to prevent being able to set a particular path.  In other words, it is likely that the thing they want to be able to override is what to do when we attempt to retrieve a value at a given path (regardless of whether the read is occurring as a result of move, copy, or test), or set a value at a given path (regardless of whether the write is occurring as a result of add, remove, replace, etc).\nAll the operations in a JSON Patch document can be decomposed to a list of get/set operations on either properties or collection indexes, as well as Insert/RemoveAt operations on collection indexes. Here are a couple examples of JSON patch documents, and the operations that they decompose to:\n- { \"op\": \"replace\", \"path\": \"/a/2\", \"value\": \"foo\" }\n  - entity.a[2] = \"foo\"\n- { \"op\": \"add\", \"path\": \"/a/2\", \"value\": \"foo\" }\n  - entity.a.InsertAt(2, \"foo\")\n- { \"op\": \"move\", \"from\": \"/a/2\", \"path\": \"/b/3\" }\n  - temp = entity.a[2]\n  - entity.a.RemoveAt(2)\n  - entity.b.InsertAt(3, temp)\n- { \"op\": \"copy\", \"from\": \"/a/2\", \"path\": \"/b/3\" }\n  - temp = entity.a[2]\n  - entity.b.InsertAt(3, temp)\nSo, what if in the adapter, rather than having to override how Add, Move, Replace, etc. are implemented, you instead get the ability to override how these decomposed operations are applied for a given path?  For instance, if \"/Foo/Bar\" should actually be Foo.Qux, maybe the user could write something like this:\nvar adapter = new JsonPatchAdapter<Expense.DTO, Entities.Expense>();\nadapter.Get(\"/Foo/Bar\", entity => entity.Foo.Qux);\nadapter.Set(\"/Foo/Bar\", (entity, value) => { entity.Foo.Qux = value; });\npatch.ApplyTo(expenseDto, adapter);\nI haven't though this all the way through yet. I know there are probably going to be some challenges here, especially with anything that refers to collection indexes, but I wanted to get some thoughts on the idea.\n. ",
    "roryprimrose": "It would certainly help. Presumably most of that method is still valid however. The only line that would require overriding is\nreturn UnobtrusiveValidationAttributesGenerator.GetValidationAttributes(clientRules);\n. Hi Levi,\nI get your point and I agree. Our system is not SPA however and there is no concept of session state in our JavaScript. We have the implicit auth cookie because the script is loaded and executed within an authenticated page. We have roughly followed the AJAX guidance of the ASP.Net documentation in this regard - http://www.asp.net/web-api/overview/security/preventing-cross-site-request-forgery-(csrf)-attacks. \nMy understanding of reading the SPA template code is that the lack of a token causes a redirect in order to get the token which it will parse out of the URL and store it in some kind of SPA session value for reuse. Without SPA, I can only assume that each page load will cause a redirect to get the auth token.\nAny guidance about how we should secure a web api endpoint in a non-SPA scenario would be appreciated.\n. Hi Harsh,\nYou are right, until the user uses the back button. The previous page then passes the new cookie with the old page token to the web api. Every AJAX call on that page will now fail anti-forgery. This is not an acceptable outcome. :)\n. Hi Harsh,\nOur implemented followed the MVC pattern where the tokens are split between a cookie and a header. I'd love to understand why the most common API version does not do this and goes through the header only. Is one more secure that the other?\nBecause we split the tokens, the first page has Cookie A and Header A, the next page has Cookie B and Header B. Clicking the back button means you are now working with Cookie B and Header A which fails anti-forgery.\n. Thanks Levi. Can you provide any background for why the Web Api examples combine the tokens rather than continue to use the cookie like MVC?\n. ",
    "jcoutch": "You know what, you're 100% right.  I like option 2 better (keeps the view code cleaner.)  Thanks!\n. ",
    "anfomin": "I've ran this bug right now. Any news when you are going to resolve it?\n. I'm writing action with paging support and want 2 routes:\n1. Route for first page: /path\n2. Route for other pages: /path/page{page:int:min(2)}\nThere is a controller:\n``` C#\n[Route(\"Path\")]\npublic class MySuperController : Controller\n{\n    [HttpGet, DenyPage]\n    public IActionResult Index()\n    {\n        return Index(1);\n    }\n[HttpGet(\"Page{page:int:min(2)}\")]\npublic IActionResult Index(int page)\n{\n    // some code\n}\n\n}\n```\nI've created DenyPageAttribute to block page parameter for first action:\nC#\npublic class DenyPageAttribute : RouteConstraintAttribute\n{\n    public DenyPageAttribute(string key = \"page\")\n        : base(key, RouteKeyHandling.DenyKey)\n    {\n    }\n}\nBut DenyPageAttribute useless until RouteConstraintAttribute will work for action-method. So if I write in view:\nC#\nUrl.Action(\"Index\", new { page = 2 })\nCurrent result: /Path?page=2\nExpected result: /Path/Page2\n. Thanks for workaround. I've done via Order = 1:\n``` C#\n[Route(\"Path\")]\npublic class MySuperController : Controller\n{\n    [HttpGet(Order = 1)]\n    public IActionResult Index()\n    {\n        return Index(1);\n    }\n[HttpGet(\"Page{page:int:min(2)}\")]\npublic IActionResult Index(int page)\n{\n    // some code\n}\n\n}\n```\nIn this code I can't use named routes or another action name because it's required to create URL to the next page without knowing actions. For example, next page URL will be generated with:\nC#\nUrl.Action(null, new { page = page + 1 });\n. Current CollectionModelBinder can't properly bind collections with dynamic indexes. It returns invalid results in 2 cases.\n1. I've class with collection property:\n``` C#\nclass RootObject\n{\n    public IList Collection { get; set; }\n    // other code goes here\n}\nclass AnotherObject\n{\n    public string Name { get; set; }\n}\n```\nBinding form data:\nCollection.index = key1,key2\nCollection[key1].Name = name1\nCollection[key2].Name = name2\nIf I try to bind RootObject then Collection property is bound successfully, but ModelState contains unvalidated states for Collection[key1].Name and Collection[key2].Name:\nC#\nvar model = new RoomObject();\nTryUpdateModel(model);\n/// ModelState.IsValid returns false - wrong value.\n2. I've the same classes. If I try to bind collection of AnotherObject directly with prefix, result collection is still empty:\nC#\nvar collection = new List<AnotherObject>();\nTryUpdateModel(collection, \"Collection\");\n// collection is still empty, even if there is data\n. @danroth27 yes, in previous message I wrote a shorthand. I have 2 inputs: Collection.index = key1 and Collection.index = key2.\n. @dougbu ok, I'll prepare sample tomorrow.\n. @dougbu sample is ready: https://github.com/anfomin/MvcCollectionBindingSample\n. @dougbu I can't use workaround with numeric indexes because collection items can be added or deleted with JS in real app. So resulting bound collection will have gaps in indexes. I'm using custom IModelBinder until issue is fixed.\n. Fixed exception by downloading latest build >= 13570.\n. @dougbu it can be useful to render one view component from another. And there is no problems except one I mentioned before.\nI can describe why we do this. We've created WidgetViewComponent in our project. WidgetComponent is ViewComponent with custom options. It can be rendered via:\n1. Razor: @Component.Invoke<WidgetViewComponent>(options)\n2. Database entries with JSON serialized options.\nFor the second way we have created WidgetPlaceViewComponent which loads widgets information from database and renders WidgetViewComponent in specific HTML markup. So different pages can just invoke @Component.Invoke<WidgetPlaceViewComponent>() to render all components registered in database.\n. ",
    "pawelpabich": "Awesome :)\n. @kulmugdha awesome. thanks for that.\n. Thanks @yishaigalatzer \n. ",
    "andresmoschini": "+1\nIs this issue documented in any place? Do you think that it will be included for official release?\n. ",
    "bendbro": "fca9831115de6e5b4898314af83f702a9d8dd243\n. That was the wrong commit hash, this is correct. Issue https://huboard.com/aspnet/Mvc#/issues/38941687 was mixed in.\n01f5fec210ea864f8ed3637d775c4dc1a433524f\n. I've sent a PR back and am waiting for a response\n. This is the sample I provided to the glimpse team.\nhttps://github.com/SaggySanctum/RouteDebuggerSample\n. duplicate https://huboard.com/aspnet/Mvc#/issues/38941687\n. fca9831115de6e5b4898314af83f702a9d8dd243\n. That was the wrong commit hash, this is correct. Issue https://huboard.com/aspnet/Mvc#/issues/36694075 was mixed in.\n01f5fec\n. ",
    "jrote1": "Ok will this feature be 5.3?\n. I am using InvokeAsync and I am getting this error\n. Here is what I am using:\n\"EntityFramework.SqlServer\": \"7.0.0-alpha4\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-alpha4\",\n    \"Microsoft.AspNet.Identity.SqlServer\": \"3.0.0-alpha4\",\n    \"Microsoft.AspNet.Identity.Authentication\": \"3.0.0-alpha4\",\n    \"Microsoft.AspNet.Security.Cookies\": \"1.0.0-alpha4\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-alpha4\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-alpha4\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-alpha4\",\n    \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-alpha4\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-alpha4\",\n. ",
    "huyq2002": "Do you have an estimated release date of V5.4 , and will this feature be included in V5.4? \n. ",
    "adaptabi": "Still no luck one year later?\n. what's a good one?\n. You mean this one?\nhttps://aspnetwebstack.codeplex.com/workitem/2046\n. ",
    "ilmax": "Hi @pranavkm,\nthere are some scenario that involve some I/O related thing to verify correctness of the model being validated, this can of course be made inside the controller action and be fully async, but it's a bit weird because you have to split things up, and looks like a workaround, also note that you have to do some tricky things to generate a return value similar to a validation failure so client code could react as it does on validation errors (I'm thinking about Web Api, but it applies also to MVC).\nImage for example you would like to validate an email address from user input and you have to check it's uniqueness inside your db. There are a tons of ways to do it, but for consistency with other validation rules, I prefer perform such request inside the validation code (and obviously I would like to perform the query asynchronously).\nI would like to have an async validation support or at least an example on how to build one by myself.\nCheers, Max\n. @yishaigalatzer as @tugberkugurlu has pointed out, I prefer have all my validation logic in one place and avoid splitting sync validation and async into two different places, Since the http pipeline is fully async, I would like async validation in the same place as sync one (like action filters does) but I'm sure I'm missing a lot of implementation details.\nCan you make an example of async validation inside action filters?\nCheers, Max\n. In the browser\n. Good to know, thanks!\n. ",
    "ghstahl": "pranavkm, can I read into your statement that I can count on a change in IViewEngine.\ni.e something like.\npublic interface IViewEngine\n{\n    ViewEngineResult FindView([NotNull] ActionContext context, [NotNull] string viewName);\n    ViewEngineResult FindPartialView( [NotNull] ActionContext context, \n    [NotNull] string partialViewName);\n}\nA good reason to do this is that;\n1. It is a super set of what you are passing now, as ActionContext contains the Dictionary you were passing.\n2. As framework designers, you would want implementers of custom view engines to have as much contextual information as possible.\n3. It wouldn't harm your current design, it just makes it more flexible.\nI would really like to get a nod on this direction so that at least I can change the code myself and continue with my research in how a plugin architecture on top of this new design is going to work.  I want to be ready to go day one when you guys release this thing.\n. I changed the my local copy of the code to the following;\npublic interface IViewEngine\n{\n    ViewEngineResult FindView([NotNull] ActionContext context, [NotNull] string viewName);\n    ViewEngineResult FindPartialView( [NotNull] ActionContext context, \n    [NotNull] string partialViewName);\n}\nThe fixup was very small and the MvcSample.Web works.\nThe good news is that it does not run afoul of the new design and puts back the flexibility that external ViewEngine authors need.\nHope this helps.\n. Yishai,\nThanks for the change.\nMy head is still stuck a bit in the previous MVC designs.  When I said Controller, I really meant what \"Assembly\" originated this action.  For all my cases that was the controller.  I look forward to seeing the alternatives to having a controller, but the same applies..what \"Assembly\" originated that action.\nMVC5: My plugin design had the assembly and content in a version-ed folder, so I needed to know the assembly to find what versioned folder.  I then fixed up the search paths in my inherited version of the RazorViewEngine.  i.e. /Plugins/myArea.1.0.0.34/Area/{2}/Views/{1}/{0}, etc\nMVC6: I see pulling the versioned folder concept forward \nMy plan with the new design is to have my controllers in a vNext classlibrary, which creates a nuget package as output.  This nuget package would also have my content(cshtml, images,etc).  So far this looks very promising, but I will need to know how to add custom content to the nuget in the vNext classlibrary.\nBTW: You guys are a bit heavy handed with the internal/private in the new RazorViewEngine.   Not much I can do now by inheriting from it. If I can't inherit, I guess I have to copy it, which is too bad as 99% is unchanged.  There are a lot of great generic helper classes I have seen in the framework, all marked as internal..Argh.\nMy WOW moment was when I did the following;\n1. Created a vNext classLibrary, and put in a simple controller.\n2. Attributed the controller with an area name.\n3. Built and posted it to Myget: https://www.myget.org/F/herb/api/v2/package/HerbController/1.0.0\n4. Using your MvcSample.Web, I made sure that the Nuget.config had my MyGet feed, updated the project.Json to pull my package.  ZERO CODE change in MvcSample.WEB\n5. ran the app, navigated to my route \"/Herb/Home/Index\", My controller fired.\nWOW that's plugin delivery happiness.\n. The following TestViewEngine is an example of what I am going for.\nI had to make the following changes to RazorViewEngine to accomplish this;\n1. Make the IViewEngine implementation in RazorViewEngine virtual\n2. Add the following to RazorViewEngine to override the location formats\nC#\n        public string[] ViewLocationFormatsArray { get;set; } \n        public string[] AreaViewLocationFormatsArray { get; set; }\nThen fixup RazorViewEngine to use the new changes. \ni.e. \n``` C#\n        public RazorViewEngine(IRazorPageFactory pageFactory,\n                               IRazorPageActivator pageActivator,\n                               IViewStartProvider viewStartProvider)\n        {\n            _pageFactory = pageFactory;\n            _pageActivator = pageActivator;\n            _viewStartProvider = viewStartProvider;\n        ViewLocationFormatsArray = _viewLocationFormats;\n        AreaViewLocationFormatsArray = _areaViewLocationFormats;\n\n    }\n\n```\nTestViewEngine:\n``` C#\nusing Microsoft.AspNet.Mvc;\nusing Microsoft.AspNet.Mvc.Razor;\nusing Microsoft.AspNet.Mvc.Rendering;\nusing System;\nusing System.Collections.Generic;\nusing System.Reflection;\nnamespace MvcSample.Web\n{\n    /// \n    /// Summary description for TestView\n    /// \n    public class TestViewEngine : RazorViewEngine\n    {\n        private const string ViewExtension = \".cshtml\";\n    private static readonly string[] _viewLocationFormats =\n    {\n        \"/Views/{1}/{0}\" + ViewExtension,\n        \"/Views/Shared/{0}\" + ViewExtension,\n    };\n\n    private static readonly string[] _areaViewLocationFormats =\n    {\n        \"/Areas/{2}/Views/{1}/{0}\" + ViewExtension,\n        \"/Areas/{2}/Views/Shared/{0}\" + ViewExtension,\n        \"/Views/Shared/{0}\" + ViewExtension,\n    };\n\n    public TestViewEngine(IRazorPageFactory pageFactory,\n                          IRazorPageActivator pageActivator,\n                          IViewStartProvider viewStartProvider) : base(pageFactory, pageActivator, viewStartProvider)\n    {\n\n    }\n\n    /// <summary>\n    /// Finds and returns the correct view locations based upon an assembly name\n    /// </summary>\n    private Tuple<string[], string[]> LookupViewLocationFormats(string assemblyName)\n    {\n        // TODO: Back with real data.\n        var locations = new Tuple<string[], string[]>(\n                       _viewLocationFormats, _areaViewLocationFormats);\n        return locations;\n    }\n\n    public override ViewEngineResult FindView([NotNull] ActionContext context,\n                                    [NotNull] string viewName)\n    {\n        var type = context.Controller.GetType();\n        var assembly = type.GetTypeInfo().Assembly;\n        var name = assembly.GetName().Name;\n\n        var myViewLocation = LookupViewLocationFormats(name);\n        base.ViewLocationFormatsArray = myViewLocation.Item1;\n        base.AreaViewLocationFormatsArray = myViewLocation.Item2;\n\n        return base.FindView(context, viewName);\n    }\n\n    /// <inheritdoc />\n    public override ViewEngineResult FindPartialView([NotNull] ActionContext context,\n                                            [NotNull] string partialViewName)\n    {\n        var type = context.Controller.GetType();\n        var assembly = type.GetTypeInfo().Assembly;\n        var name = assembly.GetName().Name;\n\n        var myViewLocation = LookupViewLocationFormats(name);\n\n        base.ViewLocationFormatsArray = myViewLocation.Item1;\n        base.AreaViewLocationFormatsArray = myViewLocation.Item2;\n\n        return base.FindView(context, partialViewName);\n    }\n}\n\n}\n```\n. duplicate of #817 \n. ",
    "adriaanp": "I guess this is because there is no JsonValueProviderFactory yet?\n. Sure here is the repo: https://github.com/adriaanp/gholfreg\nIf you just do \"dnu restore\" and \"dnx src kestrel\" you should be able to hit the home page.\nif you do \"npm install\" to install gulp etc. and then \"gulp \" to install bower packages.\nThen I'm getting the exception above, but hitting the other Test actions does not throw the exception.\n. yes the MONO_MANAGED_WATCHER works. Just for interest sake why is node_modules and wwwroot stuff being watched ?\n. Just another note loading a view takes a considerable amount of time on first load, but not for actions that returns json.\n. ",
    "ChrisProlls": "I'm trying to do the same as @adriaanp but it still doesn't work (I posted on stackoverflow : http://goo.gl/ycjV7k), and I don't find any solution for the moment. Are there news about it ?\n. ",
    "runxc1": "With making this more inheritable would you be able to create a RazorView Engine that allowed you to override a specific view.   Something that I have wanted to be able to do is deploy an app and then create a basic editor page so that I could edit views on the fly and have them be compiled and override the default view found on disc or perhaps a view that was compiled at build time.\n. So I for one would love to see this feature.   As @nikmd23 mentions grunt/gulp have a lot of great minifiers of html already as it is very common to minify static html for use with angularjs and other .js libraries.   I think that I would only want to see this used within Razor and would want to configure it for prod/dev so that I could develop against clean html if I wanted and in production use the minified.   I think this is a no brainer and can't see any reason why this shouldn't be added as long as its opt in.  I would assume that most developers would opt in.\n. ",
    "balachir": "This is a no repro. I incorrectly had HomeController as a nested-class of Startup class, works fine if we move it out.\n. Verified that this is fixed with VS CTP3 build.\n. ",
    "NickCraver": "@dougbu ah true - this isn't a concern for us at all since the instances are 1:1 with their usages here, but I see how that's a definite blocker as-is. It would be good if we could at least narrow them quite a bit as well...not even get to this step.\nThe multiple instances on the base could be eliminated just by not instantiating the hidden implementations in the WebViewPage base. By making the WebViewPage<T>.InitHelpers() method not call the base at all. Since it's 1 layer up, do you see any issue in simply calling the only allocation that's desirable, for UrlHelper?\nI'm proposing changing this:\n``` C#\npublic override void InitHelpers()\n{\n    base.InitHelpers();\nAjax = new AjaxHelper<TModel>(ViewContext, this);\nHtml = new HtmlHelper<TModel>(ViewContext, this);\n\n}\n```\nTo this:\nC#\npublic override void InitHelpers()\n{\n    Url = new UrlHelper(ViewContext.RequestContext);\n    Ajax = new AjaxHelper<TModel>(ViewContext, this);\n    Html = new HtmlHelper<TModel>(ViewContext, this);\n}\nThis takes us down from 5 to 3 copies with minimal changes. While the write-on-change semantics are the way to narrow it down as much as possible while keeping the contract, this would be a quick win in performance. Since they're new hidden and not meant to be accessed in anyway, it seems wasteful for them to get created. Thoughts?\n. Thanks guys, looking forward to testing this soon as I'm able!\n. ",
    "Shazwazza": "I had this working a very long time ago but have upgraded my sln to dnx and MVC6 beta4 and no the @inject on a _ViewStart page doesn't seem to propagate to views using it. It could be something I'm doing wrong or is it a known issue?\n. great thanks, will give it a try\n. Hi, I've signed the CLA last Friday using DocuSign, please let me know if there's anything else I need to do. The IView also makes sense, but I suppose with this change it'll be slightly less code to write.\n. It's worth noting, that this PR relates to this one: https://github.com/aspnet/Mvc/pull/1020\n. No problemo, I've created an issue here: https://github.com/aspnet/Mvc/issues/1031\n. Great, the IViewLocationExpander looks like a good solution to view locations and having the ability to have a sub type of RazorView without having to subtype RazorViewEngine would be fantastic, looking forward to seeing the work item! I think these two things would solve these issues\nHappy to create a PR for the virtual methods if you like?\n. Fantastic :) I'll test this out on a project of mine this week hopefully\n. Just for anyone that's come across this thread or #881, the new way is to have a file called:\n_GlobalImport.cshtml (no 's' on the end) to 'globally' inject services into views which can exist at any view folder hierarchy or so it seems. \n. ",
    "AusRob": "+1 I think this is a fairly logical path forward\n. ",
    "rowanmiller": "Sand Castle has a component that can be used to just produce an IntelliSense file (without all the other things Sand Castle does) - http://ewsoftware.github.io/SHFB/html/1fcdf9d3-06fb-4a7b-a584-f55b6ea5baae.htm.\nSand Castle isn't super lightweight and I'm not sure if there is a way to run it without having to install a bunch of stuff... so we may not want to take the dependency.\n. ",
    "terrajobst": "Agreed. I wonder whether we should ask the compilers to merge-in the appropriate elements form the base method; they sure have the context.\n@DustinCampbell\n. ",
    "am11": "@yishaigalatzer, thanks for the reply. Actually, I was surfacing the Razor code to understand the infrastructure and that how it's dialed into MVC. At some places, it seemed to me that the code is strongly coupled, and there is no view engine base from which we can extend a new front-end engine. I am doing a rudimentary research for a new engine. The idea is to get a brace-less view engine for MVC which resembles ROR's Slim (or HAML). This will let user create a tidy, light-weight and noise-less views as discussed here.\nFrom AST point of view, the only difference between slim and razor is that slim reduces noise by dropping redundant symbols / brackets from the HTML tags, end tags and braces. One way is to implode the ending braces/tags/mustaches and compile with Razor engine, but that comes with the undesired overhead. \nThe correct way would be to implement some mandatory interface for view-engine and reuse functionalities. The Slim-like syntax can then simply be parsed with any fixed-space indentation language's AST and then HTML control can dynamically be formed. For classes, ids and other attributes (<a class=\"foo\" id=\"@{model.Id}\" href=\"/\"/> vs. a.foo[id=model.Id] href=\"/\") they can be parsed along the way (probably using zencoding code-base).\nThe main challenge would be to parse the altered inline C#/VB code in view, for which we would have to manually insert curly brackets (and VB Endings ) and before parse. We can use Roslyn for that matter. \nAlthough the processing payload might not be the same as Razor's, but there wouldn't be drastic diff either. In order to ensure that; it would really help if common functionalities are extracted out and grouped under one ViewEngineBase.\n. I know zero about the technical reason behind these limitations in ASP MVC 5, and the reasons for: why continue to have those limitations in MVC 6 is a good idea. \nNonetheless, would it be possible to call sections from partials?\n- It offers better DRY: suppose CreateOrEdit.cshtml needs to add some validation js in scripts section. Currently, we need to do it twice: Create and Edit.\n- Ruby on Rails has a comparable feature called content_for and it lets you call sections from _anywhere, even from the helpers code! Moreover, there is no restriction for calling it multiple times (which may present a different kind of limitation, for which there are workarounds like content_for_once).\nIf possible, please consider expanding in those dimensions, instead of sticking to these limitations. IMO, this would be a huge \"improvement\" in MVC 6. For instance:\n- Let @section be called anywhere many times.\n- Add once in parameter list of RenderSection: @RenderSection(string name, bool required, bool once). If true, throw error on multiple calls.\n- In case of inherited layout, let views consume all sections in the layout inheritance chain. So we don't have to use workarounds like these: redefine section and RenderSection in inherited layout. If this is a mandatory feature, then RenderSection can use another parameter global, which when true; the section under question can be called from any view or partial, bypassing Layout inheritance.\n. @yishaigalatzer, I wasn't sure if that isn't quite related or even if I have a case here. :)\nYesterday I was working with sections and accomplished the task the uncool/hard way, which left me wondering if ROR's sleek way is possible (presently or in future). \nNonetheless, I will open the issue with example momentarily. \nThanks!\n. @yishaigalatzer, thanks. BTW, if you supply schema in packages element and remove the existing packages directory, nugget don't read packages.xml file. It seems like somewhere in the code, there is a string check <packages> (instead of the XML parsing).\n. Thanks @danroth27, I have opened the issue here: https://nuget.codeplex.com/workitem/4329.\n. @RanjiniM thanks! \nI agree this is harmless, but would be nice if the project system generates code with no warnings. :) \n. LOL! Actually, I was white-listing the Authorize on a project, remembered how it used to work on good'ol rails 3 and opened this issue. Didn't new how big of a malpractice would it be from security POV. \nThanks for clarification guys. :smile: \n. @yishaigalatzer, sure thing. I have reported the issue in scaffolding repo: https://github.com/aspnet/Scaffolding/issues/70. :)\n. Thanks. :)\nIt would probably make sense to handle it on first-comes-first-serve bases. \nHere is a possible/candidate solution:\n- supposedly, the initial params set is serialized to JSON or a tree data structure.\n- given the tree order, check if Any() node is missing the index.\n  - when missing: discard all (if any) given indices and assign in FIFO order if the node's value is available, else assign null. This will take care of \"intentionally left sibling\" as well as the \"intermittent index assignments\".\n  - when all indices are available, follow the sequence.\n. ",
    "glennc": "Use HttpContext.Items to track if the cookie has been set. Alternative would be to create an http feature interface.\nWe will also look at making some improvements on cookies, but you shouldn't depend on that.\n. ",
    "SteveHindmarsh": "Using the attribute [Display(Order=x)] only allows developers  to fix this proplem if the summary is showing errors for a single entity. This does not fix the problem for other scenarious such as when you wish to display errors for a collection of entities. The problem is simply fixed in this respect by displaying the errors in which they were added to the ModelErrorCollection which it currently does not! Your cracking a nut with a hammer - seemingly?\n. ",
    "haneytron": "I feel that I could take care of it, under the guidance of the MVC team, if you're willing to consider external contributions. Let me know!\n. CLA signed and working on it now.\n. ",
    "luxingdong": "Excuse me,how to install Kvm. Through the installation file?\n. ",
    "justinvp": "+1\n. The following series of blog posts by @jbogard go into some of the benefits: http://lostechies.com/jimmybogard/2013/07/18/conventional-html-in-asp-net-mvc-a-primer/\n. Personally, I prefer [Inject] over [Activate] and [FromServices]. I agree with @eamodio on the ambiguity of \"activate\".\nWhatever name is chosen, I really hope it is consistent between Mvc and Razor. Using different names for the same thing increases the concept count unnecessarily (more cognitive load).\nI'm not sure [FromServices] will be as nice in Razor... @fromServices?\n. ",
    "lucamorelli": "thanks, really nice\n. ",
    "nikmd23": "I'm pretty excited about this PR! To be fair I petitioned for this feature pretty hard...\nOne word of warning, that I found via the library I hacked toget to emulate this (called CourtesyFlush): in MVC 5, Html.AntiForgeryToken() writes to the HTTP headers to set a cookie from the view. This means that AntiForgeryToken, with its current implementation, cannot work after a flush.\nI had to reimplement AntiForgeryToken for my library to work and provide an option to set the cookie at the flush point.\nPerhaps you can do something more clever, or at least allow for FlushAsync(includeAntiForgeryToken: true)\nLet me know if this makes sense or not.\n. I'll also add a few other options I've seen with other minifiers, but these may be too aggressive or breaking:\n1. Remove extra white space within HTML comments\n2. Use the short doctype for HTML 5 when possible\n. > Might be better done later than Razor.\nPerhaps. I specifically thought adding it to Razor would be good for two reasons:\n1. The HTML won't have to be parsed/processed again.\n2. Razor output is used places besides MVC, and those hosts would presumably get the feature for free.\n. > Maybe this is better implemented as a IIS module (think dynamic content compression module) so it can be used by SPA apps that use things like AngularJS and Web Api.\nIn these cases, static HTML can be minified with Grunt/Gulp/etc. HTML generated by Web API would leverage Razor anyways, no?\n. > The level of minification should be configurable.\nI agree. It looks like this online minifier basically supports every optimization mentioned (and a few unnecessary ones?) with options to turn them on and off.\nPerhaps a [Flags] enum with an All option would do the trick here?\n. Hey @damianedwards,\nThis captures our conversation well. Thanks for writing it up - I'm looking forward to playing with the implementation.\nAlso if note, this would be the perfect spot to leverage HTTP Trailers, if any browser supported them. That said, there has been recent intrest for this by the HTTP WG.\n. We have not made any progress on this - though I would like to see something like this implemented, somehow, someway, by someone one day. :wink: \n. ",
    "marcuslindblom": "@dougbu yes, I'm using Alpha2 MVC packages. Updated my packages but now [at]RenderBody() cannot be found using these packages \n{\n    \"dependencies\": {\n        \"Kestrel\": \"1.0.0-alpha4-10215\",\n        \"Microsoft.AspNet.Http\": \"\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-alpha4-10274\",\n        \"Microsoft.AspNet.Hosting\": \"1.0.0-alpha4-10280\",\n        \"Microsoft.AspNet.Mvc\": \"\",\n        \"Microsoft.AspNet.Mvc.Core\": \"\",\n        \"Microsoft.AspNet.Mvc.Common\": \"\",\n        \"Microsoft.AspNet.Mvc.Razor\": \"\",\n        \"Microsoft.AspNet.Razor\": \"4.0.0-alpha4-10198\",\n        \"Microsoft.Framework.DependencyInjection\": \"1.0.0-alpha4-10241\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-alpha4-10500\"\n    },\n    \"commands\": {\n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\",\n        \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n    },\n    \"frameworks\": {\n        \"net45\": {},\n        \"k10\": {}\n    }\n}\n\nI'm I missing something here?\n. @davidfowl Ok, I see but I still get the same result using these dependencies. This is the complete error page I get and below is the VS errors.\n\n. @davidfowl Everything looks fine in the reference list. I'm running 1.0.0-alpha3 and I upgraded using kvm upgrade yesterday.\n\n. @davidfowl kvm install latest just installs alpha3, how can I get the latest KRE?\n.  @davidfowl No particular reason, I was using alpha2 when I reported this issue so I thought that the latest version was the way to go. I tried with those dependencies but it seems that Visual Studio still uses alpha4 packages?\n\n. @davidfowl This was a hard nut to crack =) ... I have removed the aspnetvnext feed, removed all dependencies, saved, added them again but still I get alpha4 references? Are there some kind of cache or something?\n. @davidfowl I solved it, the first problem was that you wrote http with three t:s, and I just did cmd + c, cmd + v =) ... It didn't work anyways so I just copied the feed url from myget and the correct one is https://www.myget.org/F/aspnetmaster/ and now it works and the ScaffoldColumnAttribute seems to work nice in alpha3.\nThanks a lot for your help, cheers!\n. @kirthik I can not reproduce this issue using beta1 so it seems to be fixed.\n. @dougbu Ok, thanks!\n. I guess it's the same problem if I have an html form in my viewcomponent and need to handle the posted data, a catch all attribute route on an action is the only way to handle the form post? @yishaigalatzer \n. @dougbu I have updated the issue with some more details.\nIt does not work with [FromRoute] either.\n. @rynowak If I create an instance of Foo and set the property value on that instance it binds the object correctly in my Controller so yes, it solves the problem.\nvar currentPage = await session.LoadAsync<dynamic>(\"pages/1\");\ncontext.RouteData.Values[\"bar\"] = new Foo { Heading = currentPage.Heading };\n. @rynowak Yeah sure, maybe I can fix it tonight.\n. @yishaigalatzer I use this pattern because the Type:s I'm loading is not known by my application, it is from another assembly, therefor the dynamic is exactly what I need and I don't see any other solution.\nHere is a super quick sample using a custom route where I load a dynamic object and it binds correctly in the HomeController. http://cl.ly/aHLx\n. Ok I see, the reason I'm using a custom route is because I have urls without the controller name and action. My urls are more SEO-friendly and look like http://example.com/lorem-ipsum/dolar/site/amet, and in my custom route I resolve the controller name and action based on the url. Well, that was a side track :)\n. Ok, a little background here. I'm developing a CMS system and the code sample is from the custom routing inside the CMS. As I said before I'm using URL:s that are more readable page-1/page-2/page-3 and so on, The custom route resolves page-1/page-2/page-3 to use i.e. SuperCoolController and page-1/page-2/ to SuperDuperCoolController.\nThis is a part of the CMS and a third party developer, developing a web site based on my CMS does not need to care about how a specific ContentType is routed because I handle that for them. \nSo the look up is located in the custom route and the model binding is handled by the default model binder so I don't see the problem? Where can I do a look up and say, for page-1/page-2/page-3 you should use the SuperCoolController if I'm not using a custom route? As far as I know this is exactly what routes should be used for?\n. @danroth27 Yes, I posted this sample two days ago. Here is the link to a quick sample with a custom route using dynamic that binds correctly. http://cl.ly/aHLx\nLet me know if I can help in any way.\n. @rynowak I see another behavior in MVC 6, maybe this is a RaveDB problem instead, because the loaded object does not return the actual type using the exact same version of RavenDB both in MVC 5 and 6. Can you understand whats going on here and why it's different?\n\nCreating my own IModelBinder is most certainly a good idea but I am satisfied with the functionality and how it works in MVC 5 and I can't seem to wrap my head around how the model binder would look to work with dynamically loaded objects? \n. This is an interesting topic for me and I would like to discuss this further but I don't want to pollute this thread. @yishaigalatzer showed some interest earlier so I'm hoping we can take this forward, with that said I think we can close this issue.\n. ",
    "alexsandro-xpt": "+1\n. @ElanHasson may grunt functionality could be part of Yeoman generator ( see https://github.com/ligershark/generator-aspnet ) integrate with VS grunt/gulp extension ( see http://visualstudiogallery.msdn.microsoft.com/dcbc5325-79ef-4b72-960e-0a51ee33a0ff )\n. ",
    "madskristensen": "'6. Remove quotation marks if not using XHTML\n. Agreed, this has to happen at compile time and not at runtime. It's costly to minify big HTML files\n. Yes, the latter in the ASP.NET vNext runtime compilation \n. VS14 will have full support for Grunt/Gulp built in\n. ",
    "ElanHasson": "Which compile time?  In VS or app startup?  I'd say the latter.\nMaybe this is better implemented as a IIS module (think dynamic content compression module) so it can be used by SPA apps that use things like AngularJS and Web Api. \nI'm all for the idea in concept, but I don't know if it belongs in ASP NET. \n. For all of those not following along @nikmd23 and I on Twitter, https://twitter.com/nikmd23/status/509791753420173312\nSummary: +1  :)\n. Does VS vNext have that grunt/gulp functionality built in ?\nOn Wed, Sep 10, 2014 at 5:25 PM, runxc1(Bret Ferrier) \nnotifications@github.com wrote:\n\nSo I for one would love to see this feature. As @nikmd23\nhttps://github.com/nikmd23 mentions grunt/gulp have a lot of great\nminifiers of html already as it is very common to minify static html for\nuse with angularjs and other .js libraries. I think that I would only want\nto see this used within Razor and would want to configure it for prod/dev\nso that I could develop against clean html if I wanted and in production\nuse the minified. I think this is a no brainer and can't see any reason why\nthis shouldn't be added as long as its opt in. I would assume that most\ndevelopers would opt in.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Mvc/issues/1110#issuecomment-55185525.\n. \n",
    "michaldudak": "The level of minification should be configurable. It may be safe to shorten attributes or collapse whitespace from between attributes in tags, but it's certainly not safe to remove empty attributes (as frameworks like Angular may use them) or collapse whitespace in the content (it may be significant due to white-space CSS property)\n. ",
    "callumelgrant": "The good thing about having vNext run on linux is that we can use things like Google's PageSpeed module for nginx and apache to achieve all of this - but not for IIS/self hosted without the use of nginx as a reverse proxy.\n. ",
    "kanchanm": "@chmontgomery: Do you still see this issue?\n. Please let us know if you still see this issue.\n. We already have Dispose in the Controller so that is a non-issue. We still need to address the POCO controller case though. Working on the fix that will work for the POCO case too.\n. Commit https://github.com/aspnet/Mvc/commit/45985056523d589cb8786020a4bc1ca8c3845d8d\n. @rynowak @yishaigalatzer - I have updated the fix to address the scenario where a controller has its own Dispose method overloads. I am now using typeInfo.GetRuntimeInterfaceMap along the lines that Ryan suggested but note that this does make the change more involved since I now need to pass typeinfo (I could avoid this by using methodInfo.ReflectedType but CLR team has removed this and doesn't plan to add this back). Let me know your thoughts about this change. \n. Done - commit\n. ",
    "johnciliberti": "Here is what is generated\n<select name=\"RememberMe\" class=\"list-box tri-state\" id=\"RememberMe\">\n          <option selected=\"selected\" value=\"\">Not Set</option>\n          <option value=\"true\">True</option>\n          <option value=\"false\">False</option>\n     </select>\nNot sure why we need to have class=\"list-box tri-state\" added to the select. \nIs this being used by unobtrusive validation or some other script?  If so why put it in a class attribute  and not in a data-* attribute?\nAre you assuming that the developer will add a style that takes advantage of the css class?\nShould developers add similar code to custom templates?\nIf you are you are using these class names for some magic behind the scenes you should add some comments to the code that explains why / how it is used. \n. The downside is that it is extra markup sent to the Browser that the developer does not want or expect. You also have no way of suppressing it. You can only add to it. For example you have code in your view such as \n@Html.EditorFor(m=> m.someString, new {htmlAttributes = new{ @class = \"form-control\"})\nYou are expecting to get class=\"form-control\" but instead get not only the class you wanted, but the additional classes that are included with the default template.\nIf the developer did not have a CSS style  defined that matches tri-state or one of the other classes from the default template, only negative side effect would be a few extra bytes being sent down the wire. On the other hand if a CSS style is added, you could have a potential visual side effect that may leave a developer scratching his head.\nWith this in mind, if the CSS classes added in the default templates have no functional purpose, then why include them?\n. Ok, this is my last comment on this topic.\nI am all for the framework merging attributes as long as they serve a functional purpose. \nOne key feature of MVC is clean readable HTML. I think adding extra CSS classes for some forgotten historical reason is  something that the team should seriously consider dropping.\nHere is another way to look at this. If you are running resharper or similar tool and add a CSS class to an HTML element and do not have a corresponding style definition, a warning will be generated for that line of code.\n. ",
    "weitzhandler": "The generated class for checkbox check-box, is also not compatible with bootstrap, and should be changed to checkbox.\nIs there a way to identify what version of MVC is running? Or what version of bootstrap is attached?\nI'd say DefaultEditorTemplates should be pluggable or at least configurable anyway (as a filter config or anything similar on startup).\nI do like the idea of MVC generating bootstrap classes instead of me adding them manually, but there should be a way to control it.\nActually seeing this, perhaps the overriding of the templates should be made easier.\nPerhaps when generating a view, we should be able to select class in the BCL (i.e. System.Boolean) as its model, and the razor engine should generate the default content as a starting point.\n. @dougbu \nYes that's exactly what I meant.\n. I'd also recommend adding those templates for ushort and all the other CLR primitive numeric types.\n. @Eilon and @dougbu  here's your friend, I'd be happy to participate and do it myself, if that's an option.\nAnd BTW, I don't see any reason not to have decimal as an <input type=\"number\" /> as well.\n. As you can see @dougbu, I've already deleted the 2nd half of your question, I missed what you wrote about using the TextBoxFor in this post.\nI'm sure you're responding by email, so you didn't get the updated version...\nThanks!\n. ",
    "blowdart": "Time to add a needs security review label too :) Please include Levi and I in any discussion around this.\n. nit: \nchar already has an IsLetter(). So you may want to make your function clearer as IsASCIILetter\n. @dougbu Interesting, should work :)\n. @yishaigalatzer is spot on. We're stripping out Except or Exclude from everything we can because of its inherent security badness. We won't be adding it anywhere.\nNote that the [Authorize] story is still under active development, and will, if I have my way, move to a resource based model with a central authorization service. So you'd be free to implement what you like underneath, without having to create a new attribute. With that approach you'll have enough rope to shoot yourself in the foot should you so desire. \n. SetCookie isn't a great name, as, if the cookie already exists it's not going to set anything.\nI'm a bit concerned there's suddenly a new step to writing a CSRF cookie (but at least the submit fails, rather than sneaking through). Could flush not ignore the CSRF cookie? We know which one it is.\n. Throwing an exception even earlier is good :)\n. Back compat is a huge issue here. We still need to support [Authorize groups=\"\" and claims=]\nI have no problem implementing it as an auto policy. Would it be removable?\nAlso what happens if you ask for a policy that doesn't exist? Exception, or not authorized?\n. I like false. If we have the logger wired up we could log proper information before hand.\n. @yishaigalatzer No, if a policy isn't found we fail securely, not thrown an exception. Maybe have it as an option though?\n. Ugh I kinda hate that because are comparisons supposed to be case sensitive or not? It's yucky.\n[Authorize(ClaimTypes.Role, \"Administrator\")]\nHappy for it not to appear in first draft though, and we can bug Brock and Dominick for opinions as we go.\n. That works. Although I'd have hoped the policy did the checks itself.\n. Kind of a shame we couldn't just have a general list name value pair parameter, so people could hang what they want after policy and we'd put it in the context, so I could have\n[Authorize(\"SuperSecure\", claim=admin, banned=yishai,eilon, supercool=taylor swift]\n. We need Roles for backcompat, so that has to appear.\n. Could we hide Roles and Claims from intellisense as a subtle nudge to people, and a way to route folks to the newer, better way once we get to \"Write your own policy functions\"\n. ?It's a shame, as roles and claims are really a stop gap for back compat. We should eventually kill them.\n. ?And is this a \"We're not as a matter of principal\" or a \"We can't\" or \"Not in this case\"?\n. Naming is hard. But yea, AuthorizeFilter seems better.\n. put them on the controller and then on the method? Are they method only?\n. Darn. If it were method only I'd say they were additive. Now, I don't know. Heh.\n. Maybe make them additive and remove the ability to specify a list? Just have AuthenticationType not Types?\n. We don't loose anything really, because you'd just apply multiple attributes on a method to have the same effect.\n. Oh I see! We couldn't do \"This is the first authtype attribute I've seen, so dump all and then add the one requested\", then \"Hey, we've had an authtype, I'm another, add\"?\n. I honestly don't know - building MVC is the first one that failed for me, hence you getting it. HttpAbstrations, Security, Identity all build just fine from the same directory structure.\n. In the dictionary case is the key string, or can it be any of the types you support?\n. Good :)\n. Regardless of what authorization you select authentication is always going to happen first, because you can't authorize without authenticating.\nIf have allow anonymous on a controller or method and an optional identity is sent I'd want that identity created regardless so I could, for example, show or hide parts of my UI.\n. Putting on my official security hat :lock: \nExclude becomes very problematic in multi-developer environments as people add properties to models, without updating the exclude list. After discussion we decided there was no way to guard against this, and we should drop support to improve security. White lists are simply safer than blacklists.\nReally view models are the way to go, binding to, for example, your EF model classes is fraught with over binding danger and makes me sad.\n. You can already authorize by roles. That should be sufficient for your needs, groups would be limited to identity administration. If it's not please file an issue in the security repo, where authorization lives.\n. It's @HaoK's issue, ask him. I don't know how different the logic is.\n. By default AllowAnonymous halts all authz at the point it's encountered. \nNeeds investigation to see how it currently behaves in previous versions. If this is how it works in previous versions I'd be loathe to change it, it'd be a major breaking change in behaviour that may lead things to be inadvertently exposed if people are depending on the current way it works.\ncc @HaoK \n. Adding @Eilon for comments\n. :balloon: :lock: :balloon: \nSecurity party! (We really ought to do this)\n. We'd have to be very context aware, probably too much to be usable. There's no simple way to intercept every HTTP request from a page without a lot of script, and what would work for the current framework de jour probably wouldn't work of the next one everyone adopts a week later.\n. ",
    "Encosia": "Thanks for addressing the back compat scenario.\nTo make sure I understand, will combining separate methods on the same route continue working  too? Rough example:\n```\n[Route(\"Products/{ProductId:int}\")]\n[HttpGet]\npublic ActionResult Index(int ProductId) {\n  // Get Product by Id.\n}\n[Route(\"Products/{ProductId:int}\")]\n[HttpPost]\npublic ActionResult Index(int ProductId, [FromBody]Product Product) {\n  // Update Product based on POST.\n}\n```\n. Yes. That's perfect. Just wanted to be sure I understood.\n. ",
    "bmsullivan": "This was caused by having an outdated kvm/kre. Disregard.\n. ",
    "RanjiniM": "@am11, thanks for reporting this issue and opening this bug on NuGet repository as well. Yes, this sounds like a bug in NuGet and we will triage it. The warning in packages.config is a harmless one so you could ignore it and not add the schema info that blocks your package restore. Updates to this issue can be seen on https://nuget.codeplex.com/workitem/4329. Thanks!\n. ",
    "BernhardGlueck": "This only seems to happen when the client sends no compatible accept headers ( as in the case of requesting an API endpoint via the browser ) \n. ",
    "JeremySkinner": "Thanks...any initial thoughts on what the revised API might look like?\n. This looks great - thanks for the detailed reply. A few questions...\n\nThere is also the capability for model-binding/formatters to add validation errors for missing values, which we will keep because once model-binding/de-serialization is over we can't tell the difference between an explicit-null and a value that wasn't provided.\n\nWill it be possible to globally take control of this process if the value wasn't provided, without having to implement a custom binder/formatter? This was probably the biggest pain when dealing with MVC integration in the past. \n\nIObjectModelValidator is a replaceable service. If you swap it out, you're responsible for all validation other than what comes from the model-binders/formatters. If it's interesting to you we could factor this out into an abstract-visitor + implementation.\n\nI'll try and have a play with this to see whether being a visitor would make things easier - I'll let you know.\n\nI don't like that client validation rules have to implement IModelValidator\n\nAgreed. Will the mechanism for registering new client-side rules be similar as with MVC5 and earlier? \nOnce I've had a play with it, I'll get back to you if there's anything else that I think would be useful. Thanks again for putting the work into this.\n. > Any example of what you'd want to do? Current design is that we look for an IModelValidator where IModelValidator.IsRequired == true and then run it.... \nI think this is fine, but what will happen if either you can't find a IsRequired validator, or the required validator returns valid? I'm particularly thinking of the following scenario:\n- Data type is non-nullable value-type\n- No value was specified\n- No validator could be found (or it says valid)\nWith MVC5 and previous, the binder would then generate the generic \"A value is required\" message, which couldn't be overriden. I'd like it if the IModelValidator to be the one making the decision about whether this should be allowed or not. \nThis is probably one of the most frequent questions I get asked with FluentValidation - where someone wants a non-nullable value type to simply keep its default value if no value was specified (rather than being an error condition). Whilst FluentValidation itself can support this, you can't do this when using the MVC integration points because of the binder.\n\nMaybe we'll record a breadcrumb in modelstate that validators can look for later.\n\nThis sounds interesting...how would you imagine this would work? Just a placeholder is added to the modelstate that the validator could fill in later? What would happen if a validator didn't fill it in?\n\nAdding new rules should be as simple as some combination of... \n\nSounds good.\n. >  The problem is distinguishing between a null that was provided on the wire and a lack of data. Do you feel like this distinction is important to your users?\nYes, I think the distinction is important, but it should be up to the user to decide how they want to handle it. \n\nIn the new system you can change this in model-metadata. By default a non-nullable value type is considered required, but you can configure it.\n\nGreat, that sounds perfect. \n. I'm not using it :) . ",
    "windhandel": "This exception being thrown in the browser comes at a 10% CPU cost and Visual Studio seems to be running simultaneously at 30%, so this error costs between 40 and 60% of the CPU on high powered machines.  What's the ETA for this fix or can you stop it from happening over and over on the client?\nIt appears to be caught in some sort of loop.\n. ",
    "atrauzzi": "Just researching support for POCO controllers.  Will this enhancement mean I wouldn't have to use the suffix \"Controller\" on my controllers?\n. I'm interested in the technical reasoning for requiring the controller to be tagged somehow for the runtime.  Mainly because I suspect there might be a much more deliberate way to go about this (or have both options if some prefer convention).\nWhat would be nice is if the POCO controller didn't require annotations.  I'm coming from a PHP background, specifically Laravel.  In that system, they allow for you to author routes as follows:\n$router->get(\"/my/resource/{id}\", 'My\\Namespace\\Controller\\Resource@show');\nOut of all the routing conventions, this shorthand (something I think you guys are already very close to matching), has been very nice to use.  The simplicity is in the DSL.  It allows the framework authors to not have to rely on tagging/reflection mechanisms to route.  The framework also reflects on both the class and the action method to see if dependencies need to be injected.\nIt's worth repeating that the framework also supports convention based routing, so if desired, the developer can write less specific routes.  So, in MVC 6, my hope would be to see something like the following:\n// Instantiates the class \"Resource\" if non-static.  Otherwise, static-calls.\nrouter.map(\"GET#/my/resource/{id}\", \"My.Namespace.Controller.Resource@Show\");\nYou'll note the distinction about static controllers which is a concept similar to Scala's object type being used as a controller.  In those scenarios, you can offer to perform setter injection.\nI've also taken a slight liberty with where the HTTP action is being specified.  I'm not especially particular on that, and it could be the name called instead.\n. So that's saying it's required out of wanting to offer the convenience.  I was asking if there was a technical limitation mandating that the tagging had to happen.  But judging by your answer, there isn't - which is good! \nRight now writing routes in ASP.NET MVC 5/6 isn't the prettiest.\nThis more explicit scenario allows for a much cleaner routing config.  I can express 90% of routes, whether convention or custom using a single line instead of having to pollute wherever I define my routes with multiple lines and anonymous objects.\n. If you're doing the right thing, I think you'll find that over time, the opposite is true.  To date, ASP.NET MVC users have only had one option - so you might be right for existing users today - but even that changes when a better option becomes available.\nDon't forget the attrition of documentation too.  If your only documented method is one way, the community takes it as prescriptive and will not question.  That could even be in spite of whether it's a best practice or the most convenient out of two options.  All it proves is that that most people are - rightfully - there to get the job done and won't be bothered to dig into internals because they expect you to lead them to safety.\nThat means that if my suggestions here are implemented they must be clearly documented & featured.  Otherwise you'd definitely be right because nobody would know about the more user-friendly syntax! ;)\nWhich means, while I would agree that there is a preference at any given moment, we have to measure this outside of the ASP.NET MVC microcosm.  Here's a tour of the routing conventions from other frameworks:\n- Express (nodejs): http://expressjs.com/api.html\n- Rails: http://guides.rubyonrails.org/routing.html\n- PlayFramework (Scala): https://www.playframework.com/documentation/2.0/ScalaRouting\n- Django (Python): https://docs.djangoproject.com/en/1.7/topics/http/urls/#example\n- Laravel (PHP): http://laravel.com/docs/4.2/routing\n(I should note, I continuously reference Laravel because it's a very well designed framework.  As of today, I consider its routing the gold standard.)\nTaking all these examples into account, ASP.NET MVC is clearly an outlier and route mapping is one area I think you can have a really positive impact.\n. Nice as it may seem, that approach sounds like it could get pretty out of hand (see my notes on nancy below).  Routing is something you want to try and keep as simple as possible, and encourage people to move on.\nFortunately, it seems like MVCs routing system is already prepared for my suggestions - just change the touchpoints to have signatures that don't force people to write a lot of ugly boilerplate.  I'm not suggesting the resultant functionality be modified.  All the current mechanisms can be leveraged and you can have an overload on the route builder that still takes an anonymous object of extended options when absolutely essential.\nI'm familiar with Nancy and didn't reference it for a few reasons.  Overall for routing, I don't think it's user friendly.  It also imposes some compromises that don't make sense - the most ugly of which is that it requires that all dependencies be resolved up front when routes are defined (ouch!).\n(I'm happy to see any project gain a following, but I wouldn't let the fact that Nancy is on .NET put it ahead of what developers are doing in other languages. Better progress has been made elsewhere.)\n. Yeah - the syntax for options is not nice at all.  But that doesn't mean specifying controllers explicitly is a bad practice.  It means MVC misjudged the importance of getting this right.\nCatch-all mappings like routes.AddRoute(\"{controller=Home}/{action=Index}/{id?}\") -- are a bit of an antiquated practice nowadays.  You'll even see that some frameworks are eliminating this convention all together: \n- https://github.com/laravel/laravel/blob/develop/app/Http/routes.php\n- https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/config/routes.rb\nIn fact, the first thing I do in a framework project is remove any generic class-name-maps-to-route defaults.  They simply aren't helpful.\nWhat if I want two controllers named the same?  I obviously namespace the classes at that point.  But how does the router differentiate when all the action methods have been flattened into one namespace?  Now you're having to kludge your app's external signature to satisfy a hard-baked convention.\nAttribute mapping for the paths of controllers is also an issue.  Especially if your controllers are supplied by external libraries (and the mapping is left to you).  It comes up when you want to add a prefix to groups of controllers http://myapi.com/v1/items or http://myapi.com/v2/items.  The controller should only be dealing with producing results, not mounting itself to the router.\nThere is really no one-shot solution for routing that you can call a \"convention\".  It's better to have a minimal and flexible syntax instead of creating a rigid system and then having to code in confusing ways for the implementer to pre-empt it.\nAt first read, #1877 seems to reflect what I'm suggesting so far.  But these two issues are definitely connected.\n. Would love to see this make it in and be nicely documented!\n. I agree, [Inject] sounds a lot better than [FromServices].  Even though most of the time what you're going to be injecting will be a service, the container shouldn't make assumptions about what it's containing and what their intended uses are.\n. I'm not sure what the prevaling philosophy is 'round these parts, but I thought models depending on services is an antipattern.\nMoreover, am I understanding correctly in thinking that [FromBody] and [FromQuery] are orthogonal to dependency injection?  Between all three, [FromServices] seems like the odd-one-out and shouldn't try to be a part of this naming convention.\n. It's probably okay to restrict the availability of property & method injection to certain scenarios to help guide people.  What doesn't make sense is why the system is being designed to discriminate the various types of things it will inject?\nIdeally it should just be something that the container can resolve.  Whether it's a \"Service\", a \"Context\" or anything else - really that's immaterial to the act of injecting.\nPossible counter-proposal:\n- @inject remains the same.\n- @inject supports injecting anything the container can resolve - I think it's unrealistic to try and canonicalize certain types as \"Services\".\n- [Inject] is added which can be used at any level, but perhaps only during certain operations\n- [Activate], [FromServices], [FromService] removed.\n- Contexts are scope-bound to the container and are injected just like everything else.\nIdeally the system should be agnostic so that people aren't cornered and so that the API is easier to intuit just by reading the code.\n``` C#\npublic class MyController {\n [Inject]\n public ActionContext Context { get; set; }\n\n public ActionResult createMyStuff([Inject] MyStuffService stuffService) {\n }\n\n}\n```\n. This seems like a very manual solution, is there no plan to offer a more convenient facility for these kinds of higher level routing configurations?\nI still really think there would be merit in studying what Laravel does, especially with routing: http://laravel.com/docs/5.0/routing#route-groups\nIt's quite brilliant and has a great API (no custom implementations and wiring).\n. I actually had a similar thought today.  I'll see about starting to put together some notes on what I'm encountering as I muck around starting new projets in ASP.NET 5.  I definitely catch myself thinking about how certain things would map out in a .NET space (and sometimes if they'd even apply).\n. @davidfowl - I've put together a blog post based on a google doc (link included in post) which hopefully starts to cover in better detail some of the things spoken about here: http://atrauzzi.blogspot.ca/2015/05/routing-dispatch-laravel-5-vs-aspnet.html\nI don't necessarily know if it constitutes an end-to-end definition, but I'm willing to make improvements or offer clarficiations based on your suggestions/questions.\n. @rynowak - Thanks!  Hopefully the examples from Laravel I zeroed in on are enough to convey how nice it is to work with.\nIf you (or anyone else reading) have questions or want a point clarified/improved, please don't hesitate to ask.\n. Awesome, is there somewhere I can see an example of [FromService] being used?  Also, out of curiosity, what's the reasoning behind the name \"FromService\" as opposed to something like \"MethodInject\" or even just \"Inject\"?\n. https://github.com/aspnet/Mvc/blob/dev/test/WebSites/ModelBindingWebSite/Controllers/FromServices_CalculatorController.cs#L15\nIt might be nicer to have a more idiomatic name - something a bit better aligned with the purpose of the feature.  I'm sure you're seeing that over at #2151.  With the name FromService(s), without this discussion, I might be lead to imply there's more than just dependency injection going on.  And to be honest, I might not even infer that the phrase implies dependency injection either! ;)\n. Done! https://github.com/aspnet/Tooling/issues/74\n. ",
    "muratg": "cc: @yishaigalatzer, @rynowak \n. :shipit:\n. :shipit:\n. ",
    "BrennanConroy": "It doesn't matter what the view is. You can just have an empty one.\n. Change the kk as IEnumerable<Person> to kk.Select(e => e)\n. Could you please explain your comment about Anonymous objects? The scenario I am pointing out doesn't involve anonymous objects that I can see and it is an issue of something that works in Desktop CLR but not Core CLR\n. Should we still do this since Pranav changed the tests to use new LoggerFactory()\n. ",
    "kowsheek": "Is there an update on how this is being approached (not just for areas)?\nThere are several things that I didn't want in my wwwroot folder (such as TypeScript and SCSS files). For reasons such as being compiled or processed via grunt. Also, I didn't want lib to be committed to the repo but rather installed via bower. While that's something I added to my gruntfile, other templates/generators like angular-fullstack have these features in its vanilla installation. \nAlso, depending on the library, custom copy methods are needed (since bower support for that sucks). \njavascript\n      copy: {\n          scripts: {\n              expand: true,\n              cwd: \"Scripts\",\n              src: [\"**/*.js\"],\n              dest: \"wwwroot/scripts/\"\n          },\n          ionrangeslider: {\n              expand: true,\n              cwd: \"bower_components/ionrangeslider\",\n              src: [\"img/sprite-skin-flat.png\"],\n              dest: \"wwwroot/lib/\"\n          }\n      }\n. ",
    "halter73": "@rynowak GetRequiredService is an extension method which throws the exact same exception GetService used to when a service could not be found in the cases where GetService now returns null.\n\"Nice\" might be the wrong word to describe the error message, but it does indicate which service was not registered. Like before, the message is \"TODO: No service for type '{0}' has been registered.\" The \"TODO\" indicates that we should go back and rework the exception text, put it in a resource file (the DependencyInjection project currently doesn't have one), choose an exception type or create our own, etc...\n. @pranavkm There are far more calls to GetService<T> than GetService. In these cases, the services being resolved should have been registered by AddMvc.\nIf AddMvc is not called, the IServiceProvider should not contain the MvcMarkerService, and UseMvc should throw with a nice error message. @rynowak and I decided it was not worth going through the extra effort of guarding against users calling AddMvc but then later removing services without replacing them.\n. I finished up replacing all the calls to GetService<T> with GetRequiredService<T>. Are we good to go?\n. This is all in an NET45 ifdef already.\n. I'm now passing _serviceProvider into Populate. This overload should become available once https://github.com/aspnet/DependencyInjection/pull/36 is merged.\n. It's pretty inexpensive to set IHttpMaxRequestBodySizeFeature.MaxRequestBodySize on both of our servers. Wouldn't it be simpler to just greedily set the property instead of checking IsClosestRequestSizePolicy each time?\nThis is assuming that the \"closest\" filter has its OnResourceExecuting method called last which I'm unsure about.. Nit: there is no specified limit in this case.. ",
    "hopp": "There was a good comment on stackoverflow, that probably I have some other nuget packages installed, which depends on mvc 5.1.1. I have to check it out.\n. ",
    "Kukkimonsuta": "Thank you for quick and extensive reply. You quite surprised me with IApplicationModelConvention as it's so much more than I expected. I tried to play with it a little bit and all the api I need is there, so this issue is moot now.\nOn the side note, I must say I'm really impressed with the work you guys are doing with MVC 6 and vNext in general. So thank you and keep up the great work :+1: \n. ",
    "glennblock": "@danroth27 why would you support this when it is clearly wrong? The content-type header has one purpose, describe the media type of the body that is sent. This is invalid for GET requests as there is no body.\n. The server can do whatever negotiation it wants. If a client sends a\npayload and the server wants to default the response based on the\ncontent-type that's fine. In this case we're talking about content-type on\nGET, when GET should have no body. I am not suggesting the server should\nreturn a 400 because one added a content-type header. A client can send\nwhatever it wants. My concern is that thought they can do it, it is not\nsomething servers in general are expect to know about as it does not align\nwith the spec. As such I wouldn't expect the server to by default have any\nmagic behavior related to this.\nA different question I'd ask is do you know that folks actually set the\ncontent-type header on GET i.e. you see this as common?\nOn Wed, Nov 5, 2014 at 7:32 AM, danroth27 notifications@github.com wrote:\n\nIn the absence of an Accept header we have a very simple default heuristic\nthat we apply consistently. If the request does not have an Accept header\nthen we try to format the response using the same content type as the\nrequest. If you want to instead return a 400 response when a GET request\ncontains a Content-Type header (or even worse it actually contains a body!)\nit is very easy to customize the system to do so.\nWe think it's better to keep our default behavior simple, pragmatic and\nflexible instead of trying to enforce every little nuance of the HTTP spec.\nWe have found that being too heavy handed when it comes to HTTP compliance\noften causes more pain than good. As the server in general has complete\nfreedom to format the response however it wants (Accept header or no Accept\nheader) we see no reason to enforce a particular behavior in this case.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Mvc/issues/1472#issuecomment-61765598.\n. Yes +1!\n. JSON has been the default since Web API 1.0. The issue is the XML formatter was also added. To have JSON really be defaulted for all browsers, XML\nneeds to be removed so that if XML and JSON are sent in the accept JSON will always get selected no matter what.\n. \n",
    "jchannon": "This seems very odd - you dont want users to understand what Content-Type means vs Accept?\n. ",
    "barrytang": "Opened a VS bug to track.\n. ",
    "anpete": "@yishaigalatzer ViewBag is the first thing I hit: \nSystem.InvalidOperationException : ViewData value must not be null.\nLooks like we scaffold lots of ViewBag code in our templates...\n. Tried to move the view data into the action result (via Controller.View(object)) but still fails because it internally relies on ViewData.\n. ",
    "Tragetaschen": "So if I understand things correctly it boils down to:\n- The fieldType.Name is something like Int32 (so a type=\"number\" from the default template is rendered)\n- The metadata.IsComplexType is true at the same time\nThis does not sound right\u2026\n@scenario\nI have a couple of settings in my application. Only privately, they are strongly typed and forward their current values into the business logic. (Another aspect is automatic persistency of the settings). This design has two main reasons at the moment:\n1) I can use model binding. Within a POST request, I create a local model binding context per setting with the user provided value, then try to find a matching ModelBinder (from the IModelBinderProvider) and get an object of the correct type for the setting to pass in. This has the added benefit of being easily extended for complex types should the need arise. The trick here is that the binding context is constructed for the setting's strong type which the settings expose.\n2) I can use a non-generic, object-based interface which works great with dependency injection. I especially hope to use Ninject's \"Named\" feature here to pass specific settings into my classes.\nSo that's how the object for rendering the editor appeared and initially the results for int, string, DateTime, and complex types were very promising. Only an enum currently sticks out.\nFor my scenario, I could also live with providing the \"correct\" metadata type to an overload of EditorFor, but I find the current implementation counter intuitive.\n. Adding a type specific type template certainly works, and this could forward to more general templates.\nAs far as I can see, though, the only real difference between object and typed members is for Enum types and then, the experience (nothing rendered) is quite bad. I would suggest doing at least something. Maybe a HTML comment for objects without members.\n. See for example here\n. Here is a dark-magic-workaround:\n- Instead of @addtaghelper \"MyWebProjectAssembly\", add @addtaghelper \"MyWebProjectAssembly!preprocess\"\n- Drop a copy of the TagHelper class into Compiler/Preprocess (compiler/preprocess in beta1)\n- Use the RazorPreCompileModule as always\nThat way, the Preprocess-Razor has the !preprocess-Assembly to find and reflect on the metadata of the TagHelper. It can then construct a syntax tree, and this syntax tree is compiled together with the remaining code using and binding against the real TagHelper.\nIt's important, that the file is a copy, since KRuntime cannot use the same file for both preprocess and normal compilation (one excludes the others).\nSince the copy in the !preprocess-Assembly is only there for reflection, there is no need for any implementation. You can remove any Process or ProcessAsync implementations and strip the type to its metadata (properties, attributes, base class, etc.) and it still works.\n. It's probably easier to just drill into all the INamedTypeSymbols from context.CSharpCompilation.GlobalNamespace with GetTypeMembers and GetNamespaceMembers (maybe, there is a visitor, I haven't checked). This already traverses all referenced assemblies as well as the available parts from the current assembly, so there is no need to load assemblies with the ILibraryManager.\nHmm\u2026 You wouldn't even need @addtaghelper. Is there a reason to not use precompilation?\n. To summarize from JabbR:\nRight now, Model Binding assumes the outer objects are already constructed when doing the inner ones. This doesn't work with immutable types.\n. My business logic is based on immutable objects. To create these objects from user input now, I have to duplicate them to a public-set, non-immutable version for MVC and on the server construct my immutable object within the request handling. So typically, this middle-man object just lives for about 5 statements within the code.\nWith the proposed model binding, I can get the corret object immediately.\n. This is really annoying.\nI've got a preprocess compile module that builds a large amount of code and I serialize this code into a *.cs for easier (visual) debugging. This file is in .gitignore and in project.json's exclude.\nThe net effect now is, that I can do exactly one (1) request during debugging before the session just stops due to this file changing. Not even the static content files reach the browser.\nWhen I stop writing to that file, debugging again works.\n. Sure. Currently I'm doing something like that:\n```\nvar editorContext = new ViewContext(viewContext, viewContext.View, settingViewDataDictionary, viewContext.Writer);\nvar htmlHelper = new HtmlHelper(htmlGenerator, viewEngine, metadataProvider);\nhtmlHelper.Contextualize(editorContext);\nvar setting = Settings.Single(x => x.Name == Name);\nhtmlHelper.ViewData.Model = setting;\nvar label = htmlHelper.LabelFor(x => x.Value, Name).ToString();\nvar input = htmlHelper.EditorFor(x => x.Value, Name).ToString();\nlabel = label.Replace(\"for=\\\"Value\", $\"for=\\\"{setting.Name}\");\ninput = input.Replace(\"id=\\\"Value\", $\"id=\\\"{setting.Name}\");\ninput = input.Replace(\"name=\\\"Value\", $\"name=\\\"{setting.Name}\");\n```\nI have my basic setting objects\u2014basically a name, a value and most importantly infrastructure to apply them at the right place. I create Label and Editor for those settings, which results in id=\"Value\" etc. attributes that I replace by the setting's name. These tags are then rendered through a \"Setting.cshtml\" template. In a View, I just enter <setting name=\"Foo\"></setting> and get the correct input element for each setting.\nThe main advantage here is that a Designer can choose to provide\n- An EditorTemplate for the setting's data type like Int32.cshtml\n- An EditorTemplate for the setting's name like Foo.cshtml\nand these templates themselves can recurse further using the existing infrastructure.\nThe original View containing the <setting/> is not model-typed ISetting and that's why creating the HtmlHelper<ISetting> in DI fails.\n. One of these days I'll wrap my head around the (likely important) difference between activation and dependency injection.\nNontheless: I'm now using a trampoline partial view that is typed and contains the EditorFor code. Now I only have to use the activated ViewDataDictionary.\nThanks!\n. And now I have discovered IHmtlHelper.PartialAsync(string, object) and my TagHelper basically lost all its code.\nI don't expect this to be a valuable feature anymore.\n. :+1:\nJust the other day I wrote an incomplete, buggy version of this\n. A simple content action (return \"Hello\";) shows 4 ms / 28 ms on Windows / Linux.\nIf I remove _ViewStart.cshtml, I get 600ms / 15,000ms for the first page view and 7ms / 43ms for subsequent requests. I do have the RazorPreCompileModule active in the project.\n. Without precompilation, without _ViewStart.cshtml I get 6,000ms / 15,000ms for the first request and fast as above for subsequent requests.\nSo I can say:\n- The precompilation done on Windows during bundle is not picked up on Linux.\n- An existing _ViewStart.cshtml file seems to invalidate the Razor compilation result on Linux for every request.\n. The numbers are the same for a blank ASP.NET 5 Preview Starter Web with added Kestrel\n. I've found two issues and from what I can see, both are already fixed on dev (albeit accidentally :-) ):\nFirst, _ViewStart.cshtml files in beta3 are associated with a page's cache entry using the normalized path instead of the native one, so enumerating the possible locations fails and the cache property is null everywhere resulting in compilation for each page request. There might be a similar issue on current dev, but I haven't tried any of this.\nSecond, during pre-compilation in beta3, each file's hash is not stored in the generated cache entries and doesn't land in the generated code. During the introduction of IMemoryCache, this has been fixed. The reason I could see this was because the Windows machine was running on CET and the Linux machine on UTC, so the timestamps didn't match when evaluating the cache entries.\nWith the two changes, my Linux board ships the first page after 6,000ms (using the precompiled View) and every subsequent request within 120ms.\n. It's a known issue on Mono: http://www.mono-project.com/docs/about-mono/releases/3.12.0/\n. Makes sense. It looks like view components are  working like tag helpers right now, right?\nIt might be a different issue, but I'm trying to get an IApiDescriptionGroupCollectionProvider into my Controller. In my ViewComponent, I can still use [Activate] and it works like before. In the controller, though, the situation is:\n- Constructor parameter: works\n- [Activate]: Cannot activate exception with stack trace\n- [FromServices]: property remains null\n. Ah, that's it. I still had this specified as a private property. That worked with [Activate] and still works ViewComponents and TagHelpers.\n. I just have more motivating scenarios for precompiled views:\n2.\nd. Embedded devices with frequent (compared to an internet server) restarts\ne. .NET Native / AOT code generation\n. #1786\n. Mono version is 4.0.1 with a patch to fix SignalR's IL_0057 bug.\nYou are right, I had on my mind that the returned null would have the runtime type object and that the downcast to Enum then fails.\nThe stack trace is literally Razor => SettingTagHelper.Process => GetCurrentValues. I'll try to reproduce this with a full stack trace (with source file line numbers) in dev when I'm home and find the time. There, I can also easily look into Mono itself.\n. 8188f59\n. ",
    "Bartmax": "why do you have name and names ? I suggest to keep only with names so one can change from one to multiple only modifying the content.\nAlso, can this envitorment tag would be anything ? so if we have a model like :\npublic bool IsValid {get;set;}\npublic string Name {get;set;}\none my author\n```\n .. \nor\n ... \n```\nand for the enviroment example:\n<condition environment=\"Production, Staging\">...</condition>\nor maybe better <if environment=\"Production, Staging\"> ... </if>\n. is there a way to implement fallback environment when the enviroment does not match any of listed names ? \nis there a way to implement a NOT condition ? like <environment names=\"!Staging\"> \nI'm afraid we may see lots of duplicated code... or lots of enviroment clauses. Is the view really the responsable to use one or another ?\n. Just in case someone face a problem, using (copy/pasting) the sample code, the asp-fallback-test should have jQuery with capital Q.\n. @nikmd23 I'm sure this is not the best solution but just you said you would like to see something like this implemented somehow, this works for me at least as a start: https://github.com/Bartmax/HtmlMinifier\n. Oh this is music to my ears! I wanted this to be resolve for a few years now. I'm happy that 6.0 will solve this. Still I see a little problem on fixing this. All versions of MVC behave like this, and I'm pretty sure most of us are already used to this. What about backcompatibility, how is going to be handled ? I don't think it could have a great impact but I can think of some scenarios. Using it 'wrong' and having [Required] on value types; using entities on your views so [Required] is used for EF and now this will be propagated. Not sure if anything else. I guess MVC5 or less should not fix this..\n. I will list what I think are the biggest problems that I found for MVC6 in order starting with the worst one: \n-  useref don't work because of ~.\n-  There's no clear/clean way to use processed .cshtml build files. (see below)\n- wiredep and inject need customization to generate ~ in paths.\n- wwwroot cannot access bower_components unless you save them inside wwwroot. (see below)\nMore info on build .cshtml files:\nAltering _Layout.cshtml (or any .cshtml file) with useref needs a new file output (right now required to be inside View folder) with a coditional on which one to choose. ViewStart example :\nif (!HttpContext.Current.IsDebuggingEnabled)\n    {\n        Layout = \"~/Views/Shared/build/_Layout.cshtml\";\n    }\n    else\n    {\n        Layout = \"~/Views/Shared/_Layout.cshtml\";\n    }\nThis can get really complicated if you have multiple layout called within views, because you will need that logic for all views with it's Layout variable defined.\nbower_components folder not accessible while debugging:\nYou can save them inside wwwroot or make your packages available inside wwwroot somehow (copy task) referencing the shadow copy while developing, this increase workflow complexity and those files end up being published unless you handle smart clean scenarios (increasing workflow complexity even more)\n. TL;DR: \nIt's not about if those tools should work with .cshtml or not, it's about having a nice experience on doing the minimal required client-build steps from dev to publish. \n@Eilon It's not a surprise that these tools doesn't align well with .cshtml file. That's not really a concern here, the more important issue is that when you do web development, the client-side workflow of minifing, bundling, cache busting, compiling (.less, .sass, etc) must be taken into consideration on every major web development framework. ASP.NET had it's own workflow on Microsoft.AspNet.Web.Optimizations package, which support bundling and mostly all described above. For MVC6 they did a huge change and dropped support for the currently implemented workflow in favor to use already community existing workflow that worked great on multiple other languages with a very mature tools and way more extensibility, customization, and possibilities. This is a GOOD thing and a huge step forward for ASP.NET.\nThe current implementation supports Bower with Grunt or Gulp, which are an unopinionated package manager that works closely to a Task Runner for automation of the required tasks from dev to publish (some mentioned above). \nThe minimun that must be supported for a framework to be 'developing ready' for website is to support this kind of workflow:\nGet and Update client side packages (DONE!)\nIntegrate those packages into the final html files respecting dependency order somehow (either manually or automatically)\nAbility to use the development files on localhost while developing (KINDA)\nBundle (concat multiple files into 1 file) (DONE)\nMinification (make files smaller by removing whitespace, comments, etc) (DONE)\nReference post-processed files on non-debug environment settings (NOT WORKING)\nReference cdn files with fallback (DONE)\nPublish the bare minimun required files (NEEDS IMPROVEMENT)\nAlso, as a Framework, this process (used on every single web application project) should be straight forward, if this gets too complex, some web developers will find this frustrating.\nPrevious version of MVC created a great workflow for this minimun scenario but the idea is to drop it in favor of bower / grunt or gulp. Currently there are already people arguing if this was a step forward because right now is way more complex that it used to be before, and when you need just the minimum, configuring all the workflow is a lot of work you weren't usually aware it exists.\nI think ASP.NET need a concrete and smooth way to cover what they did before with the Optimization framework. Maybe create it's own NPM modules, extend existing ones, or redesign something, I'm not sure. I just wanted to flag an alert sooner than later.\n. I was playing around with brunch.io instead of grunt/gulp and looks promising!\nJust playing around for 20 minutes, but got app.{css,js} and libs.{css,js} from their source folders (css,less,js,etc) to their corresponding build folders with sorcemaps as @ctolkien suggested and looks more likely what a developer expects.\nWhile still have no access to bower_components, it's build process makes it not that much needed. This strategy can also work with gulp (i guess)\nStill need to test some more complex/advanced stuff.\nNo html processing needed because brunch uses different builds on same files. (not exactly the same, but I'm ok with it for now)\nI'm not sure how a publish from Visual Studio (or build for that matter, depending on configuration {release|debug}) could trigger a brunch build --production, that would be awesome.\n. @timgit I think the script and link tag helpers already handles those scenarios with the addition to the environment tag helper, and also provides cdn, busting and globbing patterns. I guess that everyone that tackles this ends in the same scenario, I think that means we can have an official workflow. We need to doc somewhere and we are set :D\n. @danroth27  I used it to debug errors after published to azure and it actually displayed the detailed error message instead of the non-informative ysod. \nI will try the diagnostics. Is there any redirection middleware that can I use ? I'm not wondering on developing but after publishing to azure right now. \n. Oops, you are right, I'm using MVC 5. sorry.\n. I'm closing this one and writting it on tooling repo because I think it fits best.\n. Sure thanks.\n. What I meant was:\nI have a site that I can log in with user A\nI want to publish the site but cannot let user even see the site if they don't type a password.\nIf I enter the password, I enter as unauthenticated, than I can login and logout as user A (using maybe identity)\nEnabling an authentication middleware that doesn't gets in the way of the application authentication is exactly what I was looking for. My suggestion is to give an auth middleware out of the box as a nuget package, same as UseWelcomePage(), like UsePasswordedWall(\"password\").\n. Sounds good, I think with azure staging this is coming with more interest over time. I'll try to write one myself in my own repo and let you guys see if you want to get included or not.\n. I see, wow! I have like 4+ years doing mvc and this is the first time that this DataType vs other attributes does make some sense.\nWhat I think is confusing is this:\n[DataType] affects display and processing\n[EmailAddress] is a validation attribute.\nbut [EmailAddress] does also affects display and processing. (<input type=\"email\" ...>)\nIt was never clear to me what DataType exactly does and that the others are validators (like required, EmailAddress, etc).\nWhile now is more clear, I still think it's confusing, but can be just me.\n. I did some more 'testing' and what looks to be inconsistent is that the Validation attribute does not honor the DataType attribute\n[Required]\n[EmailAddress]\n[DataType(DataType.Text)]\npublic string Email { get; set; }\nthe input is still rendered as <input type=\"email\" ...>\n. I think it's confusing from an api point of view, and can be only me.\nIf any, the only think that I suggest is to make more clearly that EmailAddress subclasses DataType.EmailAddress (hence provide presentation and validation) and that DataType does not do any validation but presentation. \nmaybe via documentation (summary).\n. As I suspected this is by design then. Closing.\n. @dougbu validation-summary-errors or validation-summary-valid are only used after the form submission. So when you enter the page for first time (get request) you don't get any of those classes on div.\nKnowing the existence of them I can get to get the desired behavior without c# code but with css. \nnote that validation-summary class is custom app class, not framework one\ncss:\n.validation-summary{\n    display:none;\n}\n.validation-summary.validation-summary-errors{\n    display:block;\n}\ncshtml:\n<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"validation-summary alert alert-danger alert-dismissible\" role=\"alert\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n    <h4>Oops!</h4>\n</div>\nI'm not sure if there's anything to do here, I leave it just in case. Feel free to close it.\n. @dougbu I understand and I think that's perfect. My point was about action on IEnumerable and accessing the properties inside the collection. useful when you render the table headers . don't think I was clear enough.\nI implemented a naive one myself and the html looks like\n```\n@model IEnumerable\n<table class=\"table\">\n    <tr>\n        <th display-for=\"Email\"></th>\n        <th display-for=\"FirstName\"></th>\n        <th display-for=\"LastName\"></th>\n    </tr>\n    @foreach (var item in Model)\n    {\n     // ...\n    }\n</table>\n\n```\nBut maybe the decision made is right and it's better to just do\n<tr>\n            <th>Email</th>\n            <th asp-loc-id=\"FirstName\">First Name</th>\n            <th asp-loc-id=\"LastName\">Last Name</th>\n        </tr>\nGuess I'm still with the old mindset... I'll consider it twice next time. Thanks.\n. by workaround you mean code? \nI will post it here, but this was just a proof of concept to get it working. No way close to quality code.\n```\n[HtmlElementName(\"th\")]\npublic class DisplayNameTagHelper : TagHelper\n{\nprivate const string DisplayForAttributeName = \"display-for\";\n[HtmlAttributeName(DisplayForAttributeName)]\npublic string DisplayFor { get; set; }\n[Activate]\nprotected internal ViewContext ViewContext { get; set; }\n[Activate]\nprotected internal IModelMetadataProvider MetadataProvider { get; set; }\npublic override void Process(TagHelperContext context, TagHelperOutput output)\n{\n    if (string.IsNullOrEmpty(DisplayFor)) return;\n\n    var modelMetadata = ViewContext.ViewData.ModelMetadata;\n    var model = ViewContext.ViewData.Model;\n    if (modelMetadata.IsCollectionType)\n    {\n        foreach (var elementType in modelMetadata.RealModelType.GetGenericArguments())\n        {\n            var props = MetadataProvider.GetMetadataForProperties(model, elementType);\n            var chosen = props.SingleOrDefault(p => p.PropertyName == DisplayFor);\n            if (chosen != null)\n            {\n                output.Content = chosen.GetDisplayName();\n                return;\n            }\n        }\n        throw new ArgumentException($\"DisplayNameTagHelper: Property {{{DisplayFor}}} is not found on {model.ToString()}\");\n    }\n}\n\n}\n```\nalso I'm on beta3, dev branch code has been improved which will make this easier.\n. This is likely a bug:\n```\n@{ \n    ViewBag.Description = \"Hey!\";\n}\n@ViewBag.Description\n// works\nRaw: @Html.Raw(ViewBag.Description) //throws modelbinder exception\nRaw: @Html.Raw(ViewBag.Description as string) // works\n```\n. > why those are different remains unclear.\n@dougbu maybe this is because most cases you call raw with string and you avoid the null check ? I also don't think it's necessary. \nI still don't know why the object one is throwing, this worked with dynamics in mvc5 with no problem.\n. just so you can take into consideration, I hope [Required] (and similar) still makes a ModelState error on this same scenario, even while on mvc5 it will not. I see this as an enhancement of a bad design on mvc5 that can be fixed (it is already) on mvc6. Just please, don't go backwards with this one.\nSpecially, \n[Required]\npublic int Amount {get; set;}\nthis won't ever trigger a required error in mvc5, you need to change int to int? because it's defaulting to 0 (default value). in mvc6 this does triggers an error and it's great!.\nI know this is about [FromBody] attribute, but just in case.\n. @harshgMSFT I understand how it works, but I think it's a bad design (I may be wrong). I created a specific issue for this https://github.com/aspnet/Mvc/issues/2615\n. Then I propose to change the BCL semantics, make [Required] so it's not null, is on payload and is not empty or whitespace (i would call this smart not magic) and if you still need [NotNull] attribute then can be one but I don't see a use for it.\n. ok, I hope we can use in mvc [BindRequired] for everything (like inheriting from Required) and not have to deal with some attributes with required, others with bindrequired or worst with both.\nI still think it's is a bad design (from a framework api perspective).\n. @rynowak beautiful! that's something I'm going to use 100% of the time for sure. thanks!\n. ",
    "jussimattila": "Is it removing cross-references between assemblies listed in _mvcAssemblyList? Or should one rely that ILibraryManager won't return those in the first place?\n. ",
    "avanderhoorn": "Is this for specifically when a filter short circuits or for general filter logging? \n. Cool!\n. As a consumer of the logging output from this Assembly Discovery, I would like to know what was discovered, the actions that are a part of the action, the different parameters for those actions, what the action accepts (get vs post, etc), any filters defined on that controller and then action, the library & assembly the controller was found in, if a controller failed to be registered because it didn't end with the \"Controller\" postfix, etc. \nAdditionally, if this issue is a catch for other type discovery, I would like the same sort of details for View Components (which are discovered like controllers are). I would have very similar expectation for View Components as I do for Controllers.\n. As a consumer of the logging output from View Engine, I would like to be able to derive the decision tree around how the view engine decided what view to process.\nIf you are looking for an example of what we are wanting to do with this data, have a look at the following - http://getglimpse.com/Docs/Views-Tab\n\nThe above shows how the view engine searches for the appropriate view and the parameters passed, etc.\n. If you need any input feel free to let me know.\n. As a consumer of the logging output from Formatting, I would like to be able to derive the decision tree around how the selected formatter was chosen, the inputs, content types, etc.\n. As a consumer of the logging output from Model Binding, I would like to be able to derive the decision tree around how it went from the get/post to the finial bound properties/object and each.\nIf you are looking for an example of what we are wanting to do with this data, have a look at the following - http://getglimpse.com/Docs/Model-Binding-Tab \n\nThe above shows how they take the root model and then break down each of the properties.\n. I've made some comments around logging in general over here - https://github.com/aspnet/Logging/issues/72\n. @SonjaKhan Sounds great!!!\n. Starting to look really great!!!\nAs part of the comments for the log message types, could you add a description not only of what the type contains a copy of:\n\nRepresents the state of an ActionDescriptor or ControllerActionDescriptor.\n\nbut also add when the message is being logged (i.e. \"before action is triggered\", etc) and what can be inferred from the message (i.e. \"contains the details/context of the action about to be triggered\", etc).\nThis would be hugely helpful in trying to provide feedback on the logging and to anyone who is wanting to consume them. \n. @rynowak Thanks for reaching out. Some of the details I listed there were more general guidelines than necessarily specific to this instance.\nI haven't had a chance to play with the details of scopes yet, but assuming we can tap into it, then that makes a lot of sense to me!\n. @yishaigalatzer Thanks for that! I'm trying to go through and provide feedback. I got in contact with @SonjaKhan on Jabbr and she pointed me in the direction of the issues that are already in place. I've gone through and added \"requirements\" to as many as I could and raised a couple more... any prefixed with \"Logging:\" are either ones she has raised or that I have raised.\n. +1\n. Thanks!\n. I get what you mean and I think the issue you raised is a good one. I guess some of the things I'm thinking about is if a filter conducts a redirect, sets an action result, changes the status code of the response, changes any headers, triggers a validate of the request (filterContext.Controller.ValidateRequest = value), handled exception (filterContext.ExceptionHandled = true), etc. It would be nice to know if any view data of any type was set, etc. I'm thinking of things that cause side effects and trying to expose those for developers when they are trying to understand why something has happened in a given way.\n. Agreed about the potential issues. As mentioned in the original issue, it could be easier to have a mechanism which an observing watcher can be injected, but that isn't a perfect solution either.\n. Ya I wasn't sure where to add it, hence added it here. \nGiven were we are currently at, how do I get things working under Core50 that require those extensions?This is my current project.json:\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Glimpse.Common\": \"\"\n    },\n    \"frameworks\" : {\n        \"aspnet50\" : {\n            \"frameworkAssemblies\": {\n                \"System.Net.Http\": \"\",\n                \"System.Net.Http.Formatting\":  \"\"\n            }\n        },\n        \"aspnetcore50\" : { \n            \"dependencies\": {\n                \"System.Runtime\": \"4.0.20-beta-22231\",\n                \"System.Net.Http\": \"4.0.0-beta-22231\"\n            }\n        }\n    }\n}\n. I'll be able to get into testing out the statements on this stuff soonish. Finishing off the foundation work we need to be able to consume it in any meaningful way. \n. @yishaigalatzer Thanks for filling me in. I was just confused when I saw two different strategies for doing very similar things.\n. ",
    "SonjaKhan": "This issue is specifically for short circuits, but feel free to open another issue for general filter logging with the information you would like to see - this goes for anything\n. @avanderhoorn thanks, I'm working on an update\n. working on tests, wanted to get the changes out for feedback in the meantime\n. @rynowak @avanderhoorn I've updated the logging. The plan is to have a scope around startup, as I need that for something else I'm working on. \n. updated logging in the IsController method \n. @rynowak updated\n. I rebased but failed at separating the two branches...not sure how to fix this\n. @pranavkm helped me figure out the rebasing stuff. new PR is now -> #1660\n. TODO when #1600 is done: tests for ObjectResultValues, OutputFormatterValues, and MediaTypeHeaderValues\n. @rynowak updated\n. @rynowak this depends on #1600 and aspnet/logging#81. Is #1600 good to go?\n. ",
    "dstarcev": "Thanks for your response!\nYour solution looks workable and simple, but property-injected csharp IFilter IFilterContainer.FilterDefinition { get; set; }  breaks  thread-safety of InjectedActionFilter - it forced to have Transient lifestyle. Also Property Injection breaks Encapsulation.\nThats why I suggest to use Method Injection to pass filter definition:\n``` csharp\n// InjectedActionFilter can have any life time we want\npublic class InjectedActionFilter : IActionFilter, IFilterContainer where TAttribute : ITypeFilter\n{\n        public InjectedActionFilter(IFooService foo, IBarService bar) { }\n    public virtual void OnActionExecuted(ActionExecutedContext context, TAttribute filterDefinition) { }\n    public virtual void OnActionExecuting(ActionExecutingContext context, TAttribute filterDefinition) { }\n\n}\n```\nIf you don't like (but I do) to have extra parameter in OnActionExecuted, OnActionExecuting etc, please consider next variant:\n``` csharp\n// I just replaced Property Injection with Constructor Injection, and now It looks much clearer.\n// It's easy to pass attribute instance via ITypeActivator. But is still need to be Transient...\npublic class InjectedActionFilter : IActionFilter, IFilterContainer\n{\n        public InjectedActionFilter(InjectedActionFilterAttribute attribute, IFooService foo, IBarService bar) { }\n    public virtual void OnActionExecuted(ActionExecutedContext context) { }\n    public virtual void OnActionExecuting(ActionExecutingContext context) { }\n\n}\n```\n. ",
    "davidliang2008": "This is the small but full repo that demonstrates the problem.\nhttps://github.com/davidliang2008/HttpNotFound-Tester\n@yishaigalatzer , can you take a look and see if I have done anything wrong with the demo. If I didn't do anything wrong, can you reopen this issue?\nInstructions to replicate the issues:\n1. go to \"orders\" and you should see a list of in-memory orders.\n2. The very last order is hard-coded order (with order id 999) and it doesn't exist in the in-memory orders.\n3. If you click \"edit\", you should see \"This webpage is not available.\". If you put a break point on the \"edit\" action, you should see that same action is being called recursively.\n4. Comment out the return HttpNotFund(@\"....\"); and uncomment the return HttpNotFound(\"...\") below and you should see a normal 404 if you edit that order 999 again.\nThanks.\n. Thank you @yishaigalatzer . You're awesome!\n. ",
    "carlos-sarmiento": "I want to implement this fix. Should we use an existing exception, or create a MultipleBindersException?\n. ",
    "Alxandr": "The User property in MVC (given that it is indeed a property) could itself just call into the AuthN MW though, right?\n. MemoryStream doesn't copy the buffer though: http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs,92.\nSo not really sure which would be smaller.\n. I don't know. Depends if dnx locks emits or not. Though it's the Roslyn immutable api that consumes it, so it might be expected to be parallizable\n. Could I get some more feedback here? Do you want me to change it to use NonDisposableStream?\n. @pranavkm No, because it's disposed by roslyn (ie, roslyn uses it in a using block). The problem isn't that we're at the end of the stream, but that it's closed.\n. I think it might be possible to inject a IFileSystem. That would obviously be mock-able.\n. Do I need to sign a new CLA?\nAnyways, should I revert the commit that added unit tests?\n. Turns out it's quite hard to try to fix this thing when I can never get Mvc to build on my machine. Any good commits I can use as a starting point?\n. Well, after deleting my .dnx folder, and re-downloading MVC, I managed to actually get it to compile.\nYet it crashes when trying to launch the xunit tests.\n\n. Ok, so I got it compiling. I found a timezone (or similar) bug in MVC though, but I'll be reporting that in a separate issue. I also rebased off dev, so it should (hopefully) build in the CI.\n. Midnight in 20 hrs, or midnight 4hrs ago? (sorry, but terms like \"today\" and \"tomorrow\" get especially confusing when operating on different timezones when it's around or just passed midnight ^^).\n. Sorry, but I'm quite fed up with trying to get the Mvc repo to work at the moment. Stuff that works locally doesn't work on the CI and vice versa, making testing and fixing stuff way more painful and time consuming than it really should be.\n. I'd like to add a few comments, some of which I didn't and some of which I did get to mention during said meeting, but didn't think I managed to explain properly. Some things are easier to do in writing without the time-constraint and added nervousness of suddenly being put in a conference call with the people who might have written most of MVC and DNX (it was great fun btw).\nBut before I begin I feel I should say that my standpoint is one of wanting to consume precompiled views, ie. serve them to the client. How these precompiled views are generated (as long as it's not obnoxiously hard), and how the tooling and or VS deals with all of this is outside the scope of what I'm about to discuss, because I have no idea how any of that works presently, and am in no way qualified to discuss the matter. So if there is anything in what I am writing that would not work well with tooling or such, by all means please point it out.\nAlso, in writing this, I am of the understanding that how precompiled views in Razor work today is up for discussion, and might be changed entirely. That includes how the views are precompiled, and how the are located/served by the application running, and any other aspects that deal with the idea of precompiled Razor views.\nToday, when you in your HomeController.Index return View(), the request eventually reaches the RazorViewEngine, which has a list of search paths to search through for your view. This list consists of /Views/{1}/{0}.cshtml and /Views/Shared/{0}.cshtml (and also paths for Areas, but I'm ignoring them here for simplicity). The RazorViewEngine goes through these in order (inserting controller name and action name) and hands the path to a IRazorPageFactory defaulting to VirtualPathRazorPageFactory. The page factory then goes searching through the files on disk and the precompiled views for a view that matches the path (for instance /Views/Home/Index.cshtml), and makes sure the file isn't updated on disk. After doing all that it returns a IRazorView to the view engine, or null if no view that mached the path was found.\nI suggest, that instead of having the view engine have one page factory, it can have a list of them (which can be added to or removed from by the end user application, typically during configuration of MVC and DI). One of these would be the VirtualPathRazorPageFactory and would work very much like the one already in existence. It would search for files in a virtual file system (which would normally be the disk) like it does today, and it would probably handle making sure that if the file is changed in said file system, a new version is compiled and served instead. In almost all manners, it would work exactly as the one already existing, except that any notion of precompiled views would be taken out. It would only deal with views that exist in .cshtml form in a (virtual or not) file system.\nOne of the boons presented by simply having a list of page factories (even without actually adding any other kind of page factories) is the ability to add more to the list. So, for instance, if you have 3 assemblies which have embedded .cshtml files, you can crate virtual file systems for each of them, and add them to the list of page factories in the order they are to be prioritized. This would also mean that you'd have control over the prioritizing of conflicting views, for instance if assembly A has a embedded .cshtml file named /Views/Home/Index.cshtml, while there is one with the same path in the application, you can order the page factories to decide which one \"wins\".\nSecondly a second page factory should be added to MVC, something like PrecompiledRazorPageFactory. This page factory would do one simple thing, and that's return precompiled views. It would not care about file systems (virtual or not), and it would not do any checks to look for newer versions of the view.\nBy default, the two page factories that's used by MVC would look as following:\n1. A VirtualPathRazorPageFactory with it's virtual path set to point to the project directory in the actual file system.\n2. A PrecompiledRazorPageFactory.\nLet's go through some of the scenarios with this setup. For the purpose of simplifying these explanations, I'm going to assume that in all of them there are two projects, A, and B. Both have the view Views/Home/Index.cshtml. Project A is the app we're running (with dnx . web), and only project B have turned on precompiling of views.\nScenario 1: Default setup, request Views/Home/Index.cshtml:\nThe engine starts by asking the VirtualPathRazorPageFactory for the view. The virtual path factory finds it on disk, compiles it, and returns it to the view engine, which in return sends it to the client.\nIf the view is changed on disk, the next request to the VirtualPathRazorPageFactory sees this, and recompiles.\nIf the file is deleted, the page factory sees this, and returns null, to let the next page factory handle the request, which would result in the precompiled view being served.\nThe point here to take home is the fact that the existence of a .cshtml file (by default) forces the view engine to ignore any precompiled views, and instead compile from sources during runtime. I feel this is in line with how DNX works in general, in that it prefers project references over package references, and builds sources at runtime.\nScenario 2: The order of the page factories are switched, so the PrecompiledRazorPageFactory is first. Same request.\nAt this point I think it's fairly obvious what is going to happen, but I'm going to go through it nonetheless, just to be thorough. Initially, the view returned will be the precompiled one, but the point is that no matter what you do to the .cshtml on disk, it won't matter. The precompiled view has precedence, so it will always be served.\nScenario 3: Developer wants to make sure that no views are compiled at runtime (for security or other reasons):\nThis suddenly becomes really easy. All you have to do is to remove the VirtualPathRazorPageFactory, and no .cshtml code will be compiled at runtime. If the file is not in the list of precompiled views, you will get a \"view not found\" error, just as you do today if there is no .cshtml file.\nScenario 4: Deployment to server\nThis comes down to a question of \"do you want to be able to edit the views on the server?\" If yes, then simply deploy without doing any precompilation. If you do not, compile with precompilation, and either make sure that the VirtualPathRazorPageFactory is removed, or that the .cshtml files is not deployed with your app (just like the .cs files aren't). This should preferably somehow be handled by dnu publish --no-source though.\nWrapping up\nThis post is probably the longest I've ever written on any GitHub issue, and it could probably be a blog post. It does not solve all of the problems agreed on in the meeting, nor was it intended to. This was mainly an attempt to communicate my thoughts after I had the time to go through some of Razor's sources, and with the ability to take time to write this all down properly.\nLastly, I'd like to point out point 4.a of the meeting notes, namely that \"All view locators would always check for a file \u201con disk\u201d (whether it\u2019s physical or virtual)\". Now, if this remains a requirement for using precompiled views in Razor (like it is today), it will probably be simplified in such a way that when you turn on precompilation, .cshtml files will automatically be embedded in the assembly for you, so you as a end developer doesn't have to think about the fact, but I still think adding .cshtml files, empty or not, either as embedded resources or actual files on the file system, when you already have enough metadata in the assembly to determine what views exist as precompiled views seems convoluted. It adds extra overhead to generating assemblies with precompiled views (if you for some reason decide to do this on your own, and not with the build in precompiler), and you to a larger degree need to know how these components interact. It's not something I feel very strongly about, but I'd still like to voice my concern. Now, my proposal is far from the only way to solve this (and some of the other problems), but I at least think it's a way to do so, and one which I feel is clean and highly extendable.\n. With regards to the watchers (if I'm reading this right), the source-files are never on disk to begin with (as far as MVC is concerned). They are precompiled in another project, so the paths MVC looks for them are non-existing. There is no Views directory at all.\n. Well, for my case, as long as I can get away with having the razor files in another project than the web project (cause the web project is in F#), I'll be happy. I'll give it a spin, and see if it works after I'm done with my exam the 10th. \n. ",
    "RickStrahl": "FWIW, I've also tried using SimpleMapper (from the full MusicStore sample) as well as AutoMapper and while these work to update the objects, SaveChangesAsync() currently fails with a NullReference exception.\nI'd be curious to hear what will work here. I like the idea of using some non-Web related object to handle 'copying' of model data. In fact a more generic object that could be used across the board and has multiple different model providers would be really nice - so you could load from form data, or from another object instance or from - whatever. This sort of thing really doesn't belong in the Web framework this is useful in all sorts of scenarios.\nAutomapper addresses the object to object scenario well, but not anything else...\nI'd recommend making this a priority. It's very frustrating right now because I've not been able to get a reliable way to save object data back, short of using manual copying or using my own helpers that use reflection based object assignments (which is ugly but as usual actually works :-)).\n. Yes, let me know when it makes into the dev feed and I'll retest the original code I had for updates.\n. ",
    "anuraj": "@dougbu Can you please check it now? I have completed the CLA procedures.\n. ",
    "StuartQ": "What's the rationale for not prefixing helpers that create new custom elements? Isn't there still ambiguity on whether a given piece of markup is server-side or client-side? \n. ",
    "mbeckenbach": "Good idea. Especially angular devs wont like it without a prefix. \n. Maybe make the prefixes configurable by naming convention like angular directives do. asp-whatever would be written AspWhatever in angular. This makes it more flexible for component vendors.\n. Yes. What i need in pure Single page app is a token authentication as it was in the old web api project template.\nBut even when using the cookie auth in apps that have parts in spa styla and some in mvc style i need a proper 401 to deny requests by for example roles. The client side code should handle redirects here, as in some cases I want to redirect to another page that defined in default. an anaurhorized view. \nThere is also a need for supporting cookie and token auth. When an app is used only via mvc controllers but some API controllers are used to connect external services. Sure, this should be a separate project, but in lots of real cases you are limited to one project running in one web. \n. Regarding your question on The old post on uploading to github. Take a current vs 2015 preview. File new project, copy my action into the home Controller. ;)\n. Ah. Ok. Yes that's correct. In this specific case i'm doing cookie auth as the default project template has implemented it. \nCookie auth was what I wanted to do here anyway as I use the mvc web as a wrapper around several spa's living in an mvc view. \nSo not getting the 401 when trying to access a resource in not authorized to cases my pain in this specific case. \n. I'm having the same issue after updating to VS CTP5. \nI also did a kvm upgrade to 1.0.0-beta3-10921.\nFile->New Project->Launch\nSame for Empty project and starter template. \nI have a existing project using  the 1.0.0-rc1-10870 CLR.\nNow i can't even build this one as i get a bunch of errors in startup.cs. I get the same errors as when doing file->new project with the starter web.\nShow Details    Severity    Code    Description Project File    Line\n    Error   CS0246  The type or namespace name 'IHostingEnvironment' could not be found (are you missing a using directive or an assembly reference?)   test.ASP.NET 5.0    Startup.cs  21\n    Error   CS0246  The type or namespace name 'IConfiguration' could not be found (are you missing a using directive or an assembly reference?)    test.ASP.NET 5.0    Startup.cs  29\n    Error   CS0246  The type or namespace name 'IServiceCollection' could not be found (are you missing a using directive or an assembly reference?)    test.ASP.NET 5.0    Startup.cs  32\n    Error   CS0012  The type 'IServiceCollection' is defined in an assembly that is not referenced. You must add a reference to assembly 'Microsoft.Framework.DependencyInjection.IServiceCollection, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.   test.ASP.NET 5.0    Startup.cs  35\n    Error   CS0246  The type or namespace name 'IHostingEnvironment' could not be found (are you missing a using directive or an assembly reference?)   test.ASP.NET 5.0    Startup.cs  44\n    Error   CS0246  The type or namespace name 'ILoggerFactory' could not be found (are you missing a using directive or an assembly reference?)    test.ASP.NET 5.0    Startup.cs  44\n    Error   CS0012  The type 'ILoggerFactory' is defined in an assembly that is not referenced. You must add a reference to assembly 'Microsoft.Framework.Logging.ILoggerFactory, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.   test.ASP.NET 5.0    Startup.cs  48\n. ",
    "SharpNoiZy": "Please please don't prefix the tag names!!\nMy intention is to write valid and clean HTML with parts (attributes) that are evaluated by ASP.\nSo, to prefix the attributes is the right way!\nBut I personally would use asp:attribute=\"\" syntax, because it shows a little bit better that this attribute is evaluated by ASP, and that it's is not maybe an self invented \"HTML 5\" attribute that I want to evaluate by some jquery selector magic \"Find all elements with an attribute which begins with asp-\".\nI hope you know what I mean.\nAnd for own namespaces I go for this solution:\n// configure per page or globally\n@prefix y Custom.Namespace\n<a class=\"link\" asp:controller=\"foo\" asp:action=\"bar\" y:class=\"baz\">...</a>\nThis is extremely sexy!\nThis are my 2 cents\n. ",
    "robertsundstrom": "Using prefixes is a good standard. \nBut I think that they should be customizable and optional if someone would like that. That is my preference.\nWhat guidelines should be used is up to the community to decide.\n. ",
    "sheryever": "@DamianEdwards \nMay I name write my attribute like \nRazor\n    [HtmlAttributeName(\"@controller\")]\nso i would use it as \nRazor\n    <form @controller=\"Home\">   \n    </form>\nI want to differentiate among Razor, Html and Angular attributes. because while reading other developers code it will creates confusion for me. Last time my developer wrote the same attribute data-sum-field and utilize the same attribute for both javascirpt (jquery) and angular, the only way to recognize was to check the angular directive as injected or not.\nOne more question, If I have two third party TagHelper for anchor tag and both take \"action\" attribute one for href and second for theme, what will happened? \n1, Priority\n2, Ambiguity Error \nor something else?\nSometime open source have the same names.\n. @yishaigalatzer, OKh, No problem, I will take Tag Helper as Html Tag Helper not Razor MVC Tag Helper at least till RTM.\nWell, overall the work is really great :+1:\n. ",
    "gibeon-andrew": "your welcome :) \n. ",
    "alikor": "I never attempted this in traditional MVC\n. It would be great if you could customise the view location at Controller, or kproj level /cc @yishaigalatzer @pranavkm\n. the Use case for this feature \nwould that it would allow me to build a composable UI with each capability for example authentication to be self contained within there own kproj. each capability will control their own routes through RouteAttribute as well as views and all other logic.\nThere would be a host or IT/Op capability which responsibility would be to compose all other capabilities and handle things like Hosting of the Application and contain the startup.cs.\n. ",
    "andrewm1986": "I don't know if it's planned but it would be useful to have DI support for another validation framework\n. ",
    "joanbarros": "Yes, the code doesn't actually use the selected item specified in the SelectList object. So, if you pass one via the parameters the selected item specified in that object is ignored.\nI can get together a code/project sample reproducing the issue.\n. Yes, I'll try to get one ready later today.\n. I see this has been closed. That's great. I've yet to read the outcome. Sorry, something came up that kept me busy.\nAnyways here is a gist with the reproduction: Gist \nBetter late than never ehh? lol\n. ",
    "jalbah": "Hi, I am a newbie and I don't know where to put my questions. I am just starting to play with vnext and when I try to compile the source code for MVC project I get always error, i.e:\n    Error   CS1061  'IFileSystem' does not contain a definition for 'TryGetFileInfo' and no extension method 'TryGetFileInfo' accepting a first argument of type 'IFileSystem' could be found (are you missing a using directive or an assembly reference?) Microsoft.AspNet.Mvc.Razor.Host..NET Framework 4.5  ChunkInheritanceUtility.cs  61.\nAn instance of FileSytem is trying to use a method not existing. How is possible that happens? What am I missing?\nI would appreciate any help.\nThanks \n. ",
    "satish860": "Why cant we use the existing Content negotiation . Why do we need the URL extension like ruby . To me it will lead users to a wrong Path .\n. ",
    "nvivo": "I completely agree with @satish860 that this will lead users to the wrong path.\nI like the idea of being able to force content negotiation based on an extension if needed, but in reality most people will always publish and use their APIs with \".json\" in the end because that shows the result they expect in the browser. Just look at how Twitter publishes all APIs in their documentation with \".json\"  to compensate this rails behavior.\nThe idea is nice, but extension mapping to media types + XmlFormatter by default is definitely not the pit of success.\n. This is awesome. \nI really didn't even thought about the solution 3. The best thing is that if someone wants Xml by default in the browser, they can just switch the order of the formatters. Makes perfect sense, great job!\nYou probably already talked about it but why not move JSON out to its own DLL as well? My bet is that a couple years from now, another guy will propose removing the \"obsolete json format\" from the default list and things would be already in place. It would make it also harder to have any accidental dependency on json.\n. ",
    "SaarCohen": "Thanks, all done!\n. ",
    "Ciantic": "I hope it's configurable somehow, in my Web Api the parameter names are used as key names in request, so they are meaningful.\n. ",
    "luizbon": "Well, formatters will do this work for a certain way. But what I proposed is a way to have a specific response for the action based on content type.\nImagine that when the content type is html I want to respond with full html with layout, when the content type is json I want full object as json but if content type is js I want a simple javascript that run a script on the client utilizing the json response together.\nI don't know if I've been clear. Maybe if necessary I can send some example.\n. Ok, great to know that!\nMay I try to spike something? I'll try to get some time to play with it and leave as a PR here.\n. ",
    "RickAndMSFT": "Sure, I can submit a PR. - riande\n. ",
    "friism": "OK, closing - there was some debate in the jabbr room, the reason it works when running k kestrel from /usr/src/app may be that that is volume-mounted from OS X by docker and so gets OS X FS semantics...\n. ",
    "callumj": "That sounds like a good solution, especially as it places a tighter binding between the Controller and the View engine with the Action able to dictate what View will be used (as opposed to it being inferred by the route).\n. ",
    "markrendle": "This is not \"marginal\", it's literally the first thing I ran into working under Linux and it's really annoying. I lost an hour chasing it down.\n. ",
    "unaizorrilla": "Fixed! after copy a nugget.config into %appData%\\Nuget\\Nuget.config\nThanks\n. ",
    "Rick-Anderson": "Sure, I was just copying the template generated code.\n. src/Microsoft.AspNet.Mvc/Properties/debugSettings.json was a mistake, I didn't intend to include that change.\n. How do I \"squash the commits\"? \n. Agreed, but you'll need a dev to do that.\n. ",
    "tonysneed": "I've been working on this, and I ended up with the following API:\ncsharp\nservices.AddMvc()\n    .Configure<MvcOptions>(options =>\n    {\n        options.JsonPreserveReferences();\n        options.XmlPreserveReferences();\n    });\nThese methods will configure both input and output formatters. These methods also appear separately on InputFormatters and OutputFormatters, for more granular control.  They also leave room for configuring other formatters, such as Protobuf.\nMy main question is where this sort of contribution belongs. I am thinking of a separate repo or project, something like role what WebApiContrib plays with vCurrent. What is recommended for libraries that extend Asp.Net Mvc 6?\n. Hi Dan,\nI'd love to talk about a good design for simplifying configuration of serializers, and especially for handling cyclical references.  One of the first errors I usually get after reverse engineering EF entities is the serializer complaining about cycles.  While there are patterns which solve it, I think it would be nice to easily set an option in startup and have it \"just work.\"\nHere is a GitHub repo I set up with my solution for MVC 6:\nhttps://github.com/tonysneed/aspnet-mvc-6-contrib\nI also have one for Web API 2, which is helpful for client-side formatter configuration:\nhttps://github.com/tonysneed/aspnet-webapi-2-contrib\nFor a bit of background, here is a blog post I wrote:\nhttp://blog.tonysneed.com/2015/01/02/handle-cyclical-references-with-asp-net-web-api-2-and-mvc-6\nI think it's a good idea to separate Xml and Json formatters.  Also, I plan to help port Protobuf-net, both as a portable lib and for AspNet Core.\nCheers,\nTony\n. I signed the CLA and am ready to go.  I can start with #1787 and a set of extension methods providing direct access to the formatters.  Then I can propose a design for modifying the formatters for preserving references in order to handle cyclical references.  Glad I can help!\n. Alright, here's my first pass on the API design for the formatters.  I like the approach that Json.Net takes with its formatter, namely, to expose a SerializerSettings property, which is of type JsonSerializerSettings.  Similarly, the XmlDataContractSerializerInputFormatter should expose a SerializerSettings property of type DataContractSerializerSettings.\nThat would make it just as easy to configure the DCS as it is to configure the Json.Net serializer.  Furthermore, a reference to serializer settings allows for setting a number of configuration options, including but not limited to preserving references.  Implementing this would be straightforward because you just pass the settings to the ctor of DataContractSerializer in the CreateDataContractSerializer method of the formatter.\nIf you have either a JsonSerializerSettings or a DataContractSerializerSettings, you could set both the input and output formatter for either Json or Xml to it.  As a convenience, we could also add an extension method to MvcOptions which gets both the input and output formatters for either Json or Xml and configures them in one shot with a serializer settings parameter.\n. @yishaigalatzer, just following up to see if my CLA was approved yet and what you think about my proposed API design?\n. Great, I'm now working on getting the Mvc.Core project to build.  I've upgraded to KRE 1.0.0-rc1-10894, following these instructions. But I'm getting 12 errors when attempting to build the Mvc.Core project.  They are all for Filters\\AuthorizeAttribute.cs and most relate to not finding AuthorizationPolicyBuilder.  Any ideas?\n. Whew! Thanks for working to get that fixed. :+1: \n. @yishaigalatzer, Now we're down to just one error in Microsoft.AspNet.Mvc:\nMvcServiceCollectionExtensions.cs(29,22): ASP.NET 5.0 error CS1061: 'IServiceCollection' does not contain a definition for 'AddAuthorization' and no extension method 'AddAuthorization' accepting a first argument of type 'IServiceCollection' could be found (are you missing a using directive or an assembly reference?)\n. I resolved issue #1848 by clearing my local packages cache and restoring.  I am now able to build the Mvc solution without errors.\n. I've pulled the latest and am working on exposing DCS settings from XmlDataContractSerializerInputFormatter and XmlDataContractSerializerOutputFormatter.\n. I'm ready to do this one now, and I can submit a PR for it.\n. It looks like extensions to IEnumerable> aren't going to provide the desired result.  For example this method:\ncsharp\npublic static TInstance InstanceOf<TInstance>([NotNull] this \n    IEnumerable<OptionDescriptor<TInstance>> descriptors)\nCalled by this code:\ncsharp\nvar formatter = new MvcOptions().InputFormatters.InstanceOf<JsonInputFormatter>();\nWill produce a CS1929 compilation error: The extension method requires a receiver of type IEnumerable<OptionDescriptor<JsonInputFormatter>>.\nI would like to suggest the following (for both input and output descriptors):\ncsharp\npublic static TInstance InstanceOf<TInstance>([NotNull] this\n    IEnumerable<InputFormatterDescriptor> descriptors)\n. Perfect ... this will work for InstanceOf, InstanceOfOrDefault and InstancesOf.  However, RemoveTypesOf becomes a bit problematic, because IList is not covariant.  For example, this method:\ncsharp\npublic static void RemoveTypesOf<TInstance>([NotNull] this \n    IList<IOptionDescriptor<object>> descriptors)\nWill result in a compilation error when called by this method:\ncsharp\nnew MvcOptions().InputFormatters.RemoveTypesOf<JsonInputFormatter>();\nBecause it can't convert from InputFormatterDescriptor to IOptionDescriptor<object>.\nInstead, RemoveTypesOf will need to be defined like so:\ncsharp\npublic static void RemoveTypesOf<TInstance, TOptionDescriptor>([NotNull] this\n    IList<TOptionDescriptor> descriptors)\n    where TOptionDescriptor : IOptionDescriptor<object>\nAnd it will need to be called with an extra type argument, like so:\ncsharp\nnew MvcOptions().InputFormatters.RemoveTypesOf<JsonInputFormatter, \n    InputFormatterDescriptor>();\nWhich is not very intuitive.  Would you like me to add a RemoveTypesOf method anyway?\n. I'm looking at the packages here: https://www.myget.org/gallery/aspnetvnext.  And I see that Microsoft.AspNet.Security is at version v1.0.0-beta3-11421, but if I drill down into the References node for SP.NET 5.0, I can see that the version is shown as v1.0.0-rc1-11390, which is strange because project.json for Microsoft.AspNet.Mvc.Core contains a dependency for \"Microsoft.AspNet.Security\": \"1.0.0-*\".  I'm wondering if there is a precedence issue with the version numbers?\n. It turned out the issue was caused by version number precedence.  So all I had to do was make sure my NuGet settings had just two feeds: nuget.org and AspNetVNext (https://www.myget.org/F/aspnetvnext/api/v2).  Then I cleared all packages from my local store: %UserProfile%.kpm\\packages.  Then I opened a command prompt, navigated to the local Mcv repo and ran: kpm restore.\nI was then able to build the Mvc solution without errors.  I hope this will help someone else who may run into the same problem.\n. After pulling in the latest upstream (v1.0.0-beta4-10246), I ran kvminstall.ps1 and kvm upgrade.  However, the KRE is still on 1.0.0-beta3-10921.\nThen I cleared by .kpm\\packages folder, and ran kpm restore for the Mvc global.json.  But when I tried to build the Mvc.sln, I received 99 build errors -- all of them stating:\nASP.NET 5.0 error CS1061: 'IRouteBuilder' does not contain a definition for 'MapRoute' and no extension method 'MapRoute' accepting a first argument of type 'IRouteBuilder' could be found (are you missing a using directive or an assembly reference?)\nObviously, there must be a version mismatch somewhere causing the build to break.  Any ideas on how to resolve this?\n. I figured out how to install the 1.0.0-beta4-10946 runtime by installing dotnetsdk and calling upgrade.  But the Mvc project build still fails with the same errors.\n. It looks like a change to the namespace for the MapRoute extension is what broke the Mvc build:\nhttps://github.com/aspnet/Routing/commit/29a5cb8aa9bfda4883545f6f1b7c00e52d9b4b55.\n. It turns out kpm restore was not pulling down the version of AspNet/Routing with the namespace change in it.  However, I tried clearing and restoring packages today, and I've got version 1.0.0-beta4-10996 with the change, and everything compiles just fine now. :smile: \n. Cool, I'll make any needed corrections and submit the 2nd PR for #1787.\n. I figured out how to get R# to recognize the Settings.StyleCop file, which should help in fixing the style issues. :)\nIn terms of testing on Mono, I use a Mac to host my Windows VM's, so I'll give it a try. I'll start with this post: Develop ASP.NET vNext applications on a Mac. But let me know if you have any other info that can point me in the right direction.\n. Working on the mono test.  I'm stuck now on upgrading to the latest kre for dev.  Do you know the curl command I need to execute to run kvminstall.sh from dev?  Without that, I can only upgrade to kre beta2.\n. I am running this from the terminal prompt ~ Tony$:\ncurl https://raw.githubusercontent.com/aspnet/Home/dev/kvminstall.sh | sh && source ~/.kre/kvm/kvm.sh\nBut I get this response:\nProfile not found. Tried ~/.bash_profile ~/.zshrc and ~/.profile.\nCreate one of them and run this script again\n  OR\nAppend the following line to the correct file yourself:\n [ -s \"/Users/Tony/.kre/kvm/kvm.sh\" ] && . \"/Users/Tony/.kre/kvm/kvm.sh\" # Load kvm\nNot sure where to go from here. Any ideas?\n. Never mind ... I opened up a new terminal prompt and tried again.  This time it worked!  For posterity, here is what I did in Terminal on OSX:\n```\nAnthonys-MacBook-Air:~ Tony$ curl https://raw.githubusercontent.com/aspnet/Home/dev/kvminstall.sh | sh && source ~/.kre/kvm/kvm.sh\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  2472  100  2472    0     0  11735      0 --:--:-- --:--:-- --:--:-- 11771\nkvm is already installed in /Users/Tony/.kre/kvm, trying to update\nProfile not found. Tried ~/.bash_profile ~/.zshrc and ~/.profile.\nCreate one of them and run this script again\n  OR\nAppend the following line to the correct file yourself:\n[ -s \"/Users/Tony/.kre/kvm/kvm.sh\" ] && . \"/Users/Tony/.kre/kvm/kvm.sh\" # Load kvm\nType 'source /Users/Tony/.kre/kvm/kvm.sh' to start using kvm\nAnthonys-MacBook-Air:~ Tony$ kvm upgrade\nDetermining latest version\nLatest version is 1.0.0-beta3-10921\nDownloading KRE-Mono.1.0.0-beta3-10921 from https://www.myget.org/F/aspnetvnext/api/v2\nInstalling to /Users/Tony/.kre/packages/KRE-Mono.1.0.0-beta3-10921\nAdding /Users/Tony/.kre/packages/KRE-Mono.1.0.0-beta3-10921/bin to process PATH\nUpdating alias 'default' to 'KRE-Mono.1.0.0-beta3-10921'\nAnthonys-MacBook-Air:~ Tony$ kvm list\nActive Version              Runtime Location             Alias\n------ -------              ------- --------             -----\n       1.0.0-beta2          Mono    ~/.kre/packages    \n  *    1.0.0-beta3-10921    Mono    ~/.kre/packages      default\n```\nAs you can see, I'm now on KRE beta3 for Mono.\n. I've run the Xml formatter tests on Mono and some of the tests fail with an ArgumentNullException for the rootName parameter of the DCS ctor when a new DataContractSerializerSettings is passed.\nI used Reflector to have a look at the DCS and found that it's initialized like so:\ncsharp\nXmlDictionary dictionary = new XmlDictionary(2); \nInitialize(type, dictionary.Add(rootName), dictionary.Add(DataContract.GetNamespace(rootNamespace)), knownTypes, maxItemsInObjectGraph, ignoreExtensionDataObject, preserveObjectReferences, dataContractSurrogate);\nWe probably need to check if the RootName and RootNamespace are null on DataContractSerializerSettings and initialize them with XmlDictionary entries.\n. Looking at this closer, I can see that rootName and rootNamespace show up in the debugger as null after the DCS ctor is called, so that init code I found earlier is not invoked from the ctor we are calling.  Looking at the code for DCS, I can see that the ctor that accepts the settings does not invoke the other ctor which in Mono throws the NullArgumentException.\nHow does one go about filing a bug with Mono?\n. Cool, I'll create a Bugzilla account and file a bug.  I found the Mono source code for the DCS and can see the problem with the ctor, which calls the ctor that throws the exception.\nIn the meantime, I'll wrap up the other fixes for this PR.\n. I've made all the requested changes.  However, I can see that this test now fails:\nXmlDataContractSerializerInputFormatterTest.ReadsSerializableErrorXml\nThe exception is:\nSerializationException : Error in line 1 position 8. Expecting element 'ArrayOfKeyValueOfstringanyType' from namespace 'http://schemas.microsoft.com/2003/10/Serialization/Arrays'.. Encountered 'Element'  with name 'Error', namespace ''.\nUnfortunately, I'm unable to debug the test in the Test Explorer in VS 2015 -- seems the Discovering Tests step hangs.  On face value, it seems like it could be related to [XmlRoot(\"Error\")] attribute having been removed from SerializableError.  But the test passes on the dev branch, so I'm stumped on this one.\n. I'm working on fixing the failing test.  However, I'm wondering if we should move the tests for the xml formatters into a separate test project.  Because the formatters are now located in the Microsoft.AspNet.Mvc.Xml project, we should create a Microsoft.AspNet.Mvc.Xml.Test project and move the xml tests there.  That would also make it easier to test, because it's easier to run the tests in the IDE when the solution contains fewer projects.\nAlso, the XmlDataContractSerializerInputFormatterTest class should be renamed to the plural form: XmlDataContractSerializerInputFormatterTests.\nThere's a ASPNET50 directive wrapping the XmlDataContractSerializerInputFormatterTest class.  Can this be removed?  And the namespace is Microsoft.AspNet.Mvc instead of Microsoft.AspNet.Mvc.Core, like the output formatter tests.\n. Having trouble getting the latest pull from dev to build -- see #1848.\n. Looks like the build for the Mcv dev branch is broken because of this: https://github.com/aspnet/Routing/commit/29a5cb8aa9bfda4883545f6f1b7c00e52d9b4b55.\nI think I'll just continue without merging upstream, as there shouldn't be any conflicts at this point.\n. I've now completed all the requested changes for this PR. :clap:\nAt this point it, I have a few cosmetic improvements I'd like to suggest.\n1. Some changes to XmlDataContractSerializerInputFormatter.CreateDataContractSerializer (see inline comments to follow).\n2. Rename XmlDataContractSerializerInputFormatterTest (make it plural), and take out ASPNET50 preprocessor directive if not needed.\n3. Rename namespace of XmlDataContractSerializerOutputFormatterTests: remove \".Core\" to make it consistent with the other test classes.\n4. Remove XmlDataContractSerializerFormatter from the test method names to make them more readable, which had been suggested earlier.\n5. Possibly move the xml formatter tests to a separate project -- Microsoft.AspNet.Mvc.Xml.Test.\n. Terrific! I'll create a separate cleanup PR for those items.\n. I've submitted a bug to Mono which includes a failing unit test for the DCS ctor that accepts a new settings class: https://bugzilla.xamarin.com/show_bug.cgi?id=26383.  I installed Xamarin Studio on both Windows and OSX, and saw that the test passed on Windows (with CLR 4.5) and fails on OSX (with the Mono .NET 4.5 lib).\n. I was able to merge upstream into this branch, so it's now in sync with dev.  Is there any reason not to :shipit: at this point?\n. As discussed in #1787, I implemented an InstanceOf extension method which returns an instance of a formatter so that the developer can configure it via the SerializerSettings property.  For example:\ncsharp\nvar formatter = formatters.InstanceOf<JsonOutputFormatter>();\nformatter.SerializerSettings.PreserveReferences = true;\nLet me know what you think, and I can submit the PR.\n. Yes, happy to squash. Working on it now.\n. I had to create a new PR #1909 with the original commits condensed to a single commit.  Things had been moved around midstream, so resolving conflicts during rebase was difficult.\n. PR #1871 should be merged before this one.\n. I implemented corrections to XmlDataContractSerializerInputFormatter and applied cleanup to XmlSerializerInputFormatter.\n. No problem, happy to squash the commits down to one.\n. Created a new PR #1917 with the original commits condensed to a single commit.\n. Added commit 38e39fd: Cleanup of XmlSerializerInputFormatterTests.\n. Got all these, and I'll make the fixes.\nThanks for the guidelines link ... assembly should be Tests (plural) and class Test (singular).  But if you look at the Mvc repo, in general you'll see the opposite.  All the test assemblies are Test (singular), except for FunctionalTests, and the class names are a mix, with most named Tests (plural) and some named Test (singular).  I was modeling Microsoft.AspNet.Mvc.Xml.Test and its tests after the existing pattern in the Mvc repo.  Should I instead conform with the guidelines?\nI'll update Mvc.NoFun.sln.  Was wondering what \"NoFun\" meant. :smile: \n. I believe this should be ready to :shipit:?\n. Yes, happy to ... getting better at git rebase by now. :smiley: \n. Created a new PR #1927 with the original commits condensed to a single commit and ready to merge into dev.\n. So far I only modified ~~OutputFormatterDescriptor~~ IntputFormatterDescriptor and OutputFormatterDescriptor to implement IOptionDescriptor<TOption>.  Should I update all the other OptionDescriptors to do the same?\n. Yes, typo in that last comment. :) I believe we'll want InstanceXxx methods to work across all the option descriptors.\n. Commit ac7c0b8: I took the liberty of implementing explicit extension methods for RemoveTypesOf on IList<InputFormatterDescriptor> and IList<OutputFormatterDescriptor>. Let me know if that's acceptable. :cold_sweat:\n. Thanks - I'll add the RemoveTypesOf extension method on just the ones listed here with Yes.\n. @yishaigalatzer In commit 3d5a684 I added / removed RemoveTypesOf on the option descriptor lists as you requested.\nWould you like me to update all the option descriptors to implement IOptionDescriptor<TOption>?\n. Ah yes, I see what happened there.  After rebasing on dev, I ended up with commits 34aefb1b through ac7c0b8d listed as incoming:\nOn branch option-descriptor-extensions\nYour branch is behind 'origin/option-descriptor-extensions' by 7 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\nWhen I pulled in those commits, they duplicated the ones that had been rebased.  So I removed the rebased commits and pulled in the old ones, which also brought in the older commits from 8e91c1a onward.\nI've been able to rebase locally on dev again, and like before I have the old incoming commits and git status gives me the same message.  If I try to push to origin, I get the following message:\nTo https://github.com/tonysneed/Mvc.git\n ! [rejected]        option-descriptor-extensions -> option-descriptor-extensions (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/tonysneed/Mvc.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nThe problem with pulling in the original commits, is that they duplicate the ones that have been rebased.  Instead, according to the GitHub help on rebase, I'll need to force push.  The reason I hesitate to do that is because it might make reviewing more difficult.  But seeing as we're getting toward the tail end of this PR, we should probably be OK.\nSo if it's alight, I can force push the rebase for this branch. Is that OK?  Hopefully that will solve the problem with my last attempt to rebase. :scream: \n. FYI, here is what my history looks like after rebasing on dev.  As you can see, the commits that had been in the branch have been correctly rebased on dev.  But they are now also listed as incoming.\n\n. I did a force push, and it totally worked!  The incoming commits are gone and all I have left is a nice clean history with my commits rebased on top of dev. I think I'm starting to get the hang of the PR workflow, and how to bring the branch up-to-date with rebase.\n@rynowak Great tip on git rebase --skip for commits that have been superseded by what's already been merged. Especially like the hint re: deleting lines in an interactive rebase. :+1: \n. @yishaigalatzer Is there anything else that needs to be done with this PR? Hopefully, the history is now clean and the all items have been addressed. :pray: \n. @yishaigalatzer @dougbu All squashed and ready for the final pass. Cheers! :beers: \n. @dougbu Note that in commit f5b229b7 I removed #if ASPNET50 from OutputFormatterDescriptorExtensionTest and reordered some using directives.\n. I squashed my commits and rebased onto upstream/dev, resolving the conflicts with XmlDataContractSerializerInputFormatterTest and XmlDataContractSerializerOutputFormatterTest. Should be ready to merge now. :pray: :smiling_imp: \n. Cool, and thanks to @dougbu for a thorough review! Thanks also to @yishaigalatzer & @rynowak. Glad to have contributed, and I learned a lot from the experience, especially about Git rebase and working with others on a pull request workflow. It will make a good topic for a future blog post. :smile: I'm looking forward to contributing more in the future!\n. Creating a separate PR for the rebase seems to be paying off, because I can resolve the conflicts on my end. :sunglasses:  I'm a bit new to git workflows, so let me know if there is a better way. :question: \n. Cool, so after I've got a sign-off on the PR, I should:\n- squash my commits (after first making a backup of the branch)\n- pull latest upstream into my local dev branch\n- rebase my commit (replay commit onto latest version of dev)\n  - resolve conflicts during rebase\n- force push to my existing branch\n  - make sure to set push.default config to simple\n- after PR merged and closed, go ahead and delete the branch\nI got some info on this kind of workflow from here.\n. ",
    "bbowyersmyth": "@dougbu Ok thanks will file an issue for anything in the future.\nThe slow via a thousand slightly slow operations problem could be a good use of community time. Understand if you don't want to spend your time reviewing those changes though. Will take your comment as the rule from now on. Cheers.\n. Yes it a common one as it seems like it should be more efficient. https://github.com/dotnet/corefx/pull/336\n. ",
    "Azrann": "Hi David\nThanks for your quick response. For future reference where can I check if a function is available or not? I am sorry I am starting with vnext and I am struggling to know where to get the references from.\nCheers,\nAlberto\n. ",
    "henkmollema": "@danroth27 / @Eilon this can be closed :smile:\n. @dougbu thanks for the feedback. I just rebased, yet the checks keeps failing. I noticed they also do with other PR's.\nRegarding the tests, any recommendations on tooling to use? Since VS2015 CPT6 is broken due to the name changes.\n. @dougbu I added a test and ran the tests in Microsoft.AspNet.Mvc.Core.Test using dnx . test. A lot failed, but mine (BeginForm_RendersExpectedValues_WithDefaultArgumentsAndHtmlAttributes) succeeded.\n. @dougbu do you want me to do anything more for this?\n. @dougbu rebased with dev and squashed everything into 9eb87d4676739622e2d61803ebd9f948013363c0\n. Great, thanks!\n. Does casting ViewBag.Description to a string works when passing it to the @Html.Raw() method? Perhaps something goes wrong with the dynamic type in the Raw method, as the RuntimeBinderException suggests.\nSomething like:\ncsharp\n@Html.Raw(ViewBag.Description as string))\n. This does work as expected with MVC 5.\n. @dougbu @Eilon \nLooks like it goes wrong because the Html property of the view uses the generic interface IHtmlHelper<TModel>. This worked in MVC5 because there is no IHtmlHelper interface.\n\nRepro:\nAn 'html helper' with a Raw method:\n``` csharp\npublic interface IMyHtmlHelper\n{\n    HtmlString Raw(object x);\n}\npublic interface IMyHtmlHelper : IMyHtmlHelper { }\npublic class MyHtmlHelper : IMyHtmlHelper\n{\n    public HtmlString Raw(object value)\n    {\n        return new HtmlString(value == null ? null : value.ToString());\n    }\n}\npublic class MyHtmlHelper : MyHtmlHelper, IMyHtmlHelper { }\n```\nWith this view:\ncsharp\n@{\n    IMyHtmlHelper<object> MyHtml = new MyHtmlHelper<object>();\n    ViewBag.Test = \"<strong>Hello World!</strong>\";\n}\n<p>\n    @MyHtml.Raw(ViewBag.Test)\n</p>\nCauses the same RuntimeBinderException:\nat CallSite.Target(Closure , CallSite , IMyHtmlHelper`1 , Object )\nat System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\nat Asp.ASPV__Views_Home_Index_cshtml.<ExecuteAsync>d__13.MoveNext()\nHowever, when I change this line:\ncsharp\nIMyHtmlHelper<object> MyHtml = new MyHtmlHelper<object>();\nto this:\ncsharp\nMyHtmlHelper<object> MyHtml = new MyHtmlHelper<object>();\n(notice that the type of MyHtml is the actual class implementation MyHtmlHelper<object>)\nIt does work.\nUsing the non-generic type works too:\ncsharp\nIMyHtmlHelper MyHtml = new MyHtmlHelper();\nShould this be a new issue?\n. @danroth27 although you mentioned the sample needs a clean-up, I figured I just commit this simple change. What do you think?\n. @Eilon updated, addressed your feedback.\n. Gimme a call when you need me to rebase/squash.\n. @Eilon @dougbu squashed and rebased.\n. @dougbu updated and squashed/rebased.\ncc @Eilon \n. @pranavkm @Eilon \n. Rebased with dev.\n. @kichalla addressed feedback.\n. @Eilon @kichalla \nAs discussed in 53f3a91f01c740f3cbf5209a9eeeefd614a6cbc2\n. Using JsonSerializerSettings will create a hard dependency on Json.NET, is that desired?\n. @JamesNK good point. Was just curious because ASP.NET 5 is all about abstractions and loose coupling. Figured a using Newtonsoft.Json in the Controller class might be a bit odd.\n. @rynowak I see, thanks! :smile:\n. @JamesNK perhaps you already figured it out, but I created a small Git cheatsheet which also covers rebasing and squashing: https://github.com/henkmollema/Git-Cheatsheet#rebase-with-remote.\nThe upstream remote is called aspnet for the Mvc repo, so it will be git fetch aspnet and git rebase aspnet/dev.\n. You should follow @danroth27's suggestion.\nBut if you really want to, you can use the CallContextServiceLocator to locate the service provider:\ncsharp\nvar someService = CallContextServiceLocator.Locator.ServiceProvider.GetService<ISomeService>();\nIt exists in the Microsoft.Framework.Runtime.Infrastructure namespace. See the dnx repo.\n. I agree, it's very ugly. Is there even any good use case?\n. ",
    "MMrR0b0TT": "I'd say that is a good idea. I have been changing this everytime I start a new project and sometimes I receive some questions about this \"issue\". Change it, please!\n. ",
    "labdocodigo": "Its really a good idea. Json is a kind of standard now... Just put some configuration for those who needs XML.\n. ",
    "stanislavromanov": "It would be nice if we could just use JSON as default and leave XML as secondary. Right now it's opposite.\n. @kirthik Okey, I did sign the CLA. I hope it's good now and you can accept my pull requests in the future.\n. I would also suggest a way to rename the actual cookie name of anti-forgery token.\n. This would generate html that is not semantic? Shouldn't you use data-* for custom properties?\n. @davidfowl \nI would like to edit them both. I see that it's not possible unless I clone repo and change it in the code itself. Maybe I'm wrong and you can configure it?\n. @pranavkm Thank you very much. What about the cookie name?\n. ",
    "drub0y": "Yes, I agree, JSON should be the only configured formatter by default. :+1: \n. ",
    "saramgsilva": "yes, +1\n. ",
    "iigorr": ":+1: Absolutely \n. ",
    "AjmalVh": "+1 for JSON being default. :+1: \n. ",
    "jamescurran": "As far as I can tell, IE, by default, uses an \"Accept\" heading with both \"Application/xhtml+xml\" and \"*/*\" with no priority setting, which WebAPI apparently takes as \"JSON is as good as anything else, give him JSON\".\nChrome, OTOH, uses an Accept of  \"text/html, application/xhtml+xml, application/xml; q=0.9, image/webp, */*; q=0.8\" which WebAPI reads as \"He's rather have XML than JSON; give him that\".\nHence your result vary depending on whether you use IE or Chrome.\n. ",
    "rmja": "@yishaigalatzer correct. I am calling Json(model). I was not aware of new ObjectResult(model). It does not produce the same error.\n. Ok @yishaigalatzer. The errors I got were:\nC:\\Source\\Mvc\\src\\Microsoft.AspNet.Mvc.Core\\ActionResults\\FilePathResult.cs(11,29): error CS0234: The type or namespace name 'Interfaces' does not exist in the namespace 'Microsoft.AspNet.Http' (are you missing an assembly reference?)\nC:\\Source\\Mvc\\src\\Microsoft.AspNet.Mvc.Core\\ActionResults\\FilePathResult.cs(83,60): error CS0246: The type or namespace name 'IHttpSendFileFeature' could not be found (are you missing a using directive or an assembly reference?) at Microsoft.Framework.Runtime.DesignTimeProjectReference.Load(IAssemblyLoadContext loadContext)\nBut I think the problem is a different place, namely that nuget prefers rc-1-* packages over beta-3-* packages, so I can see that no updates in my local packages have been received since that new target release. I have now downloaded the source for the KRuntime, and things seems to work again.\n. ",
    "maxtoroq": "I didn't suggest removing TModel because the includeExpressions parameter needs it, although you could have one overload with TModel and the others without it.\n. @dougbu I agree. Although I haven't tested it, perhaps simply using object for TModel works. If it does then the only change needed is getting the modelType from the model instance.\n. @yishaigalatzer Would you mind explaining the security concerns?\n. @yishaigalatzer Cannot argue against back compat. There's little value in adding more overloads, which anyone can do. If the default behavior is not changed, what's the point.\nThere are other parts of the framework that work against the runtime type instead of the declared type, e.g. Html.EditorForModel(). My intention was to make these different parts work together without special configuration.\n. ",
    "Boglen": "It happens after i call IFormFile.SaveAs(string).\nI'm trying to modify Upload file to use IFormFile.SaveAsAsync\n...\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'tm1msgyg.sbt'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'xe0fqc5u.fkq'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'avqdm0ct.eoj'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded '51zz0rb0.cfz'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded '114dqk4c.dxe'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'nhamckgr.i5j'. Cannot find or open the PDB file.\n'klr.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'jqxeqlhu.x4r'. Cannot find or open the PDB file.\nklr.exe Information: 0 : [ApplicationShutdown]: Requesting shutdown.\nklr.exe Information: 0 : [ApplicationShutdown]: Requested shutdown.\nThe program '[16460] klr.exe' has exited with code 0 (0x0).\n. I launch my app without IDE and all work as expected.\nNeed to try the latest release VS CTP5\n. Let me try to explain the idea.\n1) I have entity with controller,action, parameters fields. Controller and action is a string fields, and parameters = Dictionary<string,object>() {}\n2) In view i have @Url.Action(item.Action, item.Controller, item.Parameters)\n3) Routes:\n```\n               routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller}/{action}/{id?}\",\n                    defaults: new { controller = \"Page\", action = \"Index\", id = 2 },\n                    constraints: new { id = @\"\\d+\" }\n                    );\n           routes.MapRoute(\n                 name: \"defaultWithoutAction\",\n                 template: \"{controller}/{id?}\",\n                 defaults: new { action = \"Index\" },\n                 constraints: new { id = @\"\\d+\" }\n               );\n\n```\n1. In the first case i have Controller = \"Page\", Action = \"Index\", Parameters = new {id = 1}.\n   @Url.Action generates \"/Page/Index/1\"\n2. (Bug) In the second case i have Controller = \"Page\", Action = String.Empty, Parameters = new {id = 1}.\n   @Url.Action duplicate all patameters from current page route values\n3. (Bug) In the third case  i have Controller = \"Page\", Action = null, Parameters = new {id = 1}.\n   From http://localhost/Page/Index/5 site page @Url.Action generates \"/Page/Index/1\"\n   From http://localhost/Page/AwesomePage/5 @Url.Action generates \"/Page/AwesomePage/1\"\nIt would be nice if the second and third case, the helper has generated such url:\n \"/Page/1\" - if we have route with default action defined.(This link works, by the way. If i have pre-defined route that uses default defined action, I do not need this action in the link)\n\"/Page/Index/1\" - This result is also nice, but looks a little less beautiful.\nMicrosoft.AspNet.Mvc.Core version - 6.0.0-beta4-12872\n. One more problem:\n1) I have entity with controller,action, parameters fields. Controller and action is a string fields, and parameters = Dictionary<string,object>() {}\n2) In view i have @Url.Action(item.Action, item.Controller, item.Parameters)\n3) Routes:\n```\n               routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller}/{action}/{id?}\",\n                    defaults: new { controller = \"Page\", action = \"Index\", id = 2 },\n                    constraints: new { id = @\"\\d+\" }\n                    );\n           routes.MapRoute(\n                 name: \"defaultWithoutAction\",\n                 template: \"{controller}/{id?}\",\n                 defaults: new { action = \"Index\" },\n                 constraints: new { id = @\"\\d+\" }\n               );\n\n```\n1. In the first case i have Controller = \"Page\", Action = \"Index\", Parameters = new {id = 1}.\n   @Url.Action generates \"/Page/Index/1\"\n2. (Bug) In the second case i have Controller = \"Page\", Action = String.Empty, Parameters = new {id = 1}.\n   @Url.Action duplicate all patameters from current page route values\n3. (Bug) In the third case  i have Controller = \"Page\", Action = null, Parameters = new {id = 1}.\n   From http://localhost/Page/Index/5 site page @Url.Action generates \"/Page/Index/1\"\n   From http://localhost/Page/AwesomePage/5 @Url.Action generates \"/Page/AwesomePage/1\"\nIt would be nice if the second and third case, the helper has generated such url:\n \"/Page/1\" - if we have route with default action defined.(This link works, by the way. If i have pre-defined route that uses default defined action, I do not need this action in the link)\n\"/Page/Index/1\" - This result is also nice, but looks a little less beautiful.\nMicrosoft.AspNet.Mvc.Core version - 6.0.0-beta4-12872\n. I understand. But what if I want to use a dynamic collection of parameters? Or will be available only to the static enumeration?\n. \n. project.json \n    \"dependencies\": {\n        \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Hosting\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta5-\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta5-\",\n        \"Microsoft.AspNet.Identity\": \"3.0.0-beta5-\",\n        \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta5-\",\n        \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Session\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta5-\",\n        \"EntityFramework.SqlServer\": \"7.0.0-beta5-\",\n        \"EntityFramework.Commands\": \"7.0.0-beta5-\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta5-\",\n        \"Microsoft.Framework.OptionsModel\": \"1.0.0-beta5-\",\n        \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta5-\",\n        \"Microsoft.Framework.Cache.Distributed\": \"1.0.0-beta4-\",\n        \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta5-\"\n    }\nMicrosoft.AspNet.Mvc version 6.0.0-beta5-13474\ndnx-clr-win-x86.1.0.0-beta5-11427\nVS2015 CTP6, Windows 10 Pro 10049, Chrome 41.0.2272.118.\nRoutes:\n               UseMvc(routes =>\n               {\n                   routes.MapRoute(\n                        name: \"default\",\n                        template: \"{controller}/{action}/{id?}\",\n                        defaults: new { controller = \"Page\", action = \"Index\", id = 2 },\n                        constraints: new { id = @\"\\d+\" }\n                        );\nroutes.MapRoute(\n                     name: \"defaultWithoutAction\",\n                     template: \"{controller}/{id?}\",\n                     defaults: new { action = \"Index\" },\n                     constraints: new { id = @\"\\d+\" }\n                   );\n           });\nI'm add hidden Id field by @html.HiddenFor(m => m.Id) in View.\nThe screenshot shows the Context.Request.Form variables and they have right values.\nIf I add the attribute [FromForm] to the parameter model in  Edit action , everything comes back to normal\n. Now understood . thank a lot!\n. ",
    "colemickens": "@filipw has a solution for this. He has a Web API 2 compatible version here: https://github.com/filipw/Strathweb.TypedRouting and blogged about a version for ASP.NET5/MVC6: http://www.strathweb.com/2015/03/strongly-typed-routing-asp-net-mvc-6-iapplicationmodelconvention/\nI'm currently using it successfully.\n. ",
    "ThoughtHaven": "I  understand this decision and knew you would have talked about this. Unfortunately for me though, my company's core validation cannot be ported over the use Mvc's model binding now. For good reason, our model validation implementation is async all the way up our stack. And we can't provably call our async code in Mvc's sync interfaces without deadlock issues (or always enforce ConfigureAsync(false)).\nSo we'll need to keep throwing typed exceptions in our Mvc apps and catch them in filters. Not ideal but I do understand why the masses wouldn't need async model validation 90% of the time. Oh well.\nThanks for the reply.\n. ",
    "Samvrie": "I got it working again with unloading and loading the project and changing to beta2.\nIt seems that I've the problem with the package xunit.runner.aspnet so I will move to the appropriate Repo ;)\nThanks for the help!\n. @dougbu Thanks for the answer i will try a RegExp for my Email checking.\nIs there a way to actually add my own DataAnnotations validations?\n. Thanks! I will look into that!\n. Well i'm facing an other problem. I've implemented my own class for EnumValidation, my attribute is properly created, but the IsValid method is never called.\n. Yes sure, we can close this issue, i will open a new one more appropriate to the case\n. ",
    "stage88": "\nDone without VS 'cos that's how I'm rollin' this week\n\nIt would be super-awesome if you blogged about how you did this without VS. If you have already, please forgive my ignorance and let me know where I can read about it.\n. ",
    "glen-84": "\nThis is mostly (completely?) translation, and not other things like number/date formatting, etc., so I think it would be better to give it a name that makes this obvious (t, tr, trans, translate, etc.)\n\"loc\" also seems like a shortening of \"locale\" (and not just localization), so \"loc-id\" is like \"locale identifier\", which you may expect to be something like \"en-US\". If you only want to support resource files, then maybe something like \"res\" would make more sense.\nThe HTML helper syntax is rather verbose for something that will be used a lot within views. I would suggest using something like @T() instead. This is used by the Orchard CMS, if I'm not mistaken (meaning possible conflicts), but I don't think that that should influence the decision too much (the helper could be disabled on demand or you could use @TR(), etc.). @Res() maybe if this is just for resources.\nYou mentioned that you don't really like the @using() syntax for capturing content. Have you thought about supporting new syntax for this, such as:\n\n```\n@T() {\n    This is\n    a paragraph\n    of text\n}\n@Html.Form(...) {\n    \n        @Html.TextBoxFor(m => m.UserName, new { @class = \"form-control\" })\n    \n}\n```\n... where everything between the braces is available to the HTML helper?\n\nThe following points may not be directly related to this issue, but I'm not sure where else to put them. (I will move them if you tell me where)\n(1) Regarding the selection of the culture/locale, will you be doing something similar to this (as middleware)? i.e. strategy-based selection. I think Orchard also has something like this. Basically, you have a prioritized list of strategies (implementing ICultureSelector or ICultureSelectionStrategy, for example). You iterate over each of them, calling a method such as \"Select\" or \"GetCulture\", which either returns a Culture or null if it cannot be determined using that strategy. The first strategy to return a Culture will break the loop. After this, a method (f.e. \"Update\" or \"SetCulture\") will be called on each strategy, which will allow it to update the HTTP request/response (it could remove a query string param, set a cookie, change the host, change the URI path, etc.). If the method makes any such changes, the user will be redirected (on GET requests only). Examples of strategies would be:\nQueryStringStrategy           (?culture=en)\nHttpAcceptLanguageStrategy    (Accept-Language: \"en-GB,en;q=0.8,de;q=0.6,nl-NL;q=0.4,nl;q=0.2\")\nHostNameStrategy              (example.de or de.example.com)\nCookieStrategy                (Cookie: culture=en;)\nUriPathStrategy               (example.com/en)\netc.                          (load from user preference in the database, etc.)\nEach strategy would have its own set of options (I won't go into the details). You would also set a list of supported cultures for your application.\n(2) Is any of the following planned (with regard to translation)?:\n- Alternative translation \"data-sources\", f.e. loading translation data from a database, or Gettext, CSV, etc.\n- Plural translations. It seems like there are at least two systems for representing plural rules/forms:\nCLDR Language Plural Rules (plural categories / mnemonic tags)\nGettext PO Plural Forms (plural form / header)\nNote that a number of systems only allow one word in a message to be pluralized, so you can't properly translate a message like \"He ate {0} apple(s) and {1} banana(s)\". This is not good.\nSee: https://github.com/wikimedia/jquery.i18n#plurals\nSee: https://developers.facebook.com/docs/opengraph/guides/internationalization#plurals\n- Gender-based translations.\nSee: http://stackoverflow.com/questions/4272933/what-is-the-best-way-to-translate-to-a-language-with-genders-in-rails\nSee: https://github.com/wikimedia/jquery.i18n#gender\n- Grammar-based translations.\nSee: https://github.com/wikimedia/jquery.i18n#grammar\n- Use from places other than views (translating in the controller [probably shouldn't happen much], translating model display names & validation messages, etc.)\n- The ability to opt into events like \"MessageTranslated\" and \"MissingTranslation\".\n- Message documentation. The ability to comment on or explain the context of a message.\nSee: https://github.com/wikimedia/jquery.i18n#message-documentation\nSee: https://docs.djangoproject.com/en/1.7/topics/i18n/translation/#contextual-markers\nSee: https://www.gnu.org/software/gettext/manual/html_node/Contexts.html#Contexts\n- Text domains / namespaces. Grouping messages into logical \"domains\".\nCreate a domain per \"area\", have a \"default\" domain which may or may not override translations in areas, etc.\n- Other localized resources, f.e. images. For this it might be easiest to just do something like: <img src=\"@{\"x_\" + CurrentCulture + \".png\"}\" />\nFrom my limited research, I see two options for the message format, both of which should support multiple plurals/gender/grammar etc.:\n1. SmartFormat.NET\n2. ICU MessageFormat\n- A .NET implementation can be found here.\nSo putting this all together, it may look something like this (in a Razor view):\n<p>\n    @T() {\n        {gender, select, male {He} female {She}} ate {count, plural, one {1 apple} other {# apples}}.\n        Line 2.\n    }\n</p>\ngender and count could come from the current scope, or you could use numeric placeholders, like:\n<p>\n    @T(gender, count) {\n        {0, select, male {He} female {She}} ate {1, plural, one {1 apple} other {# apples}}.\n    }\n</p>\nWithout using the \"content capture\" syntax:\n<p>\n    @T(\"{gender, select, male {He} female {She}} ate {count, plural, one {1 apple} other {# apples}}.\")\n</p>\n<p>\n    @T(\"{0, select, male {He} female {She}} ate {1, plural, one {1 apple} other {# apples}}.\", gender, count)\n</p>\nThere is also number and date/time formatting, etc., which I haven't included above.\nPowerful localization features could give ASP.net a competitive advantage.\n. > Thank you very much ...\nYou're welcome, and thank you for reading. :smile:\n\nAdding support for new syntax in Razor is obviously a fairly high bar and we're beyond the time for 1.0.0 ...\n\nUnderstood. Do you think something like this may be considered for the next release of Razor (post 4.0)? It's no secret that I'm not a big fan of tag helpers (and would love them to be implemented as a plug-in), so it would be nice to have a more code-focused alternative for things like the cache helper, etc.\n\nA middleware for setting the culture on the request (from header, cookie, and custom delegate);\n\nHow will you handle prioritization? For example if both a cookie is set, as well as a header or delegate, which takes priority? Would using a priority queue and a culture selection interface take a lot of time to implement? (for v1 you could leave out the update/set-locale side of the process). The other benefit here is that users could easily create other \"strategies\" (although I guess they could write their own middleware if necessary).\n\nA new localization abstraction API (ILocalizer) for easy retrieval of locale-specific strings including substitution of values with culture specific formatting ...\n\nThis sounds (and looks) good so far, unfortunately I get about 36 errors when trying to build the solution, so I can't play around with it much.\n\nUpdates to MVC to support the new API, including a view specific ILocalizer and updates to the validation and metadata model provider system ...\n- Won't there be a lot of duplication if you have one resource file per view?\n- Will it be possible to configure validation messages without using attributes? (defaults in addition to per-type overrides) I think that putting the validation messages in the models will get messy quite quickly.\nWe might also support locale specific views ...\n\nI've seen this type of thing before, but I think that (a) there will be loads of duplication, and (b) it will get messy [especially with more than just a few supported locales]. There may be performance implications as well, with file existence checks, fallbacks, etc. I would definitely keep this as \"disconnected\" as possible, I don't think that many people will use it (but I could be wrong).\n\nWe won't be able to cover all your suggestions for 1.0.0 ...\n\nThat's expected. The main purpose of my research and suggestions was to give you an idea of the type of functionality that would be required in a \"perfect-world\" scenario. The important thing is that you have this information in the back of your mind while you are designing the APIs. If the interfaces are flexible enough, implementations can be added/updated later (or contributed).\n\nI hope to have a sample project published in the following week\n\nYou're ahead of schedule! :smile:\nSome initial feedback / questions:\n1. When you use locString[\"Home\"], does that string represent the \"id\" or the \"default\"? I'm assuming the latter. How would you specify the ID?\n2. Have you considered adding an option to quietly handle formatting exceptions? I think it's possible that the resources could come from an external location and contain formatting errors. Maybe the default message could be used if there is a formatting exception (opt-in)?\n3. Is it necessary to have ResourceManagerLocalizer in addition to ResourceManagerWithCultureLocalizer? Is it not possible to just have:\nResourceManagerLocalizer(ResourceManager resourceManager, CultureInfo culture = null)\n(or two constructors)\nThat's it for now, I might add more once I'm able to run the application.\nPS. Can you let South Africa win the World Cup this time? :laughing:\n. @danroth27,\nAre the context objects taken from the services container, or from somewhere else?\nIf it's the former, then I agree with @atrauzzi, that a single [Inject] attribute is much more clear.\nIf it's the latter, then I think that a single attribute would be better. [ActionContext] doesn't tell me what it's doing, and even looks repetitive.\nI also prefer @inject to @service, for the same reasons mentioned by @atrauzzi and @evil-shrike.\nFinally, it seems to me that [FromService] is inconsistent with the other [From*] attributes, in that all the others bind data from the request, whereas [FromService] simply resolves the object via DI. i.e. The others (I assume) create an instance of the object and bind the properties to data from the request, while [FromService] requests an instance from DI \u2013 two different concepts in my mind. For this reason I think that [FromService] could be removed in favour of [Inject].\n. Does \"import\" refer to importing it into each view file? I initially thought that the @using directives were being referred to as imports, but of course that's not the only directive that you can use within this file. _ViewDirectives would be another option, but I'm not strongly against the suggested name.\nDoes GlobalImport do something that ViewStart doesn't? I forgot why there are two files, since they both contain \"CS HTML\" (Razor code).\nBy the way, would it be difficult to allow these files to be renamed by the developer? (I've never been a fan of the underscore prefixes)\n. Something like this could be huge in terms of enabling modular web applications (i.e. dropping a \"Forum\" or \"Blog\" module into an existing MVC web application.)\nHow difficult would it be to implement the following?\nOpting in to pre-compilation:\nIn Login.cshtml\n``` c#\n@using X\n@class MyNs.LoginView (LoginViewModel model, SignInManager signInManager)\n...\n```\nWhen a class directive is present (with the format @class Namespace.ClassName (ctor parameters, ...)), the view is automatically compiled into a class with the specified name (in the specified namespace) with an appropriate constructor (with the specified arguments). The param list would be optional, in which case a default constructor would be used (or one with a generic object Model argument).\nReturning a pre-compiled view from a controller:\nIn AccountController.cs\nc#\npublic IActionResult Login\n{\n    return new LoginView(model, signInManager);\n}\nYou may also be able to swap out the view using DI, which is really useful if you want to customize a view in a referenced assembly (\"module\"). Before returning the instance, you could also call methods on it and/or register event handlers to alter the text stream to be rendered (f.e. you may replace something in the HTML).\nBenefits:\n\nA clear and logical way to opt-in to pre-compilation.\nThe ability to easily pass multiple arguments to a view.\nStrongly-typed views, meaning less magic strings and an easy way to reference views in other assemblies.\nClean separation of file-system-based (runtime-compiled) views, and pre-compiled views. No need for trying to map a view name or path to a type. Usage of return View() remains the same.\nLess need for @inject and ViewBag. I have an idea to further reduce the need, but I won't mention it now.\nThe benefits of pre-compiled views: Fast, embedded, no server-side compilation, etc.\n\nEdit: I forgot to mention, this can be implemented without the parameter list (just @class MyNs.LoginView) if it would require too many changes to ModelState, etc.\n. ",
    "arishlabroo": "Apologies, just realized Duplicate of https://github.com/aspnet/Mvc/issues/634\n. ",
    "shanselman": "So like this?\nvar myString = Url.RouteUrlAsBuilder(\"GetDinnerById\", new { id = dinner.DinnerId }).ToFull();\nOr \nvar myString = Url.RouteUrlAsBuilder(\"GetDinnerById\", new { id = dinner.DinnerId }).ToAbsolute();\nStill seems like a lot of moving parts to do something I'm gonna do ALL DAY LONG.\n. @rustd But why do I need to RouteUrlAsBuilder? What's the Builder? What's wrong with RouteUrlAsAbsolute and don't even bother with the ToFull. The ToString is implied.\n. Fantastic.\nOn Fri, Feb 6, 2015 at 9:42 AM, Yishai Galatzer notifications@github.com\nwrote:\n\nWebApi had this feature named link - We should bring it back:\nFrom WebApi code\n```\npublic class UrlHelper\n{\n    // lots of other methods here\n    // ......\n    //\npublic virtual string Link(string routeName, object routeValues)\n{\n    return Link(routeName, new HttpRouteValueDictionary(routeValues));\n}\n\n/// <summary>\n/// Creates an absolute URL using the specified route and route data.\n/// </summary>\n/// <param name=\"routeName\">The name of the route to use for generating the URL.</param>\n/// <param name=\"routeValues\">The route data to use for generating the URL.</param>\n/// <returns>The generated URL.</returns>\n[SuppressMessage(\"Microsoft.Usage\", \"CA2234:PassSystemUriObjectsInsteadOfStrings\", Justification = \"It is safe to pass string here\")]\npublic virtual string Link(string routeName, IDictionary<string, object> routeValues)\n{\n    string link = Route(routeName, routeValues);\n    if (!String.IsNullOrEmpty(link))\n    {\n        link = new Uri(Request.RequestUri, link).AbsoluteUri;\n    }\n\n    return link;\n}\n\n```\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Mvc/issues/1966#issuecomment-73280244.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. Exactly. If there isn't a placeholder file then there's no folder. If you\ngit clone something then you get an error. This is going to happen all the\ntime. If webroot is required then it needs to get created by whatever\nbuilds the project.\nOn Wed, May 20, 2015 at 4:19 PM, Daniel Roth notifications@github.com\nwrote:\n\nIt often happens because you have a project checked into git that has an\nempty wwwroot folder, which git then ignores.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Mvc/issues/2585#issuecomment-104069643.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. ",
    "csharpfritz": "This does feel a bit tedious...  I'd almost want the scheme and host to default to the values the current request came in on.  Most of the time, I think these values would stay the same from one request to the next\n. ",
    "KevinDockx": "+1.  I'm the author of Marvin.JsonPatch, and aim to fully implement the spec by the time I reach v1, but I'd prefer this to be baked in.  Of course: fully according to spec (eg: not like the OData Delta implementation).  A request from any type of client should be able to be accepted by an HttpPatch action at Web API level as long as its according to spec.  Same for the other way around: if helper classes for creating such a list of operations are included at MVC (-server side) level, a request created at that side with the list of operations in its body should be according to spec, so any API created in any tech that supports the standard can accept that request.\nI'd be glad to help/provide input if needed.\n. Hi Yishai,\nof course, I'd be happy to!\n. Closed - should be to jsonpatch branch\n. @kirthik: tnx!  On the spacing issue: - ok, sounds good to me :)\n. Checked in my code base: this is an old TODO that has since been fixed.  It referred to the fact that when dev on JsonPatch started nested properties weren't supported - they are now and have been for a while :)\n. Hi Ryan, yes, there are already tests for working with nested objects in the NestedObjectTests class.\n. Missing 2 changes - new PR will be created\n. Latest commit auto-added: statuscode is now included in JsonPatchException\n. ",
    "jwaliszko": "@dougbu, @yishaigalatzer: Thanks for your time. I had tried to fix it but some of the unit tests were not satisfied. I've read them, I know that the change would be problematic because of the broad usage of legacy code related behavior. \nWhat's more, I don't even consider this issue as being problematic that much, since there are obviously approaches, which are clearly perceived as better and recommended over the usage reported in this thread. Nevertheless, I've decided to post the issue here just to point it out and check what could possibly be done, if anything.\nRegards\n. ",
    "rahuldhariya01": "Hi Danroh27, Don't understand why AJAX helper is not available ? this is very basic. do you have some alternative ? i am surprised by this ignorance of Microsoft team.\nIf this is not available then we have to go back to MVC 5.  \nCan you suggest any alternative way apart from J query ?\n. Thanks Branciat.  Even I tried the same but now success, failed ,onbegin,on completion  event into this ?\n. ",
    "ghost": "Hi rahuldhariya01,\nActually, i write the ajax tags data-ajax-* directly without helper, finally it is ease and is still readable. The autocompletion support would be useful in the source editor.\n. An example of ajax action\n```\n\n```\ndata-ajax=\"true\" is required, data-ajax-mode can be to have a value as replace, before, after,...\nYou use javascript function without parameter for each data-ajax-(failure, success, begin), \nit seems to me.\nOf course, added the jquery-ajax-unobtrusive script into the layout.\nSee the brad wilson's blog http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-ajax.html for a comparison AjxHelper and the html generated, also in complement the source code ajax unobtrusive.\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @msms6174, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brennan Conroy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. This was caused by some weird config issue on two of my development systems; a reinstall after finding a number of other issues and everything works as expected? but haven't found root cause as yet :'(\n. The partial view\n``` csharp\n@model List\n\n\n\nObservations\n        \n\n\n\n\n\n\n\n        @if (ViewBag.ModeEdit)\n        {\n            Html.BeginForm(FormMethod.Post, new { data_ajax = \"true\", data_ajax_mode = \"replace\", data_ajax_update = \"#AjaxContent\" });\n        }\n                \n\n\n\n\nContenu\nDate\nCr\u00e9\u00e9 par\nActions\n\n\n\n                                @for (int i = 0; i < Model.Count; i++) { \n                                    \n                                        @if (ViewBag.ModeEdit)\n                                        {\n                                            \n                                                @Html.AntiForgeryToken()\n                                                @Html.EditorFor(m => m[i].Content, new { HtmlAttributes = new { @class = \"form-control\" } })\n                                            \n\n                                                @Html.HiddenFor(m => m[i].AddressableId)\n                                                @Html.EditorFor(m => m[i].Created, new { HtmlAttributes = new { @class = \"form-control\" } })\n                                            \n\n                                                @Html.HiddenFor(m => m[i].Id)\n                                                @Html.EditorFor(m => m[i].CreatedBy.UserName, new { HtmlAttributes = new { @class = \"form-control\" } })\n                                            \n                                        }\n                                        else\n                                        {\n                                            @Html.DisplayFor(m => m[i].Content)\n@Html.DisplayFor(m => m[i].Created)\n@Html.DisplayFor(m => m[i].CreatedBy.UserName)\n                                        }\n                                        \n\n Supprimer\n                                            \n\n\n                                }\n                            \n\n\n\n\n\n\n\n\n                                    @if (ViewBag.ModeEdit)\n                                    {\n                                        \n Valider\n                                        \n\n Annuler\n                                        \n                                    }\n                                    else\n                                    {\n                                        \n Editer\n                                        \n                                    }\n                                \n\n\n\n\n        @if(ViewBag.ModeEdit)\n        {\n            Html.EndForm();\n        }\n    \n\n```\nThe entity\n``` csharp\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing Mediagral.User.Models;\nnamespace Mediagral.Core.Models\n{\n    public partial class Observation\n    {\n        public int Id { get; set; }\n    public string CreatedById { get; set; }\n\n    public int AddressableId { get; set; }\n\n    [Required, DataType(DataType.Text)]\n    public string Content { get; set; }\n\n    [Column(TypeName = \"datetime2\")]\n    public DateTime Created { get; set; }\n\n    public virtual MediagralUser CreatedBy { get; set; }\n    public Addressable Addressable { get; set; }\n}\n\n}\n```\n. @dougbu \nI'm at home, i live in france. I try the negation after update my config is the same at work.\ni'm missing the database migration scripts for complete installation. I will see monday, back to work.\n. @dougbu \nThis don't change anything. I've still the attribute name empty\n<input class=\"form-control text-box single-line\" data-val=\"true\" data-val-required=\"Le champ Content est requis.\" id=\"z0__Content\" name=\"[0].Content\" value=\"Le lundi 5 septembre 2011 13:34:55\" type=\"text\">\n. Yes i forgot the tag </input> in example, no override editor template, i have the same problem with other partial view and other entity, always a collection as model.\nI use visual studio 2015 ctp6 and asp mvc master beta 3.\n. Yes it's the problem for each view with a collection as model.\nThe problem is to action level, the [FromForm] don't hydrate the entity when the name is empty.\n[HttpPost]\n        public IActionResult Edit([FromForm]List<Observation> id)\n        {\n            ObservationRepository _obsRepo = new ObservationRepository(_db);\n            if (id != null && ModelState.IsValid)\n            {\n                foreach (Observation obs in id)\n                {\n                    _obsRepo.UpdateObservation(obs);\n                }\n                return Edit(id[0].AddressableId);\n            }\n            else\n            {\n                return PartialView(\"_Common\", id);\n            }\n        }\nI tried with Observation[], the parameter is always null.\n. I add  \"id\" in the name of the html generated with the web development toolbox of firefox, no problem, the FromForm hydrate the entity.\n. I'm interested by the workaround [FromForm(Name = \"Model\")], but appear not implemented in the beta3. Only dev branch ?\n. Perfect ! Thanks\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @bladehr8, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. @danroth27 \nIt would be nice if ASP.NET MVC5 can include this in the new configuration model (json file) for very complicated configuration routes. Or any torturials to do the self json configuration for routes?\nNotice that this isn't a bug, so no need to \"won'tfix\" tag, this is just a suggestion to enhance the functions for MVC.\n. @danroth27 \nIt would be nice if ASP.NET MVC5 can include this in the new configuration model (json file) for very complicated configuration routes. Or any torturials to do the self json configuration for routes?\nNotice that this isn't a bug, so no need to \"won'tfix\" tag, this is just a suggestion to enhance the functions for MVC.\n. @danroth27 \nThanks! Maybe this issue can be considered to be done for the next version of MVC 6 or later. I think this should be useful and practical.\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @KevinDockx, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @haruair, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @femiot, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @henkmollema, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @Alxandr, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @Alxandr, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. :+1: \n. @juliano, @mfpalladino can you guys shed some insights, how one can pursue this one in Mvc repo? Would you like to send a PR for this? :smile: \n. The issue looks only to appear when RazorPreCompilation GenerateSymbols = true; I'll provide more info in a couple of days as I'm having break this weekend.\n. ",
    "dtkujawski": "To add to what @Shazwazza wrote above - this also seems to support the @inherits directive.  So, you can derive your views from a base class globally without having to put @inherits at the top of each view.\n. ",
    "MelGrubb": "I'm seeing this on a fresh project using MVC 5.2.3 (Jan 15, 2015). Either this is a regression, or it's not the same issue as #524. Specifically, this is about the selected VALUES in a drop-down taking on values from previous drop-downs on the same page, not the list of options.\n. Oh, you mean rc1 of MVC 6. I see it now.\n. I hope so. This has the potential to corrupt data in production systems. Certainly in the one I'm working on, throwing out perfectly valid nulls, and substituting them with arbitrary values based on a completely different field is pretty bad. I'm going to work around it for now by giving the nulls a magic value (-1) instead, and then translating them back to nulls on the post.\n. I guess that's what I'll do for now. Unfortunately, this particular list is rather lengthy, so my viewmodel just exploded. Fortunately, it's an internal application, so bandwidth is not a problem.\n. ",
    "Daniel15": "Thanks @dougbu! \n. Thanks @NTaylorMullen! Is there a way to add the using statement to _GlobalImport.cshtml automatically when a NuGet package is installed?\n. Awesome, thanks @antonmes! Do you know if there's a Mono bug number we can post here for reference?\n. Also note that MONO_MANAGED_WATCHER=disabled will totally disable file system watching, and I'm not sure if that will break anything or not. Perhaps I'll just try downgrading Mono, or using a Linux VM instead.\n. Ah I see, that explains a bug I encountered around a year ago: https://bugzilla.xamarin.com/show_bug.cgi?id=19071\n. The Mono release notes say that it's only an issue when watching \"very large directories\". Maybe only watching the *.cshtml files rather than the whole directory could work around the issue? I haven't looked at the code so I'm not sure what it's doing.\n. Ohhhh, good catch! l didn't see any errors during the test run so I thought it was running :( I'll fix this tonight.\n. ",
    "phillip-haydon": "@yishaigalatzer cannot, this is done at a filter.\nI had to add an action filter to fix the broken design of WebAPI giving null objects, but because that happens after model binding and validation I have to do validation in a action filter myself. \nI just rewrote the validation myself just lacking support for complex models, since we don't have anything complex. \nPlan is to move to MVC 6 when it's released with VS 2015. Cannot run beta at work. \n. @yishaigalatzer I have a global action to fix up the null parameters. \nThe validate stuff is helpful tho. Thanks a lot.\n. ",
    "milutinovici": "Well, this class was one of several I had to modify, to enable generic controllers.\n. I got it working several times, but it keeps breaking, cause i'm building against a moving target :)\nI could make a gist of the current iteration, if you want.\n. https://gist.github.com/milutinovici/9bc3c22fc962175c8084\nThis of course isn't production quality, but it works. At least is works with some version :)\nI removed some of the code that I just copied from base classes, that isn't exposed.\n. You are right in your assumption, and your suggestions are really helpful. Gotta love the open source. \n. ",
    "Rast1234": "Thanks for all the info!\n. ",
    "aanufriyev": "Here is gist https://gist.github.com/aanufriyev/4bd6b4b19cec0cd5e755\nJust a sample, but controller instance can act as dependency provider. Anyway - type of controller is available, but I think it is not a good idea to create controller instances in filter.\n. This stuff can become messy :) Also factor in some inheritance... And exceptions can be quite granular.\nC#\n[ExceptionMapping(typeof(ScimResourceConstraintException), HttpStatusCode.PreconditionFailed)]]\n[ExceptionMapping(typeof(ScimResourceConflictException), HttpStatusCode.Conflict)]\n[ExceptionMapping(typeof(ScimResourceNotFoundException), HttpStatusCode.NotFound)]\n[ExceptionMapping(typeof(InvalidScimOperationException), HttpStatusCode.BadRequest)]\n[ExceptionMapping(typeof(SomeParsingException), HttpStatusCode.BadRequest)]\n[ExceptionMapping(typeof(InvalidOperationException), HttpStatusCode.BadRequest)]\n[ExceptionMapping(typeof(NotImplementedException), HttpStatusCode.NotImplemented)]\npublic class FooController : Controller\n{\n    [ExceptionMapping(typeof(ScimResourceConstraintException), HttpStatusCode.PreconditionFailed)]]\n    [ExceptionMapping(typeof(ScimResourceConflictException), HttpStatusCode.Conflict)]\n    [ExceptionMapping(typeof(ScimResourceNotFoundException), HttpStatusCode.NotFound)]\n    [ExceptionMapping(typeof(InvalidScimOperationException), HttpStatusCode.BadRequest)]\n    [ExceptionMapping(typeof(SomeparsingException), HttpStatusCode.BadRequest)]\n    [ExceptionMapping(typeof(InvalidOperationException), HttpStatusCode.BadRequest)]\n    [ExceptionMapping(typeof(NotImplementedException), HttpStatusCode.NotImplemented)]\n    public void FooAction()\n    {\n    }\n}\nMaybe ExceptionMappingAttribute can contain more then one mapping, but it feels a bit strange to have two filters for for exception mapping. \n. I think that filter stuff will be ok. Will move mapping to it. One thing still bugs me:\nIn old case - controller was owner of knowledge about it own exception mappings. New way - this knowledge is separated into another entity, which is mapped one-to-one with controller and cannot be used in other places(At least in my case. Will be strange to use specific protocol exception mapping with anything other then base protocol endpoint controller).\n. I'm talking about encapsulating knowledge inside entity, that must own it exclusively. Sorry for crappy English\n. Thanks for answers. Will close issue and use suggested way for now.\n. ",
    "BrianVallelunga": "I'm with @Bartmax here. I've been researching this for a few days and am trying to find a way to move forward using Gulp. I'm mostly hung up on two of the issues he points out: 1) How do I reference my bower components during development if they're not in wwwroot. and 2) When/how do I modify my views for optimization? Obviously I don't want to accidentally use Gulp and useref on my Views in development and then have to undo the changes before I check-in code, but I don't see much of an alternative. Some guidance would be nice on these two subjects.\nThe best plan of action I've come up with is to advise people keep wwwroot entirely free and not checked in to source control. Then have Grunt or Gulp populate it with a before or after build task. This ensures that scripts and images don't get modified by the tasks and then checked into source control accidentally.\n. My current in-progress setup is:\n1. Keep wwwroot out of source control.\n2. Create a Gulp task called \"Build\" that does the following:\n   1. Clean wwwroot\n   2. Use bower-main-files with Gulp to have all bower dependencies copied to wwwroot\n   3. Write other simple Gulp tasks to copy images, and process LESS/SASS, putting the files (unminified/unbundled) into wwwroot\n3. Have my CSHTML reference files in their final wwwroot development location. For example: /assets/css/reset.css\nThe above should work great for development. For production/deployment, my plan is to run the same Build task, followed by an Optimize task that modifies my views and wwwroot files in-place, replacing where needed. I'm still working on this one though.\n\nUpdate\nI've given up on the above process since it is too difficult to modify the views and to combine assets already in the wwwroot folder. Instead, I'm combining and minifying with source maps in development like others here.\nWith regard to the Bower libraries, using gulp-main-bower-files plus gulp-filter worked well for me. Here's what I'm doing now for Bower libraries:\n```\ngulp.task(\"lib-scripts\", function () {\n    log(\"Copying library scripts\");\nvar scriptFilter = filter(\"**/*.js\");\n\nreturn gulp\n    .src(mainBowerFiles())\n    .pipe(scriptFilter)\n    .pipe(sourcemaps.init())\n    .pipe(uglify())\n    .pipe(concat('lib.js'))\n    .pipe(sourcemaps.write('maps'))\n    .pipe(gulp.dest(config.wwwRoot + \"scripts\"));\n\n});\n```\nAnd for my css files:\n```\ngulp.task(\"app-styles\", function () {\n    log(\"Compiling SASS -> CSS and copying\");\nvar revManifest = gulp.src(config.temp + \"rev-image-manifest.json\");\n\nreturn gulp\n    .src(\"./Assets/Styles/*.*\")\n    .pipe(plumber())\n    .pipe(sass())\n    .pipe(autoprefixer())\n    .pipe(sourcemaps.init())\n    .pipe(revReplace({ manifest: revManifest }))\n    .pipe(concat(\"app.css\"))\n    .pipe(minifyCSS())\n    .rev() // TODO: figure out how to point to this renamed file in the view\n    .pipe(sourcemaps.write('maps'))\n    .pipe(gulp.dest(config.wwwRoot + \"styles\"));\n\n});\n```\nI still think MS has a major issue introducing this new workflow to existing MVC users. Instead of a couple of Nuget package and a few easy steps, I had to install 17 Gulp plugins to get the same results.\nActually, the results aren't entirely the same either. I'm still unable to version the whole concatenated and minified CSS file though. While I can use rev to rename the css file to app-HASH.css, I'm going to have to write a server-side helper to enable the view to point to the right file. This isn't a huge deal, but it doesn't come out of the box. UPDATE: It looks like this feature is coming soon, which is great: https://github.com/aspnet/Mvc/issues/2141\nOn a positive note, I'm now able to version assets using gulp-rev and gulp-rev-replace. This adds hashes to the file names like background.png -> background-BC34C65.png. That's going to be very useful.\n. Any chance we'll get the cache-busting feature for images too?\n. ",
    "timgit": "I experienced similar issues integrating gulp with ASP.NET MVC 5. As some previous posters mentioned, I created a folder called public, then a subfolder called build which was the output of all of my gulp build processes (both for dev and minified for prod). This build folder was subsequently ignored from source control.  \nThe last step was to write a little HTML helper called FileTagger to support this integration so I wouldn't have to keep changing my cshtml files and such.  It's great to see this capability being built into the script and link tag helpers in MVC 6!\n. ",
    "adeel41": "lets assume it is a login ViewComponent. So I can display it using ViewComponent but when the user click submit button, I should submit it to the ViewComponent so that if ModelState is invalid then I display those errors. I don't see any way I can do it using ViewComponent. I think I've to create a proper controller for this functionality. \nMy initial understanding about ViewComponent is, it is a reusable component which can be displayed on different pages but is it just for HTTP GET type of things ?\n. > and if validation fails, redirect to a login page that can display errors.\nThis is my issue. If I redirect then I will lost the ModelState information which I needed on my ViewComponent (or any other page) to display ValidationMessage(s).\nSecondly I am not creating a login view component, I used it as an example because it is a common control which also post forms data to server.\n. ",
    "eamodio": "I wondered the same thing. And inject makes a lot of sense, but activate? Seems very ambiguous what the intent of that is. \n. I will grant you that [FromServices] is better than [Activate], but I would still strongly argue for [Inject] or [Injected]. IMO, using \"inject\" aligns well with Dependency Injection while also expressing more with less confusion than [FromServices].\nBoth basically tell me that the property will be set by someone/thing else, but [FromServices] feels oddly specific about who/what will inject it - while at the same time \"Services\" is so ambiguous that it feels confusing.\nWhile [Inject]/[Injected] seems much less about how the property will be set and more about the fact that it will be.\nJust my 2c.\n. ",
    "bangoker": ":+1: on [Inject] as well\n. ",
    "davidroth": ":+1:  on [Inject] as it is clear from the name whats happening. \n[FromServices] sounds very ambiguous (What kind of services, is it only for services?, etc.)\n. ",
    "nil4": ":+1:  for [Inject] rather than [FromServices], it relates clearly to the DependencyInjection package and namespace.\n. :+1: _ViewImports.cshtml perhaps?\n. ",
    "orlandow": "@Bartmax I have the same issue (http://stackoverflow.com/questions/28513532/mvc-5-c6-asp-global-asax-does-not-exist-in-the-namespace-asp)\nDid you find a solution?\n. ",
    "dnfclas": "@harshgMSFT, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @sornaks, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Alxandr, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @Alxandr, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Alxandr, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Alxandr, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @dougbu, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @rynowak, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @kirthik, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @harshgMSFT, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @dpaquette, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @dpaquette, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @JamesNK, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @JamesNK, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @JamesNK, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @Matthew-Bonner, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @CodingGorilla, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. ",
    "dpaquette": "+1 on this, especially the cache-busting\n. @dougbu A PR is a great idea. I think I will do that\n. I was struggling to think of a good use case for globbing. I am curious what @DamianEdwards had in mind.\nI mostly just wanted the cache busting feature.\n. Sounds good. I will remove the globbing resubmit my PR\n. ImageTagHelper with cache busting is ready to go in PR #2516 \n. @Bartmax I definitely see the value in this. I have had similar problems before when trying to add additional content or styling to the validation summary div.\nThe problem with the conditional rendering you are using now is that it doesn't work with client side validation. In some cases, model level errors will not be displayed on the client side because the div is not there.\nI think this might be something that is better handled on the client side. If there is a class or attribute added to the validation summary then we can easily handle the show/hide via CSS. This would likely require a change to both the unobtrusive validation JS and the server side GenerateValidationSummary code.\n. What's the deal with @dnfclas ? I signed my cla before submitting this PR\n. @Eilon I simplified the ImageTagHelper class by removing the Mode and Mode Detection code since this was no longer needed.  Not sure what we should do about the naming of the asp-file-version attribute.\n. @dougbu @NTaylorMullen Thanks guys. I did a rebase to latest dev and squashed my commits.\n. Any objection to me tackling this one on the weekend?\n. I like AppendVersion\n. Added blank lines as requested\n. No problem waiting. Let me know if there is anything else I need to do.\n. No problem. I will do that this weekend\n. ",
    "haruair": "Thanks. I will do rebase my repo.\nOn Mon, 30 Mar 2015 at 7:04 am Doug Bunting notifications@github.com\nwrote:\n\nfefad34\nhttps://github.com/aspnet/Mvc/commit/fefad346bade5c4167217a91f0b1c22c87a4f605\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Mvc/pull/2283#issuecomment-87466602.\n. \n",
    "chaoaretasty": "Thanks for the reply @dougbu. As mentioned this is giving feedback on fixing an issue from MVC5 so it is possible that these have been resolved in MVC6.\n1) Was my initial attempt at fixing this but unfortunately it gives a different behaviour. BeginForm() gives a form element using HttpContext.Request.RawUrl which no other overload uses. By passing nulls it gives an action attribute that might not match the current URL in certain complex routing/view scenarios. It also won't include things such as querystrings. I did end up managing to do this via passing the action attribute in as well as my other attributes.\n2) This looks like it could work for most elements but BeginForm also does some extra work setting up formcontexts and client validation.\nThe ToHtmlAttribute() was a strawman proposal and based on how we can pass object or RouteValueDictionary and I can definitely see some issues with it, just trying to start a conversation on a way to provide attributes to a helper in situations where we would otherwise want relatively basic MVC behaviour. I find most of the times I use the complex overloads it's passing null a lot just to get to the attributes and it seemed a possible area to clean this up.\n. That would sort the problem. In terms of making a breaking change anyone who has put all nulls in here for this purpose will:\n- have relatively simple routing and been in the situation where default routing gives the RawUrl\n- have come across this problem and had to find a work around for it where they are no longer putting null everywhere\n- have complex routing where the default routing gives a different URL to the current one and this luckily happens to match the URL they did want\nSo I think it would be a relatively safe change to make anyway when considering the expected behaviour would be to act like the no arguments method.\n. Thanks\n. ",
    "tuespetre": "After checking some things, I found that the Route attributes on the HomeController and its Index action were causing the problem. They were both set to \"\". Since the action is intended to be a catch-all, I can remove the attributes and be fine with that. I did notice that having attributes on one or the other (controller or action) also causes the issue. I don't know if this is intended or not.\nSo now I personally have a solution, I'll leave it up to you to close this issue or whatever you want to do.\nThanks!\n. Wonderful, I like that much better. Much cleaner startup. I really appreciate the simplified routing system altogether. Thanks for your help.\n. ",
    "femiot": "@danroth27 How do sign up for \"up-for-grabs\" items should volunteer to contribute to fixing the issue? \n. I see. How do I know what needs to be added to the project. Are there any documentation to look at? Thanks.\n. ",
    "jchadwick": "Treating ViewComponents as the replacement for Child Actions; in other words, leverage controller logic via the full MVC rather than just the View (as Partial would be).\nThe best use case I'm thinking of is partial rendering:  render the ViewComponent as part of the full page for the first request, then call another method to render just that ViewComponent as a partial.  Key point here is that it's not just rendering a partial view, but the ViewComponent's controller is responsible for building the component's model (perhaps via DB calls or something).  That means there is one single place in the code that this thing is built (data access and all), and I'm not duplicating logic across different controller actions (one for the main load controller action which may be doing much more than just what's needed for the partial, and again in the partial rendering controller action).\nMaybe I'm just abusing or misunderstanding the point of the ViewComponent. :)\n. @yishaigalatzer I'm not following.  Can you point me to a code sample of how to render a ViewComponent in response to an AJAX/partial rendering request without creating a view to render it in?\n. ",
    "Muchiachio": "Sorry if I was not clear enough, but this behavior happens in the current MVC versions like (Microsoft.AspNet.Mvc 5.2.3), I didn't check MVC6 beta releases. I'm just wondering if this could be fixed with upcoming \"MVC6\" release.\n. Little question, will you add \"Exlude\" option later on, or was it design decision to only leave \"Include\"?\n. I fully agree that including just the needed properties is the best approach. But I found it hard to exclude the \"Id\" property from the model. Here's a little use case to show you what I mean.\nI have a base view model which looks like this, as you can see I am generating \"Id\" value on every property request if it's not set already, and it's being set back using entity framework and auto mapper queries for index, edit and other views. You could say that I am too lazy to set Ids in the controller or service layer :smile:\nThis works fine until I need to create a record, a simple:\nC#\npublic ActionResult Create(AccountCreateView account)\ncan be abused by a \"smart user\", to change \"Id\" to something bad like \"YoMammaSoFat...\". So using:\nC#\n[Bind(Exclude = \"Id\")]\non create actions doesn't hurt much, especially knowing that scaffolding can be used without knowing model properties, which is not so easy with the white listing approach. So I am just going for exclude like this on every action which creates records.\nNevertheless, I will try to extend it as you suggested and will report back if I have any useful feedback.\n. ",
    "domaindrivendev": "Awesome - this will really simplify things in Swashbuckle!\nYou should have a quick read over this issue if you get a chance. It's related to the way in which I implemented a workaround for lack of the above up to this point.\nhttps://github.com/domaindrivendev/Swashbuckle/issues/285\n. ",
    "evil-shrike": "Thanks! Sorry I didn't find that resource. \nI think it'd make sense to put the link in https://github.com/aspnet/Home#documentation-and-further-learning\n. @pranavkm Thanks for the tip. Yeah, it looks like the similar concept.\nCould you tell me what is right place/way to ask such questions (\"I had Xxx thing before, what to use now?\"). I already mentioned some troubles in #2380.\nIt'd be nice to have a single place to asking and documenting all breaking changes. Kind of wiki maybe.. I'm afraid that the documentation won't have focus on migration from old Mvc/WebApi. I read all articles on migration, they consider only very simple cases. \n. ",
    "JamesNK": "\nIs there any way to have the contract resolvers share their caches?\n\nNot right now. When I created the resolver class I imagined the contract resolver would be the cache. I could easily make it so that all reflection and IL generation for getting/setting/creating values is cached in a global static cache. I'm worried that there would then be no way to reclaim that memory. XmlSerializer was fairly infamous for creating unrecoverable memory leaks.\n\nRelated to this, is it possible to compose contract resolvers?\n\nI can't think of a way. This wasn't something I thought about when designing the class. If you have a resolver modifying the contracts returned from another resolver, because those contracts are cached then you will be modifying them for all users of that resolver, regardless of whether it is wrapped. I assume you want to support allowing the user to define their own resolver and have it live along side yours?\n. Hmmm, maybe a way to compose resolvers would be adding some logic to clone the contracts. The wrapping resolver could then modify what it needs, cache it, and then return it as needed.\nIts would look completely different from DefaultContractResolver however. All it would have is the ResolveContract method and you would have to search the hierarchy of contracts that are returned, and modify them. And I believe other contracts can be resolved when the initial contract, sometimes being cached to internal fields for performance.\nOn second thought that probably won't work.\n. The simple answer to avoid duplicating the reflection cost for types is to use the same custom contract resolver for both the input and output formatter by default.\n. Where are the MVC options? I haven't touched MVC6 yet.\n\nDo we really need a contract resolver at all? Can we make a change to use the RequiredAttribute without any wire semantic?\n\nCan you point me towards your custom contract resolver? I didn't see it.\n\nIf we decide we do want the contract resolver should we use the same resolver by default for input and output?\n\nI don't see any reason why you wouldn't want to.\n. Thanks.\nI think I see a bug in your JsonContractResolver: the MemberInfo passed into CreateProperty could be a PropertyInfo or a FieldInfo. Have you got a unit test where [Required] is on a field?\n. You could put a JsonSerializerSettings property on the options. It would make it a lot more accessible to developers. Right now I think you would need to do something like:\nvar jsonOutput = options.OutputFormatters.OfType<JsonOutputFormatter>().Single();\njsonOutput.SerializerSettings.Formatting = Formatting.Indented;\nvar jsonInput = options.InputFormatters.OfType<JsonInputFormatter>().Single();\njsonInput.SerializerSettings.Formatting = Formatting.Indented;\nCompared to:\noptions.JsonSerializerSettings.Formatting = Formatting.Idented;\nThe input and output formatters could then use these settings unless different settings are explicitly set against the formatter. That provides a mix of easy of use and flexibility.\nIs there a HtmlHelper extension method for serializing a view model to JSON in a view? If so that could also pick up the default settings.\n. For your contract resolver issue, one option is I could add support for RequiredAttribute to json.net's DefaultContractResolver. I did a similar thing before WebAPI was released for ISerializable. It would have to be disabled by default and enabled by a flag for backwards compatibility, but that would allow someone to set there own contract resolver and then set that flag to true.\nhttps://github.com/JamesNK/Newtonsoft.Json/blob/629c32062ea039cf2ba82b1ba0ec48180110e409/Src/Newtonsoft.Json/Serialization/DefaultContractResolver.cs#L178\nIf I follow the same pattern it would end up looking something like:\nsettings.ContractResolver = new CamelCasePropertyContractResolver\n{\n    IgnoreRequiredAttribute = false\n};\n. Ok. I would agree that sticking with the default serialization rules does make things simpler for people.\nQuite often developers would wonder why Web API serialized some objects differently than others, and the cause was its custom handling of serializable: http://stackoverflow.com/questions/12334382/net-webapi-serialization-k-backingfield-nastiness\n. And people can achieve the same behavior with Json.NET attributes:\npublic class Videogame\n{\n    [JsonProperty(Required = Required.Always)]\n    public string Name { get; set; }\n}\nAlthough it is a little more long winded than [Required].\nMaybe I should add a [JsonRequired] to mirror [JsonIgnore]?\npublic class Videogame\n{\n    [JsonRequired]\n    public string Name { get; set; }\n}\n. I noticed [JsonProperty(Required = Required.Always)] is validated when deserializing and serializing. I'm guessing that is why MVC has different contract resolvers for input and output. You don't care about [Required] when serializing.\nIf I added [JsonRequired] it would be validated in both directions.\n. What are the dates around your beta 5? If you want ModelMetadata to use [JsonRequired] then I would need to update Json.NET first.\n. On second thought, in ModelMetadata you could use the contract resolver to get a contract for a type and then access the contract's JsonPropertys. From a JsonProperty you then have access to whether a property is required, or ignored, or readonly, etc. That is all available today.\n. I have updated the Newtonsoft.Json package to 7.0.1-beta3. This beta includes a new [JsonRequired] attribute.\n. @henkmollema That overload doesn't stop the underlying JSON formatter being something other than Json.NET - another serializer can ignore that class or read settings from JsonSerializerSettings and map them to its own functionality. To use WebAPI as a similar example, just because WebAPI knew about Json.NET didn't mean you couldn't replace the serializer with SimpleJson. Many people wrote their own WebAPI JSON formatters.\n. A design PR? Do you have an example of what one of those looks like.\nSome additional thoughts: Should the JsonHelper methods return HtmlString? The result shouldn't be escaped by Razor but JSON methods returning HtmlString seems a little weird.\n. re: Music Store, is this what you are talking about? https://github.com/aspnet/MusicStore/blob/master/src/MvcMusicStore.Spa/Helpers/JsonExtensions.cs\nI imagined something rawer and more multi purpose, that would do nothing more than output a JSON string.\n. I know a regular string will get encoded, I've made the odd MVC site in my day :P \nI bring it up because HtmlString seems like more like a HtmlHelper concept. Is it returned from public API methods besides the methods on HtmlHelper? Should a method on JsonHelper return a HtmlString or a regular string?\n. I had a look at making a PR. I'm not familiar with how Razor works, and I couldn't find the class where the Html property is added. Maybe I missed it but I couldn't find it on RazorView.\nEdit: Looks like Html and Url are added in the dynamically created view page. I have no idea how to add it there. If it is the better place then someone else can move it.\n. What is a ViewComponent? I started to write a PR and I noticed a JsonViewComponent.\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ViewComponents/ViewComponent.cs#L165-L173\n. :watch:\nShould an overload be added for the ViewComponent.Json method?\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/ViewComponents/ViewComponent.cs#L165-L173\n. Hi, I created a pull request of what has been discussed in #2388: single serializer setting shared between JSON formatters, settings on MvcOptions, no custom logic in a custom contract resolver and fixes performance issues related to having two contract resolver instances.\nNote that getting rid of the custom contract resolver will also close #2030.\n. When https://github.com/aspnet/Mvc/pull/2531 is merged into dev then I'll rebase this one.\n. Rebased and squished.\n. Design PR. Needs tests, etc.\nStuff that could be added:\n- JsonHelperOfT\n- Helper methods that write the value directly to a variable in a script tag a la https://github.com/aspnet/MusicStore/blob/master/src/MvcMusicStore.Spa/Helpers/JsonExtensions.cs\n. I don't know how to do that. What about if I merge the latest dev into this branch, close this PR and create a new PR that targets dev?\n. Rebased I think. I've never done one before.\n. I hadn't fetched the latest Mvc into my fork when I did the rebase. I'll redo it. I'm not use to working from a fork.\n. Rebased against latest. Note that this PR is still targeting aspnet/json-serializersetting\n. ",
    "ChrisKlug": "The .xproj files include references to $(VSToolsPath)\\DNX, which seems to be $(VSToolsPath)\\AspNet on my machine. Updating those references seems to work, but is probably not a good idea. Any suggestions on how I might have ended up with the wrong things?\n. If you just want to play around with the code in VS, you can modify the xproj file by changing\n$(VSToolsPath)\\DNX\\Microsoft.DNX.Props and $(VSToolsPath)\\DNX\\Microsoft.DNX.targets with $(VSToolsPath)\\AspNet\\Microsoft.Web.AspNet.Props and $(VSToolsPath)\\AspNet\\Microsoft.Web.AspNet.targets\nThat seems to work at the moment. I assume the props and targets used in the xproj-files will be added in a future VS drop or something... Or I just have a messed up environment... \n. ",
    "josher565": "I've dropped VS entirely, favouring dnu build. However, I don't have a working local copy either. Word has it that the next CTP drop will have xproj support, but that's all conjecture. Maybe someone else has more definitive news?\n. ",
    "guardrex": "Thanks. I changed it, but I found out that ...\n@Html.Raw(\"<meta name=\\\"xx\\\" content=\\\"xx\\\">\")\nworks, but\n@Html.Raw(ViewBag.Description)\nthrows the RuntimeBinderException even with that modification.\nThe string for that is simply in the top of the rendered body view:\n@{\nViewBag.Description = \"<meta name=\\\"description\\\" content=\\\"Description here\\\">\";\n}\nClearly, I'm learning MVC and not doing this right; however, IHtmlHelper<object> does contain a def for Raw, so getting that exception here seems incorrect regardless of how bad my coding is.\n. Ok, so I get it now that\n<meta name=\"description\" content=\"@ViewBag.Description\">\nin the shared view with \n@{\nViewBag.Description = \"Description here\";\n}\nworks. It still seems strange that I can't just inject the entire HTML tag into the view. I'll leave this open while my concern about that RuntimeBinderException being thrown for what I was doing is the correct exception ... and even perhaps to find out why @Html.Raw(ViewBag.Description) fails.\n. I was using CoreCLR: dnx-coreclr-x64-1.0.0-beta5-11556 (and MVC 6)\n. @dougbu I'll be back in the office in three hours (1pm CST). If nobody else checks DNX variants by then, I'll do it and report back.\n. The original exception in my app was RuntimeBinderException: 'Microsoft.AspNet.Mvc.Rendering.IHtmlHelper<object>' does not contain a definition for 'Raw', and that app doesn't have a model for the view I was working with.\nWhen I went back and tested in my HelloMVC app, which in my version includes a @model User in the view, it threw: RuntimeBinderException: 'Microsoft.AspNet.Mvc.Rendering.IHtmlHelper<HelloMvc.Models.User>' ...\nSort of made me think that Viewbag (the object) is what @Html.Raw() choked on ... not ViewBag.xxx, which would be a, what?, a dynamic property of the ViewBag object? \n... anyway, check this out ... When I try this @Html.Raw(ViewData[\"xxx\"]) ... it works!!\nDoes this mean that @Html.Raw(Viewbag.xxx) isn't necessarily misinterpreting what it has been given? Is it just not resolving the dynamic object property value of Viewbag.xxx before performing its injection into the markup?\nIf an object is provided to @Html.Raw(), does it expect the passed object implement its own Raw definition? ... that would explain why it's saying the object doesn't have a Raw definition for ViewBag ... Viewbag the object ... it doesn't and shouldn't.\n. ",
    "chmontgomery": ":+1: just ran into this myself. using @Html.Raw((object)Bundles.vendor.styles) worked but it's not intuitive. Here's my sample project for reference: https://github.com/chmontgomery/ExampleMVC6Application\n. ",
    "ZerglingX6": "To solve the problem Temporarily\u3002add a shared view of enum\u3002\njust like this\uff1a\n``` c#\n@model Enum\n@if (EnumHelper.IsValidForEnumHelper(ViewData.ModelMetadata))\n{\n    // Display Enum using same names(from [Display] attributes) as in editors\n    string displayName = null;\n    foreach (SelectListItem item in EnumHelper.GetSelectList(ViewData.ModelMetadata, (Enum)Model))\n    {\n        if (item.Selected)\n        {\n            displayName = item.Text ?? item.Value;\n        }\n    }\n// Handle the unexpected case that nothing is selected\nif (String.IsNullOrEmpty(displayName))\n{\n    if (Model == null)\n    {\n        displayName = String.Empty;\n    }\n    else\n    {\n        displayName = Model.ToString();\n    }\n}\n@Html.DisplayTextFor(model => displayName)\n\n}\nelse\n{\n    // This Enum type is not supported. Fall back to the text.\n    @Html.DisplayTextFor(model => model)\n}\n```\n. ",
    "korzh": "The problem with both these approaches is: they are too \"coupled\" to file system. \nWriting my own IFileProvider will solve the task but:\n1. It's not quite correct to operate with \"files\" (even virtual ones) while we just need to get content for some view.\n2. It's not effective since GetFileInfo() method gets something like \"/Views/MyController/MyView.cshtml\" in parameter and we will need to use RegExp to cut necessary part of the path and get real view name from it.\nMoreover, with such approach we do a lot of totally unnecessary (considering that we just want to return the content of some view) operations like:\n- getting a  list of \"view locations\"\n- navigating through that list and trying to get IFileInfo for each view location.\nThat's why I offer to add new IViewContentLocator interface (the actual name is not important of course) and place all logic with searching \"view locations\" and getting file content as a default implementation for this interface.\n. The thing is: I would like to change current behavior for some views and leave it \"as is\" for all others.\nFor example, you may want to establish some kind of blog engine on your site where all posts (with Razor markup) are stored in DB (or other storage). \nSo, it would be great to have that special \"view locator\" for all views under /blog/* path and process all others as usual.\n. OK. \nThe scenario is quite simple. Let's suppose we would like to build some kind of CMS system based on MVC and use Razor rendering for content.\n. @danroth27 I would like to explain more in details the scenario I have in mind.\nWe are going to create a web-portal for one company which will include the following main components:\n- Admin section (accessed as /Admin/*) - a set of pages where administrators can change different settings, control access to the site, manage Client area users, add new content, etc.\n- Client area (/Client/* ) - where company customers can get support, download some files and get access to some info which is not available to public visitors. This section requires login/password to access as well as Admin section but the lists of users for these 2 sections are totally different. \n- Content area - all other pages on the site which are available to public. Admins can create new pages in this area, specify the route to them (e.g. /products/item1/)  and change the content of those pages through Admin section. Moreover we would like to have an ability to use Razor syntax to define content here. For example we have a product page in Content section and that product page should show different price (or discount) depending on page visitor. Additionally we are going to define several tag helpers and give our content managers a possibility to use those helpers when defining the content.\nSo my intent is to create usual MVC controller for /Admin and /Client sections and use some special \"Dispatcher\" controller/action for all other pages on the site. That Dispatcher controller will do the following:\n- takes the route to the page (e.g. /products/soho/myproduct1)\n- find the page content in underlying DB according to its route\n- render that page and write the final result into Response.Output stream\nI hope the above makes sense and you will consider the requested interface during the next update of MVC library. \nOr (even better) it would be great if you could suggest more appropriate solution for described task.\n. ",
    "vncastanheira": "@rynowak \nOh, that clarifies a lot! So won't be a problem to declare an Action normally then...\n. Thanks!\n. ",
    "troyschneringer": "Seems related to #2494\n. ",
    "panesofglass": "@Eilon, did you happen to reach a decision on this PR?\n. Thanks for doing this, @SteveSandersonMS!\nAdd another member to test F# Async (along with the accompanying view):\nfsharp\n    member this.Sleepy () =\n        async {\n            // Simulate a call that takes two seconds.\n            do! Async.Sleep 2000\n            return this.View()\n        }. ",
    "TravisTheTechie": "With MVC 5.2...\n``` csharp\npublic class MyObj : System.Dynamic.DynamicObject\n{\n    public int OneTwo { get; set; }\n}\npublic class TestController : Controller\n{\n    [HttpGet]\n    public ActionResult Test()\n    {\n        dynamic obj = new MyObj();\n        obj.OneTwo = 3;\n        return Json(obj, JsonRequestBehavior.AllowGet);\n    }\n}\n```\nReturns \njavascript\n{\"OneTwo\":3}\nWhich is the expected behaviour. Again, the property is implemented -- if I remove the DynamicObject parent object then it works in MVC 6. The thought is that this is a JSON.NET issue? So should I try to narrow an example down that specifically? \n. Thanks for digging into this. This makes sense. \nMy next question is should this be considered a regression and something you'll fix in the defaults for MVC 6 or do you just consider it an edge case and document the possible problem in the release notes? \n. ",
    "IsaacSee": "Thanks for your quick answer. \nI will not be able to adapt to the Properties[0].Key=Height format since the client part is not in my hands. Will have to create a custom binder (without the Html.NameFor witch we do not use), it feels like an important mapping case.\n. Quick & dirty workaround waiting for proper binder. \nConsidering this querystring ?filters[email]=com&filters[role]=client\ncsharp\nIDictionary<string, string> filters = Request.Query.ExtractQueryNamedDictionary(\"filters\");\ncsharp\npublic static IDictionary<string, string> ExtractQueryNamedDictionary(this IReadableStringCollection collection, string name)\n{\n    var res = new Dictionary<string, string>();\n    var signature = new Regex($@\"^{name}\\[(?<key>.*?)\\]$\", RegexOptions.IgnoreCase);\n    foreach(var kvp in collection)\n    {\n        var m = signature.Match(kvp.Key);\n        if(m.Success)\n        {\n            res.Add(m.Groups[\"key\"].Value, kvp.Value.First());\n        }\n    }\n    return res;\n}\n. Thanks @danroth27.\nThe global idea behind this is that there is multiple ways to defines routes in MVC (for the moment we do not care about the pure middlewares). \nOften these route definitions are splitted in multiple places in sources, for exemple :\n- Route template in Startup : \"sub/{controller}/{action}/{id}\"\n- Controller part as attribute or convention : ProductController\n- Action part : [HttpPost(\"save/{type}\")]\n- etc (by implementing a custom router, etc. but this is out of scope)\nIt can be tricky in a big website to have a comprehensive view of all the route configurations. It would be usefull to quickly review all apis and pages available (and using declared filters, review that some routes require the right security policy or authorization, etc.).\nThis result of all registered routes would be generated at runtime, when the system has all it needs to resolve routes.\nThis would be some tooling to analyse the flat result of all mounded routes.\nFor the example above we'd like to be able to extract something like this for everything declared : \n- POST /sub/product/save/{type} (with informations like explicitly declared filters)\nFor custom routers or dynamic routes we'd be ok just to have the information that a router of type \"MyCrazyRouterDependingOnCurrentWeather\" is registered.\nWe've done this previously on our Node.js (with express) platform implementation and it was quite usefull. Here is what we had (generated by crawling the chains of middlewares at runtime) : \n\nSo, to conclude, even if every routes cannot be extracted like that within MVC or if it requires some manualy post processing to achieve a view like the sample above. \nWe'd like to have a way to access the internal result of controllers & actions discovery (from conventions or declaratively with attributes).\nI've already seen this kind of dump in mvc vnext logs (listing all routes) when no suitable route was matched but when I looked in MVC sources the dumped data was internal.\n. ",
    "wobuzhudao": "@dougbu Ok. I tested it out some more, and you're right it is using string[] {\"true\", \"false\"} as the raw value whenever the checkbox is checked (whether I changed it or not).\nHowever, whenever the checkbox is unchecked, the raw value is \"false\" (just a string, and is the same as the attempted value). Is this also by design?\nI will work on a simplified version of the scenario to post here later.\n. ",
    "davidebbo": "@paranoid-android please open an issue on https://github.com/projectkudu/kudu/issues, and share a sample github repo that demonstrates the problem. Make sure you're using beta4, as earlier betas are no longer supported.\n/cc @ahmelsayed\n. ",
    "brockallen": "Yep, I'd +1 that suggestion\n. Nancy. Razor pages stand alone. Pure middleware that needs anti-xsrf.\n. ",
    "bgeihsgt": "To accomplish something similar in mvc 5/beta 3 we had to call validation manually manually because validation didn't automatically run against objects bound in our model binder.  Similar to how body model binder worked in beta3.  Fwiw, this approach properly used the runtime type instead of the parameter type for validation.\nSent from my iPhone\n\nOn May 8, 2015, at 2:39 PM, Eilon Lipton notifications@github.com wrote:\nLet's investigate what the MVC 5 behavior was to see if there are any compat concerns.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mrchief": "@rynowak Like you said, its the data attributes that gets generated by UnobtrusiveValidationAttributesGenerator. It currently writes data-val- and there is no way to override that.\nAs an example, jQuery validation native requires data-msg- and data-rule- attributes. Now its possible to write your own HTML Helper extensions which generate these for you but I feel that there is no reason for MVC to be tied to one specific implementation (aside from the fact that your markup contains extra attributes which are really not being used or needed).\nI see many examples where people have ditched unobtrusive validation entirely since it modifies jQuery validation so much that its very hard to implement your own custom stuff. \nUnobtrusive validation could be updated to address these concerns but then, I was thinking why even bother doing that if we can provide a way to allow people to plugin with their own?\n@dougbu: GetValidationAttributes() does a bit more than just calling UnobtrusiveValidationAttributesGenerator.GetValidationAttributes(). Sure I can copy paste the code today and swap out UnobtrusiveValidationAttributesGenerator with my own, but then I run the risk of falling out of line with the core, something I don't prefer.\nAgain, with so many great things happening with ASP.NET, I don't want people ditching an highly useful feature just because it isn't flexible enough. Makes sense? \n. I suspected as much. I found DefaultModelMetadataProvider and was attempting this:\n``` csharp\npublic class HumanizerMetadataProvider : DefaultModelMetadataProvider\n{\n    protected override ModelMetadata CreateModelMetadata(DefaultMetadataDetailsCache entry)\n    {\n        var propertyAttributes = entry.Attributes;\n        var modelMetadata = entry.DisplayMetadata;\n    if (IsTransformRequired(modelMetadata, propertyAttributes))\n        modelMetadata.DisplayName = modelMetadata.SimpleDisplayProperty.Humanize().Transform(To.TitleCase);\n\n    return base.CreateModelMetadata(entry);\n}\n\n\nprivate static bool IsTransformRequired(DisplayMetadata modelMetadata, IReadOnlyList<object> propertyAttributes)\n{\n    if (string.IsNullOrEmpty(modelMetadata.SimpleDisplayProperty))\n        return false;\n\n    if (propertyAttributes.OfType<DisplayNameAttribute>().Any())\n        return false;\n\n    if (propertyAttributes.OfType<DisplayAttribute>().Any())\n        return false;\n\n    return true;\n}\n\npublic HumanizerMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider) : base(detailsProvider)\n{\n}\n\n}\n```\nIs this an acceptable way to go?\nI also found DataAnnotationsMetadataProvider. Is this same as DataAnnotationsModelMetadataProvider (minus the Model in the name)?\nIf not, do I need to remove it from default options before plugging the Humanizer Provider?\nFinally, if I implement  IDisplayMetadataProvider how can I still hitch back on the default DataAnnotationsMetadataProvider? DataAnnotationsMetadataProvider seems to be doing a lot and I'm not sure what I would be leaving out if I roll my own.\n. This totally makes sense and I like this approach even more! :ok_hand:\nThanks for the quick responses @rynowak @dougbu !\n. Being able to talk to the core team and get questions answered in realtime is a bigger help! \nThis clears one of the hurdles I was facing while migrating an existing MVC 5 project to vNext. I'll soon post an updated code for posterity's sake.\n. Here's the updated code:\n``` csharp\npublic class HumanizerMetadataProvider : IDisplayMetadataProvider\n{\n    private static bool IsTransformRequired(string propertyName, DisplayMetadata modelMetadata, IReadOnlyList propertyAttributes)\n    {\n        if (!string.IsNullOrEmpty(modelMetadata.SimpleDisplayProperty))\n            return false;\n    if (propertyAttributes.OfType<DisplayNameAttribute>().Any())\n        return false;\n\n    if (propertyAttributes.OfType<DisplayAttribute>().Any())\n        return false;\n\n    if (string.IsNullOrEmpty(propertyName))\n        return false;\n\n    return true;\n}\n\n/// <summary>\n/// Gets the values for properties of <see cref=\"T:Microsoft.AspNet.Mvc.ModelBinding.Metadata.DisplayMetadata\"/>. \n/// </summary>\n/// <param name=\"context\">The <see cref=\"T:Microsoft.AspNet.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext\"/>.</param>\npublic void GetDisplayMetadata(DisplayMetadataProviderContext context)\n{\n    var propertyAttributes = context.Attributes;\n    var modelMetadata = context.DisplayMetadata;\n    var propertyName = context.Key.Name;\n\n    if (IsTransformRequired(propertyName, modelMetadata, propertyAttributes))\n        modelMetadata.DisplayName = propertyName.Humanize().Transform(To.TitleCase);\n}\n\n}\n```\n. ",
    "maxbundchen": "@danroth27 I'm using the current stable version (MVC 5 with .Net 4.5.1 and VS 2013). I made a little sample where you can see the problem http://1drv.ms/1ES2lRQ.\n@dougbu I never figure out the ModelState could be the problem. I will make some tests, but if it's the case, the \"Model\" in the view loses for the ModelState, if I can say that, and that could be a potential problem in other situations.\n. @dougbu your workaround works fine, thanks. I found lots of topics like this one before coming here. Not sure if the topic should be closed, so I will leave to you closing it.\n. ",
    "bojanrajkovic": "I think the trick is that what we want to test falls in between the model binding unit tests and the integration/functional tests, in that we're trying to get the model binding infrastructure to \"run,\" without making a full request/response chain.\nI think in this case, the best is for us to split the test into two pieces -- a unit test that simply adds an error to the ModelStateDictionary, and a functional test that sets up the server and runs the full request/response pipeline. :)\nIt's probably fine to close this issue, unless this middle ground is a case you still want to support.\n. ",
    "hanu412": "I did that. Still unable to get it work. I updated it to v 1.0.0-beta5-11744. I am on windows machine. \nDo I need to make any other changes/upgrades?\n. Initially I just updated it and rebuilt the solution. After I saw your message,I closed it and opened it and ran. It did not work. Then I noticed that launchSettings.json file was still looking for the old sdk version. Then I manually updated it to the beta5 version and ran the solution. Now I am encountering a new error saying references are missing. \n\n. Yes I did it. It worked. Now I am able to run the project.\n. Solution : Updated the dnx to the latest version. Restored all the packages. Built the solution and boom,the errors went away.\n. ",
    "vcsjones": "Is the milestone for this still beta5?\n. ",
    "Artur2": "@danroth27 , @henkmollema , @davidfowl thanks for answer :D\n. ",
    "juliano": "@jasonwilliams200OK I've created Ioget seeking a way to instantiate objects by constructor, it is almost functional, I just don't have much free time to implement a ModelBinder that uses it. Take a look on this file, you'll have a good idea how the magic happens! :smile:\n. ",
    "nh43de": "Thanks for the help :) Forgot to mention I did update dnx to latest version (v1.0.0-beta5-11781), see edits.\nIt looks like when the packages restore after changing to x.x.x.x-*, they all have different build numbers. I'm assuming this is where the incompatibility arises?\n. Fixed, may not be an error with the code base. It turns out Roslyn was choking on \n\"@inject IOptions AppSettings\" (this is from the default website project)\nThough the error message was strange it was traced to a compilation error in \"_Layout.cshtml\" from the sample project. Because it didn't have the imported namespaces due to the rename from \"_GlobalImports.cshtml\" to \"_ViewImports.cshtml\" (see aspnet/mvc commit 8a70172), it was not compiling successfully.\n. ",
    "rajac": "@kichalla - yes the token headers are populated. We actually referenced from MusicStore sample, the difference being we created custom action filter attribute instead of putting the AntiForgery.Validate in every controller.\nThe custom attribute definition given below:\npublic class AntiForgeryTokenActionFilterAttribute : ActionFilterAttribute, IFilter\n{   \n    .... \n}\nHere is the request header\nPOST http://localhost:50754/Account/Register HTTP/1.1\nHost: localhost:50754\nConnection: keep-alive\nContent-Length: 122\nAccept: application/json, text/plain, */*\nOrigin: http://localhost:50754\n__RequestVerificationToken: CfDJ8JLgxH4WdB1KoFePqNgHjsHi3V2Eq8z02xmlno2ZOONJDiGoeD-7cuh1KUsl68mdqCdpjQxsyQv8C73Hh5zJSiRfdYjw_ifUt_3u9uxdMIiKeeiF_Uo42tOYl9q5SAJhv6IcaXAl3SNKAcHDjOZsyt8:CfDJ8JLgxH4WdB1KoFePqNgHjsGsuufoR794WlXWXuW8RPR7YIUPDxfmgCpiXtQe1WWTLs8g6mSNE2tEReh2bJJSLa9N6xUv6ZLsGMWUCF0l3NZrWets7vICLCX8jU1OiDS9saLUanNyQPGvJ087bbHlIfX7SC0KFLA5PSa5xpdoxCNoY4x9DhcubJuqnLEJoHQrgQ\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.152 Safari/537.36\nContent-Type: application/json;charset=UTF-8\nReferer: http://localhost:50754/Account/Register\nAccept-Encoding: gzip, deflate\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\nCookie: olfsk=olfsk3178111969027668; hblid=Cg7iVMr7wW8kLTpo3m39N9H0GJH0FEYz; XMQm7fDrous=CfDJ8JLgxH4WdB1KoFePqNgHjsF8GzbBDvLUfB6yDt1krlybGkuBbv5WcQcfso2_8_3sDYWbW481hDjgMEjDSvXIndk6EUXICuv1oyamDzxZJ7kmKALuKLNe1bBadTpkwS8c8F_QkQi1GmmNTBP3g1jVGq0; .AspNet.Microsoft.AspNet.Identity.Application=CfDJ8JLgxH4WdB1KoFePqNgHjsHf3XRAH2-f1hTu-vhattXCibdeNLKTVgLp0EogYyK3Gz9kXzEEgpmwfb534QNVbrBkzUuTWuXhhvLUYWHsNRlsAJQDgmMIjYbdcW6aF9BsWCuASWaXM3YGtFvG0fUfK3YSYM4Y2SPzbW_Y5dXdVA9dzUBqMpA7OG2C1EL94FwwFTrA5uR8wiyDE4y9JUC9qWsjmKo8cCs-0JANtRn_f93Jsgk53FYMtPp9n7Tw21Pk91_gQcSYwEzKKfe-QF_N-MfEReH1qitVObrkZWaOAMNoLh9L7EkpQnlrnV23lmQalaWeY3pJ1Q2ks5CVjlHDByC09ElxARllq46re35HdIk4lo6RIESxFkcFczfr9Z--7kT0pF6j9A8ygJLr3BVP9Uckg6w8kKXrfHLJbAC8ML7bnIAnIIiV6IPP0uKKnldncWV7e7oe1EEqIpJ66agsoM5HN7dJjyBo1rMbDoXXberezrXRAlYDp6WVHdKEDOlOiasjuklVIED_N2Zh3_kaNAPFQMB566dVPmoageymkrZd7LISU42yAbg4WBQX20QaAAHlYJlU3XPv5Z7LCKJB61eaoQNMrhBqVq_-I4IM6YC4-NMHedWBlcaRBS3Cz9ttJQ\nand request body.\n{\"firstName\":\"raja\",\"lastName\":\"chan\",\"email\":\"raja@gmail.com\",\"password\":\"Pass@111\",\"confirmPassword\":\"Pass@111\"}\n. @rynowak - here is the Call Stack.\n```\n\nMockApp!MockApp.Views.Shared.AntiForgeryTokenActionFilterAttribute.OnActionExecuting(Microsoft.AspNet.Mvc.ActionExecutingContext actionContext) Line 136    C#\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.ActionFilterAttribute.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__6>(ref Microsoft.AspNet.Mvc.ActionFilterAttribute.d__6 stateMachine)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.ActionFilterAttribute.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next) Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeActionFilterAsync()   Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__41>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__41 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeActionFilterAsync()   Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Controller.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next)    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__95>(ref Microsoft.AspNet.Mvc.Controller.d__95 stateMachine)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Controller.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Filters.ControllerActionFilter.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next)    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__4>(ref Microsoft.AspNet.Mvc.Filters.ControllerActionFilter.d__4 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Filters.ControllerActionFilter.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext context, Microsoft.AspNet.Mvc.ActionExecutionDelegate next)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeActionFilterAsync()   Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__41>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__41 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeActionFilterAsync()   Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllActionFiltersAsync()   Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__40>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__40 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllActionFiltersAsync()   Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeExceptionFilterAsync()    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__39>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__39 stateMachine)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeExceptionFilterAsync()    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllExceptionFiltersAsync()    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__38>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__38 stateMachine)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllExceptionFiltersAsync()    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeResourceFilterAsync() Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__37>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__37 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeResourceFilterAsync() Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllResourceFiltersAsync() Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__36>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__36 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAllResourceFiltersAsync() Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAsync()   Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__32>(ref Microsoft.AspNet.Mvc.Core.FilterActionInvoker.d__32 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.Core.FilterActionInvoker.InvokeAsync()   Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.MvcRouteHandler.InvokeActionAsync(Microsoft.AspNet.Routing.RouteContext context, Microsoft.AspNet.Mvc.ActionDescriptor actionDescriptor) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__3>(ref Microsoft.AspNet.Mvc.MvcRouteHandler.d__3 stateMachine)  Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.MvcRouteHandler.InvokeActionAsync(Microsoft.AspNet.Routing.RouteContext context, Microsoft.AspNet.Mvc.ActionDescriptor actionDescriptor) Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.MvcRouteHandler.RouteAsync(Microsoft.AspNet.Routing.RouteContext context)    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__2>(ref Microsoft.AspNet.Mvc.MvcRouteHandler.d__2 stateMachine)    Unknown\n    Microsoft.AspNet.Mvc.Core.dll!Microsoft.AspNet.Mvc.MvcRouteHandler.RouteAsync(Microsoft.AspNet.Routing.RouteContext context)    Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Routing.Template.TemplateRoute.RouteAsync(Microsoft.AspNet.Routing.RouteContext context)  Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__25>(ref Microsoft.AspNet.Routing.Template.TemplateRoute.d__25 stateMachine)    Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Routing.Template.TemplateRoute.RouteAsync(Microsoft.AspNet.Routing.RouteContext context)  Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Routing.RouteCollection.RouteAsync(Microsoft.AspNet.Routing.RouteContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__10>(ref Microsoft.AspNet.Routing.RouteCollection.d__10 stateMachine)  Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Routing.RouteCollection.RouteAsync(Microsoft.AspNet.Routing.RouteContext context) Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Builder.RouterMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext httpContext)    Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__4>(ref Microsoft.AspNet.Builder.RouterMiddleware.d__4 stateMachine)  Unknown\n    Microsoft.AspNet.Routing.dll!Microsoft.AspNet.Builder.RouterMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext httpContext)    Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start.d__10>(ref Microsoft.AspNet.Authentication.AuthenticationMiddleware.d__10 stateMachine)    Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start.d__10>(ref Microsoft.AspNet.Authentication.AuthenticationMiddleware.d__10 stateMachine)    Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start.d__10>(ref Microsoft.AspNet.Authentication.AuthenticationMiddleware.d__10 stateMachine)    Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start.d__10>(ref Microsoft.AspNet.Authentication.AuthenticationMiddleware.d__10 stateMachine)    Unknown\n    Microsoft.AspNet.Authentication.dll!Microsoft.AspNet.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context) Unknown\n    Microsoft.AspNet.StaticFiles.dll!Microsoft.AspNet.StaticFiles.StaticFileMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext context)    Unknown\n    Microsoft.AspNet.Hosting.dll!Microsoft.AspNet.Hosting.Internal.RequestServicesContainerMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext httpContext) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__3>(ref Microsoft.AspNet.Hosting.Internal.RequestServicesContainerMiddleware.d__3 stateMachine)    Unknown\n    Microsoft.AspNet.Hosting.dll!Microsoft.AspNet.Hosting.Internal.RequestServicesContainerMiddleware.Invoke(Microsoft.AspNet.Http.HttpContext httpContext) Unknown\n    Microsoft.AspNet.Hosting.dll!Microsoft.AspNet.Hosting.HostingEngine.Start.AnonymousMethod__0(Microsoft.AspNet.FeatureModel.IFeatureCollection features) Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.RuntimeHttpApplication.ProcessRequestAsyncImpl(Microsoft.AspNet.Loader.IIS.IHttpContext httpContext, Microsoft.AspNet.Loader.IIS.FeatureModel.HeliosFeatureContext featureContext)  Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__9>(ref Microsoft.AspNet.Loader.IIS.RuntimeHttpApplication.d__9 stateMachine)  Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.RuntimeHttpApplication.ProcessRequestAsyncImpl(Microsoft.AspNet.Loader.IIS.IHttpContext httpContext, Microsoft.AspNet.Loader.IIS.FeatureModel.HeliosFeatureContext featureContext)  Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.RuntimeHttpApplication.ProcessRequestAsync(Microsoft.AspNet.Loader.IIS.IHttpContext context)    Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.HttpApplicationBase.InvokeProcessRequestAsyncImpl(Microsoft.AspNet.Loader.IIS.Infrastructure.HeliosHttpContext context) Unknown\n    mscorlib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Startd__5>(ref Microsoft.AspNet.Loader.IIS.HttpApplicationBase.d__5 stateMachine)    Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.HttpApplicationBase.InvokeProcessRequestAsyncImpl(Microsoft.AspNet.Loader.IIS.Infrastructure.HeliosHttpContext context) Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.HttpApplicationBase.InvokeProcessRequestAsync(Microsoft.AspNet.Loader.IIS.Infrastructure.HeliosHttpContext context) Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.Infrastructure.PipelineExecutor.MapRequestHandlerImpl(Microsoft.AspNet.Loader.IIS.Infrastructure.Helios_CHeliosHttpStoredContext pHttpStoredContext, Microsoft.AspNet.Loader.IIS.Infrastructure.IIS_IHttpContext3 pHttpContext, Microsoft.AspNet.Loader.IIS.Infrastructure.IIS_IHttpRequest3 pHttpRequest, Microsoft.AspNet.Loader.IIS.Infrastructure.IIS_IHttpResponse2 pHttpResponse, Microsoft.AspNet.Loader.IIS.Infrastructure.IIS_IHttpUser pHttpUser, Microsoft.AspNet.Loader.IIS.NativeStructures.HTTP_REQUEST_V2 pHttpNativeRequest, Microsoft.AspNet.Loader.IIS.NativeStructures.HTTP_RESPONSE_V2 pHttpNativeResponse, Microsoft.AspNet.Loader.IIS.NativeStructures.HTTP_CACHE_POLICY pHttpCachePolicy, System.Guid pTraceActivityId, Microsoft.AspNet.Loader.IIS.Infrastructure.HeliosPipelineProcessingIntrinsics pIntrinsics, bool fIsWebSocketRequest, out Microsoft.AspNet.Loader.IIS.Infrastructure.REQUEST_NOTIFICATION_STATUS pdwRequestNotificationStatus)  Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.Infrastructure.PipelineExecutor.MapRequestHandler.AnonymousMethod__5_0(object state)    Unknown\n    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown\n    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown\n    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Unknown\n    Microsoft.AspNet.Loader.IIS.dll!Microsoft.AspNet.Loader.IIS.Infrastructure.PipelineExecutor.MapRequestHandler(Microsoft.AspNet.Loader.IIS.Infrastructure.MapRequestHandlerData* pMapRequestHandlerData) Unknown\n    [AppDomain Transition]\n```\n. \n",
    "danicomas": "Commented in the following link: https://github.com/aspnet/Mvc/issues/2588\n. ",
    "Azaret": "In _GlobalImport.cshtml\n. ",
    "CodingGorilla": "I did a git clean -xdf and I have tried building both from the build.cmd file as well as in visual studio 2015 RC.\n. This is what I see when looking at the repository setting in visual studio with the Mvc.sln open.\n\nThe first item there is a corporate nuget repo which is appropriately disabled.  The last item, api.nuget.org is something from VS2015 RC or Windows 10 I assume, I don't think I added that; however just to be sure I enabled it, ran:\ngit clean -xdf\n.\\build.cmd\nWith the same results, except that it complained that the api.nuget.org source returned a 400 and then continued with it's normal build.\nI am working from my own fork, which git status and git merge upstream/dev both indicate my working copy is in sync with this repo.  I will try to clone the aspnet/mvc repo directly and see if that makes any difference.\n. So I cloned this repo directly, and cleared out my %LocalAppData%\\Nuget folder just to be sure I didn't have any wacky cached package issue going on.  Same results.  Below are the actual errors:\n\nC:\\Users\\Mark\\Source\\Repos\\aspnet-mvc\\src\\Microsoft.AspNet.JsonPatch\\Adapters\\ObjectAdapter.cs(628,46): error CS0012: The type 'KeyedCollection<,>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ObjectModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\nC:\\Users\\Mark\\Source\\Repos\\aspnet-mvc\\src\\Microsoft.AspNet.JsonPatch\\Adapters\\ObjectAdapter.cs(628,46): error CS0012: The type 'KeyedCollection<,>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ObjectModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\nC:\\Users\\Mark\\Source\\Repos\\aspnet-mvc\\src\\Microsoft.AspNet.JsonPatch\\Adapters\\ObjectAdapter.cs(628,46): error CS1579: foreach statement cannot operate on variables of type 'Newtonsoft.Json.Serialization.JsonPropertyCollection' because 'Newtonsoft.Json.Serialization.JsonPropertyCollection' does not contain a public definition for 'GetEnumerator'\nBuild failed.\n    0 Warning(s)\n    3 Error(s)\nTime elapsed 00:00:00.7309280\nwarn: Exit code -1 from cmd\nverbose: Stack trace:\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.DnuPack(String projectFile, String kpmPackOutputDir, String configuration) in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 945\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.<>c__DisplayClass95.b__60(String projectFile) in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 7459\n   at System.Collections.Generic.List1.ForEach(Action1 action)\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.<>c__DisplayClass95.b__5e() in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 7459\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.b__46() in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 2226\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.b__47() in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 2243\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.b__48() in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 2260\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at View1752a6c16bf74dd4bec558f4cdf92b3b.<RenderViewLevel0>b__40() in c:\\Users\\Mark\\AppData\\Local\\Temp\\f3da5fcdc035466680ba83f95ca5af97-1.cs:line 2116\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.SakeEngine.Execute(Options options)\n   at Sake.Engine.SakeEngine.Execute(String[] args)\n   at Sake.Program.Main(String[] args)\n. @davidfowl :+1: That seems to have fixed the problem.\n. @rynowak Added some unit tests (ResponseCacheFilterTest) that I think cover what you were asking - I was a little unclear what you were asking because the existing tests  would be verifying that the headers were being properly generated based on the CacheProfile that was being used.  So I wrote tests that verify that changing the individual properties directly on the ResponseCacheFilter itself indeed overrides the settings provided by the CacheProfile.  I hope that was what you were looking for.  \n\nI'm working on the functional tests presently - again I believe here what you are looking for is a functional test that sets up a ResponseCacheAttribute and provides it a CacheProfileName and then overrides one of the cache profile settings with a property on the attribute.  Please let me know if I'm misunderstanding your request.\n. @rynowak Functional tests are complete now as well.\n. ",
    "jwieneke": "@dougbu I am running the application from Visual Studio using SDK beta 5\nThis is what global.json contains:\n\"sdk\": {\n        \"version\": \"1.0.0-beta5-11896\"\n    }\n. @dougbu Thanks, renaming _GlobalImport.cshtml solved the problem. Didn't see the announcment.\n. ",
    "matthewDDennis": "And upgrade latest pre-release dnx.\n. ",
    "damienbod": "Super!\nThanks for your time and information.\nGreetings and thanks Damien\n. ",
    "jason-ap": "awesome~\n. ",
    "slaneyrw": "We currently have to create our own ValidationAntiForgeryToken attribute, override the OnAuthorization method, read the inbound token from the headers, call the second overload of the static AntiForgery.Validate method supplying the two tokens - which doesn't handle missing tokens like the no argument overload.\nIt would be much easier (in ASP.NET 5) to supply an alternative IAntiForgeryTokenStore that can you read the \"form\" token from another source depending on the request type ( like request headers if AJAX, payload if websocket, etc).  \nThe AntiForgery class currently HARDCODES the IAntiForgeryTokenStore supplied to the AntiForgeryWorker.  Can you get the implementation from the DI system so we can override it ?\n. ",
    "jrock2004": "I don't have a _GlobalImport file. Does that @addTagHelper go on top?\n. Getting error\nCompilationFailedException: One or more compilation failures occured:\n/Views/Settings/SecurityProfileEdit.cshtml (0,13) Directive 'addTagHelper's value must be surrounded    in double quotes.\n/Views/Settings/SecurityProfileEdit.cshtml (0,13) Encountered an unexpected error when attempting to    resolve tag helper directive '@addTagHelper' with value '*, Microsoft.AspNet.Mvc.TagHelpers\";'. Error:    The given assembly name or codebase was invalid. (Exception from HRESULT: 0x80131047)\n. Here is the code\n@addTagHelper \"*, Microsoft.AspNet.Mvc.TagHelpers\";\nAnd then\n<a asp-controller=\"Settings\">Help</a>\nIn visual studio there is a little red mark after the addTagHelper\n. That did it, thanks @dougbu \n. ",
    "logikaljay": "So is there a way to force the search path?\nAs I understand it ViewComponents are a replacement for PartialView's (correct me if I am wrong)\nIn MVC5 we would do @Html.Action(\"Hello\", \"Test\", new { area = \"Test\" }) Basically I am just trying to recreate this - however sadly Html.Action no longer exists.\nBasically I just need to be able to call \"PartialViews\" from inside an Area like we used to be able to do in MVC5 - Maybe I am going about this wrong and need to re-think my approach.\n. ",
    "lovemory": "for example:\nhttp://host/Role/Create?type=xxx\nhow can I add \"type\" prameter in post url ?\n. ",
    "alialdemir": "You can do this by adding hidden inside forms\nfor example:\nhtml\n<form asp-controller=\"Role\" asp-action=\"Create\" method=\"post\" class=\"form-horizontal\" role=\"form\">\n  <hidden id=\"type\" value=\"xxx\" />\n</form>\n. ",
    "anurse": "We do have HashCodeCombiner, or at least we did in pre-K razor :). Also, obligatory XKCD reference: http://xkcd.com/221/\n. HashCodeCombiner? Now in the handy-dandy Microsoft.Framework.HashCodeCombiner.Sources package :)\n. It's because soon, netstandardapp will actually refer to a specific set of APIs that will be assumed to be available in the shared framework. netstandard refers to the standard library alone. As for why netstandardapp1.5 vs netstandard1.3, it's because the shared framework will only support netstandard1.5+\n. We need them to be in sync because KoreBuild is the one that ensures the SDK is installed. I can start a change to KoreBuild now to do that first.\n. https://github.com/aspnet/KoreBuild/pull/120\n. ",
    "ghisguth": "Updated\n. ",
    "ctaggart": "Forcing it on with <SourceLinkCreate>true</SourceLinkCreate> is just to show that it works. The line should be removed before a merge.. Thanks. I'll update it and my docs.. @davidfowl Just to confirm, is only has stuff in the build folder. PrivateAssets=\"all\" is needed for build only packages?\n. You want to run source link on whatever you are using as your build server. It doesn't need to run every time someone is doing development locally. It is setup by default to be enabled when the CI environment variable is set to true. This works for AppVeyor, Travis CI, and others. You can also turn on SourceLinkCreate by passing in the property dotnet build /p:SourceLinkCreate=true or /p:CI=true. Hope that helps.. Not needed. I can remove.. The only test I couldn't get to pass on Windows when the file is lf line endings.. This is a change merged in from #5906 which appears to fix the Travis CI build.. @dougbu I am fully aware of Windows developer resistance if you try to get rid of their carriage return. :sweat_smile: That is why adding SourceLink to your project doesn't change your local development at all. SourceLink only runs on the CI builds. This is documented in the readme at the end of this section. The next section about dotnet-sourcelink-git explains the line endings and then there is a dedicated wiki page on line endings. You need to not change the line ending on the build server to enable source linking. This only affects Windows CI builds. What are you using for the official builds? Team City? Do you control the git clone command? Aside, it will work without this settings, since I have SourceLink autofix the line endings by default. It will just be slow.. Probably. I don't know how to do that. Do you have the code or an example that might work? I can try it. It would really simplify this pull request.. I agree, but it was to make the test pass. .Trim() is used frequently in the other tests.. core.autocrlf=true & core.autocrlf=false both change line endings in the working directory. If you try it and open up the files with Visual Studio Code, it shows you the line endings in the lower right. The setting that doesn't and the one that would be nice to have is core.autocrlf=input.  SourceLink will autofix the line endings by default. I think it is really slow though. I have a build queued up on AppVeyor to see just how slow. \nI searched around a bit and found this:\n\nyou can create a build configuration executing the following command\ngit config --global core.longPaths true\n\nhttps://confluence.jetbrains.com/display/TCD9/Git\nSo a solution is to create a build configuration with:\ngit config --global core.autocrlf input\nDo you think that may work?. Filed bug #5907.. Okay, the autofix built into SourceLink only bumps the build time from 19 minutes to 20 minutes on AppVeyor. Not bad and may be acceptable instead of dealing with this build configuration stuff. Setting git config --global core.autocrlf input will only save 1 minute of build time on the CI server. More of an optimization.. I tried the above and got an error about metadata not being allowed in the position. I got a similar error when I tried:\nxml\n<Import Project=\"..\\sourcelink.props\" Condition=\"'%(ProjectsToPack)' == '$(MSBuildProjectFullPath)'\" />\nProgramming in xml is so efficient. :snail:. Tried: common.props(12,41): error MSB4099: A reference to an item list at position 3 is not allowed in this condition \" '@(OtherProjectsToPack)' != '@(ProjectsToPack)' \".. This should make it work on your TeamCity server by default. It would be awesome if your could try it and send me a link to a nupkg file.. This is all it takes.. ",
    "petriashev": "Cool). ",
    "poke": "Oh. I was under the impression that since the antiforgery is running as an authorization filter that\u2019s triggering the short-circuiting behavior of the MVC filter pipeline, that there was no way to have a result filter run afterwards. While that\u2019s true for normal result filters, AlwaysRunResultFilters do work there \u2013 I did not know that those existed! That makes this a lot easier of course.\nAs for the mixed concerns, I had the handler defined in the AntiforgeryOptions simply to avoid introducing a new MVC-specific antiforgery options type just for configuring the handler.\nBut with IAsyncAlwaysRunResultFilter working for this purpose, this gets a lot simpler, and I won\u2019t need to touch those options. I\u2019ll update the PR for this. \u2013 Thanks for the idea!. Good point. I originally put this in Mvc.ViewFeatures only because that was the only project that already had a reference to Antiforgery (since I needed the AntiforgeryOptions).\nBut with that requirement gone now (see below), I guess I can just put this result into Mvc.Core with all the other result types.. I like that idea! So I would create a IAntiforgeryValidationFailedResult then.\nSince I don\u2019t know exactly where what kind of types should be located, in what namespaces would I put the interface and the implementation then? Both in Mvc? I found some result interfaces inside Mvc.Infrastructure but those are probably meant for a somewhat internal use as well.. I forgot that this makes an actual difference for filters. Changed! :+1: . It feels a bit backwards since end users will probably never use the result object but rather the marker interface, but it matches how the other results and marker images are organized. Done! :slightly_smiling_face: . What about having a Url.Absolute() instead that would turn a relative URL into an absolute one?\nSo this would become Url.Absolute(Url.Action(\u2026)) but at the same time we also had Url.Absolute(Url.Route(\u2026)) or Url.Absolute(Url.Page(\u2026)) etc. without breaking compatibility and without ending up with lots of new methods.\nAnd we could also use that implementation directly for #8279 then.. "
}