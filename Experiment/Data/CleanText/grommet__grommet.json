{
    "rothskeller": "A better example is the iLO Advanced license key field, in the iLO access section of the form.  It has size=\"29\", but only 25\u00bd characters fit.\n. I reported this while generating a web tool using grommet (not publicly accessible, as you noted).  The tool presents a Form, and one of the FormFields accepts a serial number.  The serial number is 10 characters, all in uppercase, and I used size=\"10\" in order to make the entry field an appropriate size.  However, when 10 uppercase characters were entered in it, only 8\u00bd actually fit.  There was a similar problem with a license key field, size=\"29\", only 25\u00bd actually fit.\nI regret that I don't have a publicly accessible example of this at the moment, but I imagine you could easily duplicate it on any form with an input that sets a size= value.  Just enter that many uppercase letters into it and you'll see they don't all fit.\n. OK, then in that case this issue is outdated.\n. I just tried it again.  I fetched current grommet sources and ran npm install on Windows.  Result:\n```\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nnpm ERR! code ETARGET\nnpm ERR! notarget No compatible version found: html-jsx-loader@'>=0.1.10 <0.2.0'\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget [\"0.1.1\",\"0.1.3\",\"0.1.4\",\"0.1.9\"]\nnpm ERR! notarget\nnpm ERR! notarget This is most likely not a problem with npm itself.\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of 'grommet'\nnpm ERR! notarget\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\STR\\home\\src\\grommet\\npm-debug.log\n```\nSo then I fetched the sources for html-jsx-loader and ran npm install for them.  Result:\n```\n\ncontextify@0.1.13 install C:\\Users\\STR\\home\\src\\html-jsx-loader\\node_modules\\h tmltojsx\\node_modules\\jsdom\\node_modules\\contextify\nnode-gyp rebuild\n\nC:\\Users\\STR\\home\\src\\html-jsx-loader\\node_modules\\htmltojsx\\node_modules\\jsdom\\ node_modules\\contextify>if not defined npm_config_node_gyp (node \"C:\\Program Fil es\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\nod e-gyp.js\" rebuild )  else (rebuild)\nnode.js:202\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nTypeError: Cannot read property 'prototype' of undefined\n    at Object.inherits (util.js:528:43)\n    at Object. (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules \\npmlog\\node_modules\\are-we-there-yet\\index.js:115:6)\n    at Module._compile (module.js:432:26)\n    at Object..js (module.js:450:10)\n    at Module.load (module.js:351:31)\n    at Function._load (module.js:310:12)\n    at Module.require (module.js:357:17)\n    at require (module.js:368:17)\n    at Object. (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules \\npmlog\\log.js:2:16)\n    at Module._compile (module.js:432:26)\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\ node_modules\\npm\\bin\\npm-cli.js\" \"install\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! contextify@0.1.13 install: node-gyp rebuild\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the contextify@0.1.13 install script 'node-gyp rebuild'.\nnpm ERR! This is most likely a problem with the contextify package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls contextify\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\STR\\home\\src\\html-jsx-loader\\npm-debug.log\n```\nThere are two problems here.  First, it is trying to do a native build, and I think you indicated that there shouldn't be any need for native builds anymore.  Second, the native build it's trying to do is failing, as seen above.\nAlso, even though I wasn't able to proceed with npm install of grommet itself, it's clear from looking at its sources that it still has a sass-loader dependency and will therefore require a native build.\n. Apparently I should have read all of your responses first.  I didn't realize you'd set up a separate mechanism for consumer applications so that consumers don't have to build grommet.  Removing the dependency for the consumer is good enough for me.  You needn't remove it from the Grommet project itself on my account.\nHowever, now that I've seen and followed your Getting Started instructions for consumers, they still don't work on Windows.  Here's the log:\n```\n$ npm install -g grommet\nC:\\Users\\STR\\AppData\\Roaming\\npm\\grommet -> C:\\Users\\STR\\AppData\\Roaming\\npm\\node_modules\\grommet\\bin\\grommet.js\ngrommet@0.1.0 C:\\Users\\STR\\AppData\\Roaming\\npm\\node_modules\\grommet\n\u251c\u2500\u2500 inuit-lists@0.1.0\n\u251c\u2500\u2500 object-assign@2.0.0\n\u251c\u2500\u2500 inuit-images@0.3.3\n\u251c\u2500\u2500 inuit-functions@0.2.0\n\u251c\u2500\u2500 inuit-box-sizing@0.2.0\n\u251c\u2500\u2500 inuit-reset@0.1.1\n\u251c\u2500\u2500 inuit-responsive-settings@0.1.5\n\u251c\u2500\u2500 inuit-mixins@0.2.3\n\u251c\u2500\u2500 inuit-list-bare@0.3.0\n\u251c\u2500\u2500 inuit-page@0.2.1\n\u251c\u2500\u2500 inuit-responsive-tools@0.1.3\n\u251c\u2500\u2500 inuit-clearfix@0.2.2\n\u251c\u2500\u2500 inuit-defaults@0.2.3\n\u251c\u2500\u2500 react-time@2.5.0\n\u251c\u2500\u2500 inuit-shared@0.1.5\n\u251c\u2500\u2500 flux@2.0.3\n\u251c\u2500\u2500 mirrorkey@1.2.0\n\u251c\u2500\u2500 inuit-normalize@3.0.3\n\u251c\u2500\u2500 inuit-headings@0.3.1\n\u251c\u2500\u2500 mkdirp@0.5.0 (minimist@0.0.8)\n\u251c\u2500\u2500 react-router@0.13.3 (qs@2.4.1)\n\u251c\u2500\u2500 superagent@1.2.0 (extend@1.2.1, methods@1.0.1, cookiejar@2.0.1, component-emitter@1.1.2, reduce-component@1.0.1, mime@1.3.4, qs@2.3.3, debug@2.1.3, readable-stream@1.0.27-1, formidable@1.0.14, form-data@0.2.0)\n\u251c\u2500\u2500 gulp-template@3.0.0 (through2@0.6.5, gulp-util@3.0.4)\n\u251c\u2500\u2500 gulp-install@0.4.0 (which@1.0.9, through2@0.6.5, gulp-util@3.0.4)\n\u251c\u2500\u2500 react-gravatar@1.2.0 (md5@1.0.0, is-retina@1.0.3)\n\u251c\u2500\u2500 gulp@3.8.11 (pretty-hrtime@0.2.2, interpret@0.3.10, deprecated@0.0.1, archy@1.0.0, minimist@1.1.1, tildify@1.0.0, v8flags@2.0.5, chalk@0.5.1, semver@4.3.3, orchestrator@0.3.7, gulp-util@3.0.4, liftoff@2.0.3, vinyl-fs@0.3.13)\n\u251c\u2500\u2500 highlight.js@8.5.0\n\u251c\u2500\u2500 moment@2.10.2\n\u251c\u2500\u2500 lodash@3.8.0\n\u2514\u2500\u2500 react@0.13.2 (envify@3.4.0)\nSTR@STR-8540w ~/src/t\n$ grommet init sample-app\nnode.js:202\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nTypeError: Object prototype may only be an Object or null\n    at Function.create (native)\n    at Object.inherits (util.js:528:27)\n    at Object. (C:\\Users\\STR\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\gulp\\node_modules\\gulp-util\\node_modules\\through2\\node_modules\\readable-stream\\lib_stream_readable.js:52:6)\n    at Module._compile (module.js:432:26)\n    at Object..js (module.js:450:10)\n    at Module.load (module.js:351:31)\n    at Function._load (module.js:310:12)\n    at Module.require (module.js:357:17)\n    at require (module.js:368:17)\n    at Object. (C:\\Users\\STR\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\gulp\\node_modules\\gulp-util\\node_modules\\through2\\node_modules\\readable-stream\\lib_stream_duplex.js:43:16)\n```\n. The error quoted above turned out to be due to an old version of node on the path.  Using a current version (0.12.2) was successful.  However, it still needed to do a native compile of the ws package.\n. Not yet, no; I\u2019ve been pulled into other things.  But thanks for reminding me; I\u2019ll give it a try at next opportunity.\nSteve\nSteve Roth           steve.roth@hp.com            +1-650-236-0416\nConverged Infrastructure Platform Architect, HP Converged Systems\nFrom: Alan Souza [mailto:notifications@github.com]\nSent: Wednesday, May 13, 2015 15:11\nTo: HewlettPackard/grommet\nCc: Roth, Steve\nSubject: Re: [grommet] npm install doesn't work on Windows (#3)\nHi Steve, did you have a chance to re-test this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/HewlettPackard/grommet/issues/3#issuecomment-101832667.\n. Tried them out.  Very good, thanks.\n. Verified fixed.\n. I don't know why this didn't work for me, but I've been unable to reproduce it.  The install is properly creating symlinks for me now.\n. Yes, it has, thanks.\n. ",
    "mattfarina": "@rothskeller A couple quick questions...\n1. What is the context for <input size=\"10\">? I don't see that in the grommet codebase.\n2. The link you shared is not publicly accessible. Do you have an example that is publicly accessible?\n. Aside from the issues I listed on the other issue I'm also finding:\n1. gulp-util, deprecated, vinyl-fs, prelude-ls, deep-is, fast-levenshtein, wordwrap, type-check, event-stream, dargs, pretty-data, xml2js, right-align, center-align, assert, buffer, console-browserify, constants-browserify, crypto-browserify, domain-browser, events, http-browserify, https-browserify, os-browserify, path-browserify, punycode, process, querystring-es3, stream-browserify, readable-stream, string_decoder, util, timers-browserify, tty-browserify, url, vm-browserify, browserify-zlib, and levn are undocumented (or rather not in package.json) node dependencies for creating a dist. Should these be dependencies or devDependencies in the package.json? Have you tried following these instructions from a clean environment?\n2. Running gulp dist from the doc directory also found the missing dependencies gulp-chug, pretty-hrtime, chalk, semver, archy, liftoff, tildify, interpret, v8flags, and minimist. Should these be dependencies or devDependencies? \n3. The readme in the example server directory doesn't specify how this example should be used. How should it be used, independently of the other examples? Or, is it just mean to be a dependency for them? Can the readme be updated to specify exactly how the server example should be used. Maybe a readme in the examples directory outlining how each of them should be used.\n4. After I follow the code:\nsh\n$ cd ../examples/medium-app\n$ gulp dist\nI get the error:\n$ gulp dist\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'grommet/utils/gulp/gulp-tasks'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:278:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/mfarina/Code/HP/grommet/examples/medium-app/gulpfile.js:3:20)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\nI can correct this by changing the gulp.js file in the medium-app to use a relative path for this file (e.g., var devGulpTasks = require('../../src/utils/gulp/gulp-tasks');). But then other things start breaking. Is something supposed to instead link the dist directory into the node_modules?\nThere is a package.json file in the medium-app directory. Running npm install gives me the error:\n```\n$ npm install\nnpm WARN package.json medium-app@0.1.2 No repository field.\nnpm WARN package.json medium-app@0.1.2 No README data\nnpm WARN package.json medium-app@0.1.2 No license field.\nnpm ERR! Darwin 14.3.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! node v0.12.4\nnpm ERR! npm  v2.10.1\nnpm ERR! code ETARGET\nnpm ERR! notarget No compatible version found: grommet@'>=0.1.2 <0.2.0'\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget [\"0.2.0\",\"0.2.1\",\"0.2.2\"]\nnpm ERR! notarget\nnpm ERR! notarget This is most likely not a problem with npm itself.\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nnpm ERR! notarget\nnpm ERR! notarget It was specified as a dependency of 'medium-app'\nnpm ERR! notarget\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/mfarina/Code/HP/grommet/examples/medium-app/npm-debug.log\n```\nThis is where I stopped. I'm not sure how this should work or I'd submit a pull request.\n. Two quick things:\n1. Is the server example an example or simply a dependency for the other examples? If it's a dependency it could be useful to explicitly say that.\n2. When I tried to run the medium app two things happened. First, I didn't have to go beyond the gulp dev step in the README.md. Step 2 was just not required. Second, it brought me to a login screen and I don't know the user/pass. I'm not sure from this how to use the medium app.\n. I've started to poke at this again. The README in the medium-app didn't work when I just tried them. I'll walk though the wiki guide next week.\n. For a moment I'd like to take a step back. Something isn't clear to me. When I navigate to the examples directory I assume that each of these examples can stand on their own. Reading the wiki page it seems server is meant to be used by one of more examples rather than stand on its own. Is that the case?\n. I encountered an issue building grommet and running the example server. After using npm install in the root of the project I try to run gulp dist per the documentation (step 5). I get the following error:\nsh\n$ gulp dist\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'orchestrator'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:278:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/mfarina/Code/HP/grommet/node_modules/gulp/index.js:4:20)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\nIs \"orchestrator\" an undocumented dependency?\nNote, I could try to fix these myself but I'm trying to understand what's going on and make sure everything is documented. I want the next person to have an easier time and I'm still figuring things out myself.\n. Here's my issue, anytime you'd want to use gulp or another dependency it should be explicitly listed as a dependency. The only ones you should count on in the environment are node and npm. Given that, should these be listed or will they never be needed and a change made so they are never needed?\n. I'm not sure what do with this selenium error at the moment. It looks unrelated to the change I made... https://travis-ci.org/HewlettPackard/grommet/builds/68516737\n. I looked at this and ran through the example server setup. Everything worked smoothly. Looks good.\n. Nice catch.\n. I'm a sucker for https. It might be worth updating those URLs for the default. Especially if an app is going to be used behind https. Just thinking of a sane default.\n. Wanted to give some more background...\nSEO Problem: If you're building a public website you need to consider SEO. Aside from Google, which in the US has ~67% of the search market, we don't know of other search engines processing all JavaScript.\nTo solve the front-end built pages while providing SEO tools like Discourse will serve raw HTML in a noscript tag for search engines that don't handle JS. Then do the browser side work separately.\nOh the things we do for SEO. This is important for anyone building a publicly accessible site with Grommet. Apps, especially those behind a login, are different.\nIn Grommet 0.3.0 the global document object is referred to often. You can see this in components like Article. That object is available in browsers but not node.js so Gromment, as it stands today, can't be used to render on the server side.\nProposed Solution: Instead of grabbing the global document object use the virtual DOM provided by React. Once a component has been rendered to the DOM a read DOM element is associated with a component. Then you can use...\njs\ndocument = React.findDOMNode(this).ownerDocument;\n. Testing the pattern on #88.\n. @alansouzati thanks, I'll take a look. I noticed the document object is still referenced in App.js. node may still have an issue with an object that's not defined there.\n. @TiagoJustino Skip links are a great thing to have. Thanks for the work.\n. @bryanjacquot @alansouzati @ericsoderberg This is ready to merge. I was just looking to do the calendar component first and not everything. Unless you see something I should do first.\n. Instead of trying to globally grab the document object, which isn' there in server side rendering situations can this be uploaded to use the virtual DOM in React.\nFor example you can get the virtual document here with...\njs\nvar document = React.findDOMNode(this).ownerDocument;\n. Actually, I'm doing some more testing now and it seems the virtual DOM may not have enough affect on the real DOM. Stay tuned.\n. Ran some more tests. This method for getting a document to use should work. What you may not see is the bound event listener in the DOM the same way (such as in chrome devtools). Things should still work.\n. ",
    "bryanjacquot": "@ericsoderberghp I just looked at the form fields in the documentation and the form fields don't have a size parameter.  I set a size value on the input field by editing the HTML in the browser, and it seemed to be ignored.  I'm wondering if the new Form layouts render this no longer an issue as the forms seem to respond to the display appropriately.\n. This can be done with the FormField help attribute.  http://www.grommet.io/docs/hpe/develop/formfield\n. Thanks Tim!  Much appreciated.\n. Donut has been deprecated in favor of Meter (http://www.grommet.io/docs/hpe/develop/meter).  But in general, Grommet doesn't support providing classes to components.  Styling should be done via a custom theme, not by passing component-specific classes and styles.\n. Thanks for the background on your desired workflow.  What is the concern with installing globally?  It does require admin permissions, but since this is done on an developer's system and not on the production system, that doesn't seem like an unreasonable requirement.  The resulting workflow seems simpler when installed globally, especially when a developer is creating and exploring multiple projects.\n. @tobias-flitsch: the flush option has been depreciated and removed from the App component.  If you're having an issue, please provide a recent example with more details, including a CodePen.\n. @nanndoj we're cleaning up old issues and believe this has been resolved.  Let us know if you're still seeing this with the latest grommet.\n. It's a bit hidden, but this line is the key thing\n[webpack-dev-server] started: Browse to http://localhost:undefined/webpack-dev-server/\nIf you point your browser at http://localhost:undefined/webpack-dev-server/you should see the app you're running.\n. I should have looked closer, the \"port\" part of the URL is \"undefined\".  I'll need Alan to look at that.\n. Alan, would it make sense to change the gulp dev task in the root folder to instruct them where the right place to run 'gulp dev'.\n. Thanks.  We saw this yesterday and restarted service.  Have now found the exception in Slackin, but aren't sure why yet.\n/usr/local/lib/node_modules/slackin/node/slack.js:70\n        res.body.channels.forEach(function (channel) {\n                          ^\nTypeError: Cannot call method 'forEach' of undefined\n    at SlackData.onres (/usr/local/lib/node_modules/slackin/node/slack.js:70:27)\n    at /usr/local/lib/node_modules/slackin/node/slack.js:41:17\n    at Request.callback (/usr/local/lib/node_modules/slackin/node_modules/superagent/lib/node/index.js:746:30)\n    at Request.<anonymous> (/usr/local/lib/node_modules/slackin/node_modules/superagent/lib/node/index.js:135:10)\n    at Request.EventEmitter.emit (events.js:95:17)\n    at Stream.<anonymous> (/usr/local/lib/node_modules/slackin/node_modules/superagent/lib/node/index.js:938:12)\n    at Stream.EventEmitter.emit (events.js:117:20)\n    at Unzip.<anonymous> (/usr/local/lib/node_modules/slackin/node_modules/superagent/lib/node/utils.js:124:12)\n    at Unzip.EventEmitter.emit (events.js:117:20)\n    at _stream_readable.js:920:16\n. This is on our backlog; we just wrapped up a major revision of the AI file, and will now turn our attention to updating and creating the other formats.  Thanks for your interest.  If you are willing to contribute a PSD file, please let us know.  Others have expressed interest in this as well.\n. Dup of https://github.com/grommet/grommet-design/issues/15\n. @alansouzati would it make sense to provide a gulp dev task in examples/server to simply run the node server command?  I use this quite a bit.  Using the same command (even if it does different things under the covers) in each area/example would be beneficial.\n. Thanks Tiago!  Nice improvement.\n. Looks good to me, thanks for cleaning that up!\n. I took a look at this using IE and Chrome on Windows and Chrome on Mac and all work correctly.  I'm wondering if there's something going on with your browser/system locale.  What is your primary language set to on your computer/browser?\n. thanks @mirsilstan, would you mind submitting a PR with your fix?\n. Thanks for the PR!\n. Resolved with #78\n. Thanks for the PR!  We just made a similar change to the other theme's font paths but didn't get this one updated.  Would you mind refactoring this slightly to use a variable for the base of the font path similar to how it's done here (line 20)?\nhttps://github.com/HewlettPackard/grommet/blob/master/src/scss/hpe/_hpe.defaults.scss\n. Hello @tobias-flitsch, will you be able to tweak the PR as I suggested?  Would like to merge this PR if you're able to tweak slightly to align with the similar changes we've made in other areas.  Thanks!\n. Thanks for your contribution!\n. Hi @winkler1.  Thanks for your interest in Grommet.  We have some online demos, but they aren't linked into the site as they should.  We'll fix that.  Until then, feel free to check these out:\n- http://grommet.io - the site itself is using the Grommet framework\n- http://grommet.io/medium-app - an example type of a \"medium sized\" application using Grommet.  Login with any email address and any password.\n- http://grommet.io/cto-app-tuner - a really simple application we used during the launch of Grommet.\n- http://grommet.io/todo-app-modular - we felt obliged to create a ToDo application\n. Hello again @winkler1.  I've updated the README for each of the example apps to include a links to the live demos.   Would be cool to have Grommet added to react.rocks.  I'd suggest using either the grommet.io site itself, or the medium-app as the example demo app.  Thanks!\n. @winkler1, we've updated the Medium App to not require a login.  From the session menu, can logout to return to the Login Page for those who want to interact with it.  Let me know when React.rocks has been updated and we'll promote it.\nhttp://grommet.io/medium-app/\n. We've conducted a round of usability testing on this issue, and users were able to utilize the main menu without an issue.  We'll continue to watch this, but for now we believe the approach is acceptable.\n. This has been addressed in the recent versions of Grommet.\n. @mattfarina, we will start with the basic structural and typographic components.  Our strategy will be to pass any properties that components don't natively understand on to the underlying DOM element.  Once we get these components updated, we can explore enhancing other components on a case-by-case basis.\n- [x]  Anchor (#899)\n- [x] Article\n- [x]  Box\n- [x]  Button\n- [x] Carousel\n- [x] Checkbox\n- [x] Columns\n- [x]  Footer\n- [x] Form (#919)\n- [x] Form Field (#921)\n- [x]  Header\n- [x]  Heading\n- [x]  Image\n- [x] Label\n- [x] Legend\n- [x]  List\n- [x]  Menu (#910)\n- [x] Meter\n- [x] Paragraph\n- [x] Quote\n- [x] Radio Button\n- [x]  Section\n- [x]  Sidebar\n- [x] Social Share (#920)\n- [x] Split\n- [x] Sunburst\n- [x]  Table\n- [x]  Title\n- [x] Value\n. Thanks for your contribution!\n. Thanks for the feedback.  We will refine these instructions.  If you follow the button that says \"Start Project\", you'll see there are a few steps required when setting up your first project to get the dependencies in place.\nhttp://grommet.io/docs/develop/get-started\n. Believe it or not, this is progress.  You've now hit a defect that we fixed with the latest release of Grommet.  Can you run the following command to pickup the latest version?\nAs admin or using sudo:\n$ npm update -g grommet\n$ grommet init sample-app\n$ cd sample-app\n$ gulp dev\n. Fixed in https://github.com/grommet/grommet/pull/166\n. Hey @Deklin, could you provide some more information about this issue?  In what cases do you need a scrollbar on a login page?  That component has been designed to respond to any screen size without requiring a scroll bar.\n. Much of this will be handled by the resolution of https://github.com/grommet/grommet/issues/85.  We will use this issue to track the specifics of LoginForm since that is not one of the initial components we'll be addressing.\n. @tran2519 can you verify this issue is resolved on http://ferret.grommet.io\n. This is an issue with Ferret, not core grommet.\n. This is the designed behavior with the Ferret implement.  This was by design to put focus on search while on a small screen.\n. Handled by the new chart axis component http://grommet.github.io/docs/chart-axis.  Ferret isn't using this new component but it's available for apps to use.\n. This is a different behavior from piano, but is by design.  The filters are being kept independent of the search field.\n. @antoine-voiry is this still an issue with the latest version of Grommet, Node, NPM on CentOS?\n. All icons are available as SVG (and have been for a while).  https://github.com/grommet/grommet/tree/master/src/img/icons\n. In the stable branch of grommet, there is now and Accordion http://www.grommet.io/docs/hpe/develop/accordion which will be in the next release of grommet.\n. Will explore resolving this as part of creation of the new grommet-cli command.\n. @sudesh-gama: it's been a while since you submitted this issue.  If you're still having issues, can you please create a CodePen to illustrate?  You can start with this Hello World pen: http://codepen.io/grommet/pen/gaEGPY\n. Menus now have a light grey background that avoids this issue.\n. This is likely an issue with the Ferret application.  However, the menu example on the docs site also opens menus at full width so before closing this issue as a bug in Ferret, we want to be sure there's not a broader issue in Grommet.  http://grommet.github.io/hpe/docs/menu\n. This has been fixed in Grommet.\n. It seems Chrome and Safari are properly aligned.  Firefox is a bit off.  IE is tbd.\n. This has been addressed in http://ferret.grommet.io/\n. Closing this as we believe this was addressed some time ago.\n. The new Chart interface resolves this (the caller can specify the reverse property to control order of data with respect to layout order).  http://grommet.github.io/docs/chart-area\n. Fixed in https://github.com/HewlettPackard/grommet/commit/89a164aa6e90cd709dcac287c3124a22225b5fd6\n. Many IE issues have been resolved over the past 11 months, the layout now looks similar across browsers.\n. Thanks!\n. Looks good, thanks!\n. @kylebyerly-hp: does the return of the lint calls result in the gulp task failing?  For example, gulp dist should fail if there are lint errors.  Just making sure that's still the case.\n. Thanks!\n. This is not a Grommet issue any longer (there is no Actions.js) and the application is expected to control the interaction with the REST APIs.\n. Hello @FMCalisto, thanks for your interest in contributing to Grommet.  You do not need to join the HP organization to contribute.  You can follow the content in this video to contribute to Grommet:\nhttps://vimeo.com/129681048\n. Thanks for the feedback, @samogami.  Page titles are now unique for each page on grommet.io.\n. Thanks for the feedback @samogami.  Only elements within an open layer are now focusable.\n. @josephalhamad did you have a chance to explore @jwijay suggestion?  Is this still an issue for you?\n. Closing until we hear more from submitter.\n. Moving to Grommet Toolbox https://github.com/grommet/grommet-toolbox/issues/12\n. @Dinesh-Ramakrishnan is this still an issue?\n. Closing with no response.\n. @samogami do you still see this issue on Chrome?  I'm not able to reproduce it any longer.\n. Closing.\n. @shaiksphere any response to @ericsoderberghp question?\n. @abenson337 if you're still having issues, please create a CodePen illustrating the issue.  This one can be used at a starting point if you'd like: http://www.grommet.io/docs/develop/hello-world\n. Closing for now.  Let us know if this is still an issue.\n. Thanks for the contribution @mtgibbs.  However, I believe the suggested icon is a bit too literal.  I'll leave it to @L0ZZI but I don't believe this fits with the brand's design language. \n. Ha ha, I get it.  I mentioned in our daily standup that I was wondering if this was a joke.  :-)\n. The alternative would be to load CSS and fonts synchronously forcing the page render to wait for the CSS (specifically for fonts).  This raises other issues, so we're going to close this  without change for now.\n. Reproduced in IE11 here: http://grommet.github.io/docs/form at the bottom of the Edit First Section form.\n. We are working on a new Grommet CLI, you can see the beginnings of it here (https://github.com/grommet/grommet-cli) that will dramatically reduce the requirements for installing the CLI.  We will validate what dependencies are required on windows to develop a grommet-based application with Node 4.x.\n. Pagination control is not currently planned.  We continue to recommend infinite scrolling with rich search and filtering.\n. Closing based on lack of response.\n. @Rakshaki this should technically be possible using the Grommet menus.  However, this is not a pattern we encourage given the interaction issues with navigating sub-menus and the poor translation of such navigation to mobile.\n. The floppy icon has historical value, but in modern web apps, it's an inappropriate metaphor.  We'd suggest the following:\n1. If you want to allow users to download (save) content, then use the download icon.\n2. If you want users to be able to save content within the app, then an \"ok\" \"submit\" button is suggested.\n3. If the web app always saves state,there may not need to be a save operation (e.g. Google Docs doesn't have a save action, it just happens).\n. Yes, we need to update the sticker sheet to match the checkboxes used in Grommet.\n. This has been resolved in the v0.9.5 version of the sticker sheets.\n. Safari 8 is not officially supported since the latest version of Safari is 9 and only the latest version is supported (http://grommet.github.io/hpe/docs/browser-support).  But if there is a simple fix, we will explore it.\n. Our approach for sorting is to use rich filtering and sorting via menus as you can see on this page http://hc380.grommet.io/virtual-machines (click the Filter icon in the upper right).  If you're prompted to login, any username and password will work.  We don't have further plans for a sortable table at this time.\n. Checkout the new grommet CLI which allows easy creation of different types of apps with different themes and supports babel.  https://github.com/grommet/grommet-cli\n. Many updates have been made to improve IE 11 support.  It now loads properly.\n. This appears to be working properly now.  When a colon is typed, the results list is empty (as expected) but the field and URL continue to update as expected.  If this is still an issue with a different app, please provide a CodePen.\n. @jaitthomas let us know if you still need assistance.  Closing this issue for now as the suggestion provided should handle your needs.\n. Closing for now.  You may also want to checkout the new Grommet charts: http://grommet.github.io/docs/chart/ which provide a lot of flexibility.\n. Changing a product to not use transitive dependencies is not sufficient.  We don't control the declaration of dependencies in underlying components.  Using this example, eslint depends on esutils and the manner eslint uses to declare that dependency is outside of our control.  As such, utilities such as shrinkwrap are necessary as it controls the version of the recursive list of dependencies.   https://docs.npmjs.com/cli/shrinkwrap\nIn grommet, we've decided to follow the pervasive pattern of allowing updates to keep using the latest version of dependencies.   It's up to each consumer to follow the same pattern or use something like npm shrinkwrap.\n. Beginnings of this are in grommet-templates\n. @maple10001 did the previous suggestion resolve your issue?  If not let us know.\n. The way we'd recommend handling this situation is to add an app-specific class to the app's use of the Box (or other) component and apply the desired styles via that class.\n. @ericsoderberghp, please take a look at this issue and PR to consider along with the chart improvements underway.\n. @elronalds: we have some new chart capabilities coming soon where this capability won't be required.  We will keep this PR open until we've verified this issue is no longer present.\n. The new chart component addresses this issue.  http://grommet.github.io/docs/chart\n. @elronalds we've found this example works well when the data point is in the lower 2/3 of the graph, but when values reach the top of the graph, they extend beyond the top of the graph which could be near the top of the page.  So we're left asking if we pad graphs on the tap to account for this.  Hence our current direction.  We continue to make improvements in this area, but in the example here, there are cases it doesn't always work well.\n. The new charting component now displays the legend and current value outside the graph area.  http://grommet.github.io/docs/chart/\n. Dup of #380\n. Don't believe this is an issue any longer.\n. This is no longer applicable.  Grommet no longer uses reflux.\n. We will use the Markdown component or a blog-style site like grommet-blog instead of a fully markdown site.\n. This is being included in the upcoming digital toolkit.\n. @C5197328 yes, this is certainly possible.  A Grommet app is just another web app, so it can be launched via a URL.\n. We will turn off autocomplete for SearchInput, Search, and NumberInput.\n. @tomtosi, can you please submit this issue against the grommet-index project?  https://github.com/grommet/grommet-index/issues/new\n. If the set of suggestions is fixed, have you considered using a standard HTML <select> control?  That control uses a down icon.  You can examples on the form page: http://www.grommet.io/docs/hpe/develop/form\n. @primozs, we are considering merging the current SearchInput and Search components as there's a lot of similarities.  Then we'd add a new Select component and make it operate more like Search Input and the react-select project you referenced.  What elements of the react-select project were you looking at?  That's a pretty comprehensive component that I don't think we need all of those capabilities.  Interesting in your perspective.\n. Agree.  The selection should be highlighted.\n. Since putting focus in the search input selects all the text in the field, the backspace key can easily be used to clear the entire field.  If there's a specific scenario where there's a need to add another control, please let us know.\n. closing based on previous response.\n. We'd like to avoid adding the counter to keep the content to a minimum.  If there's a specific scenario where we must have the counter, then we'd like to discuss further.\n. Search suggestions should be kept relatively small, in the ballpark of 5-10 ideally, but it could be as high as 40.  Beyond that, the user should be encourage to type a few characters to limit the size of the list, rather than scrolling through pages of items in a search suggestion list.\n. \n. Confirmed issue.\n. Confirmed this is an issue.\n. In this case, the consumer of the component can structure suggestions as components and control rendering and layout as desired.   In this example, the content wasn't structured for a better layout.\n. We'd recommend not showing the form field until the preconditions have been made.  This follows the progressive disclosure principle we advocate.\n. Closing based on previous response.\n. We've verified this behavior is odd.  The intent is the suggestions should not be shown upon focus on the search input.  When the user begins typing or taps the search icon the suggestions will show.\n. We'd like to explore ways to provide this feature without requiring a table in a search combo.  Suggest using a ListItem with a justify=\"between\" parameter.\n. Closing based on previous guidance.\n. We've verified this is an issue.\n. By fixing issue 415, this will be resolved.\n. Had to remove and re-install the latest grommet command and then the sample app was the up-to-date.\n. Our recommendation to handle required fields with validation messages when the user attempts to submit the form.  We also recommend having good defaults for all fields that allows users to input fields without having to interact with all form elements.  In addition, apps may a label to indicate which fields are optional that do not have an obvious default value.\n. Addressed with the new Grommet Toolbox.  https://github.com/grommet/grommet-toolbox\n. Dup of #590\n. We have primary and secondary text for the component, we don't believe another color is required.\n. @ibhag we aren't able to reproduce this any longer in Chrome.  Are you still seeing this?\n. I've confirmed this is still an issue with Edge v14 on Windows 10:\n\n. Box works this way, but other components should be updated to behave this way.\n. @ibhag: thanks for your contribution.  We have some new chart capabilities coming soon where this capability won't be required. We will keep this PR open until we've verified this issue is no longer present.\n. @geshenyi were you able to get your environment running on your windows laptop?\n. Closing.\n. @primozs eagerly awaiting a PR for this.\n. @ibhag, this is the classic, \"Flash of unstyled text\" (https://css-tricks.com/fout-foit-foft/) issue that is caused by the browser rendering the page before the fonts have been loaded.  Once the fonts are rendered, the page appears correct.  You can read about options to deal with this, but as of now what you're seeing isn't desirable, but is expected.\n. @johnnyvcn: the latest grommet should address this issue.  Please let us know if you're still having issues.\n. Should be fixed in latest grommet-toolbox.\n. Closing until more details are provided.\n. The new Grommet Rest utility uses Fetch instead of Superagent.   This is no longer is applicable.\n. @techPackets, this appears to be working properly with the latest version of Grommet.  Can you please verify?\n. @icukaegbu, our goal is not to copy Material Design.  We are building components based on need in apps we're developing, and we're happy to accept PRs from the community.   For Cards, have you looked at Tiles?  For Avatar, we use the existing react-gravatar project as shown in the Ferret example app demo.  Finally, we use tooltips very sparingly as they don't translate well to mobile where there is no hover state.  I know these three were example components you were referencing from Material, but if there are others you'd like to see, let us know...or better yet, submit a PR.  :-)\n. Will hold off on this fix to verify it doesn't have unintended side-effects.\n. @yangguoyk2015 you can show/hide the legend, but currently the value is always shown.  Can you provide more context for what you're needing to be able to achieve?\n. @yangguoyk2015 both of these capabilities are coming soon in updated chart and meter components.\n. Will move to week 2 to verify fix doesn't cause issues with non-full width videos.\n. @dbuarque Can you be more specific about what you're looking for?\n. Closing for now.\n. @JhansiSimma can you please provide more details using an example in Codepen preferably?  The example screen seems to be truncated.  If you're trying to use Tabs within Tabs, then you are attempting to use Tabs in a way that is not recommended and not supported.\n. Closing for now.   Please re-open and provide more details if necessary.\n. React 15 was brought into Grommet v0.6.5\n. @antoligy and @arlair: a couple of comments.  First, there is recent activity in Inuit CSS, take a look at the issue mentioned above.  Second, Grommet's use of Inuit is more about the structure and mindset than the leverage of lots of code.  When we started Grommet, Inuit was listed as \"pre-alpha\" which was a concern.  But as I said, we are relying on it more from a philosophy and structure perspective, not deep code reliance.\n. Resolved with the latest grommet.\n. Related to: https://github.com/grommet/grommet/issues/678\n. New site at http://grommet.github.io/ is ready with the following items remaining:\n- [x] Merge new-site branch to master\n- [x] Validate new site\n. @genyded this can be achieved by intercepting the event in the onClose function as shown in this updated Codepen.  http://codepen.io/grommet/pen/zBZBvX\n. @osvaldovega these meters support up to 4 values.  After that point, there's a warning displayed in the console.\n\n. Moved issue to https://github.com/grommet/grommet-blog/issues/129\n. Will address as part of issue #664.\n. @aiqingli we fixed several IE issues in the most recent release of Grommet. (https://github.com/grommet/grommet/releases/tag/v0.6.7) can you verify this is still an issue?\n. Closing for now, please follow-up if this is still an issue.\n. Closing per https://github.com/grommet/grommet/issues/601\n. @paridab, please follow-up on @alansouzati feedback to this PR.\n. @paridab: please take a look at @alansouzati response to the PR, and update accordingly.  Closing the PR for now.\n. Updated the HC380 app with this capability for Discover in June 2016\n. Closing until we get confirmation this is still an issue.\n. Agree the Video component could be improved.  We'd suggest starting by making the timeline clickable to allow the viewer to move play position anywhere within the video, instead of being limited to chapter boundaries as it currently is.  A mute button also seems appropriate to add as a next addition.  If you'd like to submit a PR, that'd be great!\n. https://github.com/grommet/grommet/pull/758\n. @Stalso, can you be more specific on the issues you're facing?  There's another open issue regarding the use of just css-modules and grommet (https://github.com/grommet/grommet/issues/567) but without more details it's hard to provide guidance.  We'd be happy to work with you in hopes of getting Grommet working with this boilerplate.\n. @Stalso, thanks for the feedback.  We are investigating ways to allow Grommet components to be more easily consumed in apps that may not be using Grommet-toolbox.  You can follow the progress here: https://github.com/grommet/grommet/issues/678\n. @huiwang-hpe we've confirmed this behavior is not working properly on Safari, but other browsers seem to be working as you describe.  Please confirm this is the case for your environment, if not please provide more details.\n. @masogit can you confirm the version of Grommet you were using when you saw this issue?\n. @masogit we don't believe this is still an issue, closing.\n. @tierralibre any update on this issue?\n. Related to #567 being investigated.\n. Agreed with @epilande to wait for final designs before proceeding with this PR.\n. Updated contributing guidelines: https://github.com/grommet/grommet/blob/master/CONTRIBUTING.md\n. Created issue and pull requests templates here: https://github.com/grommet/grommet/tree/master/.github\n. Done: https://github.com/grommet/grommet-cli\n. Fixed in https://github.com/grommet/grommet/commit/68cbef30cc2b06a620880a81778d4c9d6fd5e961\n. @alansouzati found that we made other changes that should allow re-enabling the desired overflow behavior which should result in not having redundant scroll bars.\n. Thanks for the feedback @samogami.  We're thinking that adding a pause/play button at the bottom corner of the carousel when the AutoPlay is set to true.\n. Steps to reproduce:\n1.  Open http://www.grommet.io/docs/hpe/develop/menu\n2.  Set browser size to be narrow such as a phone\n3.  Open one of the closed menus in the examples\nPage scrolls to the top instead of staying in place.\n. @Beelal: can you provide more information on what steps you took to reproduce this and the expected behavior?\n. @nickjvm thanks for the information.  A PR with the proposed CSS adjustments would be awesome.\n. Thanks for the CodePen @epilande.  This interaction is intended as Grommet uses the browser's native dropdown to ensure proper behavior across platforms and when lists get long and require special handling for scrolling.  The lists are styled, but the behavior of where the menu appears is beyond the control of styling, currently.\n. @HeidiTosi the openMulti option allows multiple rows to be expanded.  I know this isn't the expand / collapse all variation you mentioned, but it does add a bit of flexibility.\n. @HeidiTosi the latest Accordion doesn't indent the expanded content area.  It's up to the caller to add any desired padding.  However, the heading of accordion items have an unnecessary padding by default which should be left to the caller using a padding attribute.  We've added a new issue in a different repo to track this issue (long story).\n. Key objectives of this feature are:\n- Allow users of components to import just the component styles, e.g. \"Chart\", \"Anchor\", or \"Button\" and not have to include the entire Grommet CSS structure.\n- Flatten the CSS structure to make it more robust\n- Grommet CSS styles do not affect any other, possibly non-grommet, elements.\n. The new Meter / Legend example is the recommended approach for handling this.  The latest Legend also handles right-aligning values properly.\n. https://github.com/grommet/grommet/pull/779\n. Closing until we find a need for this.\n. The grommet form patterns are designed as they are for a reason.  They have a clean way of displaying help tips, as well as validation messages.  They are also based on research showing in-field labels are very efficient for users to scan and use.  There are several issues the the proposed designs:\n- Once a value is selected, or if a default value is provided, there's no way to know what the field is. (e.g. the Select Order Type field).\n- If there's a validation error in the From \"Ship date range\" field, where does the validation message appear? \n- With side-by-side fields, what is the responsive behavior on a phone in portrait landscape?\nThanks for the suggestion, but these suggestions have flaws that the existing Grommet forms were specifically designed to overcome. \n. The SVGImage component provides the ability to specify the viewBox attribute to size arbitrary SVG icons.\nThe build-in Grommet icons are sized based on standard size increments that align with line height, fonts, and padding as discussed here: http://grommet.github.io/docs/padding.  If you have a need for a custom size icon, please provide more information as to what you're trying to achieve.\n. When the Tip is opened on a phone or small browser window (and the window is hard reloaded) the tip starts above the component and when the user scrolls down the page, the tip drops below the component but the carrot doesn't move accordingly.\n. Results from initial discussion\n- We'll use Jest for simple components and components without intricate interaction.\n  - Still evaluating Jest for component lifecycle methods\n  - Will give us visibility to the DOM\n  - Will allow for rapid test creation and updating\n- We'll use Enzyme for more complex components that require mounting and have interesting interactions.\n  - This will enable us to interact with the DOM.\n  - This will allow us to assert on expect component behavior and handling of state.\n- Still evaluating strategies for end-to-end testing using something Selenium or even manual tests.\n. @RyanCCollins thanks for your offer to help write tests.  Here's the promised announcement about the test framework.  The code has been promoted to the stable branch.\nhttps://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript\nThere are some tests already written, but lots of room for contributions:\nhttps://github.com/grommet/grommet/tree/master/tests/components\n. Also need to be sure CodePen globals are updated accordingly so users can copy/paste chart examples.\n. @acornejo thanks for the input.  This only happens when there's not room for the calendar to display in the default position which is below the input box.  But when the calendar is displayed above the form field, you're right, it's not fun.\nWe'll add another row to calendar so there's always 5 weeks of days show, sometimes the days will extend into the following month, but the month arrows won't move.\nIf you're up for a PR, we'd gladly accept.\n. We will address this suggestion with the following two adjustments\n. Slightly increase stroke for form field with focus\n. Align the general focus indicator to align with the new form focus indicator\nThe result will be aligned focus indication within and outside forms that is slightly stronger than the current form, and slightly more subtle than the general focus indicator.\n. @acornejo a better example to reference is the HC 380 (login with any non-blank username and password).  This app uses a much more recent version of Grommet.  It is not yet open source, but you can see how the components come together.\n. Fixed by https://github.com/grommet/grommet/pull/826\n. This appears to be related to #799\n. @christinHP a Pull Request with this suggestion would be appreciated.\n. If you'd like to submit a pull request, this video is a good overview for contributing to Grommet.  https://vimeo.com/129681048\n. Fixed in https://github.com/grommet/grommet/pull/815\n. @rboorgapally thanks for the suggestion.  We'd welcome a PR for this, or it may be a packaging exercise for the NPM webjars.\n. https://hp.invisionapp.com/d/main#/projects/8585265\n. https://github.com/grommet/grommet/pull/825\n. After discussion with @alansouzati the original PR was closed and most of the pre-commit hook was put into grommet-toolbox (https://github.com/grommet/grommet-toolbox/pull/34)\nAnd a grommet core PR to use hooks: https://github.com/grommet/grommet/pull/843\n. @christinHP thanks for reporting.  This is a dup of https://github.com/grommet/grommet-docs/issues/77.  It's not random behavior, it's based on whether the link has been visited, which is incorrect.\n. Closing this for now.\n. Ok, makes sense.  Would it make sense to keep the same set of tasks to execute always?  gulp.task('pre-commit', ['jslint','scsslint','test']);\n. Moved this change to grommet-toolbox in https://github.com/grommet/grommet-toolbox/pull/34\n. Fixed in https://github.com/grommet/grommet/commit/4931976d2208ca067841a0eb7b7151c8269e1ca7\n. @mars76 Grommet is not supported in IE with Compatibility View enabled.  You can view the browser support matrix here: http://grommet.github.io/docs/browser-support\n. Thanks for catching this @luisrudge.  We'll be updating the grommet.min.css with the vanilla theme as we don't have a need for the unthemed grommet.min.css.\n. Good to hear, thanks.\n. @coltonw thanks for the contribution.  As mentioned in Slack, the design for the create account feature has been envisioned as a hyperlink, not a secondary button.  We recommend this because a secondary button is appropriate when an equal but less common action is being invoked.  In this case, the action isn't equivalent.  It takes the user a new place to do a new thing (create a new account).  This is similar to the treatment for the \"forgot password\" action, as that takes the user to another page/form to request a reset. \nWould you mind adjusting the PR for this pattern?  We can provide a design of this if you'd like.\n. @coltonw it sounds like there's an issue with your on-boarding process that needs deeper examination than this PR.  By definition, the purpose of a login page should be to log in, so we won't be converting the default action to create account for a the login form component.  Instead, if the majority of people accessing your site are new users, then it sounds like you need a landing page that invites them to register without having to navigate elsewhere for account creation.  Take a look at how Dropbox handles this.  Notice the form shown here on the front page is the create account page, inviting new users to join.  Then a link in the header allows existing users to log in.\n. Fixed in https://github.com/grommet/grommet/commit/036303b51335840fe4498e67384f4ecc82aaa946 on stable branch.\n. This has been resolved.  The following CodePen was forked from yours with the theme changed to the HPE theme: https://codepen.io/grommet/pen/kkyvjx\n. Fixed in https://github.com/grommet/grommet/commit/0ff8904867d9aa3a4529257b4bd055b2c73b3d7c\n. Agree, replacing the value has issues when the field is editable.  We're going to keep the current behavior.  If you need the behavior described in the Expected behavior, consider a traditional <select> control.\n. Here is a CodePen with the desired layout: http://codepen.io/grommet/pen/WGjddx?editors=0011\n. @christinHP can you submit this issue against the grommet-index project?  https://github.com/grommet/grommet-index/issues\n. @epilande the issue is still present in your code pen, but is a bit different than the original submission:\n\n. This has been resolved.\n. This can be done by not having an onClick handler on the button.\n. \n. This example also exhibits the problem: https://grommet.github.io/docs/date-time/examples#3\n. Fixed in https://github.com/grommet/grommet/commit/69b0d4e9eee3a0bde6b18986b809b8a6cdfb4d5f\n. Also think about including:\n.  Responsive design without the complexity of managing breakpoints and grids.\n . Themes allow you to stay true to your design esthetic and brand\n . Curated design and development platform with attention to details in typography, color, spacing, and interaction.\n .  Engaged community ready to assist designers and developers onboard along with sticker sheets, command line tools, and ready-to-run developer toolbox.\n. @alansouzati I've observed this as well in a different product, not using IE.  I'll send you a link to an internal site.. Hmm, would that mean all font selectors for all themes would be in the _base.font.scss?  Trying to make sure I understand the suggestion.\n. ",
    "ericsoderberghp": "@bryanjacquot you are correct. The FormField controls the size of the input. Currently, all inputs are the same width.\n. Our general mobile approach right now is to show the legend for Meters, primarily since we cannot rely on the hover behavior to indicate the value per segment, where applicable. We'd rather put the legend below the graphic. I'll take a look at it today. Thanks for pointing it out.\n. I've updated the Meter styling to handle mobile responsiveness better.\n. Fixed in 81d17f069c0fddf27fd6485cb6af46dafe02ea16.\n. FYI, we are revamping the Button styles across the board at the moment.\n. It sounds like it might be a timezone issue.\n. Finished over quite a few changes in the last few days.\n. Have you tested these changes across the Grommet site, medium-app, people-finder, etc.?\n. There's a problem in that resizing the Login page doesn't provide scrolling/responsiveness when it should. You can see this here if you resize your browser window: http://grommet.io/medium-app/login\n. Added these in e2aaede7d207009eb55f470bb585013bd19b31d6\n. This issue really belongs in grommet-index. Fixed there.\n. @maple10001: Can you clarify what your width issue is, perhaps with a screenshot? The bulk of this issue has been fixed for many months. I've just added the brand color to round it out. You can now see all of the colorIndex values be example here: http://www.grommet.io/docs/hpe/develop/box\n. We do not currently have an accordion style Menu in plan. Can you share a sketch showing the context of where and how you would use it? I ask because we might have existing components that could work in a slightly different way.\n. Thanks for the graphic. Can you send an entire page/screen context showing where this would be used?\n. This has been fixed in commit 49a36620b7ef515392d5422790aae7b29f81c005.\n. The medium padding is 24px (actually $inuit-base-spacing-unit) throughout to ensure that everything aligns well. Changing just this location to 16px will break the alignment elsewhere. I think we need a different solution for this issue.\n. Sudesh, is your question about Header Menu alignment part of this issue or a separate issue? If it is separate, can you add a new issue, along with a screenshot and more detail?\n. The Grommet site was changed a while ago to not have separate scroll regions for the documentation.\n. Fixed in 098924e8b9d1cbdc8796c4a54e09d5a321edc9ec.\n. Proposed behavior:\n- Add colorIndex to Meter to allow callers to set the color without needing to use series.\n- Support threshold taking an object value where colorIndex can be set for singular thresholds.\n- Default threshold color is always unset, no matter how many thresholds are specified.\n- value color matches threshold color only if threshold color is specified and value color is not.\n. We have already enhanced Meter to take colorIndex directly.\nWe are waiting for a specific product example to enhance Meter further w.r.t. threshold behavior.\n. Cannot reproduce anymore.\n. This is only an issue with IE11. Cannot reproduce on Edge 13.\n. Fixed in c1b7afd01e5405496c86a4da41102f9e4ecf510c.\n. This was caused by the Ticker data initializing on app load but the data adjustments only coming once you navigated to the Chart page. This was fixed in 0e0a6b3ac5c9c6bbd696b1256410eed123737d24.\n. Fixed in 396724fbcb34f23bfcd59493eabe71b7f01861c2.\n. Can you remind me what specific example caused us to pursue this?\n. I'm trying to remember a specific screen where we needed it. I'm just wanting to make sure as it feels like we're slowly exposing more CSS stuff in Box.\n. Fixed in commit ddc6555fe9a37561d9f2bee6e583342a3babbdc5.\n. Agreed. Configurable sounds good. Pull requests welcome, otherwise we'll add it to our backlog.\n. The one other thing that needs to be added is to publicize the new property in LoginFormDoc.js.\n. Thanks for contributing.\n. I think there are some things you can change to your page to get the Distribution to take the full width. It looks like the Distribution is inside a Tile, which is constraining its width. Can you try it without putting it in a Tile?\n. @afong94: can you include a sample of your actual data as well? I'm looking at the series and xAxis data at the top of ChartDoc.js for the examples and I can't see anything that looks incorrect.\n. Fixed in 564a5cccda6309bc19fb383e423e3b95589cb63a.\n. Added selectable=\"multiple\" to Table in commit 20f5d19b37efc013afa9881b831799dac1b20efe.\n. Thanks for the contribution!\n. Looks good. Just need to resolve the merge conflicts.\n. This is part of the new brand guidelines. We've switching from having a full background color to changing the text color and adding the right border.\n. These changes look essentially good to me. I'd be OK with merging them.\n. The current guidance is to use a <strong> element within the <h*> element to achieve that.\n. Thanks.\n. Thanks for your contribution.\n. I cannot reproduce the behavior on my IE11 for the select box on this page: http://www.grommet.io/docs/hpe/develop/form\nCan you verify that you are seeing the problem on that select box?\n. Thanks @kylebyerly-hp. What we really need is a page in the grommet docs showing the base DOM elements so we can see how they are styled when outside of a Grommet context.\n. Currently, the Calendar drop down aligns its width to the form field context it is in. Could you elaborate a bit more on what you mean by \"disproportionate\"?\n. @abenson337: Can you provide a simplified HTML + CSS snippet that illustrates the issue? I'm not seeing the issue here: http://www.grommet.io/docs/hpe/develop/chart\nbecause the Chart is auto-sizing itself to its container's width. I'm wondering why it isn't auto-sizing to fill the container in your case.\n. @primozs: How is the redux store being put into the context in the first place?  Any \"router\" and \"intl\" in the context should be getting passed through, via line #31 here: https://github.com/grommet/grommet/blob/master/src/js/components/Layer.js\n. @primozs: Got it. Thanks. The trick is how to have the Layer know which context properties to transfer across. I think it's doable though.\n. @primozs the context transfer is indeed automatic as long as you remain within the DOM component hierarchy of the top level render(). The Grommet Layer has to break out of that hierarchy in order to create a separate root/layer in the DOM and thus has to explicitly transfer child context objects.\nI've submitted a change to Layer to transfer the 'store' child context across. I'm hoping this will work for you now while we continue investigating better approaches.\n. @primozs Would you be willing to submit a pull request for your history changes?\n. FYI, the new Chart components have broken things out to child components. http://grommet.github.io/docs/chart\n. We need to add onActive to the Meter documentation.\n. Added onActive to Meter documentation as part of 372395c4c824f27994ce6b49e59192deaa2a799a.\n. This is only an issue with IE11. Cannot reproduce on Edge 13.\n. Fixed in grommet commit f4962e8a28dbefb336dfda2633d36f712f0b7e41.\n. This is the dreaded Flash of Unstyled Text:\nhttps://en.wikipedia.org/wiki/Flash_of_unstyled_content\nI think it's partly due to how we load fonts via amazon instead of packaging them with the UI. :(\n. This is only an issue with IE11. Cannot reproduce on Edge 13.\n. Fixed in bc9e4baaad0f4ad37a4828cc0163ccba1e2b3eac.\n. Thanks for catching this. It is fixed in b145b40379a4cf2362ac5be2bbf97faa6ed5b082.\n. This has been verified as fixed in the new Chart components.\n. Fixed in 6d60aaef64332d57d02041735461b2e897f3bd56.\n. Cannot reproduce.\n. Cannot reproduce on Edge 13.\n. Cannot reproduce on IE11.\n. Cannot reproduce on Edge 13.\n. Cannot reproduce on IE11.\n. Fixed in 1ff03596ddb98bf7979de0b108b5a12590a0272c\n. This is only an issue with IE11. Cannot reproduce on Edge 13.\n. Duplicate of issues #143 \n. Similar to issue #412. This is caused by IE11 not supporting \"new Event\".\n. Fixed in commit 12ef611743605b3bfbbd5540c620e9c9251e34ec.\n. FYI, I've added a label controlled Menu example to the Header documentation to make sure we have a generic example for this case. http://www.grommet.io/docs/hpe/develop/header\n. There might be some things to address after this goes in, but I'm OK taking this and then addressing issues later as needed. Thanks.\n. Nicely done. Just a few minor comments. Also, can you update CarouselDoc in grommet-docs?\n. Can you provide an example of how this would be called? I had been thinking something along the lines of:\n<Menu inline={true}>\n  <Anchor>First</Anchor>\n  <Menu inline={false} label=\"Second\">\n    <Anchor>Sub First</Anchor>\n    <Anchor>Sub Second</Anchor>\n  </Menu>\n  <Anchor>Third</Anchor>\n</Menu>\n. This pull request has been superseded by b6313291d76ab2b1915c776637ffdcc4f013869d.\n. Thanks for submitting. Fixed in 506a5e9f4840c39e03d588d515eb1a45b02b91ca.\n. OK for now. Maybe someday we will merge Carousel and Tiles, depending on how much overlap there starts to be.\n. Tiles is meant to be a bit more controlled than Box. Could you elaborate a bit more on what you are trying to achieve?\n. Would it work to put the Buttons inside a Box instead of using Tiles?\n. Thanks.\n. Thanks for uncovering this. Actually, it needs to be changed to align with the latest changes to Button and grommet-icon-loader. I've gone ahead and made those changes.\n. That was not intentional. We were focused on the React Component class aspects. Your suggestion  is a good one. Pull requests gladly accepted.\n. Take a look at Button.js to see how React propTypes and defaultProps are handled.\n. We were intentional about adopting ES6 but holding off on ES7 until it solidified more. I agree that the function binding stuff in constructor() is annoying boilerplate.\n. If we could have, we would have. But, we cannot style input[type=\"checkbox\"] enough with just CSS.\n. We would like to drive as much of the formatting from the locale as possible.\n. See also issue #872.\n. The sparkline size is intended to be small, to be included inline within text content. Can you provide an example of a situation where are you wanting to use a larger sparkline?\n. Thanks. Good for now. We can tweak later.\n. Or, we can just use PropTypes.any, since we don't particularly care.\n. Looking into changing Chart sparkline size to honor width.. The new Chart interface separates the Legend out and leaves it up to the caller to position it around the chart as needed. There is no more overlaying of the Legend, partly due to the reason's indicated in this issue.\n. This has been fixed in the new chart Area, Bar, and Line components.\n. Adjusted smoothing algorithm a bit in e250f5c2610ffadb1367aabdcc43ce65fab54a0d.\n. This is not possible using either the new grommet/components/chart/Bar with vertical={true} or building a new chart using grommet/components/chart/Meter.\n. We are about 50% of the way there at the moment. Remaining items include:\nMenu drop alignment\nSearch drop alignment\nTable cell order\nfix grommet-docs Options code examples\nMeter flip vertical arc, draw RTL\nChart draw RTL\nDistribution draw RTL\nCalendar control location, prev/next control icons\nLoginForm\nMap\n. What's the context where we need/want this?\n. Very nice cleanup. Thanks.\n. Could you provide an example of when you would want to change the icon?\nOriginally, Search was meant for more standalone scenarios, such as global site search in a banner/header while SearchInput was meant as an enhanced means of filling our an input field in a form. Over time their functionality has merged a bit. One area where they still differ is that Search will handle responsive situations by reducing to an icon and then expanding to show the input in a drop layer on focus.\n. We have deprecated SearchInput in favor of Select and TextInput.\n. Fixed in 71b6a73d2375d21b9e0f426a83cba0d5e0ba1525.\n. Fixed in commit 101a03d656f775e871cbc085c9aa8da2bf4372cb.\n. Well done. Thanks for all of the cleanup in this change.\n. We have deprecated SearchInput in favor of Select and TextInput, in part in response to this issue. Thanks.\n. This is only an issue with IE11. Cannot reproduce on Edge 13.\n. Fixed in 901ff1ccefd928228737598987b0ab93c25c6a66 and in grommet-index 7a0f66a22cad6b5d46018167d1a4a9c2457d9700.\n. Cannot reproduce on IE11.\n. OK to me. I'd like Alan to take a look too.\n. FYI, I'm making a change to how we handle the background-color-index stuff in general.\n. Agreed. Alan Souza, along with Derek Ahn have been looking into separating out the build tasks from grommet.\n. Decided to split the SearchInput component into TexInput and Select components. TextInput is a text input field with optional suggestions, no icon. Select is a select-like component with optional search control in the drop down to allow filtering the options. The icon for Select is a caret-down. You cannot merely type in a value with Select, you must choose from one of the options.\n. Fixed with addition of TextInput and Select.\n. Fixed in 9f120d7826790fc89ce373083c3d4939f35a93bc.\n. I recall the Piano history. But, in Grommet, I think we can just keep using 'secondary' for stuff like this. Are there situations where it seems like having it different from 'secondary' is needed?\n. We're trying to keep the class namespace as clean as we can. In Grommet, you typically aren't doing anything at the class level anyway.\n. Can you add a  CodePen illustrating this?\n. Can you provide more context on what browser you are using, and perhaps a screenshot? I am not seeing the problem when I look at it.\n. Fixed in 49180f28789230723c3713aecbe20ad1c234c6b1.\n. This has been addressed by the new chart Axis component.\n. Let's focus on one component at a time for this type of issue. I think we should treat this issue as Calendar specific for onBlur.\n. This has been addressed in the new chart Axis component.\n. Fixed in 82b022cb0723ac631809dd3a7a891524b241aaa2.\n. I like the general intent to allow broader integration with other things by allowing HTML5 data properties to be added to the DOM.\nI'm hesitating a bit on the inline style aspects. Our general approach to styling has been to use CSS and id properties and the grommet class names as needed with custom CSS, rather than inline styling. I agree that we wouldn't be promoting this approach, but the existing mechanism seems reasonable enough given that it should be infrequently needed.\nAre there other examples for this? For purposes of this conversation, if we only transferred \"data-*\" properties, would that suffice? I'm trying to dig into it a bit more to understand the contexts better.\n. Fixed in commit ef7fbb3c3209a21a1e4d562d5f427980a8c948df.\n. FYI, I'm working on a DateTime component. :)\n. A first version of the DateTime component is now available:\nhttp://www.grommet.io/docs/hpe/develop/datetime\n. Just two minor comments.\n. Can you please provide more detail for this. Ideally a screenshot and CodePen.\n. Thanks putting this together. A few suggestions, I'm thinking we can use this for the active value in Meter and Chart and the per item label in Distribution. All of them have a single number, optional units, label, and icon. I'm also thinking \"Number\" might be a better component name. Something like:\nNumber.propTypes = {\n  colorIndex: PropTypes.string,\n  icon: PropTypes.node,\n  label: PropTypes.node,\n  units: PropTypes.string,\n  value: PropTypes.number.isRequired,\n};\n. Other than the size of the content, they seem more similar than different. If it's primarily size, we can provide options for the size property to set the sizes we want.\nIn what other ways do they seem different?\nRegarding the use of \"Number\" as the name, could you give an example of where Number wouldn't make sense?\n. I thought \"stretch\" was the default for both properties, as in not specifying the property meant you got stretch. Is that not true or not working?\n. Thanks for fixing this.\n. I get the spirit of the \"-tint-1\" name but I'm thinking we don't need to design for the future quite so much. I think just the \"t\" suffix will align better with the existing \"a\" suffix. If we end up needing to extend to later for additional alpha values or tints, we'll handle it then. Otherwise, these changes look fine.\n. From the changes in the stylesheets here, I see that 'small' does not always equal 'small' and I'm wondering if that will cause some confusion. I was hoping that small would be small everywhere, and so on for all other sizes. Did you take a look at it that way?\n. Meter now has a label property which you can set to false to disable showing the value as part of Meter. You can now put a Value on any side by putting it inside a Box containing the Meter.\n. Can you clarify a bit more why this is needed? I would have thought that adding a new <source> child component would cause the React to re-render to pick it up. Is this not working?\n. Good catch. Thanks.\n. Let's bring Chris and Alan into this as well. It's looking odd to have the view box structured that way and to account for stroke width changes, which can be theme specific. I think we have to look for a more robust way to handle this across all functional icons.\n. Instead of using the stroke-width approach, let's change the CSS for grommet to use a transform: scale(1.1); on hover.\n. What happens if the tiles don't have an onClick property but do have the hover properties set?\n. Superseded by PR #546.\n. Thanks for your contribution.\n. Thanks.\n. From a quick scan of css-modules. It seems likes it's along the same lines we've been steering Grommet's stylesheets. Until I have time to look into it further, do you have any suggestions on how grommet could change to make it easier to integrate with css-modules?\n. This can be handled by positioning the Label and Value independently from the Meter itself. You can see an example here: http://grommet.us.rdlabs.hpecorp.net/meters/#18\n. You should be able to do that via a Button with type=\"reset\": http://codepen.io/grommet/pen/dXvMxP\n. I suspect the issue is that Menu's componentWillReceiveProps isn't handling the case where the caller \"manually\" changes the inline property.\n. Sorry it took so long for me to get to this one. Just a few comments.\n. Have you tried something like:\nfilter: drop-shadow(1px 1px 1px $button-drop-shadow-color);\n-webkit-filter: none;\n-webkit-svg-shadow: 1px 1px 1px $button-drop-shadow-color;\n. Here are some details on how the color variables work that would be good to include in any documentation about theme colors:\nI would recommend not worrying too much about the '-a\u2019 and '-t\u2019 versions to start with.\nThe status colors drive the Status icons and the background color for Notification.\nThe neutral colors are only used when the developer asks for one of them, via neutral-1, neutral-2, etc.\nThe brand color is used as the background color for <Button primary={true} /> and the text color and icon color in <Anchor primary={true} />. It is also used whenever a developer specifies colorIndex='brand' for a component that accepts the colorIndex property.\nThe graph colors are used by default in Chart, Meter, Distribution, SunBurst to distribute colors among the series values. The developer can always set a custom colorIndex on any particular series value to any color. To use a graph color, they would use colorIndex='graph-1' for example.\nFor Distribution, we recommend not trying to express too much detail via color gradations. Instead, I\u2019d go with your basic concept of using accent-1 for \u2018important\u2019 things that the user\u2019s attention should be called to, neutral-1 and other neutrals for \u2018normal\u2019 things, and unset for \u2018uninteresting\u2019 things that should be subdued.\n. The chart examples have been merged into grommet-docs.\nhttp://grommet.github.io/docs/chart-examples\n. Added in commit 62098bf36a0ee3aa9962b8724ea28196d4ead42e.\n. Please refer to the new style of doing Meters. http://grommet.us.rdlabs.hpecorp.net/meters/#22\nYou can control the Legend position independently from the Meter itself.\n. This seems to be making the old Chart implementation somewhat more complicated than it already was. Would it be possible to convert eStories to use the new Chart implementation instead? http://grommet.github.io/docs/chart\n. Key remaining items:\n- [ ] move video specific styling in Button to video icon.\n- [ ] change Card to use base Paragraph instead of styling in CSS.\n- [ ] change Carousel to put classes on control icons instead of styling with icon classes.\n- [ ] change Distribution to use Label, possibly extend Label, instead of styling in CSS.\n- [ ] change Footer to remove styling of paragraph.\n- [ ] FormField and Form have too much CSS for contained elements.\n- [ ] change Hero to not directly style Box and Video contained.\n- [ ] change Layer to not style tiles--more directly.\n- [ ] change Menu to not style hr, control-icon, button, etc.\n- [ ] change Video to not style h3, form, form-field, etc.\n. Those are inside the .grommet selector context, which was put in to prevent them from applying to content outside a grommet context. Can you elaborate a bit on why you are not wanting grommet styling when you are inside a grommet context?. Chrome and Firefox issue should be fixed now.\nUpdated Axis documentation to indicate how to manage count and labels.\nhttp://grommet.github.io/docs/chart-axis\n. Have you tried using the latest Meter patterns? http://grommet.github.io/docs/meter-examples/#17\nOf note, we're recommending using a Value above the meter graphic and a Legend below, partly to avoid some of the layout issues you are reporting.\n. Apologies for the long delay getting to this PR. Thanks for the good work.\n. Regarding \"On desktop, I want to disable the Accordion & have all the panels expanded.\" and the animation shown, that footer structure doesn't really look like an accordion to me. Is there a reason we are contemplating using Accordion for that content?\n. From the designs, I think semantically it's a nested menu. I think your suggestion to use different components in each context makes sense. So, desktop can just use Box, Heading, and Menu while mobile can use Accordion and Menu. Is that what you were thinking?\n. I'd leave the icon as is until we come across a specific need to change it. Keeping a single icon helps with consistency.\n. This isn't a grommet issue. Added issue #39 to grommet-ferret.\n. Added.\n. Most of this has been done now. Any remaining items will be handled on a case by case basis.\n. We will be closing this issue when we release 1.0.0 as the .v1 chart interface will be removed then.\n. Part of the chart Axis design is to allow callers to use richer labels, which is why the label properties are PropTypes.node. For instance, I could have a label that looks like:\nJanuary\n2016\nBased on some of the comments in the code and the description of this PR it sounds like this PR isn't taking that into account. I'm also wondering why we need to decrease the axis label text size. We were consciously allowing the caller to pass in whatever component they wanted and let that control the sizing of the text.\n. Why do we need to explicitly manage the width of the Axis at all?\n. I like the pseudo element approach. That seems semantically appropriate and safer.\n. Added deprecation warnings.\n. Debating whether we will need this as we haven't seen older style tree structures controlled via checkboxes in Grommet based applications.\nSee also: https://css-tricks.com/indeterminate-checkboxes/\n. See also issue #289.\n. I performed a cursory evaluation for this and I think we're close enough.\n. This has been replaced by grommet-index issue #71.\n. Oops. Looks like we collided on this one. Sorry about that.\n. Fixed in commit c2e9302e3fb305ecdd43cdc40ebc8641ae664bf0.\n. Fixed in ecd097a06f6855efaa613081e922576509a52b60.\n. Thanks. Can you also update grommet-docs?\n. Fixed in commit 7ea74a6e1eb786707d95100ce44f075db5d89a74.\n. I'm not sure how the 0 is taking up any space. The large grey arc is the underlying track that the segment values are drawn in. If you set max={10}, it will be removed as the total will now be 5+4+1=10 instead of the default max value of 100.\n. We believe it is working correctly. Since we haven't received any further comment, we are closing the issue.\n. This was a bug in grommet-docs. Fixed in grommet-docs commit 5dda476923f470677bbf7298fcbfd14c852ae62c.\n. Fixed in latest grommet and grommet-docs.\n. Mostly fixed in the HC380 repository by making suggestion responsive. But, also allowed suggestions to take full width on palm. Commit aff00f418049356ffe52e647b25242a2ef2e91c1.\n. I think this was an intentional part of the 1.0  changes to put sizing at the Tile level. Looks like we forgot to deprecate/remove the size property on Tiles.\n. Apologies for not deprecating this. We are not planning to add it back. You can control the size via the basis property.\n. I would rather keep the selection as part of the container. But, I see the desire to not have to maintain/derive the index on the caller\u2019s side. What makes it complicated is then what to pass back to the caller from the List onSelect function. We have no other means of identifying than index.\nPerhaps what some people might want is the ability to manage the selection state entirely on their end and just use the per-item selected property for visual styling. The trick with that is there are lots of nuances with mouse and keyboard combinations for multi-select that I don\u2019t see callers wanting to deal with.\n. Fixed in e2d956272e9c82750656b325ab3837d65a21ffad.\n. Fixed in e2d956272e9c82750656b325ab3837d65a21ffad.\n. When the dropAlign causes the drop down to be placed such that it doesn't eclipse the control, we should not be replicating the control inside the drop down. Also, we should ensure that the original control is styled in a way to indicate that it is active.\n. Thanks for reporting this. Since it wasn't doing anything, and since you can control the component's chosen option via the value property, we've removed defaultValue from the documentation.\n. I thought we fixed this by hinting at the color context initially before detecting it later. We should investigate.\n. @nickjvm Can you check this again? We made some more changes and can't reproduce the issue.. Ideally, a CodePen. Otherwise, how about a static file I can run locally?. @nickjvm I was able to reproduce it with the repository you sent, thanks. However, I was unable to link that repository to my local grommet to dig into it. So, I created a new repository using grommet new and then copied over the relevant components from yours. But, I can no longer reproduce the problem. It appears there's something different in your environment than mine. I'm still digging into it more. You can see the one I built here:\nhttps://github.com/ericsoderberghp/grommet-backgrounder.git\nAlso, I noticed that you had multiple grommet App components in yours. There should only be exactly one.. Fixed. http://codepen.io/grommet/pen/rWWyOV?editors=0010\n. Typically, when a Menu is on the right side we align the drop with the right edge of the control via dropAlign={{ right: 'right' }}.\n. Per prior comment, you need to set the dropAlign property.\n. The v2 Calendar support both bounds, restricting to be within a particular date range, and disabled,  which disables selection of individual dates and/or ranges of dates. http://v2.grommet.io/calendar. In grommet terms, I was thinking we'd add an option to Heading, Label, and Title to limit it to a single line and truncate that line with an ellipses if the content is too long for the container.\n. Added in 41d054341abe5fd20adfc4c29979e089d3d04f3f.\n. We render it separately to enable it to overlap more surrounding content. Is this causing a problem of some sort?\n. This is intentional behavior. Semantically, the Select is used to select something. inline gives them a way to do that without a dropdown.\n. At this time, Grommet does not have a tokenized input like the one referenced.\n. I changed Button recently to distinguish the label= property from string children. So, label= and icon= are used to drive formalized/stylized buttons and children are left to be styled as those elements/components would. So this is intentional behavior. Do you see any issues with that?\n. Should use the intl library to format the number with correct delimiters for the locale.\n. Fixed.\n. Just some further information, this doesn't reproduce on Safari but it does on Firefox.\n. This is caused by not passing an id property to the CheckBox. The label text needs an id property to connect with. Giving the CheckBox an id makes clicking on the label text work as expected.\n. We never set the id property implicitly. The caller is always in control of that. If we set it implicitly and there were two forms on the page with fields having the same name, they would have duplicate ids.\n. My inclination is to deprecate the plain property all together. The Button controls styling if icon or label are set and doesn't touch the styling if there are child components.\n. Fixed.\n. Can you please create a CodePen illustrating this issue?\n. Agreed that the IE specific styling is causing problems. We'll evaluate.\n. It is too complicated to style the file input browse button and file path indicator. Localization of the button label should be handled by the browser/OS.. That's a fair amount of customization. Thanks for the reference though.. This should be fixed now.. The fix doesn't work in all situations and has made grommet-docs worse. We will need to investigate this further.. Thanks for the detailed description. Our general strategy with form interaction is to have quick response time and leave the user in control of his experience. For some products using Grommet, if the form cannot be validated within a couple hundred milliseconds, the form submittal is tracked via a separate 'task' mechanism. When the task completes, the user can see any details of the results and proceed as they want. So, we prefer not to disable controls.\nI would recommend both providing some feedback to the user that the form is being processed and handling preventing double submit in your onClick or onSubmit handlers. One possibility for displaying the processing of the form would be to remove the Form component entirely and replace it with a message indicating that the form is being processed.. Can you provide a CodePen demonstrating this issue? Also, we did fix some issues with Topology in grommet 1.1.0. Can you verify whether you are still seeing the issue if you use grommet 1.1.0?. Our preferred pattern of form interaction is to keep the submit button enabled all the time. If the user attempts to submit the form in an invalid state, the FormFields are decorated with appropriate error messages.\nThere are many other components in Grommet where behavior and styling is controlled via presence of a handler, such as 'onSearch' on Select.. With 556c503b123158ca255e2ebee242b3d8d8b2d8d1 we've ensured that we can handle  inside FormField. We prefer sticking with the native version of this pop-up control rather than adding a separate custom one. You can see the native one in the 'input - color' field here: https://grommet.github.io/docs/form/examples?i-header=false&i-footer=false&i-all-types=true. Since different context will have different maximum length requirements, and because it is the caller's job to manage displaying any validation messages. We recommend detecting when the input text is 'too long' and adding an error message in the FormField when appropriate.. So, is the issue that a user is able to bring their own browser to its knees by typing a very long text sequence into the search input in the Select drop down? Is this a malicious user, or is it a user who needs some extra protection to prevent him from doing it?. Agreed. FYI, we are in the process of removing many of these dependencies.. We are unable to reproduce this: https://grommet.github.io/docs/meter/examples?type=circle&i-value=true&c-background=dark%20on%20light\nGiven your description of development vs. production, can you either provide a CodePen illustrating the issue or provide some detail on how you are including the SCSS files in your project?. We have not been able to reproduce this. Can you please provide a CodePen illustrating the issue? If you cannot reproduce it with a CodePen, you could send an archive with a small project that reproduces the we could run locally.. We tend to have minimum sizes for controls to provide enough hit target on touch devices. Can you provide more context for the entire screen illustrating why the smaller size is needed?. Fixed. https://grommet.github.io/docs/select/examples?placeHolder=true&multiple=true. This is due to a defect in jsx-to-string. Awaiting approval of the pull request for the fix: https://github.com/grommet/jsx-to-string/pull/17. I believe this is fixed. Just waiting for a few more things to test.. That CodePen has Tables as a child of Tiles, which isn't a supported composition. You should either have a Table containing a table body and rows or a Tiles containing Tile components.. I'm curious to know why you're putting an onChange on the containing div rather than on the Select component. Can you elaborate a bit?. No change planned for v1.. Changed Select, Search, TextInput to not change the placement of the drop. Changes in 6808e06f36c71f82b52e11caa7e7a3f12cdc6a4c.. For v2, we're using styled components.. It is part of the design to have different styling with or without an icon. But, we should review the implementation again to see that it matches the design.. Fixed in grommet-docs commit bcbac1211096bc7265199b77e7d1cf51158de02e.. Can we do it in a way that works with a <Box direction=\"row\" align=\"stretch\"> container and rely on flexbox to take care of it, rather than doing any calculations dynamically?. Agreed. Looking into it.. Thanks for the contribution.. I can't seem to reproduce this. The CodePen on Opera, Chrome, and Firefox is always showing \"4.54\" for the total, which seems correct.. Fixed in 3c0d4b0de91bfd0e35e80981242be7c201d9d5a7. Isn't it required since Anchor.js uses it? It needs to be in the grommet npm package since components importing Anchor will need it too.\nI believe react-desc is just extending the basic PropTypes in react. It is a fairly small package, so I doubt it is contributing significantly to your bundled app size. But, I do like the idea of keeping the package footprint as lean as possible. @alansouzati has done the work on it and is currently away for a bit. When he returns we will revisit.. I think you need to use value and not defaultValue. Can you try that?. We've enhanced the documentation to update the value from the selected suggestion.. If given an id, CheckBox will transfer this to the underlying input DOM element. We didn't document it because the label is not required in CheckBox where it is on RadioButton. I am adding it to the propTypes though, since we do reference it if a label is specified.. We've updated the Grommet browser support page to clarify that iOS < 9.3 is not supported. https://grommet.github.io/docs/browser-support/. I think the issue here is that the base icons aren't working in CodePen. We need to fix that.. The new Spinning component styling is currently available only on the #stable version of Grommet. We will likely be releasing a 1.2.2 version coming up though.. I cannot reproduce this in either of two ways:\n1 - Go to initial example page and then turn off infinite. When it gets back to the first one, it stops playing.\n2- Starting with the URL in the issue description above, the carousel plays through once and then returns to the beginning and stops.\nIf you are still able to reproduce the issue, can you further clarify the instructions on how to reproduce it?. Grommet just uses the underlying browser's <input type=\"number\" /> element. We've tended to keep our changes to core elements like this tied as closely to the browser behavior as possible and only wrapping them to allow restyling a bit.\nBut, contemplating if this  warrants an exception to that approach.. I haven't been able to reproduce this.. There is also a problem on Firefox at https://grommet.github.io/hpe/docs/chart/examples?height=xxsmall&i-Axis-time=false&i-Axis-value=false&i-Grid=false&i-Area=false&i-Line=false&i-Bar=true&i-Marker=false&i-HotSpots=false&i-Range=true.. I seem to recall there a few cases where Meter doesn't want more than four values in the series. I think circle, arc, and spiral all have this limitation due to constraints in available space. My recommendation is to update the documentation and add a console warning to indicate that Meter doesn't take more than four values in a series, when not stacked.\nFor more values as bar meters one can use a Box containing single value Meters to accomplish something similar.. Thanks for your contribution.. I would like to understand a bit more on when it would make sense to change the color on hover. For instance, the example shows changing the color of South America to a completely different color that matches Asia. That doesn't seem the like a consistent usage of color.\nI agree with needing the enhancement to have hover and click be separably available.\nI am about to submit some other changes to WorldMap to allow indicating individual places. If I don't hear from you in the next day or two, I will merge over the hover|click behavior separation.. Agreed that I don't think it belongs in grommet 2.0. I'm not sure it belongs in grommet-inspire either. I think it's just some CSS decoration which seems a bit outside the scope of grommet.. Distribution has been added.. Do we still need this component?. For v2, we now have the Diagram component. It replaces Topology and Map from v1. The links can be colored more flexibly too, using an opacity strength.. TableHeader, TableBody, TableFooter, and TableRow have been added.. The trick with these are when the component initiating them is not the outermost component. Putting it in the DOM where the the component initiating it resides could result in the Toast or Layer to be eclipsed based on the element + styling hierarchy. For instance, if the component initiating the Toast is inside a Box inside a Split, it will not necessarily be able to span the entire width of the screen. Putting it inside the <body/> allows us to pin it appropriately.. Currently, I'd like to propose removing Title and Headline and doing everything with Heading, Label, and Paragraph\nI'd also like to re-use our t-shirt sizing approach for Heading as follows: tag would be used for semantic and accessibility purposes. size would be used for styling purposes. This would allow the page to have an smaller h1 but larger h2 or h3 tags for stylistic emphasis. Thus, Title and Headline would be folded into Heading.\nI'd also like to see a few more stylistic options with Label so it can be used more. Today, I've seen Paragraph get used for what semantically should be a Label just because of the styling.\nThoughts?. Would it make sense to enhance react-desc to add some additional properties to make the Flow and TypeScript generation easier?. I was thinking we'd put the background color context inside a grommet context property. So, we wouldn't need to interrogate the DOM.. Thanks for your contribution!. Did you consider increasing the separation between the threshold and the main visual? Even without the hover, I find the threshold to be too close.. I think design flexibility is reasonable. Thanks for the contribution.. Would it be possible to generate the typescript files programmatically, based on the react-desc doc.js file content, similar to how the per-component README files are generated?. Fixed in https://github.com/grommet/grommet/pull/1782. Thanks for your contribution.. This has been superseded by https://github.com/grommet/grommet/pull/1859.. Hi. Thanks for looking into this. I think the actual issue is with the status icon being resized unexpectedly due to the styling. I've put up https://github.com/grommet/grommet/pull/1782 to illustrate it.. Have you tried grommet new basic?\nAlso, I think this issue belongs in grommet-cli and not grommet.. I'm not sure what you mean by \"Ordering\". Do you mean that the items in the list should be ordered, or sorted, a certain way? Or, do you mean that you'd like to see ordinal number prefixes for each item in the list, e.g. 1., 2., 3. ?\nThe former is controlled by how you populate the children of the List. For the latter, one simple idea would be to insert the numbers within the content of the list items themselves. For instance:\n<List>\n  {items.map((item, index) => `#{index}. #{item}`)}\n</List>. This has been fixed with the releases of grommet 1.10.0 and 2.0.0-alpha.6.. Thanks for being willing to contribute. I could see two approaches to this:\n1) Wrap the Grid in a <Box full={true}>.\n2) Change the height: 100%; in StyledGrid to be height: 100vh. The thinking here being that Grid is primarily designed to be used for full page layout.\nI think #2 is a bit more compact and probably a good approach most of the time. But, it seems slightly two opinionated to me, as it would prevent Grid from being used within other layout components.\nWhat do you think of #1?\n. This can be accomplished now with <Grommet full={true}>. . The width of Paragraph is constrained in order to make the text more readable. See: https://en.wikipedia.org/wiki/Line_length#Electronic_text\nIf you wanted the text to fill the entire width, which I would not recommend from both design and usability perspectives, you could just use a <div>.. Thanks for the contribution. We've taken this and done something a bit more complete as part of https://github.com/grommet/grommet/pull/1848.. Omit the onMore property from the Tiles component. You can see more detail in the description of onMore for the Table component. We will update the documentation to make it clearer.. Thanks for the feedback. Have you tried using flex? For example: const columns = [\"flex\", \"flex\", \"flex\"]; This will result in the columns each getting an equivalent amount of space. This is essentially the same resolution as second suggested resolution on Stack Overflow.. This was fixed in https://github.com/grommet/grommet/commit/c5337762c1b891ad58caa57b4f3b352363c0eb57. This is no longer reproducible.. From limaAniceto:\nHello Eric,\nI've managed to reproduce it from v2.1.1 to v3.4.9.\nIt's still happening. Take a look. But, not necessarily delay v2.0.0 for this.. This is coming with: https://github.com/grommet/grommet/pull/2060. For use in situations like a menu, the v2 approach is to consider this as visually more like a Button. The underlying element will use an <a> tag but it will visually appear more button-ish and be rendered with RoutedButton. Currently, Button does take an active property but RoutedButton doesn't set this automatically.. @karatechops and I discussed this and agreed that this needs more attention.. It appears that RoutedButton already supports active. You can see it in action here: https://codesandbox.io/s/lp3y7rj1k9, in the MenuButton.js component.. Can you provide some guidance on how to reproduce this? I haven't been able to and I can't see how the code would be trying to put restrictScroll into the DOM.. This should be an issue on https://github.com/grommet/grommet-icons.. Our current plan on this is to not provider a Tiles component but to provide something that can handle just the lazy loading capabilities of onMore while the general layout can be handled by Box.. Is this referring to http://grommet.io/docs/filter-control.\nIf so, you can achieve this via:\n<Button onClick={onClick}>\n  <Box align='center'>\n    <Text>{unfilteredTotal}</Text>\n    <FilterIcon />\n    <Text>{filteredTotal}</Text>\n  </Box>\n</Button>\n. Working on it ...\n. Can we let the caller add that in that case? It seems a really rare situation and makes the normal DOM look a little strange to have it always there.. Abandoning and restarting a separate one.. Would this suffice:\n<Layer position='left' full='vertical' modal={false}>\n    <Box background='brand' fill='vertical'>\n        ...\n    </Box>\n</Layer>\n. To match WorldMap, onClick would pass the value object while onHover would still pass true| false. Does that work?. @karatechops and I discussed this. We think this can be handled on the callers side when constructing the values array to set up the onHover callback where the closure will have a reference to the original array item and can react appropriately. For example:\nvalues.map((obj) => ({ ..., onHover: (active) => this.setState({ show: (active ? obj : null) }), ... }));. @karatechops and I discussed. Would like to look into to verify if this is still an issue and either document how to overcome it or make a change to avoid it.. For future reference, this can be achieved now with:\n<Layer position='right'>\n  <Box background='brand' width='medium' height='medium'>Hi</Box>\n</Layer>. That color combination doesn't pass accessibility test:\nhttp://leaverou.github.io/contrast-ratio/#%23FFFFFF-on-%2300BCD4. Can you provide a CodePen illustrating this issue? I am not able to reproduce it with:\n<Box background='dark-2'><Anchor label='label' /></Box>\n. Ah, I missed the \"regular text\" part of the description. Thanks for the sandbox.. Can you describe a scenario where server side rendering should include an open Layer or Drop? We have been assuming those two components would not be rendered server side.. Are you passing the same explicit time in both cases? Otherwise, it will render using the current time from each context.. Thanks for the suggestions. I do like the improved load time. One possibility would be to enhance react-desc to allow availableAt to be an array and add StackBlitz links alongside the CodeSandbox ones. That would allow both to be shown in grommet-site. If this seems reasonable, we'd welcome a pull request.. I like this idea. @L0ZZI and I will review as he shepherds the visual design details.. Can you provide an quick description of the kinds of customization you have in mind? I just want to make sure we are understanding the request.. My current inclination on this is to add a header property and let the caller include whatever they want in it, similar to header on AccordionPanel.. Agreed that we should fix this. Not strictly required for v2.0.0. I don't think Select should always set a background color. It should rely on whatever the theme puts for the overall background via Grommet. The theme creator can set the appropriate control color (when that PR merges ;) and allow the Select to have a transparent background.. Agreed with the desire. Our current theme merging isn't aware of nuances like this. For now, you can set:\nheading: {\n    font: false,\n  },\nin any custom theme to turn off the vanilla heading font.. We should fix this for v2.0.0. Can you provide a little more context for this? Particularly, how are you initializing your theme? Are you using <Grommet>?. One question, are you changing the theme at the outermost <Grommet theme={} /> level or on individual components?\nWe were having performance issues with the theme being rebuilt too much. The current implementation works for individual components if you change the theme to undefined and then change it to the newly desired one. Admittedly, this is not ideal. But, we thought the performance improvement outweighed the ability to update the theme property on the fly.. Changing the theme at the outer Grommet level should be fixed in the latest NEXT-stable.\nFor the inner level, @alansouzati and I are having a vigorous debate about some of the details. . Thanks for contributing. One question ...\nDid you consider allowing value to be a node rather than adding label?. I agree with your inclination to have options and value to be orthogonal to rendering. If value supported a node prop type, then options would seem to want to allow a node property.\nWhy does label need placeholder and onChange as function arguments? It seems simpler to me to have Select show the placeholder when value isn't set. That way label doesn't need the logic to render the placeholder. And, presumably the caller already has his context to react to changes driven from the label, such that he can re-supply props to Select in case the label changes something, as with deleting rendered values.. I cannot reproduce this with the current grommet and grommet-icons.. Is this pull request still needed, given https://github.com/grommet/grommet/pull/2151 ?. Thanks for reporting this. Instead of an innerRef property, we will use the forwardRef capability from React: https://reactjs.org/docs/forwarding-refs.html.. ref should be working on Grommet components. We use React.forwardRef internally to make this work.. I'm just wanting to understand something to start with, can you set <Box basis=\"medium\" flex={false} /> to prevent the box from being shrunk?. Was this fixed with https://github.com/grommet/grommet/pull/2072?. Could you provide a concrete example of this? I'd like to make sure any solution addresses the specific need.. Can you wrap the card back in <Box fill={true} overflow='auto' />?. When would you use the plain property without providing children? Or, perhaps I am not understanding the use.. Could you provide an example, perhaps a sketch or screenshot, illustrating an example of when you would use this? I would like to make sure anything we add addresses the specific need.. Agreed.. This is provided via the anchor property of connections. https://v2.grommet.io/diagram. I just tested this by responding to changing the suggestions in reaction to onChange but doing it via a timer, to simulate the server interaction. When the suggestions property was updated, the suggestions shown reflected that without any user interaction needed. So, I believe this has been fixed.. What is the rationale for putting these controls into a single field? The example seems to indicate four fields.. I think it's the combination of multiple \"parameters\" for the same \"field\" that is causing confusion for me. Each of the parameters has a label and an input element, which are the key aspects of a form field. Conceptually, it sounds like a nested field, where there is an outer field with a label and help text that contains multiple fields, each with a label and input.. Typically, we structure these as separate fields and use progressive disclosure to add and remove fields as needed. Any help text for a collection of fields would be provided via a Text or Paragraph above the set of fields or below a controlling field.. My inclination is to preserve the label+input combination for FormField and explore a property or theme capability to provide a more compact version.. If I have more than one input element inside a field, how are they labelled? I still think that sounds like multiple fields, where semantically a field is a label+input-element.. Thanks for your contribution.. Regarding having a property to hide/show columns, the caller can just include or omit the column definition from the columns property. I don't think we need any data for a hidden column.. Regarding the listed comments:\n\n\nThe gap in the column is not very pleasant\n@lozzi and I discussed this. I was trying to avoid having a separate vertical line demarcating the column boundaries. Without either the line or the gap, it is harder to find the control to resize the column. The gap isn't there if you don't allow column resizing. But, I agree that it isn't ideal. I will search for another alternative.\n\n\nWidth of the table is changing\nDo you mean when expanding and collapsing groups? That will be hard to avoid as the default layout is data driven and dependent on the contents of the cells.\n\n\nHow to deal with long results in a given nested row?\nGood question. Nested infinite scrolling regions sounds like a bad idea. I think the default will be to show all of them, within the context of the Body InfiniteScroll. Perhaps we could add a number threshold such that we show that number and then a \"load more\" control to load the rest? That would allow the user to expand and see a few rows to decide if they are interested in seeing more sub rows or whether they aren't interested in that group after all.\n\n\nIt would be good to see infinite scroll here (one infinite scroll per group? not sure how this is going to work)\nI think one per Body makes the most sense.\n\n\nhow do you envision onMore support for datatable?\nI wasn't envisioning it for the first version of the component.\n\n\nIt would be great to allow the icons to be replaced in the theme\nAgreed\n\n\nGenerally I feel we should think of a big response back. Usually datatable will have a lot of data, I would love to see how our datatable would respond to that\nAgreed that we should handle that.\n\n\nHave we considered moving the search to the same row as the header? It feels weird to have the search in a separate row, with the icon as the placeholder.\nI did consider putting it in the same vertical area as the header labels. The problem with that is it doesn't really work for narrow columns and/or long labels. There isn't room for the search control, unless you make all of the columns much wider, which tends to make the table stretch out too much horizontally.\n. Unfortunately, IE11 does not support enough of the CSS grid specification to allow us to provide the Grid component in IE11. At a talk by https://rachelandrew.co.uk, one of the CSS advisors, she recommended against attempting to polyfill, which we concur with. Instead, you can use Grid.available to conditionally create a fallback implementation suitable for your design. This is approach is documented in https://v2.grommet.io/grid.. You can typically achieve reasonable design goals using Box as a fallback, though it tends to be a bit more verbose.. Tied to https://github.com/grommet/grommet/issues/2336.. Some aspects we should should cover:\n\n\nheader row: border, background\nheader cell: padding\nbody row: border, background, alternating\nbody cell: padding\nfooter row: border, background\nfooter cell: padding\n. As far as the original request goes, you can supply props to the TableCell components in each row:\n<Table><TableBody><TableRow><TableCell border=\"bottom\" />\n. Can you provider a URL or CodePen demonstrating the issue? I am unable to reproduce it using storybook or https://ui-krupa.dev.hpedevops.net/service-catalog.. Thanks for triaging this. @alansouzati do you know why we have fill={true} for the Buttons inside the SelectContainer?. I believe this is a regression due to https://github.com/grommet/grommet/pull/2074. I think we need a justify='center' for the Box inside the Button.. I don't think we want to add properties to Button to control this. If you want finer control over the appearance, you can always use layout components as children to control the visual appearance.. https://github.com/grommet/grommet/pull/2151 adds a theme.global.control.color to permit having a control color separate from the brand color.. There is something still missing with this set of changes. Consider the following sequence using \"Search Select\" in the storybook:\n1) click on the Select\n2) click on option \"four\"\n3) click on the Select\n4) type \"one\"\n5) press \"Enter\"\nAt this point, it doesn't select \"one\" but I think it should. However, if I keep going:\n6) click on the Select\n7) type \"one\"\n8) press \"Enter\"\nNow it correctly chooses the \"one\" option.\n. I tested this with a small custom app. This doesn't appear to break prior functionality. It does appear to always fire the onMoreAbove event even on initial render. Perhaps that can be addressed in the future as needed.. I cannot reproduce this. I've added a story to demonstrate:\nhttps://storybook.grommet.io/?selectedKind=InfiniteScroll&selectedStory=Marker&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\n. What components are you missing? Our intent isn't to replace them all one-for-one but to provide a reasonable mapping pattern in some places.. I can't seem to reproduce this: https://storybook.grommet.io/?selectedKind=DropButton&selectedStory=Calendar&full=0&addons=0&stories=1&panelRight=0. The design for this capability is covered via the children render function, which allows the caller to control how options are rendered. For example:\n```\n<Select\n  items={[{ name: 'One' }, { name: 'Two' }, { name: 'Three', disabled: 'Reason for disable' }]}\n  onChange={ignore attempts to select disabled options in onChange handler}\n\n{option => (\n    \n{option.name}\n      {option.disabled && {option.disabled}\n\n  )}\n\n``. This seems to have something to do withFormField. BothSelectandTextInputbehave correctly outside of aFormFieldcontext.. Thanks for your contribution.. Drop already does this. If there isn't room to fit it, it places it on the other side if there is more room there. . The current implementation of Distribution in v2 does in fact require the values to be sorted beforehand. I can at least update the documentation to make this clear. However, I'd like to understand if there is a usage where the values should not require sorting.. Enhanced documentation. I considered sorting internally but that would mean the component would have to re-sort on any prop change, whether it was needed or not. It seemed slightly more efficient to let the caller handle this, since the data might already be sorted.. I think we should documentThemeContext.Extendas the way to do this. It is already available, just not documented.. We still need to document this in grommet-site. Contexts have been documented on grommet-site.. Leaving this open to allow for some more verification.. That must be a separate issue as the change in the pull request only affects theMenu` component.. Can you provide a simple means of reproducing this, perhaps a CodePen? I am unable to reproduce it with ie11 here: https://storybook.grommet.io/?selectedKind=Select&selectedStory=Search%20Select&full=0&addons=0&stories=1&panelRight=0. It turns out our Storybook was out of date. I have re-published it with the latest NEXT-stable. I am unable to reproduce this issue with the latest https://storybook.grommet.io/?selectedKind=FormField&selectedStory=Select&full=0&addons=0&stories=1&panelRight=0. Can you re-verify that you are still seeing it?. Here is what I'm seeing with that URL using IE11 via BrowserStack:\n\n\nIt is using this version of IE11:\n\nHow are you accessing it and which version of IE11 do you have?. Interesting, your Version looks older but Update Versions look newer. Not sure what that means.. When I try with Windows 7 + IE11, I get:\n\nwhich seems to be behaving reasonably. What browser are you running BrowserStack in?. I am still unable to reproduce this issue using BrowserStack with Windows 7 and IE11.. Why not put it in a Box?. It seems to be working fine with Box, as illustrated here:\nhttps://storybook.grommet.io/?selectedKind=Image&selectedStory=Fit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\n. What's an example of where you'd want to use contain?. Why not extend RoutedAnchor and RoutedButton?. I think we should not get tied to routing libraries, which would be required to \"add some logic for detecting if the route is active\". Instead, I think we should ensure that we support active on Button and Anchor, along with theme-ability of that. We could provide starters/patterns/templates showing how to integrate with various routing libraries, such as react-router, nextjs, etc. For example, see RoutedButton.js in https://codesandbox.io/s/216vvpmlqj.. They do: https://v2.grommet.io/button#active. I was thinking Button is enough to have active, since Button has richer styling, like when used in a sidebar. To put it another way, I was thinking a control being used for navigation, like in a sidebar, would use Button, not Anchor.\nRegarding custom styling, do you mean that we don't have theme.button.active.*? Or, that we don't pass the active state to extend?. Fixed in https://github.com/grommet/grommet/pull/2229. Fixed in https://github.com/grommet/grommet/pull/2229.. Fixed in https://github.com/grommet/grommet/pull/2229.. I believe these were fixed in https://github.com/grommet/grommet/pull/2231. I cannot reproduce them with the latest grommet storybook. https://storybook.grommet.io/?selectedKind=Video&selectedStory=Simple%20Video&full=0&addons=0&stories=1&panelRight=0. Our plan on this is to allow this pattern for webpack 4:\nimport { ThemeContext } form 'grommet'\nbut also allow this pattern for those using the babel transform:\nimport { ThemeContext } from 'grommet/contexts'\nIs there a reason allowing both will not work?. I think including them in the top level index.js makes sense for webpack 4, since it will \"do the right thing\" with respect to tree shaking. So, if you use webpack 4, you can do:\nimport { Box, ThemeContext } from 'grommet'\nand it will behave nicely.\nIf you use the babel transform, you would need to do:\nimport { Box } from 'grommet';\nimport { ThemeContext } from 'grommet/contexts';\nThe same version of grommet can support both styles of usage.. Ah, I re-read your initial comment about the fact that import { ThemeContext } from 'grommet' will work in development mode. So, the confusion will be that development mode will work but production won't. I get it now. I would prefer to allow for the future facing behavior, which seems cleaner to me. I am trying to think of a way we can document, warn, detect, etc. the issue to mitigate any confusion.. As I mentioned in https://github.com/grommet/grommet/issues/2257, there is a new control color which should not be used as a background color.. I believe this was fixed in https://github.com/grommet/grommet/pull/2263.. Custom pad sizes were added with https://github.com/grommet/grommet/pull/2263.. I believe this was fixed in https://github.com/grommet/grommet/pull/2086.. Can you clarify what \"app\" is failing to build? We are successfully building grommet-vending and grommet-site.. With the latest color changes, the control color can be set separately from the brand color. You could still set the background of a control to be the control color, but this would render the control coloring invisible. We aren't planning to add detection of that condition and falling back to another accessible color. We suggest theme creators and users should not use control as a background color.. This was an issue with our color parser not handling short hex values. #000000 would work. We are updating grommet to handle #000 though.. Not that I am aware of. I would recommend replacing WorkSans with a font that supports the needed characters.. Box does support basis=\"1/2\". Is that not sufficient?. This warning illustrates that the fill property should be used for fractional row sizes, including full. The pull request linked to this adds a console warning message describing the constraints between the properties.. I'm contemplating having border and text in global.colors take an object, similar to what we do for:\nanchor: {\n    color: {\n        dark: '#6194EB',\n        light: '#6194EB',\n      },\n}. Related to https://github.com/grommet/grommet/issues/2287. I believe this is covered by #2287 . Need to coordinate on accessible Anchor color on dark backgrounds. Current color #6194EB fails.. I can't seem to reproduce this. If I have <Text weight=\"bold\">TEST</Text>, I don't see any warning in the browser console, using storybook. Can you provide a JSX snippet that demonstrates the problem?. From https://v2.grommet.io/text, that should be <Text weight={700}>Test</Text>. Thanks for digging into this! I took a quick look and am wondering if putting flex={false} just on the Box containing the Buttons would work better across the various sizes of Calendar.. Thanks for your contribution!. I'm seeing a lot of output from yarn storybook like:\nNo parser and no filepath given, using 'babylon' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred.\n. Here's a proposed prioritization:\nV2\nMenu\nRadioButton\nTable\nTableHeader\nTableFooter\nTableRow\nTableCell\nTabs\nPOST V2, if ever\nCalendar: header can be customized but days cannot\nCarousel: buttons\nClock: hands\nDataTable: other than Table, search/filter controls, group controls\nRangeSelector\nSkipLinks\nVideo\nNOT NEEDED\nAccordion: already can customize header\nAccordionPanel: no inner components\nAnchor: style via content\nBox: no inner components\nButton: style via content\nChart: no inner components\nCheckBox: already done\nCollapsible: no inner components\nDiagram: no inner components\nDistribution: no inner components\nDrop: no inner components\nDropButton: ?\nFormField: already done\nGrid: no inner components\nGrommet: no inner components\nHeading: no inner components\nImage: no inner components\nInfiniteScroll: already have renderMarker\nLayer: already done?\nMeter: no inner components\nParagraph: no inner components\nRangeInput: already done?\nSelect: already done?\nStack: no inner components\nTab: no inner components\nText: no inner components\nTextArea: no inner components\nTextInput: no inner components\nWorldMap: no inner components\n. I've added https://github.com/grommet/grommet-theme-hpe for this.. Yep. I just bumped into this yesterday myself.. So, it turns out this is really in the caller's control. If the user selects the date that was already selected, onSelect will still be called and the caller can unset date if desired.. > can we add a row-responsive in Box stories?\nSimpleBox is already row-responsive.. > We need to update the custom breakpoints example. this pr breaks that. it would be good also because it will serve as a reference to folks wanting to leverage this.\nUpdated Custom Breakpoints story to align with theme changes.. > Margin layer example is also broken\nLayer stories should be working at small responsive sizes now.. I've fixed the overlap issue and the Heading issue.. Agreed.. This should be an issue for grommet-site, not grommet. FYI, the latest issue stems from problems with the monaco-editor we are using for the playground.. This has been replaced by https://github.com/grommet/grommet-site/issues/40. In the release notes for 2.0.0-beta.7 we mention that responsive context name wide has been removed. We now have small, medium, and large by default. I recommend replacing === 'wide' with !== 'small'.. That sounds about right.. Thanks. This was fixed post beta-7 in https://github.com/grommet/grommet/pull/2369.. I just want to make sure we don't require a particular code editor and that whatever format we choose can have reasonable support across a variety of editors.. That looks like a background color context issue. The icon is there, it's just white.. Well, I'm not sure what we can do here. In the example referenced, the color for the icon is being explicitly set to 'white'. That seems to indicate the caller wants to control the color, so we will abide by that. If the color was not set on the icon, then the icon would automatically toggle color based on the background color context.\nWe have a few options here already:\n1) don't overlap the control with the drop content, via dropAlign\n2) set a background color that aligns more closely with the background color of the Menu, via dropBackground\n3) don't specify a color on the icon\n. We've added grommet-theme-v1. So far, this covers Button and the various input based components. Any other needs should probably be tracked via issues in that repository.. To make it easier to look through past pull requests, it would be helpful to include something in the description of this pull request.. I can't seem to reproduce this after the latest font-family changes. I've tried in Safari, Firefox, or Chrome. At least, the comment indicates that the height is jumping. The width of the tab does change when we switch the font between normal and bold.. We aren't changing the font-weight in v1, only the color. Perhaps we should switch back to that behavior?\n. @L0ZZI and I discussed and agreed that the jumpiness wasn't good. We came up with an alternate way of doing it. In working on that, I've found some issues in theming Tabs that I've fixed.. > I think we cannot move away from onInput. copy and paste does not trigger the onChange. We used to have onChange in the past and we moved to onInput because of that.\nDid you read the stackoverflow post though? The latest react complains if you have value without onChange.\n. > I just tested the copy and paste and work in the latest react!!\n\nI believe it is safe to move back to onChange :)\nCan we also change TextInput ? also, it would be great to update all stories to not use onInput\n\nGood idea. I've removed all vestiges of onInput. Note the interesting change I had to make to how we fireEvent.change() to send actual event data. Without that, the event would not be delivered. I like how react-testing-library tries to make things as real as possible.. FYI, we're actually updating it to use onChange. The React paradigm seems to be to use onChange instead of onInput so we are aligning more closely with that.. There doesn't appear to be an issue for this. I'd like to see how to reproduce the problem without the fix in order to evaluate it more. Of note, StyledLayer is already:\nposition: absolute;\nwidth: 100%;\nheight: 100%;\nmin-height: 100vh;\nand the StyledContainer is:\nposition: relative;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nI would think this would have the container fill the entire layer. With width: 100vh, I would think there could be scenarios where the container wouldn't be as tall as it would be without that.\n. I see the issue! I'm concerned about how the proposed fix will behave on actual mobile devices. Those devices, at least iOS, scroll more smoothly when the scrolling is at the body/page level and not within a div managed by CSS. My inclination is to explore using min-height: 100vh if at all possible in both Layer and LayerContainer.. I still want to do some more tests on a real mobile device. But, this is definitely an improvement.. In the grommet theme?. Hmm... It seems like this is really a theme specific thing. Also, not setting border-box will cause issues with grommet sizing. We could also explore whether its better to document that you have to set those for a whole-app theme or whether you have to undefine them when using grommet within an app that is already styled.. Are we certain that all of our composed components always use Text and never something like just span?. I needed to sleep on it. Thanks for being patient. I think your idea of <Grommet plain /> is the right approach. It just sounds grommet-ish.. Can you provide a real-world example where this issue arises? I'm concerned that it may be hard for us to know which layer in the Stack is the one the user should be able to interact with.. > this is a breaking change right since we are removing weight from the theme\nWe are still transferring any props to the internal Text, we are just transferring all of them.. Ah, you mean since we are changing the default weight for tabs in base.js?  That seems comparable to some of the other styling changes we've made in base before, that we didn't declare to be \"breaking\". But, I'm OK flagging it that way.. This looks related to the AnnounceContext, which places an offscreen div that screen readers can access. I can't reproduce getting a browser to show this visually. Can you create a CodePen demonstrating the issue?. 1) which link? Can you provide a URL?\n2) How is it broken?\n2) I suspect this issue belongs on grommet-site.. Could this have been accomplished by having the tab contain a Box with a fixed height and scrollable?. So:?\n<Tabs flex>\n  <Tab>\n    <Box fill overflow=\"auto\" />\n  </Tab>\n</Tabs>. It doesn't work at the moment, but it could. Which I think would be a better way to approach it. I think it's better to think about it as whether Tabs has flex or fill and then honor that with each Tab. Once the Tabs+Tab components take up the required space, the Box inside the Tab can have fill and overflow as desired. . We cannot reproduce this anymore after updating to the latest version of grommet.\nhttps://codesandbox.io/s/81y3jy44o2. > I think there will be a bunch of issues fixed when we merge this. can you list if here just so we know ?\nI did scan the current issues but I didn't see any that I knew would be addressed. I think these changes primarily make it easier to be a caller of Select.. Thanks for the feedback @pstauskas :). The README.md file is automatically generated from the associated doc.js file via yarn generate-readme-ts. So, the description in Text/doc.js is where the change should be made. Then, re-run yarn generate-readme-ts.. What would you want that to do?\nHave you looked at FormField? It has an error property that might be what you are looking for.. Well, back to my first question, what would you want <TextInput status=\"error\" /> to do visually?. Agreed. Removing tag would be a breaking change. So, I'm in favor of deprecating tag and using as going forward.. Added auto to https://v2.grommet.io/grid. It looks like there's a test issue though. I'm assuming it passes locally for you?. Thanks for your contribution!. Agreed on using this for credit cards, where after the first few digits are typed, the schema can be adjusted to align with the type of card.\nI wasn't thinking a single SyntaxInput would be used for all fields you mention.. Agreed. It will just take a little work to get there. I thought I'd solicit some feedback on the concept first.. Thanks for the great feedback so far. I've created an initial implementation and called it MaskedInput. You can find it here: https://github.com/grommet/grommet/pull/2540. > @ericsoderberghp I noticed there is no assignment of theme style to text in terms of size (font-size, line-height), hence I didn't document it. Is it a bug?\nThe font sizing is inherited. So, if there is a Grommet theme that sets a base font size, it will be carried through here.. Thanks for your contribution!. I believe this is due to the CodeSandbox not using the latest version of Grommet. We plan to release version 2.0.2 or 2.1.0 in the next day or two and then the dependencies can be updated and it should work. You can use it in your own project right now if you'd like by depending on \"https://github.com/grommet/grommet/tarball/stable\" instead of a specific version of grommet.. This is being considered as part of grommet via Form and FormField changes. https://github.com/grommet/grommet/pull/2520. > Formik is currently best or at least one of the best solutions for forms with React. Maybe instead of creating something new it is better to either just document how to use Formik with Grommet or create simple wrapper for Grommet & Formik ?\nI've added a comment with some initial analysis on this in the associated pull request: https://github.com/grommet/grommet/pull/2520#issuecomment-444689655. > 1. Why is name prop at FormField level? Shouldn\u2019t it be a prop of the input component?\nIt will end up being a prop at the underlying input, but it is also used as the key into the value to extract error information.\n\nDoes this mean a FormField can only have one input?\n\nIf you wanted more than one input in a FormField, you would have to add your own children and wrap with FormContext. See notes in the associated pull request.\n\n\nWhat does FormField prop \u201ctype=email\u201d do? Seems like it should be a prop of the input component.\n\n\nIn the current direction, all unknown props are passed down to the input component. For TextInput, type would be directly passed to the underlying input.\n\n\nHow do you specify the validation error string?\n\n\nThe current direction allows validate to take an object, with a regular expression and a message. If validate is a function, the return value is the error string. @atanasster asked that we enhance validate to take an array, which seems reasonable.\n\n\nNot excited about FormField's options prop. Not obvious that having < 4 options renders RadioButtons and a Select otherwise. What about multi-select/checkboxes?\n\n\nAgreed. The current direction backs off on including this intelligence inside FormField.\n\n\nThe comments example shows both FormField and input having prop name=comments. Isn't that redundant? Goes back to 1 where name prop should be at input level.\n\n\nAgain, the name is used for the error strings.\n\n\nHow do we set initial/default value of an input? If initial value doesn't change, will its value get stored in the state?\n\n\nYou would set the value object of the Form to have a key with initial value where the key matches the FormField name.\n\n\nSome dialogs only need to submit modified fields (e.g. edit dialog). Can we enhance this to keep track of dirty fields?\n\n\nThe current direction includes a touched object so you can see which fields were modified at all.\n\n\nFormField.props.required should also support a callback function if flag is dynamically calculated.\n\n\nGood idea.\n\n\nSome fields may need multiple validators and/or validators which depend on other validators.\n   I can see this validate function getting huge/messy. Should we support key/values for multiple validators? If so, FormField.props.required doesn't need to be its own prop.\n\n\nInstead of an object, an array makes the ordering more explicit. Agreed that required could be handled with this pattern. Although, required as a single property might be more convenient. We'll keep discussing.\n\nExample:\n<FormField validate={{\n   isRequired: this.isRequired, // gets called first; if passes, calls next isPhoneNumber validator\n   isPhoneNumber: this.isPhoneNumber\n   ...\n}}/>\nIn general, I feel that the FormField component is becoming a wrapper/God input component which will need logic to render multiple types of input components. I can see many if-else branches which can get messy. I like the idea of leveraging Formik. No reason to re-invent the wheel. Thanks.\n\nThe current direction has a component that avoids this.\n. Thanks for the great feedback. I've updated the pull request to address the issues:\n- CheckBox should work now.\n- You can pass errors to Form for initial errors.\n- The validation functions now receive two arguments: the current field value and the value object for the whole form.\nAlso, can you clarify the issue with \"any i18n for the error text\"?. > CheckBox is working fine - thank you!\n\n\nAlso, can you clarify the issue with \"any i18n for the error text\"?\n\ne.g. in FormFields.js\njs\n[...]\n  if (required && !data) {\n    error = 'required';\n  } else if (validate) {\n[...]\nshould be something like\njs\n[...]\n  if (required && !data) {\n    error = this.props.i18nRequired || 'required';\n  } else if (validate) {\n[...]\n\nGot it. Thanks. Added messages to Form for this.\n. > A note for documentation:\n\nI tried to integrate the \"SeasonsSelect\" example from storybook. Since it has a custom \"onChange\" method, it wont work.\nSolution: call the onChange Method from the props. That will give the value back to the form context like this:\nonChange={event => {\n          this.props.onChange(event)\n          [...]\n        }}\n\nThe SeasonsSelect example was meant to be an example of using Select. Were you using it via something like: <FormField component={SeasonsSelect} />? If so, then I agree that SeasonsSelect should call any onChange passed to it. But, I suspect I might not be understanding well enough what you are doing.. I suspect I am missing something, but why isn't ResponsiveContext sufficient? https://v2.grommet.io/responsivecontext. From slack conversations:\n\nIs it supposed to include form validation as well? Also please let it live inside grommet package - standalone packages tend to not be used as much as core grommet.\n\nThat's the current direction.\n\ni would also add my personal preference to have the validation rules as part of the FormField (so i have to look at a single field to see its type, name and validation) instead of looking at a large object of validation rules\n\nThat's the current direction.\n\nAlso provide a HOC or react-hooks to easily \u2018formify\u2019 other input fields ie grommet-controls\n\nThe current direction has a FormContext that allows hooking up however you want.\n\n1) How does the validation work?\n\nIn the current direction, validations are only run when the entire form is submitted. If any don't pass, the errors are populated and rendered by FormField. If the user edits a field with an error, the validation for that field is re-run on every change to it. Once it is valid, validations are not run again for that field until the next submit.\n\n2) Can we track the dirty flags of each field?\n\nThere is a new touched object that tracks which fields were changed, similar to Formik.\n\n\nI really don\u2019t like the options change into the FormField - imho choosing the input field should not be hardcoded part of FormField but rather in a HOC or react-hooks as i posted above.  Here is an example of integrating the Select using a SelectField component and withFormField https://github.com/atanasster/grommet-controls/blob/master/src/js/components/SelectField/SelectField.js\n\n\nThe current direction strikes a middle ground, similar to Formik's Field but with Grommet's FormField. The only component FormField knows about internally is TextInput. Otherwise, the caller can pass a component for other things, like Select, TextArea, etc.\n\n\nThe validation rules should allow an array of validations, not just a function or regex- where the validations are chained one after the other. Example code for password validation https://github.com/atanasster/grommet-dashboard/blob/a09c3f543fd688bcb9c3386dba4bd28f70424353/components/profiles/SmallProfileForm.js#L46 and the running example https://grommet-dashboard.herokuapp.com/profile the smaller My Profile form, click submit and fulfill the validation rules one after the other\n\n\nFormField validation could be enhanced to take an array.\n\n\nI found it makes it easier to have a collection of pre-defined validation rules, so user can start quickly: https://github.com/atanasster/grommet-controls/blob/master/src/js/components/validators/validators.js\n\n\nAgreed, not coded here yet.\n\n\nA few nice to have for Form -\nonSubmitError/onInvalidForm event handlers to help display validation errors outside of the form itself.\n\n\nThe caller controls the submit, so I think tracking a submit error belongs outside of Form.\nAny errors are available via FormContext errors.\n\n\na facilitator option focusFirstChild (true/false) - if set auto focus the first field from the form so user can start typing right away\n\n\nI think this can be handled via a ref on the component you want focused. It seems odd to have focus controlled by a property that won't persist correctly as the user tabs around.\n\n\na tag/as option (by default form) so user can switch to div - i had issues when nesting validations with warnings of not allowing nested forms.\n\n\nI've encountered this as well, but have always run into accessibility issues with trying to do forms outside of a form tag. We can keep discussing.\n\n\nname, options, hardcoding input fields do not belong to FormField - I agree 100%, the currently proposed FormField architecture is not correct - whats needed is a HOC (or similar) to wrap input fields instead of modifying FormField.\n\n\nThe current direction adds component and passes any unknown props to it. This is the same as Formik's Field component.\nThe HOC concept is covered by FormContext.Consumer, which allows you to perform additional customizations that component doesn't handle.\n\n\nDo not create a grommet Form but instead use binding to formik/react-forms - in general a good idea, and thats the first thing I tried a year ago (I am a blackbelt in code-reuse), but at the time the available generic form libraries could not satisfy 100% my grommet needs and I ended up writing my own take on forms with grommet. It's possible things have changed in the meantime and something like formik might be a great lib to integrate in v2, but would need more accurate research.\n\n\nI'll include what I've found along this path in a separate comment.\n\n\nOf course the easiest thing would be to refresh and re-use my own grommet forms code and add docs and examples - the design is pretty close to whats needed and I have been at it for close to a year now,  Also on my own its quite difficult to maintain a bunch of code and libraries, while I have my real projects still suffering from the v2 setbacks.\n. I took an initial stab at comparing the approaches of this grommet Form component with using Formik ...\n\n\nHere is an example with the grommet Form:\n```\nconst FormExample = () => (\n   {\n      // whatever submitting the form should entail\n      done();\n    }}\n\n<FormField label=\"Name\" name=\"name\" required />\n<FormField label=\"Email\" name=\"email\" type=\"email\" />\n<FormField label=\"Employee ID\" name=\"employeeId\" validate={/^[0-9]+$/} />\n<FormField\n  label=\"Size\"\n  name=\"size\"\n  component={Select}\n  options={['small', 'medium', 'large']}\n/>\n<FormField label=\"Comments\" name=\"comments\" component={TextArea} />\n<Button type=\"submit\" label=\"Update\" />\n\n\n);\n```\n\nAnd here is an equivalent example using Formik:\nclass FormikExample extends Component {\n  render() {\n    return (\n      <Formik\n        validate={values => {\n          const errors = {};\n          if (!values.name) {\n            errors.name = 'required';\n          }\n          if (!values.employeeId) {\n            errors.employeeId = 'required';\n          } else if (!errors.employeeId.match(/^[0-9]+$/)) {\n            errors.employeeId = 'invalid';\n          }\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          // whatever submitting the form should entail\n          setSubmitting();\n        }}\n      >\n        {({\n          values,\n          errors,\n          handleChange,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <FormField label=\"Name\" error={errors.name}>\n              <TextInput name=\"name\" value={values.name} onChange={handleChange} />\n            </FormField>\n            <FormField label=\"Email\" error={errors.email}>\n              <TextInput name=\"email\" type=\"email\" value={values.email} onChange={handleChange} />\n            </FormField>\n            <FormField label=\"Employee ID\" error={errors.employeeId}>\n              <TextInput name=\"employeeId\" value={values.employeeId} onChange={handleChange} />\n            </FormField>\n            <FormField label=\"Size\" error={errors.size}>\n              <Select\n                name=\"size\"\n                options={['small', 'medium', 'large']}\n                value={values.size}\n                onChange={handleChange}\n              />\n            </FormField>\n            <FormField label=\"Comments\" error={errors.comments}>\n              <TextArea name=\"comments\" value={values.comments} onChange={handleChange} />\n            </FormField>\n            <Button type=\"submit\" label=\"Update\" />\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\nA few observations:\n- Formik can be used with grommet.\n- Because of the grommet FormField + TextInput pattern, it doesn't work to leverage Field from Formik. One option to address this is to create separate components for each grommet input component that wraps it with FormField and is built to work with Formik's Field.\n- The grommet Form example is 19 lines long. The Formik example is 53 lines long.\n. Thanks for your contribution!. Box currently supports both margin and gap. How were you envisioning moving gap to margin?. pad was a legacy from grommet v1, partly due to trying to keep things shorter and simpler. It hasn't been an issue before that it isn't called padding. We have had questions about a11yTitle.. What was the issue? On the surface, the two seem to be identical.. To see if I understand, does that mean that if we had: doc = path => require(${path}).doc; it would have worked?. I'm wondering then if doc = path => require(${path}).doc; would be clearer then, because the path would be only known to the component calling doc(). It feels a little hidden inside the utility function.. Thanks for your contribution!. From slack #general:\n\nHavent tried yet but the design looks great so far.\nOne architectural suggestion - have a DropInput base class and MaskedInput to re-use the DropInput and extend it with masking keyboard entries. I have found that a DropInput is really useful even outside of the masking data entry.. I like the thought of this. I'm actually wondering if MaskedInput could extend TextInput to leverage the suggestions management. Or, if that can't work, have both TextInput and MaskedInput extend something like DropInput.. Totally agreed. We've been discussing when to start working with hooks. We know we can't release anything depending on them until react releases it officially. But, I agree that it would be good to get started experimenting with it ahead of time.. I don't think that CodePen is the right one for this issue. Perhaps another one?. If you add an event.stopPropagation(); inside the onClick handler for the Layer, you will get the behavior you are looking for. But, as @alansouzati mentioned, you should be using a Button instead, as that is semantically more correct and will be more accessible.. We thought we had fixed things on the stable branch back in early December, right after 2.2.1. I just checked with https://storybook.grommet.io/?selectedKind=Select&selectedStory=Lots%20of%20options&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nand it seems to be behaving well. But, I suspect I am not interacting with it in the right way or noticing something. Can you point to a particular issue with that story?. I think some of those, combined with position, probably don't make sense. How we've tended to approach topics like this is wait for a design or request to show up that seems like a good thing to add, rather than adding things because we can. We are always trying to keep a little negative pressure against growing the API surface and amount of code wherever possible. But, if there's a few interesting animations that seem valuable, I'm open to exploring.. I suspect I am not understanding the issue. If I click on the TextInput, I get a flashing prompt bar and I can type to enter text. I can tab away from and back to the element and I see a focus outline and can type. These behaviors are consistent with https://storybook.grommet.io/?selectedKind=TextInput&selectedStory=Simple%20TextInput&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel.\nI suspect I am missing something though.. > hey @ericsoderberghp I'm curious to hear your insights regarding the support of animate as a string. Initially my inclination is to keep it as true/false only, and if you need a custom animation do that in the theme.\n\nI tend to agree with you @alansouzati. As implemented here, the string doesn't control which animation to run, like we do with Box animate strings. It just controls the timing details. I think it more likely that someone who wants to control the timing details will also want to control the keyframes. So, I'd recommend sticking with just PropTypes.bool for now.. I believe you need to call event.persist() in order to prevent the event object from being re-used due to React's event pooling. See: https://reactjs.org/docs/events.html#event-pooling. I think we can clean this up a bit more like: https://github.com/grommet/grommet/blob/fix/infinitescroll-refs/src/js/components/InfiniteScroll/InfiniteScroll.js. > hum. I still think we need findDOMNode though. we could use forward ref in Ref but then we would be in the same problem of trusting the caller to honor it.\nThe basic concept is to use a wrapper component in the few cases where we need a ref to it.. Thanks for your contribution!. Well done. Thanks for your contribution!. Agreed with this change. We don't have a clean way to connect what can be changed in a theme with property validation for situations like this. So, I think it makes sense to keep the property validation more open.. Thanks for your contribution.. Are you thinking that we should abandon the react-desc way of generating the typescript definitions and switch to hand editing each components file using common utility functions and variables where possible? I think this is what you are proposing but wanted to check.\nIf so, I am leaning this direction as well. I want to discuss a bit more with @alansouzati first as he did the initial react-desc approach.\nThanks for participating in this way, it helps advance things for everyone.. I am amenable to that @oorestisime.. Thanks for your contribution!. Yes. This was fixed in #2632. Agreed on the need to address this. However, currently the typescript definitions for components are automatically generated from the appropriate doc.js file contents, where properties are defined. We are discussing changing this approach as part of https://github.com/grommet/grommet/pull/2615.. I believe this has been superseded by https://github.com/grommet/grommet/pull/2632. . Superseded by https://github.com/grommet/grommet/pull/2632. I like the general direction of this. I think there are a few things that need ironing out still:\n- We need to adjust the mouse pointer when over a row since it is a control surface.\n- What happens if a cell contains an interactive element, like a link?\n- I don't think we should expect that checkboxes would be the only way to represent whether a row is selected. I think we should also explore supporting a both a hover indicator and selection indicator for the whole row.\nIn the new stories, we are missing the bottom border for the header checkbox cell.\nIt might be better to split this into two pull requests, one to add sortable, which seems straightforward, and another for the click interaction.. Thanks for your contribution.. I think this might be a mis-understanding in how items, step, and onMore work. InfiniteScroll will render step elements from items. As the user scrolls, it will render step more elements from items. As long as items has elements to render, it will keep rendering them without calling onMore. onMore will be called when the user scrolls to the end of the items. onMore is typically used to lazily load items from a server, where the items are expensive to retrieve, either in time or size. If items already has everything that could be shown, onMore can be left undefined. You can see an example of onMore being used in the storybook: https://github.com/grommet/grommet/blob/6f804a130d031ccf0d7e6246a8491f8898c174d2/src/js/components/InfiniteScroll/infinitescroll.stories.js#L53. Thanks for your contribution!. Have to reopen this as the earlier fix broke other things.. Thanks for your contribution!. Before exposing a new property, I'm still wanting to make sure we've thought through how interactive table rows will work. For example, selection indicated by a checkbox cell vs. an entire row background color, how accessibility is handled, how hover indication is handled, what happens if there are controls, like Anchor or Button inside a cell when the whole row is clickable, etc.. This appears to be a duplicate of https://github.com/grommet/grommet/pull/2672. Thanks for your contribution!. I agree with your assertion that Buttons should not be rendered inside of Buttons. See https://stackoverflow.com/a/39386695.. The default FormField theme doesn't have a full rectangle border, just a single line below the input field. https://storybook.grommet.io/?selectedKind=FormField&selectedStory=Help%20and%20error&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nThe border radius on TextInput can be controlled with theme.global.control.border.radius.\nIs the screenshot image shown from a different theme? Can you provide a little more context, or a CodePen?. CSS transforms on SVG elements don't work on IE. https://css-tricks.com/transforms-on-svg-elements/\nEdge is actually working fine for me via browserstack today, but IE11 still exhibits this problem.. Thanks for your contribution!. Thanks for your contribution!. agreed. This was fixed on the master branch in this pull request https://github.com/grommet/grommet/pull/2693. Grommet needs a new release to pull this in.. I think the change isn't about the inline-block. At least, the default display for <button /> is already inline-block. So, removing our setting of it in StyledButton doesn't change the behavior. We are setting it so that when using it as an <a /> element gets inline-block instead of just inline. I'm still investigating it.. > Would it make any sense to also add some styling to the sidebar links? the default blue color seems out of sync ;)\nI thought about that. And, I'm open to it. But, that seems to involve getting into the storybook theme stuff. Which seemed just a bit more work than tackling the font, which seemed to be the grossest part. So, I'm fine with this as a first step and then subsequently getting into the storybook theme.. A couple of initial comments:\n- I think solely representing selection via a checkbox feels too opinionated to me. I would like to discuss this with @L0ZZI a bit to show some other design approaches that we might want to accommodate as well.\n- I didn't see how the caller can populate any initial selection state or receive notification when the selection changes. Perhaps I am missing something.. > do you mean adding theme capability for another icon? Or like row changes background or so?\nIt could be a background change, a border change, or a different icon.. > about the notification i call here the onRowClick callback, were you expecting something different? I admit i am not callibg the callback when user clicks on select all, but i can definitely add this. I am just not sure it makes sense to send all the data back.\nI'm envisioning it being able to be used as an uncontrolled component, in other words, the caller supplies the initial selected items, as the user adds and removes items, the caller can keep track of what is selected. Just using onRowClick requires the caller to check whether the row was selected or not and update his state. One way to accomplish this could be to align with Select and have value and onChange properties. . This is being discussed in Slack.. Just because I haven't seen it used in the real world and am curious, do you have an example of when row-reverse or column-reverse would be used?. Agreed. It should be the caller's prerogative to decide whether the container has any overflow.. Thanks for your contribution!. You could do this: https://storybook.grommet.io/?selectedKind=Chart&selectedStory=Labelled&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel. I'm supportive of the direction.\nI am leaning towards moving grommet files down one level to a directory called grommet.\nI am not too concerned with the examples having large assets. But, we should ensure our examples are using optimized assets, and perhaps even sharing them, or using public ones that don't need to be included in the source.\n. I would like to explore some enhancements to Button that would work for Menu as well. For instance, I find myself often having to use a child render function for things like sidebars.\nI think this is also related to https://github.com/grommet/grommet/issues/2554, and possibly\nhttps://github.com/grommet/grommet-theme-hpe/issues/3.\nA combination of easier to theme and extend but also make it easier to use in typical situations, like sidebars and Menus.. All of the themes have been updated to address the issue details. Unfortunately, the Aruba brand colors are not accessible, but those are their colors. So, we aren't planning to change that. I believe we can close this issue.. Just to be clear, I think we lost \"auto\" and \"flex\" from the possible string values.. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input sets focus on click of <input />,. Thanks for your contribution!. The key issue was that InfiniteScroll was basing the available height on the height of the <body> element. But, the body element's height was being driven by the InfiniteScroll content.. I like the primary proposal here. As you mentioned, we tried to head in this direction a bit with global.control and global.input but agreed that we didn't take it very far and it can be confusing to know when it comes into play.\nMy initial thought is to align with how https://v2.grommet.io/components organizes components. Although, perhaps separating the \"Input\" category up would be needed, as you suggested putting Button and CheckBox together.\nI appreciate the detail you've put into your proposal. I think we should sketch out a theme structure using that as a starting point. I think we can set a direction to head towards and then consider how to get there. It will be interesting to see how much can be leveraged across components and where components will still need specialization, as @oorestisime suggested.\nMy inclination is to create a separate branch to explore this further.. > Can you please move src/js/components/Meter/meter.stories.js to be under the new stories directory. this way we won't have stories in different places of the Meter hierarchy.\ndone. I wish I could recall :(\nI scanned through the commit history but didn't find anything that looked promising.\n. Thank you!. Did you see the hover interaction and line rendering on the storybook story linked above?. > updated the themes status page, seems only aruba has now a few remaining issues\nYep. Unfortunately, that's their brand coloring. So, we're resigned that their brand color isn't accessible.. I think this should be added to the unit tests as well.. I don't seem to have it. Maybe @MikeWalrath or @alansouzati do?. Thanks for your contribution!!!. A few thoughts ...\nI think our per-component linkages are OK, both Storybook and CodeSandbox are already there. \nHowever, I think CodeSandbox is a bit too heavy for what we need. I would recommend removing the CodeSandbox link and just relying on the inline editor on the component pages in v2.grommet.io instead of using grommet-sandbox.\nGiven the frequency of questions about patterns, I think something should be linked from v2.grommet.io. I think it would help to have a separate index page on v2.grommet.io cataloging the patterns and projects. Perhaps \"good examples of grommet in use\", \"grommet in use\", or ?\n. I think we should call the function controlBorderStyle, as that seems a bit more accurate, since Box borders don't use it.\nCan we add global.control.border.color = 'border' to base.js? That would allow us to keep it focused on the control context, and permit changing the control border color independent of the Box border color. This is along the lines of #2806.. Are you suggesting we don't call createPortal() during the initial render but instead have componentDidMount() call forceUpdate() to re-render after constructing the layerContainer lazily?. I'd really prefer to avoid using !important in CSS. It always feel like we're doing something wrong.. I think the AnnounceContext stuff is good to go.\nRegarding SkipLinks, I agree with @ShimiSun that we shouldn't have an example of SkipLink outside of the context of SkipLinks, as they are designed to go together.\nPerhaps we can split this PR into two?. Sounds reasonable. I also wonder if we could do a light-weight inline version that just had a couple of regular expressions to match the user agent against to handle 99% of the devices being used.. Agreed!. We already have a means of providing a custom header, which would allow making this already. But, this requires a decent amount of code just to add what I think is a frequent enough use that we should provide a simpler mechanism to do this. What about adding a daysOfWeek boolean property that is implemented somewhat along the lines of:\nlet daysHeader;\nif (daysOfWeek) {\n  let day = new Date(start);\n  const days = [];\n  while (days.length < 7) {\n    days.push(\n      <StyledDayContainer key={days.length} sizeProp={size}>\n        <StyledDay otherMonth sizeProp={size}>\n          {day.toLocaleDateString(locale, { weekday: 'narrow' })}\n        </StyledDay>\n      </StyledDayContainer>\n    );\n    day = addDays(day, 1);\n  }\n  daysHeader = <StyledWeek>{days}</StyledWeek>\n}. I think this needs a merge, it's missing the bundlesize changes. I think the .brand-font selector should be added to _base.font.scss and we can remove this set of selectors from this file.\n. I think the .brand-font selector should be added to _base.font.scss and we can remove this set of selectors from this file.\n. All you need to do is add ', .brand-font' after the 'html' selector in _base.font.scss. The theme dynamism will come from the setting of $brand-font-family.\n. Based on this site: http://www.sitepoint.com/tips-accessible-svg/\nI would expect we'd put the role on the <svg> tag itself, instead of on each drawing element within it.\n. This line should be indented 8 spaces (if I counted right).\n. Why is the 'id' attribute needed?\n. Are the tools smart enough to handle multiple elements in the DOM with the same id? I ask because we can easily have multiple status icons on a screen and usually the id attribute is expected to be unique within the DOM.\n. Why are we adding this to Box instead of Article or Section? I have thought of Box as a generic container used in many places, such as Menu, Header, Footer, etc.\n. Semantically, doesn't the SkipLinkAnchor belong inside the footer?\n. The side that the Layer is hidden on should be tied to the layer direction, not all layers should be hidden to the left.\n. Given that this seems to be a link anchor, is there a reason we aren't using an <a> instead of a <div>?\n. What is the context where we would have a primary Section without a primary Article?\n. Why can't you just use document.querySelectorAll()?\n. just waiting for this change\n. Sorry, I didn't notice this before. I think document.getElementById(destId) is more efficient than querySelectorAll() when you already have an id.\n. Thanks for the pull request.\nGiven that the selection property is a row index number, it would be more symmetric if the onSelect function was passed the row index number that was selected.\n. Instead, do:\ngetDefaultParams: function () {\n  return ({\n    all1Title: this.getGrommetIntlMessage('OK');\n  });\n},\nThis sets up the default property and you can then just just use {this.props.a11yTitle}.\n. What if the caller has already set an id attribute on the menu item? I wouldn't want Grommet to overwrite it.\n. Is this role appropriate for nested Menu items? For things like headers?\nI wonder if we should be more selective in what we place this role attribute on.\n. Perhaps filtering to just , .anchor, or .button children?\n. Thanks for working on this.\nThe React way to do this is to add a getDefaultProps() function and have it return: {usernameType: 'email'}\nThat way, you can just put this.props.usernameType as the value for the input type attribute.\n. I think it would be slightly more consistent to set the id to the same value as the class: \"login-form__submit\", rather than having a different naming convention.\n. You can use:\nbackground-position: center right $form-horizontal-padding - quarter($inuit-base-spacing-unit);\n. The - 2 doesn't look correct on Chrome or Safari for a Mac. I didn't see an obvious solution to have it look correct in all cases though. Can you add a comment indicating this?\n. I don't think we need the -webkit- prefix for flexbox stuff anymore.\n. Should we only do this if the direction is column?\n. Can you add a comment explaining why this is needed?\n. How about making this rgba($background-color, 0.9)? That will allow better theme customization.\n. Since Drop could be used by component other than Menu, I would think these selectors belong in _objects.menu.scss.\n. I think this will be dependent on the header hight. Would it work to use inherit to get the same line-height as the containing header?\n. This padding signature seems just tad complicated. What are we trying to align with it?\nHow about trying: display: flex; align-items: center; in the control context and then transferring the resulting size inside MenuDrop. I can't think of a CSS only way to align the top control in the drop with the control in the Menu other than by introspection and setting explicitly.\nI guess we could explore adding a size property to the menu to correspond to the size used for Header and then we'd know the height explicitly. But, that seems slightly heavy for callers to have to set a size on the Menu to match the size used in the Header.\n. Can we prefix with '_' since this is internal to the module?\n. Is it possible to re-use the Previous and Next icons we already have?\n. This is extremely minor, but our convention is to put any passed in className as the last class. It makes it slightly easier to read the class names in the browser developer tools when they are grouped that way.\n. Can we make the color a variable and put it in _settings.defaults.scss. That will allow us to reuse it and to make it easier for people theming their app to change it if needed.\nIt would also allow us to share it with the carousel controls.\n. You can use Array.isArray without requiring loads for this.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n. It doesn't seem right to append __drop to all classes provided. This would include whatever classes the caller provides to Menu.\n. I think the children should be accessed via: https://facebook.github.io/react/docs/top-level-api.html#react.children\n. Can you remind me what these new *_drop classes are needed for?\n. I was just wondering if you had a specific instance that demonstrated the need for this? In general, we tend to avoid adding things until we have a specific instance where it is needed, to try to keep the code as simple as possible. I realize we don't always do as good a job of this as we could but I still think it's worth trying.\n. I would think the large and small would be relative to the tag chosen. Is that not the case, that setting large or small fixes the font size irrespective of the tag?\n. I think the line-height will need to be adjusted relatively as well. We won't a 60px line-height for a small h5, for example. I'd set it to 1.2 for now and we can adjust when we tune the sizes.\n. Since we didn't publish the old Label component on grommet.io, I think we can remove it, perhaps adding a note if they pass a property that was in the old one but not in the new one.\n. Let's call this just \"icon\" instead of \"customIcon\". That will align with how \"label\" works.\n. Let's add the icon even in the non-primary case as well. That will allow using icons in non-primary contexts.\n. How about logging a warning here instead, indicating that we couldn't find an icon with the supplied name? And we can leave icon undefined for rendering.\n. I don't think we need the test here. \"icon\" will already be undefined if we don't want it.\n. console.warn\n. The logic seems a bit convoluted here. We are testing props.icon and whether we have the icon multiple times. How about:\nif (props.icon) {\n  let CustomIcon = iconsMap[props.icon];\n  if (! CustomIcon) {\n    console.warn();\n  } else {\n    icon = <CustomIcon />;\n  }\n} else if (props.primary) {\n  icon = <RightLeftIcon />;\n}\nif (icon) {\n  icon = <span ...>{icon}</span>;\n}\n. What is this for? I don't see button-label in the Label component.\n. The 'suggestion' variable is a bit fragile here. I think we should initialize it after line 196.\n. This feels like a bit too much CSS leaking through into the properties. Instead, would it work to always set \"no-repeat center center\"?\n. We do want to pass the suggestion object to onSelect, not the value from the event target.\n. onDOMChange should be passing the event object, not just the value. This should match how SearchInput does it.\n. Why do we need the !props.primary here? It looks like we only ever style it the same as primary.\n. Our breaks should always be \"palm\".\n. We typically use SASS a bit more via:\n&--justify {\n  &-center {\n    ...\n  }\n  &-start {\n    ...\n  }\n...\n. Do we even need the media queries?\n. Why do we need this function, it seems a bit overkill for just adding ${CLASS_ROOT}--justify-${this.props.justify}.\n. I think any padding should be controlled by the caller. I've discussed with Allan and he's planning to merge the div and Box and have no padding. Which would make Brand Central easier. :)\n. I don't think either of them look great. Instead, I'm inclined to convert them to direction=\"column\" and just stack them, and add a responsive={false} to Tabs to turn off this behavior. That allows callers that have a few tabs with small names to still work horizontally.\n. Can you add some comments explaining how 96 was chosen?\n. very minor, can we add a space after '//' to make comments easier to read?\n. Can you add a comment that this assumes the header content is relatively simple text. If someone had richer content in the header cell, such as icons, controls, etc. this approach wouldn't work.\n. Should we de-bounce this to avoid reprocessing a lot while the user is dragging the mouse?\n. Add a comment explaining the strategy here. It does have some limitations depending on how rich the data is in the table cells.\nOne other idea is to check for the header mirror overflowing the table's container and switch to small mode in that case. This would work OK for shrinking but might cause flicker when expanding. Something that uses the actual content to drive behavior would be preferable if possible.\n. Use template string.\n. Use template string.\n. Use template string.\n. Why 18px? Can we tie this to a font related variable we already have, such as $control-font-size?\n. Are we sure that we would never want to display a table in the typical way on a palm sized device? I could see a two column table working just fine. Can we just tie this to the .table--small selector?\n. I don't think we should shift the icon to the left for everyone. I think we should add a property to control this. I'd suggest iconAlign=\"start\". The reason I think 'start' and 'end' is to be more semantic for right-to-left languages.\n. Let's add another default setting for this instead of multiplying $large-number-font-size. We should have done that from the beginning.\n. There's a fair amount of code duplication here. How about something like:\nconst first = (this.props.reverse ? children : icon);\nconst second = (this.props.reverse ? icon : children);\n. I don't think this is the correct brand style. Where in BrandCentral is this causing issues?\n. This is overriding what Inuit is doing in inuit-font-size at line 142. Why do we need the line-height here?\n. Can we inherit this too?\n. The general brand guideline is to have underlined anchors. So, I think we need to find another solution.\n. Does the drop need the --inline class?\n. Can we put this one at the end of the list? It makes it slightly easier to parse the classes in the DOM when they are grouped according to which component sets them.\n. Looks like too many '-' here.\n. This doesn't seem to be different to just adding \"this.props.children\". If menuItems is an Array, we're still returning an Array of components. I suspect I'm missing something though. Can you clarify?\n. We are trying to remove the lodash dependency since we are using ES6. Is it possible to test for this without lodash?\n. Can you re-flatten the SCSS? I've been slowly migrating this way based on some articles on SCSS structuring I've been reading.\n. Why do we need the .grommet prefix here? I was expecting we only needed it around base DOM elements, like 'a' and 'button'.\n. I see. Can you add a comment explaining that then?\n. Can we put the callers className last? It's very minor but makes inspecting the DOM easier.\n. Should we only add the <figure> when there is a caption? It would keep the DOM cleaner.\n. We usually put the defaultProps after the propTypes.\n. I think text-align: center is sufficient. We don't need flexbox for just a line of text.\n. Why do we need to add \"children\" as a formal propType? I had always thought that children was a special property that didn't need to be declared. \n. This doesn't handle the case where the caller changes property values after the initial render. It would need similar code in componentWillReceiveProps.\n. I'm thinking we shouldn't default the type and require callers to specify which type they want.\n. The type should be required.\n. Our naming convention would call this \"_onClick\".\n. I suspect that in order to maintain good design balance, we might also need to scale the vertical and between padding as well, and also look into other components that do padding and margins, such as Form, Heading, and Headline.\n. Since we're already in the context of Quote, I don't think we need to prefix this property with \"quote\".\n. key just needs to be unique within the local array, key={index} would be sufficient.\n. Agreed that we tend to want Grommet to be opinionated. However, this quote property approach will make it hard to add something like <strong>... for a section of the quote text. I think we should allow the caller to populate the quote with <Paragraph> children, which also allows for embedded <strong> elements.\n. How this is different? The PR comment indicates removing \"height: 100%\", but I still see it here.\n. Would it work to key the width and max-width off of the 'size' property value? I'm thinking that the max readable text width is relative to the font size, so the larger the font size, the larger the width and max-width.\n. I'm thinking then that we should align widths for other things, like Image, Video, and Quote, to allow pages that combine these elements to achieve a more consistent layout. One option would be to put the width constraint on Box and use full for all of the others, to fill the available width. That would work well for including other things too, like Chart, and Distribution.\n. Let's make these variables in _settings.defaults.scss and then re-use the same variables in the sizing for Image, Video, Quote, Sidebar, etc.\n. This will put the controls in each child though, which I don't think makes the animation look right.\nI think it also doesn't overlay the child backgrounds.\n. Slightly more optimal to put this inside the this.props.onClose check below.\n. Have we verified that this doesn't cause problems for IE11 and vertically centering content, as indicated in the comment on line 68? Also, if we remove line 69, it would seem we should remove lines 67 and 68 as the comment must not apply anymore.\n. Assuming we will convert to the standard sizing variables when the Box sizing pull request comes in.\n. Can we instead make this 100%?\nWhat is the 3 * base spacing unit accounting for?\n. I wouldn't think the poster would always be 100vw. What if the video is a smaller size?\n. Is the style free-form or can we use PropTypes.oneOf()?\n. How is this semantically different from the existing 'size' property?\n. Why are we changing the aruba theme as part of this change?\n. I think size already manages the width of the Box. Can that be used?\n. Can you elaborate on why we would want initial as a size choice? From my reading of this property it sounds like it applies to inherited properties, but width isn't, is it?\nFor similar reasons, I'm wondering why we'd want to have inherit be a possible width value?\nI believe auto is the same behavior as not specifying a width/size.\n. Does this mean that the hit target for the button is no longer 48x48?\n. Should we account for 'null' as well?\n. Can we add a comment explaining why we are doing this userAgent detection here?\n. Can we add a comment explaining why we are doing this userAgent detection here?\n. Why does the headline and sub headline need to be part of the core Accordion component? That seems outside the scope of it to me.\n. Can this be Header instead of Box?\n. I'd put the Collapsible here without the enclosing Box to allow callers to do things like full width Boxes with textures and background images.\n. I'd like to review the use of '+' and '-' as the right metaphors for the accordion controls with Chris. We use + and - for NumberInput where it means something entirely different. I'm wondering if up and down arrow heads would be better.\n. I think we should rename the property to heading and allow the caller to pass either a string or a node in. That will allow callers to use this with other heading levels.\n. Since this is a ListItem inside a List, perhaps it should be called AccordionListItem?\n. Do we even need this component? I'm wondering if callers could do:\n<List>\n  <AccordionListItem />\n  <AccordionListItem />\n</List>\nThis would allow callers to have some collapsible items in the list and some not.\n. Most of our other controls are not brand colored. I think we should review whether these are as well with Chris.\n. Can we give the Box a class name specific to the accordion context to avoid the direct child selector and keep the CSS flatter?\n. I would think the max-width would be controlled by the outer context. This would allow accordions to be used in a wider variety of situations.\n. Can we use utils/Responsive as the single source for this, rather than hard-coding the breakpoint in this file?\n. Can we remove the backgroundType property and rely on the presence of backgroundImage or backgroundVideoSource to determine the type as needed?\n. Rather than duplicate the Video properties, can we just accept a Video component?\n. How is this different from backgroundImage?\n. Should we allow colorIndex as another type of background in addition to image and video?\n. Alan and I have been slowly changing files to have at most 80 characters per line, which makes reviewing them easier, among other things. This one seems a bit long.\n. Should this be > *?\n. Can we make this a multiplier of the inuit-base-spacing-unit?\n. Missing openMulti in propTypes.\n. initialIndex isn't in propTypes.\n. isOpen isn't in propTypes. I'd suggest active as a term, as that would align with other components.\n. I don't see onTitleClick in any propTypes. Also, can we align it with 'active' and call it onActive?\n. I don't know that all consumers of this will want a top separator. Instead, since this is a Box, can we just transfer all Box.propTypes through?\n. Although, why do we need both the Box and the List? I wonder if we can have Accordion just be a List and let callers put it inside a Box as needed?\n. I think the should be ${CLASS_ROOT}__header to align with Grommet BEM patterns.\n. I don't think this is needed anymore.\n. If you take a look at Box, when the Box is appCentered, we put the restProps on the outer div but the id and className props get put on the inner Component. I could see that being problematic as the caller adding a data-x property would probably expect it to be placed on the same DOM element as the id. Agreed that the on* event handlers should be on input. Perhaps the right rule of thumb is to transfer the props to wherever we put the id prop.\n. Is there any way to retrieve this from the DOM after mounting to allow the CSS to drive the sizes? Otherwise this is a bit fragile in case someone changes the CSS variables.\n. Why aren't we putting this in the state?\nAnd, I'd expect to only do this if masonry.\n. This reads like the width of the columns is variable based on in the index across. If I'm understanding this right, should the outer variable be something more like columnOffsets? Or am I missing something?\n. Any reason to not just set flex-basis to $tile-size?\n. Can you add AnimateChild.propTypes so we can see what the properties interface is?\n. Is there any issue if the component continuing the animated component is unmounted before the timeout function is executed?\n. Can you add Animate.propTypes so we can see what the properties interface is?\n. Is there any issue if the component continuing the animated component is unmounted before the timeout function is executed?\n. Should we pass the additional props first, before the className, just in case there's a duplicate for another prop at some point? I don't think there's an actual issue with this current set of props but I've found that to be a more defensive way of programming in case additional props are added later.\n. When would string be OK?\n. Can this be PropTypes.node?\n. Are we moving the icon as well when in a FormField? Or, why isn't this needed in the non-FormField context?\n. Ah, perhaps I misunderstood. I thought the component was an element. I didn't realize ReactTransitionGroup could't handle that.\n. Agreed. And, we should align Tabs with Accordion in this respect as well.\n. Manny had a nice ES6 pattern for this where he enumerated all props and then used a ellipsis to capture the rest of them, as in const { prop1, prop2, ...otherProps }.\n. Can you elaborate on why we need throttle() here?\n. What's the rationale for having no icon? Is it for the disabled + all expanded case?\n. What's the rationale for having a custom icon? I would think wanting to keep controls consistent across apps and sites so that user's aren't required to accommodate differences would call for not allowing custom icons.\n. I think we should put ...props first, otherwise, caller's passing 'direction' or 'pad' would override what we are setting.\n. Can we rename this to something more semantic like label or context? The other content properties have nice semantic oriented names but the name 'overline' sounds more like a styling description.\n. I think we should instead have callers pass in an <Anchor> or <Button> component here so they can integrate with whatever routing mechanism they have. They can control the href, icon, and text via that.\n. Should we also allow a <Video> component here? That would allow the caller to set a poster image, as well as other properties?\n. Since images, video, and text are all 'content', how about we just call this property reverse: PropTypes.bool? That would align with flexbox terminology and with the new Chart components.\n. Is the icon clickable? Can we combine this with allowing callers to pass in an <Anchor> element rather than have a separate property?\n. There's a lot of custom fixed pixel sizing in here. Can we do it in a way that is more flexible/relative? I'm just wondering of the content card is supposed to have a height, perhaps we should create a t-shirt sized height property on it and then set these sizes more proportional to that.\n. I think this comment should be moved to inside the if (!this.props.fill) {.\n. This will break if $tile-small-size is changed in the SCSS or overridden by a theme. Can we instead set the width when fill && masonry in the CSS and then reuse the DOM introspection logic in both cases?\n. Everywhere else in grommet, we use the term \"on\", rather than \"handle\" -> _onClick\n. Can we simplify the function and variable names to not include the \"Markup\" term? That would be more consistent with the rest of grommet.\n. I think this icon styling should be in _objects.icon.scss, as the behavior seems orthogonal to the content-cart context.\n. Should these social colors be in _objects.icon.scss. as well?\n. Would it be possible to separate the visual aspects from the interaction aspects such that HotSpot could be just an icon that we could place inside a Button or Anchor? That would allow us to get all of the accessibility from Button and Anchor but the visual styling from HotSpot.\n. As long as we're changing this, we should handle null too. How about:\nif ((nextProps.activeIndex || 0 === nextProps.activeIndex) &&\nAlso, there should be a space between the if and the open parentheses.\n. I think what sort of component this is will need to be under the caller's control. For instance, when using react-router, this will want to be a Link, or something like NavAnchor in phoenix or grommet-docs.\n. I'm wondering if Card should extend Box instead of Tile. What is it about Tile that makes it a good choice?\n. This needs localization.\n. Can we just leverage the colorIndex of Box? We could set the default to 'light-1'.\n. Given that paragraph and description are both rendered as Paragraph, I think we should make these properties more semantically named. Perhaps \"summary\" and \"details\"? I'm open to suggestions.\n. I see this supports contents being an Array but the prop types for both are just string. Do we need the Array support?\n. This if/else block might be a bit cleaner as a const object at the top of the file, keyed by the size.\n. Any reason to not use just use 'size' as this property name?\n. Our convention for propTypes is to order the alphabetically.\n. What about supporting PropTypes.node as an option for 'heading' and having callers use <strong>{...}</strong> if they want a strong heading? Just thinking out loud.\n. Can this use the <Label> component, since it's a label? Also, given how it's used, it doesn't seem like we should be using h* tags for it, since the <Heading> is already taking care of the h* element.\n. Why do we need to add this element name to the selector here?\n. Ah. That's OK then.\n. I'd rather add sizing to Label, rather than more CSS for Card. I'd like Card to just be a composition of existing Grommet components wherever possible.\n. How about changing .grommet p to be .grommet p:not(.grommetux-paragraph)?\n. Do we have styling for portable resolution elsewhere? Can we just leave Heading to style the text?\n. I would have thought we got this behavior automatically from box. How is this changing it?\n. Can we add this to the video icon in general? Perhaps a responsive={false} on the icons?\n. Can this always be 'relative', rather than just when inside tiles when inside layer?\n. Any reason not to have this always be a part of tiles, even when outside of a layer?\n. Why doesn't the code earlier in this function take care of this?\n. Nice!\n. I had been wanting to extend the API for Timestamp to allow customizing the fields shown by extending the fields component, rather than adding separate properties for different fields. I hadn't worked it out yet though. Perhaps:\nFIELD_TYPES = ['date', 'time', 'hours', 'minutes', 'seconds']\nfields: PropTypes.oneOfType([\n  PropTypes.arrayOf(FIELD_TYPES),\n  FIELD_TYPES\n])\nwhere 'time' equates to ['hours', 'minutes']?\nOr, perhaps a precision property that takes one of ['year', 'month', 'day', 'hour', 'minute', second']?\nThoughts?\n. As part of my style modularization work, I'm trying to avoid selectors that cross components like this. Instead, can we just put flex=\"grow\" on the Box used for the card content?\n. Agreed. I'm thinking it's in unlikely to want just seconds, or just minutes, without hours. But, this signature would support fields=[\"date\", \"seconds\"], as unlikely as that would be. Which I think is the right approach to the property.\n. Great. Thanks.\n. Since the primary interface is called \"normalize\". How about naming this file \"normalize\"?\n. We try to avoid pulling in extra dependencies wherever possible. For this set:\nflatten could be replaced with {array}.reduce((a, b) => a.concat(b))\nisInteger could be replaced with a Polyfil\nsortedIndexOf could be replaced by indexOf as most data sets will be small enough to not notice the performance boost. We are already traversing the data set linearly in getXValues, getMinVal, and getMaxVal.\nI'm still understanding how zip is being used. \n. I don't think this really needs to be a class. I think we can export default function normalize() and have all other functions just be local to this file.\n. Slightly leaner to do:\nreturn (data || []).map(...);\n. I think having a granularity of 1 would not be unusual. So, I don't think we need a console warning here.\n. We user uppercase initial variable name characters for React components. I think this should just be series.\n. Why do you need the zip here?\n. I just changed the base li styling to not collide with list-item styling. So, I don't think you need this change anymore.\n. Can we rename this property to just 'truncate'? I think it's semantically reasonable.\n. Given the generic nature of Grommet though, I think it's reasonable to expect non-time based x units.\n. Out pattern is to have all import statements on adjacent lines.\n. Our convention is to initialize functions before setting the state.\n. Can we align the class label with the property name and just call the class __content--truncate?\n. Let's put any provided className prop last in the list. It makes the class easier to read when inspecting in the browser.\n. We've been using this syntax:\nconst {\n  a, b, c, ...props\n} = this.props;\nwhen we can't fit it in one line.\n. Looks like it will fit in one line.\n. one line\n. className last.\n. I think this should be a <Box direction=\"row\" align=\"center\"> to align the Meter and the Value.\n. I think we need to put the DOMProps right after the ref property so that the Carousel properties don't get overridden.\n. Did you check the Props in utils? I think there might be something similar already there.\n. We should put {...props} first to avoid overriding the other properties we pass.\n. A small point, our convention for these situations is to use undefined instead of null.\n. {...props} should be before className.\n. {...props} those be before className.\n. Our convention is that defaultProps should come after propsTypes.\n. Any reason to not use the 10 millisecond timeout in all cases?\n. It seems incorrect to use childStyles here in the timeout case since it won't be set yet.\n. Can we use this style in all browser cases?\n. Can you add a short comment on why '41' was chosen? Otherwise, it seems a little odd to the casual observer.. Can we put the overflow only on \"lap-and-up\"? Just wanting to make sure we don't break anything with this change.. Callers can only change the level to something from 1-4. So, the tag will be \"h1\", \"h2\", \"h3\", or \"h4\" only.. Oops. Good catch.. Ah, I'd forgotten to remove that. It was a bug in the next-sample prop lister.. 'check'?. rename to something like bodyChildElements?. Explain just a bit more here. Also, can we make this a shape and indicate which keys we look for?. Should we include children if we've got a label or anchor?. Maybe theme.global.edgeSize.small? This will allow it to scale with the baseSpacing.. Use theme.global.edgeSize.small. Can we have an <Anchor /> with no properties? To make sure our defaults are right.. Can we have an Anchor with children, to make sure the children are rendered?. Why call twice?. Can we enhance the description of this property to explain when one would use it?. Why did we need to add xsmall?. Should these be themeable?. Use theme.global.edgeSize.small. This seems circular to me, that the theme would call a function referencing the theme.. Can we add these in a separate router.js file? . Why removed?. 'behind' -> 'via'?. Should this be background, to align more with Box?. 'top' -> 'to'. Doesn't the menu always start collapsed?. \"should be\" -> \"are also\"?. Also, I assume one of label or icon must be provided.. Why is onClick called out here, if all Button properties are passed through. We don't list other Button properties.. Given grommet is required, do we need this initializer?. Might want to clarify that dark isn't needed when using color.. Chris and I discussed this either being an enum with possible values: 'weak', 'medium', 'strong', or being a boolean.. Should also allow rgb(...). I think this should be renamed getRGBA, since it includes alpha. And, I think RGBA is distinctive enough to not need the Color suffix.. Why change this to rgb()?. My inclination is to go with the enum. Can you check with Chris though?. Ah. Thanks.. Agreed with the need to test but still think the theme should have hex values.. bug?. I would expect these maxWidth values to be proportional to the font size. For instance, maxWidth for 48px font-size should be larger than maxWidth for 18px font-size.. This doesn't seem like a styled-components way of doing things. I've been wanting to avoid wildcard selectors like this.. I thought we were going to contemplate something other than responsive as a property?. Changed to onChange.. Should we move src/js/components/utils to src/js/utils?. I was trying to follow the pattern of putting imports that are further away earlier than imports that are closer.\n. I don't think this will always be correct. It could be \"hidden\". Why did we need to add this?. Since we have getNewContainer(), I'm thinking we should have a corresponding function to remove it. That way, all of the document.body stuff is in the same place. What about naming them: addDOMContainer() and removeDOMContainer()?. Can we access the 'document' object outside of mounting? Does this cause problems with tests or server side rendering?. Similar comment here. I think we still need this inside componentDidMount() since server side rendering won't have a DOM.. basis seems like an odd name for this property. I understand how it is being used, but the caller isn't aware of the context. Can we not automatically handle this without having the caller specify it? Could we could do something like flex: 0 1 80vh all the time?. Can we just include this in a ...rest and not need to document it?. 'when the input is empty' -> 'when no value is provided'. What happened to the color?. Why make this change?. Probably should be in a sub-object specific to RangeInput. Fine for now. I'm wondering if we'll eventually want to be able to do something like:\ntrack {\n  color: ...,\n  width: ...,\n}. This seems odd to me, since all of the children except one are position absolute. Why was this added?. This seems like it should be taking a \"hidden\" boolean, since FocusedContainer doesn't know anything about positioning otherwise.. Can you add a comment explaining why we do the following code? It just seems strange when you don't know why.. Why do you need both tests?. I don't think StyledSecond uses the stroke property.. I think this should come from the theme.. unused?. unused?. from theme. unused. from theme. or day mode. Add a comment explaining that this is when we don't have an outer <Grommet>.. I think we should add rounding too.. I don't quite understand what it means to have the caller call onActive, since that is a property of Tabs.. How should this be used? Is it per-tab at all?. How about we put this after the other properties so callers can customize more?. Move these to the Button component. Have Button be the outer component and the Box be the inner component.. Move this after the other props.. Should be expectPortal. Why 600? Maybe a comment, especially if this has to align with a timeout inside Grommet.. expectPortal. position='right'. position='top'. position='bottom'. Why via theme instead of just style?. This function name sounds odd to me. What about onActivate?. Maybe hover: true, since I don't think the 'border' is used?. What if the background context is dark?. rename to activeContent?. I understand the behavior. I find the guidance \"you must call onActive\" to be confusing, since onActive is a property of Tabs. I don't know what it means to \"call a property\".. Can you explain a bit more about what removing this fixes? I ask because this still seems to be the recommended best practice of resetting box-sizing, based on https://css-tricks.com/box-sizing/.. The Box that contains this is already controlled via align='center'.  Why is this change needed?. I think this is an issue with AnnotatedMeter then. I've seen enough variety in how Value is used to not want to make this sort of change in Value.. Can you add a comment indicating that?. I'm wondering when we decide to just have callers do things via style vs. adding more properties. For example, this could be done via style={{ backgroundPosition: 'center center' }}, which is not too much heavier than background={{ position: 'center center' }}. Thoughts?. You are SO right.. We do opacity via T-shirt sizing, small, medium, large.\nOur 'center center' won't conflict because any caller's inline style will come after whatever we set.. We should remove the center center here, since we are always setting background-position.. Do you mean have a default value for margin and padding of none?. Because we support 'none' as an edgy parameter, for pad, margin, etc. And this unifies how we set it. Agreed with other comments about not needing to special case otherwise now.. I've changed it so it defaults pad and margin to none.. How would that work, since the data is multi dimensional?. That's what react-desc does.. Good catch!. Agreed. Shouldn't this be default prop?. This should be a formal color reference from global.colors.. Why do we have this here instead of in the styling? I realize this isn't part of this change. So, you can ignore if you want to.. Why are we adding fill?. Why 300? Can you at least add a comment explaining?. Can you add a comment explaining what the strategy is here? . Why do we listen for focus on the wrapper node? What if an element inside this node gets focus, for instance, the real <input /> in a TextInput?. Good catch. We don't need the timeout. I think this was a copy/paste issue.. Can you clarify? Are you suggesting that we test for undefined, that we set the state variable to undefined, or asking whether the user can pass undefined for the dropButtonRef property?. Excellent idea. I've changed as suggested.. Yes we can.. What is a scenario I can use to reproduce the issue?. I figured it out. I've restored the behavior.. It seemed cleaner to me to track this via DropButton. And, I did change it to use setFocusWithoutScroll.. I'm wondering if \"label\" would be a better term for this, as well as for Tab. Both the document, svg elements, and a11yTitle use the term in slightly different ways. The way we use label for Anchor, Button, Chart, CheckBox, Menu, and RadioButton seems slightly more like we are using it here.. Just to be more precise: \"An accordion containing collapsible panels.\". Won't activeIndex always be true, since it is an array?. Why do you need to use a context here? I was thinking that since you are not passing anything further down the component hierarchy, just directly to the children, that you could just pass a prop.\nWhat if the caller wants to change the panel title/label based on whether it is active or not?. Would it make sense to call this with the same thing that can be provided to activeIndex? In other words, if multiple and a panel is opened or closed, we always deliver an array of the currently active panels?. Why do we need to pull in the whole baseStyle here in this case?. This doesn't seem right to me. I don't think the baseStyle shouldn't be brought in for every text component.. THANK YOU! I was hit by this bug this morning.. I don't think it should send an array if multiple isn't true.. I wonder if we should make the embedded Box use the 'span' tag instead of 'div'?. I don't think this works correctly when including an Anchor in a Paragraph. For instance, I would expect the follow to be equal:\n<Paragraph size='large'>Lorem ipsum <Anchor href='#'>Add</Anchor> dolor est.</Paragraph>\n\n<Paragraph size='large'>Lorem ipsum <Anchor href='#' label='Add' /> dolor est.</Paragraph>\n\n. Why do we need to set this at all?. It could be, although I believe technically a string is a node. Are you thinking more for documentation purposes?. Why is this change part of the Select change? Does Accordion not support single value active index anymore?. Why are we changing these?. Can we always pull from the theme, and have one in vanilla.js?. Why did we remove this?. Why does this need to be window?. I seem to recall some situations where this isn't the right behavior. But, I'm having trouble remembering the details :(\nThis is the one change I am most nervous about causing an unexpected impact.. We should add a story for this, since this would benefit from some visual verification.. Can you include a comment on why we chose 300?. This seems like a notable change. Why was this changed?. Should these be in a styled component instead of inline styles?. I've tested with with OneSphere and grommet-site. I'm not seeing any issues. So, I'm OK with this. Something might rear it's head later, but I don't want to hold this up for that.. Why downgrade? Can you enhance the comments ideally in package.json but perhaps just in the PR explaining why we need an older babel-eslint?. I'm trying put something in place so our next yarn upgrade --latest doesn't cause us to miss this again.. I thought about that. But, we are only passing it to the immediate children. And, based on this note from React:\n\nNote\nDon\u2019t use context just to avoid passing props a few levels down. Stick to cases where the same data needs to be accessed in many components at multiple levels.\nit seemed better to leave it as props.. The primary purpose of primary is to set the scope for the row for accessibility reasons. This rendering behavior seems like a reasonable default opinion. And, you can always specify a custom renderer if you don't like the default behavior. Are you thinking that more often than not callers will not want this primary styling?. I will look into it.. The xxsmall is just for the initial cell containing the group expand/collapse control, which is that size.. The size affects the height of the body.. Agreed that this needs further work for long group expansions.. Then we should fix react-desc ;). Oops. i forgot to run generate-readme before committing. Will do.. Ah, OK. \"context\" means header vs. body vs. footer. \"scope\" is an accessibility term for tables. So, I think we should keep \"scope\" but perhaps rename \"context\".. Good suggestions. <Box fill='vertical' />. OK. Will do.. I don't think it makes sense to use that strategy here, as this is where the caller is resizing the column widths interactively.. agreed. agreed. agreed. agreed. After looking into it, Table uses the a React context value in exactly the same way. So, I agree that this is a bit overloaded with the React term, but I think it still makes the most sense as a term. I'm open to alternative suggestions though.. What other term would you use to track the state of the groups?. OK. OK. OK. OK. min-content doesn't seem to be generally supported: https://developer.mozilla.org/en-US/docs/Web/CSS/min-height. Why is this needed in select? I would expect that the drop.backgroundColor would be sufficient.. I'm wondering how we should handle light vs. dark context here. Perhaps we should have theme.select.icons.color.dark and theme.select.icons.color.light? This might help with https://github.com/grommet/grommet/issues/1982 too.. I think the idea here is that the FormField never receives focus but just listens for onClick and passes the focus on to the appropriate underlying element. But, just to check, I tried using withFocus but it didn't work. I didn't delve too far into why.. Can we just pass via a color property to SelectIcon, rather than extending the icon theme?. I still think this should be theme.drop.backgroundColor. I thought we'd just pass the color value straight through?\n\nIt also might be handy to use color names in theme objects, to avoid having to create extra variables or copy/paste.. Now that I understand what you are doing here, sorry I misunderstood for so long :( , can we name this theme.select.background? That would allow us to pass through anything that Box's background property would accept, which includes opacity.. Can we change this to just be background? I think the way backgroundStyle works we can accept color names, HEX colors, opacity, etc.. I retract my suggestion to tie to drop, based on your clarifications. Can we name this just background, per my previous comments?. I've created https://github.com/grommet/grommet-icons/pull/54 to update grommet-icons to allow more variety in the color property.. This assumes that the theme wants anchors to use the brand color vs. something like underlining. It would think themes should opt in to how they want to style anchors.. I think this needs a merge.. I'm wondering if we should change this to global.hover.background, like I did for Layer, to allow more flexibility and to be more consistent?. But, if they don't want brand color, they have to set a specific color. I was more thinking that changing it to props.theme.global.colors.lightBackground.text as the basic behavior would be more appropriate.. Oops. I was thinking of something else. My bad.. Yes.. I was encountering issues with keyboard focus setting causing similar timing problems. My thinking is that the primary purpose of withFocus is to provide a focus property to components that want to render the focus in a certain way. Because of how the focus events traverse components, for example when Select and TextInput have Buttons in their Drops. Both the Buttons and the Select/TextInput are triggering focus events as the user interacts. By using a general timer, not specific to just mouse events, this allows the active element to cycle through elements and none of the grommet components will re-render until the focus has stabilized. Without this, we were seeing cases where changing the focus property via withFocus was causing a re-render and preventing the delivery of Button events.. If we keep this named color instead of colors? That will align with https://github.com/grommet/grommet/pull/2151.. darkBackground doesn't look correct here.. Can we put this in an else so we don't build the component and then toss it right away?. I don't think we want fill on the non-guiding layer. They should be driven just by the anchor, I think?. Can we call this controlBorderStyle to be more explicit?. I wonder if this should be props.theme.select.control.extend? That would allow for props.theme.select.drop.extend.. I think this should be:\ncontrol {\n  // extend: undefined\n}. I think we want the displayName to be the non-hoc component. Otherwise, most of the console messages will show \"ParagraphComponent\". I was thinking it was better to have the HOC be the odd name, but to allow the import to look right by mapping the HOC name in index.js.. I've updated this to avoid the Base suffix entirely.. Can we make this a named import, instead of a default import?. Why did we have to turn this off?. I don't think this !== does what you mean here, since the objects will never be the same object reference.. Probably just overflow: hidden;. Can this be just PropTypes.node? According to the prop-types documentation, a node can be an array.\n\n// Anything that can be rendered: numbers, strings, elements or an array\n // (or fragment) containing these types.. This feels a bit odd, reaching into the props of the icon.\n\nWhat if we changed to support providing icon as a class, which would allow us to instantiate it with the color we want directly, not needing to clone?. Yeah! so glad you were able to remove this.. Did you verify that Calendar looks OK, both desktop and mobile?. It looks like we may have lost the line-height for the label. If so, that seems like it might cause some alignment issues.. But, since it can be anything, is always right to assume what a color prop means?. Thanks for fixing. This is a good example of snapshot tests working, if we take the time to review the snapshot deltas.. Added comment.. Why don't we want to lint the stories?. This change breaks the fix for https://github.com/grommet/grommet/issues/2212.\nI'm actually not so sure that we should be doing gradients as a color. Instead, that feels like something that should be handled via a <Box background={...} />.. Can we do an // eslint-disable-line then, instead of ignoring the whole file?. Use normalizeColor. Use normalizeColor. I think box is too vague here.. How is this different than check?. Use normalizeColor. Why is this changing?. This seems like it has been broken.. broken?. It doesn't appear fixed. We shouldn't be losing the fact that the button is disabled.\nAlso, if you use bounds with Calendar, they dates outside of the bounds aren't being disabled when they should be.. I don't think this is fixed yet. When the Carousel gets to the last image, the \"next\" button should be disabled. It was previously but is not when I tested this branch via storybook locally.. But, I think our naming should be more attuned to the person creating the theme than to our own internal names.\nI also think we should allow for people to theme the CheckBox to be a solid color box when selected.\nHere's a suggestion for theme.checkBox:\ncheckBox: {\n  box: {\n    background:\n    border: {\n      color: {\n        dark:\n        light:\n      }\n      thickness:\n    },\n    round:\n  },\n  check: {\n    color: {\n      dark:\n      light:\n    }\n    width: '4px',\n  },\n  checked: {\n    box: {\n      background:\n      border: {\n        color: {\n          dark:\n          light:\n        }\n        thickness:\n      },\n      round:\n    }\n  },. It avoids eslint complaints about using index as a key.\nWould you prefer disabling the eslint rule? I actually wonder if an inline / eslint-disable / would be even better, to make it clearer. I didn't want to disable the eslint rule globally because sometimes there is a way to use a non-index key, and we should do that wherever possible.. eslint was complaining about it being in devDependencies. Perhaps we should disable this rule for all files in tools instead?. same as for tools/readme-generate-ts.js. Great catch! Fixed.. I think you can clean up the way onLeft is being built at line 74.. Yes. We would need to add responsive={false} to Heading to disable that behavior. Or, the theme could set responsiveBreakpoint to undefined.. You don't need the conditional, normalizeColor already handles it. You can just do:\nborderColor = normalizeColor(theme.checkBox.border.color, theme);\n. Can we relabel to theme.checkBox.border.size?. Can we relabel to theme.checkBox.round? I don't think the check has a radius.. Why is checked being passed to the Icon?. Agreed. I've changed it to embed it within the Calendar via the range property.. Well, it does align with the reference property.. Are you thinking we should rename reference to month?. Can we remove this? It doesn't seem right to depend on an external theme?. Good point. Fixed in the latest revision.. even simpler now :). even simpler now :). We only set the color at the top level if we set the background color in the theme now.. The previous color wasn't accessible. I've discussed with Chris and he's going to work on some new colors. So, until those show up, these changes are at least accessible.. I've added a note at the bottom of the pull request details.. I've added a note in the pull request description.. So, this will be a breaking change if a level is specified as a string. For example: <Heading level=\"3\" /> will show a warning. I am OK with it being just number, but we should add a note in the compatibility section of the PR.. So, this will not complain if someone tried \"h1\", but that isn't going to work. Any reason not to just extend to include 1-6 individually?. I think this means we will normalize twice. I think you can just put dark: 'white' here.. Can we just set border={theme.radioButton.border}?. Would one nice if this came from the theme rather than here.. I'm not sure what 'panel' refers to in this context. I'm also wondering if header is the right term. I'm wondering if we should call it label instead?. It's necessary for cell backgrounds to take the full row height.. same as previous comment. Agreed. Updated.. Why are we turning off these?. This line seems too long. I have been slowly going through the files as I touch them to make sure they fit within 80 columns.. Why no trailing comma here?. This doesn't look right to me. We should be applying the basicStyle first and then adjusting it based on finer grained properties. What about having primaryStyle second was causing an issue? I would think that's where we should make a change.. I think Grommet is already doing a deepMerge?. I'd probably just call this textColor. I don't think the component prefix is needed, just like it isn't componentBackgroundArg.. I'd choose the argument names first and then decide on internal variable names.. Ah. Thanks.. Two periods '.'?. I'm concerned that documenting global properties within each component will make it hard to know how to adjust global properties. It seems this would require hunting through all component's documentation trying to ascertain what uses the global theme properties. I'm wondering if we should just refer to the global properties referenced but define them and their default values in a single place.. I don't think the word 'default' is needed here. I also think starting with \"Used to apply\" isn't consistent with the other descriptions. Instead, how about something like \"The color of the label text and icon strokes\"?. \"to be applied\" seems a bit heavy. Also, we should be more consistent about our use of the terms \"text\" and \"label\". How about just \"The font weight of the label\"?. Can we include a reference to the CSS attribute when there is a clear correlation? That will help users know what values are permitted.. Let's try it. It will be interesting to see some details on the global stuff in action, to get a feel for it.. Why is this an level six heading?. Do we need to escape the newlines?. But semantically, it's not a header. It should be a paragraph, since it might have Markdown details within it and span multiple lines. I would expect it in the README to just be the paragraphs following the description.. Sigh :(. Can you articulate where this list came from? These are not the fonts @L0ZZI wanted to promote for the grommet theme.. I think we need an extra newline before this paragraph. As it stands, I think it will be right against the description.. Let's discuss with @L0ZZI tomorrow then.. This doesn't look right. It looks like we're leaking JSX syntax into the DOM.. Why are we not clearing the inline styling that is set at the bottom of this function? The reason to clear anything set earlier is to allow any resize or repopulation of content to reset the calculations without being influenced by prior settings.. We don't set height, why do we need this?. This seems too removed from how generate() works in base.js. For example, if baseSpacing is changed in base.js, the font size and line height here will not be aligned.. I don't think we want this to be normal, if the caller uses this in a context where the line-height has been explicitly set, this will override that setting. I think this wants to be inherit as well.. Do we need both of these at all in the base theme for this approach? What about omitting them entirely and just not setting them at all?. But, if the contents of the drop changes, we will no longer reposition it correctly as place() will be called with the prior values, instead of taking the new values resulting from the new content in the drop.. It's not just the resize, it's also changing contents of the drop, like when the back-end is slow to retrieve content, coupled with needing to tweak the drop placement due to the size of the contents changing and the location requiring adjustment due to colliding with the window boundaries.. It seems like the issue is that the contents can change for a variety of reasons. For example, adding or removing content when lazy loading, or based on inter-relationships between options when some are selected vs. just rendering the selected ones differently. Maybe we should explore calculating the desired size before rendering and then after rendering re-calculating it and seeing if it changed. If it changed, we place(), if it didn't change, we don't place()?. Is this correct in the DOM?. Indeed!. Indeed!. Agreed!. fixed. fixed. We also need to include paragraph.<size> from base.js, which controls the font-size, line-height, and max-width of the paragraph.. We also need to include global.edgeSize.<size> and global.edgeSize.responsiveBreakpoint, which are used in genericStyles() within StyledParagraph.. good catch, removed. yes, so StyledTabs can set it. removed. added. It doesn't seem right to remove the document target here. Doesn't that prevent Esc from closing the drop when the drop might not have focus? For example, if Drop has onClickOutside={false} but wants Esc to close the drop.. Does this prevent the caller from also trying to set focus on a particular input element in the Layer?. Why was this needed?. Can you add a comment explaining why we special case document?. Can we use styled-components here, instead of inline style?. The Layer isn't closing for me in the Layer Form story.. Can you at least add a comment explaining why we add this anchor and give it focus?. I'm a bit lost at what we're doing here. It seems rather convoluted. Can you include some comments explaining it?. I don't think we need this as well as global.edgeSize below. I recommend dropping this one and keeping global.edgeSize.. There is no gap or padding for a Paragraph. So, this is just for margin.. I don't think we have a paragraph.maxWidth. We do have paragraph.<size>.maxWidth. I could see either adding that via paragraph, with an object showing each size, sort of like we have for global.edgeSize above. Or, we could add one per sub key, like paragraph.<size>.maxWidth and then show the maxWidth value for each size. I think the former would be a little more consistent, albeit a bit verbose.. I don't think we need to repeat edgeSize here, as that's already in the key name.. There is no size key anywhere under the paragraph key.. I thought the text sizing was always handled by paragraph.<size>?. Remove?. Can we do this via styled-components rather than inline styling?. Good idea. I've added this as part of disabled though. So, disabled parallels value and disabledKey parallel valueKey.. This will be addressed when the improvements to InfiniteScroll are done.\nhttps://github.com/grommet/grommet/pull/2469\n. We don't want to set the top when we are aligning the bottom. We just want to set the bottom. And maxHeight was already set at line 187. So, what was broken?. Actually, if the drop is anchored at the bottom, then maxHeight = bottom sounds right. We want the max-height to allow the drop to grow as much as will fit within the visible window area. Does that make sense?. This is very picky, but can we call it debounceDelay? I think I'm getting stuck on '300' not being a 'timer'.. Can we export debounceDelay instead of timer here? \"timer\" seems too generic for what it means. In other words, I should be able to read the import statements and know what they refer to without having to read the code in utils.js.. Can we preserve the font.family pattern to be more consistent? As in:\nheading: {\n  level: {\n    1: {\n      font: {\n        family: ...\n. I don't think TextArea has a \"label\". I suspect this means the font weight of the text entered?. I think we should be slightly more detailed here. global.spacing isn't the final padding used. It's global.spacing / 2.. So, is this the pattern for updating the defaultProps? If I understand it right, it is a singleton object but with no lifecycle integration, so if a caller changes this object in some way after some things have already been rendered, new things rendered will pick up the changes but existing things will not.. This seems like it is defaultProps, not themeDefaultProps, since the theme is a key within it.. I'm wondering if we should put the math in the theme and have theme.global.input.padding that is set to baseSpacing / 2.. But, this will be a published interface. So, is the guidance going to be that you should set this before using any Grommet components and not change this after any components have been used?\nIf so, I'm wondering if we should deprecate theme in the Grommet component and use this as the preferred means of customizing the Grommet theme?\nAlso, since this is very theme centric, and we don't anticipate any other defaultProps customizations, I'm wondering if we should do this in a more theme-specific way? For example, have something like Grommet.initializeTheme() that takes a theme and sets up whatever we need internally. That seems like a more caller-centric way of approaching it, whereas the defaultProps way feels more like our internal way of thinking about it.. Can you provide an example of anything else we might want to handle in this path? I ask because we've never had any other \"global\" props other than theme so far.. Why would I want a default a11yTitle for all components?. Would there be any downside to always doing this by default and not having the caller have to enable it?. I suspect most people reading the code will not know what \"ssr\" means. And, we tend to prefer spelling out acronyms to help with this. But, what if we just called it deviceBreakpoints?\nAlso, can we leverage the existing global.breakpoints directly and just have these map to the existing names? For instance:\ndeviceBreakpoints: {\n  phone: 'small',\n  tablet: 'medium',\n}\n. To carry this further, what if we had initialResponsive and let the caller handle the user-agent stuff, since it is so hard to keep up with?. I don't think we need to document this intermediate key. select.container.extend should be sufficient.. I don't think we need to document this intermediate key. select.control.extend should be sufficient.. I think this works as a JSX component. So, you can replace the TextInput used by Select when onSearch is provided and instead provide your own. This would set whatever properties you wanted on it.. As originally coded in this request, the ssrBreakpoints were numeric values, which were then being fed through getBreakpoint to determine which grommet breakpoint to use. Changing the numeric values of the ssrBreakpoints would only have meaning when those numbers crossed the grommet breakpoint values. Whether ssrBreakpoints.phone was set to 500 or 700 wouldn't make a difference, they would both map to global.breakpoints.small. So, the only way to actually change the behavior is to change the deviceBreakpoints to a different grommet breakpoint. And, if you wanted to customize those, you could customize them in one place and the deviceBreakpoints would map consistently. But, you could always use whatever names you wanted to customize both in your theme, if you really wanted to.. This is looking good. One last comment though. Can we name this deviceResponsive? That will align the terms a bit more.. How did this change without Box/doc.js changing?. This is already in baseStyle(), why are we repeating it here?. I think this should still be \"Image\".. Can we have the baseStyle be on a separate line?. I don't think 'light-1' is visible enough on a white background. Any reason we changed this from 'light-2'?. Not quite ready to user replace, I think this should wait for https://github.com/grommet/grommet/pull/2504.. I think we can remove the eslint disable by returning undefined, or maybe we return the theme?. Can we have extendDefaultTheme() be inside default-props? It seems cleaner to have no logic inside index.js.. I think this should be \"The font weight of the text\". I think we should make this description a bit more oriented toward TextInput by saying \"How many suggestions to render at a time.\". If you look at the way this is used at line 312 of SelectContainer.js, it isn't an object with keys that can be used as properties, it is a component. For example, take a look at how select/stories/theme.js sets it to be \"SearchInput\", which is a component defined in select/stories/components/SearchInput.js.. done. We will never pass true to this, why is it needed here?. A very minor point, but this should go within the test for optionNode since we don't use containerBottom outside of that context.. Should this be on ContainerBox?. I think dropHeight might be a better term. It would align with other places like TextInput dropAlign.. Can you include this link in a comment? https://reactjs.org/docs/accessibility.html#wai-aria. This looks like a problem.. Can we call this variable dropHeight instead of size, to avoid confusion with the size property.. priorTheme was a way to do a shallow comparison in getDerivedStateFromProps to avoid re-rendering.. agreed. How would deal with the 10ms delay? We can't do that in getDerivedStateFromProps.. I plan to put multiple rich examples in grommet-site.. I think that's making things a bit harder for the caller.. Also, we can't call this.dropRef from the static getDerivedStateFromProps(). Because we need the delay before we set it to false.. Done.. Suggest: \"The color to use for the icon.\". Suggest: \"The color for the background of the menu Drop when it is open.\". Suggest: \"The icon to show to the right of the label.\". done. I was allowing the caller to pass sparse messages.. done. I think this is the general recommendation for how a context can be used in react.. I think this is the general recommendation for how a context can be used in react.. Agreed. done. done. doh, of course not. Fixed.. done. Nope. Removed.. I'm wondering if we should pass the event to onRowClick(), which would allow the caller some additional capabilities, like event.preventDefault(). Actually, the doc.js file indicates that the event will be provided to the onRowClick(), which I think is the right approach.\nAlso, grommet prefers not truncating variable names: evt -> event.. \"definition\". What exactly is this? I didn't see a reference to 'dark' from a theme in any of the video files. Also, where in the theme is this? It doesn't seem like it is in global or video.. I don't think it's quite accurate to say that the default value for global.colors is \"light-4\" or a type string. I think you are trying to say that the color of the Video controls is 'light-4'. Maybe we should add this to the theme as video.controls.color?. I think it would be more consistent with the rest of this object if we commented this line out.. I would ask @L0ZZI.. I think this property should be called video.scrubber.color. While we are using the background CSS property to show it, this is on the \"head\" of the scrubber, which should be the \"color\" of the scrubber.. Since the focus visualization is somewhat orthogonal to the essence of this pull request, can we move this pull request along and work on any visualization updates separately?. good catch! fixed.. This looks like an issue only with Chrome. I'll delve into it. Nice catch.. I think we also need meter.color.. I think we are supposed to add event listeners in componentDidMount() and not in the constructor?. Does this interfere with the ability to close the drop by clicking outside of it?. I think Travis might have trouble with this.. I think we should add a comment above formField indicating that these are setting grommet properties, not CSS directly.. I'm thinking we should let Button handle the onClick and href aspects directly and just pass disabled directly through. Would that work? . Where is this change coming from?. Where is this change coming from?. If the caller adds disabled to the item, then we should pass that to Button. If the caller doesn't pass disabled in the item, I don't think Menu should construct another value to pass to Button.. I don't think Carousel supports pad.. I don't think Carousel uses a Select icon, maybe \"navigation icons\"?. \"hieght\" -> \"height\". \"input\" -> \"textarea\". OptionBox is per-option, but theme.select.container is the whole container, and box seems a bit generic as a key, since there are boxes everywhere. How about theme.select.option.container instead of theme.select.container.box?. theme.select.option.text?. I think we should have dark and light versions of this.. Why do we need mouse listeners? I was expecting just Button and RangeInput would provide all of the control interaction.. Why both StyledAudioControls and an outer Box? I would think these could be merged.. I'd explore making the volume control just a button to start with and then when the user clicks it shows the range input for volume, taking over the whole footer.. Does this mean that 1.0 matches the volume that the user has set for his speakers? I would think we should align to that.. \"An audio player.\". Can we have all of the volume stuff in audio.volume. It seems strange to have some volume stuff under controls.. I wonder if text would be clearer, since duration or time feel like setting a time value.. Good idea, changed.. At some point, yes.. We tend to avoid hover as a primary means of interaction as it doesn't work on touch devices.. I'm wondering if we should put all of this in the theme?\ni.e. <Box border={theme.accordion.border}>\nwith the theme having theme.accordion.border = { side: 'bottom', color: 'border' }. We've been steadily moving towards putting these sorts of things into the base theme instead of hard coding them. If you put all of border in the theme, it lets the theme put a full box around, instead of just on the bottom. Or, maybe the theme wants no border at all and instead have a background on the panel header.. I think this breaks screen readers and maybe keyboard interaction. For example, I can not longer see any focus indicator.. I don't think none is needed. I think callers can set border: undefined in their theme to get the same effect.. We can't take this pull request as is as accessibility is broken with it.. Can this be called just \"attach\"? the \"to_bootstrap\" seems a bit superfluous.. This seems a bit fragile, to have the list of stories in two places. Would it be possible to iterate through the stories programmatically somehow?. Is the 'integration' directory name a cypress convention? I ask because these tests don't seem like \"integration\" tests.\nAlso, it feels a bit inconsistent to have the unit tests and stories within the component directory but these tests outside of that. Is it possible to move the cypress test file(s) for a component inside the component directory?. Would it be possible to make this more generic so we don't have to copy/paste it for each component?. Does this mean that updating storybook itself will fail all snapshot tests? Would it be possible to only snapshot the iframe containing the individual story?. I think these should just be Omit<JSX.IntrinsicElements['a'], 'color'>. There is no property called string.. What if the caller passes an onError as well, this seems like we will be ignoring it?\nAlso, it would keep the snapshots cleaner if we only added this when there is a fallback.. Are we sure we want to deprecate this? I do like the idea of having something more general, but I could still see a per-component style for this to customize further.. I think it might be more consistent to put this under global.control.disabled, since that is where the border for TextInput, TextArea, and Select are all defined. And, disabled feels more like it should be associated with a control context than with everything.. Why would we change the default to true if there is an icon without a label?. Something seems wrong here. I would not expect the Buttons in Calendar to have padding removed. I noticed that they don't look right in the storybook for this pull request.. Why are these properties being removed from DropButton?. This appears to break things: https://deploy-preview-2891--sad-tereshkova-173d07.netlify.com/?selectedKind=Button&selectedStory=Icon%20Label&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel. Ah, yes. I didn't see that in the diff.. Previously:\n\nIn this PR:\n\nNote that the buttons aren't 48x48 anymore.\n. I see. I think I'd tend towards each component getting their own, rather than removing it from Button.. I think this should be commented out, like the other undefined values in this file.. I think this level of extra detail can be a little distracting, as the reader is drawn to it and away from the primary focus of the AnnounceContext. Is it needed?. Any reason not to include message, role, and politenessSetting?. Can we align with the function parameter and call this mode?\nJust as an aside, all props are \"settings\" of some sort, so the suffix \"Setting\" seems extraneous.. Can we update the AnnounceContext/doc.js file to mention the arguments to the announce() function?. indentation is off, how did this make it through prettier?. I think having Announcer here makes it look like a grommet component. How about something like:\n{announce => <Button onClick={() => announce(\"Button was clicked\", \"polite\", 1000)}\nI think we should also mention possible values for mode and the units for timeout.. I think we should add a comment indicating where we got this expression from, so we can have a reference to check to update it.. Does jsnext:main also need changing?. Is this supposed to be yarn test-bundlesize, since that's the scripts key?. This line needs to be split into multiple lines. Also, each sentence should be begin with a capital letter.. The DOM shouldn't have 'weak' in it here.. Can we export this from Box/doc.js, since it seems to be identical?. Can we put a comment in then? That way, changing the Box prop types will be directed to align the Drop ones.. I don't think we need the !== '' as the prior check for just label will be false in this case. Actually though, can we just check whether label !== undefined?. I can't see where this is being used in the code.. I think the implementation default is false, which it has to be to not be a breaking change.. ",
    "alansouzati": "Could you try again? If it does not work, can you paste more log details here?\n. I see what you are saying. We removed the dependency for the consumer's application, not for grommet itself. I will work on removing that from Grommet project.\n. Wow, that is unexpected. Seems an issue with through2 library. Let me look into that.\n. The latest Grommet commit should allow building the core and the website in Windows.\n. Hi Steve, did you have a chance to re-test this?\n. Hi @rothskeller , I'm closing the issue for now as we had other people to test this out. In case you experience this again, feel free to reopen the issue.\n. Hi instructions are now provided at Get Started page.\n. Hi, with the latest stable development bits from Grommet we have a feature to allow exporting the examples from the source code. I'm working on a wiki page that describes how to do it.\n. Please refer to the following in order to export examples:\nhttps://github.com/HewlettPackard/grommet/wiki/Exporting-examples-from-Grommet\n. Hi,\nThanks for identifying this problem.\nI believe it should work now. Could you try again?\nAlan\n. Thanks for you contribution Tim, your changes look good!\n. Hi Steve,\nI believe with version 0.1.1 this issue should be solved.\nCan you please run 'npm update' inside your consumer app and verify if the problem has been solved?\nAlan\n. Someone else had a similar issue as yours. Could you please try the following steps and see if it works:\n1- Inside your sample app open src/scss/index.scss\n2 - Change the import statement from \"grommet/scss/gromm\nt-core/index\" to \"~grommet/scss/gromm\nt-core/index\"\n3 - Run gulp dev again.\nI'm not sure why this is not working. We are investigating this in more details.\n. Thanks for trying Don. We will investigate that.\n. After investigating your problem, I found out that the sass-loader has issues with folder with spaces and special characters. As a work around, could you please remove the spaces and special characters and try again?\n. jtangelder/sass-loader#89\n. Hi, thanks for reporting this.\nYou are using the git:// protocol, which in turn is prohibited internally. Could you please run:\nbash\ngit config --global url.\"https://\".insteadOf git://\nWe're going to update the website to mention that.\n. Hi any follow-up on this?\n. Hi, we are going to close this issue for now as we were not able to reproduce the problem. If you happen to get that again, please feel free to re-open.\n. Your feedback makes sense, we will work on it. Thanks for sharing.\n. Hi will,\nIf you want to help me out, I've created a branch to work on the js lint updates regarding code style. It seems it is a good idea to move to eslint instead of jslint. As least this is what some of the modern libraries are doing, including react.\nWe need to be careful because we are using JSX (syntax extension for JS) which sometimes are difficult to lint.\nhttps://github.com/HewlettPackard/grommet/tree/refactor_js_linter\nLooking forward to your contributions.\n. This issue has been solved by PR #24 \n. Hi,\nThanks for trying out Grommet in isomorphic mode. How did you install Grommet? I have a feeling that you are using the bower version. I say so because of this:\n/home/rick/workspace/node/isojs/node_modules/grommet/grommet.js:2851\ngrommet.js is only provided with Bower.\nWe are still not officially supporting isomorphic mode, but I would be happy to further assist you if you need help. We are all online inside Slack chat.\nAlan\n. Yeah, as we've talked, Bower is not designed to be used with NPM but with the Browser.\nPlease refer to Modular Grommet to find support for modularization with Node.\n. Hi,\nThanks for trying Grommet out, and I'm sorry that you faced issues with it. We're using node-sass through sass-loader module and based on the information here you can either delete your node_modules and install again, or install node-sass version ^2.0.X.\nIf you decide to install just the node-sass again, I believe this command would be sufficient: npm install node-sass@2.\nAlan\n. If this above solution does not work for you. Try using Node 0.12.\n. Hi @manotoshsil , any update on this?\n. Thanks for your contribution. Could you please describe a scenario where using local Grommet installation will help? If you are able to execute the bin script, we assume that you have Grommet available in the global path, unless you've manually created the bin structure in your local system, or manually created a symlink.\n. I'm closing this PR for now, if you think it is still necessary you can reopen.\n. Hi @rockybar,\nThanks for creating this Pull Request, this will eventually fix a very important issue. I like most of the stuff you did and, based on your contributions, I had an insight that I want to share with you.\nThe idea is to basically move your tour-standalone task to be inside the grommet generator.\nWhenever we want to bootstrap a new app we do: grommet init app-name, right?\nSo, similarly, to export an example app we would do: grommet export tour /Users/rockybar/workspace, where: tour is the app name inside examples folder, and /Users/rockybar/workspace is the location you want to export the new app to.\nPlease find below what I believe that needs to be done to accomplish that:\n1 - Create a init folder inside templates folder at Grommet root\n2 - Move all the content from templates to init (except for the init folder itself :smile: )\n3 - Create a tour folder inside templates folder\n4 - Move package.json from examples/tour to templates/tour\n5 - Move examples/tour/standalone/gulpfile.js to templates/tour\n6 - Update bin/grommet.js at line 69 to read from the init folder, templates/init/** instead of templates/**\n7 - Inside bin/grommet.js, create a new gulp task export which will be very similar to your tour-standalone task.\nAny thoughts?\n. Almost there, two minor changes in my opinion. I would definitely have accepted if it wouldn't be for the unresolved conflict with the <<<<<< HEAD statement. I'm sure you can fix this in no time.\n. Thanks @rockybar ! I'm really glad you did that, great job! And you are NOT a newbie! It just takes time to get familiar with the workflow.\n. This PR fixes the issue #5.\n. cc @ericsoderberghp \n. Thanks @marlonpp, this issue makes totally sense. Looking forward to your PR!\n. Thanks for your contribution @marlonpp! Everything looking awesome.\nLooking forward to your next contribution!\n. Thanks for your contribution!\n. juanfran/gulp-scss-lint#34\n. This was due to an outdated version of gulp-scss-lint. I've updated the package.json accordingly. \n. Thanks for pointing out the issue with the outdated wiki. I've updated that already.\nAlso, thanks for such detailed logs, great description on the issue. Based on your logs I see you are still using the grommet.usa.hp.com server, could you please run the follow command and try again?\nnpm config set registry http://registry.npmjs.org/\n. You're welcome to join Slack. For any communication around Grommet.\n. Also, I believe you are having a proxy issue. Can you try to leave a proxied network and try again?\nIf you are on Windows you can set the proxy like this set HTTPS_PROXY=https://server:port.\n. Yeah, we still have a lot of documentation/features to cover, specially around workflows and patterns. We are in early stages of development, you are welcome to send Pull Request with updated documentation.\nI can't see your logs, if you are replying the email you are receiving from GitHub, I believe they don't support attachments. Feel free to ping me on Slack if you need help debugging this issue.\n. I found an issue very similar to yours here npm/npm#7984.\nBased on my readings there, it seems to be related to an issue with Node version 0.12.2. \nThey said that downgrading to 0.12.1 works. But, I also tried with 0.12.4 and it works fine.\n. As per our talk earlier, updating to 0.12.4 works. So, I'm closing this issue for now.\n. Thanks @cantidio, I guess we have some work to do in order to improve our GPA.\n. @ericsoderberghp, can you provide insight here?\n. For some reason this PR failed in the JSLint. It was not your fault. I will accept that and fix that other probably independently. Thanks for your expert support on this.\n. Thanks for your PR @mattfarina \n. Please use this link to join without hp domain http://grommet.io/slackin.\nThe Slack badge has been updated to point to this URL as well.\n\n. Thanks for sharing that, I will add a wiki page on how to run the server.\n. Hopefully this is going to be helpful:\nhttps://github.com/HewlettPackard/grommet/wiki/Running-the-example-server\n. FYI, I've fixed the not found issues with the assets.\n. Thanks for the feedbacks @mattfarina. We will work on updating the README of the server app, that's definitely a good idea.\nAlso, to run the medium-app inside the examples folder you need to run an npm link. We will work on adding a wiki page that explains how to run the medium-app inside Grommet environment. You can export the medium-app to have it working outside for now.\n. I've just pushed some changes to the way example apps are handled. Basically I've removed the need to npm link it.\nFollowing your suggestion, I've added a README.md for every sample app we provide. \nCan you try again? Thanks!\n. Good point. I will update the README.md properly.\n. BTW, you do need the Step 2 for the login operation.\n. Hey @mattfarina any news on this guy? Do you think we can close this issue?\n. Can you try https://github.com/HewlettPackard/grommet/wiki/Running-the-example-server?\nI believe with that, we don't need to add these dependencies here.\n. Hey @mattfarina, the examples can be used outside, but you need to run an export task. Initially we tried to make them as stand alone projects, but we decided to void that for now. We have some specific configuration that helps with development. The medium-app is still in early stages and we find very helpful to have the examples working with live-reloading as we change/add Grommet components.\nIn the future, as we stabilize the development we can remove these configurations and make it work out of the box.\nYou can check the Exporting Examples Wiki to understand what needs to be done in order to export examples from Grommet.\n. hey @mattfarina, I believe we can close this PR right?\n. I'm closing this PR for now, if you think it is still necessary you can reopen.\n. Thanks again @mattfarina.\n. Hi @DanielZhu, thanks for your finding. We have fixed this issue, can you test it again?\nBy default the button has a disabled state if no onClick callback is provided.\nIf you want the button to be active, please add the following:\n<Grommet.Button label=\"Action\" primary={true} strong={true} onClick={this._onClick}></Grommet.Button>\n. Thanks for reporting in the first place.\n. Hi @cssberries, can you describe more about your environment? Are you using es6 syntax at all?\nI'm wondering if const children = el._childNodes; is coming from your app or from a dependency we use.\n. Ok thanks. So probably is a dependency of ours using ES6 format.\nI will investigate that on windows. I was not expecting this issue. Let me get back to you soon.\n. Hi @cssberries , I've just tried in the same environment and I'm not able to reproduce this issue.\n\nCan you confirm the Node and NPM version you are using? \nI'm using Node v0.12.4 and npm 2.10.1.\n. Well this warning is expected as part of React version 0.13. We are waiting for the release of React 0.14 to get this warning gone. You should not worry about it. But I would not expect your test to fail.\nBased on the logs it seems to be related to a network issue. Error: connect ECONNREFUSED.\nAre you under a proxied network?\n. The default port is 9000, I'm not sure why yours is showing as undefined. In your gulpfile.js could you please make sure you have the following entry in your opts: \njavascript\nvar opts = {\n   ...\n   devServerPort: 9000,\n   ...\n};\nIf you have it there, your dev server should be available at http://localhost:9000/webpack-dev-server/\n. If you see the Grommet logo loading forever you might be experience the webpack problem. I'm going to create a separate issue for this and post it here so that you understand.\n. #44 \n. Hum, interesting. I guess I know what's going on. Where are you trying to run gulp dev? At grommet root folder?\nI believe you need to run gulp dev inside the docs folder. I remember you're trying to watch the video on \"How to Contribute to Grommet\", and I believe I mention that in the video. There is no UI to be served for the grommet root folder, I think that's why you are getting the not found stuff.\n. Good point. Will work on that.\n. Done! \nhttps://github.com/HewlettPackard/grommet/commit/f44c6b8bc04c302c3e9db6f0d62a21ef1f3a572a\n@cssberries, if you sync your Fork you should be able to see the message now.\n. Cool, I can see possible Pull Requests here. :+1: \n. It seems to be related to sending invite requests without a Channel. I added a safety check on our end and I will submit a Pull Request to Slackin today to get it fixed, hopefully :smile: \nI believe this issue is now fixed, so I'm going to close it. If it happens again, feel free to reopen.\n. Recently, webpack released version 1.9.11 which is presenting issues with the dev server.\nPlease refer to this to understand the issue better: webpack/webpack#1177.\nTo fix that update Grommet to version 0.2.4 by running npm update grommet -g. If you are running Grommet locally, also run npm update inside your project.\nIf you don't want to update Grommet at this point, open you package.json and update webpack dependency to version 1.9.10. Also remember to remove ~ or ^.\n. Thanks for pointing this out @cssberries. Would you be willing to send a PR for this?\n. Also, I would like to invite you to our chat tool :smile: \n\n. Fixed by #46 \n. Thanks for your contribution @cssberries! \n. Hi,\nThanks for finding this issue. It turns out that gulp dev was only listening to localhost.\nI've added devServerHost key to the gulpfile opts. Use that key to specify a different host rather than localhost (e.g. the IP address of the remote machine you are trying to access).\nThis will be part of Grommet 0.2.5, if you want to have early access to this configuration open your package.json and update grommet dependency to the latest stable branch.\njavascript\n{\n   ...\n   \"dependencies\": {\n     \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\",\n   }\n   ...\n}\nLet me know if that works for you.\n. Hey @samogami did you have a chance to validate the fix for this issue?\n. Hey sam, could you please try with 0.3.0? I believe this should be working now.\n. thanks!\n. Sorry about that. This has been fixed by d82ffb.\n. Hi @Thylossus thanks for reporting this. I believe we haven't solved that one yet. So, feel free to send a pull request.\n. Solved by #52 \n. Thanks for your contribution!\n. Fixed\n. Thanks! We have a design asset link in the Home page at docs/src/Home.js. Can you change the link there as well? :+1: \n. Awesome, thanks for working on that!\n. Fixed by #56 \n. Thanks for your contribution Tiago. I agree, instanbul just seems to be a better fit than blanket for now, when using gulp.\n. Fixed\n. Thanks for your contribution @tvmj02 \n. This should be fixed as part of version 0.3.0. Could you please run npm update inside your project and try again?\n. Closing this issue for now. Please reopen if you are still facing issues.\n. Thanks Tiago!\n. Hi, we need to tweak the example server to avoid running gulp dev there. It is not supported. \nPlease refer to Running Example Server to learn how to start the example server.\n. Cool, i will work on that and update both the wiki and the code.\n. Could you please make sure that your node server is running? if you run node server, this is a blocking process, meaning if you close the command line, it will stop the server.\n. yup it is unrelated. For those interested in why it is failing, check out this link: http://docs.travis-ci.com/user/pull-requests/\n\nThe most important restriction for pull requests is about secure environment variables, or rather, any data that\u2019s encrypted with our encryption feature. Pull requests sent from forked repositories don\u2019t have this data available in their builds. All data that\u2019s considered confidential will not be added to the build\u2019s environment. \nIf your build relies on these to run, for instance to run Selenium tests with Sauce Labs, your build needs to take this into account. You won\u2019t be able to run these tests for pull requests from external contributors.\n. Thanks for your contribution @mattfarina \n. Thanks for digging into that @TiagoJustino! \n. Would appreciate your insights here @mattfarina \n. Thanks for trying that. It seems that coveralls got stuck. I guess I will accept that for now.\n. Thanks @TiagoJustino . I'm glad to see the first PR targeting accessibility work. @samogami \n. Thanks!\n. Thanks for your contribution!\n. Will take a look on that.\n. Updated! :+1: \n. Now we are integrated with David to keep track of our dependencies state.\n\n \n. Thanks for finding and fixing this Tiago!\n. Thanks for reporting that, we have it fixed in the master now, it should be part of the next version. In the mean time you can use the fonts CDN paths:\nMetric font: http://hpefonts.s3.amazonaws.com/MetricWeb-Regular.woff\nHPSimplified font: http://hpincfonts.s3.amazonaws.com/hps-me-w27-regular-woff.woff \n. Fixed by #76.\n. Fixes #72.\n. @bryanjacquot would give an extra look here?\n. This should be fixed now, could you please run npm update inside your project and try again? Thanks!\n. Sorry,  these links are outdated.\nSome demos:\n1 - https://hc380.grommet.io (UI for the Hyper Converged 380 from HPE)\n2 - http://peoplefinder.grommet.io (source code: https://github.com/grommet/grommet-people-finder, training: https://vimeo.com/173002390)\n3 - https://blog.grommet.io (source code: https://github.com/grommet/grommet-blog)\n   FYI: we are in the process of redesigning the blog\n. I believe the main issue before was using document inside render function. I've updated the App component to move DOM manipulation from render to componentDidMount. :smile: \nThis should be part of the next release but, in the meantime, you can use the stable distribution.\n$ npm install https://github.com/HewlettPackard/grommet.git#stable -g\nAnd in your package.json:\n{\n  ...\n  dependencies: {\n    grommet: \"https://github.com/HewlettPackard/grommet.git#stable\"\n  }\n  ...\n}\nStable means: last commit to the master branch that passed CI build.\n. I think it is ok to have document references outside render function. I tested isomorphic react with todo-app-modular and it works just fine. We do have other references to document elsewhere.\n. Closing this issue for now. Please reopen if you still need help with server-side grommet.\n. Looking awesome, thanks for your contribution @samogami! \n. Thanks @mattfarina !\n. Awesome stuff. Thanks @TiagoJustino for your hard work on this!\n@ericsoderberg, @bryanjacquot, @mattfarina, @samogami , Can any of you guys take an extra look here?\n. Thanks guys, this is an awesome feature added.\n. Hi @mattfarina based on our previous tests it is ok to use document as long as it it not inside render function. Feel free to reopen the PR if you think differently.\n. I general looks good to me. I will wait @ericsoderberghp feedbacks on it.\n. Hi @ieugen, could you please confirm the path where your global packages get's installed?\nPersonally, I haven't tested Grommet on top of io.js. \n. I understand, I'm sorry about that. This is where we look for possible installed version of Grommet:\nNODE_PATH\n/usr/lib/node_modules\n/usr/local/lib/node_modules\nWhere NODE_PATH takes priority over the others. Can you confirm what is set in your NODE_PATH?\nIf it is not .nvm/versions/io.js/v2.2.1/lib/node_modules can you set that?\n. The recommendation is to use query selector to grab the elements without the need for the id.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\nFor example:\ndocument.querySelector('.my-login-form button');\nWe avoid adding ids inside these components to not face issues with duplicated id in the DOM. LoginForm is a higher-level component which will most likely end up moving to grommet-addons.\n. I see your point, but I don't think this is a good idea for production build either. In this case you are adding debugging information that will be most likely present in your production site (increasing the bundle size).\nIn the case of a LoginForm, the data-ta-id would need to be bundled with it which can lead to side effects like two login forms in a page warning about duplicated ids.\nWe talked a lot about this in a recent meeting with the Grommet team. If you want to add the id for LoginForm, our current recommendation is to copy it from the Grommet source and move it to your project. As I said, these high-level components will be soon moved to grommet-addons.\n. Fixed. Thanks for reporting this!\n. I've tried testing this today and it seems to be working. Could you please try again?\n. Hi @ickedude thanks for your contribution. I wonder if we can remove selectable property entirely.\nGiven that:\n<Table selectable={true} onClick={this._onClick} />\n@ericsoderberg: Is there a case where it would be useful to have selectable without a callback function?\nIf the answer is not, then I prefer to have only onClick, and if it is provided, it means it is selectable.\nIf we want to be even more more specific, we could rename onClick to onRowClick.\n. I think for now this is ok, we will try to re-evaluate this later. Thanks for your contribution @ickedude !\n. Thanks for your contribution @samogami \n. Thanks for your contribution!\n. Fixed. Thanks for reporting this @tran2519 \n. Fixed and it should be available in Grommet stable.\n. Awesome, thanks for your continued work on this!\n. Thanks Tiago! You are the best ;)\n. Can you try to update your node and npm? I'm using Node 0.12 and NPM 2.7.5. Npm 1.3.x seems not to be supported.\n. Makes sense, thanks Tiago!\n. Thanks Tiago!\n. I believe this should be fixed, I was not able to reproduce in the first place, but I guess I know what is going on. Could you please check it again? Thanks for reporting this.\n. Thanks Sam!\n. Fixed this in the new grommet-cli. https://github.com/grommet/grommet-cli\n. Thanks Tiago, I will update documentation properly for ariaDescribedby\n. Medium app has been deprecated and I cannot reproduce this issue with Ferret or HC380. Closing the issue for now.\n. @ericsoderberg @bryanjacquot an extra look here? :+1: \n. Fixed\n. Closing as we cannot reproduce this issue and it is one week that we asked for follow-up\n. thanks for your contribution @mirsilstan \n. Original motivation was the ability to show/hide items depending on the resolution. There are some scenarios where we want to hide elements on mobile. Or some cases where we want to show items in mobile.\nI was doing that inside my Sass file. We discussed about different way of doing this: visibility hidden, opacity zero...\nI believe this PR facilitates this feature by adding a property to the box.\n\nOn Aug 17, 2015, at 5:03 PM, Eric Soderberg notifications@github.com wrote:\nCan you remind me what specific example caused us to pursue this?\n\u2014\nReply to this email directly or view it on GitHub.\n. Note applicable anymore.\n. Sorry about that @scottshaffer. When you say latest build, is this the stable build, or Grommet version 0.3.1? Can you paste here your package.json dependencies?\n. Sorry I guess i was not clear on what I meant. Can you paste here your application package.json. I just want to double check how are you pulling the stable build.\n\nSent from my iPhone\n\nOn Aug 11, 2015, at 11:51 AM, scottshaffer notifications@github.com wrote:\nYes this is 0.3.1 which I thought was the stable build. At least I attempted to pull stable and this is what I got.\n\"name\": \"grommet\",\n\"version\": \"0.3.1\",\n\"dependencies\": {\n\"intl\": \"^0.1.4\",\n\"inuit-box-sizing\": \"~0.2.0\",\n\"inuit-clearfix\": \"^0.2.1\",\n\"inuit-defaults\": \"~0.2.1\",\n\"inuit-functions\": \"~0.2.0\",\n\"inuit-headings\": \"~0.3.0\",\n\"inuit-images\": \"~0.3.3\",\n\"inuit-list-bare\": \"~0.3.0\",\n\"inuit-lists\": \"~0.1.0\",\n\"inuit-mixins\": \"~0.2.3\",\n\"inuit-normalize\": \"~3.0.2\",\n\"inuit-page\": \"~0.2.1\",\n\"inuit-reset\": \"~0.1.1\",\n\"inuit-responsive-settings\": \"~0.1.2\",\n\"inuit-responsive-tools\": \"~0.1.1\",\n\"inuit-shared\": \"~0.1.5\",\n\"lodash\": \"^3.8.0\",\n\"moment\": \"^2.8.3\",\n\"react\": \"^0.13.1\",\n\"react-gravatar\": \"^1.0.0\",\n\"react-intl\": \"^1.2.0\",\n\"react-router\": \"^0.13.3\",\n\"react-time\": \"^2.4.0\",\n\"reflux\": \"^0.2.7\",\n\"superagent\": \"^1.1.0\",\n\"yargs\": \"^3.8.0\",\n\"gulp\": \"^3.8.11\",\n\"gulp-template\": \"^3.0.0\",\n\"gulp-install\": \"^0.4.0\",\n\"gulp-file\": \"^0.2.0\",\n\"mkdirp\": \"^0.5.1\",\n\"node-uuid\": \"^1.4.0\"\n},\n\"devDependencies\": {\n\"del\": \"^1.1.1\",\n\"expect\": \"^1.6.0\",\n\"should\": \"^6.0.1\",\n\"css-loader\": \"^0.14.0\",\n\"file-loader\": \"^0.8.1\",\n\"imports-loader\": \"^0.6.3\",\n\"babel-loader\": \"^5.2.2\",\n\"sass-loader\": \"^1.0.2\",\n\"style-loader\": \"^0.12.0\",\n\"json-loader\": \"^0.5.1\",\n\"gulp-chug\": \"^0.4.2\",\n\"gulp-eslint\": \"^0.12.0\",\n\"gulp-minify-css\": \"^1.1.0\",\n\"gulp-mocha\": \"^2.0.1\",\n\"gulp-live-server\": \"^0.0.21\",\n\"gulp-preprocess\": \"^1.2.0\",\n\"gulp-react\": \"^3.0.1\",\n\"gulp-rename\": \"^1.2.2\",\n\"gulp-rsync\": \"0.0.5\",\n\"gulp-sass\": \"^1.3.3\",\n\"gulp-scss-lint\": \"^0.2.0\",\n\"gulp-watch\": \"^4.2.4\",\n\"gulp-coveralls\": \"^0.1.4\",\n\"gulp-if\": \"^1.2.5\",\n\"gulp-git\": \"^1.2.3\",\n\"gulp-prompt\": \"^0.1.2\",\n\"gulp-bump\": \"^0.3.0\",\n\"gulp-jsx-coverage\": \"^0.1.3\",\n\"gulp-open\": \"^0.3.2\",\n\"gulp-replace\": \"^0.5.3\",\n\"node-sass\": \"^3.2.0\",\n\"webpack-stream\": \"^2.0.0\",\n\"eslint\": \"^0.21.2\",\n\"eslint-plugin-react\": \"^2.4.0\",\n\"babel\": \"^5.3.3\",\n\"babel-eslint\": \"^3.1.9\",\n\"babel-core\": \"^5.6.15\",\n\"jsdom-no-contextify\": \"~3.1.0\",\n\"react-tools\": \"^0.13.1\",\n\"run-sequence\": \"^1.0.2\",\n\"webpack\": \"^1.9.11\",\n\"webpack-dev-server\": \"^1.8.0\",\n\"node-libs-browser\": \"^0.5.0\",\n\"glob\": \"^4.3.5\",\n\"rewire\": \"^2.3.3\",\n\"mocha-lcov-reporter\": \"^0.0.2\",\n\"selenium-standalone\": \"^4.2.2\",\n\"webdriverio\": \"^2.4.5\"\n},\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, this is not the stable build. Can you replace by this:\n\n\"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n0.3.1 is an actual release.\nWe need to update the docs page to inform that Spiral only works for stable builds.\nAlan\n. Thanks a lot for this PR. I really like you cared about adding unit tests for ListItem. Way to go :+1: \n. Great description about a11y in Grommet, thanks!\n. Awesome, thanks for working on this! :+1: \n. Thanks for your contribution\n. Thanks for your contribution!\n. Hi @Don-Altobello thanks for reporting this. I don't see anything wrong with your installation. It takes time initially because all the dependencies needs to be downloaded from the NPM central repository. Once you have local cache, installation will be much faster. I would suggest installing again and report back in case you get any error logs.\n. Thanks a lot @samogami, u r the best! \n. thanks!\n. Thanks for your pull request. I've sent some minor feedbacks, hopefully you can change that.\n. Thanks for your contribution @ieugen \n. Thanks for your contribution @josephalhamad !\n. Thanks @rtspotts for submitting this. \nIf you are using Grommet version < 0.3.2 then your package.json has the dependency set like this:\ndependencies: {\n    \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n  }\nThis means that we are using the latest stable branch (every commit that passed the CI build). As we are in early stages, this is sometimes extremely useful because it allows you to get the latest bits from Grommet without waiting for an actual release.\nAt the same time, this is problematic because of conflicting changes. \nThis is the issue you are facing, the latest stable branch had a change that conflicted with your version of eslint, as you pointed out.\nThere are a couple of fixes possible for this:\nUpdate grommet\nRecommended\n$ npm update -g grommet\n$ grommet --version //0.3.2\n$ grommet init people-finder\nUpdate library dependencies\ndependencies: {\n    \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n  },\n  devDependencies: {\n    ...\n    \"gulp-eslint\": \"^1.0.0\",\n    \"eslint\": \"^1.1.0\",\n    \"eslint-plugin-react\": \"^3.2.3\",\n    ...\n  }\nthen run npm update inside people-finder\nUse a fixed Grommet version in your package.json:\ndependencies: {\n    \"grommet\": \"0.3.1\"\n  }\nthen run npm update inside people-finder\nPlease let us know if any of these fixes worked for you.\n. Hi @rtspotts any news here?\n. Thanks Kyle, good finding.\nCan you try one thing for me?\nAdd \nwatchOptions: {\n  poll: true\n}\ninside webpack key in your gulpfile.js options.\nI believe it is going to work without the need to manually specify it.\nIf it works, i would propose opening a github issue to keep track of the problem and then make it a default configuration whenever watchpack issue is resolved.\n. Got it, devServerConfig is different than devWebpackConfig. Did not notice it!\nSorry about that and thanks for your contribution.\n. thanks Kyle!\n. Thanks man, good stuff\n. Thanks Kyle\n. Thanks for reporting that!\nFixed by https://github.com/HewlettPackard/grommet/commit/9aacf42771d522714ed3b17c64c0ec894933e772\nIt will be part of the next version of Grommet.\n. I believe this is a bug, investigating it soon! sorry about that :(\n. It is fixed by https://github.com/HewlettPackard/grommet/commit/8a82f1e22ed07b12e5535c17970a1dfa2908bd46.\nIf you are using inside Grommet source code, you should be able to run that immediately. \nIf you have exported the todo-app-modular and you are using the stable version, just run npm update inside your project and it should work.\nIt will be part of the next release of Grommet.\nThanks for reporting this! :+1: \n. Have you tried https://github.com/arturadib/shelljs ?\nI've tested that with windows and linux and works just fine with Node 0.10 :)\nWe have a related issue with spawnSync not working on windows. See #178 \n. I'm closing this in favor of shelljs, please feel free to reopen if you still think this makes sense ;)\n. Interesting approach @rstuven. I will test that tomorrow :+1:\n. Thanks for your contribution @rstuven, everything looking ok. \n. Thanks for your contribution Kyle!\n. Makes sense, thanks for your contribution @rstuven \n. This should be available if you use the stable branch, in your package.json do:\n{\n  ...\n  \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n  ...\n}\nWe are going to release a new version pretty soon, and this contribution will be there :+1: \n. I was thinking about this problem today... We have a webpack key inside the options where you can configure additional loaders for your application, and other additional webpack attributes.\nI wonder if a better fix for this is to identify the same test and use the client's loader instead of ours.\nFor example:\nClient's configuration\nvar opts =\n  ...\n  webpack: {\n    module: {\n      loaders: [\n        {\n           test: /\\.js$/,\n           loader: 'react-hot!babel',\n           include: [\n             path.resolve(__dirname, \"src/js\"),\n             path.resolve(__dirname, \"node_modules/grommet/src/js\")\n           ]\n        }\n      ]\n    }\n  },\n ... ;\nNow in our gulp tasks we could identify that the client already has a .js loader and skip adding ours.\nWhat do you think?\n. If it is a different test, it should be supported today. The only issue is:\ndifferent webpack loader for the same extension.\nOn Wed, Sep 16, 2015 at 10:01 AM, Ricardo Stuven notifications@github.com\nwrote:\n\nI think someone may want to use a different test. For example:\n/.(jsx?|es6)$/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/HewlettPackard/grommet/pull/186#issuecomment-140804275\n.\n\n\n\nAlan Souza\nSoftware Engineer\nContact: +1 (408) 421 - 6341\n. Thanks @ivandurst welcome to the Grommet community :+1:\n. Thanks @ivandurst, you're the best.\n. As agreed, this will not be a feature of Grommet at this point.\n. Hi @Deklin, we're working on this and we should have a new release the end of this week, or early next week.\nIn the meantime, you can use Grommet stable, which gets updated every time a successful build is pushed to the master. To get that, update your package.json like follows:\n{\n  ...\n  dependencies: {\n    grommet: 'https://github.com/HewlettPackard/grommet.git#stable'\n  }\n  ...\n}\nHopefully this will allow you to get the features you are looking for.\nJust remember to run npm update to get the new Grommet dependency in your local node_modules.\nAlan\n. Grommet 0.3.7 released :+1: \n. Thanks Ivan.\n. hi @Spy-Seth, thanks for the kind words about Grommet.\nThe browser version of Grommet (compiled scss and js) can be found on Bower: bower install grommet.\nThe NPM distribution is dependent on React and JSX. I believe you are facing issues like module react not found? We don't have planned to add compiled version in NPM itself, do you have examples of other projects doing that for us to evaluate this? Initially it sounds like bower to me, but I may be wrong here.\n. Are you using webpack? Can you add grommet to your babel configuration? If you are using the Grommet developer environment this configuration comes by default to you.\nWe are concerned about providing the compiled version for NPM at this point. One of the reasons being performance optimizations.\nWe would rather have require('grommet/components/Meter') as opposed to require('grommet').Meter.\nI know we could provide a compiled version for each of these components separately, but it adds more complexity to the build environment. We believe that it is just simpler to add grommet to your babel configuration.\n. Thanks for your explanation. I agree with this part:\n\nAdding grommet to my babel configuration is not a long term solution.\n\nI have some ideas around this that I want to explore.\nI will get back to you on this.\n. Hi @mattbrewer-educredu, thanks for the extra input here. I have this issue as one of my items to tackle in the next days or so. So expect to hear news about that soon.\nThanks for sharing React UI builder with us, will definitely take a look into that.\nThere is no Grommet blog at this point, sorry about that. We are working on it. In the meantime I invite you to join our Slack channel. We constantly post updates and news there.\n. Thanks for the feedback folks. I've fixed that here: https://github.com/HewlettPackard/grommet/commit/7f806d61b260a07a570d0f8ac7636538b61f60f4.\nIt will be available in the next release. In the meantime you can use grommet stable to immediately get these changes. Keep in mind that grommet stable gets updated every time that someone commits something and passes the CI build. To get that update your package.json as follows:\n{\n  ...\n  dependencies:  {\n    \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n  }\n}\nLet me know if it works so that we can close this issue :+1: \n. We should support isomorphic. This is definitely an issue to be solved!\n\nOn Oct 13, 2015, at 1:17 AM, Armand Abric notifications@github.com wrote:\nHum I cannot completely test it. My application is a isomorphic react app. And the Grommet code is not isomorphic: it depend directly on browser API.\n/Users/spy-seth/workspace/rescue/node_modules/grommet/utils/Cookies.js:37\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.;)\\s\" + encodeURIComponent(sKey).replace(/[-.+]/g, \"\\$&\") + \"\\s_\\=\\s_([^;]).$)|^.$\"), \"$1\")) || null;\nI will have another look later.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi @Spy-Seth that is really strange. Is there any place calling Cookie.get in your app?\n\nIn theory it should be ok to have this code inside NPM and serve-side as long as you are only invoking inside a componentDidMount for example.\nLet me know if this call is coming from a Grommet component somehow...\n. cool stuff @thiagoc7! It is interesting that you also add alt containers with store on that example. Good job! \n. @Spy-Seth looking forward to hearing more about integration with Browserify! ;)\n. Hi @linde12 both\nimport App from 'grommet/components/App';\nimport Header from 'grommet/components/Header';\nand \nimport {App, Header} from 'grommet';\nshould be supported.\nOur recommended approach is to use like this import Header from 'grommet/components/Header'; so you save size in your final bundle. Regardless if you are using Browserify or Webpack, if you do: import {App, Header} from 'grommet'; you load the entire grommet library and then filter it down to App and Header.\nI would say this issue is fixed, we have full support for Grommet as a library a long a time ago.\nWhat sort of issues are you facing? Would you mind sharing that with us?\n. I see, i'm not that much familiar with Browserify. I guess it is failing to recognize ./. I'm not sure if this is a webpack-specific approach to refer to local folders. Are you guys familiar with Browserify? Do you think this could present issues?\nYou don't need a special loader for ./icons/base/Up, you can see it here, it is just regular compiled babel source.\nI know in webpack I have to configure my known extensions, is there something similar to Browserify? You can see all our import commands do not provide extensions.\n. Really weird,\nCan you verify this file is actually present?\n/home/linde/go/src/ioboxrevel/public/node_modules/grommet/components/icons/base/Up.js\nIf it is there, I'm afraid that could be some configuration issue with Browserify. \nI will try soon to get grommet working with Browserify, but I'm not sure how soon. :smile: \n. Cool glad we are getting down to the issue.\nIt is really weird to be missing. I remember we had this issue in the past, can you confirm your Node and NPM versions? Also can you confirm the Grommet version you are trying to install?\nThe one at icons/Up is deprecated and we will be removing it in the next version.\nIf you look here: https://github.com/grommet/grommet/blob/stable/components/icons/base/Up.js\nThe icon does exist. :cry: \n. https://github.com/grommet/grommet/issues/292\n. https://github.com/npm/npm/issues/11135\n. Let me investigate it further, I will release 0.5.5 to fix that, even if it means I will have do to it manually :smile: \n. I've release 0.5.5 with NPM can you give it a try again ?\n. Cool! I'm going to close the issue (for now) ahahha\n. You need a scss-loader. ES6 only will not bring styles. Are you using webpack?\n. Let me work on creating a standalone sample project that you guys can refer to.\nI will also create a wiki page describing what you need to do in order to get grommet styles running.\n. Cool great to hear that. Which open source team is it? Would love to learn more about it :)\n. grommet-standalone has been created and it should be available for reference on how to use grommet with webpack\nhttps://github.com/grommet/grommet-standalone\n. Thanks for your contributions @bdharris08 \n. Thanks for your contribution Sam.\n. thanks for your contribution @mtgibbs \n. I believe you need the justify between option in your Header. Something along these lines:\n```\n\n\n\n\n            GES Data Services\n        \n\n<Menu direction=\"row\" responsive={false}> \n    <Link to=\"app\">Home</Link>\n    <Link to=\"activeEvents\">Active Events</Link>\n    <Link to=\"about\">About</Link>\n</Menu>\n\n\n```\n. Hi @davian-007 thanks for your contribution. Could you please send screenshots of the resulting Meter changes? I understand you want to add two things: a tooltip and indicators (average and high). Could you please add more details around your contribution?\nI've added some feedbacks already. There are some issues around indentation (I've pointed out some, but there are more). If you run gulp dist in your fork, the linter should warn you about all the issues in the code.\nLooking forward to hearing back from you. \n. Thanks for your contribution, but tooltip is a feature we are not planning to support in our components.\n. Hi @mingfang, we do touch a little bit on accessibility in the website, including SkipLinks.\nPlease refer to this link for more information: http://grommet.io/docs/develop/accessibility\nBut I agree with you, the content could be more extensive. We would love to see a PR for an enhanced version of that.\n. This seems like a proxy issue for me. Could you please make sure to add the proxy settings if you are inside a corporate network?\n. Stable branch gets updated as soon as changes are merged successfully to Grommet master repository.\nIn your case, as soon as your PR is approved and passes the CI build it will be automatically moved to the stable branch.\n. @L0ZZI this one as well ;)\n. Looks good to me for now, but I believe @L0ZZI is creating the next version of the icons. It may be the case that this change will be overwritten.\n. @L0ZZI would you mind taking a look at this ?\n. Hey @thiagoc7, this is an interesting question. Can you please provide us with an example where the callback for the Meter's hover is going to be used?\nAnd yes, we definitely accept PR. But I would like first to understand where this is going to be applied.\nIf we apply that to the Meter, that would be good to explore other components that might need this feature as well. \n. What if you use the onClick callback instead of the hover? \nIf you rely on the hover state for actions, how you make that work in a mobile device? Also, how you guarantee that people with disabilities will use your system to the fullest extent?\nAnother aspect that worries me is: while you are just moving the mouse around and accidentally hover over the meter paths, the UI starts reacting to it. I wonder if this is a good practice in terms of user experience.\n. Awesome, I like the onPress idea :+1: \n. Very weird issue that started after we migrated to React 0.14 and React-Intl 2.0. I did a work around in commit https://github.com/grommet/grommet/commit/ae14e9f81ec5cd89cd58dd69f46cd64407e09c26.\nAlso, I've submitted an issue with react-intl project: https://github.com/yahoo/react-intl/issues/212\n. The current workaround is to move to grommet Stable. We will soon release 0.4.1 with the fix for this issue.\nYou can install the stable version by updating your package.json to the following:\n{\n  \"grommet\": \"https://github.com/grommet/grommet/tarball/stable\"\n}\n. The release is going to happen this week, in the meantime stable branch will unblock you.\n. Fixed in 0.4.1\nsorry about the delay @jaitthomas\n. Thanks for your contribution\n. Thanks for your contribution!\n. Thanks for your contribution, and welcome to the Grommet team :+1: \n. Hi @Rakshaki good question. Can you describe more on what you are trying to achieve with the pagination component.\nI'm guessing you are trying to add long list with paging capabilities. If this is the case, have you considered doing infinity scrolling? \ngrommet-index offers a set of components that helps with rendering mass quantities of data. Check the List component for reference implementation in the infinity scrolling.\nWe are working on adding proper documentation for grommet-index so that you don't have to poke into the code to see what's going on.\nIn the practical aspect check Ferret, specially the list of Server Profiles\n. Thank you so much for adding a codepen to illustrate the issue. It helped me a lot to see what is going on.\nI tried the fix you suggested and it works just fine. Would be kind enough to send a Pull Request with this contribution?\n. Thanks for your contribution\n. Thanks for submitting this issue @eabay!\nIf you use Locale while in server side mode, we are currently using the default Locale. This seems wrong to me, but I'm not fully sure how to solve the Locale running on top of node. Feel free to send a PR to fix this issue if you have something in mind that will be able to load the current locale when running in the context of Node. If you run locale in the browser, module.exports will be undefined, then we will use the cookie variable to properly load your locale.\nI really like the idea of having an extra attribute for getLocaleData with the desired locale to use.\nLooking forward to hearing back from you...\n. Nice, I like the idea of having a function to set the locale (probably in node context we will invoke that first).\nI've added minor comments regarding variable and function names.\nThanks for your contribution.\n. Thanks for your contribution!\n. Thanks for your contribution @epilande. \nI'm wondering how we would handle all other events like keyup, mouse events, and so on...\nInitially, I would prefer handling these events outside the search component. But I'm happy to hear from you if you don't agree.\nI've created a code pen to illustrate how I would implement outside the search component, let me know what you think.\n. Another related question, are you waiting to add the enter listener to submit a request? If yes, is the search component inside a form? \n. Unfortunately not. That would be a great PR for the grommet docs site :)\n. I faced similar issues in the past with exact situations as you are describing. \nI agree with you that it is safe to have these properties as node, but it feels wrong to me.\nCan you use the intl context variable to translate your content?\nYou can find in here how I fixed the issues with FormattedMessage.\nI don't have a strong opinion about this, but I have an inclination to keep these properties as string.\n. thanks for your contribution!\n. Thanks for working on this!\n. thanks!\n. Good point.\nIf I were to implement this, I would add a prop data to LoginForm as in:\n<LoginForm\n  logo={<Logo />}\n  title=\"Product Name\"\n  secondaryText=\"Product Secondary Text\"\n  rememberMe={true}\n  forgotPassword={<a>...</a>}\n  onSubmit={...}\n  errors={[\"Invalid username or password.\"]}\n  data={{\n    username: 'eabay@grommet.io',\n    rememberMe: true\n  }}\n/>\nThen, inside LoginForm data property would be used as provided to pre-fill the form fields. Both of them would be optional.\nWhat about you? How would you implement this?\n@ericsoderberghp would love your insights here.\n. I've added a comment in https://github.com/grommet/grommet/issues/281 that I believe will address the default value issue.\nFor the read value, you could use the rememberMe property of LoginForm:\n``` javascript\n  ...\n  _onFormSubmit () {\n    if (this.props.rememberMe) {\n      ...\n    }\n  }\nrender () {\n    return (\n      \n    );\n  }\n```\nPlease let me know if I'm missing something...\n. Fully agree. Let me know if you want me to fix this, or if you are going to send a PR for that.\n. thanks\n. Agreed. Are you going to work on this or you want me to go ahead and change this?\n. Thanks for your contribution. I don't see any problems with your implementation, but before I accept this PR, I want to give another idea to get your opinion around it.\nWhat if we added a ref to the input element inside CheckBox.js? See here\njavascript\n  <input tabIndex=\"0\" ref=\"checkboxInput\" ... />\nThen inside LoginForm we would add something along these lines:\njavascript\n  _onSubmit  (event) {\n    event.preventDefault();\n    var username = this.refs.username.value.trim();\n    var password = this.refs.password.value.trim();\n    var rememberMe = this.refs.rememberMe.refs.checkboxInput.checked;\n    if (this.props.onSubmit) {\n      this.props.onSubmit({\n        username: username,\n        password: password,\n        rememberMe: rememberMe\n      });\n    },\n    ...\n    render () {\n      ...\n      <Checkbox ref=\"rememberMe\" ... />\n      ...\n    }\n  }\nThe downside here is that I feel we are exposing too much about Checkbox internals. The advantage is we don't have to deal with state changes and we keep a consistent implementation when comparing to username and password.\nI don't have a preference, either way is fine. I just want to make sure we brainstorm a little bit about these two solutions.\n:+1: \n. Hi @eabay sorry for the delay. Thanks for sharing this POC, it is a good starting point for a brainstorm :+1: \nI list here the challenges/concerns I have with this implementation:\n1) Add disabled feature. Optimally I would be looking for something along these lines:\nhtml\n<div class=\"slideTwo\">  \n  <input type=\"checkbox\" value=\"None\" id=\"slideTwo\" name=\"check\" checked disabled />\n  <label for=\"slideTwo\"></label>\n</div>\nI'm not very good with CSS but I could not grab the parent (parent selector is not supported in CSS). We could add a class to slideTwo and handle that, but I would prefer to keep disabled in the checkbox itself.\n2) The checkboxes are not accessible. I could not toggle the items using the keyboard. Also, I'm not able to think how we would solve that without using Javascript. I may be missing something here.\n3) There is a specific markup that is needed for checkbox + label, and we would need to expose that if we decide to go for a css-only approach. In Grommet we try not to expose styling selectors.\n@ericsoderberghp may have more concerns here. Please feel free to chime in.\n. Great, I was able to check/uncheck using the keyboard. \nIn Chrome, there was no clear indication of focus so I had to guess that the checkbox was actually the current element selected.\nIn Firefox the custom styling did not work at all. I wonder what is the browser support for this implementation.\nThis implementation does require some markup structure to handle labels, although it is much less intrusive than the other one. For example, we can't guarantee that the user will follow checkbox + label. This codepen implementation is flexible with respect to that, and I'm not sure if this is something we want to enable.\nAlso, I could not envision how we would support the toggle feature. This may apply to what you said that the implementation was not complete.\nLooking forward to your suggestions to enhance the CheckBox component. Based on our brainstorming, I believe it is a good idea to keep this component available.\n. Interesting approach. I did not know about setters and getters, is that only available in es6? just out of curiosity: do you know how this implementation would be in es5 ?\nRegarding the label, can you describe a scenario where you would have a checkbox without a label? I'm wondering if we should remove required from label if there is an existing scenario you think is useful.\n. Thanks for the great references @eabay!\nWell, I agree with all your points. We should remove label as a required prop. I think we can add a reverse={true} property that will flip the order and do label + checkbox. And use getter/setter.\nDo you want to do that in this PR? I believe it makes sense. Feel free to close this one if you prefer to have it in a separe PR. Also if you want me to work on some of these items lemme know.\nAs always, thanks for you continued engagement with Grommet.\n. Awesome. I've reviewed this PR an it looks mostly ok. I've added some minor feedbacks. \n. thanks for your contribution!\n. Thanks for your contribution!\n. In general, I really like this component. Definitely useful.\nI've tried locally and I found a small issue for mobile size\n\nMaybe we can apply different padding whenever size gets too small? I think both logo (content) and label has too much padding.\nSee distribution component for an example. \n. Thanks for your contribution. I will fix the minor padding issue with Briks in mobile soon.\n. This seems like a reasonable request. I will add that to our backlog of items.\nIn the meantime, feel free to send Pull Requests for this.\n. thanks!\n. Sorry to hear that @Waize. I tried looking here and I was able to find the user icon.\nAre you importing like this?\njavascript\nvar User = require('grommet/components/icons/base/User');\n//or var User = Grommet.Icons.Base.User\n<User />\n. Interesting. Let me check that real quick.\n. thanks @eabay.\nYeah, I can't seem to reproduce this. If you look in the stable branch you will see the icon is there.\nhttps://github.com/grommet/grommet/blob/stable/components/icons/base/User.js\n. Thanks for the extra info @Waize. Can you describe how you are using Grommet? Please specify your NPM and Node version.\nAlso, looking at your path I see a temp folder with a package.tar. Can you describe your installation process?\n. I know that it is probably unrelated, but can you try running npm install grommet -g and check if the icon is present in your global installation ?\n. I can't reproduce this issue. Did you run npm cache clean ?\nCan you try to update your Node to 5.1 ?\n. Yeah, by downloading this tgz i was able to see that some icons are actually missing. \nWe are not creating this compressed file, I wonder if this could be a bug in NPM.\nI will try and investigate this. In the meantime you can use grommet stable which is very close to 0.5.1. \nIn your package.json change grommet version to the following:\njson\n{\n  ...\n  dependencies: {\n    \"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\n  }\n}\n. Hi @Waize can you try this again with Grommet 0.5.3? I've updated NPM and Node and released a new version of Grommet. It seems now that all icons are present inside the compressed file.\n. Thanks for your contribution. we can review the hover styling in the future.\n. sorting is not supported at this point. PR welcome!\n. Thanks for your PR, I believe there is something missing here. It is not just a matter of changing the week days ordering. We need to change the dates to match the new layout as well.\nAlso, can we consider sending only the start day, instead of the entire array? For example, the default start would be Sun, and if you want something different you would send only 'Mon'.\n. Thanks for reporting this. I tried the sample app without adding the presets and worked normally. But you are not the first one to report this very same issue. Maybe I had the presets in the global context.\nSorry you had to face this issue. I will add the presets and plugin to the init commands.\n. thanks @eabay !\n. hi @jaitthomas I believe it is better to handle this scenario using react state. Check out this code pen: http://codepen.io/alansouzati/pen/KVQomV?editors=0010.\n```\nvar App = React.createClass({\n  getInitialState: function () {\n    return {\n      test: ''\n    }\n  },\n_onTestChange: function (event) {\n    this.setState({test: event.target.value});\n  },\nrender: function() {\n    return (\n      \n\n\nFirst Tab\n\n\n\nSecond Tab\nContents of the second tab\n\n\nThird Tab\nContents of the third tab\n\n\n\n    );\n  }\n});\nvar element = document.getElementById('content');\nReactDOM.render(React.createElement(App), element);\n```\nIn this case the input test will retain value because we are using react state.\n. Thanks, this is awesome!\n. Interesting concept. Thanks for checking this. I see a lot of components in Grommet that are a map of its props, so yes I like the idea of converting possible candidates (Anchor, Button, Form ...) to stateless components.\n. Fixed in https://github.com/grommet/grommet/pull/364\n. Thanks, really cool stuff! This is now in my checklist for my next components.\n. In general we don't enable custom styling. Instead we provide normalized sizes (small, large). The smallest size we enable for icons is 24px. I'm wondering if we should add small(12px), medium (24px), large(48px). Can you share the environment where you want to render a 12px icon? \n. I agree we should support a smaller icon version. I will add that to our backlog, PR gladly appreciated :+1: \nIn the meantime you can use Sass and override the icon size.\n.control-icon {\n  width: 12px;\n  height: 12px;\n}\n. Thanks @kylebyerly-hp for great explanation.\n@rothskeller I would take a look in any eslint dependency you have with ^ or ~ and remove it as you don't want to keep updating your dependencies.\nI would replace \"gulp-eslint\": \"^1.0.0\",  with \"gulp-eslint\": \"1.0.0\",. In this case version 1.1.0 may add/remove roles and it is considered a minor change. There are more eslint dependencies in your package.json, so I would follow the same principle.\n. Thanks for your contribution @primozs! As we have different react router versions for different users can we use oneOfType instead?\nrouter: React.PropTypes.oneOfType([\n    React.PropTypes.func,\n    React.PropTypes.object\n  ])\n. I agree with @ericsoderberghp, PropTypes.any seems a more permanent fix for this. Would you mind changing it again to his proposed solution? Don't worry about the failing scenario in the code coverage.\n. Thanks for your contribution@\n. Nice, thanks for sorting the proptypes as well.\n. If you look in here http://www.grommet.io/docs/hpe/develop/anchor. The stateless functions have issues with minification and the displayName.\nI added a displayName in the meantime for the existing components I've merged. Can you add that to the existing pull requests ?\nI think it is possible to write a babel plugin that will add that automatically. I will work on that.\nSee this commit: https://github.com/grommet/grommet/commit/fcc4108d5631baf231231080182f2bf0d24de02d\n. \n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks.\n. Thanks!\n. Thanks!\n. Sorry we took some time to review this and got conflict. I went ahead and converted myself the Label component. \nhttps://github.com/grommet/grommet/commit/95de9e0dac39cc38ff4c55c9d18a9332ac4094b1\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. We will do this after 2.0 we will close it for now and reopen when the time comes.. Thanks for the feedback.\nThis is a behavior added only to the docs site: https://github.com/grommet/grommet-docs/blob/master/src/docs/components/CalendarDoc.js#L16\nIf you have your Calendar instance the date will only be set when you select it.\n. Take a look on the flex option in here: http://www.grommet.io/docs/hpe/develop/split\nYou need to specify that your flexible container is the one on the right. By default, the split uses flex both.\n<Split flex=\"right\"></Split>\nI've created a codepen to illustrate your scenario. http://codepen.io/alansouzati/pen/KVxMEJ?editors=0010\n. Currently this is not supported. PR gladly welcome. This should not be difficult to implement.\n. var Spinning = require('grommet/components/icons/Spinning');\nYou can see it live here: http://www.grommet.io/docs/hpe/design/basics#icons\n. Thanks for your contribution. \nI was looking into your PR and I faced issues when rendering Charts without legends. I believe this line is causing the issue:\njavascript\nthis.props.legend.hoverOnly\nAs legend is not always there it fails here.\nIn general, I think we can fix without the need for hoverOnly. If you look in here: \nhttps://github.com/grommet/grommet/blob/master/src/js/components/Chart.js#L312\nYou can see that we will always set the defaultXIndex to 0 if this.props.series is present. As we always have series for Chart, defaultXIndex is 0, instead of -1. The only case defaultXIndex is -1 is the loading scenario for Charts.\nSo, I propose we remove this block if we want the default index to be -1. There are some other places in this code that we will need to change to support defaultXIndex as -1.\n@ericsoderberghp \n. thanks for your feedbacks, I've fixed the PR.\n. it is a long time since we dont face problems with that anymore. i believe this task is not needed anymore. right now this is not possible. there are issues with the sass-lint (node only tool).\nSee here: https://github.com/tonyganch/gonzales-pe/issues/115\nAnd here: https://github.com/sasstools/sass-lint/issues/222\n. I dont think there is anyone working on that at this point. It would be awesome if you can send a PR for that.. Thanks for your contribution I believe we can maintain the structure as it is options.testPaths. I like your proposal of adding a  customBabelConfig prop, but I believe it should not be restricted to the test environment. \nI don't think we need globPath and pathToBabelRc\n. Thanks for reporting this issue @DeanKooiman ! I have it in my short list of things to fix. I will keep you posted.\n. Yeah, I'm afraid this is not an issue with Grommet. Just make sure to add the proper contextTypes for React Router. I guess in 1.x they had it as a func and now for React Router 2.x it is an object.\nThanks for the help @myk5000.\nPlease feel free to re-open the issue if you think this is still a problem with Grommet core. \n. Thanks for your investigation.\nWe are using react-intl for localization support. behind the scenes they use Intl api, so that's good news.\nWe need a date library to handle data formatting in input fields, and easy time conversion (string -> date and vice versa).\nWe are using moment.js for that but it is quite big. We are evaluating the use of fecha instead.\nhttps://github.com/taylorhakes/fecha\n. We are still in the process of fixing few things before releasing grommet 0.5.4. I'm hoping we will be able to release next Tuesday. In the meantime we can use the stable branch, in your package.json add that:\n\"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\nSorry for taking such a long time between releases we understand that this could be very annoying. \n. Thanks for the feedbacks I've updated the PR :+1: \n. Yeah, I'm sorry this is a bug I must fix.\nLet me work on that today.\n. Fixed by https://github.com/grommet/grommet/commit/0d4d1b89446cf621b110079aec97603552d2acc6\n. This is supported with the new charts. Closing the PR. Thanks for your contribution!\n. Thanks for reporting this. We currently don't have a Breadcrumb in the develop side of things.\nPR gladly welcome.\n. I'm sorry for using terms without explaining them first.\nPR stands for Pull Request. It is the Github term for sending contributions over. As we don't have the implementation of this component in our upcoming tasks we are counting on the community support to implement this component. You or anyone in need for this component can go ahead and try it out. It should not be difficult to get it done.\nThere is a video that explains how to contribute to Grommet: https://vimeo.com/129681048.\nAlso you can see our backlog of items here: https://waffle.io/grommet/grommet.\nThat's the beauty of open source. If you or anyone needs a feature/component in a given timeframe, then it is a great candidate for a Pull Request. Our team can help to review your code if needed.\n. I've just tested it, I agree with adding display: none. Do you want me to go ahead and implement this, or are you going to send a PR ?\n. Have you considered using a Flux architecture for your data fetching layer?\nThere are handful options that implements that, Grommet as of this moment is using Redux: http://redux.js.org/index.html\nThere are few open-source source apps done on top of Grommet using Redux. Take a look at http://ferret.grommet.io.\nSource code is available here: https://github.com/grommet/grommet-ferret\n. I see, you can keep your form data in your React state for your given component. You still face the same issue when you keep your form data in a state?\n. Actually this is an interesting issue... \nhttps://jsfiddle.net/alansouzati/1kph3mLv/2/\nI did a change by moving the sub up on level, but I guess this is not the real fix for the problem\n. yeah yeah, thanks for chiming in.\n. good news I think i fixed the issue, it was just a matter of removing props.children from within the if clause.\nhttps://jsfiddle.net/alansouzati/1kph3mLv/3/\nWould any of you be kind enough to submit a PR to fix that in Grommet :smile: \n@linde12 up to your first PR?\n. thanks!\n. Hi @primozs thanks for your contribution.\n@zalmoxisus thanks for chiming in, good to see community engaging :clap: \nWell, currently there is not even a single component in Grommet exposing style. There are some architectural concerns that justifies that:\n1. If we add inline styles how can you make that themeable?\n2. We follow the BEM (Block-Element-Modifier) architecture for manipulating styling for our components. Inline-styles is an anti-pattern for that rule.\nAlthough, there are few scenarios where having a style is needed. For example, when you want to animate your elements using react-motion.\nIn this case we recommend to add a wrapping div to the Grommet component you want to animate.\njavascript\n<Box>\n  <Motion defaultStyle={{x: 20}} style={{x: spring(0)}}>\n      {({x}) =>\n        <div className={`${CLASS_ROOT}__animation-container`} style={{\n          WebkitTransform: `translate3d(${x}%, 0, 0)`,\n          transform: `translate3d(${x}%, 0, 0)`\n          }}>\n            <Box ...>\n         </div>\n      }\n  </Motion>\n</Box>\nYou can see all the styling specific to the animation container is in a class (${CLASS_ROOT}__animation-container) so that we can theme it. Only the transform animation is part of the style tag.\nHopefully it makes sense for you as well...\n. Hi folks, good conversion going on.\nI like the idea of transferring props over and do that for the entire grommet component codebase, not only for the Box component.\nThanks for sharing your experiences :smile: \n. I guess the only thing missing here is the Props.pick logic as @primozs pointed out.\n. hi @ericsoderberghp \nThe way react motion animates is by using styles:\n<Box>\n  <Motion defaultStyle={{x: 20}} style={{x: spring(0)}}>\n      {({x}) =>\n        <div className={`${CLASS_ROOT}__animation-container`} style={{\n          WebkitTransform: `translate3d(${x}%, 0, 0)`,\n          transform: `translate3d(${x}%, 0, 0)`\n          }}>\n            <Box ...>\n         </div>\n      }\n  </Motion>\n</Box>\nIt would be great to have React Motion animate a box without the need of a wrapping div.\n. thanks for your contribution\n. It seems you are ina proxied network. Do you have your proxy settings configured with NPM?\nAlan\n\nOn Mar 25, 2016, at 4:26 AM, Chuck Ge notifications@github.com wrote:\nI am trying to install grommet via NPM but just failed with following error message.\nI couldn't figure out what the problem is...\nnpm WARN deprecated npmconf@2.1.2: this package has been reintegrated into npm and is now out of date with respect to npm\nnpm WARN deprecated graceful-fs@3.0.8: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.\nnpm WARN optional dep failed, continuing fsevents@1.0.9\nnpm WARN deprecated lodash@1.2.1: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0.\nnpm WARN deprecated graceful-fs@2.0.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.\nnpm WARN deprecated lodash@1.0.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0.\nnpm WARN optional dep failed, continuing fsevents@1.0.9\nnpm WARN deprecated graceful-fs@1.2.3: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.\nspawn-sync@1.0.15 postinstall C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\cross-spawn\\node_modules\\spawn-sync\nnode postinstall\nnode-sass@3.4.2 install C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\nnode scripts/install.js\nCannot download \"https://github.com/sass/node-sass/releases/download/v3.4.2/win32-x64-46_binding.node\":\ntunneling socket could not be established, cause=write EPROTO 101057795:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:openssl\\ssl\\s23_clnt.c:794:\nHint: If github.com is not accessible in your location\ntry setting a proxy via HTTP_PROXY, e.g.\nexport HTTP_PROXY=http://example.com:1234\nor configure npm proxy via\nnpm config set proxy http://example.com:8080\nnode-sass@3.4.2 postinstall C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\nnode scripts/build.js\nBuilding: C:\\Program Files (x86)\\nodejs\\node.exe C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\bin\\node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsass_library=\ngyp info it worked if it ends with ok\ngyp verb cli [ 'C:\\Program Files (x86)\\nodejs\\node.exe',\ngyp verb cli 'C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\bin\\node-gyp.js',\ngyp verb cli 'rebuild',\ngyp verb cli '--verbose',\ngyp verb cli '--libsass_ext=',\ngyp verb cli '--libsass_cflags=',\ngyp verb cli '--libsass_ldflags=',\ngyp verb cli '--libsass_library=' ]\ngyp info using node-gyp@3.3.1\ngyp info using node@4.4.0 | win32 | x64\ngyp verb command rebuild []\ngyp verb command clean []\ngyp verb clean removing \"build\" directory\ngyp verb command configure []\ngyp verb check python checking for Python executable \"python2\" in the PATH\ngyp verb which failed Error: not found: python2\ngyp verb which failed at F (C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\node_modules\\which\\which.js:63:19)\ngyp verb which failed at E (C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\node_modules\\which\\which.js:72:29)\ngyp verb which failed at C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\node_modules\\which\\which.js:81:16\ngyp verb which failed at C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\node_modules\\which\\node_modules\\isexe\\index.js:44:5\ngyp verb which failed at C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\node_modules\\which\\node_modules\\isexe\\windows.js:29:5\ngyp verb which failed at FSReqWrap.oncomplete (fs.js:82:15)\ngyp verb which failed python2 [Error: not found: python2]\ngyp verb check python checking for Python executable \"python\" in the PATH\ngyp verb which succeeded python C:\\Python27\\python.EXE\ngyp verb check python version C:\\Python27\\python.EXE -c \"import platform; print(platform.python_version());\" returned: \"2.7.10\\r\\n\"\ngyp verb get node dir no --target version specified, falling back to host node version: 4.4.0\ngyp verb command install [ '4.4.0' ]\ngyp verb install input version string \"4.4.0\"\ngyp verb install installing version: 4.4.0\ngyp verb install --ensure was passed, so won't reinstall if already installed\ngyp verb install version is already installed, need to check \"installVersion\"\ngyp verb got \"installVersion\" 9\ngyp verb needs \"installVersion\" 9\ngyp verb install version is good\ngyp verb get node dir target node version installed: 4.4.0\ngyp verb build dir attempting to create \"build\" dir: C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\ngyp verb build dir \"build\" dir needed to be created? C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\ngyp verb build/config.gypi creating config file\ngyp verb build/config.gypi writing out config file: C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\config.gypi\ngyp verb config.gypi checking for gypi file: C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\config.gypi\ngyp verb common.gypi checking for gypi file: C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\common.gypi\ngyp verb gyp gyp format was not specified; forcing \"msvs\"\ngyp info spawn C:\\Python27\\python.EXE\ngyp info spawn args [ 'C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\gyp\\gyp_main.py',\ngyp info spawn args 'binding.gyp',\ngyp info spawn args '-f',\ngyp info spawn args 'msvs',\ngyp info spawn args '-G',\ngyp info spawn args 'msvs_version=auto',\ngyp info spawn args '-I',\ngyp info spawn args 'C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\config.gypi',\ngyp info spawn args '-I',\ngyp info spawn args 'C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\addon.gypi',\ngyp info spawn args '-I',\ngyp info spawn args 'C:\\Users\\ssge.node-gyp\\4.4.0\\include\\node\\common.gypi',\ngyp info spawn args '-Dlibrary=shared_library',\ngyp info spawn args '-Dvisibility=default',\ngyp info spawn args '-Dnode_root_dir=C:\\Users\\ssge.node-gyp\\4.4.0',\ngyp info spawn args '-Dnode_gyp_dir=C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp',\ngyp info spawn args '-Dnode_lib_file=node.lib',\ngyp info spawn args '-Dmodule_root_dir=C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass',\ngyp info spawn args '--depth=.',\ngyp info spawn args '--no-parallel',\ngyp info spawn args '--generator-output',\ngyp info spawn args 'C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build',\ngyp info spawn args '-Goutput_dir=.' ]\ngyp verb command build []\ngyp verb build type Release\ngyp verb architecture x64\ngyp verb node dev dir C:\\Users\\ssge.node-gyp\\4.4.0\ngyp verb found first Solution file build/binding.sln\ngyp verb could not find \"msbuild.exe\" in PATH - finding location in registry\ngyp verb \"Release\" dir needed to be created? null\ngyp verb copying \"node.lib\" for x64 C:\\Users\\ssge.node-gyp\\4.4.0\\Release\\node.lib\ngyp info spawn C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe\ngyp info spawn args [ 'build/binding.sln',\ngyp info spawn args '/nologo',\ngyp info spawn args '/p:Configuration=Release;Platform=x64' ]\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nBuild started 2016/3/25 17:08:34.\nProject \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.sln\" on node 1 (default targets).\nValidateSolutionConfiguration:\nBuilding solution configuration \"Release|x64\".\nThe target \"Midl\" listed in a BeforeTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\BuildCustomizations\\masm.targets (28,5)\" does not exist in the project, and will be ignored.\nThe target \"CustomBuild\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\BuildCustomizations\\masm.targets (29,5)\" does not exist in the project, and will be ignored.\nProject \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.sln\" (1) is building \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.vcxproj.metaproj\" (2) on node 1 (default targ\nets).\nProject \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.vcxproj.metaproj\" (2) is building \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\src\\libsass.vcxproj\" (3) on node 1 (defa\nult targets).\nC:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\Microsoft.Cpp.InvalidPlatform.Targets(23,7): error MSB8007: The Platform for project 'libsass.vcxproj' is invalid. Platform='x64'. You may be seeing this message because you are trying to build a project witho\nut a solution file, and have specified a non-default Platform that doesn't exist for this project. [C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\src\\libsass.vcxproj]\nDone Building Project \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\src\\libsass.vcxproj\" (default targets) -- FAILED.\nDone Building Project \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.vcxproj.metaproj\" (default targets) -- FAILED.\nDone Building Project \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.sln\" (default targets) -- FAILED.\nBuild FAILED.\n\"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.sln\" (default target) (1) ->\n\"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\binding.vcxproj.metaproj\" (default target) (2) ->\n\"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\src\\libsass.vcxproj\" (default target) (3) ->\n(InvalidPlatformError target) -> \nC:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\Microsoft.Cpp.InvalidPlatform.Targets(23,7): error MSB8007: The Platform for project 'libsass.vcxproj' is invalid. Platform='x64'. You may be seeing this message because you are trying to build a project wit\nhout a solution file, and have specified a non-default Platform that doesn't exist for this project. [C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\build\\src\\libsass.vcxproj]\n0 Warning(s)\n1 Error(s)\nTime Elapsed 00:00:00.13\ngyp ERR! build error\ngyp ERR! stack Error: C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe failed with exit code: 1\ngyp ERR! stack at ChildProcess.onExit (C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\lib\\build.js:276:23)\ngyp ERR! stack at emitTwo (events.js:87:13)\ngyp ERR! stack at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Windows_NT 6.1.7601\ngyp ERR! command \"C:\\Program Files (x86)\\nodejs\\node.exe\" \"C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\" \"--verbose\" \"--libsass_ext=\" \"--libsass_cflags=\" \"--libsass\n_ldflags=\" \"--libsass_library=\"\ngyp ERR! cwd C:\\Users\\ssge\\AppData\\Roaming\\npm\\node_modules\\grommet\\node_modules\\node-sass\ngyp ERR! node -v v4.4.0\ngyp ERR! node-gyp -v v3.3.1\ngyp ERR! not ok\nBuild failed\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\Program Files (x86)\\nodejs\\node.exe\" \"C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"grommet\" \"-g\"\nnpm ERR! node v4.4.0\nnpm ERR! npm v2.14.20\nnpm ERR! code ELIFECYCLE\nnpm ERR! node-sass@3.4.2 postinstall: node scripts/build.js\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the node-sass@3.4.2 postinstall script 'node scripts/build.js'.\nnpm ERR! This is most likely a problem with the node-sass package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR! node scripts/build.js\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR! npm bugs node-sass\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!\nnpm ERR! npm owner ls node-sass\nnpm ERR! There is likely additional logging output above.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Thanks for reporting this, actually in the docs it seems we don't have the import commands, are you trying like this:\n\nvar Spinning = require('grommet/components/icons/Spinning')\nor \nimport Spinning from 'grommet/components/icons/Spinning';\nI'm to update the docs page to include these commands.\n. The docs website has been updated with the import command :)\nhttp://www.grommet.io/docs/develop/spinning\nI believe we can close this issue, feel free to re-open if you are still facing problems!\n. Thanks fixed in https://github.com/grommet/grommet-docs/commit/6e50f3ade5aecba972c3def60b000442757a6589\n. Good idea, let's target the props transfer to be consistent with the Box implementation :+1: \n. Fixed.\n. @dakt let me work on a codepen to test this out again.. oh for the checkbox I believe you need to listen for the onChange, right?. it is just like another form input i believe.. Thanks for pointing this out. Fixed by https://github.com/grommet/grommet/commit/4713f1873634411ec2875f4942c3d0ec9ebe3c81\n. Hey @jwijay good start. I've added few comments. just make sure you are using ES6 const wherever you can. If it is not possible to use const please use let instead of var\n. thank you @jwijay, great job.\n. thanks\n. good catch. I've created a codepen to illustrate the issue:\nhttp://codepen.io/grommet/pen/VaMwdy\n. Fixed in https://github.com/grommet/grommet/commit/c36f549b7f924a4304b1d160dfc70a7624333ee9\nI'm really sorry about the long wait. We are getting busier and busier and we are counting on the community to send PRs for fixes like this. Thank you for investigating it further, I've basically applied your suggestion to actually fix the issue. So I would say you actually fixed this one. \u270c\ufe0f \n. Thanks for the kind words @JasonWeise.\nFor now we don't have the Time Picker in the develop side of things, sorry about that.\nI've created a codepen recently that should help in the meantime: http://codepen.io/alansouzati/pen/YqpKmK\n. great @ericsoderberghp looking forward to see that :+1: \n. yeah we should, can you confirm your NPM and Node versions?\nI'm assuming you have NPM < 3 where the dependencies are nested. \nStarting from NPM 3+ dependencies are flat, so you will not face this issue.\nThere are other reasons that are leading us to update our supported NPM + Node distributions.\nIn the meantime, I agree with you that Grommet should add both babel-preset-es2015 and babel-preset-react to the package.json of the init app.\nThanks for your feedback :+1: \n. perfect, thanks and welcome to the top-notch list of Grommet contributors :clap: \n:neckbeard: \n. maybe this is outdated. @Waize can you confirm that you are still experiencing this issue in the latest grommet?\n. Please use separator where you want to break.\nSee one possible way to do this:\nhttp://codepen.io/alansouzati/pen/vKxPmK?editors=0010\n. good catch @primozs. In fact index-icons is not a left-over. it should be there. I'm going to investigate why it is not present in grommet stable. \n. almost fixed. i had to fix manually. im still investigating why the CI is ignoring this file.\n. stable branch does not have the git ignore.\nbasically index-icons should be present in stable branch, but ignored from master branch as it is an automatically generated file.\ngulp generate-index-icons is the task responsible for creating this file.\n. I fixed the ci issue, for local build gulp dist should be enough. In the ci system the process is a little different. Thanks for helping!\n. Agreed we need to review this. I will talk to @L0ZZI. I assume this is the same problem we have today in the home page for both blog versions right?\n. This is the expected behavior. Just to clarify, what are you expecting by running gulp dev in grommet core?\n\nOn Apr 15, 2016, at 1:51 PM, karatechops notifications@github.com wrote:\nThe default \"gulp dev\" task in gulpfile.babel.js is blocking the groomet-toolbox \"gulp dev\" task.\ngulp.task('dev', () =>\n  console.error(\n    'Running \"gulp dev\" at Grommet root folder is not supported. If you want to start the website, run \"gulp dev\" at docs folder'\n  )\n);\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. correct, we need to update the message. Can you craft a Pull Request to update the console message properly?\n\nThe grommet website has been moved to a separate repo:\nhttps://github.com/grommet/grommet-docs\nTo test grommet components I usually use the website, so I'm glad you are going in the same direction.\nIf you clone grommet-docs at the same workspace as you have grommet, as in:\n/grommet-workspace\n    - /grommet\n    - /grommet-docs\nInside grommet-docs you can run gulp dev --useAlias. This command will start the website pointing to your grommet core instead of using the one from node_modules.\nHopefully this helps, the configuration to make this work is in here:\nhttps://github.com/grommet/grommet-docs/blob/master/grommet-toolbox.config.js#L58\nand here\nhttps://github.com/grommet/grommet-docs/blob/master/gulpfile.babel.js#L35\n. Yeah I can experience the issue with hot reloading as well.\n. Hi @kentsalcedo thanks for you contribution, but can you make sure your Pull Request has one commit only? I'm trying to get the grommet commit history to be as clean as possible. So, if the PR is only changing one thing, the idea is to have one commit only.\nSee this video if you need help using the git squash command: https://vimeo.com/129681048\n. I think this ruby package is only helper methods. We need to install ruby natively in our OS right?\nI try to describe how to install grommet here: https://github.com/grommet/grommet/wiki/Building-Grommet\n. Yup, i believe it makes sense. \nIt would also be a good opportunity for you to apply the git squash and make sure your PR has only one commit.\n. Thanks for your contribution, but have you consider doing the following?\n`` javascript\n  let postRest = Rest.post(/api/post/`)\n      .field('title', post.title)\n      .field('author', post.author)\n      .field('tags', post.tags || '')\n      .field('content', post.content);\n  if (post.images) {\n    post.images.forEach((image) => {\n      if (image.cover) {\n        postRest.field('cover', image.name);\n      }\n      postRest.attach(image.name, image.file, image.name);\n    });\n  }\n\n  postRest.end((err, res) => {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(res.body);\n    }\n  });\n\n```\nSee this for an example of sending multi-part data to a post request:\nhttps://github.com/grommet/grommet-blog/blob/master/src/js/store.js#L70\n. I like the idea of supporting this directly in grommet. but I have concerns with being opinionated about the data structure that must be sent. In your PR, data now needs to be in a specific format correct?\njavascript\n   Object.keys(data.fields).map(function(key) {\n      op.field(key, data.fields[key]);\n   });\n   Object.keys(data.formfiles).map(function(formfile) {\n     op.attach(formfile, data.fields[formfile]);\n   });\nyou are expecting data.fields and data.formfiles to be present.\nI would not expect that restriction for such a high level utils component.\n. So, in this new version you don't handle attaching files do you?\nI believe this second version is better than the first one, but still assumes that every key inside your data will be used as a form data field, which is not always true. Let's take the following example:\n`` javascript\nlet postRest = Rest.post(/api/post/`)\n      .field('title', post.title)\n      .field('author', post.author)\n      .field('tags', post.tags || '')\n      .field('content', post.content);\n  if (post.images) {\n    post.images.forEach((image) => {\n      if (image.cover) {\n        postRest.field('cover', image.name);\n      }\n      postRest.attach(image.name, image.file, image.name);\n    });\n  }\n\n  postRest.end((err, res) => {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(res.body);\n    }\n  });\n\n```\nThe post object is like this:\njson\n{\n  \"title\": \"simula67 is a great guy\",\n  \"author\": \"Joji Antony\",\n  \"images\": [\n    {\n      \"cover\": true,\n      \"name\": \"joji_avatar\",\n      \"file\": ...\n    }\n  ]\n}\nI believe images key will fail in your existing pull request.\n. thanks and welcome to the grommet contributors list \ud83d\udc4f \n. there is an issue in the CI\ngrommet-core/_objects.menu.scss:151 [W] TrailingWhitespace: Line contains trailing whitespace\n. this has been fixed in a separate pr\n. hey @DerekAhn can you evaluate this PR now? i was able to simplify the process to manage focus without the need to process tabs manually.\nBasically, I'm disabling the focusable elements that are children of a hidden section.\n. Thanks for your question. The MIT licenses inside the minified js are coming from the libraries we use.\nGrommet license is Apache 2 and I believe we don't add the license inside the minified js.\nPlease let me know if my understanding in wrong.\n. That's weird because I'm translating the keys here:\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Layer.js#L107\nas in:\nlet closeLabel = Intl.getMessage(this.context.intl, 'Close');\n      let layerLabel = Intl.getMessage(this.context.intl, 'Layer');\n      let a11yTitle =\n        `${closeLabel} ${this.props.a11yTitle || ''} ${layerLabel}`;\nFirst I translate close, then layer, then I join that using string templates.\nIf we look at the Grommet keys entry, we have a locale for both Close and Layer.\nThere is a problem with a double space though \"Close  Layer\", which is unrelated to this issue, we need to fix that \ud83d\ude04 \nIs it possible that you are using an old version of Grommet icon loader? In the past we used to translate the keys again when you send a11yTitle to an icon, but I don't think it is there anymore:\nhttps://github.com/grommet/grommet/blob/stable/components/icons/base/Close.js#L59\nLet me know if you need help investigating this and thanks for your contribution\n. thanks for finding the root cause of the issue\n. I'm working this week to update all the grommet dependencies, including evaluating React v15.\nFrom what I saw no major change will be required, but @antoligy is right, the only reason we haven't migrated yet is stablity \ud83d\udc4d \n. Thanks for reporting this, fixed in https://github.com/grommet/grommet/commit/472a0edd63019b43b22c35691578cff3f40952dd\n. can you confirm your node + npm version?\n. If the page does not have a scroll the pagination is not showing at all. Is this the expected behavior? I believe this is caused by the atBottom state.\nIn mobile works ok because it is really likely to have a scroll in the browser. But for desktop it is weird.\n. For now we will remain with SASS+BEM methodology. \nPlease save some time to read my journey when investigating CSS in Javascript, including CSS modules.\nhttps://blog.grommet.io/post/2016/08/10/css-in-js-may-not-be-the-solution-to-all-your-problems\n. Thanks for reporting this, we are investigating this now. I've just tested 0.6.2 and it has all the icons in the base folder. 0.6.4 has missing icons.\n. Grommet 0.6.5 has been released and has all the icons. sorry about that.\n. thanks @coltonw. This is exactly what we are doing in some apps we are developing.\nI believe this should live outside Grommet core. As it deals with react-router and redux. In my case the push function is coming from History api.\n. this.context.router.push(this.props.path); should do the trick.\nHere is how we use Grommet Anchor with react-router:\n```\n// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP\nimport React, { Component, PropTypes } from 'react';\nimport Anchor from 'grommet/components/Anchor';\n/\n This component is used to augment Grommet anchor\n with routing/history capabilities\n*/\nexport default class NavAnchor extends Component {\nconstructor () {\n    super();\n    this._onClick = this._onClick.bind(this);\n  }\n_onClick (event) {\n    event.preventDefault();\n    this.context.router.push(this.props.path);\n    if (this.props.onClick) {\n      this.props.onClick();\n    }\n  }\nrender () {\n    const { path } = this.props;\n    const { router } = this.context;\n    let className = this.props.className || '';\n    if (router.isActive(path)) {\n      className += ' active';\n    }\n    let href = router.createPath(path);\n    return (\n      \n    );\n  }\n};\nNavAnchor.propTypes = {\n  ...Anchor.propTypes,\n  onClick: PropTypes.func,\n  path: PropTypes.string.isRequired\n};\nNavAnchor.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n```\nUsage\n<NavAnchor path=\"/docs/accordion\">Accordion</NavAnchor>\n. I believe this is related to the PR you sent, right @bjackson ?\nI added a few comments there.. https://github.com/grommet/grommet/pull/1108. Thanks!\n. I've added indexLink support as part of this commit:\nhttps://github.com/grommet/grommet/commit/06adf025de881686d08ab1dabf1398f40ca0c912\nusage:\n<Anchor primary={props.primary} path={{ path: props.to, index: true }}/>. I would defer this to @ericsoderberghp. I thought this issue was to prevent dark background colors to affect the icon color. See this is codepen as an example:\nhttp://codepen.io/alansouzati/pen/regLqJ?editors=0010\nAs you can see the close icon seems to be in the proper place, but the color is hard to detect.\n@L0ZZI any inputs here?\n. If this PR is only to add padding, any reason why it is 24px? It seems quite a lot to me.\n. let me talk with @L0ZZI \n. thanks Jackie, can you do this change also in toolbox? \nhttps://github.com/grommet/grommet-toolbox/blob/master/.eslintrc\n. Thanks for your contribution\n. I like having this as a configurable option. How about naming it closeOnClick which defaults to true?\nWe are evaluating the possibility to deprecate the close attributes, so it would be the caller's responsibility to decide when to close the layer. What are your thoughts on that?\nIf you look the layer code in here: https://github.com/grommet/grommet/blob/master/src/js/components/Layer.js#L73\nall we are doing is to invoke the onClose callback anyways. Probably you are changing the state to actually close the modal.\nIt is going to be a little more work on the callers side, but at least will avoid problems like this one:\nhttp://codepen.io/alansouzati/pen/regLqJ\nIf you check the codepen, you will see a colored box inside that Layer that affects the color contrast in the close icon in a non-accessible way. It is really hard to fix this issue, as we don't know what is inside a given layer. If the caller controls the close icon, than you can make sure the icon color will match the background color inside your layer.\n. agreed :)\nfor now, until we figure out if we will deprecate close options or not, i will add the closeOnClick feature. \ud83d\udc4d \n. Sorry but react-select is not accessible. Accessibility is a big feature in grommet and we try to be opinionated about this. Take a look in this issue: https://github.com/JedWatson/react-select/issues/353.\nI say the same for drag and drop.\nOur main philosophy is to be your one-stop-shop for UI development if you follow our guidelines and components. If we don't support something, we would rather have it natively available than you having to integrate something that does not match with our UX framework.\nPlease keep in mind that Grommet is not only a ReactJS library, but a UX framework. This means that some features/components will not be available if it does not meet our UX guidelines.\n. you bet, looking forward to your contributions \ud83d\udc4f \n. Thanks for your contribution\n. Thanks for your contribution and welcome to our team \ud83d\udc4f \n. beautiful, thanks for your contribution \ud83d\udc4f \n. thanks @kentsalcedo \n. Thanks jackie\n. Done in https://github.com/grommet/grommet/commit/2584d74fec1c74d6a26ea42f60a901dbf074dfab\n. Thanks for your feedback, this is terrible. I know how much --help is important in any CLI tool. \nWe are in the process of creating grommet-cli as a separate project that you would install globally, instead of using grommet core for that. \nRight now, the init is as simple as a sample app, we are planning to enhance the CLI with other apps that are currently available in the Grommet showcase, but not as configurable as one would expect.\nI'm sorry you are facing this issue and I will take that into account when designing/developing the new CLI tool.\n. This is a known issue with react-hot-loader and ES6 classes. See this issue in grommet-toolbox\nhttps://github.com/grommet/grommet-toolbox/issues/3\n. Fixed in grommet-toolbox\n. Thanks for your question, please see the license file in the font folder.\nhttps://github.com/grommet/grommet/blob/master/src/scss/hpe/font/LICENSE.txt\n. thanks for debugging this further. this information helps when we try and implement a fix for it. i will try and take a look on this soon.\n. Fixed in https://github.com/grommet/grommet/commit/90b80263d35fc11112d776706cb17689f1b71bb2\n. selectedItem is am optionally number where the index is the currently selected item (default is 0). you control the changes on this property.\nUsually you have a state where you can control the activeIndex that starts with 0.\n``` javascript\nexport default class Test extends Component  {\n  constructor () {\n    super();\n    this.state = {\n      activeIndex: 0\n    };\n  }\nrender () {\n    return (\n      \n        {versionList}\n      \n    );\n  }\n```\nI'm not sure which logic you have to increment/decrement the active index for the list.\nLet me know if there is anything else we can help with.\n. thanks\n. Fixed in https://github.com/grommet/grommet/commit/b44296545c4e3e98a739367fad4a97ce79fc62d1\n. Thanks for your contribution, and welcome to the list of great grommet contributors \ud83d\udc4d \n. Could you please create an issue @do-n-khanh please create a codepen to demonstrate your issue.\n. I see React boilerplate uses css-modules. For now we will remain with SASS+BEM methodology.\nPlease save some time to read my journey when investigating CSS in Javascript, including CSS modules.\nhttps://blog.grommet.io/post/2016/08/10/css-in-js-may-not-be-the-solution-to-all-your-problems.\nIf you are interested to understand what is the minium set of tools required for grommet to work, please check the grommet-standalone project: https://github.com/grommet/grommet-standalone\n. is there anything in the browser console?\nAlso, when you run gulp dist, are there any issues in the command line?\n. Are you trying to open the index.html in the browser, or are you running with an application server?\nIf you app has routing, it may want to add an application server to serve the app. This might explain why it works for gulp dev (there is an application server in this case).\n. For a production site I recommend setting up an express server with multiple instances as web workers (load balancing)\nCheckout the grommet-docs server: https://github.com/grommet/grommet-docs/blob/master/server/server.js#L18\n. Thanks for raising this issue.\nIf I remember correctly OpenSwitch is not using the Markdown loader from Grommet. We have added recently and unless you have updated OpenSwitch site to use that, it is still doing its own parsing inside gulpfile.js.\nSee the officially support Markdown parser: http://www.grommet.io/docs/develop/markdown\n. True, thanks for remembering my about this loader. \nLet me investigate why the line breaks are broken in that one and release a new version. Would you mind to transfer the issue to the loader project?\nhttps://github.com/grommet/grommet-markdown-loader\n. good catch. i've just enabled it.\n. thanks for identifying this.\nFixed in https://github.com/grommet/grommet/commit/592923d7f581e644b49811fbea2aed8ef5d417f7\n. Thanks for the instructions @grantnorwood.\nAnd sorry for breaking it myself in the first place \ud83d\ude2d \n. We tried stateless functions before, there is one issue with that though. They don't support refs and we are using that for focus management and other important features that Stateless Functions don't support\nSee this issue: https://github.com/facebook/react/issues/4936#issuecomment-179486461\n. This has been fixed in the latest stable. \nClosing as a duplicated of: https://github.com/grommet/grommet/issues/628\nI will release 0.6.8 today to avoid people facing this same issue again, sorry about the inconvenience \n. Hi @tierralibre thanks for trying to integrate Grommet with Meteor. Personally I don't have experience with it, but from your log I think I know what's going on.\nHow are you doing the SCSS compilation? With webpack (the tool I use), I have to configure the includePaths key:\njavascript\n   {\n        test: /\\.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n          'includePaths[]=' +\n          (encodeURIComponent(\n            path.resolve(options.base || process.cwd(), './node_modules')\n          )) +\n          '&includePaths[]=' +\n          (encodeURIComponent(\n            path.resolve(options.base || process.cwd(),\n            './node_modules/grommet/node_modules'))\n          )\n      },\nFor now I added two paths for the SCSS compiler to look for modules:\n./node_modules and ./node_modules/grommet/node_modules.\nWould love to hear your experience after you get everything working properly. Maybe you can be a guest author in our blog.\n. Thanks for the feedback @adrianmc. We are working on the new website and I'm going to make sure to cover that in the develop section. would you mind to create a github issue for this matter? \n. Something along this line: \"Provide instructions on how to use Grommet without its accompanying development stack (grommet-toolbox)\"\n. Hi @HaveF I'm sorry if the options are not clear for you. It comes from grommet-toolbox our developer environment. All the options are described here:\nhttps://github.com/grommet/grommet-toolbox#options\nIf you are not using toolbox, you don't need to use options at all, so your configuration it is going to look like this:\n{\n        test: /\\.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n          'includePaths[]=' +\n          (encodeURIComponent(path.resolve('./node_modules'))) +\n          '&includePaths[]=' +\n          (encodeURIComponent(path.resolve('./node_modules/grommet/node_modules')))\n      },\nBetter yet, if you are using NPM version 3+ you can safely rely only on ./node_modules. So, again, your configuration it is going to look like this:\n{\n        test: /\\.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n          'includePaths[]=' +\n          (encodeURIComponent(path.resolve('./node_modules')))\n      },\n. can you try running npm install babel-runtime --save ?\n. You can ignore it. It is already fixed in the master branch and will be soon part of a new grommet release\n. If you are interested to understand what is the minium set of tools required for grommet to work, please check the grommet-standalone project: https://github.com/grommet/grommet-standalone\n. Fixed in https://github.com/grommet/grommet/commit/1cb2c24542a0df539edea5b10a5a599b99e5b9a9\nThanks for identifying this.\n. Thanks for your contribution.\n. Which loader are you using for your sass files? The one grommet toolbox is using supports includePaths\njavascript\ntest: /\\.scss$/,\n    loader: \"sass?\" +\n      'includePaths[]=' +\n      (path.resolve('./node_modules')) +\n      '&includePaths[]=' +\n      (path.resolve('./node_modules/grommet/node_modules')))\nIf you are using NPM >= 3 then you don't need to include grommet/node_modules folder as NPM structure is flat instead of nested.\nGood luck \ud83d\udc4d \n. See this for instructions how to run Grommet with create-react-app: https://medium.com/@luce.williamt/using-grommet-with-create-react-app-8e8ddaa836ee#.lmfsxkxc3\n\nOn Sep 21, 2016, at 4:52 PM, dpwren notifications@github.com wrote:\nHi guys. I am having A similar issue with Grommet. I installed the version from the builder\ntool. The builder tool uses gulp. The grommet default page will load; but I get a very red message about Sass nodemodule missing. I see a bunch of boxes on screen, with out style working. In would prefer running this without Gulp. For a newbie I like the create-react app boiler plate from react page. It seems to work the first time, without huge learning curve. I need easy. For the build tool version what to do? For WebpackBabel version I can add sass loader to webpackconfig file like gentle above question?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The Grommet recommendation to customize Theme is to use SASS. Unfortunately, it seems that create react app does not allow you to use SASS without ejecting. I'm not an expert on create-react-app, so I may be missing something.. I definitely agree. We don't do a good job on describing the proper steps to customize things.\n\nWe will hopefully fix that in Grommet 2.0 \ud83d\udc4f . Sorry about that, this has been fixed in the main branch. closing as duplicate of https://github.com/grommet/grommet/issues/628\n. Thanks for your contribution and welcome to the great list of grommet contributors!\n. Agreed with all changes. Are you going to send a PR, or you want us to go ahead and apply it?\n. Fixed by https://github.com/grommet/grommet/pull/644\n. Hi, to avoid touching other components for an existing app, we only apply styles for components rendered inside a grommet app tag, I'm assuming you are not using it?\n<Grommet.App>\n  //grommet components here.\n</Grommet.App>\n. if you are already wrapping then I don't know why it is not applying the styles \ud83d\ude2d \nCan you look into the chrome console and provide additional clues to us?\n. how are you including the sass in your app?\nit seems to me that you are using a sass loader? Are you using webpack?\n. For now, there are two ways to include styles for Grommet components:\n1. Importing the SASS file in your index.js and configure webpack to look for the modules inside node_modules and node_modules/grommet/node_modules. See includePaths options for sass-loader: https://github.com/jtangelder/sass-loader#sass-options\n2. Import the minified css for each of the themes in your index.html.\nWe are evaluating CSS modules, Css in JS, and other approaches to simplify loading styles in a modular and self-contained manner. Checkout the grommet-simple project for an example of the work that is currently being developed. https://github.com/grommet/grommet-simple\n. grommet-standalone has been created and it should be available for reference on how to use grommet with webpack\nhttps://github.com/grommet/grommet-standalone\n. hey @linde12 thanks for your contribution. let me brainstorm with this with @ericsoderberghp.\nI think Tabs components have the same issue. \n. thanks for your contribution, you are a great open-source citizen @primozs! \ud83d\udc4f \n. thanks for your contribution.\nWe've been wanting to remove the close support from the layer. This is another evidence that it actually makes sense to do so. There are so many different ways to display the close icon inside a layer that makes it dangerous to start adding properties for the different positions such as \"outside\".\n@ericsoderberghp would love your insight here.\n. currently the Layer has the \"esc\" listener that will close the layer. I would risk to say that pressing esc to close is a fairly known feature for layers.\nI worry about putting the close outside the layer, specially for mobile when we convert the layer to have full width + height.\n. Fixed. We will soon release grommet-index and this fix will be available.\n. thanks!\n. thanks for your contribution and welcome to our community \ud83d\udc4f \n. Thanks for your contribution. Really good to see the cli commands refactored and simplified. Welcome to \nour team \ud83d\udc4f \n. Sorry about that. it has been fixed already. we will release a new version soon.\n. Sorry about that we will release a new version of grommet with a fix for this soon.\n. closing as I believe it was created by mistake\n. thanks for your contribution\n. what is your node and npm version? es6 is enabled via babel that should be installed in both 0.6.6 and 0.6.7.\nWas there any issues in the console when you ran npm install? Also, which environment are you in? Windows, Linux?\n. I was able to reproduce your issue.\nFor some weird reason the .babelrc is not present in the init command anymore. This will be fixed in the upcoming 0.6.8.\nIn the meantime, can you create in the root of your project a .babelrc file with the following content?\n```\n{\n  \"presets\": [ \"es2015\", \"react\" ]\n}\n``\n. Thanks for the detailed explaination. Are you able to rungulp dist`? In other words do you get the same issue in the command line?\n. Also can you try to validate the suggestion in this issue\nhttps://github.com/yannickcr/eslint-plugin-react/issues/447#issuecomment-184617282\n. The weird thing is that in the commad line works. It feels to me this is an IDE specific issue.\n. cool. closing the issue. welcome to grommet. we invite you to join our slack channel for live support.\nhttp://slackin.grommet.io\n. I just had a chance to test this PR, and it looks great. it has only one minor fix needed before I go ahead and approve it. thanks for your contribution.\n. thank you so much :)\n. Nice. I will work on upgrading Grommet to the latest markdown-to-jsx \ud83d\udc4d \n. i will do that locally.\n. thanks for your contribution\n. Thanks for reporting this. Fixed in https://github.com/grommet/grommet/commit/3fa5e39e4121a99e73da6fd53d69b668cbb1d624\n. thanks!\n. thanks for your contribution.\n. Sorry about the css changes. We had to add a grommetux- namespace to avoid conflicts with apps that are using grommet with other frameworks.\nAs it was an internal change, we decided to stay in the 0.6.X range. I'm assuming you are facing issues with that because you are somehow accessing the grommet classes in your scss. \n. thanks for the suggestion. I will work on that. \nFYI, you don't need to wrap the entire application inside the Grommet App component. A lot of our components will work without it. The challenge is the base HTML elements like textarea, inputs. etc. These elements will only have style applied if present inside the Grommet App component, which makes sense in my opinion.\n. sure thing. let me address that in the docs as well.\n. That sounds cool @digital-flowers.\nIf you can share the project as well it would be awesome.\nEven better, you could be a guest author in our blog https://blog.grommet.io\n. If you are interested to understand what is the minium set of tools required for grommet to work, please check the grommet-standalone project: https://github.com/grommet/grommet-standalone\n. Thanks jackie!\n. we dont support color index with HEX, all the colors should come from your SASS files.\nFor example: neutral-1 is the first color for the neutral array. If you want to customize it you need to create a new theme and use it in your project.\nPlease see the HPE, HPinc and all themes available inside grommet core:\nhttps://github.com/grommet/grommet/blob/master/src/scss/hpe/_hpe.defaults.scss#L7\n. Thanks for the kind words. \nWhen you say autosuggest do you mean autocomplete in a search input?\nWe are constantly evaluating the need for more components, please let us know if you feel the need for a component that is yet not available today. FYI, there are some components that are intentionally not supported because it does not fit our design philosophy and accessibility requirements.\n. Fixed in stable branch. it should be fixed in the upcoming 0.6.12 release.\n. We decided to stop autoplay as soon as the user set the focus on the carousel.\nWe will not at the buttons at this point, I'm closing the issue for now. Feel free to re-open if you still believe it makes sense to add the buttons.\n. Makes sense, reopening the issue. I will check with @L0ZZI on a possible design for start/pause controls for the carousel\n. Thanks @primozs !!\n. The icon should be a button instead of a regular svg element, if only if, the onSearch callback is passed.\nClicking on the button will always trigger the onSearch callback. It will be up to the developer to decide to trigger a request or not when the onSearch is invoked.. Hi @primozs thanks for the detailed information on the issue.\nI believe this one is a good candidate for a PR.\nI agree with scroll top fix if responsive=small.\n. Unfortunately we can't do that as it presents accessibility issues.\nCheck this out: https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/\n. Fixed in https://github.com/grommet/grommet/commit/1c348ff8f1946d98a9e4046b42677357845bf277\n. Nice job. I've sent some feedbacks in the code, but generally your code structure looks really nice and clean \ud83d\udc4f \nThis component needs to have support for accessibility. I added support for accessibility for the Tabs component, which is similar to the Accordion. You need to have aria roles \"tablist\", \"tabpanel\" and \"tab\".\nThis another good example of accessible Accordions here\n. hey @stonecold123 you plan is about right. you need to create the index.scss that uses your _yourcompany.defaults.scss.\nscss\n@import '_yourcompany.defaults';\n@import 'grommet/grommet-core/index';\nFYI: we are working on the new site and we are planning to add documentation on how to create a custom theme. The variables defined inside HPE defaults are not the only ones that we support for customization. Unfortunately there is no documentation today that will document all the supported variables to customize in a theme.\n. Most likely yes. Keep in mind that v1.0.0 is not meant to be the final release of Grommet, there are a lot of items, including documenting custom themes, that will be executed after 1.0.0.\nOur backlog is currently open: https://waffle.io/grommet/grommet\nYou can see what we are working on, and what is currently planned for the upcoming 1.0.0.\nOur reasoning behind prioritizing the items was to fix first the issues/enhancements that will require API changes. \nDocumenting custom theme is something we can definitely do short after 1.0.0 without affecting existing users.\nThanks for raising this concern, it also help us prioritize what we will work next.\n. We have tried css-modules solution in the past. We want to try it again, so yes this is something we are interested to add as part of Grommet 2.0.\nHere is the blog post I wrote about my experience with CSS in JS sometime ago:\nhttps://blog.grommet.io/post/2016/08/10/css-in-js-may-not-be-the-solution-to-all-your-problems\n. Yeah, there are challenges that I'm still curious how to solve with the \"modular\" way of CSS in JS.\nSpecially around hot fixes for ie11 \ud83d\ude22 \nCheckout this file:\nhttps://github.com/grommet/grommet/blob/master/src/scss/grommet-core/_objects.layer.scss#L49\nAnd this issue:\nhttp://stackoverflow.com/questions/40855067/flexbox-div-with-column-direction-and-inner-max-width-breaks-in-ie11\nI'm really not sure how to solve these sort of things using a pure modular approach.. Sorry I should have been more clear. The issue I was referring to is the nesting of .sidebar .form inside Layer.\nI'm not sure how documenting will solve the issue, since we don't expose the css modifiers (and we don't want to as it is an internal representation).\nWell, maybe a good exercise would be to start from Layer and make sure the following code works well in IE11:\njavascript\n  <Layer>\n     <Form>\n       <FormFields>\n         <FormField label=\"test\">\n           <input type=\"text\" />\n         </FormField\n       </FormFields>\n     </Form>\n  </Layer>\nKeep us posted!. I would recommend checking this folder:\nhttps://github.com/grommet/grommet/tree/master/src/scss\nFor example the Aruba theme is here, and you can see some of the variables we override:\nhttps://github.com/grommet/grommet/blob/master/src/scss/aruba/_aruba.defaults.scss\nThis is how you would import it:\nhttps://github.com/grommet/grommet/blob/master/src/scss/aruba/index.scss\nAlso you can see everything is based off the grommet-core folder.\nHope it helps!. It should be not missing , it is a bug. Would you mind to send a pull request to add the !default flag to these variables? thanks for identifying this @snaemi. I came across a very interesting project that create a theme on top of Grommet and publishes that to npm. So in their apps they just refer to the compiled css. I think this can help you:\nhttps://github.com/zooniverse/zoo-grommet/blob/master/package.json#L9\nI cannot see anything wrong with your configuration \ud83d\ude22 . thanks for being so kind to share your experience with the community.. Menu currently does not support onClick function.\nThe jump to the top is an existing issue in grommet:\nhttps://github.com/grommet/grommet/issues/690\nI'm closing this one, please use the other issue to track the progress.\n. Fixed in https://github.com/grommet/grommet/commit/03c5c2911256143f41f78ccf365241b27c4b2b3c\n. I would definitely be ok with that being resolved in another PR. my only concern is the backward compatibility, but I guess it is ok since the the default task for new would make sense to be the empty project itself.\n. correct, makes sense :)\n. Thanks for your contribution\n. We are closing this PR as we will not want to support templates at this point inside the CLI.\nThanks for your contributions.\n. Are we ok with editing the raw icons? When we have a new icon set we usually replace it entirely.\nI edited it myself the other day to remove the id in the raw svgs. \nWe just need to keep these edits in mind for the new icon set.\n. Fixed in https://github.com/grommet/grommet/commit/f15c609326a543d354251b5b357b8468db6b632a\n. Thanks for your contribution.\nFor a text anchor, why we need a title? Grommet does not recommend using title for tooltip or help purposes.\nThe lack of support for title in Anchor as of today is intentional.\nCan you illustrate a scenario where the title for a text anchor will be useful rather than for help/tooltip purposes?\n. This is not accessible. Imagine if your are blind, screen readers will read: \"Requires an active hardware contract\". He has no idea about \"Diagnostic passwords\".\nUsing title to provide help/tooltip is an anti-pattern for Grommet.\nWe will soon provide support for transferring props in Anchor, similar to the way we do it in Box. With that we will be able to do things like this, but we don't recommend it.\n. Fixed in https://github.com/grommet/grommet/commit/97cdc90beee92a61939ad78cb05e5a6a47adbeee.\nWe will soon release a new version of Grommet including this fix.\nIn the meantime you can use the stable branch.\nUpdate your package.json entry to the following, and run npm install:\n{\n  ...\n  \"grommet\": \"https://github.com/grommet/grommet/tarball/stable\"\n}\n. I've also updated the site, thanks for reporting this.\n. Thanks for the follow up\n. Styled components seems nice. I like the idea of using template strings to add dynamic attributes to styles. The structure for styled-components seems similar to one library I've experimented with in the past: https://github.com/rtsao/csjs.\nSee this github branch for grommet as an example of using csjs: https://github.com/grommet/grommet/tree/csjs\nRight now, I'm still leaning more to the SCSS + CSS Modules combination. I would still like to use css and completely move away from CSS modules in the future if we decide to do so.\nIf we add our styles literaly inside our JS files, it will hard to move away from it in the future.\nSCSS + CSS Modules is being used in react-toolbox and I really like the way they've structured it. Check it out:\nhttps://github.com/react-toolbox/react-toolbox/tree/dev/components/button. I believe when we have Grommet 2.0 this global modifiers will go away. As an example we will set box-sizing for each of the css-module we create (e.g. Select, Box, ...). Grommet 2.0 will be using a css in js approach. Check this wiki page:\nhttps://github.com/grommet/grommet/wiki/Why-Grommet-2.0%3F\nOn Fri, Jul 28, 2017 at 5:37 PM, Miles Johnson notifications@github.com\nwrote:\n\nWhy not use a CSS-in-JS + CSS modules approach? That would isolate and\nnamespace accordingly. https://github.com/milesj/aesthetic/tree/master/\npackages/aesthetic-adapter-css-modules\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/issues/732#issuecomment-318790785,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABJr0unWcV_bj06VLmsqlZhiDR4ZfVo-ks5sSn7HgaJpZM4JYmiV\n.\n\n\n--\nAlan Souza\nSoftware Engineer\nContact: +1 (408) 421 - 6341\n. Thanks for the detailed information. it really helps to triage the root cause. \ud83d\udc4f \n. hi @heyjared it turns out that \"no inline\" search box should not trigger the onSelect.\nAs per the docs page here: http://www.grommet.io/docs/hpe/develop/search\nonSelect is a callback used for search suggestions only.\nI've fixed the noInline calling the onSelect callback in here: https://github.com/grommet/grommet/commit/84fb2c5210e3950522eeb3ddd081ab6d2592939e\nIn your case I believe you are looking for the onDOMChange event.\nI've updated your codepen, you can find it here:\nhttp://codepen.io/alansouzati/pen/BzOjBk?editors=0010\nIf you want to save requests to the backend with the Search, I recommend applying a debounce strategy. There is a really good article about it here:\nhttps://john-dugan.com/javascript-debounce/\nWhile it is tempting to add the debounce inside the Search component itself, some users may want to have access to the change immediately. So, delaying the requests on search needs to be done in the callers side.\nFeel free to reopen the issue if you are still facing issues.\n. This is related to passing props to a Grommet component. We are doing it on a need basis.\nIt seems that Search needs passing props to the input element. Similar to the way we did for the Calendar:\nhttps://github.com/grommet/grommet/pull/718/files\nwould any of you be willing to write a PR for the Search component?\n. Thanks for reporting this. Fixed by @digital-flowers at https://github.com/grommet/grommet/commit/1a0de326ffd60a6e7fbcaafd1db3e9f9eecb06d2.\nThis will be part of the upcoming release of Grommet.\n. thanks for your contribution.\n. Thanks for identifying this issue. But, what if we can control more when to apply padding? It seems to me that the padding issue is present not only for search input but for: range, calendar, datetime.\nWe could create a mixin at the top of the file with the content:\n``` scss\n@mixin form-field-content {\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0px;\n  @include inuit-font-size($content-font-size);\n#{$dark-background-context} & {\n    color: $active-colored-text-color;\n  }\n}\n```\nThen we could decide when to apply the padding, see that im not adding padding in the base form-field content mixin.\n``` scss\n\ninput[type=text],\ninput[type=range],\ninput[type=email],\ninput[type=password],\ninput[type=number],\ninput[type=file],\nselect,\ntextarea,\n.#{$grommet-namespace}search-input input,\n.#{$grommet-namespace}calendar input,\n.#{$grommet-namespace}date-time input {\n    @include form-field-content();\n  }\ninput[type=text],\ninput[type=email],\ninput[type=password],\ninput[type=number],\ninput[type=file],\nselect,\ntextarea {\n    padding: 0 $form-horizontal-padding;\n  }\n```\n. Thanks for your contribution man, you are the best @nickjvm \ud83d\udc4f \n. Way to go @arjunbm468! Thank you so much \ud83d\udc4d \n. Nice man! Thanks for your contribution.\n. Thanks for your contribution.\n. looking forward to it \ud83d\ude04 \n. This repo https://github.com/grommet/grommet.github.io is read only. Usually our bot updates it.\n\nCan you describe what the issue is? I'm almost sure whatever the issue is the fix will be in the grommet-docs project: https://github.com/grommet/grommet-docs.\nSorry for not proving better documentation around our documentation structure.\n. good catch, in fact my manager @bryanjacquot found it before you, which is super bad hahha\nWe are fixing it already. I'm afraid the fix is even already pushed. In case you are curious the fix would be here: https://github.com/grommet/grommet-docs/blob/master/server/server.js\n. you bet! @ericsoderberghp look at this nice tip from our friend @ellerbrock \n. Good questions. \nWe are definitely production ready. Although we are still in 0.X stage, we have apps in production today. Check this one out: http://hc380.grommet.io (any username and password is accepted).\nWe have folks outside Hewlett Packard Enterprise using it in production today. @eabay @linde12 that I can remember.\nRegarding your component-based questions, yes, we are modular, so you only pay for what you use.\nReact toolbox is really cool. I can't speak much about them because I don't have a lot of experience.\nGrommet has a lot of cool components focused for enterprise apps like: \nhttp://grommet.github.io/docs/chart\nhttp://grommet.github.io/docs/meter\nhttp://grommet.github.io/docs/topology\nhttp://grommet.github.io/docs/world-map\nand more...\nAccessibility is also built-in to grommet components. Even for the chart and meters that are SVG components. Accessibility is a core requirement for most enterprises.\nYour question makes me think we should write something around \"Why Grommet?\"  \ud83d\ude04 \n. Please join our slack channel if you have any more questions around Grommet: http://slackin.grommet.io\n. We have just released the grommet-cli with few templates: https://github.com/grommet/grommet-cli\nAlso we have the grommet-toolbox that offers series of useful tasks for developers: https://github.com/grommet/grommet-toolbox\n. Thanks for your contribution!\nThanks for adding classnames to Tabs as well.\n. Definitely an interesting enhancement to the Notification component. Would you be willing to submit a pull request for that? \ud83d\ude04 \n. Thanks for reporting this. Let me check what is going on.\n. Fixed.\n. Fixed in https://github.com/grommet/grommet-docs/commit/f9476bfae6671784cd23156d15772217088b69f3\nWill be soon live.\nFor the future website issues, please open them in grommet-docs project: https://github.com/grommet/grommet-docs\n. Fixed\n. You need to add a polyfill yourself. We are using https://www.npmjs.com/package/whatwg-fetch.\nThe blog currently uses it:\nhttps://github.com/grommet/grommet-blog/search?utf8=\u2713&q=whatwg-fetch&type=Code\n. Thanks for getting in touch.\nThe main reason we are using sass is to allow for folks to easily override these values. !default allows you to set it to a different value. It is too bad that we don't have a page that describes which variables you can replace when dealing with our Sass.\nWell, assuming you have your index.scss file, you can do this:\n$hpe-fonts-path: \"font\";\n@import '~grommet/scss/hpe/index';\nThis will look for the files inside your font folder located at the same level as your index.scss file.\nAlso, the fonts are available here for download: https://github.com/grommet/grommet/tree/master/src/scss/hpe/font.\nPlease make sure to keep the license when using it. If you are not an HPE employee you need to acquire a license to use the Metric font.\n. perfect! glad to you are unblocked now.\n. let me try it locally and see if I can reproduce this.. Sorry for taking such a long time to get back to you on this. you need to manually copy the font folder because ~grommet/scss/hpe/font/ will not be moved to the dist folder.\nTo serve the font locally, you need to make sure that the font folder will be inside dist.\nIf you are using the grommet toolbox you need to manually add the copy asset to transfer things from grommet/scss/hpe/font to dist/ and then update your sass file to be something like:\n$hpe-fonts-path: 'font/';\n@import '~grommet/scss/hpe/index';\nThis is more less what the configuration in the toolbox should look like for the copy asset part:\n...\ncopyAssets: [\n   ...\n    {\n      asset: 'node_modules/grommet/scss/hpe/font/',\n      dist: 'dist/font/'\n    },\n   ...\n  ],\n.... hey @maysst did you have time to check this out?. I'm closing this for now. Please feel free to reopen if you still believe this is something to fix. thanks for your contribution.\n. Fixed in https://github.com/grommet/grommet/commit/b05a0dac7cfca93eaa8636beafc777c97a52cdb9\n. Good find. it seems to me it is only a problem with justify center. So I believe\n.grommetux-box--justify-center {\n  flex-shrink: 0;\n}\nis sufficient.\nWould you be willing to send a pr to fix that?\n. thanks jackie\n. Correct the new charts is only available inside the grommet stable for now.\nI will soon release Grommet 0.6.11 with the new components.\nCheckout this wiki page if you are interested in learning more about stable: https://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F.\nWe are working on a fix to the site to tell which component and properties are available in the latest release.\n. looks great thanks!\n. Great work marlon.\n@michaelgilley I know you are working on Enzyme in your project with Grommet.\nCan you help me by evaluating this PR and say how far/close this structure is to your existing architecture?\n. closing as we have a new one to check.\n. Interesting, thanks for reporting this.\nDoes this mean that all ES6 Components, even if no constructor is defined, one should be added with at least this:\njavascript\n  constructor(props, context) {\n    super(props, context);\n  }\nor if you don't declare it is fine?\n. Fixed folks. https://github.com/grommet/grommet/commit/0133a6c0846baec4581320def59acc88135c8225\nThanks for reporting.\n. It should be soon available in Grommet stable branch. If you want to use it check this wiki page:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\n. Im not sure this is a Grommet pattern we want to support. @bryanjacquot any inputs here?\n. Thanks for reporting.\nFixed in https://github.com/grommet/grommet/commit/861f32be721ba9b0e2df8485e0c4ace68b8eb4bc\n. de nada \ud83d\ude06 \n. Sim! Glad to see the \ud83c\udde7\ud83c\uddf7community using Grommet more and more \ud83d\udc4d \n. Thanks for your contribution.\n. You are the best @arjunbm468 thanks!!!\n. thanks!\n. Thanks @phuson !! ;) \n. @RyanCCollins if you can create one issue per test that you are writing that would be great. This way we would avoid writing the same test together!\n. I agree that display: none inside the notification component is easier for callers.\nThere are bunch of questions out there around this topic:\n1 - http://stackoverflow.com/questions/24502898/show-or-hide-element-in-react-js\n2 - https://github.com/facebook/react/issues/4373\nIt seems to me that the general recommendation from the React team is to not render the element at all if you want to remove it. So that's the reason why we are doing Layer, Tip and now Notification like this. It feels that is more aligned with the ReactJS way of doing things.\nThere are situations where display: none would be required. For example with stateful components, see this: https://facebook.github.io/react/docs/multiple-components.html#stateful-children.\nI don't think Notification is an example of a stateful component.\n. Fixed\n. Fixed in https://github.com/grommet/grommet/commit/aea6ed94dd6cec277edf1d77808c73d293aab884\n. I've updated the codepen since the Grommet core now requires react-with-addons.\nhttp://codepen.io/alansouzati/pen/vXOxvB?editors=1010#0\nProblem is still happening \n. Fixed in https://github.com/grommet/grommet/commit/1c348ff8f1946d98a9e4046b42677357845bf277\n. We are working on a new example app, sorry Ferret is using an old version of Grommet. I've created a codepen that illustrates a fixed header working with the latest Grommet.\nhttp://codepen.io/alansouzati/pen/AXkYNX?editors=0010#0\nWe will soon add a message in Ferret app that will warn folks about this limitation for this example app.\n. I'm reopening this issue so that we can investigate what you are reporting @mcwebb.\n. For now I think the screenshot you sent works just fine. I will let you know if I can reproduce it.\n. We recently removed the example we had. In Grommet we prefer to use lists for examples like yours, but we need to fix this bug. Here is a codepen on how I would implement this:\nhttp://codepen.io/alansouzati/pen/QGjmed?editors=0110\n. Just to provide more information around this. for now, scrollable has to be inside a flexbox container to work fine. I'm currently investigating if there is a way to solve this problem in another way.\nCheckout this codepen:\nhttp://codepen.io/alansouzati/pen/JWORYR?editors=0010\nIt works fine if it is not on mobile. I will investigate that also.. Fixed in https://github.com/grommet/grommet/commit/6c63a431017c6de962f07d4f6ad1d80f20819ef5. I cannot reproduce it using the latest grommet, see this codepen:\nhttp://codepen.io/alansouzati/pen/NAVoEA?editors=0010#0\n. Feel free to reopen this issue if you can reproduce it using the latest grommet\n. Thanks for your contribution!\n. Thanks for reporting this @chandrakantnitt, we will soon work on a fix for this\n. Thanks @marlonpp !!\n. Looking great, just few comments.\n. Thanks for your contribution\n. Fixed in https://github.com/grommet/grommet/commit/03c5c2911256143f41f78ccf365241b27c4b2b3c\n. indeed this sounds like a great contribution\n. I also see this a separate project like grommet-webjars. If you are willing to create it we would be happy to spread the word about it, but we don't have expertise/resources to add support for Play Framework.\n. Fixed\n. Thanks for reporting this.\n. Fixed by https://github.com/grommet/grommet/commit/8b0ff95a87685de8dd0c9af2487566ad682db81e\n. thanks\n. @arjunbm468 we are refactoring our test framework to use Jest. See this branch here: https://github.com/grommet/grommet/tree/JEST_EXPLORATION.\nI will make sure to move all these tests to the new one. The merge should happen soon, I will keep you posted about it. \n. @arjunbm468 we finished the test migration, checkout this blog post to understand what is going one: https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript.\nWhenever you are writing tests now, could you please create one github issue for each test you are writing? This way it will avoid us to work on the same test.\n. Fixed by https://github.com/grommet/grommet/commit/ea15e139bfbbc7aa2bf609f9fd71d48f59cf92f2\n. Thanks for your contribution and welcome to the team!\n. Thanks!\n. Thanks for your contribution. FYI I will be refactoring how we add ids internally. Probably I will remove any references of id inside the entire grommet core codebase.\nWelcome to to team!\n. Thanks for your question. We don't have near term plans for adding binding to Typescript. We see this as a great project in github. If you are willing to create it we would definitely spread the word about it. Maybe grommet-typescript?\nWe currently don't use typescript internally and we don't have the expertise to create and maintain such a project.\n. Thanks for reporting this. Closing as a duplicated of https://github.com/grommet/grommet/issues/789\n. Thanks for your contribution. But I wonder if this should be part of grommet-toolbox. \nWe could use a major version increment and use the same version to remove the linting from gulp dev.\n. good question. I would add that as a default and allow one to be sent.\ngulp.task('pre-commit', options.preCommitTasks || ['jslint','scsslint','test']);\n. Fixed in https://github.com/grommet/grommet/commit/b7c45bfd89b6dc96611db065797268bba5ce783a\n. Thanks! Welcome to the team\n. sorry github closed it automatically.. this would require another package that handles timezones with names like America\\Los_Angeles which seems very vendor specific. \nIt is likely the timestamp will be removed in 2.0 as it is just a tiny wrapper around moment-js.\nI don't see ourselves adding much more support for timestamp as it stands today. I'm going to close this issue because of this reason.. Thanks!\n. Fixed in https://github.com/grommet/grommet/commit/27965dad3a9e64ad911e2ba8d9b9f2a6575cc36f\nIt will be soon available in the stable branch and in the upcoming 0.6.12 release.\n. I believe the pattern is not to user uppercase in the middle of a sentence. Heading elements are ok to be uppercase.\nI like the idea of moving the don't to separate bullets points. Would you be willing to submit a pull request for this? Please use the grommet-docs project for that.\nhttps://github.com/grommet/grommet-docs\nFeel free to reopen the issue if you feel this is still unclear to you.\n. Thanks for reporting this. As for now, it is only available in the stable branch. It will be soon part of the upcoming 0.6.12 release.\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\nrefer to the link above for instructions on how to switch to stable.\nWe are working on updating the docs page to inform which components are not available in the latest official release.\n. I tried reproducing it here: https://grommet.github.io/docs/layer\nBut i could not, can you add the steps to reproduce?\n. weird let me try to reproduce it locally. \n. Fixed by https://github.com/grommet/grommet/commit/867a9b643ea1fad5cb3520d2f7b33f520a3a8593\n. Can you try the grommet-standalone project?\nhttps://github.com/grommet/grommet-standalone\nWe provide a sample webpack config to work with Grommet.\nI'm not sure why you are facing issue with a json loader, but I don't think we require one.\nIt would be great if you can try to reproduce the issue using the grommet-standalone.\n. hey @plasmashadow any updates here?\n. Thanks for reporting this.\nFixed in https://github.com/grommet/grommet/commit/6d992b6cbc0b5e55410abcece7fac612e1a7f68c\nMoving forward the meter will require a label, please refer to the Meter examples for the updated way to implement meters:\nhttps://grommet.github.io/docs/meter-examples#2\nhttps://grommet.github.io/docs/meter-examples#7\n. This has been fixed by this:\nhttps://github.com/grommet/grommet/commit/f15c609326a543d354251b5b357b8468db6b632a\n. Thanks!\n. thanks welcome to the team\n. Fixed in https://github.com/grommet/grommet/commit/3bdaef704d2ab28955f6a3669544dd61070534f2\n. Thanks!\n. Is this still an issue?\n. Thanks man!\n. we will be redesigning the DateTime component for Grommet 2.0. This issue will be part of this work.. @Waize we don't have a specific date yet. but I want to get an alpha version out in the next month or so \ud83d\udc4d \n@Primajin interesting requests. We will try to incorporate them in the next version of DateTime, thanks for bringing this up.. Full will use the entire viewport width as described in here: \nhttps://grommet.github.io/docs/box\n\nWhether the width and/or height should take the full viewport size.\n\nAre you looking for a floating footer? Always visible the the bottom of a view port?\nIf yes, we support it:\n<Footer float={true} fixed={true}/>\n. My assumption is that you are looking for something more like this:\nhttp://codepen.io/alansouzati/pen/JRbEyB?editors=0010\nPlease feel free to reopen this issue if you still think this is wrong.\n. Can you try flex={false} in the root Box component for TodoAppDashboard?\n\nOn Sep 21, 2016, at 2:39 AM, Tomer Shalev notifications@github.com wrote:\nI would like to reopen this issue. I am not sure whether this is a Grommet bug, or is it just me having trouble finding the right way to change the footer in the sample-app into a sticky footer.\nI tried Alan's suggestion and it worked initially, but then I created more content in the main box by rendering multiple instances of TodoAppDashboard component, and it didn't go well. I expect to have these component rendered as expected, and then in the bottom to have the footer. Alternatively, I could do with a floating footer with a scrollable area between the header and the floating footer that renders the inner components successfully.\nHowever, what I got is the header and footer properly rendered in their expected location, but the main components being shrinked to accommodate all of them in the box. See screenshot:\nSource code:\nclass Main extends Component {\n  render () {\n    return (\n      \n\n\nSample App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              Build your ideas with Grommet!\n            \n\n\n\n    );\n  }\n};\nlet element = document.getElementById('content');\nReactDOM.render(React.createElement(Main), element);\ndocument.body.classList.remove('loading');\nThanks\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. it works for me.\n\nI've created a codepen to illustrate it:\nhttp://codepen.io/alansouzati/pen/amwvBd?editors=0010\nCould you please validate it? Are you using the latest grommet?\n. After brainstorming with @ericsoderberghp we've raised few UX concerns when we replace the value when pressing up/down.\nAs an example: \nLet's say we have the following suggestions: \"Tomorrow, Arrow, Sparrow, Row\"\nThen you type: \"row\"\nYou press up/down to check the suggestions, if you replace the value, how would you go back to \"row\" in the example of selecting \"tomorrow\".\nFor now, we believe that the currently implementation (press enter to select) is good enough. I propose we postpone improvements to this after 1.0.0.\n. Fixed https://github.com/grommet/grommet/commit/1746fcd7f4fcbce4aade4f72bf62d65fb02ca1f3\n. Are you including the styles either as minified css in your html or using SCSS?\nYou can check grommet-standalone for an example for the minimum set of requirements for Grommet to work.\nAlso be careful with imports like this: import {Header, Title, Menu, Anchor, Navbar} from 'grommet'; it will increase your bundle size significantly as your bundle size will include all the components inside grommet and filter it down to Header, Title, Menu, Anchor, Navbar.\nThe recommendation is to use the following syntax:\nimport Header from 'grommet/components/Header';\nimport Title from 'grommet/components/Title';\n...\n. Are you still facing this issue?\n. Closing the issue for now. please re-open if you are still experiencing this issue.\n. hey manny, do you mind fixing the conflicts here? sorry.\n. How about? \n```\nconst handler = shouldDisableButton ? undefined : () => { alert('hi'); }\n\n```\n. This is a recently added component, sorry the docs does not report anything about it.\nIf you want to access this component now you can use the stable branch:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\nWe will soon be releasing Grommet 1.0.0 and this will be part of an official release.\n\nOn Sep 29, 2016, at 5:48 PM, Leon Pearce notifications@github.com wrote:\nTo avoid this I assume you could install a different version. Or you can copy the source, transpile it, then put it in node_modules/grommet/components.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Fixed in https://github.com/grommet/grommet/commit/7720a32eb4127a738281da47223ac66194babe0d\n. Thanks for your contribution. Would you mind adding onActive to grommet-docs?\n. Thanks!\n. I've updated the snapshot. in the future you can run gulp test:update before pushing the commit. it should create the new snapshot for you and avoid the build to fail. Thanks for your contribution!\n. The CI failed, I guess it is because the markdown snapshot changes. Could you update your node_modules so that you get the latest markdown-to-jsx?\n. Thanks!\n. Fixed in https://github.com/grommet/grommet/commit/42b19a553bdf46ac49b87663f70b950d161fe4eb\n. Fixed in https://github.com/grommet/grommet/commit/6439dbdc1482e93813bcbe234f3d011a61a86339\n. I believe for pt and others we can do something like this: https://github.com/grommet/grommet/blob/master/src/js/messages/en.js\n\nAt least for now, in the future we can use one as a base and extend with with additional properties.\n. Thanks for your contribution but I fixed this in this commit: \nhttps://github.com/grommet/grommet/commit/717cf5db593a6c5d548e0ab3ada377d49b5da494\n. Thanks\n. Thanks, you codepen references are the best\n. After investigating this I found out that the problem is also present in regular HTML radio buttons.\nSee the w3c site for radio html:\nhttp://www.w3schools.com/html/tryit.asp?filename=tryhtml_radio \nAlso see a related issue on React regarding this:\nhttps://github.com/facebook/react/issues/7051\nMy recommendation is the same as @syranide, use the query selector :checked option.\nI've created a codepen that illustrates how you can retrieve the checked checkbox.\nhttp://codepen.io/alansouzati/pen/WGJgAx?editors=0010\nIn my opinion this is not a problem with React or Grommet.\n. Thanks for raising this topic. Just to be clear, the \"how\" aspect of things you were able to complete correct? Meaning you are able to install grommet, but you would like to understand why you have to use it?\nI think we are doing a good job in terms of \"how\", but you are not the first one that is complaining about the \"why\". We will work on adding it to our site as soon as possible.\nIf you think the \"how\" is not clear, I kindly request feedback on what you would do to enhance our get started page.\n. You did not come off rude at all, this kind of feedback is extremely useful.\nWhile we don't have it on the site, this is what I believe is the \"why you should care about Grommet\":\n1) Unified: we are more than just a UI widget library for React. We are a User Experience framework that aims to bridge the gap between design and development. We offer patterns like: Navigation and Login. We also offer templates and sample apps for higher order component interaction.\n2) Modular: we run on top of Node and we provide all the components independently, which means that you only pay for what you use.\n3) Accessible: We take accessibility as a core functionality and if you use Grommet you are in a good path to meet the WCAG standards. Check out this video we published recently: https://vimeo.com/187068246.\n4) Community-Driven: We provide trainings and support to the community even if it is not directly related to Grommet. For example, we constantly find ourselves on slack helping folks get a better understanding of good UX practices. Checkout all our videos at: https://vimeo.com/187068246. Also, join our slack community: http://slackin.grommet.io.\n. PR pending https://github.com/grommet/grommet-docs/pull/173\n. Thanks for the feedback you all. we've merged the pull request.\n. Fixed in https://github.com/grommet/grommet/commit/d71b59ab4c7296195e469dc57e7ef66a43bbbfb9\n. Thanks for squashing your commits \ud83d\udc4d :)\n. Fixed in https://github.com/grommet/grommet/commit/0c86ea4f0054eebfc96150bd41bbe06333fb38d2\n. beautiful, thanks for your contribution!\n. Fixed in https://github.com/grommet/grommet/commit/21b39cbd189048a7bb21bd7c8d05635cf05bd2c6\n. Fixed in https://github.com/grommet/grommet/commit/21b39cbd189048a7bb21bd7c8d05635cf05bd2c6\n. hey @JeroenKleen can you take a look in the comments in this PR ?. Thanks for pointing this out @arlair, the selected property has been moved up to the List and Table levels, but we forgot to remove it from the docs. I've fixed it in this commit:  https://github.com/grommet/grommet-docs/commit/2f3995e84be470233abde3167abe2e0556c60fe4\n. How about ?\n<List selected={selectedId}>\n{channels && channels.map(channel => (\n  <ListItem>{channel.name}</ListItem>\n))}\n</List>\n. I'm not sure I understand the issue, I'm sorry about this @zalmoxisus.\nCan you create a codepen illustrating your issue? \n. The codepen you provided was not using the latest grommet bits.\nhttp://codepen.io/grommet/pen/zKbvLW?editors=1010\nI was able to make it work with this new pen using the latest grommet files. \n. I'm hoping you are maintaining the selected element in your React state? Otherwise how would you know which element is selected in the first place?\nhttp://codepen.io/alansouzati/pen/wzOQvO?editors=0010\nI've created another codepen that illustrates how to use onSelect function from List.\n. Fixed by https://github.com/grommet/grommet/commit/83586e008ec4f02b79eaba62562046338bb1a7a0\n. Im not able to reproduce this with the latest grommet\nhttp://codepen.io/alansouzati/pen/YGZRPO\nCan you try it in your end and see if it is fixed?\n. Fixed in https://github.com/grommet/grommet/commit/42b19a553bdf46ac49b87663f70b950d161fe4eb\n. Fixed by https://github.com/grommet/grommet/commit/a3fe6d88fca005ce4770f2254dd2aa5042b16103\n. Interesting I was not able to reproduce this issue in my local environment.\nCan you try to use passive all the time and test with out supported browsers? I'm wondering if we can set that option always, and a avoid creating an empty div to get passive function.\n. I agree with removing this and leave passive true always.\n. would you mind squashing your commits?\nI'm trying to avoid messages like this in your commit history:\nMerge remote-tracking branch 'upstream/master' into fix-onwheel-freezing\n. Thanks for this issue.\nI think I can fix this warning, but any reason why not using a Grommet App component?\nIt is really important for accessibility reasons, if you use Toast without the enclosing App component, users with disabilities will not be able to hear the content that came in a floating container.\nSee this: https://grommet.github.io/docs/announcer\n. makes sense. are you up for a pull request to add that check in ?\n. thanks!\n. that is great thanks @ShimiSun \n. beautiful thanks!!\n. Fixed by https://github.com/grommet/grommet/commit/5cb373ffa51c0216d85a2a58b1e07f83f3934a06\n. Thanks that looks good, there are two components that I believe should not be exposed. \n. beautiful did not know about the squash feature, thanks!!!!\n. Thanks for the codepen @davidcalhoun\nIt depends on the height of the screen. if there is not enough space for it to render at the bottom, it will be rendered on top of the select.\nHere is the forked pen that illustrates a case where it will be rendered at the top.\nhttp://codepen.io/alansouzati/pen/zKXLvB?editors=0010\nCurrently I'm experiencing a weird problem with scroll position moving up. I will investigate it now and get it fixed.\n. I've just fixed the jumping issue in this commit:\nhttps://github.com/grommet/grommet/commit/254caef679093ebf1173d4b5b60c0df278cdd3f4\nThe position of the drop is an expected behavior. I'm closing this issue for now. Feel free to re-open it if you believe this is still an issue.\n. This is an interesting feature. I will add that to our backlog of things to enhance. PR is gladly appreciated.\n. This will be implemented in Grommet v2 calendar. Thanks for your contribution. welcome to our team @joachimhb \n. Thanks @davidcalhoun \n. Thanks!\n. I would rather investigate why focus control is presenting this jump problems.\nI don't thinking disabling the focus control will be good for accessibility.\n. we are releasing grommet 1.0.1. I will quickly take a look on that.\n. Fixed in https://github.com/grommet/grommet/commit/f86d86664c17417dbd281bb59bc58103f4e7dc8e\n. Interesting. can you update to Grommet 1.0.0 and see if you are able to reproduce this?!\n. Are you using grommet-toolbox or do you have your own webpack configuration?\n. Yeah, we add json-loader as part of the toolbox, but I was not aware of this requirement, and I still cannot reproduce it using the grommet-standalone: https://github.com/grommet/grommet-standalone.\nWould you mind to give it a try and see if you can reproduce it there?\nIf you check the webpack configuration, there is no json-loader in the grommet-standalone instance.\n. what is your webpack version?\n. Grommet-standalone uses \"webpack\": \"^1.13.1\"\n. I have a windows VM, let me try and see if I can reproduce it there. There is something weird going on. I'm not sure why you would have to put this require('./block-elements.json').\nDo you have a Linux Vm somewhere? Can you try to see if you can reproduce in a different OS?\n. you will need a .babelrc file in the root of your project:\nhttps://github.com/grommet/grommet-standalone/blob/master/.babelrc\n. I've just ran grommet-standalone with a Windows box and I still cannot reproduce the issue.\n\n. Interesting find. My only concern is with the screen reader reading too much content. This could be annoying to the user. \nThe strategy I did in few other components was: have the role=\"group\" set on the box and add a message to it: \"(Press enter to select)\". Does it make sense?\nMaybe we can even remove the role=\"link\" and add only aria-label.\nCheck out how I did in SunBurst:\nhttps://github.com/grommet/grommet/blob/552fba4484da2234765d5c59e3a5c43a21247fe0/src/js/components/SunBurst.js#L226\n. thanks!\n. Can you update your local node modules? Jest 16 came and we updated the tests to reflect that. I'm assuming you still have Jest 15.\n. beautiful thanks!\n. The issue with that is when you close the DateTime drop it is also closing the layer. I will investigate this.\n. Fixed in https://github.com/grommet/grommet/commit/464c033be9473ac98e051e392af4a5b9d4b8f282. Thank you guys for the great engagement here \ud83d\udc4d \n. Interesting. We do only support NPM v3+.\nWe describe the requirements here: https://grommet.github.io/docs/get-started\nCan he try to upgrade and validate if he is facing this issue? \n. Thanks for sharing your experience. I'm sure it will benefit folks that are facing issues with NPM v2. \nI recently upgraded our support pipeline following the NodeJS recommendations.\n. hey @mvanlonden thanks for working on this. This looks like a great solution for folks that would be ok with using the vanilla theme. I think eventually you will want to change colors/fonts, then you may need to use SASS again.. We are closing this issue for now as it appears there is no issue.\nToken input seems like an interesting component, we will discuss if we want to support it in Grommet core. Feel free to create a separate issue requesting this component.\n. hi @nickjvm if I'm not mistaken this change was introduced before 1.0.0. But I may be missing something here.\n. I see sorry about that, we need to pay more attention to semantic versioning. I keep failing on that one, I did the same in toolbox recently. \ud83d\ude22 \n. Yeah, it will be in the next release.\nHere is the milestone: https://github.com/grommet/grommet/milestones\nIn the meantime you can use the stable branch:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\n. Thanks\n. Generally speaking I guess it makes sense to make id required for every input field inside a FormField element.\nThis means that the validate code would live inside FormField, not CheckBox. Thoughts?\n. I was chatting with Eric and we will update the documentation to include instructions on the side effect of not setting the id. We don't want to make it required as you can have a checkbox without a label and not need the id at all. Does it make sense?\n. Correct. I will make sure to update the documentation and prop types for id. Thanks for the heads up\n. I noticed that Icon does not support id so far. I will create a separate issue to allow Icons to receive id. In this case I would not put the id in the box because it will take the full width of the screen.\nAs soon as the icon can receive id I would move the target on Tip to be the icon.\nSee https://github.com/grommet/grommet/issues/1041\nI'm closing this issue and will track the fix for the icon in this other ticket.\n. Fixed by https://github.com/grommet/grommet/commit/881954ff221a9d4de427f8c0ce8b30ddfe195184\n. Thanks for your contribution but I believe this is already supported today with transfer props.\nSee this line here: https://github.com/grommet/grommet/pull/1034/files#diff-ff44d471ee39c240dc39018a6307606bR288\nif you send <DateTime disabled/> I'm expecting the input to have that property propagated. \nOn a side note, I would be careful with disabling properties. As a user, I often don't know what I have to do in order to enable that field again. We did a bunch of user testings in this area, and our recommendation is not to use disabled fields.\nThere is an interesting thread on User Experience exchange around a similar topic for disabling Buttons in a form: http://ux.stackexchange.com/questions/9788/disabled-submit-button-on-form-vs-allow-submit-then-show-errors\n. Cool, let me try and investigate why the codepen is not working.\n. Your codepen does disable the input text field. I'm closing this pull request as the code in place already does the job that this pr is proposing.\nCustom Grommet components will not support disabled properties directly, it is not part of our pattern, I'm sorry.\n\n. Well, we are technically not disabling anything, but just transferring properties. \nGrommet will not add support explicitly for disabled custom fields. I'm sorry but it is just not part of our UX patterns. In fact, yesterday I was using a form from a big company trying to buy a product. They had the buy button disabled and I entered all the data in the form and I did not realize I entered a wrong data in the form. The button kept disabled and I had no idea what I had to do in order to enable the button again. That was super annoying. After reviewing the form I finally realized that I entered the wrong expiration date. \nGrommet pattern is to ALWAYS enable the form fields and perform post form submission validation.\nCan you share what you are trying to achieve with a disabled datetime form field? \nFortunately, or unfortunately, Grommet is an User Experience framework and there are things we have to be opinionated about, and this is the case here. Hopefully it makes sense for you.\n. Fixed by https://github.com/grommet/grommet/commit/fecbcb2851362acd7d3bc4d7898b07f6e6975c4b\n. Thanks for your help @mcwebb \n. Thanks for your issue. Grommet custom components do not support disabled attributes. During our recent user studies we found that users will not know what to do in order to enable the field again. It is sort of an anti-pattern for our User Experience framework.\nWe do transfer properties to our components but in the case of the Select will not help much as the underlying component is not a native Select element. So doing this:\n<Select disabled ... />\nwill actually disable the input text inside the Select element.\nI'm closing the issue as it is the expected behavior.\n. Thanks man, you are the best\n. Fixed by https://github.com/grommet/grommet/commit/e8f408f519eea7c8363feff17052974cf3477453\n. For now it is only available in the stable branch. We will be soon releasing a new version with TableHeader included.\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\n. Fixed in https://github.com/grommet/grommet/pull/1049\n. Fixed by https://github.com/grommet/grommet/commit/fecbcb2851362acd7d3bc4d7898b07f6e6975c4b\n. I cannot reproduce this with grommet docs. are you still able to reproduce this?!. This has been fixed in https://github.com/grommet/grommet/commit/cf51c2cb2ef0589fe47cf2cc59f1bfe289a0d697. We recently added property fill to Menu that will make sure it will take the available space in the sidebar.\nhttps://grommet.github.io/docs/menu\nIt will be part of the next grommet 1.1.0 release. Fixed by https://github.com/grommet/grommet/commit/4df75b59f462cdc79fd5a504f358048e4eea8375. Thanks @Waize this was going to be my response. I'm closing the issue for now. Feel free to reopen if you still feel that this is a bug.\nWould love to hear more details on which controls you think it is huge.\n. You can you texture in a box. See this codepen:\nhttp://codepen.io/alansouzati/pen/GNjKRR?editors=0010\nI'm closing this issue for now. feel free to reopen if you still think this is an issue.\n. I'm trying to reproduce this issue. I open the codepen in IE11 and it works. Can you be more explicit on what is breaking?\nThe 50vh height is there but it will get overwritten by the min-height which is 100vh. \nIf you don't set the height IE11 will break alignment. I'm happy to investigate this further, but I would need more details as I cannot reproduce the overlap in the codepen using ie11.\nCan you provide a screenshot?. I would be careful with using nested full attributes. It is designed to be used only at the top level structure as it uses the virtual width/height.\nI believe this is what you are trying to achieve:\nhttp://codepen.io/alansouzati/pen/jVaOgP?editors=0010\nSidebar also uses the VH attribute and it will not working properly if you have other stuff before or after.\nI'm closing this issue as I believe there is nothing to fix. Feel free to reopen if you still think there is something broken.. https://github.com/facebook/react/issues/8312\nI'm going to update grommet-toolbox to use react hot loader version 3+\nFor now please add the following to your package.json:\ndependencies: {\n    \"react\": \"15.3.2\",\n    \"react-addons-transition-group\": \"15.3.2\",\n    \"react-dom\": \"15.3.2\"\n  }\nJust make sure to update your node modules after that\n. Fixed with the latest latest version of toolbox.. There are differences on how browsers deal with labels for SVG and we can't control it.\nAre you using the icon as an svg only? Or are you wrapping it with an Anchor or Button?\nIf you have one of these controls the behavior is consistent across browsers for the tooltip.\nAnyways, I'm closing this issue as I believe there is nothing we can do on our end to fix it.\nFeel free to reopen if you have an idea how to fix it.\n. Fixed by https://github.com/grommet/grommet/commit/ba1dffe8371475adedd57e6d167f6792c6ab0381. This is still a working in progress. Please stay tuned for updates in this issue.. 36 medium icons are now available, https://grommet.github.io/docs/icon. Thanks for your issue. You can see our upcoming releases here:\nhttps://github.com/grommet/grommet/milestones\nIn the meantime you can use the stable branch and it will include the TableHeader component.\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\nI'm sorry we should make it more clear in the site that TableHeader is only available in the stable branch.. thanks for your contribution. Thanks for this issue.\nCurrently Tip does not center the placement. The padding in the menu gives a false impression that it centers it.\nI believe we should extend the Tip component with align option. I will add that in our backlog. This is most likely be in 1.2.0 unless someone in the community is up for a pull request on that.. You need to provide the value to the input otherwise react will treat it as a controlled component.\nSee this updated pen:\nhttp://codepen.io/alansouzati/pen/ENEpWG?editors=0010\nWhile debugging this, I found another issue where the active tab would go back to the first one when you change elements inside the tab content.\nThis is fixed in this commit:\nhttps://github.com/grommet/grommet/commit/1da7985105ecdec78798c0f7e7bc3f3ab36f4a2d. Thanks for identifying this. Since you've spotted where the issue is, would you mind sending a pull request to fix it ? :). re-fixed by https://github.com/grommet/grommet/commit/c5e5c75b008604de38414ff9671f233cc747b7ec\nthanks for catching this @Thuranel . Thanks for your feedback. I agree the term \"logo component\" is vague.\nImplementation wise it is just a node. Often a SVG element that represents your logo.\nWe gladly appreciate pull requests. This I believe it is a good candidate for help.\nThe source code for the documentation is here:\nhttps://github.com/grommet/grommet-docs\nThe component documentation for the LoginForm is here:\nhttps://github.com/grommet/grommet-docs/blob/master/src/docs/components/login-form/LoginFormDoc.js#L52\nWould you be kind enough to update the description of this property and send a pull request?\nOtherwise we will eventually work on that.\n. Fixed in https://github.com/grommet/grommet-docs/commit/3c7be98435a3670d61c09db5954112643edfa202. Here is the codepen:\nhttp://codepen.io/anon/pen/qqVYZp\nBut I cannot reproduce it.. Sorry I thought this was about text cropping. I can see the issue with the underlying content being visible.. Fixed in https://github.com/grommet/grommet/commit/0eb3e49124a8c89a01129f8d8c79c406cb80a63d. Fixed by @RyanCCollins . Fixed in Grommet 1.1.0, please use fill option in Menu. See the 1.1.0 release notes for details.\nhttps://github.com/grommet/grommet/releases/tag/v1.1.0. hi @ravindra1103 Ferret might still be outdated. are you still able to reproduce it with the latest grommet? can you create a codepen reproducing this?. Cool. Let me work on that today.. Fixed in https://github.com/grommet/grommet/commit/34668d9535d42a1a7f4f4cf8a755c32db5915fa4. Fair request. Give us a couple of days there are few other issues I would like to include in this new patch release.. Fixed and tested with other browsers. Grommet 1.2.1 has been released working on the release notes now.. The issue with this approach is that you will end up having the entire 400 icons in your final bundle, which will drive the size of your script a lot.\nI understand the requirement of dynamic menu item and icons. I'm sure you are already making the connection with the icon name somewhere, so I would assume this list of menu items is short. This means that you are probably not going to use 400 icons. \nMy recommendation is to create a switch/if in your client-side component, something like this:\nswitch (menuItem.iconType) {\n  'users': \n      icon = <Users />\n      break;\n}\n. Thanks for your contribution. I know why the building is failing. I will on that separately.\nWelcome to the team. Thanks and welcome to the team. I believe the fix will be to add an align option to the Tip something like:\n<Tip target='elementId' align='center' />\n<Tip target='elementId' align='start' /> \n<Tip target='elementId' align='end' /> . Let's target this for Grommet 2.0. Thanks for reporting this issue.\nI was able to reproduce this issue in this codepen:\nhttp://codepen.io/alansouzati/pen/dOaQBN?editors=0010\nThis is fixed in: https://github.com/grommet/grommet/commit/350900f960bdb218818ad467a4ff8eb22b2f898f\n. Gulp has been moved to devDependencies in this commit: \nhttps://github.com/grommet/grommet/commit/ad3f17f3087580c01876f716baf2401436f2f15e\nCurrently everything that is in dependencies entry is needed in the library. Gulp and node-sass were big dependencies that have been moved to devDependencies, so I expect the install process to be way faster in the next grommet release.\nIn the meantime, you case you the stable branch:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F. Thanks for your contribution, but can we follow the same principle that has been applied to meter?\nIn there we don't support a custom decimal places, which I like. Adding a custom decimal place and affect the result in the UI, specially in mobile devices.\nHere is how the calculation is done in the meter:\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Meter.js#L139\n. Thanks for your contribution, welcome to the team :). Split is designed to take the full viewport. I would recommend using native boxes if you want a different behavior.\nCheck out this codepen, I believe this is close to what you are looking for:\nhttp://codepen.io/alansouzati/pen/MbxoyG?editors=0010\nI'm going to close the issue as I believe there is nothing to be fixed. Feel free to reopen if you still think there is something to fix.. Sorry for taking such a long time to get back to you on this.\nFormat date used to be a pattern in the past, but due to the UX complications it does not seem to be a pattern anymore. Grommet does not recommend doing this, this is why we don't have that built in. \nThe reason we don't have date format, is the same as the reason for not doing format validation as the user type in the field. We prefer to let the user take full control of the form inputs and when they submit (which is a clear indication they are done filling it), then we apply formatting and validation.\nIf you take a look on known sites that are date-driven (like airbnb, expedia), they don't do date format, and I believe this is for the same reason as Grommet's.\nI'm closing the issue for now but feel free to reopen it if you feel I'm missing something.. This is fixed in the latest version of grommet. Please upgrade to 1.1.0.\nSee this codepen which uses the latest Grommet\nhttp://codepen.io/alansouzati/pen/qqwEBd?editors=0010. I believe this is a native behavior from your browser. I'm not aware of any special code in grommet to transform emails and urls.. Hi @bjackson this is an interesting contribution, I'm so sorry for taking such a long time to get back to it.\nI'm think we should change the way the path prop works instead of adding a new prop called indexLink.\nCurrently path can only be a string, I propose we change that and allow path also to be an object. So the propType validation would change to:\npath: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string\n  ])\nThe object structure would be:\njavascript\n{\n   path: '/tasks',\n   index: true\n}\nSo the active validation would be:\n[`${CLASS_ROOT}--active`]: (router && path &&\n                                    router.isActive(path.path || path, path.index))\nWe would need to review the usage of path across this component to make sure it is backwards compatible. Thoughts?. I added this as part of this commit. thanks for sending the contribution in the first place.\nhttps://github.com/grommet/grommet/commit/06adf025de881686d08ab1dabf1398f40ca0c912. Thanks @ericsoderberghp released 0.3.1 of jsx-to-string with the fix for this!. Fixed in https://github.com/grommet/grommet/commit/6916e2677ab561ab3e4fba8a68870991c668367d. we will not add support for the bot as we changed the way we are handling the issues.. we will not add support for the bot as we changed the way we are handling the issues.. hey @avadhutkhavare can you please validate this with the latest grommet? we believe this is fixed.. Thanks for your contribution. Welcome to our team \ud83c\udf7b . I believe the CI is failing for another reason that is unrelated to this PR. Merging it now. I don't think hpe.com is built using grommet. The current open source apps using Grommet are:\nFerret:\nhttp://ferret.grommet.io\nhttps://github.com/grommet/grommet-ferret\nBlog:\nhttps://blog.grommet.io\nhttps://github.com/grommet/grommet-blog\nGrommet docs\nhttps://grommet.github.io\nhttps://github.com/grommet/grommet-docs\nWe are currently working to add more rich examples to the grommet init command in our CLI. Stay tuned for that.\n. Thanks, welcome to the team!. Thanks for this issue. Split uses 100vw and 100vh by design, which is meant to be used to divide up the main screen. \nI've updated the codepen to reflect how to achieve what you are asking for\nhttp://codepen.io/alansouzati/pen/MJKpgz?&editors=0010\nI'm closing this issue but feel free to reopen it if you still think something needs to be done.. FIxed by https://github.com/grommet/grommet/commit/8254e7e2b0a9a771c1fa7d4753483c051b777d67. It was a good question. Just for reference, I guess the fix you had was to enclose LoginForm with the Grommet.App component.. Thanks for your contribution. welcome to the team.. Thanks for identifying this. We will look into it.. Let me work on a codepen so that you guys can easily grab it. I believe this is what you are looking for:\nhttp://codepen.io/alansouzati/pen/pRevaE?editors=0010\nFeel free to reopen the issue if you think otherwise.. cool let me work on updating the codepen to accommodate that.. There you go http://codepen.io/alansouzati/pen/pRevaE?editors=0010. Hey, thanks for the kind words.\nYeah this is a current limitation of the LoginForm. Moving forward we will be moving LoginForm to Grommet-addons project as this component is a combination of other Grommet core components.\nIn other products I had a chance to participate, we replaced the button with a spinning icon plus the help text, something like [icon] Saving.... Unfortunately today it is not possible to do that with the LoginForm.\nWe are currently working/thinking in a good pattern for this, we believe this goes behind than just the LoginForm.\nIn the meantime, I would recommend copying over the Login Form, and use this intermittent solution of replacing the button.. Implemented in https://github.com/grommet/grommet/commit/3813d89f1eb4af94e0677172933ddd562dc10f7e. we need a safe check here for testing purposes if (childElement).\nThere is no actual DOM in the Jest setup we did. This is why you are getting this \"null pointer\". Thanks for catching that. welcome to the team!. Thanks ryan!. Fixed in https://github.com/grommet/grommet/commit/9c9b16dd77202a87d98958186894db729a1e1848. Fixed by https://github.com/grommet/grommet/commit/8254e7e2b0a9a771c1fa7d4753483c051b777d67. Fixed by https://github.com/grommet/grommet/commit/1c455132a7d5ddf51ab9da0303f03d5430383db3. I believe you are missing to run the back-end server npm run dev-server ?. no problem glad you are up and running now. Very good point. I would rather align the Drop automatically. the drop for the Select is special because it has the search box. If we align top, the contents of the drops needs to change ordering. For example, the search box should be at the bottom and the suggestion values reversed.\nI will try to work on that change soon. Thanks for creating the codepen.. hey @ArtemZag could you please share a scenario where you are trying to render the Select at the bottom of the page?\nI've tried fixing that but it brings a lot of UX concerns on the way we render things.\nFor example:\n\nIf I press the up arrow, to get the most important item(\"one\") I would have to press that 3 times instead of one. One possible solution would be to reverse the list where one will be the first. But the problem this brings is that you are reading in reverse order which seems wrong as our natural behavior is to scan things top-down.\nI've tried to compare on how other frameworks solve that problem and I cannot find a decent solution that fits the Grommet UX guidelines.\nThoughts? If you can share your screen we can try to provide an alternate structure that does not use the select component.\n. Visually does it make more sense to be at the Header? How is the reporting date different from \"Filters\" ? Could you bake that in with the other filters? Maybe even inline them with radio buttons ?\nWould the \"reporting year\" affect the list on the left? If so, it makes sense to put them in the Header because it is a natural progression: you change something at the top that affects something at the bottom.. Sounds good.\nSorry we could not help it further, we can \"fix\" it but we are worried about the UX repercussions of this change.\nI'm closing the issue for now.. looking forward for a PR \ud83c\udf89 . Fixed by https://github.com/grommet/grommet/commit/6024dcd34e4b23df4c673abaf4ccd1e482178102\n. Well done! Thanks for your contribution and welcome to our community!. Fixed by https://github.com/grommet/grommet/commit/a957c942e68fb73a1e9c8a4d5c76e129ee40aadc. This is actually a limitation with ie11. As per their docs navigator.userLanguage will return the installed language. I tested it myself and it is not working as well. Locale utils is doing the job as documented by ie11.\nDo you have access to your back-end? Can you make sure to set a Cookie with the accept-language?\nSee this: https://github.com/grommet/grommet-toolbox/blob/master/src/gulp-tasks-dev.js#L89\nIf you don't have access to a back-end I recommend enabling a script that will do that for you, this is not optimal since you will have two requests.\nSee this issue for reference: http://stackoverflow.com/questions/1043339/javascript-for-detecting-browser-language-preference\nThere is a script that is available that you can use http://ajaxhttpheaders.appspot.com. Although I would recommend changing your back-end to provide this header.\nI'm closing this issue since there is nothing Locale util can do to fix this issue. Please feel free to reopen it if you have a solution to this problem.. Hey @alanpilloud thanks for this issue and sorry for taking such a long time to get back to you on this.\nI see problems with both solutions (closing and not closing when clicking outside).\nFor example, let's say you have a form inside a layer, you entered all the data and accidentally clicked outside. With the previous behavior we would close the layer and the user would have to enter the form all over again.\nWith the close being activated only when the user clicks in the X icon we have a lower chance of problems like that to happen.\nLet's explore another scenario: a layer with an agreement form that we want to enforce the user to scroll to the bottom, closing by clicking outside the layer would be problematic as well.\nI'm trying to think about a scenario where closing by clicking outside the layer will bring benefits to the user. Can you help me here?\nI'm not against adding a prop to make it flexible, but I guess we need to think more about the bigger picture on this problem. It seems like an easy one, but it brings interesting challenges in terms of User Experience.. Thanks for your contribution. welcome to the team!!. Well done. thanks for adding tests to cover this.. Fixed in https://github.com/grommet/grommet/commit/0a47b645bc9e861f643a947b4c790d393cdbc55d. Nice interesting. \nDoes this component have a fallback to the regular upload for users that cannot drag and drop?. Thanks for bringing this up. This is an interesting topic to discuss.\nRecently, we removed all the internal ids from our elements, this is mainly to avoid unnecessary complexity to maintain a valid HTML structure. We kept facing \"duplicated id\" issues when folks were using multiple Meters, for example.\nAnother thing we did to simplify was to deprecate grommet-index. The structure has too many abstractions which makes it hard to customize and as you pointed out, to test. We offer grommet-addons which has less abstractions than grommet-index, but brings the benefit of combining things and test things independently.\nInside grommet-core the only component that still has a \"complex\" interaction is the LoginForm. We are planning to move login form out of grommet-core very soon.\nExposing internal structure for testing purposes is not an ideal solution as it defeats the purposes of abstraction IMHO. I prefer to use the query selector capabilities to make sure I'm being as specific as I can to grab the desired DOM node.\nFor example, here is how I would test LoginForm:\n<LoginForm className='my-app-login' ... />\ndocument.querySelector(\".my-app-login input=[type=password]\")\nSo, the above code safely grabs the input for the password, as it is pretty unlikely that you will need to change this code any time soon.\nI'm curious to hear more about your testing strategies and how you are testing the Grommet components. So let's keep the discussion going ;). Can you add a child of the LI with a classname? Assuming that you can do this, I would change my selector to only include that.\nlet items = browser.elements('.childelements-li').value;\nreturn items ? items.length : 0;\nI'm closing this issue for now, as I don't think there is anything to change in Grommet core.\nPlease feel free to open the issue again if you still feel something should be done.. Thanks for your contribution! Welcome to the team.. thanks @RyanCCollins I agree with you. this would definitely be a component/feature to live outside grommet core.\nI'm closing the issue for now. but feel free to keep the discussion going here.. hey @johnnyvcn any updates on this?. thanks for your contribution. welcome to the team! \ud83c\udf89 . I understand your concern and I'm glad to hear that your analyzing the webpack bundle size.\nAs @ericsoderberghp said, react-desc is a very small package and it is currently being used in production to bundle the documentation of a given component. This is actually described in the react desc documentation:\nhttps://github.com/grommet/react-desc#limitations\nUnfortunately I did not have time yet to add the babel plugin to Grommet core. Would you mind sending a pull request to fix that?\nI still believe react-desc will remain as a production dependency. But I would appreciate if you can investigate if adding the babel plugin will allow react-desc to be a devDependency.\nThis will be soon solved by webpack 2 with the three shaking capabilities.. Actually Grommet will stay with the propTypes in, so that we can use that in grommet-docs to show documentation. We recommend you adding that plugin in your babel config to remove propTypes from your app and your dependencies.\nI'm closing this issue for now as I believe there is nothing to be done here. Feel free to reopen it if you have a better idea on how to solve this.. I was able to validate this issue in Grommet.io. I'm reopening so that I can investigate it.. Fixed in https://github.com/grommet/grommet/commit/fc6f5a2a5dfa168a121106b3b2d977b63c374f73. Closing is a duplicate of #1183. let's use that use to discuss this.. @ericsoderberghp is right. We recently changed the minified js structure to have a better webpack2 support.\nthe base icons are now available as: BaseIcons.ActionsIcon  where BaseIcons is being read from Grommet.Icons.Base, the base object will have the icon name and the Icon suffix. I've fixed your codepen to reflect that.\nhttps://codepen.io/alansouzati/pen/OpWXKR?editors=0010\n. Good catch. Fixed by https://github.com/grommet/grommet/commit/a22243785532b5ca0e43915c761d88bce0ae911b. The fix for this broke other items. I'm reopening this and will investigate another solution.. Fixed again in https://github.com/grommet/grommet/commit/3de2781c849512235b5b65df549aa5974d82065b\nSorry about the back and forth. Fixed in https://github.com/grommet/grommet/commit/016abd4adae01a90d85c7de744ce38e36db8a60c. We don't have the resources in our team to add Dutch translation. You can either add that Total entry in your react-intl or send a pull request to add Dutch support.\nSee this video for reference on internationalization: https://vimeo.com/173575546\nI'm closing this issue as I believe it is not a bug in Grommet. We kindly appreciate pull requests! \ud83d\udc4d \n. Yeah, currently we are not removing propTypes in production and you have a fair point, we need to evaluate this as keeping propTypes could lead to bigger bundles.\nI don't have a fix in mind for this yet as we need to prune down the list of properties to pass down to child components. Do you have a suggestion?. Yeah, I don't think it is a big problem to leave a library with documentation for their documents in the production build. The grommet docs site will have to leave the propTypes in, but all the other sites I guess it is safe to remove it.\nI'm closing to close the issue for now. We can always revisit it if we find a good fix for it, thanks for bringing this up.. Please check this codepen where I show a recommendation of multi-select for a big list of items:\nhttps://codepen.io/alansouzati/pen/GErJNm. Thanks for your contribution. welcome to the team.. thanks for your contribution!. @monte-hayward  How are you able to reproduce it? Can you create a codepen for it?. thanks!! welcome to the team! \ud83c\udf89 . I could not reproduce the scrollbar issue. I've pushed changes to the distribution i hopes that will improve this.\nFor Grommet 2.0 we will re-evaluate the way Distribution is implemented. In the meantime, I believe this is going to stay as is.\nCheckout this commit that has some improvements already:\nhttps://github.com/grommet/grommet/commit/fc6f5a2a5dfa168a121106b3b2d977b63c374f73. Well done! thanks for adding the same code for checkbox as well. Welcome to the team! \ud83c\udf89 . Fixed in https://github.com/grommet/grommet/commit/cdd7eb349831eacd1548ece3ffe27520610e82b3. Thanks for reporting this. Fixed in https://github.com/grommet/grommet/commit/6e35a69df7df5dfed03f2647fd9eca635130c98e. thanks for your contribution. I will fix the extra call in my local system.. thanks for your contribution.. You should use e.target.value instead of e.value. thanks!. Im sorry about that. it should have any breaking change. Let me investigate that and release a patch fix that allows using import Grommet from 'Grommet'. I'm so sorry we added this breaking change in minor version increment.\nWe added the fix for that in this commit: https://github.com/grommet/grommet/commit/605d8bac8ed7bc08af4bfc61724f27957aa9bcdd\nWe are going to release 1.3.1 with this fix today.. Let me try to reproduce this.. Yeah, it turns out the return of the import was the Grommet object itself. Sorry I should have done that more carefully.\nI've added the fix for this here: https://github.com/grommet/grommet/commit/90f2a509222117e5ce177214cdd7e24f43ef0da5\nI'm going to release 1.3.2 today with this fix in it.. 1.3.2 released https://github.com/grommet/grommet/releases/tag/v1.3.2\nThanks for your patience @arabold . Humm \ud83d\ude22 \nI need to double check that, but you are probably right. Sorry it is being a while since I've touch the commonjs bundle and I apologize for the back and forth.. Cool, I've removed the Icon suffix from the exports in this commit:\nhttps://github.com/grommet/grommet/commit/a6b4ea54c686892e1d9aba1780bd2073fdc489ef\nWhen I release 1.3.3 (later today) I'm confident that you will be able to use grommet as you used to before 1.3.0. 1.3.3 released. hopefully this is it :). that's weird, let me try to reproduce this. I suppose this is something to do with es6 exports with conflicting names (which is not being used in your case).. yeah, this is happening because I've removed the suffix which I believe is wrong. We should be able to do:\nimport { App, LayerIcon, Layer } from 'grommet'\nI will add the suffix back and add a temporary fallback structure for es5. But, in the future we will be adding the suffix for Icons.. Cool. I've pushed this commit: https://github.com/grommet/grommet/commit/2c57e21973b7f1b87daf66cc1b2c515f201c9346\nNow we should be able to do both:\nimport { App, LayerIcon, Layer } from 'grommet'\nand \nimport Grommet, { Icons } from 'grommet'\nIcons.Base.Layer vs LayerIcon\nBut let me more careful this time with the release. The CI is currently running for this commit: \nhttps://travis-ci.org/grommet/grommet/builds/213957045\nWhen it is finished a stable branch should be published. Could you please try to switch to stable branch and test it?\nIf you are not aware of stable branch please checkout this page:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\nThanks for trying it\n. not at all. I should thank you for trying out this structure.\nI will release it. I tested with few other apps and it seems to be working. There are other people waiting for that also.. 1.3.4 released\nhttps://github.com/grommet/grommet/releases/tag/v1.3.4. App does not support align attribute, so I'm not sure what do you mean by \"proprietary\" attributes.\nIf you want to have the content of your app in the center of a page please use Box.\nI've create a codepen for you: http://codepen.io/alansouzati/pen/yMvoeR?editors=0010\nI'm closing this issue since I believe there is nothing to be fixed here. Please feel free to reopen if you think otherwise.. Thanks for bringing this up. Grommet does not support React router 4 yet. We should definitely look into this.. I spent a good amount of my day today trying to add support for React Router v4. It was somehow a frustrating experience. I really wanted to make that available in Grommet 1.3.2 but there is not much out there yet in terms of migrating from v3 to v4.\nI was hoping it would be a simpler change, but it is not that simple.\nPlease see this issue I've created with react-router to understand better the reason why I'm postponing the support of react router v4:\nhttps://github.com/ReactTraining/react-router/issues/4793. The support for react router v4 has been initially added in: https://github.com/grommet/grommet/commit/74ee5fe625e7777d30d6c49098b72863a4dfd1a6\nIt is supposed to be fully backwards compatible. Can you test it using grommet stable branch?\nIt would be a good idea if you could validate it works well before we release. I tested with a few apps but I would need more time to test with others.\nIf you don't know what is the grommet stable branch please refer to: \nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\nPlease wait this CI to pass before trying:\nhttps://travis-ci.org/grommet/grommet/builds/213287572. 1.3.3 released with this fix in it \ud83d\udc4d \n. Grommet xsmall size is only available in the latest Grommet release. 1.2.1 does not have support for it.\nCould you please upgrade to grommet 1.3.1?\nI'm going to close this issue since I believe there is nothing to be fixed here. Please feel free to reopen if you think otherwise.. Thanks for this issue. I'm adding a codepen for folks that want to easily reproduce this:\nhttp://codepen.io/alansouzati/pen/dvddbz?editors=0010. Yeah, sorry I should have tested this more. Let me work on a fix for this today.. Shame on me, sorry folks. I've fixed this on https://github.com/grommet/grommet/commit/cd5b9ac23cfba79682dc805ff7a84367a9c0bb9b\nI will soon release 1.3.2 with this fix, there are a couple of other items I will include in this release as well.. 1.3.2 released https://github.com/grommet/grommet/releases/tag/v1.3.2. can you provide more details? which version of grommet are you using? which version of node and npm?. this is very weird. I'm not able to reproduce this. can you share how are you importing it?\n```\nimport React, { Component } from 'react';\nimport App from 'grommet/components/App';\nimport Card from 'grommet/components/Card';\nexport default class Test extends Component {\nrender () {\n    return (\n      \n\n\n    );\n  }\n};\n```\nAlso checkout this codepen, this seems to be working: http://codepen.io/alansouzati/pen/oZEJOB?editors=0010.\nCan you delete and install your node_modules again?. are you using webpack 2? can you try adding a json-loader to your webpack config?. I believe we need to add the json-loader to the phoenix framework and push that to the repo.. I don't have experience with brunch. By looking at the logs I can say with confidence that there is something wrong with the way the loader works. As you can see node_modules\\character-reference-invalid\\index.json.js there is an unexpected .js suffix that most likely the loader is adding.\nIs there a way to configure extension with brunch ?. do you have .json as an extension in the brunch extensions array?. how do you declare .json extension using brunch? this config does not help much.\nunfortunately Grommet does not support brunch. \nSome issues that might be helpful:\nhttps://github.com/brunch/brunch/issues/1236\nhttps://www.npmjs.com/package/json-brunch: The last activity in this plugin was 4 years ago!\nCan you try to load a JSON file without grommet using Brunch? If this also fails, then it would be an explanation.. Yeah I also agree this is most likely not a problem in Grommet.\nI tried to check if vfile/index.js exists in my node_modules and in fact it does:\n\nCan you validate this on your end as well?. I have to idea why brunch is not able to import these modules :(. I'm going to close this issue for now as I believe there is nothing to fixed inside Grommet core.\nPlease post your results here once you figure it all out. We can always reopen later if we find that something needs to be fixed.. Fixed in https://github.com/grommet/grommet/commit/2cb231b2d64464d7ef8641ca5365bb580c674b81\nI've removed focus call to select an element. this seems wrong to me.. I don't think there is a way out of this. Eventually you will run out of real state. I've fixed the way we animate icons so that you can disabled it if you wish.\nAnother possible solution is to add a small horizontal padding to give space for the animation. The following codepen does that:\nhttp://codepen.io/alansouzati/pen/qrompj?editors=0010\nI'm going to close this issue for now. Feel free to reopen it if you have a better idea on how to solve this issue.. Fixed in https://github.com/grommet/grommet/commit/7fee701ff457bb91692e898100e4410ef5432b50\nIt will be soon part of Grommet 1.3.3. I'm going to take a look on this issue soon. Sorry that this it is taking a long time.. Fixed in https://github.com/grommet/grommet/commit/1874cde5a9f7db741afd9c76fea22369c77a827d. yeah I added support for 4.0, but I guess I did not do a good job testing it with the entire Anchor combination. I'm working on that now. Sorry folks.... Fixed in https://github.com/grommet/grommet/commit/7d785d4d18f2f62bd4eab1dae9f25bef02f99392. good catch @zacksinclair can you file an issue against https://github.com/grommet/grommet-docs ?\nthis is an easy one to fix, so I would really appreciate if you can send a pull request for that.\nThere is where the BoxDoc component is: https://github.com/grommet/grommet-docs/blob/master/src/docs/components/box/BoxDoc.js#L35. there are not mandatory I appreciate your contribution \ud83d\udc4d \nLet me review that in a little bit.. Great catch. and thanks for adding the pull request for fix this problem.\nI think there is an easier way to fix this. I will add as another comment.. I'm about to release 1.3.4 and i would like to make that into the release. I added the else case. I will merge it. \nThanks for your contribution and welcome to team.. glad that your first pr was for Grommet. hopefully I will see you around here again :)\nthere are tons of contributions that can be made in Grommet. 1.3.4 released with this fix included\nhttps://github.com/grommet/grommet/releases/tag/v1.3.4. Thanks for providing the codepen for this. It definitely helps us triage the problem. Fixed in https://github.com/grommet/grommet/commit/0cf51bbecd50603a89dcea98db1415c048604953. 1.3.4 has been released with this fix included https://github.com/grommet/grommet/releases/tag/v1.3.4. thanks for your contribution, I added a minor comment. would you mind fixing it?. I've updated it myself. I would like to get that in the 1.3.4 release \ud83d\udc4d \nThanks for your contribution.. Thanks for reporting this. Fixed in https://github.com/grommet/grommet/commit/53338188789e00d32ce9621331aa855c05f9447d. this looks like a bug. let me look into this. A fix for this has been added here: https://github.com/grommet/grommet/commit/f4552b1bf9c3d5b99f6a7fdfbad4be3b3f6a0971\nAlthough I would recommend removing the Toast for the virtual DOM when onClose is invoked, here is the codepen that we recommend:\nhttp://codepen.io/alansouzati/pen/qrKZKa?editors=0010\n. Yeah this makes totally sense.\nCan you work on a pull request for this?\nI believe there are two places we need to check for type=\"submit\", here:\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Button.js#L103\nand here:\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Button.js#L127\n. that would be awesome @raphi011, thanks for volunteering  . Fixed by the merged PR. thanks @raphi011 . Can you provide a codepen reproducing this issue? You can fork Grommet's codepen from here:\nhttp://codepen.io/grommet/pen/gaEGPY. Thanks. I'm able to reproduce this. let me work on a fix for that.. Fixed in https://github.com/grommet/grommet/commit/fcbf437e67e7e2f1010ab390606177d42defabe9. are you still facing this problem @ido-ran ?. can you add your $hpe-fonts-path to /grommet/scss/hpe/font ?. Thanks for the suggestion and sorry for taking such a long time to get back to you on this.\nI would avoid mixing currency with number. Currently NumberInput is just a tiny wrapper around the native <input type=\"number\" />.\nThere are libraries that handles internationalization stuff like react-intl and they do have format for currency. We would have to handle scenarios like \"1.000\" vs \"1,000\" which definitely adds complexity to the NumberInput.\nHere is a codepen that uses Grommet + React Intl\nhttps://codepen.io/alansouzati/pen/ZymqEz?editors=0011\nI'm closing this issue since I believe there is nothing to be fixed in Grommet. But feel free to continue the discussion, we can always reopen the issue if we identify something to fix.. thanks @SuhairZain, you are exactly right. your Div has to control its width. I would either remove the div wrapper, which seems unnecessary, or leave it and add a max-width to it.\nI'm closing this issue. Feel free to reopen if you feel there is something to be fixed in grommet.. good catch. thanks for your contribution!. I've recently added support for react v4 on Anchor.\nWould you be so kind to create a pull request to add the same support for button?\nCheckout these commits:\nhttps://github.com/grommet/grommet/commit/74ee5fe625e7777d30d6c49098b72863a4dfd1a6\nhttps://github.com/grommet/grommet/commit/7d785d4d18f2f62bd4eab1dae9f25bef02f99392. Take a look on the closeOnClick option here: https://grommet.github.io/docs/menu\nI've forked your pen, and it works:\nhttp://codepen.io/alansouzati/pen/rmaLZR?editors=0010\n<Menu closeOnClick={false}>\n. Any reason why you are not using <input type=\"number\" /> they have controls that are way smaller. The hit target for those are terrible in my opinion, but it does has the features you are looking for.\nCheck this codepen:\nhttp://codepen.io/alansouzati/pen/KmwgPr?editors=0010\nI'm going to close this issue since I believe there is nothing we would want to simplify in the NumberInput. Feel free to reopen if you think otherwise.. I added the changes @zacksinclair. Can you take an extra look?. perfect. thanks for your contribution.. Can you paste here the source code for the Chart you are trying to render?. Where is an example of a chart in codepen:\nhttps://codepen.io/alansouzati/pen/zzJQYZ?editors=0010\n. I'm closing this issue since I believe there is nothing to be changed on Grommet. feel free to keep the discussion going. we can always reopen if we feel there is something to be fixed.. I believe this is fixed. I remember pushing a fix for this. I've tested and I cannot reproduce it. I'm closing it for now. feel free to reopen if you can still reproduce it. If I'm not mistaken this is already present in Grommet 1.5.0. It is possible to have stacked layers. Grommet will render that. but this is not recommended for UX reasons.. Thanks for this issue.\nFixed in https://github.com/grommet/grommet/commit/6b7ec5c9bfc246e8f9d47d5d4450e6e99d3cbc9e. Showing tips on hover is not recommend and I don't think it is supported.\nI'm closing this issue because I believe there is nothing to be changed on grommet.. Fixed in the PR. thanks for your contribution. thanks for proposing a fix for this. I believe for backwards compatibility sake, I would vote for changing the type of the button. Can you work on a pull request for this?. Thanks for your contribution.. Here is a codepen that does what you are looking for. The underlying element of the select is an input hence the string requirement. \nhttps://codepen.io/alansouzati/pen/jwaOyB?editors=1010\nThe idea is to hold the displayValue in a separate property and use that for the Select value.. Thank for your contribution, I really appreciate you spending time to contribute to Grommet.\nAlthough, in terms of User Experience, this feature does not align with Grommet values. We definitely want to avoid using disabled elements since it is hard to know what you have to do as a user to enable it again. This is true for table rows, but also for buttons, anchors, and form elements.\nAlso, we are in the initial works of Grommet 2.0 and as part of this new release we will be driving all interaction through Anchor and Buttons. Which means that Table, List, and Tiles, will not have the current hover capabilities, it will be a markup. If you want a table row to be clickable just add a plain button as a child. In fact this is currently present in the existing Grommet stable branch, check out this codepen:\nhttp://codepen.io/alansouzati/pen/EWqGrE?editors=0010\nHopefully this all makes sense. Let me know your thoughts.\nEverything is still backwards compatible but we will be deprecating a lot of things before we release Grommet 2.0.. I'm going to close this PR, thanks again for your contribution.. Fixed in https://github.com/grommet/grommet/commit/74c060d93543be4a67364f0371e9971691fdabbe\nAlso added keyboard operability and accessibility.. Thanks for reporting this @raphi011.\nAlthough the current structure behaves as expected. \nThere are a lot of limitations with auto scroll to active suggestion. \nFor example, we support multiple active suggestions and it is not clear which element we should scroll.\nIn terms of UX, I would limit the number of suggestion with the top 10 matches. If the user wants better suggestions he can always provide a more detailed text. This is our recommended pattern.\nAlso take a look at this codepen where I created something that might help you:\nhttps://codepen.io/alansouzati/pen/GErJNm\nI'm closing this issue because I believe there is nothing to be fixed in Grommet. feel free to continue the discussion here. We can always reopen the issue in case we feel something needs to be fixed.. Yeah I've updated react-desc already.. this problem should now be gone. can some of you validate that so that I can close this issue?. thanks @ezzatron . thanks for fixing this!. well done, thanks for your contribution and welcome to the team! \ud83c\udf89 . Sorry for merging this without doing a better investigation.\nI agree with @RyanCCollins and @karatechops. The internal input is an internal representation and should not be accessed directly. The onChange inside Select always returns the entire option, so you can make the selection yourself. \n@aandr  I understand where you are coming from with the native DOM elements and keep them true to some extent. But in this case we are using an input to represent the selected value of a Select component. If we stayed true to the underlying component we should be using the select instead of input.\nI'm going to push a commit that will revert that change. Sorry about the confusion.. Thanks for your contribution.. I just updated react-desc to support react 15.5:\nhttps://github.com/grommet/react-desc/commit/bf69c63605bbbdf7d1a261535a54e93758d0263a. Also all the icons inside base folder are automatically generated. you can ignore them in your refactor. I've updated grommet-icon-loader to use the latest React also.\nhttps://github.com/grommet/grommet-icon-loader/commit/efd8279c2094b1bddaaa9105d9652c94e1f6d38e. hey @SuhairZain is still see 584 files in this commit. can you make sure base will not be there?. Well done my friend! Welcome to our team! \ud83d\udc4f . Fixed in https://github.com/grommet/grommet/commit/fda2c3cff10dd858437e5f9cb80d5c6967334775\n. This is the expect behavior. We scroll to the top because we set the focus inside the layer for accessibility reasons. When you close the layer the focus should return to the original element.\nUsers that have low visibility will not be able to see what is behind the layer, so relying on that is dangerous. If you need to show some information when a \"Layer\" is opened, I would recommend using a \"Sidebar\" where the content will be pushed to left instead of floating on top of the content.\nHopefully it makes sense.\nI'm closing this issue since I believe this is the expected behavior. let me know if you need help converting a layer to a sidebar.\nI'm pretty much available on Slack: http://slackin.grommet.io. Thanks for such a detailed information in this issue. I will be investigating this shortly.. Fixed by https://github.com/grommet/grommet/commit/2162e514f783f628a278d3720bbbe0f56f90f689. Thanks for your contribution!. Thanks for your contribution. That's a good solution in my opinion. I was working on a similar project and implemented exactly as you did. I'm closing this issue since I believe there is nothing to change on grommet itself. thanks for reporting this.. I just had a chat with @ericsoderberghp and he explained me a scenario where the float is useful. It was confusing to me also, hopefully we will fix this confusion when we release the new site for Grommet 2.0 \ud83d\ude04 \nHere is a codepen for that:\nhttps://codepen.io/alansouzati/pen/awPZpY?editors=0010\nThe align of It is cool is centered around the entire box, even though the header takes the top part.\nCompare this with a regular header and you will see the difference in the alignment.\nhttps://codepen.io/alansouzati/pen/zzyBzR?editors=0010\nThat said, float and fixed are not meant to be used together. We are closing this issue. Feel free to continue the discussion here.\n. This indeterminate state is in the core HTML5 spec. we should definitely add support for this in grommet.\nhttps://css-tricks.com/indeterminate-checkboxes/. yes this seems right. it would be interesting to see how to solve the toggle type when dealing with that. I don't think there is an indeterminate state for toggle.. I'm trying to reproduce this, can you provide a codepen for that @ibhag ? I don't think this is a grommet bug, but something where the request does not actually work. This is just an assumption.\nThat's why I believe a codepen is very important, it helps to isolate the issue.. Due to inactivity I'm going to close this issue. feel free to reopen if you still feel there is something wrong.. thanks @woodm1979 \n. yeah I just started experiencing that as well. let me see what is going on with markdown-to-jsx. Just to confirm, I'm assuming you've changed the App do use markdown component from Grommet?\nI can only reproduce the issue if I try to use that.. I've filed the issue on markdown-to-jsx project. it seems they forgot to compile to es5 before releasing.\nin the meantime you can update your package.json to use a specific version of markdown-to-jsx. \nI'm using 5.3.0 \"markdown-to-jsx\": \"5.3.0\",. Fixed they have released 5.3.3 with the fix included. Just make sure to delete your node_modules and run yarn upgrade or npm install again.\n. Badge is a rather simple component to live in grommet core. We recommend using Box to get the badge.\nCheck out this codepen:\nhttps://codepen.io/alansouzati/pen/vZgOyy?editors=0110. @XuluWarrior I'm not saying that there is not a place for Badges. I can see Badge as a component inside grommet-addons.\nLoginForm is a similar example of a component that should live in the addons. We will be soon moving LoginForm from core to addons.\nHopefully it makes more sense now.. Fixed in the PR. thanks @cblair . thanks for the contribution. welcome to the team. hey @thomas-romuald I'm trying to reproduce this issue. We don't use Selenium. It seems that the invariant 136 relates to trying to call setState when the component is already unmounted. By looking at the Accordion source code I cannot identify anything that could be causing this issue.\nHere is the source code for the Accordion if you want to take an extra look. There is no setTimeout, or setInterval. I've seen cases where this problem happens if you forget to unassign these listeners inside componentWillUnmount.\n. Fixed in https://github.com/grommet/grommet/commit/6299947ac8b7fa8c619226fc33035480cb6fdbfa. Fixed in https://github.com/grommet/grommet/commit/aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7.\nWhat is basically is rever of #1306 . Grommet does not recommend disabled input fields. But you can definitely achieve that by removing the DateTime when read-only and replace it with a native input with read-only attribute set.\nIt is confusing to show the icon in the right when it is ready only.\nI'm closing this issue since I believe there is nothing to be fixed on Grommet. We can continue the discussion and re-open in case we decide to fix anything.. We cannot reproduce this issue. I'm closing it. Feel free to reopen if you can reproduce it. And if you are able to reproduce,  please provide a codepen where we can validate it.. let me review this. sorry for taking a long time to look into this.. Fixed in https://github.com/grommet/grommet/commit/bfc03b1b18c4e579e997766d007ecd45a256ad72. let me work on this soon. thanks for reporting this.. Fixed by https://github.com/grommet/grommet/pull/1386. Yeah I agree with this change. Let me work on a fix for this.. Fixed https://github.com/grommet/grommet/commit/0ab7298a17ac1283f116dd780fef0a16e58d9877. Good questions. I'm compiling a list of issues that will require some UX work from us and this item is there. You should hear back from us soon.. we will be re-evaluating the way we do multiple select for Tiles, specially in mobile. This work will be part of Grommet 2.0.. Good suggestions. I'm compiling a list of issues that will require some UX work from us and this item is there. You should hear back from us soon.. Our team recently had a chat about multi-select. We want to avoid adding a lot of intelligence inside the dropdown. The example you provided is way better than what we have today for selecting multiple without being inline, but it still has problems. If you have 50+ items in your list and you want to select the 49th or 50th item, often times you will find yourself having to scroll all the way down to check/uncheck items.\nWe felt the need to separate the selected elements from the list of available options. We created a codepen with a recommendation for multi-select: https://codepen.io/alansouzati/full/GErJNm/.\n\nYou can notice that are two multi-select types:\n1) An inline multi-select Select component.\n2) A Search with suggestions and the list of selected elements outside.\nThis is our recommendation and we welcome feedback. Thanks for sharing your solution with us, it definitely helped us brainstorm about improvements. We will be soon removing multiple support for non-inline Select.\nI'm going to close this issue for now.\n. Thanks for your contribution!. That's a weird bug! Let me work on fixing that.. Fixed in https://github.com/grommet/grommet/commit/bbe56fac80c8da451c390e11f76ee29fb20628f9\nIt will be soon part of grommet stable and for sure on the next grommet official release.\nthanks for reporting this.. \nThanks for bringing this up. Yes we should definitely fix this. Can you create a github issue?\n\nOn Jul 20, 2017, at 10:31 AM, Julien L\u00e9vesque notifications@github.com wrote:\n@alansouzati\nThere is also some changes that has to be consider in Radiobutton.js. Those element are mounting with two label thus throwing an wcag2 execption where a form element needs to have only one label. Having more then one label may confuses the screen readers.\n\n${CLASS_ROOT}__input}\n          type=\"radio\" />\n     ${CLASS_ROOT}__control} />\n     ${CLASS_ROOT}__label}>\n            {label}\n      \n\nI'm currently using react-axe, and it throw this error : \"Fix all of the following:\nForm element has multiple elements\".\nI'm suggesting to change the wapper label for div, or to remove the inner label.\nDo you want me to open an issue ?\nAlso, is the Grommet team have or is considering to implement a WCAG2 or a a11y validator like react-axe?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. We are not being strict about the code coverage at this point. so don't worry. thanks for your contribution.. Agreed with that. thanks for your contribution.. closing this, let's manage it in the grommet-docs project.. Fully agree. We need a better documentation for that. We are in the works for Grommet 2.0 and we will be changing the way we do things regarding theming and SCSS. So we will provide documentation for that once we have Grommet 2.0 out!\n\nI'm closing this issue because we have already one open to track this:\nhttps://github.com/grommet/grommet/issues/704\nI'm looking forward to releasing Grommet 2.0 soon along with proper documentation on how to create customizable themes.. Thanks for reporting this. Let me try to reproduce this on IE11.. Fixed in https://github.com/grommet/grommet/commit/9f987ddaffffe3da28611336eb534da34549d2ce\nIt should be soon available on stable branch and for sure in the next Grommet official release.. agreed let me try and put something together for this.. Support added here.\nIt should be soon available in the stable branch and for sure will be part of the next grommet release.\nThanks for the suggestion.. Thanks for the feedback @arabold. The reason we have a component for Paragraph today is to control things like alignment and size.\nTextInput is an example of a simple wrapper around the TextInput, but it provides the ability to use suggestions with Search.\nTextarea is a component that does not have the need for any special attribute, not that I can think of. So that's why we decided not to implement a Grommet component for that.\nWe do have some global css that modifies the style for all textareas inside a Grommet application and as we move to a more self-contained strategy, we will avoid those global css modifiers. That said, I'm pretty confident to say that for Grommet 2.0 we will have a TextArea component \ud83d\udc4d \nHopefully it clarifies the confusion here.. thanks @adamroldfield you are exactly right. \nThe idea behind the onClick prop name for Box is: often times you click on it to go somewhere else. \nOn the other hand, the intent for Table is for you to select it and do some operation like delete, specially during a bulk operation mode. That's why we have different names for these two components. Hopefully it makes sense.\nI'm closing this issue as I believe there is no action item here.. I love that. Thanks for adding this functionality. Bem vindo ao time Grommet \ud83d\udc4d . Yeah that would be great if you can send another contribution for the Button. I'm happy to do it if you prefer, but my inclination is for you to do it since you had the idea in the first place.. Thanks for reporting this and for going the extra mile to investigate the problem. I've pushed a fix for this here:  https://github.com/grommet/grommet/commit/abbdae96be5965233c13e6c17c2af9abfb5fb614\nIn the meantime, you have two options:\n1) Convert your date to String before calling Timestamp.\n2) Using Stable branch in Grommet with the fix for it (it will be soon part of 1.4.2). we just release 1.4.1 yesterday.\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F\n. Thanks!. Thanks for your contribution and for going the extra mile to send the pull request.\nI'm sorry I've just realized the Carousel docs is missing the description for activeIndex and onActive. I'm going to add documentation for it today.\nThat said, let me explain what is going on here. activeIndex should be used together with onActive. Basically if you pass activeIndex we will just assume that you want to control the index change yourself. I've created a codepen that illustrates the correct usage of activeIndex.\nhttps://codepen.io/alansouzati/pen/gRpmzJ?&editors=0010\nProbably you are looking for something like initialIndex that will load the carousel in a given index in the first load only. This property is not directly supported, but you can achieve that by the combination of both activeIndex and onActive.\nHope it makes sense.. let me look into this.. Fixed by the merged PR thanks again @Slumber86 . hey @Slumber86 can you join our slack channel? I have few ideas for this that I would like to share with you. it will be easier to cat rather than describe the changes here.\nhttp://slackin.grommet.io. Thanks for your contribution. Welcome to the team!. This is actually fixed in the master branch and it will be part of the next grommet release.\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Timestamp.js#L42\nThanks for reporting this.. Thanks for your contribution!. Thanks @RyanCCollins this is exactly right. @windgaucho any updates?\nI'm going to close this issue since I believe there is nothing to be fixed in grommet. feel free to continue the discussion here. we can always reopen if we identify something to be fixed in grommet.. to get going quickly can you try to use the minified css instead of the Scss file?. I'm not familiar with Meteor, but if you have access to an HTML file you can include grommet styles in the head with a script tag. you can use the path available in CDNJS:\nhttps://cdnjs.cloudflare.com/ajax/libs/grommet/1.8.3/grommet.min.css. Unfortunately I'm not familiar with Meteor, I think there is something that needs to be there if you want to use Meteor with SASS (or any other css pre-processors). But my recent recommendation is to have a separate project for your styles that you can publish somewhere (and the published version will have the minified css). That way you don't need to involve special SASS in any framework.\nTake a look in this project: https://www.npmjs.com/package/zoo-grommet\nThey are overriding Grommet styles using SASS and publishing the result of that in NPM as a minified CSS.. hey @mvmsaikrishna you probably installed Grommet 2 (which is in alpha mode right now).\nTo install Grommet 1.x you need to run npm install grommet@1.9.0 . all good no problem ;). there are differences with the way JSX renders HTML elements.\nHere is a codepen that renders your logo:\nhttps://codepen.io/alansouzati/pen/PjEBwL?editors=0110\n. Very weird, thanks for identifying this. I was able to reproduce this issue. Let me try to fix it. This is actually a Chrome bug. I cannot reproduce it in any other browser.\nI added a work-around for this issue in this commit: https://github.com/grommet/grommet/commit/c31d7d106f2f5c580bcf5370320a703b68014342\nThe problem was: even though we are calling removeChild, Chrome seems to execute that successfully but does not remove the child for some weird reason :(. Fixed in https://github.com/grommet/grommet/commit/da14780c146e254a5ab59397824c7f034ac67012. Thanks for your contribution!. thanks for your contribution!. I added the changes, thanks for your contribution.. good catch. I've updated this PR to include a line break to avoid js lint issues. In grommet we have a max length of 80 characters per line.\nLet's wait the CI to finish and I will merge it.\nThanks for your contribution and welcome to the team! \ud83c\udf89 . Fixed in https://github.com/grommet/grommet/commit/59b56e65de2bdb1632089e956be1ff95a5870c3e. You can fork our template from here:\nhttps://codepen.io/grommet/pen/gaEGPY. yeah that's pretty bad. let my try to fix this.. just FYI I cannot reproduce this issue on Chrome.. Fixed by https://github.com/grommet/grommet/commit/6b7ec5c9bfc246e8f9d47d5d4450e6e99d3cbc9e. good catch. thanks for reporting this. I'm working on a fix for this\n. Fixed https://github.com/grommet/grommet/commit/03c333a3eb4e5e028b9a238b6248f70cff2b07b2. I just tested this with IE11 and I cannot reproduce this issue. :(. I'm thinking this could be related to some version of React. I will merge the PR though, I tested your change and it still works on all browsers. So I'm sure this is better than what we have.. thanks for your contribution. Good point. We have the type option in the cli. Type basic I believe is exactly what you are looking for. You can type `grommet new --help\u2018 to see all the available options.\nWe should probably update the get started page to say that the cli has the help task.\nWelcome to our community \n\nOn Jun 19, 2017, at 8:16 PM, sclanc notifications@github.com wrote:\nAs a first time user (first exposure within the last 20 minutes) I thought the grommet team might appreciate some feedback:\nIt would be lovely if the grommet-cli had a lean option, I want to use the cli because it takes a care of things that I wouldn't want to worry about when implementing the standalone, and I prefer to use npm to install packages, however, I don't need or want all of the boilerplate content that comes with the project, I may not want to use react-router, or redux, and I don't need all of the pages. Thanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Fixed by https://github.com/grommet/grommet/commit/8121d85648b2f5ce6f1720e79f23b29c2c85f86b. this is already present in Grommet 1.5.0. Thanks for reporting this. Are you up for a pull request to fix this?\n\nThe source code for the form-field in the docs is here: https://github.com/grommet/grommet-docs/blob/master/src/docs/components/form-field/FormFieldDoc.js. fair enough. I will make sure to add documentation for these fields.. I was able to reproduce this in IE11. Not on Edge. I'm working on adding a fix for this. Thanks for reporting it.. Yeah after my investigation I realized that the issue is because the width of the Notification is driven from its parent width. Layer does not have predefined width so we recommend adding a Box element as the immediate child of a Layer. In your case I would recommend adding a Sidebar. Check out this codepen:\nhttps://codepen.io/alansouzati/pen/jwadRb?editors=0010\nI'm closing this issue because it seems that there is nothing to be changed at Grommet core.. Agreed we will revisit this for Grommet 2.0. 24kb is not the end of the world and removing this now could lead to breaking changes for existing apps.\nI will leave this issue open and close it after releasing Grommet 2.0. This is already fixed in 2.0.\nWe cannot remove this in 1.x as it will lead to breaking changes.\nI'm really sorry that you have to have these extra peaces in there. In the bright side, it is only 24kb without gzip, so the difference in the final bundle size should not be that big.\nI'm closing down this issue since it is already fixed in 2.0 and it will not be removed in 1.X.\nFeel free to continue to discussion here.. interesting concept. it is the first time I see await being used for webpack, so thanks for sharing that.\nYeah the way react-intl addLocaleData function works is by receiving the language, not the locale. Although, they have the locale specificity inside the object returned by import('react-intl/locale-data/${locale}').\nTo solve this mismatch in the file names I would do a string replace. getCurrentLocale is just returning whatever the browser configuration is.\nFor example:\nconst locale = getCurrentLocale();\n  const language = locale.replace(/\\-.*/i, '');\nen-US would be replaced to en to get the language.\nHope it helps.\nI'm closing this issue since I believe there is nothing to be changed in Grommet. Please feel free to reopen if you disagree.. Fixed by https://github.com/grommet/grommet/pull/1402\n. Well I believe we should not be wrapping the Form in a box size Small. it is pretty narrow and difficult to use.\nHere is the codepen with the proper combination of FormFields and FormField\nhttps://codepen.io/alansouzati/pen/vZJVaM?editors=0010. Notice the usage of compact in there.. There was not fix for this. so your existing grommet should support this already.. Did you check the codepen ? https://codepen.io/alansouzati/pen/vZJVaM?editors=0010\nYou need to use compact prop.. I tried it on few android devices and it does come on top but as soon as you type they set the focus again in the search field. I'm afraid there isn't anything we can do in our end to fix that. Thoughts?. I don't think we can control that in our end. Do you have any suggestions? \nOne solution would be to use another component like the native select specifically for mobile. The problem with the select is that it is not a native control and I cannot figure out a way that it would work for you, unless you have something in mind.\nCheckout our responsive utils that allows you to know if a Grommet app is in a mobile context.\nhttps://grommet.github.io/docs/responsive/\nI'm going to close this issue because I believe there is nothing to be done in the grommet side of things. Feel free to reopen it if you got a solution in mind.. Thanks for your contribution. thanks for your contribution. I would run npm test, or gulp jslint before commiting. I have pre-commit configured automatically for grommet repos. I'm curious why you are able to commit locally when the lint is failing.\nBTW, thanks for the great attribute to give back when possible! <3\n. Hi @KenLeeKH we don't have color themes but brand themes. For example you could use the HPInc theme as opposed as the HPE theme. Our theme capabilities is for a brand which will often have a different color palette.\nFor example, these are the colors for the Grommet theme: https://grommet.github.io/docs/color\nOn the other hand, there are the colors for the HPE theme: https://grommet.github.io/hpe/docs/color/\nIf you want your app to have a Dark context I would wrap a Box around your main Grommet App with a dark colorIndex, check this codepen:\nhttps://codepen.io/alansouzati/pen/qjydKw?editors=0010. Thanks for raising this issue. LoginForm component should not live inside Grommet core components just because of the reasons your outlined here. It is a very high level component that can lead to these needs for customizations. We will be moving LoginForm to grommet-addons project, this repo will host components that will both serve as a reference that you can copy, but also a ready-to-use component in case the design matches with your needs.\nThe idea behind these components will be to have some flexibility but not a lot of that, in case you need something very specialized you can copy the component source code and change it to match your needs.\nIn your case I believe you need a Signup component which will be semantically different than the LoginForm. It looks odd to have a LoginForm component that has a button that says 'Create Account'.\nI'm closing this issue because I believe you will need a separate component anyways.. so sorry about this guys. I was not receiving email notifications from github. thanks for your contribution!!. Thanks for this issue. How about people who are using the suggestions? \nI would rather find a fix that fix the solution for both cases. Can you create a codepen that reproduces this problem in Grommet? . yeah that's weird I could not find a better solution :( I will merge your PR. I cannot reproduce this\n. can you update your IE11 ?. I still cannot reproduce it. Can you update to the latest IE11?\nThis can be and most likely is a browser issue. Check out this page, the supported browser version is always supposed to be the latest:\nhttps://grommet.github.io/docs/browser-support. this seems to be a grommet-index filter which is a separate project.\nThe core grommet team does not maintain grommet index anymore. The reason we stopped maintaining it was the fact that it has too many abstractions  in place.\nCould you please open an issue against grommet-index? We are relying in the community to jump in and fix any issues related to Grommet index project.\nI'm closing this issue in Grommet core.. thanks @linde12 . Thanks for this issue.\nWhere it makes sense we will allow for the icon to be changed, for example Menu does support the icon prop https://grommet.github.io/docs/menu.\nSearch is an example of a component that we will not allow changing the icon because we cannot see a reason for that. If we allow this we will open for this kind of things: <Search icon={<BackIcon />} /> . This is definitely dangerous. Another use case that is exposed with this kind of thing is having two search components in the same application with different icons, which can leave to inconsistencies in your UI.\nI agree some of our icons look rather big, we may add support for properties like size which in this case will allow the icon in the corresponding component to change the appearance a little bit.\nHopefully it all make sense. I'm closing this issue for now but feel free to continue the discussion. We can reopen the issue if we decide to support icon prop across the board.. Thanks for your contribution. I have an idea how to fix this problem differently. I will try that separately but this already makes our code much better the way it is, so yeah I'm merging this \ud83d\udc83 \nwelcome to the team.. Thanks for reporting this, but this is not a bug.\nYour form validation should let the user know that the date is invalid. I would not recommend removing string characters, for example this is a valid date: 12/20/1987 4:15pm and it has a bunch of characters in it.\nTake the Expedia site an example: https://www.expedia.com. Even in that case we do not recommend removing characters. Our pattern is to let the user type the wrong input and validate when you submit the form. I would be happy to reopen the issue if we identify anything that needs to be changed in Grommet.. If you really want to remove the character you can listen to onChange. Grommet will not add that as a built-in solution as it is not a recommended pattern.. Fixed https://github.com/grommet/grommet/commit/7d4d87db958e046c414882590377aab161833fee. Fixed by https://github.com/grommet/grommet/commit/d6858fd5577d34758d098b35c2b04a8ca8c45d71. This is not bug. Check this page:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number\nGrommet NumberInput is just an <input type='number /> with extra style (like the plus and minus buttons).\nI would recommend subscribing to the onChange if you want the content of this form input to be number only. \nI believe the best experience is to let the user type anything he wants and add a form validation when the user submits the form.\nI'm closing this issue because I believe there is nothing to be fixed in Grommet.. @dunnock and I identify the fix for this. he will be sending a PR soon. Thanks!!!. Thanks so much for your contribution. But the code for these icons are automatically generated. We do not edit them manually. That said, I believe it does not make sense to test them again as we test it already in this project: https://github.com/grommet/grommet-icon-loader\nI'm closing this PR but I really appreciate your initiative. Fixed in https://github.com/grommet/grommet/commit/99d0d90f01853397b9d34cd4ceeccef345cc0e2b. Yeah this is a limitation of the Select component as of now. The underlying component behind the selected value is an input which does not allow anything but text. I will keep this open and evaluate other solutions for Grommet 2.0. Thanks for raising this issue.. if you look at this line: https://github.com/grommet/grommet/blob/master/src/js/components/Select.js#L441\nYou will see the input is used as a readonly element. Also if you search for this.inputRef you will see that we pass that to existing Grommet 1.X users. This is a 2.0 feature because we cannot remove support for that as it will be mostly likely a breaking change if you are using the input reference.\nWe will take your request into consideration when redesigning Grommet Select during 2.0. Grommet 2.0 is already in the works. If you can find a fix for that without having a breaking change I'm happy to review and approve your pull request.\nWe are using the Label with rich JSX today with Select but we don't hold the selected value in the Select itself. But I agree with you, it is a frustrating experience to have rich JSX support in the label but not in the selected value.\nHopefully it clarifies your questions \ud83d\ude03 . Nicely done. Just came back from a happy hour. I will merge this first thing tomorrow, cheers\nSent from my iPhone\n\nOn Jul 13, 2017, at 10:20 PM, Drew Lustro notifications@github.com wrote:\n\ud83c\udf7b Added React component support to Grommet Select's render() in #1426\nI do not believe there are any regressions. All tests pass.\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for your contribution! Welcome to the team!. Indeed a good suggestion. Today I'm working to add Menu to Grommet 2.0. I will make sure to incorporate this \ud83d\udc4d . yeah I agree that our current build time sucks :)\n\nThe good news is that Grommet 2.0 builds much faster, and we are not using gulp.\nI also agree that if we depend on Tiles be present as a parent we should at least make it more clear in the documentation. Let me take a look inside Tiles source code to determine if we should require that. I will keep you posted.. I believe this problem is related to a timeout problem. That's why it is an intermittent behavior. I tried to reproduce this but I was not able to. I added a commit that I believe will fix the problem by clearing the timeout when component unmounts, here is the commit:\nhttps://github.com/grommet/grommet/commit/029d0491d968bfb0ecc0bcebb753802bc072cbc9\nI'm closing the issue for now. We can reopen if the problem persists. Thanks for reporting this.. fixed by https://github.com/grommet/grommet/pull/1443\nThanks again @jlevesque . can you send a PR to update that?. Thanks for your contribution. Yeah. We are currently re-evaluating how we do messages for Grommet 2.0. \nCurrently Grommet 1.x uses react-intl also. We don't have the resources to provide the translations for every language. I would recommend adding the spanish support for all the keys that are in this file:\nhttps://github.com/grommet/grommet/blob/master/src/js/messages/en-US.js\nThey are used mainly for accessibility reasons. For example Skip To will be there if you press tab in your app. Blind users will rely on screen readers to read the content in the screen.\nHope it helps.\nI'm closing this issue since I believe there is nothing to be changed in grommet but feel free to continue the discussion here.. no :( we have Intl.getMessage all over our source code.\nWe will be removing this in grommet 2.0. I understand that forcing you to translate content is bad, but in this case it is for a good cause. It is important that folks with disabilities have content in spanish too :). You are already using react-intl today right? So I'm assuming you have the keys in your file for the messages you provide. I would just blend in the keys that are warning in your console. Does it make sense? The default values for those entries are in the file I sent you. So you would need to translate from english to spanish.. Thanks for your contribution. welcome to the team! \ud83c\udf89 . nicely done! thanks for your contribution and welcome to team! \ud83c\udf89 . Do we need this as a core Grommet component? I believe this should be in Grommet inspire.. cool. closing this issue.. Animation is now part of Box.. based on a chat with @ericsoderberghp, I believe Footer will be removed in 2.0.. . No form needed just use the native HTML form and restrict the width with Box. You can achieve the same with Box with border. We will soon provide reference implementation on Forms for Grommet 2.0. based on a chat with @ericsoderberghp, I believe Header will be removed in 2.0.. . nope!. based on a chat with @ericsoderberghp, I believe Legend will be removed in 2.0.. You can easily achieve that with Boxes. We wil soon provide a sample on how to create Legend with Grommet 2.0. Hey @guillaumeLamanda this is actually already possible in v2. We thought initially to explicitly add these components, but I think this is pretty straight forward in V2. Check this codesandbox:\nhttps://codesandbox.io/s/9ljmy5xjoo\nI'm closing this issue because I think our inclination at this point is not to add List and ListItem. Please let me know what you think of this codesandbox. We can revisit, but notice that List and ListItem is a only line component.. you can easily achieve that with Box. You can use textinput with type number. based on a chat with @ericsoderberghp, I believe Value will be removed in 2.0.. You can now use a TextInput, with type password. We will provide sample on how you can create a PasswordInput component using Grommet 2.0. based on a chat with @ericsoderberghp, I believe Value will be removed in 2.0.. You can now use a TextInput with suggestions, with type search. We will provide sample on how you can create a Search component using Grommet 2.0. based on a chat with @ericsoderberghp, I believe Value will be removed in 2.0.. You can use TextInput and put a Box with border to achieve this.. based on a chat with @ericsoderberghp, I believe this component will be removed in 2.0. I don't think we need this component.. We can currently evaluating if we will implement TableHeader and TableRow as part of Grommet 2.0. This can now be easily done with Boxes. We will provide sample and codesandbox but we will not add tiles as our component set. based on a chat with @ericsoderberghp, I believe Value will be removed in 2.0.. we are going to add reference repos in github as opposed to a new cli.. This is a problem with parseFloat and not with Grommet.\nHere is a codepen that fixes your problem:\nhttps://codepen.io/alansouzati/pen/vJMdMz?editors=1010. I would recommend checking this wiki page: https://github.com/grommet/grommet/wiki/Why-Grommet-2.0%3F. Especially the \"What is going to break?\" section.\nI understand that you would like to avoid two big refactors in a short span. But if you follow what is described in this Wiki I believe your second refactor will be very small.\nI'm going to close this issue since I believe there is nothing to be fixed in Grommet. But feel free to continue the discussion. Welcome to Grommet. I will take a stab at this. @RyanCCollins i will ping you to see how I can continue your work. moi @dennari. olen iloinen, ett\u00e4 voit auttaa.\nPlease join our slack channel if you haven't already. https://slackin.grommet.io. let me know your id I will create a channel for you me and @RyanCCollins.. I still haven't got the chance to add the typescript bindings. But you can still use typescript without it right? This shouldn't stop you from choosing grommet \ud83d\ude04 \nI'm wanting to start my investigation on this today. I will keep you posted.. I'm sorry about that this is a bug!\nI'm really glad to see that you are testing this stuff. Let me work on a fix for this today.. Fixed by https://github.com/grommet/grommet/commit/5109f7ea05d2733b1a52228308b159e2907ff4dc. I don't think there is a generic solution for this. This is IE11 implementation bug. \nMy recommendation is to add max-width in the containers you know are problematic. Here is a codepen that fixes your problem:\nhttps://codepen.io/anon/pen/oeXZNV?editors=0110\nCheck this stackflow: https://stackoverflow.com/questions/19138107/ie11-flexbox-preventing-text-wrapping\nThe reason we cannot apply a generic fix for this is the fact that Button has a max-width of 384px. If we apply max-width: 100% to all box children we will break Button max-width for when Box size is bigger then 384px.. thanks for your contribution. thanks for your contribution.. thanks!. Yeah I'm able to reproduce this. let me investigate what is going on...\n. Fixed in https://github.com/grommet/grommet/commit/22ff8308e634829a519010826664ab6cf341a6ab. I like all the simplifications and changes. well done!. This looks good. I believe there is code that we can eventually reuse here. but this can be done separately.. yeah I noticed that after releasing 1.6.0. let me investigate what is going on and release 1.6.1 sometime later today. sorry about that.. Yeah. are you using recompose with Higher Order Components? History, intl are usually present in the context, but I've seen cases where folks create HOCs to transfer that to props.\nWe have a lot of components that pass down props for various reasons. like adding and id prop to a container. or data-* properties. Initially we did not have the prop transfer capabilities and we are slowly adding it to other components.\nYour test is actually the right way of doing it. But any reason why not using the context for these things?\nI'm closing this issue for now but feel free to continue the discussion here.. @jstlaurent perfect interpretation. I should have looked into it more carefully. We should remove them in our end before passing it down. I'm going to work on a fix for this today.. Fixed in https://github.com/grommet/grommet/commit/0b9795ba3285303015a336e8e2910de7b407ffb1. well done thanks for your contribution and welcome to the team. thanks for your contribution and welcome to the team. Thanks for fixing this @karatechops . Thanks for fixing this @karatechops. I'm going to close this issue and reopen if the problem persists\n. thanks. this looks good for now. we will need to revisit this in Grommet 2.0. We should probably avoid to absolute position the icon in the right side.. Fixed in https://github.com/grommet/grommet/pull/1596\n. Thanks for reporting this.\nFixed in https://github.com/grommet/grommet/commit/dee17e1a12af5ec7f4e5a2abf8462b41d98d20ab. thanks for your contribution. I like the idea and thanks for having the initiative of sending the pull request. Does it make sense to put that information inside path object?\n(router.history || router).push(path.path || path, path ? path.state :  undefined);\nThis avoid adding a generic state prop to Anchor or Button. Thoughts?. nicely done!. Fixed in https://github.com/grommet/grommet/commit/22ff8308e634829a519010826664ab6cf341a6ab. Sorry. I completely missed this. Let me review this.. Hey @Thuranel thank you so much for your contribution and again sorry for taking such a long time to get back to you on this.\nI believe there is an easier way to solve this problem. What if we always send the onClose to ToastContents ? Here is a screenshot of the change that I did and it seems to work.\n\nWould you mind updating this Pull Request to reflect this?. Fixed in https://github.com/grommet/grommet/commit/22ff8308e634829a519010826664ab6cf341a6ab. Thanks!!. thanks!. We don't have anything as great as the fiber site, but our backlog is open, here is the URL of the missing cards for 2.0:\nhttps://waffle.io/grommet/grommet?label=2.0\nGrommet 2.0 alpha is already out. Our documentation is still very early, but you can use Grommet 2.0 today. More information in this site:\nhttps://v2.grommet.io\nyou can install v2 with with npm install grommet@2.0.0-alpha.0\nI wish I would have enough time to implement something as nice as that site \ud83d\ude03 . You should see a great advance of Grommet 2.0 in November.\nIn a couple of weeks we want to release a Beta (the beta will include the actual v2 site).\nBy the end of November I believe we will have the first release candidate out.\nMy inclination is to take December to test the release candidates and by the end of the year finally release 2.0.\nThanks for asking these questions and I hope this plan works for you and your team.. \n. with this PR you can get to that Box in the footer without any custom css.\nCode is like this:\njavascript\nconst footer = (\n  <Box tag='footer' align='center' pad='large'>\n    <Box\n      border={{ radius: 'xlarge' }}\n      background={{ color: 'dark-1', opacity: '0.1' }}\n      pad={{ horizontal: 'large', vertical: 'small' }}\n    >\n      <Text textAlign='center' theme={codeFontTheme} size='large'>\n        <strong>npm install grommet-icons</strong>\n      </Text>\n    </Box>\n  </Box>\n);. Personally I'm not a big fan of \"typed\" frameworks for javascript. I like the flexibility of the language and I feel es6 solved a lot of my frustrations with prototypical inheritance (classes, arrow functions).\nWe try to stay as close as we can to Javascript so that we know what is going on and what the browser will deal with. We try to be careful when using Babel plugins for the very same reasons.\nI believe we should definitely support TS bindings, no matter how difficult it will be, we should provide them. But, personally, I don't see Grommet source code written in TS.\nThanks for bringing this topic @BjornMelgaard. . Thanks for your contribution @srallen, and good to hear from you again! \ud83d\udc4d \nYour contribution makes sense to me. One small suggestion, I believe we should have a suffix for the drop. For example:\nUsing this:\njavascript\n   <Menu className='zoo-menu' />\nWould result on something like this:\nhtml\n<body>\n   <div className=\"grommetux-menu__drop zoo-menu__drop\">...</div>\n   <div className=\"grommetux-menu zoo-menu\">...</div>\n</body>\nThoughts?. thanks!!. I guess this issue it is better to be reported to Chromevox. We don't actively use it but we would be happy to fix anything that we identify on Grommet that needs fixing.. Good point. I've been using peer dependency for some of the gulp packages that I've written. For example gulp-jest. This use case seems to be the standard for gulp libs since gulp is just a tiny wrapper around the underlying lib.\nOn the other hand, Grommet + React relationship is a much stronger linkage and having that as a peer dependency seems to relax that boundary which seems risky as we rely on the React lifecycle functions. Using the caret (e.g. ^15.6.0) seems like the right solution. Thoughts?\nFYI, I'm in the process of updating Grommet 1.X and evaluating if there is any breaking change to it. If there is a breaking change we will be forced to wait to move to React 16 when we release Grommet 2.0.. After reviewing this in more detail I believe it makes sense to have it as a peer dependency. specially now that we are updating Grommet to user React 16. We cannot just force everybody to move to React 16 immediately. Thanks for the insights here @karatechops and @anpieber . Fixed in https://github.com/grommet/grommet/commit/bc7f04bb54a1ddead0fd436bb6635f6056dd649e. I'm so glad to have community members trying out React 16 already. thanks for the effort here @linde12 and @slipperypenguin.\nI'm in the process of updating Grommet 1.x to React 16. I will keep you guys posted.. Yeah this change was done one year ago, and it was a planned change. Back in the days we did a minor release with this, so our apologies for releasing a break change in a minor increment.\nThe docs seems to be out of date, we should definitely fix this. @dgennetten as you are working on this, I believe we can fix it by updating the documentation.\nLet's say you have the following structure:\n<div>\n  <Heading />\n  <Paragraph />\n  <Text />\n  <Heading />\n  <Text />\n  <Paragraph />\n</div>\nyou probably want margin top and bottom in all headings, expect the first one. You can anytime override the default settings by doing something like this (for grommet v2):\n<div>\n  <Heading margin={{ bottom: 'large' }} />\n  <Paragraph />\n  <Text />\n  <Heading />\n  <Text />\n  <Paragraph />\n</div>\nThoughts?. sorry about that folks. Let me look into this and release a patch (1.8.3) today. Fixed in https://github.com/grommet/grommet/commit/0002ee0a22573e8784a66b32fba85947bc9b2039\nLet me release 1.8.3, I will put it here when we have the patch release available.. Fixed by the PR thanks again @fauricioRojas . NICELY DONE! thanks for your contribution. I will the ci to finish and will merge it. welcome to the team.. it should be available in the stable branch and soon in the next version of Grommet. We don't have a release date yet. if you need to use stable here is a document that explains how to use it:\nhttps://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F. Hey this seems like a problem of missing CSS. Grommet 1.x does require you to manually include the styles or use SASS. if you installed using NPM we include the minified styles in there. Or if you prefer you can use CDNJS to get grommet styles applied to your app:\nhttps://cdnjs.com/libraries/grommet\nhttps://cdnjs.cloudflare.com/ajax/libs/grommet/1.8.3/grommet.min.css\nI'm closing this issue, but feel free to continue the discussion here.\n. makes total sense. can you send a PR for this? thanks for identifying this. you are the best!. would you mind updating this PR to include only the logic to skip processing tabs if it is hidden?\nif (hidden) {\n  return;\n}. thanks for your contributions to the grommet team!! you are the best \ud83c\udf89 . Fixed by https://github.com/grommet/grommet/pull/1704/files. thanks!. Fixed by this commit\nThanks for reporting this.. do we know why it sets margin-top in the first place? can we avoid that to happen?\n. I would defer that to @ericsoderberghp. I believe this will affect the layout of existing 1.x applications and can be classified as a breaking change. . Thanks @atanasster, you are exactly right.\nIf you are using v2, please refer to the temporary site for reference.\nI'm closing this issue since I believe there is nothing wrong here.\nIf you are curious to understand why we don't have form, the reason is that we believe you can achieve the same using Grommet v2 Boxes.\nSee this codesandbox for reference\n. yeah indeed thanks @dgennetten . The latest official release is 1.8.3 and it does include all the components described in https://grommet.io.\nIf you want to explore Grommet v2, you can refer to this temporary site: https://v2.grommet.io.\nWe still do not have Tabs as part of Grommet v2.\nI'm closing this issue since I believe there is nothing to be fixed here. Feel free to continue the discussion  here.. We have had a fix from the community that probably fixes this.\nhttps://github.com/grommet/grommet/commit/8b2f95252053e8717779f48ccca528de5c0651a5\nCan you try to use grommet stable and see if your problem is gone?\nWe are going to release a new version of Grommet soon.\n. cool. let me work on releasing a new grommet version. We should have 1.9.0 by the end of the day!. Palo Alto, CA. If you ever come to the bay area let us know, we can schedule a happy hour \ud83c\udf7b \nIt is always good to chat with the community and grab info on things they like/not like about Grommet \ud83d\udc4d . Thanks for the feedback. There is an issue already open for this. Let's keep the discussion going there.\nhttps://github.com/grommet/grommet/issues/1008. This definitely looks like a bug. By a quick investigation, it seems that this line is the culprit. Are you up for a pull request to fix this?\nHopefully I will be faster reviewing your pull request (I remember you sent a pr that I took forever to review and approve).. this sounds promising, but the style changes is making it really difficult for me to review this since it is showing a bunch of changes like the \"double quote\" conversion. Can you update this PR to include on the changes regarding localizing date?. thanks for your contribution!. hey @msuiche can you try this with the latest grommet?. Hi @emilycoco thanks for your contribution!\nAlthough the build is failing with:\nError: File to import not found or unreadable: ~inuit-defaults/settings.defaults.\n       Parent style sheet: /home/travis/build/grommet/grommet/src/scss/grommet-core/_settings.scss\n        on line 4 of src/scss/grommet-core/_settings.scss\nI've seen ~ being used in webpack contexts before. If I'm not mistaken we use that in some of our example apps. The problem with adding this to grommet core bit, is that not everyone is using webpack. I know some folks are using browserify with Grommet and I believe adding this will also break their build.\nAny thoughts on this?. Yeah, that's a good idea. I'm sorry for that, I was not aware of the tagging capabilities of NPM (shame on me).\nI will soon fix this by releasing a new version of 1.9.X. After this is done, I will make sure that all future v2 releases will have the proper --tag next.\nThanks for bringing this to our attention. I will leave this issue open while we don't release new stuff. . great contribution!! thanks and welcome to the team.\nThanks for using Grommet v2. Hopefully you are having a good experience with it.. I really like this change!! Well done. Thanks for bringing this to your attention @srallen. I will take a look on this soon. . we are on v4 now right ? is this still an  issue?. let's keep this open so that we can work on adding support for active in both RoutedAnchor and RoutedButton. good point. I'm planning to remove that and let the callers add it if they need for a specific browser. date-time-format-timezone is a polyfill that will only be used if the browser does not support it.\nCheck here: https://www.npmjs.com/package/date-time-format-timezone\nIt is expected to have 2MB without gzip for all locales, so I guess it makes sense to let the caller decide the ones to include.\nIf you are curious about the browser compatibility check out this MDN page:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\nI will also investigate if there is any better solution to this.\n. I'm probably missing something. but do you have access to the placeholder and onChange in your end right ? since you passed it to select in the first place? I believe the way value is done today should be enough for your needs. Let me try to create a codesandbox that replicates your multi-select with tags.. yeah. after playing with this a bit, I agree with the fact that we need something to allow a special render for value (aka selected elements).\nI don't think label is the right prop. I propose we name it valueRender. @ericsoderberghp the problem with value as a node is that you need to start taking care of a bunch of things on your own. For example, as value is always defined, the placeholder will never be presented.\nAllowing value to stay as it is, we can leverage all the Select code for placeholder, active button for when elements are selected...\nI don't think we need any extra argument rather the currentValue,\nTo summarize, this is the api i'm looking at:\n```\nexport default class MySelect extends Component {\n  state = { value: [\"First\", \"Third\"] };\nrender() {\n    const { value } = this.state;\n    return (\n         {currentValue}}\n          multiple={true}\n          onChange={event => this.setState({ value: event.value })}\n          options={[\"First\", \"Second\", \"Third\"]}\n        />\n    );\n  }\n}\n```. this is super interesting. sorry for taking such a long time to investigate this. I will add that to both v1 and v2 and see what is going on.. hey @schettino let me know if you want help on that. it would be nice to have both codesandbox and stackblitz available on v2.grommet.io. @EricSimons do you know if StackBlitz supports github integration?\nThis is the project we created to integrate with code sandbox. Any updates in this project, the codesandbox is also updated.\nBy a quick look in your site I could not find references for github integration. no. It has its own structure that matches what create-react-app generates (same script names and such).. looking forward to trying it out.. I still would like to keep this open. @EricSimons do you have any updates on this?. Yeah one way or the other we should provide this. My inclination is to start with the v2 template as is and offer a grommet v1 theme. @ericsoderberghp thoughts?. currently we do not expose a way to extend the styles inside the Select search. for example: using plain text input instead of the default one that has border. I think we have a couple of options:\n1) Have a prop called searchProps in Select. I don't like this option a lot since it does not scale well (not very themeable). \n2) Inside the select vanilla theme we could expose an option to use a custom TextInput, similar to what we do with the icons.\n```\nclass MyCustomSearchInput extends Component {\n  render() {\n    return \n  }\n}\n{\n   select: {\n      searchInput: MyCustomSearchInput,\n   }\n}\n```\nThoughts?\n. The current situation is that we have to clone the Select entirely just because we could NOT have a custom style for the search text input.. well. the search has a lot of implications for select. I feel if we do the header approach, we will have some weird things like \"don't use onSearch if you are passing header\". Plus, for every search implementation we have to remember to use the header prop. This does not feel very \"themeable\" to me.\nMy preference is still the searchInput entry inside the theme. If you are ok with that I can craft a PR for this.. I don't think it is possible to remove styled-components from the vanilla theme. Let me explain you why (and I'm open to suggestions if you have a better idea on how to solve the problem).\nTake for example the Menu, we want to allow developers to use a different icon as opposed as the default FormDown from grommet-icons. There are few ways to solve this:\n1) Pass an icon prop to Menu. Problem here is that you would have to pass this prop to all menus in your app. or create another component just for the sake of hosting the extra icon property.\n2) Configure the menu icon prop in the theme. This allows all Menu instances to inherit this icon. This feels more natural and this was the approach we took.\nTo achieve the level of dynamism that we envision for grommet v2 theme, we don't see it as a regular object, otherwise we would have named it vanilla.json. There is a reason for vanilla to be a javascript module.\nIf you want a custom theme, it is expected that you will need to know CSS in JS, or in our case, styled components. We already expose extend and this is a concept ported from styled-components. This was similar in v1, you want a custom theme we would need to know SASS.\nI'm going to close this issue because I believe there is nothing to change here.\nThanks for bringing this up.. this was actually fixed with my PR :). i understand, having a transparent background is risky. since you may not be using Grommet to set the background colors. so, we would never be able to tell when something is dark or not. hopefully this makes sense.. agreed on the fact that Menu should have the same Select capabilities when it comes to changing the background color via theme.\nalso I agree that you can configure the theme to have a transparent background for the select. I think it is important to have that flexibility in the theme itself since it will vary from app to app.. I think this should also be fixed with PR https://github.com/grommet/grommet/pull/2131. Let me take a look on this.. I'm unfamiliar with Bit. but I would love to explore it. I'm not sure how soon though. Most of my free time is to try to get grommet v2 out the door.. thanks for reporting this and for the codesandbox link. I will take a look on this later today!. I cannot seem to find your example in the codesandbox. can you expand how can we get to it ?\nThe other day, I was showing grommet to a company in brazil and I experienced something similar. I just want to make sure this bug is the same as the one I'm about to fix.. this is still an active issue. I believe we need to consider adding extra attributes to each component theme prop that allows extending inner styled things.. this should not be closed. lets track here https://github.com/grommet/grommet/issues/2336. this looks great thanks @atanasster . agreed this is a bug.. I will double check this tomorrow\nbut i believe this is fixed.. I can help you with that monday. I will ping you sometime to go over it.. this still makes sense. Fixed by https://github.com/grommet/grommet/pull/2042. plain prop is back :) \nhttps://github.com/grommet/grommet/pull/2074. this still need to be open. @ericsoderberghp is this issue fixed?. I believe this issue should remain open. Closing this, let's track here https://github.com/grommet/grommet/issues/2247.\nFeel free to reopen if you think it is a different bug. I don't think we have a prop for this. Since we have alignSelf I feel we should add justifySelf @ericsoderberghp . thanks for your contribution. I see the bug here. How about we use componentWillReceiveProps instead of did update?\n```\ncomponentWillReceiveProps (nextProps) {\n    const { hidden } = this.props;\nif (nextProps.hidden !== hidden) {\n  KeyboardAccelerators.stopListeningToKeyboard(\n    this, this._keyboardHandlers\n  );\n\n  if (!nextProps.hidden) {\n      KeyboardAccelerators.startListeningToKeyboard(\n        this, this._keyboardHandlers\n     );\n  }\n};\n\n}\n```. Thanks for your contribution. I think you forgot to update the snapshots, that's why the tests are failing.. Yeah I agree that we should have fixed AccordionPanel when we fixed Tab. and yes a PR is gladly appreciated.. Thanks for your contribution. welcome to the team.. thanks for your contribution!!. Thanks for your contribution! Glad to see folks contributing to v2 \ud83c\udf89 \nThe PR is failing on travis because we need to update the tests (we do test styles as well).\nIn your NEXT branch you can run npm run test-update and push the snapshot updates. The CI should pass after that.\n. I'm sorry for not describing this in a CONTRIBUTING.md. I will fix it soon.. interesting issue. I'm afraid I cannot debug this since I don't have this device. Do any of you know if there is a way to virtually simulate it?. i could not reproduce the problem with failing build locally. I'm assuming something went wrong with travis. This PR looks good to me.\nThe name of the Chart function (calcs) was not very clear to me. But this is very minor.. yeah I will investigate this issue during this week. thanks for the reminder.. would you have a codepen that reproduces this ?\nyou can fork ours here: https://codepen.io/grommet/pen/gaEGPY. 1) The gap in the column is not very pleasant\n2) Width of the table is changing\n3) How to deal with long results in a given nested row? It would be good to see infinite scroll here (one infinite scroll per group? not sure how this is going to work) - how do you envision onMore support for datatable?\n4) It would be great to allow the icons to be replaced in the theme\n5) Generally I feel we should think of a big response back. Usually datatable will have a lot of data, I would love to see how our datatable would respond to that\n6) Have we considered moving the search to the same row as the header? It feels weird to have the search in a separate row, with the icon as the placeholder.. as part of a DataTable component if would be nice to choose columns to hide/show. Meaning the user is able to remove a column if they are not interested in that.. 1) Fixed bug in accordion stories\n2) Adding both min-width: 0 and min-height: 0 always. This helps to avoid having to set a given direction for Box just to fix flexbugs\n3) Fixed focus management for CheckBox to align with our other inputs\n4) Allowing a different hover style for CheckBox\n5) Added closeOnChange option to Select\n6) Fixed SelectContainer to use forwardRefs\n7) Attaching mouseActive to the window object to avoid problems with portals\n8) Added a default maxHeight to the Select drop\n9) Improved select to have a smooth scroll when using the up and down keys. Now, we only change the scroll position if the target element is out of the scroll position.\n. Thanks for your feedback. This is very timely as we are working on v2: http://v2.grommet.io.\nWith the new site I still feel that your feedback makes sense. \nWe have done a better job with our icons library site: http://grommet.io/grommet-icons/.\nI will chat with @L0ZZI on how to make the experience better for the v2 site.\n. glad you found your way in. I definitely agree we need to make it easier for new folks to get started from minute one. join our slack channel if you haven't yet: http://slackin.grommet.io. thanks for fixing this!. hey thanks for reporting this.\nActually with the latest grommet this will not be required anymore. \ud83d\ude04\nI'm working on a new release for v2. I'm closing this issue since I believe there is nothing to be changed.\nBut in case you see an improvement to the plain description you can do so here. this should not be closed. thanks buddy!!. I think if we want a different color for the Select we should do it in the theme. I've added a PR that allows a custom backgroundColor for Select.. you just reminded me that I should also add an option to change the icon color as well. let me update the PR.. Let me create a codesandbox for you that implements StackOverflow tag component. With v2 this should not take long :). https://codesandbox.io/s/3y0wzv59om. Interesting let me test this\nSent from my iPhone\n\nOn Jul 10, 2018, at 3:13 PM, Eric Soderberg notifications@github.com wrote:\nThere is something still missing with this set of changes. Consider the following sequence using \"Search Select\" in the storybook:\nclick on the Select\nclick on option \"four\"\nclick on the Select\ntype \"one\"\npress \"Enter\"\nAt this point, it doesn't select \"one\" but I think it should. However, if I keep going:\nclick on the Select\ntype \"one\"\npress \"Enter\"\nNow it correctly chooses the \"one\" option.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is fixed in this PR https://github.com/grommet/grommet/pull/2104. This has been fixed already. it's been a while since I don't touch v1, but after a careful analysis you can actually follow the example of DateTimeDrop. Then we have a consistent solution for v1.. Thanks for your contribution.. Thanks for sending a contribution to Grommet! Your contribution makes sense.\n\nAlthough, we try to avoid adding inline styles (this does not feel very themeable). I believe the best way to add support for this, is to use custom class names.\nFor example:\n<Layer className=\"my-special-layer\">\n  ...\n</Layer>\nAnd we would change the code to accept that class internally, for example:\nconst containerClasses = classnames(`${CLASS_ROOT}__container`, {\n    [`${this.props.className}__container`]:  this.props.className\n  })\n  className={containerClasses}\nWe would need to look for every class name used in layer and add the same support. For example we have a special class for the closer icon.\nThat said, I still think we can customize the content of the Layer using Box. Here is a codesandbox for you:\nhttps://codesandbox.io/s/7jnyw3qyr1\nIn grommet v2 this is way simpler. I would recommend giving it a try: http://v2.grommet.io. indeed @ericsoderberghp I'm curious to understand from you @justinglibert which components you would like to see v2 that is not there yet.. thanks for your contribution. welcome to the team.. Hey @florianbepunkt thanks for your contribution. always great to see new first time contributors!!\nhow about we simplify the contribution to this?\nconst selectedValues = selected ? selected : value.map(v => options.indexOf(v));\nselectedValues.forEach(...)\n. yeah that makes sense.. we don't need Array.isArray(options), right ?. checking the ci failure now. I think it has to do with trailing spaces. let me fix it for you\nhttps://travis-ci.org/grommet/grommet/builds/405518461#L475. thanks for your contribution!!!. I've updated this PR to also allow a custom icon color for the Select. I feel this is still an issue. reopening. I'm investigating this now.. To be honest, I feel this is a broader issue. We have other components that have internal nodes that we don't expose in the theme. My investigation will aim to fix this problem for CheckBox initially. I will add this as a note to our team to make sure we expose an extend to all internal nodes in Grommet v2.. yeah I think there is a bug with colors being ignored. I similar issue is that a custom color for the Anchor is not being used.\nhttps://codesandbox.io/s/1o8jpwm3vq\n. by default Anchor will set a custom color for when Icon is present. you can customize it with the theme.anchor.color entry. There is a bug I'm fixing that will allow that to happen.. Fixed in https://github.com/grommet/grommet/pull/2151. great contribution!!. I feel this is not v2, but v1. please clarify. v2 has this feature but v1 does not. Prs gladly welcome for v1.. We added disabled prop to Select.. thanks for your contribution. it would be great to update grommet v1 docs with this new prop.. are you using v1 or v2?. It would be nice to fix this before officially rolling with v2. I dont think this is related to grommet. there is nothing we do on our end to load images. please clarify how to reproduce the issue.. yup here is how to do it: https://stackblitz.com/edit/grommet-demo-2vbmwi?file=index.js. this is fixed in the latest grommet. Yeah sorry about that regression. Fixing it now.. Fixed by https://github.com/grommet/grommet/pull/2198. This is so bad. sorry again. two regression in the same thing. I clear need to do a better job testing. I created this PR to fix this:\nhttps://github.com/grommet/grommet/pull/2202\nLet me test it more carefully.. this is fixed. No feedback received. feel free to reopen it if you think there is anything to fix on our end. I agree with this. FYI @ericsoderberghp . related to https://github.com/grommet/grommet/issues/2240. This has been fixed.. this is how it looks inside a Box: https://codesandbox.io/s/oopzqq15n9\nAm I doing something wrong?. great question. Actually I thought about it, but you can totally have a RoutedAnchor alongside with a text (non-navigational). If we add that logic inside RoutedAnchor, it will set the active in that anchor. we could add a prop to RoutedAnchor to ask if it is navigational or not, but I prefer a separate component.. This is related to https://github.com/grommet/grommet/issues/2855.\nI like your direction Soderberg! I think our button and anchor can have active prop.. I don't think Anchor has active. Also I dont think they allow a custom style to be passed (through the theme).. we don't have a lot of contexts in there. and you are most likely using all of them. so I don't think you need a config for that in your babel transform plugin. makes sense ?. here is the configuration we would recommend for webpack < v4. \n[\"transform-imports\", {\n      \"grommet$\": {\n        \"transform\": \"grommet/es6/components/${member}\",\n        \"preventFullImport\": true,\n        \"skipDefaultConversion\": true\n      },\n      \"grommet/contexts\": {\n        \"transform\": \"grommet/es6/contexts/${member}\",\n        \"preventFullImport\": true,\n        \"skipDefaultConversion\": true\n      },\n      \"grommet/themes\": {\n        \"transform\": \"grommet/es6/themes/${member}\",\n        \"preventFullImport\": true,\n        \"skipDefaultConversion\": true\n      },\n      \"grommet/components/hocs\": {\n        \"transform\": \"grommet/es6/components/hocs\",\n        \"preventFullImport\": true,\n        \"skipDefaultConversion\": true\n      }\n    }]\nWe have tested and tree shaking works as expected with the latest grommet and webpack v4, so no need for a plugin.. Please use the grommet github url for now https://grommet.github.io/\nWe are investigating what is going on with our godaddy configuration. I think this is more like PAD_SIZES is not including xxsmall. a similar issue. https://github.com/acdlite/flummox/issues/173\nwe are not actually removing it, but it is down at the wrapped component.\nI'm looking into possible solutions.. what are the static props from grommet you are trying to access? A solution would be to add your static props after calling doc. Internally in grommet we don't export any static stuff apart from the propTypes and defaultProps that are actually added by react-desc.\nhere is how I would do it: https://stackblitz.com/edit/grommet-demo-k3d3dq?file=index.js\nBut in grommet we don't export any of that, this is where I'm getting confused.. I don't think there is a solution actually \ud83d\ude22 Unless manually choosing static props to transfer over. \nGlad to see you are using compound components though, it is a great pattern. Also, glad to hear you are leveraging react-desc in your grommet-controls lib!\nI'm closing this for now. I will add a note to react-desc README warning about this.\n. Are you passing the HPE theme to the grommet component?\nI've created this: https://codesandbox.io/s/2x6w4j0q00 and it has the HPE green.\nI'm closing this since I believe nothing needs to be changed on our end. please feel free to reopen it if you think otherwise.. I see. thanks! I forgot about this contribution from @taleschaves. Yup I mentioned to atanas that a possible fix for this is to move every function into its own module, bur this initially feels like an overkill. Webpack 4 is already out and should take care of this for us. We just need to give time so other tools can adopt it. A good exercise is to use only one function from our utils (manually) and compare the bundle sizes g-ziped I\u2019m curious to see the difference there. I'm taking a look at this now. I'm taking a look at this now.. good call on the outdated doc. let me update this PR to include it.\nOn the grid-options change, I would defer to @ericsoderberghp and @L0ZZI. Wide and narrow has been working for us. We are adding this as a change to accommodate other themes that may need more breakpoints. None of our baked-in components would use anything apart from wide and narrow. So I'm hesitant to add more breakpoints just because it exists in other systems (like bootstrap) - again this is just my humble option.. thanks for your contribution. Just keep in mind that most of the typescript definitions are automatically generated based on the doc module in each component folder. I'm fine with your contributions, I added one comment. In the meantime I will check why the generator did not get the array type properly for Accordion.. actually you are removing the array from Accordion typescript definitions. maybe we should augment the children to be either?. here is an example of how to change Tabs and Accordion to accept both types.\nhttps://github.com/grommet/grommet/pull/2255. perfect @thomschke I did not know about this. so, do you mind updating your PR to not change the typescript definition directly but do inside the doc module itself? you can use my other PR as a reference, then I can close it later on.\nFor the Accordion we can update the doc to be this:\nchildren: PropTypes.node.description(\n      'Array of AccordionPanels.'\n    ).isRequired\nLet me know your thoughts here. beautifully done. thanks for your contribution. welcome to the team. let me push the changes for react-desc, sorry I forgot to do it.. thanks for your contribution!. sorry I should have closed this. this has been done by @thomschke in a separate pr. Hey I'm not sure if this is a problem in grommet since you are manually setting this colors right ? can you clarify?. Fair, yeah I feel we should fix this before v2.. I will try to take a look at this early this week.. all good. Yeah I agree this is an issue. let me fix it now. FYI we are adding 2/4 which is an alias to 1/2. thanks for reporting this. looks like a bug. I will try to fix this later today.\nGlad to see you are using the playground, FYI. yes!! @prateekgoel thanks for volunteering!!! sorry for the delay in my response. I can't believe I missed this.. yeah probably. But I'm more curious to understand why this is a problem only on safari.. let me try to reproduce this on my end. not yet Im sorry. I will keep you posted. I'm not able to reproduce this issue with safari Version 12.0 (13606.2.11).\nI'm going to close this issue since I believe there is nothing to change on our end with regards to that.\nWe can reopen if we are able to reproduce it.. Does responsive false work? You can disable that behavior i believe. gotcha!!! yeah this is a bug!. yup sorry forgot to close this one!. added in https://github.com/grommet/grommet/pull/2330. this is fixed by the custom breakpoints. closing this, let's track this in https://github.com/grommet/grommet/issues/2336. since we already have a text component I feel the right place should be global.colors['text-light'] and global.colors['text-dark'] following the same pattern for border.. correct. my recommendation is to not use the same names for now.\nI had a chat with @ericsoderberghp about this and our inclination is to move the narrow and responsive breakpoints stuff to the breakpoints prop.\nThis change would allow an easier path for themes to disable the auto adjustments on mobile. We have a case at Netflix where we don't want to change padding when we are in \"narrow\" mode. Today I'm having to browser different entries in the theme to see where I have to disable it. . correct. I think Anchor on dark backgrounds is always staying the same color. see the Box stories for an example.. actually this already works as expected!. Sorry for taking a long time to get back to you on this. yes it makes sense to make a prop for that. PRs gladly appreciated. sorry to clarify is this for grommet v1 or v2? and the feature request is to disable show/hide password? because we already have the eye there in v1. in v2 we don't have a password input component. Thanks for reporting this. Can you put this in a codesandbox ?. yeah I'm investigating right now why the playground is crashing. it is doing that for me too.. are you still facing this @RyanCCollins @jesseolsen ?. investigating this now\n. How did you find the latest styled-components v4 minified?. One thing I've started to notice is that libraries are starting to drop support for minified javascript given their preference for the module system.\nCan you expand why you are using Grommet minified? It is rather big since it includes all components and icons.\nWe included in the early days because of codepen, but now we have codesandbox. I was thinking about dropping support for the minified js as well.. what is the version of webpack you are using ?. my wild guess here is that when you are doing \nimport { hpe } from 'grommet2';\nhpe is returning undefined. hence there error of reading global from this variable.\nCan you try to create a repo that reproduces this? I'm trying as well. here is a repo \ngrommet-webpack-bug.zip\nit is an ejected create react app. can you try to edit config/webpack.config.prod.js to reproduce this problem?\ncreate react app uses a rather old version of webpack \"webpack\": \"2.5.1\",. \nBut you can run npm run build and then server -s build, using the code you provided it works just fine. I have a feeling this is not a grommet isssue.\nIn our sample apps we are using webpack 4 (they have a better support for tree shaking and they auto minify the code for production).\nI'm closing this issue for now. But let's keep this conversation going. if we find the bug, we can always reopen it. \n. Yeah import { hpe } from \"grommet/themes\"; has been removed.\nIt is now a separate package.\nimport { hpe } from \"grommet/grommet-theme-hpe\";. I'm taking a look at this now.. Yeah I agree with @srockk the default is undefined, which does not add any padding to the elements. I'm closing the issue for now. We can reopen if we identify things we want to fix.. I agree we could improve there.\nit is not clear that normal and bold are actually string instances, and number is actually a type.\n<Text weight=\"bold\" />\n<Text weight=\"normal\" />\n<Text weight={700} />\nWe need to improve the documentation.\nI will create a separate issue for that in grommet site since it affects more components.\nThanks for the feedback @atanasster . https://github.com/grommet/grommet-site/issues/34. I'm looking at this now. I'm looking at this now. agreed.\nI'm looking at this now.. We do have the Github icon\nhttp://grommet.io/grommet-icons/?s=github\nI'm closing this issue since I feel there is nothing to be changed on our side. we can always reopen if we feel there is something to be changed.. I'm taking a look at this now. I'm not sure I agree with that. Take the native select for example, it does not have any hover indicator. Same for the Grommet Select, it does not have hover background.\nWe do have focus highlight if you press tab.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n@ericsoderberghp @L0ZZI I would appreciate your thoughts here.. Sorry I was not clear on that.\nI mean the Menu and the Select should behave the same way when it comes to the UX for this.\nBoth the Select and the Menu are being rendered as buttons (for accessibility reasons).\nBut there is no hover effect by default. You could definitely add it on your end though. But my concern is how to make that the default behavior. This is more like a design question I feel. How to give feedback to the users that the Menu and the Select is actually clickable. Usually I refer to the native behavior to get help. And when I look at the native Select, there is no feedback there. Do you see my point? . let me try to play with that. Just for me to make sure we are on the same page, your desire is to change the background color of the Menu once we hover over it, only when it is closed. When it is open, the hover on the options already gives the background change. Is my assumption correct?. If you have an example of a Menu elsewhere that does what you are looking for, pleas share with me. It will help me understand better what you are trying to achieve.. I'm looking into this now. Thank you so much for sending a contribution, welcome to the team.\nWhile testing this, I've noticed that overlay is on top of the content for mobile\n\n. I think the right fix is, go in the LayerContainer and pass responsive to StyledOverlay:\n<StyledOverlay onClick={onClickOutside} responsive={responsive} theme={theme} />\nInside styled layer you check for responsive before applying the position override:\n${props => props.responsive ? lapAndUp('position: absolute;') : 'position: absolute;'}\nDo you mind changing your PR to do this?\n. Thanks again! \ud83c\udf89 \ud83c\udf7a . Very good issue. Thanks for raising this up.\nI definitely agree we should augment our component definitions with the appropriate HTML element.. yeah. We should have a wiki page for Typescript support and describe what we did, how it is not complete, and our plan to improve it.. Thanks for the suggestion @hc-12. I will work on extending our definitions with the intrinsic elements. i think this is related. let's keep in the same issue. but feel free to open a new one if you prefer.. Today our font-size calculation with v1 is based from $inuit-base-font-size. Take a look here. You could override this value. But still the following calculation will be applied.\n($inuit-base-font-size / 16px) * 1em\nYou can also override that manually.\nIn your mytheme.settings.font you would do: \n.grommet {\n  font-size: ...;\n  line-height: ...;\n}\nSince you may be starting with Grommet now. I want to bring to your attention grommet v2. https://v2.grommet.io. We are releasing it soon (currently in beta). I would recommend starting with that instead of v1.\n. > I'm seeing a lot of output from yarn storybook like:\n\nNo parser and no filepath given, using 'babylon' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred.\n\ni think this is fine. it is coming when you add their story source plugin. I don't think there is any action item in our end to remove this.. > > I'm seeing a lot of output from yarn storybook like:\n\n\nNo parser and no filepath given, using 'babylon' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred.\n\ni think this is fine. it is coming when you add their story source plugin. I don't think there is any action item in our end to remove this.\n\nactually let me take a look on this.. I'm working on this for all components\n. The repo looks good to me. I thought I saw a PR for this. I think we can create it now since it will be a breaking change.. can we add an example of that in storybook? I will try do that.. thanks for your continued support on Grommet @taleschaves \ud83c\udf89 . Can we be more specific on the theme changes to help developers understand fully what they have to change to resolve the breaking changes?. We need to update the custom breakpoints example. this pr breaks that. it would be good also because it will serve as a reference to folks wanting to leverage this.. Layer in mobile is broken\n\n. Margin layer example is also broken. can we add a row-responsive in Box stories?. This is definitely better!!\nOne last issue though. For custom breakpoints example, you are passing:\nxsmall: {\n        max: 499,\n      },\n      small: {\n        min: 500,\n        max: 899,\n      },\n      middle: {\n        min: 900,\n        max: 1535,\n      },\nSo I think we are in a conflicting situation here. There will be some overlap since we do a deep merge. I think as of now middle and medium overlap.\nAfter adding that custom breakpoints, the font size is not changing anymore for the Heading. If I remove the custom breakpoints, the font size adjusts. So I believe this is an unexpected thing.. I think we should support this:\nxsmall: {\n        max: 499,\n      },\n      small: {\n        min: 500,\n        max: 899,\n      },\n      middle: {\n        min: 900,\n        max: 1535,\n      },\n      medium: undefined,\nbut as of now I get a null pointer expection. tested everything looks good now!!. also we need to resolve conflict here.. wow. I really like your proactiveness @oorestisime . Why you think using Menu would solve this problem? Initially they seem unrelated. But maybe I\u2019m missing something.. Collapsible is an example of a component that animates in and out.. yes this is fixed. good call. makes sense. thank you for your contribution. agreed. I knew the icon is there. but we need to switch the color automatically if the background is white.. Let me try this out . yes you are right.. Thanks for raising this issue. This is a great start.\nV2 core is now meant to offer low-level abstractions to help you create design systems. This is different than v1 in essence. So overall, we're not looking to offer a 1:1 mapping here.\nThat said, I understand where you are coming from when you are asking from v1 components that are not in v2. And having a documentation (or video, or anything really) is definitely desirable.\nI have that in my short list of things to do. But our storybook has a bunch of examples on how to customize Grommet v2. That would be my first starting point.\nhttps://storybook.grommet.io\nCan you please provide here a few components that you would like to see as a reference?\nI can create a codesandbox illustrating it.. it seems it affected anchor as well. FYI @ericsoderberghp . yeah this is what I meant.\nLook at this: https://grommet.io/docs/tabs\nthe transition between the font weight is way more smooth there.\nDo we know why the transition is not smooth with the new font family ? Is that at all related?. i like that better.. anyways I feel this is fine to be done after v2 release. removing the tag.. I think we cannot move away from onInput. copy and paste does not trigger the onChange. We used to have onChange in the past and we moved to onInput because of that.. maybe we need both then?. I just tested the copy and paste and work in the latest react!!\nI believe it is safe to move back to onChange :)\nCan we also change TextInput ? also, it would be great to update all stories to not use onInput. this is fixed now. we pass the entire state of the Select now in the children function callback. This also fixes a problem where the layer in mobile does not scroll. Just try the layer on mobile you will see this issue. Also try my Pr locally you will ser I added different colors so that you can see the layer will take full height on mobild. Can you take a stab at that? I feel you are way better at this than me :). Fixes https://github.com/grommet/grommet/issues/2411. How about having a plain prop in grommet that would not set font size and line height?. Nope in the Grommet component. If you pass plain we dont set anything, no border box, no line height, no font size. I thought we set border box in all components too. I respectfully disagree that this is a theme specific thing. I feel we should offer an easy way in while integrating grommet into existing apps.\nHaving font size, line height, and border box in such a high level component like Grommet seems very opinionated.\nHaving two base themes seems like an overkill to me.\n. Undefining them was my initial intent in this PR. I feel this should be the default setting for the base theme.. Another thing I\u2019ve noticed is that all our texts are usually wrapped in a paragraph or text components. They have specific font size and line heights, I would much rather remove line height and font size from Grommet and tell folks to always use Text or Paragraph. You mean inside Grommet core?. I can check, but if not, I feel it makes sense to be. We can change this pr to include moving regular span to text.. we will be soon removing this and switching to the hooks approach. We will delay this fix until we are on 16.7.. it would be just like Layer with modal true. when we open our layer to content behind the layer looses focus. . always the latest will be the one to interact with.\nAn example is a form that is not allowed to be edited until you log in (or while it is loading data from the backend). so you could use a stack on top of this form where you can login and then the stack disappears and you can edit the form. \nThis was an issue in a given use case at work and I was hoping stack would have a solution for this.. for this I'm thinking we should add something like <Select disabled={[0, 1, 3]} /> where disabled is an array of disabled indexes. Thoughts ?. this is a breaking change right since we are removing weight from the theme. I hear you, but we removed a property from the theme object, and if you were using it before, this would break.. yeah just to be explicit. I like the idea of having a prop calle resize where you can do resize={false} and prevent that behavior.. This is a great first issue to tackle.. > so, if there is resize={false}, why not transform it to resize=\"false\" and have a resize=\"horizontal\" and resize=\"vertical? Maybe just pass it straight up to CSS, that's even simpler. And this is the point where I'm not sure whether we should be recreating the whole CSS as Grommet components' props.\nYes. I think it is a great idea to have resize={true | false}, resize='horizontal', and resize='vertical'.\nYou are raising a very good question, that probably deserves a blog post or something. This is key to understanding grommet. So, let me explain here first and then later I will wrap this up in a post.\nThere are a few places in Grommet that touch styling one way or another.\n1) The theme object\nProperties inside the theme affect all instances. You also might be asking how we decide to put things in the theme or not. That decision is on a component-by-component basis. Take Anchor for example. A common CSS property used in anchors is textDecoration and, when used, you want to apply that in all your anchor instances, otherwise your app is going to look inconsistent. This feels a great property to live inside theme.anchor and not as a property to Anchor. As a result, you will not see <Anchor textDecoration='none' />. For customizing our components beyond the properties we added in the theme you can always rely on the extend functionality (e.g theme.anchor.extend, theme.anchor.hover.extend).\n2) The component props\nThe properties in our components are defined also based on a need basis. Using the anchor again as an example, we found the need of icons and labels, and logic to have them reversed. Or using just the icon, or just the label. We started as small as we could, and we are open to adding more properties for as long as we see a good use case for it. Your resize example was a great one where it is totally possible for a given TextArea to allow resizing whiles others don't. This does not make sense to live in the theme, since it can change for different instances. It is also common enough that deserves a dedicated prop to it.\nAnother great example of a prop that affects style is the truncate prop in Text. I often find people adding this boilerplate everywhere:\ncss\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\nwe find it easier to do as follows:\n<Text truncate>...</Text>\nConclusion\nThe decision where to put things is done based on interpreting the needs of each component. We are open to the suggestions from the community when to add new props or not, and where to add them. It is strongly advised to stick to the properties, avoiding the use of style. This feels like going in your own route and forgetting about the component's initial intentions. We are totally open to try and understand why you think Box and Grid properties are not clear. This would help us understand the changes we need to make in order to have you drop style. Of course this is your decision, if using style feels more natural to you, go for it. I just think it is harder to make things reusable that way, while still leveraging the theme entries.\nFinally, in certain situations, I find the CSS syntax for grid and flexbox very complicated to interpret. Let me show you an example:\ncss\n.my-grid {\n    display: grid;\n    grid-template-columns: repeat(12,minmax(auto,1fr));\n    grid-column-gap: 24px;\n}\nWhenever I ask someone new to css grids to explain me what this piece of code is doing, they cannot explain it, especially repeat(12,minmax(auto,1fr)).\nI've had more success asking them to explain and interpret this:\njavascript\n<Grid columns={{ count: 12, size: 'auto' }} gap='medium' />\nThis is almost self-explanatory: a grid with 12 columns that has a medium gap. Of course you can always do the pixel values:\njavascript\n  <Grid columns={{ count: 12, size: 'auto' }} style={{  gridColumnGap: '33px' }} />\nBut I see problems with this:\n1) Using pixels values will lead to inconsistencies in your app\n2) Using pixels values will make it harder to change things in the future\n3) The code looks more verbose\nI hope this helps you understand where we are coming from. And, of course, we are open for feedback.\n. Fair enough. What sort of components you think it is missing?\nOur approach with v2 is to be somewhere in between native HTML5 components and fully opinionated component libraries.\nThink it like a lego where you can combine pieces to create something richer.\nFor example, in v1 we used to have a Card component. It was very opinionated and hard to reuse in other companies. Card is not a component in v2 and that's intentional. We feel that you should be able to create any card pretty easily with our Box component.. Regarding roadmap, we are in the process of figuring out how to operate now that we have v2 out. Our backlog of issues is open and when we are working on something we make them as in progress. We are trying to do a better job marking issues that are \"good first issue\".\nWe are planning to release hot fixes very often.\nFor new components and features we will have a minor release and the cadence will be on a need basis.\nWe are not anticipating any major breaking change, since we have just released v2.. I'm open to mono repos. I've started to use it in a few projects. I feel this is more like a v3 thing. We just released v2 and I'm wanting to avoid having breaking changes like this. Hopefully this makes sense to you.. funny story is the callback exists but it is not documented . fixed in the latest release. another issue is that if you scroll up manually and then press the down key again, the scroll moves, but the scroll is not set back to the focused/active element.. actually we feel the tab, arrows keys, and pointer events should be connected. a good reference is the facebook main search select.. A related issue is that if you clear your search inside the Select it takes 300ms to detect that change.\nhttps://stackoverflow.com/questions/2977023/how-do-you-detect-the-clearing-of-a-search-html5-input\nWe need to investigate how to fix that too.\nIt seems grommet Select component should intercept the onclick and identify if it was a click on the \"x\" or not. If we clicked on the \"X\" we should add a new prop called onClear so that users know to immediately reset that.. I think sometimes you want the tab to not have a scroll. this is just an additional prop to extend that behavior.\nI understand your proposal is to let the users control that in their end. but unfortunately the fixed height is limiting in the way to forces you to give a value. instead they want to grow with the available space left (<Box flex={true}>).. have you tried this? I don't think it works does it? since fill will translate to height: 100%.. hey colors are merged with the base themes always. \nHPE does not customize light colors, instead it just relies on the base colors coming from grommet. so in your case you can import the base theme instead.\nimport { base } from \"grommet\"; then base.global.colors['light-1'] should be there.\nif you access the theme you can use normalizeColor.\nCheck this codesandbox. this is definitely a bug. or something we should improve. let me work on a PR to make this flexible.. We  have a component called <RoutedAnchor /> which is undocumented as of now unfortunately.\nYou can do <RoutedAnchor path={props.to} {...props} /> and I think it will be equivalent.\nI agree that v2 Anchor should support a tag prop regardless. This is a good first issue for a pull request.. Join our slack channel https://slackin.grommet.io. Ping me and I will guide you on that. hey @oorestisime I like the idea of being explicit about this. So I'm in favor of adding as to our list of documented props in Anchor even though we honor and pass it through.. btw great job identifying this is already supported.. Let me work on updating our CONTRIBUTING.md and take it from there. I think there will be a bunch of issues fixed when we merge this. can you list if here just so we know ?. @ericsoderberghp it would be good to take a look in the default color combinations for the existing themes.. I agree with this. I will leave this up for a couple of days since it is a great first issue for a pull request.. Thanks for reporting this. We will look into fixing these issues. We recognize our site has its limitations and bugs. Just don\u2019t let that prevent you from trying and engaging with us. I think Grommet is far from being perfect, but we appreciate contributions from the community. You seem to know what you are talking about so yeah please contribute to make it better. This is the right open source mentality.. https://github.com/grommet/grommet/wiki/Why-Grommet-2.0%3F\nCurious as to why you don't think it is a step forward. Thanks for being honest about this.. you can always remove the border from the TextInput with <TextInput plain /> and then you control the border the way you want. I think adding the concept of status to textinput feels very specific.\ntake a look at the search input here:\nhttps://grommet.io/grommet-icons/\nwe use a plain textinput there.. No problem at all. I'm glad you find you way through the undocumented process of sending a contribution!. thanks for your contribution! welcome to the team \ud83c\udf89 . this looks good. I have only one minor comment.. have you seen the Notification example in storybook ?\nhttps://storybook.grommet.io/?selectedKind=Layer&selectedStory=Notification&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel. \nInteresting it works for me\n. anyways I'm closing this issue since I believe we will not be adding Toast as a core component. let's keep the conversation going regardless. we can always reopen if we feel something needs to be changed.. yup yup this is a storybook issue :(. I would leave this up to you @oorestisime. Whatever feels more convenient to you. \nRegarding the deprecation notice you can follow the pattern in here\nit is basically a comment in our docs. we can make it formal later. to proxy is not heavy so I'm ok living with that for a while.\n. yeah I think a proxy test for Text is a great idea. Heading does not have the tag prop so no need for proxy right ?\n<Text tag='span' /> and <Text as='span' /> would have the same result in the test.. and sometimes the test is failing. i will investigate that separately. i think your pr looks just fine.. Could this be used to enter a credit card info? I saw one app the other day where I would enter all my credit card data in one line.\nFirst I would enter the card digits and there would be a space between each 4 numbers (that I see as one syntaxinput).\nAs I blur out of that input, they shorten it to have only the last 4 digits plus the card type icon (visa, master, ..).\nNext would be the month year expiration, i think this is another syntax input.\nLastly, the security code, which I think it can be just a regular input.\nThoughts?\nDo you see multiple syntaxinputs or just one that does it all ?. it would be great to have it exposed in a codesandbox that we can play with . \ncan we avoid the line to take all the width ?\nI think this will align better with the other icons:\n<path fill=\"none\" d=\"M6,12 L18,12\"></path>. great find shimi, let me run it locally and see what is going on. this is related but it does not necessarily close the issue. it improves that issue yes. good call.. nicely done!. looks great, just a tiny little comment there.. when is a use case for Accordion without children? I feel it should be required and we should fix the test to add an accordionpanel. thoughts?. I don't have a strong opinion here. I would defer this to @ericsoderberghp. \nIn your example, my inclination is to not render the Accordion if you don't have data, as soon as data arrives, then you render the Accordion + AccordionPanels. The table is slightly different though. You always know the header, just the body is missing. In the case of the Accordion, I think the component will literally be a blank screen, so we might as well not even render it since it will not have any visual difference.. i like both proposed changes from @ericsoderberghp . Thanks for your contribution!. agreed!. Well I never assumed it was an internal thing. See the Understanding Colors codesandbox where I explain this.\nThis is definitely a public info and a very cool feature of grommet.. In fact inside Tab component we make use of that. this is where I saw this warning where Text was passing the wrong prop type. IMHO we should stay consistent with what the code is actually doing.. I dont think this is supported today. it would be a nice add.. Thanks for your contribution! Welcome to the team \ud83c\udf89 . I agree with deprecating a11yTitle and rely on aria-label instead.. agreed. let me send a pr for this. sorry i've merged it too fast.. I don't think we will be moving forward of this approach as we feel there are challenges with export the StyledBox upfront. like the use of as prop and how it replaces the BoxInner.. We can release a bug fix soon. let me target friday since there are other minor fixes that can be included.. I think the structure is the same no? in both cases the event looks like this:\nconst event = {\n  target: node\n}\nin your first screenshot you are logging this.inputRef.current and in the second one you are logging event.\nAm I missing something?. Oh I see now. yeah this is expected. the onChange target is the option you selected. onSearch target is the input field you are searching. thanks for digging into this.. indeed nice catch @ShimiSun . thanks for your contribution.. this is a great first issue I'm pretty sure it is a bug in the story not in grommet.. I would stay away from adding onClick directly in Box. can you explain your scenario?\nMy inclination is that you need to call event.stopPropagation(); inside your Layer onclick.. a possible idea would be to extend the flex prop to accept grow and shrink values:\n<Box flex={{ grow: 2 }} />. let's wait on merging this before we release 2.2.1 (with the Select fixes and bringing the withTheme back). I love this idea. @ericsoderberghp FYI\nThe question is when to run this. I'm assuming this is relatively slow to run. Can you confirm that?\nSo, if it is slow I don't see this running before committing. Maybe we can target to run this once every night?. can you reproduce this in a codesandbox ? this works for me:\nhttps://codesandbox.io/s/4xnvpz78xw. can you confirm your grommet and grommet-icons versions?. yup. can you upgrade to grommet icons v4 ?. https://github.com/grommet/grommet/releases/tag/v2.2.0 <-- we describe the update process here. yeah sorry for the bumpy road there.. thanks I really appreciate you putting time into this. What is this for ? was this created by accident ?. i think this is failing because we did not upload the yarn.lock file. do you know why the new yarn.lock is not in this pr ?. hey @ericsoderberghp I'm curious to hear your insights regarding the support of animate as a string. Initially my inclination is to keep it as true/false only, and if you need a custom animation do that in the theme.. make sure you are using grommet-icons v4. with grommet 2.2.1. This seems like a regression after we removed findDOMNode. this seems like one we should keep the findDOMNode or investigate a better solution.\nthanks for creating this issue. I'm taking a look at this right now.. agreed. great idea. let me change the pr, then we can remove findDOMNode again. hum. I still think we need findDOMNode though. we could use forward ref in Ref but then we would be in the same problem of trusting the caller to honor it. . the ref is always present. in our previous code the ref was there. it was not the DOM node though because folks where not using forward ref. that's why we need to use findDOMNodehere. thanks for your contribution!! welcome to the team of contributors \ud83c\udf89 . I love this contribution! thanks for working on it.. this looks good to me but I'm not sure why the CI is failing. I've increased the timeout for the masked input in my other pr. it was failing for me too. . nicely done, thanks for your contribution! welcome to the team!. this change looks good to me. but the tests are failing. can you run yarn test-update to update the snapshots ?. Take this for example: https://codesandbox.io/s/rrjz94lj7m\nIf you open the filter on the left and start selecting things, you will see the outline. this is a regression.\nThe outline is very distracting and I feel we should only show this if we are using the keyboard.. Great job in the communication indeed.\nI'm not using it.\nHere is what I've been doing..\n<Anchor as={Link} ... />\nWhen we created Routed** as was not an option in styled components. so today it is fairly easy to use it. I'm totally down to deprecating it.. it is the github login. you log with github using the grommet account (you should have it), and the login to codepen and do the necessary work. How are you posting the weekly templates? It should be the same process.. PR updated with feedback. great idea \u2764\ufe0f \n@ericsoderberghp @oorestisime  thoughts?\n. working on a PR for this right now.... I think we already have tests for icon === undefined, it is the default state.. my point is <Select /> is the same as <Select icon={undefined} />, no ?. and icon={true} as well. i'm adding three tests.. i don't think it is possible to forbid the \"icon={true}\" if we want to allow icon={false}. I've fixed the code to account for the true scenario. it should never be used, but as you pointed out, it should not break the code. I've added a test for that.. I've updated the PR with the new description for the icon prop. I think this should be good to merge now.. I believe we don't need highlight.js for the tour.\n. right now, there is no test for the Tour, so I don't think we need 'expect' and 'should'.\n. same thing here, were are not releasing the tour, so we don't need 'gulp-if', 'gulp-git', 'gulp-prompt', 'gulp-bump'\n. same here for the tests 'glob', 'yargs', 'rewire', 'moch-lcov-reporter', and 'mkdirp'.\nCan you try removing all these dependencies and verify if it still works?\n. Great!! We definitely need that :+1: \n. I believe these are duplicate lines. We just need one.\n. I really like what you did here, but I'm not sure if here is the best place to put this code.\nI will give you an idea in the main thread of this pull request.\n. I believe you don't need to copy the grommet src. It should be sufficient to use 'grommet' as a dependency in the package.json, right?\n. Yeah, the reason Grommet is failing is because version 0.2.0 is already outdated. We need to release version 0.2.1.\nThe challenge here (which I don't have a clear answer yet) is that examples are developed based on the source files, and probably will be constantly incompatible with the release version. I will try to figure something out, but in the meantime, I will release version 0.2.1.\nAgain, thanks for you hard work here, looking forward to your new push.\n. I'm wondering why you restricted the examplesFolder to be src and not the root of the app? I think I know why, probably it is shipping with node_modules, dist. But I believe gulp has a configuration to ignore specific files/folders. Can you look into that? \n. I don't think we need this file anymore right?!\n. I believe we need to remove this devAlias as well.\n. I would revert this file to what it used to be before. When we export then we replace using the template you've created.\n. you have to resolve this conflict here. I believe you want to leave whatever is in the upstream/master.\n. As you have to change the package.json I would recommend adding node_modules and dist in the ignore statement.\n. Great! I like that you are testing the label as well.\n. Can we change it to: if you find problems.. and also there is a typo in variable as in varialbe\n. can we make it as make sure to run as an admin\n. Do we want to fix that to en ? I would leave this empty and use the browser settings instead.\n. Agreed. Unfortunately es-lint is not validating spacing for JSX :sob: \n. I believe we can try to isolate the id so that they don't repeat inside Grommet. Even though readers will work around it, I think it is a good idea to keep them unique (it is semantically invalid in HTML to have repeated id attributes). Thanks for pointing this out @ericsoderberghp. \n. I like the idea of having the SkipLinks inside the App component. This allows the consumer app to be agnostic about skip links if they want. :+1: \n. I like that you have created a function to identify descendant of the DOM.\n. Great point @mattfarina, thanks for bringing this up.\n. Good point. I'm not sure where is the best place to put that. But I agree with you. Based on this feedback I believe Article is the best place to put the Main Content anchor\n. good point. we will convert that, thanks for bringing this up.\n. Thanks for that! My Fault :)\n. I feel we need to flip this order for the arguments. Section propTypes should take over Box propTypes.\n. Yeah you are right @samogami. But, can you replace this:\nif (typeof this.props.a11yTitle === \"undefined\") {\nby this:\nif (!this.props.a11yTitle) {\n. Why do we need to set a11yTitle as empty here?\n. Can we say: 'Accessibility Title. If not set uses the default title of the status icon.'\n. I like you are concerned about updating the docs whenever you are doing changes :+1: \n. Can you localize this title?\n{this.getGrommetIntlMessage(this.props.a11yTitle)}.\nYou will need to include the mixin though.\n. I think we can replace this by:\nvar a11yTitle = this.props.a11yTitle || this.getGrommetIntlMessage('Disabled')\n. Same here:\nvar a11yTitle = this.props.a11yTitle || this.getGrommetIntlMessage('Error')\n. same here...\n. same here..\n. Thank you so much for updating the tests! :+1: \n. Makes sense, thanks for explaining! :+1: \n. Good point. I hadn't thought about it well enough... makes sense, thank you!\n. Well if the a11yTitle is a property that we receive, we can't guarantee that will always be set to Grommet. Let say the user wants it to be read 'Grommet Logo'. If we want to be Grommet always, maybe it is a good idea to remove the property then?\n. I can't find where is the default string of Grommet. If it is a regular string, I don't think it needs to be localized. But, in the code above, I believe you have this: {this.props.a11yTitle} instead of {this.getGrommetIntlMessage(this.props.a11yTitle)}. \nAnd if the value of this.props.a11yTitle is set to Grommet it is not a problem to call getGrommetIntlMessage. Inside this function, if the localization key is not found, it automatically falls back to the original value, in this case Grommet. So you actually don't need to create Grommet key in the localization files.\n. thanks for adding a line to explain this... :)\n. what if there are more than one element with .box class? Can we assign an id to the box container? or something that is guaranteed to be unique?\n. can we join these guys? else if (...>\n. can we join this with the hover ? \ncss\n&:hover, \n&:focus {\n  ...\n. if you move this to be inside the mixin does it work?\n. Can we specify that this is commonly used for Accessibility as the Main Content of the page?\n. why we need this here, if we generating a new one on line 243?\n. i like having 3 states now. :+1: \n. can we add a comment that explains why return true is required here? I remember it is for stopPropagation, but it is good to explain it ;)\n. I like that you care about explaining stuff :+1: \n. Why we need this? It may be related to the first question on top...\n. Maybe we can move the key event handling to be inside MenuDrop?\n. Can you add ariaDescribedBy in CheckboxDoc ?\n. can you add this as: menuItems[i].setAttribute('aria-selected', classes.indexOf('active') > -1);\n. //want to skip items of the menu that are not focusable.\n. //move up to the next item (possible next focusable item).\n. same documentation as up key\n. can you replace it by controlElement.getElementsByClassName ?\n. can you add <fieldset className=\"index-filters\"> and create a scss file for this?\n. can we remove this log ?\n. also this one? :)\n. also can you add on empty line at the end?\n. I know it used to be like this before. But would you mind to fix the spacing for this file?\n. Can we say Please make sure you've set NODE_PATH to your version of NPM ?\n. Can you make sure that the spacing is write in this file ? I think we have one extra unnecessary space.\n. you're right. it seems a formatting issue with github.\n. love it!\n. there is an extra comma here and the spacing is off. I believe it should be indicators: false\n. what is date1 and date2? The spacing is off here as well.\n. why we are fixing graph-3 here? should this be the type of the meter?\n. we avoid using style in markup. Also do we need to hold the state of the mouseY and mouseX?  I think they are always available.\n. I don't think we need to call setState all the time. in general this would be sufficient:\nthis.setState({message: '', showTooltip: false, mouse: false})\nBut I believe we don't need to handle the mouse operations.\n. why are we repeating the classes here? Shouldn't we add on class per indicator?\n. can we use a function that already gives us formatteddate? This will not work specially around Internationalization.\n. can we add a class for these tiles? like \"carousel__item\". In the future if we decide to move away from tiles we would not need to change the css.\nMoving this:\n.tiles > .tile > * {\nTo this:\n&__item > *\n. I believe there is a spacing issue here\n. I believe now we could rename fallbackLocale to currentLocale\n. can we rename this to setLocale ?\njavascript\n  setLocale(locale) => currentLocale = locale\n. i like that you added an optional x to the regex :+1: \n. can we replace tag--label by ${CLASS_ROOT}--label, you can use string template in ES6 which is really cool for that. https://github.com/grommet/grommet/blob/master/src/js/components/Distribution.js#L381\n. can we use default props for both direction and align ?\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Distribution.js#L506\n. as we moved to ES6 would you mind replacing var by let ?\n. can we use CLASS_ROOT and string templates here?\nSee this file for reference: https://github.com/grommet/grommet/blob/master/src/js/components/Distribution.js#L221.\nAs we moved to ES6 would you mind replacing var by let?\n. these too lines seems to long, can you break it into multiple lines? i need to investigate how to add that to our linters. our code itself has a bunch of issues like this.\n\nThe idea is to stay behind the line\n. if we are using CLASS_ROOT i would suggest not using brick anywhere else.\n. i would keep the name of this prop href to avoid confusion with react-router.\n. can width and height be any number? by looking at the code we only support 1 and 2 combinations.\nIf this is the only case we expect, can we add that to the property validation?\n. When i think of width and height, I immediately think in pixels. And by looking at this I thought that width and height would be both 1px and 1px. \nAfter reading the code I saw that it seems to be a normalized value. Can you explain what width 1 represents?\n. just out of curiosity, do you know why we have to check for rememberMe presence in refs?\n. i believe there is an extra space here. not sure why the linter did not catch this.\n. can you add key=\"label\" to this span to avoid react warnings for unique components inside an array?\n. can you add key=\"checkbox\" to this span to avoid react warnings for unique components inside an array?\n. makes fully sense, thanks!\n. Yes thank you!\n. we can use string template here as well. background-color-index-${this.props.colorIndex}\n. can we use inuit functions instead?\n@include media-query(lap-and-up) {\n  ...\n}\n. do we know why we are using 58px and 10px here, can we refer to the inuit spacing variables?\n. I like this approach, good job!\n. can we use div instead of span, I tried to check the rendered dom for this example and the span height is not the same as the button height.\n. Now that the main container has changed one level, I believe line 255 and 309 needs to change from:\nReactDOM.findDOMNode(this.refs.control)\nto \nReactDOM.findDOMNode(this.refs.control).firstChild\nWithout firstChild the menu layer is not aligned with the underlying button.\n. do you know why we removed the support for {..other}. By using pick we pass along only the props that Box supports. I may be missing something here.\n. Actually, even if we use pick, the overriding aspect will still be a problem. So good catch.\nI see your points. But, it just feels wrong to me to send everything down to Box. My preference would be to keep the \"pick\" code as it was. I would even rename other to boxProps. That would help with readability.\n. Fully agreed!\n. Yeah, great idea :)\n. I'm wondering if there is a way to automatically identify this without exposing the path to babel.\nIf you move this to be inside src/utils/gulp/gulp-tasks-test.js would that work?\nUltimately, I believe we could achieve this:\n  1 - Try to load require('fs').readFileSync(path.join(__dirname, '.babelrc'), 'utf8')\n  2 - If root .babelrc is not loaded, use the default one.\n. can you move customBabelConfig to be in the root level of our options? \nBabel is something we are using elsewhere, so it is not specific to the test context.\n. If we decide to move away from testPaths we need to add backward compatibility, meaning we should deprecated the options while still supporting it for now.\nBut, I believe we can maintain options.testPaths as is.\n. Awesome, I like you are using merge here.\n. sorry i add that string here. But I believe we can safely replace that like with options.jsAssets\n. Good idea on the mirror evaluation. But that would only work for scrollable tables right?\nInitially I added support for the table be responsive, regardless of the scrollable option.\n. added debounce\n. I'm trying to get the existing components to use string templates. Going one by one will take us some time. So instead we are trying to update as we go. \nWould you be kind enough to update Search component to use string templates and classnames?\nSee the anchor component for an example: https://github.com/grommet/grommet/blob/master/src/js/components/Anchor.js.\n. can we use undefined instead?\n. do you why you did not have to add _unmountHammer and _updateHammer to Carousel constructor and change the bind context?\nShouldn't we be adding something like this:\nthis._unmountHammer = this._unmountHammer(this);\nthis._updateHammer = this._updateHammer(this);\n. I see. it seems that when invoking functions from inside react lifecycle (componentDidMount) then you dont need the binding context... anyways thanks for the explanation.\n. I guess for now this is ok, but we need to decide if we are going to override the default focus for the browser. If the answer is yes, we need to do it for all the elements in grommet. Otherwise we will have an outline for one component, and another outline for another.\n. i believe we can write this as this._keyboardHandlers.esc. That's why the building is failing!\n. I would see this being done outside the chart as there are some assumptions in the component label. For example, we are assuming that a comma (new delimiter prop) will be present so that we can create tspans to separate it.\nI wonder if you can create a label string with a \\n in it when invoking the Chart component.\n. I believe we dont need this extra comma here.\n. thanks for adding warns and comments about this :clap: \n. can we add a11yTitle to this button and move the icon to props instead of children?\n<Button plain={true} onClick={this._onFullScreen} icon={<ExpandIcon />} a11yTitle='Toggle FullScreen' />\nJust make sure you localize the string for a11yTitle. See this: https://github.com/grommet/grommet/blob/master/src/js/components/SkipLinks.js#L107\n. do you know why there is an empty box here?\n. I believe we could simplify this:\njavascript\nif (this.props.videoHeader) {\n  videoHeader = this.props.videoHeader;\n} else if (this.props.allowFullScreen) {\n  // fallback to only displaying full screen icon in header\n  // if allowing fullscreen\n videoHeader = (\n    <Box align=\"end\" full=\"horizontal\">\n      <Button plain={true} onClick={this._onFullScreen} icon={<ExpandIcon />} a11yTitle='Toggle FullScreen' />\n    </Box>\n  );\n}\n. if you look the ${CLASS_ROOT}__title in scss, this is all we have:\nmargin-left: $inuit-base-spacing-unit;\nSo my question is, now that we are aligning content to the center, should we just get rid of ${CLASS_ROOT}__title?\n. can we add two separate classes?\njavascript\nconst timelineClasses = classnames(\n  `${CLASS_ROOT}__timeline-chapter`,\n  {\n    [`${CLASS_ROOT}__timeline-active`]: currentProgress !== 0 && currentProgress >= chapter.time && currentProgress < nextChapter.time\n  }\n);\n<div key={chapter.time} className={timelineClasses}\n...\n. can we simplify this:\nconst onClickControl = this.props.onClick || this._onClickControl;\n. Can we use the same Button + Icon structure as we have on top of this file? Please make sure to include the proper a11yTitle with some good description of what is this button is doing\n. why we need to have visibility hidden here?\n. should we just say 0, instead of 0% ?\n. who is adding padding to the summary ?\n. can we use let here?\n. I believe undefined is not necessary here.\n. can we use classnames function here?\nSee this for an example: https://github.com/grommet/grommet/blob/master/src/js/components/Anchor.js#L32\n. I would rather have the user send the icon instance. Dynamic require is problematic with Node. In this case, webpack will include all the icons in the bundle because it does not know which one will be passed along.\nSo we need to convert iconBefore: PropTypes.string, to iconBefore: PropTypes.node,\n. Interesting, Im wondering why quote is an array?\nAlso, does it make sense to make the quote text as a child node of the component?\n<Quote emphasize={true}>\n  I like webmocha folks!\n</Quote>\nor\n<Quote emphasize='credit'>\n  I like webmocha folks!\n</Quote>\nor\n<Quote emphasize='quote'>\n  I like webmocha folks!\n</Quote>\nWhat credit means? Maybe we can name it in a more generic way? A possible name could be footnote.\n. do you know why we need ruby package in here?\n. i believe we need to remove grommet-toolbox from here. For now we will leave in dependencies only. When we release grommet 0.6.0 we will move it back to devDependencies.\n. why are we touching the raw svg icons? @L0ZZI i need your input here.\n. controls cannot be inside the div otherwise animation will look weird. :(\n. Minor feedback.\nOur pattern has been not to use generic names for the responsive option.\nIn your case you want a configurable icon size.\nHow about:\nthis.state = { playing: false, progress: 0, iconSize: 'large' };\nand for the responsive option you can set the size to small:\n_onResponsive (small) {\n    this.setState({iconSize: small ? 'small' : 'large' });\n. why we are adding the extra space?\n. I'm wondering if we need the if clause. For me delete boxProps.size would suffice.\n. Can we move the overflow hidden to the existing button selector? See this line:\nhttps://github.com/DerekAhn/grommet/blob/fix/vertical-bars-appearing-on-Article-arrows/src/scss/grommet-core/_objects.article.scss#L67\n. can we move this check to the render function ?\n. can we use CLASS_ROOT?\nclassName={`${CLASS_ROOT}__pagination`}\n. minor suggestion: can we add a space in the operator?\nthis.state.selectedIndex + 1\n. Are we showing pagination for Article with direction column? I believe the pagination is only applicable for direction=\"row\"\n. why are we removing the padding for button__icon inside article?\n. Minor suggestion: I believe this can be safely replaced by Children.count\n. i think there is a spacing issue here onClick needs to be shifted to characters to the right\n. I believe that this.state.atBottom is not needed here.\nIf the page/chapter does not have a scroll, atBottom will never be true\n. I thought we would be rendering at the bottom of the page without positioning fixed.\n. Im not sure why adding padding will fix the issue. Can we try and remove the absolute positioning of the closer icon and add that as part of a box with justify right?\n. should we use a plus sign instead?\ngraphHeight = graphHeight + legendHeight;\nI think there is a way to get the computed legend height.\n. i believe there is a spacing issue here\n. Thanks so much for your contribution. But I don't think we need an onSubmit prop to solve the issue.\nIf you look here https://github.com/grommet/grommet/blob/master/src/js/components/SearchInput.js#L150\nI believe we have to move this line to be within the if clause. As in:\njavascript\n _onEnter (event) {\n    this.setState({dropActive: false});\n    if (this.state.activeSuggestionIndex >= 0) {\n      event.preventDefault(); // prevent submitting forms\n      let suggestion = this.props.suggestions[this.state.activeSuggestionIndex];\n      this.setState({value: suggestion});\n      if (this.props.onSelect) {\n        this.props.onSelect({target: this.refs.input, suggestion: suggestion});\n      }\n    }\n  }\n. do you know why the -1 is needed? can we enhance the comment to explain it?\n. Change looks good, thanks for your contribution.\nOne small request, in grommet we are using two characters spacing. would you mind to fix the spacing in this change?\n. any reason why we are using a span instead of a div ?\n. yeap, i believe it would be better\n. minor comment. should we do something like?\n} else if (value && typeof value === 'object') {\n. where npmVersion is coming from ?\n. I like that :)\n. really nice \ud83d\udc4f \n. never mind I see it now :)\n. I believe this should be img/mobile-app-icon.png. When we install grommet, there is no src anymore.\n. same here.\n. I believe here is the destination folder you can see we use src/img here.\nBut the place where we grab the image from should be path.join(grommetPath, 'img/shortcut-icon.png');\n. \nthis is the content of the install grommet in your node_modules folder.\n. would you mind to add the grommet namespace here?\n.#{$grommet-namespace}control-icon-#{$status} {\n. can we add a description why width: 0 is required?\n. should we move this up to the const list so that we have only one place with this.props ?\n. can we move this to the line before?\n. I believe we don't need the .grommet here. We only need that for layers, eg: Menu drop, Layer...\n. I'm assuming we are using transition group directly only because Animate component was not approved yet. Is this interpretation correct?\n. I believe we need Accordion instead of List. We need to add aria-role=\"tablist\" which is specific for components like Tab and Accordion.\n. any reason for not doing this.props.full ? boxProps.full : 'horizontal' ?\n. can we keep the two-character spacing in here? I believe we have 4, where it is supposed to be two.\nI need to add the jslint in this file as well. so my apologies.\n. can we add space in here? as you have for the other console messages?\n'[grommet] Grommet requires Node v' + supportedNodeVersion + \n. i like that!\n. We recently updated our support stack to 3+ for NPM. would you be kind enough to update here ?\n. Can we add that in the init command too :)\n. the spacing here as well: ' + command.options.app + '\n. i like that we delete the project folder if anything fails. can we add that also inside the init command?\n. spacing here: ' + command.options.app + '\n. how you deal with spaces in the description ?\n. I have a use case that is coming up soon that is to generate a new project to be published in github (static site).\nI think we could deprecate init and add one more attribute to new so that we could do:\ngrommet new empty sample-app \"Some description\"\ngrommet new full sample-app \"Some description\"\ngrommet new static sample-app \"Some description\"\n. we believe we could do:\nreturn this.filter(function(elem, pos) {\n  return this.indexOf(elem) === pos;\n}, this);\nand remove the need for that\n. can we add === ?\n. i would assume that we would create the component in the current folder. we cannot rely that src/js/components will be always present.\nSo, what do you think about var to = process.cwd();\n. if we use the current directory, we could remove the check if it is a \"grommet project\"\n. can we add spacing here: \n[' + from + '].\n. I personally feel that this template is too generic. As you can see, we are not importing any of the grommet components here.\nI like the idea of having these types of generators but it would be great if we could stay away from maintaining such structure. \nWe recently created a project called grommet-templates where we aim to add more high level components structure that people usually spend a lot of time creating.\nFor the base react component structure there are few tools available:\nFor Atom: https://atom.io/packages/react-snippets\nFor Sublime: https://github.com/babel/babel-sublime-snippets\nThese tools are \"IDE\" specific. \nYour seems like IDE-agnostic which is great, but I feel that it should live outside the grommet cli tool.\n@ericsoderberghp I would appreciate your feedback here as well.\n. can we move const { current, reference } = this.state; to be outside the if/else scenario?\nBTW, thanks for working on the ES6 refactoring.\n. minor comment, can we move this to one line up?\n. Transferring props at the div level will propagate any event from children. is that the expected behavior?\nInitially I was under the impression that transferring props would be placed in the input field only.\nThe behavior I've experienced when I've tested this PR was:\n0 - Added onFocus to the calendar.\n1 - Pressed tab until the Calendar search input\n2 - Focus callback successfully invoked\n3 - Pressed tab again, focus is now in the button\n4 - Focus callback invoked again (because of the even propagation)\nI think that transferring props in this component is very tricky as I'm not sure where is the right place to put it.\n@ericsoderberghp your insight here would be great.\n. I believe we can remove this block altogether \n. actually i believe we need to move this over to the other selector:\n``` scss\n\ninput[type=text],\ninput[type=range],\ninput[type=email],\ninput[type=password],\ninput[type=number],\ninput[type=file],\nselect,\ntextarea {\n    padding: 0 $form-horizontal-padding;\n\n&:focus {\n  padding: 0 $form-horizontal-padding;\n}\n\n}\n```\n. Hey, I believe there is something going on with the re-ordering of the imports. I'm assuming your IDE is sorting them as you save the file?\nCan we revert this change?\n. I believe the right check should be:\nactive: !openMulti ? (this.state.activeIndex === index) : child.props.active,\n. I believe we don't need an initialIndex\n. for some reason, Object.assign is messing up with the animation. When I'm testing this the animation gets laggy.\nCan we replace this by the following? \nconst collapseProps = Props.omit(this.props, Object.keys(Collapsible.propTypes));\nProps is available at:\nimport Props from '../utils/Props';\n. Way to go, thanks for writing the test \ud83d\udc4d \n. why only for Calendar? shouldn't we add the same for DateTime and search-input ?\n\n.#{$grommet-namespace}search-input input,\n.#{$grommet-namespace}calendar input,\n.#{$grommet-namespace}date-time input {\n. Can we use a debounce logic instead?\n\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Distribution.js#L247\n. I believe it is better for the caller to close it. All we have to do is to provide a callback function that the caller will be using to remove the Notification. We do the same with Layer and Tip.\n. onClick={this.props.onClose}\n. thanks for adding a11yTitle \ud83d\udc4f \n. I see it seems that throttle is a requirement in this case.\n. yeah, if we can avoid using lodash that would be great. I believe throttle is not complex method to implement.\nhttps://remysharp.com/2010/07/21/throttling-function-calls\n. I definitely understand your concerns. Generically speaking, I try to avoid using thridy-party libraries if I can solve the problem in a few lines of code. It feels to me that throttle is an example of that. \nIt is not that we are trying to avoid using lodash, but every time we add a new dependency we need to check the license and run that with the open source team in HPE to make sure it is ok to use it. We can definitely do that, but I would say it would be easier/faster to implement the throttle on my own.\nHopefully that makes sense to you.\n. @marlonpp gave a great idea, is that possible to make the icon dynamic? We can definitely default to Add, but I wonder if there are cases that I can use the pulse icon with other controls.\n. I believe classnames will handle that for us.\nconst classes = classnames(CLASS_ROOT, this.props.className) seems sufficient \n. I always forget to add my new components to index.js, thanks for remembering to add it \ud83d\udc4f \n. can we make this a 24px multiple following the inuitspacing units?\nmaybe: $base-size double($inuit-base-spacing-unit);\n. thanks for adding tests\n. should the proptypes be a node instead?\n. /home/travis/build/grommet/grommet/src/js/components/icons/Pulse.js\n  12:65  error  Missing semicolon  semi\n. can we use 6px? mayby halve(halve($inuit-base-spacing-unit)) ?\n. I don't think we need to explicitly declare \"role\" here, but transfer the props down to the ul component.\nBox implementation for transferring props: https://github.com/grommet/grommet/blob/master/src/js/components/Box.js#L72\nOriginal issue tracking the problem:\nhttps://github.com/grommet/grommet/issues/85\n. I like the idea of having a default prop for role. but we still need the transfer props. \nI'm ok with leaving role prop if we decide to keep default props.\n. I like the idea of having a default prop for role. but we still need the transfer props. \nI'm ok with leaving role prop if we decide to keep default props.\n. I think we can avoid this empty span in the actual DOM\n. maybe we can move this out to avoid empty spam\nlet labelNode;\nif (item.label) {\n  labelNode = <span>{item.label}</span>\n}\n. I think we can simply this to:\nthis._video.currentTime = typeof time !== 'undefined' ? time : this._video.currentTime;\nAs long as we are not using time = null we should be good\n. any reason for changing undefined to null ?\n. let's avoid using null. Grommet pattern is to use undefined only\n. can we use string template to avoid string concatenation ?\n. can we move duration to your const declaration in line 58?\n. I think we can safely use undefined here\n. null here, not sure if I'm missing something, but does undefined breaks something here?\n. I think we can move duration up to line 37\n. string template to avoid string concatenation \n. here we are using undefined \ud83d\udc4d So I'm assuming it is ok\n. if this is a function, i believe it should be lowercase. formatTime(time)\n. For me it is unclear what FormatTime is. I'm assuming this module would eventually handle other time formats in the future.\nCan this function have a name ? I think a good example to compare is Locale utils: https://github.com/grommet/grommet/blob/master/src/js/utils/Locale.js#L17\nAlso, we are trying to add tests as much as we can. This utils would be a good candidate for testing so that we can understand the formatting better.\n. can we please add this comment // remove in 1.0 we will be using it to search for deprecated properties.\n. great start on this. I believe we can safely remove id and aria-label from here.\n. can you remove this snapshot from this PR?\n. I wonder if we can make this dynamic using MenuDrop.childContextTypes.\nProbably\nProps.omit(props, MenuDrop.MenuDrop.childContextTypes)\n. should we do this instead?\nrestProps =  Props.omit(restProps,\n        Object.keys(MenuDrop.propTypes));\n. why this code is in layer.scss ?\n. thanks for adding tests :)\n. I assuming this deletion was an accident?\n. shouldn't we translate this as well?\n. shouldn't we translate this as well?\n. shouldn't we translate this as well?\n. I believe this is an internal component and should not be exposed.\n. I believe this is an internal component and should not be exposed.\n. Thanks for adding Card!\n. I dont think we need to add the delete here. \nconst {\n  className, defaultValue, value, placeHolder, ...props\n} = this.props;\nThis will take care of it.\n. I believe we should removed this from the DOM\n. {...props} should have support for disabled\n. I don't think we need to declare a proptype for disabled.\n. awesome, thanks for adding a comment\n. Thanks for your contribution. Would you mind to use the following pattern instead?\nif (!disabled) {\n  ...\n}\nThis is very minor, and it is just for consistency's sake.. totally minor, would you mind removing the extra space before the curly bracket ? We should add that to our linter :)\nthis.setState({ focused: false });. Thanks for your contribution, but I guess this problem is unrelated with the align center aspect of the layer.\nI believe the reason for the problem is this line https://github.com/grommet/grommet/blob/master/src/scss/grommet-core/_objects.layer.scss#L61\nI'm currently investigating it more.. Yeah I just validated it, remove these lines fix the issue. Do you mind to update your pull request to reflect it? Please remove from line 60 to 71.. Thanks you for the contribution!. I don't think we need to call announceFunc here as we already call when setState is invoked.. I've added announce every time we set activeIndex . can we do this instead?\nsuggestion && typeof suggestion === 'object'. I don't think we should touch the onInputKeyDown.\nthere is the _onEnter callback that I believe is missing an else.\nToday the function logic is like this:\nif (activeSuggestionIndex >= 0) {\n      const suggestion = suggestions[activeSuggestionIndex];\n      this.setState({ value: suggestion }, () => {\n        const suggestionMessage = this._renderLabel(suggestion);\n        const selectedMessage = Intl.getMessage(intl, 'Selected');\n        announce(`${suggestionMessage} ${selectedMessage}`);\n      });\n      if (onSelect) {\n        onSelect({\n          target: this._inputRef || this._controlRef,\n          suggestion: suggestion\n        }, true);\n      }\n    }\nand I believe it should be:\nif (activeSuggestionIndex >= 0) {\n      const suggestion = suggestions[activeSuggestionIndex];\n      this.setState({ value: suggestion }, () => {\n        const suggestionMessage = this._renderLabel(suggestion);\n        const selectedMessage = Intl.getMessage(intl, 'Selected');\n        announce(`${suggestionMessage} ${selectedMessage}`);\n      });\n      if (onSelect) {\n        onSelect({\n          target: this._inputRef || this._controlRef,\n          suggestion: suggestion\n        }, true);\n      }\n    } else {\n      onSelect({\n        target: this._inputRef || this._controlRef\n      }, false);\n    }. agreed. good catch. I believe we need that i both places. if drop is active and we dont select anything and press enter the callback is not being invoked.. Button does not have the concept of active. So we don't need support for path as an object. it is just a regular string. So this line can be (router.history || router).push(path). same here. I believe we can get rid of target and use just path.. can we add a space here { icon: <MoreIcon /> }. actually let me add it. I believe we should keep the PropTypes coming from react-desc. Can we add React first and PropTypes after ?. no rush :). i believe we can simplify this to\nconst index = !this.props.infinite && activeIndex === 0 ? activeIndex : (activeIndex + numSlides - 1) % numSlides. I believe we can simplify this to:\nconst index = !this.props.infinite && activeIndex === children.length - 1 ? activeIndex : (activeIndex + 1) % numSlides;. I believe this change will affect the end result right? previously was a node with a label tag, and now it is a string. Any motivation for this change?. do you mind using the caret here? \"^1.1.1\". can we do ES6 import instead?\nimport { TransitionGroup } from 'react-transition-group';. same here. Thanks for keeping the FormattedMessage for backwards compatibility sake. But in the future we will be removing it. I don't think we should be translating anything here. The caller should make sure to translate this before sending it to us.\nThis will eventually remove the need for React.isValidElement call.. I believe this needs to be in a new line so that the lint will pass. should this be translated?. I believe this needs to be translated. I believe this needs to be translated. for accessibility reasons I propose we don't allow changing the tag here.\nUsers with disabilities use tools to see all the heading in the page. and if we are not using the h1-h6 range they will not be able to see it.. I believe this should be props.theme.heading. I believe this style is also used in other places. can we make this a mixin?. of course. I missed that. sorry. why we need to describe this none prop? is that a bug in react-desc?. good idea!!!!. StyledBox used edgeSize for pad prop which has xsmall as a key.. any reason for an empty className here?. I'm worried with the fixed 36px in there.\nI propose we convert the label to a flexbox element. Ideas?\n\n. nope :)\n. I will add that in the docs.. we can definitely change that to be a normalized value. Do you have suggestions on the values for each of these keys? How about?\nWeak: 0.9, Medium: 0.5, Strong: 0.1 ?\nFollowing the pattern in other components, if the user passes true, it would default to medium.. This allows for rgb, notice the question mark after the a, which makes it optional. I've tested this regex with the following inputs:\n\nrgb(50, 50, 50) -> returns [50, 50 50]\nrgba(50, 50, 50, 0.1) -> returns [50, 50 50]\nrgba( 50,50, 50,) -> returns [50, 50 50]\n\nThe last one may have spaces before and after, I get that too.. agreed. thanks for the suggestion.. Previously colorIsDark would not support if we use rbg. It would always assume the color was HEX. I've changed this to show that we can support both now. We can revert to #333333 but I believe it is a good test case to keep.. can you expand on why this is needed? Also I believe we should be using the inuit base spacing unit.. It would be great if we can find a solution that does not have a link between form -> check-box and radio-button.. We need to safe guard className since it will not always be present\n{\n          [`${this.props.className}__drop`]: this.props.className,. can we use undefined? :). glad we fixed the NaN :). I believe we cannot call this function onNarrow. I immediately thought that that we would have something like onLapAndUp. where onNarrow actually represents the change in the breakpoint. How about naming it onChange ?. this is for the Box going over in the Box doc split. let me try and see if it works. great suggestion!\n. we can definitely do this. but I'm using the name inside select\nhttps://github.com/grommet/grommet/pull/1686/files#diff-e73ec96fafca62459d0898bace1bd91fR151. good\n. why is that needed?. activeIndex is also a property of Tabs. This is the uncontrolled vs controlled thing. If you provide activeIndex you have to control the changes with the onActive. Similar to value and onChange.. This is the same as the other components that have messages. This is for Tabs component only. Tab does not have any custom message.. any reason why we are switching everything to double quotes? Grommet pattern is to use single quote.. expect to be null we don't need to call expectPortal ;). I wanted to use TextInput.extend but the HOCs would not allow me to do it. I'm trying to find a solution to use something like this:\nconst SelectInput = TextInput.extend`\n  cursor: pointer;\n`;\nI like this solution because it will give us more flexibility if we need to add more styles to it in the future.. But I guess to support something like this TextInput would need to allow overriding StyledTextInput which can add more complexity. I will use style :). can the caller do this? I'm wondering if there are cases where you would want 4 decimal places instead. Can we just assume that whoever is passing value will format it properly?. I still need to account for dark theme with Tabs. Can we do this in a separate PR?. this is used here:\njavascript\n{ side: 'bottom', size: 'medium', color: hover || 'black' }\nI believe it is just easier if we keep it border instead of having to dealing with boolean to border conversion.\nThoughts?. agreed. will change it.. can we use undefined instead of null?. i think we can remove this extra line here. find visible parent might return undefined, so getBoundingClientRect may fail to execute. I believe this is the reason the build is failing. We can definitely do that. but we would need to remove the center center that is added there today right? Also, I'm a little confused on why we have opacity available today. Isn't that the same situation as background position?. any reason why we are disabling this?\nI think we should always add export default { backgroundProps }. why we need none ?. can we replace this with none? I don't get why we need both none and margin: 0. can we move renderData to be a children of Table ? like the children as a function? I know we are using that in other grommet v2 stuff.. Defaults to none ?. what is the +1 here? Should that be quotes instead?. label ?. I think we should only add an id if the user has passed one. otherwise we would have two select containers with undefined_select-drop ids (duplicate). humm yeah of course hahaha. can we use undefined instead of null?. can we add a comment in the code why 0.5 is there?. why not using value ? I'm not sure why we need a separate prop for the label. in fact this seems not to be the label but the selected item in the select. value today can be a react node right ? so in theory you can pass anything to the selected item.\n. what is this doing ?. why was this changed?. why was this added?. why do you need to check for props.dark here?. yeah we remove this from this PR ? since this is dealing with dark theme only?. I would defer that to @L0ZZI. thoughts?. cool. thanks for fixing this. do you have a place where we can reproduce this?. got it.. marker ?. I think the button inside select should fill the available space for the container. right?. why for Anchor story we did not use setTimeout and here we are using setTimeout ?. can we use undefined ?. this should be handled by the Drop no? Also,  if we call .focus() the browser will scroll. we may consider using the util I created that avoids the scroll. how about we do a HOC called withForwardRef and we do this once inside that hoc? with that we can keep using compose + export default.. where did we move this to? . can we mock ?. I just validated the focus stopped working . why are we downgrading storybook ? If I remember correctly, there is a bug with webpack 4 and storybook.. i dont think so since you can pass activeIndex={undefined}. We don't add defaultProps for activeIndex.. sure I like the suggestion.. :). just to show folks they can actually customize this. otherwise they would have to guess.. should this be oneOfType ?. yup :)\n. can we consider columns as something coming from the Context? just thinking out loud.. can we remove primary and let the user pass a custom render if they want that behavior ?. can we consider using collapsible here?. why if we have groups we have xxsmall size?. it still does. but as per you feedback in a previous pr, we are always sending the array on change. remember? \ud83d\ude04 . Adding both min-width: 0 and min-height: 0 always. This helps to avoid having to set a given direction for Box just to fix flexbugs\nFixed focus management for CheckBox to align with our other inputs. without it I'm facing overflow issues when using <Text truncate={true} />. we currently don't export this icon anywhere? can we change it to use grommet-icons icon ?. Attaching mouseActive to the window object to avoid problems with portals. mouseActive is getting set to false when opening a portal because this.mouseActive in a new portal is always false. . not sure where it moved to. but we did not remove it.\nhttps://github.com/grommet/grommet/blob/571a977eff5350d21716aed27ff4bb8b55453ded/src/js/components/DropButton/tests/snapshots/DropButton-test.js.snap#L218. I see. hum I cannot think of a way to fix that without creating a wrapper box, just to avoid this problem. I would much rather know for sure that we don't want to always use both.. I actually add that in the Custom Search Select. this is why I changed it.. I use that in the theme for custom search.. sure let me add a comment.. I'm not sure why we added flex false before. but I'm certain that it was to avoid elements collapsing.\nBut it makes sense for the search input to be fixed and the list of options to scroll. the list of options should take the remaining space in the drop height.. agreed. let me change that.. I feel we should not call onClickOutside if we clicked in the the drop target. Today we are doing that. How about doing something like this:\nonClickDocument = (event) => {\n    const { dropTarget, onClickOutside } = this.props;\n    const dropTargetNode = findDOMNode(dropTarget);\n    const dropNode = findDOMNode(this.dropRef);\n    if (\n      onClickOutside &&\n      !dropTargetNode.contains(event.target) &&\n      !dropNode.contains(event.target)\n    ) {\n      onClickOutside();\n    }\n  }\n. This is because of this issue: https://github.com/babel/babel-eslint/issues/530#issue-265804171\nYou can reproduce this by removing node_modules and run npm install again.. I think this was something with the latest babel-plugin release. downgrading to 7 should never install 8. So I feel we are relatively safe here.. why this is an empty json object ?. also here we have an array of empty objects. this could be a problem with the react-desc. This will be a problem with long grouped elements. I like your idea of adding a loadMore instead of automatically loading more results for that group.. By testing this, it seems that even though you've said medium the datatable is taking full width.. what is the difference between context and scope ? The variable name seems very similar.. should we use Box height prop ?. I would prefer to do !!theme.dataTable[context]. it feels weird to have a prop named groupState since react has the concept of state. I think I've mentioned this in a previous PR.. {showFooter && (\n  <Footer\n    columns={columns}\n    footerValues={footerValues}\n    groups={groups}\n    size={size}\n    theme={theme}\n  />\n)}. groups && .... groups && .... filters && search && ... why 12 ? can we at least add a comment?. height prop in Box? . can we created a styled component that extends Box with this style?\nhttps://github.com/grommet/grommet/blob/NEXT/src/js/components/Select/SelectContainer.js#L21. https://github.com/grommet/grommet/blob/NEXT/src/js/components/Select/SelectContainer.js#L21. height prop on Box?. https://github.com/grommet/grommet/blob/NEXT/src/js/components/Select/SelectContainer.js#L21. agreed. \ud83d\udc4d \n. yeah :). I would recommend disabling any sort of auto formatter in your IDE. can you please update this pr to remove the code spacing changes?. Great contribution. I think we can simplify it a little bit:\n```\nexport default class TextInput extends Component {\n  activeKeyboardHandlers =  {\n      esc: this._onRemoveDrop,\n      tab: this._onRemoveDrop,\n      up: this._onPreviousSuggestion,\n      down: this._onNextSuggestion,\n      enter: this._onEnter\n  };\nfocusedKeyboardHandlers =  {\n      down: this._onAddDrop\n  };\ncomponentDidUpdate (prevProps, prevState) {\n      // use this.activeKeyboardHandlers and this.focusedKeyboardHandlers\n  } \ncomponenWillUnmount() {\n     // use this.activeKeyboardHandlers and this.focusedKeyboardHandlers\n  }\n}\n```. yeah I've been using class properties for a while now. Class properties in currently in Stage 2.\nhttps://github.com/grommet/grommet/blob/master/.babelrc#L2\nBabel preset env includes stage 2 definitions. So, from a semantic perspective we are good.\nI will push the eslint support for that in grommet v1. In v2 we are using it, so I think it is better to keep the same structure.. what Ix stands for?\ncan we use just selectedValues or selectedIndexes ?. whopps I think we need to remove this :). if we use a component without using Grommet,stateTheme.icon is empty. we should not invoke IconThemeContext then. yeah let's start with the drop background color! good point!. yeah agree we should have two colors for Select icon color. let me change it.. have you considered using withFocus hoc ?. but you are setting focus to the state right ? I would be curious to understand why withFocus did not work for you.. I can't, take the following example for a custom theme:\nconst theme = {\n    select: {\n       icons: {\n         color: {\n           light: '#ffffff'\n         }\n       }\n    },\n  }\nthen if I pass the color as a prop we would have:\n<SelectIcon color=\"#ffffff\" />\nthis fails since #ffffff is not a color name.. they can right? by using anchor.color ?. can we do this in a separate pr ?. what do you mean ?. why are we removing the logic of mouse active ?. yup yup\nlet me fix it. no problem. true! let me fix it. sure!!. sure :). yup. I wonder that is the display name for this. maybe we can do class ParagraphComponent and const Paragraph so that the display name is Paragraph.. yeah I like it here. so that the exported thing is always StyledParagraph. yeah let me change grommet icons. but in the meantime can we approve this since it is a breaking change ?. this should be an array of nodes no ?. curious why we are removing the array here?. let me look into this.. yes I did.. not sure I understand your suggestion :(. why you think this feels odd ? I think it is a good trade off between the previous solution where we had the TODO: revisit this. oh I see what you are suggesting. I'm not sure I like that. since you would be forcing people to be using a given structure. Icon today can be really anything, including an svg.. agreed.. I don't think it is always right. But I think we are already relying on that elsewhere. I took this example from FormField where we clone the children to pass plain. This is exactly the same thing.\nI'm ok with this trade off.. why the 1000 here ? can we at least add a comment explaining this?. I wish I could add a comment for this. but since we started using alias to avoid from '../' in favor of from \"grommet\" the linter started complaining about the fact that we don't have grommet inside node_modules.. this will install 3.9.1 right ? since we have the ^ there.. yes I get it. but this PR does not fix this problem since it will install 3.9.1 still right ?. can you get me more details on how to reproduce this issue?. fixed. I've fixed this. I agree. But I'm following naming strategy for StyledCheckBoxBox. removing this is breaking the es6 distribution.\nwe run this\ncross-env BABEL_ENV=es6 babel ./src/js/ --ignore '__tests__' --out-dir ./dist/es6 --copy-files\nand ./tools/grommet-babel-preset-es2015 is the one responsible for adding es6 as the babel environment.\nYou can test this by opening the dist/es6/components/Accordion/Accordion.js.\nThis is important for tree shaking. why is this needed?. why are we disabling this? isn't del in the package.json ?. why is this here?. same... this needs to be a single otherwise it will show like this:\n\n. for some reason Tunable and Served stories are broken. the first two columns have background white. this seems like a regression.. How are we doing this logic?\nIf I do <Heading size='large' />, how can I make sure it will stay the same size always?\nAre we automatically changing to medium when we go mobile?. This is the override for the toggle only. we have the toggle override and the regular checkbox override.. I agree this works well. but we still need one for knob i believe. to customize things in the toggle mode.. I think we can leverage the existing toggle prop. nahh.. we need both :(. oh I see. :). we have been using width all over base.js for border. I hesitant to change that. see control for an example:\ncontrol: {\n        border: {\n          width: '1px',\n          radius: '4px',\n          color: {\n            dark: css`${props => props.theme.global.colors['border-dark']}`,\n            light: css`${props => props.theme.global.colors['border-light']}`,\n          },\n        },\nradiobutton uses that as well... this is not the check icon, this is the box surrounding the icon. I think for the same reason as above, keep radius. we are using radius for the other controls.. This is to be used by the extend. you may want to apply a different styled if this is checked or not. but I agree in the case of the icon, it will always be checked. I'm going to remove it.. this name is a little too vague for me. onMonthChange maybe ?. this feels odd to me. it seems like a two way data flow now? It is a way for the callers to change the Calendar. it seems like we should come up with a solution that uses the props instead.. I hear you. but does it need to? The reference is not changed yet right? For the fact that we moved months, you may want to reevaluate updating the reference, but you don't need to. This is why I like onMonthChange better, or something more descriptive of what is actually happening.. do we need normalize color here?. nah I dont think so. just noticed that we are updating the colorForName function. normalizecolor ?. why background and text is required here? I think if we are plugin Grommet in an existing application, it should just inherit it, in case for example props.theme.text is undefined.\nmaybe something like ...\nconst colorStyle = css`color: ${props => colorForName('text', props.theme)};`\n${props => props.theme.text && colorStyle}\n.... no, I think we can keep reference as is. and onMonthChange passes reference just if you are using an uncontrolled Calendar?\nonMonthChange = (reference) => {}\n. we are using it for testing and storybook. it is a devDependency, so the published grommet is not dependent on that.. this is just a reminder. we need to add this to our list of breaking changes in the PR description. why are we removing brand ?. this seems like a potential unexpected change. why are all these color #444444 going away?. why are we changing this?. nice fix!. this is bleeding to the dom right? can we use colorProp to avoid this?. bleeding. bleeding. bleeding. bleeding. bleeding. oh no that was unintentional. let me change to number or any string. . yeah I think what I did was messy. i agree with you, let me change it.. \ud83d\udc4d \n. yes! we can actually pass just the color name in the custom theme and rely on normalizeColor to parse that properly. should the strong here move removed and replaced with a theme entry for weight?. why are we changing this?. why?. I'm following the pattern in Accordion. we call header there.. I agree with the wording let me change it\n. checking.... actually it makes sense your feedback. in accordion, it is actually a header. here it is not.. most of our components do not have prop types on them. since it lives inside docs.js. yeah I agree that 80 columns is best. let me try it again, but there were some minor changes to the snapshots since the template literals were breaking in weird spots.. yeah good call. I'm going to fix this.. primaryStyle sets background and color again (through backgroundStyle function). color is set by basicStyle and then primaryStyle overrides it even though button.color is set.. Grommet does deepMerge of the base theme. I want the font to be the grommet one. and enhance the rest. makes sense ?. maybe textArg ? to align better. textColor is already being used.. I think they are complementary. I still think there should be a place where we document Theme and their global properties.\nA lot of our components have fallbacks to a global property (e.g. control). I think it is important to describe that in each component.\nThe way I envision this is as follows:\n1) A dedicated Theme page that will describe the structure of our theme object and an overall description of each global property.\n2) Inside each component, we would describe the specific theme properties and how that component consumes the global ones. This would help users understand the fallback scenarios and common things to change in the global entry that affects that given component.\nThoughts?. great catch. agreed.. yes unfortunately. to show in a smaller font size. All the fonts are contained in there it is a super set. This list comes from github and atlassian. If we want to do system fonts this is the way to go. no it is a super set. we should be fine.. correct. good catch. let me look into it.. thanks for fixing this.. nope. I don't think it makes a difference. Yeah i think this was a mistake on my side. It should be maxHeight. See the original issue associated. By clearing top the browser will scroll to the top automatically . Have you tested it? I tried and the resize seems to be working. I will look into it again. I try it again. Do you have other ideas on how to solve the scroll to top problem?. I explored this solution initially, but quickly gave up on it since you may have scrolled down, clicked something that affected the size, and you still want to stay in the same scroll position. I think calling place should not cause the browser to scroll to the top. I\u2019m trying to explore solutions that will allow that to happen. why we have to put the ref in the state? I saw this in the drop button and removed it. it presented problems with performance too.. why we have to check for the keyCode? I think onEsc can always do event.nativeEvent.stopImmediatePropagation(). I don't think we need to blur the input.. i think we could just always listen for the onEsc regardless of having suggestions or not. we don't have basis prop do we?. do we need to pass flex here?. remove scrollable ?. should we add fill and overflow here?. correct let me take a look. I dont think so since componentDidMount on layercontainer will always be called first.. take a look here\nhttps://storybook.grommet.io/?selectedKind=Layer&selectedStory=Form&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\ngo to the input and try pressing esc inside the layer. the layer will close.\nI don't think we should be using stopImmediatePropagation.. i think you are running and old version of styled components. you need to delete your node modules and run npm install again. did you see the link to the issue in the PR? I add a codesandbox there.\nhttps://codesandbox.io/s/wn4q8njw77\nThe height is being limited because the drop is rendered near the bottom and the window height - bottom is almost nothing.. maybe we can use a new variable? instead of touching the top property? thoughts ?. Can we just drop the This the polymorphic ? we don't add this description for other styled-components props.. why do we need to install acorn ?. I'm sorry i did not mention this. but can we use as to align with styled-component and the other anchor pr ?. let me try this again. in my case i have align.bottom === 'top' so that the bottom of the drop is at the top of the target. this is the else scenario . can we do this in the constructor instead? I don't think it is a good idea to check this in every render function (called multiple times).. how about !plain && (elevation || theme.global.drop.shadowSize || 'small). yup yup this is expected. this is just a way that other libraries on top of grommet can change the default theme without using the Provider or Grommet component.. agreed let me change it.. is this an expected change? it seems that our tests used to be top: 0px and now it is 50%. axis ?. can we do \nconst marginValue = margin[position] || margin[axe] || margin; ?. the .  theme.global.edgeSize[marginValue] || marginValue;. how about\n```\nconst marginInTheme = !!theme.global.edgeSize[marginValue];\nreturn !marginInTheme && typeof marginValue !== 'string' ? '0px' : marginApplied;\n``. done. agreed. I addedinitializeDefaultTheme. i likedefaultsince it is a clear indication that will replace the default theme.. Not a bad idea. I'm just a little concerned about that given the fact that users may want to pass something likeinitializeDefaults({ something: 'else' })and expect it to work when we are not going to read that info.. hum I see. let my play with this locally.. I agree this feels more flexible, and future proof. I think we have to at least receive what is the user agent.`\nThoughts?. yup I like having the mobile detect logic inside grommet.. crazy. im not sure why I added this.. Im afraid not. this is prettier running. we did not change. it was always light-1. let me change to light-2.. see here https://github.com/grommet/grommet/blob/master/src/js/components/Meter/Meter.js#L22. ok agreed. why not? disabled and toggle are booleans. The idea is StyledCheckBoxBox can be customized differently if this is a toggle vs default checkbox.. true. let me change it.. show we say dropHeight just to be more explicit ? @ericsoderberghp thoughts?. im not sure why we need priorTheme. I've tested the dark and light shadows and they work fine. I'm assuming this was here for a reason, but I cannot seem to reproduce a scenario where this would be needed.\n\n. I believe this is right now. previous the test snapshots were using the dark control color (accent-1) and I believe it should be the brand color since no dark is being set for this theme.. Why we are including this extra level here?. can we keep hidden and do aria-hidden={hidden} inside this component ?. I would add aria-hidden={hidden} in line 69 . good question. the Component.propTypes is excluded in production not the doc.. priorMask ?. withFocus already gives you are focus prop. any reason why we are having our own here? . can we move this to getDerivedStateFromProps when focus is false?. I've seen this code elsewhere, should we create a placeholderStyle and reuse it ?. should we include a simple example here?. just thinking out loud, the length is singular but can receive an array. I wonder if we should always make an array and call it lengths ? similar to options. sure thing\n. agreed. can we add a dot after Container?. can we add a dot after Layer ?. currently our layer does not animate out. . i dont think none is a valid animation value. I feel animation should not be added if animate is false.. I think we need to move animation inside getKeyFrames, I think know would be better to even rename this function to getAnimationStyle.\nfrom\nanimation: ${props => getKeyframes(props.animate, \"center\", \"vertical\")}\nto\n${props => getAnimationStyle(props.animate, \"center\", \"vertical\")}\ninside animation style we could do:\nif (!animate) {\n  return '';\n}. when animate would be false? Can we always default to true?\n```\n  const getAnimationStyle = (animate = true, position, full) => {\n    if (!animate) {\n       return '';\n     }\nreturn (typeof animate === 'string') ? css`\n     animation: ${KEYFRAMES[position][full]} ${animate};\n   ` : css`\n     animation: ${KEYFRAMES[position][full]} 0.2s ease-in-out forwards;\n   `\n\n};\n. why do we need a deepMerge here ?. can we add a comment explaining why event.preventDefault is here?. this seems a little odd to me that Form is allowing a two-way communication. I'm wondering if we should do this through props if possible?. why we need an update in the provider?. this similar to comment above. but I think this is the only way to achieve this.. I think think the `Used for accessibility by screen readers` makes sense here.. can we include more tests? like by submiting a form a given data will be passed, similar to errors in the form ?. can we include the return type too? I think you can return either a message or a boolean ?. can we expand the propType to be a shape:\nPropTypes.shape({ regexp: RegExp, message: PropTypes.string })\n```\nI don't think React has a RegExp proptype. maybe we can add \"any\" and explain that regexp should be a regexp instance ?\n. i hear you, but does it need to be \"deep\"?. how about shape instead of style?\nAlso, can we list the PropTypes instead of just using string ?\nPropTypes.oneOf(['solid', 'dashed', ..]).defaultValue('solid'). by speaking with @ericsoderberghp let's keep it style since the css variable is border-style. remove indicating ?. hum. i can definitely add a comment for that. but our theme object never assumed it was css only. take Select as an example, we use the theme to allow a custom component to use for the TextInput. we have other examples.\nAlthough I agree most of the theme entries affect css directly, it is not 100% the case. So, I'm not sure if we should add a comment for all exceptions there.. let me take a look.... sure thing. I like it. let me change it. we can safely remove this since StyledDrop extends from Box and Box handles overflow already.. yeah let me remove this. I was adding this as an example. and your overflow in this case is expected. storybook renders an iframe inside the main body, so the calendar cannot overflow outside that.. i tried. but when I use the object destruction it breaks the required prop. { ...OverflowPropTypes }.. actually the default value is undefined.. is that really needed? we dont communicate in other scenarios. take the focusIndicator right there... we don't say \"we show the focus indicator by default\".. how about this for the description?\n\nA custom icon to be used when rendering the select. You can use false to not render an icon at all.. great suggestion. let me work on it.. \n",
    "donwise": "Tried ~grommet, and as a guess ~/grommet and ~/./grommet and no change.\n. That did it  Thanks for your help!\n. ",
    "morphy76": "Thank you Alan\nI'm not really skilled with js, actually I'm starting now and some concepts\nare quite new to me.\nas you can see in the issue description, I installed grommet using bower\nthen tried to make it to be a node module; my first option was to directly\nuse the npm install way but too much issues with HP network (long story).\nWhat is your recommendation? drop the isomorphic approach because it is\nknown to be too young or keep on fighting and in case, do you think I\nshould try some other way to bring grommet in the project?\nGoing on registering with slack chat in order to listen experts talking :)\nlooking forward for your comments\nRiccardo\nIl giorno ven 15 mag 2015 alle ore 18:51 Alan Souza \nnotifications@github.com ha scritto:\n\nHi,\nThanks for trying out Grommet in isomorphic mode. How did you install\nGrommet? I have a feeling that you are using the bower version. I say so\nbecause of this:\n/home/rick/workspace/node/isojs/node_modules/grommet/grommet.js:2851\ngrommet.js is only provided with Bower.\nWe are still not officially supporting isomorphic mode, but I would be\nhappy to further assist you if you need help. We are all online inside Slack\nchat https://grommet.slack.com/.\nAlan\n\nReply to this email directly or view it on GitHub\nhttps://github.com/HewlettPackard/grommet/issues/14#issuecomment-102457467\n.\n. \n",
    "manotoshsil": "Hi Alan,\nSorry I haven't returned to try out your suggested approach... will surely do this weekend...& update this thread with the outcome\nThanks for your time.\n. Hello Alan,\nI still see the very same issue ..\nHeres what i tried again.\n1) Downloaded the grommet-master.zip to a new location on my drive.\n2)  Ran   &  then     &  \n  Those succeded without errors.\n3)but when i run gulp task    I see these \n\nC:\\Grom\\grommet-master>gulp dist\nC:\\Grom\\grommet-master\\node_modules\\gulp-sass\\node_modules\\node-sass\\lib\\index.j\ns:22\n    throw new Error('`libsass` bindings not found. Try reinstalling `node-sass\n          ^\nError: `libsass` bindings not found. Try reinstalling `node-sass`?\n    at getBinding (C:\\Grom\\grommet-master\\node_modules\\gulp-sass\\node_modules\\no\nde-sass\\lib\\index.js:22:11)\n    at Object. (C:\\Grom\\grommet-master\\node_modules\\gulp-sass\\node_mo\ndules\\node-sass\\lib\\index.js:188:23)\n    at Module._compile (module.js:431:26)\n    at Object.Module._extensions..js (module.js:449:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object. (C:\\Grom\\grommet-master\\node_modules\\gulp-sass\\index.j\ns:3:17)\n    at Module._compile (module.js:431:26)\n\ni tried  npm install node-sass@2 \nI verified my node installer version is  node-v0.12.3-x64\nAlthough this stops me from running grommet samples but iam analysing & liking the React js samples in it.. Along with the HPE themeing resources bundled with it .\n. I deleted the global node_modules folder & installed grommet from scratch \nNow the HPE sample website is up on my local :+1: \n. Thanks. Its fixed now :-)\n. ",
    "ickedude": "I did not understand why you have to install grommet globally when it is only needed for init or export. I expected a workflow like this:\njavascript\n$ mkdir foo\n$ cd foo\n$ npm install grommet\n$ ./node_modules/.bin/grommet init\nThink of a kind of git init. But actually I see that I missed to set the var app to the basename of the dir I am in if no app name is given. But what do you think about the workflow?\n. In medium-app the Activity uses a table, where the onSelect prop is used. But there Table is a child of IndexTable is a child of Index is a child of Activity and onSelect is implemented in IndexTable.\n. fixed with the above commits\n. IndexTable depends on selectable without onClick (src/js/components/index/IndexTable.js)\n. ",
    "rockybar": "Hopefully, I got it. Sorry I\u2019m so clumsy at this  as a newbie \u2639\nThanks again,\nRock\nFrom: Alan Souza [mailto:notifications@github.com]\nSent: Tuesday, May 26, 2015 9:53 PM\nTo: HewlettPackard/grommet\nCc: Barney, Rocky D\nSubject: Re: [grommet] Proposing change to allow creating a standalone Tour example suitable\u2026 (#20)\nAlmost there, two minor changes in my opinion. I would definitely have accepted if would be for the conflict unresolved. with the <<<<<< HEAD statement. I'm sure you can fix this in no time.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/HewlettPackard/grommet/pull/20#issuecomment-105746314.\n. Alan,\nI'm not at my computer right now but I believe I understand most of your suggestions. I will try to remove the extra unneeded dependencies - thanks for your thoughts on those as I tried to remove some dependencies but I kept getting errors so I gave up trying and kept them all.\nRegarding copying the source, I found that just having grommet as a dependency didn't work - I don't recall if I was getting errors or if it was that it mostly worked except that the dashboard failed to show up ( other panels were ok, but for some reason not the dashboard). When I referred to the source instead of relying on the installed grommet, it magically worked. Any ideas?\nRock\nOn May 25, 2015, at 1:02 PM, Alan Souza notifications@github.com<mailto:notifications@github.com> wrote:\nIn gulpfile.jshttps://github.com/HewlettPackard/grommet/pull/20#discussion_r30991480:\n\n@@ -414,3 +414,11 @@ gulp.task('release:sync', function() {\n gulp.task('release', function(done) {\n   runSequence('release:bump', ['dist-bower', 'dist'], 'release:npm', 'release:bower', 'release:clean', 'release:sync', done);\n });\n+\n+gulp.task('tour-standalone', function() {\n-   gulp.src('./examples/tour/src//').pipe(gulp.dest('./tour-standalone/src'));\n-   gulp.src('./examples/tour/standalone/gulpfile.js').pipe(gulp.dest('./tour-standalone'));\n-   gulp.src('./examples/tour/package.json').pipe(gulp.dest('./tour-standalone'));\n-   gulp.src('./examples/server//').pipe(gulp.dest('./tour-standalone/server'));\n-   gulp.src('./src/*/').pipe(gulp.dest('./tour-standalone/node_modules/grommet'));\n\nI believe you don't need to copy the grommet src. It should be sufficient to use 'grommet' as a dependency in the package.json, right?\n\ufffd\nReply to this email directly or view it on GitHubhttps://github.com/HewlettPackard/grommet/pull/20/files#r30991480.\n. ",
    "demogrommet": "I believe I've fixed the issue! Can someone please review? Thanks!\n. Ups, sorry. I will fix that.\n. Ups, sorry. I will fix that.\n. ",
    "marlonpp": "+1\n. removed the space to keep 80  max-len.\n. Sorry, my bad, happened during the merge.\n. ",
    "hpjcu": "Alan,\nThanks for the quick reply.\nI emailed my response so I could attach the full debug log. It seems to almost get to the end but fails at \u201cwebpack\u201d.\nThanks.\nJuan\nFrom: Alan Souza [mailto:notifications@github.com]\nSent: Wednesday, June 03, 2015 11:50 PM\nTo: HewlettPackard/grommet\nCc: Uriarte, Juan (EB IT)\nSubject: Re: [grommet] \"Cannot read property 'trim' of undefined\" while installing the new tour (medium-app) (#28)\nThanks for pointing out the issue with the outdated wiki. I've updated that already.\nAlso, thanks for such detailed logs, great description on the issue. Based on your logs I see you are still using the grommet.usa.hp.com server, could you please run the follow command and try again?\nnpm config set registry http://registry.npmjs.org/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/HewlettPackard/grommet/issues/28#issuecomment-108720556.\n. Hi Alan,\nTried it both ways, no dice (using \u201cset HTTP_PROXY\u201d).\nI have also tried it from home where there is no proxy, and then through the VPN to HP, and it didn\u2019t work either.\nNote in the debug log (attached), this time it failed prior to \u201cwebpack\u201d, when it reached \u201cinuit-clearfix\u201d.  But it IS failing consistently at that file \u2013 I tried it several times.\nBTW, it didn\u2019t like HTTPS_PROXY at all.\nIf the Tour is the same as the Piano site (the medium-app files certainly hint at that), I will just go over there until this works itself out. I am just trying to work my way through the \u201cMenu\u201d component, and there was no mention of \u201cRoutes\u201d using React-route, in the prior example app or documentation, but I figured it out by reading the actual code under the new \u201cmedium app\u201d. (i.e. to use the standard \u201cMenu.js\u201d component, you have to use Routes.)\nHere is the log (upper with proxy set to standard, bottom with proxy set to \u201c\u201d)\u2026\n[cid:image001.png@01D09ED3.4070D990]\n. ",
    "coveralls": "\nCoverage remained the same at 61.9% when pulling 09e208f231cc0860c3ff02f22f5aa8001262a013 on cantidio:patch-1 into 2c8f67972b456847171cdd7962baf4eda5ea4491 on HewlettPackard:master.\n. \nCoverage remained the same at 61.9% when pulling 5b0e13b303b7e521c74bfb72884ef65ceeb58d01 on mattfarina:features/compression into a0c19b0e5c5433ff9aab06e4c36f0dc03191a444 on HewlettPackard:master.\n. \nCoverage remained the same at 61.82% when pulling 4a71f38d21c2e9a28ab015439a6045ea4a10bcb5 on mattfarina:feature/example-server-npm-dev into 7f0c9a0e16902071fcbd52e3855f3c37d3021353 on HewlettPackard:master.\n. \nCoverage decreased (-0.06%) to 32.304% when pulling 961bef16e30c646dffa7e9b066c0e938cc7d43b4 on ibhag:CHART_XAXIS into dfe90088d5736636f8498351b04606b377bc68d6 on grommet:master.\n. \nCoverage remained the same at 32.362% when pulling b2c3e7609a3ba37102bfeedf93e6fde3fc92d5ea on jwijay:menu-drop-styles into dfe90088d5736636f8498351b04606b377bc68d6 on grommet:master.\n. \nCoverage remained the same at 32.362% when pulling 3055ba8ebdb960e4c5116d30d737d6a5af6ba6cf on jwijay:menu-drop-styles into dfe90088d5736636f8498351b04606b377bc68d6 on grommet:master.\n. \nCoverage remained the same at 31.965% when pulling 7566210e219b4a06bfa06197635e342a0c270dbc on jwijay:bug-fixes into 707cf361e4ec4e896e015d5f0dd66ea02a825749 on grommet:master.\n. \nCoverage remained the same at 31.869% when pulling 501903089af2b6604f6a7ffa272b2d659201fb00 on jwijay:bug-fixes into 14a7d3f2e144dbb5c8576ed2bbe33e5ac787e4b9 on grommet:master.\n. \nCoverage decreased (-0.006%) to 31.925% when pulling ce87452c5a496fb87ab4cd17ed39906e464ba1be on primozs:style into bfa9c997978c5a849307600ffb10f35b0f40a6c7 on grommet:master.\n. \nCoverage decreased (-0.006%) to 31.925% when pulling 9f83000e709a6de771b0782b9f009814032f9cb7 on primozs:style into bfa9c997978c5a849307600ffb10f35b0f40a6c7 on grommet:master.\n. \nCoverage decreased (-0.02%) to 31.848% when pulling c811bf6a76e97763701f22a6e3f0ca92dce1da09 on primozs:style into 19f6843ee505aa43ea7b90ea61b986689c735092 on grommet:master.\n. \nCoverage decreased (-0.03%) to 32.552% when pulling d8e113b64220f38be6a848d3eeec7a72bdf5984e on primozs:style into c1bf76c5641fa6555d0c08331f7932c031a2297e on grommet:master.\n. \nCoverage decreased (-0.008%) to 4.454% when pulling d18cb36911610e8b68906ec07d2d5c71612e0a9b on primozs:style into db710eb341895950bd53d345b0a9b69f8b019fd9 on grommet:master.\n. \nCoverage remained the same at 31.869% when pulling 9917383ae5aee8f058f41c652c213735affdc270 on eabay:fix-issue-468 into 4713f1873634411ec2875f4942c3d0ec9ebe3c81 on grommet:master.\n. \nCoverage decreased (-0.1%) to 31.771% when pulling 827d7d15e15085bb65ff2b25d7e2b352f1b6bf35 on jwijay:estories into 0edbd1b99849741b44be23057dc49ecad8cee951 on grommet:master.\n. \nCoverage remained the same at 31.869% when pulling 32a98cdd8a3484f4d2ab9432790cd55d6f48638d on codeswan:adds-anchor-animate-icon-prop into 0edbd1b99849741b44be23057dc49ecad8cee951 on grommet:master.\n. \nCoverage remained the same at 32.533% when pulling f0b2b77c2e9a05da79915a8237f14333652cea55 on codeswan:sidebar-short into f5a1773bae52b2a4a9f7f4f7593012472c3afe6b on grommet:master.\n. \nCoverage increased (+0.05%) to 32.58% when pulling 41dc22bd9fa3ac8007380fcc6a7b271fe6cd58b8 on nickjvm:master into 1a950437cf77d8855eb99d9a34480e960eb9175e on grommet:master.\n. \nCoverage remained the same at 32.58% when pulling f3e3c247da1e3179d51a290074cd37f3f88707bf on jwijay:estories-fixes into c1bf76c5641fa6555d0c08331f7932c031a2297e on grommet:master.\n. \nCoverage remained the same at 4.484% when pulling eaeda5193629b8265570e511a277f1041e5ab8a1 on codeswan:removes-underline-paragraph-links into 9a10c398ca5cb6ffbe4eaff146b9dcb8d0c1002f on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.463% when pulling d46bd18c9c5e8d540dbc06f1bbd9bc7ee01a4322 on codeswan:adds-social-share-component into 82b022cb0723ac631809dd3a7a891524b241aaa2 on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.463% when pulling 9acdc4364b9f4cfab3ae5a82ee595fee6c2fbc2c on codeswan:adds-social-share-component into 82b022cb0723ac631809dd3a7a891524b241aaa2 on grommet:master.\n. \nCoverage decreased (-0.002%) to 4.482% when pulling 7f00b28322505252de8d6fa19fc116631445053b on jwijay:estories-fixes into 82b022cb0723ac631809dd3a7a891524b241aaa2 on grommet:master.\n. \nCoverage decreased (-0.002%) to 4.459% when pulling ed49ca2053c7b5d4410e5468c1812d5bb7e63360 on jwijay:estories-fixes into 4de253786a33869a77ccc2551293dc1876fe7127 on grommet:master.\n. \nChanges Unknown when pulling ee9ab859f9672f713a05f981f3afee8856f0eb3c on jwijay:estories-fixes into * on grommet:master*.\n. \nCoverage decreased (-0.01%) to 4.447% when pulling 93bc18683b68139c9c45678d1fc3c3ad6da262f3 on jwijay:estories-fixes into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.01%) to 4.447% when pulling ed0cdce4115e3b6b78ee62ebe55ae03dd7929b7d on jwijay:estories-fixes into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.01%) to 4.447% when pulling 472496bf86aac3af5875cc3dea4e7844b05f0f58 on jwijay:estories-fixes into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.004%) to 4.457% when pulling 99518dab5cafc53c7bfb6e6ac2e6ceec90cb712d on codeswan:adds-email-social-share into db710eb341895950bd53d345b0a9b69f8b019fd9 on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.44% when pulling 67a99074fedcb67cc2188e65b66d99ad263bf3ef on codeswan:factoid into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.44% when pulling 8dc5d48e10644e1f9dce2081d2210b3e7448c9bc on codeswan:factoid into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.44% when pulling c2f87cd7fa3873a206dabba09b708d557fe7797d on codeswan:factoid into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.02%) to 4.44% when pulling e2bc9275591a5aba55f7115b03950eebf2548f89 on codeswan:factoid into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage increased (+0.07%) to 4.525% when pulling 79a5e8bfc3085bda31d2bf062da4fb16e9bd4525 on codeswan:factoid into d832d542cd1284efe5aa4607d93ca53817dbe0c4 on grommet:master.\n. \nCoverage decreased (-0.002%) to 4.498% when pulling 08693db1a59d840000e45c6bfc22212fa27abcf9 on jwijay:estories-fixes into a3b6037317b9db0d9b3f0109d632dd8977ad1574 on grommet:master.\n. \nCoverage remained the same at 4.498% when pulling 59bdaba5df8d02911d2b243b052a09da0c4c4fe0 on jwijay:estories-fixes into f512cd4329e27e0d8beca6f11469388a0960e6e2 on grommet:master.\n. \nChanges Unknown when pulling 9a2789098d39ada5f741891374c4add08473961c on primozs:indexicons into * on grommet:master*.\n. \nChanges Unknown when pulling 9a2789098d39ada5f741891374c4add08473961c on primozs:indexicons into * on grommet:master*.\n. \nChanges Unknown when pulling a2d64f40305357911334dc45cdb9db0a0cd79aa2 on jwijay:estories-fixes into * on grommet:master*.\n. \nChanges Unknown when pulling 36fc00fd9a4d2dab1134e4b54e8c548aa9a709e6 on jwijay:estories-fixes into * on grommet:master*.\n. \nChanges Unknown when pulling 9d85dce4a5085fede15edcc1574ecbe3cda4e2b1 on jwijay:estories-fixes into * on grommet:master*.\n. \nCoverage remained the same at 5.609% when pulling ed57edb14b91d79669d82b8c035cdb3a28badd08 on jwijay:estories-fixes into d3dab8a9769647c4f0713c081f9282c3eaf8886b on grommet:master.\n. \nCoverage decreased (-0.007%) to 5.288% when pulling bd2e64035442e3a3fa382f9d8b8be7c03870f4cc on codeswan:quote into 7f2bc72ba3e5854d2ef90537efa74078ab710acc on grommet:master.\n. \nCoverage decreased (-0.008%) to 5.737% when pulling 9345b9638af572e068de5d8d8d5857e776c0ee04 on codeswan:quote into 39031b754412975e95d17de22ddfa74a8d912cf6 on grommet:master.\n. \nCoverage decreased (-0.003%) to 7.219% when pulling 82724bc23640074cad802971b7c5dfc48788ede5 on codeswan:fixes-email-socialshare-target-self into 471871ba295c3075c6f20d7021e2263c6606b29b on grommet:master.\n. \nCoverage decreased (-0.003%) to 7.219% when pulling adf04576770a2f691c02040c0b79a1752673c303 on kentsalcedo:estories-white-gap-on-full into 471871ba295c3075c6f20d7021e2263c6606b29b on grommet:master.\n. \nCoverage decreased (-0.003%) to 7.219% when pulling f2a8636913d04f8a91087af8191ce62d108c030b on kentsalcedo:estories-white-gap-on-full into 471871ba295c3075c6f20d7021e2263c6606b29b on grommet:master.\n. \nCoverage remained the same at 7.219% when pulling 5cf73d38b6495fdd5b032abee06c7a2405ce4fbe on kentsalcedo:estories-white-gap-on-full into 76b8e8be660f8469313b634f624bbfb5437fbe5f on grommet:master.\n. \nCoverage remained the same at 7.219% when pulling e97cdc109049690d9fae770fee65a792b67737b4 on kentsalcedo:estories-white-gap-on-full into 76b8e8be660f8469313b634f624bbfb5437fbe5f on grommet:master.\n. \nCoverage remained the same at 7.219% when pulling e97cdc109049690d9fae770fee65a792b67737b4 on kentsalcedo:estories-white-gap-on-full into 76b8e8be660f8469313b634f624bbfb5437fbe5f on grommet:master.\n. \nCoverage remained the same at 7.219% when pulling 648710a1aab27fd356e29a9ab3eb2d3744609eb2 on kentsalcedo:estories-white-gap-on-full into 76b8e8be660f8469313b634f624bbfb5437fbe5f on grommet:master.\n. \nCoverage decreased (-0.009%) to 7.213% when pulling 7d02c51b4ff310d2959710c5524b0d3641077d80 on simula67:multipart-xhr into 471871ba295c3075c6f20d7021e2263c6606b29b on grommet:master.\n. \nCoverage increased (+0.5%) to 7.709% when pulling a48109c7bc83ebdabf73a04d9e8d329981c28148 on simula67:multipart-xhr into 471871ba295c3075c6f20d7021e2263c6606b29b on grommet:master.\n. \nCoverage remained the same at 7.508% when pulling 7232b90deec6886aff21c5ce7732c2b84a553045 on karatechops:GULPFILE_CONSOLE_UPDATE into eb919f5dce45064568c7a588186c0b34d38466fd on grommet:master.\n. \nCoverage remained the same at 7.508% when pulling 6b8b9f54db336aa857954336d5944f261093be9d on codeswan:fixes-article-navigate-last-page into eb919f5dce45064568c7a588186c0b34d38466fd on grommet:master.\n. \nCoverage remained the same at 7.508% when pulling 958e3920c117c189151a0f2cd91d438e84ff0dd3 on codeswan:paragraph-widths into 7fc10da16fcfaa0aba4d6f987d417100a32d2423 on grommet:master.\n. \nCoverage remained the same at 7.508% when pulling 762fafbd85cc0f1f36ce661bec77e9aaa844dbf5 on kentsalcedo:lowered-play-button into 7fc10da16fcfaa0aba4d6f987d417100a32d2423 on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling 2c940cd9a94061fd0d396ffa4896ad178149127b on nickjvm:icon-menu-styles into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling fb1c0dcd0709d3940c1a3f457596c49db4082f27 on codeswan:color-index-tint into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling 626683e583f5a7e3f3fdbfa2e04e8ffd26fc6684 on codeswan:color-index-tint into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage remained the same at 7.491% when pulling 4bef79e21abffa29a50bad4a87980b4b3ab17486 on codeswan:color-index-tint into 632f41f0813dbb7e6f7307acdc43cf809ca3234e on grommet:master.\n. \nCoverage remained the same at 7.491% when pulling 6dd6e6273e20dd30dc284f261a3955b6b8ff56e4 on codeswan:color-index-tint into 632f41f0813dbb7e6f7307acdc43cf809ca3234e on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling 7152aac899fb5b0bb53b10197dce9312670ad2bd on kentsalcedo:firefox-bug-modal-close-jump into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling 775b80165988e0bbb2ccb272d86dc3acef2e059f on DerekAhn:feature/#107-article-accessiblity-tab into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage remained the same at 7.495% when pulling 775b80165988e0bbb2ccb272d86dc3acef2e059f on DerekAhn:feature/#107-article-accessiblity-tab into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage decreased (-0.006%) to 7.489% when pulling 8c84eb1c7838abd3af90a43cb658074d22ff8fbd on codeswan:box-sizes into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage decreased (-0.006%) to 7.489% when pulling 8c84eb1c7838abd3af90a43cb658074d22ff8fbd on codeswan:box-sizes into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage decreased (-0.01%) to 7.484% when pulling 69838b4fbded9fe7b927217d6b074c4d9e8a8a77 on codeswan:box-sizes into 6c347e4deee4818942a7126ac810e602bc49eea8 on grommet:master.\n. \nCoverage decreased (-0.006%) to 7.447% when pulling c10d55df76b15aa5dcef14337c96bda23f0ccc6a on codeswan:box-sizes into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage decreased (-0.006%) to 7.447% when pulling c10d55df76b15aa5dcef14337c96bda23f0ccc6a on codeswan:box-sizes into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage remained the same at 7.491% when pulling 5d04e3a246a77da2aea94ee8d29fa0b2bf0d84c2 on codeswan:full-image-safari-bug into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage decreased (-0.04%) to 7.453% when pulling f3e676fda16f24bb50d2353b654e59e63ac46a93 on TABINDEX_ROW_ARTICLE into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on master.\n. \nCoverage decreased (-0.04%) to 7.453% when pulling 69a4422c53af69f3598992da3aa17f019d698d36 on TABINDEX_ROW_ARTICLE into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on master.\n. \nCoverage decreased (-0.03%) to 7.453% when pulling c52d932e245aad6b749c6ee7e1c7a8b649ceefd4 on TABINDEX_ROW_ARTICLE into ef7fbb3c3209a21a1e4d562d5f427980a8c948df on master.\n. \nCoverage decreased (-0.003%) to 7.488% when pulling 3674cc0217253fe53d1fc6c375ca5a692384893d on jwijay:estories-fixes into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage decreased (-0.005%) to 7.486% when pulling efa7a7b3ead050fd342adb44bc103d1a35185f90 on jwijay:estories-fixes into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage decreased (-0.006%) to 7.484% when pulling 63407536b57db70103f1c062c53474b5e96969fb on jwijay:estories-fixes into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage remained the same at 7.491% when pulling 813351bc12e5885ae4703abbfc72fe88e794430e on codeswan:fixes-tag-width into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage remained the same at 7.491% when pulling 82f88035447047d328889c99f8ef35b26ea884e0 on kentsalcedo:estories-fix-white-gap into 98ab8d2e44bc76bb8b75b116aa5d09b8c13d9f1c on grommet:master.\n. \nCoverage remained the same at 7.481% when pulling 79e5d7b5852cae6119506326472968efdd9d9b9d on codeswan:fixes-tag-border-color-dark-background into ef7fbb3c3209a21a1e4d562d5f427980a8c948df on grommet:master.\n. \nCoverage decreased (-0.03%) to 7.453% when pulling 0d6f15417b7ab42d411e2d83fc5e6a3fdd0be262 on TABINDEX_NEW into ef7fbb3c3209a21a1e4d562d5f427980a8c948df on master.\n. \nCoverage remained the same at 7.481% when pulling a9129e9efbb026133242512605d744a3d177ddc9 on jwijay:estories-fixes into cb9fb7f206c6b2cb56604dde14795b3803af4a6d on grommet:master.\n. \nCoverage remained the same at 7.453% when pulling 3ad87450035eda54a85fe087a31abb6faba1f61c on codeswan:quote-responsive into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage remained the same at 7.453% when pulling f883260ef4905479f584628f278a3932c57627ca on codeswan:quote-responsive into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage remained the same at 7.453% when pulling 77a496d2753c605b66bd5f088bec0be513ce5fb6 on codeswan:center-value into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage remained the same at 7.453% when pulling f96323a468dbcc84b0289f4fac221cd956eed4a4 on DerekAhn:fix/ie-video-poster into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage decreased (-0.002%) to 7.452% when pulling c8747b0cd38776439b20f6f115e43f6087f5f100 on jwijay:estories-fixes into 23fb819c93c6491a2b9a468aa3289078997651f7 on grommet:master.\n. \nCoverage decreased (-0.002%) to 7.452% when pulling e1378f4f240979016044df607fa908beb11dce5e on jwijay:estories-fixes into 7fcd007dac2f6bd5af4c7e8b858de9670254200f on grommet:master.\n. \nCoverage remained the same at 7.453% when pulling 8e2c3b9c707885d3df1b763ea5ba416f7f4a5ce0 on codeswan:center-value-annotation into d95c7f0db5014e91292c302b571288fbb59fc681 on grommet:master.\n. \nCoverage decreased (-0.01%) to 7.433% when pulling 41470ac97e5385b62b9489bd37bf51419c8d24ec on jwijay:estories-fixes into f1c3c58bd24a1d7dbdb58ff0b42ec98a932f7e40 on grommet:master.\n. \nCoverage decreased (-0.02%) to 7.429% when pulling 1f890250f583f50f16154c3190f8652cfed466f4 on jwijay:estories-fixes into f1c3c58bd24a1d7dbdb58ff0b42ec98a932f7e40 on grommet:master.\n. \nCoverage decreased (-0.01%) to 7.429% when pulling 6dc5d9ee163ab803b09efcd9778e3a1b2eeb19e5 on jwijay:estories-fixes into fabcfe1f9f2662d611df3945f36528c1d3be08a1 on grommet:master.\n. \nCoverage remained the same at 7.446% when pulling 9a655b87056ee65548b67aa921b9f9ecb21fe004 on codeswan:box-paragraph-fix into 6455c148d076576b1da0368148b705e73b04922b on grommet:master.\n. \nCoverage remained the same at 7.443% when pulling fe4947fbde5343df8007e0783c4637c9a12ca6e5 on codeswan:xl-paragraph-links into fabcfe1f9f2662d611df3945f36528c1d3be08a1 on grommet:master.\n. \nCoverage remained the same at 7.732% when pulling 49773626e4de7767b262f78b75b3ea27fa935951 on codeswan:box-max-width into f3071833af3200f31c56e4f719fbc3a1408fbc9d on grommet:master.\n. \nCoverage remained the same at 7.722% when pulling 7caaf4f72b8b393cd408f7a25cc263b644ac4356 on kentsalcedo:collapse-video-timeline-mobile into 6bfeadcb3b2a4d3652409e2553e34ed51f9474c6 on grommet:master.\n. \nCoverage remained the same at 7.722% when pulling f78e29cf4d7a4c58d1b4d478bdee210347c81b1f on jwijay:estories-fixes into 6bfeadcb3b2a4d3652409e2553e34ed51f9474c6 on grommet:master.\n. \nCoverage remained the same at 7.722% when pulling 93e650ab5997560195907e28db71678a008f971a on jwijay:estories-fixes into 6bfeadcb3b2a4d3652409e2553e34ed51f9474c6 on grommet:master.\n. \nCoverage remained the same at 7.722% when pulling 93e650ab5997560195907e28db71678a008f971a on jwijay:estories-fixes into 6bfeadcb3b2a4d3652409e2553e34ed51f9474c6 on grommet:master.\n. \nCoverage decreased (-0.01%) to 7.712% when pulling 50fa4c1741e64f0168386ba63618c43cf0e453b5 on codeswan:tile-hover-states into 8b4eef7bb98c3f9dcc1aa19d07e50035b7e9c062 on grommet:master.\n. \nCoverage decreased (-0.007%) to 7.715% when pulling 8adc44fd3aa11333c1daaa6048372e52f6fae467 on codeswan:tile-hover-states into 8b4eef7bb98c3f9dcc1aa19d07e50035b7e9c062 on grommet:master.\n. \nCoverage decreased (-0.007%) to 7.715% when pulling 14b5606e4c165c85b955228f40ec512df68e0fd7 on codeswan:tile-hover-states into 8b4eef7bb98c3f9dcc1aa19d07e50035b7e9c062 on grommet:master.\n. \nCoverage decreased (-0.005%) to 7.717% when pulling d023f37f409d87d97e21348b45d52dfa07a1ee31 on Candy374:patch-3 into 8b4eef7bb98c3f9dcc1aa19d07e50035b7e9c062 on grommet:master.\n. \nCoverage increased (+0.003%) to 7.725% when pulling 6d60aaef64332d57d02041735461b2e897f3bd56 on Candy374:patch-4 into 8b4eef7bb98c3f9dcc1aa19d07e50035b7e9c062 on grommet:master.\n. \nCoverage remained the same at 7.666% when pulling 93df5339deba1e7c5ec2fb09c0030a689dbfef57 on codeswan:tile-transition into 92bb0359ec5edaf2df82ac7523d586df306da065 on grommet:master.\n. \nCoverage decreased (-0.02%) to 7.648% when pulling 1017b9ce5209a4ebc7f14ea244690bbfdb747102 on kentsalcedo:video-enhancements-progressbar into 92bb0359ec5edaf2df82ac7523d586df306da065 on grommet:master.\n. \nCoverage remained the same at 7.666% when pulling 1dbb906677e524cded8d4b0285e2af2d3fb24698 on Candy374:patch-2 into 92bb0359ec5edaf2df82ac7523d586df306da065 on grommet:master.\n. \nCoverage remained the same at 7.666% when pulling b1e099a660cb1f73782848d4fa81235ee4df0693 on nickjvm:close-layer-intl into 92bb0359ec5edaf2df82ac7523d586df306da065 on grommet:master.\n. \nCoverage decreased (-0.02%) to 7.647% when pulling 57bc77948fa1d73e10ac22bfff11be32e08ec10d on jwijay:estories-fixes into 92bb0359ec5edaf2df82ac7523d586df306da065 on grommet:master.\n. \nCoverage remained the same at 8.193% when pulling 5ff3de05aea1c00d9b3b341c2c1169dcd4cd9b28 on kentsalcedo:video-playhead-align-and-bold into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage remained the same at 8.193% when pulling ebada59807d46f98754d4a2baeb78c6e3140e4cc on kentsalcedo:video-playhead-align-and-bold into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage remained the same at 8.193% when pulling d620badebb69ce92ff40a9c1e52ed3786c9f3af4 on kentsalcedo:video-playhead-align-and-bold into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage remained the same at 8.193% when pulling 99143f9662198b90644774024c42e1c17dc1a59d on kentsalcedo:video-playhead-align-and-bold into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.191% when pulling 3e6dbbc2e4931eb91a786a063eb6ee2cb2a2fae0 on DerekAhn:feature/Box-width-control into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.189% when pulling 49eff55b9d4a73af971fbeb7e8a080d95d839f0e on nickjvm:menu-size-boxprops into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.191% when pulling d43c3963ecf85cd303d509af8a3a5bdc70dea7cb on nickjvm:menu-size-boxprops into 706ac4273e5ead04a83582e7e3e58f22e0dde4f8 on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.189% when pulling 8e02917e822667d4b6bbd35ea637720690ab9622 on jwijay:estories-fixes into fe9eee4c844d41c58244d9ba8385031bb0f7cca5 on grommet:master.\n. \nCoverage remained the same at 8.191% when pulling 3202fc72a81676c2658d8e02bb457fc50dbd4c35 on DerekAhn:fix/vertical-bars-appearing-on-Article-arrows into fe9eee4c844d41c58244d9ba8385031bb0f7cca5 on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.177% when pulling 73cdf5edfe9f05bb3bc797b478c0ab62f9442240 on kentsalcedo:article-pagination into 47c2f629517cbfaefe282be58e62dc113bdab787 on grommet:master.\n. \nCoverage decreased (-0.005%) to 8.184% when pulling 0ebd15cb5303b9de9a5aeb6675d06aca465ffc96 on kentsalcedo:article-pagination into 47c2f629517cbfaefe282be58e62dc113bdab787 on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.184% when pulling 3982499bef27094ff79f6957ba0f38b169a6ff20 on kentsalcedo:article-pagination-rebase into 69a474789f3e79da3beb27ed6d053bc470d511fe on grommet:master.\n. \nCoverage remained the same at 8.195% when pulling b2be4fbd16b6170c0c1c0617dfca7bf1c0cecfc4 on jwijay:ie-bugs into 69a474789f3e79da3beb27ed6d053bc470d511fe on grommet:master.\n. \nCoverage remained the same at 8.509% when pulling 76ccaafc57754792e35ffaea085dec16d2bf3026 on jwijay:layer-ie11 into c32b01f2318438672b905ccf33ad17cacdbd6abe on grommet:master.\n. \nCoverage remained the same at 8.237% when pulling b25d457090ad800a3e0aea1421b0a9f488f92678 on jwijay:layer-ie11 into 2592bf4845b011647d0a85696e9bdf597dbfafe5 on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.495% when pulling 3c42681d0225ced0732ec99dc95a6ae2ecbab170 on kentsalcedo:article-pagination-add into c32b01f2318438672b905ccf33ad17cacdbd6abe on grommet:master.\n. \nCoverage decreased (-0.3%) to 8.239% when pulling 3c6e456fcd1cdd3973d14b69f6e57533db09c4ed on kentsalcedo:article-pagination-add into c32b01f2318438672b905ccf33ad17cacdbd6abe on grommet:master.\n. \nCoverage decreased (-0.004%) to 8.505% when pulling da3f3fc9b62543ef3a83a07c4ba7cded1af43af9 on kentsalcedo:heading-uppercase into c32b01f2318438672b905ccf33ad17cacdbd6abe on grommet:master.\n. \nCoverage remained the same at 8.234% when pulling 2be727c8e903979c44e1ba8130e461baca683827 on kentsalcedo:close-icon-inside-layer into fd98944969d64b2593bdc98e1983e118d06b8ba2 on grommet:master.\n. \nCoverage remained the same at 8.248% when pulling 30c7c76f07501ed7b995c1c9dcf6de3006fa58f4 on kentsalcedo:close-icon-inside-layer into efd09b6a26b91c3b88a39860123bcac7f4a7d1da on grommet:master.\n. \nCoverage remained the same at 8.248% when pulling 1ca60a2dd76a873138aadd6c6cf0dd4c9bbee21f on jwijay:eslint into 90775ad098e8e61c44a92d54ae967e346dfb921a on grommet:master.\n. \nCoverage remained the same at 8.248% when pulling 99dd7f375e6782057627b8803a66e74a811a1461 on epilande:change-console-log-to-warn into 90775ad098e8e61c44a92d54ae967e346dfb921a on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.255% when pulling 7a0957cea898feb8a3188f5397a54e881334c530 on jwijay:dom-util into ced744def930034ea1dafab594b90aa46ef9c189 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.253% when pulling b378f390813614c7bd371197fdeb2d73f3ced85f on jwijay:dom-util into ced744def930034ea1dafab594b90aa46ef9c189 on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.239% when pulling f1bebd2d56031251e93c8242e9f11195ef3c98be on kentsalcedo:pagination-update into 3c08823b8d02d2b62caab9a48f6a32ce710cddce on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.234% when pulling 79024a76925bff2a2f6dd51d54d16944d7e54f4d on kentsalcedo:pagination-update into 3c08823b8d02d2b62caab9a48f6a32ce710cddce on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.234% when pulling b5e0626c0cb5bbc60462ce82cc851e2521f2c986 on kentsalcedo:pagination-update into 1ed306fecb24d0f51e1a6254d35d4302a7483578 on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.229% when pulling 43265d6cba2b6121a068d3b7e1f9f5d704a8816c on kentsalcedo:pagination-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.229% when pulling 43265d6cba2b6121a068d3b7e1f9f5d704a8816c on kentsalcedo:pagination-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.229% when pulling 43265d6cba2b6121a068d3b7e1f9f5d704a8816c on kentsalcedo:pagination-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.02%) to 8.229% when pulling 43265d6cba2b6121a068d3b7e1f9f5d704a8816c on kentsalcedo:pagination-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage remained the same at 8.253% when pulling 15ad0627362bf1e7f85a37fcdf3580dc740a9ca6 on maysst:TemplateFix into 1ed306fecb24d0f51e1a6254d35d4302a7483578 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.25% when pulling c05cf377a23460d18120a9ae7e865ea9c0e485ff on kentsalcedo:chart-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.25% when pulling bd6775a6b8ea3eedaed17bfef4a08cdc2f5f6f50 on kentsalcedo:chart-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.25% when pulling f91efc1c03b2b6438a473355627419bb2721bb06 on kentsalcedo:chart-update into 58da511b5b0e21ae8ecc26548f4a5af4a79759e1 on grommet:master.\n. \nCoverage decreased (-0.007%) to 8.243% when pulling 27c731112d0a1de3f6bdf97ad7ef1be843c46905 on kentsalcedo:arrow-mobile-bottom-bug into 030fcf80e5d9d36b3b1b89c368e8e0d2699bf495 on grommet:master.\n. \nCoverage remained the same at 8.243% when pulling 3e50b652064fb05e2745543922a09e0ff667c26f on jwijay:article-bug into 6beafd1f68d7d511e4e678f559124a7a1fa1227d on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.229% when pulling 7148bb1ac6d4d5009be9b95cd38f049f0892cbab on DerekAhn:fix/firefox-accessibility-tabbing into b132fb1b69824935de5114d20fd3105805b274d3 on grommet:master.\n. \nCoverage decreased (-0.01%) to 8.229% when pulling 7e5f70cc5ac3acf7fb0e4424c457893df5020db3 on DerekAhn:fix/firefox-accessibility-tabbing into b132fb1b69824935de5114d20fd3105805b274d3 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.231% when pulling c6fc432985e3806686cca66e62c813955ee43297 on DerekAhn:fix/edge-article-slide-flashing into 2584d74fec1c74d6a26ea42f60a901dbf074dfab on grommet:master.\n. \nCoverage decreased (-0.007%) to 8.185% when pulling 1c646168012609df2d238432c2cb134b56e5bf9c on DerekAhn:fix/edge-article-slide-flashing into a0fbb5438eb98891955d23b90b2b5f45bbe59fb1 on grommet:master.\n. \nCoverage decreased (-0.005%) to 8.187% when pulling 250a7a6926162a73a194d3f99fa933278425a2e4 on DerekAhn:fix/edge-article-slide-flashing into a0fbb5438eb98891955d23b90b2b5f45bbe59fb1 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.187% when pulling 58f0b6bb3bb641da9e61ed86c043c9fedb18210e on jwijay:article-select-prop into 1a367577ad661e656c50803d3a95413cff16b1f3 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.187% when pulling 187e6746c03d547eeeb4821827e906d0ed948cb2 on jwijay:article-select-prop into 1a367577ad661e656c50803d3a95413cff16b1f3 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.189% when pulling 516ed03cb72b525d7d55a6e65a5ffa0405b0f014 on jwijay:article-select-prop into a0fbb5438eb98891955d23b90b2b5f45bbe59fb1 on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.19% when pulling 173dc6617f20988170e9624a0feda3e95f83abb8 on agraebe:master into a0fbb5438eb98891955d23b90b2b5f45bbe59fb1 on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.179% when pulling 3eea905401b7dcb88a699a076acf4964b6d1a8d0 on agraebe:master into cb109a89c541d4f39926949ee253a4e4faddda79 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.189% when pulling 90fee0b60972b1eb4e47098d8890b91c7eab3ac2 on paridab:DOUBLE_ENTER_FORM_SUBMIT_ISSUE into a0fbb5438eb98891955d23b90b2b5f45bbe59fb1 on grommet:master.\n. \nCoverage increased (+0.005%) to 8.192% when pulling 249fb4d91622ffdf513fc930b3b845accf08ccc5 on jwijay:article-browser-check into b17362735c860626cd80e5be6de8acdb8a3097ee on grommet:master.\n. \nCoverage increased (+0.005%) to 8.192% when pulling 0369dc73ad5277396f97b595a8f0e5ce3350984b on jwijay:article-browser-check into b17362735c860626cd80e5be6de8acdb8a3097ee on grommet:master.\n. \nCoverage remained the same at 8.192% when pulling 6118e6f34c3684865ef93632d823dd024d04125f on michaelgilley:fix/ie-paragraph-flex-shrink into 2c31344f819081509301b403f0cb034b12ee088b on grommet:master.\n. \nCoverage remained the same at 8.192% when pulling 3e02386467e101d283b005b6288d3cf58429b346 on michaelgilley:fix/ie11-valignment-full-box into f633bed51236d928d8273b9fba6bccccd4745a6c on grommet:master.\n. \nCoverage remained the same at 8.218% when pulling b4ab76f941bb52ee3f196b0198cbd9f4cf4707e8 on michaelgilley:fix/ie11-align-header-center into 529a091ad32aa1c1072552e7a5c1377dad611757 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.181% when pulling b4ab76f941bb52ee3f196b0198cbd9f4cf4707e8 on michaelgilley:fix/ie11-align-header-center into 529a091ad32aa1c1072552e7a5c1377dad611757 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.181% when pulling 6c2680899a596519351961e65321b30a935ee465 on michaelgilley:fix/ie11-align-header-center into 529a091ad32aa1c1072552e7a5c1377dad611757 on grommet:master.\n. \nCoverage remained the same at 8.218% when pulling b4d6d303846e58e19af027afbf38f5b6495f99ae on jwijay:arrow-and-ie11-box into aedbab823be3da5daebcb0fe91b4674f58c64823 on grommet:master.\n. \nCoverage remained the same at 8.204% when pulling 2b538c002a1ec079798a9be1f47a69078047ae38 on DerekAhn:fix/title-ellipsis into f2f52a01d7f4dffa64b6d1bcfc4ca19115e6aa20 on grommet:master.\n. \nCoverage remained the same at 8.189% when pulling e7e879963dc3345b1e3dbeb14ed53e87c1680114 on DerekAhn:fix/613-ie11-vertical-align into b44296545c4e3e98a739367fad4a97ce79fc62d1 on grommet:master.\n. \nCoverage remained the same at 8.181% when pulling 76ee12ee963d63c5bc8a1d8e2c2aee5325ca6f89 on michaelgilley:fix/ensure-parseInt-defaults into 1cb2c24542a0df539edea5b10a5a599b99e5b9a9 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.026% when pulling 042c487060a2ab560a5748a3bd3f833993b7b678 on masogit:searchinput-onAddDrop-suggestions into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.026% when pulling 042c487060a2ab560a5748a3bd3f833993b7b678 on masogit:searchinput-onAddDrop-suggestions into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.019% when pulling 96362b2292df34500ad6abbf100a948b06da7f8e on linde12:master into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.018% when pulling 4d4f29deeceebc50e4f32008c6ef16b0fb0e80a9 on linde12:master into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.018% when pulling c2ca4dd5ea02cf356322cd5de490ca0f4429b58c on linde12:master into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.018% when pulling ddabd66dcda27b3670222bff8bfe07dfb80af33d on linde12:master into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.027% when pulling 9f9d621b023ad1b66200588e660d6e6c91dcd27f on primozs:valueprops into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.019% when pulling 9e10f501fa4e951f9f482decdf97f36c10839581 on epilande:layer-closer-outside into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage decreased (-0.2%) to 8.027% when pulling 86e07612514f15afb4063b9d9113a9c1707d7330 on codeswan:fix-pr-617-missing-styles-header--large into 78be3300066a4c7639500334fcdfd1f976e49167 on grommet:master.\n. \nCoverage remained the same at 8.019% when pulling 851b3367e190ae43606fe8e7d2b097b6b84a0c4a on jwijay:fonts into 472a0edd63019b43b22c35691578cff3f40952dd on grommet:master.\n. \nCoverage increased (+0.02%) to 8.436% when pulling 312de24aa1a24993a36178896f0f5ccb3600d553 on bnoguchi:date-time-value-fix into 5649df62fa254c7b06743f54547ec85dbd9444b6 on grommet:master.\n. \nCoverage increased (+0.02%) to 8.436% when pulling 54f35777fd4d42c13bdeb00527012079ca8b6c77 on bnoguchi:date-time-value-fix into 5649df62fa254c7b06743f54547ec85dbd9444b6 on grommet:master.\n. \nCoverage remained the same at 8.436% when pulling 34084f6c8ffdb9b39463763952b04f78c3c920c7 on davrodpin:parse-opstrings into 30d1333154805a30ef9418bdcfcbf996f4ab08cc on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling f8cc0eab76abe2d23e76edc572d713bd46ecd203 on davrodpin:fix-copy-png-images into f739775c1d1b2d70a4dde89cc5cc2d94a1fa09a0 on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling ab3af65bcb3c0754eb240d0b77495628143972bf on davrodpin:fix-copy-png-images into f739775c1d1b2d70a4dde89cc5cc2d94a1fa09a0 on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling eeaa1e72324d6ca13088df0e76d4fc7ba06828ad on davrodpin:no-global-vars-usage into 7a8823a9802163a17270c874349854f988fa16bd on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling b76778922a7042c3d2a5c82186b068ed6dc7b769 on davrodpin:no-global-vars-usage into ac9b7981d98c8ba08ac7ac2bf8e45484092ec6db on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling e94aa85644d2576d434b45d785630293b7534051 on davrodpin:no-global-vars-usage into ac9b7981d98c8ba08ac7ac2bf8e45484092ec6db on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling 5f82e08ac076eb3d6410a6f134ee46a47901a1fa on davrodpin:no-global-vars-usage into ac9b7981d98c8ba08ac7ac2bf8e45484092ec6db on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling 5f82e08ac076eb3d6410a6f134ee46a47901a1fa on davrodpin:no-global-vars-usage into ac9b7981d98c8ba08ac7ac2bf8e45484092ec6db on grommet:master.\n. \nCoverage remained the same at 8.452% when pulling fbdaac4a9a7e8c27e91491f7146bdf15adddb74b on davrodpin:no-global-vars-usage into fed76b11bcd53fbb9ea8defae4a36052ca0653b3 on grommet:master.\n. \nChanges Unknown when pulling ca220ff857cbb248e3ec8ad3c3b49d9630a7278e on davrodpin:no-global-vars-usage into * on grommet:master*.\n. \nCoverage remained the same at 8.908% when pulling 5b4cc9b82dda8565a9544445a1b839a644c5825a on codeswan:scss-lint-to-sass-lint into 517e302a52399406626a13dfc325bd89008c28be on grommet:master.\n. \nCoverage remained the same at 8.908% when pulling b3ecb4369583d48c2a17de9db0f7bf0c1b7ade90 on codeswan:split-show-on-responsive into 517e302a52399406626a13dfc325bd89008c28be on grommet:master.\n. \nCoverage decreased (-0.002%) to 8.896% when pulling a31cc69fb803e029ba65d661fc57cb2f5fa2df27 on jwijay:tile-hover-colors into 0ad15578e80aeb76ae9b493bb1ce3b2c8b09387e on grommet:master.\n. \nCoverage increased (+0.4%) to 9.266% when pulling e482de5e936fe7ceed644d491485b68411552e36 on alansouzati:ADD_TABS_TEST into 0800987bbaec5b79132be1e98fc47c4005c40845 on grommet:master.\n. \nCoverage remained the same at 9.266% when pulling 1c8d85f05890fe2e7962ad21c6013dd227a09a30 on epilande:ie11-notification-wrap into 6de94a13543f8aa022d2ae2f4238d3edaff1090b on grommet:master.\n. \nCoverage decreased (-0.002%) to 9.155% when pulling e3642dcc03f49e32d4edbaeab063212fc5ad0c02 on jwijay:article-firefox-flash into 94392b70c4fdc74f6070452a46b18aa0ce10bbf6 on grommet:master.\n. \nCoverage decreased (-0.002%) to 9.155% when pulling a130b730acbc845d699b2a8b56d7d91e7f0e4fca on primozs:cbox into 94392b70c4fdc74f6070452a46b18aa0ce10bbf6 on grommet:master.\n. \nCoverage decreased (-0.007%) to 9.146% when pulling b955ce2b381ab683efd3ddab539e150f1a2da791 on jwijay:unknown-props into 06530537218f193f033e45729cec4b943091f443 on grommet:master.\n. \nCoverage decreased (-0.07%) to 9.077% when pulling 82e57562ea571be8611aecd13f1aa67de5134d51 on epilande:animate into 7f994dce9c5ed27c71036d8111fea29611077412 on grommet:master.\n. \nCoverage decreased (-0.7%) to 8.449% when pulling 6477244f96e0e75db844ab7a11aabcaf42e5f50f on epilande:animate into 7f994dce9c5ed27c71036d8111fea29611077412 on grommet:master.\n. \nCoverage decreased (-1.03%) to 8.121% when pulling 15024d9b5232f1a150322f8a292adfedafbde57e on epilande:animate into 7f994dce9c5ed27c71036d8111fea29611077412 on grommet:master.\n. \nCoverage remained the same at 9.196% when pulling 7569e62912528bd11ebfdddcc577904781b94339 on epilande:fix-infinite-scroll into 5fb934de6fd76b81c4ad7b29beecd77ac9d7021a on grommet:master.\n. \nCoverage decreased (-0.01%) to 9.185% when pulling 660033f0b96430c0a394e6c9bba9141b3e1c1e66 on codeswan:video-autoplay into 8c8304749c7dd1e6d9a234d83bd905f480150a42 on grommet:master.\n. \nCoverage decreased (-0.01%) to 9.196% when pulling a4b6312f46667734e7793d79678f536159e555db on codeswan:video-autoplay into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage remained the same at 9.207% when pulling b8e42aa2a8042ac726fdd335445b0e38e9ab1aa9 on nickjvm:fix/number-input-flex into 3fa5e39e4121a99e73da6fd53d69b668cbb1d624 on grommet:master.\n. \nCoverage decreased (-0.002%) to 9.205% when pulling 942644166ebffbdad6f98e53c093d613f020937c on jwijay:carousel-controls-safari into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.01%) to 9.196% when pulling 77aaf2483acf5c116b73a72b67d0b96aed854cdd on jwijay:carousel-controls-safari into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.1%) to 9.1% when pulling db0e28e796965c266724b4eae04390c3d5cb4bc4 on epilande:accordion into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.09%) to 9.121% when pulling 69d014139365df03314bfcc0689ef5a39804347c on epilande:accordion into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.09%) to 9.121% when pulling f560784b3b9470779bc6dda14d91ec171daac30e on epilande:accordion into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.8%) to 8.452% when pulling b0be86615d7e6b4a84edb7f7d051682074244a4b on epilande:accordion into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.8%) to 8.452% when pulling 5473de3184e79435b1db28371e05b4728fbb557b on epilande:accordion into d37947f148f739455debc25c4a9bb379fe7ff9b2 on grommet:master.\n. \nCoverage decreased (-0.002%) to 9.194% when pulling 603b2bcc67320f9a51aa66ee28c9a38fd32c4d5a on michaelgilley:fix/customize-full-on-notification into a9f15a614df311a70af2ba83d4ecfe3df21e6e27 on grommet:master.\n. \nCoverage decreased (-0.06%) to 9.132% when pulling cf4af5cbe18b7efad6178af98816684bf0795c39 on codeswan:hero into a9f15a614df311a70af2ba83d4ecfe3df21e6e27 on grommet:master.\n. \nCoverage decreased (-0.06%) to 9.132% when pulling c3f66e94467cbc52b6a61dcf7f84aa6350d761dd on codeswan:hero into a9f15a614df311a70af2ba83d4ecfe3df21e6e27 on grommet:master.\n. \nCoverage decreased (-0.06%) to 8.387% when pulling 05efa90d80e7614ef11c9e6d23fbb12c362d6e61 on codeswan:hero into f27cab1c0296f9031654b9a2d6cf07a72167b6a7 on grommet:master.\n. \nCoverage remained the same at 8.514% when pulling 3749efc13bccdf80f6448f42ca224b1f67d304ac on davrodpin:new-app-task into b7b6742018110bbbdd88d0185de2b9768fb29d8b on grommet:master.\n. \nChanges Unknown when pulling 5f96520c98d41fcdd4725e86eabf44b9012a6565 on davrodpin:new-app-task into * on grommet:master*.\n. \nCoverage remained the same at 8.452% when pulling 8ca777d1d8082a6bfeda7332038c957286cf17ff on davrodpin:create-component-task into 71973edd009d31654a3fce3c6916f33e7f9894f0 on grommet:master.\n. \nChanges Unknown when pulling c3ce1410075333e1c51baf670d4bb83a7ae2f621 on davrodpin:create-component-task into * on grommet:master*.\n. \nCoverage remained the same at 8.452% when pulling 0d548960288132495775bb38c9d3d26fe58fbf7b on epilande:fix-carousel-in-layer into 71973edd009d31654a3fce3c6916f33e7f9894f0 on grommet:master.\n. \nCoverage remained the same at 8.428% when pulling c8bf5221d80aeb840fa33e78a33adc1cd86a14a9 on epilande:715-formfield-input-ie11 into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.388% when pulling b488a5007c593d6be1b69b5aa82492b8d2762ba4 on jwijay:tiles-masonry into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage decreased (-0.4%) to 8.077% when pulling 8deb21c2560b2c5cd5397655cc7b014148ae9562 on jwijay:tiles-masonry into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage decreased (-0.001%) to 8.426% when pulling c90d67523d38be1de7e16704378f4ddebc1d09ae on epilande:pass-props-calendar into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage increased (+0.004%) to 8.432% when pulling ba786bf61cdea20d19295d4d57721e445573fd1a on epilande:pass-props-calendar into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage increased (+0.004%) to 8.432% when pulling ef2252bbe1e81446a430e0f8350f20e6bfe5aa96 on epilande:pass-props-calendar into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage decreased (-0.1%) to 8.312% when pulling d3686ebd7f2cb1de431c2db4f44e9d2bb1359883 on epilande:pass-props-calendar into 119682b647674b5d1298a068db32cd6a67c12be7 on grommet:master.\n. \nCoverage remained the same at 8.427% when pulling 0eb5771c89e9d5562fd3318714c46a8dba4e71b9 on codeswan:play-pause-icons-filled into aaa5b83f32ee8bea1dd15cd5a0bc7c06a099afd9 on grommet:master.\n. \nCoverage remained the same at 8.427% when pulling e1a889e70fc26f8ae01c62290cc8891b5e0de7e0 on epilande:fix-accordion into aaa5b83f32ee8bea1dd15cd5a0bc7c06a099afd9 on grommet:master.\n. \nCoverage decreased (-0.001%) to 8.426% when pulling 34e0b1705eab9f902084dc3d9b5c104ea86b98a2 on epilande:fix-accordion into aaa5b83f32ee8bea1dd15cd5a0bc7c06a099afd9 on grommet:master.\n. \nCoverage remained the same at 8.426% when pulling 47b30b2292c4a998506eb1f6ec4364e88beec3b2 on arjunbm468:Anchor_Title_Support into f6cbd96bbd16997e561b8add92d869d8e493b9ef on grommet:master.\n. \nCoverage decreased (-0.06%) to 8.247% when pulling 24f0652626dd0275179a8f0b555b8c58bb905fe8 on jwijay:chart-units into 90262b56d0a8e8b159d09bc3b01f8abd2a8ebb7d on grommet:master.\n. \nCoverage remained the same at 8.181% when pulling 1a0de326ffd60a6e7fbcaafd1db3e9f9eecb06d2 on digital-flowers:patch-1 into 35c977abb4529d176e72b527a7369cb308f17e74 on grommet:master.\n. \nCoverage remained the same at 8.183% when pulling e25b15ff49e7c2ef0e43e6b1f6a3e0601a843823 on nickjvm:fix/formfield-searchinput into 84fb2c5210e3950522eeb3ddd081ab6d2592939e on grommet:master.\n. \nCoverage remained the same at 8.183% when pulling 5a2de1d7c1b6c7fdf358d72dc0b0bea2fcb579e0 on nickjvm:fix/formfield-searchinput into 84fb2c5210e3950522eeb3ddd081ab6d2592939e on grommet:master.\n. \nCoverage remained the same at 8.122% when pulling d039995c137208ac41ee607ba6cfd56acd97cab2 on nickjvm:fix/formfield-searchinput into 8cb08d76955bcad1b7a67f5ca12050c5003e952e on grommet:master.\n. \nCoverage increased (+0.1%) to 8.238% when pulling d9b5d321fd23d43ff314cf678357fffbdd51cfa6 on arjunbm468:Test_Coverage into 8cb08d76955bcad1b7a67f5ca12050c5003e952e on grommet:master.\n. \nCoverage increased (+0.8%) to 8.941% when pulling 70e48985cce659f466714eaaa0aebf2e85f157c2 on marlonpp:mp.Accordion into e250f5c2610ffadb1367aabdcc43ce65fab54a0d on grommet:master.\n. \nCoverage increased (+0.8%) to 8.941% when pulling 9395357a1847cdae9f796eceaaea7124110e7500 on marlonpp:mp.Accordion into e250f5c2610ffadb1367aabdcc43ce65fab54a0d on grommet:master.\n. \nCoverage increased (+0.8%) to 8.967% when pulling 7651e13b7072febee87a5858dd5f7d720a424dc6 on marlonpp:mp.Accordion into e250f5c2610ffadb1367aabdcc43ce65fab54a0d on grommet:master.\n. \nCoverage increased (+0.8%) to 8.967% when pulling e61ddf7922a6cdfc0a9b5404ec349bc17cd567cd on marlonpp:mp.Accordion into 1bd648279e3b79b72a73d723013ea710136b4bf9 on grommet:master.\n. \nCoverage remained the same at 8.189% when pulling 0cdde9067a18fd06ecc8112aeddd534287d0cc55 on ellerbrock:deadlink-fix into ae8315310a30efa04ea52be5503b616e1fdf24d1 on grommet:master.\n. \nCoverage decreased (-0.03%) to 8.18% when pulling 1a497c7b4c71a41803dff059dade5ebc0dd21659 on marlonpp:mp.Tabs into 1bd648279e3b79b72a73d723013ea710136b4bf9 on grommet:master.\n. \nCoverage decreased (-0.004%) to 8.209% when pulling 6c10270bd360836e12258b11962503a096a66e01 on jwijay:box-columns into 1bd648279e3b79b72a73d723013ea710136b4bf9 on grommet:master.\n. \nCoverage remained the same at 8.952% when pulling c37bdde6a5325779fb54bb703d44ed37b8a68445 on jwijay:form-fields into 41821cba2cbc4c7e765e02b9dc0aca8999689dd5 on grommet:master.\n. \nCoverage remained the same at 8.952% when pulling 3956136cd7d97b17f99a6a344322403e85d28e96 on epilande:zooming-out-safari into 41821cba2cbc4c7e765e02b9dc0aca8999689dd5 on grommet:master.\n. \nCoverage remained the same at 8.901% when pulling ce03e016115960a9af262beed432d165f4b62b17 on epilande:fix-menu-mobile into 93fd8dcbba5863af23e091ee155742a6c0a7c811 on grommet:master.\n. \nCoverage remained the same at 8.901% when pulling 74fb8882a8503c335e2ef5b38b975fe42ebb8972 on jwijay:form-field-left-align into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage increased (+2.2%) to 11.075% when pulling a9dd9abbb33b6afe1ca381052d2fa61f5c878b6a on jwijay:form-field-left-align into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.898% when pulling b3a2b94ce0104f0907733c86f2f37d8e42ad6cec on epilande:menu-change-inline-state into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.864% when pulling 4d80c94dbb7652ff469768c343d0f33bd81718f8 on codeswan:video-custom-controls into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.864% when pulling 5bd2ba83b3340c72c9047c2a11633168e4f15714 on codeswan:video-custom-controls into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.834% when pulling a5a998ccbd5bf5687e79bffae80eccad6141aa81 on codeswan:video-custom-controls into 861be87c498e7ac67b0d24b110e3f298e6b0175a on grommet:master.\n. \nCoverage decreased (-0.04%) to 8.834% when pulling 6d9c5d62bb3c122e7b447665ffda6c66ad2c0616 on codeswan:video-custom-controls into 2e480f61fab5dced92be4148318ac4050bc0a62a on grommet:master.\n. \nCoverage decreased (-0.06%) to 11.025% when pulling 763796e547d443d092021bdae27e0d39b94f4b01 on codeswan:video-custom-controls into f110aa244ce16f806ac2d01732aa6dcecaf8fca7 on grommet:master.\n. \nCoverage decreased (-0.07%) to 11.013% when pulling 77d7c4b6d53c1894f59d8c796c3bf37e382601dc on codeswan:video-custom-controls into f110aa244ce16f806ac2d01732aa6dcecaf8fca7 on grommet:master.\n. \nCoverage remained the same at 8.901% when pulling b94eb63981c527baa84762e15ca3417620d6f235 on jwijay:range-input into 2832bf036cae28ce3e1215afbe59fc312b905bb1 on grommet:master.\n. \nCoverage decreased (-0.03%) to 8.873% when pulling 7e04751d24f8a2bc12b405a9bff78ae12bcc703a on karatechops:article-progress into a991e91a33c4eab34d88585250a5bbb55dad167e on grommet:master.\n. \nCoverage remained the same at 8.87% when pulling 3179e55437aa868360ff33683aff782d0fe543f4 on nickjvm:master into 0133a6c0846baec4581320def59acc88135c8225 on grommet:master.\n. \nCoverage increased (+2.2%) to 11.104% when pulling 0521167c4f2d850ea1115d5e9c2a69351566e25e on arjunbm468:Icon_Test_Coverage into 2e480f61fab5dced92be4148318ac4050bc0a62a on grommet:master.\n. \nCoverage decreased (-0.003%) to 8.867% when pulling 64b06b406852678c10a69f598b996a46d9e2453b on primozs:search into 2e480f61fab5dced92be4148318ac4050bc0a62a on grommet:master.\n. \nCoverage decreased (-0.007%) to 11.093% when pulling f1a5915bd6293b4084e67204fa61a7d5bf75da8e on codeswan:box-texture into 887a89e73729701950415d20a1b815dcc7a51957 on grommet:master.\n. \nCoverage decreased (-0.004%) to 11.08% when pulling 0293f4a7e50d76fd46832975bbe574f417baf971 on codeswan:adds-close-button-notification into 67eb0ec677bd9db2f62a580a7be369da7d634cc8 on grommet:master.\n. \nCoverage decreased (-0.004%) to 11.079% when pulling 3249ed81ecef741f5fbec643fcbafbf2070f8284 on codeswan:adds-close-button-notification into c61dab6c8912bdf73a8fc80db0e893b1ca89a76c on grommet:master.\n. \nCoverage increased (+0.004%) to 11.086% when pulling 854bb298b11c722782e32255cec200e17cd203a5 on codeswan:adds-close-button-notification into c61dab6c8912bdf73a8fc80db0e893b1ca89a76c on grommet:master.\n. \nCoverage decreased (-0.007%) to 11.075% when pulling a714384d53b369ff532ab369efb881cdacc8c26d on codeswan:adds-close-button-notification into c61dab6c8912bdf73a8fc80db0e893b1ca89a76c on grommet:master.\n. \nCoverage remained the same at 11.075% when pulling b1562e265647bf5e3019ab7cac03c997df867d67 on karatechops:article-progress into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage decreased (-0.01%) to 11.064% when pulling a897928cbdd99887bf4536377041f08e4936ddc7 on jwijay:tiles-masonry-fill into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage remained the same at 11.075% when pulling f2b291086412d8cc427d61789ef590e16ae88b4d on jwijay:watch-icon into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage remained the same at 11.075% when pulling f55984d3220e1ffdb75a5146add5946eaac25c5f on jwijay:watch-icon into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage decreased (-0.1%) to 10.944% when pulling f85b8c1f77e1160ac33f80e9702ea06b6be26347 on jwijay:content-card into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage decreased (-0.1%) to 10.944% when pulling 5a43751abc2446b3156cd0042caf2c8608155e39 on jwijay:content-card into f44db0b383a7c64e20dc2b8ff586861da98abae3 on grommet:master.\n. \nCoverage decreased (-0.1%) to 10.96% when pulling b4c6a2d29027d73becde815df3580923e6365c98 on jwijay:content-card into cefdbd46c809ae90c5b983bb5482f0ad33ff9273 on grommet:master.\n. \nCoverage decreased (-0.1%) to 10.97% when pulling 1ac14aa895851563b51bffdc07c7f3077ce7f806 on jwijay:content-card into cefdbd46c809ae90c5b983bb5482f0ad33ff9273 on grommet:master.\n. \nCoverage decreased (-0.09%) to 10.971% when pulling 85dc20f78865b3875d7392662c85b7cf92479a87 on jwijay:content-card into cefdbd46c809ae90c5b983bb5482f0ad33ff9273 on grommet:master.\n. \nCoverage decreased (-0.09%) to 10.973% when pulling 5e5b09e0a648c77afc2bff62135402174c1628d3 on jwijay:content-card into cefdbd46c809ae90c5b983bb5482f0ad33ff9273 on grommet:master.\n. \nCoverage decreased (-0.09%) to 10.973% when pulling 0d95d88260e3f154f92b6e6fbdaa3dbd81b75db0 on jwijay:content-card into cefdbd46c809ae90c5b983bb5482f0ad33ff9273 on grommet:master.\n. \nCoverage decreased (-0.01%) to 11.055% when pulling a3b74fc8bc08fac24a6aef65dc45907030f008c7 on epilande:accordion-enhancements into 10638dbdcfc1a2808f7d4c095345e3bc57e93f95 on grommet:master.\n. \nCoverage increased (+0.1%) to 11.167% when pulling 481cb4d616a1547d0d61b1b4e9abad0e6caa26bc on karatechops:hotspot into bd961197b12fc19ecafe81a8519b41d41a5242d3 on grommet:master.\n. \nCoverage increased (+0.09%) to 13.183% when pulling ed732aba6710d1556fbfea97ee848607c55e5ed1 on karatechops:hotspot into a8ad19ab2fa8c1e1acf0aacbc1c8ab40baa6e6b4 on grommet:master.\n. \nCoverage increased (+0.1%) to 13.196% when pulling 4d6f8aa32c33fe533d4599eefef80412391d4b08 on karatechops:hotspot into a8ad19ab2fa8c1e1acf0aacbc1c8ab40baa6e6b4 on grommet:master.\n. \nCoverage increased (+0.7%) to 11.633% when pulling 0795af53734f43c5344296aa31c1b7478cd45bfa on nickjvm:master into 36ed276f1df69cdc1ee0c8a7714bdaf382c9fa0c on grommet:master.\n. \nCoverage increased (+0.7%) to 11.633% when pulling e64d06da6360653135e046b87c76bd937c35265f on nickjvm:master into 36ed276f1df69cdc1ee0c8a7714bdaf382c9fa0c on grommet:master.\n. \nCoverage increased (+2.2%) to 13.109% when pulling a836eb6101c841d4a7e9813c8f8262aaae6a0452 on arjunbm468:Test_Coverage into 36ed276f1df69cdc1ee0c8a7714bdaf382c9fa0c on grommet:master.\n. \nCoverage decreased (-0.01%) to 10.871% when pulling 427b53c78897fb29b20619e14d10d62bb26143b1 on jwijay:card into 36ed276f1df69cdc1ee0c8a7714bdaf382c9fa0c on grommet:master.\n. \nCoverage decreased (-0.02%) to 13.094% when pulling 0bfe9108196b8d29ec2e3e854bb24dc8a115c1da on marlonpp:mp.EnzymeTestingTool into e62648f313631f23b878b4f146d6e9517968774f on grommet:master.\n. \nCoverage increased (+0.1%) to 13.196% when pulling 4d6f8aa32c33fe533d4599eefef80412391d4b08 on karatechops:pulse into a8ad19ab2fa8c1e1acf0aacbc1c8ab40baa6e6b4 on grommet:master.\n. \nCoverage increased (+0.1%) to 13.21% when pulling d450c64edae8f37fbb1f0616ab5b369fa41ac2d0 on karatechops:pulse into a8ad19ab2fa8c1e1acf0aacbc1c8ab40baa6e6b4 on grommet:master.\n. \nCoverage remained the same at 13.21% when pulling 39f1a7be112c1054b93ab0bf53949a9279341389 on karatechops:axis-restyling into d077e44fa54ec635554f77a4ef14f1951f6f9553 on grommet:master.\n. \nCoverage remained the same at 38.371% when pulling 8586c129604a0be40fc9951cecb7150984d8b4d5 on karatechops:axis-restyling into bffc8795f8c41ed6b4bc384923cdf6554e6e9960 on grommet:master.\n. \nCoverage remained the same at 38.371% when pulling 782331b8208c889dc4e00b91f01c1ba1c8521d29 on karatechops:axis-restyling into bffc8795f8c41ed6b4bc384923cdf6554e6e9960 on grommet:master.\n. \nCoverage remained the same at 38.371% when pulling 782331b8208c889dc4e00b91f01c1ba1c8521d29 on karatechops:axis-restyling into bffc8795f8c41ed6b4bc384923cdf6554e6e9960 on grommet:master.\n. \nCoverage remained the same at 34.159% when pulling 7f947c13d00918dfccab0483f3c1b4a5bd46670f on brockinit:range-mouse-index into bffc8795f8c41ed6b4bc384923cdf6554e6e9960 on grommet:master.\n. \nCoverage remained the same at 34.159% when pulling 539b7416383a141ac70bed1dfe40147b149c9e1e on christinHP:MeterFloatNumber into b28587cf81346333fe79727e0a1ea4afda9af702 on grommet:master.\n. \nCoverage remained the same at 34.159% when pulling 3749cf0102247c06cd96f1b085e213fa7cb721d9 on jwijay:social-share-icons into 20ba7896db7f973ebd61bbb49668b6cd773f6206 on grommet:master.\n. \nCoverage decreased (-0.02%) to 34.143% when pulling ca81abbbff25f84b5512b87d9bd4a701ab5e6b4d on RyanCCollins:master into 20ba7896db7f973ebd61bbb49668b6cd773f6206 on grommet:master.\n. \nCoverage decreased (-0.01%) to 42.041% when pulling fe29b5c8e332abce9d16c263d5aae56b5bf7453f on RyanCCollins:master into c776f347236a33590584490749cbf07235a9675a on grommet:master.\n. \nCoverage remained the same at 34.159% when pulling 30df06abad121c53e489fddb5773dc5fd900f37d on PRECOMMIT_HOOK into e23b9f0b1e52e921e94c2f844711f55142150df7 on master.\n. \nCoverage remained the same at 34.159% when pulling 307b873fa3900aa8c2d86a99596c366a40742767 on NO_ICON_POINTER into e23b9f0b1e52e921e94c2f844711f55142150df7 on master.\n. \nCoverage decreased (-0.1%) to 42.079% when pulling 9e4d94ca592c9ef30b3f6f7f846be0f1fe4ed6e4 on jwijay:layouts-box-columns into 739e7e5f6267dfe793a2565fac4fe32e86f0801a on grommet:master.\n. \nCoverage remained the same at 42.19% when pulling 1a4fd3a441b2ee2e5778e0fdedc0d5585fcc29d1 on epilande:merge-card-stack into d11be4b67f7f5a7fe78db1dac3eaf4237b5cf87a on grommet:master.\n. \nCoverage remained the same at 42.19% when pulling 1a4fd3a441b2ee2e5778e0fdedc0d5585fcc29d1 on epilande:merge-card-stack into d11be4b67f7f5a7fe78db1dac3eaf4237b5cf87a on grommet:master.\n. \nCoverage remained the same at 42.19% when pulling 1a4fd3a441b2ee2e5778e0fdedc0d5585fcc29d1 on epilande:merge-card-stack into d11be4b67f7f5a7fe78db1dac3eaf4237b5cf87a on grommet:master.\n. \nCoverage decreased (-0.1%) to 42.071% when pulling a197d77706d4bd8e32df3999526779a06162ed17 on epilande:merge-card-stack into d11be4b67f7f5a7fe78db1dac3eaf4237b5cf87a on grommet:master.\n. \nCoverage decreased (-0.008%) to 42.071% when pulling e597cc08296a2a72023393b81c1c567e4d5a3161 on epilande:merge-card-stack into 71f509de9566ca4c1d825772c4febbf8b0878e92 on grommet:master.\n. \nCoverage remained the same at 42.079% when pulling 7b483b04c52ec9a5ee2468b0ffd18f19e4cc47b9 on stellardigitalagency:feature/calendar-unit-test into b7c45bfd89b6dc96611db065797268bba5ce783a on grommet:master.\n. \nCoverage increased (+0.01%) to 42.086% when pulling 7f186899138e18307072cf6978f1906b12c2756d on jwijay:box-card into 81794ea9a8c80cc72919e99bfabe2d7f2aa86470 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.069% when pulling 1c0cb3f90602f8ff8c6f97e351ad92714cdca816 on jwijay:box-card into c776f347236a33590584490749cbf07235a9675a on grommet:master.\n. \nCoverage increased (+0.9%) to 42.997% when pulling 94debb878c29de3694cadd85745304eb3c059ca4 on jwijay:box-card into c776f347236a33590584490749cbf07235a9675a on grommet:master.\n. \nCoverage increased (+0.8%) to 42.898% when pulling 40d56db234ffe9d93fbb8ab0785a21599a6b775c on jwijay:box-card into c776f347236a33590584490749cbf07235a9675a on grommet:master.\n. \nCoverage remained the same at 42.071% when pulling de00083b0b30e9fd78cd63f984c62772877e9c2d on epilande:accordion-pad into 81794ea9a8c80cc72919e99bfabe2d7f2aa86470 on grommet:master.\n. \nCoverage remained the same at 42.071% when pulling ca2b33464e440b69bdf7ba7b7e132730f3f5eef3 on epilande:card-updates into 81794ea9a8c80cc72919e99bfabe2d7f2aa86470 on grommet:master.\n. \nCoverage increased (+0.5%) to 42.512% when pulling 2fa3216c71efa29818660983209418dcac280b1a on RyanCCollins:master into 6a07ec2baee5e84b5d177ec1dea9349cc0d44d59 on grommet:master.\n. \nCoverage increased (+0.5%) to 42.512% when pulling 2fa3216c71efa29818660983209418dcac280b1a on RyanCCollins:master into 6a07ec2baee5e84b5d177ec1dea9349cc0d44d59 on grommet:master.\n. \nChanges Unknown when pulling 030014ee3c071cc79d8618a55ba89002bf98d08b on RyanCCollins:master into * on grommet:master*.\n. \nChanges Unknown when pulling 929980614117f21eebb525f8864e203884409448 on RyanCCollins:master into * on grommet:master*.\n. \nChanges Unknown when pulling e2eebd3a0558171cc27f2bdebb5b49e4d01c593a on RyanCCollins:master into * on grommet:master*.\n. \nChanges Unknown when pulling 883ac48695d8b6b5f36b411168ae31e8515ddc01 on RyanCCollins:master into * on grommet:master*.\n. \nChanges Unknown when pulling 883ac48695d8b6b5f36b411168ae31e8515ddc01 on RyanCCollins:master into * on grommet:master*.\n. \nCoverage remained the same at 42.983% when pulling d75bdbb96bb09ed8a51e9f1dde8c32d3256dea8e on codeswan:fix-carousel-server-rendering-issue into 8569a969783334f514828e92078049e27a13a5dd on grommet:master.\n. \nCoverage remained the same at 42.983% when pulling d75bdbb96bb09ed8a51e9f1dde8c32d3256dea8e on codeswan:fix-carousel-server-rendering-issue into 8569a969783334f514828e92078049e27a13a5dd on grommet:master.\n. \nCoverage remained the same at 42.983% when pulling ed1a4f5fe02998f6634e798f394b5816f6cf5e4b on jwijay:skip-anchor into bbd405d1a1a874eaf222a4e907693c37c10bed8a on grommet:master.\n. \nCoverage increased (+0.006%) to 42.989% when pulling fc70dcb5ed6d4087616f019ed8d715a21ff4becf on epilande:list-role into bbd405d1a1a874eaf222a4e907693c37c10bed8a on grommet:master.\n. \nCoverage increased (+0.006%) to 42.947% when pulling 4bc9338388f326ef15d0af160901b8239d137afc on epilande:list-role into 27965dad3a9e64ad911e2ba8d9b9f2a6575cc36f on grommet:master.\n. \nCoverage increased (+0.2%) to 43.151% when pulling a48f42a02b44750193124b01ff947ddbc6842223 on epilande:list-role into 27965dad3a9e64ad911e2ba8d9b9f2a6575cc36f on grommet:master.\n. \nCoverage remained the same at 42.991% when pulling 2ff45fca8581cb720a2ec4c4f1036f0f16193367 on codeswan:fix-carousel-test into d6f06ba4b2c4f60587e83cba8b0edb2082536a78 on grommet:master.\n. \nCoverage remained the same at 42.917% when pulling 68f82aa90ae844b673886a95622de141304adbc4 on precommit-hook into a6dc84db552717babfe8d17ddd53ec1a5bb60a9e on master.\n. \nCoverage remained the same at 42.917% when pulling 4414d7ac61315a96b4d9eb4a8fda6b8c87b3383a on jwijay:card-ie11 into c2ee92a6a5fefbb0e3a8278f34375ccc09211a16 on grommet:master.\n. \nCoverage remained the same at 42.917% when pulling 1cef5eb49bfdc2ac6375a546ad64462cd7118705 on epilande:animate-bug into c2ee92a6a5fefbb0e3a8278f34375ccc09211a16 on grommet:master.\n. \nCoverage increased (+0.02%) to 42.942% when pulling 3ef5b179d94ba48cb068b6d919b3de4a91d0d46b on card-diet into ece2dcd8736a9a95e515cc9572e0c9158c4ad763 on master.\n. \nCoverage remained the same at 42.942% when pulling 0659c17fed6506a9cb21e1795dbb7b4122908aeb on jwijay:card-design-alignment into 2a0a36fbce2436dfe520a3be6e51dfc4ab741caf on grommet:master.\n. \nCoverage decreased (-0.005%) to 42.846% when pulling 97f131d20cb717cd56f81d609dc6572c77136192 on jwijay:card-design-alignment into 0965b1742b41b4431944264467a4dfa2ed055188 on grommet:master.\n. \nCoverage decreased (-0.01%) to 42.999% when pulling f15c609326a543d354251b5b357b8468db6b632a on epilande:fix-gap-in-meter into 6d992b6cbc0b5e55410abcece7fac612e1a7f68c on grommet:master.\n. \nCoverage remained the same at 43.02% when pulling bb76b4ee8a44cfb06e6fb5732d95eb8f91c0d3a6 on apihlaja:fix-table-data-th into f1b788b28182c3f8f8ef72050371b1bd4d6cee38 on grommet:master.\n. \nCoverage decreased (-0.03%) to 42.993% when pulling a4d825e83940d589f187f5c6855a3c6cac7e2f17 on karatechops:axis-styling into 89617a0e5ad90bc4f05dd29cf26bfa5b8f043abe on grommet:master.\n. \nCoverage decreased (-0.04%) to 42.981% when pulling 9637b780e48ac6fd7141ca664db0b4e6d26b75d6 on karatechops:axis-styling into 89617a0e5ad90bc4f05dd29cf26bfa5b8f043abe on grommet:master.\n. \nCoverage remained the same at 43.055% when pulling 47800ebacaf6ce3c9f7be32e381ba28a6092cf6d on codeswan:column-medium into 3f31544c477c45268f1b8a35b2e9f892720a3d3e on grommet:master.\n. \nCoverage decreased (-0.1%) to 42.925% when pulling 44f1e1c6af1e96214445dff3f10ac153a31e5df1 on jwijay:video-timeline into aa2ccb8277237cbce46ef72b00ed9ac1c15c6cd9 on grommet:master.\n. \nCoverage decreased (-0.08%) to 42.933% when pulling fe95310c16175c5ab548c24cba5fb06efd9814f0 on coltonw:createAccountButton into c2ec367e9c9904a2c3e65287963154e245836af3 on grommet:master.\n. \nCoverage increased (+0.2%) to 40.834% when pulling b2e7f197b203845f7449326554b66581f680def1 on coltonw:createAccountButton into cff7af26d022f41b9856017ed3b81949b76f9718 on grommet:master.\n. \nCoverage increased (+0.2%) to 40.834% when pulling 900c4556159fb837f1f895999d720745acceff52 on coltonw:createAccountButton into 8046b132afc07a1bae5f07c59b964afb85bfe7fa on grommet:master.\n. \nCoverage increased (+0.2%) to 43.086% when pulling 0d44cfc031b102d3d67deda53d87dbccc6e8de69 on epilande:fix-layer-tiles-infinite-scroll into 783ae91916e4dbdf2c870cbb202715888b6c2ffc on grommet:master.\n. \nCoverage decreased (-0.005%) to 43.086% when pulling 6f9c240cef9af52deb1a7062371acde2021e36fa on epilande:fix-layer-tiles-infinite-scroll into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage remained the same at 43.092% when pulling 62ff5910caf6596bbc7b85246bbf336d4f7dca7b on epilande:fix-layer-tiles-infinite-scroll into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage remained the same at 43.092% when pulling e49f65cb67121797f2d7593c4a333cb0685c3e4b on epilande:fix-layer-tiles-infinite-scroll into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage increased (+0.05%) to 42.895% when pulling badc088b8700138a5f9050f9bf248ef74bd3c7ba on epilande:video-component-updates into 783ae91916e4dbdf2c870cbb202715888b6c2ffc on grommet:master.\n. \nCoverage increased (+0.06%) to 42.903% when pulling 4726db8a1d2a7b2d54a1b08a7cfb33cddbe7b20a on RyanCCollins:master into 783ae91916e4dbdf2c870cbb202715888b6c2ffc on grommet:master.\n. \nCoverage increased (+0.2%) to 43.065% when pulling bd2d10407b9425415d61fa1b703955db3bcff9aa on RyanCCollins:master into 783ae91916e4dbdf2c870cbb202715888b6c2ffc on grommet:master.\n. \nCoverage remained the same at 43.113% when pulling e9341187a362a966200d8115df4349589db6c6ab on jwijay:ie11-select into c75e6d5eb501b4f39dcd9f5114607d47c80fe213 on grommet:master.\n. \nCoverage increased (+0.4%) to 43.504% when pulling a37b72f85b4a19470347b1f8e0ed839077482892 on ShimiSun:Chart/normalization into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage increased (+0.4%) to 43.504% when pulling a37b72f85b4a19470347b1f8e0ed839077482892 on ShimiSun:Chart/normalization into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage increased (+0.3%) to 43.409% when pulling 5523ad8743b34135e53fa913702231ede4d06695 on ShimiSun:Chart/normalization into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage increased (+0.3%) to 43.417% when pulling 5523ad8743b34135e53fa913702231ede4d06695 on ShimiSun:Chart/normalization into 6c51a141b83fc8ee25c52e1c4136e20d424a7e4f on grommet:master.\n. \nCoverage increased (+0.4%) to 43.365% when pulling d1328470669c57b0d074d5bd5c7d41022c69d89e on ShimiSun:Chart/normalization into 5809333429d7ed518a78307f7326eea484056fe5 on grommet:master.\n. \nCoverage increased (+0.4%) to 43.376% when pulling dcff5c5c118c2531735a30e11ee2dda115fc62cb on ShimiSun:Chart/normalization into 5809333429d7ed518a78307f7326eea484056fe5 on grommet:master.\n. \nCoverage decreased (-0.1%) to 42.955% when pulling e93621a49e355b5f584e669c133fc2f266e407b5 on jwijay:masonry-margins into 036303b51335840fe4498e67384f4ecc82aaa946 on grommet:master.\n. \nCoverage decreased (-0.1%) to 42.504% when pulling 214070b10068ce92cab6dcce894c691691a9ad99 on jwijay:masonry-margins into b57701ddf3fa499d98b4eac831f6e5390cb0397d on grommet:master.\n. \nCoverage remained the same at 43.104% when pulling e23118151e00f622506bba352ba4c46edc9c86a3 on karatechops:hpe-anchor into bcc6ac381dde0a01b440d5acc32435d1c31a9c69 on grommet:master.\n. \nCoverage decreased (-0.008%) to 43.096% when pulling f9970d02a9222c2d21bfe48681ef4c9f38318740 on karatechops:search-focus into bcc6ac381dde0a01b440d5acc32435d1c31a9c69 on grommet:master.\n. \nChanges Unknown when pulling fa3089ca8b0314e960f4517de8e0442a25b1b627 on epilande:fix-accordion-button-bug into * on grommet:master*.\n. \nCoverage increased (+0.003%) to 42.8% when pulling a002bdc876a27a68884af99ea24525e0f2d2075c on jwijay:box-card-updates into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage decreased (-0.3%) to 42.523% when pulling ffbcf588874316cd9f98cc1fcd93c39380b814b5 on jwijay:box-card-updates into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage remained the same at 42.797% when pulling 2aff22e0d0fa2b694450c1ad8a725958061c877d on karatechops:timestamp-seconds into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage decreased (-0.3%) to 42.544% when pulling b7ba2f4133fde518208aa8bb4782886619f6286b on karatechops:timestamp-seconds into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage increased (+0.2%) to 42.976% when pulling 3b4786a68ccc4da518e6f21c52c01338a39bf544 on karatechops:timestamp-seconds into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage remained the same at 42.797% when pulling 203966da1f33ead5b142b3c91b888fe0fc994633 on karatechops:pulse-animation into 7b3c7249dce10cc22b3b82a41a150894592f00d6 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.534% when pulling be280f1134bf3e775c92bd41f2f9aec9fe7a0d59 on jwijay:card-accordion into b4bd51d16936036dcf3c1d9ab4a3c79c7a81b135 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.534% when pulling eadeaf94d80b4b5de4a263f18d47f2cb679d20ba on jwijay:card-accordion into b7fe9eca89682b7d1bfd0ffb07f345bc0466c154 on grommet:master.\n. \nCoverage increased (+0.5%) to 43.07% when pulling f05f701133e747c03b76f659a28efb977ccc3fb1 on jwijay:card-accordion into b7fe9eca89682b7d1bfd0ffb07f345bc0466c154 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.99% when pulling 5453acc46c0d5e82836085a1a093925f5b0e5910 on epilande:transfer-anchor-props into 37cc58b616dbebce965010021f7f1d0e6f7fd8eb on grommet:master.\n. \nCoverage increased (+0.01%) to 43.07% when pulling d2d543f62e57a173dbdae7e160b9f09d0abe899a on epilande:transfer-anchor-props into a05a39d7175289324d8cc5c1789cdb4555133153 on grommet:master.\n. \nCoverage decreased (-0.09%) to 42.965% when pulling 01d8f547ef0a155542f5c7940e302a47175153ea on epilande:transfer-anchor-props into a05a39d7175289324d8cc5c1789cdb4555133153 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.574% when pulling f42d3cf1a00ad0109caec24af65fa5c3c2c6d1f3 on epilande:transfer-anchor-props into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage increased (+0.01%) to 43.019% when pulling 1370dbb8ca8a2f5497111a2351e2cc8e8cf633bf on karatechops:button-props into 5809333429d7ed518a78307f7326eea484056fe5 on grommet:master.\n. \nCoverage decreased (-0.1%) to 42.879% when pulling b18760c28470fc16653b78d045500760e33bf6f8 on karatechops:button-props into 5809333429d7ed518a78307f7326eea484056fe5 on grommet:master.\n. \nCoverage remained the same at 42.879% when pulling f2a7b7d0a4237aba3be70c41226534db39d90998 on karatechops:button-props into 56ef3b296e5de61a93a351ab6a941de6e13635f3 on grommet:master.\n. \nCoverage remained the same at 42.946% when pulling 3191c013e28056ed80d7f30b1787bc32c208bb0f on karatechops:app-props into 462df59e5325aa8e36f1f77505cd63b64d6f5b22 on grommet:master.\n. \nCoverage increased (+0.02%) to 42.976% when pulling 4aad719f09130707ed4db0cc5ae3579fee7fdc74 on ShimiSun:fix/notification-component-warnings into a42b48c3f1bb2c3f0e576dd80109930d5b111fbd on grommet:master.\n. \nCoverage increased (+0.02%) to 42.971% when pulling f58c4e0651aa8d02149c1156294b75d2be60f026 on ShimiSun:fix/notification-component-warnings into a42b48c3f1bb2c3f0e576dd80109930d5b111fbd on grommet:master.\n. \nCoverage decreased (-0.005%) to 42.971% when pulling 8e9122cd811397163c7af7117e41d249d109550b on karatechops:article-props into 60a88ec6b975775b97d4764055d89f38aada77f3 on grommet:master.\n. \nCoverage increased (+0.08%) to 42.64% when pulling 54973b9dcda96c70d008e3d6a05fde4f493fbc50 on epilande:transfer-menu-props into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage decreased (-0.01%) to 41.982% when pulling a48e45ba4ef57c962f618947fc4cea8b20a04c6e on epilande:transfer-section-props into 70ec148e61a8cb4af28ef1caac66ec24990379ab on grommet:master.\n. \nCoverage increased (+0.003%) to 42.05% when pulling 396f5bc8e3ef41278df7bdec9881d98286a4a590 on stellardigitalagency:feature/tabs-onactive into 3fe86b0c4b8ca60d404754835fb3086f2deeabd0 on grommet:master.\n. \nCoverage increased (+0.06%) to 42.609% when pulling f6430094cf850506285d5fdf12a1b295146940dd on karatechops:carousel-props into 5be381020f53518f5827ed565d017b32860a93f0 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.556% when pulling c39a7d666c72daa45193c6171ec4824f6652e8bb on karatechops:carousel-props into 5be381020f53518f5827ed565d017b32860a93f0 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.556% when pulling 6724ea85837bbccbee5db256eb701a7885fe8e49 on karatechops:carousel-props into 5be381020f53518f5827ed565d017b32860a93f0 on grommet:master.\n. \nCoverage increased (+0.01%) to 42.536% when pulling e2f635729dafabdb2517d574cd40486d14bd5b01 on karatechops:columns-props into ee0e016fef41e73d42097dbcfbeda24b0ef7abef on grommet:master.\n. \nCoverage increased (+0.02%) to 42.563% when pulling 7947592c2bacdca0e8b636fe2413061f84fc1e5b on karatechops:footer-cleanup into 043391acb1b11e1c0dbdec8f6805cfe26646eb03 on grommet:master.\n. \nCoverage remained the same at 42.563% when pulling a67162fdbf5982c092941f961953efd746f5a416 on karatechops:form-cleanup into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage increased (+0.005%) to 42.568% when pulling ea532c4606b22023c3a1b81b71d695413677a830 on karatechops:form-cleanup into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage remained the same at 42.563% when pulling 4baf4ab60c29eb4cb10dc3fa1df24c7b47fd91df on epilande:transfer-socialshare-props into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage decreased (-0.03%) to 42.532% when pulling 57bb8350fdd5a92b8217d0dc3030e905751513dd on karatechops:formfield-cleanup into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage increased (+0.005%) to 42.568% when pulling 384f4cc71910c57187e1a14e9770d7fa6a458164 on karatechops:formfield-cleanup into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage decreased (-0.02%) to 42.541% when pulling 53a85ebf4bdf2d37ba6a194abc03691ef6900a12 on epilande:transfer-spinning-props into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage decreased (-2.05%) to 40.513% when pulling 6afa43465702a769f5ad13a969a0820f3d66dd99 on brockinit:nan-chart-issue into 48c8e52a6a8dfa7a05b9633bc3d6ff5f8ff1a577 on grommet:master.\n. \nCoverage decreased (-0.2%) to 42.514% when pulling 999fa18455301fdfd4776be2c467c8bd5099dfbe on epilande:transfer-status-props into d202c3380302643cf79a3b73409b61fcba35f1e6 on grommet:master.\n. \nCoverage decreased (-0.3%) to 42.45% when pulling 14b793f339d2653b4b096b480efa0a15035fc5a3 on epilande:transfer-status-props into d202c3380302643cf79a3b73409b61fcba35f1e6 on grommet:master.\n. \nCoverage decreased (-0.02%) to 42.599% when pulling 7beeef68096cd40308f33e8606525a0a106be5c1 on joachimhb:patch-1 into acbe8750c2c9da9460923b533a864857e136a873 on grommet:master.\n. \nCoverage remained the same at 42.651% when pulling 3d5ae1100de7c3024a0a57c7fa82d2cfe3810eb6 on nickjvm:image-thumb-contain into 415d1ac3216a3f25321bae8185709aa0993b9558 on grommet:master.\n. \nCoverage remained the same at 42.651% when pulling 89a606156938d1bdce01b37da561d4093aa29a2a on nickjvm:eslint-wrap-multilines into 01cb7c8f6d260ff1d33899ce71c765cfc9b66133 on grommet:master.\n. \nCoverage remained the same at 42.514% when pulling e3d8887f8ae480241dd20a9449b0bdc98a6031a7 on epilande:fix-select-scrollbar-ie into 910c977521e5141fd61852b7fa5c1e84bf27c165 on grommet:master.\n. \nCoverage increased (+0.09%) to 42.549% when pulling 45602f03445dbb09fcf25a322afe71ec693abd73 on coltonw:brokenTotal into 69b0d4e9eee3a0bde6b18986b809b8a6cdfb4d5f on grommet:master.\n. \nCoverage remained the same at 42.385% when pulling 5705975c30eb31da97f9380d793e685f175cd6ef on ShimiSun:localization/JP-and-CN into 07119bbc22a073fbbd0098399799088e7ef29340 on grommet:master.\n. \nCoverage increased (+0.003%) to 42.305% when pulling 473efd4dbb11b1b07cb2adeece3bb4df89b5c7a6 on epilande:menu-invalid-prop into 2b01b0094c47b2b38885c7010b9eeccdea6e5af9 on grommet:master.\n. \nCoverage decreased (-1.1%) to 41.158% when pulling 7191d5eb4455336b1125554940de33a1aadc56e6 on epilande:menu-invalid-prop into 2b01b0094c47b2b38885c7010b9eeccdea6e5af9 on grommet:master.\n. \nCoverage decreased (-0.008%) to 42.294% when pulling cb02bd8ba223e14c2a296445df4d173b0a17bbf5 on epilande:fix-dom-slice-error into 2b01b0094c47b2b38885c7010b9eeccdea6e5af9 on grommet:master.\n. \nCoverage decreased (-0.04%) to 41.793% when pulling a5a24f6e253d3b70623fa7c566b1872f15118b84 on jwijay:ie11-card-columns-fixes into 3eb59a319566b77d441c5ee7bbf20c437e8eb5b1 on grommet:master.\n. \nCoverage decreased (-1.2%) to 40.669% when pulling 021d16858ebb8594292a3779e3643a68de44786d on jwijay:ie11-card-columns-fixes into 3eb59a319566b77d441c5ee7bbf20c437e8eb5b1 on grommet:master.\n. \nCoverage decreased (-0.08%) to 40.621% when pulling 9dea9a3282e21ece8df9ee180799a4d606dc66c0 on jwijay:ie11-card-columns-fixes into 4d8485391b283fc5a66a8ed2abeab6276c7db60e on grommet:master.\n. \nCoverage decreased (-0.01%) to 41.137% when pulling 85490d48c1a6799f47bf142949660c15faea7c9f on karatechops:axis-ticks into 963a5ea7948d494c8409dbb6b1b79e980b4c453a on grommet:master.\n. \nCoverage increased (+0.01%) to 40.62% when pulling cd7bc20320974afbe576176b015b837d12cef85c on epilande:search-mouse-up into 4abbf7ec0c6d7239fa3bed82b91b04f55a7ddb56 on grommet:master.\n. \nCoverage decreased (-0.01%) to 40.651% when pulling 1b96ee3e24610d84a05d85b4223ccf067f916266 on epilande:fix-selection-deselect into 7b850bb8b933f600267fabf0a7533bf1399222e8 on grommet:master.\n. \nCoverage decreased (-0.01%) to 40.651% when pulling 1b96ee3e24610d84a05d85b4223ccf067f916266 on epilande:fix-selection-deselect into 7b850bb8b933f600267fabf0a7533bf1399222e8 on grommet:master.\n. \nCoverage remained the same at 40.661% when pulling 323e09b25276f3e3d1d95e090415afa56207eefd on karatechops:axis-ticks-dark into f2595e97928338c72c397a049b6d486d44c89a30 on grommet:master.\n. \nCoverage remained the same at 40.703% when pulling eb36b4624d6c108ce30d531c8f59fb1a8574b793 on epilande:fix-tile-scroll into 4d8485391b283fc5a66a8ed2abeab6276c7db60e on grommet:master.\n. \nCoverage remained the same at 40.579% when pulling 0f6f62e033a7ebd060716707edf4199ea9fb2510 on ShimiSun:localization/JP-and-CN into 936f3f91e41e7dbc96cc656c9748c6aee6ef7269 on grommet:master.\n. \nCoverage increased (+0.03%) to 40.614% when pulling 0ed20ca8021d2600146e6c60610000ee68419038 on ShimiSun:localization/JP-and-CN into 936f3f91e41e7dbc96cc656c9748c6aee6ef7269 on grommet:master.\n. \nCoverage increased (+0.03%) to 40.614% when pulling 8605a50d15ae1432b1b50f924bc4fbcb7fbcbb2a on ShimiSun:localization/JP-and-CN into 936f3f91e41e7dbc96cc656c9748c6aee6ef7269 on grommet:master.\n. \nCoverage increased (+0.003%) to 40.583% when pulling e077b4e2c4bc3b846264e1dfea044591203fe57a on epilande:fix-row-tile-eclipsed into 936f3f91e41e7dbc96cc656c9748c6aee6ef7269 on grommet:master.\n. \nCoverage remained the same at 40.614% when pulling a70cd663887fa9de86a6ae300d7bba1959ca3394 on epilande:fix-pulse-lag into 2fbf4dd164c992c6faf62f8fdaaa216634ff69cb on grommet:master.\n. \nCoverage remained the same at 40.614% when pulling 8ec24d3af9362ea1ccab87a39093eb3d6416ec34 on nickjvm:intl/list into 2fbf4dd164c992c6faf62f8fdaaa216634ff69cb on grommet:master.\n. \nCoverage remained the same at 40.614% when pulling 869afdff8a502d7df67f09d6ad6f1e26da06a3e9 on nickjvm:fix/menu-drop-icon into 6485f1a6eb5a03f8b98af74dd5263c8b6355f43a on grommet:master.\n. \nCoverage increased (+0.01%) to 40.679% when pulling 199df25cc6f93fe8136b883d6234368242e92f9e on karatechops:pulse-props into d0bf1a3c063f50ae60e11db948add888e923afd6 on grommet:master.\n. \nCoverage remained the same at 40.679% when pulling 91ac783cf8025d3c4f834c2a273a8050b0c95c67 on karatechops:hpi-theme-stroke into c512285faa3096cde74019309ee115de0232a104 on grommet:master.\n. \nCoverage remained the same at 40.679% when pulling a6cae8e58c6aeb7c0e7f0327e3df61e9b0e325e2 on karatechops:hpi-theme-stroke into c512285faa3096cde74019309ee115de0232a104 on grommet:master.\n. \nCoverage remained the same at 40.679% when pulling a6cae8e58c6aeb7c0e7f0327e3df61e9b0e325e2 on karatechops:hpi-theme-stroke into c512285faa3096cde74019309ee115de0232a104 on grommet:master.\n. \nCoverage remained the same at 40.679% when pulling c933078cc168ac6cc496b0ec3c5cb8d2b243832e on karatechops:hpi-theme-stroke into c512285faa3096cde74019309ee115de0232a104 on grommet:master.\n. \nCoverage remained the same at 40.665% when pulling 568b1f72929f325cc97829dd09450ddd9f6733eb on epilande:menu-fix-labelled into c211245553909d3222203834b46f92372a696557 on grommet:master.\n. \nCoverage remained the same at 40.665% when pulling 992444f5fc29e78e343db9716b25e39fa21bcb94 on JeroenKleen:patch-2 into 8046b132afc07a1bae5f07c59b964afb85bfe7fa on grommet:master.\n. \nCoverage remained the same at 40.665% when pulling 6e5da8b834c4fb5ef47cf481fba86426c76bd246 on JeroenKleen:patch-2 into 8046b132afc07a1bae5f07c59b964afb85bfe7fa on grommet:master.\n. \nCoverage remained the same at 40.921% when pulling 7b06db22f0f69b463be3e744e69db6d7707d01e3 on epilande:fix-caret-wrapping into 0c86ea4f0054eebfc96150bd41bbe06333fb38d2 on grommet:master.\n. \nCoverage remained the same at 40.887% when pulling f6e8eda1d3e5bc2a18016a3cb573a7332894e5e5 on kennynaoh:patch-1 into 1746fcd7f4fcbce4aade4f72bf62d65fb02ca1f3 on grommet:master.\n. \nCoverage increased (+0.05%) to 40.889% when pulling 8e34fcf898b83558d727c065019343aa761c5e54 on davidcalhoun:fix-onwheel-freezing into 6983f712c48aa014bf5ae0e1ad26ecef926d7474 on grommet:master.\n. \nCoverage increased (+0.05%) to 40.895% when pulling 871c74221064769dc351275e63301ee21f1f8ea7 on davidcalhoun:fix-onwheel-freezing into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling 871c74221064769dc351275e63301ee21f1f8ea7 on davidcalhoun:fix-onwheel-freezing into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling 5aa8e1690714a8eab339587469902d42ddd775b0 on davidcalhoun:fix-onwheel-freezing into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.836% when pulling dc088dc1c8f13b7437382836cfcd72194e0204d5 on nickjvm:fix/textinput-suggestions-prop into 38da7506a61977626029f6ccb18009e4bcae6ad9 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling 38791d35bbf0b12fa8f4f525e4495ac7fa696804 on karatechops:hero-update into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling a525d35ee5900aced8398be59df1216355ed2d81 on ShimiSun:localization/JP-and-CN into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling 24735a58f0fb633f3ca8c3377bcb35b8149afc38 on davidcalhoun:fix-quote-border-css into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage remained the same at 40.842% when pulling bf93dfe2f38dc04b704a7792963cdf3406d69f39 on davidcalhoun:fix-onwheel-freezing-2 into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage decreased (-0.01%) to 40.828% when pulling 39729537dbdc897b331a73a16fa26de389bb0319 on davidcalhoun:fix-menu-mobile-dismiss into bbdd82566ae4a5402ea0f85c54f61b3d45a6c6f4 on grommet:master.\n. \nCoverage increased (+0.01%) to 40.838% when pulling 8b34e43e00422025443f1dda843bd33f70c1f66f on davidcalhoun:fix-text-input-placeholder into 8eb41083beb45dce939bd9526832e807a2967028 on grommet:master.\n. \nCoverage remained the same at 41.03% when pulling 988ddd08ea0c4bc439a7599844660c59e615c8bf on davidcalhoun:fix-text-input-placeholder into 310676349e9737bef58cbafa5222e474c3e39016 on grommet:master.\n. \nCoverage remained the same at 41.001% when pulling 0b4fdcc4be21e04c99a4b7b37fb0b5891c17ae44 on davidcalhoun:update-components-index into 79e39c3496c8c6803c658b6bfaeaf3ade24ead94 on grommet:master.\n. \nCoverage remained the same at 41.03% when pulling 6ca812d496800e0ccb610bec59a7b94768295db5 on davidcalhoun:update-components-index into 310676349e9737bef58cbafa5222e474c3e39016 on grommet:master.\n. \nCoverage remained the same at 41.001% when pulling 04e5ffdd7d166a33bfa051f703269d69b862e2e9 on davidcalhoun:fix-box-in-accordion-animation into 79e39c3496c8c6803c658b6bfaeaf3ade24ead94 on grommet:master.\n. \nCoverage remained the same at 41.03% when pulling 50831e8d1d088fa91e06b3c376c951c089e3e36d on ShimiSun:cleaning-intl-warning into 1cf8776a2ea2df0e6931f0a549217fc416d130b1 on grommet:master.\n. \nCoverage decreased (-0.01%) to 41.017% when pulling 4f6299f4e88e89c0cd0971f318eef6823ae0cfc2 on joachimhb:patch-2 into 310676349e9737bef58cbafa5222e474c3e39016 on grommet:master.\n. \nCoverage remained the same at 40.989% when pulling 31d2cb54dce12131be2b9c9a04bf90e8caad27cf on nickjvm:fix/close-tip into 96df05d31f8cd0fd88743ae6bdf11b1f40ad06bc on grommet:master.\n. \nCoverage remained the same at 40.989% when pulling 5c6e93e9af62a8e04f0535f25e6bb7d58f9ec9f2 on jwijay:menu-drop-jump-bug into 96df05d31f8cd0fd88743ae6bdf11b1f40ad06bc on grommet:master.\n. \nCoverage increased (+0.01%) to 40.971% when pulling 1d7a88d78cce6955deea11a277526454b01cbbf7 on davidcalhoun:fix-card-link-screenreader-issue into 254caef679093ebf1173d4b5b60c0df278cdd3f4 on grommet:master.\n. \nCoverage increased (+0.01%) to 40.974% when pulling ad85d6a8908baf2d89df34f9608b04578f847128 on davidcalhoun:fix-card-link-screenreader-issue into f86d86664c17417dbd281bb59bc58103f4e7dc8e on grommet:master.\n. \nCoverage remained the same at 40.964% when pulling 074ae309cb8e420f3c1407344b6434522ad9a406 on davidcalhoun:fix-card-link-screenreader-issue into f86d86664c17417dbd281bb59bc58103f4e7dc8e on grommet:master.\n. \nCoverage remained the same at 40.964% when pulling 8ca8324a5ab97b7406a14f6abcfa368f7ca8a875 on davidcalhoun:fix-card-link-screenreader-issue into f86d86664c17417dbd281bb59bc58103f4e7dc8e on grommet:master.\n. \nCoverage increased (+0.003%) to 40.964% when pulling 5d4e22af39799724dadd5fb2f88988237de97b3e on nickjvm:notification-size-prop into 3f10c5d7984287819bb4e0c4f08535a7f34943a5 on grommet:master.\n. \nCoverage increased (+0.003%) to 40.964% when pulling 5d4e22af39799724dadd5fb2f88988237de97b3e on nickjvm:notification-size-prop into 3f10c5d7984287819bb4e0c4f08535a7f34943a5 on grommet:master.\n. \nCoverage decreased (-0.02%) to 41.085% when pulling 0cca14853f56dc8f419cd2b51e19965dd6557b0e on karatechops:tiles-scrollwidth-fix into 4a02e7131f8b7d5677e47df6c81af0efeeab526f on grommet:master.\n. \nCoverage remained the same at 41.105% when pulling e3ec7172d9d1080bd0b8fd3581391593b63dc27e on Waize:master into 5499b68555f612657ec328a799065bacb356ccf8 on grommet:master.\n. \nCoverage remained the same at 41.085% when pulling 067a2893d50121af2ab2c78afb07111b1de6526a on alansouzati:COLLAPSIBLE_TEST into 149c23653cf3297ef4864751399595e51c3a999f on grommet:master.\n. \nCoverage remained the same at 41.061% when pulling cd5cf1f2e7f3d4f9f6109e0ddca3c7dea4f061ce on nickjvm:select-focus-padding into 881954ff221a9d4de427f8c0ce8b30ddfe195184 on grommet:master.\n. \nCoverage decreased (-0.007%) to 41.054% when pulling 6b13d95af83eea70d0588e42856037f2089abc3f on stellardigitalagency:feature/drop-position-fix into fecbcb2851362acd7d3bc4d7898b07f6e6975c4b on grommet:master.\n. \n\nChanges Unknown when pulling 4b27ee831ba8dcfe25896f0e6c09d24fe90ac710 on go-stellar:feature/tooltip-remove-error-fix into  on grommet:master.\n. \n\nCoverage remained the same at 41.189% when pulling 96f15e8f3fa02d5d960a452408accc16173f837d on karatechops:grommet-neutral-color-4 into b7b7b13f9462b410ecb6b2d10406334fed788871 on grommet:master.\n. \n\nCoverage remained the same at 41.261% when pulling 847fb3d9c4fd9c349e3ea64f3ece103378e4b637 on L0ZZI-patch-1 into 18ba1bc505b48c891a909c95a56587e0f906355b on master.\n. \n\nCoverage decreased (-0.007%) to 41.045% when pulling 21222a89a0ca4c224cf90a9b1f4ec20b9c56809d on ido-ran:master into 0aae3c3c2eaa9f6e4a35e2e67601e7318554a132 on grommet:master.\n. \n\nCoverage decreased (-0.02%) to 40.98% when pulling d873690467526c93e82927e4f08a2a92a24f5688 on xcomponent:master into 4d840f358423dc08a34c80608f0c5412531d5ad8 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 40.987% when pulling cb3fa61d138748471bb0d5e2dfd7e8ecd986bc74 on xcomponent:master into 4d840f358423dc08a34c80608f0c5412531d5ad8 on grommet:master.\n. \n\nCoverage increased (+0.01%) to 40.996% when pulling d26dc19d7e04004e90b554964d3db6806423342d on GeethanjaliRao:ADD_PRECISION_TO_LEGEND_TOTAL into f1fce3ef2fc67a115d0a46bffd767bb8901282a3 on grommet:master.\n. \n\nCoverage increased (+0.03%) to 41.018% when pulling 3d6ca71ffe127286e4f0f8d0654f2a8d76690425 on GeethanjaliRao:ADD_PRECISION_TO_LEGEND_TOTAL into f1fce3ef2fc67a115d0a46bffd767bb8901282a3 on grommet:master.\n. \n\nCoverage remained the same at 27.577% when pulling e0895b74a58968aba93c361d91b568e7d9d6b1d9 on bjackson:patch-1 into 503658bf706ec600fa1a885ea8c2207147d4a3cf on grommet:master.\n. \n\nCoverage remained the same at 27.596% when pulling f4d7b45250b95048d76779fad9b58e1680d9a637 on ezzatron:anchor-onclick-args into b3c9667bee21a15714a6d43526028e0eca4914fa on grommet:master.\n. \n\nCoverage remained the same at 27.58% when pulling 65ae8de3601650f3bdd95cad85304b6f759a343e on jonathonwalz:master into 9aa7d5333c751c438e5bc1e85ac09f157a83ae3a on grommet:master.\n. \n\nCoverage increased (+0.003%) to 27.606% when pulling a39fba08b6d5f99ddb0587b1b004c8d1a04a4d0a on kadinwu:master into 6808e06f36c71f82b52e11caa7e7a3f12cdc6a4c on grommet:master.\n. \n\nCoverage increased (+0.003%) to 27.625% when pulling 3f07d03d8a17bd4db22e3288f47d260a109f29cf on quarthex:patch-1 into 923fb72c9f9da9270516626691c6152434933fa5 on grommet:master.\n. \n\nCoverage remained the same at 27.625% when pulling 7a04599c2b143e409dbbc2e7398a9ea876748473 on fix_rc_issue_1075 into f930f75d2129299bcbdd49e67fd8982520aaa6d5 on master.\n. \n\nCoverage increased (+0.01%) to 27.678% when pulling 1fabfa7fbf2c08e8cde92be305d143a7ed8f3326 on cullan:master into bc64967c36feec2342a2d0a8e3534fedb201b12d on grommet:master.\n. \n\nCoverage increased (+0.007%) to 27.685% when pulling db1fcc1e57746283f5ac5a1ff44fbb62a9e65d0e on mturley:master into 06adf025de881686d08ab1dabf1398f40ca0c912 on grommet:master.\n. \n\nCoverage decreased (-0.003%) to 27.696% when pulling e061cb05c027b7b336c3db4503a29c9bdc135e6f on nathanstitt:fix/autoFocus-textInput into 81de18460186c797a84991990f1154ecba441d17 on grommet:master.\n. \n\nCoverage increased (+0.1%) to 27.796% when pulling fe3a7c663183e0af3eb567176ef4f8970d8a5a3d on coltonw:roundingError into d2018b6ada564aea6c3096822202a729a628d57f on grommet:master.\n. \n\nCoverage remained the same at 26.439% when pulling ca19a0d75570930d6a9316e4702f2241267735fb on sorin-davidoi:master into 4e6791b2e7c4c17d7c35ea46771ecfae62c031e3 on grommet:master.\n. \n\nCoverage remained the same at 26.439% when pulling b70a219b916c72185fba7ff8ff6b70bb2ce567d5 on keheliya:master into c3a8fbd18711f110e5eedffb3da8ec21bb386143 on grommet:master.\n. \n\nCoverage remained the same at 26.439% when pulling 5c725b0c879232f3a7a9c75ecb9e0847252bf173 on sorin-davidoi:fix-tab-label-prop-type into c3a8fbd18711f110e5eedffb3da8ec21bb386143 on grommet:master.\n. \n\nCoverage remained the same at 26.439% when pulling 5c725b0c879232f3a7a9c75ecb9e0847252bf173 on sorin-davidoi:fix-tab-label-prop-type into c3a8fbd18711f110e5eedffb3da8ec21bb386143 on grommet:master.\n. \n\nCoverage remained the same at 26.347% when pulling ff47f6a2cb1fea198b6c653add010b3f62ffd7f6 on cherih:master into 8fd64577427b3eb6f2445a3a36885af44dccd764 on grommet:master.\n. \n\nCoverage increased (+0.004%) to 26.352% when pulling 5e1bb4a292c608a195c6b4531ecb4c467470d491 on cherih:master into 8fd64577427b3eb6f2445a3a36885af44dccd764 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.453% when pulling 7cb0973abe8b810c4454cabf35474281c1699dc5 on wdonne:dutch into a22243785532b5ca0e43915c761d88bce0ae911b on grommet:master.\n. \n\nCoverage increased (+0.002%) to 26.462% when pulling 5da8a59349496cae7253ab8cf7dd7215302f7d3d on karatechops:fix-anchor-unlisten into a22243785532b5ca0e43915c761d88bce0ae911b on grommet:master.\n. \n\nCoverage remained the same at 26.455% when pulling 075e974ac22fc498ba9f6567c4632336a772cb14 on snaemi:master into dcdfffc5ae1a89819b83d580c1c3a420e13b3033 on grommet:master.\n. \n\nCoverage remained the same at 26.497% when pulling 11f47e6f7c5b315146f00ed9f43f4e00173da536 on jagatjeevan:master into c274c0af49b9a1652b2f1cb2fd979f5394df6682 on grommet:master.\n. \n\nCoverage decreased (-0.03%) to 26.47% when pulling 07a212f926f0beaf0972c27402a7798c9537024a on MarcoMedrano:Fix-#1187 into 4a9fe6fd8f00c1d01395ebed2bb5bccfd8c3486e on grommet:master.\n. \n\nCoverage increased (+0.007%) to 26.502% when pulling 139f8508f358629a8180ca19db467a3556015920 on nickjvm:conditional-tabs into 016abd4adae01a90d85c7de744ce38e36db8a60c on grommet:master.\n. \n\nCoverage remained the same at 26.26% when pulling 72928ebaa3020a78269ae407f1d485cdfbc2b919 on ShimiSun:translations-drop9 into cead5146e7571e18c0448760fbab3936d31ae642 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.405% when pulling 4130652ef21711385231b5485f5e3d4a6d0902de on raphi011:SEARCH_ONSELECT into c9db6884d4ea961d9c89b7f880aec5cd401bb936 on grommet:master.\n. \n\nCoverage decreased (-0.03%) to 26.389% when pulling 64bcc13dc048ed2465ac0592bfc5f2ae1efbd920 on raphi011:SEARCH_ONSELECT into c9db6884d4ea961d9c89b7f880aec5cd401bb936 on grommet:master.\n. \n\nCoverage remained the same at 26.415% when pulling 72f47875d9392e7fdebe7f7bea2c68423645b481 on monte-hayward:1262-monte-hayward-patch-textinput into 2c57e21973b7f1b87daf66cc1b2c515f201c9346 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.401% when pulling 9dfd55700b74df9244f634a95350ebf7c2794c03 on monte-hayward:1262-monte-hayward-patch-textinput into 2c57e21973b7f1b87daf66cc1b2c515f201c9346 on grommet:master.\n. \n\nCoverage remained the same at 26.384% when pulling f3db6c65e0ae6e8c5540d24b10fb4187b0d62e66 on raphi011:SEARCH_ONENTER into fc6f5a2a5dfa168a121106b3b2d977b63c374f73 on grommet:master.\n. \n\nCoverage remained the same at 26.384% when pulling 023947b49891e82ac3c6b02655c359ce5642989a on FIX_SVG_ICONS into 4aa58e3a0141ef61c832f3acc705c34dd78759bc on master.\n. \n\nCoverage increased (+0.01%) to 26.395% when pulling c98a38fc2c6389095a555d2f6f9c7ad5048ef0bc on zacksinclair:master into 7b8a4ec0caabf49b01756981e65ad7961c9d3d23 on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.395% when pulling c98a38fc2c6389095a555d2f6f9c7ad5048ef0bc on zacksinclair:master into 7b8a4ec0caabf49b01756981e65ad7961c9d3d23 on grommet:master.\n. \n\nCoverage increased (+0.004%) to 26.388% when pulling c2654feb9af662aff20d13a9ca931dda5b562f10 on zacksinclair:master into 7b8a4ec0caabf49b01756981e65ad7961c9d3d23 on grommet:master.\n. \n\nCoverage remained the same at 26.384% when pulling c3451514bff664507481be311c313ee783fad95a on raphi011:BUTTON_TYPE_ENABLE into 7b8a4ec0caabf49b01756981e65ad7961c9d3d23 on grommet:master.\n. \n\nCoverage remained the same at 26.388% when pulling a443a529dd13bf7ad891526d13bdf6125c16136f on zacksinclair:fix-split into 82566fbb4f1b87f709022337a791695830c106df on grommet:master.\n. \n\nCoverage increased (+0.004%) to 26.393% when pulling c0796ccfdafff1ece2c5ee83a9d81281c2105c70 on ADD_HOVER_SUPPORT_BUTTON into 82566fbb4f1b87f709022337a791695830c106df on master.\n. \n\nCoverage increased (+0.004%) to 26.393% when pulling cc7a56601dadb0f2d4e68934890deaa45f0e6ba2 on ADD_HOVER_SUPPORT_BUTTON into 82566fbb4f1b87f709022337a791695830c106df on master.\n. \n\nCoverage decreased (-0.008%) to 26.381% when pulling 315f189ed9499bdf949e9e2df25fe7463987863b on ADD_HOVER_SUPPORT_BUTTON into 82566fbb4f1b87f709022337a791695830c106df on master.\n. \n\nCoverage decreased (-0.01%) to 26.376% when pulling 783d74e78f941c6c598fa71337b1134bb1a8b79c on ADD_HOVER_SUPPORT_BUTTON into 82566fbb4f1b87f709022337a791695830c106df on master.\n. \n\nCoverage increased (+0.01%) to 26.388% when pulling 1858febe95e9830a534315ca0af62d5223e56b8f on linde12:master into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.388% when pulling 74a387d0428b4cb3bd862cd4936c9c9e549f4549 on linde12:master into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage remained the same at 26.376% when pulling f847935b4c25a237e5d7fc2ade120f8b143a1d20 on nathanstitt:autocomplete into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage remained the same at 26.376% when pulling e8072552ae3d00c585e364553bfc5e9e3aca87fe on nathanstitt:autocomplete into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage remained the same at 26.376% when pulling e8072552ae3d00c585e364553bfc5e9e3aca87fe on nathanstitt:autocomplete into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.369% when pulling 76c3e04da8bb46496b0e0d3a1dc0f5946b3b9de0 on jagruti-vichare:TABLEROW_DISABLE into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage increased (+0.08%) to 26.452% when pulling 96380ded66634cf27d01a93b54268986ea3cc67f on jagruti-vichare:TABLEROW_DISABLE into d2640c1f58dbd2f6f012e2911c48aed38c3a44f8 on grommet:master.\n. \n\nCoverage increased (+0.007%) to 26.394% when pulling 756e592589ee2d84ff0d1c379f761489577390d1 on raphi011:ANCHOR_RR_V4_FIX into fc247e4d69347f69d4e57e9775320b73a175021d on grommet:master.\n. \n\nCoverage remained the same at 26.388% when pulling 0737703d981765492ff6ce97dfdaddc0248f0d20 on aandr:aandr-select-fix into fc247e4d69347f69d4e57e9775320b73a175021d on grommet:master.\n. \n\nCoverage remained the same at 26.388% when pulling a4fea6eef6f5eb558b480b794928462cc7ac276b on nathanstitt:fix/doubled-margin into fc247e4d69347f69d4e57e9775320b73a175021d on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.392% when pulling e7efcb597e707a3e9b2e7622adb612d6b9c4bf92 on SuhairZain:external-prop-types into 8dfaa50c98b90e5dbb8737c21fa16f642ef50d89 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.392% when pulling adf775233e8a51a9128acc53e1f11b47765bdbfc on SuhairZain:external-prop-types into 8dfaa50c98b90e5dbb8737c21fa16f642ef50d89 on grommet:master.\n. \n\nCoverage remained the same at 26.394% when pulling 7c858ae6b0796ed513f4a53c6fdd48cbbad815f8 on SuhairZain:master into 8dfaa50c98b90e5dbb8737c21fa16f642ef50d89 on grommet:master.\n. \n\nCoverage remained the same at 26.394% when pulling 4d03dd97eca9f25d81d27d50be99f2445f28adff on SuhairZain:prop-types-migration-no-icons into c62bcf3e997dd9d28e1e169626e99a6d54ff3ad2 on grommet:master.\n. \n\nCoverage remained the same at 26.394% when pulling fb18fdcd1a2e8428b1140c5b9991ea79765b0033 on SuhairZain:router-isactive-deprecated into c62bcf3e997dd9d28e1e169626e99a6d54ff3ad2 on grommet:master.\n. \n\nCoverage increased (+0.3%) to 26.653% when pulling 3e8cda2c3a204d86c38138aeb9c91c7d358b6c8b on mangoslicer:HotSpots into 3d1f2fc7b59038410c5874086435838a83e8e047 on grommet:master.\n. \n\nCoverage increased (+0.002%) to 26.396% when pulling 0a7c8bea25a3ee0173743bf85ac4008e18e63b0b on BUTTON_BOX_FEATURE into 3d1f2fc7b59038410c5874086435838a83e8e047 on master.\n. \n\nCoverage increased (+0.002%) to 26.396% when pulling 354a4468d8663978e1c7cb67dd8f4bab1dc34021 on BUTTON_BOX_FEATURE into 306249ad77bab6a29f90028c70907ad25cca939e on master.\n. \n\nCoverage decreased (-0.002%) to 26.543% when pulling 1b47cd63a3bfe6f34535325d064e2f00108c6a85 on adai183:feat_rc_dropzone into d3408cf421f1f7c0357e2aa37b647c0f46244225 on grommet:feat_rc_dropzone.\n. \n\nCoverage decreased (-0.005%) to 26.392% when pulling d1e1a1aa86196d3524af1fa32ecbc5e1415e09ab on cblair:FIX_TABLE_HEADER_ROWS into 0d05ba112fdd05b362fba6944111422eea8c6403 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.392% when pulling 0244f6d9c78b94d85136e3eda7890e4961a53d05 on cblair:FIX_TABLE_HEADER_ROWS into 0d05ba112fdd05b362fba6944111422eea8c6403 on grommet:master.\n. \n\nCoverage remained the same at 26.396% when pulling 9f8d4bab81b99c0d18e70acc448720543bc9030c on dgennetten:fix-long-label-checkbox into 0d05ba112fdd05b362fba6944111422eea8c6403 on grommet:master.\n. \n\nCoverage increased (+0.1%) to 26.538% when pulling 14df779f4a77d94c434927dc2844c0a1a3cbecb8 on feat_rc_dropzone into 0d05ba112fdd05b362fba6944111422eea8c6403 on master.\n. \n\nCoverage increased (+0.1%) to 26.538% when pulling 14df779f4a77d94c434927dc2844c0a1a3cbecb8 on feat_rc_dropzone into 0d05ba112fdd05b362fba6944111422eea8c6403 on master.\n. \n\nCoverage remained the same at 26.396% when pulling e789690b0c2c9b677de7ccc78e1c9fe3514d3f93 on woodm1979:formEditIconLocalization into 0d05ba112fdd05b362fba6944111422eea8c6403 on grommet:master.\n. \n\nCoverage increased (+0.009%) to 26.4% when pulling fb0c506515de6cb960c04a9c758476e5066ca5ee on dgennetten:fix-timestamp-ie-moment into 7db5360e1ae5476ca727ce8732cfb57a384541d0 on grommet:master.\n. \n\nCoverage remained the same at 26.392% when pulling f15c5c11819a5524a0d810bbad859110af29aedc on ADD_FULL_KEEP into 7db5360e1ae5476ca727ce8732cfb57a384541d0 on master.\n. \n\nCoverage increased (+0.004%) to 26.396% when pulling 30403ee29a8eee634e6129f248174f646a6ad49c on ADD_FULL_KEEP into 7db5360e1ae5476ca727ce8732cfb57a384541d0 on master.\n. \n\nCoverage remained the same at 26.392% when pulling 69aa4ca5af96a8571672e25c684ca4ee71fadd1b on nathanstitt:box-justify-around into 7db5360e1ae5476ca727ce8732cfb57a384541d0 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.517% when pulling dfe2a01ad11a473fab7a852b43394ce461c68d6b on dgennetten:fix-checkbox-label-clickable into 090cbaebf3da15010fd3f00556de1375be6794c7 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.397% when pulling e650837251a330fb3a61fca6bddd0d025bcbda64 on dgennetten:fix-checkbox-label-clickable into 9f987ddaffffe3da28611336eb534da34549d2ce on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.516% when pulling 293da0d98d52477a4359ae834446d646cf4f2e58 on dgennetten:fix-carousel-infinite-false into 090cbaebf3da15010fd3f00556de1375be6794c7 on grommet:master.\n. \n\nCoverage decreased (-0.1%) to 26.406% when pulling 42a1917f9fc175a649c2e738ca620e0ae31af65b on dgennetten:fix-carousel-infinite-false into 090cbaebf3da15010fd3f00556de1375be6794c7 on grommet:master.\n. \n\nCoverage increased (+0.002%) to 26.533% when pulling e24a6fc0e56377fd7c8dd06028ab8f1fa5f57f4f on vgmoose:master into 090cbaebf3da15010fd3f00556de1375be6794c7 on grommet:master.\n. \n\nCoverage increased (+0.02%) to 26.546% when pulling 4dbfdf76eb3ff75d872c6709c899b33a0da9e7bb on ahappypie:master into 237b4815ce2904a1465e0ea0cffc92c4a11bb872 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.397% when pulling cb51da2770ba84a81bc0157249068fa9b38f4346 on leonardodino:cmd-click-anchor into 1098c8f016dfffadce477865e63414f4364b9309 on grommet:master.\n. \n\nCoverage increased (+0.007%) to 26.411% when pulling a6c30b613a4d56cc5d816ed1911ab40543073bbb on world-map-places into 1098c8f016dfffadce477865e63414f4364b9309 on master.\n. \n\nCoverage decreased (-0.007%) to 26.399% when pulling 4d051e3462e0d7d2b396d14f2741b764079ca30c on leonardodino:cmd-click-button into d2f920a1dffab9f0f7ec312aa183ebc6d1b05cf5 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.392% when pulling 6fb0e1b83c70f506f330fd173e22d499a2da63f0 on Slumber86:carousel_fix into d2f920a1dffab9f0f7ec312aa183ebc6d1b05cf5 on grommet:master.\n. \n\nCoverage increased (+0.004%) to 26.41% when pulling 21338ee3c1464cba3250b64903ead35990c18295 on Slumber86:carousel_fix into d2f920a1dffab9f0f7ec312aa183ebc6d1b05cf5 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.401% when pulling ed7f89b50528f711ec4d056b53a2239ad0c356d1 on Slumber86:carousel_fix into d2f920a1dffab9f0f7ec312aa183ebc6d1b05cf5 on grommet:master.\n. \n\nCoverage remained the same at 26.397% when pulling 155b4317cd83d29d8bbc074fb8f3a19a4bea4d9c on m4rcelofs:master into f2ea61eea41febe173b217b18a762065de3862c2 on grommet:master.\n. \n\nCoverage remained the same at 26.418% when pulling c33dde8a178015e758a98faef3fe4ef4742b02fe on mturley:master into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.456% when pulling 94637a8e5bfdfb5790c70c9626272e7d8ee9b36b on mturley:master into 9fcc7050ce882697811b467a70c4dd7bb7cfe8bc on grommet:master.\n. \n\nCoverage increased (+0.04%) to 26.456% when pulling 6d142121084af8b1b2f2a0bb8cc19669877616ed on mturley:jsxLoginErrors into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage increased (+0.04%) to 26.456% when pulling b874ae1a99ca789ee7ec89e0b4bf6e576a07cdb9 on mturley:jsxLoginErrors into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.418% when pulling 0561700a6d813de0f7cf66a1959cde75f2504bc7 on alexovit:master into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage increased (+0.04%) to 26.456% when pulling fbe788b2013836e3a9006b7bd6c120a141df9037 on alexovit:master into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage increased (+0.04%) to 26.456% when pulling fbe788b2013836e3a9006b7bd6c120a141df9037 on alexovit:master into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage increased (+0.04%) to 26.456% when pulling fbe788b2013836e3a9006b7bd6c120a141df9037 on alexovit:master into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.418% when pulling 74b67b04c8bdd18e4afb3cc4565bc0d652dbbed3 on StevenXL:set-full-to-true-if-fit-on-image into aa1a86d82bdd64a2aa3b05918d1718249e6dd7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.418% when pulling 38d59f5cec6dc88c8b9a93df09e81ec80a582b2e on jagatjeevan:master into 41856853d46f8c456e4a779402e9f62823565897 on grommet:master.\n. \n\nCoverage remained the same at 26.456% when pulling dc0cad58322aa105d98c488dad1eacf9add50995 on cherih:master into 3190c2503cc62612aa3751ab088b776cf75f71fe on grommet:master.\n. \n\nCoverage remained the same at 26.456% when pulling 3f187040925e44f7c0db886e49a7b4ab025fd7b0 on przytrzask:master into d1c8e47351a68984103819d206412729149555a2 on grommet:master.\n. \n\nCoverage remained the same at 26.429% when pulling 5f85ef3a84e9419e87cca6b08ea7d4422f8eebdb on StevenXL:clarify-anchor-docs into c31d7d106f2f5c580bcf5370320a703b68014342 on grommet:master.\n. \n\nCoverage remained the same at 26.429% when pulling 5f85ef3a84e9419e87cca6b08ea7d4422f8eebdb on StevenXL:clarify-anchor-docs into c31d7d106f2f5c580bcf5370320a703b68014342 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.425% when pulling 29f13ff78dcacdd4b19a63630d72d005168dc608 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.425% when pulling f3c1e076d74e7e466139f8443bd35bface158043 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.425% when pulling f3c1e076d74e7e466139f8443bd35bface158043 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.425% when pulling 8083afcc78891e9c114f77cd61bfb7a14c854c00 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.05%) to 26.379% when pulling e8aae23055afdf88dca0aad8931c7185b490e897 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.05%) to 26.379% when pulling e8aae23055afdf88dca0aad8931c7185b490e897 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.04%) to 26.387% when pulling e6c13ce83db857de76428909a594d3cf4687bf49 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.04%) to 26.387% when pulling e6c13ce83db857de76428909a594d3cf4687bf49 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.05%) to 26.382% when pulling a442e55f3a0bd4dd1b29db7a2e985db507ada226 on shai32:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.427% when pulling 9c6f321e960f0de7e0e2181497925d5e4a53e561 on linde12:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.427% when pulling c49019008af01ae5916d2b778aac6d161cd4a614 on linde12:master into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.422% when pulling c28630ae69f58d4d5158ceb466caf0b509d1eb40 on ErinOC:animate_fix_undefined_parent into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.422% when pulling ed981eb922c254a4c3be19c2576045d74f1d4e72 on ErinOC:animate_fix_undefined_parent into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.422% when pulling be2dd68bf41766c1af5962f2e4a094da0523b9c8 on ErinOC:animate_fix_undefined_parent into bcfd646b287d42a09b63c794ab2d505a9c87dcb3 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.486% when pulling e45e2d225aaac7dd88fd0e65c0bd9585d28a2249 on comaeio:menu_focus into 2162e514f783f628a278d3720bbbe0f56f90f689 on grommet:master.\n. \n\nCoverage increased (+44.6%) to 71.049% when pulling eddba220e4b1b64ede3ca0070054d473580c94e1 on arjunbm468:Coverage into 74c060d93543be4a67364f0371e9971691fdabbe on grommet:master.\n. \n\nCoverage increased (+0.008%) to 26.392% when pulling f077866e99f08c5dbe0d83583305b065cdc6fdde on drewlustro:dl/select-input-renders-react-component into a989b53491d272a932de0a6ce80dcb4ae5dc7262 on grommet:master.\n. \n\nCoverage increased (+0.008%) to 26.392% when pulling dea3f46b5cd45ab49c71a6906c089b6b448de8cc on drewlustro:dl/select-input-renders-react-component into a989b53491d272a932de0a6ce80dcb4ae5dc7262 on grommet:master.\n. \n\nCoverage increased (+0.007%) to 26.398% when pulling 09c48aa9b1b1c10ecc7b40e549c53a99efdfe38d on przytrzask:master into c281e929092b915cfbdc6b649ee4e69aa357c459 on grommet:master.\n. \n\nCoverage remained the same at 26.392% when pulling 7408897d60393e12e85dd63bb7f69bd1474d5551 on jlevesque:master into c281e929092b915cfbdc6b649ee4e69aa357c459 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.382% when pulling 660c7bbab9bc28b19a3effca66714c082fbabf6d on j0nas:export-passwordinput-component into 4d4ebd2fa5e71aac4d31f4bc9479048c567927a9 on grommet:master.\n. \n\nCoverage remained the same at 26.382% when pulling 07ab0732063319d1115b2299b3722f933551a431 on jlevesque:master into e26e7aaa78a7f744775dd03ea7abcb2431cca356 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.375% when pulling 9a49108802e9fb63dce95428557e5e40c62fa2b6 on j0nas:add-russian-translations into 50e949361527ff50760bf4d64e4e30f328dd001a on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.375% when pulling 0cca781fe7a42f9e340720b7660be29c1cb3439b on jlevesque:master into 8a8760a5ca12894868317c8b99d4a677294622fa on grommet:master.\n. \n\nCoverage increased (+0.03%) to 26.413% when pulling beb27dcc2b23f6505a148c03e3ccdc362cfc5503 on pho3nixf1re:tableheader-options into 8a8760a5ca12894868317c8b99d4a677294622fa on grommet:master.\n. \n\nCoverage remained the same at 26.401% when pulling 66a45d86e56c79d4fa9e96176f7e8731993546b6 on alampros:docs-fix-anchor-nan into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on grommet:master.\n. \n\nCoverage remained the same at 26.401% when pulling 2b3a6997c4c96ab0d6b50055e236e1d86e8b2f83 on Thuranel:master into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on grommet:master.\n. \n\nCoverage remained the same at 26.401% when pulling 51f52389de91fb2796d0e4c978ed76667560415c on Thuranel:button_ctrl_click_fix into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.414% when pulling b70e86cf01a812c8e4f8aa33f119c5c4e3393f4c on XuluWarrior:LOCATION_STATE into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on grommet:master.\n. \n\nCoverage remained the same at 26.401% when pulling d7dde79265cc850d55e63d2005a5c11cf8df7377 on FIX_INPUT_BORDER into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on master.\n. \n\nCoverage increased (+0.4%) to 26.79% when pulling 701c5f497716fbfc37c7767b5bd04de0e8cc9e54 on FIX_INPUT_BORDER into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on master.\n. \n\nCoverage increased (+0.4%) to 26.79% when pulling 33808f2b870d8100ee2df6b556e8f33ab73f83f4 on FIX_INPUT_BORDER into edd72a2e2d06204ead0f5b55ee75fa5eb621bfdb on master.\n. \n\nCoverage increased (+0.4%) to 26.785% when pulling 93e2a069d48be9b3695b64c80b0822e8d65c384e on world-map-geo-flags into d9f071b84e7db3318cbea21c1b7d93ff5a5e8c10 on master.\n. \n\nCoverage decreased (-0.0006%) to 26.784% when pulling 7657b14134e5d6cba9aec3962ef5891838ff180a on Thuranel:button_submit_disabled_fix into 188858b43d4d0ecfcab4e87fa5aaa2a52e70db1b on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.772% when pulling f289d104418a54495229f1381931ce4d398fd699 on Thuranel:button_submit_disabled_fix into 188858b43d4d0ecfcab4e87fa5aaa2a52e70db1b on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.799% when pulling 47ffa011445c599233f2274b2ff279d52ee66f14 on world-map-latlon into 188858b43d4d0ecfcab4e87fa5aaa2a52e70db1b on master.\n. \n\nCoverage remained the same at 26.79% when pulling 053f65f83e3ab0e3c1a9a53a0557283e13f9ea36 on text-input into 22ff8308e634829a519010826664ab6cf341a6ab on master.\n. \n\nCoverage remained the same at 26.79% when pulling d8fc232e8d50dd7219de16fb33b3b939d78cf004 on dgennetten:kdg-divit13-1227-meterCrop into 44555953f3f38a96e2f2a7dcca3a9eeb26a2646f on grommet:master.\n. \n\nCoverage increased (+0.006%) to 26.796% when pulling 7e8c07ca597d624439ee9d551bf570f5c08499f4 on fix-anchor-click into d126449baf705b4d73be77d94dbf308a1cf26269 on master.\n. \n\nCoverage remained the same at 26.79% when pulling 2122ed57a65cec9f22ce3a669892d6be7068d8ab on fix-ie-edge-icons into d126449baf705b4d73be77d94dbf308a1cf26269 on master.\n. \n\nCoverage remained the same at 26.79% when pulling 3a405c6ab69bdc3f13c97c2b9598c9203a24c8b3 on fix-ie11-spinning into d126449baf705b4d73be77d94dbf308a1cf26269 on master.\n. \n\nCoverage remained the same at 26.79% when pulling 90132e4ca04fd5fb2621757f1dae21b5f0a6c0a7 on fix-text-input-suggestions-array into 39fcd290e728fe2b4af121e953e326bf6c605861 on master.\n. \n\nCoverage decreased (-0.002%) to 26.782% when pulling 07456164852c66c07f75ae0c224cd8003dd09e58 on deprecate-card-markdown into 2c789f887c236ce745790803393c45c6198fe726 on master.\n. \n\nCoverage increased (+0.002%) to 26.777% when pulling e9b4a122aac408f85646c6be18ca9c1fd8c6e4de on fix-search-onselect into d2de88f813a6b56db5bc957a0d868b8a4bd72d92 on master.\n. \n\nCoverage remained the same at 26.775% when pulling 6a4fb8269e58630838c8705ae9a6342fcc173735 on fix-button-plain-icon into d2de88f813a6b56db5bc957a0d868b8a4bd72d92 on master.\n. \n\nCoverage remained the same at 26.772% when pulling 07cdd8ff6d336c124d4dcb5872c1051a0fc9476f on fix-compact-form-checkbox-radio into 95cc6f202a4e61ac1f302ac8ea8b58a7440480ab on master.\n. \n\nCoverage decreased (-0.002%) to 26.77% when pulling ec1597d03500868be7c89fbebd215706575d6dfd on fix-compact-form-checkbox-radio into 95cc6f202a4e61ac1f302ac8ea8b58a7440480ab on master.\n. \n\nCoverage increased (+0.03%) to 26.803% when pulling 95f79ad7e02a7e8a02da09bfe3fce2f452348679 on fix-compact-form-checkbox-radio into 95cc6f202a4e61ac1f302ac8ea8b58a7440480ab on master.\n. \n\nCoverage decreased (-0.002%) to 26.77% when pulling e609a87039df01f84481933249078d91df95a72c on fix-menu-anchor-path-dom-bug into 95cc6f202a4e61ac1f302ac8ea8b58a7440480ab on master.\n. \n\nCoverage increased (+0.006%) to 26.776% when pulling c744b3a9e8dc494c21797e0f5e9ea784b5595bef on fix-tile-select-background into 4a4e3963ff24a44b2658c6f0b7ad1b7bac6055f2 on master.\n. \n\nCoverage increased (+0.03%) to 26.803% when pulling 08f9ed09c2dd59228a4dfed1aa64f9c60063c5ae on fix-tile-select-background into 4a4e3963ff24a44b2658c6f0b7ad1b7bac6055f2 on master.\n. \n\nCoverage decreased (-0.007%) to 26.796% when pulling a082624a398332a3f34921738fa0376fff48a11d on taktakhq:master into f670b4d05b2af35aa673dd1dd8b76032c79ed7c7 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.796% when pulling 7bd51277734211f3c285e46f4a2d030ec48dc7ee on taktakhq:master into f670b4d05b2af35aa673dd1dd8b76032c79ed7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.803% when pulling 49b79363428784be1ba89ac9a8c383cf5c7880fa on srallen:menu-classname into f670b4d05b2af35aa673dd1dd8b76032c79ed7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.803% when pulling b53ccea04c3374ab60b0bc0d2d0f832f4b7ffef5 on srallen:menu-classname into f670b4d05b2af35aa673dd1dd8b76032c79ed7c7 on grommet:master.\n. \n\nCoverage remained the same at 26.803% when pulling f78bd0c53119637ad6430d1fec6ed5ceb6ce9df5 on srallen:menu-classname into f670b4d05b2af35aa673dd1dd8b76032c79ed7c7 on grommet:master.\n. \n\nCoverage decreased (-0.04%) to 26.775% when pulling 81d6c1ef7be550984083b6872298c7f149f138a4 on FIX_TABLE_MIRROR into bc7f04bb54a1ddead0fd436bb6635f6056dd649e on master.\n. \n\nCoverage decreased (-0.04%) to 26.775% when pulling a1d6ac5f908256e59666bb0379497a4f5ce816a2 on FIX_TABLE_MIRROR into bc7f04bb54a1ddead0fd436bb6635f6056dd649e on master.\n. \n\nCoverage decreased (-0.04%) to 26.769% when pulling b7bd0069b9764c779551dc1fa52d7d4057069628 on FIX_TABLE_MIRROR into bc7f04bb54a1ddead0fd436bb6635f6056dd649e on master.\n. \n\nCoverage remained the same at 26.775% when pulling dd90880f1f36e5abc84aa9c488d72f939793d5ca on fauricioRojas:variable-toast-duration into a8ab7ed326bbadffc791f83e6e35dd922750df06 on grommet:master.\n. \n\nCoverage decreased (-0.005%) to 26.77% when pulling a739535fd526109c937f13aba8a37e484e10b65f on atanasster:master into a07aeca9316f0e52a40a725d8d7b935f66c37756 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.761% when pulling 8301b1178fe4efbe0ed17abb1300c0c6a752e388 on atanasster:master into a07aeca9316f0e52a40a725d8d7b935f66c37756 on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 26.761% when pulling cde2c0268495fc2a806e257eebf697aad4b57788 on atanasster:master into a07aeca9316f0e52a40a725d8d7b935f66c37756 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.751% when pulling f58b0d115a4580a62ad86cadac5ac5b8f5461fda on atanasster:master into 2f4b1adb615ec23a2de8704a2f75e7ff42931d2a on grommet:master.\n. \n\nCoverage increased (+0.005%) to 26.78% when pulling 5b630c3fba041c71c05d7f827fb825bca7751d22 on remove-card-markdown into a07aeca9316f0e52a40a725d8d7b935f66c37756 on master.\n. \n\nCoverage decreased (-0.02%) to 26.751% when pulling a4e547cded529fbb544e1282425e6aa05236f17c on dxc-theme into b0345aba3643b46b594ce72e90cc3d88e5e567bc on master.\n. \n\nCoverage remained the same at 26.751% when pulling bbde480d9f7df86adbd173628f154cd2aac8b462 on SELECT_ID_FIX into cb5d3948a3cda5da3702821d4aa2ff21a30f8130 on master.\n. \n\nChanges Unknown when pulling 46bf6f7ee35efcda5f54a11b038d08737308cbf1 on FIX_TILE_LINK into  on master.\n. \n\nCoverage remained the same at 26.758% when pulling 5d148f75d74e4365974f94114ff95b54366a623a on dgennetten:kdg-Fix-status-icon-css-1652 into 5a3343a7813d769b6b8e77ee78caa5599f5d6558 on grommet:master.\n. \n\nCoverage remained the same at 26.758% when pulling 4e29024fb80432b4ccca1ab3e5d10ca0e9463049 on dgennetten:kdg-Fix-Toast-Font-1662 into 2f4b1adb615ec23a2de8704a2f75e7ff42931d2a on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.751% when pulling 1e71ab398a6c0206ce09a01c427b65010c4eb166 on dgennetten:kdg-Fix-Toast-Font-1662 into 2f4b1adb615ec23a2de8704a2f75e7ff42931d2a on grommet:master.\n. \n\nCoverage remained the same at 26.751% when pulling e53b7aba838895f0baaef56ce37cdea21aeaaa20 on dgennetten:kdg-Fix-heading-margins-1668 into 8b2f95252053e8717779f48ccca528de5c0651a5 on grommet:master.\n. \n\nCoverage remained the same at 26.751% when pulling aaad617183bb48f3e48aff5652102a55cd2795d7 on dgennetten:kdg-Fix-select-multiple-in-forms-171 into 03fc2cc16063d856cdef3fbd1fe5e6cb99b76210 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.748% when pulling 88544d7977b74471fa97a4d1a709bb3de83a3b28 on dgennetten:kdg-Fix-search-exception-mobile-1707 into b521838c8590a9dcf7b4384f2400bcd1cb866df2 on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.761% when pulling bbfd736ad718a929918ee25978bf309b3cf3510e on przytrzask:master into 3ac65f12f1c3add8f83ed4b9de16e73224b17c5a on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.761% when pulling 70c37ccfc6e031a72b8e6cefa308ac7475ef4ee1 on przytrzask:master into 3ac65f12f1c3add8f83ed4b9de16e73224b17c5a on grommet:master.\n. \n\nCoverage increased (+0.01%) to 26.761% when pulling f20a40f6f436c1394416372e8a3e00ab320801a8 on przytrzask:master into 3ac65f12f1c3add8f83ed4b9de16e73224b17c5a on grommet:master.\n. \n\nCoverage remained the same at 26.748% when pulling 70310c96820fe09028d67957b653664771c2e7a0 on world-map-fix into 3ac65f12f1c3add8f83ed4b9de16e73224b17c5a on master.\n. \n\nCoverage remained the same at 26.748% when pulling 70310c96820fe09028d67957b653664771c2e7a0 on world-map-fix into 3ac65f12f1c3add8f83ed4b9de16e73224b17c5a on master.\n. \n\nCoverage remained the same at 26.748% when pulling 34d919e05fd90c51e47a45f2c2511e9b2240e9c1 on comaeio:master into b5c4ab04c3c9dd6ce835c49d3945f1f111fc26c1 on grommet:master.\n. \n\nCoverage remained the same at 26.761% when pulling 92d50b6b30b3d33ba82db848eb76410b04afd2da on probablyup:es-upgrade-markdown into 68fb633e9fcd2d7e571f2760e3414775cd4497ff on grommet:master.\n. \n\nCoverage remained the same at 26.761% when pulling ec7d2f6742781c157001e966d6114e3fadc93272 on FIX_HEADER_ALIGN into 68fb633e9fcd2d7e571f2760e3414775cd4497ff on master.\n. \n\nCoverage remained the same at 26.761% when pulling f0cbf796f92326389d99bce6d959be10d4f0e077 on shai32:patch-2 into 68fb633e9fcd2d7e571f2760e3414775cd4497ff on grommet:master.\n. \n\nCoverage remained the same at 26.761% when pulling 68481469df539cf1eff1bef4396bbd6789cf8b1b on toast-status into 68fb633e9fcd2d7e571f2760e3414775cd4497ff on master.\n. \n\nCoverage remained the same at 26.754% when pulling 1bd969150736f39390dd0c88ea49771d70c645b3 on Thuranel:master into 203de56f2e88007aa6e21bc090a3dc368f7a5d2b on grommet:master.\n. \n\nCoverage remained the same at 26.754% when pulling 40dd226a953026b36f1e58b3fe2606f5549f1b3c on epilande:ie11-fix-world-map into 203de56f2e88007aa6e21bc090a3dc368f7a5d2b on grommet:master.\n. \n\nCoverage decreased (-0.03%) to 26.727% when pulling 780fdf3f79161ccf89ce5451680e42fc0a438a34 on epilande:ie11-fix-world-map into 203de56f2e88007aa6e21bc090a3dc368f7a5d2b on grommet:master.\n. \n\nCoverage decreased (-0.03%) to 26.721% when pulling d281f8acbb6968c8a84c2383b3ca7d19841721f3 on layer-close into 203de56f2e88007aa6e21bc090a3dc368f7a5d2b on master.\n. \n\nCoverage increased (+0.03%) to 26.753% when pulling ba5517ed421da748bd7c1a36045e93bf36ba404b on cookies into b9e6861d316977a51d1d5f6cbe9e8e18be1d6848 on master.\n. \n\nCoverage decreased (-0.03%) to 26.727% when pulling ead2959339c68ecfa860b16c794668b15f648441 on form-input-css into c5337762c1b891ad58caa57b4f3b352363c0eb57 on master.\n. \n\nCoverage remained the same at 26.727% when pulling c22939ad5625736b46612f9c448e353f39344935 on chart-single into 7a012d5fc5024650982cbc03722b52e68b515640 on master.\n. \n\nCoverage remained the same at 26.727% when pulling 231e5deb490d0166c1f9df1f42a1d60ab96f22d3 on atanasster:video_events into 93018d5f6ce3937350f83498e09ac472e764bfb3 on grommet:master.\n. \n\nCoverage remained the same at 26.727% when pulling cf6249214d5fe815b462ba4ef9d00d4ce0b369ed on jozsi:master into d4cc28331a903b16ea8d0829ca79bbb51e14541f on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.724% when pulling e01fda5165907160b10b055ced0af9dbb1206ae9 on jozsi:patch-1 into aa246193e351a64f02e183a631e740176e925fab on grommet:master.\n. \n\nCoverage increased (+0.03%) to 26.75% when pulling 2cf00053bb07c9d48e1d67cc5f06eff33bda8974 on fauricioRojas:toast-unknown-prop into 1e56f31ec91430fc76e4333f59eb53adeecec0d1 on grommet:master.\n. \n\nCoverage decreased (-0.007%) to 26.717% when pulling 1a140016aacec806dc650be36a377e02a4592e6a on atanasster:drop_with_hidden_control into 1e56f31ec91430fc76e4333f59eb53adeecec0d1 on grommet:master.\n. \n\nCoverage remained the same at 26.717% when pulling 46ee7463ab4c9e2efbeaf1fe24c12352803d1a2a on gabiseabra:gabiseabra-patch-1 into 4faf4898e2d1c7dcfb2c5760bfe23775e9964e81 on grommet:master.\n. \n\nCoverage decreased (-0.002%) to 26.715% when pulling b44c31c818b579618d65ebab37acbe86ad4df383 on select-custom-value into 4faf4898e2d1c7dcfb2c5760bfe23775e9964e81 on master.\n. \n\nCoverage remained the same at 26.748% when pulling 3c8a32232a2e3cdfc15f5b1be7a9cad9bbe4e8c2 on atanasster:drop_z_index into 90fd7d39a475dc866be7581ea73ba0b807c0d266 on grommet:master.\n. \n\nCoverage remained the same at 26.748% when pulling 53904a3bdeafdd8286405b1c1a05ff1189c87066 on styles-reorg into f86262182e77bf8731f5c457d154913ac363d72f on master.\n. \n\nCoverage decreased (-1.07%) to 25.68% when pulling 3c6355b9759cf6602343ac2f3a77de3deacf6c99 on add-stale-bot into 0301c0dba7f7b395cf4598a470a7b0e99a0a928c on master.\n. \n\nCoverage remained the same at 25.68% when pulling fd3dca7846fffdebb18b369e81cb9ee7edeec465 on amaurymartiny:am-dxc-min into 904bc8a7bf858771909329faba7d0d872c77ecce on grommet:master.\n. \n\nCoverage increased (+0.006%) to 25.686% when pulling e043e92738dba1c5629cd13c4d1ce16f75a5e6a1 on miguelemosreverte:master into a15333c2726a31763e6adfb27c30bed25d489d8f on grommet:master.\n. \n\nCoverage decreased (-0.004%) to 25.682% when pulling f728c734bde24542424fc9fabd666687c63d0a78 on lBeJIuk:Layer_bugfix into 6bf3af7ca53258a3be7381b2522ef44d250c0eff on grommet:master.\n. \n\nCoverage decreased (-0.03%) to 25.651% when pulling 395c2cc4e139f1b778545746ae21742777ff99a8 on RobertGary1:master into 8fa2b4e28e9dbf874edb0721bf9dc7854f2c31cd on grommet:master.\n. \n\nCoverage decreased (-0.004%) to 25.678% when pulling 2c2ef73a8376b41d5f1f50fc0f1072d8a7f6ab2e on RobertGary1:rmg-testinput into 8fa2b4e28e9dbf874edb0721bf9dc7854f2c31cd on grommet:master.\n. \n\nCoverage remained the same at 25.682% when pulling 3a356c6dcdbfbc95809b37ff2694bc5f4804ab85 on class-prop-support into 33c6e5d483dfcb5861fe4a0235b9e91d49fcd5b7 on master.\n. \n\nCoverage remained the same at 25.682% when pulling 6198426ff807a1fe075b6aee8ecdd6221ebce823 on justinglibert:patch-1 into 7445b88b538f911535b2bf120cd6329c9c0b3077 on grommet:master.\n. \n\nCoverage remained the same at 25.678% when pulling 7fe9b8066cf29ed51a2dcfb222d476b960415c28 on Morkalork:master into 9d46bab9cc8506fe7cc3899c6ea4b973258e3ff4 on grommet:master.\n. \n\nCoverage remained the same at 25.678% when pulling 530b0408851bb798839f8b3795bbda26fdb00cb8 on luvsharma19:patch-2 into c166747d6ec2799ebe422a53cdedec189502563c on grommet:master.\n. \n\nCoverage decreased (-0.01%) to 25.667% when pulling 66d26ee70a372c0283a7d10fb99a66ff0677f581 on RobertGary1:rmg-menufloat into 915a87c165830023c14df838c2c7508157d549da on grommet:master.\n. \n\nCoverage remained the same at 25.966% when pulling b39f2d51b68d2dfd66ed9ddd6e6869a9c97e79c4 on JoshK2:patch-1 into 8181f35f997b6ff9a49222a841a576113dd17343 on grommet:master.\n. \n\nCoverage remained the same at 25.966% when pulling 4c0bded4fc4f5400c6463954d01e4f27fef77298 on RobertGary1:rmg-notificationparams into 8181f35f997b6ff9a49222a841a576113dd17343 on grommet:master.\n. ",
    "nanndoj": "The problem is fixed by putting layer: false on file src/js/components/Search.js line 45. But I couldn't find any information about this property on search docs. What would be the impact of this change?\n.  I got the point @ericsoderberg . Updated my PR\n. ",
    "DanielZhu": "Thanks your quick response, @alansouzati \nI tested it again and it has been fixed. Cool. \nI think you can close this issue.\n. ",
    "tobias-flitsch": "This actually helped in file _objects.meter.scss\nscss\n &--vertical {\n    //...\n    // Never display the ledgend in vertical mode\n    @include media-query(palm) {\n      .meter__legend {\n        display: none;\n      }\n    }\n  }\n. Does box-sizing help instead of playing around with shadows?\n. Then what is the suggestion on this enhancement request to provide a strong property to value, similar to Heading that allows this to be controlled. Is the suggestion to use inline text instead?\nIn an application that we are building, we want to not draw attention to the value as it is not the most important element on the page. That means having the same text size and \"regular\" font weight: \n\nOr: https://codepen.io/tobias-flitsch/pen/MOEJBZ/. ",
    "L0ZZI": "This is great man! Is this the whole set of elements? I know in the Experience center there are some proposed layouts and patterns and grid stuff. Is it worth putting in the next iteration?\nMy only other initial comments are to have some supporting text/directions on each of the sections to point designers to the proper place to get the fonts, what colors should be used for different situations, and maybe some guidance around the larger components like header and search.\nI saw your team working on some stuff in Sketch, any chance we can have a version of this in Sketch. ;-)\n. Hey man, I would love to merge this but we've changed the directory structure for the design files, could you recommit the file to the new /design directory. I'll approve it and get it in there. Sorry for the hassle.\n. Merged: https://github.com/HewlettPackard/grommet/commit/1e6c95527d775421a68dcfb06a31485c107d9d28\n. Adding to Grommet v2.. I think we can merge the the Search and Search Inputs into a more ubiquitous design for Search.  I would suggest that we show suggestions when the property is present and the user focused on the field regardless of the field having a value or no value. If there property isn't present then we don't display the suggestions on focus. \nThe other aspect of the design is the focus highlight and the Search icon strength. The other suggestion I would have is to, on text input put a box of in the brand color behind the search icon, and/or change the color of the icon to be more vibrant on input. While making the search icon submit the input text.\nThis would simplify the design and  clean up the areas you highlighted. Let me know what you think.\n. Seems to have padding on the right side of the fields. but the logo doesn't seem to have pad.\n\n. Thanks for the heads up @rlbradey! This is a defect we're working on soon. Grommet is aiming at WCAG AA compliance which is a 3.0:1 contrast ratio. We are \"hopefully\" hitting this ratio for other styled elements like text and buttons. Let me know if we missed anything else. ;-)\n. Can you be more descriptive about what you mean by \"spring\"? Are you looking for the check to have some animation when something is clicked. Like draw the check or have the check animate in? Similar to Google's Material Design?\n. I'm seeing the pagination float over the Chapter Hook's footer causing overlapping text. I think we need to pull this back for v2. I'd like to see this get a little more refinement before we push it in with a day left. \n. Also if we do end up adding it in v1, let's not add the background to the navigation arrows, as i think that needs a little more animation and subtlety to hit the levels the Marketing folks want.\n. The Units in the our visualization components and the Value component will receive and updated styles sheet to support the Simple font. This means the developer will no longer be able to use Metric in it's place. And the implementation of Simple will require a text-transform=uppercase and some character spacing to make it compliant with brand.. Added to Grommet v2 plan.. Attribution: Carsten Schlipf\n. Design piece done. Transferring to @alansouzati!\n. Add fullscreen button and CC?\n. not for v1, but v2 we can design an example with these features. Adding to v2.. We're going to skip the example of carousel and modify the component to have a hidden pause button when play property is enabled allowing screen readers to read the interaction and allow users to play/pause the content. We'll also need to enhance the component to allow for the aria-label to be passed to the next/previous buttons\u2014Currently it does not.. Looking at the video...My expectation would be that only one item could be expandable at a time. That means that as a user clicks on another item in the accordion that isn't the selected item, the previous selection would automatically collapse. I'd prefer that the user doesn't need to \"manage\" the content. \nAlso, we need to change the icons from a \"+\" to \"tab-next\" and rotate it to a down position on expansion.\n. Yup, this looks good. The SVG could be cleaner, but that's more an artifact from the original export (I'll fix later). I'll make the change on the fictional icons export for future use.\n. !!!! v2.grommet.io !!!! Looks like we made it. Love looking back at tickets like this and saying done!. We have an approved design in place, but not implemented yet? We. don't have it aligned with a release just yet. Our soonest window for delivering the change is 1.1.0 scheduled for December 1st.. Assuming you're not asking for responsive icons...We're enhancing the icon sizes to align better across controls which includes enhancement to the \"small\" size and colorIndex implementation. Covered in, https://github.com/grommet/grommet-design/issues/33. Design has been proposed. Revising Icon Component implementation coming in  issue #1144.. In the wrong project. Closed and moved to Docs #237. Thanks Will! We are investigating and will enhancing Grommet's color implementation and documentation. This requires and evaluation of all themes so there is some design investigation needed before we can change the dev side.. Colors can now be chosen for specific need in v2, http://v2.grommet.io\nThe accessibility impacts are now on the developer/designer to ensure good contrast and readability.. \"Medium\" icon size is displaying properly. The \"small\" icon size does not have any styling behind it. We need to enhance the small size to handle icons less than the \"Medium\" size's 20px core (24px view box). This will be cleaned up along with other enhancements found on issue, https://github.com/grommet/grommet-design/issues/33. Alternate community solution, #1191. This is possible in v2 now!. Box should be able to handle this in v2. We might need a Tip Example to make sure it covers the use case.. @tracybarmore is this still occurring. I couldn't reproduce.. Closing at 2 week mark.. @woodm1979 did this resolve your issue?. No reply. Closing.. Can you confirm fix @ziflex?. Closing at 2 week mark.. We're doing some evaluation of the design of button's with icon, label and anchors with icon for better alignment. This is more of design enhancement than a defect. I'll close if there isn't any other feedback.. We don't have any plans on adding customization to the table styling in the near future as we try to keep the component styling to a minimum in keeping with Grommet's ethos. Changes to the table component styling could turn into a large area for enhancement. \nWould you have a use case that this change would support? What type of pattern/interaction would the color change make a meaningful impact?. @RyanCCollins any chance this is a V2 feature?. The Tabs component is meant to be restricted as making it a string opens it up to customization that would be hard control when responding down to the palm size. \nLet us know what you we're looking to achieve with it. Our goal is to keep the tabs execution very simple.. Thanks for sharing! I wouldn't classify this as an issue, it's more of an enhancement or a new component as the existing menu component functions as intended. The enhancement you're asking for will run into issues as well when trying to show many selected items within the field,  masking multiple values or having to grow the size of the field. Either way there will be a cost to enhancing the design. \nIf you could provide more context on the scenarios you're trying to support, tags, facets, etc please let us know what you're looking to achieve. We're happy to investigate and work with you.. @alansouzati did we get a chance to look at this?. v2 Examplem, http://v2.grommet.io/selection let me know if this resolves your issue @startupgurukul. Need to validate on Grommet v2.. @jfiala-cz any update on this?. Super weird. I'm seeing it in Chrome. Odd thing is when I shrink the browser window down to a smaller size the rows load but only for a second. I'd need someone at a higher pay grade to check it out. Maybe @alansouzati, @karatechops, or @ericsoderberghp can take a look.. So we're adding a new animation types to  Box in Grommet v2 that allow micro/macro animations on context like the icon. Let me know if that will work. We should have and updated v2 lib up soon, http://v2.grommet.io. I think we decided this is covered with Icons. ;-). Depricated in Grommet v2, Example added in backlog. #1820. Simplifying date/time to be a little more generic, but since it's already supported in the Control input types, we'll be making an example for it, not it's own component.. Not in scope for Grommet v2.. Open for someone to pickup and make an example.... Moving to later milestone as it's doable in V2, but not in scope of the core team.. We don't support this now in v2?. Deprecated.. Adding Table as an example app for V2. Tips are now going to be covered by Box in http://v2.grommet.io but will need a little help getting started @karatechops let me know if you want to build an example app of it for v2?. @RyanCCollins any chance you want to build an example of Toast in Grommet v2? Not the component, but try and use the new lib?. Depricated, replaced by Diagram component in Grommet v2 Lib, http://v2.grommet.io. Anyone working this?. I don't think it will change from it's current alpha state from what we've talked on. . It's a question for @alansouzati and @ericsoderberghp. Above my pay grade.. Did this get tied to a PR?. I'll assign @alansouzati to loop back with you.. Has this been fixed. The codepen example seems to work?. @karatechops you got a lead as to why? @ericsoderberghp you?. I'm gonna close it on the two of you if either of you don't respond....Hahahahahahaha ;-). Coming very soon. @alansouzati needs to make announcement to his fans.. Yup, dup.. Can you validate @karatechops ?. @noorisunique could you provide a codepen to validate what's happening in that image?. We need a little more detail to validate @noorisunique. If you could create codepen or give a little more detail we're happy to look into it. If we don't hear back we'll close the issue 2 weeks from now.. No reply. Closing.. Correct!. @karatechops can you add a PR?. Good catch! I have it flagged, but we'll need to verify it in v2. V1 it's open to community.. thanks @atanasster! Did this work @Thuranel?. Closing at 2 week mark.. No reply. Closing.. Can you check it again? I can't reproduce.. That's what I see. @alansouzati is that what he's supposed to see?. @alansouzati comment so we can close MR Add-on king!. Hey @RobertGary1 I think we met and covered some of this.. Closing this, and adding an action item to next conversation.. Ditto. Captured and closed.. Nice catch, we're seeing it in Grommet V1, and investigating this in V2. We'll tag it to see if anyone can take a pass at identifying and/or fixing it.. Thanks for the feedback. The Indent with the icons is due to the viewBox being larger than the icon so there is a larger click target for the element. Without offsetting controls like icons, we use the indentation to help parse the information semantically. It also gives us a nice pad when highlighting items in lists or menu component like this case. \nAs for the button spacing below the form, you can can control the spacing between which can be found here, http://grommet.io/docs/padding\nlet me know if this answers your questions.. Any chance you want to fashion this into a PR @SinHouse? Maybe @alansouzati has a comment on this?. Groovy. Thanks for the update, closing.... Could you be a little more specific about what version of Grommet your using?. No reply. Closing.. We're putting a lot of effort in the Grommet v2, http://v2.grommet.io have you tried the components there to see that they work as expected?\nIf you or anyone has some cycles in the community  we'll tag this one as \"help wanted\" and work with them on the PR. Let us know if this works?. No response from owner, closing.... Hey @mjsevilla did this answer your question. it's been sitting in our backlog for bit, so in 2 weeks we'll close if we don't hear a response.. @mjsevilla does this answer makes sense? Let us know if this needs further discussion.. Great catch. We'll investigate further to test the implementation but if you see an area to contribute we welcome Pull Requests from the community.. The grommet V1 implementation is a little less accessible and flexible a component. Checkout out the freshly minted Calendar in Grommert v2, http://v2.grommet.io/calendar. Let me know if this fixes your issue.. No reply. Closing.. Coming in V2.. We will not have one for grommet v1, unless submitted from the community.. Thanks ror checking us out. We don't have a short term goal to support Apollo, https://www.apollographql.com/client\nWe welcome contributions from the community, please feel free to give a little more detail or provide a PR. We'll investigate further as well.. Thanks @atanasster! Yup.. Have you tried updating grommet to newer version to the see if this issue persists? Seeing as we've made many enhancements in recent releases this may have been fixed.  We've moved our efforts to the V2 release, http://v2.grommet.io/ . \nContributions are welcomed and we've tagged this with needs help for community to take a stab at it. Keep us posted!. Layout should be driven by Box, http://v2.grommet.io/box. Have you tried wrapping the tab within a Box and use responsive property?. Have you tried using a more recent version of Grommet? As we move to version 2 we'll be putting our efforts toward the newer releases. We welcome contributions and we'll put push this out to the community see anyone on the older releases has a patch.. Right on, thanks for the update. I'll throw this in slack and see if there are any takers.. Could you please provide the version of grommet and and details about the environment?. No reply. Closing.. Nice catch! I don't think color brand as a background fill constitutes a dark theme. I do think black or something in the darker end of the color spectrum would . That said, the easiest but least elegant suggestion would be to, underline anchor text at all times in white. An approach more aligned with the light theme would be to  use brand color along with text-weight to call out interaction\u2014It might not work in all context but would be consistent.\nThere is no simple silver bullet here as each of these elements can all be customized through theme and user choice. I would suggest adjusting your definition of \"dark background\" and close.. I don't mind it either. I think it's an opportunity to add personality. I would just suggest that when looking at the text, we treat the naming similar to your controls, like inactive, active to be a little more consistent.\nI don't understand the third state you have in there secondary. Please elaborate if I missing something.. Thanks @yuriyKovalchuk for the feedback! Are you looking for a prop that would automagically group and collapse the rows with identical content or specific column data?\nI don't know if this would be generic enough to have at the component level as I see a bunch of ways this could be interpreted. The reason I was asking if it was a specific column is if you're keying on that and the other columns are more secondary then you could have a pattern that would make sense to your users, otherwise without seeing a more detailed example it will be hard to ascertain how to make this more extensible for everyone else and also how to help solve this. \nHave seen an example of this in another framework? Keep us updated.. Sorry for the late reply but it's always been in the https://github.com/grommet/design-kit \ud83d\ude09. So I tend to agree with the issue. Glad it's fixed.\n\n. Not that it matters now since I'm late to the party, but do you need the second letter on the day? Looks more monospaced if you go with the single letter...Food for thought.. I do like this stack. It's a little more inclusive to make a better display of typography on respective systems. I'm in support of it. Any cost to the change? . ",
    "cssberries": "I'm running on Windows 7 64bit.\nI'm going though the steps shown in the video.\n. Updating Node to v0.12.4 solves the issue.\nNow I have Warning when running \"coverage\" task.\nShould I open a new issue for that?\n[09:47:10] Finished 'test' after 7.37 s\n[09:47:10] Starting 'coverage'...\nDone! You can checkout the report at test/coverage.html.\n[09:47:13] Finished 'coverage' after 2.93 s\nWarning: owner-based and parent-based contexts differ (values: undefined vs pt-BR) for key (locales) while mounting LoginForm (see: http://fb.me/react-context-by-parent)\nTest failed: Error: connect ECONNREFUSED\n    at exports._errnoException (util.js:746:11)\n    at TCPConnectWrap.afterConnect as oncomplete\n. I am behind a proxy server but NPM is configured as expected.\nNew issue:\nI managed to run the \"dev\" task successfully but when I navigate to \"http://localhost:9000/webpack-dev-server/\" - nothing happens.\n$ gulp dev\n[20:29:19] Using gulpfile c:\\PROJECTS\\grommet\\gulpfile.js\n[20:29:19] Starting 'preprocess'...\n[20:29:19] Starting 'clean'...\n[20:29:19] Finished 'clean' after 124 ms\n[20:29:19] Starting 'copy'...\n[20:29:19] Finished 'copy' after 11 ms\n[20:29:19] Starting 'jslint'...\n[20:29:25] Finished 'jslint' after 5.5 s\n[20:29:25] Starting 'scsslint'...\n[20:29:25] Finished 'scsslint' after 8.43 \u03bcs\n[20:29:25] Finished 'preprocess' after 5.65 s\n[20:29:25] Starting 'dev'...\n[20:29:25] Finished 'dev' after 62 ms\n[webpack-dev-server] started: Browse to http://localhost:undefined/webpack-dev-server/\nHash: ef865046a49a9f9bdd63\nVersion: webpack 1.9.10\nTime: 2430ms\n   Asset     Size  Chunks             Chunk Names\nindex.js  1.76 MB    0, 1  [emitted]  styles, app\nchunk    {0} index.js (styles) 138 kB [rendered]\n    [0] multi styles 40 bytes {0} [built]\n1/hot/dev-server.js 1.83 kB {0} {1} [built]\n2/hot/log-apply-result.js 813 bytes {0} {1} [built]\n    [3] ./src/scss/grommet-core/index.scss 1.19 kB {0} [built]\n    [4] ./~/css-loader!./~/sass-loader?outputStyle=expanded&includePaths[]=c:/PROJECTS/grommet/node_modules!./src/scss/grommet-core/index.scss 126 kB {0} [bu\nilt]\n    [5] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n    [6] ./~/style-loader/addStyles.js 6.02 kB {0} [built]\nchunk    {1} index.js (app) 481 kB [rendered]\n    [0] multi app 40 bytes {1} [built]\n1/hot/dev-server.js 1.83 kB {0} {1} [built]\n2/hot/log-apply-result.js 813 bytes {0} {1} [built]\n    [7] ./src/js/index.js 2.18 kB {1} [built]\n    [8] ./src/js/components/Tile.js 1.06 kB {1} [built]\n    [9] external \"React\" 42 bytes {1} [not cacheable]\n   [10] ./src/js/components/App.js 1.18 kB {1} [built]\n   [11] ./src/js/mixins/GrommetIntlMixin.js 1.92 kB {1} [built]\n   [12] ./~/intl/Intl.js 130 kB {1} [built]\n   [13] ./~/intl/locale-data/json/en-US.json 19.6 kB {1} [built]\n   [14] ./~/intl/locale-data/json/pt-BR.json 21.7 kB {1} [built]\n   [15] ./~/react-intl/index.js 1.28 kB {1} [built]\n   [16] ./~/react-intl/lib/react-intl.js 1.27 kB {1} [built]\n   [17] ./~/react-intl/lib/components/time.js 1.16 kB {1} [built]\n   [18] ./~/react-intl/lib/react.js 311 bytes {1} [built]\n   [19] ./~/react-intl/lib/mixin.js 5.38 kB {1} [built]\n   [20] ./~/react-intl/~/intl-messageformat/index.js 553 bytes {1} [built]\n   [21] ./~/react-intl/~/intl-messageformat/lib/main.js 288 bytes {1} [built]\n   [22] ./~/react-intl/~/intl-messageformat/lib/core.js 8.36 kB {1} [built]\n   [23] ./~/react-intl/~/intl-messageformat/lib/utils.js 710 bytes {1} [built]\n   [24] ./~/react-intl/~/intl-messageformat/lib/es5.js 1.25 kB {1} [built]\n   [25] ./~/react-intl/~/intl-messageformat/lib/compiler.js 6.07 kB {1} [built]\n   [26] ./~/react-intl/~/intl-messageformat/~/intl-messageformat-parser/index.js 108 bytes {1} [built]\n   [27] ./~/react-intl/~/intl-messageformat/~/intl-messageformat-parser/lib/parser.js 36.8 kB {1} [built]\n   [28] ./~/react-intl/~/intl-messageformat/lib/en.js 363 bytes {1} [built]\n   [29] ./lib/locales (ignored) 15 bytes {1}\n   [30] ./~/react-intl/~/intl-relativeformat/index.js 557 bytes {1} [built]\n   [31] ./~/react-intl/~/intl-relativeformat/lib/main.js 288 bytes {1} [built]\n   [32] ./~/react-intl/~/intl-relativeformat/lib/core.js 9.64 kB {1} [built]\n   [33] ./~/react-intl/~/intl-relativeformat/lib/diff.js 1.11 kB {1} [built]\n   [34] ./~/react-intl/~/intl-relativeformat/lib/es5.js 1.88 kB {1} [built]\n   [35] ./~/react-intl/~/intl-relativeformat/lib/en.js 1.53 kB {1} [built]\n   [36] ./lib/locales (ignored) 15 bytes {1}\n   [37] ./~/react-intl/~/intl-format-cache/index.js 110 bytes {1} [built]\n   [38] ./~/react-intl/~/intl-format-cache/lib/memoizer.js 1.76 kB {1} [built]\n   [39] ./~/react-intl/~/intl-format-cache/lib/es5.js 1.06 kB {1} [built]\n   [40] ./~/react-intl/lib/en.js 1.53 kB {1} [built]\n   [41] ./~/react-intl/lib/components/date.js 1.16 kB {1} [built]\n   [42] ./~/react-intl/lib/components/relative.js 1.19 kB {1} [built]\n   [43] ./~/react-intl/lib/components/number.js 1.24 kB {1} [built]\n   [44] ./~/react-intl/lib/components/message.js 3.09 kB {1} [built]\n   [45] ./~/react-intl/lib/components/html-message.js 2.36 kB {1} [built]\n   [46] ./~/react-intl/lib/escape.js 705 bytes {1} [built]\n   [47] ./lib/locales (ignored) 15 bytes {1}\n   [48] ./src/js/messages ^.\\/.*$ 214 bytes {1} [optional] [built]\n   [49] ./src/js/messages/en-US.js 930 bytes {1} [built]\n   [50] ./src/js/messages/pt-BR.js 946 bytes {1} [optional] [built]\n   [51] ./src/js/components/Button.js 1.33 kB {1} [built]\n   [52] ./src/js/components/CheckBox.js 1.35 kB {1} [built]\n   [53] ./src/js/components/Document.js 923 bytes {1} [built]\n   [54] ./src/js/components/Donut.js 9.95 kB {1} [built]\n   [55] ./src/js/components/Legend.js 3.71 kB {1} [built]\n   [56] ./src/js/components/Footer.js 2.52 kB {1} [built]\n   [57] ./src/js/components/icons/Top.js 840 bytes {1} [built]\n   [58] ./src/js/components/Form.js 1.1 kB {1} [built]\n   [59] ./src/js/components/FormField.js 2.67 kB {1} [built]\n   [60] ./src/js/components/Header.js 3.04 kB {1} [built]\n   [61] ./src/js/components/Label.js 740 bytes {1} [built]\n   [62] ./src/js/components/Login.js 1.69 kB {1} [built]\n   [63] ./src/js/components/LoginForm.js 3.34 kB {1} [built]\n   [64] ./src/js/components/Menu.js 9.14 kB {1} [built]\n   [65] ./src/js/mixins/Overlay.js 3.12 kB {1} [built]\n   [66] ./src/js/utils/DOM.js 509 bytes {1} [built]\n   [67] ./src/js/mixins/ReactLayeredComponent.js 1.2 kB {1} [built]\n   [68] ./src/js/mixins/KeyboardAccelerators.js 2.85 kB {1} [built]\n   [69] ./src/js/components/icons/More.js 864 bytes {1} [built]\n   [70] ./src/js/components/icons/DropCaret.js 662 bytes {1} [built]\n   [71] ./src/js/components/Meter.js 18.7 kB {1} [built]\n   [72] ./src/js/components/Panel.js 846 bytes {1} [built]\n   [73] ./src/js/components/RadioButton.js 1.31 kB {1} [built]\n   [74] ./src/js/components/Search.js 9.86 kB {1} [built]\n   [75] ./src/js/components/icons/Search.js 764 bytes {1} [built]\n   [76] ./src/js/components/SearchInput.js 6.68 kB {1} [built]\n   [77] ./src/js/components/Section.js 1.68 kB {1} [built]\n   [78] ./src/js/components/Table.js 5.2 kB {1} [built]\n   [79] ./src/js/components/icons/Spinning.js 901 bytes {1} [built]\n   [80] ./src/js/mixins/InfiniteScroll.js 1.88 kB {1} [built]\n   [81] ./src/js/components/Tiles.js 1.98 kB {1} [built]\n   [82] ./src/js/components/Title.js 552 bytes {1} [built]\n   [83] ./src/js/components/Object.js 2.27 kB {1} [built]\n   [84] ./src/js/components/TBD.js 319 bytes {1} [built]\n   [85] ./src/js/components/icons/Clear.js 758 bytes {1} [built]\n   [86] ./src/js/components/icons/DragHandle.js 1.32 kB {1} [built]\n   [87] ./src/js/components/icons/Edit.js 1.49 kB {1} [built]\n   [88] ./src/js/components/icons/Filter.js 1.21 kB {1} [built]\n   [89] ./src/js/components/icons/Help.js 770 bytes {1} [built]\n   [90] ./src/js/components/icons/Left.js 743 bytes {1} [built]\n   [91] ./src/js/components/icons/Right.js 746 bytes {1} [built]\n   [92] ./src/js/components/icons/SearchPlus.js 1.03 kB {1} [built]\n   [93] ./src/js/components/icons/Status.js 1.88 kB {1} [built]\n   [94] ./src/js/components/icons/status/OK.js 1.31 kB {1} [built]\n   [95] ./src/js/components/icons/status/ErrorStatus.js 866 bytes {1} [built]\n   [96] ./src/js/components/icons/status/Warning.js 1.42 kB {1} [built]\n   [97] ./src/js/components/icons/status/Disabled.js 864 bytes {1} [built]\n   [98] ./src/js/components/icons/status/Unknown.js 2.39 kB {1} [built]\n   [99] ./src/js/components/icons/status/Label.js 663 bytes {1} [built]\n  [100] ./src/js/actions/Actions.js 788 bytes {1} [built]\n  [101] ./~/reflux/index.js 35 bytes {1} [built]\n  [102] ./~/reflux/src/index.js 2.6 kB {1} [built]\n  [103] ./~/reflux/src/listenTo.js 1.5 kB {1} [built]\n  [104] ./~/reflux/src/ActionMethods.js 140 bytes {1} [built]\n  [105] ./~/reflux/src/ListenerMethods.js 8.78 kB {1} [built]\n  [106] ./~/reflux/src/utils.js 1.76 kB {1} [built]\n  [107] ./~/reflux/~/eventemitter3/index.js 6.08 kB {1} [built]\n  [108] ./~/reflux/~/native-promise-only/npo.js 3.57 kB {1} [built]\n  [109] ./~/node-libs-browser/~/timers-browserify/main.js 2.1 kB {1} [built]\n  [110] ./~/node-libs-browser/~/process/browser.js 2.02 kB {1} [built]\n111/buildin/amd-options.js 43 bytes {1} [built]\n  [112] ./~/reflux/src/joins.js 3.75 kB {1} [built]\n  [113] ./~/reflux/src/createStore.js 2.04 kB {1} [built]\n  [114] ./~/reflux/src/Keep.js 263 bytes {1} [built]\n  [115] ./~/reflux/src/mixer.js 1.71 kB {1} [built]\n  [116] ./~/reflux/src/bindMethods.js 689 bytes {1} [built]\n  [117] ./~/reflux/src/PublisherMethods.js 5.83 kB {1} [built]\n  [118] ./~/reflux/src/StoreMethods.js 138 bytes {1} [built]\n  [119] ./~/reflux/src/createAction.js 1.98 kB {1} [built]\n  [120] ./~/reflux/src/connect.js 942 bytes {1} [built]\n  [121] ./~/reflux/src/connectFilter.js 1.34 kB {1} [built]\n  [122] ./~/reflux/src/ListenerMixin.js 568 bytes {1} [built]\n  [123] ./~/reflux/src/listenToMany.js 1.35 kB {1} [built]\n  [124] ./src/js/utils/Rest.js 1.91 kB {1} [built]\n  [125] ./~/superagent/lib/client.js 23.6 kB {1} [built]\n  [126] ./~/superagent/~/component-emitter/index.js 3 kB {1} [built]\n  [127] ./~/superagent/~/reduce-component/index.js 405 bytes {1} [built]\n  [128] ./src/js/stores/SessionStore.js 1.95 kB {1} [built]\n  [129] ./src/js/utils/Cookies.js 2.73 kB {1} [built]\nwebpack: bundle is now VALID.                                                                                                                              \n. Well, it takes me to the google's search result page.\n. Nope, I don't have the \"devServerPort: 9000\" entry.\nI added it and got this:\n\n. Finally I can see the right screen!\nAnd some errors from Chrom's console:\nGET http://localhost:8002/favicon.ico 404 (Not Found)\ndev-server.js?b7b7:57 [HMR] Waiting for update signal from WDS...\nwarning.js?8bc8:48 Warning: Failed propType: Invalid prop handler of type object supplied to Route, expected function.\nwarning.js?8bc8:48 Warning: Invalid undefined handler of type object supplied to UnknownComponent, expected function.\n. Actually, it happens only with the buttons on the home page and caused by larger padding size on hover state.\n. ",
    "purplelightsaber": "I am getting the same error on the now logs. The following just repeats:\n\u25b2 Deploying image\n02/03/17 5:47:17 PM\n\u25b2 Container started\n02/03/17 5:47:20 PM\nFri Feb 03 2017 23:47:19 GMT+0000 (UTC) \u2013 fetching\n02/03/17 5:47:20 PM\n/srv/www/dist/slack.js:54\n          throw err;\n          ^\nError: connect ECONNREFUSED 127.0.0.1:443\n    at Object.exports._errnoException (util.js:1023:11)\n    at exports._exceptionWithHostPort (util.js:1046:20)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1090:14)\n02/03/17 5:47:20 PM\nFri Feb 03 2017 23:47:19 GMT+0000 (UTC) \u2013 listening on d44624e2aabd:30. ",
    "samogami": "Not yet working on getting grommet 0.2.5 to work first.\n. This works now for me. \n. Are the tooltips accessible?\nAre the tooltips only viewable with the mouse? Or can you access them with the keyboard? \nInfo on making tooltips accessible http://www.w3.org/TR/wai-aria-practices/#tooltip\n. Adding a button/control to stop animations would be beneficial for users with certain cognitive disabilities  (ADD) that might not use focus controls but still could be distracted by animation and moving text.\n. Some screen readers do not support the title and other elements in svg. Solution is to use web-aria aria-labelledby, id and role so the screen reader will read that this is a image and the title.\n. Attribute role=\"img\" is on the svg element.  role=\"presentation\" is on the drawing elements so screen readers do not read the title more than once.  Example: If you use a screen reader like NVDA and  do not put the role=\"presentation\" on both the circle and path element NVDA will read 'graphic OK OK' after adding role=\"presentation\" on those element NVDA reads 'graphic OK'. This output is correct and not confusing to the sreen reader user.\n. Multiple id with same value are fine for the icons and read correctly for screen readers that I tested. \n. I have attempted to set the default params value like in your comment but would get syntax errors.  Not sure if getCrommetIntlMessage is defined yet?\n. a11yTitle is empty string because the Grommet logo in this context is decoration. The word Grommet is right below it (see line 42).  If a11yTitle was left out a screen reader would say the word grommet twice: once for the image and then the again for line 42. \n. If the a11yTitle is \"\" then if (!this.props.a11yTitle) { will evaluate to true. I could see an example where the status icon is repetitive information and does not need a title like the Grommet logo in Home.js.   This would not allow the developer the option to pass in empty string to have screen readers not read the status icon.\n. Made suggested change.\n. Thought that Grommet would be named that same for all languages thus not needed localization. Let me know if it still needs to be localized.\n. It is ok that a11yTitle can be anything.  My question is why we need the default string of Grommet to be localized? \n. Localized in Grommet.js and Status icons OK.js, Disabled.js, ErrorStatus.js, Unknown.js, and Warning.js\n. Fixed.\n. ",
    "TiagoJustino": "Thank you for spotting that.\n. We still need to add the primary attribute to the other apps when appropriate, as well as the others pages on the Docs. The main page of Docs is just an example on how to use it.\n. That makes sense. Thanks for the tip. =)\n. Thank you @mattfarina for the suggestion. Just updated the PR =)\n. Thanks. I'll submit another PR addressing this. =)\n. Thanks for clarifying that. =)\n. Our Docs project is an example. On the main page we want the Section to be the main content, not the article, so we can skip the Design and Develop links on the top right corner. The same for the the Design and Develop pages.\n. I can. I'll fix this.=)\n. Just updated. Sorry for the delay.\n. Good to know. Thank you for pointing that out. =)\n. Done. Thanks for the heads up =)\n. Done.\n. I didn't know how I could join them. Thank you for teaching me that =)\n. I changed the way how we manage the states a little bit. I thinks it's solved now (and the code is a little bit simpler too.)\n. The same ID must be know by Menu and MenuDrop. The way I found was creating it on Menu and then passing it to MenuDrop. I accept suggestions =)\n. Will do =)\n. Awesome idea. It simplified the code =D\n. You're right. I missed this check.\n. That makes sense! How do you think it'd be the best way to filter this? by tag? or by some other property?\n. ",
    "tran2519": "Thanks @TiagoJustino for helping me solve the issues. \nI can bring up the examples/medium-app locally.  But still got problems to bring up the server. Here is the error when I run grommet/examples/server gulp dev:\ntrankim1@TRANKIM11 ~/git/grommet/examples/server\n$ gulp dev\n[08:57:21] Using gulpfile ~\\git\\grommet\\examples\\server\\gulpfile.js\n[08:57:21] Starting 'dev'...\n[08:57:21] Finished 'dev' after 2.09 ms\n[08:57:22] [nodemon] v1.3.7\n[08:57:22] [nodemon] to restart at any time, enter rs\n[08:57:22] [nodemon] watching: .\n[08:57:22] [nodemon] starting node server.js\nevents.js:85\n      throw er; // Unhandled 'error' event\n            ^\nError: spawn cmd ENOENT\n    at exports._errnoException (util.js:746:11)\n    at Process.ChildProcess._handle.onexit (child_process.js:1053:32)\n    at child_process.js:1144:20\n    at process._tickCallback (node.js:355:11)\n. Thanks @TiagoJustino for helping me solve the issues. \nI can bring up the examples/medium-app locally.  But still got problems to bring up the server. Here is the error when I run grommet/examples/server gulp dev:\ntrankim1@TRANKIM11 ~/git/grommet/examples/server\n$ gulp dev\n[08:57:21] Using gulpfile ~\\git\\grommet\\examples\\server\\gulpfile.js\n[08:57:21] Starting 'dev'...\n[08:57:21] Finished 'dev' after 2.09 ms\n[08:57:22] [nodemon] v1.3.7\n[08:57:22] [nodemon] to restart at any time, enter rs\n[08:57:22] [nodemon] watching: .\n[08:57:22] [nodemon] starting node server.js\nevents.js:85\n      throw er; // Unhandled 'error' event\n            ^\nError: spawn cmd ENOENT\n    at exports._errnoException (util.js:746:11)\n    at Process.ChildProcess._handle.onexit (child_process.js:1053:32)\n    at child_process.js:1144:20\n    at process._tickCallback (node.js:355:11)\n. Thanks, @bryanjacquot and @alansouzati.\n'node server' shows me all the rest calls.  By the browser  (chrome, IE11) throws this error:\nProxy error. Could not proxy to content base target!\ncannot proxy to http://localhost:8000 (socket hang up)\n Note:  I do not use Proxy server in my browser LAN Settings. \n\n. @alansouzati  After a couple of minutes, the browser refreshed itself and it works .  Thanks.\n. It works now.  Thanks.\n. The format issue is also seen in Chrome and IE11\n. It's fixed.  Thanks.\n. Issue no longer exists.\n. We currently have use cases where the search results in a list of more than a hundred items.  We just display 50 out of total, and load more pages when users scroll down.\n. We can use the same color, but can we introduce the class '.help' to be more descriptive?\n. Thanks, Eric.  Could you clarify what it means by not \"doing anything at the class level\"?\n. ",
    "klipinski": "Language is English, timezone is UTC+01:00. I changed also to German, makes no difference. A colleague here in Germany could observe the same, so it is not related only to my machine. Checked it on my machine with Chrome 43.0, Firefox 38.0, Opera 30.0, IE11 in combination with Win7. Also with Android 4.4.2 and Chrome (language in that case German). All show the same effect.\n. The effect can only be observed in one direction:\n1) change the day in the input field, call the datepicker and look to the calendar: the correct date is marked in green. In that direction it works.\n2) Other direction: call the datepicker, choose a date and close the calendar: the input field shows the day before the selected day.\nThere is a JS-warning: \"ReferenceError: reference to undefined property this._resizeTimer\" in index.js, line 40, col 8596.\n. Firebug output while executing like described before (case 2):\nReferenceError: reference to undefined property e.fromElement index.js:16:30404\nReferenceError: reference to undefined property r[e] index.js:2:19826\nReferenceError: reference to undefined property r._dispatchListeners index.js:16:22899\nReferenceError: reference to undefined property t[2] index.js:49:3775\nReferenceError: reference to undefined property t._owner index.js:1:19622\n. Eric, you're right! I changed the timezone to Pacific Time (UTC-08:00). And now it works ... !\n. ",
    "mirsilstan": "The bug is caused by the method toISOString, which returns a string representation of a date having the timezone zero UTC offset, as denoted by the suffix \"Z\".\nOn the other hand, the calendar is populated with dates having the timezone of the user's machine.\nThat's why Tue Jul 07 2015 00:00:00 GMT+0300 becomes 2015-07-06T21:00:00.000Z.\nI replaced date.toISOString().slice(0, 10) with moment(date).format('YYYY-MM-DD') and it works ok right now.\n. Sure, no problem, I created the pull request #133.\n. ",
    "winkler1": "Looks good. http://grommet.io/medium-app/login has some nice stuff -- could the login page say any username/password, or even default them so user just has to click? Otherwise, the funnel dropoff would likely be pretty high.\n. ",
    "rlech": "seems like there are all down? is there a online example available so see some UI stuff?\n. ",
    "maysst": "Demo sites are not available as per links above?\n\n. Is this on the roadmap for Grommet within the HPE theme?\n. @alansouzati - Many thanks :+1: for the clarification!  Quite obvious when you spell it out like that :-)   The project is within an HPE account so licencing for the font is ok.\n. Hi Alan,\nSince grommet-toolbox moved to react-hot-loader ^3.0.0-beta.6, I'm no longer seeing the HPE Metric font being used when using the dev server launched by gulp dev.  The font is defaulting back to Arial.  However, a gulp dist build works as expected.\nMy index.scss is as below:\n$hpe-fonts-path: '~grommet/scss/hpe/font/';\n@import '~grommet/scss/hpe/index';\nAm I doing something really stupid? \nAlso, thinking some more about it, given the Metric font is supplied under grommet/scss/hpe/font, is there a reason why grommet/scss/hpe/_hpe.defaults.scss still uses:\n$hpe-fonts-path: \"https://hpefonts.s3.amazonaws.com/web\" !default;\nrather than:\n$hpe-fonts-path: \"~grommet/scss/hpe/font/\" !default;\n. Hi Alan,\nIf any help, browsing to http://localhost:9000/webpack-dev-server shows that the hashed .woff files are there in the root (note: there's no ending / on the URL):\n- de48faee6019b25e8cda644f3654b35e.woff\n- 1278b251d4da7f8fed4b48ee567b3c0a.woff\n- f0cdcb22eecb468b06d6b7c7b1fffa59.woff\n- 08febe75cf58d264f16ca1fc3a2965c8.woff\n- index.js\n- index (magic html for index.js) (webpack-dev-server)\n...and the compiled style sheet has the following when you look at it in Chrome Dev tools:\n@font-face{font-family:\"Metric\";src:url(/de48faee6019b25e8cda644f3654b35e.woff) format(\"woff\")}@font-face{font-family:\"Metric\";src:url(/1278b251d4da7f8fed4b48ee567b3c0a.woff) ...\nThe end result though is that the text is defaulting to Arial and not using Metric... :-(\nProject was created using:\nnpm install grommet-cli -g\ngrommet\n$ new testApp --type full --theme hpe\nImmediately run gulp dev and the browser correctly uses the Metric font....\nEdited the index.scss to:\n$hpe-fonts-path: '~grommet/scss/hpe/font/';\n@import '~grommet/scss/hpe/index';\nRun gulp dev and the browser defaults back to Arial...\nHope that helps! :-)\n. Hi @alansouzati,\nAny thoughts on this one?. ",
    "RyanCCollins": "Hey @winkler1 I've got a few demo apps that I've made to gain experience with Grommet.  The first is a toy app located here: http://restaurant-reviewer-client.herokuapp.com/ .\nComing soon, I have a analytics dashboard and also a homepage for the React Weekly publication, both made with Grommet.  I will share those when available and you can check out my work on my github profile.  Grommet rocks!\nEDIT: I have a few more to add to the list since I've been using grommet for quite a while now\n- React Weekly\n- Corporate dashboard (a lot of the inspiration was taken from Grommet Ferret)\n- Meetup Event Planner This one I am super excited about, since it's using GraphQL, Rails and Apollo.\nThe reason for all these demos is to get the hang of grommet before use in a production app and hopefully work out the kinks.  In about two weeks, this production app will be unveiled and I can't wait to share it!\n. My pleasure!  Let me know if you have any questions about how they were built.\n. Hi folks, just as a follow up is there a recommended way to load the grommet styles into a project?  I am using ES6 default imports, but the styling is not coming with it.  I can just load up the scss, but do not know where to start and can't find it in the docs.  I really love your project and plan to use it on my next big work gig.  Thanks so much!\n. Hi! Thanks for getting in touch with me! I sure am using Webpack along with an scss loader, but I'll have to get back to you when I'm at the computer regarding the configuration and the error I'm seeing.  I was able to get the styles up and running with just the compiled CSS, so that should work temporarily. Thanks again! \n. Hi @alansouzati!  That's spectacular! I think that would serve the open source community well. We want to integrate grommet into a component library we are using for a distributed open source team and your contributions will go a long way towards that effort. I really appreciate it!\n. Thanks so much @alansouzati. That's super helpful!  What a great project this is! \nAs far as the open source, I'm part of two open source conmunities. One is an organization called HackSmiths and the other is for alumni of Udacity, an online MOOC, which gives our graduates an opportunity to work on a collaborative project.\nThanks again, I'm a big admirer and am so happy to have found a react based UX framework! \n. @dgennetten yes please!\n. I'll bet we could use babel-plugin-lodash to cherry pick the modules we need from moment (just a theory, I'll have to investigate further).  Otherwise, we might be able to use an alternative as has been suggested.  I agree that it's crazy to have that big of a dependency.. Any updates on this @L0ZZI or @tracybarmore ?  I see that the grommet-design issue is closed.  Can we close this one as well?. Is the accordian component available in a release?  I am using 0.6.10 and don't seem to have the source for it in the components folder.  Thank you!\n. Hi @epilande Thanks so much!! I tried this, but forked it first.  Looks great!\n. Has an option for modular CSS been discussed?\nI am a fan of styled-components and have found that it's definitely the best css in JS option out there.  Otherwise, css-modules are great also.  If we decide on the right library to use, I could experiment with a component or two to see how it works with the grommet setup.. Hey @alansouzati, yes I like that.  I see that they are using the built-in css variables to allow for theming which seems like a nice approach.  I agree with moving away from scss if possible and taking a vanilla approach with css-modules seems to be inline with grommet's mission of staying simple / un-opinionated. \nThat said, csjs looks pretty familiar and easy to use also.  I like that as well. \nI really like the file structure that react-toolbox is using also.  We are doing the same thing (feature-first) for the grommet-cms and in my experience that organizational pattern helps to facilitate modularization of assets.  Have we ever discussed taking that approach in Grommet?  Obviously, it'd be a major refactor, but might be something to consider over the long-term especially if we make the move to css-modules.. Hey @milesj, we are working on NEXT right now and intend to release a beta version at some point in the near future.   I wish we had a website similar to \"Is Fiber Ready Yet?\".  That would be an awesome contribution if anyone is looking for something to contribute \ud83d\ude04 . As noted, I would like to contribute to writing some unit tests.  I will stay tuned for an announcement regarding the new setup.  Thanks!\n. Will do!  I'm going to take a gander at the article and hopefully I'll dig in this weekend.  Thanks again!\n. As noted, I think this lowered the coverage for the social share component.  I will get that back up in my next PR.  Got some more tests coming, too (only for the Card component).  Thanks so much!\n. @Vaevictus \nSorry to unearth a dead thread, but wanted to mention that I made TS bindings for the latest v. of Grommet recently (unofficial / for my own use).  I am working on writing the tests and would like to test them out a bit more myself before I publish to DefinitelyTyped but should be fairly soon.  Feel free to fork em, or give me a few days and I'll let ya know when they are live on DT. \nCheers!\n. Hey @edude03! \nI will make an example project using the ts bindings with grommet.  Just give me an hour or so.\nAlso, if you are on the grommet slack, I'd be happy to chat with you there about the bindings.\nWe actually decided to go with Flow instead of TS for the project I prepared this for, so I am focusing more on the Flow Types for Grommet now, but still intend to get these published in the future.. @edude03, I updated the exports for the grommet-typescript definitions and added them to my React / TypeScript boilerplate project on a separate branch.\nSince the grommet types are not on DefinitelyTyped yet, I included them in a folder in my project and set the directory under then include configuration option in my tsconfig.json file\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"module\": \"es6\",\n    \"target\": \"es6\",\n    \"moduleResolution\": \"node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"noImplicitAny\": false,\n    \"sourceMap\": true,\n    \"outDir\": \"build/src\",\n    \"jsx\": \"preserve\",\n    \"allowJs\": true\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"config/types/*.d.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\nThen, I can import the grommet modules into my App/index.tsx container.\nimport GrommetApp from 'grommet/components/App';\nAnd here is the result (typed grommet components, \ud83c\udf89 ):\n\nIf you end up using the typings, please feel free to improve them and let me know if there are any issues!. Hey@edude03 and @arlair! \nI appreciate your comments and help to improve the bindings. I'd love for your improvements to be submit with a PR to the repo. Eventually I will submit it to the definitely typed repo once all the kinks are ironed out and your assistance in getting it there is very much appreciated. \nLike I said, I am actually using Flow for my everyday work, so it's harder for me to find the kinks without having used these in any big projects yet.  The kinks have been ironed out of the Flow types (located here), in case that helps. \nAs far as whether there is a better solution to your use-case @edude03 i am not sure but I'll try to get my hands on it to see if I can find a better solution.  Do you have a project up on Github that I can checkout by any chance?. @edude03 have you made any progress with the fixes for the bindings by any chance?  I may revisit them soon and would like to get them into the DefinitelyTyped repo.. My pleasure!\n. Woohoo, 43%! It'll be at 50% in no time!\n. The failing test was my attempt to re-generate the Carousel-test, which was already failing.  It looks like it's still failing.  Please let me know if you'd like me to remove that commit and resubmit!  Thanks.\n. I am going to close this for now because I need to be able to update my fork without effecting the PR.  I will resubmit this same PR at a later time once all tests have been updated to passing.\n. This is taken care of in #1150 . See #1150. Hey @acpower7!\nI can't answer regarding the hpe.com website, but I can offer to share some of the sites that I've built with Grommet that are open source.  They may not be as good as the HPE site, but might be helpful nonetheless.\nPortfolio\n- Live (https://www.ryancollins.io)\n- Code (https://github.com/RyanCCollins/ryancollinsio)\nUdacity Alumni Publishing Platform / Social Network\n- (Not yet live)\n- Code (https://github.com/udacityalumni/udacity-alumni-fe)\nCheers!.  Hi @arabold,\nIt looks like the import statement for the docs for AnnotatedMeter is incorrect.  \nThe AnnotatedMeter component is located in the grommet-addons library, which is an adjunct lib that contains several add-on components.\nEDIT: it looks like the import statement on the main page for the component is correct.\n\nBut then in the examples it is incorrect.\n\nI am going to submit a PR to the grommet-docs site for this.\n. Should be fixed by #221 on grommet-docs. I've added a fix for this, but honestly don't know if it will break anything else.  See here.\nCan anyone verify what the purpose of the width: 100% is for anchors in primary menus?. So looking through the source code, it appears that the tabs component is mapping over all of the children passed in.  I believe that your expression {false && ....} is evaluating to false, and the Tab source code thinks that is a child even though it's not an actual element.  It's showing that false.props is undefined, which makes total sense since false does not have a props property.  \nA quick fix would be a null check on the tab when mapping over children.\n```\nconst tabs = React.Children.map(children, (tab, index) => {\n       // if (!tab) { return null }; <-- This might work so that it will bail out of the iterator before checking for tab.props.\n  const tabProps = tab.props || tab._store.props || {};\n\n  const isTabActive = index === activeIndex;\n\n  if (isTabActive) {\n    activeContainer = tabProps.children;\n    activeTitle = tabProps.title;\n  }\n\n  return React.cloneElement(tab, {\n    active: isTabActive,\n    id: `tab-${index}`,\n    onRequestForActive: () => {\n      this._activateTab(index);\n    }\n  });\n}, this);\n\n```\n@nickjvm is this something you'd want to submit a pr for?  I know the team would very much appreciate it!. I would be happy to try to implement a solution for this, btw.  Perhaps the height of the surrounding container can be calculated dynamically rather than being hard-coded at 100vh?. Yeah, that sounds like the grommet way to do it!  Sounds good, thanks @ericsoderberghp . So far, what I am thinking is that we use a Box as the main component with a bit of default styling.  The File input will be hidden.  This will give the user the control over changing the default style in a familiar manner.\nFor example\nrender() {\n    const boxProps = Props.pick(this.props, Object.keys(Box.propTypes));\n    const { className, label } = Props.omit(this.props, Object.keys(Box.propTypes));\n    const classes = classnames(\n      CLASS_ROOT,\n      className\n    );\n    return (\n      <Box {...boxProps} onDrop={this._onDrop}\n        onClick={this._onClick} className={classes}>\n        {Dropzone.renderLabel(label)}\n        <input ref=\"fileInput\"\n          type=\"file\" className={`${CLASS_ROOT}__input`} />\n      </Box>\n    );\n  }\nExample usage\n<Dropzone\n  multiple\n  colorIndex=\"light-2\"\n  size=\"medium\"\n  onDOMChange={(files) => console.log(`Loggin uploaded files ${JSON.stringify(files, null, 2)}`)}\n  align=\"center\"\n  label=\"Drop file to upload\"\n/>\nYields something like\n\nNOTE: this is before any design input, so it's subject to change.\n. A couple of things to consider for the design. \n1. The various states of the component\n- Inactive\n- On drag start (when the user is hovering over the component with one or more files. \n- On drop (when the user has dropped one or more files)\n  - On file upload accepted\n  - On file upload rejected. Hey @alansouzati, it does, although I've yet to handle the case where a user tries to drop and html5 drag and drop is not available. \nThat said,  it does have a hidden html5 file upload that's accessible by clicking the drop zone. \nMaybe it would be best to do a check for html5 drag and drop and render a button if it's unavailable instead?. Also, here is a demo of the component in use in grommet-cms\nDrag and Drop\n\nFull Screen Drag and Drop\n\nClick to Upload\n\nDrag and Drop fallback\n\n. Btw, sourcecode for the component is here.  I'll wait until we get some feedback on this from CMS users and the UX/Design team before submitting into core.. Hey @arabold, sorry about that.  The link that I shared goes to a private repository.  We intend to move this into grommet, or into its own repository at some point but not right away.  I will post when I have more details.\nEDIT: if you want to reference the code for use, you can see a gist here.  This is just a prototype though and needs more work.  Let me know how it goes if you use it for anything.. I'm back to working on this, but no telling when it will be ready.  Hopefully after delivery of brand-central, I can get it done \ud83d\ude04 . Cool thanks @nomadus!  There is a PR open for this. As soon as a grommet core member has some free time, we can get it reviewed and into the next releas. . I've closed this since the stalebot was going to.  Happen to re-open in the future if we find the right spot for this.\nRefer to: https://github.com/grommet/grommet/pull/1351. Hey @devdil, I can't speak for the entire Grommet team, but I think a rich text editor or source code editor might be outside the scope of the Grommet project.  We like to take the approach of providing the library user with the tools they need to build more complex UI components, rather than providing these complex components in the Grommet library.\nThat said, this might be a great project for another repository, for example Grommet-Addons, which is a repository the grommet team maintains for components that are a bit more complex.  I'd also encourage you to experiment making a component like this.  I know that I'd use it!  It could definitely be made with existing grommet components.  For example, a Rich Text Editor toolbar could easily be made with a combination of icons, Boxes and a Menu perhaps and that could certainly be plugged into code mirror or ace.\nI was actually just talking the other day about how this would be a fantastic feature for the Grommet-cms project, which is something we are working on now that will allow you to manage websites made with Grommet components through a GUI.  We might eventually develop a Rich Text Editor for this project, so I'll definitely share it when we do.. Hey @nomadus \nI've used Draft-JS with Grommet before and it was a great experience.  You can see the sourcecode for that project here.\nIn the case of the grommet-cms, I believe we plan to make a draft-js-like toolbar from scratch.  We haven't gotten to that point yet, however, and are waiting on some design feedback.  I'll definitely share some code and screenshots when we get to working on it.. Hey @nomadus, I have been toying with this idea over the weekend.  \nI would love to have a rich text editor that we could use in the grommet-cms.  I think before I go past the protyping stage, I would like to get designs of this and I have no clue when that will be possible.\nIf you are interested in seeing the progress, there is a repo here.  No promises that anything will come of this, but I'd still like to explore it and would welcome any contributions.. Hey @shai32 and @arabold, thanks for your notes!\nYou are not forced to use sass when you use Grommet, but grommet is built on top of a sass and for the meantime that is a reality.  If you do not want to bother setting up the sass-loader, you can always include only the compiled css, either compiling yourself or linking to the grommet.min.css file included in the package.\nBy the way, the Grommet team has been exploring css modules for quite some time.  If that's something you'd like to help with, maybe we can get there faster.. As far as I know, there is no hard dependency on sass.  Sass compiles into css before it's loaded into the bundle.  Grommet needs css in order to work, but it doesn't matter whether sass precompiles it using the webpack sass-loader, or if it's included via a precompiled css file.\nOne thing to be aware of, however, is that your bundle would likely be bigger due to the fact that you are pulling in all of the grommet themes.. @arabold, I have closed this issue, but please feel free to keep the conversation going if you have any other questions.. I am going to close this because I don't think this is up to grommet.  It'd be amazing to figure out a way to normalize the flexbox spec cross browser, but that's up to the browser vendors not grommet.. Hey @vaibhavbhargav.\nFor a quick fix, you can override the styling for your specific use-case:\n.grommetux-list-item:focus {\n  outline: none;\n}\nAnother option, of course, would be to add a property to control this behavior.  I will leave the issue open to see if that's a possibility in the future.  Also, we would happily review a pull request with that behavior if you are able.\nThe list item has a css property of --selectable (see here), which is set to true when an onClick is passed in.  This could be controlled with a selectable property but at the moment, that is not yet implemented in Grommet.. Hey @aandr, that seems like a great solution!  I understand what you're saying and tend to agree, as long as backwards compatibility is maintained between releases.  I'd be interested in seeing your PR!  Let us know if you need anything.. Great, thank you @oakmad!\nWe are always looking for contributions, especially to the docs.  If you're interested in helping out to add some clarification to the docs, checkout the grommet-docs repo.\n. I am going to close out this issue so that it's not appearing on the grommet team's backlog.  Please feel free to keep the convo going!. @mangoslicer thanks for all your work on this!  I am going to try to get it moving.\nWhat's the status of this?  With the grommet 2.0 release, will this still be needed?  . I just had a discussion with @alansouzati.  It sounds like we are going to work to get this into Grommet 2.0.  We've had a discussion about changing the API a bit, so when we start work on 2.0 I will re-introduce this.  Please hold off on merging it until then.. I've merged with master and updated to pass the CI suite.. @alansouzati if you get a chance, let me know what your thoughts are on this.  I completely understand if we don't want to add it to core.  Just want to get the convo going to see if there is a place for it somewhere.. @panigrah thank you for helping to test this!  Are you interested in contributing?  Feel free to push to this branch if you want to make those changes.  . @MarcelGeo \nGlad to see that this has been resolved!  I am going to close this issue to get it off of the backlog, but feel free to keep the conversation going if you have any further questions.. I've got this \ud83d\ude04  \nSee https://github.com/grommet/grommet-docs/issues/274. We just recently added theming to the Grommet CMS and were talking about doing custom themes.  @dgennetten: Let me know if you need any help with this!  I'd be happy to help.. Hey @windgaucho this issue appears to be related to one that I had a while ago when I was getting up and running with Grommet.  I believe it comes down to the configuration of the sass-loader.  You might want to take a look at the grommet-standalone project, particularly the sass-loader configuration object.\n{\n          loader: 'sass-loader', options: {\n            includePaths: ['./node_modules', './node_modules/grommet/node_modules']\n          }\n        }\nI am not familiar enough with meteor to comment on how it should be configured, but hopefully this will get you moving in the right direction.  Good luck!  \nEDIT: I was just reading the docs and it appears that meteor has a package that has similar configuration to the webpack sass-loader.  Make sure the configuration of includePaths matches what I pasted in above.. @nayaksud Grommet does have css built into the library.  The components generate the grommet-ux... classnames, so there is really no way to shut that off.  Considering the fact that Grommet is a design language, it should make sense why a large portion of the codebase is built on css.   There are a few ways that you can customize styling of components, however.   \nA. You can create your own theme by copying one of the pre-existing themes and making edits. You can find the pre-existing themes here.\nB. You can apply your own selectors that have a higher specificity than the grommet css selectors.\nI hope this helps!. By the way, I am going to close this issue to get it off of the Grommet teams backlog.  That said, I'd be happy to keep the conversation going in this thread if you have any further questions!  Thanks!. Hey @JonathanWbn,\nThanks for your issue!  In order to help diagnose this issue as fast as possible, is it possible that you can post a codepen to exhibit the symptoms?  If not codepen, an example project would be helpful. Thanks!. Hey @gustahrodrigues you're right this is quite confusing.  Thank you for posting an issue about it.  I believe that the chart components have custom colorIndex options, i.e. graph-1 and graph-2 but I'm not sure of the reason for that and why the regular options do not work.  \nHopefully one of the other core team members can comment about this.. Woohoo, grommet 2.0!!! \ud83c\udf89 . Hey @drewlustro!  Thank you very much for reporting this.  To me, this seems like a great opportunity for you to contribute, if you are interested!  It would seem to me that the more exception handling we can add to safeguard against confusion, the better.  If you are able to, go ahead and open a PR with a proposed fix.  Otherwise, I will keep this issue open for the grommet-core team.\nThanks again!. Hey @jlevesque !  Great catch!  It is definitely a goal of Grommet's to be accessible and we take violations of the WCAG audit seriously.  I will leave this up for now so that we can get it on our backlog.  That said, if you feel compelled to try to help us resolve this, we would love for you to work on a PR!  . One option would be to use something like react-portal.\nEDIT TO ADD: looking at the source code of react-portal, I see that it's basically doing the same as the grommet codebase.. Hey @BjornMelgaard!  Great thought!  I agree with that sentiment, but the majority of the grommet team and user-base appreciates having a vanilla codebase.  \nThat said, I'd love to make it my mission to add typescript definitions to 2.0 and I would love your help!  @stsrki as well!\nI've made a NEXT_TS branch to start work on adding TypeScript definitions and added a few examples.  Also, checkout the Grommet 2.0 wiki for more info on the release.  I will keep working on this as time permits.. Bit of an an update, I've been doing some research into how other UI libraries handle type definitions.  I've found that libraries like react-toolbox and material-ui add flow and typescript types within their components.  I really like this approach because it allows you to write your components with vanilla javascript, while also supporting people who like to use static-type checking. \nHere are some examples:\n- Material UI\n  - FlowType Example\n  - TypeScript Example\n- React Toolbox\n  - TypeScript Example\nI'm going to start experimenting on this and would love some help!. @BjornMelgaard, I totally agree!  I'm personally a TypeScript convert, but can't say the same for the rest of the grommet team.  Let's both work on them \ud83d\ude04.. One thing that I'd love help with is devising build steps that will generate the definitions for both TypeScript and Flow from the React-desc proptypes that are currently included with components.  I've been playing with writing a simple script to help me quickly generate TS definitions, but my approach is very crude.  \nAny suggestions would be much appreciated.  I'm sure that there are utilities to generate TS and Flow annotations from PropTypes, so perhaps the answer is to write an intermediary script that turns React-Desc annotations into PropTypes annotations.\nThe point is that having a build step that takes as input the react-desc annotations and outputs both .flow and .d.ts files for each component would be hugely beneficial to automating type annotations in grommet next.. Hey @ericsoderberghp, yea that makes a lot of sense to me!  I'll see if I can dig in a bit this weekend.\n. I've got TS definitions now for all the components.  I still want to test this before merging, however.  . That sounds like a good idea, @dgennetten!. @L0ZZI I am, but I don't have much time to devote to it! Will let you know how it goes :). Yeah I completely agree.  Thanks for the input @linde12!\nI much favor composition over passing values as props and see this is a pattern we are trying to follow more in grommet 2.0.   I'd love to see some progress on this.. Hey @XuluWarrior, thank you very much for posting this issue! \nIs it possible that you could post a codepen exhibiting this issue?  It will help us to better triage it.  When you open an issue on the grommet repo, we ask that you use the issue template (found here).  \nYou can find the Grommet Hello World template here. \nThanks again!. Hey @XuluWarrior, any updates on this?. Hey @Slumber86, since the split element creates it's own scrollable region, it's logical that window.scrollTo(0,0) would not scroll the split.  I think you're looking to scroll the split element to the top, in which case you could grab the dom element and set its scrollTop.\nI'll post a gif to illustrate this.\n\n. @Slumber86 in an effort to help clear up the Grommet team's backlog, I am going to close this issue.  Please feel free to keep the convo going if you have any further concerns.  Thanks!. @karatechops Okay if I close this?. @karatechops It's like watching grass grow \ud83d\ude04  (waiting for the bot to close this, that is).. \ud83d\udc4d thanks @ericsoderberghp . A proposed fix is to add the following to the grommet box scss (this needs to be repeated for each basis and for the basis with padding in between).\n.grommetux-box--basis-1-3 {\n  @media all and (-ms-high-contrast:none) {\n    max-width: 33.3%;\n  }\n}. So I'm not exactly sure how to display this.  It is happening in a project that I'm unable to share publicly.  Therefore, I have taken screenshots to show the behavior.  Also, I am linking to the corresponding flexbox bug.  Also note that I've deleted the content in these screenshots because of the sensitive nature of the project.  I've highlighted boxes with a red border to show how they overflow their parent.\nIE11: children with flex-basis overflow their parent:\n\nChrome: children are rendered correctly\n\n. @ericsoderberg It\u2019s certainly possible to do that yeah. I have an open issue to look into that. Will Post a link. \nEDIT:\nHere's a link to the issue: https://github.com/grommet/grommet/issues/1512. @abner We'd still love it to get grommet 2.0 statically typed.  I'm working on updating the codebase to latest and also want to look into automating the process of creating type annotations.  Unfortunately, I don't have much time to devote to the effort at the moment.  If you can help, it'd be very much appreciated!. We are actively exploring using bit for our own component sharing at HPE and will report on that after we do more exploration.. Hey @ShimiSun Bit seems like a great option for component sharing.  That being said, decisions were made at the OneSphere program level to instead go with a lerna repo and share our components through a private registry on npm.  Matt Borland was looking into this.  Considering we have 100s of components, this is going to be a longer term project, but I expect that I will be focusing on it soon.. @alansouzati I tried to use the playground to create an example, but it kept crashing on me.  I'll ask @jesseolsen to follow up but not sure he's going to be able to anytime soon.  The issue seems to happen any time you use a drop button or a select and we see it all across OneSphere.  Ping me if you need more details.  Thanks!. @ericsoderberghp I'm actually not sure entirely how to reproduce it at this time.  As I said, we've been seeing it intermittently.  Next time I see it, I will see if I can nail down the root cause so that I can reproduce it for you.. Here is another screen shot.  I think this happens because the grommet AnnounceContext code is interacting with the intercom library in OneSphere.  I will try to reproduce in a code sandbox when I get the time.\nYou can see the result in the screenshot below.  The announcer node gets attached to the intercom node and the styles break.\n\n. The cause of this bug seems to be the fact that OneSphere appends the #intercom-container adjacent to the main node.  I think the grommet code finds this node and puts the update text in it.  The CSS overlaps and we end up seeing the text that should be seen only by a screenreader.  We will likely patch this in OneSphere, but should probably keep this open since others will run into it.  \nWe could probably figure out a better way to append the aria-live content to the dom so that this doesn't happen in the future.  Now that I know how this works, let me try to create an example.. I came up with an example for this:\nCode Sandbox\nLive Example\nTry filtering down the suggestion list and you will see the announcer come up.  The issue is that the CSS to hide the aria-live region is being overwritten by libraries we are using.  I suspect this could happen with other libraries and I'm not sure how we could fix it considering the code comes from a library.  I think Grommet could handle this better to avoid this by creating its own aria-live node or by hiding the found node. (NOTE: I added the intercom node from OneSphere and changed the style a bit so that you can clearly see the text).. I suppose this issue is caused by our library usage in OneSphere.  I will close it.  Feel free to reopen if this is found to be an issue elsewhere.. If @alansouzati will spare a few minutes this week, I might be able to solve this.  I dug into the generator code, but need some help reverse engineering.. @ShimiSun on the east coast, we see:\n\nIt might be a difference caused by your local timezone.  You can try using the TimeShift chrome plugin to change your browser timezone to EST to see the issue.\nWe also see another issue where the format of the Date Header in the calendar changes depending on what timezone you're in. @srockk is going to try to come up with an example for this.. I asked in the grommet slack whether there is a better way to create a rounded button.  We use them in many places across OneSphere.. Thanks @atanasster, that's a good solution, however, it'd be ideal to not have to add additional CSS to fix this.  I think this is a bug that could be addressed in grommet.. I've been asked to take a look at this issue.  Coming into it as an outsider, I can say that the InfiniteScroll is clearly broken.  Providing a step is not reliably fixing the problem for me and the result is that onMore is not being called when reaching the end of the scroll list.  I think the logic internal to InfiniteScroll might be flawed.\nI am looking into it to see if I can understand the problem better and will see if there's anything else that I can add to help fix the issue.. @ericsoderberghp ah okay, sweet! Thanks for looking into that!. Had to remove the following test:\nit('renders a video component correctly', () => {\n    const component = renderer.create(\n      <Card direction=\"row\"\n        thumbnail=\"/img/carousel-1.png\" label=\"Video - 4:27\"\n        heading=\"Foundation Paraguay Empowers Microbusinesses\"\n        text=\"See how Hewlett Packard Enterprise delivers mobile\n            solutions to improve quality of life and help eliminate poverty\n            in South America.\"\n        video={{\"source\": \"/video/test.mp4\", \"type\": \"mp4\"}}\n        link={<Anchor href=\"#\" label=\"Watch Now\" icon={<FakeIcon />} />} />\n    );\ndue to the fact that one of the SVG elements was not matching the snapshot.  If someone more familiar with the project wants to investigate it, please do!\n. In OS, we have the option of having more than one groupBy, so if possible this would accept an array.. @alansouzati thanks for the idea, that makes sense to me.  I will make the change.. ",
    "RainerAtSpirit": "@RyanCCollins: I was just looking for some examples and found your demo apps. Thanks for sharing!\n. ",
    "david-cahill": "@alansouzati I'm having issues when using the <Article> component when server-side rendering, seeing this in the browser console:\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) \" data-reactid=\"5\"><a tabindex=\"-1\" aria\n (server) \" data-reactid=\"5\"></article><span style\nI'm using v1.6.0, should this work using ssr? Thanks!. @olifante any update on using grommet with next.js? I'm having issues using grommet components as they don't seem to be ssr compatible. ",
    "infiman": "@david-cahill Same issue here. Have you solved your problem?. ",
    "ieugen": "+1 for the things above. \ngrommet init sample-app\nCould not find Grommet!\nI have io.js installed with nvm in my home directory. The message is from Grommet itself\n. I did that. \n. Hi, \nI've been using this setup for a few months and I had no other problems: \nls -la ~/.nvm/versions/io.js/v2.2.1/lib/node_modules/grommet/\ntotal 800\ndrwxr-xr-x 1 ieugen ieugen    584 aug 17 15:36 .\ndrwxr-xr-x 1 ieugen ieugen    512 aug 17 15:37 ..\ndrwxr-xr-x 1 ieugen ieugen     50 aug 17 15:35 actions\ndrwxr-xr-x 1 ieugen ieugen     20 iul 28 06:25 bin\ndrwxr-xr-x 1 ieugen ieugen   1012 aug 17 15:35 components\ndrwxr-xr-x 1 ieugen ieugen    154 aug 17 15:35 examples\n-rw-r--r-- 1 ieugen ieugen 105101 iul 28 06:25 grommet-hpe.min.css\n-rw-r--r-- 1 ieugen ieugen 102880 iul 28 06:25 grommet-hpinc.min.css\n-rw-r--r-- 1 ieugen ieugen 104523 iul 28 06:25 grommet.min.css\n-rw-r--r-- 1 ieugen ieugen 448373 iul 28 06:26 grommet.min.js\n-rw-r--r-- 1 ieugen ieugen   1604 iul 28 06:25 grommet.svg\n-rwxr-xr-x 1 ieugen ieugen   7291 iul 28 06:25 hpesm_sec_blk_pos_rgb.svg\n-rwxr-xr-x 1 ieugen ieugen   7477 iul 28 06:25 hpesm_sec_grn_pos_rgb.svg\n-rw-r--r-- 1 ieugen ieugen   3463 iul 28 06:25 index.js\ndrwxr-xr-x 1 ieugen ieugen     32 aug 17 15:35 messages\ndrwxr-xr-x 1 ieugen ieugen    186 aug 17 15:35 mixins\n-rwxr-xr-x 1 ieugen ieugen   6553 iul 28 06:25 mobile-app-icon.png\n-rw-r--r-- 1 ieugen ieugen   2114 iul 28 06:25 mobile-app-icon.svg\ndrwxr-xr-x 1 ieugen ieugen    726 aug 17 15:36 node_modules\n-rw-r--r-- 1 ieugen ieugen   3663 aug 17 15:35 package.json\n-rw-r--r-- 1 ieugen ieugen   1723 iul 28 06:25 README.md\ndrwxr-xr-x 1 ieugen ieugen     40 aug 17 15:35 scss\n-rwxr-xr-x 1 ieugen ieugen    662 iul 28 06:25 shortcut-icon.png\ndrwxr-xr-x 1 ieugen ieugen     56 aug 17 15:35 stores\ndrwxr-xr-x 1 ieugen ieugen    124 aug 17 15:35 templates\ndrwxr-xr-x 1 ieugen ieugen    266 aug 17 15:35 utils\n. Hi, \nI've ran the following: \n$ NODE_PATH=~/.nvm/versions/io.js/v2.2.1/lib/node_modules grommet init xxa\nThis creates the project, however, it builds a lot of native libraries while building the process. This should not happen while creating a sample project.  \nThe result however is not very usable:\n```\n$ npm install\n$ gulp dev\n[10:16:42] Using gulpfile ~/contracte/gpec-event/xxa/gulpfile.js\n[10:16:42] Starting 'dev-preprocess'...\n[10:16:42] Starting 'preprocess'...\n[10:16:42] Starting 'clean'...\n[10:16:42] Finished 'clean' after 2.99 ms\n[10:16:42] Starting 'copy'...\n[10:16:42] Finished 'copy' after 12 ms\n[10:16:42] Starting 'jslint'...\nevents.js:141\n      throw er; // Unhandled 'error' event\n            ^\nError: Definition for rule 'react/jsx-max-props-per-line' was not found.\n    at /home/ieugen/contracte/gpec-event/xxa/node_modules/eslint/lib/eslint.js:647:27\n    at Array.forEach (native)\n    at EventEmitter.module.exports.api.verify (/home/ieugen/contracte/gpec-event/xxa/node_modules/eslint/lib/eslint.js:620:16)\n    at verify (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/index.js:21:25)\n    at DestroyableTransform._transform (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/index.js:44:18)\n    at DestroyableTransform.Transform._read (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:184:10)\n    at DestroyableTransform.Transform._write (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js:172:12)\n    at doWrite (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:237:10)\n    at writeOrBuffer (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:227:5)\n    at DestroyableTransform.Writable.write (/home/ieugen/contracte/gpec-event/xxa/node_modules/gulp-eslint/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js:194:11)\n```\nRegards, \n. Yes. it works now. The node path is still needed. So far grommet is the only app that needs this. I've added \nhttps://github.com/HewlettPackard/grommet/pull/166 to give more information about the issue. \n. It doesn't show on my machine. I've checked with both VIM and atom. I have editorconfig plugin. Can't figure it out.\n. ",
    "Deklin": "Thanks Eric (this is Steve Btw) \nBryan;\nWhat Eric said is the same issue we have. On the logon page we need to add footer information about product version # etc. That is scrolling off screen and no scrollbar is appearing. Even without that if the size is too small no scroll appears.\n. It would be helpful if each grommet component had a data-debug-id (or similar) attribute for test automation to use.\n. Just a note this isn't recommend for TA scenarios. Class names are much more volatile than named locators per selenium guidelines, especially as dom structure changes during refactoring. Class names are low on the list of recommendations to use. \nhttps://mestachs.wordpress.com/2012/08/13/selenium-best-practices/\nID is one option, another option is data-ta-id to give it a named locator\ne.g.\ndata-ta-id=\"login\" \ndata-ta-id=\"username\" or data-ta-id=\"username_input\"\n. @alansouzati thanks for the update and consideration\n. Updated code per your recommendations, \n. +1\n. ",
    "ivandurst": "Thanks @Deklin. This is fixed in https://github.com/grommet/grommet/pull/211.\n. I believe this issue was fixed in https://github.com/grommet/grommet/pull/211.\n. It looks like this may have been updated - you can now add usernameType=\"text\" or any other value directly to a <LoginForm /> component.\n. Opening a new pull request for this: https://github.com/HewlettPackard/grommet/pull/193\n. @ericsoderberghp I removed the -webkit- prefix from the flex stuff. I also removed all -webkit-box-shadow, -webkit-transition, and -webkit-text-decoration from grommet scss, as it's my understanding that these are no longer necessary (more here: http://shouldiprefix.com/).\nI removed \"Do not merge\" from this PR title, it can be merged whenever ready. \n. Good call, will do\n. Makes sense to me. Moved them over\n. I've updated the component to set the line-height of the label elements to the height of their container - I couldn't find a pure css way to do this, since the drop is inserted outside the header when the menu is clicked\n. Removed, we are now handling this inside the component - see above comment\n. ",
    "pgoodrich8": "The data-debug-id could be used if static and include a unique id to component but I have not seen this used consistently by developers.  Sometimes this id is of a dynamic object id which is not helpful since we can not know beforehand.\n. ",
    "maple10001": "Same issue appears when I trying to use colorIndex in  component. \nMore if setting fixed={true} in Header, some working colorIndexs like \"grey-3\" is not working in large viewport, eg: when the width is larger than 700px.\n. I am trying to use <Header colorIndex='brand' fixed={true}>hello</Header>. The colorIndex works fine. screenshot:\n\nAfter I added [fixed={true} to the code <Header colorIndex='brand' fixed={true}>hello</Header>, the color is gone. screenshot:\n\nBut when you shirk the window width under 700px, the color is back, attached with screenshot:\n\n. ",
    "antoine-voiry": "This was solved in a recent version, I simply forgot to get back and update github.\n. ",
    "novecento": "Hi Eric, this is my general idea:\n\nI'd like dynamic resizing as well.. :-P\n. ",
    "sudesh-gama": ".box--pad-horizontal-medium {\n    padding-left: 16px;\n    padding-right: 16px;\n}\ndefault padding is 24px reduced to 16px hope this is the right solution \n. hi all inside grommet.header menu alignment is not working any specific reason, or is there any other way to use it.\nRegards,\nSudesh\n. ",
    "jwijay": "I tested the menu component in ferret.grommet.io in IE11 (Windows), Chrome (Windows/OSX), Firefox (Windows/OSX) and Safari (OSX). The issue appears resolved, as the mobile behavior for the menu has changed to be a smaller drop-down. In desktop (and on a Windows machine), the width of the menu seems appropriate.\nFerret app in IE11, desktop:\n\nFerret app in IE11, mobile:\n\n. Implementation has been updated in Meter.js to to check for active item in series before populating fields object with value/label. Mouseover issue seems resolved.\n. When onClick is not specified in the series options object, the pointer cursor will not be shown on mouseover. This issue seems resolved.\n. Closing this issue, since it appears resolved when testing with screens < 720px in Chrome, Firefox, Safari, and Android.\n. Closing this issue, as it appears resolved when testing Left/Right opening Layer in Chrome, Firefox, and Safari.\n. Closing this issue, since it appears resolved when testing in Chrome, Firefox, and Safari. Dropdown no longer lingers when clicking outside the Layer and resizing the window.\n. PR pending: https://github.com/grommet/grommet/pull/753\n. The latest Grommet Meter example (Arc, Min, Max, Units, Thresholds, Vertical) has the correct labels applied to the min and max values.\n\n. Hello @josephalhamad.\nAre you trying to use SearchInput within a form, or standalone? If you want standalone search functionality, I would recommend using the Search component with the \"fill\" option set to true to get the desired appearance. See here for an example: http://www.grommet.io/docs/develop/Search\n. It looks like React v15 has a known issue with updating range inputs in IE11 using the React onChange event.\n- See here for demo (vanilla JS onchange event firing correctly vs. React onChange event not firing when attached to a range input in IE11): https://jsfiddle.net/m78g29m5/\n- Relevant Github issue: https://github.com/facebook/react/issues/3096#issuecomment-237354102\n- Proposed workaround (using onMouseUp in addition to onChange): https://github.com/facebook/react/issues/554#issuecomment-188288228\nAttaching the _onChangeRange function to the range input's onMouseUp event (in addition to the onChange event) appears to fix the issue for IE11. See PR: https://github.com/grommet/grommet-docs/pull/75\n. Closing this issue, as the relevant PRs have been merged:\nhttps://github.com/grommet/grommet/pull/760\nhttps://github.com/grommet/grommet-docs/pull/75\n. This no longer appears to be an issue in Firefox or Chrome.\n. Closing this issue, since it is not reproducible when testing with the following steps in Chrome, Firefox, and Safari:\n1) open Tiles page (see \"Row\" example)\n2) resize window to mobile size\n3) resize window to desktop size\n4) click next arrow to show more tiles, and previous arrow now appears on left of tiles (instead of right arrow on right of tiles, as previously reported).\n. Resolved by PR: https://github.com/grommet/grommet/pull/438\n. Hi @C5197328 ! We've implemented a justify option for the Tabs component.\nThe updated Docs page is here:\nhttp://www.grommet.io/docs/develop/Tabs\nIf you leave the responsive option to true (default), then for smaller screen sizes, the tabs will stack into a centered column. If you set responsive to false, in smaller screen sizes, the tabs will continue to wrap, and remain left (or right) justified.\n. We're using anchors with icons+labels in the pagination footer, and sometimes we want an icon to be on the right side (e.g. Next -->, instead of --> Next) if we have <-- Previous and Next --> links.\n. resolved in PR: https://github.com/grommet/grommet/pull/433\n. PR: https://github.com/grommet/grommet/pull/435\n. Resolved by PR: https://github.com/grommet/grommet/pull/443\n. Resolved by PR: https://github.com/grommet/grommet/pull/443\n. resolved in PR: https://github.com/grommet/grommet/pull/433\n. Resolved with PR: https://github.com/grommet/grommet/pull/437\n. @L0ZZI The missing header padding between the logo and search components is caused by the pad options being set on the Header component in Brand Central. I.e.\n<Header appCentered={true} size=\"large\" pad={{horizontal: 'medium', vertical: 'none'}}>\nPad defaults for the Header component have since been set to \n{ horizontal: 'none', vertical: 'none', between: 'small'}, which resolves the issue (https://github.com/grommet/grommet/commit/901ff1ccefd928228737598987b0ab93c25c6a66#diff-d5bba4fc125cca74ea565dd662d8ca44R116).\nRemoving the pad option from the Brand Central Header (i.e. <Header appCentered={true} size=\"large\">) results in padding between the logo and header.\n\n. grommet-core PR pending: https://github.com/grommet/grommet/pull/870\n. Issue resolved by PR #870 \n. PR pending: https://github.com/grommet/grommet/pull/461\n. Resolved by PR https://github.com/grommet/grommet/pull/461\n. Thanks for the comments, Alan. I think I addressed all of them.\n. Closing issue, since it appears resolved from merged PR:\nhttps://github.com/grommet/grommet/pull/509\n\n<Menu inline={false}>\n  <Anchor href=\"#\" className=\"active\" icon={<Configuration />}>\n    First\n  </Anchor>\n  <Anchor href=\"#\" icon={<Configuration />}>\n    Second\n  </Anchor>\n  <Anchor href=\"#\" icon={<Configuration />}>\n    Third\n  </Anchor>\n</Menu>\n. Addressed by PR: https://github.com/grommet/grommet/pull/518\n. I believe this is addressed in PR: https://github.com/grommet/grommet/pull/526\n. Ok, added comment to explain forceUpdate usage in Video component.\n. Ok, I've changed the icon-hover-bold mixin to icon-hover-grow, and it scales the icon instead of increasing the stroke-width on hover.\n\n. For future reference: PR https://github.com/grommet/grommet/pull/622 was used in place of #562 \n. PR pending: https://github.com/grommet/grommet/pull/650\n. PR pending: https://github.com/grommet/grommet/pull/683\n. PR pending: https://github.com/grommet/grommet/pull/701\n. Closing this issue, since PR with Safari fix was merged: https://github.com/grommet/grommet/pull/701\n. Tested the codepen (http://codepen.io/nickjvm/pen/akVgaV) and grommet-docs NumberInput example, and both work as desired (without scrollbar) on IE11 (Windows), Chrome (Windows/OSX), Firefox (Windows/OSX) and Safari (OSX).\n\n. Updating PR to use -webkit-svg-shadow fallback for Safari, but use drop-shadow -webkit-filter for Chrome/non-Safari webkit browsers.\nIn Chrome, -webkit-svg-shadow doesn't get applied to the carousel controls (see screenshot):\n\nIt works in Safari, though:\n\n. Hi @ericsoderberghp, I've updated the PR to address your comments. Thank you!\n. Closing since replacement PR got merged: https://github.com/grommet/grommet/pull/827\n. @alansouzati I updated the PR to left-align SearchInput and DateTime form fields (not just Calendar form field). Tested to make sure behavior was consistent across browsers (Chrome, Firefox, Safari, and IE11).\nFixed left-padding for SearchInput + Calendar:\n\nFixed left-padding for DateTime:\n\nPrevious SearchInput + Calendar (Item 6 and Item 8 values jutting out):\n\nPrevious DateTime (Item 13 value jutting out):\n\n. PR pending: https://github.com/grommet/grommet/pull/863\n. Closing issue, related PR merged: https://github.com/grommet/grommet/pull/818\n. Closing since replacement PR got merged: https://github.com/grommet/grommet/pull/827\n. PR Pending: https://github.com/grommet/grommet/pull/877\n. Still left-justified for small screens:\n\nCenter-justified for small screens:\n\nI think the latter looks better if the screen is too small to support all tabs on a single row. What do you think?\n. ok! I'll do that.\n. Thanks! That makes sense.\n. It's overriding a tags created by Link (in this case, in the search results overlay):\n<Link to={this._buildHref(searchResult.data)}>\n  <Anchor tag=\"h2\" onClick={this._onSearchClose}>\n    <strong>{searchResult.title}</strong>\n      ...\n<a class=\"\" href=\"/brandcentral/brand-elements/color-palette\" data-reactid=\".2.1.1:1.1:1.1.0.1.1:$Color Palette.1:1\">\n  <h2 data-reactid=\".2.1.1:1.1:1.1.0.1.1:$Color Palette.1:1.0\">\n    <strong data-reactid=\".2.1.1:1.1:1.1.0.1.1:$Color Palette.1:1.0.0\">Color Palette</strong>\n  </h2>\n</a>\n. Thanks for catching that. Updated the PR.\n. Ok! Re-flattened.\n. The .grommet input style overwrites the right-padding that's used to prevent overlap of the icon and input text. Do you have a recommendation for another way to do this? Thanks.\n. Added a comment explaining reasoning for .grommet prefix to .search-input__input selector.\n. Thanks for catching that. I update the PR.\n. It's the default behavior for media-query(lap-and-up):\n&__summary {\n    position: absolute;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    padding: $inuit-base-spacing-unit;\n  }\nWhen there's a header component being passed in, we don't want extra padding on the header.\n. The visibility hidden there prevents the control button from being pushed to the bottom of the video summary overlay on mobile.\n. I think we might still want the ${CLASS_ROOT}__title if we want to be able to hide the title when the video is playing and being interacted with (i.e., just show a pause button on hover, per estories design). This might be only an estories design.\n. Previously the hit target was 96x96. After this PR, the hit target will be 48x48.\nBefore:\n\nAfter (48x48 hit target):\n\n. Updated the PR to account for null selected props\n. Setting flex-basis to $tile-size causes the heights of the Tiles to be equal for each row (when we want varying tile heights to be preserved for masonry layouts):\n\n. @ericsoderberghp I've updated the PR based on your comments. The sass-variable based column widths get set using the DOM introspection logic in both the fill && masonry and masonry (no-fill) cases.\n. .grommetux-box--width-medium, and margins persist in mobile:\n\nThis section overrides the width and margin:\n\n. @ericsoderberghp \nAdded responsive option to icons in grommet-icon-loader: https://github.com/grommet/grommet-icon-loader/pull/4\nAlso removed WatchIcon mobile styles from Card styles, and updated Icon styles:\nhttps://github.com/grommet/grommet/pull/852/commits/97f131d20cb717cd56f81d609dc6572c77136192#diff-d03f8eb3b97425583c39fc4f55957b12R72\n. Updated the PR to apply flex=\"grow\" on the card content box. It seems to work on Tiles (where we want vertical stretching within a row) without adversely affecting masonry Columns (vertical stretching not desired).\n. @ericsoderberghp: I've updated the PR with the requested changes (removed the list-item styling, and changed the property name from 'truncateCopy' to 'truncate'.\n. Hi @ericsoderberghp, I've updated the PR to align the class label with the property name.\n. The 10ms timeout was only needed for IE11, but I've updated the timeout to get applied in all cases. After further testing, I found that Firefox wasn't getting the correct child widths in time (window.getComputedStyle), and required a 200ms delay.\nFor now, I've updated the timeout to use 200ms, but I'm wondering if it would be better to set the styles based on hardcoded widths, instead of searching for the DOM element and grabbing its width style property (which is not always set in time).\n. Moved code into timeout block.\n. Yes, I've updated _objects.box.scss to apply the proportional box styles in all cases.\nhttps://github.com/grommet/grommet/pull/937/files#diff-33614de6ad927708ac4b9dd6e8d19a0dR12\n. ",
    "kylebyerly-hp": "This may need a bigger fix than simple CSS to work on all browsers.\n. I believe this is fixed\n. Not quite in all cases.\nhttp://www.grommet.io/docs/develop/searchinput\n\nClick into the SearchInput and you'll see the x appear.\nAlso \nhttp://www.grommet.io/docs/develop/search\n\nclicking into the search field and entering data reveals the x.\n. Alan,\nThat's what I tried first, had to poke through the stack to figure out why it wasn't working.\n. Merge conflicts fixed\n. @bryanjacquot Yes, still fails with errorcode=1 for jslint and scsslint issues.\n. Formfield explicitly has\n.form-field select::-ms-expand {\n      display: none;\n    }\nin _objects.form.field.scss. If you are not in a formfield you won't get this currently.\nThis could be globally changed/fixed in relation to https://github.com/grommet/grommet/issues/251 and all the IE overrides moved to _base.input.scss.\n. Also, looks like the icon is hidden/invisible.\n. Probably related, the Title itself is odd in IE11. seems to do something odd with the svg icon.\n\n. Here's a big video -> low color gif so you can see the behavior. Gif is a 5 second loop.\n\n. Hmm. Curiously it looks like if you dev locally (either dist w/ server or dev) the flash is non-existent after the first load. And way less on first load. Which does support the fonts slowing things down.\nAlso looks like it downloads the css twice, thus downloading the fonts twice as well...\n. It does appear to work now\n. You probably got hit by a transitive or a direct dependency using any of the fun version range type options (>, >=, ~, ^, etc)\nnpm shrinkwrap seems to be one way to do lock down specific versions of direct and transitive dependencies for production and reproducability. Of course, this doesn't help you getting an unshrinkwrapped project going again.\nAdding --dev saves the dev deps too.\nCombining this with running npm outdated at the beginning of a new version cycle (and periodically) will probably get what we would want for predictable versioning and keeping up with the latest.\n. May also be related to Title in Header is cut off in IE11 #239\n. Not using minified, but webpack's loaderOptionsConfig.minimize = true;. Even with 4.0.0-beta for styled-components and 3.1.0-beta grommet-icons the error still exists when packaged via webpack.. Done.\n. Yeah. Each browser does their own different rendering of whitespace/padding. Usually in the past to make it consistent I've had to sadly not use select boxes at all.\n. ",
    "scottshaffer": "Yes this is 0.3.1 which I thought was the stable build.  At least I attempted to pull stable and this is what I got.\n\"name\": \"grommet\",\n  \"version\": \"0.3.1\",\n\"dependencies\": {\n    \"intl\": \"^0.1.4\",\n    \"inuit-box-sizing\": \"~0.2.0\",\n    \"inuit-clearfix\": \"^0.2.1\",\n    \"inuit-defaults\": \"~0.2.1\",\n    \"inuit-functions\": \"~0.2.0\",\n    \"inuit-headings\": \"~0.3.0\",\n    \"inuit-images\": \"~0.3.3\",\n    \"inuit-list-bare\": \"~0.3.0\",\n    \"inuit-lists\": \"~0.1.0\",\n    \"inuit-mixins\": \"~0.2.3\",\n    \"inuit-normalize\": \"~3.0.2\",\n    \"inuit-page\": \"~0.2.1\",\n    \"inuit-reset\": \"~0.1.1\",\n    \"inuit-responsive-settings\": \"~0.1.2\",\n    \"inuit-responsive-tools\": \"~0.1.1\",\n    \"inuit-shared\": \"~0.1.5\",\n    \"lodash\": \"^3.8.0\",\n    \"moment\": \"^2.8.3\",\n    \"react\": \"^0.13.1\",\n    \"react-gravatar\": \"^1.0.0\",\n    \"react-intl\": \"^1.2.0\",\n    \"react-router\": \"^0.13.3\",\n    \"react-time\": \"^2.4.0\",\n    \"reflux\": \"^0.2.7\",\n    \"superagent\": \"^1.1.0\",\n    \"yargs\": \"^3.8.0\",\n    \"gulp\": \"^3.8.11\",\n    \"gulp-template\": \"^3.0.0\",\n    \"gulp-install\": \"^0.4.0\",\n    \"gulp-file\": \"^0.2.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"node-uuid\": \"^1.4.0\"\n  },\n  \"devDependencies\": {\n    \"del\": \"^1.1.1\",\n    \"expect\": \"^1.6.0\",\n    \"should\": \"^6.0.1\",\n    \"css-loader\": \"^0.14.0\",\n    \"file-loader\": \"^0.8.1\",\n    \"imports-loader\": \"^0.6.3\",\n    \"babel-loader\": \"^5.2.2\",\n    \"sass-loader\": \"^1.0.2\",\n    \"style-loader\": \"^0.12.0\",\n    \"json-loader\": \"^0.5.1\",\n    \"gulp-chug\": \"^0.4.2\",\n    \"gulp-eslint\": \"^0.12.0\",\n    \"gulp-minify-css\": \"^1.1.0\",\n    \"gulp-mocha\": \"^2.0.1\",\n    \"gulp-live-server\": \"^0.0.21\",\n    \"gulp-preprocess\": \"^1.2.0\",\n    \"gulp-react\": \"^3.0.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-rsync\": \"0.0.5\",\n    \"gulp-sass\": \"^1.3.3\",\n    \"gulp-scss-lint\": \"^0.2.0\",\n    \"gulp-watch\": \"^4.2.4\",\n    \"gulp-coveralls\": \"^0.1.4\",\n    \"gulp-if\": \"^1.2.5\",\n    \"gulp-git\": \"^1.2.3\",\n    \"gulp-prompt\": \"^0.1.2\",\n    \"gulp-bump\": \"^0.3.0\",\n    \"gulp-jsx-coverage\": \"^0.1.3\",\n    \"gulp-open\": \"^0.3.2\",\n    \"gulp-replace\": \"^0.5.3\",\n    \"node-sass\": \"^3.2.0\",\n    \"webpack-stream\": \"^2.0.0\",\n    \"eslint\": \"^0.21.2\",\n    \"eslint-plugin-react\": \"^2.4.0\",\n    \"babel\": \"^5.3.3\",\n    \"babel-eslint\": \"^3.1.9\",\n    \"babel-core\": \"^5.6.15\",\n    \"jsdom-no-contextify\": \"~3.1.0\",\n    \"react-tools\": \"^0.13.1\",\n    \"run-sequence\": \"^1.0.2\",\n    \"webpack\": \"^1.9.11\",\n    \"webpack-dev-server\": \"^1.8.0\",\n    \"node-libs-browser\": \"^0.5.0\",\n    \"glob\": \"^4.3.5\",\n    \"rewire\": \"^2.3.3\",\n    \"mocha-lcov-reporter\": \"^0.0.2\",\n    \"selenium-standalone\": \"^4.2.2\",\n    \"webdriverio\": \"^2.4.5\"\n  },\n. Ah - here is what I have:\n\"dependencies\": {\n    \"react\": \"^0.13.1\",\n    \"grommet\": \"^0.3.1\"\n  },\n. OK thanks - you can close this issue.\n. ",
    "afong94": "hi @ericsoderberghp, my data is output in the format [[16,x],[15,x],[14,x]......], So i guess that currently the xaxis must be configured to follow that format as well. I was under the impression that the order shouldn't matter as much, that a user can enter data values in another order and that the data points could be properly mapped to the xaxis values as well.\n. ",
    "Abhijitforu": "I am new to grommet and i have created chart using it, and i run gulp dist after that i can see html and js pages in gulp dist directory now  i can use this chart but how i can make it dynamic from external java script or anything \n. ",
    "Don-Altobello": "@alansouzati  ,\nThanks for the advice. Today I installed all components again and let it run for a couple of hours. I might have been too impatient before caused by the scripting which doesn't show progress.\nToday I have a working grommet setup. \n. ",
    "rtspotts": "Hi @alansouzati, your info above got me sorted, thanks.\n. ",
    "rstuven": "Thank you! :)\n. I think someone may want to use a different test. For example: /\\.(jsx?|es6)$/\n. ",
    "Spy-Seth": "\nI believe you are facing issues like module react not found?\nNop a syntax error. The JSX compiler (Babel) do not apply on files located in the node_modules directory.\n\nBower was originally made to mange front package while NPM manage nodejs package. But nowadays, NPM is also use with front package (mainly to avoid to manage two dependency manager). Lot's of library distribute itself on both. For example: https://github.com/twbs/bootstrap (only with the styles, but this is the idea). Or another example with a React UI library only on NPM https://github.com/react-bootstrap/react-bootstrap\n. > Are you using webpack?\nI'm using browserify.\n\nI know we could provide a compiled version for each of these components separately, but it adds more complexity to the build environment. We believe that it is just simpler to add grommet to your babel configuration.\n\nAdding grommet to my babel configuration is not a long term solution. Imagine if every package on npm ask to do it: the build time for a project will huge! And the configuration of our build process will be extremely complicated.\nI've look into the Grommet build process. The dist-bower task is really close to a dist-npm task.\nI really think adding a compiled version is a good thing for the project. It will allow you to reach more user. And if you go all the way down, and propose require('grommet').Box it will help you to ensure the components are well done and decoupled.\n. I can't test it this week, but that a greet news! :tada: :tada: :tada: \n\n. Hum I cannot completely test it. My application is a isomorphic react app. And the Grommet code is not isomorphic:  it depend directly on browser API.\n/Users/spy-seth/workspace/rescue/node_modules/grommet/utils/Cookies.js:37\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\nI will have another look later. \n. I'm glad you said this :+1: \n. Ho I haven't put the full stack trace. My bad. \n```\n/Users/spy-seth/workspace/rescue-dashboard/node_modules/grommet/utils/Cookies.js:47\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.;)\\s\" + encodeURIComponent(sKey).replace(/[-.+*]/g, \"\\$&\") + \"\\s\\=\\s([^;]).$)|^.*$\"), \"$1\")) || null;\n                              ^\nReferenceError: document is not defined\n    at Object.get (/Users/spy-seth/workspace/rescue-dashboard/node_modules/grommet/utils/Cookies.js:47:31)\n    at Store.init (/Users/spy-seth/workspace/rescue-dashboard/node_modules/grommet/stores/SessionStore.js:25:29)\n    at new Store (/Users/spy-seth/workspace/rescue-dashboard/node_modules/reflux-core/lib/createStore.js:48:18)\n    at Object.module.exports [as createStore] (/Users/spy-seth/workspace/rescue-dashboard/node_modules/reflux-core/lib/createStore.js:60:17)\n    at Object. (/Users/spy-seth/workspace/rescue-dashboard/node_modules/grommet/stores/SessionStore.js:14:27)\n    at Module._compile (module.js:434:26)\n    at Module._extensions..js (module.js:452:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/spy-seth/workspace/rescue-dashboard/node_modules/babel-core/lib/api/register/node.js:214:7)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object. (/Users/spy-seth/workspace/rescue-dashboard/node_modules/grommet/index.js:77:17)\n    at Module._compile (module.js:434:26)\n    at Module._extensions..js (module.js:452:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/spy-seth/workspace/rescue-dashboard/node_modules/babel-core/lib/api/register/node.js:214:7)\n```\nWe can see that in the session store initialization you do a lot of Cookie.get: https://github.com/grommet/grommet/blob/581840f3e29c9d2ed531261ef5c4182fd15c4e60/src/js/stores/SessionStore.js#L23-L26\n. @alansouzati I've converted my project to browserify that I know better, I will give another try on it in the next week. \n. @alansouzati Sorry to not answer you sooner. My project that start using grommet was canceled. I'm still fan of this lib, I will give it another try when I can.\n. ",
    "mattbrewer-educredu": "I'd also love it if you guys made a compiled version of grommet available. I came across Grommet a few weeks ago while looking for some react charting components and found a few other components and that I didn't realize I needed.\nI've compiled my own local versions of the Grommet components, but it was a little more work than I would have liked, and I'm probably limiting myself because I don't plan on going through that process again so I won't be able to leverage any patches or updates until you guys ship precompiled components.\nAnyways, the only reason I went through the hassle of getting the components compiled was to use them with React UI Builder (https://github.com/ipselon/react-ui-builder), and they work great with it. The UI builder is good for throwing together some quick mock ups. I think if you guys get the compiled components going you should spend some time getting them into the UI builder, it could get you some extra visibility. \nI really like what you guys have put together here, thanks for making it open source. \nP.S - Is there actually a Grommet blog? The current link on the site links to the get started page, and I'd love to get my Grommet updates in RSS fashion.\n. ",
    "primozs": "To make it work like a library I needed grommet stable and\n{\n  ...\n  dependencies:  {\n    \"grommet\": \"https://github.com/HewlettPackard/grommet.git#stable\"\n  }\n}\nalso root setting in webpack\nresolve: {\n    modulesDirectories: [\n      \"src\",\n      \"node_modules\"\n    ],\n    root: [\n      path.resolve(__dirname, 'node_modules'),\n      path.resolve(__dirname, 'src'),\n    ],\n    extensions: ['', '.js', '.jsx', '.scss']\n  },\ncheers\n. @AngusMackHPE \nTo get everything to work, I installed stable branch. Check also all the dependencies that usual grommet application need. This will also not work with React 0.14.0 only with 0.13.3. When I tried Grommet \"react14\" branch I again could not require Grommet components, my webpack config was not working. \nIt looks to me that somehow minimum dependencies for client app would be something like this:\n$ grommet init sample-app\n\"body-parser\": \"1.14.1\",\n    \"grommet\": \"git+https://github.com/HewlettPackard/grommet.git#73f83edf5b1a143e9f1b29cfa28e01fe46fe40d4\",\n    \"intl\": \"^1.0.0\",\n    \"inuit-box-sizing\": \"~0.2.0\",\n    \"inuit-clearfix\": \"^0.2.1\",\n    \"inuit-defaults\": \"~0.2.1\",\n    \"inuit-functions\": \"~0.2.0\",\n    \"inuit-headings\": \"~0.3.0\",\n    \"inuit-images\": \"~0.3.3\",\n    \"inuit-list-bare\": \"~0.3.0\",\n    \"inuit-lists\": \"~0.1.0\",\n    \"inuit-mixins\": \"~0.2.3\",\n    \"inuit-normalize\": \"~3.0.2\",\n    \"inuit-page\": \"~0.2.1\",\n    \"inuit-reset\": \"~0.1.1\",\n    \"inuit-responsive-settings\": \"~0.1.2\",\n    \"inuit-responsive-tools\": \"~0.1.1\",\n    \"inuit-shared\": \"~0.1.5\",\n    \"lodash\": \"^3.8.0\",\n    \"moment\": \"^2.8.3\",\n    \"react\": \"0.13.3\",\n    \"react-gravatar\": \"^2.0.0\",\n    \"react-intl\": \"1.2.1\",\n    \"react-router\": \"1.0.0-rc3\",\nmy webpack config\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar PORT = process.env.PORT || 8888;\nvar HOSTNAME = process.env.HOSTNAME || \"localhost\";\nvar APP_PATH = path.resolve(__dirname, 'src');\nvar ENTRY_PATH = path.resolve(__dirname, 'src', 'client', 'index.js');\nvar NODE_MODULES_PATH = path.resolve(__dirname, 'node_modules');\nvar BUILD_PATH = path.resolve(__dirname, 'public', 'scripts');\nvar sassLoaders = [\n  \"css-loader\",\n  \"autoprefixer-loader?browsers=last 2 version\",\n  \"sass-loader?sourceMap&outputStyle=expanded&\" +\n  \"includePaths[]=\" +\n  encodeURIComponent(path.resolve(__dirname, \"./node_modules/\")) + \"&\" +\n  \"includePaths[]=\" +\n  encodeURIComponent(path.resolve(__dirname, \"./src/\"))\n];\nmodule.exports = {\n  name: 'client',\n  context: __dirname,\n  devtool: 'inline-source-map',\n  target: 'web',\n  debug: true,\n  cache: true,\nentry: [\n    \"webpack-dev-server/client?http://\" + HOSTNAME + \":\" + PORT,\n    'webpack/hot/only-dev-server',\n    ENTRY_PATH\n  ],\n  output: {\n    filename: 'bundle.js',\n    path: BUILD_PATH,\n    publicPath: \"/scripts/\"\n  },\nmodule: {\n    preLoaders: [\n      {\n        test: /.(js|jsx)$/,\n        loaders: ['eslint-loader'],\n        include: APP_PATH,\n        exclude: [NODE_MODULES_PATH]\n      }\n    ],\n    loaders: [\n      {\n        test: /(.jsx|.js)$/,\n        loaders: ['react-hot', 'babel-loader?stage=0'],\n        exclude: [NODE_MODULES_PATH]\n      },\n      {\n        test: /.scss$/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", sassLoaders.join(\"!\")),\n      },\n      {\n        test: /.css$/,\n        loader: 'style-loader!css-loader'\n      },\n      {\n        test: /.(png|jpg)$/,\n        loader: \"url-loader?limit=8192\"\n      },\n      {\n        test: /.woff$|.ttf$/,\n        loader: 'file-loader?limit=100000'\n      }\n    ]\n  },\nplugins: [\n    new webpack.DefinePlugin({\n      DEV: JSON.stringify(JSON.parse(process.env.BUILD_DEV || 'true')),\n      PRERELEASE: JSON.stringify(JSON.parse(process.env.BUILD_PRERELEASE || 'false')),\n      CLIENT: true,\n      SERVER: false\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new ExtractTextPlugin('main.css', {\n      allChunks: true\n    })\n  ],\nresolve: {\n    modulesDirectories: [\"src\", \"node_modules\", \"modules\"],\n    alias: {},\n    root: [\n      path.resolve(__dirname, 'node_modules'),\n      path.resolve(__dirname, 'src', 'modules'),\n      path.resolve(__dirname, 'src')\n    ],\n    extensions: ['', '.js', '.jsx', '.scss']\n  },\neslint: {\n    configFile: '.eslintrc'\n  },\ndevServer: {\n    contentBase: \"./public\",\n    hot: true,\n    inline: true,\n    lazy: false,\n    quiet: false,\n    noInfo: false,\n    headers: {\"Access-Control-Allow-Origin\": \"*\"},\n    stats: {colors: true},\n    host: HOSTNAME,\n    historyApiFallback: true,\n    port: PORT\n  }\n};\n```\nLet me know if it works for you or you get some better setup.\ncheers\n. @linde12 \nHi, maybe this helps?\nhttps://github.com/primozs/react-hello/tree/step4-grommet\n. @linde12 sure you can use it however you want. Cheers\n. @linde12 To se see how to import something I am often using:\nhttp://www.grommet.io/docs/develop\nhttp://www.grommet.io/docs/develop/icon\nhttp://www.grommet.io/docs/develop/app\nhttps://github.com/grommet/grommet-docs (source of the previous link, very useful)\nfor app and icon it should be imported like this:\nimport App from 'grommet/components/App';\nor\nvar Action = require('grommet/components/icons/base/Action');\nimport Action from 'grommet/components/icons/base/Action';\n. @ericsoderberghp Hello,\nStore is being set by Provider. \nlet appEl = document.getElementById('app');\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <IntlProvider locale={'en'} messages={localeData}>\n        <Router routes={routes} history={history}/>\n      </IntlProvider>\n    </Provider>\n    {renderDevTools(store)}\n  </div>, appEl);\nThe same container receives state if I don't wrap it with Layer container as a child.\n```\n// like this MainSidebar receives redux state\nvar sidebar = (\n      \n    );\n// like this it does not\nvar sidebar = (\n      \n\n\n    );\n``\n. @ericsoderberghp I did not check whyintlandrouter` is being explicitly set in Layer context but if I understand correctly it should be automatic. Is it possible that context settings in Layer are overwriting the rest of the context? \n. @ericsoderberghp Thank you, I will try it out.\n. @ericsoderberghp I have tried the stable branch and now Component is no longer complaining about state and context, so this seams to be ok. \"Routers history\" on the other hand is somehow not working.\nIn this component that I am using as a child of Layer, i am importing Link\nimport { Link } from 'react-router';\nit is the same issue as before, if my component is not a child of Layer it works other wise on the clikck of Link I get this error:\nCannot read property 'pushState' of undefined\nit seams that with the router in context maybe there should be also history object.\n. @ericsoderberghp I have added the history object to Layer and LayerContents context and it works. \nHistory object is now required by router.\n. @ericsoderberghp I have created pull request but from master branch. Is this ok? How is stable branch being generated currently?\n. Thank You, Cheers\n. @alansouzati Thank you :)\n. Yes, I guess both options should work. Do you think its ok like this? What should I do about coverage since it is not passing.\n. Ok, I have changed it to PropTypes.any\n. Thank you for explanation. For the use case: with fixed \"suggestions\", SearchInput looks a lot like nice \"advanced\" select box or \"search select\" box but icon should be replaceable. Icon could be \"down\", \"caret-down\" or something else ...\n. @bryanjacquot Beside select options to have also autocomplete options, I had in mind something like this. https://github.com/JedWatson/react-select To make an example for myself I modified SearchInput to change icon. The next thing would be \"x\" button to remove current selection! \n. convenience why not? It works also the other way around if you have component using styles you can still use classes...  Example: https://github.com/jxnblk/rebass\n. @alansouzati \nHi,\n1. You could make them themeable trough App component injecting theme object trough context but this is not the point, I am not suggesting this. With adding style property I am not suggesting Grommet components available as library should start using it. I just think it should be there available for end users.\n2. I know Grommet is following BEM but I don't see this relevant. If I am using Box or some other component in my prototype and I need some style change should I need to jump trough hoops creating classes and files to make some small change? Talking in an Application not in component that will be published in Grommet library. \nIn my opinion adding style should not hurt...\nCheers\n. I found myself now often enough that I needed small change on the Box but then ok, I can't use style I will use \"div\" but then ok now I am using \"div\" I need everything that Box is giving me. This is the reason I proposed this. \n. @zalmoxisus I like this idea to transfer properties.\n. Hello to both,\nWhat do you think?\n. Hi @zalmoxisus my idea was to spread all the properties first, then all propType properties will merge over, overwriting the values.\n. Aha, so they should be inverse picked:\nconst boxProps = Props.pick(this.props, Object.keys(Box.propTypes));\n. Hi, Thank you both for suggestions.\n. Hello @alansouzati what do you think about this one?\nCheers\n. @ericsoderberghp \nProperties transfer would also solve things like this #467 \n. Hello @ericsoderberghp,\nWhat would you prefer to do or change with this pull request?\nCheers\n. Hello, let me know your opinion.\nCheers\n. Because index-icons is in .gitignore you can have this file still there and the problem is not noticed if you are building grommet yourself. For me this became visible when I build application for production with stable branch.\n. Hello @alansouzati,\nThis issue with index-icons still persist in the latest stable branch.\nvendors.js:158 Uncaught Error: Cannot find module \"./index-icons\"\nWhen I build \"dev\" I don't have this error only for production.\nIcons: {\n    Grommet: require('./components/icons/Grommet'),\n    Spinning: require('./components/icons/Spinning'),\n    Status: require('./components/icons/Status'),\n    Base: require('./index-icons') ****\n  },\n. When I remove grommet from \"vendors\" in webpack config, then error disappears.\n. @alansouzati I see its fixed..\nCheers\n. This is in gitignore \n**index-icons**\n. @alansouzati Interesting, I thought that to build grommet all you need is to run gulp dist. but this does not run generate-index-icons for index-icons to be build gulp dist-bower needs to be run also.\nIs this ok?\n. @grantnorwood \nYou can check this project:\nhttps://github.com/primozs/feathers-react-bojler\nspecifically:\nwebpack.config.dev.js\nwebpack.config.prod.js\npackage.json\nCheers\n. I can make a PR but tomorrow evening. \nCheers\n. @phuson Hi, I am sorry but I did not see your message.\nI would want to change the \"inline\" property  in render method when new set of properties arrive. \nThis is what I would like\n// render return\n<Menu inline={this.props.inlineNav} direction={this.props.directionNav}>\n    ...\n</Menu\nThis is what I have to do now.\nNow I have to use state to use Menu and I have to manually trigger set state on menu.\ncomponentWillReceiveProps(nextProps) {\n    this.calcScreen(nextProps);\n  }\ncalcScreen(props) {\n    if (width <= browser.breakpoints.extraSmall) {\n       // I have to manually set menu state\n      this.refs.menu.setState({inline: false});\n      this.setState({\n        inlineNav: false,\n        directionNav: 'column'\n      });\n    } else {\n      this.refs.menu.setState({inline: true});\n      this.setState({\n        inlineNav: true,\n        directionNav: 'row'\n      });\n    }\n// render return\n<Menu ref=\"menu\" inline={this.state.inlineNav} direction={this.state.directionNav}>\n    ...\n</Menu\n. my mistake with Split component\n. Hi @alansouzati yes its true, I will solve it.\nCheers\n. Hi @epilande Thank you for your example!\nI am testing on phone android 6, chrome browser and your example works. \nIt might be the problem that I have this structure two levels deep. I have tried to modify your example like that and it still somehow looks ok. I will try to reproduce it and check your example again. Until then I guess this can be closed. Thank you for help!\n. Looks great!\n. I think key is:\n{\n        test: /\\.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n        'includePaths[]=' +\n        (encodeURIComponent(\n          path.resolve(process.cwd(), './node_modules')\n        )) +\n        '&includePaths[]=' +\n        (encodeURIComponent(\n            path.resolve( process.cwd(),\n              './node_modules/grommet/node_modules'))\n        )\n      },\nwhole example\nhttps://github.com/primozs/feathers-react-bojler\nCheers\n. Hi @alansouzati, I will check it out...\nCheers\n. Hi, @alansouzati \nBetter then window.scrollTo(0,0) It looks to me that in _object.layer.scss visibility: hiden; should be changed to display:none;\n```\n// _object.layer.scss\n@include media-query(palm) {\n    &:not(.#{$grommet-namespace}layer--hidden) + .#{$grommet-namespace}app {\n      // visibility: hidden;\n      display: none;\n      width: 0px;\n      height: 0px;\n  // IE11 specific fix for layer to hide content behind layer and\n  // eliminate white gap under layer content (when content behind is taller)\n  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n    display: none;\n  }\n}\n\n}\n```\nWhat do you think?\n. Ok, But then we could use suggested solution:\nposition: absolute !important;\n   top: -9999px !important;\n   left: -9999px !important;\nor just:\noverflow: hidden;\nBoth seams to work.\nI only tried this in Chrome.\n. This goal:\n- Grommet CSS styles do not affect any other, possibly non-grommet, elements.\nIs currently the biggest issue when you try to use some app module with no grommet dependencies with grommet app. The most noticeable that buttons \"explode\" to grommet size buttons and style. . How could these be prevented from applying on non grommet module components?\nAny suggestions? Thx\n```\n.grommet * {\n   box-sizing: inherit;\n}\n.grommet dd, .grommet li:not([class^=\"grommetux-\"]) {\n  max-width: 576px;\n  margin-left: 0px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.375;\n  color: #666;\n}\n.grommet input[type=\"button\"], \n.grommet input[type=\"submit\"], \n.grommet button:not(.grommetux-button) {\n  padding: 6px 22px;\n  background-color: transparent;\n  border: 2px solid #0a64a0;\n  border-radius: 4px 4px 4px 4px;\n  color: #333;\n  font-size: 19px;\n  font-size: 1.1875rem;\n  line-height: 24px;\n  font-weight: 600;\n  cursor: pointer;\n  text-align: center;\n  outline: none;\n  min-width: 120px;\n  max-width: 384px;\n}\n```\nThese are a bit annoying because they are completely global instead applied to grommet-button or anchor and on the top they have a bit bigger specificity then for example custom MapButton with className=\"map-button\" that is not related to grommet. . # My specific case\nStructure\n```\nSubApp\n - no grommet style or components\n - modules a, b, c with styles and components\n - specific ui components on and around geo map for geographic data interaction\n - components\n    - buttons\n    - lists\n    - graph\nNoGrommetApp\n    SubApp \nGrommetApp (root .grommet class)\n    SubApp (root .subapp class)\n```\nGrommet styles I had issues with\n```\nThis gave me small issue with graph component (third party)\n.grommet * {\n   box-sizing: inherit;\n}\nThis gave me issues with custom list components\n.grommet dd, .grommet li:not([class^=\"grommetux-\"]) { ... }\nButtons\n.grommet input[type=\"button\"], \n.grommet input[type=\"submit\"], \n.grommet button:not(.grommetux-button) { ... }\n```\nStyle fixes\n\nFirst part was to prefix submodules with a custom prefix. This should be done\nin the first place anyway.\n\nbuttons fix\n.subappprefix button.subappbutton {\n min-width: inherit;\n max-width: inherit;\n    ... \n}\n\n\nIntegration part bellow:\n\n\n```\nsubappRoot.scss \nloaded when user loads the SubApp in grommet app and combines submodules styles\n.grommet .subapp * {\n  box-sizing: initial;\n} \n.grommet .subapp dd,\n.grommet .subapp li:not([class^=\"grommetux-\"]) {\n  max-width: inherit;\n  margin-left: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  color: inherit;\n}\n// SubApp imports \n@import \"~submodule-a\";\n@import \"~submodule-b\";\n...\n```\nI like when grommet is applying general style like typography giving \nme components for layout and other general components. I just think\nsome style should not be global. The most sticking out are the buttons.\nIf I want to use grommet button component I will use it. But I would\nnot expect that grommet would style every button it comes across. \nOtherwise it works for me.\nCheers\n. I would also need something like this:\nonKeyDown(e) {\n    switch (e.keyCode) {\n      case 13:\n        // enter - search\n        break;\n      case 38:\n        // arrow up - previous search in history\n        break;\n      case 40:\n        // arrow down - next search in history\n        break;\n    }\n  }\nCurrently I am using modified version of Search component.\n<input key=\"input\" id=\"search-drop-input\" type=\"search\"\n         ...\n         onKeyDown={this._onKeyDown}/>\n. I can check in a few days.\n. @alansouzati I was trying couple of things but did not found good solution. I was thinking you might have some good idea. Currently not removing the propTypes in Grommet seams like the best one. But in my app code I don't have to do it like this. . Hi @karatechops \nYes, locale gets selected and rendered also on the server. \nYes, I guess I could always do this \nif (typeof window !== 'undefined') {\n  Intl.NumberFormat = IntlPolyfill.NumberFormat;\n  Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;\n}\nbut I would need custom grommet App component implementation like I have now. I guess this is not an issue then. Somehow I thought this should be solved with webpack.\n. @ericsoderberghp Children property was declared so it is on the list to be omitted for the prop transfer. \n. @ericsoderberghp Do you think there should be some props change checks here or this is ok?\n. Hi @zalmoxisus sorry for late reply, you are right. I have updated the code.\nCheers\n. ",
    "AngusMackHPE": "@primozs - can you send a sample of your complete webpack config and component file please? I'm stuck getting this to work.\n. @primozs thanks for your detailed reply and sorry it has taken a while to get back. I got this working relatively easily in the end. I used the react-rocket-boilerplate project as a base and was able to use grommet as a lib for my project.\nHad to keep react dependency at ^0.13.0 which is a bit of a pain as would like to move to 14 for some other dependent libs but all in all good so far.\n. I am using it outside FormField and had a chance yesterday to confirm this behaviour. And thank you for highlighting the CSS that needs applying to fix this. I will confirm it is fixed using this style.\n. For my current project I was able to set the appropriate styling for my select boxes and it works fine in IE and Chrome now.\nThank you for the assistance. \n. Was using this outside a formfield element. Using it inside one resolves this issue.\n. ",
    "mingfang": "+1 to get grommet as NPM module and working with React 0.14 and Webpack\n. Never mind.\nChanging to the \"next\" dependency fixed it, https://github.com/grommet/grommet/wiki/Grommet-Next-and-React-0.14\n. Nevermind.\nIt disappears after I included the grommet.css file properly.\nBut I think I would still love to see some documentation on SkipLinks \n. @noahehall sorry it's been a while and i can't find that code anymore. ",
    "thiagoc7": "@alansouzati thanks for this amazing library!\nI git it a try using gaearon's boilerplate, react 0.14, and it is working just fine, no issues at all.\nhere the repo I created, it's the official todo using webpack and alt.\nThanks!\n. One example would be filtering the todos when you hover over the status arc.\nIn this case, we just need a callback with the getLabel() result that originated the arc.\n. you are right... we could use onPress, and abstract both onClick and onTouch... events.\n. The Meter component is very complex, so I think It would be better if I wait for your call before touching the code.\nMaybe in a future version you could think about a set of charts where we have a main chart container, and the elements are just regular children.\nThis could open the framework for more UX complexity. Like, I could trigger the onPress event from another component, or when same rule is achieved.\nIt's just ideas... the most important is that you could abstract all the complexity of the charts, and created an amazing library! Thanks again!\n. ",
    "linde12": "Any news about this? I wish to use grommet as a library so i can use all the components in my projects with browserify and babel.\nRight now i do something like:\nimport App from 'gormmet/components/App';\nimport Header from 'gormmet/components/Header';\nWhat i would expect is:\nimport {App, Header} from 'grommet';\nI also don't get the css included by doing this(obviously).\nMaybe the grommet components could be a separate repo which grommet depends on? I'm not sure what's best but i'd really like to use Grommet's awesome components! :)\n. @alansouzati \n@primozs \nThanks for the quick replies. I tried using the ES6 import {A, B} from 'C' in my app but didn't manage to get it working. I will try tomorrow again and get back at you if i still encounter the problems. Most likely it's bad usage on my part.\n@primozs \nIs it okay to clone your lib and use it as a base? It's pretty much exactly what i want. Redux, Grommet, React, ES6... Then i'll just have to add Traverson for HATEOAS! :+1: \n. @alansouzati \nAh, today i tried again and the import {App, Header} from 'grommet'; still doesn't work but it seems it's due to another error i get when importing some other components that uses icons:\nCannot resolve 'file' or 'directory' ./icons/base/Up in /path/to/project/node_modules/grommet/components @ ./~/grommet/components/Article.js 47:10-36\nBefore i ran browserify and thought that might be the problem(because of the grommet-icon-loader npm module for webpack) but even using @primozs webpack-config i still get this error. I also went to the grommet-icon-loader rep and added the loader specified there to the webpack-config without any luck.\nI wish i could run it with browserify, but if that's not possible then it'd be cool if i could get it running with webpack.\nDo you have any clues to what the problem might be?\n. @primozs Ah, yes, sorry for not being clear. I'm trying to use the Article component which, in it's turn, seems to be importing ./icons/base/Up but doesn't manage to import it properly.\nIt's basically what we've got over at the docs for Sidebar but i also use Article at some point.\nSo when i do import Article from 'grommet/components/Article'; i get the error mentioned in the previous comment.\n. @alansouzati Ah i see, then it should be no problem at all... Hmm! Regarding browserify it should work right off the bat then. I also tried with webpack but i get the same error. I will give a detailed error message once i'm home in a few minutes!\nThanks for all the help so far!\n. Here is a picture where you can see some of the code(basically just the import that is interesting) and the error message i receive afterwards.\n. @alansouzati I'm afraid it's as @zalmoxisus suggests! stat /home/linde/go/src/ioboxrevel/public/node_modules/grommet/components/icons/base/Up.js gave me a No such file or directory error!\nHowever it exists at icons/Up.js\n. @alansouzati Yeah, getting there! :)\nI'm using node v5.6.0, npm 3.6.0.\nI installed grommet from npm via npm install --save grommet and ./node_modules/grommet/bin/grommet.js --version yields 0.5.4\n. Ah, i see! Weird! Is there anything i can do manually to retrieve the icons?\n. Oh! Hope it's not too much trouble, heh!\n. On it..!\n. Wohoo! Now everything works! :) Both import * as Grommet from 'grommet';(even though i won't be using it) and the Article import doesn't yield errors! Works fine with Browserify.\nSuccess, hehe!\n. For clarification i made a fiddle of the problem. The problem is the same i have when i use Grommet.\nOpen the console and toggle the button and you'll see that the children get's unmounted and mounted every toggle instead of just being re-rendered or \"moved\"\n. @alansouzati \n@eabay \nSorry for getting back to you so late. Damned timezones.\nAnyway, the problem is as @eabay describes it. Since the props are conditionally rendered they seem to always be remounted.\nIf you look at the DocSplit of the grommet-docs repo here you are using it the same way as i did(as i had a look at the source :-)):\n- When the window is small(responsive=single) the left variable is the content(_.renderDoc()). If showMenu is true then left variable is instead the menu. In both cases the right variable is undefined since we only want one column.\n- When the window is big(responsive=multiple) the left variable is always the Menu and the right variable is always the content/doc.\nSo unfortunately i think we will always need the if around this.props.children to determine whether we're in single-mode and are showing the menu or not.\nAs of now i'm using Redux so apart from the extra API calls, right now, the user doesn't notice anything on the page except maybe some possible updates. However when i start adding forms etc. they'll be reset, like @eabay said, when the window resizes unless i store them in the redux store.\nWish i had a working solution to share! If i find something interesting i'll make sure to post it.\n. @alansouzati Oh and the DocSplit component had the same problem as described above, so unfortunately the fix to the fiddle won't fix the problem else i'd be happy to contribute. As it looks now the {this.props.children} have to be wrapped in a if-statement. :(\n. Looking at the Split component over here we can see that it's always conditional and will be remounted every time. I updated your fiddle to mirror the conditions in the render method of Split. See here\nThe only option, as i see it, is to hide the the unprioritized component with CSS to avoid it being remounted as a cause of the if-statements.\n. I think i've got a fix for this coming up tomorrow hopefully. It involves some CSS and isn't perfect but it works. If we didn't have to take priority into account it'd be an easy fix but now i have to hide elements.\nI'll get back to you tomorrow!\n. My fix wraps the elements that shouldn't be visible in a div with a css display property set to none. Works perfectly for me. No more remounting. And when in responsive=single mode i pop a Layer to show the menu.\nI'm not sure if we want to merge this \"fix\" or not since it changes the behavior of Split to not remount.\nWhat do you think @alansouzati?\n. @alansouzati Can you have a look at this diff when you have time?\nIt solves the problem of the components remounting(thus refetching data, resetting state etc.) but introduces another problem when Split is used with 3 or more children.\nThe flex breaks since the children are wrapped in two separate div elements in order to hide/show them at the correct width.\nI just thought that maybe you'd have some better way of solving this after seeing the merge? Or if you've got some css-magic to make the flex work anyway?\n. Having the imports in the docs would be great!\nShould we create a separate issue in the docs-repo and close this one?\n. This only works if there are 2 or more elements present as children i think. If you split with one child and have priority on right this won't work. Looking into it...\n. Almost done now. Fixed a bug and doing some more testing. Will put up another patch as soon as i'm ready.\n. Would love for someone to verify and review. I think this should do it. Basically what i've done is keep rendering all the components passed to Split but wrapping them in a div with a display: none style if they should be hidden. This prevents remounting of the component and fixes #460 \n. By the way, if you can't reproduce it, the console error i'm getting is:\nDOM.js line 45: Uncaught TypeError: Cannot read property 'parentNode' of undefined\n    at findScrollParents (eval at <anonymous> (http://localhost:8000/main.js:6373:2), <anonymous>:45:23)\n    at Drop._onResize (eval at <anonymous> (http://localhost:8000/main.js:6535:2), <anonymous>:281:58)findScrollParents @ DOM.js?fa49:45_onResize @ Drop.js?315c:281. Hey Alan! Sure can do, but i doubt it will change the fact that we cannot use setState in the callback handler due to its asynchronous nature. Maybe we can fiddle some in componentWillReceiveProps, but then again we won't know \"when\" a button was clicked, we just know a new prop has been passed.\nHere is the codepen reproducing it using the same technologies(react, redux, react-redux, redux-form) & Grommet. https://codepen.io/anon/pen/awapJr?editors=0010. @ericsoderberghp I like the idea of removing Title and Headline and use Heading instead. I'm always confused with which one i should use.. I'm thinking that this might be by design(since there are no suggestions it might be weird for onSelect to be called) but i still think there should be an easy way to check if the user has pressed enter without using onKeyDownand checking the keycode. Maybe onSearch or onEnter?\nI also think that we should present an error in the console instead of a stacktrace when there is no suggestions prop, or just not try to call onSelect at all if there are no suggestions prop.. Oh, great! Thanks!. What's the status on this?\nAfter a bit of poking around i see that currently Grommet v2 Select behaves similar to the one in v1 and i'm just curios if that will change before release or not?. Ok! Do you know the reason why? I think the way it is now it's cumbersome to use :/. I'm having the same issue.\nI'd like to disable my <Button type='submit' /> when it's been pressed and API calls are pending. I was trying to do something like this: <Button type='submit' onClick={submitting ? null : handleSubmit} /> but i think <Button type='submit' disabled={submitting} /> is much more readable(and also works on type='submit' without passing a onClick.\nI'm working on an embedded device where API calls can take seconds to complete, so this is a must for us.\nI understand that this is not beautiful: <Button type='submit' onClick={() => {}} />\nBut not being able to disable a submit button is a bigger problem.\nMy proposal is the disabled prop, but to be consistent it would have to be implemented in Anchor(w/ friends) as well. The \"quick\" fix is.\ntl;dr:\nDifficult to solve, but definitely a problem that shouldn't be ignored :/. Hey @alansouzati, do you think this will be released anytime soon?. This should solve #1558 in Grommet 2. Maybe this is because grommet isn't using React 16 yet, i get the same error.\nIt is because this.setState({ routeChanged: false }, this._updateAnchors); in SkipLinks.js which calls some React 15.3.x method internally. I will try with Grommet upgraded with React 16 and update with results.. Yep, after removing react 15 from node_modules/grommet/node_modules/ and specifying ^16.0.0 in package.json (shouldn't have any impact, but i did it anyway) i can confirm that it works. My app works like before from what i've seen.. @slipperypenguin I haven't used that icon, but the icons i use (AddIcon amongst other) work fine :confused:\nI have a pretty complex app and just by upgrading the versions everything worked fine for me. I also didn't have any trouble regarding react-desc, i just installed grommet via yarn and then replaced the react & react-dom dependencies with version 16. Looking at the PR for react-desc it seems like it should only affect tests @slipperypenguin \nMaybe there's another issue causing this error?. @jamiepenney I see, however the error occurred for me because of Grommet's SkipLinks component (which does something like this.setState({ value }, this.doSomeMore );) and not because of react-desc. Look over here: https://github.com/grommet/grommet/blob/master/src/js/components/SkipLinks.js#L45\nEither way, it all boils down to different versions of react being bundled. So just upgrading all packages using react to react 16 should work! :+1: . I think we can close this due to 1.8.0 release? See: https://github.com/grommet/grommet/releases/tag/v1.8.0. After some more research and trying to produce a js-fiddle i can see that it only happens when the Select is within a FormField. FormField forces a height of 36px on to the input element. See: https://codepen.io/anon/pen/NwYWEN\nI'm guessing it has to do with this line: https://github.com/grommet/grommet/blob/v1.8.2/src/scss/grommet-core/_objects.form-field.scss#L164. @alansouzati No, no specific reason. Want me to change it to a div?\n. ",
    "zalmoxisus": "I confirm the same error with Webpack. The file really doesn't exist. It should be ./icons/Up, though Down icon is present in both directories, which is strange.\n. @alansouzati, thanks for fixing the problem with icons! Could you also push the changes corresponding to the version tag? I don't see these changes in grommet@0.5.5, though the commit corresponds to v0.5.5 tag.\nSo, I get the following behaviour:\n\nAccording to the demo, the buttons should have the same height regardless of having an icon inside or not. Also, would it be possible to add these fixes to other themes as well? Should I open a new issue for that?\n. Any reason of mixing inline styles with classes? You can just add a custom class to it.\n. Maybe better just to transfer properties to the Box component? So in this way we support inline styles (without encouraging them) and also allow other properties. For example, with balloon-css we can add a tooltip to the box just by using <Box data-balloon=\"Whats up!\"> ... </Box>.\n. @primozs, the same problem comes to adding tooltips (as I described above). It's a good technique to inherit properties in the reusable components, instead of having the necessity to wrap them with another div. Though it is not as easy to accomplish in the case of Box component. Usually I just use:\njs\nrender(){\n  const { prop1, prop2, ...rest } = this.props;\n  return <div {...rest}>{ /* ... */ }</div>\n}\n. Hey, @primozs, unfortunately, it's not that simple in this case. You don't want all the properties there (like children and others) and also you don't want to duplicate tag property.\nAs you can see from my example above, rest will not contain prop1 and prop2.\nSo, instead of prop1, prop2... there should be all the properties of the Box component. Then spread operator will take the rest properties we want to transfer.\nLet's also wait to see if @alansouzati agrees with this scenario, as there would be a lot of changes.\n. Some properties are not intended to be used for the root tag.\nYou'll get something like <this.props.tag tag={this.props.tag} children={this.props.children} ..., which you don't want to.\n. Yes, that should do the trick :)\nThe operation seems to affect the performance when having a lot of boxes rerendered, and would be great to to have this.boxProps set in the constructor or in componentWillMount, not in the render function, but probably it wouldn't work for some cases.\n. @alansouzati, I'm also confused about this change. I  used to use it like so:\njsx\n<List>\n{channels && channels.map(channel => (\n  <ListItem selected={channel.id === selectedId}>{channel.name}</ListItem>\n))}\n</List>\nTraversing the array of objects twice, in order to find the index of the channel by id, to pass to List component doesn't seem optimal. So, I'll still probably pass it to ListItem and go with a className to emulate selected behaviour, though keeping the selected prop for ListItem would be useful.\n. @alansouzati, I guess it will not work with the current API, selected should be just the item's index.\nNot sure how we can implement that internally to pass ListItem's id. In case of Select we just pass ids as option's values, but here not sure we want to add a value prop for ListItem.\n. @alansouzati, sure.\nHere's the old implementation with the deprecated ListItem's selected prop: http://codepen.io/anon/pen/pEYvQx.\nHere's the desired implementation which wouldn't work because List's selected prop is intended to be the ListItem's index not the value: http://codepen.io/anon/pen/VKRYom.\nThanks for looking into it!\n. Here's how we could still use it without the deprecated selected prop: http://codepen.io/anon/pen/ALwvKA, though it would be better to still have that prop back.\n. @alansouzati, sorry for misunderstanding, but you're using ListItem's index, not the channel id. The problem is that I don't know the index in the current list by id. As I stated before:\n\nTraversing the array of objects twice, in order to find the index of the channel by id, to pass to List component doesn't seem optimal.\n\nUnless you have a better solution than me to find selectedChannel by selectedId.\n. @alansouzati, I'm maintaining it in Redux store and, yes, storing the index there could be a solution, but some channels can be removed or added in the meantime. Don't want to take too much of your time. Just wanted to point out that deprecated selected prop could still be useful.\n. @ericsoderberghp, I see. However, there are even more nuances the dev should take into account when maintaining the selected index for dynamic elements (like removing, adding, reordering elements).\nIt would be rather useful to have the same API here as for Select component, e.g.:\n``` jsx\n this.setState({ selectedId: value })}\n\n{channels && channels.map(channel => (\n    {channel.title}\n  ))}\n\n``\n. Instead of duplicating code, better to move it back torender, which will be the same (sorry about my misleading comment above). Checking props change would probably be better to have inshouldComponentUpdate, but I don't think we should solve this here, though adding a separate PR with performance optimizations would be great.\n. ESLint complains if it is not declared, at least when usingeslint-config-airbnb`.\n. \n",
    "CoveTechnologyAus": "I have the same problem, I am using scss-loader like the below in webpack but the styles are not being recognized. If I directly import grommet.min.css into index.html it works ok.\n{\n        test: /.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n          'includePaths[]=' +\n          (encodeURIComponent(path.resolve('./node_modules')))\n      },\n. This is terrific news guys. Can't wait to see the DateTime component @ericsoderberghp . A Time Picker is definitely a much needed component.\n@ericsoderberghp, will it likely be able to just do time selection without the Date/Calendar component?\n. ",
    "Eliraz-TTK": "how do you install grommet as a webpack library? I dont get it.\n. ",
    "olifante": "Grommet looks really great. Do you guys know how to make it work as a UI library together with next.js? It makes it even easier to get started with universal React apps than creat-react-app. It's pretty simple to use Rebass or MuiCSS with next.js, but I'm not sure how well Grommet would play with next.js.\n. @tracybarmore thanks for the tip, I posted the question on Slack.. ",
    "tracybarmore": "Hi @olifante. Would you mind posting this question in either Grommet's #general Slack channel or opening up a new issue? I caught this question on the off-chance of looking through closed issues, so it would have normally gone unnoticed. Thanks!. More investigation is required - remaining in backlog.\n. More investigation is required - remaining in backlog.\n. Since 1.0 release, grommet is not actively creating new components.. Creating a fact (or FAQ) page and moving issue to grommet-docs (closing this issue).\n. Opened issue #179\n. Hi @arlair, is this still an issue?. Closing issue. Not pursing breadcrumbs as an individual component. Feel free to reach out to the grommet team for further discussion.\n. Looking to implement in to Value component. Keeping in backlog for further investigation.\n. Linking with updates that will be implemented with #1216. design card reference grommet/grommet-design#45. Hi @lelostsamurai. Do you have a codepen for this issue that we can look at? . linking to #1071. Issue closure dependent on #1142. Fixed with #1231 . Closing issue - implemented and using Tip component for discoverability.\n. reference #1143. Keeping with Hub & Spoke navigational pattern. Closing issue. Adding extra documentation to navigation pattern in docs.\n. Added issue #1031 for further hub & spoke documentation\n. The above codepen is no longer working. Can you give us a codepen or screenshot to look at? Thanks!. linking with grommet/grommet-design#31. Linking with #1015. Hey @mcwebb, have you tested this with a fixed header (or page header) and on other view port sizes?. Hey @mcwebb, sorry to be 'that guy', but we will be cleaning up our backlog next week by closing unresponsive issues that haven't been active for at least 30 days. If you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. Thanks for the new codepen - that helped validate the issue. We will look further in to this. Thanks!. Hey @fullc0ntr0l, thanks for all your collaboration with us. We will be cleaning up our backlog first week of January 2017 by closing unresponsive issues that haven't been active for at least 30 days.\nIf you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. Backlog Grooming Jan 4, 2017 - Closing issue. Hi @ajwinkworth. Apologies for the delayed response here. We absolutely love pull requests, so please send one our way when you get the chance.. Old Card. Closing to open individual new cards.. Issue fixed.\n. @jeroenKleen, thanks for all your collaboration with us. We will be cleaning up our backlog first week of January 2017 by closing unresponsive issues that haven't been active for at least 30 days. \nIf you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. Closing issue.. Reproduced issue: https://codepen.io/tracybarmore/pen/VmKGVG?&editors=0010.\n. Hi @fullc0ntr0l, thanks for all your collaboration with us. We will be cleaning up our backlog first week of January 2017 by closing unresponsive issues that haven't been active for at least 30 days.\nIf you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. Backlog Grooming Jan 4, 2017 - Not resolved, remaining in backlog.. Linking with #1208. linking with grommet/grommet-design#31. This issue will be completed with #1166. This is applying to Grommet.io\n. We believe this issue has been fixed. @nickjvm can you verify with grommet stable?. Hey @nickjvm, thanks for all your collaboration with us. We will be cleaning up our backlog first week of February 2017 by closing unresponsive issues that haven't been active for at least 30 days.\nIf you would like this issue to remain open in our backlog, please comment to let us know. We can also add a \"help wanted\" to this card to allow other community members to contribute on fixing this issue if you can't get this replicated/resolved. Let us know. Thanks!. @nickjvm, great. I'll keep it in our backlog and get one of the guys to address it during our backlog grooming session. Thanks!. Hey @nickjvm, sorry to be 'that guy', but we will be cleaning up our backlog next week by closing unresponsive issues that haven't been active for at least 30 days. If you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. We are closing this issue. If you have any further concerns, feel free to reopen. Thanks!. Until documentation is complete, #1104 for TreeView feature request response.. Also see #1071. #1071 closed with commit e9c434a. Thanks for your feedback. We can't seem to reproduce the issue. Can you please provide more detail by filling out our issue form? Thanks!\n- Provide a general summary of the issue in the Title above \nExpected Behavior\n- Tell us what should happen \nActual Behavior\n- Tell us what happens instead \nURL, screen shot, or Codepen exhibiting the issue\n\n  -- Here's a Codepen template that serves as a nice starting point\n  -- for demonstrating an issue: http://codepen.io/pen?template=gaEGPY&editors=0010\n  \nSteps to Reproduce\n\n\n\n\n\nYour Environment\n- Include as many relevant details about the environment you experienced the bug in \n Grommet version:\n Browser Name and version:\n* Operating System and version (desktop or mobile):\n. linking to #1144. Thanks for the collaboration! Opened new issue in backlog #1097.. Also see #1046. linking to #690. PR #1087 merged. Thanks!. Pull request reference grommet/grommet-docs#180.. Hi aldofunes. Thanks for your collaboration with us. I'm closing this issue since guidance was given. Please let us know if this is still an issue for you. Thanks!. @ido-ran, thanks for your collaboration with us. We are going to be investigating in to this more in the near future, but wanted to let you know that this will most likely be a post v2.0.0 release item. We will keep you posted. Thanks!. Thanks for your pull request! grommet/grommet-docs#217 merged. For any future grommet-doc issues, please enter these in to our grommet-docs repo. Thanks!. Hi @ido-ran,\nGrommet has a showcase app that uses a pattern for a processing/validating state of a form. \n- Go to http://ferret.grommet.io/settings/edit\n- Click 'Connect' next to Directory\n- Type in anything in Directory Server input field, Click Connect\n- Button is replaced by spinner and verb of action\n\nLet us know if this answers your question and if we can close this issue. Thanks! . Hey @lichao-HP, sorry to be 'that guy', but we will be cleaning up our backlog next week by closing unresponsive issues that haven't been active for at least 30 days. If you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. March 14, 2017 - Backlog grooming resulted in the closure of this issue. Please feel free to reopen to continue the conversation. Thanks!. Thanks for the suggested enhancement. Grommet.io is actually using the grommet/grommet stable branch (branch committed to multiple times a day). If you are working off a specific grommet release, our release notes indicated the framework's changes and enhancements: https://github.com/grommet/grommet/releases\nIf you have further questions about our release process, we're happy to fill you in. Contact us quick on Slack! Thanks!. #1096. No option, implement change in behavior.. Hi @msuiche, @moizhb, @soju-cao, thanks for the issue. \nGrommet follows a Hub & Spoke navigational pattern to eliminate the need for a treeview navigation. Hub & Spoke is useful for multiple, distinct, linear workflows. Building task-based experiences stemming from a common start point helps ensure the items within an app correlate for a cohesive experience. \nYou may notice that all the Grommet showcase apps do not contain any treeview structures. This is due to our focus on mobile experiences. Treeviews in mobile become problematic since to include an appropriate touch target (at least 24px) to avoid accidental \"fat-finger\" selecting on an option, the treeview can become too large to fit within the mobile view window, resulting in the user needing to scroll both horizontally and vertically to select an option.\nOther components to consider to create this Hub & Spoke approach is using a drilldown List or Tile view. Example would be: Home page contains top level navigation. Top level link is selected, home page is replaced by a list view (or tile view) of secondary level navigation... then keep drilling down. \nA decent example of this is Ferret. It's Virtual Machine page is a tile view and Activity/Settings pages are list views. \nBecause of this UX guidance, we have added the no change label since a treeview is not a component or dev card we are planning to add to the grommet core repo. Grommet designers (such as myself) like to challenge use cases that a product feels they need a treeview, since we will normally ask to restructure the information architecture instead of creating a new Grommet component. \nSo, if you have a specific example that you would like our designers to take a look at, please post to our #visualdesign slack channel to give us some work \ud83d\udc4d . Also, we plan to add more documentation around our Hub & Spoke approach. To follow that backlog item see #1031. Hey @ido-ran, thanks for all your collaboration with us. We will be cleaning up our backlog last week of Feb 2017 by closing unresponsive issues that haven't been active for at least 30 days.\nIf you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. Closing issue as indicated in previous comment to clean up backlog. Feel free to reopen to bring it back to our attention. Thanks!. Replicated issue. Inconsistent in behavior in anchor examples:\nhttps://grommet.github.io/hpe/docs/anchor/\nvs\nhttps://grommet.github.io/hpe/docs/anchor/examples?label=true&animateIcon=true&href=true&primary=true. Closing issue since it hasn't been active for at least 30 days. Feel free to reopen this issue if it has not been fixed. Thanks!. Opened issue by @rushi2\nMoving issue to grommet/grommet repo.\nClosing issue grommet/grommet-docs#222. linking with grommet/grommet-design#38. Issue should be resolved with #1154. Issue should be fixed by #1155. linking #1142. Hey @nickjvm, when chatting with the team, Eric and Alan were wondering if you have a proposal to fix the issue? Thanks!. Hey @avadhutkhavare, sorry to be 'that guy', but we will be cleaning up our backlog next week by closing unresponsive issues that haven't been active for at least 30 days. If you would like this issue to remain open in our backlog, please comment to let us know. Thanks!. March 14, 2017 - Backlog grooming resulted in the closure of this issue. Please feel free to reopen to continue the conversation. Thanks!. Hi @vaibhavbhargav. Thanks for opening this issue. Can you give us an example of what you are trying to achieve? There may be something interesting we can address here based on what you are currently working on. Thanks!. Closing issue as indicated in previous comment to clean up backlog. Feel free to reopen to bring it back to our attention. Thanks!. Hey @Catx7, thanks for bringing up this issue. We have another IE11 issue that we are looking in to so will combine efforts here. Stay tuned!. linking with #1209. Hey @MarcoMedrano, we're loving this idea. Pull requests are gladly accepted. Thanks for your continued collaboration!. Hey @dioklecijan, we agree. We just need to work through how to manage and communicate this change since it would mean a breaking change.. closing card - I created it in the wrong repo. new card opened in grommet-docs: \ngrommet/grommet-docs#248. Hey @johnnyvcn, I can't seem to replicate this issue on BrowserStack Edge 14 and 13. Can you verify this is still an issue? Thanks!. Hey @johnnyvcn, I'm going to go ahead and close this issue since we could not replicate the issue. If you still have questions or are able to reproduce the issue, please feel free to reopen. Thanks!. Linking with #981. linking with #1183. Hey @ishwark7, thanks for raising the issue. Can you specify which version of iOS you're currently using? Thanks!. Validated in Firefox. Thanks for raising this issue!. Hi @manjitpandey, I created this codepen that I believe solves your problem: http://codepen.io/anon/pen/bWWPVV\nBy indicating both infinite and autoplay are false, this allows the carousel to stop swiping once it has reached the end of all your slides.. I'm going to go ahead and close this issue since it seems fixed. If you still have questions or if the this issue is still a problem, please feel free to reopen. Thanks!. Validated issue on Browser Stack Edge 15.\nCodepen: https://codepen.io/anon/pen/zwwQVP. Hey @ishwark7, I'm going to go ahead and close this issue due to Alan's response. If you still have questions or are able to reproduce the issue, please feel free to reopen. Thanks!. Hi @mturley, I have also replicated this issue on Chrome browser on my Android device. It looks like if you hide the browser header, it works as expected. But, I would agree that isn't intuitive. I'm leaving this issue open to discuss with the team. Thanks!. Hi @allenhartwig, did @SuhairZain 's suggestion fix your problem?. Hi @Serexx , we find that our community is fantastic (and sometimes quicker) at answering quick questions like these. I'm leaving this question in our backlog for one of our awesome sauce developers to take a look at, but feel free to post this question in Slack at grommet.slack.com in the meantime. Thanks!. Hi @hdehal, which element or page component are you trying to invoke a \"tool tip\" on?. hey @mvanlonden, we had this suggestion opened back in September, but closed the issue since this tree structure is a pretty old style for selection. \nHere's the previous issue: https://github.com/grommet/grommet/issues/850\nDo you have a screenshot or example of your product that we assist in consulting a different way of layout and/or selection? Thanks!. Hi @hustlerism, I created this codepen that I believe solves your problem: http://codepen.io/anon/pen/bWWPVV\nBy indicating both infinite and autoplay are false, this allows the carousel to stop swiping once it has reached the end of all your slides. Is this what you were looking for?. Hey @hustlerism, I'm confused. the attached screenshot shows the last image in the carousel. There is an arrow to swipe backwards, but no arrow to the right to continue directly to the first image. Let me know if I'm misunderstanding somewhere. Thanks!\n\n. @hustlerism, ah, thanks for the clarification. I have replicated the issue on my android device. I will leave this open in our backlog to have a grommet developer take a look at. Thanks!. \n. Hi @yackitotreeville, can you elaborate further or give us an example of what you're looking for?. @XuluWarrior, thanks for the reference. I'll leave this in our backlog to bring up in our next grooming session. Thanks!. ",
    "Dinesh-Ramakrishnan": "+1\n\n. Dirty Fix I have made is as follows\n.login-form fieldset>* {\n    max-width: 86%;\n    display: block;\n}\nSet the max width to 86%\nand in the following class\nlogin-form__submit {\n    margin-top: 24px;\n    width: 80%;\n}\nset the width to 80%\nWith this fix I was able to achieve the snap below\n\n. ",
    "jhawthor": "Hi, well that works but not the look I was striving for.  Everything is aligned right.  I just want the menu aligned right, while the icon was left aligned.  Thanks for the code.  I'll play around with it.\n. My apologies, I forgot to close this issue. It this was fixed by Eric on the 12th: Erick's Slack Comment: \"Card issue on CodePen. One of the pens it depends on didn\u2019t have the Card variable as a global. I\u2019ve fixed it and your pen is working now.. I don't believe this is a Grommet Issue.\nI'm using:\n\nReduxForm \"6.8.0\"  in dependencies\nGrommet \"https://github.com/grommet/grommet/tarball/stable\" in devDependencies\nNote: This is the stable tarball and not a specific version\n\nBelow is  form code using Grommet components to include a \"Select\" field.  Mousing over the drop down list will highlight the item that is under the mouse.\n ```\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport Form from 'grommet/components/Form';\nimport FormField from 'grommet/components/FormField';\nimport FormFields from 'grommet/components/FormFields';\nimport Heading from 'grommet/components/Heading';\nimport Footer from 'grommet/components/Footer';\nimport Section from 'grommet/components/Section';\nimport Button from 'grommet/components/Button';\nimport Select from 'grommet/components/Select';\nimport Article from 'grommet/components/Article';\nimport { createFeedBack } from '../actions/FeedBackActions';\nconst renderFormField = ({ input, id, label, help, onChange,\n   meta: { touched, error }, ...custom }) => (\n  \n\n\n\n\n)\nconst renderFormFieldTextArea = ({ input, id, label, htmlfor, help,\n  meta: { touched, error }, ...custom }) => (\n  \n\n\n\n\n)\nconst renderSelectField = ({ input, id, name, label, options, value, onSearch,\n  onChange, inline, multiple, placeHolder,\n   meta: { touched, error }, children, ...custom }) => (\n  \n\n\n\n\n)\n/\n Any time we use a call back the has a reference to 'this',\n we need to bind to 'this' to the context of the method.\n*/\nconst onSubmit = values => {\n  console.log('Step 1 to Post Feedback from FeedBackForm2: ', values);\n  console.log('Title:', values.title);\n  console.log('Category', values.categories.value);\n  console.log('Comment', values.comments);\n  createFeedBack(values)\n}\n// Need to satisfy grommet button requirement to have an onCLick method.\nconst fakeGrommetClick = () =>\n{\n  //Do Nothing!\n}\nconst validate = values => {\n  const errors = {}\n  const requiredFields = [ 'title', 'categories', 'comments' ]\n  requiredFields.forEach(field => {\n    if (!values[ field ]) {\n      errors[ field ] = 'Required'\n    }\n  })\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i.test(values.email)) {\n     errors.email = 'Invalid email address'\n  }\n  return errors\n}\nconst FeedBackForm2 = props => {\n  const { handleSubmit, pristine, reset, submitting } = props\n  return (\n    \n\n\n          Add Feedback\n      \n\n\n      <Field name=\"title\" label=\"Title\" id=\"title-1\"\n        component={renderFormField} />\n\n      <Field name=\"categories\" label=\"Categories\"\n        options={[\"Comment\", \"Feature Request\",\"Report an Issue\"]}\n        id=\"categories-1\"\n        component={renderSelectField} />\n\n      <Field name=\"comments\" label=\"Comments\" id=\"comments-1\"\n        component={renderFormFieldTextArea} />\n\n    </FormFields>\n  </Section>\n  <Footer justify=\"end\"\n    pad={{vertical: 'medium'}} >\n    <Button label=\"Submit\" primary={true} type=\"submit\"\n        /* Tell Button to call the Form Submit Method */\n      onClick={fakeGrommetClick} />\n    <Button href=\"#/feedback\" accent={true}\n      label=\"Cancel\"\n      plain={false} />\n  </Footer>\n  </Article>\n</Form>\n\n)\n}\n//Export the Form\nexport default reduxForm({\n  form: 'feedBackForm2',  // a unique identifier for this form\n  validate,\n})(FeedBackForm2)\n```\nHere is a screen shot of the form with the mouse over the option: Feature Request, which is highlighted.\n\nTested Form on macOS Sierra\n\nSafari 10.1.1 (12603.2.4)\nChrome 59.0.3071.115 (Official Build) (64-bit)\nFirefox 54.0.1 (64-bit) . FYI:  This line in the code i posted : \"import { connect } from 'react-redux';\"\ncan be commented out, as it is not required with ReduxForm 6.x.  The code I posted above was refactored from Redux-Form 5.6 to Redux-Form 6.8 and I had forgotten to remove it.. \n",
    "noahehall": "@mingfang can you add your code for including the css properly? \nI included the scss as described in the docs and the skiplinks are showing. @mingfang thanks for looking, I ended up displaying none . ",
    "shaiksphere": "Page http://www.grommet.io/docs/hpe/develop/get-started (and http://www.grommet.io/docs/develop/get-started) seem to be fixed.\nWhile http://www.grommet.io/docs/hpe/develop/tutorial (or http://www.grommet.io/docs/develop/tutorial) does not seem to exist anymore.\n. @bryanjacquot: I am no longer with HPE, so I no longer have any visibility in the same. Since I am the reporter of this issue, I would like to close this issue.\n. ",
    "abenson337": "It works properly in the bower compiled .3.7 but every version after that its not working.\nhttps://github.com/grommet/grommet-bower/blob/3b537f0118de5ca1d8ae79e9060885dafd0145d8/grommet.js (Valid and working)\n\nHow it is displayed in v 0.3.7\n. From my modified grommet.css =>\n.chart__graphic {\n    width: 100%;\n    height: 192px;\n    max-height: calc(100vh - 144px); }\n.chart--small .chart__graphic {\n    height: 128px; }\n  .chart--large .chart__graphic {\n    height: 256px; }\nFrom my actual content.css (from the page its displayed in) =>\n.content-right\n{\n    float: left;\n    min-width: 320px;\n    width: calc(100% - 230px);\n}\ncontent-right is inside of some other containers but that is the inner most container that controls the width of the chart.\n(script)\ngrommet chart\nvar Chart = React.createClass({\n      render: function() {\n        return (\n              (Trace /)\n        );\n      }\n    });\n   var element = document.getElementById('grommet'); \n   React.render(React.createElement(Chart), element);\n(/script)\n(div id=\"content-right\")\n(div id=\"grommet\")(/div)\nstuff here\n(/div)\nJust an additional note: I'm using the lone grommet.js bower compiled file to render charts, and I'm not using any of the other components at this point.\n. updated info in previous commment\n. ",
    "ido-ran": "Hi,\nI've run into the same issue of context not been transfer into child component.\nHardcode the context properties does not cut it because we are using proprietary properties.\nI'm working around this issue by passing the context from the component that create the Layer using props but that is exactly what context should prevent. . I've create a PR. I was not sure how to write unit test to test events with React.. I can also confirm I still see this issue in IE11. Thank you. Any chance of releasing 1.2.1 with this fix please? :1st_place_medal: . I can confirm this solve the issue with IE.\nThanks.. I've fixed it and rebase it on latest master, can you please close this PR and I'll recreate it.. Thanks for the details.\nSince we allow to choose any icon from the Grommet icons it means we'll be have to include all the icons in our build. I've created an automated script that create exactly the kind of switch case code you suggested here.\nHaving such component inside Grommet means users will inclulde all the icons only if they use it.\nWhat do you think?. The usecase I have is a form that when submit takes up-to several seconds to complete and might result in an error. So we want to disable the form while the request is pending results and if an error occur we re-enable the form to allow the user to fix the form input and if the result complete successfully we continue to a new page.\nLeaving the button enabled during the request seem like poor UX as the user migh click the button again and the button continue to seem \"clickable\".\nHow do you suggest go about this usecase?. Hi,\nThanks for the update. Yes, this does seem like a good solution for our scenario.. This problem has been resolved. It requires the addition of url-loader as well as file-loader and changing $hpe-fonts-path. I think it worth adding this information to the documentation.. ",
    "mtgibbs": "https://github.com/grommet/grommet/pull/236\n. I was just making sure that the real PR didn't get overlooked because of the silly one.  I'm going to close this now.\n. ",
    "Candy374": "I got this issue too... and actually, the parameter selected is the column index instead of the row index, you can see it in the official page:  http://www.grommet.io/docs/hpe/develop/table \n. I think it is because the default value \nChart.defaultProps = {\n  a11yTitleId: 'chart-title',\n  a11yDescId: 'chart-desc',\n  min: 0,\n  type: 'line'\n};\nI comment the min:0, and my error is gone\n. ",
    "jaitthomas": "Is there is any workaround for this issue or any timeline for this fix? This issue is preventing us from leveraging the tab component. \n. When will we release 0.4.1, as we are dependent on it?\n. I am currently unblocked with the stable branch. Just curious when the next release will be?\n. np..Thank you Alan.\n. ",
    "codeswan": "Thanks for the feedback @ericsoderberghp, I've made the updates you requested.  Yep, I'll make the updates to CarouselDoc and submit a PR for that as soon as it's ready.\n. @ericsoderberghp I'm not sure that really makes sense for this component.  These are intended to be very large call-outs, much larger than would be needed for the visualization-type components.  It feels like this is significantly different from what you'd want for the visualization-type components, such that it wouldn't make sense to try to combine the two.\nAlso, I'm fine with changing the name, but Number seems like it would be too generic of a component name for this.\n. @ericsoderberghp Thanks for the feedback, I've made the updates you requested.\n. @ericsoderberghp You are correct. Closing this PR.\n. @ericsoderberghp I think that would be okay.  I've updated it so the default is 'none' for the hoverStyle, so I think it's a safe assumption that if a user does set a hoverStyle, then they want it to show regardless of whether the Tile has an onClick or not.  What do you think?  I can change this if needed.\n. @ericsoderberghp Thanks for the code review, I've made all the changes you requested.  Could you please review again?  Thanks!\n. Thanks for the feedback!  I've made this change.\n. Had to add the portable media query size from inuitcss, but yes it now has been updated to use inuit functions.\n. Updated the CSS to use the inuit spacing variable for all the px values in this file.\n. Updated.\n. When we were discussing this with @L0ZZI yesterday, the decision was that the default should be centered but that Grommet users should have the option to change the background position if they need to pin it elsewhere for the purpose of responsiveness.\n. Fixed\n. Yep, fixed\n. Fixed\n. Quote is an array to allow for multi-paragraph quotes.  There is an example of this in the PR I submitted for grommet-docs (https://github.com/grommet/grommet-docs/pull/43).  :)\nI considered making the quote text a child node, however historically you guys have expressed a preference for more opinionated components.  Putting the quote as a child node could allow the users to put any type of content they want there, and also leaves the styling of the quote text and credit text entirely up to the user.\nCredit is the entity who the quote is credited to.  Footnotes aren't really proper in the context of quotes.\n. @ericsoderberghp - I don't think that would be ideal.  I have some cases where it would be preferable to be able to have different text-sized paragraphs be of the same width, and automatically basing paragraph width off of text-size could mess up existing styling for anyone who's already using Grommet, since it wouldn't be backwards-compatible.\n. @ericsoderberghp I've submitted a separate PR for adding sizing to Box.  I believe this should work as desired, so please review it when you get a chance.  Thanks!\n. Done.  I've added the variables, and switched them out as appropriate.\n. No. 100% will not work correctly.\nThe spacing is to account for the space around the Quote, however I have updated it to use double instead.\n. Good point, I've updated that.\n. ",
    "phuson": "@ericsoderberghp:\nHere's an example of how this can be called, results in the screenshots above:\n<Menu direction=\"row\" inline={true}>\n  <a href=\"#\">First</a>\n  <Menu label=\"Second\">\n    <a href=\"#\">Sub First</a>\n    <a href=\"#\">Sub Second</a>\n  </Menu>\n  <a href=\"#\">Third</a>\n</Menu>\nSo yup, it's along the lines of what you're thinking.\n. Merged the latest of grommet into this PR:\n\n\n. @alansouzati This PR should be ready to be code reviewed again. All of the feedback from the last code review should be accounted for. :)\n. Updated the Tag component style to have opacity of 0.7.\n. Okay, made type prop a required prop. Updated grommet docs to reflect this. Thanks!\n. Okay, updated to just use the -t suffix. Also added the tinted versions for the accent set of colors. I'm not sure if we need it for light, grey, and graph. Please let me know if this is good to go.\n\n. Question, if this is specifically there to fix an issue only for IE11, shouldn't we be placing these additional styles in an IE11 only targeted \"hack\"? The reason I'm asking is that this new addition is affecting Safari browser too and I'm not sure if this is intentional.\n. Can you please attach some sample code of how you are trying to change the Menu component's props in the parent component so we can properly reproduce the issue? Thanks!\n. @L0ZZI Please let me know if this is what you are talking about when you want these icons to be reversed. I wasn't sure if I should be removing the stroke on these SVGs as I filled out the icons. Thanks!\n. @bjackson Yup, I will hopefully have the PR ready by the end of today or at the latest, Monday.\n. Okay, I have replicated the logic of closer and onClose props from the Layer component. Thanks!\nWith that said, I still believe that having a built in closing functionality is easier for users to just be able to pick this up and use it without having to implement their own logic to remove/hide the notifications.\n. Hmm, I was debating about this too but I'm not sure what's a good solution for this. It felt weird to only append __drop to one of the classes instead. I thought it would work better to append __drop to all of the classes that are passed to the Menu component since these are basically a set of new classes anyway.\n. Okay, switched it out. :)\n. Good point. Fixed.\n. Since there could potentially be multiple drop menus on the same page which may need to be styled differently, the *__drop classes allow the developer to target individual drop menus independently.\n. We currently have a case with the HPE header and footer where one has a menu on the right side, and one has a menu on the left.  They need to be styled differently (at least so the ... stays in the correct position for each menu), but that can't happen without the specific classes.\nFor example, in the footer, the ... icon is on the right side. However, the ... shows up on the left in the drop down menu instead.\n\n\n. Fixed.\n. Good catch! Fixed.\n. Fixed.\n. @alansouzati: Does this commit (https://github.com/grommet/grommet/commit/3859237a45f85a83327c85b55fe74b0766b822b7) fix what you are referring to here?\n. Good point, we are only supporting 1 and 2 for width and height. Added props validation for width and height props.\n. Fixed.\n. Changed route prop to href to avoid confusion. Also updated grommet-docs (https://github.com/grommet/grommet-docs/pull/12) to reflect the change.\n. I agree that width and height props might cause some confusion. @codeswan and I have decided to replace the width and height props with just type prop. type prop can be small, large, wide, tall. https://github.com/codeswan/grommet/commit/8c8ce072b32a453a03232d96105e27c48f49e50b\nI have also updated the Bricks documentation to show the information for the new type prop. https://github.com/codeswan/grommet-docs/commit/17356c351f4f6879a0c147b6eb11499c948c376a\n. From what I can recall, the point of this function is to only render the children or submenu items without returning or rendering the top level items. Hopefully that makes sense.\nWithout this function, nested menus in dropdown will not be rendered:\n\n. Yup, done!\n. I didn't need bind the this context here because I'm calling _unmountHammer and _updateHammer directly from inside the same context. Not sure if that answers your question.\n. I had it that way earlier but decided that it looked odd like that. :)\nRegardless, it's now fixed.\n. To keep it consistent with your refactoring, line 558 should probably be broken up into 2 lines right?\n. this._update() gets called for every video's event (https://github.com/grommet/grommet/pull/758/files#diff-494d83d33bab8a72199104e6107d5b18R81). The throttling here is so that this.update() doesn't get called too often unnecessarily.\n. @alansouzati I haven't tried it yet but from looking at the logic, it does not seem to work for this case. We want to throttle the call here from happening too often within 100ms but the function will still get called every 100ms. As with debounce logic, it looks to me like the function will not get called at all if the event keeps getting triggered within 100ms. \nWith that said, in this case, there are multiple Video events (https://github.com/grommet/grommet/pull/758/files#diff-494d83d33bab8a72199104e6107d5b18R49) we are listening, the _update() function might not get called for a good second or two if we were to use the debounce logic.\n. Just wondering, is the concern here that we are pulling in lodash.throttle?\n. Just for my own knowledge, is there a reason why we want to avoid lodash? Do note that this is just pulling in lodash.throttle and not the entire lodash package. \nI thought about pulling in just the throttle functionality as a common util function in grommet core, but I figured it's better to pull in something that is more battle-tested like lodash.throttle than to come up with my own version or copy and paste from one the many sources out there. Plus, this way, whenever lodash.throttle gets updated, we get that for free.\n. Ah ok, I understand.\n. Okay, removed lodash.throttle dependency.\n. ",
    "eabay": "I suggest you to take a look at docker. There are lots of ready-to-use node images in hub.\n. Better to discuss over PR #271\n. I have made the changes regarding your comments.\n. You're welcome!\n. This is not something about Grommet Rest.\nMaybe you should take a look at this.\n. Actually I've tried your suggestion before opening the issue but it doesn't feel right somehow.\nI would push little bit more if I have good arguments other than personal but I don't :)\nThanks for your time!\n. And one more before getting my hands dirty...\nWhat about static properties?\nhttp://babeljs.io/blog/2015/06/07/react-on-es6-plus/\nhttps://github.com/jeffmo/es-class-fields-and-static-properties\n``` js\nimport React, { Component } from 'react';\nexport default class GrommetComponent extends Component {\n  static propTypes = {};\nstatic defaultProps = {};\n}\n```\n. I know. I just suggested to move them up inside class declaration and wanted to know how you think about that.\nI deep dive into the codebase and trying to understand internals and your intentions.\nAnother thing is that you prefer to create bindings to class methods in constructor. Using ES7 function bind syntax would help to reduce work to accomplish the same but it's still experimental although babel supports it. Not using it in this project might be choice but I would prefer to use it.\n. That was the thing I want to hear!\nI'll send a PR.\nThanks.\n. I would use the same approach except the name of prop. I personally prefer defaultValues or values but data would be the choice regarding conventions used in grommet.\n. Maybe we should ping @ericsoderberghp \n. I am sorry, I think I failed to express the situation.\nPassing a rememberMe property perfectly renders a checkbox but renderer component has no control on it like initially turning it on or getting the value when form is submitted. Initial value issue will be solved after #281 but accessing value should be considered as well.\nHaving a function signature like this on onSubmit would be the choice of mine:\nonSubmit: function ({username: ..., password: ...[, rememberMe: true|false]}) {...}\n. I'll send a PR as soon as I get the chance.\n. I'll try when I get time\n. I agree with the idea of having a consistent implementation without touching state but don't feel comfortable with accessing underlying checkbox element with refs.\nI think there should be a pure checkbox input, like username and password fields. Then it can be referenced easily. There will be no onChange event, no state etc.\nWhen I look at Checkbox component, I think it exists just for styling purposes and doesn't add much value beyond that. If we consider getting the same visual output only using CSS applied to a input[type=\"checkbox\"] element, there would be no need to have a separate component.\nCan we consider this as an option?\n. http://codepen.io/bbodine1/pen/novBm\nI think those examples could be taken as POC.\n. Any further comment on this?\n. @alansouzati Better late than never :)\nYou are right, those examples are not accessible and requiring additional markup makes us getting back to square one. I just focused on styling part and didn't have accessibility concerns at the beginning.\nHow about this?\nhttp://codepen.io/anon/pen/eJRrZp?editors=110\nI am not a CSS expert either, and it is not a complete solution but it has no additional markup and no accessibility issues.\nI have another suggestion for the implementation with Checkbox component but first want to know what you guys think while this option on the table.\n. This one does not depend on the presence of label, so it's in users' hands to use it or not. Actually this choice gives more flexibility when we want to use only the checkbox without label since label is a required prop in CheckBox and this limits the component for other use cases.\nFocus state difference can be achieved with :focus pseudo-class and toggle feature can be implemented with the combination of :before and after.\nIt wasn't well thought out or tested because I don't want to go further without knowing what you think. I just wanted to show Grommet styles can be applied to a checkbox input.\nIf using a default checkbox input styled like CheckBox component is a challenge and not an option, making CheckBox a bit more closer to the default checkbox would be another choice. CheckBox is already passing most of the props to the underlying input and if we define appropriate getters (e.g. checked) on it, it's going to behave almost like the default checkbox.\nCheck it out:\n``` js\n// CheckBox.js\n......\nexport default class CheckBox extends Component {\nset checked(value) {\n    if ('refs' in this) {\n      this.refs.input.checked = !!value;\n    }\n  }\nget checked() {\n    return 'refs' in this ? this.refs.input.checked : null;\n  }\nrender () {\n....\n\nreturn (\n  <label className={classes.join(' ')}\n    aria-describedby={this.props.ariaDescribedby}\n    aria-lebelledby={labelId}>\n    <input ref=\"input\" tabIndex=\"0\" className={CLASS_ROOT + \"__input\"}\n    ....\n\n```\n``` js\n// LoginForm.js\n...\nexport default class LoginForm extends Component {\n...\n_onSubmit  (event) {\n    event.preventDefault();\n    var username = this.refs.username.value.trim();\n    var password = this.refs.password.value.trim();\n    var rememberMe;\nif ('rememberMe' in this.refs) {\n  rememberMe = this.refs.rememberMe.checked;\n}\n\nif (this.props.onSubmit) {\n  this.props.onSubmit({username, password, rememberMe});\n}\n\n}\nrender () {\n...\n\nvar rememberMe;\nif (this.props.rememberMe) {\n\n  rememberMe = (\n    <CheckBox className={CLASS_ROOT + \"__remember-me\"}\n      ref=\"rememberMe\"\n    ...\n\n```\n. Getters and setters were always there. ES6 includes them in class syntax.\nReact.createClass example with ES5 syntax:\n``` js\nvar Component = React.createClass({\n  get inside() {\n    // will be undefined because here this refers to the object \n    // passed to the React.createClass not the component\n    return this.refs;\n  },\ncomponentDidMount: function() {\n    console.log(this.inside);\n    console.log(this.outside);\n  },\nrender: function() {\n    return Test;\n  }\n});\nObject.defineProperty(Component.prototype, 'outside', {\n  get: function() {\n    // will be an object\n    return this.refs;\n  }\n});\n```\nThis can be an example for checkbox without label. I don't need it yet but maybe checkbox can be inlined in a text, vice versa.\nRemoving label requirement will increase flexibility for sure. And maybe adding an option for the label placement would be another enhancement.\nSo, what do you think about the getter/setter implementation?\n. I made the changes we discussed. To left history clean, I reverted previous changes and forced push. I hope you don't mind.\nThank you for delivering this great framework! I am really happy to be involved.\n. @Waize I think you are using Grommet directly from git repo.\nIcons are not available unless you build them by yourself with gulp generate-index-icons if you clone repo.\n. +1\nUsing react-layout-pane while waiting for this. \n. I am glad you agree. And I've started with Anchor, #313, and want to know what you think about it.\n. It appeared that stateless functions broke things and they need to be improved somehow...\n. I am on it!\n. I must have missed this one.\n. js\nimport * as Locale from 'grommet/utils/Locale'\n// or\nimport { getCurrentLocale } from 'grommet/utils/Locale'\n. Any comment on this?\n. Do yo guys agree with the quick fix?\n. Another problematic use case is when you use a statedul form and resize the\nwindow, boom, form is reset and changes are gone. I switched to use Layer\nafter facing the same problem.\nOn 22 Mar 2016 Sal at 23:39, Alan Souza notifications@github.com wrote:\n\nHave you considered using a Flux architecture for your data fetching layer?\nThere are handful options that implements that, Grommet as of this moment\nis using Redux: http://redux.js.org/index.html\nThere are few open-source source apps done on top of Grommet using Redux.\nTake a look at http://ferret.grommet.io.\nSource code is available here: https://github.com/grommet/grommet-ferret\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/grommet/grommet/issues/460#issuecomment-200040793\n. It's OK if you store data in a redux state, data will be kept between mount/unmount cycle. But it wasn't desirable in our case to sync temporary data in a central store just to prevent this to happen. We preferred to use Layer and give the control to the user to lose filled data by closing it rather than losing it by chance just because of a resize.\n\nAnyway, I just wanted to point it out while speaking the issue.\n. Remember me field is created conditionally so rememberMe ref may not be present always, and needs to be checked.\n. I think wrapped lines in tags aligned against the first attribute position.\nWebStorm handles those kind of things automatically. \n. Right. I made the changes.\n. Picking only the props Box supports or passing all of them does not change the result, since Box will only use what it needs. So it seemed to me like a little extra effort and for the sake of simplicity I removed the logic.\nThe only concern is overriding our own prop value with the one user passes. To prevent that, {\u2026props} must take the first place while creating component instance. I did wrong here though. tag prop has to be placed after {\u2026props}.\n. OK. How about creating a utility like Props and move pick logic under a method a with a signature like Props.pick(props, component)?\njs\n// utils/Props.js\nexport default {\n  pick(props, component) {\n    return pick(props, keys(component.propTypes));\n  }\n}\nAnd maybe the same utility can host other type of prop stuff in the future like storing common prop Types like size, a11yTitle etc.\n. Good! I made the changes. If it's OK, I am going to apply it to the rest of the PRs.\n. I agree. It's better to shorten the list of dependencies. We can do it with a try/catch block instead of  a conditional check.\nI'll make changes if it's OK.\n. ",
    "josephalhamad": "I am trying to have 2 buttons side by side to have the same size and align them in the center of the page. \n. ",
    "stephanbochet": "Yes, I can do that.\n. ",
    "shuangshan": "eabay,thanks for your valuable tips.\n. ",
    "epilande": "Hi @alansouzati, I implemented your CodePen example with my existing code & that works. Are there any documentations on KeyboardAccelerators?\n. @christinHP are you still receiving this issue? I'm not able to reproduce it.\n\n. @christinHP I was able to test & reproduce your issue. I don't think this is a grommet defect. It seems like the problem is how the app is handling the search submit.\nWhen I search from the dashboard page, I get redirected to the search page. I don't see the scrollbar until I click on the search input (See attached gif below). The scrollbar also appears when clicking on the filter & question mark icon. I think it may have something to do with how the page is rendering. \n\nEDIT: \nHaving the Online Help open & searching \"bay\" on the dashboard page, I don't get the same issue (See attached gif below). Is there a difference with the middle pane?\n\n. Hi @christinHP can you confirm this issue still exists with latest grommet & OVGD code. I just tried it with latest grommet & OVGD, it seems to be working now.\n. @christinHP Setting full=\"horizontal\" on the Box component will allow the content to wrap in IE. \n<Box full=\"horizontal\" ... />\nAnother way to fix this issue is to remove the wrapping Footer component. \n. Hi @christinHP I'm not able to reproduce this issue. Do you have a OVGD testing/staging site I could access?\n. Hi @christinHP I was able to test & debug what was causing the extra space in IE. The table is displaying correctly, the problem is the Bar SVG has a height of 100% which is being rendered differently in IE. Setting the Bar SVG height should fix this issue. \nIn src/js/components/reports/VirtualIdValidateReports.js\njavascript\n  <Bar height=\"32\" a={target} b={appliance} format ={format}/>\n. @christinHP this issue looks like it's been fixed.\n\n. This is related to #648. \nI'm not able to do any action(click/scroll) on the search page until I click on something else.\n\n. This is from Inuit's overflow-y: scroll on the html element. https://github.com/inuitcss/base.page/blob/master/_base.page.scss#L34\nA quick workaround would be to override overflow-y: scroll on the html element to overflow-y: auto.\nI'm checking in with @alansouzati to see why it got commented out in https://github.com/grommet/grommet/blob/master/src/scss/grommet-core/_base.page.scss#L3L10\n. Hi @christinHP you're receiving these issues from the recent namespace change to grommet classes. grommetux- has been prepended to the classes. https://github.com/grommet/grommet/blob/master/src/js/utils/CSSClassnames.js\nSince OVGD is using a custom LoginForm component, you'll need to change the class root from \nconst CLASS_ROOT = \"login-form\"; to const CLASS_ROOT = \"grommetux-login-form\";\nAs for the SVG icon, it's still there, but it's missing a stroke.\nAlso I noticed the logo icon is much larger now in the sidebar. The class has been changed in the Logo component ('logo-icon') & doesn't match the CSS (.logo). \n. Hi @primozs I created a CodePen following the example layout you've provided, but I'm not able to reproduce this issue. May I know what mobile devices you're testing on? \nhttp://codepen.io/epilande/full/QEqLow/\n. Added animation example triggered by scrolling. See grommet/grommet-docs#59\n\n. Hi @huiwang-hpe, this is related to https://github.com/grommet/grommet/issues/620, which has just been fixed in https://github.com/grommet/grommet/pull/688. The fix should be in the next grommet release. \nIf you'd like to test it out, change your grommet in package.json to\n\"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\nWhich will get the latest code base that's on master branch. \n. @huiwang-hpe the two scrollbar issue has just been fixed. https://github.com/grommet/grommet/issues/671#issuecomment-232501315\n. Hi @L0ZZI, what do you mean by enhance search component to have search clickable? Are you talking about the icon? If so, when a user clicks on the icon, should it fire the same event as when the enter key is pressed?\n. @alansouzati @L0ZZI @ericsoderberghp thanks for the feedback! I've updated the PR with your suggestions. Let me know if I missed anything.\n\n. Hi @RyanCCollins the accordion component isn't part of the 0.6.10 release. It has been merged into the master branch which you can access by setting your grommet version in package.json to \n\"grommet\": \"https://github.com/grommet/grommet/tarball/stable\"\n. Hi @christinHP, we do not have control over where the dropdown options appear since that's using the default HTML5 select. I've tried it (CodePen) in different browsers using Mac & Windows, & it's rendered differently.\nFor more info see: http://stackoverflow.com/a/18689790/3567750\nAlso I've created a CodePen with the code you've provided: http://codepen.io/epilande/pen/dXZLdJ\n. @ericsoderberghp agree, it isn't an Accordion on desktop view but currently I am using the Accordion component & disabling it for desktop. Would replacing the DOM elements from a list on desktop to an accordion on mobile be a better solution? \n. @ericsoderberghp Yeah, that makes more sense. I'll give that a go.\nWhat about the icon? Should we always be using the tab-next icon for the Accordion?\n. Updated CodePen with react-with-addons http://codepen.io/epilande/pen/gwrGGy?editors=0110\n. Hi @ajwinkworth when setting the value prop you must provide an onChange handler to the NumberInput component. Another option would be to use defaultValue instead of value. I've forked your CodePen & added examples of both solutions https://codepen.io/epilande/pen/BLQJxw?editors=0010\nFor more info:\n- https://facebook.github.io/react/docs/forms.html#controlled-components\n- https://facebook.github.io/react/docs/forms.html#default-value\n. @ajwinkworth thanks for the video. It's still hard to tell what's the problem without seeing the code. Hmm is there any internal state with the containing component? I notice when updating Pour Height, Form Height is also updated, but when updating Form Height, Pour Height is not updated, is Form Height's value set to the same value as Pour Height? Do they have the same onChange function? \nIf you're handling this via state, do you need to update state in response to a prop change? https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n. Hi @ajwinkworth I'm not able to reproduce this issue. I've created a new CodePen with react redux & tried to reproduce what was happening in the video, but no luck. Am I missing something? If you could fork the CodePen & set it up to have the same issue, that would be very helpful. http://codepen.io/epilande/pen/qaRdZP?editors=0010\nAs for parseInt can you elaborate on what strange step issues are happening? \n. @ajwinkworth Ah I see the problem now. Currently the way NumberInput is built the + & - calls the _onAdd & _onSubtract functions which changes the input value regardless of the onChange. The onChange is basically a callback after the value has already changed. One way to achieve the functionality you've stated would be to set the min prop to the first input value. I've updated the CodePen to have the correct functionality http://codepen.io/epilande/pen/qaRdZP?editors=0010\nFor the IE issue, yes, we should change parseInt() so it can handle floats. Would you like to submit a PR to fix this issue? If you can't get to it, let me know.\n. @alansouzati Fixed the merge conflicts \n. Hi @mcwagner10 your CodePen link has changed to a different example which doesn't show the dropAlign issue. I've tried to reproduce the screenshot above but it's working as expected. http://codepen.io/epilande/pen/RGxbKY?editors=1010\nIf I missed something, please edit the CodePen\n. Hi @tobinford, we can fix this by wrapping the Button in a Menu component. \njavascript\n<Footer>\n  <Menu>\n    <Button label=\"Submit\" primary={true} />\n  </Menu>\n</Footer>\n. This is a specificity problem. \nIn hpe.min.css:\n.grommet p {                                    // specificity level 11\n  margin-top: 24px;\n  margin-bottom: 24px;\n}\nWhich would be more specific than the accordion styles i'm adding.\nAnyway I'll remove the custom margin top & bottom & .grommet from the styles. \n. No, it uses the same library (react transition group) as the Animate component, but this component has a different purpose. The Collapsible component is used to animate height. This is done through JavaScript. It's currently not possible to animate dynamic heights with CSS, e.g. height: 0; to height: 100%; does not work. I've also tried the max-height approach, but the animation/transition is very janky & not reliable depending on the panel content.\n. Ahh good catch. I think it makes sense to transfer props to the input field. \n. The component should not unmount until the callback is called.\nMore info: https://facebook.github.io/react/docs/animation.html#componentwillleavecallback\n. By default TransitionGroup renders as a span. If you want it to render as another html tag for example a div or ul, you're able to pass in the tag name as a string.\n<Animate component=\"ul\">\n  <li>item 1</li>\n  <li>item 2</li>\n  ...\n</Animate>\ncomponent can also be a React element. Useful for components like Tiles that needs to be a direct parent of Tile in order for flexbox to work.\n<Animate component={Tiles}>\n  <Tile />\n  <Tile />\n  ...\n</Animate>\n. I just tried changing this to PropTypes.node & I'm receiving a propType warning since i'm passing down Tiles as component={Tiles} rather than a React element. I've also tried passing the component as a React element but ReactTransitionGroup doesn't like that.\n. These are the designs I've received for mobile view. The footer links on mobile view becomes an Accordion without an icon.\n\n. I agree, we should keep controls consistent across the application, but what about the other users using grommet on personal or non hpe related projects and would want to use the next icon rather than tab-next. \nNot that I want to use the next icon, just giving an example. \ud83d\ude04 \n. We're spreading {...tileProps} to a Tile component on line 204.\n. Oops forgot to change the propTypes on these. We ran into this problem on estories, where we should handle multiple paragraphs (see screenshot below). The new designs I've seen doesn't display multiple paragraphs, should I remove this feature? \n\n. I felt size might be confusing. For the Box component, size adjusts the width of the box, while in this component size would adjusts the size of it's text content.\n. These styles get applied when I remove .grommet from the selector.\nSpecificity level here is 11. Just having .grommetux-paragraph without .grommet has a specificity of 10.\n\nAnd having .grommet before the selector is making it too specific. \n\n. This is using the <Heading> component because the size varies based on the textSize. Shall I handle the label sizing with CSS?\n. ListItem is transferring {...boxProps} which includes role. \n. @ericsoderberghp this checks if the user is viewing on mobile & the scrollParent is a Layer component. The problem is infinite scroll within the Layer component for mobile doesn't work because we need to set scrollParent to document instead of .grommetux-layer for scroll to work properly, since .grommetux-layer doesn't contain the scroll on mobile.  \nIn InfiniteScroll.js we're grabbing the first element from result which is .grommetux-layer, but this piece of code overrides result to be an array of just document, if the scrollParent is .grommetux-layer.\n. Found a cleaner & simpler fix... Setting overflow: auto to .grommetux-layer allows it to be scrollable.\n. Ah yes, I added the media query because the loading icon was being flushed to the left instead of staying in the middle, but setting responsive={false} to Tiles fixes this issue.\n. Added to .grommetux-tiles\n. We can't remove id={id}; since we're assigning id on line 15, {...props} doesn't contain id.\n. Removed aria-label\n. Or I can remove the assignment of id from line 15 & reference it on line 25 as props.id\n. This is to fix Tiles infinite scroll within Layer component. https://github.com/grommet/grommet/pull/866#pullrequestreview-861943\n. BTW this value comes from height / width, which is 460 / 940 = .489361702 rounding it off to 49.. ",
    "fedejinich": "how can i reproduce this submenus?. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. ",
    "Waize": "Hey, \nI can suggest the following SVG: \n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   mlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   mlns=\"http://www.w3.org/2000/svg\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   mlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   \nid=\"save\"  \n   width=\"64\"\n   version=\"1.1\"\n   height=\"64\"\n   viewBox=\"0 0 63.999999 64.000001\"\n   sodipodi:docname=\"save.svg\">\n  <g id=\"save\">\n  <rect id=\"_x2E_svg_143_\" x=\"1\" y=\"0\" fill=\"none\" width=\"24\" height=\"24\"/>\n   <path\n     style=\"fill:#000000\"\n     d=\"M 0,32.000024 0,2.4414062e-5 l 32,0 32,0 L 64,32.000024 l 0,32 -32,0 -32,0 0,-32 z m 46.441823,20.9259 0,-10.6496 -18.54638,0 -18.5463798,0 -0.00371,10.646 -0.00371,10.6459 18.5500908,0 18.550091,0 0,-10.6496 z m -33.117743,-0.7393 0,-8.0951 4.396947,0 4.396947,0 0,8.0951 0,8.0952 -4.396947,0 -4.396947,0 0,-8.0952 z m 43.791812,-31.3925 0,-15.6998996 -25.101087,0 -25.1010877,0 0,15.6998996 0,15.7 25.1010877,0 25.101087,0 0,-15.7 z m -49.3583162,11.3303 0,-0.183 24.1906082,0 24.190609,0 0,0.183 0,0.183 -24.190609,0 -24.1906082,0 0,-0.183 z m 0,-4.1573 0,-0.183 24.1906082,0 24.190609,0 0,0.183 0,0.1829 -24.190609,0 -24.1906082,0 0,-0.1829 z m -0.014805,-4.0696 0,-0.183 24.1906092,0 24.190608,0 0,0.183 0,0.183 -24.190608,0 -24.1906092,0 0,-0.183 z m 0.014805,-4.2305 0,-0.183 24.1906082,0 24.190609,0 0,0.183 0,0.183 -24.190609,0 -24.1906082,0 0,-0.183 z m 0,-4.3184 0,-0.183 24.1906082,0 24.190609,0 0,0.183 0,0.183 -24.190609,0 -24.1906082,0 0,-0.183 z m 0,-4.2599 0,-0.1829 24.1906082,0 24.190609,0 0,0.1829 0,0.183 -24.190609,0 -24.1906082,0 0,-0.183 z\"\n     id=\"save\"/>\n   </g>\n</svg>\n. I'm doing this:\nimport UserIcon from \"grommet/components/icons/base/User\";\n<UserIcon className=\"control-icon--small logo\" colorIndex=\"grey-4\"/>\nAnd as I wrote, the file even does not exist in the icons-directory anymore :( \n. I am using npm and as it seems, the icons are there missing. The building process semmed to stopped after Trigger (for example the trophy-Icon is also missing). \nI deleted all npm files and caches locally, but that does not help. \n\n. OS is win7,\nnpm version 3.4.1\nnode verion 4.2.2 \nThe path you are seeing is just in my local cache-data. That explains the package.tar. \nMy installation is done with maven: \n    --- frontend-maven-plugin:0.0.26:npm (npm install) @ Webapplic ---\n    [INFO] Found proxies: [proxy{protocol='http', host='proxy', port=8080}]\n    [INFO] Running 'npm install --color=false in   D:...\netc. \nSo the installation will start node, run npm install, afterwards webpack.js and deploying it.\nDo you need any further infromation? \n. Unfortunately it's still the same issue.\n. Updated Node to 5.1.0, deleted every chache from npm, installed everything new... but I still just have the Icons until \"Trigger.js\".\nBuilding process didn't throw any errors.\n. Could you please reopen this issue?  - Sorry for that. \nAfter fiddeling around a bit, we found out, that the package, we download is the following one:\nhttp://registry.npmjs.org/grommet/-/grommet-0.5.1.tgz\nThe bower package looks great, so it's just the npm package, wich is broken there. \nbtw. there is the same issue at the grommet 0.5.0-Version.\n. @bryanjacquot can you please reopen the issue? \nIt is not solved yet.\nThanks.\n. Hey,\nthanks for your support, i really appreciate it. I will try it with the stable version as long the package in npm isn't fixed.\nSo this issue can be closed.\nOn Mi., Jan. 13, 2016 at 3:25 nachm., Alan Souza < notifications@github.com [notifications@github.com] > wrote:\nYeah, by downloading this tgz i was able to see that the some icons are actually\nmissing.\nWe are not creating this compressed file, I wonder if this could be a bug in\nNPM.\nI will try and investigate this. In the meantime you can use grommet stable\nwhich is very close to 0.5.1.\nIn your package.json change grommet version to the following:\n{\n  ...dependencies: {\n    \"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\n  }\n}\n\u2014\nReply to this email directly or view it on GitHub\n[https://github.com/grommet/grommet/issues/292#issuecomment-171305305] .[https://github.com/notifications/beacon/APStUhMaSurbMWi3F4ZR6PVk5EgL-l4Iks5pZlXlgaJpZM4HDJ3M.gif]\n. Hi @alansouzati, \nthe new package seems to be fine! \nThanks!\n. yeah I see your point and will change it. \nBut it will take a bit of time because I'm quite busy until february. \n. Hi, \nnope, this issue is outdated :) \n. thanks for the answer, it works! \n. @alansouzati is there any release-date(range) for 2.0? . Hi, \nI've already tried the transfer props and they will not work. \nHere is a Codepen:\nhttp://codepen.io/anon/pen/vyOebz?editors=0011\nI understand your advice for the disabled fields. \nIn our case we do not impelement an public application. The user of our application will be trained to understand why all fields are default disabled. And when they want to edit them they have to enter the \"edit\"-mode. \nIn our (maybe special) case this avoids unwanted data manipulation. \nThats why we need this disable-Flag on nearly all components. \nAnd as I said our user know what they have to do if the fields are disabled. \nBut thanks for this interesting side note. :) \n. Yes you are right, the input field is disabled but not the button. Thats why I said the current Component can't be disabled.\nSo currently you can avoid that the user can enter values but the button still have function. \nThat's bad usablity in my opinion. \nSo is it possible to make the button disabled too?\n. Hey Alan, \nI'm understanding your case and I'm sorry to hear that there are people out there who will not give any information about wrong data in forms. \nAnd I hope you will understand why we want to disable fields. \nIn our application we provide forms for managing attributes of documents. In the default-case the user will just see all attributes (see image below). In this view all fields are disabled so the user can not edit the attributes.\n\nIn this image my modified DateTime-Component was used. \nNow: with your DateTime-Component the user cannot write any data in the date field but still can click the drop-down-button and the calendar opens. This behavior will suggest the user that he can enter some data but clicking on any date will not write the date in the input-field as you can easily see in the codepen. \nAnd this is why I created this pull request because it's bad usablity in my opionion. I really want to have that the drop-down-button will not open the calendor if it is clicked and disabled.\nbtw: \nclicking on the edit-button will turn the formfield green and the user can edit the fields (see below).\n\n. @alansouzati any further points about this? :) . You can add at every single Component a size attribute (e.g check the icon-doc: https://grommet.github.io/docs/icon/).\nIf this is not enough you can override the grommet-default values for \"small\", \"medium\" and so on in your very own sass file.\n. @Stalso for Buttons you can use the \"plain\" attribute (see https://grommet.github.io/docs/button). \nUsing this will take the size from the containing element. \nBut feel free to use SASS-files to define css-attributes for all your components. . > This is what Vadym's intern implemented. \n...jesus \nokay I will close this issue.. ",
    "larryhengl": "Cool , np, and thanks!  Feel free to close this puppy if you've already addressed this issue.\nSide Q while I've got your ear:\nRegarding the Examples...is the Exporting idea now deprecated in lieu of a separate repo or subdirectory?  Or is that still in-progress, and I should fire up the example server in the meantime...to view the examples code?\nthx!\n. ",
    "zzl1": "Tested browsers:\nFirefox 43.0.4 \nChromium V47.0.2526.80\nOpera 34.0\nGrommet Version:\nreact: '^0.14.2',\ngrommet: '^0.5.2'\nReproduce step\n\nEnter http://172.17.0.2/test/ (browser window max)\nResize window to make it like a smart phone.\nResize window to original (max)\nClick arrow \u201c-->\u201d. The expected result is this arrow \u201c-->\u201d should be moved to the left of the page (as below). But it does not.\n. \n",
    "ashispaik": "Tweaked the CSS as per my requirement, never mind.\n. ",
    "harshithjv": "Hi @alansouzati ,\nI thought I will open a issue similar to this but I think can comment on this thread as its similar issue.\nI have CRUD forms on three tabs, i.e., Add, Delete and Update user forms. So when you navigate between tabs the user name field retains value. I have changed the id and fieldname and still the issue persists. Is it some code-glitch along with one of browser nuisances to preserve field value? \nAlso note that password field gets cleared sometimes. It works this way:\n1) When I fill fields on 'Add user' tab and click on 'Delete User' tab the username field is as it is. When you click on 'Reset Password' tab username still persists but password fields are empty.\n2) Follow same steps as above but skipping 'Delete User' tab will retain password fields in 'Reset Password' tab\nRefer the screenshot attached to this comment.\n\n. @alansouzati\nThere are no issues and gulp dist runs successfully. \nBy default there will be warning for using deprecated customEslintPath config in grommet-toolbox config file. Even after fixing that, the same issue persists.\n. @alansouzati \nNo issues on browser console also.\n. @alansouzati\nYa I was trying to open index.html and my project has routing.  The webpage usually works by loading just the HTML file.\nBy application server you mean Apache or Nginx?\n. @slara \nThat solutions usually works as file server. It loaded the page alright. But mine project was dependent on JSON file data which this server was rendering as download only. So the data from JSON was not parsed successfully into the page. Maybe extra parameter on command line or I may need to write custom python script to serve files. Thanks for the solution and I will look into that part of making it work if I would implement the python server solution. But I did not understand the react-router part of your comment. Please explain further.\n. @chandrakantnitt \nThanks for the answer. I knew about http-server solution. But can it be used for big production site?\n. @alansouzati \nOk that looks great for closing this ticket. To conclude, if react-router is used in React/Grommet projects, then it is wise to serve the project from bundled output(i.e., project files generated from 'gulp dist' command).\nLet me know if any pointers to consider before I close this issue?\n. @slara Thanks :)\n@alansouzati Closing this issue.\n. @ericsoderberghp Thanks for suggestion. The problem is fixed after migrating to new verion. \nClosing the issue.. Hey @ericsoderberghp \nPlease forgive me for long delay in reply, as I had been long vacation and then busy with some project work after reporting to duty. The problem still persists.\nI have imported SCSS in root JS (src/js/index.js) like this:\nimport '../scss/index.scss';\n. The import statement was not changed even after migrating from old grommet and grommet-toolbox to new version.. Hey @ericsoderberghp and @alansouzati \nCan you please check this issue again?. Hi @ericsoderberghp ,\nI am attaching file here:\ngrommet-chrome-transparency-problem.zip\nI have created toned down and dummy version of our project. I have tested thoroughly and it's font is not visible on google chrome browser. Please have a look.\nBrowser: Google Chrome v55.0.2883.87 (64-bit)\nOS: Windows 10 Enterprise (64-bit)\n. ",
    "localhosted": "When setting a tables order, usually there are up/down carets that signify the direction being ordered and availability of a column to be ordered. Like in: http://carlosrocha.github.io/react-data-components/\nBut, even then, I'm not actually sure having those smaller would fit. \n. This works for now, but after awhile, having to keep track of versions changing on an old application will be quite challenging. Would be nice if there where a faster release schedule.\n. ",
    "NerdGGuy": "Thanks!\n. ",
    "danielo515": "That does not exist, so no, gromet does not have a loading indicator.. ",
    "elronalds": "@alansouzati I've committed another update to fix the issue if the legend is disabled.  Not sure I'm following along there regarding the defaultXIndex.  The reason I added the hoverOnly property was someone might always want the legend to appear so I've made this an optional setting for now.\n@ericsoderberghp\n. @bryanjacquot If the chart is at the top of the page then couldn't the tooltip just be shown extending down at the bottom of the chart.  Just like how the legend tooltip changes left/right directions at the moment?  I think showing the legend outside the graph area is the way to go forward.\n. ",
    "leahtowns": "I'm getting this same issue too. I had used 0 as the default value before the values were loaded with the Rest util and was getting similar browser console errors\n\n. ",
    "alireza-ahmadi": "@ericsoderberghp do we have any progress on RTL support? if not, does anyone working on this or we can start to complete it?. ",
    "dgennetten": "Link to #1529?. just fyi, 0180e4c increased dependency on moment.js to fix an ie/edge issue.. https://github.com/grommet/grommet-docs/commit/0242a1fe6e43f0a8b9dc082c3343cf5d9660e23b  Done.. ...and it would be great if one of you guys would do a write-up on using TypeScript with Grommet.... This thread illuminates the difficulty of this request https://github.com/moment/moment/issues/162. @alansouzati #1353 does not address this timezone issue. Anyone test this on Edge?\n. This is fixed with #793. Codepen showing problem: http://codepen.io/dgennetten/pen/KagbYo?editors=1010\nI will do a PR in Drop.js to fix.. @alansouzati this is fixed with PR1290, April 5.. BTW, works as expected on Chrome and Edge.. @tracybarmore Can you please confirm the expected behavior?  The stated expected behavior doesn't seem to be present \"in other themes\" (e.g. grommet themed primary anchor doesn't 'change to black'). I see the inconsistency you mention, but it's not clear what is correct.. Verified fixed.. Remove Inuit #1154. @mjasnikovs, as indicated in the link you provided, the Date object (which Timestamp uses) provides 24-hour time format as a default in locales where that is standard. I just verified this is true noting that https://grommet.github.io/docs/timestamp shows \"15\" for   operating in es-ES (Spain), where in the US ('en-US') it shows \"10 am\".. Seems fine now on grommet 1.7.0, chrome 60.0.3112.113. This issue seems to be gone with current OS & browser versions.. This issue still exists. Verified on Win10/Edge.  This is a duplicate of #1327 I am working on solution.. As I'm looking into the source of this issue, I'm becoming aware that this needs to also include #1216. @JetLim did you have a chance to chat with @ericsoderberghp about this?. @ericsoderberghp it looks like this component is behaving as designed (though not as expected). Width is cased in the scss for up to only 4 bars?https://github.com/dgennetten/grommet/blame/master/src/scss/grommet-core/_objects.meter-bar.scss#L221.  Any thoughts on how best to resolve?. Docs updated to detail current series-length limitations. Seems to be working as expected on chrome, safari, edge and IE -  OSX and Win10. @vaibhavbhargav, this is normal and expected behavior. HPE-themed Grommet components show the green border when they have focus. Your code leaves the component focused. I'm going to close this ticket. Let us know if you feel it should still be open.. @dioklecijan, can you provide environment details? Seems to be working fine in chrome, safari, edge, and IE.. Ah. I was looking at this instance, where it is working fine: https://grommet.github.io/docs/check-box\n. @XuluWarrior, were you intending to create a sort of bullet graph with a value displayed against a threshold?  (https://en.wikipedia.org/wiki/Bullet_graph).  Otherwise, if you're truly intending to display a series of values, the grommet pattern for this is side-by-side bars (https://grommet.github.io/docs/meter/examples?series=true&i-value=true).. @XuluWarrior I see the primary problem with this proposal is its imposed practical limitation a maximum of two stats (without widening bars beyond the current, long-established pattern and presenting design and usability issues).  This seems very limited in its application. Do you disagree?\nI do believe a legitimate grommet Bullet graph (which might work for you since both values would still be under programmatic control) might present a more compelling case?. @XuluWarrior What if you have two or more stats that are equal in value? It seems there would be no way for the user to know.. In grommet 2.0 (soon), meters and charts are getting a substantial makeover. Let's close this and perhaps re-open as an enhancement request on 2.0 if still needed.. @ahappypie, we welcome pull requests! Go ahead and submit.. PR #1344 solves this PC-only issue. It should be failing on all browsers!. @alansouzati This is fixed with #1344. May 16. Let me know if there are questions/issues.. @rardoz,  Apologies for the confusion caused by that sketch file.  It turns out that the toolbar shown is not something that has ever existed as a Grommet component. \nYou could, however, build your own toolbar using <Header><Menu inline={true}><Button icons={...} /></Menu></Header> \nAgain, sorry for the misleading docs.. Forgot to mention: this issue appears on IE/Edge/Chrome/Firefox but on PC-only! . @alansouzati I believe this is ready to merge.. @alansouzati looks like https://github.com/grommet/grommet/commit/9c9b16dd77202a87d98958186894db729a1e1848 needs a second look.... @MarcelGeo  I think you need to use full={true} or full=\"vertical\".   The grommet-docs reference to full in the Box size property is in error, I believe.. Docs fixed in PR267. @alansouzati I would like to turn this one into an alan-tutorial .... This seems to be associated with the lack of negative number support ( #1333 ).. @tracybarmore I'd like to take this on, but need creds.. @alansouzati @lozzi I propose we address this by documenting-while-creating a grommet-alt theme.. Yes, using  is the recommended approach.  Closing the ticket.. The pen shows the label left-justified and the error right-justified.  They stack when there's insufficient room.  This example alone, I believe, shows \"expected behavior.  However, there is still an issue when the two elements wrap. Here is an example: https://codepen.io/dgennetten/pen/XggxVE?editors=0010. It appears this is fixed?  grommet 1.7.0, chrome 60.. I believe this is behaving correctly now. Please let us know if you're still having issues.. And established pattern with grommet is extreme simplicity. One aspect of that is the preference to push forms toward a state of only including required fields.  This is why they are not labelled 'required' as that is the assumption. \nOccasionally, we'll insert an optional field and specifically label it \" xyzzy (optional)\"\nWe're always trying to reduce enterprise form lengths for overall usability and clarity.. Your codepen produces the same result in Safari.. This is a long standing bug with chrome.  You can also see it in action here: https://jsfiddle.net/dgennetten/fbves03w/\nYou can read about the issue--which appears close to resolution--here: https://bugs.chromium.org/p/chromium/issues/detail?id=276329 (see last few comments). I think the difference may have to do with the root-cause race conditions being very slight. I'm going to go ahead and close considering the thread above. Let me know if you feel it should stay open. . Hey Ryan, how about throwing together a quick docs draft on \"Using Typescript with Grommet\"?. I'll review whatever you put together! I used to use an early version of Typescript back in the day when I was a .net dev. Would love to get some element of those days back. . @George-Aidonidis It seems the first bullet (select item that user has selected) works fine. The second, (Select first item on list if none selected...) seems unconventional and would be unexpected. Are there other places where this is the standard behavior?. This is as designed. When sortable, the TableHeader becomes a button and adheres to grommet button styles.. Identical overlapped/hidden results also occur in Safari. @RajaKorada can you provide a little more information?  Environment?  I'm not seeing issue with current grommet/chrome.. @ericsoderberghp, Yes.  Completely agree. This change effectively does that while at the same time, reducing the overly-thick (imho) small/xsmall bands. Note how much more top-to-bottom consistent the 'after' is as compared with the 'before' in the attached PDF. . ...especially note how the current PR brings the small and medium-media:<720 into exact parity.. This should be tied to #1512 . guess this should have been in grommet-docs. oops.. No. Will close.. For windows at least, there is a sketch file viewer. https://icons8.com/lunacy.  Also, the key sketch files are available in PDF form.\nUsing grommet does not require Sketch. Sketch comes in handy for designing grommet-based UX mocks.. Grommet is fully deployable and functional without Sketch!. :-S\n. I am not seeing this issue. Could you check and verify that it is still occurring?. Fixed with PR #1709. Understand and agree. Docs updated. Will close if no objection. . @karatechops I think this asymmetry might make sense for Headline over Heading. A doc can easily have Headings placed under other content, whereas a Headline tends to be a top-of-container element. At any rate, that would be a separate ticket, so I'm going to go ahead and close this one.. This is by design. Grommet is a fairly opinionated environment, imposing certain design patterns for consistency and usability.  What is your application and reasoning behind wanting the deemphasis?. Closing this issue as it is 'as designed'. Please let us know if you need further assistance regarding this.. Fixed with PR 1723. Fixes issue #1662 . Currently, margin prop on Heading incorrectly sets both top and bottom\nmargin. Should only set bottom. #1668\n\u2014Douglas\nOn Tue, Nov 7, 2017 at 3:00 PM, Alan Souza notifications@github.com wrote:\n\n@alansouzati commented on this pull request.\nIn src/scss/grommet-core/_objects.heading.scss\nhttps://github.com/grommet/grommet/pull/1713#discussion_r149516882:\n\n@@ -53,3 +53,9 @@ h6.#{$grommet-namespace}heading {\n   text-transform: uppercase;\n   letter-spacing: 0.2em;\n }\n+\n+.#{$grommet-namespace}heading--margin-large,\n+.#{$grommet-namespace}heading--margin-medium,\n+.#{$grommet-namespace}heading--margin-small {\n+  margin-top: 0px;\n\nwhy is that needed?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/pull/1713#pullrequestreview-74923649,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADPrlt4kkr_K-PjQ7xyEcnKFobKVcKAIks5s0NLogaJpZM4QRP3T\n.\n. I believe it is coming from the mixin _tools.margin.scss and applied symmetrically. We cannot isolate heading margins there.. @alansouzati, I think this is good to go as is.. A temporary workaround: wrap the offending<Select> in a <Box>. Fixed in PR #1720. @alansouzati I think an excellent companion post to follow the above would be to take this Textarea resize issue and make it into a well-written tutorial that all can learn from.. Thx @alansouzati.   My continuing problem, however, is the coverage fail. Can you suggest fix?. Now it is a label tag embedding a checkbox. See the other changes to the file (and the PR notes).. \n",
    "tearsofphoenix": "+1\n. some other bool field also not work in several components, such as Header. It seems grommet not fit with latest babel syntax.\n. +1\n. I prepare to use Search in the Header.\n. +1\n. ",
    "myk5000": "instead of: router: React.PropTypes.func.isRequired\ntry: router: React.PropTypes.object.isRequired\nSeemed to make the error message go away, and address what it was talking about.\n. ",
    "ibhag": "It works fine in Firefox, but is reproducible on Chrome and IE.\nPFA screen shot\n\n. Hi,\nPlease review the changes. \n\nThanks\n. No code change required. For create-react-app adding .env file with following helps\nNODE_PATH=./node_modules\nSASS_PATH=./node_modules;src. \n. Hi Alan, \nThanks for reviewing it quickly. Actually var labelArray = label.split(','); should be changed to var labelArray = label.split(delimiter); \nIt'll be invoked like this:\nChart series={series} delimiter=\",\" points={true} legend={{position: 'overlay'}} type=\"line\" xAxis={xAxis}\nThis is particularly useful for users who have date as labels for x axis.  \nCreating a label string with a \\n in it will not help as it'll still have one text element and we need tspans for split.\nHere is how it looks after adding \\n\n\nRegards\n. ",
    "arlair": "I briefly investigated localisation for currency recently and found there is a Intl Api (ECMAScript Internationalization API (ECMA-402) for JavaScript) that has support in most major browsers except Safari. It sounds the meaning of support is variable in terms of features:\nhttp://caniuse.com/#search=intl\nand a Intl polyfill available here:\nhttps://github.com/andyearnshaw/Intl.js/\nThere is also Globalize (no jquery dependency, just under the repository)\nhttps://github.com/jquery/globalize\nglobalize/date.js   5.1KB(Minified + gzipped size)  3.8KB(Runtime minified + gzipped size)\n\"Globalize doesn't use native Ecma-402 yet, which could potentially improve date and number formatting performance. Although Ecma-402 support is improving among modern browsers and even Node.js, the functionality and locale coverage level varies between different environments (see Comparing JavaScript Libraries slide 25). Globalize needs to do more research and testings to use it reliably.\"\n. Yes, unfortunately it seems like the Intl API only does half the job, date formatting:\nhttps://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\nDate parsing in ECMAScript doesn't seem so well covered.\nI looked at React-Intl as well and it didn't seem to fit my needs. I started using formatting and parsing based on Globalize via a store passed in the props.\nThis article seems to suggest jQuery will Globalize for their own date picker:\nhttp://blog.scottlogic.com/2015/03/06/localisation.html\n. Just to clarify, there is Date.parse(), but it seems like a bit of a mess.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n. Hi @tracybarmore, I didn't open the issue :) Moment.js still seems to be listed in the packages.json file, so I would assume this is still a valid issue to consider.. Maybe it could use an Adapter Pattern if the internal usages are not complex. Then write a default adapter, but allow flexibility with different adapters to replace the default.\nPeople could write their own adapters for the date libraries if they want to continue using an existing or their favourite date library.. @RyanCCollins Nice work. I tried this out, but my config compiles to ES5 at the moment, which then gets imported by Babel in a Webpack build in another project.\nTo generate code that runs correctly I seem to need to use:\nimport * as Header from 'grommet/components/Header';\n\nwhich generates ES5:\nvar Header = require(\"grommet/components/Header\");\n\nHowever, with this I get compile errors based on the types.\nI tried compiling the source from your project:\nimport GrommetApp from 'grommet/components/App';\n\ngenerates ES6:\nimport GrommetApp from 'grommet/components/App';\n\nbut for my ES5 version using Header it generates:\nvar Header_1 = require(\"grommet/components/Header\");\n...\nReact.createElement(Header_1.default\n\nwhere default does not exist and errors at runtime.\nI'm not quite sure what the correct solution is as TypeScript imports have confused me many times. Imports seem a bit contentious in regards to what Babel vs TypeScript does and what is correct in the JavaScript specification as can be seen in this answer and the linked answer here: http://stackoverflow.com/questions/35706164/typescript-import-as-vs-import-require. Oh, I see it seems it was deprecated in 0.6.2 and maybe removed now.\n. Just some feedback on the API/documentation. I had tried using the selected on the table and did not understand it/could not figure out how to use it. I ended up using onSelect to get the knowledge of selected back into the TableRow.\n. ",
    "karatechops": "I'd like to propose date-fns as a potential replacement for moment.js. From what I can tell you only import what you need so you're left with a much smaller file size.. Looping in 2.x DateTIme  #1460. . The 'gulp dev' task error is referring to the 'docs' folder which I don't see in this repo. I'm currently developing/extending Grommet components and am looking to streamline the development process. I'm presuming I should npm link a new Grommet project to my local distribution copy of Grommet, would this be the recommended path? \n. Thanks for the info, this works great. I'll spend some time today looking over Grommet Toolbox to get a better understanding of the tool as I'm not seeing hot reloading working properly out of the box. \nI submitted a PR regarding the console message. \n. I've posted PR #880 which fixes the Safari select bug.\n. I just wanted to chime in real quick and add my recent experience with the Layer closer. \nRecently I had a project which required a layer with a fixed closer position. This was necessary because the Layer had quite a bit content which required scrolling. Requiring the user to scroll to the bottom and then scroll back up to the top is probably not optimal UX.\n. The codepen doesn't appear to be working however just invoking <Chart> in the codepen is most likely calling the old Chart component. You may be importing the old charts in your project component . Your import should look like the following:\nimport Chart from 'grommet/components/chart/Chart';\nor\nimport Chart, { Layers, Base, HotSpots } from 'grommet/components/chart/Chart';\nIf I understand the new Charts components correctly it does not require the series prop any longer but will require a values prop in the Area/Line/Bar component which contains an array. If you are using some of the Meter components I believe they still use the series syntax. \n. Try uninstalling your current grommet install and using this dependency in your package.json. I've had issues with just pulling directly from npm as well. \n\"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\n. Converted Hotspot component to Pulse icon with similar functionality to Spinning icon.\n. In reference to PR #921, should we add use undefined instead of null? \n. I was not aware the label supported the node proptype, that's interesting. Let me re-think this, I'll need to devise a mechanic to determine the size of the node and adjust the vertical Axis width based on that. \n. The width constraint will be removed in the next commit. I was attempting to avoid this bug, when the label is longer than the axis' tick the tick line stretches to the full width. A potentially clean solution could be utilizing CSS ::before and ::after on .grommetux-chart-axis__slot to place tick marks. \n. Here is a codepen displaying the behavior.\n. I added a commented out proposed fix to the code pen's SCSS.\n. I've refactored the Timestamp to include the following fields properties  date, time, hours, minutes, seconds. \n\n. Fixed in PR #892\n. Nope, this makes sense. Thanks for clarifying.\n. @ibiBgOR this is intended, I just recently filed an issue regarding the same thing. Please refer to issue #1025.\n. Your example uses a string as a child for Button, with the latest Grommet version you would use the Button label prop. If you need a string button why not use Anchor instead?\nIt's my understanding this functionality was added to extend Button's flexibility by allowing custom components to be nested in Button without Button styles. It, however, seems if you're explicitly setting plain to false the plain class name should not render. In that same vein, it would also make sense if none of the normal styling Button classes are rendered in a Button with nested children if the intention is to create a wrapper.\n. @RyanFDev can you provide an example where className is not being passed down to the class list in the DOM? We put a lot of effort into making sure classNames propagate to the DOM to allow flexibility. You can use our Codepen if you'd like to provide something specific.\nPersonally, with the apps I build in Grommet I rarely need to override Grommet's core styling. If you do need to override styles here's a great example of how we handle our HPE theme. Take note of theindex.scss file where the color variables are loaded first, then grommet core styles, then any component that's being extended. Generally my project's index.scss will look like the following:\n```\n@import 'my-app.defaults';\n@import '~grommet/scss/grommet-core/index';\n@import 'objects.carousel';\n@import 'objects.mobile-menu';\n@import 'objects.layer';\n@import 'pages.about';\n@import 'pages.news';\n```\nIt sounds like you may not be explicit enough in you style declarations if the component is not receiving your styles. a Codepen will be helpful to give you some more guidance. \nAs an aside - after working on Grommet core I picked up BEM and love it for naming my styles. If you're not already familiar with BEM I highly suggest taking a look. \n. Just ran into this today. Created an example before I saw there was already an issue open, here's my codepen displaying the behavior. My app has a few Boxes stacked horizontally each with their own Menu component, the Menu has a tendency to jump around - particularly with y overflow.. Looks like adding flex=\"grow\" to the container Box solves the problem. I updated the pen with the solution. . tagging #1495 / #1518. @ThanosDi, thanks for filing this issue. I agree DateTime could use some mobile cleaning up. This late in 1.x I don't think any drastic changes will be made to DateTime component. I'll tag 2.0's DateTime card (#1460) so we can get this worked out. . Tagging 2.x List (#1472). Awesome approach @alansouzati! I'll tag Select's 2.0 card ( #1484 ) but I think functionality like this would be better suited in grommet-addons.. This is a tough one and one I've encountered in apps I've worked on, not just Grommet. When we define a height to be 100vh in Safari it does not include Safari's bottom navigation bar. The height of the browser's bottom nav is not deducted from the the height of the browser, this is intentional on Apple and Android's part. Please refer to this blog post for more details.\nThere are workarounds you can use in your apps if you'd like to go that route but I would just suggest using a different style of layout instead. the workaround involves targeting specific browsers which use this sort of footer nav and adding a style override that looks like style={{ minHeight: 'calc(100vh - 70px)' }} - where 70px is the height of the browser's bottom nav. Again - I don't suggest using this in your app.\nThere's not much we can do in Grommet's core to fix this, the full box is doing its job at setting the height to 100% view height. Targeting specific browsers on specific devices is definitely not a rabbit hole I'd suggest going down.\nI'm going to close this for now to keep Grommet's backlog clear. Feel free to re-open if someone comes up with a solution we can line into Grommet. In the case that someone does find a solution I will buy them a beer \ud83d\ude04  . HI @Auchindoun, did @jhawthor's code snippet resolve your issue? I've used redux-form and Grommet's Select in a few projects, I can dig up some code snippets if you're still having an issue with your Select component.. Closing this due to inactivity.. Hey @dgennetten, did you test the use case with an app/icon flush to the edge of the browser? It seems like with this fix the Drop could potentially be placed partially outside of the browser. . The issue that this PR presents is the rendered copy within the Select component is the object's value not the label. With React we keep track of our form inputs within component or app state and not on the DOM element itself, form elements should be controlled within React. Your codepen is using DOM values which should be considered an anti-pattern in React. . Hey @woodm1979, thanks for pointing out this bug. It looks like the bug stems from these styles not calculating the pad properly. I'll take a closer look and see if there are any backward compatibility issues with posting a fix. . This one is a doozy. If we could define the basis in the initial Box container we could accomplish something more fluid but currently a Box with row and wrap accepts all variations of basis mixed together there's not much we can do to fix this up.  For example if we appended the wrap styles with the following: \n```\n.#{$grommet-namespace}box--wrap {\n  flex-wrap: wrap;\n.#{$grommet-namespace}box.#{$grommet-namespace}box--basis-1-2 {\n    &:nth-of-type(2) {\n      margin-right: 0;\n    }\n  }\n}\n```\nThis would work for your use case but wouldn't solve the issue as the basis nested within wrap can be a mixed bag (IE four 1/4 basis Boxes with five 1/3 basis Boxes.). The alternative here is letting the Box rows render and having Grommet's Box programmatically remove the margin at the end of the rows. I generally steer clear from anything that renders and needs to adjust itself after -- I wouldn't classify this as an elegant solution.\nFor circumstances like this where I can't find an elegant solution in Grommet's core I generally reach for inline styles or styled-components. In this case I would use a Javascript's map on my data to trigger the removal of the right margin - check out this Codepen for an example.\nPersonally, I would like to remove the pad between prop from Box when a basis is set but introducing this change in 1.x will certainly break layouts. I'm going to tag 2.x's Box card ( #1457 ) to bring some light to this issue. Thanks for bringing this to our attention @woodm1979!. As I've documented this issue in Chart's 2.x card (#1447) I'm going to close this. Thanks for the feedback, @XuluWarrior!. Closing this for now, it sounds like this is resolved as you've moved away from phantomJS. Headless Chrome seems like it would be a really good option here. I see a lot of strange behavior with phantomJS and React.. I've closed #1369 and documented the feedback in 2.x's Map component (#1473). . Related to #1306 . Whoops, looks like I overlapped this one with #1612. As this is a specific issue to compact Form would it make more sense to target the --compact modifier class within Form?. @dgennetten we're you able to identify any issues with the labels outside of compact forms? . Tagging 2.x Tiles #1494. Thanks for filing this issue, @ezzatron. I've tagged it to be discussed and possibly incorporated in Grommet 2.x's chart. The team does not plan on supporting negative integers in Charts for Grommet 1.x as we're not currently adding features to the 1.x version. Feel free to follow the conversation in the 2.x Chart card in #1447.. As we're currently not adding new features to 1.x I will be closing this. I will tag 2.x will this feature and we will discuss it's implementation. Thank you for the contribution and feedback @ahappypie! If you'd like to follow the conversation it can be viewed in issue #1473.. I'm closing this as I've tagged our 2.x Chart card and documented the feedback there. From what I can tell from the next branch's code, 2.x Chart will fully support all color indexes.. As I stated in #1428 I'm not able to replicate this in OSX / Chrome / Grommet 1.7.0, I presume it was fixed in 1.6.0.. I'm not able to replicate this issue and the Codepen seems to be functioning correctly in OSX / Chrome / Grommet 1.7.0. As I believe this to be fixed in 1.6.0 I'm going to close the issue.. I'm still not able to reproduce this but maybe someone else can. @jfiala-cz or @tvojtech are you able to create a PR with a fix?. @Hackbyrd, thanks for filing this issue. Are you still encountering this issue or was it resolved? If you are still encoutering an issue please submit a Codepen displaying the behavior, screenshots can be very difficult to read.. I'm going to close this as no testable code has been provided. Judging by the error this is going to stem from how you're exporting/importing the component. @Hackbyrd please feel free to re-open the issue when a gist or Codepen is provided. . Hi @RodHPE and @frandr, I need a bit more context before I can investigate this issue further as FilterControl does not have a native menu. I've created a new Codepen boilerplate which has the grommet-addons components lined in. Can you provide a code sample which reproduces the bug so I can review it?. Closing this as no further context was provided. Feel free to re-open with more info. . Hey @Gehbrial, thanks for filing this issue and providing great feedback. I do agree Menu should be able to programmatically be set. As we're approaching 2.x we're not currently implementing new features into 1.x. I'm going to tag 2.x's Menu card ( #1475 ) so we can be sure to include this featue as I think it is a great addition to Menu.\nIn the mean time if you still have not solved this in your app you could artificially trigger a click event on your menu. I've created a Codepen which demonstrates how to trigger a click event on the menu using React's refs. While this is not a perfect solution it will work in your app while we work to create this feature in 2.x. Thanks again for your feedback!. Hey @agrawalPratik, thanks for filing this issue. This seems like it may be by design, you can always use Javascript's Math methods to round off the properties. Here's a Codepen displaying rounding the values. . Hey @primozs, thanks for filing this issue. I'm not able to reproduce this locally on React 15.6.1 / Grommet 1.7.0, I presume it to be fixed at this point. I've also reviewed react-desc and grommet which are both correctly using the PropTypes package. . Hey @agrawalPratik, thanks for the feedback. I don't think we will provide size props but it's current form is probably too rigid. We'll look into it for 2.0.. Hey @agrawalPratik I've reviewed the issue and need some clarification. I see you set the Box basis to 1/2 but you also set a size to the box as small - which behavior are you expecting from the box, 1/2 or small? Additionally in this scenario I would absolutely avoid using flex boxes within tables. If you'd like to use a table use table's accepted html tags (tr, th, etc) to create your layout instead of Boxes. \nI created a fork of your Codepen which I believe fixes your issue by explicitly setting the Box's align property. I also noticed you may be running into an issue with words being too long, this can be solved by the word-wrap css property as you see in the Codepen. . I see this is closed but I wanted to tag #1423 as it raises a good point of which color indexes Chart supports. Judging by the Chart code in the Next branch is looks like it supports all color indexes. . Documenting #1333 and #1362 - Users would like the ability to include negative integers in their Charts. I believe it would function similar to the below image - \n\n. #1600 raises a good point that the Spinning component starts hidden and animates itself in, for quick load times you barely get a glimpse of the loader. If we're using the same animation for 2.0 let's consider reversing it.\nEDIT: Additionally, I like the idea of passing a color index to the Spinning component.. As suggested in #1595 disabled should be a prop which propagates to the DOM.. @woodm1979 in #1310 raises a very interesting point which consists of combining basis and pad={{ between: 'smalll' }}. My recommendation was removing the pad between prop when a Box basis is set. . Documenting #1169 - DateTime on mobile is pretty rough. My suggestion would be to place DateTime in it's own layer on mobile. I would also advise against so many inputs in one form element - time and date can be two separate form elements.. New DateTime component should remove Moment dependency. I still stand by my recommendation of date-fns.. PR #1369 attempted to introduce onHover/active color index swaps. I like this idea and discussed it yesterday with @ericsoderberghp, he likes the approach of tinting the existing color index which seems like a good suggestion. It would be helpful to be able to pass an object or a string to the colorIndex prop - colorIndex={{ base: 'xyy', active: 'xyx' }} . #1432 has a great suggestion regarding passing an active prop to the Menu component which could programmatically trigger the Menu. . #1226 displays an interesting approach to multi select. It's my suggestion a multi select component either lives on its own or in grommet-addons.. #1537 is a feature request for defaulting onEnter events to select the first suggestion. We could bubble up the onEnter event and let the user do what they want with it - this way we can maintain solid accessibility but provide users with the flexibility to add features like the requested feature.. #1625 makes a great point, most of our form elements can exist in an app without being connected to a container's state. It may be worth giving Select some internal methods to track state if onChange is not passed in via a prop.. @panigrah that is why I've documented the feature request here. I'd like to see Select track it's own state unless an onChange prop is passed in. Retrieving the value of the Select which tracks its own state feels a bit wonky but some folks are traversing the DOM for form values.. Tagging #1518 and #1097 . Has there been a discussion regarding keeping Toast/Layer in the app DOM node tree? I've run into issues a few times regarding how these two components render themselves in the DOM. What was the inherent issue that drove to rendering these components outside of the app?. I can pick this up starting next week. It seems like this component could pretty much be removed and replaced with simple composition. \n<MyIcon />\n<Heading level={1} size=\"small\">\n  <strong>\n    My Heading\n  </strong>\n</Heading>\n<MyTrendIcon />\n<Label>\n  My Label\n</Label>\nLet me know if this is worth picking up for next week.. There's a few approaches to getting Grommet working with create-react-app. One can be seen here in our grommet-react-app, in this repo CRA is being ejected and all the sass loaders for Grommet are being put in place to run Grommet. As a newbie you probably want to steer clear of an ejected create-react-app as the Webpack stuff can be mind boggling.\nThe alternative is just pulling in Grommet's minified CSS bundle. If you look at the Grommet distribution bundle you'll see css files for each theme. In your root component you can simply import the css - import 'grommet/grommet.min.css'. Now obviously this method has drawbacks, the most important drawback is you'll have  tough time creating your own theme.\nI put together a quick repo for you which uses the second method I described - https://github.com/karatechops/create-react-app-grommet\nI should note that in Grommet 2.0 you should be able to seamlessly run on top of CRA as we're doing away with all of the sass and swapping in styled-components instead. \ud83c\udf8a . I'm going to close this for now in an effort to keeps Grommet's backlog clean. Please feel free to keep the conversation going. I'm happy to continue assisting as I know how confusing the Javascript tooling process can be. Feel free to join us on Slack!. @mjsevilla the package dependencies need to be updated other than that it should be fine. V2 will seamlessly align with CRA as it's built on styled-components instead of Sass. With the create-react-app-grommet repo I'm simply importing Grommet's bundled css to the index.js file to retain grommet's styling information. I haven't built anything for production with the repo but in theory it should work \ud83d\ude04. Hey @srallen thanks for filing this issue. I read through the Slack conversation and reviewed the Codepen. Just to clarify the issue - when the plain prop is set to true in Button the icon should not be rendered. I've posted a PR for this - #1604.. We've decided to postpone this feature until 2.x as we believe this will break too many existing apps. Judging by the 2.x Button code it looks to already be implemented. . Hey @pawelpicur, thanks for filing this issue. I believe the intended way to use Icons and Tips is to wrap them in Buttons. Check out this Codepen displaying this behavior.. @pawelpicur I've created a second Codepen which avoids using Button and simply uses Box instead. \nI've tagged Tip's 2.0 to fix this. I'm closing this for now as this is slated to be fixed in 2.0. Thanks for the feedback!. Updated to reflect removed mixins folders.. Closing this for now as I don't have time to maintain the list. . Has there been a discussion about background color context? Will Grommet 2.0 support adjusting elements color property so maintain readability? If this is an intended feature we can build an HOC to find the dominate color of a rendered DOM element or just dig into the component's CSS. Perhaps the HOC can pass a prop of backgroundContext to a wrapped component.\nI'm happy to take on this HOC if we're handling this feature for 2.0.. Closing this for now as I don't have time to maintain the list. . I've created a PR for this but I'm hesitant to post it just yet, I want to discuss with @alansouzati the accessibility implications. I'm leaning towards not implementing this as I'm not sure it makes a lot of sense to users using screen reader. . Hi @mariosant & @George-Aidonidis! I've discussed this feature with @alansouzati, our accessibility guru, and he agreed that this feature enabled by default would lead to unintended selections when pressing enter.\nI would lean towards allowing the onEnter event to bubble up to it's container component. This would allow the user to specify the enter key's behavior beyond Grommet's default behavior. I'm going to close this and document this feature request for the 2.x Select (#1484). \nThanks for the feedback!. Hey @agrawalPratik, thanks for filing this issue. I am able to see this issue in Codepen in IE11 but when I run a grommet app within IE11 using the same code I do not see the issue. \n\nI'll see if I can do some more digging in Windows to reproduce the issue. \n. @agrawalPratik, I am not able to reproduce this issue on a native Windows environment or a virtual machine. What specific version of IE11 are you using? I'm on 11.0.9600.18638. . @agrawalPratik I can't seem to find much in terms of IE11's version history. Can you verify you're on the latest IE11 build? I'm presuming 7 but just in case - what version of Windows are you running?. @agrawalPratik, I was not able to reproduce this issue after many attempts. Microsoft does not have an updated version history list, I can not verify 11.0.9600.18762IS is the latest version. \nAs an alternative, have you tried Grommet 1.6.0? I know Layer had some improvements in that release, perhaps it will resolve this issue. I wish I could help out more here but I'm not able to see the bug. As a last ditch effort you might consider writing a style override for Layer's z-index in your styles.. The layer/header breaks codepen in IE11. I would need a way to reproduce this outside of codepen to fix it. When I view this in codepen the whole codepen site is pushed outside the browser boundaries.\n\nCan you send a screenshot of your IE11 about window - here's mine after installing all updates to Windows 7:\n\n. Sorry @agrawalPratik I was not able to re-create this on Windows 7/IE11, maybe someone else in the community can help out here. . @linde12 thanks for filing this issue. I've posted a PR which should fix the issue. I had trouble discerning what the author's original intent was here. For now when the enter key is pressed without any suggestions the call back returns the target ref and a second parameter of false letting the user know no suggestions were selected. According to the docs this is the appropriate behavior for the Search API.. This seems like a more declarative way of of composing the Select component, I dig it. \nRelated to #1484. Hey @Gehbrial, thanks for filing this issue. It looks like TextInput is expecting an array with length instead of a 0 length array on the initial render. I've added an empty string to your initial suggestions array and that seems to fix the issue. I'm going to take a deeper look at fixing this within Grommet but for now you can use that fix in your app. . Hey @mikeplus64, thanks for filing this issue. I just ran some tests in a grommet/create-react-app and clocked the bundle without card at 110.77kb and the bundle w/ card at 163.37k. This is quite a substantial weight increase. I will take a look at removing Markdown from the Card component.. Update: The deprecation notice regarding Markdown support in Card has been merged. I will post a PR after Grommet's next release so we can fully remove this. @mikeplus64 thanks for the feedback!. Hey @alampros I've submitted PR #1591 to fix issue #1585 however it should also fix this issue. Let's see if this still happens after the PR is merged and we can go from there.. Hey @jlevesque, thanks for filing this issue. I don't see why we couldn't just use the same attribute for the name property as the id property. The IDs for the radio buttons are automatically generated so the name property would be something like ${selectId}-${optionValue} - would that fit with what you're looking for?\nAre you using React/Grommet more in the form of widgets rather than in the context of a full Javascript application? Generally the tracked form's state is being submitted to an API rather than using the default HTML event so I'm curious to hear about your use case.. Closing this as no additional information was provided.. @dgennetten @agrawalPratik This is a pretty classic Flexbox bug and actually not so much a Grommet issue but more of a browser CSS interpolation issue. IE11 and Safari require some Grommet Boxes to be wrapped in a row to process their height. I've provided a code pen here which fixes the issue just by using Grommet Box composition - notice the Boxes whose height was not being calculated correctly are now wrapped in rows. \nThis would be a really tough issue to fix within Grommet. If you check out this code pen I fixed the issue using the style prop on the Boxes whose height is not being calculated properly. The issue is the Box requires the css property flex: 1 0 auto;.\nAs the row nesting codepen provides a fix I'm going to close this for now. Feel free to reopen if this does not solve your problem.. @DmitrijDN the docs have not been updated. I believe Grommet's latest stable npm package will include the fix.. Tagging #1455.. Hey @EJShim, would you mind providing a codepen for this? I'm not able to reproduce this as the grommet docs tiles on more work well on mobile.. As a Codepen has not been submitted for this issue and I can not replicate it in my sandbox I'll be closing this issue. @EJShim feel free to reopen this once a Codepen is created so I can further investigate the issue.. @RajaKorada does this look like the issue you are encountering? . Hey @RajaKorada, I met with the team yesterday to discuss this issue. The scrollable prop in Table is meant to be flush with the edges of your app, I believe the initial use case was placing it within the split component. After some thought I realized that maybe we could use the Box size property to contain the Table however it appears when setting max-height on a Box it does not overflow to scroll.\nI'll meet with the team again and discuss our approach to fixing this as fixing the max size properties of Box may result in breaking plenty of apps. In the mean time if you'd like to fix this issue today in your app I've updated my Codepen to display how you could hide the Table's overflow.. I've opened #1606 in light of this issue. @RajaKorada thank you for bringing this to our attention, I believe the proper fix for this lies within resolving the Box bug.. It looks like Edge's selector is case sensitive, and Grommet icons render with PATH=\"000\". adding the following to my CSS fixes the issue.\n```\n.grommetux-control-icon:not([class=\"color-index-plain\"]) [STROKE*=\"#\"] {\n  stroke: inherit;\n}\n.grommetux-control-icon:not([class=\"color-index-plain\"]) [FILL*=\"#\"] {\n  fill: inherit;\n}\n``. @RyanCCollins @XuluWarrior I'm going to close this as it's been two weeks without follow up. Feel free to re-open this with some more context/ a Codepen is available.. Thanks for filing the issue @atanasster! I've posted a PR with the fix so hopefully we can merge this for the next release.. Hey @generalChaos thanks for filing this issue. I agree Select should handle window position better but would you mind providing a screen shot for your particular circumstance? It's possible there is a better way to handle this situation from a UX perspective. Off the top of my head I would say you could swap Select out for Menu. Menu will detect which direction to display the drop down, I've created an [example codepen](https://codepen.io/karatechops/pen/KvJZaJ?&editors=0010) displaying this behavior.. Tagging Grommet 2.0's Select component - #1484. @generalChaos we'll most likely be rolling out support for this in Grommet 2.0. I'm closing this for now as we have the new feature tagged for 2.0's Select.. I'm pretty certain this should fix #1552 as well.. Hey @camposcristianeze, thanks for filing this issue. Can you provide a [codepen](http://codepen.io/pen?template=gaEGPY&editors=0010) displaying your example?  . Thanks for providing a Codepen, @camposcristianeze. Carousel does not support stepping nested children, only direct children. You would need to do something custom in this scenario - check out this [Codepen](https://codepen.io/karatechops/pen/qPELwV?editors=0010) for a basic example.. React/Animation checks the dif on the key prop to trigger an animation. In this [Codepen](https://codepen.io/karatechops/pen/qPROOd?editors=0010) I've updated BoxTile'skey` prop to adjust when changing slides. Its usually best practice to avoid using map indexes in keys as you run into issues like this.. This makes sense, the disabled property should propagate to the DOM as an HTML button would.. Tagging #1455 here.. Thanks for the feedback @linde12, I'm going to close this to keep the backlog clean. I've made a note of it in #1455.. @ericsoderberghp @alansouzati do we have a target version for removing Card's Markdown support? If so I can update the PR to reflect an accurate release.. It's unlikely that these sort of granular controls will be added to the Spinning component. There's a lot of effort going into Grommet 2.0 to streamline our components. I would say there's definitely potential for Spinning to accept a theme color index but that would be the extent of this.\nIn apps I've been working on recently we have a WithLoading component which either shows children or the Spinner if there's no children. If you'd like to delay the Spinning element so it doesn't flash you could use that sort of component with an offset to delay the Spinning removal. Personally I'd rather my apps be fast than worry about the loaders flashing.\nHere's a Codepen displaying a WithLoading component I mentioned.\nI'm going to close this for now and tag the 2.0 Spinning for discussion. #1450 . @jackjwilliams I see your point, the Spinning animation has it started hidden. I do agree that should be changed. I've tagged the 2.0 Spinning component where we can introduce this change. Thanks for the feedback!. Closing this as it will be a 2.x feature and is not backward compatible.. @L0ZZI I believe the consensus we came to on Slack a good few months ago was - while max is broken fixing it would actually break too many apps. Maybe we consider removing it from the docs?. Thanks for filing this issue, @fendyjong. I can confirm this is happening in my local grommet docs setup. It does not appear to be be happening in a Grommet project I'm developing in Grommet 1.6.0 so that may provide a clue as to where the bug originated. I'll do a bit more digging and hopefully post a fix soon.\nEdit: here's the easiest way to reproduce the issue:\n<Menu label='menu'>\n  <Anchor label='test' path='/test' />\n</Menu>. @RyanCCollins let's wait for the PR merge. It should auto close as its tagged in the commit message.. @fendyjong, thanks for the info. I've posted a PR with a fix for this (#1611), it will be available in our latest stable after the PR merges.\nI was not able to nail this down to a specific piece of code which was introduced in 1.7.0. I assume a package inadvertently updated which created a race condition in React regarding handling the click event and the Menu DOM element being removed.. @alansouzati this should be good to go if you'd like to review again.. I updated to the code to the base spacing unit. @alansouzati, I'm still not sure the implications of targeting checkbox / radio button label outside of the compact form. I think the bug is more in regards to how Form works versus those components. I believe this style in FormField is causing the behavior:\ndisplay: block;\nmargin-left: -24px;\nmargin-right: -24px;\nI'm pretty sure we've run into this in the past, I can't seem to track down the issue. Maybe it was mentioned on Slack.. Hi @atanasster, thanks for filing this issue. If centering the Spinning component is your preference you can simply wrap your List in a Box which defines the text to be centered via the textAlign prop. I've created a Codepen displaying this behavior.. Thanks for filing this @BjornMelgaard! I'm interested to see how this conversation unfolds. The team is divided when it comes to switching to a typed a language, the majority of the core team do not use TS or Flow. While I do agree Typescript is far superior to Flow unless the whole core team is on board to do this I don't see it happening. Not to mention Grommet 2.x is well into development without types.\nPersonally I enjoy writing code quickly without types as we're all pretty busy on various projects it's important we can extend Grommet efficiently without wrestling types. As @RyanCCollins can attest we had a pretty crappy experience using Flow for our last project which ended up costing us a lot of extra time, this makes me even more hesitant. I come from a design background with no traditional CS education. I tend to work in a more creative approach when writing code versus what I would assume would be a traditional CS grads workflow. With that perspective I feel types slow me down more than devs whose foundation was in typed languages like C.\nIdeally teams working on large JS projects should be using a typed subset of JS but I'm not confident it's right for our team at the moment. With the rise of Reason I would predict in the next few years all of our React projects will be typed. I know @RyanCCollins is working on Typescript bindings for Grommet 2.x so that's a plus for the TS community. I'll leave this open for the rest of the team/community to chime in.. @jessegoraya have you considered creating your own theme for your project? Take a look at how our HPE theme is structured.\n@import 'hpe.defaults'; // import our theme default values specifying colors, fonts, etc.\n@import '../grommet-core/index'; // import grommet's core theme which consumes these values\n@import 'objects.button-hpe'; // import styles for any components we'd like to custom style\n@import 'objects.anchor-hpe';\nEdit: This will be a lot easier in 2.0 \ud83d\ude09 . @jessegoraya, yes that sounds correct. You will need to support loading scss files in your project, there's some example repos if you need a hand with that process.\nHere's a file tree for reference:\n\u25besrc/\n  \u25bejs/\n    index.js\n  \u25bescss/\n    _my-theme.defaults.scss\n    index.scss\nindex.js\n```\nimport React from 'react';\nimport App from 'grommet/components/App';\nimport '../scss/index.scss';\nexport default class MyApp extends React.Component {\n  render() {\n    return (\n      \n        {this.props.children}\n      \n    );\n  }\n}\n```\nindex.scss\n```\n@import 'my-theme.defaults';\n@import '~grommet/scss/grommet-core/index';\n// Place any custom styles here or follow Grommet 1.x's pattern of placing styles\n// in component specific .scss files.\n// This is where the benefit of sass and theming comes into play.\nbody,\nhtml {\n  background: nth($brand-grey-colors, 2);\n@include media-query(lap-and-up) {\n    // My app now changes background colors on Desktop machines.\n    background: nth($brand-grey-colors, 1);\n  }\n}\n.wc-chatview-panel {\n  background-color: nth($brand-accent-colors, 1);\n}\n```\nYou can check out the HPE defaults file to give you a good idea on how to structure your _my-theme.defaults.. Hi @ledbit, thanks for submitting this PR. I've tested the code with the following Menu: \n```\n<Menu \n   responsive={true} \n   inline={false} \n   label=\"Menu with dropAlign\" \n   dropAlign={{right: 'right', top: 'bottom'}}\n\nFirst action\nSecond action\nThird action\n\n```\n\nThe control is correctly hidden but clicking the control in the Menu component does not hide the drop. The only way to hide the drop at this point is to select an item, there are circumstances the user will not want to select an item. To keep our UX standards high the menu needs to have close functionality without the user making a selection. . I was hoping to highlight some non-changed code to add a snippet but GH wont let me do that \ud83d\ude04  \nCheck out line 509 of the Menu component, you will need to add a handler to the onClick like the following ternary - \nonClick={() => this.setState({state: this.state.state !== 'expanded' ? 'expanded' : 'collapsed' })}. I just cross browser tested and everything looks good. I'm a bit concerned the design does not match the other Menus. @L0ZZI (Grommet design guru), do you want to weigh in on this? \nThis PR fixes this - https://codepen.io/gimei/pen/ryVYEz?editors=0010 \nWith the PR merged it basically removes the Menu header from the Drop if it doesn't overlap the Menu.\n\n. Hi @panigrah, thanks for filing this issue. Select does not have an internal method to track state, it's up to the user to track what is selected and what value to display. Just to clarify your use case - are you using something that is capturing values from the DOM when submitting the form versus submitting your Form's state? I can see the benefit of allowing Select to track its own state as I believe most of Grommet's form elements can function not connected (TextInput, CheckBox).\nI'm going to tag Select's 2.x card (#1484) so we can discuss implementing this feature. I'll have to discuss with the team to see if this is worth adding to 1.x as we're only doing bug fixes in 1.x at the moment.\nI've created a Codepen displaying the various Select behaviors. I'm not totally clear on the issue of onChange not firing, it properly fires when we pass a handler to the onChange prop. Would it be possible for you to fork the Codepen and try to re-create the onChange not firing upon first select?. @panigrah, is the Select in a Layer? I've seen a bug where sometimes a component which uses the Drop util (Select, Menu, etc.) loses app context. I believe It could also happen if your app is running two versions of React - IE an NPM package is running 1 version of React while your app is running another. Regardless of the cause, the first Select click you should be seeing an error in your console. Does anything throw to the console when onChange doesn't fire?. @panigrah, nice work! To document the issue for search purposes - you went to react-dom 15.6.1 from which version? . I believe @RyanCCollins was looking for a way to create a more flexible Meter width. Ryan, did you find anything for adjusting Meters width? From my experience Meter only supports select sizes.\nAs far as I know, Meter does not support this sort of customization. It sounds like for this sort of component you will need to build something custom. I've created a quick Codepen displaying how you can pass your upload progress to a component.\nI'd love to see more flexible widths in Grommet 2.x. Tagging 2.x's Meter card (#1452).. Hey @Kaitsh, thanks for filing this issue. I've created a Codepen displaying SocialShare's mail behavior. Just to clarify your issue - when a SocialShare email opens the to field is appending with data instead of the message body? Can you submit a screen shot of how your email client handles the Codepen's mail share? I'm not able to replicate the issue with either desktop mail clients on my machine (Postbox, Outlook on OSX).\n. Looks like @alansouzati fixed this yesterday. Are you still seeing this behavior?. Hi @anpieber this was fixed in #1591 and will be available in the next release. For now you can use the latest stable build.. Hi @jessegoraya, this is a bit difficult to debug if I can't see the full project. Are you familiar with Chrome dev tools to make sure your styles are being compiled properly into the Project? Can we maybe isolate this to a single component in a project which you can share in a repo?. I'm actually on board with this however it will potentially open the floodgates with issues. This would definitely need to be slated for Grommet 2.x. @alansouzati @ericsoderberghp, what do you guys think? . This is a tough one. Is the goal to render in a specific language based on locale in the server render? I have not worked much with i11n and React but I have built many apps which use SSR. Would the initial render still work if you just check for window deferring the number/date polyfill until the first render? if (typeof window !== 'undefined') mycode(); . Hey @Catx7, thanks for filing this issue. Would you mind providing a Codepen displaying the behavior so we can gain a better understanding of the issue. . @L0ZZI yes, I see the bug. Created a codepen to display the behavior. When the user presses arrow down on the suggestions past the browser window the scroll bar does not update, the user will eventually be targeting elements below the fold.. @noorisunique, I may need some more clarification on the layout you would like to see. Box's justify prop aligns the nested child depending on the Box's direction. When Boxes are set to row, the justify and align prop swap. Maybe you're looking for the alignSelf or align prop? . I believe in this scenario you could use the basis prop to keep the boxes centered properly in the nested element. Check out this Codepen where I've swapped your box size prop for basis.. @noorisunique you can set the max width of the containing Box, check out this codepen for an example. Alternatively you can checkout Grommet's Column component.. This is the exact issue in #1567 (even with the same screenshot), correct? I posted a workaround in that issue, this issue stems from a bigger issue with Box (#1606) which will most likely not be fixed in 1.x.. @jornncc I'm able to pass the onSort property to the table header. Here's an example.. Hey @fendyjong, this was fixed in 1.8.0. Can you upgrade your app and confirm?. @alansouzati the example for V2 makes sense and I do agree that's the best approach. I was trying to point out the inconsistency of the default styling of only applying margin to bottom unless there's a margin prop set.\n\nIt seems the default margin for this component should be set to top and bottom to be congruent with Paragraph's default margins. However, Headline uses only bottom margin ... \ud83d\ude05 . This is resolved by adding the following style\n.grommetux-split__column {\n  overflow:auto;\n}\nHere's a codepen displaying the fix.\n@ericsoderberghp or @alansouzati any repercussions to adding this to our core styles? I have not used the Split component in any apps so my frame of reference here is pretty limited.. I can confirm this bug. It looks like this style in FormField is causing it. @ericsoderberghp do you remember why this was needed? I tested removing in all major browsers on Mac OS and did not see any bugs however I assume it's there for a reason.. Hi @frandr, can you assemble a Codepen to display this behavior for us easily diagnose and fix? I tested in the docs example and do not see the behavior you're describing.. Hi @jcdavison! For this pattern I would suggest passing your custom label via the icon prop which expects a node. I've created an example in a Codepen. Label is typed to string for localization and accessibility purposes. The label will eventually end up in the a11y title. . Any status update on active support?. Discussing this with @L0ZZI, we can introduce a contrast level to the theme object. . Removing stale, this should be fixed before V2 launch. . V2 is leaning towards the ideology that these sort of molecules where we're composing components belong in a grommet-addons like library. We'll keep the V2 core library as lean as possible and let separate libraries take care of the more advanced component compositions.. Resolved by #2061 . Just a note here - v2 has a peer dependency of 16.3, we should be debugging this with getDerivedStateFromProps instead of the cwrp lifecycle method.. Hey @eluchsinger, you're setting your component to visible, Animate will not check for scroll events if the component is already visible. The onAppear and onLeave lifecycles are triggered by the component being scrolled into view. Check out the Animate code here. Here's an updated pen.. Thanks @alansouzati \ud83d\udc95. This approach feels very grommet-y especially considering Layer already is using a keyframe animation - https://codesandbox.io/s/1rx7m8px3q. @oorestisime this functionality is built out but it took digging into the code to discover the implementation. You can pass overrides in Markdown's components prop and it will deep merge with the initial Grommet overrides set.\n```javascript\n<Markdown\n    components={{\n      blockquote: {\n        component: Quote,\n        props: {\n          border: '1px aliceblue solid'\n        }\n      },\n      pre: {\n        component: Pre\n      },\n      code: {\n        component: Code\n      },\n    }}\n\n{children} // Markdown string\n\n;\n```\n\nI filed #2574 to update the documentation. This may also be a good place to note that I don't think the components prop is intuitive. As someone who is used to markdown-to-jsxI would expect Grommet to properly handle the user passing in overrides and gracefully merging those with Grommet's existing override set. With Grommet's current behavior if a user passes in a single override it will clear the existing Grommet component set. . The Markdown component will lose the grommet components/styling if it's passed via the options prop, here's a code example\n\n. It would seem we could effectively expose markdown-to-jsx's native behavior to handle the options prop.\njavascript\n    <Markdown\n      options={{\n        overrides: {\n          blockquote: {\n            component: Quote\n          }\n        }\n      }}\n    >\nThe above snippet should merge with the existing component set. I would think you could just spread the overrides prop values before components here\njavascript\n    const overrides = deepMerge(\n      {\n        p: { component: Paragraph },\n        a: { component: Anchor },\n      },\n      heading,\n      ...this.props.options.overrides, // probably desctructured to options...\n      components,\n    );. You're correct. I updated Grommet to latest and React/DOM to 16.6.0 and it is working now. Not sure if it was a React bug or Grommet but it's working well now. Thanks!. The pen points to https://rawgit.com/grommet/grommet/stable/grommet.min.js which loads v2. Is there a cdn to pull v1 from?. This one works -> https://codepen.io/karatechops/pen/aMmzoJ?editors=0110\nPoint to:\nhttps://s3.amazonaws.com/hpe-developer-portal/grommet.min.js\nhttps://s3.amazonaws.com/hpe-developer-portal/grommet.min.css. Fixed with #317 on grommet-docs. To fully implement the fix the CDN links in the Hello World gist and grommetux codepen account need to be updated. I do not have access to these.. With the field types array to achieve the full output the component would look like this \n<Timestamp value=\"2016-09-27T20:01:14.468Z\" fields={[\"date\", \"time\", \"seconds\"]} /> correct? I see where you're going with this, the user should be able to isolate pieces of the Timestamp. I'll go ahead and update my PR if this sounds right to you.\n. I've updated the formatting and included an extra test for class names. \n. I realized this was a util right after commit. We should be all set now. \n. Related to #1519 . This makes sense, I'll cross browser test this to verify it holds up. . @alansouzati the proposed styles seem to work well across browsers. I had to add a small fix to the radio button which was losing its width but this should be good to go. \ud83c\udf8a . The issue is specific to compact form + check/radio box. It would be reasonable to only target the elements within compact form as that would disrupt the least amount of existing  code bases.. ",
    "eugenioclrc": "You could try with https://github.com/taylorhakes/fecha . ",
    "HeidiTosi": "I realize you do not have a Breadcrumb in the develop side of things and I'm not quite sure I understand what \"PR gladly welcome\" means. \nIs it possible for your team to supply us with a coded version of the Breadcrumb widget? And if so, what would the time frame for it to be available for us to use?\n. I have not heard from the Grommet team on this bug. Please let me know if it will be possible to fix.\nI have added 3 attachments. The first 2 show current behavior. The last one shows expected zero behavior.\n\n\n\n. Thanks, Bryan. We will leverage the openMulti for our purposes. I would like to ask if the expanded content area of the accordion supposed to be indented like the row header. I would expect the lines of the accordion to span the full width of the container (similar to a table or list) which would leave the expanded content butting the container wall. Is this the expected display? \n. I am seeing the same issue. I added an extra legend line item to the code which fixed the font size without displaying the extra legend line in the display. \n\nWithout the second legend line, the count font is larger.\n\nExample code when it appears correct:\n  render: function () {\n    return (\n      \n\n    \"label\": \"Critical\",\n    \"value\": 0,\n    \"colorIndex\": \"error\",\n    \"onClick\": \"...\"\n  },\n                {\n    \"event\": \"Critical\",      \"label\": \"Critical\",\n    \"value\": 0,\n    \"colorIndex\": \"error\",\n    \"onClick\": \"...\"\n  },\n]} />\n        \n\n. ",
    "geshenyi": "there is no proxy server...but i just installed it on my mac successfully...Can i just copy the grommet folder of node_modules to my win7 laptop and directly use it?\n. ",
    "genyded": "I wouldn't copy. Try running npm update npm on the Win box and try again (after deleting the current node_modules folder just to be sure). Also make sure the cmd window you are running in has Adminstrator Command Prompt in the title (right like and open it with Run as Administrator).\n. +1 - this is an issue if we need fixed headers and also need to control colors. I also spent about a half an hour trying to figure this out before I searched here in prep for opening an issue and found this one.\n. Any ETA on this? Have a client that is wanting us to pursue other UI framework for their projects just  because of this. We're using pre-compiled css for now and still learning intuitcss or we'd PR it. Seems like the offender in the compiled CSS is item in the Styles window of the screen shot below...\n\n\n\nBrowser Screenshot\n\n\n![image](https://cloud.githubusercontent.com/assets/3081676/15271373/579ee18e-1a0b-11e6-8d4f-050b6e3b5a2b.png)\n\nIf that style is unchecked, the header stays fixed and the colors are correct. We tried overriding things with React inline styles, but apparently the Grommet components ignore those - so we cannot find any effective way to work around this. Would hate to have to throw away our investment in this, but our client is not happy about it. \n. We're probably OK with whatever the solution ends up being and don't mind if we have to do a bit extra to get it. Our biggest concern is that if a Layer contains a complex form (or wizard multi-step form) and the user is on a larger screen - they can fill in a bunch of stuff, accidentally click the backdrop and then POOF. We're in progress adding some confirmations to help prevent this, but it would be nicer to just prevent it in the first place.\nNot critical - but nice to have one way or another. Thanks!\n. Fair enough and kudos for staying true to the core tenants of Grommet. When my team and I get some breathing room (or if we ever do) - we'll try to help invest some time in getting some of this the right way. We can work around it for now. Thanks for the follow up!\n. ",
    "vsuoni": "There seems to be a wrong import path in the docs:\nimport Spinning from 'grommet/components/Spinning';\n. ",
    "dakt": "Am I missing something...it seems that this is not working anymore. Can anyone confirm this?. @alansouzati  Yeah, sorry, completely missed the  \"props transfer\" comment you made. I just wrapped CheckBox inside the Box and worked from there. Not sure why we cannot do that directly on CheckBox?. Well this is still the case even in 1.3.4.\nI really don't understand how can this problem persist for so long. Just don't tell me it's by design.\nThis makes  component useless.. ",
    "dermawan123": "Hi,\nI think I solved it after following plenty of guides. What fixed it:\n1. Apparently, I have missed some of the dependencies as stated here. I proceeded to install Python 2.7 and a Visual C++ compiler.\n2. Install Ruby for Windows using this link, then run:\n   gem install scss_lint\n3. then update NPM from 2.1.xx to 3.3.8\nnpm install npm -g\n4. then \n   npm install babel-preset-es2015\n   and\n   npm install babel-preset-react\n5. then on the folder of the app, run\n   npm install \n6. then run\n   gulp dev\nI hope this help the others who are facing the same problems.\nRegards,\nDermawan\n. ",
    "JasonWeise": "I have done a little bit more investigation whilst waiting for a response and I have noticed in the StickerSheet for Sketch there is a DateTime component that looks perfect for what I need.\nI have looked through the src file in this repo and cannot see this component.\nIs there a DateTime Picker like demonstrated in the Sketch Sticker Sheet in resources.\nThanks heaps for looking at this..\n. ",
    "dfischer": "Update: I fixed this error by doing:\nnpm install babel-preset-es2015 --save --no-bin-links\nnpm install babel-preset-react --save --no-bin-links\nBut I feel like grommet should already take care of these pre-req?\n. ```\nnpm --version\n2.14.6\nnode --version\nv4.1.2\n```\nNo problem. Thanks \ud83d\udc4d \n. ",
    "kentsalcedo": "Not able to recreate, is anyone else able to recereate? Screenshot below is a screenshot of my toggle checkbox in ie11 and looks okay in Edge as well\n\n. I pushed up the new code that removes the height property\n. okay sorry about that alan, I will refer to that and try get my PR as clean as possible.\nI installed ruby due to an error thrown when I ran npm install, which noted to install ruby and scss-linter\n. Ah I see, thanks for all of the advice and help. How would you like me to proceed? Should I take that dependency out of my json file and resubmit a PR?\n. Hi Alan, thanks again for all of those helpful tips. I made the changes we discussed and I believe I squashed all of the commits to a single one. Please let me know should you have any other questions or concerns. Thanks!!\n. I will remove the grommet toolbox.\nI just pulled down from master and merged that in before doing my pull request. The change should not be from me.\n. @alansouzati - Hi Alan, I some issues after rebasing this PR so I submitted PR https://github.com/grommet/grommet/pull/565 which took into consideration the changes you suggested\n. Per the new insights, I am closing this PR and will resubmit once it is more refined\n. After squashing unwanted commits, I was unable to rebase. Replacing this PR with https://github.com/grommet/grommet/pull/584\n. Per clarification of the issue, the issue is the closer placement. The closer is inside the layer (the closer is nested properly in the layer tags and the closer is visibly inside the bounds of the layer), but per the designs, wanted the closer icon further in from the edge rather than flush against the corner\n. @alansouzati I believe the padding should be half an inuit-base-spacing-unit, which is 12px on each side. I can decrease the padding size if desired.\n. @alansouzati Please review. This PR replaces https://github.com/grommet/grommet/pull/570\n. @alansouzati if you could review this PR, I would really appreciate it. Thanks alan!\n. @alansouzati Updated the PR. We cannot use a plus because the will also elongate the entire graph. Upon further exploration, other x axis labels used graphHeight -= XAXIS_HEIGHT to ensure there is space for the labels. I have used the same implementation in order to give the inline legend labels enough spacing to ensure they do not get cut off\nsigned-off-by: Kent Salcedo <kentsalcedo@webmocha.com\n. @alansouzati thanks alan!!! \ud83d\udc4d \n. @alansouzati could you take a look at this PR? thanks!\n. I cannot recreate on the current grommet sandbox (https://codesandbox.io/s/github/grommet/grommet-sandbox/tree/master/), I believe the issue has been resolved since\ncurrent infinite scroll with expected behavior\nhttps://rr9mw4j36q.codesandbox.io/infinitescroll\n\n. @ericsoderberghp I am using the 4th brand grey color of the HPE default. When I run gulp dist though, the build process is throwing an error because aruba does not have a 4th grey, even though it is not being used. I can hardcode the grey color if that is preferential\n. @ericsoderberghp I removed the added grey color from aruba and resolved the build step error from gulp dist\n. @alansouzati I will remove, thanks!\n. Related to issue https://github.com/grommet/grommet-estories/issues/303. I am working on a fix for this bug, which will deal with this issue at the same time\n. ",
    "djksar": "It's not the same problem. in the header of the image we did a cut-out to fit in the copy and links. Take a look at the below screenshots. \nwhat it looks like:\n\nwhat the comparable post looks like now:\n\n. ",
    "simula67": "@alansouzati  Shouldn't this be supported directly by grommet though ?\n. Thanks for the feedback, I have modified accordingly. I also added a workaround for an issue we were noticing with superagent.\n. Attaching files are handled. If you use FormData.append(), there is no need to differentiate between fields and files. For append, the third argument ( filename ) is optional and I felt it best to leave it to the default behavior. I can add the third field based on a simple instanceof check, if you think that is better. MDN says it should be handled by the browser though :\nfilename Optional\nThe filename reported to the server (a USVString), when a Blob or File is passed as the second \nparameter. The default filename for Blob objects is \"blob\". The default filename for File objects \nis the file's filename.\n. ",
    "jameswyse": "I was having similar problems getting stretch working on Box. I thought the problem was those missing classes as well at first, which is how I found this issue.\nThe default for align-items / align-content is \"stretch\" but flex items don't grow by default (they will shrink in most cases though). Simply adding flex-grow: 1 to the children fixed it.\n. Oh I just noticed the following in _objects.box.scss:\ncss\n// temporary flex grow capability\n.box > .flex {\n    flex-grow: 1;\n}\nSo it seems the tempoary solution is to apply the flex class to children you want to grow :)\n. ",
    "icukaegbu": "Is it possible to integrate https://github.com/jxnblk/rebass into your amazing framework? Can there be a combination of effort?\n. ",
    "derekahn": "Hey @alansouzati  nice work on your PR \ud83d\udc4d  \ud83d\udcaf . When I pulled down and was playing with it, I did notice that when you would cycle through <tab>ing it would jump to the first child. This behavior was unlike what you had for <shift + tab>. Wasn\u2019t sure if this was intended behavior, or not. But I remedied it if it was on this PR https://github.com/grommet/grommet/pull/520 to your TABINDEX_ROW_ARTICLE branch.\nCheers \ud83c\udf7b \n. @christinHP I'm unable to experiment/test with the link above. However, judging from the images provided it could be possible that there is an issue in your React \"container\" (the component wrapping the grommet components inside the render method). Possibly an unintended race condition while propagating props of the sort. I'd be happy to help with a little more information and or steps to follow to recreate.\n. @christinHP I believe this  coincides with issue #612.\n. @christinHP Is the middle picture a different form from the rest? It could be that the grommet's Form component attr is not set or set to false, i.e. <Form compact={false}/>. \n. Hi @christinHP,\nSorry for the delayed response, I was trying to respond to your emails. Also it appears the ip address provided in the email is no longer being hosted any more. However, I did mock up a form utilizing the component , and it appears okay in my windows 10 ie11. Simply but utilizing the code snippet that I suggested of nesting 's in a  component.\n```\n\n{}} />\n{}} />\n\n```\n\nI hope that this helps. If I am understanding correctly, you are specifically speaking towards the layout design of grommet-templates/LayerForm, this is not apart of grommet core, and should not be changed according to your projects design. I assure you that grommet-template's <LayerForm/> is merely just a simple abstraction of grommet-core's <Layer/>, and <Form/> components. I think if your project is calling for a specific design that is not adherent to the nature of grommet-template's <LayerForm/> I would encourage you to compose the layout with grommet-core's <Layer/>, <Form/>, <Box/>, and <Button/> components.\nPlease let me know if you need me to clarify more, but I assure you that this is not a bug in grommet-core nor in grommet-templates. \nMahalo,\nDerek\n. Do you mean to pass the whole array? https://www.npmjs.com/package/glob-array\n. Should a customConfig be a toggle then? Like a property \"useLocalBabelRc: bool\"?\n. The poster defaults to the class .video video { width: 100%; }. vw would just be a more browser consistent solution.\n. @ericsoderberghp good point. Should we combine them? width into size or vice versa?\n. @ericsoderberghp  Looks like it's only setting it to a fixed width.\n$size-xsmall: round($inuit-base-spacing-unit * 20) !default; // 480px\n$size-small: round($inuit-base-spacing-unit * 24) !default; // 576px\n$size-medium: round($inuit-base-spacing-unit * 30) !default; // 720px\n$size-large: round($inuit-base-spacing-unit * 40) !default; // 960px\nI can add  these options to the size attribute instead. I think by allowing the user to choose between auto, inherit, and initial it gives a lot for flexibility, especially when one starts nesting the  component.\n. @alansouzati sorry for the delay. Looks like to override/target the controls, this level of specificity is required.\n. ",
    "kennynaoh": "Thanks!\nSo you mean both are used, right?\n. Thanks!\n. ",
    "PeterDaveHello": "grommet is using Apache-2.0\n. ",
    "nickjvm": "Looks like this is an issue with grommet-templates having a dependency on an outdated version of grommet.\n. @alansouzati I like the mixin to reduce repetition. I'll update the PR.\n. @alansouzati can do!\n. @ericsoderberghp this change has been made.\n. @ericsoderberghp certainly!\n. @epilande That seems like a little bit of a hack, since the footer isn't really a menu. \nhttps://github.com/grommet/grommet/blob/master/src/scss/grommet-core/_objects.footer.scss#L12\nBy default, The footer box-sizing is border-box. so maybe in this IE11 case, we need to set box-sizing: content-box in addition to forcing a height?\n. @tracybarmore it looks like the contrast detection for light sidebars is fixed with grommet stable, but still seeing the same issue with dark colored backgrounds in Firefox\n\n. @ericsoderberghp I appreciate your attention on this. Unfortunately I'm still seeing the same issue in Firefox. Can you think of anything I can provide or try out on my end that would help you to replicate the issue?. I'll see if I can get something together to replicate the issue.. @tracybarmore Thanks for following up on this! It's definitely still an issue for us, so I'd like to keep it open. \nI was able to create a very simplified version of our environment to replicate the issue. Please check out the repo here: https://github.com/nickjvm/grommet-color-contrast. As you can see, with the latest version of Grommet, Firefox is still giving us an issue in both Windows and OS X:\n\n\n. @ericsoderberghp Thanks for digging into it.\nI ran your repo and was also not able to replicate. I'll compare webpack configs and see if there's something that sticks out that is different. The setup we're using came from grommet-toolbox.\nThanks for pointing out the extra <App />. I think that was just a bad copy/paste when I was trying to shrink the code for demo purposes. Our real app only has one \ud83d\ude04 \n. @ericsoderberghp @tracybarmore We upgraded to 1.3.1 today, and after some brief testing, it appears to be resolved. If it continues to be a problem, I will reopen the issue.. @alansouzati that diff looks better \ud83d\ude04 \n. @ericsoderberghp is there a reason this breaking change was introduced in a patch release? or merely an oversight?\n. @alansouzati It looks like the change was tagged to v1.0.1\nhttps://github.com/grommet/grommet/commit/7a2042f97deb7522400c8b8cfb903bf2dcccb4cf#diff-0839403ed3b1e347ea49e70ab82abca5R106\n. Thanks @ericsoderberghp, that fixed it.\nLooks like id needs to be added as a required prop on Checkbox, https://github.com/grommet/grommet/blob/master/src/js/components/CheckBox.js#L69\nOr, if id is not provided, could it be set to the same value as name?\n. Wouldn't an ID still be required if a CheckBox is outside of a FormField?\nEither way, I think it would be useful to set id prop to match name if id is not defined.\n. @ericsoderberghp, regardless of how the id is set, there is still an issue that the id is not set as a required prop (or a prop at all currently), which should be addressed since it is necessary for the checkbox to function properly. \nhttps://github.com/grommet/grommet/blob/master/src/js/components/CheckBox.js#L69\n. I hadn't considered the use case of a checkbox without the label. I would still expect id to be listed in the component's propTypes definition, even if it's not required. \n. @RyanCCollins I was just about to create PR with that same logic \ud83d\ude04 . @ido-ran can you share your webpack loaders config? I'm running into the same issue.\n@alansouzati is this process documented anywhere?. @dgennetten for what it's worth, I was seeing it on OS X 10.11.6 with a 3rd-party mouse. (Scrollbars in OS X are hidden by default if you're using a magic mouse or touch pad). The non-FormField context doesn't have the left/right padding overridden by the style above. I've updated the codepen to illustrate the same component outside of a FormField.\n. ",
    "antoligy": "Presumably for stability?\nFor the meantime I'm forcibly loading React v15 by supplying a resolver alias in webpack as documented here and this seems to help. https://github.com/grommet/grommet/wiki/Building-Grommet#using-local-grommet-build-in-your-project\n. Relevant- https://github.com/inuitcss/getting-started/issues/12\n. Hi @bryanjacquot, I'm completely on board with InuitCSS, the link was for context and and understanding of what was going on in the wider Inuit community.  Very excited to see new development there! \nCheers for this, \nAlex. \n. Hey!  I guess that depends on how Grommet is to be built: If the webpack route is appropriate, then it may be worth attempting to use them wholesale, relying on Webpack's css-loader to transform stylesheets into objects capable of providing class names. (i.e. import styles from ./something.scss allows me to className={styles['chart__axis--x']})\n. ",
    "leo4ever": "Very much Looking forward to the update. I am using MaterialUI and would love to move to grommet as it offers all the components I am looking for.\n. ",
    "ischyron": "sorry npm is v2 . closing this\n. ",
    "robi-richter": "Thanks @alansouzati, I will check it out tomorrow.\n. ",
    "coltonw": "I took a different approach and wrapped the anchor element and added an onClick to do my navigating. Something like this:\n```\nimport React, { Component } from 'react';\nimport { push } from 'react-router-redux';\nimport Anchor from 'grommet/components/Anchor';\nexport class NavAnchor extends Component {\nconstructor() {\n    this.onClick = this.onClick.bind(this);\n  }\nonClick(event) {\n    event.preventDefault();\n    this.props.dispatch(push(this.props.path));\n  }\nrender() {\n    const path = this.props.path;\n    return (\n      \n    );\n  }\n}\nexport default connect(select)(NavAnchor);\n``\n. I think neither? Using Anchor by itself but giving it apathinstead of anhref` will use react-router under the covers automatically.. If you could send a design that would be super helpful.\nWe used to have a link and the problem we had was that we would constantly be pestered with emails asking how to get access to the site, when just clicking create account would solve all their problems. We did a number of things to reduce those types of emails and one was to make the Create account link into a much more prominent button.\n. Just for my own scheduling, how long before you would be able to send me a basic design to work towards?\n. Just to clarify my earlier comment, moving Create Account up to a button successfully reduced our email requests by a lot.  Is it possible that a link could be the default and a button could be an option for create account?\n. Ok assuming that we change from a button to a link, how long do you think it would take to get a basic design I can work towards?\nRead on only if curious about why we made the decisions we did:\nOur page is definitely primarily a login page and a landing page secondly. Most of the people who are coming to our page are coming to login, especially since for security our sessions expire after 24 hours.  The problem was particularly for internal users who have different assumptions with how account creation/access works.  In most internal HPE websites and tools, you get your account access from someone in HPE or someone on your team NOT from signing up the normal way. Therefore, it seems to me, the instinct for internal users is to ignore normal create account links and instead to search for an email address, from the site or even from coworkers who are using our site as well, and email asking for access.  Since over half our users are internal, our create account button has very explicit instructions on how to get access to the site that does NOT involve sending an email to us. Since we literally have developers fielding all our support emails, it is really high priority to reduce the number of support emails we get and one of those actions was to make the create account link a big button.  Whether for this or for other unrelated reasons, the number of access requests we get is way way down.\nAll that to say, I am certainly not trying to argue with HPE's UX lead :innocent:.  I will try to convince my team to go back to a link and we will just keep a close eye on whether access requests jump up again.\nExtra extra design question if you are still reading this:\nDo sites ever have a landing page for new account people and then a completely separate logged out landing page based on a super long standing cookie that a user has EVER logged in from that browser?  This type of setup just occurred to me while I was writing all this and was wondering if that is an existing UX pattern to your knowledge.\n. I am now working on this again to convert create account button to a link.  Let me know if I should not work on it yet or at all.\n. Not quite done yet, but is this vaguely how you would want this to look?  Going off the old design you had linked to in Slack.\n\n. Changed the title to reflect changes. Alan thought it would be best if users just added a create account button outside the LoginForm rather than as part of the LoginForm itself.  Therefore, this change now just includes adding an onChange field which we is called anytime any field has changes.\n. I have done a squash commit to just a single clean onChange commit. This should be ready for review once your tests pass.\n. The one strange thing is that the markdown test was failing for me locally so I regenerated it.  Hopefully that isn't a problem.\n. The possibly obvious workaround of deleting the value from the series is a problem because the index is important when you are using a meter with a Legend where you care about the activeIndex.\n. Just to close on this since I had never replied, I was confused by the default max of 100 because in most cases for us we were much larger than that and the meter will adapt to having a number much larger than the max and will look fine in that case.\n. That is because my pull request already fixed it!  This can be closed.. Further background, this same fix should also be applied to https://github.com/grommet/grommet-addons/blob/master/src/js/components/AnnotatedMeter.js component but I didn't want to spend time coding up the AnnotatedMeter version yet just in case you had a bunch of feedback or wanted to move the change over yourself.. Hey @RyanCCollins! @mangoslicer was an intern on our team and is back at school now, but I can tell you the status in his stead.  Our team plans to no longer use Grommet for any charts so this story, while still probably a good change, will not be used by our team.. ",
    "ghost": "I will work on a pull request for this tonight.\n. Hello\nAre there any undocumented upgrades concerning the customising of grommet themes.\nI am using create-react-app and I try to avoid ejecting. It's may 2017. Still no chance....?. Thanks a lot for your time. I realised that it doesn't even worth the effort of ejecting and tweaking the webpack config if all you want is theme customising or using theme variables in your own css with Create-react-app. A good ol'SASS watcher is good enough.\nI still find the customising procedure a little clumsy, but overall Grommet is great. Many thanks for your time and effort to create and share such a great tool. The problem is still happening in both IE and Chrome.  I am working remotely today, but accessing the network.\n. I bow before the HOR (higher order reason) that prevents the Button component to have a simple disabled property,, but for everyone that isn't that enlightend in UX philosopy, the following wrapper might come in handy:\n```\nimport React from 'react'\nimport Button from 'grommet/components/Button'\nimport _ from 'underscore'\nexport default (props) => {\n    const newProps = props.disabled ? Object.assign({}, _.omit(props, 'onClick')) : props\n    return (\n        \n    )\n}\n```. https://github.com/grommet/grommet/issues/1558. yes, he is absolutely right. ",
    "batjko": "This should probably be changed in the Grommet docs then, so it doesn't explicitly point at the Link element as a use case anymore.\nBut is it not possible to just use the styling from the Anchor component, somehow?\nI am fairly new to React and React-Router and I'm not sure I want/need to create a separate component just for a link? \n. @ZephD  Yup, ends up reloading the whole page on the link, so we don't want to use the href property, but React's <Link> instead...\n@coltonw's suggestion worked for me as well. Ugly workaround, but works. ;)\n. ",
    "ZephD": "Tried import { Link } from 'react-router';\n<Anchor tag={Link} />?\n. ",
    "bjackson": "@ZephD, it works for me when I use your suggestion. However, that is not the correct property type for tag. It should be a string, and the browser complains accordingly. Should this be changed to allow other types, @alansouzati?. Right! I'll modify the PR.. Any update on this? I have the same issue, I had to resort to manually including the stylesheet, which needs alterations to include ~ before the inuit include.\n. I'm no CSS expert, but I'd be happy to help.\n@phuson are you already on the case?\n. Awesome! Thank you so much!\n. ",
    "benshell": "I'm just trying/learning Grommet and quickly ran into this issue as well, with React Router v4. It seems to me that the simplest solution is to create a new component to render Anchor as a span, inside of Link:\n```\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Anchor from 'grommet/components/Anchor';\nexport default (props) => (\n  \n{props.children}\n  \n);\n```\n. ",
    "Amurmurmur": "Cant understand, if I need to wrap Anchor with Link or Link with Anchor?\nCould you please provide a little bit more detailed example with react-router @alansouzati ?\nThank you very much in advance!. @coltonw Sorry just didnt have component connected with react-router-redux.\nMy mistake, everything works like a charm \ud83d\udc4d . ",
    "jvatic": "Here's a modified version of @alansouzati's example written in typescript:\n```typescript\n// NavAnchor.tsx\nimport * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Anchor from 'grommet/components/Anchor';\nexport interface Props extends Grommet.AnchorProps, RouteComponentProps<{}> {\n    path: string;\n    onClick?(e: React.MouseEvent): void;\n}\nclass NavAnchor extends React.Component {\n    constructor(props: Props) {\n        super(props);\n        this._onClick = this._onClick.bind(this);\n    }\npublic render() {\n    const {\n        path,\n        history,\n\n        // filter out remaining RouteComponentProps\n        match,\n        location,\n        staticContext,\n\n        ...anchorProps\n    } = this.props;\n    const href = history.createHref({ pathname: path });\n    return <Anchor {...anchorProps} href={href} onClick={this._onClick} />;\n}\n\nprivate _onClick(e: React.MouseEvent) {\n    if (this.props.onClick) {\n        this.props.onClick(e);\n    }\n    if (e.defaultPrevented) {\n        // allow this.props.onClick to cancel this action via e.preventDefault()\n        return;\n    }\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) {\n        // don't do anything if any modifier key is pressed\n        // it's likely the user is trying to open the link in a new tab or window\n        return;\n    }\n    const { path, history } = this.props;\n    e.preventDefault();\n    history.push(path);\n}\n\n}\nexport default withRouter(NavAnchor);\n```\nUsage:\ntypescript\n<NavAnchor path=\"/some/path\" onClick={(e: React.MouseEvent) => {\n    if (/* should prevent navigation */) {\n        e.preventDefault();\n        return;\n    }\n    console.log('about to navigate');\n)}}>My Resource</NavAnchor>\n(I'm using this typescript type definition for grommet.). ",
    "uyouthe": "@benshell this should be mentioned here.. so, if there is resize={false}, why not transform it to resize=\"false\" and have a resize=\"horizontal\" and resize=\"vertical? Maybe just pass it straight up to CSS, that's even simpler. And this is the point where I'm not sure whether we should be recreating the whole CSS as Grommet components' props.\nIt raises very important architectural question: where exactly should be the line between mapping the whole CSS into our props and not having CSS-related props at all, leaving user with style={{ ... }}. \nI started my project yesterday, the one I've chosen Grommet for. I weren't able to understand Grommet's grid and box alignment properties, so I just rejected them and just wrote style. It worked like a charm.\nSo, where's the line exactly? How do we define whether we need a CSS property to be mapped as a Grommet component prop or not?. @oorestisime I'd rather go with RoutedAnchor I guess. @ericsoderberghp and what if I want to build my own form with TextInputs?. @alansouzati checked again just now \u2013 it doesn't work on iOS Safari. Should I open another issue especially for that?. iPhone SE, iOS 12.1. I press the button but nothing shows up. nvm it's just showing up below the viewport. But I still can't see it, the page doesn't scroll down there, I literally should push it below the edge to see it. But maybe that's a storybook issue\n\n. ",
    "michaelgilley": "Reproducible when you have an SVG icon inside a button that opens the layer. Clicking on the button works but when clicking on the SVG icon an error is thrown.\n. See same fix/issue for #614 \n. Duplicate of #598 \n. See a fiddle of this issue here: https://jsfiddle.net/kevinsbennett/LXwF8/1/\n. You're very welcome!\nDo you think this issue/fix will need to be applied to other typographic components as well? Like Header?\n. @alansouzati  @bryanjacquot Oops! I think I deleted this before it got merged in!\n. ref #634 \n. @marlonpp @alansouzati On first read (and admittedly w/o running the tests) they look good. Great use of enzyme with sinon! You should be able to get 100% coverage easily using these tools.\nOn a side note, I'm not a huge fan of nesting pass/fail calls within if/else statements: why not just use test assertion methods for easier reading? But this might be slightly out of scope here.\n. Yeah, by setting it to something < the min-height it allows min-height to override it. If it's >= then the header will not be dynamic for longer text.\nAlso, -1 because I think that IE11 calculates the center based on the set height so we'd want that to be as close to actual center as possible. (I could be mistaken about this though!)\nIt does see hackish but.... If you have any other suggestion for the work-around I'm all ears!\n. Because full={false} would always set the Box to 'horizontal'. We want false to be passed on to Box and 'horizontal' to only be set if the full prop is absent.\n. This will need to be cleaned up :wink:\n. Instead of using Mount to call componentDidMount you should be able to get away with just using shallow and calling the method explicitly. Ideally you'll be wanting to test the side effects of this method anyhow rather than if the method was ever called or not. The latter case is more within the unit testing scope of React. Doing either will give you the coverage.\n. ",
    "agraebe": "\ud83d\udc4d \n. ",
    "christinHP": "@DerekAhn \nHi Derek,\nI disagree you close 611 and 612, the grommet issue is still there and you haven\u2019t fix it.\nPlease see the attached file, the attribute compact={false} doesn\u2019t work. The LayerForm provide onSubmit and secondaryControl, then these two buttons layout should be work well with compact={false}.\n\n. @DerekAhn The certificate LayerForm compact={false} works well in chrome and firefox, but it doesn\u2019t work in IE 11. So the grommet LayerForm has browser compatibility problem.\n. Hi Derek,\nI disagree you close 611 and 612, the grommet issue is still there and you haven\u2019t fix it.\nPlease see the attached file, the attribute compact={false} doesn\u2019t work. The LayerForm provide onSubmit and secondaryControl, then these two buttons layout should be work well with compact={false}.\n\n. @DerekAhn \n. @DerekAhn The certificate LayerForm compact={false} works well in chrome and firefox, but it doesn\u2019t work in IE 11. So the grommet LayerForm has browser compatibility problem.\n. Chrome and firefox has no such issue.\n. @epilande Manny, you are very familiar with ovgd code, do you have some suggestion for the render to fix this issue?\n. @epilande I also can't reproduce it in ovgd.\n. @epilande  I can't reproduce it.\n. @epilande Manny, I have sent a mail to you manny.pilande@hpe.com\nYou can use the environment in this mail to reproduce the issue\n. @epilande  yes, it's fixed.\n. @epilande @alansouzati @bryanjacquot  Thank you very much.\n. Javascript use IEEE754 to calculate float and int number. Sometimes it\u2019s hard to use binary to express a float number very exactly. \nFor example, input below expression in browser console:\n0.1+(0.2+0.3);  // 0.6\n(0.1+0.2)+0.3;  // 0.6000000000000001\n4.54+5.03;  // 9.57\n4.47 + 5.09;  // 9.559999999999999\nMy solution to fix make the Meter support float number.\nChange grommet/src/js/components/Meter.js\nFrom:\nvalue: function _seriesTotal(series) {\n  var total = 0;\n  series.some(function (item) {\n    total += item.value;\n  });\n  return total;\n}\nTo:\nvalue: function _seriesTotal(series) {\n  var values = [];\n  series.forEach(function(item) {\n    var r1;\n    try{\n      r1 = item.value.toString().split(\".\")[1].length\n    } catch(e) {\n      r1=0\n    }\n    values.push(r1);\n  });\nvar m = Math.pow(10, Math.max.apply(null, values));\n  var sum = 0;\nseries.forEach(function(item) {\n    sum += item.value * m;\n  });\n  return sum = sum / m;\n}\n. ",
    "do-n-khanh": "I am using the stable version of grommet. \n\"dependencies\": {\n    \"grommet\": \"https://github.com/grommet/grommet/tarball/stable\",\n    \"react\": \"^15.0.2\",\n    \"react-dom\": \"^15.0.2\"\n  },\nI still get the problem on all of my browsers (Chrome, IE, Firefox).\nCan anybody help?\n\n. @alansouzati I put my project on https://github.com/do-n-khanh/grommetTodoApp \nCould you please have a look? I follow tutorial on https://vimeo.com/154880318\n. ",
    "prewalia": "Hey guys sorry about the confusion :) here are all the files:\nPDF showing transition from the current Video Marquee space (where we would be playing the looping video) to the video player once you click on \"Watch Now\". As you can see once you click on \"Watch Now\" the content below gets pushed further down to accommodate 16:9 format of the actual video:\nVideoMarquee_To_Player_Transition.pdf\nThe final sketch file (So this can simply be inserted in the current video marquee space playing inline(vs layer). Added the close X and resized play/pause icons to core grommet 24px, and added our replay/share screen. The video will play inline on page by replacing the video marquee initial state. Height will grow from marquee height, 75% or whatever it is now, to accommodate 16:9 format of the actual video): \nhpe-video-component-r2-kl.sketch.zip\nThe PDF file for the same:\nhpe-video-component-r2-kl.pdf\n. Hey Son, here is the break down of components for you! :) Please let me know if you need me to add any other information and feel free to ask any questions!\nVideoMarquee_InformativeDescription.pdf\n. ",
    "kyle-locke": "FYI, I removed 'option 1' from the sketch file.\nhpe-video-component-r2-kl.sketch.zip\n. added hover states for the control icons.\nhpe-video-component-r2-kl.sketch 2.zip\n. ",
    "Stalso": "Thank you.  I have managed to set up grommet in this template by myself.  But I need to include prebuild grommet. min. css.  It makes grommet more difficult to customize in project,  which is based on css modules.  Grommet is really cool,  but you should make usage of it ( when people use it like existing library) similar to this  library. And I am very sorry,  that I have forgotten about the issue and have not closed it yet.  You may close the issue \n. Select is huge.  Also text input with label is very big.  Accordion.  In fact almost all controls of grommet  are  big.  But framework  is still the best. . @Waize you said, that I can  add at every single Component a size attribute. But how can I do it? If I write <GrommetButton label=\"Add\" size=\"small\" /> nothing happens. Do you mean, that I have to redefine grommet components and add size attribute? . ",
    "slara": "@harshithjv try to run something like python -m SimpleHTTPServer in your dist directory. I'm having the same problem with apache2 and a react-router app inside a directory different than the root directory.\n. @harshithjv What I'm trying to say is that with react-router you may need to specify a basename for your application to work. That way you can deploy your application in paths outside your 'root' path. If you are opening your index.html directly, I think you will have your filesystem directory as basename.\nThis is how I configured my app to work in http://example.com/dataentry using react-router and redux.\n``` JavaScript\nimport { createHistory } from 'history';\nimport { useRouterHistory } from 'react-router';\nimport { routerMiddleware } from 'react-router-redux';\nconst browserHistory = useRouterHistory(createHistory)({\n  basename: '/dataentry'\n});\nconst middleware = routerMiddleware(browserHistory);\nlet store = createStore(\n  appReducers,\n  persistedState,\n  applyMiddleware(middleware)\n);\nconst history = syncHistoryWithStore(browserHistory, store);\n```\n. ",
    "chandrakantnitt": "Alternatively you can use http-server\nFirst install http-server by following command\n npm install http-server -g\nThen navigate to your project directory\n cd dist/\nlater run below command \n http-server -p 9999\nThen type following to access your app\n http://localhost:9999\n. @alansouzati - is the issue I raised and this one same https://github.com/grommet/grommet/issues/789 ? It looks same to me.\n. @alansouzati \n. @alansouzati \n. ",
    "kevinworth": "I don't know the syntax of gulpfile.js (I'm an OpenSwitch developer trying to troubleshoot why my docs' line breaks don't render correctly) but intuitively it would appear that the grommet markdown loader is in the list of things that it looks like get loaded for .md files\nhttp://git.openswitch.net/cgit/infra/website/tree/gulpfile.js#n47\nmodule: {\n  loaders: [\n    {\n      test: /\\.md$/,\n      loader: 'babel!imports?React=react!html-jsx-loader!grommet-markdown'\n    }\n  ]\n}\n. I'd be happy to, but grommet/grommet-markdown-loader project doesn't seem to have issue tracking enabled\n. Transferred to https://github.com/grommet/grommet-markdown-loader/issues/1\n. ",
    "grantnorwood": "For those having trouble with the current release, you can install grommet from the master branch using sudo npm i -g https://github.com/grommet/grommet/tarball/master and it works great.\n@alansouzati Thanks for such a quick fix!\n. Perfect,that took care of the issue!  I'm using sass-loader ^3.1.2 and npm 3.9.5.  Below is a snippet of my webpack config file, in case it helps anyone else.\njs\nmodule: {\n  loaders: [\n    { test: /\\.scss$/, loader: 'style!css?modules&importLoaders=2&sourceMap&localIdentName=[local]___[hash:base64:5]!autoprefixer?browsers=last 2 version!sass?outputStyle=expanded&sourceMap' }\n  ]\n},\nsassLoader: {\n  includePaths: [\n    path.resolve('./node_modules/grommet/node_modules')\n  ]\n}\nThank you for such a quick response!\n. ",
    "dbuarque": "I would suggest this approach for dumb components. Microcomponentization!\nhttps://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.7x3hrjoki\n. Make sense\n. ",
    "mrrfox": "Hello,\nSucceeded in adding grommet scss with minor modifications in imports (using fourseven:scss)\n1. change all instances of import paths pointing to \"inuit-*\" in node_modules/grommet/scss/grommet-core/..\nspecifically in index.scss, _settings.scss, _base.scss, _objects.scss\n   eg @import \"inuit-normalize/generic.normalize\";\n   becomes \n   @import \"{}/node_modules/inuit-normalize/generic.normalize\";\n2. add grommet to your main scss, eg : \n   @import '{}/node_modules/grommet/scss/grommet-core/index.scss';\n3.use in jsx with prefix\nimport Grommet from 'grommet';\n...\n<Grommet.App inline={true}>\n    <Grommet.Header>\n        <Grommet.Title>\n            My App\n        </Grommet.Title>\n    </Grommet.Header>\n</Grommet.App>\nhope this helps\n. ",
    "adrianmcli": "@mrrfox Is there no way to get it working without editing files inside node_modules/grommet? This feels more like a hack than it should be. I think there needs to be a lot more work to get Grommet ready for everyone, because at this point I have spent hours just trying to understand how to get it setup.\nThe official docs only show you how to use Bower or the Grommet tool itself to create a new project, but nothing about the stuff we need to require/import to get it working and how to do so.\n. @alansouzati Sure, but for what exactly?\n. Good point. Perhaps that should be documented too, because it's not immediately clear what the App container does or does not do in terms of affecting other components within it.\n. ",
    "HaveF": "@alansouzati Can u tell me what is the options.base stands for, and where is come from? does it come from some gulp files? thanks!\njs\n   {\n        test: /\\.scss$/,\n        loader: 'style!css!sass?outputStyle=expanded&' +\n          'includePaths[]=' +\n          (encodeURIComponent(\n            path.resolve(options.base || process.cwd(), './node_modules')\n          )) +\n          '&includePaths[]=' +\n          (encodeURIComponent(\n            path.resolve(options.base || process.cwd(),\n            './node_modules/grommet/node_modules'))\n          )\n      },\n. @alansouzati thanks for your detailed explanation. :+1:\n. ",
    "vinaypuppal": "@mrrfox I followed your instructions and resolved scss errors but i am getting this error in chrome console, nothing is showing up on browser screen and no errors on Terminal. I am running Meteor 1.4\nUncaught Error: Cannot find module 'babel-runtime/helpers/defineProperty'require @ install.js:85\nIf i remove this statement import Grommet from 'grommet'; then no error. Any help on how to use grommet with Meteor 1.4\n. @alansouzati thanks after installing babel-runtime error is gone but got this warning\nmodules.js?hash=71c1ee8\u2026:21461 Warning: Invalid argument supplied to oneOf, expected an instance of array.\nCan I ignore this warning or will it cause any issues?\n. ",
    "PranayShah": "What would be the current best way to use Grommet in a Meteor application (as of v1.4+)?. ",
    "rardoz": "I was able to fix this by moving over the stuff in grommet's index.scss to my own sass file to get it working with webpacks sass-loader and sass-resources-loader. This is what my grommet.sass file looks like. The problem was sass-loader requires ~ in front of node_module imports. Grommet doesn't have that type of setup.\n```\n@import \"~grommet/scss/grommet-core/settings\"\n// Generic\n@import \"~inuit-normalize/generic.normalize\"\n@import \"~inuit-reset/generic.reset\"\n@import \"~inuit-shared/generic.shared\"\n// Base\n@import \"~grommet/scss/grommet-core/base\"\n// Objects\n@import \"~grommet/scss/grommet-core/objects\"\n```. ",
    "JJB1980": "Having the same issue adding grommet to my project from scratch, webpack is unable to locate inuit files as they don't have ~ prepended.  fixed by going into grommet and modifying the imports, no other suggestions have worked.  this obviously isn't an acceptable resolution.. ",
    "masogit": "Fix spaces issue\n. ",
    "KeKs0r": "I was wrapping my whole application in <Grommet.App> do I only need to wrap the Grommet Components?\n. So this is my component I am testing with:\njavascript\n        <App inline={true}>\n          <Meter value={40} type=\"arc\" size=\"small\" a11yTitleId=\"meter-title-21\" a11yDescId=\"meter-desc-21\" />\n        </App>\nI can see that some styles from grommet are applied:\n\nBut I think there is still something missing, since the rendered components look like this:\n\nI am importing the Styles in my main.scss\n@import '~grommet/scss/hpe/index';\n. I am using the sass loader and the configuration from the https://github.com/davezuko/react-redux-starter-kit\nAnd my config for scss loading is based on the default with this little adaption: davezuko/react-redux-starter-kit#857\n. ",
    "Beelal": "Import of minified css apply the structure styles like padding/margin but colors are not applied to the component.\nFor e.g. colorIndex doesn't work. \n<Section colorIndex=\"brand\"></Section>\nI am using:\nimport 'grommet/grommet-hpe.min.css';\n. I pressed CMD and - together to zoom out for few times. \nSent from my iPhone\n\nOn Jul 13, 2016, at 3:18 PM, Bryan Jacquot notifications@github.com wrote:\n@Beelal: can you provide more information on what steps you took to reproduce this and the expected behavior?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "jeanaica": "Hi! I've had this same issue... tried grommet css and it worked... `https://github.com/mvanlonden/grommet-css. ",
    "dankurth": "Is this issue the one that includes work on adding a Y-axis?\n. ",
    "activescott": "No worries @alansouzati! Thanks for the prompt response. \n. ",
    "heyjared": "That file is already present in my project. Using grommet@0.6.6 I ran grommet init sample-app and without changing any files, I get the error above. I'm using node v6.2.2, npm 3.9.5 on OS X 10.11.5. I'm using a local copy of eslint (not installed globally). I'm running Visual Studio Code 1.2.1 using the ESLint extension. \n. I was able to run gulp dist without any issues. \nI've found that adding .eslintrc.json to the root directory solves the problem.\nAdding the same rules into customEslintrc.json does not seem to have any effect.\n. Well, thanks for helping me through this regardless. I'm not sure why it doesn't work by default, but having the .eslintrc.json there works.\n. I actually want to execute something onEnter, without selecting any of the suggestions, but I still want to save the user input value. What would be the best way to capture that input? onDOMChange does not seem to get fired when Enter is pressed.\n. ",
    "davrodpin": "@alansouzati, done.\n. > I just had a chance to test this PR, and it looks great. it has only one minor fix needed before I go ahead and approve it. thanks for your contribution.\nHi @alansouzati, I believe I have fixed the minor issues you have pointed on your previous comments. Could you please take a look again? Thank you!\n. @alansouzati, PTAL\n. > I would definitely be ok with that being resolved in another PR. my only concern is the backward compatibility, but I guess it is ok since the the default task for new would make sense to be the empty project itself.\nOw, I see your point, but I don't think there will break on the backward compatibility:\nCommand to create a new empty app:\n$ grommet new my-sample-app \"Sample App\"\nAfter add support for templates, we would add an optional argument like this:\ngrommet new my-sample-app -t empty \"Sample App\"\nNote that -t is optional and without specifying it, the grommet command line tool would use the empty template as default.\n. > I believe this should be img/mobile-app-icon.png. When we install grommet, there is no src anymore.\nAfter run grommet init, all source files should go the target src directory (e.g. app-name/src/), so the index.html located under app-name/src/index.html can reach them. Isn't that right?\n$ tree app-name/\napp-name/\n\u251c\u2500\u2500 customEslintrc.json\n\u251c\u2500\u2500 grommet-toolbox.config.js\n\u251c\u2500\u2500 gulpfile.babel.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 img\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 mobile-app-icon.png\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 shortcut-icon.png\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 js\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 TodoAppDashboard.js\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.js\n    \u2514\u2500\u2500 scss\n        \u2514\u2500\u2500 index.scss\n. > how you deal with spaces in the description ?\nIf the user wants to input a description that contains white spaces, he should surround the description with quotes, since the description is a command line option, \n. > I have a use case that is coming up soon that is to generate a new project to be published in github (static site).\n\nI think we could deprecate init and add one more attribute to new so that we could do:\ngrommet new empty sample-app \"Some description\"\ngrommet new full sample-app \"Some description\"\ngrommet new static sample-app \"Some description\"\n\nAre empty, full and static some sort of template? If yes, I think it should be designed as an optional argument, as follows:\n$ grommet new [-t <template-name>] <app-name> [<description>]\nIn any case, don't you think this new change should be part of another pull request?\n. ",
    "Adam-Burke": "I get the following error when following the documentation at the top and wrapping my current app in the grommet App component.\ninvariant.js:38 Uncaught Invariant Violation: addComponentAsRefTo(...) \nwhich I have read is normally caused by duplicate loadings of react on the client side. Can someone assist me in solving this error. I'm very new to react so I imagine it could be something simple.\n. ",
    "digital-flowers": "i have managed to successfully run grommet as a library with webpack for development and production also register grommet components as web components using reactive elements library where you can use grommet directly inside the html or template engine such as ejs or jade this will improve SEO and make the application easier to maintain, soon i will write full documentation on how to do that \n. ",
    "sahil28v": "Got it, thanks.\nBtw... great work with the framework.I just started exploring it & so far I'm liking it a lot.\nAmong other solely react-based component frameworks I've used, this is really looking like a great option.(kudos to the team) --- Hope there is a plan to add more cool components & features like autosuggest.\n. If you are referencing the \"get started project\"-- replace this line \"import '../scss/index.scss' \" in src/js/index.js with path to your scss.\nI'm using webpack+express+redux : So I'm using importing this in my outermost App component:   import 'grommet/grommet-hpinc.min.css' to import 'path-to-my-sass'.\n. Sorry I jumped there , simply that won't work - since index.scss further imports:@import 'vanilla.defaults';  @import  '../grommet-core/index'; @import 'objects.button-vanilla';   \nImport both in your outermost component--- \nimport 'grommet/grommet.min.css'\nimport '../../styles/custom.css';       // Override the class properties in this custom file \nEx: Change neutral-1 color --> \n.grommetux-background-color-index-neutral-1{\n    background: #16A765;\n}\nAlso to check the classNames refer to the file -- grommet/utils/CSSClassnames.js\nI'll check into this later & update you incase I find the better solution.\n. ",
    "sebasalvarado": "I would do +1 for autocomplete component! Also loving the framework.. Having the same issue here, I installed using npm and I can't get rid of it. How can I fix this?. ",
    "melodymorgan": "Heads up... v2.grommet.io has mutliple WCAG 2.0 (A) and WCAG 2.0 (AA) Violations when inspected with axe-core.. ",
    "lelostsamurai": "https://github.com/grommet/grommet/commit/f110aa244ce16f806ac2d01732aa6dcecaf8fca7 reintroduces the issue, so window is still scrolling to the top\n. @tracybarmore, try this - https://codepen.io/anon/pen/JEGPbM\n. ",
    "huiwang-hpe": "This can be easily reproduced on Ferret demo:\n1. Open: http://ferret.grommet.io/activity with Firefox\n2. Use mouse to drag the vertical scroll bar to the end\n. Hi @epilande , thanks for the information. \nI've tried on master branch and found that \"adding 10px offset\" works for the \"loading more\" feature.\nHowever, two scroll bars appear after pointing to master branch and it used to be only one.\nThis is another issue which I need to fix if I upgrade grommet to the next release.\n\n. Thanks Alan for the feedback.\nExactly as you said, grommet-index has too many abstractions. \nUnfortunately, our project was created from the template of \"Ferret\" which uses grommet-index.\nFor example, this is how we are getting the row count in the page object:\nget itemsCount() {\nlet items = browser.elements('.index__items > .grommetux-list.grommetux-list--selectable.index-list > li').value;\nreturn items ? items.length : 0;\n}\nThe selector seems to be totally depends on what grommet-index rendered.\nI am not quite confident on whether it will still work when I upgrade grommet-index.. ",
    "mars76": "Thanks so much primozs.\nThis loader setting is working as expected.\n. It looks like the gstatic fonts are coming with the response header \ncache-control:max-age=0\nhttps://fonts.gstatic.com/s/sourcesanspro/v9/toadOcfmlt9b38dHJxOBGLlcMrNrsnL9dgADnXgYJjs.ttf\nhttps://fonts.gstatic.com/s/sourcesanspro/v9/ODelI1aHBYDBqgeIAH2zlEY6Fu39Tt9XkmtSosaMoEA.ttf\nhttps://fonts.gstatic.com/s/sourcesanspro/v9/toadOcfmlt9b38dHJxOBGPS42wKzre0cxmO5m5GyTsY.ttf\nAnd that's the reason why IE 11 is showing a blank page.\nFor the time being the following resolved the Issue:\nTools > Compatibility View settings > Uncheck the option \"Display intranet sites in Compatibility View\"\nThanks\n. ",
    "acornejo": "I was about to file a bug, but I realize its a duplicate of this one. Here is a video showing the behavior:\nhttps://youtu.be/xGikvv42y50\nNeither of the suggested scss fixes worked for me. The scroll to top solution is also less than ideal. Imagine a user is scrolling through a long list of items, clicking one of them causes a dialog/layer to come up. In that scenario fiddling with the scrolling state is not what you want to do.\nAny other suggestions?\n. ",
    "laukaichung": "Thanks for your suggestion. I'm not referencing the get started project though. But I take it that in order to apply a custom theme, I need to create a new copy of ./node_modules/grommet/scss/hpe/index.scss as /custom_path/index.scss, change the path of @import 'hpe.defaults';  to my custom hpe.defaults, then imported  /custom_path/index.scss in my outermost app component, am I right? I will test it later.\n. ",
    "svnlto": "Are you going to ship v1.0.0 without documenting how to create custom themes?\n. Ok, what's the best way of assigning a handler function dynamically..?\n. Makes sense. I obviously wasn't thinking that far. Thanks.\n. this should be set, based on props (a boolean), not based on the existance of a handler function. \nConsider the login form for example, I'd like to be able to set a button to disabled while the form is invalid. \nThe above would force me to dynamically add/remove a handler function to achieve this.\n. ",
    "jaitaiwan": "In a search to create rapid applications, we came across grommet and we've been attempting to build a custom bootstrap just to give it a go.\nWe've found that styling in grommet is a bit cumbersome so far, but it's the only WCAG, enterprise-level react framework we've been able to find.\nWhat I'd like to do is implement a similar styling system to the way react-toolbox works. This means enabling css-modules and allowing component's classnames to be overwritten by either a theme prop or theme context keyed to a namespace depending on the component.\nIs this something that would be of interest to the entire project or something that grommet would prefer kept in user-land?. Thanks @alansouzati I did read that. I think you were super close to a solution. We'll fork grommet then and get to work on this and see how easy/hard it is. I think luckily enough it seems that grommet's sass is componentised enough for this to be a pretty easy transition.. I understand. The css modules class simply converts class names to ids, so if you define the same class a couple of times, even in a media query it is given the same id and the media query will work only on that class.\n```scss\n.#{$grommet-namespace}form { // Class becomes .someid\n  // Some styles\n}\n.#{$grommet-namespace}sidebar-form {\n  // Some other styles\n}\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n    .#{$grommet-namespace}form { // Class becomes the same .someid\n      max-width: 100vw;\n    }\n.#{$grommet-namespace}sidebar-form {\n  max-width: 100%;\n}\n\n}\n}\n```\nThe only issue here is targeting the .sidebar .form class couldn't happen because of the unique ids. What I'd suggest then is just documenting that when putting a form in a sidebar, use the .sidebar-form class.\nThat would pretty much solve the issue from my perspective.. I think the styling documentation would end up telling people what namespace in the theme context a component would use. So you could tell them that they can override the styles by providing an alternative class name. At the same time you'd then make a note for the form to say if it's inside a layer which itself is inside the sidebar, then use x code to fix a known bug in IE.\nReact Toolbox's documentation explains for each component what key on context can be used to override stylings:\n\n[For the AutoComplete component] If you want to provide a theme via context, the component key is RTAutocomplete\n\nI think this could work well in Grommet, although I think we'd need to make more effort to explain exactly how styling with context works.\nI don't think this is insurmountable and in fact I feel its a little more explicit and idiomatic to do it that way. What do you reckon?. Just took a look through waffle.io. I think that #732 could be closed and future conversation continued here as its fairly all-encompassing. I also believe that #1054 partially blocks the completion of this and #732 as it prevents theme context being provided nicely down the node chain.. I spent a bit of time investigating this. Here's a JS Fiddle showing the funsies of react contexts: https://jsfiddle.net/69z2wepo/63782/\nWhat this effectively shows is that as long as a single root object provides context using the getChildContext function and specifying childContextTypes a theoretically infinite number of children would now have access to anything in context defined by that parent component.\nBecause grommet components redefine the getChildContext at every level and don't make allowances for extra context that may have been supplied by a parent component up the chain, any extra contexts are removed.\nThis one is a pretty easy fix where all that needs to be done is for grommet components to specify what context they might need (aka intl) and let a parent component pass down context. This means almost all grommet components can remove the getChildContext and childContextTypes definitions. . @kadinwu I'll hopefully be fixing it when I do a pull request to make styling more modular. It just depends on whether or not I can get my head around how grommet's css is built.. Hey @kadinwu at the moment the work is going on behind a local branch I have of grommet.. I haven't had the time to continue with my work on the project and Grommet has made several iterations since I first embarked on this. I'll have to take another go at it but I'm not sure when I'll be able to.. @sandeepnamburu its possible to be done but something probably best handled by a custom component like so: https://codepen.io/wallaceerick/pen/fEdrz\n. @mcwagner10 Your issue is a result of html. By setting href=\"#\" when you click the the link you're telling the browser to look for the anchor whose name is empty <a name=\"\"></a> as a result of not finding the anchor it takes you to the top of the page. This is expected behaviour.\nA simple fix is to add an onClick handler which calls e.preventDefault(). You can see alternative solutions in this stack overflow.\nIf that fixes your issue please remember to close this thread.\n@azmtbr Your issue is likely going to be something different. I'd suggest opening a separate ticket for yours and do your best to provide as much information as you can to help in a reproduction.\nThanks!. Gah. Thanks @mcwagner10. Completely misread it.. So after completely failing to read and correctly understand the problem I spent some time trying to root out the cause of the issue as penance. Definitely a fairly bizarre issue (to me at least). I think I've pinpointed it down somewhat to this line: https://github.com/grommet/grommet/blob/master/src/js/utils/Drop.js#L37\nAnd the order in which the drop is rendered vs the anchor being scrolled to.... @alansouzati I've created the Pull request as above.. @okada when you say \"The component underneath\" are you meaning the Menu's children or one of the components the menu wraps?. ",
    "nomadus": "I would like to create a custom theme based on the existing Grommet themes, but I could only find the minified versions of the css files, how could I find the original versions?. If the above did not fix, add the following to fix issue\nloaders: [\n            { test: /.json$/, loader: \"json-loader\" }\n        ]. I got it wrong, instead of routing I am going to use tabs.. I am looking forward to see this feature in the nearest release of grommet. Our projects heavily depend on availability of file upload feature, if you could prioritize the resolution of the issue it would be great!. @RyanCCollins  I could not have it working, I have created a new project using create-react-app and added grommet from this branch.\nnpm install git://github.com/grommet/grommet.git#feat_rc_dropzone --save\nWhen I issued yarn start, it errors with \nModule not found: Can't resolve 'grommet/components/Article' in 'C:\\src\\no-main-file\\src'\nThe same works when I install npm install grommet@1.4.0 --save,\nWhat could be an issue and how could I test these changes?. Any news on this one?. Hi, is this only for a source code? Could we ask for more generalized solution, like a rich text editor which is capable to edit source code as well?. @RyanCCollins, Hi, thanks for the pointers. What would be a good starting point for this project? Should this be based on an existing tool, such as draft-js? Or would this be a completely new component?. Thanks Ryan, that was quick!:) I surely look at it and send my feedbacks. Hi,\nIndeed this came out when I tried to add a tag cloud feature into the page. As of now to see the selected options \n1) one has to click the down arrow and the selected items are highlighted in different color \n2) or when using inline=true option, all the items are shown below with check boxes.\nFrom visualization point of view, #1 is not acceptable for me as when it comes long lists, the user has to scroll all the way down to see that a particular item is selected or not.\nThe second one is better, as it visually more appealing, but when it comes to long lists it clutters the page and this single component could take a substantial amount of the page.\nThe enhancement allows to make the pages more compact and more visually appealing as it shows the selected items only, hiding the remaining items. In case the a person is selected a big number of items, this could be considered as an exceptional case. Usually only a few items are selected.\n. This is another critical feature which affects our projects. Currently, we have a big list of lookup items and showing them on page (inline=true) will take all the page, which is not good from UX point of view. But in case of inline=false, this also does not give better UX experience as user has to lookup to see which options are selected.\nCould you please prioritize this issue as well? Thanks in advance!. +1, when you have many select items and you set inline=true, the options may take a substantial amount of the page, will any of these changes address this issue?. This is exactly what I was looking for, could I access to the source code, so I could test in my env?. @adamroldfield How could I include this changes to the grommet? Would it be just a simple replace of Select.js file?. Good that you raised this issue, I also would like to validate the approach I have taken. \nThere is a section in the Readme of CRA which talks about using css preprocessors, https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-css-preprocessor-sass-less-etc\nWhat I did is created a custom scss file see as an example https://github.com/zooniverse/zoo-grommet/tree/master/src and run npm run build-css which produced a css file. \nIt works OK so far, would this approach valid from the grommet point of view?. I wonder, why menu component is not being used in tabs. This could solve this issue. Any thoughts why we can't use menu component?. I checked, Menu component has a direction property, which could be a row or column.  I also check how it is done here, they seem to be using a menu component. https://github.com/Semantic-Org/Semantic-UI-React/blob/master/src/modules/Tab/Tab.js. For only vertical case, would this be a valid code?\n```\n// (C) Copyright 2014-2016 Hewlett Packard Enterprise Development LP\nimport React, { Component } from 'react';\nimport CSSClassnames from 'grommet/utils/CSSClassnames';\nimport Intl from 'grommet/utils/Intl';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Menu from 'grommet/components/Menu';\nimport Anchor from 'grommet/components/Anchor';\nimport Box from 'grommet/components/Box';\nconst CLASS_ROOT = CSSClassnames.TABS;\nexport default class Tabs extends Component {\nconstructor(props, context) {\n    super(props, context);\n\n    this._activateTab = this._activateTab.bind(this);\n\n    this.state = {\n        activeIndex: props.activeIndex || 0,\n        justify: props.justify\n    };\n}\n\ncomponentWillReceiveProps(nextProps) {\n    if ((nextProps.activeIndex || 0 === nextProps.activeIndex) &&\n        this.state.activeIndex !== nextProps.activeIndex) {\n        this.setState({ activeIndex: nextProps.activeIndex });\n    }\n}\n\n_activateTab(index) {\n    if (!this.props.hasOwnProperty('activeIndex')) {\n        this.setState({ activeIndex: index });\n    }\n    if (this.props.onActive) {\n        this.props.onActive(index);\n    }\n}\n\nrender() {\n    const { children, className, justify, responsive, ...props } = this.props;\n    delete props.activeIndex;\n    delete props.onActive;\n    const { activeIndex } = this.state;\n    const { intl } = this.context;\n    const classes = classnames(\n        CLASS_ROOT,\n        {\n            [`${CLASS_ROOT}--justify-${justify}`]: justify,\n            [`${CLASS_ROOT}--responsive`]: responsive\n        },\n        className\n    );\n\n    let activeContainer;\n    let activeTitle;\n    const tabs = React.Children.map(children, (tab, index) => {\n        if (!tab) return null;\n\n        const tabProps = tab.props || tab._store.props || {};\n\n        const isTabActive = index === activeIndex;\n\n        if (isTabActive) {\n            activeContainer = tabProps.children;\n            activeTitle = tabProps.title;\n        }\n\n        return React.cloneElement(tab, {\n            active: isTabActive,\n            id: `tab-${index}`,\n            onRequestForActive: () => {\n                this._activateTab(index);\n            }\n        });\n    }, this);\n\n    const links = React.Children.map(children, (tab, index) => {\n        if (!tab) return null;\n\n        const tabProps = tab.props || tab._store.props || {};\n\n        const isTabActive = index === activeIndex;\n\n        return (\n            <Anchor\n                href='#'\n                className={isTabActive ? 'active' : ''}\n                onClick={() => this.setState({ activeIndex: index })}>\n                {tabProps.title}\n            </Anchor>\n        )\n    });\n\n    const tabContentTitle = Intl.getMessage(intl, 'Tab Contents', {\n        activeTitle: activeTitle\n    });\n\n    return (\n        <Box\n            direction='row'>\n            <Box\n                basis='small'>\n                <Menu\n                    primary={true}\n                    pad={{ vertical: 'medium' }}\n                    align='center'\n                    justify='center'\n                >\n                    {links}\n                </Menu>\n            </Box>\n            <Box\n                basis='full'>\n                <div aria-label={tabContentTitle} role='tabpanel'>\n                    {activeContainer}\n                </div>\n            </Box>\n        </Box>\n    );\n}\n\n}\nTabs.propTypes = {\n    activeIndex: PropTypes.number,\n    justify: PropTypes.oneOf(['start', 'center', 'end']),\n    responsive: PropTypes.bool,\n    onActive: PropTypes.func\n};\nTabs.contextTypes = {\n    intl: PropTypes.object\n};\nTabs.defaultProps = {\n    justify: 'center',\n    responsive: true\n};\n```. It happens with G1, not sure if this is a reproducible, I have to check. Hi, I did not use pad property, shouldn't it be enabled by default?\nThe example is here https://codesandbox.io/s/l2j98kk467 . Here is code. When it is CheckBox is in FormField, there is no pad, but when it is used with version #2, it is Ok\n```\n\n\n\n\n<FormField\n  name=\"subscribe\"\n  component={CheckBox}\n  pad\n  label=\"Subscribe?\"\n/>\n\n\n```. Agree, this happens to Select component as well. I am migrating V1 project to V2, re-writing as you suggest will take extra work.. I agree, per documentation, it is not a bug. But shouldn't these two options be equivalent? Meaning, I should be able to use pad in my case as well?. ",
    "snaemi": "It looks like some of the colors in grommet-core/_settings.color.scss do not have the !default flag, preventing me from overriding (like $colored-text-color, $active-colored-text-color). I've applied the changes to my environment, but am curious as to whether there is any specific reason the flag is missing or if there are plans to update those in the future? . ",
    "maxs15": "@alansouzati you should try https://github.com/styled-components/styled-components. ",
    "Serexx": "Referencing this thread I'm attempting to create a custom Theme for Grommet and am encountering an error I am unable to resolve:\n\n File to import not found or unreadable: inuit-defaults/settings.defaults\n\n // this file doesn't exist!\n Parent style sheet: C:/Data/Websites/Devel/Website/theme/grommet-core/_settings.scss\n\n in C:\\Data\\Websites\\Devel\\Website\\theme\\grommet-core_settings.scss (line 4, column1)\n\n\nI can see what the issue is, but I'm not sure how to resolve it, whether its possible with the structure I am using.   The file\nC:/Data/Websites/Devel/Website/theme/grommet-core/_settings.scss\ndoes not exist, I believe it appears because I have referenced \n'grommet/scss/grommet-core/index.scss'\nin my theme's Index file (see below)  and the Grommet file in turn references the inuit-defaults/_setttings.scss file.\nI tried importing the inuit file in my Index, before the Grommet import, but not surprisingly that didn't work, as the imported Grommet file isn't looking for it there.\nSo far, unless there is an @Import feature I am not aware of (quiet possible!) I can't see a way around the relational problem without copying Grommet Core files directly into my project which seems to defeat the purpose of node-based design.\nIt's quite possible that I've missed something worthy of a face-palm but I can't see it, so I'll lay out what I have done and ask for some guidance -\nstructure\nsrc\n---scss\n------themes\n--------dark\n-----------  _dark.defaults.scss\n-----------  _objects.material.dark.scss\n-----------  index.scss\n/src/scss/themes/dark/index.scss then is:\n      @import 'inuit-defaults/settings.defaults';  //no help of course\n      @import 'grommet/scss/grommet-core/index.scss';\n      @import 'dark.defaults';\n      @import 'objects.material-dark';\n\nwebpack.config.babel\n```javascript\nimport path from 'path';\nimport webpack from 'webpack';\nimport CopyWebpackPlugin from 'copy-webpack-plugin';\nconst env = process.env.NODE_ENV || 'production';\n......\nconst loaderOptionsConfig = {\n  options: {\n    sassLoader: {\n      includePaths: [\n          './node_modules',\n          './node_modules/inuit-defaults'  //hello?\n      ]\n    }\n  }\n};\n.....\nplugins.push(new webpack.LoaderOptionsPlugin(loaderOptionsConfig));\n......\nexport default Object.assign({\n  entry: './src/js/index.js',\n  output: {\n    path: path.resolve('./dist'),\n    filename: 'index.js',\n    publicPath: '/'\n  },\n  resolve: {\n    extensions: ['.js', '.scss', '.css', '.json']\n  },\n  plugins,\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  },\n  module: {\n    rules: [\n      {\n        test: /.js/,\n        exclude: /node_modules/,\n        loader: 'babel-loader'\n      },\n      {\n        test: /.scss$/,\n        use: [\n          { loader: 'file-loader', options: { name: '[name].css' } },\n          { loader: 'sass-loader',\n            options: {\n              outputStyle: 'compressed',\n              includePaths: [\n                  './node_modules',\n                  './node_modules/inuit-defaults'  //trying to find it\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}, devConfig);\n```\npackage.json\n```javascript\n\"dependencies\": {\n\"body-parser\": \"^1.15.2\",\n\"compression\": \"^1.6.2\",\n\"cookie-parser\": \"^1.4.3\",\n\"express\": \"^4.14.0\",\n\"grommet\": \"^1.3.4\",\n\"grommet-addons\": \"^0.4.0\",\n\"inuit-defaults\": \"^0.2.3\",   //just in case Grommet is not loading them\n\"inuit-normalize\": \"^4.1.1\",\n\"inuit-reset\": \"^0.1.1\",\n\"inuit-shared\": \"^0.1.5\",\n\"morgan\": \"^1.7.0\",\n\"path-to-regexp\": \"^1.7.0\",\n\"query-string\": \"^5.0.0\",\n\"react\": \"^15.4.0\",\n\"react-addons-create-fragment\": \"^15.6.0\",\n\"react-dom\": \"^15.4.0\",\n\"react-drag-drop-container\": \"^4.0.0\",\n\"react-intl\": \"^2.1.5\",\n\"react-redux\": \"^4.4.5\",\n\"react-router-dom\": \"^4.0.0\",\n\"reactjs-mappletooltip\": \"^1.2.0\",\n\"redux\": \"^3.6.0\",\n\"redux-devtools-extension\": \"^2.13.2\",\n\"redux-thunk\": \"^2.1.0\",\n\"shortid\": \"^2.2.8\",\n\"ws\": \"^1.1.1\" },\n\"devDependencies\": {\n\"babel-cli\": \"^6.22.2\",\n\"babel-core\": \"^6.5.2\",\n\"babel-eslint\": \"^7.1.1\",\n\"babel-jest\": \"^18.0.0\",\n\"babel-loader\": \"^6.2.10\",\n\"babel-plugin-transform-object-rest-spread\": \"^6.19.0\",\n\"babel-preset-es2015\": \"^6.18.0\",\n\"babel-preset-react\": \"^6.16.0\",\n\"babel-preset-react-hmre\": \"^1.1.1\",\n\"babel-register\": \"^6.18.0\",\n\"copy-webpack-plugin\": \"^4.0.1\",\n\"cross-env\": \"^3.1.4\",\n\"es6-promise\": \"^4.0.5\",\n\"eslint\": \"^3.9.1\",\n\"eslint-config-airbnb\": \"^13.0.0\",\n\"eslint-parallel\": \"^0.1.0\",\n\"eslint-plugin-import\": \"^2.2.0\",\n\"eslint-plugin-jsx-a11y\": \"^2.2.3\",\n\"eslint-plugin-react\": \"^6.6.0\",\n\"file-loader\": \"^0.9.0\",\n\"grommet-cli\": \"^3.0.0\",\n\"json-loader\": \"^0.5.4\",\n\"node-sass\": \"^4.1.1\",\n\"nodemon\": \"^1.11.0\",\n\"pre-commit\": \"^1.2.2\",\n\"react-dev-utils\": \"^0.4.2\",\n\"react-test-renderer\": \"^15.4.1\",\n\"redux-devtools\": \"^3.4.0\",\n\"redux-devtools-dock-monitor\": \"^1.1.2\",\n\"redux-devtools-log-monitor\": \"^1.3.0\",\n\"sass-lint\": \"^1.10.2\",\n\"sass-loader\": \"^6.0.3\",\n\"webpack\": \"^2.2.1\"\n```\nNot to muddy the waters but I should mention that this project lives as an SPA inside a .Net MVC app, being served by IIS Express. I don't think that should impact anything but just in case....\nAny suggestions / pointers would be greatly appreciated. Thats a great idea I'll look into it - thanks for the quick response! . Hi Alan - FYI - although that is a great idea and I'm planning on doing something similar, I wasn't comfortable just side-stepping the root problem so I re-constructed from the ground up until I hit the issue  - turns out I'd inadvertently upgraded react-router to V 4 (now react-router-dom  !hooray for 'breaking changes'!) so of course if the router breaks, all kinds of things might be 'not found'. \nReverting to 3.0 solved it.\nHope this helps anyone else that encounters it.. Thanks Alan, I'm converting an existing app with layered modals but as I've become more familiar with the Grommet framework I've realized that It's less intuitive that way, and is more complex as well so we're biting the bullet and redoing things. Thanks for the reply!. ",
    "haifengf": "Issue in one view global dashboard:\nhttps://github.com/HewlettPackard/oneview-hubble/issues/556\n. ",
    "arjunbm468": "@alansouzati @ericsoderberghp \nPlease review and merge to master if you really want to support title attribute in ANCHOR component.\nIf you agree with this, then grommet docs pull request should also be merged..\nhttps://github.com/grommet/grommet-docs/pull/67\n. In my application, We have links present on the left navigation menu of a page.\nSome links requires additional privileges to access them.\nWhen the user hovers on those link, we present them with a tool-tip saying Requires an active software updates support agreement.\nAttached images illustrates this...\n\n. @ericsoderberghp @alansouzati \nPlease review and merge this to master...\nI am not sure whether this is the right approach for test coverage.\nI just went ahead and written these test cases for my learning as the link says - https://github.com/grommet/grommet/wiki/Building-Grommet\nAre you guys have any different test coverage strategy.. OR this is the go forward recommended way... \n. @ericsoderberghp @alansouzati \nPlease review this and merge to master...\n. @alansouzati @ericsoderberghp \nPlease review this and merge to master...\nNot sure why the CI build is failing, I have just added test cases for 10 components.\n. @alansouzati @ericsoderberghp \nPlease review this and merge to master...\nNot sure why the build has failed, probably an issue in build environment...\n. Thanks a lot... @alansouzati \n. @ericsoderberghp @alansouzati \nThank you for fixing the issue.\nAs part of verification, i noticed that only Font styling has been fixed. But not the focus event on the menu icon.\nI am not getting the green colored focus when you focus-in/focus-out of Menu icon\nThis is illustrated in the below image\n\nAlso when a plain hyperlink is present inside the Sidebar component, The font style on hover is black color instead of white color.\nI have updated the codepen to illustrate the behavior-\nhttp://codepen.io/arjunbm/pen/JWOpZm?editors=0010\nTry hover on the third hyperlink of Sidebar component.\nPlease analyse these issues as well and let me know your thoughts on this.... @alansouzati @ericsoderberghp \nAny thoughts on this issue...?. @alansouzati @ericsoderberghp \nDo you feel this as an issue or is the design as expected?. @alansouzati @ericsoderberghp @bryanjacquot \nCould you please review and merge this PR.... ",
    "jackychow": "@alansouzati Thanks for the fast response! you guys rock.\n. ",
    "gustahrodrigues": "Do you have a code pen to reproduce it?\nI could not reproduce it using this one: http://codepen.io/gustahrodrigues/pen/ZOjKwX?editors=1010\n. Guys, \nDo you have a deadline for that improvement? Or Can you have me a guide for it be implemented locally?\nMy users and I are looking forward to it.\nThanks!\n. ",
    "shridhargovindaiah": "its working now. I was not included them inside App tag. \nThanks for the response.\n. ",
    "milesj": "Why not use a CSS-in-JS + CSS modules approach? That would isolate and namespace accordingly. https://github.com/milesj/aesthetic/tree/master/packages/aesthetic-adapter-css-modules. Awesome, good to know! One question, is there a timeline for NEXT? We're evaluating UI libraries at my employer, so this would be a handy to know.. ",
    "songhaifeng": "Thanks for giving an approach to work around it.\n. ",
    "sgelliott": "Moving this issue to grommet-cli: https://github.com/grommet/grommet-cli/issues/1\n. ",
    "athmangude": "@karatechops Is v0.6.10 the latest?. Cuz it looks like the package on NPM is not updated.\nThe components/chart/ folder is missing\n\n. Thanks guys I got it working with the tarball\n. ",
    "voodooattack": "@alansouzati You're welcome. \nComponents with no constructor are fine from what I've seen. \n. Excellent, thank you for the swift solution!\n. ",
    "luisrudge": "Components with no constructor don't need to forward params\n. Cool! Thanks! <3\n. oh! a fellow Brazilian!\n. cool \ud83d\udc4d \n. ",
    "nikooiko": "Well i kinda face this problem now. Is there any workaround to solve this?. ```\n<Box\n  align='center' direction='column' pad='small'\n  colorIndex='ok' flex={true}\n\n}\n    label='Offline' value={100} size={valueSize}\n  />\n\n```\nicon-background-color\n\nI'm sorry, right now can't create a codepen. I'll post one later if i find the time for it.. I'm glad to inform you that it was a bug in my code. Functionality works correctly!\n(Although control buttons are a bit off and i get two scroll bars. I currently solve these problems by creating my own buttons and setting overflow:hidden to Article)\nThe problem was that i had  full={true} to Article and that messed with the movement between sections.\nPS: It would be useful to provide more info at the documentation, because i think many of us might use this funcionality.. ",
    "Kiho": "Is there way to disable this behavior or change threshold?\nI like to show colored status icon on grey background but I can't find out a way to do it.. ",
    "jainvabhi": "@bryanjacquot How should i include the logo svg if I have the logo with custom sizes like 65x50 or 150x50 etc... in grommet we don't have any option even with using Image or SVG both. \n\nIn that case I have to create a custom css for the logo to overwrite the existing grommet css. \n. ",
    "cherih": "Modified the DateTImeDrop component to always display 6 weeks. This prevents the date change controls from jumping around:\n\nConcerns:\n1. It's hard to tell the difference between days in the selected month and those that aren't in the month. The styling for the other-month is being applied correctly, but the contrast between the secondary text color and the primary text color is not great enough for me to readily see. Can we change the stylings to increase the contrast between the text colors?\n\nFor some months, there are a lot of extra days shown at the end that aren't in the selected month. Is this OK, or should we create a new styling to hide these extra days?. The color study is done and the changes are planned for 2.0.\n\nNeed Chris Lozzi to provide a link to the color study results.. The color study is done and the changes are planned for 2.0.\nNeed Chris Lozzi to provide a link to the color study results.. Was able to reproduce this problem in my sandbox. Will work on debugging it.. @tobias-flitsch - This only seems to be a problem when both fixed and float are true. Does the fixed property alone provide the functionality you need?\nThe float property seems confusing and we are re-evaluating it for Grommet 2.0 to determine whether or not it can be deprecated. Do you have a specific use case that requires the float property?. Hi @arabold,\nI'm sorry, but we aren't able to replicate this issue using the latest source code in the repo. Do you still see the problem or have an updated codepen that reflects the issue?\n. Added documentation for the hidden, size and strong properties to the grommet.io FormField component page.\nSee PR#276 in grommet-docs project.. Was able to reproduce this and am working on the fix.. I was able to reproduce this issue using the codepen provided - thank you for that! \nThe stroke color is set for the lines that are visible. For the lines that are invisible, the color property is getting set correctly, but for some reason, the stroke color isn't getting set. Need to investigate this further to determine why.. @gustahrodrigues - we currently don't support all colors for the Chart component. The graph-* colors can definitely be used.\nWe wanted to restrict the colors that are available to those that work well together.  For example, accessibility/contrast issues can arise from some color combinations. Also, we support fewer colors to keep the size of the CSS code down. \nWe are considering re-evaluating this issue for grommet 2.0, as we work on modifying how colors are handled in grommet.\n. Was able to reproduce this in my sandbox today and will work on debugging  and fixing it.. @oswaldoacauan - thank you for suggesting a solution for this. Yes, we would love to have a PR for it, if you can do that.. This issue has been fixed and will be included in a soon to be released new version of grommet.\nThanks to Alan and Eric for figuring this out.. Fixed the issue for input types tel and url.. animation-play-state is missing in IE 11.\nIt works on the latest version of Edge, as well as Chrome.. Reproduced this issue in my sandbox.. Created PR 16 in the grommet-addons project for this issue:\n #https://github.com/grommet/grommet-addons/pull/16\nGreat suggestion about showing the grommet version in the docs! I created a new grommet-docs issue 297 for this:\nhttps://github.com/grommet/grommet-docs/issues/297\n. Rolled in feedback from Alan and re-tested.\nPR 16 in grommet-addons was merged to fix this issue.. This appears to be fixed now in the latest version of grommet 1.x. \nI was just able to create a Map with a cycle in it and it has no errors. It looks like grommet is no longer using the toposort package. This package is no longer found in the node_modules directory after running \"npm install\".. This appears to be fixed in the latest grommet.. Done. ",
    "mcwebb": "@alansouzati my colleague and I are still experiencing this issue yet we're using v1.0.1.\nWhich commit introduced the fix?\n\n. thanks @alansouzati, what information can I provide to help diagnose the issue?\n. Just to clarify what's happening: adding scrollable={true} creates a table__mirror which contains only the <thead> which is position: fixed. Thus, the entire page scrolls as normal but the <thead> is fixed in it's original position relative to the viewport.\nI feel that perhaps I'm just missing something and scrollable Tables expect a certain type of surrounding markup? Are there any examples of <Table /> in grommet-ferret?\n. @alansouzati many thanks for the CodePen, we did consider using the ListComponent, but we felt that the TableComponent was more appropriate for our use-case.\nI'm happy to look into this issue myself and potentially provide a PR, however I'm actually not 100% clear about the intended behaviour of scrollable={true}.\nThis is what currently occurs: http://codepen.io/mcwebb/pen/QGjxro\nThis is my proof of concept of what I would expect to occur: http://codepen.io/mcwebb/pen/vyNrbR\nAm I going in the right direction with the proof of concept? If so, I'll clean it up and make it more performant then submit a PR.\n. Hi @tracybarmore!\nThis issue is still present. Regarding your previous question, my hack (http://codepen.io/mcwebb/pen/vyNrbR) doesn't work when combined on a page with a fixed header since both that header and the table header stick to the top of the viewport.\nWhen I posted that I was essentially just asking \"is this what scrollable={true} is meant to do?\". That's fantastic, many thanks for your hard work.\nOn Fri, 17 Mar 2017, 02:15 Alan Souza, notifications@github.com wrote:\n\nClosed #793 https://github.com/grommet/grommet/issues/793.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/issues/793#event-1003477231, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAlQ4AsXrdsUptL0KD2xgrFuK8bdcgyUks5rmZ9jgaJpZM4JpcUo\n.\n. I think this is what is intended by Table's scrollable property, however I'm having some issues with it at the moment (see #793). \n. When installing an identical package.json this issue occurred to my colleague but not for me. Is Grommet simply missing that babel-runtime dependency or is there a deeper reason?\nHe's on Windows with v2 NPM, whilst I'm on Mac with v3 NPM if that helps.\n. He's now up and running with NPM v2, just needed the explicit install of babel-runtime plus the configuring of sass-loader to dig deep into Grommet's dependencies e.g.\n\nsassLoader: {\n    includePaths: [\n      path.resolve('./node_modules'),\n      path.resolve('./node_modules/grommet/node_modules'),\n    ],\n  },\nI'm unlikely to be able to convince him to upgrade to v3 to confirm the hypothesis I'm afraid.\nBut since you explicitly only target v3 I think this issue can be considered closed, I only include the further details above in the hopes that it'll help someone else facing the same issue.\n. Use the priority property of <Split /> to prioritize the sidebar side when the button is clicked.\ne.g.\njsx\n<Split priority={this.state.showNav ? 'left' : 'right'}>\n  <Sidebar>\n    Sidebar content\n  </Sidebar>\n  <Article>\n    <button onClick={() => this.setState({showNav: true})}>Nav</button>\n  </Article>\n</Split>\nYou'll probably want to use priority in tandem with onResponsive to make the logic a bit more complex to handle the priority differently when on mobile or desktop.\n. We've also encountered this and hunted through the Grommet source code for the culprit, but couldn't find what was wrong.\nOur workaround was to introduce request throttling in our stores, but obviously that's less than ideal.. brilliant, thanks for getting to the bottom of it! (pun intended) \ud83d\udc4d. ",
    "RodHPE": "by the way, can you give me a hand? I know where the issue is, but need you to fix it. Thanks.\n. \n. Looks good. thank you!\n. code:\n      \n        {background}\n         {} : this.props.onClose}>\n         \n\n            {header}\n            \n\nGeneral\n\n\n\n\n\nIPv4\n\n\n\n\n\n\n\n                {ipv4Subnet}\n                {ipv4Gateway}\n            \n\nDNS\n                {dnsOption}\n                \n\n\n\n\n\n\n\n            {errorMessage}\n            {footer}\n          \n\n\n\n. dup. \n. <div>\n      {...}\n      <Layer align=\"right\" closer={...} onClose={...}>\n       <Box direction='row'>\n        <Form>\n          {...}\n          <FormFields>\n          <Section>\n            <h3>...</h3>\n              <FormField>\n               ...\n              </FormField>\n          </Section>\n          <Section>\n            <h3>...</h3>\n              <FormField>\n               ....\n              </FormField>\n              <FormField >\n             ...\n              </FormField>\n           ...\n          </Section>\n          <Section>\n            <h3>DNS</h3>\n              {dnsOption}\n              <FormField ...>\n                ...\n              </FormField>\n              <FormField ...>\n                ...\n              </FormField>\n          </Section>\n          </FormFields>\n          ....\n        </Form>\n       </Box>\n      </Layer>\n    </div>\n. It seems when has a lot filter item, the page will re-rend with scrollbar. the filter will be double. ",
    "edude03": "Off topic, but @RyanCCollins I'd like to help test / improve the typings as I'm using TS + grommet in a project right now but I can't seem to figure out the right stanza to import them. \nI thought it would be import App from 'grommet-typescript' or something similar but I haven't gotten it to work. Any advice? . @arlair I think the solution is to enable \"AllowSyntheticDefaultImports\" then use the import Header from .... format. That's what I did anyway. @RyanCCollins Thanks!!! I got it working with a little finagling, however, I'm having an issue with react-redux\nI want to render a select right, and so I use MapStateToProps with connect, like so\n```\nimport Select from 'grommet/components/select';\nconst MapStateToProps = ({ schedule }): => {\n    let options = values(SCHEDULE)\n            .filter(isNumber)\n            .map(v => (  {value: v, label: SCHEDULE[v] } ))\nreturn {\n    value: {value: schedule, label: SCHEDULE[schedule] },\n    options: options\n}\n\n}\nconst MapDispatchToActions = (dispatch) => {\n    return {\n        onChange: (input)=> dispatch(setPaymentSchedule(input.value.value))\n    }\n}\nexport default connect(MapStateToProps, MapDispatchToActions)(Select)\n``` \nwhich makes TS upset because Select takes GrommetCustomTypes.SelectProps not just  old props ;P - the error was \nerror TS2345: Argument of type 'typeof Select' is not assignable to parameter of type 'ComponentClass<{ value: { value: any; label: string; }; options: { value: string; label: any; }[]...'.\n  Type 'typeof Select' is not assignable to type 'StatelessComponent<{ value: { value: any; label: string; }; options: { value: string; label: any;...'.\n    Type 'typeof Select' provides no match for the signature '(props: { value: { value: any; label: string; }; options: { value: string; label: any; }[]; } & { onChange: (input: any) => any; } & { children?: ReactNode; }, context?: any): ReactElement<any>'\nSo to get it to work I had to change \ninterface SelectProps extends React.Props<Select>\nto \nexport interface SelectProps extends React.Props<Select>\nand change \nconst MapStateToProps = ({ payment_schedule }) =>\nto\nimport { SelectProps } from 'grommet'\nconst MapStateToProps = ({ payment_schedule }): SelectProps =>\nIt's not too bad of a fix, but I'm wondering if I/we should export all the interfaces or if there is a better way. Thoughts?\n. ",
    "ProTip": "Does anyone have advice for getting the css to load? I keep getting the following:\nERROR in ./src/index.tsx\nModule not found: Error: Can't resolve 'grommet/scss/vanilla/index' in '[path]/src'. ",
    "lorem--ipsum": "Hey @RyanCCollins I can't find the typings anywhere, it looks like the repo is no longer accessible. Any chance you could publish those types again ? Thanks !. ",
    "Kitanotori": "@RyanCCollins Can't get the typings working. Webpack keeps throwing similar error for each imported component: TS2604: JSX element type 'Button' does not have any construct or call signatures.\nTemporary \"solution\" I could come up with was to change the definition from\nts\ndeclare module \"grommet/components/Button\" {\n  export default Grommet.Button;\n}\nto\nts\ndeclare module \"grommet/components/Button\" {\n  const x: any;\n  export = x;\n  // export default Grommet.Button;\n}\n, effectively making the definitions useless.\n. ",
    "fullc0ntr0l": "+\nI can get the node of the input element of Checkbox component. At least the component should draw a small filled square inside checkbox when indeterminate is set to true. That way we can handle the logic of indeterminate inside our component wrapper.\n. Well this is still not resolved, why should you close it?. ",
    "sourcepirate": "When i changed the webpack config file to below code it started working.\nvar viewer = {\n    entry: APP_PATH+\"/app.react.js\",\n    resolve: {\n        extensions: [\"\", \".js\", \".jsx\"]\n    },\n    output: {\n        path: BUILD_PATH,\n        filename: env ? \"static/app_bundle.min.js\" :\"static/app_bundle.js\"\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                loaders: [\"style\", \"css\"],\n                include: APP_PATH\n            },\n            {\n                test: /\\.js?$/,\n                loaders: [\"babel\"],\n                include: APP_PATH\n            },\n            {\n              test: /\\.json$/,\n              loaders: [\"json\"]\n            }\n        ]\n    }\n};\n. +1. ",
    "apihlaja": "It seems Ferret don't suffer from this. It uses Metric font which has smaller g so it fits, even with line-height of 1. For example, default font (Source Sans Pro) or Arial needs more (1.5?).\nNot sure what would be proper fix. Normally, g overflows but Title has overflow: hidden to enable text-overflow. Maybe overflow settings can be adjusted somehow. Other option would be to increase line-height. Doing it for title only don't behave nicely when used as in Ferret. Increasing line-height of Title and Header to 34px or 1.5 seems to work, at least with my header setup.\n. ",
    "ajwinkworth": "Hi @epilande My issue is actually more complex then the one I posted. When trying to find the simplest example of the issue I reduced the issue to my codepen. I may have inadvertently simplified to a completely different  issue which has to do with not having the onChange but with similar effect. \nI have a onChange handler that dispatches a redux action that is handled in a reducer. The reducer calculates various things and then will set the redux state. The state is then mapped to the control via React.Redux connect. The issue I seem to be having is if reducer is picking a value that does not match the value set by the + - buttons isn't reflected until you manually type into the box.\nI have removed my workaround and posted a video:\nVideo showing Issue \n. On the right hand side you can see that the state is loaded into the value prop/attribute. The \"value\" does not change but the what is written on the component does change. I believe this is because the stepUp() and stepDown() functions are not causing react to update correctly for some reason? If you forceUpdate() react when calling stepUp() & stepDown() then the problem goes away, but this quick fix seems too hacky to pull request? All of my components are \"dumb\" only showing the values from the props. The state is passed in via React-Redux containerization. \nAs a side note the IE work around in the same NumberInput uses parseInt() which if you use a step that is not a integer seems to cause strange step issues. I would suggest Number() as a possible solution? \n. Hi @epilande. Attached is the codepen which is pretty close to my code. Based on the code the second input should not be able to be less the the first input. If you manually type in the numbers then this is always true. If you press the up and down button on the second input (in chrome) then you can actually get the NumberInput control to show something different then what its value prop has as a value.\nhttp://codepen.io/ajwinkworth/pen/ampRgp\nIf you want to see the possible parseInt() error then you need to load your http://codepen.io/epilande/pen/qaRdZP?editors=0010 in Edge or IE and then press the up and down buttons. If you press + first then you will jump up 0.1 with the first press but the next press does nothing... and if you then press - button the value will jump down 1 and not 0.1. I think that this is because the step={0.1} is not a int its a float. You could use parseFloat but my current understanding is that Number() may be better. \n. I believe it is an issue as it breaks flux 1 way updates by updating the value on the screen separate to the value in the prop. The way this works at the moment is surprising. Code changes could make it \"non-surprising\" and make it compatable with Flux 1 way updates. When I get some spare time I might make a pull request with changes so that it can be discussed?\n. ",
    "jon-grangien": "To add further light on the issue, another problem is the limit to display Sunday as first day of the week. Could this perhaps be implemented as a prop?\nRight now with grommet 1.3.4 I'm getting Sunday as first weekday in the top row with weekdays, but Monday as first weekday in the actual dates. So for instance, 1st of May is shown in the Sun column, when it is actually Monday.. Actually I just realized that may be a separate issue? Or there's a smaller bug. The dates are wrong on initially clicking up the drop, but changing dates between months adjusts them.   \nFirst click, dates are offset\n\nChange to 1st May, dates are correct\n\nClicking back to April and the dates remain correct, until closing the drop and opening it again.  \nEdit: Sorry I'm confused and tired. The behavior is this: Simply clicking another date adjusts the dates to be aligned in the right columns, they are offset initially.. This also affects at least the Layer and the DateTime component as well. Adding them to the codepen shows it. Does everyone have this issue? Why does it not apply to the Menu component on the docs page? https://grommet.github.io/docs/menu. ",
    "Primajin": "Great, may I wish also for two features:\n\nPossibility to set first day of week (https://en.wikipedia.org/wiki/Week#Week_numbering --> ISO-8601)\nSet a time difference (user will input local day and time, but value will be UTC/Zulu). There is another thing, grommet seems to only use the presentational date (even in the onChange event arguments?), rather expose a real Date object and then only display the formatted one, but store a \"real\" date internally. We would like to have the user pick a date, but then actually send an IsoString to the backend. That way automatic localization and even time difference could be achievable, because that is then only presentation.. What is extra weird, is that Sort has a completely different behaviour. Here the label of the active option is used inside the Select (as desired in this issue here), while the dropdown lacks the class for the active option (as the previous comment states).\n\n@alansouzati  Can't we have both? Dropdown with label as value and selected option highlighted in dropdown?. As of https://github.com/grommet/grommet/pull/1426 has been merged\nI found out that this can be resolved if I not pass either the value or the label to the value attribute, but both in an object similar to the objects in the array that get passed to the options attribute - Must have overread that in the docs! Maybe with this we can also fix the behaviour of Sort to not only accept a String as a value but also a label-value-pair-object\nhttps://github.com/grommet/grommet/issues/1601. If the docs run on 1.8.3, then this issue still exists in the latest version. ... btw. would be great if the docs show the version they run on ;). ",
    "raphi011": "It would be great if the next DateTime component would allow custom placeholders instead of the fixed format. are additional unit tests mandatory? i will add some if so :). Ok - one thing i'm not sure about is passing the previously selected suggestion ( if any ). It may be better to always return null, because the user probably doesn't know anymore what he has selected before.. Nice, my first pull request ever :) thanks for the quick review. if @glennflanagan doesn't want to create a pull request i could help out :). ok, i'll try to fix it tomorrow, need this feature too. I think that won't work because the _onEnter listener is only active when dropActive  is true\nconst activeKeyboardHandlers = {\n      ...\n      enter: this._onEnter,\n      ...\n    };\nif (dropActive && ! prevState.dropActive) {\n     ...\n      KeyboardAccelerators.startListeningToKeyboard(this,\n        activeKeyboardHandlers);. ",
    "kevingrady": "And the Notification component of Grommet has the same issue. The date could not be localized.. ",
    "ShimiSun": "Done with the refactoring round, thanks for the healthy feedback.  :+1: \nlet me know what you think @ericsoderberghp \n. Done\n. Not sure what you are asking, are you in search for loading component?\nIf yes, then take a look at this example with loading svg https://storybook.grommet.io/?selectedKind=Accordion&selectedStory=Rich&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nnavigate to Highlight. @ericsoderberghp can we close this issue? or is there any other action item from our end?. An example to use the active prop from our patterns https://codesandbox.io/s/216vvpmlqj\n. Hi @eluchsinger, are you able to reproduce the issue on Grommet v2?. @eluchsinger, are you still able to reproduce the issue with a later v1 or v2 versions?. @RyanCCollins can you share your inputs on exploring Bit?\n. I sent a question to Matt to get some more inputs.\n. @jonisar thanks! this looks really nice, we appreciate your work and suggestion.\n@MikeWalrath let's discuss it on our meeting, not sure if we want to expose the v1 components & utils.\n. @jonisar can you hide the v1 components? is this something we can control and how?. Thanks! I go by shimi, same account as my github. How does the dependency management handle upgrading only one specific component when a theme is used globally for all the components?. @matt-catellier are you still able to reproduce the issue after upgrading to v1.13.0?. feel free to re-open if you still see the issue.. Hi, I'm closing this issue since I believe nothing needs to be changed on our end. \nPlease feel free to reopen it with a way to reproduce the issue, in case you think otherwise. hi @djalmaaraujo, I wasn't able to reproduce the problem using the code sandbox example. is the issue still relevant? can you please provide an updated example?. @alansouzati do you still find this as a relevant issue? and if so, can you please share answer eric's question.. @robinmetral did your commit fix it? because it looks well to me \n. The grommet team is not planning to enhance v1. we are open to accept PRs if someone else is willing to contribute. . Can you please reproduce the issue? Either the built-in grommet playground on the site or using Grommet v2 Template on https://codesandbox.io/s/m7mml8l0zj. @jesseolsen . Hi @jesseolsen, please let us know if there is anything else you need help with. I was able to run storybook in IE11 well\n\n. Hi @JoshK2, thanks for the PR. will you be willing to address the conflicts?. we will track this one at #2556 . Looks good to me. componentWillUnmount is OK. we removed all other componentWill*.\nfindDOMNode is still being used in Infinite scroll, see #2600 .. @alansouzati can you share an example? not sure what it means to \n\ndisable tab for children under the stacked elements.. on interactiveChild prop we will remove the focus on all the none interactive childs.. thanks for filing the issue and being patient with the response :)\n\nAfter adding more entries to the context menu and seeing the squashed behavior, I sort of agree with with the fact it considers the layout and putting a limit, but I also agree that we might want to provide a way to override it in case it is not the desired behavior.\n@ericsoderberghp, I'd like to know what you think here, would the right solution from our end is to provide a way to override the maxHeight value?. @kristiandelay, you are commenting on a closed issue from 3 years ago. could you file a new one with more details. Can you try a fresh clone with only running npm install? . We will be tracking this issue with #2781 . https://github.com/grommet/grommet/pull/2473\nPR is filed, thanks for your feedback! . Closing this one due to too many conflicts. see https://github.com/grommet/grommet/pull/2486. We use count since that is the way css uses.\nmultiple borders is a valid enhancement\nneed to reproduce the error in question when using columns and areas. Box - multiple borders is a valid enhancement\nGrid - on https://v2.grommet.io/grid? there is a built-in example of using areas with column object and I wasn't able to reproduce the error in the description, feel free to share more information on the GRid you used that reproduced the error, we do need to document it if it still exists.\nDatatable - The Datatable layout problem on the grommet-site is fixed.. All looks well, and the Grid->App story looks better with the fix.\nI was bothered by one thing though while trying to look up the influence that rows={['auto', 'flex']} might cause or impact the layout and there was no documentation to either auto or flex as potential values for rows. @ericsoderberghp . @alansouzati can we close this one? there is no findDOMNode usages in grommet. Sounds like a good component to have in the grommet library.\nCan you share wireframes or any design drafts of the new component? just so it will be easier to visualize?. Running storybook on this branch, and encountered two warnings I have not seen on the master branch. it can possibly be handled separatly but I thought it is better to mention it\n\n\n. checking your updated commits with storybook, and this one is breaking the UI:\n\n. This one is just a warning but you might want to take a look here:\n\n. I was able to reproduce the Tab warning this morning:\n\n. Should this PR be associated with issue #2388 ?. @ericsoderberghp I noticed there is no assignment of theme style to text in terms of size (font-size, line-height), hence I didn't document it. Is it a bug?. Great question. the initial thought was to fix the test, but at the same time, there is nothing wrong with empty Accordion, just like an empty Table and an empty Chart. \nThe scenario I had in mind, which may not be applicable in most cases but may be possible, is what if the Accordion is initially empty and being populated during running the application? there is no need to throw a warning in this case. Let me know if your vision is a little different here.. We'll be tracking this one in #2708.. Sounds like a good idea for a pattern @MikeWalrath . @alansouzati Yes we are structuring target the same, but the value structure of the target is different.\nAnd you correct, I am logging this.inputRef.current for the first run and event on the second, but even while logging the event, in the screenshot I focused only on the target value within event. so the comparison is compatible.\nIf the consumer is counting on the target value to have a certain structure, he might be surprised by the different type of values, that was my only consideration. LMK what you think here. \n. The issue was brought up initially by @RyanCCollins . I'm not sure if the fix matches 100% expectations of the feature, but it will be a good place to start the discussion on how we expect the Layer to behave in terms of focus (in case you have objections on how it is currently done). But this fix allows the fundamental keyboard Tab action to access the SkipLinks Layer.. Great work @oorestisime \nUsing Select->Search storybook the message isn't being rendered. The html DOM exists but doesn't display the \"No matches found\" default message and shows an akward space below the search box.\nIn the screenshot below I tweaked the element to have an id='emptySearchMessageId' just so it will be easy to find the element. see screen shot below\n\n. @oorestisime Looks Great! Thank you for your contribution!. @alansouzati correct, I've filed a quick PR to fix this one. @cslashnet Thank you for taking the time for filing the issue! We added a storybook example to demonstrate the onMore in action. Please let us know if you have more questions.. WIP, please use https://v2.grommet.io/ in the meanwhile.\nsorry for the inconveniency.\n. @justinglibert can you please let me know if the issue still reproduces for you? we checked on a few clients and the website was redirecting properly.. @RobertGary1 we are currently allowing to disable the animation, but not to customize its transformation of speed and direction. What will be the use case of customizing the animation speed and direction for you?. I agree with you @oorestisime. I'd like to hear @ericsoderberghp thoughts . Thank you. \nsince we addressed the main issue of disabling the animation, I'll be closing this request.\nFeel free to file a new issue with requests for more animation options that we can explore, in case you find it valuable.. @alansouzati good catch! I added it now\n. @alansouzati @ericsoderberghp I incorporated your inputs and allowed only enable/disable option at this point for animation. I'm working on a separate PR to allow custom theme of layer.animation (unless you recommend using the global animation). let me know if that works.. hi @kanonochina, is the issue still reproducible after applying the suggested changes on top? we updated the package.json with the dependency, please try to see if this is still reproducible.\n. @kanonochina glad to hear \ud83d\udc4d . This fixes the issue:\nhttps://codesandbox.io/s/5k8rr2l21k\n. Thank you @shai32 for taking the time filing this issue. \nAnchor appropriate padding/margin is assigned from the text context it is in. When it gets used in a block context, we recommend wrapping with a Box, since that has other layouts/visual capabilities, like a background, border, rounding, etc.\nWhat is the context you are using the Anchor component and feel like you need to have pad prop?     . @shai32 makes sense, in this case, this example should do the trick https://codesandbox.io/s/wqxlm115o5\n. thank you for the feedback, we'll discuss and consider. @ericsoderberghp . Looks good to me, adding the Box master to take a look @ericsoderberghp.\nThank you for your contribution!! Happy 2019! . Thank you for your contribution! Happy 2019! . @oorestisime I added the following to the PR description:  \n\nShould this PR be mentioned in the release notes?\nYes.. Thanks for filing the issue.\nWhich version of ParcelJS are you guys using? Have you tried to update it?. have you tried with the Latest release (2.4.0) to see if the issue still exists?\n. @michaelauderer, @cafrias, @miguelpeixe, @one19, @hlynn93, @erikreedstrom  is the set up offered by @shabtaisharon helped you to overcome the problem?. Thank you all for the collaboration and feedback. we reverted the changes that caused the issue, and Grommet & ParcelJS should work as expected on https://github.com/grommet/grommet/tarball/stable.\nI'll do an official release in the next couple of days that will include the fix.. Hi @nomadus, thanks for taking the time to file an issue, I just wanted to verify that this issue is reproducible in Grommet v1? . I believe this issue might have been fixed in https://github.com/grommet/grommet/pull/2632. @ericsoderberghp can you please verify?. We've recently added intrinsic types as suggested above, in https://github.com/grommet/grommet/pull/2635. This doesn't address the styled-components aspects but at least covers the other aspect.. I didn't try it fully myself, but I can see the icons are being set from the theme under carousel.icons, can you try to override it so the icons won't be displayed.\nHere is the full carousel theme from base.js:\ncarousel: {\n      icons: {\n        current: Subtract,\n        next: Next,\n        previous: Previous,\n        // color: undefined,\n      },\n    },. @oorestisime I believe this is related to the DataTable improvements you suggested in your PR.. @oorestisime I kind of like what @mrebb is offering better. what do you think?. We are working on putting together cool designs for this component, thanks for the great idea! @jensy\n. @jensy would you like to share your design for the audio component with the community and get some feedback?\n. Thank you for taking the time to file the issue. the package.json is now updated with the correct dependency. Thanks! we are starting discussions on emotions and exploring it\nhttps://github.com/jsjoeio/styled-components-vs-emotion\nhttps://github.com/emotion-js/emotion/issues/113\n. Thanks for filing the issue, its fixed and will be available on our next release. I don't think it is a regression, we never had a DataTable & MaskedInput examples on codesandbox, but we should definitely add something there. Thanks for helping us track it.\nAdding examples will be a great first issue to contribute! . The two that are left:  SkipLinks, Announce Context Consumer. Thanks for catching that @oorestisime !. Fixed on Grommet site https://github.com/grommet/grommet-site/pull/64. v2.3.0 includes a fix (#2624) for h3 on size medium. both sizes of medium and small on h3 were sized the same, and that was a bug, so we corrected medium to show the right size now. I believe that if you change the h3 medium sizes to small it should work as expected. \n\nfor font-weight issue, sounds like we should take a look at that, I have limited access this week but maybe @alansouzati or @oorestisime can jump in here, it probably involves #2607.\nThanks for taking the time to file these issues peter\n. Thanks for the detailed response @oorestisime , sounds reasonable.\nI think that if the h3 heading will be resized to small, the font-weight issue might be gone as well.\n@pstauskas let us know. . Many interesting comments @vadistic.\nI took a look at the codesandbox example, and it was not clear what you are trying to design since there was no compatibility with the (# of rows) to the (# of columns) as it was described it areas definition.\nLet's take for example:\n```<Grid\n  gap=\"medium\"\n  areas={[{ name: \"image\", start: [0, 0], end: [0, 1] }]}\n  columns={[\"small\", \"flex\", \"small\"]}\n  rows={[\"flex\"]} // TypeError \"props.rowsProp.map is not a function\"\n\n{/ ... /}\n\n``\nTheareasare defining only one column and two rows, so the input of just one row is not compatible, and the calculation failed. It does work if you define only one column and two rows though. since it will be compatible with theareasdefined. see https://codesandbox.io/s/j3n9oxxr43\nAnother option will be to change the areas definition and thenrows={[\"flex\"]}` will work:\nhttps://codesandbox.io/s/7ww6z647y6\n\nI do want to imprve the documentation, so if you feel like some information was missing for you to understand how this component should work, please share your thoughts.\nRegarding the example of rows={\"flex\"} we are providing a warning of\n`Grid `areas` requires `rows` and 'columns' to be arrays.`\nso this will not work unless you use an array for rows. I agree we might need to document it better.\nRegarding the background color issue, you are correct, you provided the theme as expected, but there is an issue with the react-dom version in the sandbox. If you'll upgrad its version to 16.7.0 it will work. we are working on this issue.\nTypescript - yea its a bug, we'll track it with this issue number or feel free to file a new issue.\nhit me back and let me know what you think. \n. Awesome! merged the PR, thanks for the collaboration!. @jensy @L0ZZI @MikeWalrath we need some design inputs here :). @ericsoderberghp do we have your approval on this one? or are there any more changes required before the merge.. @oorestisime really nice work here! can you list all the action items related that are missing from this PR to get down with the complete desired functionality? \nWhat will be the ramifications for merging this PR on future maintenance processes?\n. @m11m can you please verify if this is still reproducible now after we updated the react-dom dependency.. closing due to duplication of #2672. Thank you for your contribution. @petercpwong is your recent PR of focus fixes addressing the problem here?. @adamjking3 thank you for catching that! \ud83d\udcaf . @adamjking3, I just noticed you filed this PR using the wrong branch, can you file it against master rather than NEXT-stable?\n. Thank @florianbepunkt for reviewing and quickly troubleshooting. This is indeed not a grommet issue.\n@anpieber feel free to file a new issue or reopen this one in case you have more info you'd like to share.. @srockk can you attach the link for your codesandbox example?\nI've tried this one https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=calendar&module=%2Fsrc%2FCalendar.js and it looks about right to me.. @RyanCCollins sounds good, thank you.. I agree with @srockk and this behavior is expected.\nI suggest you either use the local-time as your date format (emit the Z) to avoid timezone confusion, or in the case that the clients are located on different timezones, feed the calendar with the proper offset to mark the correct date \ne.g. for MST use date={'2018-11-04T00:00:00.000-07:00'}. \nlet me know what you think @RyanCCollins, @srockk \n. feel free to reopen if you still think we can help.. @ericsoderberghp not sure what's up with Travis. Thanks for taking the time to file the issue.\nThe source of the problem is in grommet-icons and the fix should be apply on the grommet-icons repo.. @srallen yes, thank you. for your convenience: https://github.com/grommet/grommet-icons/issues. Thank you for the follow-up @petercpwong . Thank you for this PR, I'll take a look later today to see what are the issues with Travis CI. @oorestisime great start - thank you! \none thing that might be tricky is that the description on the auto-generated docs might be different between components.\nfor example, normalizeColor is a very common style, yet used differently among components, for some components the color resulted may be used for the background like in Video, but in Anchor for example, it is used for the icon color. can we overcome this tricky situation with your design? let me know if you need more info.\n. sounds like a plan, thanks.\nI would say we'll need to watch more closely on which styles should have a customized desc,  genericStyles and some more might be a good target.\n. @oorestisime yea, maybe we should. it is a tricky style. @oorestisime can you share a codesnadbox with me? I'm curious :) . I created a code sandbox that demonstrates this issue reproduces without grommet.\nhttps://codesandbox.io/s/y3y10n63v9\nThis app isn't using grommet lib and styled doesn't apply the style whether the object uses as or tag. \nI'll be closing the issue, feel free to reopen with more information.. Reopening. I found a valid example the issue reproduces https://codesandbox.io/s/n09wxrlr3l\nit does look like the style was working as expected and both headers on the DOM has color: red, but with the styled-component of as, there are other styles that are missing.\nI'm not sure whether a grommet problem, but we should verify it before closing the issue.. @MikeWalrath can we close this issue since IE11 isn't supporting this behavior itself?. @atanasster, following up on your slack request.. \n. the second option looks good to me.\n@oorestisime we have the same example as the second option in storybook https://storybook.grommet.io/?selectedKind=Form&selectedStory=All&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\n<FormField\n            name=\"subscribe\"\n            component={CheckBox}\n            pad\n            label=\"Subscribe?\"\n          />\n @nomadus anything else you need help with related to this issue?. the documentation explains that pad on the FormField is applied when using TextInput, (and it actually pads well after adding TextInput), so it wasn't meant to be applied on CheckBox.\nhttps://v2.grommet.io/formfield\nPad\nWhether to add padding to align with the padding of TextInput.. @oorestisime you can run yarn build-storybook and then run the index.html created in the local static folder created.\nThe problem reproduces on https://storybook.grommet.io/?selectedKind=Drop&selectedStory=All%20not%20stretch&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nas well. It caused by the deep merged theme, I'm looking at it. @ericsoderberghp also related to #2669, where ThemeContext Extend is missing. @markjackson02 thank you for reporting!. great first issue, https://github.com/grommet/grommet-sandbox/blob/master/src/Select.js. fixed https://codesandbox.io/s/github/grommet/grommet-sandbox\nThanks for reporting!. @ericsoderberghp do we want to fix it in documentation to allow one argument value? or should we enhance the second argument as well?. @MikeWalrath let's put this one as a bullet for our next meeting.. using color inside of values does the trick as temp workaround https://codesandbox.io/s/kz39kzmqv\nWe should address this issue.. So this might be a misunderstanding, in the codesandbox example you added, the background isn't used as a prop for Meter like the docs suggested, but as an object within the prop of values. \nbackground- is only the the background color of the space in the meter that isn't utilized with value.\nif your intention was to set the color of the value (and not the meter's background color) to be fixed differently per value please use \nvalues={[\n          { value: 100, color: 'accent-2' },\n          { value: 30, color: 'black' },\n        ]}\nlike @oorestisime suggested.\nBut if you want to set only the background color of the Meter use \n<Meter\n          type=\"circle\"\n          background=\"dark-4\" ... />\nI attached an example of how to use background as a prop vs using color within value\nhttps://codesandbox.io/s/wqpw2yw65w\nNote that if the values colors are taking all the real-estate you won't have any space left to show the background color, the background is only displayed when meter values are not taking 100% of the space.\nI hope it makes sense, let me know if you have questions, and feel free to reopen or file a new issue.\n. @oorestisime due to your different timezone, the misalignment of the date you are seeing may be related to https://github.com/grommet/grommet/issues/2685\n. I don't see any issue either, the codesandbox example is shown as expected on my client:\n\nand I've also ran regression testings on storybook with the most recent branch and it looks good.\nlet me know what we are missing.. @MikeWalrath let's list this one as a potential pattern and add it to FAQs as well. other than that we may consider closing this issue unless @eisque has any other questions.. >I'll look into opening a PR myself to fix this if that's cool. I'm fairly familiar with the problem as it relates to portals and events.\nThat's cool, thanks man! let us know how it goes\n . @ericsoderberghp I'd love your feedback here as well. @a-type yea, please pull the yarn.lock out. Thank you for your contribution!. have you joined grommet Slack channel? that will be a good question to the community. http://slackin.grommet.io/. @britt6612 is taking a look at that. @britt6612 is taking a look at that. @atanasster I've copied your flexbox comment to #2754, so it won't get lost.\nThanks for filing this issue.. @atanasster thank you for filing the issues, it will help us track and tackle. from @atanasster : I uploaded my flexbox playground, if you guys want try out most of the the <Box /> flexbox props :\nhttps://grommet-nextjs.herokuapp.com/flexbox #2753. Thanks for filling the issue & the corresponding PR :). @britt6612 is taking a look at this issue. not sure why she can't be assigned.. @oorestisime thanks for the feedback! good questions.\nMy end-goal was to: \n1. Allow users to actually run the templates independently via yarn/npm/codesandbox. \n2. Use the templates as regression tests (or just tests) when grommet-core is going through changes.\nI don't see many purposes for the templates directory in grommet if it doesn't allow it. which lead me to this design of having package.json for each template.\nI don't see a problem adding Lerna once we approve this structure, it's definitely on the roadmap if we want to migrate grommet-site and icons, and I don't see a problem adding it in the future. I've yet completed my research or completly tested Lerna, and I'm not sure we need it at the moment since workspaces did the trick on two modules and Lerna might be an overkill.\nThis PR is only a POC, it will not be merged like that, we will merge it with all the patterns once we agree on the rest of the puzzle peieces. adding the patterns should be easy to do once we approve of it.\n. Thanks for the feedback, I tend to agree but my thought was to display all the possible options for chart colors. I'll take a second look at it to see if and how I can improve it.. feel free to reopen or file another issue if the PR doesn't solve the issue.. Let's focus on the Chart docs, Chart.js uses the following logic for opacity:\nconst opacity = color.opacity\n      ? theme.global.opacity[color.opacity]\n      : undefined;\nIn case the color prop has an opacity value (i.e. 'weak', 'medium', 'strong') the Chart will derive it from the theme global.opacity. since we don't have a default prop for opacity the defaultValue is undefined. Can you suggest a better way to document it?  . rebuilding.... linked to #2471. All themes (except hpe) are having isssues.\n2471\nFrom\nhttps://grommet-nextjs.herokuapp.com/\nSelect the following themes to see the issues ie anchor on brand color, arrow on Select component\ndxc\ngrommet\ngrommet-v1\naruba\ndark\nhp. Thank you for the great collaboration and contribution @vadistic ! I'm closing the issue in subject.. flex and auto were duplicated so it was more of a clean-up, unless I missed something.\n. great feedback, thanks guys!. contradicts #2687 . I'll be closing the issue if there is no objection.. I 100% see the need for the user to know which theme props will impact his app, to avoid misunderstanding and undesired side-effects as well as leveraging this knowledge for style manipulations. But I do agree we have to draw a certain line on how far we should document it. let's discuss it in our next meeting. @atanasster feel free to share more inputs so we can find a mutual purpose. . Thank you all for the collaboration! the fix will be available on the next release.. I'll try to release by the EOD.. Can you please move src/js/components/Meter/meter.stories.js to be under the new stories directory. this way we won't have stories in different places of the Meter hierarchy.. I'll like to get this one merged today for the release.. @MikeWalrath, I know you mentioned @mrebb has CircleCI knowledge, feel free to jump in and give feedback.\n. You can always use textArea.extend. \nI made a quick example (go to TextArea.js) https://codesandbox.io/s/nrpr9wp1zj\nLet me know if you have more questions.. great, I'm adding the example to our codesandbox and closing the issue, feel free to reopen or file a new issue if needed.. @atanasster, thanks, I appreciate the feedback, and in some cases it does make more sense for me too, but if for example, the border object has 8 possible styling, I think it will be more readable if all the styling are nested within the same object and wouldn't make the docs look too long and scattered.\nAnother example is a user wanting to see all the possible options of border and having it all under the same theme entry is quicker and doesn't require too much navigation. \nLet me know what do you think. . good feedback, thanks guys!. @iankbovard will be tackling this one. Thank you for your contribution @mrebb!. @halmos I agree. we'll keep this issue as an enhancement. feel free to make a contribution and help us improve.. Let us know if you need help getting started @halmos . > I wonder whether we should have opacity style as a helper function and whether opacity style should first live in global section of theme. Like all the disabled things should be styled with the same way and then if user decides to override then ok.\nI agree. it feels wrong that we have opacity: 0.3 scattered around the theme rather than being placed in a dedicated disabled logic.. disabled prop is missing from corresponding index.d.ts files.. @ericsoderberghp I'd like you to review it before merging.. Nice work @mrebb! Thank you for the contribution. We'll need to fix the docs as well as the typescript issue. thank you.. Thanks for reporting! issues are fixed and will be available on our next release. v2 doesn't have the tooltip built-in, but here is a good example that addresses rendering of a tooltip https://storybook.grommet.io/?selectedKind=Chart&selectedStory=Scan&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel. Reopening for further discussions.... An example of how a RoutedButton (with history) can be independently implemented is found in this pattern https://codesandbox.io/s/216vvpmlqj RoutedButton.js. @ericsoderberghp done. I agree with the note about the choice of icons, let's follow up on it in a separate issue https://github.com/grommet/grommet-icons/issues/100. @karatechops let us know if you know what is going on here. not that I'm familiar with, @ericsoderberghp might know.. Hi @Ranguro are we all good with this issue? or are you still finding broken links that need attention?. @karatechops can you please resolve the link issues \ud83d\udc46  . @ericsoderberghp can you please send me the credentials.. thanks for the suggestion! Can you please share an example or a design of the use case?. Do you use it inside of a Form? can we see the wider design idea? I'm trying to understand what type of design will do justice to the label on top/bottom rather than left/right. I hope my request makes sense.. @RobertGary1 Let's take your first example, specifically [1,0][2,100], if I understand correctly you don't like the jump from 0 to 100 to be shown gradually in the line chart, but to be shown as one vertical line. I think a straight vertical line, in this case, will be misleading because it will take you from [1,0] to [1,100], which won't present the real data sample of [2,100]. please let me know how you would like to present the data in this case and enlight me if I'm missing something.\n. I agree. \nI'm curious how you think the non-smoothing approach should look like. \nIf the following is true:\n\nBut if smoothing is false I don't think it's accurate to \"smooth\" the data by assuming the Y value is 50 at 1.5.\n\nwhat do you think is the proper display?. I agree with @oorestisime, it will be easier for us to reproduce and address the issue once we have the markup.. Looks good guys! thank you for the contribution & collaboration. Sounds fun, can you share your thoughts on how to embed it in the library?. So it seems like we already have a spinner, can you check out the spinner in this story: and let me know if it works. it uses svg, and shown when you open Highlight. https://storybook.grommet.io/?selectedKind=Accordion&selectedStory=Rich&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel \n@MikeWalrath FYI. Yes, we are using semantic-versioning https://semver.org/. Thanks @britt6612 ! I think you need to merge master to your branch, remove node_modules and run yarn test-updates for new snapshots. it looks like the snapshots need to be synced with master. the tests are failing on this PR due to the snapshots.\n. @britt6612 looks like the tests passed \ud83c\udf89 @oorestisime are we good to go with this one from your end?. @oorestisime I think the components with changed snapshots are using button behind the scenes and may be impacted by the change.. @oorestisime this is great. can you share the documentation you were relying on to determine this fix?. I noticed this fix is causing a regression for storybook Accordion-> Rich and Drop->All not stretch. the two stories are broken due to using ThemeContext of undefined.\nThe side-effect might need to include both options?\n\n. this should also include the discussion on the internal Heading. related to #2802 and co. @oorestisime the discussion is still valid and once we decide on a different approach (if any), we will refactor the themes as decided. (merging and closing)\n@britt6612 thanks for the contribution and following up on the comments review!. Thanks for sharing.\nCodesandbox currently provides a React context that the built-in editor on the site doesn't provide, (e.g. components that need state in order to function doesn't work on the built-in editor), so IMO sandbox is still needed, I do agree it might be too heavy, but it does provide helpful functionality.\n  . reopening, we still want it on the grommet-site as well :). Hi @robinmetral ! thanks for letting us know, I suspect that in your example the spacing comes either from the Icons margin or the Box, can you show on the sandbox which spacing you think is coming from the button? I might be missing something.. yep, I see it now, thanks for reporting.. @robinmetral it appears the issue reproduces if you use the icon prop, but if you use an icon inside the button it doesn't have additional spacing, see my example https://codesandbox.io/s/189nlwrqr3\nI need to see if there is a reason the button allows spacing when using icon prop, in the meanwhile let me know if this is a sufficient workaround.. Fixed! thank you for filing the issue!. Yes, I agree with @oorestisime. @IanKBovard will you be willing to give it a try? It will help us reuse your definitions and be consistent on our docs.. good question @IanKBovard. I like the second proposal as it is more direct and doesn't require the user to browse what border means and how it is translated into colors. but I'll ask for @ericsoderberghp opinion here as well.  . Hi @IanKBovard. issue #2900 is solved, please go ahead with the documentation of \n'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border',\n  },. updated version after discussion:\n\n. run yarn test-update to capture the snapshots changes needed from the recent doc.js change.. Thank you for your contribution!. This issue should be filed with https://github.com/grommet/grommet-site, I moved it to the relevant repo. thanks. \n. I think I was able to workaround the i18n issue, check out my PR @oorestisime . @oorestisime I had the same thought at the beginning, but I followed the current structure where these styles are explicitly defined in TableCell and used in StyledTableCell+StyledTable and not on the TableHeader/ TableFooter/ TableBody. https://github.com/grommet/grommet/blob/43a3c09b8ee449096ad6764497a27bc30167ef1d/src/js/components/TableCell/TableCell.js#L25\n. closes: #2715\nThank you, it looks fantastic!. @wirtzdan the PR ran into conflicts, can you please remove your yarn.lock file?. Do you mean a similar behavior of https://github.com/grommet/grommet/issues/2884 to Menu and Drop?. If you are using a theme this is another way to do it:\nhttps://codesandbox.io/s/3r7nqmzjzq. no worries, I filed a PR that allows the functionality you requested, let's see what the team thinks about having an opacity prop.\nOut of curiosity, I'd love to see what you are trying to do and not able to, feel free to share a snippet/sandbox. . Did you make any changes to the storybook to reproduce the problem? would you be able to share a snippet of what made the dates disappear?. OK, we were able to reproduce it. thanks for filing the issue.. Thank you for your contribution!. I think its a reasonable request.\nwhat about adding an icon prop (as Button does), and by default icon === (true || undefined) it will show the down button, so there won't be a breaking change, but in case it will be set to false we will remove the icon from the value. just an idea.. great feedback. thanks for letting us know!. @oorestisime \n\nwould be nice to have a unit-test\n\nNot sure how you can have a unit test on a theme value. this is not a new prop. please let me know what you had in mind here.\n\nwhy are we splitting stories into different files?\n\nIt is much more readable when browsing between stories.\nRegarding the issue linked, I'll polish the issue. . We should have a tests for icon false and icon={} . If the user will use timeseries (more than 8 digits number) for the data, and neglect to send granularity, all of the UI will be stack due to the complexity of the calculation. this is why I thought it will be nice to indicate it. \nIn HF for eample, we don't use granularity = 1 in any of our analytics\n. NP, I'll remove it then. Just thought it will be more friendly :)\n. I used uppercase initial only because I wanted to distinguish between multiple and single series. \nShort anecdote, It will sound funny, but in Hebrew we use different words for single series and multiple , and the only distinguish I found with google translate to English is that the multiple was translated using uppercase... \nSince I use the lowercase 'series' as well during the calculation, any suggestions how to call 'Series' instead?\n. because it is not just a single datapoint, it is a single array. \n...I'll still need it in order to map over all the xValues within that array\n. I agree, I'm on it.\n. Fixed\n. Fixed\n. agreed. done.\n. Done :+1: \n. I removed the following lodash functions:\nflatten\nisInteger\n*sortedIndexOf (although we are doing big data and it can get slow)\nRegarding zip, not sure if there are other alternatives.\nAll tests are passing after the refactoring :100:\n. Done :+1: \n. let me know what you think about this one...\n. Does it make a difference having \"width\" located at the end of the inline CSS?. Done. \nNot 100% sure about the global.edgeSize., and on whether it should document all sizes. Let me know what you think.. Done. Let me know if it is compliant with what you had in mind.. I adopted the former way, it is more consistent and readable imo . Sure. I noticed this is how it was used in /components/Box/doc.js, and I wanted to remain consistent.. due to npm install warning. I'll remove it from this PR to a separate one.. @ericsoderberghp Yes we can. since the value varies I wan't sure if it is OK to put a varaible on the defalut value.\nCurrently, the value is spacing: '${baseSpacing}px', what will be a reasonable and readble way to present it on the default value?. working on my English ;)\n. I'd love to discuss these changes on our call today.. Done.. Thanks for taking the time to add a test. \ud83d\udcaf \nIt will be useful to have a quick showcase/test on select.stories.js as well. either Select->Search or Select->Custom Search can have a simple line of emptySearchMessage=\"No matches found\" on the Select component (e.g. select.stories.js line 419) that will demonstrate this option.. @alansouzati I mentioned it on the PR details above:\n\n...In addition, layerNode does not directly contain the document.activeElement, so that was fixed as well.\n\nthis is due to the change of using this.layerRef.current to initialize layerNode. I don't see the content anywhere, have we decided it is no longer needed? . I think it should be override. Thank you for adding a story!. @alansouzati the issue attached is asking for an option to also disable animation on Layer, so this PR is providing the interface of <Layer animate={false} ... >, in this case, animate will be false. . Thanks for adding a story. Thanks for adding a test \ud83d\udcaf . Are the comments needed here?. @oorestisime \ud83d\udcaf . not sure about this one (desc) @ericsoderberghp , let me know what you think.. @ericsoderberghp it's in normalizeColor() https://github.com/grommet/grommet/blob/ec03444fcd59101b8bb804d5119e29a38fd099ce/src/js/utils/colors.js#L6, I wasn't sure about it either. Its used for the video's background color. Yes, I agree, I'll refactor the reference of the hardcoded light-4 to be taken from the theme.. I didn't notice any changes in the UI behavior for FormField (e.g FormField-TextInput) \nwas it intended to be addressed?\n. I'm not loving the focus on MaskedInput due to the bottom focus-border, need a second opinion here @ericsoderberghp.\n\n. Looks good, Thank you!. @petercpwong I don't think so. \n@ericsoderberghp what do you think?. @alansouzati following our conversation, making sure this is what you had in mind.. looks really nice. this test is throwing \n```\nPASS  src/js/components/RadioButtonGroup/tests/RadioButtonGroup-test.js\n  RadioButtonGroup\n    \u2713 default (33ms)\n    \u2713 string options (36ms)\n    \u2713 object options just value (23ms)\n    \u2713 object options (16ms)\n    \u2713 object options disabled (18ms)\n\u203a 1 snapshot written.\n  console.error node_modules/react/cjs/react.development.js:228\n    Warning: Each child in an array or iterator should have a unique \"key\" prop.\nCheck the render method of `RadioButtonGroup`. See https://fb.me/react-warning-keys for more information.\n    in WithTheme(RadioButton) (created by RadioButtonGroup)\n    in RadioButtonGroup (created by RadioButtonGroup)\n    in RadioButtonGroup\n    in div (created by Context.Consumer)\n    in StyledComponent (created by StyledGrommet)\n    in StyledGrommet (created by Grommet)\n    in Grommet\n\n``. should we add an action item to fix the current storybook examples forRadioButtonto be wrapped withRadioButtonGroup?. the buttons are not really working on the example, and the focus is always set on the first choice (even when clicking on others).. looking really nice!. I don't think this is accurate,AnchorusesnormalizeColor` only for the icon color and not for the text.\nhttps://github.com/grommet/grommet/blob/726f4f4abdb8050f1de70a9b5c69793aadb628a0/src/js/components/Anchor/Anchor.js#L46\nnormalizeColor is auto generating \n'global.colors.text': {\n      description,\n      type: 'string | { dark: string, light: string }',\n      defaultValue: \"{ dark: '#f8f8f8', light: '#444444' }\",\n    },\nand 'global.colors.text' isn't being used in anchor at all.\n. normalizeColor is being used for border, text color, background, and hover https://github.com/grommet/grommet/blob/master/src/js/components/Button/StyledButton.js\nand I don't think it uses 'global.colors.text'.\n. from colors.js there is no reference for using global.colors.text, it looks like we are using global.colors. https://github.com/grommet/grommet/blob/726f4f4abdb8050f1de70a9b5c69793aadb628a0/src/js/utils/colors.js#L1. I was able to run storybook with \"@emotion/core\": \"^10.0.5\" after cleaning the all cache files and running yarn install, so I don't think this dependency change is needed here.. Thank you! this is great!. yes, I deleted package-lock.jsonas well.. This is the only line that was changed in this file.. Thanks for adding a story!\nI noticed these warnings when running it:\n\n. NICE! we might want to move the Chart stories in the same way.. might make more sense to be state = { total: 100 }. unless I'm missing something.. do you think it will be better if it happens on hover (e.g. youtube) or only after clicking it?. Yes, and when you put it like that it makes more sense to keep 1.0 as the default. I'll remove the associated logic that makes the volume custom.. of course. done.. thanks for remembering to remove this one.. I'm thinking maybe we want the extend object to be available in disabled. hence the user can customize it as he wishes. thoughts?. where did the 0.3 come from? is it because we use this value for button disable? (which will make sense). Thank you for adding the story. I think Click Me! is a little confusing because the header isn't clickable. will it make more sense to change it to Check & Scroll or Click & Scroll for example?. I'm thinking we shouldn't expose it at all, but still support it in the background. thoughts?. Can we comment this line out? so we'll be consistent with the other objects. can we please move disabledStyle, to line 4 and maintain the right order.. Can we comment this line out? so we'll be consistent with the other objects. Do you think it will be tricky?. This is so much better \ud83d\udcaf . woot-woot! The first hook! \ud83c\udf89 . The button is taking the full space and the focus looks awkward \n\nNot a must, bet will be better to have it fixed.. good story to have, Thank you!. thanks for catching that. fixed.. I think we will like to keep the spaces and be consistent across the files.. what about Specifies the URL of the fallback image used when src is failing to load. this is great, can we also add a test to the new prop?. I'm thinking it would be nice to see a warning on the console when fallback is applied. thoughts?. Please see if we can take care of that on a separate PR.\n. I'm thinking we can use the Custom Rounded story in Select and change it to simply Custom and have the open prop set to true as an example. thoughts?. according to the documentation you added above\n```\nglobal.edgeSize.small\nthe possible sizes for margin, pad and gap Expects string.\nDefaults to\n6px\n`global.edgeSize.small` defaults to `6px` so this value won't change its value.. Let's fix the description here to be `color of the Tabs border`, so no one will confuse it with the `Tab` border\n. it can actually accept an object of `dark` and `light` as well, see https://codesandbox.io/s/o9xo5p13zz\n`type: 'string | { dark: string, light: string }',`. for `global.colors` we usually do have defaultValues.\nin this case it should be\ndefaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)',\n    },\nyou can find it on `base.js`. `global.edgeSize.small`. `6px` I believe, but please double check. you had a similar prop on your Tabs PR, and you presented it the right way over there.. can you please add `borderSize` so we can see how it works?. I think there should be a defaultValue for this one.  can you please double check?. for `global.colors` we usually do have defaultValues.\nin this case it should be\ndefaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)',\n    },\nyou can find it on `base.js`. I think it is already included in `ButtonProps`, line 13.. The logic was always there https://github.com/grommet/grommet/blob/4e309dcd1388662d4e0fe5862b84709749fcaf4f/src/js/components/Button/Button.js#L137\nI documented it because I found it confusing until I saw the code and thought it will be better documented.\nI'm not sure what was the original intent with this logic, and what it was trying to solve.. I compared this PR's Calendar storybook to the master's and couldn't see any problem. (I used Incognito) will you share more details on which story you've seen an issue with the padding?. @britt6612 can you please remove all the `Clock` refs from the name of the stories?. let's make sure `color` prop has the dark/light object as well on docs\n`type: 'string | { dark: string, light: string }',`. @ericsoderberghp Yep, so this brings us back to the doc note I added on top.\nthe Calendar is using Button with `icon` prop, hence it has the `plain={true}` applied automatically (see https://github.com/grommet/grommet/blob/4e309dcd1388662d4e0fe5862b84709749fcaf4f/src/js/components/Button/Button.js#L137). \nThis PR is addressing `plain` to not show padding hence the paddings were removed from this Calendar story (from the Buttons).\nas I mentioned on the PR notes we can discuss whether this functionality is the desired one. IMO I think plain shouldn't have padding, and I'm not sure why we are having that special logic for icon to have an auto plain (I guess its because we don't want the border?), but since this is the current behavior I'm not sure if changing it at this point is the right decision.. `description: 'The size of the text for MaskedInput.'` to be consistent with `maskedInput.extend`. wrong reference to `accordion`. wrong reference to `accordion`. Thanks for renaming.. Can you please remove the double `T`. should also support the color object. missing the object type. Can you please edit this line to `type: 'string | { dark: string, light: string }'`?. I think `borderSize` is a 'string'.\nfrom base.js\n     borderSize: {\n        xsmall: '1px',\n        small: '2px',\n        medium: ${baseSpacing / 6}px, // 4\n        large: ${baseSpacing / 2}px, // 12\n        xlarge: ${baseSpacing}px, // 24\n      },\n. let's remove the extra dot at the end of the line, run `yarn test-update` and this PR will be ready to go.. can you please add a dot at the end of each `description`, it renders much nicely on the docs.. here you can see for example how noticeable is the missing dot.. missing dot.suggestion\n    description: 'The color of the border.',\n. what is the problem with opacity={false}? it works fine on the tests. \nnot allowing `opacity={false}` cross grommet will be a regression to other components that use the opacity logic..suggestion\n    type: 'string | { dark: string, light: string }',\n``. I think it is missing.defaultValue(true)`. We need to communicate that the icon is shown by default . That should work, thanks . ",
    "tomers": "Thanks Alan! That is exactly what I was looking for.\n. I would like to reopen this issue. I am not sure whether this is a Grommet bug, or is it just me having trouble finding the right way to change the footer in the sample-app into a sticky footer.\nI tried Alan's suggestion and it worked initially, but then I created more content in the main box by rendering multiple instances of TodoAppDashboard component, and it didn't go well. I expect to have these component rendered as expected, and then in the bottom to have the footer. Alternatively, I could do with a floating footer with a scrollable area between the header and the floating footer that renders the inner components successfully.\nHowever, what I got is the header and footer properly rendered in their expected location, but the main components being shrinked to accommodate all of them in the box. See screenshot:\n\nSource code:\n```\nclass Main extends Component {\n  render () {\n    return (\n      \n\n\nSample App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              Build your ideas with Grommet!\n            \n\n\n\n    );\n  }\n};\nlet element = document.getElementById('content');\nReactDOM.render(React.createElement(Main), element);\ndocument.body.classList.remove('loading');\n```\nThanks\n. @alansouzati, your suggestions works in Firefox, but does not work in Chrome.\nIs the following code is the change that you suggested?\nclass Main extends Component {\n  render () {\n    return (\n      <App centered={false}>\n        <Box full={true} flex={false}>\n          <Header direction=\"row\" justify=\"between\" large={true}\n            pad={{horizontal: 'medium'}}>\n            <Title>Sample App</Title>\n          </Header>\n          <Box flex={true}>\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n            <TodoAppDashboard />\n          </Box>\n          <Footer primary={true} appCentered={true} direction=\"column\"\n            align=\"center\" pad=\"small\" colorIndex=\"grey-1\">\n            <p>\n              Build your ideas with <a href=\"http://grommet.io\" target=\"_blank\">Grommet</a>!\n            </p>\n          </Footer>\n        </Box>\n      </App>\n    );\n  }\n};\nI also tried the following variation which does not work:\nclass Main extends Component {\n  render () {\n    return (\n      <App centered={false}>\n        <Box full={true}>\n          <Header direction=\"row\" justify=\"between\" large={true}\n            pad={{horizontal: 'medium'}}>\n            <Title>Sample App</Title>\n          </Header>\n          <Box flex={false}>\n            {/* only one component */}\n            <TodoAppDashboard />\n          </Box>\n          <Footer primary={true} appCentered={true} direction=\"column\"\n            align=\"center\" pad=\"small\" colorIndex=\"grey-1\">\n            <p>\n              Build your ideas with <a href=\"http://grommet.io\" target=\"_blank\">Grommet</a>!\n            </p>\n          </Footer>\n        </Box>\n      </App>\n    );\n  }\n};\n. ",
    "dhampik": "I guess when people want to have sticky footer, they usually mean a footer that is stuck at the bottom when there is not much content on the page and pushed down with content when the content is big enough.\nA lot of ways how to implement the sticky footer can be found at CSS-Tricks.\nIn case if anyone looking for a real sticky footer sample for grommet - here it is!\n@alansouzati, maybe you can propose a more elegant solution without using custom css?. ",
    "eniyan": "@alansouzati \nIn the above example: Pressing down arrow replaces the text, Once you reach the last one, further pressing the down arrow key brings the text 'row' \nPlease see google behaviour on chrome.\n. ",
    "reflog": "doesn't work when type=\"submit\". had the same problem here, but resolved it by importing the components and icons correctly, instead of: import {Button} from \"grommet\", write import Button from \"grommet/components/Button\" to reduce the bundle size. Here you go: https://codepen.io/reflog/pen/BRNMGX\nBtw, while preparing the codesample, I've narrowed the problem to the 'scrollable' property of the table. If you remove it - the error disappears.. Here's how to reproduce. Works in Firefox too:\n\n. The correct way to handle it was:\nevent.stopPropagation();\n event.nativeEvent.stopImmediatePropagation();. ",
    "mvanlonden": "Oh wait @reflog that's actually a feature. Now you don't need an onClick to disable a submit button. You can just conditionally set the type. @ericsoderberghp Header's fixed prop works great on desktop but isn't working on mobile \ud83d\ude15 . @shai32 Just created grommet-css to make it a bit easier. @shai32  Oh wow! Didn't released there was a compiled version of the css in grommet (was it always there?). I guess the only advantage is if you'd like to have a separate repo with custom sass styling. . Thank you!. FWIW I just added arrow to move items up or down\n. I have a nested set of checkboxes and if some but not all of the child boxes are checked I'd like to have the parent be indeterminate. Clicking on the parent checkbox would serve as a \"check all\" or \"check none\" for the children. . Agreed. I've moved on to an alternative implementation and am much happier with the results. Thanks!. ",
    "leonp1991": "To avoid this I assume you could install a different version. Or you can copy the source, transpile it, then put it in node_modules/grommet/components (confirmed to work :/).\n. ",
    "probablyup": "@alansouzati the Markdown.js snapshots need to be updated for the test to pass - looks like they were recorded when the configuration was incorrect.\n. ",
    "cdaringe": "hey @alansouzati, thanks for writing back.  indeed, you are correct.  the \"how\" to install and run was clear.  the \"why\" i should use it was is not clear.  the homepage doesn't tell me what it is, nor do i think the \"build something now\" was indicative of the value i get from the tool.\ni'm guessing (hoping?) this is some sort of pattern-lib + component-api tooling that can be used for FE development between UX & engineering teams?\nanyway, hope i didn't come off rude, just sharing my experience\n. hey @alansouzati, thanks for beefing up the page with some info!  i waltzed through the changes and looked at the vimeo channel, but still, I was not clear how to achieve that which I came for originally.\n\nWe are a User Experience framework that aims to bridge the gap between design and development\n\nThis is the key claim that interests me.  Component lib + ux playground.  The docs still do not direct me to instructions on how to achieve/explore this.  Of course I don't expect the docs to completely hold my hand, but some direction would be appreciated!\n. ",
    "zhangtreefish": "I wonder if the commit message ought to be 'Changed Headline to adjust h1 and h2 font sizes when mobile'?\n. ",
    "guilhermerotta": "CodePen: http://codepen.io/anon/pen/ZprgZQ?editors=0011\n. ",
    "davidcalhoun": "Thanks for submitting this issue!  I created a CodePen and verified it's a problem with just TextInput - it seems to work fine on Select.  I'm getting a PR in to fix this soon.  :)\nhttp://codepen.io/franksvalli/pen/bwOzqJ\n\n. Could you double check to make sure that the CSS isn't being loaded after the JS?  The CSS should be in the document <head> before any JS.\nI was able to reproduce the issue in this Codepen by dynamically adding the CSS stylesheet after the React code: http://codepen.io/franksvalli/pen/VKqEzX\nCodepen in Chrome:\n\nCodepen in Firefox:\n\n. For older browsers that don't support passive events, it looks like they interpret the third argument (useCapture) as \"true\" because an object is truthy (e.g. !!{};  // true), so these will be equivalent:\ndocument.addEventListener('wheel', function(){}, {passive: true});\ndocument.addEventListener('wheel', function(){}, true);\nI was worried about always setting useCapture to true, but it looks like for the wheel event, it doesn't seem to matter whether it's set to true or false.  Both the code snippets above work in these browsers (tested by adding a console.log to the function):\n- Firefox 49.0.1 OSX\n- Safari 9.1.3 OSX\n- IE9 Windows 7\n- IE11 Windows 8\n- Chrome 54\nI can take out the feature test for now.  Not sure if passive events will ever be needed in combination with setting useCapture to false, but for now it looks like it's not needed.\n. Sounds good!  I removed FeatureDetects and also simplified the code as discussed above.\nRetested and verified working on the following:\n- Chrome 54 OSX\n- Firefox 49.0.1 OSX\n- IE11 Windows 8\n- Safari 9.1.3 OSX\n. @alansouzati Ok will do!  I tried a git rebase to squash the commits, but it looks like that didn't give me the desired effect.  I'm going to open up a new PR.\nEDIT: guess my mistake was rebasing instead of doing this: git merge --squash fix-onwheel-freezing\n. Opened up PR #1000 to keep the history clean\n. Are you using the Menu component and setting dropAlign to end?  Looks like that's not a supported value - maybe set it to right instead?  http://www.grommet.io/docs/menu\nLet me know if I misunderstood!  Hope this helps.\nEDIT: My bad, looks like it is supported, as this example shows: https://grommet.github.io/docs/menu/examples#2\nWill look into this!\n. Can't seem to reproduce this - I tried in this Codepen: http://codepen.io/franksvalli/pen/kkqKAy?editors=0010.  Could you fork that Codepen and try to make the markup as close as possible to yours?\nTried it in Chrome 54 in Windows 10:\n\n. 1000!\n. Should be all ready now - please have another look!\nJust a heads up - looks like a squash and merge is available from the UI dropdown here, which is convenient: https://github.com/blog/2141-squash-your-commits\n. Thanks for submitting this issue and creating a Codepen to go along with it!\nLooks like it's the IE11 flex bug described here: https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items\nI'll write up a PR with an IE11-specific fix soon.\n. @alansouzati Removed Collapsible and DateTimeDrop.  Should be good to go now.  Thx for having a look!\nA squash and merge can be performed from the UI dropdown below :)\n. I created a Codepen from your example, but can't reproduce the issue: http://codepen.io/franksvalli/pen/mAokgk?editors=0010\nCould you fork that and add in more code to make it more like yours?\nThanks!\n. Thanks for submitting this issue!  Looks like this was an issue for the docs, which is in another repo, so I've created a PR over there.\n. Thanks for filing this issue!  I made this Codepen from your code and it does seem to be a bug: http://codepen.io/franksvalli/pen/YGbVoV?editors=0010\nNote that for some reason data-* attributes are preserved, so that might be a short term workaround you could use.\nI'll look into this a bit later today.\n. Cool, yeah I think role=\"group\" would be better and makes more logical sense for cards.\nI'm not sure about that aria-label text working for all screenreader users though.  When using VoiceOver on OSX with Chrome, VoiceOver says the following: \"press enter to select, group\" and then it gives different instructions on how to enter the group, by pressing ctrl+opt+shift+down key.  When I press enter, nothing seems to happen.\n. @alansouzati Thanks for the feedback!  Please have another look.  For all Cards, I've added role=\"group\" and aria-label=\"Card\" (see my commend about aria-label above).\n. Updated based on feedback from @alansouzati:\nwe need to make that configurable\na11yTitle\ndefault could be Card definitely\nbut we need to allow a11yTitle to be passed\nand can we make role=\u201dgroup\"\nthe default for box?\nthen we dont need to pass role=\u201dgroup\u201d for Card\nNot entirely sure why aria-label=\"Card\" isn't showing up in the test snapshot, but it's definitely working for hpe-digitaltoolkit\n. Ah, good catch - I wasn't looking carefully enough at what was going on there.  Thanks!\n. Sounds good - I remove it and added a comment\n. Removed it and added a note\n. ",
    "ericblade": "As far as I can tell, neither Header nor Footer fixed or float are working correctly. \n. ",
    "MarcoMedrano": "It looks great! I will try it inside my project.\nThanks!\n. Seems this bug is happening again http://codepen.io/grommet/pen/rWWyOV?editors=0010. I would like to have medium icons 36x36 the currrent one looks like small 24x24 I guess xsmall would be 12x12.\nNot sure if you have plans for 36x36 icons but I see the need, 24 is small and 48 too big.. @alansouzati how is it going to be fixed? is there a doc where we can see all final sizes?. Yeah np, I was just wondering myself if we were going to have the 36x36 icons.. Yeah, I updated to grommet 1.3, and I am playing with the new icon sizes. Appreciated man!!. Added pull request :) https://github.com/grommet/grommet/pull/1239. Glad to know it is fixed!\n. :o Right , mm and not. The announceFunc is only called if this is true ! this.props.hasOwnProperty('activeIndex') If that is false the dev will set the state through componentWillReceiveProps, but they cant explicitly call the announceFunc that is why I called the announceFunc once the dev has updated the props by itself (activeIndex={..}), fired by this.props.onActive(index);\nHowever my code can lead to call twice announceFunc, I think the fix will be:\nif (this.props.onActive) {\nthis.props.onActive(index);\nif (this.props.hasOwnProperty('activeIndex'))\n          announceFunc();\n      }. ",
    "mcwagner10": "Thanks for the response.  Here's a sample.  Two issues:\nhttp://codepen.io/mcwagner10/pen/MjNNEa\n- One menu covers up another menu\n- Menu goes out of bounds\n. Feel free to close this.  I submitted a PR: https://github.com/grommet/grommet/pull/1049\n. @jaitaiwan Check out the description and codepen again. The user can't even see the menu links because clicking the drop down moves to the top of the page. The Anchor tags aren't the issue. . ",
    "joachimhb": "Hi Alan,\nthanks for your fast answer.\nCurrently im restructuring an angular app, so rewriting low to mid-level components into react while still having a surrounding angular app because i cant do it with a big bang approach.\nBut anyway, i would still fix this by having an if around the announcer variable, because imo the components should not have any hard crashing dependency to any other component, at least not without any mentioning in the docs :-)\nThanks and regards,\nJoachim\nAm 20.10.2016 6:55 nachm. schrieb Alan Souza notifications@github.com:Thanks for this issue.\nI think I can fix this warning, but any reason why not using a Grommet App component?\nIt is really important for accessibility reasons, if you use Toast without the enclosing App component, users with disabilities will not be able to hear the content that came in a floating container.\nSee this: https://grommet.github.io/docs/announcer\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.\n. Yes, will do so tomorrow.\nAm 25.10.2016 8:59 nachm. schrieb Alan Souza notifications@github.com:makes sense. are you up for a pull request to add that check in ?\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.\n. Thanks :)\nAm 26.10.2016 7:46 nachm. schrieb Alan Souza notifications@github.com:Thanks for your contribution. welcome to our team @joachimhb \n\u2014You are receiving this because you were mentioned.Reply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "ToddBarkalowHPE": "Thank you.  Great option!. If it helps, our Platform GUI is behaving the same way before and after Grommet upgrade to 1.0.1.\n\n\n. ",
    "lucasmullerm": "updating to 1.0.0 I got the same erros plus this one:\nERROR in ./~/remark-parse/lib/defaults.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./block-elements in W:\\atlassocial\\node_modules\\remark-parse\\lib\n @ ./~/remark-parse/lib/defaults.js 19:10-37\n. My own configuration. I was missing a json loader, that's the reason for the 3 first erros. But I still trying to figure this last error, block-elements is also a json file.\n. I got the same 4 errors in grommet-standalone. And after using the json-loader I still got the last error. I use webpack 1.13.2.\n. ERROR in ./~/remark-parse/lib/defaults.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./block-elements in W:\\atlassocial\\node_modules\\remark-parse\\lib\n @ ./~/remark-parse/lib/defaults.js 19:10-37\nthis errorr is fixed if I change the module code from require('./block-elements') to require('./block-elements.json').\nAny ideas why?\n. I am trying now on a linux VM. Do I have to install any extra global module to use the webpack config file in es6?\n. I reproduced it in a Linux VM. Dit not have any issues. No need for a json loader.\n. It looks like mine is not looking for .json on require. It only works when importing the Card component. The original grommet-standalone builds.\n\n. Thanks.\n. ",
    "bnoguchi": "@lucasmullerm In your webpack config, just make sure to add a \".json\" to your resolve extensions:\nresolve: {\n    root: path.resolve('./mydir'),\n    extensions: ['', '.js', '.json'] // <- Just append a '.json' here\n  }\n. Ok. Updated this in a subsequent commit.\n. ",
    "orditeck": "@skurfuerst I'm using grommet with create-react-app. \nWhat is breaking on your side? I'm not using the latest version, kinda worried to upgrade now ;-)\nIn my package.json:\n\"grommet\": \"^0.6.11\",\n\"react-scripts\": \"0.4.1\"\n. @skurfuerst \nnpm install babel-runtime --save should fix your issue \ud83d\ude03  (hint: Module not found: 'babel-runtime'))\n. ",
    "skurfuerst": "ok, I'll try to publish an example, one sec \ud83d\udc4d \n. Hey @orditeck,\nVariant  1: Just require grommet 1.0.1 as-is:\nCode-Example: https://github.com/skurfuerst/grommet-test/tree/master\nThe system breaks with:\n```\nFailed to compile.\nError in ./~/grommet/components/App.js\nModule not found: 'babel-runtime/helpers/extends' in /Users/sebastian/src/grommet-test/node_modules/grommet/components\n```\nSecond try\nCode example: https://github.com/skurfuerst/grommet-test/tree/second-variant\nTry to directly reference the source tree instead of the compiled version over NPM\nSystem breaks with:\n```\nFailed to compile.\nError in ./~/grommet/src/js/components/App.js\nModule parse failed: /Users/sebastian/src/grommet-test/node_modules/grommet/src/js/components/App.js Unexpected token (48:51)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (48:51)\n @ ./src/App.js 20:11-51\n```\nConclusion\nI feel something is wrong / incompatible / ... with the webpack / babel / ... setup. Quite hard to debug though.\nAny hints would be appreciated \ud83d\udc4d \nThanks,\nSebastian\n. @orditeck OK, that really fixes it \ud83d\udc4d  THANKS!\nI don't really understand why this is needed; as from my understanding, actually this package should be part of create-react-app... But well. NPM weirdnesses.\nThanks a lot \u2600\ufe0f \nAll the best,\nSebastian\n. ",
    "shai32": "there is another problem using grommet with create-react-app\nhttps://github.com/facebookincubator/create-react-app/issues/1639\nany idea what to do?\nof course with not using eject. @mvanlonden\nwhy its better then just importing 'grommet/grommet.min.css'?\n. I tested it and I confirm it works. @SuhairZain thanks it works.\nwhats worried me that I didn't notice it in the doc. it should be the first step in integrating Grommet App.\nDo you have a doc link for App Component?. it's even worse in the 1.5.0 version (I even think English is  not needed because I am importing the language dynamically)\n\nso its 78 kb of redundant files. a 30% of the package. @adamroldfield source-map-explorer. now that 2.0.0 alpha is rolling out, can we make this issue active again?\nIt's a simple fix really, just removing the redundant require. is there anything else needed for this pr?. can we get it in?. ?. ?. ?. I added a PR, please review\nhttps://github.com/grommet/grommet/pull/1767. @alansouzati . ?. ?. ?. Any status update on active support?\n. can we open it again?. its happen when wrapping the onChange with .debounce\n.debounce(event => onSearch(event.target.value), 400);. @ericsoderberghp , this is right, I am closing the issue.. I want the entire Anchor to be clickable, if the padding will be with a Box. all the padding space is not part of the Anchor and it will not be part of the link. @ShimiSun nice solution, but it adds an extra div(Box) that we can avoid.\nmy temporary solution is to use styled-components;\nconst AnchorWithPadding =  styled(Anchor)`\n    padding: ${props => `${props.theme.global.edgeSize.medium}`}\n`;\nbut I think that considering that Anchor support margin, it should support padding as well.\n. I didn't wrap it with withRouter, but I didn't have to in react-router v3.3\nIf we need to warp it with withRouter, its not really usable. @oorestisime  wrapping it with withRouter, doesn't fix the problem.. @oorestisime of course, here is the codesandbox:\nhttps://codesandbox.io/s/930z3kjx8y. \n. Thanks!. thanks, I added a translation to this. ",
    "kctpradeep": "Thanks for the reply. When not \"inline\", I was expecting \"multiple\" to behave like this:\nhttp://instructure-react.github.io/react-tokeninput/\nIs there any other Input component that allows multiple values (something like above)? \nGrommet is awesome by the way. Many thanks and congrats on hitting 1.0.\n. ",
    "bastanle": "Great - I am guessing this will be out for Grommet 1.0.2? Is there an ETA for that? \nThanks!\n. ",
    "ibiBgOR": "@karatechops I'm not sure if this is intended, because it's completetly irrelevant to tell the button to render as plain or not. The relevant code snippet:\nplain || Children.count(children) > 0 || (icon && ! label)\nIf plain is explicitly told to be false it will still get rendered as plain if some element is child of the button. That just seems wrong.\n. I think you guys are right. Deprecating the plain property sounds pretty logical. If the Button component takes all the style work from me I will not moan. :D\nThank you for your help\n. ",
    "salztorte": "thanks. \nYour solutioin works, but i the Layer for my Sidemenu.\n. Thank you for the quick help.\n. ",
    "rualatngua": "Confirmed! We have the same issue. Please fix it!\n. ",
    "sorin-davidoi": "Workaround: https://github.com/grommet/grommet/issues/1018#issuecomment-256805982\n. I want to localize the string using the react-intl library (e.g. pass <FormattedMessage {...messages.tabname} />).\nI know that I can wrap my component in injectIntl and then pass the string generated by this.props.intl.formattMessage(messages.tabname), but this makes it harder to test (have to mock IntlProvider). Would like to keep using react-intl the idiomatic way, thus the need to pass a node.. ",
    "RyanFDev": "@karatechops thanks for the advice! After looking at your HPE theme example I was able to get things working properly! className is now being passed down properly as well and likely always was. My SASS just wasn't recognizing it using imports in the component itself.\nI've since extracted everything to the SCSS folder and it appears to be working as intended. \nAlso thanks for the advice on BEM. I've used a similar convention on my own besides the naming itself. Will try to more strictly adhere to it.\n. ",
    "kadinwu": "@jaitaiwan \nThanks for your feedback, yes, the root cause its these components have getChildContext/childContextTypes function make i cannot pass context from parent component. I did search just found Toast/Layer/Drop/Menu these four components have this function, so could you fix it?\nThanks a lot.\n. @jaitaiwan any update for this issue, thanks. update grommet to version 1.0.1, then works fine. I was using 0.6.12.. ",
    "iammirzao": "@alansouzati if you're opening my CodePen it's because of this in CSS: .grommetux-box--full {\n  height: 100% !important;\n}\nSo check now without this code: http://codepen.io/mirzao/pen/pNyXwM. ",
    "skylinezum": "Just found its in stable build, but it can be very frustrating using something in the docs that isn't actually in the release.\nhttps://grommet.github.io/docs/chart/examples#15. ",
    "azmtbr": "I'm getting the same exact behavior when using the Select component. \nI was not able to recreate the issue in a codepen.\nNot sure if this would have anything to do with this issue, but I'm also having problems using the inline and multiple props with the Select component. . ",
    "Thuranel": "Seems like this is still an issue\nhttps://codepen.io/Thuranel/pen/vJOqxa\nAlso, clicking on a disabled anchor with a href still redirect to the url. Path seems to be correctly disabled though.. Seems like we can close the issue if the fix solves the bug.\nWhat I really don't understand is why in the case of Grommet the issue only happen when a Button is disabled. It feels like if it doesn't work when the Button is disabled, it shouldn't work either when the button is not disabled.. It seems like the last update to Grommet cause this issue. Here's the commit that I believe causes the issue: https://github.com/grommet/grommet/commit/6299947ac8b7fa8c619226fc33035480cb6fdbfa\nToast takes history, intl, etc. as props. The latest commit tried to pass every single props given to Toast as a props to the Toast contents. Because div can't have a props of history, intl, etc. the warning is thrown.\nI believe the commit was made to be able to style Toast? I don't know. Anyway, reverting the latest commit should fix the issue. I don't really want to touch it because I am unsure of what that change was trying to accomplish.. Hi!\nThanks for posting the issue. I played a little bit with Button.js and your problem seem to come from\n[`${CLASS_ROOT}--disabled`]:\n          !onClick &&\n          !adjustedHref &&\n          ['reset', 'submit'].indexOf(type) === -1\nThe reason why the Button is that way is to make sure we don't break the behavior of a reset or submit button if there is no onClick (See: #1266). Indeed, a <Button type=\"submit\"> should be valid and not disabled.\nIMO, having a disabled form button is not always the best idea ( See Disabled submit button on form? When could a disabled button be used? ). Also, I've always been told on an accessibility point of view, it is not the best solution either though I can't find a source right now.\nIf you absolutely need to have a disabled submit button, you could always do a small hack. See:\nconst handler = undefined;\nreturn (\n    <Form onSubmit={handler}>\n        <Box style={{display: 'none'}}>\n            <Button type=\"submit\"/>\n        </Box>\n        <Button onClick={handler}/>\n    </Form>\n)\nIn this hack, you have an invisible button that make sure that if you press Enter while in your form, the handler get called by your form. Meanwhile you have a Button that calls the same handler and this button can actually be disabled. This should work, though I am unsure if this is actually a good solution because it might break accessibility.\nUltimately, the best solution should be to have proper support for a disabled prop on <Button/>s or that if the onSubmit handler for a Form is undefined, the submit button should be disabled too.\nBut also ultimately, you shouldn't want to use a disable submit button ;). Oh yea that seems way more simple. Going to update it tomorrow. Thanks for the input.. Just wanted to say that I have the same issue in my project. It would be nice to find out what causes this.. ",
    "ravindra1103": "I can still see a different behavior in between Chrome and Internet Explorer 11 \nExamlpe: If i open http://ferret.grommet.io/dashboard this on Chrome user icon shows in the bottom left corner which is what we wanted but on IE it is not the case. Is ferret demo link using the latest grommet version. Hello @alansouzati  Thanks a lot for the response\nI have created the codepen requested below. I am using the latest Grommet 1.1.0 version in the codepen settings.\nhttps://cdnjs.cloudflare.com/ajax/libs/grommet/1.1.0/grommet.min.css\nhttps://cdnjs.cloudflare.com/ajax/libs/grommet/1.1.0/grommet.min.js\nPlease change to fullview and see the difference in behavior on IE and Chrome\nhttp://codepen.io/ravindra1103/pen/WRrKmX. ",
    "okada": "The menu's dropdown is absolute positioned with a z-index:20. When I say component underneath I mean the component rendered at the same position but lower z-index.. This have been solved on 1.10. Hello zacksinclair\nThanks for caring to reply,\nActually the super fresh Grommet 1.3.3 implemented support for React Router\n4 (backward compatible).\nBest regards\nOn Wed, Mar 22, 2017 at 2:36 PM, zacksinclair notifications@github.com\nwrote:\n\nHappened to come across this post and thought I'd mention - Grommet's\nAnchor component is incompatible with react router 4 for more reasons than\njust the onclick / path issue you described.\nThe anchor component looks for router.isActive, which in react router 4\nhas been moved off of the router object and onto NavLink. I imagine there\nare other compatibility issues, too, but that's effectively breaking.\nA workaround is roughly:\n`\nimport { NavLink } from 'react-router-dom'\n<NavLink\nclassName='grommetux-anchor'\nactiveClassName=\"grommetux-anchor--active\"\nto='/'\nLink example\n`\nNote grommet's current package.json: \"react-router\": \"2 - 3\"\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/issues/1258#issuecomment-288478802,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAZFu4JhaeF5lN2dO_snaHd592UmZzpks5roVwegaJpZM4MlIwa\n.\n. \n",
    "lichao-HP": "I agree with you that the caller do the validation. However, let's take the 'Select' component for example, \n            \nThis is not the problem to validate the 'value' of the 'Select'. Because we do not input the 'value', we only search and then select one in the drop-down list. But when we search, we input something has no limitation and could not be validated as far as I know.\n. @ericsoderberghp  Would you be so kind to varify if this is a issue again?\nselect validate.docx\n. ",
    "ishwark7": "Thank you :). Thanks Eric for quick resolution.. I still see the issue existing in the codepen I provided. We need to avoid the horizontal scroll bar when we select the last point in the range.. This is not fixed, can you please reopen this one?. iOS version we are using is 8.4\nThanks.. Hi,\nMaybe, you can try to change the layout of the codepen as seen in the screenshots below.\nI am able to reproduce this on Windows:\n1. Chrome : 57.0.2987.98 (64-bit)  The issue was present earlier, it still exists in latest update too.\n\n\nFirefox: 52.0 (32-bit) The issue was present earlier, it still exists in latest update too.\n\n\nThanks,\nIshwar. ",
    "moiz-emx": "Also, I see this:\nwarning grommet > gulp > vinyl-fs > glob-stream > minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nwarning grommet > gulp > vinyl-fs > glob-watcher > gaze > globule > minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\nwarning grommet > gulp > vinyl-fs > glob-watcher > gaze > globule > glob > graceful-fs@1.2.3: graceful-fs v3.0.0 and before will fail on node releases >= v7.0. Please update to graceful-fs@^4.0.0 as soon as possible. Use 'npm ls graceful-fs' to find it in the tree.. ",
    "GeethanjaliRao": "@alansouzati \nDo you want me to implement it the same way as in meter?. @alansouzati \nI believe I have modified the code to have decimal places in the total of Legend Series as you expected it to be. Can you please review my changes. ",
    "mdbishop": "I've also got a possibly related issue myself ( @ericsoderberghp pls advise if you'd prefer this as a new issue. ).  In Chrome, several elements appear to never have their\ncss\n.grommetux-background-color-index--pending\nstyle replaced.  On occasion, a reload or changing code (running in dev mode also) will get all previously invisible items to appear.  For me, the issue is not deterministic and I've not been able to reproduce in a dead simple project.\nWhile the screen overall is low-medium in nesting/complexity, a typical area in question would be:\n<box>\n   <section>\n       <Card>\n         heading={some text}\n         description={<Paragraph />} />\n   </section>\n</box>\nSo, nothing terribly involved.  In any event, not sure if these two are related issues but wanted to start here before opening a new issue.\nThanks much!\n. ",
    "phazor": "I've noticed this issue as well. It is consistent in our app but like the others I'm unable to make a codepen that reproduces it.\nI'm curious - what purpose does the background-color-index--pending class serve?. ",
    "jcuenod": "You lose the responsiveness of <Sidebar /> in this approach.. ",
    "moizhb": ":+1:. ",
    "soju-cao": "Expecting. ",
    "msuiche": "@tracybarmore A process viewer ! https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx What would be a better representation than a TreeView to visualize processes (with then parent process id, children process id etc.). I would love a visual alternative !. Changing \nif (reverse) {\n      contentNode = (\n        <div>\n          <span className={`${CLASS_ROOT}__value`}>\n            {value}\n          </span>\n          {unitsSpan}\n          {icon}\n        </div>\n      );\n    } else {\n      contentNode = (\n        <div>\n          {icon}\n          <span className={`${CLASS_ROOT}__value`}>\n            {value}\n          </span>\n          {unitsSpan}\n        </div>\n      );\n    }\nto \nif (reverse) {\n      contentNode = (\n        <div>\n          <span className={`${CLASS_ROOT}__value`}>\n            {parseFloat(value.toFixed(2))}\n          </span>\n          {unitsSpan}\n          {icon}\n        </div>\n      );\n    } else {\n      contentNode = (\n        <div>\n          {icon}\n          <span className={`${CLASS_ROOT}__value`}>\n            {parseFloat(value.toFixed(2))}\n          </span>\n          {unitsSpan}\n        </div>\n      );\n    }\nwould work as we can't call getMaxDecimalDigits() directly.. Just sent this pull request: https://github.com/grommet/grommet/pull/1749/files. <3 @L0ZZI . Even if I pass the values such as:\nconst storageData = [\n    {\n      value: parseFloat(storageUsed.size.toFixed(2)),\n      units: storageUsed.units,\n      label: 'In use', colorIndex: 'graph-2'},\n    {\n      value: parseFloat(storageAvailable.size.toFixed(2)),\n      units: storageAvailable.units,\n      label: 'Available', colorIndex: 'graph-1'}\n  ];\nThe decimal error will still happen because the sum isn't formatted.\n\n1.2+0.6\n<-1.7999999999999998\n1.25+0.68\n<-1.9300000000000002. We only have control on the input parameters of the AnnotedMeter, not the sum of the series value.\na = 1.25\n_1.25_\nb = 0.68\n_0.68_\nparseFloat(a.toFixed(2)) + parseFloat(b.toFixed(2)) \n_1.9300000000000002_. \n\nAgreed, @ericsoderberghp see the above screenshot.. ",
    "markflorisson": "Oops, you're right, sorry about that!. ",
    "JakeDluhy": "Hmmm upon further investigation this may be a bug with jsdom (or they intentionally left it out for some reason). I added window.HTMLElement.prototype.scrollIntoView = function() {}; into my testHelper.js file and it works. I'm creating an issue there (https://github.com/tmpvar/jsdom/issues/1695). Feel free to close this out.. I have a component wrapping three Select components to pick a birth date (month/day/year). Call it FormLabel. Any form errors get rendered for the birth date selection collectively on FormLabel (as opposed to individually for each select). I would like it so that if there is a form error on the FormLabel then any changes on the Select components gets picked up and it removes the error.. ",
    "avadhutkhavare": "Hi Eric,\nEven though we remove Tiles and keep only tables it is also not working.\nFind updated code pen for the same...\nhttp://codepen.io/avadhutk/pen/BQebrj?editors=0010\nThanks,\nAvadhut Khavare\n. Hi Eric,\nCould you please suggest the workaround for this, we need this onMore to be implemented on layer and we cannot run away with the table component. As I said we tried adding tiles onMore which did not work, I kept only table and there is no tiles component used but then also it is not working.\nThanks,\nAvadhut Khavare. ",
    "ezzatron": "Updated to include Button component.. Thanks for checking out the PR, and all your hard work with Grommet. Cheers! \ud83c\udf7b . @john-codeworx FYI. Thanks for the fix \u2764\ufe0f. I'm still getting this error when using Grommet 1.4, but it seems to be caused by an upstream package, namely react-intl.\nSee yahoo/react-intl#918 for the current status. It seems the react-intl package needs maintainers.. I haven't seen the issue in a while. Safe to close AFAIC.. Thanks @karatechops, and no worries about 1.x.. The \"fix\" for this issue is causing some confusing errors when you use a <Select inline> without an id:\nWarning: Failed prop type: The prop `id` is marked as required in `RadioButton`, but its value is `undefined`.\n    in RadioButton (created by Select)\n    in Select (created by PrimarySelect)\n    in PrimarySelect (created by ...\nPerhaps there should be a better error message at least? Something like The id prop is required when inline=true.? The current docs for <Select> don't even mention id at all.. Thanks for the fix!. This is quite possibly related to iconic/SVGInjector#16, but I'm not sure if you guys are using SVGInjector.. Bumping because this issue is not stale.. ",
    "arabold": "Nice! Didn't even know this library yet. Thank you.. @RyanCCollins , I'm interested in this as well. Could you update the link?. Currently I'm using react-dropzone which can be integrated pretty nicely. . I'd appreciate a pre-bundled CSS file as well. Using SASS complicates our deployment unnecessarily as we have to treat grommet different to other node_module components. We use server-side rendering on AWS Lambda (Node 4.3) together with hosting static files on S3 (using the beautiful serverless framework). Due to the nature of this setup we cannot do any on-the-fly processing of ES6 or SASS (as it's done in sooooo many examples all over the web) but have to transpill everything before deployment. The use of SASS in 3rd party components makes that a little bit more complex than it should be IMO. \nHere's the relevant excerpt from our Webpack config:\njs\n// ...\nexternals: [\n  // We exclude all node modules here as we typically want\n  // to include them unaltered for server-side rendering to\n  // minimize possible side-effects when bundling 3rd party code\n  NodeExternals({\n    // grommet however relies of .scss which needs processing before it\n    // can be deployed. Therefore we explicitly include it into our package\n    // so it can be processed.\n    whitelist: [ /^grommet/ ]\n  })\n],\nmodule: {\n  loaders: [\n    {\n      test: /\\.(scss|css)$/,\n      include : [ path.resolve(__dirname, 'node_modules/grommet') ],\n      loader: ExtractTextPlugin.extract(\n        'style',\n        'css!sass?outputStyle=compressed'\n      )\n    }\n  ]\n},\nsassLoader: {\n  data: '@import \"theme/_config.scss\";',\n  includePaths: [\n    path.resolve(__dirname, './src'),\n    path.resolve(__dirname, './node_modules/grommet/node_modules')\n  ]\n}\n// ...\nAnd then of course the include in the index page as already mentioned:\njs\n// import styles\nimport 'grommet/scss/vanilla/index.scss';\nAm I the only one thinking this is overly complex to achieve?. Is that true, @RyanCCollins ? I was under the impression as soon as I do an import of a grommet module I have a hard dependency on using the SASS files. And just to reiterate: I don't have a big issue with it as I can process them perfectly fine, it just didn't feel as smooth as I would have wanted it.. I'm gonna close this. I believe this was a broken node_modules folder that caused this for me. Sorry for the trouble.. Hi @alansouzati , thanks for the update. While the import statement import Grommet from 'grommet' works, it's still not possible to use either Grommet.App or Icons.Base.Menu following the examples above.\nIn other words, the following code just prints undefined for both Grommet and Icons.Base:\n```\nimport Grommet from 'grommet';\nconsole.log(\"Grommet =\", Grommet.App);\nimport { Icons } from 'grommet';\nconsole.log(\"Icons =\", Icons.Base);\n``\n. Thanks for the update, @alansouzati . IndeedGrommet.App` works as expected now.\nHowever, there's still a problem with Icons: The class names have changed!\nIn the past (1.2.x) I could do something like this (note the Icons.Base):\njs\nimport { Icons }  from 'grommet';\n//...\nrender() {\n  return <Icons.Base.Menu />;\n}\nSince 1.3.x this doesn't work anymore and results in an error:\n\nReact.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined\n\nInstead of referencing Icons.Base.Menu I have to reference Icons.Base.MenuIcon now (note the \"Icon\" at the end).\n. Uhmm... not sure how to put this, but no, it doesn't work \ud83d\ude2d \nWhile Grommer.App and Icons.Base.* works fine now (thanks!), v1.3.3 breaks Layers and other components such as Split. This is new! \nHere's an error I get when using Layer (The Login component is my own one using the Layer for layouting):\njsx\n<Layer align='center' flush={ true }>\n  <Box direction='column' focusable={ false } appCentered={ false }\n       full={ false } justify='center' size='medium'\n       pad={{ horizontal: 'medium', vertical: 'medium', between: 'medium' }}>\n    <Heading align='center'>Sign In</Heading>\n    { /* ... */ }\n  </Box>\n</Layer>\nWarning: Unknown props `align`, `flush` on <svg> tag. Remove these props from the element. For details, see https://fb.me/react-unknown-prop\n    in svg (created by Layer)\n    in Layer (created by Login)\n    in Login (created by Connect(Login))\n    in Connect(Login) (created by RouterContext)\n    in div (created by App)\n    in App (created by App)\n    in App (created by Connect(App))\n    in Connect(App) (created by RouterContext)\n    in RouterContext (created by Router)\n    in Router\n    in Provider\nIn the browser only a single icon is rendered - It's the Layer icon instead of the Layer component:\n\nI have cleaned up my node_modules just to be sure, rolled back to my original 1.2.1 to double check, etc. This is new in 1.3.3 and didn't happen in 1.3.2. To verify this is a bug in 1.3.3, I've taken a closer look at how I load the component:\nIf I load Layer using my current implementation like this, it fails with the error above:\njs\nimport { Layer } from 'grommet';\nHowever, if I load it explicitly from path, it works fine:\njs\nimport Layer from 'grommet/components/Layer';\nAnd no, I'm not using the Layer (or Split) icon anywhere in my code. The reasons seems that by changing the icon names from LayerIcon back to Layer, this also affected how icons are loaded in the main module namespace. I don't speak gulp, so I haven't found the root cause yet, but in the distributed index.js, you'll see the problem in line 644 onwards:\n```js\nvar _icons = require('./components/icons');\nObject.keys(_icons).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _icons[key];\n    }\n  });\n});\n```\nThat should read ... Object.defineProperty(exports, key + \"Icon\", { ..., I guess. Otherwise the already loaded Layer and the Split components are replaced with their respective icons, which is wrong.\n. This week I'm traveling in GMT+1 timezone, so I'll give it a try first thing tomorrow morning. Sorry for keep being a pain in the ... I'm happy to tell you that this works as expected now \ud83d\udc4d \nThanks for taking care of all the issues. I will rework our code to use the Icon postfix in future.. It's not a big deal to use <textarea /> but I'd like to better understand the reasoning behind this. Wouldn't this be a perfectly logical component to have? It was the first thing I was missing and looking when I started using Grommet for the first time. It confused me and still is... I'd be happy to provide a simple wrapper in a PR if that would help, but I fail to see why some elements such as \\ or \\ are available in Grommet despite being just a simple wrapper around their HTML counterparts, while \\ for example is not. \ud83d\ude15 \n. I didn't realize that the Select (https://grommet.github.io/docs/select) does already have exactly what I need. Ignore what I wrote above.. This might be addressed by this Pull Request already: https://github.com/grommet/grommet/pull/1412 . ",
    "mossjm": "It seems that the issue only appears when the viewport is narrow (mobile).\nAlso this issue appears to apply across the board to Header elements (not specific to ones within Split or Table). ",
    "bmperrea": "Alan - awesome. Thanks so much. This will do for me.\nHow hard would it be to produce a warning when someone tries to do this? [Or add something to the docs] -- it took me a little while to pin down which elements weren't working together.\nOn Tue, Jan 10, 2017 at 9:58 AM Alan Souza notifications@github.com wrote:\n\nClosed #1128 https://github.com/grommet/grommet/issues/1128.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/issues/1128#event-917913594, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AFB7A0G49WGZRnIIngPxun_3r8HF6Ipeks5rQ8bLgaJpZM4Lfsff\n.\n. \n",
    "narayananramu": "I added <App></App> and it got fixed. Sorry it was my mistake :). ",
    "hgezim": "The link posted above ( http://grommet.io/hpe/docs/menu/examples/?responsive=true&inline=true&direction=row&primary=true&label=false&icon=false&size=medium&i-anchors=true ), still shows a huge amount of space between items in Firefox 58.0.2.\n\n. ",
    "allcentury": "The website is open source here: https://github.com/grommet/grommet-docs. ",
    "dustingraves": "@alansouzati I can make the sidebar just fine, I want to have the responsive header like on the docs site. If you shrink it down or go on mobile the header of the sidebar \"basically\" appears as the new page header with a link to popout the sidebar. The only way I can actually think of doing this in a react way is getting the media screen size and adding/removing component each time the screen size matches the trigger.\n\n\n. Thanks. ",
    "ziflex": "Hey guys, I'm sorry for the late response.\nUnfortunately, I do not have an access to the app to test this fix.. ",
    "quarthex": "I added a test case that fails: https://travis-ci.org/quarthex/grommet/builds/194268140#L484. In the test I provided, I used enzyme to mount the component in a fake DOM.\nI used the full DOM rendering API in order to propagate the event through the node tree.\nIt is the tool recommended by React team : https://facebook.github.io/react/docs/test-utils.html.\nI agree with your solution. I think the onTouchStart and onTouchMove props could also be completely discarded (set to null) from the resulting component in some cases.. Reason of closing this issue: Article component does not exist any more.. ",
    "bammmmmmmmm": "I agree with @dakt . ",
    "adamroldfield": "The mirror element created when scrollable = true is cloning the header, but it doesn't copy the click events. The real header with the click events assigned is hidden behind it and the thead is set to hidden.. This will fix it. Replace the for loop in build mirror with:\nfor (let i = 0; i < cells.length; i++) {\n          const cell = cells[i];\n          const cloneCell = cell.cloneNode(true);\n          if (cell.children.length)    \n            cloneCell.onclick = () => cell.children[0].click();\n          mirrorRow.appendChild(cloneCell);\n        }. Anchor causes this issue as well, because of the reference to react-desc. The mirror is rebuilding. \nThis will fix it:\nif (mirrorCells.length !== cells.length)\n        return;\nInsert here:\n```\n_alignMirror () {\n    if (this.mirrorRef) {\n      const tableElement = this.tableRef;\n      const cells = tableElement.querySelectorAll('thead tr th');\n      const mirrorElement = this.mirrorRef;\n      const mirrorCells = mirrorElement.querySelectorAll('thead tr th');\n  if (mirrorCells.length !== cells.length)\n    return;\n\n```. Yes, @nomadus , this is what the multiselect looks like:\n\n. When I created this issue I had intended to submit my changes to the project, but I've made some extensive changes to multiple controls now, and I don't have them in github. I'm attaching my Select.js which is, IIRC, the only file you need for these features.\nSelect.zip\nUsage:\n<Select  multiple={{ enabled: true, useCheckBoxes: true, customDisplayText: this._displayTextFunction }}\n                        ...\n                    />\n. See the docs for Table, there's a selectable and onSelect property there that will do what you're looking for.. @shai32 what tool produces that diagram? Thanks!. ",
    "mauleyzaola": "Next time I'll have a coffee before reading lol. Thanks @alansouzati . ",
    "toelapiut": "I had the same problem and I solved by running npm start and it destroyed and built  a new dist which allowed me to log in. ",
    "ArtemZag": "@alansouzati , I have a very specific UI. The page is not scrollable. And at the bottom I need some selector.\n\n. @alansouzati , thanks for your answer. Probably you are right and we just need to change the UI concept. I will discuss it with my customer. If he doesn't agree than I will probably create my own combobox based on your code and styles.. ",
    "pho3nixf1re": "I too am interested in this feature. I have several columns in my dataset but only 2 need to be sortable. The other data is impractical to sort due to the way it is related across services. Therefore I need a way to exclude some of these columns from sorting in the header.. Perhaps something as simple as this:\njsx\n<TableHeader\n  labels={['Name', { label: 'Note', sortable: false }]}\n/>\nWhere the default is to allow sorting but if there is an object of the shape { label, sortable } it would then pick up the sortable boolean. This has the benefit of maintaining backwards compatibility.\nI am willing to work on a PR for this if the maintainers are interested in allowing it.. Is there any chance a PR to support this would be accepted?. This seems to be a pretty important bug fix. What is the status here?. ",
    "mturley": "My pleasure!  Loving grommet so far.. I'd like to add my +1 to this issue, currently the multi-select functionality of Select is a little crippled by the fact that it just displays \"3 values\" and you can't see which values without clicking and scrolling.  At a minimum, it would be nice if we could pass a custom function to render our own summary string instead of the \"3 values\".\nTo meet my needs for now, I'm using my own <Menu> with a <Select inline> inside it, so I can use the Menu's label property for this summary.  However this is presenting issues, so I may end up just directly using a <Search> and some <CheckBox>es inside my <Menu>, but I feel like I'm implementing my own <Select> unnecessarily.\nFor context, I'm trying to create a basic facets use case as part of a filter control.. For reference, I considered using something like this instead and just styling it to look like Grommet: http://jedwatson.github.io/react-select/.. @dgennetten, it's only an issue on mobile browsers.  I am able to reproduce it on Safari and Chrome on an iPhone, and in Chrome on and Android device.\n@tracybarmore, thanks!. @zacksinclair, for the sake of completeness I'll reference my fix for your issue here as well: https://github.com/grommet/grommet/pull/1384. +1, this is annoying especially because if the login is taking a while, the form gives no feedback at all to the user.. I went ahead and fixed this using @alansouzati's vote.  https://github.com/grommet/grommet/pull/1384. That makes sense.  I considered leaving it out and having this be a breaking change, but I figured it was better to be less disruptive.  Thanks for merging it!. ",
    "Catx7": "any solution?. @ericsoderberghp  I tried ,but nothing good happends.. I will be available in the next grommet release?. You are right problem is regarding Firefox .\nclose.. ``import Search from \"grommet/components/Search\";\nclass HelloWorldApp extends React.Component {\nrender () {\n    let listOfSuggestions= ['element1' , 'element2, 'elemet3' ,.... 'element n'] //long list of suggestions\n let searchProps = {\n  fill: true,\n  inline: true,\n  dropAlign: {\"top\": \"bottom\", \"left\": \"left\"},\n  onDOMChange: (e) => changeSugegestionsList(e),\n  suggestions: listOfSuggestions.toJSON(),\n};\nreturn (\n  <App>\n      <Box flex='grow'>\n            <Box margin='none' pad='none'>\n              <Search\n                {...searchProps}\n              />\n            </Box>\n    </Box>\n\n  </App>\n);\n\n}\n};\nvar element = document.getElementById('content');\nReactDOM.render(, element);`\n```\nSo if the suggestion list is too long when I try to navigate down using arrow keys through list ,at some point it does not automatically scroll down.. ",
    "alanpilloud": "Hello,\nNo problem for the delay.\nI totally understand your scnarios, here's mine : \nI have a list in a table of ~3000 elements and you can filter each column.\nThe most used filters fields are directly visible on this interface while other fields can be found on an advanced search which is a Layer.\nSo, this Layer holds filters fields that are filtering the list live. So in this case, it makes it quicker to click on the overlay. It's just easier not having to manipulate the mouse with precision, it's about lazyness :)\nBut this usage may not be optimal, do you have a better idea ?\nAnyway, thanks for your hard work, I'm really glad I've found Grommet for my projects !\nHave a nice day. ",
    "bsoutham": "As another example, we have a Layer becomes visible with links to help and documentation.  However, if they decide they don't want to use the help links - they should be able to just click back to the 75% of the screen that is still visible and close the \"help\" layer.  This is one example, where our current usage would benefit from having the layer close by clicking outside of it, rather than forcing them to click the close X\n. ",
    "jzillmann": "Missing that too!. Tried react-onclickout. At first it seems to work fine, however i now realized that if i have a selection input on my layer, selecting an item will close the layer... Not what i want ;). ",
    "ramyhardan": "I use https://github.com/boblauer/react-onclickout for this:\nimport * as ClickOut from \"react-onclickout\";\n...\n<Layer>\n  <ClickOut onClickOut={this.closeHandler}>\n    <MyFancyLayerContent/>\n  </ClickOut>\n</Layer>. You could do something hacky like if (e.srcElement.className.includes(\"grommetux-select__option\")) return in your handler every time or use a HOF for this or modify react-onclickout's __windowListener accordingly. Doesn't get prettier, though. ;). ",
    "twelve17": "@alansouzati I completely see the use cases where clicking outside the \"X\" would lead to unwanted behavior.  That being said, I also see use cases where it is helpful.  Would it be possible to have the feature be a prop, as the OP suggested?\nMany thanks.. ",
    "breakds": "I am seeing the same issue in 1.3.2. Is this fix included in it? Thanks!. ",
    "gmeans": "@ericsoderberghp I came here due to the same reason. It doesn't appear to work on the docs examples either.\nhttps://grommet.github.io/docs/search/examples?placeHolder=true&suggestions=true\n. ",
    "Enaitz": "thanks, closing. ",
    "dioklecijan": "Here is a problem demonstration: http://codepen.io/gimei/pen/ryVYEz. Hi @dgennetten,\n\nPoint your browser to https://grommet.github.io/docs/check-box/examples\nClick on the text \"Sample label\" => state is not toggled (note that mouse pointer is an arrow)\nMove the mouse pointer right of the text, (mouse pointer is changed from arrow to the hand) \nClick ==> state is changed\n\nI tried this with Google Chrome (Version 57.0.2987.133 (64-bit)) and Firefox (53.0 (64-bit)), both on MacOS.\nI marked \"state triggering\" area in an attached picture:\n\n. ",
    "martinezguillaume": "Any workaround for this issue ? I tried to implement it on my project but I've the same rendering...\nEDIT: I closed chrome and restarted it, then it worked in my project, don't really know what happened there, but still broken in docs. ",
    "ashik-f-ahmed": "Thanks @ericsoderberghp, so infinite works only with autoplay? \nWe would like to stop swiping in the Carousel page from first to last and last to first.\nHere is a sample: https://codepen.io/manjitp46/pen/jByemR?editors=1010. ",
    "manjitpandey": "we have a fix for it when infinite is false. it will not go to to last to first slide and vice-versa  . Here is the code fix for that to be done in Carousel.js file \n`    var children = this.props.children;\n      var activeIndex = this.state.activeIndex;\n  var numSlides = children.length;\n  if(this.props.infinite){\n  this.setState({\n    activeIndex: (activeIndex + 1) % numSlides\n  });\n  }else if(activeIndex < children.length-1){\n    this.setState({\n    activeIndex: (activeIndex + 1) % numSlides\n  });\n  }``\n\n/////\nthe above should in _slidenext function\n/////////////\n  var children = this.props.children;\n var activeIndex = this.state.activeIndex;\nif(this.props.infinite){\n      this.setState({\n        activeIndex: (activeIndex + numSlides - 1) % numSlides\n      });\n      }else if(activeIndex > 0){\n        this.setState({\n        activeIndex: (activeIndex + numSlides - 1) % numSlides\n      });\n      }\n//this should  in_slideprev function`. ",
    "eoliphan": "+1 for this, was just about to add this myself.  As people have pointed out, there's probably no one good solution (e.g. tag cloud is great, up to a point), but perhaps a 'selectDisplay' or something option will allow this to be handled more flexibly.\n```\nselectDisplay: default;\n...\nselectDisplay: tagCloud;\n. This would be great.   Also 'architecturally', I think that moving a lot of this to the Table (and TableCell/Row/etc) would be useful as well.  Such that we can have stuff likejavascript\n\n```\nAnd have DataTable inherit/compose the visuals/callbacks and focus mainly on data integration (content as array, sorting, paging?, etc.).  That way DataTable is more of a out of the box 80/20 shortcut, but you can easily 'drop down' to the base Table if you have some specific needs that DataTable doesn't line up with.\nFor me as a 'consumer', SUI-React's approach is pretty well, approachable: https://react.semantic-ui.com/collections/table\nSN:  This also raises something that I'd wondered about before.  Should the Grommet theme contain named color keys for something like invert/highlight/etc.? That say the proposed hover/select behavior here would use? . ",
    "monte-hayward": "I'm still getting this from v1.3.1 and v1.3.0. Is this the same issue?\nUncaught TypeError: this._unlisten is not a function\n    at Anchor.componentWillUnmount (Anchor.js:88)\n    at Object.ReactErrorUtils.invokeGuardedCallback (ReactErrorUtils.js:70)\n    at ReactCompositeComponentWrapper.unmountComponent (ReactCompositeComponent.js:405)\n    at Object.unmountComponent (ReactReconciler.js:79)\n    at Object.unmountChildren (ReactChildReconciler.js:146)\n    at ReactDOMComponent.unmountChildren (ReactMultiChild.js:373)\n    at ReactDOMComponent.unmountComponent (ReactDOMComponent.js:980)\n    at Object.unmountComponent (ReactReconciler.js:79)\n    at ReactCompositeComponentWrapper.unmountComponent (ReactCompositeComponent.js:418)\n    at Object.unmountComponent (ReactReconciler.js:79)\nI verified version and can see the new _attachUnlisten on disk and in-browser.. Not having luck on codepen. I started with Grommet globals.\nhttps://codepen.io/grommet/pen/pbxYby\nThough I added \nReact\nReact DOM and\nhttps://cdnjs.cloudflare.com/ajax/libs/grommet/1.3.3/grommet.min.js\nI get \nUncaught ReferenceError: Grommet is not defined\n    at pen.js:3\n(anonymous) @ pen.js:3\n. issue only occurs when a path is entered into an address bar and submitted, not when we arrive there via router.push. \neg.\nrouter has '/', '/about' and '/pagewithissue'\nthese are reflected in component NavBar\n\nload localhost:1337/\n\nclick About, PageWithIssue, Home\nno errors\n\n\nload localhost:1337/pagewithissue\nerrors occur. here, I paused on the error and hovered \"this\" to see its properties:\n\n\n\nv1.3.3 throws error 3 times, for each of the 3 routes mentioned above.\nUncaught TypeError: this._unlisten is not a function\n    at Anchor.componentWillUnmount (Anchor.js:92)\n    at Object.ReactErrorUtils.invokeGuardedCallback (ReactErrorUtils.js:70)\n    at ReactCompositeComponentWrapper.unmountComponent (ReactCompositeComponent.js:405)\n    at Object.unmountComponent (ReactReconciler.js:79)\n    at Object.unmountChildren (ReactChildReconciler.js:146)\n    at ReactDOMComponent.unmountChildren (ReactMultiChild.js:373)\n    at ReactDOMComponent.unmountComponent (ReactDOMComponent.js:980)\n    at Object.unmountComponent (ReactReconciler.js:79)\n    at ReactCompositeComponentWrapper.unmountComponent (ReactCompositeComponent.js:418)\n    at Object.unmountComponent (ReactReconciler.js:79)\n. I isolated the component in \"pagewithissue\".\nHere is the smallest component that I can get to produce the error:\n```\nimport React, { PropTypes } from 'react';\nimport Box from 'grommet/components/Box';\nimport TextInput from 'grommet/components/TextInput';\nclass QuestionInput extends React.Component { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    const { questionText } = this.props;\n    return (\n      \n\n\n    );\n  }\n}\nQuestionInput.propTypes = {\n  questionText: PropTypes.string,\n};\nexport default QuestionInput;\n```\nRemoving the TextInput and usage cause the errors to cease, and the page loads normally.\n```\nimport React, { PropTypes } from 'react';\nimport Box from 'grommet/components/Box';\n// import TextInput from 'grommet/components/TextInput';\nclass QuestionInput extends React.Component { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    const { questionText } = this.props;\n    return (\n      \nHello, {questionText}\n\n    );\n  }\n}\nQuestionInput.propTypes = {\n  questionText: PropTypes.string,\n};\n```\nFwiw, TextInput throws the following:\nTypeError: Cannot read property 'label' of null\nTextInput._renderLabel\nwebpack:///./~/grommet/components/TextInput.js?:326:26\nTextInput.render\nwebpack:///./~/grommet/components/TextInput.js?:382:21\neval\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:796:21\nmeasureLifeCyclePerf\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:75:12\nReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:795:25\nReactCompositeComponentWrapper._renderValidatedComponent\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:822:32\nReactCompositeComponentWrapper.performInitialMount\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:362:30\nReactCompositeComponentWrapper.mountComponent\nwebpack:///./~/react-dom/lib/ReactCompositeComponent.js?:258:21\nObject.mountComponent\nwebpack:///./~/react-dom/lib/ReactReconciler.js?:46:35\nReactDOMComponent.mountChildren\nwebpack:///./~/react-dom/lib/ReactMultiChild.js?:238:44\nNot sure why this manifests with Anchor. I can report this as a new issue, if you wish.\n. ",
    "hdehal": "Are you testing across multiple browsers? I can get scrollbars in Firefox on OS X. \nAnd in other browsers (e.g. Safari) I can get the charts to move around on mouseover (not in a good way).\n\n. ",
    "fibasile": "Looks fixed now, closing.. ",
    "dunnock": "Also I noticed that this issue might break React's flow, containing component's componentDidMount does not get called.. Just FYI there is workaround: when opening Layer do not display Menu. ",
    "psales": "I have the same error message when loading a data into a Table component.\nI think the issue is that the headerIndex variable is not reset to 0 when looping through the next row of the table.\nIn this line:\nhttps://github.com/grommet/grommet/blob/v1.3.1/src/js/components/Table.js#L331 @alansouzati . Hi,\nyou could take a look into the file-loader:\nhttps://github.com/webpack-contrib/file-loader\nyou can specify the destination folder to where the file will be generated as well as the name (instead of an md5 hash by default)\nsomething like this:\n{ test: /\\.(woff|woff2)$/, loader: 'url-loader?prefix=font/&limit=5000&name=font/[name].[ext]' }. ",
    "h-arlt": "Awesome! Thanks.. ",
    "cheuk3": "sorry about that\nim using grommet 1.3.1\nnode v6.9.5\nnpm 3.10.10\neverything work fine except Card component is failed to import. Thanks!. I'm using Phoenix framework with brunch. I've already tried deleting node_modules.\n```\nimport React, { PropTypes } from 'react';\nimport Tile from 'grommet/components/Tile';\nimport Card from 'grommet/components/Card';\nconst ProductTile = ({ item }) => {\n  return (\n    \n\n\n  )\n}\nexport default ProductTile;\n```\nhere is the console error if i try to import Card component\n21 Mar 11:48:52 - warn: main file for module 'character-reference-invalid' does not exist (node_modules\\character-reference-invalid\\index.json.js), assuming index.js\n21 Mar 11:48:52 - warn: main file for module 'character-entities-legacy' does not exist (node_modules\\character-entities-legacy\\index.json.js), assuming index.js\n21 Mar 11:48:52 - warn: main file for module 'character-entities' does not exist (node_modules\\character-entities\\index.json.js), assuming index.js. im not using webpack 2. im using brunch which is phoenix default bundler.\ni have tried to install json-brunch but i got the same error :(. yes. it has a config file like webpack does but what do i need to config?. this?\n```\nexports.config = {\n  // See http://brunch.io/#documentation for docs.\n  files: {\n    javascripts: {\n      joinTo: \"js/app.js\"\n  // To use a separate vendor.js bundle, specify two files path\n  // http://brunch.io/docs/config#-files-\n  // joinTo: {\n  //  \"js/app.js\": /^(web\\/static\\/js)/,\n  //  \"js/vendor.js\": /^(web\\/static\\/vendor)|(deps)/\n  // }\n  //\n  // To change the order of concatenation of files, explicitly mention here\n  // order: {\n  //   before: [\n  //     \"web/static/vendor/js/jquery-2.1.1.js\",\n  //     \"web/static/vendor/js/bootstrap.min.js\"\n  //   ]\n  // }\n},\nstylesheets: {\n  joinTo: \"css/app.css\",\n  order: {\n    after: [\"web/static/css/app.css\"] // concat app.css last\n  }\n},\ntemplates: {\n  joinTo: \"js/app.js\"\n}\n\n},\nconventions: {\n    // This option sets where we should place non-css and non-js assets in.\n    // By default, we set this to \"/web/static/assets\". Files in this directory\n    // will be copied to paths.public, which is \"priv/static\" by default.\n    assets: /^(web\\/static\\/assets)/\n  },\n// Phoenix paths configuration\n  paths: {\n    // Dependencies and current project directories to watch\n    watched: [\n      \"web/static\",\n      \"test/static\"\n    ],\n// Where to compile files to\npublic: \"priv/static\"\n\n},\n// Configure your plugins\n  plugins: {\n    babel: {\n      presets: ['es2015', 'react', 'stage-2', 'stage-0'],\n      // plugins: ['transform-runtime'],\n      // Do not use ES6 compiler in vendor code\n      ignore: [/web\\/static\\/vendor/]\n    },\n    sass: {\n      mode: 'native',\n      options: {\n        includePaths: [\"node_modules\"]\n      }\n    }\n  },\nmodules: {\n    autoRequire: {\n      \"js/app.js\": [\"web/static/js/app\"]\n    }\n  },\nnpm: {\n    enabled: true\n  }\n}\n```;. after install json-brunch, i can just require json file in js file. if i remove it, it fails\nother component work fine. just Card component is failed\nwhat json file does the Card component needs?. this is from the source map \n```\n  var require = function(name, loaderPath) {\n    if (loaderPath == null) loaderPath = '/';\n    var path = expandAlias(name);\nif (has.call(cache, path)) return cache[path].exports;\nif (has.call(modules, path)) return initModule(path, modules[path]);\n\nthrow new Error(\"Cannot find module '\" + name + \"' from '\" + loaderPath + \"'\");\n\n};\n```. Cannot find module 'path' from 'vfile/index.js'\n```\nrequire.register(\"unified/index.js\", function(exports, require, module) {\n  require = __makeRelativeRequire(require, {\"node-extend\":\"extend\"}, \"unified\");\n  (function() {\n    /*\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module unified\n * @fileoverview Pluggable text processing interface.\n /\n'use strict';\n/ Dependencies. /\nvar events = require('events');\nvar has = require('has');\nvar once = require('once');\nvar extend = require('extend');\nvar bail = require('bail');\nvar vfile = require('vfile');\nvar trough = require('trough');\nvar buffer = require('is-buffer');\nvar string = require('x-is-string');\n```. I think the issue is not related to grommet but i wonder why does it occur only in Card component :( . yes it does exist. i found out that the path module is unable to import in vfile and the replace-ext module.\ni tried to comment out both of the path import\nand the card component works\nnot sure why i cannot import the path module ;/. np alan, i will try to figure it out. thanks for your help :D. ",
    "fernandoabolafio": "Hi, Im current working with Grommet and Im facing the reported issue. Please, if someone knows a work around for it I would be grateful. . ",
    "aldofunes": "Hi, I found a workaround. It is nasty, but works. The bug is basically with the flex-shrink property; so, I disabled it.\ncss\ndiv.grommetux-box {\n  flex-shrink: 0;\n}\nThat's it. I did quick tests in major browsers and found that:\nWorks\n\nChrome\nOpera\n\nDoesn't work\n\nSafari\nFirefox. I found a workaround. \n\nWhat I did was to provide an onClick function to update the state directly to expanded\nLike this:\n```javascript\n { this.menuNode = node; }}\n  onClick={() => this.menuNode.setState({ status: 'expanded' })}\n\n{/ Anchor links here /}\n\n```\n\nI have not found any drawbacks with this, but have not done any serious unit testing.\nHope it helps.\nBy the way, the Component must be a class, otherwise this won't be defined.. ",
    "zacksinclair": "Happened to come across this post and thought I'd mention - Grommet's Anchor component is incompatible with react router 4 for more reasons than just the onclick / path issue you described. \nThe anchor component looks for router.isActive, which in react router 4 has been moved off of the router object and onto NavLink. I imagine there are other compatibility issues, too, but that's effectively breaking.\nA workaround is roughly:\n\nimport { NavLink } from \"react-router-dom\"\n   <NavLink\n       className=\"grommetux-anchor\"\n       activeClassName=\"grommetux-anchor--active\"\n       to=\"/\"\n\nNote grommet's current package.json:  \"react-router\": \"2 - 3\". @okada gotcha, I might just have to swap from the release branch to 1.3.3, thanks for pointing it out\n@alansouzati thank you for this library, it really is excellent.  while we're on a thread... i noticed the docs for Box don't mention that it has a margin prop that effectively matches pad, just fyi\n. yep will do. tested and confirmed your changes re. path as object; good catch and thanks for the quick merge. @alansouzati @raphi011 this commit introduced an issue on the LoginForm component - #1295 - tagging here so you guys can provide an opinion on the potential fixes i proposed in the issue report. . Note that I think this was the right place to make this fix, but not 100% sure... curious what you guys think. ",
    "MarcelGeo": "Hello\nhttp://codepen.io/MarcelGeo/pen/YZvORz\nGive window to responsive mode in chrome and you will see blue rectangle over checkbox.. ",
    "SuhairZain": "This is because the LoginForm sets a width of 480px by default. But you can easily work around this by either setting max-width: 100% or width: 100vw on the outer div. Or, if you can, you can use a <Box/> with full={true} as the outer component.. The reason is that in DateTimeDrop, the format specifier for AM/PM is just the character 'a' (small case). I've created another key, for the same character 'a', but upper case ('A') to accept meridians in upper case as well.. I can confirm that this issue exists. It's because the rendered label depends on a for to handle the clicks on it. A workaround would be to simply set an id to the checkbox.\njsx\n<CheckBox\n  label=\"Check Me\"\n  id=\"check_me\" />. The reason is this line in the current 1.3.4 version which checks if the label is a string. This is needed because an <input/> component is used to display the selected option and we can only pass a string to it. You can thus display the label by using a simple string instead of a React element.\nHowever, this has been changed in #1306 which uses the value if it exists and uses the label only as a fallback.\n@aandr Any ideas on how to fix this? I too am of the opinion that it should be the option's label that should be displayed, not the value.. I'm trying to spin up a script to do this. I'll update here on the progress shortly.. Seems like there's a codemod already available for this. I somehow missed that. Trying it now. \ud83d\ude04 . I noticed that too. I thought that since the migration was done by the React Community script, prop-types were being migrated from react-desc as well.\nIf it isn't, I think we should raise an issue in the JsCodeShift repo. Could be a bug.. I have re-ordered the imports using a Regex and avoided the icons/base folder in the refactoring. Only 93 files are changed in this commit. \ud83d\ude04 . Have made another PR with a clean branch touching only just the 96 component files and 2 other files(package.json and yarn.lock). Kindly check if it's okay.. Hi @reflog,\nThanks for the report. Could you provide a minimal reproducible code sample on Codepen or such? You can use this as a starting point: https://codepen.io/pen?template=gaEGPY&editors=0010. Hi @reflog,\nI tried the codepen but it seems to be working fine for me on my Linux dev machine with Firefox 52 and Chrome 54. I then created a project locally with the code on codepen, it worked fine. I also used browserling.com to test on a Windows 7 machine with Chrome 55. It went fine without any issues.\nWhat I tried to do were these, let me know if you got the error while doing something else:\n1. Load the codepen.\n2. Open the in-codepen console as well as the browser console.\n3. Drag the codepen result view size adjusters, no output in either consoles.\n4. Resize the browser window, no output in either consoles.\nWere these the steps you followed?. @reflog,\nNice screencap. \ud83d\ude04 \nThe issue happens when going back from the mobile view to desktop, but seems to happen at random. Got to find the source. :). Hi @shai32,\nI tried the steps you mentioned and I believe I have found the issue.\nAre you using the Grommet App component as your root component? The Grommet styles are applied to the components only if they have an App Component as their parent. This is because the 'Work Sans' font is only applied to the class grommet and this is applied only for the App component. Check the screenshot for more details\n\nThe minimal code that can get you the required styles is:\njsx\n<App>\n  <Label>Hello?</Label>\n</App>. Hey @shai32,\nThe documentation is available at https://grommet.github.io/docs/app/. In some way, it says that it should be the root component:\n\nThis is the primary Grommet container outer. Typically it will either contain a Split or an Article.. Hi @mvanlonden,\nJust wondering, what would be the use case for an indeterminate CheckBox? Checkboxes are usually boolean.. This sounds like a valid use case.\n\n@alansouzati What's your take on this?. The PropTypes for SVGIcon includes only small, medium, large, x-large and huge even though the classes for x-small are generated. I've added x-small to the PropTypes list.. I'm sorry. Was caught up at work. I made the commit but missed making it into a PR. I sincerely apologize. Will make one right away.. Hey Marcelo. I keep getting stuck at work that I haven't been able to make public commits for over a month. If it's possible for you to make the PR, I'd totally appreciate it. It'd be a great help. :). Hi @ibhag,\nWould it be possible to provide a minimal example to reproduce the issue, such as on codepen?. Yes. It'd be quite easy given that React import is done in a consistent manner in Grommet. \nI'm travelling right now. Will spin up a script in some time and push.. ",
    "viggyfresh": "Awesome, thanks!. ",
    "Slumber86": "Found the cause: \ni have a vendor bundle in my webpack config. I used 'grommet' as entry point, so grommet/index.js was imported. I think is not worth to splitt the app and the vendor part. @reflog yeah, this is the way to do, but also keep attention on webpack entry points cofig. I've created a pull request to solve the issue, please verify if it's good or not... Yeah this make sense, we use onActive exactly in this way to sync the carousel position with our redux store.\nThe problem is exactly that when we use this to set the state saved in redux to the carousel before first render, unwanted animation is performed (as is showed in your codepen)\nMy PR just changed the class until first state change to avoid starting animation.\nHope now there is better context for this\nOn 6 Jun 2017, 19:45 +0200, Alan Souza notifications@github.com, wrote:\n\nThanks for your contribution and for going the extra mile to send the pull request.\nI'm sorry I've just realized the Carousel docs is missing the description for activeIndex and onActive. I'm going to add documentation for it today.\nThat said, let me explain what is going on here. activeIndex should be used together with onActive. Basically if you pass activeIndex we will just assume that you want to control the index change. I've created a codepen that illustrates the correct usage of activeIndex.\nhttps://codepen.io/alansouzati/pen/gRpmzJ?&editors=0010\nProbably you are looking for something like initialIndex that will load the carousel in a given index. This property is not directly supported, but you can achieve that by the combination of both activeIndex and onActive.\nHope it makes sense.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks \ud83d\ude4f . @alansouzati I'm in, the only problem can be the timezone, I'm in Europe, You are in SF, right?. I've modified the PR to comply with your coding standards.. You're welcome \ud83d\udc4d . Hi Alan,\nthanks for the answer. I think that the problem is not well uderstood. \nThe base problem is not to use a different icon chosen beetween the grommet icon set, but our customer asks for custom design of some standard components (specifically the select and accordion arrows) that don't match exactly with grommet default design, so we want to use custom icon components.\nThe icons are not skinnable via CSS, so we have two choices: fork the framework to replace svg paths or use some dirty tricks with CSS to hide the default icons and replace them with ours.\nObiously fixing this without using props is a breaking change, and can be done in many ways:\n\n\nExporting the icons as peerDependancy\nPlacing the paths in CSS\n..suggestions?\n\nIf you have a better solution to solve this problem, please let me know.\n. ",
    "ericsoderberg": "I agree with the basic concept. I think we should find a property name other than hover because hover sounds like a state more than a capability. I'm wondering if we should make it another type, such as type=\"custom\", since adding visual styling seems to go against the concept of plain.. Line 49 looks good. However, I think this line is supposed to always pass this.state.dropActive, as this._activation handles both activation and deactivation and needs the undefined value to remove the added keyboard listeners.\n. ",
    "mandx": "This gist shows what I'm using right now (ignore the changes on the import lines). Is far for complete, it works for my use case now, but here's the main idea: Render the label (which could be a React element) inside a span which has some styling to match the \"input\" box, and then use one hidden input[type=checkbox] to represent the selected value (or several, if props.multiple=true).\nAnother thing to consider is what text value should be used to search if the label is a React element.. ",
    "jmfadeley": "Any forward motion on this? . Never mind. I discovered that by providing an array of indexes to the active prop, I can open and close them. \n. ",
    "aandr": "Apologies for the silence on my end. We no longer use Grommet in our\nproject and I won't be able to dedicate the time for a follow-up PR.\nOn Thu, Jun 22, 2017 at 5:37 AM, James Fadeley notifications@github.com\nwrote:\n\nAny forward motion on this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/issues/1297#issuecomment-310259272,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEKpKvMiUIsGmO_dsijEu7EkQgU_u1Jks5sGdNlgaJpZM4M4Txi\n.\n. Agreed, but this is about the \"value\" of the equivalent output. If you have\na Bar, submitting\nthe form should result in foo=123, not foo=Bar. The pull request was meant\nto replicate the HTML form input behavior.\n\nOn Tue, May 9, 2017 at 2:44 PM, Ryan Collins notifications@github.com\nwrote:\n\n@RyanCCollins commented on this pull request.\nThis is causing backwards compatibility issues in the brand-central\nproject because we are using the label property. I think this should\nprobably be option.label || option.value instead of option.value ||\noption.label to give the user the opportunity to pass in a label.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/pull/1306#pullrequestreview-37163915,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEKpNhvE8U58hQmGx8OJPtmJfai-Qjnks5r4N42gaJpZM4M76jt\n.\n. Thank you for your feedback, Alex. I understand where you are coming from.\n\nAs with any other anti-pattern, sometimes, in specific circumstances, it\nmakes sense to render a DOM form with React, which is what brought me to\nthis issue.\nIn my opinion, if  and all the other form fields map to named DOM\ns, which they do, they should behave the DOM way. Otherwise, mapping\nto named s should be removed.\nRegarding the rendered label, perhaps renderValue() is not the correct function to use to generate the label, as it should, complying with its name, return the selected value, not the selected label. I'd be happy to create a new PR to fix this, if you think it's the right call.\nOn Wed, May 10, 2017 at 9:07 AM, Alex Mejias notifications@github.com\nwrote:\n\nThis issue that this PR presents is the rendered copy within the Select\ncomponent is the object's value not the label. With React we keep track of\nour form inputs within component or app state and not on the DOM element\nitself, form elements should be controlled within React. Your codepen is\nusing DOM values which should be considered an anti-pattern in React.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/pull/1306#issuecomment-300531977, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAEKpLJHIWAR-Metml4M5TqdLEhkEgwYks5r4eDQgaJpZM4M76jt\n.\n. \n",
    "mrboomer": "@alansouzati \nUsing your method works, but then it doesn't append the appropriate classes to that particular option. In my case, I am allowing multiple options to be selected, and therefore need those classes to display the option as selected.\nMy issue currently only exists when only one item is selected, since I am doing something similar to your example, and applying a displayValue only when one item is selected.. ",
    "XuluWarrior": "Current behaviour\n\nDesired stacked behaviour\n\n. @dgennetten No.  In this case I have two stats.  One is a subset of the other.  I want to stack them on one bar as this seems both intuitive and uses less space.  The side-by-side behaviour may make sense if you have independent values but that is not what I am trying to present.. @dgennetten In my scenario, the number of stats does not affect the width of the bar.  In my example pictures the red bar is wider because it is highlighted due to mouseover.  Before mouseover the blue and the red lines are the same width.. @dgennetten Valid point.  I am actually using the meter as part of the annotated meter and so would be able to see both values even if they were equal.\nWithout annotation, perhaps on mouseover, one stat expands, showing the other one on top at normal width.  Making it clear that both stats are being displayed but have the same length.. I was also missing badges.  The only way I could see to do something similar was to use the Button component.\nI decided that this wouldn't be suitable and changed my UI design instead.. I'm not sure I understand the argument that a component can be too simple to add to core.\nI thought the focus of Grommet was components that were consistent in both design and behaviour.  If there is a \"need\" for Badges then developers will each have to play about with components and CSS to achieve this consistency.\nOf course you could argue that there is no need for Badges or at least the need is marginal.  In which case it wouldn't be desirable to add them to core.  But I don't feel whether the component is \"simple\" or not should affect this decision.\nI can't talk for the whole Grommet user base but other UI frameworks [1, 2] provide Badges so it would seem that there is a demand for them.\nIt may sound like I'm demanding that you add Badges.  But don't worry, my life will carry on quite happily if you choose to put your effort elsewhere :). Also Badges have there own semantics that is made more obvious in Material UI.  And so they are potentially more interesting than they look at first glance.. That does make more sense.  Thanks. :). In principle I am happy to contribute but I didn't really get very far working out the intended semantics for \"size\" and \"strong\".  I can see that they have corresponding css to change the font size and weight.\nThis seemed a bit counter-intuitive to me as I expected size to affect the size of the field.  Which is what I was looking for (I was interested in creating a narrow TextField as it only needs to take a four digit number) .  But as it didn't do this I looked for other ways to do what I wanted and stopped looking through the FormField code/css.. I meant to create a pull request into my fork of master.  My mistake.. That's a possibility but I am unclear as to what path objects represent (compared to path strings).\nHow are they used elsewhere?. I (accidentally) created a proof on concept PR #1562 for my own use but @alansouzati suggested an alternative.  I was waiting for more feedback before I revisited this issue.\nI can reopen my PR if it is of any use.. This is still an issue as the \"fix\" changed uses of \"explode\" to \"expanded\" but PropTypes still expects \"expand\".  Resulting in a PropTypes warning.. I don't have access to a computer at the moment and probably won't for a while.\nI am not going to try and write code on my phone but the code snippet I included above pasted into any example would demonstrate the issue. (Well you'd have to add a child element to the child menu to see the menu being displayed inline) \nPlease note that this isn't a bug report. The behaviour is as currently designed. The code deliberately overrides the inline property of the child menu to \"expanded\". This used to be \"exploded\" but was fixed for https://github.com/grommet/grommet/issues/1574\n(As a side note the tests that @alansouzati made to fix #1574 would demonstrate the behaviour I am referring to) \nI raised this issue to discuss what the reasoning behind overriding the developer's intentions were. And whether there was scope for change to allow developers to set inline to be false.. ",
    "m4rcelofs": "Just figured out that Layers.js clones its children and injects the width/height pops required for proper svg building, so making it work is simply a matter of forwarding those props:\nimport { Line } from 'grommet/components/chart/Chart';\nclass LineWrapper extends Component {\n  render() {\n    // in reality this would be a redux container fetching\n    // all measurements from the state\n    return (<Line values={[70, 0, 20, 100, 60]} {...this.props} />);\n  }\n}. Seems to still be missing in master/1.4.0. ping, should I open a PR for that?. ",
    "MichaelDeBoey": "react-intl v2.3.0 is released \ud83d\ude42. ",
    "oakmad": "Nevermind, this is a doc issue. If you have closer set to true make sure you also have onClose defined properly.. ",
    "bwheeler96": "This issue is still present in the docs http://grommet.io/docs/layer\nI had no idea why the closer wasn't working, although this does sorta make sense. ",
    "MichaelHuy": "Hello, are there some ways to show it from a component loading of react?. @ShimiSun How to use it (loading component) on index.html file?\nFrom here https://github.com/grommet/grommet/issues/1317#issue-223553467, Loading Icon is shown from index.html file. ",
    "oorestisime": "i had a quick look at the code. it seems to do this there is a need of a new property and a new svg icon. i guess like the checked svg it should be in the theme so user can override.\nI d like to tackle this if i got this right.. Hello,\ni d like to give it a go unless @junjchen is already at it. right i didnt understand this at the beginning! i dont use the v1 so am sorry i won't give it a go. I am not sure it is grommet job to make the educated guess on the breakpoint to use. OTOH may i suggest to add the ability for the user to set the breakpoint ? Doing so will be up to the user to guess the breakpoint and just pass it to the context.. Well actually i thought it was natural that UIs didn't mess with that. dont know why but i had a quick look and you are right! Sorry for the quick conclusions . i d'like to give this a go! seems interesting. . i don't have a project with SSR to test it but shouldn't be hard to create one, i guess. thanks!. So after some digging and talking i undestood that i need to make the educated guess in the Grommet component https://github.com/grommet/grommet/blob/master/src/js/components/Grommet/Grommet.js#L116 in order to pass the guess down to the Responsive provider.\nMy idea was to let user pass a the request or UA directly in the props. Maybe there is a better way to do it?. Another thing to consider here, the mobile detect library helps finding out if the ua is a mobile or a tablet or.. \nthe problem is that we don't really know the width of the device with it. getting the breakpoint from that information would then not be entirely accurate. should ti be like a default width for mobile, tablet and desktop devices?. Forgot to add this in the commit. but should be closed.. Can you open an issue for that? there is currently no way to do this but it seems to a valid use case.. hello i was having a look here today to understand better the theme process. if i get this right, to do this the base theme should support a font-family for each level here https://github.com/grommet/grommet/blob/master/src/js/themes/base.js#L478-L500 and then modify StyledHeading to take them into account? and fallback to global theme heading if the values are not configured?. Sorry forgot to close this from commit. but i think it is done. i might be missing something here, but there is already a prettier pre-commit, It was added recently. so this issue might be outdated. Hey,\ni'd like to give this a go. i am not really familiar with the codebase but it is something i need so i'd love to contribute back to grommet.. So i was looking to do this and i am wondering if using <Anchor as=\"span\" primary={props.primary}>{props.children}</Anchor> would work for you.\nRationale:\nRendering the Anchor is looking as the following:\n```\n<StyledAnchor\n        {...rest}\n        ref={forwardRef}\n        aria-label={a11yTitle}\n        colorProp={color}\n        disabled={disabled}\n        hasIcon={!!icon}\n\n...\n```\n\nStyledAnchor is a styled component and using the as polymorphic property normally you can modify the DOM directly https://www.styled-components.com/docs/api#as-polymorphic-prop\nsince grommet forwards rest it should work. \nI unit-tested this and have the following tree (without css classes)\n``\nexports[renders tag 1] =\n<div\n  className=\"c0\"\n\n<span\n    className=\"c1\"\n    href=\"#\"\n    onBlur={[Function]}\n    onFocus={[Function]}\nTest\n\n\n\n`;\n```\n\nwhich seems to respond to your issue. . @alansouzati if you still want i could add a tag property to the Anchor component (if this would be more user friendly etc). wow lol sorry. i dont know why i added all this to button instead of Anchor. i am closing and reopening correct one later. Should there be a warning when somebody uses the deprecated tag property? I am not sure how you handle deprecations so please let me know :)\nAnd do you prefer a PR that covers all components or separate ones?. Oh on my machine tests were ok when i commited. i ll try to reproduce.\nYes heading did not have a tag property.. Heh its due to my other PR just being merged. i ll fix this!. I rebased with master. it should be ok now. Done and rebased with master. I updated PR with the comments. It is starting to look better, i think. Unit tests i am not entirely happy i had to hardcode a few user-agents, but couldn't find a better solution. i am not even sure if we need to include more user agents as well. once again open to suggestions, and thanks for review. yeah back at the time i didn't want to wrap another component with a context just to wait for a change. with hooks this is much easier and cleaner to do i agree it is probably not needed. hey i think this was incorectly closed. it added the anchor component in the overrides but user is still not able to override components. sorry i wasnt clear in my PR. anyway this is covered in #2579 now so no need to open again i guess.. I ve been playing around a bit with this. I am not sure if this will meet what you need but my idea is to add a prop onRowClick on DataTable which will get called when the  onClick event of StyledDataTableRow is fired. The function will receive the event and the datum clicked. \nThis will basically respond to half of what you need. I am not sure how to highlight the area and whether this should be temporary (like you click and you get an animation for 1 second or so). Maybe datatables should support something like checkboxes to control which rows or groups are selected? . this is covered in #2708 \nshould we close this in favor of the other that covers more details (both design and implementation ones?). the tag vs as part is already at the consolidation stage. in case you found out a component that supports tag but not as shout and i could handle it as well!. The issue is: https://github.com/grommet/grommet/issues/2487\nThere is no warning when a user uses tag right now. But there is a Note in the documentation https://github.com/grommet/grommet/blob/master/src/js/components/Box/doc.js#L240-L242\nThere should be the same Note in the other components, unless i missed some.\nCan't speak for the other props, i just know about the tag and as since i worked recently  on them.. Renamed to dropHeight. i also removed the property from the destructure in select since it wasn't used after. (we pass this.props to the container). yeah i thought about adding unit-tests. i ll need to figure out how to snapshot once the select container is opened. (maybe this is already implemented in the tests haven't verified yet). @ericsoderberghp i added a few unit tests. hope they are what you were expecting!. I ve recently used with https://github.com/react-dropzone/react-dropzone and it worked great. would the component use an external library for this or actually implement all the dropzone capabilities?. hm this would be tricky to solve inside react-desc. i wonder if there is another way to indicate functions since the problem is multiple times definition of args. Yeah the thing is that typescript definitions are automatically generated using https://github.com/grommet/react-desc so modifying the file by hand won't do it.\nIf you are interested in contributing to solve this the change needs to happen in this file https://github.com/grommet/react-desc/blob/master/src/descToTypescript.js which is responsible for consuming descriptions and turning them into typescript defnitions.\nHope this helps.. hey, i am just a happy contributor to grommet :) this is more of a question to the maintainers cc @alansouzati @ericsoderberghp @ShimiSun . @ShimiSun the default value slipped through somehow! nice catch! i believe it is ok now!. So this will be kind of a learning experience for me but i am willing to give this a go in another branch to see how it behaves.  i ll just modify the responsive context and the components that are using it in order to have something functional and a base for further testing!. So some heads up about my adventure here :D\nMy initial intention was to get cypress to test the storybook in order to avoid double logic in component examples. Its getting somewhere but for the moment my screenshots are not accurate (which is probably due to the components being in an iframe). here's an example:\n\nI will try to make this work. However if i can't i thought of also exporting the story components so that i can easily import them in cypress. Any thoughts here?. So i manage to take accurate screenshots. i run the tests on the public storybook for now. Here are some info:\n\nmagic is in https://github.com/oorestisime/grommet/tree/cypress-testing for now i haven't submitted a PR but i can if you think it can facilitate discussion\nin cypress/screenshots there are 3 sets of folder:\nnew are the images produced by the test run\nbase are the \"correct\" images\nin diff there are the images produced by blink-diff\n\nFor showing results i have changed the one of the new images to not be correct. if you run yarn visual-regression diff images will be deleted and the differ tool will try to identify regressions. Since the circular meter is wrong, it will produce an error and create the a diff image  as here the following\n\nIf you run cypress run then you set of images will be produced in cypress/screenshots/new which are going to be correct this time. so if you run again visual regression then you shouldn't get any errors\nIf you feel this could be included in grommet then i will continue working on this. here's a rough idea of what's left to do:\n\n\n[ ] run on local storybook and not distant\n\n\n[ ] incorporate everything in a single test run which runs storybook, run cypress to generate new screenshots and then the diff tool and fail if there is a regression\n\n\n[ ] add an update command that runs cypress run and c/p the new images into the base folder.\n\n\n[ ] add more tests with realistic goals . The diff tool takes 2 seconds for 2 images.\nOTOH it takes 22 seconds to run cypress and produce screenshots, from which it seems only 9 seconds are for actual testing and producing screenshots. The rest is for cypress startup.\n\n\nSo yes i don't feel this could run on the pre-commit hook. . So small update here, i pushed into my branch to make cypress run on local storybook instance.\nSo when running  yarn e2e it will build and launch a storybook, then it will launch cypress and perform the screenshots and then run the visual differ.\nFor the two meter screenshots the whole process takes 42 seconds on my pc. Next steps i guess is adding lots of cypress screenshots and report back here.. Hello again,\nI've moved tests to circleci in order to be able to download artifacts (diff images) when builds fail. \nI have a workflow that includes jest tests, eslint and e2e tests that takes 4 minutes to run. I am thinking it might not be that much to have it directly in a PR instead of having daily independent builds. What do you think? \nNotes: \n\nPricing for circleci is free for 1 concurrent job and 1000 runtime minutes per month. that equals to 200-250 builds per month which is like 5-8 builds per day. Then it gets to 50$ per month for 2 concurrent jobs and unlimited minutes per month. I don't know if they offer any packages for open source projects\nhere how it looks for commits https://github.com/oorestisime/grommet/commits/cypress-testing (which should be something similar for PRs)\nhaven't looked at all at the release stage that exists in travis but i guess should be fairly easy to do. wow thanks i didn't know about storyshots.\n\nI basically replicated what you describe using cypress in my branch. Only plus i see for cypress right now is that if it can even cross-browser testing.\nUsing the storyshot API i think it can be way simpler than what i did and now that i know about jest-image-snapshot i can get rid of the diffTool.\nIMHO i think that even 10 minutes of CI is acceptable, i rarely see PRs needing to get merged in a smaller window but this is up to the grommet team. i agree that user needs to be able to override on its own the default components #2522 for the moment only p a are set. are you sure it is not merging? i added a single override of a pre tag in a storybook and p and a rendered correctly. unless i didn't really understand what you mean imho this part works.. damn sorry i did not understand that you meant touching the options and not components. so the component should destructure options as well and deep merge all of them together right? i ll update my pr. yeap i think spreading them is the best solution as well.. The animation disable has been merged. are there any other actionable items here? Should the layer support different kind of animations like the Box? which is looking something along the following\nconst ANIMATION_TYPE = PropTypes.oneOf([\n  'fadeIn',\n  'fadeOut',\n  'jiggle',\n  'pulse',\n  'slideUp',\n  'slideDown',\n  'slideLeft',\n  'slideRight',\n  'zoomIn',\n  'zoomOut',\n]);\nconst ANIMATION_SHAPE = PropTypes.shape({\n  type: ANIMATION_TYPE,\n  delay: PropTypes.number,\n  duration: PropTypes.number,\n  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']),\n}); \nimho it doesn't make much sense for the layer component but .... hello,\nare you using a custom theme? did you maybe forget to include colors in the theme or merge your modifications with the base theme?\ngenerally it is a bit difficult to debug here, a codesandbox or a link to a repo illustrating the problem could certainly help. Hey,\ni ve just launched storybook locally and can't reproduce this bug.\nhere's the example code https://github.com/grommet/grommet/blob/master/src/js/components/TextInput/textinput.stories.js#L10-L30\nevent.target is not null. \ncan you probably share some more information or a codesandbox to reproduce this?. Hello,\ni gave this a quick test. i think the problem is not in grommet, and not that it is a problem actually. you should probably look at https://github.com/styled-components/jest-styled-components for improving your snapshots instead of bare enzyme (grommet is using styled-components).\nyou can have a look at how grommet tests its components to get \"inspired\". i am not sure what the travis issue is but i ve just hit another weird error on maskedinput\n```\n    Received value does not match stored snapshot \"MaskedInput option via mouse 4\".\n- Snapshot\n+ Received\n\n@@ -2,10 +2,11 @@\n    class=\"StyledMaskedInput__StyledMaskedInputContainer-sc-99vkfa-1 kyyRCm\"\n  >\n    <input\n      autocomplete=\"off\"\n      class=\"StyledMaskedInput-sc-99vkfa-0 kWovZR\"\n+     data-g-tabindex=\"-1\"\n\n```\n@ericsoderberghp maybe you have an idea for this ^^\n. As you probably found the hard way :/ this needs to be changed in the doc file rather than the ts itself. oh yeah you are right the generation only happens for the src/js/components folder. i wonder whether this is on purpose or a bug. another solution which seems to be the \"default\" way to do in the TS community is having these definitions at http://definitelytyped.org/ https://github.com/DefinitelyTyped/DefinitelyTyped\nThey seem to be handling an enormous amount of TS typings. This would delegate the work elsewhere and enable you to focus on other things (given that there seems to be typings issues popping often)\nOTOH that repo looks huge and maybe that would refrain people from contributing there, and | or typings might find themselves out of sync.. oh ok. not really familiar with all these, just saw that styled components and a few other libraries did that recently.. now that react-desc is out of the equation for TS files i wonder whether it makes sense to rebase this PR in current master and advance with it. it has a lot of fixes that are nice to have i guess.\ncc @alansouzati @ericsoderberghp . @murbanowicz the conflicts are getting bigger and bigger ;) shout if you want any help on this PR. i am willing to help if needed :) . well last eric's comment seemed to mention to be the case.. FYI opened an issue to discuss ts rewrite https://github.com/grommet/grommet/issues/2886. @erikreedstrom does this work for you? can we close this?. Hello thanks all for the feedback. Agreed current situation is not ideal. I will try and come up with a solution in the next days! . maybe its best to open a new issue and close this one!. yeah sorry i thought this was solved, my bad. Not anymore! so feel free to propose patches :). so with @patricknick PR merged are we still missing something here? if not we can close this issue!. Excellent! thanks everyone for the collaboration!. i wonder whether the right solution is to width: 100% on StyledTable. @ShimiSun ?. i would like to play a bit with that. is there a specific procedure to add a new component? (styling wise and feature wise?). * i am wondering if the sound controls should be displayed directly (since there are no other options on the sound tag). \n* maybe most logic around controls should be abstracted and have a media component where  you can activate a video or an audio. i.e\n```\n\n\n\n\n\n\n```\nThe play/pause/stop louder, quieter mute etc controls should have the same logic.. fwiw on FF i can't see any download button. . Maybe we can close this right? I mean it will still be indexed.\nUnless react dependency in package.json should be updated to disable that version . >     * What happens if a cell contains an interactive element, like a link?\nRight so i had the problem when both CheckBox onChange event was fired and onRowClick and i thought that there shouldn't be two of those at the same time. I haven't figured out how to fix this actually, open to suggestions.\n\n* I don't think we should expect that checkboxes would be the only way to represent whether a row is selected. I think we should also explore supporting a both a hover indicator and selection indicator for the whole row.\n\n\nThat means integrating the selection logic directly into datatables ? Because the checkboxes were an example on what to do with the onRowClick event.\n\nIt might be better to split this into two pull requests, one to add sortable, which seems straightforward, and another for the click interaction.\n\nagreed. I will force-push this one to have only the sortable property and open a new one with the rest.\nthanks for the quick review. so i splitted this PR. i am still not sure why travis is not running its checks on this PR.. >     * What happens if a cell contains an interactive element, like a link?\nRight so i had the problem when both CheckBox onChange event was fired and onRowClick and i thought that there shouldn't be two of those at the same time. I haven't figured out how to fix this actually, open to suggestions.\n\n* I don't think we should expect that checkboxes would be the only way to represent whether a row is selected. I think we should also explore supporting a both a hover indicator and selection indicator for the whole row.\n\n\nThat means integrating the selection logic directly into datatables ? Because the checkboxes were an example on what to do with the onRowClick event.. (Sorry this is longer to read than i thought at the beginning)\nI've been thinking about this some time, and i think that there is some refactoring due in the datatable since it is not using everywhere the Table* components which seems like a double-work to maintain. I.e this PR adds support for the onRowClick event for the DataTables but the TableRow component will not have it. (Same goes for the hoverIndicator etc)\nWorking on the onRowClick event makes me think that probably the whole idea of selectable should be directly inside the datatable. This would\n\nerase the issue with double click events (for checkbox and for the row) since it will be done directly in the component. The user should be able to add their own buttons in cells without this affecting the selection behaviour\nallow users to select the icon and the different styling props based on the theme (hover and selected props).\nThe datatable could still have in its props an onRowClick callback that will be called additionally to the selection logic. \n\nI think it is coherent with the rest of the component since selection is probably equally important for a datatable as sorting and searching. \nSo here's what i am suggesting:\n\n\n[ ] 1 PR refactoring DataTable to use only existing Table components. Any additional DataTables styling needed should be done just by wrapping existing Table components instead of creating new ones.\n\n\n[ ] 1 PR to expose the onRowClick event, hoverIndicator and selected (maybe this could be similar to hoverIndicator just lighter?) styled prop to the TableRow component. \n\n\n[ ] 1 PR to add a selectable property into DataTable, it should be able to handle row clicks, style the DataTable properly (using the TableRow component props), and handle the state of the checkbox icon (or any other icon selected from the theme)\n\n\nI could open 3 different issues for that as a matter of fact and discuss each separately since they are not strongly-coupled. . I am inclined to think i broke this with PRs on Box component and the borders. i ll try and have a look tonight. . can you share how you use RoutedAnchor? From what i understand from the documentation It seems you need to wrap it withRouter?. can you probably set up a codesandbox reproducing the problem?. would you be able to share a codesandbox with the problem or a repo? i don't have any projects with react-router (personally using router5) so it will be much easier to debug.. So i as i understand from their changelog they don't allow any more the this.context.router.\nI updated the codesandbox https://codesandbox.io/s/l5ov5y4269 to show what they expect. You need to wrap components withRouter so you get access to the history, location and match props.\nAs i see it RoutedAnchor is router agnostic right now so i am not sure it makes any sense form grommet to wrap it internally in the library (it will need to depend on react-router-dom). Plus this is a fairly undocumented component.\nMaybe @ericsoderberghp can shred some light on how this is supposed to work. . hm, i can't figure out any reason why the font-weight changed.\n\n\nThat PR  just includes the ability to add a font-weight in the heading levels. If you did not modify your base theme to include a font-weight then it should be backwards compatible.\n\n\nThe TextInput component does not make use of that part of the theme at all, unless you restyled it or so?\n\n\nin any case sorry if i broke anything but probably with a bit more context i can debug this better. Disclaimer: not in grommet team.\nThe base theme has some initially undefined values (which are commented out) such as https://github.com/grommet/grommet/blob/master/src/js/themes/base.js#L501-L502 .\nI am guessing the typings should include these optional values, although i don't see a solution to auto-generate those.\n. oh right ok never mind, it skipped my mind that this only affects the base theme. \nthis is great!. closing this in favor of #2739. oh didn't know circle ci would not show up here. here are some info for the last build https://github.com/oorestisime/grommet/commits/cypress-testing\n\nBuild run for 4 minutes.\n. Needing work:\n\n[ ] it seems the release process is on travis? if so it needs to be ported on circleci, unless we keep both of them in place which can be an option until all migration happens\n\nMost important things to consider here:\n\n\n[ ] plan for circleci, if going on paid subscription, if anyone can find out whether they have free plans for open source\n\n\n[ ] if this should run on each PR, keeping in mind that it takes 2 minutes for the e2e tests but there are not a lot at the moment. i can see the minutes getting up to 5 minutes easily. IMHO this should not be a problem, the are rare occasions in need to merge a PR in 15 minutes or so, and i guess there's always the possibility to merge without the go on from the CI\n\n\nLess important things:\n\n\n[ ] whether it is in the scope of this PR to add more regression tests\n\n\n[ ] whether it is interesting to have https://storybook.js.org/testing/structural-testing/ \n . The problem is here https://github.com/grommet/grommet/blob/master/src/js/components/TableCell/TableCell.js#L50 and although the fix is quite easy to do (destructure colspan and handle default values) i wonder why was this done like that in the first place.. Which react, grommet and webpack version are you using?. ok i am retrying to reproduce this. on the other hand the storybook doesn't fail on build. this seems localized in  CRA . and i do reproduce. . I digged in a bit more, i think this is a tree shaking issue than a side effect one. Not sure yet. \nA better work around from the one to c/p files around is to use\n\n\nimport {ThemeContext} from \"grommet/contexts\" to import the ThemeContext instead of importing from grommet. \nDigging more to find why this is happening.. This is a somewhat duplicate of https://github.com/grommet/grommet/issues/2708 i am closing this since the other is more complete!. Hm it seems you already get this information, i tried on storybook on SimpleSelect the following onChange:\nonChange={(e) => {\n              console.log(e)\n              this.setState({ value: e.option })\n            }}\nand e.target has the information you mention. maybe i am missing something here though. . I am not sure i understand how you find the issues you talk about (focusStyle). the json seems to list where each part of the theme is used but I am not sure how you found that Button does not have the focusStyle in themeDoc. \nIf you have a semi automated way to list inconsistencies it is probably worth it to have that run on the CI have the pipeline take appropriate actions (i.e fail on already documented components and maybe). Ok i guess i will try and automate this and open issues. we can maybe open one issue per component with what is missing from the themeDoc (if there is one alreadt). Can you please point me to the code generating that json?\nI see what you are proposing as a solution and it probably needs a separate issue to be discussed although it seems this can not be an immediate change. I am just curious to see if we can improve the current state of things in an automated way :) two of them are independent!. i think is is unrelated and if you rerun it will work. i sometimes get that as well.. >     1. A few more styles\nGreat i ll see if i can incorporate those as well.\n\n2. The file should probably be renamed to docUtils as we also have duplication issues with duplicated property values like margin, pad etc\n\n\nOk seems reasonable i ll try and include props. as well. as i explain in the third point i believe their description should be component agnostic as well so i would rather avoid creating functions.\n\n3. The focusStyle etc should be functions accepting a description string and returning the doc object as the description for ie Anchor focusStyle is different from TextAtea focusStyle\n\n\nHm i think it should be general. Since the function is component agnostic probably its documentation should be as well. (Although thanks for pointing this out i didn't notice and i need to re-word them). \n\n2. The file should probably be renamed to docUtils as we also have duplication issues with duplicated property values like margin, pad etc\n\n\nso i ve had a look and there are no duplications on that end. I ve checked for example pad and it is used in Box and FormField but those props are completely different. \nAnd there was already an effort on that end https://github.com/grommet/grommet/blob/master/src/js/utils/prop-types.js#L32. Pushed a lot modifications and fixup on initial commit because i always need to check out so the script does the work.\nFor the review best to start from themeDocUtils since this where all the code leaves and then verify i didnt break something in each doc.js. I can turn them into functions that take the description as an argument if needed. is this only the case for normalizeColor?. I ve turned some into functions and updated the doc files. rebased on current master as well. right i probably messed up the normalizeColor with my script. maybe normalizeColor is not that generic. i should drop it entierly?. hey, i ve been playing a bit on the storybook and didn't manage to reproduce this. I also tried with the codesandbox https://codesandbox.io/s/77wz8ny70 (check out the box component)\nI might be not fully getting the issue so would you be able to reproduce in a codesandbox? Or maybe specify the versions of grommet and styled-components?. Right ok thanks for the explanation i managed to reproduce it. I updated https://codesandbox.io/s/77wz8ny70 in the box component there is only one Box visible instead of two. Don't know if this is a bug actually, but it seems to be related to styled-components. The box with the as prop doesn't actually get the property (undefined). I am thinking it is getting picked by the styled function and not forwarded. Whereas the tag is not! And this basically happens with all the properties there (border etc). @GabrieleRomeo \nThis is something related to styled-components rather grommet. but here's one example https://codesandbox.io/s/yqvk2zjqxx which does what you suggest. While doing this i hit a console warning Warning: <Footer /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.\nDid you have this as well? It makes sense to me since no one wants to have custom HTML nodes in their dom. \n. Thanks for starting this!\n\nsingle row-wide control\n* hover interaction indicator, via background, border, or icon (such as `<Next />`)\n\n+1\n    * onClick or href, DataTable: per data item as a value or function, Table: caller's responsibility to use Button or Anchor within each TableCell and set the hover state across the row as appropriate\n\nI am not sure i understand what you mean here. (what needs to be done in the DataTable) \n\n* accessibility via up/down arrow keys to traverse rows. This allows the tab key to jump to other areas without having to tab through many rows, which scales better. We would likely only provide this via DataTable. Caller's using Table directly would have to wrap with Keyboard.\n\nyes that would be an improvement over current state of things\n    * no selection needed\ncheckbox selection\n* hover indicator, via background or border\n\n+1\n    * one column devoted to a checkbox selection indicator, could be first or last, or maybe any\n+1\n    * clicking anywhere in the row toggles the selection of the checkbox for that row\n+1\n    * if no rows are selected, allow a DropBox style where no checkboxes are shown unless the user hovers over a row and upon clicking one row, all checkboxes are shown\n\n\nto do this the selection needs to be handled by the DataTable directly. Even if it does i think this can complicate things and not bring much value in return. \n\n* whether the selection state is controlled by DataTable or not is still a question. If DataTable manages it, we would likely add `selected=[index, ...]` and `onChange(index, selected)` as properties of DataTable, allowing the caller to place the checkbox via a new key within `columns`. If DataTable doesn't manage it, we would need an `onClick` that callers would use to track which rows were selected and explicitly render\n  CheckBoxes per row with the right `checked` state. I'm leaning towards the former.\n\n\nI think handling the selection directly in the DataTable is better. It will probably avoid many bugs and c/p for the users since it is a feature needed quite often!\n. Are you using the pad property of the form field? or maybe you can share the code leading to this in a codesandbox?. Wait but is it meant to be used with a child like that? i am not sure :/ Maybe @ericsoderberghp can help here. yeah but doing like:\n<FormField pad>\n      <CheckBox />\n    </FormField>\ndoes not apply the pad. hm i am not sure, there's also some logic around the label in it. \nIf you need to have the checkbox as a child then you will need to configure the padding on your own as:\n<Box pad={{ horizontal: 'small', vertical: 'xsmall' }}>\n          <CheckBox id=\"check-box\" label=\"CheckBox\" />\n        </Box> \nthis is an example on storybook. . I ve started storybook locally and didn't reproduce this. maybe it was broken before but seems to work now at least on current master. . Closing this since it was merged. hey, this is looking good! \nI think there is already a unit-test covering the gap prop. would you mind altering it to cover this case as well?. Sorry for the hassle! you need to run yarn test-update so that the snapshot gets updated and test is happy!. Hey, probably the sandbox is outdated, the selected prop is deprecated in favor of value. Would you mind changing the title of the issue to reflect this?. this seems to be a duplicate of #2658 that was fixed\nIt should land on the next release.. There seems to be a relation to highlight at the code but i am not sure what it is yet.\nAs a quick and temporary workaround you can maybe do\nvalues={[\n          { value: 100, color: 'accent-2' },\n          { value: 30, color: 'black' },\n        ]}\nand play with the values. hello,\nthe @types is managed by Definitely Typed but the typescript definitions for grommet are living in the repository directly. \nAFAICT there is no need to install whatsoever to be using them.. I am inclined to close this. TS is supported from within the repo i am not sure it makes sense to move it elsewhere. . Can you maybe try and remove node_modules and do a new yarn install ?. So you did a yarn install and in node_modules/grommet/es6/components/MaskedInput/? neither in node_modules/grommet/components/MaskedInput/\nyour picrure doesnt seem to talk about the same error by the way.. can you use a codesandbox to reproduce this? or maybe give a link to a repo? . Great, lets close this as the issue is fixed.. I am surely missing something but\nthe sandbox is working fine for me. only problem is that it shows invalid date on 01-01-2019. \nWhen passing 1/1/2019 i get the following picture (no issue with numbers)\n\nI've checked the history touching the heading and most recent diff happened 3 months ago and it was on a prettier run. So i am wondering if there was ever the day in it (i also went a few commit behind that one and couldn't find it)\nThe fix seems pretty easy to do anyway. Just adding day: 'numeric'   https://github.com/grommet/grommet/blob/master/src/js/components/Calendar/Calendar.js#L228-L230 would do the trick. . oh no sorry i put 1/2/2019 on my example. didn't meant to say there's a bug actually. jsut the day number is missing. but i am not sure there was ever. Would it make any sense to also add some styling to the sidebar links? the default blue color seems out of sync ;). Did you encounter any particular difficulty?\nThis is working for example.\n<Link to=\"/\">\n          <Button\n            plain\n            hoverIndicator\n            icon={<Home />}\n            label={Home}\n          />\n        </Link>. I personally wrap Link into a styled component to remove the visited and decoration styling it has:\nconst InternalLink = styled(Link)`\n  text-decoration: none;\n  :visited {\n    color: inherit;\n  }\n`. Hm i dont think you can use Link in the Menu component. it is tightly coupled with button and only takes a few parameters as options not components. \nYou can use the navigate function although you won't get the prefetch with it.. Is there anything else we can help you with gatsby + grommet?. Seems this could be a nice pattern or a nice blog post. Anything else that comes up your mind about gatsby integration? could try and draft something soon! . tests are failing because i haven't yet updated snapshots. > A couple of initial comments:\n\n* I think solely representing selection via a checkbox feels too opinionated to me. I would like to discuss this with @L0ZZI a bit to show some other design approaches that we might want to accommodate as well.\n\n\ndo you mean adding theme capability for another icon? Or like row changes background or so?\n\n* I didn't see how the caller can populate any initial selection state or receive notification when the selection changes. Perhaps I am missing something.\n\n\n\nnice idea about the initial selection state. i ll integrate this.\nabout the notification i call here the onRowClick callback https://github.com/grommet/grommet/pull/2739/files#diff-1db494bb9da8b05f33e989ad88b1ea92R100 . were you expecting something different? I admit i am not callibg the callback when user clicks on select all, but i can definitely add this. I am just not sure it makes sense to send all the data back.\n. > > do you mean adding theme capability for another icon? Or like row changes background or so?\nIt could be a background change, a border change, or a different icon.\n\n\n\ni was thinking about this. The background and border will have to be handled by TableRow directly so would this makes sense to have it on another PR when we have input from @L0ZZI ? I mean it wouldn't be a breaking change or anything just setting a prop selected on tablerow and then handling this with the theme.. Thanks for reporting this and sorry for this regression. There's already an issue tracking it here #2742 so i am closing this one. Feel free to add any other feedback on that one. > I updated the PR.\n\n* Running tests on every commit is a team choice of course, but I have found that it crashes the VS Code built-in git support (I get bizarre errors and can't commit), and it takes a few minutes which can discourage making small incremental commits imo. I think CI is the best place to enforce tests, where the environment can remain consistent and resources can be added as necessary to speed up the build. I had some kind of flaky test with TextInput and ended up running with `-n` just to get past it since I only changed the lockfile.\n\n\nThis is something that annoys me as well. I personally view little to nothing gains running it on the pre-commit hook. In any case the commits are squashed before merged so the history stays clean.\nI would consider opening an issue for this to facilitate the discussion. In any case i agree tests are sufficient on the CI . So to get this right, this happens only in next afaiu right? and it is not related only to announce context?. Thanks for investigating more on this.\n(we talked about it on slack but...)\n\nnextjs8 will come with \"3.2.0\", but for the time being is not ready.\nnot sure what to do with this issue\n\n\nnot sure either. seems grommet needs that hoist package. might need to document somewhere what needs to be done until nextjs 8 is out?\n\n1. In the first place, really shouldn't make changes like that in a minor version update\n\n\ni still believe it is impossible to test every possible building tool for breaking changes especially the ones not used by the team. This is what the community is here for and it is great! \n\n2. Probably was better to assume the lower version of \"hoist-non-react-statics\" is available, instead of going for the latest without much testing\n\n3.x was needed for forward ref.\n. maybe we can change the issue title so that people can find this easier? (and close it).\n\nSomething like Grommet v2 incompatible with nextjs < 8.0.3?. Closing this since it was merged. Heya,\nthis is a great start :)\nCouple of things to consider maybe:\n\n\nare we really needing each starter/pattern/template to be a package and more so to be a workspace? i am not sure if it makes sense to publish such things, in my understanding they are only meant to be example applications and the user can c/p what they want around. In addition each starter could depend on a different number of things so if as you say running yarn installs ALL the modules then it might make them heavier to install.\n\n\nif the goal is to have grommet-icons grommet-site etc in it then eventually this would need lerna or so. Does it make sense to structure it directly in a lerna compatible way? it seems to me that lerna searches packages in a specific folder. how it is structured now this won't be possible since grommet seems to be like a top level directory. it would later need to be moved again. which brings me to my next point\n\n\nis it necessary to start migrating current structure to monorepo if the only repo there is grommet? the way the starter templates are structured even now don't require any change on grommet itself. they just need to depend on grommet. . Sorry i was probably not clear. i didn't mean not have them as a separate folder with their own package.json but actually as a separate publishable workspace (if lerna comes in place)\n\n\n@atanasster do you mean a large size when cloning the repo? because the download size on install wouldn't differ. . * well for the menu label you can customize however you want by providing a child. imho the justifyContent shouldn't be there in the first place. otherwise we would need like a padLabel, alignLabel etc which could bloat for not much benefit the menu. \n\nFor the items i am thinking to add a renderChild method that is called after the button (which sets the selection etc). This way you could style the items how you want (within the button though).\n\n@ShimiSun @ericsoderberghp your thoughts?. ok fait enough i am un-assigning myself till you update on your findings :). i think there's a yarn.lock change that does not concern this pr. yeah i also think it makes sense to have the same behavior on mouse click. I personally not sure if this is a nice addition to Image.\nIt is a simple component wrapping the img tag and this is a fairly edge case.\nWould you have an idea on how to implement this? I think img tag doens't actually support this natively so in my understanding it will require a few modifications in the component.\nSome other thoughts on the matter?. oh right ok! i was thinking something more complicated would be needed but just handling it via onError seems legit!\nIf you have an implementation may i suggest you PR ;) ?. OK i was working on this and i am quite reluctant to start referencing \"side-effect\" documentation in each component. Not only it is hard to keep track with current implementation it will heavily bloat the docs page without much value. \nThe heading for example is the title of the calendar month/year. I am thinking to do something like:\n'heading.level': {\n    description: 'The month/year title is rendered using the Heading level 4 or 3 component. Refer to the heading component for the available options.',\n  },\nThis enables user to get the information about the side effect and its up to them to navigate and change the available options.\nSame goes for the rest of the options here (margin and pad is for a box container). and it is similar with #2817 #2818\ncc @ShimiSun \n. Haven't looked at the code or sandboxes yet, but agreed in any case it makes sense to me as well to call onMore once user reached end of list.\nI think there were a few PRs addressing issues on infinite scroll. Wonder whether anyone had the chance to test on latest master to make sure this was not already fixed. \n. Thanks for taking the time to put this up!\nI find the the idea very interesting and i see the advantages. Could change the way people write the themes right now and have themes better organized. From a designer point of you i have no idea if that holds up.\nSome things that came up while thinking it:\n\n\nSomething to verify before is if there are theme values tightly related to a component that wouldn't make sense to add in a behavior. I am thinking that if there are enough of them this could back fire because modifying a theme value would require searching all over the place.\n\n\nAs i see it this could probably help with the theme documentation. Maybe we would need to document only the behavior ones and then mention that if you add a component specific one in the theme then it will be taken automatically.\n\n\nagreed about the compatibility plan you laid off.  IMHO this shouldn't break anything and be transparent to users unless they opt in to the new idea. It will be pretty big change. Both in terms of the code-base and the usage of the themes. I am thinking that v2 recently got out and people are not yet at ease with the themes. Making this a breaking change right away could alienate users.\n. it may be only me but i find this example confusing.\n\n\nIf there are 70gb storage and 40 are used and 30 are available what is the grey value meaning?. Thanks, this is looking good.\nwould you mind adding a unit-test as well. It could be similar to this https://github.com/grommet/grommet/blob/master/src/js/components/Form/tests/Form-test.js#L36\nonly that you type and validate and expect to see an error and then verify it works with correct input.. @peakercope we merged this since it was important for the upcoming release. if you do find time to add a test around it then perfect otherwise i can get to it! . Before merging this please follow the grommet project on circleci. I haven't tested the setup yet there might be a need for modifications. Hm as with range selector #2818 those values seem to be there because of the container using the Box and forwarding the props in there.\nThis makes me wonder if there are even more props missing based on all the available box properties. . sounds good to me. i wonder whether we should fallback to text though if theme value is not defined.. I agree with @atanasster here as well. We could create a helper function if the problem is to write them down every time.\nIt would also be beneficial for my theme-builder or any other tool playing with themes since right now it requires handling JS objects as strings which is sub-optimal.. Hello,\nHave you tried using the children prop of the Select component? Here's an example https://storybook.grommet.io/?selectedKind=Select&selectedStory=Lots%20of%20options&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nLet me know if this corresponds to what you ve been searching!. Right now the disabled prop was handled directly by the html5 tag. i am changing this to enhancement. Table components just provide the necessary abstraction on top of html5 tags to build your own tables. Maybe you are looking for datatable? https://storybook.grommet.io/?selectedKind=DataTable&selectedStory=Sized%20DataTable&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nOr do you mean TableBody should have a size property as well?? It could probably make sense to move https://github.com/grommet/grommet/blob/master/src/js/components/DataTable/StyledDataTable.js#L35-L42 into TableBody. Hm in the end not sure if this is a bug. \nThe theme defines the edgeStyles only for small https://github.com/grommet/grommet/blob/master/src/js/themes/base.js#L121-L154 so if you define medium breakpoint you need to handle this values as well.\nI see two solutions here:\n\nadd edgestyle etc for each breakpoint but this beats the logic that if you define xlarge or tablet or.. breakpoint then you will consider this again as a bug. \nGrommet could console.warn that you try to access theme properties that are not set in order to have a better readable error.\n\nThoughts?. Hm, i am probably missing something but not even sure what is the purpose they serve in the small breakpoint. \nhow are the values going to change in the medium size? and how are those values different from global.edgeSize, global.borderSize?. Can't find any trace of this to be used besides mentioned in the docs. This is a bug in the docs like some sort of leftover prop or has anybody used this?. haven't dig in really in detail but there was a commit ?refactoring themes? 7 months ago adding this prop along with the restructure. but i can't find anywhere in the code that this is used this is why i am wondering if this was used somewhere or just a glitch in the restructure.\n@ericsoderberghp ? (you commited i think). Ok lets remove them then. . but that would affect only the documentation structure no?? adding enhancement as well.. oh sorry i didn't notice there was fontWeight and weight elsewhere. ok makes sense. \nfor me it would make sense to have a font helper that is applied in the different areas and it is always the same. the helper should handle docs and code and theme listing.\nFor theme it could be:\nfont: {\n  family: undefined,\n  weight: undefined,\n  ....else?\n}\nfor doc like the existing themeUtilsDoc and for code just a reusable prop as there's for color margin etc.\nThoughts? \n. So i ve reworked this PR.\n\nadded disabledStyle in global\nremoved both form textinput, textarea and button (but i kept backwards compat)\nupdated docs. disabled is part of the intrinsic elements of input. i am not sure we need to add it. Agreed, there needs to be an onOpen to open as well: here's a proposed example\n\n```\nexport default class extends Component {\n  state = { open: false };\nrender() {\n    const { open } = this.state;\nreturn (\n  <SandboxComponent>\n    <DropButton\n      label=\"Choose\"\n      open={open}\n      onClose={() => this.setState({ open: false })}\n      onOpen={() => this.setState({ open: true })}\n      dropContent={\n        <Box pad=\"small\">\n          <Box direction=\"row\" justify=\"between\" align=\"center\">\n            <Heading level={3} margin=\"small\">\n              Heading\n            </Heading>\n            <Button\n              icon={<Close />}\n              onClick={() => this.setState({ open: false })}\n            />\n          </Box>\n          <Text>Content</Text>\n        </Box>\n      }\n    />\n  </SandboxComponent>\n);\n\n}\n}\n. Feel free to close this since the problem is more in the codesandbox example (and you already opened a PR to fix it ). Which docs are you referring to?. Sorry missed the docs page silly me!\nPassword input is basically `<TextInput type=\"password\" />` in v2. If you want the hide reveal mechanism i can open a codesandbox to show you an example on how to do it.. Here you are https://codesandbox.io/s/7jzo24or0. It is used for the Button https://github.com/grommet/grommet/blob/master/src/js/components/Button/StyledButton.js#L111\n. Yeah i meant to say that activeStyle is used there. (so the one who fixes this adds a test). So i came back at this again,\nit uses `props.theme.global.hover.background` which points to active color.\nhover: {\n        background: {\n          dark: {\n            color: 'active',\n            opacity: 'medium',\n          },\n          light: {\n            color: 'active',\n            opacity: 'medium',\n          },\n        },\n        color: {\n          dark: 'white',\n          light: 'black',\n        },\n      },\n```\nthis seems right to me unless i miss something. yes there is an open PR to fix this. coming soon!. Can you share a markup of how you use this to get warnings? not sure i see any props leakage in my applications this is why i am asking.. I wonder wheteher we should update the tag prop and ts definition. It is deprecated so in my understanding shouldn't get the fix (people would also move to as prop if they depend on this.)\n@ShimiSun your thoughts?\n. @episodeyang did the necessary fixes (used styled-component ts definition), rebased with current master and updated tests.\nPlease on your next work open a different PR for each change. Small PRs with contained changes are far more easier to review.\nThanks a lot for your contribution :)\n. I hope i understood this right but:\ncan you try using:\nlayer: {\n  zIndex: \"1000\"\n}\ni think there are two zIndex values in the theme. one for the container and one for the layer applied when it is a modal.\notherwise a minimal example showing this (even a repo) could help. The container always get the layer.container.zIndex. if modal is true then there's the overlay and you basically set the z-index of the overlay with layer-zIndex. Thank you for your contribution!. Thanks! merged!. i think you shouldn't pass the textarea as child but as a the component prop. Here's the example in the storybook\n<FormField label=\"Comments\" name=\"comments\" component={TextArea} />. So the documentation should probably mention this. And maybe the example needs to be changed as well. . Can you post a codesandbox with a reset button and the issue please so i can take a look?. Right ok i get it! i think the problem here is that there is no onReset event handling!. I gave this a second look and what you are trying to achieve could be done with the Drop component.\nHave a look at the this example https://storybook.grommet.io/?selectedKind=Drop&selectedStory=Progressive&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nLet me know if this is what you might be looking for. True but that's just adding an overlay, i wonder whether we should add an option for drop to render like an overlay. lets wait to see what others think!. Tried this on sandbox and looks very nice!\nBut, maybe this could be part of a pattern? The idea here is that maybe these kind of components are quite opinionated:\n\nwhy circular and not linear?\nwhy pulsing and not like circular loading?\nhow about the color? (although i guess this can be customized with the theme props)\n\nMaybe it would be best to create a pattern with different flavors of progress indicators? Otherwise we might need to have a progress component that takes a variant prop and picks one of the css animations.. Hello,\ni think the problem here is that you didn't specify a property for each column (the action column is missing), hence the key for that column is undefined and provoking issues. \nIt is a required property.. tests shouldn't be failing. at least they don't on master. did you use yarn or npm for installing dependencies? because we currently don't have a package-lock.json you might not have gotten the correct dependencies.. rm -r node_modules && yarn install and then yarn test on master yields no issues for me. . * circleci status\n npm charts downloads\n https://img.shields.io/badge/PRs-welcome-brightgreen.svg\nPutting this here as well https://shields.io/. Fixed the tests although this needs some investigation before merging. i haven't looked yet to find why a bunch of other unrelated snapshots need updating. . No i didn't yet check why we need to update the snapshots not related to button. (maybe they are valid but we should verify before.). @britt6612  thanks for jumping on this one!\nBut can we wait for https://github.com/grommet/grommet/issues/2802 ?\nthe theme values here are due to theme side effects. imho we should decide on a way and apply it everywhere. . mostly this https://github.com/webpack/webpack/tree/master/examples/side-effects. Ok added the previous side effect as well. makes sense as well since storybook is built from our source structure.. As with my other comment in the range selector, i think it would be good to wait for a generalized solution. Discussion here: https://github.com/grommet/grommet/issues/2802. So the padding is applied here https://github.com/grommet/grommet/blob/master/src/js/components/Button/StyledButton.js#L121-L129\nHere are some screenshots when not applying it and when we do (line height is always needed)\n\n\nDon't know if this is needed either. Hello,\nCan you please share some information on how you wanted the Grid to behave? Seems like you wanted to replicate grid-template-columns and this is available through https://v2.grommet.io/grid#columns\nFor example <Grid columns=\"200px\" /> should create something like \ngrid-template-columns: auto-fill, minmax(200px, 1fr);\nMaybe we need to update the docs to better reflect the available possibilities.. Hello thanks for the contribution :)\nI haven't read the PR but i think you should read this https://github.com/grommet/grommet/issues/2855 (obviously we would fix bugs until we remove it but just letting you know). can you share a markup where this is happening? (Looked for Layer in your starter but failed)\nis the layer open on mount directly? \nBecause if you could modify your Layer to open not at build (meaning not being open by default) then it should work.. Well this is a workaround really since we rely on document for Layer which is not available on SSR. \nOn non SSR contexts you could have the Layer open by default!. ## Proposed solution: haven't tested yet\nWe make use of document here https://github.com/grommet/grommet/blob/master/src/js/components/Layer/Layer.js#L17\nMaybe if we just moved that line on componentDidMount then we wouldn't have this issue. It seems to be only used on componentWillUnmount so it shouldn't affect normal functionality. And document would be available on componentDidMount. Yes, but i am not sure if this is going to work . I think we can close this now right? Checked on the PRs storybook and the problem no longer shows.. So 2 is not possible, the problem was on the initial rendering so it is not a matter of css. \nProposal: not sure if this will work\n\nAdd the dependency in externals (verified and is not in the bundle)\nmove the import and logic of mobiie detect in a separate file with commonjs imports that we can surround with try catch. if import is not there on runtime we don't break.\n\nif user passes a user agent then they will also have to install the dependency  . SSR does a bunch of things worth noting \n\n\nperformance\n\nSEO\nscaling\n\nand so on. I invite you to search the topic since it is kind of a huge one.. Agreed it should be opt out.\nthe problem with the initial render of SSR is that it gets to load something on screen and then at 1 second when media queries get in place a flick is happening to rescale everything. Like lets say if the default render is for mobile and you are on a tablet then for a second or less you will get to see a mobile version of the site. i could reproduce this with a version of grommet before the mobile detect addition if you want me to.. So one thing i haven't thought about is i18n!\nI think this  could actually be a pattern instead of adding the functionality. \n@ShimiSun thoughts?\n. Yeah sorry i hadn't read the code before commenting! Makes much more sense now!. resolved the conflicts.. I think no it should be able to handle any change. if props change there has to be a re-render hence it will close. At least that was what i wanted to do. https://github.com/grommet/grommet/pull/2885/files#diff-19aa4813d5217c4120837104c9b593ffR43. - DropButotn already supports this\n- Menu agreed\n- For Drop i am not sure it needs to support this. Maybe a closed Drop shouldn't be in the dom in the first place no? I mean we add a div in the dom and we remove it on unmount. if we just hide it then we will pollute the dom for no use case. \nNot sure what @ericsoderberghp or @alansouzati think on this.. I was thinking that handling it would be an issue for i18n but since we already output the month name in English i guess it makes sense to have that as well. just maybe propose a story with a translated header so that people find out how to do it. Closing this since PR was merged. Sounds good to me as well!. FormField forwards any props you pass to the component passed on the component prop. Maybe we should mention this. Temporary solution:\n\n\nnot very intuitive but you can ?theme=dark in every url i think. while in the homepage that doesn't help much in the colors section you will get what you are looking for.\n\n\nnot sure what you mean. copy what exactly?\n. Lot's of things in your comment! I think we are constantly improving the documentation but i agree there is much improvement to be made!\nWhat could be interesting is to list what you are missing from the docs. I mean do we need to better advertise how to get started? Are the examples difficult to find? When you did read the code what was the use case? Where can we improve there?\n\n\nI personally suck at documenting, but if there are actionable items we could work on improving the documentation :)  . Thanks for putting all these thoughts here :) I think some people are great at documenting (python-requests) but some of them are not (and i clearly fall in to this category). I ve heard people documenting before implementing which is the documentation driven development which clearly helps building a clean API and great documentation! i would love to talk this on slack but lets keep this issue a bit leaner ;)\n\nI suggest we build a use-cases listing and somehow prioritize them.\nIt is not like a FAQ. FAQs are bad in that if a question arises frequently it's because somewhere something is confusing or unclear.\n\ni think this is a great idea! Do you have an example? Or do you maybe want to work on something like this? Seems quite interesting!\n\nIMO a layer is lacking between the intro \"a react-based framework that provides accessibility, > modularity, responsiveness, and theming in a tidy package\" and the components reference.\n\nDo you mean we need an example showing this? like ready apps or actually provide easier access to the patterns?\nOverall i also believe there is a improvement to be made on the landing page and documentation. some of it is being tracked here #2896 . Hello,\nthanks for this PR. i don't think this was intentional, i haven't noticed before. Thanks for catching this ! . i also just noticed that the issue linked is probably wrong? because we don't provide any extend capability just selecting the heading lvel.. > \n\nNot sure how you can have a unit test on a theme value. this is not a new prop. please let me know what you had in mind here.\n\n\nSomething like?\n```\ntest('Custom accordion', () => {\n  const component = renderer.create(\n    \n\nPanel body 1\n\n,\n  );\n  expect(component.toJSON()).toMatchSnapshot();\n});\nin the snapshot the heading should match the level you set in cusotm theme.\n. mmmm icon was added by this PR, i don't think there is a test for this. unless i miss something. oh yeah sure. maybe just a test for icon false is all we need. icon true should probably not be allowed? i think it breaks with current code at least. and not sure i see the point of `icon={}` value should be a node or a bool (or probably just false).. haven't looked at the code but the caret down is not showing on storybook. Yes i am on it. Should i check other components as well? At least the Text component is using tag https://github.com/grommet/grommet/blob/master/src/js/components/Text/index.d.ts#L10. and done! ty!. yes thanks didn't think of that!. +1. oups french got in my head :D. I am not sure how we can have this always on by default. how is grommet receiving the user-agent?. agreed for the naming! its for sure better. i am not sure i understood though what you suggest for the breakpoints. \ndo you mean something like\n {\n  breakpoints: {\n    small: {\n      value: 600,\n    },\n    medium: {\n      value: 800,\n    }\n  },\n  deviceBreakpoints: {\n    phone: 'small',\n    tablet: 'medium',\n  },\n}\n```\nif it is that, i also thought about it but decided against because a user who changes the breakpoints might not necessarily change the name of the device ones and then SSR would not work as intended. but i might be thinking of a weird edge case so i wouldn't mind changing to that!. i see yes! done :). yeah sorry slipped my mind :/. yes nice spot!. sure done :). Well it was commented out so i thought it should be deleted. If you prefer i can let the comment there.. or maybe are overriden ? . and done :). renamed evt to event :)\nYeah i am passing the event for those capabilities. let me know if you want to remove it or so. well i guess most of the team (if not all) are using yarn that's why package-lock.json was deleted (if nobody is using npm install then it would get pretty outdated no). you have a yarn.lock for the same purposes. \n(not trying to debate about yarn vs npm here just stating what i understand). you mean if there is no onClick or href on button to be disabled?. ok done! i wonder whether this should be noted as a breaking change. people might have relied on that behavior. i think you can move this directly in the setState. like interacting: !(audio && audio.ended). we should probably add this as well on componentWillUnmount to make sure we clear the timer if it exists. no need for an if here i think. interacting: focus || this.unmounted should work. (i hope i am doing correct the logical operator :D ). maybe not for the scope of the PR but i wonder whether we should always account for dark and light colors. probably using the normalizer.. the changes in this file and Menu-test.js.snap seem unrelated to me with the PR. could we destructure directly in the declaration?\nconst CustomAccordion = ({animate, multiple, ...rest}) => (. we should probably avoid using style prop to style things. Box has support for height directly (height=\"small\")\nHm, this was already the case for the other accordions. So handle this as you please ;). Thanks for adding a story to show this!\nWould you mind avoiding using the style prop where applicable box props are available? (height, width, overflow)\nAnd maybe convert the div into a box as well?\nI am guessing a lot of people are c/p from storybook so we should make sure we promote \"best practices\" . I think we can avoid a story here and add an icon in ThemeColored story. . This doesn't look good to me .\n\nHaven't looked where the color is handled for the primary but it seems that something is missing here. yes it was from the button.. well if we still support this i think it is better to write it down. enables people to see the deprecation wanring as well. but no strong feelings here.. yeap. also did for input and button. Yeah this annoys me as well. for the moment i didn't manage to retrieve a list of stories from the webpage. must be doing something wrong with the selectors.\non the other hand i am thinking we might not always want to screenshot every story so maybe there a middleground somewhere.. there's integrationFolder but didn't configure it. If we adopt this kind of testing we could eventually push it a bit more to integration tests as well, clicking on different parts of the stories and asserting using jest or anything. maybe it intersects with the tests using react-testing-library but on the other hand we could make sure the stories don't break. \nCouldn't find a way yet to have the tests next to the component directory. will need to search again but my initial idea was to do as you suggest as well.. agreed!. So in the utils the base url is http://localhost:9001/iframe.html which leads to the iframe directly such as https://storybook.grommet.io/iframe.html?selectedKind=Box&selectedStory=Simple%20Box&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Fstories%2Fstories-panel\nchanges in the storybook appearance shouldn't interfere.. oups forgot row and align.. can we change the description to reflect this change as well?. i am wondering whether we should align with the typings of styled-components for this.\nkeyof JSX.IntrinsicElements | React.ComponentType<any>\nboth comments concern all the typings change. . added an example for clicking on checkbox and snapshoting.. added an example on checkbox where we want more refined control of the stories we snapshot.. Nice catch but i think it should close on grommet-site not in the repository since it is not in the link.. Ok in the end this is cumbersome to do since there are different descriptions (deprecation on not) and default values. This seems unrelated with your PR. can you explain what you are doing here? The ts definitions don't need an update?. This seems unrelated with your PR. can you explain what you are doing here? The ts definitions don't need an update?. prettier. and it actually runs as a pre-commit hook. . i tried but can't get to hook on the onError event to actually test this. we would need to test this in a browser so that we get to see that the image loaded is the fallback one.. hm, since the fallback image is an opt-in method i would say it is not needed. . damn true i didn't think about this. i ll fix this in a subsequent PR. i was thinking to deprecate this mainly to match the rest of the areas the disabled opacity will be used. I mean why would we have a button specific one but not one for textInput or textArea? Unless we do add to the other areas as well. . done!. they should go in tableBody no?. this should go in tableFooter ?. Following in header. I think this is weird for the default select since this is what the user will see first most likely, can we add this in a separate story to show this?. lol, this was indeed a typo, but why did it work on the ci is weird!. maybe because there is a bundlesize script in .bin?. === true is probably not needed. just props.opacity ? ... can we add tests for all the cases? like weak medium strong true false and a custom value?. hm this line actually seems weird \nprops.opacity === true? props.theme.global.opacity.medium  : props.theme.global.opacity[props.opacity] || props.opacity}\nwhy would we apply an opacity if user set opacity to false?\nI think we should do something ${props => props.opacity && opacityStyle(props.opacity)}. well now you fixed it. before you were actually setting opacity: false as a css property ;). i think this css is not needed. you already have it in the previous line. can we add the type of opacity in the test string? it will be easier to debug when something will break. breaks default state of icon undefined..\nmaybe a switch would be easier to read?\nlet SelectIcon;\nswitch (icon) {\n  case false:\n    break;\n  case true:\n  case undefined:\n    SelectIcon = theme.select.icons.down;\n    break;\n  default:\n    SelectIcon = icon;\n}. ",
    "hustlerism": "Hi @tracybarmore , from your example, I can still swipe the last image to the first image and vice versa. \nI would want it to stop swiping to the right at the last image and swiping to the left at the first image. . Hi @tracybarmore , apologies for the confusion. \nWhat i meant was, if you clicked on the last image in the carousel and swiped it to the right, it will go to the first image back. Same thing happened when u swipe the first image to the left, it will go to the last image. Don't use the arrow, just swipe it using the mouse cursor. \nSince i'm using grommet for mobile app, the users can swipe the carousel using their fingers to right and left or click on the arrows to navigate the carousel.\nThe problem is with the swiping, not with clicking the arrows.. @tracybarmore Sure. Really appreciate your help. Thanks!. ",
    "nerdyadventurer": "@alansouzati I do not see any badge component in grommet-addons. Is there any plan to include badges in grommet v2 out of the box?. Thanks for the reply. It seems okay. Can I use this inside an auto suggest where tag is generated on completion(ex: like adding tags to StackOverflow questions). ",
    "thomas-romuald": "Hi @tracybarmore is there any news about this issue?. Hi @alansouzati  yes the component has the componentWillUnmount() specified.\nThis issue was present only while using phantomJS, but it's fine with selenium running on real browser (Chrome, Firefox). Before having accordion in a page test could run successfully on phantomJS.\nSo we stopped to use phantomJS.\n. ",
    "morenoh149": "@alansouzati eta on a new release?. ",
    "przytrzask": "Can you consider one more scenario in this case? Since grommet doesn't mask datetime format  I would like to get rid of checking what user types in the input and get this component to behave like input is disabled but being changing date still possible. It could work when you specify both onChange and disabled prop on DateTime component .You can simply reproduce it by manually adding disabled attribute on  tag . Sorry about that It is probably my prettier-eslint. Gonna fix this in a while. A little bit messy (Didn't know all new comments are automatically added to PR) but should be ok now.. ",
    "emmanuelnk": "After more research I realized that the SearchInput component is vastly different from the Search component. I made the mistake of assuming they had the same propType. I am now using the Search component and most of my problems have gone away. I still think a click handler for the search icon should be added in a future release.\nOn that note, I'll close this issue.\ncomponents/Search.js\nSearch.propTypes = {\n  align: _propTypes2.default.string,\n  defaultValue: _propTypes2.default.string,\n  dropAlign: _Drop.dropAlignPropType,\n  dropColorIndex: _propTypes2.default.string,\n  fill: _propTypes2.default.bool,\n  iconAlign: _propTypes2.default.oneOf(['start', 'end']),\n  id: _propTypes2.default.string,\n  initialFocus: _propTypes2.default.bool,\n  inline: _propTypes2.default.bool,\n  onDOMChange: _propTypes2.default.func,\n  onSelect: _propTypes2.default.func,\n  onKeyDown: _propTypes2.default.func,\n  pad: _propTypes2.default.oneOf(['small', 'medium']),\n  placeHolder: _propTypes2.default.string,\n  responsive: _propTypes2.default.bool,\n  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),\n  suggestions: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.shape({\n    label: _propTypes2.default.node,\n    value: _propTypes2.default.any\n  }), _propTypes2.default.string])),\n  value: _propTypes2.default.string\n};\ncomponents/SearchInput.js\nSearchInput.propTypes = {\n  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.shape({\n    label: _propTypes2.default.string,\n    value: _propTypes2.default.string\n  }), _propTypes2.default.string]),\n  id: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  onDOMChange: _propTypes2.default.func,\n  onSelect: _propTypes2.default.func,\n  placeHolder: _propTypes2.default.string,\n  suggestions: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.shape({\n    label: _propTypes2.default.node,\n    value: _propTypes2.default.any\n  }), _propTypes2.default.string])),\n  value: _propTypes2.default.oneOfType([_propTypes2.default.shape({\n    label: _propTypes2.default.string,\n    value: _propTypes2.default.string\n  }), _propTypes2.default.string])\n};. ",
    "drewlustro": "@emmanuelnk - how did you solve this? I'm looking for an onEnter event as well, or simply a means to trigger/force a search upon the enter keycode.\nThanks.. @emmanuelnk - nevermind, haha... I see you can attach a handler to onKeyDown and look for any code. Peace brah \ud83d\udcaf \n. Forgive me, but I guess I am not sure why this is a limitation when both option.label and option.value support rich assignment.\nThe <input type=\"text\" /> tag is GrommetSelect's proxy of native <select>. It's already an abstract representation... why let the abstract representation impose limitations on its parent?\nI cannot say I've dug into the code to find how straightforward it would be to echo option.label as JSX, but it surprises me that this is considered a 2.0 feature.\nWhat is the point of having a JSX option.label?\n. Very clear, thank you!\n\nIf you can find a fix for that without having a breaking change I'm happy to review and approve your pull request.\n\n\ud83d\udcaf \n. :beers: Added React component support to Grommet Select's render() in #1426\nI do not believe there are any regressions. All tests pass.\n\n. Awesome!. @florianbepunkt Your options object has two keys: label and value.\nWith my PR that was merged this summer,  options.label supports JSX (ex: another React component) instead of a plaintext label.. \ud83d\udd25 . +1 on this.\nNot sure why <Menu closeOnClick={false} ...> is provided as an API when Menu is not closable programmatically. . @RyanCCollins \u2013 I'm already a contributor! ;)\nI would love to help out more, but Grommet takes forever to build on gulp. Any tips for getting it to build faster on my machine?\n\n. +1\nWould any core maintainers care to share a progress report on Grommet 2.0?. Thanks @alansouzati ! What sort of (vague) timeline are you expecting? I don't expect you or the team to commit to whatever you write, but my team is just curious.. Sounds awesome, thank you!. This is unfortunately by design of Grommet 1.x; apparently it will be fixed in 2.0. Confirmed.\nThis works. . Curious @alansouzati - Where (physically) is Grommet developed from? Which HPE facility is the main team located?. ## +1\nI am affected by this breaking change.. ",
    "prismm": "So there is really no click handler for the search icon? This seems like a big oversight to me -- that's a user expectation.. ",
    "VenkaiahKagga": "Hello adamroldfield,\nWhen this feature \"Select multiple enhancements: show checkboxes, leave Drop open, custom _renderValue\" will be available in grommet.io?. ",
    "panigrah": "@RyanCCollins - the file gets uploaded twice if fullTargetDrop is set to true and I drop into the dropzone. Do we need to stop propagating the event if the onDrop?\n. @RyanCCollins another issue in _onClearFilePreview(i) its missing the \n    const { onDOMChange } = this.props;\n\nand the onDomChange.call() needs to pass i instead of e. @RyanCCollins i can try - how do I push to the branch? . I think I may know what your problem is @Hackbyrd  - but I do not know how to resolve.\nGrommetFormattedMessage puts a wrapper on react-intl.FormattedMessage. react-intl.FormattedMessage needs the textComponent to be available in the context. But this textComponent property is always null in the context. Thats the error message. \nI have not worked out yet why the context.intl object that should get initialized in the LanguageProvider component does not make the textComponent property available.\nIf you change the GrommetFormattedMessage to always use span then the error goes away and the app renders the LoginForm. \nBTW you will have this issue in many other components - anywhere the FormattedMessage is used.\n@karatechops any idea why the textComponent would be missing from the intl context?\n. @Hackbyrd I think I worked out how to fix. \nUpgrade your react-intl package to the latest 2.4.0 in the react-boilerplate. The version of react-intl you have likely does not setup a default value for the textComponent. \n2.4.0 sets the default value for the textComponent and the error goes away.. @karatechops what is the reason for not having Select maintain its own state? The native select control maintains its state and Select should mirror that behavior.. @karatechops  I am trying to learn more about how grommet is built so wanted to understand the rationale behind the current implementation. \nWe retrieve the value of all other fields include the simple textfields so I dont see why people would find it wonky! For newbies its easier to assume all controls behave the same.\nI can see Select fits into a category of components people use to dynamically update other parts of the page. And guessed thats why it was designed differently.\nthanks for looking into my other problem.. @karatechops i copied the Codepen into my project as a standalone component. OnChange doesn't fire for the first change but then fires after I change it again. But it works in the codepen.\nHow should I debug this? I don't see any error messages on the console.\nI understand now why it doesn't track state - so thats not a bug!. its not in a layer. I took everything out and only put in the codepen sample to my main file. I have the same issue. There is no error on the first select click.\nI will start removing packages one by one to see if there is a conflict.\n. @karatechops I stripped the project down to remove everything and inserted only the codepen sample. I still have the issue. The onClick event handler on the drop down list does not get called the very first time its clicked. Its as if the onClick gets swallowed by a different component the first time.\nAfter the dropdown has been created at least once - the Clickevent handler does get called everytime.\n. @karatechops I tracked it down to this bug in react-dom\nhttps://github.com/facebook/react/pull/8575\nSo upgrading my react-dom to the latest fixed this issue.. from 15.4.1\nThis is the default version of React in the react-boilerplate here\nhttps://github.com/react-boilerplate/react-boilerplate\n. ",
    "ianmartorell": "No problem, thanks to you!. ",
    "jlevesque": "@alansouzati \nThere is also some changes that has to be consider in Radiobutton.js. Those element are mounting with two label thus throwing an wcag2 execption where a form element needs to have only one label. Having more then one label may confuses the screen readers.\n<label className={classes}>\n     <input {...props} className={`${CLASS_ROOT}__input`}\n          type=\"radio\" />\n     <span className={`${CLASS_ROOT}__control`} />\n     <label htmlFor={props.id} className={`${CLASS_ROOT}__label`}>\n            {label}\n      </label>\n</label>\nI'm currently using react-axe, and it throw this error : \"Fix all of the following:\n  Form element has multiple  elements\".\nI'm suggesting to change the wapper label for div, or to remove the inner label. \nDo you want me to open an issue ?\nAlso, is the Grommet team have or is considering to implement a WCAG2 or a a11y validator like react-axe?\nThanks in advance. Sorry for bothering in this closed issue, but I've notice a weird clicking behaviour that can be fix by changing the label tag like so : \n<label htmlFor={props.id} className={classes}>\n    <input {...props} className={`${CLASS_ROOT}__input`}\n      type=\"radio\" />\n    <span className={`${CLASS_ROOT}__control`} />\n    <span className={`${CLASS_ROOT}__label`}>\n        {label}\n    </span>\n</label>. #1516 thanks for the quick response. @Thuranel You are right, I've made a really dumb and fast test to see if the warning was going to appear again. Basically, I removed the problematic props before passing the object to the div : \n```\nconst { children, onClose, size, status, ...rest } = this.props;\n...\nlet restNoContext = Object.assign({}, {...rest});\ndelete restNoContext.history;\ndelete restNoContext.intl;\ndelete restNoContext.router;\ndelete restNoContext.store;\nreturn (\n   \n      ...\n   \n);\n``` \nAnd that removed the issue.\nIt looks like it was intended for a better customization. Maybe @alansouzati you can tell us more about that and give us an update that. Thank you!. @karatechops  Sorry, I was out of the country for a while. The use case I had was doing a serialize on a form. Usually, the serializing methods take the input's name has a reference. I've noticed that currently the checkboxes and the radio button are not serialized. I think it's more a suggestion than a issue.\nWhat do you think? Using serialization for a frontend validation.. ",
    "foolproofit": "Workaround fix for the issue below. Use it instead of the original Layer component e.g.:\nimport {LayerWithScrollBack} from \"./ScrollBack\";\nand then:\n<LayerWithScrollBack closer={true} onClose={this.onClose}>...</LayerWithScrollBack>\n```javascript\nimport React from \"react\";\nimport {Layer} from \"grommet\";\n/*\n * This HOC is a workaround for Grommet Layer component issue with not scrolling back to initial position on IE11.\n * https://github.com/grommet/grommet/issues/1365\n * This can be used for any other component - just add additional exports at the end of the file.\n * The code is a modified version of the Layer component code.\n * /\nexport default function withScrollBack(WrappedComponent) {\nclass ScrollBackWrapper extends React.Component {\nconstructor(props) {\n  super(props);\n  this._originalFocusedElement = document.activeElement;\n  this._originalScrollPosition = {\n    top: window.scrollY ? window.scrollY : window.pageYOffset,\n    left: window.scrollX ? window.scrollX : window.pageXOffset\n  };\n}\n\ncomponentWillUnmount() {\n  if (this._originalFocusedElement) {\n    if (this._originalFocusedElement.focus) {\n      setTimeout(() => {\n        this._originalFocusedElement.focus();\n        window.scrollTo(this._originalScrollPosition.left, this._originalScrollPosition.top);\n      }, 10);\n    } else if (this._originalFocusedElement.parentNode && this._originalFocusedElement.parentNode.focus) {\n      this._originalFocusedElement.parentNode.focus();\n      window.scrollTo(this._originalScrollPosition.left, this._originalScrollPosition.top);\n    }\n  }\n}\n\nrender() {\n  const {...passThroughProps} = this.props;\n  return (\n    <WrappedComponent\n      {...passThroughProps}\n    />\n  );\n}\n\n}\nScrollBackWrapper.displayName = ScrollBackWrapper(${getDisplayName(WrappedComponent)});\n  return ScrollBackWrapper;\n}\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nexport const LayerWithScrollBack = withScrollBack(Layer);\n```. ",
    "Bensji": "Hi,\nI found that using the following structure works great:\n  <FormFields>\n    <fieldset>\n        <FormField label='Category description' htmlFor='description' error={errors.description}>\n        <textarea rows=\"5\" type='text' id='description' name='description' onChange={(e) => {\n          this._change(e);\n        }} />\n      </FormField>\n   </fieldset>\n</FormFields>\n\nBy using this, I don't have weird padding. However, I get scrollbars after the 4 rows are full, but then you can drag and (vertically) expand the textarea.. ",
    "ahappypie": "I didn't check the colors on the example, so it doesn't make a lot of sense. Here's an example use case that I've done:\njsx\nconst SERIES = [\n  {continent: 'NorthAmerica', label: 'North America',\n    colorIndex: 'white', highlightColorIndex: 'blue',  onClick: () => {\n      ...\n    }},\n  {continent: 'SouthAmerica', label: 'South America',\n    colorIndex: 'white', highlightColorIndex: 'red', hover: true},\n  {continent: 'Europe', label: 'Europe',\n    colorIndex: 'white', highlightColorIndex: 'blue',  onClick: () => {\n      ...\n    }},\n  {continent: 'Africa', label: 'Africa',\n    colorIndex: 'white, highlightColorIndex: 'red', hover: true},\n  {continent: 'Asia', label: 'Asia',\n    colorIndex: 'white', highlightColorIndex: 'red', hover: true},\n  {continent: 'Australia', label: 'Australia',\n    colorIndex: 'white', highlightColorIndex: 'blue',  onClick: () => {\n      ...\n    }}\n];\n<Box color='black'>\n  <WorldMap series={SERIES} />\n</Box>\nIt's basically a region selector (the colors are a little different, but I don't have the stylesheet), white dots on black background with blue highlighting for places that have corresponding sites and red highlighting for places that don't. The implementation seemed the most modular to me, but I can definitely see individual location choice being a better solution to the majority of use cases. \nI'd like to say collapse the two, but I'm not sure what your implementation looks like. It's probably safe to merge over this commit, and I can look at adding individual highlighting over your changes afterwards.\nEDIT: a GIF...\n\n. ",
    "leonardodino": "I couldn't find a nice way to add unit tests without including at least one of:\n1. a react-router mock\n2. enzime or another library that dispatches events on components.\nThanks for your time. \ud83d\ude04\nGrommet is an awesome project  \ud83d\udc4f . Thanks for the quick answer :D @alansouzati \nShould I make this change to the <Button> component too? another PR?\nAs far as i can see (a quick search) these are the only components that use direct router navigation.\nValeu! :v:. I dont mind for commit counts. I bet the diff would be the same anyways. (:\nImplementing (correctly) the idea is what matters most.\nI guess you know that anyone that says otherwise is against what open-source stands for.  \ud83d\ude09 \nFor the sake of brevity, and faster turnaround, I opened #1373 . ",
    "rkahle": "Sorry for reopening, I just wanted to help future people finding this and trying to use Grommet with Meteor... :)\nAccording to your answer @RyanCCollins you have to use meteor-scss and create a scss-config.json file at the root of your project with following content:\njson\n{\n  \"includePaths\": [\n    \"{}/node_modules/grommet/node_modules\"\n  ]\n}. ",
    "cristiandley": "@rkahle im getting this error doing the same\nbash\n   While building for web.browser:\n   /node_modules/grommet/scss/vanilla/index.scss: Scss compiler error: File to import: inuit defaults/settings.defaults not\n   found in file: settings \n. Hi! i did it \" work \". @AaronVasquez @alansouzati \n\n\nadd fourseven:scss\n\n\ncreate scss-config.json at your root with this\n\n\n{\n    \"includePaths\": [\"{}/node_modules/\", \"{}/node_modules/grommet/node_modules\"]\n}\nand (of course... import scss at your main.js client-side) \nimport \"grommet/scss/hpe/index\";\nif you struggle... i can upload a grommet-meteor-example-kit\n. @mvmsaikrishna im sorry the late. Mmmm tested again. Are you sure you npm install grommet ?. @mvmsaikrishna  it should be working without calling the cdnjs\nMy main.js\n```JavaScript\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Meteor } from \"meteor/meteor\";\nimport LexApp from \"../imports/ui/LexApp\";\nimport \"grommet/scss/hpe/index\";\nMeteor.startup(() => {\n    render(, document.getElementById(\"app\"));\n});\n```\nMy main.html\nhtml\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Grommet Test</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\nMy MainComponent.js\n```JavaScript\nimport React, { Component } from \"react\";\nimport App from \"grommet/components/App\";\nimport Box from \"grommet/components/Box\";\nimport Split from \"grommet/components/Split\";\nimport LexHeader from \"./common/LexHeader\";\nimport LexFooter from \"./common/LexFooter\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Rutas from \"../lib/Rutas\";\nclass GrommetApp extends Component {\n    render() {\n        return (\n            \n\n\n\n\n\n\n\n\n\n\n        );\n    }\n}\nexport default GrommetApp;\n```\nscss-config.json\n{\n    \"includePaths\": [\"{}/node_modules/\", \"{}/node_modules/grommet/node_modules\"]\n}. ",
    "AaronVasquez": "I'm having no luck with this too. Has anyone been able to figure this out for meteor 1.5 ?. How do I try that?. nice, using the minified CSS works! Any ideas on how to debug the scss issue?. @cristiandley you're a life saver! thanks!. ",
    "s-kris": "Hey @cristiandley  I did exactly as you wrote. but I'm getting this error on client \nUncaught Error: Cannot find module 'grommet/scss/hpe/index'\n    at makeMissingError \nCan you please help?Thanks!\nEdit: Tagging @AaronVasquez too!. @cristiandley My bad, i should have been clearer. I did according to your comment on oct 13th.\nYes, I installed grommet. As a temp fix, I imported the css file from cdnjs as mentioned by @alansouzati. Styles are working now. . Nope.. did exactly like you posted.. still \"Uncaught Error: Cannot find module 'grommet/scss/hpe/index'\nat makeMissingError: \nThanks for your patience though! I've decided to implement someother UI framework.. @alansouzati thank you!! that was the problem.. now it's fixed!\nBut I started playing with Material-UI v1 already :) \n@cristiandley . ",
    "JonathanWbn": "I am happy to try and reproduce with a codepen. How can I set up a codepen with grommet?. Here is the codepen with the issue. Just open the menu and start scrolling:\nhttps://codepen.io/anon/pen/VWPbqp. Yes, that helps a ton! Is there a way for me to just disable the translation for grommet elements?. I love the attitude! How can I implement the translation? I see the link you sent, and I will create the same file for the different languages, but how do I integrate it with the app then?. Yes, that makes perfect sense. Thanks for your help, also in the name of our blind customers. ;). ",
    "sclanc": "Thanks a bunch! I am blown away by how amazing this framework is.  . ",
    "agrawalPratik": "In which version we will get this fix.. @alansouzati In which version we will get this fix.. ok Thanks @alansouzati I have posted this to my dev team last week, hope this will solve our issue.. @alansouzati In which version we will get this fix.. hi @alansouzati sorry I didn't get it, is this issue rectified or do we need to change something from our end in the code to solve the issue.. HI @alansouzati,\nI completely missed it as I thought you were in conversation with the other guy.\nI will ask my team to use this as recommended by you.\nThanks for your help.\nRegards,\nPratik Agrawal. Hi Alan,\nI can still reproduce on my IE my version is 11.0.9600.18697IS\n\n@alansouzati : Issue is very tricky follow below steps:\n1 - First hover on the Options form of layer you will see a scrollbar , initially there is no scrollbar but once you hover on it you will see the scrollbar in the form\n2- After seeing the scrollbar in the Options pane, quickly click on the show layer button and then you will be able to see the option pane scrollbar coming on the layer form, scrollbar will be there for very few seconds so you need to do it quick.\nI hope this helps.\n. yes @alansouzati it is a browser issue and I have checked my browser version its updated and its IE 11.x as per your support docs.. Yup I have added this in grommet-index page, thanks \n. Hi Alan, I am talking about only time input box, wherein user don't enter AM or PM, they just enter numeric value, also user should be able to enter time manually without colons. Can you please reopen this issue. @alansouzati . okk thank you @alansouzati I will assign this to my team and will check if that helps us or not. Thanks. okkk thanks @alansouzati, I will let you know if I have further queries on this.. Hi @alansouzati,\nMy team tried to use onchange event to solve this issue as per our product requirement,\nSolution works for all the browsers except for IE11\nThe problem in IE is when the input box doesn't have a default value box even after handling through onchange event user can still enter characters and when input box have default value handling done is successful and user can't enter characters.\nBelow is the codepen link, issue is reproducible when NumberInput does not have any default value,\nhttps://codepen.io/anon/pen/zdxQpq\nBut, when NumberInput has default value, user can not enter characters, below is the codepen,\nhttps://codepen.io/anon/pen/ayOOWd\nThis issue is observed only in IE.\nPlease suggest on this.. Hi @karatechops just had a discussion with my team and they said this change will be in grommet library file and they are not allowed to do that, looking forward for new resolution for this.. my version is 11.0.9600.18762IS\n. hi @karatechops we are using windows 7. hi @karatechops if you open codepen in the browser you can still reproduce this issue, if you can fix that that would be great, also making grommet library changes is not allowed in our product, so it would be great if you can provide us the resolution on this.. Issue is same for me, but you can refer code in other browser and see the issue in IE11\n\n. no problem @karatechops can you ask @alansouzati to help on this.. ",
    "roytz": "Can we remove this default import?. @alansouzati can you please merge this PR? It will be very helpful. ",
    "justinglibert": "It really depends on the situation, in a modal it doesn't open on the top of the element (which is really annoying)\nSent from my OnePlus ONEPLUS A5000 using FastHub. I didn't know about the flush prop (It's indeed in the doc). Thank you for the codepen. My main concern right now with V2 is the lack of some components but I suppose you guys are working hard on it \ud83d\ude01\n. I'm using a lot of visualisation components in my app (that's one of the main reason I'm using Grommet). The components are amazing and while some of them are highly opinionated (Annotated Meter,..) they are extremely useful.\nThings like the search bar in the header which is properly themed are also really useful. These components can be found in most apps and while I understand that you want to focus on highly customisable components which, with a little bit of work, can be used to recreate these patterns, I like these \"already made\" solutions in V1 a lot. I understand that there has to be a trade-off between the two approaches but I still secretly hope that all these opinionated elements will appear in V2.\nAlso, do you know if your designers will release a style guide at some point (or some templates like they did for v1). Having a document with screenshots of complete interfaces made with Grommet helped me a lot while designing mine. I hope these guides will available for V2 too!\nThanks for the amazing work. No it's fixed. Thank you!. ",
    "StevenXL": "@alansouzati Thank you. This is the second time my PR has not met the linting standards. Is there a link that I can view on how to get setup so as to avoid these issues. (I'd think I'm going to use Grommet a lot and would like to give back when possible). . ",
    "sotojuan": "Thanks!. ",
    "florianbepunkt": "Is there an example how to use this? I found nothing so far\u2026\u00a0using grommet@1.8.3 and when specifying options as object my <Select /> component shows 'object object'.. @drewlustro Thank you. @alansouzati I think there needs to be a check whether value is an array, since it could also be an React element and the first you select something select would be empty which would equal true in your suggestion. At least in my test case when returning React elements in value prop this would throw an error, that map is no method of value.\n. I don't need the check if options is an array here is strictly necessary. if options is no array this would cause an error much earlier, regardless whether multiple prop is set or not.\non a side note: ci tests fail\u2026 not sure why.. Experiencing the same issue. I use create-react-app. Interestingly everything worked, until I upgraded my deps\ngrommet from 2.0.0-beta.6 to 2.0.0-rc\ngrommet-icons from 3.0.0 to 3.1.0\nreact from 16.5.2 to 16.6.0\nreact-dom from 16.5.2 to 16.6.0\nreact-scripts from 2.0.3 to 2.0.5\nI did not use an ejected webpack config. Can also confirm that this has to do with\nimport { hpe } from \"grommet/themes\";. @alansouzati Narrowed it down a bit further\u2026\u00a0the problem is introduced with the change from grommet 2.0.0-beta.6 to release candidate. tried to look further, but could not find a changelog for grommet 2\nEDIT: Found the changelog under releases\u2026\u00a0and saw that hpe theme was removed from core and has to be installed as a seperate package. Sorry abut the fuzz.. This has been fixed in latest version of grommet. Closing.. Current workaround: set modal prop to false and then manually creating a backdrop. I took a look at the code but could not find where the zIndex is set.. @atanasster This does not solve the problem\u2026 it's not about the Layer component but the wrapper div the component gets placed. Styling the layer still gives me\n<div tabindex=\"-1\" class=\"StyledLayer-rmtehz-0 frrJgQ\">\nwhich has a z-index of 10. Inside I have my Layer component with a higher z-index. This seems to be a more general problem\u2026 there are more components that set default zIndex values, for example the Drop of the select component. So in general: Would it be possible in the future to have a base z-index that can be set in theme\u2026\u00a0and component calculate their relative value based on it?\nFor example: If you have a base of 100, Select Drop would be 120, Layer would be 190, etc. if base is 0, then Select Drop would be 20\u2026\u00a0and so on.\nAlternatively: z-indices of components are set in the theme and are overridable. this would provide more flexibility.. We work with storyshots internally for our component library that is based on grommet. It allows for snapshot testing of a storybook suite as well as visual regression testing via pupeteer. We integrated this in our ci process, building a static version of the storybook first, then running the visual regression test suite.\nIt takes rather long compared to snapshot tests, about a few minutes for about 120 tests. And for know this only works with pupeteer (so no cross-browser testing).\nUpside is that it is tigthly integrated with storybook, so once you have a storybook suite of components ready this is pretty much fully automated. And as you already use storybook, this generates little overhead in maintenance.. Hello @krismorf, has this been pushed to npm yet? I run the latest grommet and the issue in the Codepen still exists.\nEDIT: I updated the deps in the codepen. Issue persists.. Okay, I see\u2026\u00a0the fix just hasn't made it to npm yet. Closing this.. @ericsoderberghp I don't think there is a missunderstanding. Could you please have a look at the codesandbox I provided?\nThere are 100 items with a step size of 10.\nIf you open on a large screen where there is enough space, only 20 elements are rendered even if there is still space.\n\nExpected behaviour: More elements should be rendered.\nIf I narrow the screen space so that it becomes scrollable and reload, everything works as expected.\nAlso I add fill={true} to the outer box it also works. I'm not sure what the problem is exactly but in our internal apps we experience this issue with all tables where we try to use InfiniteScroll\n. This is related to #2644 \nYour step size is 12 and there are 24 items rendered. There is only one \"reload\" / additional render when there should be several batches of elements rendered.. Interestingly this only happens, when there is enough space so no additional scrolling is needed. With the example in this issue: If there is enough space for 30 elements to be rendered, only 24 items are rendered.\nWhen there is not enough screen estate (for example on a mobile) and scrolling is necessary, everything works as expected.\n. @anpieber Can you give a code sandbox to reproduce?. @anpieber Thank you. This is not a bug in grommet but due to changes in how react handles context. For more info please have a look here: https://github.com/facebook/react/issues/13336\nYou need to reintroduce the context. Here is a simple example: https://codesandbox.io/s/v025zqyl90\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      alal\n      <Layer onClose={() => {}} closer>\n        <Provider store={store}>\n        <ConnectedInnerComponent />\n        </Provider>\n      </Layer>\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\nAlso react-redux exports a ReactReduxContext component.. ",
    "tvojtech": "@karatechops Still not fixed (Grommet 1.7.0). I double checked it in latest Chrome and and Safari (Version 11.0 (12604.1.38.1.7)) and didn't work. Just submit the url and do not touch the page. You should see endless spinner. Once you scroll or resize viewport (e.g. open chrome console) onMore gets called.. ",
    "jfiala-cz": "@karatechops Please reopen this defect. Try the Codepen example again - the spinner won't disappear until you cause a rerender or scroll the screen. It is broken across all browsers - behaves exactly the same in FF, Chrome, Edge...\nThe defect can even be (rarely) noticed in the grommet documentation, which means there do not even need to be two Split components for this bug to appear.\n\n(more items will not load unless I scroll/resize the page)\n. I'll try to fix it next week.. We have 'a' solution we use in our project (patching grommet during build), but I was hoping to come up with a better one before submitting it here.\nOur current solution is removing the if condition around result.push(document); in findScrollParents() ( https://github.com/grommet/grommet/blob/master/src/js/utils/DOM.js#L38 ).\nThe problem is not just about nested Splits. On Windows, this codepen example does not work correctly in Chrome and Firefox (it only works in Edge suprisingly). Only when resizing the window are more items loaded:\nhttps://codepen.io/anon/pen/MQKaWv\nYou can uncomment our fix in the codepen example. It works with all browser and I am not aware of any side-effects, but I am sure there is a better way to fix this (didn't get the time to investigate this further yet).\nCan anyone comment on our fix?\n. ",
    "tusharkhatiwada": "@Hackbyrd Can you share your code too?. ",
    "Hackbyrd": "I only changed 4 files from the react-boilerplate repo after installing grommet\n\napp/containers/homepage -- tried to import and render LoginForm (Failed)\napp/app.js -- added import 'grommet/grommet-hpe.min.css';\npackage.json -- npm install grommet, and added \"grommet\" to \"dllPlugin\"\ninternals/webpack.base.babel.js -- added '.json' to resolve.extensions\n\n\n\n\n\n. @tusharkhatiwada I posted my code above. ",
    "frandr": "I did a fair amount of triaging this and believe I have found root cause. There's a problem in the state machine in Menu.js (see code starting on ~line 272). The problem is that when the filter icon is clicked (under some circumstances) Menu goes thru the 'focused', expanded', and then 'collapsed' states. When we pass thru the expanded state there is already a Drop object in the DOM, and we add a new one when passing thru the expanded state. We then pass thru the 'collapsed' state, which removes the duplicate Drop from the DOM, but leaves the original drop in place. Thereafter, clicks on the filter icon just add/remove a duplicate Drop in the DOM. The only way to get rid of the original Drop is to refresh the browser.\nThis can be fixed by adding a conditional to the 'expanded' case, ie:\nif (this._drop) {\n     this._drop.remove();\n     this._drop = undefined;\n}\nOr maybe better:\ncase 'expanded':\n  if (!this._drop) {\n    _KeyboardAccelerators2.default.stopListeningToKeyboard(this, focusedKeyboardHandlers);\n    _KeyboardAccelerators2.default.startListeningToKeyboard(this, activeKeyboardHandlers);\n    document.addEventListener('click', this._checkOnClose);\n    document.addEventListener('touchstart', this._checkOnClose);\n    this._drop = new _Drop2.default((0, _reactDom.findDOMNode)(this._controlRef), this._renderMenuDrop(), {\n      align: this.props.dropAlign,\n      colorIndex: this.props.dropColorIndex,\n      focusControl: true\n    });\n  }\n  break;\n. Seeing this also. Would appreciate if this could be included in a release ASAP. . ",
    "blyefd": "Here's a little hack...\n<Menu ref={(c)=>{this.menu = c;}} closeOnClick={false}>\n...\n</Menu>\nwhen you want to close the menu programatically:\nthis.menu._onClose();. @karatechops:  Here is a codepen which demonstrates the issue.  I would also like to have nested menus (not inline).\nhttps://codepen.io/anon/pen/EooJaK\nCan you please reopen is issue?. ",
    "ThanosDi": "I have the same issue here and I sadly see that there is no update from this ticket \nhttps://github.com/grommet/grommet/issues/1169\n. ",
    "guillaumeLamanda": "It would be great to have this in v2 \ud83d\ude04 . ",
    "droarty": "Let us know when you have a sample.  Thanks.. ",
    "mjsevilla": "@karatechops are there any other major drawbacks to using your create-react-app-grommet repo? Also, sounds like we'll be able to correctly/elegantly use grommet w/ create-react-app when v2 comes out, yes?. @alansouzati I'm trying to view the code sandbox on the v2 Grommet website and I'm getting an error saying it cannot be found? Link What gives? I've been trying to make a simple form in Grommet in for the last 3 weeks and no one has been helpful whatsoever. The v1 docs on forms are useless (especially if forms are phased out in v2) and the v2 docs are still in development.. Yes, apologies for the late response!. All that extra whitespace I want to use.\n. Yes, thanks for the clarification. Cheers. . Anyone? I don't understand why it's not working correctly. There is nothing special about my code; it's almost a direct copy of what the docs provide. Speaking of, the docs do a horrible job of showing code usage for the Form component.\nYou guys really wrapped all of the components of the form into some <t /> component for ease? How do you expect people to understand how that works if we can't see how it's used properly?. ",
    "stsrki": "I have just found about this project and it seems really great. Since I'm heavily using typescript in all of my projects it would be great if grommet would also have the support for typescript. Can you please tell are you working on this and if you are, do you plan to release it soon? Thanks. ",
    "srghma": "Maybe its worth to rewrite grommet on typescript, cause its hard to maintain type definitions in non typescript projects. @RyanCCollins You can generate pretty much whatever you like js using different targets. Use target: esnext with jsx: react-native to generate codebase indistinguishable from the present. \nAlso it can facilitate flow typings generation using flowgen\nAnd ... grommet written on typescript ... you know, its better). ",
    "davidsoderberg": "@RyanCCollins, how is it going with this?\nI need it for one of mine project \ud83d\ude04 . ",
    "dennari": "Any news with this? What's the NEXT_TS branch?. Here's how they went about it incrementally in ReaKit: https://github.com/reakit/reakit/pull/146. @alansouzati, I'd be happy to contribute as well. I know TypeScript and have some experience from a similar task in Gatsby.. ",
    "thomschke": "Grommet is great stuff. We have to choose a React-UIFramework ASAP and TS is fixed.\nThis issue is set to milestone 2.1.0 which should be published on 7/17. Any good news?. see #2236 . There are missing modules during importing types:\nhttps://github.com/grommet/grommet/blob/1de06c31d0cee92cf65f512228c4d6f87f81bccb/src/js/index.d.ts#L32\nhttps://github.com/grommet/grommet/blob/1de06c31d0cee92cf65f512228c4d6f87f81bccb/src/js/index.d.ts#L36\nhttps://github.com/grommet/grommet/blob/1de06c31d0cee92cf65f512228c4d6f87f81bccb/src/js/index.d.ts#L38\n. Actual I get following compile error when using the declared components as JSX elements:\n```\nJSX element type 'Component<...>' is not a constructor function for JSX elements.\n  Types of property 'render' are incompatible.\n    Type '() => ReactNode' is not assignable to type '{ (): ReactNode; (): false | Element | null; }'.\n      Type 'ReactNode' is not assignable to type 'false | Element | null'.\n        Type 'undefined' is not assignable to type 'false | Element | null'.\n```\nsee DefinitelyTyped/DefinitelyTyped#28636 \nYou can extend React.SFC (instead of React.ComponentType) as a workaround.. ReactNode is-a ReactFragment is-a ReactNodeArray (see). Yes, I think you can use PropTypes.node (see):\n\n// Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node \n. I closed PR DefinitelyTyped/DefinitelyTyped#28636.\n\nBut I've found that you're not exporting the component directly, but instead exporting a wrapper using compose. \nThis is a HOC ! So you should generate declarations based on React.StatelessComponent ( instead on React.ComponentType which includes React.ComponentClass), right? \nIf done, then there are no compile errors anymore.\n. Due to changing tools/generate-readme-ts.js I have to merge your changes from #2255 to generate correct declaration files.\nSo there will be merge conflicts if you merge both PRs, sorry. . BTW: sources for react-desc@3.5.0 are not published yet. Hi @alansouzati, I found the cause for my compile errors in #2253. \nGrommet depends on @types/react@^16. My test project includes another package which currently depends on @types/react@^15. But this major versions are not compatible. When you mix react components from both packages then you get errors from tsc like DefinitelyTyped/DefinitelyTyped#21242.\nI think React.ComponentType is the best choice for your generated ts-declarations. But #2253 is now merged & closed. So I have to open a new PR. \nSorry about the circumstances.. ",
    "srallen": "@karatechops thanks for taking a look at this. I look forward to version 2.. @alansouzati Yes, that makes sense. Using the BEM suffix there would be consistent with how grommet itself applies the classes, so I'll revise the PR to work that way. Thanks.. It hasn't been an issue for me with the latest releases. . Ah, so the intended behavior is to be like a select? It renders in the DOM as a button, not a select, so I was expecting hover/focus states like the other buttons. You are correct that there's a focus style applied when tabbing, but the button does not have a hover/focus styles if that state is forced in Chrome dev tools.. Yes, I understand now. I'm ok with the default to behave like Select as long as there is a way to customize it. Right now, the closed menu can be customized with targeted CSS, though it would be better if it could be done with props. The open menu is not customizable except for the props for setting its background color and alignment. It would be helpful if I could target styles for the inner Box for the open menu especially for the font color and padding in addition to being able to add hover and focus styles for the button. . Ok I can put together a codesandbox and share here. . Here's a codesandbox example: https://codesandbox.io/s/m39k907669\nI have a logged in user menu that I'd like to add some focus and hover styling to the menu button. I can add focus and hover styles to the individual button label components for the drop icon and the text label, but not the button either open or closed. Adding the hover and focus styles to the individual button label components isn't really a solution for a hover and focus state for the whole button.\nI thought about trying to track the open and closed state with a callback for the onClick event, but adding an onClick prop to the Menu component breaks the event entirely. If I could track the open and closed state, then I could at least vary the button styles depending that state. I'm not sure if this a better solution than adding more props like dropBackground to specify specific open menu styles.\nIn the menu design, the open/close toggle button should stay black and the open menu's background is teal. I can't do this at all at the moment, though I might have flexibility with that (Designer might be ok with a teal button when open), but the text color should change to white on the teal for legibility. . An input that supports multiple values would be useful for me as I'd like to replace using react-select (see the async multi-select example: https://react-select.com/async) since it has poor accessibility and the library has had an unstable API requiring nearly fully rewrites each major version update. . Could we make the download button, and possibly the other controls, configurable? I realize that savvy users can figure out how to download the media anyway, but I'm tasked with making sure that it doesn't look like we're promoting the ability to download in the UI, which means disabling it or hiding the button if possible. Chromium added the non-spec controlsList attribute to support configuring this: https://bugs.chromium.org/p/chromium/issues/detail?id=675596, so something that works cross browser would be beneficial.\nETA: the controlsList proposal: https://github.com/WICG/controls-list/blob/gh-pages/explainer.md. That's correct. FF never exposed the download button like Chrome did. I just mean a cross browser way to configure the controls, like controlsList, since the other browser engines haven't adopted it yet. . @ShimiSun Would you like me to move this issue over to the grommet-icons repo?. Ok, I've opened it at https://github.com/grommet/grommet-icons/issues/87. ",
    "noorisunique": "Could any one solve it  ?. Hi thanks for response why i am using justify='center' because it makes my Main Box in center alignment that is correct but here nested child is coming in center also if i am using alignSelf or align prop not working i want like this \n\ncould you provide me any solution on this i hope you got my point. Hi This code is breaking in IE browser could you please check it once all box coming in one row \nsee screen shot\n\n. Hi thanks for response but I don't want to use Column Component i want to achieve Row Layout only \nhere what you have done is fix code for tow Box but  i don't want to fix two Box only suppose i want 3 Box  or 4 Box in a row then how can i control it , i want like this screen shot given below \n\n\n. ",
    "oswaldoacauan": "This happens because the input is missing the [type=\"text\"].\nThe same problem happens when you have inputs of type 'tel' or 'url'.\nI can send a PR fixing it if you guys want.. The issue remains with inputs type tel and url.. ",
    "jstlaurent": "@alansouzati : If I'm reading the code right, the Toast component is explicitly extracting these four elements (history, intl, router and store) from the context and passing them as props to the ToastContents sub-component, which in turn now passes them on the div component (which can't handle them).\nPer the comments, that's a way to carry along the rendering context into the layer. But these four elements should be removed from props and transformed back into a rendering context in ToastContents before the rest of the props can be passed down to the div.\nThat they are not is the origin of the problem. I'm not sure HOC wrappers are the issue here, since we're not using any.. @alansouzati : Thank you!. ",
    "george-aidonidis": "@dgennetten I am thinking that I did not make a good job on explaining the second bullet. Here is a more detailed explanation:\n- User opens the drop down menu.\n- User types an item in order to filter it from the list. The item comes up first to the list.\n- User presses enter (without selecting it with arrow keys) and the item becomes selected.\nThis does not happen here (user presses enter and the item on top does not become selected). \n\n. ",
    "mariosant": "The kind of behaviour @George-Aidonidis is trying to explain, can be found on Select2.\nTry typing something there and hit enter. It selects the first one of the available results.\nhttps://select2.github.io/examples.html. @karatechops I understand your concerns. Maybe adding this as an optional behaviour, then?. Thank you for your response, @karatechops .. ",
    "Gehbrial": "Thank you very much! :). Would also love if it we could make it spin faster!. ",
    "DmitrijDN": "@cherih In browser support IE11 is presented, so it is necessary to fix or say that IE11 isn't supported.\nhttps://grommet.github.io/docs/browser-support/. @alansouzati Still doesn't work\nhttps://grommet.github.io/docs/spinning. ",
    "RajaKorada": "Thank you @dgennetten  for the response.\nI would like to implement fixed header table with vertical and horizontal scrollbar with sorting feature..\nI am not facing any issue with sorting, untill scrollable =\"false\"\nIssue arises once i add scrollable=\"true\" attribute to the table, then table header moves to the bottom of the page  and sorting is also not working.\nI need table header to be fixed with vertical and horizontal scrollbar along with sorting feature..\nCould you please help me..\n. Thank you @karatechops for the response.\nCan you please visit this link  a link\nPlease check in medium or Large Screens for getting clear view of the issue ,find attached screenshot .\nPlease write to me for further information... \n\n. ",
    "jornncc": "I know that this issue is closed, but there is an issue with not being able to click the column headers to sort when scrollable=\"true\". That issue seems to be lost in issue #1606 . [using Grommet 1.6.0].. There is an issue with not being able to click the column headers to sort when scrollable=\"true\". . Yep, was able to get the grommet-docs running locally... \nTx \nWill use the new grommet.github.io/ url. . ",
    "gjsjy": "It is an issue in my code, closing this issue.\nThanks.\nGJ. ",
    "atanasster": "Thank you , fantastic. Thanks, that works for me, was just wondering if you guys might not prefer this to be the default behavior. Great, thanks :) will do. PR https://github.com/grommet/grommet/commit/8b2f95252053e8717779f48ccca528de5c0651a5, closing . I think I did, hadnt realized all the commits go into the same PR. Thuranel, can you try this css patch :\n.grommetux-form-field__contents>.grommetux-select input{\n  padding-left:22px;\n } \nIf there are no side effects, I could submit a PR. \"Currently, Grommet 2.0 does not provide Form or FormField components\"\nhttps://v2.grommet.io/form . I am using 2 with Apollo and grapql, there is nothing on the grommet side to be added, if you want to close this one. fix for failed tests. Merged #1832..  #1816 has been merged and should fix the issue. Can you please confirm. thanks, understood. address with gap='xxx'\n1877 . fixed with #1939 . This was fixed in #1901\ndelete rest.restrictScroll;\nunfortunately the issue was not mentioned and I didnt catch the fix on my end. thanks, I will open it there. fixed with #1939 . possible implementation of multi-select: \nhttps://github.com/atanasster/grommet-nextjs/tree/master/components/grommet/grommet-multiselect. Multiselect fixed with #1960 closing this and will create a new issue for inline. addressed with #1876. Sounds good, thanks. Yes, thats the one i mean. I can make it like that, just meant its a great component to have built-in to amplify the enterprise image. Just my opinion. implemented in #1944 . Closing, added a component myself to grommet-controls, probably ficus on more pressing issues. Yes, it would work, but the main issue is that Layer does not adapt to the <Box /> fill/basis, and the user needs to set the fill/sizes both on the Layer and eventually the contained elements. \nHere is another example:\n<Layer position='left' full='vertical' modal={false}>\n  <Box direction='row' fill='vertical' basis='large'>\n    <Box background='brand' basis='large' >\n      Large?\n    </Box>\n  </Box>\n</Layer>. My second example is about the size on the cross-axis, and the issue was entered before <Layer full was created (even though a bit cumbersome, it solves the full vertical seize issue.), so we can close this issue and just keep the issues about horizontal size to keep a Layer of a specific (predetermined) size, regardless of the size of the content.. Fantastic, fixed in latest NEXT-stable. CodeSandbox libs are still not updated. Documentation is now updated in that those two props will not work together. Fixed with #1909 . Actually WorldMap onHover / onClick are part of the continents (it would be like having those for each point, which would be amazing if possible for Chart), so you can identify the item being hovered and display its information :\n  onHover: hover => this.onContinentHover(hover, c.name),\n. Fixed with #1908 . fixed #1967 . Tested fixed in last update. Fixed in #1962 . Implemented in #1971 . not too important. I guess we can close it, but it was a real-life example.\nAt the end I had to adjust the default `#00BCD4` to `#00ABD4` to match the Material UI theme. Another option - if possible make the threshold an option of the theme, so users can decide for each theme. fixed as part of #1981 . https://94qvn9r31o.codesandbox.io/anchor :\n\n\nText\n\n\n\nText\n\n\n\n. With the internal calculation, for the default vanilla.js theme, 'brand' is a dark color, I don't think changing the definition of dark has a role here.\nIf changes are to be made, maybe add a light and dark color to Anchor (and other components) to be selected based on the background. Possibly a global brandContrast color that the theme components can pick from. Just to make sure we are on the same page, brand or black makes no difference to the issue being present:\n\nText\n\n\n. Fixed with #1929 . Fixed with #1929 . fixed with #1923 . My specific use case was to set a 'loading...' layer as initial prop and then the data is loaded/error at the client side (API had to be called client side) and the layer is closed.\nAdditionally I had this error when we had some default of <Select /> being open. \nWithout having those use cases myself, I think other would include blocked content, data entry forms where the form is 'ready to type' with a list of selections already opened. . Thanks for the expanded info, however the entered issue was to pass several other props in the addition to the value prop:\n`placeholder` and `onChange` - this allows the value/label to be editable (for example a list of tags that can be removed quickly instead of opening the `<Select />` to un-select them). The use-case url has changed to https://grommet-nextjs.herokuapp.com/add-ons/multiselect and then the label prop\nif (typeof label === 'function') {\n    selectLabel = label({ placeholder, value, onChange });\n    }\n``\nIf possible to add those two additional props and with this I can get rid of my Select clone, all other functionalities are great, including the virtualization of rendering. Ok, try to replicate, but on the other hand its a non-breaking change that saves duplicating code.. A proposed solution to handle child svgs with text colors, since the problem is not only related to`:\nhttps://github.com/atanasster/grommet-nextjs/blob/master/components/grommet/utils/styles.js\nexport const colorCss = (color) => {\n  return css`\n    color: ${color};\n    svg {\n      stroke: ${color};\n      fill: ${color};\n      transition: none;\n    };\n  `;\n};. and remove from StyledButton.js:\n...\n // TODO: revisit this\n  svg {\n    fill: ${props.theme.global.colors.white};\n    stroke: ${props.theme.global.colors.white};\n    transition: none;\n  }\n.... updated link to grommet-controls : https://github.com/atanasster/grommet-controls/blob/master/src/js/utils/styles.js. fixed. This warning is from the samples on grommet-site, ported to nextjs.\nIf it can give a clue, Calendar also gives an error SSR when the minute changes between the time its rendered server side and client side.\nI can investigate further if needed. Cant reproduce with latest update. Possibly it was a timing issue like with Calendar, will close for now and re-open when I have exact reproducing steps. I guess <Button /> disabled will not be heard, closing. Fixed #1961 . Fixed #1961 . #1966 Select and menu size added. secondary is an additional state (to primary) that some themes have (ie material UI) for anchors and buttons.. fixed with #1965 . Fixed in #1959 . fixed #1968 . confirmed fixed in #1977 . Another downside of styled-components in themes is that it will require some javascript (and styled-components) knowledge from theme designers.. It was fixed by making the select background white, its ok although i preferred it when select was using by default the current background. It makes a bit sense :) but check how Menu is styled \nhttps://grommet-nextjs.herokuapp.com/preview. Also how select stands out and is different from all other controls :\nhttps://grommet-nextjs.herokuapp.com/preview?theme=black\nImo, this is an issue, but at least the select arrow is visible, so less of an issue than previously. I would agree with eric on this one :) \nLets see the new theme changes and will test it again. Thanks, yes i saw that and updated my themes. It was not fixed \nhttps://grommet-nextjs.herokuapp.com/?theme=dark. tested fixed. Its slightly more visible, you can re-open if desired:\ndark theme:\n\nblack theme:\n\n. I have two cases\n1. https://grommet-nextjs.herokuapp.com - outermost  (does not work anymore) \n2. https://grommet-nextjs.herokuapp.com/theme - inner  (works when you change props of the theme)\nReally not sure it can be acceptable not working changing the theme at the global  as that would be the most common use case. Thanks, I did but had two reasons for adding label\n value usually stores the selected items themselves (doesn't have to)\n not to introduce some incompatibility with the existing code\nI am also ok to go for value. I added placeHolder and onChange, so users don't have to change any of their Select code when adding a custom editor. The select placeHolder would actually not be visible if there is a custom editor on top of it. Here is an example, that acts like a regular select: https://github.com/atanasster/grommet-nextjs/blob/master/pages/add-ons/multiselect.js\nand the code for rendering the label (passing through placeholder and onChange:\nexport const TagsSelect = (props) => {\n  const { tagProps, ...rest } = props || {};\n  return ({ placeholder, value, onChange }) => (\n    <Tags\n      focusable={false}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      tagProps={{ ...tagProps, onClick: (e) => { e.stopPropagation(); } }}\n      {...rest}\n    />);\n};. The example, running live: https://grommet-nextjs.herokuapp.com/add-ons/multiselect. and an actual use-case, selecting the visible fields for PagingTable : https://grommet-nextjs.herokuapp.com/add-ons/paging-table. This PR also has code for #2007 . removing this PR, as they are mixed up with the dark theme PR. https://github.com/atanasster/grommet/blob/d9ce34f832fc55c0705445e252d5a02f1d6111b8/src/js/themes/dark.js - icon extend updated for dark theme to account for color selected as well as if the color selected is dark/light on dark/light background:\n. Mr Stale Bot has been busy closing issues :). The PR of the select and dark theme have been added together, I am not really that good at separating PRs. . removed Select PR changes. #2151 does not fix the issue, actually makes it happen for grommet theme as well. Pr is not needed i guess but a fix is needed. closing this PR, issues are still not fixed but the themes structure was changed since then.. It works in some cases, however if you have multiple child that you want to adjust them at the center of their parent, setting flex=false does not adjust the size of the parent. \nwith flex false - width is adjusted, but child are not center aligned:\n<Box fill={true} align='center'>\n      <Box direction='row' basis='small' gap='small'>\n        <Box background='brand' basis='small' flex={false}>\n          Text\n        </Box>\n        <Box background='brand' basis='small' flex={false}>\n          Text\n        </Box>\n      </Box>\n    </Box>\n\nwithout flex prop, child are centered but basis is not taken into account:\n<Box fill={true} align='center'>\n      <Box direction='row' basis='small' gap='small'>\n        <Box background='brand' basis='small'>\n          Text\n        </Box>\n        <Box background='brand' basis='small'>\n          Text\n        </Box>\n      </Box>\n    </Box>\n\n. fixed #2035 . Example:  https://grommet-nextjs.herokuapp.com/add-ons/card\nThe Card on the top - when you hover, flips and the back content is some long text. Fixing this issue will allow the long content on the back to scroll (currently overflow hidden does not scroll).\nThe source code for the use-case : https://github.com/atanasster/grommet-controls/blob/master/src/js/components/Card/Card.js\n. I was suggesting two options - updating the docs or re-adding plain prop. \nPossible use case is a list of links (lets say for a menu) - where you want to specify multiple properties of Button and avoid having the implementation would have to check and put the label as a child. . Fixed #2034 . Still not fixed. just tested again. you can test with a rest api being called in response to TextInput onChange={this.onSearch}. I have several use cases in my repos and still need to use my cloned version of TextInput. The rationale is to have a single label, help hint. error for those related input controls (their are parameters of the same field).. Here is a live page with the use case: https://crypto-grommet.com/models/playground (the optimizer, but also try click on \"add layer\" and edit the various parameters). True, those are field and parameters for the field. But visually, I have opted to have the subfields with a label next to them (not on top) as it would take too much space to have separate label, hint, error for each sub-parameters. Your solution also works, but bot sure if your suggestion wouldn't bee too much space on the screen.. A compact FormField would be great, but allowing to have more than 1 focusable control inside of a FormField is still a good enhancement?. It can be still a single field (composed of multiple focusable controls). ie a tags input: https://grommet-nextjs.herokuapp.com/add-ons/tags . I have a CodeSandbox - its working with v2 - https://codesandbox.io/s/8kx5wlm058\n. Accordion was just added 6 days ago, hasn't made it yet into npm. Have you tried table as a fallback? A javascript polyfill for grid css is probably too heavy anyway.. Hi, please try updating to  \"react\": \"^16.4.1\". react-dom as well at 16.4.1 ?. sorry, no more ideas :) \n16.4.1 fixed it for me and SSR context API: https://github.com/atanasster/grommet-latest-nextjs. glad to hear, I also spent a day trying to isolate the issue and create a sample to reproduce it when the context API was introduced in v2 :). @kaushalyap would the v2 add-ons Tag work for you https://grommet-nextjs.herokuapp.com/add-ons/tag . No such usage that i can think of, but seems more natural Distribution to sort the values itself. Updating the documentation can also do the job. please note that the documentation on the imports need to change for themes and contexts, or those two folders need to be moved in the components folder. Created separate issue on this.. Webpack 4 - I cant comment as I am not using it (using nextjs and upgrading on their schedule) and I dont think webpack 4 can be a recommended or default setting. \nI dont see how it can work also for transform-imports, unless I am missing something.\nFor example \nimport { ThemeContext } form 'grommet' will lookup for ThemeContext in a folder under the components folder according to the rule for transform-imports plugin. Allowing this import from the index.js will cause only confusion as it might work in dev mode (if the plugin is configured to work only in dev mode).\nimport { ThemeContext } from 'grommet/contexts' can work if you also add a config for the path grommet/contexts but seems unnecessary complication of the configs?. Its ok for me, just saying that exporting them from index.js doesnt make sense and can introduce issues. I would suggest removing them from index.js as a safeguard and also make sure the docs are importing them from the respective sub-folders. Up to you, but i am pretty sure we will hear about that one from users. . Just to recap-\n1. Webpack 4 is not a v2 requirement and cant really be since frameworks like nextjs and gatsby are on their own webpack update schedule and havent updated to webpack 4\n2. Exporting from index.js would everualky work only with webpack 4 (still untested)\n3. You can not use the index.js exports in any docs or examples as they would not run in anything besides webpack 4\nI realy dont see any advantage of exporting from index.js, just potential bugs if a user imports from there. I was actually exporting my own static props ie <Card.CardTitle /> and when it broke with the new changes, moved to after the doc call : https://github.com/atanasster/grommet-controls/blob/2ccf66989ce0972d71a65dd55b8cda534b9353a8/src/js/components/Card/Card.js#L125\nSo it works for me now, just making sure you are aware of it and if you decide to look for a solution.. sounds good, adding some docs. I am trying to use much the same patterns like react-desc etc. in grommet-controls as in grommet, so users dont have to learn different things (and me neither :)). \nThe two places I differ from grommet are the compound components and the folders naming (ie -> withFormFields in its own folder, as are other utilities like color palettes). Will probably move themes as well, to reduce configurations. #2295 is mostly fixing this (its the same fix that I had been using and submitted 5-6 months ago but didn't get much traction) by calling resetSuggestions if the length of the suggestions has changed. \nThis fix works in 90% of the cases (except if the length is the same, yet the suggestions have changed) and on my end I am fine with closing this issue.. @srockk you need grommet-icons ^3.0.0 for the latest build. @srockk its fairly recent, and just in the git repo, not yet in the official beta packages on npm. \nhttps://github.com/grommet/grommet/blob/1de06c31d0cee92cf65f512228c4d6f87f81bccb/package.json#L40. after speaking with alan, the files in utils are not that big and will not be 'tree-shaken''. also notice the jumping around of the select options container if you scroll the page up/down while the keyboard is open\nThis entire issue is to be tested on Safari / iPad. @alansouzati , it might be the -webkit-appearance: none; replaced with -webkit-appearance: textfield; (this is how I fixed it on my side)\nI also read that some browsers require a webkit-border-radius in addition to the border-radius. another example is v2.grommet.io - try adding just 2 more menu items and the layout will be damaged while resizing, so you are limited to just a few menu items with very short text.\n\n. Thanks alan, the ResponsiveContext doc file is a bit outdated now:\nDocumentedResponsiveContext.propTypes = {\n    children: PropTypes.func.description(\n      `Render function that will be called with the current screen resolution\n      size, either 'wide' or 'narrow'.`),\n  };\nAlso, any chance you can make the default breakpoints as in the bootstrap system - https://getbootstrap.com/docs/4.0/layout/grid/#grid-options, otherwise it will be a pain to add those breakpoints to every new theme (and you app will only work under certain themes). Also it would be a good enhancement to have fixed(standardized) names for those additional sizes, so we can add spacing, sizing etc. for each screen size in the theme. I searched and 'wide' is not used anywhere anymore (the name narrow is used in palm function.\n . Thanks for,the update. I think the standardized breakpoints would belong in the base theme, so each user doesnt have to create their own breakpoint names in their themes. I personally do need more breakpoints in all of my projects, its not just because bootstrap has them. Adopting similar breakpoint names/sizes to bootstrap is optional but would just make it easier for new users of grommet. Once v2 is released and users start improvising with breakpoint names, it will be harder to standardize them in a future version. And currently just adding a few more breakpoint names to the base theme will not be a breaking change, since only narrow is used throughout the library.\nI believe v2.grommet.io also had an initial version with more menu items that didnt work well while resizing, thuse the current cut-down version. . I am setting the background colors to ie brand, however its the arrow icon in AccordionPanel that is not visible. I think we should be able to place Accordion on any background.. @mvilrokx I see there was no follow-up on your issue and will jump in trying to help.\nThe problem is that Button, when a color is supplied calculates the text color depending on the background behind the button (which is light in this case), not based on the background color for the button as it should. \nSo it thinks its a white background and applies the corresponding text color (blackish). \nhttps://github.com/grommet/grommet/blob/d3003d7627428fbc6ac6022d7928ecdb900f5e4f/src/js/components/Button/StyledButton.js#L20-L21\nIf its a pressing issue for you, here is a sample with a temporary fix (swaps temporarily the light/dark text colors in the theme):\nhttps://stackblitz.com/edit/grommet-demo-avshee?file=index.js. @mvilrokx v2 uses its own ThemeContext, but here is how you can extend the theme context or extend globally the hpe with a <Grommet /> component:\nhttps://stackblitz.com/edit/grommet-demo-l8b7vo?file=index.js\n. 1/2 also translates to 50%, I meant when going by quarters - 1/4, 2/4, 1/4 - in this scenario 1/2 is not the natural way. The use case is to make a mobile menu, that will cover partially the screen. Example of desired mobile menu behavior, where the background is partially covered and dimmed.\n. Responsive false works fine, and the layer is not full size when set. But the problem is thta the dimmed overlay is not visible. possible implementation - breakpoint names from theme or breakpoint size in pixels, default narrow for compatibility\n<Box direction='row-responsive' breakpoint='medium' />\n<Box direction='row-responsive' breakpoint={400} />\nexport const responsiveContent = content => css`\n    @media only screen and (max-width: ${props => `${props.breakpoint ? props.theme.global.breakpoints[breakpoint] || breakpoint : props.theme.global.breakpoints.narrow}px`}) { ${content} }\n`;. Yes, for now i switched to using other breakpoint names, but they are a bit weird\nhttps://github.com/atanasster/grommet-controls/blob/master/src/js/themes/base.js\n. Hi did you upgrade styled-components to version 4 and grommet-icons to 3.1-beta.\nJust shooting in the dark, the stack trace doesnt seem very informative. FormFields is actually just adding a div with a class name grommetux-form-fields without any css props in the default themes. You could eventually use this class name to add your own css props, but you really don't need to use it.. @Rastopyr - this thread is about FormFields, not FormField. Which example do you have in mind - https://grommet.io/docs/form-field/examples ?. @Rastopyr you will need to include one of the full-featured themes\nie vanilla\n @import '~grommet/scss/vanilla/index';\n or from CDN: https://cdnjs.cloudflare.com/ajax/libs/grommet/1.11.0/grommet.min.css\nHere is a running example with CDN: https://stackblitz.com/edit/grommet-demo-wyti1n?file=index.js. https://stackblitz.com/edit/grommet-demo-2ck9qv\n<Text weight ='700'>Test</Text>. There are more pressing bugs in v2 and I was just helping to reproduce the issue, however i will add that the documentation is definitely not clear that it should be {700}, but i concede that most of the v2 documentation is also inadequate.. @stelian87 i think your issue is more about mismatched versions - you can clean up your node_modules and delete package.lock file and the install latest grommet and grommet-controls. React responsive libs are usually dealing with ssr breakpoints, not sure why you think its not grommet\u2019s job to also deal with it - can you please elaborate?. Byw, here is a lib for screen detection based on User Agent https://github.com/hgoebl/mobile-detect.js. Fantastic let me know if you need any help with the code or testing it. The easiest might be start a new nextjs sample project or use one of my GitHub nextjs/grommet sample projects. A Grommet prop could be one way, possibly also have a SSRContext, where the user supplies the Provider and Grommet uses the Consumer part. Possibly the upcoming react-hooks could also be used to implement it in a functional way but haven't investigated that much. We can use something like the bootstrap breakpoints sizes: \nPhones - less than 768px\nTablets - 768px to 992px\nDesktops - 992px to 1200px\nLarge Desktops - 1200px and Up\n. Just from my point of view, but the typings wrappers alone will never give a full typescript experience.  Maybe just document them as being a bit incomplete until a future time when grommet could(if) be rewritten in ts.. @jpdesigndev i meant that the full api to be typed (both for consumers and writers), the components need to be written in typescript. Currently there is only a wrapper around propTypes, which is a good start, but will probably always have flaws and be incomplete. For reference, you can check the ant-design typescript code for their input component. Great!. The z-index is set in StyledLayer \nhttps://github.com/grommet/grommet/blob/0eda10d06350b5a7b7538b9ba778e3c261faaa72/src/js/components/Layer/StyledLayer.js#L32\nYou should be able to override using styled-components \u2018styled(Layer)\u2019\n...\n\u2018;\u2019. This is useful yes and since it wasnt anywhere in v2 i created one such component for grommet controls. But its called a masked input and the \u2018available syntax\u2019 is called a mask - i really dont see a need to invent a new name and confuse everyone. I like your thinking - yes both TextInput and MaskedInput would benwfot to re-use a DropInput component. Additional features of the DropInput is to be able to have a collection of icons/widgets for example a NumericInput the + and - icons to increase and decrease the value and maybe a drop icon for q calculator pad input. This really is a time-consuming and error-prone exercise (documenting the themes in such a way by manually looking up methods and hard-coding them into strings) and pretty much impossible to maintain. I would suggest for a future v3 to change the styling implementation into for example a 'subscription' style API (each component subscribes into which styles it will use, and then only use style functions from the subscribed ones, instead of hard-coding style imports ie import { focusStyle, inputStyle, placeholderStyle } from '../../utils';). \nAnyway, just from a quick overview, the following components (that have a themeDoc already) also use focusStyle:\nButton\nTextInput\nyet only Anchor and TextArea have \n'global.focus.border.color': { ...\nThe list of such inconsistencies can go on, and then there is also the still 'undocumented' components.\nHere is a custom rest API that I use to quickly find issues with the theme docs: http://grommet-nextjs.herokuapp.com/api/theme (and parse as JSON). The json lists which components do use global.focus.border.color (Anchor and TextArea at this momen). I know that a lot more components do use focusStyle, so i just searched in the componenets folder for components thta have already implemented themeDoc in their doc file and have focusStyle in their Styledxxx file - in this case Button and TextInput.\nIt is not an automated way unfortunately and thta is why i proposed a solution (styles subscription API) for v3, where each componnet will maintain a list of the styles that it uses (and the tests will break if the componnet tries to use styles that it has not registered since styles will not be exported individually but only as part of the subscription ApI). Just something a bit more stable, the current manual/hard-coded way breaks many coding good practices and that is why it already has many bugs.. A small improvement would be to add some docUtils helper functions ie withFocusStyle(description) - at least reduce the number of times the same theme props are being hard-coded as string, types and defualt values. \nThe code for the theme api is here https://github.com/atanasster/grommet-nextjs/blob/73c2ace463e7b0df3f5d812352971cdc75c15d70/server/server.mjs#L54 - but its simply iterating over the examples API and grouping the components by theme props\nEven somehow automating a little more will not avoid issues like even small changes in styling will result in breaking those theme docs. This is simply the wrong implementation for the problem at hand. All that is needed for v2 is a couple of advanced articles on theming and v3 could work on some more reliable solution. Great start (although as  by now everyone knows i think this is a futile exercise until the basic architecture is fixed)\nNotes:\n\n\nA few more styles \nhttps://github.com/grommet/grommet/blob/bcde5d660f50359d8e46e33dcfe3bbc8968471ef/src/js/components/Box/StyledBox.js#L5\n\n\nThe file should probably be renamed to docUtils as we also have duplication issues with duplicated property values like margin, pad etc \nhttps://github.com/grommet/grommet/blob/bcde5d660f50359d8e46e33dcfe3bbc8968471ef/src/js/components/Layer/doc.js#L33\n\n\nThe focusStyle etc should be functions accepting a description string and returning the doc object as the description for ie Anchor focusStyle is different from TextAtea focusStyle\n. Ah, indeed i had missued the prop-types utils that are fixing some of the duplicates.\n\n\nStill the example i gave layer.margin is a duplicate but they can be fixed in the existing prop-types utils file. . thanks @ShimiSun . Some PRs ago it seems the icon display css changed to inline-block and that started causing the added spacing at the bottom of icons. It comes in the way in many use cases,\nHere is what I am now using:\nexport default styled(Button)`\n  border-radius: 50%;\n  &>svg {\n    display: block;\n  }\n`;\nhttps://github.com/atanasster/grommet-controls/blob/master/src/js/components/IconButton/StyledIconButton.js. I also think so - the icons are supposed to be square, not elongated. Wasn't trying to stop a fix, just giving my potential workaround.\nAfter this happened, I had to fix my code in multiple places - I have a DropInput component that has 'widgets' and they all became out of center, also this kind of circle buttons. \nHowever I am not sure why at some point it was changed to display: inline-block;, probably to fix some other issue. And with the lack of regression tests, it might be dangerous to make such a change during small version revisions.\n. The inline-block is on the svg - I might be wrongly recollecting on the exact way it started hapenning, but i am sure it was working ok up to a certain point and then suddenly all buttons with icons became off-center and i started using my fix.. For me I was able to reproduce only with nextjs, but I am mostly using nextjs anyway\nIt is not related to AnnounceContext - just shuffling around the order of context hocs in https://github.com/grommet/grommet/blob/524e9fbcfd4a31144e5a7fc256fe0f8ae45f6b05/src/js/components/TextInput/TextInput.js#L401\nfixes it for AnnounceContext but makes it happen for some other context. The following works when announce is last in the list (however it seems some of the other hocs are not applied):\nconst TextInputWrapper = compose(\n  withFocus({ focusWithMouse: true }),\n  withTheme,\n  withForwardRef,\n  withAnnounce,\n)(TextInputDoc || TextInput);. Ok, after some investigation:\nThis PR on Dec3 started using \"hoist-non-react-statics\" to copy static props.\nhttps://github.com/grommet/grommet/pull/2498/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R48\ngrommet is using \"hoist-non-react-statics\": 3.xx -  with ForwardRef Support\nhowever nextjs is using \"hoist-non-react-statics\": 2.5.5\n\nnextjs apps are using the nextjs version (see the path webpack:///./node_modules/next/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js): \n\nnextjs8 will come with \"3.2.0\", but for the time being is not ready.\nnot sure what to do with this issue\n1. In the first place, really shouldn't make changes like that in a minor version update\n2. Probably was better to assume the lower version of \"hoist-non-react-statics\" is available, instead of going for the latest without much testing\n3. Possibly a small custom version to copy static props bundled with grommet will avoid such issues in the future.. It feels by \u2018community\u2019 - it means me and a few other users, since there arent many more doing any significant development with v2. Its very time consuming. (jfyi, nextjs is allegedly used by HPE, can point you to some repos)\nThe rest of the arguments are without merit -  grommet did not \u2018need\u2019 the hoist library suddenly in 2.1.0 and it does not need forwardRefs and v3. It was just a choice.\nAnyway, i am doing my best trying to suggest a bit more rigorous development and release schedule. I had a \u2018fix\u2019 from the get go and just trying to help out, as its a a very nasty issue.\n. For anyone wondering if this is some obscure bug - all you need is an empty screen with a TextInput to crash a grommet app. Here is the entire code:\n```\nimport React from 'react';\nimport { Box, Grommet, TextInput } from 'grommet';\nconst App = () => {\n  return (\n    \n\n\n\n\n  );\n}\n```. update - with nextjs 8.0.3 finally able to use grommet hocs\nYou might want to add a note somewhere that \"hoist-non-react-statics\" >= 3.x.x is required and specifically next.js < 8.0.3 is not compatible with grommet > 2.0.0\nI also updated my next.js page docs: https://grommet-nextjs.herokuapp.com/nextjs. done. I believe row-reverse was used in v1 for \u2018reverse\u2019 like for a button with text and icon. I think those are the kind of use cases - compind components and allow alignment left or right.\nAlso i think Box should support the full flexbox api, otherwise there will be questions what is supported, what not and why etc. just for completeness\n. I uploaded my flexbox playground, if you guys want try out most of the the <Box /> flexbox props : \nhttps://grommet-nextjs.herokuapp.com/flexbox . Shimi, the goals make a lot of sense, great job.\nI agree with separate package.json for each template, so they can be installed independently.\nMy inclination would be to have two repos though to avoid large size just for grommet core library download\n- grommet-core (which could or not include grommet-icons)\n- grommet-examples, to include grommet-site, icons-site, templates and all other standalone projects. Yes, i meant if you just want to download/clone the core library without the examples.\nI suspect the examples will be significantly larger with image assets etc.. @ShimiSun Box is also not just the text, the Box docs are just buggy and only list Text as a theme color,. I think the correct way would be to list all the colors affecting a component (like Box started with text, but has some issues listing all the options). Otherwise lumping together the options will not be useful (I am currently working on a tool to find bugs in themes and that how I came across the Chart theme doc issues). @ShimiSun - the theme doc is correctly describing the (wrong) functionality. Its the functionality that is wrong (so in the title I mentioned its both code and docs issue):\nThe Chart doc suggests it can also be a boolean (and if opacity === true, the medium opacity will be used from the theme):\nhttps://github.com/grommet/grommet/blob/9eed6e5954e2997c4191b079d5ff6d604db178a9/src/js/components/Chart/doc.js#L24\nThe Chart doc (possibility for opacity to be a boolean) is also in accordance with the Box And Meter code, where the\n\n\nBox uses utils.background.js:\nhttps://github.com/grommet/grommet/blob/9eed6e5954e2997c4191b079d5ff6d604db178a9/src/js/utils/background.js#L81\n\n\nMeter uses its own implementation of the background, also with the possibility for opacity to be a boolean:\nhttps://github.com/grommet/grommet/blob/9eed6e5954e2997c4191b079d5ff6d604db178a9/src/js/components/Meter/utils.js#L10. btw, up to you guys if you want to create a new issue to clean up the code and consolidate background styling code, so all of (Box, Meter, Chart and any others in the future) use the same code for better maintenance and consistency.. added tests for CheckBox and RadioButton theming:\n\n\n'dark' - 12 issues\n'aruba' - 7 issues\n'dxc' - 7 issues\n'grommet-v1' - 7 issue\n'hp' - 7 issues. just in case it was missed - there is a hint for each ERROR text status - where you can see if the issues is the color of text, border or icon. thanks for letting me know, tested on the theme status page and all except aruba are ok. The focus outline is showing if I click in the textinput\nIMHO the focus outline should only show if you are using the tab\nI would disagree - the focus outline is an indicator of where the text input will go, regardless of how the focus was achieved (by mouse of by keyboard). \nAny real world examples where its implemented the way described in this issue (no outline if TextInput focused by mouse click)? . probably should try to consolidate using https://github.com/grommet/grommet/blob/44f033a304331db6e9edca98fe281c2b0cfb8ff1/src/js/utils/styles.js#L30. @ShimiSun - I guess it depends how you look at the 'theme docs'. \n1. I see them as a source of structured information like you - to verify when you change a theme value, what components will be affected. To that end, I created the theme explorer - for example we can see that global.breakpoint in a theme affects <Box />, <Layer /> and <Heading />  http://grommet-nextjs.herokuapp.com/themes-explorer/global-breakpoints\n\nOn the other hand, if you view them as just for publication on the web site as textual information, then I can see them being treated as just some text information.  \n\nif the original intent was to have them simply as reference text, then there was no need to go into such details.\nI would prefer as much detail as possible, and on the grommet site some properties are collapsed (ie the <Box /> props that affect <Calendar /> can be collapsed as they reference another component). Its good to keep a list of theme enhancements and i do like your items.\nI would add \n- theming for inner components (ie multipe child of a select component and each needs to be themed) should be supported on a common basis instead of a case-by-case\n- all colors should be by default dark/light composed, currently only some colors are adjustable\n- consistency in objects - ie font: face, size, weight  should always be as an object with the exact same property names, instead of sometimes have them fontWeight.\nUnfortunately, I think such changes will have to wait for some time though, as they would break a bunch of existing apps and tools.. yes, Safari :). There might be more for some, but for now this is all that my tool detected. \nMaybe create a boxProps in themeDocUtils, so if more are found to add them there?. imho, changing the icon color only for primary is also an issue, and the code should look something like\nif (icon && !icon.props.color) {\n      buttonIcon = cloneElement(icon, {\n        color:normalizeColor(color || theme.button.color  || 'text', theme),\n      });\n    }. sorry, we need to account for primary color in theme:\nif (icon && !icon.props.color) {\n  const themeColor = primary ? theme.button.primary.color : theme.button.color;\n  buttonIcon = cloneElement(icon, {\n        color:normalizeColor(themeColor || 'text', theme),\n      });\n}\n. Thanks for the answer @shimi\nI am trying to use the theme docs to enable exploration and editing of themes.\nSo all of the props that are lumped together are a stop for strucured editing. I will show you the tool when its ready, in the meantime probably take it at \u2018faith\u2019 - long term it would be much better to have structured documentation of the themes. \nAlso in this case already the button.border are strucured so its also a bit of inconsistency.. I would suggest this is a bug and add the edgeSize etc. for medium - since this breakpoint is defined in base.js, it is not defined by the user.\nlarge might not really make sense as it's the largest breakpoint, xlarge etc. custom added breakpoints are responsability of users that do add those breakpoints.. @oorestisime the current use of global.edgeSize, global.borderSize is when responsive is false and also in several cases where it's hard-coded, while the small breakpoint - when Box turns into the column direction from row-responsive.\nImho it would be best to have those spacings/borders adapt not only when the breakpoint is switched, but for all sizes depending on the current screen size.\nFor example use the medium sizes when the screen is in that size range, even if we have a responsiveBreakpoint of small.\nFor now, just to avoid crashing, I think either add the exact same values to medium as already defined for small, or have checks in the code to avoid the crashing.\n. no trace of where it came from into the theme docs. @oorestisime not really documentation - more like a proposal for code and features change. It would affect the theme structure and then in the code how each component styles fonts (hopefully a single utils function used).\nonce/if the code changes are made the docs will need to be updated as well. great, that's my preference as well. you would think so :)\nactiveStyle itself does not use the active color - check the link to background.js that I posted above.. activeStyle should not be using the hover color, which in turn redirects ro active in base theme only. The active color should be used directly for activeStyle,or it makes no sense to have an active color at all.. Excellent way to communicate and deprecate a component, great job. \nNot using the RoutedXx components myself, just wanted to say i really appreciate this (new) way of handling the dev process.. updated the themes status page, seems only aruba has now a few remaining issues. Excelent plan except doing it on v2 - i would strongly suggest to first stabilize v2 and have those changes for v3.\n I understand its eqsier on the devs to do it on v2 and have the users as beta testers, but the priority should be more on the users.\nWe really do need first a version of grommet that can be used in production projects.. The brand color is pretty light, so the border is barely visible:\n\n. Not sure if you mean the anchor settings, but dark color Anchors are invisible when on brand background . is the user specified a color that would not be visible - for example a dark color on dark background, or light color on light background. This is for #2007 . yes, I do (in the toolbar on top):\ndefault theme (watch the anchor and select colors): https://grommet-nextjs.herokuapp.com/?theme=grommet \ndark theme (watch the anchor and select colors): https://grommet-nextjs.herokuapp.com/?theme=dark . it was - inheriting from vanilla.js:\nanchor: {\n    textDecoration: 'none',\n    fontWeight: 600,\n    color: css`${props => props.theme.global.colors.brand}`,\n  },\nand we have invisible anchors on brand background:\n\n. Do as you please - close, reject or whatever, I am not touching this PR and not submitting anything else.\nThe theming in v2 based on dark/light background is a hack anyway but invisible Anchors on the brand menu seems like a major bug to me.. The proposed changes look good, however imo handling of the user agent should be in grommet - my thinking was that responsive and theme handling should be the top 2 features of a flexbox ui library like grommet. ",
    "generalChaos": "Thanks for the reply @karatechops.  Unfortunately, the UI needs a search w/ the Select component.  For now, I have added extra padding at the bottom of the page (not seen here) which has mitigated the issue.\n\n. ",
    "camposcristianeze": "Of course!\nhttps://codepen.io/anon/pen/rGavQW?&editors=0010\nEverytime I'm clicking the arrow, I would like to scroll just one tile, instead of 4.\nThanks!. Thanks @karatechops! I was trying to replicate this with a more complex logic, but the animations are not working. Could you give me a hand?\nhttps://codepen.io/anon/pen/QqKKyN?editors=0010\nThanks!. Thanks so much! Would be nice to include that information in docs. ",
    "jackjwilliams": "Thanks for the response and the code snippet. I still disagree with the whole \"you can just delay it's  removal.\" If the spinner showed when it started instead of 1 second later, that would make more sense to me.\nBut I understand your reasoning for the other requests.. No problem, thank you!. ",
    "fendyjong": "@karatechops it's supposedly grommet version 1.7.0\nI was wrong. I was taking the version from the json.\nI just recheck in the npm version and it's grommet version 1.7.0. Hi @karatechops, I confirm that this issue is fixed in 1.8.0. ",
    "john-codeworx": "We're also experiencing this overflow bug on compact devices.  Is this fix scheduled for release?. ",
    "jessegoraya": "@karatechops so if I  understand this correctly.  I would have my own index.scss (in my case custom.scss) which would make reference my defaults file (any custom colors), grommet's core theme which would use the default style from grommet for anything not specified in my custom file, and then any custom object files.  My custom objects would be any elements in chat component that I would like to uniquely style (e.g. wc-chatview-panel, wc-message, etc.)?\nThank you for the assistance by the way.. @karatechops thank you for the detailed explanation.  I'll definitely give this a shot.  Very helpful!. @karatechops thanks for the help.  Yes I am familiar with Chrome Dev Tools and hadn't found any errors appears in the console pane.  My custom.scss also appears to be in the header.  All of my code is local currently but can work on getting it in a repo.  In the meantime I have also attached a screenshot from Chrome Dev Tools where my Web Chat control is being called with the HTML appearing on the right side of the screen.  \nAs you will see in the screenshot the Grommet fonts are being applied to Chat Control but I need to manipulate the other settings so that I can move things like the spacing and the padding.  Functionally it all works fine its just the layout that appears to be the issue..\n\nOnce again, thank you for all of the assistance.  This Grommet library has helped me tremendously in making my app look professional and modern.\n. Also I have created a Git repo for my code which can be found at the link below...\nhttps://github.com/jessegoraya/Elu-Health-FrontEnd\n. All thank you for all of the help but I was able to figure it out!  It had to do with the .wc-chatview-panel.  I set a width and height to that style and it now appears.  So now I can actually manipulate the look and feel.  @karatechops appreciate all of the guidance!. ",
    "ledbit": "@karatechops - thanks for the review and suggestion! updated the PR . ",
    "kaitsh": "Hi @karatechops, \nThanks for your reply.\nI'm sorry, it was a wrong configuration in my email client. So the issue was on my side.. ",
    "teaserbot": "like to know too! windows here :smile_cat: . ",
    "aschrijver": "thanks @dgennetten that is good to hear..\ni can't wait trying grommet out :)\nbut there is some functionality lost, is it not?\ngrommet provides a design process where Sketch is an integral part, i gathered\nor is that entirely a separate thing, not part of the codebase, but a nice tool option (if you have sketch)?. great news @dgennetten .. count me in then :). ",
    "slipperypenguin": "@linde12 Thanks for  looking into this!\nI ended up specifying ^16.0.0 for both react and react-dom inside node_modules/grommet/package.json and removed react 15 from node_modules/grommet/node_modules/. \nIt looks like that stopped the app from crashing, but resulted in another TypeError inside of node_modules/grommet/components/icons/Header.js that causes layout issues in my app. \n. Yep, just tested it out after updating to grommet v1.8.0 and everything looks good.\nThanks everyone for the help!. ",
    "jamiepenney": "The react-desc package relies on React 15 directly, which is causing this issue.\nedit Not only that, but looking at that package it looks like it is using deprecated methods in React, so it'll need to be updated properly.\nedit2 I've submitted a PR to update react-desc, once that's updated it should resolve this issue.. @linde12 the react-desc package.json had an explicit dependency on react 15.5.4, so it was pulling a second copy of react in and using that, which caused the error - see this issue on the react repo https://github.com/facebook/react/issues/10320\nhttps://github.com/facebook/react/issues/10320#issuecomment-332353869 is the key comment.. @alansouzati any chance we could get a release out with the new React dependencies?. ",
    "hashtonmartyn": "I'm having a similar problem with setting fit='contain on an Image component in a Carousel. On desktop chrome the images are visible but on ios 10 with chrome the images are not visible and the component to the right of the Carousel takes their place.. ",
    "fauricioRojas": "Your welcome @alansouzati. @alansouzati, when this change will be available for install and use?. You're welcome. It is a pleasure to contribute with Grommet.. ",
    "nnnoel": "I guess a nice workaround would be to nest it one more level down. It doesn't appear to negatively impact the styling in doing so.. ",
    "jozsi": "Hey @ericsoderberghp!\nDon't forget to add this to the dist-css build task. PR with fix done: #1808 - thanks @atanasster !. Dear @L0ZZI - I am using the most recent v1 version.\nI know the cause (this commit), and I guess the workaround could be to provide a higher z-index for .grommetux-drop classes inside the Header component. I've no SASS knowledge (CSS in JS for the win!), but will try to create a Pull Request for it, unless someone else beats me to it.. As mentioned on Slack, this doesn't provide an out of the box solution for the problem (fixed header with menu), but it allows to pass className to the Drop component's root element.\nSo, if I pass className=\"helloGrommet\" as a prop to the Menu component, I will need to apply the following CSS in order to get the z-index right:\ncss\n.helloGrommet__drop--container {\n  z-index: 51;\n}\nSince Header has a zIndex of 50, this will promote the Menu dropdown in front of it, but will keep the menus from the content untouched (with their standard zIndex: 20, below the header).. ",
    "vojtasvoboda": "Same here. I fixed this by running yarn add node-emoji; yarn add grommet.. ",
    "nsb": "Would be great to have a minor release with this fix included.. ",
    "clemmy": "I don't think this fixes the fundamental problem. It doesn't crash now, but it's impossible to focus on the search field in mobile now.. Now, I see this:\n\n. ",
    "abner": "Hi @RyanCCollins. Is this Typescript initiative still in course? If not, what would be the approach to use grommet components with Typescript? Thanks in advance. ",
    "donkeybonks": "\nSpacing consistency is lacking here too. \nDoesn\u2019t align with grid here and baseline of X and heading is inconsistent.. ",
    "emilycoco": "@alansouzati you are correct, I'm going to look into whether it's possible to support webpack and other builds concurrently, it really should be.. ",
    "krizka": "+1 For this. Now Layer not providing down context, so it is not possible to show Relay components inside modals. Or other context-related things. ",
    "SinHouse": "Sorry @L0ZZI, I solved the issue changing the pattern in React/Relay data loading and consuming. I think in some context apps it's interesting use native React portals but for now, in our case, the current Layer functionality is enought.\nThe issue emerged when I tried to load Layer from a table row because I loaded Relay data from it.\nI load the relay data from parent table now and I change the controller logic to load the Layer from the table container.. grommet-controls  @atanasster npm package. ",
    "quaqua": "Have a look in  the Button component source code. The condition says:\ndisabled={!onClick && !adjustedHref && ['reset', 'submit'].indexOf(type) === -1}\nIt ignores your disabled=\"false\" or even the better approach disabled={false}.\nAlso, in #1681 a comment says, it is a design issue and be fixed in 2.0\nThe reason for your disabled submit button might be, that your handleSubmit function is undefined. That was the case on my side when I was experiencing that behaviour. That's why I'm commenting on this.. ",
    "cristyalex": "Thanks for the help!\nYes, after defining handleSubmit it worked.. I also tried,\nfunction AvoidSpace() {\nvar k = event ? event.keyCode: event.charCode;\nif (event.fromCharCode == 32) \n{ \n  event.preventDefault();\n\n console.log(String.fromCharCode(event.keyCode));\n\n}\n\n}\nis there any alternative way for this? I need this to run in reactjs. . ",
    "michaelmulley": "@alansouzati it looks like the issue was introduced in 0698bbb1c6b1cd779603941b25554e4f4a634228 quite a while back. That commit flipped the logic in the _handleAriaHidden function. Before that commit, the positioning attributes were set on layer open and cleared on layer close. After that commit, and currently, it's the opposite, which makes less sense to me. Was there a reason for that change, or was it maybe just an accidental copy-paste typo?. ",
    "webdeb": "This is not a grommet issue. You problem is, that you are calling the handler instead of passing it.\ninstead of onKeyPress={AvoidSpace(event)}\njust onKeyPress={AvoidSpace} . @ericsoderberghp sorry maybe I am misunderstanding something, because CSS is not my strength at all. I think, that the main problem is with the Grommet component, which does not take the whole vertical space. If we put another layer like a Box inside the Grommet component, it will not take the whole space either, because of the Grommet component, which only takes what it needs.\nSo maybe a simple prop like fullHeight in <Grommet fullHeight /> would be enough?. @alansouzati thanks :) It's good so far \ud83d\udc4d  . ",
    "DavidUnzue": "I found this after wondering why the Paragraph component wouldn't stretch to full width and discovering it has a hard coded max-width property.\nThe reason provided by @ericsoderberghp (which by the way should probably be written in the documentation) is understandable. However, in my opinion, this behaviour is extremely opinionated and it should be left to the developer to decide how to present the text.\nIs there maybe a way to override this from within a theme object?\n. ",
    "RagnarHal": "Using Flex does indeed solve it, thanks!\nI'm just wondering if this should be the expected behavior? Consider a similar example as above, but const columns = [\"1/4\", \"1/4\", \"1/4\"];. Here, I would expect the bottom boxes to span 3/4ths of the width, but because of the gaps they span more.\nI guess the question is, should the sum fraction of the columns of the grid define the total width of the grid, or only the total width of the actual columns without the gap tracks (like it is now)?\nDisclaimer, I haven't really used CSS Grids much, so I'm not exactly sure of the philosophy here.. ",
    "DaveDavenport": "Ignoring an issue does not fix it.\nThis issue still exists, see demo above.  If more information is required, please let me know.. ",
    "Andarist": "Hi!\nDo you import styled-components on your own? (I'm not familiar with this project). ",
    "nfantone": "@L0ZZI I've tried reproducing this with latest v2 beta, but it seems like the Header component is no more. What's the official alternative now?. ",
    "cubeghost": "Thanks, that fixes it. My bad for not checking hard enough to see if someone had already reported this issue \ud83d\ude4c \nAny estimate on how soon a release with the fix will go out?. ",
    "nathanstitt": "The src/js/components/__tests__/README-test.js appears to be failing on Travis, but passes locally.\nIs there something I should do for that one to update it?. ",
    "CompuIves": "Hey! Just wanted to quickly note that StackBlitz is not more built on top of VSCode than CodeSandbox is. We both use the Monaco editor, which is the core editor of VSCode extracted to the browser, but that's as far as VSCode implementation goes.\nThe only editor that, I believe, uses VSCode directly in the browser is SourceGraph. But I'm not sure of that too \ud83d\ude05.. ",
    "EricSimons": "Hey all- co-creator of StackBlitz here! Just seeing this thread now. That sounds like a great idea @ericsoderberghp - @schettino would you be willing to take lead on this integration? Super excited to see this happen!\nPS @CompuIves - it sounds like you're a little confused about the level of integration StackBlitz has with VS Code. Feel free to ping me and/or our core team in the future w/ any tech questions (ideally before posting comments about us :). @alansouzati yup, we do! Here's the section in the docs about it: https://stackblitz.com/docs#import-from-github\nLmk if you have any q's/run into any troubles!\nEdit: I just checked out repo you linked- looks like our importer isn't consuming it properly \ud83e\udd14 Is that an ejected create-react-app repo?. Ah gotchya, yeah this should be a super simple fix from our end. Will circle back tmrw morn once it\u2019s online \ud83d\udc4d. ",
    "eluchsinger": "This issue is not stale.. This issue is not stale. You are persistent, bot.... Sorry, I don't know. I am not using Grommet in my current projects.. ",
    "MikeWalrath": "@eluchsinger closing this issue. Please feel free to re-open if further discussion is needed. . Hi @djalmaaraujo just checking in. Were you able to validate the issue? . @alansouzati have you had a chance to look at the above? . Hey @jesseolsen Im going to close this issue. Feel free to re-open if you are still seeing the issue. . Apologies for the delay. This issue should be in grommet-site. I will close and re-open in grommet-site with the appropriate info.  . @vadistic the above is wonderful collaboration. Do you have any additional thoughts on the issue? . @joserocha3 does Erics comment above help resolve your issue? Do you have any other questions? . @joserocha3 I will be closing this issue. Please feel free to reopen if you have additional questions. . @RyanCCollins were you able to look into this issue any more? . @RyanCCollins I will be closing this issue since we were unable to validate it. Please feel free to reopen the issue if you as still seeing it. . Closing. Please feel free to re-open if further discussion is needed. . @episodeyang did the above comment help? . @episodeyang I will be closing this issue. Let us know if you continue to see the issue. . Not me. @alansouzati ? . @episodeyang would you be able to provide a markup to provide more context? This will help us solve the issue. . @episodeyang I'll be closing this issue. Please feel free to re-open to further the discussion. . ",
    "rameshsunkara": "@ericsoderberghp @alansouzati \nReferring Why Grommet2\njavascript\nconst hpeTheme = {\n    ....\n    extend: 'letter-spacing: 0.04167em;',\n  },\n};\nFrom Why Grommet2:\n\nNotice the extend property inside button object that allows you to augment the button with additional styling for your theme.\n\nTo facilitate customizations, any plans to expose extend as a prop on the components such a way that it will be deep merged with the base ThemeObject?\nIf not, is wrapping component in ThemeContext.Consumer and deep merging in my code an acceptable solution?\nLooking at some issues on Github, I am concerned if this approach will trigger unnecessary re-renders.. Thanks for the update. Its disappointing given that grommet is an enterprise design system and most of the enterprises still support IE11 ( or will support IE11 until at least 2019). yup just looking at  StyledBox in grommet source code to understand how to leverage :)\nconst basisStyle = css\n  flex-basis: ${props =>\n    BASIS_MAP[props.basis] || props.theme.global.size[props.basis] || props.basis};\n;. ",
    "Zeukkari": "bump. ",
    "jonisar": "Hi all.\nSo, we've been working on an example for Grommet with Bit.\nComponents are visually organized in the collections, each can be played-with online in the example playground and individually installed. We prepared examples for:\nGrommet V2:https://bitsrc.io/grommet/grommet\nGrommet V1: https://bitsrc.io/grommet/grommet-v1\nGrommet Icons: https://bitsrc.io/grommet/grommet-icons\nWhile V1 and the icons are perfectly ready, we have some final issues with V2 (circular dependencies etc) which I think we'll solve next week.\nI would love to hear what you guys think of these examples!\nIf you like it we can continue to automatically maintain it ( +maybe add it to the grommet docs so that people can find it directly from the library and not only from Bit's community and Google) or hand over ownership and help implementing it to the library's release mechanism (or both) as you like :)\nSo what do you guys think? \n. The Grommet (v2) collections is ready and fully working.\nWhat do you think?\nhttps://bitsrc.io/grommet/grommet. Sounds great.\nIf you'd prefer, I can hide the utils :). Sure, v1 was removed. I can also hide the utils for v2 if you like.\nI'd love to hand over control over the org and the collections (and help maintain it of course).\nWhat's your Bit username? I'll add you as an owner :). You've been added as an admin to the org :)\nAs for your question- If you modify a theme that several components require, Bit prompts a message saying it will bump all dependent components' versions. The new dependent versions will include the updated theme. Does that make sense?. ",
    "ChrisRose": "I just saved the example, so you should be able to see it now.. I'm looking to do something like the following, where the question mark is the target, and the tooltip is centered relative to it:\n\n. The solution I hit upon was wrapping the Table in a Box and doing\n<Box\n        theme={{\n          box: {\n            extend: `\n                td {\n                  border-bottom: 1px solid rebeccapurple;\n                }`\n          }\n        }}\n      ><Table>.... That makes sense to me.. Loooong overdue response.  Sorry about that.  But, when I click on the placeholder text, I am unable to focus the input.  Clicking in the space within the Select, before the placeholder text, does apply focus though.. ",
    "elbotho": "The same bug occurs on the DropButton component.\n@alansouzati did you find a fix?. ",
    "inyono": "This is usually the case if the ref isn't set yet on the first render, e.g.\n```.tsx\nconst myRef = React.createRef(undefined)\nfunction Foo() {\n  return (\n    \n\n  )\n}\n``\n**won't** work sincemyRefis going to be set after (!) the first rendering (and updating arefdoes not trigger a rerendering). To fix this, you need to force a rerendering when therefis defined, e.g. by inserting theref` into the state.\n . ",
    "lschuermann": "Turns out I was using react 15.x.x. An upgrade of react and all peer-dependencies fixed the issue.. ",
    "XOSplicer": "Hi, as you have stated you are using the grommet pack command from the grommet-cli application in the npm dev script. The source code for it can be found here \nhttps://github.com/grommet/grommet-cli/blob/master/src/commands/pack.js \ngrommet pack uses a library called opener (https://github.com/domenic/opener/blob/master/opener.js) which will always open files with their associated default application set by your operating system. \nThere is currently no way to choose the application that is run independently for grommet.\n. ",
    "RobertGary1": "Please renew this issue.. Bump . Customized animation seems to be make sense but for my needs I just need to disable it.. I only suggested customizing the animation because it has an animation now that you can\u2019t change but for me I just wanted to turn it off.   . This and tripped me up a couple of times now. The docs online are out of alignment with the released version of Grommet. Would it make sense that the online docs reflect the released version of Grommet? There could be another page that reflects docs for whatever is on master.. For a line graph you would need to annotate the line as shown above. (in v1 we had the dots on the line). The vertical line is also probably needed.. Yes, that was what my comment was about below it. . Here is a better example. The customer installed capacity. The chart shows that installed capacity gradually rose but in fact it was in an instant.\n\n. You only have data points for the X axis as 1 and 2. Right now Grommet is assuming that at 1.5 the value must be 50 but that is a bad assumption. When a user puts a disk into the system the capacity increases immediately; its not accurate to say the capacity increases slowly over the day. \nSo the issue comes down to what assumptions you want to make about position 1.5. If the user had set the smoothing attribute to true it would make sense to assume 1.5 is 50. But if smoothing is false I don't think its accurate to \"smooth\" the data by assuming the Y value is 50 at 1.5.. [proposed Enhancement]. Agreed. For my application the customer has the ability to configure the number of digits after the decimal.. I think syntactically you have to include the get directive on them in ES6. I'm not sure you can directly declare class variables (although I've seen it suggested in ES7). Do we have examples of this being done in Grommet today?\neslint gives an error unless I put it below the lifecycle methods. You can disable this in eslint but I don't see it disabled in the eslint file.. done. Ok, it should be up to date now. Any feedback on this review?. ",
    "lBeJIuk": "Yes. I have nothing against. I tested this approach on my application, it works without errors.. ",
    "miguelemosreverte": "This fixes the issue. Want a PR?\n```js\n  var accordionChildren = _react2.default.Children.map(children, function (child, index) {\n        if (!child) { return null }; //<-- This might work so that it will bail out of the iterator before checking for tab.props.\n        console.log(child)\n        return _react2.default.cloneElement(child, {\n          active: _this2.state.active.indexOf(index) > -1,\n          onChange: function onChange() {\n            _this2._onPanelChange(index);\n          },\n          animate: animate\n        });\n      });\n  var restProps = _Props2.default.omit(this.props, Object.keys(Accordion.propTypes));\n  return _react2.default.createElement(\n    _List2.default,\n    _extends({ role: 'tablist', className: classes }, restProps),\n    accordionChildren\n  );\n}\n\n```. That being said, want me to checkout all of the composite components for the same bug?\nAnd hey, why did a bug appear on multiple occasions on similar code?\nObeying DRY would have avoided this problem.. Will do!. ",
    "nogever": "@alansouzati thanks for review. The PR has been updated.. Closing since I learned that now I have to do this\n<Layer full='vertical'>\n  <Box fill='vertical' overflow='auto'>\n  </Box>\n</Layer>. Setting the StyledDrop-'s width to 'auto' seems to be solving my issue. \nBut this works only the content is wider than the button.. By the way, this is in IE11. (updated the description above). ",
    "bitshadow": "Issue seems to disappear if we remove grommetux-button class from button. I tried to figure it out but couldn't find exact property which is causing it.. ",
    "SaloniDesai": "I tried adding accordion in your codeSandbox example but it didn't work. Does v2 not support it yet ?\n. ",
    "iMerica": "Thanks @alansouzati. I think I've figured it out. Very excited about V2 \ud83d\udc4d.. ",
    "develomark": "No joy. Already was on 16.4.1.. Yes, indeed.. Actually, you've been a massive help. \nDeleted node_modules - something old must have stuck around.\nMan, that was an afternoon wasted :-(\nAppreciate the help!. ",
    "skimcm": "@ericsoderberghp CodePen is here https://codesandbox.io/s/6zqkm4k7mr\nApparently the issue happens only when the list exceeds the height of the screen. I tested with like 40+ items in the options array.\n\n. ",
    "yairEO": "You can use my lightweight flexible React Tagify component:\nhttps://github.com/yairEO/tagify\nfeel free to incorporate it into Grommet. ",
    "srockk": "@kentsalcedo did you add a renderMarker prop in the sandbox you shared? I don't see one and this issue is \"InfiniteScroll stops working with renderMarker\". One of the latest patches must have fixed this. Thanks! This can be closed.. @theRemix Thanks for looking into this. I just checked now and I don't see this issue any more. Also, I noticed there's been some new patches and one of them must have fixed this issue. \n\nI'll close this and will open a new one if I see this again.\nThanks!. @ericsoderberghp Thanks for the patch. However I noticed a small issue with this patch (see screenshot below)\n\nIn the screenshot, the button doesn't fill the whole area in IE11. \nThank you for looking into this!\n. The issue might show with this combination. FormField + Select with onSearch. Since CodePen doesn't work on IE11, I will try to reproduce in Storybook.\nEdit:\nJust confirmed the issue with the below setup.\n<Grommet>\n  <FormField label='Label' htmlFor='select' {...this.props}>\n    <Select\n      id='select'\n      placeholder='placeholder'\n      options={options}\n      value={value}\n      onChange={({ option }) => this.setState({ value: option })}\n      onSearch={(text) => {\n        const exp = new RegExp(text, 'i');\n        this.setState({ options: allOptions.filter(o => exp.test(o)) });\n      }}\n    />\n  </FormField>\n</Grommet>\n\n. Created the new issue separately here https://github.com/grommet/grommet/issues/2201. The link has no onSearch prop. Can you try one with onSearch? Also, I see the issue on Select with the search without FormField now. \nhttp://storybook.grommet.io/?selectedKind=Select&selectedStory=Search%20Select&full=0&addons=1&stories=1&panelRight=0\n\n. Browserstack. IE11 on Windows 7\n\n. Are you on Windows 7? Yours seems to be on Windows 10\nEdit: Windows 8 and Windows 7 show the issue. . Wow that's interesting. Chrome MacOS Version 68.0.3440.106 (Official Build) (64-bit). Have you tested FormField + Select + onSearch combination by the way?\nEdit: Also, when searching.\nEdit: Confirmed with real Windows 7 PC with IE11 (the latest, 11.0.9600....)\nThe initial rendering is good, but when you search it shows the issue (see screenshot)\n\n. @atanasster @ericsoderberghp is the grommet-icons 3 dependency mentioned somewhere? This issue can be closed. Thank you!. @djalmaaraujo isn't the default value 'none'? You could do pad={{ bottom: 'large' }}.. The buttons could stay disabled until the transitions are finished.. ```\nconst App = () => (\n  \n\n\n\n\n);\nrender();\n``\n<img width=\"1151\" alt=\"screen shot 2018-11-05 at 11 25 32 pm\" src=\"https://user-images.githubusercontent.com/8532807/48042963-1f177900-e152-11e8-8f21-c938163e7e12.png\">\n. This might be expected behavior? Workarounds are:\n1.date=\"2018-11-04T05:00:00.000Z\"add offset hours\n2.date=\"2018-11-04T00:00:00.000\"` local. ",
    "katfchan": "Ahhh, sorry I think the data I used for this example was bad. Sorry!! \ud83d\ude05 . ",
    "luvsharma19": "This issue is fixed by PR https://github.com/grommet/grommet/pull/2157 \n:D :D. @alansouzati Can you please review this pull request and get it merged to master? Thanks! :). @ericsoderberghp  Thanks for merging the PR to master. :). Waiting for this pull request to get merged. :). ",
    "theRemix": "\nDropdown renders the items outside/below the drop box.\n\n@nogever I tested the issue using the following\nEnvironment\n\nGrommet version: NEXT\nBrowser Name and version: IE 11.165.17134.0 (Compatibility View disabled)\nOS: Windows 10 Home Version 1803 OS build 17134.165\n\nTests\nOn this page http://storybook.grommet.io/?selectedKind=DropButton&selectedStory=Simple&full=0&addons=1&stories=1&panelRight=0\n\nSteps to reproduce\nCan you provide a code sample that will reproduce the issue \"Dropdown renders the items outside/below the drop box.\"\n. ",
    "matt-catellier": "package.json has \"grommet\": \"^1.5.0\", (so maybe 2). ",
    "djalmaaraujo": "@ShimiSun You can close, maybe new version fixed.. \ud83c\udf89 . ",
    "modifMX": "Sorry, I don't think it's appropriate to ask questions.. ",
    "britt6612": "@alansouzati  thank you! I will pass the HPE through themes and make sure . @ShimiSun  The components that were added was Accordion, Tabs, DataTable, ResponsiveContext. \nWe are still missing MaskedInput, Grommet, ThemeContext, SkipLinks, Announce Context Consumer,\n. @oorestisime @ShimiSun  currently the button icon depends on the background color for it to be light or dark I can change this so that the icon will take the color of the theme instead of looking for the background color to determine the icon color if this sounds good to you guys I can do this!. @atanasster  thankyou I just saw that there was both a primary color in the themes under the button I will account for that as well. @ShimiSun Thank you I knew it had to be something with the tests snap shots I was just telling @oorestisime let me try what you said!. @oorestisime thank you! . Tests failed because Readme needs to be updated still in the process of checking them so just ignore for now. I wondered about it! Thank you I will take it out!. I went ahead and changed the destructure and also added the box prop of height that way users can see that box does that that prop instead of a instyle which is already shown they are able to see it both ways!. So I was talking to @ShimiSun and the border side is always the bottom because of the way the box is under the button and does not have a height so I was not sure if the line was in the design and should be there and just change the color or like you mentioned made the whole thing a theme . I see your point Ill get to work! changing it. @ericsoderberghp  I wanted your suggestion on how I redid the theme for the border I added none for a option for side so that the user can put none if they do not want the border there since border is a prop of box and it is set there by default? Im open to any other suggestions . Sounds good I took it out and changed the example to for the story book to show border: undefined to show as a option. . Welcome everything should be good now!. @ShimiSun  yes much better will do!. ",
    "mvilrokx": "For whatever reason, the codesandbox link above doesn't seem to be working for me so in case it's not working for anybody else, this is what I had in there:\n```\nimport React from 'react';\nimport { Button } from 'grommet';\nimport SandboxComponent from './SandboxComponent';\nexport default () => (\n  \n\n { }} />\n    \n\n {}} />\n    \n\n);\n```. Awesome, that works!  \nThanks @atanasster.\n. ",
    "spencerkordecki": "PR to fix this located here: https://github.com/grommet/grommet/pull/2320. I believe this was fixed by my PR yesterday: https://github.com/grommet/grommet/pull/2315. Pull request opened for this issue \ud83c\udf89 \nhttps://github.com/grommet/grommet/pull/2315\n. Not sure this is related to Grommet itself, seems to be more related to the browser's implementation of nested interactive elements; see this SO post: https://stackoverflow.com/questions/31092439/click-on-checkbox-inside-a-button-element-firefox-issue\nI tested this out too by just doing a general click listener on the document and looking for what it was targeting and on Chrome it targets the checkbox, but on Firefox it targets the button. \nWhat's interesting about this is that if you tab to the header and then use space to select the checkbox, the CodePen and demo works as intended on Firefox, so it seems to be only relegated to clicks in this case. My guess is that the table header elements are buttons for accessibility reasons, but changing the type could be a fix for this.. @prepaka Since the main interaction with the first column in the table is just the ability to select all, you can place the checkbox that handles this behavior inside of a normal th instead of the Grommet TableHeader. If you don't want to do that, removing the onSort property will remove the button element from the TableHeader which will allow you to use the checkbox without having to click the button first; see example here: https://grommet.io/docs/table-header/examples\nThese changes would require some refactoring of your code since you render the headers based on an array, but it would lead to a better experience overall because then the first header is only responsible for selecting and then you can even make that column smaller to not use up as much space. . @alansouzati not at all, thanks for the suggestion! I just committed those changes to my branch, looks to work perfectly and all tests updated/passed. . @ericsoderberghp I just made the suggested change and looks to achieve the same result from my testing so I just pushed to the branch with the updates. Thanks for the suggestion and let me know if there's anything else that looks out of place!. ",
    "prateekgoel": "@alansouzati In case you are not working on this, can I try to fix this?. @alansouzati Never mind. I will start working on this. Thanks. @alansouzati So for the solution, shall we show the scrollbar in case the content exceeds the size of the container?. @alansouzati I investigated the same code in playground in Safari (Mac OS), Chrome and Firefox.\nI am not able to reproduce the click on the displaced location. For me, the click is still on the button itself.\nHowever, the buttons do overlap when the Layer container is not big enough to fit all buttons.\nI believe we can just have a scrollbar appear when the content does not fit.. @alansouzati Did you get a chance to check on this?. Ok, no problem. Can I work on this? Seems like this is open.. This is not an issue with grommet. This issue exists for any form.\nThis is a Chrome Browser bug.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=889780. Follow that link to stay updated. Chrome team is working on it.. ",
    "robinmetral": "I'm getting the same issue :hand: \nDemo: https://mappingcoffee.netlify.com/ (resize to mobile, the Layer is underneath the map)\nEnvironment\n\nGrommet version: 2.5.5\nBrowser Name and version: Firefox, Chrome\nOperating System and version (desktop or mobile): Ubuntu desktop\n. It did @ShimiSun :tada: \n\nIt's not fullscreen anymore now though, changes a bit.. Hi @ShimiSun, I'm running into the same issue here.\nHow can I\u00a0fix it?. react: 16.7.0\nwebpack: 4.28.3 \ngrommet: 2.5.5\nNote: this is a CRA project so Webpack is configured via react-scripts.\nI checked and I do have these lines from #2735 in my node_modules/grommet/package-json:\nhttps://github.com/grommet/grommet/blob/d280fef6c254fb2f9f4d8035a87dc44b49da9820/package.json#L7-L9. Just noticed something: should't the sideEffect say:\n\"./contexts/ThemeContext/ThemeContext.js\". ### For anyone else running into this issue:\nWhile it's being addressed, a workaround is to use a local copy of ThemeContext (as mentioned by @m11m).\n\nFrom your CRA project root, go to node_modules/grommet\nMove contexts/ThemeContext/ThemeContext.js and utils/ (dependencies) to your src/ folder\nIn ThemeContext.js, change the path to the utils/ directory to ./utils\nimport { ThemeContext } from \"path/to/ThemeContext\";. This would be great!\n\nIt would also allow to change font-size consistently in ThemeContext.Extend:\n``jsx\n<ThemeContext.Extend\n value={{\n   box: { extend: () =>font-size: 14px` }\n }}\n\n\n {/ 14px /}\n     {/ default /}\n  \n\n``\n:arrow_right: Currently onlyAnchorinherits font-size.Text` doesn't.\n\nStandardizing the font-size format would probably solve this!\ncf. https://grommet.slack.com/archives/C04LMHN59/p1551542744089300\n. @oorestisime The docs page I linked to in the issue's text.\nI was just coming back to say that they were the V1 docs though, I must have mixed them up somehow. Closing this.\nAny plan of re-integrating PasswordInput in V2? The article on migrating from V1 don't mention it.. That would be amazing @oorestisime! :heart_eyes: . Also note that this is only the case for a Layer with modal set as true.\nA Layer with modal={false} generates the following HTML:\nhtml\n<div class=\"StyledLayer__StyledContainer-rmtehz-2 bWDQDs\"> <!-- container -->\n  <a tabindex=\"-1\" aria-hidden=\"true\" class=\"LayerContainer__HiddenAnchor-sc-1srj14c-0 LMZHJ\"></a> <!-- anchor -->\n  <div></div> <!-- layer content -->\n</div>\nSo it really is about the modal wrapper that should receive the container's custom z-index.. Thanks @oorestisime, it works!\nI was about to suggest a PR to the docs but I\u00a0realized that it was actually already there:\n\nlayer.container.zIndex (which I had seen)\nlayer.zIndex (which I hadn't seen)\n\nSo if I understand correctly, layer.zIndex is for the layer itself and layer.container.zIndex is for the container, when modal={true}. Maybe we can clarify this.. Done in 8458766 @oorestisime \n```\nSnapshot Summary\n \u203a 1 snapshot updated from 1 test suite.\nTest Suites: 51 passed, 51 total\nTests:       390 passed, 390 total\nSnapshots:   1 updated, 495 passed, 496 total\nTime:        46.326s\nRan all test suites.\n```. Hi @ShimiSun :wave: \nWell from the source it seems that StyledButton has padding, if this is what you meant. Screenshots:\nStyledButton | StyledIcon\n-- | --\n | \n. Definitely a sufficient workaround! Thanks a lot @ShimiSun :rocket: \nFeel free to close this if the bug doesn't need to be addressed.. Thanks @oorestisime, no idea how I managed to mix it up on such a tiny change :stuck_out_tongue: . ",
    "junjchen": "@oorestisime nope go ahead \ud83d\ude09. Hi @alansouzati this is targeted at grommet v1. The feature request is to have an \"enablePasswordVisibilityToggle\" option to show/hide the \"eye\" button in the password input.. ",
    "jesseolsen": "Yes, I am still seeing this.. ",
    "mrebb": "\nYes, I am still seeing this.\n\n@jesseolsen I created a code sandbox forked fromGrommet v2 Template with two select fields. I  couldn't reproduce the issue that you are facing. Could you try with 2.4 version of grommet and see if the issue still persists. \nHere is the code sandbox link: https://codesandbox.io/s/8x5798or6l \nBelow is dependencies list and their versions: \n\"grommet\": \"2.4.0\",\n    \"grommet-icons\": \"4.2.0\",\n    \"react\": \"^16.6.1\",\n    \"react-dom\": \"^16.6.1\",\n    \"styled-components\": \"4.1.3\". @palecrow @2manoj1 Here is my findings. \nIf step is not provided as prop to InfiniteScroll, current logic assumes that the default of step as 50. \nTwo possible ways, onMore() function can get triggered. \n\n\nTry filling array of items with more than 50 and then step is not required to be passed in as a prop. onMore() function will be called as you scroll down. This works because the lastPage value becomes 0 or -1 when items length is 50 or less, which is never going to be equal to nextEndPage value that is incremented as user scrolls down. \n\n\nPassing step as prop would automatically call onMore() as the lastPage value is derived from step value and items array length like below. \nconst lastPage = Math.ceil(items.length / step) - 1;  // if step =10 then Math.ceil(50/10)-1  = 4\n....\n....\nif (onMore && nextEndPage === lastPage) {\n              onMore();\n            }\nHope this clarifies. . @2manoj1 I don't see that issue on my side. Here is the screenshot. \n\n\n\n\nGrommet version: 2.4.0\nBrowser Name and version: Google Chrome 72.0.3626.109 (Official Build) (64-bit)\nOperating System and version (desktop or mobile): macOS High Sierra\n. @2manoj1 Could you please try downloading the code from code sandbox and run on local host. . @2manoj1 \nHow do you mean by 'change the screen'? I tried with different window sizes and haven't seen any issue. Let me know when you have steps to reproduce the exact issue. Otherwise we can close this issue as of now and can be re-opened as needed.. > So let's reframe the conversation. Regardless of the number of items or the steps value, the component should always call onMore() once when the user has reached the end of the visual list...because somewhat obviously, there may be more items to add to the list based on onMore()'s results. @mrebb do you dispute that requirement?\nIf that is not now InfiniteScroll is meant to work, we will use another component from another library.\nI am consistently reproducing the problem, even in https://v2.grommet.io/infinitescroll .\nThank you!\n\n\n\n@palecrow I totally agree with you. That's how InfiniteScroll is meant to work. However, as per current logic onMore() function is triggered with the help of step value. So at this point, Either we can update the docs to  make 'step' prop as mandatory for onMore() functionality to work OR change the entire scroll logic to handle onMore() even when step prop is received as undefined or items length is less than 50. Providing step is one work around until this is fixed in code.. @ShimiSun I don't have CircleCI working experience but I did some research in the past when I decided to move with Travis CI for my previous projects. But in recent times, CircleCI surpassed Travis CI in many areas. For example, Circle CI 2.0 has Docker support, faster builds, better UI, slack integration and decent documentation.  Only thing where Travis has upper hand is in terms of supporting more languages/platforms out of the box such as Android, C, C#, C++, Clojure, Crystal, D, Dart, Erlang, Elixir, F#, Go, Groovy, Haskell, Haxe, Java, JavaScript (with Node.js), Julia, Objective-C, Perl, Perl6, PHP, Python, R, Ruby, Rust, Scala, Smalltalk, Visual Basic. Circle CI supports Go (Golang), Haskell, Java, PHP, Python, Ruby/Rails, Scala, Node.js. Also, Travis is free for open source projects even as an enterprise. But if we are not going deal with any of the other languages or platforms in future and with all the pros that Circle CI has, it is worth moving to Circle CI. . > Works on FF and Chrome. Can't test with any other browser\n@oorestisime I use https://www.browserstack.com, they have all browsers served over cloud instance.. @ShimiSun Something like example shown below. Props can be used to customize width, height, color,etc. Also, to provide different types of indicators, these components can be wrapped in Box and based on the prop value, respective spinner component can be served.\n```\nimport styled from 'styled-components';\nimport { Box } from 'grommet';\nexport const PulseSpinner = styled(Box)width: 40px;\n  height: 40px;\n  margin: 40px auto;\n  background-color: #2f0dde;\n  border-radius: 100%;\n  -webkit-animation: pulseScaleOut 1s infinite ease-in-out;\n          animation: pulseScaleOut 1s infinite ease-in-out;\n@-webkit-keyframes pulseScaleOut {\n  0% {\n    -webkit-transform: scale(0);\n            transform: scale(0); }\n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 0; } }\n@keyframes pulseScaleOut {\n  0% {\n    -webkit-transform: scale(0);\n            transform: scale(0); }\n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 0; } };\n```. I was exactly thinking of second idea that provides a progress component and takes a variant prop to pick of one of these animations like pulse, circular, linear or anything that will be supported by progress component. \nCode Sandbox Example here.  . This spinner is a svg that is wrapped in Box component as part of example story. It would be nice if similar can be given as a component to get customised user experience. . position:inherit !important on StyledCheckBoxIcon should fix the issue. . @ShimiSun I implemented SkipLink example but placed the story under SkipLinks. There are two different components SkipLink and SkipLinks. I will move this example to SkipLink. . Moved SkipLinks work to different branch and will make a different PR for the same.. @oorestisime Thanks for reviewing. That's exactly what I thought before pushing this up, but I wanted to kind of show/address specifically the issue with sticky div. I will update the fix.. Updated the div's with Box. . @ShimiSun I like Click & Scroll. Thank you for reviewing. . \ud83d\udc4d . @ericsoderberghp I added display:none to support MS-Edge browser. We can change this to display:contents once MS-Edge supports. Without display:none, MS-Edge had alignment issues. . Sure. Let me re-visit and test. . This is fixed now. . Sure, mode is perfect. Thanks!!. Addressed in recent commit. Thanks !!. Addressed in recent commit. Thanks !!. Addressed in recent commit. Thanks !!. Addressed in recent commit. Thanks !!. Updated docs.. Not sure. Fixed it.. ",
    "Rastopyr": "i'm sorry, but this is confused, when example on main website showing not really view of components. i mean TextInput component in FormField. this is related with some refactoring or last release? how community could help improve that? thanks!. oh, my fault. sorry. i mean example with TextInput. i just include scss grommet-core to my project, but as i see this scss without this styles:\n. @atanasster thanks for example. im not added App component to root of my app. my question is resolved. thank you so much!. ",
    "alexlee-dev": "@alansouzati I apologize, I think I made this issue before I dug deeper and found the GitHub icon, and forgot to go back and delete it.. ",
    "prepaka": "Spencer Thanks for the reply, but when I remove the onSort or SortIndex options from the TableHeader the Checkbox click is working as expected in Firefox browser also. So, my assumption something onSort or SortIndex causing the issue in Firefox browser. \nIf we need to change the type in TableHeader of grommet means how to do it? Is there any option to change?. ",
    "stelian87": "any solution here? i'm getting this when i'm trying to use PagingTable:\nCannot read property 'Consumer' of undefined\nTypeError: Cannot read property 'Consumer' of undefined\n    at PagingTable (node_modules/grommet-controls/es6/components/PagingTable/PagingTable.js:45:0)\n    at mountIndeterminateComponent (node_modules/react-dom/cjs/react-dom.development.js:13380:0)\n    at beginWork (node_modules/react-dom/cjs/react-dom.development.js:13820:0)\n    at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:15863:0)\n    at workLoop (node_modules/react-dom/cjs/react-dom.development.js:15902:0)\n    at renderRoot (node_modules/react-dom/cjs/react-dom.development.js:15942:0)\n    at performWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:16560:0)\n    at performWork (node_modules/react-dom/cjs/react-dom.development.js:16482:0)\n    at performSyncWork (node_modules/react-dom/cjs/react-dom.development.js:16454:0)\n    at requestWork (node_modules/react-dom/cjs/react-dom.development.js:16354:0)\n. ",
    "chrischen": "Is there any way to disable this so that mobile-detect doesn't get included and gets tree-shaken? As you can see here it is contributing 6.9% of the total bundle size of all of grommet: https://bundlephobia.com/result?p=grommet@2.5.5. > So 2 is not possible, the problem was on the initial rendering so it is not a matter of css.\nI haven't worked with styled-components, but it should support media queries? Can't a media query be used, and thus hide/show/widths of components will be calculated when the CSS is parsed on the browser? Why is there display code being sent from the server anyways?. I'm not against SSR, in fact, I use it and require it when selecting any React solutions, but I'm just not totally understanding why the responsive rendering information is needed in the react render function rather than purely done with media queries.\nThat being said, I think at the least mobile-detect should be an opt-in dependency since many people do not use SSR, and it is quite large a dependency on an optional feature.. Maybe the flickering can be solved by auto-inlining critical CSS where it's needed?\nAlso it seems like the ResponsiveContext api passes the size information to react, which means people may already be depending on that on the server?\nI'll play around first and get back to this.... ",
    "jpdesigndev": "@atanasster I'm new to TS, but, as a library consumer, the full TS experience should be possible/desirable right? Are you speaking from a library author perspective? If the former, as long as the full API is typed, there should be nothing about the experience that is different. After all, don't TS projects simply export a .d.ts file when packaging for npm anyways?. ",
    "hc-12": "I too have stumbled into this problem when using TextInput. \nThe fix for this particular case, I just need to extend or intersect with IntrinsicElements['input']. This would need to be done for the rest of the components that grommet extends from.\ntypescript\ndeclare const TextInput: React.ComponentType<TextInputProps & JSX.IntrinsicElements['input']>;. We also need to account for certain components that accepts a tag prop. Where tag is keyof JSX.IntrinsicElements. Which ideally have a default of div or span depending on the component.. This is somewhat related, not sure whether i should open a new issue. There's an incorrect type for props that accepts string value and boolean. At the moment they all accept string as value which is incorrect and will get console warning.\nFor example in Box.flex & Box.fill:\ntypescript\nflex?: \"grow\" | \"shrink\" | \"true\" | \"false\";\nfill?: \"horizontal\" | \"vertical\" | \"true\" | \"false\";\nThe type should probably be:\ntypescript\nflex?: \"grow\" | \"shrink\" | boolean;\nfill?: \"horizontal\" | \"vertical\" | boolean;\n. @aach \nIn typescript you can merge your own declaration with other declaration such as the libary's declaration.\n```typescript\n// extend-grommet.d.ts\nimport {TextInputProps} from 'grommet';\ndeclare module 'grommet' {\n   // extend your types in here\n   declare const TextInput: React.ComponentType;\n}\n```\nYou can save this in say <rootPath>/types. Then include in your tsconfig.json:\njson\n{\n  ...,\n  \"include\": [\"src\", \"__tests__\", \"types/**/*.ts\"]\n}\nThere are some limitation on what you can merge: https://www.typescriptlang.org/docs/handbook/declaration-merging.html. ",
    "aach": "\nI too have stumbled into this problem when using TextInput.\nThe fix for this particular case, I just need to extend or intersect with IntrinsicElements['input']. This would need to be done for the rest of the components that grommet extends from.\nts\ndeclare const TextInput: React.ComponentType<TextInputProps & JSX.IntrinsicElements['input']>;\n\n@hc-12 \ntypescript newbie here \ud83d\ude4b\u200d\u2642\ufe0f\nhow can i achieve the same in my project? where do i have to put that definition?\nthanks. @hc-12 Thanks for the explanation!. ",
    "JoshK2": "\nwill you be willing to address the conflicts?\n\nThe solution that I think worked, seems to not working.\nSo I don't know how to solve the problem, and I think is not important because I update to version 1.13.0 to use the \"hold\" grommet and everything working.\nYou can close the pull request.. Yes, but this version is failed to load the babel register module. yes, do this:\n1. clone the project\n2. in the terminal run \"npm i\"\n3. in the terminal run \"npm run test\"\nits output \"Failed to load external module @babel/register\"\nand when i downgrade to gulp version 3.9.0 its work good and output \"Requiring external module babel-core/register\". ",
    "d3dc": "@ericsoderberghp This bug is back in the codesandbox and my code, afaict: https://storybook.grommet.io/?selectedKind=Box&selectedStory=Elevation\nAn updated fork of OP: https://codesandbox.io/s/nw0q76v80m. ",
    "joelgetaction": "Thanks @alansouzati I really appreciate your response.\nI don't think it's so much that I wanted components from V1 that are missing in V2, but more like for components like Button or TextInput that are in both V1 and V2, I thought the V1 versions looked much better style wise and aesthetically.  Like V1 just looked prettier and classier in my opinion.\nFor all of the V2 components that are also in V1 (e.g. Button, TextInput etc) is there a way to create a default \"skin/theme\" that makes those components look exactly like they did in V1?  That would allow us to adapt the newer/netter API of V2 without any visible changes in component appearance.\nDoes that make sense or do you want me to add more specific component examples, which I'd be happy to do!\nThanks again.. ",
    "taleschaves": "\ud83d\udc4d . ",
    "murbanowicz": "I understand this approach and it somehow makes sense. It allows creating additional packages by people with additional components build on top of Grommet.\nAbout the missing components, first of all, I think time picker in one or two versions should be present in the core.\nHave you thought about going mono-repo and scoped packages to make it cleaner? \nWe would then have @grommet/core, @grommet/icons etc. Just an idea :). Formik is currently best or at least one of the best solutions for forms with React. Maybe instead of creating something new it is better to either just document how to use Formik with Grommet or create simple wrapper for Grommet & Formik ?. @oorestisime not sure if this one. I think this one is hard coded.. The trend is other way around - people either rewrite in TS or include typings inside the repo as Grommet does so it is not good idea.. @oorestisime I am not sure if  owners want to merge it? . ",
    "Smirl": "Thanks. ",
    "cefleet": "And upgrading to Styled-Component to 4.0.1 fixed the issue.\nClosing.. ",
    "kristiandelay": "https://v2.grommet.io/use\nstarting a fresh app using the npm install -g grommet-cli & grommet new [app-name] caused a warning and would not load the page.\nWARNING in ./node_modules/grommet/es6/contexts/ThemeContext/ThemeContext.js 6:0-12\n\"export 'ThemeContext' was not found in 'styled-components'\n @ ./node_modules/grommet/es6/contexts/ThemeContext/index.js\n @ ./node_modules/grommet/es6/contexts/index.js\n @ ./node_modules/grommet/es6/index.js\n @ ./src/App.js\n @ ./src/index.js\n @ multi (webpack)-dev-server/client?http://localhost:8080 ./src/index.js\ni had to also upgrade to the latest style components to fix this issue.\nSeems like styled components needs to be updated in grommet.. ",
    "brandontle": "Would be very interested in this as well. Open to helping out too if some direction is given! . ",
    "alexwine36": "There also seems to be an issue with the generator writing true and false to \"true\" and \"false\"\nIf you need any help please let me know. ",
    "fredyagomez": "@alansouzati  Hi Alan, maybe not a topic for this issue but what was the motivation to move to V2?. I am glad V1 still running and loved that one. V2 does not look like a step forward from what I have seen so far.. @alansouzati you were there from the beginning so do I (I used to work at HPE). It does not look like Grommet at all. A lot of colors, shapes are different, funny cartoon at the bottom of the page like yelling at something (it looks like it is everywhere now, that changed a lot). The brand is gone. I guess some new people took over this project, new developers and they put their personal touch. I love V1 and all the sample apps developed using the library. It can also be the market likes more V2 and this is just my personal opinion. Good luck anyway but please keep V1 running :). ",
    "tbranyen": "Turns out it was an error in the example code.. :tada: . @oorestisime awesome, where can I find out more about the consolidation effort? I don't see any indication in the code that tag is being deprecated.\nIf tag and as are getting aligned that's great, but what about the other props I listed?. @ericsoderberghp I'll dig more into gap, on the surface it looks to be very similar to margin.. webpack is better at detecting template strings since this is generally used for dynamically importing pages, I had originally used a variable which webpack doesn't try to resolve.. Yeah that's my understanding, their AST crawling must expect a StringLiteral or TemplateLiteral. Instead of hardcoding the theme: base in every component, it might be better to create a base defaultProps object that gets mixed into each component, allowing you to import and set the default base theme in one place.\njs\nstatic defaultProps = {\n   ...defaultProps,\n}\nThis will make it easier to refactor in the future.. I think the idea here as far as interface/API goes is for those wrapping Grommet and not a general interface. I like the idea of initializeTheme which takes in a theme object and sets the default props under the hood.. Minor suggestion, change to initializeDefaults and allow any defaults to be passed. While we know theme is a safe default right now, a system may want to add others.\n```js\nimport { initializeDefaults } from 'grommet';\nconst theme = { / my theme / };\ninitializeDefaults({ theme });\n``. Shouldn't that object that is passed be set as the prototype for all components? I could see someone wanting to set a defaultallyTitleor even setting some default props you want to have access to in your style prop functions.. @ericsoderberghp contrived example: a system wrapping Grommet needsallyTitleto be a required field for accessibility reasons. Something like setting a unique tokenallyTitle: 'MISSING_ALLY_TITLE'` that can be scanned for and reported if missing. I've seen this done for internationalization to ensure no strings are hardcoded.\nAs this feature is for a different audience than the common user consuming Grommet components as-is, I'm not sure it makes sense to limit the scope to theme. I would trust the user knows what they are doing if they are using this feature.. Doesn't this line include this doc component, which is excluded in production?. Talked offline, but wanted to capture here that I think this still includes a module that was previously excluded and will not be treeshaked as Object.keys has run on it.. ",
    "c0rvax": "Hi! Sorry to bump this thread, but how would you implement a submit function once the enter is pressed? I was thinking about Keyboard but that event would grab all the enters that were pressed. To make google search of this problem easier, here is the error\nCannot read property 'drop' of undefined\nThis should also occur on other modules which rely on theme. If there is a way to make the dependencies exclude this specific version, that should be a nice fix, i think. ",
    "talarico43": "@ericsoderberghp I added the latest version to my project at those props are working fine now. Thanks for taking a look. . the same would be nice for the main menu label as well\nhttps://github.com/grommet/grommet/blob/master/src/js/components/Menu/Menu.js#L119\n. ",
    "silltho": "I'd love to work on this.\nStyledTextInput uses the textInput.extend prop.\n${props => props.theme.textInput && props.theme.textInput.extend};\nShould StyledTextInputContainer, StyledPlaceholder and StyledSuggestions use the textInput prop too, or something like textInputContainer.extend?\n. https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=infinitescroll&module=%2Fsrc%2FInfiniteScroll.js shows that onMore isn't working. . ",
    "cyberrian": "\nWhy is name prop at FormField level? Shouldn\u2019t it be a prop of the input component?\nDoes this mean a FormField can only have one input?\nWhat does FormField prop \u201ctype=email\u201d do? Seems like it should be a prop of the input component.\nHow do you specify the validation error string?\nNot excited about FormField's options prop. Not obvious that having < 4 options renders RadioButtons and a Select otherwise. What about multi-select/checkboxes?\nThe comments example shows both FormField and input having prop name=comments. Isn't that redundant? Goes back to 1 where name prop should be at input level.\nHow do we set initial/default value of an input? If initial value doesn't change, will its value get stored in the state?\nSome dialogs only need to submit modified fields (e.g. edit dialog). Can we enhance this to keep track of dirty fields?\nFormField.props.required should also support a callback function if flag is dynamically calculated.\nSome fields may need multiple validators and/or validators which depend on other validators. \nI can see this validate function getting huge/messy. Should we support key/values for multiple validators? If so, FormField.props.required doesn't need to be its own prop.\nExample:\n<FormField validate={{\n   isRequired: this.isRequired, // gets called first; if passes, calls next isPhoneNumber validator\n   isPhoneNumber: this.isPhoneNumber\n   ...\n}}/>\n\nIn general, I feel that the FormField component is becoming a wrapper/God input component which will need logic to render multiple types of input components. I can see many if-else branches which can get messy. I like the idea of leveraging Formik. No reason to re-invent the wheel. Thanks.\n. > > 1. Why is name prop at FormField level? Shouldn\u2019t it be a prop of the input component?\n\nIt will end up being a prop at the underlying input, but it is also used as the key into the value to extract error information.\n\nDoes this mean a FormField can only have one input?\n\nIf you wanted more than one input in a FormField, you would have to add your own children and wrap with FormContext. See notes in the associated pull request.\n\n\nWhat does FormField prop \u201ctype=email\u201d do? Seems like it should be a prop of the input component.\n\n\nIn the current direction, all unknown props are passed down to the input component. For TextInput, type would be directly passed to the underlying input.\n\n\nHow do you specify the validation error string?\n\n\nThe current direction allows validate to take an object, with a regular expression and a message. If validate is a function, the return value is the error string. @atanasster asked that we enhance validate to take an array, which seems reasonable.\n\n\nNot excited about FormField's options prop. Not obvious that having < 4 options renders RadioButtons and a Select otherwise. What about multi-select/checkboxes?\n\n\nAgreed. The current direction backs off on including this intelligence inside FormField.\n\n\nThe comments example shows both FormField and input having prop name=comments. Isn't that redundant? Goes back to 1 where name prop should be at input level.\n\n\nAgain, the name is used for the error strings.\n\n\nHow do we set initial/default value of an input? If initial value doesn't change, will its value get stored in the state?\n\n\nYou would set the value object of the Form to have a key with initial value where the key matches the FormField name.\n\n\nSome dialogs only need to submit modified fields (e.g. edit dialog). Can we enhance this to keep track of dirty fields?\n\n\nThe current direction includes a touched object so you can see which fields were modified at all.\n\n\nFormField.props.required should also support a callback function if flag is dynamically calculated.\n\n\nGood idea.\n\n\nSome fields may need multiple validators and/or validators which depend on other validators.\n   I can see this validate function getting huge/messy. Should we support key/values for multiple validators? If so, FormField.props.required doesn't need to be its own prop.\n\n\nInstead of an object, an array makes the ordering more explicit. Agreed that required could be handled with this pattern. Although, required as a single property might be more convenient. We'll keep discussing.\n\nExample:\n<FormField validate={{\n   isRequired: this.isRequired, // gets called first; if passes, calls next isPhoneNumber validator\n   isPhoneNumber: this.isPhoneNumber\n   ...\n}}/>\nIn general, I feel that the FormField component is becoming a wrapper/God input component which will need logic to render multiple types of input components. I can see many if-else branches which can get messy. I like the idea of leveraging Formik. No reason to re-invent the wheel. Thanks.\n\nThe current direction has a component that avoids this.\n\nThanks for addressing all questions. I'm happy with the direction we're heading.. ",
    "krawalli": "I've played a little bit with this and -> very nice and thumb up! \nHowever, I'm struggling with e.g. CheckBox. If used as  component= parameter - e.g. the label= is rendered twice. The OnChange Method seems to be implemented by user (it could be done with auto-magic in the background).The value itself seems not to be picked up by the submit method.\nBeyond that:\n- Still having problems to get \"validator\" to do what i want. \n- for validation, there should be any i18n for the error text\n- if you have two password inputs, a validator should compare to other inputs in that form. How to reference them in code. Maybe a \"auto-ref\" could be handy here.\n- if I set \"errors\" via var before first submit, then these are not rendered (or at least i did it wrong)\ni would suggest to have a form with all standard input types, so there is a kind of documentation for usage.\n. CheckBox is working fine - thank you!\n\nAlso, can you clarify the issue with \"any i18n for the error text\"?\n\ne.g. in FormFields.js\n~~~ javascript \n[...]\n  if (required && !data) {\n    error = 'required';\n  } else if (validate) {\n[...]\n~~~\nshould be something like\n~~~ javascript \n[...]\n  if (required && !data) {\n    error = this.props.i18nRequired || 'required';\n  } else if (validate) {\n[...]\n~~~\n. A note for documentation: \nI tried to integrate the \"SeasonsSelect\" example from storybook. Since it has a custom \"onChange\" method, it wont work.\nSolution: call the onChange Method from the props. That will give the value back to the form context like this:\n~~~\n        onChange={event => {\n          this.props.onChange(event)\n          [...]\n        }}\n~~~. yes, thats what i've done. ",
    "pstauskas": "As of Grommet 2.1.0, the indeterminate prop was introduced for CheckBox, but I cannot theme my indeterminate checkbox properly because checkBox.icon.extend and checkbox.check.extend do not have access to the indeterminate prop.. hi @ericsoderberghp @alansouzati was this intended to be fixed in v2.3.0? Unfortunately I am seeing many of the same issues, plus the overall experience within a Select that has thousands of items is now noticeably more laggy than v2.2.1.. Sure, here is a recording of that storybook where i am holding the down arrow, while my cursor is over one of the middle visible rows. When I stop holding the down arrow, the active row jumps to wherever my cursor is. When I go slower, this isn't an issue. \nA second problem I reproduced in my application, is that eventually after holding the down arrow long enough (alternating between some quick triggered down presses, and back to holding it) will cause the scrolling to stop. You can see this around 8 seconds into the recording, it stops for 2 seconds, but i am still pressing the down arrow at that point. In this scenario, the active options keep changing \"below the fold\" but the scrolling doesn't happen to match the change in active row. I have two suspicions - 1) is that there is some race condition of some sort happening, and/or 2) it could be possible that this is more likely to happen to when rows differ in height (as you can see in my example).. @ShimiSun @oorestisime thanks for confirming the header fix and its size property, makes sense!\nMy apologies for the font-weight issue, after spending some more time debugging, I think it was a subtle tweak made in my environment which caused this. Thanks for looking into this anyways :)\n. Could this also be an array of disabledKeys? That would be super convenient and parallel the value array possibility.. I'd love to see some maps created to enable O(1) access for selected, disabled and values (and anything else that may normally need to be looped over) to benefit a Select with 1000+ items. It is certainly more work to accomplish this and to ensure the maps are always being updated appropriately where necessary, but it guarantees speedy performance rather than doing some, forEach, map over all items on each render. This is less of an issue when infinite scroll changes to only render what's visible, but ultimately the most performant option regardless of implementation.. On closer inspection, i think this is less of an issue than I thought since any looping is done over the current selected or disabled values (which is most often much less the total set of available options). Also i see the index is being used to pluck out the necessary option rather than using something like find or indexOf to get that option \ud83d\udc4d . IMO 200 is not a good enough test for \"lots of options\". I'm having issues when I bump this to 3000. Now this may be fixed when InfiniteScroll allows virtualization (only render what's on the screen), but with 3000 when I rapidly scroll to the bottom, it keeps getting \"stuck\" very easily (i.e. not rendering any more items) until i scroll up a bit, then scroll back down again.. ",
    "episodeyang": "The type for this is currently set to String by mistake. Shall we change the type to accommodate custom components the same way that the styled components do it?\n2869 . @oorestisime I'm looking forward to this PR too! Warning-free finally :). @atreb this trade-off makes sense \ud83d\udc4d . @oorestisime Sorry about the unrelated changes! I left the comments above, hopefully they address the issue.\nYou can take it over from here because you are already on this. Thanks!\nIn terms of the helper function, I think these changes might be good as it is. But if as is indeed shared, it makes sense to have a unified place to put it. But it would be idea if it goes into some default prototype dict instead of just a single helper function for that one PropType. \nIn that case this would go beyond the scope I feel comfortable of making in the PR :) \nAll in all, thanks for the quick responses!! I will try to help with more PRs in the future.. Thanks guys!!\nOn Mon, Mar 4, 2019 at 6:55 PM Shimi notifications@github.com wrote:\n\nMerged #2871 https://github.com/grommet/grommet/pull/2871 into master.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/grommet/grommet/pull/2871#event-2179732517, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAme2hldaFL0KAD4NMOhnXOcXEpHOzw0ks5vTdyQgaJpZM4baKsz\n.\n. @oorestisime this one happened here b/c there is another unrelated bug. The prop topes for column and down is self-inconsistent. I didn't have time to file a separate issue for this and and this fix on my branch. Sorry for the confusion!!\n\nThe issue this is trying to address is the following: PropTypes of column (and row) in the past looked like \njavascript\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"any CSS size\"\n[\"small\", \"...\"]\n[[\"small\", \"medium\"], \"...\"]\nand \"string\". \"string\" type is like an escape for thins that are not in the OneOf list.\nHowever, the list of tuple for the lower and  higher range did not allow one to use string type. this is self-inconsistent. Which is why this line changes it so that the inner tuples in the ranged layout can also take non-OneOf strings.\n. The ts definition is correct :) because it is easier to write more general type requirements than this home-brew react-docgen replacement :)\nIn other words, this definition is not consistent with the ts definition in its original form.\nts-definition\ntypescript\nrows?: \n    (\n       \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"full\" \n      | \"1/2\" | \"1/3\" | \"2/3\" | \"1/4\" | \"2/4\" | \"3/4\" | \"flex\" \n      | \"auto\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" \n      | \"full\" | \"1/2\" | \"1/3\" | \"2/3\" | \"1/4\" | \"2/4\" | \"3/4\" \n      | string | string[]\n     )[] \n     | \"xsmall\" | \"small\" | \"medium\" | \"large\" \n     | \"xlarge\" | string;. I can fix this. What linter do you use? somehow my WebStorm linter does this automatically.. These seems to be typos. React.Element should be capitalized?. This is an error I introduced yesterday when editing. same as above.. ",
    "MadRabbit": "is there a way around this? seems like v2.2 is still affected. i patched it like so in my local machine and it seems to work:\n```ts\nimport * as React from \"react\";\ninterface AnyFunc {\n  (...args: any[]): any\n}\nexport interface SelectProps {\n  a11yTitle?: string;\n  alignSelf?: \"start\" | \"center\" | \"end\" | \"stretch\";\n  gridArea?: string;\n  margin?: \"none\" | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | {bottom?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string,horizontal?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string,left?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string,right?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string,top?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string,vertical?: \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string} | string;\n  children?: AnyFunc;\n  closeOnChange?: boolean;\n  disabled?: boolean | number | string | object[];\n  disabledKey?: string | AnyFunc;\n  dropAlign?: {top?: \"top\" | \"bottom\",bottom?: \"top\" | \"bottom\",right?: \"left\" | \"right\",left?: \"left\" | \"right\"};\n  dropTarget?: object;\n  focusIndicator?: boolean;\n  labelKey?: string | AnyFunc;\n  messages?: {multiple?: string};\n  multiple?: boolean;\n  onChange?: AnyFunc;\n  onClose?: AnyFunc;\n  onOpen?: AnyFunc;\n  onSearch?: AnyFunc;\n  options: string | JSX.Element | object[];\n  placeholder?: string | React.ReactNode;\n  plain?: boolean;\n  searchPlaceholder?: string;\n  selected?: number | number[];\n  size?: \"small\" | \"medium\" | \"large\" | \"xlarge\" | string;\n  dropHeight?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | string;\n  value?: string | JSX.Element | object | string | object[];\n  valueLabel?: React.ReactNode;\n  valueKey?: string | AnyFunc;\n  emptySearchMessage?: string;\n}\ndeclare const Select: React.ComponentType;\nexport { Select };\n```. ",
    "dininski": "@oorestisime when would a new release with this bugfix be released?. Yeah, please release this as the fix has already been merged and this is blocking any usage in TS projects. I've been struggling to find a TypeScript workaround with the latest version of grommet, apart from diving in the node_modules folder and updating it by hand. This works for local development purposes, but is obviously blocking CI deployments.\nEven forking the repo does not seem to work out of the box as there are non-trivial build+release steps.. I'm using a different approach, probably equally as hacky:\n\ncopy the fixed definition to custom-definitions.d.ts\nuse a postinstall script to delete the original type definition within node_modules. \n",
    "fnimick": "@alansouzati Any word on the release? I'm not sure which Friday you intended but this is blocking use of grommet in typescript projects.. ",
    "matepapp": "We have the same issue and we're waiting for the new release. We solved it by using a temporary workaround with patch-package. It's great for solving minor issues such as typings, but I still recommend pull requests for major problems. If you fix the typedefs locally then run the script for the specific package it creates a patches folder with the file and version you patched. Our method is to include the related github issue (if there's any) in a comment on top of the patch. We revise them monthly to see if the issue has been resolved.. ",
    "sdebaun": "discovered Grommet a few days ago, playing with it in a toy app, same issue, would love to use it.. ",
    "oahehc": "also expecting for the new release.\n@matepapp \nthanks for the sharing.\npatch-package is a great workaround.. ",
    "stvmachine": "+1. ",
    "nivo33": "@ericsoderberghp \n\nI don't think that CodePen is the right one for this issue. Perhaps another one?\n\nMy bad. Here it is: (edited in original as well)\nhttps://codesandbox.io/s/qkj756zr0q. ",
    "dderooy": "I can't reproduce it in the sandbox. It must be an issue with my local setup. If I remove 'background' property from my components, the site loads without errors. Otherwise I get this: \n\n. \"grommet\": \"^2.2.1\",\n\"grommet-icons\": \"^3.2.1\",. That solved it! Thanks for your help \ud83d\ude03 . I ended up going with another carousel plugin with more formatting options. I see you added those changes though. Thanks for your help! . ",
    "kanonochina": "Hi @ShimiSun The updated package.json fixed the issue, Thanks for the help. ",
    "kimwanglee": "@oorestisime thx for your reply.\nI will give jest-styled-components a try.\n. ",
    "patricknick": "I don't think moving the types over to DefinitelyTyped would be too bad. As long as there is some community to keep the types more or less in sync with the Grommet library. This approach was also recommended here: https://github.com/styled-components/styled-components/issues/1778#issuecomment-401974135\nSurely, at the moment type support is not ideal. Generating the types from PropTypes is in my opinion too generic. Many types are so unclear, quite often we need to cast them as 'any', which is not the idea of typings. Take the select component for example.\nThe value property ends up with this:\nstring | (string & string[]) | (object & string[]) | (JSX.Element & string) | (JSX.Element & number) | (JSX.Element & string[]) | ((string | object)[] & string) | ((string | object)[] & number) | ((string | object)[] & string[]) | undefined\nBasically, all I can pass in is a string or nothing. The rest is excluded by the union types.\nMeanwhile, the onChange function is defined as such:\n(((...args: any[]) => any) & ((event: React.ChangeEvent<HTMLSelectElement>) => void)) | undefined\nIt's like an AnyFunction.\nWhen working with Grommet and Typescript I'd wish for an API, that helps me code faster without having to look at the documentation every time to see what properties I can pass or expect.\nTherefore I agree with @ericsoderberghp to abandon react-desc. If on DefinitelyTyped or within Grommet is more of a detail question for me... But I assume rewriting the entire library in Typescript is just not an option.\nWhat does the core team think? . As discussed on Slack I'm facing the same issue. I created a CodeSandbox where I tried to find out more.\nhttps://codesandbox.io/s/6vml1mypz\nI tried to reconstruct the Grommet issue above and it seems to be related to the exported React.ComponentType<...>. In my example, when I changed it to React.FunctionComponent the error disappeared as well.. Sorry, I've been away for a while and couldn't follow up on this. We are not really further, are we? I updated the CodeSandbox with the latest typings from styled-components but it's still the same issue:\nhttps://codesandbox.io/s/xr317vww4w. > Suggestion: change typing of all grommet components to React.FC<Props & JSX.IntrinsicElements['something']> or React.ComponentClass<Props & JSX.IntrinsicElements['something']>\n@vadistic I would agree with your suggestion. But I remember Grommet used to generate it's typings from PropTypes with react-desc(https://github.com/grommet/react-desc). Is this still the case?. I think we can close it. . ",
    "schettino": "What do you guys feel about a TS rewrite? The project is well structured, and we can have a transition phase and tackle this with an elaborated approach as well. I'm down for it and can dedicate my time on this if you want to move towards it.. ",
    "michaelauderer": "I'm also experiencing this exact issue on a new project with v2.2.0. . ",
    "miguelpeixe": "I'm experiencing the same issue with Meteor 1.8.0.2. ",
    "cafrias": "I'm experiencing the same issue with version 2.4.0, I got it working with version 2.1.0. My version of parcel-bundler is 1.11.0. ",
    "shabtaisharon": "I believe this issue does not lie inside of Grommet, since all of my other applications that use webpack, react app or nodejs does not have this issue.\nMy suggestion is to use cross-env to set NODE_ENV=production when you run your server.\n1. Install cross-env -> npm install --save-dev cross-env\n2. Update your start script in package.json -> \"start\": \"cross-env NODE_ENV=production parcel index.html\"\nThis should solve your issue, i'm currently using grommet v2.5.5. ",
    "one19": "@ShimiSun that leaves a bit to be desired, honestly.\nForcing the bundling tool for an entire application to run in production mode (much slower, and without many benefits) because of a very strangely pathed documentation HOC import in a single dependency seems like the cart leading the horse.\nMy use case is better served by not upgrading grommet until a better solution is found.\nhttps://github.com/parcel-bundler/parcel/issues/2719 the issue on parcel's side seems to indicate they'll not support this variety of import /:.\nI'm at a bit of a crossroads on it. I like both parcel and grommet because of their simplicity of use. Dropping either, or degrading the operation of one for the other seems counter-productive. I'm 100% loathe to roll another webpack/babel setup when parcel solves it for most use cases.\nIs there a method of running this HOC that doesn't involve conditional imports that are dynamically named?\nMy question: my understanding is that the end-developer will never see these docs unless generating them, so why aren't they enabled via a specific NODE_ENV instead of !production?. ",
    "sbilstein": "Agree. Pegging my bundler to production introduces issues with other packages. Will downgrade grommet for now. . ",
    "midnightcodr": "Forcing a project to run in production environment should not be the ideal solution. I just discovered grommet recently and being not able to work with parcel bundler (without using production mode) is really a shame. I am hoping this issue is fixed soon so I can give it another try.. ",
    "Morkalork": "I'm getting this too, showed up when I upgraded to v1.13.0 (from 1.10.1).. Downgrading to 1.11.0 removes the error.. It seems to have been added in this PR: https://github.com/grommet/grommet/pull/2341/files\nI don't have time to go any further down into it right now, but it's a start if someone else can take a look.. ",
    "jasnross": "I began working on a fix for this issue but I'm not sure if it's the right approach.\nWould love some feedback and if it seems good I can submit it as a PR:\nhttps://github.com/jasnross/grommet/commit/5bd82c738270eceadebdcafed2bfb0d7cba7ac75\nBasically the approach is to change the PropTypes def for options from:\njavascript\nPropTypes.arrayOf(\n  PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n    PropTypes.object\n  ])\n)\nto:\njavascript\nPropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.string),\n  PropTypes.arrayOf(PropTypes.element),\n  PropTypes.arrayOf(PropTypes.object)\n])\nThis way react-desc understands that each possible value is itself an array of a single type.. Thinking about this more, the other type that is maybe more in the spirit of the existing PropTypes would be:\nArray<string | JSX.Element | object>\nThis way it matches the original PropTypes definition, where the array can be of mixed types.\nIn that case it would be a fix in how react-desc generates the type for an arrayOf, so that it wraps the list of types in Array<> rather than appending a [].\nHere is what that could look line in react-desc: https://github.com/jasnross/react-desc/commit/0c93e6190b0f5f5016df90f17427dd113b318e54. Awesome, thanks! :). ",
    "vadistic": "I have a connected issue with components missing className prop which is necessary for some stuff with styled-components.\nType '{ children: Element; className: any; }' is not assignable to type 'IntrinsicAttributes & BoxProps & { children?: ReactNode; }'.\n  Property 'className' does not exist on type 'IntrinsicAttributes & BoxProps & { children?: ReactNode; }'.ts(2322)\nProbably all components should be typed with relevant HTML props (i.e Box)\nts\ndeclare const Box: React.ComponentType<BoxProps & React.HTMLProps<HTMLDivElement>>\nOk - to the main issue - unfortunately it's looks like styled-components typings bug:\n```ts\n// styled-components issue example\ninterface ITestComponentProps {\n  a?: string\n  b?: number\n}\nconst TestComponentBase: React.SFC> = ({\n  className,\n  children,\n  ...rest\n}) => (\n  \n{children}\n\n)\nconst TestComponent = styled(TestComponentBase)color: hotpink;\nexport const Website = () => (\n  \nHello // typing error! \n  \n)\n```\nI could not find any typing hotfix that would allow to strongly type all HTML attributes :disappointed: . Yeah, I see that my grommet version was already few days outdated, thanks :)\nJust an idea: css prop could be also supported in typings as it's part of styled-components main API (https://www.styled-components.com/docs/api#css-prop). About css prop, I've made some reasearch(^^) and It looks there is no need for it, see here: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/713db61de6d92736a8db9a01dbcc924816e28597/types/styled-components/index.d.ts#L466\nSo just add this in your project:\n```ts\n  import { CSSProp } from 'styled-components'\ninterface MyTheme {}\ndeclare module 'react' {\n    interface Attributes {\n      css?: CSSProp\n    }\n  }\n```\nSince intrinsic attributes were added to the components typings this should work :). I've took a moment to try debugging it. \nHere's result: https://codesandbox.io/s/nwqv7w1wrm\nIt's is styled-components typing bug because somehow React.Component<Props>  React.ComponentType (a union) is not a valid input argument for styled and grommet components are typed as ComponentType.\nBoth React.FC & React.ComponentClass are valid inputs, just not the union of those.\nIt's probably breaks inference on some level, but frankly I'm not going to go too deep ^^\nSuggestion: change typing of all grommet components to React.FC<Props & JSX.IntrinsicElements['something']> or  React.ComponentClass<Props & JSX.IntrinsicElements['something']>\nI would type it simply as React.FC as grommet components (even as some are classes) do not export any public methods (and those are not typed anyway) - I do not see any downsides. Also it's StyledComponent<C,T,O,A> type that gets exported, but typing it as such would probably introduce some issues for half ts users.\nIf you need to style some Box right now - just do quick(?) inline assertion\ntsx\nconst MyBox = styled(Box as React.FC<BoxProps & JSX.IntrinsicElements['div']>)`\n  width: 100px;\n`\n@reaktivo try above, and as workaround there is also css prop and the theme extend field for each component that gets interpolated directly into styles\nhttps://github.com/grommet/grommet/blob/9eed6e5954e2997c4191b079d5ff6d604db178a9/src/js/components/Box/StyledBox.js#L577-L581. @ericsoderberghp  @ShimiSun \nI suppose you've got enough open issues so I will write it here: SVG components (Meter, Chart etc.) are typed as JSX.IntrinsicElements['svg'] and grommet prop values clashes with HTML SVG prop. The resulting type is basically never (intersection of object[] & string)\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/values\nIt's not only typescript issue because you silently clean values prop from DOM, but I suppose nothing can be done about it without breaking change in api.\nTypescript fix (e.g. via Exclude<>) would be appreciated :)\n```ts\n// add e.g. to utils/index.d.ts\ntype Omit = Pick>\ndeclare const Meter: React.ComponentType>\nexport { Meter };\n``. Last commit is really, really optional. I thought it would be useful to generate typings forgenerate&basetheme. Then the additional typings would be useful for every ts user, not only those who copy/paste base theme.\nWe get the base Theme type that can be used with styled themed interface:\n```tsx\nimport { base } from 'grommet/themes'\nimport { ThemedStyledComponentsModule } from \"styled-components\";\ntype Theme = typeof base\n// https://www.styled-components.com/docs/api#typescript\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider\n} = styledComponents as ThemedStyledComponentsModule;\nexport { css, createGlobalStyle, keyframes, ThemeProvider };\nexport default styled;\n```\nI think it's cool, but again - not sure if  you should include it in your main repo :). @oorestisime Well I disagree, my thinking is:\n - when you only import base theme (as is) you do not have those values so why type them? (possible TypeError exception)\n - when you copy base theme code or use generate function - you can do whatever you really want - the only thing you need is those few utils I've just typed to make sure your theme merges/freezes/overrides are strongly typed.\nIf we go this way the other themes (dark/grommet) could be also typed and most component props values could be dynamically typed from theme key names (sizes, colors, etc), but I feel that would be way, way too many typings for non-ts project. And fully automating this would require setting up typescript in buildchain/CI so I guess not in scope of this PR. I'm simply sharing some typings I needed for myself :)\nLet's see if this is relevant. . Thanks for reminder @MikeWalrath, sorry for leaving it hanging for so long, I've changed my focus for a bit, and somehow month passed :)\n@ShimiSun you've addresed my concers, the main problem I had appears to be my overlook of  [0,1] !== [1,0] and my areas did not match :man_facepalming: \nThe warning of array requirement seems to be reasonable solution for me, I did not notice it under crash call stack the first time and got a bit misled by :\n\nSpecifying a single string will repeat multiple columns of that size, as long as there is room for more. \n\nOne liner in docs could be tiny improvement, but frankly I'm not sure if necessary with this console warning. Maybe simply allowing string value instead would be good UX.\nAnd for typescript - I see it's still as it were so I'm making quick PR and we can close this issue :)\nhttps://github.com/grommet/grommet/pull/2782. one flex was duplicate, and I've changed 'auto'[] to string[] to allow any inner array value - I did not copy whole list again for inner values.\nSince those string values are allowed - those typing values are more or less like quick lookup documentation anyway - I do not think making it 1000+ character long would be any useful.\nIt could be refactored to smth like\n```ts\ntype GridSizeValue = 'small' | 'large' | ... | 'flex' | 'auto' | '1/4' | ...\ninterface GridProps {\n    columns: GridSizeValue | string | (GridSizeValue | string)[] | {count: 'fit' | 'fill' | number, size: GridSizeValue | string | (GridSizeValue | string)[] }\n    rows:  GridSizeValue | string | (GridSizeValue | string)[]\n...\n}\n```\nbut then it would be kind of logical to refactor all typings codebase for consistent use of type aliases (and probably good chance to reintroduce lot's of already fixed bug). ",
    "mikelax": "@vadistic should the request for the css property be broken out into a separate issue? I also think it would be very beneficial.. ",
    "vanluke": "\nmaybe its best to open a new issue and close this one!\n\nbut now without any custom fixes grommet with styled-component and typescript does not work. I would rather use patch-package and fix typing for you project and grommet version. ",
    "reaktivo": "I just bumped into this issue myself, does anybody know a workaround to customise the styles of grommet elements?. ",
    "krismorf": "Hi @florianbepunkt . This was fixed in #2601 . @oorestisime What if it's exactly the same as the video component without the poster image?\n\n. - In addition to the sound controls there is also a download button (W3 Reference). But it's true that a volume control button on the main interface that also mutes the sound will provide better UX.\n- I agree with this point for better DX. Could be something like: \n``jsx\n<Player \n  source={}\n  audio //or video\n  ...\n/>.@types/grommetdoesn't exist yet. You can search [here](https://microsoft.github.io/TypeSearch/).. In the [Docs](https://v2.grommet.io/heading)darkandlight` are not documented but it is working as expected.. ",
    "jensy": "\nHere is a first sketch for the audio player component, it heavily leans on the HTML5 audio spec. Please let me know what you think!. ",
    "OmniZoetrope": "I have the same problem. Currently I'm doing this to avoid the error but I'm sure it's not a proper solution:\n<TextInput type=\"number\" defaultValue={45.95} />. ",
    "lanzeron": "Hey @L0ZZI, thanks for your reply.\nActually, my point was about grouping rows by specific column, but only rows which have identical content in a specific column, which I set in groupBy property, not all rows.\nFor example, I have rows:\n\nin this case if I put 'name' column in the groupBy property would be great if only first two rows are grouped, because they have identical value 'Rob', other rows should be not grouped, something like that:\n\nPlease let me know if this case needs more clarifications here,\nmaybe you know some other way how I can implement this behaviour without groupBy property\n. ",
    "jay-aye-see-kay": "I'm having the same issue, same reproduction steps. I tried updating node_modules/grommet/package.json directly to match the changes in PR#2702, this had no effect. Happy to help more if I can.\nEnvironment\n\nGrommet version: 2.3.1\nBuilt with Node 8.11.4 and Yarn 1.13\nTested on: \nKubuntu 18.10 FF 65 and Chrome 72\nUbuntu 16.04 Chrome 72. \n\n\n",
    "petercpwong": "@ShimiSun No my recent PR focused more on the visual focus indicators showing up as intended. It doesn't solve the issue OP raised here.. Setting webpack's resolve.symlinks to false solved the problem. Closing this issue.. Would it be better if the suggestions wrapper was also highlighted with a green border?. pushed a fix for this. ",
    "anpieber": "This is the sandbox showing the problem pretty good: https://codesandbox.io/s/2znlrxzxxp\nif you downgrade react-redux to 5.x it works. Upgrade back to 6.x it fails. ",
    "reesemclean": "This looks like a must! Keyboard navigation seems completely broken for the current RadioButton. I hope this can get merged in as soon as possible.. ",
    "mirshko": "hey @oorestisime ! \nIt mostly came due to how i made the EmailWrapper component. its as such\njsx\nconst EmailWrapper = styled(Box)`\n  a {\n    color: blue;\n  }\n`\nI think this format is whats causing the issue. . opened pr #2714 to fix this! . @oorestisime okay i think i got it! . ran that! . ahh it didn\u2019t commit will finish up later. ",
    "GabrieleRomeo": "I've tried to use the as property and I noticed that when the property is not lowercase the resulting HTML markup is wrong\nFor example, writing Footer with a capital F:\n```js\nconst Footer = (props) => (\n  <Box\n    as=\"Footer\"\n    flex={{ grow: 0 }}\n    pad=\"large\"\n    margin={{ horizontal: 'large' }}\n    background=\"#000\"\n    {...props}\n\n{props.children}\n\n\n);\n```\n\nwhat I get is this:\nhtml\n<footer background=\"#000\" directionprop=\"column\" flex=\"[object Object]\" pad=\"large\" margin=\"[object Object]\" theme=\"[object Object]\" class=\"StyledBox-sc-13pk1d4-0 bYDacA\">FOOTER</footer>\nis this the intended behaviour?\n. ",
    "grommetux": "@oorestisime I noticed the internal div inside the <td /> still have the colspan prop, can we clean it? It was probably got there from the internal <Box /> inside TableCell\nBTW its Shimi :). can we replace it with a ternary \"if\" ?\nconst domTag = !tag && href ? 'a' : undefined;. ",
    "alexxgathp": "Sure, changed it. Looks like removing selected does make it work\nhttps://codesandbox.io/s/5wmmn7ox7l. ",
    "peterellisjones": "@ShimiSun updating the implementation would make the validation feature a lot more useful. If fields can only be validated independently users will be forced to migrate away from the built-in validation as soon as they have to, for example, validate that a password confirmation field matches the password field. . ",
    "Inukares": "Ok, I guess that may be a subject to change in the future but we certainly can live without it :). Did try that, no changes in behaviour unfortunately.. I decided to try to reproduce the problem once again. I typed npm uninstall grommet, deleted node_modules. Then npm install grommet and tried to import { MaskedInput } once again, but failed.\nWent into node_modules then, checked if node_modules/grommet/es6/components/MaskedInput/  and node_modules/grommet/components/MaskedInput/ exist, and they do. But being curious, I opened node_modules/grommet/index.d.ts and searched for MaskedInput and didn't find it.\nAfter adding export * from './components/MaskedInput it worked, though.. Yes, here's the link showing that MaskedInput doesn't work.\n. ",
    "squexl": "And for the menu component? . ",
    "a-type": "Seems like you could build your own Menu component using Drop and use any links you want.\nAdding render-prop functions for customizing the behavior of more complex components may be something Grommet would want to look into. But at the same time, all the primitive tools are already provided to craft your own version of the complex things like Menu or DropButton if you need that level of control.. I also found that I had to pin the version of @emotion/core back to 0.13 to run Storybook at all.. One thing I'd like to discuss is whether this change can be merged incrementally without fixing the problems I mentioned in the description.\nThe main reason I would lean toward merging this now and addressing those problems later is that, currently, nested Drop doesn't work at all for interaction. This PR fixes that, but does introduce some un-intuitive behavior by preventing closing a nested drop by clicking inside its parent. That problem could be solved in a later change while fixing the much larger problem of nested Drop not working at all.. Also, I noticed you don't commit package-lock.json. The NPM docs say that this file is meant to be committed to source control. I think this could possibly be related to the dependency conflicts confusion. As a public library, I'd recommend locking down your dependency versions as much as possible (I like to specify explicit versions in package.json, too) and auditing new depdendency changes to prevent users experiencing unexpected failures (or malicious behavior) if one of your dependencies happens to push a bad patch at some random time.. I updated the implementation to more correctly stop the event bubbling at the Drop element itself.\nBefore this PR:\n\nAfter this PR:\n\n. Is there anything I can do to move this forward? The close behavior is blocking a UI design I wanted to incorporate in my app for a small create dialog: https://codesandbox.io/s/lz4kq8v7m. I can pull that out, let me know.. I updated the PR.\nA little feedback on the contributing process from my perspective:\n\nLocking down specific dependency versions would probably be a plus; if you don't want lockfiles to change spontaneously and would prefer to audit dependency version updates, that's the simplest way I've found to do it.\nRunning tests on every commit is a team choice of course, but I have found that it crashes the VS Code built-in git support (I get bizarre errors and can't commit), and it takes a few minutes which can discourage making small incremental commits imo. I think CI is the best place to enforce tests, where the environment can remain consistent and resources can be added as necessary to speed up the build. I had some kind of flaky test with TextInput and ended up running with -n just to get past it since I only changed the lockfile.. I'd like to piggyback on this and request more customization around FormField in general, beyond styling. Right now it is both useful because of the Form magic, but also opinionated about styling, forcing children into plain mode. I think making inputs in a form look entirely different from inputs everywhere else in the app is confusing (I'm also not a fan of the 'single line' look, to me it just looks like the controls are missing and there's a random dividing border; there is no invitation to click that empty space).\n\nReally I think a component should never map and modify children as a default behavior. By convention, as a user, I generally expect that if I pass children to a component, they should be rendered inside that component the same way I passed them in. Tweaking their props is a dangerous game and should be used very sparingly for internal state management only IMO.\nIn the meantime, at least Formik basically does this stuff anyways, so all I really need is to write a small visual Field component of my own to do the labels and such.. I sort of hope that this could be adopted incrementally without breaking changes. If a new section was added to the theme structure for \"behaviors\" as I described them above, the components in the library could be modified to include those values in their value hierarchy:\nTo get a value for a CSS style:\n- First priority: extend from the theme component section overrides everything\n- Second priority: any existing component-level theme value (like theme.button.border.width)\n- Third priority: new behavior values (like theme.behaviors.controls.border.width)\nThat way everyone's themes would continue to work as before, but there's a new fallback option for component styles which would use the newly standardized structure. For a V3 release, you could then go in and clean up all the old theme values and centralize everything to the new system.\nI'm not familiar enough with the Grommet codebase to know if this would work yet.. There are definitely component-specific properties. CheckBox, for instance, is a very unique component.\nWhat I think would work well is if these components utilized the behavioral style values \"in spirit\". For instance, if the user made the corners of their buttons super round, the CheckBox could also make the corners of its box super round, even if it used a corner roundness which it scaled down to the size of the box relative to the button. Component creators can get creative with how they utilize the behavior properties to calculate their final styles for 'unique' situations.\nOf course, we still want the user to be able to customize these things as they desire. So, you could include 'unique' properties in theme.checkBox, like today. Or, you could hammer out the extend functionality more and ask developers to just write the CSS. One thing that would be helpful in that regard is well-documented class names for sub-elements within components, so you can use a selector like & > .checkbox-box or something to get full control of complex component internals.. I like the tone of Grommet's docs \ud83d\ude04 . Interesting. I am using npm, I wonder if there could possibly be a difference there. I'll try yarn and see what happens. I'll also remove this change.. Did you delete package-lock.json as well?. Oh, that makes sense. I'm ok with using yarn when contributing. I know every team has their own tools.. Can do. Didn't research a best practice.\nI should also probably unregister it on unmount, too \ud83d\ude05 . Nope, this will basically stop events from bubbling upward from inside the Drop. So any mousedown event which originates at a target within the DropContainer element will be prevented from reaching any of its parent elements, like <document>. Therefore, the handlers from other Drops which are listening for that event on <document> to close themselves will not be fired.\n+----------------------+\n| <document>           |\n| +---------------+    |\n| |<drop>         |    |\n| |+------+       |    |\n| ||button|=====>X|    | stops bubbling outside <drop>\n| |+------+       |    |\n| +---------------+    |\n+----------------------+\nAny mousedown event which originates outside the Drop would not trigger this handler, so propagation will not be affected and the event should reach the <document> and close all listening Drops.\n+----------------------+\n| <document>           |\n| +---------------+    |\n| |<drop>         |<========= calls handler\n| |+------+       |    |   ^\n| ||button|       |    |   |\n| |+------+       |    |   |\n| +---------------+    |   |\n|                      |   |\n| +------+             |   |\n| |<div> |============>| reaches document\n| +------+             |\n+----------------------+\nHope my diagrams make sense.. At least, that's how I designed it. I'm still finding my way around your source code, so it's possible I attached the handler to the wrong DOM element.. My intention is to attach it to the element which represents the visible, floating box. I think instead I may have attached it to the <div> added to <body> which helps position that box. I can do some more testing.. ",
    "MaxMillington": "I don't think it's an edge case, I think it's pretty common to want to have a fallback if for some reason the image src is broken. Regarding whether or not it would be a nice addition, I can't really speak much to that since I'm not overly familiar with what Grommet wants to cover vis-a-vis features. \ud83d\ude03 \nThe implementation in my opinion would not be too complex. onError() can already be passed into <Image />. The way I have it now, I just have a simple wrapper around <Image />, and pass this in as a prop onError={() => this.setState({ imageMissing: true })}. On error, I set the state of the wrapper, and then render a different component instead of the <Image />.. @ShimiSun I haven't used the new feature in the Select component yet, but looking at the PR, I think the new open prop will only affect this initial state of the component if I'm not mistaken? I think this is a good feature, but there should also be the ability to simply toggle open and close of Menu, Drop, and Select with a function if the user so chooses. \nE.G. if for some reason there was a use case where the desired effect was that when a user opened a menu on the left side of the page, a menu on the right side of the page opened as well, likewise for Drop. In that case, I think the same functionality should be added to Drop and Menu, and DropButton as well come to think of it. ",
    "palecrow": "I feel as though there is a relationship between the step number and this.  If you go to: https://v2.grommet.io/infinitescroll and add onMore={() => alert('more')} it won't trigger, but if you add step={3} it will.  . So let's reframe the conversation.  Regardless of the number of items or the steps value, the component should always call onMore() once when the user has reached the end of the visual list...because somewhat obviously, there may be more items to add to the list based on onMore()'s results.  @mrebb do you dispute that requirement?\nIf that is not now InfiniteScroll is meant to work, we will use another component from another library.\nI am consistently reproducing the problem, even in https://v2.grommet.io/infinitescroll .\nThank you!. Thank you!\nWhat is the release cadence?. ",
    "2manoj1": "@mrebb @palecrow I tried with step = {25} but its not loading all items also not call the onMore callback function.\nInitial Array Size = 101\nstep = 25\nhttps://codesandbox.io/s/541m963n4n\n\nI need to update array collection after reach the end of the scroll and all items are rendered through lazy loading.\nAny viewport should work with any size of array collection.\n\n\n\nGrommet version: 2.4.0\nBrowser Name and version: Google Chrome 72.0.3626.109 (Official Build) (64-bit)\nOperating System and version (desktop or mobile): Windows 10, 64 bit desktop\n. @mrebb \nI see that your OS is macOS High Sierra.\nI am using Windows 10 Enterprise and Resolution 1920 X 1080. \nI am recorded the issue, please find video in below zip file.\n\nVideo_infiniteScrollissue-Win_10- Google Chrome.zip\n. @mrebb when change the screen its working fine with step 25. \nMy observation was when viewport was small its not called.\nAlso this issue inconsistent. Different viewport Different result.\nIn our project onMore called 2 times after its stop. . > @2manoj1\n\nHow do you mean by 'change the screen'? I tried with different window sizes and haven't seen any issue. Let me know when you have steps to reproduce the exact issue. Otherwise we can close this issue as of now and can be re-opened as needed.\n- 'change the screen' - switching the window and open the window in another desktop window.\n- you can see what problem I am getting, given the video in above.\n. \n",
    "halmos": "Great, thank you. That is very helpful. . Great, yes, thanks I should be able to use that as a workaround. However I believe that the SelectOption styles should still be targetable from within the theme as well as inherit the Select's size option. \n. @ShimiSun great - thanks. I'll take a look in the sourcecode as well. \n. ",
    "Funcan": "Yup, thanks, I tried that in the sandbox and it works as expected. Fixed by PR. I don't seem to be able to do that for just some images though - this might be simply because I've no idea what I'm doing, please don't discount that option. Thanks for the example, I'll keep playing and see if I can get anywhere.. Fantastic, thanks! Seeing all the moving parts a simple change has to touch was instructive. . ",
    "atreb": "I like <Anchor as={Link} ... /> and it does work. However I do see warnings in browser console. I believe the as attribute expects string.\n\n. Awesome...looking forward to it!. @episodeyang in the short term, I am using Anchor's onClick property to navigate react router 4. eg. <Anchor label='my link' onClick={()=>{ props.history.push('/some/link'); }}/> Note this only works with top level component whose props get the history object from the router or else you will have to pass the history to child components. Not ideal, but keeps my browser console warning free for now.. I can confirm that if I use component props to specify TextArea or TextInput, then onSubmit handler's event.value gets the form field values and regex validation also works. However I could not get reset button to work in that form.\n\nI could get the reset button to clear off the form fields only if I have TextInput or TextArea as child to FormField, but then validation does not work nor the form submits.. https://codesandbox.io/s/3kv7y1z346 has two forms. First one uses component props and the one below it uses TextInput as child to FormField.. @oorestisime thanks for the update. The last column in my example is not tied to any property per say since I want to show buttons for the actions. But I can confirm that it works if I specify an existing unused/used property or even set property=''.  Thanks for taking the time to look into this.. ",
    "Ranguro": "I'm still finding broken links that need attention. Check the getting started in grommet v1 page. \nhttps://codepen.io/pen?template=gaEGPY&editors=0010\nhttps://v1.grommet.io/docs/hello-world\nIt would have been nice to implement a workaround that doesn't require other codepen authors to take action. \n. ",
    "nikitavoloboev": "I have this now\n\nBut Jitter text is a div. I still need to align it with CheckBox. Ideally the label would make top and bottom align by center with the checkbox too.. ",
    "wirtzdan": "But I'm not seeing a dark overlay in the given example of the Drop component. This is what's missing for me. . ",
    "mikesol": "Great initiative @oorestisime !\nI can't comment much on grommet versioning, but if you are using semantic versioning, this would represent IMO a patch bump as there should ideally be no change in functionality.. ",
    "dannycalleri": "PR solving this small issue here: https://github.com/grommet/grommet/pull/2888. Ok I see, I used npm. Tests where passing locally with npm run test.\n```\n=============================== Coverage summary ===============================\nStatements   : 81.33% ( 3829/4708 )\nBranches     : 69.97% ( 2488/3556 )\nFunctions    : 79.67% ( 917/1151 )\nLines        : 81.47% ( 3791/4653 )\n================================================================================\nTest Suites: 51 passed, 51 total\nTests:       390 passed, 390 total\nSnapshots:   496 passed, 496 total\nTime:        27.419s\nRan all test suites.\n``. Thanks for your help @oorestisime , I removedpackage-lock.json,node_modules` and everything is working fine with old snapshots, switched back to them.. ",
    "IanKBovard": "i gotcha. Would it be preferred to include the currently non functioning global.control.border.color in this, like the example above?\nborderStyle: {\n'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px',\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px',\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border',\n  }, \n}\nOr would it be preferred to remove that  and add global.colors.border, like so?\nborderStyle: {\n'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px',\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px',\n  },\n// change is here\n  'global.colors.border': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)',\n    },\n  }, \n}. I gotcha. there is a global.control.border.color = 'border' currently in base.js. Changing this property has no effect on the border, however. I posted this issue here #2900. I gotcha. Changes have been made.. new pr opened using current master https://github.com/grommet/grommet/pull/2933. use this branch instead of https://github.com/grommet/grommet/pull/2899. changes made. ",
    "markjackson02": "I just tested it on Windows 10 and it works as expected (Chrome 72.0.3626.121 + Firefox 65.0.2) . <InfiniteScroll> does not play nice when wrapped with a <Box fill> or a <Grid>. Having issues with both on Win 7 & 10.. ",
    "FabienSalles": "Thanks for your reply.\nI created this Grid layout : \njavascript\n<Grommet full>\n    <Grid\n      fill\n      rows={[\"xxsmall\", \"flex\", \"xxsmall\"]}\n      columns={[\"auto\", \"flex\"]}\n      gap=\"xsmall\"\n      areas={[\n        { name: \"header\", start: [0, 0], end: [1, 0] },\n        { name: \"nav\", start: [0, 1], end: [0, 1] },\n        { name: \"main\", start: [1, 1], end: [1, 1] },\n        { name: \"footer\", start: [0, 2], end: [1, 2] }\n      ]}\n    >\n      <Box gridArea=\"header\" background=\"#f89325\">\n        Header\n      </Box>\n      <Box gridArea=\"nav\" background=\"#e4281b\">\n        nav\n      </Box>\n      <Box gridArea=\"main\" background=\"#25f864\">\n        Contents\n      </Box>\n      <Box gridArea=\"footer\" background=\"#3b64d4\">\n        footer\n      </Box>\n    </Grid>\n  </Grommet>\nThis generate a css like this : \n```css\n.grid {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-areas: \"header header\" \"nav main\" \"footer footer\";\n  grid-template-columns: auto 1fr;\n  grid-gap: 6px 6px;\n  grid-template-rows: 48px 1fr 48px;\n}\n.header {\n  grid-area: header;\n}\n.nav {\n  grid-area: nav;\n}\n.main {\n  grid-area: main;\n}\n.footer {\n  grid-area: footer;\n}\n```\nI understood how areas create the grid-template-areas property but i had difficulties at the beginning to specify the correct coordinates with Grommet. So I tried to understand if these coordinates had an other signification and I replicated a CSS grid layout with these coordinates like these : \n```css\n.grid {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-template-columns: auto 1fr;\n  grid-gap: 6px 6px;\n  grid-template-rows: 48px 1fr 48px;\n}\n.header {\n  grid-column-start: 0;\n  grid-row-start: 0;\n  grid-column-end: 1;\n  grid-row-end: 0;\n}\n.nav {\n  grid-column-start: 0;\n  grid-row-start: 1;\n  grid-column-end: 0;\n  grid-row-end: 1;\n}\n.main {\n  grid-column-start: 1;\n  grid-row-start: 1;\n  grid-column-end: 1;\n  grid-row-end: 1;\n}\n.footer {\n  grid-column-start: 0;\n  grid-row-start: 2;\n  grid-column-end: 1;\n  grid-row-end: 2;\n}\n``` \nAnd I found that these coordinates wasn't valid css grid coordinates. To works correctly we have to specify this instead : \n```css\n.header {\n  grid-column-start: 1;\n  grid-row-start: 1;\n  grid-column-end: 3;\n  grid-row-end: 1;\n}\n.nav {\n  grid-column-start: 1;\n  grid-row-start: 2;\n  grid-column-end: 1;\n  grid-row-end: 2;\n}\n.main {\n  grid-column-start: 2;\n  grid-row-start: 2;\n  grid-column-end: 2;\n  grid-row-end: 2;\n}\n.footer {\n  grid-column-start: 1;\n  grid-row-start: 3;\n  grid-column-end: 3;\n  grid-row-end: 3;\n}\n```\nIf you want I created 3 codesanbox : \n one with grommet : https://codesandbox.io/s/4qox3xky57\n a second with css grid-template-areas : https://codesandbox.io/s/5x50n33rln\n* and a third with css grid-column/grid-row : https://codesandbox.io/s/6x98x11wjk\nHonestly, I don't fully understand what I did with css coordinates but this works. \nThe grid-template-areas is simpler for my point of view so my question was about the purpose of your coordinates ?\nMay be you use this solution to workaround the multiples double-quotes but if it is the only reason I would prefer to have an areas property like this : \n~~~\n\n\n      ...\n    \n\n~~~. ",
    "bogem": "@oorestisime  ok, thank you, I also support deprecating these components :) . ",
    "Ganevru": "I understood. Element layer should be used only as an element that can be called (by pressing the button by the user, for example), but not as an element open by default. In this case, everything works fine. Thank you @oorestisime !. ",
    "juanlanus": "My issue is with Grommet's v2 docs. I didn't explain it clearly because I was in a hurry.\nI'm aware that v2 is a work in progress, and that we developers most of the times are struggling with bugs and urgent requirements more than with documentation.\nAs I really like Grommet I'd like it to have useful docs to foster adoption and increase momentum.\nI think I'm a good test subject because I'm not very good at programming JS, so I try to record the issues I find along my way to become a L33t.\nThese might be useful because when we are immersed in a we subject give for granted many details that for the newcomers are far from obvious. I attempt to record the newcomer's view.\nActually, it would be ideal if anybody could use Grommet without needing to get too involved.\nI envision a big community with many users who can leverage Grommet without delving into the code, and a set of more committed developers who delve deep.\nThink of a hybrid car. Think of the least techie aunt you can think of. The car is as complex as a tech product can be but she can use it being unaware of that.\nThis is what good UIs are made of.\nAs Grommet is a tool, it has two UIs to think of.\nOne is that of the applications made with Grommet.\nThe other one is how we the developers see Grommet as a tool.\nAlthough nobody reads the manuals any more, there must be a good docs set available for the devs to solve their issues at once, not needing Shimi's or Oresti's help on Slack (which is excellent, BTW).\nIf you are old enough you might have experienced Underscore or jQuery's docs, concise and to the point, fostering the success of those. On the other hand, YUI had too verborragic pages that dropped readers after a few thousand words.\nI'm here after trying MUI and finding that it required too much involvement to get started while the available information was not that good.\nI'm toying with the idea of getting involved in the writing of Grommet's docs, given that I'm a shitty JS programmer.  \nThat said, I get to the point.\nI was trying to get the gist of the colors thing (actually, the theme thing).\nI found this, which is good but incomplete: \n  https://github.com/grommet/grommet/wiki/Grommet-v2-theming-documentation\nThe author agrees with me, there is a \"More to come...\" at the bottom.  \nMi first issue [0] is that if I do what the Basics section says I end up with a theme I'd like to see like this:\n  https://v2.grommet.io/color\nwith control samples too.\nMy issue [1] is that I'd like to be able to get in the clipboard snippets like those in the API section of WWW\nlike global.colors.focus in JS format.\nThis issue might stem from my lack of understanding of the whole theme thing.  \nWell, these are my ideas. tl;dr: want Grommet to be successful by providing excellent docs. \n. Orestis, you say you are bad at documenting. Most devs are.  I was.\nThis is because as devs we have to laser-focus on the piece of code we are giving birth to, in a flow mind state, disregarding the rest of the universe. Actually, this is a Good Thing.\nDocumenting is like UX or Usability, in that the developer has to switch her mindset to the user's, has to wear the user's hat.\nI learned that while participating (many years ago, like in a previous millennium) in discussions of the STC, the Technical Writers Guild.\nI was willing to learn about usability. It was interesting to notice that docs (they called \"manuals\" then) have to be crafted much like UIs.  \nA docs set requires planning, designing. Like in software architecture, not graphical design.\nTo achieve outstanding results with minimal effort it has to cover the most important use cases, like onboarding, or \"get the gist\".  \nAlso, we need to set a style. For example brief reminder-like snippets (like the current v2 pages) with \"read more\" links that can be useful for the first time, thus combining reference with education.\nThe language has to be screened to devoid it of any words or idioms that might complicate millions :-) of readers from anywhere who struggle with English. Only the simplest, cleanest wording should remain.  \nWhen writing the use cases we must wear the user's hat, not the developer's.\nAs developers we tend to explain what the software does, while as users we come with a goal (\"need to display a list\") and would like to do it with the least posible disruption.  \n\nDisruption: having to switch focus from an interesting coding activity to reading a treatise on lists in order to be able to splash several choices on the UI.  \n\nThe treatise might still be there, but hidden behind a \"read more\" link.\nWe should take pride in the users not needing to \"read more\".  \nRemember, many users are not forced to Grommet. They are more likely staying if they can find an easy path to their goals (this is how I ot to know Grommet).  \nI suggest we build a use-cases listing and somehow prioritize them.\nIt is not like a FAQ. FAQs are bad in that if a question arises frequently it's because somewhere something is confusing or unclear.  \nOne thing the STC tech writers complained about was to have to write about far-from-awesome features (have you ever pressed F1 for help in Windows?).\nThey wished they could influence the software design (the UI) to make it more \"explainable\" which means more usable.\nThis happened because almost always the docs were an afterthought.\nThinking the docs along with the UI design helps making both much better.   . Oops! Orestis asked for a listing of docs issues and I didn't answer that.\nWith code, you can't go to a shitty repo and turn it into a world class application by fixing bugs. Some kind of refactoring is needed.\nThis is not to say that Grommet's docs are so bad. They are yes a bit skinny but a findable reference.\nIMO a layer is lacking between the intro \"a react-based framework that provides accessibility, modularity, responsiveness, and theming in a tidy package\" and the components reference.\nIMO some candidate users drop while trying to build such knowledge on their own.  . ",
    "TalAter": "I'm sure it wasn't intentional... Once you do notice it though, it's kind of hard to unsee.\nThanks for merging it so quickly. \ud83d\udc4d. ",
    "Julien-Molina": "Done :). ",
    "jonathonwalz": "Can do. I'll get that done later today. Thanks for looking into it!. @alansouzati Ok, I've switched to deleting those lines. I can also confirm removing them fixes the issue in my application as well. Thank you!. "
}