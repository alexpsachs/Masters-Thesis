{
    "gdb": "Good catch, thanks!\n. Thanks for the suggestion! Implemented in d24291e, though I do things a bit differently so as not to break backwards compatibility.\n. The convention I was using is\nif {\n} else if (...) {\n}\n. Ooh did I have tabs? shudders\n. (Would do whitespace commits as separate commits though)\n. ",
    "boucher": "You can see a history of changes here:\nhttps://github.com/stripe/stripe-php/commits/master\n. You can check for something that thinks it is encoded in UTF 8 already though, no?\n. I'm fine with the change\nOn Wed, Feb 20, 2013 at 3:33 PM, Evan Broder notifications@github.comwrote:\n\n@boucher https://github.com/boucher Any opinions on this?\nThis will notably cause a slight backwards incompatibility if people were\npreviously creating resources by passing UTF-8-encoded IDs. Previously they\nwould get double-encoded both when they were created and when they were\nretrieved; now they will only be single-encoded, so we may see some new\n404s.\nI've checked the DB for user-provided IDs which aren't pure-ASCII && are\nstill valid UTF-8 after going through an UTF-8->ISO-8859-1 transcoding (I\nthink that's the correct check). I didn't find any, so I don't think the\nincompatibility matters in practice.\nYou can merge this Pull Request by running\ngit pull https://github.com/ebroder/stripe-php utf8\nOr view, comment on, or merge it at:\nhttps://github.com/stripe/stripe-php/pull/34\nCommit Summary\n- Fix utf8 helper to not double-encode strings that are already UTF-8\n  encoded\n- Make sure values are UTF-8 encoded in POST bodies (fixes #27)\nFile Changes\n- M lib/Stripe/ApiRequestor.phphttps://github.com/stripe/stripe-php/pull/34/files#diff-0(6)\n- M test/Stripe/ApiRequestorTest.phphttps://github.com/stripe/stripe-php/pull/34/files#diff-1(25)\nPatch Links:\n- https://github.com/stripe/stripe-php/pull/34.patch\n- https://github.com/stripe/stripe-php/pull/34.diff\n. \n",
    "markalanevans": "This allows me to do :\n```\ntry {\n            App::import('Lib', 'Stripe', array('file' => 'stripe'.DS.'lib'.DS.'Stripe.php'));\n            Stripe::setApiKey(Configure::read('Stripe.secret_key'));\n            $cc_number = $this->data['User']['cc_number'];\n            $cc_expiration = explode('-', $this->data['User']['cc_expiration']);\n        $cc_year = $cc_expiration[0];\n        $cc_month = $cc_expiration[1];\n\n        $cc_billing_name = $this->data['User']['cc_billing_name'];\n        $cc_cvv = $this->data['User']['cc_code'];\n        $stripeData = array(\n            \"card\" => array(\n                'name' => $cc_billing_name,\n                \"number\" => $cc_number,\n                \"exp_month\" => $cc_month,\n                \"exp_year\" => $cc_year,\n                \"cvc\" => $cc_cvv\n            ),\n                \"amount\" => '0.01',\n                \"currency\" => \"usd\"\n            );\n\n        $tokenResponse = Stripe_Token::create(\n            $stripeData\n        );\n\n        //var_dump($tokenResponse);\n        return true;\n\n    } catch (Exception $e) {\n\n        debug($e->getMessage());\n        debug($e->getType());\n        debug($e->getCode());\n        debug($e->getParam());\n        die();\n        return false;\n    }\n\n```\n. ",
    "pc": "Thanks!\n. Good catch. Thanks.\n. (This is now live as 1.6.3 at https://stripe.com/docs/libraries.)\n. Version bump would be great.\nI'd like to get stripe-php running on one of the free CI services (such as travis-ci) I think...\n. testBogusAttribute fails for me -- is it passing for you?\n. Never mind; it looks like this was an issue with my API key, which has some gated functionality enabled.\n. I added stripe-php to travis-ci, incidentally: http://travis-ci.org/#!/stripe/stripe-php.\n. Hm. It was actually because my API key has non-strict param validation enabled, but I shall pass along your proposed feature to the API team.\n. ",
    "epriestley": "Also, would it be helpful if I bump versions in pull requests (ala 3413be801da0e4b7e9d56ed6a8c4dab528bac6b8), or do you prefer to handle that?\n. Hmm, it passes for me --\n$ STRIPE_API_KEY=... php -f test/Stripe.php \nStripe.php\nOK\nTest cases run: 11/11, Passes: 40, Failures: 0, Exceptions: 0\n$ git log -n1 --format=%H\n8cdbff5888b3f7313549eb4a4b38fbc07ce253ce\n. Haha, I assume this means the next version of the API will feature a \"bogus\" field? :)\n. ",
    "ebroder": "Hi Richard -\n   Just wanted to drop you a quick note to thank you for the patch, and to say that I'm so sorry it's taken us this long to merge it. I'm working on making sure we don't drop patches like this in the future.\nI did make some slight adjustments to the composer.json file. In particular, I wanted to be sure the cURL extension requirement was codified.\nI've also gone ahead and registered the package on packagist: http://packagist.org/packages/stripe/stripe-php\nThanks again!\n. Hi Till -\nThanks for sending this patch in. However, I don't think we want to switch to using an autoloader with stripe-php. In particular, I'm concerned that it's impossible for us to use autoloading in a way that is completely safe from other misbehaved autoloaders. Our current approach of including all the files we need, while verbose, is reliable in a way that I think would be difficult to guarantee by using an autoloader.\nI don't want to give you the wrong impression, though! We are absolutely open to improvements to the bindings; we just want to make sure that we can maintain the robustness and compatibility we currently have.\nAs for the specific things you suggested, I'm not opposed to any of them, but did want to have some quick design discussion before you spent time implementing so we could make sure we're on the same page. For a long discussion, it may be worth opening separate issues for each change so we're not stuck having the discussion here.\n- I'm open to swapping out cURL, although I'd be happier if we could offer multiple options for HTTP (c.f. our Python bindings, which try the requests library, urlfetch, pycurl, or urllib2). It's very important to us that any HTTP library be able to verify SSL certificates, or warn very verbosely if it doesn't\n- I'm not exactly a PHP expert, so I'm not totally clear on what you want to replace the static calls with. Could you maybe give me an example? @gdb suggested that you might be referring to the code duplication - his understanding was that that was necessary to deal with the lack of late static binding in PHP 5.2 (which unfortunately we still have to support)\n- I would love to see a test suite that doesn't rely on credentials (and presumably could run offline). But given the presence of our testing mode, I think there's also value in having a test suite that runs against our API. It lets us make sure that the assumptions in our test suite are accurate. Ideally, I would prefer to see us have both types of tests, possibly with the ability to run them independently.\nThanks for your understanding. I hope this wasn't too off-putting - I'd love to have help maintaining and improving the bindings.\n-Evan\n. Sure, I'd be happy to go into some more detail. Obviously with PHP's autoloader mechanism, it's possible to register multiple autoloaders. Suppose we switched to using an autoloader in stripe-php. Then suppose that one of our users was using both our library and another library which also registered an autoloader. If their autoloader was buggy, it could create problems when the user tried to access stripe-php's classes. This is in contrast the the current state, where a 3rd-party autoloader can't impact our hypothetical user's ability to access the Stripe_* classes.\nI realize that this is only one of many ways that a 3rd-party library could affect stripe-php negatively, but I would prefer to not increase our exposure to these sorts of problems. This is based primarily on my experience with our Ruby bindings. Ruby makes it vary easy to change other projects' classes and objects, and we've run into plenty of cases where a well-meaning library inadvertently causes problems by modifying the behavior of our classes.\nI hope that clarifies my concerns some.\nFor the static calls stuff, could you explain what you want to get rid of and what you'd replace it with? I'm still not entirely clear on what you're looking to do.\nThanks for working with me on this\n. Thanks for submitting this, and sorry for the delay in getting back to you.\nUnfortunately, I don't think we can merge this as-is. Namespaces are definitely a great feature, and I wish we could use them, but supporting PHP 5.2 is more than a best-interests consideration for us; a significant percentage of our users are still using it. Dropping support in our main library isn't an option for us at this point.\nHowever, I'm definitely open to switching to PHPUnit. If you'd be willing to separate the PHPUnit switch from the namespace switch, I'd be happy to look at that.\n. Thanks for the bug report, Naomi. I've just pushed out a new version 1.7.1 of the PHP bindings that fixes this issue.\n. I'm a bit confused - can you give me some more context here? It looks like you're running into the same issue was was reported in github issue #12, which was fixed in v1.7.1 (2bed600b). Are you getting an error with that version of stripe-php?\n. Hmm, is printing this only if simpletest isn't available the right thing to do here?\nIt seems like we might instead want something at the top (and top-level) of the file that prints, say, \"Running the Stripe PHP bindings test suite\\nIf you're trying to use the Stripe PHP bindings...\"\nDon't have particularly strong opinions, so if you disagree, I'm happy to merge without.\n. Hmm, sorry about that - we'll take a look.\nFor our own testing, what version of PHP are you using?\nWe added SingletonApiResource fairly recently, so you can grab a slightly older version as a stop gap. https://code.stripe.com/stripe-php-1.7.2.tar.gz or https://code.stripe.com/stripe-php-1.7.2.zip should work\n. Bah, I never manage to get the commit to close the issue.\nIn any case, I've just released a version 1.7.5 of stripe-php that should be clean under E_STRICT, and I've made sure our test suite runs with E_STRICT in the future so we catch these issues.\nNew release should be available at https://code.stripe.com/stripe-php-latest.tar.gz or https://code.stripe.com/stripe-php-latest.zip\nThanks for letting us know about this!\n. Thanks for this! I wanted to say first off that I'm really sorry this lingered for so long. I hate it when my patches get ignored, and it's really not the way I want our projects to be run. This is great, and I'm happy to merge it - we'll include it in our next PHP release!\n. Thanks a lot for submitting this. It's really exciting to see people thinking about how to make our APIs more friendly. That being said, I think we're going to pass on this change. I can understand that might be a bit of a bummer to you, so I wanted to be sure to explain how we think about this.\nIn general, we think of our libraries as being more or less direct translations of the API into a programming language, and prefer value-adds to live outside of our core libraries (I think the stripe-rails gem is a great example of this). In this particular case, there's an additional complication with this functionality in that it's not obvious to the library user that it'll generate as many API calls as there are arguments.\n. Thanks again, but I think we're going to pass on this change as well. I think my thoughts from #20 apply here as well.\n. Hey, thanks for sending this in!\nI checked with one of the other Stripes, and it looks like we originally switched from require_once to require as a performance hack:\n```\ncommit f337e4211c7323b0de82988780bf4cc483121992\nAuthor: Greg Brockman gdb@gregbrockman.com\nDate:   Mon Dec 12 16:29:51 2011 -0800\nInternally, use require instead of require_once\n\nThis yields a performance improvement in certain frameworks. Thanks to\nPhil Freo for pointing this out.\n\n```\nIt seems to me like correctness should trump performance here, but it's been a while since I've done any active PHP development. I don't suppose you're aware of any good compromises on that front?\n. I definitely don't see any reason that would be a problem, so that sounds like a great solution. Does that mean I should grab 36f5de4 and a67a0df but drop ad3cf34?\n. Thanks a lot for your help! I've just released a version 1.7.9 of stripe-php that has this fix.\n. Oh, and by the way, can we send a Stripe t-shirt your way as a token of thanks? Feel free to send address/t-shirt size to evan@stripe.com and I'll get one in the mail\n. Thanks for letting us know about this. Looks like we were never actually running those tests, which was why we didn't notice the syntax errors.\nCan we send you a Stripe t-shirt? Feel free to drop me an email (evan@stripe.com) with a size and address.\n. It sounds like you're creating a token using stripe-php, and passing an amount when you do so?\nWe no longer support specifying an amount when creating a token, only when creating a charge (https://stripe.com/docs/api?lang=php#create_charge). So you should just not pass an amount when creating the token.\nI suspect there may also be some confusion if you're creating a token using PHP. By handling credit card data and creating a token using your server-side PHP code, you become responsible for compliance with PCI-DSS. Instead, we would strongly encourage you to use Stripe.js (https://stripe.com/docs/tutorials/forms). Since Stripe.js submits credit card details from your customers' devices, you don't have to deal with PCI when using Stripe.js.\nFeel free to follow up with our awesome support engineers (support@stripe.com) if any of that isn't clear.\n. So sorry for the delay on this! Holidays have been a little crazy.\nIn general, since we don't like to change versions that have already been tagged and released, in this situation I like to just do a dummy version number bump. I've just pushed out a 1.7.11 which uses the correct version number everywhere.\nThanks for opening this. I'd love to send you a Stripe t-shirt as a show of thanks - can you send your t-shirt size and address to evan@stripe.com?\n. I'm pretty suspicious of this. In fact, I'm suspicious of us using utf8_encode at all.\nutf8_encode converts latin-1 strings to UTF-8, which isn't an idempotent transformation. That means that if somebody passes in a string that's already UTF-8 encoded, we'll mangle it:\nphp> var_dump(unpack('C*', utf8_encode(\"\\xc3\\xa9\")))\narray(4) {\n  [1]=>\n  int(195)\n  [2]=>\n  int(131)\n  [3]=>\n  int(194)\n  [4]=>\n  int(169)\n}\nI think ideally I'd argue for dropping the utf8 helper entirely and making it the developers' responsibility to pass us UTF-8, though I think in practice that's somewhat tricky. Thoughts?\n. Hmm, yeah, plausible. I'll try to sketch up something\n. I'm not very comfortable with PHP, but this seems basically fine to the best of my ability to tell. Fine to merge from my perspective.\n. Hey, really really sorry for not getting back to this sooner. I usually keep an eye on Github issues, but I've been heads down on an internal project for the last few weeks.\nI think it would be great to offer directions for fetching and updating the code with composer. However, I think it's important to present that as an alternative to the current tarball instructions, and keep the current instructions first. A huge percentage of the people coming to us without a lot of experience are using PHP, and I want to make sure we don't introduce extra barriers to entry for them.\nI'm also not a PHP developer, so I don't really know what the best instructions would be. Any interest in taking a stab at them?\n. (Going to go ahead and close this, but feel free to re-open if you have any suggestions)\n. John - sorry for not taking a look at this sooner! This actually looks great.\nI had forgotten that composer let you indicate extension dependencies. I'll try to keep this more up to date in the future.\nBy the way, I'd love to send you some Stripe swag - if you could email me (evan@stripe.com) with your address and t-shirt size, I'll get something in the mail.\n. Hey - sorry this caused some confusion!\nWe know that the API's behavior around deleted objects isn't ideal, but in general we don't return any data about deleted objects.\nIf you actually look at what the API itself returns, it's merely `{\"object\": \"discout\", \"deleted\": \"true\"}', so it doesn't make much sense to return anything explicit from the API.\nIf you're trying to distinguish between the success and failure case, all of our libraries throw exceptions when there's when there's an error, while they will return some value if the operation is successful. So if the method call doesn't throw an exception, then you know it was successful.\nHopefully that helps - feel free to bounce any other questions you have to support@stripe.com\n. Hey Ziad - Sorry we didn't get a chance to look at this before now!\nAs far as I can tell, this is just a bug in our __toString method - the customer objects returned by the library still have an ID, we're just not printing them:\n```\nphp> require './lib/Stripe.php'\nphp> Stripe::setApiKey('REDACTED')\nphp> $response = Stripe_Customer::create(array('email' => 'evan@ebroder.net'));\nphp> echo $response;\n{\n    \"object\": \"customer\",\n    \"created\": 1372652838,\n    \"livemode\": false,\n    \"description\": null,\n    \"active_card\": null,\n    \"email\": \"evan@ebroder.net\",\n    \"delinquent\": false,\n    \"subscription\": null,\n    \"discount\": null,\n    \"account_balance\": 0\n}\nphp> echo $response->id\ncus_27DKeTYAoFET58\n```\nObviously, that's still a bug though, so I'll see if I can pull a fix together. Sorry about that!\n. (For the record, this bug would have been introduced by e6625038844b8ce5c58ac4e1c5ea144784105e9f. I remember that we had a specific reason for making that change at the time; I'm currently trying to dig up what that reason was)\n. There we go - this was intended to fix bugs when you instantiated your own objects, e.g.\nphp> Stripe::setApiKey(\"REDACTED\")\nphp> $c = new Stripe_Customer(\"cus_12sR5XAwnBkiQ0\")\nphp> $c->description = \"hi there\"\nphp> $c->save()\nI think I'll try taking a different tack to solve that issue, though\n. Bah, silly Github.\n. Can you give me a better sense of what you're trying to do? The __toArray and __toString methods are mostly intended to be there as a convenience when debugging; we never really planned on people relying on those in production code. The mechanisms we intend to support are those that we document on https://stripe.com/docs/api/php- in particular, the main way we intended for people to manipulate the various Stripe_Object classes was by accessing the attributes of the object (e.g.$customer->id)\n. Out of curiosity, how would twig render the plan if it was an array? It seems like that's still probably not going to be the most friendly way of presenting the data (I would have expected you'd want separate columns for each of the fields in the plan like amount and description)\n. Hey, sorry for dropping the ball on this. Looks like you're right that we don't have a good interface for this currently. In our other bindings, we usually include akeys` method on our objects, which generally matches how hashes or dicts look in those languages.\nWould something like this syntax work for you? (I can't tell from a quick skim of the docs whether twig lets you do this)\n{% for plan in plans %}\n  <tr>\n    {% for label in plan.keys %}\n      <td scope=\"col\">\n      {{ plan[label] }}\n      </td>\n    {% endfor %}\n  <tr/>\n{% endfor %}\nIf that seems reasonable, I'll look at adding a keys method to Stripe_Object\n. Hey, sorry for the delay on this. I've just pushed the changes to support a keys() method on all Stripe_Object classes, and it should get rolled into a release soon.\n. Hey - thanks a lot for putting this together, and sorry for not getting back sooner - was dealing with some internal stuff last week.\nSo admittedly I haven't really done a lot of PHP dev work in a while, so I'm curious - I know I told you we intended to use Zend style, but does it get a lot of usage generally? I mostly like it, though I'm suspicious of something like the closing parens after a multi-line conditional. e.g.\nif ($errno == CURLE_SSL_CACERT ||\n        $errno == CURLE_SSL_PEER_CERTIFICATE ||\n        $errno == 77 // CURLE_SSL_CACERT_BADFILE (constant not defined in PHP)\n        ) {\nIf I was writing that code, I'd put the close paren on the line before - that formatting looks slightly strange to me. Does it look strange to you? (Totally fine if not - I'm happy to accept that my tastes are just unusual when it comes to PHP)\nSame for multi-line function arguments, e.g.\npublic function __construct($message, $httpStatus=null,\n      $httpBody=null, $jsonBody=null\n  ) {\nIs there some style that you think would be more appropriate?\n. Ok, good, I'm glad I'm not the only one with that reaction. We could always just ignore that one rule? :smile:\nI'm not particularly attached to the Zend style if you think PSR-2 would be better. One thing I wonder if we're making any style switches is if we can add something to the test suite to enforce the style guide, otherwise I suspect we'll deviate over time.\n. (By the way, sorry if I'm being a bit waffly on this. I'm usually pretty opposed to sweeping style changes on existing code bases, but that's mostly in cases where I (and the rest of the people working on the code) have better familiarity with the language in question. In this case, I'm OK with doing a style change if it means that we'll be more in line with what the PHP community expects)\n. Yeah, I can check again, but last time I looked we still had several users using PHP 5.2. We've also gotten a bunch of requests to support namespacing, too, which we also can't do because of 5.2.\n. That's right, though basically my thinking about Ruby 1.8.7 is that it's hard to imagine something that would pressure us to drop support for 1.8.7 (it works, and it's easy to keep working), so we shouldn't be the impetus that forces our users to change their code. (So basically we're not currently planning to drop support for 1.8.7)\n. Hmm. For the record, it seems like the right way to do this is for Stripe.php to do that check at the beginning, rather than requiring everyone to copy boilerplate.\nThe exact semantics are pretty trick, though. e.g. if the version that's already loaded is older than you, is that an...error? Do we need a mechanism for backwards-incompatible changes? (We don't make them often, but they do happen), etc\n. Yeah, but I think we still have the same constraints around namespace support because of PHP 5.2 users\n. Thanks for the PR! However, we're actually in the (very slow) process of deprecating the /v1/transfers/:id/transactions endpoint - you can see that it's not listed under https://stripe.com/docs/api#transfers\nInstead, we recommend using the balance history endpoint (https://stripe.com/docs/api#balance_history) with a transfer filter, which should include the same information.\n. Before: https://gist.github.com/ebroder/70dc027013d6824dea35\nAfter: https://gist.github.com/ebroder/7e79e77c63d67f0f65ba\n(Everything on my laptop seems to suffer from https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1256576/comments/4)\n. Oh it's available on Github? Yeah, that would probably be preferable - we've had to change the Sourceforge mirror a couple times when one of them has gone down.\n. I already merged this, so I think new PR\n. Were you going to look into not putting the ) on a newline?\n. Yeah, our tooling for code.stripe.com wants to have a consistent cross-language way of detecting versions, and this is what we use for that.\n. ",
    "iampersistent": "No problem, I'm just glad its available in composer now. :)\n. ",
    "till": "I'm not sure I understand the autoloader response. Can you elaborate on misbehaved autoloaders?\nlsb is not a great feature to use. Static calls make it very difficult to keep the code testable. Object orientation in PHP has a lot more to offer.\nSince your code is MIT, I'll just fork and run myself. I can send you a heads up some time and you can cherry pick if you feel like it.\n. For anyone interested: http://github.com/easybib/stripe-php\n. In regard to autoloading:\n1. We could prepend the autoloader so it comes first\n2. With require_once you dictate how things are done and e.g. for myself I won't run this in production (ineffecient, etc.). A library is supposed to integrate and not dictate.\n3. PHP and Ruby are fundamentally different - you cannot really monkey patch your way through things in PHP.\nOn static\n- The use of static methods and variables makes testing code a lot faster since static states often persist throughout the entire PHP run.\n- I haven't figured out what these scope methods do yet.\n- The use of abstract classes which are not extended but serve as a global look up directory for things like the api key is a little mind boggling.\n. ",
    "travisbot": "This pull request fails (merged 8576c226 into b7fbf0cf).\n. This pull request passes (merged 8bd104d5 into b7fbf0cf).\n. This pull request fails (merged 9c647e9a into 2a23e05b).\n. This pull request fails (merged 2fb3fe56 into 2a23e05b).\n. This pull request passes (merged c897224d into 2a23e05b).\n. This pull request passes (merged 32be2475 into 48b87ff7).\n. This pull request passes (merged 9f558be9 into 4fd8023b).\n. ",
    "Blackshawk": "Forgot to update Travis CI configuration. Modifying pull.\n. Completely understandable. I think I might just go ahead and continue to support the namespaced version on my personal repo - if somebody needs it then it will still be available.\nIf I have some time I'll see about porting the existing implementation over to PHPUnit.\n. ",
    "mattsnowboard": "http://php.net/eol.php\nWhy do you support PHP 5.2?\n. @danielchatfield That's a terrible reason to continue to support an unsupported version of PHP. All security issues will get patched in the 5.3.x, 5.4.x, 5.5.x, etc. branches, but using 5.2 is dangerous.\nhttp://www.cvedetails.com/version/106044/PHP-PHP-5.2.17.html\nMaybe if more libraries required 5.3+, web hosts would be forced to keep their PHP installations up to date.\nBut whatever, really this library should just branch into a 5.2 compatible branch, and a 5.3+ branch that uses namespaces. Hell, maybe that would be a good time to move away from the awful static method design that this library uses... (see #36 )\nI'd greatly prefer an official PHP 5.3+ Stripe library than finding a 3rd party one (or writing my own) that may or not be maintained...\n. +1\nI've been trying to find the best way to wrap this in a Symfony2 bundle AND make it testable but ugh dat static....\nThis is much worse than the fact that this doesn't use namespaces, IMO\n. I'm not sure that promoting poor practices (as you said, \"This is NOT a good way to structure an application\") is a good reason to keep the library the way it is. In fact, in your second example, you could just instantiate the object immediately before use and it's a 1-line addition for people who aren't doing things properly. Also, if you say \"Unless your website has tests\" and imply that most sites don't, that's also a bad practice to be promoting. Especially when we're talking about the part of a site that is processing payments.\nI feel that the best idea is to increment the version number for a refactored library that promotes good practices (making applications more easily unit testable, etc.). Let people who don't care about their application stick with 2.x and build a better version in a 3.x branch.\nOn the other hand, I understand that it would take a lot of work and so it may not be possible to get this done in a reasonable amount of time.\n. You should step through in the debugger to see if the \"id\" is ever set. I'd be curious to see if there really is a \"==\" somewhere that treats \"0\" as \"false\".\n. I wanted to add a unit test for this, but I wasn't sure how to do it. Anyway, I checked the commit that caused this and this seemed to be the only \"$this->request()\" that should be \"$this->_request()\"\n. Yeah, I tried that but I also tried to verify the amount. Since there are no network requests as you mentioned, that did not work. I could add a test that just does the refund but didn't seem like it was testing much other than this syntax error. Decoupling the request in a way that is more testable would be really nice.\nAnyway, thanks for the quick merge! I needed this fix to keep using the latest version of this library in my application.\n. ",
    "notsoluckycharm": "In any 5.3+ framework namespacing is a must. Only a matter of time, and I think you should release a secondary official library, less people do this:\nhttp://stackoverflow.com/questions/17954517/stripe-payments-in-php-with-namespaces\nOr worse yet, like me, look elsewhere for a competitor library.\nEdit: Or why not just have an official branch we can check out that tracks master for updates? Unless you add a new file, the namespaced version should \"just work\" when you pull in master.\n. ",
    "danielchatfield": "@mattsnowboard Because it still has a huge market share: http://wordpress.org/about/stats/\n. The method that @rcravens demonstrates is the way WordPress recommends implementing these shared libraries, the library itself should check that the class hasn't already been defined and the code that wants to use the library should check that the required version is satisfied.\n. I agree with @ebroder that namespaces shouldn't be used whilst PHP 5.2 has such a big market share: http://wordpress.org/about/stats/\n. @acabal You should use property_exists rather than isset for that\nAny reason to keep this issue open or can it be closed now?\n. I completely agree with that, my comment was purely in reference to the\ncurrent implementation.\nOn Friday, 9 May 2014, Alex Cabal notifications@github.com wrote:\n\nI'd argue that's not good OO design; I shouldn't have to check whether or\nnot each property I'm testing for exists before I test it.\nRather, I think it makes more sense that if the customer is not deleted,\nthen $customer->deleted is boolean false, rather than sometimes existing\nand sometimes not existing, and who knows until they check. That's breaking\nthe OO contract.\nAfter all, if $customer->deleted only exists sometimes, then how can I\nknow if any other random property in this object exists or not? I'd have to\nuse property_exists() every time I test a property, and that's kind of\nsilly. I know the raw Stripe API functions like this, but part of the\nreason for using an OO wrapper is to put some OO sugar on quirks like that.\n\nReply to this email directly or view it on GitHubhttps://github.com/stripe/stripe-php/issues/73#issuecomment-42716116\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. Can you pastebin all the changes you have made? Have you changed the way it\nsends from curl to something else? If so are you sure this new method\naccepts the same type of array for headers and not one like this:\n$headers = array(\n    \"Header-Field\" => \"value\"\n);\nOn Monday, 4 August 2014, thagee notifications@github.com wrote:\n\nReopened #101 https://github.com/stripe/stripe-php/issues/101.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/101#event-148616782.\n\n\nFor contact info visit: www.danielchatfield.com\n. 401 means that the request was sent and stripe returned an error because the apikey you used was not valid.\nYou also have this: $responses = $this->parse_http_response_header($http_response_header); but I don't see where $http_response_header is defined.\n. The python bindings for stripe has a special case for appengine so for feature parity I think stripe-php should as well.\n. You need to add the following header:\n\"Authorization: Basic \" . base64_encode($username.\":\")\nThe api key is the username and no password.\n. This would be better if it was date('Y') + 3\n. Seems to be a lot of duplicate logic here.\nPerhaps rename $customer and $recipient such that one variable is suitable for both cases and then since the rest of the logic is identical it can be taken outside the if/else.\n. ",
    "naomicbush": "Cool! :-)\n. Email support@stripe.com to enable new invoice behavior on your Stripe account. Also, join our mailing list for API updates: https://groups.google.com/a/lists.stripe.com/forum/?fromgroups=#!topic/api-discuss/-WEqIEU2qAk\n. Although @rcravens method helps reduce the fatal errors in a shared environment like WordPress, it cannot be considered \"safe\" because it relies on plugin developers depending on other plugin developers to be using the latest version of the Stripe API library that's compatible with their code. Not only is this impossible to ensure since each WordPress developer is individually responsible for maintaining their codebase, but it is certainly poor practice to couple plugins together in this manner.\nThe best way to accomplish this is using namespaces, which was already proposed here: https://github.com/stripe/stripe-php/pull/11\n. ",
    "vrana": "I am sorry, I wrote the patch on an older version and didn't check if it's fixed in the current version.\n. ",
    "briancollins": "Good point. Done.\nOn 20 June 2012 08:46, Evan Broder\nreply@reply.github.com\nwrote:\n\nHmm, is printing this only if simpletest isn't available the right thing to do here?\nIt seems like we might instead want something at the top (and top-level) of the file that prints, say, \"Running the Stripe PHP bindings test suite\\nIf you're trying to use the Stripe PHP bindings...\"\nDon't have particularly strong opinions, so if you disagree, I'm happy to merge without.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/pull/14#issuecomment-6447041\n. \n",
    "thpoul": "Well, this was fast! Problem solved! Thank you very much.\nI'm using PHP 5.4 on Ubuntu 12.04 and FuelPHP is a PHP 5.3 framework.\n. ",
    "scottlangendyk": "As long as your team is okay with moving the actual Stripe class declaration to it's own file, then using require should work just fine. I had initially done both just for the sake of covering both points of failure.\n. I did a rebase to change the require_once back to require, but started receiving the error again. After some digging around, I discovered that composer was configured to autoload the library as PSR-0, when in fact it's not PSR-0 compliant. I've changed it to autoload as a class map and that does the trick.\n. ",
    "spakanati": "This method already exists in master as of v1.7.8 (https://github.com/stripe/stripe-php/commit/fc1972668ee787d993cade4ce2dae376d83f1ae4).\nLooks like your fork hasn't been updated since v1.7.2?\n. Going to close this, but feel free to let us know if you think there's something still amiss. Thanks!\n. ",
    "danwiding": "You are absolutely correct. I was using a fork of a fork and hadn't realized the upstream had already been updated.\n. ",
    "UmangB": "What are v1.7.8 and v1.7.2...What to update and where to update it?\nHaving same issue.\nFatal error: Call to undefined method Stripe_Invoice::create()\n. ",
    "phpfunk": "Might not just be __toArray. I am getting no ids for any calls looking at raw output. I too reverted to 1.7.14 and everything is ok there.\n. ",
    "joseym": "I noticed this as well; in any methods that return the array data for stripe output I simply prefix array('id' => $data->id) + $data->__toArray()\nIsn't great but it works.\n. makes enough sense, i was just confused by what was documented as the example response here: https://stripe.com/docs/api/php#delete_discount\nThe documentation makes it look like one should expect an object like the one you noted above.\n. ",
    "tshafer": "I am having this problem as well\nReverting to 1.7.14 fixed the problem\n. ",
    "thomasgriffin": "I too experienced this problem, even with the new 1.8.0 tag that was released just a couple of days ago. Reverting to 1.7.14 fixed the issue.\n. ",
    "iwankgb": "@JulesAU - you could try using Mockery.\n. ",
    "bakura10": "You can also try mine, that is based on Guzzle: https://github.com/zf-fr/zfr-stripe\nThis is super easy to test ;).\n. If you are interested about a PSR-0 compliant Stripe wrapper, I've written ZfrStripe. It also comes with a ZF2 module and a lot of nice stuff like iterations. However, php 5.3 only :).\n. In the mean time, there is my zfr-stripe ;). I know this is not ideal to have different libraries, but I've been maintaining this library for ages, and as my business relies heavily on Stripe, I need to update it as soon as new features are released.\n. As always, for people that do not want to use static methods, you could have a look at my library ZfrStripe. It is maintained, is based on Guzzle and is definitely easier to mock and test. Having said that it may be a bit harder to use as you definitely need to inject the client when you need it instead of relying on the staticness.\n. Hi @chdeliens .\nUnfortuantely I no longer use Stripe (I've slowly moving out of tech world to tell the truth), so it's likely lacking behind and a lot of new features is not implemented. I'd be happy to give the lead to someone else would like to maintain this library.\nIf you are interesting please send me an email to michael at maestrooo dot com (there are three o, pay attention :)).. I haven't check the code, I will stick with my ZfrStripe as I still find it much better (not only because I've made it :)). A few things that is nice to have (maybe you could do it as it's a very useful feature) is iterator. Basically, in ZfrStripe, I can do this:\n``` php\n$customersIterator = $stripeClient->getCustomersIterator();\nforeach ($customersIterator as $customer) {\n}\n```\nAnd ZfrStripe takes care of sending the second request, and so on, until \"has_more\" is false. In a lot of cases this is really really handy ;).\n. ",
    "browner12": "i've also been wondering why they use static. i see it in many other libraries too, like Easypost and Postmaster.\n. would it be possible to maintain both as an option on the same code? I feel like that would become unmanageable quickly. would it be better to break it off into another repo, or would that be just as difficult to maintain?\nmaybe the better question is, should the static approach be kept, or maybe deprecated? does someone have an example where it would be difficult to instantiate actual objects?\neither way :+1: \n. I agree with @skyzyx .\nfrankly I hope I am not making purchases on the sites of these people that are just copying and pasting their code, and are relying on tutorials that may have been written 2 years ago.\nI don't see any reason to change the naming conventions from what they currently are.\n. this is not the appropriate forum to get help on your specific programming issue, or to help you learn how to use a service.  I would suggest taking your question to StackOverflow to get help with this issue. There will be many helpful people there who can assist you.\n. this is always a fun topic to bring up on popular packages.  while i agree, there are always people who are very against this, because they are unable to upgrade PHP (perhaps on their shared hosting).  one solution i've seen is bumping the php version on the next Major version.\n. I'm not sure if this is planned already, but since this is targeting a new major version, I would suggest dropping support for PHP 5.6 and PHP 7.0 while you're at it.  Both of these version will be losing security support by the end of the year.\nhttp://php.net/supported-versions.php\nWould be great to see a new major version more forward with only supported PHP versions, and allow users who require older PHP versions to stay on v6.. Thanks for the response. Are you saying you guys would consider another major version (v8) after the new year?\nI guess I don't see the downside of dropping the additional PHP versions. Even though the percentage of users on unsupported PHP versions is high, they will still be able to use this package by staying on v6. Users on supported PHP versions would be able to upgrade to v7.\nI would say in the package community this is a pretty common practice of branching to a new major version and dropping old PHP support, which also helps drive adoption of newer versions of PHP.. Definitely agree, and understand where you're coming from.\nI thought since this PR was for a Major release, it would be a good time to drop unsupported (or soon to be unsupported) versions of PHP. \nPeople on older versions of PHP would still be able to use Stripe by sticking to v6, while other users could hop up to v7.  Because Stripe is so popular, this would also add some pressure for people to start upgrading to a supported version of PHP.\nYou guys are also in a unique position because you accept payments meaning security is paramount to you (and should be to your users). When I see a website that accepts payments via Stripe, it gives me an extra bit of confidence that my information is secure. But knowing the website could be using Stripe, but also still be on an older version of PHP takes that confidence away.\nWe could discuss this forever, so I'll just say keep up the good work building this great product.. these are okay to use, just like it's okay to use __construct or __get. they are implementations of magic methods.. ",
    "bkrausz": "Statics are easier to integrate in more scenarios (ex: if your init method is the only thing that has access to a config, but has no ability to pass objects around). While I agree that these kinds of limitations are issues that themselves should be fixed, we want to make it as easy as possible to integrate the bindings in as many cases where our customers are doing so.\nFortunately, both Mockery and FBMock provide a way to mock statics, and FBMock is lightweight-enough that it can be integrated into other testing frameworks.\nI don't think we're going to be un-staticing the library anytime soon, but I'm actively thinking about ways to improve the bindings (including namespacing), and am open to suggestions.\n. @josecelano A concrete example of what?\n. I see. Instantiating an object is better programming practice, though it's more obvious to just use static methods. It's always possible to instantiate an object and restructure things so it's passed around, but it requires a bit more thought as to how the code is setup.\nFor example, a basic (not ideal, but commonplace) PHP setup may look like this:\nconfig.php:\n<?php\n\\Stripe::Stripe::setApiKey('...');\n// ...\ncharge_page.php\n<?php\nrequire_once('./config.php');\nif ($_SERVER['HTTP_METHOD'] == 'POST') {\n  // ...\n  \\Stripe::Charge::create(/*...*/);\n}\nThis is NOT a good way to structure an application, but is the most obvious first step when making a website. If you had to instantiate an object, you would instead end up doing something like:\nconfig.php:\n<?php\nfunction getStripe() {\n  new \\Stripe::Stripe('...');\n}\n// ...\ncharge_page.php\n<?php\nrequire_once('./config.php');\nif ($_SERVER['HTTP_METHOD'] == 'POST') {\n  // ...\n  getStripe()->chargeCreate(/*...*/);\n}\nNote that this is also not ideal, and instead you should be using a framework like larvel that provides routing.\nUnless your website has tests or is large enough for some infrastructural reuse, the 2nd method (instantiation) just looks like a lot of extra work. That's why static methods tend to be popular: they're conceptually very accessible to new developers, though they are more painful for large web application who invest properly in testing and have more code reuse.\n. @mattsnowboard I entirely agree, and would love to get us onto object instantiation. With a tiny bit of magic it wouldn't be hard to support both as well. Regardless of that, it's just something I haven't had time to get to in the big list-o-priorities. Was mostly providing some historical context on why someone would have chosen that (as we did 5 years ago when this library was first written, and the PHP world looked quite different).\n. We should make Objects iterable, so that you can use foreach on them. In lieu of that I'd feel free to use __toArray for now.\n. Practically just the commitment not to change the response format. I don't think we would anyway, which is why this is fine for now. I just haven't put any thought into if we should/shouldn't commit to that.\n. @jpiasetz Sorry for the unacceptably long delay!\nI don't think this would actually work, since these calls all use instanceUrl(), not classUrl(). I'm in favor of splitting this out, but it probably belongs more as a separate call (_scopedSubcall?). Will think about it some more and see if there's some cleanup that can be done.\n. Given that this has been sitting for years, I'm going to close it out. Feel free to open a new PR if still applicable.\n. Added phpcs to the build (only on 5.6) based off of your diff, as well as fixing some style issues that built up over the last 3 months. Thanks!\n. I'm curious how namespaces would solve this issue. Unless I'm mistaken, in order import our bindings without a conflict, you'd need to stick a custom namespace name at the top of every file. Couldn't you do that now? Otherwise we'd just be picking a global namespace name that would conflict.\n. See my previous comment, I think namespaces will make this easier, but generally this isn't something PHP can easily solve for you. Closing this out unless there's further discussion to be had on it.\n. Fixed via your PR. I also updated the test to not require the ID to exist or not exist, which was causing intermittent failures.\n. Yea, both PSR-0 and PSR-4 require some kind of namespaces, which we can't have while supporting PHP 5.2, pseudo-following them by renaming our main class seems unnecessarily confusing. I'm tracking usage with our API (currently 7% of all users actively using PHP are on 5.2, but it is decreasing).\nEither we'll get to a point where we can deprecate 5.2, or we'll write some kind of build step that strips out namespace commands to make a \"5.2 package\".\n. I would love to kill PHP 5.2 support as much as the next guy. I've spent a majority of my recent PHP time working in HHVM: I have a huge appreciation for the features a recently-updated version of PHP provides, and the pain missing those features can be. I'm actively working to make sure that we can move to namespaces. Please don't mistake my inaction today with laziness.\nIn the end I'd like to make as many people as possible happy. Right now, the risk of a shared hosting user having trouble using our bindings because they're on PHP 5.2 is pretty significant (for example, Dreamhost isn't forcing an upgrade until later this year).\nAs much as we all want PHP 5.2 to go away, it's still alive and kicking. Wordpress still has 40% of their installs on 5.2: https://wordpress.org/about/stats/. I'm not happy about it, but it's the reality of the world.\nWe're on Composer, which has full support for classmap-based autoloading (which works just as well for packages with a small number of classes, as ours is). We have a balance right now with 5.3+ support and 5.2. We'll get to the full 5.3+ world, just not today.\n. @Woet: it seems like composer is the more common way to install/manage packages (the top packages on github all don't seem to have a Phar file), and I'm concerned about keeping the Phar file in sync with the code.\nYou can still install our repo on shared environments by either cloning or using composer.phar locally.\n. This was added recently. Apologies for the delay: we will be much more prompt about responses about the PHP bindings now.\n. @sajiddesigner: We have instructions for Composer and manual installations at https://github.com/stripe/stripe-php#stripe-php-bindings - can you clarify which step you find confusing?\n. @chrispitt - Sorry for the delay, this was added recently (before I saw your PR). Apologies for the delay: we will be much more prompt about responses about the PHP bindings now. Please let me know if you think the instructions could be made clearer, I looked at how some other libraries discuss Composer installations and tried to emulate them.\n. @ebroder - is this still something we want? Is it going to cause issues with some users?\n. Is there a fix? I know nothing about cypher lists, and even less about NSS.\n. :+1:\n. Note that this wouldn't be guaranteed to be complete, as we do add fields to response blobs. In a way, this would tie the PHP binding version to the API version (at least documentation-wise), which we don't want to explicitly do.\nWould linking to the response format at the top of each file (In this case https://stripe.com/docs/api/php#charges) be helpful?\n. Sorry for the silence on this Ben. The problem is that our bindings are built to work with any API version, and releasing them with some hint on which version/responses they can expect breaks that. Specifically, we'd then need to release an update every time we add a new property, and older versions would have incorrect hinting, which IMO is worse than no hinting at all.\nI was under the impression that most PHP code inspections will note the existence of __get in a method and use that to stop complaining on undefined properties. Which IDE are you using? I feel like that's a pretty fundamental feature in IDEs for languages that support dynamic methods/properties.\n. Sorry for the delay @BenMorel. I'm under the impression that you can turn off magic field warnings (via Configure inspections > PHP > Undefined > Undefined field > Notify about access to a field via magic method), but I'm not very familiar with PHPStorm, so I wouldn't be surprised if I were wrong.\nI'm still chatting with the team about this: it's in contention with the idea that our APIs should always support new fields without an API upgrade. You'd be surprised at how many people are on older versions of the bindings.\nFor now none of the other Stripe bindings, which also use magic getters, define the properties, so I'm going to keep it consistent with them. We are having a larger discussion about how to best handle this, but I think the cost of mis-documenting things (and people using the @property-read fields instead of our official documentation) outweighs the benefit of reducing a (hopefully) suppressible warning from appearing.\n. Definitely something I'll keep in mind, though asking someone to call Stripe_Charge_20140707::create every time they want to create a charge (and remember to update all of their callsites if they update versions) seems like it would produce a fairly large mess. There may be something possible to do there though, will bring it up to the team.\n. Fixed as part of 5c1191ee1e1a3c227bfbeef709f534777cd9d4fa (which also fixed HHVM so that this doesn't trigger).\n. Generally good but please fix test failures\n. Thanks for the PR! phpcs, our style linter, gives the following complaints:\n42 | WARNING | Variable \"postfix2\" contains numbers but this is discouraged\n43 | WARNING | Variable \"postfix2\" contains numbers but this is discouraged\nHappy to merge this in if you change the var name to fix the build failure (and fix the nit I noted).\n. Committed as e1f0cf47ee8562dc483402e23e208cbd6d80e792\n. Generally we don't provide mocks for any of our bindings, because our API is evolving and it would become one more thing to keep up to date, especially given that responses can change based on the API version you're using.\nI think it would be much better to stub out network requests/responses against our test API and record/replay what you receive back from our servers. That way it becomes easy to re-record when you bump versions.\nUnfortunately, since we use cURL directly, we don't provide a good way to stub out the network layer either. If you think that would solve your mocking concerns I'm happy to build in a way to replace cURL with a mocked version.\nWe're also thinking about ways to make mocking our bindings easier by offering a non-static version, though that won't happen in the immediate future as it's a pretty significant change.\n. See #97 \n. Thanks @fastest963!\n. Really appreciate the PR, thanks! Would you mind fixing the line length complaints in our linter: https://travis-ci.org/stripe/stripe-php/jobs/28927537 so I can merge?\n. No problem, thanks again!\n. Thanks for jumping in to help everyone! We're aware of the confusion around API versions, bindings versions, and what our docs say. We're thinking through better ways to show this in the docs, probably some kind of marking that your response may differ.\nKeep an eye on https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce for any progress we make on this front.\n. We are looking at making the request library pluggable, since some people would like to stub it out for testing. This would allow someone to write a urlfetch-equivalent, though we probably wouldn't get to it for a bit (a month or two). Happy to review a pull request if somebody wants to build this though.\n. I'd strongly prefer a pluggable system (i.e. you specify a \"Stripe_Requestor\" that then issues the network request, which get translated into cURL or streams depending on the implementation in the class). This would make stubbing out network functionality easy for testing, which we've gotten requests for.\nI'll try to prototype a system for this next week.\n. See #97 \n. Fixed by #159\n. We've removed SSL cert blacklisting since our pre-Heartbleed cert expired. This is no longer relevant\n. Please also update the version in lib/Stripe/Stripe.php, and add to the changelog. There are more changes to put in the changelog from stuff I did, but feel free to skip those since they're relatively insignificant API-wise.\n. Other then line length, lgtm, :ship: \n. @danielchatfield the plan is to make cURL pluggable through a CurlHTTPRequestor class that one could then swap out with a UrlFetchHTTPRequestor class, I just haven't had the time to go through and code that. Very open to pull requests though.\n@thagee I think the problem is where you add your header string: $header_string .= $header . '\\r\\n';. That should use double-quotes, as in $header_string .= $header . \"\\r\\n\"; Escaped characters aren't parsed with single quotes, so your header is one long line with the literal 4 characters \"\\r\\n\" in between headers.\nPlease let me know if that fixes things for you, if not I'll dig further.\n. Happy to help!\n. Thanks for the PR! Mind fixing the 2 \\'s and I'll merge in?\n. Thanks again!\n. Hi Danny! This code should never be run by HHVM, we're checking for HHVM and exiting early at line 351 (this is because HHVM doesn't support SSL stream contexts). If you're able to get to this line can you let me know what your PHP_VERSION is so that we can shortcut it?\nThanks!\n. Specific HHVM bug: https://github.com/facebook/hhvm/issues/2156\n. Are you on the API version 1.17? That's when this check first got added (~late June).\nClosing this out for now since, given your PHP_VERSION, it sounds like we already have a working solution (though if HHVM supports OpenSSL, which it looks like they do, we should fallback to that).\n. Sorry, I haven't gotten around to tagging 1.17.2 yet. The only difference is the addition of a Coupon->save call.\n. Tagged and released.\n. Sorry for the delay...this slipped past my inbox.\nI think it should for the sake of consistency: the API returns an error if you try to delete a coupon when none is set, and all API errors throw an exception.\nNote that you don't need to make a separate call to see if a discount is attached, it's returned with the customer:\nif ($customer->discount !== null) {\n  $customer->deleteDiscount();\n}\nNinjaedit - info on the fields available in the customer hash: https://stripe.com/docs/api/php#customer_object\n. Sweet...thanks @brianmdavis! I hadn't had a chance to dig into why TravisCI was failing for hhvm, this was it.\nOur style enforcer doesn't like your line length, I'll merge and fix for you.\nThanks again!\n. Thanks for the PR @rp-eric. HHVM doesn't support socket_stream + SSL at all, so this code should not be getting hit by HHVM at all. Are you on an older version of the bindings before we added the check for function_exists('stream_socket_enable_crypto')?\n. Thanks for digging into the underlying explanation: that sounds reasonable to me :).\n. The short answer is yes, I'm very open to it. There are a list of improvements I haven't had the time to make, and was going to lump them in with a 2.0 release:\n- Deprecate 5.2\n- Switch tests over to phpunit\n- Better autoloading story + namespaces + whatever fancy code grouping features kids use these days\n- Pluggable web request modules so that the bindings can work on appengine (no curl) and for tests\n- Ability to instantiation a Stripe object to pass around (vs. static methods, not sure if we'll continue to support both, I haven't put a ton of thought into this yet)\n- Drop support for array access on objects\nThe current plan is to deprecate 5.2 and make 5.3 the minimum. Looking at our numbers, over 20% of our PHP requests are still on 5.3. I don't believe the benefits of 5.4 outweigh the cost there (5% I can see, 20% less so), though I'm not too familiar with the benefits of 5.4 beyond some style improvements (short syntax arrays!).\nIf more folks are interested in contributing, I'm happy to set up a 2.0 experimental branch for people to futz with. I probably won't have time to contribute heavily before end-of-year (I was originally planning on locking myself in a room for a week to pump this out, just can't find the time). I am very excited about giving the framework some TLC along these lines though, I admit it's long overdue.\n. Done: https://github.com/stripe/stripe-php/tree/experimental-v2\nI will definitely dig into FB's new SDK...happy (and mildly surprised) to see big improvements there. Go Parse folks!\nExplicit getters for anything besides id are very unlikely. Given that we version both our API and bindings, we decided that locking versions in via explicit use of parameters would be problematic from an upgrade perspective (i.e. you couldn't upgrade your bindings without upgrading your version, and vice-versa). Our one exception is for statically typed languages, where there's less flexibility.\n. > Please don't code for me\n@EminezArtus the goal at Stripe is to offer both, and we in no way require the use of our bindings in order to use our API. You are welcome to write a simple PHP curl script to hit our API, and we provide examples of the curl queries you would run[1] to achieve that. However, our bindings provide several features on top of that, for example we check SSL certificates against a blacklist[2], which curl doesn't provide out-of-the-box, and is a valuable security feature since Heartbleed was announced.\nIf you have specific feedback on how we could improve the bindings please do let me know in new Github issues, on our mailing list, or privately at bkrausz@stripe.com, but we're never going to force anyone to use our bindings. I'm personally incredibly grateful that @bakura10 maintains zfr-stripe, as more options are great to have!\n[1] https://stripe.com/docs/api/curl\n[2] https://github.com/stripe/stripe-php/blob/master/lib/Stripe/ApiRequestor.php#L356-L389\n. Given that this thread is becoming less about a specific issue and more about general feedback on the bindings, I'm going to close it out for now (but not lock it).\nThe intent is to make a v2 that will drop 5.2 support and add support for namespaces and PSR-4, but given time constraints and the difficulty of balancing bindings improvements with building new API features (both of which are in high demand), I can't promise a timeframe. If you need any of these immediately the current recommendation is to either fork the bindings and submit a PR to the experimental-v2 branch, or use zfr-stripe.\n. Sure thing. Let me resolve whether or not #110 should be merged and I'll cut a tag.\n. Done, 1.17.3 is out.\n. I think this is no longer an issue. We now properly store the API key used to access the object for re-use when calling refresh.\nFeel free to reopen if I'm mistaken.\n. Wanted to acknowledge this: I'm able to reproduce, this is definitely a problem, will work on a fix. Unfortunately given the holidays I may not get to it until Jan, but will try to do it next week.\n. I just noticed this only fixes the issue for Customer. _scopedSave never actually has an apiKey passed to it, so I can just use the locally stored one instead. No commit inbound, then I'll cut a tag.\n. Isn't $ch->markAsFraudulent(); the same as $ch->fraud_details = array('user_report' => 'fraudulent'); $ch->save();? It seems inconsistent that we'd provide an API method for it (we only seem to do that when we require a different URL).\n. That's a good question...my way is actually the only one that would work, because any changes to $ch->fraud_details gets fully serialized and sent to the server (or wouldn't be detected as changes if modified in-array).\nConvenience methods sound reasonable given all the lurk here. There is a bug if you try to do things the manual way: if you call $ch->fraud_details['user_report'] = 'fraudulent'; $ch->save(); it would do nothing, as it wouldn't mark fraud_details as having changed.\nI don't think you need to fix that in this PR (feel free to :sheep:), but it's a structural problem with how the API handles hashes (except metadata, which is explicitly handled) that we should resolve.\n. Sounds good, there's an outstanding PR I will look at tomorrow, would be\ngreat to get that in with this release.\nOn Sunday, December 14, 2014, Michael Manapat notifications@github.com\nwrote:\n\nMerged #115 https://github.com/stripe/stripe-php/pull/115.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/pull/115#event-207335692.\n. That ended up being simpler than I expected...thanks for the PR, lgtm!\n. Looks good barring comments. Would like to see a few tests before merging, but generally awesome: thanks for putting this together!\n. lgtm, :sheep:. We'll need to merge this into experimental-v2, but there should be few enough of these that I'm fine doing it all at once another week (unless you'd like to volunteer).\n. lgtm barring the style lint errors: https://travis-ci.org/stripe/stripe-php/jobs/46137015\n. Yup, we would love to switch ti PHPUnit, have tentative plans to in the future, and would very gladly accept a PR that switched us over :-D\n. Thanks for doing all this work! I'm taking a look now. It would be great if we could consider the PHP 5.2/5.3 question separately from this. How easy would it be to make PHPUnit work in PHP 5.2? If it's a pain don't bother, we can find another solution, but I wouldn't want this change to be blocked on that discussion unnecessarily.\n. Ok, took a look, everything looks great except for a couple of minor nits. I think there are 2 easy paths to shipping this:\n1. Make this continue to support 5.2 via similar pear install hacks that we currently use, enabling us to decide on the \"post 5.2 world\" API separately from this change.\n2. Move this onto the experimental-v2 branch and simultaneously decide what API we'd like in the v2 cut.\n\nI'm happy to do #2, but it's a question of stabilizing the API as much as possible before we actually cut the change: I'd hate to add in, for example, namespaces, and then a month later also remove support for array access - we should batch as many preferred breaking changes as possible together.\n. I'm fine with this staying as multiple commits.\nI'm chatting with the team now on the best way to make sure this gets shipped. I've merged it into experimental-v2 to start, we'll see about getting it into master ASAP.\nThanks again for putting in the work for this!\n. :+1:\n. :+1: :sheep: :smile: \n. Let me know if you wanted to do more work on this, since it's for the experimental branch and seems like an obvious next step I'm happy to have it in :).\n. I setup coveralls.io - do I need to do anything else with Travis CI so that coverage gets computed correctly?\n. FYI I turned off commenting on PR for Coveralls, that looks like it can get annoying.\nCoveralls is both free and has a strong list of users. I'm a little more concerned about using Scrutinizer, as they don't seem to be used in many places, and costs money where Travis CI works sufficiently well.\n. Was about to say \"sure, let's try it\", but then I went to sign up and they wanted full write permissions over all settings for the repo. If they can request read-only access I'm happy to give it, I've asked them as much: https://twitter.com/bkrausz/status/554711005029490688\n. Oh man, I hate 4 spaces as opposed to 2. That being said, PSR-2 seems to be the major hotness nowadays, so why not :-P\n. :sheep: \n. Fixed by ba06d1b44157e4fd53a572dc78008f34572bf665, will push a new release once tests pass.\n. Works for me, thanks :)\n. Haha, yes I'm very happy to have ZfrStripe as an alternative :). CCed you since I figured you'd have good insight on features we may want to adopt.\nauto-pagination is something I'd want to decide consistent if we want to support across all bindings: it's a good idea! I'll bring it up with the team. I think we'd make it an explicit call (like you did in your example) so that people can control whether or not we issue more blocking API calls.\nI'm going to work on this over the next day or two, let me know if you have any other suggestions for features (and thanks again for all the hard work on ZfrStripe).\n. Almost all of those are bikesheds around things like spacing around . and tab alignment. Unless you're referencing a spec we've agreed to follow, I don't think it's worth changing about 10% of the codebase to align with that particular checker's rules.\nRe: 5.3, this was discussed at #111 (and in a number of other issues). Given that packagist is still seeing about 15% usage from 5.3 (which I believe lines up with the 5.3 merchant count on Stripe itself), we're going to support 5.3 for the time being. If, in a few months, the number of 5.3s on the v2.* version of the bindings is quite small, we will know that those folks are unlikely to upgrade anyway, and cut a v3.0 that drops 5.3 support.\n. Can you elaborate on what the branch alias is for? I assumed all dev would happen on branches and then be merged into master fully function.\n. I see, makes sense :)\nOOC, if we cut a 3.0, should we alias the latest 2.0 version to 2.0-dev, or just remove the 2.0 alias entirely and it will auto-pick-up the tagged version when resolving versions?\n. As opposed to the current tagging? I'd much prefer to keep with tagging since it aligns with what every other package repo supports (and packagist seems to support it as well, unless I'm missing something).\n. Stripe.php does not load the rest of the files right now. When I get a chance I'll add a file that will load all other classes, and add instructions for using it (happy to take a PR for that as well).\n. Done, there's an init.php file in the root dir that will pre-include everything.\n. lgtm barring minor nit and making sure tests pass.\n. Hmm...would it be better to just use the absolute reference to \\Stripe\\Object, since it's only used in one place anyway?\n. WFM, thanks for the PR!\n. This does not handle sub-namespaces like Util. Also, would be great to add a test for this (likely requires changes to test infra and/or an additional travis test run).\n. Added a manual list of files instead, with a test that checks that it's up to date (though it does double the number of tests to run).\n. +1 to the clarity, will remove when we make it optional again. Thanks!\n. See nits, otherwise lgtm\n. woot! :sheep: \n. Thanks :-D\n. :shipit: :+1:\n. Sorry about the ambiguity here: we probably shouldn't have documented init.php until we had a release that included it. It'll be in 2.1.1, which will be released when #147 is merged. @danwang: you mind taking care of that tomorrow?\n. Yup :).\n. I have been unable to reproduce this via __toString, __toJSON, or __toArray. I suspect the call that is not working is json_encode, because there are no public properties to serialize on the object. PHP 5.4 supports a JsonSerializable interface. Will support the interface in 5.4+ and stub it out in 5.3.\n. If that file were the only change, I'd say sure. However, all of those examples are broken as well given the switch to namespaces.\nI wonder if there's a way to make a 'stripe.php' that just throws a very specific exception, for folks who just blindly upgrade? Not sure how we'd support both that and the existing autoload use case, but it would be a nice hint.\n. We already have an init.php which includes all files you need to run the bindings. The concern is that existing integrations assumed a stripe.php, which is now a different file and cannot be renamed, as it will break PSR-4.\n. Thanks for the PR @bitmash (and sorry for the delay). This endpoint is actually only for the Alipay beta. When we move out of beta, Alipay will use the sources endpoint just like Bitcoin and cards.\n. You could make a test charge and then refund it. Our PHP tests currently do not stub network requests, which does make these things annoying. Something on my list to fix.\n. Thanks!\n. Hmmm...testing on PHP 5.5.13 I see no such increase. Creating or retrieving a customer is a 250KB cost.\nI suspect that loading the Stripe library is a significant cost increase, since it needs to parse and cache all of the library source files. If you want to reduce the amount of code required here, switch to 2.* of the library, which supports autoloading using composer. That will reduce the number of classes that need to be loaded just to load a customer, but I'm not sure how materially it will impact the php-fpm memory usage.\nHave you tried loading any other similarly sized libraries to see if they cause similar footprint jumps? I'm not familiar enough with php-fpm to say if this is normal or not.\n. Those accesses are likely from Stripe's use of certificate inspection: we pull the certificate being used for api.stripe.com and check it against a blacklist (since any SSL key created before Heartbleed was patched is potentially vulnerable). Specifically one of the method calls in https://github.com/stripe/stripe-php/blob/master/lib/ApiRequestor.php#L407-L435\nI don't have more info than that right now, but figured knowing the source of those may be useful.\n. Thanks for checking 2.1.1 @nodesocket - sorry I hadn't gotten the chance to dive into this. Thrilled that the new library fixes things, though I have no idea why it would. Closing this out.\nCC @richo since this thread came up in conversation.\n. Hmm...I don't see anything in the 5.3.3 changelog that would cause an issue. I'd say try it and see if you run into any bugs. Happy to fix any issues if they're fairly minor.\n. Gah, I said I'd do this and then totally forgot. Sorry all (and lgtm)!\n. That tutorial is out of date: instead of Stripe_Charge you should use \\Stripe\\Charge. The new bindings are all of that format, not the one with the underscore.\n. Instead of card for the param hash, you should be using source. Generally you should not be sending credit card numbers directly from your server unless it is PCI complinace. You should look into Stripe.js, which allows you to collect credit card details without them touching your server.\n. @sajiddesigner, as @matthewarkin said, the issues in this repo is for reporting suspected bugs with the PHP bindings. In this particular case, this is almost certainly not a bug, but an issue with your integration. As he recommended, I would use Stack Overflow, IRC, or https://support.stripe.com/email to get help with your particular integration.\n. As I said, please contact Stripe support via https://support.stripe.com/email for questions like this. You did not provide your code here, so I do not know what happened. Support will be more easily able to lookup your account and see what request you're making, which would be much more efficient than the back-and-forth of asking for copies of your code.\n. As I requested, please contact Stripe support at https://support.stripe.com/email - this is not an appropriate forum for individual questions.\n. Unfortunately it's really hard to stub out native methods in PHP, so getting curl_exec to return the right thing to trigger handleCurlError isn't easily doable. Fixed the URL reference and manually verified the error returns doesn't itself throw and error (just turned off the wifi on my laptop and ran tests).\nShipping for now and cutting a new version since this is an improvement over the status quo.\n. Sorry about that, thanks for the fix!\n. Grepped around and confirmed that this is the last instance of the missing underscore.\n. Thanks for the report! Can you explain the context under which this is attempting to be loaded? It looks like you've manually copied in our library - what loads our code? The library is meant to be either autoloaded via composer, or manually loaded by our provided init.php. It doesn't look like you are doing either?\nNothing in our tests should be auto-loaded, so getting DiscountTest to be included in any live code should be impossible in a normal environment.\nAlso, I imagine the lack of use TestCase; is not the issue here. Based on the error @pvernaglia reported, PHP is correctly identifying that Stripe\\TestCase is the class to load. It's just failing to auto-load TestCase.php, which, again, is not surprising since nothing in tests should be autoloadable.\n. init.php does not load any of our test files, so DiscountTest is not being included there. The only way this could be happening is if someone is either manually loading it, or using an autoloader that scans for directory names. I suspect it's the latter.\nIf you're just copying in the Stripe library (which, again, is not recommended), you can just delete the test folder, since it's not needed for anything in a live environment. Beyond that, there are enough non-Stripe variables at play here that I don't think there's anything we can (or necessarily should) change that would resolve this particular issue.\n. Gah! Nice catch!\n. I agree that we should accurately represent the return type as a Collection. Will add to my TODO list (though PRs are more than welcome).\n. Thanks @matthewarkin! Closing this out. Please let me know if there's a bug here @zeckdude.\n. Pretty confident the test failure is transient. Will merge and see if there's a failure.\n. 90% sure it's transient due to some infra strangeness on the server side, but I'm re-running the build now to confirm.\n. (Confirmed transient)\n. The order on all of these exceptions is httpBody first and jsonBody second, so the original order seems correct. What are you seeing that makes you think otherwise?\n. getHttpBody returns the raw response that the server sent back, which should always be a JSON string anyway. getJsonBody returns the parsed JSON response. You almost always want getJsonBody, but the other method is there in case, for example, a string that doesn't parse as JSON is returned (again, this should never happen).\nClosing out since it sounds like this is working as expected, but feel free to reopen if I'm misunderstanding something.\n. getJsonBody delivers parsed Json, as in what you get back when you run json_decode on getHttpBody. I agree on the ambiguity there though: it would be better off being named getParsedBody or similar.\nHowever, given it's current use I think the better solution is to document the method than rename it.\n. Thanks for the fix! Build failure looks transient, lgtm.\n. Hi @SteveEdson. From the 8 curl requests you made at that time to /v1/plans, I see all of them taking under 100ms from the time they hit our servers to the time we send out a response.\nIt looks like, from your timing data, that almost all the time is spent in the SSL handshake. You are hopping from the UK to the US west coast, but even then .8s is still quite a long time.\nIs this being run on your personal machine, or your production server? If it's going over a consumer internet connection I wouldn't consider that too surprising, but if it's from a reasonable datacenter I'm happy to dig further.\nFeel free to continue commenting so we can dig into this, though I'm closing this issue out as it's not a bug with our PHP bindings.\n. K, it sounds like it's a eu-west thing then, and there's nothing we can do in the immediate future (barring an EU server presence).\n. Thanks for pointing out! Leaning towards renaming it to StripeObject to match what our Ruby and Python libraries use. \\Stripe\\StripeObject is a bit strange, but since it's rarely directly references I'm not too concerned.\n. lgtm barring the 2 nits.\n. With few exceptions, our libraries work with every version of the API. sources is available to all versions of the API, though older versions provide cards as well for compatibility.\nIf they were using $customer->cards that would require them to be on an older version of the API, but that's true regardless of which version of the PHP library they are using.\n. Yea, we're reconsidering this API now: I'd like to settle on something a little more general than bank_accounts.\n. Note for the verify endpoint: we're not sure if we want to straight up rename it, or change the API itself.\n. See comments, but generally lgtm.\nIf you don't have any urgency to cut a new release, I have 2 minor breaking fixes to make for a 3.0 release, happy to roll this into it.\n. Thanks for the detailed report. I'm thinking I'll rename \\Stripe\\Object to \\Stripe\\StripeObject, and change both code and param in Error\\Card and Error\\InvalidRequest to stripeCode and stripeParam, respectively. Both of these changes are breaking so I'll bump us to 3.0.\nWill try to get to this week.\n. See my nits, otherwise lgtm\n. @hajindersingh645 it seems likely that in some cases $_POST['stripeToken'] is being set to an empty string or null. I'd recommend going into your \"logs\" tab and seeing what parameters are actually making it to Stripe's servers.\nAny further debugging would require actually digging into specific information about your account. You should email support@stripe.com for that. Given that it's incredibly unlikely that this is due to a bug in the Stripe PHP library, I'm closing this issue out. If there is a bug on our end that we need to fix, support@stripe.com will be able to route it appropriately.\n. Yup, 3.0 inbound :)\n. Post-merge review is fine, I want to start testing 3.0.0 so I can get it released today.\n. \n. :llamayay:\n. Test failure is transient. LGTM, :sheep: \n. :+1:\n. :llamayay:\n. Some style errors:\n```\nFILE: /home/travis/build/stripe/stripe-php/tests/RefundTest.php\n\nFOUND 8 ERRORS AFFECTING 7 LINES\n40 | ERROR | [x] Opening brace indented incorrectly; expected 5\n    |       |     spaces, found 4\n 51 | ERROR | [x] Line indented incorrectly; expected 8 spaces, found\n    |       |     4\n 51 | ERROR | [x] Closing brace indented incorrectly; expected 5\n    |       |     spaces, found 4\n 53 | ERROR | [x] Line indented incorrectly; expected at least 8\n    |       |     spaces, found 4\n 54 | ERROR | [x] Line indented incorrectly; expected at least 8\n    |       |     spaces, found 4\n 55 | ERROR | [x] Line indented incorrectly; expected at least 12\n    |       |     spaces, found 8\n 57 | ERROR | [x] Line indented incorrectly; expected at least 12\n    |       |     spaces, found 8\n 59 | ERROR | [x] Line indented incorrectly; expected at least 12\n    |       |     spaces, found 8\n\nPHPCBF CAN FIX THE 8 MARKED SNIFF VIOLATIONS AUTOMATICALLY\n``\n. Gah sorry, I forgot I get CCed on all PRs, I assumed there was anr? @bkrauszthere somewhere. Nevermind :)\n. lgtm!\n. :+1: - thanks!\n. You can useisset($plan->foobar)` to check the existence of the object before fetching it. I'm hesitant to provide this kind of global branching in how StripeObject behaves, especially because our current behavior matches how array accesses work in PHP.\n. Thanks for the PR! I have a preference to keep the spaces around the string concat operator, I believe it's more readable (and more analogous to other binary operators). Is there a particular style guide you're following for that? We don't specify anything beyond PSR-2.\nA lot of the personal nits I have no strong opinion about (e.g. if/else returns vs. if/end of method returns), if we're going to have an opinion it should be one enforced by our phpcs. Otherwise there's no real point in changing them.\n. I agree that we should have a way to get response headers, but I don't think storing it on RequestOptions is the right way to expose it: they are meant to be sent per-request, and are fairly independent from the response. For example, they get glued through to future requests (ex: calling retrieve and then save uses the same RequestOptions by default, though I believe it does make a new options object).\nI think I'd rather expose a getLastResponseHeaders accessor on each object, that is overridden on each refresh. Then we wouldn't need the _ key magic, and it's relatively clear that each refresh will update it. It also covers all headers, so things like Stripe-Version would be fetchable as well.\nThe other option would be a static method on ApiRequestor that does the same thing, but static methods are less appealing.\n@kyleconroy - any thoughts on this?\n. Are we changing the response code behind a version gate? If so, do we need to leave the old 400 interpreter for older versions? \n. Looks good to me, thanks for the PR!\n. We have Managed Accounts in private beta in the UK, which is relatively analogous to Recipients: https://stripe.com/docs/connect - you can email connect+uk@stripe.com to get on our waitlist for access to it. Other than that, you can use Standalone Accounts today, which has the recipient make a Stripe account and allows them to work directly with Stripe.\n. The ISO country code for the UK is \"GB\". The flow you're proposing is\npossible under deferred accounts.\nOn Mon, Sep 14, 2015 at 7:09 PM Sam Deering notifications@github.com\nwrote:\n\n@bkrausz https://github.com/bkrausz - Standalone accounts does not work\nin UK.\nWhen I create a deferred standalone account I get this error:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/1787454/9866118/f5901364-5ba1-11e5-8b2b-59d682ac68ac.png\nAssuming you cannot create deferred standalone accounts... which makes the\n\"managed\" property to false redundant... Ideally being able to create\ndeferred standalone accounts would be highly beneficial until managed\naccounts comes along.\nJust to confirm with you that would be possible currently in UK?\n1. create a standalone account using AUTH (create account page flow)\n   only\n2. use the API to charge the account and transfer to a destination\n3. this destination can be another standalone account (again created\n   using AUTH)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/196#issuecomment-140254894.\n. stripe_account is a request option, as described in the changelog. It is passed as a separate array, as show in the PHP example here:\n\nPHP\n\\Stripe\\Stripe::setApiKey(PLATFORM_SECRET_KEY);\n\\Stripe\\Charge::create(array(\n  'amount' => 1000,\n  'currency' => 'usd',\n  'source' => {TOKEN}\n), array('stripe_account' => CONNECTED_STRIPE_ACCOUNT_ID));\nYou get that error if you pass stripe_account as a parameter inside of your request params.\n. If you look closely, there are 2 arrays in that example, not 1:\nPHP\n\\Stripe\\Charge::create(\n  array(\n    'amount' => 1000,\n    'currency' => 'usd',\n    'source' => {TOKEN}\n  ),\n  array(\n    'stripe_account' => CONNECTED_STRIPE_ACCOUNT_ID\n  )\n);\n. That's still one array, with another array inside of it. You need to pass 2 parameters into your method:\nPHP\n$charge_object = \\Stripe\\Charge::create($data, array('stripe_account' => $ucapikey));\n. @matthewarkin since the last discussion we've renamed the endpoint so that .../sources/BA_TOKEN/verify now works, which this PR uses. \n@aaronbski thanks for the PR! It looks like you're using short array syntax in your test, which PHP 5.3 doesn't support (thus the test failures). If you update this PR to fix that, I'd be very help to merge it in :).\n. LGTM, thanks!!\n. Thanks for reporting @btpoe - all fixed!\n. Nice, lgtm. Was considering suggesting getFoo style accessor methods instead of public vars, but I have no strong preference. Other suggestion is to thread ApiResponse further up to _requestRaw, but again, no preference.\n. You also should be able to write your own replacement for CurlClient, and plug that into our system without needing the change any stripe-php code.\n. ->refund() should be deprecated, instead using ->refunds->create(). The former doesn't actually return a new object, which is why it's weird. The latter will do what #208 wants.\n. (lgtm as well, thanks!)\n. Also might be worth noting that if you're using autoloading this is not an issue, as autoloading encompasses the class_exists notion for you automatically.\n. We have had a lot of concerns in the past about people setting there timeouts very low. Charge creation, given the need to talk to the card network, can easily take 5s when talking to more obscure banks in further away countries.\nThat said, the bar for doing this seems about right: having to make a new CurlRequest object. I'm pretty happy with this.\nCan we extend the note in docs to include a warning against a low timeout (in addition to the idempotency suggestion)? 5s is definitely too low for charge creation, we usually warn against anything less than 30s, but maybe suggesting 10s as a lower bar is a better compromise?\nCC @remistr if he has support FUD.\n. Sorry for the delay. Let's change the NOTE message to this, then I'm happy to merge:\n*NOTE:* We do not recommend decreasing the timeout for non-read-only calls (e.g. charge creation), since even if you locally timeout, the request on Stripe's side can still complete. If you are decreasing timeouts on these calls, make sure to use [idempotency tokens](https://stripe.com/docs/api/php#idempotent_requests) to avoid executing the same transaction twice as a result of timeout retry logic.\n. No problem, thanks again for the PR!\n. Thanks for the detailed report @saber3005! Looking at the log line you sent over, it looks like this was received properly in your request, and the correct response was sent back. I suspect the issue was with the update post-creation (since we take the response we get back from the server and update the Account object with its data). I'm digging deeper now.\n. (Nevermind, I've reproduced exactly as you described this)\n. CC @stripe/api-libraries \n. @brandur yea, the test failure is random drift. I fixed a bunch of the issues with it, but the Transfer failure is new to me.\nRe: integration tests - I'm happy to add unit tests as well. I wanted to have functional specifically for additional_owners because they've had hairiness before.\n. Added a unit test, confirmed these are all unrelated failures. Will dig into them when I have time.\n. FYI I just fixed the issue causing all the tests to fail, should rerun on next push.\n. The only mbstring method we use is mb_detect_encoding to decide if we should utf8_encode. We can instead add a function_exists('mb_detect_encoding') to that call (preferably with class var caching since I think the perf of function_exists sucks and it'd be called a lot). May still be worth a warning about poor UTF8 handling, but if they don't have mbstring installed I think they already have UTF8 problems.\nAlso putting in init would only work for those not using Composer, so we'd likely want somewhere else (like in ApiRequestor, which always gets called on request).\nI think we used to do a check for Curl, but Composer enforces its existence, and we now provide pluggable request handlers, so you could opt to swap in your own non-Curl requestor if you're so inclined.\n. I'm pretty OK still working for non-UTF-8 here. If they don't have mbstring installed I think they'll have more int'l problems than just us.\nlgtm - can you test the warning code and make sure it works properly in PHP 5.3? Assuming it does \ud83d\udea2 .\n. Test failure is refunds being non-object\n. No need to substr, since we're just copying the string over.\n. Timeouts in the tests are fine, however there is a style nit in the tests:\n11 | WARNING | Line exceeds 80 characters; contains 96 characters\n. For the sake of 5.2 support can you remove the \\? While we are planning on properly supporting namespaces, the current version does not, so it's probably better to be consistent.\n. ditto\n. This should be the old $apiKey, since $requestor->request parses that out and returns it.\n. ditto\n. This seems like a common ternary operation...can we just have Stripe_RequestOptions::parse optionally take an existing API key as the second param, and then it will select the right fallback (or some similar API)?\n. I take it we're universally preferring camelcasing across all bindings? Seems mildly non-intuitive going from this to the header (vs. just passing the raw header).\nI think we should throw an error if you provide a value here that we don't expect, as right now passing IdempotencyKey will silently do nothing.\n. I think you meant $key, not $options\n. All of the tests uses a string as $option, so I don't think this code was actually tested.\n. May as well make this static\n. Also, given that we only ever change email, can we just accept an email as the param and use that?\n. Stripe_TestCase?\n. Stripe_TestCase\n. Stripe_TestCase\nI know the 1:1 translation of all of these would have them left as the base test case, but I see no reason not to inherit everything from Stripe_TestCase and give us the consistency there.\n. Stripe_TestCase\n. Is the intent here that bitcoin transactions will properly have their own object, but you won't be able to do anything special with them like save?\n. They do seem to be listable and fetchable, so do we want to have retrieve and all methods?\n. works for me, thanks for clarifying. :sheep: \n. Subjective style decision, either way is practically fine (unless PSR-2 has an opinion here).\n. I suspect part of Stripe's automatic hosting of tags on our servers. @ebroder is this no longer in use?\n. Return type is incorrect\n. Alphabetical order please\n. FYI Travis is complaining about the number of newlines at the end of this and the corresponding test file.\n. Lowercase d\n. Hmmm...emotionally caught between this option and http://stackoverflow.com/a/9183276/2515035 (split on \\r\\n\\r\\n). Any reason why you chose this option?\n. If this just going to return a boolean, or does PHPUnit magically know that assert* methods should raise on false?\n. Why not strpos($haystack, $needle) === 0?\n. Test failures are for opening brace on newline\n. Does $this->dispute load an actual Dispute now? Do we want to just glue things through as one would expect: update the Dispute with all of the $params and call save on it?\n. Ditto\n. Given that a consumer is unlikely to be between 10 and 50 seconds behind (i.e. if it's 10s behind it's probably a few minutes behind), do we want to make this 1s?\nAlternatively, we now have the infra to stub out responses in PHPUnit, so we could just stub out a dispute.\n. Sorry for the super nit, but can we call this testNonexistentProperty or testPropertyDoesNotExists. Inexistent is valid english, but is fairly rarely used.\n. Since this looks kind of weird, mind adding a comment as to why it's necessary?\n. PHP, in all its verbose horrors, needs array('charge' => $c)\n. Can we leave a few tests in place that the old refund creation call style still works?\n. This is going to make our tests take ~forever (specifically adding 30s to each of our 12 builds). Can we do something else? We have the ability to mock HTTP responses now.\n. This code is essentially testing that the compiler does what's expected. @nelhage gave a talk about the concept\nIf you want to test this, you should mock out the response so that we'd actually be testing the response parsing. Something similar to https://github.com/stripe/stripe-php/blob/master/tests/TestCase.php#L32-L39\n. We usually add this line in a separate PR. Given that this is a 100% backwards compat change I don't think it warrants a version bump, so I'd remove this.\n. Can we add a comment on the 400 rate limit that identifies that it's backwards compat for API versions older than X\n. This will not fail if the exception is not thrown. PHPUnit supports an expectedException annotation which will help: https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php\n. I don't think the second test is actually necessary, since we pass through whatever HTTP code we get in the response (400 is pre-version-gate, 429 post).\n. But no strong preference, I just find the HTTP code test to be a little \"test that PHP runs properly\"-ish (though not blatantly so).\n. Sorry for the chunder...this is not managed accounts only. This should be connected account. It also works with your own account ID, but the purpose is connected accounts, whether managed or standalone.\n. ",
    "josecelano": "@bkrausz could you paste here a concrete example?\n. @bkrausz \n\n\"ex: if your init method is the only thing that has access to a config, but has no ability to pass objects around\"\n\nI mean one scenario where you can use static methid but not instantiate a new object.\nI\u00b4m building a PHP client for a REST API and I have seen other clients (not only this one) using static methods.\n. thanks @bkrausz for your reply. I was very curious to know about the reasons as it seems to be a very common practice. Static methods are also used by PayPal PHP SDK. I also use them becuase it seems to be easier to use but I think I have changed my mind becuase:\n1.- Testing: It seems that supoprt for static methods have been deprecated in PHPUnit.\nhttps://github.com/sebastianbergmann/phpunit-documentation/issues/77\n2.- Ease of use: really I do not think there is much more complexity in your second example. An the user could add a static wrapper.\n3.- In some scenarios it is the only solution available. \nThis is why I askek you about the concrete sample. The only scenario I had found if this one:\nphp\n<?php\n$result = array_reduce([1,2,3], 'Charge::create', 0);\nextracted from a @mathiasverraes `s blog post:\nhttp://verraes.net/2014/06/when-to-use-static-methods-in-php/\nbut I suppose you can create a class with a static method and use the intantiated object inside that method. Probably the performace would be worse but I agree that tests should be critical for a payment processing code.\n. ",
    "JulesAU": "Big +1 for Matt's comment. Unit (and indeed integration) tests are absolutely critical for payment processing code. \nNeedless to say that we rolled our own integration shortly after opening this issue 2 years ago (although sorry to say not fit for public consumption).\n. ",
    "GrahamCampbell": "\nI was very curious to know about the reasons as it seems to be a very common practice.\n\nThe biggest reason I see in SDKs is because they're just ports from other languages...\n. And the test for it?\n. > Even better, build it on top of Guzzle 5\n:+1: Yes!\n. is that not just in preparation for the next release?\n. PSR-4 would be cool. It would be cool also to move lib/Stripe => src and test/ Stripe => tests.\n. Moving to php 5.4 and using all the cool new stuff from php 5.3 and 5.4 would be a great idea.\n. This should be squashed to one commit too.\n. Please close this.\n. This needs be be squashed to one commit.\n. Also, this needs to be done on the v2 branch surely?\n. :+1:\n. https://github.com/cartalyst/stripe is pretty good.. :+1:\n. Zend has been PSR-2 for ages hasn't it?\n. All the changes to the master need persisting to the v2 branch too.\n. For your interest, just run this through my cs checker: https://dev.styleci.io/commits/d2940754c09a7f08ff48a0595b63420b5b768ff6.\n. Ignore the short array syntax changes.\n. Also, I think it would be worth only supporting php 5.4+ since both php 5.2/5.3 are eol, there's no point in supporting 5.3 still.\n. > align with that particular checker's rules.\nStyleCI is actually configurable with a .php_cs file. It's just set for psr-2 plus a few extra rules that make sense imo. Many are from symfony's coding style guide.\n. I just put that there for interest. That's why I haven't send a pull to change anything.\n. This means people can ask for ~2.0@dev or 2.0.*@dev and get the latest stuff that will be a 2.0.x release at some point. People should never ask for dev-master.\n. Packagist doesn't care what aliases are in commits or tags. It'll just read what ever's currently in the master, so if you ever forget to update the alias before a release, you're not breaking anything.\n. > OOC, if we cut a 3.0, should we alias the latest 2.0\nYou can actually create a 2.0 branch, and just delete the alias, and mark the master as 3.0-dev.\n. I'd recommend creating a 1.18 branch too actually.\n. > As opposed to the current tagging?\nNo, not at all. In addition to tagging. It means people can get the latest upcoming changes before they get tagged. You'd never want to replace tagging with this. :)\n. The 1.18 branch would be treated as 1.18.x-dev under the hood.\n. > junior developers\nThey should not be copying and pasting code. I wouldn't want to work with anyone that does that.\n. Probably. Why can't you upgrade?\n. Yeh, this is clearly a false positive.\n. These changes are major and breaking though.\n. > made a pr, but apparently it is \"useless\"\nThat wasn't what I said. I made an inline comment on a specific line.\n. Composer already deals with this. Nothing else is needed IMO.\n. > I vote for any documentation is better than no documentation.\nNo it's not? The class name is already self documenting.\n. You claim to be using PSR-4 autoloading in the composer.json, but defining constants like this is a strong violation of the spec.. We should not be running cs checks on travis. Use scrutinizer or something to do that.\n. I prefer the following formatting:\n``` php\n<?php\nnamespace Stripe;\nclass ...\n```\nThat style is more popular, for example, symfony use it.\n. Ooops...\n. Why so many new lines?\n. Bages need uodating.\n. Why do we have this file?\n. missing a / on the end of lib.\n. Else block not needed.\n. It's not a cs thing. It's just a micro-optimization.\n. No leading slash should be used.\n. Should just be return; with no value.\n. Your tests will still pass with that change.\n. Hmmm. PHP's a bit rubbish sometimes.\n. These comments are useless \n. Incorrect \n. I was referring ONLY to that line I commented on. Not the annotations. :)\n. @package is only meant to emulate namespaces on PHP 5.2. It has no other use.\n. > Care to elaborate or are you just having a bad day?\nNope, I'm telling you that I wouldn't put this there because it's not correct.\n. No, that's not what the package annotation means.\n. This property is not defined?\n. I'm saying I think you forgot to define it.\n. ",
    "michelle": "Hmm, this is sort of an inelegant way of interacting with Connect. Connect is standard OAuth2, so we recommend using an OAuth library for this kind of thing.\nhttps://gist.github.com/amfeng/3507366\n. Thanks for the PR anyhow; and sorry for the huge delay in response! :(\n. Ah, sorry for all the delay on this--this is a bit out of date now :(. I'll put it on my list to manually merge this in soon.\n. You did! I was pointing out the minor discrepancy between planID v. planId.\n. Hmm, any idea why the first build fails with Fatal error: Class 'Phar' not found in /home/travis/.phpenv/versions/5.2.17/bin/composer.phar on line 13?\n. Thanks for the PR!\n. LGTM.\n. Thanks!\n. Thanks for reporting--this was indeed due to metadata being added to invoice items. Subscription line items in invoices don't have metadata and thus return null rather than {} as its metadata. These warnings should no longer show up in the latest version.\nSorry for any inconvenience!\n. Hi Woet; thanks for the PR! Out of curiosity, could you point to some other libraries that do this? Why is this not covered by having Composer support?\n. Sorry for the delay, @BenMorel! I'll be happy to merge in PRs along these lines.\n. Actually, after thinking about it more, is it possible to just maintain a\nfork with this? I'm not certain this is a wide enough problem to justify\nadding a lot of potential clutter to the main codebase :(.\nOn Saturday, March 8, 2014, Benjamin Morel notifications@github.com wrote:\n\nThat's great news, @michelle https://github.com/michelle, thank you!\nCould you please merge this one first, and I'll open separate PR for the\nothers?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/stripe/stripe-php/pull/65#issuecomment-37098504\n.\n\n\nSent from Gmail Mobile\n. Sorry about that; I guess I wanted to do more research before merging in bits and pieces, which I do consider to be confusing. Happy to take a day next week to work on this and have standardized PHPdoc-style documentation in the entire codebase. I'll CC you on the PR :).\n. #75 \nLet me know if this helps!\n. Sure, new issue would be nice to track.\n. Thanks for this, and sorry for the delay! Could we format Composer and Git as 2nd level headings, and have the divider between the two sections instead? :)\n. Thanks for this! I'll add a test case and merge soon.\n. Cool, thanks a lot for this! I'll merge it in sometime this week. In the meantime, could you make sure everything complies with the Zend style guide? (http://framework.zend.com/manual/1.12/en/coding-standard.coding-style.html)\n. Nope, looks good otherwise.\n. I feel good about these test cases.\n. :+1: \n. Thanks!\n. Hum, so this might break people who catch all exceptions then explicitly class_name the error and do a comparison instead of using is_a, which we might not care about since that's an extreme case of doing the wrong thing.\nOtherwise, looks good!\n. r? @SlexAxton \n. Looks good! Merging ~\n. Thanks!\n. :+1:\n. :+1: Yay tests!\n. Thanks for the report! We're looking into it.\n. Haha, phew. Glad you figured it out!\n. Hmm, could we put these back in place? :)\n. I think there were some $planIds and $couponIds lurking around, but no big deal.\n. Hmm, this is probably just me being unfamiliar with PHP conventions--is it typically acceptable to define global constants in libraries?\n. You wouldn't ever want $params here, right? Might be less confusing to leave it out.\n. Zend style guide says 4 spaces here.\n. This line can even be moved out!\n. Hm, so looking at this more, I have the same comment as Jim did for Java--ideally this should be null if neither exists.\nNot urgent though, since it wouldn't be a regression.\n. s/this/this function instanceUrl should return null.\n. Yeah--I guess the idea is that it might actually error in this case if both are null.\n. Heh, this is probably true for all of our bindings tests :).\n. ",
    "sjelfull": "Isn't the docs incorrect there? It says example response:\nphp\nStripe\\Discount JSON: {\n  \"object\": \"discount\",\n  \"deleted\": true\n}\nI was bitten by this just now as well.. ",
    "remi-stripe": "The API does return the JSON you mentioned but the stripe-php library does not at the moment. It updates the customer's instance to remove the discount as you can see in the code [here|https://github.com/stripe/stripe-php/blob/master/lib/Customer.php#L140] but it does not return anything.\nI'm not entirely sure why we made this choice but we should fix it. The issue is that this would be a breaking change and we would have to release a major version of the library for this so we won't do this immediately. I'm adding this as a future fix though.. @bkuhl @seyfer  Have you looked into our mock library stripe-mock? This should work for you as this is what our own test suite uses in the library today.. If you don't want to use Composer you don't have to anymore. You can simply load init.php which will load all the required files for you. This is covered in the Manual Installation documentation\n. Hey @na-ji!\nThe best solution for you would be to modify the code for request() to handle the proxy setup on your end as I don't think we support anything like this at the moment. We rely on cURL on our end too so you'd configure it to support your proxy directly in  CurlClient.php\n. @na-ji You can definitely modify this and submit a PR with some tests and we'll see if we can merge it!\n. @Varun006 This usually happens when something is not configured properly on your server and prevents you from reaching our servers. I'd recommend contacting your host provider directly here.\n. @Varun006 : Requests don't take more than 30 seconds to execute with our API. If you create a basic customer without a card in Test mode or even simply retrieve one you manually created in the dashboard the request will execute in a few seconds at most and usually way faster than that.\nThis error usually indicates that either curl is not enabled, or you have DNS issues on your server. An easy way to verify is to simply try to curl our API directly and see if you can reach us at all or not. Then checking your PHP error logs for more details is usually the next step as most times it surfaces the error.\nFinally, reaching out to your host provider to ask why your server can't reach Stripe's at all should give you the answers you need.\n. @Varun006  glad you figured it out!\n. Hey @TrangDinhVan \nWe have lots of documentation on our website directly:\n- https://stripe.com/docs/api#create_coupon\n- https://stripe.com/docs/api#create_subscription\n- https://stripe.com/docs/guides/subscriptions#applying-discounts\nOtherwise, I'd recommend reaching out to support for direct help here https://support.stripe.com/email\nIssues should be limited to bugs on our PHP library!\n. I let this slide for a few weeks to think about this more. Recent downtime/issue doesn't seem to have been impacted as much as it was 6+ months ago. Let's close for now and revisit in a future iteration if needed.\n. @ummahusla autoload.php is present only if you install the library with Composer as explained here. If you manually installed the library instead as explained here you need to load init.php instead like this:\nrequire_once('/path/to/stripe-php/init.php');\n. I'm assuming this is spam and closing. If that's not the case, please provide a detailed report without any external untrusted link! Thank you!\n. @webbudesign: That's the kind report I was looking for. Your original message just linked to a short URL that looked more like phishing than a viable report.\nMy guess is that avast complains when you try to download a PHP script as this being potentially a malware but there are no malwares in our library.\nI also tried on my end when downloading the library on my own Windows machine for multiple versions with the latest version of Avast and I don't get any similar warning. This look like an issue specific to your computer or your avast version. I'd recommend that you update Avast or reach out to them\n. @babitabhandari The issue here is that you didn't properly include the PHP library in your project. You'd need to either use Composer as explained here or the manual installation as explained here\nSeparately, make sure to never share your Secret API key, even the test one. And for those types of questions, writing to support is usually the best flow as issues on Github should really be limited to bugs on the library and not questions on how to use it! You can contact support here\n. Closing as duplicate of https://github.com/stripe/stripe-php/issues/245\n. @MParsons095 Would you be able to provide more details about the issue? Usually when something like this crashes there'd be an error in the error log files on your PHP installation for example which would be helpful to reproduce\n. @mahesfsp: This is a really old version of our library that was released more than three years ago: https://github.com/stripe/stripe-php/blob/master/CHANGELOG.md#180-2013-04-11\nAs far as I'm aware it should just work as expected assuming that you're on an API version old enough to support the old situation where only one subscription was supported per customer.\nI'd recommend that you contact Stripe support directly to discuss the exact error you're experiencing so that they can help: https://support.stripe.com/email\n. @mahesfsp : Yes it does.\nI wanted to restate what I said in the previous issue you opened. Issues on Github are here to report bugs on the libraries or feature requests. Since you mainly have questions about the integration and how the library works, it'd be way better if you contacted support directly instead! You can do this here: https://support.stripe.com/email\n. @dinatest2010: Card declines happen when the bank rejects the card. This is not a coding issue here, just that the customer's bank blocks the card/charge.\nI'd recommend that you contact support instead: https://support.stripe.com/email\n. @dinatest2010: no you don't. Again this is a decline issue and not an bug with the library, you should contact support, share your code, share concrete examples of failures on your account, etc.\n. Hey @circuitmamu! This is more a support question as it's not a bug with the PHP library or a feature request. The best solution to get answers on how to use the Stripe API is to contact support directly here: https://support.stripe.com/email\nTo answer your question as it's already asked, the best solution is to use metadata for this as documented here: https://stripe.com/docs/api#metadata\n. @manojmilani123 you shouldn't set an array like this on legal_entity this will not work. You need to set each field explicitly instead for this to work properly. You also should only set valid properties and for example status is not something you can set. Your code should be:\n$account = \\Stripe\\Account::retrieve($account_info['stripe_managed_acc_id']); \n$account->external_account = $_POST['stripeToken'];\n$account->legal_entity['verification']['document'] =  $file_success['id']; \n$account->tos_acceptance['date'] = time();\n$account->tos_acceptance['ip'] = $_SERVER['REMOTE_ADDR'];\n$account->save();\n. @manojmilani123: Ha yes sorry I keep mixing how this works. It should be\n$account = \\Stripe\\Account::retrieve($account_info['stripe_managed_acc_id']); \n$account->external_account = $_POST['stripeToken'];\n$account->legal_entity->verification->document =  $file_success['id']; \n$account->tos_acceptance->date = time();\n$account->tos_acceptance->ip = $_SERVER['REMOTE_ADDR'];\n$account->save();\nAlso, this isn't a bug on the library or a feature request. I'd recommend that you contact support if you have any further questions. You can do so here: https://support.stripe.com/email\n. @manojmilani123 : The error is completely different and not a bug with the library. Please contact support for help instead here: https://support.stripe.com/email\nThe problem is that you didn't pass currency: \"usd\" when you created the card token for that debit card to be able to payout the user.\n. @manojmilani123: I think you're confused about how Connect and charges work here. Please contact support directly for help instead as issues in Github are here for bugs about the library.\nYou can contact support here: https://support.stripe.com/email\n. @AndriySvirin: I just tried on my end and this works just works for me on the latest version of our library. The most likely explanation here is that the customer parameter is empty because $customerStorageEntity->getStripeToken() doesn't return anything. I'd recommend adding some detailed logs before and after to make sure you're passing the correct customer id.\n. @AndriySvirin I'm fairly sure the code should work and the issue is something else in your code but without seeing a full integration and response it's a bit tricky.\nCan you just try the following code for me please?\n```\n\\Stripe\\Stripe::setApiKey(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\n$charges = \\Stripe\\Charge::all(array(\n    \"limit\" => 10,\n    \"customer\" => \"cus_8lpA2VSnzrHzur\",\n));\n// check that we really got just one charge\n$nbCharges = count($charges->data);\nif($nbCharges != 1)\n{\n    echo \"That customer has only one charge but I got $nbCharges charges back. Something is wrong\";\n}\nelse\n{\n    echo \"I asked for up to 10 charges but only got one. That script works!\";\n}\n```\nBasically it uses Stripe's default account and secret key and tries to get up to 10 charges for a given customer who only has one charge.\n. Just to make sure: you used that exact code right? you didn't change the customer id or the API key?\nWhich version of our PHP library are you using?\n. @AndriySvirin I'm fairly sure it's an error in your code yes. I'd recommend moving out of github for this because it doesn't sound like a bug in the library. Please email stripe support team or contact them here: https://support.stripe.com/email and provide your code and the response you get back so that we can investigate!\n. @plato1123 I'd recommend replacing the 3.13.0 by the latest we released, 4.0.0 version and then try again. You should be able to simply replace the lib in your plugin installation.\n. @brandur While I agree upgrade will be needed I think we should first find a way to force TLS 1.2 if available but not break users without TLS 1.2.\nExisting users have until next year to find a path to upgrade. I don't think it's okay to break their integration completely simply because they upgraded to the latest PHP version, at least not unless we explicitly push this as a major change. Doing so means that most users would not think to upgrade though and wouldn't work.\nIs there a way for you to try and force TLS 1.2 but catch the cases where it's not supported and fallback to the old solution for now? In that case, existing users wouldn't be impacted yet and new users would get the expected error. \n. @photogaff The endpoint https://api-tls12.stripe.com is only here to verify your integration and confirm that you are using TLS 1.2. You should not be making any real API call to that endpoint as this will not work.\nAs long as you've confirmed you are making requests with TLS 1.2 (it seems to be the case since you don't have any error) then you're all set. Don't set that endpoint in your Live environment at all and keep your integration as it was.\nIf you have more questions, please reach out to our support team directly here: https://support.stripe.com/email\n. @shrihari-b this just means that you don't have a version recent enough of our PHP library. The Subscription class was added in 3.13.0 as mentioned in our Changelog\n. @kzap The version 1.X should not need the patch. This patch was needed after some modifications we did when releasing 3.X so if you're on 1.X this should not have any impact.\nSeparately upgrading from 2.X to 3.X should be fairly straightforward so if you are on 2.X you should move to 3.19.0 at least to avoid any issue.\n. @kzap Yes! You need to adapt the code a little bit because the old version didn't use namespaces but I just tried the following which worked for me:\n```\nrequire_once(\"stripe-php-1.17.3/lib/Stripe.php\");\nStripe::setApiKey(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\nStripe::$apiBase = \"https://api-tls12.stripe.com\";\ntry {\n  Stripe_Charge::all();\n  echo \"TLS 1.2 supported, no action required.\";\n} catch (Exception $e) {\n  echo \"TLS 1.2 is not supported. You will need to upgrade your integration.\";\n  var_dump($e);\n}\n```\n. @BrunoDeBarros: Since you're making API calls against that specific account on that specific server, could you give us any kind of unique id associated with that account (other than the API keys)? Something like a token (tok_XXX), customer (cus_XXX), charge (ch_XXX) or anything else? This would allow us to look at the account's requests and confirm that on our end we definitely see TLS 1.2 and not TLS 1.0.\n. Okay so this charge was created back in March without our official PHP library as far as I can tell. I don't see any API request made in test mode on this specific Stripe account ever so definitely none made in the past few days.\nIs there any way you can use our library to make real requests and not just use the api-tls12 endpoint? I want to make sure that your code does what you expect and negotiates TLS 1.2 but the only way to really do that is for you to send requests to the API and for me to check each request on our end to be safe.\n. Yes it's the same account. I'll admit I was expecting to see Test logs really and not testing this in production immediately with real customer information which is why I though I was looking at the wrong account.\nSo you're definitely using TLS 1.2 right now on that account even though the code itself seems to indicate you're not.\n. So unfortunately we discovered that in some cases, even though the server supports TLS 1.2, it will still default to TLS 1.0 anyway instead of forcing the connection through TLS 1.2. We've done a lot of troubleshooting with some affected users a few weeks back and the current code seemed to be the best solution ensure TLS 1.2 is used.\nIt seems that in your specific case though that solution doesn't work but we haven't had a lot of reports of this specific issue and error yet which is why Brandur was trying to find a lot more details about the system.\nI think we'll continue supporting TLS 1.0 and TLS 1.1 connections after the deadline just for the ability to explicitly tell users that their issue is with their TLS version so we'd still need the fix in place.\n. @robertkent87 The fact that your other integration works is usually unrelated. The reason is that we whitelisted any existing integration into being allowed to use TLS 1.0 until January 2017 before making the change. Your new integration gets the error because it's new and we want to make sure that new users are relying on TLS 1.2 only and nothing else.\nThe code below will allow you to confirm which protocol your PHP installation is using when negotiating transactions. It doesn't rely on our library to ensure whether the issue is with the server or with our library. Could you run it?\n$c = curl_init();\ncurl_setopt($c, CURLOPT_URL, \"https://www.howsmyssl.com/a/check\");\ncurl_setopt($c, CURLOPT_RETURNTRANSFER, true);\n$r = json_decode(curl_exec($c));\ncurl_close($c);\necho $r->tls_version . \"\\n\";'\nIf it outputs TLS 1.2 then it means your server does negotiate TLS 1.2 and the problem is with our library. If you get any other results it means the issue is with the server and not the library and you can show this to your host provider to convince them that they need to run an upgrade.\n. @bradseth: Github issues should be limited to bug reports around our PHP library. Since your question is not a bug report, you should talk to Stripe support instead here: https://support.stripe.com/email\nSince I'm here though I can answer quickly, but any follow up should go through support, hope that's okay!\nThat line of code should be added to your project where you plan to use Stripe. So let's say you have a ChargeController class or a charges.php script, you'd want to make sure this script includes our library since you plan to use it.\nThis is specific to Composer. If you don't use Composer you should download the library directly and install it manually as explained here: https://github.com/stripe/stripe-php#manual-installation\n. @AndriySvirin: The issues here should be limited to bug reports with the PHP library and not for technical help. In the future you should contact support directly here.\nSince I'm here though, let me answer: this is expected behaviour. When you delete a plan and create a new one, even if it has the same id it's still a different plan so you have no way to retrieve customers with a subscription on the old plan itself. I would recommend getting the full list before doing that operation or always using a different plan id otherwise.\n. Added a few minor comments here to address first but otherwise I think we're ready to ship. Since this is a major change, it might be worth delaying it a bit more and trying to think of anything we've wanted to change or fix for some time but couldn't because it would require a major version release\n. @pderksen this is the original code we had in our library too as far as I can tell (they even mention olivier's name directly in the comments).\nUnfortunately, we've ended up in situations where some users have PHP built with one specific version of curl and then uses a completely different one in production. When that happens, forcing the constant sometimes doesn't work at all producing errors such as the one documented in https://github.com/stripe/stripe-php/issues/289.\nThis PR is a different attempt to avoid this issue. We now rely on curl doing the right thing by default and then provide an option for users to explicitly force a different constant otherwise if they need to.\n. @brandur well that seems the opposite of what a major release should be no? Otherwise we'll keep not changing things we want to fix because it's too minor for a major release and at the same time have to release major releases every time something less minor changes.\nI can't remember a specific thing we wanted to fix but couldn't recently. I'm just trying to advocate for taking this a bit slower than usual and trying to make sure we're not missing a quick win we could get and avoid a 5.X in a few weeks.\n. @brandur Then I think we're okay merging and releasing this!\n. Hello @sanjaykumar2338. This would be the same answer as the message above. This is an issue with your integration and not the code or the library and the best solution here is to double check your API keys. You are likely creating a token with the Publishable key from one account and then trying to use it with the Secret key of another account. Otherwise, please reach out to our support team here: https://support.stripe.com/email\n. @ob-stripe I considered that and wonder if it was worth changing the interface. We collect this just for TLS really and not to action the info do it didn't seem worth it.. @brandur-stripe PTAL. I'm not sure I understand the benefits of this if we end up just defaulting to empty values and not really enforcing that implementation from users.\nI'm happy to add something along those lines, but it feels unneeded. Especially as we're tracking those for the TLS deprecation and wouldn't glean a lot of details from the users.\nIt's likely that no one does this today beyond the user who reported the issue otherwise we'd have had more reports right?. @ob-stripe @brandur wdyt? Should we merge as is or do you want me to add something custom to ClientInterface?. > BTW, you're probably aware, but we won't be able to pull this back into master. I think what we'd want to do is branch off of the 1.18.0 tag, target that new branch from this PR, and then ship a new release off of it.\nYes I did checkout away from v1.18.0 already. I wanted to PR to be available if needed. My opinion is that we should agree on the code but not release it for now. We'll release it if we encounter plugin developers that refuse to move to 4.X. We'd simply close the PR but know the code is here if needed (and potentially shared as a reference if devs want to pull this in locally).\nWhat do you think?. > Oh right! I just meant that I think we'd have to target a non-master branch with this PR. While you branched off the right release tag, you're still targeting the codebase of the latest version. (I think this is why you're seeing conflicting files above.)\nGot it!\nOkay so if we're happy with the state I will just close this out and we'll see how the outreach to plugin developers goes!. I'm not sure why the builds keep failing. On the earlier attempt there were failures about creating too many managed accounts so I updated the test to re-use the managed account across the Payout tests.. @brandur-stripe Okay, I added the third new resource, RecipientTransfer which will exist for legacy reasons. I fixed the tests and ran the test suite on my account again. All the failures I got were unrelated (dispute specific).\nI also wrote unit tests for RecipientTransfer but those won't work on the official account used by the bindings until after the API version is released. If we feel strongly about tests on that resource we can push a separate PR on April 5th where we force the API version on retrieval.\nLet me know if you have comments on the PR!. @brandur-stripe it looks like we forgot to merge this one and released an incorrect version last week. I'm also stuck on the errors such as https://travis-ci.org/stripe/stripe-php/builds/220544154 which says the Payout class is not found even though it's submitted and works locally. LGTM. @Cavain HTTP 500 usually happens when there is something wrong in your code and you're not handling errors/exceptions properly. Based on the path to the file, you seem to be using a third-party plugin for WHMCS. You will need to reach out to the developers of that plugin directly as it wasn't built by Stripe and the error wouldn't be in our library.. That sounds okay though I wonder if we need to also start adding custom tests for backwards compatibility that we want to keep supporting? Not fully sure how this would look like though. It's likely that our test suite is not exhaustive enough to catch most of those anyway. Unfortunately the tokens can't be used in parallel which seems like a bug with the feature. It means that if you have 2 separate scripts using tok_visa at the same time, the second one will fail. This is why the test suite is breaking right now. Working on a fix internally!. @brandur-stripe  PTAL. Hey @tobsn \nThis is more a question for our support team. Issues here should be about the library and bugs or feature requests and not about our API and how to use it.\nTo quickly answer your questions though:\n You should save the card on a customer first: https://stripe.com/docs/api#create_customer\n You should never send raw card details in PHP for PCI compliance. You should instead tokenize card details client-side with Elements. @tobsn Github issues are here to let you report a bug so that we can work on fixing the library. This is not the right place to get support about our API.\nYou need to talk to our support team from our contact form.. @rumatakira the idempotency_key should be passed in a separate array as it's not a direct parameter to your API requests. Your code should look like this instead:\n$params = [\n    'email'           => $post['stripeEmail'],\n    'source'          => $post['stripeToken'],\n];\n\\Stripe\\Stripe::setApiKey(Yii::$app->stripe->secretKey);\n$result = \\Stripe\\Customer::create(\n    $params,\n    ['idempotency_key' => $this->stripe_idempotency_key]\n);. @Grafikart You don't need to add anything as it's already supported in the library and covered in the documentation. To create a card right now you have to go through the Customer who owns it. The code looks like this:\n$customer = \\Stripe\\Customer::retrieve(\"cus_XXXXX\");\n$customer->sources->create(array(\"source\" => \"tok_visa\"));. @Grafikart Ah okay I see what you're asking now. You want to create a card in one API call as is done in some other libraries like the Node.js one?\nIf so it would definitely be useful to add but not specifically for cards as the path is the same for any Source really including ACH, SEPA, etc. The issue is that passing a $customerId as the first parameter feels weird and not something we do in other resources in the PHP library.\nA different fix would be to special-case the $params['customer'] to change the URL we submit too in the create call but I'm not sure it's the kind of \"hacks\" we'd want in the library.\ncc @brandur-stripe  @ob-stripe for thoughts?. @evan-stripe Doesn't that feel wrong though? Sounds more like a hack than a reliable solution to rely on the fact that passing an id will set it in the right place. In that case I definitely prefer either adding $customerId to the Source creation or adding a createSource() to the Customer class.. @jv2222 this is usually a configuration issue with your installation. Often it's due to PHP being compiled with one version of curl but linked to a different one dynamically. I'd recommend upgrading to the latest version of our library (5.1.2) and trying the fix mentioned here: https://github.com/stripe/stripe-php#ssl--tls-compatibility-issues\nIf that does not work, you'll want to uninstall PHP and install a different/more recent version on your system. Hey @floriangaerber, thanks a lot for the detailed bug report here. I came up to the same conclusion and was able to confirm it works once I changed the list of nestedUpdatableAttributes. I pushed a fix in https://github.com/stripe/stripe-php/pull/367 so hopefully we can merge it over the next few days.. @pabloleone This is likely due to the fact that this subscription has been canceled. You can retrieve it but it can not be modified anymore. You can confirmed by checking if $subscription->ended_at is set or view it in the dashboard. . @brandur-stripe gotcha, that makes sense then and explains why it felt like it worked. Thanks for digging into this!. @webprogrammierer Unfortunately, issues here should be related to our official PHP library. Since you're using a third-party plugin you should talk to them directly about this and see if they have an ETA for supporting payment sources. Otherwise, you can reach our support team here: https://support.stripe.com/email\n. @webprogrammierer yes it does support this payment method but most of the changes would be in your client-side code. Please follow up with our support team for help on this topic.. @webprogrammierer I'm sorry but I'm going to lock this discussion. As mentioned earlier, this page allows developers to report bugs they encountered in our stripe-php library. This is not a support medium.\nFor support, please contact our support team directly here: https://support.stripe.com/email. @JoshuaBedford The issue here is that you should set each field in the legal_entity hash directly instead of \"overwriting\" the whole object.\nYour code should look like this:\n$acct->legal_entity->type = 'individual';\n    $acct->legal_entity->first_name = $first_name;\n    $acct->legal_entity->last_name = $last_name;\n    $acct->legal_entity->ssn_last_4 = $ssn_last4;\n    $acct->tos_Acceptance->date = time();\n    $acct->save();\nyou set the fields you want to set. You don't need to copy anything that is already set. You also should only set non empty values.. @ob-stripe  Okay did almost all resources. I think we have EphemeralKey and Card/BankAccount left!\nI left quite a few comments about things broken or that I need help with.\nAlso I see\n```\nNotice: Constant TEST_RESOURCE_ID already defined in stripe-php/tests/SubscriptionTest.php on line 5\nPHP Notice:  Constant TEST_RESOURCE_ID already defined in stripe-php/tests/ThreeDSecureTest.php on line 5\nNotice: Constant TEST_RESOURCE_ID already defined in stripe-php/tests/ThreeDSecureTest.php on line 5\nPHP Notice:  Constant TEST_RESOURCE_ID already defined in stripe-php/tests/TokenTest.php on line 5\n```\nI think the constant was the wrong approach and I should have used a class constant instead though it's more verbose.\nLet me know what you think!. > I'd say open a separate PR, and leave the tests for now, we can update them once the other PR is merged in and we rebase this one.\ndo you mean I should undo this change in the middle of the PR? If it's not a breaking change it might be easier to just keep it there as something we caught?. > This was not a big issue as the PHP library does not rely on this method to instantiate resource classes when retrieving a resource\nWhy didn't this properly work for ApplicationFee in that case? See my related commit https://github.com/stripe/stripe-php/pull/389/commits/64e909b5b8414ff054d1e8d2a40ce6ca52e23b4d which had to fix this to ensure we did get an ApplicationFee instance instead of StripeObject. Understood! I assumed that your PR description implied it was not an issue though but I see how limited the impact is ultimately.. @rlweb my guess is that $fileData is not a valid file stream. You should ensure that you open a local file first and then pass that stream to the function.\nIf you are still experiencing issues though, you'll want to reach out to our support team directly: https://support.stripe.com/email. @stefanogironella Our PHP library has a little quirk for this which is why you are stuck I think. On creation, you have to explicitly tell us that no additional owners exist on the account. This is done by explicitly passing an empty string instead of null. On update (after creation), you would pass null instead of an empty string.\nYour code should look like this:\n```php\n$accountParameters = array(\n    'type' => 'custom',\n    'country' => 'GB',\n    'email' => 'nomail@nomail.com',\n    'legal_entity' => array(\n        'type' => 'company',\n        'additional_owners' => \"\",\n        'business_name' => 'My test company',\n        'business_tax_id' => '1234567',\n        'dob' => array(\n            'day' => '01',\n            'month' => '01',\n            'year' => '1980'\n        ),\n        'first_name' => 'Lucy',\n        'last_name' => 'Cechtelar',\n        'address' => array(\n            'country' => 'GB',\n            'city' => 'Birmingham',\n            'line1' => '21 Ladywell Walk',\n            'postal_code' => 'B54ST',\n        ),\n        'personal_address' => array(\n            'country' => 'GB',\n            'city' => 'Birmingham',\n            'line1' => '21 Ladywell Walk',\n            'postal_code' => 'B54ST',\n        )\n    ),\n    'tos_acceptance' => array(\n        'date' => 1512552895,\n        'ip' => '5.169.147.188'\n    )\n);\n\\Stripe\\Stripe::setApiKey('MY_API_KEY');\n\\Stripe\\Stripe::setApiVersion('2017-08-15');\n$stripeAccount = \\Stripe\\Account::create($accountParameters);\n``. @thePanztotal_countis a property that has been deprecated for a long time so I don't think we should merge this into the official repo to avoid having people rely on it.. Thetotal_count` property is present on sub-collections but likely going away in the future. I would recommend not relying on this value.\nInstead, you should rely on has_more on the collection to know if there are more elements than the ones in your current page and if so paginate through to get the full list and exact count.. @goltra To re-activate a subscription in that state you should simply call the Update Subscription API and set the plan parameter to the current plan id. This will automatically reactivate the subscription:\n$subscription = \\Stripe\\Subscription::retrieve(\"sub_XXXX\");\n$subscription->plan = \"my_plan\";\n$subscription->save();. @goltra I'm not sure I follow what you meant but our API docs list all parameters that are allowed or not.. @abhinavek Can you run this script on your server and let us know the results? . Okay so the issue here seems to be that your installation is configured with TLS 1.0 by default. What you want to do here is upgrade your PHP installation to always use TLS 1.2 by default.\nWe have instructions on how to do this on our support page: https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2#php\nIf you are still stuck, you can reach out to our support team to help you debug this as it's not an issue with the library itself: https://support.stripe.com/email. @modxcustomize Github issues should be limited to bug reports about the library itself. I'd recommend contacting our support team directly to discuss this instead. You can contact them here: https://support.stripe.com/email. @bigzoo detach() was added in stripe-php 5.3.0 here so you should have it. It also only works on Sources and it would not work on Cards. My guess is that your code is using Card objects (and creating tokens client-side) instead of Sources which is why it was failing. In that case delete() is the right method to call.. @bigzoo Card objects and Source objects would both be returned in the sources array, they would just have a different value for object. For a Card the type would be card and for a Source it would be source instead.\nSince you use tokens at the moment, you'd only ever get Cards and you can ignore Sources (the object, not the name of the property, sorry if this is confusing).. @bigzoo Exactly!. @pascaldevink Our changelog should definitely cover every breaking change we've introduced to the library in a major version. You should not be expected to read every PR to figure out what we modified or broke.\nCan you give me a bit more details about things that changed in this release that we have not covered in the changelog?. When creating the changelog it's always a tricky balance between listing every single change and the ones we think most likely impact users. We were hoping no one really was relying on AttachedObject but we should have mentioned it anyway.\nWe'll work on an updated changelog entry to be a bit more descriptive. cc @ob-stripe . @EatonZ It's not documented yet and we just planned the feature in the libraries for now.. @EatonZ This is totally expected. This feature is not public for now and only available in private beta for specific users. It will be released in the next few months.. @johnnydee8 I have tried the following code with your exact version of the library and it works without issue for me:\n```\n$source = \\Stripe\\Source::create(array(\n  \"type\" => \"card\",\n  \"card\" => array(\n    \"number\" => \"4242424242424242\",\n    \"exp_month\" => \"09\",\n    \"exp_year\" => \"2025\",\n  ),\n  \"owner\" => array(\n    \"email\" => \"my_email@stripe.com\",\n    \"name\" => \"my_name\",\n    \"address\" => array(\n        \"line1\" => \"my_line1\",\n        \"line2\" => \"my_line2\",\n        \"city\" => \"my_city\",\n        \"postal_code\" => \"my_postal_code\",\n        \"state\" => \"my_state\",\n        \"country\" => \"my_country\",\n    )\n  )\n));\n$source->card[\"exp_month\"] = \"01\";\n$source->card[\"exp_year\"] = \"2020\";\n$source->save();\n$sourceRetrieved = \\Stripe\\Source::retrieve($source->id);\nif($source->card->exp_year != 2020) {\n  echo \"The source has not been updated\";\n} else {\n  echo \"Source updated successfully\";\n}\n```\nI would recommend reaching out to our support team and providing the exact code and example source that you are trying to update. You can contact them here: https://support.stripe.com/email. \ud83e\udd26\u200d\u2642\ufe0f \nSo you're right the code was incorrect. Once I used the right code, it failed obviously. And then I tested with the latest version of our library (6.1.0) and it succeeded.\nI then looked at our changelog and confirmed that this is a bug we fixed on 5.7.0 as you can see here\nYou'll need to upgrade the version of our library you use to properly update a Source's expiration date. When using Idempotent Requests, we'd just retry the same request over and over and get the original rate limit error though. We likely need to special-case this.. @AbderrahimSoubaiElidrissi Issues on this repository should be limited to bugs with the library.\nFor questions like this one you should instead talk to our support team: https://support.stripe.com/email. @alexweissman Cards live under the Customer objects and so they can only be retrieved through that customer. This customer id is part of all the URLs used for the Card APIs but I agree it could be made clearer.\nThe Card object has existed for many years and for now is linked to the Customer object. A year or so ago, we shipped a new abstraction for payment methods called Sources. This allows to group all payment methods under one object instead of having disparate abstractions like Cards and Bank accounts.\nThe Source object can be retrieved directly by its id without having to also store the customer id so it would meet your requirements. You can read more about this in the docs here: https://stripe.com/docs/sources/customers. @alexweissman Card and Source are two entirely separate objects. Card is the old representation which was built at a time when we only supported Card payments. We then added Bank Account objects for ACH debits.\nWhen we started added more payment methods (3D Secure, SEPA debits, etc.) we wanted to add a common abstraction on top of all of those and that's when we shipped Sources.\nI would recommend using Sources moving forward in your case and dropping Tokens and Cards completely based on the datamodel you wanted to rely on.\nFor follow up questions, I'd recommend talking to our support team directly: https://support.stripe.com/email. @Jossnaz We have not documented those for now. Those are simple helpers to make it easier to integrate OAuth but a lot of developers end up having their own third-party OAuth library for this.. @michael-lurquin This looks more like a connection issue on your server than an issue with the library itself. I'd recommend talking to your host provider (OVH) to see if the requests are maybe blocked on their end. If it was an API key issue, the error message would say so.\nFor any follow up questions, don't hesitate to talk to our support team here: https://support.stripe.com/email. @juragandotid You should discus this with our support team instead: https://support.stripe.com/email. This is unlikely to be a bug with the PHP library. This error simply means that you are trying to charge a customer but you never saved a card on that customer first.\nI'd recommend looking into your code and adding logs to confirm if you've properly retrieved a card token and added it to the customer first.\nI'm closing as this is not a bug and you can reach out to our support team for help otherwise here: https://support.stripe.com/email. @Mirza-Gulfam This is not an issue with stripe-php so I'm going to close the issue here. If you need help with your code, your should talk to our support team instead here: https://support.stripe.com/email. @palashcn github issues should be limited to real bugs in the PHP library. The request you have is about Elements and instead should be directed to our support team here: https://support.stripe.com/email. Tests are sporadically failing, I tried to rebuild 3 times with no success. @ob-stripe fixed, PTAL. @gabrieljenik Github issues should be limited to bugs with the PHP library. This is more a feature request for an API and something I'd recommend contacting our support team about: https://support.stripe.com/email\nI don't think this is something we would build though as it means fetching numerous unrelated records together and that API would be slow. You would also end up having to paginate anyway if you have more than 100 transactions in those payouts.\nWhile running 30 requests seems slow, doing it once a month, or instead once every day, seems fairly reasonable in a background job.. @ob-stripe fixed PTAL. r? @brandur-stripe . wow nice catch @brandur-stripe I would never have thought to look at the output. I just fixed it with your advice\nAccepted Job #2134.1\nYou can see the build on https://coveralls.io/jobs/39267727\nelapsed time: 1.033 sec memory: 7.75 MB\nDone. Your build exited with 0.. @lesterjanpearson Live and Test mode behave the same way. When you create a customer with a card at the same time, we run a $0 authorization on the card to make sure the card is valid. If the authorization fails, the card and the customer are not created and an error is returned. If the authorization succeeds the customer and the card are created.\nWhen you use the card 4000000000000002 this triggers a decline in Test mode. Since this is declined, it's a failure so no customer is created. The same behaviour would happen in Live mode.\nIf you see something different, I would recommend that you reach out to our support team who can investigate the requests and help you better understand the situation. They are available here: https://support.stripe.com/email. @lesterjanpearson The same thing happens in Test mode though. If you create a customer with a card that declines like 4000000000000002 the customer creation will fail in Test mode too. It's the same behavior in both cases.. @lesterjanpearson This is not something that can be done unfortunately. There is no way to guarantee that a given card will succeed for a charge until you charge that card. And you can't save the card after creating the charge. The flow is as follows:\n1/ Tokenize a card client-side\n2/ Create a customer with that card => This fails if the card is invalid as we run a $0 auhorization on the card.\n3/ Create the charge for the expected amount => This can fail for various reasons such as the customer having insufficient funds\n4/ If the charge failed, delete the customer if needed.\nFor follow up questions, I would recommend asking our support team instead. You can contact them here: https://support.stripe.com/email. @jamminjames The 500 on the webhook just means that your code has a bug somewhere and just crashes. I'd recommend double checking the logs to confirm what's going on.\nI'm going to close this out since it seems specific to your setup and not a bug in the library but you can talk to our support team directly if you still experience issues: https://support.stripe.com/email. We resolved all the issues internally and it's ready to be merged.\nr? @brandur-stripe . @brandur-stripe PTAL (And thank you for catching this mistake). @somoza Today, subscriptions renew automatically until you explicitly cancel them. If you want to have a subscription that lasts only 4 months, you need to implement this on your end. The idea would be to use webhooks and you can read our recipe here: https://stripe.com/docs/recipes/installment-plan. Thanks again for making those changes @nickdnk . @Stokoe0990 If you look at the code in the library for Plans and Products you can see they are identical.\nI don't think the issue is with our PHP library or the implementation. My guess is that you are on an old API version from before the Plan/Product split. Because of this, you can only retrieve Plans and not Products because you don't have any. We created some behind the scenes for you when we introduced the split but the API would not return those unless you upgraded to at least 2018-02-05. You can try quickly with the Stripe-Version header for example.. r? @ob-stripe . r? @ob-stripe . r? @ob-stripe . r? @ob-stripe . @mintplugins This is expected behaviour though and we block it on purpose. You should never add a webhook endpoint per connected account. You would add a Connect webhook endpoint at the platform level and dispatch those events yourself.\nI understand what you're describing but I think it's an anti-pattern. Either you are a platform, and you handle that logic, or you're what we call a \"plugin\" where the code is hosted on the merchant's server in which case you would not use Connect and instead have the merchant use their own API keys to add the endpoint on their account.. They are not exactly the same anti-pattern. On our end we have no visibility into why this URL gets added ultimately but our expectation is that whomever adds a URL in the Dashboard owns the server associated with that URL.\nI still don't fully understand the use case here where you act as a Platform but would not want to get events. Can you try and give me more details around what you are trying to do, why you act as a Connect Platform but still don't want that information? This does not align with what usually happens. @pippinsplugins Would you be able to clarify why you are using Stripe Connect in this case though? It seems uncommon as an approach for a self hosted plugin. Would love to better understand the upside of this approach on your side.. @pippinsplugins Thanks a lot for providing all those details. I talked about this internally and we do see how this could be useful in your case. This is fairly complex to do right though. The issue here is that the webhook endpoint would live in the connected account. In that case, it should (in theory) have the API version associated with that Stripe account instead of your platform. If we did this, it would be ~impossible for you to write a webhook handler that doesn't break on new API versions. Otherwise, we'd have to set a different API version on the endpoint (based on your app's). Updating your API version would automatically impact the webhook endpoints on all your connected accounts (And potentially break them since you wouldn't have updater your code.\nThere are ways to work around this, but this is not as easy as just unblocking the feature right now and it's something we'd need to think about in the long term.\nIn the meantime, I really think that the best approach is to have a Platform webhook.. r? @ob-stripe . Damn search and replace. Fixed, PTAL @ob-stripe . @spaze Thanks for opening a PR! I don't think we should do this as the docblocks are here to surface the properties on the resource itself and not the possible parameters. Since there's no way to flag which one is a property and which one is a parameter, I think it would end up being confusing, even if you can set $customer->coupon it's really only used for the save() method.\nLet me know what you think!. I'm still wary of doing this change. We would have to go and do this for every single resource since most have something similar and then maintain it over time manually since none of this is automated today. This has been maintained mostly thanks to @nickdnk doing all that work.. @spaze Awesome, thanks for sharing that related project too!. Thanks for the quick and thorough work as usual @nickdnk!. @arkhalid1986 Usually, this is due to a bad PHP installation. Often it means that your version of PHP was built with a different version of curl and/or openssl and so it does not expect the setting we're trying to enable to switch to TLS 1.2.\nThe most common solution for this issue is to uninstall all three and reinstall the latest version cleanly. Otherwise there are some instructions on our readme that might help: https://github.com/stripe/stripe-php#ssl--tls-configuration-option. LGTM. @ob-stripe just found this PR, do you know what the next steps are on that one?. @EatonZ The fact that it only happens when retrieving a customer is strange but is likely just a coincidence. This error is quite specific here and indicates that your server can not resolve api.stripe.com which means that it's a DNS issue. This is really more of a transient connection issue due to something on your server or ISP I would say. Here, I would recommend contacting the support team of your host provider to ask for help debugging this as they would likely be able to monitor this on their end and figure out what could be causing this.\nI'm going to close this out as I don't think it could be a bug in the library itself, especially as you have been using this for a long time. If you get more details, I would recommend following up with our support team instead: https://support.stripe.com/email. @social-ink Do you have an example request id req_123 where this happened? My guess is that it's another request that is failing. Don't let the fatal error go through and instead catch all errors with a try catch so that you can dump the exception object: https://stripe.com/docs/api#errors. Unfortunately this does not contain the request id so it does not help. If you dump the entire exception, the req_XXXX should be in the output that you get. Otherwise, you likely should contact our support team for help as this is unlikely to be an issue with the library itself.. The issue is that you are passing the string customer with a space at the end so it's an invalid parameter. You simply need to fix your code to pass customer with no extra space! Sorry for missing this in your example earlier.. r? @tomer-stripe . stripe-mock has been updated and we're merging the dynamic libraries.\nr? @ob-stripe . \ud83d\udc4d from me!. @kimhemsoe Thanks for doing the work here! Would you be able to add it to the Invoice class too? Those properties were added at the same time so it'd be great to modify both!. This LGTM but re-assigning to @brandur-stripe to be safe as I'm not comfortable approving it for good.. @bert2002 This is the composer.json for our own library though which is different from your composer.json in your project. Like you need to add stripe-php as a requirement to the composer.json file for the project itself at the root of your own project.\nDo you have that file? If so, can you clarify what it contains?. r? @ob-stripe . This looks good to me but I try to not approve PRs to the core library if possible. Going to re-assign to brandur to be safe.. r? @brandur-stripe . @itmyprofession I just tried the same code which works without issue on my end with the latest version of stripe-php. Are you sure this is the line that is returning an error? Just to be sure, can you try the following example:\n```php\n$customers = \\Stripe\\Customer::all(\n  [],\n  [\n    \"api_key\" => \"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"\n  ]\n);\necho \"Got \" . count($customers->data) . \" customers!\";\n```\nThis uses our Test key and should output \"Got 10 customers!\". @ob-stripe I retried the tests numerous times to no avail. Looks like the hhvm builds are failing but I don't think it's related to my changes. Can you double check and if it's all good review and release?. @ob-stripe Fixed! PTAL. @GabotronES Sources don't have the name parameter. Instead, it lives under owner[name]. You can see an example here: https://jsfiddle.net/8t73suLp/\nI'm also closing this issue because it's a question about Elements and unrelated to stripe-php. Issues on this repo should be limited to bugs with our PHP library instead.\nIf you have a follow-up question, don't hesitate to reach out to our support team instead: https://support.stripe.com/contact?email=true. @shawnspaul This is not an issue with the library. This is due to the fact that you are retrieving a source (or a card) but passing an empty string as the id in the parameter. \nI'm going to close this out but don't hesitate to contact our support team if you have more questions here. r? @ob-stripe . @nickdnk I think it's fine to leave as it. There are a lot of properties/hashes that are not always set/present. \nI'm not sure what the alternative gives us since in the IDE it would still show each one separately right? I'm fine adding each one if you're up for it, but without the ones that are not public yet:\n* @property mixed $ach_credit_transfer\n * @property mixed $ach_debit\n * @property mixed $alipay\n * @property mixed $bancontact\n * @property mixed $card\n * @property mixed $card_present\n * @property mixed $eps\n * @property mixed $giropay\n * @property mixed $ideal\n * @property mixed $multibanco\n * @property mixed $p24\n * @property mixed $sepa_debit\n * @property mixed $sofort\n * @property mixed $three_d_secure\n * @property mixed $wechat\nAlso the thee_d_secure one is not an instance of TheeDSecure and card is not an instance of Card. Those are completely separate objects.. > I only added the explanation for clarity, since it's atypical for your objets to have a property that defines another existing property directly.\nSure but that would not be visible to any dev that doesn't go and read the header of the class right?\n\nHow is a card hash not an instance of Card? Can you explain? I was under the impression that the SDK always constructs the actual objects based on their object property (if it knows it and has a matching entity) property exactly for this reason.\n\nIt does, but you're misunderstanding how this resource works. Cards are the historical object and look like this:\n{\n  id: \"card_123\",\n  object: \"card\",\n  last4: \"4242\",\n  brand: \"Visa\",\n  fingerprint: \"RanDoM\"\n}\nThe Source object is an abstraction other multiple payment types. And for a Card Source it looks like this:\n{\n  id: \"src_123\",\n  object: \"source\",\n  type: \"card\",\n  card: {\n    last4: \"4242\",\n    brand: \"Visa\",\n    fingerprint: \"RanDoM\"\n  }\n}\nThe nested card hash is not an API resource. It's just a raw hash, nothing else. It doesn't have the object field. The resource is the Source.\n\nI'm well aware that the auto-complete in IDEs will always show all properties, but I think that's better than them saying \"this property does not exist\" because all of them are missing by design as of now.\n\nYou were worried that adding ach_credit_transfer was incorrect because it was sometimes null and would be confusing. That's all I was addressing. I'm fine adding all of them!. I would recommend keeping it alphabetized for now, I think it's cleaner and we can just update this if we hear feedback from devs that it's confusing.\nThere's a world in the future where stripe-php will be auto-generated and we can easily add comments for all the properties!. > And here I was hoping for a job as the official phpdoc maintainer \ud83d\ude04\nDon't worry that future is far away I thiiiiiink. Also you can always start helping us maintain stripe-go and stripe-dotnet :p\n. Thanks for all the hardwork as usual @nickdnk! Released as 6.30.3. @amanjaswalia This property is defined in Stripe.php here. Do you see this on your local installation? Would you be able to clarify how you're using the library and maybe providing a small test case to reproduce this issue?. @nickdnk Thanks a lot for providing so much details, this will definitely help us investigate a good solution.\nThe problem here is that as soon as you do that, changing the type of exception that can be returned becomes a breaking change. We had that problem with stripe-java and it is quite tricky to solve. We usually recommend that, in all cases, you always catch StripeException since most errors are likely to always be handled the same way.\nI'm going to tag as future and CC a few people to think through this.\ncc @ob-stripe @brandur-stripe @mickjermsurawong-stripe . r? @ob-stripe . @iamprasanth This is not an issue with the stripe-php library. Instead, it's a question about Checkout. I would recommend that you contact our support team: https://support.stripe.com/contact. @virgofx This is expected. A Person lives on an Account so you create one via the Account API instead. This is what is in the API docs too:\n\\Stripe\\Account::createPerson(\n  'acct_1032D82eZvKYlo2C',\n  [\n    'first_name' => 'Jane',\n    'last_name' => 'Diaz',\n  ]\n);. r? @ob-stripe . Minor comment but I'd recommend that you add the exact error message people might get on this page. This is helpful for someone looking for the exact error either on the page or via Google.\n. minor nit \"constants to not\" => \"constants do not\"\n. have we confirmed that calling this has a minimal impact? We've discussed this before in private but can't remember seeing clear results\n. We should use json-last-error() and/or json-last-error-msg() at least in our logs to help our users debug. Flagging here instead of in private to avoid merging until then.. so curl unknown or just unknown? I was assuming that if we parsed the header we'd expect to see a curl prefix.. a bit unrelated but can we fix that comment while we're at it?. Nice catch, just put tok_1234 instead!. You're not handling the error case here for example when the customer decides not to Connect or if something wrong happens. There would be no code in the URL but there would be an error parameter that should be handled.. this should be a line above. @ob-stripe Am I correct to remove this as it's mostly tested elsewhere? Wasn't sure we tested URL-encoding properly in the lib.. @ob-stripe Flagging that ApplicationFee::update() exists even though it's unsupported in the API. Likely want to remove from the code.. @ob-stripe This test (and the next one) don't test the returned value because... nothing is returned? Didn't seem to matter but I wanted to flag. this one doesn't test the class because stripe-mock currently returns a list of Account which is incorrect/impossible. Flagged internally. @ob-stripe  I had to create a new file because PHPUnit seems to require one class per file otherwise it just ignores the other ones.. @ob-stripe I removed those tests but I am worried that we're not testing this properly anymore. Should this live here or in a separate test that properly handles sub-fields/nested resources updates?. @ob-stripe Flagging that Source.php has the all method even though the API never supported it. Did not add a test since this should not exist in the first place I think. @ob-stripe Tried to catch the exception but got errors because expectException is not defined. Seems to be part of a different class than the one you inherit from for StripeMockCase. Didn't want to break everything so deferring to you. @ob-stripe  Flagging that we don't test owner updated anymore and might want to.. @ob-stripe I know that, but I am testing the real function and that function did not return a resource which seems like a bug in the library itself (or potentially stripe-mock). Not sure we need an assertion here to be honest and it does not really matter since everything is dynamic and any issue would come from stripe-mock or the API and not the library. Ah cool, I noticed this one but assumed it was unrelated. Fixed in https://github.com/stripe/stripe-php/pull/389/commits/9ff4172531127459320aef1945e69cdc5eec5d7f. While this works, this is IMO incorrect. stripe-mock does not handle discount in the first place and it's null mostly by luck no?. This works but it should not be necessary if the lib or stripe-mock did the right thing in the first place right?. nevermind this is stubbed hence why it did not do what I expected it to do. nevermind this is stubbed hence why it did not do what I expected it to do. nevermind this is stubbed hence why it did not do what I expected it to do. This lives under legal_entity on the Account object and legal_entity is not a real class/object in the SDK (nor the API). This means you can't define a custom getNestedUpdatableAttributes and make it work for some of those params. Would the plan be to \"leave\" it on StripeObject directly? If so, won't most people pushing PR just default to putting it here anyway? Seems hard to realize there are edge-cases when you do.. I worry that this will make it even harder to not miss edge-case. We already \"break\" the API often by forgetting to add those new API params to the whitelist. Now we need to add those but to potentially multiple objects now instead of just one canonical (though hidden) place in the library. I understand but it feels wrong/confusing.. Is it worth adding a scary blurb about how bad using this version (and 5.2) is?. Should we remove those methods explicitly in favor of $account->external_accounts->create() instead? This avoids the confusion and we would automatically return the right class based on the type of external accounts\n  . Where are we on the idea that we should remove those classes entirely since we don't support them anymore and have not for over a year? Since PHP is dynamic and would return an ApiResource anyway when you get one of those on a Charge for example, is it time to get rid of it at the same time?. s/bank account/card/. Minor but I spent 20 minutes on figuring out that I was missing this again. I wonder if we can/should use OBJECT_NAME instead.. I'm so glad to see this one go. we likely should add a comment about that one to be clearer/more discoverable in the future. OOC what is that file about? I don't remember seeing it before . using 1.* as we are still supporting PHP 5.4. hmmm looks like a bad copy paste, fixing. Fixed. I wonder if there will be some cases where some resources will not have an id and break this logic and we will regret this.. indentation on this kind of threw me off. This property should stay as it still exists: https://stripe.com/docs/api#account_bank_account_object-default_for_currency. The resource represents a Bank Account in the API. This is shared by Customers and Accounts (for External Accounts) since the resource itself has the same shape (except a small number of properties). You can confirm this in the instance_url method here which shows how we calculate the endpoint to use when accessing/updating a bank account. Can you remove this one? We're actively deprecating it.. can you leave that one? It's gated but supported.. Can you remove this empty line?. huh that is a weird one. I guess it does not hurt to leave as is on this one after all. Shouldn't we close the old handle before creating a new one? Your first if means that you can have it initialized and not cleaned up (for example with an exception on the previous request) right?. wrong comment. Why does this pass declineCode and all the others pass $code? I don't fully grasp what you are trying to do here to be honest.. OOC do we really need this?. Soooo I just realized we do a lot of magic in the library to find the parent id. And I worry a liiiiittle bit that this is not documented anywhere (internally at Stripe). And that one day we would rename this to subscription_schedule because it seems more consistent and then break half the libraries out there.\nI wonder if settling on parent for the name across all parent resources would be safer. Just food for thoughts. Weirdly this was not verified in Person.php. Should it?. This one should stay. The class is shared between bank accounts on Customers and bank accounts on Accounts and that property exists for the latter.. same as above. remove extra line. Remove that one if possible please, it's a beta event that will go away.. should be invoice.finalized. Please remove those two for now, they should not be public (fixing on our end too).. Please don't remove those. It'd be a breaking change. They will be released in the future.. please leave this one. A Person can be deleted and the returned resource would have deleted: true. ",
    "lukeholder": "Hi thanks for responding. I am integrating stripe with a content management system that uses the very popular twig template engine (http://twig.sensiolabs.org/)\nin twig I am getting plans for example with:\n{% set plans = craft.subsub.getPlans() %}\nwhich in effect is calling and returning the array of plans\n$plans = Stripe_Plan::all();\nreturn $plans['data'];\nSince the Plans returned in the array are objects and not arrays themselves, I am unable to do this in twig:\n{% for plan in plans %}\n  <tr>\n    {% for label, val in plan %}\n      <td scope=\"col\">\n      {{ val }}\n      </td>\n    {% endfor %}\n  <tr/>\n{% endfor %}\nBecause the plan in inside loop is not an array with key value pairs, it is an stripe object.\nso I am having to do this:\n```\n    $p = Stripe_Plan::all();\n    $plans = array();\n    foreach ( $p[\"data\"] as $plan ) {\n      $plans[] = $plan->__toArray();\n    }\nreturn $plans;\n\n```\nas you can see, I am having to use the __toArray(); \n. I suppose I dont care so much how to render it - table, ul, etc, I just cannot iterate over keys and values like a normal array from twig when it is an object.\nMaybe I am missing something?\n. YES! that looks awesome.\n. awesome thanks!\nOn Fri, Jul 26, 2013 at 1:51 PM, Evan Broder notifications@github.comwrote:\n\nHey, sorry for the delay on this. I've just pushed the changes to support\na keys() method on all Stripe_Object classes, and it should get rolled\ninto a release soon.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/stripe/stripe-php/issues/42#issuecomment-21602739\n.\n\n\nLuke Holder\n(+61) 0427 428 364\n. ",
    "curtisblackwell": "I'm in a similar situation (with a different CMS), where I want to return  everything in _values as an array for use in template tags. keys() doesn't work for me, because it just calls array_keys(), so none of the data makes it back. I've been using __toArray(true).\nIf I'm not supposed to use __toArray(), what am I supposed to use?\n. Cool, thanks. What's the harm in making __toArray() a permanent solution (from your end)?\n. Ah, thanks for taking the time to answer.\n. Probably a false positive. See #237.\n. This sounds like it may be better to ask someone who builds Drupal modules. Your problem isn't with Stripe, but with directory structure.\n. ",
    "jpiasetz": "The styles that I've seen in general use are: PSR2, Zend, and PEAR.\nI personally hate the multi-line function having it's ) { on a new line but I think they all call for it. I often just treat it like a code smell and refactor so I don't need it (extracting a class or an options array).\nI think it might be slightly better if Stripe switched to PSR-2. The  voting member list is fairly extensive.\n. No problem. I think it's important to measure twice cut once for public facing code too :thumbsup: . There isn't a huge benefit to switching to PSR-2 right now. If Stripe has plans to drop PHP 5.2 at some point I think it's worth it to switch (PSR-0 autoloading is sweet!). \n\nI'm OK with doing a style change if it means that we'll be more in line with what the PHP community expects)\n\nProbably most of the PHP code in the wild isn't use any style :frowning: so I think most people expect the worst when they open something.\n\nOne thing I wonder if we're making any style switches is if we can add something to the test suite to enforce the style guide, otherwise I suspect we'll deviate over time.\n\nI use a pre-commit hook with PHP_CodeSniffer to make sure I keep to a certain style. I think it could probably be added to travis. I'll see if I can send a push with it set to zend for now.\n. You're still support Ruby 1.8.7 right? Maybe when you end of life that do the same for PHP 5.2?\n. Okay it sounds like sticking with Zend is the best option then and ignore the ) on a new line rule.\n. I mucked up my rebase a bit so the commits might not be as atomic as they should be. I'll correct them if you spot any.\n. I rebased it back onto master :smile: . Might be good to get #47 at the same time to keep it all up to date?\n. Did I not catch them in eda7aa04?\n. Oh haha yes I see.  Good catch :thumbsup:  lowercasing / uppercasing that\nis my bain.\nOn Mar 8, 2014 3:07 PM, \"Michelle Bu\" notifications@github.com wrote:\n\nYou did! I was pointing out the minor discrepancy between planID v. planId\n.\n\nReply to this email directly or view it on GitHubhttps://github.com/stripe/stripe-php/pull/43#issuecomment-37108271\n.\n. I fixed the Id vs ID. How much do you care about history? Do you want me to squash it in?\n. It's existing behaviour (it's happening on other builds as well). The probably changed what they have on php5.2 since the travis config was update. They have this warning http://docs.travis-ci.com/user/languages/php/#PHP-installation I could just not do much on 5.2?\n. :+1:\n. @ebroder would it be better if this grabbed off GitHub instead of sourceforge?\n. Yea, everything that comes in through composer and packagist (testunit) has a repo behind it (https://github.com/vierbergenlars/simpletest). Do you want to reopen and I'll clean it up and rebase or should I send a new pull?\n. I added it into #47 \n. Done, not sure about how to update #47 I'll look into how to exclude a sniff.\n. I think it's a lesser of two evils. I wouldn't normally do it in case of a collision with another library however in this case it a curl constant that's missing. Alot of other people seem to have come up with the same solution https://github.com/search?l=php&q=CURLE_SSL_CACERT_BADFILE&ref=cmdform&type=Code.\n\nI meant to track down why PHP didn't have it / open a bug if there wasn't one when I first wrote this. \n. Yea probably. There is a lot of duplication in these functions would probably be good to refactor them further.\n. ",
    "jeremydhoon": "LGTM modulo the one comment (though there may be reasons I don't understand for which you'd want to use 'get_class').\n. Did you mean get_called_class() here?\nhttp://stackoverflow.com/questions/16515516/php-get-called-class-vs-get-classthis\n. ",
    "zenazn": "@jeremydhoon get_called_class() is 5.3 only.\nI pushed a change that allows us to pretend we have late static binding in PHP 5.2. In practical terms, it means that overriding static methods will Do The Right Thing, assuming the callsites use the helpers.\nThis means no $customMappings required!\n. LGTM! :ship: it!\n. ",
    "amfeng": "@zenazn cleaned up the commits a bit. I'm fine with this being merged in -- want to take a quick look to make sure I didn't screw anything up in the rebase?\n(btw I force-pushed so you should re-check out if you're planning to do any additional things to it). I'm happy to merge / bump version when you give the OK.\n. ",
    "LachyGroom": "Err, cc: @andyyoung \n. ",
    "rokjarc": "Take a look at this answer at SO: http://stackoverflow.com/a/16018566/653513\nAnd this one: http://stackoverflow.com/questions/17750143/stripe-error-handling-on-php\nAnd this one seems to be the most legit: http://www.larryullman.com/2013/01/30/handling-stripe-errors/\n...\n catch (Stripe_ApiConnectionError $e) {\n    // Network problem, perhaps try again.\n} catch (Stripe_InvalidRequestError $e) {\n    // You screwed up in your programming. Shouldn't happen!\n} catch (Stripe_ApiError $e) {\n    // Stripe's servers are down!\n} catch (Stripe_CardError $e) {\n    // Card was declined.\n}\n. ",
    "nathanielks": "Aha! I didn't have a try/catch block on my Customer create method, so when a card was declined, the creation would fail! Thanks!\n. ",
    "rcravens": "Here is content from the original request:\nI (and others) use the PHP API library to build WordPress plugins that leverage Stripe's payment gateway. The great thing about the WordPress community is that there are a log of independent developers building great plugins and themes. Sometimes this causes a bit of grief if we don't follow a few best practices. I have run into an issue with the PHP API library a few times now. The issue is that if it is loaded without checking if it is already present, then you can bring down the WordPress site. So for example, I load the library doing something like the following:\npublic function load_stripe_api_library() { \n    if( !class_exists( 'Stripe' ) ) { \n        require_once $this->paths->plugin() . '/stripe-php-1.8.0/lib/Stripe.php'; \n    } else { \n        //     Someone else loaded the library. This may cause issues. Better, \n        // log the location and version. \n        $reflection = new ReflectionClass( 'Stripe' ); \n        $version = Stripe::VERSION; \n        $this->logger->info( 'Found another instance of the Stripe class. version=' . $version . ' @ ' . $reflection->getFileName() ); \n    }\n}\nThis is a challenging environment because the probability of collision is increasing as more plugins appear. I have passed along this information to other developers as a way of making the WordPress experience for users better. It is really tough for me to get the word out and thought that I'd pass it along to you. I was thinking that two things from you would help:\n1. Provide an example similar to this of how to safely load the plugin in a shared environment. This would have a lot more reach that I can.\n2. Modify the main PHP API file to include an safe option for loading in a shared environment. Maybe surrounding the code in the Stripe.php file with the check for the class. This wouldn't impact any developers using the API in a stand-alone environment. They would even notice the extra check. However, for shared environments this would provide a better experience. The risk is that in a shared environment, a plugin may load an incompatible version. I would rather this risk be known up front and force devs like myself to check the loaded version for compatibility.\n. Here is some psuedo-code of how I would like to load the Stripe PHP bindings:\n```\n// I would load the stripe bindings from my local copy of the API.\nrequire_once path/to/my/local/version/of/the/api/Stripe.php\n// I would check the version to be sure I have the required version\nif( version_compare( Stripe::VERSION, \"a.b.c\") < 0 ) {\n    // not at the required version\n    $location = Stripe::LOCATION; // The location of the file that was loaded.\n}\n```\nObviously the Stripe.php file would need to check and see if another class has already been loaded before re-defining the class. This doesn't save anyone who is already doing this check much code. But, this protects the shared environment from fatal errors caused by users who are not doing the check.\n. ",
    "SlexAxton": "Read through this. Seems peaceful.\n. lg\n. Likely deserves a 1.9.0\n. ",
    "assertchris": "Alternatively; follow PSR-4 and omit underscores...\n. You must be joking, but in-case you're not...\nPHP 5.3 just reached end of life (http://php.net/archive/2013.php#id2013-07-11-1) and you want to continue supporting PHP 5.2? Have you seen your commit activity (https://github.com/stripe/stripe-php/graphs/commit-activity)?\nThere is nothing preventing your from feature-freezing a PHP 5.2-compatible branch and creating a new PHP 5.3+ branch which supports some variant of PSR loading. Because what you're deciding right now is that it's too much work and you'll happily snub the only mainstream PHP package manager in favour of people who are wilfully ignoring security fixes by running an 8-year-old version of PHP.\nHide behind that 7% all you like, you cannot expect to gain any meaningful traction with this package if you want to be this lazy.\nEDIT: This is of absolutely no benefit to me. I live in South Africa, so I can't even use Stripe. Just trying to push you out the way of the bus.\n. Fixed with this: https://github.com/stripe/stripe-php/pull/67\n. So over this PR. 6 Months to assimilate a simple change, that helps adoption?\n. ",
    "Paratron": "Uhm, why not simply namespaces?\n. ",
    "KorvinSzanto": "@Paratron, PHP <5.3 support.\n. I'll add a commit for a test case.\n. I don't remember the reasoning for composer.phar to .gitignore, I've reverted that change.\nThe other changes were done in testing, I should've caught that.\n. I'll update the code to follow the zend style guide sans the four space requirement, is there something specific you see that you'd like me to fix?\n. How did this happen? haha.\n. ",
    "lexx27": "I have the same problem here!\n. ",
    "what4893": "I'm having the same problem as well.\n. ",
    "BrianJM": "Same problem. I reported this to customer support, and ti has been escalated internally. For the time being, I downgraded to version 1.8.3 which resolved the problem.\n. ",
    "akuzemchak": "Same issue here.\n. ",
    "iteratelance": "I think that this might be due to the \"metadata\": null in some events. I have some json that doesn't not have this field and I do not receive this error.\n. ",
    "Woet": "The only one I know of is AWS:\nhttp://docs.aws.amazon.com/aws-sdk-php/guide/latest/installation.html#installing-via-phar\nIt's quite useful if you can't use composer on your environment (e.g. on shared hosting). :)\n. ",
    "BenMorel": "Any comments?\n. Hi guys, are you following your pull requests?\n. Hello?\n. That's great news, @michelle, thank you!\nCould you please merge this one first, and I'll open separate PR for the others?\n. @michelle Proper documentation is not clutter. All modern PHP libraries properly document their code with parameter types and return types, this is just standard practice. This is really important and I hope Stripe, as a payment gateway for developers, is aware of this!\nAs it stands, we're using more than 10 open-source libraries in our PHP application. Stripe is the only one that generates false positive inspection reports, and distracting our eye from real issues when developing, because the IDE is unable to determine the dynamic return types without explicit documentation from the library authors.\n. Great thank you, looking forward to it!\n. @michelle It does help, thanks! Now the IDE's type inference works fine.\nThere is still room for improvement with the dynamic properties using the __get() magic method, though, that could be explicitly documented on the class itself, for example:\n/**\n * @property bool $paid\n * @property bool $captured\n * @property bool $refunded\n * ...\n */\nclass Stripe_Charge\nThis allows the IDE's inspection features to properly understand the properties as if they were actual Stripe_Charge class properties, and avoid warnings.\nMore information about @property can be found here.\nShould I open a new issue for this feature request?\n. Note: @property-read would maybe be even more appropriate.\n. @bkrausz Unfortunately no, finding the documentation on the Stripe website is not the problem, but having the IDE autocomplete the fields and detect mistakes in code inspection is.\nAFAIK the Stripe website always documents the latest API version, so I personally have no problem with mirroring the fields documented on the website with the @property annotations in the source code.\ni.e., the source code would always document the current version of the API.\n. Any update on this issue? Stripe is cluttering my static code inspections with false positives regarding undefined properties. This is really an annoying issue for anyone using an IDE, that is, almost everyone.\n. @bkrausz Thanks for your response!\nI'm using the PHPStorm IDE, which does understand the presence of __get() and weakens the inspection report level to a simple warning: \"Field accessed via magic method\".\nBut although it can understand that the field may exist, it can not know if the field does exist, and will not be able to detect an invalid field name.\nIMHO, it would be best to have the source code always have @property matching the latest version of the API. Yes, someone using an older version could have incorrect hinting, but this may be a good sign that they just need to upgrade their code to the latest API version, which is best practice anyway?\n. Another approach would be to subclass every class of the SDK for every API version released:\n/**\n * @property-read bool $paid\n * @property-read bool $captured\n * @property-read bool $refunded\n * ...\n */\nclass Stripe_Charge_2013_10_29 extends Stripe_Charge {\n    // Empty class, just adds proper documentation.\n}\nThis way, every version if properly documented with all available properties.\nA bit cumbersome if you ask me, but that would solve my problem and yours.\n. Thanks for the reply, @bkrausz.\nI could of course disable the inspection, but I usually leave it on for my projects, and as a general rule I don't like to disable an inspection for the whole project because of a single 3rd-party library.\nI understand your point about a single version of the SDK that can work with many versions of the API, but I suggest you keep in mind the second suggestion I've made, that is, creating a subclass for every released API version!\n. ",
    "rajasajidmanzoor": "@bkrausz Friend i checked and tried every where. Your documentation is quite complex, confusing and also don't have clear instructions on how to setup stripe API using composer or without composer. On stripe official documentation stripe has just mentioned that download Library and install using composer.\nPlease tell how can i install API on hosting using composer or without composer.\nAlso resources available over internet are not enough for a newbie to integrate library..\n. Thank you for sharing instructions on how to install using composer. but check my response at here first https://github.com/stripe/stripe-php/commit/dcda24ac83195feaa8ed653a3a8e5b8a8fb755d5\nI don't like this shitty Composer. I have tried this earlier for installing laravel and other frameworks but most of times it causes a lot of headache. \n. @bkrausz  Ok i have changed stripe_charge  to \\stripe\\charge but now i have following errors..\nFatal error: Uncaught exception 'Stripe\\Error\\InvalidRequest' with message 'Must provide source or customer.' in /public_html/projects/armorax/vendors/stripe/lib/ApiRequestor.php:144 Stack trace: #0 /public_html/projects/armorax/vendors/stripe/lib/ApiRequestor.php(256): Stripe\\ApiRequestor->handleApiError('{\\n \"error\": {\\n...', 400, Array) #1 /public_html/projects/armorax/vendors/stripe/lib/ApiRequestor.php(107): Stripe\\ApiRequestor->_interpretResponse('{\\n \"error\": {\\n...', 400) #2 /hpublic_html/projects/armorax/vendors/stripe/lib/ApiResource.php(105): Stripe\\ApiRequestor->request('post', '/v1/charges', Array, Array) #3 /public_html/projects/armorax/vendors/stripe/lib/ApiResource.php(137): Stripe\\ApiResource::_staticRequest('post', '/v1/charges', Array, NULL) #4 public_html/projects/armorax/vendors/stripe/lib/Charge.php(37): Stripe\\ApiResource::_create(Array, NULL) #5 //public_html/projects/armorax/view_order.php(61): Strip in /public_html/projects/armorax/vendors/stripe/lib/ApiRequestor.php on line 144\n. @browner12 Friend thank you for suggestions,\nBut My stackOverflow account has been blocked due any reasons since last year.\n@matthewarkin  Thank you for sharing this\n. @bkrausz  i was at IRC but did not get  any help.\nYou can check my code here and tell me where i am doing wrong. A guy at IRC said that i am not creating Token. and you also said this thing to me yesterday.. Please tell me how can i create token in PHP?\nWaiting for reply\nSajid\n. @bkrausz  you can check my code here at \nhttps://gist.github.com/sajiddesigner/59f7a0502fab3913ef0f\nThis is an open gist and you can go and check there..\n. ",
    "adamlc": "@chrispitt  and @michelle I wouldn't recommend telling the user to use dev-master either as it might include breaking changes. Use something like ~1\n. ",
    "ChrisFrench": "nevermind, I was passing the entire token, and not just the id of the token. for anyone else  working late at night wondering why it isn't working the part you want is like  tok_1L86O9LpqagVWi\n. @tnylea cool! Glad sometimes it is the simple things that trip  us all up\n. ",
    "tnylea": "@ChrisFrench You just saved me a butt load of time! Thanks man. I'm up kind of late working on a project and ran into the same thing as you. Thanks for posting your solution here :+1: \n. ",
    "ab": "Looks plausible, but it will break anyone using curl compiled against NSS (i.e. Fedora).\n. As mentioned before, this will break anyone using curl compiled against NSS rather than OpenSSL, so we can't use as is.\n. I don't know much about php-curl except that it can be compiled against several different SSL libraries, each of which have incompatible ways to specify things like cipher suites. There may be a way to detect what library it's linked against, in which case you could pass the appropriate config for each of NSS, OpenSSL, (maybe even SecureTransport, not sure if php-curl on OS X uses it these days). I'd have to research the appropriate syntax, since I only know a tiny bit about setting cipher suites for NSS.\nHonestly I'm not sure this is worth spending all that much time on since we control the cipher list on the server side, and we're not talking to arbitrary servers.\n. Pro tip: pull from master before working on your branch.\n. ",
    "jimdanz": "r:? @michelle \n. Thx for review!  (Will hold off on merging until go-live)\n. Thanks.  In any case it could break such people but only if they upgrade their stripe-php dependency, so I feel OK about that.\n. :+1: \n. ",
    "acabal": "After looking more closely at the code it looks like we can work around the notice by using a method exposed by Stripe_Object:\n$customer = Stripe_Customer::retrieve('cus_abc123');  //this customer has NOT been deleted\nif($customer->offsetExists('deleted')){\n    /* do something */\n}\nHowever this is not obvious nor very clean OOP.\n. I'd argue that's not good OO design; I shouldn\u2019t have to check whether or not each property I'm testing for exists before I test it.\nRather, I think it makes more sense that if the customer is not deleted, then $customer->deleted is boolean false, rather than sometimes existing and sometimes not existing, and who knows until they check.  That's breaking the OO contract.\nAfter all, if $customer->deleted only exists sometimes, then how can I know if any other random property in this object exists or not?  I'd have to use property_exists() every time I test a property, and that's kind of silly.  I know the raw Stripe API functions like this, but part of the reason for using an OO wrapper is to put some OO sugar on quirks like that.\n. OK, if it's not going to change in this version then property_exists() is fine.  Hopefully a future version will wrap this more nicely.\n. ",
    "mr-mmmmore": "I have encountered the same problem and don't understand why the issue was closed with no solution added to the Stripe lib. We can use property_exists or $customer->offsetExists, but these are only fixes to a unexpected behavior.\nI find there is something wrong about this deleted property: it looks as if it was an undocumented property. It is not listed in the Customer object in the API reference, it causes error when referenced and not set...\nBut it is still a documented property, it appears in the doc, so it should be fully supported:\n\nit should be listed in the doc in the customer object properties,\nit should have a default value of false in the object and shouldn't cause notices.. OK it's a lot better than using property_exists, thanks @ob-stripe!. \n",
    "ob-stripe": "Hi @mr-mmmmore, and thanks for the feedback.\nWhat you describe is actually expected (if unintuitive) behavior: Stripe's API only returns \"deleted\": true for deleted resources, but it does not return a \"deleted\" attribute at all for non-deleted resources. At this time, Stripe's PHP library dynamically populates attributes from API responses, so if the API response does not include a \"deleted\" attribute then the PHP object will in turn not have a deleted property.\nThat said, I agree that using property_exists() is ugly and undesirable. I've opened a PR that adds a isDeleted() method that is always available: https://github.com/stripe/stripe-php/pull/502.. The PR was merged and released in version 6.13.0. You can now call isDeleted() on any Stripe object instance, and it will return the value of the deleted attribute if the object has this attribute, or false otherwise.. > Having to call setApiKey before every call is not ideal.\n@Petah This doesn't solve everything, but note that you can set the API key on a per-request basis by passing an \"api_key\" entry in the $opts array, e.g.:\nphp\n$charge = \\Stripe\\Charge::retrieve(\"ch_...\", array(\"api_key\" => \"sk_...\"));. @tapouillo With the latest stripe-php versions (4.0 or more recent), you can pass the CURL_SSLVERSION_TLSv1_2 option by doing this:\nphp\n$curl = new \\Stripe\\HttpClient\\CurlClient(array(CURLOPT_SSLVERSION => CURL_SSLVERSION_TLSv1_2));\n\\Stripe\\ApiRequestor::setHttpClient($curl);\nbefore sending any requests to Stripe's API (cf. README).\nMore generally, with older RHEL/CentOS systems, we advise upgrading the entire OS if possible, or updating curl with a more recent SSL library (e.g. OpenSSL >= 1.0.0).\n. Hi @bswscube. Stripe now requires that all requests to our API use TLS 1.2 or later. You can read more about this here: https://stripe.com/blog/upgrading-tls.\nAs this is a problem with your own server and not a bug with the PHP library, I'm going to close the issue. You should reach out to Stripe support using the form at https://support.stripe.com/email to receive help about this issue, but in a nutshell, you'll likely need to upgrade the software packages for PHP, curl and OpenSSL on your server.\n. Hi @bswscube, this is also a problem with your Stripe integration and not a bug with the PHP library. You need to reach out to support directly at https://support.stripe.com/email, as issues in this GitHub repository are only for bugs or feature requests with Stripe's PHP library. Thanks for your understanding.\n. @robertotremonti Thanks for the PR, but we'll have to decline it. We've actually went back and forth on this issue, as we previously did exactly what you suggested, but it ended up having the opposite of the intended effect on some systems.\nWe eventually decided to do what the PHP docs recommend and not set the CURLOPT_SSLVERSION at all, which should result in the highest available TLS version being used on most systems, and provide a way for users on those (rare) systems where that's not the case to pass the options themselves (cf. README).\nFor more information, see the following PRs: #216, #277, #299 and their related issues.. Failed tests are caused by https://github.com/stripe-internal/pay-server/pull/44323 and unrelated to the PR. The test suite needs to be updated separately.\n. @brandur-stripe Mind releasing a new version for this?. @smottt Nice catch, thanks!. @brandur-stripe Mind releasing a version?. Hi @strgg. These errors are not caused by the usage of list() in PHP 7.\nWhen the API returns an error, the PHP library translates these errors as exceptions. It is up to you to catch these exceptions and handle them appropriately. For more information, please refer to the following paragraphs of the API reference:\n- Errors\n- Handling errors\nIn the case of the first error you mentioned, you provided a valid number (some card numbers can have 18 digits) that is not a test number, so the API correctly returned a card_error with the following message: \"Your card was declined. Your request was in test mode, but used a non test card. For a list of valid test cards, visit: https://stripe.com/docs/testing.\"\nIn the case of the second error, it was not caused by the expiry year having 4 digits (as the API accepts both 2 and 4 digits numbers for the expiry year), but rather because you passed 0 for the amount parameter of your charge creation request.\nAs this is not an issue with the PHP library, I'm going to close the issue. If you need more help using Stripe's API, please reach out to support at https://support.stripe.com/email.\n. If an error is returned by the API, the list($response, $opts->apiKey) = $requestor->request(...) assignment is never executed because an exception is raised inside $requestor->request(...), before any values are returned.\nThis is by design: the handleApiError() method is called when the API returns an error, and explicitly raises an exception.\nI have also tested your examples with PHP 7.0.15 and observed the expected behavior: a \\Stripe\\Error\\Exception of the appropriate subclass is raised (i.e. what you described in your first post).\nLooking at the code of the request() method, I don't see how it would be possible for the method to not raise an exception and return a null value in the first element of the returned array. Could you provide code for reproducing this case?. Superseded by #350, closing this one.\n. Hi @leeprince. Github issues are only for bugs or feature requests for our PHP library. If you need help using the library, please reach out to support at https://support.stripe.com/email or support@stripe.com.\nAdditionally, you should never publicly share secret API keys. I've edited the title of the issue to redact your key, but I recommend you roll out a new secret test key anyway. You can do so from your dashboard: https://dashboard.stripe.com/account/apikeys, by clicking on the \"recycle\" icon next to the key you want to replace.\n. Aw, that's my bad.\nThat said, it makes little sense to send info about curl to the API if the client doesn't actually use curl (in the event that curl is installed but a non-curl client is used).\nThe values for httplib and ssllib should instead be provided by the client, but that would probably require modifying the interface :(\nFor reference, this is how we do it in the Python library: https://github.com/stripe/stripe-python/blob/1bd8383c68476336722f096d25212a2ea17242a0/stripe/api_requestor.py#L225. Maybe the clients could provide $httplib + $ssllib public variables, and then ApiRequestor would check for these via property_exists()?\nThis way, if the variables don't exist (as will most likely be the case in custom clients), we would simple omit the httplib + ssllib entries in the X-Stripe-Client-User-Agent hash.\n. @remi-stripe I think this is happening because there is no require statement for Payout.php in init.php.. Hi @B-Poignant. This is expected behavior -- the data-amount and data-currency parameters that are provided to Checkout are used for display purposes only. You can also not provide those parameters at all (e.g. if you're collecting card information to update a customer's saved card and are not going to immediately charge anything).\nIt is every merchant's responsibility to display the correct amount and currency that will actually be charged, otherwise they risk exposing themselves to chargebacks and disputes from their customers (which could in turn lead to Stripe closing the account if the chargeback rate is too high).\nI'm going to close the issue as this is not a bug with Stripe's PHP library, but please feel free to reach out to Stripe's support at https://support.stripe.com/email if you have more questions or concerns about this.\n. Tests are failing because of an unrelated Travis issue with HHVM -- I'll tackle separately.\n. Rebased on master -- tests are passing now.. That's what I initially tried to do, but unfortunately, PHP 5.3 is no longer supported on Trusty :( (cf. this issue)\nBasically, we have to use Precise for 5.3, Trusty for HHVM, and either for all other versions. Since Trusty support is still in beta for Travis, I opted to use it only for HHVM.\n. Closing this one since we ported the tests to stripe-mock in #389.\n. @brandur-stripe I think so. Since the implementation is so close to the Ruby & Python ones, I don't expect any bad surprises. I also wrote a basic but complete example to test the entire OAuth flow (redirect to the OAuth form, use the authorization code to connect the account, then disconnect the account) and it worked fine.\n. Hi @vmr007, this isn't an issue with the PHP library. Please reach out to Stripe support directly at https://support.stripe.com/email to ask about this.\n. @Grafikart The problem is that sources are first-order API resources, while cards & bank accounts are not (i.e. you can retrieve the former with just their ID, while you need to retrieve the latter through the customer object to which they are attached). This is how the API itself is designed and is not something that can be fixed in the client libraries.\nIf you are really dead-set on skipping the customer retrieval request, I'd suggest something similar to what @evan-stripe said. This should let you retrieve an existing card:\nphp\n$card = \\Stripe\\Card::constructFrom(array(\n  'id' => 'card_...',\n  'customer' => 'cus_...'\n), array());\n$card->refresh();\nYou can also create a new card like this:\nphp\n$customerId = \"cus_...\";\n$url = \"/v1/customers/$customerId/sources\";\n$sources = \\Stripe\\Collection::constructFrom(array(\"url\" => $url), array());\n$card = $sources->create(array(\"source\" => \"tok_visa\"));\nIt's definitely a bit hackish and relies on internal methods that might change without warnings though.\nI suppose we could add some static methods on customer objects so you could do something like this:\nphp\n$card = \\Stripe\\Customer::retrieveCard(\"cus_...\", \"card_...\");\nor:\nphp\n$card = \\Stripe\\Customer::createCard(\"cus_...\", array(\"source\" => \"tok_visa\"));\nWe'd need to add new static methods for every CRUD request for second-order sources. It's definitely doable but given that it's a fairly rare use-case I'm not sure it's worth the trouble.\n. @webprogrammierer You need to get in touch with Stripe's support using the form at https://support.stripe.com/email.. No. That module is not developed or maintained by Stripe itself. You will need to get in touch with the module's authors/maintainers directly.\n. Hey @pdoreau. I tried to reproduce this on my end, but the only way I can do so is by setting the \"id\" attribute to an empty string, like this:\njson\n\"request\": {\n  \"id\": \"\",\n  \"idempotency_key\": null\n}\nIf \"id\" is set to null, then the event object construction succeeds and returns the expected result.\nIn practice, the API should never send an empty string for this attribute (it will either be null or a non-empty string\"req_...\").\nCan you provide a full example to reproduce the problem? For reference, here is the code I used: https://gist.github.com/ob-stripe/4502ca2b8edf52e1d7b93d792fbd8e75. Hi @icemanblas. The stripe_account parameter is used by Connect platforms to issue requests on behalf of other accounts (cf. here). If you want to charge a paying customer, you should pass the customer ID (\"cus_...\") in the customer parameter instead.\nAs this does not seem to be a bug with the PHP library, I'm closing the issue here. You can reach out to support at https://support.stripe.com/email if you need more help with this.\n. I broke a few things after rebasing, but tests should be passing now!. Done, ptal @brandur-stripe . Oops! Should be fixed now.. > Why is closeDispute() returning the Charge and updateDispute() returning the Dispute? That's one of those \"the tests don't work, so I fix the tests, but I don't get it\" kind of moment.\nThese methods mirror what the API does: /v1/charges/ch_.../dispute returns a dispute object while /v1/charges/ch_.../dispute returns a charge object.\n\n@ob-stripe Flagging this one as it's in the middle of the tests revamp but is potentially a breaking change. Should I open a separate PR for this? Or add tests with StripeObject for now on ApplicationFeeTest and we correct later?\n\nI'd say open a separate PR, and leave the tests for now, we can update them once the other PR is merged in and we rebase this one.\n\nI think the constant was the wrong approach and I should have used a class constant instead though it's more verbose.\n\nAh yeah, agreed.\n\nbut in other libs we took the approach that you could do something like\n$refund = ApplicationFeeRefund::retrieve('fee_123', 'feeref_123');\n\nThat doesn't seem to the case in Ruby, Python or Java AFAICT.\n. I think I've addressed all your comments for now, but let me know if I missed anything!\n. Remi helped a ton too :)\nI think this one is ready for review -- I removed the WIP tag.. I pushed another commit to fix the typos you noticed. Let me know if you'd like me to squash the commits before merging.\nAnd yeah, on my laptop the entire test suite now runs under 1 second! Huge improvement over the O(minutes) it took before :). > Hm, I guess I have a slight preference for a squash here given that the current set of commits is a little unruly, but it doesn't make too much of a difference. Another possibility might be to try and rewrite the commit history into one that's still multiple commits, but shows a clean and clear progression (but it may not be worth the effort).\nYeah, I should have been more rigorous and done this as I worked on the PR. At this point, rewriting the history into multiple logical commits seems like more of a hassle than it's worth, so I just squashed into a single commit. Sorry @remi-stripe for stealing your work :)\n. @brandur-stripe I think this PR is ready to be merged unless you have any other comments?\n. Wooooo \\o/\n. > Why didn't this properly work for ApplicationFee in that case? See my related commit 64e909b which had to fix this to ensure we did get an ApplicationFee instance instead of StripeObject\nRight, so the test that failed is testIsListable. The all() method does rely on Util::convertToStringObject() to instantiate list elements as the proper resource class.\nBefore the fix, objects would be returned as StripeObjects. You were still able to access any attribute, e.g. this worked:\nphp\n$fees = \\Stripe\\ApplicationFee::all();\n$fee = $fees->data[0];\n$amount = $fee->amount;\nHowever, you would not be able to use ApplicationFee methods, e.g. this would have failed:\nphp\n$fee->metadata[\"key\"] = \"value\";\n$fee->save();\nbecause $fee was a StripeObject and not an ApplicationFee.\n. Hi @pdoreau! At the moment, stripe-php does not have such a feature. It would certainly be nice to have though! I'll tag this issue as future for now.\n. @brandur-stripe Can you take a look at this and share your thoughts?\n. So I swore I posted an update on this issue, but it apparently got lost during last week's madness.\nMy approach does not work as well as I had hoped. What I said here is incorrect:\n\nThe attributes defined here don't have to be top-level attributes in a given object, they can themselves be nested under other attributes (else the current code would not work either). So my intent was to move all of the identity verification attributes under Account, but as said above we can also keep the attributes in StripeObject by default and only override the global whitelist when needed.\n\nThis only works for top-level attributes. E.g. for Account, this would work for legal_entity but not for additional_owners and the 0, 1, etc. indexes. This is because the legal_entity hash will be cast as an AttachedObject, and its own nested attributes will then use AttachedObject's whitelist rather than Account's.\nWe could merge the PR as-is in order to fix the card issue, but I'm not too enthusiastic about it. I'm going to try rewriting the deserialization logic to see if we can get rid of the whitelist altogether.. Closing this one in favor of #404.\n. Hi @ruudk. This is a known issue described here. We have a fix pending in #396 but it's turning out to be slightly more complex than anticipated.\nWe're still going to fix this, but OOC, why do you need the card property to be a card object?. Since this is a breaking change, I've updated the base branch to be integration-v6 so that we can solve potential conflicts once #410 is merged in.. I rebased the branch on integration-v6 and set that as the merge target.. @brandur-stripe I've squashed the existing commits and added a new one. As part of the changes to the serialization logic, Collection no longer derives from ApiResource but rather from StripeObject. This is necessary so serializeParamsValue works as expected, and is similar to stripe-ruby (https://github.com/stripe/stripe-ruby/blob/master/lib/stripe/list_object.rb#L2).\nI initially duplicated the _request and _staticRequest methods, but now that we can use traits, this is no longer necessary.\nCan you take a look at the latest commit? Thanks :)\n. Hi @twoixter, thanks for this report. We've held off dropping support for PHP 5.3 and other post-EOL versions because a non-negligible part of Stripe users are still using those versions.\nThat said, I agree it's time we reconsider this position, at least for 5.3. We will discuss this internally once the new year break is over, but I'm leaving the issue open so that anyone can contribute to the discussion -- data points such as the AspectMock compatibility issue you mentioned are very valuable to us and will help us make an informed decision.\n. Thanks for the report and the PR!\n. lgtm! Thanks @hollodotme.\n. @arcanedev-maroc Yep, that's on my TODO list too! :). Yeah, this is something that crossed my mind as well. Unfortunately PHP does not have a syntax to ensure that a trait is only applied to instances of a certain class, so the only way to enforce this would be to check at runtime.\nI will add some PHPDoc to each trait to explicitly flag that these traits can and should only be applied to classes that derive from ApiResource.. r? @brandur-stripe \ncc @stripe/api-libraries \nAlright, I think we're ready to release all these updates! \\o/\nYou've already reviewed each PR individually, so maybe just take a quick look to make sure we've not missed anything.\n. @abhinavek The issue is that the SSL library used by the curl module of your PHP environment (NSS/3.28.4) does not enable TLS 1.2 by default. I'm not sure why that's the case, as it's a recent version -- it might be something specific to your environment.\nYou can use the solution described here to force the use of TLS 1.2:\nphp\n$curl = new \\Stripe\\HttpClient\\CurlClient([CURLOPT_SSLVERSION => CURL_SSLVERSION_TLSv1_2]);\n\\Stripe\\ApiRequestor::setHttpClient($curl);\nThis is not something that we can enable automatically in the library as it would cause issues in other environments.\nIdeally, you should upgrade your environment so that the curl module uses an up-to-date SSL library that always defaults to TLS 1.2. If you are using CentOS or Red Hat, some users have reported success by running the following commands as root:\n```\nrpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/l/libnghttp2-1.6.0-1.el6.1.i686.rpm\nrpm -Uvh https://mirror.city-fan.org/ftp/contrib/yum-repo/city-fan.org-release-1-13.rhel6.noarch.rpm\nyum -y install libcurl\napachectl restart\n```\nThis should upgrade the curl module to a version that's linked against a recent OpenSSL version (rather than NSS), which should always default to TLS 1.2. Use these commands at your own risk -- I recommend consulting with your network administrator and/or hosting provider first to see if there is a better way of ensuring your system uses TLS 1.2.\n. @abhinavek It sounds like libnghttp2 is already installed in your environment so you might be able to skip the first command. Though again, I recommend consulting with your administrator or hosting provider to receive more help here -- this is more of a CentOS issue than it is a Stripe one.\n. Okay, since the consensus seems to be in favor, I'm going to pull this in the integration branch for v6.. Argh. Looks like AspectMock (or rather, the Go! AOP framework dependency) does not support HHVM: https://github.com/goaop/framework/issues/143#issuecomment-306840301.\n. > The other alternative is that instead of trying to improve our testing, we could start refactoring in the direction of non-static methods. This would be a little too much API churn probably, but if we were starting from zero, it'd probably be the superior design.\nDefinitely agreed, though it will very likely require some breaking changes. (Though if we ever are to tackle #124, there's probably no way around it anyway.)\nAnyway, closing for now. As much as I'd have liked to use AspectMock for testing some new features, I'll manage without it.. Hi @teamayu. You created a token using the test card 4000 0000 0000 3063 which requires 3D Secure (cf. https://stripe.com/docs/sources/three-d-secure#3ds-cards), then tried to create a charge directly using the token, without going through the 3DS redirect flow. It is expected that the charge would be declined in this case.\nYou need to implement the 3DS payment flow as explained in the documentation: https://stripe.com/docs/sources/three-d-secure.\nAs this is not an issue with the PHP library, I'm closing this issue. If you have further questions, please reach out to support at https://support.stripe.com/email.. Our libraries use each language's most idiomatic way of raising API errors. For PHP, that means we raise exceptions. You can read more about this in our API reference: https://stripe.com/docs/api/php#error_handling. > What do you think about adding a basic section to the README describing how to run the new script?\n\ud83d\udc4d  Pushed a new commit to update the README.\n\n(Also, a couple of the builds in the matrix failed with what looks like a problem fetching dependencies. I restarted a bunch of them.)\n\nYeah, packagist.org has been acting up a lot these past few days.. Alright, let's go for it. Thanks @brandur-stripe !. @EatonZ Interesting! I didn't know about those php.ini settings.\nI think we should still use the vendored CA bundle by default though, as we know it to be compatible with Stripe's API.\nWe could add a helper method to make it slightly easier to use the CA bundle specified in php.ini settings, but it's fairly trivial to do anyway so I don't think that would provide much value.. @tobiastom I don't have much experience with Phar archives. The CA bundle is not used by PHP itself, but rather by libcurl (via PHP's mod_curl), so I'm not sure that a Phar \"URL\" like phar://stripe-php.phar/data/ca-certificates.crt would work at all.\nDo you have any suggestions or recommendations for how this should be handled?. Hi @LinuxUser3. build.php is not supposed to be called from a web request but rather be run from the command line. Likewise, the test files should also not be called from web requests -- tests should be run either by running build.php or by calling the PHPUnit binary directly.\nYou can find instructions for running the test suite in the README file:\n- https://github.com/stripe/stripe-php#development to install dependencies (including PHPUnit)\n- https://github.com/stripe/stripe-php#tests to install the stripe-mock stub server and run the test suite\nNote that the test suite is meant to ensure that the PHP library works as expected. End users of the library such as yourself usually don't need to worry about tests. If you're simply looking for examples of how to use Stripe's PHP library, I'd recommend looking at the samples on Stripe's site, e.g. in the API reference [1] or in the rest of the documentation [2].\n[1] https://stripe.com/docs/api/php#intro\n[2] https://stripe.com/docs\n. @LinuxUser3 Can you share the existing contents of your composer.json file?\n. That's Stripe's own composer.json file.\nYou should not run the composer require ... command inside the library's folder. More importantly, you do not need to download the library yourself if you're using Composer! Composer will take care of downloading and managing dependencies for you: https://getcomposer.org/.\nNote that using Composer is by no means a requirement. You can also download the library manually like you did, then simply require the library's init.php file from your code.\nFor more information, please refer to the README file:\n- https://github.com/stripe/stripe-php#composer\n- https://github.com/stripe/stripe-php#manual-installation\n. I've already answered your questions:\n\nNote that using Composer is by no means a requirement.\nFor more information, please refer to the README file:\nhttps://github.com/stripe/stripe-php#manual-installation\n\nYou'd only need to require the vendor/autoload.php file if you're using Composer. If you're not using Composer, then you should require the init.php file in the library's root folder.\nAlso, please note that this is not a support channel. GitHub issues are specifically for bugs or feature requests regarding the PHP library. If you have further questions about how to use the library in your specific environment, please write to Stripe's support at https://support.stripe.com/email.\n. @nickdnk I just released v5.9.1 -- it should be available via Composer / Packagist soon.\n. You're welcome, thanks for the contribution! :). ptal @brandur-stripe . @dylantrooien This is the same issue that @remi-stripe explained above: in your code, $Source is an instance of \\Stripe\\Card, not \\Stripe\\Source. delete() is not deprecated on \\Stripe\\Card.. LGTM. Thanks @codyatschool!. Hi @rs-sliske, thanks for the report and sorry about this issue! I've prepared a fix in #435 and we will release an updated version of the library shortly.\n. Fixed in 6.1.0.\n. @pascaldevink For reference, we use semantic versioning, which means that we bump the major version when backwards incompatible changes are introduced. So the fact that we went from 5.9.2 to 6.0.0 was itself indicative of BC breaks.\nThat said I agree that the changelog could/should be more descriptive in these instances. I'll update the changelog. Sorry for the trouble!\n. Made the updates, ptal @brandur-stripe . I like the idea of having constants defined in the library! Just a suggestion: do you think it would make sense to wrap all the constants in their own class/namespace, to clarify that all those constants represent event types?\n. @nickdnk Do you mind opening a separate PR for the PHPDocs stuff? It's better if each PR only covers one self-contained set of changes.. You'd need to create a new branch for the second PR, then use the cherry-pick command to pick the commit into the new branch. Something like this should work:\nsh\ngit checkout master\ngit checkout -b fix-phpdoc\ngit cherry-pick c93ac5c\nOnce you've picked the commit, you can push the new branch and open another PR.\nAfterwards, you can go back to the add_event_constants branch, reset to the previous commit and force-push to update the PR:\ngit checkout add_event_constants\ngit reset --hard HEAD~1\ngit push origin HEAD --force\nBeware that this will delete the commit, so don't do this until you're sure the commit has successfully been picked in the other branch.\n. Awesome :) Can I bother you to rebase this PR to squash the 2 commits into one?. Sorry for the delay @nickdnk -- just released this in stripe-php 6.3.1. Thanks for the contribution :)\n. Thanks for the contribution @nickdnk!\n\n\nI like the constants with the resource names! However, could you rename the constants to OBJECT_NAME? This would be consistent with our other libraries (e.g. stripe-ruby), is more explicit, and might help with some syntax highlighters (GitHub seems to think that OBJECT is a reserved keyword)\n\n\nI'm not thrilled about importing the exceptions as global names with use just to satisfy the PHPDoc declarations. I would rather not import the exceptions and use the absolute paths with PHPDoc (e.g. @throws \\Stripe\\Error\\Api)\n\n\n(Also, for future reference, these two changes don't seem too related and so should have been submitted in different PRs.). Hi @nickdnk, sorry I dropped the ball here! Totally my bad.\n\nThe one piece that scares me a little bit is that there's so many places where we explicitly list every possible exception as a @throws.\n\nYeah, I feel the same. We're backpedaling on that approach in stripe-java, so I'd rather avoid introducing this here. @nickdnk, what do you think of replacing the multiple @throws statements with just @throws Stripe\\Error\\Base?\n. This should be fixed as of 6.17.1 (#517).\n. Thanks for the contribution! This looks safe to me, but I'd prefer a second opinion.\nr? @brandur-stripe \n. @lushc Wonderful! I'm very much +1 to having the same behavior for automatic retries in all our client libraries.\nReally sorry that we forgot about this PR btw \ud83d\ude1e We'll try not to let that happen again once you update it (but feel free to ping me if we do!).. > Also, was there consensus on whether it was safe to retry rate-limited requests using idempotency keys?\nI think the consensus is that this is safe because automatic retries use an exponential backoff (otherwise the retries would risk compounding the rate limiting issue). @brandur-stripe, do you confirm?. Okay, I'm going to close this one. We'll update the implementation to be consistent with stripe-node's and retry on 503's and non-POST 5xx's, but not on 429's.\nThanks @lushc!\n. Yeah, good point. We could also simply pass the HTTP status code and the JSON body, and deduce all the other attributes from that. It's probably a little unconventional to do anything but store some values in an exception constructor, but since our exceptions are basically models for our errors, it kind of makes sense that they'd know how the JSON is structured.\n. You're passing a full token object as the source parameter instead of just the ID. You can fix your code like this:\nphp\n$Customer->source = $ccToken->id;\n$Customer->save();\nClosing this issue because I don't think the previous behavior was intended and something we actually want to support.\n. Just a guess, but I think these properties are specific to invoices paid via ACH Credit Transfer.. Yep, seems likely. Thanks for closing the loop!\n. @akprgm You can use the \"list invoice items\" method with the customer parameter, then filter on your end to only keep items where invoice=null.\nPlease note that GitHub issues are specifically for bugs or feature requests for the PHP library, and are not a support channel. If you have further questions, please reach out to Stripe's support at https://support.stripe.com/email.\n. Thanks @weirdan!\n. Released in 6.4.1. Thanks for the contribution @weirdan!\n. Released in 6.4.1. Thanks for the contribution @weirdan!\n. @williamhector The API does support expanding attributes on update requests.\nYou can do something like this:\nphp\n$customer = \\Stripe\\Customer::create();\n$customer->source = \"tok_visa\";\n$customer->expand = [\"default_source\"];\n$customer->save();\necho $customer->default_source; // default_source is expanded\nThe $opts argument is for passing \"special\" parameters that usually go into headers, such as \"stripe_account\" or \"idempotency_key\".\nIf you have further questions, please reach out to support at https://support.stripe.com/email, they will be able to help you with this.\n. Hi @nickdnk, do you mind just moving the attribute after $object and before $api_version? Aside from $id and $object which are always at the top, the attributes should be kept in alphabetical order. Thanks!\n. Released in 6.4.2.. Hey @thumpmaster, you can set the base URL with Stripe::$apiBase. This is actually what we do in the test suite: https://github.com/stripe/stripe-php/blob/5e27a67ef7f1797c238efdef0a3dfdab504acf25/tests/TestCase.php#L38. @colinbarstow This specific API request (creating an order) will never return a card error because it does not attempt to charge a payment source. (In contrast, paying an order can return a card error.)\nThe exception is likely raised in a different place in your code, that you have not wrapped in a try/catch block.\nAs this is not an issue with the library itself, I'm going to close this thread. If you need more help, please reach out to support at https://support.stripe.com/email.. @nickdnk Brandur is not available today (US bank holiday) but I took a look and I think this looks good, modulo Brandur's comment re. using fully qualified paths so that we have one less list to maintain when a new resource is added.\n. Released in 6.7.2. Thanks again @nickdnk :). Aw, I missed that. So InvoiceLineItem should not have any traits -- the only operation it supports is listing, and that's done via the lines list object automatically returned when fetching an invoice. I'll push a fix.. Released in 6.7.3.\n. Hey Nick. Awesome work as usual.\n\nAdded Discount, DisputeEvidence and OrderItem objects - none of these extend ApiResource since they don't have an id property which I assume is necessary for that. Anywhere these objects are referenced in phpdocs I've update those from the previously used mixed type. DisputeEvidence isn't really a class since it doesn't have an OBJECT_NAME. If you think it's silly I'll remove it from the PR. I only added it because it exists as a standalone documented object: https://stripe.com/docs/api#dispute_evidence_object. And: Are Discount and OrderItem supposed to be in the Util map?\n\nSo, yes, you do need to add those new objects to the Util map so the deserializer knows about them. If you don't add them, then the objects will be deserialized to default StripeObjects instances.\nThis also means that you should remove the DisputeEvidence class: because it doesn't have an object property, the deserializer won't know about it. (We could write custom deserialization login to always cast instances to the correct class, like we do in stripe-java, but I would really rather avoid introducing this kind of complexity in the PHP library.)\nAlso, you're correct that your new classes should not extend ApiResource, but they should extend StripeObject for backwards compatibility (so users can still access attributes via both attribute (->foo) and array (['foo']) syntax, etc.).\nOverall though, I have some concerns about adding those new classes purely for the sake of describing the attributes with phpdoc. @brandur-stripe wdyt?\n\nAdded charge decline code constants to Charge - following the logic elsewhere in the library. I was not sure if this should be on Card or on Charge, but I think Charge, no? Or perhaps we should move them to the \\Stripe\\Error\\Card object?\n\nNo, I think Charge is the right place for these. Sadly, non-card payments can be declined too :)\n\nThe Topup object is missing from the documentation, even though it links to it itself: https://stripe.com/docs/api#topup_object - it doesn't exist on the page. For this reason I can't check if the phpdocs match.\n\nTopups are a private beta feature. The link is valid, but you need to be logged into an account that has been invited into the beta to be able to view it.\n\nThe SourceTransaction object - what is that? Why do we have it? I can't find it anywhere in the documentation. Isn't this just a normal Charge object used as a source for transactions? See https://stripe.com/docs/connect/charges-transfers#transfer-availability\n\nNo, SourceTransaction describes a transaction on a receiver-type source like ACH Credit Transfer: https://stripe.com/docs/sources/ach-credit-transfer#source-transactions. The object is not yet described in the API reference, but you can view an example in the link above. It might be difficult to fully describe it with phpdoc because, like Source objects, it is polymorphic depending on the source's type.\n\nAnd; is there somehow we can follow changes made to the API? It doesn't seem to be documented anywhere when changes to properties take place, which makes it quite tedious to go through all of the objects again and again to keep them updated. I assume this is the reason the phpdocs were outdated in the first place.\n\nAt this time, your best bet is to look at the diffs in the OpenAPI spec: https://github.com/stripe/openapi. Ultimately we'll be able to autogenerate the phpdocs directly from the spec, but we're not quite there yet.. Released as 6.8.0. Thanks again @nickdnk :). @yt94dev This is not a support channel. GitHub issues are specifically for bugs or feature requests regarding Stripe's PHP library. Please reach out to Stripe support at https://support.stripe.com/email to receive support about Stripe's API and its libraries.\n. That would be a request for Shopify, not Stripe. If Shopify doesn't allow their users to run custom PHP code, there is nothing we can do in the PHP library to bypass that.\n. Hi @jakwo97. Tokens should be generated client-side, using Checkout or Elements, not using the PHP library.\nIn any case, GitHub issues are specifically for bugs or feature requests regarding the library and are not a support channel. You should instead reach out to Stripe's support at https://support.stripe.com/email.. Hi @fre5h, thanks for the report! I've implemented the second solution in #486.\nNote that in practice, there shouldn't be any need to check the returned object (IIRC it only contains the ID of the account anyway). You would simply wrap the call in a try/catch block to ensure that it succeeded.\n. Released as 6.8.2.. Released in 6.9.0.\n. Released in 6.10.0.. Hi @samialmorshedi. As far as I can tell, ESOCKETTIMEDOUT is a Javascript error code, not a PHP one, so I don't think this error comes from the PHP library.\nIn any case, GitHub issues are specifically for bug reports or feature requests and are not a support channel. If you haven't already done so, you should reach out to Stripe's support at https://support.stripe.com/email to report this issue. Make sure to include as many details as you can, such as where exactly you're seeing this error message, if you are able to reliably reproduce the issue, etc.\n. @priyank21 application_fee is a parameter of the charge capture request, not the charge retrieval one. Try modifying your code like this:\nphp\n$charge = \\Stripe\\Charge::retrieve(\"ch_...\", [\"stripe_account\" => \"acct_...\"]);\n$charge->capture([\"application_fee\" => 1000]);\nNote that GitHub issues are not a support channel and are specifically for bugs or feature requests for Stripe's PHP library, so I'm going to close the issue. If you have more questions, please reach out to Stripe's support at https://support.stripe.com/email.\n. Hi @mrfreitas, thanks for the suggestion! I don't think we'll be able to tackle this immediately, but I'm going to tag this as future and we'll keep this in mind in future versions.\n. Thanks @nickdnk!\nReleased as 6.10.1.\n. I don't think this is related. We've been observing these issues sporadically for the past few days. One of the tests use httpbin.org, which seems to be having some trouble lately (it's returning a 503 for me right now).\n. That said, we should probably fix or get rid of this test if it's making the test suite brittle.. The issue is that it is possible to use an older PHP version (e.g. 5.4) where the curl constants are not defined with a newer ext-curl version that does support features like HTTP/2.\nThankfully, curl is robust enough that providing an unknown value for a configuration option simply results in curl using the default value for that option, so it is safe to pass these values regardless of which ext-curl version is used.\nRe. PSR-4, I'm also not sure that what we do in the library is in violation of the spec. I assume it's because the constants are not constrained to the \\Stripe namespace? We could \"fix\" that, but I'm not sure it's worth the trouble. In practice, what are the chances that someone would define constants with the same names but different values in their own code?\n. Hi @iankrigsman, I don't think you've hit the correct GitHub repository. This is the repository for the PHP library for Stripe, a payments API. The library does not have any files named either webhook_config.php or webhookclass.php, and does not use SMTP in any way.\n. Ah, I think this is the repository you want: https://github.com/its-tas/stripe-php-webhook.\n. No worries :)\n. Aw, that's really unfortunate that PHP's builtin server does not handle this well :/\nThanks for looking into this and submitting a PR!. Released as 6.10.3.\n. Released as 6.10.4.. @ImLiam Gentle bump, in case you missed my review above :). Released as 6.11.0.. Released as 6.12.0.. Released as 6.13.0.. Released as 6.15.0.. Released as 6.16.0.. Hey @anthonyolow, this was already fixed a couple of weeks ago in #508.. Hi @julienbourdeau! \u2764\ufe0f Algolia :)\nThis looks super promising. I don't know much about PHP autoload mechanics, but if this works as advertised and saves us from manually having to add every new file, I'd be very much in favor of pulling this in.\ncc @brandur-stripe @remi-stripe for visibility\n. On second thought, while I think maintaining a long list of requires is a bit tedious, it has the advantage of being very explicit. The autoloader code is more obscure. Better the devil you know...\nGoing to close without merging, but thanks again for the contribution :). Haha, thanks for writing good code that's easy to port :)\n. Released as 6.17.1.\n. I pushed another commit to only use files.stripe.com for file creation requests. I had to change a few things to make it possible to override the API base per request, by making it possible to pass an api_base option.\nI also had to split the file creation tests into separate test classes, because they need their own setup/teardown methods.\n. ptal @brandur-stripe . Released as 6.18.0.\n. @ruudk \\Stripe\\File is aliased to \\Stripe\\FileUpload, so it shouldn't be a breaking change. Can you share an example where existing code would cease to work after upgrading to 6.18.0?\n. Weird, it looks like for some reason the class aliasing isn't working in your environment, but I have no idea what could cause that -- if you can use \\Stripe\\File, that means that the File.php file was loaded and the class_alias statement should definitely have been executed.\n. Ah yes, that's likely the issue. Our test suite didn't catch this even when using autoload because we have tests for both File and FileUpload, so File.php would get loaded.\nI'll push a fix with what you suggested. Thanks very much for your help, and sorry for the trouble!. @ruudk I've just released 6.19.4 to fix the autoloading issue. I guess you've already updated your integration to use File instead of FileUpload so you don't need to upgrade, but it will prevent other users from running into the same issue.\nThanks again for your help in investigating and fixing this issue! Much appreciated :)\n. Hey @karlr-stripe, thanks for the report.\n\nis it a problem that we generate an E_NOTICE level error and something that we should fix?\n\nYep, definitely.\nThis is probably my bad -- I ported the serialization logic over from stripe-ruby a while back, but Ruby simply returns a null value when trying to access invalid keys in a hash, without any warnings. I'll work on a fix.\n. Fixed in 6.17.2.. Released as 6.17.2.. Hi @EatonZ, thanks for the detailed report. I've confirmed the regression and will push a fix shortly. Sorry for the inconvenience!\n. This should be fixed in 6.19.1.\n. Released as 6.19.1.\n. Hi @vegaskev. Indeed, this issue is most likely related to Elements and not to the stripe-php library, so I'm going to close the issue. I recommend you reach out to support at https://support.stripe.com/email to report this problem.\nIn your message, you should mention which browser you're using, and if you're using any non-default block list in uBlock Origin -- default block lists should not affect Stripe.js / Elements.\n. Hi @ruudk, thanks for the report and sorry for the trouble. It turns out this was an unforeseen side-effect of enabling HTTP/2 in the library (cf. #494).\nIn HTTP/2, all headers are in lowercase. HTTP headers are supposed to be case-insensitive, but since the headers are copied in a regular PHP array, the keys are case-sensitive :/\nWe'll work on a fix and update here once it's released.. Fixed in 6.19.2. Headers can now be accessed regardless of case.\nFeel free to reply here if you're still encountering issues after upgrading.. Hi @lode, thanks for the PR! This looks good to me, going to pull this in and cut a release.. Released as 6.19.3.\n. @brandur-stripe Also, could you check if stripe-go is affected by this issue (since it's the only other library that uses HTTP/2)? (My guess is that it's not because the http package canonicalizes header names.). I added a comment as requested, ptal @brandur-stripe. (And thanks for confirming that stripe-go is unaffected!). Released as 6.19.2.\n. Thanks @brandur-stripe! All credit goes to @ruudk here :). Released as 6.19.4.. Hi @tarjei. I've just tried this with the latest version of the library (6.19.4) and the original query arguments are maintained when the auto-paging iterator fetches new pages.\nThe code for autopagination hasn't changed in a long time and I think it should also work with 4.13, but just in case, can you try upgrading to the latest version of the library?\n. Ah, I see. All list endpoints return resources in reverse chronological order, and at this time there is no option to sort results differently, so you'd have to do the sorting on your end.\nIf you want to get a list of charges in chronological order, the simplest way is probably to do something like this:\nphp\n$results = [];\nforeach (\\Stripe\\Charge::all($params)->autoPagingIterator() as $charge) {\n  array_push($results, $charge);\n}\n$results = array_reverse($results);\n. Hi @kristoff2016. I apologize, but GitHub issues are specifically for bugs or feature requests concerning Stripe's PHP library and are not a support channel.\nIf you need help using the library, please reach out to Stripe's support using the form at https://support.stripe.com/email, or on IRC in the #stripe channel on Freenode.\n. Yep. We'll probably have to rename it to RadarList or something.. I agree with @remi-stripe here -- those two aren't request parameters, not resource properties.\nI don't think we even have a good way of documenting request parameters since in most cases the methods are simply inherited from the common traits.. Ah, that's a good point. I think that's a reasonable compromise. To be super clear, can you change it like this?\n* @property string $source Used for save() only, not returned on resources.. According to the script's output, your requests should work provided that:\n- you are using a recent version of stripe-php (>= 4.0)\n- you are not manually setting the CURLOPT_SSLVERSION option as illutrated in https://github.com/stripe/stripe-php#ssl--tls-compatibility-issues\nCan you let us know which exact version of stripe-php you're using? If you're using an older version, can you try upgrading to the latest (or at least to 4.0)?\n. Closing due to age, but feel free to reply if you're still having trouble.. Hi @ankurk91, thanks for the report. The PHP documentation you quoted explicitly says that the exception code may not always be an integer, but I don't see an issue with implementing your suggestion.\n. Ah, I waited to release this with #542, but it looks like we're going to wait a bit for that one since the API is not yet 100% set in stone. We can go ahead and release this PR in the meantime.. > it kind of sounds like we're sort of hoping that a cURL connection is correctly identified as stateful and therefore copied safely.\nMore precisely, it's the static CurlClient instance that's identified as stateful and nullified, so the first time CurlClient::instance() is called in a new thread, a new CurlClient instance will be created.\n. Hey @browner12, thanks for the feedback!\nI'm aware that security support for 5.6 and 7.0 will be ending soon, but our usage metrics show that usage for these versions is still very high: half of our PHP users that are currently on the 6.x branch are using one of these (25% on 5.6 and 25% on 7.0).\nAs it is, dropping support for 5.4 and 5.5 will prevent 6.5% of users (again, counting only users on the 6.x branch) from upgrading to 7.0 until they upgrade to a more recent PHP version. Bumping that number to 56.5% seems a little bit too steep for now.\nThat said, we will reevaluate in 2019 once support for 5.6 and 7.0 has actually ended, and might revisit this decision then.\n. @browner12 Replying a bit late, sorry! As a developer, I agree with you entirely. However, many of Stripe's PHP users are not developers or even very technical persons and rely on e.g. Wordpress plugins for their Stripe integrations. It's an unfortunate reality that many hosting providers are not very diligent about keeping their PHP versions up to date, so dropping support for all but officially supported PHP versions would be a pretty harsh move for those users and would go against Stripe's philosophy of minimizing friction in accepting online payments.\nAs said above, we'll certainly reconsider this decision in a few months, and might release a new major version then.\n. @rvitaliy Thanks! However, we're going to keep supporting 5.6 and 7.0 for a bit longer despite these versions having reached end-of-life. See the discussion above for some justification.. @remi-stripe Bump! :). Nice catch! Thanks @ryangreenberg :). Released as 6.29.1.\n(Sorry for the long delay!). Released as 6.25.0.\n. Released as 6.26.0.\n. Alright, I've updated this to be consistent with what we settled on in https://github.com/stripe/stripe-ruby/pull/715.\nThe implementation is slightly different because stripe-php supports talking to a stripe-mock instance running on a different host (cf. #573). That's a pretty neat feature and we should probably port it to other libraries.. ptal @brandur-stripe @remi-stripe . Pulling this in. Thanks @johnraz!\n. Sounds very reasonable! In fact, I thought you could already iterate directly over Collection instances \ud83d\ude04 We'll implement this soon.. Implemented in 6.28.0.. Released as 6.28.0.. Hi @bert2002. It sounds like you have two different incompatible requirements for stripe-php in your composer.json file.\nCan you edit composer.json and remove all references to stripe/stripe-php, then run composer require stripe/stripe-php again?\n. Released as 6.28.1.. Hi @Tushar-Kanvinde. In most cases such network errors are caused by connectivity issues between your server and Stripe's API, not by problems in the PHP library itself.\nI would recommend running the reachability test script from https://github.com/stripe/stripe-reachability on your server and sending the results to Stripe's support at https://support.stripe.com/email, along with the information you shared in this post. You should also ask your network administrator or hosting provider to check for network issues between your server and api.stripe.com.\nClosing the issue, but feel free to reply if you have reason to believe this is actually a bug with the library.. Hey @Josh1Dev, thanks for the PR!\nI'll reach out internally to see if this is the correct copyright notice. I think it is, but we might want to remove the current year so that we don't have to update the license every year. I'll reply here as soon as I have confirmation.\n. Pulling this in. Thanks @Josh1Dev!\n. Hi @Seldaek. I actually reached out to you via email a few weeks ago about this issue (12/12/2018, email titled \"GitHub hook for stripe-php package\"). You updated the instructions for manually setting up the webhook and I set it up accordingly.\nAs far as I can tell the webhook is working (I can see in GitHub's UI that events are successfully delivered), but the stripe-php page on packagist.org still says that we're using the legacy service and need to update.\nI hate to be a bother, but can you check what the issue is?\n. I've just sent you an email with a screenshot of the response received from the packagist.org webhook.. Hi @stefanogironella. This error number (16) indicates a generic problem with the HTTP/2 protocol (cf. https://curl.haxx.se/libcurl/c/libcurl-errors.html).\nCould you reach out to support at https://support.stripe.com/email about this issue, and include as much information as you can in your message? In particular, if you could provide exact timestamps for the failed requests, it would be very helpful. We'll be able to check into our internal logs to see if the requests made it to our servers or not.\nPlease also include the output of this test script: https://gist.github.com/olivierbellone/9f93efe9bd68de33e9b3a3afbd3835cf, and mention if there are any proxies or firewalls between your CI server sending the requests and api.stripe.com.\nI'm closing the issue here as it's likely a network issue unrelated to the library itself, but feel free to reply if needed!. Hi @TekBoss. I've just checked that the .zip archive for the latest version (https://github.com/stripe/stripe-php/archive/v6.28.1.zip) does contain the data/ca-certificates.crt file.\nCan you share which version of stripe-php you're referring to and where you downloaded the .zip file from?. No worries :). > we should update the readme\nI think this is already being covered by the \"Custom cURL options\" section and we don't need to cover every single option. Overriding the HTTP version should rarely be necessary.\n\nwe should likely add the version to the request headers (where we track curl and such) because we should be able to know\n\nI don't think this is necessary, we already know which HTTP version is being used. If we want to make it clearer in our own internal logs we can do that without relying on a custom header.\n\nnot entirely sure I follow whether this could be a breaking change\n\nIt's not. Even if someone is already passing a custom CURLOPT_HTTP_VERSION today and it's being ignored, this wouldn't break anything. (Unless the user is passing an invalid value, but I wouldn't call that a breaking change.)\n\nwe likely need some kind of test? Not fully convinced\n\nI meant to write one, but it's actually difficult to test this without some refactoring. I'll give it another try though.. Okay, so the only way we can test this right now is by switching the visibility of executeRequestWithRetries from private to protected so that we can mock the method in tests in order to check the contents of $opts. I'd rather not do that though.. Thank you both!. Released as 6.29.1.. Hi @scofennell, thanks for the report.\nThis is a dupe of #558, but I think maybe we should rename the methods -- neither __toJSON nor __toArray are real magic methods, we just reused the naming convention.\nThis would be a breaking change though since some users may be relying on these methods in their integrations, so it would have to be done in the next major version. I'll tag this issue as future so that it stays on our radar.\n. Hi @Rheed, thanks for the report. I agree this is annoying, it does sound like the API should either accept shipping= in customer update requests, or always return a shipping hash with attributes set to null for all customers.\nI'll check internally if the current state is intended and if it can be changed and post an update here.\n. Hey @Rheed, we just pushed an update to the API. You can now unset the shipping attribute on customer objects by setting it to null then calling save():\nphp\n$customer = \\Stripe\\Customer::retrieve(\"cus_...\");\n$customer->shipping = null;\n$customer->save();\nThis should work regardless of whether the customer previously had shipping information or not.\nClosing the issue, but feel free to reply if needed!\n. @itmyprofession Deserialization is failing with your API key because of a bug in the library when a metadata key is named metadata, which is the case for one of your customer objects. I've prepared a fix in #607 and we'll release an updated version shortly.. Fixed in 6.30.5.. > Looks like the hhvm builds are failing but I don't think it's related to my changes.\nYeah, this is unrelated. HHVM 4.0 was released yesterday, and it's no longer compatible with PHP. We'll have to remove HHVM from the CI, or maybe pin it to the last 3.x version.\n. Hi @byron222. To get the list of payouts for a specific connected account, you'll need to send a list payouts request with the connected account's ID in the Stripe-Account header.\nNote that GitHub issues are specifically for bugs or feature requests for the PHP library and are not a support channel. If you need more help, please reach out to Stripe's support at https://support.stripe.com/email.. Hi @torreytsui, thanks for your message. Currently, the library doesn't have offer static methods for deleting resources without retrieving them first. This is on our roadmap though, so I will leave this issue open and tag it as future.\nA somewhat hacky workaround is to create a resource instance manually with the correct ID, then call delete() on the instance:\nphp\n$item = new \\Stripe\\SubscriptionItem(\"si_123\");\n$item->delete();\n. Hi @YouMakeMeHappy. The invoicing parameter in customer update requests can only be used by the dashboard, not by regular integrations.\nI'm closing this issue since this is not a bug or feature request for the PHP library. If you'd like the API to support this feature, I recommend that you write to Stripe's support at https://support.stripe.com/email and explain your usecase.\n. Released as 6.30.1.. Released as 6.30.5.. Hi @ofavre, thanks for reporting this. I'm fairly sure this is just a mistake and the name has always been payment_intent.payment_failed on the API's side. We'll fix this soon.. json_last_error_msg() is only available in PHP >= 5.5, but I updated the PR to use json_last_error().. Yeah, I guess -- I mostly just copied the existing logic when deleting API resources: ApiResource::_delete calls instanceUrl, which in turn calls resourceUrl which has this block.\nFor sources, we can't use the existing method because sources behave differently than existing customer payment sources (ugh naming), i.e. cards & bank accounts:\n- their normal instance URL (for retrieve & update requests) is /v1/sources/src_foo\n- sources cannot be deleted, but when attached to a customer, they can be detached by sending a DELETE request to /v1/customers/cus_bar/sources/src_foo.\nIf you want, I can refactor to avoid duplicating the code, or just get rid of the check entirely as it doesn't seem terribly useful.. Good point, I added an if clause to handle errors.. Oops! Absolutely not -- this endpoint returns a collection of source_transaction objects, not the source object itself. This is now fixed.\n. I really wish we could do $this->assertInstanceOf(ExchangeRate::class, $rates); here instead, but unfortunately that doesn't fly with PHP <= 5.4 \ud83d\ude22 . It doesn't seem like we do atm. That said I agree that ChargeTest is not the correct place for this. We should add an ApiResourceTest.. \ud83d\udc4d  Let's fix this in a separate PR.. Ack. I'll extend stubRequest to be able to handle non-api.stripe.com requests and we'll be able to move the test back in AccountTest.. \ud83d\udc4d . You can add a fourth parameter to stubRequest with the array that you want to return.. Ack. Can you add a comment with a TODO so that hopefully we remember to add the proper assertion once stripe-mock does the right thing?\n. Yes, we're on a stupidly old version of PHPUnit because of PHP 5.3 :yellatcloud:\nYou can still expect exceptions via a comment with the @expectedException tag. Take a look at WebhookTest.php for a few examples.\n. Mostly to be consistent with other list tests, but fair enough, we don't really need to assert the contents of every list returned by stripe-mock -- we're already checking that a list is returned which is probably enough to ensure that we're hitting the correct URL.\n. I pushed another commit to move this test directly in AccountTest.. Good question. I suppose since this is all handled in StripeObject directly, we should test this in StripeObjectTest.. The card hash under source objects does not have an \"object\" => \"card\" entry (because it's not a card object), so convertToStripeObject() would not convert those hashes to \\Stripe\\Card objects but just to a generic \\Stripe\\Object.\nYou're correct that this patch did cause the type to be changed from \\Stripe\\Object to \\Stripe\\AttachedObject, which might be seen as a breaking change, but I have a hard time thinking of a practical case where that would break anything. What do you think?. Ah, indeed, the card hash nested in token objects is an actual card object, and this patch does cause the regression you described.\nI'll try to push a fix shortly.\n. What this PR does is give the option to override the global whitelist in each class. If we're afraid that splitting up the whitelist will make it harder to maintain, we can simply keep the PR in its current form, i.e. keep the global whitelist on StripeObject and keep the one special case of card under Source.. The attributes defined here don't have to be top-level attributes in a given object, they can themselves be nested under other attributes (else the current code would not work either). So my intent was to move all of the identity verification attributes under Account, but as said above we can also keep the attributes in StripeObject by default and only override the global whitelist when needed.. That would make your new test pass, but cause the test I added in this PR to fail (i.e. it would make it impossible to update expiry dates on card sources).. Fixed!. Fixed too. \ud83d\udc4d . Yep. I amended the commit so you can't see it, but my first submission used static initializations \ud83d\ude2d . Yeah, good point. Done :)\n. I opportunistically did a few of these \"fixes\" which is why the PR has a negative net line count.\n. Yep, it's basically a straight port from the Ruby implementation.. Yeah... I might have been cargo culting a little bit too much in this PR but I couldn't come up with anything better and I like that the implementations are consistent across languages for the reason you exposed.. I used ->source =. I'm not sure how conventional it is but I think it's fairly explicit.. Leftover from manual debugging \ud83d\ude28 . Resources that have their own custom implementation of API methods but need to call the standard implementation (usually because they have some additional parameter checking) can use this syntax to \"inherit\" the trait methods under a different name.. No, these methods let users manipulate external accounts without having to retrieve the account first (like other nested resource methods). Also, to clarify, these methods will return the correct type -- though of course we cannot know what this type will be in the PHPDoc.. \ud83d\udc4d Thanks!. Actually, I've updated the PHPDoc to use BankAccount|Card instead of ApiResource.. I think we can keep the classes around -- the definitions do still exist in the OpenAPI spec, and in the case of Bitcoin some users do still send requests to the top-level endpoint /v1/bitcoin/receivers.\nI've removed the refund() method from BitcoinReceiver though, and updated the PHPDoc to include links to the sources API documentation.\n. I cargo-culted the implementation from stripe-ruby, but you're absolutely correct: idempotency does not apply to DELETE requests.\nThe API does not use PUT requests at all, so POST is the only method that can use idempotency. I'll update the PR. Thanks \ud83d\udc4d . Agreed. I've actually already updated RandomGenerator with a uuid method that returns a real V4 UUID since that's the best practice recommended in our documentation (and what's done in stripe-ruby too).. Yeah, that makes sense. I've removed the helpers from TestCase and the various reflectors are now directly instantiated in CurlClientTest.setUpReflectors.\n. Do you mean grouping rate_limit and idempotency_error in a switch statement? The problem with that is that the two values are in different variables ($code vs $type).\nI've taken a look at how we handle this in other libraries: stripe-ruby completely dropped support for 400 rate_limit errors, which maybe we should do in other libraries as well, but that would be a breaking change and we just released 6.0.0 :/\nstripe-python uses a series of semi-complex if statements: https://github.com/stripe/stripe-python/blob/master/stripe/api_requestor.py#L190-L214, but then again Python doesn't have switch.\nI'm tempted to update the logic to something like stripe-python anyway, wdyt?. Yeah, let's leave it as is then. Thanks!. I can't English :coneofshame: I think \"instantiated\" was what I was looking for, but your version is better \ud83d\udc4d . \ud83e\udd26\u200d\u2642\ufe0f  Fixed.. I'm not sure these tests are needed -- there is already a test for the create method and the library itself doesn't care about the request parameters, so the only thing being tested here is that the parameters provided in the tests pass stripe-mock's validation.\n@brandur-stripe wdyt?\n. Maybe do the same thing that you did in stripe-java? I.e. add a check and throw \\Stripe\\Error\\InvalidRequest exception if the parameter is missing.. I'd rather not have the tests then, to keep things consistent in the test suite.. Hi @nickdnk! Thanks a lot for the contribution. Would you mind addressing @brandur-stripe's comment above? Once that's done, I think we'll be ready to merge :). Unfortunately PHP doesn't support keyword arguments, so this is a breaking change. Mind setting $appPartnerId as the last argument?\n. This should have been turned into expectsRequest.. The only singleton resource is Balance. I guess that we expected this to be a more common pattern in the API than it ended up being.. I think you swapped the expected string and the input string here :). Unfortunately, the library still needs to support PHP 5.4 so we cannot use ::class.\nAlso, I don't think expectsException is a valid PHPUnit method -- afaik you have to use the @expectedException annotation, which would require splitting this test into multiple methods.\n. This causes the test suite to fail -- as I pointed out earlier, it's not a valid function PHPUnit (at least not in the very old version we have to use because of PHP 5.4 compat).\nYou'd have to split this test into 4 functions, one for each assert, and use the @expectedException annotation for the last one. Here's an example: https://github.com/stripe/stripe-php/blob/5e27a67ef7f1797c238efdef0a3dfdab504acf25/tests/Stripe/WebhookTest.php#L35. CardDetails order yada yada, feel free to ignore.. PHP uses 4 spaces for indents, but you only used only 2 spaces here.. Same indentation issue in this function.. And here too.. Need to add a newline character at end of file to satisfy the linter.. Same here.. And here.. Yeah, I considered that. This would only happen if a user passed a resource without an ID inside a parameter hash though. We could check if the resource has an id property and output an error message if not, but I don't think it's worth the hassle.\n(stripe-ruby has the same issue fwiw). suggestion\n    public function testIsListable(). suggestion\n    public function testIsListable(). \ud83d\udc4d . \ud83d\udc4d . The constant should not contain the protocol. Can you change this like so:\nsuggestion\n        Stripe::$apiBase = \"http://\" . MOCK_DOMAIN . \":\" . MOCK_PORT;. Two nits:\n1. Could you rename the constant to MOCK_HOST (and the environment variable to STRIPE_MOCK_HOST)? I think host+port is a more common combination than domain+port.\n2. Can you use double-quotes for the default value? We use double quotes everywhere else.\nsuggestion\ndefine(\"MOCK_HOST\", getenv(\"STRIPE_MOCK_HOST\") ?: \"localhost\");. Add the protocol here too:\nsuggestion\n$mock_url = \"http://\" . MOCK_DOMAIN . \":\" . MOCK_PORT . \"/\";. We probably don't want the protocol displayed here, so could you change this like so:\nsuggestion\n    echo \"Couldn't reach stripe-mock at `\" . MOCK_HOST . \":\" . MOCK_PORT . \"`. Is \" .. Not really: SubscriptionScheduleRevision doesn't have any instance methods, so this is never called. It's fine to leave it though.. I'm not convinced those methods that immediately raise an exception are very useful, but it's better to be consistent, so I'd say yes.. Can you add a test for release?. ",
    "EvanDarwin": "I am also having this issue.\n. ",
    "flagoworld": "Apologies. Closing because I just discovered the Util.php function to do this. Though it makes less sense to have it there then to have it as part of the base Stripe_Object.\n. ",
    "andyyoung": "The current library version supports PHP 5.2 and above, whereas get_called_class() is >= 5.3. We'll therefore need a solution that works for 5.2 as well.\n. ",
    "bencromwell": "@andyyoung you're quite right. The __CLASS__ magic constant does the job better in that case, works in 4.3+ and returns the classname as of where it was declared rather than that of any inheriting classes.\n. ",
    "kyleconroy": "r? @michelle @bkrausz \n. Tests are green!\n. @MeanEYE That does seem strange. What versions of stripe-php and the Stripe API are you using?\n. I'm guessing you're using an older version of stripe-php. The Stripe_List::create method was added about a year ago. We have a test that covers creating subscriptions, so I'm confident that the current version is working properly.\n. No problem! Get some :zzz: :smile: \n. Thanks!\n. r? @bkrausz once you sign off on the initial design, I'll add it to all of the resources\n. Yep, I'll be adding ApiResource tests to make sure this all works.\n. @bkrausz how does this look now?\n. Attempting to merge into experimental-v2, will see what happens\n. Since we need to make the breaking change for the Account resource, let's do it.\n. Looks good, but I think you need a few tests around handleCurlError\n. Yeah, no urgency here. We shouldn't merge this in until disputes have shipped to everyone.\n. LGTM\nThis is a breaking change though, so we should probably bump a version.\n. :+1: \n. /s/colourize/colorize\n. -_-\n. Thanks for the fix!\n. @xavismeh Could you rebase and re-run your fixer? I agree with @bkrausz that we should only be looking for fixes from PSR-2 and our phpcs.\n. @xavismeh this is still a very invasive change, for little benefit. I'd be interested in a change that just updated the PHPDoc, instead of changing white space throughout the entire codebase.\n. @xavismeh Indeed, I don't think we're looking to accept this if it includes all those whitespace changes. Sorry!\n. @bkrausz I think we should probably make this more generic by adding a getResponse method that returns the actually API response, status code, body and all. \n. See the work done in #206 \n. @bkrausz the change is behind a version gate, so we need to account for both 400s and 429s\n. :+1: once tests pass\n. Fixed here https://github.com/stripe/stripe-php/commit/983887d49d9caa96079a57858ace88e6ae3b89bf. @matthewarkin is correct that prefixing with 0 is not the correct thing to do.\n. @esemi Thanks for reporting the issue. For now, we'd actually like to keep these values constant. As we said in https://github.com/stripe/stripe-ruby/issues/46, changing these timeouts could cause serious problems, as the request might timeout before Stripe is finished processing the request, leaving merchants with charges they never saw.\n. Thanks for all the help @matthewarkin\n. r? @bkrausz\n. @brandur while the impetus for this change was accessing the Request-Id, I think the real request is having access to the response. I didn't want to special case Request-Id and then have someone come back and ask for response status or another header (such as Stripe version).\n. I'm :+1: to merging this without waiting for tests, as this is just a README change.\n. :+1: once the tests pass\n. @vegancow Sorry your running into some problems!\nThe No such token error usually means that you're using an incorrect Stripe public API key. Make sure that you're using the same testmode publishable key / secret key pair.\n. @jxu577 this looks good! Tests will pass once the discount endpoint is up and running.\n. :+1: :ship: once we're ready to go\n. @dopesong Whoops, that was my mistake. I meant to update to v3.13.0. I've corrected the mistake.\n. Seems like a reasonable addition. @bkrausz may have more state on if this is the best \n. r? @stripe/api-libraries \n. I was planning on merging to master and doing a release. Is there anything else that needs to go out?\n. \ud83d\udc4d \n. r? @brandur \n. Got it.\n. Yeah, since this is only instances methods, I'll do something like $opts = $this->parseOptions($options) which will wrap that ternary operation.\n. Indeed, not sure how the heck the tests were passing....\n. Yep, I need to add RequestOptions testing\n. I don't believe this is defined for this class.\n. I originally split on \\r\\n\\r\\n, but ran into some strange errors with FileUploads. I think this approach works better because I don't need to munge the response at all. Also, from further down in the SO post: it won't be affected by additional headers from proxies which seems like a win as well.\n. Yeah, that's just wrong. Fixed.\n. Whoops, fixed.\n. I'd rather note, as that may have unexpected changes. I think tying the deprecated methods to the deprecated endpoints makes sense.\n. I'd rather not stub things out, so I'll change the sleep to 1\n. This test isn't correct. I'd split this up into two tests.\nphp\n**\n * @expectedException Error\\RateLimit\n */\npublic function testRateLimit()\n{\n    $this->mockRequest('GET', '/v1/accounts/acct_DEF', array(), $this->rateLimitErrorResponse(), 429);\n    Account::retrieve('acct_DEF');\n}\nand another than just checks that Error\\RateLimit returns 429 for getHttpStatus.\n. If we're just passing the code through, I agree that we don't need a second test.\n. This is annoying, but our code linter is barfing on these constants because they aren't all uppercase, even those these are the correct values to use. I'm going to commit a fix for the linter.\n. +1 can do\n. Sadly you can't have a static function and non-static function with the same name. I'll try to think of a better name.\n. ",
    "bkuhl": "In a world of increasing testability and better testing tools, this would be great.. I will add that we do understand that this issue is very old and so is the SDK.\nI ended up wrapping the SDK with my own classes to make things easier.. ",
    "seyfer": "The same issue. Mocking all these Stripe_* classes with the data structure is not easy.. ",
    "fastest963": "Woops! Missed that. Just fixed those lines. Thanks for the quick turnaround!\n. ",
    "matthewarkin": "Hey @killswitch, the docs would be for the latest API version. You can check you API version in the account settings portion of the Stripe dashboard.\n. Yea not the bindings, in your Account settings you can set the API version, the API version affects the responses api.stripe.com sends you, in this case a singleton as opposed to an array. Updating the API version in your account settings will fix this.\n. Yea, I've run into the issue a few times. The docs should always refer to the latest API version. Having the docs only show you stuff that is in your version could be tricky because you might not always be logged into that Stripe account and you wouldn't ever see the new features. Maybe adding some sort of hint near API calls that have changed between your API version and the current? It might be hard/tricky to implement this though. An official stripe-er may be able to better comment on usability fixes for the docs.\n. A pretty simple 1 line fix https://github.com/matthewarkin/stripe-php/commit/78d14ff6a26e9f460f125cb4642f9bf7c3dc1b05#diff-64dc7e10323ffeacc0c462ad103889c7R75\nI have a pull request open so someone should hopefully merge it soon. \n. The init.php file was added 2 days after 2.1.0 was released to fix #138. So it'd be included in the next release. \n@bkrausz probably has a date for that release. \n. Same thing, you can view the list of commits and see TransferReversal.php was added after 2.1.0 was released.\nIn fairness, TransferReversal isn't yet documented on stripe.com/api/docs\n. Yea, if you want the latest \"release\" you can just download the latest master branch from https://github.com/stripe/stripe-php/archive/master.zip which will include TransferReversal and everything\n. 2.1.1 was released, so this should be fixed. \n. Yeah but many people who go the php route just have like a static php site and with a single \"charge.php\" that they've copy and pasted from one of a thousand different tutorials out there.\u00a0\n\u2014\nSent from Mailbox\nOn Sat, Mar 14, 2015 at 12:26 AM, Ryan Parman notifications@github.com\nwrote:\n\nThis request: :-1: \nIf you're using require_once for including third-party dependencies in 2015, you're doing it wrong. Composer and PSR-4 FTW.\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/issues/150#issuecomment-80067249\n. I don't disagree with that. I'm just the one that had to help a decent amount of people for quite a few days with it because all the Stripe tutorials say \"Download Stripe PHP\", they don't say \"Download Stripe PHP v1.X\", \n\nThere's definitely the \"right\" way which is just download a legacy version, but then there is the \"what is easiest for users that are building their billing integration\" question. \nThat said, the amount I've had to deal with people encountering this issue has greatly fallen so I'm okay to close this. \n. Another great resource for stripe tech help is the #Stripe irc room on freenode!\n. #165 \nping @bkrausz \n. @zackkitzmiller what version of Stripe-php are you using so I can try to reproduce?\nI noticed you're json_decoding $card_on_file, it should already be an object that you can print directly. \n. Sorry about that, github autocomplete has much to be desired, @zeckdude :)\n. This will output the id for the card\n```\n<?php\nrequire_once('stripe-php-1.7.15/lib/Stripe.php');\n// set key\nStripe::setApiKey(\"sk_test_nOqmFrvF4tlbdvY7L863ccfq\");\n$o = Stripe_Customer::retrieve(\"cus_6IiLHyZvr2IS18\");\n$card_on_file = $o->sources->all(array(\n    'limit'=>1,\n    'object' => 'card'\n));\nvar_dump($card_on_file->data[0]->id);\n``\n. Hey @bkrausz, don't mean to rain on your parade but the majority of master builds failed on travis (interestingly the v2.2.0 tag succeeded). I'm gonna guess either something funky is happening on travis or maybe some sort of race condition got introduced? \n. @SteveEdson If you just do a curl requestcurl https://api.stripe.com/v1/plans -u :` does that similiarly take as long?\nThough you probably don't want to use Stripe as a database and make an API call to get all 6 plans per page load.\n. I'm assuming this won't get merged until ACH beta leaves beta\n. Well its already been renamed / aliased to external_accounts no?\n. What's the code that triggers this error?\n. I'm going to assume that you're not checking if $_POST['stripeToken'] is set to NULL?\n. If the email is in the customer field in the dashboard, then you could access it via retrieving the customer and accessing the email property. \n$customer = \\Stripe\\Customer::retrieve(\"cus_6pGaSj4tp9x5KH\");\necho $customer->email;\nhttps://stripe.com/docs/api/php#retrieve_customer\n. What exception did you get? Prefixing integers with a 0 will cause really weird issues in PHP as PHP will interpret 05 as not base 10 but base 8. Thus 010 is not 10 but 8\n. though it doesn't change the fact that 5 and 05 should return the same error, putting 9 should work even though it is single digits, but yes that doc example does use a month in the past\n. Sure, I'll submit a pull request, I was more curious into why you say that\n\"5\" as a month gave you an error but not \"05\"\nOn Mon, Sep 21, 2015 at 3:28 PM, Mamun Hoque notifications@github.com\nwrote:\n\nok then write a working example.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/pull/197#issuecomment-142127373.\n. If you're using a token, you just pass the id of the token. The address information should be part of the token. You could send the card details like before without using a token, but that would require that you are fully PCI SAQ D compliant, while tokenization allows you to be compliant with just an SSL certificate. \n\n$data = array(\n    'amount' => $amount * 100, // amount in cents!\n    'currency' => 'usd',\n    'source' => $stripe_token //where $stripe_token is a string like \"tok_XXXXXXXXXXXX\"\n    ),\n. A token can also include billing address details. When you create the token you'd include those details so that they're part of the token. You can't do that seperate token just for card number and other fields for the other fields\u00a0\n\u2014\nSent from Mailbox\nOn Fri, Oct 2, 2015 at 7:33 PM, Wilburunion notifications@github.com\nwrote:\n\nYes I know that . . .  the token is only card number, ccv, exp month and year - I am asking how to submit the name and address etc - WITH a charge when the token is used.\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/issues/200#issuecomment-145194691\n. Source works the same way as card. The issue you're experiencing is that you're now using tokens. Using the card parameter you should not be able to pass a token and billing details. If that does work, it would be a bug in the api.\n\n\u2014\nSent from Mailbox\nOn Fri, Oct 2, 2015 at 7:45 PM, Wilburunion notifications@github.com\nwrote:\n\nYes I know that also - I cannot modify the JS file because this is part of a connect system and it would then mean the  customer details get attached to the platform account and not the connected account . . .  - so the only way to do this is to create a customer, add the the details there and then use the customer account.  This works with the destination parameter using the card parameter  but not the source parameter. \nMy question was whether the \"new\" source parameter could be used like the card parameter\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/issues/200#issuecomment-145195070\n. The source parameter works the same as the card parameter. \n\nNeither \n$data = array(\n'amount' => $amount * 100, // amount in cents!\n'currency' => 'usd',\n'source' => array(\n'token' => $stripe_token, // or something similar like 'card' => $stripe_token,\n'name' => \n'address_line1' => \n'address_zip' => \n'address_state' => \n),\n)\nnor \n$data = array(\n'amount' => $amount * 100, // amount in cents!\n'currency' => 'usd',\n'card' => array(\n'token' => $stripe_token, // or something similar like 'card' => $stripe_token,\n'name' => \n'address_line1' => \n'address_zip' => \n'address_state' => \n),\n)\nPer the API docs, if you're passing a token, you would set source or card equal to the id of the token OR you set it to a dictionary / array of card details. The second option does not support tokens. \n. I'm a tad confused, there is source as an object, and then source as the property you can pass to apis like create charge and create customer.\nWhen you create a customer / charge / update a customer, source as a property is to be defined as: \n\nA payment source to be charged, such as a credit card. If you also pass a customer ID, the source must be the ID of a source belonging to the customer. Otherwise, if you do not pass a customer ID, the source you provide must either be a token, like the ones returned by Stripe.js, or a dictionary containing a user's credit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud.\nhttps://stripe.com/docs/api#create_charge\n\nSource can be either a source id (if you also pass in a customer id), a token id (note not all tokens are prefixed with tok_), or the dictionary of values containing payment details. \nSo in the curl example on the page you linked to \ncurl https://api.stripe.com/v1/charges \\\n   -u sk_test_BQokikJOvBiI2HlWgH4olfQ2: \\\n   -d source=aliacc_4hzzUhIjJ9sZZv \\\n   -d amount=1000 \\\n   -d currency=usd\nSince source is a string, source is expected to be a token (tokens exist for all the payment methods, cards, bitcoin, ACH, Amex checkout). \nYou don't need to create a customer to set the name and address fields, you would if you want to save the card token and be able to update the card otherwise you'd provide the address details when you create the token client side. \nI'm curious as to the use case of you receiving a token and you using the token in your server-side api, but you not being able to send that address info to the tokenization api. \nSince this is definitely beyond the scope of a Stripe-php library bug, I'd recommend you emailing support@stripe.com and they can help you out a bit further.\n. @godsweb unless you've built the Stripe plugin for whmcs, I'd reach out to the plugin's developer as they may be able to more easily debug it and figure out why the email address is being included as part of the request and why the domain is invalid.\n. Stripe only develops certain API libraries. Third party developers can use these libraries to build their own plugins or integrations. You're using some WHMCS Stripe plugin that was not built by Stripe but rather a third party (their contact info should be found wherever you downloaded the plugin from)\n. Some previous discussion on this #176 \n. It could very well be that your hostgator set up doesn't have composer set up / installed? You could try the manual installation documented in the readme\n. @DarkSilence since you've found the fix, would you mind submitting a pull request?\n. Ah misinterpreted the issue code\n. One thing to note about this: The client side timeout value is meant to match the time that the Stripe API will decide to timeout server-side. Changing the value means that there is now an increased likelihood that the Stripe library will return a timeout despite the API request potentially going through.\nIf you plan on doing this, I'd recommend using idempotency tokens so that you can repeat the API request without risking duplicate charges. \n. I believe the build failures were causes by the api outage last night, but re-running them would be a good idea.\n\u2014\nSent from Mailbox\nOn Thu, Dec 17, 2015 at 1:08 PM, Brandur notifications@github.com wrote:\n\n@iansltx Nice! Thanks for the contribution here! This looks pretty reasonable to me given that we do allow these to be set in other bindings languages like Ruby and that the defaults are quite optimistic. Also, +1 @matthewarkin in that idempotency keys would be highly recommended in situation with reduced timeouts especially.\nOne thing that catches me as slightly unusual is that the CurlClient is both a singleton and takes static configuration. What do you think about potentially putting the configuration in as instance variables so that you could potentially instantiate multiple CurlClients with different timeout configurations without affecting global state?\nIt also looks like the builds didn't quite make it through. Mind taking a quick look at that in case there's something worrying?\nWill also defer to @bkrausz for general thoughts on the idea.\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/pull/214#issuecomment-165534553\n. Builds fixed\n\n\u2014\nSent from Mailbox\nOn Thu, Dec 17, 2015 at 2:28 PM, Brandur notifications@github.com wrote:\n\n\nI believe the build failures were causes by the api outage last night, but re-running them would be a good idea.\nGood point! I just bumped all the failed builds to see what happens.\nReply to this email directly or view it on GitHub:\nhttps://github.com/stripe/stripe-php/pull/214#issuecomment-165556226\n. The issue with this one (I believe we solved in in irc) was that \" (test mode)\" was appended to the token. This happens when you stringify the token object in the iOS SDK instead of just grabbing the is property of the token object.\n. Hey Jonathon, I'll let someone else comment on this specific issue,\n\n\nBut in regards to getting subscriptions for a customer, there is a list subscriptions API https://stripe.com/docs/api/php#list_subscriptions, basically the subscriptions property of a customer will at most return 10 items, if you wanted more or to filter them you can use the API.\nYou shouldn't have to call getData either, to access the ID for the first subscription of a customer you could just do:\n$customer->subscriptions->data[0]->id;\n. This is a warning not an error so it sounds like you have your PHP set up so that warning are treated as errors or something. \nWhat version of libcurl are you running?\n. Invalid callback 0, no array or string given in /client/vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 120\nSeems a bit odd considering there is no line of code at 120 https://github.com/stripe/stripe-php/blob/v3.7.1/lib/HttpClient/CurlClient.php#L120\n. Hmm, I'm digging into it, though curl_setopt_array($curl, $opts); does not ever return a curl object, it just modifies the existing one and returns true or false. If it returns false the curl object should still work, just not all its options would have been set. \nI'm also confused because you're now mentioning a Fatal Error but both things you've posted are just warnings. \nWhat OS are you running so I can see if I can try to reproduce it?\n. \\Stripe\\Customer::create(\n      array(\"description\" => \"example@stripe.com\"),\n      array(\"stripe_account\" => NULL)\n    );\nshould work fine\n. Well a couple of things:\n1. To be PCI compliant and to use Stripe in production you must have an SSL / TLS certificate for your website.\n2. Never share your secret API key even in test mode.\n3. Currently your site is not giving that Connection timed out after 30001 milliseconds but rather it is saying You cannot use a Stripe token more than once: tok_17b7svFQsLVHYySNuP1ouK0i. which makes sense because you hard coded the token and are thus trying to charge it multiple times.\n. @dahomz can you provide a snippet of the code you're using?\n. Awesome! I thought there was some issue related to the new crt file. Thanks for figuring it out!\n. These seem like false positives from Avast where they do not know how to properly scan php files\n. just wanted to run that through travis\n. Have you read the manual installation instructions from https://github.com/stripe/stripe-php#manual-installation? You'll have to replace the path with the correct path and it sounds like you're using the wrong one.\n. The error message should say:\n```\n{\n  \"error\": {\n    \"type\": \"invalid_request_error\",\n    \"message\": \"Invalid key:  must be a string under 40 characters\",\n    \"param\": \"metadata\"\n  }\n}\n```\n. does the ext-mbstring dependency in the composer.json (https://github.com/stripe/stripe-php/blob/master/composer.json#L21) not handle the composer case?\n. Oh gosh while I wish that was the case tons of people I'm sure are still on older versions.\nFrom GoDaddy's support docs, their cpanel hosting defaults to 5.4.26\nhttps://www.godaddy.com/help/software-versions-shared-hosting-897\n. Can you run it again with the customer id and api key that remistr provided in her example?\n. Can you run the exact code @remistr has in her example including her api key and the customer id she included. This is to verify if the issue is with your library version or your api account.\n. its in her example at https://github.com/stripe/stripe-php/issues/270#issuecomment-230804508 you may need to refresh the page.\n. That error would indicate you tried calling the create charge api and you didn't not specify an amount. I'd suggest taking a look at https://stripe.com/docs/charges\n. Don't a number of api returned messages return mentions of support and the dashboard? Like unable to use live transfers, please email support or managed accounts not enabled please register your platform? It seems like this is poor error handling on behalf of the person integrating Stripe. I, for one, do find it interesting the number of people who come to irc who are like \"I'm getting an error when I run this code\", and the error tells them exactly what to do to fix it\n. ",
    "joshmanders": "Yeah but I'm using the latest PHP bindings for Stripe.\nhttps://github.com/stripe/stripe-php/blob/master/lib/Stripe/Charge.php#L55-L62\n. The docs need to reflect what version of the API they refer to and how to switch to docs regarding your version, as this is a very misleading doc and can cause tons of issues with developers.\n. Check if user is logged in, show them docs related to the version they are using, otherwise allow a dropdown like Angular.js does\nhttps://docs.angularjs.org/api\n. ",
    "cristiberceanu": "Yes this is good\n. ",
    "vavrecan": "Yes, it would be perfect, this is crucial feature for our business. Thank you for taking care of it - I would like to avoid having custom composer repository for live version of our application.\n. ",
    "yahelc": "@bkrausz Is a module per implementation really necessary? GAE doesn't have proprietary APIs for accessing URLFetch. It uses the native file/http wrappers (fopen, file_get_contents, stream_context_create). \nDocs are here: https://cloud.google.com/appengine/docs/php/urlfetch/\nYou wouldn't need to write a GAE-specific version as much as simply migrate from using the curl lib to using the native file/http wrappers, which should work regardless of the PHP environment.\n. Looks like GAE will be adding curl support early next year: https://code.google.com/p/googleappengine/issues/detail?id=9343\n\nWe'll be rolling out cURL support in the next App Engine release, early in the new year as part of the PHP 5.5 release. We'll provide mode information and updates when that release becomes available.\n. \n",
    "richo": "Hi @vavrecan. I work on security at Stripe.\nAs it stands, we definitely could not merge this, because the _httpRequest method does not validate certificates, and also doesn't pin to our CA bundle. I just run it in my sandbox and was able to transparently MITM connections to the Stripe API.\nSeparately, there is a larger conversation to be had about our GAE support. We've previously made changes to our bindings in order to have better GAE support, and we're keen to have this be the case in PHP as well, however it's not feasible for us to move forward in ways that could compromise the integrity of our customers integrations.\n. \\o/\n:+1:\n. Aha, I only looked at the diff and not it's mergability. Still LGTM.\n. ",
    "pdt256": "+1\n. ",
    "skyzyx": "Even better, build it on top of Guzzle 5, which already has support for pluggable over-the-wire adapters.\nGuzzle is a micro-HTTP framework more than being an HTTP \"library\", and applications which leverage it gain more with deeper integration.\n. :+1: \n. This request: :-1: \nIf you're using require_once for including third-party dependencies in 2015, you're doing it wrong. Composer and PSR-4 FTW.\n. @matthewarkin: With respect, those are called \u201cjunior developers\u201d.\nI\u2019m specifically looking for something that is professional-grade, and am hoping that the first-party SDK leans more professional instead of more amateurish. Granting this request would push the quality of the SDK the wrong way, IMO.\n. ",
    "wheelsandcogs": "Any ETA?\nHow are people working around this in the meantime for tests?\n. ",
    "ruudk": ":+1: for Guzzle 5 :)\n. :+1: \n. I now have to do this:\nphp\npublic function getCard(string $token) : Card {\n    $token = Token::retrieve($token);\n    return Util::convertToStripeObject($token->card->__toArray(), null);\n}\nand that looks very ugly :D . Next time, please release this as a new major as it's a breaking change.. First, PHPStan failed for it:\n```\n\nLine   src/Platform/StripeBundle/Service/Stripe.php                             \n\n812    Return typehint of method                                                \n     xxx\\Platform\\StripeBundle\\Service\\Stripe::uploadFil\n\n     e() has invalid type Stripe\\FileUpload.\n\n823    Call to static method create() on an unknown class Stripe\\FileUpload.    \n\n```\nWe fixed that, and then on production this happened:\n\n. I think the issue is that File.php is never loaded. The autoloader is searching for FileUpload and cannot find it. I see that you include the File.php inside init.php. But we never run include that file.\n. The standard is to use Composer autoloader, so no init.php file will be loaded. That means that the only way to solve this class alias is to create the file FileUpload.php and there include the class_alias function?. Thanks for the fast fix!! \ud83d\udc4f . Thanks for fixing it so quickly . ",
    "MeanEYE": "I have no idea how I ended up with that old code. Am terribly sorry. Shouldn't pull all-nighters that often. Thank you!\n. ",
    "thagee": "The code I have works on my local machine but not on Google App Engine (GAE).  I converted the $hearders array into a string but I wasn't getting a response back and I didn't see any changes on stripe.\n. here's my function\nprivate function _urlFetchRequest($method, $absUrl, $headers, $params)\n  {\n```\nif (!self::$preFlight) {\n  self::$preFlight = $this->checkSslCert($this->apiUrl());\n}\n$method = strtolower($method);\nif ($method == 'get') {\n  $opts = array(\n    \"http\"  =>  array(\n        \"method\"    =>  \"GET\"\n    )\n  );\n  if (count($params) > 0) {\n    $encoded = self::encode($params);\n    $absUrl = \"$absUrl?$encoded\";\n  }\n} else if ($method == 'post') {\n  $opts = array(\n    \"http\"  =>  array(\n        \"method\"    =>  \"POST\",\n    )\n  );\n  if (count($params) > 0) {\n    $encoded = self::encode($params);\n    $absUrl = \"$absUrl?$encoded\";\n  }\n} else if ($method == 'delete') {\n  $opts = array(\n    \"http\"  => array(\n        \"method\"    =>  \"DELETE\"\n    )\n  );\n  if (count($params) > 0) {\n    $encoded = self::encode($params);\n    $absUrl = \"$absUrl?$encoded\";\n  }\n} else {\n  throw new Stripe_ApiError(\"Unrecognized method $method\");\n}\n$header_string = '';\nforeach($headers as $header) {\n    $header_string .= $header . '\\r\\n';\n}\n$opts['http']['header'] = $header_string;\n$opts['http']['timeout'] = 80;\n$absUrl = self::utf8($absUrl);\n$context = stream_context_create($opts);\n$rbody = file_get_contents($absUrl, false, $context);\n$responses = $this->parse_http_response_header($http_response_header);\n$rcode = $responses[0]['status']['code'];\nreturn array($rbody, $rcode);\n```\n}\n. I get this error code running GAE on local machine\nfile_get_contents(https://api.stripe.com/v1/customers?email=info%40djandevs.com): failed to open stream: HTTP request failed! HTTP/1.1 401 Unauthorized\n. the file_get_contents puts data into the $http_response_header variable, but the problem isn't that its one line before that.  For some reason my apikey is not enough. Do I need to provide something else in the url for it to work?  If you click the link in my last response it's asking for a username and password.  where do I provide this info?\n. I'm not sure what to put for the username or password.\n. I have this for my headers array.\n$headers = array('X-Stripe-Client-User-Agent: ' . json_encode($ua),\n                     'User-Agent: Stripe/v1 PhpBindings/' . Stripe::VERSION,\n                    'Authorization: Basic ' . base64_encode($myApiKey.':'));\nand it's still not working.\n. Yes that fixed the issue.  Thanks for all the help!\n. ",
    "herreovertidogrom": "There is a library called PURL, which I successfully used to hack myself around this problem on other payment solution, such as the ridicoulously difficult to work with Paypal, and the design-deficient NETS payment provider.\nCheck it out here!\nhttps://github.com/azayarni/purl\n. Google just enabled curl on it's servers. You need to add\nextension = \"curl.so\"\nto the php.ini file in your app and cUrl should finally work\n. ",
    "dannyvankooten": "Hi Brian,\nThat's weird, as my code is definitely getting to that line. Echo'ing PHP_VERSION gives me 5.6.99-hhvm. Running hhvm --version gives me HipHop VM 3.2.0 (rel), same goes for php --version.\nI basically just installed HHVM from the prebuilt Ubuntu 14.04 package.\nHope that helps!\n. Hi Brian,\nThanks, as it turns out my Stripe API is at 1.13.0 so you're probably right - this should be fixed. Will ask the developer to update!\nThanks for the quick help. :)\n. ",
    "chronon": "I figured a new VERSION was a new release, but if that's not the case this issue should be closed. \n. ",
    "rp-eric": "Thanks for that information @bkrausz. I have been trying to piece together what might have happened that caused this discrepancy, but nothing makes sense. I would have had to make my last composer update before September 23rd, as that is when 1.17.2 was added to Packagist.org, but that is a few weeks before I started using Stripe at all.\nNonetheless, something happened and I must have been on version 1.17.1 or less. The bypass test for HHVM on that version was strpos(PHP_VERSION, 'hiphop') !== false. However, PHP_VERSION on my build is 5.6.99-hhvm, so the test failed.\nI was certainly debugging the code and had to make the patch I did so that I could use the Stripe SDK. Updating to 1.7.2 or dev-master also fixes the issue because of the new bypass test.\nRegardless, both fixes are still relevant. When HHVM does add the necessary support, it will have to be seen whether they still set $errno to NULL when stream_socket_client succeeds. Currently that is what stream_socket_client does on my HHVM build which is a few weeks old. As a note, when a connection timeout occurs the error code is an integer.\nRegarding the other fix for testing if $result is false, that is based on documented behaviour from php.net/stream_socket_client:\n\nIf the value returned in errno is 0 and the function returned FALSE, it is an indication that the error occurred before the connect() call.\n\nThis behaviour is easy to elicit on both Zend Engine and HHVM just by typing in garbage for $remote_socket. On HHVM, a connection timeout will cause the return to be false (not tested on Zend Engine). On Zend Engine, using an unsupported socket transport protocol will cause the return to be false (not tested on HHVM). I presume there are many other causes.\n. ",
    "jacksonj04": ":+1:, I'm in a similar position (and would happily contribute)\n. I'm all for ditching 5.3 support. Users still on 5.3 can continue to use the 1.x branch, but we really shouldn't be building ongoing support for an EOL'd product into the library.\n. ",
    "alexbilbie": "If you could create a 2x branch that'd be great :smile: \nCan I recommend you have a look at Facebook's new 4x SDK, it's a really nice upgrade to their old 3x codebase - it's a good place to take some inspiration from in terms of updating a legacy codebase to modern PHP practises.\nI'd be happy to set the minimum as 5.3 if that's what most people are using, but as it is a deprecated version of PHP (and 5.4 will be in less than a year) we should really be looking to the future - as I said, people can always use the old 1.x branch.\nIn response to your other points:\n- PHPUnit = :+1: \n- Autoloading on demand would be great to reduce memory of loading in every single file in the SDK.\n- Namespacing will cut out some of the pain mentioned in #54\n- Everything should be instantiated on demand with new where it makes sense, otherwise have a factory to create it where you want a facade (in the case where there are lots of options to set on instantiation)\n- Drop array access and have explicit getter methods (which will make discovery sooooo much easier). Internally objects can just hold their data in an array.\n. Of interest Jordi says the percentage of PHP version for requests to Packagist on 13th November were:\nPHP 5.5     48.87%\nPHP 5.4     28.61%\nPHP 5.3     14.85%\nPHP 5.6      7.67%\n. ",
    "alcohol": "Just a note, 5.3 is already end of life. I would recommend 5.4 at the very least.\n. ",
    "EminezArtus": "I want to let you know how disappointed I am with how the php api was built. This is the most bloated piece of software I have ever dealt with. I Thought all I was going to need was to sign up and make a simple php curl script and be on my marry way, but instead I had to install a library of code and learn how it works before I could even get started. Please don't code for me instead make a list of commands we send to your server and let the programing done by the programer.\n. Thank you very much i managed to get a script going tiny in size.\nSent from my iPad\n\nOn Dec 16, 2014, at 12:35 AM, Brian Krausz notifications@github.com wrote:\nPlease don't code for me\n@EminezArtus the goal at Stripe is to offer both, and we in no way require the use of our bindings in order to use our API. You are welcome to write a simple PHP curl script to hit our API, and we provide examples of the curl queries you would run[1] to achieve that. However, our bindings provide several features on top of that, for example we check SSL certificates against a blacklist[2], which curl doesn't provide out-of-the-box, and is a valuable security feature since Heartbleed was announced.\nIf you have specific feedback on how we could improve the bindings please do let me know in new Github issues, on our mailing list, or privately at bkrausz@stripe.com, but we're never going to force anyone to use our bindings. I'm personally incredibly grateful that @bakura10 maintains zfr-stripe, as more options are great to have!\n[1] https://stripe.com/docs/api/curl\n[2] https://github.com/stripe/stripe-php/blob/master/lib/Stripe/ApiRequestor.php#L356-L389\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "arcanedev-maroc": "Hi everyone,\nI'm working on my own STRIPE package with PSR-4, PHP >= 5.4.0 and PHPUnit for testing.\nI changed the structure of the STRIPE library (Semantic structure and for autoloading).\nhttps://github.com/ARCANEDEV/Stripe\n- TODOS:\n  - Exctract the curl function from Requestor and using a dedicated class instead (Utilities => CurlRequest Class).\n  - More tests and code coverage.\n  - Mockery for curl request.\n  - Refactoring.\nFeel free to send a pull request if you've made an improvement :+1:.\nPS : Sorry for my bad English :stuck_out_tongue_closed_eyes:.\n. :+1: \n. Check this one: ARCANEDEV/Stripe\n. You're welcome @brandur-stripe \ud83d\udc4d . How about the short array syntax in PHP 5.4 ?. I think you can remove this line (171: $base = static::baseUrl())\n. http://php.net/supported-versions.php\n\nVersion specific notes\nPHP 5.6\nAs it is the final PHP 5 release, support for PHP 5.6 has been extended: active support will run for an additional four months, and the security fix period has been doubled from one to two years. Other releases are unaffected.. I think this PR is a breaking change because it replace Stripe\\Card to Stripe\\AttachedObject object.\n\nSkipped: https://github.com/stripe/stripe-php/blob/master/lib/Util/Util.php#L81\nTry to var_dump($source->card) to see the result.\ncc: @ob-stripe . Try to add this test in TokenTest class to see the issue:\n```php\n/* @test /\npublic function it_can_create_card_token()\n{\n    $token = self::createCardToken();\n$this->assertInstanceOf(Token::class, $token);\n$this->assertSame('card', $token->type);\n\n$this->assertInstanceOf(Card::class, $token->card);\n$this->assertSame('Visa', $token->card->brand);\n\n}\n/\n  * Create a card Token for tests\n  \n  * @return Token\n  /\nprivate static function createCardToken()\n{\n    return Token::create([\n        'card' => [\n            'number'    => '4242424242424242',\n            'exp_month' => date('n'),\n            'exp_year'  => date('Y') + 1,\n            'cvc'       => '314',\n        ]\n    ]);\n}\n```. Can you try to remove/revert only this line and see if the tests passes ?\nIf it passes, you can close #396 without merging. ",
    "samvaughton": "Just as a note for anyone out there you can use dev-master#commit-hash to lockdown a specific version. Eg dev-master#7192b556801973954e21bf37ec572772c29727c0.\nSee https://getcomposer.org/doc/04-schema.md#package-links\n. ",
    "jpasilan": "Can you create a tag for this? Thanks!\n. ",
    "mlmanapat": "It is the same, but I discussed with @amfeng earlier today and we thought it seemed reasonable to add the \"convenience\" methods (which also correspond to explicit actions in the dashboard, so there's some sense of global coherence).\n. actually, if there's an existing key in fraud_details (e.g., \"stripe_report: fraudulent\"), you'd have to not overwrite that, so it's not exactly the same (unless I'm misunderstanding how that operation works?).\n. Cool, merging now. Will plan on cutting a release next week. Thanks!\n. ",
    "wangjohn": ":+1: looks good other than that comment! Thanks again for doing this!\n. Hmm, I would prefer to have this passed in more explicitly, like for instance if the api resource had a class that did an override over the default apiBase (similar to how className works). I think this makes it easier to keep track of things, as you don't have to update $apiUploadPaths whenever you update a class name. It also makes things more explicit, which is nice.\n. ",
    "maxwells": "hey Brian -- just as a heads up, I've updated this PR by removing BitcoinTransaction as a top level API object. And is the workflow now merging this into experimental-v2 as well?\n. Just saw that second comment -- I'll update that shortly\n. Yes. They're only createable through Customer action (eg. transferring funds to the receiver). I'm certainly open to having the BitcoinTransaction sublist on BitcoinReceiver just be associative arrays, though\n. I chatted about it with @raycmorgan and @canderson and we felt it was an unnecessarily granular unit to expose at the bindings level. It represents the set of transactions that fill a bitcoin receiver (customers pushing coins to the receiver) and we couldn't think of much of a valid use case for querying those outside the context of a bitcoin receiver. The proposed changes here does allow them to be pulled as a sublist\nphp\n$receiver->transactions->all();\nHow do you feel about this approach?\n. ",
    "chadicus": "@bkrausz  #121 No where near complete, but its a start\n. @bkrausz The minimum PHP version for PHPUnit is 5.3.3.  The phpunit pear channel was removed last year.\nIf you want to run tests for version 5.2 you must either not use PHPUnit or find an older version of phpunit and keep it with the repository.\n. @GrahamCampbell the separate commits were so that the PR was easier to review, I'm happy to squash the commits if the project owners want me to do so.\n. Just FYI it looks like to build failed due to connectivity.\n. @bkrausz I've added a second pull request #125 for the experimental-v2 branch. I'll let the project owners decide which route they want to go.\n. Probably best to just close this and have it released with version 2\n. I realized this is a repeat of #111.  I think my PHPUnit pull request #121 will help\n. Whoa, didn't expect this to get merged. and indeed I have another PR. \n. The account for stripe would need to be set up with coveralls, but it's very simple to do.\n. @bkrausz the unit tests will need to be updated to use the @covers annotations.\nAlternatively I think I can remove the forceCoversAnnotation=\"true\"  config from the phpunit.xml file which should default coverage. I'll add a commit that does that.\n. @bkrausz I also have a PR for Scrutinizer #128 That account for stripe needs to be created as well if you want to use scrutinizer for phpcs\n. @bkrausz scrutinizer is free for open source repositories.\n. Also scrutinizer gives you more than just PHPCS it also runs PHP Depend and PHP Mess Detector \n. @bkrausz close? I read the twitter discussion.\n. Yes, since ZF2, they use PSR\n. Awesome!\n. @bkrausz you can always set you IDE to display the tab as 2 spaces\n. Fixed\n. ~~These tests did not use the original StripeTestCase As they did not need any of the additional functionality, i felt it was best to not add that here~~\n@bkrausz  All tests now extend Stripe_TestCase\n. agreed, but that should not go into this pull request\n. @GrahamCampbell  see #128 \n. fixed.\n. ",
    "joshhornby": ":+1: \n. ",
    "Rican7": ":+1: \n. Yea, no problem. Just hoping I'll still be able to use this library once PHP 7 comes out, haha.\nYea, the redundancy in \\Stripe\\StripeObject is a bit strange, but if having the name consistent between different SDKs like that is important, then its not a bad idea.\n. ",
    "yurytolochko": ":+1: \n. ",
    "phillipsnick": ":+1:  \nHaving fun trying to unit test my payment service because I can't mock static methods!\n. ",
    "armetiz": "For people trying to unit-test payment, you should make a wrapper around Stripe.\n``` php\nuse Acme\\Payment\\Stripe\nclass Stripe\n{\n  static private $instance;\npublic function __construct($stripeSecretKey)\n  {\n        if(self::$instance) {\n            throw new \\RuntimeException('Stripe could not be instantiate more than once. Check PHP implementation : https://github.com/stripe/stripe-php');\n        }\n    self::$instance = $this;\n\n    \\Stripe\\Stripe::setApiKey($stripeSecretKey);\n\n}\npublic function payAmountWithToken($token, $amount)\n  {\n    \\Stripe\\Charge::create([]); // use correct values\n  }\n}\n```\nI made a singleton to avoid confusion. This is a limitation but in many case you will not need to have more than one instance.\nYou will be able to inject your custom wrapper / mock and make your unit-test ;)\nRegards.\n. ",
    "adrienbrault": ":cry:\n. ",
    "KostyaChoporov": "Also will be great to make some event solution. For example I want log all requests, and i don't know hot to implement it without wrapping original requests :cry: \n. ",
    "lunetics": "@KostyaChoporov i think it should be psr-7 compliant for that, then you could use your own client e.g. guzzle with logging.\n. ",
    "robfrawley": "+1\nPing me if I can help actually make this happen in any way; glad to donate some hours toward this common good; the current reliance on static calls is...depressing. ;-)\n. ",
    "zarloproperty": "Interesting... \n. ",
    "dann95": ":+1: . ",
    "matjack1": "While I \ud83d\udc4d this request, I'm currently using as a simple workaround these mock classes:\n```\nclass MockStripeCharge {\npublic static $chargeData;\n\npublic static function create() {\n    return self::$chargeData;\n}\n\n}\nclass MockStripe {\npublic static function setApiKey() {\n}\n\n}\n```\nthat I inject with this function in my class:\npublic function injectTesting( $stripe, $stripeCharge ) {\n    $this->stripe = $stripe;\n    $this->stripeCharge = $stripeCharge;\n}\nas $chargeData I use a JSON with all the needed fields, like this:\n$charge = json_decode( $chargeJson );\nMockStripeCharge::$chargeData = $charge;\nand then:\n$myClass->injectTesting( 'MockStripe', 'MockStripeCharge' );\nSo my code doesn't use Stripe directly, but like this:\n$stripeCharge = $this->stripeCharge;\n$charge = $stripeCharge::create(...);. ",
    "Bilge": "Another alternative for your consideration, Stripe provider for Porter. This implementation is currently incomplete but used in production since August 2016. Adding missing API features is easy should anyone feel so inclined.. ",
    "Petah": "This would be super useful. Our main use case is we have different stripe accounts used in the same app, so we need a way to use different keys. Having to call setApiKey before every call is not ideal.. Also this could be backwards compatible if you just made the static class return an instance of a class and forward static methods.\n```\npubilc class StripeInstance {\n    public function someCall() {\n}\n\n}\npublic class Stripe {\n    private $instance;\n    private static function getInstance() {\n        if (!static::$instance) {\n            static::$instance = new StripeInstance();\n        }\n        return static::$instance;\n    }\n    public static function someCall() {\n        return static::getInstance()->someCall();\n    }\n}\n```. ",
    "timbroder": "\ud83d\udc4d . This is awesome! I'll be able to remove some home-grown code that does this in app land. ",
    "chdeliens": "+1 to ditch the static! . @bakura10 last commit on https://github.com/zf-fr/zfr-stripe was more than a year ago, how far behind are you from the official PHP library?. Thanks, I switched to the one from Cartalyst. I can now inject it in my service classes, stub/mock it and do my unit-testing! :). ",
    "quietseditionist": "@GrahamCampbell Be aware that cartalyst/stripe does not currently support multiple plans per subscription.. ",
    "ostrolucky": "cartalyst/stripe is unfortunately just a thin layer over submitting, receiving raw array/json data. Stripe-php will give you objects all the way and you can even call actions on them right away, in active record style.. Here's an httplug stripe adapter I made https://gist.github.com/ostrolucky/7e2a8916283bcf5dba9829b943c6d0f0\nUsage:\nphp\n\\Stripe\\ApiRequestor::setHttpClient($stripeHttpClient);. ",
    "smknstd": "This worked for me http://docs.mockery.io/en/latest/reference/public_static_properties.html (+ this and this )\n/**\n * @runInSeparateProcess\n * @preserveGlobalState disabled\n */\npublic function testMyStripeFeature()\n{\n      \\Mockery::mock('alias:\\Stripe\\Charge')\n            ->shouldReceive('create')\n            ->andReturn((Object)[\n                \"id\" => \"1234\"\n            ]);\n      ...\n}. ",
    "coveralls": "\nChanges Unknown when pulling 851db7047f12594bd6fdcf766dbcbc7397e6d222 on chadicus:feature/v2/coveralls into * on stripe:experimental-v2*.\n. \nChanges Unknown when pulling 9d4b4d5d9ef7b356f14d571217f670ca29a4ed8f on chadicus:feature/v2/coveralls into * on stripe:experimental-v2*.\n. \nCoverage remained the same when pulling 13c995b6a2a1e5184608ae4926da7a85728a9397 on chadicus:feature/v2/scrutinizer into 0d4335bc8684392ebcc835cddbcb67e1ea684ac8 on stripe:experimental-v2.\n. \nCoverage remained the same when pulling adf616c56240c927e8fd457f696dee4209340fb6 on chadicus:bugs/v2 into 0d4335bc8684392ebcc835cddbcb67e1ea684ac8 on stripe:experimental-v2.\n. ",
    "causehacker": "Running PHP 5.4.36 and getting the same here. Rolled back to 1.17.3 and back in business. \n. ",
    "jbrooksuk": "I think it's related to the $token variable being null. We generate that via JavaScript on submit, then that gets passed through to the form.\n. Ok, I found the issue. My publishable key is no longer being printed onto the page. Sorry for the report.\n. ",
    "DDynamic": "Yes, defiantly. I will be stuck on Version 1.8.* till we can use this without composer. Just include the following in your API code on pre-2.\n   require('path/to/stripe-php/lib/Stripe.php');\n. Sounds nice :)\n. ",
    "marcusds": "Created a PR #141, tried to follow your code styling (as much as I hate starting braces on new lines ;))\n. ",
    "jimrubenstein": "FWIW this build is failing due to a test in the CustomerTest.php:159 file. Which is unreleated to this pull request.\n. I generally prefer to import at the top of the file, just so all the references are in one place rather than scattered throughout the file. Plus it allows you to alias (if you want/need) without modifying the implementation code below.\nBut it's a single line, and only used once, so it really doesn't matter. Looks like a bike shed from here, haha\n. I'll drop that out and push back in.\n. ",
    "hardlynoticable": "Is this an autoloader that users can use instead of using Composer?  \nCould you explain why it's needed, what it does, and how to use it?\n. ",
    "MotionMaker": "It appears that TransferReversal.php not included in the zip download for  stripe/stripe-php-2.1.0/lib/TransferReversal.php \n. Thanks after some digging I kinda got that but glad you confirmed. So just drop that last line from init.php and we are good to go?\n. Matthew thanks for the help and heads up info. \n. ",
    "ghost": "Sounds good, just wanted to clarify. In the readme it may be worth noting what versions the manual install applies to as it's a potential source for confusion for people currently updating their APIs. Appreciate the responses.\n. Oh, it's no problem. Was easy to resolve and use 2.1.0 manually. Appreciate the response and details on the issue.\n. While you're correct that this should be \\Exception to catch exceptions, json_decode doesn't actually raise on decoding failure, so that catch can never be hit regardless.\nWe should change this to a $resp === null check which, given that we'll never actually return null as our response body, is the correct way to tell if json_decode failed.. It depends on how much we want to treat our objects as Arrays. If we want them to be super Array-y, then count() would return the number of keys, regardless of if it's a hash or array.\nI'm actually a bit disinclined to add more magic to our keys. If the only issue here is additional_owners updating, we should fix that in particular. There's been a lot of talk about making additional_owners a subresource to avoid the lurky array-update semantics.. Conceptually a big fan...why do we have context is nothing inside of our error logging uses it?. Ah, didn't realize there was an interface there. This looks great to me then!. Should we also mention \"or an array with a key of 'id'\"?. lgtm. ",
    "syrakozz": "you can make init.php  and include stripe.php in it\n. ",
    "bateller": "This is why the legacy version exists (found here: https://github.com/stripe/stripe-php/archive/v1.18.0.tar.gz). \nIf you are going to use old calls, use the old API library. If you want to use the new API with namespaces, update your code accordingly. Pretty simple stuff.\n. Stupid user error. As the output says, my input $stripeID was null. Disregard.\n. ",
    "nodesocket": "I am looking at a strace:\nAnd something sticks out right away:\naccess(\"/etc/pki/nssdb\", W_OK)          = -1 EACCES (Permission denied)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 491164679}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736491_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 491319687}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736492_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 491414972}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736493_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 491498089}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736494_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\n...\nclock_gettime(CLOCK_MONOTONIC, {3641736, 523874851}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736877_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 523945251}) = 0\naccess(\"/home/commando/.pki/nssdb/.3641736878_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 524073558}) = 0\naccess(\"/home/commando/.pki/nssdb/cert9.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert8.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert7.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert6.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert5.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert4.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert3.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/cert2.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/key3.db\", F_OK) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/key2.db\", F_OK) = -1 ENOENT (No such file or directory)\nopen(\"/home/commando/.pki/nssdb/pkcs11.txt\", O_RDONLY) = -1 ENOENT (No such file or directory)\naccess(\"/home/commando/.pki/nssdb/secmod.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 525222663}) = 0\naccess(\"/etc/pki/nssdb/.3641736525_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 525320598}) = 0\naccess(\"/etc/pki/nssdb/.3641736526_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\n...\nclock_gettime(CLOCK_MONOTONIC, {3641736, 557952017}) = 0\naccess(\"/etc/pki/nssdb/.3641736924_dOeSnotExist_.db\", F_OK) = -1 ENOENT (No such file or directory)\nclock_gettime(CLOCK_MONOTONIC, {3641736, 558083630}) = 0\nLots of disk access for /home/commando/.pki/nssdb and /etc/pki/nssdb. I'm not sure if this is caused by the Stripe lib.\n[Note from @bkrausz: trimmed the message so it doesn't make the thread annoying to scroll down]\n. I'll create a fresh php-fpm environment and just create a simple script that does:\n$customer = Stripe_Customer::retrieve($customer_id)\n$incoming_invoices = Stripe_Invoice::upcoming(array(\"customer\" => $customer_id));\nAnd report back.\n. Just bench tested this, and confirm the memory bloat is entirely after loading Stripe. I made a quick repo of the exact code I am using in my bench test:\nhttps://github.com/nodesocket/stripe-php-memory-benchmark\nHere is php-fpm processes memory usage before calling test.php.\n\nAnd after:\n\nNotice pid 8786 is now using 98MB of res memory.\n. @bkrausz Did you see my previous reply. Were you able to reproduce from your end?\n. Upgrading to version 2.1.1 of the Stripe lib seems to have resolved the issue.\n. ",
    "rojobo": "I'm afraid something else might break\n. thanks a lot @bkrausz \n. ",
    "RazorCommerce": "Thanks for your reply. The init.php is required in https://github.com/RazorCommerce/razor-commerce/blob/master/razor/src/Payment/Method/Stripe/Stripe.php on line 76 and 87. \nThe error reported happens at install (of Razor Commerce) and neither of those methods that call init.php run at that point. So what puzzles us is why in this situation there is any attempt to load anything from Stripe. Again this doesn't happen on most servers, just this particular one... but it's still important to us to find out why. And in particular why the Stripe API and this file, rather than some other file. \n. Sorry wrong Issues.\n. Sorry, wrong Issues.\n. ",
    "trevorgehman": "Can confirm I've also experienced this issue.\n. ",
    "SteveEdson": "But doesn't the collection contain a iterable list of Plan objects? So the type hint makes it possible to get code completion when iterating, e.g:\n``` php\n$plans = Plan::all();\nforeach($plans as $plan) {\n    $plan-> // Method completion\n}\n```\n. Unfortunately. The command:\nsh\n$ curl https://api.stripe.com/v1/plans -u my_key -s -w \"@curl-format.txt\"\nProduces:\ntime_namelookup:  0.068\n       time_connect:  0.317\n    time_appconnect:  1.145\n   time_pretransfer:  1.145\n      time_redirect:  0.000\n time_starttransfer:  1.486\n                    ----------\n         time_total:  1.487\nI'll look into caching the data, or not using it until it is required.\n. No problem.\nThat was on my personal machine over a 50Mb connection, however we're seeing times of ~1s from a EC2 instance in eu-west-1b.\n. ",
    "nicobn": "This specific use case works well, but it is neglecting another use case which has an actual runtime impact if not handled properly. IDEs won't detect that the following code will cause a runtime error:\n``` php\npublic function a() {\n    $this->b(Plan::all());\n}\npublic function b(array $plans) {\n    // ...\n}\n```\nCalling a() raises the following error:\nArgument 1 passed to Test::b() must be of the type array, object given,\n. ",
    "zackkitzmiller": "You got the wrong Zack. ;)\n. No worries at all. Probably put me at the top because I contributed to this lib a while back.\n. ",
    "zeckdude": "@matthewarkin I'm using version 1.7.15\n. ",
    "russelldavis": "There's a Travis failure, otherwise looks good to me. :+1: \n. If \"Users sometimes surface the error messages to customers\" is the problem, mentioning the stripe dashboard is also going to cause confusion.\n. ",
    "pittyplatsch": "I did not run the test suite. Guess it needs some changes too unless I'm mistaken with this whole issue.\n. I get JSON when calling getHttpBody on an exception and and array when calling getJsonBody. So to me this seems mixed up...\n. Thanks for clarifying. However I find it odd that getJsonBody does not deliver JSON while the other method does...\n. ",
    "strgg": "the use of list() is also STILL incompatible in the stripe-php library (it only affects at rare error , but still. I debugged 2 hours fixing the code. it's a sign of complete incompetence of stripe-php and its users and contributers that those incomptabilities have not been raised to awareness and fixed too. .... to be found easily in ApiResource.php\nhttp://php.net/manual/de/function.list.php\nOne of the errors can be reproduced if you switch to testing/sandbox mode. Then input a valid real world credit card (instead of the testing credit cards stripe provides you with). It throws a Fatal Server Error which can be traced back to the use of LIST()!!!!!!!!!!!!!!!!!!. @ob-stripe \nI don't complain about the API (Server Stripe) but how the code in stripe-PHP handles the response and lacks correct exception handling. When you echo $response in ...lib/ApiResource.php on line 120 AFTER reproducing an error (Testmode, non-test-creditcard), then you will see an empty value ... which ... is not allowed in PHP-7 anymore (see CHANGELOG on the list page at php.net).\nThe error occurs in stripe-php's library and not in ours (Magento).. thanks for your time. ",
    "rayjamescdl": "ok, thx.\n. ",
    "blaugueux": ":+1: \n. ",
    "hajindersingh645": "@matthewarkin I have been using the following code\n$charge = \\Stripe\\Charge::create(array(\n      'amount' => $actualFee,\n      'currency' => 'usd',\n      'source' => $_POST['stripeToken'],\n      'application_fee' => $applicationFeeinCents\n    ), array('stripe_account' => $userAccount['stripe_acc_id']));\nWe are deducting fees on every transaction, after getting $userAccount['stripe_acc_id'] which is stripe account id saved in our database as you would have noticed.\nThanks\n. @matthewarkin I surely check for that. But even if that is the case why it is working on test environment. Can you enlighten on that please?\n. ",
    "stripecodahale": "s/colorize/syntax highlight/\n. ",
    "cupcait": "Yup, thanks! I forgot to put a note that this is a WIP (currently debugging). Will address the comments and ping here when tests pass and I think it's ready for another look.\n. No worries :) I probably would have needed some of this feedback eventually anyway!\n. r? @bkrausz Ready for another look!\ncc @kyleconroy \nI added the old tests back in (I can remove some if you think it's overkill). I'm also a bit unsure about my new testList(), which uses existing data on a heavily used test account. I think this should be pretty stable but am open to feedback.\n. ",
    "xavismeh": "Hello @bkrausz,\nAll fixes are the result of an analyze using https://github.com/FriendsOfPhp/PHP-CS-Fixer default values (PSR2 + couple of others).\nFor if/else return subject, I personally prefer to avoid \"obvious\" statements, lowering files' number lines of code and allowing to make it easier to read/debug. My 2\u00a2\n. Hello @kyleconroy. All changed have been rerun and now take into consideration the new commits made between my PR and the last code modifications. Let me know if you need anything else.\n. @kyleconroy when you talk about white spaces, do you mean https://github.com/stripe/stripe-php/pull/190/files#diff-5dadb2515d8061f081193fcd74a72591R5 for instance ? \n. ",
    "joshluongo": "@bkrausz I agree with you, My method is not the right way to achieve this, I needed the functionality asap for my implementation so it met my requirements.\nI think having getLastResponseHeaders would be a worthwhile change to make.\n. ",
    "jxu577": "@bkrausz sg, I made some tweaks to mock out the response \nThe response code is behind a version gate, so I left the old 400 handling also.\n. Cool, I added in a comment about the backwards compatibility, added a fail for if the exception is not thrown, and went with not writing the 2nd test. \n. Yep, that is a known error. I was going to tag the subs team for review on these when they are ready, so you don't need to worry about reviewing things :) unless you would like to for consistency sake. \n. r? @kyleconroy @stripe/api-libraries \n. @bkrausz ^Is this changelog update necessary? Is there anything that needs to be done for the version upgrade?\n. fixed: https://github.com/stripe/stripe-php/commit/10c6eea0834240024b2876f2c57d08162a7c41e0\n. ",
    "thob": ":+1: \n. ",
    "leonar15": "Thanks for accepting my PR :+1: \nNow to the other point I brought up, is it possible to expose an indicator the refund status on the BR object itself? Possibly a \"refunds\" array, or at the very least an \"amount_refunded\" param?\n. ",
    "sdeering": "@bkrausz - Standalone accounts does not work in UK.\nWhen I create a deferred standalone account I get this error: \n\nAssuming you cannot create deferred standalone accounts... which makes the \"managed\" property to false redundant... Ideally being able to create deferred standalone accounts would be highly beneficial until managed accounts comes along.\nJust to confirm with you that would be possible currently in UK?\n1. create a standalone account using AUTH (create account page flow) only\n2. use the API to charge the account and transfer to a destination\n3. this destination can be another standalone account (again created using AUTH)\n. Thanks mate will try and report back.\n. ",
    "MamunHoque": "Ok then make it 12. :) \n. ok then write a working example. \n. ",
    "Wilburunion": "Yes, that is how I did it - and tried using a variable and direct text 'acctxyz ' as well  - but the code uses \n$charge_object = \\Stripe\\Charge::create($data);\nwhere $data is an array as you show - but \"destination\" works without the 'source\" => TOKEN\n. Yes . . . that is how I did it\n$data = array(\n    'amount' => $amount * 100, // amount in cents!\n    'currency' => 'usd',\n//    'source' => $token,\n    'card' => array(\n      'number' => $order->payment_details['cc_number'],\n. . .  [more parameters]\n      'address_state' => uc_get_zone_code($order->billing_zone),\n    ),\narray('stripe_account' => $ucapikey)\n  );\n. Oh . . . in the charge_object - not in $data . . . OK - I will give that a shot\nThanks for being on-line !!!\n. AND . . . it worked !!!\nClose this - as fixed !!!\n. Yes I know that . . .  the token is only card number, ccv, exp month and year - I am asking how to submit the name and address etc - WITH a charge when the token is used.\n. Yes I know that also - I cannot modify the JS file because this is part of a connect system and it would then mean the  customer details get attached to the platform account and not the connected account . . .  - so the only way to do this is to create a customer, add the the details there and then use the customer account.  This works with the destination parameter using the card parameter  but not the source parameter. \nMy question was whether the \"new\" source parameter could be used like the card parameter \n. OK - you are saying it DOES NOT work the same way as the card parameter - or the name  address etc should be able to be passed in an array calling the token like this \n$data = array(\n    'amount' => $amount * 100, // amount in cents!\n    'currency' => 'usd',\n    'source' => array(\n      'token' => $stripe_token,    // or something similar like 'card' => $stripe_token,\n      'name' => \n      'address_line1' => \n      'address_zip' => \n      'address_state' => \n    ),\n  )\nIs there a list of parameter differences between source and card - somewhere ?? \nDestination, description, application fee works.  I can create a customer and then update the customer details . . . which then include the name address etc . . .  so while you might be correct it is perceived as a \"bug\" in the api - the issue with PCI compliance is the card details  - not the name and address.\n. OK thanks . . .  you realize you ARE saying they DO NOT work the same.\nThe API docs are completely silent on this however - for the ones I have access to on stripe.com\n'source' according to you ONLY supports a token in the charge vernacular but read =>  https://stripe.com/blog/unifying-payment-types-in-the-api\nWhereas - at least in the curl example from above 'source' supports at least five parameters I see\n\"source\": {\n    \"id\": \"aliacc_4hzzUhIjJ9sZZv\",\n    \"object\": \"alipay_account\",\n    \"created\": 1424987420,\n    \"username\": \"maidongxi@example.com\",\n    \"reusable\": true,\nBut you are saying the ONLY way to get the name address etc in the order is to pass it to the token first at creation\nHere is s test order - that if a customer had been created first would read with a name and address etc filled in -so I guess that is the dodgy - wonky issues of the API.\namount: 1624\ncurrency: \"usd\"\nrefunded: false\nsource:\nid: card_16rH8OHnLNf9lQskQiLXQX9W\nobject: \"card\"\nlast4: \"5556\"\nbrand: \"Visa\"\nfunding: \"debit\"\nexp_month: 1\nexp_year: 2017\nfingerprint: \"jtL7XFd6PPjnR63c\"\ncountry: \"US\"\nname: null\naddress_line1: null\naddress_line2: null\naddress_city: null\naddress_state: null\naddress_zip: null\naddress_country: null\ncvc_check: \"pass\"\naddress_line1_check: null\naddress_zip_check: null\ntokenization_method: null\ndynamic_last4: null\nmetadata:\ncustomer: null\ncaptured: true\nbalance_transaction: \"txn_16rHBlHnLNf9lQskclXwg0tv\"\nfailure_message: null\nthanks for your help\n. ",
    "varunjoshi12": "Hi,\nI have to transfer fund from one stripe account to another stripe account using php for this i used the below code.\n``` php\n\\Stripe\\Stripe::setApiKey(\"mysecretkeyxxxxxxxxxx\");\n$charge = \\Stripe\\Transfer::create(array(\n  'amount' => 10,\n  'currency' => \"usd\",\n  'destination' =>{CONNECTED_STRIPE_ACCOUNT_ID} \n));\n```\nBut i am not getting how to get stripe account id please help me.\nThanks in Advance.\n. ",
    "olivierbellone": "Hi @varunjoshi12, this issue was about a different problem and is already closed.\nGithub issues in general are more about bugs or feature requests. If you have usage questions, you should write to support: https://support.stripe.com/email.\n. Aww, looks like yield was introduced in PHP 5.5 :(\nI'll see if I can update the PR to make it compatible with PHP 5.3 and 5.4.\n. There we go! I replaced the function with yield with a new AutoPagingIterator class that implements Iterator. The code is a bit clunkier but I guess that can't be helped.\n. @brandur Thanks for the feedback! I updated the PR with your remarks:\n- the request parameters are now saved in Collection, and StripeObject and ApiResource are untouched.\n- I added a short documentation to autoPagingIterator() (stolen from the Java bindings)\n. @brandur Right, this crossed my mind as well, but I forgot to add a test for it.\nWhile testing this I also realized the AutoPagingIterator class tried to directly access _opts on the collection. This worked in my first version that used yield because it was directly implemented in Collection, but now that the code is in a separate class, I had to add a getter in StripeObject to access it. (PHP is stupid only raises a notice and not an exception when you try to access a protected attribute from outside a class :angry:)\nI'm not too sure how to test this though -- I think it would have to be tested into the request mocker. Thoughts?\nEDIT: on second thought, I think the getter might be unnecessary and simply not passing an options argument would work equally well. Still not sure how to test it though.\nEDIT2: okay, I tested it manually and the _opts getter is indeed unnecessary. However, the parameters are not carried over now that I'm storing them directly in Collection. I think it's because the creation of the first Collection object does not call any method in Collection itself. It's getting late here, I'll give it another shot tomorrow.\n. Alright, we're getting there. Thanks for bearing with me! :)\nI added a call to Collection::setRequestParams() in ApiResource::_all() in order to save the initial parameters. This should work because Util\\Util::convertToStripeObject() should always return a Collection in this case. Nevertheless, do you think I should add a test for this, and maybe raise an exception if it's not the case?\n. Alright. Even though this should never happen, I think it's better to break things cleanly with an exception rather than let PHP do whatever PHP does (probably output a notice and go on its merry way, grr). So I added a check that should hopefully be entirely unnecessary :)\n. r? @brandur \ncc @stripe/api-libraries \n. Hey @MParsons095, could you also share the output of uname -a?\n. @MParsons095 Can I also bother you for the output of the following commands:\ncat /etc/*-release\nand\nlsb_release -a\n? Sorry to ask you for more information but we haven't been able to reproduce the issue yet.\n. It's okay, thanks for the additional information.\nCould you try updating your libcurl and OpenSSL packages? Run the following command: sudo yum update openssl libcurl, then restart your web server.\nIf that doesn't work, you will likely need to update your server to CentOS 6.8 or 7, as explained in this article: https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2\n. @MParsons095: Alright, thanks for closing the loop.\nNote that support for TLS 1.0 and 1.1 is scheduled to be disabled, respectively on Jan. 1st, 2017 and May 1st, 2017 (cf. this blog post). If your server is unable to issue TLS 1.2 requests on May 1st, 2017, it will no longer be able to communicate with Stripe's API.\n. Tentatively fixed by #251.\n. I tested it with PHP 5.3.29 with no issues.\n. Hey @jagroop, sorry about this. This does seem to be caused by a bug in the PHP bindings.\nUntil we release a fix, you can get around the issue by resetting transfer_schedule to null first:\nphp\n\\Stripe\\Stripe::setApiKey(\"STRIPE_KEY\");\n$account = \\Stripe\\Account::retrieve(\"STRIPE_ACCOUNT\");\n$account->transfer_schedule = null;\n$account->transfer_schedule = [\"interval\" => \"manual\"];\n$account->save();\n. r? @brandur\n. @manojmilani123 The GitHub repository is for bugs and feature requests about the PHP library, not issues with Stripe's API itself. Please go to https://support.stripe.com/email to contact support to receive help about your issue.\n. > Yeah, this would definitely be ideal, but unfortunately I'm not aware of any easy tweak we can make to get that :/\nMaybe we could do something like this:\nphp\n$curl_version = curl_version();\n$ssl_version = $curl_version['ssl_version'];\n// $ssl_version looks like \"OpenSSL/1.0.2h\"\n// if version is OpenSSL/1.0.1 or newer, TLS 1.2 is supported, so use the new behavior\n// otherwise, default to the old behavior\nI've glossed over the details of the version check since it will probably require explodeing the string all over the place or using regexes, but it shouldn't be too hard.\n@brandur @remistr what do you think?\n. @brandur Oh, nice, didn't realize there was an OPENSSL_VERSION_NUMBER constant. Much easier to use than what I suggested!\nOne possible issue is that curl can use different SSL libraries. For instance, on my brew-managed PHP 7, it uses Apple's native SecureTransport rather than OpenSSL.\nAlso, according to the above link, curl requires OpenSSL 1.0.1c in order to use TLS 1.2, so the version number we need to compare against would be 0x1000103f rather than 0x1000101f (according to this link, I didn't actually check OpenSSL's source).\n. @erickbj: Yeah, it's weird. According to OpenSSL's release notes, support TLS 1.1 and 1.2 was added in 1.0.1.\nI was thinking that maybe curl itself required 1.0.1c for some reason (most likely to avoid the CVE-2012-2333 vulnerability that's fixed in that particular version). If you can confirm that you're able to establish TLS 1.2 connections with OpenSSL 1.0.1, I'm \ud83d\udc4d  on using 0x1000100f for the version check.\n. @troglodyte: Thanks! If you don't mind, could you also tell us your OpenSSL version? Running openssl version should do the trick.\n. @Nakilon: Could you provide an example of the issue that this PR fixes?\nAccording to the PHP docs, next() should return FALSE when there are no more elements to return:\n\nReturns the array value in the next place that's pointed to by the internal array pointer, or FALSE if there are no more elements.\n. @Nakilon: the auto-paging iterator iterates over both items and pages. With your change, the iterator only returns the first item from each page: https://travis-ci.org/stripe/stripe-php/jobs/147779064#L272\n\nYou are correct that iterator_to_array() doesn't seem to work correctly with the auto-paging iterator. I'll dig further.\n. You're correct, your patch skips the first item on every page besides the first.\nI think AutoPagingIterator's implementation of the Iterator interface is a bit unorthodox. It works for foreach but not for iterator_to_array. After digging a bit, @remistr found that this is because the key() method returns the key of each item within its own page, so if there's more than one page the same key might match different items over the entire collection.\nI'm going to close this PR, but feel free to reply here or on #279.\n. See #278 for some context around the issue this fixes.\n. I added a test to make sure iterator_to_array() works as expected.\nr? @brandur \n. @BrunoDeBarros: Thank you very much for all your help. If it's not too much trouble, would you mind running this script from the affected system, and copying the output here?\n. Awesome, looking forward to it. Thanks again for your trouble! (And no worries if it's no longer possible for you to access the server!)\n. Hi @ankit-25. As @matthewarkin pointed out, this is very likely a programming error. GitHub issues are specifically for bugs or feature requests within the bindings. To receive help about your issue, you should reach out to support here: https://support.stripe.com/email.\n. @AndriySvirin GitHub issues are for bug reports or feature requests for Stripe's PHP library. You should write to support to receive help about using the library or the API. Stripe supports typically replies to all requests within 24 hours.\n. Hey @EvaldasAlcauskis. You very likely failed to include the library correctly in your code. If using Composer, you should have a require statement similar to this at the beginning of your code:\nphp\nrequire_once('vendor/autoload.php');\nSee the README for more information.\nIf you need more help, I recommend you reach out to Stripe's support using this form. GitHub issues are specifically for bugs and feature requests in the library.\n. Hey @pderksen, thanks. As @remistr pointed out, this is how we previously set the option in our own library, and I'm the one who suggested that they do the same here. I've left another comment to let them know about our latest findings and this new update.\n. I added a paragraph at the end of the README for plugin devs, to let them know about setAppInfo (this should have been in #294) and that they should plan for a configuration option to set CURLOPT_SSLVERSION if they want to ensure that their plugin can be used on all systems.\nFeel free to tweak the wording or just rewrite the whole thing!\n. @brandur Sorry for the delay, GitHub failed to notify me for some reason. Typo is fixed, let's :ship: this!\n. Hi @elarion83. Please note that GitHub issues are for bugs or feature requests with our PHP library. If you have issues or queries about how to use the library, you should instead contact Stripe's support here: https://support.stripe.com/email.\nThat said, in order to solve your issue, you likely need to upgrade the software packages for curl and OpenSSL as well as PHP, then restart your web server. You can find generic upgrade instructions here:\n- https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2\n- https://support.stripe.com/questions/how-do-i-upgrade-my-openssl-to-support-tls-1-2\n. @elarion83 I closed the issue because it's not a bug with the library. If your server can't use TLS 1.2 for outbound connections, there's nothing the library can do about it. You need to upgrade your server's curl and OpenSSL software packages as stated above.\nI wasn't able to find your request to Stripe's support. Can you tell me what the email address for your Stripe account is?\n. @dextermb See #299 for more context on why the library is no longer forcing the CURLOPT_SSLVERSION configuration option. In a nutshell, not setting the option will result in the highest available TLS version being used in most cases. Some systems (older CentOS / RHEL versions) might need to use the CURLOPT_SSLVERSION to explicitly opt in to TLS 1.2, which they can now do manually after loading the library.\n. Hi @gamthemes. It appears that Stripe's API is not seeing any source or customer parameter in your charge creation request.\nGitHub issues are specifically for bugs or feature requests with our PHP library. Since this is a usage issue with the API itself, you should instead send a message to support: https://support.stripe.com/email. This way, our staff will be able to look at your account's logs and help you debug the problem.\n. Could you put this one line above so that the properties are in alphabetical order?\n. Excellent point. It definitely should be possible, I'll give it a try!\n. I ran some basic benchmarking, and it takes approximately 1.3 seconds to run 1 million calls to curl_version on my laptop. Given that ~all of our users will never send more than 100 req/s, I think we're fine.\n. Great point. Done!\n. Fixed.\n. Done! \n. ",
    "godsweb": "thought that was what I was doing.\n. ",
    "aaronbski": "@bkrausz Fixed. Thanks.\n. ",
    "cicsolutions": "Thank you so much for your support.  This ended up being an issue with how composer was installed, so you were spot on!\n. ",
    "brandur": "A quick perusal of some other PHP libraries seems to suggest that this is a pretty common method for recommended installation:\n- https://github.com/Imangazaliev/DiDOM\n- https://github.com/hassankhan/config\n- https://github.com/fzaninotto/Faker\nSo looks good to me. Thanks @NoUseFreak!\n. Nice! +1. Maybe one missing piece is that it might be worth adding tests on ApiResource to verify the new behavior there.\nAnother slightly more general question: if getting at the request ID is the main goal here, should we bother exposing the entire response? I guess I could see it either way.\n. @iansltx Good points! I'll definitely be happy to take a look at that PR.\n. Hey @DarkSilence, thanks for reporting this! We've got a fix coming down in #209.\n. @bkrausz Would you mind taking a look at this approach?\nEssentially what we need to do here when refund() is called on an application fee is to create a different type of resource (an application fee refund), and I couldn't really find any prior art for this kind of thing on other resources. I thought about trying to reuse ApiResource's _create method, but it's pretty tightly keyed to the current class from which it fetches a URL. I could modify _create to take an optional URL, but I'm not sure that it's worth it for this one instance. The approach I took is mostly reasonable except that we're getting some proliferation of the special $obj->setLastResponse($response) line which could probably use further abstraction somewhere. Any thoughts/opinions you have on this would certainly be appreciated. Thanks!\n. I've also updated this pull to use a similar approach to the one proposed in stripe/stripe-ruby#354.\n. As with stripe/stripe-ruby#354 there's an additional optimization to be had here, but I'm going to pull this in so that we can get onto the new path.\n. @kyleconroy Thanks! Pulling it in.\n. @kyleconroy Thanks!\n. Looks good to me! Thanks.\nI'll leave this one sitting a little longer in case anyone with deeper familiarity with the library also wants to take a look.\n. Oh, and thank-you for adding the missing test suite!\n. @bkrausz Thanks for taking a look!\n. Released as 3.5.0.\n. Hi @benklocek,\nCan we get a few more details on the precise implementation on this one? Normally I think you'd use something like require_once to avoid this kind of problem in PHP. Is the idea that the Stripe library is vendored twice?\n. Cool! Thanks.\nI looked at a few popular PHP libraries (e.g. Requests) that might also be at high risk of being double vendored like Stripe is here, but so far haven't been able to find much precedent for wrapping the init in something like class_exists.\nI don't mind adding a conditional if it's helpful, but it does seem like we might be trying to solve the problem in the wrong place. Do you know if it might be feasible to have the requires for the Stripe library patched downstream in the plugins you're using? Failing that, are you aware of a pattern that other libraries might be using to solve this problem?\n. @iansltx Nice! Thanks for the contribution here! This looks pretty reasonable to me given that we do allow these to be set in other bindings languages like Ruby and that the defaults are quite optimistic. Also, +1 @matthewarkin in that idempotency keys would be highly recommended in situation with reduced timeouts especially.\nOne thing that catches me as slightly unusual is that the CurlClient is both a singleton and takes static configuration. What do you think about potentially putting the configuration in as instance variables so that you could instantiate multiple CurlClients with different timeout configurations without affecting global state?\n~~It also looks like the builds didn't quite make it through. Mind taking a quick look at that in case there's something worrying?~~\nWill also defer to @bkrausz for general thoughts on the idea.\n. > I believe the build failures were causes by the api outage last night, but re-running them would be a good idea.\nGood point! I just bumped all the failed builds to see what happens.\n. > Fair apoint about the static/instance var bits. Just have to figure out a way to have the instance vars apply when the main interfaces to the lib are static calls. Maybe a setInstance method? Will update this PR with what I'm thinking later.\nI might be misunderstanding something, but I think the library as is favors non-static calls to CurlClient. The flow:\n1. The ApiRequestor provides a private httpClient() method that defers to the CurlClient singleton unless a client object has been set.\n2. The CurlClient's request() instance method is then called by the ApiRequestor as part of its standard request flow.\n. > Okay...so the static HTTP client setter is what should be used. Which means the CurlClient either needs constructor injection or timeout override instance methods. Which do y'all prefer?\nPersonally I'd go with with instance setters. Hopefully we can choose defaults that will work for most people, so hopefully these won't need to be frequently changed (and it's also preferable not to mess with the constructor API too much at this point).\n. @iansltx Nice job! +1 from me.\nI'll leave this open for a bit longer to give others from @stripe/api-libraries a chance to comment, but will pull this in absent other feedback.\nThanks again for tackling the issue.\n. Thanks a lot for the addendum Matt!\nI'm going to close this one for now, but if possible, @jflinter can you confirm that the issue in the iOS SDK was resolved? (I thought I saw a message about it somewhere, but am unable to find it now.) Thanks!\n. @jflinter Awesome! Thanks for following up.\n. Released as 3.7.1.\n. Hey Jonathon, sorry about the trouble here! It's true that the documentation could probably use more work, but @matthewarkin has linked to the basic stuff that we do have.\nThis is super obvious, but any type of collection response will always have the basic layout of a Stripe page as described here, which is where the data field comes from. Prior to loading a response from a list endpoint, this won't exist on any Stripe object.\nI'm a little confused as to where the getData function that you're speaking of comes from as I can't find reference to it inside our PHP bindings. Is that an internal implementation that you're speaking of?\n. > It's in your base Object class\nDo you mean StripeObject? Would you mind linking me to some code on GitHub?\n. I'm closing this out for now, but let me know if you have anymore thoughts on the matter.\n. Hi @rtntdeck, thanks for logging this! I'm sorry to hear that you're having trouble here.\nI guess we could change the use of CURLOPT_HEADERFUNCTION in the library to a non-closure version, but based on your provided SO link and the fact that we've never had this one reported by anyone else, it seems like the problem might lie in an unusual PHP compilation on your local machine. Is there any chance you could try a different release and see whether the problem persists?\nIt might also be worth trying to locally move that closure to a class member function and then invoking it with something like:\nphp\ncurl_setopt($ch, CURLOPT_HEADERFUNCTION, array(self,'readHeader'));\nIf that doesn't work, see if a similar idea but with readHeader in the global namespace will work:\nphp\ncurl_setopt($ch, CURLOPT_HEADERFUNCTION, 'readHeader');\nLet us know! Thanks.\n. > I pulled the readHeader function up as its own method within the class and everything works fine. No warnings or Errors and $this->rheaders is populated at the end of a call.\n\nIn doing so it was also required to make rheaders a class property and change some references to $this->rheaders ($this since it is not a static class or set of functions).\n\nGood to hear that you got it fixed!\nIt's probably overly academic to be talking about things like thread-safety in a language like PHP (while technically supporting threads, they're probably not widely used), but the only trouble here is that your request function is no longer re-entrant because you're now storing data in the instance. i.e. Two request calls made around the same time will conflict with each other.\n\nAs for reasons why no one else has come across this I can only guess. A)PHP community isn't yet using stripe-php 3.* (which is when CurlClient was introduced). B)From what I can tell most PHP folks have coded their own Curl wrappers thus may never hit this code. Purely guesses though.\n\nAh, maybe! I guess the only thing to consider is that looking at the SO issue that you linked above it seems like the user there was able to get things working by moving to a different build of PHP in their server environment. I still kind of suspect that some anomalous builds of PHP might be the culprit here.\n. Closing this one out for now.\n. > This can be very useful if you set your api key with a service provider, and have to deal with managed accounts on many requests.\nDo you tend to use the same managed account for the entire lifetime of your program?\nMy only worry here is that people will use this more as a helper for making batches of requests for a single account more convenient. This is a bit problematic because since it's global state, it's not entirely safe in that one thread may still be making a request while another resets this account out from under it.\n. Cool! Alright, I'm still not crazy about global state, but admittedly we still don't have a great story around separate Stripe client objects that could local settings, so I'm okay with pulling this in with the caveat that it could be retooled at some point down the line.\n@rikless Would you mind squashing your commits? A git rebase -i master is generally the easiest/fastest way to do this. Thanks!\n. Thanks!\n. Amended comments a bit in 2d85b1a1a651476fb8b3be29be2efa86420df0eb and released in 3.9.0.\n. > Thank you @brandur :)\nAnytime! Thanks again for the pull!\n. Amazing work Remi!! Thanks!\n. Released as 3.8.0.\n. Left a few minor comments, but this looks great! Awesome work @olivierbellone!\n\nr? @brandur. I'm not super happy with the $_lastParams attribute and accessors I had to add to StripeObject, maybe there's a better way to retrieve those? Happy to update the PR if so.\n\nHmm, it probably isn't much better, but do you think it would be better if we moved the request parameters over to Collection instead? That's the only place we really need to use them and it might keep the interface a little more minimal. For what it's worth, it's also how we ended up doing it in Java's pagination implementation.\nI can go either way on that one though.\n\nAww, looks like yield was introduced in PHP 5.5 :(\n\nPHP has every programming language feature ever invented and yield didn't make it until 5.5?! :/ Thanks for updating the implementation though!\n. > While testing this I also realized the AutoPagingIterator class tried to directly access _opts on the collection. This worked in my first version that used yield because it was directly implemented in Collection, but now that the code is in a separate class, I had to add a getter in StripeObject to access it. (PHP is stupid only raises a notice and not an exception when you try to access a protected attribute from outside a class :angry:)\nWould it be possible to avoid the getter and just have Collection instantiate AutoPagingIterator with a reference to its internal request options?\nphp\nreturn new Util\\AutoPagingIterator($this, $this->_requestParams);\n. Great changes! This is looking really solid now.\n\nI added a call to Collection::setRequestParams() in ApiResource::_all() in order to save the initial parameters. This should work because Util\\Util::convertToStripeObject() should always return a Collection in this case. Nevertheless, do you think I should add a test for this, and maybe raise an exception if it's not the case?\n\nI guess I could see it either way. A custom exception is always a little nice because if it does blow up, you get a more helpful message, but on the other hand, we may be planning for a very unlikely contingency here. I'll leave it up to your good judgement :)\n. Awesome! Let's try this out.\n. Released in 3.9.0.\n. This seems reasonable to me if it's still the direction that we want to go.\n@olivierbellone Would you mind taking another look at this one and fielding Russell's question above? Thanks!\n. @bkrausz Thanks for the fix!\nReleased as part of 3.9.1.\n. It does look like this is indeed missing by default:\n``` php\n<?php\nrequire_once('vendor/autoload.php');\n\\Stripe\\Stripe::setApiKey(\"sk_test_REDACTED\");\n$account = \\Stripe\\Account::retrieve(\"acct_1032D82eZvKYlo2C\");\necho $account->support_email;\n?>\n```\nProduces:\nsh\n$ php test.php\nStripe Notice: Undefined property of Stripe\\Account instance: support_email\nI'm just following up with our Connect team to try and verify what the expected behavior here is.\n. Hi @dahomz,\nI checked on this one a bit, and it seems that this is mostly a documentation problem. The support_email field only comes back for an account where it's not null, and it's only not null when set on a managed account or for your own account.\nI'm closing this out for now, but I've added a task internally to loop around and see if we can can make the documentation more clear. Sorry about the trouble!\n. @bkrausz Thanks a lot for taking a look at this! As far as I can tell, this is largely consistent with how some of the other bindings languages perform this sort of nested encoding. +1.\nJust one note on the testing strategy: I think the style of the full integration test like we see for additional owners in account here is useful, but in some cases this makes it a little more roundabout when you're trying to verify precisely how encoding is expected to be implemented. Do you think it might be worth adding another simple test for this case directly in CurlClient's suite? It might be a slightly more direct unit test that would make checking expectations easier the next time we're looking at this behavior.\nAlso, it looks like the test suite is broken here with some unrelated messages around transfers. I guess it probably just drifted out of being able to succeed?\n. > @brandur yea, the test failure is random drift. I fixed a bunch of the issues with it, but the Transfer failure is new to me.\n@bkrausz Cool. Alright, thanks for fixing some of those other problems. Let's not block this fix on a green suite, so let me know when a spot check of the tests suggests that all failures are unrelated.\n\nRe: integration tests - I'm happy to add unit tests as well. I wanted to have functional specifically for additional_owners because they've had hairiness before.\n\nOh yes, definitely worth having the additional_owners test in there given that it's the best/only real-world example of where we run into this class of this problem! +1 on adding a basic unit test for this as well though if you get the time. As made evident by the aforementioned failures, it would be nice to move more in the direction of generally lighter tests. Thanks!\n. +1! Thanks @loslch!\n. @ummahusla I'm going to close one out for now (see Remi's answer above), but let us know if you have anymore trouble! Thanks!\n. @saber3005 Awesome fix, and thanks for the test!\n. Looks good! Thanks Greg!\n@bkrausz That test data deletion is still running, hah. 10.2 million notifications deleted to date.\n. Released as 3.10.0.\n. @iansltx Looks good to me! Thanks for getting in those tests and documentation.\nJust a couple questions:\n1. Is the closure option largely a hypothetical addition at the moment or is this something that you needed?\n2. Regarding the closure again: what do you think about possible passing a class or associative array as an argument instead of individual args for each characteristic of the request? I'm a tad worried that we'll need to add another argument at some point in the future and that this will break compatibility for anyone that's currently using the feature. A class or array would future-proof the call.\nThanks again for putting this together!\nAnd lastly, calling @bkrausz in case he wants to take a pass on this as well!\n. > The only time that call would change is if the signature of request() changed, which would probably result in a change to ClientInterface anyway, resulting in a BC break for the whole thing, unless you're just adding an optional param to request(), in which case the call_user_func call would just tack on that extra param, and any closure using those params would continue working.\nCool. I'd normally say that the arguments to request are largely package-internal while this is external, but I guess we've been recommending that people override ClientInterface anyway, so that's not really true.\n\nThat said, it's probably clearer (and requires less code changes in the future) if that call explicitly passes on the parameters of the request() call, rather than using the individual vars. Making that change now.\n\n+1. That looks cleaner.\n\nLastly, if y'all don't see any value in having the callable option, I don't mind re-PRing without it; just say the word :) Again, my own use case is covered by the non-callable option...I just promised I'd show a PoC for the callable one.\n\nGot it. I'd normally try to reduce the surface area of anything that we expose publicly, but given that it's already done and seems useful, I don't mind having the extra hook in there.\nI'll wait ~1 day for comments from anybody else on the patch, but barring anything else, will bring it in tomorrow.\n. Released as 3.11.0.\n. Ugh. I'm very sorry about the trouble here. Thanks a lot for the patch!\n. Fix released in 3.10.1.\n. > Awesome! I thought there was some issue related to the new crt file. Thanks for figuring it out!\n@matthewarkin Hah, thanks, and yeah, this was definitely a weird one, and I'm also glad to see it go away! I can't take the credit for figuring it out though; there were a lot of people expending a lot more effort on the problem than me!\n. Also released in 3.12.0.\n. FWIW, I think one of our other users submitted a whitelist request. I'm not sure where it got to (more information in #238).\nAnd just for clarity, we're not going to take any action for this one. This is an Avast problem and unfortunately beyond our control.\n. @curtisblackwell @GrahamCampbell Thanks for the assist guys!\n@yespbs I'm closing this out because we're not distributing malware with stripe-php, and this is most likely a false positive. On your end, there may be a few things to look into:\n- If you're fetching the package using an insecure mirror (i.e. no TLS and no checksums, or checksums that didn't come in over TLS), there is a possibility that a MITM modified it en route. It may be worth looking into the exact files that you have on disk there (i.e. as opposed to looking at them on GitHub or in a local clone of the repo) that are being flagged to see if there's anything that looks suspicious. If you see anything, let me know immediately and please describe your packaging setup.\n- Does Avast give you any details as to what exactly it found in the files? (Besides \"Other:Malware-gen\" of course.)\nI've also opened a ticket with Avast just to see if that goes anywhere.\n. I heard back from Avast and they recommended that I follow their process for submitting a whitelist request. On the page describing that process, they acknowledge that they have a very high rate of false positives (hence the well-documented process around the whitelist), so I'm not too concerned here that there is actually any security risk here.\nI want to avoid getting into a not-particularly-constructive habit of submitting whitelist requests to Avast every time they improperly flag one of our files as malicious, so I'm not going to submit one in this instance. Let me know if anyone disagrees with this of course, and we can discuss further.\n@yespbs I'd recommend doing whatever you can do here to manually whitelist the files from the software you're using, but given that this is an Avast bug, I'd suggest trying to find a longer term solution with them.\n. @yespbs Sure! The process for whitelisting is here:\nhttps://www.avast.com/faq.php?article=AVKB229#artTitle\n. Thanks for all the fixes @theboolean! They've all been released as part of 3.12.0.\n. Cool! Can't hurt to have a little extra safety here. Thanks!\n. Tagged as 3.12.1.\n. @jxu577 Looks promising so far!\nI'm not totally sure how you want to proceed here, so let me know what you're thinking.\nAnd also just a heads up: it looks like at least one of the test failures is related to your changes.\n. > These changes are major and breaking though.\n@GrahamCampbell Hey! How so? This is largely an internal re-arrangement of the API and shouldn't really have much of an effect at all on the API exposed by the bindings (i.e. retrieval will still work, but now it goes to a different URL).\n. @matthewarkin +1. The error messages should look like one of:\n- \"Invalid key: %{key} must be a string under %{limit} characters\"\n- \"Invalid val: %{value} must be a string under %{limit} characters\"\n\nIf the behavior is as intended this can be closed. Thanks for the reply!\n\n@pderksen Thanks for following up! This is intended behavior, so I'm going to this out.\n\nPossibly add the option to truncate the value and process the action also?\n\nThanks for the suggestion, but my instinct is to avoid this approach. In my experience silently swallowing certain types of problems and then doing something else can lead to some pretty confusing behavior for users. I don't think it's too unreasonable to have any program that knows that truncation is safe to just do it client-side before sending it up to the API.\n. Can you give us your OpenSSL version as well? Thanks!\nOn Friday, April 29, 2016, remistr notifications@github.com wrote:\n\n@MParsons095 https://github.com/MParsons095 Would you be able to\nprovide more details about the issue? Usually when something like this\ncrashes there'd be an error in the error log files on your PHP installation\nfor example which would be helpful to reproduce\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/248#issuecomment-215856782\n. Hi @aaronhuisinga, thanks a lot for writing in and letting us know about this one!\n\nI just looked and luckily it looks like we only have 5 merchants that are using the mistaken version, and I should be able to let them know pretty easily. Would you mind emailing me your merchant ID (i.e. usually looks like acct_xxx) so I can take you off the list? I'm at brandur@stripe.com.\n. All users on that version have been notified!\n. Hi @MarkVaughn, and I guess the proposal here is mostly to just get types in rather than an additional description as well?\nMy only fear here is that we don't really have a great way of ensuring the accuracy or timeliness of update of such an addition. That said, I wouldn't be too adverse to the idea if you want to go for a pull request.\n. >  Also knowing what fields are potentially available. I'll get on it then. \nMakes sense! And cool, thanks for the effort here.\n. Fix was in #268. Closing this out!\n. Hi @magna25,\nCorrect me if I'm wrong, but if I'm reading this correctly, it seems like you've retooled the library's namespaces and loading modules and are running into problems with it. We'd like to help as much as we can, but there's only so much we can do when delving into this sort of custom setup.\nIf you take a look inside init.php, it's not doing anything particularly special in that it's essentially just doing relative requires on every file in the library \u2014 an operation which should get everything successfully loaded up as expected. I'd suggest adding some sort of debug statement into the files to make sure that this is indeed happening in your own codebase; it seems like from your description above that either your collection class isn't being loaded or is being loaded into the wrong namespace.\n. Looks good to me! +1.\n\nI think we need to upgrade the API version to avoid these test failures, thoughts on whether or not that's doable? I believe we'll need the new version in the Java libraries as well\n\nI was just checking the changes and nothing seems insurmountable. I recently went through the process of upgrading the version on the Go bindings and it was time consuming, but ultimately not too bad.\nI think we should just go for it and fix anything that does happen to come up.\n. I just triggered the upgrade and restarted the build.\n. @rasmusrygaard I think you might have branched off quite an old master. If you pull the latest and rebase, you should be able to get the test suite to pass.\n. Released as 3.14.0.\n. Amazing! Thank-you :)\n. Released as 3.14.1.\n. Hi @bocharsky-bw,\nThis looks useful, thank-you! Could we also do the following:\n1. Alphabetize the list so if new statuses are added, they'll have a logical home.\n2. Prefix the names with STATUS_ to make it obvious what they are and to avoid any future naming collisions.\n3. Adding a comment above the list of constants indicating that they're possible representations of the status field.\n. Hey @bocharsky-bw, thanks for making those changes!\nIt looks like CI is failing here due to some whitespace being detected at the end of one of the new lines. Would you mind taking a look (and squashing the change) if possible? Thanks!\nAnd feel free to bump the PR when you're done so that I don't forget to take a look at it again :)\n. LGTM.\nThanks!\n. Released as 3.18.0.\n. LGTM.\nThanks!\n. Released as 3.14.2.\n. Hey @hassanehamdaoui,\nIt sounds like you may not be loading the library properly. Can you try one of these two options from the README?\n- Use Composer to autoload the Stripe library\n- Require the library manually\nI'm going to close out this issue for now. Let us know if you need more support, but if so, next time please include more information like information on your environment, your installation methodology, and what you've done so far to try and debug the problem. It can be difficult for us to hypothesize about the problem with so little given information.\nThanks!\n. @kyleconroy Left a couple minor comments above, but overall looks good to me. Thanks!\n. @kyleconroy \nLGTM!\nLet me know if you have any particular ideas around how/when you want to bring this in. Otherwise, I can coordinate a release if you like.\n. > I was planning on merging to master and doing a release. Is there anything else that needs to go out?\nNope! Aside from these changes, master should be clean right now.\n. Thanks!\nLooking into this a little more, it seems that cURL will only add the \"Expects: 100-continue\" header if the request body size is greater than 1024 bytes. That would explain why you're the first to have reported this problem \u2014 most request bodies are probably small enough that they've been flying under the radar.\nTechnically, this is actually a different class of bug in that our bindings should be able to handle the empty server response and then retry, but until that can be fixed, this seems like quite a reasonable interim fix. Thanks\nLGTM.\n. Released as version 3.14.3.\nI've also added commit ad16ae7 in order to better document the problem and solution.\n. Hi @MarkVaughn, thanks a lot for the huge amount of effort here. It's definitely appreciated!\nSo I hate to reneg a bit on what I said in the other thread, but I think there's going to be two basic problems with this approach:\n1. The PHP bindings are designed to be dynamic such that they can handle responses from a number of different API versions that the user may have set (or to put that better, they're not tied to a particular version like the Go bindings are for example). This may result in a user seeing properties in an IDE that don't exist for their API version, or the opposite problem where they have properties that are not documented in the IDE.\n2. As mentioned elsewhere, this will be a bit of a maintenance problem in that we don't currently have any sort of working process for keeping these up-to-date when we make changes in the API.\nGiven that these are just hints for PHP IDEs, they're not the end of the world, but I mainly wanted to point out that some subtle confusion is possible.\nI think merging would be okay, but with the caveat that we may revert if we have too many confused users writing in. I'm not sure how like this is.\nLet me know if you have any other thoughts here, and thanks again!\n. @MarkVaughn Cool! Alright, I'm pulling this in (with the small caveat above). Thanks again for working on it!\nLGTM.\n. Released as 3.17.0.\n. @DominikTo Hey, thanks for getting this conversation started!\nI am totally on-board with aggressive minimum version bumping. Unfortunately, to some degree we have to bend to the practices of our current users. I just checked our version usage stats, and 5.5 is still the most popular version of PHP currently in use against our backends by a considerable margin. 5.6 is next popular, but 5.4 isn't far behind it. I'm afraid to say that even 5.3 is more popular than version 7.\nI'm entirely in favor of helping these users get upgraded, but I think we're going to have to take a more incremental approach to the problem so as not to break anyone's integrations, while still allowing us to get fixes out if we find problems in our own bindings.\nI'm going to close this issue out for now, but I'll put this on our internal backlog as product work that needs to be done.\n. Hi @alexjameslowe,\nThanks for including this here!\nThinking about this one a bit, I don't think it's too appropriate to leave an open issue on stripe-php for the time being, and the problem itself also seems to be a little too localized to include a note in the README.\nMy suggestion here is to close this, and hopefully others who run into a similar problem will be able to find it via Google and/or searching the repo's issues. Let me know if you disagree or have any other thoughts on what we should do. Thanks!\n. Thanks @olivierbellone!\nLGTM.\n. Released as 3.16.0.\n. LGTM! Thanks @dino001.\nUnfortunately, another pull seemed to have introduced a build problem on master. I've recently pulled a fix in by way of #274, but I think it's failing your branch here. Would you mind rebasing on master just to double check that the tests pass?\n. Oops, sorry, I missed that the changes here had been pushed. Thank-you!\nSmall point for future reference: it's often preferable to pull down the latest version of master and then rebase against it rather than merging master into your new branch. For example:\nsh\ngit checkout master\ngit pull origin master\ngit checkout my-branch\ngit rebase master\ngit push -f origin my-branch\nLGTM.\n. Super minor change. Pulling this in.\nLGTM.\n. Hi @apiaget!\nThere could be a few different things going on here, but it's worth noting that the CURL_SSLVERSION_TLSv1 constant that we set in the bindings doesn't mean use 1.0, but rather that the client should use TLS over obsolete SSL (and preferably 1.2). Here's some source for reference here from cURL.\nWhile modifying the options to explicitly override to TLS 1.2 should be fine, I'd hope that your client would have negotiated for TLS 1.2 automatically if it was available. Is there any chance that you're using an old OpenSSL package that doesn't support it?\n. @apiaget Sorry for the slow responses here! Yes, I would have thought that version would be good.\nWhen you switched the constant to CURL_SSLVERSION_TLSv1_2, did that resolve the problem?\n. And actually, would you mind checking the value of the constant OPENSSL_VERSION_TEXT from within your running PHP environment, just so we can rule that out?\n. @apiaget Hey! We ended up having a very similar issue to yours reported over in #276.\nIf you're able to easily locate the source of the stripe-php package on your machine, would you mind testing this patch to see if it fixes the problem for you?\n``` patch\ndiff --git a/lib/HttpClient/CurlClient.php b/lib/HttpClient/CurlClient.php\nindex 09b58a9..2b0c887 100644\n--- a/lib/HttpClient/CurlClient.php\n+++ b/lib/HttpClient/CurlClient.php\n@@ -160,7 +160,7 @@ class CurlClient implements ClientInterface\n         if (!defined('CURL_SSLVERSION_TLSv1')) {\n             define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n         }\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n+        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n         // @codingStandardsIgnoreEnd\n     curl_setopt_array($curl, $opts);\n\n```\nHere's a simple test script that will try to make a TLS 1.2 request:\n``` php\n<?php\n// Include stripe-php as you usually do, either with composer as shown,\n// or with a direct require, as commented out.\nrequire_once(\"path/to/your/stripe-php/autoload.php\");\n//require_once(\"StripeLibrary/init.php\");\n\\Stripe\\Stripe::setApiKey(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\n\\Stripe\\Stripe::$apiBase = \"https://api-tls12.stripe.com\";\ntry {\n  \\Stripe\\Charge::all();\n  echo \"TLS 1.2 supported, no action required.\";\n} catch (\\Stripe\\Error\\ApiConnection $e) {\n  echo \"TLS 1.2 is not supported. You will need to upgrade your integration.\";\n}\n?>\n```\n. @erickbj Thanks for checking in! Do you know what OS/distro your test environment is on on out of curiosity?\n. @erickbj Thanks for the detailed information! We now have two reports here that are specific to Precise, so that might be the common factor.\n@apiaget Is there any chance that you're on Precise as well? (Please check /etc/lsb-release if you have one.)\n. @apiaget NP! Thanks for checking in. This is great info, and it's good to know that we have at least two distros affected. (And amazing, @MichaelBrenden foretold your Debian and cURL versions very accurately.)\n. Closing this out now that #277 is in. If you're experiencing this problem, please upgrade to 3.19.0.\n. Hi @drafie, wow that's certainly strange to say the least!\nI'm unable to reproduce this, so can we dig into your integration a bit?\nSince it looks like you may have the Stripe PHP source files readily available in vendor/ already, would you mind applying this patch temporarily to see what happens?\n``` php\ndiff --git a/lib/HttpClient/CurlClient.php b/lib/HttpClient/CurlClient.php\nindex 09b58a9..2b0c887 100644\n--- a/lib/HttpClient/CurlClient.php\n+++ b/lib/HttpClient/CurlClient.php\n@@ -160,7 +160,7 @@ class CurlClient implements ClientInterface\n         if (!defined('CURL_SSLVERSION_TLSv1')) {\n             define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n         }\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n+        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n         // @codingStandardsIgnoreEnd\n     curl_setopt_array($curl, $opts);\n\n```\nThis will have the bindings explicitly try to use TLS 1.2 from within the runtime. If there's some kind of problem in doing so, it will hopefully it.\n. @drafie Glad to hear it! We'll definitely want to get a mainline fix in ASAP though given that we can't have everybody modifying their vendored Stripe code :)\nThe current symbol (CURL_SSLVERSION_TLSv1) tells cURL that it should use a range bounded by TLS 1.0 and TLS 1.2, and I would have thought that it would fall forward to use the latest and greatest version (1.2) if available.\nIs there any way that you could give us a little more information about your PHP installation so that we could potentially come up with some ideas for a more general fix?\n. @drafie Thanks a lot! While you're here, would you mind posting your OS information as well? Any chance that you're on Red Hat? Also, is PHP installed through any particular installation package? (Rather than from a system package manager or the like.)\n. @drafie Great. Thank-you! I'll let you know when we come up with something.\n. @drafie Hey! One of my colleagues mentioned to me that there may have been a quirk specifically in Precise where it preferred 1.0 for a long time for compatibility reasons, but then later reverted to 1.2 through a security update.\nWould you mind trying to revert the change above and upgrade your OpenSSL and seeing whether you have any luck with that?\nsudo apt-get update && sudo apt-get install --only-upgrade openssl\nHopefully it's not practically any different, but it may allow you to eliminate a custom patch for the time being.\n. @drafie Kk. Thank-you for trying!\n. @nbolender Thanks for checking in Nathan! See also #277 where I think we have a backwards compatible patch that's ready to go.\nYou don't happen to be on Ubuntu 12.04 (Precise) do you?\n. Closing this out now that #277 is in. If you're experiencing this problem, please upgrade to 3.19.0.\n. Thanks @nbolender! That's the first time we've seen this problem reported on a newer Ubuntu, so it's still quite useful to know.\n\nBTW kudos to you guys for maintaining backwards compatibility and a beautiful API. I was able to upgrade from a 2013 version to the latest in about 5 minutes.\n\nThanks! And wow, that's great to hear; hopefully you're not the exceptional case ;)\n. Hey @remistr!\n\nWhile I agree upgrade will be needed I think we should first find a way to force TLS 1.2 if available but not break users without TLS 1.2.\n\nYeah, I definitely see where you're coming from here, but unfortunately our current ongoing deprecation of TLS < 1.2 seems to be causing a lot of issues for users as seen in #275 and #276.\nThe way I see it, the potential for breakage is mostly hypothetical at this point in that it would require users who (1) are upgrading to latest, and (2) do not have TLS 1.2 support and can't get it. While there may be many users in both groups, I would hypothesize that the intersection between the two is smaller than we'd think.\nOn the other hand, we have at least two confirmed cases (and probably three) across #275 and #276 where this patch would fix integration problems rather than cause them.\n\nIs there a way for you to try and force TLS 1.2 but catch the cases where it's not supported and fallback to the old solution for now? In that case, existing users wouldn't be impacted yet and new users would get the expected error. \n\nYeah, this would definitely be ideal, but unfortunately I'm not aware of any easy tweak we can make to get that :/ We're mostly working within the bounds of the cURL API, and although I would hope otherwise, unfortunately just setting the min/max acceptable TLS versions doesn't seem to be quite enough due to other complexities in the implementation. Definitely let me know if you have any other ideas!\n. > @brandur @remistr what do you think?\nSounds reasonable to me! Let's give it a shot.\nr? @olivierbellone\n. @drafie @apiaget @erickbj Hello again! We're trying to develop a patch for the TLS < 1.2 problem that's compatible with a wide range of OpenSSL versions. Would you mind trying to apply the patch in this pull to your Stripe libraries instead of the one that I originally suggested?\nHere's the pull patch:\n``` patch\ndiff --git a/lib/HttpClient/CurlClient.php b/lib/HttpClient/CurlClient.php\nindex 09b58a9..0ca6afa 100644\n--- a/lib/HttpClient/CurlClient.php\n+++ b/lib/HttpClient/CurlClient.php\n@@ -150,17 +150,37 @@ class CurlClient implements ClientInterface\n         if (!Stripe::$verifySslCerts) {\n             $opts[CURLOPT_SSL_VERIFYPEER] = false;\n         }\n+\n         // @codingStandardsIgnoreStart\n         // PSR2 requires all constants be upper case. Sadly, the CURL_SSLVERSION\n         // constants to not abide by those rules.\n         //\n-        // Opt into TLS 1.x support on older versions of curl. This causes some\n-        // curl versions, notably on RedHat, to upgrade the connection to TLS\n-        // 1.2, from the default TLS 1.0.\n-        if (!defined('CURL_SSLVERSION_TLSv1')) {\n-            define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n+        // Explicitly set a TLS version for cURL to use now that we're starting\n+        // to block 1.0 and 1.1 requests.\n+        //\n+        // If users are on OpenSSL >= 1.0.1, we know that they support TLS 1.2,\n+        // so set that explicitly because on some older Linux distros, clients may\n+        // default to TLS 1.0 even when they have TLS 1.2 available.\n+        //\n+        // For users on much older versions of OpenSSL, set a valid range of\n+        // TLS 1.0 to 1.2 (CURL_SSLVERSION_TLSv1). Note that this may result in\n+        // their requests being blocked unless they're specially flagged into\n+        // being able to use an old TLS version.\n+        //\n+        // Note: The int on the right is pulled from the source of OpenSSL 1.0.1a.\n+        if (OPENSSL_VERSION_NUMBER >= 0x1000100f) {\n+            if (!defined('CURL_SSLVERSION_TLSv1_2')) {\n+                // Note the value 6 comes from its position in the enum that\n+                // defines it in cURL's source code.\n+                define('CURL_SSLVERSION_TLSv1_2', 6); // constant not defined in PHP < 5.5\n+            }\n+            $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n+        } else {\n+            if (!defined('CURL_SSLVERSION_TLSv1')) {\n+                define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n+            }\n+            $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n         }\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n         // @codingStandardsIgnoreEnd\n     curl_setopt_array($curl, $opts);\n\n```\nAnd here's the test script once again:\n``` php\n<?php\n// Include stripe-php as you usually do, either with composer as shown,\n// or with a direct require, as commented out.\nrequire_once(\"path/to/your/stripe-php/autoload.php\");\n//require_once(\"StripeLibrary/init.php\");\n\\Stripe\\Stripe::setApiKey(\"sk_test_BQokikJOvBiI2HlWgH4olfQ2\");\n\\Stripe\\Stripe::$apiBase = \"https://api-tls12.stripe.com\";\ntry {\n  \\Stripe\\Charge::all();\n  echo \"TLS 1.2 supported, no action required.\";\n} catch (\\Stripe\\Error\\ApiConnection $e) {\n  echo \"TLS 1.2 is not supported. You will need to upgrade your integration.\";\n}\n?>\n``\n. I'm pretty happy with the proposed solution of checking for >= OpenSSL 1.0.1 and have updated the PR and my patch code above to match (i.e. check on0x1000100finstead of0x1000101f`).\nDoing a couple final rounds of approval seeking before we ship, but in the meantime, if anyone else is willing to try this patch, that would be amazing :)\n. @apiaget Excellent! Thanks for checking in.\n. Released as version 3.19.0.\nThanks for the help debugging and testing everyone! Let us know if anything else comes up.\n. LGTM!\n@remistr Thanks for getting this assembled and @olivierbellone thanks for the great test! Pulling this in.\n. Sorry about the delay here, but now released as 3.17.1.\n. @thecrogers Thanks for the pull!\nLooks mostly good to me, but I'm not too crazy about the inconsistency of pulling decline_code out of jsonBody in the card error's constructor when other special fields are extracted in handleApiError and then injected in. What do you think about changing that around?\n. Hey @thecrogers, actually hmm, that's a good point. I was thinking/hoping that our errors might be an \"internal enough\" interface that we could change it, but there's probably a good number of users who are initializing them in tests and the like.\nI'm going to pull this in as is and add a comment that we should probably change it on the next major version bump.\nLGTM.\n. Actually, I added one more tweak in #281 to rename StripeDeclineCode to DeclineCode. I can see that an effort was made to follow the naming conventions of the other parameters in this class, but I think that those were given a \"Stripe\" prefix to disambiguate them (i.e. a Stripe \"code\" versus an HTTP \"code\"). Because a decline code is not ambiguous, it's safe to strip the prefix.\n. Released as 3.20.0.\n. Hi @max-voloshin, sorry about the delayed reply here!\nThis problem definitely seems quite unusual given that you seem to be on quite recent version of PHP and our package, and your data above would suggest that TLS 1.2 is fully supported on your system. Can you pass us along the values of your OPENSSL_VERSION and OPEN_VERSION_NUMBER constants from within your PHP application? It's a tenuous lead, but it may help spot an inconsistency. Also, are you on Linux? What distribution are you running?\nBut aside from that, can you think of anything else about your environment that might be non-standard? Possibly a custom build of PHP or a tweak configuration file or something?\n. Thanks @max-voloshin!\nI haven't seen anything to suggest that this is a bug in this library, and would hazard a guess that it may be caused by some particular quirk in how your system is configured. That said, we'd still like to help out as much as possible, so could you please open a ticket at support+tls@stripe.com? I'm going to close out this issue, but we can continue the conversation over there.\n(That said, if anyone else is seeing this same thing, then please feel free to comment and I'll re-open.)\nThe only thing that stuck out to me above is that your TLS constants don't seem to be defined. Here's what I get on PHP 7.0.6:\n```\n$ php -a\nInteractive shell\nphp > echo CURL_SSLVERSION_TLSv1_0;\n4\n```\nI think it would be worth checking what flags you compiled PHP with, and thinking about whether there may be some other characteristics of your system that are unusual compared to the norm.\n. Hi @cocowalla, sorry for the confusion here, but api-tls12.stripe.com is only for the purposes of testing your TLS 1.2 integration, and should not be used with your live code! It returns the same fixed response every time rather than going through our real stack.\nIf the test script runs fine, you're golden! Keep your API URL as api.stripe.com and continue business as usual.\nI'll try to clarify our documentation around that.\n. Thanks @remistr!\nI made a small amendment to the original Stripe question to make it more clear that api-tls12.stripe.com is not suitable for production use. We probably should have named it tls12-test.stripe.com to make it even more apparent, but it's a little late now.\n. Hi Joel,\nOur backend code in this area is a little tangled, and I doubt we'll expose it as open-source anytime soon; even less so with a port to PHP.\nWe do make heavy use of the twitter-cldr library, which does exactly what you want (but is also written in Ruby):\nruby\n$ irb\nirb(main):001:0> require 'twitter_cldr'\n=> true\nirb(main):010:0* 1337.localize(:es).to_currency.to_s\n=> \"1.337,00\u00a0$\"\nirb(main):011:0> 1337.localize(:us).to_currency.to_s\n=> \"$1,337.00\"\nirb(main):012:0> 1337.localize(:ja).to_currency.to_s(:currency => 'JPY')\n=> \"\u00a51,337\"\nNothing in PHP seems quite as straightforward though unfortunately. Did you try the NumberFormatter?\nhttps://secure.php.net/manual/en/numberformatter.formatcurrency.php\n. @nic-d Thanks! That could very well be.\nPossibly the one thing that the default PHP functions don't handle is the decimals for cent-less currencies like the Yen.\nI can't officially recommend this one, but this user has put together a function that seems to handle those:\nhttp://stackoverflow.com/a/13657920\n. Going to close this out, but let me know if there any other thoughts and/or comments.\n. Hey @wbronitsky, looks good!\nA couple things:\n1. I think you're going to need to add this to init.php.\n2. It's pretty unusual to add a new model without a corresponding test file with at least a little meat. Can you put one in? (Copying a basic template like coupon and adding a test for verify is enough.) I have a feeling that if we had one, we may have caught the bug in (1) in CI.\n. @wbronitsky Thanks!\nUnfortunately Travis seems to be having some pretty serious trouble today, and I don't think it's likely that CI is going to be passing anytime soon. I've confirmed that the suite runs locally, and am pulling this in.\nLGTM.\n. Released as 3.21.0.\n. I'm going to close this one out for now, but let me know if there are any other questions here. Follow #289 and #299 for more news on TLS < 1.2 problems in stripe-php.\n. Hi @BrunoDeBarros, thanks for digging into this!\nSo first of all I have say upfront that by far the easiest solution here is going to be just to update your version of PHP/OpenSSL, but I'm happy to try and dig into it a little more.\nCan you get us the value of the OPENSSL_VERSION constant from within the PHP runtime?\n. > Fortunately, this is one of those tiny issues that, if anyone ever comes across again, can be resolved by just tweaking this one file for them and leaving it be for the time being, so it doesn't matter too much. \nDo you mean here that you've just removed the section where we set CURLOPT_SSLVERSION in a vendored stripe-php?\nCould you try running the test script here against the same version of stripe-php that you modified? It would be good to see if your library has fallen back to TLS 1.0.\n\nOpenSSL version from within PHP (dechex(OPENSSL_VERSION_NUMBER)) is 0x1000105f. PHP is 5.6.18, and cURL claims to be 7.38.0. Worth noting is the fact that the cURL section in phpinfo says \"OpenSSL/1.0.0\", while PHP's OpenSSL section says \"OpenSSL 1.0.1e-fips\". Is it possible that they were built against different versions of OpenSSL, and that that's the cause for the problem?\n\nSounds plausible, but I'm not sure. What kind of system are you on? Is an easy libcurl upgrade available?\n. @BrunoDeBarros Thanks! This is definitely unusual.\nI'm trying to think of more precise ways that we figure out exactly why your Curl doesn't want to authenticate with TLS 1.2. Can you try this one?\ncurl --version\ncurl --tlsv1.2 -v https://api.stripe.com\n(Hopefully your Curl executable is the same version as the library PHP is linking against here.)\n. ~~And for what it's worth, CURL_SSLVERSION_TLSv1 doesn't guarantee TLS 1.2, so I suspect your library may be falling back to 1.0 or 1.1 here. That may work today, but isn't going to solve this problem in the longer run because everything below 1.2 is going to be deprecated.~~\n. And actually regarding my last comment: @remistr pointed out that the test script seems to indicate that things are working, so it does seem like TLS 1.2 is in use. Please disregard.\nI think we need to see if we can get some request visibility on our side for your account. Can you email me the email address associated with your merchant here? (I'm at brandur@stripe.com)\n. Thanks @thewozjesse!\nJust a small note here that we haven't forgotten about this issue and are working on finding a good compromise to resolve it.\n. @BrunoDeBarros Cool, thanks! Let us know.\nAlso I just wanted to note that #299 has been opened as a resolution to this bug. We're working on bringing it in now.\n. Hi @BrunoDeBarros, thanks again for this bug report.\nI forgot to follow up, but last week we released 4.0.0, which removes the explicit setting of a TLS version from the bindings in preference of more granular configuration recommendations based on specific environments. Can you give that a shot and see what happens?\nI'm going to close out this issue for now, but feel free to re-open if you're still seeing problematic behavior.\n. > I'll update our app to use this, run our tests, and let you know there are any issues or if any clients report anything.\nGreat :) Thank you!\n. Hi there,\nSo first of all, we've been seeing a few hard-to-debug problems on older versions of PHP/libcurl/OpenSSL. We'll try to help however we can here, but it's worth saying in advance: likely the easiest path by far here is going to be just to upgrade to a newer line of PHP.\nJust out of curiosity, we have another problem that doesn't look too dissimilar that was reported recently. Would you mind applying the following patch to your stripe-php and seeing if it fixes the problem for you?\n``` patch\ndiff --git a/lib/HttpClient/CurlClient.php b/lib/HttpClient/CurlClient.php\nindex a8c8877..d42f9c0 100644\n--- a/lib/HttpClient/CurlClient.php\n+++ b/lib/HttpClient/CurlClient.php\n@@ -151,37 +151,7 @@ class CurlClient implements ClientInterface\n             $opts[CURLOPT_SSL_VERIFYPEER] = false;\n         }\n\n// @codingStandardsIgnoreStart\n// PSR2 requires all constants be upper case. Sadly, the CURL_SSLVERSION\n// constants to not abide by those rules.\n//\n// Explicitly set a TLS version for cURL to use now that we're starting\n// to block 1.0 and 1.1 requests.\n//\n// If users are on OpenSSL >= 1.0.1, we know that they support TLS 1.2,\n// so set that explicitly because on some older Linux distros, clients may\n// default to TLS 1.0 even when they have TLS 1.2 available.\n//\n// For users on much older versions of OpenSSL, set a valid range of\n// TLS 1.0 to 1.2 (CURL_SSLVERSION_TLSv1). Note that this may result in\n// their requests being blocked unless they're specially flagged into\n// being able to use an old TLS version.\n//\n// Note: The int on the right is pulled from the source of OpenSSL 1.0.1a.\nif (OPENSSL_VERSION_NUMBER >= 0x1000100f) {\nif (!defined('CURL_SSLVERSION_TLSv1_2')) {\n// Note the value 6 comes from its position in the enum that\n// defines it in cURL's source code.\ndefine('CURL_SSLVERSION_TLSv1_2', 6); // constant not defined in PHP < 5.5\n}\n$opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n} else {\nif (!defined('CURL_SSLVERSION_TLSv1')) {\ndefine('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n}\n$opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n}\n// @codingStandardsIgnoreEnd\n$opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1; curl_setopt_array($curl, $opts);\n $rbody = curl_exec($curl);\n\n```\n. Oh and oops \u2014 I didn't refresh this page before responding, please try @remistr's script first :)\n. @robertkent87 Awesome to hear. Thanks for checking back in.\n. @olivierbellone Awesome! Thanks again for picking this up and running with it; it should be hugely helpful in tracking down future compatibility problems.\n\n\nLGTM.\n. Released as 3.22.0.\n. @snez Sorry for the answer that's sure to be disappointing, but 1.x is not maintained and we don't backport changes to it. Is there anything that we can do to help you upgrade? Being on such an ancient release is going to cause other trouble in the long run like not getting other more minor bug fixes, etc.\n. Released as 3.23.0.\n. > Since this is a major change, it might be worth delaying it a bit more and trying to think of anything we've wanted to change or fix for some time but couldn't because it would require a major version release\n@remistr Given that major version releases tend to be slightly intimidating as is, what do you think about trying to keep this one fairly minimal? I'm a little worried that if there are too many other changes they might present a bit of a barrier to upgrade.\n. > I can't remember a specific thing we wanted to fix but couldn't recently. I'm just trying to advocate for taking this a bit slower than usual and trying to make sure we're not missing a quick win we could get and avoid a 5.X in a few weeks.\nWell I should point out that we're not burning through major releases at an incredible rate (the last was almost a year and a half ago), so it doesn't seem like we'd be starting a 5.x line anytime soon. But cool, it would be nice to get some of the people on #289 fixed up, but aside from that I guess we're not in a particular rush. Let me know when you think it would be wise to move forward on this one.\n. Released as 4.0.0. Fingers crossed :)\n. Wow, PRs to expand the test suite are a pretty rare animal around here :) Looks like there may still be a test failure problem, but LGTM.\n. LGTM.\nThanks Kyle!\n. Excellent. Thank you!\n. Thanks!\n. Released as 4.0.1.\n. Thanks so much @dimsav!\n. Sent out as version 4.1.1.\n. Awesome. Thanks again @ob-stripe!\n. Ugh, it looks like our master build is broken (which has caused the problem here). This looks good though.. Released as 4.2.0.. Not at all! Released as 4.3.0.. Thanks!. @dpetrovics-stripe Yeah, that hypothesis sounds about right to me. Added a fix in #317 to see if we can get this patched up.. Thanks!. Nope! 4.4.0.. Looks generally good (pending questions on some of the related PRs). Thanks!. Good point! Fixed in 0eaf109. I also modernized the format of the API key and removed the part about sending credit card information so as to not encourage handling card details on the server side.\nThanks!. Nice! Thanks for adding in the test.\n. Nitpick, but maybe just clean up the whitespace around these parameters and alphabetized them?\n. Can we just add some basic function document on this one? We don't have any of the auto-paging stuff in our API docs right now, so it kind of makes sense to at least have some short documentation somewhere.\n. And actually, mind just changing these two comments to read \"The Stripe account ID for requests to connected accounts.\" (Mostly just changing the casing on \"stripe_account\".)\n. Hey @olivierbellone! Great fixes. This is looking really good to me.\nSorry to push it, but can I make one more requested it change? It might be advantageous if we could send in an additional request option in the initial collection initialization here, and just verify that it appears in the second request below. This has the advantage of checking that parameters that were given to the original collection will be sent along in subsequent requests as expected.\nI remember that I messed up something along these lines in the Java bindings and any additional sanity checks that we can put in would probably be a reasonably good idea.\n. Typo here: should be $defaultOptions.\n. Thanks for adding the documentation though! We don't have enough of it :$\n. I think you could just call this instanceUrl as well. The disambiguation is kind of nice, but I'm not crazy about starting a convention to prefix static functions with class*.\n. Just in the interest of leaving things better than we found them, mind putting some documentation on this function?\n. +1 on the new name! Thanks.\n. Nice. Way cleaner here now.\n. Oh man, TBH, I find that using reflection to access internal methods is testing practice that's kind of terrible on deep level, but I see that you're just following the existing convention here :$ Hopefully we can refactor this a bit later to be more palatable.\n. In retrospect, this definitely fits best up in the header of this file. Nice!\n. Ugh, pretty minor, but I just noticed this typo on \"compatibility\". Mind fixing that?\n. Definitely a nit, but it looks like many of these other errors are named in the singular form. Any particular reason to prefer Permissions over Permission here?\n. ",
    "na-ji": "Ok it's what I did but I don't like modifying vendors because it will be discarded on update. It's should be an option to use, like stripe-java where we can easily configure the proxy. \nMaybe I can implement this and do a PR ?\n. ",
    "iansltx": "While implementing your own CurlClient is all well and good, that throws out all of the painstaking conventions the existing client has (e.g. around timeouts ;) ) so probably shouldn't be required to add a proxy (one more curl_setopt() call).\nOn top of that, looked at the CurlClient again and there's no easy way to extend it while tweaking a minor aspect of the client's behavior...the handle gets init'd and exec'd in the same call without any hooks (flag/value checks like timeouts and SSL verification don't count IMO).\nSince I need proxy support for a project that just switched to Stripe, I'll build a tweaked CurlClient allowing that and PR, plus maybe a PoC for injecting a callable that can return an array of curlopts at L57 of CurlClient.php. Anything that needs to stay as-is will get overwritten later in the process, though maybe that's a bit too much flexibility and should stay out of the mainline library :)\n. #234 has an impl that allows either a callable or a static array to be supplied with base options. Was going to add some more methods and then realized that there are multiple knobs to turn on proxy in addition to the one I need (only CURLOPT_PROXY), and if you need that functionality you probably know which CURLOPT_* flags to flip anyway because you've done it elsewhere in your code base.\nLooks like tests are green except for what's failing from earlier (live transfers, five tests). Maybe the test suite should allow those exceptions as a valid outcome so all the builds aren't failing? :)\n. @remistr @na-ji Now that the above is merged, you can add proxy options without replacing CurlClient or revising vendored code :)\n. If y'all want to set a higher minimum, let me know and I'll revise. But we'll be using this internally with 5-10 second timeouts whether this gets merged or not to avoid having external effects any time y'all go down (like right now).\n. Fair apoint about the static/instance var bits. Just have to figure out a way to have the instance vars apply when the main interfaces to the lib are static calls. Maybe a setInstance method? Will update this PR with what I'm thinking later.\n. Okay...so the static HTTP client setter is what should be used. Which means the CurlClient either needs constructor injection or timeout override instance methods. Which do y'all prefer?\n. Revised to use instance methods, added tests, added docs, bugfixed. What do y'all think?\n. Add wording here onc ey'all decide what's appropriate and I'll update the readme in the PR.\nAnother approach would be to, for transactions that only ping internal Syrioe resourcrs, such as connected account balance inquiry, have a lower timeout. Probably a future enhancement though.\n. :+1: or :-1: on this? What should the readme's cautionary tales look like?\n. Changed. Thx in advance for the merge!\n. 1. All I need is the static array option; the closure was what I thought of first because that allows hooking into the request method which may have other uses (debug/logging), but it's not necessary for my use case.\n2. The only time that call would change is if the signature of request() changed, which would probably result in a change to ClientInterface anyway, resulting in a BC break for the whole thing, unless you're just adding an optional param to request(), in which case the call_user_func call would just tack on that extra param, and any closure using those params would continue working.\nThat said, it's probably clearer (and requires less code changes in the future) if that call explicitly passes on the parameters of the request() call, rather than using the individual vars. Making that change now.\nLastly, if y'all don't see any value in having the callable option, I don't mind re-PRing without it; just say the word :) Again, my own use case is covered by the non-callable option...I just promised I'd show a PoC for the callable one.\n. Thanks! Just updated project deps to point back at this repo. :+1: \n. ",
    "DarkSilence": "@matthewarkin  I haven't.\n. ",
    "benklocek": "@brandur You got it right with the library being vendored twice. Yes, require_once is not working because they are in different directories.\n. ",
    "jflinter": "Hey @brandur - this has been fixed in the iOS SDK on master, although we have yet to release an updated version to cocoapods/etc (we'll do this next week when I'm back from vacation). Thanks for pinging!\n. re-r? @brandur \n. ",
    "lalshubham": "The No such token error usually means that you're using an incorrect Stripe public API key. Make sure that you're using the same testmode publishable key / secret key pair. and also change var stripe = stripe('Publishable key') in your javascript code. ",
    "Abdorabi": "May help\nhttps://help.cart66.com/article/304-whats-the-difference-between-my-secret-key-and-my-publishable-key-at-stripe. ",
    "Jonathonbyrd": "It's in your base Object class\n. ",
    "rtntdeck": "Libcurl version: 'version' => string '7.30.0'\nHere is another \"warning\" in the same error sequence.\nInvalid callback 0, no array or string given in /client/vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 120\nThe error is that the curl is not successfully setup because of the lack of valid callback; thus, no headers are written which does cause a Fatal Error within the CurlClient.php as defined on line 176.\nLine 118 - curl_setopt_array($curl, $opts); returns no $curl object\nLine 119 - $rbody = curl_exec($curl); returns false because there is no $curl object.\nIF line 100 is commented out Line 118 and 119 succeed and there is no Fatal Error caught by line 176.\n. You're right. That was from a test I ran where I was trying to set CURLOPT_HEADERFUNCTION on its own instead of in the array.\nWith the removal of that single line. Here is the \"warning\"\nPHP Warning:  Invalid callback 0, no array or string given in /Users/tdecker/local/source/ica/ise2/client/vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 119\n. Thanks for digging in to it.  Following is the entire sequence with the fatal error that flows from the 2 warnings. I'm on OSX 10.11.3\nWhen the following line is commented out there are no errors or warnings.\n$opts[CURLOPT_HEADERFUNCTION] = $headerCallback;\nI don't use Closures at all in PHP but my theory is that it has to do with the way $headerCallback is defined.\nSee...http://stackoverflow.com/questions/6482068/curl-setoptch-curlopt-headerfunction-arraythis-readheader-not-working\n[03-Feb-2016 23:06:10 America/Chicago] PHP Warning:  Invalid callback 0, no array or string given in vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 119\n[03-Feb-2016 23:06:10 America/Chicago] PHP Stack trace:\n[03-Feb-2016 23:06:10 America/Chicago] PHP   1. {main}() public/index.php:0\n[03-Feb-2016 23:06:10 America/Chicago] PHP   2. include_once() public/index.php:28\n\n[03-Feb-2016 23:06:10 America/Chicago] PHP   9. Stripe\\Customer::create() controllers/core/StripeHandler.php:128\n[03-Feb-2016 23:06:10 America/Chicago] PHP  10. Stripe\\ApiResource::_create() vendor/stripe/stripe-php/lib/Customer.php:37\n[03-Feb-2016 23:06:10 America/Chicago] PHP  11. Stripe\\ApiResource::_staticRequest() vendor/stripe/stripe-php/lib/ApiResource.php:142\n[03-Feb-2016 23:06:10 America/Chicago] PHP  12. Stripe\\ApiRequestor->request() vendor/stripe/stripe-php/lib/ApiResource.php:108\n[03-Feb-2016 23:06:10 America/Chicago] PHP  13. Stripe\\ApiRequestor->_requestRaw() vendor/stripe/stripe-php/lib/ApiRequestor.php:59\n[03-Feb-2016 23:06:10 America/Chicago] PHP  14. Stripe\\HttpClient\\CurlClient->request() vendor/stripe/stripe-php/lib/ApiRequestor.php:179\n[03-Feb-2016 23:06:10 America/Chicago] PHP  15. curl_exec() vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php:119\n[03-Feb-2016 23:06:10 America/Chicago] PHP Warning:  curl_exec(): Could not call the CURLOPT_HEADERFUNCTION in vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 119\n[03-Feb-2016 23:06:10 America/Chicago] PHP Stack trace:\n[03-Feb-2016 23:06:10 America/Chicago] PHP   1. {main}() public/index.php:0\n[03-Feb-2016 23:06:10 America/Chicago] PHP   2. include_once() public/index.php:28\n\n[03-Feb-2016 23:06:10 America/Chicago] PHP   8. Client\\Core\\StripeHandler::subscribeUser() views/Subscription.php:41\n[03-Feb-2016 23:06:10 America/Chicago] PHP   9. Stripe\\Customer::create() controllers/core/StripeHandler.php:128\n[03-Feb-2016 23:06:10 America/Chicago] PHP  10. Stripe\\ApiResource::_create() vendor/stripe/stripe-php/lib/Customer.php:37\n[03-Feb-2016 23:06:10 America/Chicago] PHP  11. Stripe\\ApiResource::_staticRequest() vendor/stripe/stripe-php/lib/ApiResource.php:142\n[03-Feb-2016 23:06:10 America/Chicago] PHP  12. Stripe\\ApiRequestor->request() vendor/stripe/stripe-php/lib/ApiResource.php:108\n[03-Feb-2016 23:06:10 America/Chicago] PHP  13. Stripe\\ApiRequestor->_requestRaw() vendor/stripe/stripe-php/lib/ApiRequestor.php:59\n[03-Feb-2016 23:06:10 America/Chicago] PHP  14. Stripe\\HttpClient\\CurlClient->request() vendor/stripe/stripe-php/lib/ApiRequestor.php:179\n[03-Feb-2016 23:06:10 America/Chicago] PHP  15. curl_exec() vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php:119\n[03-Feb-2016 23:06:10 America/Chicago] PHP Fatal error:  Uncaught exception 'Stripe\\Error\\ApiConnection' with message 'Unexpected error communicating with Stripe.  If this problem persists, let us know at support@stripe.com.\n(Network error [errno 23]: Failed writing header)' in vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php:182\nStack trace:\n0 vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php(144): Stripe\\HttpClient\\CurlClient->handleCurlError('https://api.str...', 23, 'Failed writing ...')\n1 vendor/stripe/stripe-php/lib/ApiRequestor.php(179): Stripe\\HttpClient\\CurlClient->request('post', 'https://api.str...', Array, Array, false)\n2 vendor/stripe/stripe-php/lib/ApiRequestor.php(59): Stripe\\ApiRequestor->_requestRaw('post', '/v1/customers', Array, Array)\n3 vendor/stripe/stripe-php/lib/ApiResource.php(108): Stripe\\ApiRequestor->reques in vendor/stripe/stripe-php/lib/HttpClient/CurlClient.php on line 182\n. Also realized I left the wrong link to stackoverflow in the first post.\nHere it is.\nhttp://stackoverflow.com/questions/32834703/stripe-api-php-invalid-callback\n. With no environment changes I did the following.\nI pulled the readHeader function up as its own method within the class and everything works fine. No warnings or Errors and $this->rheaders is populated at the end of a call.\nIn doing so it was also required to make rheaders a class property and change some references to $this->rheaders ($this since it is not a static class or set of functions).\nAdding this line made the customHeaderCallback get inlined with Curl correctly.(again $this because its not a static class)\n$opts[CURLOPT_HEADERFUNCTION] = array($this, 'customHeaderCallback');\npublic function customHeaderCallback ($curl, $header_line){\n    if (strpos($header_line, \":\") === false) {\n            return strlen($header_line);\n        }\n        list($key, $value) = explode(\":\", trim($header_line), 2);\n        //$rheaders[trim($key)] = trim($value);\n        $this->rheaders[trim($key)] = trim($value);\n        return strlen($header_line);\n}\nAs for reasons why no one else has come across this I can only guess. A)PHP community isn't yet using stripe-php 3.* (which is when CurlClient was introduced). B)From what I can tell most PHP folks have coded their own Curl wrappers thus may never hit this code. Purely guesses though.\n. @axis80 here is what I have done that I am still using in production.\nAll changes are for the stripe/stripe-php/lib/HttpClient/CurlClient.php file.\n```\n    //Add this as a class property\n    public $rheaders = array();\n//Add this class method\n    public function customHeaderCallback ($curl, $header_line){\n        if (strpos($header_line, \":\") === false) {\n                return strlen($header_line);\n            }\n            list($key, $value) = explode(\":\", trim($header_line), 2);\n            $this->rheaders[trim($key)] = trim($value);\n            return strlen($header_line);\n    }\n //Original line directly below\n //$opts[CURLOPT_HEADERFUNCTION] = $headerCallback;\n\n //This is the changed line.\n $opts[CURLOPT_HEADERFUNCTION] = array($this, 'customHeaderCallback');\n\n```\n. ",
    "axis80": "I realize that this issue is closed.  I simply wanted to report that I experienced it also.  PHP version 5.4.38, Curl 7.38.0, OpenSSL 1.0.1e, cPanel hosting control panel.\nI am unable to upgrade any of the above components as this is a client's hosting account that is not under my control.   I've tried various permutations of rtntdeck's fix with no luck.  I've pretty much exhausted the limits of my abilities in debugging it, so I'm afraid I don't have much more to offer than this \"me too\" report.\n. ",
    "rikless": "Actually, a Service Provider can determine if the current request is owned by a managed account. If it's true, then you can use this setter to push all stripe requests with correct configuration, instead of setting multiple parameters on different places.\nThe service provider will set the value, if needed, only on current request life cycle.\nTo be more explicit, all services will just have to be written this way : \n``` php\n//StripeServiceProvider class\n\\Stripe\\Stripe::setApiKey(PLATFORM_SECRET_KEY);\nif ($request->isManagedAccount()) {\n\\Stripe\\Stripe::setAccountId($account_id);\n\n}\n```\nphp\n\\Stripe\\Customer::create(\n  array(\"description\" => \"example@stripe.com\")\n);\nInstead of\n``` php\nif($this->managedAccount())\n    \\Stripe\\Customer::create(\n      array(\"description\" => \"example@stripe.com\"),\n      array(\"stripe_account\" => CONNECTED_STRIPE_ACCOUNT_ID)\n    );\n}\nelse{\n     \\Stripe\\Customer::create(\n          array(\"description\" => \"example@stripe.com\"),\n        );\n}\n```\nThis can save a lot of time when building an app to abstract this management.\n. Sure it works.\nThis is just a way to let developer making the stripe_account management on 1 place for all the application.\nWhen the Service Provider is loaded, I can use all stripe objects without testing if I'm in a managed account request, or not, and find the correct stripe_account id, because this logic is made on one place.\n. Done\n. Thank you @brandur :)\n. ",
    "Varun006": "Thanks for the reply.\nCan you please point out what can be wrong ??\nI strongly feel there is a time limit on CURL request which is stopping the\nflow.\nAm I right ??\nOn Saturday 6 February 2016, remistr notifications@github.com wrote:\n\nClosed #222 https://github.com/stripe/stripe-php/issues/222.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/222#event-541808575.\n\n\n-- Varun DavdaPHP Developer\n. I found in documentation that it requires HTTPS. I do not have https, i\nhave HTTP.\nIs that a problem?\nOn Saturday 6 February 2016, remistr notifications@github.com wrote:\n\n@Varun006 https://github.com/Varun006 : Requests don't take more than\n30 seconds to execute with our API. If you create a basic customer without\na card in Test mode or even simply retrieve one you manually created in the\ndashboard the request will execute in a few seconds at most and usually way\nfaster than that.\nThis error usually indicates that either curl is not enabled, or you have\nDNS issues on your server. An easy way to verify is to simply try to curl\nour API directly and see if you can reach us at all or not. Then checking\nyour PHP error logs for more details is usually the next step as most times\nit surfaces the error.\nFinally, reaching out to your host provider to ask why your server can't\nreach Stripe's at all should give you the answers you need.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/222#issuecomment-180820932.\n. I also checked if CURL is enabled in my system or not.\n\nIt's enabled.\nIf you would like to help me further, you can check this URL to view the\nerror.\nhttp://varundavda.com/stripeTest\nThe code for the above route is.\nRoute::get('/stripeTest',function(){\n\\Stripe\\Stripe::setApiKey(\"sk_test_KeErGQM1FxILiOQr2sgkQo2H\");\n\\Stripe\\Charge::create(array(\n \"amount\" => 400,\n \"currency\" => \"usd\",\n \"source\" => \"tok_17b7svFQsLVHYySNuP1ouK0i\", // obtained with Stripe.js\n \"description\" => \"Charge for test@example.com\"\n));\n});\n\nTo view the curl status, please visit this link\nvarundavda.com/curlInfo\nThe code for above route is\nRoute::get('curlInfo',function(){\nif(is_callable('curl_init')){\n    echo \"Enabled\";\n}\nelse\n{\n    echo \"Not enabled\";\n}\n});\nThank you in advance.\nWould appreciate if you could help me.\n-- Varun DavdaPHP Developer\nOn Sun, Feb 7, 2016 at 11:05 AM, Varun Davda varundavda006@gmail.com\nwrote:\n\nI found in documentation that it requires HTTPS. I do not have https, i\nhave HTTP.\nIs that a problem?\nOn Saturday 6 February 2016, remistr notifications@github.com wrote:\n\n@Varun006 https://github.com/Varun006 : Requests don't take more than\n30 seconds to execute with our API. If you create a basic customer without\na card in Test mode or even simply retrieve one you manually created in the\ndashboard the request will execute in a few seconds at most and usually way\nfaster than that.\nThis error usually indicates that either curl is not enabled, or you have\nDNS issues on your server. An easy way to verify is to simply try to curl\nour API directly and see if you can reach us at all or not. Then checking\nyour PHP error logs for more details is usually the next step as most times\nit surfaces the error.\nFinally, reaching out to your host provider to ask why your server can't\nreach Stripe's at all should give you the answers you need.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/222#issuecomment-180820932.\n. Thank you for the reply.\n\n\nI came to know the reason why it was not working.\nThe outbond port 80/443 were blocked.\nDue to PHPUNIT file eval-stdin.php.\nI unblocked the port and it worked as smoothly as it could.\nThank you again :)\n-- Varun DavdaPHP Developer\nOn Sun, Feb 7, 2016 at 12:23 PM, Matthew Arkin notifications@github.com\nwrote:\n\nWell a couple of things:\n1. To be PCI compliant and to use Stripe in production you must have an\nSSL / TLS certificate for your website.\n2. Never share your secret API key even in test mode.\n3. Currently your site is not giving that Connection timed out after\n30001 milliseconds but rather it is saying You cannot use a Stripe token\nmore than once: tok_17b7svFQsLVHYySNuP1ouK0i. which makes sense because\nyou hard coded the token and are thus trying to charge it multiple times.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/222#issuecomment-180964091.\n. \n",
    "talon55": "I did a little bit more digging, and it turns out that the issue depends on the order of the keys in the nested subarrays. From the above example, this causes the bug:\nphp\n'address' =>array (...),\n'dob' => array (...),\n'first_name' => 'xgvukvfrde',\n'last_name' => 'rtcyvubhy',\nbut this works as intended:\nphp\n'first_name' => 'xgvukvfrde',\n'last_name' => 'rtcyvubhy',\n'address' =>array (...),\n'dob' => array (...),\n. ",
    "ummahusla": "@remistr Thank you. \n@brandur Yeah, problem is solved, thanks.\n. ",
    "webbudesign": "Sorry but what report you asking for. Install avast in your computer or mac and try to download your api php from github. Your github zip file have malware. I am reporting this and you say \"do not make spam\" \nFunny.\n. \n. From v2.0.0 to v3.11.0 all your zip files have Malware. I checked all and found problems. Please correct all previous releases. because this will give damage to the person's who using this api for payment.\n. ",
    "FuruholmAnton": "I have the same issue\n. ",
    "yespbs": "I check each file and found no issue, but unfotunately avast is deleting these file and some of which are important. I am not sure why this is becoming false positive ONLY when other files are passed without issue!!!. \nI believe the api library is ok but its spammed by github. Could have the repo scanned by github and some antivirus if possible? \nThis is only one github package that fails with Avast and I think there something wrong\n. I have checked exact files and seems all clean, if you have submitted to avast that ok, I will try to submit to Avast too from virus chest\n. @brandur could you paste the url and process, I can do it since it for my benefit\n. ",
    "theboolean": "You're welcome @brandur!\n. ",
    "babitabhandari": "Sir Please tell me how to include file in my project because when i use require_once(); it halt the execution and cause fatal error\n. Yes Sir, I have read the manual instructions and download the latest version of php libraries. Please can you tell me how to include file path.I have installed the php library in library folder and my webform stripe folder is located in modules folder.both are separated.Now the problem is i want to fetch php library in  module folder.For this i have used require_once(./stripe-php/init.php'); but it causes fatal errors.My php libraries file is located in C://wamp/www/drupal/sites/all/libraries/stripe-php/init.php.Now you just tell me how to include this file.\n. I have solve this issue.Actually the main problem was about require_once line.now its working and had successfully working payment in testing mode.\n. I have solved this issue.Thanx for help me.Actually the main problem was about require_once and i have solved it.\n. ",
    "pderksen": "Yes that works for the invalid key. Just tested.\nI was just looking at the invalid value PHP error HTML output and it cut off the error's message property.\nIf the behavior is as intended this can be closed. Thanks for the reply!\n. Not sure if this helps or is too late...\nThough they don't use this Stripe PHP library, the WooCommerce Stripe payment gateway added this:\nhttps://github.com/woothemes/woocommerce-gateway-stripe/commit/877dcabf5c60ef6e41f770ecf654274fa1fc0ce5\n. ",
    "MichaelJamesParsons": "Output from openssl version command:\nOpenSSL 1.0.1e-fips 11 Feb 2013\nI was unable to identify any errors related to this problem in our application logs, Apache logs, or PHP logs.\n@remistr @brandur \n. _Output of uname -a_\n\n@olivierbellone \n. cat /etc/-release*\n\nWe do not have the package that provides lsb_release installed on the operating system. I'm not authorized to install additional packages until our server admin approves it. He's out of the office today.\nI'll get that information to you as soon as possible.\n. We are unable to update openssl,libcurl, or the OS due to a legacy application constraint.\nAfter speaking with the senior developer, we have decided to fork the library with the following lines commented out:\nif (!defined('CURL_SSLVERSION_TLSv1')) {\n    define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n}\n$opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\nThank you.\n. ",
    "aaronhuisinga": "Hey @kyleconroy, I just wanted to point out that there might be more of an issue here than it seemed before. I've been using the Stripe PHP package in our production web app for a few years, and ran a composer update while the mistaken version 3.22.0 was available. Composer updated us to what it thought was the latest version (3.22.0). Problem being, every time we checked for an update, Composer saw that the version we had installed (v3.22.0) was greater than the latest available version (currently v3.20.0). \nThe only reason that I even caught this was that I received an email from Stripe warning us that TLS 1.0 and 1.1 were being deprecated and that we were using a version of the Stripe PHP package that would cease to work On January 1, 2017 or May 1, 2017.\nI was forced to clear our Composer cache, manually update the composer.json file to install v3.20.0, and then switch back to the proper versioning in the composer.json file. We're now back up and running with the proper latest release, but I'm assuming since this happened to us, there are probably several other instances of this same issue that developers haven't yet discovered.\nNormally this issue would take care of itself by the time v3.23.0 releases, but if Stripe is dropping support for TLS 1.0 and 1.1, some developer teams might find themselves surprised by why their app isn't working anymore. Not sure of the best way to let developers know about this, but I figured I should let you and the Stripe team know about the possible issue.\n. Thanks @brandur! I emailed you.\n. ",
    "dopesong": "Great support stripe guys! Thumbs up! \ud83d\udc4d \ud83d\udcaf \n. ",
    "MarkVaughn": "Yea, just some sort of bare minimum better than nothing.\nAlso knowing what fields are potentially available. I'll get on it then. \nCheers\n. @jarrodbell @brandur made a pr, but apparently it is \"useless\"\n. Thats fine, the two comments just had very little information and were pretty kurt and I've seen the style of my comments throughout many Open source projects, prefacing with the \"Class/Interface/Trait name\" before a block of descriptive text, then the methods and properties followed by author/package/link etc...\nIn my mind this is better than the no documentation style currently in place so unless you have improvements I don't see the harm in having consistency\ne.g\nhttps://github.com/elastic/elasticsearch-php/blob/master/src/Elasticsearch/Endpoints/Exists.php\nhttps://github.com/facebook/facebook-php-sdk-v4/blob/master/src/Facebook/FacebookClient.php\n. not sure why adding comments to code is causing travis to throw unknown errors.\n. I vote for any documentation is better than no documentation.\n\nReview status: 0 of 39 files reviewed at latest revision, 3 unresolved discussions, some commit checks failed.\n\nlib/Account.php, line 6 [r1] (raw file):\n\nPreviously, GrahamCampbell (Graham Campbell) wrote\u2026\n\nI was referring ONLY to that line I commented on. Not the annotations. :)\n\nThe purpose is differentiating between classes interfaces and traits. It's a header usually followed by a description paragraph describing the purpose which I did not write. My intention is to get the ball rolling on starting some sort of template here.\n\n\nComments from Reviewable\n Sent from Reviewable.io \n. they are not useless please see #250 and why this helps\n. Care to elaborate or are you just having a bad day?\n. So the correct package is stripe/stripe-php ?\n. ",
    "jarrodbell": "Any update on this @MarkVaughn ? I'd love this for working with the API in PhpStorm\n. ",
    "dinatest2010": "When I use the same card for new customer , Its working fine , So Only I asked Do we need to pass any parameter $customer->cancelSubscription(); ? \n. ",
    "manojmilani123": "When I update the code as you have mentioned above, it gives me below error:\nYou passed an empty string for 'verification'. We assume empty values are an attempt to unset a parameter; however 'verification' cannot be unset. You should remove 'verification' from your request or supply a non-empty value.\n. @remistr Can you Please re-open this issue as I am still unable to figure out the issue.\n. @remistr  Below is my full code, but now it gives error: You must provide a card that has the 'currency' field set when adding a card to a Stripe account.\n$file_success = \\Stripe\\FileUpload::create(\n  array(\n    \"purpose\" => \"identity_document\",\n    \"file\" => fopen($url, 'r')\n  ),\n  array(\"stripe_account\" => $account_info['stripe_managed_acc_id'])\n);\n$account = \\Stripe\\Account::retrieve($account_info['stripe_managed_acc_id']); \n$account->external_account = $_POST['stripeToken'];; \n$account->legal_entity->address->city = $_POST['city']; \n$account->legal_entity->address->line1 = $_POST['address']; \n$account->legal_entity->address->state = $_POST['state']; \n$account->legal_entity->address->postal_code = $_POST['postal_code']; \n$account->legal_entity->first_name = $_POST['first_name'];\n$account->legal_entity->last_name = $_POST['last_name'];\n$account->legal_entity->dob->day = $day;\n$account->legal_entity->dob->month = $month;\n$account->legal_entity->dob->year = $year;\n$account->legal_entity->ssn_last_4 = $_POST['ssn'];\n$account->legal_entity->type = strtolower($_POST['account_type']);\nif($_POST['account_type']=='Company')\n{\n    $account->legal_entity->business_name = $_POST['business_name'];\n    $account->legal_entity->business_tax_id = $_POST['business_tax_id'];\n}else\n{\n    $account->legal_entity->personal_id_number = $_POST['individual_id_no'];\n}\n$account->legal_entity->verification->document = $file_success['id']; \n$account->tos_acceptance->date = time();\n$account->tos_acceptance->ip = $_SERVER['REMOTE_ADDR'];\n$account->save(); \n. @remistr  When I pass currency as \"USD\" it says: \"USD\" is currently the only supported value for the currency parameter. If you will only be charging the card(not transferring to it), you should omit this parameter.\n. Ok, sorry about that.\n. @remistr  But just to update you, it worked when I added bank account instead of debit card. Debit card does not work with it as I tried using test debit card for US.\n. Thankyou for the support!!!\n. Ok, sorry for that.\n. ",
    "magna25": "I will just stick to the older version. can't get it to work.\n. ",
    "rasmusrygaard": "I think we need to upgrade the API version to avoid these test failures, thoughts on whether or not that's doable? I believe we'll need the new version in the Java libraries as well\n. That could very well be. Rebased and it looks like we're in the clear\n. ",
    "bocharsky-bw": "@brandur Fixed!\n. ",
    "Aswanthlenin": "php\ntry {\n  require('stripe/lib/Stripe.php');\n \\Stripe\\Stripe::setApiKey(\"sk_test_qdN0FXFuEMftUoBXeK5M3BoN\");//Replace with your Secret Key\n\n<p\\Stripe\\Charge::create(array(\n  \"amount\" => 1500,\n  \"currency\" => \"usd\",\n  \"card\" => $_POST['stripeToken'],\n  \"description\" => \"Charge for this\"\n));\nbut i have this problem : Fatal error: Class 'Stripe\\Charge' not found in .\nits my stripe path\nwamp>www >payment>workedfile>stripe\n. Thank you for your reply... i changed the path and now its working  perfectly ... ",
    "jlomas-stripe": "@Aswanthlenin This is really a better question for Stripe Support, as the Github Issues are meant for bugs with the library, as opposed to issues implementing Stripe.\nIf you write into support with the details of your error, along with the code that's causing it, they'd be happy to help!. Isn't Exception a global PHP class though, and in this case we're trying to catch a (global / other) Exception there?  Specifically, that json_decode threw an error?. @brandur-stripe No worries.  :)\nI think the alternative makes a lot of sense, since this is a weird case.  I'll take a run at that in the next little while.\nThanks!. @brandur-stripe This issue is actually a red herring caused by #329.  There's no problem adding an additional owner in the right place, but count($account->legal_entity->additional_owners); doesn't return the right value - it always returns 1 - so it's viewed as 'Update object at index 1' instead of 'Add an object at index $count'.. @gh-stripe @brandur-stripe I literally just landed on this while working on #326.\nCould we move this from StripeObject to AttachedObject and solve the problem?. Also, I totally agree with wanting to solve this particular (edge) case in a specific way - i.e., properly implementing an AdditionalOwner object (and maybe a LegalEntity object to contain it within the Account object).\nAs it stands now, we've already 'hacked' StripeObject to work as an array so it might be worth just making that hack 'complete' (by merging this) so this can work the way folks expect it to now, and then doing it 'right' when we have the time/resources.\nAnyways, just a thought.\n. ",
    "jwachira": "@manojmilani123 - Did you ever get a fix for the issue above?. ",
    "nickma42": "@brandur thanks - fastest PR response I think I've ever seen! We're possibly a bit too liberal with our metadata, and the >1024b condition explains why it was only happening for certain users/purchases. Thanks again, much appreciated.\n. ",
    "AndriySvirin": "Thank you for fast reply, this param (customer) is not empty,\nAlso I had add additional param limit=1, but it too do not work.\nversion = 3.15.0\n. Dump of funct\nApiResource::_staticRequest\narray(\n  'get',\n  '/v1/charges',\n  array(\n    'customer' => 'cus_8jxoNf7H2OYpGD',\n  ),\n  NULL,\n)\n. That customer has only one charge but I got 10 charges back. Something is wrong \n. version = 3.15.0\nDid not modified. Used another customerID, because it is invalide for me\n. ` $charges = \\Stripe\\Charge::all(array(\n          \"limit\" => 10,\n          \"customer\" => 'cus_8jxoNf7H2OYpGD',\n    ));\n// check that we really got just one charge\n    $nbCharges = count($charges->data);\n    if ($nbCharges != 1) {\n      echo \"That customer has only one charge but I got $nbCharges charges back. Something is wrong\";\n    }\n    else {\n      echo \"I asked for up to 10 charges but only got one. That script works!\";\n    }`\nMy code with msg:\nThat customer has only one charge but I got 10 charges back. Something is wrong\n. What API-key to use?\n. Sorry, I see\n. Executed with msg\nI asked for up to 10 charges but only got one. That script works!\n. Is it my mistake? Will I research?\n. Ok thanks\n. In Stripe UI Filter by Plan do not work too.\nhttp://prntscr.com/cfjvt9\n. No problem. I thought, that you interesting in this too.\n. ",
    "alexjameslowe": "thanks!\nOn Mon, Jul 11, 2016 at 1:50 PM, Brandur notifications@github.com wrote:\n\nClosed #271 https://github.com/stripe/stripe-php/issues/271.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/271#event-719147422, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/ATdWV-QeFeU-HofgjMnwazIdlbQ2zZcZks5qUpBZgaJpZM4JJjxb\n.\n. \n",
    "apiaget": "From what I can see on the hosting dashboard, it is said that it uses OpenSSL 1.0.1e 11 Feb 2013. So it should support TLSv1.2.\n. Hello and sorry for the late response.\n@brandur \nWhen I tested your code, I got the same error as @erickbj : \"Use of undefined constant CURL_SSLVERSION_TLSv1_2\". I did the modification suggested (defining the CURL_SSLVERSION_TLSv1_2 to 6 and got it working (I got the \"TLS 1.2 supported, no action required.\" message).\nAbout the OS, I am on Debian wheezy (I used the lsb_release command because there was no /etc/lsb-release file)\n~$ /usr/bin/lsb_release -a\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 7.10 (wheezy)\nRelease:        7.10\nCodename:       wheezy\n@MichaelBrenden \nHere is the cURL version (7.26, and I am on Debian 7.10)\n~$ /usr/bin/curl --version\ncurl 7.26.0 (x86_64-pc-linux-gnu) libcurl/7.26.0 OpenSSL/1.0.1e zlib/1.2.7 libid\nProtocols: dict file ftp ftps gopher http https imap imaps ldap pop3 pop3s rtmp\nFeatures: Debug GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP\nSadly I cannot modify the system to use a newer version of openssl, but will open a ticket.\n. I tested the patch and it works for me.\nDebian 7.10 wheezy\ncurl 7.26.0\n. ",
    "MichaelBrenden": "Check your installed / compiled-against version of curl.\ncurl 7.34.0 was the first to claim support for TLSv1.2\nDebian 7.x is still at curl 7.26.0\nAlso, compile latest curl against latest openssl (1.0.1t)\nEastGhostCom\n. ",
    "erickbj": "I just had the same issue. Connection worked on my dev machine (cURL 7.35.0) without any changes to the lib but didn't work in my test environment (curl 7.22.0).\nI applied the change proposed at https://github.com/stripe/stripe-php/issues/275#issuecomment-235113319 and the test script worked on both environments.\nMy test environment is in Acquia and I'm using their latest available PHP version (5.6.22 as of now), it's a pretty comprehensive/general hosting solution for Drupal sites, so I guess this could be affecting a reasonable number of users.\n. Hi @brandur, here's some more info.\n$ cat /etc/lsb-release gives\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=12.04\nDISTRIB_CODENAME=precise\nDISTRIB_DESCRIPTION=\"Ubuntu 12.04.5 LTS\"\nAlthough I'm pretty sure their PHP version (5.6.22) is custom built from source.\nphpinfo() gives some more info that might be useful (excerpt):\nSSL Version OpenSSL/1.0.1\nOpenSSL\nOpenSSL support enabled\nOpenSSL Library Version OpenSSL 1.0.1 14 Mar 2012\nOpenSSL Header Version  OpenSSL 1.0.1 14 Mar 2012\ncURL\ncURL support    enabled\ncURL Information    7.22.0\nAlthough the test script indicates TLS v1.2 support works after the proposed changed is applied I see a warning on Stripe\\Account->retrieve() API calls telling \"Use of undefined constant CURL_SSLVERSION_TLSv1_2\". Maybe we should also change\nif (!defined('CURL_SSLVERSION_TLSv1')) {\n  define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n}\nfor\nif (!defined('CURL_SSLVERSION_TLSv1_2')) {\n  define('CURL_SSLVERSION_TLSv1_2', 6);\n}\n. This one might be tricky...\nAlthough @olivierbellone's observation about OpenSSL 1.0.1c version is correct according to the linked documentation, it's not really valid in my scenario.\nI took the data below from my test environment (Acquia):\n$ openssl version gives\nOpenSSL 1.0.1 14 Mar 2012\nVersion displayed in phpinfo() is:\ncURL Information   7.22.0\nSSL Version    OpenSSL/1.0.1\nI tested for TLS1.2 support in OpenSSL (cli version) by executing what's suggested in http://serverfault.com/questions/638691/how-can-i-verify-if-tls-1-2-is-supported-on-a-remote-web-server-from-the-rhel-ce#answer-638692. I do get the certificate chain and handshake, so AFAIK that means my OpenSSL lib does support TLS v1.2.\nWhen I applied the original suggestion I was also able to get a connection with TLS v1.2 with the test script (or at least the script indicated so).\nHowever because of the version comparison that the latest patch does the test now fails, although I believe from the above checks that my PHP libcurl/OpenSSL setup should support TLS 1.2 (OPENSSL_VERSION_NUMBER is 0x1000100F in my test environment).\nThis might be some confusion/error in PHP/cURL/OpenSSL related documentation, or might be related to custom PHP builds (with different libcurl/OpenSSL setups).\nI think ultimately there should be an API/configuration/something to allow a developer to \"force\" TLSv1.2 version/usage and workaround specific version checking.\nJust my two cents...\nEDIT: it seems some TLS v1.2 support was introduced in 1.0.1 (14 Mar 2012). Have a look at https://www.openssl.org/news/cl101.txt. Look for \"Changes between 1.0.0h and 1.0.1  [14 Mar 2012]\" and scroll down, you'll find a bunch of \"Initial TLS v1.2  support\". So maybe we could check against OPENSSL_VERSION_NUMBER >= 0x1000100F, which makes the test script to pass in my test env).\n. @olivierbellone as per my above comment I did two tests with php/curl (test script provided) and openssl cli (stackoverflow link) and I can connect using TLS v1.2 with OpenSSL 1.0.1.\nIf there's any extra test you could recommend I can certainly do those as well!\n. ",
    "plato1123": "I am running Curl 7.24 which was returning this error with Stripe/Drupal, \"Please initiate HTTPS connections with TLS 1.2 or later\".  The Drupal Stripe module at present only supports the 3.13.0 and 2.2.0 versions of the Stripe library.  I found that rolling back to the 2.2.0 version of the library got this working, somehow works fine with the older version of Curl.\n. ",
    "tapouillo": "trying the patch above still gives some problems on centos 6.\nforcing CURL_SSLVERSION_TLSv1_2 and updating openssl works with the test, it gives 'TLS 1.2 supported, no action required.'\nbut when using the api, or a webhook, I still had the tls 1.0 insecure error... \nfollowing the instruction here is not enough: https://support.stripe.com/questions/how-do-i-upgrade-my-stripe-integration-from-tls-1-0-to-tls-1-2\nit also depends on the way your php/ssl is built. in my case, 'php -i | grep SSL' is giving\nSSL => Yes\nSSL Version => NSS/3.21 Basic ECC\nwe see that it is not using openssl... if we update nss too, all is working as expected (no need to rebuild all).\n-> yum update nss\nand restart your php service\n. @ob-stripe I did not try exactly that, but as shown above, i modified the CurlClient.php for testing $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\nand it was still throwing the error. (using stripe version 4.1.1). \nonly updating nss worked, openssl and libcurl is not enough, and sometimes it's not that easy to update the systems config on live servers. (currently using php-fpm / nginx with remi56 repo). . ",
    "drafie": "Thanks for the fast reply.   That did indeed fix the problem!   But, I am unclear on why we need to set these explicitly. \nThank you\n. @brandur I was just going to post it to you.   \nphp --version\nPHP 5.3.10-1ubuntu3.23 with Suhosin-Patch (cli) (built: May 19 2016 20:38:03)\nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies\nYou have new mail in /var/mail/root\ncurl --version\ncurl 7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3\nProtocols: dict file ftp ftps gopher http https imap imaps ldap pop3 pop3s rtmp rtsp smtp smtps telnet tftp\nFeatures: GSS-Negotiate IDN IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP\n. @brandbur running Ubuntu.   \ncat /etc/issue \nUbuntu 12.04.5 LTS \n(hangs head in shame - old distro)\napt-cache policy php5\nphp5:\n  Installed: 5.3.10-1ubuntu3.23\n  Candidate: 5.3.10-1ubuntu3.23\n  Version table:\n *** 5.3.10-1ubuntu3.23 0\n        500 http://snet2-ord1.mirror.rackspace.com/ubuntu/ precise-updates/main amd64 Packages\n        500 http://snet2-ord1.mirror.rackspace.com/ubuntu/ precise-security/main amd64 Packages\n        500 http://snet1-ord1.mirror.rackspace.com/ubuntu/ precise-updates/main amd64 Packages\n        500 http://snet1-ord1.mirror.rackspace.com/ubuntu/ precise-security/main amd64 Packages\n        500 http://mirror.rackspace.com/ubuntu/ precise-updates/main amd64 Packages\n        500 http://mirror.rackspace.com/ubuntu/ precise-security/main amd64 Packages\n        500 http://archive.ubuntu.com/ubuntu/ precise-updates/main amd64 Packages\n        500 http://security.ubuntu.com/ubuntu/ precise-security/main amd64 Packages\n        100 /var/lib/dpkg/status\n     5.3.10-1ubuntu3 0\n        500 http://snet2-ord1.mirror.rackspace.com/ubuntu/ precise/main amd64 Packages\n        500 http://snet1-ord1.mirror.rackspace.com/ubuntu/ precise/main amd64 Packages\n        500 http://mirror.rackspace.com/ubuntu/ precise/main amd64 Packages\n        500 http://archive.ubuntu.com/ubuntu/ precise/main amd64 Packages\n. @brandur \n\nsudo apt-get update && sudo apt-get install --only-upgrade openssl\nopenssl is already the newest version.\n. \n",
    "troglodyte": "We're running into this same issue and I've been following issue #277 closely trying to gauge when the code may be pushed. I've confirmed by manually calling the newer version works as well.\n(We're running debian wheezy)\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n. I've tested this patch successfully on my server with the following setup:\nLinux dev01 3.2.0-4-amd64 #1 SMP Debian 3.2.78-1 x86_64 GNU/Linux\ncurl version 7.26.0 \n. ",
    "nbolender": "I ran into this issue when upgrading my Stripe library and discovered the fix before finding this ticket. Strangly, this occurs on my production/staging environment (Ubuntu) but not my local environment (OS X). I don't know what combination is causing it, but openssl is at v1.0.1h (5 Jun 2014).\nThe fix posted by @brandur works for me, with the addition of defining the constant for compatibility reasons (I'm running PHP 5.4.31).\n``` diff\n-        if (!defined('CURL_SSLVERSION_TLSv1')) {\n-           define('CURL_SSLVERSION_TLSv1', 1); // constant not defined in PHP < 5.5\n+        if (!defined('CURL_SSLVERSION_TLSv1_2')) {\n+           define('CURL_SSLVERSION_TLSv1_2', 6); // constant not defined in PHP < 5.5\n         }\n-        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1;\n+        $opts[CURLOPT_SSLVERSION] = CURL_SSLVERSION_TLSv1_2;\n         // @codingStandardsIgnoreEnd\n     curl_setopt_array($curl, $opts);\n\n```\n. @brandur Not sure if it matters anymore, but I am on Ubuntu 14.04 (trusty).\nBTW kudos to you guys for maintaining backwards compatibility and a beautiful API. I was able to upgrade from a 2013 version to the latest in about 5 minutes.\n. ",
    "iannerney": "@olivierbellone: I'm working with @troglodyte on this. Here's our current OpenSSL version:\n\nOpenSSL 1.0.1e 11 Feb 2013\n\nThank you!\n. ",
    "Nakilon": "1) I suppose we inherit the Iterator class, not Array: http://php.net/manual/en/iterator.next.php\n\nAny returned value is ignored.\n\n2) I'm not coding in PHP and I don't have the environment to run this stuff.\nI'm just reviewing my colleague's code and when he used foreach and []= to convert the whole iterator to array, I asked him why he didn't use iterator_to_array() -- he says \"it didn't work\" and refuses to explain. So I looked into this function and assumed to find a bug.\n. I don't understand how foreach \"did work\" for him though.\n. Probably that's not \"the first item from each page\", but \"all the items without the first item of each page starting from the second one\", that means smth is already calling the next() method that I thought was missing.\n. ",
    "thecrogers": "@brandur Thanks for the quick response. \nThat is what I had thought initially as well, but was unsure if changing the constructor was the best idea. If you are ok with changing the constructor for Card Error, I am good with that as well. \n. @GrahamCampbell are you asking a question or making a statement. \n. @GrahamCampbell thanks for pointing that out, but I am following the style that is used in the other exception classes. Where the property requestId is not defined either. See this file for reference https://github.com/stripe/stripe-php/blob/master/lib/Error/Base.php#L21\n. ",
    "stripe-ci": "Couldn't assign pull request to invalid user: @thecrogers\n. View your build status at https://cibot.corp.stripe.com/stripe/stripe-php/pull/310.. View your build status at https://cibot.corp.stripe.com/stripe/stripe-php/pull/311.. ",
    "max-voloshin": "Constants:\n```\nOPENSSL_VERSION_TEXT => \"OpenSSL 1.0.1e-fips 11 Feb 2013\"\nOPENSSL_VERSION_NUMBER => 268439647\nCURLOPT_SSLVERSION => 32\nCURL_SSLVERSION_TLSv1_0 \u2013 undefined\nCURL_SSLVERSION_TLSv1_1 \u2013 undefined\nCURL_SSLVERSION_TLSv1_2 \u2013 undefined\n```\ncURL:\nInformation: 7.19.7\nVersion: NSS/3.16.2.3 Basic ECC\nCentOS:\n$ uname -a\nLinux host 2.6.32-504.3.3.el6.x86_64 #1 SMP Wed Dec 17 01:55:02 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\nStrange thing that I see TLSv1.2 here:\n```\n\n\n\n$url = 'https://api-tls12.stripe.com/v1/charges';\n=> \"https://api-tls12.stripe.com/v1/charges\"\n$fp = fopen($url, 'r')\n=> stream resource #244\nstream_get_meta_data($fp)\n=> [\n     \"crypto\" => [\n       \"protocol\" => \"TLSv1.2\",\n       \"cipher_name\" => \"ECDHE-RSA-AES128-GCM-SHA256\",\n       \"cipher_bits\" => 128,\n       \"cipher_version\" => \"TLSv1/SSLv3\",\n     ],\n     \"timed_out\" => false,\n     \"blocked\" => true,\n     \"eof\" => false,\n     \"wrapper_data\" => [\n       \"HTTP/1.1 200 OK\",\n       \"Server: nginx\",\n       \"Date: Mon, 15 Aug 2016 19:37:31 GMT\",\n       \"Content-Type: application/json\",\n       \"Content-Length: 71\",\n       \"Connection: close\",\n       \"Strict-Transport-Security: max-age=31556926; includeSubDomains\",\n     ],\n     \"wrapper_type\" => \"http\",\n     \"stream_type\" => \"tcp_socket/ssl\",\n     \"mode\" => \"r\",\n     \"unread_bytes\" => 71,\n     \"seekable\" => false,\n     \"uri\" => \"https://api-tls12.stripe.com/v1/charges\",\n   ]\n```\n\n\n\nLet me know if I can provide additional information.\n. ",
    "cocowalla": "Ah, thanks for the clarification!\n. ",
    "photogaff": "I might add that the charge does not appear on Stripe, either test or live - reflecting that the charge function is not executing the charge, but also not throwing any exception or error of any kind.\n. Ah ok, great. Perhaps this should be stated on the blog posts relating to the TLS1.2 verification to help stripe developers know that it's only for the purpose of testing and not for API usage.\n. ",
    "nic-d": "If I understand correctly, money_format is a much more appropriate PHP function to use in this instance.\nhttp://php.net/manual/en/function.money-format.php\nUsage:\nphp\nsetlocale(LC_MONETARY, 'en_US');\nmoney_format('%i', 1000);\n. ",
    "wbronitsky": "@brandur updated per code review. Please take another look when you can\n. ",
    "kzap": "Can i test tls1.2 on the 1.x library the same way?\nOn Aug 31, 2016 9:18 AM, \"remistr\" notifications@github.com wrote:\n\n@kzap https://github.com/kzap The version 1.X should not need the\npatch. This patch was needed after some modifications we did when releasing\n3.X so if you're on 1.X this should not have any impact.\nSeparately upgrading from 2.X to 3.X should be fairly straightforward so\nif you are on 2.X you should move to 3.19.0 at least to avoid any issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/288#issuecomment-243630918,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADzBVZA3U15Nag-nzjfiao3DSU3Qvr4ks5qlNZlgaJpZM4JxIpV\n.\n. \n",
    "BrunoDeBarros": "I agree with you about updating, but unfortunately for me, whatever the clients have as their system settings is not something I can control (and due to shared hosting, quite often they can't either). Fortunately, this is one of those tiny issues that, if anyone ever comes across again, can be resolved by just tweaking this one file for them and leaving it be for the time being, so it doesn't matter too much. \nIf, however, we can pin it down as belonging to a specific combination of OpenSSL or PHP or cURL and make a proper fix for it, that'd be great. And even if not, maybe this issue'll be found on Google by someone facing the same issue and help them debug it.\nIf I get a bit of free time I'll spin up a VM with specific versions of each to see if I can reproduce whatever's going on on this server.\nOpenSSL version from within PHP (dechex(OPENSSL_VERSION_NUMBER)) is 0x1000105f. PHP is 5.6.18, and cURL claims to be 7.38.0. Worth noting is the fact that the cURL section in phpinfo says \"OpenSSL/1.0.0\", while PHP's OpenSSL section says \"OpenSSL 1.0.1e-fips\". Is it possible that they were built against different versions of OpenSSL, and that that's the cause for the problem?\n. I've just changed the CURL_SSLVERSION_TLSv1_2 to CURL_SSLVERSION_TLSv1. It'll remain that way until you change the files, at which point it'll be overwritten and then I can revisit the issue in the newer version (if it's still an issue). It's not a very good solution, but in this situation it was the easiest and fastest way to solve the issue for someone who -needed- Stripe to work ASAP.\nThe test script says \"TLS 1.2 supported, no action required\". When I changed the code, I ran that test to make sure it was working well with TLS 1.2 (otherwise it wouldn't have been much of a fix!).\nI... don't know. I'll have to get in touch with the customer about that, and I'll get back to you. I don't suspect so, though; whoishostingthis.com reports them as being with https://www.crocweb.com/, so I'd wager that it's shared hosting, and shared web hosts aren't the kind to update their servers all that quickly (or on demand).\n. Sadly, curl isn't the same version as the PHP curl anyway. I don't have SSH access to the server, but I do have shell_exec() access to it. I ran the command you gave me and got this:\n\ncurl 7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\nProtocols: tftp ftp telnet dict ldap ldaps http file https ftps scp sftp \nFeatures: GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz\n\nWhereas PHP claims to use curl 7.38.0. It definitely seems to be using TLS 1.2, as shown by the test script and by Stripe's own TLS 1.2-only endpoint; the problem seems to be with asking to use TLS 1.2 explicitly, rather than just letting it use whatever it wants (which ends up being TLS 1.2 anyway).\nI don't know the Stripe email; I've asked the customer to provide us with that information and as soon as I have it I'll email it to you. But, if the connection can't be started (which is what's happening when we're setting TLS 1.2 explicitly), how would Stripe know about it? This happens before there's an API key being sent, or any kind of information - the connection can't be established at all.\nEDIT: This problem is definitely not worth worrying too much about, and it's definitely a server configuration issue, something on their side that's messing with this. The best answer here is probably going to be \"switch web hosts\", but it's a pain for whoever's hit by this, and if there was any way to come up with a workaround that targets this particular configuration, that'd be dramatically better (it's not looking like it, though; there's nothing so far about this server config that stands out).\n. Here's a charge: ch_17rsXr4KH1KlpALjNSzZeChD.\nJust made a call to the TLS 1.2 endpoint now, just in case it'd help with looking at it.\n. I'm sorry, I just grabbed a random charge from the customer's reports. Here's a more recent one, done yesterday, after my change: ch_18oePg4KH1KlpALjLWKowhlx\n. The code around this integration been tested in the past and works well for most people, myself included. This is just one installation of our web app which had problems, and all I did was change the explicitly-set TLS version (and tested it with Stripe's TLS 1.2 endpoint testing code), so it didn't seem to warrant any further testing on this particular installation.\nIt's worth noting, though, that the code doesn't indicate that we're not using TLS 1.2, it's just that we're letting it decide for itself which TLS to use. I'm assuming that during negotiation, the server and the client both say they support TLS 1.2 and decide to use it, since the client has no preference, as long as it's TLS.\nBy the way: This code, is it that useful once Stripe goes TLS 1.2-only? Because, once you do, there's no way that it could ever connect using anything but TLS 1.2, so there'd be no need to set it explicitly.\n. Fair enough, that makes sense! At least we have this issue here for posterity, in case anyone ever has problems with this.\nFor our part, we have several thousand customers, a great chunk of which must be using Stripe for getting paid, so if we get any reports of the same error ever again I'll mention them here just to keep you aware - it might be that we'll spot a pattern or something.\nThank you for everything! You and Brandur have both been much more thorough and responsive than I could ever have hoped for.\n. I no longer have access to the server; I'll ask for it again!\n. I'm still waiting to hear back from our customer, so I don't have the data yet. As soon as I get it I'll post it.\n. Awesome, thank you so much for everything! It really is great seeing a project so well taken care of, and with such a responsive team, that even a small issue like this gets this much attention. I'll update our app to use this, run our tests, and let you know there are any issues or if any clients report anything.\n. ",
    "thewozjesse": "I had exactly the same issue as BruneDeBarros. Setting CURL_SSLVERSION_v1 manually in lib/HttpClient/CurlClient was the only way to remedy the situation. \nServer is CentOS 6.8 with all software patches applied. It seems that the problems arise because CentOS patches software without updating version numbers.\nHere's the output from that script:\nOS: Linux\nuname: Linux localhost 2.6.32-573.8.1.el6.x86_64 #1 SMP Tue Nov 10 18:01:38 UTC 2015 x86_64\nPHP version: 5.5.38\ncurl version: 7.38.0\nSSL version: OpenSSL/1.0.0\nSSL version number: 0\nOPENSSL_VERSION_NUMBER: 1000105f\nTLS test (default): TLS 1.2\nTLS test (TLS_v1): TLS 1.2\nTLS test (TLS_v1_2): \n. ",
    "3con": "@BrunoDeBarros ahh, thank you!\n\nI just wanted to make sure someone was aware of it, just in case.\n. \n",
    "robertkent87": "Thanks for the suggestions. Fortunately my hosting provider has made some updates and restarted apache and it all seems to be working fine so it's not an issue with the library.\nThanks for the quick response.\n. ",
    "snez": "Hey guys, could we please get a port of this for the older 1.x libraries? If a 1.19.0 is under consideration, could you please throw in 3D Secure as well based on https://github.com/snez/stripe-php/commit/15df5ebc06e5bf57e60d46b8ffc4e6f6d9552b36\nThanks!\n. ",
    "vijay-singh": "r? @brandur \n. ",
    "dextermb": "@elarion83 Check the README, it'll direct you to a link on the stripe website to run a test (Link for the lazy).\nWhat output do you get?\n. @brandur TLS 1.2 isn't forced anymore since v4.0.0, stripe should continue to work even if the user isn't running TLS 1.2?\n@elarion83 are you using the latest release? v4.0.0\n. ",
    "elarion83": "I've already test my TLS and the output is that tls 1.2 is not supported.\nSo I read the instructions below but my host is OVH (French) and upgraded my php version to php7 but there is no change.\n. Yeah I'm using the v4.0.0 \n. Yeah but right now I'm using your library and I have an issue. So that's why I'm posting right here.\nThe first link you sent is the same link Dextermb sent to me. And for the second I had already upgraded my development environment. \nI got no answer from Stripe. And that GitHub issue are for bugs with your PHP library, which is the point here.\n. Why do you close this issue ? It's not resolved and the issue is from your library, dafuq ?\n. ",
    "ashokdudhat": "Hi Olivier,\nThanks for quick ans.\nYes, we will contact them. \nin above request , you can see source and customer parameter.\n[customer] => cus_9GAinALxovViwe\n     [source] => card_190A7HDIQboj1KAfoR3qg3Cu\nthanks\n. ",
    "sanjaykumar2338": "@ob-stripe \nFacing a same issue:- No such token: tok_1DZuJQ4Ylaxqboil77drAIzj\nHere is my request \n$customer = \\Stripe\\Customer::create(array(\n                'email' => $this->input->post('stripeEmail', TRUE),\n                'source'  => $this->input->post('stripeToken', TRUE),\n                'plan' => 'yearly-unlimited'\n            ));\n. @remi-stripe thanks, resolved.. ",
    "will-stripe": "LGTM. LGTM. ",
    "dpetrovics-stripe": "Looks like the two failing tests are here: https://github.com/stripe/stripe-php/blob/master/tests/SubscriptionTest.php, but they don't seem to have been changed since September https://github.com/stripe/stripe-php/commits/master/tests/SubscriptionTest.php.\nBased on the error in the test, I think this may be due to a server side change to enforce plan uniqueness which occurred around the same time as the failures. (And the error codes match). cc @kjc-stripe . ",
    "brandur-stripe": "Thanks!. Nice! Thanks!. Thanks @ankurk91! Could you describe the problem that you're seeing right now? (Like a backtrace and anything else.) Thanks!. Ah, I see. Thanks! Crazy that this sort of problem could have lingered for so long.\nI'd have a slight preference for just putting the \\ in front of Exception to suggest the root namespace as you suggest above.\n@bkrausz-stripe Would you mind also giving this one a quick sanity check?. This looks great! Unfortunately the build is failing, but it looks unrelated ... I just started a rebuild on master to find out.. Nice. Master is broken unfortunately, so merging this as is :/. Released as 4.4.1.. @jlomas-stripe Nice work! Thanks a lot for tackling this one, and sorry about the really late reply.\nSo I see that you modeled this after what was already there in nestedUpdatableAttributes. It probably doesn't make a huge practical different, but the fragility of this implementation concerns me a bit in that we're just matching off field names and nothing else (not on you, the original implementation was a little misguided :/).\nIn stripe-ruby, what I did eventually is assume that additional_owners is going to be perpetually a one-off mistake and implemented a special serialization method on Account that handles it specifically so that we can maintain the integrity of our base class and shared modules.\nWhat do you think of trying an alternative like that instead?. That field list is so hacky :$\nLGTM. Thanks!. Released as 4.4.2.. Oh wow, thank you so much! It was on my TODO list to look into this but I hadn't quite gotten there :/\nAmazing work. Thanks again!. @gh-stripe Nice!! This seems like such an obviously good idea.\nJust with respect to an edge case: what happens for a StripeObject that's not a list. For example, a single instance of Charge. I think I know the answer, but I just wanted to double-check that it makes sense.\n. Cool, thanks!\n\n@brandur-stripe That's a good question. I actually completely forgot to check how it would behave on different objects and types of properties. Right now it gives the number of properties for the first level of the object you pass. For example a random Stripe\\Account returns 27.\n\nSo I'm not aware enough of idiomatic PHP to know what a perfect answer is here, but I could see it either returning the number of fields (as it does already) or potentially throwing an exception if it can determine that there's no good reason to ever call count on the object (i.e. a non-list).\n\nThe object where this is a bit confusing is for Stripe\\Collections, returned from ::all() methods, where this gives back 4 (it just counts the top object properties object, data, has_more and url) and not the number of Stripe\\Object in it. Although you can still get it if you do count($list->data); instead.\n\nWhat do you think about detecting a list object and returning the correct count of data in it, and to throw an error in other cases where it doesn't make sense?\nOne last thing: could we get some tests right on tests/StripeObjectTest.php (i.e. as opposed to in account) so that we can verify the expectations for the change directly?\nAlso cc @bkrausz-stripe in case he has opinions on how this should behave.. > I'm actually a bit disinclined to add more magic to our keys. If the only issue here is additional_owners updating, we should fix that in particular. There's been a lot of talk about making additional_owners a subresource to avoid the lurky array-update semantics.\n+1 to this being the right solution. There's been talk of retooling additional_owners for quite a while though, and so far it hasn't materialized, so we should probably patch this in some other way for today.\n@gh-stripe Would it be possible to modify this to just address the additional_owners edge case in particular?. Added one question above, but otherwise looks good to me. Thanks for all these patches @ob-stripe!. Released as 4.5.0.. LGTM.\n@ob-stripe Definitely agreed that it would be better if even custom clients could hook into this. Let me know if you can think of a reasonable way to allow that to happen.. Lets get this in. @ob-stripe's idea here sounds pretty plausible to me, but I think it could easily come in on a separate PR without trouble.\nLGTM.. Released as 4.5.1.. Wow, nice Remi! Thanks for tackling this one.\nSo as mentioned previously, I'm pretty on the fence about this: I definitely don't want to get into the habit of backporting features or maintaining ancient releases, but if this is going to be pretty much a one time thing, then I guess it would make sense to make the effort.\n\nAs a note: tests on 1.18.0 are failing locally on a lot of files even without my changes making it hard to make the merge safe but at least my test works and I've confirmed on a request that it does the right thing.\n\nYeah, given that the suite is dependent on live calls, I imagine there's probably quite a few things that would need to be updated to get that back to green. I'd suggest that we don't worry about it too much and just try to build some basic confidence that the patch works as expected through a couple manual tests.\nBTW, you're probably aware, but we won't be able to pull this back into master. I think what we'd want to do is branch off of the 1.18.0 tag, target that new branch from this PR, and then ship a new release off of it.. > Yes I did checkout away from v1.18.0 already. I wanted to PR to be available if needed.\nOh right! I just meant that I think we'd have to target a non-master branch with this PR. While you branched off the right release tag, you're still targeting the codebase of the latest version. (I think this is why you're seeing conflicting files above.)\n\nWe'll release it if we encounter plugin developers that refuse to move to 4.X. We'd simply close the PR but know the code is here if needed (and potentially shared as a reference if devs want to pull this in locally).\nWhat do you think?\n\nYep, that works for me.. As mentioned in chat, I'm mostly going to defer review on this one since there are more changes coming along.\n\nI'm not sure why the builds keep failing. On the earlier attempt there were failures about creating too many managed accounts so I updated the test to re-use the managed account across the Payout tests.\n\nYou may have gotten the hard stuff already ;) At least one of the builds is failing from a linting problem:\n```\nFILE: /home/travis/build/stripe/stripe-php/tests/PayoutTest.php\n\nFOUND 1 ERROR AFFECTING 1 LINE\n17 | ERROR | [x] Expected 1 space after IF keyword; 0 found\nPHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY\n```\nAnd here's another one that's probably just a require problem:\nPHP Fatal error:  Class 'Stripe\\Payout' not found in /home/travis/build/stripe/stripe-php/tests/PayoutTest.php on line 43\nPHP Stack trace:\nPHP   1. {main}() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/phpunit:0\nPHP   2. PHPUnit_TextUI_Command::main() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/phpunit:52\nPHP   3. PHPUnit_TextUI_Command->run() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/TextUI/Command.php:100\nPHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/TextUI/Command.php:149\nPHP   5. PHPUnit_Framework_TestSuite->run() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:440\nPHP   6. PHPUnit_Framework_TestSuite->run() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestSuite.php:722\nPHP   7. PHPUnit_Framework_TestCase->run() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestSuite.php:722\nPHP   8. PHPUnit_Framework_TestResult->run() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestCase.php:724\nPHP   9. PHPUnit_Framework_TestCase->runBare() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestResult.php:612\nPHP  10. PHPUnit_Framework_TestCase->runTest() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestCase.php:768\nPHP  11. ReflectionMethod->invokeArgs() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestCase.php:909\nPHP  12. Stripe\\PayoutTest->testCreate() /home/travis/build/stripe/stripe-php/vendor/phpunit/phpunit/src/Framework/TestCase.php:909\nPHP  13. Stripe\\PayoutTest->createPayoutFromManagedAccount() /home/travis/build/stripe/stripe-php/tests/PayoutTest.php:59. Thanks Remi. These changes look good to me.\n\nI also wrote unit tests for RecipientTransfer but those won't work on the official account used by the bindings until after the API version is released. If we feel strongly about tests on that resource we can push a separate PR on April 5th where we force the API version on retrieval.\n\nI'm not super concerned about it, but I guess it couldn't hurt to pull the tests next week.\nI think you still have the linting problem happening in Travis that I mentioned above.. Nice catch @ob-stripe! Pulling this in.. Released as 4.7.0.. I also noticed that stripe-node just sets latest. That might also be a plausible approach here. latest has the advantage of giving us automatic protection against bitrot, but it'll also be prone to break at random times on PRs issued by users or whomever.. That was surprisingly easy.\n@remi-stripe Thoughts on this approach?. > That sounds okay though I wonder if we need to also start adding custom tests for backwards compatibility that we want to keep supporting? Not fully sure how this would look like though. It's likely that our test suite is not exhaustive enough to catch most of those anyway\nYeah, I think that kind of thing might be a good idea. It should be relatively easy to override the API version on a per-test case basis.\nBringing this in for now to prepare for the payouts/transfers PR.. 5 failures here relating to use recipient in transfers:\nThere were 5 errors:\n1) Stripe\\TransferReversalTest::testList\nStripe\\Error\\InvalidRequest: Received unknown parameters: description, recipient\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:110\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:275\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:65\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:120\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:159\n/home/travis/build/stripe/stripe-php/lib/Transfer.php:69\n/home/travis/build/stripe/stripe-php/tests/TestCase.php:93\n/home/travis/build/stripe/stripe-php/tests/TransferReversalTest.php:10\n2) Stripe\\TransferTest::testCreate\nStripe\\Error\\InvalidRequest: Received unknown parameter: recipient\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:110\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:275\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:65\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:120\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:159\n/home/travis/build/stripe/stripe-php/lib/Transfer.php:69\n/home/travis/build/stripe/stripe-php/tests/TransferTest.php:16\n3) Stripe\\TransferTest::testRetrieve\nStripe\\Error\\InvalidRequest: Received unknown parameter: recipient\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:110\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:275\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:65\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:120\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:159\n/home/travis/build/stripe/stripe-php/lib/Transfer.php:69\n/home/travis/build/stripe/stripe-php/tests/TransferTest.php:29\n4) Stripe\\TransferTest::testTransferUpdateMetadata\nStripe\\Error\\InvalidRequest: Received unknown parameter: recipient\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:110\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:275\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:65\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:120\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:159\n/home/travis/build/stripe/stripe-php/lib/Transfer.php:69\n/home/travis/build/stripe/stripe-php/tests/TransferTest.php:62\n5) Stripe\\TransferTest::testTransferUpdateMetadataAll\nStripe\\Error\\InvalidRequest: Received unknown parameter: recipient\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:110\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:275\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:65\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:120\n/home/travis/build/stripe/stripe-php/lib/ApiResource.php:159\n/home/travis/build/stripe/stripe-php/lib/Transfer.php:69\n/home/travis/build/stripe/stripe-php/tests/TransferTest.php:80\nFAILURES!\nTests: 154, Assertions: 347, Errors: 5.. r? @remi-stripe Mind doing a quick review of this?. Released as 4.6.0.. I can't believe that out of six PRs, a full three of them failed tests due to some intermittent issues. This is really not good.. Yeah, definitely +1 that we don't want to pick up a new dependency.\nOverall, I wouldn't mind providing some kind of logging interface, although I'm not sure that it's something that I'd prioritized. A couple questions for you @kenske:\n\nCan you explain why it's so important that these particular log messages make it to some other place? As far as I can tell, these messages will get sent to the configured system log, which seems like something you'd want to aggregate into whichever logging system you're using anyway.\nIt seems like we're only calling error_log into two places, and for errors that aren't super critical. Do you find it useful to know about these (related to missing fields on objects usually) in particular?\n\nThanks!. Thanks for explaining.\nI add a small patch in #341. Can you check whether this would adequately handle what you're trying to do?. NP! Pushed in version 4.8.0. Let me know how it works out.. > Conceptually a big fan...why do we have context is nothing inside of our error logging uses it?\nBasically just to match up with the PSR-3 interface's signature. I figure it might also be useful someday if someone wants to write a quick implementation.. Sweet. Thanks Brian! Taking this in.. Thanks!. Released as 4.8.1.. LGTM.. Released as 4.9.0.. Yes, good point. Opened a patch in #347.. Released as 4.9.1.. @bkrausz Good point. I fixed the doc strings as well now too. Want to take one more look?. Thanks!. @remi-stripe Mind checking the test suite on this one?. The tests are looking good now. Thanks!. Released as 4.10.0.. @Collinslenjo Can you double-check this PR? I think something might have gone wrong with Git (the diff is empty).. Nice! Thanks for remembering that we should do this :)\nYeah, I like how this is much more narrowly scoped than #329. I'll wait on merge until we can get that build figured out, but LGTM.. Released as 4.11.0.. @ob-stripe Should we just bump to use Trusty everywhere? Kind of make sense to march forward here if possible.. Thanks for explaining @ob-stripe! That reasoning sounds sane to me.\nAs mentioned in the issue you linked, if 5.3's really been out of support for a few years, we should consider dropping it as well and just going to all Trusty. We can make that a separate project though.\nLGTM.. Nice clean up! LGTM.. Released as 4.12.0.. Left a comment above, but otherwise +1. Thanks!. Thanks!. Looks good to me. Thank you!. So it's a little hard to tell, but I think this did help.\nYou can see in the build matrix below that the first build had pretty standard timing, but the subsequent do seem to be faster, even when they were in the same version:\n\nCompare this to an older build where the timing was fairly uniform:\n\n. Anyway, I doubt it'll help much, but it's also unlikely to be detrimental. Going to bring this is in as a very minor improvement.. Yeah, the only other alternative I can think of is to add a pay_with_params or something like that, but it's pretty ugly. Given that many users will probably not be broken by this (only those providing custom $opts), I agree that this is the best way forward.\nLGTM.. Released as 5.0.0.. Incredible work OB!\nThis looks really solid to me. Do you think it's ready for release?. > Since the implementation is so close to the Ruby & Python ones, I don't expect any bad surprises. I also wrote a basic but complete example to test the entire OAuth flow (redirect to the OAuth form, use the authorization code to connect the account, then disconnect the account) and it worked fine.\nThanks for the diligence here :) Awesome, shipping this out then.. Released as 5.1.0.. Thanks @danasf!. Released as 5.1.1.. Oops, yep, that looks better. Thanks!. Released as 5.1.2.. Thanks for the report!\nFix released in 5.1.3.. Thanks!\nTest failure here is unrelated. Pulling this in.. LGTM.. Released as 5.2.0.. Hey Remi, I just looked into this a bit, and I don't think it works currently. It just looks like it does.\nCode:\n``` php\n<?php\nrequire_once('./init.php');\n\\Stripe\\Stripe::setApiKey(\"...\");\necho \"Running create\\n\";\n$cu = \\Stripe\\Customer::create(array(\n  \"shipping\" => array(\n    \"name\" => \"pre update name\",\n    \"address\" => array(\n        \"line1\" => \"An address\"\n    )\n  )\n));\necho \"Name post-create is: \" . $cu->shipping->name . \"\\n\\n\";\necho \"Running update\\n\";\n$cu->shipping->name = \"POST update name\";\n$cu= $cu->save();\necho \"Name post-update is: \" . $cu->shipping->name . \"\\n\\n\";\necho \"Running retrieve\\n\";\n$cu = \\Stripe\\Customer::retrieve($cu->id);\necho \"Name post-retrieve is: \" . $cu->shipping->name . \"\\n\\n\";\n```\nNo error is thrown, but here's the output:\n```\n$ php customer_update_test.php\nRunning create\narray(1) {\n  [\"shipping\"]=>\n  array(2) {\n    [\"name\"]=>\n    string(15) \"pre update name\"\n    [\"address\"]=>\n    array(1) {\n      [\"line1\"]=>\n      string(10) \"An address\"\n    }\n  }\n}\nName post-create is: pre update name\nRunning update\narray(0) {\n}\nName post-update is: POST update name\nRunning retrieve\nName post-retrieve is: pre update name\n```\nAs you can see, if we fetch the object back again, the name hasn't actually changed, meaning that the call to save did nothing.\nIt's not great, but I think what you did here adding shipping is probably the right thing to do, and it looks like the API will want an entire shipping hash to be sent up. Does that sound right to you?. Something weird is going on with this branch's build \u2014 PHP 5.3 cannot seem to unpack even after a few retries, but for some reason it seems to be working on master.\nI suspect that Travis is caching a bad result or something (it seems unlikely that this branch is causing the problem), so I'm bringing this in.. Released as 5.2.1.. Yes that looks right! Test failures are unrelated and fixed in #375, so I'm pulling this in as is.\nThanks! And slick job adding the extra test too!. Master's green. Fix released in 5.2.2.. Thanks Remi.. Looks good to me. Thanks!. Released a version as 5.2.3.. Released as 5.3.0.. Wow @ob-stripe, what are you doing to fit 36 hours into a day? Whatever it is, I want it ;)\nNice work! There were a couple build failures in the matrix, but I think they were intermittent problems. Going to go ahead and merge this.. Nice OB! Left a comment on here. Can you also take a look at the test suite?\n...............................................................  63 / 194 ( 32%)\n............................................................... 126 / 194 ( 64%)\n.......................F....................................... 189 / 194 ( 97%)\n.....\nTime: 3.18 minutes, Memory: 36.67MB\nThere was 1 failure:\n1) Stripe\\SourceTest::testVerify\nFailed asserting that two strings are identical.\n--- Expected\n+++ Actual\n@@ @@\n-pending\n+succeeded\n/home/travis/build/stripe/stripe-php/tests/SourceTest.php:210. Thanks for the quick fixes!. Released as 5.5.0.. I hate to ask, but mind bumping this one so ExchangeRates becomes singular?. Minor comment, but otherwise looks good. Thanks OB!\nptal @ob-stripe . Released as 5.6.0.. Thank you @kannokanno! LGTM.. Released as 5.5.1.. > We likely want to find a more reliable solution than this hardcoded list though in the near future since it has caused so many issues the past 12 months\nTotally agree.\nThanks!. Thanks guys. Had one intermittent failure in the test matrix, but I'm 99% sure this is fine. Merging.. Amazing OB! You're making a dent in the universe here.\nHow much further does this one have to go?. @ob-stripe @remi-stripe Incredible cleanup here guys! It's really nice to see that you fixed a few things during the port.\nSo I must admit that I didn't cover every single line in depth on this one, but I took a basic pass through the entire diff, and the general abstractions look good. I probably missed something somewhere, but IMO we should just go with the merge and put in any minor fixups as we find them.\nI left a couple minor comments above with regards to naming, but as soon as that's fixed, +1 for merge!. Oh and more more thing: I just checked the build times and this takes total build time (i.e. the entire version matrix) from ~85 minutes to ~25 minutes, which is good, but on the surface wouldn't seem like as much of a speedup as you might expect. However, if you dig a little deeper, the time to just run tests (minus setup overhead for each environment) went from ~3 minutes to ~10 seconds, which is awesome! (Also, this should fix build intermittency which is an even bigger deal.)\nAfter this is in, we should see if we can spend a little time making sure that we're following best practices around Composer caching in Travis \u2014 we might be able to make these numbers even smaller.. > And yeah, on my laptop the entire test suite now runs under 1 second! Huge improvement over the O(minutes) it took before :)\nWow, that's amazing!\n\nI pushed another commit to fix the typos you noticed. Let me know if you'd like me to squash the commits before merging.\n\nHm, I guess I have a slight preference for a squash here given that the current set of commits is a little unruly, but it doesn't make too much of a difference. Another possibility might be to try and rewrite the commit history into one that's still multiple commits, but shows a clean and clear progression (but it may not be worth the effort).. @ob-stripe Do it!. LGTM.. Thanks!. Good call!. Good call. LGTM.. Released as 5.8.0.. Sorry for the delay on this one OB. I've done a partial review, and will get to the rest of it today (I think).. LGTM.. > I've squashed the existing commits and added a new one. As part of the changes to the serialization logic, Collection no longer derives from ApiResource but rather from StripeObject. This is necessary so serializeParamsValue works as expected, and is similar to stripe-ruby (https://github.com/stripe/stripe-ruby/blob/master/lib/stripe/list_object.rb#L2).\n\nI initially duplicated the _request and _staticRequest methods, but now that we can use traits, this is no longer necessary.\n\nMakes sense. Thanks!\nAlright, I had one more look over, and I think it's pretty solid. LGTM.. LGTM.. Fine with me. Thanks!. LGTM.. +1 million. This is awesome!\nMaybe the one large-ish thing I noticed: when you pull in one of the new traits, it assumes the existence presence of a method on its new host like _retrieve_, meaning that the only class you could ever plausibly mix one of these into is ApiResource. Maybe this isn't that bad, but it seems a little unusual for these traits to have an undocumented, implicit dependency on ApiResource.\n(And to be fair, I think the same thing is happening in languages like Ruby already.)\nI don't think this will be that much of a problem in practice, and I'm having trouble coming up with specific recommendations. We could try moving _retrieve, _create, etc. to a more general utility class that each trait can just invoke statically, but even then, you'd still need to figure out what to do with classUrl, _staticRequest, etc., which would be hard.\nYou could check for the presence of methods you're about to use like _retrieve before you use them so that at least you could produce a nicer error message, but that may not be worth the runtime overhead (I tried to see if there's a \"included\" callback for traits like there is in Ruby, but I guess not).\nAnyway, probably not a big deal, but wanted to bring it up for a little discussion.\n  . > I will add some PHPDoc to each trait to explicitly flag that these traits can and should only be applied to classes that derive from ApiResource.\nCool. Sounds reasonable. Thanks for taking a look!. Woot! Really excellent coordination for getting this release out the door Olivier!\nI didn't do an in-depth review, but did take a quick scan of the entire diff \u2014 nothing jumped out. Go for it!. Soooooo much cleaner! LGTM. (Feel free to go for a merge when this is ready.)\nI restarted a couple of failed builds in the matrix. They look like intermittent problems talking to httpbin:\n\n(Network error [errno 7]: Failed to connect to httpbin.org port 443: Connection timed out). LGTM.. Great implementation (with nice test additions!).\n\nI think others would have a better idea as to whether this is a desirable change or not, but the reduction in special casing seems like a good idea to me in concept at least. +1.. Hard to argue with this PR!\nLGTM.. Doh!\n@ob-stripe I left some messages on Slack, but it does seem like unfortunately cross compatibility between PHP and HHVM is not long for this world, even if it's the libraries that are more intertwined with internals (i.e., like a mocking library) that need to drop compatibility first.\nLet me know what you think, but I have a slight preference for keeping HHVM support around until it starts to cause more acute pain (and hopefully until after most other projects have dropped it). This would unfortunately mean foregoing more advanced mocking libraries for the time being.\nThe other alternative is that instead of trying to improve our testing, we could start refactoring in the direction of non-static methods. This would be a little too much API churn probably, but if we were starting from zero, it'd probably be the superior design.. Nice!\nWhat do you think about adding a basic section to the README describing how to run the new script? For stripe-ruby, we have this:\n```\nUpdate bundled CA certificates from the [Mozilla cURL release][curl]:\nbundle exec rake update_certs\n\n```\n(Also, a couple of the builds in the matrix failed with what looks like a problem fetching dependencies. I restarted a bunch of them.). Released as 5.9.0.. @ob-stripe \nI think what you have here makes sense. There are some pretty complex tradeoffs that are a little bit hazy \u2014 for example, if a root CA were to be revoked, is it more likely that we'd get the update out to our libraries first or that a user's system bundle would get updated first? The answer is very unclear because we have so little control. Even if we automated system that would rebundle certificates periodically, people wouldn't necessarily upgrade.\nAll else being equal, I'd probably lean toward not bundling because at least some systems will have good package managers to help keep the certificate bundle more up-to-date than we likely would (e.g., Archlinux), and users with a bundle so outdated that they can't connect to Stripe could be instructed on how to download and set a fresh one. That said, given that we're already bundling in Ruby, I think it makes sense to try and built out a consistent approach, so I'd say go for it.\nI like that we give security-minded users who want to specify their own constrained bundle a way to do so through configuration.\n\nWhile this should not have any user impact, I'm tagging it as WIP because I'm slightly nervous about this change given the number of TLS issues we've observed in the past. Part of me is definitely like \"if it ain't broke don't fix it\" \ud83d\ude10\n\nI can't personally think of a way that this could break people, but yeah, it's something we should keep in mind.. Thanks OB.. Hi @angelods, good eye!\nWe're in the process of transitioning over to a new set of file APIs, and unfortunately there's going to be a few discrepancies in the interim. Hopefully we'll complete the migration soon, but in the meantime uploads.stripe.com isn't going away.. Thanks @nickdnk! This is definitely a lot of work to get right, and we appreciate it.. LGTM.\n\ud83d\udea2 . Nice fix, and great tests as usual!\nLGTM.. Nice one @ob-stripe, and thanks for taking! My bad for not going through and adding these in when the server changes appeared.. Great idea Olivier! Added a couple minor nits above, but otherwise LGTM.. LGTM. Thanks OB.. Good call!\nLGTM.. LGTM.. Released as 6.2.0.. Nice fix. Thank you.\nI left a minor comment. After that's fixed, would you mind rebasing just so we have a clean commit to bring in. Thanks!. > I don't know how to do that. I am not really great with git :(\nIt's fairly easy so want to give it a quick shot?\nRun this from your branch: git rebase -i master\nYour $EDITOR should open (like Vim, Nano, or whatever), and you'll be presented with a list of commits that you've made on top of master like:\npick 6d3f940ddb8 Commit1\npick 796ed2b3d68 Commit2\npick 4bbd65b63a8 Commit3\nAll you need to do is change all the commits except the first one from pick to f so that they get just get wrapped up with the first one like this (f is for fixup which just brings it into its parent):\npick 6d3f940ddb8 Commit1\nf 796ed2b3d68 Commit2\nf 4bbd65b63a8 Commit3\nIf you want, you can also change the first pick to edit and it'll give you a chance to change the commit message. After making those changes, save and exit your editor, and the rebase will happen.. > I'm gonna delete this and start over :D\nAh, k. Without being to prescriptive, I'd recommend try to develop at least a passing ability to do a basic rebase like this one. It's not as hard as it sounds, and I think you'll find that quite a few open source projects will request it.. Thanks!. Nice! Thanks for the big chunk of work here.\nI like the constants, but there is also a bit of a disadvantage in that it gets easier for this canonical list of events to become outdated more easily (we already have this probably elsewhere like in PHPDoc properties so maybe it's not the end of the world though).\n@ob-stripe Thoughts?. > Edit: When I run the rebase command it throws me into some vim-editor that I cannot figure out how to use :(\nhttps://i.imgur.com/VOe71EA.png\nTry setting EDITOR temporarily to something you know how to use. For example:\nsh\nexport EDITOR=nano\nThen try the rebase again.\n\nIt may become outdated as in \"missing some events\", but it can never become outdated as in \"has wrong values\" as this would effectively break everyone's current implementation of webhooks.\n\nYes, I meant that it might be missing newer events.. > I tried following your guide from the last PR, but I end up here: https://imgur.com/a/0zuML\nThis actually looks roughly like where you want to be ... as noted in that other PR, you want to change all but the top commit to f instead of pick, write out the file, then exit.\nIf you didn't change anything in there, you won't have seen the \"rebasing ...\" message afterwards and your branch should be safe. You can also just test with the standard git push origin master \u2014 Git won't let you push a rebased branch without specifying the --force flag.. > I got it. They're squashed into one commit now :) Great\nNice work! Now just follow that process every time you add a new commit :)\nI'll wait for a second opinion from OB, but otherwise this is looking good. Thanks!. @nickdnk Just for clarity: OBJECT_NAME isn't actually used anywhere I guess right? I guess my only concern here is that it'll be be pretty easy to omit it or get it wrong when a new model is added in the future.\n@ob-stripe I'll leave this one up to you for final approval, but it's looking pretty good to me. The one piece that scares me a little bit is that there's so many places where we explicitly list every possible exception as a @throws. The detail of that approach is nice, but it'll be a bit painful anytime we want to add a new exception type.. @ob-stripe Yeah, I think it's okay. It'd be a problem if there was no quiesce period because it'd just keep on hammering our stack, but I'm +1 given the backoff that's built in here.. > When using Idempotent Requests, we'd just retry the same request over and over and get the original rate limit error though. We likely need to special-case this.\nGood thinking, but it should be okay \u2014 rate limiting happens higher up in the middleware stack than idempotency persistence so for a 429 it's like the request didn't happen.. > I think the consensus is that this is safe because automatic retries use an exponential backoff (otherwise the retries would risk compounding the rate limiting issue). @brandur-stripe, do you confirm?\nYep, it's safe from the client-side in that we've got the exponential backoff and safe from the server side in that all rate limiting happens before an idempotency key is locked, so a 429ed or 503ed request will not have persisted an idempotency key at all.\nOne thing that I just thought of that I'd be a little concerned about \u2014 the trouble with automatically retrying rate limited requests is that it hides the obscures that you're at your rate limit. Ideally, a client should explicitly handle a rate limit error and use that as a signal to slow down their rate of requests. If we retried automatically that would all become opaque, so you could easily imagine the integration pouring in more requests on and having large numbers of them failed from a 429ed and sitting in retry queues, with the pressure continually building as more of them accumulate.\nAn alternative might be to suggest/implement an easy way to handle a rate limited error and retry the request.. > 429ed or 503ed\nSmall correction: Remi reminded me that although what I said about 429s is true, it's only true about certain types of 503s. A 503 from a load shedder or top-level lock timeouts is safe to retry, but there are other types of 503s caused by more explicit locks which are not.. LGTM.\nI think for the next breaking release we should possibly instead consider just changing the constructor to take one associative array parameter ... real arguments are usually better, but when you have this many and so little typing, I'm not sure if there's any real advantage over simulating named parameters with an array.\nIt's too bad \u2014 Googling around a bit it seems like there's a fair bit of demand for named parameters in the language, but the only format RFC for it seems to have stalled out: https://wiki.php.net/rfc/named_params. Looks good. Thank you!. Released as 6.3.2.. Released as 6.4.0.. @alexander-stripe I think at least one of the test failures is related to your changes:\nThere was 1 error:\n1) Stripe\\UsageRecordTest::testIsCreatable\nError: Class 'Stripe\\UsageRecord' not found\n/home/travis/build/stripe/stripe-php/tests/Stripe/UsageRecordTest.php:15\n--\nThere was 1 failure:\n1) Stripe\\AccountTest::testCanDeleteExternalAccount\nFailed asserting that Stripe\\StripeObject Object (...) is an instance of class \"Stripe\\BankAccount\".\n/home/travis/build/stripe/stripe-php/tests/Stripe/AccountTest.php:160\nFAILURES!\nTests: 331, Assertions: 709, Errors: 1, Failures: 1.\nWould you mind taking a quick peek at that failing account test while you're at it? You may just have to change Stripe\\BankAccount to Stripe\\Card or something.. Feedback addressed! Pulling this in.. Released as 6.6.0.. It makes me so happy that we're finally being a little proactive in getting these bugs fixed before they're reported :)\nLGTM.\nThanks for taking the initiative here @ob-stripe!. Nice! And yep, I had to change this exact line (or the equivalent one at any rate) when playing around with stripe-ruby's upgrade.\nLGTM.. Amazing! Thank you. Let's wait for that stripe-mock update, but otherwise this LGTM.. @matt-stripe Yep! Actually, I'll take care of it since we're usually the ones who will cut new releases. Thanks!. NP. Released as 6.7.0.. LGTM. Thanks!. Excellent work as usual @nickdnk! Thanks so much for the corrections.\nI left one minor comment above, but this looks good to me.. @nickdnk Excellent. Thank you!. Released as 6.7.1.. Hey @nickdnk, thanks the patch! This is quite similar to the setup that we already have in stripe-ruby, so I think this is a reasonable approach.\nWould you mind seeing if you could update the map in Util.php to take advance of these new constants? I believe that a few of our classes are missing them, so this might also help find the places where OBJECT_NAME is forgotten.\n\nI also added the InvoiceLineItem object, which according to the docs is almost the same as Invoice Item. I am not sure why they both exist, but their object property is different (\"invoiceitem\" vs \"line_item\") and one has a few properties the other does not, so there must be a case for both of them. If you don't like this let me know and I'll remove it from the PR.\n\nThanks! I think it's fine to include invoice line item in here.. Thanks for the quick fixes @nickdnk!\n\nI don't understand why the build is failing with autoload 0. It says it cannot find the InvoiceLineItem class, but I've used it the exact same way as all the other classes in the Util map.\n\nCheck out init.php. If autoload is disabled, there's a big list of files that get required; you'll want to put a reference to the new invoice line item file in there.. Left one more comment, but awesome work here. Thanks.. Thanks for circling back on this @rtm-ctrlz. I'd missed a couple other instances where HttpClient\\ClientInterface should be used and added comments on the lines above. Otherwise, LGTM.. > Also I had to fix phpdoc for ClientInterface interface since @throws and @return sections was broken\nOh nice.\nLGTM. Thanks!. Released as 6.8.1.. Makes sense. Thanks!. (This is quite minor so going to self-approve.). (Again, very minor so going to self-approve.). Nice work here as usual @nickdnk. Thanks for the continuing updates!. Released as 6.7.4.. Thanks for keeping this one alive and updated @nickdnk!\nIf you get a chance, could you squash your commits? Otherwise we'll do it for you when we bring it in (and the commit message might not be as good).\n\nOverall though, I have some concerns about adding those new classes purely for the sake of describing the attributes with phpdoc. @brandur-stripe wdyt?\n\nSorry @ob-stripe, I totally missed this @ to me last time. I guess I could see it either way, but IMO since these are considered first class API objects (i.e. they have their own sections in the API reference), it's okay to have them as separate classes, so I'd +1 this as currently implemented. I'll defer to you though.\nI did a quick pass on the changes otherwise too, and LGTM.\nptal @ob-stripe . Whoah, cool!\nLGTM, but it looks like a couple of the builds in the matrix failed with errors around connectivity problems \u2014 it may or may not be an indicator that cURL didn't fall back as suggested, and worth looking into.\nptal @ob-stripe . > I don't think this is related. We've been observing these issues sporadically for the past few days. One of the tests use httpbin.org, which seems to be having some trouble lately (it's returning a 503 for me right now).\nAh, I see! That would make more sense.\nWe might be able to get stripe-mock serving over HTTP2 too (probably as an option) as well since the Go support is pretty good. The only complicated part is that it mandates HTTPS/certificates which adds a little complication.\n. I just restarted the matrix entries that failed.\nLGTM.. LGTM. Very nice cleanup!. LGTM.. Released as 6.14.0.. LGTM!. @remi-stripe Thanks!\nIf you pull up one of the builds that looked like they succeeded (example), you can can see that they actually failed during the Coveralls step:\n\n(You need to expand the step to see it though.)\nTravis is hiding the failure because its running in the after_script command (see docs on that here).\nI think to get this working you'll need to tweak .coveralls.yml a bit:\npatch\ndiff --git a/.coveralls.yml b/.coveralls.yml\nindex a343c9a..4eecff5 100644\n--- a/.coveralls.yml\n+++ b/.coveralls.yml\n@@ -1,4 +1,3 @@\n service_name: travis-ci\n-src_dir: .\n coverage_clover: clover.xml\n json_path: coveralls-upload.json\nIt also seems a little unreasonably easy to accidentally break Coveralls due to the after_script thing \u2014 we should consider moving that into the script block instead.\nptal @remi-stripe . Nice! LGTM.. Amazing Remi! Thank you :)\nLGTM.. LGTM.. Released as 6.17.0.. LGTM!. Cool! Personally, I kind of like the explicitness of big lists of files, but I can see how this would help make things a little more obvious for new contributors at least, so @ob-stripe feel free to do what you think is best.. This is soooo much better than what we had before! Thanks for being the one to get their hands dirty.\nLGTM.. Nice bit of clean up!. Very fast work! :)\nLGTM.. LGTM.. ptal @daz-stripe . Thanks!. Released as 6.19.0.. Nice implementation!\n\nAlso, could you check if stripe-go is affected by this issue (since it's the only other library that uses HTTP/2)? (My guess is that it's not because the http package canonicalizes header names.)\n\nYeah, it looks like you found it already, but the Response struct's Headers struct canonicalizes naming:\ngo\n        // Header maps header keys to values. If the response had multiple\n        // headers with the same key, they may be concatenated, with comma\n        // delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers\n        // be semantically equivalent to a comma-delimited sequence.) When\n        // Header values are duplicated by other fields in this struct (e.g.,\n        // ContentLength, TransferEncoding, Trailer), the field values are\n        // authoritative.\n        //\n        // Keys in the map are canonicalized (see CanonicalHeaderKey).\n        Header Header\nAnd CanonicalHeaderKey:\ngo\nCanonicalHeaderKey returns the canonical format of the header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for \"accept-encoding\" is \"Accept-Encoding\". If s contains a space or invalid header field bytes, it is returned without modifications.\nSo we're okay there.  Definitely a good thing to keep an eye out for when we start getting to other implementations though.\nr? @ob-stripe . Thanks OB!\nLGTM.. Nice! I was following along on the thread, and it's great to have found a solution so quickly.\nLGTM.. @ankurk91 Thanks! Do you know if it'd be possible to make this a whitelist instead of a blacklist like you can do with .gitignore?\nI generally find this strategy to be more effective because you can just whitelist the most important stuff like lib/, and then don't have to remember to add new things to .gitattributes every time someone adds a new top level file.. @ankurk91 Ah, yes I understand the difference between .gitignore and .gitattributes. What I was asking is whether .gitattributes could support a whitelist like you can do with .gitignore. Check that link in my comment above for details, but the whitelist-style .gitignore looks a little like this (for example):\n```\nIgnore everything\n*\nBut descend into directories\n!*/\nRecursively allow files under subtree\n!/subtree/**\nYou can be specific with these rules\n!/some/other/deep/path/**\n!.gitignore\n```\nYou basically start with a coarse rule that says \"ignore all\", then you pull individual files or directories back in for consideration.. > I just tested the whitelisting pattern in .gitattributes file and it didn't worked.\nCool. Thanks for taking a look at that anyway!\nAdded a few asks above, but otherwise this looks fine. Thanks!. Looks good. Thanks!. LGTM as well!\n@ob-stripe I assume there's a reason you didn't go for the release, but if it's just that you're busy, let me know and I can take it.. Cool! I'm just going to release then to get it out of my inbox :). Released as 6.21.1.\nThanks for the contribution @ankurk91!. Thanks for the changes @akropp-stripe!\nAdded a few more comments on here, but looks very close.\nptal @akropp-stripe . @devshorts Thanks!\nOkay, speaking of hidden exceptions, it looks like removing that try block has revealed another problem (check the build):\n1) Stripe\\AccountTest::testIsDeauthorizable\nUndefined index: request-id\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:403\n/home/travis/build/stripe/stripe-php/lib/ApiRequestor.php:125\n/home/travis/build/stripe/stripe-php/lib/OAuth.php:70\n/home/travis/build/stripe/stripe-php/lib/Account.php:139\n/home/travis/build/stripe/stripe-php/tests/Stripe/AccountTest.php:117\nI'm not sure if this is because we need to use a different name for that header (case?), or if it's because we have synthetic requests that don't include a request ID, but either way, we should handle the case of a missing Request-Id header. Most requests back from the API will have one, but if a request fails early in the middleware stack, it might come back without.. LGTM!. Released as 6.22.0.. Addressed extra feedback in #561.. I don't 100% understand the static thread safety thing \u2014 it kind of sounds like we're sort of hoping that a cURL connection is correctly identified as stateful and therefore copied safely. That said, if testing yielded good results I guess it's fine.\nLGTM.. Yes, like @browner12 said, we're purposely overriding these methods to get certain behavior out of PHP. See the docs on magic methods for more information.. Released as 6.22.1.. It's definitely an oversight \u2014 those events are stilled fired. I added some new constants in #564.\n\nAlso, any idea what a \"Subscription Schedule\" object is? Clicking in the documentation it appears the link is broken or incorrect. https://stripe.com/docs/api/events/types see here under subscription_schedule.* family of events\n\nThanks for noticing that. I believe this feature is still under development and that the event types list is exposing it a bit early because it's generated automatically. I'm going to following up with our Billing team internally to see what the best course of action for this is.. Thanks @ob-stripe!. Released as 6.24.0.. Nice!\nLGTM.. LGTM.. LGTM as well!. LGTM.. LGTM!. LGTM.. Thanks @franmomu!. Released as 6.29.2.. No worries (and thanks)!\n\nSorry I forgot some fixes \ud83e\udd26\u200d\u2642\ufe0f, I also removed $request_history because it was duplicated. There is no need to make a release if you don't want to.\n\nOur releases our pretty easy to do, so it's no problem.. Released as 6.29.3.. Yeah, +1 on removing \u2014 they seem to be pretty bent on diverging from PHP, so even if you could have kept the build on life support a little longer, we'd have to remove it sooner or later anyway.. Thanks for tracking and following all these crazy localized naming conventions :). Just out of curiosity, what exactly is this block protecting against? Just an uninitialized source object?. Thanks!\n\nIf you want, I can refactor to avoid duplicating the code, or just get rid of the check entirely as it doesn't seem terriblye useful.\n\nI'd say that it's okay given that it was probably added at some point for some weird error condition. Let's just merge as is.. Nit, but I think most of the conditional curly braces (as opposed to the ones for function) are on the same line. Mind changing over to that here for consistency?. Should this also just be \"unknown\" like you have for $ssllib? Otherwise might look a little strange in our user agent header.. Hm, if curl_version doesn't exist we pretty much have no idea what they'll be using right? For that reason I was leaning toward just unknown.. Arbitrarily chose a length of 12 because it's a lot of entropy without being ridiculously lengthy (default is 24).. Sure! Done in 15e94c8.. Minor, but should we change this to something like tok_123 to help suggest that this isn't supposed to be a static string of some sort?. Sweet, thanks. LGTM pending backend fix!. This list isn't right is it?. I just noticed that in terms of using an underscore prefix for private methods, we're doing it about half and half throughout the rest of code right now. I'm not sure if PHP has a general convention, but I'd guess it shouldn't be as important given that it has real visibility modifiers (unlike Python et all). Either way, fine to leave as is.. Is this supposed to mutate the source object?. Oops. Absolutely right! Amended in bdbfe87.\nGood to go otherwise?. Maybe switch this over to exchange_rate (and there are three other instances below to replace in this file as well).. Ugh ...\nWell, it's worth noting that 5.4 has been EOLed for more than two years (since mid-2015) and hasn't even been receiving security fixes for more than a year, which means that it's not safe to use. This approach works fine for now, but it's totally plausible to drop support for it at this point. (If you're not updating off of PHP 5.4, you're also probably not bothering to update your version of stripe-php.). Actually, I misread that. It's 5.5 has been EOLed for two years and hasn't been receiving updates for a year.\n5.4 has been EOLed for three years (mid-2014) and hasn't been receiving updates for two years!. Oh man. I was going to say that it would be nice to just move this up to a statically initialized expression so we don't have to check the null everytime, but just reading through the manual it seems like this only became supported in 5.6 for any non-trivial (i.e. not an integer or string assignment) expression :/. I'd be bullish in moving these under something like Account now that class-specific rules are supported. It's always seemed pretty janky to me that things like 0, 1, 2, 3, 4 and additional_owners sit at the top level.. Could we add a comment somewhere in here that gives a breakdown similar to the one in this PR's description? I feel like this is a pretty difficult-to-understand complexity of the PHP library and I worry that the reasons we have card in here will be forgotten pretty quickly.. ItemItem should just be Item.. Transferreversal should be TransferReversal.. Thanks a lot for porting all this stripe-mock setup code :) I love how consistent it is across languages!. Minor typo: \"fore xample\".. Thanks for changing this whole thing back :). Couldn't hurt!. Minor, but maybbeeee consider alphabetizing this lists just so that we have stable sorting if new traits are added down the line.. +1.. Just OOC, is this mostly copied from the Ruby implementation? The test suite looks like it's pretty good in terms of vetting the new code, but just wondering how much we should expect to have to worry about it.. Somewhat too bad this is getting copied across \u2014 it felt a little janky as it was coming into Ruby and I was secretly hoping that there was a better way that I hadn't thought of :) It's okay though. At least similar implementations will make easier to reason about it if you're familiar with the other.. Thanks for filling in this documentation!. Nice fixes too .... Wow, you rebuilt for 5.3 already? Nice haha.. The # designation for instance variables is fairly Ruby specific. Is there a more conventional way for PHP? (Maybe just ..). save_with_parent -> saveWithParent. Thanks for adding all these tests. Account's serialization is problematic enough that you really can't have enough test coverage of it.. Maybe space out these function definitions a bit (should have a newline in there).\n  . Nit, but the whole section above is pretty dense. I like that we have good test coverage, but it could probably use some more whitespace for readability.. Oops. Totally missed that apparently, haha.. That's pretty cool. Thanks for the ntoe!. Maybe add a note in here that this exists for testability by using it with dependency injection.. IMO, it might be going a little too far by adding helpers to access private members for this. After these are available, the tendency will be to use them more often, and IMO it's not great practice to reach into the private parts of any implementation \u2014 even if it's your own.\nI don't have an amazing alternate suggestion, but I think it would be better even to just move the helpers back into this test suite so that they're not generalized in TestCase. Thoughts?. Just going to say that it's kind of weird to have a $randomGenerator injected via dependency, use it in one place, but then use a different method for generating randomness elsewhere in the same class :). Nice! Love the UUID generator.. Thanks!. Sorry about the usual pedantry, but it kind of looks like the other conditional ladders for error interpretation in this file are alphabetized, and it might be worth giving this the same treatment. (Also, might want to change this to a switch like the others? It doesn't matter that much though.). Oops, my mistake \u2014 I wasn't paying enough attention to notice the $code vs. $type distinction there. Feel free to leave it.\n\nI'm tempted to update the logic to something like stripe-python anyway, wdyt?\n\nIMO the logic ladders are at least pretty similar, and honestly PHP's is quite a bit more readable, so it might be okay to just leave as is. Up to you :). I might use \"used to be instances of \\Stripe\\AttachedObject\" instead of \"instanced\" \u2014 the latter is a little unusual and I found it a little hard to parse.. And I might do the same here. There's also a missing \"be\" in \"Attributes that used to be instanced\".. One more small one: \"that used to be instance if\" should be \"of\" instead of \"if\" :). Mind alphabetizing this list (although keep $id and $object on top) and confirming that you went over it and looks correct? It looks okay to me, but I happened to notice that $description is still marked as undocumented so maybe we don't intend to expose that right away? Thanks!. Mind correcting the tabs versus spaces problem here?. It's usually a tabwidth problem (i.e., how many spaces your tabs are set to display as like 4 versus 8). Your width is shorter in your IDE so it looks okay, but the difference is visible once you get to GitHub where tabs are rendered differently.. Maybe just keep this one alphabetized with the others.. Yeah, move it. We should probably change it in the API reference too.. Thanks!\nIf you check the API resource in the server-side implementation, it still seems that description is marked as undocumented:\nruby\nundocumented :description\nMaybe just an oversight?. Yeah. I just think that in this case it'd be better to keep alphabetical order because that sort of information isn't really present. It's generally expected that this sort of list of constants is arranged.. Just to close the loop here, it looks like description is now an officially documented property.. I think the indentation here was correct before. Can you dedent this block by one space?. I like that a lot of these symbols are now fully qualified! Much easier to follow now.. I'll defer to you @ob-stripe \u2014 it doesn't hurt I guess, but agreed that it's redundant.. I wonder if we should pull verified? I think it's technically supposed to be undocumented.. I think this is more like a ClientInterface rather than necessarily a CurlClient.. Should we specify a type for this parameter?. @nickdnk Pretty minor, but given the size of this list, what do you think about just using the fully qualified path directly on the lines in the map below so we can avoid two of these big lists?\ni.e., Something like this:\nphp\n\\Stripe\\Account::OBJECT_NAME => 'Stripe\\\\Account',. I missed this before, but could you also set this one as HttpClient\\ClientInterface?. And same here.. I'm not seeing result/status/succeeded_at in the implementation. Are you sure those are still relevant?. Sorry for the nit, but given that the separate test file breaks convention elsewhere, could we add a short comment here that just explains that these tests have been moved to a separate suite because the methods they invoke use a separate API hostname?. (And same on this one.). Minor, but can we change this to the new $secret property?. Do you think we could put a comment block in here that mentions that this exists to provide case insensitive access to response headers because their case may vary depending on whether the request came back over HTTP or HTTP/2 (which mandates lowercase)? I think it may be helpful in reasoning about why it's here in the future.. A couple minor asks:\n\nSince you're using the prefixing / for the first set of these, would you mind just using it for all of them?\nCan you alphabetize the list?\nCan you add a short comment to the top of the file indicating that the purpose of this list is to make sure that these files are excluded from the final Composer package.\nCan you squash down your commits?. Can we expand on this comment a bit to look like the other ones around it? e.g.:\n\n\nWhether client telemetry is enabled. Defaults to false.. This reads pretty awkward. I think we should either:\n\n\nStick to just a standard get pattern like getEnableClientTelemetry. This might be the better option just because there are no other is* style methods in here.\nInvert the name so that this makes more sense: name becomes clientTelemetryEnabled so that this could be isClientTelemetryEnabled.\n\nIt'd also be nice to keep this consistent across languages though, and I noticed that in Ruby we didn't have the word \"client\" and it's just enable_telemetry.\nAll in all, my preference would be to (1) copy Ruby, and (2) just continue to use only get*/set*, so:\n\n$enableTelemetry\ngetEnableTelemetry\nsetEnableTelemetry. Can we put in one of these comments a description of what this feature does? \"Client telemetry\" by itself doesn't say anything \u2014 let's explain that it's a low-overhead method of timing requests from the client side and transmitting them to Stripe so that we can build accurate API latency profiles (or something like that).. I think this would be the default anyway? I probably would have left it out, but it doesn't matter that much. Could be useful if we ever decide to flip the default in the future.. Can you move the @static keyword down to its own line. By my reading of the @static docs, I think it's supposed to look something like this:\n\nphp\n   /**\n    * a static function\n    * @static\n    */\n   function mystaticfunction()\n   {\n   ...\n   }. I don't think there's any sane circumstances where we'd expect json_encode to fail is there? I'd probably just return the result directly \u2014 in the unlikely event that there is a problem, it'd be nice to find out what it is.. Is there any circumstances that you can think of that constructing this basic class would fail? (Or the simple time calculation arithmetic?) I'd just leave out the catch. As with the above, if this ever was a problem, it'd be better to find out about it.. As with Ruby, I'd probably put these tests in the ApiRequestor suite because it's really that class that's doing all the heavy lifting.\nI don't feel super strongly about it though. (And thanks for writing tests in the first place!). Mind just stripping out this extra newline?. Okay fair enough. Could you add a logger line in the failure case like you did below then? IMO it's best to never paper over errors completely.. IMO we should still take this one out. Basically the list of things we're doing inside this try is: memory allocation, a call to round, a call to microtime, and subtraction. If any of those things happened to fail it seems like we'd have bigger problems than an uncaught exception.\nBeing conservative is generally good, but this sort of thing does bear some cost in that it can be somewhat mystifying to future maintainers who are trying to refactor things. Without the benefit of our current context, they'll tend to just cargo cult what's already in here, and every little thing adds a little bit to making changes more time consuming. So if we're ~certain that this is never going to be needed, I'd tend to leave it out.\nThoughts?. ",
    "salcode": "Awesome, thanks for the quick response.  Cheers.. ",
    "ankurk91": "Hi, @brandur-stripe \nI am talking about this function of this class -\n```php\n private function _interpretResponse($rbody, $rcode, $rheaders)\n    {\n        try {\n            $resp = json_decode($rbody, true);\n        } catch (Exception $e) {\n            $msg = \"Invalid response body from API: $rbody \"\n              . \"(HTTP response code was $rcode)\";\n            throw new Error\\Api($msg, $rcode, $rbody);\n        }\n        if ($rcode < 200 || $rcode >= 300) {\n            $this->handleApiError($rbody, $rcode, $rheaders, $resp);\n        }\n        return $resp;\n    }\nAs you can see, we are trying to accessExceptionclass which does not exist inStripenamespace. Thecatchwill never happen, another solutions is -\n } catch (\\Exception $e) {\nnotice the slash`` before accessing ```Exception``` class.\nA better way to detect malformed JSON is [json_last_error](http://php.net/manual/en/function.json-last-error.php). I won't mind if you guys close this pull request and implement best solution here...gitignore` file prevent files and folders from being published in git repository.\nWhile .gitattributes file tells git to ignore files and folders during export.\nSo .gitattribues will not prevent listed files from being pushed in git repo. It will only affect downloads by composer.\nhttps://git-scm.com/docs/git-archive#ATTRIBUTES\nMost of the packages already following same pattern see\nhttps://github.com/guzzle/guzzle/blob/master/.gitattributes\n. I got your point. Unfortunately I couldn't find option to whitelist files in .gitattributes.\nWe can test it locally by creating the .gitattributes files and running \ngit archive --format zip -o export.zip master command.\nNow check the contents of the zip file. @brandur-stripe \nI just tested the whitelisting pattern in .gitattributes file and it didn't worked.\ngit throws an error saying\nwarning: Negative patterns are ignored in git attributes\nUse '\\!' for literal leading exclamation.. Thanks, I can submit a PR for the same tomorrow.. @ob-stripe \nSent a PR, Please have a look. @brandur-stripe \nDone. ",
    "gh-stripe": "@brandur-stripe That's a good question. I actually completely forgot to check how it would behave on different objects and types of properties. Right now it gives the number of properties for the first level of the object you pass. For example a random Stripe\\Account returns 27.\nThe object where this is a bit confusing is for Stripe\\Collections, returned from ::all() methods, where this gives back 4 (it just counts the top object properties object, data, has_more and url) and not the number of Stripe\\Object in it. Although you can still get it if you do count($list->data); instead.\nI'm not sure if we want to adapt the implementation for those or if this is the expected behavior?. ",
    "its-tas": "I believe the intent is to keep the Stripe bindings dependency free - this can be seen in the use of Curl instead of Guzzle as well.. ",
    "kenske": "I agree, that's why I'm asking for a way to attach the logger, not for it to be included. The way it is setup right now makes it hard (impossible?) to intercept those errors and send them to an external error logger. Maybe the actual answer is to replace those error_log() calls with exceptions?. The application I'm currently working on, and most of the ones I've worked with recently, use the Monolog package to handle application logging. Using Monolog (or any other error handler) allows us to attach a stream that sends the errors to an aggregator (Rollbar, Bugsnag, etc) and also set a message priority (Warning, Error, Critical, etc). This also allows us to have a separate log file for each application. Using error_log directly makes it impossible for us to implement any of these features.\nWe're currently in the process of upgrading to the latest Stripe API version from a really old one. This means that a lot of the object's (Customers, Transfers, etc) properties have changed. Our code migration would be a lot easier if we were able to intercept the errors thrown by error_log and surface them in our aggregator. I realize that there are some ways to get around this, but I think the best approach would be to allow developers to deal with errors however needed.. @brandur-stripe yes! this looks awesome, thanks so much!. ",
    "tobsn": "@remi-stripe what if the customer already exists - would it create a new customer every time?\nI assumed the question fits here since I'm using the library... and I couldn't figure out if its possible to send the customer details with the charge method.. ",
    "rumatakira": "Tnx!. ",
    "deontologician-stripe": "Commenting to appease checker for now. I'm not familiar with this binding and my php is pretty rusty, is there someone better who could review this?. +1 to what @brandur-stripe said.  files.stripe.com and uploads.stripe.com are 100% aliases, we're just updating the naming in the docs. We have no plans to break https://uploads.stripe.com so you're fine to continue using it.. ",
    "Grafikart": "Feel free to ignore this comment if you don't agree (this is an opinion, i'm not trying to enforce my point of view :))\nYour answer does the job but it forces you to do 2 API calls to create a card. Moreover, I think the method \"create\" you are showing is not as obvious as others (I could guess the other methods reading from the Stripe API). . The problem could be also expanded to retrieve sources from a customer\nphp\n$customer = new Customer('cus_123abs');\n$customer->createSource(); // Create a new source \n$customer->getSources(); // Retrieve the sources for this customer\nOr to keep consistancy with the rest of the library, keeping everything static :\nphp\nSource::all(['customer' => 'cus_abc']);\nSource::create(['customer' => 'cus_abc']);. ",
    "evan-stripe": "Hmm. I think most of our other libraries have a constructor that lets you create an object from an ID without having to fetch it, e.g.\nruby\ncustomer = Stripe::Customer.new('cus_123abc')\ncustomer.sources.create(blah: blah). ",
    "MaxInMoon": "+1 for a \"built-in\" create card method. ",
    "asgrim": "Thanks for the quick response! :metal: . ",
    "jv2222": "Yup.\n```\ncomposer.json\n\"require-dev\": {\n        ... etc ..\n        \"stripe/stripe-php\": \"5.*\",\n        ... etc ..\n    },\n```\nAnd \ncomposer update\nFixed it.\nThanks!. ",
    "floriangaerber": "Thanks for the quick response! I just tried that locally and was about to report that as well.. That's what I just tried locally and it works just fine! Thanks for the quick fix!. ",
    "pabloleone": "Thank you very much, that was it!. ",
    "webprogrammierer": "Yes.\nBut you can help me to find out if stripe-php supports SOFORT payment method. Can you?\n. Support team?\nHow can I find some people who can help in this issue?. Stripe support can help to extend the Drupal 8 commerce_stripe module?\nhttps://www.drupal.org/project/commerce_stripe\n. The module maintainers are not interested in this at the moment.. Is it possible to use Stripe payment as an Onsite payment AND as an Offsite payment?. ",
    "pdoreau": "Thanks @ob-stripe \nI found out what was wrong : Event::constructFrom($request->request->all(), null)\nall() mtehod (from Symfony) returns an array with an empty string instead of null for \"id\".\nUsing json_decode($request->getContent(), true)); solved the problem. ",
    "JoshuaBedford": "@remi-stripe Thanks! Knew i was having a bad moment there. Seems pretty obvious doesn't it? Thanks for the prompt response. I'll try that out.. ",
    "icemanblas": "@ob-stripe \nYes, that was an honest mistake on my side. However, the issue is still there, so I will contact support. Thanks for the help.. ",
    "yabdab": "should be billing_cycle_anchor .... doh!. ",
    "grey-stripe": "LGTM. LGTM. LGTM. ",
    "philpoore": "This should ideally be mentioned in docs.. ",
    "thePanz": "@remi-stripe can you please be more specific?\nThe current API is returning such property, as an example:\ncurl https://api.stripe.com/v1/customers/cus_Xxxxxxxx -u sk_xxxxxxxxxxxxxxxxxxxxx:\nWhich is the correct property to use to fetch the total amount of items?. ",
    "goltra": "Exist a list to read allow and no allow modify paramters?\nThanks\n  . Ohh sorry, My mistake \nThanks for all.. ",
    "abhinavek": "@remi-stripe hi. i have run the script and this is what i got.\n```\nOS: Linux\nuname: Linux e2e-11-110.e2enetworks.net.in 3.10.0-229.7.2.el7.centos.onapp.x86_64 #1 SMP Thu Jul 2 12:23:16 EEST 2015 x86_64\nPHP version: 7.0.24\ncurl version: 7.57.0\nSSL version: NSS/3.28.4\nSSL version number: 0\nOPENSSL_VERSION_NUMBER: 100020bf\nTLS test (default): TLS 1.0\nTLS test (TLS_v1): TLS 1.0\nTLS test (TLS_v1_2): TLS 1.2\n. i have already done that .\nand still not working.\nand i have force tls version 1.2 and it is working. but is there any patch or version update to solve from your end?\n. This saying error.\nError:  Multilib version problems found. This often means that the root\n       cause is something else and multilib version checking is just\n       pointing out that there is a problem. Eg.:\n     1. You have an upgrade for libnghttp2 which is missing some\n        dependency that another package requires. Yum is trying to\n        solve this by installing an older version of libnghttp2 of the\n        different architecture. If you exclude the bad architecture\n        yum will tell you what the root cause is (which package\n        requires what). You can try redoing the upgrade with\n        --exclude libnghttp2.otherarch ... this should give you an error\n        message showing the root cause of the problem.\n\n     2. You have multiple architectures of libnghttp2 installed, but\n        yum can only see an upgrade for one of those architectures.\n        If you don't want/need both architectures anymore then you\n        can remove the one with the missing update and everything\n        will work.\n\n     3. You have duplicate versions of libnghttp2 installed already.\n        You can use \"yum check\" to get yum show these errors.\n\n   ...you can also use --setopt=protected_multilib=false to remove\n   this checking, however this is almost never the correct thing to\n   do as something else is very likely to go wrong (often causing\n   much more problems).\n\n   Protected multilib versions: libnghttp2-1.21.1-1.el7.x86_64 != libnghttp2-1.6.0-1.el6.1.i686\n\n```\n. ",
    "teamayu": "No problem, I understand about the 3D, but it was the fatal error I was concerned about. Shouldn`t the errors be handled a little more gracefully?. OK, fair enough, thanks. :). ",
    "EatonZ": "Out of curiosity, did you ever give any thought to checking if the user has specified a CA file via php.ini, and use that?\nRight now I'm using this code:\n\\Stripe\\Stripe::setCABundlePath(ini_get('openssl.cafile'));\nIt would be cool if you detected that ini setting in this library and use that by default instead.\nIf you decide to go for that, please note there's actually 2 ini settings you should check. The php source shows how this works.. What is a topup? Nothing in the API docs about it besides a few event types.. @remi-stripe Just a heads up the documentation is still missing.. @eclyptox I actually haven't gotten this error again since I posted this issue. I haven't updated the stripe-php copy on my server, but I do keep my PHP version up to date. Maybe that helped, since new PHP releases sometimes include updated curl versions.\nIt also could have just been issues with the host network that have been resolved. I don't think it's an issue with this library.. I think you meant \"PUT\" here and not \"DELETE\"?\nYour own documentation says it's not necessary for DELETE.. Don't forget to update the comment too.. ",
    "tobiastom": "@ob-stripe We encountered some problems because of the usage of realpath inside the default bundle file method getDefaultCABundlePath. We deploy our software as a phar archive, so the realpath call fails.\nAny chances this will be changed in a future version, or should we use the setCABundlePath function with our custom path? . @ob-stripe After writing it I realised myself that the path inside the phar would not work. \nWe now configure the global CA bundle before we use any of the Stripe functionality. This means it's not updated with the Stripe dependency, but with the one from the operating system. \nIt seems to work quite well for us and I don't think there is anything to improve this. Maybe this reference helps someone else in the future. :)\nThanks for your help @ob-stripe! . ",
    "LinuxUser3": "The worse thing about Stripe is that it lead developers to believe that it is easy to use. It's starting with a easy tutorial ( https://stripe.com/docs/checkout/tutorial ), but the next step is difficult times 100. For me, completely unusable. . I just found that there is a new file \"composer.lock\" in my folder. Maybe this will help you in solving the error. I've attached it here: \ncomposer.lock.txt\n. The composer.json is the original file I've downloaded yesterday: \n{\n  \"name\": \"stripe/stripe-php\",\n  \"description\": \"Stripe PHP Library\",\n  \"keywords\": [\n    \"stripe\",\n    \"payment processing\",\n    \"api\"\n  ],\n  \"homepage\": \"https://stripe.com/\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Stripe and contributors\",\n      \"homepage\": \"https://github.com/stripe/stripe-php/contributors\"\n    }\n  ],\n  \"require\": {\n    \"php\": \">=5.3.3\",\n    \"ext-curl\": \"*\",\n    \"ext-json\": \"*\",\n    \"ext-mbstring\": \"*\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"~4.0\",\n    \"satooshi/php-coveralls\": \"~0.6.1\",\n    \"squizlabs/php_codesniffer\": \"~2.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": { \"Stripe\\\\\" : \"lib/\" }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"2.0-dev\"\n    }\n  }\n}\n. @ob-stripe : I've followed the instructions at Composer. Hey, it took me more than three hours to install this ugly composer. I really don't see an advantage of using it. Why is it not possible to simply upload php files with FileZilla? - There are more disadvantages than advantages using composer. \n@ob-stripe : When you say that I have to use the init.php file, then can you also give me advice how? - The documentation advised to use \nrequire_once('vendor/autoload.php'); \nBut WHERE can I find this file? . ",
    "nickdnk": "You're welcome!\nWould you mind releasing a version 5.9.1 (for instance) to composer to get these into production?. Thanks :)\nFinally I can get rid of all the warnings in PHPStorm!\nOn 7 Feb 2018, at 04.01, Olivier Bellone notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk I just released v5.9.1https://github.com/stripe/stripe-php/releases/tag/v5.9.1 -- it should be available via Composer / Packagist soon.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/stripe/stripe-php/pull/427#issuecomment-363640946, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsrf9Nhzk6BwnJibiUlpZywV6u21Cks5tSRIQgaJpZM4RvHbB.\n. You're right, @Shadow2004. I'll add that to my new PR with updates for the just-released API version: https://github.com/stripe/stripe-php/pull/431. Oh I didn't know about this tab/space indent rule. I'll fix this.. I don't know how to do that. I am not really great with git :(. I'm gonna delete this and start over :D. Thanks for the guide. I'll keep this in mind for next time. I opened a new clean PR with 1 commit.. Now i'm gonna try the rebase we just talked about @brandur-stripe   :)\nHold on\nEdit: When I run the rebase command it throws me into some vim-editor that I cannot figure out how to use :(. It may become outdated as in \"missing some events\", but it can never become outdated as in \"has wrong values\" as this would effectively break everyone's current implementation of webhooks.. @brandur-stripe \nI tried following your guide from the last PR, but I end up here: https://imgur.com/a/0zuML\nNot sure what to do and I'm afraid to push now which may make it worse :(\n. I got it. They're squashed into one commit now :) Great. I figured that most devs will likely be creating these constants on their own (at least I was), and those are just as likely (if not more) to become outdated as this list is. I was debating with myself where to add my constants but then figured I might as well complete the list and attach them to the Event class for everyone to use.\nAnd you're welcome :) Stripe <3. I think it\u2019s logical to have them in this class, since the Event object (as JSON) has the property \u201ctype\u201d which is one of these constants.\nOn 17 Feb 2018, at 00.23, Olivier Bellone notifications@github.com<mailto:notifications@github.com> wrote:\nI like the idea of having constants defined in the library! Just a suggestion: do you think it would make sense to wrap all the constants in their own class/namespace, to clarify that all those constants represent event types?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/stripe/stripe-php/pull/443#issuecomment-366387454, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsom-0XqC1p2P4Y6fZ3bNyKR7o30qks5tVg31gaJpZM4SI_y5.\n. Ill fix it tomorrow. I\u2019m at the club in the middle of a karaoke session.\nSent from my iPhone\nOn 17 Feb 2018, at 01.17, Brandur notifications@github.com<mailto:notifications@github.com> wrote:\n@brandur-stripe commented on this pull request.\n\nIn lib/Event.phphttps://github.com/stripe/stripe-php/pull/443#discussion_r168901007:\n\n\nconst SIGMA_SCHEDULED_QUERY_RUN_CREATED    = 'sigma.scheduled_query_run.created';\nconst SKU_CREATED                          = 'sku.created';\nconst SKU_DELETED                          = 'sku.deleted';\nconst SKU_UPDATED                          = 'sku.updated';\nconst SOURCE_CANCELED                      = 'source.canceled';\nconst SOURCE_CHARGEABLE                    = 'source.chargeable';\nconst SOURCE_FAILED                        = 'source.failed';\nconst SOURCE_MANDATE_NOTIFICATION          = 'source.mandate_notification';\nconst SOURCE_TRANSACTION_CREATED           = 'source.transaction.created';\nconst TOPUP_CREATED                        = 'topup.created';\nconst TOPUP_FAILED                         = 'topup.failed';\nconst TOPUP_SUCCEEDED                      = 'topup.succeeded';\nconst TRANSFER_CREATED                     = 'transfer.created';\nconst TRANSFER_REVERSED                    = 'transfer.reversed';\nconst TRANSFER_UPDATED                     = 'transfer.updated';\nconst PING                                 = 'ping';\n\n\nYeah. I just think that in this case it'd be better to keep alphabetical order because that sort of information isn't really present. It's generally expected that this sort of list of constants is arranged.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/stripe/stripe-php/pull/443#discussion_r168901007, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsufaUqtwPAQPQogroV7PWXlTKQx_ks5tVhp8gaJpZM4SI_y5.\n. @ob-stripe I would very much like to, but how do I do that when I already have a fork on my page with the previous PR? I am not sure how to split it into two.. @ob-stripe I think I managed to do it correctly. Thanks for the assistance :). @ob-stripe  Done :). Hey @ob-stripe - would you mind merging this one in? Or do I need to change something? :). Not a problem. I'm happy to help :). Hello @ob-stripe \nI changed it to not using use for errors and added all @throws tags. I started from the superclasses and inherited these throws down to all objects. I reviewed every object as thoroughly I could to make sure I didn't modify return types to something incorrect (phpstorm wants to do this some places because of traits or interfaces).\nAnd then I renamed to OBJECT_NAME as requested.. Hello again\nDo I need to change something to get this accepted? I have many places where I suppress \"exception not thrown\" warnings in PHPStorm because these docs are missing :(. @ob-stripe I see your point. But adding Base defeats the purpose a little, as what I'm trying to avoid is this all over PHPStorm:\nhttps://i.imgur.com/FxatxwN.png\nBut I suppose that adding @throws Base will at least let you know where you didn't handle all Stripe error cases, and will of course rid you of that warning when you do catch Base, which I assume is what most people do. I only rarely catch InvalidRequest or Card in addition to Base.\n@brandur-stripe \nI'm not sure what you mean with \"not used anywhere\"? It's used when comparing $object->type to a string to determine what kind of object it is. no? This leaves room for typos such as invoice_item instead of invoiceitem. I do believe keeping OBJECT_NAME updated on all models is a task that comes with the library, just as we did with event types on Event and as we did with @property tags. Looking at each API release note and checking if something has changed or been added should be all it takes - and again, if these do become outdated it won't break anything, but may just confuse people a bit (which may trigger a PR just as it did for me).. I'm gonna close this and create a new one only for OBJECT_NAME changes.. Cool\nHowever, it seems these properties don't exist on all invoices, which I don't really understand. I emailed support about it. I'll update this thread when they reply.. I received this answer from support:\n\nThanks for writing in, and for contributing to our libraries! You're totally right: amount_paid and amount_remaining were added last week and haven't yet been documented.  \nThere is a bug with these fields that our Subscriptions team is actively working on fixing -- I'll let you know when a fix is out.\n\nSo I suppose the properties are valid for all invoices but just bug out a little bit currently.. Done.. @brandur-stripe I've removed the verified property as requested and also added $support_address to Account and changed $external_accounts to Collection instead of mixed.. I don't understand why the build is failing with autoload 0. It says it cannot find the InvoiceLineItem class, but I've used it the exact same way as all the other classes in the Util map.. @brandur-stripe That did the trick.. Hey guys\nIt seems we stalled here. Want me to change anything, @brandur-stripe?. @ob-stripe Done :) Edit: See my comment in InvoiceLineItem.. @ob-stripe Cool. Did you remember to check the use traits on InvoiceLineItem? I was not sure which were applicable to that object.. Okay cool. Just wanted to make sure you were on top of it. I don't want to introduce issues :). @ob-stripe \nHey\nI removed the DisputeEvidence class and made the other changes you mentioned. I'll leave it up to you guys to decide if you want OrderItem and Discount as classes in the library, since they don't \"do\" anything. I think it's fair to have them because of the OBJECT_NAME constant - for consistency and to support phpdocs. They now extend StripeObject.\nI added those classes to Util and init.php.\nI'll rebase to one commit once we've agreed on everything.. Does this mean that all variables currently defined as mixed could/should be StripeObject ?. I've just added the invoice_pdf and hosted_invoice_url properties to Invoice - these are new :). Added the active property to Plan. @brandur-stripe Squashed as requested :)\nEdit: I just noticed I forgot to change the discount property of Subscription from mixed to Discount. I just did that and rebased again.. Removed the default for currency change. Thanks for the creds, @remi-stripe.\nI think this is a bad idea for a few reasons: One is that we have to do it everywhere to be consistent, as remi says, another is that this indicates to people who use the SDK that they can read source or coupon from these objects when returned from the API. Also nowhere else do we have comments on the phpdoc blocks, so that's also a thing to consider.\nAll the current phpdocs match 1:1 to \"The {object} object\"-sections in the API. In this case the The customer object or The subscription object sections.\nEdit: @spaze Maybe you can silence the errors if you use $object['coupon'] notation instead of $object->coupon? I don't know if that works though, but it should.\n. @remi-stripe I think I got all of them. I just noticed the problem with removing event constants as I received your reply. I forgot I was not in phpdoc-land for a second :). Perhaps we could do something like this:\n* existing properties...\n * @property string $usage\n *\n * As the `type` property determines which object is associated with a source, one of the following\n * properties exist on the object if (and only if) the `type` is equal to any of these property names.\n * For example; if $source->type === 'card', then $source->card will be available as a \\Stripe\\Card.\n *\n * @property mixed $ach_credit_transfer\n * @property mixed $ach_debit\n * @property mixed $alipay\n * @property mixed $bancontact\n * @property Card $card\n * @property mixed $card_present\n * @property mixed $card_present_single_message\n * @property mixed $eps\n * @property mixed $giropay\n * @property mixed $ideal\n * @property mixed $multibanco\n * @property mixed $p24\n * @property mixed $paper_check\n * @property mixed $sepa_credit_transfer\n * @property mixed $sepa_debit\n * @property mixed $sofort\n * @property ThreeDSecure $three_d_secure\n * @property mixed $wechat\n *\n * @package Stripe\n@remi-stripe  ? :)\nI've seen a bit of confusion in the IRC channel regarding this particular object structure, so perhaps PHPDocs could help make this clearer.. I only added the explanation for clarity, since it's atypical for your objects to have a property that defines another existing property directly.\nHow is a card hash not an instance of Card? Can you explain? I was under the impression that the SDK always constructs the actual objects based on their object property (if it knows it and has a matching entity) exactly for this reason.\nI'm well aware that the auto-complete in IDEs will always show all properties, but I think that's better than them saying \"this property does not exist\" because all of them are missing by design as of now.\nEdit: To clarify, we already do this with the discount property on the Invoice class, for instance.. > > I only added the explanation for clarity, since it's atypical for your objets to have a property that defines another existing property directly.\n\nSure but that would not be visible to any dev that doesn't go and read the header of the class right?\n\nOf course, but I think it makes sense to make this slightly odd logic available in as many places as possible to make it easier on devs.\n\n\nHow is a card hash not an instance of Card? Can you explain? I was under the impression that the SDK always constructs the actual objects based on their object property (if it knows it and has a matching entity) property exactly for this reason.\n\nIt does, but you're misunderstanding how this resource works. Cards are the historical object and look like this:\n{\n  id: \"card_123\",\n  object: \"card\",\n  last4: \"4242\",\n  brand: \"Visa\",\n  fingerprint: \"RanDoM\"\n}\nThe Source object is an abstraction other multiple payment types. And for a Card Source it looks like this:\n{\n  id: \"src_123\",\n  object: \"source\",\n  type: \"card\",\n  card: {\n    last4: \"4242\",\n    brand: \"Visa\",\n    fingerprint: \"RanDoM\"\n  }\n}\nThe nested card hash is not an API resource. It's just a raw hash, nothing else. It doesn't have the object field. The resource is the Source.\nCool. mixed it is then :)\n\nI'm well aware that the auto-complete in IDEs will always show all properties, but I think that's better than them saying \"this property does not exist\" because all of them are missing by design as of now.\n\nYou were worried that adding ach_credit_transfer was incorrect because it was sometimes null and would be confusing. That's all I was addressing. I'm fine adding all of them!\n\nI was only worried about adding ach_credit_transfer if that's the only one of the varying properties we add, since that's just inconsistent.\nI'll add all of them as mixed and update my PR:\nShall I include them at the bottom after the proposed explanation, or do you want them alphabetically mixed with all the others?\n. > I would recommend keeping it alphabetized for now, I think it's cleaner and we can just update this if we hear feedback from devs that it's confusing.\nOk!\n\nThere's a world in the future where stripe-php will be auto-generated and we can easily add comments for all the properties!\n\nAnd here I was hoping for a job as the official phpdoc maintainer \ud83d\ude04 . That should do it.. You're welcome.\nI struggled a bit with trying to get the proper exceptions included in phpdocs for all objects, but it seems to be an impossible feat because of the way the library is built with traits. I have a lot of silenced Exception warnings because of this, unfortunately. As you can imagine I use phpdocs extensively in my project.. I'm thinking that you could do something like this, which would also fix return types:\nuse ApiOperations\\Retrieve {\n    retrieve as protected static __retrieve;\n}\nAnd then for \\Stripe\\Customer as an example:\n```\n/\n * @param string     $id\n * @param null|array $opts\n \n * @throws Error\\InvalidRequest\n * @throws Error\\Permission\n * @throws Error\\RateLimit\n * @throws Error\\Base\n *  and so on for the object/endpoint in question...\n \n * @return Customer <- Also missing currently.\n */\npublic static function retrieve($id, $opts = null) {\nreturn self::__retrieve($id, $opts);\n}\n```\nThis is a lot of work and maintenance, but would work without actually changing or breaking anything. I am willing to make this change on all resources if you think this could be a solution.\nWith regards to return types, we could avoid a lot of this:\n/** @var Customer $customer */\n$customer = Customer::retrieve($customerId);. @remi-stripe\nIt would be great if we could solve this. It's been bothering me for a while.\nWith regards to your concern: Since this is annotation only, it can't ever actually break anything? It is going to give off a lot of new warnings for people that don't catch their exceptions, sure, but everything should continue to work in the exact same fashion as before. I don't know if you consider warnings a breaking change, but then of course this could be included in the next major version.\nI understand that this is an issue in Java, but those are checked exceptions, not annotations.\nAnd if you upgrade your API version, any exception/error changes are going to be introduced into your code regardless of your library or phpdocs. Similarly: If you then choose not to update your API version, but to update the library to include a new/changed exception, you could forcefully silence the new warning(s), which is not different from what you currently have to do if you use phpdocs.. I just tried. I don't know why that happened. it looked right in my IDE.. It follows the exact order of the events on https://stripe.com/docs/api#event_types\nBut I can move it up if you still want?. I think the reason it's at the bottom is because it's the only one that has no object attached (all others \"describe\" something).  In other words; it's not really an event you can process in any way.. I thought this object was this: https://stripe.com/docs/api#customer_bank_account_object\nWhat's the difference between these two? I find it odd that they have the same OBJECT_NAME. Roger.. Hey. I only added it because all the other classes have it. Should we remove it from all classes to be consistent? I know it's really nitpicking, but still.. Done. ",
    "Shadow2004": "Found one that you might of missed, the country spec class.. ",
    "bigzoo": "I ended up replacing detach with delete. The retrieve method was returning an instance of a Card and not a Source.. Well I guess I was getting cards. I do have a question though. Why is it that when creating a Customer  over the api with a given 'tok_visa' token, the sources array within the response contains a card object and not a source? Currently I'm creating a Charge using the customer id and the card id as the source. What's really the difference between using cards as sources and creating Source object over the api?. @remi-stripe I understand though it was a little confusing at first. So I guess that the source parameter required when creating a Charge really doesn't explicitly mean a source object id but can be either that or a card id or just the token itself?. ",
    "dylantrooien": "php\n/** @var \\Stripe\\Source $Source */\n$Source = $Customer->sources->retrieve($card);\n$Source->detach();\nGives error : Attempted to call an undefined method named \"detach\" of class \"Stripe\\Card\".\nphp\n/** @var \\Stripe\\Source $Source */\n $Source = $Customer->sources->retrieve($card);\n $Source->delete();\nWorks but delete() is depreciated \nusing \"stripe/stripe-php\": \"^6.23\",. ",
    "rs-sliske": "thanks. ",
    "pascaldevink": "If memory serves me correct, these were the 2 things that tripped us up:\n- the Stripe\\AttachedObject was replaced with Stripe\\StripeObject (we faced this with type hinting)\n- Replacing array return values with Stripe\\StripeObject (I believe it was this commit that introduced this, but I can be wrong: https://github.com/stripe/stripe-php/commit/d32ea51331e41341bde44c6a6ca7c8f5f4368b2a). ",
    "apakulov-stripe": "r? @stripe/api-libraries. ",
    "johnnydee8": "@remi-stripe check statement is incorrect - can you please fix and check again? \nlast if statement should use $sourceRetrieved not $source - for me it does not update the source. . ",
    "lushc": "I'd like to revisit this if possible. Looking at the progress made in https://github.com/stripe/stripe-node/pull/559 it seems there are two other useful conditions for retrying the request:\n\n503 status code\n5xx status code for non-POST requests\n\nI'll try to keep my eye on that PR and once it's approved/merged I'll align this one when I can (unless someone beats me to it!) Also, was there consensus on whether it was safe to retry rate-limited requests using idempotency keys?. No worries about forgetting the PR, these things happen \ud83d\ude04 Reading @brandur-stripe's reasoning both here and in https://github.com/stripe/stripe-node/pull/559#issuecomment-463374335 I agree that this isn't the correct way to go about retrying rate-limited requests. I thought it would be nice to hook into the existing exponential backoff logic, but didn't consider the side-effect that it'd mask an error you'd want clients to be aware of. I think aligning with the work done in stripe-node should be in a separate PR, so I'll leave it up to you whether to keep this one open or closed for the time being (since a few server-side improvements to make this possible may be pending) \ud83d\udc4d . ",
    "idealogica": "Thank you so much for the solution! Now it works very well.. ",
    "v0ctor": "Thanks! \ud83d\ude42. ",
    "acinader": "the code in @ob-stripe's response should be added to the sample code section of the expand section of the docs.. ",
    "alexweissman": "Ah, interesting, thanks for pointing that out! So is there an \"is-a\" relationship between Card and Source? I.e., is a Card a subtype of Source now? Or would I need to start explicitly creating src_ objects?\nBy the way, is there a better place to open up issues concerning the documentation?. ",
    "alexander-stripe": "The failing tests also seems unrelated to the changes. Might this be a similar problem as in https://github.com/stripe/stripe-ruby/pull/634 and https://github.com/stripe/stripe-mock/issues/56 ?\ncc @brandur-stripe . ",
    "colinbarstow": "Thank you very much for that information, I was just coming to that conclusion. I've never used orders before and I really appreciate that information.. ",
    "Jossnaz": "I understand that a lot of devs use their own libs, but a lot don't use a\n3rd party lib in case this example is actually good and there is no\nspecific reason to not use it, I see no reason why make a secret out of it.\nOn 28 April 2018 at 03:38, remi-stripe notifications@github.com wrote:\n\n@Jossnaz https://github.com/Jossnaz We have not documented those for\nnow. Those are simple helpers to make it easier to integrate OAuth but a\nlot of developers end up having their own third-party OAuth library for\nthis.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/465#issuecomment-385153379,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB-d-lUIr116cf6PujBkIDQFMFKuSEEPks5ttCqCgaJpZM4TrKnA\n.\n. \n",
    "Sofianio": "Thanks @Jossnaz  for the linking the example (didn't know it existed)\nWhy make it, and not tell developers about it?\nI knew it had to be there, so i looked for it in the code because i didn't find it in the docs!\nIt'd be a lot easier for devs to just do\n$resp = \\Stripe\\OAuth::token([\n            'grant_type' => 'authorization_code',\n            'code' => $code,\n]);\nAt least put it in the Readme.md. ",
    "matt-stripe": "@brandur ok to merge in post-mock update?. Awesome, thanks @brandur-stripe!. ",
    "rtm-ctrlz": "ptal @brandur-stripe . Fixed CurlClient -> ClientInterface\nAlso I had to fix phpdoc for ClientInterface interface since @throws and @return sections was broken\nptal @brandur-stripe. ",
    "yt94dev": "I want to request a feature of integration to Shopify platform. ",
    "zachwick": "Reordered the positional arguments.\nptal @ob-stripe . ",
    "TomKriek": "Maybe it's better to have a general exception handler for the Stripe exceptions. Since each function/api call could potentially throw the exceptions.. ",
    "franzliedke": "Interestingly, I am encountering similar problems in my tests as well - starting with the upgrade to v6.10.2. The error message I see is (Network error [errno 52]: Empty reply from server).\nI am using this library to mock my HTTP interaction with Stripe.. If I understand this page correctly, using CURL_HTTP_VERSION_2_0 with HTTP (i.e. not HTTPS) connections can cause problems (which might be what I am experiencing here). And indeed, using CURL_HTTP_VERSION_2TLS works for me. Probably because it will not try to use HTTP/2 with my HTTP connection to the mock server. It will still use it with Stripe's official API endpoint, which is served via HTTPS.. @GrahamCampbell I see no reference to constants in either PSR-0 or PSR-4. Can you clarify what you mean?\nThat said, not sure porting the constant back for releases of ext-curl that don't have it... doesn't that mean that the underlying Curl library won't have it, either? Maybe something like this would be less \"dangerous\":\n~~~php\nif (defined(CURL_HTTP_VERSION_2_0)) {\n    $opts[CURLOPT_HTTP_VERSION] = CURL_HTTP_VERSION_2_0;\n}\n~~~. Obligatory XKCD reference:\n\n(from https://xkcd.com/1172/). Thanks for the swift response. Works like a charm. :+1:. Another option, by the way, would be to make the Curl flag overridable. Right now, any of the user-providable default options will just be ignored - at least for this flag.. ",
    "iankrigsman": "Argh. My bad. Yes, that's the one - I installed them together. Sorry for the noise. . ",
    "imliam": "Sorry about that, maybe I rushed this PR without too much attention to it on the spot, hopefully, these changes should sort it.\n\n\nI think Util is a fine place for it since it can be used in multiple places, there's not really any other place currently that's better suited for it.\n\n\nI've removed the $prefix parameter\n\n\nI've re-ordered the sanitization rules so that the special characters are removed and the string is truncated first, so now the exceptions are thrown based on the already sanitized string.\n\n\nPerhaps there is room for a similar method isValidStatementDescriptor that simply returns a boolean without sanitizing it?. \n\n",
    "lesterjanpearson": "Thats not always true, customer is gets created if card declines on live keys.. whats the best to this that, only when card/charge succeess. we create a customer.\nI was thinking step1: create a charge, success or fail. if success, create the customer then, assign charge to customer.\nis that an ideal scenario? because now we still have customers with failed charges. then when they come in again. its using a failed card.. thats what I meant it created the customer on different error response. most likely deleting is the way to go. but only if they dont have a previous success charge. I was testing with 4000000000009995 on Test still doesnt create customer on Test. on live \"customer having insufficient funds\" it does . I guess no choice but to delete.. ",
    "jamminjames": "Follow up. When I use the line:\n\\Stripe\\Stripe::setVerifySslCerts(false);\nStripe reports on the dashboard that a successful payment was made, even though on my test form I get a \"Your payment failed\" error after submitting.  So, there's something about the SSL cert it doesn't like, and I am looking into that. It should be fine, as shown above, and I checked the expiration, which is not until March 2019, so it's odd.\nAlso, Stripe tries to send a Webhook message back, but the dashboard shows the status is stuck at \"500 Pending.\" I've double-checked the Webhook setup on the site, and it seems fine, using the correct test secret key, etc. . ",
    "julienbourdeau": "I think I'm gonna go with it for our v2. I like not having to maintain the list.\nFeel free to close this PR if you don't want to merge it, I won't be offended \ud83d\ude04 . ",
    "daz-stripe": "Updated and fixed the misname!\nr? @brandur-stripe . Yep!. ",
    "sambokai": "Related: https://github.com/stripe/react-stripe-elements/issues/222\nThey had the same problem with react-stripe-elements and AdBlock. ",
    "lode": "Thanks!. Ah snap, nevermind. These are local dependencies. I got confused because I got them after installing this package.. ",
    "tarjei": "@ob-stripe thanks for the quick turnaround! \nI manged to get it working, so I do not think there is a bug there.\nBut: The logic around the ::all query isn't always easy to understand. It would probably be very useful to be able to ask for an ordering of the results by created date. \nI think part of the issue is that if I query after charges with ['created' => ['gte' => sometime]] I will get the newest results first - not the oldest ones. This makes it a bit hard to run a query and get all the latest and add them to the existing list because the two lists are ordered differently. \nKind regards, \nTarjei. Ok. Thanks for the input :)\nKind regards,\nTarjei\nDen man. 15. okt. 2018 kl. 14:28 skrev Olivier Bellone \nnotifications@github.com:\n\nAh, I see. All list endpoints return resources in reverse chronological\norder, and at this time there is no option to sort results differently, so\nyou'd have to do the sorting on your end.\nIf you want to get a list of charges in chronological order, the simplest\nway is probably to do something like this:\n$results = [];foreach (\\Stripe\\Charge::all($params)->autoPagingIterator() as $charge) {  array_push($results, $charge);}$results = array_reverse($results);\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/538#issuecomment-429833593,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAM5P22yonSGNBftI3M1kfy2KTUJ2N7Fks5ulH9QgaJpZM4Xbszd\n.\n\n\n-- \n\nTarjei Huse\nMobil: 920 63 413\n. ",
    "kristoff2016": "did I make it right ?. ",
    "mintplugins": "@remi-stripe @ob-stripe I am attempting to set this up for a connected account (through Stripe Connect), but it is not working if I use a connected account's secret key. \nConnected accounts failing to create webhook\nUsing the PHP SDK it is giving me this error:\nFatal error: Uncaught Stripe\\Error\\Permission: This application does not have the required permissions for this endpoint on account 'ACCOUNT_ID_REMOVED_BY_PHIL'. The required permissions are not available for use by Connect applications. in stripe/stripe-php/lib/ApiRequestor.php on line 187\nI also tried doing the call directly through cURL on the command line using this call:\ncurl https://api.stripe.com/v1/webhook_endpoints \\\n  -u STRIPE_CONNECTED_ACCOUNT_SECRET_API_KEY_HERE: \\\n  -d url=\"https://example.com/my/webhook/endpoint\" \\\n  -d enabled_events[]=*\nWhich gives me this error: \nYou are not permitted to configure webhook endpoints on a connected account. Did you mean to create a Connect webhook on your account instead?\nPlatform accounts create webhook successfully\nIf I try to do the above for a Platform account, it creates the webhook without any issue or error. \nWhy this is important\nCreating webhooks on stripe-connected accounts is a really crucial component, as it allows connected accounts to set up their webhooks without them needing to log into their Stripe Account. It takes away the element of human error. \nIt may not be the case for every Stripe Connect account, but in my case, the Platform account does not need to know about any events happening on connected accounts. Only the connected accounts themselves need to know, and that requires a webhook within the connected account, pointing at a unique url. \nCan support for this be added to the Webhooks API?\n. Thanks for responding @remi-stripe. I think I understand what you mean. \nFrom my perspective, it's unnecessary for my infrastructure to act as an in-between, when it is simply relaying event details. Also, it opens up security issues that don't need to exist, as there is no need for the Platform to be notified about these connected-account events. In fact, I'd rather the Platform never know.  \nCould one argue that the webhooks set up within the Stripe Dashboard, manually by the connected account owner, are the same anti-pattern? They report all events, even connected-to-platform events.. ",
    "pippinsplugins": "@remi-stripe Our use case (I work with @mintplugins) is that we're not really acting as a platform, Stripe Connect is used exclusively for the authentication of a store with the store owner's Stripe account. We've used Stripe Connect to provide an OAuth flow instead of requiring store owners manually enter their API keys.\nThis is in the context of a self-hosted eCommerce store powered by Easy Digital Downloads.\nSince we only use Stripe Connect for authentication, we don't act as a platform in the standard definition. The store owner still has a Standard Stripe account with full control over their data and events. This also means they need to create webhooks in their account for various events (refunds, paid invoices, etc). We would like to trigger a remote creation of the necessary webhooks from the store (not from our platform).\nDoes that help clarify?. We use it because it lets us send our users through an OAuth process to set up their Stripe account with their store instead of requiring the manual copy-paste of API keys.\nIt's a much better experience that's less prone to error and less intimidating for non-technical users.. ",
    "spaze": "I understand your point of view and I'm not sure this would be the right way either.\nBut I'm running a static analysis (using PHPStan) and it flags property access like $subscription->coupon for obvious reasons. I'm aware these are used only for save() but technically they're set on the resource object, and as I couldn't figure out any nicer way of resolving the static analysis issues so I've submitted the PR.\nAs a compromise, I could add a comment like\n* @property string $source Used for save() only\nwhich might help distinguish these from the others.. Of course! :-) Changed.. I've created a simple extension for PHPStan that will emulate those undefined properties so they won't be flagged anymore. I'll add more properties to the extension once I'll find them.\nThis can be closed then. Thanks everyone!. ",
    "devshorts": "r? @ob-stripe @brandur-stripe . @brandur-stripe game on!   . Heyo! \ud83d\ude4f for tests!   Ok, made sure to check the key exists in the assoc array.  Thanks for the multiple rounds, hopefully this is the last one :) @brandur-stripe . I was just being extra paranoid. My concern was that IF something did happen, all we'd get in the header is false, since the return is either json or a boolean.  If we had false then we'd probably have to special case any analysis tooling in stripe to skip that as we'd only be expecting json.  I can definitely pass it through, but I didn't think it would be helpful. . Works for me. I just didn't want API calls to fail for some reason if metrics got screwy, but I see your point.  Incoming!. ",
    "rvitaliy": "@ob-stripe \nSince PHP dropped the 5.6 & 7.0 support, I would suggest upgrading to 7.1 see supported versions.\nSo you can finally start using the types \ud83d\ude80 and make this lib more secure \ud83d\udd12. it's probably should be casted to int like:\nreturn (int) round(microtime(true) * 1000);. missing phpDoc\n$requestId probably must be a string\n$requestDuration must be int in milliseconds. ",
    "eclyptox": "@EatonZ did you solved this issue? I'm facing same issue and only some customers. I have tried API with curl and I have not getting this error.\nThanks. ",
    "zanker-stripe": "LGTM. ",
    "social-ink": "Where/how do I get this request id? I'm just running that line above and get a Fatal Error dump on php.. OK.. Does this help:\n\"error\": {\n    \"code\": \"parameter_unknown\",\n    \"doc_url\": \"https://stripe.com/docs/error-codes/parameter-unknown\",\n    \"message\": \"Received unknown parameter: customer \",\n    \"param\": \"customer \",\n    \"type\": \"invalid_request_error\"\n  }. Got it - req_G9E7UQQNfefniA. Thank you!. ",
    "tomer-stripe": "lgtm!. ",
    "johnraz": "Hey @ob-stripe, no problem, I'm glad I can contribute.\nI did the requested change and also introduced a new constant to not have to repeatedly rebuild the URL, I hope it suits you \ud83d\ude09 . Mmm tests seems to be failing... Any clue?. I think I nailed it in my last commit.. \ud83c\udf89 Yes travis is happy \ud83c\udf89 . ",
    "kimhemsoe": "@remi-stripe Yes ofc and done :). ",
    "stemis": "Thanks! Much appreciated \ud83d\ude04. ",
    "bert2002": "Hi @ob-stripe ,\ncan't find any reference except the name itself and I guess that's not what we want to remove.\n```\ncat composer.json\n{\n  \"name\": \"stripe/stripe-php\",\n  \"description\": \"Stripe PHP Library\",\n  \"keywords\": [\n    \"stripe\",\n    \"payment processing\",\n    \"api\"\n  ],\n  \"homepage\": \"https://stripe.com/\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Stripe and contributors\",\n      \"homepage\": \"https://github.com/stripe/stripe-php/contributors\"\n    }\n  ],\n  \"require\": {\n    \"php\": \">=5.4.0\",\n    \"ext-curl\": \"\",\n    \"ext-json\": \"\",\n    \"ext-mbstring\": \"\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"~4.0\",\n    \"php-coveralls/php-coveralls\": \"1.\",\n    \"squizlabs/php_codesniffer\": \"~2.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": { \"Stripe\\\" : \"lib/\" }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"2.0-dev\"\n    }\n  }\n}\n```\n. I found my mistake @remi-stripe I wanted to install the composer version over the manual installation. Thanks for pointing that out. . ",
    "Josh1Dev": "@ob-stripe Sure! Just a small contribution : ) . ",
    "Seldaek": "Oh sorry forgot about that (I get a bunch of these emails :)) - Did you set it up using your API token as the secret like it says in \"Do not want to log in via GitHub and grant us webhook configuration access?\" on https://packagist.org/about#how-to-update-packages? If not please delete the hook and recreate like that. If it's already done can you please trigger a hook test and send a screenshot of the result you get from us? \nIf using that method it should mark it correctly as using the new hook. If you use the \"Manual hook setup\" it'll work fine but will mark it as using the deprecated hook still, as we can't really detect the difference between legacy hook and a manual created hook with the apiToken in the url (and not as secret).. ",
    "TekBoss": "My bad. I see it there now. (Had to unzip it again).\nSorry about all the trouble.\nForrest\nOn Wed, Jan 23, 2019 at 3:21 PM Olivier Bellone notifications@github.com\nwrote:\n\nHi @TekBoss https://github.com/TekBoss. I've just checked that the .zip\narchive for the latest version (\nhttps://github.com/stripe/stripe-php/archive/v6.28.1.zip) does contain\nthe data/ca-certificates.crt file.\nCan you share which version of stripe-php you're referring to and where\nyou downloaded the .zip file from?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/stripe/stripe-php/issues/585#issuecomment-456989305,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVoopgZFK1cIqjnoTJWcD6mhTmBtqXyks5vGOBQgaJpZM4aPu8C\n.\n. \n",
    "Rheed": "Hello @ob-stripe ! Thanks for the quick update, we noticed that this is also happening with other objects , like the address or an owner of a customer, we didn't try any other tho. Just to let you know!\nAgain, thanks for the update! :). ",
    "itmyprofession": "@remi-stripe I saw your code is working with mentioned test key.\nphp\n$customers = \\Stripe\\Customer::all(\n  [],\n  [\n    'api_key' => 'sk_test_j7aKYczjhZSCCmHQyDTSoegD'\n  ]\n);\nBut, it's not working with \"sk_test_j7aKYczjhZSCCmHQyDTSoegD\" test secret key. It returns the same response.. ",
    "torreytsui": "Hi @ob-stripe, thanks for the workaround. I'm happy with it until a proper static method for deletion is implemented in the future :). ",
    "amanjaswalia": "Yes i found this property is defined in Stripe.php Lib but i'm getting this issue on local and live too.\nInstalled library from  \"composer require stripe/stripe-php\"\nI will get 4-5 times response but after that getting error. Also tried with composer update.\nYou can use this link to see what i'm getting. \"http://enacteservices.com/referred-nation/test-payment\". Stripe test card detail need to enter (like card no start with 4242).\nAfter enter dummy card detail you will redirect to following link and code i shared.\nLINK: \"http://enacteservices.com/referred-nation/test-payment-status/\"\nCODE:\nrequire_once('vendor/autoload.php');\n$stripe = [\n  \"secret_key\"      => \"sk_test\",// KEY NOT SHARED\n  \"publishable_key\" => \"pk_test\",// KEY NOT SHARED\n];\necho $stripe['secret_key'];\necho '';print_r($_POST);\n\\Stripe\\Stripe::setApiKey($stripe['secret_key']);\n$token  = $_POST['stripeToken'];\n$email  = $_POST['stripeEmail'];\n$customer = \\Stripe\\Customer::create([\n  'email' => $email,\n  'description'=>'For Member Post',\n  'source'  => $token,\n]);\necho '';print_r($customer);\n. > @amanjaswalia This property is defined in Stripe.php here. Do you see this on your local installation? Would you be able to clarify how you're using the library and maybe providing a small test case to reproduce this issue?\nYes i found this property is defined in Stripe.php Lib but i'm getting this issue on local and live too.\nInstalled library from \"composer require stripe/stripe-php\"\nI will get 4-5 times response but after that getting error. Also tried with composer update.\nYou can use this link to see what i'm getting. \"http://enacteservices.com/referred-nation/test-payment\". Stripe test card detail need to enter (like card no start with 4242).\nAfter enter dummy card detail you will redirect to following link and code i shared.\nLINK: \"http://enacteservices.com/referred-nation/test-payment-status/\"\nCODE:\nrequire_once('vendor/autoload.php');\n$stripe = [\n\"secret_key\" => \"sk_test\",// KEY NOT SHARED\n\"publishable_key\" => \"pk_test\",// KEY NOT SHARED\n];\necho $stripe['secret_key'];\necho '\n';print_r($_POST);\n\\Stripe\\Stripe::setApiKey($stripe['secret_key']);\n$token  = $_POST['stripeToken'];\n$email  = $_POST['stripeEmail'];\n$customer = \\Stripe\\Customer::create([\n'email' => $email,\n'description'=>'For Member Post',\n'source'  => $token,\n]);\necho '\n';print_r($customer);. ",
    "fred-stripe": "@amanjaswalia can you try running composer dump-autoload and then re-running your code to see if the error persists? Given where the error occurs it seems like Composer's autoloader may not be loading the correct version. I'd also try to composer require stripe/stripe-php '^6.3.0' to reinstall stripe-php and see if that resolves the issue. Please let us know the outcome!. It feels weird to encode so much knowledge about the URL structure in this object, but this is similar to, stripe-ruby, for example:\nhttps://github.com/stripe/stripe-ruby/blob/master/lib/stripe/bank_account.rb\nOn the one hand, this leads to duplicated logic; on the other hand, it simplifies this object's dependencies and leads to more explicit tests.. ",
    "iamprasanth": "Hi   Team,\nWhile paying the amount via stripe in mobile devices, the image is not showing in the stripe checkout popup. \nI tried solving this issue by adding the SSL, but still mobile devices are not showing the images in stripe checkout popup. how could we do this? It would be great if you can help me to sort this issue.. \nPlease find the attached screenshot:\n\nThank you!. ",
    "virgofx": "Thanks , makes sense. ",
    "stephen": ":+1: \n. Was thinking about this as well - wasn't sure of how null is handled The Standard Way in php.\n. ",
    "danwang": "Fixed.\n. Thanks! Fixed.\n. ",
    "ThisIsAreku": "On my side they don't pass, using return; is strictly equals to return null; and constants can't be passed by reference.\n. ",
    "mmcgrana": "\"deprecated\"\n. ",
    "dannyhajj": "I believe $sources and $subscriptions are of type \\Stripe\\Collection. Using the collection class instead of array, would allow IDEs to recommend the methods that we can use on those two properties. Like retrieve, create, etc.\n. ",
    "floatingLomas": "Is it possible to do nested values in here - i.e., leave the 'object' as an object?  It might be easier to grok [0] for analytics etc. if it didn't require parsing the string.\n[0] This might actually be the first time I've typed grok on the internet.\n. ",
    "jkakar-stripe": "Hmm, I've updated the properties to reflect what should be exposed. I'm not sure I understand what you mean by $description being undocumented? All the fields listed now are public and should be known to users of the client.. "
}