{
    "tjerkw": "This is indeed something that i want to add. If you scroll the list, the state of the openen items should be the same and should not close automatically.\nWill try if i can fix that if I have time.\n. Just fixed this issue \nhttps://github.com/tjerkw/Android-SlideExpandableListView/commit/9b33dc4841e22c3586232816cfac7c70b1c556ca\nIt now properly remembers which field was open, and will keep it open even if the list is huge.\nCould you confirm the fix? Then I will close this issue.\n. Yes indeed that is a problem currently. Do you have an idea how to solve this?\n. Hey @nathanielwolf thanks, thats a smart solution. \nB.t.w. the problem randomly expanded views is just solved in the current master. So that should be fixed now.\nFor now i'm going to test the solution by @gorilla-maguila\n. @gorilla-maguila your solution does not have the correct measured height for the /sample project. Hmmz i'm going to look for the proper generic solution.\n. Issue #6 was related.\nI think I tackled it. I solved it by using the OnPreDrawListener and setCollapseView method as @nathanielwolf suggested, smart move btw! However I also updated the ExpandCollapseAnimation to use getHeight instead of the LinearLayout height.\nMy commit:\nhttps://github.com/tjerkw/Android-SlideExpandableListView/commit/4a79ddfa7f5a19c6ae93d8cfbc53429627566eae\nB.t.w. the only thing that I dislike is the Map that now has an entry for every item in the list. If the list grows to 1000 items, it means a lot of extra memory is needed. But I don't see a nice solution for you.\n@nathanielwolf @gorilla-maguila  @grivos could you all confirm that this commit fixes the problem?\nThanks in Advance!! Coudn't do it without your ideas!\n. I thought of that problem too. Wanted to solve it with:\nregisterDataSetObserver(new DataSetObserver() { ... }\nHowever If a user of the library would set its own datasetobserver it would break my listener. Since only one listener is allowed. \nI think your solution is the correct one. It should also override notifyDataSetInvalidated() in that case.\nWill look at this later.\n. Created issue #11, closed this one.\n. You are right the sample is very thin.\nI am going to extend the sample to also show how to use onclick listeners properly. For all buttons.\nGreetings\n. I just updated the code to make it easier to listen for click events in the buttons in the expandable area of the listitem.\nhttps://github.com/tjerkw/Android-SlideExpandableListView/commit/9b33dc4841e22c3586232816cfac7c70b1c556ca\nI also updated the sample app, it now shows howto listen for action event. An action event is a OnClick event on one of the buttons in the expandable view.\nThe other click listeners that you are asking for, are more difficult:\n- Is it possible to set an onclick listener on the actual slide down button\n  No this is not possible, since it already has an onclick listener which handles opening and closing of the expandable area\n- How to update a textview in the expandable area\n  In any OnActionClickListener you get a reference to the list item view that was being clicked. Just get the view your need with findViewById and do your thing.\n. For example usage see: https://github.com/tjerkw/Android-SlideExpandableListView/blob/master/sample/src/com/tjerkw/slideexpandable/sample/ExampleActivity.java\n. I am closing this issue. The example will be expanded in the future, to show different use cases.\n. I'm going to extend the example to show how to include on onclick listener. I am marking this as a suplicate of issue #3\n. Please follow #3 to get updates. I'm closing this one.\n. I agree. However ObjectAnimator are only available since API level 11. (Android 3.0.x). \nThat would require any app which uses this library to only run on Android 3.0 or higher. Since I want this library to be compatible with almost any android version, i am not going to include ObjectAnimator.\nI could rewrite the animation in such a way that it would use ObjectAnimator if available, but that would complicate the code. And I dont see a lot of jittering.\nAgreed?\n. Hmm good point. However that does add an extra dependency for this project.\nSince this project is a relatively small one, i want to keep things simple.\nB.t.w is the animation really slow for you?\n2013/1/11 SeanPONeil notifications@github.com\n\nI believe NineOldAndroids https://github.com/JakeWharton/NineOldAndroidscan backport ObjectAnimator if compatibility is an issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/5#issuecomment-12166538.\n\n\n\nTjerk Wolterink\nhttp://about.me/tjerkw\n. I tried using an TranslateAnimation, but that doesnt work since a .requestLayout is required an every animation frame.\nThis is probably also the reason that the animation is a bit jittery.\nHowever I dont think the ObjectAnimator will solve that problem. Does the ObjectAnimator perform a requestLayout on every frame? \n. @peterbetos @SeanPONeil I tried using TranslateAnimation and tried with ObjectAnimator but I coudnt get it to work properly. Since this is not a failure but an improvement I will not focus too much on this item.\nHowever you are free to submit pull requests ;-)\n. I did see the animations becoming slow, and also scrolling becoming slow. But this is do to the fact sometimes a lot of new objects are created when scrolling. I'm going to focus on that.\n. Which makes this ticket related to issue #12 \n. Actually I struggled with this same issue, but for me, getHeight doesnt work properly. The expand animation does not show up anymore. Only the collapse animation works.\nThe reason this is because when the expandable view is collapsed, its view is reported as 0, so getHeight() will return 0, and thus the animation will animate from 0 to 0, when the animation finishes to item is set to visible.\nI added some logging code just after the getHeight in your solution on the /sample project:\nLog.d(\"ExpandCollapseAnimation\", \"getHeight = \" + mEndHeight + \" , layoutParams.height = \" + mAnimatedView.getLayoutParams().height);\nWhen an item A is expanded,\nand you try to expand a differnt item B, then there are two animations.\nExpand animation on item B\nCollapse animation on item A\nFor the item B to show (animation fails to work with getHeight):\n01-12 01:59:46.718: DEBUG/ExpandCollapseAnimation(15147): getHeight = 0 , layoutParams.height = 150\nAnd for the item A to hide (works properly):\n01-12 01:59:46.726: DEBUG/ExpandCollapseAnimation(15147): getHeight = 150 , layoutParams.height = 150\nCould you try to get your solution to work with the /sample project. If it works i'm glad to accept it.\n. Thanks for your input, i think I solved it. Please follow issue #2 for more info on the solution.\n. @grivos  I like this commit: https://github.com/grivos/Android-SlideExpandableListView/commit/b89c66b83560987968c5641d58d3955c0e9d00e2\nIt usese the nice SpareIntArray as i should have done in the first place \nCould you generate a pull request?\nI dont like https://github.com/tjerkw/Android-SlideExpandableListView/commit/a1fac98. In Android event listeners are always interfaces. You shoudnt have to extend an Adapter in order to listen for events. \nActually i think my new ActionSlideExpandableListView which was commited before your changes actually solve your problem. \nhttps://github.com/grivos/Android-SlideExpandableListView/blob/de3b710028986d5de103c043a3184259f6d9dff4/library/src/com/tjerkw/slideexpandable/library/ActionSlideExpandableListView.java\nSee how it is used here: \nhttps://github.com/tjerkw/Android-SlideExpandableListView/blob/master/sample/src/com/tjerkw/slideexpandable/sample/ExampleActivity.java\n. Ok i'm cherry picking only that change.\nOk done:\nhttps://github.com/tjerkw/Android-SlideExpandableListView/commit/99156dc9f629161a806ec6c6eefc73c03ca492d6\nYou are now an official contributor :+1: \n. Ok i'm closing this issue since it is fixed.\n. @grivos i added you as a contributor to this project. This means you got full write access to the repo. \nI'm doing this because in the end i think this is good for this project. You don't have to commit anything, but if you want to, you're free todo so. :-)\n. This attribute is not yet used indeed. However i'm planning to make it easier to use this library by setting its behaviour trough XML.\nHowever i dont know how to set the namespace properly in the attrs.xml, more people are having problems with it. Any ideas?\n. I removed it for now. Thanks for pointing it out. Closing this issue\n. Actualy in step 3, that is not the way it should work. It is not a feature. \nScrolling schould not change the open/closed state of the expanded area. So it \"remembers\" which views are open even after scrolling.\nWhat happens in step 4 is actuallly correct. But the view should be open in the first place.\nSo your fix, is actually not a fix since it changes the correct behaviour.\nAre you maybe collapsing the view in the Adapter?\nHowever since you are seeing something else you found a bug. However i cannot reproduce it. Are you sure you are using the latest code?\nDoes the demo app have this problem? I dont see it happening.\n. Any updates? Otherwise i'm closing this issue.\n. Closing since I got not reply from @peterbetos. Feel free to open it again.\n. What do you mean with \"handler item click listener\". What event do you want to listen for?\n. An answer to your question can be found here:\nhttp://stackoverflow.com/questions/1518338/setonitemclicklistener-not-working-on-custom-listview-android\nHowever i think the expand button will not work anymore, since you made the whole list item clickable.\nYou could also add an extra event listener on the expandablebutton in the ListAdapter.getView method.\nSince this is not an issue with the library i;m closing this one. Feel free to open it again if you think it is a library problem.\n. I still don't fully understand you completely.\nWhat you can do is the following:\nUse a normal ListView\nCreate your own ListAdapter.\nIn your own ListAdapter in the getView method set an onclick listener on the view you want.\nWrap your adapter in an SlideExpandableListAdapter.\nLike this:\n``` java\nListAdapter adapter = new ListAdapter() {\n    public View getView(final int position, View convertView, ViewGroup parent) {\n        View v = super.getView(position, convertView, parent);\n        v.findViewById(R.id.your_view_id).setOnClickListener(yourListener);\n        return v;\n    }\n}\nlist.setAdapter(new SlideExpandableListAdapter(\n    adapter, R.id.more_button, R.id.expandable_view\n));\n```\n. I agree, going to replace it now. Thanks for the idea!\n. Done! Could you check my fix? \n. Wanted to solve it with:\nregisterDataSetObserver(new DataSetObserver() { ... }\nHowever If a user of the library would set its own datasetobserver it would break my listener. Since only one listener is allowed.\nI think your (by grivos) solution is the correct one. It should also override notifyDataSetInvalidated() in that case.\nWill look at this later.\n. Yes the main problem currently is the creation of 2 objects in the getView. \nThe problem is that we actually need ViewTreeObserver.OnPreDrawListener in order to know how high the expandable view is. However this slows down the performance of the app.\nFor the event listener that is created, i can optimize something there.\nSo indeed I pick this ticket up. Thanks for noticing!\n. @JesseFarebro that is related to issue #5 and not this issue. The slow scrolling of the list is unrelated to the collapse animation.\nI tried ObjectAnimator.ofFloat but don't have to code anymore. Feel free to try it yourself by forking.\n. Indeed @JesseFarebro this fixes it for me. Closing the issue untill i see slowness again.\nThanks for your work on fixing it! Great work!\n. It dont really understand the question.\nHowever I do understand what @tboehrer is saying. Currently this project does not provide that functionality.\nI would recommend using a different library, just for that purpose:\nhttps://github.com/Knickedi/android-toolbox/wiki/Quick-action\n. I just tested this okay! Works like a charm! Scrolling is indeed much faster now. Thanks a lot!\n. Hmm. I understand your confusion. But the point is that the listener is already named \"OnActionClickListener\". An action is a term for one of the ExpandableItems. So that's the reasoning I had behind it. Renaming it would break all my code which works with this lib.\n. @anuran  i'm not here to help you with writing android code. Your issue is unrelated to my library. \nSince im not going to rename it i'm closign this issue.\n. I also remove the cast (SlideExpandableListAdapter)getAdapter() to a member in order to be more typesafe. Also added a null check.\n. I was thinking of this feature, but since i didnt needed it yet I didnt build it yet. You are free to submit a pull request since i dont have a lot of time now.\n. Could you give a proposal? I don't understand the problem.\n. Ah indeed. It was not saving the state properly. I fixed this in the adapter, and if you use the ListView directly it works out of the box now. Thanks for spotting this!\n. Why does fastScrollEnabled require you to extend a BaseAdapter? A ListView uses a ListAdapter and is not dependant on BaseAdapter.\nSo i'm reluctant accepting this pull request.\nDo you know why it depends on BaseAdapter?\n. Ah yeah, anyway since your code fixes a crash i'm going to accept it! \n. Looks good. I merged it!\nB.t.w. i'm thinking of giving anybody who contributed good code with a pull request full write access to the repo.\nI think in the end that is better for the project, i dont want to be a gatekeeper. What do you think? Do you want full access? You're not required to give contributions but you are free to commit small improvements.\n. I like the changes, but could you please throw an illegalargumentexcption when the animation duration is smaller then zero in the setAnimationDuration method. That is good practice in API design. Please see the following link for more info http://www.javapractices.com/topic/TopicAction.do?Id=5\nIn this way the user of the library gets a meaningfull stacktrace instead of failing silently.\n. Thanks! (sorry for the late reply)\n. Its a general problem with edittext's inside a listview. Probably this should solve your problem:\nhttp://vikaskanani.wordpress.com/2011/07/27/android-focusable-edittext-inside-listview/\nI'm closing this since it has nothing todo with this project, its a general ListView problem.\n. Indeed I know about the issue but didn't have an easy fix at hand.\nOn Apr 5, 2013 7:17 PM, \"Jesse Farebrother\" notifications@github.com\nwrote:\n\nI've noticed this as well I will take a look and see what I can do today.\nThanks for the suggestion.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/25#issuecomment-15968793\n.\n. Hey Naddaf that looks like a good solution. Could you create a pull request? You could solve the dependency on android 8 with some java reflection as explained here: http://android-developers.blogspot.nl/2009/04/backward-compatibility-for-android.html\n. Hi, could you reuse getAnimationDuration() instead of scrollAnimationDuration for the animation duration?\nOr could you explain me why a different durtion is needed? Otherwise the merge looks good.\n\nB.t.w. i just accepted a different pull-request which affects the same file, so please update your code.\n. There are two separate issues reported here. Both throw an NullPointerException. But the cause is different. One ise caused by using v4 support library. It has an easy fix.\nThe other issue reported by @CandidoCaballero is caused by the fact no adapter was set on the ListView. Is this true @CandidoCaballero \n. @marcorighini when you have a fix for the problem please submit a patch, i'm happy to accept it.\nThis is an open source project so I gladly accept fixes.\nCurrently I dont have the time to work on these issues. Thats why i opened this project to a lot more contributers.\n. I commited some code which should prevent the crash. I'm not sure why we got a nullpointerexception but at least it should be prevented now. I probably didnt resolve the root issue.. But can anybody confirm wether its is working.\n. @hamzaawwad  its already fixed. If not please try fixing it yourself and provide a pull request.\n. See the code in ActionSlideExpandableListView for the internal implementation. As you can see it creates a wrapper list adapter which in turn wraps the getView object to create the listeners. Maybe you could hack your way into there.\n. Please use github issue tracker. Direct mails are not appreciated.\nOn Aug 14, 2013 11:54 AM, \"Jerome Song\" notifications@github.com wrote:\n\nwhen I call method collapseLastOpen() method when i click the item and\nstart another activity,after come back,I come across this phenomenon?Can\nyou give me some advice or give me a hand,thx very much\n[image: list_item]https://f.cloud.github.com/assets/3196586/960983/cf578ecc-04c6-11e3-9c25-b8e21e868220.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/39\n.\n. Ah I understand i get these issues in my mailbox too.\n\nAs I understand your issue is that the expandable view is still collapsed?\nProbably you have to wait for the animation to be done after calling collapseLastOpen,\nthis is because the collapseLastOpen actual starts an animation to collapse it and once the animation ended the item will be set to GONE.\nBut it does remember the state properly, so i'm a bit confused why you see this issue.\nCould you try sleeping a second before going to the next acitivty, to confirm my hypothesis?\n. I just merged code from a contributer which adds a listener for exactly these events. See AbstractSlideExpandableListAdapter.OnItemExpandCollapseListener \n. You could pull my code and play around with it to implement it?\n. Sorry for the late reply. But looks cool! Thanks\n. I just merged it manually \n. I moved to gradle. Try that.\n. See the method public abstract View getExpandableView(View parent); in the base abstract class.\n. Please give me a stacktrace.\n. You reformatted all the code, i cannot accept this pull request. Keep your changes minimal and conform to the coding style.\n. I supposed you tested this. So i'll me lazy and merge it\n. It has an internal state of which index is open, if you remove an item you should ensure to update the adapter which in turn should let the listview know it is updated.. it may be the case that this is not working. Could you confirm this? \n. I just merged a pull request which does just that... i didnt test it though :p\n. This library really only allows one view type because it measure the height only once. I'm not sure how to easility fix this. Do you have an idea? \n. I'm glad todo it but could you give me hints how to perform this? Or better update the maven pom file to perform this task?\n. I merged it, but after that i moved to gradle completely. Gradle is the future of android. Greetings\n. @rekire i've moved completely to gradle now. Not sure if adding it to maven is easy with gradle. Probably i have to signup at maven, which i'm too lazy for doing.\n. Probably this is due to the fact how it measures the views. Please try fixing it in the project itself, if you found a solution let me know!\n. It actually contains logic to save the state, but indeed there is a nullpointerexception reported at issue #32 , which makes this a duplicate\n. Looks good but please use tabs and not spaces, code looks messy in some editors now. Once you fix that i'll merge.\n. Moving to gradle would be very good. I'm probably going to need my library in my own project. So i'm probably going to move this to gradle\n. Yes, this is by design. I didnt know how to calculate a view height before displaying it.\nIf you have a solution please tell me! I tried a lot of stuff.\n. The sample module is NOT a library\n. Wow this is a huge commit, i need to manually test it before merging it. If any other contributer can tell me it works im willing to merge\n. Seems legit, but there are conflicts, could you pull and push again? Sorry for the late reply\n. Guys please look at the example project, you need to properly implement \n        View more = getExpandToggleButton(parent);\n        View itemToolbar = getExpandableView(parent);\nIf these methods return null you will get this exception.\nIf you are using a subclass of AbstractSlideExpandableListAdapter then please use the appropiate ids.\nAgain look at the example. \n. There is no need for this listener, since the expansion is always triggered by a click on the Toggle button, which you can listen for.\n. Not accepted, solution is much easier, see https://github.com/tjerkw/Android-SlideExpandableListView/commit/0355484f2e62fc0fd939349a70684ae6369f4fc1\n. It was a merge request which i accepted without testing, due to time constraints. lemme have a look\n. Not supporting maving anymore. Please move to gradle\n. This is not supported. Or look at the example code. there might be an\nexample.\nI am not maintaining this repo anymore.\nPlease submit a pull request to fix it.\nOn Fri, Dec 16, 2016, 10:40 configurer notifications@github.com wrote:\n\nis this issue already solved or what ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/103#issuecomment-267555038,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAx-saybV4G_hgYnGzNJE5dBjCeyTYrgks5rIlyjgaJpZM4Ggu6M\n.\n. This repo is outdated due to the new RecyclerView and the fact that this\nUIX is a bit old.\n\nOn Fri, Dec 16, 2016, 14:10 Tjerk Wolterink tjerkw@gmail.com wrote:\n\nThis is not supported. Or look at the example code. there might be an\nexample.\nI am not maintaining this repo anymore.\nPlease submit a pull request to fix it.\nOn Fri, Dec 16, 2016, 10:40 configurer notifications@github.com wrote:\nis this issue already solved or what ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/103#issuecomment-267555038,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAx-saybV4G_hgYnGzNJE5dBjCeyTYrgks5rIlyjgaJpZM4Ggu6M\n.\n. The android api should give information.\n. This is a feature request. Not an issue. Feel free to implement  it. I will gladly accept push requests\n. \n",
    "larten": "I can test after weekend. Thanks!\n. I tested and it's working!\nThanks!\n. If I insert android:windowSoftInputMode=\"adjustPan\" line to the activity in the manifest, it's working.\nBut the keyboard, after first touch on edittext, is always visible and only hide when i press Back button.\nSo not perfect, but I'm trying :)\n. I can handle virtual keyboard problem with this:\npublic static void hideSoftKeyboard(Activity activity) {\n    InputMethodManager inputMethodManager = (InputMethodManager)  activity.getSystemService(Activity.INPUT_METHOD_SERVICE);\n    inputMethodManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), 0);\n}\nAnd call this, after setcontentview with the root view of the layout parameter:\npublic void setupUI(View view) {\n```\n//Set up touch listener for non-text box views to hide keyboard.\nif(!(view instanceof EditText)) {\nview.setOnTouchListener(new OnTouchListener() {\n\n    public boolean onTouch(View v, MotionEvent event) {\n        hideSoftKeyboard();\n        return false;\n    }\n\n});\n\n}\n//If a layout container, iterate over children and seed recursion.\nif (view instanceof ViewGroup) {\nfor (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {\n\n    View innerView = ((ViewGroup) view).getChildAt(i);\n\n    setupUI(innerView);\n}\n\n}\n```\n}\n. ",
    "nathanielwolf": "I solved this problem, and the problem of randomly expanded views as result of view recycling in the Adapter. \n``` java\npublic class MyListAdapter extends ArrayAdapter \nint[] mCollapsableHeights;\nboolean[] mOpenned;\n\npublic WhyPuursAdapter(Context context,\n        List<WhyPuur> objects) {\n    super(context, 0, objects);\n    mCollapsableHeights = new int[objects.size()];\n    mOpenned = new boolean[objects.size()];\n}\n\n@Override\npublic View getView(final int position, View convertView, ViewGroup parent) {\n    final View view = convertView;\n    final View collapsable = view.findViewById(R.id.row_whypure_collapsable);\n//measure only once - hide expanded views by returning false in onPreDraw()\nif(mCollapsableHeights[position] == 0){\n    view.getViewTreeObserver().addOnPreDrawListener(\n        new OnPreDrawListener(){\n            @Override\n            public boolean onPreDraw() {\n                view.getViewTreeObserver().removeOnPreDrawListener(this);\n                mTextHeights[position] = collapsable.getHeight();\n                setCollapsedView(collapsable, position);\n                return false;\n            }\n        });\n\n} else \n        setCollapsedView(collapsable, position);\n\nview.setOnClickListener(new OnClickListener(){\n        @Override\n        public void onClick(View v) {\n\n            mOpenned[position] = !mOpenned[position];\n            ExpandAnimation newAnim = new ExpandAnimation(collapsable, 300);\n            collapsable.startAnimation(newAnim);\n        }\n    });\n\nreturn view;\n\n}\n/\n Set visibility of collapsed view\n*/\npublic void setCollapsedView(View collapsable, int position){\n    final LinearLayout.LayoutParams params = (LinearLayout.LayoutParams)collapsable.getLayoutParams();\n    if(!mOpenned[position] ){\n        collapsable.setVisibility(View.GONE);\n        params.bottomMargin = 0-mTextHeights[position];\n    }else{\n        collapsable.setVisibility(View.VISIBLE);\n        params.bottomMargin = 0;\n    }\n    collapsable.setLayoutParams(params);\n}\n\n}\n```\n. ",
    "myrmidon-media": "I solved it like this:\n``` java\npublic ExpandCollapseAnimation(View view, int duration, int type) {\n    setDuration(duration);\n    mAnimatedView = view;\n    //Force Measure with unspecified specs\n    mAnimatedView.measure(0, 0);\n    //Get Measured Height\n    mEndHeight = mAnimatedView.getMeasuredHeight();\n    //mEndHeight = mAnimatedView.getLayoutParams().height;\n    mLayoutParams = ((LinearLayout.LayoutParams) view.getLayoutParams());\n    mType = type;\n    if(mType == EXPAND) {\n\n        mLayoutParams.bottomMargin = -mEndHeight;\n    } else {\n\n        mLayoutParams.bottomMargin = 0;\n    }\n    view.setVisibility(View.VISIBLE);\n}\n\n```\n. what's giving you getMeasuredHeight() ? In my project works great the above solution.\n. ",
    "grivos": "Looks good.\nNice work!\nHowever, There is a problem if the data set is changed and the current state is invalid.\nYou might want to make WrapperListAdapterImpl extend BaseAdapter, and then in AbstractSlideExpandableListAdapter - override notifyDataSetChanged() and reset the state there.\n. Hey, take a look at my last commit a1fac98, tell me what do you think.\nThanks!\n. Cool!\nThis library can really make an app look much more polished.\nAnd I saw your example of listeners to expandable views - you're right, it is a better design.\n. ",
    "SeanPONeil": "I believe NineOldAndroids can backport ObjectAnimator if compatibility is an issue.\n. ",
    "peterbetos": "It eventually does after using it for a long time. How about using Translate animation on older versions? \n. I'll check on my end as well how I can have it implemented.\n. You can use a term other than the normal mode. \"expandmode\" can be used for example.\n. ",
    "jelgh": "Thanks :)\n. Glad you liked it! \nSure, I don't have anything in mind at the moment I'd like to add but I might come up with something later.\n. ",
    "maohieng": "Here is what I do : \nActionSlideExpandableListView list;\nListFavoriteAdapter adapter = new ListFavoriteAdapter(getActivity(), data);\nlist.setAdapter(adapter);\nlist.setItemActionListener(new ActionSlideExpandableListView.OnActionClickListener() {\n...\n//here I can handle quick action button click\n});\nlist.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int index, long id) {\n                // Here is what I can not get it\n                Toast.makeText(getActivity(), \"Item \" + index, Toast.LENGTH_SHORT).show();\n            }\n        });\nIs there something wrong with my code? I don't understand why I cannot get the result from the whole item of list clicked.\nPlease help.\n. For this condition, you need to modify the library ^^. \n1. Class AbstractSlideExpandableListAdapter : \n   - public abstract View getExpandToggleButton(View parent);\n   - public void enableFor(View parent, int position) {\n     View more = getExpandToggleButton(parent);\n     View itemToolbar = getExpandableView(parent);\n     enableFor(more, itemToolbar, position);\n     }\n2. Class SlideExpandableListAdapter : \n   - @Override\n     public View getExpandToggleButton(View parent) {\n     View view = parent.findViewById(toggle_button_id);\n     return view;\n     }\nThat's it. You can use with whatever view you want (but don't forget to set clickable=true for your view :) ). \nThis is a very good and useful library. Thank you, tjerkw. \n. ",
    "girishnair1234567": "I tried to access the expandable button using this\nI have used a TextView instead of button\ntxt = (TextView) v.findViewById(R.id.expandable_toggle_button);\nI cant get the onclick event for it ??\n. I tried placing logs into those place and it seem to do no difference\nThose logs are fired only once the list in collapsed and not when the Button is clicked\nWhat i am saying is the BUTTON that you used is not sending me the onclick for it\nThe textview that i mention is the same Button except i have chaged it from Button to TextView\n. Ya I tried but the onclick doesnt work for id=\"expandable_toggle_button\", Anywa i found the solution i had to modfiy the AbstractSlideExpandableListAdapter class\nThanks\n. ",
    "vuhung3990": "```\n    @Override\n    public View getView(final int position, View convertView, ViewGroup parent) {\n    if(convertView == null){\n        convertView = inflater.inflate(R.layout.expandable_list_item, null);\n    }\nTextView textView = (TextView)convertView.findViewById(R.id.text);\ntextView.setText((String)getItem(position));\n\nRelativeLayout layout = (RelativeLayout)convertView.findViewById(R.id.item);\nlayout.setClickable(true);\nlayout.setOnClickListener(new OnClickListener() {\n\n    @Override\n    public void onClick(View v) {\n        Log.e(\"sdsasa\", \"clicked \"+position);\n    }\n});\nreturn convertView;\n\n}\n```\nyou can custom adapter, here is sample to handle onItemclick event, this work but maybe bad idea sorry\n. ",
    "Giorgi": "This also result in another unexpected behavior: \nIf the listview is expanded and an expended item is removed the previous item gets expanded.\nA workaround is to collapse the listview before removing the item.\n. ",
    "Nath5": "Has there been any progress on this issue?  My list rows have a button to delete the row, however when I remove a row from the underlying array adapter the state of the next row gets the state of the row that was deleted. \n. ",
    "tracyboehrer": "One thing I noticed is that there is a lot going on when getView is called on the Adapter, before it even gets to our code for getView.  Not sure how much that impacts this though.\n. Before finding this, I had written some code to slide horizontally.  It used the same animation technique to adjust the left and right margins (it was based on the android-fly-in-app-navigation project).  It worked, but... It was noticeably slow and not always smooth.  When the code was used outside of a ListView, it was fine.  There was something about being in a ListView that jacked with it.  What I'd really like to find is the technique used in the GMail app, except instead of being a delete/archive, it would reveal options.\n. ",
    "JesseFarebro": "@tjerkw would it be possible to make another branch using ObjectAnimator.ofFloat if you have tested it so I can check the performance on it. As well wouldn't it just be possible for the user to specify a fixed height of the layout instead of listening for it?\n. Hopefully my pull request I just submitted fixes the issue I don't see any further problems myself, scrolling is a lot smoother.\n. I have no clue ask the engineers at Google, presumably because FastScroll could be used on a GridView or another View element. Cast is on Line 511 of FastScroller.java in the framework also located here:\nhttp://sauce.bbqdroid.org/xref/frameworks/base/core/java/android/widget/FastScroller.java#511\nEdit: Even the description\n/**\n* Helper class for AbsListView to draw and control the Fast Scroll thumb\n*/\nIs a little counter intuitive with the BaseAdapter cast.\n. Very true I overlooked that sorry for the confusion, updated in the last commit.\n. I've noticed this as well I will take a look and see what I can do today. Thanks for the suggestion. \n. I just tried testing this out with posting a delayed Handler for the animation duration then setting the selection on the listview to the position which automatically makes the view visible without the need to scroll down. It look's very jagged though I'm trying to find a better solution. What did you try @tjerkw ?\n. Just flagging this to be closed as this has  been resolved with commit 8bb3591a43ca7c071dce18f5d2cc5b75145f7da2\n. Use \njava\ncollapseLastOpen(); // Returns true if an item was collapsed false otherwise\nBefore deleting the list item. You can as well check if any item is expanded by using\njava\nisAnyItemExpanded(); // Returns a boolean if there is any item expanded\nIf you want to make the transition a little more smooth post a delayed handler for the duration of the animation then remove the item as such:\njava\nif(collapseLastOpen()) {\n    new Handler().postDelayed(new Runnable() {\n        @Override public void run() {\n            removeMyListItem(position);\n        }, mAdapter.getAnimationDuration() );\n} else {\n    removeMyListItem(position);\n}\nAlso please look into the library a little more to figure out your solution next time. Hope this helps.\n. This is not an issue with the library what so ever. This has to do with the underlying framework and in your view you probably have the width or height of the root view to wrap content which makes Android draw then redraw to continue calculating the bounds with child views. This is more so a question for stack overflow. \n. @CandidoCaballero a couple things I notice, please don't call the instance of the ActionSlideExpandableListView ExpandableListView, it gets extremely confusing as there is a core API view called ExpandableListView.\n~~Anyways you are improperly setting the adapter. You have to use the SlideExpandableListAdapter to wrap your adapter or it will throw an NPE.~~\nEdit: My mistake it just wraps it for you, never looked at the implementation of ActionSlideExpandableListView\n. I think this would be best kept in your own project. As the file says its just a simple ListView implementation and maybe should even be considered being moved into the Sample project instead of staying in the library. But I don't see any reason to merge this.\n. Fair enough I guess for simplicity sake keeping the default ListView implementation is a good idea. What I would recommend is taking out the changes to .gitignore and the gradle build because I think we will be sticking with maven for the time being and this will probably get merged next time @tjerkw has the time.\n. With the current API there is no way to set an expanded item by default.\nThe best you can do is expand the item manually or create a custom\nSaveState with an appropriate bitset and lastExpandedItem of 0.\nOn Thu, Apr 10, 2014 at 12:29 AM, akira notifications@github.com wrote:\n\nHow can i set the first item is expand by default?\n\nReply to this email directly or view it on GitHubhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/71\n.\n. You could try compiling the jar file yourself and adding it to the projects\nlib directory or what ever you have in its classpath.\n\nI would really recommend using gradle though it makes the android build\nprocess a lot more streamlined if your using dependencies.\nOn Jun 22, 2014 10:56 AM, \"balasivagnanam\" notifications@github.com wrote:\n\nHey I am not using gradle and I add to my workspace directly as library\nand trying to reference it in my current project.. but I am getting\ncompilation error as \"SlideExpandableListAdapter\" cannot be resolved as a\ntype.\nBut I have enabled it as a library and referencing that and added to my\nproject in properties.\nCan you help me?? is it possible to add without gradle.. i have never used\ngradle till now.. thanks a lot..\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tjerkw/Android-SlideExpandableListView/issues/82.\n. \n",
    "anuran": "I have an image in my list view. I want to change the image on clicking the list view item. but i am not getting where to write the code to change the image. I have used your code for expandable list view and its working fine.\n. ",
    "deepanraj": "i need onclick listener for major list. i need to trigger major listview programmatically without user interaction and also i tried performItemClick  but their no effects.\n. ",
    "passsy": "after calling animateCollapse all views are collapsed. I can't call updateExpandable(target, position); to save the expandable state because I don't have the position. But I know that all items are collapsed, so i can clear the viewHeights and the enableFor mehtod which styles the view items doesn't find a height in line 124. \nthink, what would happen if viewHeights doesn't get cleard.\nFirst you have a list of Listitems.\nA <- closed\nB <- closed\nC <- closed\nviewHeights empty\nexpand one (B) \nA <- closed\nB <- expanded\nC <- closed\nviewHeights (pos: 1, height: 100)\nand click a button. the button collapses all items with animateCollapse() and removes a item from the database\nA <- closed\nB <- closed\nC <- closed\nHere is my change. Clear view heights.\nWidhtout the Change: viewHeights (pos: 1, height: 100)\nnotifyDataSetChanged() is called and the ListView items get recreated.\nB is deleted (no view) \nA <- closed\nC <- expanded\nHere is the error: C is expanded because viewHeights still hold that pos 1 has the height 100.\nThats why i drop viewheights.\n. ",
    "FnTm": "No, THANK YOU! for the quick fix. I tried to hack it myself, but fell short, and was already going to have a fixed state app because of this, but You saved my butt. Thanks!\n. ",
    "hongpyo": "when the last item clicked.... Screen updates please..\nI don't speak English.. sorry....\n. ",
    "javaguy44": "Just saw this myself -- was about to submit an issue...but see it's taken care of.\n. ",
    "naddaf": "I went ahead and played with the library and I made some changes to accommodate what I had originally asked, at least to a degree that I am satisfied. \nHere is a list of changes I made:\n1.  I changed the minSdk to 8. This was required for an api that I am using below. For me, that wasn't an issue at all since devices with lower api version are old enough that I don't bother at all; your millage may be different.\n2. [all other changes are in AbstractSlideExpandableListAdapter]\n```\n    / This points to the listview /\nprivate ViewGroup parent;\n\n``\n1. IngetView(..), initialize theparent` variable:\nthis.parent = viewGroup;\n1. Update animateView() by adding a listener to capture the end of animation and performing the scroll, if needed:\n```\n    private void animateView(final View target, final int type) {\n        Animation anim = new ExpandCollapseAnimation(\n                target,\n                type\n        );\n        anim.setDuration(getAnimationDuration());\n        anim.setAnimationListener(new AnimationListener() {\n        @Override\n        public void onAnimationStart(Animation animation) {}\n\n        @Override\n        public void onAnimationRepeat(Animation animation) {}\n\n        @Override\n        public void onAnimationEnd(Animation animation) {\n            if (type == ExpandCollapseAnimation.EXPAND) {\n                if (parent instanceof ListView) {\n                    ListView listView = (ListView) parent;\n                    int movement = target.getBottom();\n                    Rect r = new Rect();\n                    boolean visible = target.getGlobalVisibleRect(r);\n                    Rect r2 = new Rect();\n                    listView.getGlobalVisibleRect(r2);\n                    if (!visible) {\n                        listView.smoothScrollBy(movement, 1000);\n                    } else {\n                        if (r2.bottom == r.bottom) {\n                            listView.smoothScrollBy(movement, 1000);\n                        }\n                    }\n                }\n            }\n\n        }\n    });\n    target.startAnimation(anim);\n}\n\n```\nHope that helps,\nAli.\n. Tjerk,\nThe target has changed to 8 but the minSdk is still the same as before (1.6); changes are tested on 1.6 in emulator and it doesn't cause any issues there but the it takes effect only in froyo and above.\nAli.\n. I updated my fork, do I need to do a new Pull Request?\n. ",
    "thisisfaye": "Thanks, work like a charm!\n. ",
    "pommedeterresautee": "Hi @naddaf , I have tested your fork, and it is not working correctly on my application.\nWhen the the second layout is opened and hided at the same time, the listview is scrolled, but too much. IMO it should just scroll what is necessary to align the bottom of the view with the bottom of the listview.\nI want to precise my item on the list view are really big, they look like \"cards\", may be it explains why the scroll effect is too much.\nI have fixed it for my own app with this code:\nIn AbstractSlideExpandableListAdapter class\n``` java\nprivate void animateView(final View target, final int type) {\n        Animation anim = new ExpandCollapseAnimation(\n                target,\n                type\n        );\n        anim.setDuration(getAnimationDuration());\n        if (froyoOrAbove) {\n            anim.setAnimationListener(new AnimationListener() {\n            @Override\n            public void onAnimationStart(Animation animation) {}\n\n            @Override\n            public void onAnimationRepeat(Animation animation) {}\n\n            @SuppressLint(\"NewApi\")\n            @Override\n            public void onAnimationEnd(Animation animation) {\n                if (type == ExpandCollapseAnimation.EXPAND) {\n                    if (parent instanceof ListView) {\n                        centerfinalInListview(target, (ListView) parent);\n                    }\n                }\n\n            }\n        });\n    }\n    target.startAnimation(anim);\n}\n\n/**\n * move the listview if one item is hidded\n *\n * @param l\n * @param v\n */\nprivate void centerfinalInListview(View v, ListView l) {\n    int[] view = new int[2];\n    v.getLocationOnScreen(view);\n\n    WindowManager wm = (WindowManager) v.getContext().getSystemService(Context.WINDOW_SERVICE);\n    Display display = wm.getDefaultDisplay();\n    DisplayMetrics dm = new DisplayMetrics();\n    display.getMetrics(dm);\n    int height = dm.heightPixels;\n    if ((view[1] + v.getHeight()) > height) {\n        l.smoothScrollBy((view[1]+v.getHeight()) - height, 1000);\n    }\n}\n\n```\nIt works for me because the listview is at the bottom of the screen, but this is OK only in my case. My code should be improved to work everywhere. Unfortunately I didn't find a reliable way to get the bottom of the listview...\nRegards\n. Hi,\nYou just have to point the root layout of your view, and it will work! It has not to be a button. I am doing it in my application, and it works.\nHowever, onlistclickitem listener won't work anymore.\nRegards\n. ",
    "satyadeepk": "Hi @tjerkw, Any heads up on @naddaf 's pull request?\nHaving this in the core project will be really helpful.\n. @pommedeterresautee Your change works perfectly for me. :+1:\nAs you noted, it only works for cases where the listview is at the bottom of the screen.\n. I am also facing this issue, any leads on fixing this please?\n. @chemouna, We have tried that. But in that case, a different exception occurs. It still crashes, but in a different function.\nCaused by: java.lang.RuntimeException: Parcel android.os.Parcel@428f0640: Unmarshalling unknown type code 7209057 at offset 604\n       at android.os.Parcel.readValue(Parcel.java:2038)\n       at android.os.Parcel.readMapInternal(Parcel.java:2254)\n       at android.os.Bundle.unparcel(Bundle.java:223)\n       at android.os.Bundle.getSparseParcelableArray(Bundle.java:1237)\n       at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:861)\n       at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1104)\n       at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1086)\n       at android.support.v4.app.FragmentManagerImpl.dispatchCreate(FragmentManager.java:1872)\n       at android.support.v4.app.FragmentActivity.onCreate(FragmentActivity.java:215)\n       at com.zoylab.keepintouch.ContactManager.onCreate(ContactManager.java:58)\n       at android.app.Activity.performCreate(Activity.java:5369)\n. @chemouna, Did you try with reversing the SavedState(Parcel in) and writeToParcel(Parcel out, int flags) as you mentioned above?\n. ",
    "xiaoli": "Thanks @naddaf and @pommedeterresautee . I made changes to meet my requirement based on @pommedeterresautee code, the admob adview of SMART_BANNER occupies 50dp height on the bottom of screen, so I have to take that into account:\njava\nprivate void centerfinalInListview(View v, ListView l) {\n        ...\n        int height = dm.heightPixels - 50 * (dm.densityDpi / 160);\n        ...\n    }\n. ",
    "jangrewe": "Thanks for the tip with the root layout, works like a charm!\n. nevermind, my bad!\n. ",
    "shawnlinboy": "Got my problem solved. THX!\n. ",
    "sergiandreplace": "Adding a comment for this.\nSomething similar was happening to me. Also, first half of items were not correctly collapsing when expanding other. After reading this, I've found that the list acts weird if the width and height are not fill_parent (or match_parent) both of them. Maybe will be nice to add a note in the readme.md instructions.\n. Worked for me too, otherwise it was crashing on going bakcground and coming back after the fragment has been destroyed. Should it be added to official code?\n. ",
    "CandidoCaballero": "Hello, I have an app with SlideExpandableListView (without fragments) and I also have a similar error.\njava.lang.RuntimeException: Unable to start activity ComponentInfo{...XXActivity}: java.lang.NullPointerException\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1651)\nat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1667)\nat android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:2836)\nat android.app.ActivityThread.access$1600(ActivityThread.java:117)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:939)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:130)\nat android.app.ActivityThread.main(ActivityThread.java:3687)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:507)\nat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:867)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:625)\nat dalvik.system.NativeStart.main(Native Method)\nCaused by: java.lang.NullPointerException\nat com.tjerkw.slideexpandable.library.SlideExpandableListView.onRestoreInstanceState(SlideExpandableListView.java:81)\nat com.tjerkw.slideexpandable.library.ActionSlideExpandableListView.onRestoreInstanceState(ActionSlideExpandableListView.java:1)\nat android.view.View.dispatchRestoreInstanceState(View.java:6278)\nat android.view.ViewGroup.dispatchThawSelfOnly(ViewGroup.java:1228)\nat android.widget.AdapterView.dispatchRestoreInstanceState(AdapterView.java:767)\nat android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:1215)\nat android.view.ViewGroup.dispatchRestoreInstanceState(ViewGroup.java:1215)\nat android.view.View.restoreHierarchyState(View.java:6257)\nat com.android.internal.policy.impl.PhoneWindow.restoreHierarchyState(PhoneWindow.java:1564)\nat android.app.Activity.onRestoreInstanceState(Activity.java:844)\nat android.app.Activity.performRestoreInstanceState(Activity.java:816)\nat android.app.Instrumentation.callActivityOnRestoreInstanceState(Instrumentation.java:1096)\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1629)\n... 12 more\n. Hello,\nI\u00b4m not sure if I\u00b4m doing something wrong, \nthis is the call\nActionSlideExpandableListView ExpandableListView;\n        ExpandableListView = (ActionSlideExpandableListView) findViewById(R.id.paired_devices);\n        MyCustomAdapter mPairedDevicesArrayAdapterNew = new MyCustomAdapter(\n                context, R.layout.expandable_list_item, mItems, activity);\n        ExpandableListView.setAdapter(mPairedDevicesArrayAdapterNew);\nThis is the adapter\npublic class MyCustomAdapter extends ArrayAdapter \n{\n    Activity activity;\n    String log=\"MyCustomAdapter\";\npublic MyCustomAdapter(Context context, int textViewResourceId, String[] objects, Activity activity) \n   {\n       super(context, textViewResourceId, objects);\n       this.activity=activity;\n   }\n```\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n    try {\n        // Inflate the layout, mainlvitem.xml, in each row.\n        LayoutInflater inflater = activity.getLayoutInflater();\n        View row = inflater.inflate(R.layout.expandable_list_item, parent,\n                false);\n    // Declare and define the TextView, \"item.\" This is where\n    // the name of each item will appear.\n    TextView item = (TextView) row.findViewById(R.id.title);\n    item.setText(ListDevicesBTActivity.mItems[position]);\n\n    TextView desc = (TextView) row.findViewById(R.id.desc);\n    desc.setText(ListDevicesBTActivity.mDescs[position]);\n\n    // Declare and define the TextView, \"icon.\" This is where the icon\n    // in each row will appear.\n    ImageView icon = (ImageView) row.findViewById(R.id.icon);\n    icon.setBackgroundDrawable(ListDevicesBTActivity.mIcons[position]);\n\n    ImageView icon2 = (ImageView) row.findViewById(R.id.icon2);\n    icon2.setBackgroundDrawable(ListDevicesBTActivity.mIcons2[position]);\n\n    ImageView sound = (ImageView) row.findViewById(R.id.sound);\n    if (ListDevicesBTActivity.mSound[position] != null\n            && ListDevicesBTActivity.mSound[position] == true)\n        sound.setVisibility(ImageView.VISIBLE);\n    else {\n        sound.setVisibility(ImageView.GONE);\n    }\n\n    ImageView deviceIcon = (ImageView) row.findViewById(R.id.device);\n    deviceIcon.setBackgroundResource(R.drawable.bluetooth);\n\n    return row;\n} catch (Exception e) {\n    String err = (e.getMessage() == null) ? \"error\"\n            : e.getMessage();\n    Log.e(log, err);\n    return null;\n}\n\n}\n```\n}\n. Hello JesseFarebro, \nI Implemented the adapter as you say but the problem is still there.\nAny other idea about what is the problem?\nThank you very much for your help.\n. ",
    "MattWilliams89": "Ditto:\njava.lang.RuntimeException: Unable to start activity ComponentInfo{org.MAW.yourclubfree/org.MAW.yourclubfree.Activity_Base}: java.lang.NullPointerException\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2081)\nat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2106)\nat android.app.ActivityThread.access$700(ActivityThread.java:134)\nat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1217)\nat android.os.Handler.dispatchMessage(Handler.java:99)\nat android.os.Looper.loop(Looper.java:137)\nat android.app.ActivityThread.main(ActivityThread.java:4856)\nat java.lang.reflect.Method.invokeNative(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:511)\nat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1007)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:774)\nat dalvik.system.NativeStart.main(Native Method) Caused by: java.lang.NullPointerException\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter.writeBitSet(AbstractSlideExpandableListAdapter.java:269)\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter.access$400(AbstractSlideExpandableListAdapter.java:22)\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter$SavedState.(AbstractSlideExpandableListAdapter.java:290)\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter$SavedState.(AbstractSlideExpandableListAdapter.java:279)\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter$SavedState$1.createFromParcel(AbstractSlideExpandableListAdapter.java:304)\nat com.tjerkw.slideexpandable.library.AbstractSlideExpandableListAdapter$SavedState$1.createFromParcel(AbstractSlideExpandableListAdapter.java:302)\nat android.os.Parcel.readParcelable(Parcel.java:2103)\nat android.os.Parcel.readValue(Parcel.java:1965)\nat android.os.Parcel.readSparseArrayInternal(Parcel.java:2255)\nat android.os.Parcel.readSparseArray(Parcel.java:1687)\nat android.os.Parcel.readValue(Parcel.java:2022)\nat android.os.Parcel.readMapInternal(Parcel.java:2226)\nat android.os.Bundle.unparcel(Bundle.java:223)\nat android.os.Bundle.getSparseParcelableArray(Bundle.java:1232)\nat android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:845)\nat android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1088)\nat android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1070)\nat android.support.v4.app.FragmentManagerImpl.dispatchCreate(FragmentManager.java:1856)\nat android.support.v4.app.FragmentActivity.onCreate(FragmentActivity.java:210)\nat org.MAW.yourclubfree.Activity_Base.onCreate(Activity_Base.java:40)\nat android.app.Activity.performCreate(Activity.java:5047)\nat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1094)\nat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2045)\n... 11 more\n. ",
    "josejuansanchez": "Hi,\nI got a null pointer exception at the same line (298 in AbstractSlideExpandableListAdapter.writeBitSet) and in the same situations.\nHas anyone solved this problem?\nThanks!\n. ",
    "marcorighini": "At the moment this bug has not been fixed. I hope it will be soon.\n. What's the easy fix for the first problem, the one related to v4 support library?\n. @tjerkw no news for fixing the first problem? \n. @tjerkw \nSorry, i've understood that the fix was really easy so I asked you :)\nIf I'll fix it, I'll release the patch.\n. ",
    "dabluck": "@marcorighini I'm dealing with this currently. Did you resolve it in your project?\n. We just used the blog post that inspired the library to write our own custom solution rather than spend more time trying to debug this. http://udinic.wordpress.com/2011/09/03/expanding-listview-items/\n. ",
    "DerSchimi": "Hey.\nI am also facing ths problem. Can anybody give me a hint how to fix this? Thanks.\n. ",
    "tompaperbagltd": "A dirty fix for this problem is to do a check to see if the list adapter is empty. If it is create a test list item and populate the list with it, then set the list visibility to gone. \n. It seems to work on mine now, Thanks!\n. ",
    "chemouna": "a possible solution is to simply initialize openItems in SavedState with an instance of BitSet instead of null : \nIn SavedState (in AbstractSlideExoandableListAdapter#310) : \npublic BitSet openItems = new BitSet();\n. @satyadeepk you're right , i dont know if this is the same problem as yours but somehow in my SavedState implementations of SavedState(Parcel in) and writeToParcel(Parcel out, int flags) was somehow reversed, instead it should be : \n```\n private SavedState(Parcel in) {\n        super(in);\n        lastOpenPosition = in.readInt();\n        openItems = readBitSet(in);\n    }\n@Override\npublic void writeToParcel(Parcel out, int flags) {\n    super.writeToParcel(out, flags);\n    out.writeInt(lastOpenPosition);\n    writeBitSet(out, openItems);\n}\n\n```\n. ",
    "ahmadalinasir": "Hi,\nI had the same issue. I was using Nested Fragments inside a ViewPager. \nI simply used 2 things and the issue was fixed.\n1) extended my PagerAdapter by FragmentStatePagerAdapter instead of just FragmentPagerAdapter\n2) and in my parent fragment I just added this mViewPager.setOffscreenPageLimit(4);  //4 is the number of nested fragments.\nFYI my app architecture is \nNavigationDrawer\n    Fragent  [ViewPager]\n        Fragment_A  [SlideExpandableListView]\n        Fragment_B  [SlideExpandableListView]\n        Fragment_C  [SlideExpandableListView]\n        Fragment_D  [SlideExpandableListView]\nHope it helps someone...\n. ",
    "wrf566": "how to fix this error ? who can tell me please\n. ",
    "hamzaawwad": "how to fix this bug?\n. yes its fixed I updated the library thanks alot \n. ",
    "alepage": "I'm interested to do that too and I have found no way. \nAn answer will be very appreciated :)\n. Ok, it happened because I have set a layout width of 0dp on my ActionSlideExpandableListView, set the layout width to a non-zero value has resolved the problem.\n. ",
    "ghost": "Well, I didn't find anyway except passing my Activity object in the constructor and calling a method in my Activity in the method private void enableFor(final View button, final View target,final int position) in the AbstractSlideExpandableListAdapter where you can find a clicklistener for the button in this method.\n. ",
    "ofdrykkja": "you can perform that by extending button class:\n``` java\npublic class ToggleExpandableMenuButton extends ImageButton {\nprivate ToggleListener listener;\n\npublic ToggleExpandableMenuButton(Context context) {\n    super(context);\n}\n\npublic ToggleExpandableMenuButton(Context context, AttributeSet attrs) {\n    super(context, attrs);\n}\n\npublic ToggleExpandableMenuButton(Context context, AttributeSet attrs, int defStyle) {\n    super(context, attrs, defStyle);\n}\n\n@Override\npublic boolean performClick() {\n    if (listener != null) {\n        listener.toggle();\n    }\n    return super.performClick();\n}\n\npublic void setToggleListener(ToggleListener listener) {\n    this.listener = listener;\n}\n\npublic static interface ToggleListener {\n    public void toggle();\n}\n\n}\n```\n. ",
    "supareek": "I tried using SlideExpandableListAdapter.setItemExpandCollapseListener(...) passing a new ItemExpandCollapseListener. But it did not work.\nThe listener is coming as null in the SlideExpandableListAdapter.notifiyExpandCollapseListener() even though I had set it as above.\nThis is how I am setting the adapter in the list view \nlistView.setAdapter(new SlideExpandableListAdapter(adapter, R.id.expand_toggle_button, R.id.expandable));\nAny ideas @tjerkw , why the listener is coming as null? Is it because the setAdapter is wrapping the   adapter again?\n. ",
    "robertotucci": "I've tried this code but doesn't works;\nnew AbstractSlideExpandableListAdapter.OnItemExpandCollapseListener() {\n            @Override\n            public void onExpand(View itemView, int position)\n            {\n               // Code\n            }\n            @Override\n            public void onCollapse(View itemView, int position) \n            {\n                  //Code\n            }\n        };\nAre there solutions to fix the issue?\nThanks!\n. Hi @reisub,\nsorry for intromission but, can I see an sample code (very short) to call the event in my code, please?\nThanks!!\n. Thanks so much @reisub !!! :)\nI have a last question: I've tried your code but the event is not called...\nThis is my code but I don't undestand where I wrong (buildDummyData() return a ListAdapter):\n``` java\nActionSlideExpandableListView list = (ActionSlideExpandableListView)view.findViewById(R.id.listWeek);\n        list.setAdapter(buildDummyData());     \n    AbstractSlideExpandableListAdapter.OnItemExpandCollapseListener expandCollapseListener = new AbstractSlideExpandableListAdapter.OnItemExpandCollapseListener() {\n\n        @Override\n        public void onExpand(View itemView, int position)\n        {\n            Toast.makeText(getActivity(),\"number \" + String.valueOf(position),Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onCollapse(View itemView, int position)\n        {\n            // do other stuff\n        }\n    };\n\n    SlideExpandableListAdapter slideExpandableAdapter = new SlideExpandableListAdapter(list.getAdapter());\n    slideExpandableAdapter.setItemExpandCollapseListener(expandCollapseListener);\n\n```\n. @reisub thanks!! It works! You're awesome! You saved me! I lost a lot of time to find the solution and you helped me! Thanks man! :)\n. ",
    "timonchev": "also this issue....\n. ",
    "chenchongyu": "also this issue....\n. @reisub  @robertotucci \nI'm sorry,but I have the same problem.Here is my code.\n```\n   mListView = (ActionSlideExpandableListView) findViewById(R.id.file_path_list);\n   OnItemExpandCollapseListener expandCollapseListener = new OnItemExpandCollapseListener()   {\n        @Override\n        public void onExpand(View itemView, int position) {\n            showMsgToast(\"onExpand position:\"+position);\n            ((ImageView)itemView).setImageResource(R.drawable.icon_collapse);\n        }\n    @Override\n    public void onCollapse(View itemView, int position) {\n        showMsgToast(\"onCollapse position:\"+position);\n        ((ImageView)itemView).setImageResource(R.drawable.icon_expand);\n    }\n};\n\nmAdapter = new FileBrowserCursorAdapter(this, list,mCurrentPath);\nslideAdapter = new SlideExpandableListAdapter(mAdapter);\nslideAdapter.setItemExpandCollapseListener(expandCollapseListener);\nmListView.setAdapter(slideAdapter);\n\nmListView.setItemActionListener(this);\n\n```\nthe event is not called too.Help!!\n. #108  look at my answer here.\n. My solution like  this.\nDefined  a view extends ImageView called ToggleExpandableMenuButton,There is an interface in it.\npublic interface ToggleListener {\n        void toggle();\n    }\nOverride the method performClick(){\n if (listener != null) {\n            listener.toggle();\n        }\n}\nAnd set a ToggleListener on your ToggleExpandableMenuBotton in your adapter.\nIf I don't talk it clear ,download the attachment and change the suffix to '.java' or leave ur email here.\n\n. ",
    "xsjqqq123": "also this issue....\n. +1\n. ",
    "hadidez": "also this issue....\n. i have this problem too\n. ",
    "songzhiyong": "I'm sorry to trouble you ,but I have already opened the issue here https://github.com/tjerkw/Android-SlideExpandableListView/issues/39 i don't kow why you received in your mail box.\n. Thanks for your reply. My final solution is writing the layout with java code rather than the xml, then it works like charm. It's so weird and thanks all the same.\n. ",
    "reisub": "Cool, thanks! :)\n. Hi @robertotucci ,\nyou can use it like this:\n``` java\nListView listView = view.findViewById(R.id.list_view);\nOnItemExpandCollapseListener expandCollapseListener = new OnItemExpandCollapseListener() {\n@Override\npublic void onExpand(View itemView, int position) {\n    // do stuff\n}\n\n@Override\npublic void onCollapse(View itemView, int position) {\n   // do other stuff\n}\n\n};\nSlideExpandableListAdapter slideExpandableAdapter = new SlideExpandableListAdapter(new MyAdapter(context, items));\nslideExpandableAdapter.setItemExpandCollapseListener(expandCollapseListener);\nlistView.setAdapter(slideExpandableAdapter);\n``\n. @robertotucci You wrap your in the SlideExpandableListAdapter, but you never set that wrapped adapter on the list withsetAdapter`. I edited the example in my previous comment to show this, too. Also, if you use the SlideExpandableListAdapter, you can use a regular ListView - there are multiple ways to use this library.\n. ",
    "lingguohui": "Did you find the solution to this problem???\n. ",
    "MrDoLoop": "Can you add new features?\nWhen the last item in the list is expended, is it possiable that smoothly scroll up some distance, in order to let expandable area visible.\nThanks\n. Thanks so much for your attention.\nCould you share me some pieces of snippet? I never used ViewTreeObserver\nbefore\nAppreciate your attention.\n2013/12/2 Kevin Quan notifications@github.com\n\n@MrDoLoop https://github.com/MrDoLoop I had a similar requirement but I\nwas able to get around it without editing the library code by adding an\nOnClickListener on the view and then using a ViewTreeObserver to scroll up\nthe list as needed if the height of the expanded list item exceeds the\nbottom of the list.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tjerkw/Android-SlideExpandableListView/pull/51#issuecomment-29593168\n.\n. \n",
    "kquan": "@MrDoLoop I had a similar requirement but I was able to get around it without editing the library code by adding an OnClickListener on the view and then using a ViewTreeObserver to scroll up the list as needed if the height of the expanded list item exceeds the bottom of the list.\n. ",
    "tmsbn": "I haven't done this myself but maybe this guide can help you. Cheers!\nhttp://chris.banes.me/blog/2013/08/27/pushing-aars-to-maven-central/\n. ",
    "rekire": "Any progress?\n. Do you have a time plan for uploading it to maven? I cannot find your lib at http://search.maven.org/#search|ga|1|com.tjerkw\nI got it managed to upload my first own android archive to maven. I will upload it soon into my repo. If you are interested in my gradle file just leave a message.\n. After some research it is easy. See my gradle file:\nhttps://github.com/rekire/EditMail/blob/develop/EditMailLibrary/build.gradle\nI just changed some small things like using the block around line 111\nYou also need to create a gradle.properties in ~/.gradle with a content like this:\n```\nsonatypeUser=\nsonatypePass=\nsigning.keyId=\nsigning.password=\nsigning.secretKeyRingFile=\n```\nFor uploading that to maven see this:\nhttps://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\n. I don't agree with you. This library is very generic, you can customize almost everything just that ids are hidden.\n. Sorry for the whitespace trouble. I'm using a new IDE and I don't know yet how to change that, btw this was my first pull request :-)\n. I'm not absolutly sure, but I would try checking in .idea/codeStyleSettings.xml. If I remember correctly, that file containes the formatting settings. So if the contibutor uses Android Studio or IntelliJ and (s)he autoformats the code it should results what you want.\n. Dub of #77\n. I just checked it. When I copy my gradlew.bat and local.properties to the root directory of this repo, I can run gradlew aR without any issues. So what is wrong?\n. ",
    "reid-harrison": "Yes, please try to follow rekire's suggestion. It is just called \"Maven Central Repository\" but by deploying artifacts there, other gradle users can easily add a new dependency since it is on maven central. Thanks!\n. ",
    "haoyuexing": "what the hell ...  look at the #50 ... T_T\n. ",
    "Lonli-Lokli": "Maybe it'll be enough to remember the view height after the first animation?\n. ",
    "julioz": "I've seen other libraries using onPreDrawListener for this kind of calculation, maybe it is the way to treat this.\n. ",
    "fsbarata": "I'm managed to fix it.\nAbstractSlideExpandableListAdapter.java\n```\npublic View getView(int position, View view, ViewGroup viewGroup) {\n        this.parent = viewGroup;\n        view = wrapped.getView(position, view, viewGroup);\n        final View finalView = view;\n        final ViewTreeObserver viewTreeObserver = view.getViewTreeObserver();\n        viewTreeObserver.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {\n            @Override\n            public boolean onPreDraw() {\n                finalView.getViewTreeObserver().removeOnPreDrawListener(this);\n                enableFor(finalView, position);\n                return true;\n            }\n        });\n    return view;\n\n}\n...\npublic void enableFor(View parent, int position) {\n        View more = getExpandToggleButton(parent);\n        View itemToolbar = getExpandableView(parent);\n        enableFor(more, itemToolbar, position);\n}\n```\n. ",
    "hyyaoming": "hello,Did you solve this problem?\n. ",
    "GRyabkin": "No, I used my own implementation. ",
    "mousewithjetpack": "I had a similar problem when deleting an item.  One of the buttons in the expanded child was a delete button that removes a Person object from my people ArrayList and is supposed to remove that entire row from the list.  Here is what I did in onClick:\npeople.remove(position);\nadapter = new PersonArrayAdapter(people);\nlist.setAdapter(adapter);\n((ActionSlideExpandableListView) list).collapse();\nAt first, instead of lines 2 and 3 above, I was just calling:\n((ArrayAdapter<String>) adapter).notifyDataSetChanged();\nbut this results in a bug where the delete button in the new row that moves up to fill that space has its text left-justified.\nSo essentially I'm recreating the adapter with the modified ArrayList, then re-setting the new adapter to the list.\nIf anyone has a better solution for this I would like to hear it too!\n. ",
    "xarlotie": "Have you found a solution for this one?\n. Just clean the projects (lib and demo) then rebuild. It should work fine after that.\n. I just cleaned the projects and rebuild. Works fine after that.\n. i just did this. Works fine for me now.\njava\nif (!visible) {\n    int movement = target.getBottom();\n    listView.smoothScrollBy(movement, getAnimationDuration());\n} else {\n    if (r2.bottom == r.bottom) {\n        int movement = target.getTop();\n        listView.smoothScrollBy(movement, getAnimationDuration());\n    }\n}\n. ",
    "lorenzos": "That's necessary, it should be merged, I was searching for it. Thanks.\n. Same problem here. The listener is null, and I can't get why! Why is it closed?\n. Ok, I think I got it. In SlideExpandableListView.java line 44 a new SlideExpandableListAdapter is initialized, but instead documentation says that we are supposed to instantiate and pass it.\nIn README.md line 93:\n\nWrap your ListAdapter\nlist.setAdapter(new SlideExpandableListAdapter(adapter, ...));\n\nBut in code:\npublic void setAdapter(ListAdapter adapter) {\n    this.adapter = new SlideExpandableListAdapter(adapter);\n    super.setAdapter(this.adapter);\n}\nBasically our custom SlideExpandableListAdapter, the one with our expand/collapse listener, is wrapper into another, new SlideExpandableListAdapter, which has no listener obviously.\nThis is a major issue in my opinion. If you think about it, the list adapter is wrapped two times with no reason at all. We should change the code (i.e. assigning the SlideExpandableListAdapter directly, without wrapping it) or the documentation (i.e. it should be said that we must pass the normal list adapter, not the SlideExpandableListAdapter, but then provide a getSlideExpandableListAdapter() method, so we can grab it and set our listener).\nI'm ready to provide a pull request, but there's a choice to be made, and it must be made by @tjerkw \n. Hi @MarcoMirisola \nI didn't provide a pull request because I proposed two solutions that work both, but are different in architecture. I was waiting for a reply by @tjerkw on which is its favourite, and then I forgot this at all.\nFirst proposed solution\nRemove both the setAdapter methods in the SlideExpandableListView class and replace them with:\njava\npublic void setAdapter(SlideExpandableListAdapter adapter) {\n    this.adapter = adapter;\n    super.setAdapter(this.adapter);\n}\nSecond proposed solution\nIf I remeber well, I ended up chosing this one. \nAdd the following method in the SlideExpandableListView class:\njava\npublic SlideExpandableListAdapter getSlideExpandableListAdapter() {\n    return adapter;\n}\nChange the setup code in your application from:\njava\nlist.setAdapter(new SlideExpandableListAdapter(adapter, ...));\nTo:\njava\nlist.setAdapter(adapter, ...);\nNow, when you want to attach the listener, you do on it the instance returned by the new method, not on your original adapter:\njava\nlist.getSlideExpandableListAdapter().setItemExpandCollapseListener(...)\n. ",
    "SathishAndroid": "Hi expand by default is possible. Just add this code from your AbstractSlideExpandableListAdapter.java\npublic AbstractSlideExpandableListAdapter(ListAdapter wrapped) {\n    super(wrapped);\n    lastOpenPosition = 0;\n    openItems.set(lastOpenPosition, true);\n}\nIf you added this code, then your first item is expanded by default.\n. ",
    "liuzhitao2000": "thanks @JesseFarebro @SathishAndroid :D\n. ",
    "qianjin": "I closed it because this problem is listview in  listview the in listview height can not get ,I set the listview by code and it works fine .\n. ",
    "colabug": "+1\n. Any pointers here? Best I've found so far is a fork providing the library, but I'm not sure if it's the same:\ncompile(group: 'it.sephiroth.android.library.fork.slideexpandable', name: 'slideexpandable', version: '1.0.3.1', ext: 'aar')\n. ",
    "tkhduracell": "+1\n. ",
    "davityle": "+1\n. ",
    "sajith666": "+1\n. ",
    "abhimanyu209": "+1\n. ",
    "sowrabh": "+1 :+1:\n. ",
    "ericmuigai": "+1\n. ",
    "silviahisham": "+1\n. I have the same problem, did anyone find a solution for this?\n. ",
    "arnaldog": "+1 :+1: \n. ",
    "eliasbagley": "+1\n. ",
    "amanjain08": "Follow this link : http://www.truiton.com/2015/02/android-studio-add-library-project/\n. ",
    "TheAnimatrix": "You have to import the library too , after you've done it then goto project properties of library and check if it is marked as \"is library\" and now goto the example activity and goto its properties and add the library . :D \n. ",
    "deepakcipl": "ANy update on this please??\n. ",
    "zourb": "I got the same thing, @mousewithjetpack  have u solved the problem? thanks.\n. ",
    "emanuele2606": "Sorry but what is the gradle dependency to use this library? \nI wasn't able to find it.\nThanks\n. ",
    "Cocosnake": "I want to change the icon of the toggle button, how to make it work?\n. ",
    "guicamest": "Hi, any news on this?\n. ",
    "samkazmi": "Please Help....!\n. Yeah..... \nalthough not using it anymore....\n. Now my work is done... \nThank you for replyin anyways \nSent from my iPhone\n\nOn Nov 25, 2014, at 2:44 PM, \"xarlotie\" notifications@github.com wrote:\nI just cleaned the projects and rebuild. Works fine after that.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nope\n. \n",
    "zhaoyubin2012": "i hava the same question.........\n. We can find this demo  on other website and it doesn't the question\n. ",
    "arkangelx": "Please has this issue been fixed?\n. ",
    "Logan676": "I have the same problem, does anyone fixed this?\n. ",
    "Suresh94": "i have tried your code \"better scroll animation when items expands\" but no change ...the expandable list is  still hiding up.....can i get any alternate code for dat. ",
    "THEONE10211024": "You are right ,this would be a much better way !\n. ",
    "leeminyong": "Thank you \n. ",
    "MarcoMirisola": "Hi @lorenzos could you please show us the solution? I can't figure out how to resolve this issue.\nThanks\n. Thanks @lorenzos! I've used your second solution and it works perfectly. I hope @tjerkw replays you.\n. ",
    "configurer": "is this issue already solved or what ? How can anyone doing? any workaround ?. "
}