{
    "loganfsmyth": "This was auto-closed because this repo has been updated to include the Git history from the main Babel repo. It doesn't actually look like Github will let me re-open it? I can't speak to the validity of this PR, but it appears you'll need to rebase and open a new one.\nThe new force-pused master branch should be identical to the old one, so you should be able to use rebase --onto or cherry-pick to move your commit over.\n. @kuu Sorry you didn't get a quicker answer, tagging is important on SO since it is what people use to find things, make sure you read the description of a tag before using it . You originally used\n- babel - You meant to use babeljs. The babel tag has the following description:\n\nPython internationalization library with an emphasis on web-based applications. For questions about the JavaScript library, please use [babeljs].\n- jsx - You meant to use react-jsx, the jsx tag has the following description:\nJSX is an open source programming language, or an AltJS with classes and static types. The source code is compiled into JavaScript which is highly optimized. \n\nSomeone would have found it eventually, but if you expect quick answers people have to find your question first :)\n. This was auto-closed because this repo has been updated to include the Git history from the main Babel repo. I can't speak to the validity of this PR, but it appears you'll need to rebase and open a new one.\nThe new force-pused master branch should be identical to the old one, so you should be able to use rebase --onto or cherry-pick to move your commit over.\n. This was auto-closed because this repo has been updated to include the Git history from the main Babel repo. I can't speak to the validity of this PR, but it appears you'll need to rebase and open a new one.\nThe new force-pused master branch should be identical to the old one, so you should be able to use rebase --onto or cherry-pick to move your commit over.\n. @lukehorvat If you want plugins, I'd be much prefered to make a fork and encourage people to use that. Your module inserts a new line at line 48. Not only is that extremely fragile, but it means if something breaks, the Babel team are the ones who get to field all of the support requests for it, because it's impossible for users to know that something has broken due to their use (or a dependency's use) of babby.\nIt's already a huge burden for our small team of volunteers to support the Babel ecosystem. I understand, I really do, but having people in the community you're trying to support actively circumventing your wishes with is super demotivating. We're doing our best, but we're just not in a place where it's realistic for us to support plugins right now. Pretending we are by hacking stuff into Babylon helps no-one.\nIf you want to continue maintaining this, it would be great put a warning at the top of the README saying it could break at any moment, and change your \nlines.splice(48, 0, 'exports.Parser = _parser2[\"default\"];');\nto\nlines.splice(48, 0, 'try {exports.Parser = _parser2[\"default\"]; } catch (e){ throw new Error(\"Babby has failed to patch Babylon, please file an issue on https://github.com/lukehorvat/babby\"} ');\nso that if something does go wrong, Babylon isn't stuck handling all your support requests.\n. Yeah I have no idea what the expectation was. When I originally directed you here I thought that the spec had already been updated to cover this. If it hasn't, I'm not sure there is much we can do until there's an official spec decision.\n. It is a keyword though, right? It's just that in this instance, a keyword is allowed as a name, it doesn't make the token less of a keyword token.\n. See the discussion in https://github.com/babel/babylon/pull/5\nFor now, making parsing pluggable is something we've explicitly decided we don't want to support because it we'd then have to take the possibility of breaking existing plugins into account with any and all changes we make to Babylon.\n. Sorry, I raised this on our internal chat when you originally filed this, but it appears I forgot to comment here, woops!\nThis is because we accidentally didn't transition over our scripts to bundle Babylon together into a single file. Pre-6.8.x, Babylon was processed with browserify before being published, which meant that it didn't actually have any require calls in it, but also meant that Webpack complains when trying to package it.\nYou likely have noParse: /babylon/ in your webpack config to tell webpack to not complain, but that also means that webpack will not walk through the file looking for require calls. Then we released 6.8 without the browserify bundling, which means we started having require calls again.\nWe either need to add the browserify bundling back in, or if we decide we don't want that, you should remove noParse from your config. I wouldn't recommend doing that until we make a call on whether to add Browserify again on our end though.\n. Maybe @jmm can chime in, I was under the impression there was a way to bundle your local files without bundling node_modules, but I may be wrong.\n. This one was not obvious to me at first either, but this isn't a Babylon issue, you're getting just what you asked for, whether it's what you intended or not :P\nThe backslashes in your example are never making it to Babel, they are getting processed by the template literal up front. You'd either need\n``\nvar code =\nvar multilinestring = \"x\\n\\\n\";\n`\n```\nor\n``\nvar code = String.raw\nvar multilinestring = \"x\\n\\\n\";\n```\n. There's no line terminator allowed betweenasyncandfunction, but it doesn't look like there is a restriction betweenawaitand it's expression. I assume because the expression is required, whereas withyield` it is required.\n. Not really a direct answer, but FYI Babel's AST format is documented here: https://github.com/babel/babel/blob/master/doc/ast/spec.md. We should probably move that to this repo though.\nBabel's format is based on Acorn, but does not attempt to correspond directly with ESTree.\n. This would definitely need to be part of the official spec before we're likely to accept it.\n. Sorry, I guess I could have made this clearer in https://github.com/babel/babylon/pull/61. We're not really looking to add one-off syntax extensions to Babylon. At this point we support JSX and Flow as kind of grandfathered-in extra syntax, but otherwise Babylon is only really aimed at supporting officially proposed features for the ECMAScript specification.\n. This is expected behavior per the spec. You'd get a syntax error from that in all ES6 environments. You'll need to add parens around it, e.g.\nreturn true === (yield this.choose({choices: [true, false]}))\n. I know flow supports this now, is this waiting on more changes, or has it just been forgotten?. Are you setting sourceType: 'script'or using it in a file with use strict? Legacy octal syntax only works in non-strict code.\n. To note for anyone else coming across this, 042 is not a valid number format in strict-mode code, but you can do 0o042 which is the official specced way to write octal numbers, which matches up with 0x22 would be the value in hex and 0b00100010 would be the value in binary.\n. Looks like this is an issue with the new export name duplicate checking, sorry about that. The new logic doesn't handle destructuring in exported variable declarations properly.\n. @kaicataldo No problem, it happens.\n. LGTM pending green tests.\n. Haven't looked into the PR implementation, but I'll verify it seems like the newline should be allowed there since the spec explicitly marks things with [no LineTerminator here] in the grammar where newlines aren't allowed and http://www.ecma-international.org/ecma-262/7.0/#sec-method-definitions doesn't have that in the grammar.\n. Performance is a tough. While a rewrite is always an option to optimize, at the moment Babylon is not the bottleneck in Babel's performance for the majority of usecases (mostly small files), so optimizing Babylon likely have a minimal effect on overall transpilation performance, and is unlikely to be a priority at the moment. For larger files, you may be right, I don't actually know, but large files are a relatively uncommon usecase for the average Babel workflow.\n\nNode.js is pretty terrible language\n\nNot to nitpick, but not a language :P\n. My biggest concern is that there are no hard numbers backing this discussion. Reimplementing anything in another language is a ton of work, and without numbers, there's little to say that it wouldn't be better to just reimplement small parts of the codebase in other languages, or even just keep them in JS and optimize them.\nOne of my pet-peeves for instance is sourcemap processing, which is very CPU-bound. Maybe it could be reimplemented in another language, but maybe it could just be left in JS but rearchitected to avoid the unneeded processing entirely.\n. babel-traverse would be the normal way.\n. Personally I'd wrap it in parens and go with that, e.g.\nbabylon.parse('(' + expr + ')').program.body[0].expression\nI'm somewhat hesitant to add an API for this since it's easy enough to do with the existing one.\n. > The ability to parse an expression with performance in mind is needed\nThis particular motivation seems to be making a lot of assumptions about performance with no data to back it up, I'd be quite surprised it it made that much of a difference.\nSince I don't want to shut this down outright, can you help me understand the usecase for parsing individual expressions explicitly, where there won't be statement-level syntax in place to allow parsing using the existing statement parser?\nI'm definitely hesitant on this, since expressions on their own don't really have a parser target in the JS language grammar, so parsing a standalone expression ends up needing more flags, e.g. is the snippet strict? is it a module or script? Can it have yield? Can it have await?\n. .babelrc options apply to the file content being transformed by Babel itself. The error you are seeing is from\nlet compileImportTemplate = template(`\n    import { IMPORT_NAME } from SOURCE;\n`);\nyou need to do\nlet compileImportTemplate = template(`\n    import { IMPORT_NAME } from SOURCE;\n`, {sourceType: 'module'});\nexcept that won't work because SOURCE is not valid ES6 syntax. The module path needs to be a string to parse properly, so you can't use it like this with template.\n. Keep in mind my last point though:\n\nThe module path needs to be a string to parse properly, so you can't use it like this with template.\n\nbecause now 'SOURCE' is just a string containing the word SOURCE, not a replaceable identifier that babel-templates knows how to handle with the types.stringLiteral(\"./a/b/c\"), replacement. You'll have to set the source string manually after you get the AST back from your template function.\n. Will this be breaking for cases like\nclass Foo {\n    @decorators['foo']\n    bar(){}\n}\n?. Breaking changes are something we need to figure out in Babel and Babylon. This kind of thing makes me wonder if we should add a decorators2016 plugin and leave the current one as-is or something, since we can't really make breaking changes to the existing logic and bumping to 7.x would have its own set of downsides.. I didn't realize we supported function expression decorators, are you sure?. This does indeed seem like a bug. Just a general note, any fix for this needs to take https://github.com/babel/babylon/blob/48873f886aa91c4d250ccce0c5e220c82f538f11/src/plugins/flow.js#L1050 into account. If I had to guess, that's the motivation for the current behavior.\nYou can do\nclass Foo {\n    prop: string;\n}\nwith only flow turned on, without classProperties.. t.identifier('{a: 1, b: 2, c:3}') is definitely not an approach I'd recommend since an object is not an identifier and it's entirely possible that would start to throw an exception at you at some point if we add more validation.\nThe issue with your current code is that\npath.node.expression.arguments.push(ast);\n\nshould be\npath.node.expression.arguments.push(ast.expression);. ```\n\ntemplate(({a: 1, b: 2, c: 3}));\nis just\ntemplate(({a: 1, b: 2, c: 3}););\n```\nwith because template parses statements, not expressions. e.g. ast.type === 'ExpressionStatement', if you want the object itself, you need to access the value of the expression statement.. Thanks for the suggestion, we can certainly do better here.\nFYI, it's not just expressions, you can also use function and class declarations, so you could do\nexport default function MyComponent() {\n    return `<div class=\"foo\">HI</div>`;\n}. 100% agreed :). (Edit) Nevermind, my test case was wrong :P. For the context of babel-templates it feels like this API might be nicer as providing a default context, like \"parse as if you're already inside a function\" and \"parse as if you're already inside a loop\" since that focuses on the standard spec behavior, rather than having the flag focus on breaking standard parsing rules.\nThoughts?. > are you saying either or or both?\nAssuming I'm understanding your question, I think either-or?\nbabel-templates already takes options that pass through to Babylon, so my proposal would be an attempt to generalize cases where parsing as if it had a given parent, which is kind of like what you seem to be looking to solve.\nWhat I had in mind would be like\n```\noptions = {\n  context: {\n    // Same as \"allowReturnOutsideFunction\"\n    function: true,\n// Same as \"allowSuperOutsideMethod\"\nmethod: true,\n\n},\n};\n```\nthen your case we could do\n// Parse, allowing break and continue\nloop: true\nWe just landed .parseExpression but you could imagine that being\n// Parse, assuming the parser is already in an expression\nexpression: true\nas a replacement for that.\nSimilarly, we probably want\n```\n// Parse \"yield\" without explicit wrapper \"function*(){ ... }\"\ngenerator: true,\n// Parse \"await\" without explicit wrapper \"async function(){ ... }\"\nasync: true,\n```. @Me1000  I'm curious, since you run each section through babel separately, do you not run into issues where Babel has renamed things? Take for example two snippets with\n```\nvar fn = function(){\n  console.log(fn);\n}\nfn = function(){};\n```\nfn();\nI'd expect that to fail because Babel renames fn in the first snippet to _fn and the second snippet has no way to know about that.. Okie doke, cool, just wanted to make sure since compiling separate snippets is not something we officially guarantee to work because of the renaming and such.. I'm not sure I understand your comment about the token, but I can say that the lack of parens is expected. They are not needed.. ASTExplorer is currently configured to use a different parser configuration than standard Babel: https://github.com/fkling/astexplorer/pull/161\ncc @hzoo . Gotcha, yeah recast attempts to preserve formatting but babel-generator does not, so that is why you see different behavior for this example.. Ah definitely is, not sure how I missed that.. Given that the error is from inside babel-jsxgettext, if I had to guess, that module does not take into account Babel plugins and such. You'd have to see if it exposes a way to handle class properties and such.. I'll second performance. The super change could certainly introduce performance changes since it has to look up the prototype chain instead of calling a reference to the function it already has.\nThat said, I don't have a problem with the structure. I think having the node types in their own file is inevitable since they are used all over the place, and the class extension + mixin approach is a little weird, not doesn't seem too bad to me.. Currently the concern is all for Stage < 4 functionality. Take decorators for instance, we currently have the old decorators spec exposed as the decorators plugin, but we'd like to add the new spec. Since we want people to actually upgrade to Babel 7, we can't replace the old decorators with the new one as a breaking change, so instead we're likely going to add a second decorators plugin for the new spec language.\nIf we expose * that will cause a conflict between the plugins.\nOne option that comes to mind is that we could publish a babel-babylon package that would automatically enable your plugins based on your .babelrc. Now sure how people feel for that.. Spec text is hard to read, but it is https://www.ecma-international.org/ecma-262/7.0/#prod-annexB-NonOctalDecimalIntegerLiteral\nThe important part is 08 is 8 and 09 is 9 AFAIK.. Yeah in a perfect world we'd have both BindingPattern and AssignmentPattern that break down to BindingIdentifier|ObjectBindingPattern|ArrayBindingPattern and ReferencedIdentifier|MemberExpression|ObjectAssignmentPattern|ArrayAssignmentPattern :(. I don't think this should be an error even with Flow. Ideally we'd look to see if it is followed by from otherwise take the Flow parsing branch?. Ah right, I didn't connect that it was the experimental proposal. You have a  fair point on it being an edge case. Do you have a sense for how easy it would be to handle like I mentioned? If it's a pain I'm fine leaving it for now.. @danez Assuming I'm understanding the planned behavior in Node right, require and the others like module.exports and such will not exist inside an ES module. That means if you want to use require you'd have to be write a CommonJS module, and then import that from your ES6 module.\nI'm still on the fence about adding that restriction to Babel as default in 7.x, may just be an opt-in flag. Webpack 2 does not implement the restriction of using require, but they do disallow using exports alongside ES6 module syntax, so that we should probably do at least.\nEither way I do think it's beneficial for Babel to default to \"auto\", because it means that people don't need to explicitly set sourceType. Most people don't know about it, and Babel doesn't currently expose a way to toggle it based on extension or something, so you can't mix and match in a codebase. With auto, if you run Babel on a file without import or export, we can stop automatically adding use strict and we won't automatically add .__esModule and we won't replace this with undefined, which are all problems people tend to hit unexpectedly because most people don't know about the grammar split.. I think having it opens up options for people, but I agree that I care less what the default is. I think in a perfect world script would be the default for .js with sourceType in Babel's config making it configurable and .mjs would be module without it being configurable.\nMy motivation for proposing it as a default is that Babel's current module default isn't ideal and forcing it to script in 7.0 feels like a pain for most users.\nThat said, defaulting to script with auto being exposed as an option might not be the end of the world?\n. This is indeed a regression due to a change in babel interacting with babylon in an unexpected way. https://github.com/babel/babel/pull/5590 is one possible fix.. Weird. I'm not able to reproduce that on my end.. That sounds like things didn't link properly in Babel. That's definitely a function, but not in babel-register@7.x, not in babel-register@6.x so if things didn't link right, that could happen.\nCould you try to make clean && make watch then make bootstrap in babel?\n. I think at this point Node will end up with .mjs for modules and .js for CommonJS. That'll be a slow transition for the community though, so I think it's reasonable to force module for .mjs and use this for .js for a while at least. It'll also keep us more consistent with Webpack in the short term and allow the community to migrate over on their own time.. Dang, nice edge case there haha.. Duplicate of https://github.com/babel/babylon/pull/11, https://github.com/babel/babel/issues/4245, and https://github.com/babel/babel/issues/1351, among others I'm sure.\nThe PR isn't just asking to expose some object, it's asking us to maintain a whole official API for parser plugins to use, which isn't something we're willing to commit to currently, as it's not clear how to make that API effective, and it would limit out ability to refactor and optimize the codebase.\nWe do allow people to fork babylon currently, and use { parserOpts: {parser: require(\"custom-parser\")}} in the options if you want to experiment with something as a custom syntax, but that is the limit of it currently.. Your example code takes parser as an argument. That is an API. We could change the method names on that instance at any time. If we exposed this, we'd break any custom plugins any time we did that. . Currently we don't endorse having plugins that affect syntax. \n\nIt is still so much better than hacks like this people are currently doing.\n\n\"better\" here is relative though. If we expose plugins as a mutable object, it will encourage people to hack them in anyway. The fact that it is a gross pain in the ass right now is a good thing, because it makes it obvious that it isn't something we support people doing.\n\nI'm happy to live with exported plugins object despite the fact it might even be removed at some point, if you decide to do so.\n\nBut you aren't the person people will be yelling at. If you hack something together, publish it, people start using it, and then we break it because we didn't even know about it and it used a hack to add it in there, average users will have no idea, they'll just see that their Babel-based project is now broken, and we'll be the ones stuck in the position of either leaving users broken, or then having to support the hack long-term.. Definitely a spec bug. FunctionDeclarations are allowed to not have an ID, but only when nested in an ExportDefaultDeclaration.. Parsing as a FunctionExpression would change the hoisting behavior and potentially break circular dependencies.. My understanding is that this is expected behavior. These proposals essentially add export versions of the existing import forms, and the ES6 spec for import allows one, but not both of {foo as foo} or * as foo.\nNote in the grammar: https://www.ecma-international.org/ecma-262/7.0/#sec-imports\nImportClause:\n    ImportedDefaultBinding\n    NameSpaceImport\n    NamedImports\n    ImportedDefaultBinding, NameSpaceImport\n    ImportedDefaultBinding, NamedImports. Sounds good. I don't think I'm comfortable landing any changes to this unless there were an official proposal, as you mentioned. I agree it's surprising behavior to me from a grammar definition standpoint, but being that this is the first time I've seen the question raised, I can't imagine it's a case that comes up often.\nI think every time I've wanted a namespaced import and a named import, I've been fine to reference it off of the namedspace object instead. To me that says that this issue is more annoying for those writing tooling based around adding imports, since it makes adding imports more complicated, but it doesn't make it harder for day-to-day devs to get their work done.. @diervo Still catching up on things, but for your comment about Identifier, I wouldn't recommend ever traversing for Identifier on its own, without checking in what context it is used, so you'd either just traverse for PrivateName or traverse for Identifier and ensure that its parent node is PrivateName.. Have you considered using https://github.com/istanbuljs/babel-plugin-istanbul? Generally I don't think I'd recommend running tooling on the output from Babel.. Ahh sorry, I misunderstood the issue then.. Even ignoring circular dependencies and what imports what, even just accessing the class by name would be affected. e.g.\n```\nexport default class Example {}\n// or\nclass Example {}\nconsole.log(Example); // Logs the class constructor\n``\nif it's a declaration, theExample` binding is exposed in the top-level scope of the file, whereas with expressions their names are only scoped inside the class body, e.g.\n```\n(class Example {});\nconsole.log(Example); // Throws on non-existant variable\n```. Gotcha, then yeah I don't think there is a way to observe the different between an anonymous default-export class declaration vs expression. I think it's good to have anonymous class declaration be consistent with function declaration though.. > How many transforms will assume declarations have an id?\nAt the end of the day, these things are not expressions, they are syntactically declarations. We should not diverge the AST from the spec because some plugins may make assumptions that are incorrect. There are an infinite number of things people could do wrong, we can't possibly hope to defend agains that.. > All we needed to do is test if an (unparenthesized) FunctionExpression is the child of a ExportDefaultDeclaration.\nBut there are syntactic differences in how the code is serialized. Once it is in the AST, we don't know if there were parens or not. And it would mean there's no way to programmatically create one or the other of the cases.. https://github.com/babel/babylon/issues/347 would probably address your request in a more general way. I think it's a reasonable feature request, but it's hard to say if there is anyone interested in working on that at the moment.. Does npm info babylon --json show the -ranges version when you point it at the main registry? I don't see that on my machine, but I don't know if it's your old npm version, or your registry mirror doing that.. From my point of view, I think it does make sense to have these be different node types.\n@JamesHenry For your points:\n\nAndy and I worked together to align on using existing node type precedents from Flow where possible, and where they are syntactically consistent across Flow and TypeScript.\n\nThis jumps out as unexpected for me. Syntactic similarity on its own, in my mind anyway, is an argument for similarly structured nodes and fields, but not necessarily for using the same node types. We have UnionTypeAnnotation instead of adding a Union BinaryExpression. We have BooleanLiteral and also BooleanLiteralTypeAnnotation.\nWe all certainly draw the line somewhere, but to me I tend to favor @thejameskyle's approach here. Our goal with the AST is the make it easy to analyze the code itself, and that means the AST should contain all of the information needed to serialize it back to original source code.\n\nA TypeAnnotation is a type annotation. What you're after is what language the node comes from, which seems outside the scope of a node to provide.\n\nWould you be able to dig into what makes you feel this way? To me it seems entirely contrary to the goal of having the AST. If the AST on its own can't represent the file without additional sidechannel data, that seems like a massive problem.\n\nOf particular note is the fact that TypeAnnotation nodes have officially been accepted as part of an extension to ESTree\n\nI don't think this specific argument holds up because doing\ninterface FlowTypeAnnotation <: TypeAnnotation {}\ninterface TSTypeAnnotation <: TypeAnnotation {}\nwould still fit inside that, similar to how ESTree defines Pattern. There's no Pattern node type, but now anything that implements that interface can be used at that location.\n\nIf two things are syntactically equivalent across Flow and TypeScript, why would we need a fundamentally different AST? If there were differences in semantics for the same syntax, that would be applied later by the relevant parser/tooling within that context.\n\nI'll second @thejameskyle's point here:\n\nJust because two nodes are semantically the same today does not mean they will always be, there is no shared standard between TypeScript and Flow, and Flow has explicitly said they don't want such a standard\n\n@azz \n\nSometimes you need more than the node and its parent. You might need to know the source type, if the current scope is strict mode, even in some cases you might need the extension (TypeScript acts differently depending on .ts and .d.ts).\n\nYou are right that to properly validate the behavior of some code, you need sourceType and strict. To me it's a balancing act of avoiding an explosion of combinatorial types, while also making the node type distinct within reason. As for .ts vs .d.ts, I can't say I'm familiar. What differences are we talking? I personally would have assumed that .d.ts files would create type-declaration based node types like Flow's DeclareClass and such, which then clearly represents the behavioral differences, making the file extension unnecessary.\n@thejameskyle \n\nType annotations within Flow and TypeScript have different behavior, I need to mimic that behavior in tooling that I am building.\n\nI think a clarifying example for this would help this discussion move along. I'm curious myself.\n@JamesHenry What are your thoughts on this and James' other comments.\nI love that the two are converging in syntax, but without an official understanding saying that won't deviate, this seems like if anything it would add confusion. It's much clearer to have them be two separate things instead of two almost similar things that deviate when each one decides why not. I'd probably be even happier of this PR included prefixing all of the Flowtype node types with Flow.\n. I'd much rather keep the directive type and make it raw-only instead so it's clear that it isn't a string literal.\n\nAs this is breaking it needs changes to babel and minify in order to work.\n\nI'm not sure we've clarified just how big a task this would be. This means anywhere that does .body.unshift or .unshiftContainer('body' needs to essentially be deleted and rewritten to take directives into account. That's a massive hit to the conceptual model in the API I think, since no-one expects to have to worry about directives right now.\n\nThe ESTree specification describes a field directive on ExpressionStatements which contains the raw directive value.\n\nThis approach works for read-only usecases, but as soon as it hits transformation, the separation is essentially meaningless. Semantically a Directive node must be at the start, or it isn't a directive anymore. ESTree's desire to be backward-compatible is forcing that representation, but it's not a good one for actually representing the semantics of the code over the source of transformation, since you could easily traverse for all Directive nodes only to find that they aren't actually directives anymore because someonething else got inserted before them. The AST should try to enforce this stuff as early as possible.. Yeah I guess my suggestion is that we stop printing DirectiveLiteral as StringLiteral, instead doing\nexport function DirectiveLiteral(node) {\n  const q = node.value.indexOf('\"') ? '\\'' : '\"';\n  this.token(q + node.value + q);\n}\nor something along those lines.. Alternatively if you're not using any experimental syntax, you can always use ESLint to enforce this kind of thing.. cc @samwgoldman . @avikchaudhuri Do you happen to know if the Flow team has an opinion on this? My assumption is that Flow doesn't really care whether JS considers a file an ES6 module or a CommonJS module, but it'd be good to get an official confirmation so we don't risk affecting things further in the future.. We should verify if this is actually against the spec. The spec has\nBindExpression[Yield] :\n    LeftHandSideExpression[?Yield] :: [lookahead \u2260 new] MemberExpression[?Yield]\n    :: MemberExpression[?Yield]\nand MemberExpression from the grammar side of things (rather than the AST side), does not include reading a property off the result of a call.. Totally.. Any idea if the code in the parser itself actually sets this?. Assuming you're talking about something like https://github.com/facebook/jsx/pull/93, nothing is official yet, and the is no new syntax in Babel at this time. Using an actual array as mentioned above is the way to go.. There is currently a allowReturnOutsideFunction option that should satisfy this usecase already I think.. > I mention that in the bug report\nI don't see that in there?\n\nI want the parser to be in the mode that the spec says new Function(value) is parsed in.\n\nFair enough. I don't think this would be sourceType-related though. We'd probably just want a general context: 'program' | 'function' | 'async' | 'generator' option or something if we wanted to do this, since those can all occur both in modules and in scripts.\nThat said, is there any reason you wouldn't just actually wrap your code in a function before parsing it, then just parse it as a normal file?. Interesting idea. I definitely hadn't considered trying to treat it like actual syntax instead of parsing the comments later. It does seem like that would address a lot of the current issues we have with the flow comment plugin.\nI'd be open to it. I assume we'd want a similar flag for the code generator to output all this stuff?\nMy only comment is that your ab/*::c*/de to abde example seems off, since it would be treated as two separate identifiers in the parser normally, so it seems like it should still see the comment as a token separator.. We've got https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-flow-comments, but it's always been buggy because leadingComments and trailingComments aren't very accurate.\nGenerally whenever people submit bugs for it, we recommend they use .js.flow files instead, like https://github.com/babel/babel/issues/6142#issuecomment-323766148\nYou can see there are at least a few other obvious ones https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20flow-comments. Yeah sorry, could have been clearer on that :). Looks like this isn't needed.\n. Perhaps we'd be better off having this be its own node type, like super? super() for instance is just a normal CallExpression with callee being a Super node. Should we introduce an Import node as well?\n. Looks like this isn't needed now?\n. I think this can be simplified to this, though I'm not an expert on Babylon.\nif (this.hasPlugin(\"importFunctions\") && this.lookahead().type === tt.parenL) break;\n. I wondered that too, good question, curious to see what others think. \n. I'm curious to hear other's thoughts, but I'd probably have expected this to be a normal Identifier, rather than having a specific subtype for the private node.. My main motivation is consistency. You already always need to check what an identifier is. It could be a local variable, it could be a class property, it could be an object property, it could be an import, it could be imported binding. Identifier is essentially a catch-all for non-keyword values in the original source.\nMy expectation would be that the ClassPrivateProperty would be the clarifying context for it.. Can we stick with camelCase to be consistent with the rest of the codebase?. I don't know how others feel, but I usually see personal utils like this as good to install globally, since many people may test things in their own way.. Since this defaults to \"\", won't this always be 0? \"thing\".indexOf(\"\") === 0. Ugh, this is what I get for late evening code review :P. One case I know of is Babel actually outputs code like this in the case of exports at the moment. See https://babeljs.io/repl/#?babili=false&evaluate=false&lineWrap=false&presets=es2015&targets=&browsers=&builtIns=false&code=import%20thing%20from%20'bar'%3B%0A%0Aexport%20var%20a%2C%20b%2C%20c%2C%20d%2C%20e%2C%20f%2C%20g%2C%20h%2C%20i%2C%20j%2C%20k%2C%20l%2C%20m%2C%20n%20%2Co%2C%20p%2C%20q%2C%20r%2C%20s%2C%20t%2C%20u%2C%20v%2C%20x%2C%20y%2C%20z%3B&experimental=true&loose=false&spec=false&playground=true&stage=0\nincludes\nexports.z = exports.y = exports.x = exports.v = exports.u = exports.t = exports.s = exports.r = exports.q = exports.p = exports.o = exports.n = exports.m = exports.l = exports.k = exports.j = exports.i = exports.h = exports.g = exports.f = exports.e = exports.d = exports.c = exports.b = exports.a = undefined;. It's always so interesting how little things trigger knee-jerk reactions. I always prefer capitalized hex haha.. You still get an AwaitExpression either way, I think that part of the spec is more to make like easier for parsers if they want.\nIn this example, if you use await as an identifier it'll throw and reparse as a script successfully, which I think is good?. Yeah, I think it's as long as the output result is the same, the potential better average performance makes me want to go this route.. Why the computed property?. Still feeling like this should be Identifier, otherwise we're diverging from the semantics that are used throughout the rest of the AST, where literal text blocks without quotes are Identifier nodes.\nI agree it's not as pretty nesting-wise, but it seems more consistent.. I could have been clearer, my suggestion is\ninterface PrivateName <: Expression, Pattern {\n  type: \"PrivateName\";\n  name: Identifier;\n}\nI'm not suggesting a private: boolean flag on Identifier.\nIdentifier nodes in our spec are currently every case of non-keyword, non-string literals. The same way it's not name: string on FunctionDeclaration names or MemberExpression properties.. Is there a reason to return from this given that the alternative is to throw? Then we could reduce the nesting by just doing if (this.hasPlugin(name)) return; at the top of the function.. How would people feel about skipping this pointers logic and having babylon just throw an error with the plugin name in the message, and a .missingPlugin property?\nThey we can have the try/catch in babel-core catch the exception and handle mapping the error to a Babel plugin? That way we don't need Babylon to be aware of Babel stuff.. ",
    "shuhei": "@loganfsmyth Thanks, I'll cherry-pick and reopen it!\n. @thejameskyle I've updated the code to use ParameterDecorator type as you suggested.\nAlso, I've excluded function parameter decorators because the proposal says:\n\nFunction expression and function declaration parameters\nThis proposal currently targets only method parameters, because function expressions and declarations don't currently have a proposal that would be in Stage 0 or higher.\n. @IgorMinar I'd like to parse function parameter decorators too but I'd rather want this PR to be merged sooner.\n\n@thejameskyle What do you think about supporting function parameters decorators at this time?\n. @kittens @thejameskyle Updated ParameterDecorator to Decorator and dropped the distinction between method and function parameters. Please let me know if there's anything to be done before it's merged.\n@IgorMinar Just to make it clear, function expression decorators are currently not supported due to this check.\n. @hzoo Thanks for your advice. I'll add tests for the other node types.\n. @hzoo I added tests for other node types except ArrowFunctionExpression. It does not work and I'd like to leave it as is for now.\nArrowFunctionExpression's parameter decorator throws \"Leading decorators must be attached to a class declaration\" error in parseDecorators with this PR's implementation. ArrowFunctionExpression's parameter is parsed by parseParenAndDistinguishExpression (with parens) or parseExprAtom (without parens) without knowing that it is a parameter until => appears. In the parse methods, parseDecorators throws the error because the parameter is not a class. The other node types' work because they are parsed by parseBindingList that doesn't use parseDecorators.\nTo support ArrowFunctionExpression's parameter decorators, we have to strip the class-only check in parseDecorators or parse ArrowFunctionExpression's parameters differently somehow. Both ways might affect the current behavior of Babylon and I don't think they are worth doing while ArrowFunctionExpression's parameter decorator is not actually in the stage 0 proposal yet.\n. Thanks everyone :tada:\n@hzoo Do we need to update other packages before releasing it? I'm afraid that a new property decorators on existing node types may be caught as an error by node type/property check.\n. @hzoo Thanks! As far as I know, the types that will get decorators as a field will be:\n- Identifier\n- AssignmentPattern\n- ArrayPattern\n- ObjectPattern\n- RestElement\nThe legacy transformer shouldn't error because it doesn't use Decorator visitor.\n. @thejameskyle commented here:\n\nDecorator should probably be broken into an alias of many different types.\n``` js\ninterface Decorator <: Node {\n expression: Expression;\n}\ninterface ClassDecorator <: Decorator {\n type: \"ClassDecorator\"\n}\ninterface ParameterDecorator <: Decorator {\n type: \"ParameterDecorator\"\n}\n// etc...\n```\n. @thejameskyle Thanks for your comment!\n\nI agree that different types of decorators should be renamed and have Decorator as an alias to allow transformers to exactly match desired nodes. However, as far as I looked through babel-types, there are already 6 different types of decorators that are all expressed as Decorator:\n- ObjectMethod\n- ObjectProperty\n- ClassDeclaration\n- ClassExpression\n- ClassMethod\n- ClassProperty\nI think the renaming can be done separately from this PR because it will involve a lot of changes to other packages like babel-types. What do you think?\n. ",
    "fkling": "Stack Overflow is a great place to ask usage questions. I this case I find the error pretty clear: 0 is not a valid value at that position. It would either be an expression ({0}) or quoted text (\"0\").\n. This is great, thank you @danez! Any idea when this could be released? I'm happy to help getting this out sooner rather than later.. That is great, thank you. I will wait then \ud83d\ude03 . Oh sorry, I didn't look for closed issues \ud83d\ude1e . So is it still the plan that flow will switch to a Variance node eventually? I'm a bit confused. cc @samwgoldman \nI guess ast-types should be updated in the meantime then.. ",
    "kuu": "Thanks.\nActually, I asked at SO first but didn't get any answer.\nBut thank you. Now I understood.\n. ",
    "jamiebuilds": "We've been against the idea of allowing external extensions to Babylon in the past. It would be much more difficult to support custom parsing than it is to support custom transformations. Babel already has a lot it has to support, so we haven't wanted to open this up.\nI talked to @disnet about this just earlier this week, because others were interested in seeing sweet.js be built on top of Babylon (which would be extremely difficult or impossible due to the nature of how you must parse macros). I would be open to an internal whitelist of external parsing plugins that we could allow for a small subset of users that will be good citizens and we can communicate changes directly with.\n. It's probably fine if they are be behind separate this.hasPlugin(\"...\") checks, which the work in this PR should already be behind.\n. This is looking good. @hzoo @danez could you push this through?\n. Moving to #341 . We should enable this by default in babel-template when added. > parse as if...\nare you saying either or or both?. Test failures don't seem to be a result of this PR. Note: The generated AST just copies what Flow has.. I'm going to close this and move to #710. Just to note: Without this change it is very difficult to build tools that support both Flow and TypeScript, which I'm currently trying to do so it would be good to get this change in sooner rather than later.. Yes, as I mentioned in the original issue, if you are working in the context of babel-traverse (which is properly set up), you can check path.hub.file.opts.parserOpts.plugins. But that is brittle and you often do not have access to a NodePath, let alone the parser options.. > using existing node type precedents from Flow where possible, and where they are syntactically consistent across Flow and TypeScript.\nSeeing that there is no shared standard between the two grammars, and no guarantee that both will remain aligned, it does not make sense to try uniting the two grammars. \nThe TypeAnnotation node in ESTree is hardly a shared standard, it's currently defined as:\ninterface TypeAnnotation <: Node { }\nThe most you can really say about type annotations in ESTree is that there's some reserved space for them which is the typeAnnotation field on patterns and returnType on Functions. Which is fine, I'm not suggesting that we use different fields on JavaScript node types.\nAs it stands, when you are given a raw Babylon AST, there is no way to know which grammars are contained within it except for when you discover a node that belongs to a particular grammar (which is a thing worth preserving in the AST as it means you don't need context besides maybe the parent node to understand a node).\n\nPerhaps with specific cases to hand, it may turn out that there are currently cases where we have the same AST where we fundamentally shouldn't, and the solution would be to just diverge/namespace those specific instances rather than apply it to absolutely everything\n\nWe don't have a lot of opportunities to make changes to the Babylon AST, we should not be changing things frequently.\nIf we can't look at an individual node and say which grammar it came from, we should treat that as a bug.\n\nI am not saying the overlap in node types made it easier to achieve\n\nSo why even attempt at merging types?\n\nPlease can you elaborate on specific issues you are facing?\n\nType annotations within Flow and TypeScript have different behavior, I need to mimic that behavior in tooling that I am building. Which I'd get into further, but based on previous interactions with TypeScript team members I'm not going to.. No, we should not require context outside of an individual node or its parent to determine what the node is. Scenarios like that make an AST crap to work with, it's already super annoying the places in ESTree/Babylon where you need to look at the surrounding nodes to know where you are in the AST. This is (in part) why the Shape AST is so great to work with and why ESTree is annoying.\nThere is no reason we should be adding these hacks into our AST to work around bad design if we have the opportunity to do it well from the start.. @hzoo can you tell me what I need to do to get the tests in CI running with an updated copy of Babel with these changes applied?. If people are going to respond to this thread, please take the time to understand what has already been said.\n\nJust because two nodes are the same syntactically does not mean they are semantically the same\nJust because two nodes are semantically the same today does not mean they will always be, there is no shared standard between TypeScript and Flow, and Flow has explicitly said they don't want such a standard\nThese places where the nodes are merged are exceptions to the rule. In 99% of the Flow/TS grammars you will need to check different node types. What we have here is highly inconsistent\nNodes should not require additional context (besides maybe their parent node) in order to determine what they are\nWe should be optimizing to avoid future breaking changes to the AST\nWe should not try to optimize for a standard that does not exist, has no roadmap, has no buy in, is done by two people on their own without any process\nThere are tools that cannot be built without additional information about the grammar existing in the AST\n  a. We should not add something to the root of the AST as that requires additional context (See 4)\n  b. We should not add an additional property to the nodes which are shared, because that is highly inconsistent with the rest of the AST\nESTree does not formalize the TypeAnnotation definition, it just reserves space for it.\nESTree says nothing about the other node types that I have updated in this PR, those decisions were made by TypeScript people by themselves\nWe already have a pattern for how to handle node types that are related to one another in babel-types, we already have node types like t.isFunction which are aliases to more precise node types\nHaving more information in our AST does not get in the way of building tools like Prettier or ESLint, this \"inconvenience\" is like 3 lines you have to add to manually handle each case. It's silly to optimize in such a small way\n\nThis is the right decision and I'll be pushing it forward. I'll update babel-generator next and anything else we need to do. > I would also love to see the Flow nodes updated with a Flow prefix.\nI would too, I'm afraid of making that big of a breaking change with all the tools that depend on the AST as it is today. I know personally this would cost me several days of working time. I'm personally happy to do that, but there's a lot more people than me.. For the record I've been working on a tool that internally unifies the Flow and TypeScript ASTs into another more verbose AST designed after the Shift AST. So that could always be exposed if you don't care about the semantic differences between types in Flow and TypeScript.. Note that comment annotations are not contextual at all, as long as the resulting syntax is parsable, it is valid:\nInput:\njs\nconst object = {\n  foo/*: bar */\n};\nParsed:\njs\nconst object = {\n  foo: bar\n};. >  current issues we have with the flow comment plugin\nThere's a Flow comment plugin already? Where/What?\n\nsince it would be treated as two separate identifiers in the parser normally\n\nOh I'm sorry, you're right the comment tokens aren't simply thrown out, they are replaced with whitespace ref. Ooooh, thought you meant a Babylon plugin. Decorator should probably be broken into an alias of many different types.\n``` ts\ninterface Decorator <: Node {\n  expression: Expression;\n}\ninterface ClassDecorator <: Decorator {\n  type: \"ClassDecorator\"\n}\ninterface ParameterDecorator <: Decorator {\n  type: \"ParameterDecorator\"\n}\n// etc...\n``\n. I'm worried how this will impact existing transforms. Adding aDecorator` type in a new location will cause transforms that are looking for existing types of decorators without validating the rest of the AST will break.\nMaybe this one can be the first Decorator node of a new sub-type and we can update the rest later?\n. double quotes :/\n. === 124\n. I'm not a huge fan of how I did this (especially since node is potentially unused), but otherwise I'd be repeating a bunch of stuff.\n. ",
    "jmm": "@thejameskyle have you read the comments on that babel/babel issue? @kittens seems pretty favorable to the idea.\n\nI would be open to an internal whitelist of external parsing plugins that we could allow for a small subset of users that will be good citizens and we can communicate changes directly with.\n\nMy gut reaction is I don't like this idea :( unless it's a preliminary thing to work out details of how to make it generally available. If it's necessary you can curate a list of plugins that get some sort of stamp of approval or something. Presumably there would be some objective criteria published for what constitutes a \"good\" plugin? What is an example of being a good or bad citizen in this context?\n. Thanks @oskardahlberg. I noticed that too and it seems like a bug to me.\n. @loganfsmyth @kittens I can check this out to see what we can do with Browserify to avoid bundling duplicate modules (there are ways of excluding certain modules). But the original reason for Browserifying was to prevent people from requiring \"internal\" modules, right? Do people still care about that?\n. Hi @doug-wade. Thanks for your interest in contributing to Babylon. As noted in your other PR, generally only standards track stuff is going into the core Babel libraries, with some legacy / pseudo-standard exceptions like JSX. For that reason I'm closing this PR. There's a notion of making Babylon extendable in a way that would allow creation of plugins for handling new syntax like this. You can track status of that at https://phabricator.babeljs.io/T1351. Thanks!\n. Thanks @mroch -- I think this is the same as https://github.com/babel/babylon/issues/26 though? (Maybe that could use a better title?)\n. Another one is directives. In ESTree they're just ExpressionStatements in Program.body. In Babel 6 there's Directive and DirectiveLiteral and Program.directives. I wonder how many people would be interested in this documentation. I'm not sure anyone would maintain it, so I wonder if it'd make more sense as a wiki. I don't know that the AST spec would change much either though.\n. @nene Thanks for the effort on this. I'm definitely +1 on noting the AST output format and linking to the spec. I don't think the README is the ideal place to detail differences from ESTree (or whatever AST spec) though. I think that should be in a separate document, probably not linked from the README -- maybe from the Babel AST spec. That document should maybe be a wiki, since I don't know that anyone maintaining Babel / Babylon is going to maintain that information.\nIf there is going to be a differences from ESTree document (especially if it's committed somewhere) I think we should say something like differences include so that we're not setting the expectation that it's exhaustive or up to date. Even ESTree isn't static -- they make additive changes.\n. Babylon is indeed based on Acorn, but it's a fork and one of the reasons for forking was to be able to diverge from ESTree. I totally agree that we should say what the output format is and link to the AST spec, I just don't think we should inline too much information in the README, like a breakdown of the differences from ESTree. If there's going to be a breakdown we can link to it from the AST spec or somewhere fitting. I'm going to propose the following:\n1. We decide in which repo the AST spec should live. In #40 @loganfsmyth mentioned the possibility of moving it from the babel repo to here. I've thought about that before but been on the fence about it. Right now I lean toward keeping it where it is since multiple core packages under the Babel umbrella and in the babel repo utilize that AST format.\n2. Whichever repo that is, we consider creating a wiki there to break down the differences from ESTree. Alternatively perhaps someone who wants to maintain it creates a repo / gist / whatever for it in userland and we link to it from the AST spec or wherever. I'm not real enthusiastic about the idea of committing it to one of the Babel repos because I'm doubtful that anyone will want to or actually maintain it or that there's even going to be a lot of users interested in it.\n3. We update this README to say that the output is Babel AST format and link to the spec.\n. @hzoo :+1: \n. ",
    "krasimir": "@thejameskyle @jmm Thanks for the feedback. I do see your points. However, I don't think that you'll increase the support range if you allow external plugins. Simply because the core or Babylon will stay stable and untouched. You can always say \"X is an unofficial plugin, so you should know that it may break once we update Babylon\".\nIsn't it better to polish the API so you allow extending? There are tons of stuff that could be done with custom parsing but right now it is only possible if we clone the project.\n. Reopened here https://github.com/babel/babylon/pull/11\n. ",
    "MCluck90": ":+1: to this. The main reason I got interested in this project is because I thought I would be able to write my own plugins for it.\n. ",
    "forivall": "The original is here: https://github.com/ternjs/acorn/blob/master/bin/generate-identifier-regex.js\nI also have a slightly modified version at https://github.com/forivall/tacoscript/blob/master/packages/horchata/bin/generate-identifier-regex.js\n. I'd rather sing Roxy Music's Avalon in karaoke, but say babylon instead of avalon.\n. acorn has an onToken option, to which can you can pass a function to build the tokens array. I'd consider going back to that behaviour.. ",
    "amasad": "That's alright I guess but I'd rather:\nDance inna Babylon, until its throne a fall\nI and I who see teachings of the Rastaman\n. ",
    "samccone": "@forivall can you please record you singing this and post the video, I think that will help your case a lot.\n. -1 to closing plz fix\n. ",
    "hzoo": "Do we need to make a poll?\n. Don't know if we want a test for params in other node type that are functions: ArrowFunctionExpression, ExportDefaultDeclaration?\nmethod-parameter-decorator is ClassMethod in babylon, and there's also ObjectMethod.\n. Sounds good, I didn't think arrow functions were in there but I didn't check the proposal or anything :stuck_out_tongue:.\n. :+1: from me\n. @kittens \nWe may want to figure out the issue with runtime 5/6 before we release I think? And we haven't made a release yet since moving the repo\n. Yeah we'll need to update babel-types at least https://github.com/babel/babel/tree/master/packages/babel-types/src/definitions, but the checks are restrictive checks so it shouldn't error? (Benefits of keeping it in the monorepo are showing :smile:). \nThe decorators transform isn't working atm and there's logan's https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\n. This is handled by https://github.com/babel/babylon/pull/587 and will be in the next beta release which should be 7.0.0-beta.15 (soon). If it parses successfully it will generate a expected.json for you when you run the test if it isn't provided\n. covered by https://github.com/babel/babylon/pull/590. This is probably true for other keywords as object keys like say function then right?\n. \ud83d\udc4d  Something like this sounds good \n. \ud83d\udc4d  \n. I think this is causing an issue in some of the babel tests https://github.com/babel/babel/pull/3519 (a readme change). I guess one of the benefits with keeping it in the same repo was knowing it a change in babylon affected babel without having to guess? We should probably do something like https://github.com/babel/babylon/pull/21/files or automatically run a test with new babylon changes?\n. WIP PR https://github.com/babel/babel/pull/3520 - and yeah actually these are technically a breaking change (at this specifically the one for type params is now an array of TypeParameter rather than an array of Identifier @gabelevi \n\nThe param list for type parameter declarations now consists of TypeParameter nodes\n\nSo I'm not sure what we should do here - revert ^ as a patch? If we call that a breaking change then its a breaking change in babel as well? Or given this was only introduced in March and not the most common feature there shouldn't be anyone relying on this\n. Sorry, looking into it. It seems like we missed a step when moving babylon out of the main repo. (This was the first release out of it)\n. Oh is this just because of default exports? We just need to add the add-module-exports plugin like I did in babel\nMade https://github.com/babel/babylon/pull/52\n. I removed babel-runtime so there's no dependencies now and we can run browserify/webpack/rollup if we wanted to\n. Shouldn't be an issue after https://github.com/babel/babylon/pull/190 / https://github.com/babel/babylon/releases/tag/v6.13.1 since we remove requires and use rollup?\n. This is handled by https://github.com/babel/babylon/pull/587 and will be in the next beta release which should be 7.0.0-beta.15 (soon). https://phabricator.babeljs.io/ - it's on the readme https://github.com/babel/babel#want-to-report-a-bug-or-request-a-feature\nBut if it's a parser issue this would be the right place!\n. Actually looking at \nhttps://github.com/tc39/ecmascript-asyncawait/blob/cdc8e3c567e47fb73ee2360be3faac636752b164/spec/syntax.html#L3-L12\nlooks like it's correct?\n. Ok lol how did I read that wrong..\n. The differences were also in the Babel 6 changelog (the AST only changed in 6.0)\nhttps://github.com/cst/cst/pull/96\nhttps://github.com/babel/babel/blob/master/CHANGELOG.md#600\nhttps://github.com/babel/babel/blob/master/CHANGELOG.md#6018\n. Made https://github.com/babel/babylon/pull/46\n. Since it looks like we need an AST change that we'd not like to do with other changes in bulk, closing. Dang it.. fixed the other links in master\n. Hmm.. maybe not then. Weird since there shouldn't of been any major changes. We changed from babel 5 to babel 6 in babylon first though (as well as not using loose mode)\n. Should test against these (currently failing): https://github.com/tc39/test262/blob/master/test/language/rest-parameters/array-pattern.js https://github.com/tc39/test262/blob/master/test/language/rest-parameters/object-pattern.js. We aren't running the changes on babel in travis yet right?\n. Ok cool - it does suck that it would make the tests run a lot longer but worth doing. (installing it now locally too, seeing no issues)\n. Not really (go ahead if you want), I guess merge this then?\n. Ok, so it only happens when flow/jsx parsing is on\n. \ud83d\udc4d and If you feel like adding the PR numbers go ahead\n. Ok going to close\n. \ud83d\udc4d \n. \ud83d\udc4d \n. k \ud83d\udc4d , @jeffmo \n. https://github.com/babel/babylon/issues/224. \ud83d\udc4d \n. I feel like there was an option before? (or maybe that was esprima)\n. \ud83d\udc4d  do we want a simple ast test for this?\n. cool \ud83d\udc4d \n. Should maybe look at the other PRs in queue and make a release? Looks like we have a good amount of stuff in master\n. \ud83d\udc4d  cool, you can also include #65, #57 now - also can do [skip ci]\n. \ud83d\udc4d \n. can do the same for trailingFunctionCommas, dono if you want that in a separate one\n. we should deprecate classConstructorCall too\n. Yeah we would remove it in the next major - just not sure given we would need to update babel too. You can just leave it for now.\nI updated the docs a while ago (http://babeljs.io/docs/plugins/transform-class-constructor-call/) but not sure who looks at it\n. It's on the docs site still though (with deprecated)\n. Looks like the coverage would be for a failing test on unexpected token? \nhttps://github.com/babel/babylon/pull/104/files#diff-8ce9de97e7fb2bd7f30e9eee69714584R406\n. I restarted got the same failure - should be ok\n. Sorry been busy not doing open source \ud83d\ude04, can do it real quick\n. @gabelevi sorry for delay, released now!\n. @TimothyGu yeah sounds good\n. @leebyron oh right, that was the whole point \ud83d\ude04 \n. And what about running rollup since we don't have deps?\n. Moving to https://github.com/babel/babylon/issues/119\n. .. sigh closed this one!\nFixed with https://github.com/babel/babylon/issues/123\n. https://github.com/babel/babylon/issues/121\n. Yeah ref https://github.com/babel/babel/pull/3225 and revert pr https://github.com/babel/babel/pull/3332\nCan cc @jeffmo \n. Looks fine to me? We made semicolons necessary before but it was reverted\n. Yeah I think that was confusing before. I think it's worth making it as a bug fix? @jeffmo \n. I think it looks good overall? there's a merge conflict atm\ntraceur does: Invalid left-hand side expression in assignment: func() - dono if it's more helpful to add the left hand side in the error message?\nWhat are the possible left hand values (Identifier/MemberExpression)? - maybe we can suggest that\n. > We wouldn't always want to clutter the message\nfair enough\n. Should we change the wording to say something like: can only be used in an immediate async function (or just to say the parent function should be async) - we could give an example too\n. cc @dlmr\n. Ok it doesn't account for destructuring @kaicataldo @danez \ndeclaration.id.name only works for identifier\n. I think we want a hotfix now but if you want to do the actual fix later sounds good\n. https://github.com/babel/babylon/releases/tag/v6.11.2, will account for it later\n. Dang it. \nI can't repro with just those 2 lines? Will just need a smaller code snippet that causes the error\n. And this is only with babylon@6.11.2 and not 6.11.0 or 6.11.1?\n. You should be able to do just remove lines of code in that file to find what is causing the exports error.\n. Ok great, glad it works then\n. Yeah only for rest \ud83d\udc4d \nThe failing test from babel is example of this (valid)\n```\nbabel-plugin-transform-object-rest-spread/object rest spread expression:\n     SyntaxError: /home/travis/build/babel/babylon/build/babel/packages/babel-plugin-transform-object-rest-spread/test/fixtures/object-rest-spread/expression/actual.js: Unexpected token (1:10)\n\n1 | ({ x, ...y, a, ...b, c });\n```\n\nif (isPattern) {\n        this.expect(tt.braceR);\n        break;\n      } else {\n        continue;\n      }\n. :+1: Other than I think we could give a better message\n. Just gotta fix the error messages in the tests \ud83d\udc4d \n. Got a timeout error and one of the dependencies is failing node 0.12 for some reason but we can still merge\n. I believe @motiz88 has been pretty busy over the last few months so dono when ready to get back into oss stuff. The parser itself is going to be js for the foreseeable future as far as I can tell? I think we're busy enough just tackling issues and other things.\nOther parsers can be found at http://astexplorer.net/ but they're all javascript except for flowtype.org or maybe https://developers.google.com/closure/compiler/ (java)\n. I was going to say you can make your own parser and plug it into babel after https://babeljs.io/blog/2016/09/28/6.16.0#new-feature landed\nbut I see the tweet is about \"golang version of webpack and speed up those builds\" so it sounds like only the parser is relevant here and not actually about Babel itself?\n. Is it not worth just making webpack/browserify faster (or making acorn/babylon faster)?\n. Kind of trivial but maybe a test that import() fails to parse without the plugin turned on?\nwe can do it later\n. Nope that looks good/makes sense! Thanks a lot!!\n. >  and have already updated the expected.json file in the tests, which took me a while\n@jfmengels If you create an actual.js without an expected it should automatically make the file - hopefully you didn't mean you did it manually \ud83d\ude05 , but if so next time!\nWill merge + release after travis is done\n. amazing\n. Hmm yeah it would be interesting to just expose metadata that says the babylon plugin that could be applied to not error.\n2 users of babylon: either a tool or a Babel user. I would focus on the Babel user since the tool user would be more likely to understand how to enable a plugin anyway?. > (funnily enough, I would be more comfortable with this philosophically if Babylon was in the Babel monorepo... Ooh can we get that in 7.0? :half_joking:)\nYeah I've wanted that for a while now (doesn't have to be in 7.0 either but based on time probably so unless someone really wants to do it).\nAlthough I guess it would be a weird error message if the user isn't using Babel but Babylon itself. We could just not run the bundle on watch - only when building/publishing although it should still run tests after the bundle on ci\n. So good!!\n. We could just not run rollup in node 0.10 and do what we were doing before? We should be able to run the tests with/without rollup right? (might be painful)\n. We can just use node 6 to build with rollup and then test on the rest?\n. The 'classCallCheck' Babel helper is used more than once in your code. It's strongly recommended that you use the \"external-helpers\" plugin or the \"es2015-rollup\" preset. See https://github.com/rollup/rollup-plugin-babel#configuring-babel for more information\nSince we already use modules: false I guess we can add \"plugins\": [\n    \"external-helpers\"\n  ]\nhttps://gist.github.com/hzoo/6f393d0a24be191e25dee0bb894bb09e\n. \ud83c\udf89 \nWe can have a separate issue to use external-helpers - maybe it's a babel issue or a rollup one not sure but it's including the newly added asyncGenerator helper for some reason which makes it bigger https://gist.github.com/hzoo/6f393d0a24be191e25dee0bb894bb09e\nWonder how hard it would be to just dedupe it in a plugin instead\n. \ud83d\udc4d \nIf you just have an usage issue or want help, I would recommend checking out our slack community or StackOverflow.\n. I think we should make the check renamed destructured values part as a separate PR since there's a lot of changes to review and they can be independent. Easir to merge both then?\nAnd maybe consolidate the error messages so it's the basically the same thing - not being able to use reserved words and in strict mode or not\n. Check https://github.com/babel/babylon/issues/328. We can always update it later \ud83d\udc4d \n. Done in https://github.com/babel/babylon/issues/213. Yeah \"method or class constructor\" sounds good to me?\nhttps://github.com/babel/babylon/blob/01e984fd0f21bb284943a508d2acc7c458aab13e/src/parser/expression.js#L379-L392\nAlso interesting is allowSuperOutsideMethod - we should update the readme since it says TODO https://github.com/babel/babylon/blob/master/README.md#options - not sure why you would want that\n. This is the babylon repo for the parser? I would ask this question in the https://github.com/fkling/astexplorer repo or just on slack?\n\nIt's part of the babel object passed into the function - just add template to the destructuring - { const { types, template } = babel\n. Awesome contribution @bxt (also your issue description was beautiful)\n. Sounds cool to me - more tests the better? similar to what we want to do with test262\n. Thankss!\n. Nvm forgot rollup was node >= 4\n. A test using * would be good \ud83d\ude04 \n. a bug fix since it should of worked before?\n. Right this is only for the parser plugins https://github.com/babel/babylon#plugins - it's basically a truthy check in the parser to either make it say \"unexpected token\" or to parse it.\n. Yeah we can add quotes if that's more readable. I think @kaicataldo just wanted to be able to watch in dev as this PR. If it's simple enough we can just land that and then work on the other stuff. Also keep in mind we probably want to just move it back into the monorepo as well \ud83d\ude1d. \ud83d\udc4d . Going to close in favor of https://github.com/babel/babylon/pull/587!. Ref https://github.com/babel/babel/issues/4955\n\nremove stage presets\nindependently versioned transforms in a separate monorepo, move to main repo after es20xx\nexpose parser plugins externally with a whitelist, make syntax plugins independent from babylon core.. https://github.com/babel/babylon/pull/587 with the decorators2 plugin handles Class/Property decorators: Stage 2. I think decorators2 already disallows the other two so we can close this?. Wouldn't rollup just bundle the polyfill in?\n\nYeah we can drop it but not in this pr, would need to plan that out. Oh - then we need to use a version that gives a reference rather than the actual polyfill - like this kind of thing\njs\nvar fromCodePoint = require('fromCodePoint');\nfromCodePoint();. Would this be covered by what I mention in https://github.com/babel/babylon/issues/169?. \ud83d\udc4b @jlongster - can you also add a fixture test for this?. We can add this steps in CONTRIBUTING like I did in Babel via https://github.com/babel/babel/blob/master/CONTRIBUTING.md#writing-tests. \ud83d\udc4d  thanks @jlongster . For reference we have others labeled polish as well!. Yeah what I had when testing it out previously https://gist.github.com/hzoo/6f393d0a24be191e25dee0bb894bb09e - there's some issue with asyncGenerator and IIFE (maybe it doesn't have to be one). Had more than a few reports of others experiencing the same issue. It's definetely not needed since our code doesn't use async function * but rollup isn't able to dead-code-elim an iife like that?. Cool that sounds good. dang wish I saved those other issues then to ping them. I think not much if we are ok with the naming conventions - I think we should be ok with making the breaking changes if necessary. You can ignore the coverage issue if it's not making sense \nHowever (I guess this is my responsibility not yours \ud83d\ude04 ) wanted to be clearer about how we do proposals moving forward (meta issue). I thought that by making a \"plugin\" like flow/jsx do we could have independent versions of proposals.\nSo if a breaking change is necessary (and it will probably be if we change the AST node names), how can we update the parser without requiring a major version bump? The proposal was to just make another plugin like \"classPrivateProperties2\" or something etc and then it would be a minor version bump in babylon itself while the transform could do a major version.  https://github.com/babel/babylon/issues/275. Instead of deleting we should fill the entries in \ud83d\ude04 ?. cc @danharper if you have time. https://github.com/babel/babylon/issues/266 Thanks @vkurchatkin!. > This is enabled unconditionally, not behind a plugin. Presumably it should be, but I'm not sure what all that involves.\nYeah if its not stage-4 it can be behind a plugin - can check another proposal as a reference (https://github.com/babel/babylon/pull/163/files). Basically just running this.hasPlugin(string)\nAlso ref https://github.com/babel/babylon/issues/275 regarding versioning. Sorry for the delay @bakkot! I know this is Stage 4 now as well. Ok current idea/solution is to go with this ^\ndecorators has a decorators2 now. And the new transformation will use that instead of decorators.\nThis allows us to do minor bumps in babylon but major bumps in the experimental proposal plugins/presets that will* change?. Ooh maybe we could use github projects across the org to track 7.x as well?. Wow and we can also use this now (need  a 7.x branch)\n\n. Not sure how we want to do it but made https://github.com/orgs/babel/projects. This is because of https://github.com/jlongster/prettier/blob/6d6d53f6df5069765ce0a08a4a1ee9ebe38f4b83/package.json#L10 - we can just publish a new version with his fix and can use npm. It's @jlongster's fork so it's not babylon.\n(we can also totally rename the folder). * can be star. @danez \nThis can be a beginner-friendly issue!. Basically just have to rename the folder ^ to be test-star-option!. And to be clear the proposal for this is dropped: http://babeljs.io/docs/plugins/syntax-class-constructor-call\nCan use your previous PR as a reference (https://github.com/babel/babylon/pull/98/commits) although it's not exactly the same since that was just removing the hasPlugin check and this issue is about removing the plugin + code.\nAnd you want to target the 7.0 branch rather than master (we can change it if you forget). Awesome stuff! Forgot I created the issue lol. Ok can pr to 5.0 too later. fyi @danharper is also on the Babel team \ud83d\ude04 . Actually just looked into it and found https://github.com/babel/babylon/blob/b918554d73ed20c847068243edf99d19ca146dbe/src/plugins/jsx/index.js#L407-L408\nhttps://github.com/babel/babel/issues/2078\njs\nnode.extra = null;. @danez \nThe intention of the issue/discussion earlier was that I thought we could possibly have a ts plugin like with flow/jsx? And that the Babel team wouldn't be the ones maintaining/creating it, but it would be like flow in that the Flow team can make PRs etc.\nAnd yes @JamesHenry already has done separate work via typescript-eslint-parser which uses the TS parser -> ESTree. This issue was about getting babylon itself to parse TS but maybe that's unnecessary?\n\nAnd instead focus more on making it more easy to extend.\n\nNot sure what we can do there yet?. Initial pr merged in https://github.com/babel/babylon/issues/523!\nBabel prs: https://github.com/babel/babel/pull/5896, https://github.com/babel/babel/pull/5899, https://github.com/babel/babel/pull/5856. Ok all 3 PRs are merged, and released in alpha.19\nCan test with \njson\n{\n  \"presets\": [\"typescript\"]\n}\nYou'll want to make sure all your packages are 7.0.0-alpha.19, although babel-loader/gulp-babel are already out of alpha/beta since they won't need to be updated.\nWe have\nhttps://github.com/babel/babel/labels/area%3A%20typescript\nhttps://github.com/babel/babylon/issues?q=is%3Aissue+is%3Aopen+label%3Atypescript\nto track issues while were in alpha/beta since this is a new feature/preset, and will probably need fixes!. Thanks for the report!\n\nAcorn v4.0.4 has this expected behavior.\n\nIt was decided to be a Declaration instead (if you check the other parsers like espree, esprima, flow, etc they are all FunctionDeclaration)\nhttps://github.com/jquery/esprima/issues/311#issuecomment-115747292\nhttps://github.com/estree/estree/pull/38/files. Thanks for reporting? I know we wanted to setup test262 - would you want to help do that? We certainly do have lots of bugs and spec-complaint issues. There's not really anything actionable here since this is too broad of an issue.. Cool, can refer to that and we will try to make progress.. @xtuc, @kristofdegrave  Let's start the PR so we can make a review by us + Gabe?. The babylon PR is merged (https://github.com/babel/babylon/issues/545)\nPlease help review/test the transform PR https://github.com/babel/babel/pull/5813. Done in https://github.com/babel/babel/issues/5229. We moved the previous 7.0 branch to be master now, and master is now 6.x. Yeah, I think jest it's own code coverage but we are using babel-plugin-instanbul already? Now I don't know if it's necessary to switch then?. We moved the previous 7.0 branch to be master now, and master is now 6.x. so specifically what's the usecase for runkit? (which is awesome btw). sure go ahead \ud83d\ude42, and join our slack if you haven't already. Done in https://github.com/babel/babylon/issues/349. Oops forgot to add the extra steps about changing to 7.0 branch (did it). why I wish babylon was in the monorepo again. Less options the better though, dono (it is an option in acorn though, so yea). Thanks for the report, we'll be looking into it shortly. Releasing v6.16.1 until we actually get the time to figure this out.. Releasing v6.16.1 until we actually get the time to figure this out.. If necessary we can backport to 6.x. Also made https://github.com/webpack/webpack/pull/4308 btw\nOn that note, should probably figure out how to make babel-eslint simpler now that we have estree again. https://github.com/babel/babylon/pull/384. Ah yeah only: true does work and should be documented. I'm ok with a command if it makes it easier, but I guess only works alright (unless we support a grep to run multiple, but you probably only want to look at one at a time anyway). Closing as a dupe of https://github.com/babel/babylon/issues/13. Maybe just move the section closer to the other running tests part?. Can we just target 7.0 for this? We can cherry pick other prs if necessary. We moved the previous 7.0 branch to be master now, and master is now 6.x. Just going to be annoying for @andy-ms ts pr. That's the idea! I guess you would run beforehand and then rebase 7.0 and it would be ok?. Moving to https://github.com/babel/babylon/pull/600. This is for 7.0, so we use yarn for install now, otherwise \ud83d\udc4d . I got it thanks!. We moved the previous 7.0 branch to be master now, and master is now 6.x. Hey @andy-ms! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode vlts/* - linux\nNode vlts/* - linux. Yeah a different pr we need to fix that I merged, need to mereg https://github.com/babel/babel/pull/5450. Maybe what we can do instead is make * different or make another option that basically just checks the current list of plugins and then does a console.warn to tell you if there's an updated version to use instead.\n\nSo say you were using decorators-1 and we made decorators-2 then it would tell you that the plugins list is out of date (opt-in). Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. We moved the previous 7.0 branch to be master now, and master is now 6.x. Thanks \ud83d\ude42!! . Hey @andy-ms! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode v4 - linux\nNode v6 - linux\nNode v7 - linux\n\nNode vnode - linux. Hey @andy-ms! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode v4 - linux\n\nNode v6 - linux\nNode v7 - linux\nNode vnode - linux. \"and has no typos\", doesn't seem necessary to me, I'l merge without that part. We moved the previous 7.0 branch to be master now, and master is now 6.x\n\n\nhttps://twitter.com/dan_abramov/status/840771656524140544. Thanks!!. Oops, closing in favo of ^, thanks again though!\n\nBtw join our https://slack.babeljs.io if you haven't already, would love to get your help more!. Hey @greenkeeper[bot]! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Nice catch!\nKind of thinking we should just link to ESTree again and then add the nodes we have that are different (Babel 6 nodes). @samwgoldman wrote up a simple wiki page https://github.com/babel/babel/wiki/Adding-a-new-Proposal-to-Babel. We moved the previous 7.0 branch to be master now, and master is now 6.x. No changes, just informing. We just need to update Babel. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @ChristianHersevoort! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @existentialism! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @chikara-chan! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @greenkeeper[bot]! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @alxpy! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @alxpy! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @Jamesernator! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Not going to be changing anything in the AST but we could talk about doing some changes in bulk (or switching to shift, etc) but would cause for a lot of pain in the plugins/etc. good catch, really weird that I did that.. https://github.com/babel/babel/pull/3295. Hey @Jamesernator! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @greenkeeper[bot]! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @thejameskyle! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode vlts/* - linux\n\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode v4 - linux\n\nNode v6 - linux\nNode v7 - linux\nNode vlts/* - linux\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode v4 - linux\n\nNode v6 - linux\nNode v7 - linux\nNode vlts/* - linux\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode v4 - linux\n\nNode v6 - linux\nNode v7 - linux\nNode vlts/* - linux\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode v4 - linux\n\nNode v6 - linux\nNode v7 - linux\nNode vlts/* - linux\nNode vlts/* - linux\n\nNode vlts/* - linux. Hey @stephen! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\n\nNode vlts/* - linux\n\nNode vlts/* - linux. @stephen Thanks again for this PR! I know it feels bad to had a PR closed but @andy-ms on the TS team has been working on https://github.com/babel/babylon/pull/523 and it's ready for review. I'm going to close this in favor of that PR. Would super appreciate a review if you can spare some time (i'm not that familiar with either flow/ts but can review the babylon core parser changes at least).. Thought it was fixed by https://github.com/babel/babylon/pull/442 but maybe doesn't solve linking. make bootstrap now runs make clean beforehand so that should reset everything (for Babel 7.x). haha good point. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Oh I just merged https://github.com/babel/babel/pull/5548\nBtw are you in our slack? can have an easier time with this stuff there. Looks like just need to fix the tests since old pr didn't update the other tests, fixing now. https://github.com/babel/babel/commit/2a874dff8cb0b96228e645a2e2fa4dbb818ebfd3. Hey @vjeux! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @vjeux! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Ok cool, thanks for checking @nicolo-ribaudo . Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yeah I guess we can add a tokens option since doesn't look like other parsers even have this in the AST . Yeah I don't remember when/why we removed it earlier. Hey @andy-ms! It looks like one or more of your builds have failed. I've copied the relevant info below to save you some time.\n\nNode vlts/* - linux\nNode vlts/* - linux. Hey @aickin! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jj-choi! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @yuri-karadzhov! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Sorry we don't have plans for custom plugins outside of babylon atm, we will accept PRs for https://github.com/tc39/ecma262#current-proposals though. Ref https://github.com/babel/babel/issues/1351. Hey @jj-choi! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @vjeux! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @tibdex! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @SerkanSipahi! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Thanks again!. Awesome!. Hey @fahad19! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yeah that's the recommendation: added to the readme now https://github.com/babel/babylon#will-babylon-support-a-plugin-system\nThanks for the PR though!. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. I believe I just didn't change the spec in babylon or estree either. https://github.com/estree/estree/issues/98#issuecomment-278997010. https://github.com/babel/babylon/pull/503. I was going to go with\nExportDefaultDeclaration\n```js\ninterface OptFunctionDeclaration <: FunctionDeclaration {\n    id: Identifier | null;\n}\ninterface OptClassDeclaration <: ClassDeclaration {\n    id: Identifier | null;\n}\ninterface ExportDefaultDeclaration <: ModuleDeclaration {\n    type: \"ExportDefaultDeclaration\";\n    declaration: OptFunctionDeclaration | OptClassDeclaration | Expression;\n}\n```\nlike in https://github.com/estree/estree/issues/98#issuecomment-278997010 if that makes sense?. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @philipp-spiess! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @aissaghouti! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @peey! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @futagoza! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. We want the minimum to be LTS yep!. Hey @EmpireWorld! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. > Test files should really have a .ts extension, but that would require editing babel-helper-fixtures. Shall I make a pull request there?\nI think that should be covered by https://github.com/babel/babel/pull/5511 but I didn't think we really wanted it earlier?. I know it's easier to modify the code in src/expression etc, but is there a way for us to make the parser plugin like in estree/flow/jsx? https://github.com/babel/babylon/tree/master/src/plugins.\nThe concern is how we are going to do versioning? In flow I guess everything is a minor/patch though. Maybe we can discuss is at the meeting (not typescript specific issue though). Can review the non-test files with https://github.com/babel/babylon/compare/master...andy-ms:ts-wip-no-test?expand=1. @danez @stephen @nicolo-ribaudo any more thoughts?. yep doing it now!. https://github.com/babel/babylon/releases/tag/v7.0.0-beta.16. Hey @jdalton! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. @xtuc The example ^ is array spread not objectRestSpread? @kesne . cc @domenic\n@kesne . Hey @msageryd! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. This is a similar issue to https://github.com/babel/babylon/issues/113 (await in a non async function). Yeah Diego wanted it merged + transform before the TC39 meeting this week (Tuesday \ud83d\ude05 ) haha. Yeah maybe we should just remove any unnecessary types then given it's not supported anyway.. Although there is https://github.com/erights/Orthogonal-Classes but we can also just that stuff when we get to it (static, etc)\ncontext: seems like they wanted to merge private, public class properties + ^ proposal. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @Ginden! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. awesome @rwaldron \ud83d\ude04 , already added some thoughts about the parser/transform. I think the hard part is figuring out how to change the parser itself. The transform should be trivial to remove the _\nlike in others https://github.com/babel/babel/blob/7.0/packages/babel-plugin-transform-es2015-sticky-regex/src/index.js\nAlso, can you try with yarn instead of npm install? It's possible I did screw something up yesterday though. https://github.com/babel/babylon/blob/master/CONTRIBUTING.md#contributing\nI did do a babel alpha.10 release yesterday and we are using ^ so that's probably the issue\nOk we can discuss in slack if you want to join: http://slack.babeljs.io/\nEDIT: the issue is that rollup has a dependency on babel v6 (not a peerDep) and we are on v7 with removed some APIs. Ok I found a bug after a lot of investigation.. I pinned the deps in master so can pull and it should be ok now.. Yeah it wouldn't be related to the parser. After the parser change, we need to make the transform itself and then determine whether we need a new polyfill for those kinds of methods or not.. @babel-bot move to babel/babel. Hey @hzoo! I've moved your issue to the correct repository. Please make sure to keep an eye on the new issue for the latest information.. @babel-bot move to babel/babel. Hey @hzoo! I've moved your issue to the correct repository. Please make sure to keep an eye on the new issue for the latest information.. Amazing, that was super quick!\nA few things to note:\n\n[ ] We need this to be under a flag like the other plugins. This just means creating a hasPlugin('numericSeparators) check so that this functionality isn't turned on by default.\nYou can check @diervo's PR as an example of this: https://github.com/babel/babylon/pull/260\n[ ] Update the readme to add that numericSeparators line to the plugins list\n[ ] Update the ast/spec.md (maybe no update needed). Yeah, I should probably add that information to the contributing, let us know if there's anything that can be clarified or is frustrating. Yeah I think this is good for this PR. Let's do this \ud83d\ude04 . Well _123 starts with _ so it should just be parsed as an Identifier right?. @kerhong Yep, I mentioned this in my review and it's also in https://github.com/tc39/proposal-optional-chaining#notes.. cc @yungsters @zertosh if you want to review.\n\nWill check again tomorrow. Nice work everyone! Really appreciating the reviews!\nBabel transform PR is ~~https://github.com/babel/babel/pull/5786 (please check that out next)~~. Hey @francisrod01! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. It looks like it's trying to parse css? bower_components/animate.css/animate.css Babylon only parses JS to it would error so we'll need to figure out why it's trying to parse .css or how to filter that.\nThis shouldn't be a Babel/babylon issue?. Hey @greenkeeper[bot]! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @peey! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. lol thought I added it, thanks!. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. What does Babel use it for anyway?. @danez It a lot slower though (forgot how much but at least >2x). I definetely wouldn't be opposed to it (I believe someone brought it up earlier so I tested a while ago). prettier = specific printer just like babel-generator. Would need to figure out how to ignore some of the logic that may make it slower than just simply printing it. Would be a nice way for all of us to use one codebase. It's as simple as generatorOps.generator = prettier in the babel options (assuming we don't remove the babel nodes as you mention in https://github.com/prettier/prettier/pull/1940 (unless someone will change all the nodes in our codebase as well as all the 3rd party plugins with a codemod)\nhttps://github.com/fkling/astexplorer/blob/2dca059af77c979b69b84d16454409e5f6465b02/website/src/parsers/js/transformers/babel7/index.js#L26-L46\ncc @vjeux @existentialism . I was thinking we could make some of it's operations no-op (do the default print) if we don't care about specific formatting that can be slow but not sure if that is viable. Was just whether it would be worth looking into perf issues so we don't have maintain 2 printers. Ok I totally ignored your \"The generator seems to use it for whitespace stuff, \" @danez \nLet's just remove the usage in Babel then. We don't care about the output format and we shouldn't encourage anyone else to care about it either (will be minified, etc). We got the quotes option to be removed earlier (https://github.com/babel/babel/pull/5154). So same idea. Just hardcode the whitespace/quote stuff.\nOk nvm the printer is using tokens so need to figure out how do that for newlines without it?. Hey @lx93uv! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Lol yeah we should figure out how to fix that \ud83d\ude1b \nGood find @xixixao!!. @andy-ms any ideas?. Hey @echenley! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. ahh 6.x again lol, will cherry-pick to master. @nicolo-ribaudo rebase although if it's a simple change with 1 author we just squash merge it anyway. The initial purpose of Babel 7 was just to drop Node 0.10/0.12. We are using Set in other parts of Babel already and it helped us to drop babel-runtime as dep (Symbol as well), so that's not an idea. But yeah if those specific cases won't have a lot of items then we don't have to change it.. Actually was getting a lot of errors locally for flow npm run flow so going to revert for now and release with what we have. Can you make another PR to fix? I'm not sure why the flow tests are optional (maybe since the infra setup is still broken) https://travis-ci.org/babel/babylon/jobs/246895914. Oh ok that was confusing then. Hey @bcoe! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @krsjoseph! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. You can exclude .json files in babel-loader or filter out the extension since it doesn't need to be processed by Babel. All good! Not sure why it's not ignoring it by default then?. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yeah I basically ignore them now... @nicolo-ribaudo depends on if stage 3 means more changes. Either way we would need to fork the logic again with a new plugin/name. @vjeux brought up a good point about whether the start position of the class/function part of the decorator should change? https://twitter.com/Vjeux/status/876213458622005249. > What's your long-term vision for this mode? Ultimately, it would be great if, in Babel 7.0 (or 8.0), this new syntax (and a new matching transform) would be the only decorators implementation, or at least the only one selected by the staged presets, but maybe this is too big of a breaking change.\nYeah we would want the preset to always be updated to the latest version (via major bumps in both the babel transform and the babel stage preset) and babylon itself would update with minor bumps via new plugin names. Yeah the reason is just that you'd have to backtrack to know the start of the \"decorated node\". Cool didn't know about that one \ud83d\ude04 . Followup PR https://github.com/babel/babylon/pull/590. Awesome @wdhorton!!\nAs for test cases can you add hex, octal, binary and then error for exponential form (you already have the error for decimals)?. Yeah we can iterate when we get to the transform part if it doesn't fit, tests wise it's fine to me!. Thanks @wdhorton for the PR, let us know if you want help with the transform as well. Yeah it needs a runtime library like described in https://github.com/babel/babylon/issues/569. It's basically the syntax wrapper -> those calls to the library. It's similar to transform-runtime/regenerator in that way. Yeah I don't think we need all the reviews just pinging people anyway \ud83d\udc4d . Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yep sounds good to me!. > \"Interspatial parsing\"\nThat does sound pretty interesting to me, and I guess maybe that can be related to the whole immutable ast and caching that stuff?. Hey @karthiick! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. \ud83d\udc4d  thanks!. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @xtuc! I've moved your issue to the correct repository. Please make sure to keep an eye on the new issue for the latest information.. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @hegemonic! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Oh yeah we added back* ranges since it's not always necessary; https://github.com/babel/babylon/pull/363 only added it back in to emulate acorn/for webpack test (since we don't use it in babel itself). Hey @isiahmeadows! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jdmota! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @josephfrazier! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @azz! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jugglinmike! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jugglinmike thanks for reaching out \ud83d\ude00! I've also talked to @leobalter/@littledan a bit about this so definetely have had some interest for a while (also ref https://twitter.com/littledan/status/880436506996994048)\n\nAlso your previous link is referring to this issue currently. Prev issue I found was https://github.com/babel/babel/issues/4987\nHow should the Test262 project be included here? Some possibilities include a\ngit submodule or a git checkout that is fetched as necessary at test time\n(and excluded from the project via a .gitignore file)\n\nYeah could possibly a git submodule, I guess an npm package would be too slow to install? Otherwise a separate repo that downloads the babel repo (opposite approach) not sure, we can try it here.\n\nHow should the tests be executed? My initial guess would be to define a new\ntarget in the project's Makefile, but I don't know if you have portability\nconcerns with that approach\n\nYeah that's fine\n\nRelated to the above, how should test runs be scheduled? I imagine you'll\nwant a new \"job\" in the TravisCI system dedicated to this. They could be run\nas part of the npm test script, but this will likely be a little\nheavy-handed for general-purpose development.\n\nyeah new \"job\" just like we have for linting, etc. Not sure if it needs to run every PR yet since we'll need to figure out how to filter everything at first.\n\nWould you like these tests to run in anything other than the current LTS\nrelease of Node.js?\n\nyeah probably just lts\nAll your responses are reasonable \ud83d\ude04 . Closed by https://github.com/babel/babylon/pull/654\nAlso if you go to https://github.com/babel you can accept an invite to the org (read access so we can assign people to stuff, mostly for https://github.com/babel/proposals) but can give write access if anyone wants too cc @rwaldron who didn't accept yet either \ud83d\ude04 . https://github.com/babel/babylon/blob/master/CONTRIBUTING.md#creating-a-new-plugin-spec-new\nYeah I would:\n\n[ ] add an entry to the readme,\n[ ] update ast/spec. Nice work! \ud83d\ude04  First parser PR in the bag. We should start a discussion on the AST structure then (spec.md change). I don't think we need an AST repo, babylon is already that repo at the very least \ud83d\ude1b. Or just discuss in the proposal issue, I think it's fine, otherwise it would be an estree issue.. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yeah we already felt the issues with diverging earlier, so would rather not unless we decide to completely do so in v8. Basically it's not a lot of benefit to change 1 thing in the AST at the end of releasing v7. Hey @droooney! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @droooney! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Nothing going on, just don't have anyone doing backports/releases. @gabelevi we're focused (if I can even really say that for an open source project) on releasing 7 so hope it makes sense that we haven't really been looking into backports, etc.. Also as long as y'all are around when it's released to fix issues \ud83d\udc4d , that's a concern of mine too. https://github.com/babel/babylon/releases/tag/v6.18.0. Hey @fkling! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. relevant issue: https://github.com/babel/babel/issues/4722?. Hey @gabeklein! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. @gabeklein, thanks for the request! Sorry but it's not our intention to deviate from the spec! I know there's been an exception for JSX/types though. If you want a change then it would have to be a TC39 proposal by a champion at Stage 0 at least. We're not interested in adding other syntax to core even as an option.\nI would suggest forking the parser if you need this yourself. We have a few languages that do that which use Babel. Hey @charlike! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. @charlike no it's a good idea, had a similar thought earlier https://github.com/babel/notes/blob/23a33a109cc230119f7abd1348a0e8c4bed442d3/2017-06/june-21.md#babel-eslint about making an \"eslint\" plugin but espree works too since it would be the same thing. Yeah basically if we integrate that functionality in babylon itself we don't need babel-eslint to do that much stuff.\nNot sure what you mean about the full support/config of babylon though? and babylon does allow ranges as an option https://github.com/babel/babylon#options.\ncc @not-an-aardvark @kaicataldo on thoughts?. @charlike I think you are confused? Brian is saying I proposed the exact same thing you did, I just named it \"eslint\" instead of \"espree\". @not-an-aardvark In theory we should be able to remove everything in https://github.com/babel/babel-eslint/tree/master/babylon-to-espree, the scope stuff is in https://github.com/babel/babel-eslint/blob/master/index.js\n(babylon already produces ESTree via the estree plugin) https://github.com/babel/babel-eslint/pull/489. @danez this is for espree not estree. The idea is that we would move logic from babel-eslint into the babylon parser as a plugin, depends on if it's worth doing (possibly). Hey @Alphapage! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. We just did something like this for our printer tests (generator) https://github.com/babel/babel/pull/6018 with explicit flags. We could do unconditional for all tests though for now, if someone runs the stage 0 preset, it would be the same thing and none of the plugins should be incompatible.. is there already a script/way to remove the whitelist tests automatically if things are fixed later?. > There was not, but that's a good idea. \nLike it would basically run the whitelist tests and if they pass correctly instead of erroring/not erroring it could tell you to remove them (or it is done automatically), similar to updating a snapshot/fixture. oops I just merged https://github.com/babel/babel/pull/6056, which means we need to update yarn at least?\neither way unrelated to your pr. I updated Babel to use a new feature in yarn; I think we have to add https://github.com/babel/babel/pull/6056/files#diff-354f30a63fb0907d4ad57269548329e3L15 since the yarn version it's using now is older. Not sure it's going to fix but it's an issue due to us targeting master. Either way it would of broke in someone else's PR. Yeah we don't need that commit, I can try this locally and push a change. Yeah graceful-fs sounds good. Thanks for starting this @jugglinmike!. \n. Hey @ericbiewener! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @nicolo-ribaudo! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Yeah it was already an error in 6.x and I remember at the meeting we decided to make it actually an error but it got \"fixed\" lol so need to revert in a sense. Closed by https://github.com/babel/babylon/pull/670, thanks @Andarist!. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hm that's weird @andy-ms - the ordering shouldn't matter for the presets but I guess its an issue with another syntax plugin in https://github.com/babel/babel/blob/7.0/packages/babel-preset-stage-1/src/index.js? That seems odd. Fixed by https://github.com/babel/babylon/issues/663. Yeah, that happens a lot... Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @beck! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @janryWang! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. https://github.com/babel/babylon#faq\nWe should write a better guide on how to do it but yeah. Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @atmjs! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @pudility! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @JamesHenry! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Need to change https://github.com/babel/babylon/blob/master/ast/spec.md#privatename too then. original decorators pr is https://github.com/babel/babylon/pull/587. Hey @willin! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. This is expected since it's not in babylon itself: https://github.com/babel/babylon#faq\nIf pipeline is at least a Stage 0 proposal we would accept a PR to babylon. Yeah it hasn't been proposed at the last meeting and will be at the next one (I'l be there), so we would accept a PR https://github.com/babel/proposals. All good, you weren't at the meeting or know about it. It was supposed to be presented here but no time https://github.com/tc39/agendas/blob/master/2017/07.md. @pudility this task is a refactor; there is no behavior to implement - we need to split the logic. \nhttps://github.com/babel/babylon/blob/65bea96544561c68bdf84fa9f85bc7afdd3535c8/src/parser/statement.js#L1266-L1274 so that this.hasPlugin(\"exportExtensions\") is split. exportextensions used to be 1 proposal and now its 2.\nexport-default-from https://github.com/babel/proposals/issues/17\nexport-ns-from https://github.com/babel/proposals/issues/16\nthey are independent and at different stages so we should split them up. you just need to change this.hasPlugin to use 2 new strings, update the readme/docs, and update the folders/tests. @xtuc no it's alpha period so definetely would be part of the try it out/warning don't rely on this kinda of deal (in terms of using the preset not using the nodes). It's not something to worry about right now \ud83d\ude42. aside: to fix the babel tests, it links the PR's version of babylon with the master version of babel. If it's an intentional breaking change we would need to either merge a fix in babel master first, or just understand that the failing tests are intentional and merge/release. Maybe it should create a branch off of master each PR so that you could make a change to that branch instead of having to merge master.\nAnd ideally none of this would need to be an issue because I want us to merge this package back in to the monorepo (having to deal with this is one the reasons) https://github.com/babel/notes/blob/master/2017-08/aug-30.md#discussion-mostly-maintainence-related. Ok thanks so much for the discussions everyone, I know hard to balance wanting to keep the same AST, node names, extra code etc but I think it's worth doing too. And shoutout if help is needed for prettier integration after the next release and all that. Btw anyone is free to join in on the Babel meetings to bring up something, etc.\nGoing to fix the tests locally in Babel and then merge in a bit once I get that figured out.. Ok babel tests are going to fail until merge in master but it's ok.. Hey @jslz! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jseminck! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @jamieYou! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @Alphapage! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. https://eslint.org/docs/rules/no-restricted-syntax, https://github.com/amilajack/eslint-plugin-compat. Hey @tolmasky! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @tolmasky! I've moved your issue to the correct repository. Please make sure to keep an eye on the new issue for the latest information.. Hey @pudility! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. this is more of a support question, and not really related to babylon? I would ask in slack for further help but if you want to traverse up you can use path.find/findParent https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md. Oh must of missed it, trying not to look at it all the time \ud83d\ude04 .\nYou can probably just search up until you find the ExpressionStatement?. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @motiz88! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Probably not, didn't check though?\nIt's actually a proposal (although stalled since didn't hear about it): Generator arrow functions (=>*) | Brendan Eich, Domenic Denicola | 1 so if so it should be a plugin\n. Yeah I didn't think it would work, since we don't even have a plugin for it \ud83d\ude04, if we don't throw already we should though!. Hey @pudility! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Do you use the emails? slack pings build status already, and tag ci isn't necessary since it already builds to master. K i'l remove the email thing. Hey @pronevich! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Looks nice the way it is, but prettier wants the newlines... Thanks @rwaldron!!. Hey @EtherTyper! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. cool thanks \ud83d\ude1b!!. Where do we report that? could email support@github.com, done it a few times \ud83d\ude1b \n. Hey @janryWang! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @esprehn! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @traviskaufman! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @mbehzad! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. This will be better when babylon is merged into the monorepo. For the tests, I would check https://github.com/babel/babylon/pull/742/files which is similar\nCould do chained so a ?? b ?? c or multiline, or precedence check. Fine with merging now if we can get a PR for tests next, (logic shouldn't be any different). new PR https://github.com/babel/babylon/pull/762, should probably be LogicalExpression instead of BinaryExpression. Oh yeah that may be better actually. Hey @azz! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @andy-ms! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @mroch! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @mroch! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Hey @babel-bot! We really appreciate you taking the time to report an issue. The collaborators\non this project attempt to help as many people as possible, but we're a limited number of volunteers,\nso it's possible this won't be addressed swiftly.\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant Slack\ncommunity that typically always has someone willing to help. You can sign-up here\nfor an invite.. Nice, thanks @bmeurer! (and turning off comments in the parser saves a lot as well \ud83d\ude02), since honestly just need the license comments for Babel and should drop everything else. is this just 0 b/c there's let refNeedsArrowPos = { start: 0 }; at 550?\n. Is it possible to have a better error message here?\n. Yeah something like that. Could even give an example (we haven't really done that)\nI've been liking elm's errors/messages http://elm-lang.org/blog/compilers-as-assistants\n. \ud83d\udc4d  I like being able to change the error message. Unexpected token is not fun to see (my example is function a() { await b; }) without async in front of function\n. We can probably use ...args here and pass that down right? (although I see there's only 2 params)\nworks fine though\n. Nah all good \ud83d\ude04 \n. Oh yeah lol forgot I committed that\n. We can do that in another PR? Can ref https://github.com/babel/babel/pull/3693\n. just a thought: might be nice if this method wasn't taking in true, true (an object, named, etc) but I know we do that everywhere else ^ this.parseFunction(expr, true, false, false, true); \ud83d\ude04 \n. yeah to make it more readable - dono if it was done before for perf?\n. Ah interesting, thanks for the report\ncc @kaicataldo \n. Same issue in https://github.com/jscs-dev/node-jscs/pull/1204 \ud83d\ude04 \n. Array<string>;\n. Cool was wondering about a passing test \ud83d\udc4d \n. This file looks unrelated?\n. Is it easy to have have more specific error messages for these?\nlet { ...x, y, z } = obj; - spread has to be the last element (would result in the same value as the right hand side)\nlet { x, ...y, ...z } = obj; - cannot have multiple spreads (would result in the same value for both y and z)?\n. Maybe \"Cannot have multiple rest elements in a destructuring assignment\" or \"Cannot have multiple rest elements when destructuring\"?\n. > Can use \"Cannot have multiple rest elements when destructuring\". \ud83d\udc4d \n. These can be moved right below the while (!this.eat(tt.braceR)) { block right? - I guess it was left at the end as convention? Works either way\n. Oh I think I misread the last }!\n. Doesn't have to be done in this PR since it's a separate issue but we should make a better error message here (whenever we have a this.hasPlugin()\n. Yeah it's totally fine just a note so I don't forget - I can just make an actual issue\n. Maybe we can do a \nthis.unexpected(null, `Unexpected token, expected (`);\nhttps://github.com/babel/babylon/pull/150/files#diff-51a873a9697282bed0c15722a6ccf4e6R77\nnot sure if you can just use this.expect instead\n. Actually we can use https://github.com/babel/babylon/pull/172\nto do this.unexpected(null, tt.parenL);\n. yeah\n. do we have to remove watch if it doesn't need to use rollup?\n. Not sure - I don't think we do in Babel either?\n. might be able to just do plugins commonjs here due to the inheriting of the top level presets/plugins but this works fine. we should recommend the new transform, transform-async-generators. This is deprecated so can remove. this can be added back. i guess recommend transform-legacy atm?. it's an array so the wording is off (maybe we shouldn't recommend that option).\n{\n  parserOpts: {\n    plugins: []\n  }\n}. We should change it so that Babel users will use the transform plugin, and babylon users the syntax, and for Babel users not to use both.. We really need to do https://github.com/babel/babylon/pull/178. Do we do this elsewhere for other flags (false/true)? I think we might. Yeah we do have syntax plugins for every transform (otherwise we would just remove the syntax plugins entirely). Thinking about this again...\nmost if not all of the plugins have a corresponding babel plugin that is just the same name.\nobjectRestSpread -> transform-object-rest-spread\nasyncGenerators -> transform-async-generators\nthe only 2 that don't do that have a corresponding preset as well now\nflow -> preset-flow (strip-flow-types)\nreact -> preset-react (react-jsx)\nSo we could do this automatically + 2 exceptions?. -legacy will be removed (there's a pr to make it the regular one) https://github.com/babel/babel/issues/5283\nand ^ I said we always have a transform/syntax version so far at least. If you have time to finish this up, go ahead \ud83d\udc4d . Unnecessary whitespace?. It's probably specific to the parser/acorn, not common, we could probably just ignore for certain sections that aren't going to change much. That's just output though so it's fine?. We should see if we can setup greenkeeper or a bot to update the package + yarn @fkling . extra space? return  cls; guess we didn't have a rule for this, I guess we should land that prettier pr later. this actually used anywhere?. maybe @bakkot can help out with this?. Well stuff like this isn't fun. Yeah it's just not a good way to handle the types, dynamically adding the strings. maybe use ... instead of SpreadElement and tt.ellipsis. I think it's only this.#a, #a and #a = 1 in the class body? At least from the examples.\n. I might actually create a different error message for multi _, if it's at the end or the beginning, or around invalid chars but we can totally do that later too.\nCould be a good 2nd PR. Dang forgot about that \ud83e\udd14. Was there a reason this test didn't also have import.meta.couldBeMutable = true;? But the other did?. Similar to the other PR, we need to add a flag. I added the steps in https://github.com/babel/babylon/blob/master/CONTRIBUTING.md#creating-a-new-plugin-spec-new.\nhasPlugin('nullPropagation') or hasPlugin('optionalChaining'), etc. Probably optionalChaining since the repo was changed to that.. This test doesn't have an expected?. This test doesn't have an expected?. Or just // '.' like the other parts of the code. Could probably just move node.optional = true; to here since it's in all the if conditionals?. Yeah that was my thoughts dono if it was in the notes. Babylon would just throw and babel-core would pick that up and throw the real error message since you might be using babylon for something else (prettier, babel-eslint) that is unrelated to using a plugin. We can just use template strings here, don't have to change in this pr. lol this whole block. just not sure about this one, this is to prevent the lookahead/state from modifying each other right?. oh I didn't see the ^ lol. can rename the invalid-0 to just invalid-decimal?. What do we think about making the plugin name bigInt with camelCase?. Is it worth putting a comment here to explain we are removing the _ for numeric separators and n for BigInt?. Yeah I just meant for the plugin string not the tt.bigint in the code if that makes sense (I wasn't clear earlier \ud83d\ude04). Yep that's what I meant!. rawValue is basically the same as value and raw is just the actual string of the code\nthis.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));. Don't have to do this now, but we should figure out a better solution to this in the future (regarding multiple versions of the same kind plugin). Same kind of error as TS + Flow. Would this be the same question as for Numeric Separators? We have a babel-plugin-transform-es2015-literals that does binary conversion but only for regular numbers. \nhttps://github.com/babel/babel/pull/5793/files#diff-16974ce04e951262c4c093ce8d8a149cR94\nI guess in this case since it's a BigInt, we'd make the new transform handle it. I'd say the transform.. Should this error message mention no computed instead?. is it useful to say: instead of the export? or to explain it via example?. Not sure, I guess most of the time value works for all Literals depending on what you want via Boolean, Null, String, etc. I guess for this it's the same thing and can't actually be represented as a number\nI think it's fine to include it in the BigInt transform itself if es2015-literals are only going to handle binary, octal, etc for regular numbers.. I'm already like why would you ever do this \ud83d\ude42  but ok.. ^ in loose mode it's going to compile the class into a function anyway. @jridgewell said it's not worth it and it seems to not big that big a when anyway and to focus on the object shape instead. We'll need to somehow fork this with the hasPlugin check as well right?. I think you'll need to add this to else otherwise it would set it to null in all cases? And then rerun the tests fixtures. I was wondering whether the this.match check is necessary?. Ok never mind, talked to Kara and it makes sense. This is for the case you have the plugin on, but you choose to still use the binding itself.. Just need to add the ones in https://github.com/babel/babylon#plugins (excluding flow/jsx/typescript/estree). I think it's ok to only run on latest for these?. I don't think we need to run on anything other than latest node (8)? We can add it too if we really want to but I think it's fine to run one one version of node like we do for coverage and lint. could we do a depth=x here as well?. Yeah this problem was brought up by @motiz88, @danez in https://github.com/babel/babylon/pull/178/files#r87556780\nIf we make the error here I guess it's a different error if they just have import. vs import.asdf but maybe we shouldn't make a big deal out of it?. there's a bug somewhere if I don't have it if you want to look into that \ud83d\ude04 . no it's not yeah I just need a block if that works. this is ok now. updated. Good to know https://github.com/tc39/proposal-pipeline-operator/issues/60. Yes, should be easy to add/use here (would be good to find this kind of code on github/codebase and then do a codemod). https://github.com/babel/babylon/pull/762. ",
    "kittens": "Loefah - Babylon\n. Or Eprom - Beasts of Babylon\n. This isn't relevant to Babylon, this is the parser. Please open this issue on the Babel phabricator.\n. Parser plugins are a really good idea, they're just going to have to be more sophisticated than method overloading. Method overloading requires all the internal methods to be public API which is extremely fragile and prevents us from changing the core in any meaningful way.\n. This seems to just be the same as #5 so I'm closing this.\n. Sorry I haven't had a chance to look at this sooner. This looks good besides the fact that ParameterDecorator should just be Decorator. We already overload this node type for class decorators as well as method ones. We can look into splitting it up in a major but I'd prefer we stick to just Decorator for consistency.\n. I'm concerned that this would be a breaking change, we'll need to work out how to coordinate it.\n. Awesome, thank you!\n. Discussed this with @davidaurelio back when this PR was created but forgot to comment. Tokenising like this wont be reliable as the tokeniser uses some parser state to disambiguate a lot of things. The existing way to do this would be to do babylon.parse(\"code\").tokens;\n. What @loganfsmyth said\n. Can we make __clone always exclude comment properties?\n. @gabelevi Sorry for the delay. Were there any new node types/properties introduced that we necessitate changes to the code generator and traversal definitions in Babel?\n. Seems to be resolved?\n. We shouldn't add back browserify since there's no module deduping so there's always an extra version of core-js.\n. Fixed via #31.\n. @uMaxmaxmaximus don't report bugs then\n. Found it, due to some weird context issues with identifying whether { is a statement or expression.\n. Node position boundaries aren't specified anywhere so this is tricky, there's always going to be inconsistencies with this. I can see the argument either way for end being after the comma. I think it'd be a better idea that recast defensively checks for this to support other parsers that make the same choice.\n. Closed via #41.\n. We should move the AST docs from the babel/babel repo into here. This section in the README is really good though, thank you @nene! Super appreciated\n. We'll have to hold off on this until it's been specced and added to the facebook/jsx#57 repo. TypeScript and Flow also support JSX so there's value in having this specced there so they can come into compliance as we add support.\n. Thanks! We can follow up in the Babel PR.\n. Looks like Flow parses this so it's valid.\n. Removed a restriction that was inherited from esprima-fb that doesn't seem to be valid anymore. @jeffmo can you confirm?\n. Thank you @mathiasbynens! I wish I understood more about text encoding.\n. This is intentional. What behaviour are you proposing?\n. That's not very helpful, what node structure are you proposing?\n. It's going to be a breaking change, while we do have that luxury since we forked the AST from ESTree it's still tricky because we have existing transforms and Babel rarely has a major.\nThe existing node definition is good for transformations as it doesn't require every single transform that targets object patterns to know how and when to perform explosion of shorthands. The idea of making shorthands distinct is obviously appealing to the idea of a CST but I'm unconvinced that it's an appropriate modification to an AST that's (currently) targeted so generally at transforms.\nI understand it's annoying but IMO the pros far outweigh the cons as it leads to more reliable and solid transforms. I'm not convinced that the extra code needed to handle it is burdensome, for reference here is the code in babel-generator that handles it.\n. @markelog Can you elaborate on the complexity around traversal that you mentioned in the issue body?\n. Those issues just seem to be consequent of the fact that it uses the AST in conjunction with tokens rather than relying entirely on the AST.\n. Are you sure this is it? We don't export a default from this package\n. Thanks @gabelevi! I'll publish a new release now.\n. @hzoo Nope.\n. I pushed a new release just now, I'll run make test-babel to ensure that I haven't broken anything...\n. Awesome, thank you so much @vkurchatkin!\n. Thanks! Published as 6.8.3\n. Done.\n. Yay, this will also stop people doing dumb shit like this.\n. This logic should be done inside of plugins/flow.js via method overloading.\n. ie. you could do something like:\njavascript\npp.isClassMutatorStarter = function () {\n  return doSomethingHere;\n};\nand use this.isClassMutatorStarter() in the if check and then overload isClassMutatorStarter to do your checking.\n. This isn't super obvious but cloning state is actually super expensive, for example there's a tokens array on there that gets cloned and this can sometimes number in the tens of thousands for really large files.\n. Oh great, just noticed that state is only used within the JSX if, you can just move it into there. It should resolve the more pathological cases but the perf issue will still be there. We should really use babylon to use immutable data structures so this state cloning is really cheap.\n. Double quotes\n\n. expectContextual is probably best here.\n. expectContextual(\"module\") just so we have more assertions\n. ",
    "tomByrer": "https://www.youtube.com/watch?v=bpA_5a0miWk\n. ",
    "tommyZZM": "solution\nusing deasync\n``` javascript\n\"use strict\";\nconst deasync = require('deasync');\nfunction asyncfn(callback){\n    //...pipe(...).pipe(...).pipe(...).on(\"finish\",()=>callback(null,\"haha\"))\n}\nlet asyncfnSync = deasync(asyncfn)\nexport default myplugin = ({ type:t }) => {\n       let visitor = {\n            stringLiteral ( path ) {\n                let result = asyncfnSyny(path.node)\n                //haha..\n            }\n       }\n       return {\n            visitor\n       }\n}\n```\n. ",
    "lukehorvat": "Just piggybacking on your PR here...\nI fully support the idea of external plugins. But given this may not be merged for quite some time, I've built a tiny wrapper around Babel v6 that supports such plugins, aptly named Babby. Anyone who is interested, feel free to check it out and help me make it better.\n. I should clarify. Babby is just a small (and, as you rightly said, fragile) experiment I hacked together to show what is possible. A proof-of-concept, basically. I would much prefer to work in collaboration with you guys on an \"official\" fork that we can eventually merge into Babel one day.\n. ",
    "IgorMinar": "EDITED: I mistakenly wrote \"function expression\" when I meant \"function declaration\". it's now corrected.\nFunction declaration decorators and function parameter decorators have been\nexcluded from the proposal due to semantical issues (primarily the temporal\ndead zone issues).\nIt wouldn't hurt to have syntactical support for these two so that we can\nexperiment with various implementations to get the semantics right.\nI do expect that over time, especially if the implementation based on\nmirrors is picked as the winner, function declaration decorators and\nfunction parameter decorators will be included in the proposals.\nOn Tue, Mar 22, 2016 at 8:52 AM Shuhei Kagawa notifications@github.com\nwrote:\n\n@thejameskyle https://github.com/thejameskyle I've updated the code to\nuse ParameterDecorator type as you suggested.\nAlso, I've excluded function parameter decorators because the proposal\nhttps://docs.google.com/document/d/1Qpkqf_8NzAwfD8LdnqPjXAQ2wwh8BBUGynhn-ZlCWT0/edit#\nsays:\nFunction expression and function declaration parameters\nThis proposal currently targets only method parameters, because function\nexpressions and declarations don't currently have a proposal that would be\nin Stage 0 or higher.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/babel/babylon/pull/12#issuecomment-199877750\n. I'm fine with either. If excluding function declaration and function\nparameter decorators makes it easier to get this merged then go ahead\nwithout those two. We primarily care about function expression decorators\nand method parameter decorators.\n\nOn Wed, Mar 23, 2016 at 4:21 AM Shuhei Kagawa notifications@github.com\nwrote:\n\n@IgorMinar https://github.com/IgorMinar I'd like to parse function\nparameter decorators too but I'd rather want this PR to be merged sooner.\n@thejameskyle https://github.com/thejameskyle What do you think about\nsupporting function parameters decorators at this time?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/babel/babylon/pull/12#issuecomment-200302190\n. @hzoo @thejameskyle is this PR good? Can we get it merged? thanks!\n. \n",
    "silkentrance": "@loganfsmyth It seems that Parser#parseDecorator() will swallow up the asterisk and parse everything until after the method's name, or rather what it considers to be a call expression, i.e. @decorator * gen() seems to be parsed as a single expression here, which it is not.\nAnd since Parser#parseDecorator() calls upon Parser#parseMaybeAssign() I am quite unsure how to proceed further as this is being used all over the place.\nPerhaps a little help from you guys?\n. For reference: @jayphelps proposed a different production for decorators here:\nhttps://github.com/wycats/javascript-decorators/issues/23#issuecomment-192962746\n. @loganfsmyth well, you seem to be the go-to guy in all aspects, so I thought that maybe you can call upon someone to also have a look into this, so maybe with the help of @wycats this can then be sorted out, chiming in the guys who implemented babylon and fixing the issues as the spec gets updated...\nwhile I continue to figure out how the code works... :grin:\n. @hzoo thanks for pointing this out. I will check the fixtures and see whether the file is there.\n. @hzoo I didn't realize it but the expected.json was generated and seems to be fine.\n. @hzoo I have added additional test cases for testing \"fringe\" use cases of decorators and also invalid uses such as @a?b:c. The latter stands for arbitrary left hand side expressions which we must prevent here in order for being able to decorate generator functions.\nAlso adds missing tests such as You can't attach decorators to a class constructor and code requiring the asyncFunctions plugin. Including also decorating static [generator] methods.\nSee test/fixtures/experimental/uncategorized/[63..75].\nI need you or someone else to review the generated expected.json files as I am not that familiar with the AST the babylon parser generates.\n. @hzoo @wycats How does or can the alternate use of parseExprSubscripts() instead of parseMaybeAssign() fit into the current decorator specificaiton proposal and how can it fit into the alternate proposal I made?\nWhile parseMaybeAssign() is a realization of LeftHandSideExpression, what does parseExprSubscripts() stand for? Is it just IdentifierReference and CallExpression?\nAnd since IdentifierReference also includes yield, isn't that way too much for a simple use of a decorator?\n. ",
    "machty": "I'd love to be able to experiment with this syntax for ember-concurrency.com\nEmber.Object.extend({\n    @restartableTask\n    *doStuff() {\n      // ..\n    }\n})\nbut I'm running into this same issue. While there are probably a handful of things that need to be settled about decorators, @wycats tells me the above syntax is uncontroversial; would it be possible to sneak in a fix just for the above (without having to wait for a brand new plugin)?. ",
    "markelog": "yeah\n. I'd say it is a matter of interpretation - like in ast it is definitely an identifier, whereas in tokens list it is could be interpreted as keyword (and might be useful in some situations), although, tokens are needed to do an ast and it is pretty hard to distinguish it from other entities, since those and this token are identical, so we would need to analyze the surroundings and stuff. On the other hand other tokenizers consider this a keyword.\nI think everybody would win if we would add a clarifier - another flag, property. As a bonus no one would consider this a breaking change, if that sounds acceptable we can provide a pr btw.\nAlso, on the side note - i think for the case like\njs\n({ \"something\": 1 })\nkeyword property for something token shouldn't be an undefined but false?\n. You will get two and same Identifiers while traversing when it seems there should be only one and also see https://github.com/cst/cst/blob/996ce8451d1bdf14e06439533499d2e320cb3342/src/elementTree.js#L105-L119 \n. And there is an example of code generation issue - https://github.com/cst/cst/issues/127, since there is two identifiers they are duplicated\n. > Those issues just seem to be consequent of the fact that it uses the AST in conjunction with tokens rather than relying entirely on the AST.\nYes, that's part of the issue, same kind thing could be viewed with any traversal though, like:\n``` js\nlet i = 0;\nlet ast = require(\"babylon\").parse(\"({ test = 1 } = {})\", {});\nlet result = require('estraverse').traverse( ast.program, {\n    keys: require(\"babel-types\").VISITOR_KEYS,\n    enter: function (node) {\n        if (node.type === 'Identifier') {\n            i++;\n        }\n    }\n});\nconsole.log(i); // 2\n```\nOr if you found a token and you want to understand for which node this token belongs to, you can find it by comparing position of the node and token since it has belong to the only one node right? That would be the assumption i guess, but in this case it wouldn't be true.\nI understand you don't want to change that because you don't need this and we are only one consumer of this AST who is mentioned it, so there is could be any justification for denial really :).\n. >  so there is could be any justification for denial really :).\nBy that, i mean if you don't want to change then no big deal, we would be just force to add couple hacks, in any case it seems you made your mind already\n. Moved where?\n. Yey!\n. ",
    "mdevils": "Keyword token plays role of a keyword. In this case it's just an identifier.\n. The one which does not repeat Identifier twice and does not require changing it in two places when modifying AST I guess :)\n. First thing comes to my mind.\n```\nObjectPattern {\n  properties: [ AssignmentPatternProperty | Property ]\n}\nPropertyAssignmentPattern <: Node {\n  key: Identifier\n  pattern: Pattern\n}\n``\n. To be even more precise,Propertydoes not really matchObjectPatternwell since it had a lot of fields that are not relevant toObjectPattern. I predictObjectPatternProperty` in some bright future.\n. ",
    "babel-bot": "This issue has been moved to babel/babel#6724.. This issue has been moved to babel/babel#6723.. This issue has been moved to babel/babel#6722.. This issue has been moved to babel/babel#6721.. This issue has been moved to babel/babel#6720.. This issue has been moved to babel/babel#6719.. This issue has been moved to babel/babel#6718.. This issue has been moved to babel/babel#6717.. This issue has been moved to babel/babel#6716.. This issue has been moved to babel/babel#6715.. This issue has been moved to babel/babel#6714.. This issue has been moved to babel/babel#6713.. This issue has been moved to babel/babel#6712.. This issue has been moved to babel/babel#6711.. This issue has been moved to babel/babel#6710.. This issue has been moved to babel/babel#6709.. This issue has been moved to babel/babel#6708.. This issue has been moved to babel/babel#6707.. This issue has been moved to babel/babel#6706.. This issue has been moved to babel/babel#6705.. This issue has been moved to babel/babel#6704.. This issue has been moved to babel/babel#6703.. This issue has been moved to babel/babel#6702.. This issue has been moved to babel/babel#6701.. This issue has been moved to babel/babel#6700.. This issue has been moved to babel/babel#6699.. This issue has been moved to babel/babel#6698.. This issue has been moved to babel/babel#6697.. This issue has been moved to babel/babel#6696.. This issue has been moved to babel/babel#6695.. This issue has been moved to babel/babel#6694.. This issue has been moved to babel/babel#6677.. This issue has been moved to babel/babel#6693.. This issue has been moved to babel/babel#6692.. This issue has been moved to babel/babel#6691.. This issue has been moved to babel/babel#6690.. This issue has been moved to babel/babel#6689.. This issue has been moved to babel/babel#6688.. This issue has been moved to babel/babel#6687.. This issue has been moved to babel/babel#6686.. This issue has been moved to babel/babel#6685.. This issue has been moved to babel/babel#6684.. This issue has been moved to babel/babel#6683.. This issue has been moved to babel/babel#6682.. This issue has been moved to babel/babel#6681.. This issue has been moved to babel/babel#6680.. This issue has been moved to babel/babel#6679.. This issue has been moved to babel/babel#6678.. This issue has been moved to babel/babel#6676.. This issue has been moved to babel/babel#6675.. This issue has been moved to babel/babel#6674.. This issue has been moved to babel/babel#6673.. This issue has been moved to babel/babel#6672.. This issue has been moved to babel/babel#6671.. This issue has been moved to babel/babel#6670.. This issue has been moved to babel/babel#6669.. This issue has been moved to babel/babel#6668.. This issue has been moved to babel/babel#6667.. This issue has been moved to babel/babel#6666.. This issue has been moved to babel/babel#6665.. ",
    "kaicataldo": "I wrote the fixes for Espree and was planning on porting it over - looks like you beat me to it!\n. Looks like this has actually been fixed :tada: https://github.com/babel/babylon/blob/master/src/parser/expression.js#L191-L199\n. Working on this!\n. Sorry for the delay - finally got around to this: https://github.com/babel/babylon/pull/107\n. Looks like the CI tests are failing because of test files in Babel plugins that contain duplicates exports in the same file. I think it'll require similar changes to this PR: https://github.com/babel/babel/pull/3518. \nHow are cross-repo changes like this usually handled? I'm happy to make the necessary changes in the Babel repo, including reverting the band-aid fix for duplicate default exports if and when this PR lands.\n. Cool! Should I go ahead and make a PR to the main babel repo?\n. Thanks for all the info on this! One more question - do you think I should split the changes into batches? Splitting each one of those files into multiple files is going to be a pretty massive diff.\n. Finally started in on this, though might take me a few days. Doing it in chunks because there are a lot of changes.\n. Finally got around to fixing those tests! PR open here: https://github.com/babel/babel/pull/4538\nI mention it in the issue as well, but will also make a 2nd PR that removes the initial band-aid fix that was merged into Babel itself and to rename the test files so they follow the convention used in the currently open PR. I plan on getting to this tomorrow!\n. Opened one more PR that reverts the commit I made that throws a warning in babel itself since we have moved that into babylon. I also updated the test names so that they match the convention I used in my more recent PR that was merged today. Let me know if you need anything else!\n. Just realized there actually is a PR open already (sorry, thought that only discussion had occurred), so I'll go ahead and close mine.\n. @motiz88 Actually, looked at your PR and the solution I came up with is very different. Don't want to step on your toes here, but let me know what you think of this: https://github.com/babel/babylon/compare/master...kaicataldo:betterawaiterrormessaging?expand=1\nIf you think it looks good, I can make a PR with this - just wanted to check in with you since you've already done work on this.\nThese changes would also fix part of this issue: https://github.com/babel/babylon/issues/134, warning for when enum and await are used as identifiers when source type is module. The implementation of better error messages for await is kind of tied to disallowing await as a reserved word (for AssignmentExpressions, since that all happens in expression.parseExprAtom()), and making a generic solution for both reserved words made more sense to me than only implementing await.\nWould love to hear what @danez and @hzoo think too!\n. I'm actually going to see if I can extract the reserved identifier checks out so it's easier to see how all this fits together. Running into some challenges with my own solution - it works great when source type is module, but might actually have to do some kind of flag in state when an await keyword is found for when the source type is script, since identifiers are allowed to be called await. The easiest thing is to have smarter warnings for source type module and keep the same warnings for source type script.\n. Edit: Ah, actually, scratch that - forgot to include the classProperties plugin. Looks like it is indeed fixed!\n~~Testing locally with the current master branch, I'm still seeing a parsing error when Babylon tries to parse:~~\nclass Cat {\n  symbol = 10;\n  [symbol] = 10;\n}\n~~yields~~\nSyntaxError: Unexpected token (2:9)\n. I'm interested in looking at this! I have a few other commitments but can try to look at this soon. If someone else has the bandwidth right now though, please feel free to take it on.\n. Yes! I started looking at the let in strict mode issue, but haven't started on the others.\n. @hzlmn Absolutely - don't want to be a blocker. Thanks for looking at this :)\n. @hzlmn I recommend starting with some tests, since you know the desired result. It'll help guide what you do a lot!\n. ~~I just realized another issue I'm working on has some overlap with this one (https://github.com/babel/babylon/issues/113), so I should be covering the await portion of this task~~\nI ended up closing that other PR because I found out someone else was already working on it. I can extract the await portion out of it if you want, but otherwise, have at it! Sorry for the confusion!\n. As a quick update on the state of this issue: \nThe enum and await part has been taken care of. However, the second part regarding let in script mode still needs to be done.. @mannanali413 Please feel free!. I can try to take a look at this this weekend\n. Okay, sounds good - sorry for the issues with this :/\n. Updated - thanks!\n. @danez I know we spoke in Slack, but wasn't sure if there is anything I need to do for the failing codecov checks?\n. Whoops, was just made aware of https://github.com/babel/babylon/pull/125. Going to go ahead and close this.\n. Looks like I might also need to write some more tests to get higher coverage\n. @hzoo How do these changes look? I removed the check and tests for renamed destructuring assignments and centralized the reserved word checking logic. Wanted to double check before fixing all the tests (129 failing tests now because the error message has changed to the more generic one) :)\nI definitely think this will be easier to maintain :+1:\n. Updated! Let me know if there's anything else that needs to be done. Will follow this PR up with another one that uses the checkReservedWords() method to check for reserved words for renamed destructed assignments (since those are not currently checked).\n. @danez @motiz88 Thoughts on this approach? Let me know if there's anything else I can do to land this. \nAs a follow up I'd like to check renamed destructuring assignments for reserved words (currently not checked) as well as look into the other half of this issue (allowing let as an identifier name in non-strict mode). Should be easy to do with the foundation set up in this PR.\n. Unexpected token, expected ; is a really confusing message. Seems to me like the error message should just be Unexpected token in those cases where there isn't an expected value.\n. Ohhhh okay, I see now. This read to me like \"Unexpected token, expected {missing token value};\", but I see that ; is the token value.\nI wonder if we can make this clearer (I think the comma also makes it grammatically confusing at the moment). Thoughts on having it read like this? \nUnexpected token; expected token \";\". (2:7)\nHappy to make a PR for this if others like the idea!\n. > Thinking about it more, we run the Babel test suite in CI against each Babylon PR, right?\nYeah! Seems like we could run that CI test against the bundle?\n\nIt would be nice in general that the tests maybe not use the rollup bundle, so that we can have proper unit tests, right now the only thing that can be tested is the public API.\n\nCould it make sense to split this out into unit and integration/behavioral tests and not bundle for the first and then bundle for the latter?. Maybe it would make more sense to separate these two tasks out? I don't think these two things have to be tied together. Seems like we could just do the watcher script in this one and we then have the env's to take it further for testing, etc. in a future PR? My intention with this was just to add a convenience for us devs :). Updated to just add a watch script. Hmmm, actually, going to explore checking token values ahead of time rather than the node type afterwards. Updated. Sorry, one last update - added return value flow type and moved the shouldParseExportDeclaration method back to where it was before I removed the other methods. I'm pretty new to Flow - let me know if this isn't the correct fix for this test\n. Yeah, was trying to follow the style I saw elsewhere, but agree. Would you like me to change that to an object?\n. I assumed it was done this way for performance reasons\n. Oh wow, that makes sense. @danez Let me know if you need me work on a fix - happy to do it.\n. These are all unique identifiers and should parse without error\n. I'm still unsure how we can safely insert a better error message for this case, given that this needs to be allowed: https://github.com/babel/babylon/blob/master/test/fixtures/esprima/es2015-identifier/valid_await/actual.js\nIf it must be surrounded by parens, we can definitely make that warning. Otherwise, not sure how to do that one. Any ideas?\n. Moved this into the checkReservedWord() method to put all the reserved word checks in there\n. I wonder if we should just combine development and test, since they're the same? Maybe just production and development?. Oh I see, it's for the plugins. Never mind!. After discussing a bit with @hzoo, I changed it to an ahead of time check rather than checking the export statement post-parse. This actually changes the error message in some cases, so wanted to see what do you think. \nIf we want a more descriptive error message I could leave the original conditional and do the shouldParseExportDeclaration check (maybe now called isDeclaration?) inside that block, throwing a more descriptive error if isDeclaration returns false.\nMy only concern with the error message is that I'm not sure we can be sure of what the intention of the code is. If Babylon is trying to parse export typeof foo, can we surmise they intended to export a declaration? Or did you mean a more generic \"Not a valid export\" type of message? Let me know if I'm missing something!. Ohh yeah that could be better :+1:. ",
    "ghost": "Please accept this PR, as I am running into the issue mentioned in eslint/eslint issue #6090\n. Bump. Is there anyone available that can merge this PR?\n. I will break my silence :)\n@hzoo Implementing such things will take a huge amount of time, and need rewrite of current code base, and you also would need a \"scope tracker\" to catch this errors. This is not done in one day. I have in depth experience with this process because I actually made my own ECMA parser that is 100% spec compatible. Hopefully it will be released to public by next month. A lot of code cleanup to fix, but everything passes. And in the development process I also discovered that Babylon parses tests that is invalid when it comes to specs. This you will see if you try to parse many of the other TC39 tests - not only early-errors.\n@kuraga Kewlr has nothing to do with a Ecma parser. That script does what it say it should do. Anyway. Do you need the source code?. @hzoo If I'm not mistaken, the only usecase of Babylon is Babel? So the question would also be if it's needed to cover the specs 100%. That almost all TC39-262 pass and pass-explicit tests should pass, I take for granted. I choose to say allmost because if you deep dive into this, you will be surprised to learn that some of the TC39-262 tests itself violating the specs.\nAnd also semantic and syntactic errors should be catched.\njs\nfunction l() { '\\12'; 'use strict' }\nfor (a i\\u0074 e) break;\nfunction* l() { ([e=yield])=>12 } // semantic or syntactic\nFor this errors, you need to rethink the location tracker because where in e.g. function* l() { ([e=yield])=>12 } is the invalid code located? In the middle, the end or in the beginning? That's valuable info to have when you throw an error. And if the error occur at the beginning, or in the middle, do you really need to excute the rest of it?\nAnd mixed into all this. You need to think about the performance too, because it can cause huge performance hits to track all this errors :) And Babylon isn't the fastest ECMA parser I have seen either - but among the fastest it is.\nBut once again. This will take a huge amount of time to fix, but it's possible. And in the end if you fix all this, and keep an eye on the performance, you hopefully will get a performance hit too. Something like this:\n```js\n-----------START---------\n source:  angular.js\n0.06869627602631578 '(--)' // my parser\n0.20692217294117649 '(esprima)'\n0.14585379580952385 '(acorn)'\n------------DONE---------\n-----------START---------\n source:  jquery-1.9.1.js\n0.02817654231818182 '(--)'  // my parser\n0.07587770097222221 '(esprima)'\n0.06680029882500002 '(acorn)'\n------------DONE---------\n```\n. @loganfsmyth Maybe you are right :) But according to astexplorer online parser it can be there.. @loganfsmyth I know. I've looked into source code of astexplorer. By the way thanks for your answer.\n. ",
    "danez": "Ok I changed it so that __clone is now always excluding comments.\n. Yes this was Fixed in 6.9.0\n. We have the latest babylon running in browser bundled with webpack at my company, and don't have a problem. Though we don't have babylon flagged as noParse.\nWhat was the initial reason to bundle babylon with browserify?\n. I tried to solve this some months ago, but couldn't figure out how to fix. This not only happens for delete but also for some other keywords, can't remember which. Maybe void.\n. js\ndeclare class A {\n   while<T>(): void; // this parses\n   do<T>(): void; // this does not\n}\n\nThe input code should parse, however it errors at the '<' after the 'do'.\nThe above fails to parse because the 'do' keyword is marked as {beforeExpr: true} in tokenizer/types.js.\nThen tokenizer interprets the '<' after the do as the start of a jsx tag, rather than as a relational '<'.\nThe 'while' variant works because it is not marked beforeExpr.\nThe above will repro with any method whose name is a keyword marked with beforeExpr true, which are:\ncase, default, do, else, return, throw, new, extends, yield, in, instanceof, typeof, void, delete.\n\nhttps://phabricator.babeljs.io/T7284\n. No both are not working yet.\n. yes\ndeclare class A {\n   while<T>(): void; // this parses\n   do<T>(): void; // this does not\n}\n{\n  \"sourceType\": \"module\",\n  \"plugins\": [\"jsx\", \"flow\", \"asyncFunctions\"]\n}\nUnexpected token (3:2)\n. Did you already start with 6.8.2? I could do 6.8.2 otherwise\n. Yes\n. I just did a git bisect and this is the result:\n\nd15a2310cd405cb0bbfae1fbeb12d8ffbd4e28cb is the first bad commit\n\nI will have a look what my change broke.\n. After digging around I also found this case which is not working anymore:\na ? (b): c => d\nBecause babylon with flow now sees the \"valid-looking\" arrow function (b): c => d.\nThinking about reverting my change and then reopening the other bug and redoing the fix with this in mind.\n. This approach does not work anymore, need to find another solution\n. Thanks for reporting, I will have a look later today.\n. I created a PR #63 with a fix for this. Trying to get out a release asap.\n. Yes, I want to run more profiling on babylon, I saw some possible candidates, but I need to check them. Gladly it is really nice, easy and fun to do profiling with chrome dev tools and node 7.\n. That might be related to #59. I can check tomorrow.\n. Oh sorry I was reading it on the phone yesterday and thought you said that you get an syntax error when parsing nested ternaries. :)\nIn the given example there would be no backtracking involved now with this PR (i added one more check), as the flow optional operator can only be inside parentheses (a?).\nIf your example would have parens around every ternary then it would do n backtracks where n = number of nested ternaries if I'm not mistaken, which should be linear.\nBasically the flow plugin is only wrapping the parsing of conditionals into a try-catch-clause and doing a backtrack when a SyntaxError happens, so that other parts of the flow plugin can validate it as valid optional param.\n. Maybe it was because of the recent react update? But I also can't see a relation to babylon.\n. Ah, I never checked the errors array. Stupid me.\n. Yes I opened #73\n. I changed the error message to be a little bit nicer.\n. I found a solution to fix it. Luckily we already have a lot of information about parenthesis in extra.\n. I don't think this is an issue with babylon. babylon is just parsing code, but not doing any changes to it. This might be better to report here: https://phabricator.babeljs.io/\n. \ud83d\udc4d \n. Good catch. I wonder if we have the same problem with  tt.plusMin\n. Yes I also couldn't figure out an example.\nThanks \n. Good catch. Thanks for your contribution. lgtm\n. I also started restructuring and renaming the test dirs\nat first i wanted to do something like\n--es\n  -- 2015\n  -- 2016\nbut babel-helper-fixtures is limited to how deep one can nest dirs, so I did this now:\n-- es2015\n-- es2016\nGonna do all in this PR.\n. I'm not sure how to proceed with classConstructorCall probably we can just remove it with the next major. Should we log a warning if it is used already?\n. Yes seems this was fixed. We should add a testcase for this.. Thank you for your first PR to babylon. \nIn order to get this working throughout the complete chain of babel, all the new node types (I think it is only DeclaredPredicate  and InferredPredicate) need to be added to babel-types and babel-generator\nCould you do that and create a PR for babel?\nI would wait with the merge till we have a PR in babel and the new flow version is released.\nGreat work!\n. Thank you for bringing the new feature immediately to babylon. We recently are a little bit behind the flow specs with other features, and I'm really happy to see more help in bringing the new features to babylon.\nI have two small nitpicks (see comments) but otherwise looks really good. To make the complete chain of babel work with this change there also needs to be a PR to babel that makes babel-generator aware of the exact field so the syntax can be printed again. Could you make these changes there?\n. Coverage looks good and you can create the PR already for babel. The tests will fail there of course but that is okay for features that span over both repos.\n. Ah you were faster with your reply ;) yes this is now perfectly fine. We are going to merge the change in babel after babylon gets released.\nThank you\n. Good job. That looks really good. The flow test looks good. \ud83d\udc4d \nThe tests of babel now fail, but this is okay for now, but we would need to correct them at some point, before we release this.\n. Yes that would be nice. Thanks.\nOh for some reason I did not see the other comment of you. So there is no real workflow yet on how to do the cross-repo stuff. I described in this PR how to link babylon in babel. I should really but that in the Contributing file.\nhttps://github.com/babel/babel/pull/3700#issuecomment-244622489\n. Ah sorry, for not answering. As long as the changes belong together I think they should go into the same PR imho. And I think this would account for this case.\n. This was fixed in master when we enabled flow again.. Fixed as of 6.17.0. Thanks for contributing.\nThis looks really good, the only thing that I'm worried about is how the ambiguous cases are handled. For example this class:\nclass Bar {\n   [x] = blub\n   ['y'];\n}\nDoes it contain two or one properties? I would assume one with a value of blub['y']. But I'm not sure what the spec says about this if it does.\nWhat would your changes produce for this example?\n. I found this\nhttps://github.com/tc39/proposal-class-public-fields/issues/25\nNot sure what the current status is, but semicolons might be required in the case i posted.\n. Good catch. So it probably also throw with properties.\n. @jeffmo what will the spec say about this case? Or is it not yet decided?\nclass Bar {\n   [x] = foo\n   ['y'];\n}\n. That is awesome thanks.\nRegarding the breaking change, I think we had cases like this in the past where we made the parser more spec compliant which might break peoples workflow if they were relying on this wrong behaviour or had it by accident in their code. This PR is exactly the same case and imho we should make this a patch, as being compliant to the spec should be considered important to spread quickly, no matter if es, flow or jsx. Most of the time it is probably a bug anyway. We probably should add a note in the changelog about \"more strict spec for ...\" though\nAs flow is also failing on this, there are probably also not a lot of cases were people use this (if so it might be a bug in their code anyway) and people relying on this fact should be 0, at least I can't make up good reason for doing that.\nAnd of course:\nhttps://xkcd.com/1172/\n. Looks good. In general it would be nice if different fixes could go to different PRs as it is then easier to understand which change is for which fix, but in this small case it does not really matter.\nThanks for all your contributions.\n. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. I think this is the intended behavior.\nOctals starting with a 0 are not allowed in strict mode see here\nYou need to set the sourceType to \"script\", but then you probably can't use classes and import/export as they imply strict mode (http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code)\nEdit: logan was faster :)\n. \ud83d\udc4d\n. Awesome.\nThis issue contains 2 issues I think (throw for invalid identifier and the let keyword which should be usable in script mode, although not sure for the last). Feel free to only fix one of them first if its easier.\n. Awesome thanks\n. Thank you, this was also reported in #112.\n. Thank you\n. Upps wrong button :D\n. This version only supports node 4+ anymore.\n. Is trailing comma allowed in this case?\nconst { x, ...s, } = obj;\nbecause this seems not to be allowed:\nconst [ x, ...s, ] = arr;\n. Good catch, thanks for reporting.\n. I'm not entirely sure, but it seems both should be the same. Not sure though if both should be encoded or not, but the double slash seems wrong yes.\n//cc @mathiasbynens \n. Fixed as of 6.17.0. @motiz88 Should we do the issues that @bakkot reported in a new PR or also within this one? Maybe you already have an idea if it will be easy or not to fix. I can create an issue otherwise.\nBesides that looks good to me.\n. Hey @motiz88 What is the status on this? can this be reviewed and merged or is there still stuff open?\n. obsolete as of #351 . I think what also needs to be considered before even switching is that building front end tooling in javascript, makes the audience of potential contributors to your project way bigger. If you are using some less common language like Rust, C++, OCaml, ... then a big portion of the people using the tool, might not be able to fix stuff on their own or contribute back, because they are not familiar with the language and how it works. I think this is also big part of the reason why webpack, browserify or babel are so popular because even though they are complex codebases, I might still find the reason for an issue that I experience or can make simple additions because I'm familiar with javascript and work with it on a daily basis and exactly know how it works.\nA concrete example is that my company currently has major memory problems with node-sass/libsass, which is written in C or C++ and we cannot simple fork and fix, because none here is an expert in C and can fix memory leaks. So it makes us completely dependent on the maintainers (which in that case are very active luckily). sass/node-sass#1669\n. Thank you\n. with eslint-config-babel\n. @motiz88 Can you have a look and see why the babel tests now fail with this PR? One sems fine, but have no idea about the other failure.\n. Holy crap, I wasn't aware we have so much dead code. I'm going to merge this now.\nAwesome work.\n. I think this would also be the only way to do it in this cases right? Because otherwise doing this.eat() && this.expectPlugin()would change the location of the error.\nSo yes that sounds good\n. True, so probably we need to decide for each occurrence separately.\n. Do you think it is okay now that the babel tests are only running on the latest node version? I'm not sure if it should stay like it is or run on all supported node version now that we count it towards the coverage.\n. agree, maybe even the latest node version\nedit: Uppps wrong button\n. \ud83d\udc4d \n. Thanks for the PR, have just on micro performance change that would be nice to do, and 2 questions.\n\ud83d\udc4d\n. Sorry I was on vacation and just got back, can merge tomorrow and try to get a release soon.\n. Node 7 fails with this:\n... \\u0062\\u0072\\u0065\\u0061\\u{006B};\n\\u0062\\u0072\\u0065\\u0061\\u{006B};\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Keyword must not contain escaped characters\n. Ok so I merged #240 and if you rebase you can create a second fixture runner for parseExpression.\nAs for the folder name maybe expressions or expressionFixtures?\nAnd you need to copy index.js and adjust it for the expressions.\nRight now both of the new functions are uncovered, so at least enough tests to cover all lines. (https://codecov.io/gh/babel/babylon/commit/e800d72acce6763ab7db5d1e837ddfd31687b890) Maybe some counter tests (as discussed above) to see that a)( and ==b don't parse.\nIf you have already more tests in is-expression-babylon for edge cases/regressions which you want to move here, this is also fine. More tests is always fine. :)\nSorry that it took so long.. Could you please rebase the commit on current master? The commit it is currently based on seems to be broken, that's why codecov is not updating.. Can you elaborate more on the new option you added? From your comment it sounds that this is added because of performance reasons? Somehow throwing an exception, because it is slower doesn't make sense to me.\nIn general I'm a little bit opposed to the new option, as we try to be complete ecma-script parser and not a customizable parser where certain (specified) features can be turned off/on.. Thanks\n. Thanks for reporting, closing as duplicate of #185. Awesome, thanks for the contribution. Looks good, but I'm currently on my phone will check later when I'm home.\n. I'm going to merge this for 7.0. If you still want to change flow at some point I'm happy to revert it, but I think it is more important right now to be more consistent with the flow parser.. This was just changed so that the expected ; in #150. What do you think is buggy here?\n. It would be nice in general that the tests maybe not use the rollup bundle, so that we can have proper unit tests, right now the only thing that can be tested is the public API.\nAnd then use rollup only for publishing. Although it is probably also nice to know that the rollup bundle works as expected.. I changed it so that the tests run without rollup.\n@DrewML Do you think this is okay?. Yeah true, feel free to reset the branch to your commit and force push.. This is definitely a bug. Thanks for reporting. As a workaround you can use this:\njs\nconst test = async function<T>(fn: () => T): Promise<T> {\n    return fn();\n};. Should we make a new major version and remove the old decorator plugin and instead create the new ones? I think we also have other stuff that is breaking. node 4, deprecated plugins. If the proposals are splitted, we should also have seperate plugins I think. But we should be carefully and not break users currently using decorators already. So maybe 3 new plugins and leave the current decorator plugin as is?. Nice thanks. Thanks for spotting this. Awesome.\nYou added the polyfill as devDependency although it probably should be a dependency. But even then it won't work I think, because we use rollup to bundle babylon.\nOther option would be to drop support for node < 4.\n@hzoo @DrewML ideas?. not sure how the bundling works, would need to check. But then npm/yarn couldn't do deduplicating correctly as we hard inline it and it also seems to modify globals.. Babylon is only the parser, for questions about how to create babel plugins please use stack overflow or ask on the babel slack. see https://github.com/babel/babel. Nice catch, thanks.. You mean it is in there, although not needed?. We could use the new whitelist option for now, although seems more like a temporary workaround https://github.com/rollup/rollup-plugin-babel/pull/92\nThis describes the issue pretty good: http://stackoverflow.com/questions/40022087/using-the-whitelist-option-with-babels-external-helpers/40071679#40071679. Ok upgrading to rollup 0.37 removes the asyncGenerator, still get/set are included.\n. I created a PR + issue at rollup for get/set\nhttps://github.com/rollup/rollup/pull/1143\nhttps://github.com/rollup/rollup/pull/1142. Ok now finally with rollup 0.37.2 :)\n```diff\n---     2016-12-21 19:03:00 +0000\n+++     2016-12-21 19:03:00 +0000\n@@ -124,7 +124,71 @@\n   return options;\n }\n-function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n+var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n+  return typeof obj;\n+} : function (obj) {\n+  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+var classCallCheck = function (instance, Constructor) {\n+  if (!(instance instanceof Constructor)) {\n+    throw new TypeError(\"Cannot call a class as a function\");\n+  }\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+var inherits = function (subClass, superClass) {\n+  if (typeof superClass !== \"function\" && superClass !== null) {\n+    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n+  }\n+\n+  subClass.prototype = Object.create(superClass && superClass.prototype, {\n+    constructor: {\n+      value: subClass,\n+      enumerable: false,\n+      writable: true,\n+      configurable: true\n+    }\n+  });\n+  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.proto = superClass;\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+var possibleConstructorReturn = function (self, call) {\n+  if (!self) {\n+    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n+  }\n+\n+  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n+};\n// ## Token types\n@@ -146,8 +210,7 @@\nvar TokenType = function TokenType(label) {\n   var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n-\n-  _classCallCheck$2(this, TokenType);\n+  classCallCheck(this, TokenType);\nthis.label = label;\n   this.keyword = conf.keyword;\n@@ -292,14 +355,12 @@\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n-function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n// The algorithm used to determine whether a regexp can appear at a\n // given point in the program is loosely based on sweet.js' approach.\n // See https://github.com/mozilla/sweet.js/wiki/design\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n-  _classCallCheck$3(this, TokContext);\n+  classCallCheck(this, TokContext);\nthis.token = token;\n   this.isExpr = !!isExpr;\n@@ -385,20 +446,18 @@\n   this.state.exprAllowed = false;\n };\n-function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n// These are used when options.locations is on, for the\n // startLoc and endLoc properties.\nvar Position = function Position(line, col) {\n-  _classCallCheck$4(this, Position);\n+  classCallCheck(this, Position);\nthis.line = line;\n   this.column = col;\n };\nvar SourceLocation = function SourceLocation(start, end) {\n-  _classCallCheck$4(this, SourceLocation);\n+  classCallCheck(this, SourceLocation);\nthis.start = start;\n   this.end = end;\n@@ -423,11 +482,9 @@\n   }\n }\n-function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar State = function () {\n   function State() {\n-    _classCallCheck$5(this, State);\n+    classCallCheck(this, State);\n   }\nState.prototype.init = function init(options, input) {\n@@ -558,8 +615,6 @@\n   return State;\n }();\n-function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n/ eslint indent: 0 /\n// Object type used to represent tokens. Note that normally, tokens\n@@ -567,7 +622,7 @@\n // used for the onToken callback and the external tokenizer.\nvar Token = function Token(state) {\n-  _classCallCheck$1(this, Token);\n+  classCallCheck(this, Token);\nthis.type = state.type;\n   this.value = state.value;\n@@ -589,7 +644,7 @@\nvar Tokenizer = function () {\n   function Tokenizer(options, input) {\n-    _classCallCheck$1(this, Tokenizer);\n+    classCallCheck(this, Tokenizer);\n this.state = new State();\n this.state.init(options, input);\n\n@@ -1426,24 +1481,18 @@\n   return Tokenizer;\n }();\n-function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n-function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n-function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.proto = superClass; }\nvar plugins = {};\n var frozenDeprecatedWildcardPluginList = [\"jsx\", \"doExpressions\", \"objectRestSpread\", \"decorators\", \"classProperties\", \"exportExtensions\", \"asyncGenerators\", \"functionBind\", \"functionSent\", \"dynamicImport\", \"flow\"];\nvar Parser = function (_Tokenizer) {\n-  _inherits(Parser, _Tokenizer);\n+  inherits(Parser, _Tokenizer);\nfunction Parser(options, input) {\n-    _classCallCheck(this, Parser);\n+    classCallCheck(this, Parser);\n options = getOptions(options);\n\n\nvar _this = _possibleConstructorReturn(this, _Tokenizer.call(this, options, input));\n\nvar _this = possibleConstructorReturn(this, _Tokenizer.call(this, options, input));\n_this.options = options;\n _this.inModule = _this.options.sourceType === \"module\";\n@@ -1546,8 +1595,6 @@\n   return Parser;\n }(Tokenizer);\n\n\n-var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\nvar pp = Parser.prototype;\n// ## Parser utilities\n@@ -4177,8 +4224,6 @@\n   return this.finishNode(node, \"YieldExpression\");\n };\n-function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n// Start an AST node, attaching a start offset.\nvar pp$4 = Parser.prototype;\n@@ -4186,7 +4231,7 @@\nvar Node = function () {\n   function Node(pos, loc, filename) {\n-    _classCallCheck$6(this, Node);\n+    classCallCheck(this, Node);\n this.type = \"\";\n this.start = pos;\n\n```. Is that a new change in flow? OR was that wrong in babylon?\nAnyway if it should be really allowed everywhere a type can appear, then this looks good to me.. Thanks for reporting. I fixed it in #324. The fix was reverted, due to problems.. We should keep an eye on performance with changes like this. I created a performance test-suite a while ago, so we should try this maybe. https://github.com/danez/babylon_performance. I thought about it back then, but wasn't sure how \"stable\" the performance on different boxes on travis is. But now that I think of it more, maybe if we would run the performance tests twice on travis in the same machine (for master and current commit/branch), the results could be useable. . Waiting for rollup/rollup#1176. I'm with you, that this is inconsistent in the AST, but it seems it was done because of\nhttps://github.com/babel/babylon/commit/ffee5615e4d6db9db789f634272dbd2f77b0ec4c\nhttps://github.com/babel/babel/issues/2114\nBut both are rather old and we can try to remove the node.extra = null; line here, and see if the cases mentioned in the other ticket work now or if we find a better solution.\nI will remove it as a test and see if the babel tests work.\n. I think this a edge case, as usually jsx is transformed to js and there the escaped text is valid and will never show up in the DOM like this. Not sure actually what to about this.. I think it is not the same, in the first example the StringLiteral will be escaped according to ES specs. In the second example \"foo\" would be need to escaped according to xhtml specs. That is the major difference as far as I understand and babel seems to always assume the output should be js encoded, as we usually (in 99%) transpile jsx to js.\nBut if you do jsx-to-jsx then this behaviour is wrong.\nAlso for example this is correct:\njs\n<div pattern=\"\\w\"></div>;\nbut going through babel without any transform results in\njs\n<div pattern=\"\\\\w\"></div>;\nwhich is not the same. We might be able to detect if the parent is jsx in babel-generator and based on that not use jsesc but something else that creates a valid xhtml escaped-valid string literal from the input value (or maybe only warp it in quotes).\n//cc @mathiasbynens because I mentioned jsesc and maybe you have an idea.. I'm currently working on getting ObjectMethod/ObjectProperty back to Property.\nThat should be already everything that is left, as far as I can see right now.\nSo I don't want to give any estimates that I can't keep, but I think it should be ready next week.\n. Quick update, it already works as expected (with some minor things missing, see top) but I'm still working on doing cross-testing with flow and espree, which already revealed some issues. . I did not commit the comparison tests between babylon with estree and espree/flow in this branch as there are a lot of mismatches. Most of them are that espree/flow cannot parse the fixture (and yes all experimental stuff excluded). I need to go through this at some point and fix on our end or report to the other parsers.\nThe tests are in a separate branch estree-test. react-docgen also wants to upgrade it's parser and being estree compatible would help: https://github.com/reactjs/react-docgen/pull/137. Thanks, merged into 7.0 branch.. Well that was fast fixed :). Thank you. \nYes good catch with package.json. Can you add this?. Thank you very much.. Removed with \nbash\nnode_modules/.bin/ava -v 2>&1 | sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g\" | ggrep -P -o \"([^\\s]*?)/actual.js\" | sed s/actual\\.js/expected.json/ | sed s/^/test\\\\/fixtures\\\\// | xargs rm. Please ask in the react-native tracker or maybe you already fixed it by now. But we cannot help you here as we do not know how babylon is used and which package is using it.. I created a PR for this, but only when using the estree plugin. In \"normal\" babel-mode the value of the DirectiveLiteral.value is considered to be the raw value without quotes.. Seems travis is confused and still tests 0.10 and 0.12 in this PR although base is 7.0. The codecov seems unrelated and only shows up, because the decorator if is not covered.. I landed this in 7.0 now.. Thank you very much for helping.. Thanks for reporting, we will have a look soon.. This seems it was fixed recently as the latest version parses this example correctly.. It is currently there for babel to be able to distinguish if the tokens value is escaped as js-value or xhtml-value. (The later one not having a raw value and therefore being reescaped in babel to js)\nWe also have another issue #271 that is related, so maybe we can find a better way to handle this.. @phpnode Nice catch, yes we should do it. Do you want to make a PR based on the 7.0 branch? Otherwise I create an issue.. IMHO the best way to go for TS right now is forking babylon and there making the adjustments to parse TypeScript. Babel can then use this alternative parser and also an alternative generator (which can be based on babel-generator). Transforms in babel can live independently anyway.\nIt maybe even easier to adjust the TypeScript parser to have an option to output babel-compatible AST, so it can be used directly in babel, but I have never had a look at TypeScript so dunno.\nI think it would be good to not add more different syntax extensions to the babel repos to keep them more maintainable, not just code-wise, but also issues and PR which would increase if we add more and more stuff (and we already have a lot). And instead focus more on making it more easy to extend.\n. @JamesHenry Nearly.\nThe work that is currently done is to have an option (or plugin) that enables babylon (the parser of babel) to output estree. This is so that other tools like eslint, react-docgen, basically everything that consumes estree ASTs to be able to drop in babylon and be able to support every spec that babylon supports.\nAfaik there are no plans to use the estree mode within babel, as the changes that were made to the ESTree format are all valuable additions/changes and make it way easier to write plugins in babel. IT would be nice to contribute them back to ESTree, but they don't allow/want any breaking change.. Well even with flow, we are not up2date with all the syntax-features it supports and my main concern is that for every syntax-plugin (flow, jsx, ts, ...) all the bugs would come in here in this repo, and right now it is the babel-team triaging, managing and fixing them most of the time and not the flow team (no offense her btw, probably they would do it if we ping them). But more plugins -> more bugs/changes/updates.\nThat is why i think it would be nice to have separate repos with separate responsibilities.\nOf course making external plugins work in a reasonable way is a complete different topic and I have no idea how atm.. This might be a missing case from #197. \n//cc @gabelevi . Nice, thank you very much.. There is already a issue and a PR for this. #224 #74 . We also need to do this change in babel itself. See https://github.com/babel/babel/pull/5199 as a reference.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Can you check that the tests are not slower. Right now we run all tests (~3500) in 7seconds and it shouldn't get any slower.. Imho jest does not need to do anything with babel, as the source gets precompiled with rollup or babel anyway. So babel-jest is not needed here.. I just tried it locally and it works fine, but jest currently by default enables babel which is not what their docs say. So I opened a ticket with them: https://github.com/facebook/jest/issues/2848. Code coverage is not working anymore. I have no Idea why, but can't get it working. Maybe jest has some more magic that interferes with our coverage reports.. I think the built-in coverage only works when jest also does the instrumentation, but we are not doing that, we instrument the code already when we build the rollup bundle.. I personally don't like all this options to make the parser parse invalid stuff, but I totally see the usecase in babel-template. Maybe instead of adding more and more options for this, I would suggest creating one option to disable all this checks aka disableCodeChecks or similar. That way we would at least have only one option instead of multiple ones for babel-template.\nEven cooler would be to separate this logic that checks for valid break/continue into an own method pp.checkValidBreakContinue() and then provide a plugin that overrides it and makes it succeed always. That way we wouldn't have to do all the if (option) {} logic inside the actual parsing code.\nNot sure if that works in all the cases we currently cover with options, but would be worth a try.\nThoughts?. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Wow, that's an extensive list. \nWe can also disable more staff later, if needed.\nI really like this idea instead of the options. Do you want to work on this yourself or should we label it as help wanted?\nI'm not sure about import() requires exactly one argument, what would be the usecase of using import() with 0 or more than 1 arguments? (Maybe I also miss knowledge about babel-template and how it Substitutes placeholders.). Can you describe a usecase where a tool wants to change the first line to be something different than 1?. We need a follow-up story in babel-types, babel-generator and the transforms using ForAwaitStatement to account for this changes.. I created a ticket babel/babel#5286. Thanks, what are the changes from #158? Or is it just rebased?\nEdit : I think I see that the description of this PR only applies to the additional changes you made?\nTbh you completely rewrote the whole parsing of properties, so it is not really possible to see what changes, as it is completely new code and I'm afraid that we break stuff that we might not have tests for. And it is really hard to review like this.\nBy looking at the code, there is a lot of repetition, especially in the checks for class constructor stuff.. Thanks. Thanks, the current implementation of decorators is really old, and we probably do not want to change it anymore, but instead will create a new plugin for the new spec.\nSo it might take some time, till we know how to continue with all the decorator changes.. I'm sorry, but we currently do not support to extend babylon. \nThe reason is that as soon as we do this we would have to be really careful with breaking changes, as right now even some simple fixes involve breaking the internal API. If we would make it public we would break external plugins with every release.\nSo for now the only way is to fork babylon and make your changes in the fork.\nWe are thinking of making this easier, but there is no work on this end right now.. This is not problem with babylon as babylon correctly has parentheses information on the node.. We are waiting for flow to fix this, before we start with this.. All parsers seem to parse this correctly so I assume this is correct.. Thank you. This correctly throws in the latest version of babylon 6.17.2. Although it doesn't hurt to have it added all the time, but yes we could make it an option.. Thanks. There is now an open PR for react-native.\nhttps://github.com/facebook/react-native/pull/12550\nwith 7.0 we reintroduced the change that was breaking react-native.. @matAtWork This is exactly what we tried to fix in 6.16.0 but had to revert in 6.16.1, as i was causing regressions in babel. This will be fixed with #377 . This is going to be fixed in 7.0. Isn't this the exact same thing as the just reverted commit? This would reintroduce the problem. The problem is that babel can't handle the new AST.. Oh I see this is about arrow functions. Before we merge this we need to fix babel first to understand the AST.. This is already possible, but not documented. Simply add \"only\":true to the options.json or create the file with this content if not exist yet.. I just rerun prettier 1.2.2 on the source and all the mentioned things are fixed now. :). Okay rebased and change everything to work. Ready for review.. Besides it being a massive diff I do not like they idea of restructuring code just to please flow. It might have been easier to start small and just enable flow file by file and PR them separately.\nThis current approach with the inheriting classes and then the separate file with the type definitions seems rather complicated and unusual to me, and we maybe should think about a better structure of the Parser instance that would also work with flow.\nOhh and we should keep an eye on performance, as a drastic change like this might also have performance impacts.. Thanks for doing this. \ud83d\udc4d. Interesting that flow parses the testcase you added in your last commit. I added an issue in the flow repo.\nhttps://github.com/facebook/flow/issues/3566 . I think we should do what spec is saying if it is speced. Otherwise we could see what other engines are doing. Node is doing this:\n```\n\n01\n1\n0111\n73\n0119\n119\n0119\n119\n0118\n118\n0117\n79\n022\n18\n099\n99\n'use strict'; 022\n'use strict'; 022\n              ^^^\nSyntaxError: Octal literals are not allowed in strict mode.\n'use strict'; 09\n9\n'use strict'; 08\n8\n'use strict'; 07\n'use strict'; 07\n              ^^\nSyntaxError: Octal literals are not allowed in strict mode.\n```\n\nSo it seems if 8 or 9 are part of the number which starts with 0 it is treated as decimal either strict or non-strict. At least that is the behaviour of node 6.10. Maybe you can look in the specs and see if this is correct.. The problem is that we do not have raw values for this Strings which is going to be fixed in #344.\nWhy we actually convert html entities is most probably because if jsx gets translated to React.createElement() it needs to be UTF-8. Not 100% sure about this though.. Thanks. Thanks you @alxpy . If you use babylon standalone, consider enabling the estree plugin, which will output estree compatible AST.\nObjectProperty is a custom node that is used in babel. Before we consider renaming this node, we eventually should think about switching back to estree then by default for this case.. Do you think this would already be done with #393 ?. I think this might have been fixed now with #459 as the actual class now gets cached. \nAnyway this seems to conflict heavily with the other PR, so we should probably close this, but if you have further ideas how to improve babylon open another PR.\nThanks for looking into this.. In webpack you can use require alongside with import, which I think is a common pattern if you want to lazy-require stuff or put requires in if (NODE_ENV==='development' ) so the whole require+the required dependencies get stripped on production. import() is not an alternative as webpack treats import() as code-splitpoint by default, though this can be turned of by changing the advanced parser configuration in webpack.. A little off topic and probably a stupid question but why is it so important to differ between ESmodules and commonjs? Couldn't node simple add support for the import/export syntax and do the same as with require?\nimport x from 'x'; --> const x = require('x').default;\nexport default ... --> exports.default = ...\nThis is not be spec conform but \u00af_(\u30c4)_/\u00af. IMHO most of the users will not care for all the special cases that the spec defines, like if an import of modules is validated before code execution or dynamically. And a lot of projects already use exactly this pattern with babel.\nI'm missing a lot of background on this topic, but as a js developer the new .mjs file extension sounds weird.\n(Sorry if someone gets mad at me now \ud83d\ude18). Duplicate of #224. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Will node do the same now? \nIf extension is mjs then assume module otherwise autodetect?\nDid they finally agree on something?. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Well they are all json-objects, so ordering does not really matter I would say?\nBtw instead of the rm-script one could simply do rm -rf test/fixtures/**/expected.js. Maybe we can use some snapshot library and do snapshot testing, means also ordering would count. The only thing I do not know is if these snapshot libraries provide a good way to show what changed in a massive stringfied json.\nI merge this for now.. I ran my perf script and the results are impressive. (Up to 100% faster \ud83c\udf89\ud83c\udf89\ud83c\udf89\ud83c\udf89)\nBefore\nname                            run   \n./fixtures/angular.js           502ms \n./fixtures/backbone.js          60ms  \n./fixtures/ember.debug.js       1468ms\n./fixtures/jquery.js            279ms \n./fixtures/react-with-addons.js 576ms\nafter\nname                            run  \n./fixtures/angular.js           298ms\n./fixtures/backbone.js          27ms \n./fixtures/ember.debug.js       779ms\n./fixtures/jquery.js            141ms\n./fixtures/react-with-addons.js 314ms\nThanks a lot. Yes, my major concern was having the types for all parse functions duplicated, once in the function itself and once in a separate type definition. \nI thought maybe we could come up with a better structure that flow could understand and not having to duplicate type definitions, as I think the risk of forgetting to change one of them is pretty high.\nBut I currently don't have a good idea, besides moving everything to one file, but that is also not a good solution I think.. Thanks, yes this will be fixed in 7.0. I'm closing this, maybe we will backport this fix if we find the time.. This is also included in #224. We should merge stuff to not do work twice. :/. Thanks for reporting, this is a duplicate of #58. You can check on http://astexplorer.net/, it should match flow.\nhttp://astexplorer.net/#/gist/814a0550f3bc1050df71f6548290cb41/38edaa6b3331f05685dbc44516f827d380a2f87e. Yes agree, seems we are doing the exact same thing as the flow parser, not sure why this should be a bug. @thejameskyle . Did flow change recently? As I changed it exactly the reverse way to match flow some months ago.\nhttps://github.com/babel/babylon/pull/228. I see, my mistake, I was a little confused. :)\n\ud83d\udc4d. It seems this breaks parsing of numbers, this test in babel fails on line 2\nhttps://github.com/babel/babel/blob/master/packages/babel-generator/test/fixtures/flow/number-literal-types/actual.js. Thank you, I fixed the PR by using the same fix that acorn implemented. It is usually always a good check to see if acorn has the same bug as babylon or not.\nIf not we can probably find the fix there (https://github.com/ternjs/acorn/commit/b14cb8bea7b5fd69fb6dcf2b75cf6fb772e79ed6) (and the codebase is pretty similar as babylon is a fork)\nIf acorn has the same problem we could potentially also fix it easily there. (For example this PR https://github.com/ternjs/acorn/pull/540 which you also created here some time ago.)\n. Both fixes are somehow not nice, but this seems a better approach.. Does this still work with this PR:\njs\n({ const: 1, this: 2 });. Nice.. \ud83d\udc4d. The reason that we choose 4.2 is because the node LTS started with 4.2. \nBut as our code will also work with 4.0 we can also change it to >= 4. CI should have failed with flow errors (#517), not sure why it is working on CI. Need to investigate.. Thanks. By comparing this to all the other parses we do exactly the same as they do. Also in most cases it doesn't really matter if a prop is null or undefined.. Failure is unrelated. This is a duplicate of #58. I tried several times to fix it but could never 100% make it work in all cases. If anyone of you have a good idea feel free to create a PR.. Will these examples still work?\njs\n(() => {}) || true ;\n(() => {}) ? a:b;\nacorn fixed this with https://github.com/ternjs/acorn/commit/6a2de6dcfd4873a98614f36c5cc259b04af03b0a\nEither way could we add tests if we don't have some already?. Ah nice. I add the two tests and merge it then. Thank you.. The generator seems to use it for whitespace stuff, https://github.com/babel/babel/blob/02473a72c160545ed225482515b569d26fc41ea5/packages/babel-generator/src/index.js#L14\nI just had an idea, what  if we instead of babel-generator use prettier. Have you tried that? I wonder if that works. :). Thank you very much.\nThis is funny that this could happen, because flow should have catched this error easily. Seems our flow types are a little broken. I will look into this and report back.\nAs soon as this is merged I can make a patch release for v6. The issue is this line. https://github.com/babel/babylon/blob/master/src/types.js#L38 It makes every node to be this type:\njs\ntype Node = { [string]: any };\nSeems that defined fields and typeindexers cannot be used together in flow. \nBut if i remove the type indexer I get around 300 errors. which in most cases is just missing type casting and the missing flow definitions.. I released 6.17.3 with the change.. Thanks, not sure if having all the special cases for nodes in there is the way to go, but this only fixes the current code \ud83d\udc4d. Maybe we should also turn of the codecov PR comments, they get really annoying:\n\nIt posts multiple times recently\nThe information is not useful and also available in the PR checks. I'm not sure changing this is the way to go, as it might break a lot of plugins who expect value to be the raw value.\n\nI think the definition of Directive was always that value is the raw value without quotes and raw the raw value with quotes. \nWe could also change the way Directives are handled and revert back to the estree way. That of course is a similar breaking change.\nLooking at the related issues, it seems that maybe some plugins are handling DirectiveLiteral the same way as StringLiteral, which it right now clearly shouldn't.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. What is the intention behind this? I would rather first open an issue at estree if you want to change this, but I'm personally strongly against diverging from estree any more.. https://github.com/facebook/flow/issues/4789. I guess this is already solved, if there are problems with the estree plugin we are happy to accept issues and PRs.. Does this also fix #640?. I just tested this also locally and it doesn't work and stops with EMFILE: too many open files. Seems reading all the tests async without limit is not a good idea, but works on travis for some reason.. i think we can just simply remove the two lines 1046 and 1051 in plugins/flow.js. I don't see any value in them, as they are always true.. I enabled the no-case-declarations. This should prevent this problems.. Okay I also rebased the branch.. Thank you very much for you first PR \ud83c\udf89.. This was already fixed and the latest versions of 6.x and 7.x both work for me. Also the repl seems to work for me successfully.. Ohh I mixed something up, I thought you expected it to pass and got an error, but you said the opposite. :). We do not support external plugins in babylon. We already have a lot of work in maintaining all the internal plugins and the project itself and if we would make the current plugin api available to the public we would need to be way more careful when changing things in babylon. Right now most changes would be breaking changes if the plugin API would be public, as we very often need to change stuff around and we would not be able to guarantee a stable API or make every single release a major one.. Thank you very much for your first PR to babylon \ud83c\udf89. That would be nice, you can also remove my two merges, somehow github cannot handle this here.. I think trailing commas shouldn't be allowed anywhere after a RestElement, if I'm not mistaken. \nOh I see you did it for both \ud83d\udc4d. This breaks comment attachment. Comments that have been previously been attached to the decorator are now attached to the class\n```js\n/\n * Decorator description\n */\n @Decorator1\n/\n * Component description\n */\nclass A {\n}\n```. https://github.com/rollup/rollup/pull/1586. \ud83d\udc4d. I don't want to argue against this, as I think it might make sense, but in your case couldn't you simply check if either the typescript or the flow plugin is active? As far as I remember they can't be active at the same time anyway.. What if we add a field to program indicating which typing grammar was used?\njson\n{\n\"program\": {\n    \"type\": \"Program\",\n    \"sourceType\": \"module\",\n    \"typeExtension\": \"flow/ts\",\n    \"body\": []\n}. This change was never about getting closer to the ESTree spec, it just happened that the spec has a different way of handling directives that would solve a lot of the problems we are facing and I also never said any of the arguments mentioned. No need to get emotional. :)\n@bakkot I agree that directives and string literals should be treated different when evaluating them, but right now directives are treated as string literals when printing although the cannot in its current form. Syntax wise directives are string literals with some restrictions. And in the case we're they are parsed and later printed they should be able to be treated as String literals in my opinion, because otherwise you always end up having a print method that handles string literals and one for directives which you need to make sure always generate the same output for the same string represented differently in different nodes.\nI see your argument makes sense, but in my opinion it is more important that people also print directives the correct way, which does not happen right now, because of the above reasons. It boils down to the same issue that if someone does not know the spec and which field in a node represents which value then you always end up with misinterpretions. . @loganfsmyth Good points I haven't thought about this cases where you insert at the top of the block. \ud83d\udc4d \nWhat do you mean with raw-only? That's what it is right now kind of with having the raw value in value. We could maybe rename value as I think having the rawvalue without quotes somewhere in the AST makes it easy to check if it is the wanted directive.. Okay I create a PR and we can discuss there. Why?. I was never pinged by slack before. For me emails is the only way currently to get notified if my PRs fail, but if I can somehow setup slack I'm happy with that.. Thanks for opening this issue, would you mind also proposing this to https://github.com/estree/estree. We for the most part use their spec 1:1.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Thank you very much for your first pull request. . We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.. Merging now, test failures are also on master.. We moved babylon back into the monorepo at https://github.com/babel/babel/tree/master/packages/babylon.\nUnfortunately pull requests cannot be migrated between repositories automatically. If this PR is still valid please reopen it there.\nThanks for your effort.\n. This line is first triggered in the second iteration if (first) ... and refNeedsArrowPos is supplied to parseMaybeAssign on line 567 and this function might be changed it there.\n. damit :D\n. JSXSpreadChild would need to be added to babel-types as well and also to babel-generator\n. Maybe something like: \"Only declare statements are allowed inside declare module {}\"\n. This is just minor and makes not a big difference, but maybe adding here just a break and then it would call this.unexpected() on line 395\n. This line is not covered. Do you think we can have two tests that check if there are parse errors in these cases?\n. You could also use this.unexpected(moduloPos); here. It's a little bit shorter but otherwise isn't really important if not changed.\n. Needs 2 space indentation.\n. If the token === tt.braceLshouldn't the call be this.flowParseObjectType(false, false);. It probably doesn't really change anything but it would be more clear maybe (and saves us one comparison in the flowParseObjectType, although it probably doesn't have an impact.)\n. should we also use eslint-config-babel instead of kcheck maybe?\n. Weird that we were testing the wrong behaviour is working. \ud83e\udd14\n. This seems to be a tab here?\n. Can we make this maybe a nice error message here? Flow says \"Illegal newline before arrow\", which is already better than \"unexpected token\".\n. Argh, true.\nThis try catch is there because when we encounter a colon at this spot we are not yet sure about a.) if it is an valid arrow at all b.) if the colon might be from a ternary operator (something like this i think a ? b: c => {}). So if a SyntaxError is thrown while parsing the return type we reset the state to what it was before we started parsing the type and let the regular parsing function of babylon handle it.\n. Not entirely sure if that has any side effects on this try/catch logic.\nSo maybe we jsut leave it for now, and later on have a look how we can improve the message.\n. note\n. This is correct\n. @hzoo: Do you mean checkExport(node: Node, options: { named: boolean, default: boolean }) or what do you mean with object? Maybe also  checkExport(node: Node, type: \"named\" | \"default\" | null)?\n. You are right, I wrap up a fix\n. \ud83d\udc4d  Done\n. to much indentation\n. || isPattern can now be removed as it will never be true.\n. Upps removed\n. Done, I also added a separate message when having an invalid trailing comma\n. I did not use assignment as I think this is not an assignment if I'm not mistaken:\nfunction ({a,b,...c,...c}) {}\nBut this would issue the same error. Should add a test for it if there isn't one yet.\nCan use \"Cannot have multiple rest elements when destructuring\".\n. no it has to be at the end after the loop, because otherwise the multiple destructuring check does not work.\nBasically the logic is:\n```\nloop through all params:\n   if spread\n       if havent seen spread before AND this is not the end of the object pattern: record that we have seen a spread\n       else if havent seen spread before: warning that this is already the second spread\nif we finished the loop and recorded a spread: error that it was not at the end\n``\n.this.state.inTypeseems to be only necessary forthis.flowParseType(), so maybe we could just do this two lines in the else branch? Then the reset only has to happen there either.\n. Can you add a nice error message here? Maybe something like\"Spaces between \u00b4%\u00b4 and \u00b4checks\u00b4 are not allowed here.\"`\nThe second argument to this.unexpected can be a custom message.\n. Instead of \njs\nif (this.match(tt.parenL)) {\n    this.next();\nyou can do \njs\nif (this.eat(tt.parenL)) {\nWhich is doing the exact same thing but is shorter. :)\n. We could simplify that here and do this.eat(tt.plusMin) already in the if () and remove this line then.\n. This doesn't makes sense as this.unexpected() throws anyway. Maybe we want to assignment after the diff, although not sure if necessary.\n. Ah I see, sorry.\n. Also codecoverage says we never hit this block, but as we do the same for super maybe be consistent and leave it here?\n. Should this be prop.variancePos?\n. Also a newline would be expected here I think.\n. This was never triggered?\n. We need to add BABEL_ENV=test here infront of the call so that babel-plugin-istanbul is used.\n. We can remove cross-env BABEL_ENV=test here then as it is only used for babel but babel is not run here.\n. maybe should we use nvm install --lts instead of nvm install stable stable is deprecated first of all and is now an alias for node and second it currently installs node 7 and not sure how stable that is already. Or do you think thats okay?\nAnd btw install also automatically calls use.\n. I never used watch in babylon as the tests usually do a build before and the build does not take too long. \n. What was the issue you had with these two files?\n. Can you please add noAnonFunctionType to the state so that v8 can better optimize the usage of the state.\n. It would be nice to have a better error message that says something like return type annotation needs to be wrapped in parens or have named parameters. But not sure if this is easy to accomplish.\nThis should not be a blocker, just if you have an idea on how this could be done easy, otherwise we can come back to that in a separate story.\n. We had a fall-through here before without doExpression, but that looks like a mistake anyway. Why should do fall-through to regexp?\n. Uncovered. We could test this I think easily.\n. Maybe switch the order here like it was before, checking the bool value first is maybe also faster in case it is false?\nOr did you have something in mind by changing the order.\n. We have this pattern quite often if (match) expectPlugin(), next() So maybe we could make this easier in future by doing:\nif (this.expectPluginIfMatch(\"plugin\", tt.start)) {\n is = true\n}\nWhat do you think?\nBut should do that anyway later, to not make this PR even more bigger.\n. Should we make babelTransformPlugins mandatory to be an array, so we don't have to check here?\nAnd also as long as we have syntax-plugins for everything, maybe also remove the if for it?\n. Can you please also add the flow type, like the other fields?. We could move this before the curContext() call.. Seems there are a lot of cases where we have before and startsExpr maybe we can do the spread in this case only once?\njs\nconst beforeAndStartExpr = { ...beforeExpr, ...startsExpr };. missing space after comma, seems we have no eslint rule active for that. same here. oops fixed. I think we want to go with simply doing >4 for node, and we don't require any special npm version, so we also do not need to put a npm line here.. moved from line 39, to exit earlier. Instead of doing a switch case with two variant just do this one-liner. It will anyway only be Identifier or Literal.. New method to check if getters and setter have correct param count. Was duplicated in the code twice.. extracted from parseObjectMethod to be more easier to follow.. parseObjPropValue was split into parseObjectMethod and parseObjectProperty. ensure boolean, so that we do not always have to set the second param to false.. Simplified and extracted the check to separate isStrictBody. removed second param, as now not needed (see comment in parseMethod). extracted for readability and to be overwriteable for estree . no need to check the types, just check the name/value. Helps with estree (StringLiteral != Literal). moved to checkGetterSetterParamCount. moved to checkGetterSetterParamCount. This code will not stay forever anyway, as as soon as class-properties are final, we can remove all this.. Yes this was the same before, as this.unexpected() uses this.state.start. You are right, babylon throws at the first error, and never parses the second line. I extracted that in a second test.. Changed that in https://github.com/babel/babylon/pull/312. True, I go with ESTree as on their repo. You mean the commit messages? I just followed the old style of the changelog. Well most of the bug fixes here are breaking ;) But I think I move this to spec compliancy and describe it. SpreadElement should only be converted to RestElement if isBinding === true and otherwise fail.\nPreviously we were not converting SpreadElement at all, but now we need to in some cases (the cases that were previously SpreadProperty). @vjeux Yes I mentioned that in the description above too. It is probably more readable if we rewrite it.. Why did you disable this rule? Where there problems with it?. strictMode can be boolean or null. Huh? Wasn't it properly indented before? \nEdit: Ah I see the mixin part. Nice catch. Yes we can enable and autofix later\n\ud83d\udc4d. Looking at the history this was never working, so can you please remove this?. reverse() got missing.. Could this be triggered also by function.send? If so I would rather do this check before/after calling this method in the new.target case.. Can we add a test for this here in a case where spread is not allowed?. This should not parse I think. Probably related to what @gabelevi wrote.\nAt least flow is also throwing errors: http://astexplorer.net/#/gist/7703a4fb36053ce507e10d396c5f7d71/c2f5ba5c1048c1e8bade34bebccc16efa44d7367. any is also not allowed here it seems, flow is throwing an error. Seems to also happen for all primitive types: number, string, boolean, any, null, .... Oh okay sorry. I see astexplorer uses flow 0.40 which supports it spreading only for Identifiers?. Okay was testing on astexplorer, which was a bad idea.. I think felix is working on this. https://github.com/fkling/astexplorer/pull/197. Could do parseBindingIdentifier() here?. This is not necessary?. Yes I was just worried because I couldn't find a check for isGenerator but I see now that when it is a generator it will check for keywords inside parseIdentifier(). Hmm, well...I change it :D. I wonder if these methods are in the wrong place currently. Especially raise and unexpected and maybe other helper functions could be moved either here or into a new baseclass.\nBut this is out of scope for this PR.\nEdit: haha, just saw that you wrote the same in the description. Not to self: First read description.. I was also wondering the same. \u00af_(\u30c4)_/\u00af. I'm a little bit worried about this and doing it whenever we encounter a parenL. clone() is very expensive and we have never done lookaheads of this extend before (besides one token with this.lookahead()).. This test was duplicate. This would have been fine actually, besides the method. This looks totally valid to me:\njs\nclass A {\n  #x = 1 // private field\n  [#x] = 2 // public field\n}. I think my example should throw, by looking at it again.\nWhat I meant is this:\njs\nclass A {\n  #x = 1 \n  [this.#x] = 2\n  //or\n  #y = this.#x\n}\nBut these are also early errors?. Upps, the #4 was not intended to be there. Basically I wanted to show initializing a private field from another private field.. Why not override the method and do this in the plugin? The estree plugin is doing this also.. Yes, but isn't one clone enough?. ===. What is this ? :D. Uncovered. I add a test.. okay changed. We have been accepting options even though they were null or undefined, and setting plugins to null for example did break the parser, because it is always expecting an array. duplicate test. ",
    "gabelevi": "@kittens or @hzoo - Is there anything I can do to help get this PR merged?\n. @kittens - sorry, I'm not quite understanding what you're asking. Are you asking about the downstream effects of this PR and what will have to change? I don't think I know enough about the code generator and traversal definitions to comment. Naively, a transform to strip away flow types shouldn't be affected, since this is a change within the type space. However a general visitor might notice that the list of type params is now an array of TypeParameter rather than an array of Identifier\n. This fixes https://phabricator.babeljs.io/T7330\n. \ud83d\udc4d this looks correct to me. Everything inside of a declare module declaration does start with declare.\n. @hzoo - thanks for merging! Would you mind publishing this to npm? Thanks!\n. Can this be merged now?\n. @hzoo @existentialism - is there anything I can do to help this get reviewed? Facebook needs this (and the babel backport) before we can use opaque types internally :/\nOr is something going on with 6.x? Like you don't want to merge things into it anymore?. @hzoo Thank you so much for merging and releasing all the things! We really appreciate it!. Sure, I'll move it in there. It will still be hit for every JSX expression, I'm afraid, but that's better than every expression :)\n. I think they have weird characters that the .gitattribute doesn't like if it treats them as text\n```\n$ git checkout master .gitattributes\n$ git commit -m \"revert gitattributes\"\n$ git rm --cached -r .\n$ git reset --hard\n$ g st\nOn branch flow\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js\nmodified:   test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ g diff\nwarning: CRLF will be replaced by LF in test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js.\nThe file will have its original line endings in your working directory.\ndiff --git a/test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js b/test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js\nindex dd8e38b..ed49ef3 100644\n--- a/test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js\n+++ b/test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js\n@@ -1,2 +1,2 @@\n-//\n+//\n ]\ndiff --git a/test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js b/test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js\nindex 583aa13..e85031c 100644\n--- a/test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js\n+++ b/test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js\n@@ -1,2 +1,2 @@\n-/\n+/\n */]\n``\n. Sure, will do!\n. Yeah, it's not easy to do. The problem is that the first=>is parsed as arrow function's=>. So we'd have to decide which parsing errors after the=>would need this explanation and which are just normal arrow function parse errors.\n. Should this bethis.flowParseType()`? That seems to be what the Flow parser is doing. Yeah, PR for astexplorer hasn't been merged yet https://github.com/fkling/astexplorer/pull/208. But https://flowtype.org/try/ should work and it has an AST tab. ",
    "glenjamin": "This PR appears to fix https://phabricator.babeljs.io/T7365 as well. I had started to have a go at this but only got as far as expanding a test case to cover more existential scenarios before discovering it already worked on master.\nIt might be worth including these examples to cover the newly expanding existential support? (I added the flow header so that I could run flow on the testcase to check it agreed with this parser)\npatch\ndiff --git a/test/fixtures/flow/type-annotations/existential-type-param/actual.js b/test/fixtures/flow/type-annotations/existential-type-param/actual.js\nindex 83f6d6f..a10100a 100644\n--- a/test/fixtures/flow/type-annotations/existential-type-param/actual.js\n+++ b/test/fixtures/flow/type-annotations/existential-type-param/actual.js\n@@ -1 +1,8 @@\n-type Maybe<T> = _Maybe<T, *>;\n+/* @flow */\n+type Maybe<T> = Map<T, *>;\n+class ABC extends Array<*> {}\n+function abc(a: *): number {\n+  return 1;\n+}\n+var obj: {a: *, b: *} = {a: 1, b: \"a\"};\n+var x: * = 17;\n. ",
    "EvHaus": "@kittens This is still an issue for me in babylon@latest (6.8.1).\n. @loganfsmyth  Just wanted to confirm that I do indeed have this in my webpack :)\n// Hides some \"This seems to be a pre-built javascript file.\" warnings\n// caused as a result of importing the Babel polyfills for the\n// live code editing feature\nnoParse: /node_modules[\\/\\\\]babylon/\n. I've moved over to using babel-standalone for my needs here and that has resolved the issue. Closing.. ",
    "brzpegasus": "Does this have to do with the fact that the minor version bump from babylon@6.7.0 to babylon@6.8.0 is accompanied by a major version bump of babel-runtime from 5.0.0 to 6.0.0? We are seeing errors in ember-suave as well as a result of upgrading babylon.\n. ",
    "mroch": "both Firefox 49 nightly and Traceur parse -1 ** 2 without requiring parens (despite what MDN says should happen).\n. indeed, not sure why i didn't see that\n. similar parse error in class fields:\njs\nclass C { field:*=null }\nhttp://astexplorer.net/#/gist/cdceeb9d580e80d636fe107485dc5028/132b56da3acbe567fa46458730dd7875777790c4. @existentialism thanks for the cc. you're right about the busted test, it was a parser bug. fixed in https://github.com/facebook/flow/commit/a3e936a50db40dce3d44fc164369a1cc61a2e368 . ah ok. my bad, thanks!. ",
    "uMaxmaxmaximus": "P.S. where babel issues tracker???? I was forced to write here\n. omg i no understand, github has issues tracker. i not want lern another tracker. i will be report bugs on here \n. ",
    "gtame": "The problem was npm cache.\nI'm sorry\n. ",
    "nene": "Thanks for the reference. I could do a PR for the README to document the differences and link the syntax spec.\nI also noticed, that AST for JSX contains a node called JSXText, which deviates from JSX AST documented by facebook. But Babel AST docs for JSX and Flow are empty files: https://github.com/babel/babel/tree/master/doc/ast\n. Currently the README tells me that Babylon is based on Acorn (which does follow ESTree), so I would assume Babylon also follows ESTree spec unless told otherwise.\nGiven that README describes input parameters, I'd expect that it also describes the output.\n. ",
    "calebmer": "I\u2019m not sure why jsx/basic/10 is failing. It looks like the comment blocks array at leadingComments/closingElement/expression/0/body/program has two identical copies the following comment block instead of the one tested for:\njson\n{\n  \"type\": \"CommentBlock\",\n  \"value\": \" this is a comment \",\n  \"start\": 4,\n  \"end\": 27,\n  \"loc\": {\n    \"start\": {\n      \"line\": 1,\n      \"column\": 4\n    },\n    \"end\": {\n      \"line\": 1,\n      \"column\": 27\n    }\n  }\n}\nI\u2019m pretty sure it has to do with the lookahead, but I couldn\u2019t find any documentation on the matter.\nAny ideas?\n. @kittens: The language extension this PR implements was just added to the JSX specification (https://github.com/facebook/jsx/pull/59). What\u2019s remaining to get this PR merged, and can you comment on the failing test?\nSee my comment above for more details on from the reasons I found that might make it fail.\n. Just curious @kittens, what\u2019s the status on this?\n. @danez :+1: https://github.com/babel/babel/pull/3575\n. ",
    "sebmarkbage": "I don't think either TypeScript or Flow support non-React variants of JSX atm so it probably doesn't matter but we can add it. We also don't support namespaces which is speced.\n. The single rest at the end only applies to binding let { x, ...y } = obj; and assignment ({ x, ...y } = obj). It doesn't apply to spread let obj = { ...x, y, ...z }; // works.\nI think you need to make this conditional on the isPattern flag, no?\n. @danez No, trailing comma is not allowed. EDIT: The rationale for this is that the use case for trailing comma is that you can add something at the end without affecting the line above. E.g. for version control software. However, that is never the case here.\n. ",
    "vjpr": "It appears this is an issue with another library (depcheck) I was using with babylon. \n. ",
    "jeffmo": "This is valid syntax, yea. *, in Flow, means \"infer this type\"\n. This is a parse error in Flow -- should be an error in Bablyon too.\nhttps://astexplorer.net/#/pNxlnaH77f\n. Well, I think the other half of this issue is still relevant: Babylon should probably error\n. The tests look right to me\n. @danez: Grammatically, that would be the same as:\nclass Bar {\n  [x] = foo['y'];\n}\nThis is all just the practical fallout of supporting ASI in the language.\n. Sorry for the delay -- it was extended to any type annotation (rather than just aliases) back in v0.31.\nA quick look at the tests here seem legit. Thanks! Once this is published, I can update the relevant package.json over in https://github.com/babel/babel/pull/5035 to point to this update. Yes this invariant is correct, I must've overlooked it. Thanks for the follow-up!. . Oops, this should be s/kind/importKind/, update coming.... Oops... Coming right up. I'm probably just not familiar with how the test runner/fixtures work, but shouldn't this output have 2 throws (one for each line)?. Per this discussion with @loganfsmyth, I guess this should stick to explicitly listing out \"type\" and \"typeof\"\nhttps://github.com/babel/babel/pull/5035#discussion_r93822476. ",
    "vkurchatkin": "The same for get/set\n. Fixed the get/set part: https://github.com/babel/babylon/pull/55\n. @danez it seems that your examples work on master\n. Hmm, they work for me. Do you have jsx plugin enabled?\n. I suspect that it is the same issue: https://github.com/babel/babylon/issues/185. I don't think it's new and have no idea why it wasn't implemented like this in the first place. I hope @jeffmo could clarify.\nI've tested all examples with Flow and they work fine.. I've taken a look at Flow's source code and that's exactly what they do. This is the culprit: https://github.com/babel/babylon/commit/f7c1af1c1f986c5b389faba83657d40d1eac31ae. Also this probably should work as well:\njs\nconst map = {\n  [<Foo/>] : null\n};. @hzoo @danharper I've made a quick patch, PTAL. Ok! I thought about that, but saw a bunch of hasPlugin just above\n. Finding a good name is tricky though, so I'll just use isClassMutatorStarter for now\n. Flow has a bug with maybe-typed properties in interfaces. It's better to avoid interfaces completely unless they only contain methods. You can omit annotations if you don't export class or function. If it's always present, then why pos is optional?. It's better to do this explicitly with any:  ((node: any): N.ForStatement). ",
    "danharper": "I've got a WIP of a fix for this. I think there's still some edge cases to cover to match Flow though (or, they might be bugs in Flow..) I'll probably have a PR ready this weekend.\n. There's some existing tests, which cover the ASI rules in this case for computed methods.\n. \ud83d\udc4d  I agree it should be treated as a bug fix. Just thought I'd mention it, as I know in the past I've had at least one file which wasn't being type-checked with Flow, but had some type annotations.\n. Sure, I'll make sure to split them in the future! :)\n. \ud83d\udc4d  I'd like to see this.\n. :+1: but the test case should include a trailing comma, right?\n. This is Flow 34's new \"optional name\" syntax. There's a PR currently open for adding support for it: #197.\nUntil then, continue supplying a name, e.g.\n``` js\n// @flow\ntype Cb = (x: mixed, y: ?T) => void;\ntype Cb0 = (x: mixed) => void;\nfunction f(cb : Cb ) : void {}\nf(function(e:mixed, v:string){})\n```\n. Sure, will take a look later today!. Fixed with #298.. This is fixed in #290 for Babel 7.\nIt was originally fixed a while ago, but it broke React Native, so it's being held for a new major version instead.. @jrajav temp workaround is to name the parameter in the annotation, e.g.\njs\nconst fn: ( Object, o2: ?Object ) => void = ( o1, o2 ) => o1. I've got a PR open now for this (#334), adding method to FunctionTypeAnnotation.\nHow about for ObjectTypeCallProperty which also contains a method-looking FunctionTypeAnnotation, e.g. type T = { (): number }?. Oh yeah :). That's what I originally had tbh, then noticed toAssignableList was being explicit with the args.\nShall I change it?\n. Oops, sorry! (I'm one of those people lol). Lint didn't pick it up. I've pushed a change.\n. I don't think so, because any syntax errors are immediately caught at the end of parseArrow: https://github.com/danharper/babylon/blob/774bf486fe2f117393dcf5ee14aa2c050ae40dd7/src/plugins/flow.js#L1169-L1175\n(which is also why the raise error happens at 1:1 and not at the actual position)\nI'm not 100% sure on why it works like this, though.\n(it's for regression tests in https://github.com/babel/babel/commit/caecebf95b035af3a31bae1a304b4d27b5e0379a)\n. oh I see, thanks for the explanation \ud83d\udc4d \n. Thinking: we could just throw a different error, catch it, then throw with a nicer message instead:\ndiff\n if (this.match(tt.colon)) {\n   let state = this.state.clone();\n   try {\n     let returnType = this.flowParseTypeAnnotation();\n-    if (this.canInsertSemicolon()) this.unexpected();\n+    if (this.canInsertSemicolon()) throw new Error(\"IS_SEMICOLON_ERR\");\n     if (!this.match(tt.arrow)) this.unexpected();\n     // assign after it is clear it is an arrow\n     node.returnType = returnType;\n   } catch (err) {\n     if (err instanceof SyntaxError) {\n       this.state = state;\n+    } else if (err.message === \"IS_SEMICOLON_ERR\") {\n+      this.unexpected(null, \"Illegal newline before arrow\");\n     } else {\n       throw err;\n     }\n   }\n }\nIt's not great, but it produces a much nicer error message, in the correct location too.\nThoughts?\n. typo: KeywordTokenType. ",
    "codecov-io": "Current coverage is 96.92% (diff: 100%)\n\nMerging #57 into master will increase coverage by <.01%\n\ndiff\n@@             master        #57   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2923     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2832       2833     +1   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update f576865...9cf395a\n. ## Current coverage is 96.16% (diff: 94.11%)\nMerging #59 into master will decrease coverage by 0.09%\n\ndiff\n@@             master        #59   diff @@\n==========================================\n  Files            19         19          \n  Lines          3212       3182    -30   \n  Methods         336        333     -3   \n  Messages          0          0          \n  Branches        838        836     -2   \n==========================================\n- Hits           3092       3060    -32   \n- Misses           62         63     +1   \n- Partials         58         59     +1\n\nPowered by Codecov. Last update e260381...2fa0e92\n. ## Current coverage is 96.93% (diff: 100%)\nMerging #65 into master will increase coverage by 0.01%\n\ndiff\n@@             master        #65   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2941    +19   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2832       2851    +19   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update f576865...8b9e8ec\n. ## Current coverage is 97.01%\nMerging #72 into master will increase coverage by <.01%\n\ndiff\n@@             master        #72   diff @@\n==========================================\n  Files            19         19          \n  Lines          2972       2980     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2883       2891     +8   \n  Misses           89         89          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 0b62ece...871f4a3\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #73 into master will not change coverage\n\ndiff\n@@             master        #73   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2922          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2832       2832          \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update f576865...3db8b0c\n. ## Current coverage is 97.00%\nMerging #75 into master will not change coverage\n\ndiff\n@@             master        #75   diff @@\n==========================================\n  Files            19         19          \n  Lines          2972       2972          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2883       2883          \n  Misses           89         89          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 0b62ece...ffae95b\n. ## Current coverage is 96.69%\nNo coverage report found for master at 3fad8cc.\nPowered by Codecov. Last updated by 3fad8cc...700068b\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #81 into master will not change coverage\n\ndiff\n@@             master        #81   diff @@\n==========================================\n  Files            19         19          \n  Lines          2913       2913          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2823       2823          \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update 88d7e20...ff7ec43\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #82 into master will increase coverage by <.01%\n\ndiff\n@@             master        #82   diff @@\n==========================================\n  Files            19         19          \n  Lines          2913       2914     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2823       2824     +1   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update 88d7e20...39cee24\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #83 into master will decrease coverage by <.01%\n\ndiff\n@@             master        #83   diff @@\n==========================================\n  Files            19         19          \n  Lines          2923       2920     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2833       2830     -3   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update 4811d61...3f9265b\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #86 into master will not change coverage\n\ndiff\n@@             master        #86   diff @@\n==========================================\n  Files            19         19          \n  Lines          2920       2920          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2830       2830          \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update c9a7bed...2290beb\n. ## Current coverage is 96.91% (diff: 100%)\nNo coverage report found for master at 0b23e5c.\nPowered by Codecov. Last update 0b23e5c...1b5bdd3\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #89 into master will not change coverage\n\ndiff\n@@             master        #89   diff @@\n==========================================\n  Files            19         19          \n  Lines          2920       2920          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2830       2830          \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update 0a6d333...6d6574a\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #94 into master will not change coverage\n\ndiff\n@@             master        #94   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2922          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2832       2832          \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update b649671...1f4b908\n. ## Current coverage is 96.78% (diff: 100%)\nMerging #95 into master will decrease coverage by 0.13%\n\ndiff\n@@             master        #95   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2922          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2832       2828     -4   \n- Misses           90         94     +4   \n  Partials          0          0\n\nPowered by Codecov. Last update b649671...b027d44\n. ## Current coverage is 96.91% (diff: 100%)\nNo coverage report found for master at 4506822.\nPowered by Codecov. Last update 4506822...3d502a8\n. ## Current coverage is 96.92% (diff: 100%)\nMerging #97 into master will increase coverage by <.01%\n\ndiff\n@@             master        #97   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2927     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2832       2837     +5   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update b649671...09a3aa0\n. ## Current coverage is 96.91% (diff: 100%)\nMerging #98 into master will decrease coverage by <.01%\n\ndiff\n@@             master        #98   diff @@\n==========================================\n  Files            19         19          \n  Lines          2922       2919     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           2832       2829     -3   \n  Misses           90         90          \n  Partials          0          0\n\nPowered by Codecov. Last update b649671...1349baa\n. ## Current coverage is 96.78% (diff: 100%)\nMerging #101 into master will not change coverage\n\ndiff\n@@             master       #101   diff @@\n==========================================\n  Files            19         19          \n  Lines          2924       2924          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2830       2830          \n  Misses           94         94          \n  Partials          0          0\n\nPowered by Codecov. Last update abec2a7...5cd4a03\n. ## Current coverage is 97.29% (diff: 100%)\nMerging #103 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #103   diff @@\n==========================================\n  Files            21         21          \n  Lines          4001       4035    +34   \n  Methods         485        491     +6   \n  Messages          0          0          \n  Branches       1179       1180     +1   \n==========================================\n+ Hits           3892       3926    +34   \n  Misses           49         49          \n  Partials         60         60\n\nPowered by Codecov. Last update 1150c0d...e42d60c. ## Current coverage is 94.13% (diff: 100%)\nMerging #104 into master will decrease coverage by 2.64%\n\ndiff\n@@             master       #104   diff @@\n==========================================\n  Files            19         19          \n  Lines          3130       3068    -62   \n  Methods         320        320          \n  Messages          0          0          \n  Branches        800        802     +2   \n==========================================\n- Hits           3029       2888   -141   \n+ Misses          101        100     -1   \n- Partials          0         80    +80\n\nPowered by Codecov. Last update dc56c0b...e9c9e00\n. ## Current coverage is 96.77% (diff: 100%)\nMerging #105 into master will not change coverage\n\ndiff\n@@             master       #105   diff @@\n==========================================\n  Files            19         19          \n  Lines          3130       3130          \n  Methods         320        320          \n  Messages          0          0          \n  Branches        800        800          \n==========================================\n  Hits           3029       3029          \n  Misses          101        101          \n  Partials          0          0\n\nPowered by Codecov. Last update dc56c0b...1ae8d2b\n. ## Current coverage is 94.38% (diff: 100%)\nMerging #106 into master will decrease coverage by 2.39%\n\ndiff\n@@             master       #106   diff @@\n==========================================\n  Files            19         19          \n  Lines          3130       3080    -50   \n  Methods         320        325     +5   \n  Messages          0          0          \n  Branches        800        806     +6   \n==========================================\n- Hits           3029       2907   -122   \n+ Misses          101         94     -7   \n- Partials          0         79    +79\n\nPowered by Codecov. Last update dc56c0b...8238134\n. ## Current coverage is 97.04% (diff: 100%)\nMerging #107 into master will increase coverage by 0.27%\n\ndiff\n@@             master       #107   diff @@\n==========================================\n  Files            19         19          \n  Lines          3130       3185    +55   \n  Methods         320        327     +7   \n  Messages          0          0          \n  Branches        800        819    +19   \n==========================================\n+ Hits           3029       3091    +62   \n+ Misses          101         94     -7   \n  Partials          0          0\n\nPowered by Codecov. Last update dc56c0b...030dc4c\n. ## Current coverage is 96.77% (diff: 100%)\nMerging #108 into master will not change coverage\n\ndiff\n@@             master       #108   diff @@\n==========================================\n  Files            19         19          \n  Lines          3130       3130          \n  Methods         320        320          \n  Messages          0          0          \n  Branches        800        800          \n==========================================\n  Hits           3029       3029          \n  Misses          101        101          \n  Partials          0          0\n\nPowered by Codecov. Last update dc56c0b...25dbfd7\n. ## Current coverage is 94.03% (diff: 100%)\nNo coverage report found for master at e3d5a7d.\nPowered by Codecov. Last update e3d5a7d...1a00d47\n. ## Current coverage is 96.77% (diff: 100%)\nMerging #110 into master will increase coverage by 2.73%\n\ndiff\n@@             master       #110   diff @@\n==========================================\n  Files            19         19          \n  Lines          3052       3130    +78   \n  Methods         320        320          \n  Messages          0          0          \n  Branches        797        797          \n==========================================\n+ Hits           2870       3029   +159   \n  Misses          101        101          \n+ Partials         81          0    -81\n\nPowered by Codecov. Last update 69a9ba8...bc6aa62\n. ## Current coverage is 94.03% (diff: 100%)\nNo coverage report found for master at 015035c.\nPowered by Codecov. Last update 015035c...f09ab3f\n. ## Current coverage is 94.04% (diff: 100%)\nNo coverage report found for master at 015035c.\nPowered by Codecov. Last update 015035c...bb2b40b\n. ## Current coverage is 94.46% (diff: 100%)\nMerging #123 into master will increase coverage by 0.04%\n\ndiff\n@@             master       #123   diff @@\n==========================================\n  Files            19         19          \n  Lines          3105       3110     +5   \n  Methods         327        327          \n  Messages          0          0          \n  Branches        816        817     +1   \n==========================================\n+ Hits           2932       2938     +6   \n  Misses           94         94          \n+ Partials         79         78     -1\n\nPowered by Codecov. Last update 650e333...85b22d0\n. ## Current coverage is 94.93% (diff: 88.88%)\nNo coverage report found for master at 015035c.\nPowered by Codecov. Last update 015035c...774bf48\n. ## Current coverage is 94.18% (diff: 97.14%)\nNo coverage report found for master at 44d44a2.\nPowered by Codecov. Last update 44d44a2...11513b7\n. ## Current coverage is 94.13% (diff: 100%)\nMerging #126 into master will increase coverage by <.01%\n\ndiff\n@@             master       #126   diff @@\n==========================================\n  Files            19         19          \n  Lines          3068       3070     +2   \n  Methods         320        320          \n  Messages          0          0          \n  Branches        802        802          \n==========================================\n+ Hits           2888       2890     +2   \n  Misses          100        100          \n  Partials         80         80\n\nPowered by Codecov. Last update ddbda7d...ee788f2\n. ## Current coverage is 94.38% (diff: 100%)\nNo coverage report found for master at 8fc6c28.\nPowered by Codecov. Last update 8fc6c28...cbe5e40\n. ## Current coverage is 94.38% (diff: 100%)\nNo coverage report found for master at 3749086.\nPowered by Codecov. Last update 3749086...c169772\n. ## Current coverage is 94.38% (diff: 100%)\nMerging #133 into master will not change coverage\n\ndiff\n@@             master       #133   diff @@\n==========================================\n  Files            19         19          \n  Lines          3082       3082          \n  Methods         325        325          \n  Messages          0          0          \n  Branches        806        806          \n==========================================\n  Hits           2909       2909          \n  Misses           94         94          \n  Partials         79         79\n\nPowered by Codecov. Last update 8d2fdb1...6b60313\n. ## Current coverage is 94.39% (diff: 100%)\nMerging #135 into master will increase coverage by <.01%\n\ndiff\n@@             master       #135   diff @@\n==========================================\n  Files            19         19          \n  Lines          3082       3084     +2   \n  Methods         325        325          \n  Messages          0          0          \n  Branches        806        806          \n==========================================\n+ Hits           2909       2911     +2   \n  Misses           94         94          \n  Partials         79         79\n\nPowered by Codecov. Last update 9cb73d8...2f953de\n. ## Current coverage is 94.47% (diff: 50.00%)\nMerging #142 into master will not change coverage\n\ndiff\n@@             master       #142   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3111          \n  Methods         327        327          \n  Messages          0          0          \n  Branches        818        818          \n==========================================\n  Hits           2939       2939          \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 4115bcb...638f78d\n. ## Current coverage is 94.44% (diff: 94.11%)\nMerging #144 into master will decrease coverage by 0.02%\n\ndiff\n@@             master       #144   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3117     +6   \n  Methods         327        328     +1   \n  Messages          0          0          \n  Branches        818        820     +2   \n==========================================\n+ Hits           2939       2944     +5   \n  Misses           94         94          \n- Partials         78         79     +1\n\nPowered by Codecov. Last update 4115bcb...909b19a\n. ## Current coverage is 94.48% (diff: 100%)\nMerging #145 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #145   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3118     +7   \n  Methods         327        329     +2   \n  Messages          0          0          \n  Branches        818        818          \n==========================================\n+ Hits           2939       2946     +7   \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 4115bcb...5f655e6\n. ## Current coverage is 94.47% (diff: 100%)\nMerging #146 into master will increase coverage by <.01%\n\ndiff\n@@             master       #146   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3115     +4   \n  Methods         327        327          \n  Messages          0          0          \n  Branches        818        818          \n==========================================\n+ Hits           2939       2943     +4   \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 4115bcb...8dc7e7b\n. ## Current coverage is 94.47% (diff: 100%)\nMerging #147 into master will not change coverage\n\ndiff\n@@             master       #147   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3111          \n  Methods         327        327          \n  Messages          0          0          \n  Branches        818        818          \n==========================================\n  Hits           2939       2939          \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 9cc0981...8f37200\n. ## Current coverage is 94.49% (diff: 100%)\nMerging #149 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #149   diff @@\n==========================================\n  Files            19         19          \n  Lines          3111       3124    +13   \n  Methods         327        327          \n  Messages          0          0          \n  Branches        818        823     +5   \n==========================================\n+ Hits           2939       2952    +13   \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 9cc0981...47bc157\n. ## Current coverage is 94.50% (diff: 100%)\nMerging #150 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #150   diff @@\n==========================================\n  Files            19         19          \n  Lines          3132       3132          \n  Methods         328        328          \n  Messages          0          0          \n  Branches        826        826          \n==========================================\n+ Hits           2959       2960     +1   \n  Misses           94         94          \n+ Partials         79         78     -1\n\nPowered by Codecov. Last update 7dd45f7...e2dd128\n. ## Current coverage is 94.47% (diff: 100%)\nNo coverage report found for master at 680f35f.\nPowered by Codecov. Last update 680f35f...8323c06\n. ## Current coverage is 94.59% (diff: 100%)\nMerging #158 into master will increase coverage by 0.07%\n\ndiff\n@@             master       #158   diff @@\n==========================================\n  Files            19         19          \n  Lines          3135       3144     +9   \n  Methods         328        331     +3   \n  Messages          0          0          \n  Branches        828        833     +5   \n==========================================\n+ Hits           2963       2974    +11   \n  Misses           94         94          \n+ Partials         78         76     -2\n\nPowered by Codecov. Last update 44f77bd...c51fb67\n. ## Current coverage is 94.47% (diff: 100%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...6e36973\n. ## Current coverage is 94.55% (diff: 97.29%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...a4c9e8f\n. ## Current coverage is 94.47% (diff: 100%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...cb6a5b4\n. ## Current coverage is 94.46% (diff: 90.00%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...e203d34\n. ## Current coverage is 94.47% (diff: 100%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...bce0e5e\n. ## Current coverage is 94.47% (diff: 100%)\nNo coverage report found for master at 2697bfd.\nPowered by Codecov. Last update 2697bfd...9020497\n. ## Current coverage is 94.51% (diff: 100%)\nNo coverage report found for master at c300230.\nPowered by Codecov. Last update c300230...6a9e586\n. ## Current coverage is 94.51% (diff: 100%)\nMerging #173 into master will not change coverage\n\ndiff\n@@             master       #173   diff @@\n==========================================\n  Files            19         19          \n  Lines          3135       3135          \n  Methods         328        328          \n  Messages          0          0          \n  Branches        828        828          \n==========================================\n  Hits           2963       2963          \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 44f77bd...9c9e70c\n. ## Current coverage is 94.51% (diff: 100%)\nMerging #174 into master will increase coverage by <.01%\n\ndiff\n@@             master       #174   diff @@\n==========================================\n  Files            19         19          \n  Lines          3135       3137     +2   \n  Methods         328        328          \n  Messages          0          0          \n  Branches        828        829     +1   \n==========================================\n+ Hits           2963       2965     +2   \n  Misses           94         94          \n  Partials         78         78\n\nPowered by Codecov. Last update 44f77bd...20604dc\n. ## Current coverage is 96.05% (diff: 100%)\nMerging #175 into master will increase coverage by 1.48%\n\ndiff\n@@             master       #175   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3169    -20   \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        832     -7   \n==========================================\n+ Hits           3016       3044    +28   \n+ Misses           94         65    -29   \n+ Partials         79         60    -19\n\nPowered by Codecov. Last update 394c954...9c56e74\n. ## Current coverage is 94.52% (diff: 100%)\nNo coverage report found for master at 3525c00.\nPowered by Codecov. Last update 3525c00...3c9d7fe\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is 77.77%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #178   +/-\n=========================================\n  Coverage          ?   96.28%         \n=========================================\n  Files             ?       20         \n  Lines             ?     3205         \n  Branches          ?      836         \n=========================================\n  Hits              ?     3086         \n  Misses            ?       61         \n  Partials          ?       58\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 97.1% <100%> (\u00f8) | |\n| src/plugins/directory.js | 100% <100%> (\u00f8) | |\n| src/parser/expression.js | 92.81% <52%> (\u00f8) | |\n| src/parser/util.js | 88.63% <84.61%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...880fbdd. Read the comment docs.. ## Current coverage is 94.57% (diff: 100%)\nMerging #179 into master will not change coverage\n\ndiff\n@@             master       #179   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3189          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        839          \n==========================================\n  Hits           3016       3016          \n  Misses           94         94          \n  Partials         79         79\n\nPowered by Codecov. Last update 26809e8...90effeb\n. ## Current coverage is 94.57% (diff: 100%)\nMerging #180 into master will not change coverage\n\ndiff\n@@             master       #180   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3189          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        839          \n==========================================\n  Hits           3016       3016          \n  Misses           94         94          \n  Partials         79         79\n\nPowered by Codecov. Last update 26809e8...08c1ed2\n. ## Current coverage is 96.14% (diff: 100%)\nMerging #182 into master will increase coverage by 1.56%\n\ndiff\n@@             master       #182   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3189          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        839          \n==========================================\n+ Hits           3016       3066    +50   \n+ Misses           94         60    -34   \n+ Partials         79         63    -16\n\nPowered by Codecov. Last update 394c954...3c64365\n. ## Current coverage is 94.66% (diff: 100%)\nMerging #183 into master will increase coverage by 0.09%\n\ndiff\n@@             master       #183   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3189          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        839          \n==========================================\n+ Hits           3016       3019     +3   \n+ Misses           94         92     -2   \n+ Partials         79         78     -1\n\nPowered by Codecov. Last update 394c954...a16b8a4\n. ## Current coverage is 94.63% (diff: 100%)\nMerging #184 into master will increase coverage by 0.05%\n\ndiff\n@@             master       #184   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3187     -2   \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        838     -1   \n==========================================\n  Hits           3016       3016          \n+ Misses           94         93     -1   \n+ Partials         79         78     -1\n\nPowered by Codecov. Last update 394c954...a71cba9\n. ## Current coverage is 96.15% (diff: 100%)\nMerging #187 into master will not change coverage\n\ndiff\n@@             master       #187   diff @@\n==========================================\n  Files            19         19          \n  Lines          3169       3169          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        832        832          \n==========================================\n  Hits           3047       3047          \n  Misses           63         63          \n  Partials         59         59\n\nPowered by Codecov. Last update 9b6e243...2e23b62\n. ## Current coverage is 94.57% (diff: 100%)\nMerging #188 into master will not change coverage\n\ndiff\n@@             master       #188   diff @@\n==========================================\n  Files            19         19          \n  Lines          3189       3189          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        839        839          \n==========================================\n  Hits           3016       3016          \n  Misses           94         94          \n  Partials         79         79\n\nPowered by Codecov. Last update 394c954...dd06893\n. ## Current coverage is 96.15% (diff: 100%)\nMerging #189 into master will not change coverage\n\ndiff\n@@             master       #189   diff @@\n==========================================\n  Files            19         19          \n  Lines          3169       3169          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        832        832          \n==========================================\n  Hits           3047       3047          \n  Misses           63         63          \n  Partials         59         59\n\nPowered by Codecov. Last update 9b6e243...9f3baf3\n. ## Current coverage is 96.15% (diff: 100%)\nMerging #191 into master will not change coverage\n\ndiff\n@@             master       #191   diff @@\n==========================================\n  Files            19         19          \n  Lines          3169       3169          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        832        832          \n==========================================\n  Hits           3047       3047          \n  Misses           63         63          \n  Partials         59         59\n\nPowered by Codecov. Last update 0d72a89...cce5503\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...4aba3d1\n. ## Current coverage is 96.26% (diff: 100%)\nNo coverage report found for master at d1b0886.\nPowered by Codecov. Last update d1b0886...88e9335\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at d1b0886.\nPowered by Codecov. Last update d1b0886...6f99c00\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at d1b0886.\nPowered by Codecov. Last update d1b0886...cb89524\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...097b643\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...a5ed09b\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...7f821f1\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...d681c08\n. ## Current coverage is 96.21% (diff: 100%)\nNo coverage report found for master at 572bc9c.\nPowered by Codecov. Last update 572bc9c...c5674b6\n. ## Current coverage is 97.27% (diff: 100%)\nMerging #213 into master will increase coverage by <.01%\n\ndiff\n@@             master       #213   diff @@\n==========================================\n  Files            21         21          \n  Lines          3999       4004     +5   \n  Methods         489        482     -7   \n  Messages          0          0          \n  Branches       1169       1179    +10   \n==========================================\n+ Hits           3890       3895     +5   \n  Misses           49         49          \n  Partials         60         60\n\nPowered by Codecov. Last update 28c467e...3dc7b8d. ## Current coverage is 96.21% (diff: 100%)\nMerging #214 into master will not change coverage\n\ndiff\n@@             master       #214   diff @@\n==========================================\n  Files            19         19          \n  Lines          3167       3167          \n  Methods         333        333          \n  Messages          0          0          \n  Branches        831        831          \n==========================================\n  Hits           3047       3047          \n  Misses           62         62          \n  Partials         58         58\n\nPowered by Codecov. Last update 4141683...dd4aa77\n. ## Current coverage is 97.69% (diff: 100%)\nMerging #219 into master will increase coverage by <.01%\n\ndiff\n@@             master       #219   diff @@\n==========================================\n  Files            19         19          \n  Lines          3212       3214     +2   \n  Methods         336        336          \n  Messages          0          0          \n  Branches        838        838          \n==========================================\n+ Hits           3138       3140     +2   \n  Misses           30         30          \n  Partials         44         44\n\nPowered by Codecov. Last update 6cb0235...9e0fcac\n. ## Current coverage is 97.69% (diff: 100%)\nMerging #221 into master will not change coverage\n\ndiff\n@@             master       #221   diff @@\n==========================================\n  Files            19         19          \n  Lines          3214       3214          \n  Methods         336        336          \n  Messages          0          0          \n  Branches        838        838          \n==========================================\n  Hits           3140       3140          \n  Misses           30         30          \n  Partials         44         44\n\nPowered by Codecov. Last update c30a556...9043de9\n. ## Current coverage is 97.69% (diff: 100%)\nMerging #222 into master will not change coverage\n\ndiff\n@@             master       #222   diff @@\n==========================================\n  Files            19         19          \n  Lines          3214       3214          \n  Methods         336        336          \n  Messages          0          0          \n  Branches        838        838          \n==========================================\n  Hits           3140       3140          \n  Misses           30         30          \n  Partials         44         44\n\nPowered by Codecov. Last update c30a556...8d98250\n. ## Current coverage is 97.69% (diff: 100%)\nMerging #223 into master will increase coverage by <.01%\n\ndiff\n@@             master       #223   diff @@\n==========================================\n  Files            19         19          \n  Lines          3214       3215     +1   \n  Methods         336        336          \n  Messages          0          0          \n  Branches        838        838          \n==========================================\n+ Hits           3140       3141     +1   \n  Misses           30         30          \n  Partials         44         44\n\nPowered by Codecov. Last update c30a556...ad88d46\n. # Codecov Report\nMerging #224 into master will increase coverage by 0.03%.\nThe diff coverage is 99.04%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #224      +/-\n==========================================\n+ Coverage    98.2%   98.24%   +0.03%   \n==========================================\n  Files          20       20            \n  Lines        3462     3530      +68   \n  Branches      935      972      +37   \n==========================================\n+ Hits         3400     3468      +68   \n  Misses         23       23            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.21% <35.23%> (-1.4%) | :arrow_down: |\n| #babylon | 97.08% <99.04%> (+0.11%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.07% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.15% <99.03%> (+0.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad284d5...2808546. Read the comment docs.\n. ## Current coverage is 97.45% (diff: 100%)\nNo coverage report found for master at ba96b91.\nPowered by Codecov. Last update ba96b91...c65ae91. # Codecov Report\nMerging #274 into master will increase coverage by 0.01%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #274      +/-\n==========================================\n+ Coverage   97.65%   97.67%   +0.01%   \n==========================================\n  Files          20       20            \n  Lines        3326     3351      +25   \n  Branches      882      890       +8   \n==========================================\n+ Hits         3248     3273      +25   \n  Misses         30       30            \n  Partials       48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.34% <100%> (+0.01%) | :white_check_mark: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| src/tokenizer/index.js | 98.34% <97.29%> (+0.07%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...45fc0b7. Read the comment docs.. ## Current coverage is 97.47% (diff: 100%)\nNo coverage report found for master at 62d1970.\nPowered by Codecov. Last update 62d1970...f0403ff. # Codecov Report\nMerging #277 into master will increase coverage by 0.05%.\nThe diff coverage is 99.27%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #277      +/-\n=========================================\n+ Coverage   97.74%   97.8%   +0.05%   \n=========================================\n  Files          20      21       +1   \n  Lines        3367    3504     +137   \n  Branches      888     925      +37   \n=========================================\n+ Hits         3291    3427     +136   \n  Misses         29      29            \n- Partials       47      48       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/index.js | 97.95% <100%> (+0.13%) | :white_check_mark: |\n| src/parser/expression.js | 97.33% <100%> (\u00f8) | :white_check_mark: |\n| src/index.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| src/plugins/estree.js | 99.24% <99.24%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c79dd95...1e592e0. Read the comment docs.. ## Current coverage is 97.46% (diff: 100%)\nMerging #283 into master will not change coverage\n\ndiff\n@@             master       #283   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       3991          \n  Methods         488        483     -5   \n  Messages          0          0          \n  Branches       1167       1172     +5   \n==========================================\n  Hits           3890       3890          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update ed13a4a...af9565c. ## Current coverage is 97.58% (diff: 100%)\nMerging #284 into 7.0 will not change coverage\n\ndiff\n@@                7.0       #284   diff @@\n==========================================\n  Files            20         20          \n  Lines          3967       3967          \n  Methods         469        500    +31   \n  Messages          0          0          \n  Branches       1175       1144    -31   \n==========================================\n  Hits           3871       3871          \n  Misses           42         42          \n  Partials         54         54\n\nPowered by Codecov. Last update ed625cb...36f5bdb. ## Current coverage is 97.46% (diff: 100%)\nMerging #285 into master will not change coverage\n\ndiff\n@@             master       #285   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       3991          \n  Methods         488        474    -14   \n  Messages          0          0          \n  Branches       1167       1181    +14   \n==========================================\n  Hits           3890       3890          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update aa1a4be...2ddd0ed. ## Current coverage is 97.47% (diff: 100%)\nMerging #288 into master will increase coverage by <.01%\n\ndiff\n@@             master       #288   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       3993     +2   \n  Methods         488        488          \n  Messages          0          0          \n  Branches       1167       1168     +1   \n==========================================\n+ Hits           3890       3892     +2   \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update aa1a4be...f231993. ## Current coverage is 97.46% (diff: 99.36%)\nMerging #290 into 7.0 will decrease coverage by 0.11%\n\ndiff\n@@                7.0       #290   diff @@\n==========================================\n  Files            20         21     +1   \n  Lines          3967       3991    +24   \n  Methods         469        491    +22   \n  Messages          0          0          \n  Branches       1175       1164    -11   \n==========================================\n+ Hits           3871       3890    +19   \n- Misses           42         44     +2   \n- Partials         54         57     +3\n\nPowered by Codecov. Last update ed625cb...6a19abe. ## Current coverage is 97.59% (diff: 50.00%)\nMerging #291 into 7.0 will increase coverage by 0.01%\n\ndiff\n@@                7.0       #291   diff @@\n==========================================\n  Files            20         20          \n  Lines          3962       3953     -9   \n  Methods         483        476     -7   \n  Messages          0          0          \n  Branches       1162       1166     +4   \n==========================================\n- Hits           3866       3858     -8   \n  Misses           42         42          \n+ Partials         54         53     -1\n\nPowered by Codecov. Last update 7a3e717...0bc4e4a. ## Current coverage is 97.46% (diff: 100%)\nMerging #292 into master will not change coverage\n\ndiff\n@@             master       #292   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       3991          \n  Methods         491        489     -2   \n  Messages          0          0          \n  Branches       1164       1166     +2   \n==========================================\n  Hits           3890       3890          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update 13bebfd...10a0fff. ## Current coverage is 97.46% (diff: 100%)\nMerging #293 into master will not change coverage\n\ndiff\n@@             master       #293   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       3991          \n  Methods         473        477     +4   \n  Messages          0          0          \n  Branches       1182       1178     -4   \n==========================================\n  Hits           3890       3890          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update a465d25...63a417a. ## Current coverage is 97.47% (diff: 100%)\nMerging #294 into master will increase coverage by <.01%\n\ndiff\n@@             master       #294   diff @@\n==========================================\n  Files            21         21          \n  Lines          3991       4000     +9   \n  Methods         489        494     +5   \n  Messages          0          0          \n  Branches       1166       1164     -2   \n==========================================\n+ Hits           3890       3899     +9   \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update b918554...87b4e9c. ## Current coverage is 97.27% (diff: 100%)\nMerging #295 into master will increase coverage by 0.14%\n\ndiff\n@@             master       #295   diff @@\n==========================================\n  Files            21         21          \n  Lines          3487       3489     +2   \n  Methods         400        406     +6   \n  Messages          0          0          \n  Branches        896        900     +4   \n==========================================\n+ Hits           3387       3394     +7   \n+ Misses           44         40     -4   \n+ Partials         56         55     -1\n\nPowered by Codecov. Last update 0a00aff...df858ab. ## Current coverage is 97.47% (diff: 100%)\nMerging #298 into master will not change coverage\n\ndiff\n@@             master       #298   diff @@\n==========================================\n  Files            21         21          \n  Lines          3993       3993          \n  Methods         489        492     +3   \n  Messages          0          0          \n  Branches       1167       1164     -3   \n==========================================\n  Hits           3892       3892          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update 9d78213...a9696e8. ## Current coverage is 97.47% (diff: 100%)\nMerging #299 into master will not change coverage\n\ndiff\n@@             master       #299   diff @@\n==========================================\n  Files            21         21          \n  Lines          3993       3993          \n  Methods         489        478    -11   \n  Messages          0          0          \n  Branches       1167       1178    +11   \n==========================================\n  Hits           3892       3892          \n  Misses           44         44          \n  Partials         57         57\n\nPowered by Codecov. Last update 9d78213...96a2a98. ## Current coverage is 97.30% (diff: 100%)\nMerging #300 into master will decrease coverage by 0.16%\n\ndiff\n@@             master       #300   diff @@\n==========================================\n  Files            21         21          \n  Lines          3993       4003    +10   \n  Methods         478        480     +2   \n  Messages          0          0          \n  Branches       1178       1179     +1   \n==========================================\n+ Hits           3892       3895     +3   \n- Misses           44         49     +5   \n- Partials         57         59     +2\n\nPowered by Codecov. Last update 68a173c...0a1d649. ## Current coverage is 97.27% (diff: 100%)\nMerging #301 into 7.0 will decrease coverage by 0.30%\n\ndiff\n@@                7.0       #301   diff @@\n==========================================\n  Files            20         20          \n  Lines          3962       3957     -5   \n  Methods         483        476     -7   \n  Messages          0          0          \n  Branches       1162       1165     +3   \n==========================================\n- Hits           3866       3849    -17   \n- Misses           42         50     +8   \n- Partials         54         58     +4\n\nPowered by Codecov. Last update 7a3e717...4f91d30. ## Current coverage is 97.27% (diff: 100%)\nMerging #305 into master will increase coverage by <.01%\n\ndiff\n@@             master       #305   diff @@\n==========================================\n  Files            21         21          \n  Lines          3999       4000     +1   \n  Methods         489        469    -20   \n  Messages          0          0          \n  Branches       1169       1191    +22   \n==========================================\n+ Hits           3890       3891     +1   \n  Misses           49         49          \n  Partials         60         60\n\nPowered by Codecov. Last update 28c467e...fc069fd. ## Current coverage is 97.19% (diff: 100%)\nMerging #307 into master will increase coverage by 0.06%\n\ndiff\n@@             master       #307   diff @@\n==========================================\n  Files            21         21          \n  Lines          3487       3492     +5   \n  Methods         400        400          \n  Messages          0          0          \n  Branches        896        895     -1   \n==========================================\n+ Hits           3387       3394     +7   \n+ Misses           44         43     -1   \n+ Partials         56         55     -1\n\nPowered by Codecov. Last update 0a00aff...fe21e06. ## Current coverage is 97.27% (diff: 100%)\nMerging #314 into master will increase coverage by <.01%\n\ndiff\n@@             master       #314   diff @@\n==========================================\n  Files            21         21          \n  Lines          4001       4006     +5   \n  Methods         485        482     -3   \n  Messages          0          0          \n  Branches       1179       1184     +5   \n==========================================\n+ Hits           3892       3897     +5   \n  Misses           49         49          \n  Partials         60         60\n\nPowered by Codecov. Last update 1150c0d...805bd1e. ## Current coverage is 97.27% (diff: 100%)\nMerging #315 into master will increase coverage by <.01%\n\ndiff\n@@             master       #315   diff @@\n==========================================\n  Files            21         21          \n  Lines          4001       4007     +6   \n  Methods         481        486     +5   \n  Messages          0          0          \n  Branches       1183       1180     -3   \n==========================================\n+ Hits           3892       3898     +6   \n  Misses           49         49          \n  Partials         60         60\n\nPowered by Codecov. Last update a1bfa02...44a804e. ## Current coverage is 97.25% (diff: 100%)\nMerging #317 into master will decrease coverage by 0.02%\n\ndiff\n@@             master       #317   diff @@\n==========================================\n  Files            21         21          \n  Lines          4001       4005     +4   \n  Methods         481        497    +16   \n  Messages          0          0          \n  Branches       1183       1168    -15   \n==========================================\n+ Hits           3892       3895     +3   \n- Misses           49         50     +1   \n  Partials         60         60\n\nPowered by Codecov. Last update a1bfa02...7186001. ## Current coverage is 97.46% (diff: 100%)\nMerging #322 into 7.0 will increase coverage by 0.17%\n\ndiff\n@@                7.0       #322   diff @@\n==========================================\n  Files            20         19     -1   \n  Lines          3948       3237   -711   \n  Methods         475        338   -137   \n  Messages          0          0          \n  Branches       1163        847   -316   \n==========================================\n- Hits           3841       3155   -686   \n+ Misses           50         35    -15   \n+ Partials         57         47    -10\n\nPowered by Codecov. Last update bd00176...3bb3390. ## Current coverage is 97.64% (diff: 100%)\nMerging #323 into master will not change coverage\n\ndiff\n@@             master       #323   diff @@\n==========================================\n  Files            20         20          \n  Lines          3313       3313          \n  Methods         349        349          \n  Messages          0          0          \n  Branches        879        879          \n==========================================\n  Hits           3235       3235          \n  Misses           30         30          \n  Partials         48         48\n\nPowered by Codecov. Last update 9929baa...004a43e. ## Current coverage is 97.64% (diff: 100%)\nMerging #324 into master will increase coverage by <.01%\n\ndiff\n@@             master       #324   diff @@\n==========================================\n  Files            20         20          \n  Lines          3313       3315     +2   \n  Methods         349        349          \n  Messages          0          0          \n  Branches        879        880     +1   \n==========================================\n+ Hits           3235       3237     +2   \n  Misses           30         30          \n  Partials         48         48\n\nPowered by Codecov. Last update 9929baa...535d09d. ## Current coverage is 97.65% (diff: 100%)\nMerging #330 into master will not change coverage\n\ndiff\n@@             master       #330   diff @@\n==========================================\n  Files            20         20          \n  Lines          3326       3326          \n  Methods         351        351          \n  Messages          0          0          \n  Branches        882        882          \n==========================================\n  Hits           3248       3248          \n  Misses           30         30          \n  Partials         48         48\n\nPowered by Codecov. Last update 898c4a7...bc9ed98. ## Current coverage is 97.46% (diff: 100%)\nMerging #332 into 7.0 will not change coverage\n\ndiff\n@@                7.0       #332   diff @@\n==========================================\n  Files            19         19          \n  Lines          3237       3237          \n  Methods         338        338          \n  Messages          0          0          \n  Branches        847        847          \n==========================================\n  Hits           3155       3155          \n  Misses           35         35          \n  Partials         47         47\n\nPowered by Codecov. Last update c424156...60079c9. # Codecov Report\nMerging #333 into 7.0 will increase coverage by 0.7%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\n7.0     #333     +/-\n=========================================\n+ Coverage   97.46%   98.17%   +0.7%   \n=========================================\n  Files          19       19           \n  Lines        3237     4380   +1143   \n  Branches      847     1398    +551   \n=========================================\n+ Hits         3155     4300   +1145   \n+ Misses         35       34      -1   \n+ Partials       47       46      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 97.53% <100%> (+0.8%) | :white_check_mark: |\n| src/parser/lval.js | 98.55% <\u00f8> (-0.1%) | :x: |\n| src/parser/statement.js | 97.89% <\u00f8> (-0.01%) | :x: |\n| src/util/identifier.js | 100% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/index.js | 100% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/plugins/jsx/index.js | 98.4% <\u00f8> (+0.62%) | :white_check_mark: |\n| src/tokenizer/index.js | 99.04% <\u00f8> (+0.77%) | :white_check_mark: |\n| src/parser/expression.js | 98.3% <\u00f8> (+1.85%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c424156...2bdc201. Read the comment docs.. ## Current coverage is 97.65% (diff: 100%)\nMerging #334 into master will increase coverage by <.01%\n\ndiff\n@@             master       #334   diff @@\n==========================================\n  Files            20         20          \n  Lines          3326       3327     +1   \n  Methods         351        351          \n  Messages          0          0          \n  Branches        882        883     +1   \n==========================================\n+ Hits           3248       3249     +1   \n  Misses           30         30          \n  Partials         48         48\n\nPowered by Codecov. Last update 898c4a7...e0ef511. # Codecov Report\nMerging #335 into 7.0 will decrease coverage by -17.74%.\nThe diff coverage is n/a.\n\n```diff\n@@             Coverage Diff             @@\n7.0     #335       +/-\n===========================================\n- Coverage   97.82%   80.08%   -17.74%   \n===========================================\n  Files          20       20             \n  Lines        3450     3450             \n  Branches      908      908             \n===========================================\n- Hits         3375     2763      -612   \n- Misses         30      485      +455   \n- Partials       45      202      +157\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 3.03% <\u00f8> (-96.22%) | :x: |\n| src/index.js | 50% <\u00f8> (-50%) | :x: |\n| src/plugins/jsx/index.js | 74.44% <\u00f8> (-23.34%) | :x: |\n| src/parser/index.js | 81.08% <\u00f8> (-18.92%) | :x: |\n| src/parser/lval.js | 81.75% <\u00f8> (-16.9%) | :x: |\n| src/plugins/flow.js | 80.64% <\u00f8> (-16.63%) | :x: |\n| src/parser/statement.js | 82.93% <\u00f8> (-15%) | :x: |\n| src/tokenizer/index.js | 85.12% <\u00f8> (-13.15%) | :x: |\n| src/parser/expression.js | 85.26% <\u00f8> (-12.07%) | :x: |\n| src/util/identifier.js | 88.57% <\u00f8> (-11.43%) | :x: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2ccc6a...c214854. Read the comment docs.. # Codecov Report\nMerging #337 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #337   +/-\n=======================================\n  Coverage   97.65%   97.65%         \n=======================================\n  Files          20       20         \n  Lines        3326     3326         \n  Branches      882      882         \n=======================================\n  Hits         3248     3248         \n  Misses         30       30         \n  Partials       48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.32% <100%> (\u00f8) | :white_check_mark: |\n| src/plugins/flow.js | 97.52% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...7322001. Read the comment docs.. # Codecov Report\nMerging #338 into master will increase coverage by <.01%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #338      +/-\n==========================================\n+ Coverage   97.65%   97.65%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3326     3327       +1   \n  Branches      882      883       +1   \n==========================================\n+ Hits         3248     3249       +1   \n  Misses         30       30            \n  Partials       48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 97.53% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...209ae11. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@407c97c). Click here to learn what that means.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #339   +/-\n=========================================\n  Coverage          ?   97.65%         \n=========================================\n  Files             ?       20         \n  Lines             ?     3327         \n  Branches          ?      884         \n=========================================\n  Hits              ?     3249         \n  Misses            ?       30         \n  Partials          ?       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.33% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 407c97c...7cb21c5. Read the comment docs.. # Codecov Report\nMerging #341 into master will increase coverage by <.01%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #341      +/-\n==========================================\n+ Coverage   97.65%   97.65%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3326     3327       +1   \n  Branches      882      883       +1   \n==========================================\n+ Hits         3248     3249       +1   \n  Misses         30       30            \n  Partials       48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/options.js | 100% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/parser/statement.js | 97.79% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...46c1342. Read the comment docs.. # Codecov Report\nMerging #346 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #346   +/-\n=======================================\n  Coverage   97.65%   97.65%         \n=======================================\n  Files          20       20         \n  Lines        3326     3326         \n  Branches      882      882         \n=======================================\n  Hits         3248     3248         \n  Misses         30       30         \n  Partials       48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/options.js | 100% <\u00f8> (\u00f8) | :white_check_mark: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...c0e579c. Read the comment docs.. # Codecov Report\nMerging #349 into 7.0 will not change coverage.\n\n```diff\n@@           Coverage Diff           @@\n7.0     #349   +/-\n=======================================\n  Coverage   97.65%   97.65%         \n=======================================\n  Files          19       19         \n  Lines        3277     3277         \n  Branches      867      867         \n=======================================\n  Hits         3200     3200         \n  Misses         31       31         \n  Partials       46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 97.91% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0309a5b...3e9cb98. Read the comment docs.. # Codecov Report\nMerging #350 into master will not change coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #350   +/-\n=======================================\n  Coverage   97.65%   97.65%         \n=======================================\n  Files          20       20         \n  Lines        3326     3326         \n  Branches      882      882         \n=======================================\n  Hits         3248     3248         \n  Misses         30       30         \n  Partials       48       48\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898c4a7...dee282d. Read the comment docs.. # Codecov Report\nMerging #351 into master will increase coverage by 0.3%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #351     +/-\n=========================================\n+ Coverage   97.74%   98.05%   +0.3%   \n=========================================\n  Files          20       20           \n  Lines        3367     3385     +18   \n  Branches      888      887      -1   \n=========================================\n+ Hits         3291     3319     +28   \n+ Misses         29       23      -6   \n+ Partials       47       43      -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.39% <100%> (+1.59%) | :white_check_mark: |\n| src/plugins/flow.js | 97.86% <100%> (-0.01%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c79dd95...a627b29. Read the comment docs.. # Codecov Report\nMerging #355 into master will not change coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #355   +/-\n=======================================\n  Coverage   97.74%   97.74%         \n=======================================\n  Files          20       20         \n  Lines        3367     3367         \n  Branches      888      888         \n=======================================\n  Hits         3291     3291         \n  Misses         29       29         \n  Partials       47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c79dd95...13a9ce8. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #358   +/-\n=========================================\n  Coverage          ?   97.85%         \n=========================================\n  Files             ?       21         \n  Lines             ?     3504         \n  Branches          ?      925         \n=========================================\n  Hits              ?     3429         \n  Misses            ?       28         \n  Partials          ?       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 98.11% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...89dc160. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff            @@\nmaster    #360   +/-\n========================================\n  Coverage          ?   97.8%         \n========================================\n  Files             ?      21         \n  Lines             ?    3504         \n  Branches          ?     925         \n========================================\n  Hits              ?    3427         \n  Misses            ?      29         \n  Partials          ?      48\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...4a58492. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (7.0@56a92cc). Click here to learn what that means.\nThe diff coverage is 92.85%.\n\n```diff\n@@          Coverage Diff           @@\n7.0     #363   +/-\n======================================\n  Coverage       ?   96.78%         \n======================================\n  Files          ?       20         \n  Lines          ?     3449         \n  Branches       ?      915         \n======================================\n  Hits           ?     3338         \n  Misses         ?       58         \n  Partials       ?       53\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/options.js | 100% <\u00f8> (\u00f8) | |\n| src/util/location.js | 100% <100%> (\u00f8) | |\n| src/plugins/flow.js | 97.22% <100%> (\u00f8) | |\n| src/parser/node.js | 97.05% <90.9%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 56a92cc...539be12. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff            @@\nmaster    #364   +/-\n========================================\n  Coverage          ?   97.8%         \n========================================\n  Files             ?      21         \n  Lines             ?    3504         \n  Branches          ?     925         \n========================================\n  Hits              ?    3427         \n  Misses            ?      29         \n  Partials          ?      48\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...9cccab4. Read the comment docs.. \n",
    "Lucretiel": "Quick follow up: I've just discovered that this bug ONLY manifests itself if the react babel preset is being used, so I'll copy-paste this issue over there, too: https://phabricator.babeljs.io/T7463\n. ",
    "neurall": "I definitely understand. I reimplemented it as JadeX plugin as proposed by facebook guys. Thx\n. Ahh. I work on case insensitive mac so build was passing before PR. \nBut as travis spotted\nOffender was uppercase plugin dir name \nJadeX instead of jadex.\nSorry for that. \n. There is now babel-plugin-syntax-jadex in npm \nso after\nnpm install babel-plugin-syntax-jadex\necho -e '<a>\\n <b>' > test.js && babel --presets \"react\" --plugins \"syntax-jadex\" test.js\n```\nReact.createElement(\n  \"a\",\n  null,\n  React.createElement(\"b\", null)\n);\n```\n. ",
    "sophiebits": "cc @danez \n. Cool, glad there's a simple fix. I suppose this still could be a problem on files with thousands of question marks, but maybe that's not worth worrying about. Should be fine on JSON-like things which are the most likely contents of a large JS file.\n. Another thought I just had: if I try to parse a ? b : c ? d : e ? f : g ? h : i ? j : k ? l : m ? n : o ? p : syntax error, will it try exponentially many paths when backtracking? \n. Thank you!\n. ",
    "RReverser": "Well, first of all, I don't see how this can be possibly related to a code parser.\nSecond, checked in React is a boolean and takes true / false and not HTML-like \"checked\" string and certainly not null.\n. You can also take a look at https://www.npmjs.com/package/JSONStream to avoid memory issues and stall that occurs because JSON.stringify tries to serialize entire object into memory.\n. ",
    "thomkrillis": "Yep, just confirmed this issue wasn't caused by babylon updating. Guess I jumped the gun opening this ticket.\nThanks for the replies.\n. ",
    "Jamesernator": "This also causes an error in babel-traverse if it receives one of these invalid asts.\n. Although an edge case this is something I actually hit in actual code, specially I made a tiny library for making modules automatically from folders (here) which used the export <name> from \"./folder-of-default-exports/<name>.js\" for its exporting, for now though I can just switch it to \njs\nimport foo from \"./<name>.js\"\nexport foo\nas currently transform-export-extensions doesn't transform export { <local> as <exported> } from \"<module>\" currently but I'll put in an issue on Babel for that.. I didn't know that that was actually part of es2015, good to know thanks.. Yes that'd be awesome.. ",
    "jdalton": "Moved to https://phabricator.babeljs.io/T7493.\n. @ljharb\n\nYou absolutely can infer the Module parsing goal if import or export appears - however, the lack of either of those keywords absolutely can not be used to distinguish between Script and Module.\n\nThe  import/export or .mjs detect seems like a nice default to me.\nFolks can always be explicit about their sourceType. \n\n, but I would strongly discourage using the unambiguous grammar proposal (in any tool or library) until it's made progress in TC39. \n\nThis kind of \"auto\" detect is for a config though, so doesn't really need TC39's blessing or Node's ftm, and is already in use by other tools, like Flow and the TypeScript compiler.\nIt's super simple stuff. . > there exist valid files that can be both a Script or a Module (they neither import nor export anything), and they can do different things based on the parsing goal.\nFor those cases folks can be explicit w/ sourceType in their Babel config or use export {} in code.. I think defaults should appeal to the common case. And while folks can have side-effect only modules they're not the common case. This feels like getting hung-up on an edge case more than anything else. Babel could always float things in an RC release to see how it goes. If things don't work out \"auto\" could always be an-option instead of the default-option.. > I'm not sure I understand why it'd be better\nThe reasoning for \"auto\" is outlined in the issue summary at the top.\nI donno. I think we disagree about much of this kind of stuff \ud83d\ude38 . > The issue summary at the top outlines the hazards of silently assuming the wrong thing - which supports my position.\nNaw, the issue is folks run into code that can be a mix of source types so one-source-type-doesn't-fit-all which is where an \"auto\" option comes in handy. . > when it's impossible to know for sure if it's a Script or a Module, is hazardous - whether it's \"module\", \"script\", or \"auto\".\nI think it's possible to have a pretty good hunch. Auto doesn't necessarily mean ironclad. Though, if there was such a thing that option name, \"ironclad\", would be p rad.. Pinging back highlights of an off-thread convo with @ljharb:\nBabel can warn if it encounters ambiguous code so folks could investigate and adjust/ignore as needed which would help with the safety concern.\nWithout putting words in his mouth I believe Jordan is more against \"auto\" being a default than having \"auto\" as an option at all. For me, if push comes to shove I'm OK with \"auto\" not being a default but would reeeaaally dig the default and the option nonetheless.. > That said, defaulting to script with auto being exposed as an option might not be the end of the world?\nYou could keep the default as it is, \"module\", and have the \"auto\" option.. I understand that. I'm saying as things are it would be nice to continue to keep the target as \"module\". I'd prefer it not to start the js/mjs split as the default in v7 probably better for v8. For v7 it could be always be an option just as \"auto\" is an option.. > For v7, I'm pretty neutral; but after ESM ships in Node I am heavily against defaulting to \"module\".\nThat makes sense. I'm down for reevaluating in v8.. @danez To avoid derailing the babel slack is perfect for side conversation.. Thanks, I'll dig a bit and report back.\nUpdate:\nOk, I've pinged Brian Terlson for insight into the design choice.\nThis can be closed though since it would be yet another proposal to remove binding order significance.. Just pinging back I made reify support unordered export and import specifiers.\nIt simplified the export extension a bit too \u26a1\ufe0f . >  I don't think I'm comfortable landing any changes to this unless there were an official proposal, as you mentioned. \nNo worries \ud83d\ude0e\n\nI agree it's surprising behavior to me from a grammar definition standpoint, but being that this is the first time I've seen the question raised, I can't imagine it's a case that comes up often.\n\nIt's a bit WTFJS so I'm ok smoothing over its rough edge in my neck of the woods.. \ud83e\udd16 \u2764\ufe0f . Is it possible to warn if ambiguous code is detected?. For perf I had the acorn folks dig into proofing out an optimized top level parse.\nIn reify we also do a source sniff for import or export and if it fails we skip it.. ",
    "xiemaisi": "That certainly also looks suspicious, but I wasn't immediately able to construct an example (I'm new to Babylon).\n. Sure, that works, too. I've amended the commit.\n. ",
    "nicolo-ribaudo": "Now this correctly throws both using decorators and decorators2. Is this still a bug? In the repl it seems to work. This seems to be fixed:\nhttps://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015%2Creact%2Cstage-2&targets=&browsers=&builtIns=false&debug=false&code_lz=DwZQ7glgLgxgFgAngUxga2QEwMJwgG0wCdkA7AXgCJAAfUoQFdTdUMc9CSKBvAckGdFHgF8EAegB8QA\njs\nReact.createElement(Switch, { checkedChildren: \"\\u5F00\", unCheckedChildren: '\u5173' });\nThe strings in the output still aren't the same (one is escaped, the other one isn't), but they have the same meaning.. @rajzshkr Go ahead!. This works on babylon7:\nhttps://astexplorer.net/#/gist/bd0c7fa15c96fe0553cb9961550d7ee3/latest. It works like with Flow, but with different nodes. You can find them in the TypeScript sections of src/types.js:\nhttps://github.com/babel/babylon/blob/master/src/types.js#L792\nhttps://github.com/babel/babylon/blob/master/src/types.js#L869. Now it seems to work both in babylon@7.0.0-beta.16 and babylon@6.17.4\nhttps://runkit.com/embed/dlq8yt28haf8. I have a concern about versioning: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes makes me think that typescript can have breaking changes. Does this PR make babylon potentially need a major version bump every time a new ts version is released?. Thank you \ud83d\udc4d. Also () => {} ? a : b.\nCan I fix this issue?. This could be a bug in the flow specification, since the flow repl has the same issue (https://flow.org/try/#0PQKgBAAgZgNg9gdzCYAoVA3AhgJzADzAF4wAXHAVwFMwB+MAI2ID4wAKAbzKoGdSAuRmAC+ASjCCMLdl1K8BYAOSKRogNzogA)\n\nEdit: https://github.com/facebook/flow/issues/2006, https://github.com/babel/babylon/issues/58\nNot related, but also typescript has the same issue! https://www.typescriptlang.org/play/index.html#src=var%20a%20%3D%20b%20%3F%20(c)%20%3A%20d%20%3D%3E%20e%3B. Fixing this might introduce an ambiguity:\njs\na ? (b) : c => (d) : e => f\nHow should that expressions be parsed?\n```js\na ? function (b) : c {\n    return (d)\n} : function (e) {\n    return f\n}\n// or\na ? (b) : function (c) {\n    return function (d) : e {\n        return f\n    }\n}\n``. They will work becausepotentialArrowAt` will be the start of the first parenthesis, so it will be different from the start of the arrow function.\nAnyway, I won't have time to add the tests until the 13th.. Thank you for taking care of adding the two tests.. > I don't know if the \"check if there are more than one functions\" condition is ok, I have to think about it\nI'm not 100% sure, but I couldn't find any example for which this check is wrong\n\n~~~This is ready for review~~~\n\n[x]  a ? async (b) : c => d. @vjeux Test added \ud83d\udc4d\n\n\n@\u200banyoneFromTheBabelTeam Do you prefer that I resolve the merge conflicts by rebasing or by merging master into this branch?. @existentialism I'm trying to remove that parameter, but I can't guarantee I will succeed: this PR could be merged with that ugly parameter and I'll open another one when it will be ready. @existentialism I managed to remove that parameter! (And magically solved the merge conflicts while doing that :sunglasses:)\n8541f2c (Remove noArrowParamsConversion) is just noise, the only meaningful changes are in 74ef24e.. > Can also use a set for state.noArrowParamsConversionAt (to avoid lots of potential indexOf checks)?\nI searched in the babylon source code and it doesn't seem to use any ES6 function: wouldn't using Set reduce babylon's compatibility?\nAnother option to replace indexOf might be to use a function which traverses state.noArrowParamsConversionAt from the end and returns early if there is a number which is less than the searched one (sice state.noArrowParamsConversionAt is sorted)\nAnyway, I think indexOf is fine because the array will never contain many items (unless there are lots of nested ?: and () =>), so its performance cost should be negligible.\nEDIT: It looks that if the array is short, Array#indexOf is faster than Set#has (at least on Chrome & Firefox on Ubuntu 17):\nnumber of items | Array#indexOf (ops/sec) | Set#has (ops/sec) | jsperf\n-|-|-|-\n0 | 402.000.000 | 41.000.000 | https://jsperf.com/indexof-vs-set-empty/1\n3 | 112.000.000 | 16.000.000 | https://jsperf.com/indexof-vs-set-short/1\n1000 | 248.000 | 3.600.000 | https://jsperf.com/indexof-vs-set-long. Errors fixed in #596. > I'm not sure why the flow tests are optional\nOnly the flow test suite is optional, not the type checks. Actually it looks like they pass on travis-ci: \nhttps://travis-ci.org/babel/babylon/jobs/246895911\n\nThe command \"if [ \"$JOB\" = \"test\" ]; then yarn test-only; fi\" exited with 0.\n11.33s$ if [ \"$JOB\" = \"lint\" ]; then yarn run lint && yarn run flow; fi\nyarn run v0.24.6\n$ eslint src bin \nyarn run v0.24.6\n$ flow \nLaunching Flow server for /home/travis/build/babel/babylon\nSpawned flow server (pid=2240)\nLogs will go to /tmp/flow/zShomezStraviszSbuildzSbabelzSbabylon.log\nNo errors!. \ud83d\udc4d \n(I spent ten minutes looking at the typescript pr before realizing this code was only moved \ud83d\ude10). You don't need to transpile it with Babel: Babel is just for JavaScript source. You should exclude that file from the Babel (using the \"ignore\" option in your .babelrc) and let react native load the file.. The bug with yield fixed by that commit already works in Babylon: https://astexplorer.net/#/gist/806e25352b11e858e13a0ccaf722816f/latest. I don't like the decoratorsStage2 name for the plugin: what will happen when the decorators proposal reaches stage 3? I think names like decoratorsNew or decorators2 may be good candidates.. I can look at this bug now. I rebased to resolve the merge conflicts. I squashed the commits because, since I wrote an implementation of the logic to avoid throwing errors for parenthesized expressions which are not valid parameters and then totally rewrote it, I would have needed to resolve the conflicts for a lot of unuseful commits.\n\nThe original commits can be found at https://github.com/nicolo-ribaudo/babylon/tree/issue-58-ternary-arrow-flow-copy. I just pushed some minor changes (fixed three new flow errors and removed some duplicated code). Hi, can you open this issue in the Babel repository? (https://github.com/babel/babel/issues)\nBabylon is just the parser (it transforms the code into something which Babel can understand); Babel is the actual transpiler (the \"translator\")\nBabylon is culprit when Babel doesn't recognize valid syntax, not when the output is wrong.. Oh, I am too slow XD. The properties introduced by #596 (noArrowParamsConversionAt and noArrowAt) can probably help to fix this issue.. > Fixes location for publicFields (should not contain semi-colon)\nWhy? Usually the semicolon is included:\njs\nvar a = 2; // start: 0, end: 10\njs\nfoo(); // start: 0, end: 6. I have a doubt about decorators:\njs\nclass A {\n  @dec x, y;\n}\nclass B {\n  @dec x;\n  y;\n}\nclass C {\n  @dec x;\n  @dec y;\n}\nIs A more like B or like C? According to this pr, it is like C; Typescript interprets it like B.\nThe decorators2 plugin doesn't have this problem because it disallows decorators on class prpoerties, but we should decide how must decrators behave,. > except it matters how many times dec is evaluated\nThen the AST must somehow reflect the difference between a decorator applied to a list of properties and the same decorator applied to different properties. Otherwise how could babel-generator/prettier/any other code generator know what code to emit?\n\ne.g.\n\nAST\njs\nProgram {\n  body: [\n    ClassDeclaration {\n      id: Identifier { name: \"Foo\" },\n      body: ClassBody {\n        body: [\n          ClassProperty {\n            decorators: [\n              Decorator {\n                expression: CallExpression {\n                  callee: Identifier { name: \"dec\" },\n                  arguments: []\n                }\n              }\n            ],\n            key: Identifier { name: \"a\" }\n          },\n          ClassProperty {\n            decorators: [\n              Decorator {\n                expression: CallExpression {\n                  callee: Identifier { name: \"dec\" },\n                  arguments: []\n                }\n              }\n            ],\n            key: Identifier { name: \"b\" }\n          }\n        ],\n      },\n    },\n    FunctionDeclaration {\n      params: [],\n      body: BlockStatement {\n        body: [\n          \"dec = () => { throw new Error(); }\",\n          \"return /* super cool decorator */\"\n        ]\n      }\n    }\n  ]\n}\n\nThis ast represents to different programs: one works and the other throws.\n```js\nclass Foo {\n  @dec() a, b; // works\n}\nfunction dec() {\n  dec = () => { throw new Error(); };\n  return decorator;\n}\njs\nclass Foo {\n  @dec() a;\n  @dec() b; // Throws\n}\nfunction dec() {\n  dec = () => { throw new Error(); };\n  return decorator;\n}\n```\n\nA possible solution is to represent a comma-separated list of properties actually as a list of properties, similar to a VariableDeclaration:\njs\nclass Foo {\n  @dec() a, b;\n}\n\nAST\n\n```js\nClassDeclaration {\n  id: Identifier { name: \"Foo\" },\n  body: ClassBody {\n    body: [\n      ClassPropertiesList {\n        decorators: [\n          Decorator {\n            expression: CallExpression {\n              callee: Identifier { name: \"dec\" },\n              arguments: []\n            }\n          }\n        ],\n        static: false,\n        properties: [\n          ClassProperty {\n            key: Identifier { name: \"a\" }\n          },\n          ClassProperty {\n            key: Identifier { name: \"b\" }\n          }\n        ],\n      }\n    ],\n  },\n}\n```\n\n\n\nThis approach has other two possible little advantages:\n- It prevents the inconsistent locations due to the commas and semicolons: ClassPropertiesList would contain the semicolon, which for now is included in the last property.\n- The location of the decorators nodes will be included in the parent node (currently, the decorators are child of every property in the list but the location of the property does not include the decorators')\n\nI'm sorry if I may sound quite pedantic, but I'm trying to highlight possible problems \ud83d\ude36 . > and probably a somewhat big breaking change\nIn #609 @xtuc suggested to merge the classProperties and classPrivateProperties. We can enable the changes introduced by this pr only under the new plugin to avoid breaking changes. I don't think. Travis reported this error:\n$ if [ \"$JOB\" = \"test262-test\" ]; then make test-test262; fi\nnode scripts/run_test262.js\n{ Error: ENOENT: no such file or directory, stat '/home/travis/build/babel/babylon/build/test262/test'\n    at Error (native)\n  errno: -2,\n  code: 'ENOENT',\n  syscall: 'stat',\n  path: '/home/travis/build/babel/babylon/build/test262/test' }\nIs it intended?. I see there are a lot of failing tests which babylon actually supports via plugins, for example language/expressions/async-generator/args-trailing-comma-multiple.js.\nI think there should be a way to specify which plugins enable for a given file/folder.\nMaybe we should use the features flag?. We could use graceful-fs, which handles EMFILE errors automatically.. Also ThisTypeAnnotation. It could be that with the new export proposals, export type is interpreted as the first part of export type from \"module\".\nI am from the mobile right now, so I can't check this assumption.. > Fixed by 663\n664?. Isn't this #661?. Go for it \ud83d\udc4d\nYou might also want to look for a fix for #661. If you need any help, you can join our slack: https://slack.babeljs.io/. Thank you!. As suggested in the readme, you can fork Babylon and implement your own plugin (if you need examples, you can check the files in src/plugins).\nIt is very unlikely that we will ever support a plugin system, since lots of bugfix and new features need the internal methods (that would be exposed to external plugins) to be changed: there would be breaking changes in almost every release. \ud83d\ude05. It's correct: only the decorators2 plugin disallows decorator on non-method class members, so we need to check if the decorator has been parsed using that plugin. This PR is ready for review. Some tests are duplicated in esprima/es2015-yield and es2015/yield. I prefer to have all the tests related to yield inside function name/parameters together; if you think that it is better to not have duplicated tests, I can delete them from es2015/yield.. Effectively all these commits are quite a mess, sorry \ud83d\ude02\nI will reorganize the changes of this PR when I get home, so that it can be reviewed commit-by-commit more easily. @jridgewell I reorganized the commits to make it easier to review them. They do not overlap, so they can effectively be reviewed grouped in chunks (I added some labels that I think represent a good way of suddivising the commits for an easier review: funct, arrow and err msg). @danez Do you want that I rebase this PR?. Babylon only supports standard JavaScript, official proposals, and some popular JavaScript extensions (JSX, Flow and TypeScript).\nThe pipeline operator isn't in an official proposal yet (it is not listed at https://github.com/tc39/proposals), so Babylon doesn't handle it. \nAnyway, probably it will be discussed at the next TC39 meeting, so it could become official soon!\nI'm closing this issue for now, I'll reopen it if the proposals gets accepted.. Babel/Babylon only supports stage 0+ proposal.\nThe fact that that proposal lives in the TC39 org doesn't mean it is a stage 0 proposal*. You can find the full list here: https://github.com/tc39/proposals/blob/master/stage-0-proposals.md\n* I may be wrong, but that is the repo where officials proposals are listed and the pipeline operator isn't there*. Didn't see @hzoo's response \ud83d\ude05 . Hi, this bug has been fixed in the decorators2 plugin. (In Babylon 7). It will work in Babel when babel/babel#6107 is merged.. No, there isn't. Babylon parses standard JavaScript by default, and you can opt-in to parse other syntax extensions; there isn't a way to specify that you don't want some JavaScript features.\nI'd suggest traversing the AST (using babel-traverse, a Babel plugin visitor or any other traverser) to check that there aren't the nodes you want to forbid.. Yes, it ships new standards like a browser does: the browsers you use to debug your code may silently add support for the latest standard, so you won't notice you are using new JS features and it will break in older browsers.\nSomeone may create an eslint plugin which can be used to set the max accepted ECMAScript version, to avoid maintaining no-restricted-syntax updated by hand.. Since they are about destructing, can you move them to es2015/destructing (e.g. es2015/destructing/parenthesized-lhs-object). This PR shouldn't include the commits merged in #731 . Can you move these tests to the flow/typecast directory?. Yes. \"throw\" should also be added here:\nhttps://github.com/babel/babylon/blob/master/src/types.js#L419-L426. Hi, can you fill the issue template which GitHub shows when you create a new issue?\nSpecifically, what is your input code? It should be something like this:\njs\nrender() {\n  return [\n    <A />,\n    <B />\n  ]\n}. @rwaldron Can you fix the linting errors? npm/yarn run lint -- --fix. I'm strongly in favor of what Logan proposed in https://github.com/babel/babylon/pull/341#issuecomment-276774504.\nI already have a working implementation of it since I used it a while ago in a personal project, so I can open a PR, if wanted.. Is new.target allowed in arrow parameters? e.g. class A { x = (p = new.target) => {} }\nAlso, I think class A { x = (new.target) } should throw.. I think we should add them, but they must be in the Babel repository (after this PR is merged). LGTM. ~~@wcastand Do you also want to fix this bug or do you prefer that someone else takes it?~~ \nNevermind, I didn't read your first comment \ud83d\ude05\nIf you need help you can reach me on Slack. That fix was released in beta.14. Can you try using a more recent version?. Can you also add a test for class properties?. Here throwing is the most future-compatible behavior. Probably we should ask to the flow team how to handle this cases.. > And knowing that requires knowing the current file extension.\nWe could also add a \"sourceType\": \"declaration\" which treats files as .d.ts. Why are both parseFunctionParams and doParseFunctionParams needed?\n(Github doesn't show enought lines, this comments is about lines 634-642)\nAnyway, thank you for what you are doing!. This looks like a perfect place to use the new #atPossibleAsync method. I think this should just be typescript.js#parseFunctionBodyAndFinish which overwrites expression.js#parseFunctionBodyAndFinish. throw is not needed -- #unexpected() already throws. \ud83d\udc4d I didn't think about that. What if \"<\" is just a relational operator? Like in this case:\n```js\nfunction A() { }\nA.prototype.valueOf = () => 2;\nvar T = 3;\nnew A < T;\n``\nI see that intypescript.js#parseSubscript` you considered that edge case when parsing call expressions.\n(I have not tested if this actually works or not, but I got confused by this difference in the two methods)\n\nAnyway, you can also extract these lines (799-818 or 802-812) to a separate method and overwrite it in typescript.js, thus removing the type arguments check from expression.js. I didn't notice this before: is it possible to implement new type arguments only in the typescript plugin?\nSomething like\njs\nparseNew() {\n    const node = super.parseNew();\n    if (/* node is NewExpression */ && !/* node has args parentheses*/ && this.match(\"<\")) {\n       // parse type arguments\n       // maybe parse arguments\n    }\n}\n\nAnyway, apart from this detail this pr looks good to me! (well, I have to admit I haven't reviwed all of it because I don't know typescript very well \ud83d\ude05 ). I think you should check that this.match(tt.parenL), otherwise new Foo<T> will be allowed. Maybe you can add a test which checks the order of these two conditions.\ne.g.\njs\nfunction* gen() {\n  if (true) function.sent;\n}. Here it should really be node: N.ExportAllDeclaration, but it would require some refactoring to statements.js#parseExport(). This should be process.exitCode?. nit: Babylon. It's called by the parseImportMetaProperty function.. You can replace the content of this if block with just this.toAssignable(prop, true, \"object pattern\"), since these lines are the same as how \"SpreadElement\" is handled by toAssignable.. I don't think AssignmentPattern should be allowed, since it represents a pattern with a default value (e.g. { ...x = 3 } = {}, which isn't valid). Maybe if (node.argument.type !== \"Identifier\" && ... would be more readable. Up to you though.. It's ok to check it here.. It's ok to leave the type definition as is, because RestElement is also used by array destructuring (and the argument of a rest element inside an array pattern can be a pattern).. I just checked and it looks this was already a bug in babylon... so, could you add a test? \ud83d\ude0a. ...[] can be useful, for example, if you need to exaust an iterator:\n```js\nfunction* logAndYieldNumbers(n) {\n  for (let i = 0; i < n; i++) { console.log(i); yield i; }\n}\n// Log all numbers, but keep only the first two.\nlet [ a, b, ...[] ] = logAndYieldNumbers(4);\n``.validArgumentTypesis ok then \ud83d\udc4d . > Here you can useexceptPlugin`\nAlso here. Here you can use exceptPlugin. Is this affected by #666?. I believe they are parsed differently because non-async arrow function are parsed by converting a parenthesized sequence expression, while async functions by converting a call expression (e.g. (arrow, or, parenthesized) and async(call, to, the = \"async\", function, or, async, arrow, parameters)).. Can this be renamed to toAssignableObjectExpressionProp, since it checks and converts an already parsed property?. You could make expectPlugin accept an optional pos parameter (like unexpected does) and pass node.start to it.. Instead of throwing here, you can wait until it is known if the node is a property or a method (to give a more specific error message).. Can this ever be true?. I think we can keep both, since in decorators/class-decorator/actual.js the decorator is on a different line and thus have different locations.. It is same-line. I think the comma here is illegal. Nit: I would like to avoid repeating all the numbers... What do you think about doing something like this?\njs\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [ 48, 49 ];\nallowedNumericSeparatorSiblings.oct = [\n  ...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55,\n];\nallowedNumericSeparatorSiblings.dec = [\n  ...allowedNumericSeparatorSiblings.oct, 56, 57,\n];\nIt wouldn't have a too big performance impact, since they would be computed only when babylon is loaded.\nAnyway, It's up to you.. tsStartsDeclaration? \ud83e\udd14 . This should just be the ArrowFunctionExpression (line 109). Can you remove \"only\": true?. Can we use this.match(tt.at) && this.expectPlugin(\"decorators2\")?. ",
    "jakwuh": "Got it, thank you\n. ",
    "zoecarver": "I have started adding some test cases \ud83d\ude03. Thank you so much! I will make sure to check out all of those resources. I really appreciate you taking the time to help me as a new contributor (hopefully). . I am not sure how far above my level this is, but I would like to give it a shot. @hzoo just so I understand correctly, What this is trying to do is change something like this:\njs\nexport default () => {\n    throw new Error('test');\n};\nOut:\njs\nError: test\n    at exports.default\n\ninto something like this:\n```js\nlet baz = () => {\n    throw new Error('test');\n};\nexport default baz;\nOut:js\nError: test\n    at baz\n. Definitely, how should we check?. Great! Will do.. Before I set up my babylon environment and test it more thoroughly, I would really appreciate it if someone would look over [my code](https://github.com/pudility/Export-Extensions) just to make sure that I am doing everything correctly. Thank you!. So the thing I made already exists, but what still needs to be made is something for exportNamespaces? For example, something like this:js\nexports.hello = () => {}\n. Alright, I think I understand. The only thing I am still confused on is what it needs to be split into. Do you mean that it should be accessible from two different `hasPlugin`s? Like this:\n`this.hasPlugin(\"exportExtensions\")` and `this.hasPlugin(\"exportNamespace\")` instead of just `this.hasPlugin(\"exportExtensions\")`.. Ok, thank you so much for explaining, I now get it. I will give it a shot, but I am not quite sure if I will be able to do it fully. . @hzoo I think this may be a bit above my current skill level. I am going to keep looking through the code, but I don't think that I will be able to solve this issue. Thanks again for the help.. Oh, Thats simpler than I thought. I just added that, I will update the docs and then create a PR. Thanks so much @jridgewell !. So I have modified [the code](https://github.com/babel/babylon/blob/65bea96544561c68bdf84fa9f85bc7afdd3535c8/src/parser/statement.js#L1266-L1274) to now look like this:js\n  parseExport(node: N.Node): N.Node {\n    // export * from '...'\n    if (this.shouldParseExportStar()) {\n      this.parseExportStar(node, (\n        this.hasPlugin(\"exportDefault\") ||\n        this.hasPlugin(\"exportNamespace\")\n      ));\n      if (node.type === \"ExportAllDeclaration\") return node;\n    } else if (this.hasPlugin(\"exportDefault\")) {\nand I replace [export-expressions](https://github.com/babel/babylon/tree/master/test/fixtures/experimental/export-extensions) with `export-default` and `export-namespace`. I also changed the `options.json` file in both of them to use the plug in `\"exportDefault\"` and `\"exportNamespace\"` respectively. I think that I must have done something wrong here (probably when modifying `statement.js`) because when I run `yarn run test-only` I get three errors:python\n  4223 passed\n  3 failed\n  112 skipped\nindex \u203a experimental/export default/default\n/Users/zoe/Developer/babylon/split-export/babylon/test/helpers/runFixtureTests.js:21\n20:               name + \"/\" + task.actual.filename + \": \" + err.message;\n   21:             t.fail(message);\n   22:           }\nexperimental/export-default/default/actual.js: Unexpected token, expected { (1:7)\n``\nplus two almost identical errors:\n2.experimental/export-namespace/ns/actual.js: Unexpected token (1:9)3.experimental/export-default/default-type-without-flow/actual.js: Unexpected token, expected { (1:7)`\n\nThank you all so much for helping me create my first real contribution to Babylon, I really like getting to learn the process for all of this stuff.. Thank you! I asked on slack, but I will also try that.. Thanks! What exactly would be the syntax for that? I was looking here, could I use findParent?\nEdit: Using path.findParent((path) => path.isExpressionStatement()); worked perfectly!. Absolutely! Just moved them. Thanks for the input.. @existentialism So sorry about that, I have updated my PR accordingly.. Just a quick question, if I make more categorising PRs should they be bigger or smaller? For example, I am thinking of categorising the rest of uncategorisd/40-54. Should these be two PR or just one?. Ok, Thanks.. Sorry about that, I can fix it later (I am at school the rest of today sorry). . I rebased the repo, I am going to close this PR and create a new one. Thanks!. @existentialism Thanks for the tip! I will try to use that next time. I am pretty new to git and still learning about all of it's features.. @nicolo-ribaudo is that what you meant? . It was almost the same as decorators/class-decorator/actual.js.  https://github.com/babel/babylon/blob/bfd9c7ba508cf06813636e2dc6adf5658c743b34/test/fixtures/experimental/decorators/class-decorator/actual.js#L1-L4 . Alright, I added it back as decorators/class-decorator-new-line. I am so glad that I have other people check my work. Sorry about that \ud83d\ude33.. ",
    "panagosg7": "Thanks @danez! I'll address your comments.\n. @danez: This can still wait until Flow's upcoming release.\n. Thanks for the pointers, @danez!\nI will get to these, but I'm still waiting for support for function predicates to be fully merged in Flow master.\n. Sorry for taking so long to get back to this.\nAFAIK, there is still some function predicate code that hasn't been merged to Flow's master. Most of these changed involve the type checker, but there is also some parser work under way. For example I believe the notation of predicate refinement will be updated to something more elegant. Also, there has not been an official announcement yet.\nHowever, you are right that some support for function predicates (including %checks) is already in mainline and recognized by the native Flow parser, so I guess there should be support here as well.\nI recently rebased my original PR, addressed @danez 's comments (including the ones in the respective babel PR) and added one more example.. It looks like this.state.inType needs to be true for this.expect(tt.colon) to succeed (I tried to move it further down, but other tests failed). So, oldInType needs to be recorded in the beginning in order to be restored before this.flowParsePredicate() is called (note that flowParsePredicate possibly parses expressions).\nBottom line is I wasn't able to perform the optimization you suggested.. ",
    "leebyron": "Any progress on this? I'd love to see this land to unblock early use. Can the babel-runtime dependency also be removed from package.json?\n. So good!\n. \u2764\ufe0f\n. && npm run testonly?\n. you can probably just delete this line\n. ",
    "bhosmer": "@danez Sure, will make the requested changes here and in babel-generator. Thanks for the quick response Daniel!\n. @danez Hi Daniel - incorporated your suggestions. Not sure what to do about the coverage numbers, if anything - I'd have thought the new tests would cover the new code paths, but LMK if there's something else to be added.\nRe babel-generator, I've got the new code in my fork, but since the new tests choke the old parser, it seems like I should hold off on a PR until this change here makes its way over there, right?\n. @danez PR to babel-generator is here.\nBut I think we may need to bump Babylon's version to reflect the new support, and then specify the new version in babel-generator's dependencies, otherwise the babel-generator tests I added which use {| |} will fail. Not sure how big a version bump is; alternatively, I could just remove the new tests from the PR. LMK which you'd prefer!\n. @danez ah, ok cool - thank you Daniel!\n. @hzoo added test and coverage looks taken care of, I think. Not sure why the build failure though, or how to kick.\n. @hzoo cool, thanks!\n. (y)\n. ",
    "TimothyGu": "The Travis CI failure is due to some tests in Babel copied from Traceur that were written for ES2015 only.\nShould I submit a PR to Babel that removes the tests first?\n. @hzoo, PR to Babel submitted: babel/babel#4501\n. And, another disadvantage with such a solution is that inputs like a)( will be parsed as a valid expression.\n. Pug has a syntax that could be exemplified by the following\npug\np #{expression}\nwhere expression is any JavaScript expression. We current use Acorn to check if expression is a valid one or not, and that is one of the biggest improvements of Pug v2 over Jade v1, but Babylon would provide support for next-generation JS, which is our long term goal. Not being able to prevent cases such as the ones listed in https://github.com/babel/babylon/issues/210#issuecomment-257415399 from compiling would be a major no-no for us. (Of course, one can argue that we should introspect and walk the AST to see if expression actually is an Expression, but that seems way too complicated for such a task.)\nWith regards to performance. Indeed, I would be surprised if direct access to Babylon internals (parseExpression) instead of going through the usual Program > ExpressionStatement > Expression route makes parsing any faster. But, if we were to adopt the \"correct\" way of traversing the AST after every parse, there would be a nontrivial performance overhead. Furthermore, we are in the process of investigating migrating the entire Pug code generator to babel-generate, and being able to not parse the expression multiple times (once in the lexer during syntax check, once in the Pug code generator to build a Babylon AST) does provide a significant performance improvement.\nI understand your hesitation, but having a function that parses expression is not without precedent. For one, Acorn provides a parseExpressionAt that is slightly different from our use case but still very similar. And I think this function will be beneficial to Babylon as well.\n. Any timeline for when this can be applied?. @xtuc, fixed.. ",
    "dlmr": "Seems like this change causes Babylon to throw for one of my files that worked fine before. \nThe file in questions looks like this:\njavascript\nexport toString from './toString';\n`` bashtoString` has already been exported. Exported identifiers must be unique. (1:7)\n\n1 | export toString from './toString';\n    |        ^\n  2 |\n```\n\nIs this an intended change, is not toString allowed any more?\nSeems like all keys on Object.prototype causes this error.\n. Looks good! LGTM \ud83d\udc4d \n. I think we need to manage Object.prototype here.\nSomething along the lines of this maybe?\njs\nif (Object.getOwnPropertyNames(this.state.exportedIdentifiers).indexOf(name) !== -1) {\n. ",
    "motiz88": "Hi! I'm trying to implement this and learn some Babylon internals at the same time.\ntl;dr: I have a question about a specific implementation idea - see the very end\n:thought_balloon: Larger discussion: await spec\nThe spec says here under note 1 that (emphasis mine)\n\nyield is Identifier or YieldExpression [ ... ] depending on context. await is always parsed as an AwaitExpression but is a Syntax Error via static semantics. [ ... ]\n\nDoes this mean we can skip trying to disambiguate await and just treat it as starting an AwaitExpression everywhere (i.e. immediately an error if not in an async context)? Probably not. I must be missing something. But it would make fixing this issue quite trivial. Moving on...\n:point_right: The issue at hand\nI'm assuming the intent here is to optimistically parse await as Identifier in non-async contexts, the way it's already being done. But then if the parse turns out to be a dead end, we should \"remember\" this choice and emit a descriptive error on the await - not at the dead end.\nI came up with the following logic:\n1. When an Identifier with name === \"await\" is parsed, if we didn't enter parseAwait because we're in a non-async context, save the identifier's position in state.potentialIllegalAwaitAt and keep parsing normally.\n2. When parsing a node fails via unexpected(), and if state.potentialIllegalAwaitAt >= node.start, raise an \"await can only be used in async function\" error instead of the default \"unexpected token\".\nI'm not 100% sure how to intercept the unexpected() occurrences elegantly while still having access to the current node - which is needed for the check in (2) above. My first approach involved patching a lot of node types and looked a bit like this:\n\n\n``` javascript\npp.checkIllegalAwaitAndRethrow = function (err, node) {\n  if (this.state.potentialIllegalAwaitAt >= node.start) {\n    this.raise(this.state.potentialIllegalAwaitAt, \"await can only be used in async functions\");\n  } else {\n    throw err;\n  }\n};\n\npp.semicolonCheckIllegalAwait = function (node) {\n  try {\n    this.semicolon();\n  } catch (err) {\n    this.checkIllegalAwaitAndRethrow(err, node);\n  }\n};\n\n// Then for *many, many* node types do something like this:\npp.parseReturnStatement = function (node) {\n// ... snip ...\n  if (this.isLineTerminator()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolonCheckIllegalAwait(node); // instead of this.semicolon();\n  }\n// ... snip ...\n};\n```\n\n\nBut it got out of hand very quickly.\nSo here's my new recipe, plus some questions.\n1. Manage a \"current node\" stack in  startNode/finishNode (Is this a viable approach? Does something like this already exist?)\n2. In unexpected() itself, check for this.state.potentialIllegalAwaitAt >= currentNode.start and override the message if true.\nHonestly, it still seems a bit of a heavy solution that I'm not sure is justifiable here. But at least this way the problem gets treated as a \"cross cutting concern\", with a lot less code.\nI'd appreciate any feedback/ideas! :grinning:\n. Hey @kaicataldo, apparently GitHub lost a reply I sent via e-mail so I'll try to address everything again.\nFor one thing, don't worry about my toes :smile: Especially since my PR is a work-in-progress and in a bit of stasis at the moment. But I think allowing await only as the LHS of AssignmentExpression is incorrect, as you've already noticed.\nMy own solution can probably be simplified and made more correct with the use of lookahead(), which I wasn't actually aware of when I started. I might not get back to it for a while though, so feel free to clone that branch and pull anything of interest from it. e.g.\n\nsome kind of flag in state when an await keyword is found \n\nis exactly what I did.\n. Hey @kaicataldo, don't worry about my toes :smile: But doesn't your current\nsolution preclude other valid uses of await as an identifier? For example\nawait.foo, await[foo], await / foo, await(foo), etc. There's a\npartial list in my PR.\nOn Oct 23, 2016 06:08, \"Kai Cataldo\" notifications@github.com wrote:\n\n@motiz88 https://github.com/motiz88 Actually, looked at your PR and the\nsolution I came up with is very different. Don't want to step on your toes\nhere, but let me know what you think of this: kaicataldo@8358cff\nhttps://github.com/kaicataldo/babylon/commit/8358cff052622af9529286653f83bafddee90f4c\nMaybe I'm missing something, but it seems to get the job done. If you\nthink it looks good, I can make a PR with this - just wanted to check in\nwith you since you've already done work on this.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/issues/113#issuecomment-255566902, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACJHpVY0WNZPTHrhffrxdtE-uEq9076gks5q2s-1gaJpZM4J4F4v\n.\n. Looks like #158 fixes this too \ud83d\udc83 \n. Is this still the case now, with #121 merged?\n. The CI failures (on Node 5 only, out of the whole build matrix) appear to be unrelated to the PR's content. (Right?)\n. My immediate answer is that ASI applies like everywhere else (and there are existing tests for literal-named properties reflecting this). Need to do a little bit of research before I can add more info.\n. There's also tc39/proposal-class-public-fields/pull/45 (an open PR at the moment) which suggests the semicolon is not in the spec, but IMHO it's safe to assume it will be (given past discussions and the nontrivial ambiguity otherwise).\n. @danez your class Bar parses as having one property.\n. Working on that merge conflict now.\n. FWIW, I'm personally not crazy about the idea of adding bits of code to error messages, for a number of reasons (though it's probably a matter of taste more than anything).\n- We wouldn't always want to clutter the message with the full left-hand code (imagine the output for func ( /* lots of arguments and complex expressions here... */ ) = 5), so we might introduce formatting and abbreviating logic, which can be nontrivial and lead to bloat.\n- There's already location information in the error object - my ideal workflow would be one where a tool / frontend just consumes and visualizes that (along with a clear, concise message), without babylon trying to hint at it separately via the error message.\n. All parsers on ast-explorer.net, except for TypeScript, disagree with Babylon's parse here.\n. I will try to fix them here and report back.\n\nOn Oct 12, 2016 11:53, \"Daniel Tschinder\" notifications@github.com wrote:\n\n@motiz88 https://github.com/motiz88 Should we do the issues that @bakkot\nhttps://github.com/bakkot reported in a new PR or also within this one?\nMaybe you already have an idea if it will be easy or not to fix. I can\ncreate an issue otherwise.\nBesides that looks good to me.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/pull/158#issuecomment-253156582, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACJHpVR6Ux7FhgeXp7aKq4IwJ4ujxhvYks5qzKAdgaJpZM4KOtEO\n.\n. Looking into this now. By the way, async is out - the spec does say [no LineTerminator here] between it and its PropertyName,\n. OK, this was as simple as bailing out from a ClassProperty parse if the name is followed by a left paren. I've also added tests to cover the various cases raised here.\n. @bakkot Personally I'm very grateful for your input. If I'm working on this part of the code, might as well get it right and not just fix one edge case \ud83d\ude03 \n. Hang on, I'm not comfortable with us emitting ClassProperty nodes without the classProperties plugin. Gonna fix that too.\n. Well! I'm quite possibly done. Come on, hit this with all you've got \ud83d\udcaa \n. @bakkot That first one mayyyy be out of scope here but I'd like to fix it too, with the same rationale as above.\n\nThis is getting nightmarish - what about this one?\njavascript\nclass C {\n  static\n  get\n  static\n  (){}\n}\nThis is a static getter named static, right?\n. @bakkot Yeah, looks like a rewrite for sanity is in order and your pseudocode will be a lifesaver. Thanks! Will get to it in a day or two.\n. @danez - this is still in need of a major rewrite. I unexpectedly ran out of time to devote to this issue, and this will go on for a few weeks at least.\nAs is, the PR solves some edge cases but opens up others, and I've come to realize that larger changes would be required for the code to be both correct and maintainable. Hence a rewrite.\n. Yeah @bakkot @hzoo. Sorry for the sharp drop in my availability. I will most definitely be back though. In the mean time I'm not working on this issue.. Going to tackle this. I'm thinking of an expectPlugin helper method to replace if (!hasPlugin(...)) unexpected(), and maybe a small map of known Babylon plugins to Babel plugins, to support helpful messages.\n. @danez Those are both assertions on messages that have changed in this PR. Not sure why one of them (transformation/errors/syntax) doesn't say so in the log and instead just throws the SyntaxError.\nPR to make Babel tests pass with the new messages: babel/babel#4727\n. ~~~Really not sure why eslint is saying that node is unused here~~~ \ud83d\ude15 \n. #182 will probably take care of most of the gap in code coverage\n. Thanks @danez! Do you have an opinion on this.hasPlugin(\"asyncGenerators\") && this.eat(tt.star) \u27a1\ufe0f this.match(tt.star) && this.expectPlugin(\"asyncGenerators\"), this.next() etc?\n. Yeah. The thing to watch out for, if we eagerly match() && expectPlugin(), is cases where there is an alternative correct parse we can't rule out yet. Async generators are not generally such a case - after async function, if we see * it's either an async generator (with the plugin) or an error (under any other parser config), so it's a safe bet the user meant it as an async generator.\n. OK, I'll just add some of the easy cases here real quick.\n. @hzoo so basically - an enhanced error object, whose shape will be part of\nBabylon's public API, and which we will then detect and translate on the\nBabel side. Right?\nMy choice for this would either be an ad-hoc extra property e.g.\nmissingBabylonPlugin (and duck typing on that in Babel) or just full\nblown VError with its first-class support for metadata. What do you think?\nI'll only have my computer back from repairs next week but let's maybe hash\nout the details here until I can write actual code.\nOn Dec 15, 2016 23:36, \"Henry Zhu\" notifications@github.com wrote:\n\n@hzoo commented on this pull request.\nIn src/parser/util.js https://github.com/babel/babylon/pull/178:\n\n\nconst pluginInfo = plugins[name];\nconst pointers = [];\nif (pluginInfo) {\nif (pluginInfo.babelSyntaxPlugin) {\npointers.push(babel-plugin-${pluginInfo.babelSyntaxPlugin});\n}\nif (pluginInfo.babelTransformPlugins) {\npointers.push(...pluginInfo.babelTransformPlugins.map(\n(shortName) => babel-plugin-${shortName}\n));\n}\n}\nconst leadingPointersOr = pointers.length ? ${pointers.join(\", \")} or : \" \";\n+\nthis.unexpected(null, This experimental syntax requires the ${name} parser plugin.\n\n\nCheck out${ leadingPointersOr }the parserOpts.${name} Babel option.);\n\n\n\n\nWe should change it so that Babel users will use the transform plugin, and\nbabylon users the syntax, and for Babel users not to use both.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/pull/178, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACJHpRgemrtssWZrqvq6Q8_RHqzbVjoLks5rIbLWgaJpZM4KXfLp\n.\n. @hzoo I saw your comment on #300 mentioning this feature. Totally willing to pick this up again. Can you please confirm that the approach I outlined above is how you'd prefer this to be handled? Or do you have something else in mind?. Btw just resolved the obvious conflicts for now. Will do a more complete update soon.. @hzoo I read \"focus on the Babel user\" to mean a relaxing of your suggestion above that\nWe should change it so that Babel users will use the transform plugin, and babylon users the syntax, and for Babel users not to use both.\n\nSo that - showing only the Babel oriented message - would be one simple way to slice it, albeit one that sacrifices some \"purity\" I guess by coding knowledge about Babel plugins into Babylon (funnily enough, I would be more comfortable with this philosophically if Babylon was in the Babel monorepo... Ooh can we get that in 7.0? :half_joking:). >  it would be a weird error message if the user isn't using Babel but Babylon itself\nYep, that's what I'm least happy about here. I totally get the \"focus on Babel users\" argument, but Babylon is its own package too and I don't love the idea of making that kind of a second-class story. It's a subtle point though. \nTo expand on the alternative: It's more work, but if we make the \"plugin required\" exception positively identifiable to Babel 1, e.g. via a custom property on the thrown object 2, then we can both\n\nput the Babylon option name in the Babylon-thrown message, but then catch it in Babel 3 and rethrow with the appropriate Babel plugin name;\nand\nremove knowledge from Babylon about which Babel plugins exist/are recommended for each syntax feature. ( & move into babel-core)\n\n\n1: Or anyone invoking Babylon - i.e this becomes public API.\n2: Or subclassing Error but fragile; or bringing in VError but probably overkill; or parsing the actual message prop but eww.\n3: In basically just one place, right? babel-core somewhere.. @danez I think it's fine as is, if these assumptions hold (and I think they do):\n1. We only care about hit/miss/partial stats - # of hits per line is irrelevant;\n2. We run all the Babel tests at least once;\n3. Babel's parsing needs are independent of the version of Node it runs on.\n. Closing this because Flow actually does emit errors in this case, and I just missed them in the AST Explorer UI.. Yeah. Do you have a preference as to the message here? Expected ; or newline?\n. Yeah, method.static hinges on this.match(tt.name) and isGenerator (subsequently) on this.eat(tt.star). So they are mutually exclusive.\n. Done in #177.\n. Most is right. There's also the question of transform vs syntax (even if we ignore the rarer preset and ...-legacy etc) which is still an editorial decision basically. Oh yeah, sorry, I was commenting with just a fuzzy recollection of how my own PR worked \ud83e\udd26\u200d\u2642\ufe0f . So transform vs syntax is accounted for, by way of both being mentioned in the message.\nAnd now I see your edit above. So yeah, that's a way to encode the same information less explicitly. However I would still kinda prefer to move this out of Babylon if possible, as discussed below.. ",
    "gabejohnson": "Yep. This is my bad. I was testing a parser and my test file is a module. The token is a legacy octal.\nI just forgot I was in strict mode. The workaround is parseInt('042', 8).\nClosing.\n. ",
    "hzlmn": "@kaicataldo is it still an issue?\n. @kaicataldo Can I look on await or enum ?\n. @kaicataldo start looking here https://github.com/hzlmn/babylon/commit/2498481a511aaaf50d3f5ab61528e2d81910d486\n. Can you look on this, so I will not bother with silly PRs?\n. @kaicataldo No problems, if you already done it. I am pretty new to babylon codebase, so even simple task like this, can take a while. \n. ",
    "mannanali413": "@kaicataldo is the issue with the let keyword resolved. If not then I can start working on it. . ",
    "webdesserts": "@hzoo kk, I'll see what I can do\n. @hzoo kk, will try. If I shrinkwrap the project and manually bump the version around, it seems like 6.9.2 and 6.10.0 do not receive the error, while 6.11.0, 6.11.1, & 6.11.2 all display the error.\n. @hzoo, give me a bit, I'm running into some unrelated errors that I'm trying to get around before I try to reproduce again.\n. @hzoo haha, fuck me... We had two similarly named files and the file that the error was referencing did actually have a duplicate export. Babel is doing its job just fine \ud83d\udc4d. Sorry for the scare.\n. ",
    "istarkov": "This PR does not work for arrow functions,\njavascript\nconst x = ({ ...props, y }) => 1; // THIS WORK\nfunction xx({ ...props, y }) { return 1;} // THIS FAIL\n. This catch will cost me a day to fix hundreds of my code lines ;-) (Will read the specs in the future)\n. ",
    "benjycui": "babylon@6.11.2\n. ",
    "jridgewell": "Probably fixed in the the unicode PR. The different escaping is expected though, one's a JS string and the other is HTML escaping.. Does _123 pass?. Opened a PR to complete the work, so hopefully this'll land soon.\nDoes anyone know why .? wasn't considered? As far as I can see, it fixes the foo?.3:0 edge case without introducing any others (there's a slight 1.?1:0 one, but that could be easily handled). I guess it really doesn't matter since you can't have a foo.3 anyways (numeric member expressions have to be computed).. It's actually brought up several times:\n- https://esdiscuss.org/topic/existential-operator-null-propagation-operator#content-11\n- https://esdiscuss.org/topic/optional-chaining-aka-existential-operator-null-propagation#content-6. Actually, the transform PR is https://github.com/babel/babel/pull/5813.. This was fixed in at some point in 7.0 branch.. Why are you transforming a JSON file?. It'd be cool to investigate further (anything that reduce's Babylon's memory footprint is a win), but I don't know if we'll ever get to the point of being able to transform a 30mb file.. Can you post the JSON file? Or a sample of it (we don't need 10000 items of the array, just the first couple, any strings can just be random, etc). I'll do that in a second PR.. We need to update https://github.com/babel/babylon/blob/master/src/tokenizer/index.js#L394-L399 to:\n```js\nif (code === 42 && next === 42) {\n  //...\n}. I know, I'm intentionally breaking from the spec here. Is there an observable difference in live bindings?. Prefect, that's the example I needed to see. I still think this is ridiculous.. Why are these cases different?\nCase 1\n(Included because I understand the argument for hoisting)\n```js\ntest();\nconst a = 1;\nfunction test() {\n  console.log(a); // TDZ Error\n}\n```\nCase 2\n```js\n// a.js (runs first)\nimport b from './b'\nb() // Fine\n```\n```js\n// b.js\nimport './a'\nconst a = 1;\nexport default function () {\n  console.log(a); // TDZ\n}\n```\nCase 3\n```js\n// a.js (runs first)\nimport b from './b'\nb() // Not a function\n```\n```js\n// b.js\nimport './a'\nconst a = 1;\nfunction test() {\n  console.log(a); // Fine\n}\nexport default test;\n```. Yah, that's why I included case 1. Maybe this would be better explained as Classes?\nCase 1\n```js\nnew Test(); // TDZ\nclass Test {\n}\n```\nCase 2\n```js\n// a.js (runs first)\nimport B from './b'\nnew B() // Fine\n```\n```js\n// b.js\nimport './a'\nexport default class Test {\n}\n```\nCase 3\n```js\n// a.js (runs first)\nimport B from './b'\nnew B() // TDZ? Not a class, at least\n```\n```js\n// b.js\nimport './a'\nclass Test {\n}\nexport default Test;\n```\n\nAside: Is referencing a live-binding before it's declared a TDZ error? Makes sense if it was.. > Case 2 also should be a TDZ error.\nWhat?! Why is it a declaration?! \ud83d\ude44 \n\nWith that example specifically, ClassDeclaration is just a variable declarator, and you can't export default a declarator.\n``js\n//class Foo {}is really justlet Foo = class Foo {}//export default let Foo = class Foo {}` is an error\n// Instead, it's really transpiled as\nlet Foo = class Foo {};\nexport default Foo;\nFoo = class Bar {}\n```\nI don't mean to be picking at your arguments. I think I'm cranky from my hate of circular dependencies. \ud83d\ude2c. So I'm not arguing against export default class Foo {}, only export default class {}. There's nothing to reference in that case, which is why I think it should be a ClassExpression. > trying to pretend otherwise is going to lead to confusion at the very least.\nHow many transforms will assume declarations have an id? The parsing and runtime rules can be followed while still preserving what Babel considers to be a FunctionDeclaration and ClassDeclaration.\n\nexport default (function(){});\n\nWhy isn't a recursive parenthesis rule used like delete operators? https://www.ecma-international.org/ecma-262/6.0/#sec-delete-operator-static-semantics-early-errors. > No, they can't. As explained above, a function declaration and a function expressions in that position have observably different semantics. They cannot have the same AST.\nOur node representation has nothing to do with the code we transform into. All we needed to do is test if an (unparenthesized) FunctionExpression is the child of a ExportDefaultDeclaration. That was my point.\nIt seems this isn't going to happen. Instead, how about catching these unnamed declarations before any transformers have the chance to run and giving them an id? https://github.com/babel/babel/compare/7.0...jridgewell:export-default-expression. - The babel pr is merged now.\n- That's fine, let's update the whitelist.. Yup. Maybe another PR? Just to keep this one clean.. Can we pretty please just switch to comparing the char literal?. Closed by #688.. Go ahead.. Just see if he responds. If not by tomorrow, I'd say go for it.. It should be as simple as using two separate plugin strings. Right now, we have one string (\"exportExtensions\") that enables two separate features. We want to remove that string, and instead replace it with (\"exportDefault\" and \"exportNamespace\").. @babel-bot move to babel/babel.. Ugh, @babel-bot fail.. @babel-bot move to babel/babel. @hzoo bot?. \ud83c\udf32 \ud83d\udc83 . This is a good size.. Yup, looks like this needs a rebase.. Done.. :shrug:. This has got to be a bug with Github's markdown.. /cc @littledan, what's the expected behavior here?. So:\njs\na || b ?? c === (a || b) ?? c\na ?? b || c === (a ?? b) || c\nBut:\njs\na && b ?? c === (a && b) ?? c\na ?? b && c === a ?? (b && c)\nDo we have any data for why this was chosen?. > Is that what this code does? \nYes.\n\nIn the spec I wrote for ??, it parses exactly like ||, and in particular && groups more tightly.\n\nThat appears to be what's happening? I was just curious why it's not tighter than && or looser than ||.. There's no callee. I was trying to keep the property ordering consistent between optional and non-optional branches. See the #parseNew as well.. Let's slice here. It'll be really weird if a transform pushes a decorator and two fields get it.. I don't understand why inCommaSeparatedFields affects this. Maybe it should be a separate check instead (if fields can't have a trailing comma)?. Does this mean methods can have trailing commas?\njs\nclass Foo {\n  method() {\n  },\n}\nI don't see a test for it anywhere.. We can probably avoid this state entirely.. Done.. What's this?. Let's set clause.param = null in an else case.. Why do async and non-async parse their parameters differently?. Can't be computed.. Also need async and generator flags.. Rename to ClassPrivateMethod. Let's delete this.. Can we hoist this to the beginning of the this.isClassMethod() if statement?. I think we need to do this before eating the hash.. Comment is incorrect.. Comment again.. I think this should apply to private accessors, too.. Should be boolean, right?. What's this for?. Yup.. Before the if (isPrivate).. The \"async\" part is incorrect. We're in the \"get\"/\"set\" path here.. Oh, it's already in ClassMethodOrDeclareMethodCommon, so we can just drop this line.. prop here is a MemberExpression? In that case, it should always be set to false.. Can we make a #pushClassPrivateProperty?. Can't be true.. This could just be inlined into the callsites.. Where'd this test go?. Whoops.. Don't we usually expect in the not-tokenizer part?. Please rename the function.. More examples, especially arrows.. \ud83d\udc4e . This is a LogicalOperator, not a BinaryOperator. ",
    "bakkot": "The issue is larger than I initially reported. All of the following are incorrectly rejected:\njs\nclass C {\n  x\n  (){}\n}\njs\nclass C {\n  ''\n  (){}\n}\njs\nclass C {\n  ['']\n  (){}\n}\njs\nclass C {\n  get\n  (){}\n}\njs\nclass C {\n  set\n  (){}\n}\njs\nclass C {\n  static\n  (){}\n}\njs\nclass C {\n  async\n  (){}\n}\netc., which define methods named 'x', '', 'get', 'set', 'static', or 'async'.\n. Not sure if I count as a higher authority, but it is absolutely the case that no ASI can occur after get: ASI can only occur if the following token is \"not allowed by any production of the grammar\". See spec.\nSee also other committee members on the same topic.\n\nAlso, the issue is larger than I initially reported and is not covered by this fix. All of the following are incorrectly rejected:\njs\nclass C {\n  x\n  (){}\n}\njs\nclass C {\n  get\n  (){}\n}\njs\nclass C {\n  set\n  (){}\n}\njs\nclass C {\n  static\n  (){}\n}\njs\nclass C {\n  async\n  (){}\n}\netc., which define methods named 'x', 'get', 'set', 'static', or 'async'.\nEDIT: same issue when the name is 'x' or ['x'].\n.  Yeah, the fun edge case for async is\njs\nclass C {\n  async\n  x(){}\n}\nwhich should have ASI performed, such that it parses the same as\njs\nclass C {\n  async;\n  x(){}\n}\ni.e., a syntax error if class properties are not enabled, and otherwise an uninitialized class property named async followed by a method named x.\nContrast \njs\nclass C {\n  static\n  x(){}\n}\nwhich is a static method named x.\nIIRC, Babylon gets these three cases right.\n. I don't think that's going to be quite sufficient - e.g. this is a class with just a property named 'get': class C { get }. Similarly you can have properties just named 'static' or 'async' or 'set' in the same position.\nThis patch as it stands regresses 'get' and 'set' there and handles 'async' correctly; it does not correctly handle 'static', but neither does master.\n. While I'm at it...\nClass properties can appear on the same line if separated by semicolons. So class C { a; b; } should be legal, as should class C { a = 0; b; }.\nSorry for continuing to come back with more issues; I'm just mentioning them as I think of them and/or recall them.\nAs long as this patch doesn't regress any such cases, I would expect it to be fine to handle this issue in another patch.\n. Issues: rejects class C { static; } and class C { static = 0 }, and parses\njs\nclass C {\n  get\n  [Symbol.foo](){}\n}\nand\njs\nclass C {\n  static\n  get\n  x(){}\n}\nas a property and a method instead of as a getter.\nMight also be good to add a test for\njs\nclass C {\n  get\n  *x(){}\n}\n(a property followed by a generator method), which is handled correctly but which is kind of a funny case.\nOtherwise looks good to me.\n. @motiz88, indeed it is.\nI think you pretty much have to end up repeatedly inspecting the next token to determine the type of the property. Something like this (forgive the psuedocode / difference from Babylon; I'm not quite awake and haven't read the project source):\n``` js\nfunction parsePropertyName() {...} // should include static and computed names\nlet static = false;\nif (eat('static')) {\n  switch (lookahead) { // assuming 'lookahead' magically holds the next token\n    case '(':\n      return parseClassMethod({name: 'static', static, async: false});\n    case '=':\n      return parseInitializedClassProperty({name: 'static', static});\n    case ';':\n    case '}':\n      return parseUninitializedClassProperty({name: 'static', static});\n  }\n  static = true;\n}\nif (eat('*')) {\n  let name = parsePropertyName();\n  return parseGeneratorMethod({name, static});\n}\nif (eat('async')) {\n  switch (lookahead) {\n    case '(':\n      return parseClassMethod({name: 'async', static, async: false});\n    case '=':\n      return parseInitializedClassProperty({name: 'async', static});\n    case ';':\n    case '}':\n      return parseUninitializedClassProperty({name: 'async', static});\n  }\n  if (hasLineTerminatorBeforeNext) {\n    return parseUninitializedClassProperty({name: 'async', static});\n  }\n  let name = parsePropertyName();\n  return parseClassMethod({name, static, async: true});\n}\nif (eat('get')) {\n  switch (lookahead) {\n    case '(':\n      return parseClassMethod({name: 'get', static, async: false});\n    case '=':\n      return parseInitializedClassProperty({name: 'get', static});\n    case ';':\n    case '}':\n      return parseUninitializedClassProperty({name: 'get', static});\n    case '*':\n      if (hasLineTerminatorBeforeNext) {\n        return parseUninitializedClassProperty({name: 'get', static});\n      } else {\n        throw new SyntaxError('unexpected token');\n      }\n  }\n  let name = parsePropertyName();\n  return parseGetter({name, static});\n}\nif (eat('set')) {\n  switch (lookahead) {\n    case '(':\n      return parseClassMethod({name: 'set', static, async: false});\n    case '=':\n      return parseInitializedClassProperty({name: 'set', static});\n    case ';':\n    case '}':\n      return parseUninitializedClassProperty({name: 'set', static});\n    case '*':\n      if (hasLineTerminatorBeforeNext) {\n        return parseUninitializedClassProperty({name: 'set', static});\n      } else {\n        throw new SyntaxError('unexpected token');\n      }\n  }\n  let name = parsePropertyName();\n  return parseSetter({name, static});\n}\nlet name = parsePropertyName();\nswitch (lookahead) {\n  case '(':\n    return parseClassMethod({name, static, async: false});\n  case '=':\n    return parseInitializedClassProperty({name, static});\n}\nreturn parseUninitializedClassProperty({name, static});\n``\n. @motiz88, still planning on getting to this? I expect I could take it if not.. I believe this was fixed by #300.. I believe this was fixed by #300.. Updated to put it behind a plugin namedtemplateInvalidEscapes`.. I've added tests. As far as I'm aware it should be good to merge pending review.. @danez, the description is (I think) everything that's changed. It's based off the cases found in #158 but doesn't end up using the same approach - as we found in #158, getting the current code to be correct is tricky; the obvious changes lead to other issues. I think this approach is going to be easier to maintain, and is to my eye more obviously correct (well, and is also actually correct, unlike the current code).\nSorry about the repetition; it's difficult to avoid if we want to preserve useful error messages. I'll take another look to see if I can cut it down. Happy to take suggestions there too.\nFWIW, this approach is very similar to the approach I took when implementing this in V8. I'm reasonably confident in it except the parts relating to flow, which I have less experience with. Unfortunately the flow parser itself has some bugs here.. @danez Makes sense. Gonna go ahead and close this, but feel free to take the code and/or tests when that revision happens.. This issue looks like a dupe of https://github.com/babel/babylon/issues/13 (and @rattrayalex yours looks like a dupe of #33 / #232 / #231).. @hzoo after this lands he can just run prettier on his pr, presumably!. 08 should be parsed as 8 in non-strict mode (per B.1.1) and is a syntax error in strict mode:\nA conforming implementation, when processing strict mode code, must not extend, as described in B.1.1, the syntax of NumericLiteral to include LegacyOctalIntegerLiteral, nor extend the syntax of DecimalIntegerLiteral to include NonOctalDecimalIntegerLiteral.\nV8 fixed this pretty recently (but it's fixed in Chrome stable!), so I'm not surprised that node still gets it wrong.\ncc @alxpy; I think your PR accepts 08 even in strict mode.. @loganfsmyth, you commented on the babel issue:\n\nthe open question here is if we should add a \"web compat\" flag or something\n\nIn my opinion, no. Just assume annex B is in effect. Since all browser JS engines implement it, and node implements it, there's no major environment in which it's disabled. And there probably never will be, since disabling it would Break The Web\u2122 and new implementations usually want their syntax to match that of other implementations.\nUse of annex B extensions is bad style, I think, but that's an issue for linters or (in some cases) strict mode, not a parser.. @alxpy CI was broken on master, fixed by #442. If you force-push it should clear it up.. This particular case is one that Shift handles particularly well, incidentally :).\n(The distinction Shift makes between assignment and binding is relevant because ({a: b.c} = 0) is legal but const {a: b.c} = 0 is not, and it's nice to have the type system enforce that.). @loganfsmyth, no strong opinion on what the behavior should be with flow. This is the intersection of a stage-1 extension and flow; it's probably fine to throw in sufficiently weird corner cases, especially until flow decides what it wants to do.. It wouldn't be all that hard - it's not quite like you say, because from is a legal type name in flow, so you need two-token lookahead to tell between flow's export type from = foo and ES6's export type from \"\" (or export type, {asdf} from \"\").\nBut looking at it again, it's a weird enough case that I think it should be an error for now, unless and until the official flow parser (or grammar - is there an official flow grammar?) decides what it wants to do in this case. If flow eventually decides not to support it, then it would be a breaking change for babylon to remove support, whereas adding support could be done in a patch release.. @Jamesernator This PR makes your code work unless you have Flow enabled, in which case it probably shouldn't work (any more than export class from \"m\" should).\nFor export { a as b } from \"m\", that's not an extension to the export syntax; that's part of es2015. I don't think it's something the export-extensions plugin ought to transform.. Force-pushed to trigger CI again after #442; now passes.. Ah, that was me at #351, sorry.\nWhat does this syntax do? Why does flow accept it? Do they accept it on purpose? (Also, why doesn't flow have formal documentation of their syntax?). LGTM.\nCould you also add a test for\njs\nclass A {\n  constructor(): Object {\n    return {};\n  }\n}. @EmpireWorld, it can't just be an Identifier because computed property keys allow arbitrary expressions:\njs\nclass A {\n  [an.arbitrary(expression)] () {}\n}\nNote that Literal is a subtype of Expression, so for non-computed names you can still have a Literal in that position.\nSo, no, it's correct as is.. @EmpireWorld, it is already included in the type. Identifier is a subtype of Expression, so anywhere the spec calls for an Expression, an Identifier is also acceptable.. I'd vote for making it like new.target, definitely. That's certainly how it's spec'd, and import.somethingElse is not grammatical.\nI believe ESTree's import expression is just to support dynamic import: import(\"whatever\") is legal. It has nothing to do with this proposal from the AST's perspective, despite the visual similarity.. I'm sad I wasn't paying attention when that decision was made, then. import.meta is a thing of its own, and has nothing to do with import(\"\") except that they have one token in common.\nNot a big fan of the MetaProperty node type either, come to that. new.target and import.meta really ought to be their own node types (possibly subtypes of MetaProperty, I guess, but not involving any strings anywhere). Since that ship has apparently sailed, I think Identifier { name: 'import' } is more in keeping with new.target than Import {} is.. Should make sure to disallow import.meta = val. I don't think it's specced yet, but it will be.. I expect this is a problem with the flow plugin, though I haven't actually checked. A minimal repro is something like\njs\n0\n ? (a) \n : b => 0\nI think the : is getting read as a type annotation, i.e., the a => 0 arrow returns something of type b. For example, flow and babylon both accept\njs\n0\n ? (a) \n : b => 0\n : 0. Haven't checked over all the output carefully, especially the source locations, but otherwise LGTM.. a) this is a Babel issue, not Babylon\nb) the problem is that Babel by default assumes your code is strict, and inserts a \"use strict\" directive. You're writing to the global variables a and b without defining them, which is an error in strict mode. You can configure Babel to not assume your code is strict, or you can remove the \"use strict\" directive, or you can avoid writing to global variables which haven't been defined.. Beat you by 2 seconds :D. A difference not yet mentioned is that export default ClassDeclaration does not have a trailing semicolon. Which means that the following syntax is legal, if horrifying:\njs\nexport default class {} export {};\nwhereas the following is not:\njs\nexport default (class {}) export {};\nIt really is a declaration, albeit an unnamed one, and trying to pretend otherwise is going to lead to confusion at the very least.\n\nI also don't understand why you want to make this change. For classes the difference in semantics is not observable (I think), but it trivially is for functions, as explained above.\n\nYou can also test this yourself in a recent browser or with a command line JS engine: e.g., with a recent build of v8, rund8 --module a.js on:\njs\n// a.js\nimport a from './a.js';\na(); // succeeds\nexport default function(){}\nvs\njs\n// a.js\nimport a from './a.js';\na(); // fails\nexport default (function(){});\nThis may also help you when considering examples. For example, in your cases 1/2/3 for functions above, case 2 and 3 actually both work fine: b.js finishes evaluating before a.js gets past the import, so there's no TDZ issues.. > The parsing and runtime rules can be followed while still preserving what Babel considers to be a FunctionDeclaration\nNo, they can't. As explained above, a function declaration and a function expressions in that position have observably different semantics. They cannot have the same AST.\n\nWhy isn't a recursive parenthesis rule used like delete operators?\n\nWhy would it be? Parentheses are already commonly used to distinguish function expressions from declarations. Not respecting them here would be weird.\n. 1) I think you want to update the AST specification too.\n2) Maybe add a test for try + catch + finally, e.g. try {} catch {} finally {}.\nOtherwise looks good to me!. @Qantas94Heavy, I don't think it's important that the failure says Unexpected token, expected ; vs just Unexpected token, especially given that the latter is what happens with regular properties. I'd just fix the test.. For what it's worth, I disagree that \"directives can be treated the same way as StringLiterals\" is a good thing. Every time any project whose authors are not familiar with that particular part of the JS spec tries to do so they up with a bug where they treat \"use strict\" like \"use\\x20strict\" and/or (\"use strict\"). I don't think it's a good idea to encourage that by making them appear the same.\nAnyway, given that https://github.com/estree/estree/pull/152 hasn't been merged yet, why not have ESTree conform to Babylon, instead of the other way around? Babylon's approach is better; there's still time to do the right thing in ESTree!. @danez I think the current setup is a lot more likely to lead to people doing the right thing than estree/estree#152 is. You can't treat a directive like a string literal when printing and the AST should not encourage you to do so; you need different methods to print them.\nMoreover, there's no reason the AST should represent a.) the \"cooked\" value of a directive or b.) the \"raw\" value of a non-directive string literal. Putting \"use strict\" anywhere in the tree when parsing (function(){\"use\\x20strict\";}) is at best extremely misleading.. You need parentheses, same as you would for object destructuring without a rest, or for an object literal as a statement by itself.. @loganfsmyth, I think you're right about your reading of the spec, but that's plausibly a bug in the grammar in the proposal - it's easy to forget that CallExpression has its own production for property access which also needs to be thought about any time you work with property access. (We ran into this in the private fields proposal, e.g.)\n. @esprehn\n\nIt means invalid code will be parsed as valid and things can confusingly escape from the enclosed function.\n\nFor this particular case, you can just assert on the shape of the parsed code, surely:\njs\nfunction parseFunctionBody(src, isGenerator, isAsync) {\n  const fn = parseExpression('(' + (isAsync ? 'async ' : '') + 'function ' + (isGenerator ? '*' : '') + '(){' + src + '\\n})');\n  if (fn.type !== 'FunctionExpression') {\n    throw new SyntaxError('error');\n    // you can also walk the tree to find the location of the leftmost function expression and throw an error with location pointing at its closing brace\n  }\n  return fn.body;\n}\nI suppose this doesn't give you precise location information for syntax errors which occur after an extra } (i.e., it would point to those errors rather than the brace). But other than that I don't see any particular downsides; it doesn't have the \"invalid code will be parsed as valid\" problem, at least, I don't think. I don't know see why you'd have to get any more complicated with wrappers and regexes than this.\nWhich isn't to say I'm opposed to something more in the API, but I'd like to better understand why you don't want to go with this approach.. @esprehn \n\nWe don't want to go that approach because argument names are still passed in as raw strings so we'd need to validate those\n\nThat seems like it would still be true with or without the proposed API, no? An API for parsing a function body isn't going to help you with parameter names.\n\nplus we'd need to validate that there's only one function in the list (since you could escape and end up with two). I suppose we could parse it with no function names, pull the function body out, serialize just that code, and then pass it down through new Function. It's getting uglier and uglier though.\n\nThat's pretty much what I've proposed above, yes. It doesn't actually seem all that ugly to me.\n\nI'm surprised you're so opposed to adding the same API the spec has.\n\nLike I say, I'm not necessarily opposed. My main concern is, well, there are a lot of different contexts which one could want something parsed in - function body, expression inside or outside an async function, loop body, case body, parameter, class body, etc. I don't think all of these should be added; I'd be a lot happier with an API that satisfied all of these cases, including possibly others we haven't thought of. But when I think about what that would look like, I end up thinking that the existing APIs + wrappers like the one I've proposed above seem to already satisfy it.\nWrapping your input in something which gives you the context you want and then pulling out the subtree you care about, while asserting that the full parse results in a node of the type you're expecting (so you know it didn't accidentally escape the context you wanted), seems like a fully general solution to the problem of \"parse this thing in this context\". With small helpers to handle serialization you'd still get all the power of .transform, I think.\n(Also, despite my \"member\" flair, I'm largely just a bystander here, commenting only from my experience on other parsers and with the spec. Don't put too much wait on my opinions.). I am not involved in the project, so take this with a grain of salt, but nested ifs like this look strange to me - why not combine the two conditions?\n. Do you mean with the code duplicated, or with both just calling some parseTaggedOrUntaggedTemplate(isTagged)?\nEither way, if the concern is just passing a raw boolean, how about instead\njs\nconst isTagged = true;\nnode.quasi = this.parseTemplate(isTagged);. Sure, done.. Sure. I could rewrite as\njs\nconst inTemplate = false;\nconst throwOnInvalid = true;\nout += this.readEscapedChar(inTemplate, throwOnInvalid);\nif you'd prefer.. Could do, but it would be a break from the style in the rest of Babylon (and, technically, slightly slower).. Come to think, the same applies to using a default parameter for readCodePoint.. Update: undone to better match style.. @xtuc, I've tried to keep the style in this PR in keeping with the rest of babylon. I have no strong preference either way, but it seemed better to keep the style consistent for the moment. If maintainers have a particular style you'd like me to keep to I can go through and revise (and also revise my other PRs, maybe).. I'd combine this with the above clause, personally - \njs\nif (this.match(tt._export)) {\n  if (allowExport) {\n    return;\n  }\n  this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead\");\n}. I'd clarify here that foo applies only to the second class and bar only to the first.. Did you drop a this.expectPlugin(\"importMeta\") here?. No. Not only that, it should be a syntax error; see below.. ",
    "matthewmueller": "\nNot to nitpick, but not a language :P\n\nHehe, good call \ud83d\ude05 \n@hzoo yah maybe this is the wrong repo to discuss this. I just saw it as a starting point. But the goal would definitely be to replace webpack or browserify. It's crazy to me that even incremental builds take like 4-7 seconds on medium-sized projects. I can't imagine the swaths of engineers sitting around on big projects.\nThere's just so much frontend tooling built in JS, that it's a pretty long road to just make frontend builders outside of JS. Rust is potentially a good choice because Servo needs to build these parsers for their browser. \n. @hzoo Definitely not an expert in the internals, so I'm not sure how much more needs to be optimized, but it seems like they all claim that they're already really fast, which I think is true in the tests, but not so true in actual projects.\nI wonder if it's worth optimizing further or acknowledging that it's a CPU bound task and should be done in a language better suited for those types of tasks.\n. @loganfsmyth yah, you're totally right. I was sort of probing to see if anyone else can already offer some more concrete information on this: saying this is a bad idea, not necessary, something we're already working on or a change we'd really love to see :-)\n. ",
    "samwgoldman": "Tests fail due to missing babel support, which is added in the referenced PR to Babel.\nIs it possible to bump these versions in lock step, or do I need to break up this change into multiple steps?\n. Heads up, I'm going to change this to roll back the addition of a new variance node. Instead, I will continue to use the \"plus\" | \"minus\" | null format that currently exists for type parameters.\n. OK, I removed the new node type, so this is no longer a breaking change. In order to preserve the existing error messages, I needed to pass around the position of the variance annotation out-of-band, which is a bit hacky, because we need to be careful to clean up after ourselves with delete.\nIn the future, when Babel approaches a major version and we can make the breaking change, I'd like to go back to having a separate node type for variance annotations.\n. We can also change the Flow parser to be consistent with Babylon. WDYT @mroch?. Yup, method property on the object type ast, like we have for object values, sounds good to me.. If I remember correctly, we still need to put up a PR to babel/babel with changes to babel-types, babel-generator, and babel-transform-flow-strip-types, correct?. Good catch! These two assignments are totally bogus :P\n. That actually slightly changes the behavior here, because calling eat in the conditional expression advances the parser, so when I call startNode the start position is off by one.\nI could also write this, but I think don't think it's clearly better:\nlet variance = this.startNode();\nif (this.eat(tt.plusMin)) {\n  // ...\n} else {\n  variance = null;\n}\nreturn variance;\n. Will change the eat(plusMin) to next(), which will hopefully clarify the intent better. The tests do exercise the node positioning, so regression is unlikely here.\n. \ud83d\udc4d Yup. In this case they are one-in-the-same, but this should definitely be variancePos for clarity. We wouldn't need variancePos except for static properties on classes, which share the same AST building code.\n. This should parse. How are you testing?. This should parse. How are you testing? Gabe's comment is that parsePrimaryType is actually too restrictive. We also parse non-primary types in this position, like unions. E.g., {...A|B}.. Right, we \"reserved\" the syntax in 0.40, but 0.42 extends support to all type syntax and adds support.. Yeah, no worries. Per your initial comment, the typing support is incomplete, but eventually we will also support spreading string (implicitly promotes to String instance, which has no own properties).. ",
    "domenic": "Thanks so much for working on this; this'll be very helpful.\nAs a nit, I think it might be better to name it importFunctionLike so people don't get the wrong idea. It's more like super() than it is like a function. I'll probably rename the proposal repo similarly (https://github.com/domenic/proposal-import-function/issues/14).\n. Yeah, that's probably a good idea... not sure what the spec grammar will look like yet, which might impact your AST...\n. Updates from the spec side:\n- The new alphanumeric name of the import() proposal is \"proposal-dynamic-import\"\n- The spec now requires exactly one argument. (Might be worth testing the no-argument import() case too!)\nExciting!\n. ",
    "kesne": "Yeah I thought about that working on this, that's probably not a bad idea. I'm also not :100: on ImportCallExpression in the AST.\n. @ljharb Not a bad idea. I can also add a test case for calling in module mode (right now I just run in script mode and assume that if it passes in script, it passes in module).\nEDIT: Added both of those cases!\n. @domenic Considering this: https://github.com/domenic/proposal-import-function/issues/15 do you think that we should enforce the single argument syntax in the parser now?\n. Alright, I added a check to the arguments which fails parse on more than one argument. The only remaining line that I don't have code coverage for is the check for the plugin in expressions. If you folks think that'd be good to have I can do that.\n. I renamed the plugin dynamicImport, and updated it to require exactly one argument and added a test to check for the no-arg case!\n. Is there anything else that I can do to help get this out?\n. This is also tracked in webpack, for the acorn plugin that's here: https://github.com/kesne/acorn-dynamic-import\nProbably should knock both out at once, most people using import() in webpack use babel-eslint, so having them match would be :100:. Webpack will be fixed with this: https://github.com/kesne/acorn-dynamic-import/pull/5. Yeah it reads arguments.length which is flawed for this reason. We could explicitly disallow spreads as the argument. . Whoops, just noticed there's a PR, awesome. I'll update the acorn plugin for Webpack. Thanks for finding this!. That's probably a good idea, I can rework this to do that.\n. @loganfsmyth Alright I updated the code to do that. Ended up being a pretty clean solution! Thanks for the recommendation. \n. Yep, good catch! Fixed.\n. Yep, looks like that handles this use-case perfectly. \n. It looks like this case can never be hit, because the parser runs through statements first, and would throw unexpected trying to parse the import function.\nShould I remove it knowing that, or keep it for safety? \n. I figured out that this can be hit if you do something that parses as an expression first. For example, inside of a function return import.fails() hits this case.\nI've added a test for this case to prevent any regressions and to bump the code coverage.\n. I agree that would be nice. I did this because it seems like this is how the rest of the plugins handle it.\n. Should we add this to #172 after this lands?\n. ",
    "ljharb": "Is it a good idea to ensure in the tests that it parses in both sloppy and strict mode, and in Scripts and Modules?\n. I'm fine with the concept of \"auto\", but I would strongly discourage using the unambiguous grammar proposal (in any tool or library) until it's made progress in TC39. At this stage, it seems to have very strong opponents, so it's likely it will never reach stage 4. (it never reached consensus for any stage; TC39 meeting notes)\nYou absolutely can infer the Module parsing goal if import or export appears - however, the lack of either of those keywords absolutely can not be used to distinguish between Script and Module. It is simply wrong to decide something is a Script simply because it lacks import or export.\nSeparately, I'm not aware of any plan to make require unavailable in ES Modules in node - @bmeck can confirm.. It's not simple in that there exist valid files that can be both a Script or a Module (they neither import nor export anything), and they can do different things based on the parsing goal.\nIt's not about \"blessings\" - this isn't about \"permission\" - it's that it will result in broken code in nonzero cases, so it's wrong to do it - no matter which tools are doing it already.. Yes, that's one solution - one they will have to know about, know how to apply, and figure out that their code is broken in a very subtle way such that it can trigger this process.\nDefaults should be safe. Defaulting to breaking nonzero people is not safe, no matter how convenient it might make things for other groups of people.. I'm not sure I understand why it'd be better to silently do the wrong thing - ever - rather than forcing the user to make an explicit choice.. The issue summary at the top outlines the hazards of silently assuming the wrong thing - which supports my position.. Babel running on \"arbitrary code that they don't own\" and guessing the parsing goal, when it's impossible to know for sure if it's a Script or a Module, is hazardous - whether it's \"module\", \"script\", or \"auto\".\nI like the unambiguous parsing proposal; I wanted to see it land - but since it isn't likely to, I think it's hugely dangerous for anything to rely on it. Things will break.. If there was a way to determine whether a file (that isn't already \"definitely a Module\") would behave the same in both strict or sloppy mode, and also whether its behavior depended on running in the global scope directly or not, then perhaps you'd be able to safely \"ironclad\" make a choice for that file - but at that point, it wouldn't matter which you chose.. To be clear; my primary argument is about safety, which only applies to what the default is. Separately, I don't think using the \"unambiguous\" proposal is ever a good idea, but I'm not a blocker on that, proverbial or otherwise.\nOnce node ships modules, I think every tool in the ecosystem both must, and will inevitably anyways, conform to the detection semantics node ships; and that's what I'd want to see Babel adopt as the default.. Personally, I think more smaller projects is much better than one large, bloated, multipurpose project.\nSeparately, eslint is useful even when not using babel, and not everyone using babel uses eslint.. @lx93uv that having talented people can largely mitigate the inherent flaws in having a large project does not alter that it is inherently flawed.. what are these magic numbers? could these be stored in named variables, so it's clear what \"46\" means?. ",
    "nathanhammond": "In-progress PR: https://github.com/babel/babylon/pull/178. ",
    "jfmengels": "\nhopefully you didn't mean you did it manually :sweat_smile: , but if so next time!\n\nHaha, I did... :sweat_smile:\nI didn't know how tests were created, so I just updated an existing test, which already had the file. Deleting it was not the most intuitive thing to do :smile:.\nHonestly I just thought you were working like a madman to have proper expected.json files. This makes much more sense :smile:. (Though, if you don't write it at least in part manually, I'm not sure what exacly you're testing, but that's another topic). I myself cheated a bit by using astexplorer.net, and then manually fixing every error the tests showed me. I will definitely remember it next time.\n\nWill merge + release after travis is done\n\nAwesome! Thanks for being so reactive!\n. ",
    "DrewML": "That would be sweet - we'd avoid the cost of node's expensive module resolution algorithm.\nHere is a flamechart of babylon parsing a single variable declarator.\nTest case:\njavascript\nconst babylon = require('babylon');\nconst ast = babylon.parse('var foo = \"lol\";');\n\nThe time babylon takes to do the actual parsing is like ~5ms - the other 100ms is spent doing requires.\nEdit: Here is the same version of babylon, run through rollup. Example same test case\n\n. One blocker to switching to rollup. I'm hitting a bad bug with rollup-watch, which is what we'd need to use to replace npm run watch. Most changes I've made, the watch starts running in an infinite loop. We probably wouldn't want to have to manually run a build after each change.\n. Cool - I can open a PR, and see if any other contributors have a huge problem with dropping watch (at least for now).\n. I have this fixed locally. PR coming soon, once I figure out the issue I am having with adding a new test case.\n. > \ud83d\udc4d but the test case should include a trailing comma, right?\nLOL. I love that I had a test case in the issue and I still made this mistake. Good catch \ud83d\udc4d.\nI've pushed an update\n. Hmm. Apparently rollup only supports node 0.12.x and up. So our output bundle would work on 0.10, but we can't execute the build in Travis for 0.10 (without using something like babel-register for that version).\nThoughts?\n. > We should be able to run the tests with/without rollup right? (might be painful)\nMy biggest concern there is that, Rollup could theoretically generate a bundle that wouldn't work on 0.10.x, but we wouldn't know if we didn't test the bundle itself.\nI did have a thought, though. nvm is available on Travis containers. I could have it setup so, for 0.10/0.12, we run the rollup build in node 4, then nvm use before the tests run. I'll give it a shot later tonight\n. Cool - I'll push updates to the PR this weekend to build with node latest, then run tests on the target node version\n. @hzoo @danez Switched things up in travis so builds run in latest node, and then tests are executed in the proper node version for that test run.\nCan verify this in the Travis build logs:\n\n. Hi @kristofdegrave,\nThanks for the interest in contributing to Babylon! @SerkanSipahi is correct that the project only accepts PRs right now for TC39 proposals that are at Stage 0 or higher. There has been some discussion around a proposal on ESDiscuss, but nothing official yet.\nIt might be worth taking a look at Sweet.js, which lets you write hygienic macros for JavaScript.\n. @krainboltgreene Bablyon doesn't support external plugins (so plugin is a bit of a misnomer here). The plugins option takes an array of strings for built-in parser plugins. This PR just makes it easier for tooling (like astexplorer or babel-eslint) to enable all parser options without having to maintain a separate list.\n. Thanks! Looks like we have a few updates we're going to need to make for compliance with the latest draft of the spec.. > I changed it so that the tests run without rollup.\n@DrewML Do you think this is okay?\nI think the only part that would be concerning is not running any tests against the bundle in CI. It's possible rollup could introduce a bug that we would never catch until running the Babel test suite against a release of Babylon.\nEdit: Thinking about it more, we run the Babel test suite in CI against each Babylon PR, right?. > Will this be breaking for cases like\n~~It should be, based on my reading of the spec (good catch, updated to breaking in the OP). Having said that, this is a case that this branch currently parses incorrectly. I'll work on fixing that.~~ Fixed. How about classAndFieldDecorators? That way we're not tying it to a year.\n~~The other question, though, would be what should we do in the scenario that a user has both enabled (could easily happen now that we support * for all plugins)? With your example code above, one version of the draft (the older one) would allow @decorators['foo'] to parse, but the newest draft would consider that a syntax error. Would be a bit more straight-forward without the * option, unfortunately.~~ This is addressed by this PR. > I didn't realize we supported function expression decorators, are you sure?\nUpdated the OP - I got that backwards. We currently support method param decorators, but not function expression decorators.. Another example: statements\njs\nexport for (;;);\nexport while(foo);. @SerkanSipahi The new decorators proposal, AFAICT, does not support this syntax. We're not doing any further maintenance on the old version of the proposal. There are plans to support the new decorators proposal, but this will be a syntax error unless someone can identify this as being allowed in the stage 3 proposal's grammar.. Good call on the flow stuff, hadn't considered that. Will keep in mind. I plan on addressing this, just trying to get through work on the Private Class Fields proposal first.. Looks like a regression - this worked with Babylon v5.8.38. @jlongster All of the tests in Babylon just have fixtures that match a source string to the serialized AST. Basic steps are:\n\nAdd a new directory with a descriptive name under one of the subfolders in test/fixtures/jsx\nAdd an actual.js file in that folder with the code to use as a test case\nRun npm run test-only, which will automatically generate an expected.json for you\nInspect the AST output to expected.json to verify it looks correct\n\nIt also looks like you'll need to regenerate the results for test/fixtures/jsx/basic/10, since they're currently committed without the proper location info. You can delete that expected.json and re-run npm run test-only to regenerate.. > I don't understand why I can reproduce it by checking out master without my changes.\n@jlongster It's not super well documented (or at all?), but the tests right now actually run against the artifact spit out by Rollup. We have some clean up to do there.\nFor the time being, try running npm run build && npm run test-only on master, and things should be passing.\nRegarding the current tests failing in CI, haven't looked deep into it yet, but my suspicion is that your fix addressed an issue that we didn't notice when that fixture was last checked in. If you verify the AST in jsx/basic/10 is correct (and that it was wrong before) you can delete the expected.json and run npm run test-only to generate the new fixture to include in your PR.\nEdit: Yeah, the fixture checked in had some issues. Empty object for loc, and no start or end prop on the JSXEmptyExpression node. Just regenerate that fixture and you should be set.\nThanks for contributing, btw!. The test failure looks like it is catching something valid-ish.\n\n\u2716 esprima/invalid syntax/migrated_0065 Error: /home/travis/build/babel/babylon/test/fixtures/esprima/invalid-syntax/migrated_0065/actual.js: Expected error message: Unexpected character '#' (1:2). Got error message: Unexpected token, expected ; (1:2)\n\nFor that particular test-case, it seems like the error we're spitting out now is much less descriptive of the problem.. This is such a big deal!. Not implying this isn't an issue, but for the sake of prioritizing, is this something that has been hit in real code, or just a problem you spotted?. @micopc Perfect! It's all yours.. > This could be potentially breaking, for people relying on this wrong behaviour. Although I'm not sure if that'S a real case, as babel would not transform class properties when they are not active, but flow is and you use class properties in your code\n@danez looks like this wouldn't affect most Babel users.\n\n\nIf Flow is enabled, the property without the initializer gets stripped out.\n\n\nIf you don't have Flow enabled, you already get a syntax error.\n\n\nThis seems like it'd only break things consuming the parser directly (like babel-eslint), but I can't think of a way it could actually break code being built.\n. Thanks @danez!. This is required to be able to import an index file without having to explicitly list ./foo/index.\n. I had to rename the plugins identifier in the argument list for loadPlugins, because it was shadowing the identifier of the same name at the top of the file. The current code is relying on the way the module eventually gets compiled to cjs, but this doesn't work now that we're bundling.\n. Hmm, you bring up a good point. I just noticed that I didn't change the test-only command to run a build first, so technically the code you test against locally isn't 1:1 with the code tested in CI (babel-ified code locally, vs rollup output in CI). Thoughts?\n. Ha, that's a good point. We could leave it in, and then, if enough of us hit weirdness where things pass in CI but fail locally, we can always pull it out (or try and fix the rollup watch plugin).\n. Since we know what the problem is here (an export that doesn't have a valid declaration or export clause) maybe we can use this.raise and hint to the user what the problem was?. > Or did you mean a more generic \"Not a valid export\" type of message\nYep! Just some message indicating that we know it's an export, it's just not a valid one.. I believe this is covered by passing liberal as true through to parseIdentifier (although it probably should be hard-coded to true here, rather than an arg to parsePrivateName. \nparseIdentifier only restricts using keywords when liberal is falsy. I'm not super happy about a flow-specific check leaking into the general parser, but I didn't see a straight-forward way to do this otherwise. Only other way I could see was to just have the flow extension for parseClassProperty invoke this with an optional second param of hadType, but even then, Flow-related stuff still leaks in.. Pretty sure it's safe to provide a better message here. We should only get to this point if we're inside the top level of a class body and we've found either a = or linebreak after an identifier.. Should note I'm using this.state.start rather than node.start here, so we're pointing out the error where the = is, rather than what could be the start of a type annotation in the scenario that the code being parsed is:\njs\nclass Foo {\n   bar: string = 'bizz';\n}. > This code will not stay forever anyway, as as soon as class-properties are final, we can remove all this.\nGood point. Thanks for the PR, @rwaldron! I believe we need to switch to Array#indexOf here instead of Array#includes. We don't load any polyfills in Babylon, and the minimum supported node version is 4.0.0.. ",
    "wtgtybhertgeghgtwtg": "I doubt this is a feasible suggestion, but since node is dropping support for 0.10 at the end of the month, maybe you could bump Babylon to 7 and make it for node 0.12 and up?  Alternatively, for node 4 and up, since node drops support for 0.12 at the end of the year.\nAlthough, bumping the minimum node version to 4 seems to be on Babel's Next Major milestone.\n. Travis, that was it.  This is breaking for dev.. Okay, so, rollup throws if modules is true, but jest throws if modules is false.  And they both run on BABEL_ENV=test.. > Could we tell Jest to consider each fixtures (or directory) as a test suite to get a better output?\nNot quite.  You can do\ndescribe(fixtureName, () => {\n  // Run tests here\n});\nbut they'll still all be considered one suite.  This will also cause them to run on the same thread, meaning it will be slower than on ava (about 10-13 seconds instead of 7).  I'll submit an issue to jest to see if this can be reworked.  Something like\nsuite(fixtureName, () => {\n  // Run tests here as their own suite\n});\nIssue: https://github.com/facebook/jest/issues/2758. > rollup throws if modules is true, but jest throws if modules is false.  And they both run on BABEL_ENV=test.\nCan I get some help on this?  Is there a decision for this?. Conflicts resolved, but you'll probably wanna run yarn upgrade afterwards, since I did the yarn.lock by hand.. jest has code coverage built in instead of using nyc.  I completely forgot to fix that, sorry.. The only thing I can think of is that jest doesn't create a .nyc_output folder.  I'm not sure if that'd be something they support or would want to support, either.. ",
    "SerkanSipahi": "Hi,\nnice suggestion. I would use it but i think the babylon(babel) team will not add \"condition member access\" to babel as long as it does not have any status in:\n- https://github.com/tc39/proposals/blob/master/stage-0-proposals.md\n- https://github.com/tc39/proposals\nI have not found any discussion about it in TC39. Maybe you could make your suggestion as proposals in TC39.\nHere is an discussion about \"condition member access\" in https://github.com/Microsoft/TypeScript/issues/16 - maybe interesting for you!\n. @kristofdegrave \"condition member access\" is not part of es6.\n. @kristofdegrave see https://github.com/babel/babylon/issues/328 ! i think they are looking for someone who can implement that :). @kristofdegrave :). Try this:\nExample 1:\n``` js\nimport * as babylon from \"babylon\";\nimport traverse from \"babel-traverse\";\nconst ast = babylon.parse('expr='+exprfoo);\ntraverse(ast, {\n    // will called each time when \"BinaryExpression\" is found\n    BinaryExpression(path){\n        let res = path.get('right') // log: exprfoo\n    },\n});\n```\nsee handbook, very useful: https://github.com/thejameskyle/babel-handbook/blob/master/translations/de/plugin-handbook.md\nbabel-types: https://github.com/babel/babel/blob/master/packages/babel-types/README.md\n. @hzoo Thank you for the quick response and sorry for asking in wrong repo.\n. @loganfsmyth thank you. You are right. Its not valid es6. I wrapped it with single quotes.\nThis works fine:\n`` js\nlet compiledTemplate = template(\n    import { IMPORT_NAME } from 'SOURCE';\n`, { sourceType: 'module' });\nlet res = compiledTemplate({\n    IMPORT_NAME : types.identifier('foo'),\n    SOURCE: types.stringLiteral(\"./a/b/c\"),\n});\n```\n. @loganfsmyth right\n`` js\nlet compiledTemplate = template(\n    import { IMPORT_NAME } from 'SOURCE';\n`, { sourceType: 'module' });\nlet res = compiledTemplate({\n    IMPORT_NAME : types.identifier('foo'),\n});\nres.source.value = \"./a/b/c\";\n. @DrewML @loganfsmyth any updates here?. @DrewML its ok and thanks for your feedback :). I resolved it with other approach:js\nexport default function ({ types: t}) {\n  return {\n    visitor: {\n      Decorator(path){\n        path.node.expression.arguments = []\n        path.node.expression.arguments.push(t.identifier('{a: 1, b: 2, c:3}'))\n      }\n    }\n  };\n}\n```\nInput Code\njs\n@view(`Hello World`)\nclass Foo {\n}\nOutput Code\njs\n@view({a: 1, b: 2, c: 3})\nclass Foo {\n}\nQuestion:\n1.) Is this approach ok?\n2.) and is my reported issue a bug?\n3.) is still there another approach?. @loganfsmyth thanks this works fine for me:\njs\npath.node.expression.arguments.push(ast.expression);\nP.S. Learning never stops :). @loganfsmyth template may include everything. It was just an example :). @xtuc thanx. ",
    "kristofdegrave": "@SerkanSipahi @DrewML Thanks for the feedback. Too bad it is not possible at the time, but let's hope it will come to es6 :). I'll leave the forks maybe sometime in the future they will become useable.\n. It looks like what I was trying to add is already a stage 1 proposal:\nhttps://github.com/tc39/proposals under the name Null propagation. (https://github.com/tc39/proposals at the bottom) \nProposal: https://docs.google.com/presentation/d/11O_wIBBbZgE1bMVRJI8kGnmC6dWCBOwutbN9SWOK0fU/view#slide=id.p\nDoes this mean you can take this under consideration? If so can you let me know what the next steps should be for getting the PR merged?. Nice, working on It. ;). I'm currently werking on An PR for this. ",
    "agudovitoria": "Hi.\n\u00bfHas been this changes released on some version, or proposed for some version?\nThank you.. ",
    "mathiasbynens": "Copying my comment from the other thread:\n\nThis is something that web browsers used to allow despite it not being mentioned in the spec. As of ES6/ES2015, this behavior is explicitly non-conforming. More background from https://mathiasbynens.be/notes/javascript-identifiers:\n\n[\u2026] For example, var v\\u0061r = 42; alert(va\\u0072); would alert 42. This is very confusing, so I wouldn\u2019t recommend relying on this hack. Luckily, it looks like the ECMAScript 6 spec will explicitly make this behavior non-conforming. Firefox/Spidermonkey, Safari/JavaScriptCore, and IE/Chakra have already dropped this behavior.\n. LGTM! Thanks for the CC, @ryanjduffy \u2014 I appreciate the heads-up \ud83d\udc4d \n\n\nRef. babel/babel#4315 for dropping Node.js < 4 (in which case the polyfill can be removed).. Btw, since the goal is to decode HTML entities, consider using a library like he.. I was just wondering about that :) A shared milestone would be \u2665. Note: this doesn\u2019t change the actual string value (\"\\uD83D\\uDCA9\" === \"\ud83d\udca9\"), it just ensures the file is ASCII-safe.. How about using 0x6E instead of 110? It makes it more obvious that this refers to U+006E LATIN SMALL LETTER N.. Same could be done here (0x30 instead of 48). if (next === 0x2B || next === 0x2D). Same here. ",
    "mcheshkov": "Forgot versions.\nBabel 6.18.0\nFlow 0.34.0\n. Thanks @danharper, works nice with named arguments. Closing as duplicate.\n. ",
    "jeromew": "@SerkanSipahi thanks for the snippet. Nevertheless, babel-traverse adds serious slowness compared to the access to raw fields. I did a small benchmark and had around 130K ops/sec with my version (same for @loganfsmyth's version) versus 8K ops/sec using babel-traverse, just to parse \"a\".\nI am trying to use a subset of what babylon does, trying to see if there can be an entry point inside babylon that would improve the performance of building the AST of something we know should be an expression (and throw if not)\n@loganfsmyth your solution with \"(..)\" is maybe more robust than mine with \"expr=..\" I'll try that. I would have to revise my javascript 101 to make sure which pattern would always be parsed as an expression.\ndo you think I could get faster parsing with access to internals ? (skip the File and Program that I do not need, go directly to \"start of an expression\"). I need to parse a lot of small snippets which is why I want to avoid the cost of setup as much as i can.\n. @TimothyGu indeed ! \"=a\" leads to an expression with \"expr=..\" so I guess none of these solutions are foolproof except if we really find a pattern that would force the expression parsing (your example made me realize that may not exist).\n. Seeing the code on https://github.com/pugjs/is-expression-babylon/blob/master/src/index.js and on https://github.com/babel/babylon/blob/master/src/parser/index.js, is-expression-babylon was close enough to the tokenizer to be a nice solution to the problem.\ndo you think that babylon could export the Parser or the Tokenizer so that we can sub-class it again ?\nor would you agree with a PR that would allow for parsing specific sub-parts of js like is-expression-babylon was doing ? I believe the main idea was to force the parser into Expression mode and check that everything was parsed when leaving Expression mode :\nassertExpression() {\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tokTypes.eof)) {\n      this.unexpected();\n    }\n    return expr;\n  }\n}\nIt would be great if we could have that again ! Feel free to comment on this and tell me what kind of PR has the best chance of beeing accepted (exporting the parser/tokenizer or a new assertExpression method)\nThanks ! \n. To clarify the given example\np(style={color: '#' + c }) #{expression}\np\n  = intro ? intro.toLowerCase() : \"\"\n  br\n  = paragraph\nis converted to something like (simplified)\nvar html = '<p style=\"color:'+escape('#' + c)+'\">' + escape(expression) + '</p>'\nhtml += '<p> + escape(intro ? intro.toLowerCase() : \"\") + '<br>' + escape(paragraph) + </p>\nand this is why we need to parse the expressions directly.\nI admit that I invoked performance without a satisfying benchmark to back it up. A pug template can have many expressions to parse (content, attributes, ..) and a website can be composed of hundreds of templates so I believe that lowering the footprint of the code path over the compilation of a whole website can have an impact.\nFor what it's worth, i did a small benchmark on my machine\n```\nvar Benchmark = require('benchmark');\nvar babylon = require('./')\nvar suite = new Benchmark.Suite;\nvar expr = 'a = b';\n// add tests\nsuite.add('parse (expr)', function() {\n  babylon.parse('('+expr+')').program.body[0].expression\n})\n.add('parse expr=expr', function() {\n  babylon.parse('expr='+expr).program.body[0].expression.right;\n})\n.add('parseExpression', function() {\n  babylon.parseExpression(expr)\n})\n// add listeners\n.on('cycle', function(event) {\n  console.log(String(event.target));\n})\n.on('complete', function() {\n  console.log('Fastest is ' + this.filter('fastest').map('name'));\n})\n.run();\n```\nThe result of several runs on simple expressions (we have many simple expressions to parse and more occasional complex expression) is roughly stable with a 40% gain in ops/sec for parseExpression.\nexpr: \"a = b\"\n\nparse (expr) x 81,714 ops/sec \u00b15.68% (78 runs sampled)\nparse expr=expr x 89,567 ops/sec \u00b12.72% (81 runs sampled)\nparseExpression x 145,622 ops/sec \u00b11.53% (83 runs sampled)\nFastest is parseExpression\n\nexpr: \"a + b + c\"\n\nparse \"(expr)\" x 71,259 ops/sec \u00b17.87% (73 runs sampled)\nparse \"expr=expr\" x 70,723 ops/sec \u00b13.21% (83 runs sampled)\nparseExpression x 116,130 ops/sec \u00b11.55% (83 runs sampled)\nFastest is parseExpression\n\nexpr: !a\n\nparse \"(expr)\" x 104,670 ops/sec \u00b13.49% (77 runs sampled)\nparse \"expr=expr\" x 83,771 ops/sec \u00b13.57% (81 runs sampled)\nparseExpression x 183,886 ops/sec \u00b11.47% (82 runs sampled)\nFastest is parseExpression\n\nexpr: a ? a : \"\"\n\nparse \"(expr)\" x 50,379 ops/sec \u00b154.81% (76 runs sampled)\nparse \"expr=expr\" x 64,427 ops/sec \u00b14.04% (80 runs sampled)\nparseExpression x 111,606 ops/sec \u00b11.55% (87 runs sampled)\nFastest is parseExpression\n\ncorrect parsing is another aspect as we saw that neither the \"(expr)\" nor the \"expr=expr\" trick leads to a correct parser because of edge cases like \"a)(\" or \"=a\" that get incorrectly parsed as expressions.\nI could add tests if you guide me as to what kind of tests would be needed.\nThere were a bunch of tests in is-expression-babylon that I could port over if they fit (https://github.com/pugjs/is-expression-babylon/blob/master/test/index.js) but I think the expression parser is already tested.\nThanks for your consideration.\n. Is there anything I can do to improve my PR ? Here is the current summary of the pros/cons as I understand them.\nbabylon has a Parser that allows direct parsing of expressions without parsing at the statement level (cf PR). \npug (ex jade) is a templating language that mixes html and direct javascript expresssions that needs to parse a lot of expressions when templates are compiled (1) to ensure that the templates are correct (2) to give appropriate debug messages with line/col information (3) to directly build an AST tree version of the template.\npros:\n- it is 40% faster than statement level alternatives\n- it avoids parsing errors compared to parsing (expr) or e=expr at the statement level when expr has degenerate values like a)( or ==b\n- it avoids line/col numbering offset that appear when parsing (expr) or e=expr at the statement level\n- parsing expressions directly is a requested feature by parser users (even if low frequency). cf https://github.com/ternjs/acorn/issues/97 , acorn parseExpressionAt function\n- expression parsing would benefit from the great parsing engine of babylon\n- it would allow to replace the is-expression-babylon module that was broken when rollup was implemented in babylon\ncons:\n- it adds a new public entry point on babylon\n- Expressions don't really have a parser target in the JS language grammar\nIf this PR cannot be polished until it meets merging status, could we consider exporting the Parser or exporting enough entry points that is-expression-babylon could be rebuilt ?\nThanks for your time.\n. @danez I squashed my PR, adding tests. Apparently codecov does not update its review.\nThe tests are in the test/expressions directory. I added an esprima test set based on the expressions test i could find in fixtures/esprima  (keeping the LICENCE file I found in this dir). and an is-babylon-expression dir with the tests that were in this module.\nYou will see I added a new denyLineComment option (defaults to false) to babylon.\nThis was a trade-off that I measured via benchmarks to keep a feature that was in is-babylon-expression, raising an exception for expressions that finish with a lineComment.\n@TimothyGu, note that I reversed the default behavior of is-babylon-expression to avoid having a different default for parse and parseExpression so lineComment: true is not necessary anymore, and all other cases need a denyLineComment: true\nTell me what you think and if we agree on this. I will then add documentation on the README regarding the new option and parseExpression API.\nThanks\n. @danez I just rebased the PR. \ncoverage information was calculated on https://travis-ci.org/babel/babylon/jobs/189441861\nbut coverage seems to have a problem updating its view of this PR - https://codecov.io/gh/babel/babylon/pull/213\nI think it wants to start its history on the first commit I did that was squashed and replaced. This is probably linked to https://github.com/codecov/support/issues/126 as the coverage page states \"Commit was deleted by force push or pull request rebase.\"\nDo you want me to try and open another pull request ? I could create a new branch on my side with identical commits and send it as a PR forcing github + coverage to start a new thread.\n. @danez, @ForbesLindesay you are right. I tried to fit the \"deny comment\" feature that is-babylon-expression had. I agree that it does not seem reasonable that my implemention of that would tend to add a such a morphing option to the parser. I will remove it.\n. @danez I removed the denyLineComment. Thanks for the feedback.\nAfter further examination, I think that parseExpression users will have the opportunity to detect LineComments by simply looking at the trailingComments property that babel adds on the parsed Node. This is simpler and cleaner.\n. @danez thanks for this PR. I was looking into how I could add tests for #213 and was going to ask if I could add a separate fixture directory for this ;-)\nI'll wait until this PR is merged. Can you tell me on #213 what do you think the name should be for the fixture dir and a bit about the coverage that I should try to reach in the PR ?. ",
    "Jessidhia": "Would be better to say \"method or class constructor\", as only those have a [[HomeObject]] (and thus access to super).\nRight now it is inside a function, it's just a \"free-standing\" function expression that happens to be assigned as the value of an object's key.\nWorse, if it did try to just use the object where the expression appears, its [[HomeObject]] would be the property descriptor itself \ud83d\ude04 \n. allowSuperOutsideMethod would probably only make sense if super was dynamic and worked like Object.getPrototypeOf(Object.getPrototypeOf(this)).\n. AFAIK from the previous drafts, module, exports, __dirname, __filename et al will be gone in modules. However, global and require stay.. Nope! This is still a best guess. The only thing that's certain is that if mjs happens that it'll always be parsed as a module.. How should the tree look like when MemberExpression are involved, like in import.meta.foo?\n// super-like\nMemberExpression {\n  object: MemberExpression {\n    object: Import {}\n    property: Identifier { name: 'meta' }\n  }\n  property: Identifier { name: 'foo' }\n}\n// new.target-like\nMemberExpression {\n  object: MetaProperty {\n    meta: Identifier { name: 'import' }\n    property: Identifier { name: 'meta' }\n  }\n  property: Identifier { name: 'foo' }\n}\nESTree specifically defined an Import node expecting it to be used like super in the future.\nhttps://github.com/estree/estree/blob/master/experimental/import-expression.md. The reasoning for naming it Import instead of DynamicImport was because of the similarity to Super when it got meta-properties added.\nIt would be nice to be able to have Import {} as the MetaProperty's meta, instead of an Identifier { name: 'import' } though.. These are not expressions, they are declarations. Parsing them as expressions will have incorrect behavior.\nThe specification specifically lists functions (HoistableDeclaration) and classes as being parsed as declarations when they are on the right side of a export default. Treating them as expressions and not declarations has implications for live bindings.\nhttps://tc39.github.io/ecma262/#sec-exports\nI believe it was done like that as a workaround for not being able to directly name a function or class as default. export class default {} would have the exact same runtime behavior as export default class {} if it was valid syntax.. This will also break babel module transforms and make it harder to write them correctly, particularly in the hoisted declaration case.\nI would prefer very much to not deviate from the spec unless it's not possible to represent correctly. The point of a function expression is not that its name is optional, it is that it is an expression, and it is not hoisted.. As for the live bindings, it is probably not observable in \"normal code\", but in the runtime behaviour it is important when there are import cycles.\n```js\n// a.js (runs first)\nimport b from './b'\nb() // declaration: fine; expression: TypeError\n```\n```js\n// b.js\nimport './a'\nexport default function () {}\n```. Case 1 and Case 2 are essentially identical.\nHowever, an export default (arg) whose argument is not one of the two special cased declaration cases behaves as a let *default* = (arg); export { *default* as default } (with *default* as a \"valid\" identifier for explanation sake).\nThinking about it, this means Case 3 actually should be a TDZ error on the b() call site (as well as my example if the function was not a declaration).. It's harder to see the difference with class, as they are always lexical bindings. Case 2 also should be a TDZ error.\nWith class, the different behavior is seen if the class is reassigned, but that can only be done (assuming spec modules) if it was named to begin with.\n```js\nexport default class Foo {}\nFoo = class Bar {}\n// with 'export default ClassDeclaration': default value is updated\n// with 'export default ClassExpression': ReferenceError\n``. nope,export default class Foo {}is a ClassDeclaration that is valid; that may also be why there is a special case forexport default ClassDeclaration`. \ud83d\ude04 \nThe runtime semantics even take into account the fact that the ClassDeclaration might be named: https://tc39.github.io/ecma262/#sec-exports-runtime-semantics-evaluation\nIf you want to get into how it's \"transpiled\", it would be equivalent to let Foo = class Foo {}; export { Foo as default }.. Oh, right, I got the order of execution for circular imports wrong \ud83d\ude06 \nb finishes executing first before a executes because when b tries to import a a is already executing. If the export default was moved to a instead and referenced from b we'd get the behavior I was describing.. Interestingly, the spec dealt differently with The names of each declaration type. Classes get an implicit name *default* which is renamed at runtime to default; functions are actually anonymous and get a name later.. How should estree be capitalized? estree? EStree? ESTree?. > ~~Why? It will be a lot easier for you to switch between different estree compatible parsers.~~\nThis will make it much easier for users to switch between different estree compatible parsers.. > ~~(Some other estree-compatible es6-parsers include acorn, esprima, espree, flow-parser, ...)~~\nThis doesn't need to be parenthesized, so something like:\nSome other estree-compatible parsers include acorn, esprima, espree, flow-parser, etc.\nAlso, \"estree compatible\" or \"estree-compatible\" should be used consistently.. Comma splice. These probably should be ####. Capitalisation. This might be a breaking change, though it's indeed fixing a bug.... Does flow not infer this, or do you want to assert that it returns a boolean?. A similar change could be made in most of the switch cases, but probably best to not make the diff much larger than it needs to be. The copied keys will be enumerable, but they are not when defined in the class expression.\nOn the other hand, before the change to class expression, they were enumerable anyway, so it might not matter.. Same thing in these two lines here w.r.t. enumerability.. An interesting case would be AwaitExpression -- though that probably just throws in the babylon stage instead, before even becoming an AwaitExpression.\nawait is reserved as a keyword at the top level (so not only in async functions), but only when the source type is module (Note 1 in https://tc39.github.io/ecma262/#prod-AwaitExpression).. The \"correct logic\" would be to parse as script first and module later if that fails, but true, it's a lot more likely to get code that parses as both (or module only) as input. Not a lot of people still have code that only parses in sloppy mode, even if they still use sloppy mode semantics.. The error message if the meta property isn't .meta is confusing (it's hardcoded to mention new). indicates. Comment is confusing; just 46 = '.' should work.. I'd say to use Array.prototype.includes instead...... but that doesn't work on Node 4 :cry:. Is the argument always guaranteed to be Identifier, PrivateName or MemberExpression?\nIf it happens to be neither PrivateName or MemberExpression in this branch it could throw TypeError.. This breaks in Node 4 (do we care?). Lines starting with a [ are pretty scary, regardless of semicolons.\nMaybe save this into a const, or make it the right side of a for of?. This also breaks in Node 4 \ud83d\ude04 . Any objections to adding a devDependency on util.promisify?\nIt's available natively in Node >= 8, the package just shims it if it's missing.. Better to use !==.. .filter(Boolean) would work too but I guess this is clearer. I guess this became redundant now?. Is this if necessary at all? The _do context can only be legally entered if the plugin is enabled to begin with.\nYou do need a block here because you have lexical declarations inside the case, but it should just be regular braces.. Fragments cannot be self-closing, but it might be good to just accept any N.JSXElement to make it easier to test against arbitrary elements.\nAlthough this is an internal use only function, so maybe it doesn't need to be extra ergonomic \ud83e\udd14 . Does Flow support type narrowing similarly to TypeScript? If it does, the return type could be something similar to : object is N.JSXOpeningFragment | N.JSXClosingFragment.. All these $FlowIgnore are scary...... but they were already in place \ud83e\udd37\u200d\u2640\ufe0f . Ah, that's why there are so many $FlowIgnore in the JSX parser. None of these types are written \ud83d\ude06\n(Even if you feel inclined to, don't do it on this PR, of course). This will be very confusing for syntax highlighters for a while.... ",
    "jasonkarns": "No suggestions on the error message, but I'll say that from my perspective, I'm not sure that method or class constructor would have been any more illuminating than the current message. It's absolutely precise, but also not all that helpful to the majority of users. (if they're like me)\nIt would probably take more work (since the error message would need to be contextual) but if going for the most helpful message, one could print exactly what needs changed to make it valid. (At least for function expressions used within property descriptors.)\n. ",
    "rajasekarm": "I can work on this issue. Seems to be good for first contribution.. @thejameskyle @loganfsmyth I can work on this.. I can pick this.. > similar parse error in class fields:\n@mroch can we take this as a separate bug?. Adding failing test case for #772 . closing this. opend new PR #778. ",
    "ForbesLindesay": "@jeromew's benchmarks seem pretty compelling to me.  My main motivation for wanting this was to fix the hack of having to; add characters to wrap the expression, discount those characters from the line & column positions of the resulting AST, dig into the body of the resulting AST to find the actual expression, guard against corner cases like a)( which otherwise cause havoc.\n. @jeromew I don't think we should have denyLineComment in here.  We should either implement that as part of isExpression or not at all, even if there is a performance hit.  In the long run, we will be using babel-code-gen to generate the output and it won't matter if something has line comments in.\nThe denyLineComment option doesn't really make sense as part of babylon.. ",
    "graingert": "I'm sure these files are intentional, but my git automatically does CRLF changes on them \n. warning: CRLF will be replaced by LF in test/fixtures/core/uncategorised/100/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/core/uncategorised/437/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/core/uncategorised/439/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/core/uncategorised/443/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/core/uncategorised/50/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/es2015/uncategorised/22/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/es2015/uncategorised/23/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/esprima/expression-primary/literal/string/migrated_0017.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/esprima/invalid-syntax/migrated_0155/actual.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in test/fixtures/esprima/invalid-syntax/migrated_0159/actual.js.\nThe file will have its original line endings in your working directory.\n. I suspect it would be better to exclude these files in:\n* text eol=lf\n. ",
    "jeanlauliac": "Alright, I realised my mistake, this is not a bug. This is because we have a string embedded within another, so we need to double-escape.\n. ",
    "bxt": "@danez @hzoo Thank you \u263a\ufe0f nice to work with you.\n. ",
    "krainboltgreene": "Does this mean I can automatically load all plugins I have installed? How does it figure out which package is a plugin?\n. ",
    "peey": "Even though this issue isn't fixed, I'm not sure if it should be closed or not. Old decorators plugin is unlikely to be maintained, but this will nice to have as a test case when the support for decorated class properties lands in babylon. \nSame thoughts for #232 . I think this PR is incorrect because\n\n@decorators['foo'] is allowed\nIt doesn't allow decorating computed properties\n\nIf my reading of the spec is correct, then \n\nOnly @foo.bar.baz or @foo.bar.baz(a,b,c) syntax should be allowed where foo,bar, or baz can \nbe any IdentifierName, and\nDecorating computed properties should be legal\n. I forgot to mention that this problem is also present in while and do-while loops\n\n```js\nlet o = {x: \"ex\", y: \"wai\", z: \"zed\"};\nwhile({x, y, ...z} = o) {\n  // code\n}\ndo {\n  //something\n}\nwhile({x, y, ...z} = o);\n``\nBut the same code without therestElement...zworks fine. I think to solve this we should allow arestElementwherever anobjectPattern` exists?. I think ESLint and Babel are very different projects. AFAIK ESLint basically enforces good habits and checks your code style, and Babel basically transforms your future (and experimental) JavaScript to a functionally equivalent old JavaScript. One can be used without the other (though a lot of people do use them both)\nI think this is also why the parsing differs, since it serves different needs. If all this is correct then it'd be really difficult to merge the two projects. \nWhat's your use case here? Did you encounter any problems using Babel and ESLint together? Is it because of efficiency (having to install and configure them separately)? . That's a valid point. We could also name it classAndFieldDecorators like it was named in #236 if we don't mind tying it to that feature (then we'll have to put future decorator proposals like parameter decorators under a different plugin name). @hzoo Though in case stage 3 brings mostly non-breaking changes, we could easily make additions to this new decorators plugin instead of forking logic into a new one.\nSo we should definitely choose a plugin name that's not tied to stage 2. export default @thing\nclass Stuff { }\n@basicdays yep, I think this is the preferred way to do it since decorators and class tail together make up the class, and then you can export that like you export an undecorated class\nI will add a test for this. Changes in latest commit\n1. Add test for exports as @basicdays suggested\n2. Add one test case for class expressions, e.g. var foo = class {}\n3. Add tests to ensure @(bar.baz) and @foo().bar fail as @littledan suggested\n4. Minor fix (use pluginsFromOptions instead of pluginList) for code that detects plugin conflict, and added a test\nI think I'll do the plugin renaming in the end after everything else in the PR is looked at and approved. > @vjeux brought up a good point about whether the start position of the class/function part of the decorator should change? https://twitter.com/Vjeux/status/876213458622005249\n@vjeux trying to find the reason for this in the proposals document. Is it because the productions look like\nClassDeclaration[Yield, Default]:\n    DecoratorList[?Yield]opt class BindingIdentifier[?Yield] ClassTail[?Yield]\n    [+Default]DecoratorList[?Yield]opt class ClassTail[?Yield]\nSo we'd consider ClassDeclaration to start at the begining of the first decorator? (And similarly for class expression and methods) ??. @hzoo I've found an easy way to do it though using this.resetStartLocationFromNode method, so it won't be a problem to add this feature. Just debugging flow errors right now before I update the PR!. Latest changes in last 3 commits: \n - Now all decorated elements (classes and methods) have their start location at the start location of the first decorator\n - Decide to rename to the plugin to decorators2 instead of other variants because\n   1. If more backwards-incompatible changes are introduced in future and then a new plugin may be implemented as decorators3\n   2. Can rename it to standardDecorators at zero cost later when the proposal is at stage 4\nThese two edits have caused a lot of minor changes to a lot of files so it might be a pain to review. The only logic changes to source folder is by this commit in the file  src/parser/statement.js and everything else is renaming / test changes and I don't think would need review.\nI also can't figure out how to increase coverage, the uncovered lines aren't making any sense to me (they existed in codebase before this PR). So if that's not a problem then I think we're good to merge (perhaps after latest changes relating to start location have been reviewed?). @hzoo do note that this isn't as big a change as the previous PR was so it wouldn't need as many reviews (in fact we could do with 2-3 reviews just like for any standard bugfix PR). . We will have to explain this in documentation or some other way. \nthe problem is that with classProperties enabled and due to the fact that the computed property isn't considered a part of the decorator, we can't really tell if the code is trying to access decorator's member or trying to decorate a computed class property. \nSo in this example it thinks that [bizz] is a class property.\nIf you disable class properties altogether you will get a syntax error at abc since it is expecting opening bracket right after the method name [bizz]. good idea. Yep, I think that's better too. Will make changes and push it. ",
    "pavelkucera": "Hello, any update on this? Is it intended behaviour or a bug? Thank you.. ",
    "fmoo": "I ended up using this workaround since my arrow function was autobound on an ES6 class:\njs\nclass Foo {\n    _test = async function<T>(fn: () => T): Promise<T> {\n        return fn();\n    }.bind(this);\n    // ...\n}. ",
    "chicoxyzzy": "Please don't forget that spec still can have breaking changes so we probably need to think about naming before publish. This is unlikely will affect parser but anyway..\nbabel-plugin-transform-decorators-legacy2? \ud83d\ude04 . > The bug seems related to the React preset.\nLooks like the problem is in Flow syntax plugin. What about Node 5 which is also deprecated?. I think we can close this issue :). Possibly we also should add engines field to package.json. was it added mistakenly?. npm 2.14.7 is a version which comes with Node 4 LTS Argon. Node 4 versions proir to 4.2 are not maintained. So I suppose this should be than\n{\n  \"node\": \">=4.2\",\n  \"npm\": \">=2.14.7\"\n}. ",
    "ryanjduffy": "If the plan is to drop support for node < 4 anyway, what do you think of including an inline copy of the polyfill (the fn without updating String, that is)? The polyfill code hasn't been updated in 2.5 years so there's not much risk of getting out of sync between now and when you'd be able to remove it. Seems like a safe and minimally intrusive alternative.. Went ahead and made a copy of the polyfill and dropped the dependency. Made the necessary changes to adapt it to the babylon lint settings and avoid updating String. Let me know what you think.\ncc: @mathiasbynens - fyi on copying String.fromcodepoint (and thx for the polyfill!).. ",
    "jlongster": "Just noticed that it happens generally with empty expressions, regardless if it has a comment or not. So parsing <div>{}</div> has the same bug.. Sure, need to learn how to add a test first so will take me a bit.. @hzoo The current tests seem to be failing:\n```\n% npm run test-only\n\nbabylon@6.14.1 test-only /Users/james/projects/babylon\nava\n\n2343 passed\n  1 failed\njsx/basic/10\n  Error: /Users/james/projects/babylon/test/fixtures/jsx/basic/10/actual.js: [\n  {\n    \"type\": \"CommentBlock\",\n    \"value\": \" this is a comment \",\n    \"start\": 4,\n    \"end\": 27,\n    \"loc\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 4\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 27\n      }\n    }\n  }\n] !== null (leadingComments/expression/0/children/expression/0/body/program)\n    runTest (test/utils/runFixtureTests.js:62:13)\n    Test.fn (test/utils/runFixtureTests.js:14:22)\n```\nThis is on the latest master without my changes. I see this failure in my CI too. I suppose I can fix it along with my PR, but is that expected? I don't see that failure in other PRs, but I don't understand why I can reproduce it by checking out master without my changes.. That makes sense, I figured it was something like that! No worries, keeping docs up-to-date and making these kinds of things takes a huge amount of time so I don't really mind figuring some things out.. Done!. Any chance this could be merged?. ",
    "fivetanley": "right, this is just sort of a double take i do every time i make this mistake. it's not always with functions; there's usually some confusion around why this is valid:\njs\nexport const Foo = 'hi';\nbut this is not:\njs\nexport default const Foo = 'hi';\nI get that it's a spec thing and dictated by TC39's spec, but i think we could help newcomers and experienced devs alike move past this error.. ",
    "vjeux": "@mroch this is also an issue with flow, would be nice to get it fixed there as well :). cc @hzoo . I hit this in a unit test on prettier ( https://github.com/jlongster/prettier/blob/master/tests/strings/strings.js#L4 ). I don't expect it to cause trouble in real code.. Omg, thanks for the super quick fix!. This is super exciting! Do not hesitate to open up issues on the prettier repo if you see anything that isn't printed in a way that you would have written code. I want to know about it :). This was found with @lydell fuzzer applied on prettier if you are curious :)\nhttps://github.com/prettier/prettier/pull/1129#issuecomment-292627828. Yay, thanks!. There's probably a lot of low hanging fruit for making prettier fast by the way. Performance has been okay for our use case so far so we didn't look into it at all.\nBut, it's likely never going to be as fast as the current printer since it has to do more work.. Why would you use prettier if you're not going to use its 80-columns formatting abilities? It seems like it defeats the purpose of the tool.\nAlso, I'm not really sure that the overhead of prettier is really a good idea. I don't think that printing code in a human-looking way is worth spending more time. You pay the cost of printing every single time, you only look at the output once in a while.. Oh I see. I didn't consider the overhead of maintenance.. Would be awesome if you could add https://github.com/prettier/prettier/issues/2194#issuecomment-309499002 as a test case. Thanks so much for fixing a bug before it was even discovered in prettier!. @nicolo-ribaudo awesome, thanks a ton! I can't wait for it to ship!. Fyi, this bug was also found by a Facebook employee during a conversion. So it's at least impacting two people :). All the other parent nodes include the location of the children node except for decorators. We use this property in prettier to attach comments by going down the ast looking at ranges, but it breaks for decorators. If you could fix it that would remove one hack we have to do.. I'd be super happy indeed :p. I had no idea people would chain this kind of calls! We could support it in prettier but that would add quite a bit of complexity. Since you are already writing them each on their own line, I think that it would be better to just rewrite is as\njs\nthis.inMethod = false;\nthis.inFunction = false;\n// .... fyi, you can use // @prettier-ignore in order to print it as is and not have every argument expanded in a single line.. This is not intended, I just created an issue for it: https://github.com/prettier/prettier/issues/867. This will be fixed in the next release: https://github.com/prettier/prettier/pull/860. I opened https://github.com/prettier/prettier/issues/868 as it looks a bit weird. feel free to add // @prettier-ignore just before if you want to keep formatting for some special cases.. Yeah, this is pretty impressive!\nFor this one, we looked at github search results and it seems like the majority of js code uses lowercase. Also, Chrome devtools forces lowercase.\n\n. ",
    "diervo": "Someone needs to help me figure out what to do with the one test failure.. I have fixed the test issue due to an less descriptive message in the test that runs id #= 1, but in order to do that I added a check on parseMaybeAssign ( see code changes here https://github.com/babel/babylon/pull/260/commits/beef2ef8f4cfaec19b35c44c5435e314889717d8).\nAlthough that does work, it prevents for example to use the decorators since it will throw because parseMaybeAssign is used inside decorators as well. The best solution I found was to add in parseMaybeAssign another flag to detect when to raise the error, but I don't like it.\nI'm not very happy with this change.\nThoughts?. Alright this PR has been dead for way too long, and I promised @littledan I will try to land it before the next TC39 meeting :)\nI fixed the couple outstanding test issues and added a bunch of specific tests for private fields.\nThere are two small details based on the feedback here and the conversation on estree #154:\nFirst is about internal naming convention for ClassProperty and ClassPrivateProperty. I just named the new Node based on the previous naming convention for now. Given than the committee was strongly in favor of unifying both proposals going forward, we can normalize the names when both proposals reach Stage3 (I volunteer to do the work).\nThe second issue is about wether PrivateName contains in the name field a string or an Identifier (more specifically a namedIdentifier). Again, this is mostly implementation details (although this one matters towards the integration with babel and the transforms). I will defer to @littledan to weight on this one.\nIMHO any of the previous points shouldn't be blocking this PR, otherwise we will continue to be stacked without being able to get feedback from developers and push this hopefully forward.\n@loganfsmyth @hzoo Can we do another pass at this PR, and unless there are other concerns, merge it?. @littledan suggestion done!\n@hzoo This code coverage thing, doesn't make too much sense to me...\nWhat is remaining to merge this PR?. @hzoo Ready to be versioned in the future :). @hzoo Who else I need to bribe to get this in? :) I will keep poking!. @loganfsmyth with this we should be good to go! :). Orthogonal classes have a lot of open questions and is not likely to be advancing any time soon.\nNow regarding public and private fields, let's not worry about naming or final semantics until both proposals move forward.. Since the code for classBody is a bit messy, as part of the \"unification\" I want to clean all that up.\nMoreover, for internal renaming I would love to have feedback on the following (mostly implementation details):\n1) Renaming classProperty and classPrivateProperty to: classField and classPrivateField\n    - Same for the internal AST nodes (used in the plugins).\n2) Potentially unifying all to have just one plugin for both cases maybe classFields\n3) Revisit wether the property name inside is a string or an Identifier.\n    - Transformer plugins look very odd since you will have to path.skip() to avoid the internal identifier, just look odd.\n@hzoo Will try to work on all of this over the weekend.\n//cc @loganfsmyth 3) is just for you :) here is an example on why I want to change it:\njs\nfunction privateStatePlugin () {\n  return {\n    visitor: {\n      Program() {\n      },\n      ClassPrivateProperty(path) {\n        // We want to rename this one\n      },\n      PrivateName(path) {\n         // IMHO most of the times, you want to skip here\n         // path.node.name == Identifier\n         // otherwise you will get the Identifier several times, sometimes unexpectedly\n         path.skip();       \n      },\n      Identifier(path) {\n        //console.log('\\n>>>>> ID ', path.node); // Nothing new here.\n      }\n    },\n  };\n}\n. @littledan not sure I'm following, what is likely to change?. I will try to give it a run over the weekend.. It shouldn't the separator is only allowed in between numeric values.. @littledan should review the expression, we might be allowing more use cases than the spec intended. @nicolo-ribaudo Not for comma separated statements, which is what I'm refering here.\njs\nimport { a, b, c } from \"x\" // location do not include comma\nvar x = 1, b = 2, z = 3; // location do not include comma\nWill revisit, and will try to to make it consistent, but it might be tricky.. Ok based on the comments I refactor pretty much the whole thing (sorry I had to rebase for simplicity of sake):\n- Added more tests\n- All locations should be correct now (@nicolo-ribaudo)\n- Refactor for better parse errors when we a re in the comma separated case.\n@jridgewell We need to know whether or not we are in a \"comma-separated\" statement inside parseClassMember to check for specific unexpected characters depending on the case (method vs. prop). @nicolo-ribaudo \nA and C are equivalent.\nDecorators should be applied to all the comma separated fields (keep me honest @littledan)\n@peey should revisit this logic once this PR lands in master.. @littledan @nicolo-ribaudo I think you are both right, but this will require some interesting refactor, and probably a somewhat big breaking change on the transformers for publicFields.\nIs everyone ok then moving to the following productions (analogous to VariableDeclaration):\nFieldDefinition:\n  +decorators: []\n  +definitions: [PublicField | PrivateField]\nBasically any public/private fields will be enclosed by FieldDefinition, and no more decorators in the Fields itself.\nIf we do this, we might as well refactor the whole ClassBody to make it future proof as @jridgewell was suggested to do in #609.\nIf you give me thumbs up I can give it a run today, otherwise will have to wait til next weekend most likely or someone else can take over.\nThoughts?. @nicolo-ribaudo The problem is not creating a new plugin, is the fact that we are changing the shape of the Nodes (for example no longer ClassProperty will have decorators, or potentially a change on the node name ClassProperty =>PublicField ) that transformers expect.\nAnd I'm very reluctant to have a fork in the code that generate different Node types based on the syntax plugin that is enabled, specially since we are working in babel7 where we have more room for error. If we do this changes, my vote is to do it in a non backward compatibility way.\n@hzoo what you think?\n. Closing this since comma separated proposal was dropped from the original classField proposal and will be advancing separately.. @xtuc @jridgewell \nWe should wait for merging both plugins until publicFields get to Stage3, which hopefully will happen in the next TC39 meeting (in about a month). \nThere is still some debate on the committee on wether this.#x will be required and so let's wait for the final version.\nDecorators might be another moving piece that is very intertwined, but I guess semantics are kind of stable? so its mostly implementation details from a babylon point of view.\nLastly, just an FYI I think @littledan wants to present private methods, so let's see which Stage that lands... :). @littledan I was not talking about this PR, this is good to go, the refactor to combine public/private fields is what Im saying to postpone til we figure out the this.#x syntax.. Im following the naming convention for publicProps (fields => props), but I think for this one you are right.\nAs a side note, we agreed that we will reconcile the naming for a mayor version.. I will test it and probably I should write a test for it.. Apart from dan's comments about grammar, @loganfsmyth, I though it was cleaner (at least while in stage2) to make additive changes when possible rather than mutating existing nodes, like adding a private attribute for this case. We can recondile in the next mayor version, once public fields, private fields et al, are in +Stage3. I believe semantics are different. \nIt doesn't make sense to have an Identifier that has its private attribute to true, first because its only available in the scope of a ClassBody, seconds because its meaning of it is different on the spec.\n. Yep will update the PR. That I like better. @littledan What do you think?. That's correct. Have you created a test for this?. Good call.. Will add more tests.. I don't think we can completely get away without knowing we are within the context of a coma separated production due to ASI and explicit checks for ;\nIm revising it nonetheless.. PR is pending to be merged: #608. ",
    "littledan": "I'm fine with the current code. My only nitpick would be, maybe there doesn't need to be a 'liberal' parameter, as private names are always liberal.. For context, at the TC39 meeting where this proposal was presented, there were a couple concerns raised about the scope of the proposal, one syntactic and one semantic. I've filed two issues to discuss these issues. This is a Stage 1 feature and subject to change!. Note that Waldemar Horwat pointed out an ambiguity in the grammar, that because we can have static fields named static, set or get, it takes some degree of lookahead to tell whether something is a field declaration or a method definition. From some simple tests, it looks like Babel already handles this sort of case correctly already; I just wanted to mention that this is an area that is likely to change.. Well, I'm not sure exactly, I have sent an email to Waldemar to clarify. Now that I look at it some more, I'm not sure what the ambiguity is.. I heard back from Waldemar; it seems the issue was just a typo in the proposal, where it rendered wrong. But declarations end in a semicolon (and ASI fixes it). This was a recently introduced error in the spec formatting, so no need to hold anything up!. @bounceme in and instanceof are allowed as both public and private field names, as any IdentifierName can be used as a public or private field name (though if you use get, set or static, you may need to place more semicolons than you would otherwise).. @diervo Looks like the key for a ClassMethod is an Expression. This should be the same as whatever the key of a class method is. With hindsight, Babel might've gone for a more restrictive choice that more closely encodes the grammar, so that transforms can operate with a little more confidence and determinism, but Expression is a reasonable choice that expresses the possibilities.. @wdhorton Let me know if you want any help with reviews, interpreting the spec, etc!. @diervo Agree with what you're saying about equivalency (except it matters how many times dec is evaluated--imagine it's a getter on the global object, or inside a with). A decorator applying to multiple comma-separated elements is the entire reason comma-separated elements were proposed by @wycats; maybe he can provide more clarification.\nSome test ideas:\n- Static fields that are comma-separated: class C { static x, y }\n- Invalid to put a comma between two methods class C { a(){}, b() {} }\n- Mixed public and private fields that are comma-separated class C { #x, y }\ncc @bakkot . If this is for Babel 7, could the legacy decorator syntax and transform also be updated to the new AST as well? It seems like the new form you're proposing is simply more general. Are there a lot of transforms out there which depend on the current shape of decorators?. If someone wants to reopen the PR and pick it up, you can find the new proposal at https://github.com/littledan/proposal-comma-separated-fields . The default class fields flag needs to prohibit comma separation, with a separate flag to permit it; I am not sure whether this flag behavior should be implemented at the babylon or transform level.. This looks great. I don't see why it should wait until Stage 3 to land--I presented static private fields to the committee in the May meeting with this syntax and didn't hear any concerns. I think @hzoo is doing a lot of work to communicate to users that Stage 2 proposals are unstable.\nFor decorators, we unfortunately don't have spec text yet which combines it with fields; hope to fix that soon. Private methods haven't been presented yet, so I guess they will wait a bit longer to add to Babel.. Note that there is a possible follow-on proposal to reintroduce the shorthand at https://github.com/littledan/proposal-private-shorthand. new.target would always be undefined in any of these cases, just like in a method.. Would it make sense to add a test that verifies that, when you execute the code, you actually get undefined for new.target in these cases?. @jridgewell Is that what this code does? In the spec I wrote for ??, it parses exactly like ||, and in particular && groups more tightly.. @jridgewell I thought it would make sense to be exactly the same because people are likely to be upgrading their || to ??, and why change anything? If I were to change it, it would be to be looser than ||. Seems like this deserves a bug to discuss further.. Opened https://github.com/tc39-transfer/proposal-nullish-coalescing/issues/15 to discuss this question; for now, the spec is hot-swappable like that.. I agree that this should be supported. The current spec text supports it as well. Make sure to test decorated anonymous default class exports, which are specifically also supported. cc @wycats @bterlson. Should this be parsePropertyName?. Will this ignore whitespace? In the current spec, whitespace between the # and the IdentifierName is not allowed (though Waldemar proposed that it be allowed).. The grammar of PrivateNames is pretty different from Identifiers, in terms of where they can be used. It's been suggested that the grammar in the specification be refactored to not call it PrivateName but more like PrivateReference, consisting of the two individual tokens. To me, it makes sense that they are treated differently from identifiers.. I'm not talking about naming convention, I'm talking about grammar. The grammar for Identifier is more restrictive than IdentifierName/property names, in that it doesn't allow keywords. The grammar for private state specifically allows keywords as the name (just like ordinary properties).. Well, thinking of unquoted property names or private field names as Identifiers isn't all that intuitive for me--they are more like strings with a prettier syntax. But if this is just an AST and the rest of the system works this way, it seems fine. I agree that these are somewhat analogous to property names, as long as they are marked specially.. That public field/method definition on the third line should throw a ReferenceError at parse time, as the private name is unresolvable. But, yes, totally fine from a narrow grammar perspective, if Babylon doesn't enforce Static Semantics: Early Errors.. It'd be nice to break this out into a separate test file, so you can check that each of them is a syntax error.. Good to have a test for this; I hope we can remove it soon :). #4 should be a syntax error, as # needs to be followed by an IdentifierName.\\\n[this.#x] should be a ReferenceError when the class declaration is executed, as #x is \"in scope\" as a name during the evaluation of computed property names, but then #x cannot possibly be present on this.. Maybe the \"value\" (and possibly \"rawValue\", but I don't know much about what that field is for) fields should contain a string with the value of the BigInt as a decimal number (taking care of other bases). Using a Number as the value seems suboptimal as it'll be rounded; no one should use such a value.. bigInt seems right for the plugin if the convention is camelCase, while bigint is a pretty reasonable name for a tag IMO, as typeof 1n is \"bigint\".. None of these parseInt calls are appropriate if isBigInt, as they will round away part of the answer.. This is a great test; you could also add tests for cases like @(bar.baz) and @foo().bar, which one might expect to work. The grammar is extremely restrictive here, and you seem to implement the restrictions well (so well that I had to go back to the spec and ask, is it really that restrictive? yes).. Should Babylon handle converting this binary value into a decimal value, or should the transform be responsible for that/. Oh that makes sense; I didn't realize this was typically handled in a separate transform.\nDoes it make sense to have the 'value' field at all, though? Why bother, when you have the rawValue?. Have comma-separated field declarations landed yet? If so, it'd be nice to have tests that demonstrate that you can mix static public and private field declarations in a comma-separated list.. This will be nice with ?? :). I don't think the current draft spec has this logic. I couldn't figure out how to put it into the grammar. Right now, x |> y => z would be a syntax error. But it's clearly useful--i'll think more about the spec.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #260 into master will decrease coverage by 0.09%.\nThe diff coverage is 97.05%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #260     +/-\n=========================================\n- Coverage   98.27%   98.18%   -0.1%   \n=========================================\n  Files          22       22           \n  Lines        3530     3572     +42   \n  Branches      979      992     +13   \n=========================================\n+ Hits         3469     3507     +38   \n- Misses         22       24      +2   \n- Partials       39       41      +2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.34% <26.47%> (-0.71%) | :arrow_down: |\n| #babylon | 96.94% <97.05%> (-0.17%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/lval.js | 98.03% <100%> (+0.02%) | :arrow_up: |\n| src/tokenizer/index.js | 98.37% <100%> (+0.01%) | :arrow_up: |\n| src/parser/statement.js | 99.1% <100%> (+0.01%) | :arrow_up: |\n| src/parser/expression.js | 96.84% <91.66%> (-0.55%) | :arrow_down: |\n| src/plugins/flow.js | 98.39% <0%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ef964e...547cde0. Read the comment docs.\n. # Codecov Report\nMerging #344 into master will decrease coverage by 16.66%.\nThe diff coverage is 100%.\n\n```diff\n@@             Coverage Diff             @@\nmaster     #344       +/-\n===========================================\n- Coverage   98.25%   81.59%   -16.67%   \n===========================================\n  Files          20       20             \n  Lines        3503     3499        -4   \n  Branches      927      927             \n===========================================\n- Hits         3442     2855      -587   \n- Misses         22      443      +421   \n- Partials       39      201      +162\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.59% <100%> (-0.03%) | :arrow_down: |\n| #babylon | ? | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/jsx/index.js | 79.32% <100%> (-18.46%) | :arrow_down: |\n| src/plugins/estree.js | 2.96% <0%> (-96.3%) | :arrow_down: |\n| src/index.js | 50% <0%> (-50%) | :arrow_down: |\n| src/parser/lval.js | 80.27% <0%> (-18.37%) | :arrow_down: |\n| src/tokenizer/index.js | 82.64% <0%> (-15.71%) | :arrow_down: |\n| src/parser/statement.js | 83.43% <0%> (-15.65%) | :arrow_down: |\n| src/parser/index.js | 86.48% <0%> (-13.52%) | :arrow_down: |\n| src/parser/expression.js | 84.92% <0%> (-12.47%) | :arrow_down: |\n| src/util/identifier.js | 88.57% <0%> (-11.43%) | :arrow_down: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0f98279...650adde. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff            @@\nmaster    #361   +/-\n========================================\n  Coverage          ?   97.8%         \n========================================\n  Files             ?      21         \n  Lines             ?    3504         \n  Branches          ?     925         \n========================================\n  Hits              ?    3427         \n  Misses            ?      29         \n  Partials          ?      48\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...3d5e981. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@57aacea). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #366   +/-\n=========================================\n  Coverage          ?   97.85%         \n=========================================\n  Files             ?       21         \n  Lines             ?     3495         \n  Branches          ?      927         \n=========================================\n  Hits              ?     3420         \n  Misses            ?       29         \n  Partials          ?       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/node.js | 100% <100%> (\u00f8) | |\n| src/plugins/flow.js | 98.08% <100%> (\u00f8) | |\n| src/parser/expression.js | 97.34% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57aacea...b5f91c9. Read the comment docs.. # Codecov Report\nMerging #368 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #368      +/-\n==========================================\n+ Coverage   97.85%   97.85%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3495     3498       +3   \n  Branches      927      927            \n==========================================\n+ Hits         3420     3423       +3   \n  Misses         29       29            \n  Partials       46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.25% <100%> (+0.01%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ef00a6...43cf3d0. Read the comment docs.. # Codecov Report\nMerging #371 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #371   +/-\n=======================================\n  Coverage   97.91%   97.91%         \n=======================================\n  Files          21       21         \n  Lines        3500     3500         \n  Branches      928      928         \n=======================================\n  Hits         3427     3427         \n  Misses         28       28         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 561d4f7...db635a2. Read the comment docs.. # Codecov Report\nMerging #377 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #377      +/-\n==========================================\n+ Coverage   97.88%   97.88%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3495     3501       +6   \n  Branches      926      929       +3   \n==========================================\n+ Hits         3421     3427       +6   \n  Misses         28       28            \n  Partials       46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 97.96% <100%> (+0.01%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2dd57d1...9336f3b. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e74783). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #380   +/-\n=========================================\n  Coverage          ?   97.88%         \n=========================================\n  Files             ?       21         \n  Lines             ?     3495         \n  Branches          ?      926         \n=========================================\n  Hits              ?     3421         \n  Misses            ?       28         \n  Partials          ?       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e74783...4d97006. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e74783). Click here to learn what that means.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #381   +/-\n=========================================\n  Coverage          ?   97.88%         \n=========================================\n  Files             ?       21         \n  Lines             ?     3495         \n  Branches          ?      926         \n=========================================\n  Hits              ?     3421         \n  Misses            ?       28         \n  Partials          ?       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e74783...491c4aa. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e74783). Click here to learn what that means.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #383   +/-\n=========================================\n  Coverage          ?   97.88%         \n=========================================\n  Files             ?       21         \n  Lines             ?     3498         \n  Branches          ?      929         \n=========================================\n  Hits              ?     3424         \n  Misses            ?       28         \n  Partials          ?       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | |\n| src/parser/expression.js | 97.35% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e74783...c8e0d01. Read the comment docs.. # Codecov Report\nMerging #384 into 7.0 will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\n7.0    #384      +/-\n=========================================\n+ Coverage   97.88%   97.9%   +0.02%   \n=========================================\n  Files          20      20            \n  Lines        3444    3443       -1   \n  Branches      910     910            \n=========================================\n  Hits         3371    3371            \n  Misses         30      30            \n+ Partials       43      42       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/lval.js | 98.63% <100%> (-0.01%) | :x: |\n| src/parser/expression.js | 97.5% <100%> (+0.15%) | :white_check_mark: |\n| src/parser/statement.js | 97.92% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fe2d2a9...9d78cff. Read the comment docs.. # Codecov Report\nMerging #386 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #386   +/-\n=======================================\n  Coverage   97.88%   97.88%         \n=======================================\n  Files          21       21         \n  Lines        3495     3495         \n  Branches      926      926         \n=======================================\n  Hits         3421     3421         \n  Misses         28       28         \n  Partials       46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.34% <100%> (\u00f8) | :white_check_mark: |\n| src/plugins/flow.js | 98.08% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a5d93f...08ab5a0. Read the comment docs.. # Codecov Report\nMerging #390 into master will increase coverage by 0.07%.\nThe diff coverage is 98.41%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #390      +/-\n==========================================\n+ Coverage   98.14%   98.21%   +0.07%   \n==========================================\n  Files          22       22            \n  Lines        3663     3988     +325   \n  Branches     1024     1219     +195   \n==========================================\n+ Hits         3595     3917     +322   \n- Misses         25       28       +3   \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.94% <72.15%> (+1.28%) | :arrow_up: |\n| #babylon | 96.99% <97.81%> (+0.15%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/jsx/xhtml.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.47% <\u00f8> (+0.07%) | :arrow_up: |\n| src/parser/base.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/options.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/util/location.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/location.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/tokenizer/types.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/util.js | 90.62% <100%> (+0.62%) | :arrow_up: |\n| src/parser/node.js | 96.66% <100%> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.2% <100%> (+0.08%) | :arrow_up: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc87d99...b439cbd. Read the comment docs.\n. # Codecov Report\nMerging #391 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\n7.0     #391   +/-\n=======================================\n  Coverage   97.94%   97.94%         \n=======================================\n  Files          20       20         \n  Lines        3458     3458         \n  Branches      919      919         \n=======================================\n  Hits         3387     3387         \n  Misses         29       29         \n  Partials       42       42\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 265d2c1...dd20270. Read the comment docs.. # Codecov Report\nMerging #393 into master will decrease coverage by 0.13%.\nThe diff coverage is 98.48%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #393      +/-\n==========================================\n- Coverage   98.26%   98.13%   -0.14%   \n==========================================\n  Files          20       20            \n  Lines        3511     3478      -33   \n  Branches      934      936       +2   \n==========================================\n- Hits         3450     3413      -37   \n- Misses         22       25       +3   \n- Partials       39       40       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.2% <85.9%> (-0.14%) | :arrow_down: |\n| #babylon | 96.89% <98.04%> (-0.12%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util/identifier.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/options.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.35% <100%> (\u00f8) | :arrow_up: |\n| src/parser/location.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/comments.js | 96.07% <100%> (-0.08%) | :arrow_down: |\n| src/parser/statement.js | 99.07% <100%> (\u00f8) | :arrow_up: |\n| src/parser/node.js | 96.87% <100%> (-0.19%) | :arrow_down: |\n| src/parser/lval.js | 98.63% <100%> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/tokenizer/types.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 8 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c07efb...0dd3b8a. Read the comment docs.. # Codecov Report\nMerging #395 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\n7.0     #395   +/-\n=======================================\n  Coverage   97.94%   97.94%         \n=======================================\n  Files          20       20         \n  Lines        3458     3458         \n  Branches      919      919         \n=======================================\n  Hits         3387     3387         \n  Misses         29       29         \n  Partials       42       42\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 12abc20...bf1df86. Read the comment docs.. # Codecov Report\nMerging #401 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #401   +/-\n=======================================\n  Coverage   97.88%   97.88%         \n=======================================\n  Files          21       21         \n  Lines        3498     3498         \n  Branches      929      929         \n=======================================\n  Hits         3424     3424         \n  Misses         28       28         \n  Partials       46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b7da50...9796461. Read the comment docs.. # Codecov Report\nMerging #402 into 7.0 will increase coverage by 0.18%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\n7.0     #402      +/-\n==========================================\n+ Coverage   97.94%   98.13%   +0.18%   \n==========================================\n  Files          20       21       +1   \n  Lines        3458     4174     +716   \n  Branches      919     1245     +326   \n==========================================\n+ Hits         3387     4096     +709   \n- Misses         29       31       +2   \n- Partials       42       47       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.55% <100%> (+0.03%) | :white_check_mark: |\n| src/parser/lval.js | 98.4% <0%> (-0.24%) | :x: |\n| src/parser/statement.js | 98.18% <0%> (-0.09%) | :x: |\n| src/options.js | 100% <0%> (\u00f8) | :white_check_mark: |\n| src/parser/index.js | 100% <0%> (\u00f8) | :white_check_mark: |\n| src/plugins/jsx/fromCodePoint.js | 82.75% <0%> (\u00f8) | |\n| src/plugins/jsx/index.js | 98.4% <0%> (+0.62%) | :white_check_mark: |\n| src/parser/node.js | 97.72% <0%> (+0.66%) | :white_check_mark: |\n| src/plugins/flow.js | 98.44% <0%> (+0.97%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e0dc7a...c71fb8a. Read the comment docs.. # Codecov Report\nMerging #403 into 7.0 will decrease coverage by -1.13%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\n7.0     #403      +/-\n==========================================\n- Coverage   97.94%   96.82%   -1.13%   \n==========================================\n  Files          20       20            \n  Lines        3461     3461            \n  Branches      920      920            \n==========================================\n- Hits         3390     3351      -39   \n- Misses         29       58      +29   \n- Partials       42       52      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.8% <0%> (-3.72%) | :x: |\n| src/tokenizer/state.js | 97.14% <0%> (-2.86%) | :x: |\n| src/parser/index.js | 97.29% <0%> (-2.71%) | :x: |\n| src/tokenizer/index.js | 97.19% <0%> (-1.08%) | :x: |\n| src/parser/statement.js | 97.31% <0%> (-0.95%) | :x: |\n| src/plugins/flow.js | 97.22% <0%> (-0.25%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7a6d495...42b4428. Read the comment docs.. # Codecov Report\nMerging #403 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\n7.0     #403   +/-\n=======================================\n  Coverage   97.94%   97.94%         \n=======================================\n  Files          20       20         \n  Lines        3461     3461         \n  Branches      920      920         \n=======================================\n  Hits         3390     3390         \n  Misses         29       29         \n  Partials       42       42\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7a6d495...beb07bf. Read the comment docs.. # Codecov Report\nMerging #405 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff            @@\nmaster   #405      +/-\n========================================\n+ Coverage      97%    97%   +<.01%   \n========================================\n  Files          20     20            \n  Lines        3503   3504       +1   \n  Branches      927    927            \n========================================\n+ Hits         3398   3399       +1   \n  Misses         54     54            \n  Partials       51     51\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 97.22% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af5fdc2...baa89eb. Read the comment docs.. # Codecov Report\nMerging #406 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #406   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a813dc...ca8f536. Read the comment docs.. # Codecov Report\nMerging #407 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #407   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a813dc...41725fe. Read the comment docs.. # Codecov Report\nMerging #408 into 7.0 will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #408   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.52% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a813dc...fa16be3. Read the comment docs.. # Codecov Report\nMerging #409 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #409   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a813dc...0505e6e. Read the comment docs.. # Codecov Report\nMerging #410 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #410   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a538643...45d7e29. Read the comment docs.. # Codecov Report\nMerging #411 into 7.0 will decrease coverage by 1.12%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\n7.0     #411      +/-\n=========================================\n- Coverage   98.1%   96.98%   -1.13%   \n=========================================\n  Files         20       20            \n  Lines       3478     3478            \n  Branches     919      919            \n=========================================\n- Hits        3412     3373      -39   \n- Misses        25       54      +29   \n- Partials      41       51      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.8% <0%> (-3.72%) | :x: |\n| src/tokenizer/state.js | 97.14% <0%> (-2.86%) | :x: |\n| src/parser/index.js | 97.29% <0%> (-2.71%) | :x: |\n| src/tokenizer/index.js | 97.19% <0%> (-1.08%) | :x: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :x: |\n| src/plugins/flow.js | 97.22% <0%> (-0.25%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873bf28...5088c3b. Read the comment docs.. # Codecov Report\nMerging #411 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #411   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873bf28...5088c3b. Read the comment docs.. # Codecov Report\nMerging #412 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #412   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873bf28...f386eba. Read the comment docs.. # Codecov Report\nMerging #415 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #415   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9690daa...1c4bd9e. Read the comment docs.. # Codecov Report\nMerging #417 into 7.0 will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@          Coverage Diff          @@\n7.0    #417   +/-\n=====================================\n  Coverage   98.1%   98.1%         \n=====================================\n  Files         20      20         \n  Lines       3478    3478         \n  Branches     919     919         \n=====================================\n  Hits        3412    3412         \n  Misses        25      25         \n  Partials      41      41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9690daa...bddd3c2. Read the comment docs.. # Codecov Report\nMerging #418 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #418      +/-\n==========================================\n+ Coverage   98.25%   98.26%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3504     3513       +9   \n  Branches      927      930       +3   \n==========================================\n+ Hits         3443     3452       +9   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.81% <61.53%> (-0.22%) | :arrow_down: |\n| #babylon | 97.01% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.21% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f3123c...e2fa80f. Read the comment docs.. # Codecov Report\nMerging #419 into 7.0 will increase coverage by 0.14%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\n7.0     #419      +/-\n=========================================\n+ Coverage   98.1%   98.24%   +0.14%   \n=========================================\n  Files         20       20            \n  Lines       3478     3478            \n  Branches     919      919            \n=========================================\n+ Hits        3412     3417       +5   \n+ Misses        25       22       -3   \n+ Partials      41       39       -2\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.11% <\u00f8> (?) | |\n| #babylon | 96.98% <\u00f8> (?) | |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.36% <0%> (-0.16%) | :arrow_down: |\n| src/parser/statement.js | 99.07% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.18% <0%> (+0.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9690daa...524e34d. Read the comment docs.. # Codecov Report\nMerging #422 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #422   +/-\n=======================================\n  Coverage   98.06%   98.06%         \n=======================================\n  Files          21       21         \n  Lines        3519     3519         \n  Branches      929      929         \n=======================================\n  Hits         3451     3451         \n  Misses         24       24         \n  Partials       44       44\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c88cfe...13155a4. Read the comment docs.. # Codecov Report\nMerging #424 into 7.0 will increase coverage by 0.01%.\nThe diff coverage is 98.27%.\n\n\n```diff\n@@            Coverage Diff             @@\n7.0     #424      +/-\n==========================================\n+ Coverage   98.24%   98.25%   +0.01%   \n==========================================\n  Files          20       20            \n  Lines        3478     3503      +25   \n  Branches      919      926       +7   \n==========================================\n+ Hits         3417     3442      +25   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.04% <74.13%> (-0.08%) | :arrow_down: |\n| #babylon | 97% <98.27%> (+0.02%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.19% <100%> (\u00f8) | :arrow_up: |\n| src/parser/lval.js | 98.63% <100%> (-0.01%) | :arrow_down: |\n| src/parser/expression.js | 97.38% <100%> (+0.01%) | :arrow_up: |\n| src/tokenizer/index.js | 98.34% <97.29%> (+0.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f048b4...2e8acfa. Read the comment docs.. # Codecov Report\nMerging #425 into master will increase coverage by 1.05%.\nThe diff coverage is 93.65%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #425      +/-\n==========================================\n+ Coverage      97%   98.05%   +1.05%   \n==========================================\n  Files          20       20            \n  Lines        3503     3549      +46   \n  Branches      927      945      +18   \n==========================================\n+ Hits         3398     3480      +82   \n+ Misses         54       26      -28   \n+ Partials       51       43       -8\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.65% <68.25%> (?) | |\n| #babylon | 96.81% <93.65%> (-0.19%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/lval.js | 98.65% <100%> (+0.01%) | :arrow_up: |\n| src/parser/expression.js | 96.87% <100%> (+3.02%) | :arrow_up: |\n| src/plugins/flow.js | 97.76% <86.66%> (+0.54%) | :arrow_up: |\n| src/parser/statement.js | 99.07% <0%> (+0.92%) | :arrow_up: |\n| src/tokenizer/index.js | 98.34% <0%> (+1.03%) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (+2.7%) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (+2.77%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af5fdc2...61bd3eb. Read the comment docs.. # Codecov Report\nMerging #426 into master will increase coverage by 1.25%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #426      +/-\n==========================================\n+ Coverage      97%   98.25%   +1.25%   \n==========================================\n  Files          20       20            \n  Lines        3504     3504            \n  Branches      927      927            \n==========================================\n+ Hits         3399     3443      +44   \n+ Misses         54       22      -32   \n+ Partials       51       39      -12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.59% <0%> (?) | |\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.38% <100%> (+3.53%) | :arrow_up: |\n| src/parser/statement.js | 99.07% <0%> (+0.92%) | :arrow_up: |\n| src/plugins/flow.js | 98.19% <0%> (+0.96%) | :arrow_up: |\n| src/tokenizer/index.js | 98.34% <0%> (+1.03%) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (+2.7%) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (+2.77%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32eabf6...45486c5. Read the comment docs.. # Codecov Report\nMerging #428 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #428      +/-\n==========================================\n+ Coverage   98.25%   98.25%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3504     3505       +1   \n  Branches      927      931       +4   \n==========================================\n+ Hits         3443     3444       +1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.96% <75%> (-0.06%) | :arrow_down: |\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.19% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...3ae6866. Read the comment docs.. # Codecov Report\nMerging #431 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #431   +/-\n=======================================\n  Coverage   98.25%   98.25%         \n=======================================\n  Files          20       20         \n  Lines        3504     3504         \n  Branches      927      927         \n=======================================\n  Hits         3443     3443         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.02% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a495d7f...5d1bf51. Read the comment docs.. # Codecov Report\nMerging #433 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #433      +/-\n==========================================\n+ Coverage   98.25%   98.26%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3504     3506       +2   \n  Branches      927      928       +1   \n==========================================\n+ Hits         3443     3445       +2   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.97% <20%> (-0.05%) | :arrow_down: |\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.35% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...dce4d89. Read the comment docs.. # Codecov Report\nMerging #435 into master will increase coverage by 0.02%.\nThe diff coverage is 96.78%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #435      +/-\n==========================================\n+ Coverage   98.25%   98.28%   +0.02%   \n==========================================\n  Files          20       20            \n  Lines        3504     3556      +52   \n  Branches      927      927            \n==========================================\n+ Hits         3443     3495      +52   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.88% <67.2%> (-0.14%) | :arrow_down: |\n| #babylon | 97.04% <95.37%> (+0.04%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/jsx/index.js | 97.8% <100%> (+0.02%) | :arrow_up: |\n| src/plugins/flow.js | 98.26% <95.45%> (+0.07%) | :arrow_up: |\n| src/plugins/estree.js | 99.32% <99.18%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f3123c...5eb0af5. Read the comment docs.. # Codecov Report\nMerging #436 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #436   +/-\n=======================================\n  Coverage   98.25%   98.25%         \n=======================================\n  Files          20       20         \n  Lines        3504     3504         \n  Branches      927      927         \n=======================================\n  Hits         3443     3443         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.02% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f3123c...fa93433. Read the comment docs.. # Codecov Report\nMerging #438 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #438      +/-\n==========================================\n+ Coverage   98.27%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3535     3539       +4   \n  Branches      982      982            \n==========================================\n+ Hits         3474     3478       +4   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.03% <100%> (+0.02%) | :arrow_up: |\n| #babylon | 97.03% <57.14%> (-0.09%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.08% <100%> (-0.01%) | :arrow_down: |\n| src/plugins/flow.js | 98.39% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dcef401...bc7b97a. Read the comment docs.\n. # Codecov Report\nMerging #441 into master will decrease coverage by 1.23%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #441      +/-\n==========================================\n- Coverage   98.25%   97.02%   -1.24%   \n==========================================\n  Files          20       20            \n  Lines        3504     3529      +25   \n  Branches      927      932       +5   \n==========================================\n- Hits         3443     3424      -19   \n- Misses         22       54      +32   \n- Partials       39       51      +12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97.02% <100%> (+0.02%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 97.3% <100%> (-0.89%) | :arrow_down: |\n| src/parser/expression.js | 93.84% <0%> (-3.54%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/parser/index.js | 97.29% <0%> (-2.71%) | :arrow_down: |\n| src/tokenizer/index.js | 97.31% <0%> (-1.04%) | :arrow_down: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f3123c...bd4afe2. Read the comment docs.. # Codecov Report\nMerging #442 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #442   +/-\n=======================================\n  Coverage   98.25%   98.25%         \n=======================================\n  Files          20       20         \n  Lines        3504     3504         \n  Branches      927      927         \n=======================================\n  Hits         3443     3443         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.02% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f3123c...ec6498a. Read the comment docs.. # Codecov Report\nMerging #443 into master will decrease coverage by 1.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #443      +/-\n========================================\n- Coverage   98.25%    97%   -1.26%   \n========================================\n  Files          20     20            \n  Lines        3504   3504            \n  Branches      927    927            \n========================================\n- Hits         3443   3399      -44   \n- Misses         22     54      +32   \n- Partials       39     51      +12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.84% <0%> (-3.54%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/parser/index.js | 97.29% <0%> (-2.71%) | :arrow_down: |\n| src/tokenizer/index.js | 97.31% <0%> (-1.04%) | :arrow_down: |\n| src/plugins/flow.js | 97.22% <0%> (-0.97%) | :arrow_down: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...f01d423. Read the comment docs.. # Codecov Report\nMerging #443 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #443      +/-\n==========================================\n+ Coverage   98.25%   98.26%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3504     3755     +251   \n  Branches      927     1035     +108   \n==========================================\n+ Hits         3443     3690     +247   \n- Misses         22       23       +1   \n- Partials       39       42       +3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 83.06% <\u00f8> (+1.04%) | :arrow_up: |\n| #babylon | 97.2% <\u00f8> (+0.2%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.24% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...46fe5f2. Read the comment docs.. # Codecov Report\nMerging #444 into master will decrease coverage by 9.99%.\nThe diff coverage is 17.04%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster     #444    +/-\n========================================\n- Coverage   98.26%   88.27%   -10%   \n========================================\n  Files          20       21     +1   \n  Lines        3514     3965   +451   \n  Branches      930     1021    +91   \n========================================\n+ Hits         3453     3500    +47   \n- Misses         22      426   +404   \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 73.66% <16.63%> (-8.12%) | :arrow_down: |\n| #babylon | 87.16% <16.01%> (-9.85%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 97.4% <100%> (+0.02%) | :arrow_up: |\n| src/plugins/typescript.js | 8.39% <8.39%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 14b7f50...afb7e00. Read the comment docs.. # Codecov Report\nMerging #445 into master will decrease coverage by 1.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #445     +/-\n=========================================\n- Coverage   98.25%   97.06%   -1.2%   \n=========================================\n  Files          20       16      -4   \n  Lines        3504     3334    -170   \n  Branches      927      917     -10   \n=========================================\n- Hits         3443     3236    -207   \n- Misses         22       49     +27   \n- Partials       39       49     +10\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97.06% <\u00f8> (+0.05%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.84% <0%> (-3.54%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/index.js | 97.94% <0%> (-2.06%) | :arrow_down: |\n| src/plugins/flow.js | 97.22% <0%> (-0.97%) | :arrow_down: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :arrow_down: |\n| src/parser/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | | |\n| src/plugins/jsx/index.js | | |\n| src/util/location.js | | |\n| src/parser/index.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...09e18bb. Read the comment docs.. # Codecov Report\nMerging #445 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #445      +/-\n==========================================\n+ Coverage   98.25%   98.26%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3504     3755     +251   \n  Branches      927     1035     +108   \n==========================================\n+ Hits         3443     3690     +247   \n- Misses         22       23       +1   \n- Partials       39       42       +3\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 83.06% <\u00f8> (+1.04%) | :arrow_up: |\n| #babylon | 97.2% <\u00f8> (+0.2%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.24% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...317e40c. Read the comment docs.. # Codecov Report\nMerging #446 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #446      +/-\n==========================================\n+ Coverage   98.25%   98.41%   +0.15%   \n==========================================\n  Files          20       20            \n  Lines        3504     3526      +22   \n  Branches      927      934       +7   \n==========================================\n+ Hits         3443     3470      +27   \n+ Misses         22       18       -4   \n+ Partials       39       38       -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.99% <76.08%> (-0.03%) | :arrow_down: |\n| #babylon | 97.16% <100%> (+0.16%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 97.45% <100%> (+0.07%) | :arrow_up: |\n| src/plugins/flow.js | 98.79% <100%> (+0.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d18221...5564a0e. Read the comment docs.. # Codecov Report\nMerging #448 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #448   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdfa924...2cb8c37. Read the comment docs.. # Codecov Report\nMerging #449 into master will decrease coverage by 0.44%.\nThe diff coverage is 5.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #449      +/-\n==========================================\n- Coverage   98.26%   97.81%   -0.45%   \n==========================================\n  Files          20       20            \n  Lines        3511     3527      +16   \n  Branches      934      940       +6   \n==========================================\n  Hits         3450     3450            \n- Misses         22       37      +15   \n- Partials       39       40       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.96% <5.88%> (-0.38%) | :arrow_down: |\n| #babylon | 96.56% <5.88%> (-0.45%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 38.46% <5.88%> (-61.54%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed452b6...0a72b73. Read the comment docs.. # Codecov Report\nMerging #450 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #450   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed452b6...0acf545. Read the comment docs.. # Codecov Report\nMerging #451 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #451   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ed452b6...da37518. Read the comment docs.. # Codecov Report\nMerging #452 into master will decrease coverage by 1.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #452      +/-\n========================================\n- Coverage   98.26%    97%   -1.26%   \n========================================\n  Files          20     20            \n  Lines        3511   3511            \n  Branches      934    934            \n========================================\n- Hits         3450   3406      -44   \n- Misses         22     54      +32   \n- Partials       39     51      +12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.84% <0%> (-3.54%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/parser/index.js | 97.29% <0%> (-2.71%) | :arrow_down: |\n| src/tokenizer/index.js | 97.32% <0%> (-1.03%) | :arrow_down: |\n| src/plugins/flow.js | 97.25% <0%> (-0.96%) | :arrow_down: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c07efb...33570e2. Read the comment docs.. # Codecov Report\nMerging #454 into master will increase coverage by 1.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #454      +/-\n==========================================\n+ Coverage      97%   98.26%   +1.25%   \n==========================================\n  Files          20       20            \n  Lines        3511     3511            \n  Branches      934      934            \n==========================================\n+ Hits         3406     3450      +44   \n+ Misses         54       22      -32   \n+ Partials       51       39      -12\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (?) | |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.07% <0%> (+0.92%) | :arrow_up: |\n| src/plugins/flow.js | 98.21% <0%> (+0.95%) | :arrow_up: |\n| src/tokenizer/index.js | 98.35% <0%> (+1.02%) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (+2.7%) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (+2.77%) | :arrow_up: |\n| src/parser/expression.js | 97.38% <0%> (+3.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bf18cc...817dcf2. Read the comment docs.. # Codecov Report\nMerging #459 into master will decrease coverage by 1.28%.\nThe diff coverage is 97.03%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #459      +/-\n==========================================\n- Coverage   98.26%   96.97%   -1.29%   \n==========================================\n  Files          20       20            \n  Lines        3511     3469      -42   \n  Branches      934      935       +1   \n==========================================\n- Hits         3450     3364      -86   \n- Misses         22       55      +33   \n- Partials       39       50      +11\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 96.97% <97.03%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/jsx/index.js | 97.71% <100%> (-0.03%) | :arrow_down: |\n| src/plugins/estree.js | 99.17% <100%> (-0.09%) | :arrow_down: |\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 97.01% <94.44%> (-1.2%) | :arrow_down: |\n| src/parser/expression.js | 93.84% <0%> (-3.54%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/tokenizer/index.js | 97.32% <0%> (-1.03%) | :arrow_down: |\n| src/parser/statement.js | 98.15% <0%> (-0.93%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 344f070...c5fec5b. Read the comment docs.. # Codecov Report\nMerging #459 into master will decrease coverage by 0.05%.\nThe diff coverage is 96.03%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #459      +/-\n=========================================\n- Coverage   98.26%   98.2%   -0.06%   \n=========================================\n  Files          20      20            \n  Lines        3506    3462      -44   \n  Branches      934     935       +1   \n=========================================\n- Hits         3445    3400      -45   \n- Misses         22      23       +1   \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.49% <66.66%> (+0.15%) | :arrow_up: |\n| #babylon | 96.96% <94.17%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/jsx/index.js | 97.71% <100%> (-0.03%) | :arrow_down: |\n| src/plugins/flow.js | 97.99% <94.07%> (-0.21%) | :arrow_down: |\n| src/plugins/estree.js | 99.17% <98.95%> (-0.09%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ef4366...20a83d9. Read the comment docs.\n. # Codecov Report\nMerging #460 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #460   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.35% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 637119a...9e454d1. Read the comment docs.. # Codecov Report\nMerging #461 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #461   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 637119a...7c868b7. Read the comment docs.. # Codecov Report\nMerging #463 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #463      +/-\n==========================================\n+ Coverage   98.26%   98.27%   +<.01%   \n==========================================\n  Files          20       20            \n  Lines        3511     3529      +18   \n  Branches      934      944      +10   \n==========================================\n+ Hits         3450     3468      +18   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.09% <69.56%> (-0.25%) | :arrow_down: |\n| #babylon | 97.02% <100%> (+0.01%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.39% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.24% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 482b815...c0ed45d. Read the comment docs.. # Codecov Report\nMerging #468 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #468   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 482b815...7378387. Read the comment docs.\n. # Codecov Report\nMerging #472 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #472      +/-\n==========================================\n- Coverage   98.26%   98.26%   -0.01%   \n==========================================\n  Files          20       20            \n  Lines        3511     3506       -5   \n  Branches      934      934            \n==========================================\n- Hits         3450     3445       -5   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97% <100%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.2% <100%> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 482b815...cdd0bda. Read the comment docs.\n. # Codecov Report\nMerging #473 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #473      +/-\n==========================================\n- Coverage   98.26%   98.24%   -0.02%   \n==========================================\n  Files          20       20            \n  Lines        3511     3531      +20   \n  Branches      934      973      +39   \n==========================================\n+ Hits         3450     3469      +19   \n- Misses         22       23       +1   \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.22% <100%> (-1.12%) | :arrow_down: |\n| #babylon | 97.08% <100%> (+0.07%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.35% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.17% <0%> (-0.09%) | :arrow_down: |\n| src/plugins/flow.js | 98.15% <0%> (-0.06%) | :arrow_down: |\n| src/plugins/jsx/index.js | 97.71% <0%> (-0.03%) | :arrow_down: |\n| src/parser/statement.js | 99.07% <0%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 482b815...0039670. Read the comment docs.\n. # Codecov Report\nMerging #474 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #474   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          20       20         \n  Lines        3511     3511         \n  Branches      934      934         \n=======================================\n  Hits         3450     3450         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.34% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 482b815...3deeaa6. Read the comment docs.\n. # Codecov Report\nMerging #475 into master will increase coverage by 1.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #475      +/-\n==========================================\n+ Coverage   97.04%   98.24%   +1.19%   \n==========================================\n  Files          21       20       -1   \n  Lines        3521     3529       +8   \n  Branches      974      973       -1   \n==========================================\n+ Hits         3417     3467      +50   \n+ Misses         55       23      -32   \n+ Partials       49       39      -10\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.24% <100%> (?) | |\n| #babylon | 97.08% <100%> (+0.03%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.15% <100%> (+0.69%) | :arrow_up: |\n| src/parser/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/parser/base.js | | |\n| src/plugins/estree.js | 99.17% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/jsx/index.js | 97.71% <0%> (\u00f8) | :arrow_up: |\n| src/parser/comments.js | 96.15% <0%> (+0.07%) | :arrow_up: |\n| src/parser/node.js | 97.05% <0%> (+0.28%) | :arrow_up: |\n| src/parser/util.js | 90.32% <0%> (+0.32%) | :arrow_up: |\n| src/parser/lval.js | 98.63% <0%> (+0.68%) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4fb3fe...7c77630. Read the comment docs.\n. # Codecov Report\nMerging #476 into 6.x will decrease coverage by 0.64%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #476      +/-\n==========================================\n- Coverage   98.08%   97.43%   -0.65%   \n==========================================\n  Files          21       21            \n  Lines        3544     3553       +9   \n  Branches      937      940       +3   \n==========================================\n- Hits         3476     3462      -14   \n- Misses         24       49      +25   \n+ Partials       44       42       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.09% <100%> (+0.02%) | :arrow_up: |\n| src/plugins/jsx/fromCodePoint.js | 3.44% <0%> (-79.32%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fab343e...e8447dd. Read the comment docs.\n. # Codecov Report\nMerging #478 into master will increase coverage by 0.01%.\nThe diff coverage is 86.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #478      +/-\n==========================================\n+ Coverage   98.18%   98.19%   +0.01%   \n==========================================\n  Files          22       20       -2   \n  Lines        3572     3546      -26   \n  Branches      992      982      -10   \n==========================================\n- Hits         3507     3482      -25   \n+ Misses         24       23       -1   \n  Partials       41       41\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.24% <86.66%> (+0.89%) | :arrow_up: |\n| #babylon | 96.92% <60%> (-0.03%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/comments.js | 94.02% <86.66%> (-1.98%) | :arrow_down: |\n| src/plugins/flow.js | 98.15% <0%> (-0.24%) | :arrow_down: |\n| src/parser/statement.js | 99.07% <0%> (-0.03%) | :arrow_down: |\n| src/tokenizer/index.js | 98.35% <0%> (-0.02%) | :arrow_down: |\n| src/util/whitespace.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/util/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/util/identifier.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/context.js | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a92c1f...04e3718. Read the comment docs.\n. # Codecov Report\nMerging #479 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #479   +/-\n=======================================\n  Coverage   98.24%   98.24%         \n=======================================\n  Files          20       20         \n  Lines        3531     3531         \n  Branches      973      973         \n=======================================\n  Hits         3469     3469         \n  Misses         23       23         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.22% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.08% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.38% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00d6db9...0be1f6a. Read the comment docs.\n. # Codecov Report\nMerging #480 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #480   +/-\n=======================================\n  Coverage   98.24%   98.24%         \n=======================================\n  Files          20       20         \n  Lines        3531     3531         \n  Branches      973      973         \n=======================================\n  Hits         3469     3469         \n  Misses         23       23         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.22% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97.08% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc0719a...3d7567f. Read the comment docs.\n. # Codecov Report\nMerging #481 into master will decrease coverage by 0.03%.\nThe diff coverage is 97.91%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #481      +/-\n==========================================\n- Coverage   98.24%   98.21%   -0.04%   \n==========================================\n  Files          20       21       +1   \n  Lines        3531     3524       -7   \n  Branches      973      974       +1   \n==========================================\n- Hits         3469     3461       -8   \n- Misses         23       24       +1   \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.1% <84.07%> (-0.13%) | :arrow_down: |\n| #babylon | 97.04% <96.03%> (-0.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.36% <100%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/location.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/base.js | 100% <100%> (\u00f8) | |\n| src/parser/util.js | 90% <90%> (-0.33%) | :arrow_down: |\n| src/parser/node.js | 96.77% <94.44%> (-0.29%) | :arrow_down: |\n| src/parser/comments.js | 96.07% <95.91%> (-0.08%) | :arrow_down: |\n| src/parser/expression.js | 97.38% <97.35%> (-0.01%) | :arrow_down: |\n| src/parser/lval.js | 97.94% <97.94%> (-0.69%) | :arrow_down: |\n| src/parser/statement.js | 99.07% <99.05%> (-0.01%) | :arrow_down: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8601f2f...6675ad3. Read the comment docs.\n. # Codecov Report\nMerging #482 into master will decrease coverage by <.01%.\nThe diff coverage is 99.13%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #482      +/-\n==========================================\n- Coverage   98.24%   98.24%   -0.01%   \n==========================================\n  Files          20       20            \n  Lines        3531     3528       -3   \n  Branches      973      973            \n==========================================\n- Hits         3469     3466       -3   \n  Misses         23       23            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81% <76.79%> (-0.22%) | :arrow_down: |\n| #babylon | 97.08% <99.13%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.16% <100%> (-0.01%) | :arrow_down: |\n| src/plugins/jsx/index.js | 97.7% <97.01%> (-0.01%) | :arrow_down: |\n| src/plugins/flow.js | 98.15% <99.82%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8601f2f...46f1eec. Read the comment docs.\n. # Codecov Report\nMerging #484 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #484      +/-\n=========================================\n- Coverage    98.2%   98.2%   -0.01%   \n=========================================\n  Files          21      21            \n  Lines        3519    3518       -1   \n  Branches      974     974            \n=========================================\n- Hits         3456    3455       -1   \n  Misses         24      24            \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <100%> (-0.01%) | :arrow_down: |\n| #babylon | 97.04% <100%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/base.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.36% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/comments.js | 96% <100%> (-0.08%) | :arrow_down: |\n| src/parser/location.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68967bf...9f57da7. Read the comment docs.\n. # Codecov Report\nMerging #485 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #485   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3519    3519         \n  Branches      974     974         \n======================================\n  Hits         3456    3456         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.9% <84.61%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/util.js | 90% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68967bf...b6c07e4. Read the comment docs.\n. # Codecov Report\nMerging #486 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #486      +/-\n=========================================\n- Coverage    98.2%   98.2%   -0.01%   \n=========================================\n  Files          21      21            \n  Lines        3519    3518       -1   \n  Branches      974     974            \n=========================================\n- Hits         3456    3455       -1   \n  Misses         24      24            \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <100%> (-0.01%) | :arrow_down: |\n| #babylon | 97.04% <100%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/node.js | 96.66% <100%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68967bf...484d3d9. Read the comment docs.\n. # Codecov Report\nMerging #487 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #487   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3519    3519         \n  Branches      974     974         \n======================================\n  Hits         3456    3456         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.9% <92.3%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/lval.js | 97.94% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68967bf...7f16d46. Read the comment docs.\n. # Codecov Report\nMerging #488 into master will decrease coverage by <.01%.\nThe diff coverage is 97.87%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #488      +/-\n==========================================\n- Coverage   98.26%   98.26%   -0.01%   \n==========================================\n  Files          22       22            \n  Lines        3526     3525       -1   \n  Branches      978      978            \n==========================================\n- Hits         3465     3464       -1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.07% <95.74%> (-0.01%) | :arrow_down: |\n| #babylon | 97.1% <97.87%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.38% <97.87%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1773ca7...6e6b599. Read the comment docs.\n. # Codecov Report\nMerging #489 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #489      +/-\n==========================================\n+ Coverage   98.26%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3526     3527       +1   \n  Branches      978      978            \n==========================================\n+ Hits         3465     3466       +1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.08% <95.52%> (\u00f8) | :arrow_up: |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1773ca7...05d5cf1. Read the comment docs.\n. # Codecov Report\nMerging #490 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #490   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3517    3517         \n  Branches      974     974         \n======================================\n  Hits         3454    3454         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <90%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/options.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...5300c0a. Read the comment docs.\n. # Codecov Report\nMerging #491 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #491      +/-\n=========================================\n+ Coverage    98.2%   98.2%   +<.01%   \n=========================================\n  Files          21      21            \n  Lines        3517    3518       +1   \n  Branches      974     974            \n=========================================\n+ Hits         3454    3455       +1   \n  Misses         24      24            \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.36% <\u00f8> (\u00f8) | :arrow_up: |\n| src/util/whitespace.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/util/identifier.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/util/location.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...fb08247. Read the comment docs.\n. # Codecov Report\nMerging #492 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #492   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3517    3517         \n  Branches      974     974         \n======================================\n  Hits         3454    3454         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.36% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/comments.js | 96% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...f6996e0. Read the comment docs.\n. # Codecov Report\nMerging #493 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #493   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3517    3517         \n  Branches      974     974         \n======================================\n  Hits         3454    3454         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/context.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/types.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/util.js | 90% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...d83f54e. Read the comment docs.\n. # Codecov Report\nMerging #494 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #494   +/-\n======================================\n  Coverage    98.2%   98.2%         \n======================================\n  Files          21      21         \n  Lines        3517    3517         \n  Branches      974     974         \n======================================\n  Hits         3454    3454         \n  Misses         24      24         \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <0%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.16% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...88dce68. Read the comment docs.\n. # Codecov Report\nMerging #495 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #495      +/-\n==========================================\n+ Coverage    98.2%   98.26%   +0.05%   \n==========================================\n  Files          21       21            \n  Lines        3517     3516       -1   \n  Branches      974      973       -1   \n==========================================\n+ Hits         3454     3455       +1   \n+ Misses         24       22       -2   \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.94% <93.33%> (+0.05%) | :arrow_up: |\n| #babylon | 97.09% <100%> (+0.05%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.37% <100%> (+0.22%) | :arrow_up: |\n| src/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/util/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/parser/lval.js | 97.94% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.16% <0%> (\u00f8) | :arrow_up: |\n| src/util/whitespace.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/util/identifier.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/options.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.36% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...46b6cf2. Read the comment docs.\n. # Codecov Report\nMerging #496 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #496      +/-\n=========================================\n+ Coverage    98.2%   98.2%   +<.01%   \n=========================================\n  Files          21      22       +1   \n  Lines        3517    3518       +1   \n  Branches      974     974            \n=========================================\n+ Hits         3454    3455       +1   \n  Misses         24      24            \n  Partials       39      39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.89% <92%> (\u00f8) | :arrow_up: |\n| #babylon | 97.04% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/jsx/index.js | 97.7% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/jsx/xhtml.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7627c5a...71c2968. Read the comment docs.\n. # Codecov Report\nMerging #497 into master will increase coverage by 0.21%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #497      +/-\n==========================================\n+ Coverage   98.26%   98.47%   +0.21%   \n==========================================\n  Files          22       22            \n  Lines        3517     3942     +425   \n  Branches      973     1208     +235   \n==========================================\n+ Hits         3456     3882     +426   \n  Misses         22       22            \n+ Partials       39       38       -1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 82.92% <\u00f8> (+1.97%) | :arrow_up: |\n| #babylon | 97.38% <\u00f8> (+0.28%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 98.99% <0%> (-0.09%) | :arrow_down: |\n| src/tokenizer/state.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.6% <0%> (+0.23%) | :arrow_up: |\n| src/parser/expression.js | 98.21% <0%> (+0.82%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...db21589. Read the comment docs.\n. # Codecov Report\nMerging #499 into master will decrease coverage by 1.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #499      +/-\n=========================================\n- Coverage   98.26%   97.1%   -1.17%   \n=========================================\n  Files          22      22            \n  Lines        3517    3523       +6   \n  Branches      973     976       +3   \n=========================================\n- Hits         3456    3421      -35   \n- Misses         22      53      +31   \n- Partials       39      49      +10\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 97.22% <\u00f8> (-2.78%) | :arrow_down: |\n| src/parser/expression.js | 93.86% <100%> (-3.52%) | :arrow_down: |\n| src/parser/statement.js | 98.16% <100%> (-0.92%) | :arrow_down: |\n| src/tokenizer/index.js | 97.33% <0%> (-1.03%) | :arrow_down: |\n| src/plugins/flow.js | 97.67% <0%> (-0.7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...1359317. Read the comment docs.\n. # Codecov Report\nMerging #499 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #499      +/-\n==========================================\n+ Coverage   98.26%   98.26%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3517     3523       +6   \n  Branches      973      976       +3   \n==========================================\n+ Hits         3456     3462       +6   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.98% <66.66%> (+0.03%) | :arrow_up: |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 97.39% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...1359317. Read the comment docs.\n. # Codecov Report\nMerging #501 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #501   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          22       22         \n  Lines        3517     3517         \n  Branches      973      973         \n=======================================\n  Hits         3456     3456         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.94% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97.09% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...602c4d7. Read the comment docs.\n. # Codecov Report\nMerging #503 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #503   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          22       22         \n  Lines        3524     3524         \n  Branches      977      977         \n=======================================\n  Hits         3463     3463         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.98% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97.1% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d33c827...8433cb9. Read the comment docs.\n. # Codecov Report\nMerging #504 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #504      +/-\n==========================================\n+ Coverage   98.26%   98.26%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3517     3518       +1   \n  Branches      973      974       +1   \n==========================================\n+ Hits         3456     3457       +1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.95% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...553b065. Read the comment docs.\n. # Codecov Report\nMerging #506 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #506   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          22       22         \n  Lines        3517     3517         \n  Branches      973      973         \n=======================================\n  Hits         3456     3456         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.94% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.09% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.38% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e81b5f8...bfce3bb. Read the comment docs.\n. # Codecov Report\nMerging #507 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #507   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          22       22         \n  Lines        3524     3524         \n  Branches      977      977         \n=======================================\n  Hits         3463     3463         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.98% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97.1% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d33c827...9fc3b5d. Read the comment docs.\n. # Codecov Report\nMerging #509 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #509   +/-\n=======================================\n  Coverage   98.26%   98.26%         \n=======================================\n  Files          22       22         \n  Lines        3524     3524         \n  Branches      977      977         \n=======================================\n  Hits         3463     3463         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.98% <0%> (\u00f8) | :arrow_up: |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e12f56...e2014e2. Read the comment docs.\n. # Codecov Report\nMerging #510 into master will decrease coverage by 1.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #510      +/-\n=========================================\n- Coverage   98.26%   97.1%   -1.17%   \n=========================================\n  Files          22      22            \n  Lines        3524    3526       +2   \n  Branches      977     978       +1   \n=========================================\n- Hits         3463    3424      -39   \n- Misses         22      53      +31   \n- Partials       39      49      +10\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 97.68% <100%> (-0.7%) | :arrow_down: |\n| src/parser/expression.js | 93.86% <0%> (-3.53%) | :arrow_down: |\n| src/tokenizer/state.js | 97.22% <0%> (-2.78%) | :arrow_down: |\n| src/tokenizer/index.js | 97.33% <0%> (-1.03%) | :arrow_down: |\n| src/parser/statement.js | 98.16% <0%> (-0.92%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e12f56...1d5050e. Read the comment docs.\n. # Codecov Report\nMerging #510 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #510      +/-\n==========================================\n+ Coverage   98.26%   98.26%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3524     3526       +2   \n  Branches      977      978       +1   \n==========================================\n+ Hits         3463     3465       +2   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.99% <100%> (+0.01%) | :arrow_up: |\n| #babylon | 97.1% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.37% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e12f56...bc44306. Read the comment docs.\n. # Codecov Report\nMerging #515 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #515      +/-\n==========================================\n+ Coverage   97.43%   97.44%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3553     3560       +7   \n  Branches      940      944       +4   \n==========================================\n+ Hits         3462     3469       +7   \n  Misses         49       49            \n  Partials       42       42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.1% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 97.39% <100%> (+0.01%) | :arrow_up: |\n| src/parser/statement.js | 98.93% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2c1432...7c56c24. Read the comment docs.\n. # Codecov Report\nMerging #516 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #516      +/-\n==========================================\n+ Coverage   97.44%   97.44%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3560     3563       +3   \n  Branches      944      946       +2   \n==========================================\n+ Hits         3469     3472       +3   \n  Misses         49       49            \n  Partials       42       42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.35% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c885ea...1077a73. Read the comment docs.\n. # Codecov Report\nMerging #517 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #517      +/-\n==========================================\n- Coverage   98.26%   98.26%   -0.01%   \n==========================================\n  Files          22       22            \n  Lines        3526     3525       -1   \n  Branches      978      978            \n==========================================\n- Hits         3465     3464       -1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.07% <\u00f8> (-0.01%) | :arrow_down: |\n| #babylon | 97.1% <\u00f8> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1773ca7...c977fe6. Read the comment docs.\n. # Codecov Report\nMerging #517 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #517      +/-\n==========================================\n- Coverage   98.26%   98.26%   -0.01%   \n==========================================\n  Files          22       22            \n  Lines        3526     3525       -1   \n  Branches      978      978            \n==========================================\n- Hits         3465     3464       -1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.07% <\u00f8> (-0.01%) | :arrow_down: |\n| #babylon | 97.1% <\u00f8> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1773ca7...c977fe6. Read the comment docs.\n. # Codecov Report\nMerging #518 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #518      +/-\n==========================================\n+ Coverage   98.26%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3526     3531       +5   \n  Branches      978      981       +3   \n==========================================\n+ Hits         3465     3470       +5   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.05% <50%> (-0.03%) | :arrow_down: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/lval.js | 98.01% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1773ca7...8197d37. Read the comment docs.\n. # Codecov Report\nMerging #519 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #519      +/-\n==========================================\n+ Coverage   97.44%   97.44%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3563     3568       +5   \n  Branches      946      949       +3   \n==========================================\n+ Hits         3472     3477       +5   \n  Misses         49       49            \n  Partials       42       42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/lval.js | 98.69% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 28985e7...05f163a. Read the comment docs.\n. # Codecov Report\nMerging #520 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #520   +/-\n=======================================\n  Coverage   98.27%   98.27%         \n=======================================\n  Files          22       22         \n  Lines        3530     3530         \n  Branches      981      981         \n=======================================\n  Hits         3469     3469         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.04% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 97.11% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a738870...bf30e14. Read the comment docs.\n. # Codecov Report\nMerging #521 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #521   +/-\n=======================================\n  Coverage   98.27%   98.27%         \n=======================================\n  Files          22       22         \n  Lines        3530     3530         \n  Branches      981      981         \n=======================================\n  Hits         3469     3469         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.04% <80%> (\u00f8) | :arrow_up: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.16% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 97.38% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a738870...4a2bf55. Read the comment docs.\n. # Codecov Report\nMerging #522 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #522   +/-\n=======================================\n  Coverage   98.27%   98.27%         \n=======================================\n  Files          22       22         \n  Lines        3530     3530         \n  Branches      981      979    -2   \n=======================================\n  Hits         3469     3469         \n  Misses         22       22         \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.04% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.38% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a738870...f2cc63b. Read the comment docs.\n. # Codecov Report\nMerging #523 into master will decrease coverage by 2.29%.\nThe diff coverage is 89.05%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #523     +/-\n=========================================\n- Coverage   98.27%   95.97%   -2.3%   \n=========================================\n  Files          22       23      +1   \n  Lines        3530     4477    +947   \n  Branches      981     1240    +259   \n=========================================\n+ Hits         3469     4297    +828   \n- Misses         22       86     +64   \n- Partials       39       94     +55\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 65.04% <13.98%> (-16.01%) | :arrow_down: |\n| #babylon | 95.06% <89.05%> (-2.05%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/context.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.36% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.16% <100%> (\u00f8) | :arrow_up: |\n| src/parser/lval.js | 98.12% <100%> (+0.11%) | :arrow_up: |\n| src/parser/util.js | 92.3% <100%> (+2.3%) | :arrow_up: |\n| src/plugins/flow.js | 98.37% <100%> (-0.01%) | :arrow_down: |\n| src/index.js | 94.44% <75%> (-5.56%) | :arrow_down: |\n| src/plugins/typescript.js | 86.13% <86.13%> (\u00f8) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a738870...fc81c23. Read the comment docs.\n. # Codecov Report\nMerging #523 into master will decrease coverage by 2.32%.\nThe diff coverage is 88.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #523      +/-\n==========================================\n- Coverage   98.14%   95.82%   -2.33%   \n==========================================\n  Files          22       23       +1   \n  Lines        3674     4695    +1021   \n  Branches     1024     1287     +263   \n==========================================\n+ Hits         3606     4499     +893   \n- Misses         25      107      +82   \n- Partials       43       89      +46\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 64.21% <10.56%> (-16.6%) | :arrow_down: |\n| #babylon | 94.78% <88.36%> (-2.04%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/context.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/node.js | 96.87% <100%> (+0.2%) | :arrow_up: |\n| src/parser/util.js | 91.89% <100%> (+1.89%) | :arrow_up: |\n| src/tokenizer/index.js | 98.44% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.18% <100%> (-0.01%) | :arrow_down: |\n| src/index.js | 94.44% <75%> (-5.56%) | :arrow_down: |\n| src/parser/lval.js | 96.83% <83.33%> (-1.21%) | :arrow_down: |\n| src/plugins/flow.js | 98.17% <84.61%> (-0.23%) | :arrow_down: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b4fba4...5b56e59. Read the comment docs.\n. # Codecov Report\nMerging #525 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #525      +/-\n==========================================\n+ Coverage   98.27%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3530     3531       +1   \n  Branches      979      979            \n==========================================\n+ Hits         3469     3470       +1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.05% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 99.08% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ef964e...d5a6a77. Read the comment docs.\n. # Codecov Report\nMerging #526 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #526      +/-\n==========================================\n+ Coverage   98.27%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3530     3531       +1   \n  Branches      979      980       +1   \n==========================================\n+ Hits         3469     3470       +1   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.05% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.38% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ef964e...9d06f3b. Read the comment docs.\n. # Codecov Report\nMerging #528 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #528      +/-\n==========================================\n+ Coverage   97.44%   97.45%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3568     3569       +1   \n  Branches      949      950       +1   \n==========================================\n+ Hits         3477     3478       +1   \n  Misses         49       49            \n  Partials       42       42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 54399ab...49948b7. Read the comment docs.\n. # Codecov Report\nMerging #529 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #529      +/-\n==========================================\n+ Coverage   98.27%   98.27%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3531     3535       +4   \n  Branches      980      982       +2   \n==========================================\n+ Hits         3470     3474       +4   \n  Misses         22       22            \n  Partials       39       39\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.01% <33.33%> (-0.04%) | :arrow_down: |\n| #babylon | 97.11% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 97.4% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b08fdf8...d75483d. Read the comment docs.\n. # Codecov Report\nMerging #531 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #531      +/-\n==========================================\n+ Coverage   97.45%   97.45%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3569     3574       +5   \n  Branches      950      950            \n==========================================\n+ Hits         3478     3483       +5   \n  Misses         49       49            \n  Partials       42       42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/statement.js | 98.92% <100%> (-0.01%) | :arrow_down: |\n| src/plugins/flow.js | 98.12% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7c13a8...9690014. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@01da622). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #532   +/-\n=========================================\n  Coverage          ?   98.18%         \n=========================================\n  Files             ?       22         \n  Lines             ?     3572         \n  Branches          ?      992         \n=========================================\n  Hits              ?     3507         \n  Misses            ?       24         \n  Partials          ?       41\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.34% <\u00f8> (?) | |\n| #babylon | 96.94% <\u00f8> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 01da622...2b90e6a. Read the comment docs.\n. # Codecov Report\nMerging #533 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #533      +/-\n==========================================\n+ Coverage   98.18%   98.18%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3572     3580       +8   \n  Branches      992      992            \n==========================================\n+ Hits         3507     3515       +8   \n  Misses         24       24            \n  Partials       41       41\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.36% <58.53%> (+0.01%) | :arrow_up: |\n| #babylon | 96.95% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.11% <100%> (+0.01%) | :arrow_up: |\n| src/plugins/estree.js | 99.16% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 96.84% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a92c1f...8527669. Read the comment docs.\n. # Codecov Report\nMerging #537 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #537   +/-\n=======================================\n  Coverage   98.13%   98.13%         \n=======================================\n  Files          22       22         \n  Lines        3588     3588         \n  Branches     1002     1002         \n=======================================\n  Hits         3521     3521         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.62% <\u00f8> (+0.25%) | :arrow_up: |\n| #babylon | 96.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9709c8d...9b18676. Read the comment docs.\n. # Codecov Report\nMerging #537 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #537   +/-\n=======================================\n  Coverage   98.13%   98.13%         \n=======================================\n  Files          22       22         \n  Lines        3588     3588         \n  Branches     1002     1002         \n=======================================\n  Hits         3521     3521         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.62% <\u00f8> (+0.25%) | :arrow_up: |\n| #babylon | 96.79% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9709c8d...bd84641. Read the comment docs.\n. # Codecov Report\nMerging #541 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #541      +/-\n==========================================\n+ Coverage   98.13%   98.13%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3588     3599      +11   \n  Branches     1002     1007       +5   \n==========================================\n+ Hits         3521     3532      +11   \n  Misses         24       24            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.41% <16.66%> (-0.22%) | :arrow_down: |\n| #babylon | 96.8% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 98.4% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6eeb031...465d80b. Read the comment docs.\n. # Codecov Report\nMerging #543 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #543   +/-\n=======================================\n  Coverage   98.13%   98.13%         \n=======================================\n  Files          22       22         \n  Lines        3599     3599         \n  Branches     1007     1007         \n=======================================\n  Hits         3532     3532         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.41% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 96.8% <83.33%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 96.84% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 81ce415...a1ef3fd. Read the comment docs.\n. # Codecov Report\nMerging #544 into master will decrease coverage by 1.32%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #544      +/-\n==========================================\n- Coverage   98.14%   96.82%   -1.33%   \n==========================================\n  Files          22       22            \n  Lines        3607     3617      +10   \n  Branches     1007     1010       +3   \n==========================================\n- Hits         3540     3502      -38   \n- Misses         24       58      +34   \n- Partials       43       57      +14\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 96.82% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 93.48% <100%> (-3.37%) | :arrow_down: |\n| src/parser/statement.js | 98.23% <100%> (-0.89%) | :arrow_down: |\n| src/parser/comments.js | 87.87% <0%> (-6.07%) | :arrow_down: |\n| src/tokenizer/state.js | 97.14% <0%> (-2.86%) | :arrow_down: |\n| src/plugins/flow.js | 97.35% <0%> (-1.04%) | :arrow_down: |\n| src/tokenizer/index.js | 97.41% <0%> (-1%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f326ef6...aa7baab. Read the comment docs.\n. # Codecov Report\nMerging #545 into master will decrease coverage by <.01%.\nThe diff coverage is 97.56%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #545      +/-\n==========================================\n- Coverage   98.14%   98.14%   -0.01%   \n==========================================\n  Files          22       22            \n  Lines        3620     3663      +43   \n  Branches     1012     1023      +11   \n==========================================\n+ Hits         3553     3595      +42   \n- Misses         24       25       +1   \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 79.66% <19.51%> (-0.79%) | :arrow_down: |\n| #babylon | 96.83% <97.56%> (+0.01%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/types.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.44% <100%> (+0.02%) | :arrow_up: |\n| src/parser/expression.js | 96.88% <96.77%> (-0.01%) | :arrow_down: |\n| src/plugins/flow.js | 98.39% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.19% <0%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 324e2f0...4c8f4a2. Read the comment docs.\n. # Codecov Report\nMerging #548 into master will decrease coverage by 1.33%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #548      +/-\n==========================================\n- Coverage   98.14%   96.81%   -1.34%   \n==========================================\n  Files          22       22            \n  Lines        3607     3607            \n  Branches     1007     1007            \n==========================================\n- Hits         3540     3492      -48   \n- Misses         24       58      +34   \n- Partials       43       57      +14\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 96.81% <\u00f8> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/comments.js | 87.87% <0%> (-6.07%) | :arrow_down: |\n| src/parser/expression.js | 93.39% <0%> (-3.46%) | :arrow_down: |\n| src/tokenizer/state.js | 97.14% <0%> (-2.86%) | :arrow_down: |\n| src/plugins/flow.js | 97.35% <0%> (-1.04%) | :arrow_down: |\n| src/tokenizer/index.js | 97.41% <0%> (-1%) | :arrow_down: |\n| src/parser/statement.js | 98.23% <0%> (-0.89%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f326ef6...656790f. Read the comment docs.\n. # Codecov Report\nMerging #549 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #549      +/-\n==========================================\n+ Coverage   96.81%   96.81%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3607     3610       +3   \n  Branches     1007     1009       +2   \n==========================================\n+ Hits         3492     3495       +3   \n  Misses         58       58            \n  Partials       57       57\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babylon | 96.81% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/index.js | 97.43% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3ca75dc...37678ff. Read the comment docs.\n. # Codecov Report\nMerging #551 into 6.x will decrease coverage by 0.04%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff            @@\n6.x    #551      +/-\n=========================================\n- Coverage   97.45%   97.4%   -0.05%   \n=========================================\n  Files          21      21            \n  Lines        3574    3590      +16   \n  Branches      950     960      +10   \n=========================================\n+ Hits         3483    3497      +14   \n  Misses         49      49            \n- Partials       42      44       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/comments.js | 94.11% <87.5%> (-2.04%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 990675d...1920383. Read the comment docs.\n. # Codecov Report\nMerging #552 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #552   +/-\n=======================================\n  Coverage   98.14%   98.14%         \n=======================================\n  Files          22       22         \n  Lines        3620     3620         \n  Branches     1012     1012         \n=======================================\n  Hits         3553     3553         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.44% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 324e2f0...c357d74. Read the comment docs.\n. # Codecov Report\nMerging #553 into 6.x will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\n6.x    #553   +/-\n=====================================\n  Coverage   97.4%   97.4%         \n=====================================\n  Files         21      21         \n  Lines       3590    3590         \n  Branches     960     960         \n=====================================\n  Hits        3497    3497         \n  Misses        49      49         \n  Partials      44      44\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9aade9...3eea3f9. Read the comment docs.\n. # Codecov Report\nMerging #556 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #556   +/-\n=======================================\n  Coverage   98.14%   98.14%         \n=======================================\n  Files          22       22         \n  Lines        3620     3620         \n  Branches     1012     1012         \n=======================================\n  Hits         3553     3553         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.44% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edf34dc...5bd64dd. Read the comment docs.\n. # Codecov Report\nMerging #556 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #556   +/-\n=======================================\n  Coverage   98.14%   98.14%         \n=======================================\n  Files          22       22         \n  Lines        3620     3620         \n  Branches     1012     1012         \n=======================================\n  Hits         3553     3553         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.44% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edf34dc...5bd64dd. Read the comment docs.\n. # Codecov Report\nMerging #557 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #557      +/-\n==========================================\n+ Coverage   98.14%   98.15%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3620     3625       +5   \n  Branches     1012     1012            \n==========================================\n+ Hits         3553     3558       +5   \n  Misses         24       24            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <0%> (-0.12%) | :arrow_down: |\n| #babylon | 96.82% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.2% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edf34dc...47af470. Read the comment docs.\n. # Codecov Report\nMerging #559 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #559      +/-\n==========================================\n+ Coverage   98.15%   98.15%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3625     3631       +6   \n  Branches     1012     1014       +2   \n==========================================\n+ Hits         3558     3564       +6   \n  Misses         24       24            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.36% <100%> (+0.03%) | :arrow_up: |\n| #babylon | 96.83% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 96.91% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0656717...31c4751. Read the comment docs.\n. # Codecov Report\nMerging #560 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #560   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0656717...2685cd8. Read the comment docs.\n. # Codecov Report\nMerging #560 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #560   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0656717...2685cd8. Read the comment docs.\n. # Codecov Report\nMerging #561 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #561      +/-\n==========================================\n- Coverage   98.15%   98.15%   -0.01%   \n==========================================\n  Files          22       22            \n  Lines        3625     3624       -1   \n  Branches     1012     1012            \n==========================================\n- Hits         3558     3557       -1   \n  Misses         24       24            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.35% <44.73%> (+0.02%) | :arrow_up: |\n| #babylon | 96.82% <100%> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 96.88% <\u00f8> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.19% <100%> (-0.01%) | :arrow_down: |\n| src/parser/statement.js | 99.11% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0656717...f6258ab. Read the comment docs.\n. # Codecov Report\nMerging #562 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #562   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0656717...12e4939. Read the comment docs.\n. # Codecov Report\nMerging #565 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #565   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <0%> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e579109...7c5c70c. Read the comment docs.\n. # Codecov Report\nMerging #566 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #566   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <50%> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 96.88% <100%> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.11% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e579109...9026b8e. Read the comment docs.\n. # Codecov Report\nMerging #566 into master will not change coverage.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #566   +/-\n=======================================\n  Coverage   98.14%   98.14%         \n=======================================\n  Files          22       22         \n  Lines        3663     3663         \n  Branches     1023     1023         \n=======================================\n  Hits         3595     3595         \n  Misses         25       25         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 79.66% <33.33%> (\u00f8) | :arrow_up: |\n| #babylon | 96.83% <66.66%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <\u00f8> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.11% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 96.88% <50%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5e4981...7d3d7c1. Read the comment docs.\n. # Codecov Report\nMerging #567 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #567   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3625     3625         \n  Branches     1012     1012         \n=======================================\n  Hits         3558     3558         \n  Misses         24       24         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.33% <0%> (\u00f8) | :arrow_up: |\n| #babylon | 96.82% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e579109...cba4e09. Read the comment docs.\n. # Codecov Report\nMerging #568 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #568   +/-\n=======================================\n  Coverage   98.14%   98.14%         \n=======================================\n  Files          22       22         \n  Lines        3663     3663         \n  Branches     1023     1023         \n=======================================\n  Hits         3595     3595         \n  Misses         25       25         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 79.66% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.83% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e064bb9...a804c2a. Read the comment docs.\n. # Codecov Report\nMerging #571 into 6.x will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\n6.x     #571   +/-\n=======================================\n  Coverage   97.41%   97.41%         \n=======================================\n  Files          21       21         \n  Lines        3596     3596         \n  Branches      960      960         \n=======================================\n  Hits         3503     3503         \n  Misses         49       49         \n  Partials       44       44\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.12% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update eeba714...c6b6609. Read the comment docs.\n. # Codecov Report\nMerging #573 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #573      +/-\n==========================================\n+ Coverage   98.14%   98.18%   +0.03%   \n==========================================\n  Files          22       22            \n  Lines        3663     3737      +74   \n  Branches     1024     1038      +14   \n==========================================\n+ Hits         3595     3669      +74   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.3% <71.42%> (+0.64%) | :arrow_up: |\n| #babylon | 96.89% <100%> (+0.06%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/jsx/index.js | 97.7% <100%> (\u00f8) | :arrow_up: |\n| src/parser/expression.js | 96.9% <100%> (+0.01%) | :arrow_up: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.19% <100%> (\u00f8) | :arrow_up: |\n| src/plugins/flow.js | 98.51% <100%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc87d99...4d93bd7. Read the comment docs.\n. # Codecov Report\nMerging #575 into master will decrease coverage by 0.16%.\nThe diff coverage is 52.94%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #575      +/-\n==========================================\n- Coverage   98.14%   97.98%   -0.17%   \n==========================================\n  Files          22       22            \n  Lines        3663     3668       +5   \n  Branches     1024     1026       +2   \n==========================================\n- Hits         3595     3594       -1   \n- Misses         25       27       +2   \n- Partials       43       47       +4\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.5% <23.52%> (+0.84%) | :arrow_up: |\n| #babylon | 96.78% <52.94%> (-0.06%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/comments.js | 85.91% <52.94%> (-8.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc87d99...4abea67. Read the comment docs.\n. # Codecov Report\nMerging #576 into master will increase coverage by <.01%.\nThe diff coverage is 98.63%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #576      +/-\n==========================================\n+ Coverage   98.14%   98.14%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3663     3673      +10   \n  Branches     1024     1024            \n==========================================\n+ Hits         3595     3605      +10   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.8% <61.64%> (+1.14%) | :arrow_up: |\n| #babylon | 96.81% <90.41%> (-0.02%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 96.92% <98.63%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dc87d99...9725227. Read the comment docs.\n. # Codecov Report\nMerging #578 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #578      +/-\n==========================================\n+ Coverage   98.14%   98.14%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3673     3674       +1   \n  Branches     1024     1024            \n==========================================\n+ Hits         3605     3606       +1   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.81% <100%> (\u00f8) | :arrow_up: |\n| #babylon | 96.81% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/flow.js | 98.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 50ae16d...d3a1813. Read the comment docs.\n. # Codecov Report\nMerging #579 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #579      +/-\n==========================================\n+ Coverage   98.14%   98.15%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3674     3677       +3   \n  Branches     1024     1025       +1   \n==========================================\n+ Hits         3606     3609       +3   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.82% <100%> (+0.01%) | :arrow_up: |\n| #babylon | 96.81% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/tokenizer/context.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b4fba4...2e493fe. Read the comment docs.\n. # Codecov Report\nMerging #580 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #580      +/-\n==========================================\n+ Coverage   98.14%   98.14%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3674     3675       +1   \n  Branches     1024     1024            \n==========================================\n+ Hits         3606     3607       +1   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.78% <0%> (-0.03%) | :arrow_down: |\n| #babylon | 96.81% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.2% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b4fba4...f627dfe. Read the comment docs.\n. # Codecov Report\nMerging #581 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #581      +/-\n==========================================\n+ Coverage   98.14%   98.15%   +<.01%   \n==========================================\n  Files          22       22            \n  Lines        3674     3676       +2   \n  Branches     1024     1025       +1   \n==========================================\n+ Hits         3606     3608       +2   \n  Misses         25       25            \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.79% <83.33%> (-0.02%) | :arrow_down: |\n| #babylon | 96.81% <100%> (\u00f8) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util/location.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.44% <100%> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b4fba4...6d7c912. Read the comment docs.\n. # Codecov Report\nMerging #583 into master will decrease coverage by 1.33%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #583      +/-\n==========================================\n- Coverage   98.15%   96.81%   -1.34%   \n==========================================\n  Files          22       22            \n  Lines        3677     3675       -2   \n  Branches     1025     1024       -1   \n==========================================\n- Hits         3609     3558      -51   \n- Misses         25       60      +35   \n- Partials       43       57      +14\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | ? | |\n| #babylon | 96.81% <\u00f8> (-0.01%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/comments.js | 87.87% <0%> (-6.07%) | :arrow_down: |\n| src/parser/expression.js | 93.57% <0%> (-3.36%) | :arrow_down: |\n| src/tokenizer/state.js | 97.14% <0%> (-2.86%) | :arrow_down: |\n| src/plugins/flow.js | 97.36% <0%> (-1.04%) | :arrow_down: |\n| src/tokenizer/index.js | 97.47% <0%> (-0.98%) | :arrow_down: |\n| src/parser/statement.js | 98.23% <0%> (-0.89%) | :arrow_down: |\n| src/util/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e982c06...0b9f3e1. Read the comment docs.\n. # Codecov Report\nMerging #583 into master will increase coverage by 0.18%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #583      +/-\n==========================================\n+ Coverage   97.99%   98.18%   +0.18%   \n==========================================\n  Files          22       22            \n  Lines        3685     3960     +275   \n  Branches     1028     1183     +155   \n==========================================\n+ Hits         3611     3888     +277   \n+ Misses         27       25       -2   \n  Partials       47       47\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.23% <\u00f8> (+0.8%) | :arrow_up: |\n| #babylon | 96.99% <\u00f8> (+0.22%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/util/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/plugins/estree.js | 99.36% <0%> (+0.14%) | :arrow_up: |\n| src/tokenizer/index.js | 98.75% <0%> (+0.31%) | :arrow_up: |\n| src/parser/comments.js | 92.22% <0%> (+6.3%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb09891...beaa0f8. Read the comment docs.\n. # Codecov Report\nMerging #584 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #584   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files          22       22         \n  Lines        3677     3677         \n  Branches     1025     1025         \n=======================================\n  Hits         3609     3609         \n  Misses         25       25         \n  Partials       43       43\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 80.77% <\u00f8> (\u00f8) | :arrow_up: |\n| #babylon | 96.81% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e982c06...801eb1c. Read the comment docs.\n. # Codecov Report\nMerging #585 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #585      +/-\n==========================================\n+ Coverage   98.15%   98.23%   +0.08%   \n==========================================\n  Files          22       22            \n  Lines        3677     3919     +242   \n  Branches     1025     1157     +132   \n==========================================\n+ Hits         3609     3850     +241   \n  Misses         25       25            \n- Partials       43       44       +1\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 81.55% <0%> (+0.77%) | :arrow_up: |\n| #babylon | 97.01% <100%> (+0.19%) | :arrow_up: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.28% <100%> (+0.08%) | :arrow_up: |\n| src/util/location.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/state.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/tokenizer/index.js | 98.75% <0%> (+0.31%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e982c06...e186d44. Read the comment docs.\n. # Codecov Report\nMerging #586 into 6.x will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\n6.x     #586      +/-\n==========================================\n+ Coverage   97.41%   97.41%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        3596     3598       +2   \n  Branches      960      961       +1   \n==========================================\n+ Hits         3503     3505       +2   \n  Misses         49       49            \n  Partials       44       44\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/plugins/estree.js | 99.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40f9a95...43ef7c8. Read the comment docs.\n. # Codecov Report\nMerging #587 into master will decrease coverage by 0.14%.\nThe diff coverage is 96.66%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #587      +/-\n========================================\n- Coverage   98.15%    98%   -0.15%   \n========================================\n  Files          22     22            \n  Lines        3680   3712      +32   \n  Branches     1026   1036      +10   \n========================================\n+ Hits         3612   3638      +26   \n- Misses         25     27       +2   \n- Partials       43     47       +4\n```\n| Flag | Coverage \u0394 | |\n|---|---|---|\n| #babel | 79.87% <10%> (-0.84%) | :arrow_down: |\n| #babylon | 96.79% <96.66%> (-0.03%) | :arrow_down: |\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/parser/expression.js | 96.94% <100%> (+0.01%) | :arrow_up: |\n| src/parser/lval.js | 98.06% <100%> (+0.02%) | :arrow_up: |\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/parser/statement.js | 99.14% <95.45%> (+0.02%) | :arrow_up: |\n| src/parser/comments.js | 85.91% <0%> (-8.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1e2c32...04b4086. Read the comment docs.\n. \n",
    "xtuc": "Yes absolutely.\nDiff:\n| name                            | run    |\n|-|-|\n| ./fixtures/angular.js           | -18ms |\n| ./fixtures/backbone.js          | -9ms   |\n| ./fixtures/ember.debug.js       | -39ms |\n| ./fixtures/jquery.js            | +1ms  |\n| ./fixtures/react-with-addons.js | -15ms  |\nBranch refactor-tokenizer-types:\n| name                            | run    |\n|-|-|\n| ./fixtures/angular.js           | 494ms  |\n| ./fixtures/backbone.js          | 46ms   |\n| ./fixtures/ember.debug.js       | 1223ms |\n| ./fixtures/jquery.js            | 243ms  |\n| ./fixtures/react-with-addons.js | 525ms  |\nBranch master:\n| name                            | run    |\n|-|-|\n| ./fixtures/angular.js           | 514ms  |\n| ./fixtures/backbone.js          | 55ms   |\n| ./fixtures/ember.debug.js       | 1262ms |\n| ./fixtures/jquery.js            | 242ms  |\n| ./fixtures/react-with-addons.js | 510ms  |\nWould be great to include your performance tests in Babylon tests (only on CI). What do you think about it?. @danharper I made some changes to improve the readability. I replaced the spread operators with property shorthands.. * REPL with latest\n* REPL with react\nThe bug seems related to the React preset.\nIs the REPL not using Babylon6?. @gsathya The spec says that:\n\nIt is a Syntax Error if PropertyNameList of PropertyDefinitionList contains any duplicate entries for __proto__ [...]\n\n(source). @danez is currently working on compatibility with ESTree #277. See babel/babel#4987 for the test suite setup.. Based on @kristofdegrave's work, I can make a PR with this https://github.com/babel/babylon/compare/master...xtuc:feat-optional-chaining\nI have the Babel part as well https://github.com/babel/babel/compare/7.0...xtuc:feat-optionnal-chaining\nI currently only support the basic syntax:\njs\na?.b = 42\ndelete a?.b\nfoo?.bar(). Nice work :+1:. I noticed that Jest ran only one test suite (test/index.js). Could we tell Jest to consider each fixtures (or directory) as a test suite to get a better output?\n\nI was thinking, you could use it programmatically in test/utils/runFixtureTest.js. What do you think?. To be sure to understand well, could you please provide a use case for this?\nThis will be valid, right?\njs\na:\nfor(;;) {\n  break b;\n}. I updated the Babel 7 upgrade guide accordingly in babel/babel.github.io@dd2586aaacd45a0157fdff763f24f1240659fc61. Isn't it the same as #259?. Babylon does not have a default export. You can direcly use the parse function with:\njs\nimport {parse} from 'babylon';\nconsole.log(parse); // => Function. If it's ok for you can I close this issue? Feel free to reopen it if needed.. Yes, go ahead :+1: . Good idea :+1: \nRemoving the token array would be a breaking change for tools built on top of Babel (at least I guess so). I'm fine with the performance boost but we need a option in case the user wants them.. Yes good catch, that correct. I'll ask the Babylon folks for a new release.. The changelog was added and no new commits were added to the branch. I did a git-tag https://github.com/babel/babylon/releases/tag/v6.17.0. I was thinking it will infer the void type since It returns nothing, doesn't it?. Ok, thanks. The dynamicImport Babylon plugin could also include the objectRestSpread plugin.\nIf this make sense in Babylon, I can make the PR.. Thanks for the PR @jridgewell, that's a nice job.\n\nDoes anyone know why .? wasn't considered? \n\nMaybe because of the syntax? a.?b vs a?.b. What if we expose the option as a Babylon plugin? This would allow to push this plugin from a Babel plugin if it needs it.. Nice job @jridgewell.\nDo you think we could merge classProperties and classPrivateProperties plugins in Babylon? Since it just adds the static syntax.. @babel-bot move to babel/proposals. I made a first try here https://github.com/babel/babel/issues/4987.. @hzoo what a about an AST repo with the Babel AST spec? We could PR and discuss there.\nI want to avoid mixing AST and implementation discussions.. I agree with @JamesHenry, having a generic TypeAnnotation node is very powerful. \nIt seems that the solution proposed by @danez could solve @thejameskyle issue? It wouldn't work with mixed TS and Flow annotations but that doesn't work anyway.\nIf we want to have the information at a node granularity, we can store the typeExtension in the node.. This looks like an error in Babylon itself. Could you please provider the input source?. I'll go ahead and merge this. Tests are green.\nThanks @gebilaoxiong!. right @nicolo-ribaudo good catch.. #### Identifier\nIt is an identifier with a specific type.\nIt would be confusing for developers because they will be forced to check the type of the identifier.\nMost of them will omnit it and will cause some bugs.\nPrivateName\nMore explicit.\nI don't have much context here, but I guess most transformation within a class will be with both PrivateNames and Identifier.\n. Ok sure, this make sense.. Do we need the original use case? It's not important in the expected AST.\nI would suggest something like that:\n```js\n```. I did it in 1d5932c27cfc1ff9ecebbeb3e9ccf11f448cdc26. Sure, of course. I will update it.. I'm not a fan of passing boolean as argument in a function. I think it reduce readability.\nI would suggest creating two separated functions: parseTaggedTemplate and parseTemplate. What do you think about that?. Throw on invalid is the default behavior. Could you add a default value?\njs\nreadCodePoint(throwOnInvalid = true). Note: this is a good example of what I explained above. Reading line says nothing on what the function actually does.. What about that:\njs\nnode.quasi = this.parseTemplate({ isTagged: true });. Same as above. I would prefer:\njs\nout += this.readEscapedChar({ inTemplate: true, throwOnInvalid: true });\nAre you ok with that?. Yes that's true. @danez what do you think about that?. Yes, you are right, this isn't matching the style of the rest of Babylon.. We could maybe explain what's the difference between these two methods.. Should we set the node.await to false there? According to the changes in the spec I would expect a boolean.\nSince undefined is falsy this isn't an issue.. I also think so. Don't have much context to answer you. Maybe @danez can.. I would add a new line here.. Do we need to explicitly write void for the returned type?. I think we could pass an object here, like:\njs\nmaybeParseFunctionBody({ allowExpression: false, allowMissingBody: type === \"ClassMethod\"});\nLooks better than comments to me.. What about a better integration with TypeScript here? Early grammar errors are great for online editor (like Babel's REPL). Babylon has that kind of logic for JavaScript.. I added the plugin check, updated the corresponding documentation and also added an explicit error message since it's a new syntax.. Doesn't parse yet, need to be implemented (i'm still WIP). Doesn't parse yet, need to be implemented (i'm still WIP). These are char codes. I'll add some contants to improve readability, thanks.. I would expect a function returning an object to be as fast as just an object (since it will be inlined quickly by the engine). Could we try with a function MakeSourceLocation which returns the location object.\nOtherwise ok for me :+1: . You mean makePredicate([...] + this.hasPlugin('match') ? 'match' : '') ? Yes because match shoudln't be a keyword without the plugin.. Yes, that makes sense. Or consider it as a keyword only in a certain context, but more ifs would be spread across the codebase I guess.. ",
    "greenkeeper[bot]": "Version 0.38.1 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 16 commits .\n\n4e6b551 -> v0.38.1\n3cc109c Merge pull request #1186 from rollup/gh-1176\nb59263e Merge pull request #1179 from kzc/drop-unused-inner-functions-and-classes\nd4a0e6e Merge pull request #1182 from vinkla/patch-1\n2eebe3d deconflict function expression IDs (#1176)\n8bd83f0 Simplify repository value\n2744947 drop unused function and class declarations within functions (#1108, #1178)\na9f342c Merge pull request #1174 from rollup/gh-595\nb624d67 remove, and warn about, unused imports from external modules (#595)\n7b3402f Merge pull request #1173 from rollup/gh-492\ndbc4c48 Merge pull request #1172 from rollup/gh-444\n58f9f26 support async functions (#492)\n5f8205e warn on empty bundle (#444), and remove some tests that are no longer testing anything\na502f30 add back @btd fix for #1104\n47e712d Failling test for #1104\n\nThere are 16 commits in total. See the full diff.\n\n. ## Version 0.38.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits .\n\n4b6b6f7 -> v0.38.2\ne1e9eaf Merge pull request #1191 from rollup/gh-1011\nd08a805 prevent irrelevant warning in test\naefbed6 warn if exporting an IIFE that looks like a function declaration, and wrap in parens if necessary (#1011)\n1d83cbf Merge branch 'master' of https://github.com/rollup/rollup\n0d3ab7b use Set rather than Map for deshadowing\nb287370 Merge pull request #1188 from rollup/gh-997\nd249c7e preserve var declarations in dead branches\n\nSee the full diff.\n\n. ## Version 0.39.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits .\n\n415985b -> v0.39.1\n38bb9d9 Merge pull request #1204 from rollup/gh-1198\nd1d667f ignore var inits in dead branches - fixes #1198\n11a2830 Merge pull request #1202 from rollup/gh-1082\n532dff1 change recommendation to local installation of rollup-watch (#1082)\nc597b91 Merge pull request #1200 from rollup/gh-1197\n708fb98 warn on missing format (fixes #1197)\n979cfc2 update a few dependencies\n\nSee the full diff.\n\n. ## Version 0.39.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits .\n\na00d391 -> v0.39.2\n04dbe12 Merge pull request #1205 from rollup/gh-1153\n595fa58 prevent mutation of cached ASTs (#1153)\n\nSee the full diff.\n\n. ## Version 0.41.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits .\n\ne938d86 -> v0.41.1\nb0a83b8 Merge pull request #1234 from rollup/gh-1233\n585bde0 test for #1233\n766e91d include new expressions where callee is a class (#1233)\n\nSee the full diff.\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\nd282a9a 4.0.1\n7b13d4c fix\n\nSee the full diff.\n\n. ## Version 0.18.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\ndcdfbee 0.18.1\n154215d remove t.is and t.not from enhanced assertions\n\nSee the full diff.\n\n. ## Version 2.30.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv2.30.2\n<a name\"2.30.2\">\n2.30.2 (2017-03-06)\nBug Fixes\n\nforce push (5b38dbc9)\n\n\n\nCommits\nThe new version differs by 1 commits .\n\n5b38dbc fix: force push\n\nSee the full diff.\n\n. ## Version 2.30.3 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv2.30.3\n<a name\"2.30.3\">\n2.30.3 (2017-03-07)\nBug Fixes\n\nallow node v4 (#203) (66d04e89)\n\n\n\nCommits\nThe new version differs by 1 commits .\n\n66d04e8 fix: allow node v4 (#203)\n\nSee the full diff.\n\n. ## Version 0.43.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits .\n\nc5b1fd4 v0.43.1\n\nSee the full diff.\n\n. ## Version 0.45.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 0 commits0.\nfalse\nSee the full diff\n\n. ## Version 0.46.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits0.\n\n188539e v0.46.0\n\nfalse\nSee the full diff\n\n. ## Version 7.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n575edf1 7.0.1\nf047d04 Re-add es6 env option (#24)\n\nSee the full diff\n\n. ## Version 2.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n5827081 2.0.1\ncaeb7d8 fix missing TERM cases\n\nSee the full diff\n\n. ## Version 0.45.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\nabab199 -> v0.45.0\n328a8fa throw helpful error if code or map are accessed from bundle.generate promise\n1be3478 Merge branch 'gh-1474' of https://github.com/caccialdo/rollup into gh-1474\na76b35e Add tests for async bundle transformers\n4980d71 Lint fixes\n73bc503 Fix tests to support async transformBundle\n05fb800 Support for async transformBundle\n\nSee the full diff\n\n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n3951b04 3.0.1\n7d0c331 fix transform (#154)\ncad2773 3.0.0 changelog [skip ci]\n\nSee the full diff\n\n. ## Version 0.47.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 6 commits.\n\nbe426f4 -> v0.47.1\n08a4ed5 Merge branch 'master' of github.com:rollup/rollup\n1ccf54d Merge pull request #1548 from rollup/gh-1547\na61e61b squelch warning from chalk\nf85ffe8 ignore external namespace imports when deshadowing - fixes #1547\n3c1b2ff update dependencies, lint\n\nSee the full diff\n\n. ## Version 0.47.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\nc5886a4 -> v0.47.2\n\nSee the full diff\n\n. ## Version 0.47.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n6b94155 -> v0.47.3\n586e255 Merge pull request #1551 from rollup/gh-1550\nc364ec4 deshadow aliased imports (#1550)\n1b48335 Merge pull request #1549 from alippai/patch-1\na1c19b8 Add appveyor NodeJS 8 builds\nae996b7 Add travis for NodeJS 8\n3353338 check for process.hrtime, closes #1495\n\nSee the full diff\n\n. ## Version 0.47.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\naaca8b5 -> v0.47.4\n\nSee the full diff\n\n. ## Version 0.48.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nf474b07 -> v0.48.1\ne11a2fd Merge pull request #1568 from rollup/fix-watch-deprecations\n38e2fca update configs when watcher is restarted, and print deprecation warnings in watch mode\n\nSee the full diff\n\n. ## Version 0.49.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n976043f -> v0.49.1\nbc0745f Merge pull request #1586 from lukastaegert/fix-regressions\n8052520 Resolve #1587\nfc70479 * Assume that unknown nodes always have effects\nee4faf2 Resolve #1584\ncc92d76 Resolve #1585\na000fdd Add options parameter object to .hasEffects...() calls\n\nSee the full diff\n\n. ## Version 0.49.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n0c85e2c -> v0.49.2\n8bcf04a Merge pull request #1591 from lukastaegert/fix-more-regressions\n8bfa73f Update test to include 'use strict' as a statement that should not be\n0653a10 * Resolve #1592\nd011c03 * Do not assume declarations have assignedExpressions until we refactor\n\nSee the full diff\n\n. ## Version 0.49.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 14 commits.\n\n0d20ed1 -> v0.49.3\ndb82567 Merge pull request #1597 from btakita/fix-issue-1596\nc90b01e add test for #1606\n604fdda Merge branch 'master' of https://github.com/sunnylost/rollup into sunnylost-master\ncef0db2 Merge pull request #1607 from curran/patch-1\nedc8ac6 Merge pull request #1604 from lukastaegert/use-paranoid-defaults\n62582d3 Fix typo: outpot -> output\n0ffac58 merge command & config's output options\ndd1db1e Resolve the easy part of #1595. The main part, however, remains\nc15cfe3 * resolve #1601\na83b309 * Properly treat mutations of the results of logical expressions\n7148ed5 Resolve #1603 and make sure we do not break this in the future\n3126297 Make all nodes return \"true\" for the new effects. This should avoid\n4eda626 mergeOptions inputOptions includes config.watch option.\n\nSee the full diff\n\n. ## Version 0.57.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n07e641e v0.57.2\n\nSee the full diff\n\n. ## Version 0.57.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n31e8fe8 v0.57.3\n\nSee the full diff\n\n. ",
    "djcoin": "I found this out because of a plugin taking JSX in and outputting JSX, but the problem remains conceptually. If the JSX is transformed in another JSX but not in a call to React.createElement, it will have this bad behavior, see: \nhttps://jsfiddle.net/gszkduk2/7/. Does anyone have any feedback on this? Thanks!. Well the thing basically boils down to this for me:\njs\nvar x = \"foo\", bar = <div title={x} />;\nand \njs\nvar bar = <div title=\"foo\" />\nShould behave the same, \"foo\" should not be escaped by babel before being given to React in the second case. React is waiting for a normal js variable.\n. > In the second example \"foo\" would be need to escaped according to xhtml specs\nWould it? This is react's task I would say.. ",
    "stevenyap": "To those who may have found this post, I solved this problem by changing my .babelrc to\n{\n  \"presets\": [\"babel-preset-react-native\"]\n}. ",
    "micopc": "Hi, I'd like to work on this issue, if that's ok. ",
    "existentialism": "Fixed with https://github.com/babel/babylon/pull/317. @AvraamMavridis looks like @koba04 just published a PR =/ don't let that stop you from contributing on other babel/babylon issues and bugs!. We'll probably want a eslint-config-babel that contains no styling rules (or also extend https://github.com/prettier/eslint-config-prettier)?. Yeah, looks like an unrelated (to this PR) issue with the latest b7 alpha, will take a look after lunch.. What about:\n\nFound super() inside method construtor, it is only valid inside a class constructor.. @Jamesernator thanks for the PR, but it looks like great minds think alike: https://github.com/babel/babylon/pull/406. @chikara-chan thanks for the PR! I was working on a related issue with rest params in #424 that covers this and arrays as well.\n\nI'll update it with the test case from #308 too.. @alxpy it's from flow's parser tests, run by run_flow_tests.. Weird, swore I tried this too... guess you have the magic touch lol\n\ud83d\udc4d. Derp, my fault, thanks!. @danez orz, missed that it was included in that PR!. Nah, this is consistent with your change, just does it for more than ObjectTypeIndexer.. Yeah, we handle it in a diff path if we detect a colon.\n. @aissaghouti thanks for the report, I believe it actually has to do with 00 and sourceType: 'module':\nhttps://astexplorer.net/#/gist/fd4a926b89b0f6aedf1d31f36b396704/5dacb5d52116c75443c860554d104b6661e85e40. @aissaghouti no inconvenience!. @nicolo-ribaudo go for it!. lol nvm, was handled already.. @echenley https://github.com/babel/babylon/issues/617 landed support, should be released soon!. @nicolo-ribaudo nice! @hzoo and I were discussing using state for this vs a param a while back too!\nCan also use a set for state.noArrowParamsConversionAt (to avoid lots of potential indexOf checks)?\nBut for now, LGTM \ud83d\udc4d. Fixed in https://github.com/babel/babylon/pull/575. This looks fine, but we may also want to ref acorn's fix, as there's also another case of handling contextual yield.. @wdhorton shouldn't be an issue (guess it depends on the dep?)... we pull in regexpu for transform-es2015-unicode-regex for instance.. I'll add the TTY fix that @loganfsmyth added on babel/babel too. Should move this to https://github.com/babel/proposals?. @josephfrazier thanks!. @azz thanks for the issue! we've actually already created a meta task over at https://github.com/babel/proposals/issues/6 for this!. @jbrown215 yeah, can backport to 6.x after this lands. may also want to add support for DeclareOpaqueType, OpaqueType, etc to babel-types and babel-generator after this lands too.. @charlike that is exactly what @hzoo is proposing :)\n\nPossibly add another Babylon plugin for ESLint so that we don't have to mutate the AST afterward, effectively making babel-eslint a minimal wrapper.\n\nHe originally proposed an eslint (in this case naming it estree may make more sense) plugin for babylon.. @Andarist mind rebasing and updating the test262 whitelist again? I believe all the items you marked are fixed by https://github.com/tc39/test262/pull/1187. @Andarist merged!. @Andarist thanks!. Fixed by https://github.com/babel/babylon/pull/684, thanks @JamesHenry!. @pudility Hey there \ud83d\udc4b ! In general, beyond checking out the obvious (like the README, CONTRIBUTING, etc)... the babel-handbook by @thejameskyle is a great resource for both a very high-level overview of Babylon and understanding its relationship with Babel.\nFor me personally, I did the boneheaded approach of just diving in the code and spending tons of time experimenting with astexplorer, which you will find to be an invaluable resource. (Still learning something new, every day!)\nI know all of us on the team are definitely interested in anything we're missing/lacking when it comes to getting new users/contributors onboard, so definitely let us know! As always, if you have any questions, feel free to join our slack channel.\nAlways happy to help in any way we can, and looking forward to your contributions!\n(Going to close this for now, as there's nothing really actionable.). @JamesHenry IIRC this is fixed in decorators2. @JamesHenry not sure how others feel re: making changes to old decorator plugin, but I'm fine with it... and nice side effect: it'll help remove some comment-related hacking in prettier as well.. @pudility sounds good, but do you mind if we check if @rajikaimal has made any progress first (just want to make sure they didn't make a bunch of effort on it)?\n@rajikaimal friendly ping! :). @pudility just to be clear, this task is to split up the exportExtensions plugin inside of Babylon into exportDefault and exportNamespace since they are two separate proposals.\nCheck out the link to CONTRIBUTING in the original post by @hzoo for info on adding a new plugin. The Babel side of this was completed in https://github.com/babel/babel/pull/6080 (but we'll probably need to follow up with two different syntax-enabling plugins once this work is done).. I'll do a PR for prettier, have some of it started already.. @JamesHenry \ud83d\udc4d, I was going to update that (sorry wasn't clear), but if you got it... go for it :). @pudility slight gotcha, notice the expected.json you just added is empty?\nThe test runner assumes the following sort of folder structure:\n/test/fixtures/{category}/{subject}/{test_name}\nYou currently have:\n/test/fixtures/es2015/destructuring/parenthesized-lhs-object/parenthesized-braces-expression\n/test/fixtures/es2015/destructuring/parenthesized-lhs-object/parenthesized-brackets-expression\nIt isn't actually running your nested tests:\n\nTo get this to work, you'll want to flatten this by a level:\n/test/fixtures/es2015/destructuring/parenthesized-lhs-object/actual.js\n/test/fixtures/es2015/destructuring/parenthesized-lhs-object/options.json\n/test/fixtures/es2015/destructuring/parenthesized-lhs-array/actual.js\n/test/fixtures/es2015/destructuring/parenthesized-lhs-array/options.json. @pudility no need to apologize, we definitely appreciate you helping us clean this up!. @pudility sounds good, but next time you can always force push to this branch too!. @pudility thanks!. Related: https://github.com/babel/babel/issues/6243. @mroch glad yall caught it! sorry I didn't report it sooner, was on my TODO list \ud83d\ude2c. @danez not sure if there's a cleaner way to do this check w/o consuming?. Agreed. Maybe something like:\n\nTo run only a single test, add \"only\": true to the options.json inside any test fixture folder (you may have to create the file if it doesn't exist).. For example, let's say we want to only run the test for the test/fixtures/comments/basic/shebang-import fixture.\n\nAdd the only option to its options.json:\njson\n{\n  \"sourceType\": \"module\",\n  \"only\": true\n}\nThen, run the tests using the same command as before:\nsh\n$ npm run test-only. Good catch, updated!\n(Also, TIL about function.sent lol). There's another check inside parseIdentifier/shouldAllowYieldIdentifier via checkReservedWord.\nIt does give a better error message (\"yield is a reserved word\") vs (\"Unexpected token\"). Updated!. Nit: typo. Probably need to manually wire up a link. Maybe instead of \"We do allow\" we say (since, forking is an option by virtue of it being public), \"We recommend forking Babylon\"?. > We currently do not have an official API available for parser plugins, as. it's -> its. Maybe:\n\nor the resulting ecosystem\n\n?. Maybe drop \"I would\" and combine with following point?\n\nCreate a new issue that describes the proposal (ex: #538). Include any relevant information like proposal repo/author, examples, parsing approaches, meeting notes, presentation slides, and more.. Nit: add -> Add (for consistency). Can also do if (!this.inModule) here. May want to make this consistent with other sourceType errors?\n'import.meta' can only be used with 'sourceType: module'. Is this still needed? Couldn't see where it was used (or overridden). Is this expected behavior in flow? Using the fixture from the matching typescript test in astexplorer seems to produce a funky result.\n\nIf it is, we should probably add a matching flow test fixture.. Nit, might read a little better as:\n\nUsing the export keyword between a decorator and a class is not allowed.  Please use export @dec class instead\". Any better name suggestions? \ud83d\ude43 . \n",
    "gsathya": "\nWhen ObjectLiteral appears in a context where ObjectAssignmentPattern is required the Early Error rule is not applied. In addition, it is not applied when initially parsing a CoverParenthesizedExpressionAndArrowParameterList.\n\n. > Also the repl seems to work for me successfully.\nDoes the link I pasted work? It doesn't throw a syntax error for me. . > Isn't this #661?\nNo, that's for binding pattern. This is for assignment pattern. . ",
    "rattrayalex": "Related, I believe, is that <div>&nbsp;</div> translates to a breaking space, which @vjeux points out in this comment on the prettier repo, referencing this flow ast compared with this babylon ast. \nIn any case, I'm hopeful that the removal of extra that @hzoo mentions above is the real culprit, and worth fixing, as @danez mentioned above. Comparing the original fix to the current code, I'm under the impression that the node.extra = null hack is already unnecessary. \nI'll try simply removing said hack and testing locally. . Presumably JSXText should also be changed to read from raw, correct?. K, I think I have this addressed between https://github.com/babel/babylon/pull/344 and https://github.com/babel/babel/pull/5256 , though I might be missing something. . As discussed in the babel slack, I'm also interested in contributing to this once the spec is a bit more settled. \nI previously implemented a ?. feature for LightScript (a fork/superset of JS built on babylon/babel). In case it helps anyone, here is: \n\nThe babel transform \nThe associated tests\nThe commit adding the feature to the lightscript parser (a fork of babylon). It uses poor naming (\"elvis operator\" isn't accurate) and isn't backwards-compatible; a different approach would be necessary. \n\nMy version doesn't currently support assignments or delete, though I may add those soon. \nFor now I'll wait for a bit to hear back from @kristofdegrave and the babel team as to whether the spec seems stable. . I'm somewhat concerned that I was inadequately creative in coming up with encoding-related edge-cases, especially given that my knowledge of xhtml-vs-js encoding is limited. Would appreciate any input on that area!. As noted in https://github.com/babel/babel/pull/5256 , this should not go out before 7.0. \nCan/should I change the merge target @danez ? Can you?\nEDIT \u2013\u00a0I will rebase and change target. Rebased and changed target. Okay. Fixed conflicts \u2013\u00a0is this ready to be merged then?. Perhaps relatedly, computed methods with decorators also do not parse: \njs\nclass X {\n  @d\n  ['m']() {}\n}\ngives Unexpected token (3:10)\n(perhaps worth nothing that Flow's parser parses this incorrectly, but parses the decorated generator method correctly). Yep, this looks closable to me as a dup. Thanks!. Cool - I also like \"A class name is required\". Thoughts/suggestions from\nanyone else?\nI'll probably leave as is if nobody else has an opinion if that's cool\nOn Wed, May 3, 2017, 21:38 Henry Zhu notifications@github.com wrote:\n\n@hzoo approved this pull request.\nLove it - dono if anyone else had opinions on the message itself\nother suggestions: (probably bad since maybe shorter is better in this\ncase) - most of the time you would have the codeframe anyway with Babel.\n\na class name is required\nclass names are required if not a default export\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/pull/509#pullrequestreview-36186241,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAq_LgFGBmB7W9wNbo019pB8vdnbGNEtks5r2VYugaJpZM4NQK3T\n.\n. Awesome, thanks guys! Updated to A class name is required. \n",
    "AvraamMavridis": "Can I take this one?. @existentialism @koba04 no worries. :). ",
    "koba04": "@AvraamMavridis I'm sorry, I missed your comment.. If nobody doesn't take that, I can take it.. Thanks!. ",
    "phpnode": "Should NumericLiteralTypeAnnotation also become NumberLiteralTypeAnnotation in line with Flow?. @danharper ObjectTypeCallProperty is always a method, I don't think it's necessary there.. ",
    "JamesHenry": "I am going to dig into this ASAP, but just wanted to note in advance that it would be great to avoid duplicating the efforts we have already made on https://github.com/eslint/typescript-eslint-parser, which is solving a very similar problem of ESTree and TS AST interop/conversion.. @danez \n\nIt maybe even easier to adjust the TypeScript parser to have an option to output babel-compatible AST\n\nSo TS + typescript-eslint-parser is already a way to effectively take TypeScript source code and produce an ESTree AST.\nIf I understand correctly, the work currently being done on Babel + ESTree is around Babel outputting ESTree, but if it were possible to for Babel to also consume ESTree as an option, then we potentially have a lot of the moving parts already...\nI don't yet know enough about Babel to know how that relates to @hzoo task list  in the description above. @stephen As mentioned in slack, I will document what we have done in typescript-eslint-parser. It is something we have already had to tackle. Hey, @stephen! Thanks for mentioning typescript-eslint-parser, that has been over a year's worth of effort and we have covered all kinds of edge cases relating to conversion structure to complement ESTree-powered tooling (i.e. mainly ESLint, but also prettier), and so I definitely thinks it makes sense to align on the AST structure.\n@DanielRosenwasser what are your thoughts on this PR in general? It this something that the TS Team is officially onboard with? Or does it fall mainly into the category of a community driven tool, like say, TSLint?\nLet me know if I can help!\nP.S. How come 1.8? \ud83d\ude04 . Congrats, @andy-ms! Awesome work \ud83d\ude04 \nWe can keep fine tuning the AST together but it's fantastic to have this merged!. All hail robot @hzoo \ud83e\udd16 \ud83d\ude04 . Can't believe I missed that \ud83d\ude05 thanks, @andy-ms! I'll keep you posted on the other points I find.. Same thing with leading comments:\njs\n/* foo */\nif (/* bar */  a) {}\nIt appears Espree, Esprima, Flow and Recast have one view of the world, Acorn and Babylon have another.\nEspree:\njs\n{\n  \"type\": \"Program\",\n  \"start\": 0,\n  \"end\": 31,\n  \"range\": [\n    10,\n    30\n  ],\n...\nEsprima:\njs\n{\n  \"type\": \"Program\",\n  \"range\": [\n    10,\n    30\n  ]\n...\nFlow:\njs\n{\n  \"type\": \"Program\",\n  \"range\": [\n    10,\n    30\n  ],\n...\nRecast:\njs\n{\n    \"type\": \"Program\",\n    \"range\": [\n      10,\n      30\n    ],\n...\n\nAcorn:\njs\n{\n  \"type\": \"Program\",\n  \"start\": 0,\n  \"end\": 31,\n  \"range\": [\n    0,\n    31\n  ],\n...\nBabylon:\njs\n{\n    \"type\": \"Program\",\n    \"start\": 0,\n    \"end\": 31,\n    \"range\": [\n      0,\n      31\n    ],\n.... It seems the same groupings of parsers hold true for observed differences in TemplateLiteral.quasis location data too...\njs\n`42`;\nEspree:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"start\": 1, // This combined with the range seems like a bug?\n      \"end\": 3,  // This combined with the range seems like a bug?\n      \"range\": [\n         0,\n         4\n      ],\n...\nEsprima:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"range\": [\n         0,\n         4\n      ],\n...\nFlow:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"range\": [\n         0,\n         4\n      ],\n...\nRecast:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"range\": [\n         0,\n         4\n      ],\n...\n\nAcorn:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"start\": 1,\n      \"end\": 3,\n      \"range\": [\n         1,\n         3\n      ],\n...\nBabylon:\njs\n{\n   \"quasis\": [{\n      \"type\": \"TemplateElement\",\n      \"start\": 1,\n      \"end\": 3,\n      \"range\": [\n         1,\n         3\n      ],\n...\n. I have a fix ready for this. I did take a brief look at the code for TypeParameterDeclaration but I am not yet up to speed on it and did not have time to figure out a solution yet. Indeed it is, thanks, @existentialism!\nUpdating my parser config to use decorators2 instead of decorators fixes it, however it clashes quite badly with the TypeScript support, because TS has more options for things like parameter decorators than decorators2 allows (cc @andy-ms)\nIs there any reason not to apply the location fix to the decorators plugin as well? That works perfectly with TypeScript as far as I can tell. (I'm happy to submit the PR if it will be accepted). (Updated the description a bit as this does not just apply to method decorators). Yep, and I'm sure @vjeux will be happy about that \ud83d\ude04 \n@hzoo @danez How do you feel about me adding the location fix to the original decorators plugin?. (Other than test output) This is all that would need to change AFAICT: https://github.com/babel/babylon/compare/master...JamesHenry:target-decorators-location?expand=1#diff-71f5ec1ce64b229d1ebbcf5d9a486d8a. Thanks @jridgewell, PR opened here https://github.com/babel/babylon/pull/699. The PR was merged! Thanks all. @jseminck Can you please confirm the behaviour with the original PR? AFAICT all I did was backport the fix, so it would suggest that the fix was missing this case. Andy and I worked together to align on using existing node type precedents from Flow where possible, and where they are syntactically consistent across Flow and TypeScript.\nThis was something that @nzakas was also very keen to do right from the get go when introducing type information into ESTree related parsers.\nOf particular note is the fact that TypeAnnotation nodes have officially been accepted as part of an extension to ESTree:\nhttps://github.com/estree/estree/blob/master/extensions/type-annotations.md\nI realise Babylon is no longer exactly ESTree, but it is still within that \"family\", and shouldn't diverge any more than is absolutely necessary. Therefore, at the very least, it would not make sense to introduce a TSTypeAnnotation IMO.\nIf two things are syntactically equivalent across Flow and TypeScript, why would we need a fundamentally different AST? If there were differences in semantics for the same syntax, that would be applied later by the relevant parser/tooling within that context.\nThe more the ASTs diverge, the harder it would be to assess pieces of consistent syntax and look to standardise them in future, like was done with TypeAnnotation, for example.\n\nJust to note: Without this change it is very difficult to build tools that support both Flow and TypeScript, which I'm currently trying to do so it would be good to get this change in sooner rather than later.\n\nPlease can you elaborate on specific issues you are facing? We have managed to do exactly this with Prettier. I am not saying the overlap in node types made it easier to achieve, but I would be interested to know the exact problems you are facing.\nPerhaps with specific cases to hand, it may turn out that there are currently cases where we have the same AST where we fundamentally shouldn't, and the solution would be to just diverge/namespace those specific instances rather than apply it to absolutely everything.. Excuse the really, really long comment, but I just feel some further background to the status quo would be useful:\ntypescript-eslint-parser has been around for quite a long time and effectively was the first tool to try and define TypeScript nodes in an ESTree (@thejameskyle you wrote ESLint a few times, where I think you meant ESTree) compliant way.\nNaturally, there is a lot of syntax which does not have precedent in ESTree, but there was, however, a lot of identical syntax in Flow already and so its ESTree-like node structure made a lot of sense to use as a template. In cases where there was no precedent in ESTree or Flow, we simply had to create something from scratch which was ESTree-like.\nFast forward a bit and I used typescript-eslint-parser to allow for TypeScript support to be added to Prettier. It is naturally currently built to look for and reprint the TypeScript nodes set by typescript-eslint-parser. (@azz would be a good person to comment on the pros and cons of supporting TypeScript and Flow nodes in the same codebase as he has done far more work on the actual printing of nodes than I have.)\nFast forward even further and the TypeScript team decided to dedicate time and energy into parsing TypeScript code directly with Babylon, Andy has done a great job on this. Of course, it made sense for the couple of years of existing precedent from typescript-eslint-parser not to be ignored during this process, and I was keen to work with Andy to align on the AST that babylon and typescript-eslint-parser produce and we are now very close.\nMy long-term hope is that this effort will allow for typescript-eslint-parser to use babylon behind the scenes, instead of parsing with the TypeScript compiler and converting the AST itself and that babylon would then power the TypeScript parsing in Prettier as well. It will involve throwing a lot of my own code away, but I am committed to avoiding competing standards wherever possible and I think that is the best way.\nThe reason for providing this backstory is just to illustrate that this PR has a big impact on all of that alignment work and future integration work into Prettier and ESLint plugins, so it would be great to take some time to discuss it.\n\n\nWe don't have a lot of opportunities to make changes to the Babylon AST, we should not be changing things frequently.\n\nI definitely agree, and we should not rush the changes through either.\n\nSeeing that there is no shared standard between the two grammars, and no guarantee that both will remain aligned, it does not make sense to try uniting the two grammars.\nThe TypeAnnotation node in ESLint is hardly a shared standard\n\nI feel like this is a bit of a chicken and egg situation - before this very recent effort by Andy and me, had anybody actually taken the time to try and identify commonalities in syntax across the full \"languages\"? That initial extension to ESTree was very small by design, because there was not enough information to hand to standardise more things. I believe we now have that information and some buy-in from Flow and TypeScript team members could actually make standardisation of overlapping syntax a possibility.\n\nType annotations within Flow and TypeScript have different behavior, I need to mimic that behavior in tooling that I am building. Which I'd get into further, but based on previous interactions with TypeScript team members I'm not going to.\n\nI am a bit confused by this, as you are currently not interacting with any TypeScript team members on this PR and I don't believe you and I have ever directly interacted before. I think requesting specifics about the issues you are facing is a reasonable thing to do on an important PR like this. There may be other solutions to the problem, such as the one suggested by @danez.\nYou are a far more important member/contributor to the Babel ecosystem than I am, and I have huge respect for the work you do. I am not trying to hold up your PR for the sake of it, I am just providing all the context I can (which you would not necessarily be expected to know about) and trying to help ensure we consider all the options.\nAll of the tools (typescript-eslint-parser, ESLint plugins, Prettier etc) can naturally all be updated for the right solution. I am not at all against making further changes, but so far all the context you have provided is that you are building a tool and that you would like this to be the solution to some issues you are facing. It would be great to get a bit more info from you.. @loganfsmyth Thanks for sharing your thoughts, sorry for the delayed response.\nI definitely appreciate where you and @thejameskyle are coming from with this, and it has been really useful for me to learn in this thread that the Flow team has explicitly stated they are not open to aligning on things like this. That is vital context. We obviously haven't yet heard any official response from the TypeScript team on this idea, but if Flow is not open to it, then it is effectively dead in the water.\n@loganfsmyth At one point when (seemingly) addressing me (with the question Would you be able to dig into what makes you feel this way?), you are quoting @azz, so I won't attempt to answer that question as that seems to just be a mix-up.\nI will remove my objection to this PR and lead the efforts to accommodate the knock-on effects in typescript-eslint-parser and prettier.\nI would also love to see the Flow nodes updated with a Flow prefix.. @existentialism typescript-eslint-parser will need to be updated before prettier, it does not use babylon for TypeScript parsing.\nI have created an issue here: https://github.com/eslint/typescript-eslint-parser/issues/386. Working on it now, I'll let you know. The PR is ready https://github.com/eslint/typescript-eslint-parser/pull/388, you can use the PR commit in your WIP for prettier, let me know how you get on!. ",
    "zerkalica": "It's possible to extract some AST subset, compatible with flow and ts? For writing some universal transformation plugins.\n. ",
    "stephen": "I posted this in the #typescript slack channel, but this might have better visibility:\nI'm curious if anyone has given thought to how to name/shape the ast extensions, i.e. should they attempt to resemble the official ts compiler? or the ts grammar spec? or potentially share node names with flow?\nsome notes:\n- the ts official compiler AST isn\u2019t a 1:1 mapping to the spec grammar (as would be expected I guess)\n- some of the ts compiler nodes are directly mappable to EStree nodes (i.e. ts PropertyAccessExpression -> estree MemberExpression)\n- some of the ts compiler nodes and flow nodes are directly mappable (i.e. StringTypeAnnotation -> StringKeyword)\n  - others are not, i.e. InterfaceDeclaration in the flow AST has a body property which is an ObjectType that holds the interface's indexers, properties, and call properties. In the ts compiler AST, InterfaceDeclaration directly references the indexers, properties, and call properties without the intermediate ObjectType. (The ts grammar spec otoh, does have the ObjectType concept which is analogous to the flow node by the same name.)\n- some concepts between the two are somewhat analogous, but do not have exactly the same semantics (i.e. interfaces can have mixins in flow, but there are no mixins in ts)\nI suspect that a typescript extension should target a separate set of ast node names from flow to entirely avoid collisions where the two systems don't match, but that leaves a question for how to best extend beyond the base ESTree types (attempting to match the ts compiler, or attempting to match a combination of the grammar spec + flow ast node structure).. Agree - I think it's a bit unfortunate because it means some nodes will resemble their official TS counterpart, but others will vary greatly.\nOne example where this is awkward:\ntsx\nclass A extends B implements C, D {}\nFor the extends syntax, sticking with estree compatibility could mean using classNode.superClass and flow's classNode.superTypeParameters. However, implements isn't in ES, so should we switch to emitting HeritageClause there, in the spirit of preserving typescript nodes when possible? (i.e. classNode.heritageClauses = [ ... ] - TS compiler uses heritage clauses for both cases.)\nI see that typescript-eslint-parser opts for using flow's ClassImplements here instead of adding ExpressionWithTypeParameters / HeritageClause..\nIt'd also be helpful to know if @DanielRosenwasser / the ts team has any thoughts on estree-compatibility.\nre: ts 1.8 grammar, there's no particular reason. I started off targeting 1.8 as a first milestone (and the official grammar spec is fairly complete for it). I'm interested in adding > 1.8 additions after I get <= 1.8 features working.. ",
    "jiayihu": "@hzoo do you have any resource or link to get started with writing Babel plugins for TS? Or is it the same as with Flow? Anyway thank you for your great work!! \ud83d\ude0d. ",
    "daltones": "Hmm, sorry I didn't know that. Thanks!. ",
    "gisenberg": "Thanks for looping me in! I wanted to let everyone know that I'm over in the BabelJS Slack if there are others that would like to discuss this feature further. I'm currently working with @bmeck on the Babel side of things. . @thomaschaaf This is still underway. If you're interested in helping, https://github.com/gisenberg/proposal-optional-chaining is tracking the remaining work. I'm also in the BabelJS Slack if you want to reach out directly. \n. cc @littledan . ",
    "sunnylqm": "Any news? @kristofdegrave . https://github.com/babel/babel/tree/7.0/packages/babel-plugin-transform-optional-chaining. ",
    "cusspvz": "Can't wait to see this on ES. Inspite of it being yet at stage-1, it is the only thing that I've always wanted to be part of EcmaScript since I stopped using CoffeeScript. I wish I had spare time to implement it.. ",
    "thomaschaaf": "@gisenberg @kristofdegrave is this still something you are working on? Do you need help?. ",
    "Me1000": "Hey there, I'm from the RunKit team. I've attached an image which should help explain things a bit better. \n\nAs you can see, cell 2, in this example, starts on line 5. We run each cell through Babel independently. The result is in this example that the generated SourceMap will maps line 1 of cell 2 to line line 1 (rather than line 5 of the notebook). In other words, each cell's first line will always map to line 1. \nOur current workaround is to just insert new lines before we parse it. This PR will let us clean some of that up. . Great question. In short, we're applying our own custom transforms which (among other things) preserve those identifiers. . ",
    "aweary": "@hzoo mind if I give this one a shot? \ud83d\ude03 . @xtuc @hzoo I updated so the await flag should always be set on ForOfStatement nodes.. Using Function as a reference, the generator and async flags are explicitly set to false when they don't apply, so it seems like it should do the same here.. ",
    "Volune": "I'll fork then, thanks.. ",
    "mees-": "Closing because of personal error, this is not a bug. Babylon parses this correctly.. ",
    "aaronang": "I will be working on this \ud83d\ude2c . I am kind of struggling with getting a good understanding of Babylon. So, if someone is willing to pick this up that would be great.. Okay, I will close this issue and document it today \ud83d\udc4d . I was using TEST_GREP to run only one test case, and sometimes it ran more than one because it matched multiple test cases, which was a bit annoying. I think only: true should be fine \ud83d\ude04 . Thank you for the feedback! \n@existentialism Thanks for rewriting everything \ud83d\ude02 . Yes, so if someone does not define TEST_GREP it will just run all test cases.. ",
    "MartinDoyleUK": "Just to clarify, if I install babylon@6.15.0 in my project, the build succeeds.. ",
    "matAtWork": "Whilst investigating https://github.com/MatAtBread/fast-async/issues/33, I ended up with this simple test:\n(empty .babelrc - no transforms at all)\n```\n$ echo 'export default async function bar() {}' | ./node_modules/babel-cli/bin/babel.js\nexport default (async function bar() {});\n$ echo 'export default function bar() {}' | ./node_modules/babel-cli/bin/babel.js\nexport default function bar() {}\n```\nIt appears babylon 6.16.1 incorrectly parses the async function as a FunctionExpression, not a FunctionDeclaration\n. ",
    "tmcw": "\ud83c\udf89  Thank you @existentialism!. ",
    "u9520107": "Ahh.. ok. Thanks!. It's good, I should've realized to use named imports in the first place. . ",
    "lunaticmonk": "@xtuc  Should I remove '$' or will you take care of that?. @hzoo  So do we need to update the full document now?. ",
    "magnushiie": "Might be related to babel/babel-eslint#266. ",
    "andy-ms": "It looks like the test failure is in babel somewhere -- did this PR change it or was the change in babel?. Hm, still failing.\nTypeError: [BABEL] /home/travis/build/babel/babylon/node_modules/istanbul-lib-instrument/dist/index.js: Plugin 0 specified in \"/home/travis/build/babel/babylon/.babelrc.env.test\" was expected to return a function but returned \"undefined\" (While processing preset: \"/home/travis/build/babel/babylon/node_modules/babel-preset-stage-0/lib/index.js\") (While processing preset: \"/home/travis/build/babel/babylon/node_modules/babel-preset-es2015/lib/index.js\"). @existentialism Seems to have been fixed.. Again, test failures are probably due to some change in babel?\nUpdate: It's failing on master, made an issue: #453. Bad news: It looks like with plugins applied, this branch does make parsing a bit slower.\nGood news: We can make it a lot faster!\nCurrently, plugins work by writing functions directly to the instance.\nThis branch modifies plugins to be functions from a superclass to a new subclass.\nBut it then takes the methods off of that subclass and directly assigns them...\nI have modified this to instead just create a class, and never directly assign to an instance.\nThese classes can be reused across multiple parse calls, and node seems to have an easier time optimizing them.\nHere are my measurements parsing jquery with the flow and jsx plugins applied:\n| Name                           | Time |\n| ------------------------------ | ---- |\n| master, no plugins             | 7.86 8.07 8.02 8.14 7.84 |\n| type-check, no plugins         | 7.93 8.05 7.80 7.97 7.96 |\n| master with plugins            | 22.0 21.2 21.6 21.0 |\n| type-check with plugins        | 25.3 24.1 23.0 22.9 |\n| type-check with cached plugins | 10.6 10.5 10.3 10.0 |\nIt looks like the existence of instance functions was making it run significantly slower, but moving that all into a prototype brought the time back down. There is of course still some increase in time due to the actual work that the plugin does.\nShall I make a pull request doing just this? (UPDATE: #459). Closing since this has been broken into many separate PRs.\n459 Convert each plugin to a function from a class to an overriding class\n460 Type-check tokenizer/index.js\n480 Add type declarations for AST nodes\n481 Convert each file with parser methods to a class in an inheritance chain\n482 Move plugin helpers out of Parser.prototype and into the plugin itself\n484 Type-check CommentsParser and LocationParser\n485 Type-check UtilParser\n486 Type-check node.js\n487 Type-check LValParser\n488 Type-check ExpressionParser\n489 Type-check StatementParser\n490 Type-check options.js and index.js\n491 Type-check utils\n492 Type-check State\n493 Type-check tokenizer/types.js\n494 Type-check estree plugin\n495 Type-check flow plugin\n496 Type-check JSX plugin\n521 Fix type check errors. Hm, the \"babel\" tests have lots of failures in travis but show up as passed? https://travis-ci.org/babel/babylon/jobs/210088550. EDIT:  Never mind, used wrong branch of babel.\nThe first error's been fixed, but after linking, I get some errors in yarn build in babel:\n```ts\nCompiling '/home/andy/bab/babel/packages/babel-helper-transform-fixture-test-runner/src/index.js'...\nTypeError: /home/andy/bab/babel/packages/babel-helper-transform-fixture-test-runner/src/index.js: Cannot read property 'value' of undefined\n    at getName (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-duplicate-keys/lib/index.js:85:13)\n    at PluginPass.ObjectExpression (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-duplicate-keys/lib/index.js:41:22)\n    at newFn (/home/andy/bab/babel/node_modules/babel-traverse/lib/visitors.js:276:21)\n    at NodePath._call (/home/andy/bab/babel/node_modules/babel-traverse/lib/path/context.js:76:18)\n    at NodePath.call (/home/andy/bab/babel/node_modules/babel-traverse/lib/path/context.js:48:17)\n    at NodePath.visit (/home/andy/bab/babel/node_modules/babel-traverse/lib/path/context.js:105:12)\n    at TraversalContext.visitQueue (/home/andy/bab/babel/node_modules/babel-traverse/lib/context.js:150:16)\n    at TraversalContext.visitSingle (/home/andy/bab/babel/node_modules/babel-traverse/lib/context.js:108:19)\n    at TraversalContext.visit (/home/andy/bab/babel/node_modules/babel-traverse/lib/context.js:192:19)\n    at Function.traverse.node (/home/andy/bab/babel/node_modules/babel-traverse/lib/index.js:114:17)\n... snip ...\nCompiling '/home/andy/bab/babel/packages/babel-core/src/transformation/file/options/removed.js'...\nTypeError: /home/andy/bab/babel/packages/babel-core/src/transformation/file/options/option-manager.js: Property property of MemberExpression expected node to be of a type [\"Identifier\"] but instead got null\n    at validate (/home/andy/bab/babel/node_modules/babel-types/lib/definitions/index.js:109:13)\n    at Object.validate (/home/andy/bab/babel/node_modules/babel-types/lib/definitions/core.js:412:50)\n    at validate (/home/andy/bab/babel/node_modules/babel-types/lib/index.js:505:9)\n    at Object.builder (/home/andy/bab/babel/node_modules/babel-types/lib/index.js:466:7)\n    at DestructuringTransformer.pushObjectProperty (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js:174:22)\n    at DestructuringTransformer.pushObjectPattern (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js:200:16)\n    at DestructuringTransformer.push (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js:108:14)\n    at DestructuringTransformer.init (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js:317:12)\n    at PluginPass.VariableDeclaration (/home/andy/bab/babel/node_modules/babel-plugin-transform-es2015-destructuring/lib/index.js:468:27)\n    at newFn (/home/andy/bab/babel/node_modules/babel-traverse/lib/visitors.js:276:21)\n```\n(The command succeeds before running yarn link babylon.). Yeah, I was on the wrong branch. Fixed with git checkout 7.0.\nHowever, I do get an error in make test in babel after linking:\n1) browserify babel/register may be used without breaking browserify:\n     Uncaught TypeError: require(...).default is not a function\n      at Object.1.babel-register (evalmachine.<anonymous>:3:34)\n      at s (evalmachine.<anonymous>:2:254)\n      at e (evalmachine.<anonymous>:2:425)\n      at evalmachine.<anonymous>:2:443\n      at ContextifyScript.Script.runInContext (vm.js:32:29)\n      at ContextifyScript.Script.runInNewContext (vm.js:38:15)\n      at Object.runInNewContext (vm.js:91:38)\n      at packages/babel-core/test/browserify.js:15:10\n      at node_modules/browserify/index.js:779:13\n      at ConcatStream.<anonymous> (node_modules/concat-stream/index.js:36:43)\nAnd verified that this does not happen on a clean checkout without yarn link.. Thanks, it works after cleaning.. Yeah, I'm on slack.. @STRML Thanks!. @danez Thanks for reviewing. For type-checking the rest, would it be OK to use classes and inheritance? For example, I would like startNode available in parser/index.js, but it's currently defined with pp.startNode = function () {, which the type checker can't understand.. Yes, in the case of 100% correct code everything will be inferred with no problem. But there are also some functions in the code that should be void but contain unnecessary return statements -- can't catch that without an annotation.. Codecov is having problems here; don't know where the coverage was lost.\n\n. > I know it's easier to modify the code in src/expression etc, but is there a way for us to make the parser plugin like in estree/flow/jsx?\n@hzoo Does that mean you would want more changes like 733943a?. @nicolo-ribaudo Done https://github.com/babel/babylon/pull/523/commits/bee125d51ced2d80b12b2cc111c9d1f31c456bbd. @hzoo Please notify me when this is published.. Actually, ClassPrivateProperty probably doesn't need ClassMemberBase either unless it can be static or have decorators.. Never mind, had checked out master on babel when I should have used 7.0.. Looks like inclusion of the range property is behind a flag, could you try adding it to your configuration?. Related: #502. Waiting on babel/babel#6074 for tests to pass\nEDIT: Done. If I indent things correctly, this PR will have an unreadable diff because the indent of most lines will change. Don't know a good solution for that.. reverse + forEach + unshift = concat. :relaxed:. Some of them could be omitted, but I've tested around and some of them can't without breaking compilation. I also think it's nice to have the type annotations locally so I don't have to look them up in parserTypes.js. The code worked fine without any type annotations, the point was to make it easier to read.. new Node; is called in one place, but I just added a $FlowFixMe comment at that place and no longer need hacks here. Thanks!. Done. This is implemented by a class, so I think we need the interface?. For a function declared in parserTypes.ts, the return type should be carried along from there. But for a function declared only locally, you may get no (or confusing) errors without a type annotation. I think it's better to just consistently declare types. E.g., remove the return type from parseCallExpressionArguments, add elts.push(0); somewhere, and you won't get any errors.. I don't have an opinion on this.. Whoops, must have been trying something and forgot to change it back.. Not sure why this was initially broken into both pp.finishNodeAt and function finishNodeAt. Seems to work fine this way.. This constructor was only called with missing parameters in __clone, so better to declare them as required.. Without the return type, you should still get errors if there are errors, but they will be more confusing: If you have function f() { return g(); } and call f().toUpperCase(), and there's an error, is it in f, g, or .toUpperCase()?. Don't know how to type args, so just leaving it.. I used it as the type for refShorthandDefaultPos in #488.. Type systems don't handle objects changing type very well. There are similar problems in the estree plugin.. We would have to know of whether we're in a declaration context or not. And knowing that requires knowing the current file extension. export let package: number; is a perfectly legal .d.ts file.. This presumably clones to a PrivateName and not an Identifier.\nI also don't think it should be a PatternBase unless it's allowed to appear as a parameter.. I needed that specific functionality from within the typescript plugin.\nBut it looks like it's simpler if I just call super.parseFunctionParams to access that instead.. :+1:. Flow will complain without the throw since it's not clear that control flow can't reach the end without assigning name.. flow itself (the command-line tool, not the babylon parser) fails for your example with Unexpected token ?. I'll add a test.. I don't think the AST gives us a way to distinguish between new X and new X(). But I found a different way that works just as well, see the latest commit 102be0e.. :+1: . ",
    "dschep": "Thanks for pointing out this is actually even a bug if you ARE using flow. Not a solution I expected to my problem \ud83d\ude04 . ",
    "conartist6": "I am building a PR for this.. I'll look into that next.. You're saying that I need to alter the PR? Which branch should I be requesting to merge to?. Pull request for babel is open: https://github.com/babel/babel/pull/5525\nAdded a few other minor changes to this PR.. ",
    "zertosh": "Any chance this can be backported to Babylon 6?. @danez looks like no. In #393, they're defining new \"extension plugin\" classes every time you create a new parser instance. Seems like a trade-off between perf and types :/. Ah the class caching approach is so much better, thanks @danez!. ",
    "milesj": "Has this been released in babel-eslint yet? I'm still getting failures when spreading.. ",
    "alxpy": "hi, I started working on this issue and I have question: what behavior will be correct? 07 should be parse asoctal, and 08 should be parse asdecimal? should we support octal?. fixed\nhttps://github.com/babel/babylon/issues/420#issuecomment-289854552. hmm, I can't find this line in the project.... It looks like this test fails on master too... how is it possible?\n@existentialism @hzoo . @bakkot thanks!. @thejameskyle https://github.com/babel/babylon/pull/465#issuecomment-293415467. @thejameskyle what should we get in this case? -- type b = a.b.c;\n- type: QualifiedTypeIdentifier\n  id: Identifier(a)\n  qualification:\n    - type: QualifiedTypeIdentifier\n      id: Identifier(b)\n      qualification: Identifier(c)\nit will be right?. thanks!\nso babylon works the same as flow...\nis it realy bug -- https://github.com/babel/babylon/issues/455?\n/cc @danez, @thejameskyle . yes, it looks like a bug. I will work on this.. it looks like test-babel is failed in master.... @danez, thanks for the help! (recently I was very busy). ",
    "nadavye": "Hi,\nI wanted to know if there's a time estimation on this one? Is that in high priorty?\nRegards,\nNadav. ",
    "ChristianHersevoort": "Closing my issue in favor of #344 . ",
    "dlutwuwei": "Did this problem resolved in the 7.0.0 beta version?. ",
    "chikara-chan": "After my check, the build error is already caused by others in master branch(7.0.0-beta.6). It's irrelevant to this pr.. ",
    "bmeck": "If things are ever completely disambiguated by spec I'd be happy with auto being the default, but thats possibility is not looking likely in near future.. @jdalton right now it doesn't do the checking based upon file extension like stated above. The Node proposal continues to use .mjs as the only way to generate an ESM by default. I think .js is more likely to be a Script than a Module if a .js is encountered after that ships.. For v7, I'm pretty neutral; but after ESM ships in Node I am heavily against defaulting to \"module\".. ",
    "DanielRosenwasser": "Hey @JamesHenry, @stephen, @hzoo, sorry for the delay in response. We've also been interested in TypeScript support in Babylon, and one of my teammates @andy-ms has been experimenting with it recently. You can find his work in progress here. From our perspective this is still just an experiment and we want to see how it turns out before taking a hard stance on future support.\nI think the work you've done here is pretty awesome, and everyone on the team is pretty impressed with this. That said, it would be great to combine our efforts here. @andy-ms can probably speak better to the diff between his branch and @stephen's branches, but last I checked @andy-ms was pretty far along. I think a good first step would be to take a look at @andy-ms's work and give some feedback.. Hey @loganfsmyth @hzoo, looks like the tests are fixed. Can you take another look?. I think several of us on our team acknowledge that distinct nodes can make some things easier, but most folks on our team would prefer the node shapes continue to align for the benefit of downstream tool authors.\nAll that said, @andy-ms and I spoke and we're alright with the change. We'll defer to @azz and @JamesHenry who seem to be the other primary consumers at this point. If it's manageable for them, then great, but I know they've put a lot of work into this stuff.. Don't forget about object and never!. ",
    "wcjohnson": "It is almost certainly possible to fix this without using parser lookahead. See https://github.com/wcjohnson/babylon-lightscript/commit/322842abe7b9fd0ece731eaa2238edeaaa315876 for an outline of an approach.\nBasic outline:\n- parse from within parenLists as TypeCastish\n- only convert to TypeCastExpression from within parseParenAndDistinguishExpression\n- lvalue conversion converts TypeCastish into the correct annotations\n- if TypeCastish is seen anywhere else, raise an unexpected type cast error. ",
    "STRML": "\nLike #393, this avoids fixing the indent inside each plugin, in order to have a smaller diff.\n\nI so wish this were a default, but you can view the diff via https://github.com/babel/babylon/pull/459/files?w=1 (note the ?w=1) to avoid highlighting whitespace diffs.. Any reason to not use Object.create(null); here instead?\n. ",
    "aickin": "Update: I tried babylon@7.0.0-beta.8, and that version parses the function just fine. babel@7.0.0-alpha.7 also seems to do fine with this code, whereas the most current released version of babel throws an error.. ",
    "tibdex": "Thanks @hzoo, of course no hurry :) ! I just thought that since the issue is impacting the latest release of prettier lot of people were going to stumble into it. So I just went ahead and created a ticket here and on the prettier repo so that people also experiencing it can see that there is already an issue for it.. FYI I used git bisect and the issue appeared in https://github.com/babel/babylon/commit/32eabf620b9d5eaf190969cc4a38f7775626a3f.\nPutting the code back as it was before https://github.com/babel/babylon/pull/405 fixes the parsing error but seems to put back the code in a incorrect state if https://github.com/babel/babylon/issues/404 is legit. Indeed, I added console.log statements before this.state.context.push(ct.parenExpression); and this.state.context.pop(); and here is the sequence:\npush // 1\npush // 2\npop // 1\npush // 2\npop // 1\npush // 2\npop // 1, missing a \"pop\" if the counter is expected to go back to 0, but is it ? .... ",
    "fahad19": "\ud83d\udc96 . ",
    "urish": "Actually, for my purpose - no API for plugins is needed. If you merge it as-is, without any commitment from your side, I will be super-happy. True, but I'm (and perhaps other?) happy to live with exported plugins object despite the fact it might even be removed at some point, if you decide to do so.\nIt is still so much better than hacks like this people are currently doing.. Got it. So do you currently recommend on forking babylon, making whatever changes and then publishing to NPM so it can be consumed by babel? Or is there a better way to go?. ",
    "philipp-spiess": "We used it to fix a missing type for a constructor from a class that we extend (Immutable.Record to be more specific). It's kinda hacky since it uses the class fields API and defines constructor as a property.\nHere's a working example in flow that uses this technique.\n\nAlso, why doesn't flow have formal documentation of their syntax?\n\nI can't help you there :). ",
    "aissaghouti": "Works perfectly fine now, Thanks @existentialism !\nSorry for the inconvenience.. ",
    "EmpireWorld": "@bakkot We can use Expression | Identifier instead of Expression because when i try the below:\n```javascript\nclass ExampleClass () {\nsampleMethod () {\n\n}\n\n}\nI was get the below result as key:\nNode {\n  type: 'Identifier',\n  start: 2595,\n  end: 2607,\n  loc: \n   SourceLocation {\n     start: Position { line: 155, column: 4 },\n     end: Position { line: 155, column: 16 },\n     identifierName: 'sampleMethod' },\n  name: 'sampleMethod' }\n```. But i get Identifier type. so we should include it in the type. \nUsing OR statement or bitwise symbol ||.\nlike this:\njavascript\ninterface ClassMethod <: Function {\n  type: \"ClassMethod\";\n  key: Expression || Identifier; // Using OR\n  kind: \"constructor\" | \"method\" | \"get\" | \"set\";\n  computed: boolean;\n  static: boolean;\n  decorators: [ Decorator ];\n}. @bakkot Ohh. i found that. thanks.. ",
    "maurobringolf": "Aren't Expression | Identifier and Expression equivalent, since Identifier is a subtype of Expression? Therefore Identifier is already included in the current definition.. ",
    "mhegazy": "Typescript never had syntactic breaking changes. Meaning valid syntax that is supported by one version and disallowed by a newer version. All breaking changes are semantic in nature; either new error checks or new behaviors for the type system. All these are outside the scope of Babylon. There are some changes in the resulting code from tsc but these are not relevant here either.\nSo from parsing perspective we have a guarantee for no breaking changes movinging forward.\nHope that addresses your concern.. ",
    "yahiko00": "Oh. My. God. <3. ",
    "rwaldron": "@hzoo I was thinking about writing a plugin for this, as a way to get involved. I will likely need your guidance :). [Deleted all that non-sense. Everything is good now]. > already added some thoughts about the parser/transform\nI'll follow your notes in the op\u2014thanks!. I have an implementation and a little test runner that verifies all of the following: \n\u2609 68 tests run:\n\u2714 68 tests passed\n\u2718 0 tests failed\n.............................\n\u2714 1_1 is 11 (module)\n\u2714 1_1 is 11 (script)\n\u2714 1_1.1_1 is 11.11 (module)\n\u2714 1_1.1_1 is 11.11 (script)\n\u2714 .1_1 is 0.11 (module)\n\u2714 .1_1 is 0.11 (script)\n\u2714 0x1_1 is 17 (module)\n\u2714 0x1_1 is 17 (script)\n\u2714 0xa_1 is 161 (module)\n\u2714 0xa_1 is 161 (script)\n\u2714 0xA_1 is 161 (module)\n\u2714 0xA_1 is 161 (script)\n\u2714 0b01_1 is 3 (module)\n\u2714 0b01_1 is 3 (script)\n\u2714 0b0_1_1 is 3 (module)\n\u2714 0b0_1_1 is 3 (script)\n\u2714 0o1_1 is 9 (module)\n\u2714 0o1_1 is 9 (script)\n\u2714 0o0_11 is 9 (module)\n\u2714 0o0_11 is 9 (script)\n\u2714 1_ is Invalid NumericLiteralSeparator (1:1) (module)\n\u2714 1_ is Invalid NumericLiteralSeparator (1:1) (script)\n\u2714 1_1_ is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1_ is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1_1__ is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1__ is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1__1 is Invalid NumericLiteralSeparator (1:1) (module)\n\u2714 1__1 is Invalid NumericLiteralSeparator (1:1) (script)\n\u2714 1_1_.1_1 is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1_.1_1 is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1_1._1_1 is Invalid NumericLiteralSeparator (1:4) (module)\n\u2714 1_1._1_1 is Invalid NumericLiteralSeparator (1:4) (script)\n\u2714 0x1_1_ is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0x1_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0xa_1_ is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0xa_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0x_a_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_a_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x__1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x__1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x_1__1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_1__1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x_1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_1_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_1_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_11 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_11 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_01_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_01_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b_0_1_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0b_0_1_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b_01_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0b_01_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b01_1_ is Invalid NumericLiteralSeparator (1:6) (module)\n\u2714 0b01_1_ is Invalid NumericLiteralSeparator (1:6) (script)\n\u2714 0o1_1_ is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0o1_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0o_1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 ._1_1 is Unexpected token (1:0) (module)\n\u2714 ._1_1 is Unexpected token (1:0) (script)\n\u2714 0o01_8 is Unexpected token, expected ; (1:5) (module)\n\u2714 0o01_8 is Unexpected token, expected ; (1:5) (script)\n\u2714 0b2_1 is Expected number in radix 2 (1:2) (module)\n\u2714 0b2_1 is Expected number in radix 2 (1:2) (script)\n\u2714 0xZ_1 is Expected number in radix 16 (1:2) (module)\n\u2714 0xZ_1 is Expected number in radix 16 (1:2) (script)\nI'm now figuring out a way to migrate my fixtures.. > I believe we converged to keeping parseInt intact and changing the Number constructor to take the new syntax (which leads to a backwards incompatible change, but seemed like an acceptable one).\nThat's correct, but I have to admit that I don't understand where that fits for Babylon? Guidance please :). @hzoo thanks for the quick review turnaround, I will get these issues addressed and ping you when ready :). > - [x] We need this to be under a flag like the other plugins. This just means creating a hasPlugin('numericSeparators) check so that this functionality isn't turned on by default.\n\n\nYou can check @diervo's PR as an example of this: #260\n[x] Update the readme to add that numericSeparators line to the plugins list\n[] ~~Update the ast/spec.md (maybe no update needed)~~\n\n\n@hzoo changes pushed. I didn't make changes to ast/spec.md because I don't believe there are any changes to make there (I could be wrong, but need guidance). @DrewML pushed change for includes -> indexOf. > Ideally the cases that have a weird error message should be fixed to have the same error message as the others\nI believe most those stay as they are because they have a different violation in them before the illegal _, or are already illegal and I wanted to ensure that the new code didn't erroneously consider them a new kind of restriction.  \n._ is illegal today for \nI think this:\n\n0o01_8 is Unexpected token, expected ; (1:5) (module)\n\n...is an outlier that should be fixed, but I'm not sure how. The _ is legal here, the 8 is not\u2014it should have an error that says Expected number in radix 8. Seems like an unrelated issue for another ticket. \nAnd this: \n\n._1_1 is Unexpected token (1:0) (module)\n\n... involves changing readToken_dot to raise an exception, which I could do here or in a follow up PR. A follow up might be nicer to keep the error message fixes together.\n. @jridgewell @hzoo @diervo correct, _123 is not valid DecimalDigits, because _ is a valid IdentifierStart character. I'm sure it's fine, but I will open a PR that adds a test which asserts that this remains true when the numericSeparator plugin is active. . Nice! \ud83d\udc4d . This might be irrelevant, or possibly a subject to have in a new issue, but I'm curious about the drops in coverage? For example, it says above that six files were impacted, but four of them aren't changed at all: \n\nsrc/parser/comments.js    87.87% <0%> (-6.07%)    \u2b07\ufe0f\nsrc/tokenizer/state.js    97.14% <0%> (-2.86%)    \u2b07\ufe0f\nsrc/plugins/flow.js   97.35% <0%> (-1.04%)    \u2b07\ufe0f\nsrc/tokenizer/index.js    97.41% <0%> (-1%)   \u2b07\ufe0f. I always forget that Github made it so I have to accept \"invites\", vs the old way of just adding people. . Looks like I have to update to use indexOf!. Sorry I missed these follow-up messages, I've been afk since Thursday evening. . Ah, ok, no problem. I saw all the other modern JS and just assumed I could use it...whoops! Will fix now. . Sure, I can do that. . \n",
    "samuelgoto": "Neat!!! Good stuff Rick!!\nI believe we converged to keeping parseInt intact and changing the Number\nconstructor to take the new syntax (which leads to a backwards incompatible\nchange, but seemed like an acceptable one).\nDoes that make sense?\n(sent from phone, apologies for the brevity)\nOn May 26, 2017 2:22 PM, \"Rick Waldron\" notifications@github.com wrote:\nI have an implementation and a little test runner that verifies all of the\nfollowing:\n\u2609 68 tests run:\n\u2714 68 tests passed\n\u2718 0 tests failed\n.............................\n\u2714 1_1 is 11 (module)\n\u2714 1_1 is 11 (script)\n\u2714 1_1.1_1 is 11.11 (module)\n\u2714 1_1.1_1 is 11.11 (script)\n\u2714 .1_1 is 0.11 (module)\n\u2714 .1_1 is 0.11 (script)\n\u2714 0x1_1 is 17 (module)\n\u2714 0x1_1 is 17 (script)\n\u2714 0xa_1 is 161 (module)\n\u2714 0xa_1 is 161 (script)\n\u2714 0xA_1 is 161 (module)\n\u2714 0xA_1 is 161 (script)\n\u2714 0b01_1 is 3 (module)\n\u2714 0b01_1 is 3 (script)\n\u2714 0b0_1_1 is 3 (module)\n\u2714 0b0_1_1 is 3 (script)\n\u2714 0o1_1 is 9 (module)\n\u2714 0o1_1 is 9 (script)\n\u2714 0o0_11 is 9 (module)\n\u2714 0o0_11 is 9 (script)\n\u2714 1_ is Invalid NumericLiteralSeparator (1:1) (module)\n\u2714 1_ is Invalid NumericLiteralSeparator (1:1) (script)\n\u2714 1_1_ is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1_ is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1_1__ is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1__ is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1__1 is Invalid NumericLiteralSeparator (1:1) (module)\n\u2714 1__1 is Invalid NumericLiteralSeparator (1:1) (script)\n\u2714 1_1_.1_1 is Invalid NumericLiteralSeparator (1:3) (module)\n\u2714 1_1_.1_1 is Invalid NumericLiteralSeparator (1:3) (script)\n\u2714 1_1.1_1 is Invalid NumericLiteralSeparator (1:4) (module)\n\u2714 1_1._1_1 is Invalid NumericLiteralSeparator (1:4) (script)\n\u2714 0x1_1 is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0x1_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0xa_1_ is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0xa_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0x_a_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_a_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x__1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x__1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x_1__1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_1__1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0x_1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0x_1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_1_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_1_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_11 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_11 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0o_01_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_01_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b_0_1_1 is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0b_0_1_1 is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b_01_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0b_01_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 0b01_1_ is Invalid NumericLiteralSeparator (1:6) (module)\n\u2714 0b01_1_ is Invalid NumericLiteralSeparator (1:6) (script)\n\u2714 0o1_1_ is Invalid NumericLiteralSeparator (1:5) (module)\n\u2714 0o1_1_ is Invalid NumericLiteralSeparator (1:5) (script)\n\u2714 0o_1_1_ is Invalid NumericLiteralSeparator (1:2) (module)\n\u2714 0o_1_1_ is Invalid NumericLiteralSeparator (1:2) (script)\n\u2714 ._1_1 is Unexpected token (1:0) (module)\n\u2714 ._1_1 is Unexpected token (1:0) (script)\n\u2714 0o01_8 is Unexpected token, expected ; (1:5) (module)\n\u2714 0o01_8 is Unexpected token, expected ; (1:5) (script)\n\u2714 0b2_1 is Expected number in radix 2 (1:2) (module)\n\u2714 0b2_1 is Expected number in radix 2 (1:2) (script)\n\u2714 0xZ_1 is Expected number in radix 16 (1:2) (module)\n\u2714 0xZ_1 is Expected number in radix 16 (1:2) (script)\nI'm now figuring out a way to migrate my fixtures.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/issues/538#issuecomment-304354558, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAqV6qj2h_i6A-wgHJ-Np9Tx8tLo9sAMks5r9xhNgaJpZM4NnDpy\n.\n. Ah fair question. Henry?\n(sent from phone, apologies for the brevity)\nOn May 26, 2017 3:05 PM, \"Rick Waldron\" notifications@github.com wrote:\n\nI believe we converged to keeping parseInt intact and changing the Number\nconstructor to take the new syntax (which leads to a backwards incompatible\nchange, but seemed like an acceptable one).\nThat's correct, but I have to admit that I don't understand where that\nfits for Babylon? Guidance please :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/babel/babylon/issues/538#issuecomment-304364005, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAqV6jzmkbW_UkCcHIXCYGI6KLdGL4j0ks5r9yJbgaJpZM4NnDpy\n.\n. \n",
    "bounceme": "https://github.com/tc39/proposal-class-public-fields/issues/63\n@littledan Is this the answer to above question?\nand what about props and methods named like in/instanceof etc. ",
    "isiahmeadows": "@diervo To add to @loganfsmyth's comment, you still have to be aware of context even now, because of existing MemberExpressions (where computed: false) and the like.. ",
    "michaelficarra": "@rwaldron I believe there's a bug in that this allows legacy octal integer literals to have separators. Even if this does restrict them, I don't see a test for that. Do you mind sending a PR to correct that?. Ping @rwaldron.. ",
    "jkrems": "The CI failure seems to be unrelated to this change..?. Added tests to verify that:\n\nimport.meta is not a valid assignment target\nimport.meta.prop is a valid assignment target. @rwaldron Yeah, I was wondering about the same thing. I tried rebasing on master in case it was using some weird merge head but afaict that wasn't it.. No deeper reason than \"order of copy&paste\". ^^ Copied the actual.js/expected.json over again to keep them in sync.. Oops, good point. Added a test that checks for that & made it use the correct name.. Weird, I thought I tried that first but .inModule was only true top-level. Must have missed something. You're right, definitely works fine.. Heh, good point. Copied the wording from \"can only be used in functions\". Should've taken the wording from import/export statements. Fixed.. \n",
    "cpojer": "When I experimented with this about three years ago, I also went the route to make MemberExpressions optional. Seems like that's the way to go! :). ",
    "kerhong": "I believe this breaks valid syntax. The expression foo?.1:bar generates syntax error (Unexpected token), it should (and currently is) interpreted as foo ? 0.1 : bar.. ",
    "davidyaha": "\ud83c\udf89 \ud83c\udf89 . ",
    "francisrod01": "@hzoo yeah, I think that this code needs a filter to bower scripts.\nThanks for watching this detail!. ",
    "lx93uv": "Thanks for your replies.\nAs I understand, technically both eslint and babel developers can unite efforts to contributing of acorn. IMHO, if several projects use the same piece of software, they should unify it's interface and contribute to it together together.\nFrom developer point of view, work can be represented as stream from\n compiling from es6/7/etc to es5 according to babel-env\n linting, static analysis (eslint)\n* minifying (babili)\nso, all tasks can be implemented as acorn plugins, isn't it?\nAnd, @ljharb, management of big \"bloated\" project is not a problem with proper people.. ",
    "xixixao": "@danez Can I help backporting this to 6x or is it good to go?. ",
    "wdhorton": "I'd like to take on this issue!. @littledan would love for you to take a look, let me know what other test cases I should add. just added @mathiasbynens suggestions. @hzoo @littledan is there anything keeping this from getting merged now?. @hzoo i have one starting question on the transform\u2014is it ok to pull in an external lib to handle the math operations? idk what babel's policy is on adding 3rd-party dependencies, but it seems unavoidable in this case. I actually started with the plugin named bigInt. But then when it came time to make a new token type, I saw that the RegExp constructor mapped to regex so I figured that BigInt should map to bigint. So then I changed the plugin to match the token type.\nBut I'm ok with bigInt if you think that's better. sound like a good idea. @littledan I realized after I pushed this up that using a number as the value would defeat the purpose, since as you said we still couldn't represent 64-bit ints without rounding. I'll change it to strings. you're very right, that was an oversight on my part. The existing code was already checking the charCodes using non-hex integers, so I was just trying to stay consistent with that. I can go ahead and change it if you think that's best. I was thinking about that, and on a practical level I think it makes sense to delay that until the transform. If there was a binary value that exceeded the max value for a number, then in order to convert it we'd have to import a bigint library here. Whereas with the transform we're already going to need to use a library for the operations, so it makes sense to have it do the conversions as well. ",
    "amilajack": "\nAll arithmetic operations and comparisons should be replaced by calls to functions which provide the appropriate behavior depending whether arguments are BigInts or Numbers.\n\nI've done some work on this in a babel plugin that prevents coercion in JS. Here's the related code for that. ",
    "blackmiaool": "@nicolo-ribaudo  It's done.. ",
    "bcoe": "@loganfsmyth https://github.com/istanbuljs/babel-plugin-istanbul/blob/master/package.json#L13 this change landed in babylon@6.17.2 breaks babel-plugin-istanbul and istanbuljs -- or at least their ignore next handling.\nBasically I think because the comment gets lumped up onto the prior line, we fail to recognize it as something that should be ignored; I'm digging into istanbul's instrumenter now to see if this is something that could be fixed upstream \ud83d\ude04 . It seems like the underlying issue might be that the comment will no longer be treated as a leadingComment as a result to moving changing its scope, which breaks this logic in istanbul-lib-instrument:\njs\n            node.leadingComments.forEach(function (c) {\n                const v = (c.value || /* istanbul ignore next: paranoid check */ \"\").trim();\n                const groups = v.match(COMMENT_RE);\n                if (groups) {\n                    hint = groups[1];\n                }\n            });. @aardito2 it feels weird to me that the comment ends up scoped to inside the console.log's parenthesis -- this agrees with what I'm seeing in unit tests:\nJust switching it to this:\n```js\n  'use strict'\nconst test = foo => {\n    switch (foo) {\n      // the bug discussed in #64, seems to only\n      // crop up when a function is invoked before\n      // a single line comment, hence Date.now().\n      case 'ok':\n        return Date.now\n  /* istanbul ignore next */\n  default:\n    throw new Error('nope')\n}\n\n}\ntest('ok')\n  output = 'unknown'\n```\nalso works; any thoughts about a workaround, that would solve both the bug you were addressing with your patch, and allow ignore to continue working?\n. Thanks for digging into this so fast; I'm definitely pretty out of my element with the parser bits of Babylon, hope to learn more.. ",
    "aardito2": "For the example code given, adding a semicolon after the console.log in the first case results in the expected behavior:\n```\n'use strict'\nconst test = foo => {\n  switch (foo) {\n    case 'ok':\n      return console.log('this is fine');\n/* istanbul ignore next */\ndefault:\n  throw new Error('nope')\n\n}\n}\ntest('ok')\n```\nI'm not sure what the expected output should be without the semicolon - it is ambiguous whether it should be treated as a leading comment on the next case or a trailing comment on the return.\nRemoving the final case shows the same behavior: \nIn: \nswitch (foo) {\n  case 'ok':\n    console.log('this is fine')\n    /* istanbul ignore next */\n}\nOut: \n```\n'use strict';\nswitch (foo) {\n  case 'ok':\n    console.log('this is fine'\n    / istanbul ignore next /\n    );}\n```\nIn: \nswitch (foo) {\n  case 'ok':\n    console.log('this is fine');\n    /* istanbul ignore next */\n}\nOut: \n```\n'use strict';\nswitch (foo) {\n  case 'ok':\n    console.log('this is fine');\n  / istanbul ignore next /\n}\n```. I definitely agree - including special cases for certain node types works for now, but there should be a better, more general solution for handling these cases going forward.. ",
    "krsjoseph": "@jridgewell I'm just importing it into a react component to be used as an array. . Thanks! @hzoo, @jridgewell @nicolo-ribaudo .  @hzoo I'm gonna submit a PR over at the react native repo to include the ignore by default. Example object.\nIt's basically ~79800 of these records.\n```json\n[{\n    \"_id\": \"593b7c28c5adbaa75c0833e5\",\n    \"firstname\": \"Krs\",\n    \"lastname\": \"Joseph\",\n    \"dob\": \"1993-09-10T04:00:00.000Z\",\n    \"uuid\": \"66738cfdc13842290c732372b0c365812d8510048bf8fa1afb2e78fb736c6c33\",\n    \"companyName\": null,\n    \"isGuardianMember\": false,\n    \"insuranceCompany\": \"The Beacon Insurance Company Limited\",\n    \"__v\": 0,\n    \"isRegistered\": false\n}]\n```\n. ",
    "basicdays": "Would a test to assert the output of the following make sense?\njs\nexport default @thing\nclass Stuff { }. ",
    "ashsearle": "What's the rationale for the Directive value being the raw value without quotes?\nThe es2017 spec seems to define use strict using the raw value including quotes:\n\nA Use Strict Directive is an ExpressionStatement in a Directive Prologue whose StringLiteral is either the exact code unit sequences \"use strict\" or 'use strict'. A Use Strict Directive may not contain an EscapeSequence or LineContinuation.\n\nThis wording hasn't changed since the ECMAScript 5th edition spec in 2009 (see PDF)\nThe pull request doesn't change whether value includes or excludes quotes, it only changes whether the value has pre-processed escape sequences.. @danez It's not just plugins that have problems, there's an issue in babel-generator which currently handle directives as though they're normal string literals.  Please see https://github.com/babel/babel/issues/4767 (and pull request https://github.com/babel/babel/pull/5935). ",
    "josephfrazier": "Thanks for the quick merge! Any idea when the v7.0.0-beta.17 release will be?. ",
    "jugglinmike": "Excellent :) Some initial questions:\n\nHow should the Test262 project be included here? Some possibilities include a\n  git submodule or a git checkout that is fetched as necessary at test time\n  (and excluded from the project via a .gitignore file)\nHow should the tests be executed? My initial guess would be to define a new\n  target in the project's Makefile, but I don't know if you have portability\n  concerns with that approach\nRelated to the above, how should test runs be scheduled? I imagine you'll\n  want a new \"job\" in the TravisCI system dedicated to this. They could be run\n  as part of the npm test script, but this will likely be a little\n  heavy-handed for general-purpose development.\nWould you like these tests to run in anything other than the current LTS\n  release of Node.js?\n\nWith those answered, I should be able to put together an initial proof of\nconcept so that we have something more concrete to discuss.\n\nAlso your previous link is referring to this issue currently\n\nLooks like I forgot to include the URL--whoops! I've fixed that in the original\ncomment.. @hzoo I think I may have some time to give this a try over the weekend. I'm\nreluctant to start without knowing your goals, though--do you have a few\nmoments to take a look at those questions above?. @xtuc I saw that--very good. However, as I mentioned above, even when/if Babel runs Test262, I think there is still value in testing the parser itself.\n\nYeah could possibly a git submodule, I guess an npm package would be too slow\nto install?\n\nI raised this issue a while back, but nothing ever came of it. More recently, I've been thinking that Test262 may not be well-suited to typical software publication channels due to its consumption model. Folks that use the test suite generally expect to get the latest version of master on their own schedule. If the project didn't publish a new version for each commit, then consumers would be artificially gated on whatever release schedule it followed. On the other hand, supporting this level of flexibility through a package manager would require publishing a new version with every commit, which seems a bit wasteful.\nThough I'm just trying to give some background on my current thinking. I'd be happy to get more input! For the time being, I'll work with a git submodule.. I've submitted a patch for this at #654.. > I think there should be a way to specify which plugins enable for a given\n\nfile/folder. Maybe we should use the features flag?\n\nI'd be open to try that, but at some point, I think we should consider\nintroducing a YAML parser. The ad-hoc regular expressions I've written seem\n\"close enough\" for the current use case, but using RegExps to interpret dynamic\nvalues like that is much more error prone. I've been trying to avoid adding any\ndependencies for this patch, so I'm wondering how the project maintainers would\nfeel about a new \"devDependency\" on a YAML parser.. Alternatively, we could unconditionally enable all plugins for all tests. This is certainly less precision, but since Test262 generally doesn't include any \"future hostile\" tests, it may be an acceptable compromise.. > is there already a script/way to remove the whitelist tests automatically if\n\nthings are fixed later?\n\nThere was not, but that's a good idea. Maintaining the white list in JSHint has\nbeen a pain point for me. I've updated the patch to include a command-line\nflag and dedicated Makefile target.\nSo I think that's everything--this should be ready for another round of review.. I've updated the job to run in the latest release of Node.js, and I've taken @Kovensky's advice regarding the \"util.promisify\" module. My thinking is that many contributors likely prefer to develop in the LTS release. Even though they may not all care to run this particular test suite, the module's dependency tree is light enough to be justify the convenience.\nThe babel-test job is failing. Is there something we should do about that in this patch?. Whoops; before you updated the comment, I thought you were saying I should update the yarn lock file. I guess wasn't necessary, after all (I'm not familiar with that tool). Should I revert this latest commit?. It's been my pleasure :). Yes. This is critical--thank you for spotting it.. For consistency, I'd prefer to keep a functional style. But I see your point. I've made this the right-hand side of a void expression--that will guard against ASI-related bugs, and it should also more clearly indicate to the reader that this literal value is not used beyond this statement.. I wouldn't object, but I believe this question was @hzoo, so I'm going to hold off unless he agrees.. Works for me!. ",
    "alexeyraspopov": "What\u2019s the status of this PR? What\u2019s left to be done? Any help needed?. ",
    "krzkaczor": "@alexeyraspopov There is a small todo list in the ticket description. Unfortunately, I don't have time right now to continue work on this issue but I will come back to it in some time. \nOne of the first steps now should be re-aligning it with spec proposal - I am sure that it developed further.\nFeel free to continue from where I left off ;) . @hzoo @xtuc I wonder if we should make match a keyword at all (or at least part of this array)? \nIf we do it then we need to tweak for all situations where match is currently being used as a valid identifier. Of course only when the plugin is enabled but when it is, it can break a lot of code out there.\nWhat I imagined instead as a simplest implementation, is to tokenize it as a identifier and use lookup to determine if it should be a keyword in a given context (part of match expression or just a ex. function call match(something);).. @hzoo @xtuc this is fixed by 5857eb3. ",
    "droooney": "In babylon@7 the first one is no longer, but the parser now allows\njs\nasync function a() {\n  const await = foo;\n}\nwhich is a syntax error.\n2 and 3 still exist.\nFor yield:\n1 is ok (outside a generator it is not a syntax error, inside it is). 2 and 3 still exist.. ",
    "jbrown215": "Thanks for the quick review!\nI assume I'll need to put up a similar PR against 6.x?. @hzoo, mind taking a look?. Oops-- removed! Thanks :). Thank you! Definitely happy to fix any issues that come up. ",
    "valscion": "You've got a test/fixtures/flow/opaque-type-aliases/declare_opaque/.actual.js.swp file in here, probably didn't intend to commit that?. ",
    "tunnckoCore": "I'm not talking about making eslint plugin. I'm talking about moving some babel-eslint code here as native babylon's  builtin plugin. Babel-eslint then may be just some thin layer for babel-specific things and fixes. In bonus we will can just use babylon as eslint parser.\n\nNot sure what you mean about the full support/config of babylon though? and babylon does allow ranges as an option babel/babylon#options.\n\nI just mean that babel-eslint has too much hardcoded things and some things may not work so well like it would if we just has espree plugin here and use that parser in the eslint directly, not through babel-eslint.. What? :laughing: Sorry it's sounds a bit strange to me. Of course it is possible, but then it won't feel as good as defining it through ESLint's parser option :v: I see it like needless effort, when we almost have ready esPree plugin for babylon.. Doh, probably, i'm a bit tired :rofl: just realised that after rereading it.. > @not-an-aardvark:  In theory it sounds like it would nice to have a way of making babylon produce ESTree\nit's Babylon's esTree plugin making that? huh. Or you meant esPree. Haha, damn names :rocket: :rofl: . @hzoo yup.\nYea, it worth.\nSo please open, i can get something done when get time.. ",
    "not-an-aardvark": "\ncc @not-an-aardvark on thoughts?\n\nThanks for the ping. In theory it sounds like it would nice to have a way of making babylon produce ESTree, although I think babel-eslint would still be necessary in either case for patching scope analysis. I'm not really familiar enough with babel-eslint's codebase to have a strong opinion one way or the other about whether this is worthwhile.. I meant ESTree. I hadn't realized that plugin already exists.. ",
    "nveenjain": "beginner-friendly. Seems my type. I am willing to submit a PR. Thanks Daniel for the hint.. ",
    "Andarist": "Can be closed, PR already merged in :). Is this still for grabs? I would like to work on it, but aint sure if noone has started yet.. Yeah, if I do this one I'll definitely look into other one, just don't want to block the other one yet, cause Im just diving into babylon for the first time :). Can be closed, PR already merged in.. @nicolo-ribaudo ive pushed out everything that had to be pushed in this repo, so you can check it out\nstill need to change babel's test though, but my make went totally mad (make: error: unable to find utility \"make\", not a developer tool or in PATH \ud83d\ude02 ) so Ill tackle this in following days. @existentialism I've rebases and reverted the whitelist additions, but there are still 2 problems:\n\n\nhttps://github.com/babel/babel/pull/6102 is not merged in, so integration test is failing\n\n\nwe need to update TEST262_COMMIT so we test against latest test suite, however it gives me horrific results now \ud83d\ude28 \n\n\n```\nSummary:\n \u2714 51119 valid programs parsed without error\n \u2714 3043 invalid programs produced a parsing error\n \u2714 765 invalid programs did not produce a parsing error (and allowed by the whitelist file)\n \u2714 272 valid programs produced a parsing error (and allowed by the whitelist file)\n\u2718 484 valid programs produced a parsing error (without a corresponding entry in the whitelist file)\n \u2718 176 non-existent programs specified in the whitelist file\n```\nI guess there were many additions between previous commit we were pointing at and the latest master - https://github.com/tc39/test262/compare/4ea2931f169d4a4b5a9a4a7c731cc92bf7b3e13c...master\nHave no idea what should be done now. Any recommendations?. @jridgewell \n\nThat's fine, let's update the whitelist.\n\nshould I add 484 and remove 176 items to/from the whitelist?\n. @jridgewell \nhttps://github.com/babel/babylon/pull/692\nplease mention me when it gets merged, so I can rebase this one. Rebased, checks passing, all good here! :). this probably could be forbidden somehow here and here, but I would need to have knowledge there is im in declaration context and im checking rest's argument and Im not entirely sure whats the best practice to share such information. this is supposed to fix https://github.com/babel/babylon/issues/667 , it probably could be checked inside of the toAssignable call 3 lines below, but as mentioned in the other comment - im not sure whats the best way to share parent's (in this example parent being rest element) context/state information\n. this should also be specified imho by the RestElement's type but when I was trying to change it flow has yelled at me so much, that i just fled with my tails between my legs (for the time being - would love to adjust it properly). out of curiosity, does having rest's argument being an array pattern inside an array pattern have any purpose? besides that its possible to do ;p\nit seems those are equivalents:\njs\n// 1.\nvar [a, ...[b, ...c]] = [1,2,4,5,6]\njs\n// 2.\nvar [a, b, ...c] = [1,2,4,5,6]\nIt seems to me that this is the same case which got now forbidden for object's rest:\njs\n ( {...{a, b}} = {} )\nwhich simply didnt do much (to my understanding), just unwrapping/flattening this nested pattern. Oh, yeah, Ive seen this as allowed so Ive added it as valid. Gonna remove this and add a test. imho validArgumentTypes is more readable as its describing in the name why we check those and this dont have to be deduced by the reader, but I can refactor it to && if u want. ok... thats a weirdo case :trollface: but a valid one, thanks for sharing!. ",
    "beck": "My output:\n$ npm info babylon --json | grep 0-ranges\n    \"7.0.0-beta.0-ranges\": \"2017-02-15T23:43:49.112Z\",\nJust to double check I'm configured against npmjs:\n```\n$ npm info babylon --json --ddd\n...\nnpm sill mapToRegistry registry https://registry.npmjs.org/\nnpm verb request uri https://registry.npmjs.org/babylon\n...\n````\n. My mistake, that tag is coming from the time block, not versions.. ",
    "janryWang": "@hzoo Because i want to develop a private unofficial babylon plugin that is dedicated to helping me parse the code.But I did not find babylon had this ability.. Thanks @danez , But I still hope that babylon has external scalability. Can you consider supporting this ability in the future?. ",
    "echo304": "Let me tackle this issue \ud83d\udd90 . ",
    "Qantas94Heavy": "Done.. I've done some updates to the PR -- will squash later once review done.\nWhile I'm at it, I'm just wondering whether the one test failure is important or not.\nThis roughly equivalent non-private code just throws Unexpected token (2:4):\nclass A {\n  a b;\n}\nDo we need it to check whether a semicolon should be there, and if so, how would I go about doing that?. @jridgewell right, updated.. I think this comment should go after the new case for 35 (\"#\").. Is this a leftover true from the removal of the \"liberal\" parameter?. Right -- I'll add a check for MemberExpression.. Would that be needed for the normal ClassMethod as well?. Confused about where exactly you want this part to be moved to.. Huh? Maybe my wording was confusing.\nWhat I'm trying to say is that it's now being eaten, but it wasn't detected as being \"private\" in the code above (let isPrivate = ...). Is that wrong?. Does this need static in the first place? If not, how would I handle that in terms of types?. Done.. Yeah, that was a dodgy hack for some test failure because I had set computed elsewhere by accident. I've fixed this now.. I think the method signature says it's a Class[Private]Property or Class[Private]Method.. Done -- should the two be merged or remain separate?. Removed (not sure why it's not saying it's outdated).. ",
    "jseminck": "This change indeed correctly modifies the ClassExpression range. But if you use export default on that class, then the ExportDefaultDeclaration range is not updated.\nThis is with the latest version of babylon7:\n\nIs this behaviour correct/expected? This currently causes an issue on ASTExplorer.net - but I'd first like to understand if the AST is correct before thinking about a possible change to the ASTExplorer highlighting algorithm: https://github.com/fkling/astexplorer/issues/269\nThere is similar test case that produces a similar AST: https://github.com/babel/babylon/pull/699/files#diff-e06e18fe1968f9e68a437920dadf4432R32\nAs always, thanks for the support/work you guys do for babel \ud83c\udf89 \n. @JamesHenry sorry for the slow reply. I'm quite sure the behaviour is the same with the original change... I'm trying to dig into the code to figure out how it could potentially be changed (I'm really not certain if it's even a bug yet).. ",
    "willin": "https://github.com/tc39/proposal-pipeline-operator. minor version update should be compatible, this plugin written in 6.13.0. extends babylon like https://github.com/SuperPaintman/babel-plugin-syntax-pipeline/blob/master/src/index.js\ncannot work for 6.13.0+ versions? how to make it work, is there any docs to ref? @hzoo . ",
    "rajikaimal": "Would like to work on this !. ",
    "swapnilraj": "Hi I would like to help with this.\ud83d\udc4d. ",
    "rstacruz": "hey, somewhat off-topic, but:\n\nWithout this change it is very difficult to build tools that support both Flow and TypeScript, which I'm currently trying to do so it would be good to get this change in sooner rather than later.\n\nMay I ask what you're building? Sounds awesome!. ",
    "azz": "For what it's worth, as an AST consumer, so far I have preferred it when nodes are shared between Flow and TypeScript. For the most part, once a TypeScript AST has been converted via typescript-eslint-parser, we can print it in prettier with the same code path as Flow. There are very few cases (only one from a quick search, relating to directives) where we've had to check if the name of the parser is \"typescript\" to make a decision on how to re-print the AST.\nIn contrast, if new AST nodes are introduced, we'd have to add extra ||s or cases that line up with the existing flow nodes, and we'd inevitably miss a few cases in the future.\nIn a sense I look at the node re-use as a form of polymorphism. If it is possible to provide the context required to perform edge-case decisions, why not go for that option?\n\nNo, we should not require context outside of an individual node or its parent to determine what the node is.\n\nnode.type tells you what the node is. A TypeAnnotation is a type annotation. What you're after is what language the node comes from, which seems outside the scope of a node to provide.\nSometimes you need more than the node and its parent. You might need to know the source type, if the current scope is strict mode, even in some cases you might need the extension (TypeScript acts differently depending on .ts and .d.ts). . I'm fine with it, @thejameskyle's point \n\nWe should be optimizing to avoid future breaking changes to the AST\n\nIs the most compelling. It'll take some work on the prettier side to adopt this change, and it may lead to some bugs here and there, but if it prevents breaking changes in the future that's always a win.\nWe may well end up using @thejameskyles unified AST as prettier doesn't really care about semantics of the TS/Flow AST.. Has been changed from Binary- to LogicalExpression in this PR.. My intuition is it should be completely hot-swappable with ||. Great for codemods/fixers. . ",
    "jslz": "@xtuc thank you for your attention & offer to look. Unfortunately I can't share the full code. Our guess is that it was due to this below, but I don't now for sure.\n```\nconst s = StyleSheet.create({     \n host__separator: {   \n   left: 10 + 85,       \nmarginTop: 10,       \nwidth: width - (10 - 85),    // this line  \n   height: 1,       \nbackgroundColor: '#E5E5EA',    \n },\n});\n```. ",
    "Alphapage": "Thank you very much those infos. You help me a lot.\nBest regards.. ",
    "cletusw": "Let me make sure I understand this correctly. Every time babylon updates to support a new version of ECMAScript, I now have to make sure to add each language feature in that version to no-restricted-syntax (eslint-plugin-compat doesn't seem to catch async functions) or else they will silently succeed at build time and break any old browsers that I support?\nEDIT: Since I depend on a select few babel syntax plugins, I have to use babel-eslint. Otherwise, I could just use the default espree parser for eslint and set ecmaVersion to 2015 to catch these.. Sure, but that seems antithetical to babel's purpose of allowing me to write whatever I want and transpiling down to lowest-common-denominator code. If I've set my babel config to only load babel-preset-es2015 then it seems reasonable to expect that anything beyond that would fail to build.. ",
    "tolmasky": "Ah, indeed, I guess node REPL auto-wraps and that is why > { ...rest } = {} works.. ",
    "EtherTyper": "@hzoo Thanks for telling me, I didn't know about that proposal. It doesn't seem like code generation for generator arrow functions from that proposal works yet, however:\n```js\n\nconsole.log(JSON.stringify(noGenerateAST, null, 2))\n{\n  \"type\": \"ArrowFunctionExpression\",\n  \"loc\": {\n    \"type\": \"CallExpression\",\n    \"loc\": null,\n    \"callee\": {\n      \"type\": \"Identifier\",\n      \"loc\": null,\n      \"name\": \"hello\"\n    },\n    \"arguments\": [\n      {\n        \"type\": \"Identifier\",\n        \"loc\": null,\n        \"name\": \"world\"\n      },\n      {\n        \"type\": \"StringLiteral\",\n        \"loc\": null,\n        \"value\": \"What's up world?\"\n      }\n    ],\n    \"optional\": null\n  },\n  \"id\": {\n    \"type\": \"Identifier\",\n    \"loc\": null,\n    \"name\": \"helloWorld\"\n  },\n  \"params\": [\n    {\n      \"type\": \"ArrayPattern\",\n      \"loc\": null,\n      \"elements\": [\n        {\n          \"type\": \"Identifier\",\n          \"loc\": null,\n          \"name\": \"hello\"\n        },\n        {\n          \"type\": \"Identifier\",\n          \"loc\": null,\n          \"name\": \"world\"\n        },\n        {\n          \"type\": \"Identifier\",\n          \"loc\": null,\n          \"name\": \"object\"\n        }\n      ]\n    }\n  ],\n  \"body\": {\n    \"type\": \"CallExpression\",\n    \"loc\": null,\n    \"callee\": {\n      \"type\": \"Identifier\",\n      \"loc\": null,\n      \"name\": \"hello\"\n    },\n    \"arguments\": [\n      {\n        \"type\": \"Identifier\",\n        \"loc\": null,\n        \"name\": \"world\"\n      },\n      {\n        \"type\": \"StringLiteral\",\n        \"loc\": null,\n        \"value\": \"What's up world?\"\n      }\n    ],\n    \"optional\": null\n  },\n  \"generator\": false,\n  \"async\": true,\n  \"expression\": true\n}\nconsole.log(require('babel-generator').default(noGenerateAST).code)\nasync ([hello, world, object]) => hello(world, \"What's up world?\")\nconsole.log(require('babel-generator').default({ ...noGenerateAST, generator: true }).code)\nasync ([hello, world, object]) => hello(world, \"What's up world?\")\n```. Okay, thank you! I'll just leave this issue closed until then.. \n",
    "pronevich": "Thanks guys, I got it and reinstall modules solve issue. @AleCaste maybe you miss comma between components in array?\n. ",
    "AleCaste": "Hi @pronevich , how did you fix the issue? I upgraded to React v16 and even though I am rendering an array with keys, I am still getting this error. I updated all babel modules and still getting the error!. Wowwwwwww!!!!....  That was exactly it! Silly stupid me.\nI am sure others will make the same mistake; it's so easy to forget that especially if you are refactoring code for React v16\nThanks!!!. ",
    "esprehn": "I mention that in the bug report, but that's not what I want. I want the parser to be in the mode that the spec says new Function(value) is parsed in. Is that what allowReturnOutsideFunction enables?. Specifically that algorithm is this:\nhttps://www.ecma-international.org/ecma-262/8.0/#sec-createdynamicfunction\nwhich can parse as either FunctionBody, GeneratorBody (allowing yield) or AsyncFunctionBody (allowing await).\nSo you probably need 3 source types, one for each type of function.. > I mention that in the bug report\n\n\nI don't see that in there?\n\n\nSorry I should have been more clear, that's what I meant by \"an error about return statements which we can suppress, but that's not really what we want\".\n\nI want the parser to be in the mode that the spec says new Function(value) is parsed in.\n\nFair enough. I don't think this would be sourceType-related though. We'd probably just want a general context: 'program' | 'function' | 'async' | 'generator' option or something if we wanted to do this, since those can all occur both in modules and in scripts.\n\n\nYeah that would be fine. In the same way there's parseExpression, parseFunction would be nice.\n\n\nThat said, is there any reason you wouldn't just actually wrap your code in a function before parsing it, then just parse it as a normal file?\n\n\nFor the same reasons we no longer do that in web browsers for inline event handlers, and the same reason the spec doesn't do that. It means invalid code will be parsed as valid and things can confusingly escape from the enclosed function. That's the reason to use new Function(...argNames, body) over:\neval(`( ${argNames.join(',')} ) => { ${body} }`)\nSince a body like '} codeOutsideFunction()<!--' or an invalid argument name, or more accidental things things like an extra brace on the end of an if block can early terminate the function and produce confusing, buggy, (or security problematic) behavior.\nTrying prevent all of those situations leads you down a path of trying to parse the code with regexes and wrap it with progressively more complex wrappers (we tried all this in Chrome, it was a bad idea :)) The reason to use a parser like Babel is to avoid having to ever parse or interact with the code as a string and instead make sure to interact with it always as an object structure as defined by the spec.\nI suppose an alternative would be to add analogs to allowReturnOutsideFunction for both yield and async but that feels a lot hackier than babylon.parseFunction(body, { kind: \"async\" }).. We don't want to go that approach because argument names are still passed in as raw strings so we'd need to validate those, plus we'd need to validate that there's only one function in the list (since you could escape and end up with two). I suppose we could parse it with no function names, pull the function body out, serialize just that code, and then pass it down through new Function. It's getting uglier and uglier though.\nOverall this means abandoning the .transform() abstraction and implementing a bunch of our own parsing logic which is unfortunate since these parse steps are both used by the browser for things like setTimeout(string) and in the spec for things like new Function().\nI'm surprised you're so opposed to adding the same API the spec has. Being able to do new Function(\"a\", \"b\", babel.transform(...)) is way better than eval(), it seems reasonable to me that babel should support that use case. :)\n(Also fwiw having this API makes much more sense to me than something like allowReturnOutsideFunction which has nothing to do with the spec, and for which most use cases probably want the parsing rules for a function.). new Function deals with parameter names for you, we never parse them. :). ",
    "clemmy": "@Kovensky Hopefully https://github.com/facebook/jsx/pull/94 will be merged soon, so that my PR for Babel/Babylon can include those changes. :). Sorry I've been inactive with this PR for a while! I'm going to open a corresponding PR for this on the Babel repository in the coming days. :). :man_dancing: . Not that I can find in the docs! :(. ",
    "wcastand": "I'm not sure the expected.json is the expected output. If someone can valid that, that would be awesome :). ",
    "mbehzad": "I don't know why the travis build failed. the tests work locally fine. Except the linting which throws error in types.js which was last changed with the usage of prettier in commit 5180ecdc (#600) couple of months ago. \ud83e\udd14. ",
    "jezell": "good catch, fixed.\n. ",
    "varemenos": "\nThe new plugin estree can be enabled and puts the parser into estree-compatible mode.\n\nThis needs rephrasing. > in most cases it was support easy to replace\nin most cases it was ~support~ easy to replace?. > If you want migrate from non-estree mode to estree\nIf you want to migrate from non-estree mode to estree. > Babylon exports a new function to parser a single expression\nBabylon exports a new function to parse~r~ a single expression. > It was prior to this version possible to parse them by enabling the flow plugin, but this was not intended behaviour.\nPrior to this version it was possible to parse them by enabling the flow plugin but this was not intended the behaviour.. ",
    "MarckK": "Hmmm.  This is causing a failure in one of my tests.  I'll have to look at more.. Yes.  \ud83d\udc4d . "
}