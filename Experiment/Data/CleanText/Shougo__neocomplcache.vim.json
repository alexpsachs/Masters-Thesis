{
    "Shougo": "\u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u306d\u3002\u305d\u308c\u306f\u4ee5\u524d\u304b\u3089\u601d\u3063\u3066\u3044\u305f\u3053\u3068\u306a\u306e\u3067\u3001\u4eca\u5ea6\u5b9f\u88c5\u3057\u307e\u3059\u3002\n. \u79c1\u3082\u305d\u3046\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n\u6c17\u9577\u306b\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u691c\u8a0e\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n. \u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u306d\u3002\u691c\u8a0e\u3057\u307e\u3059\u3002\n. \u78ba\u304b\u306b\u3044\u3089\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\u6b21\u56de\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3067\u5bfe\u51e6\u3057\u307e\u3059\u3002\n. \u3061\u3087\u3063\u3068\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u306f\u7121\u7406\u305d\u3046\u3067\u3059\u3002\n\u3053\u308c\u306f\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u2026\u2026\u3002\u305f\u3060\u3001\u5c55\u958b\u53ef\u80fd\u306a\u3082\u306e\u306fmenu\u3092\u66f8\u304d\u63db\u3048\u3088\u3046\u3068\u306f\u601d\u3044\u307e\u3059\u3002\n. \u3061\u3087\u3063\u3068\u3053\u3061\u3089\u3067\u306f\u78ba\u8a8d\u304c\u53d6\u308c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u591a\u5206\u5909\u6570\u304c\u521d\u671f\u5316\u3055\u308c\u306a\u304b\u3063\u305f\u3093\u3067\u3057\u3087\u3046\u3002\u4fee\u6b63\u3059\u308b\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. \u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\u6b21\u671f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u30d8\u30eb\u30d7\u306f\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u4f5c\u6210\u30ac\u30a4\u30c9\u306b\u3064\u3044\u3066\u306f\u3001\u307e\u3060\u30d8\u30eb\u30d1\u95a2\u6570\u306e\u4ed5\u69d8\u304c\u56fa\u307e\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u653e\u7f6e\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u6700\u8fd1\u3067\u306f\u307b\u307c\u4ed5\u69d8\u304c\u56fa\u307e\u3063\u305f\u306e\u3067\u3001\u4f5c\u6210\u3057\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3057\u3070\u3089\u304f\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\u3002\n. \u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u306d\u3002\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u3069\u3046\u3084\u3089\u4fee\u6b63\u30df\u30b9\u306e\u3088\u3046\u3067\u3059\u306d\u3002\u4fee\u6b63\u3057\u307e\u3059\u3002\n. \u305d\u3046\u3067\u3059\u306d\u3002\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u6b21\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n. Thank you for the comment.\nI intend to always make English version, but a lot of work loads cannot readily realize it.\nBecause I am going to do it little by little, please wait.\n. \u305d\u308c\u306f\u56f0\u308a\u307e\u3057\u305f\u306d\u2026\u2026\u3002\n.vimrc\u3067\u306f\u3001\u3069\u3093\u306a\u8a2d\u5b9a\u3057\u3066\u307e\u3059\u304b\uff1f\n\u305d\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\u3067\u3082\u7121\u7406\u3067\u3059\u304b\uff1f\n\u8a2d\u5b9a\u306b\u554f\u984c\u304c\u306a\u3044\u3068\u3059\u308b\u3068\u3001neocomplcache\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u30d1\u30bf\u30fc\u30f3\u304c\u304a\u304b\u3057\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n. Windows\u306a\u3089\u3070\u3001runtime\u3088\u308a\u306fvimfiles\u306e\u65b9\u304c\u3088\u3044\u3067\u3059\u3088\u3002\nLinux\u74b0\u5883\u306a\u3089\u3001.vim\u30d5\u30a9\u30eb\u30c0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3079\u304d\u3067\u3059\u3002\n\u3080\u3001\u78ba\u304b\u306b\u307e\u3063\u3055\u3089\u306e\u74b0\u5883\u3067\u306f\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u306e\u52d5\u4f5c\u304c\u304a\u304b\u3057\u3044\u3067\u3059\u306d\u3002\n\u8abf\u67fb\u3057\u3066\u307f\u307e\u3059\u3002\n. .vimrc\u4e0a\u3067\u3001\nset completeopt=menuone\n\u3068\u3057\u306a\u3044\u3068\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u306e\u52d5\u4f5c\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n. \u78ba\u304b\u306b\u305d\u308c\u306f\u601d\u3044\u307e\u3059\u306d\u3002\u3061\u3087\u3063\u3068\u5b9f\u88c5\u3067\u304d\u308b\u304b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n. \u305d\u308c\u3063\u307d\u3044\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3082\u3046\u5c11\u3057\u69d8\u5b50\u3092\u898b\u3066\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u3067\u3059\u3002\n. \u7121\u4e8b\u3001neocomplcache Ver.2.67\u3068\u3057\u3066\u53d6\u308a\u8fbc\u307e\u308c\u307e\u3057\u305f\u3002\n\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\u3002\n\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u3068\u3057\u3066\u4e8c\u6841\u5165\u529b\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u4e00\u6841\u5165\u529b\u3059\u308b\u3060\u3051\u3067\u306f\u9078\u629e\u72b6\u614b\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u4ed5\u69d8\u3067\u3059\u3002\n. \u7d30\u304b\u3044\u4fee\u6b63\u3082\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u6a5f\u80fd\u306e\u305f\u3081\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002\u305f\u3060\u3001\u4f7f\u3044\u52dd\u624b\u304c\u98db\u8e8d\u7684\u306b\u826f\u304f\u306a\u308b\u6a5f\u80fd\u306a\u306e\u3067\u3001\u512a\u5148\u7684\u306b\u5b9f\u88c5\u3055\u308c\u305f\u306e\u306f\u4e8b\u5b9f\u3067\u3059\u306d\u3002\n\u9762\u767d\u305d\u3046\u306a\u63d0\u6848\u306a\u3089\u3001\u305d\u306e\u307e\u307e\u63a1\u7528\u3059\u308b\u3053\u3068\u3082\u591a\u3044\u306e\u3067\u3001\u3053\u308c\u304b\u3089\u3082\u4f55\u304b\u3042\u308c\u3070\u9023\u7d61\u3057\u3066\u9802\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n. \u305d\u308c\u306f\u591a\u5206\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u6307\u5b9a\u304c\u304a\u304b\u3057\u3044\u3093\u3067\u3057\u3087\u3046\u306d\u3002\u3061\u3087\u3063\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n. \u4e00\u5fdc\u4e8c\u3064\u3068\u3082\u539f\u56e0\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u4eca\u65e5\u4e2d\u306b\u3069\u3046\u306b\u304b\u3057\u307e\u3059\u3002\n. \u6700\u65b0\u7248\u3067\u5fdc\u6025\u51e6\u7f6e\u7684\u306b\u4fee\u6b63\u3002\n\u672c\u5f53\u306a\u3089\u6839\u672c\u7684\u306b\u76f4\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a\u306f\u3053\u308c\u3067\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. \u4fee\u6b63\u3057\u305f\u306f\u305a\u306a\u306e\u3067\u3059\u304c\u2026\u2026\u3002\u304a\u304b\u3057\u3044\u3067\u3059\u306d\u3002\n. \u30d0\u30fc\u30b8\u30e7\u30f32.68\u306f\u76f4\u3063\u3066\u306a\u3044\u3067\u3059\u3002\u6700\u65b0\u306e\u3082\u306e\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nhttp://github.com/Shougo/neocomplcache/tree/7e201a629056457e08dfa760c120e1bf0aadd96e\n. \u6587\u5b57\u5217\u306e\u307f\u306e\u30aa\u30e0\u30cb\u88dc\u5b8c\u306e\u5909\u63db\u304c\u3046\u307e\u304f\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u3088\u3046\u3067\u3059\u3002\nVer.2.69\u3067\u6839\u672c\u7684\u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. Thanks!\nIn the latest edition, support of Objective-C/C++ was added.\nPlease try it.\n. While a pop-up menu is displayed, the menu of neocomplcache cannot be displayed. \nThe movement is funny. \nI want more detailed information. \nIt is a hand that call omni completion from neocomplcache in F5 being assigned to omni completion when I read a source of cocoa.vim.\n. It seems to be caused by the fact that omni completion of neocomplcache did not support abbr somehow or other when I examine it. I will revise it in the next version.\n. \u5831\u544a\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u305d\u306e\u30d0\u30b0\u306f\u79c1\u3082\u8a8d\u8b58\u3057\u3066\u3044\u3066\u3001\u73fe\u5728\u4fee\u6b63\u4e2d\u3067\u3059\u3002\nneocomplcache Ver.3.02\u3067\u89e3\u6d88\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n. \u305d\u3046\u3067\u3057\u305f\u304b\u3002\u305d\u308c\u306f\u826f\u304b\u3063\u305f\u3067\u3059\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\u4fee\u6b63\u3057\u307e\u3059\u3002\n. \u305d\u308c\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u304b\u3089\u3067\u3059\u3002\n~/.neocon (g:NeoComplCache_TermporaryDir)\u306einclude_complete\u3084tags_complete\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. \u30ed\u30b0\u3092\u898b\u3066\u3001\u539f\u56e0\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u6b21\u671f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5bfe\u5fdc\u3055\u305b\u307e\u3059\u3002\nwritefile()\u306e\u30d0\u30b0\u3082\u4fee\u6b63\u3057\u307e\u3059\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u6b21\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n. \u3053\u306e\u30d0\u30b0\u306fVer.3.14\u3067\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002\n. \u6700\u65b0\u7248\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. I understood that there was the problem of the performance in neocomplcache.\nI want to deal the problem, but there is too little information.\nDetailed, please teach you do how to use any kind of Vim and when is troubled.\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. Python\u74b0\u5883\u304c\u304a\u304b\u3057\u3044\u3067\u3059\u306d\u3002:python\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nKaoriya\u7248\u306eVim\u306fPython(Ver.3\u4ee5\u4e0b)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u305d\u308c\u304c\u539f\u56e0\u3067\u306f\u306a\u3044\u3067\u3059\u304b\uff1f\n. :python\u304c\u52d5\u4f5c\u3059\u308b\u306a\u3089\u3001\u3067\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u547c\u3079\u308b\u306f\u305a\u3067\u3059\u3002\n\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3067\u52d5\u4f5c\u3057\u3066\u3001\u81ea\u52d5\u88dc\u5b8c\u3067\u30d0\u30b0\u304c\u51fa\u308b\u306a\u3089\u3001neocomplcache\u5074\u306e\u30d0\u30b0\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u2026\u2026\u3002\n. \u4e86\u89e3\u3067\u3059\u3002neocomplcache\u3067\u306a\u304f\u3066\u3082\u3001\u88dc\u5b8c\u306b\u95a2\u3057\u3066\u306a\u3089\u8cea\u554f\u3057\u3066\u69cb\u3044\u307e\u305b\u3093\u3088\u3002\n\u666e\u901a\u306f\u300cPython25.dll\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u300d\u3068\u304b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306f\u305a\u306a\u3093\u3067\u3059\u3051\u3069\u306d\u3002\n\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u4fc2\u306f\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u3002\u3061\u306a\u307f\u306b\u3001Mac\u3067\u3082\u540c\u69d8\u306e\u554f\u984c\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n. \u305d\u308c\u306fneocomplcache Ver.4.05\u3067\u5bfe\u7b56\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3084\u306f\u308a\u5148\u982d\u30de\u30c3\u30c1\u30f3\u30b0\u3067\u5224\u5b9a\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u306d\u3002\n. \u305d\u3046\u3067\u3059\u306d\u3002\u6b21\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u305d\u3046\u3057\u307e\u3059\u3002\n. \u3046\u30fc\u3093\u3002\u3053\u3061\u3089\u3067\u306f\u3046\u307e\u304f\u78ba\u8a8d\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u306d\u3002\n\u305f\u3060\u3001\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u304c\u304a\u304b\u3057\u304b\u3063\u305f\u308a\u3057\u305f\u306e\u3067\u3001\u305d\u3053\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u51fa\u6765\u308c\u3070\u30b9\u30cb\u30da\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n. \u3046\u30fc\u3093\u3002\u3053\u308c\u306f\u672c\u683c\u7684\u306bsnippets_complete\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u99c4\u76ee\u3067\u3059\u306d\u3002\n\u6df1\u523b\u7684\u306a\u30d0\u30b0\u3067\u306f\u306a\u3044\u4e0a\u306b\u3001\u4eca\u306f\u305d\u3093\u306a\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3001\u5bfe\u5fdc\u306f\u4fdd\u7559\u3068\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\n. Ver.5.0\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. > map  (neocomplcache_snippets_expand)\nimap  (neocomplcache_snippets_expand)\nPlease use imap.\n. > not all of snippets are present in completion menu, i.e. =b and #! is not there.\nSnippet pattern that symbol letter... is not supported. \nexample: =b, #!\nPlease revise it in English letter + symbol.\nexample: b=, shebang\n. > thats not really convenient. is there any way to make it expand after selection programmatically?\nI can't imagine. Please show an example if possible.\n. You may install this plugin in \"autoload/neocomplcache/plugin\" if you want to use snipMate from neocomplcache.\nhttp://gist.github.com/165090\n. It is impossible. Because it as for the specifications of Vim is because is it.\n. If complete snippet which there is not marker and not plural lines, I can implement it. However, I must revise the code, and there is a problem to disappear at the time of norrowing of Vim. Because there is not the strong reason to implement this, there is not a plan to implement for the moment.\n. The reason why it does not work is that probably Filename()  is not defined.\nI had implemented functions of snipMate, but it deleted.\nBecause there was an opinion to be bad. Please define it in your .vimrc.\n. This snippet works.\n\nsnippet Inc\n    #include \"${1:`getcwd()`}\"\n\n. Your problem was fixed in neocomplcache Ver.5.\nTry this.\nhttp://github.com/Shougo/neocomplcache/tree/ver.5\n. It's bug. I fixed.\n. I Fixed.\n. \u672c\u6765\u306f,\u533a\u5207\u308a\u3067alias\u3092\u6307\u5b9a\u3059\u308b\u306e\u3067\u3059\u3002\u3060\u304b\u3089\u3001\u3053\u306e\u6319\u52d5\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3068\u306f\u3044\u3048\u3001\u7a7a\u767d\u3082\u533a\u5207\u308a\u6587\u5b57\u5217\u3068\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3057\u3087\u3046\u3002\n. \u3088\u304f\u898b\u308b\u3068\u3001\u30d8\u30eb\u30d7\u306e\u8a18\u8ff0\u304c\u305d\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\u4f55\u3067\u3060\u308d\u3046\u2026\u2026\u3002\u6700\u65b0\u7248\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. Thank you. It's bug. I fixed.\n. Please use this mapping.\ninoremap   neocomplcache#smart_close_popup() . (&indentexpr != '' ? \"X\":\"\")\nneocomplcache's example was imcomplete. I will fix it.\n. \u3046\u30fc\u3093\u3002\u78ba\u304b\u306b\u305d\u3046\u3067\u3059\u306d\u3002\u4f55\u3067\u3053\u306e\u3088\u3046\u306a\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u305f\u3093\u3060\u308d\u3046\u3002\n\u307b\u3068\u3093\u3069\u305d\u306e\u307e\u307e\u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u3044\u3048\u3001\u30d1\u30c3\u30c1\u3092\u9001\u3063\u3066\u304f\u308c\u308b\u3060\u3051\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\u30b9\u30cb\u30da\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30ed\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f same filetype \u3068 include \u3067\u6a5f\u80fd\u304c\u91cd\u8907\u3057\u3066\u3044\u3066\u3069\u3061\u3089\u304b\u7247\u65b9\u304c\u4e0d\u8981\u306b\u898b\u3048\u308b\u306e\u3067\u305d\u3046\u63a8\u6e2c\u3059\u308b\u306e\u3067\u3059\u304c\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u3002\n\n\u3044\u3044\u3048\u3002\u3053\u306e\u6982\u5ff5\u306f\u5fae\u5999\u306b\u9055\u3044\u307e\u3059\u3002include\u306f\u73fe\u5728\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306b\u4ed6\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002\u591a\u91cd\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002same filetype\u306e\u5834\u5408\u306f\u88dc\u5b8c\u6642\u306b\u4e00\u7dd2\u306b\u8aad\u307f\u8fbc\u3080\u3068\u3044\u3046\u3060\u3051\u3067\u3059\u3002\n. Please use :NeoComplCacheCachingDictionary.\n. Right syntax is below.\n:NeoComplCacheCachingDictionary {filetype}\nExample :\nNeoComplCacheCachingDictionary c\n. If you omit filetype, neocomplcache use &filetype.\n. Please set g:neocomplcache_dictionary_filetype_lists['c'] and g:neocomplcache_dictionary_filetype_lists['cpp'].\nI think that this is the most certain.\nAnd execute :NeoComplCacheCachingDictionary.\n. Neocomplcache recognize 'dictionary' automatically, but there seems to be a problem in your environment.\nBecause the official way is to set g:neocomplcache_dictionary_filetype_lists, there is not a way.\n. Please use this.\n\" : close popup and save indent.\ninoremap   neocomplcache#smart_close_popup() . \"\"\n. I edited wiki page. Please check this.\nhttp://wiki.github.com/Shougo/neocomplcache/neocomplcache-tips\n\n4) switch between options with <Tab>\n5) choose option using <CR>\nWhat kind of meaning is it?\n. Please use this setting.\ninoremap  pumvisible() ? \u201c\u201d : check_back_space() ? \u201c\u201d : \u201c\u201d\ninoremap  neocomplcache#smart_close_popup() . \u201c\u201d\n. I do not understand it well. Please explain it in detail.\nProbably you want to complete it like a shell.\n. Please update neocomplcache and set this settings.\n\n\ninoremap <expr><TAB> pumvisible() ? \"\\<Down>\" : <SID>check_back_space() ?  \"\\<TAB>\" : \"\\<C-x>\\<C-u>\\<C-p>\\<Down>\"\ninoremap <expr><CR> neocomplcache#smart_close_popup() . \u201c\\<CR>\u201d\nlet g:neocomplcache_enable_auto_select = 1\nlet g:neocomplcache_disable_auto_complete = 1\nsetlocal completeopt+=longest\n\n. \\\u3067\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n. > 1. neocomplcache#complete_common_string() not works with phpcomplete\n\nFor 1st issue. The complete_common_string does not bring me the whole line include variables of the keyword, it just the keyword it self. \n\nneocomplcache#complete_common_string() is NOT whole line completion like . Please execute ':help neocomplcache#complete_common_string()'.\n\n\nlacks of some build-in function name with with phpcomplete\n\n\nPHP omni completion is too slow.\nSo I disabled PHP omni function by default.\nPlease set neocomplcache_omni_pattens['php'].\nLike this:\nlet g:neocomplcache_omni_patterns['php']= '[^. \\t]->\\h\\w_|\\h\\w_::'\n. Please set this. But too slow....\nlet g:neocomplcache_omni_patterns['php']= '[. \\t]->\\h\\w|\\h\\w*'\n. Please execute :NeoComplCacheCachingTags.\nneocomplcache don't caching automatically.\nBecause tags_complete's caching is slow.\n. Please update neocomplcache and write this in snippets/php.snippets.\ninclude snippets/php/b.snippet\ninclude snippets/php/c.snippet\ninclude snippets/php/~.snippet\n. Please write this.\ninclude snippets/php/*.snippet\n\nso is there a way to tell ncc to cache them for popup?\n\nPlease tell me concreate behavior.\nThere is not such a structure for the moment.\n. Probably this works.\ninclude snippets/php/*/.snippet\n. I think you should use compound filetype.\nExample, php.wordpress filetype.\nIn neocomplcache, it loads php and wordpress snippet file.\n. > |       # Where the cursor is\n\n{    }  # Extra spaces are still left here\n\nThis behavior is correct.\n1 level deep tab or spaces is deleted.\n\n#!/usr/bin/env perl\nuse strict;use warnings;|    # '|' is where the cursor is\n\nIn my enviroment, cursor position is below.\n\n#!/usr/bin/env perl\nuse strict;\nuse warnings;\n\n|       # Where the cursor is\n\nWhat is your filetype? And please send your snippet file.\n. Ummm....\nThe behavior is same.\nProbably it is your environmental problem.\n. My environment, this behavior wasn't happend.\nSo, I can't fix it.\n. OK.\nTo detect spaces at tail, you should use this setting.\nset listchars=tab:>-,trail:-,extends:>,precedes:<\n. Thanks! I added it.\n. I do not understand the problems well. \nPlease explain it once again.\nWhy you don't use this snippet?\n\nsnippet     def\nabbr        def\nprev_word   '^'\n    def ${1}\n    ${2}\n    end\n\n. Synchronized placeholder feature is supported.  $1 is synchronized to ${1}.\nWhen you jump next, it is synchlonized. $0 is last jump placeholder.\nMy snippet definition is wrong. I fixed this.\nExample is below:\n\nfor (var ${2:i}=0; $2 < $1.length; $2++) {\n        ${0}\n};\n\n. > when I expand the snippet linkurl, this is the result.\nIn my environment, your result wasn't reproduced.\nMaybe your setting is wrong. \n. Please examine whether you reproduce it in the smallest setting and few plugins. It is still a bug of neocomplcache if it reappears.\n. I found your .vimrc mistake.\n\n    imap ,     (neocomplcache_snippets_expand)\n    smap ,     (neocomplcache_snippets_expand)\n\nUnnecessary spaces are inserted.\nPlease check your :imap.\n. > I deleted them and It worked. You might wanna edit those sample settings from vim.org\n\nSorry, this spaces can't be deleted. This behavior is browser's problem.\n. I confirmed that I interfered it. \n\n\nino buffer <expr> <cr> <SID>Return() \n\nThis seems to be no use.\n. Inside state of neocomplcache is become funny, because HTML_AutoCloseTag moves a cursor, and calls setline().\nProbably the revision is impossible.\n. I fixed html_autoclosetag.vim.\nPlease try it.\n\n\" Cleanly return after autocompleting an html/xml tag.\nfun s:Return()\n    let tag = s:GetCurrentTag()\n    return tag != '' && match(getline('.'), '</'.tag.'>') > -1 ?\n                \\ \"a\\<C-h>\\<cr>\\<cr>\\<up>\" : \"\\<cr>\"\nendf\n\n. Please try this snippet.\nIn nested placeholders, Must escape '} '.\n\nsnippet     test\nabbr        test\nprev_word   '^'\n    ${1:constructor (${2:args\\}) -> ${3:# body...\\}}\n\n. I added English snippet manual.\nPlease read this.\n. The placeholder value can't be contained new line. Above snippet is illegal.\n. Thanks! I merged this.\n. I pulled this.\n. \u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\n. > I want to complete from tags. When I enable NeoComplCache, it completes from buffers only. When I call NeoComplCacheCachingTags, it seems to not complain, but doesn't give me tags.\nPlease set tags option and execute :NeoComplCacheCachingTags command.\nBut I recomend include_complete instead of tags.\n\nWhen I call NeoComplCacheCachingTags, it seems to not complain, but doesn't give me tags.\n\nPlease check g:neocomplcache_temporary_dir . '/tags_cache' directory.\n\nI use clang complete (https://github.com/Rip-Rip/clang_complete) rather than omnicomplete. For that, in C/C++ source, I want NeoComplCache not to try completing after an . or -> Right now, it tries to immediately complete after an . or ->. I suspect that it's one of the enable/disable patterns, but I haven't figured out which yet.\n\nPlease set this settings.\n\n  if !exists('g:neocomplcache_omni_patterns')\n    let g:neocomplcache_omni_patterns = {}\n  endif\ncall neocomplcache#set_dictionary_helper(g:neocomplcache_omni_patterns, 'c,cpp',\n        \"\\'\\h\\w*\\%(\\.\\|->\\)\\h\\w*\\|\\h\\w*::')\n\n. > As far as I can tell, the default settings for those options are okay. What else needs to be set? I presume that include_complete is similar enough such that once I understand how the tags work, I should be able to understand how to use include_complete.\nTo use include complete, you need ctags.\nAnd set some options (&path, &include, &includeexpr).\nThis options may be set ftplugins.\n\nThanks! So if I understand the regex correctly, neocomplcache considers any string of characters without spaces as a possible string, this regex tells the neocomplcache matching engine to stop trying to match once it sees a ., ->, or an ::?\n\nYou should study regular expression of Vim.\n:help 'pattern-searches'\n\nthis regex tells the neocomplcache matching engine to stop trying to match once it sees a ., ->, or an ::?\n\nYes.\n. Please execute :NeoComplCacheCachingInclude.\n. I read your script.\n\nI wonder why this happened, so I can do something to make my script and neocomplcache work together well.\n\nBecause, your keyword definition is too complex.\nExample:\n\nsyn match cssProp /\\(\\<\\|\\)alignment-\\(adjust\\|baseline\\)\\>\\ze\\s*:/ contained\n\nI recommend keyword instead of match.\n\nsyn keyword cssProp appearance binding bottom clear clip color columns content crop cursor direction elevation empty-cells hanging-punctuation height hyphens icon inline-box-align left letter-spacing move-to opacity orphans phonemes position play-during presentation-level punctuation-trim quotes rendering-intent resize richness right size speech-rate stress string-s ...\n\n. neocomplcache use keywords matched g:neocomplcache_keyword_patterns[filetype].\nPlease read neocomplcache's documentation.\n. > Can it support ropevim, or something like it?\nI read ropevim source code.\nBecause ropevim completion uses python interface and complete(), neocomplcache can't call ropevim's function.\n. Please delete complete().\nBut it's difficult.\n. Thanks for your suggestion. I added README file.\n. > What does it do? Does it use ctags to scan all the file included recursively? If it is, I think there can be 2 improvement.\nYes.\n\nIt should scan the files in background in order to not affect user. You may use python's threading library to achive this. (I don't know whether this is feasible).\n\nI don't like python library. I prefer to use vimproc asynchronous library.\n\nIt shouldn't scan the file which time stamp haven't change since last scan.(just like taglist)\n\nThis is already implemented.\n\nAnother question. Do I need use omnicppcomplete anymore? Does it support \". -> :: using namespace\" in c/cpp files?\n\nlet g:neocomplcache_omni_patterns.cpp = '\\h\\w_\\%(.|->)\\h\\w_|\\h\\w*::'\n. > Really? But I still feel large lag if I save the file or use gf. After clear the path, the lag disppears. Or should I use the version on git? (I use version 5.3)\nIn neocomplcache, caching is too slow. I will improve this problem.\n\nWhich omnifunc does neocomplcache use?\n\nAlmost all omnifunc, but I can't test them.\nTo use omnifunc, you should set g:neocomplcache_omni_patterns.\nPlease read ':help g:neocomplcache_omni_patterns'.\n. OK. I close this issue.\n. Maybe set this settings in ftplugin/cobol.vim.\n\nsetlocal keyword+=-\n\nneocomplcache yet does not completely support Cobol language.\n. In the latest version of neocomplcache, supported cobol keyword pattern.\nPlease try it.\n. > Hi, I tried latest version 5.3 and add setlocal iskeyword+=- into syntax/cobol.vim and ftplugin/cobol.vim\nneocomplcache latest version is Ver.6.0.\nAnd please execute :NeoComplCacheCachingSyntax to recache candidates.\n. Sorry, this bug is fixed.\n. Which is your settings?\nThese mappings is overwritten previous settings.\nMaybe you should only set this settings.\n\nimap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\n. Well, I think above setting works properly.\nOh, imap is wrong.\nPlease use inoremap instead.\n\ninoremap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\n. I use this settings.\n\ninoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : <SID>check_back_space() ? \"\\<TAB>\" : \"\\<C-x>\\<C-u>\\<C-p>\\<Down>\"\nfunction! s:check_back_space()\"{{{\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~ '\\s'\nendfunction\"}}}\n\n. > Yes, should use inoremap, maybe you also need change in help file.\nYes, but in help file setting use Plugin keymappings.\nTo use Plugin keymappings, I need imap :-(\n. \u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. Because SuperTab maps <CR>, I think it's couldn't.\nI don't recommend <C-r>=.\nIf use <C-r>= , IME is still ON:-(\n. Maybe it's neocomplcache bug.\nPlease update neocomplcache.\n. > And at last , After I using the dev version here, things works much fine.\nYes, vim.org version is too old.\nI would like to replace it, but development version is still unstable.\n\nBut there are still issues like these :\n\nWhat's your neocomplcache setting?\nBecause I do not understand your situation well, I ask for more detailed explanation.\n\nSo I currently used it together with AutoCpl , and I use key to open this.\n\nneocomplcache conflicts with autocomplpop. \nPlease do not use it together.\n\nBy the way , your script is great , and the \"Unite\" script is great too.\n\nThanks.\n. > 1. When I insert \"ee\" in a html file , which will became \"eech\" . the \"ee\"\n\nhas a only match . and then it became impossible to delete it in insert\n   mode.\n\nWell, it's your settings problem.\nAre you set this settings in .vimrc or your installed plugin?\n\nset completeopt+=longest\n\nTo check this, try this command.\n\n99verbose set completeopt\n\n. > 1. Is there auto mkdir() feature in unite ?\nI can implement this, but I don't.\nBecause auto mkdir() is unnecessary care when you typed miss.\n\n\ngo to upper level folder , e.g. an \"../\" candidate\n\n\nThis feature is implemented. Please use :Unite file.\n\n\ndrag a folder into gvim that auto opens unite?\n\n\nThis feature is impossible :-(\n\n\nCan I remap the default keys in the unite buffer ?\n\n\nYes. Please use ftplugin/unite.vim or autocmd FileType unite.\n\nI can achieve this , only by hacking the mapping.vim\n\nYou mustn't hack mapping.vim.\n\nis there a method to get this in .vimrc?\n\nPlease read unite example settings. \n. > Then I remembered my ofu setting is :\n\nset ofu=syntaxcomplete#Complete set completeopt=menu,preview,longest so I comment these line . then restart. Things seems quite all-right , until Now.\n\nThis settings is wrong.\nBecause in neocomplcache completeopt mustn't contains menu, longest.\nPlease use completeopt=menuone instead.\ncompletefunc's longest value is for manual complete setting.\n. > PS: I Don't know if you check issues in the \"Unite.vim\" thread\nI check all issues in unite.vim.\nPlease create issue in unite.vim.\nhttps://github.com/Shougo/unite.vim/issues\n. > The reason is the setting conflict??\nneocomplcache open completion menu automatically.\nIf completefunc contains longest, longest matched word is inserted automatically :-(\n. > Hey ,I don't want cConstant here, and there is no \"bufsizfg\" in this post. \nBecause your settings.\n\n\"let g:neocomplcache_text_mode_filetypes = {\"vimwiki\":1,\"vim\":1}\"\n\nIn your settings vimwiki filetype files refer to vim filetype files(example: neocomplcache.vim).\n. > But when I edit the .vimrc or other vim type files , the \"cpp\"'s syntax doesn't come out.\nIn my environment, cpp syntax doesn't come out in vim filetype.\n. > But when I use it , there is no displaying of ../ . Though I can type a ../ and get here.\nI implemented this feature now. Please update unite.vim\n. Thanks! I merged this.\n. This problem is not neocomplcache's problem.\nBecause neocomplcache search routine is optimized enough.\nBut this problem is happend in my environment, too.\nIn Vim help filetype(Japanese) :-(\nI think this problem is caused by Vim...\n. Fixed it.\n. What your neocomplcache settings?\nI tried this, but your behavior was'nt happened in my environment.\nI can't fix.\n. Because you don't create .vimrc.\nTo use neocomplcache, must set \"set cpoptions&vim\".\n. I fixed this problem.\n. > It can reproduce by\nNo. You must create .vimrc and write above settings.\n. I tried your settings in Ubuntu Linux 32bit.\nBut this behavior isn't happened here.\nPlease try 32bit Vim. Or other environment.\n. I tested in Windows 32 bit environment.\nBut this problem is not happend.\n. Probably it's best choice.\n. You should disable filename_complete.\n\n:help g:neocomplcache_plugin_disable\n\nUnfortunately, filename_complete doesn't set timeout.\nSo filename_complete may freeze in many files directory.\n. > Maybe you should limit the file number is filename_complete?(if the numbers of file exceed a limit, automatically return.)\nYes, but vim script glob() hasn't timeout or limit file number.\nI want to implement glob() with timeout or limit file number.\n. > Why we don't use cache on file name? I think use glob in a CursorMoveI isn't a good idea.\nBecause, filename_complete is too slow in many files directory.\nI implemented limit file number in filename_complete, but I can't implement timeout now.\n. > filename_complete spends most time on glob(), so we should cache the glob result when neocomplcache enable rather than use glob every time when you move the cursor.\nI examine it.\n\nAlso, we should limit the number of the result.\n\nI implemented it.\n. It will be effective if I make a cache.\nBut must add a command to perform re-cash(ex: :NeoComplCacheCachingFileName); and basic; is not settled.\n. > What does \"and basic; is not settled.\" mean?\nI want to implement readdir() with timeout.\n\nOr you can re-cache when CursorHold{,I}.\n\nNo, I don't want to implement caching routine....\n. Where is your current directory?\nIs there many files in your current directory?\nYou should change current directory.\n. > filename_complete spends most time on glob(), so we should cache the glob result when neocomplcache enable rather than use glob every time when you move the cursor.\nI can't implement this feature. Because filename_complete collect partial files in current directory.\n. > Need? Should? And why partial?\nIt's efficency.\nIf get whole files, filename_complete is too slow.\n. I implemented current files caching in filename_complete(testing).\n. I merged this changes.\n. I added .gitignore file in neocomplcache.\n. > If I have installed Neocomplcache,\n\nthus I could use the \"snippets/\" without installing SnipMate ?\nWhich means I could delete SnipMate's other Files??\n\nYes, neocomplcache only use snipMate snippets.\n\nAnd , is there any future plan for implementing \"multi snip\" \nand \"//.snippet\" feature?\n\nneocomplcache supports snipMate multi snippet.\nBut don't support \"<filetype>/<trigger>/<name>.snippet\" feature.\nThis snippet syntax is too old.\n. Oh, I fixed this.\n. What's your neocomplcache snippet keymapping?\nMulti snippet example:\n\nsnippet hoge piyo\n    hogera\n\n. neocomplcache's multi snippet is syntax sugar.\n${trigger} ${description} -> ${trigger}_${description}\nSo, the behavior is different.\n. I improved descriptions.\n. I pulled this.\n. > let g:snippets_dir = \"~/.vim/mysnipets/,~/.vim/bundle/snipmate/snippets/\"\nYour order is wrong. Please modify like this.\nlet g:snippets_dir = \"~/.vim/bundle/snipmate/snippets/,~/.vim/mysnipets/\"\n. In my environment, g:snippets_dir is working.\nDo you check g:snippets_dir's value when Vim is started?\nAnd please print debug check snippets_complete's source code.\n. > line 50 should be if !exists('g:snips_author') instead of if !exists('snips_author') otherwise snippets author set in vimrc get overwritten to \"Me\".\nI fixed it.\n. > did an echo of g:snippets_dir at line 56 of snippets_complete.vim\n\nit s the correct value ~/.vim/bundle/snipmate/snippets/,~/.vim/mysnipets/\nbut if i the start and type mlib (one of my custom snippets) nothing pop us up\n\nIn line 67, what's s:snippets_dir value?\nAnd line 317, what's l:snippets_files value?\nAnd what's this expression's result?\n. Your snippet's name is wrong.\nPlease update neocomplcache and modify filename.\nEx: python_custom.snippets.\n. I will implement this feature in the future(neocomplcache Ver.6.1 or later).\n. If you want to the feature, please create issue in neosnippet.\n. I implemented this feature.\n. > Could you plz implement quick_match_auto_select_and_set ?\nThis feature is already implemented.\n. I get it.\nI implemented this.\n. Ummmm....\nIt's too complicated feature.\nI may not implement it.\n. I implemented this feature.\nPlease set this.\n\nlet g:neocomplcache_quick_match_patterns={'default':''}\n\n. Sorry, this is Vim's problem.\nVim is narrowing candidates automatically.\nI can't fix :-(\n. Yes. I changed the behavior.\n. Please explain your situation.\nI understand this report.\n. I can't reproduce your situation...\n. I understand.\nThis is vim's specification.\nWhen neocomplcache popuped window automatically, cindent keys doesn't work.\n. But when closed popup window, cindent keys works.\n. It's impossible.\nBecause when popup window, Vim can't decide indent keyword.\nYour keyword isn't inserted.\n. sparkup is this?\nhttps://github.com/rstacruz/sparkup\nI do not understand because you didn't explain detailed information.\n. I think it is sparkup's problem.\nhttps://github.com/rstacruz/sparkup/blob/master/vim/ftplugin/html/sparkup.vim\nIn line 30,\n\nexec 'imap <buffer> ' . g:sparkupExecuteMapping . ' <c-g>u<Esc>:call <SID>Sparkup()<cr>'\n\nI don't support sparkup plugin, you should use neocomplcache snippet plugin and zencoding.vim plugin.\n. Yes. I implemented this feature.\nBut you should check neocomplcache#is_enabled().\n. > but it tell me it is disable and this command is ignored.\nYes. You must execute ':NeocomplCacheEnable' command before ':NeoComplcacheToggle'.\nBut I get your desired feature. I implemented it.\n. > I think the first time user call Toggle command should behave just like NeoComplcacheEnable.\nYes, I implmented it today.\n. :NeoComplCacheLockToggle is implemented(named :NeoComplCacheToggle).\nBut, (your desired behavior) :NeoComplCacheToggle is not implemented.\nBecause, disable neocomplcache is not recommended(many side effects).\nYou can make it manually. I don't implement it.\n. What's your RSense settings?\nYou should set this setting in your .vimrc.\nlet g:rsenseUseOmniFunc = 1\n. > autocmd FileType ruby setlocal omnifunc=RSenseCompleteFunction\nThis setting is useless.\nRSense is automatically set omnifunc.\n. \u7406\u7531\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u3060\u3081\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u4fee\u6b63\u306f\u62d2\u5426\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u3067\u4fee\u6b63\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n. Hi, devth.\nYour configure is wrong.\nPlease fix it.\n\nimap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\n. It is specification that snippets_complete don't expand \".\".\nTo expand this snippet please use \"<Plug>(neocomplcache_snippets_force_expand)\".\n<Plug>(neocomplcache_snippets_expand) is only expand keyword pattern matched snippet trigger.\n. > Problem is even stranger: the 'z' doesn't initially work,but after expanding another snippet like pos:a it starts to work again. Same problems for m<tab> etc.\nIn my environment, snippet 'z' worked.\nWhat's your neocomplcache settings?\n. I fixed this behavior.\n. Please teach a reproduction method. I will try it.\n. > - even with neocomplcache_snippet_force_expand the dot is not expanded (in css files)\nIn my environment, dot is expanded.\n. But, neocomplcache_snippets_force_expand don't jump to next placeholder.\nIt's feature.\nYou should set keymappings both neocomplcache_expand and neocomplcache_force_expand.\n. > why snippet trigger #! can not be expanded ? use force_expand too ?\nYes. in expand,  snippet trigger must match keyword pattern.\nBut force_expand can expand it.\nBecause, ex: \n hoge(for<expand>\nYour cursor is in <expand>, neocomplcache should expand hoge(for snippet? Or for snippet?\nIn normal expand, expand for snippet. In force_expand, expand hoge(for snippet.\n. OK. I fixed.\n. > exe 'setl sw='.&ts\nI recommend this.\n\nlet &l:shiftwidth = &l:tabstop\n\n. \u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\n. Yes. It's snippets_complete snippet(javascript.snip).\nYou should define user snippets.\n. Sorry, I reject this patch.\nBecause this variable name 'g:neocomplcacheenable_underbar_completion2 ' is not good.\nAnd this behavior has side effect.\nThe keyword which has head '_' (for example '_hoge', '_piyo', ....) isn't completed.\n. I improved this patch. And implemented this.\n. I fixed this.\n. Maybe you forgot(<expr>) in your <CR> mapping.\nReally using above mappings exactly?\n. > I wonder if is vim 7.2?\nMaybe it's Vim's bug.\nHow if you update to Vim 7.3?\n. OK.\n. I think you missed mapping settings...\nMaybe <expr> is missed.\n. OH...\nI read supertab plugin source and above issue.\nThis is supertab issue but not neocomplcache issue.\n. Supertab maps <CR> automatically.\nI think supertab implementaion has problem.\nYou should change g:SuperTabCrMapping to 0.\n. Yes. It's other plugin's problem.\n. Yes. But I can't fix it.\nI think this issue must be fixed by other plugin(vim-endwise).\n. OK.\nI updated examples code.\n. Do you like this?\nBut I don't like remap mapping.\n\" <CR>: close popup and save indent.\nimap <expr><silent> <CR> <SID>my_cr_function()\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() . \"\\<CR>\" : \"\\<CR>\"\nendfunction\n. > @Shougo yes, the problem I've described is when I use this exact snippet.\nWhat's your problem? Please describe it to me.\n. > when pressing in insert mode on autocomplete menu item it would only select the item from the autocompletion menu and would not insert a in the code.\nimap <expr><silent> <CR> <SID>my_cr_function()\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\nendfunction\nWhy you don't use this mapping?\n. I don't know what you want to ....\nI'm confusing.\nI recommend you to create new issue instead of closed issue.\n. OK. This is SuperTab's issue.\n. > What I am trying to say is that I had zero problems with SuperTab and vim-endwise working together.\nI think there is special supports in SuperTab.\n\nSomething similar is needed for neocomplcache.\n\nI don't know the support.\nIt is because, SuperTab does not support <expr> mapping. Not neocomplcache problem.\n. I think SuperTab must check maparg() \"expr\" key in result dictionary.\n. I updated sample <CR> mapping. Please check it.\n\" <CR>: close popup and save indent.\ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\nfunction! s:my_cr_function()\n  return neocomplcache#smart_close_popup() . \"\\<CR>\"\nendfunction\n. Why you don't change the mapping?\n\" <CR>: close popup and save indent.\ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\nendfunction\n. \" <CR>: close popup and save indent.\ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#cancel_popup() : \"\\<CR>\"\nendfunction\n. if item_is_selected_from_popup_menu()\nYou cannot check it. This is Vim's feature. You must compromise.\n. I think you may not map to <CR>. Default <CR> mapping behaves similar way.\n. > Yeah, I know... but still have one of the aforementioned issues - if nothing is selected in the popup pressing enter does not produce a newline entry.\nHmmm... But this is not neocomplcache problem...\n. I implemented this feature.\n. OK.\nI added g:neocomplcache_snippets_complete_disable_runtime_snippets option.\n. OK I added this option.\n. I fixed this. Please try it.\n. I recommend use clang_complete.\nhttps://github.com/Shougo/clang_complete\nWhat's your omni cpp complete function?\nAnd that omni function working(when you typed C-x C-o)?\n. > And i tried typing C-x C-o after a \"someinstance.\",nothing but \"--(insert)--\" in bottom. If I type \"::\" after \"someclass\", I can\n\nsee a few function of that class is displayed with [I], which means it's from include_cache?\n\nYes. I think ccomplete is not working.\nccomplete required tags file created manually.\n. I tested this source file.\nhttps://gist.github.com/1145956\nIn my environment, works.\n. I don't know it...\n. Please change g:neocomplcache_plugin_rank(:help g:neocomplcache_plugin_rank). \nIt is a dictionary to control each plugin's completion priority.\nThe key is plguin_name(Ex: buffer_complete).\n. > Ok, I did that but it didn't seem to help that much. The third buffer completion was expanded as if it was a snippet. I removed the SuperTab behavior and mapped snippet expansion to a separate key to avoid this.\nThis is neocomplcache's feature. I can't change.\n\nAfter the snippet is expanded however, I can't navigate the snippet variables in any way.\n\nPlease explain me.\n. Your snippet is wrong.\n(${3}}) <- \n} is too many.\n. Hmmmmm....\nYou installed vim(not gvim)?\ninclude_complete uses vim. And search vim(.exe) from $PATH environment.\n. > Actually I'm using MacVim\nPlease check :executable('vim') in your MacVim.\n. > BTW, if you know a good way to automatically turn off neo completion only for text files, please share.\nPlease use :NeoComplCacheToggle.\nThis command is disabled neocomplcache in command executed buffer.\n. Why?\nIn my environment, g:neocomplcache_lock_buffer_name_pattern variable is works.\nI don't understand your problem.\n. > The problem was described in the initial issue report: if I use let g:neocomplcache_disable_auto_complete = 1, I still get the completion menu on occasion. \nThis problem is unbelievable. g:neocomplcache_lock_buffer_name_pattern  and g:neocomplcache_disable_auto_complete are almost same behavior. I think your settings problem.\n. \u30a8\u30b9\u30d1\u30fc\u3092\u3059\u308b\u3068\u3001\u304a\u305d\u3089\u304fctags\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u74b0\u5883\u3067\u3059\u306d\u3002\nVer.6.2\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u307e\u3041\u3001Windows\u74b0\u5883\u3060\u3068ctags\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u4eba\u304c\u591a\u3044\u3067\u3059\u304b\u3089\u306d\u3002\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u3082\u826f\u304b\u3063\u305f\u3068\u306f\u601d\u3044\u307e\u3059\u3002\n. > I found it stop to work.\n\n(If I let g:neocomplcache_enable_auto_select = 1)\n\nYes, this is Vim's feature(Bug?). Because, when iminsert is !0, neocomplcache always iminsert is off :-(\n\nMy 'iminsert' is always 2.\nI think once user has Input Method support, this option is generally 2.\n\nNo, you shoud execute ':help 'iminsert''.\nWhen you disabled Im, this option set to 0.\n. I fixed this problem.\n. \u3053\u308c\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u4ed5\u69d8\u3067\u3059\u3002\u305d\u3046\u3044\u3046\u3068\u304d\u306b\u306f\u3001<C-e>\u3067\u4e00\u5ea6\u88dc\u5b8c\u306e\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3092\u9589\u3058\u3066\u304f\u3060\u3055\u3044\u3002\n\u3068\u3044\u3046\u304b\u3001neocomplcache\u3092\u4f7f\u7528\u3057\u3066\u3044\u3066\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u3092\u4f7f\u3044\u305f\u3044\u3068\u3044\u3046\u72b6\u6cc1\u304c\u79c1\u306b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n. > \u672c\u6765\u3067\u3042\u308c\u3070\u30012\u6587\u5b57\u307b\u3069\u5165\u529b\u3057\u305f\u6642\u306b\u81ea\u52d5\u3067\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5019\u88dc\u304b\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\n\n\u3055\u308c\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u304c\u51fa\u306a\u3044\u72b6\u614b\u3067\u3059\u3002\n\n\u305d\u308c\u304c\u4ed5\u69d8\u3067\u3059\u3002\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u3068\u3044\u3046\u3068\u3001neocomplcache Ver.6.1\u307e\u3067\u306f\u88dc\u5b8c\u5019\u88dc\u3092\u8a08\u7b97\u3057\u3066\u304b\u3089\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3092\u51fa\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u304c\u3001neocomplcache Ver.6.2\u304b\u3089\u306f\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3092\u51fa\u3057\u3066\u304b\u3089\u88dc\u5b8c\u5019\u88dc\u3092\u8a08\u7b97\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3064\u307e\u308a\u3001\u88dc\u5b8c\u5019\u88dc\u304c\u306a\u304b\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u30a6\u30a4\u30f3\u30c9\u30a6\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\u3053\u3046\u3057\u306a\u3044\u3068\u3001Vim 7.3.289\u4ee5\u964d\u3067\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3067\u3059\u304c\u3001\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u308c\u306a\u3044\u306e\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u306e\u307f\u3067\u3001\u4f8b\u3048\u3070HTML\u7de8\u96c6\u6642\u306b\n<\u3068\u5165\u529b\u3059\u308c\u3070\u3001\u30bf\u30b0\u306e\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u3001vimshell\u8d77\u52d5\u6642\u306b\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u88dc\u5b8c\u3082\u81ea\u52d5\u3067\n\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\u306a\u306e\u3067\u3001omni\u88dc\u5b8c\u3084\u30d5\u30a1\u30a4\u30eb\u540d\u88dc\u5b8c\u306f\u5927\u4e08\u592b\u306a\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u304a\u305d\u3089\u304f\u3001\u4f55\u304b\u52d8\u9055\u3044\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u554f\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u3067\u306f\u306a\u304f\u3001\u30d0\u30c3\u30d5\u30a1\u88dc\u5b8c\u3067\u3059\u306d\u3002\n\u30d0\u30c3\u30d5\u30a1\u88dc\u5b8c\u306b\u95a2\u3057\u3066\u3001\u3053\u308c\u306f\u5185\u90e8\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u3057\u3066\u3044\u3066\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5165\u3089\u306a\u3044\u9650\u308a\u88dc\u5b8c\u5019\u88dc\u306b\u5165\u3089\u306a\u3044\u306e\u3067\u3059\u3002\n\u5019\u88dc\u304c\u51fa\u3066\u3053\u306a\u304b\u3063\u305f\u306e\u306f\u3053\u308c\u304c\u539f\u56e0\u3067\u3059\u3002\u6c17\u306b\u306a\u308b\u306a\u3089\u3001:NeoComplCacheCachingBuffer\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. > \u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f:NeoComplCacheCachingBuffer\u3092\u5b9f\u884c\u3057\u307e\u3057\u305f\u304c\u3001\u3084\u306f\u308a\u5019\u88dc\u306b\u306f\n\n\u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044\u3067\u3059\u30fb\u30fb\u30fb\n\n\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u6700\u65b0\u7248\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u524d\u3088\u308a\u5019\u88dc\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3082\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n. I fixed this problem.\n. This problem is happned your neocomplcache, please set g:neocomplcache_enable_prefetch to 1.\n. I use this mappings.\n\n  inoremap <expr><CR>  neocomplcache#smart_close_popup() . \"\\<CR>\"\n\nIt works fine.\n\nI'd hoped that would close the popup and go to the next line. Unfortunately, nothing happens - no errors, no anything. So I have to press enter three times to go to the next line if I autocomplete at the end of a line.\n\nWhy not work? Hmmm....\nIn my environment, your setting also works.\n. I think your <CR> mappings is mapped to other mapping.\nPlease check it executeing ':inoremap <CR>'\n. Because, this behavior is PHP omnicomplete or Vim's bug.\nNot neocomplcache bug.\nI recommend you post bug report in vim_dev.\n. > Is there a way to configure neocomplcache so that the longest common match are at the top of the list?\nThat is g:neocomplcache_compare_function option.\nPlease ':help g:neocomplcache_compare_function'.\n. > Are there other compare functions available?\nNo. You must create sort function.\n\nAnd how does compare_rank sort?\n\ncompare_rank compares words rank. This function behavior is too complecated...\n\nIf not, what is the method signature for a compare function (I found neocomplcache#compare_rank in the source, but it's variables are nondescript i1 and i2).\n\nThe method signature is same to sort() function.\n. > Is it possible to sort different types with the priority ?\nIt's g:neocomplcache_source_rank. Please read documentation.\n. I improved it. Please read documentation again.\n. > at cursor position |, it will popup a menu, but those method, variable, which start with sys.version etc is upper than sys.argv. I think sys.argv should upper than sys.version.\nSorry, to fix the order it you must set g:neocomplcache_compare_function.\n. > Change g:neocomplcache_source_rank's 'omni_complete' sort way.\nNo. This feature is not supported.\n. > still that rank.\nYes. I will implement this feature. But changes is big. I don't implement now.\n\nat cursor position |, it will popup a menu, but those method, variable, which start with sys.version etc is upper than >sys.argv. I think sys.argv should upper than sys.version.\n\nThis is neocomplcache compare_function problem. But I think you cannot fix it.\n. I fixed this problem. Please try it.\n. I hate preview window. So neocomplcache don't support preview window....\nOK, I fixed it.\n. > Wow, that was fast! I can definitely see reasons for hating the preview window (I think I might keep using my second idea of adding 'info' to 'menu' so I get the preview without the ugly preview window). \nBecause, opening preview window is too slow and windows size will change.\n. It's impossible.\nBecause, you set g:neocomplcache_enable_auto_select.\nI recomend to you set g:neocmplcache_enable_auto_select is 0.\n. > exists a boolean variable for when the plugin are enable?\nIt is neocomplcache#is_enabled() function.\n. I fixed it.\nI recommend :NeoComplCacheLock or :NeoComplCacheToggle instead of :NeoComplCacheDisable.\n. Oh...\nPlease use neocomplcache#is_locked() instead of neocomplcache#is_enabled().\n. Thanks. I fixed.\n. What's doc?\nI don't know your feature request.\n. > The screenshot shows how vim built-in python completion showing a preview window with python doc for the function.\nIs it default omni completion(pythonComplete)?\n\nIn NeoComplete, the doc shows in popup menu, which is kind of useless due to the space limitation.\n\nI recommend you to use echodoc.\nhttps://github.com/Shougo/echodoc/\n. neocomplcache doesn't support preview window(expect omni_complete).\nBut, echodoc is supported.\nSetting is only this:\nlet g:echodoc_enable_at_startup = 1\n\nAs for echodoc, I didn't see any documents in the repo. Would you mind\nbriefly talking about how it works ?\n\nhttps://github.com/Shougo/echodoc/blob/master/doc/echodoc.txt\n. > But nothing happens when I move the cursor on the function.\nechodoc works only include_complete and vim_complete and snippets_complete.\n\nSo it does support preview window when using omni_complete ?\n\nYes.\nBut &omnifunc must support preview window.\n\nWhat I want is an option that instead of showing doc info in the popup menu,\nshow the info in a preview window.\n\nNo. Preview window is different from echodoc .\n\nAlso, is there a way to manually invoke default vim omnicomplete while\nneocomplcache is enabled? \n\n<C-x><C-u>\n\nIf it's possible, I could fall back to default\npython onmicomplete when I want to see the doc.\n\nIf uou  want to use preview window in omni_complete, please neocomplcache update.\nLatest neocomplcache is supported.\n. Sorry, I fixed it.\n. Yes, this is Vim's feature.\nBecause, Vim's filtering doesn't support auto select.\n. OK, I fixed it.\n. Yes, expand snippet keymappings is <Plug>(snippets_expand).\nThis keymappings isn't mapped default.\nPlease read neocomplcache documentaion.\n. I recommend map \"<Plug>(snippets_force_expand)\" mapping to expand complicated trigger(like your case).\n. OK.\nYour request is implemented.\nBut, still not pushed. I check this behavior now.\n. > P.S. how do i make neocomplcache to use other open buffers as sources? can't find in docs :(\nIt's same file type. ':help g:neocomplcache_same_filetype_lists'\nneocomplcache display candidates from same filetype buffers or g:neocomplcache_same_filetype[&filetype] buffers.\n. > the problem is when i choose completion suggestion i still have menu open with 1 suggestion.\nI fixed your problem.\n. In my envirionment, above snippets are expaned.\nDid you updated neocomplcache?\n. :-)\n. Thanks your bug report. I fixed it.\n. Hmmmm... In my environment, this problem is not appeared.\nAnd other user didn't report bug.\nSo, I think your Vim is have bugs or your neocomplcache install is missed.\n. OH, I think Vim's bug.\nBecause, Ubuntu 11.04 Vim have bugs.\nhttps://github.com/vim-jp/issues/issues/85\nAbove link discussed issue(In Japanese).\nSo, I can't fix.\nPlease update Vim.\n. I think If you update Vim(in manually), this behavior will dissapear.\nBecause my GVim(7.3.338 Ubuntu 11.04 11.10), your problem is not found.\n. \u6307\u6458\u3092\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. It's interesting!\nBut, I'm not implement now(Because I'm so busy...).\nI'll put your feature in my todo list.\n. Neocomplcache is out of development.\nIf you want to the feature, please create new issue in neosnippet.\n. I understood your demand. But, I cannot implement it.\nBecause, your behavior is too slow.\nneocomplcache can't optimized them.\n. OK.\nI added g:neocomplcache_eanble_fuzzy_completion option.\n. > Is it because this plugin use cursormoveI to trigger the popup menu?\nYes.\nIf you use cursor move mappings in Insert mode, please set following mappings.\ninoremap <expr><Left>  neocomplcache#close_popup() . \"\\<Left>\"\n    inoremap <expr><Right> neocomplcache#close_popup() . \"\\<Right>\"\n    inoremap <expr><Up>    neocomplcache#close_popup() . \"\\<Up>\"\n    inoremap <expr><Down>  neocomplcache#close_popup() . \"\\<Down>\"\n\nif it's valid character or symbol before it pops up?\n\nWhat's the valid character? I don't know.\n. neocomplcache checks g:neocomplcache_keyword_patterns['python'] before popup.\nIf you don't like keyword pattern, you can customize it.\n. Oh.....\nYour demand is correct.\nI'll fix later.\n. I fixed it.\n. I fixed for your problem.\n. > when I have enable neocomplcache and write a function, this open the scratch when the description of function, ok.\n\nbut, when I selected a function in pmenu, the scratch don't close, why ?\n\nThis is Vim's feature. So, I can't close it automatically.\n\nor, how I can disable the scratch ?\n\nPlease execute this command in your .vimrc.\n:set completeopt-=preview\n. >   ino   pumvisible() ? \":pclose\" : \"\"\nYour mapping is wrong.\n\"\\\" is needed.\nino <expr> <CR> pumvisible() ? \"\\<CR>\\<c-o>:pclose\\<CR>\" : \"\\<CR>\"\n. In my environment, this mapping is working. But when I close popupmenu, don't close preview window.\nI recommend to change this.\ninoremap <silent> <CR> <CR><c-o>:pclose<CR>\n. In your filetype? \nI think this behavior is text filetype mode feature.\n:help g:neocomplcache_text_mode_filetypes\nTo disable this, set above variable[filetype] = 0.\n. > Wasn't sure how to do it for just one filetype, but the below works in .vimrc.\nThis is...\nif !exists('g:neocomplcache_text_mode_filetypes')\n    let g:neocomplcache_text_mode_filetypes = {}\nendif\nlet g:neocomplcache_text_mode_filetypes.nothing = 0\n. Sorry, I fixed text mode filetype default value.\nnothing filetype is not text mode.\n. \u30de\u30fc\u30b8\u3057\u307e\u3057\u305f\u3002\n. \u6b8b\u5ff5\u306a\u304c\u3089\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u3002\n\u3053\u308c\u306f\u8907\u6570\u884c\u306e\u88dc\u5b8c\u5019\u88dc\u3092\u89e3\u91c8\u3067\u304d\u306a\u3044Vim\u306e\u4ed5\u69d8\u3068\u306a\u308a\u307e\u3059\u3002\n\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u305f\u3051\u308c\u3070\u3001unite.vim\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\"Unite snippet\"\u3092\u7528\u3044\u308b\u3068\u3044\u3046\u624b\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u306f\u9078\u629e\u3057\u305f\u77ac\u9593\u306b\u5c55\u958b\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001insert mode\u304b\u3089\u4f7f\u3046\u306e\u306f\u5927\u5909\u3067\u3059\u3002\n. \u5225\u89e3\uff1a\n       <C-y><Plug>(neocomplcache_snippets_force_expand)\n\u3092\u4f55\u304b\u306e\u30ad\u30fc\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304a\u304f\u3002\n. I fixed.\n. In my environment, your behavior is not appear.\nAnd I researched file_mru source source code.\nBut I don't know your problem reason.\nI can't fix your issue...\n. > I think we could do something about the hiding of <${/} by using conceallevel.\nOK, I implemented it. But, you must set conceallevel and concealcursor manually.\n\nAlso, it would be great if it autoupdated as you typed. Other than this, neocomplcache seems to be the most stable and correctly functioning snippet system for Vim.\n\nYour demand is too difficult....\nI have a lot of Vim plugin works(neocomplcache, vimshell, vimfiler, unite.vim and so on).\n. I tested your snippet but this is feature.\nBecause, javascript has own syntax highlight and overwrite snippets highlight....\n\nI saw the example in the txt file but it didn't really seem to work smoothly. Nothing was hidden until I began typing, then when typing the dollar signs were still visible. When I started typing, the autocomplete menu popped up way to the right of where it was supposed to be and I couldn't see what I was typing.\n\nI tested conceallevel=3 and concealcursor=nvi, but I don't like this behavior.\n. OK. I fixed it.\n. I think this behavior is \"let g:neocomplcache_enable_fuzzy_completion = 1\".\n. OK. I fixed it.\n. > But - will still break the completion context, i.e., previous popup menu disappears and restarts to search for possible matches based on what is typed after -.  Anyway, thanks! This is not important.\nThis behavior is depends on the keyword pattern. The keyword pattern must contains \"-\" pattern.\n\nBy the way, is is possible to active the completion popupmenu in the command mode? for example, to complete the cabbrev ...\n\nIt's impossible. This Vim's feature...\nBut, you can use Command-line window instead of command-line mode.\n:help command-line-window\n. > One small problem so far is that I have some snippets contains autoload functions. I will have to manually source the related file to get the snippet working...\nPlease explain more detail.\nneocomplcache' snippet doesn't support snipMate autoload functions.\n. OK. I fixed.\n. No. This is feature.\nI don't understand why you not expand \"~\" in filename completion.\n. Yes, but this feature is already implemented.\nI tested \"~\", not expand. \n~/foo, ~/bar ,... candidates are appeared.\n. OK. I fixed it.\n. > I think maybe it is better to add a option for this.\nI don't think so. I hate add option.\n. > Nested Snippets?\nI think current snippets syntax(and parse routine) is too complicated. So I don't implement it.\n. > For a particular filetype -- in this case ft=mail I want to use a custom completion function (based on lbdbq) .\nI recommend you to set omnifunc.\nautocmd VimEnter FileType mail setlocal omnifunc=LBDBCompleteFn\nAnd, set g:neocomplcache_omni_patterns['mail'].\n. > I also tried binding it with g:neocomplcache_omni_functions but that doesn't seem to be working.\nWhat's your setting?\n. > autocmd FileType mail source ~/.vim/mail.vim | autocmd VimEnter * setlocal omnifunc=LBDBCompleteFn\nI think your settings is wrong.\nYou should use filetype autocmd.\nautocmd FileType mail setlocal omnifunc=LBDBCompleteFn\nI tested bellow function and your setting, and it worked well.\n\nfun! LBDBCompleteFn(findstart, base)\n  if a:findstart\n    \" locate the start of the word\n    let line = getline('.')\n    let start = col('.') - 1\n    while start > 0 && line[start - 1] =~ '[^:,]'\n      let start -= 1\n    endwhile\n    while start < col('.') && line[start] =~ '[:, ]'\n      let start += 1\n    endwhile\n    return start\n  else\n    let res = []\n    let query = substitute(a:base, '\"', '', 'g')\n    let query = substitute(query, '\\s*<.*>\\s*', '', 'g')\n    for m in ['hoge', 'piyo']\n      call add(res, printf('\"%s\" <%s>', escape(m[0], '\"'), m[1]))\n    endfor\n    return res\n  endif\nendfun\n\nI think neocomplcache works very well.\n. Below is screenshot.\nhttp://gyazo.com/65ef607e8163857a053acac2bcef81e0\n. > let g:neocomplcache_omni_patterns.go = '\\h\\w*\\%.'\nYes, you must set g:neocomplcache_omni_patterns manually.\n. This is g:neocomplcache_keyword_patterns.{filetype}.\nPlease read :help g:neocomplcache_keyword_patterns.\n. I checked your source code and complete keyword.\nBut longlongword is completed.\nYou should check g:neocomplcache_keyword_patterns settings.\n. > Why () is in it?\nBecause your pattern is wrong.\n\n\\h\\w*\\%(()\\?\n\nAbove pattern countains (). So neocomplache completes ().\n. > I just use a too old version?\nYes. In latest neocomplcache, this pattern is fixed.\n. OK. I understand your request. snippets-complete plugin is too big.\nBut, I cannot it now.\nYour request is big change. People may confuse it.\nI must release neocomplcache Ver.6.2 before split neocomplcache.\nI will split it in next version(Ver.7.0).\n\nThe feature of snippets is not very powerful so I prefer to use other snippets plugin such as xptemplate.\n\nI don't think so. neocomplcache snippets plugin is very powerful but too big.\n. > 1. auto-update as you type (issues 127)\nI want to implement it but, I needs time...\n\n\nnest another snippets in a snippets\n\n\nWhat's it? This is same issue to https://github.com/Shougo/neocomplcache/issues/132 ?\n\n\nnest another some vim function in a snippets(so it can generate different snippet according to the environment\n\n\nWhat's it feature?\n\n\nnest another snippets file in one. (for example, c and java can both include c-like.snip)\n\n\nThis feature is already implemented.\n\n\nit needs to insert marks such as $, which is a little ugly for me.\n\n\nYou don't like markers, you can set \"conceallevel=3 and concealcursor=nvi\" in .vimrc.\n\nI think xptemplate is a quite good snippet plugin(although very heavy and a little slow), maybe you can try it as a target?\n\nYes, but I don't have time and motivation now.\n. > Can I use strftime(\"%d %b %Y\") in a script?\nYes. You can use Vim expression in snippets file.\n. > Finally, xptemplate do not even need to insert a mark into the buffer when show the snippets.\nI use marker, because expand snippet is too complicated and may miss expanded snippet.\nEx: snippet expand in snippet.\nfor<expand>\n if<expand>\n\nI think all these features are useful and lacks in neo snippets.\n\nSome features are already implemented, but some features are not.\n. snippets_complete was splitted in neocomplcache ver.7.\n. > I've done some formatting to make the documentation easier to read.\n\nI've also slightly reworded some of the README to sound more natural.\n\nThanks. I pulled it.\n\nBecause I implemented it by paying own expenses unlike the keyword\ncompletion including the Vim composing type, neocomplcache can be customized\nflexibly\n\nOh,... This is bad statements. I will fix it.\n. I fixed it.\n. I don't implement your feature.\nBecause neocomplcache rank feature is imcomplete.\nIf Vim supports selected candidate hook(patch is available but in todo list), I will implement your feature.\n. > I just notice that buffer_complete is not working unless I manually call :NeoComplCacheCachingBuffer.\nIn my environment, buffer_complete is working.\nI think you disabled buffer_complete source or wrong settings.\nTo check it, g:neocomplcache_plugin_disable.\n. > Do I miss some autocmd I guess?\nI think you deleted neocomplcache autocmd.\nAnd caching is asynchronously, may wait until end caching.\n. Hmm,, caching is working.\n\nBut I have to manually execute :NeoComplCacheCachingBuffer for current buffer to make it work. \n\nPlease tell me a specific example.\n. > but s:caching_buffer is not listed in the augroup in buffer_complete.vim. And it is not called anywhere else in buffer_complete.vim.\nYes, because this function caching all buffer keywords but too slow.\nAuto caching functions are s:check_source() and neocomplcache#sources#buffer_complete#caching_current_line().\nYou can check it.\n. In my environment, auto caching is working.\nhttp://gyazo.com/c64e7d803e335ccb2e643d194dd709d1\nI don't use :NeoComplCacheCachingBuffer. Why?\n. > I have to insert a few times to trigger the caching. My bad, I was not patient.\nBecause auto caching take many times, can you wait? I can't.\nSo, caching routine is asynchronously.\nIf you can't wait, you can set autocmd.\n. Yes. neocomplcache don't set updatetime automatically.\nYou must set updatetime manually. So, this is feature.\n. > Do I need to add the autocmd InsertEnter * call s:on_insert_enter() to my .vimrc and upate datetime myself to make this work again?\nYes.\n. I recommend for you restore updatetime when InsertLeave.\n. I think that is OK.\n. Thanks. :-)\n. \u3068\u308a\u3042\u3048\u305a\u3001\u307e\u305a\u306f\u300c\u8aac\u660e\u306f\u65e5\u672c\u8a9e\u3067OK\u300d\u3067\u3059\u306d\u3002\n\u3042\u3068\u3001\u30d1\u30c3\u30c1\u304c\u9577\u3044\u4e0a\u306b\u5834\u5f53\u305f\u308a\u7684\u3068\u3044\u3046\u304b\u2026\u2026\u3002\n\u3061\u3087\u3063\u3068\u3053\u306e\u307e\u307e\u3067\u306f\u53d6\u308a\u8fbc\u3081\u306a\u3044\u304b\u306a\u3002\n. \u7279\u306b\u3001autoload/neocomplcache.vim\u306e\u51e6\u7406\u304c\u3072\u3069\u3044\u3067\u3059\u306d\u3002\n\u3044\u304f\u3089\u306a\u3093\u3067\u3082\u7279\u5b9a\u6a5f\u80fd\u306e\u305f\u3081\u3060\u3051\u306b\u3053\u3053\u3092\u3044\u3058\u308b\u308f\u3051\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002\nbuffer_complete\u3068\u3044\u3046\u4f8b\u5916\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u4eca\u56de\u306e\u306f\u6c4e\u7528\u7684\u306b\u4f7f\u3048\u306a\u3044\u3057\u3002\n\u305b\u3081\u3066\u3044\u3058\u308b\u306a\u3089omni_complete\u306e\u307b\u3046\u3067\u3057\u3087\u3046\u3002\nhttps://twitter.com/#!/naoina/status/158946980012359681\n\u300comni_complete.vim\u304csnippets_complete.vim\u306b\u4f9d\u5b58\u3057\u3061\u3083\u3046\u304b\u3089\u3042\u307e\u308a\u30a4\u30b1\u3066\u306a\u3044\u3002\u89e3\u6c7a\u6cd5\u306f\u5206\u304b\u3089\u3093\u300d\n\u30c1\u30a7\u30c3\u30af\u306f\u3067\u304d\u307e\u3059\u3002is_source_enabled()\u95a2\u6570\u3092\u4f7f\u3048\u3070OK\u3002\n\u3042\u3068\u3001\u3053\u308c\u3059\u3054\u304f\u6016\u3044\u306e\u306fsource\u3092\u547c\u3076\u9806\u756a\u306b\u4f9d\u5b58\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u304b\uff1f\n. Please check \"~/.neocon\" whether exists and permission.\nI think the permission is wrong(can't write).\n. I think it is Vim's bug or your enviroment floating point feature is not supported.\nPlease update neocomplcache and Vim.\n. > It seems to work fine on terminal, but on GVim, whenever I start to type on insert mode, it pops out so many errors that it covers the whole visible screen.\nI think it is Vim's bug. I recommend report this behavior in vim_dev.\n. In my environment, Ubuntu and Windows also works.\n. Hmmm...\nIs it permission problem?\nBut, \n\nE806: using Float as a String\n\nThis error message is not.\n. I think your problem is not this issue.\nYou should check GVim path and GVim version.\nI think you using old GVim binary(not supporting floating point?).\n. > Nope. As I mentioned before, I've got GVim compiled from latest source today.\nUmm... Will you check :source \"neocomplcache/autoload/vital/_f9b384/prelude.vim\" manually or execute below script.\n\nlet [\n\\   s:__TYPE_NUMBER,\n\\   s:__TYPE_STRING,\n\\   s:__TYPE_FUNCREF,\n\\   s:__TYPE_LIST,\n\\   s:__TYPE_DICT,\n\\   s:__TYPE_FLOAT\n\\] = [\n\\   type(3),\n\\   type(\"\"),\n\\   type(function('tr')),\n\\   type([]),\n\\   type({}),\n\\   type(3.14159)\n\\]\n\n. I updated neocomplcache vital module. Please check it.\n. mattn++;\n. I updated neocomplcache's vital module. Please check it.\n. > Vim \u30c6\u30af\u30cb\u30c3\u30af\u30d0\u30a4\u30d6\u30eb\u306e context filetype \u306e\u8a18\u8f09\u306e\u90e8\u5206\u3067\u4e0a\u306e\u3088\u3046\u306a\u3053\u3068\u304c\n\n\u3067\u304d\u305d\u3046\u3060\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c, \u3069\u3053\u304b\u3089\u624b\u3092\u3064\u3051\u308b\u3079\u304d\u304b\u884c\u304d\u8a70\u3063\u3066\u3044\u308b\u72b6\u6cc1\u3067\u3059.\n\n\u30b5\u30f3\u30d7\u30eb\u306econtext filetype\u306e\u5b9f\u88c5\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\" Initialize include filetype lists.\n\u3068\u66f8\u3044\u3066\u3042\u308b\u90e8\u5206\u3067\u3001context filetype\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u3060\u3068\u3001{'filetype' : 'haskell', 'start': '\\begin{code}', 'end': '\\end{code}'}\u3068\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u306f\u305a\u3067\u3059\u3002\n. I don't recommend you move to arrow keys in buffer.\nYou should set g:neocomplcache_enable_cursor_hold_i is 1.\n. > Sorry, I did not understand. Why is it bad? What should I use instead of arrows in insert mode to move in file?\nBecause In Vim, To move cursor in normal mode. Moving in insert mode like other editor is evil.\n\nYes, I have found this option, but it only prevents menu from showing immediately and does not help with problem\n\nThen your demand is impossible. Please give it up.\n. > Yes, I have found this option, but it only prevents menu from showing immediately and does not help with problem\nBecause,  you must prevent popup menu immediately when cursor moved.\nIn normal setting, neocomplcache popup when cursor moved immediately.\nIf popup menu is showed, cursor keys behavior is changed(Not move in buffer).\n. > Because in other IDEs (like Visual Studio for example) autocompletion menu popups only after typing, not when moving using arrows.\nYes. But in Vim, to implement it is too difficult(and too complex). So, I don't implement it.\n. Yes. Thanks.\n. Sorry, it's bug. I fixed it.\n. Thanks!\n. I cannot fix the issue.\nYou should other IM.\n. Yes. snippets_complete was splitted. Not bug.\nhttps://github.com/Shougo/neocomplcache-snippets-complete\n. neocomplcache snippets_complete feature was splitted.\nhttps://github.com/Shougo/neocomplcache-snippets-complete\nYou should check the documentation.\n. What's your current neocomplcache settings?\nI cannot advice until I know the settings.\n. OK.\nSo, you should update neocomplcache. I fixed it.\n. Oh, .... I get it.\nYour demand behavior is can't. This is Vim's feature.\nVim closes completion window automatically if not matched pattern(e.g. \"obj.Settings.\") automatically.\nYou should enable neocomplcache auto complete.\n. Unfortunately, Vim's builtin completion is different from Sublime Text 2.\nIf you need this behavior, I recommend you to post feature request to vim_dev.\nNeocomplcache cannot implement it.\n. Because, it is too difficult to change Vim's builtin completion behavior by plugins.\n. > would it be possible to set a keybind to allow tab to cycle through the options like supertab does?\nWhat's it?\nI don't know supertab behavior.\n. I recommend mapping:\ninoremap <expr><S-TAB>  pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"\n. That is g:neocomplcache_source_disable(g:neocomplcache_plugin_disable is old name) variable.\nPlease execute ':help g:neocomplcache_source_disable'.\n. Please read neocomplcache-snippets-complete documentation.\nhttps://github.com/Shougo/neocomplcache-snippets-complete/blob/master/doc/neocomplcache-snippets-complete.txt\n<Plug>(neocomplcache_snippets_expand)      *<Plug>(neocomplcache_snippets_expand)*\n    Expand a cursor snippet of plural lines. When there is not\n    snippet, jump to the next placeholder.\n. When you input classname, you must press <Tab>. Then the snippet trigger(classname) is expanded.\n. It is not neocomplcache problem.\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u3084\u306f\u308a\u3001vital.vim\u306e\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u554f\u984c\u3092\u89e3\u6c7a\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u306d\u3002\n. This feature is already implemented.\n:help <Plug>(neocomplcache_snippets_jump)\n:help <Plug>(neocomplcache_snippets_force_expand)\n. OK. I added functions. But, use instead snippets_complete.\nhttps://github.com/Shougo/neocomplcache-snippets-complete.\n. > Also, can you split it as jumpable and expandable?\nYes.\n.  \u305d\u308c\u306f\u30d0\u30b0\u3067\u3059\u306d\u3002\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u305d\u308c\u306f\u3001h14i\u3055\u3093\u306e\u5909\u6570\u306e\u521d\u671f\u5316\u65b9\u6cd5\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u3059\u3002\n~\u3092$HOME\u3068\u3059\u308b\u304b\u3001expand()\u3067~\u3092\u5c55\u958b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u3088\u3063\u3066\u3001\u3053\u308c\u306f\u3053\u3061\u3089\u306e\u554f\u984c\u3067\u306f\u7121\u3044\u3067\u3059\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001~\u304c\u81ea\u52d5\u7684\u306b\u5c55\u958b\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n. \u307e\u3041\u3001\u305d\u308c\u3067\u30cf\u30de\u308b\u3053\u3068\u306f\u7d50\u69cb\u3042\u308b\u306e\u3067neocomplcache\u3067\u306f\u81ea\u52d5\u5c55\u958b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u4ed6\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u3084\u306f\u308a\u5c55\u958b\u3055\u308c\u306a\u3044\u306e\u3067\u5c55\u958b\u3055\u308c\u308b\u3053\u3068\u3092\u8003\u616e\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n. OK. I got your demand. But, to implement this feature is too hard...\n. > It will be better if it just cache when you typing(space,,snippet,jumping,...).\nneocomplcache makes cache when you input spaces, but snippet or jumping is not.\nSo, this is not problem.\nBut, you may set g:neocomplcache_enable_cursor_hold_i.\nYes, neocomplcache makes cache when CursorHoldI.\n. OK I fixed it.\n. > I set g:neocomplcache_enable_cursor_hold_i. Will neocomplcache cache after I setting that?\nPlease update neocomplcache.\n\nWhat do you fix? The problem about caching after space?\n\nYes.\n\nAlso, is it better if we can cache after jumping though the snippet?\n\nThis is not implemented. Why you needed? Please explain me.\n. I checked caching timing. If jumpped, make cache is working.\nPlease show a specific example if you think neocomplcache don't make cache.\n. > previous version works OK for me.\nWhat's your previous version?\nPlease explain hash number.\nI don't change vimproc. So, this issue is not vimproc.\nI think it is neocomplcache issues. So I close it.\n. You should update neocomplcache and check it.\n. > My previous version is the newest stable version on vim.org.\n\nCan you see any information on the screenshot? What does it mean?\n\nYou should check wrong commit by using \"git bisect\" command.\n\nI have tried both vimproc from precompiled and compiled from source(mingw64).\n\nThis is not C library issues.\n. You can check Vim's path using below command.\n:echo neocomplcache#util#substitute_path_separator(fnamemodify(vimproc#get_command_name(v:progname), ':p:h')) . '/vim'\nAnd please tell me your $PATH values.\n. I saw your screenshot, but I think your error message is old version of neocomplcache.\nIn newest version of neocomplcache, using full path instead of \"vim\".\n. > If you have a windows machine, you can reprocedure it by install the vimproc.dll from download page, enablecomplcache and saving any files.\nNot. In my environment, your behavior is not appeared.\n. > BTW, I submit some bug report/feature request on neocomplcache-snippets-complete.\nYes, I know it. But your request and bug report are too many. I can't respond it quickly.\n. > C:\\Users\\zhou\\vimfiles\\bundle\\neocomplcache>git bisect good\n\nec5b86fb38a8481173c0fa60ef57dd9ebf88bc70 is the first bad commit\n\nHmmm,,  but this change is needed.\nBecause, neocomplcache may use old vim. And old vim prints a lot of errors...\nSo, neocomplcache search using Vim binary.\nYou can check by below commands.\n:echo vimproc#get_command_name(neocomplcache#util#substitute_path_separator(fnamemodify(vimproc#get_command_name(v:progname), ':p:h')) . '/vim')\nIn my environment, this command works.\n. In source code, your error messages are:\n\n    let command = vimproc#util#expand(a:command)\n\n  if file == ''\n    throw printf(\n          \\ 'vimproc#get_command_name: File \"%s\" is not found.', command)\n  endif\n\n\na:command is C:/Program Files/vim/vim73/vim in your environment, not \"vim\".\nWhy your error appeared?\n. I fixed it. Please retry.\n. \u305d\u308c\u3092\u5b9f\u88c5\u3057\u305f\u306e\u306f\u304b\u306a\u308a\u524d\u306a\u306e\u3067\u3001\u4eca\u306f\u8a18\u61b6\u306b\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u304a\u305d\u3089\u304fbeep\u97f3\u304c\u9cf4\u3063\u3066\u90aa\u9b54\u306a\u74b0\u5883\u304c\u3042\u3063\u305f\u306e\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u623b\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001\u4ed6\u306e\u74b0\u5883\u3067\u554f\u984c\u304c\u51fa\u305f\u3089\u3001\u305d\u306e\u3068\u304d\u306f\u307e\u305fbeep\u97f3\u3092\u7121\u52b9\u306b\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u306e\u3064\u3082\u308a\u3067\u3002\n. \u3059\u307f\u307e\u305b\u3093\u3002\u3069\u3046\u3084\u3089\u7121\u52b9\u5316\u3059\u308b\u30eb\u30fc\u30c1\u30f3\u304c\u4e8c\u7b87\u6240\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. OK. I fixed it.\n. I think you use symbolic link.\nVital.vim and neocomplcache is not supported symbolic link(It is bug. But not modified...).\n. I fixed it. Please retry.\n. I think your g:neocomplcache_temporary_dir option is empty.\nWhat are your neocomplcache settings?\n\nlet g:g:neocomplcache_temporary_dir = \"$HOME/.vim/tmp/neocomplcache\"\n\nYour setting is wrong. g:g:neocomplcache_temporary_dir is not neocomplcache variable.\nYou must use g:neocomplcache_temporary_dir instead.\n. :-)\n. I think you use symbolic link (maybe Dropbox/).\nVital.vim module used by neocomplcache is not supported symbolic link(This is bug, but not modified...).\n. > Strange, it was woking just fine until I updated..... I'll try reverting to an older version....\nYes. Old version vital.vim worked. But newest vital.vim has bug.\nI'm troubled too.\n. I fixed it. Please try it.\n. Yes. This is feature. The cash generation of neocomplcache is delayed until entering insert mode.\n\nSo I believe this is bug of neocomplcache.\n\nNo.\n. > Can it be fixed by background caching?\nI can't. If you installed vimproc, make caching asynchronously. But little lag is not fixed completely.\n. Because this.\n\nThe cash generation of neocomplcache is delayed until entering insert mode.\n\nSo I can't improve it(and you).\n\nWhen I save a buffer sometime it need to wait too long time if this buffer includes other files. Can this be improved?\n\nThis is include_complete feature. To improve it, disable include_complete(but include_complete candidates are nothing).\n. > when I type one 'c' more, then the popup menu disappeared. This problem has not happened on other filetypes like vim, css html etc.\nYes. Because, this is (Vim's) feature.\nThe candidates(F_OK, fdopen(), fstat(), fsync()) word have not contains character \"c\".\nWhat's your problem? I don't know.\n. If you input character \"d\", popup menu will not be disappeared.\nBecause, fdopen() contains \"d\" character.\n. I tested it. But works neocomplcache.\nI recommend you to update Vim.\n. > Maybe some other plugins is conflict with this. Is there some ways to debug this ?\nYou should make minimal .vimrc and enabled neocomplcache .vimrc. And retry it.\n. What's your .vimrc? I will check it.\n. This is not minimal .vimrc.\nMinimal .vimrc is minimal neocomplcache settings(g:neocomplcache_enable_at_startup only).\nAnd don't contain other plugin settings(example: addon-manager, pastebin, ...)\n. I tested in Linux and Windows environment but works.\n. I think this is not neocomplcache bug.\n\nI have found out what cause this problem, there are three configs can cause this.\n1. set cursorcolumn\n2. plugin 'fugitive'\n3. plugin 'extradite'\n\nWhy causes this plugins? I think python_mode(or your setting) may have problem.\naugroup PythonSettings\n        au!\n        au BufRead,BufEnter,BufNewFile *.py set foldmethod=indent\n        au BufRead,BufEnter,BufNewFile *.py set foldlevel=99\n    augroup END\nI think above code has bug. You must use setlocal instead of set.\nYour .vimrc settings is too long. So, I can't read it.\n. Yes. But you should make minimum .vimrc and try it.\nFor example,\nset nocompatible\nset runtimepath+={neocomplcache plugin path}\nlet g:neocomplcache_enable_at_startup = 1\nIf using above settings still has this problem, I will try it.\nBut if not, this problem is not neocomplcache problem(Your settings or other plugin's problem).\n. > A smart  for snipMate and neocomplcache\nI don't use snipMate. So, I don't know it.\nBut, if use snippets_complete instead of snipMate, possible.\nlike this:\nimap <expr><Tab>    neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : \"\\<C-n>\"\n. Sorry. snippets_complete is splitted in latest version. Because snippets_complete is too big.\nPlease install it.\nhttps://github.com/Shougo/neocomplcache-snippets-complete\n. > Snippets feature(snippets_complete source) was splitted from Ver.7.\n\nIf you used it, please install snippets_complete source manually.\nhttps://github.com/Shougo/neocomplcache-snippets-complete\n\nAlready documented.\n. > Showing matches for other filetypes\nPlease use same filetype feature.\n:help g:neocomplcache_same_filetype_lists\n. > Is there any way I can disable this line from my .vimrc instead of modifying neocomplcache.vim (so that I have no problems updating later) ?\nif !(exists('g:neocomplcache_same_filetype_lists'))\n   let g:neocomplcache_same_filetype_lists = {}\nendif\nlet g:neocomplcache_same_filetype_lists.erb = ''\n. > Also, when I type #include , iostream won't pop up though I have already added them to path.(gf works)\nIn my environment, this feature is works(iostream will popup).\n. > In a c++ file, type a:: you will trigger filename-completion.\nIn my environment, I cannot see filename completion caididates....\n\nFilename completion's usage is very narrow. It should be limited to the extent that it's a exact place for it.\n\nIt is OK. But this is too heavy.\n. I improved filename completion pattern.\n. OH....\nOK. I'll fix later.\n. I fixed it.\n. Thanks. I merged.\n. I think 1.txt does not cached in neocomplcache.\nYou should execute :NeoComplCacheBuffer or wait until cached.\n. Please refer to http://d.hatena.ne.jp/basyura/20120318/p1\n. > It makes absolutely no sense to have to call :NeoComplCacheBuffer every time I want to update the buffer's cache.\nSorry, this behavior is fixed in latest neocomplcache(in github). Please try it.\n. Yes. Your problem is not this issue.\n. I fixed it.\n. \u30de\u30fc\u30b8\u3057\u307e\u3057\u305f\u3002\n. Thanks! I pulled it.\n. Yes. But this is feature. Not bug.\nThis match is too heavy. So, it is enabled when your input is longer than 2 and less than 20 characters.\n. This completion must search from all candidates. So, too heavy.\nCan you improve it(not revert)?\n. > I haven't hit any performance issues with my settings\nBecause, I think you are using very fast machine or neocomplcache's candidates are few.\n\nbut if you see\nthis a good feature, how about adding a setting for the minimum amount of characters?\n\nOK. I'll add option. (But slow...)\n. I added g:neocomplcache_fuzzy_completion_start_length option.\n\nThe amount of characters is not the only issue, since the help file\ndocumentation states the exact same example I used in the original\npost. I don't know what the underlying issue is at the moment.\nAll I know is that by reverting the commit, the example in the help\nfile can be reproduced.\n\nI fixed examples.\n. Your behavior is feature.\nneocomplcache does not show all candidates until all caching is end.(This is asynchronously caching, isn't it?)\n\nI copied this bit of code, which I found in another issue, but it didn't help.\n\nWhat's mean?\n. > Can it be configured to do it for me?\nNo.\n. I improved to check caching routine. Please check it.\n. OK. I fixed. Please retry it.\n. OK. I changed this behavior.\n. I tested it. But this behavior is not showed.\n. It may be fixed in latest neocomplcache.\nI think this is g:neocomplcache_enable_prefetch problem.\n. When I tested it, if g:neocomplcache_enable_prefetch is 0, this behavior is found.\nThis is Vim's Ctrl-x mode problem. I will fix it.\n. OK.\n. No. This is feature.\nIn sudo, neocomplcache (and unite.vim and vimshell) is disabled.\nSo, they must warn.\n. > But why is it disabled, i.e. what are the security implications?\nYes, and neocomplcache(and other plugins) make cache files, but if you are using sudo, will make cache files in super user permission. It causes many problems.\n\nI think it's better to leave it up to the user if he wants to use sudo directly or a plugin like sudo.vim, will you accept a pull request that adds an option to make this behaviour optional?\n\nNo. I must tell you that neocomplcache disabled in sudo(cannot optional). If you use neocomplcache in sudo files, I recommend you to use sudo.vim or other sudo plugins.\n. > sudo doesn't change $HOME to the other user's home, but this can easily be changed by having always_set_home in sudoers.\nYes. But neocomplcache cannot check it.\n\nI'd like to add an option to neocomplcache to disable the sudo check, with a clear warning in the documentation, and without any change to the current default behaviour. Would you still reject such a pull request? ;-)\n\nOK. If you send pull request, I will merge. I must change other plugins behavior(unite.vim, vimshell, vimfiler), but I have no much time. Would you send all plugins pull requests?\nThis is not only neocomplcache problem. I have to maintain many plugins...\n. > You could check it by comparing the UID of the cache directory's parent folder to the current user's ID.\nI recommend you to implement it :-)\n\nHmm I see :-) I think I'll first make a pull request for neocomplcache, improve it until you're happy with everything (coding style etc.), and then I'll make pull requests for your other plugins in the same style (assuming they're all organised similarly). Is this alright with you?\n\nOK. First, I will check your neocomplcache pull request, then you make all pull request.\nBecause, I think all pull request changes are almost same(only plugin name is changed).\n. >  In the past, I only occasionally got some error; now, I get the warning every time.\nNo. I think you underestimate this problem. I watched the person who would be troubled with this error many times. So, I implemented it.\n. @toupeira I improved sudo warning message and implemented always_set_home detection. Please check it.\n. Thanks! I fixed it.\n. OK. I fixed.\n. > When I set \u300calways_set_home\u300d, there is no waring msg, but the neocomplcache doesn't work as well as the vim seems will not read my .vimrc file?\nIt is feature. Are you know \"always_set_home\" behavior? And the issue mean?\nIf you set \u300calways_set_home\u300d, $HOME will be changed in sudo session.\n. Yes.\n. > After upgrading neocomplcache to 6.2, this behaviour won't work in GVIM, resulting in all punctuation full-shaped.\nThat version is latest version in github?\nI recommend to update to the latest version.\n. I think you use neocomplcache 6.2 in vim.org.\nThis version has bugs. I will update vim.org version neocomplcache later.\nBut I have not much time....\n. Oh, I think this is pythoncomplete's issues(not neocomplcache).\nI recommend you to report the bahavior to pythoncomplete maintainer.\nhttp://www.vim.org/account/profile.php?user_id=6977\nTo disable pythoncomplete in neocomplcache, please set g:neocomplcache_omni_patterns['python'] to ''.\n. I researched your report. And I reappeared it.\nBut If I executed :NeoComplcacheDisable and pressed \\<C-x>\\<C-o> keys, pythoncomplete and Vim will hang.\nSo, this is not neocomplcache bug.\n. > However, it solved by rebuild the Vim 7.3.495 with CFLAGS=-g option.\nThis problem was fixed in Vim 7.3.495?\n. > I have sent an email to vim_dev mailing list:\nThanks!\n\nNo, solved only if added debug option. otherwise fall by SEGV yet.\n\nOh....\n. > There must be some slight difference.\nWhat's difference?\nIf you think neocomplcache documentation is wrong, please fix it.\nI don't know your problem...\n. Oh,.. It's your mappings problem. It's Vim's feature...\nPlease map below mappings.\ninoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\"\ninoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\"\n. Yes. I reproduced. It is bug.\nI will fix it later.\n. I fixed it. Please update neocomplcache.\n. > Any clue on when this will be fixed? Is there some sort of workaround?\nYes. In my environment, it still not fixed. Can you check your environment?\n. Oh...\nI think the bug must be fixed. But I have not much time and technique...\n. Thanks for your bug report!\n. This problem was fixed in 7.3.561.\nThanks @mattn!\n. neocomplcache is not supported keyword completion from all opened buffers.\nneocomplcache can support keyword completion from same filetype buffers.\nBut, if you change g:neocomplcache_same_filetypes variable, you will get keyword completion like behavior.\n. > For example if I enter a few words in a file, and then again enter the first few letters of one of these words, the completion popup doesn't contain any of these buffer keywords, but does contain e.g. snippets and syntax keywords with beginning with the same letters.\nYes. It's feature. But I will improve it.\n. I improved the behavior. Please try it.\n. > but still doesn't seem to cover all keywords used by Vim's keyword completion.\nPlease try :NeoComplCacheCachingBuffer command.\n. Neocomplcache caching algorithm is too complicated. So I can't explain now.\n\nSo could I just add an auto-command to call :NeoComplCacheCachingBuffer on BufRead/BufNewFile or something?\n\nI think you should execute :NeoComplCacheCachingBuffer manually. On BufRead/BufNewFile/FileType, neocomplcache make cache automatically. But you changed buffer in a lot, not cached all.\n. OK. I closed it.\n. Yes. Neocomplcache does not support it.\nBut perl_omni.vim supports it. I recommend you to install the plugin.\nhttps://github.com/c9s/perlomni.vim\nTo use perl_omni.vim in neocomplcache, you should change g:neocomplcache_omni_pattens variable.\n. I recommend setting below:\nlet g:neocomplcache_omni_patterns.perl = '\\h\\w_->\\h\\w_|\\h\\w*::'\n. I fixed it. But it may be not neocomplcache problem.\n. I think neocomplcache printed error. Please execute :message command.\n. But I don't heard the problem from other environment (contains me).\nI think it caused by your setting or other plugin. Please check it.\n. Example: vim -u {minimal_vimrc} -U NONE --no-plugins\n{minimal_vimrc} is only enable neocomplcache.\n. I fixed this problem. Please check it.\n.  \u304a\u305d\u3089\u304f\u3001\u3053\u308c\u3068\u540c\u3058\u554f\u984c\u3067\u3059\u3002\nhttps://github.com/Shougo/neocomplcache/issues/188\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001\u3053\u306ecd\u306f\u672c\u6765\u3082\u3068\u306b\u623b\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3001\n\u305d\u308c\u304ccd\u3057\u3063\u3071\u306a\u3057\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u518d\u73fe\u65b9\u6cd5\u3082\u306f\u3063\u304d\u308a\u3068\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u3057\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u8a73\u3057\u3044\u518d\u73fe\u65b9\u6cd5\u3092\u89e3\u660e\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u304c\u3001\u3053\u3061\u3089\u3067\u3082\u3053\u306ecd\u3092\u524a\u9664\u3067\u304d\u306a\u3044\u304b\u691c\u8a0e\u3057\u3066\u307f\u308b\u4e88\u5b9a\u3067\u3059\u3002\n. cd\u3092\u524a\u9664\u3057\u307e\u3057\u305f\u3002\u3082\u3046\u4e00\u5ea6\u8a66\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. \u30ad\u30e3\u30c3\u30b7\u30e5\u4e2d\u306bVim\u304c\u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u3001\u5272\u308a\u8fbc\u3080\u306e\u304b\u3068\u3044\u3046\u306e\u306f\u8b0e\u3067\u3059\u304c\u3001\ncd\u3057\u3066\u3044\u308b\u6700\u4e2d\u306b\u3092\u62bc\u3057\u305f\u308a\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308c\u3070cd\u3092\u3082\u3068\u306b\u623b\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n. OK. I see the issue.\nI will fix later.\n. But in other language all import is not common(Python, Haskell, D language,...).\nWhy should I support this feature? Please explain other useful case to me.\n. > Or you can set it as a extra option for people to enable.\nI don't like to add options.\nneocomplcache has a lot of options now.\n. OK. I think should not support wildcard include files.\nBecause if has many include files, neocomplcache too slow.\n. I supported this feature in Java file only.\n. > I hope neocomplcache auto insert two pairs. and place placeholder inside of pairs.\n\nlike this:\n\nNo. I think this feature should implemented by other plugins like Autopairs.vim.\n. > 192_do_auto_complete..neocomplcache#get_complete_results..\n\n192_set_complete_r267_CR()esults_words..263..htmlcomplete#CompleteTags, line 203\n\nI think it is htmlcomplete problem.\n. And, you should show all error message to me using \":messages\" command.\nDon't snip.\n. Yes. It's htmlcomplete bug. Please send bug report to maintainer.\nlet tag = split(context)[0]\n    \" Detect if tag is uppercase to return in proper case,\n    \" we need to make it lowercase for processing\n    if tag =~ '^[A-Z]*$'\n        let uppercase_tag = 1\n        let tag = tolower(tag)\n    else\n        let uppercase_tag = 0\n    endif\n. Please read htmlcomplete.vim source code. Maintainer URL is in it.\n. Yes. I fixed it now.\n. > So prefetch gets enabled for old versions of VIM, instead of newer ones.\nYes. Because, not prefetch behavior causes problem in old Vim.\n. > I keep running into this error whenever I open up a file in MacVim (GUI only, not terminal):\nOK. Where is your MacVim path?\nAnd can you search your MacVim from $PATH?\n. I fixed it. Please check it.\n. Please check below value.\nlet base_path = neocomplcache#util#substitute_path_separator(\n      \\ fnamemodify(vimproc#get_command_name(v:progname), ':p:h'))\nlet vim_path = base_path . (neocomplcache#util#is_windows() ? '/vim.exe' : '/vim')\necho !executable(vim_path) && neocomplcache#util#is_mac()\necho vim_path\n. I don't know why your vim_path is \"Vim\"?\n. > If you prefer, I can try it out and submit a pull request.\nYes, I can. But I must know why this script don't work.\n. I fixed this problem. Please check it.\n.  \u4e86\u89e3\u3002\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002\n. \u4f7f\u7528\u3057\u3066\u3044\u308bFuzzyFinder\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4f55\u3067\u3059\u304b\u3002FuzzyFinder\u306e\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u30aa\u30e0\u30cb\u88dc\u5b8c\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\nneocomplcache\u3068\u7af6\u5408\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u6700\u65b0\u7248\u306a\u3089completefunc\u306a\u306e\u3067\u554f\u984c\u304c\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n\u3053\u3061\u3089\u3067\u5bfe\u51e6\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u5bfe\u51e6\u305b\u305a\u306b\u6e08\u3080\u306a\u3089\u305d\u306e\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002\n. \u3046\u30fc\u3093\u3001\u6700\u65b0\u7248\u3067\u3082\u30aa\u30e0\u30cb\u88dc\u5b8c\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\nneocomplcache\u5074\u3067\u4e00\u5fdc\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u304c\u3001fuzzyfinder\u306f\u3082\u3046\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u53ef\u80fd\u306a\u3089\u4ed6\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u554f\u984c\u3082\u304a\u304a\u3088\u305d\u628a\u63e1\u3057\u307e\u3057\u305f\u3057\u3001Pull request\u3092\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002\n. \u3053\u306e\u554f\u984c\u306f\u3001\u305d\u3082\u305d\u3082buffer_complete source\u4ee5\u5916\u304ccomposite filetype\u3092\u89e3\u91c8\u3057\u3066\u3044\u306a\u3044\u306e\u304c\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4fee\u6b63\u3059\u308b\u306e\u306f\u4e0d\u53ef\u80fd\u3067\u306f\u7121\u3044\u3067\u3059\u304c\u5927\u5909\u306a\u306e\u3067\u3001Pull request\u306e\u3088\u3046\u306b\u5909\u6570\u3092\u8ffd\u52a0\u3057\u305f\u307b\u3046\u304c\u6700\u5584\u3067\u3057\u3087\u3046\u3002\n. \u3053\u3061\u3089\u3053\u305d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nChangelog\u306f\u3042\u3063\u305f\u307b\u3046\u304c\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u3088\u308a\u3082\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u91cd\u8981\u3067\u3059\u3057\n\u4eca\u56de\u306ePull request\u306b\u306f\u8ffd\u52a0\u3057\u305f\u5909\u6570\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u3042\u308b\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u3067\u69cb\u3044\u307e\u305b\u3093\u3002\n. Changelog\u3092\u66f8\u3044\u3066\u3044\u306a\u3044Pull request\u306f\u591a\u3044\u3067\u3059\u3057\u3001\u79c1\u304c\u53d6\u308a\u8fbc\u3080\u304b\u3069\u3046\u304b\u306e\u57fa\u6e96\u306fChangelog\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u305d\u3053\u307e\u3067\u304d\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n. let g:neocomplcache_caching_limit_file_size = 50000\n\u306f\u901a\u5e38\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4e21\u65b9\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304c\u307e\u305a\u3044\u3068\u5224\u65ad\u3057\u3001g:neocomplcache_tags_caching_limit_file_size\u306b\u5206\u96e2\u3057\u307e\u3057\u305f\u3002\n<?ph\u306e\u6642\u70b9\u3067tags\u88dc\u5b8c\u304c\u52b9\u304f\u306e\u306f\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u306e\u4ed5\u69d8\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u3002\n\u3042\u3068\u3001\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u975e\u5e38\u306b\u602a\u3057\u3044\u3067\u3059\u3002\u305d\u306e\u9045\u3055\u306f\u30aa\u30e0\u30cb\u88dc\u5b8c\u306b\u3088\u308b\u3082\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u30bf\u30b0\u60c5\u5831\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u88dc\u5b8c\u6642\u306e\u8868\u793a\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u898b\u305b\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u3067\u5224\u65ad\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n. \u3042\u3001\u3084\u306f\u308aPHP\u306e\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306f\u9045\u3044\u306b\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nphpcomplete\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\n\u3088\u3063\u3066\u3001\nlet g:neocomplcache_omni_patterns.php = '[^. \\t]->\\h\\w*\\|\\h\\w*::'\n\u3053\u306e\u884c\u3092\u524a\u9664\u3059\u308b\u306e\u304c\u3001\u826f\u3044\u89e3\u6c7a\u65b9\u6cd5\u3067\u3057\u3087\u3046\u3002\n. \u3068\u3044\u3046\u308f\u3051\u3067\u3001\u554f\u984c\u306f<?ph\u306e\u6642\u306btags_complete\u304c\u50cd\u304f\u3001\u3068\u3044\u3046\u3068\u3053\u308d\u306b\u7d5e\u3089\u308c\u307e\u3057\u305f\u3002\n\u3053\u306e\u5834\u5408\u306f\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u52d5\u3044\u3066\u3044\u308b\u3068\u306f\u8003\u3048\u306b\u304f\u3044\u306e\u3067\u3001tags_complete\u306e\u51e6\u7406\u306b\u554f\u984c\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n<?ph\u3067\u88dc\u5b8c\u304c\u51fa\u305f\u6642\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3066\u3082\u3089\u3048\u307e\u3059\u304b\u3002\n. \u3042\u3068\u306f\u3001\u3084\u306f\u308a\u88dc\u5b8c\u6642\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u304c\u307b\u3057\u3044\u3067\u3059\u306d\u3002\u4f55\u306e\u88dc\u5b8c\u304c\u554f\u984c\u3092\u8d77\u3053\u3057\u3066\u3044\u308b\u304b\u304c\u4e00\u76ee\u3067\u308f\u304b\u308a\u307e\u3059\u3002\n. > \u306f\u901a\u5e38\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4e21\u65b9\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304c\u307e\u305a\u3044\u3068\u5224\u65ad\u3057\u3001>g:neocomplcache_tags_caching_limit_file_size\u306b\u5206\u96e2\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u5909\u66f4\u306f\u307e\u3060push\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u3002\n. \u3061\u306a\u307f\u306b\u3001\u79c1\u306e\u74b0\u5883\u3067\u306flimit\u3092\u7121\u8996\u3055\u308c\u307e\u305b\u3093\u3002Vim\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066(1.2MB)\u3001\u305d\u308c\u3092tagfiles()\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u72b6\u614b\u306b\u3057\u305f\u3068\u3053\u308d\u3001\u81ea\u52d5\u3067\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n. > disable\u672a\u6307\u5b9a(tags\u88dc\u5b8c\u6709\u52b9)\u3001limit_file_size\u5897\u3084\u3059(\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u7bc4\u56f2\u5185)\u306a\u306e\u3067\u3001tags\u88dc\u5b8c\u52b9\u3044\u3066\u5f53\u305f\u308a\u524d\u3067\u3059\u3002\n\u305f\u3057\u304b\u306b\u305d\u3046\u3067\u3059\u306d\u3002\u3053\u308c\u306f\u30aa\u30e0\u30cb\u88dc\u5b8c\u306e\u554f\u984c\uff08\u4ed5\u69d8\uff1f\uff09\u3067\u3059\u306e\u3067\u3001neocomplcache\u3067\u306e\u5bfe\u5fdc\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u3002\n\u554f\u984c\u306f\u89e3\u6c7a\u3057\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u3067close\u3057\u307e\u3059\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\u307e\u3067\u306f\u78ba\u8a8d\u51fa\u6765\u3066\u307e\u305b\u3093\u304c\u3001php\u306b\u95a2\u3057\u3066\u306fomni\u88dc\u5b8c\u3092\u7121\u52b9\u306b\u3059\u308c\u3070\u5bfe\u5fdc\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\u8a00\u8a9e\u306b\u3088\u3063\u3066\u306f\u3001\u30bf\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u88dc\u5b8c\u306b\u5229\u7528\u3059\u308b\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u540c\u69d8\u306e\u554f\u984c\u306f\u8d77\u3053\u308a\u3046\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u306f\u5404\u81ea\u3067\u5bfe\u51e6\u3057\u3066\u3082\u3089\u3046\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\n. OK.\n. Please tell me your :scriptnames result.\nI must know 79's script name.\n. Nothing comment.\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. I recommend you to map manually.\nI don't want to add key mappings.\nEx:\ninoremap <expr><C-y>  neocomplcache#smart_close_popup().\"\\<C-y>\"\ninoremap <expr><C-e>  neocomplcache#smart_close_popup().\"\\<C-e>\"\n. >  Just ask, whether it is possible ?\nNot possible.\nThis plugins don't export interfaces for neocomplcache(or complete functions).\nAnd I don't like other snippet plugins....\n. This is pythoncomplete feature. Not neocomplcache feature.\nI recommend you to send the request to pythoncomplete maintainer.\n. I think pythoncomplete uses python2 interface, so cannot complete Python3.\n. Yes. neocomplcache (omni_complete) calls it.\n. Unfortunatelly, python3 and python interface cannot loaded at the same time.\n:help python3\nSo, I cannot support it.\n. > And by the way, I put au FileType python setlocal omnifunc=python3complete#Complete before VAM load neocomplcache, is it error on this ?\nBeacuse, after neocomplcache check python interface, python interface is loaded.\nBut python3 interface cannot load. So python3complete will raise error.\nI cannot fix!\n. > Hmm, does neocomplcache support python3 interface ?\nI cannot. This is Vim's python interface feature.\n\nAnd this should have an option for use python interface complete or python3 interface complete.\n\nAlso not. Because, if other plugin check python or python3 interface, will cause same problem.\n. I think python3 complete author cannot fix too.\n. OK. I get it.\nI think you set g:neocomplcache_omni_functions in your .vimrc.\nIf it is set, neocomplcache ignore &omnifunc.\n. I improved omni completion. Please try it.\n. OK. I pulled it.\n. \u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u308c\u306f\u4ed5\u69d8\u306a\u3093\u3067\u3059\u3002\n\u305d\u306e\u5909\u66f4\u3092\u623b\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u308c\u3092\u623b\u3059\u3068omni_complete\u306e\u969b\u306b\u5f71\u97ff\u304c\u51fa\u308b\u304b\u3089\u3067\u3059\u3002\nfiletype\u3067\u500b\u5225\u5bfe\u5fdc\u3059\u308b\u308f\u3051\u306b\u3082\u884c\u304d\u307e\u305b\u3093\u3057\u2026\u2026\n\u305d\u3082\u305d\u3082\u3001\u3053\u3046\u306a\u308b\u7406\u7531\u306f\u6bce\u56de\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u81ea\u52d5\u547c\u3073\u51fa\u3057\u3055\u308c\u3066\u3044\u308b\u305b\u3044\u3067\u30a4\u30f3\u30c7\u30f3\u30c8\u30d7\u30e9\u30b0\u30a4\u30f3\u304c\u52b9\u3044\u3066\u3044\u306a\u3044\u305f\u3081\u3067\u3059\u3002\nlet g:neocomplcache_enable_prefetch=1\u3068\u3059\u308c\u3070OK\u306e\u306f\u305a\u3002\n. \u3053\u3061\u3089\u3067\u8a66\u3057\u305f\u3068\u3053\u308d\u3001:NeoComplCacheDisable\u3084:NeoComplCacheLock\u3092\u3057\u3066\u3082/\u5165\u529b\u6642\u306b\u304f\u3063\u3064\u304f\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\u30d7\u30e9\u30b0\u30a4\u30f3\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3082\u3057\u304f\u306f\u7279\u5225\u306a\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u5165\u308c\u3066\u3044\u308b\u304b\u3002\n. \u3059\u307f\u307e\u305b\u3093\u304c\u3001\u3084\u306f\u308a\u518d\u73fe\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u4eca\u306e\u3068\u3053\u308d\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u306a\u3044\u306e\u3067\u4ed5\u69d8\u3068\u3044\u3046\u4e8b\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n. \u3061\u3087\u3063\u3068\u6319\u52d5\u3092\u6539\u5584\u3057\u3066\u898b\u307e\u3057\u305f\u3002neocomplcache\u3092\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4eca\u5ea6\u306f\u3069\u3046\u3067\u3059\u304b\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\n. > \u5ff5\u306e\u70ba.neocon\u3092\u6d88\u3057\u3066\u3082\u5909\u5316\u306f\u7121\u304b\u3063\u305f\u3067\u3059\u3002\n\u30aa\u30e0\u30cb\u88dc\u5b8c\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5f53\u7136\u610f\u5473\u304c\u7121\u3044\u3067\u3059\u3002\ncss\u306e\u30aa\u30e0\u30cb\u88dc\u5b8c\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3067\u3082\u8abf\u67fb\u3057\u307e\u3059\u3002\n. \u3053\u3061\u3089\u3067\u3082\u5019\u88dc\u304c\u51fa\u3066\u3053\u306a\u3044\u306e\u3092\u78ba\u8a8d\u3002\u304a\u305d\u3089\u304f\u3001\u6700\u8fd1\u30aa\u30e0\u30cb\u88dc\u5b8c\u306e\u30b3\u30fc\u30c9\u3092\u3044\u3058\u3063\u305f\u5f71\u97ff\u3067\u3057\u3087\u3046\u3002\u8abf\u67fb\u3057\u307e\u3059\u3002\n. \u539f\u56e0\u304c\u5224\u660e\u3057\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\n. This is not neocomplcache issues.\nI recommend you to explain to rubycomplete and ruby interface maintainer.\n. I recommend to you to report this behavior. I don't know why...\n. But I can't fix...\n. I added g:neocomplcache_force_omni_functions.\nIf it is set, neocomplcache will call omni function directly.\nif !exists('g:neocomplcache_force_omni_patterns')\n      let g:neocomplcache_force_omni_patterns = {}\n    endif\n    let g:neocomplcache_force_omni_patterns.ruby = '[^. *\\t]\\.\\w*\\|\\h\\w*::'\nPlease check it.\n. Thanks for your information.\n. > no python interface\nI think you set omnifunc or g:neocomplcache_omni_functions.\nPythoncomplete needs python interface. So this error is not bug.\n. You may not set it.\nBut other plugin may set it.\nPlease check by :99verbose setlocal omnifunc in python file.\n. OK.\nI improved Python interface check.\nPlease update it.\n. call neocomplcache#smart_close_popup() is invalid.\nneocomplcache#smart_close_popup() returns key sequences to close popup.\nBecause, Vim doesn't define close popup functions :-(\nNot bug.\n. Yes. To expand snippets, you must use <Plug>(neocomplcache_snippets_force_expand).\nLike this: neocomplcache#smart_close_popup().\"\\<Plug>(neocomplcache_snippets_force_expand)\"\n. > it inserted (neocomplcache_snippets_force_expand) instead, so had to use feedkeys(). Most > probably some plugin fault.\nOh.\nyou must expand ((neocomplcache_snippets_force_expand)).\nTo this: neocomplcache#smart_close_popup() . maparg('<Plug>(neocomplcache_snippets_expand)', 'i')\n. > neocomplcache#smart_close_popup() . maparg(\"<Plug>(neocomplcache_snippets_expand)>\", 'i')\nYou missed.\nneocomplcache#smart_close_popup() . maparg(\"<Plug>(neocomplcache_snippets_expand)\", 'i') is right.\n. Hmmm..\nI think feedkeys() is better in the case.\n. > (i.e. i want to just put def and I select buffer source in menu, but it gets expanded)\nI think it can't be fixed...\n. > in my .vimrc file. When I edit python files, vim crashes if I use \".\" right after certain letters. Vim halts for a while and shows the following:\nIt is python interface failure. Not neocomplcache's bug.\nI recommend to you to report the issues.\n. let g:neocomplcache_omni_patterns['python'] = ''\n. https://groups.google.com/forum/#!searchin/vim_dev/python$20crash$20gtk/vim_dev/JwCepZR1tD0/S6bW62axw60J\nYou should read this thread. I cannot fix it.\n. > when I add the above line to .vimrc, and if I am in vim edit mode, whenever I move my cursor, or scroll with mouse, the omnicomplete lists are shown. this has two disadvantages.\nDo you use cursor keys to move cursor in insert mode?\nIf that, I recommend you to use let g:neocomplcache_enable_insert_char_pre = 1.\n. > I read in the doc, it uses regexp for pattern, but can you please point to a specific implementation/reference where I can lean about the patterns supported.\n:help pattern\nI recommend to you to learn Vim regexp patterns.\n. > Shougo. Thank you for the help. I have tried setting neocomplcache_enable_insert_char_pre , before/after g:neocomplcache_enable_at_startup , but still if I move the cursor the list is shown. The main issue is when I use the mouse to scroll the window in edit mode, which is very common.\nWhat's your vim's version?\nTo use insert_char_pre, Vim version must be above 7.3.418.\nI think your Vim is too old.\n. > If no other solution, is there a regexp setting which only trigger omnicomplete/neocomplcache when I press \".\" char.\nNo, other solution is not.\n. Like this:\n\" Popup color.\nhi Pmenu ctermbg=8\nhi PmenuSel ctermbg=1\nhi PmenuSbar ctermbg=0\n. I think you use GUI Vim.\nhi Pmenu                    guibg=#606060\nhi PmenuSel                 guifg=#dddd00 guibg=#1f82cd\nhi PmenuSbar                guibg=#d6d6d6\nhi PmenuThumb               guifg=#3cac3c\nNote : This is not neocomplcache issue...\n. You can check highlight setting by following command:\nverbose highlight Pmenu\nOther scripts may overwrite highlight.\n. Do you want to choose completion by <CR> but no inserting <CR>?\nI think you should use this mapping.\ninoremap <expr><silent> <CR> <SID>my_cr_function()\n  function! s:my_cr_function()\n    return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\n  endfunction\n. But I don't use endwise. So I don't know whether this mapping conflicts with endwise.\nendwise may insert <CR>.\n. > without the vim-endwise plugin when pressing  in insert mode on autocomplete menu item it would only select the item from the autocompletion menu and would not insert a  in the code.\nI don't think so. This mapping will insert <CR>.\ninoremap <expr><CR> neocomplcache#smart_close_popup() . \"\\<CR>\"\n. > And this is another manifest of the conflict with vim-endwise - when I disable vim-endwise\nOK. This is endwise problem. Please report it.\nI think endwise must add option.\nSo I want to close this issue...\n. Thanks.\n. It is not neocomplcache problem.\n. Unfortunatelly, neocomplcache heavily uses machine power.\nIf you think neocomplcache performance is poor, the big improvement is difficult.\nI make an effort to improve a performance of neocomplcache, but plugin implementation has limitation.\nI want to know the method to improve a performance...,\nThanks.\n. I need Vim script performance is more faster and to improve popup and to narrow candidates.\nBut those implementation are hard.\n. In neocomplcache ver.8.1, perfomance problems is fixed.\n. > Is there a more detailed instruction that I can follow?\nThis feature is removed in latest version.\nBecause quick match is hard to implement.\nBut you can use |unite.vim| to quick match.\nimap <expr> -  pumvisible() ?     \"\\<Plug>(neocomplcache_start_unite_quick_match)\" : '-'\n. >  How do you use the register complete though?\nPlease press head key.\n. ```\n\npack\na| pack_response\ns| pass\n```\n\n'a' and 's' are the keys.\n. > What I asked is how do you type \"re\"and it will pop up all the registers name with content in terms of snippets\nTo use snippet completion, you must install neocomplcache-snippets-complete.\n. Please read FAQ documentation.\n\nQ: Where is snippets for neocomplcache?\nA: https://github.com/Shougo/neocomplcache-snippets-complete\n. @imontalvomiguel You should install neosnippet instead of neocomplcache-snippets-complete.\n\nhttps://github.com/Shougo/neosnippet.vim\n. I see.\nBut neocomplcache supports multiple filetypes (ex: html.python).\nWhy you don't use mutiple filetypes?\nWhat's its advantage?\n. Sorry. I fixed it.\n. OK. I added :NeoComplCacheSetFileType command.\n. It is neocomplcache#get_context_filetype().\n. I think your neocomplcache install is imcomplete.\nIs :NeoComplCacheEnable available? And works it?\n. I think your \"~/.vim/after/ftplugin/python/python.vim\" is not sourced.\n. I used python3complete in python source file.\nBut error is not occured.\nI think your Vim is not used python3 interface.\nPlease check by :echo has('python3').\n. Your c pattern is wrong.\nlet g:neocomplcache_omni_patterns.c = '[^. *\\t]\\%(\\.\\|->\\)'\nis correct.\nNote: Sorry, neocomplcache examples are wrong. I fixed it.\n. I think you don't create tags file.\nccomplete use taglist() but this function needs tagsfile by \"ctags\".\n. Yes...\n. Please change g:neocomplcache_keyword_patterns[filetype] value.\nI don't know accented chars patterns.\n. You should use <Up>/<Down> keymappings.\nThese mappings are select candidate but not inserting.\n. inoremap <expr> <C-n> pumvisible()? \"\\<Down>\" : \"\\<C-n>\"\ninoremap <expr> <C-p> pumvisible()? \"\\<Up>\" : \"\\<C-p>\"\n. > It didn't work in my environment, will they conflict whit other settings? This is my neocomplcache settings.\nPlease explain in detail.\n. > but when i type 'fo' with the candidates of 'foo', 'fooo', 'foooo', but it still auto input the 'foo' to the edit line when i use  to make a selectio\nSorry, it's Vim's feature. You cannot change the <C-n>/<C-p> behavior.\nChange to other keys.\ninoremap <expr><C-j> pumvisible()? \"\\<Down>\" : \"\\<C-j>\"                                                                                                                           \ninoremap <expr><C-k> pumvisible()? \"\\<Up>\" : \"\\<C-k>\"\n. > Thanks for the reply, is there any way can achieve that type '' to select, and another '' to completion? \nUnfortunatelly, cannot. Because Vim's completion mapping feature is imcomplete customization.\nI recommend you to request the feature to vim_dev.\n. I fixed the problem. Please update neocomplcache.\n. :-)\n. It is g:neocomplcache_compare_function. Or change g:neocomplcache_source_rank value.\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u95a2\u6570\u306b\u306f\uff12\u3064\u30d0\u30b0\u304c\u3042\u308a\u3001\n\uff11\uff1aignorecase\u306e\u3068\u304d\u3001\u3046\u307e\u304f\u5171\u901a\u90e8\u5206\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u306a\u3044\n\uff12\uff1a\u5171\u901a\u90e8\u5206\u304c\u306a\u304b\u3063\u305f\u6642\u3001\u5165\u529b\u304c\u6d88\u3048\u308b\n\u4e21\u65b9\u5171\u4fee\u6b63\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n. \u53d6\u308a\u8fbc\u307f\u307e\u3057\u305f\u3002\n. I fixed it.\n. OK. I put on this feature in todo list.\nBut this feature is not easy.\n. > Maybe just check the length of a:cur_keyword_str > 2 before testing conversion. \nNo. I must add new attribute.\n. I implemented this feature. Would you update neocomplcache and neocomplcache-snippets-complete?\n. Sorry. Please wait.\n. I pushed.\n. > I hope neocomplcache can give out an option to whether escape those things.\nWhy? Please explain it.\nAnd, neocomplcache use escape sequences to get filename length(contains spaces).\nSo to implement this feature is too hard.\n. OK. I put it on todo list.\nBut this feature is not easy.\n. Neocomplcache is out of development.\nClosing.\n. OK. I fixed.\n. I didn't modify neocomplcache 7.1. Please update from github repository.\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u30de\u30fc\u30b8\u3057\u307e\u3057\u305f\u3002\n. ```\nujihisa \nshougo:\nneocomplcache.txt\u306b\u3042\u308b\n\nBecause I implemented it by paying own expenses unlike the\nkeyword completion including the Vim composing type, neocomplcache can be\ncustomized flexibly.\n\n\u3053\u308c\u306eBecause\u306e\u53e5\u306f\u8981\u7d04\u3059\u308b\u3068\u3069\u3093\u306a\u610f\u5473\u306a\u306e\u3067\u3057\u3087\u3046\u3002\n```\n\u4eca\u898b\u308b\u3068\u76f8\u5f53\u306b\u3072\u3069\u3044\u6587\u3067\u3059\u306d\u3002\u8981\u3059\u308b\u306b\u3001neocomplcache\u306fVim\u7d44\u307f\u8fbc\u307f\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u3068\u306f\u9055\u3063\u3066\n\u591a\u304f\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u304a\u308a\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u6027\u3082\u3042\u308b\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u8a00\u3044\u305f\u3044\u306e\u3067\u3059\u3002\n. OK. I merged it.\n. I improved your description.\n. Sorry, neocomplcache used $\\w\\+ pattern.\nI fixed it.\n\nIs that noecomplcache contain keyword completion (i.e. original   completion in vim)?\n\nYes but neocomplcache keyword completion is different from Vim internal completion.\n. > Even I try import sys, neocomplcache does not complete correctly.\nI think it is feature.\nBecause, sys is builtin module. So cannot collect from include path.\n. And I installed pyside and tried it, but \"PySide\" is contained in candidates.\nSo this is not bug.\n. > Even I try import sys, neocomplcache does not complete correctly.\nI implemented this feature.\n. > Seems does not include PySide.\nThis is not neocomplcache problem. I recommend you to install PySide from Linux packages.\n. > Seems does not include PySide.\nYou can change include path manually. Vim's path option or g:neocomplcache_include_path option.\n. My paths are:\n,/usr/lib/python2.7,/usr/lib/python2.7/plat-linux2,/usr/lib/python2.7/lib-tk,/usr/lib/python2.7/lib-old,/usr/lib/python2.7/lib-dynload,/usr/local/lib/python2.7/dist-packages,/usr/lib/python2.7/dist-packages,/usr/lib/python2.7/dist-packages/PIL,/usr/lib/python2.7/dist-packages/gst-0.10,/usr/lib/python2.7/dist-packages/gtk-2.0,/usr/lib/python2.7/dist-packages/ubuntu-sso-client,/usr/lib/python2.7/dist-packages/ubuntuone-client,/usr/lib/python2.7/dist-packages/ubuntuone-control-panel,/usr/lib/python2.7/dist-packages/ubuntuone-couch,/usr/lib/python2.7/dist-packages/ubuntuone-installer,/usr/lib/python2.7/dist-packages/ubuntuone-storage-protocol\nI think you installed in PySide in python3. But neocomplcache searches python2 paths.\n. OK. I improved to detect include paths. Please update neocomplcache.\n. > But neocomplcache can not complete for self. No candidate.\nIt is not neocomplcache problem. This is omni_complete(python_complete) feature.\n. > Neocomplcache should have three member now.\n\nBut when I type self.set after that three lines.\nNeocomplcache only have one candidate setWindowTitle.\n\nBecause your lines were changed. neocomplcache check whether changed the lines.\n\nBut when I type self.set after that three lines.\nNeocomplcache only have one candidate setWindowTitle.\n\nI can't reappear it.\n. > I think neocomplcache should give out an option to set this caching timeout to speed up.\nWhat's speed up? neocomplcache caching timing problem is too hard.\nThere is not the most suitable solution\n. Thanks. I fixed it.\n. osyo\u3055\u3093\u306e.vimrc\u306f\u8a66\u305b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u79c1\u306f\u3053\u306e\u6700\u5c0f\u69cb\u6210\u3067\u8a66\u3057\u307e\u3057\u305f\u3002\nhttps://gist.github.com/3628411\n\u3057\u304b\u3057\u3001\u518d\u73fe\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n. \u3082\u3046\u3061\u3087\u3063\u3068.vimrc\u306e\u91cf\u3092\u6e1b\u3089\u3057\u3066\u898b\u307e\u3057\u305f\u3002\u305d\u3046\u3057\u3066\u539f\u56e0\u304c\u307b\u307c\u5224\u660e\u3002\nneocomplcache\u306frefresh=always\u306a\u306e\u3067\u3001neocomplcache\u306e\u88dc\u5b8c\u304c\u7d9a\u3051\u3066\u767a\u52d5\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n. \u4fee\u6b63\u3057\u3066\u898b\u307e\u3057\u305f\u3002\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. \u30e6\u30fc\u30b6\u30fc\u5074\u3067\u306e\u5bfe\u51e6\u306f\u7121\u7406\u3067\u3059\u3002\u30d7\u30e9\u30b0\u30a4\u30f3\u5074\u3067\u691c\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u3067\u8a66\u3057\u305f\u9650\u308a\u3001\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u767a\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n. \u3046\u30fc\u3093\u3001\u305f\u3057\u304b\u306b\u6319\u52d5\u304c\u5909\u3067\u3059\u306d\u3002\u6700\u5c0f\u69cb\u6210.vimrc\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u79c1\u306e\u3044\u3064\u3082\u306e.vimrc\u3067\u306f\u518d\u73fe\u3057\u306a\u3044\u3057\u2026\u2026\u3002\n\u6628\u65e5\u8a66\u3057\u305f\u3068\u304d\u306f\u52d5\u3044\u305f\u3093\u3060\u3051\u3069\u306a\u3002\n. \u3069\u3046\u3084\u3089\u3001\u81ea\u5206\u306e\u3044\u3064\u3082\u306e\u74b0\u5883\u3068\u6700\u5c0f\u69cb\u6210\u3067\u306fneocomplcache\u304c\u547c\u3070\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u5fae\u5999\u306b\u7570\u306a\u308b\u3088\u3046\u3067\u3059\u3002\u539f\u56e0\u306f\u4e0d\u660e\u3002\n\n\u4eca\u5ea6\u306f\u5e38\u306b\u30e6\u30fc\u30b6\u5b9a\u7fa9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4e00\u5fdc\u3001\u305d\u308c\u306f\u4fee\u6b63\u3057\u305f\u3093\u3067\u3059\u304cis_omni_complete()\u306e\u691c\u51fa\u5f8cVim\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u539f\u56e0\u304c\u4e0d\u660e\u3067\u3001\u305d\u308c\u306f\u76f4\u305b\u3066\u3044\u307e\u305b\u3093\u3002\n. \u3068\u308a\u3042\u3048\u305a\u3001\u5f37\u5236\u7684\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u306e\u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u9589\u3058\u308b\u3053\u3068\u3067\u5bfe\u51e6\u51fa\u6765\u307e\u3057\u305f\u3002\n\u3044\u3064\u3082\u306e.vimrc\uff0b\u6700\u5c0f\u69cb\u6210\u306e\u4e21\u65b9\u3067\u78ba\u8a8d\u3002manga_osyo\u3055\u3093\u306e\u307b\u3046\u3067\u3082\u78ba\u8a8d\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n. > 1\u3064\u539f\u56e0\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\ninoremap <expr><C-e> neocomplcache#cancel_popup()\n\u304c\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u30aa\u30e0\u30cb\u88dc\u5b8c\u3067\u306f\u306a\u304f\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068 str. \u3067\u300e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30ad\u30e3\u30f3\u300f\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002\n\u3053\u308c\u306f\u5225\u306b\u539f\u56e0\u304c\u3042\u308b\u306e\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306f\u3001neocomplcache\u306e\u7d42\u4e86\u5f8c\u306b\u306a\u305c\u304b\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u3002\n\u3072\u3068\u307e\u305a\u3001'complete'\u30aa\u30d7\u30b7\u30e7\u30f3\u304b\u3089\"i\"\u3092\u629c\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nset complete-=i\n. \u3053\u306e\u6319\u52d5\u81ea\u4f53\u304cVim\u306e\u30d0\u30b0\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u3061\u3087\u3063\u3068\u518d\u73fe\u65b9\u6cd5\u3092\u8abf\u3079\u3066\u3044\u307e\u3059\u3002\n. \u3059\u307f\u307e\u305b\u3093\u3001\u81ea\u5206\u304c\u66f8\u3044\u305f\u6700\u5c0f\u30b3\u30fc\u30c9(neocomplcache\u3092\u4f7f\u308f\u306a\u3044)\u3067\u306f\u518d\u73fe\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u2026\u2026\u3002\n\u88dc\u5b8c\u95a2\u6570\u5185\u3067return -3\u3092\u3059\u308b\u3068\u3001\u306a\u305c\u304b\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\u3001\nreturn -1\u3092\u3059\u308b\u3068completefunc\u304c\u547c\u3070\u308c\u308b\u3001return -2\u3092\u3059\u308b\u3068\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u306e\u3067-2\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002neocomplcache\u3092\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e00\u77ac\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u30e1\u30cb\u30e5\u30fc\u304c\u51fa\u308b\u306e\u3082\u89e3\u6d88\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u88dc\u5b8c\u72b6\u614b\u304c\u58ca\u308c\u3066\u3044\u308b\u6c17\u3082\u3057\u307e\u3059\u304c\u539f\u56e0\u306f\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n. \u4e86\u89e3\u3002\u539f\u56e0\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u304c\u4e0d\u5b89\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305aclose\u3057\u307e\u3059\u3002\n. \u306f\u3044\u3002\u3088\u3046\u3084\u304fneocomplcache-clang_complete\u304c\u30aa\u30ef\u30b3\u30f3\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n. \u539f\u56e0\u5224\u660e\u3057\u307e\u3057\u305f\u3002clang_complete\u306e\u81ea\u52d5\u88dc\u5b8c\u3092\u7121\u52b9\u306b\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059\u3002\nlet g:clang_complete_auto = 0\nlet g:clang_auto_select = 0\n\u3053\u3046\u3059\u308b\u3068\u3001\u4e0a\u8a18\u306e\u554f\u984c\u306f\u8d77\u3053\u3089\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3064\u307e\u308a\u79c1\u306e.vimrc\u306f\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u306e\u554f\u984c\u304c\u8d77\u3053\u3089\u306a\u304b\u3063\u305f\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002\n. clang_complete\u306e\u81ea\u52d5\u88dc\u5b8c\u3092\u7121\u52b9\u306b\u3059\u308b\u3068\u3001neocomplcache\u304c-3\u3092\u8fd4\u3057\u3066\u3082\u3001\u3046\u307e\u304f\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\u3069\u3046\u3084\u3089clang_complete\u5074\u306e\u81ea\u52d5\u88dc\u5b8c\u3068\u7af6\u5408\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306b\u95a2\u3057\u3066\u306fVim\u306e\u30d0\u30b0\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n. I think your g:neocomplcache_omni_patterns['go'] is wrong.\n. Thanks!\n. Thanks.\n. Thanks. I improved context filetype patterns.\n. In my environment, this issue is not occurred. I don't know why...\nIs your neocomplcache latest?\n. I fixed it.\n. I set this option.\nlet g:neocomplcache_enable_cursor_hold_i           = 1\nlet g:neocomplcache_enable_insert_char_pre         = 1\nAnd works it.\nPlease check by git bisect.\n. And what's your neocomplcache settings(problem occurred)?\n. This is not neocomplcache issue.\nIt is vimshell's issue. I fixed it. Please update vimshell and try it.\n. Thanks. I changed buffer_complete cache behavior.\nWould you check latest version?\n. I get it. I fixed.\n. It's clang_complete error.\nI recommend to you to disable clang_complete source.\n. It is neocomplcache-clang.\ng:neocomplcache_source_disable.clang_complete=1\n. This is feedkeys() feature. neocomplcache conflicts with auto input(keymapping).\nI can't fix it.\n. This issue may be fixed by g:neocomplcache_enable_cursor_hold_i or g:neocomplcache_enable_insert_char_pre.\n. So, I can't fix it.\n. > I have enabled both\nIf you enabled both, neocomplcache will enable g:neocomplcache_enable_insert_char_pre only.\n. OK.\n. You must set g:neocomplcache_omni_patterns.ruby variable.\n. Your tag file is bigger than g:neocomplcache_tags_caching_limit_file_size.\nIt's feature. I think you don't reading documentation...\n. > It seems like neocomplcache uses a fixed maximum of 100 lines when caching/scanning the current buffer \nNo. This routine is used for making cache in nofile buffer or non exists file.\nSo, I think this is not fetal problem.\nI don't like to add options.(Because neocomplcache has many many options...)\n\nTherefore I think that a configuration option for this is useful, and I suggest using a default of 1000 instead of 100.\n\nOK. I changed default value.\n. And you can use :NeoComplCacheCachingBuffer command manually.\n. Because, in neocomplcache (and some my other plugins) create temporary directories and files in your home directory.\nIf you use sudo command, Vim creates the directories and files in root permission in your home directories.\nSo you can't delete them in default permission.\nI can't modify the behavior.\n. > Well, but in my case it is the expected behavior: I am creating a new home for a \"root user\" and the files should get saved with root permissions therein.\nneocomplcache checks your home directory. But warned why?\nelseif $SUDO_USER != '' && $USER !=# $SUDO_USER\n      \\ && $HOME !=# expand('~'.$USER)\n\nI know that there might be problems when using \"sudo vim\" directly, but that's a general problem and nothing neocomplcache should warn about - imagine if all other plugins creating temporary files would behave in the same way.\n\nYes. But in sudo vim, neocomplcache must be disable. So neocomplcache must display messages...\n. OK. I added it.\n. I think the wiki is out of date. Register completion was deleted.\nI recommend to you to use :Unite register command instead.\n. Why do you think it? I don't know. Please explain it.\n. OK. I get it. I fixed.\n. OK.\n. OK. I merged and improved.\n. It is g:neocomplcache_source_disable.\n\" Examples:\n    if !exists('g:neocomplcache_source_disable')\n      let g:neocomplcache_source_disable = {}\n    endif\n    let g:neocomplcache_source_disable.member_complete = 1\n    let g:neocomplcache_source_disable.include_complete = 1\n. OK. I put it in todo list.\n. I added g:neocomplcache_wildcard_characters option.\nYou can implement the dash completion like this:\nif !exists('g:neocomplcache_wildcard_characters')\n  let g:neocomplcache_wildcard_characters = {}\nendif\nlet g:neocomplcache_wildcard_characters._ = '-'\n. > However, l_y -> [B] love_you while l-y -> nothing.\nNo, It works. I think you didn't update neocomplcache.\n. Yes. It is correct.\n. I tested your setting but both works.\n\nHowever, l_y -> [B] love_you while l-y -> nothing.\n\nIf I input \"l-y\", it will complete \"love_you\".\n. It is neocomplcache#keyword_filter().\n. I fixed the problem.\n. I think you didn't install rsense omnifunction.\nNeocomplcache can't check it.\n. > I put that rsense.vim file in .vim\nYou must put rsense.vim in .vim/plugin directory.\n. Yes. You can customize keyword pattern, but I don't know the pattern contains umlauts.\nBelow code may be work.\nlet g:neocomplcache_keyword_patterns.php='</\\?\\%(\\h[[:alnum:]_-]*\\s*\\)\\?\\%(/\\?>\\)\\?\\|\\$\\h\\w*\\|\\k\\+*\\%(\\%(\\\\\\|::\\)\\w*\\)*'\n. \\k\\+ pattern contains multibyte characters so I don't like it.\n. It's Japanese. I don't want to complete Japanese words in neocomplcache.\n. > Could you add a g:neocomplcache_keyword_characters variable then, which would default to \\h\\w*, but could be set to e.g. \\k+ by the user? (similar to g:neocomplcache_wildcard_characters)\nNo. It's imposibble.\nYou must overwrite the patterns.\n. Not Just.\nIt contains many many keys. And some other options uses \"\\h\\w*\", not so easy!!\nAnd I don't like to add option. \n. Did you see g:neocomplcache_keyword_patterns initialization?\ng:neocomplcache_keyword_patterns pattern is complex.\nNot just \\h\\w*.\n. What's the keyword(like \\h\\w*) pattern in below pattern? I don't know...\ncall neocomplcache#set_dictionary_helper(g:neocomplcache_keyword_patterns,\n        \\'tex',\n        \\'\\\\\\a{\\a\\{1,2}}\\|\\\\[[:alpha:]@][[:alnum:]@]*'.\n        \\'\\%({\\%([[:alnum:]:_]\\+\\*\\?}\\?\\)\\?\\)\\?\\|\\a[[:alnum:]:_]*\\*\\?')\nCan you substitute the pattern easily?\nI think you think about only major programing language(not all keyword patterns).\n. OK. I cannot merge it, but I improved the routine.\n. I deleted it.\n. > but it will force expand that snips whenever it could, how to do that on when I decide to expand it ?\nIt is not. But you can use this mapping instead.\nimap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_jump)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n. > could I ask what is the difference between neocomplcache_snippets_expand and neocomplcache_snippets_jump?? I cannot feel it\nneocomplcache_snippets_jump tries jump before expand, but neocomplcache_snippets_expand tries expand before jump.\n. I think it is OK.\n. I tested below mapping and g:neocomplcache_enable_insert_char_pre=1.\nBut not happend this problem.\n. I want to know minimum .vimrc settings happening this problem.\n. No comment.\n. I improved :NeoComplCacheCachingBuffer behavior.\nIt can be used for non-existent buffer.\n. > One problem appears to be that \":set nobuflisted\" causes \"bufnr()\" to return -1, which is then used below.\nNo. In my environment, bufnr() do not return -1.\nAnd I used :setlocal nobuflisted. Not :set nobuflisted.\n\nBut have you verified that it works?\n\nI verified works!\n. > Another issue is that there might be a \"swap file already exists\" error, which is suppressed because of using \"silent\".\nOK. I fixed it.\n. > Another idea might be to setup a autocommand for this file (e.g. BufReadPre) to handle loading of (e.g. by invoking the caching from there).\nWhy? I don't know.\n. > One problem appears to be that \":set nobuflisted\" causes \"bufnr()\" to return -1, which is then used below.\nYou can check it easily.\n1: :setlocal nobuflisted\n2: :echo bufnr(bufname('%')\n3: What's result? (Non -1...)\n. > What do you think about setting 'readonly' when loading the new file?\nNo.\n. This is feature.  Cf: :help g:neocomplcache_same_filetype_lists\nneocomplcache completes from same filetype buffers.\n. > I can manually complete the word using ^N.\nThis is Vim's builtin completion. Not neocomplcache completion.\n. if !exists('g:neocomplcache_same_filetype_lists')\n  let g:neocomplcache_same_filetype_lists = {}\nendif\n\" In c buffers, completes from cpp and d buffers.\nlet g:neocomplcache_same_filetype_lists.c = 'cpp,d'\n\" In cpp buffers, completes from c buffers.\nlet g:neocomplcache_same_filetype_lists.cpp = 'c'\n\" In gitconfig buffers, completes from all buffers.\nlet g:neocomplcache_same_filetype_lists.gitconfig = '_'\n. > I am using let g:neocomplcache_same_filetype_lists.gitcommit = '' now, but I am really looking for is a g:neocomplcache_same_filetype_lists._DEFAULT setting.\nIt is not. OK. I examine it.\n. I implemented the behavior. If the key is \"_\", it used for default.\n. > From looking at the code it appears to still be not possible to say \"I want to complete from all other filetypes, for all filetypes\", is it?\nYou can.\nlet g:neocomplcache_same_filetype_lists = {}\nlet g:neocomplcache_same_filetype_list._ = '_'\n. OK. I fixed it.\n. I get the problem. But your suggestion is to break compatiblity and to change many codes.\nSo, I don't change it.\n. I added neocomplcache#disable_dictionary().\nPlease use it.\n. Yes. It disables neocomplcache default dictionary initialization.\nExample:\ncall neocomplcache#disable_default_dictionary('g:neocomplcache_same_filetype_lists')\n. I fixed it.\n. I don't know your problem. Please explain to me in detail.\n. I want to know the way which I can reappear it.\n. I tested and worked it.\n. The source completion length is not changed dynamically.\nBecause, this value is used to optimise in initialization.\n. You should use :NeoComplCacheAutoCompletionLength instead of it.\n. OK. I fixed it.\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. Sorry, I fixed it now.\n. > Is this another \"feature\" to have different handling of case for buffer types?\nYes. This is g:neocomplcache_text_mode_filetypes feature.\nYou can disable it by following code.\nlet g:neocomplcache_text_mode_filetypes.gitcommit = 0\n. > icase in text mode appears to be introduced in 4619d3b:\nNo. icase has nothing to do with this problem.\nIn text mode, neocomplcache supports word convertion to write English.\nFor example, if you input \"Fo\", neocomplcache will convert candidate \"foo\" to \"Foo\".  If you input \"foo\", neocomplcache will convert candidate \"FooBar\" to \"foobar\". If you input \"FO\", neocomplcache will convert candidate \"foo\" to \"FOO\".\n. OK. I know your demand. But your suggestion is hard to implemnt.\n. I improved for text mode filetype behavior. Text mode convetion is used for only \"foobar\" or \"Foobar\" or \"FOOBAR\" words. Not \"fooBar\" or \"FooBar\".\n. g:neocomplcache_omni_patterns is initialized in first completion. Not in Vim's initialization.\nBecause to reduce startup time.\n. > I checked out your source code, and I found you commented out the 'ruby' omni_pattern, then I use it in vimrc option g:neocomplcache_omni_patterns['ruby'], but I found it can not work. can you fix it (or improve that ruby omni_pattern) ?\nOK. I will check.\n. > how to append setting value to neocomplcache option default dictionary value instead of override like upper ? (upper: let g:neocomplcache_omni_patterns['ruby'])\nNo. You must overwrite them.\n. > let g:neocomplcache_omni_patterns['ruby'] = '[^. \\t].\\w*'\nI set the option and worked.\n. OK. I wait until sent your patch.\n. You can disable the error by g:neocomplcache_force_overwrite_completefunc variable to 1.\n. > But I can not find any condition do set this, it does not has filetype, and other things can let I set omni_function for neocomplcache. maybe buffer name ?\ng:neocomplcache_omni_patterns's key is filetype or omni function name(Example: RDocAutoComplete).\nAnd, you can set omnifunctions manually by g:neocomplcache_omni_functions variable.\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. > The cursor is at |, And the io. comes from neocomplcache complete candidate.\n\nsome other candidates do not have . after complete string. I want to know whether it comes from neocomplcache, or comes from Vim python omni complete.\n\nNo. In my environment, io is not completed.\nAnd, neocomplcache wouldn't append \".\".\n. I need your screenshot. neocomplcache displays candidatessource name.\n. > like for upper case, after I select io. candidate, neocomplcache should continue auto popup completion menu without input . pattern.\nneocomplcache continues auto popup. But if you use (neocomplcache_close_popup), neocomplcache don't complete it automatically.\n. OK. This is pythoncomplete feature.\n. I improved it.\n. > I want neocomplcache continue auto popup after I select candidate os in menu (here it complete with os.), then it becomes subprocess.os. here neocomplcache seems can not found a thing like a trigger to auto popup menu.\nWhat's your \"select candidate\"?\nTo auto popup menu, you use <Plug>(neocomplcache_close_popup) not just <C-n>.\n. > but will it be possible to use auto popup continuously ?\nYes.\n\nThere is an confuse in my brain, it is why the os in candidates list is different ? the menu shows os, but actually input is os., if like this, maybe neocomplcache can use os instead of os. to solve this problem, but this is really really a bad idea.\n\nThis is Vim's feature. abbr pattern is used for displaying word, but word is used for completing words.\n. > or let neocomplcache remove the dot .. Or I will let pythoncomplete.vim maintainer add an option for this.\nNo. I hate wicked option.\n. > I set like this inoremap   neocomplcache#close_popup().\"\" , this setting will remove the dot ., but when I input the dot ., neocomplcache does not raise the popup.\nBecause, neocomplcache#close_popup() closes popup. This is feature.\n. You are confusing. neocomplcache#close_popup() closes popup, so neocomplcache don't popup again.\nBut inputted \".\", neocomplcache will trigger specially. So popup again.\n. > There is on entry it said is for class definition, maybe it can be set in neocomplcache context_complete option.\nNo. I think user can set the option manually.\n\nand I checked the plugin vim-ruby.vim's source code. found this.\n\nYes. I can improve ruby omnicompletion pattern. But ruby completion is heavy.\nneocomplcache should not call it so a lot.\n. > If it is heavy, what about add an FAQ, suggest user disable other sources, like for other source that do not about Ruby, this maybe help performance.\nNo. The heavy is omnifunc. Not other sources.\n. You can set neocomplcache omni patterns manually. But it is not default.\n. I improved the documentation(FAQ section).\nYou can set g:neocomplcache_force_omni_patterns manually.\n. > I found one interesting thing \"Cascade popup menu\" in Emacs.\n\nI do not know whether Vim support this.\n\nIt is impossible. Vim does not support it.\nneocomplcache uses Vim internal popup menu system.\n. > I thought one good situation to use \"cascade popup menu\", e.g. when two snippets has same trigger, use this feature will be cool.\nneocomplcache snippets_complete source overwrites same trigger snippet.\n. Beacause, it is neocomplcache snippets_complete feature. Not neocomplcache feature.\nIn neocomplcache-snippets-complete In neosnippet branch, it is working.\n. I added <Plug>(neocomplcache_start_unite_snippet) in master branch.\n\nare you seriously want to improve neocomplcache-snippets-complete now?\n\nYes!\n. > it does lack some of the features (live update and no ugly placeholder for example) compared with ultisnip or xptemplate.\nIt is in my todo list.\n. > For now, only neosnippet support to see snippet trigger in popup menu, but it is not powerful enough.\nNo. neosnippet supports all snippet trigger now(difference from snippets_complete).\n. > All snippet rigger just in neosnippet ? or support other snippet engines like ultisnips and snipmate too ?\nneosnippet supports snipMate snippet file, but does not support ultisnips snippet.\nI think the \"all\" is all neosnippet snippets file.\n. > There is a difficult to support UltiSnips, UltiSnips support regex in trigger, like \"re(re)?\" r, I think this is almost impossible to show up in popup menu.\nUltisnips depends on python interface and uses python regex. neosnippet cannot support it.\n. No. I didn't change file format.\nAnd, I didn't catch same report now from other people.\nI think it is your environment problem.\n. \u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n. \u306f\u3044\u3002\u305d\u3046\u3067\u3059\u3002\n. > set completefunc=CompleteR\nYou must set g:neocomplcache_enable_force_overwrite_completefunc = 1 in your .vimrc.\nAnd, \nlet g:neocomplcache_omni_functions['r'] = 'rcomplete#CompleteR'\n. > (Can add this into neocomplcache FAQ).\nThe pull request is well come.\n\nI do not know how to set g:neocomplcache_omni_patterns['r'] option based on upper pattern.\n\nlet g:neocomplcache_omni_patterns['r']= '[[:alnum:].\\\\]\\+'\nBut I think the pattern is too slow. You should customize the pattern.\n. Did you see the original code?\nlet line = getline('.')\n    let start = col('.') - 1\n    while start > 0 && (line[start - 1] =~ '\\a' || line[start - 1] =~ '\\.' || line[start - 1] =~ '\\$' || line[start - 1] =~ '\\d')\n      let start -= 1\n    endwhile\n    return start\nI think this is same to return match(getline('.')[ : col('.')-1], '[[:alnum:].\\\\]\\+$').\nAnd the author's Vim script level is not high.\n. Thanks.\n. Its' '[[:alpha:]_.][[:alnum:]_.]*'.\nYou should learn Vim script...\n. No. In my environment, <ESC> always returns to normal mode. I think this is your setting problem.\n. Please update neocomplcache.\nIn my environment, this error is not occurred.\n. I fixed it.\n. In my environment fixed the error. Please explain reproduction ways to me.\n. > What I type is let g:neocom\nIn my environment, works.\n. > If I want to use let g:neocomplcache_source_completion_length['vim_complete'] = 1, should I make the g:neocomplcache_auto_completion_start_length option value smaller than the source complete length ?\nI changed it, but the error is not occurred.\n. I updated neocomplcache. Please check it.\n. I tested your settings, but the error was not occurred. But your settings are too slow...\n. > let g:neocomplcache_source_completion_length['include_complete'] = 0\nYou shouldn't set completion_length less than 2.\nneocomplcache searches from all candidates!\n. > not solved. I see. I'm sure must be somewhere is wrong in my vimrc. I will find it. And by the way, my neocomplcache setting is too slow, so what should I do to speed up ? reduce complete length ? or remove some options ?\nIn my environment, using your settings works. Why?\nI think you uses not latest neocomplcache...\n. Well, previous version has errors but in latest version I fixed.\nCan you reinstall neocomplcache?\n. > I have try to debug vimrc. (remove all plugins except neocomplcache, and all useless vim options). Still can not find out why and where.\nIn my environment, works and I don't get the errors from other people(why?).\n. Please send your settings to me. I will check.\n. My .vimrc is https://github.com/Shougo/shougo-s-github/blob/master/vim/.vimrc\n. > Can you show me your vimrc ? and can you tell me how to debug neocomplcache ? for example, use Git to debug neocomplcache. help me to locate the problem in my vimrc and in neocomplcache.\nIn neocomplcache#sources#vim_complete#helper#command in vim_complete/helper.vim\n```\n    \" echomsg string(s:internal_candidates_list.commands)[: 1000]\n    \" echomsg string(s:global_candidates_list.commands)[: 1000]\nlet list = neocomplcache#dictionary_filter(\n      \\ s:internal_candidates_list.commands, a:cur_keyword_str)\n      \\ + neocomplcache#dictionary_filter(\n      \\ s:global_candidates_list.commands, a:cur_keyword_str)\n\n```\nThis is debug message.\nI think s:global_candidates_list.commands is broken.\nNote : s:internal_candidate_list.commands and s:global_candidates_list.commands must be dictionary not list.\n. Second output was list. So your error was occurred.\nBut in my environment, both are dictionary.\n. I found the error and fixed it. Please update.\n. > ```\n\nlet cur_keyword_str = len(result.cur_keyword_str) == 0 ? '' : result.cur_keyword_str\n```\n\nWhy did you change it? len(result.cur_keyword_str) == 0 equals empty string(\"\"), so this is same.\nlet cur_keyword_str = result.cur_keyword_str\n\nI tried to invoke manual completion after '.' or '->', nothing happened, ran :messages and saw error messages saying:\n'Error occured calling omnifunction:  ClangComplete'. \n\nI want to know all error messages.\n. OK. I'm confusing too.\nI fixed it.\n. No. I reject it(Because optimization). To filter candidates, you must use unite.vim by <Plug>(neocomplcache_start_unite_complete)/\n. > In this window. I hope neocomplcache only complete Vim commands and arguments and functions etc. not include others like snippets.\nNo. I don't think so. But you can customize the behavior using g:neocomplcache_sources_list.\n. Or you can use :NeoComplCacheLockSource command. This is local to each buffer.\n. I added b:neocomplcache_sources_list.\n\" Examples:\n    \" In cmdwin, only use vim_complete source.\n    autocmd CmdWinEnter let b:neocomplcache_sources_list = ['vim_complete']\n. And, vim_complete is not omnifunc. You are confusing.\n. I tested it:\nautocmd CmdwinEnter * let b:neocomplcache_sources_list = ['vim_complete']\nAnd it works. What's you \"not work\"?\n. Oh, sorry.\n. I fixed it.\n. Please read FAQ section in neocomplcache...\nQ: Does not work with clang_complete.\nA: Please try below settings.\nif !exists('g:neocomplcache_force_omni_patterns')\n  let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.c =\n      \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\nlet g:neocomplcache_force_omni_patterns.cpp =\n      \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:clang_complete_auto = 0\nlet g:clang_auto_select = 0\n\"let g:clang_use_library   = 1\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. If g:neocomplcache_sources_list is dictionary, it is not \"sources_list\". So I reject your suggestion.\n\nBecause I only want to disable in Python filetype, so I can not use option let g:neocomplcache_source_disable. it is global.\n\nOK. I will improve it.\n. I added g:neocomplcache_disabled_sources_list.\n\" Examples:\n        if !exists('g:neocomplcache_disabled_sources_list')\n          let g:neocomplcache_disabled_sources_list = {}\n        endif\n        \" Disable dictionary_complete in python filetype.\n        let g:neocomplcache_disabled_sources_list.python =\n        \\ ['dictionary_complete']\n. Thanks. I fixed.\n. Thanks.\n. You must clone the repository with http_s_.\ngit clone https://github.com/Shougo/neocomplcache.git\nAnd, you must set this variables.\nlet g:neobundle#types#git#default_protocol='https'\n. > I'm behind a proxy in my highscool so the htttps/git protocol are blocked\nOh. I missed.\nBut I succeeded the command. So this is not neobundle issue. \n. No. Your change is wrong. I reject it.\nBut the skip behavior may be improved.\nCan you tell me the not working example? I will check it.\n. > With this setting, neocomplcache will call omnifunc (ClangComplete) when the length of current text is more than 1 but less than g:neocomplcache_auto_completion_start_length.\nSorry. I fixed. It is omni_patterns problem.\nAnd I recommend this setting:\nlet g:neocomplcache_force_omni_patterns.objc =\n      \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\n. To fix it,\nlet g:neocomplcache_force_omni_patterns.objc =\n      \\ '\\h\\w\\+\\|[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\n. OK.\nlet g:neocomplcache_force_omni_patterns.objc =\n      \\ '\\h\\w\\{2,\\}\\|[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\n. > I'm having an issue enabling neocomplcache similar to Shougo/neocomplcache#194.\nNo. It is not relative with Shougo/neocomplcache#194.\n\nI have added /Applications/MacVim.app/Contents/MacOS to my PATH, and which MacVim returns /Applications/MacVim.app/Contents/MacOS/MacVim.\n\nPlease check :echo vimproc#get_command_name('vim') result.\nAnd please send me to your .vimrc.\nI will check it.\n. I have posted the error in vital.vim(Japanese).\nhttps://github.com/vim-jp/vital.vim/issues/38\n. Can you delete 'wildignore' option settings? It may cause the problem.\n. > I think connection10 should below connect9 instead of upper than connect2.\n\nI tried to improve in neocomplcache source code.\n\nIt is difficult. Because the compare function is fully optimized.\nAnd I think your functions behavior does not seem to be a merit that much.\n. > Maybe I can ask on StackOverflow about this compare algorithm. :)\nOK. I will wait.\n\nActually neocomplcache only has that default compare function neocomplcache#compare_sort().\nIf neocomplcache can provides other compare_func, even it is heavy. (Maybe just put it in FAQ, instead of neocomplcache source code).\n\nI added FAQ section.\n. I added 'neocomplcache#compare_human' function.\nlet g:neocomplcache_compare_function = 'neocomplcache#compare_human'\n. Please read FAQ section.\n```\nQ: I like moving cursor by cursor-keys. But neocomplcache popups menus...\nA: Please set this in your .vimrc. Note that this feature requires Vim 7.3.418\nor later.\n    let g:neocomplcache_enable_insert_char_pre = 1\n``\n. I fixed it. Please check.\n. \u60c5\u5831\u304c\u5c11\u306a\u3044\u3067\u3059\u3002\u300c\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u5168\u6587\u300d\u3092\u304f\u3060\u3055\u3044\u3002:Unite output:messages`\u3067\u53d6\u5f97\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u60c5\u5831\u3067\u306f\u3001\u3069\u3053\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u5168\u6587\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3001\u3069\u3053\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u304c\u308f\u304b\u308a\u3001\u65e9\u671f\u306e\u554f\u984c\u89e3\u6c7a\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002\n\u79c1\u306f\u30a8\u30b9\u30d1\u30fc\u3067\u306f\u7121\u3044\u306e\u3067\u3001\u3053\u306e\u60c5\u5831\u3060\u3051\u3067\u4fee\u6b63\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n. > \u518d\u73fe\u3059\u308b\u306e\u306fvimshell\u4f7f\u7528\u4e2d\u3084vim script\u7de8\u96c6\u4e2d\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3067\u518d\u73fe\u3059\u308b\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\n\u3053\u308c\u3001\u4e00\u56de\u76ee\u306e\u88dc\u5b8c\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u307e\u3059\u304b\uff1f \n. \u524a\u9664\u3055\u308c\u305f\u306f\u305a\u306ekeyword_complete\u3092\u8aad\u307f\u306b\u884c\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u304a\u304b\u3057\u304f\u306a\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\u4e00\u5ea6neocomplcache\u3092\u524a\u9664\u3057\u3001\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\n. OK.\n. set completeopt-=preview\nIt is not neocomplcache problem...\n. It is g:neocomplcache_max_list.\n. \u4e86\u89e3\u3067\u3059\u3002\n. OK. I will test.\n\nI use this plugin, and vim freeze after i input the following code, . neocomplecachev7.1 no this bug;\n\nCan you search the bad commit by git bisect?\n. I tested the code. And worked....\nCan you check it by minimal .vimrc and Vim plugins?\n. Are you using this settings?\n\" For clang_complete.\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.c =\n      \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\nlet g:neocomplcache_force_omni_patterns.cpp =\n      \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:clang_complete_auto = 0\nlet g:clang_auto_select = 0\nlet g:clang_use_library   = 1\nAnd please explain your .vimrc to me.\n. OK. This is clang_complete problem. Not neocomplcache.\n. > \u5185\u5074\u3067fnamemodify(, ':p')\u3057\u3066\u3044\u305f\u3060\u3051\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n. > \u305d\u308c\u3068\u3001\u30e6\u30fc\u30b6\u304c\u8ffd\u52a0\u3067\u304d\u308b\u306e\u306fword\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u88dc\u5b8c\u5019\u88dc\u306b\u6ce8\u91c8\u3092\u4ed8\u3051\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3053\u308c\u306f\u691c\u8a0e\u4e2d\u3002\u4eca\u306e\u5b9f\u88c5\u3060\u3068\u3001\u4e2d\u8eab\u306e\u691c\u7d22\u304cbuffer_complete\u3068\u5b8c\u5168\u306b\u540c\u3058\u3060\u304b\u3089\u306a\u306e\u3067\u3059\u3002\n\u305f\u3060\u3001\u3053\u308c\u3092\u3084\u308b\u3068\u73fe\u5728\u3068\u4e92\u63db\u6027\u304c\u306a\u304f\u306a\u308b\uff08\u4f8b\u3048\u3070\u3001vimshell\u306e\u30d2\u30b9\u30c8\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u305d\u306e\u307e\u307e\u8f9e\u66f8\u3068\u3057\u3066\u4f7f\u3048\u306a\u3044\uff09\u4e0a\u306b\u4fee\u6b63\u91cf\u304c\u591a\u3044\u306e\u304c\u30cd\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n\u3055\u3089\u306b\u8a00\u3044\u307e\u3059\u3068\u3001\u88dc\u5b8c\u524d\u306e\u6587\u8108\uff08\u6587\u5b57\u5217\uff09\u304c.\u306e\u3068\u304d\u3001\u306a\u3069\u3001\u7d30\u304b\u3044\u6761\u4ef6\u3092\u4ed8\u3051\u3066\u30e6\u30fc\u30b6\u5b9a\u7fa9\u88dc\u5b8c\u3092\u4f5c\u308b\u65b9\u6cd5\u306f\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u305d\u3053\u307e\u3067\u3084\u308b\u306a\u3089\u8f9e\u66f8\u88dc\u5b8c\u3067\u3084\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u306f\uff1f neocomplcache\u306esource\u306b\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3067\u3059\u3002\n. > neocomplecache\u306esource\u306f\u3069\u3046\u3084\u3063\u3066\u4f5c\u308c\u3070\u3044\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\uff08\u3069\u3053\u306b\u30d5\u30a1\u30a4\u30eb\u3069\u3046\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u3001\u66f8\u5f0f\u306f\u3069\u3046\u3067\u3001\u3069\u3046\u3084\u3063\u3066\u767b\u9332\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09\n\nVim\u30c6\u30af\u30cb\u30c3\u30af\u30d0\u30a4\u30d6\u30eb\u306b\u306f\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\u60c5\u5831\u304c\u53e4\u3044\u3067\u3059\u304c\u3001Vim Hacks\u306b\u3082\u4e00\u5fdc\u6709\u308a\u307e\u3059\u3002\nhttp://vim-users.jp/2009/10/hack93/\n\u672c\u6765\u306a\u3089\u3001neocomplcache\u306esource\u7528\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u304c\u3001\u5fd9\u3057\u3059\u304e\u3066\u5168\u304f\u8ffd\u3044\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u3002\n\u65e2\u5b58\u306esource\u3092\u8aad\u3080\u65b9\u304c\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n. I improved it. Please check it.\n. > The omnifunc is invalid in neocomplcache context filetype now.\nYes. You must load omnifunc(autoload/rubycomplete.vim) manually. Ex: :autocmd\nBecause, neocomplcache doesn't know where it is.\n. I think you failed RSense installation.\nRSenseCompleteFunction function is loaded automatically in plugin/rsense.vim.\n. Please check :echo exists('*RSenseCompleteFunction') in wiki file and in ruby file.\nIt may be vimwiki's problem.\n\nMaybe the problem is because I set both omni_patterns and force_omni_patterns ?\n\nNo.\n\nAnd I use vim-rsense plugin. \n\nWhere is your vim-rsense plugin?\n. Please check in other context ruby filetype. Example: Vim script ruby interface code.\n. Please check other omnifunc(ex: rubycomplete#Complete).\n. I tested and works now in rubycomplete. It won't delete previous text.\nWhy?\n. I used latest version of rubycomplete(Vim built-in).\n. My Vim is 7.3.712. Your Vim is too old.\n. I found your problem.\n\nlet g:neocomplcache_omni_functions['ruby'] = 'RsenseCompleteFunction'\n\n\"RsenseCompleteFunction\" is invalid name. \"RSenseCompleteFunction\" is correct.\nSo, this is not bug.\n. > And This can work correct in a normal ruby file.\nBecause you set g:neocomplcache_force_omni_patterns. It uses 'omnifunc' option instead of g:neocomplcache_omni_functions.\nBut I will fix the behavior.\n. Can you checked <C-x><C-o> after set 'omnifunc' manually?\nRsense parses current file. So, it may fail parse(vimwiki file is not correct ruby script). I think it is RSense's feature.\n. > I think neocomplcache context filetypes mode should only pass the context between the start marker and end marker. then it will work correctly.\nI cannot implement it. This is RSense feature. I cannot hack Vim...\n. Yes. Can you improve them and send pull requests?\n. I will add neocomplcache#get_context_filetype_range().\nIt returns [start, end].\n. And I refactored context filetype routine. This may take much time.\n. I added it.\n. > The result is wrong. (Maybe because I execute it in normal mode, that's why I get [1,7] ?)\nI fixed. Please check it.\n. > ```\n\nif !empty(neocomplcache#get_context_filetype_range())\n```\n\nYou should use exists('*neocomplcache#get_context_filetype_range') instead.\n. I fixed it again.\n. > The start, end number is correct now, but neocomplcache do not popup candidates still.\n\nI guess it is because this two commits:\n\nWhy did you think? Did you check the commits?\n. You should check RSenseCompletefunction is called.\n. I fixed the behavior. Please check it.\n. > But neocomplcache popup menu just does not raise.\n\nEverything I can thought is correct now. weird.\n\nI think it is RSense problem. I cannot fix it...\n. I changed neocomplcache#get_context_filetype_range() behavior. Please check it.\n. I tested RSense but not worked RSense server.\n. > I checked, not work too. very weird. should I post issue to RSense project ?\nYes. I recommend it.\n. Thanks.\n. I fixed the problem.\n. Your RSense changes are imcomplete.\nI added neocomplcche RSense source. Please use it.\nhttps://github.com/Shougo/neocomplcache-rsense\n. You must install vimproc plugin.\nAnd is it worked in normal ruby script?\n. I think neocomplcache-rsense conflicts with your settings.\nCan you check it in minimal .vimrc?\nYou must remove g:neocomplcahe_force_omni_patterns['ruby'] settings.\n. Yes. I'm very very busy in a month. But I haven't forgot it.\nI'll check later.\n. I fixed it.\n. I fixed it.\n. This is bug. I fixed it.\n. Thanks. I fixed the error.\nAnd you can initialize include_complete manually with neocomplcache#initialize().\n. Sorry, I fixed it again.\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. Thanks.\n. > Why those candidates which in \"after\" are not displayed in \"before\" popup menu ?\n:help g:neocomplcache_source_completion_length\n. I fixed it.\n. \u624b\u5143\u3067\u4fee\u6b63\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067close\u3057\u307e\u3059\n. The error is occurred in latest version?\n. > E126; Missing :enfunction\n\nline 2830.\n\nWhat's the filename?\nI restarted Vim, but the error is not occurred.\nAnd I was not received same error from other people.\n. Please clone from repository. I think you changes was missed...\n. I fixed it.\n. I fixed it in latest version.\n. OK. But what's your recommend mappings?\nIn insert mode, mapping candidates are poor. So if you map keys, it will overwrite other keys.\n. No. But I can add the option.\n. And, this is neosnippet feature. Not neocomplcache feature. So I will close it.\n. I think you use Terminal Vim.\nYou should use <C-@> instead of <C-space>.\n. \u5927\u4f53\u306e\u539f\u56e0\u304c\u4e88\u60f3\u3067\u304d\u308b\u306e\u3067\u3001\u4fee\u6b63\u3057\u3066\u898b\u307e\u3057\u305f\u3002\u3061\u3087\u3063\u3068\u66f4\u65b0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\n. What's your desired thing? You can complete it from dictionary.\n\nI would like to see completion of php functions similar to the vim_complete method.\n\nYou can create neocomplcache source but nothing English documentation for it.\n. OK. I will add it in todo list.\n. It is already implemented.\n. What's the filetype?\nAnd what's your g:neocomplcache_keyword_patterns[{the filetype}]?\nIf I don't know the information, I cannot reproduce it.\nI want to know your neocomplcache settings...\n. In my environment, this behavior is not found.\nPlease check it by minimal config and plugins(neocomplcache only).\n. I set the option. but this behavior is not happened.\nCan you check neocomplcache code?\n. https://github.com/Shougo/neocomplcache/issues/315\nI think it is same problem.\nCan you check s:get_cur_text()?\n. Your .vimrc is too long.\nPlease reduce it.\n. What's your Vim's version? I'm using 7.3.744 in Ubuntu.\nI recommend for you to update Vim.\n. > Vim version: VIM - Vi IMproved 7.3 Included patches: 1-547 On Ubuntu\nToo old...\n. > or you use source code to compile ?\nYes.\n. Oh, your .vimrc is still big. Because you set many neocomplcache settings.\nAnd please teach for me to reproduction case from Vim starting.\n. I reduced your setings.\nlet g:neocomplcache_enable_at_startup = 1 \" enable at startup time.\n            let g:neocomplcache_enable_ignore_case = 1 \" ignorecase\n            let g:neocomplcache_enable_insert_char_pre = 1 \" 'InsertCharPre' event\n            let g:neocomplcache_enable_prefetch = 1\n. I fixed it.\n. Thanks.\n. :help \\%(\n\\%(\\)   A pattern enclosed by escaped parentheses.  */\\%(\\)* */\\%(* *E53*\n    Just like \\(\\), but without counting it as a sub-expression.  This\n    allows using more groups and it's a little bit faster.\n    {not in Vi}\nI use \\%(To optimize the pattern.\n. Thanks your reporting.\nI'm the author of neocomplcache.\nI will check it later.\n. Can you tell me your .vimrc settings? I don't know about hard text wrapping settings.\n. What's your neocomplcache settings? And Vim versions?\nThis behavior is not appeared in my environment.\n. OK. I know the way. Can you show me your minimal .vimrc? I must reproduce in your .vimrc.\n. And you should use latest Vim(many patches included) instead vanilla of Vim 7.3.\n. Thanks. I will check.\n. I fixed for the textwidth problem. Please check it.\n. Hmmm...\nCan you reduce your .vimrc less than 100?\nYou .vimrc is too long and too hard to try it.\n\nit was also setlocal formatoptions=c,r,q,a in ~/.vim/after/ftplugin/vim.vim.\n\nYou missed formatoptions.\nsetlocal formatoptions=crqa\nis correct(comma is irregal).\n. I and other people tested your .vimrc, but works. So I close it. I can't fix.\n. What's is your minimal .vimrc?\nPlease try minimal .vimrc with only neocomplcache plugin.\nI cannot reproduce it...\n. In first, I don't recommend to set 'a' flag. Because this feature may confilict with auto completion.\n. Sorry, I fixed it.\n. :-)\n. I thik other plugins(vim-endwise or SuperTab etc...) overwrites <CR> mappings.\nPlease read FAQ section.\n```\nQ:  mapping conflicts with |SuperTab| or |endwise| plugins.\nA: Please try below settings.\n\n\" <CR>: close popup and save indent.\ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\nfunction! s:my_cr_function()\n  return neocomplcache#smart_close_popup() . \"\\<CR>\"\n  \" For no inserting <CR> key.\n  \"return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\nendfunction\n\n``\n. You can useg:neocomplcache_caching_limit_file_size`.\n\n```\ng:neocomplcache_caching_limit_file_size\n                g:neocomplcache_caching_limit_file_size\n        This variable set file size to make a cache of a file.  If\n        open file is bigger than this size, neocomplcache do not\n        make a cache.\n    Default value is 500000.\n\n```\n. OK. I added less support in latest version. Please try it.\n. I fixed it.\n. > Manual completion behaves strange in gVim, but works in Vim\nIt is strange. I think your configuration or plugin conflicts with neocomplcache.\nCan you check the behavior in minimal settings and Vim plugins?\n. OK. Please show me your .vimrc? I will check.\n. Umm....\nI can't reproduce it. manual completion(<C-x><C-u>) will work.\n. Please explain me in detail. I must reproduce it.\n. OK. I reproduced it. I will check the bug.\n. I fixed it.\n. Would you update neocomplcache?\nIn latest version, it is fixed.\n. ujihisa++;\n. In my environment, this error is not occurred.\nPlease show me your .vimrc. and reduce it for me to try it easily(less than 100).\n. Sorry, I fixed it. Please check.\n. \u5831\u544a\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u5bfe\u5fdc\u3055\u305b\u307e\u3057\u305f\u3002\n. You should use neocomplcache only and  check if happend same problem(Possible less settings and non other plugins)\nI don't like spf13-vim. Because it is too huge. I cannot support it.\nIn my case, neocomplcache works and I do not press ESCAPE twice.\nI have not heared same behavior.\n. I think you should install plugins manually. I recommend using neobundle(https://github.com/Shougo/neobundle.vim).\n. > btw, how is neobundle different from Vundle ?\nneobundle has many features.\nFor example, dependencies, other VCS support, unite.vim interface, asynchronous update, ...\n. Oh... I think it is spf13 keymappings problem.\n. > Now I should only press ENTER once to go to next line, but since neo did show me some options, i need to press ENTER 2 times, Or I press a SPACE and then backspace to clear the space.\nYou should map <CR>.\nexample: \ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\n  function! s:my_cr_function()\n    return neocomplcache#smart_close_popup() . \"\\<CR>\"\n  endfunction\n. I think it is from below mappings in autoclose.vim\nif len(b:AutoCloseExpandEnterOn) > 0\n        inoremap <buffer> <silent> <CR> <C-R>=<SID>Enter()<CR>\n    endif\n. I added the problem in FAQ.\n. Please check :echo has('python') and setl omnifunc? in python filetype.\n. > :echo has('python') returns 0 and setl omnifunc? returns omnifunc=pythoncomplete#Complete\nYou must enable Vim's python interface. To enable it, you must install like \"vim-python\" package or build Vim with Python interface manually.\n. > I tried to utilize autocmd (BufEnter, FileType) and NeoComplCacheDisable with no luck.\nYou must use :NeoComplCacheLock.\n. You should check neocomplcache#is_locked() in your  buffer.\nAnd you must check b:neocomplcache.lock value.\nIf you execute ':NeoComplCacheLock', it will be 1.\n. OK.\n. I think this is not neocomplcache problem.\nIt is Python interface problem. Because, \neax=00000000 ebx=00000000 ecx=00000000 edx=ffffffff esi=00000000 edi=00000000\neip=0057f321 esp=0018bfe8 ebp=0018c004 iopl=0 nv up ei pl zr na pe nc\ncs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010246\ngvim!Py3Init_vim+0x13c691:\n0057f321 8b4804 mov ecx,dword ptr [eax+4] ds:002b:00000004=????????\nVim crashed in Python interface initialization. Python interpreter or Vim may be broken.\n. No. But I think python interface has many problems...\nYou should reinstall Python interpreter.\n. > I actually just did. I removed Python 2.7 x64 in favor of 32-bit along with Vim 32-bit\nYou must not mix 32bit dll and 64bit dll.\nYou must use Python 32bit and Vim 32bit or Python 64bit and Vim 64bit. \n. OK. It will be put in todo list.\n. I implemented it.\n. Thanks. I fixed the documentation.\n. neocomplcache\u3068\u4f75\u7528\u3059\u308b\u306a\u3089\u3001rsense\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c neocomplcache-rsense\u3092\u4f7f\u7528\u3059\u308b\u3079\u304d\u3067\u3059\u3002\nhttps://github.com/Shougo/neocomplcache-rsense\n. \u305d\u3046\u3044\u3046\u6319\u52d5\u3092\u3059\u308b\u306e\u306fneocomplcache\u304c\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u305f\u3081\u3067\u3001\u6b63\u5e38\u3067\u3059\u3002\n\u79c1\u306e\u74b0\u5883\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nhoge.rb\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\n1.\n\u3068\u6253\u3061\u8fbc\u3093\u3067\u3082neocomplecache\u306e\u4e88\u6e2c\u88dc\u5b8c\u304c\u51fa\u306a\u3044\u3002\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3059\u3002\u3002\uff01\n\n\u5019\u88dc\u304c\u51fa\u308b\u306e\u304c\u9045\u3044\u305f\u3081\u3001\u6700\u521d\u306e\u88dc\u5b8c\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u307e\u3059\u304c\u3001\u305d\u306e\u5f8c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nvimproc\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u306f\uff1f neocomplcache-rsense\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n:echo neocomplcache#sources#rsense#define()\u3092\u3084\u3063\u3066\u307f\u3066\u3001\u7a7a({})\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u306fneocomplcache-rsense\u304c\u52d5\u4f5c\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u591a\u5206\u3053\u308c\u304c\u539f\u56e0\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n. > \u3068\u3044\u3046\u3053\u3068\u306fneocomplcache-rsense\u307e\u3067\u306f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304c\u3001\u6700\u5f8c\u306e\u8868\u793a\u304c\u3046\u307e\u304f\u3044\u3063\u3066\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u3093\u3067\u3059\u304b\u306d\u3002\u3002\u3002\uff1f\n\u3042\u3068\u306f\u3001neocomplcache-rsense\u304cneocomplcache\u306b\u8a8d\u8b58\u3055\u308c\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n:echo neocomplcache#avaiable_ftplugins()\u3067rsense source\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n\u8868\u793a\u3055\u308c\u308b\u306a\u3089\u3001rsense source\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3093\u3067\u307f\u3066\u3001\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. > \u4ee5\u4e0b\u306e\u3088\u3046\u306b rsense \u306f\u3042\u308b\u3063\u307d\u3044\u306e\u3067\u3059\u304c\u3053\u308c\u306fneocomplecache-rsense\u304c\u8a8d\u8b58\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n\u52d5\u3044\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u3059\u307f\u307e\u305b\u3093\u3001\u3053\u308c\u306fbin/rsense\u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3080\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n\nautoload/neocomplcache/sources/rsense.vim\u306es:source.get_complete_words()\u304c\u4f55\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u304b\n:echomsg string(candidates)\u3067\u8abf\u3079\u3066\u4e0b\u3055\u3044\u3002return\u306e\u76f4\u524d\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u5019\u88dc\u304c\u51fa\u3066\u3044\u308c\u3070\u3001\u5358\u7d14\u306b\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3002\n\u3042\u30fc\u3001\u305d\u3046\u3060\u3002neocmplcache-rsense\u306frsense\u306e\u89e3\u6790\u304c\u3042\u307e\u308a\u65e9\u304f\u306a\u3044\u306e\u3067\nlet g:neocomplcache_skip_auto_completion_time = '0.6'\n\u3068\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3002\u5024\u306f\u74b0\u5883\u306b\u3088\u308a\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. \u3053\u308c\u307e\u3067\u306e\u60c5\u5831\u304b\u3089\u8003\u3048\u308b\u3068\u3001\u5358\u7d14\u306b\u5019\u88dc\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n. >  if neocomplcache#complete_check()\n\u306e\u4e2d\u306b\u6765\u3066\u3044\u306a\u3044\u304b\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002\u3042\u3068\u306f\u3001:mes\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3001\u3068\u304b\u304b\u306a\u3002\n\nlet result += process.stdout.read_lines(-1, 100)\n\n\u3053\u308c\u306fvimproc\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3068\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u30d7\u30ed\u30bb\u30b9(rsense)\u306e\u51fa\u529b\u3092\u3068\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n100\u3068\u3044\u3046\u306e\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306a\u306e\u3067\u3001\u3053\u306e\u5024\u3092\u5897\u3084\u3059\u3068\u5019\u88dc\u304c\u8868\u793a\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001\nechomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u306a\u3044\n\u3053\u308c\u304c\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u306f\u4e0d\u601d\u8b70\u3060\u306a\u3041\u3002\u4f55\u304b\u4f8b\u5916\u3092\u6295\u3052\u3066\u3044\u308b\u306a\u3089\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u2026\u2026\u3002\n. rsense\u304c\u56fa\u307e\u3063\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\u305d\u308c\u306b\u3057\u3066\u3082\u3001\u52d5\u4f5c\u304c\u5909\u3067\u3059\u306d\u3002\u3053\u3061\u3089\u3067\u306f\u518d\u73fe\u3067\u304d\u306a\u3044\u6319\u52d5\u3067\u3059\u3002\nrsense\u304c\u56fa\u307e\u3063\u3066\u3044\u308b\u306a\u3089Vim\u5168\u4f53\u304c\u6b62\u307e\u308b\u306f\u305a\u3067\u3059\u304c\u2026\u2026\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u306e\u72b6\u614b\u3067\u306f\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u3067\u3059\u3002\n\u3053\u308c\u304c\u52b9\u679c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001Vim\u3092\u6700\u65b0\u7248\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. rsense\u3092vimshell\u3067\u52d5\u304b\u3057\u3066\u307f\u3066\u3001\u88dc\u5b8c\u5019\u88dc\u304c\u51fa\u308b\u304b\u8abf\u67fb\u3067\u304d\u307e\u3059\u304b\uff1f\nvimshell\u306a\u3089\u540c\u3058\u6319\u52d5\u3092\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n. > \u306a\u308b\u307b\u3069\u3067\u3059\uff01\u3059\u307f\u307e\u305b\u3093\u304crsense\u306f\u3069\u3046\u3084\u3063\u305f\u3089vimshell\u3067\u52d5\u304b\u305b\u308b\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\uff1e\uff1c\nneocomplcache-rsense\u3067rsense\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308bvimproc#popen2()\u306e\u5f15\u6570\u3092\u8abf\u3079\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u540c\u3058\u5f15\u6570\u3092\u4e0e\u3048\u308c\u3070\u826f\u3044\u306f\u305a\u3002\n. \u3042\u3089\u3089\u2026\u2026\u3002rsense\u672c\u4f53\u306b\u5831\u544a\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n. > \u3057\u305f\u3089\u4e88\u6e2c\u5909\u63db\u5185\u5bb9\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002echomsg\u3060\u3068\u51fa\u529b\u3055\u308c\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3002\u3002\u3002echo\u306a\u3089\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\n\u305d\u308c\u3082\u5909\u3067\u3059\u306d\u3002\n\ncandidates\u304c\u3061\u3083\u3093\u3068\u5185\u5bb9\u3092return\u3057\u3066\u308b\u3088\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u3042\u3068canditates\u3063\u3066\u3069\u3053\u306b\u884c\u304f\u306e\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n\nautoload/neocomplcache.vim\u306e\u4e2d\u3067get_complete_words()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u8abf\u3079\u308c\u3070\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5404source\u306e\u5019\u88dc\u306f\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n. > \u3053\u308c\u304comni\u88dc\u5b8c\u3067\u3059\u3088\u306d\u3002\u3002\u3002(\uff9f\u2200\uff9f)\uff1fcss\u7b49omni\u88dc\u5b8c\u306e[O]\u3068\u306f\u3061\u304c\u3063\u3066[R]\u306a\u3093\u3067\u3059\u306d\nneocomplcache-rsense\u306f[R]\u3092\u30de\u30fc\u30ab\u30fc\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u6b63\u3057\u3044\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u539f\u56e0\u89e3\u6c7a\u306f\u7d50\u5c40\u3053\u308c\u3067\u3044\u3051\u307e\u3057\u305f\u3000\u2192\u3000http://qiita.com/items/f70c774c43422ab128c3\n\u305d\u3082\u305d\u3082rsense\u304c\u3046\u307e\u304f\u52d5\u3044\u3066\u306a\u304b\u3063\u305f\u306e\u304b\u306a\u3002\u3002\uff1f\n\n\u3042\u3042\u3001\u4e8c\u91cd\u8d77\u52d5\u3067\u5f15\u3063\u304b\u304b\u3063\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u2026\u2026\u3002\u4e86\u89e3\u3067\u3059\u3002\n\n\u6069\u8fd4\u3057\u3068\u8a00\u3063\u3066\u306f\u306a\u3093\u3067\u3059\u304cvim script\u529b\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u82f1\u8a9e\u529b\u306f\u591a\u5c11\u3042\u308b\u306e\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u82f1\u8a33\u7b49\u306b\u8ca2\u732e\u51fa\u6765\u308c\u3070\u3068\u601d\u3044\u307e\u3059\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u306a\u304b\u306a\u304b\u624b\u304c\u56de\u3089\u306a\u3044\u306e\u3067\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\u4eca\u56de\u306e\u30a8\u30e9\u30fc\u3082\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u88dc\u8db3\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n. \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6539\u5584\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n. Thanks. I merged and improved it.\n. Thanks.\n. I cannot fix it. Because I don't support for FuzzyFinder.\nI recommend unite.vim instead of FuzzyFinder.\n. But you can use :NeoComplCacheLock when entering FuzzyFinder buffer(example: autocmd FileType ...)\n. I think neocomplcache conflicts FuzzyFinder.\n. > I believe within FuzzyFinder buffer, neocomplcache locks itself automatically (neocomplcache#is_locked() returns 1).\nYou can use g:neocomplcache_lock_buffer_name_pattern variable.\n. > I believe within FuzzyFinder buffer, neocomplcache locks itself automatically (neocomplcache#is_locked() returns 1).\nYes. You can check it by neocomplcache#is_locked().\n\nThe error message self.lastPattern can be found from FuzzyFinder source, but this information is not enough for debugging.\n\nYes. I think it is fuzzyfinder  problem and it is not neocomplcache problem.\nFuzzyfinder is not supported by author, so I cannot fix it.\n. Your pattern is wrong.\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*\\%.'\nI think:\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*\\.\\?'\n. OK. I will add the example.\n. I fixed it.\n. let g:neocomplcache_force_omni_patterns.c ='[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\nlet g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:neocomplcache_force_omni_patterns.objc = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:neocomplcache_force_omni_patterns.objcpp = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nIt calls clang_complete...\n. You should delete g:neocomplcache_force_omni_patterns settings. It calls clang_complete automatically.\n. You should use this setting.\nlet g:neocomplcache_force_omni_patterns.objc = ''\nIf it is empty pattern, it is disabled.\n. Sorry, I fixed it in ver.8 branch(development version).\n. This is not neocomplcache problem. I think it is htmlomnicomplete problem.\nI cannot fix it.\n. But I may add the option next version. (I'm refactoring neocomplcahce in ver.8)\ng:neocomplcache#disable_insert_pair\n. > If it is a htmlomnicomplete problem I thought the change I've added in autoload/htmlcomplete.vim should have fixed it, I'll look into it some more and see if I can find something.\nYou can use :scriptnames to find loaded pluguins.\n. Please check your runtimepath. I think loaded default htmlcomplete.vim instead of custom htmlcomplete.vim.\n. I think it is order problem. I think you should be \"/Users/marlun/.vim/bundle/vim-marlun\" in front of runtimepath.\n. It is htmlcomplete issue. Not neocomplcache...\n. Sorry it is not. But I will add it in the future.\n. I cannot represent it...\nBut you can use :NeoBundleCachingBuffer to make cache manually.\n. > This should give me \"each\", similarly \"eawi\" should give \"each_with_index\". This only happens if i press a space followed by \"ea\". \nYou should check the FAQ section of neosnippet. \"Q: What if I want to expand a snippet trigger after (, [, \" etc...:\"\n. Hmmm. Please upload your snippet file. I will test it.\n. I fixed it.\n. I fixed it.\n. I think you use 'foldmethod' is \"expr\". It is too heavy to use neocomplcache.\n. > I have foldmethod=syntax, and in the file I'm editing there is no modeline. Foldlevel set to 1 in .vimrc. Does .vimrc modeline has anything to do when I'm editing a diffrent file and haven't opened .vimrc file in current session at all?\n\"foldmethod=syntax\" is also too heavy for auto completion.\n. neocomplcache\u306b\u30b9\u30cb\u30da\u30c3\u30c8\u3092\u81ea\u52d5\u5c55\u958b\u3059\u308b\u6a5f\u80fd\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u30b9\u30cb\u30da\u30c3\u30c8\u5c55\u958b\u3067\u306f\u306a\u304f\u3001\u30ab\u30fc\u30bd\u30eb\u79fb\u52d5\u6642\u306b\u88dc\u5b8c\u304c\u52d5\u3044\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u4e8b\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u30ab\u30fc\u30bd\u30eb\u30ad\u30fc\u3067\u306e\u79fb\u52d5\u306f\u63a8\u5968\u3057\u307e\u305b\u3093\u304c\u3001\u3069\u3046\u3057\u3066\u3082\u3084\u308a\u305f\u3044\u306e\u306a\u3089neocomplcache\u306eFAQ\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n```\nQ: I like moving cursor by cursor-keys.  But neocomplcache popups menus...\nA: Please set this in your .vimrc.  Note that this feature requires Vim 7.3.418\nor later.\n\nlet g:neocomplcache_enable_insert_char_pre = 1\n\n<\n```\n. Impossible. But if you write neocomplcache source or omnifunc for TeX, you can.\n. Sorry, this is feature. In latest version of neocomplcache(ver.8), additional information features are disabled to optimize.\n. I think it is installation problem. I recommend for you to reinstall neocomplcache.\n. Refactorred neocomplcache is in ver.8 branch.\nBut it is very unstable.\nsupport if_lua interface\n\nThis feature is friezed until fixing if_lua problem.\n. Current ver.8.0 progress:\n1. refactorred internal interface -> 80% OK\n2. improved neocomplcache source interface(improve compatibility of unite.vim source) and source documentation ->  20% writing now\n3. implement filters(matchers, sorters, converters like unite.vim) -> later(after improved source interface)\n4. support if_lua interface -> experimental support\n5. optimize memory and speed -> 90% OK\n6. real fuzzy matching(if_lua required) -> later(after implemented filters)\nI think neocomplcache ver.8 has killer features(like YouCompleteMe).\n. > have not tried YouCompleteMe. It looks nice based on the stars and readme. Is there anyway to integrate neocomplcache with YouCompleteMe at this time? How do you think of the differences? Thanks. \nNo. I cannot integrate with YouCompleteMe.\n\nthe speed of completion\nreal fuzzy match\n\nI will implement it in ver.8.\n\nintegration with syntastic\n\nI have not the plan to implement this feature.\n\ngood support for c-family completion\n\nYou can use it with neocomplcache and clang_complete.\n\nBut compared with neocomplcache, I consider it as \"incomplete\" - lack of many features like snippets_complete, tags_complete, etc.\n\nYes.\n\nI just recompiled MacVim with if-lua support, will this help the speed of neocomplcache ver8? Thanks.\n\nYes. But this feature is incomplete. I will improve it later.\nI recommend you to enable if_lua in Vim.\n. > I don\u2019t think YCM can replace neo. Neo is more powerful and much easier to use. If neo can make jedi and pydict integrated , it will be perfect for pythoner!\nYes. To enable YouCompleteMe is too hard(and it has a lot of crash problem).\nYou can use jedi with neocomplcache(Please read FAQ).\nWhat is pydict? I don't know it...\n. Can you upload screenshot? I want to know more detail.\n\nHere is the pydict detail : https://github.com/vim-scripts/Pydiction\n\nOK. I will check later.\nI think you can use neocomplcache with pydiction.\nBut it may be slow(because pydiction dictionary is too large).\n. > you see, the menu poped up automatically by jedi.vim when press dot, listing all the methods the object can call.\n\nbut this menu is lack of MRU and fuuzy match features ,which can be provided by neo .\n\nWhat's your configuration of neocomplcache?\nI think it is not used neocomplcache.\n. > but this menu is lack of MRU and fuuzy match features ,which can be provided by neo .\nOh, it is feature. Because, current fuzzy match is not supported omnifunc. This feature may be changed in neocomplcache ver.8.\nAnd currently disabled sorting in omnifunc. Because there was the demand.\n. > for pydiction case ,i think i can put up with the long time to load items ,as long as it is supported by neo . \nYou should install vimproc to save startup time. I tested pydiction as neocomplcache dictionary, but it is not slow.\n. Yes.\n. You can check the dictionary path by:\n:echo filereadable(neocomplcache#util#substitute_path_separator(fnamemodify(g:neocomplcache_dictionary_filetype_lists['python'], ':p')))\n\nbut none of item can be listed automatically ,is there anything wrong with the configuration ?\n\nYou have to wait until vimproc finishes making cache.\n. You can make cache manually by :NeoComplCacheCachingDictionary.\nAnd check to the g:neocomplcache_data_directory/dictionary_cache directory.\nIf you set g:neocomplcache_enable_debug to 1, you can check making cache timing.\n. In my environment, neocomplcache works. Hmmmm...\nPlease update neocomplcache. I updated it.\n. No. My configuration is too long. Please show me your minimal neocomplcache settings.\nI will check it.\n. I think you should test minimal .vimrc and with only neocomplcache.\nI tested below settings but it works.\n. If you enabled heavy comletion(fuzzy completion or underbar completion or camel case completion), lua filter is not called. So I said \"it is experimental\".\n. > the problem is not only dictionary items can't poped up ,but also other types of completion disappeared ,such as buffer ,syntax ,and tags etc . \nI think I fixed the problem. Please update neocomplcache.\n. > Thanks for that!\n\nI tried the latest push of master ,but the problem still exist...\n\nHummm. I fixed other same behavior by last commit.\nI think you should make minimal .vimrc and upload it.\n(Before configuration is too long and I'm not reappeared using it.)\nI will check.\n. I updated ver.8 branch.\n1. refactorred internal interface -> 90% OK\n2. improved neocomplcache source interface(improve compatibility of unite.vim source) and source documentation ->  80% writing now\n3. implement filters(matchers, sorters, converters like unite.vim) -> later(after improved source interface)\n4. support if_lua interface -> experimental support\n5. optimize memory and speed -> 90% OK\n6. real fuzzy matching(if_lua required) -> later(after implemented filters)\n. > if_lua on neocomplcache makes sense for me, as long as it doesn't crash ;)\nYes.\n\nso my question is, why if_lua? Many people may not be able to use it because they do not have the root privilege to recompile vim. \n\nOK. I answer the question.\n1. Pyhon interface is not used in every Vim environment.\n   For example, Android, iOS, non configured Vim,...\n2. Incompatibility with Python2 and Python3. I must rewrite for it.\n3. Loading Python interface is slow(10~20ms). But loading Lua interface is too fast(270ns).\n4. Python2 and Python3 is not loaded at same time in Unix environment.\n5. Python is too big.\n6. Python interface is slow than Lua interface.\n7. Lua interface is stable(no crashed in latest Vim).\n8. Using C module(like vimproc, YouCompleteMe) is hard to compile in Windows environment.\n9. Using both Python and C like YouCompleteMe is too unstable. Your Vim may be crash or happen a mysterious error.\n. > By the way, does the current s:lua_filter function have any fuzziness?\nYes. I will fix it later version in filters for neocomplcache.\n. Updated status\n1.   refactorred internal interface -> almost 100% OK(except new features)\n2.    improved neocomplcache source interface(improve compatibility of unite.vim source) and source documentation -> 90% writing now\n3.    implement filters(matchers, sorters, converters like unite.vim) -> 50%(except matcher)\n4.    support if_lua interface -> experimental support\n5.    optimize memory and speed -> 90% OK\n6.    real fuzzy matching(if_lua required) -> later(after implemented matchers)\nUnfortunately, if I enable neocomplcache ver.8 with matcher, wildcard and camel case completion feature and underbar completion features are disabled.\nAnd if your Vim is not enabled if_lua or too old, neocomplcache completion speed will slow(than before version).\nSo, I will release neocomplcache ver.8(or ver.8-pre) before implementing matcher.\nI highly recommend for you to use if_lua enabled Vim.\n. 1.    refactorred internal interface -> almost 100% OK(except user customization)\n2.    improved neocomplcache source interface(improve compatibility of unite.vim source) and source documentation -> 90% OK(except user customization)\n3.    implement filters(matchers, sorters, converters like unite.vim) -> 100% but matcher is ver.8.1\n4.    support if_lua interface -> experimental: full support is ver.8.1\n5.    optimize memory and speed -> 90% OK(rest is ver.8.1)\n6.    real fuzzy matching(if_lua required) -> full support is ver.8.1\nI think ver.8 branch will be merged completely to master in this week.\nAfter released ver.8.0, I will develop neocomplcache ver.8.1(contains new featured matchers).\nneocomplcache ver.8.1 has full features but it breaks backward compatibility(for example underbar completion, camel case completion)...\n. Yes. But to use fuzzy match, you must enable if_lua feature in Vim.\nIn not if_lua featured Vim, underbar completion, wild card, fuzzy completion features are disabled and too slow.\nSo this feature will be in ver.8.1.\nIn ver.8.1, neocomplcache detect not enabled if_lua environment and may warn.\n. Oh, ... But I don't have Mac OS.\nIn Windows, compiled Vim is available with if_lua.\nIn Linux, the instruction is available.\nhttp://vim-jp.org/docs/build_linux.html\n. Mac version is available(Japanese)\nhttp://code.google.com/p/macvim-kaoriya/wiki/Building?tm=4\n. Current progress:\n1.  refactorred internal interface -> almost 100% OK\n2. improved neocomplcache source interface(improve compatibility of unite.vim source) and source documentation -> 100% OK\n3. implement filters(matchers, sorters, converters like unite.vim) -> 100% but matcher is ver.8.1\n4. support if_lua interface -> experimental: full support is ver.8.1\n5. optimize memory and speed -> OK(rest is ver.8.1)\n6. real fuzzy matching(if_lua required) -> full support is ver.8.1\nNew features was freezed.\nVer.8.0 will be available in week!\n. > I updated the neo to V8.0, so I wonder does the MRU and Fuzzy matcher features for jedi implemented ?\nNo. Because, in g:neocomplcache_force_omni_patterns(jedi), neocomplcache features(MRU, Fuzzy matcher, ...) are disabled.\nTo enable neocomplcache feature, you must create neocomplcache source(extension) for jedi like neocomplcache-rsense.\nhttps://github.com/Shougo/neocomplcache-rsense\n. If you use g:neocomplcache_omni_patterns instead of g:neocomplcache_force_omni_patterns, neocomplcache features are enabled. But it may be occurred a problem.\n. Yes. I have no time...(Because other Vim extensions and neocomplcache ver.8.1)\n. neocomplcache ver.8.0 is released.\n. Yes. You must use \"if_lua\" enabled Vim.\n. Sorry, It is indent plugin problem. So I can't fix it.\n. Thanks.\n. > I autocmd html's ft=html.css.javascript, since that neocomplcache doesn't work in html file. At the same time, both neosnippets and neocomplcache slow down editing, except I uncomment them( I use vundle to manage plugins)\nIs it :set ft=html.css.javascript? I will check it.\nAnd what's the \"eocomplcache doesn't work in html file\"?\nPlease explain to me.\n. I tested it, but works.\nDid you set \"set ft=html.css.javascript\" manually?\nIt may be autocmd problem.\n. I tested it. But html and css snippet were works.\nAnd neocomplcache popup worked.\nWhy?\n. Can you test it in minimal plugins and minimal .vimrc?\nIt may be settings problem.\n. OK.\nI think it is neocomplcache skipped problem.\n. Unfortunatelly, neocomplcache is not supported.\nThis problem is occurred in neocomplete?\n. Hmmmm....  I think it is omni completion problem.  Please disable omni completion.\n\nUnfortunately I can't count on having Vim 7.3+ or Lua everywhere, so I'd rather not rely on those things.\n\nOh, your environment is too bad.  I don't recommend to use old Vim.\n. I tested it. But neocomplcache filename completeion worked.\n. You can change g:neocomplcache_omni_patterns.\nBut I don't know good pattern.\n. Can you explain the behavior by screenshot?\n. OK. I improved neocomplcache for it. Please update.\n. :-)\n. I think your neocomplcache installation was wrong.\nneocomplcache was not loaded.\n. > i used your shougo-s-github vimrc, you think that might be the problem?\nI think you don't install neocomplcache.\n. Yes. This is feature.\nBecause, if foldmethod is \"expr\" or \"syntax\", auto completion will be too heavy.\nPS: I changed this feature to enable 1000+ lines file only.\n. I want to fix it. But this is Vim internal problem...\n. I removed changing foldmethod feature in neosnippet.\n\nHi again, maybe create global variable to let user disable this foldmethod change even if it is 'too heavy', or let user pick the number of lines at which this will occur (now it's hard coded 1000) ?\n\nBut I don't want to add option. Because neocomplcache has many many options...\n. In ver.8 branch, it is improved. neocomplcache restore foldmethod on BufWritePost event.\n. > By the way, neocomplcache#unlock_source is for current buffer only. Is there a standard way to enable and disable source globally?\n:h g:neocomplcache_disabled_sources_list\n. > I know menu and word. Which one is for preview? is it info?\nYes. \"info\" is preview information for Vim completion.\n\nI spent some time with the neosnippet source code. It has a few keys I am not sure about: real_name, neocomplcache__refresh , and rank. \n\n\"real_name\" is source specified key.\n\nDoes neocomplcache honor the rank for individal candidate?\n\nNo. The rank is used for visible candidate.\n\nis neocomplcache__refresh a generic key which can be used in other sources?\n\nYes.\nOK. I will write candidates specification in ver.8 branch.\n. > What will happen if neocomplcache__refresh is 1? Is it going to call a hook function?\nNo. To enable partial match, I set it to 1.\n. I added candidate documentation in ver.8 branch.\n. call neocomplcache#initialize()\n\u3053\u308c\u304c\u975e\u5e38\u306b\u602a\u3057\u3044\u3067\u3059\u306d\u3002\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\n. \u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002neocomplcache\u3092\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u304a\u305d\u3089\u304f\u3001\u79c1\u3084\u4ed6\u306e\u4eba\u304c\u3053\u306e\u554f\u984c\u306b\u6c17\u3065\u304b\u306a\u304b\u3063\u305f\u306e\u306fneocomplcache#initialize()\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n. \u3059\u307f\u307e\u305b\u3093\u3001push\u3092\u5fd8\u308c\u3066\u3044\u305f\u306e\u3067\u3064\u3044\u3055\u3063\u304dpush\u3057\u305f\u306e\u3067\u3059\u3002\u3082\u3046\u4e00\u5ea6\u66f4\u65b0\u3092\u304a\u306d\u304c\u3044\u3057\u307e\u3059\u3002\n. \u3067\u306fclose\u3057\u307e\u3059\u3002\n. ver.8\u3067API\u306e\u6574\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3046\u3044\u3046\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\n\n\u3053\u306e\u6642\u306b6\u6587\u5b57\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u30b3\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u306a\u3044\u3093\u3067\u3059\u304c\u30015\u6587\u5b57\u4ee5\u4e0a\u6253\u3066\u3070\u3060\u3044\u3076\u7d5e\u308a\u8fbc\u307f\u3082\u3055\u308c\u3066\u3044\u308b\uff08\u3068\u601d\u3046\uff09\u306e\u3067\u305d\u3053\u307e\u3067\u56f0\u3089\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nVim script\u306e\u95a2\u6570\u540d\u306f\u3068\u3066\u3082\u9577\u304f\u306a\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002call neocomplcache#enable()\u3068\u304b\u3002\u88dc\u5b8c\u3059\u308b\u3068\u304d\u306b\u4e0d\u4fbf\u306b\u306a\u308a\u307e\u305b\u3093\u304b\uff1f\n\u6700\u5927\u6587\u5b57\u9577\u3067\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u306a\u3089\u3001\u300c\u524d\u56de\u306e\u5165\u529b\u6642\u306b\u5019\u88dc\u304c\u306a\u3044\u3068\u304d\u306b\u9650\u308b\u300d\u7b49\u3001\u5de5\u592b\u304c\u5fc5\u8981\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n. \u3075\u30fc\u3080\u3002\u305d\u3046\u306a\u3093\u3067\u3059\u304b\u306d\u3002\u3069\u3061\u3089\u306b\u305b\u3088\u3001source\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6574\u7406\u3057\u305f\u5f8c\u3067\u306a\u3044\u3068\u3053\u306e\u6a5f\u80fd\u306e\u5b9f\u88c5\u306f\u7121\u7406\u3067\u3059\u306d\u3002\n. \u5b9f\u88c5\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u4eca\u306f\u4fdd\u7559\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u88c5\u3059\u308b\u306a\u3089\u5c11\u306a\u304f\u3068\u3082ver.8.0\u304c\u5b89\u5b9a\u5316\u3057\u305f\u6642\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n. \u306f\u3044\u3002ver.8\u306e\u5b89\u5b9a\u5316\u306b\u307e\u305a\u306f\u5c3d\u529b\u3057\u305f\u3044\u306e\u3067\u3059\u3002\n. neocomplcache\u306b\u65b0\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u4e88\u5b9a\u304c\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5374\u4e0b\u3002neocomplete\u306e\u65b9\u306b\u8981\u671b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. I fixed it.\n. \u300cctags\u306e\u88dc\u5b8c\u5019\u88dc\u300d\u3001\u3068\u306finclude\u88dc\u5b8c\u306e\u5019\u88dc\u3067\u3059\u304b\u306d\uff1f\u3000\u3061\u3087\u3063\u3068\u3069\u3046\u3044\u3046\u5019\u88dc\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u898b\u306a\u3044\u3068\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u304a\u305d\u3089\u304f\u305d\u308c\u306f\u4ed5\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001ctags\u3067\u88dc\u5b8c\u5019\u88dc\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u306f\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001tag\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3067\u304d\u307e\u305b\u3093\u3002\n. Why did you add this feature? I think this behavior is not necessary.\n. OK. I will merge it.\n. Sorry, I fixed for it.\n. > I'll keep an eye out for the fix.\nIs it fixed the problem?\n. Sorry, I did not push for it. I updated neocomplcache.\n. Please upload your minimal .vimrc and representation ways.\nI will check it.\n. Please update neocomplcache again.\nI tested your .vimrc but the problem was not happened.\n. > I actually don't even care about dict completion too much, though it'd be nice for a few filetypes. What's the easiest way to just disable it?\nYou should use g:neocomplcache_dictionary_filetype_lists variable instead of dictionary option.\n. I fixed the problem.\n. > Also, I think you should raise the rank for buffer_complete because it is mostly related to what you are editing\nWhat do you think the rank concreatly?\n. > It looks to me that the ranks of the sources are not setting up based on some rules. For example, the vim_complete is 300. nesnippet is 8 (if I remember it correctly), buffer_complete is 5. For me, I usually bump up the rank of buffer_complete to 100. \nI thik the rank(100) is too up. If I set the rank, I think buffer complete candidates will hide other candidates.\nSo, I reject it.\n. OK. I will change syntax_complete rank.\n. \"f\" is \"function\".\n\nI also still want to have a try though omni with PHP is slow, but I am not sure wether I was succeful invoking it.\n\nBecause PHP omnifunction is too slow...\nI don't recommend for you to use the omni function.\n. > Why just 'f' appears here? It almost appears after '->' and is it the omni?\nYes. It is omni completion.\n\nI don't remember there is a kind of source called 'f'... If it is omni, it shoud be O, right?\n\nOK. I fixed it.\n. > So PHP's omni complete is defaultly set to phpcomplete#CompletePHP?\nI think yes.\nYou can check it by verbose setlocal omnifunc? command.\n\nIs the dict way the best way for PHP? \n\nYes.\n\nIf I use cTags with vim-easytags ,is it still the omni way?\n\nI have not try it. I don't know...\n. > I just want the PHP complete a bit more intelligent..... \nI think so, but I don't use PHP...\n. Oh, ....automatically set.\nI think PHPComplete is good for manual completion, but it is bad for auto completion.\n. Manual completion is \"<C-x><C-o>\".\nAutomatic completion is like neocomplcache or Intellisense.\n. > plus: I may come to Japan for my further study this Oct and wish more communications with you the coming days, \u5148\u8f88.\nYou should be able to open a Vim study session in Japan.\nIn Japan, many Vim study session was opened.\n. > and where do you live? I have not decide which university to go for... \nI live in Kanto. So, you should go to Tokyo in Japan if possible.\n\nIf talking about the Internet company, Tokyo is better than Kyoto\uff1f This is the 2 citys I may go...\n\nIn Kanto(Tokyo), there are many Vimmers includes me.\n. Thanks.\n. I fixed it. Please update neocomplcache and unite.vim.\n. I may change plugin name because neocomplcache ver.8.1 has many restriction....\n. I think I will change the name to neocomplete(neo-complete).\n1: neocomplete breaks backward compatibility from neocomplcache.\n2: neocomplete may not stable version.\n3: It is hard to understand the name \"neocomplcache\".\n4: You can manage neocomplcache and neocomplete easily by neobundle and other package management system.\n5: I can refactor internal interface than ver.8.0\n6: I can change source names(Example: buffer_complete -> buffer)\n7: You can use neocomplcache if you are using old Vim or if_lua is not enabled.\n. > neocomplcache is quite famous. Is it really necessary to change the name? \n\nIf you change the name, are you going to rename all the option variables, function names, etc. ?\n\nYes.\nTo use neocomplcache ver.8.1, you must enable if_lua interface.\nI think this is big change.\nAnd neocomplcache has legacy interfaces.\n\nAnd how about all the extensions people write for neocomplcache?\n\nYes. But neocomplcache(neocomplete) extension specifications are documented instead of older versions.\nAnd neocomplete extension has compatibility with neocomplcache ver.8.0 sources.\n. Well, I will test next version in ver.8.1.\n. I must release neocomplcache ver.8.0 before developing ver.8.1.\n. I started neocomplcache ver.8.1 development.\nhttps://github.com/Shougo/neocomplcache/tree/ver.8.1\n. Thanks.\n. No. It is not time for it.\nI will rename after implementing matcher and if_lua features.\n. I implemented matchers experimental.\nIn buffer_complete, new matchers are used.\nNote: You must enable if_lua interface in ver.8.1.\n. I implemented matcher_fuzzy in experimental\nYou can use real fuzzy completion by enabling g:neocomplcache_enable_fuzzy_completion.\n. Current progress:\n- refactorred internal interface -> 10%\n- implement matchers -> 100% Done!\n- support if_lua interface completely -> 100% Done!\n- optimize memory and speed -> 20%\n- real fuzzy matching(if_lua required) -> 100% Done!\n. I created neocomplete.vim repository. But not pushed.\nhttps://github.com/Shougo/neocomplete.vim\n. > Wow, that is really quick.\n:-)\n\n@Shougo How do you make github redirect https://github.com/Shougo/neocomplete to https://github.com/Shougo/neocomplete.vim?\n\nHow I set github redirect? I don't know it...\n. > Did create neocomplete first, and then rename it to neocomplete.vim?\nYes.\n\nFrom what I know, github does not do redirect for renamed repo?\n\nI tested it. The redirection is worked.\n. I must rewrite default sources to use new interfaces.\nAfter it, I will rename neocomplcache ver.8.1 to neocomplete.\n\nMaybe you should do the same to your other vim repos, change them to *.vim, e.g. neocomplcache.vim, of course, just a thought.\n\nOK.\n. I renamed my repositories names completely.\n. Thank you for your testing.\n\ngot A small bug...\n\nI fixed it in latest version.\n\ntried the new fuzzy_matcher in ver8.1. Very nice and the speed issue seems to be solved by if_lua. How long do you plan to release a stable version?\n\nStable version is provided in neocomplete.vim.\nVer.5.1 is testing only.\nI must rewrite default sources to use new interfaces.\n. 1. Vim has not thread support.\n2. if_python with thread is too danger. Because, Vim functions and internal structures are not thread safe!(For example: spellsuggest() you used)\n3. I think if you implemented sources by if_lua, it is fast.\nSo, I cannot support thread in neocomplcache(and neocomplete).\nPS: Your SpellcheckCompleter implementation is no input lag but too danger...\n. > I hope you may revise the source interface with thread support. Does lua have good thread support? I have no knowledge of the lua language.\nNo. lua and Vim have not thread support!\nLua is single thread only.\n\nI hope you may revise the source interface with thread support.\n\nI cannot revise it.\nBut you can use multi-process instead of multi-thread.\nOr you can implement source by using if_python with thread(danger).\n. I converted the default sources to new interfaces.\nSo you can use full features in all default sources!\nBut it may include bugs...\n. I will rename neocomplcache to neocomplete.vim in next week!\n. In neocomplcache ver.8.1(neocomplete.vim), fuzzy matching is default!\nAnd filename completion is too fast.\n. I must rename API and remove old interfaces.\n. I started renaming.\nhttps://github.com/Shougo/neocomplete.vim\nBut this is imcomplete.\n_You must not use it!_\nI will change it critically.\n. I removed legacy interfaces in neocomplete.\n. I renamed source names in neocomplete.\nFor example:\nbuffer_complete -> buffer\ntags_complete -> tag\n. If I renamed variable names in neocomplete, I will close this issue.\n. I renamed variable names. So I will close it.\n. I deleted ver.8.1 branch.\n. I fixed it.\n. In g:neocomplcache_force_omni_patterns, neocomplcache features are disabled(contains regex).\nSo, this is feature. I can't fix.\n. > I have a .clang_complete file in my project directory and can manually complete from clang's extra source libraries with C-X C-O. Is there a way to auto complete with clang typing regular letters?\nYou should not to do. It is too heavy and all neocomplcache features are disabled.\n. > Is it possible to use Omnicppcomplete for completions outside of the forced patterns, and clang for the patterns itself?\nNo. You must call omnifunc manually by <C-x><C-o>.\n. I fixed it.\n. I think this is your disk problem.\nIf you input '/v', neocomplcache's filename completion will work.\nYou can check it by default filename completion <C-x><C-f>.\nIn my environment, neocomplcache is not frozen.\n. Thanks ujihisa.\n\nin vim version 7.4, python interface will be improved.\nand now python interface is widly used .\nso,why not using python interface ?\nreason of speed or any other?\n\nPlease read in FAQ section.\nBecause:\n1. Python interface is not available in every Vim environment. For example,\n   Android, iOS, non configured Vim,...\n2. Incompatibility with Python2 and Python3. I must rewrite for it.\n3. Loading Python interface is slow(10~20ms). But loading Lua interface is\n   too fast(270ns).\n4. Python2 and Python3 is not loaded at same time in Unix environment.\n5. Python is too big.\n6. Python interface is slow than Lua interface(almost twice).\n7. Lua interface is stable(no crashed in latest Vim).\n8. Using C module(like vimproc, YouCompleteMe) is hard to compile in Windows\n   environment.\n9. Using both Python and C like YouCompleteMe is too unstable. Your Vim may\n   be crash or happen a mysterious error.\n10. To build if_lua is easy.\n11. I think if_lua is the second level language in Vim(The first is Vim\n    script).\n. I tested vim-xorox-ftplugin, but it displayes errors. I cannot fix it.\nI think xorox-ftplugin is broken...\n. OK.\nIn below script,\npackage.\nand I pressed <C-x><C-o> keys.\nError detected while processing function xolox#lua#omnifunc..xolox#lua#getomnivariables..xolox#lua#dofile:\nline    5:\n...ndle/vim-lua-ftplugin/misc/lua-ftplugin/omnicomplete.lua:77: bad argument #1 to 'ipairs' (table expected, got userdata)\nError detected while processing function xolox#lua#omnifunc..xolox#lua#getomnivariables:\nline    3:\nE121: Undefined variable: Error\nError detected while processing function xolox#lua#omnifunc..xolox#lua#getomnivariables:\nline    4:\nE686: Argument of sort() must be a List\nError detected while processing function xolox#lua#omnifunc..<SNR>148_addsignatures:\nline    1:\nE714: List required\nError detected while processing function xolox#lua#omnifunc:\nline   21:\nE712: Argument of filter() must be a List or Dictionary\n. This error was fixed. Thanks.\nI used below settings and it works.\n```\n  \" For vim-lua-ftplugin.\n  let g:lua_check_syntax = 0\n  let g:lua_complete_omni = 1\n  let g:lua_complete_dynamic = 0\nlet g:neocomplcache_omni_functions.lua =\n        \\ 'xolox#lua#omnifunc'\n  let g:neocomplcache_omni_patterns.lua =\n        \\ '\\w+[.:]\\|require\\s(\\?[\"'']\\w'\n  \" let g:neocomplcache_force_omni_patterns.lua =\n        \" \\ '\\w+[.:]\\|require\\s(\\?[\"'']\\w'\n```\n. \nBut in vim-lua-ftplugin omni completion, the menu items are broken(for example, package.config and package.cpath and package.path).\n@xolox Can you fix it? \n. Are /\\n;\\n?\\n!\\n-\\n and /usr/local/lib/lua/5.2/?.so;/usr/lib/i38.. correct menus?\n. Thank you.  I will close it.\n. Well...\nIn my environment, this errors is not happened.\nI cannot fix it...\n. I checked the codes. But I cannot find errors.\n. OK.\n. Thank you for your reporting! I fixed it.\n. Yes. It is feature.\n. \u539f\u56e0\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u30d0\u30c3\u30d5\u30a1\u4fdd\u5b58\u6642\u306bfoldinfo\u3092\u3082\u3068\u306b\u623b\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u3082\u3068\u306b\u623b\u3055\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u3069\u3046\u3057\u3088\u3046\u304b\u306a\u2026\u2026\u3002\n\u30d0\u30b0\u3067\u306f\u306a\u3044\u3057\u3001neocomplete.vim\u3060\u3051\u306b\u8ffd\u52a0\u3057\u3066\u3082\u826f\u3044\u6c17\u304c\u3059\u308b\u3002\nfoldmethod\u306bexpr\u3082\u3057\u304f\u306fsyntax\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u304c\u539f\u56e0\u306a\u306e\u3067\u3001marker\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u308c\u3070\u554f\u984c\u306f\u306a\u3044\u306f\u305a\u3067\u3059\u3002\n. \u3042\u3001\u601d\u3044\u51fa\u3057\u307e\u3057\u305f\u3002gettabwinvar()\u306f\u6bce\u56de\u30a6\u30a4\u30f3\u30c9\u30a6\u3092\u79fb\u52d5\u3059\u308b\u306e\u3067\u3059\u3002\n\u3053\u308c\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u4fee\u6b63\u3057\u3088\u3046\u304b\u306a\u3002\n. \u3068\u308a\u3042\u3048\u305a\u3001ver.8.1\u30d6\u30e9\u30f3\u30c1\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u554f\u984c\u304c\u306a\u3044\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u554f\u984c\u306a\u3051\u308c\u3070\u3001master\u306b\u3082\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\n. \u4e86\u89e3\u3002master\u306b\u3082\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\n. master\u306b\u30de\u30fc\u30b8\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\n. :help g:neocomplcache_same_filetypes\n```\ng:neocomplcache_same_filetype_lists\n        It is a dictionary to connect file type mutually.  It is\n        effective at time to let you refer to c and cpp mutually.\n        The value are comma-separated filetypes.\n        If the value contains \"\", neocomplcache completes from all\n        buffers.  If the key is \"\", the value will be used for default\n        same filetypes.\n        Note: neocomplcache completes from same filetype buffers in\n        default.\n    if !exists('g:neocomplcache_same_filetype_lists')\n      let g:neocomplcache_same_filetype_lists = {}\n    endif\n    \" In c buffers, completes from cpp and d buffers.\n    let g:neocomplcache_same_filetype_lists.c = 'cpp,d'\n    \" In cpp buffers, completes from c buffers.\n    let g:neocomplcache_same_filetype_lists.cpp = 'c'\n    \" In gitconfig buffers, completes from all buffers.\n    let g:neocomplcache_same_filetype_lists.gitconfig = '_'\n    \" In default, completes from all buffers.\n    let g:neocomplcache_same_filetype_lists._ = '_'\n\n```\n. You must set this.\nlet g:neocomplcache_same_filetype_lists = {}\n        \" In default, completes from all buffers.\n        let g:neocomplcache_same_filetype_lists._ = '_'\n. Did you initialized g:neocomplcache_same_filetype_lists?\nlet g:neocomplcache_same_filetype_lists = {}\n        \" In default, completes from all buffers.\n        let g:neocomplcache_same_filetype_lists._ = '_'\n. Yes. You can make cache manually by :NeoComplCacheCachingBuffer.\n. call neocomplcache#set_dictionary_helper({variable_name}, 'key1,key2,...', {value})\n. It is internal API. Not documented yet...\n. Well, you should overwrite runtime files and vim.exe and gvim.exe and dll files and binary files.\n. Thanks.\n. You can set 'dictionary' option.\n\nbut all open buffers can use a dictionary file\n\nNo. neocomplcache does not recognize global dictionary option.\nBecause, if you set big dictionary in dictionary option, Vim's performance will make slow.\n. I added g:neocomplcache_dictionary_filetype_lists feature in ver.8.1 branch.\nIf the key is \"_\", the dictionary will load in globally.\n. neocomplcache is not supported now.\n. https://github.com/vim-jp/vital.vim/issues\nI think this is vital issues.\nPlease create the issue in it.\n. Thanks. I updated vital.\n. You should write this.\nif !exists('g:neocomplcache_force_omni_patterns')\n  let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_omni_patterns.python = '[^. \\t]\\.\\w*'\n\nBy the way ,the fuzzy matching in V8.1 is very cool \n\nThanks.\n. > For example ,the word \"urllib\" in python can be popped up by jedi ,but can't be listed by Neo automatically .\nThis is your pattern's problem.\nThe pattern \"[^. \\t]\\.\\w*' is not matched to \"urllib\".\nIt is feature.\n. let g:neocomplcache_force_omni_patterns.python = '\\h\\w*\\|[^. \\t]\\.\\w*'\nThis is full power completion.\nBut too slow.\n. > Another issue is the fuzzy match and mru feature cann't apply to jedi by now?\nYes. Because you use g:neocomplcache_force_omni_patterns.\nIn g:neocomplcache_force_omni_patterns, neocomplcache features(fuzzy match, mru, ...) is disabled.\nYou can use g:neocomplcache_omni_patterns instead of g:neocomplcache_force_omni_patterns.\nBut the complete function may not work.\n. No. Because, g:neocomplcache_force_omni_patterns cannot use neo features.\n. This behavior is hard to fix.\nBut I will improve it in ver.8.1.\nYou can complete current buffer manually by NeoComplCacheCachingBuffer.\n. neocomplcache does not use Vim's internal completion.\n. let g:neocomplcache_enable_fuzzy_completion = 0\nor \ncall neocomplcache#custom_source('_', 'matchers',\n        \\ ['matcher_head'])\nI will add it in FAQ section.\n. I fixed it.\n. I fixed it.\n. > 1., to use all open buffers (with same file type)?\nPlease read FAQ.\n```\nQ: I want to complete from all buffers.\nA: |g:neocomplcache_same_filetype_lists|\nlet g:neocomplcache_same_filetype_lists = {}\nlet g:neocomplcache_same_filetype_lists._ = '_'\n\n```\n\n2., scan a directory recursively for possible hits?\n\nYou can use tags complete by using \"ctags -R\" command.\nBut it is too heavy.\n. I improved buffer cache timing.\nPlease update and check it.\nAnd you should install vimproc.\nhttps://github.com/Shougo/vimproc.vim\n. Please tell me the representation way. I will check.\n. You should update neocomplcache.\nI think the problem is fixed. But if it is not fixed in your environment, please tell me the representation way(command).\n. I improved for it.\n. But you can custom it by g:neocomplcache_same_filetype_lists.\n. > just know that.\n\nis there defualt same_filetype settings?\n\nBecause it is complicated, please refer to neocomplcache#init#_variables() in autoload/neocomplcache/init.vim for the initial value.\n. > If I type in, say, [1,2,3].f, the autocomplete list doesn't come up (it should contain find, find_index, etc.). If however I type , the autocomplete list is filled with Array methods and adjusts properly as I type. . Why is  necessary? I thought that's what neocomplcache is meant to do automatically.\n\nIn my environment, it works.\n\nthen when I type [1,2,3]., the autocomplete list has Array methods in it, but when I start to type they disappear to be replaced with tokens in the current file. Using  also fixes it here.\n\nIt is rubycomplete's problem. I think rubycomplete looks very strange.\nBut I fixed for it in latest version of neocomplcache.\n. It is feature. Sorry. Current ruby omni function conflicts with neocomplete/neocomplcache.\n. I fixed it.\n. I fixed it.\n. I fixed it.\n. I fixed it.\n. let g:neocomplcache_omni_patterns.perl = '[^. \\t]->\\%(\\h\\w*\\)\\?\\|\\h\\w*::\\%(\\h\\w*\\)\\?'\n. OK. It is syntax_complete bug. I will fix later.\n. I fixed it.\nBut eval is not syntax highlighted in my syntax file. So, it is not listed.\n. I fixed it in neocomplcache master branch and neocomplete.vim master branch.\nV8.1 branch is obsoleted branch. I will delete it in week.\n. Note: in neocomplete.vim, variable names will be change on current week!\nYou should use neocomplcache master until variable names are renamed.\n. You must make cache manually by :NeoComplCacheCachingSyntax.\n. I renamed neocomplete variables. So you can try it.\nBut it may have bugs...\n. ~~7.3.969\u3067\u518d\u73fe\u3057\u306a\u3044\u3068\u3044\u3046\u4e8b\u306f\u3001neocomplcache\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u304cNFA\u30a8\u30f3\u30b8\u30f3\u306e\u30d0\u30b0\u3092\u4ed8\u3044\u3066\u3044\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002~~neocomplcache\u306e\u5358\u306a\u308b\u30d0\u30b0\u3067\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\u3072\u3068\u307e\u305a\u3001\u79c1\u306e\u74b0\u5883\u3067\u518d\u73fe\u3059\u308b\u304b\u306e\u8abf\u67fb\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\n. \u3059\u307f\u307e\u305b\u3093\u3002\u79c1\u306e\u74b0\u5883\u3067\u306f\u518d\u73fe\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4f7f\u7528\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u79c1\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5c11\u3057\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u3053\u306e.vimrc\u3092\u8d77\u52d5\u6642\u306b\u8aad\u307f\u8fbc\u3080\u3060\u3051\u3067\u81ea\u52d5\u306b\u51e6\u7406\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u305c\u304bset filetype=scss\u3068\u3084\u3063\u3066\u3082syntax/scss.vim\u304c\u8aad\u307f\u8fbc\u307e\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u7121\u7406\u3084\u308aruntime!\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n```\nscriptencoding utf-8\nset nocompatible\nfiletype off\nset rtp+={\u6700\u65b0\u7248\u306eneobundle.vim\u3078\u306e\u30d1\u30b9}\nset rtp+={\u6700\u65b0\u7248\u306eneocomplcache.vim\u3078\u306e\u30d1\u30b9}\nif has('vim_starting')\n    call neobundle#rc('~/.bundle')\nendif\nNeoBundle \"cakebaker/scss-syntax.vim\"\nfiletype plugin indent on\n\" \u6709\u52b9\u306b\u3059\u308b\ncall neocomplcache#initialize()\nset filetype=scss\nruntime! syntax/scss.vim\nautocmd VimEnter * NeoComplCacheCachingSyntax\n```\nneocomplcache\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3057\u305f\u304c\u3001syntax\u88dc\u5b8c\u306f\u6b63\u5e38\u306b\u5019\u88dc\u3092\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n. \u4f7f\u7528\u3057\u305fVim: 7.3.1078\nneocomplcache: a20f1c9\n. \u305d\u308c\u3063\u307d\u3044\u306e\u304c\u518d\u73fe\u3057\u307e\u3057\u305f\u3002osyo\u3055\u3093\u306e\u624b\u9806\u3060\u3068\u518d\u73fe\u304c\u7121\u7406\u3067\u3001scss\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3066\u305d\u308c\u3092\u958b\u3044\u305f\u969b\u306b\u30d5\u30ea\u30fc\u30ba\u3059\u308b\u3088\u3046\u3067\u3059\u3002<c-c>\u3067\u5fa9\u5e30\u3067\u304d\u307e\u3059\u3002\n. \u539f\u56e0\u304c\u5224\u660e\u3057\u307e\u3057\u305f\u3002filetype\u306e\u5224\u5225\u3067\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u4eca\u306f\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u3001\u4fee\u6b63\u306b\u306f\u3082\u3046\u5c11\u3057\u304b\u304b\u308a\u307e\u3059\u3002\n. \u554f\u984c\u306e\u4fee\u6b63\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002syntax\u30d5\u30a1\u30a4\u30eb\u306e\u6709\u7121\u306f\u95a2\u4fc2\u306a\u304f\u3001:set filetype=css.scss\u3068\u3059\u308b\u3060\u3051\u3067\u66b4\u8d70\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n. let g:neocomplcache_enable_auto_close_preview = 0\n. Because DiffGitCached window is set 'preview' option.\nneocomplcache will close preview window in default.\n. I fixed it.\n. > 3.then, release it,\nWhat's the release?\nPlease tell me the keymappings in detail.\nI think you should map to <C-e> and <C-y>.\n```\ninoremap   pumvisible() ? neocomplete#close_popup() :  \"\\\\\"\"\ninoremap   pumvisible() ? neocomplete#cancel_popup() : \"\\\"\n```\n. OK. This is Vim's feature.\nBecause, neocomplcache/neocomplete.vim uses keymappings hacks.\nLike this:\nreturn  !pumvisible() ? \"\" :\n        \\ g:neocomplete#enable_auto_select ? \"\\<C-p>\\<Down>\" :\n        \\ \"\\<C-p>\"\nIf neocomplcache/neocomplete.vim opens popup menu, the first candidate is automatically selected.\nBut it is not intended behavior for auto completion.\nSo auto completion plugins uses the hack like \"\".\nBut if your Vim is too slow, it flicks.\nIt is Vim's feature. I cannot fix it.\n. But I and Nayuri Aohime developped this patch.\nhttps://groups.google.com/forum/?hl=ja&fromgroups#!topic/vim_dev/tVsk0pdOGvs\nif you apply this patch, this behavior is fixed in neocomplete.vim.\nSo, you may support this patch in vim_dev.\nBecause, Mr.Bram does not responce to it...\n. The patch is already todo listed in long time...\n. :help g:neocomplcache_auto_completion_start_length\n. Thanks.\n. let g:neocomplcache_disabled_sources_list={}\nlet g:neocomplcache_disabled_sources_list._ = ['syntax_complete']\n. > let g:neocomplcache_disable_caching_file_path_pattern = \".txt\"\n\nit don't work!\n\nYou must set g:neocomplcache_disable_caching_file_path_pattern by regular expression.\nExample:\nlet g:neocomplcache_disable_caching_file_path_pattern = '.*\\.txt$'\n\nlet g:neocomplcache_caching_limit_file_size = 1\nIt don't work too!\n\nYou must clear cache by :NeoComplCacheClean.\n. > When editing large files if use neocomplcache, the speed is very slow.Because neocomplcache is caching files.\n\nSo, I look the docment, and find two options.\n\nYou should use neocomplete.vim. It is faster than neocomplcache.\nhttps://github.com/Shougo/neocomplete.vim\n. I'm using Vim 7.3.1195. And it is works.\nI think you don't write neocomplete's settings.\nNote: neocomplete settings is not compatible with neocomplcache!\nIt is different plugin.\n. This is neocomplcache feature.\nYou can use vimproc for caching.\nhttps://github.com/Shougo/vimproc.vim\n. Please refer to FAQ.\n```\nQ: I like moving cursor by cursor-keys.  But neocomplcache popups menus...\nA: Please set this in your .vimrc.  Note that this feature requires Vim 7.3.418\nor later.\n    let g:neocomplcache_enable_insert_char_pre = 1\n```\n. It is feature.\nBut in neocomplete.vim, you can refresh always by g:neocomplete#enable_refresh_always. But it is heavy feature.\n. > it don't display all word that are in dictionary \n\nlet g:neocomplcache_max_list = 20\n\nYour g:neocomplcache_max_list is too small.\n. Yes. Because, it is narrowed by Vim.\nI think initial candidates when popup are 20 items.\n. I don't use minibufexpl. But it is not neocomplcache problem.\nYou can check neocomplcache condition by neocomplcache#is_locked().\nOr your settings problem for minibufexpl.\n. This issue is happened in neoocomplete.vim?\nI don't want to modify neocomplcache. It is old and slow.\n. > First, your announcement that it is usable in production (but good to hear that the new completion system is in focus now).\nThe announcement is already exists.\nIn neocomplcache documentation:\n```\nIf you use Vim 7.3.885 or above with if_lua feature, you should use neocomplete. It is faster than neocomplcache.\nhttps://github.com/Shougo/neocomplete.vim\n```\n. > So I just have to figure out how to build \"my\" own vim, setting the right flags on configure. How do you compile your vim, if you do (just the step of ./configure)?\nHmm.. But I think it is not my work.\n. OK. My current vim build script is in this:\nhttps://github.com/Shougo/shougo-s-github/blob/master/build-vim.sh\n. I fixed it.\n. No. But neocomplcache implemented lazy initialize feature.\nSo, you must input some characters in buffer.\nIf you dislike this feature, you can initialize neocomplcache manually by neocomplcache#initialize().\n. > ps: NeoCompleteCache is the latest version.\nWhat's the \"NeoCompleteCache\"?\n\nyes , I typed some words already ,but the complete menu didn't popup.\n\nIs neocomplcache#initializa() works?\n. OK.\n. I think it is pattern problem.\nvim\nlet g:neocomplcache_force_omni_patterns.python = '[^. \\t]\\.\\w*'\nYou should use neocomplete instead of neocomplcache.\n. > But the mru and fuzzy match features can't be applied to standard package member completing.\nIt is force omni patterns feature.\n\nSo i wonder can neocomplete reach that?\n\nIf you use force omni patterns, it is same behavior.\nBut if you use omni patterns, these features are enabled.\n. \u6b8b\u5ff5\u306a\u304c\u3089\u3001neocomplcache\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092async\u5074\u3067\u306f\u53c2\u7167\u3067\u304d\u306a\u3044\u306e\u3067\u3001neocomplcache\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3059\u308b\u306e\u306f\u7121\u7406\u3067\u3059\u3002\u305f\u3060\u3001\u96a0\u3057\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n. \u3082\u3046\u3061\u3087\u3063\u3068\u6319\u52d5\u3092\u6539\u826f\u3057\u307e\u3057\u305f\u3002\n. > In my environment, when I tab select words in the popupwindow, press the two key makes no difference. They all complete the word.\nI think you should use neocomplcache#smart_close_popup() and neocomplcache#smart_close_popup().\n\nIn my environment, when I tab select words in the popupwindow, press the two key makes no difference. They all complete the word.\n\nneocomplcache#close_popup() insert current candidate, but neocomplcache#cancel_popup() does not insert current candidate.\n. I use neocomplete.vim. And this settings are works.\nI don't want to change neocomplcache. Can you test it in neocomplete.vim?\nvim\n  \" <C-y>: paste.\n  inoremap <expr><C-y>  pumvisible() ? neocomplete#close_popup() :  \"\\<C-r>\\\"\"\n  \" <C-e>: close popup.\n  inoremap <expr><C-e>  pumvisible() ? neocomplete#cancel_popup() : \"\\<End>\"\n. OK.\n. Please read documentation.\ninoremap <expr><C-y>  neocomplcache#close_popup()\n    inoremap <expr><C-e>  neocomplcache#cancel_popup()\n. > It totally disable  and  behavior in insert mode.\nYou can custom these mappings.\n. > Would you be able to add this functionality to be default for Neocomplcache? And make the solution better than mine ;-) I think it is quite useful this way. \nI think the behavior is not neocomplcache function. So I reject it.\n. \u30de\u30fc\u30b8\u3057\u307e\u3057\u305f\u3002\n. > However, when I do hit enter and it's not a snippet (noted with [B]) it simply close the popup window without completing the string...\nTo complete string, you must select candidate. It is Vim's feature.\n. It works but you must initialize cache files by :NeoComplCacheClean command.\n. > I tried to type :NeoComplCacheCachingDictionary just after vim startup, but no luck (I get E121: Undefined variable: g:neocomplcache_dictionary_patterns)\nYou must execute call neocomplcache#initialize() before it.\n. > Indeed I don't have the \"undefined variable\" error anymore, but my dictionary files still don't seem to be loaded at startup. \nTo cache dictionary, you must set filetype same to dictionary filetype.\n\nThe first time the keyword list shows up still takes about 6 seconds. Is there anything else to do ?\n\nYou should install vimproc.\nhttps://github.com/Shougo/vimproc.vim\n. I don't know why your :NeoComplCacheCachingDictionary is not work.\nSorry, I can't fix.\n. You should put call neocomplcache#initialize() and NeoComplCacheCachingDictionary in your .vimrc.\n. You may use neocomplete.vim instead of neocomplcache. It is faster.\nhttps://github.com/Shougo/neocomplete.vim\n\nI'm using 2 dictionary files, english and french, together they weigh about 3 Mbytes.\n\nI think your dictionary file is too big. Vim script is slow.\nYou should not use big dictionary.\n. I think you should use g:neocomplcache_force_omni_patterns instead of g:neocomplcache_omni_patterns.\nSome omnifunc is not supported g:neocomplcache_omni_patterns.\n. Is it same problem?\nhttps://github.com/Shougo/neocomplete.vim/issues/42\n. Please explain detailed information to me with screenshot.\n. Thanks.\nCan you upload the erlang script for test?\nI will test it.\n. I fixed it.\nPlease update neocomplete and execute :NeoCompleteClean command.\n. It is impossible. Because it is Vim's feature.\nVim is not intended for auto completion.\nBut you can configure it by below settings.\nautocmd VimEnter *\n      \\ highlight ModeMsg guifg=bg guibg=bg | highlight WarningMsg guifg=bg\n. > Why is not Vim intended for auto completion\nIntended features are already implemeted in Vim buitin features.\nBut auto completion is not.\nVim default behavior is for manual completion. Not auto completion.\n. > Hmmm, I figured there might be a way like you can with key commands where you specify <silent>, like:\nYou can request this feature in vim_dev.\n. I can merge it if you created pull request.\n. Sorry, I fixed it.\n. This is not neocomplcache problem.\nYou should post it in other forum like reddit.\n. OK. I get it.\nneocomplcache searches modules by python or python3 commands from $PATH.\nBut you can change the paths by g:neocomplcache_include_paths.\nIf you install vimproc, neocomplcache use vimproc to search commands.\nBut vimproc cannot know virtualenv environment.\n. This is Vim internal feature(it is not neocomplcache problem).\n<Up>/<Down> key mappings is hard coded in Vim internal source.\nSo, you cannot custom it.\n. call neosnippet#initialize()\ncall neocomplcache#initialize()\n. I fixed it.\n. It is feature. Because \"longest\" completeopt conflicts with auto\ncompletion.  To use \"longest\" option, you must disable auto completion.\n\"longest\" is good feature. But it is for manual completion only.\n. Nothing.\nI don't recommend to use it.\n. > I'm asking because in HTML for instance if I start typing class strings like class=\"control-group pull-right\" or even longer suggestions come up. Truncating the length of the suggestions isn't really a solution because I may have words that are very long.\nNo. Because it created by css omnifunc. To complete words only, you must disable css omnifunc.\n. To add dictionaries, you must change dictionary option or g:neocomplcache_dictionary_filetype_lists.\n. > Is there a command that allows me to do this on the fly, rather than by editing the .vimrc?\nNo. But you can write it.\n. Thanks.\n. No. Because neocomplcache/neocomplete must create cache files.\nAnd I don't want to add feature in neocomplcache.vim. It is maintenance only.\nI may add this feature in neocomplete.vim as possible.\n. I implemented this feature in neocomplete.vim.\nYou should use it.\nhttps://github.com/Shougo/neocomplete.vim\n. OK, OK. I implemented your feature in neocomplcache.vim.\nBut it is special case. I don't want to add feature in neocomplcache.\nNote: The debug is not enough. You must check it.\n. > I know that [S] is syntax complete, and [FI] is filename_include complete...etc.\n\nCould someone tells me what kind of these sources?\n\nIt is already available in documentation.\n```\nsuffix of complete candidates in popup menu declaration.\n(This will be good for user to know where candidate from and what it is.)\nfilename_complete          -> [F] {filename}\nfilename_include           -> [FI] {filename}\ndictionary_complete        -> [D] {words}\nmember_complete            -> [M] member\nbuffer_complete            -> [B] {buffername}\nsyntax_complete            -> [S] {syntax-keyword}\ninclude_complete           -> [I]\nneosnippet                 -> [neosnip]\nvim_complete               -> [vim] type\nomni_complete              -> [O]\ntags_complete              -> [T]\nother plugin sources       -> [plugin-name-prefix]\nother completefunc sources -> [plugin-name-prefix]\nother ftplugin sources     -> [plugin-name-prefix]\n\n```\n\nIs it possible to disable them?\n\nYou should read documentation.\n:help g:neocomplcache_disabled_sources_list\n. > I put the https://github.com/teramako/jscomplete-vim in my bundle.\n\nAnd it cause the unknow result.\n\nI don't understand your problem.\nYou must explain in detail.\nI think it is jscomplete problem. jscomplete cannot use source postfix(like \"[S]\").\nSo you cannot understand it.\n. > Is it possible to disable them?\nYou cannot disable it. It is automatically set.\n. The bookmarks candidates kinds are \"jump_list\". So you must change the settings.\ncall unite#custom_default_action('file,jump_list', 'tabopen')\n. I fixed the problem. Please update neocomplcache.\n. You should check manual completion by <C-x><C-o>.\nI think it is not neocomplcache problem.\n. This is Vim's bug. You must updated your Vim to latest of 7.4.\nhttp://code.google.com/p/vim/source/detail?r=460d5be9395ef3e05f4b1397ea98a5b54d825fc5\n. \u3064 \"converter_case\"\n\u4ed5\u69d8\u3067\u3059\u3002\u7121\u52b9\u306b\u3057\u305f\u3051\u308c\u3070\u3001converter_case\u3092\u7121\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n. It is from omni source.\nYou can change the behavior by g:neocomplete#sources#omni#input_patterns.\n. Yes. It is not neocomplcache problem.\n. > let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] \\t]\\%(.|->)|\\h\\w::'\nYou should use g:neocomplcache_force_omni_patterns instead of g:neocomplcache_omni_patterns.\n. Pull request is wellcome.  But I don't use neocomplcache, so I don't want to change it.\n\nThose of us using Neovim also can use it now even\nthough Neovim has neither python for YCM or Lua for Neocomplete.\n\nI need if_lua interface in neovim...\n. I think it is omni complete plugins problem.  It is not neocomplcache problem.\n. Bundle 'Shougo/neosnippet-snippets'\nis also needed(See neosnippet documentation).\n. Can you upload the screenshot?\nI want to look which plugin generated the completion candidates.\n. OK, I closed.\n. I think you should use neocomplcache#close_popup() instead of neocomplcache#smart_close_popup().\nvim\ninoremap <expr><space> pumvisible() ? neocomplcache#smart_close_popup().\"\\<space>\" : \"\\<space>\"\n. > That also fails. Both insert a space after the partial match instead of matching and then adding a space. \nI think you don't select the candidate.\n\nDoes neocomplcache do something with spaces inside the plugin? I saw something in my searches that suggested it might have to do with collision with certain snippet plugins.\n\nIt depends on snippet engine.\n. Sorry, neocomplcache is not supported.\nYou should disable \"filename_complete\" source or use neocomplete instead of neocomplcache.\n. No.  You should not call neocomplcache#mappings#complete_common_string() twice.\nI don't want to change neocomplcache code.\n. I improved neocomplete#mappings#complete_common_string() behavior.\nYou should use neocomplete.\n. It is impossible.  Sorry.\n. It is duplicated problem.\nhttps://github.com/terryma/vim-multiple-cursors/issues/51\nhttps://github.com/Shougo/neocomplete.vim/issues/128\n. Thanks.\n. It is feature.  In omni function, neocomplcache features are limited.\n. Thanks.\n. Unfortunatelly, it is feature.\nYou should execute :NeoComplCacheLock before the command.\n. I think your errored machine is not installed neocomplcache.\nYou should check it or reinstall it.\n. Yes.  It it Vim's feature.\n. Thanks.\n. OK.\n. \u6b8b\u5ff5\u306a\u304c\u3089\u3001neocomplcache\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u30aa\u30e0\u30cb\u88dc\u5b8c\uff08csscomplete.vim\uff09\u306e\u554f\u984c\u3067\u3059\u3002\n\u6bce\u56de\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u5de8\u5927\u306a\u30d5\u30a1\u30a4\u30eb\u3060\u3068\u9045\u304f\u306a\u308b\u306e\u306f\u5206\u304b\u308a\u307e\u3059\u3002\n. Well, to complete email address, you can select two ways.\n1: Create neocomplcache source or new omni function.\n2: Change g:neocomplcache_keyword_patterns.\n. Please upload the screenshot and your neocomplcache configuration.\nI will check it.\n. No response.\n. OK.  It seems good point.\nI may implement the feature in neocomplete.\nBut I don't want to change neocomplcache feature.  Sorry.\n. In neocomplete, you can complete files from buffer directory in file_include source.\n. For example, in C language:\n#include \"my|\"\n| is on the cursor.  You can get my prefixed include files.\nIt is current open file relative if the path option countains . character.\nI think it is better.\n. Thank you.\n. It is impossible.\n. It is feature.  You want to complete non English characters, you must change g:neocomplcache#keyword_patterns variable.\nhttps://github.com/Shougo/neocomplete.vim/issues/316\n. If you want to edit text filetype, you must change g:neocomplcache_keyword_patterns['text'].\n. I think you must regenerate cache by :NeoComplCacheClean.\n. It is same behavior on neocomplete?\nI don't want to change neocomplcache.  But if neocomplete, I will check it.\n. Oh, I get it.\nI think it is feature.  Because, neocomplete or neocomplcache ignore multibyte input.\n. It is neocomplete function.  But neocomplcache is same.\nvim\nfunction! neocomplete#is_multibyte_input(cur_text) \"{{{\n  return (exists('b:skk_on') && b:skk_on)\n        \\     || char2nr(split(a:cur_text, '\\zs')[-1]) > 0x80\nendfunction\"}}}\n. You cannot complete full multibyte input candidates like \u0442\u0435\u0441\u0442.\n. It is not bug.  It is intended feature.  Because, current GVim IM integration is buggy.\nAuto completion should not work on IM input.  So, neocomplete/neocomplcache ignores multibyte input.\n. I don't want to change neocomplcache code.  Pull request is wellcome.\n. I think the name should beg:neocomplcache_enable_multibyte_completion.\n. Well, neocomplcache has multibyte input bugs.  Can you check it?\n. Thanks.\n. You must not use Windows 8.3 patch.\nIt is not tested.\n. Can you send the pul reuqest for it?\nI don't want o change neocomplcache.\n. Yes.\n. Thanks.  But it is not possible.\nBecause, it is overwritten in Vim.  You cannot remap it in completion window.\nYou can request the feature in vim_dev.\n. You must change g:neocomplcache_keyword_patterns value.\n. It is neocomplete issue.  It is not neocomplcache.vim issue.\n. Thanks.\n. Please check your 'path' configuration.\nI think it does be not set properly.\n. Fixed it.\n. No.  Because, neocomplcache development is already finished.\nFor neovim, I will develop new completion plugin.\nhttps://github.com/Shougo/deoplete.nvim\nIt does not use completefunc anymore.\n. I don't understand your problem.\nneocomplcache supports keyword completion in C++.\nBut it is not omni completion.\n. vim\n    let g:clang_complete_auto = 0\n    let g:clang_auto_select = 0\n    let g:clang_default_keymappings = 0\n    \"let g:clang_use_library = 1\nAnd please set g:neocomplcache_force_omni_patterns.\n. Please read the documentation.\nvim\n    \" <TAB>: completion.\n    inoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n. > I have disabled some of the plugins that I suspect causing this issue like python-mode, syntastic and restarted the vim. Now, the cursor line is gone, but now, when I am typing over 80 characters, it's coming to the next line....\nIt is feature.  You should check #338.\nI think formatoptions is set.\n:verbose setlocal formatoptions?. You have set t option in the vimrc.\nSo neocomplcache is disabled after colorcolumn.\nIt conflicts with neocomplcache behavior.\nYou should learn :help fo-table.. Yes, but I don't want to support neocomplcache anymore.. In Python3 only environment, autocmd FileType python setlocal omnifunc=pythoncomplete#Complete is needed.\n\nI usually use vim edit python3, and occasionally edit python2. how can I fix it?\n\nYou should use Python3 complete instead.. Oh, I had mistake.\nvim\nautocmd FileType python setlocal omnifunc=python3complete#Complete. ",
    "insight1111": "\u5ff5\u306e\u305f\u3081\u3001\u307e\u3063\u3055\u3089\u306avim\u3067\u8a66\u3057\u3066\u3044\u307e\u3059\u3002_vimrc\u306b\u306f\u300clet g:NeoComplCache_EnableAtStartup = 1\u300d\u306e\u307f\u3092\u66f8\u3044\u3066\u307e\u3059\u3002\n\u5ff5\u306e\u305f\u3081\u3001\u8d77\u52d5\u5f8c\u306blet g:NeoComplCache_EnableQuickMatch=1\u3082\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001\n\u3084\u306f\u308a\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u304c\u52b9\u3044\u3066\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001c\u3001PHP\u3001ruby\u3001html\u306e\u5404\u5f62\u5f0f\u3067\u8a66\u3057\u307e\u3057\u305f\u304c\u3001\u7d50\u679c\u306f\u540c\u3058\u3067\u3057\u305f\u3002\n\u3042\u307e\u308a\u30cd\u30c3\u30c8\u4e0a\u3067\u3082\u3053\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306f\u306a\u3044\u3088\u3046\u3067\u3001\u81ea\u5206\u306e\u74b0\u5883\u304c\u60aa\u3055\u3092\u3057\u3066\u308b\u306e\n\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u30fb\u30fb\u30fb\u305f\u3060\u3001\u5225\u306ewindows\u7aef\u672b\u3067\u3084\u3063\u3066\u3082\u3001\u5ff5\u306e\u305f\u3081vmware\u4e0a\u306b\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305fubuntu\u4e0a\u3067\u3082\u3084\u306f\u308a\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3082\u3057\u304b\u3057\u3066\u3001\u6839\u672c\u7684\u306b\u6a5f\u80fd\u3092\u9593\u9055\u3063\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3001\u3082\u3057\u304f\u306f\n\u81ea\u5206\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u304b\u3082\u30fb\u30fb\u30fb\u3068\u3044\u3046\u6c17\u304c\u3057\u3066\n\u304d\u307e\u3057\u305f\u3002\n\u78ba\u8a8d\u306a\u306e\u3067\u3059\u304c\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba\u306e\u5834\u5408\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u3057\u3066\u304d\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\u3057\u3066\u3001\u305d\u306e\u4e2d\u306b\u3042\u308bdoc\u3084plugin\u30d5\u30a9\u30eb\u30c0\u3092\n\u305d\u306e\u307e\u307e$VIMRUNTIME\u4ee5\u4e0b\u306b\u3042\u308b\u540c\u540d\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u4e0a\u66f8\u304d\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08windows\u7248\u3067\u306f\\\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d5\u30a9\u30eb\u30c0\\runtime\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u3067\u3059\uff09\n\u305d\u306e\u4e0a\u3067_vimrc\u30d5\u30a1\u30a4\u30eb\u306b\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3092\u66f8\u3044\u3066\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n. Shougo\u69d8\u3001\u304a\u8fd4\u4e8b\u304c\u9045\u304f\u306a\u3063\u3066\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\n\u8a00\u308f\u308c\u308b\u901a\u308a\u3001.vimrc\u306bset completeopt=menuone\u3092\u8a18\u8ff0\u3057\u305f\u3068\u3053\u308d\u3001\n\u4e00\u89a7\u306e\u4e2d\u304b\u3089\u306e\u7d5e\u308a\u8fbc\u307f\u306b\u6210\u529f\u3057\u307e\u3057\u305f\uff01\uff01\uff01\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u4eca\u307e\u3067\u3069\u3046\u3084\u3063\u3066\u3082\u51fa\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u611f\u52d5\u3067\u3059\u3002\n\u6570\u5b57\u304b\u3089\u9078\u3079\u308b\u3060\u3051\u3067\u3001\u304b\u306a\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\u3042\u3068\u3001\u3064\u3044\u3067\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u7d5e\u308a\u8fbc\u3093\u3060\u5f8c\u3001\u305d\u306e\u7d50\u679c\u304c\n\u6700\u521d\u306f\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u306f\u306a\u304f\u3001Ctrl+P\u306a\u308aCtrl+N\u306a\u308a\u3092\u62bc\u3057\u3066\u521d\u3081\u3066\u305d\u306e\u30ef\u30fc\u30c9\u304c\n\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001\u4f8b\u3048\u3070\u3001\u3053\u308c\u304c\u6700\u521d\u304b\u3089\u4e00\u756a\u4e0a\u306e\u3082\u306e\u304c\u9078\u3070\u308c\u305f\n\u72b6\u614b\u306b\u306a\u308b\u4e8b\u306f\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4f8b\u30fb\u753b\u9762\u4e0a\u306e\u9077\u79fb\uff09\n<tab\u2192\u5019\u88dc\u4e00\u89a7\u304c\u8868\u793a\n<tab2\u2192\u7d5e\u308a\u8fbc\u307f\u3067\u6570\u5b57\u30ad\u30fc\u5165\u529b\uff08\u88dc\u5b8c\u5bfe\u8c61\u30ef\u30fc\u30c9\u306e\u5f8c\u306b\u306f\u7d5e\u308a\u8fbc\u307f\u306e\u70ba\u306b\u5165\u529b\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3057\u305f\u6570\u5b57\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\uff09\n<table\u2192Ctrl+P\u5165\u529b\u3067\u88dc\u5b8c\u5168\u4f53\u306e\u6587\u5b57\u5217\u304c\u8868\u793a\u3055\u308c\u308b\n\u3053\u308c\u304c\u3001\u6700\u521d\u306b\u7d5e\u308a\u8fbc\u3093\u3060\u6642\u70b9\u3067\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u306a\u3063\u3066\u3044\u3066\u3082\u3089\u3048\u308b\u3068\u3001\u30b9\u30e0\u30fc\u30ba\n\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u306e\u3067\u30fb\u30fb\u30fb\u3082\u3057\u3067\u304d\u306a\u3051\u308c\u3070\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n. \u3059\u307f\u307e\u305b\u3093\u30fb\u30fb\u30fb\uff01\u30af\u30a4\u30c3\u30af\u30de\u30c3\u30c1\u306e\u5bfe\u5fdc\u307e\u3067\u3057\u3066\u3044\u305f\u3060\u3044\u305f\u306e\u306b\u3001\u66f4\u306b\u8981\u671b\u307e\u3067\n\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u3002\n\u305f\u3060\u3001\u3082\u3057\u3053\u308c\u304c\u53ef\u80fd\u306a\u3089\u3088\u308a\u30b9\u30e0\u30fc\u30ba\u306b\u3067\u304d\u306a\u3044\u304b\u306a\u3001\u3068\u601d\u3063\u3066\u3057\u307e\u3063\u305f\u3082\u306e\u3067\u30fb\u30fb\u30fb\n. \u305f\u3060\u4eca\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\uff01\uff01\uff01\uff01\n\u3053\u308c\u3067\u3001\u307e\u305f\u683c\u6bb5\u306b\u5165\u529b\u304c\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u306b\u308f\u3056\u308f\u3056\n\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u4e00\u3064\u3042\u3052\u3066\u3082\u3044\u305f\u3060\u3044\u3066\u30fb\u30fb\u30fb\n\u672c\u5f53\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. \u3042\u3068\u3001\u4eca\u30d0\u30fc\u30b8\u30e7\u30f32.68\u3067\u306f\u3000\u9589\u3058\u30bf\u30b0 \u3092\u5165\u529b\u3057\u305f\u6642\u70b9\u3067E121\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n. Shougo\u69d8\u3001\u524d\u56de\u306b\u5f15\u304d\u7d9a\u304d\u4eca\u56de\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u3082\u306e\u3059\u3054\u304f\u5bfe\u7b56\u306b\u52d5\u304f\u306e\u304c\u65e9\u3044\u306e\u3067\u3001\u7d20\u6674\u3089\u3057\u3044\u306a\u3041\u3001\u3068\u3044\u3064\u3082\u611f\u5fc3\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u958b\u59cb\u30bf\u30b0\u306b\u3064\u3044\u3066\u306f\u89e3\u6c7a\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u9589\u3058\u30bf\u30b0\u306b\u3064\u3044\u3066\u306f\u3001\u4e00\u5ea6\nfunction <SNR40_complete..40_get_complete_omni\u306e\u51e6\u7406\u4e2d\u306b\n\u30a8\u30e9\u30fc\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\u884c33:\nE121:\u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059\uff1a\u3000word\n\u3068\u3044\u3046\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\u305d\u306e\u307e\u307e\u30ad\u30fc\u3092\u62bc\u3059\u3068\u5165\u529b\u306f\u53ef\u80fd\u306a\u306e\u3067\u3001\n\u4f7f\u7528\u306f\u3067\u304d\u307e\u3059\u3002\n. \u3053\u3061\u3089\u306e\u74b0\u5883\u306e\u305b\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u518d\u5ea62.68\u3092\u4f7f\u3048\u3070\u3044\u3044\u3093\u3067\u3059\u3088\u306d\uff1f\n\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n. \u91cd\u306d\u91cd\u306d\u3059\u307f\u307e\u305b\u3093\uff01\n\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u30a8\u30e9\u30fc\u306f\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u30fb\u30fb\u30fb\u3067\u3059\u304c\u3001\u4f8b\u3048\u3070\ntest title\n\u3068\u5165\u529b\u3057\u305f\u6642\u70b9\u3067\n</\u3068\u5165\u529b\u3059\u308b\u3068\u3001\u305d\u3053\u306b\u51fa\u3066\u304f\u308b\u5019\u88dc\u306f0:t[0] \u3068\u3060\u3051\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u4eca\u3001\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u3001\u5b8c\u5168\u306b\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\u8b58\u6b63\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. \u74b0\u5883\u306e\u60c5\u5831\u63d0\u793a\u304c\u3044\u3044\u52a0\u6e1b\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ef0\u3089\u308c\u308b\u901a\u308a\u3001ctags\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nVer.6.2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3089\u3001\u30a8\u30e9\u30fc\u304c\u3067\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u65e9\u901f\u5bfe\u5fdc\u3057\u3066\u3044\u305f\u3060\u3044\u3066\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. \u3059\u307f\u307e\u305b\u3093\u3002\u5f53\u65b9\u306e\u72b6\u6cc1\u8aac\u660e\u304c\u8db3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u65b0\u898f\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u3053\u3046\u3068\u3057\u307e\u3059\u3002:e test.txt\u3068\u3057\u305f\u3042\u3068\u3001\n\u30a4\u30f3\u30b5\u30fc\u30c8\u30e2\u30fc\u30c9\u306b\u5165\u308a\u3001\ntokyo\nosaka\nnagoya\nhiroshima\nfukuoka\n\u30fb\u30fb\u30fb\u3068\u5165\u529b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u5165\u529b\u3057\u3066\u3044\u308b\u9593\u3058\u3085\u3046\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u30d0\u30fc\u4e0b\u306b\u306f\u4e00\u6587\u5b57\u5165\u529b\u3059\u308b\u6bce\u306b\n\u300c--\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c(^U^N^P)\u30d1\u30bf\u30fc\u30f3\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u300d\u3068\n\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3082\u5168\u304f\u51fa\u306a\u3044\u72b6\u614b\u3067\u3059\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070\u30012\u6587\u5b57\u307b\u3069\u5165\u529b\u3057\u305f\u6642\u306b\u81ea\u52d5\u3067\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5019\u88dc\u304b\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\n\u3055\u308c\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u304c\u51fa\u306a\u3044\u72b6\u614b\u3067\u3059\u3002\n\u3057\u3070\u3089\u304f\u305d\u3093\u306a\u72b6\u614b\u3067\u4f7f\u3044\u7d9a\u3051\u3066\u3044\u307e\u3057\u3066\u3001\u3053\u308c\u307e\u3067\u306f\u6b62\u3080\u7121\u304fC-N\u3067\n\u624b\u52d5\u88dc\u5b8c\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5e38\u306b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u30e2\u30fc\u30c9\uff08\uff1f\uff09\u306b\n\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001C-N\u3067\u306e\u624b\u52d5\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u3001\u8cea\u554f\u3057\u307e\u3057\u305f\u3002\nEsc\u3067\u4e00\u56de\u9003\u3052\u3066\u518d\u3073i\u3067\u30a4\u30f3\u30b5\u30fc\u30c8\u30e2\u30fc\u30c9\u306b\u5165\u3063\u305f\u76f4\u5f8c\u306f\u300c\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u300d\u4e91\u3005\u306f\n\u3067\u306a\u3044\u306e\u3067C-N\u3067\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5019\u88dc\u304c\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u306b\u3067\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u518d\u5ea6\u30ad\u30fc\u3092\u5165\u529b\u3057\u3066\u3044\u304f\u3068\u3001\u518d\u30731\u6587\u5b57\u5165\u529b\u3059\u308b\u6bce\u306b\u300c\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u30fb\u30fb\u30fb\u300d\u304c\n\u5e38\u306b\u8868\u793a\u3055\u308c\u3066\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3082\u51fa\u307e\u305b\u3093\u3002\n\u3067\u3059\u304c\u3001\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u308c\u306a\u3044\u306e\u306f\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u306e\u307f\u3067\u3001\u4f8b\u3048\u3070HTML\u7de8\u96c6\u6642\u306b\n<\u3068\u5165\u529b\u3059\u308c\u3070\u3001\u30bf\u30b0\u306e\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u3001vimshell\u8d77\u52d5\u6642\u306b\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u88dc\u5b8c\u3082\u81ea\u52d5\u3067\n\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\u306a\u306e\u3067\u3001omni\u88dc\u5b8c\u3084\u30d5\u30a1\u30a4\u30eb\u540d\u88dc\u5b8c\u306f\u5927\u4e08\u592b\u306a\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001\u73fe\u5728\u306e\u3072\u3063\u304d\u308a\u306a\u3057\u306b\u300c\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u300d\u3060\u3051\u304c\u8868\u793a\u3055\u308c\u3066\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u304c\u3067\u306a\u3044\u72b6\u614b\u3067\u3082\nshougo\u69d8\u304c\u8a00\u308f\u308c\u308b\u901a\u308aC-e\u3067\u6d88\u305b\u308b\u306e\u3067\u3001\u305d\u3053\u304b\u3089C-n\u3067\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5019\u88dc\u304c\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\n\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u4f7f\u304a\u3046\u3068\u601d\u3044\u307e\u3059\u3002\u4e0b\u624b\u306a\u8aac\u660e\u3067\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u3002\n. \u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f:NeoComplCacheCachingBuffer\u3092\u5b9f\u884c\u3057\u307e\u3057\u305f\u304c\u3001\u3084\u306f\u308a\u5019\u88dc\u306b\u306f\n\u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044\u3067\u3059\u30fb\u30fb\u30fb\n\u591a\u5206\u81ea\u5206\u306e\u74b0\u5883\u4f9d\u5b58\u306e\u554f\u984c\u306e\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u3057\u3070\u3089\u304f6.1\u3092\u4f7f\u304a\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n. \u5bfe\u5fdc\u3044\u305f\u3060\u3044\u3066\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u65e9\u901f\u5c0e\u5165\u3057\u307e\u3057\u305f\u304c\u3001\u901a\u5e38\u4f55\u3082\u3057\u306a\u3051\u308c\u3070\u3001\u3084\u306f\u308a\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u304c\u3001\n:NeoComplCacheCachingBuffer\u3092\u5b9f\u884c\u3059\u308c\u3070\u305d\u306e\u6642\u70b9\u3067\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\n\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. ",
    "didzis": "It seems that it's working well.\nThank you!\n. Your F5 remap did work when ir replaced it with the one in\n.vim/ftplugin/objc_cocoa_mappings.vim\nThanks!\nNow it's only that by default for method names it shows different completion mode, so I have to always press F5 manually. Is it possible to configure neocomplcache to show this kind of completion menu for method names, i.e.,\nafter [someobject methodname... ?\n. Thank you! It's nice to see so active development!\n. ",
    "hnagato": "\u66f4\u65b0\u304a\u3064\u304b\u308c\u3055\u307e\u3067\u3059\u3002\u4e8b\u8c61\u628a\u63e1\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3059\u306d\u3001\u3059\u307f\u307e\u305b\u3093\u3002\nVer.3.02 \u3067\u89e3\u6d88\u3055\u308c\u3066\u304a\u308a\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. ",
    "kakatofu": "v3.06\u4ee5\u964d\u306e\u4fee\u6b63\u3092\u53d6\u308a\u3053\u3093\u3060\u3089\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3059\u307f\u307e\u305b\u3093\u3001master\u3092\u53d6\u3063\u3066\u304d\u305f\u3064\u3082\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u304a\u9a12\u304c\u305b\u3057\u307e\u3057\u305f\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3055\u305b\u305f\u3068\u304d\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u524a\u9664\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n. g:NeoComplCache_TermporaryDir\u4e2d\u306ebuffer_cache, include_cache, syntax_cache, tags_cache\u3092\u524a\u9664\u3057\u3066\u3082\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u4eca\u5ea6\u306fpython\u3002\n\"sre.py\" \n\"sre.py\" [\u5909\u63db\u6e08] 13L, 397C\nCaching syntax \"python\"... please wait.\nfunction 52_check_buffer_all..52_check_buffer..52_check_include..52_load_from_tags \u306e\u51e6\u7406\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f:\n\u884c   63:\nE684: \u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3067\u3059: 2\nE116: Invalid arguments for function substitute(l:tag[2], '^[/?]^\\?\\s_|\\$\\?[/?];\"$', '', 'g'), '\\', '\\', 'g') }\nE116: Invalid arguments for function substitute(substitute(l:tag[2], '^[/?]^\\?\\s_|\\$\\?[/?];\"$', '', 'g'), '\\', '\\', 'g') }\nE15: \u7121\u52b9\u306a\u5f0f\u3067\u3059: { 'cmd' : substitute(substitute(l:tag[2], '^[/?]^\\?\\s*|\\$\\?[/?];\"$', '', 'g'), '\\', '\\', 'g') }\n\u884c   74:\nE121: \u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059: l:option\nE116: Invalid arguments for function has_key(l:option, 'file') || (has_key(l:option, 'access') && l:option.access != 'public')\nE15: \u7121\u52b9\u306a\u5f0f\u3067\u3059: has_key(l:option, 'file') || (has_key(l:option, 'access') && l:option.access != 'public')\n\u884c   79:\nE684: \u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3067\u3059: 3\nE15: \u7121\u52b9\u306a\u5f0f\u3067\u3059: (l:tag[3] == 'd' || l:option['cmd'] == '')? l:tag[0] : l:option['cmd']\n\u884c   80:\nE121: \u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059: l:abbr\nE116: Invalid arguments for function len(l:abbr) > g:NeoComplCache_MaxKeywordWidth)?    printf(l:abbr_pattern, l:abbr, l:abbr[-8:]) : l:abbr, 'kind' : l:option['kind']}\nE15: \u7121\u52b9\u306a\u5f0f\u3067\u3059: { 'word' : l:tag[0], 'rank' : 5, 'prev_rank' : 0, 'prepre_rank' : 0, 'icase' : 1, 'abbr' : (len(l:abbr) > g:NeoComplCache_MaxKeywordWidth)?    printf(l:abbr_pattern, l:abbr, l:abbr[-8:]) : l:abbr, 'kind' : l:option['kind']}\n\u884c   86:\nE121: \u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059: l:option\nE116: Invalid arguments for function has_key(l:option, 'struct')\nE15: \u7121\u52b9\u306a\u5f0f\u3067\u3059: has_key(l:option, 'struct')\n\u884c  100:\nE121: \u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059: l:keyword\nE116: Invalid arguments for function add\n. \u79c1\u306e\u74b0\u5883\u3092\u7591\u3063\u3066\u3001vim\u3092\u7d20\u306e\u72b6\u614b\u3067\u8a66\u3057\u305f\u3089\u767a\u751f\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nkaoriya gvim / windows\n\u74b0\u5883\u4f9d\u5b58\u3067\u3059\u306d\u3002\u4f55\u304c\u60aa\u3044\u3093\u3060\u308d\u3046\u3002\n\u3061\u306a\u307f\u306b\u3001\u4eca\u307e\u3067\u306e\u74b0\u5883\u3067v3.10\u3067\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\n\u30a8\u30e9\u30fc\u306f\u767a\u751f\u3059\u308b\u306e\u3067\u3059\u304cinclude_cache\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3082tags_cache\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3082\u30ed\u30b0\u306f\u5410\u304b\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\nneocomplcache\u306e\u3055\u3089\u306a\u308b\u767a\u5c55\u3092\u671f\u5f85\u3057\u3066\u307e\u3059\u3002\n. ",
    "thinca": "\u4fee\u6b63\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002Shougo++\n. \u30df\u30b9\u3002 escape(s:old_text, '\\') \u304c\u6b63\u89e3\u3002\n. \u3042\u30fc\u3001\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u6d88\u3055\u308c\u3066\u308b\u2026orz\nescape(s:old_text, '\\') \u3053\u3046\u304b\u306a?\n. \u304a\u304a\u3001\u3059\u3044\u307e\u305b\u3093\u3002\u66f4\u65b0\u3057\u305d\u3073\u308c\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\nneocomplcache#head_match() \u3067\u3059\u306d\u3002\n\u3064\u3044\u3067\u3067\u3059\u304c\u3001\u82f1\u5b57\u3092\u542b\u3080\u53ef\u80fd\u6027\u306e\u3042\u308b\u6587\u5b57\u5217\u6bd4\u8f03\u306f\u660e\u78ba\u306a\u76ee\u7684\u304c\u306a\u3044\u9650\u308a ==# \u304b ==? \u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3088\u3002\n. \u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\u6c17\u9577\u306b\u5f85\u3063\u3066\u307e\u3059\u3002\n\u3082\u3057\u539f\u56e0\u7b87\u6240\u304c\u7279\u5b9a\u3067\u304d\u305f\u3089\u307e\u305f\u30b3\u30e1\u30f3\u30c8\u3057\u307e\u3059\u3002\n. \u3061\u3083\u3093\u3068\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n. Fixed https://github.com/vim-jp/vital.vim/commit/a477c91958c00fdfe5932480a1b3f17b9fa39c0a\nPlease update the vital of neocomplcache.\n. ",
    "tty170": "\u30ec\u30b9\u9045\u308c\u3066\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002\n:pyhon print \"hello world\"\n\u3068\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\nPython\u306e\u30d1\u30b9\u306f\nC:\\Python26;C:\\Python26\\Scripts\n\u306e2\u7b87\u6240\u306b\u901a\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u901a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u4ed6\u306b\u4f55\u304b\u30c1\u30a7\u30c3\u30af\u3059\u3079\u304d\u3068\u3053\u308d\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n. \u30ec\u30b9\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n:python\u306f\u52d5\u4f5c\u3057\u307e\u3057\u305f\u304c\u3001neocomplcache\u3092\u5207\u3063\u3066\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u52d5\u4f5c\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u539f\u56e0\u306f\u5224\u660e\u3057\u305f\u306e\u3067\u3001\u3044\u3063\u305f\u3093\u30af\u30ed\u30fc\u30ba\u3057\u3066\u307e\u305f\u9032\u5c55\u304c\u3042\u3063\u305f\u3089\u3053\u3061\u3089\u306b\u5831\u544a\u3057\u307e\u3059\u3002\n\u30a2\u30c9\u30d0\u30a4\u30b9\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. \u539f\u56e0\u304c\u5224\u660e\u3057\u305f\u306e\u3067\u5831\u544a\u3057\u307e\u3059\u3002\nKaoriya\u7248gvim\u306eREADME\u3092\u898b\u308b\u3068Python2.5\u3067\u30d3\u30eb\u30c9\u3057\u305f\u3088\u3046\u3067\u3001\u88dc\u5b8c\u3092\u884c\u3046\u3068Python2.5\u306e\u6a19\u6e96\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u898b\u3066pythonautocomplete\u304c\u88dc\u5b8c\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\u6b63\u5e38\u306b\u52d5\u3044\u3066\u3044\u305f\u30de\u30b7\u30f3\u306fPython2.5\u304c\u5165\u3063\u3066\u3044\u3066\u3001\u52d5\u4f5c\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u30de\u30b7\u30f3\u306fPython2.6\u3057\u304b\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3053\u306e\u305f\u3081\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305aPython2.6\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3054\u3068\u30b3\u30d4\u30fc\u3092\u884c\u3063\u3066\u3001Python25\u306b\u30ea\u30cd\u30fc\u30e0\u3057\u305f\u3068\u3053\u308d\u30a8\u30e9\u30fc\u306f\u3067\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nneocomplcache\u3068\u306f\u307e\u3063\u305f\u304f\u95a2\u4fc2\u306a\u3044\u3068\u3053\u308d\u3092\u8cea\u554f\u3057\u305f\u306b\u3082\u95a2\u308f\u3089\u305a\u5bfe\u5fdc\u3057\u3066\u3044\u305f\u3060\u304d\u672c\u5f53\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u672c\u4ef6\u306f\u3053\u308c\u3067\u5b8c\u5168\u30af\u30ed\u30fc\u30ba\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n. ",
    "naquad": "thats not really convenient. is there any way to make it expand after selection programmatically?\n. i'm already using snipMate and snippets are shown. the question is how do i make neocomplcache to expand snippet i've selected w/o pressing C-l?\n. I've explored AutoComplPop source code (another autocompletion plugin), and found out next: to make post action, acp simply does something like this:\n    feedkeys('=acp#onPopupPost()')\nas i understand it's not neocomplcache case :(\n. Works! Perfect, thank you.\n. Sorry, my bad. Found it in manual, but after update I just downloaded I don't see snippets in suggesions at all :(\n. did rm -rf ~/.vim and reinstalled everything. somehow helped.\n. also is it possible to fix http://img265.imageshack.us/img265/8679/54924666.png ? so when you have only 1 option and your current word = this opton don't show popup?\n. most probably i did it wrong, but it works:\n```\ndiff --git a/autoload/neocomplcache.vim b/autoload/neocomplcache.vim\nindex 71df640..e6ab034 100644\n--- a/autoload/neocomplcache.vim\n+++ b/autoload/neocomplcache.vim\n@@ -773,6 +773,13 @@ function! neocomplcache#keyword_escape(cur_keyword_str)\"{{{\n   \" echomsg keyword_escape\n   return keyword_escape\n endfunction\"}}}\n+function! neocomplcache#check_not_already_chosen(cur_keyword_str, list)\"{{{\n+  if len(a:list) == 1 && a:cur_keyword_str == a:list[0]\n+    return []\n+  else\n+    return a:list\n+  endif\n+endfunction\"}}}\n function! neocomplcache#keyword_filter(list, cur_keyword_str)\"{{{\n   let cur_keyword_str = a:cur_keyword_str\n@@ -788,11 +795,11 @@ function! neocomplcache#keyword_filter(list, cur_keyword_str)\"{{{\n     return a:list\n   elseif neocomplcache#check_match_filter(cur_keyword_str)\n     \" Match filter.\n-    return filter(a:list, printf('v:val.word =~ %s',\n-          \\string('^' . neocomplcache#keyword_escape(cur_keyword_str))))\n+    return neocomplcache#check_not_already_chosen(cur_keyword_str, filter(a:list, printf('v:val.word =~ %s',\n+          \\string('^' . neocomplcache#keyword_escape(cur_keyword_str)))))\n   else\n     \" Use fast filter.\n-    return neocomplcache#head_filter(a:list, cur_keyword_str)\n+    return neocomplcache#check_not_already_chosen(cur_keyword_str, neocomplcache#head_filter(a:list, cur_keyword_str))\n   endif\n endfunction\"}}}\n function! neocomplcache#dup_filter(list)\"{{{\n```\nstill would be nice to find out how to do that correctly\n. the problem is when i choose completion suggestion i still have menu open with 1 suggestion. exactly the same i've chosen. when i move cursor to the end of the word story repeats. i want to fix that. stupid patch above just checks: if we have only one suggestion and this suggestion is the current word then return empty list.\n. same trouble. http://img828.imageshack.us/img828/1051/68373900.png . maybe i have wrong mapping?\nimap <expr><CR> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_force_expand)\" : \"\\<CR>\"\nP.S. how do i make neocomplcache to use other open buffers as sources? can't find in docs :(\n. Yes! Now it works absolutely perfect :) Thank you!\n. thank you!\n. doing return neocomplcache#smart_close_popup() didn't help either :( return neocomplcache#close_popup() worked out for insertion of current option, but it doesn't expand snippets.\n. I don't know how sane/right way this is, but it works:\nfunction! SnippetOrCR()        \n  if pumvisible()\n    \" put expansion in queue\n    call feedkeys(\"\\<Plug>(neocomplcache_snippets_expand)\")\n    \" complete with selected option\n    return neocomplcache#close_popup()\n  endif\n  return \"\\<CR>\"\nendfunction\n. P.S. doing return pumvisible() ? neocomplcache#smart_close_popup() .\"\\<Plug>(neocomplcache_snippets_force_expand)\" : \"\\<CR>\" didn't actually call \\<Plug>(neocomplcache_snippets_force_expand), it inserted <c-*some-insane-symbol*>(neocomplcache_snippets_force_expand) instead, so had to use feedkeys(). Most probably some plugin fault.\n. Yeah, works ok. Thank you for help and efforts :)\n. does nothing at all: neocomplcache#smart_close_popup() . maparg(\"<Plug>(neocomplcache_snippets_expand)>\", 'i')\ncompletes selected, but doesn't trigger snippet expansion: neocomplcache#close_popup() . maparg(\"<Plug>(neocomplcache_snippets_expand)>\", 'i')\n. from what i see maparg returns empty string\n. Ok, I have totally lost. As it finds out in some cases force expand somewhy moves cursor on 2 positions further.\nWhat I have atm:\n```\nfunction! CheckExpandable()\n  if neocomplcache#sources#snippets_complete#expandable()\n    return \"\\(neocomplcache_snippets_force_expand)\"\n  endif\nreturn ''\nendfunction\nfunction! SnippetOrCR()\n  if pumvisible()\n    call feedkeys(\"\\=CheckExpandable()\\\")\n    return neocomplcache#close_popup()\n  endif\n  return \"\\\"                                                                                                                                                                                                                            \nendfunction\nimap  =SnippetOrCR()\n```\nNow I get this on snippet + CR:\ndef<t_\u00fd>S(neocomplcache_snippets_force_expand)\nWhat am I doing wrong?\n. feedkeys to the rescue! Using feedkeys helped:\n```\nfunction! CheckExpandable()  \n  if neocomplcache#sources#snippets_complete#expandable()\n    call feedkeys(\"\\(neocomplcache_snippets_force_expand)\")\n  endif\nreturn ''                                                                                                                                                                                                                                 \nendfunction\nfunction! SnippetOrCR()      \n  if pumvisible()            \n    call feedkeys(\"\\=CheckExpandable()\\\")\n    return neocomplcache#close_popup()\n  endif\n  return \"\\\"             \nendfunction\n```\n. Result:\nattr_accessor :md5crypt\n  att<SNR>98_trigger(<SNR>98_SID_PREFIX().'snippets_expand_or_jump')\nin second case I've selected attr_accessor option from menu.\n. In the end I have this:\n```\nfunction! CheckExpandable()\n  if neocomplcache#sources#snippets_complete#expandable()\n    call feedkeys(\"\\(neocomplcache_snippets_force_expand)\")\n  endif\nreturn ''\nendfunction\nfunction! SnippetOrCR()\n  if pumvisible()\n    call feedkeys(\"\\=CheckExpandable()\\\")\n    return neocomplcache#close_popup()\n  endif\n  return \"\\\"\nendfunction\nfunction! SnippetOrTab()\n  if neocomplcache#sources#snippets_complete#expandable()\n    call feedkeys(\"\\(neocomplcache_snippets_jump)\")\n    return ''\n  endif\nreturn \"\\\"\nendfunction\nimap  =SnippetOrCR()\nimap  =SnippetOrTab()\n```\nWorks as expected. Still has issue when putting just snippet trigger (i.e. i want to just put def and I select buffer source in menu, but it gets expanded), but I can live with that. Thank you for help and efforts :)\n. summoning @Xorox . @Shougo could you please post errors you've ran into?\n. As I understand variable is g:neocomplcache_keyword_patterns['_'].\nI've set it to [\\k\u0410-\u042f\u0430-\u044f]\\+ (which works: :echo match('\u0442\u0435\u0441\u0442', '[\\k\u0410-\u042f\u0430-\u044f]\\+')) that didn't help :(\nAny clues?\nUPD: file was text (test.txt)\n. that didn't help either :(\n. let g:neocomplcache_keyword_patterns['text']=  '[\\k\u0430-\u044f\u0410-\u042f]\\+' - not working\n. Didn't help.\n. I don't have neocomplete and can't check it.\n. Erm so basically it can't be fixed because you call that bug a feature? 0o\n. Could you please add some option to turn this off? like g:neocomplcache_force_multibite or something\n. https://github.com/naquad/neocomplcache.vim/commit/77d518050489e04a4197faf75f74405b8123b200\nI've called it g:neocomplcache_allow_multibyte, but that can be changed. In any case that causes some unclear issue I can't figure out: completion looses last byte, i.e. was \u0442\u0435\u0441\u0442 and suggestion is \u0442\u0435\u0441. Trying to figure it out.\n. ",
    "lono175": "Thanks. I tried the following, and it gives me what I want. \n\nsnippet Inc\n       #include \"${1:`expand(\"%:t:r\")`}.h\"\n\n. Yeah. It works.\nThank you ^_^\n. Yes, the example above has been fixed.\nHowever, if there are no space before ${1}, it does not work.\nLike the following example:\n\nsnippet     if\n    if (${1}) {\n        ${0:/* code */}\n    }\n\n. It works. Thank you :)\n. My plugins are 'neocomplcache', 'clang_complete', and 'neocomplcache-clang_complete'\nThe key config is autocmd FileType objc  set omnifunc=ClangComplete\nWith this setting, neocomplcache will call omnifunc (ClangComplete) when the length of current text is more than 1 but less than g:neocomplcache_auto_completion_start_length.\nThe expected behavior is NOT to call omnifunc when the length of current text is less than g:neocomplcache_auto_completion_start_length \nIf I remove set omnifunc=ClangComplete, everything works as expected, but I will lose completion from Clang.\nThe problem has nothing to do with  'clang_complete' or 'neocomplcache-clang_complete'.\nI removed both plugins, but the problem persists.\n``` vim\n\" Enable auto clang complete\nlet g:clang_complete_auto = 1\n\" Show clang errors in the quickfix window\nlet g:clang_hl_errors = 1\n\" Automatically complete after ., ::, ->\nlet g:clang_complete_copen = 1\n\" Enable snippets\nlet g:clang_snippets = 1\nlet g:clang_snippets_engine='clang_complete'\nlet g:clang_conceal_snippets=0\nlet g:clang_periodic_quickfix = 1\n\"ignore clang error\nlet g:clang_user_options='|| exit 0'\nlet g:clang_use_library = 1\nlet g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'\n\" Use neocomplcache.\nlet g:neocomplcache_enable_at_startup = 1\n\" Use neocomplcache & clang_complete !!! REQUIRED (solve conflicts with clang)\nlet g:neocomplcache_force_overwrite_completefunc=1\n\" Select the first available completion in the popup\nlet g:clang_auto_select = 1\n\" Use smartcase.\nlet g:neocomplcache_enable_smart_case = 1\n\" Use camel case completion.\nlet g:neocomplcache_enable_camel_case_completion = 1\n\" Use underbar completion.\nlet g:neocomplcache_enable_underbar_completion = 1\nlet g:neocomplcache_auto_completion_start_length = 3\nlet g:neocomplcache_manual_completion_start_length = 3\nlet g:neocomplcache_lock_buffer_name_pattern = '*ku*'\n\" Define keyword.\nif !exists('g:neocomplcache_keyword_patterns')\n    let g:neocomplcache_keyword_patterns = {}\nendif\nlet g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\n\" Recommended key-mappings.\n\" : close popup and save indent.\ninoremap   neocomplcache#smart_close_popup() . \"\\\"\n\" , : close popup and delete backword char.\ninoremap  neocomplcache#smart_close_popup().\"\\\"\n\" Enable omni completion.\nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete\nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\nautocmd FileType objc  set omnifunc=ClangComplete\nif has('win32') || has('win64') \nelse\n    let g:neocomplcache_temporary_dir = \"$HOME/.vim/tmp/neocomplcache\"\nendif\n```\n. With your fix, neocomplcache doesn't call omnifunc anymore.\nI tested it with the following code:\nNSURL* url = [NSURL URLWithString:@\"http://test.com\"];\nneocomplcache doesn't find \"URLWithString\" function. But if I invoke omnifunc manually (  )\n\"URLWithString:\" will show up.\n. If I use \nlet g:neocomplcache_force_omni_patterns.objc =\n     \\ '\\h\\w\\+\\|[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\nThen the original problem \"g:neocomplcache_auto_completion_start_length not working\"\nappears again.\n. it works, awesome!\n. ",
    "h1mesuke": "\u4e86\u89e3\u3067\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u30d8\u30eb\u30d7\u306b\u306f\nalias hoge hogera hogehoge\n\u306e\u3088\u3046\u306b\u7a7a\u767d\u3067\u533a\u5207\u3063\u3066\u6307\u5b9a\u3059\u308b\u3068\u3001\u30b9\u30cb\u30da\u30c3\u30c8\u306e\u5225\u540d\u5b9a\u7fa9\u304c\u3067\u304d\u308b\u3002\n\u30b9\u30cb\u30da\u30c3\u30c8\u540d\u3092\u76f4\u63a5\u5165\u529b\u3059\u308b\u3068\u304d\u306b\u3001\u899a\u3048\u308b\u3053\u3068\u304c\u7c21\u5358\u306b\u306a\u308b\u306e\u3067\u4fbf\u5229\u3067\u3042\u308b\u3002\n\u306e\u3088\u3046\u306b\u601d\u3044\u5207\u308a\u300c\u7a7a\u767d\u3067\u533a\u5207\u3063\u3066\u300d\u3068\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u533a\u5207\u308a\u6587\u5b57\u304c\u4f55\u3067\u3042\u308b\u304b\u6b63\u78ba\u306b\u660e\u8a18\u3057\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n. \u624b\u5143\u3067\u306f\u4ee5\u4e0b\u306e\u4fee\u6b63\u3067\u671f\u5f85\u3059\u308b\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\uff08\u203b\u5dee\u5206\u304c 3\u884c\u7a0b\u5ea6\u306a\u306e\u3067 diff \u3092\u8cbc\u3063\u4ed8\u3051\u3066\u307f\u307e\u3057\u305f\uff09\n\ndiff --git a/autoload/neocomplcache/sources/snippets_complete.vim b/autoload/neocomplcache/sources/s\nindex b431b25..7792b41 100644\n--- a/autoload/neocomplcache/sources/snippets_complete.vim\n+++ b/autoload/neocomplcache/sources/snippets_complete.vim\n@@ -202,7 +202,7 @@ endfunction\"}}}\n function! s:set_snippet_pattern(dict)\"{{{\n   let l:abbr_pattern = printf('%%.%ds..%%s', g:neocomplcache_max_keyword_width-10)\n\n-  let l:word = a:dict.word\n+  let l:word = substitute(a:dict.word, '\\(<\\\\n>\\)\\+$', '', '')\n   let l:menu_pattern = a:dict.word =~ '\\${\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@}' ? '<Snip ' : '[Snip] '\n\n   let l:abbr = has_key(a:dict, 'abbr')? a:dict.abbr : \n@@ -342,6 +342,8 @@ function! s:load_snippets(snippets_file, filetype)\"{{{\n       else\n         let l:snippet_pattern.word .= '<\\n>' . matchstr(line, '^\\s\\+\\zs.*$')\n       endif\n+    elseif line =~ '^$'\n+      let l:snippet_pattern.word .= '<\\n>'\n     elseif line =~ '^delete\\s'\n       let l:name = matchstr(line, '^delete\\s\\+\\zs.*\\ze\\s*$')\n       if l:name != '' && has_key(l:snippet, l:name)\n\n. \u3059\u3044\u307e\u305b\u3093\u3002\u4e0a\u306e\u30d1\u30c3\u30c1\u3067\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\u6700\u521d\u306e snippet \u306b\u9650\u308a\u3001\u982d\u306b\u4f59\u5206\u306a\u6539\u884c\u304c\u304f\u3063\u3064\u3044\u3066\u3057\u307e\u3046\u306e\u306b\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\u6700\u521d\u306e snippet\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u3042\u308b\u884c\u3088\u308a\u524d\u306e\u7a7a\u884c\u306e\u5206\u306e\u6539\u884c\u304c\u4f59\u5206\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nhas_key(l:snippet_pattern, 'name') \u3092\u898b\u3066\u3084\u3089\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059\u306d\u3002\n\u3068\u3044\u3046\u304b\u3001\u7a7a\u884c\u3068\u540c\u69d8\u3001abbr, alias, prev_word \u306a\u3069 snippet\u5b9a\u7fa9\u306b\u5f93\u5c5e\u3057\u3066\u3044\u308b\u306f\u305a\u306e\u884c\u306e\u30d1\u30fc\u30b9\u306f\nelseif has_key(l:snippet_pattern, 'name')\n\u3067\u304f\u304f\u3063\u3066\u3057\u307e\u3063\u3066\u306f\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\n\u73fe\u72b6\u3001\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\u6700\u521d\u306esnippet\u5b9a\u7fa9\u306b\u9650\u308a\u3001alias \u3084 abbr \u304c snippet \u306e\u524d\u306b\u3042\u3063\u3066\u3082\u8a31\u5bb9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\n\nalias   sh\nsnippet shebang\n    #!/usr/bin/env ruby\n\nalias\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u30d1\u30fc\u30b9\u3059\u308b\u6642\u306b name\u30ad\u30fc\u306e\u5b58\u5728\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u672c\u4f53\u3088\u308a\u5148\u306b alias \u304c\u5b9a\u7fa9\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n. \u4fee\u6b63\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u52c7\u307f\u8db3\u3067\u4e0d\u5b8c\u5168\u306a\u30d1\u30c3\u30c1\u3092\u8cbc\u3063\u3066\u3059\u3044\u307e\u305b\u3093\u3067\u3057\u305f m( )m \n. \u8ffd\u8a18\n\u6b63\u78ba\u306b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u4e00\u6628\u65e5\u3050\u3089\u3044\u306b cpp  \u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3092\u6574\u5099\u3057\u3066\u3044\u305f\u6642\u306b\u306f\u3053\u306e\u30a8\u30e9\u30fc\u306f\u51fa\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u4eca\u56de\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u308b\u7b87\u6240\u306f\u968f\u5206\u524d\u304b\u3089\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4e00\u6628\u65e5\u6642\u70b9\u3067\u306f\u306a\u305c\u30a8\u30e9\u30fc\u304c\u51fa\u306a\u304b\u3063\u305f\u306e\u304b\u4e0d\u601d\u8b70\u3067\u3059\u3002\n\u3054\u304f\u6700\u8fd1\u5909\u66f4\u3055\u308c\u305f\u3069\u3053\u304b\u5225\u306e\u4f55\u304b\u304c\u9593\u63a5\u7684\u306b\u5f71\u97ff\uff1f\u3000\u5168\u8c8c\u3092\u628a\u63e1\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u8a73\u7d30\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u4e00\u5fdc\u5831\u544a\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u4fee\u6b63\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u30bd\u30fc\u30b9\u3092\u30b3\u30d4\u30da\u3059\u308b\u3068\u304d\u306b\u884c\u756a\u53f7\u3092\u4ed8\u52a0\u3057\u3066\u304a\u304f\u3079\u304d\u3067\u3057\u305f\u306d\u3002\n. \u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u304a\u304a\u3001syntax \u3082\u66f4\u65b0\u3055\u308c\u3066\u307e\u3059\u306d\u3002\u52a9\u304b\u308a\u307e\u3059 m( )m \n. \u3059\u3044\u307e\u305b\u3093\u3002\nunite.vim \u306e\u65b9\u3078\u6295\u7a3f\u3059\u308b\u306f\u305a\u3060\u3063\u305f\u3082\u306e\u3092\u9593\u9055\u3063\u3066\u3053\u3061\u3089\u306b\u6295\u7a3f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nclose \u3057\u307e\u3059\u3002\n. ",
    "ghost": "Seems to be working well. Thank you.\n. WOW! thx for the super quick response!\n. That was almost too easy, thanks a lot! :)\n. Wasn't sure how to do it for just one filetype, but the below works in .vimrc.\nlet g:neocomplcache_text_mode_filetypes = {'help': 1, 'nothing': 0, 'tex': 1, 'vcs-commit': 1, 'text': 1, 'gitcommit': 1}\n. Thanks.\n. I just installed it, and when I hit tab:\nError detected while processing function neocomplcache#sources#snippets_complete#expandable..neocomplcache#sources#snippets_com\nplete#force_expandable..neocomplcache#sources#snippets_complete#get_snippets:\nline    8:\nE716: Key not present in Dictionary: _\nPress ENTER or type command to continue\nError detected while processing function neocomplcache#sources#snippets_complete#expandable..neocomplcache#sources#snippets_com\nplete#force_expandable..neocomplcache#sources#snippets_complete#get_snippets:\nline    8:\nE116: Invalid arguments for function copy(s:snippets['_']), 'keep')\nPress ENTER or type command to continue\nError detected while processing function neocomplcache#sources#snippets_complete#expandable..neocomplcache#sources#snippets_com\nplete#force_expandable..neocomplcache#sources#snippets_complete#get_snippets:\nline    8:\nE116: Invalid arguments for function extend\n. Oops. Nevermind. A restart of vim fixed it. Thank you :)\n. One last thing: I recommend putting a note about installing then snippets plugin in the complcache README\n. Thank you. I think I found the line:\n```\ncall neocomplcache#set_dictionary_helper(g:neocomplcache_same_filetype_lists,\n\\ 'erb', 'ruby,html,xhtml')\n```\nIs there any way I can disable this line from my .vimrc instead of modifying neocomplcache.vim (so that I have no problems updating later) ?\nOn Wednesday, March 21, 2012 at 2:16 AM, Shougo wrote:\n\n\nShowing matches for other filetypes\n\nPlease use same filetype feature.\n:help g:neocomplcache_same_filetype_lists\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/168#issuecomment-4612560\n. You're awesome. Thanks again.\n. I think it's the recent commit. I had it installed from day or two ago and it was fine.\n. Thanks!!\n. \n",
    "nick198119": "I test the command :NeoComplCacheCachingDictionary  ~/.vim/c-support/wordlists/\nBut it doesn't work.\n. I have just tested \":NeoComplCacheCachingDictionary cpp\" ,\":NeoComplCacheCachingDictionary c\" and \":NeoComplCacheCachingDictionary \" ,it seems invalid.\nI don't know how NeoComplCache wokrs with dictionary completion yet. I found these words in dictionay files but not in syntax files , tags or other buffers can't be completed.But with this plugin from vim.org(ver.5.0), words in  files of directory  ~/.vim/c-support/wordlists/ can be completed.\nHowever,with the git version,they are invalid.Othor configure files such as .vimrc are the same...\n. Greate!it works now.\nThanks.\nBut how to make it done automatically?\n. ",
    "yaroot": "thanks, works great!\n. ",
    "bybor": "by 'options' i mean alternative available variants in popup. So you hit 'tab' and popup appears. if you hit 'tab' when popup is open next line is active. if you hit 'enter' the current variant is completed, popup is closed.\nthanks\n. Have put all your tips to my .vimrc, using version from head.\ndoesn't work as expected.\n closes popup, but ignores selected variant - it substitues the text that you typed before you pressed 'Tab'\nIf there is nothing to complete - if you type 'aaabbb' and hit  the cursor is moved to next line.\n. Yes, it works good. Thank you very much for your time and effort.\nI've found that this mapping\n\ninoremap  neocomplcache#smart_close_popup() . \u201c\\\u201d\n\ncauses problems in my case.\nThe only issue i see now, but it's not connected with this setup probably.\nif you type some rubbish - that is not in your file and it can't be completed, for example you type 'asdfkjasfljakajdf' and hit  after it, popup shows the list of all words in file, may be because of #complete_common_string(). If next thing you do is select one of them and press 'Enter' then selected variant is appended to what you typed, but doesn't replace it.\nBut it's not a big deal.\nThanks once again. I would never be able to tune it this way.\n. I like prev variant with common string. Thank you. It does everything i'd want.\nNeed to test it a little bit\n. ",
    "markwu": "Hi Shougo:\nFor 1st issue, I just make misunderstanding :( , thanks for correcting me.\nFor 2nd Issue, I follow your settings list above, it works well when I type \"memcache::\" and neocomplcache popup a dialog for me to complete the class method  and functions. But, I still can not complete the class name, if I type only 'mem' to get the whole class name 'memcache', I just get a function 'memory_get_usage'. The class name 'memcache' does exist in phpcomplete build-in functions, but not exist in ~./neocon/syntax_cache/php.\nThanks,\nRegards, Mark\n. I see, now I know what you mean. It is really slow :(\nThat's why you use syntax keyword to replace omni phpcomplete. \nSorry, One more questions, If I already has a tags file for my whole project files generated by ctags. Can I incorporate it into neocomplcache to get it complete according my tags file?\nThanks,\nRegards, Mark\n. Hi Shougo:\nThanks for your great help, you just solve all my issues. Now, the neocomplcache plugin works very well in my development  env.\nThanks,\nRegards, Mark\n. ",
    "Devric": "Thanks Shougo, but i was hoping a way to scan the whole folder not just include the individual snippet files, because i have alot of individual snippet(s), for php itself i have like 70 which is just that snippets/php.snippets file \nand the rest such as codeigniter i have 240, wordpress 170, prestashop 80, cakephp 130......... and a lot more\nthey are named such as ci_xxx.snippet, wp_xxx.snippet under the snippets/php/xxx.snippet.\nso is there a way to tell ncc to cache them for popup?\n. Currently the pop up only shows the snippet in php.snippet but not the subfolders under php/.snippet, \n. Thanks for the help shougo, it isnt working but, is there a way to manualy load it?\neg: im editing a .php file, than i want to just cache the wordpress snippet folder, any key mapping or function that let me include the folder just one time? eg:  :Call snippet wp\n. ya, i did that, no matter what i do, the individual===    snippets/php/.snippet   ===files just dosent get pop up, only pop up the snippet inside the === snippets/php.snippets === file, which would take too long to combine all these snippet's' together into that one file >_< \n. ",
    "lespea": "My filetype is Perl.  I use a lot of plugins and have a large vimrc so maybe it's something on my end that's breaking it... I can investigate further tomorrow.  In the mean time you can find my snippet file here.\n. ",
    "starwing": "okay... I will try to use this plugin only to find why this happened, thank you all the same :-)\n. I have found the issue: i have a line in my vimrc:\nvnoremap  :\nand when i changed it to\nxnoremap  :\nthe issue is disappear, but I found all :normal in snippets_complete.vim, there are all nromal! and there are no space in the normal command. I don't know why this happen...\n. I found that space!\nI copied settings from vim.org, and the settings text in script page all have spaces at tail...\ni run %s/\\s+$//g in my vimrc, and this issue disappeared.\nsorry for my disturbance, that's all my mistake :-(\n. no thx :-)\n. ",
    "cdunn": "hmmm formatting on those 'defs' didnt quite come out, but you get the idea\n. ",
    "jelera": "Space in Snippet\nHere is a situation, I'm editing document.markdown and I enter\nlinkurl\nwhen I expand the snippet linkurl, this is the result.\n[ Google](http:// www.google.com) Easy Web Search\nNote the space in the beginning of each snippet placeholder. I'm actually typing this comment in Vim in markdown.\nSynchronized Snippet Placeholders\nHere is another situation, While editing script.js and entering\nfor\nwhen expanding, this is the result (THECURSOR means where in the doc the cursor is placed after expanding)\nfor (var ${2:i}=0; ${2:i} <  THECURSOR.length; ${2:i}++) {\n        ${0}\n    };\nexpanding again;\nfor (var  THECURSOR=0; ${2:i} <  links.length; ${2:i}++) {\n        ${0}\n    };\nagain\nfor (var  i=0; ${2:i} <  links.length; ${2:i}++) {\n         THECURSOR\n    };\nyet again\nfor (var  i=0;  THECURSOR <  links.length; ${2:i}++) {\n         var docs = document.getElementById('docs')\n    };\nanother time\nfor (var  i=0;  i <  links.length;  THECURSOR++) {\n         var docs = document.getElementById('docs')\n    };\nSorry for too much text\nAs you may notice, there is also a space in front of each snippet placeholder and also I believe the intention was to syncronize the ${2:i} in the snippet, just like Textmate or SnipMate.\nAgain thanks for the plugin. It has been so helpful.\n. I can help with the translation of several snippets from Textmate and SnipMate to neocomplcache. \n. I'll do more testing and please look my dotfiles repo, I have a README.markdown in Vim. showing all the plugins I got installed.\n. got it... I'll report such testing\n. I just tried several snippets with several filetypes with the simplest setting available.\nI can confirm that the space is still inserted in the beginning of each snippet placeholder, I've checked the actual snippet file and look a the invisibles (set list!).\nThe following is the .vimrc and with no plugins, except for neocomplcache. \nI've tried this in MacVim and vim in the command line. \n```\n    set nocompatible\n    set nu\n    \" With a map leader it's possible to do extra key combinations\n    \" like w saves the current file\n    let mapleader = \",\"\n    let g:mapleader = \",\"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" => NeoComplCache plugin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\" TODO: Still need to tweak behavior with <TAB> to expand\n\"       snippets, change throughout the autocompletion list\n\" Use neocomplcache. \nlet g:neocomplcache_enable_at_startup = 1 \n\" Use smartcase. \nlet g:neocomplcache_enable_smart_case = 1 \n\" Use camel case completion. \nlet g:neocomplcache_enable_camel_case_completion = 1 \n\" Use underbar completion. \nlet g:neocomplcache_enable_underbar_completion = 1 \n\" Set minimum syntax keyword length. \nlet g:neocomplcache_min_syntax_length = 3 \nlet g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\n\n\" Define dictionary. \nlet g:neocomplcache_dictionary_filetype_lists = { \n            \\ 'default' : '', \n            \\ 'vimshell' : $HOME.'/.vimshell_hist', \n            \\ 'scheme' : $HOME.'/.gosh_completions' \n            \\ }\n\n\" Define keyword. \nif !exists('g:neocomplcache_keyword_patterns') \n    let g:neocomplcache_keyword_patterns = {} \nendif \nlet g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\n\n\" Plugin key-mappings. \nimap <C-j>,     <Plug>(neocomplcache_snippets_expand) \nsmap <C-j>,     <Plug>(neocomplcache_snippets_expand) \ninoremap <expr><C-g>     neocomplcache#undo_completion() \ninoremap <expr><C-l>     neocomplcache#complete_common_string()\n\n\" SuperTab like snippets behavior. \nimap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\n\" Recommended key-mappings. \n\" <CR>: close popup and save indent. \n\" inoremap <expr><CR>  neocomplcache#smart_close_popup() . \"\\<CR>\" \n\" <TAB>: completion. \ninoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\" \n\" <C-h>, <BS>: close popup and delete backword char. \ninoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\" \ninoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\" \ninoremap <expr><C-y>  neocomplcache#close_popup() \ninoremap <expr><C-e>  neocomplcache#cancel_popup()\n\n\" AutoComplPop like behavior. \n\"let g:neocomplcache_enable_auto_select = 1\n\n\" Shell like behavior(not recommended). \n\"set completeopt+=longest \n\"let g:neocomplcache_enable_auto_select = 1 \n\"let g:neocomplcache_disable_auto_complete = 1 \n\"inoremap <expr><TAB>  pumvisible() ? \"\\<Down>\" : \"\\<TAB>\" \n\"inoremap <expr><CR>  neocomplcache#smart_close_popup() . \"\\<CR>\"\n\n\" Enable omni completion. \nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS \nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags \nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS \nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete \nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\n\n\" Enable heavy omni completion. \nif !exists('g:neocomplcache_omni_patterns') \n    let g:neocomplcache_omni_patterns = {} \nendif \nlet g:neocomplcache_omni_patterns.ruby = '[^. *\\t]\\.\\w*\\|\\h\\w*::' \n\"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete \nlet g:neocomplcache_omni_patterns.php = '[^. \\t]->\\h\\w*\\|\\h\\w*::'\n\nau BufNewFile,BufRead *.snip set syntax=snippet ft=snippet foldmethod=indent\n\n``\n. I forgot... I also tried changing the mapping for the snippet expand fromto,` and I still got the same results\n. Ok... I've double checked unnecessary spaces and they are not causing the problem.\nHowever, because I've copied the settings from the vim.org page, one extra space at the end of each line was also copied.\nI deleted them and It worked. You might wanna edit those sample settings from vim.org\nThanks and keep up the good work.\n. Thanks Shougo!!  So far, everything is working fine!\n. Outstanding!! \nit worked!\nKeep up the good work and Thanks \n. ",
    "ukstv": "Oh, thanks. And what about multiline placeholders as in the example below?\n${1:constructor: (${2:args\\}) ->\n    ${3:# do smth}}\n. Oh, thank you for clarification!\n. ",
    "pauluap": "\n\nI want to complete from tags. When I enable NeoComplCache, it completes from >> buffers only. When I call NeoComplCacheCachingTags, it seems to not complain, >> but doesn't give me tags.\n\nPlease set tags option and execute :NeoComplCacheCachingTags command.\nBut I recomend include_complete instead of tags.\n\nThanks.  If the include_complete can properly resolve and include all the header files and their dependencies, I think that I would prefer that.  TI's still not clear to me what options should be set though.  For tags, I see the following:\ng:neocomplcache_tags_filter_patterns\ng:neocomplcache_ctags_program\ng:neocmoplcache_ctags_argument_list\nAs far as I can tell, the default settings for those options are okay.  What else needs to be set?  I presume that include_complete is similar enough such that once I understand how the tags work, I should be able to understand how to use include_complete.\n\nPlease set this settings.\nif !exists('g:neocomplcache_omni_patterns')\n       let g:neocomplcache_omni_patterns = {}\n   endif\n   call neocomplcache#set_dictionary_helper(g:neocomplcache_omni_patterns,\n       'c,cpp', \"\\'\\h\\w*\\%(\\.\\|->\\)\\h\\w*\\|\\h\\w*::')\n\nThanks! So if I understand the regex correctly, neocomplcache considers any string of characters without spaces as a possible string, this regex tells the neocomplcache matching engine to stop trying to match once it sees a ., ->, or an ::?\n. I struggled with this for a bit.  When I managed to get include_complete working, it was pretty cool, but it didn't seem to look into the include file for OTHER include files to cache as well.  I never did get tag_complete to work.  I think that caching is a really cool idea and I would find it very useful, but for now I'm going back to autocomplpop.  Thanks for trying to help\n. ",
    "chrisyip": "OK, I get it.\nAnd could you simply explain how neocomplcache match keywords? That would be a big help. :) I'm not familiar with Vim script language, it'll take a lot of time to read through neocomplcache.\n. ok, thank you\n. ",
    "glyf": "How would ropevim have to be modified before neocomplcache could use it?\n. ",
    "zhou13": "Really? But I still feel large lag if I save the file or use gf. After clear the path, the lag disppears. Or should I use the version on git? (I use version 5.3)\nWhich omnifunc does neocomplcache use?\n. I think this is my fault. I shouldn't use * in my path option. It will cause many problems and totally useless... After remove the * from the path option and use the newest version, I think cache speed is OK.\n. I still can reproduce this bug.\nBackup and delete your vimrc .vim/vimfiles.\n```git clone https://github.com/Shougo/neocomplcache.git\n``````\nCopy all the files to vimfile/.vim\nRun vim\n```:set nocompatiable\n:filetype on\n:syntax on\n:NeoComplCacheEnable\ni   //enter insert mode\nsssss //type ssssss, vim freezing, and become extremely slow.\n``````\nThis can be reproduced on Windows 7/vim 64 bit.\n. Bug still there.\nIt can reproduce by\n```:set nocompatiable\n:set cpoptions&vim\n:filetype on\n:syntax on\n:NeoComplCacheEnable\ni //enter insert mode\nsssss //type ssssss, vim freezing, and become extremely slow.\n\n. No. I don't think this is the problem of cpoptions.\nI add \":set cpoptions&vim\" to vimrc, problem is still there.\nDo you try to reproduce it by clear all the other setting? (better to delete all the other vim plugin use minimal vimrc)\nOr should I pack my vim environment to you?\n. I will try to detect where this problem happened.\n. After debug for sometime, I think I found something useful.\nIf I add\n\nif l:complfunc_name == 'filename_complete'\n    continue\nendif\n\non neocomplcache.vim line 1106( or near), i.e. after code block\n\nlet l:complete_result = {}\n  for [l:complfunc_name, l:complfunc] in items(l:complfuncs)\n    if (has_key(g:neocomplcache_plugin_disable, l:complfunc_name) && g:neocomplcache_plugin_disable[l:complfunc_name])\n        \\ || (neocomplcache#is_eskk_enabled() && eskk#get_mode() !=# 'ascii' && l:complfunc_name !=# 'omni_complete')\n      \" Skip plugin.\n      continue\n    endif\n\nThis problem won't happen. So I think this is the problem of filename_complete.\nMaybe this function doesn't handle [No Name] file correctly. Could you fix that?\n. Also I think my title is misleading.  It should be \"neocomplcache freezing when editing a new unsaved file\"\n. Yes. In windows, the default dir is C:\\Windows\\System32, there are many files there. \nMaybe you should limit the file number is filename_complete?(if the numbers of file exceed a limit, automatically return.)\n. Why we don't use cache on file name? I think use glob in a CursorMoveI isn't a good idea.\n. I don't understand your reason.\nfilename_complete spends most time on glob(), so we should cache the glob result when neocomplcache enable rather than use glob every time when you move the cursor.\nAlso, we should limit the number of the result.\n. What does  \"and basic; is not settled.\" mean?\nYou may add the command in source.initialize? Or you can re-cache when CursorHold{,I}.\n. I'm confused. I don't understand \"filename_complete collect partial files in current directory.\"\nNeed? Should? And why partial?\n. input: set ft=vim\n\nif true\n  111111\nend\n\nbecause indentkeys contain 'end', so vim will auto unindent line 3 when you input 'end'. But when neocomplcache enable, this behavior doesn't work.\n. Yes. Any workaround or patch vim's source?\n. Hello. Is this be fixed?  I run \"NeoComplCacheToggle\" but it tell me it is disable and this command is ignored.\n. But this is uesless.  People like me want to use NeoComplcacheToggle because I want do map like\n\nnmap <F4> :NeoComplcacheToggle<CR>\n\nI think the first time user call Toggle command should behave just like NeoComplcacheEnable.\n. It seems that I misunderstand what :NeoComplcacheToggle means.\nWhen I run into some problem, I can not disable this plugin by :NeoComplcacheToggle\nI think we need two command: :NeoComplcacheToggle and :NeoComplcacheLockToggle\n. OK.\n. In the above example,     \"longlongword()\" is completed\n```g:neocomplcache_keyword_patterns[\"c\"] = \n^\\s_#\\s_\\h\\w_|\\h\\w_\\%(()\\?)\\?\nWhy () is in it? Is it a reasonable setting by default? Or I just use a too old version?\n. I mean why my pattern is wrong? I have never set it manually.\n. The main reason I think it is not powerful is because it can not\n1.  auto-update as you type (issues 127)\n2.  nest another snippets in a snippets\n3.  nest another some vim function in a snippets(so it can generate different snippet according to the environment\n4.  nest another snippets file in one. (for example, c and java can both include c-like.snip)\n5.  it needs to insert marks such as $<1:>, which is a little ugly for me.\nI think xptemplate is a quite good snippet plugin(although very heavy and a little slow), maybe you can try it as a target?\nhttp://www.vim.org/scripts/script.php?script_id=2611\n. > What's it? This is same issue to https://github.com/Shougo/neocomplcache/issues/132 ?\nYes.  \n\nWhat's it feature?\n\nCan I use strftime(\"%d %b %Y\") in a script?\nAnother example, the procedure printf(\"%d%d\",...).\nIn xptemplate, its plugin can auto detect the contents in ... and auto generate the content in the quotation marks.\nAlso, it can auto generate case~break conveniently:\n\n                      *`...^*    *xpt-...*    *xpt-repetition*\n    Some segments can be defined as repeatable, for example the \"case\"s in\n    \"switch\". Specifying the repetition part is easy, just wrap the part\n    you want it to repeat with `...n^. n is a number and can be omitted if\n    only one repetition part is used.\n    Take the case from \"switch\": >\n        XPT switch\n              switch (`^) {\n                `...^            | repetition part\n                case `^0^ :      |\n                  `^             |\n                  break;         |\n                `...^            |\n\n                default:\n                  `^\n              }\n<\n    When you trigger a repetition template it works as below: >\n        switch () {    <------- cursor stays here\n          `...^\n\n          default:\n              `^\n        }\n<   Press , the |`...^| is selected. Press  again to expand the\n    repetition part. Or press  |xpt-key-clear| to cancel the\n    repetition part. These 4 lines are expanded: >\n        switch () {\n\n          case `^ :         | expanded\n            `^              |\n            break;      |\n            `...^           |\n\n          default:\n            `^\n        }\n<   Enter the repetition part. You may have noticed there is another\n    |`...^|, that is the another repeat trigger.\n\n    Press  3 times: >\n        switch () {\n\n          case 0 :\n\n            break;\n\n          case `^ :        | selected repetition part\n            `^             |\n            break;     |\n            `...^          |\n\n          default:\n            `^\n        }\n\nit can define some variable in order to let the snippets suit for everyone. People just need to change these variable.\n\n\" int fun( ** arg ** )\n\" if ( ** condition ** )\nXPTvar $SParg      ' '\n\n\" if ** (\nXPTvar $SPcmd       ' '\n\n\" a = a ** + ** 1\nXPTvar $SPop       ' '\n\n\nXPTvar $VOID_LINE      /* void */;\nXPTvar $CURSOR_PH      /* cursor */\n\nFinally, xptemplate do not even need to insert a mark into the buffer when show the snippets.\nI think all these features are useful and lacks in neo snippets.\n. Is there function such as jumpable/expandable so that we can use them in a map but not lose their original function.\nLike :imap <expr><tab> neo_jumpable ? \"\\<Plug>(neocomplcache_snippets_jump)\" : \"\\<tab>\"\n. This function is buggy, it does not work if the words is not on the beginning of the line.\nAlso, can you split it as jumpable and expandable?\n. My fault, just ignore the first problem..\n. I set g:neocomplcache_enable_cursor_hold_i.  Will neocomplcache cache after I setting that?\nWhat do you fix?  The problem about caching after space?\nAlso, is it better if we can cache after jumping though the snippet?\n. This is because jumping is also a delimiter just like space and <CR>.  People may input keyword and then jump to another place in a snippet.\n. I think it is OK now.\n. I report it on neocomplcache.  I also think it is a neocomplcache bug.  So please reopen it.\n. My previous version is the newest stable version on vim.org.\nCan you see any information on the screenshot?  What does it mean?\n. I'm using a 64 bit vim on windows, the newest neocomplcache on git.  I have tried both vimproc from precompiled and compiled from source(mingw64).\nIf you have a windows machine, you can reprocedure it by install the vimproc.dll from download page, enablecomplcache and saving any files.\n. 1.  I'm using the newest version.  pull from git and I have this in doc\n\n   2012-03-05\n   Fixed asynchronous load.\n   Fixed expand().\n   Improved version check.\n   Enabled beep.\n   \n2. :echo neocomplcache#util#substitute_path_separator(fnamemodify(vimproc#get_command_name(v:progname), ':p:h')) . '/vim' get C:/Program Files/vim/vim73/vim\n$PATH: \n\nC:\\MinGW64\\bin;C:\\Program Files (x86)\\AMD APP\\bin\\x86_64;C:\\Program Files (x86)\\AMD APP\\bin\\x86;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;D:\\Software\\texlive\\2011\\bin\\win32;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files\\Mercurial;C:\\MinGW64\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\UnxUtils;C:\\Program Files\\vim\\vim73\n\nMy position of neocomplcache is\nC:\\Users\\zhou\\vimfiles\\bundle\\neocomplcache\\autoload\\neocomplcache\n. Emmmmm.  A stupid question.  How to let git change the working directory to old version?\n. \nC:\\Users\\zhou\\vimfiles\\bundle\\neocomplcache>git bisect good\nec5b86fb38a8481173c0fa60ef57dd9ebf88bc70 is the first bad commit\ncommit ec5b86fb38a8481173c0fa60ef57dd9ebf88bc70\nAuthor: Shougo Matsushita Shougo.Matsu@gmail.com\nDate:   Sun Mar 4 10:01:37 2012 +0900\n    - Improved asyncronous caching behavior.\n:040000 040000 d133ef868218ae530985f2e79a0f610a8aa643d5 6d98faff8fd2f0012e73826381254b699142edcc M      autoload\n:040000 040000 52e7fd8772ae9d62fb72b82cae0cc6a7d7e7e013 5412f3ef53050e31ba963e70c90e2121caeee7bc M      doc\n\n. BTW, I submit some bug report/feature request on neocomplcache-snippets-complete.  Maybe you can have it a look.\n. My vim is in C:\\Program Files\\vim\\vim73\\vim.exe\ntree C:\\Program Files\\vim get:\n\n\u251c\u2500vim73\n\u2502  \u251c\u2500autoload\n\u2502  \u2502  \u2514\u2500xml\n\u2502  \u251c\u2500colors\n\u2502  \u251c\u2500compiler\n\u2502  \u251c\u2500doc\n\u2502  \u251c\u2500ftplugin\n\u2502  \u251c\u2500indent\n\u2502  \u251c\u2500keymap\n\u2502  \u251c\u2500lang\n\u2502  \u251c\u2500macros\n\u2502  \u2502  \u251c\u2500hano\n\u2502  \u2502  \u251c\u2500life\n\u2502  \u2502  \u251c\u2500maze\n\u2502  \u2502  \u2514\u2500urm\n\u2502  \u251c\u2500plugin\n\u2502  \u251c\u2500print\n\u2502  \u251c\u2500spell\n\u2502  \u251c\u2500syntax\n\u2502  \u251c\u2500tools\n\u2502  \u2514\u2500tutor\n\u2514\u2500vimfiles\n    \u251c\u2500colors\n    \u251c\u2500compiler\n    \u251c\u2500doc\n    \u251c\u2500ftdetect\n    \u251c\u2500ftplugin\n    \u251c\u2500indent\n    \u251c\u2500keymap\n    \u251c\u2500plugin\n    \u251c\u2500syntax\n    \u2514\u2500view\n\n. Thanks.\n. Can it be fixed by background caching?  The lag is so annoying when I edit vimrc.\n. Can you explain what heavy things does neocomplcache do causing the lag when we entering insert mode?\nAlso there is another efficiency problem.  When I save a buffer sometime it need to wait too long time if this buffer includes other files.  Can this be improved?\n. > In my environment, this feature is works(iostream will popup).\nI think the reason is that I use \"_\" in my path.\nsuch as set path+=C:\\mingw\\_\\c++\n. Why we need to manual do cache?  Cannot cachecompl just cache it automatically when opening a new buffer?\n. ",
    "rickywu": "Hi, I tried latest version 5.3 and add setlocal iskeyword+=- into syntax/cobol.vim and ftplugin/cobol.vim\nI still have this problem, maybe neocomplcache is effected by other plugins.\n. Thanks, it works now.\nI previously use 5.3 and installed in HOME dir when use vba installation mode, I also installed 6.0 at the same time, but it's overridden by 5.3.\n. Shougo, I need bother you again. I meet serious problem for version 6.0. \nEven though I completely reinstall Vim and only install neocomplcache this plugin.\nI get E731 error: error detected while processing function check_source..word_caching..neocomplcache#cache#writefile: line 3\nThis can be happen when I use \":set ft\" or press gf in normal mode.\nDo you have any idea?\nI only have one statement in  vimrc:\nlet g:neocomplcache_enable_at_startup = 1\n. I think the  key to choose next completion in menu is not working in new version.\nOr how should I set it, my current sitings:\nimap  neocomplcache#sources#snippets_complete#expandable() ? \"(neocomplcache_snippets_expand)\" : pumvisible() ? \"\" : \"\"\ninoremap   pumvisible() ? \"\" : \"\"\ninoremap   pumvisible() ? \"\" : \"\"\nThanks.\n. I mean use tab key to choose first or next item when completion menu poped up.\nI tried your suggestion, it's still insert spaces when i press tab key.\n. It seems in old version(5.0), only need setup like this:\ninoremap  pumvisible() ? \"\" : \"\"\n. Yes, should use inoremap, maybe you also need change in help file.\nI found ftplugin/COBOL.vim also maps tab key, have to comment it.\nThanks.\n. I have tried set heavy omni complete:\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*\\%.'\nSeems it works well. \n. ",
    "jahson": "It is because each element in a:list of neocomplcache#cache#writefile is Dictionary and :h writefile says \"Each list item must be a String or Number\".\nI think source of error is neocomplcache#cache#load_from_file.\n. It seems that installing vimproc fixes this bug (I think it is because async cache is used instead of simple cache)\n. ",
    "pielgrzym": "Works like a charm now! Thank you!\n. I work a lot using sparkup and neocomplcache (head is: b7619c245732160a3f01af2a2049343654b677b0) and they work flawlessly - maybe it's an issue of other plugin also? \nShougo, devth, thanks for mentioning zencoding.vim - I'll check it out :)\n. I narrowed the problem with snippets like: '.' or '{' to line 399 (let l:cur_word) in autoload/neocomplcache/sources/snippets_complete.vim - here is the evaluation:\n:echo matchstr('.', '\\%([@#.]\\?[[:alpha:]_:-][[:alnum:]_:-]*(\\?\\m\\)$\\|\\h\\w*\\W\\+$')\nIt returns nothing so it won't match the '.' as snippet name. The dict called snippets (the first argument provided to s:get_cursor_keyword_snippet()) is ok - it contains a key called '.'\nProblem is even stranger: the 'z' doesn't initially work,but after expanding another snippet like pos:a<tab> it starts to work again. Same problems for m<tab> etc.\n. Hello!\nThanks for help :) strangely using force_expand cured both issues! For the sake of completeness I'm posting my config without <Plug>(neocomplcache_snippets_force_expand) bound to tab key :)\nHere is the link to my vimrc directly:\nhttps://github.com/pielgrzym/vimrc/blob/neocomplcache-experiment/vimrc\nHere is a snippet with all neocomplcache settings (before using force_expand):\nlet g:neocomplcache_enable_at_startup = 1\nlet g:neocomplcache_enable_smart_case = 1\nlet g:neocomplcache_enable_underbar_completion = 1 \" c_p -> compeltion -> current_page\ninoremap <expr><C-x> neocomplcache#smart_close_popup().\"\\<C-x>\"\ninoremap <expr><CR> neocomplcache#smart_close_popup() . \"\\<CR>\"\nimap <C-k> <Plug>(neocomplcache_snippets_expand) \" this didn't work as well as <tab> below\nsmap <C-k> <Plug>(neocomplcache_snippets_expand)\ninoremap <expr><C-g> neocomplcache#undo_completion()\ninoremap <expr><C-l> neocomplcache#complete_common_string()\n\" below - tab-expand snippets:\nimap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n. Something really strange is going on here: after a reboot snippets functionality went crazy - the '.' problem and single letter snippets problems are back - and now I have problems with jumping to placeholders too :( After first placeholder necomplcache goes into normal mode. This is getting really frustrating :(\n. Unfotunately - it still doesn't work :( the status now (commit: a02d441f8a956184e5223d60a33c37ee93af28ca ):\n- single letter css snippets - if they work (they sometime don't and sometimes do) there is a placeholder left to the right of the snippet and I can't jump onto it\n- neocomplcache jumps to the right places now (in other words: it doesn't miss the placeholders)\n- even with neocomplcache_snippet_force_expand the dot is not expanded (in css files)\nI''ll try to provide you with some debug data.\n. ",
    "gu-fan": "Hi, Shougo .\nI'm now using the default setting as described in your example.\n\n/home/mdy1167/Desktop/desk_themes/monte-cristo-v-1.3/css/\nI add the plugin \"look\", add a setting with text_mode. \n\"let g:neocomplcache_text_mode_filetypes = {\"vimwiki\":1,\"vim\":1}\"\n\nAnd.\nThe insert errors still occurred sometimes , but Not always.\nOften happens when inserting a word that has a longer match , \nand then it insert the whole match , which will ruin the insert word.\nMy example:\n1. When I insert \"ee\" in a html file , which will became \"eech\" .  the \"ee\"\nhas a only match . and then  it became  impossible to delete it in insert \nmode.After I restart gvim , this time, it works all-right.When I type \"ee\".\nThe popup menu shows: \n                      \"eech   [S]  cssAural\" \n1. Then I edit file \".vimrc\" ,   I put the cursor on the \"\" like \n   mapping     tags , then hit \"a\" to change it . sometimes all words in\n   the tag are gone.\n   And if I want to add something in the mapping tag, like I input \"c-u\" , \n   but the inputs became \"cu\",  I should input \"c--u\" to in put the word.\n   and sometimes the case of typing words will change too .\n   The popup menu shows like this: \n                     \"     [B]  .vimrc\"\n                     \"     [B]  .vimrc\"\n                     \"  [B]  .vimrc\"\n   I restart the gvim and reopen the .vimrc , at first I can change the \n   mapping word in the \"<>\" tag easily , but after I edit it several time,\n   it became strange again.\n2.  I want to edit this comment in vimwiki , so I open open  a new gvim window\n   and insert neocomplcache, then I want to change it to CamelCase to make it a \n   wiki word . \n   But when replacing the lowwercase word to Uppercase , the word remains\n   the same. \n   And after I restart the gvim, things gets quite all-right...\n   But After I open the vimrc and edit it several times and get back.Things became\n   strange , Most words are automatic inserted.\n   When insert \"bu\" , it will became \"bufsiz\" \n   The popup menu shows :\n           \"bufsiz  [S] cConstant\"\n           \"bufsizg [B] neocomplcache.v\"\n   Hey ,I don't want cConstant here, and there is no \"bufsizfg\" in this post.\n   and \"and\" became \"and_eq\" which is \"and_eq [S] cppoperator\" , and more... \n   Seems like  the auto complete will became auto select after a while.\n3. Then I remembered my ofu setting is :\n   set ofu=syntaxcomplete#Complete\nset completeopt=menu,preview,longest\n   so I comment these line . then restart. Things seems quite all-right , until Now.\n   The reason is the setting conflict??\n   but still  \"[S] cConstant \" things while editing. \n   The typing acts sometimes quite quite slow... \n   The cpu of gvim threads became 20%+.even 60%+ at highest. \n   (OS:Ubuntu 10.10  gvim 7.3)\nPS: I Don't know if you check issues in the \"Unite.vim\" thread . So I post the \nUnite issue here.\n1. Is there auto mkdir() feature in unite ? \nfor example : when input is \"test/xxx.txt\" , Unite will create the dir \"test\" automaticlly.\n2. go to upper level folder , e.g. an \"../\" candidate \n3. drag a folder into gvim that auto opens unite?\n4. Can I remap the default keys in the unite buffer ? \nI want to remap the space and double-click th do the default action.\nI can achieve this , only by hacking the mapping.vim\nnmap <buffer><expr><silent> <Space>   unite#smart_map('l',unite#do_action(unite#get_current_unite().context.default_action))\nnmap <buffer><expr><silent> <2-leftmouse>   unite#smart_map('l',unite#do_action(unite#get_current_unite().context.default_action))\nis there a method to get this in .vimrc?\n. Get it, Thanks.\n. In your settings vimwiki filetype files refer to vim filetype files\nBut when I edit the .vimrc or other vim type files , the \"cpp\"'s syntax doesn't come out.\n. go to upper level folder , e.g. an \"../\" candidate\nThis feature is implemented. Please use :Unite file.\nBut when I use it , there is no displaying of ../ . Though I can type a ../ and get here.\n. I implemented this feature now. Please update unite.vim\nGot That ! Thanks!\n. The displaying of Unite candidate changed? That's very cool!\n. close it?\n. ....\nToo Bad to heard that.\n. Nice . I should delete the SnipMate , now.\nBut what's the neco's multi_snip syntax??\nwith the description of it:\nsnippet ${1:trigger} ${2:description}\n${3}\nI test several  times and failed.\nHow to create multiple snippets \nand how to use it?\n. I see ...\nSo  we should use this?\nsnippet   triggername${1:trigger} ${2:des1}\n snippet   triggername${1:trigger} ${2:des2}\nand  use <tab> to select  the snip \nthen use <c-j>/<c-k> to expand the snip?\nI was tried <c-j>/<c-k> a lot and failed.\nit should be explained in the doc. \nBut the $3 in\nsnippet   triggername${1:trigger} ${2:des1}\n ${3:echo eeeeee}\nis missing if use <tab> to select.\n. Understand now ..\nSo \nsnippet hoge piyo\n    hogera\nsnippet hoge piy2\n    hogera2\nthen use <tab> to select the snip,\nus  <c-j>\\<c-k> to expand the snippet?\nsuccessed this time.\nmy mapping is normal:\n```\n imap  (neocomplcache_snippets_jump)\n imap  (neocomplcache_snippets_expand)\ninoremap   pumvisible() ? \"\\\" : \"\\\"\ninoremap   pumvisible() ? \"\\\" : \"\\\"\n```\n. I think the option description would lead people to mistaken it.\nthe  snippet ${trigger} ${description}  should be \nsnippet trigger descritption1\nsnippet trigger descritption2\nand should add the action description:\nuse <tab>/<c-n>/<c-p> to navigate to the snippet and use <c-j>/<c-k>\n. Great to hear that!\n. Could  you plz implement quick_match_auto_select_and_set ?\nmaybe just add \"\\<c-n>\\<c-p>\" or something after \ncall feedkeys(\"\\<Plug>(neocomplcache_start_auto_select_complete)\")\nwhile after typing quick_match key and select key ,\nI should then type a key to  set the  word , but as there is only one match ,\nI think the match word should be auto select and set  while typing the select key\n. I'm sorry.. \nGit pulled\nBut I can not get the quick_match word auto select  ..\nBut that's all right. because I can remap keys to get that..\nimap <expr><C-k>  pumvisible() ? neocomplcache#smart_close_popup() :   \n        \\ \"\\<Plug>(neocomplcache_snippets_expand)\"    \nimap <expr><c-j>  pumvisible() ? neocomplcache#smart_close_popup() :\n        \\ \"\\<Plug>(neocomplcache_snippets_jump)\"\n. Thank you      \n. Well, that's always fine .\ntyping \n<`>\nis easy with it.\n. You are coding quiet fast :)\nBut I find a proplem there.\nwhen typing more words while popup menu is showing.\nthe list number doesn't refresh .\nas when I typing \"th \" showing the \n1: thtml\n   2: throw\n   .....\n   6: then\nand  I continue typing \"e\" , the popup menu \nbecame \n6: then\nI think it shoud be 1: then ..\n. That's all right :)\n. But I think if it can not auto refresh , there are some problem of using it .\nbecause some word will missing  in popup menu as you typing more.\nIn that case , I would rather use key to trigger the quick match list. \nSorry for demanding this feature.   \nBut that's all right , the option is there , we can choose it by ourself.\n. ",
    "jiminoc": "I'm getting this same issue on the latest source code\nas soon as I add these to my vimrc now I can only type 1 character before it freezes and pegs the CPU\n\" Disable AutoComplPop.\nlet g:acp_enableAtStartup = 0\n\" Use neocomplcache.\nlet g:neocomplcache_enable_at_startup = 1\n. ",
    "tyru": "I recommend you add global .gitignore file. like the followings\nhttps://github.com/tyru/dotfiles/blob/master/dotfiles/.gitconfig\nhttps://github.com/tyru/dotfiles/blob/master/dotfiles/.gitignore.base\n. ",
    "vchyzhevskyi": "Thanks, but some people not use global .gitignore, and this tip is good solution ...\n. ",
    "blueyed": "@coirius: while it would not hurt to add a .gitignore file for neocomplcache, you're far better off by using a global ignore file. tags files are also used when using ctags in general.\n. My fix to this issue is the following (with the commit referenced above applied to endwise (pull-request is pending)):\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\\<Plug>DiscretionaryEnd\"\nendfunction\nimap <expr><silent> <CR> <SID>my_cr_function()\nimap <C-X><CR> <CR><Plug>AlwaysEnd\nlet g:endwise_add_maps = 0\nNote that this also removes the \"recommened\" \"\" at the end of close_popup(), because I do not like to have a new line after selecting a completion (and using C-y directly is not as convenient as using Enter).\n. @NagatoPain this appears to break  in insert mode (for me) - it won't add a newline.\nUsing this I end up with the following imap (see :imap <cr>):\ni  <CR>        & <C-R>=neocomplcache#smart_close_popup()<CR><SNR>49_DiscretionaryEnd\n. @pjg endwise has the patch now, but with a differently named variable (double-check that)\n. @pjg \nI get the same behavior: pressing Enter with pumvisible(), but no entry selected just closes the popup, but does not insert a new line.\nThis is the same with vim -u NONE -N though (using C-n there with multiple choices).\n. It looks like this issue can be closed..\n. Oh, you're right - I've misread that part of the code.\nThanks.\n. Well, but in my case it is the expected behavior: I am creating a new home for a \"root user\" and the files should get saved with root permissions therein.\nI know that there might be problems when using \"sudo vim\" directly, but that's a general problem and nothing neocomplcache should warn about - imagine if all other plugins creating temporary files would behave in the same way.\nIf you really want to catch \"sudo vim\" then maybe check/look at $SUDO_COMMAND, but I do not think that this is neocomplcache's job still.\n. Can you add a condition to your check that looks for $HOME == expand('~'.$SUDO_USER), which is the case with \"sudo vim\", but not with \"sudo env HOME=/some/special/home vim\"?\n. In my special case the following applies:\nSUDO_USER=user\nUSER=root\nHOME=/home/user/.sudosession/root\nexpand('~user')=/home/user\nSUDO_COMMAND=/tmp/sudosession.VXNYao\n. Yes, adding the \\k part will make it work better probably.\nIs there a reason for neocomplcache to not use \"\\k+\" by default, but \"\\h\\w\"?\n. What is bad about multibyte characters? In fact, the German umlauts are multibyte in utf-8, too.\n. Could you add a g:neocomplcache_keyword_characters variable then, which would default to \\h\\w*, but could be set to e.g. \\k\\+ by the user? (similar to g:neocomplcache_wildcard_characters)\n. Well, looking at commit f1bcc97 it seems like \"\\h\\w_\" could get replaced just like \"_\" gets replaced there?\nThis would replace any \"\\h\\w\" instances if (e.g.) g:neocomplcache_keyword_characters would be set.\nTo use \"\\h\\w*\" explicitly, you could introduce something like \"neoword\" and replace this always with \"neocomplcache_keyword_characters\", even if the default is used.\nAm I missing something?\n. Thanks.\nBut have you verified that it works?\nOne problem appears to be that \":set nobuflisted\" causes \"bufnr()\" to return -1, which is then used below.\nAnother issue is that there might be a \"swap file already exists\" error, which is suppressed because of using \"silent\".\nThe second issue can be fixed by using:\n\" Open new buffer (readonly, and skip warning about any swap file).\nlet s:save_shm = &shm\nset shm+=A\nexecute 'silent edit +set\\ ro ' fnameescape(a:name)\nlet &shm=s:save_shm\n. Another idea might be to setup a autocommand for this file (e.g. BufReadPre) to handle loading of (e.g. by invoking the caching from there).\n. Ok, bufnr() appears to work correctly - I must have messed up something before.\nWhat do you think about setting 'readonly' when loading the new file?\n. There's no \"default\" key for g:neocomplcache_same_filetype_lists, is there?\nI would like to have completion from all buffers in the current buffer (at least until it may annoy me, and I want to restrict is somehow).\nHow would I configure this?\n. I am using let g:neocomplcache_same_filetype_lists.gitcommit = '_' now, but I am really looking for is a g:neocomplcache_same_filetype_lists._DEFAULT_ setting.\nBut not only default, but one for \"all\", which would get appended to any entry in the list - while \"default\" would only be used for filetypes which are not configured explicitly.\n. From looking at the code it appears to still be not possible to say \"I want to complete from all other filetypes, for all filetypes\", is it?\nI want to have completion from ft=help buffers in every window, for example.\nBut in general I would just like to skip the \"use this filetype as source\" logic/handling altogether.\n. Are you sure? It seems that NeoComplCache always sets the defaults for this and other variables?\nMaybe it should check if the dict is undefined and only add its defaults then?\nI have tried the code above both before and after loading the plugin.\nIt works after NeoComplCache has been enabled, but you cannot call NeoComplCacheEnable from ~/.vimrc directly.\n. Thanks.\nPlease see my comment on the commit [1] - I think it makes sense to streamline this initialization of dictionaries, at least where the default key (\"_\") is also used.\n1: https://github.com/Shougo/neocomplcache/commit/0486528136e0a765ffaec0079314344449371ab8#commitcomment-1926957\n. Thanks, I will give it a try.\nFor reference, it is called neocomplcache#disable_default_dictionary() though.\n. What is text mode meant for?\nFrom a quick glance it interacts with case insensitivity mainly/solely?!\n. icase in text mode appears to be introduced in 4619d3b:\n@@ -1322,6 +1322,7 @@ function! neocomplcache#get_complete_words(complete_results, is_sort,\n   let words = []\n   let icase = g:neocomplcache_enable_ignore_case &&\n         \\!(g:neocomplcache_enable_smart_case && a:cur_keyword_str =~ '\\u')\n+        \\ && !neocomplcache#is_text_mode()\n. Ok. But wouldn't it make sense to offer \"fooBar\" in case only \"foo\" has been typed (instead of \"foobar\")?\nBecause \"fooBar\" is the candidate and it is matched exactly. Only after \"foob\" it should get offered as \"foobar\".\n. Thanks a lot!\n. I do not have something different in mind. Maybe neocomplcache could use a prefix for its insert mode mappings?\n. Yes, I would like to see a section in the FAQ describing how to add a source for it.\nIt would be nice to also have the short documentation in there then - this does not appear to be possible by just using a dictionary (like I currently do).\n. ",
    "locojay": "i have this and the latest master\nlet g:snippets_dir = \"~/.vim/mysnipets/,~/.vim/bundle/snipmate/snippets/\"\nbut it does not pickup  python-custom.snippets which is in ~/.vim/mysnipets/ : I don't get any popup for these\nany idea?\nis this a  pathogen load order issue?\n. Thanks unfortunately that did not help. I don't get suggestion's for the custom snippets\n. i also change the name of the neocompletecache submodule to vim-neocompletecache so pathogen loads it first. but that did not help. I also noted that g:snips_author gets overwritten to Me\nthat is my vim configuration https://github.com/locojay/locovim\n. did an echo of g:snippets_dir at line 56 of snippets_complete.vim\nit s the correct value ~/.vim/bundle/snipmate/snippets/,~/.vim/mysnipets/\nbut  if i the start and type mlib (one of my custom snippets) nothing pop us up\nline 50 should be if !exists('g:snips_author') instead of  if !exists('snips_author') otherwise snippets author set in vimrc get overwritten to \"Me\". \n. thanks for fixing the author prob.\nline 67\n['~/.vim/bundle/snipmate/snippets/', '~/.vim/mysnipets/', '/Users/locojay/.vim/bundle/vim-neocomplc\nache/autoload/neocomplcache/sources/snippets_complete', '/Users/locojay/.vim/mysnipets'] \nline 317\n['/Users/locojay/.vim/bundle/snipmate/snippets/.snippets', '/Users/locojay/.vim/bundle/vim-neocomp\nlcache/autoload/neocomplcache/sources/snippets_complete/.snip'] \nthe snippets i would like to have completion for is :\nhttps://github.com/locojay/locovim/blob/master/mysnipets/python-custom.snippets\n. works many thanks\n. ",
    "alphatester": "sorry, my comment miss detailed information.\nsparkup is the one you put in the link. \nbefore installing neocomplcache  when I edit an html document, I type \"div\" and ctrl+e, it expands to \"<div></div>\".\nafter   installing neocomplcache when I edit an html document,  I type \"div\" and ctrl+e, it extands to \"<diu></diu>\"\nand something the expand doesn't work anymore in more complexe scenario like \"div >ul >li*4\".\n. ",
    "devth": "I'll second that. zencoding.vim is much nicer.\n. That was it, thanks!\n. I set let g:neocomplcache_snippets_dir = '~/.vim/snippet/'\nCan I let the snippets in ~/.vim/snippet/ override the snippets in javascript.snip? Not quite sure what you mean by define user snippets.\n. Sorry, my mistake. Updated to correct path: '~/.vim/snippets/' and it overrides correctly now. Thanks!\n. Thanks.\n. I installed neocomplecache-snippets-complete but still get:\nE117: Unknown function: neocomplcache#sources#snippets_complete#expandable\nE15: Invalid expression: neocomplcache#sources#snippets_complete#expandable() ? \"\\<80><fd>S(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\^N\" : \"\\^I\"\n. Never mind, fixed it by updating config. Thanks again!\n. ",
    "stardiviner": "why snippet trigger #! can not be expanded ? use force_expand too ?\n. Is it possible to sort different types with the priority ?\nFor example: let snippet at the first priority, abbreviations at second priority, and omni complete at third priority, or user defined complete function at top, etc. Sort them like this.\nHope there is a option to define the order of those priority with array etc.\ne.g. let g:neocom...option = ['priority 1 item(snippet)', 'priority 2 item(abbrev)' ...]\n. => On [2012-05-20 20:43:11 -0700]:\n Shougo Said:\n\n\nIs it possible to sort different types with the priority ?\n\nIt's g:neocomplcache_source_rank. Please read documentation.\nI read the document, and checked out source code, have not found how to define\nthis.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/104#issuecomment-5815001\n\n\n[ stardiviner ] ^^&^^ {I hate all of you !  Leave me alone}\nIRC(freeenode): stardiviner     \\ Twitter:  @numbchild \\\nGnuPG Key fingerprint\n    >>> 9BAA 92BC CDDD B9EF 3B36  CB99 B8C4 B8E5 47C3 2433\n. Change g:neocomplcache_source_rank's 'omni_complete' sort way.\nIn python: when neocomplcache use omnicomplete like this:\npython\nimport sys\nprint(sys.|)\nat cursor position |, it will popup a menu, but those method, variable, which start with sys.__version__ etc is upper than sys.argv. I think sys.argv should upper than sys.__version__.\n. I set it to this:\nlet g:neocomplcache_compare_function = 'neocomplcache#compare_rank'\nThat what I set, and I think default is this. still that rank.\n. => On [2012-05-23 07:00:03 -0700]:\n Shougo Said:\n\nI fixed this problem. Please try it.\nThanks very much. Really.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/104#issuecomment-5873575\n\n\n[ stardiviner ] ^^&^^ {I hate all of you !  Leave me alone}\nIRC(freeenode): stardiviner     \\ Twitter:  @numbchild \\\nGnuPG Key fingerprint\n    >>> 9BAA 92BC CDDD B9EF 3B36  CB99 B8C4 B8E5 47C3 2433\n. focus on this issue\n. There are some available completion for os.fc like os.fchdir, os.fchmod , os.fchow etc.\nhere is the screenshot.\n http://ompldr.org/vZDF2bg\nand even I input 'd' after 'f', it stiil is this problem.\n. $ vim --version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Mar 12 2012 06:19:25)\nIncluded patches: 1-429\n. Maybe some other plugins is conflict with this. Is there some ways to debug this ?\n. I have tested with minimal .vimrc, still same problem, freeze this problem.\n. here is my minimal .vimrc (updated - more minimal)\nhttp://pastebin.com/waWrXgnJ\n. I have found out what cause this problem, there are three configs can cause this.\n1. set cursorcolumn\n2. plugin 'fugitive'\n3. plugin 'extradite'\nI pasted my two version vimrc on bellowing (one has no upper three configs, another has upper three things)\nhttp://pastebin.com/b8rD4CAb\nhttp://pastebin.com/ebnJDJ3x\n. I have changed to 'setlocal', still has problem. weird. anyway. keep this issue open.\n. Yes, you're right.\n. Error occured calling omnifunction: htmlcomplete#CompleteTags\nfunction 195_do_auto_complete..neocomplcache#get_complete_results..195_set_c\nomplete_results_words..\n305..htmlcomplete#CompleteTags, line 203\nVim(let):E684: list index out of range: 0\n. I do not know how to send bug report to maintainer ... Is there a small tutorial link ? I want to learn this.\n. Fixed, now, I find out the reason, autocmd QuickfixCmdPost *grep* cwindow, here not star around grep.\n. Do you mean the system pythoncomplete file from installed Vim ? Ok, I will. thanks.\n. Python3 omni complete can not complete with neocomplcache.\nError: neocomplcache has not auto popup completion items.\nand when I press , vim raise error:\nError: Required vim compiled with +python\nE117: Unknown function: pythoncomplete#Complete\nThen, I execute commands like this.\nopen a python file. then execute command -> :setlocal omnifunc=python3complete#Complete,\nthen <C-x><C-o> can work, but neocomplcache still does not work.\nAnd by the way, I put au FileType python          setlocal omnifunc=python3complete#Complete before VAM load neocomplcache, is it error on this ?\nI have compiled vim with feature +python3 support, and set python3complete like this:\nvim\nau FileType python          setlocal omnifunc=python3complete#Complete\nand the python3complete.vim in /usr/share/vim/vim73/autoload/python3complete.vim\n. Hmm, does neocomplcache support python3 interface ? if not, I want to feature request of python3 complete.\nAnd this should have an option for use python interface complete or python3 interface complete.\n. I'm confused now. I think if neocomplcache can use python interface to popup completion. then neocomplcache also can use python3 interface to completion too. And I'm now saying that  error E117: Unknown function: pythoncomplete#Complete, I'm talking about support python3 complete. (maybe I'm wrong, I do not know much on vim and python complete etc).\n. It's ok now. Thanks very much. really.\n. A very simple version: ( I use endwise too.)\ninoremap <CR> <C-R>=neocomplcache#smart_close_popup()<CR>\n. Excerpts from [ Shougo ] //// On [2012-08-01 19:05:25 -0700]:\n\nI see.\nBut neocomplcache supports multiple filetypes (ex: html.python).\nWhy you don't use mutiple filetypes?\nWhat's its advantage?\n\nI have tested with command :set filetype=text.python, but this seems can not \nenable \"auto\" popup menu completion. It can use <C-x><C-o> to use omni \ncompletion. But can not \"auto\" popup.\n\n[ stardiviner ] ^^&^^ {I hate all of you !  Leave me alone}\nIRC(freenode): stardiviner     \\ Twitter:  @numbchild \\\nGnuPG Key fingerprint\n    >>> 9BAA 92BC CDDD B9EF 3B36  CB99 B8C4 B8E5 47C3 2433\n. Now I think the better and safer way to add other language completion in is not to set compound filetype (:set filetype=vim.python).\nExample:\nI edit a vim file, then :set filetype=vim.python, then neocomplcache can use vim and python completion now.\nBut question comes:\nThere are some other plugins use filetype too.\nLike some on-the-fly syntax checker (e.g. Syntastic), after set compound filetype, the Syntastic plugin will check as python filetype. (Maybe Syntastic implement compound filetype checking).\nBut let other plugins which use filetype too to implement compound filetype is not possible.\nSo I think neocomplcache should implement a mechanism to add other languages completion inner neocomplcache. similar with local concept.\n. Works perfect. thanks very much. \n. And I found one more thing, hope neocomplcache give out a function to show current setted filetype by :NeoComplCacheSetFileType command. I use this function to indicate neocomplcache inner 'filetype' on statusline.\n. No, I think \"~/.vim/after/ftplugin/python/python.vim\" is sourced, because when I remove that dictionary option, neocomplcache can complete correctly without error.\n. You're right, I forget to use compiled version Vim which has +python3. \n. I use some plugins like Utl.vim, vimwiki, etc plugins, they recognise file location schema without escaping the whitespace. I need to open those file location schema links in Vim, like PDF file etc. If I neocomplcache complete filename with \\, I will have to remove them manually.\n. Ok, I can wait. and thanks very much.\n. Hmm, bpython, or ipython seems can complete them, I don't know how does they implement it.\nYeah, feature is good.\n. I did installed PySide . let me debug this, (comment out all options)\n. I comment out all neocomplcache options, only left option to auto complete. Still can not complete correctly. Maybe my python PATH is wrong ?\nI checked out the result of sys.path. the result is in my first post (upper). Seems can not find PySide. or sys. (I do not know where is sys and PySide)\n. Yes, My PySide is in python3 path. But why sys module can not be complete too ? Then I did another test:\nI try to complete subprocess. Now neocomplcache can complete until the fourth character import subp.\nI guess my some setting is wrong, limited the include_complete results. Do you think which options or settings will affect this ? popup menu length ? neocomplcache complete length ? or include_complete candidate priority is not high enough ? (I test this, set include_complete rank into 600, still same) My candidates are two syntax_complete and the others are all [D] words.\nUpdated. and no change.\n. Seems I have problem on this. push into my TODO.\nI found another improvement:\noption\nlet g:neocomplcache_include_patterns.python = '^import' should support\nfrom PySide import QtGui this style.\ncomplete for library after from and after import.\n. sorry, from PySide import QtGui is supported. about sys can not be completed, I think the word length is not enough even I set auto complete length to 2. because other module name like argparse etc need more then three characters.\n. Solved, I disabled dictionary_complete with option\n let g:neocomplcache_source_disable.dictionary_complete = 1 then it can complete sys now.\n. I see.\n. Now solved.\n. disable clang_complete source ? which one ?  I installed clang-complete and neocomplcache-clang two plugins, \nAnd I set this two plugins with bellowing options.\nhttps://gist.github.com/3683100\n. Solved.\n. I set pattern same with Python, seems work good.\nlet g:neocomplcache_omni_patterns['ruby'] = '[^. \\t]\\.\\w*'\n. +1 (will this dash - conflict with other languages delimiter ??)\n. @zhaocai Here can work.\nMaybe you should use\nlet g:neocomplcache_wildcard_characters['_'] = '-'\n. I use rubyComplete again. I did installed rsense omnifunction, I put that rsense.vim file in .vim, maybe I did not do some steps like startup rsense server etc ??? But whatever, I do not use it now.\n. Yes, I put it in .vim/plugin/, the neocomplcache completion can work, just Vim shows that error messages.\n. Forget this problem.\n. Hmm, look, dictionary_complete source should complete words in dictionary, right ? so, Which is in dictionary, and neocomplcache should complete it, (Notice here Which is start with an uppercase W, instead of downcase w). But in my neocomplcache, neocomplcache will not show candidates for Whi.\nIf you want to reappear it, I want to check one thing, can you complete Whi with dictionary_complete ?\n. I found the problem, I set bellowing:\nvim\nlet s:TextFileType = ['text', 'mail','markdown',]\nif index(s:TextFileType, &filetype) >= 0                                                                                                                                                         \n    let g:neocomplcache_source_completion_length['dictionary_complete'] = 2 \n else     \n    let g:neocomplcache_source_completion_length['dictionary_complete'] = 4                                                                                                                      \n endif\nThis seems can not work correctly, do you have better solution ? thanks\n. But :NeoComplCacheAutoCompletionLength is for all complete candidates, I hope this setting length only for dictionary_complete source. That's the reason of option g:neocomplcache_source_completion_length.\n. Ok, I see. well, I think let neocomplcache becomes dynamically is good and possible.\nLike my idea, dynamically length for different filetypes, and neocomplcache of course can do this.\nBecause those value can invoked in autoload/. Well, maybe not.\n. I see, thanks\n. I'm still learning Ruby language, I feel Ruby seems use #, :: too. (I'm not clear now, when I finished, I will patch the omni_patterns)\n. Or maybe I should set let g:neocomplcache_omn_function for this ri.vim ? But I can not find any condition do set this, it does not has filetype, and other things can let I set omni_function for neocomplcache. maybe buffer name ?\n. Or should I suggest ri.vim author set filetype for this opened buffer, like rdoc etc ? then I can set let g:neocomplcache_omni_function['rdoc'] = 'RDocAutoComplete\n. I have not found io. candidates too. (weird), but the . is in candidates. (not all, some of them).\nHere is \n. Ok, if it is pythoncomplete feature, Can neocomplcache improve ? just like I said in first post the second entry. let neocomplcache still auto popup even like this.\n. Seems not solved. maybe you misunderstand my words, I want neocomplcache continue auto popup after I select candidate os in menu (here it complete with os.), then it becomes subprocess.os. here neocomplcache seems can not found a thing like a trigger to auto popup menu. neocomplcache should continue even after select os.\n. There are two ways to solve this, I do not know much about them, but they are two ideas:\n- let neocomplcache check the string before cursor after you select a candidate. so after you selected os., the cursor will treat the dot . after os as a omni pattern, so neocomplcache will continue auto popup menu.\n- or let neocomplcache remove the dot .. Or I will let pythoncomplete.vim maintainer add an option for this.\n- There is an confuse in my brain, it is why the os in candidates list is different ? the menu shows os, but actually input is os., if like this, maybe neocomplcache can use os instead of os. to solve this problem, but this is really really a bad idea.\n- I come up another idea, but I forgot it when I'm writing the first idea..... \n. Oh, I missed you words, you mean use <Plug>(neocomplcache_close_popup) to then start a new popup ? but will it be possible to use auto popup continuously ?\n. I set like this inoremap <expr> <C-h> neocomplcache#close_popup().\"\\<C-h>\" , this setting will remove the dot ., but when I input the dot ., neocomplcache does not raise the popup.\n. I found the problem about upper <C-h>, I removed .\"\\<C-h>\". then it worked.\n. I found the problem about upper <C-h>, I removed .\"\\<C-h>\". then it worked. If has the .\"\\<C-h>\", when I press <C-h>, it will remove the dot, then I input dot ., then neocomplcache does not popup. This maybe is a problem too ???\n. Yeah, I know that, let me describe the situtation totally again.\nBut the problem is that When I set like this inoremap <expr> <C-h> neocomplcache#close_popup() instead of inoremap <expr> <C-h> neocomplcache#close_popup().\"\\<C-h>\", neocomplcache close popup and remove dot . after os, then I input . will trigger popup again, and with the correct list of candidates.\nWhen I set like this inoremap <expr> <C-h> neocomplcache#close_popup().\"\\<C-h>\", (notice now with .\"\\<C-h>\"). still similar with upper actions, difference is when I input dot . after os again, it only popup with one candidate os. That's why I say maybe this is a problem in neocomplcache.\n. @ujihisa I know <C-h> is not for selecting candidate. I said the problem of difference between with the .\"\\<C-h>\" candidates list and without .\"\\<C-h>\" candidates list.\n. If it is heavy, what about add an FAQ, suggest user disable other sources, like for other source that do not about Ruby, this maybe help performance.\n. Wow, wow, I still want to try and use ruby omnifunc. Just like the PHP omni in neocomplcache. even it is heavy.\n. Ok, can you give me the improved omni pattern ? I can not improve it, even I has upper information.\n. And you can add it into document.\n. I see\n. For now, only neosnippet support to see snippet trigger in popup menu, but it is not powerful enough. But I always want to this feature. I try to create a project which can show snippet trigger from UltiSnips and snipmate etc plugins. But it is hard, And I have never written any plugin before. I still seeing source code of neosnippet and ultisnips.\n. What do you mean \"all snippet trigger\" ? All snippet rigger just in neosnippet ? or support other snippet engines like ultisnips and snipmate too ?\n. There is a difficult to support UltiSnips, UltiSnips support regex in trigger, like \"re(re)?\" r, I think this is almost impossible to show up in popup menu.\n. > But I think the pattern is too slow. You should customize the pattern.\nDo you mean the pattern in plugin vim-R-plugin ? this:\nvim\nwhile start > 0 && (line[start - 1] =~ '\\a' || line[start - 1] =~ '\\.' || line[start - 1] =~ '\\$' || line[start - 1] =~ '\\d')\n. Yes, I see, (my VimL level is a newbie too :) ). I will send push request to repository. Thanks.\n. I like your plugins, It's my pleasure.\n. I learned, but need to learn more. I just learned about VimScript syntax, and something basic, but something like vim regex, and more advanced are not learned.\n. Still same error.\n. Here is the output of I enabled neocomplcache debug option.\nWhat I type is let g:neocom\n\n. I found the problem. I set this let g:neocomplcache_source_completion_length['vim_complete'] = 1. But I set auto complete length to 2 let g:neocomplcache_auto_completion_start_length = 2. I guess that's why has this problem.\n. If I want to use let g:neocomplcache_source_completion_length['vim_complete'] = 1, should I make the g:neocomplcache_auto_completion_start_length option value smaller than the source complete length ?\n. Yeah, even though after I removed all other neocomplcache options except two basic options. This error still occurs. weird now... let me check my config git log. found what added into vimrc recently.\n. @Shougo Can you test my neocomplcache configs ? Here it is vimrc neocomplcache\n. not solved. I see. I'm sure must be somewhere is wrong in my vimrc. I will find it. And by the way, my neocomplcache setting is too slow, so what should I do to speed up ? reduce complete length ? or remove some options ?\n. I see. thanks\n. I always update neocomplcache, everytime the issue you update, then I will update neocomplcache.\n. I have try to debug vimrc. (remove all plugins except neocomplcache, and all useless vim options). Still can not find out why and where.\nAfter update (now). I found a litter change in error output:\nThe line number is changed. it is line 13 now.\nHere is the error output\nfunction <SNR>238_do_auto_complete..neocomplcache#get_complete_results..<SNR>238_set_complete_results_words..330..neocomplcache#sources#vim_complete#helper#command..neocomplcache#dictionary_filter, line 13\nVim(if):E715: Dictionary required\nSource name is vim_complete\nError occured in source's get_complete_words()!\nStill same input. The input is le in ~/.vim/vimrc. (what I want to input is let g:neocom..., when I typed le, then that error occurs.)\n. Can you show me your vimrc ? and can you tell me how to debug neocomplcache ? for example, use Git to debug neocomplcache. help me to locate the problem in my vimrc and in neocomplcache.\n. Oh, and one thing I should tell you, actually source vim_complete can complete. but just has upper error. for example, neocomplcache can complete like let g:neo -> let g:neocomplcache...\nBut only occurs that error when I type le, or other string has two characters.\n. I uncomment that two echomsg lines. It shows the dictionary.\n. Here is my vimrc. https://gist.github.com/3891591\nThanks for you help.\nAnd here is the two echomsg dictionary output:\n\n. Solved. This really is a big bug like a huge wall in dark night.\nThanks. @Shougo .\n. If I disable some sources in sources list, then they will be disabled always in current Vim session.\nI just want to disable some source in this \"[Command Line]\" window. (I found this window buffer name is \"[Command Line]\")\n. What about let Dictionary option like g:neocomplcache_omni_func['FileType'] 's key ['FileType'] also can work or a buffer name pattern ? In case of some filename has same pattern with the buffer name (like this \"[Command Line]\"), maybe can only check buffer names without file extension. This only can work in some cases which buffer name do not contains file extension. Anyway, this is not a good idea.\n. Or use b: local prefix ? then use those buffer local neocomplcache options with autocmd ?\n. No, I have not said vim_complete is omnifunc, I mean user can custom an omnifunc to used by neocomplcache. just like let g:neocomplcache_omni_func Dictionary option.\nThat autocmd and b: optionsolution is ok.\n. After update, And add that autocmd to vimrc, (It is CmdwinEnter). I tested, not work.\n. Sorry, I have not check your upper given code. I missed one *. now it can work. My fault.\n. A screenshot. http://ompldr.org/vZnpubQ\n. I have to say, I have no programming experience. So please pardon me if what I said is not sane.\nThat's why I only give out some ideas or thought, instead of the really code.\nAnd this should be considered as a discuss, I guess.\nWhat about separate candidate into characters.\nAn example:\ncandidate1: connect10\ncandidate2: connect1\ncandidate3: connect2\nafter separation:\n['c', 'o', 'n', 'n', 'e', 'c', 't', '1', '0']\n['c', 'o', 'n', 'n', 'e', 'c', 't', '1']\n['c', 'o', 'n', 'n', 'e', 'c', 't', '2']\nThem maybe use some algorithm to compare those characters one by one or two per time, or some other algorithms.\nI'm totally not good at algorithm.\nActually neocomplcache only has that default compare function neocomplcache#compare_sort().\nIf neocomplcache can provides other compare_func, even it is heavy. (Maybe just put it in FAQ, instead of neocomplcache source code).\nMaybe I can ask on StackOverflow about this compare algorithm. :)\n. This is just a link to StackOverflow question\n. Thanks, I had a look at wikipedia sort algorithms, really difficult to implement. You're right.\nAnd this is the error of my test of the new update.\nError detected while processing function neocomplcache#auto_complete..neocomplcache#manual_complete..neocomplcache#get_complete_words..neocomplcache#compare_human:\nline    9:\nE684: list index out of range: 1\nE15: Invalid expression: words_1[i] ># words_2[i]\nBy the way, what does the line 9: mean in upper error output ?\n. The update fixed the error.\n. The omnifunc is invalid in neocomplcache context filetype now.\nIn upper example, omni complete is not auto popup anymore after line.\n. But rsense complete is ok in a single ruby file. And I use vim-rsense plugin. Maybe the problem is because I set both omni_patterns and force_omni_patterns ?\n. Do you mean plugin location ? in /home/chris/.vim/bundle/vim-rsense And I use neobundle NeoBundle 'taichouchou2/vim-rsense'\n. And both result is 1 of command :echo exists('*RSenseCompleteFunction')\n. I checked ruby context filetype in vim file, not work too. and the result of command exist... is 1.\n. This omnifunc rubycomplete#Complete can work, but not work correctly. Here is the screenshot.\nhttp://ompldr.org/vZzV3Zg and after select first candidate http://ompldr.org/vZzV3Zw\nselect candidate will delete previous text.\nAnd in ruby filetype, the omnifunc works correctly.\n. I original use plugin vim-ruby. But after disable this plugin bundle, the issue of delete previous text still occurs.\n. VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Oct 26 2012 16:45:52)\nIncluded patches: 1-547\n. After I correct that omnifunc typo, I can use <C-x><C-u> to call user defined complete, but still can not let neocomplcache auto popup menu.\n. You're right, after I :set omnifunc=RsenseCompleteFunction. Then press <C-x><C-o>, it can not parse correctly. I think neocomplcache context filetypes mode should only pass the context between the start marker and end marker. then it will work correctly.\n. I think plugin vim-rsense can improve a internal function s:rsenseCurrentBufferFile(). That buffer is passed to rsense.\nHere is the content of function:\nvim\nfunction! s:rsenseCurrentBufferFile()\n    let buf = getline(1, '$')\n    let file = tempname()\n    call writefile(buf, file)\n    return file\nendfunction\nHere can add parameters into function parentheses. I will notice the author of vim-rsense to improve it.\nHere is the issue: https://github.com/taichouchou2/vim-rsense/issues/1\n. But if this plugin (vim-rsense) need to improve function, I think other plugins like jedi-vim need to improve too..... wow ... \n. Ok, I want have a try.\n. @Shougo I can add two parameters s:rsenseCurrentBufferFile(begin, end), but I do not know how to let plugin vim-rsense knows that it is in neocomplcache context filetypes scope.\n. I can let begin as the start marker of neocomplcache context filetype start maker. that will be simple, but use regexp to match everyone is difficult, and every context filetypes are different.\n. Here is the draft. https://gist.github.com/4029180\n. Or should use global variable specified in vimrc ?\nLike this let g:neocomplcache_context_filetype_lists['vimwiki']\ne.g. use it as begin marker.\nvim\nlet begin = g:neocomplcache_context_filetype_lists[*]['ruby']['start']\nThis is cheap.\n. wow, thanks, that saves me a lot of work.\n. I can wait. I have no time afternoon, I will check out your work at night, and I will pull request to vim-rsense then.\n. hi, @Shougo What is the start in the returned list of function neocomplcache#get_context_filetype_range() ?\n1. the start is the start marker ?\n2. the start is the next line of the start marker ? (means the first line of the context filetype).\nAnd when I execute command :echo neocomplcache#get_context_filetype_range(). It shows [1, 7] in bellowing example:\n``` vim\nfun! WWW() abort\n    echo \"hi\"\nendfun\nruby << RUBYEOF\nline = \"hello\"\nRUBYEOF\n```\nThe result is wrong. (Maybe because I execute it in normal mode, that's why I get [1,7] ?)\n. Does this function correct ? After test, I found it still can not work.\nhttps://gist.github.com/4029378\n. I corrected the if condition. I guess my function is correct now. But seems still now work. And I press <C-r> in vim insert mode, and execute =neocomplcache#get_context_filetype_range(). then still get 1, 7.\n. The start, end number is correct now, but neocomplcache do not popup candidates still.\nI guess it is because this two commits:\n- 297585fc23ebf18ba717552f98544c2e2d19ceef\n- 0a9826011436827872298026e43e448bfbea8197\n. And the result of <C-r>=&omnifunc in insert mode is not the value of neocomplcache omni_func (RSenseCompleteFunction). (Maybe that <C-r>=&omnifunc is the result of global omnifunc, instead of context filetype omnifunc. I'm not sure how to get the omnifunc in context filetype, do you have a way to show it, I mean a simple debug way. like echo to let me know my context filetype omnifunc is correct.)\n. Checked out, The omnifunc and start/end line are both correct, and omni seems is actived too. ( I saw -- Omni completion (^O^N^P) Pattern not found after input dot . at code line.|)\nAnd I checked <C-R>=&omnifunc under insert mode, it is RSenseCompleteFunction. correct.\nBut neocomplcache popup menu just does not raise.\nEverything I can thought is correct now. weird.\n. Did you tested on a ruby filetype file  to check whether RSense server is working ?\nI checked, not work too. very weird. should I post issue to RSense project ?\n. Here is a link to RSense issue https://github.com/m2ym/rsense/issues/9\n. @Shougo Have you tested ? I updated neocomplcache, but still not work.\nI open a new markdown file\nand input context filetype:\n``` ruby\na = \"hi\"\na.|\n``(a backtick more)\n(sorry I can not include three backticks in GitHub markdown syntax)\nAnd neocomplcache does not raise up the popup menu.\nWhen I type the same code:\nruby\na = \"hi\"\na.|\nin a ruby file. the popup menu is raised.\nI think still has problem.\n. I added neocomplcache-rsense plugin into my vimrc. and tested, here is the screenshot:\nhttp://ompldr.org/vZ2M2aA\nThe result is not correct. I try to debug neocomplcache-rsense, but I have not found.\nI also check my $RSENSE_HOME variable, it is correct. in /home/chris/opt/rsense.\n. I installed vimproc plugin.\nAnd no, it does not work in normal ruby script file.\nAfter I press ., it does not do anything, I can not see omni completion or user defined completion in command line.\n. I think neocomplcache-rsense has problem.\nI ues minor vimrc with this : https://gist.github.com/4108794\nTwo weird places:\nI have a ruby file: rsense.rb with code:\n``` ruby\n!/usr/bin/env ruby\n-- encoding: utf-8 --\na = \"hi\"\nb = 2\n```\n1.\nwhen I input b.|, vim does not raise up popup menu.\nthen I input b.t, then vim raise popup menu now, but it is wrong, there are many candidates which does not start with t. I guess here the t is similar with . .\n2.\nwhen I input a.|, vim does not raise popup.\nwhen I input a.c, vim raise popup menu, with all omni completions. (like upper case)\nwhen I continue to input e after a.c, then the popup menu closed.\n. Hi, @Shougo Did you forget this issue ? I checked out neocomplcache-rsense.\n( some complicated part I can not understand, and it use vimproc, the function vimproc#popen2() is difficult for me. And why use mode() ==# 'n' ? 0 : 1 ? this seems means it also used for Vim normal mode ? I saw col('.') - (mode() ==# 'n' ? 0 : 1) . )\n{ I guess you do not have time recently, because you have not update other new added issues }\n. I realized that maybe only I will want to custom very small behavior. :P \nI guess maybe most user only use some global options of neocomplcache.\n. After a time to think, I think this is really not the best way. The best way to know what neocomplcache did is to read the source code. Now close it.\n. I understand a bit more now.\n. @Shougo Should I create a new issue on neosnippet ? If you have add this into TODO. I will not create a new one. (Or you have implemented it, but I have not found it ??)\n. seems good.\n. @Shougo Here is my neocomplcache config. https://gist.github.com/4186839\nAnd this issue happens in every filetype.\n. ok\n. The problem is on option let g:neocomplcache_enable_prefetch = 1\n. https://gist.github.com/4186912 Here is my minor vimrc file.\n. Right, looks same problem.\n. Ok, I will reduce it and post the minor vimrc again.\n. Here is the new minor vimrc: https://gist.github.com/4186929\n. Vim version: VIM - Vi IMproved 7.3 Included patches: 1-547 On Ubuntu\n. weird, I always update ubuntu source, why yours is so new ? how to you update vim ? or you use source code to compile ?\n. I also tried the compiled version. still has this issue. vim version: VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Dec  2 2012 12:40:44) Included patches: 1-744\n. ",
    "kien": "Thanks!\nIdeally I'd prefer it to use the tabstop set by user by using exe 'setl sw='.&ts, but I guess I can live with having ts=4 for this filetype.\n. Good idea. Thanks!\n. ",
    "tocer": "thank you very much\n. But it can not work for me when I want to expand '_opj' to 'os_path_join'. Nothing happen. \nDoes it work well for you?\n. it works well, thans for effort.\n. It works well. thank you very much\n. ",
    "jetm": "Yes, I am using this mappings.\nJust now, I testing with another vim version and work well:\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled May 25 2011 22:06:37)\nIncluded patches: 1-206\nI wonder if is vim 7.2?\n. I was using neocomplcache v6.0 from vim.org.\nI downloaded the latest version from github.com and now it's working fine :)\n. ",
    "zhuangya": "i've met this problem for a long time :(\nmy vim is macvim 7.3 snapshot64, which is the latest..\nand i install neocomplcache via github, i mean pathogen.\n. nope... it's the problem with supertab.\nyou can check it out here : https://github.com/ervandew/supertab/issues/15\n. thank you so much!!! \n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f   :P\n. ",
    "brendonrapp": "I ran into the same problem, but in my case, it was the \"endwise\" plugin that was mapping .\n. ",
    "pjg": "I wish neocomplcache would work with vim-endwise without any problems...\n. @Shougo this is unfortunate :/ I'm sure you know @tpope, perhaps you should discuss the fix with him? For all I know, I've read a couple of closed reports at vim-endwise about the same exact issue with other plugins.\n. @Shougo the problem I have with your updated example is that it does nothing for me. It's just as if I had not any  mappings in insert mode. Pressing enter now does two things - autocompletes using the selected entry and adds a newline character, while with the mapping it should only be the former (i.e. no newline should be inserted).\n. @Shougo yes, the problem I've described is when I use this exact snippet.\n. With the above snippet for imap <expr><silent> <CR> pressing enter when choosing autocompletion from the menu selects this autocompletion and it also moves you to the next line (i.e. <CR> is literally inserted), while using the previous snippet for <CR> mapping in insert mode without the vim-endwise plugin when pressing <cr> in insert mode on autocomplete menu item it would only select the item from the autocompletion menu and would not insert a newline character.\n. It doesn't work. It still inserts <cr> after closing the popup. Like this whole imap is being ignored (i.e. without it it behaves just the same).\n. For reference, this seems to be a good commit from supertab which seams to deal with a similar issue. https://github.com/ervandew/supertab/commit/c6d704c6daf64b85828d99a88f9099efc7e01299\n. > This is SuperTab's issue.\nNo, that's not what I meant. What I am trying to say is that I had zero problems with SuperTab and vim-endwise working together. And I pasted a commit that most likely makes those 2 plugins work together. Something similar is needed for neocomplcache.\n. Unfortunately it still suffers from this problem:\n\nPressing enter in neocomplcache menu now does two things - autocompletes using the selected entry and adds a newline character, while it should only be the former (i.e. no newline should be inserted).\n. This almost works, but has this issue: when I type something and the popup shows but I do not select any item from the popup complete list and I press enter it only closes the popup, while it should have moved me to a new line.\n. Still the same. I believe this should look something like this (pseudo code follows):\n\nif pumvisible()?\n  if item_is_selected_from_popup_menu()\n    neocomplcache#close_popup()\n  else\n    neocomplcache#close_popup() + \"\\<CR>\"\n  end\nelse\n   \"\\<CR>\"\nend\n. :/\n. Yeah, I know... but still have one of the aforementioned issues - if nothing is selected in the popup pressing enter does not produce a newline entry.\n. This mapping:\n\ninoremap <expr><CR> neocomplcache#smart_close_popup() . \"\\<CR>\"\n\nis conflicting with vim-endwise and I cannot use it.\n. > Do you want to choose completion by <CR> but no inserting <CR>?\nYES!!!\n\nI think you should use this mapping.\ninoremap <expr><silent> <CR> <SID>my_cr_function()\n function! s:my_cr_function()\n   return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\n endfunction\n\nThis still inserts a <CR> after selecting the item from the menu during autocompletion :/ And this is another manifest of the conflict with vim-endwise - when I disable vim-endwise, the mapping above works correctly -- it only selects the item from the autocompletion menu - it does not inserts a newline.\n. Reported at vim-endwise issues.\n. @NagatoPain your mapping is clearly wrong. It won't let you add a newline (i.e. I press enter in insert mode and nothing happens).\n. @blueyed Thank you for taking your time to fix that, although it did not improve anything at my end :/ Using latest vim-endwise (with your patch applied) and your mapping above, I suffer from two issues:\n1. When typing something the neocomplcache popup appears, with nothing selected in the popup I press enter (with the intention to move to the newline). Popup closes. I have to press enter the second time to move to the newline.\n2. I type something, neocomplcache popup appears, I press <tab>, first item is selected. I press enter with the intention of selecting element from the popup. Item is selected and a newline character is inserted\n:/\n. @blueyed using the following with the latest vim-endwise:\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\\<Plug>DiscretionaryEnd\"\nendfunction\nimap <expr><silent> <CR> <SID>my_cr_function()\nimap <C-X><CR> <CR><Plug>AlwaysEnd\nlet g:endwise_no_mappings = 1\nI still get the following issue: while in insert mode when neocomplcache popup is visible and I don't select any element and press \"enter\", only the popup closes, while I would expect it to insert a newline.\nThis is exactly the same behaviour I get with the simpler mapping:\ninoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>\nfunction! s:my_cr_function()\n  return pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\" \nendfunction\nBtw, I'm also using Raimondi/delimitMate, which might also play a part in this (I see vim-endwise has special handling of this plugin).\n. @blueyed great :) The question is if there is perhaps a solution to that?\n. ",
    "a-sk": "Fixed. Thanks. Nice work.\n. Actually I'm using MacVim, so because of it, vim is not in my $PATH\nthanx for helping.\nps: i just added MacVim to my $PATH\n. ",
    "ensonmj": "\":set omnifunc\", it turns out:omnifunc=ccomplete#Complete\n\":vim /ccomplete#Complete/ ./*/ \" shows that it is supplied by  \"runtime/autoload/ccomplete\" which is maintained by Bram Moolenaar, is it right?\nAnd i tried typing C-x C-o after a \"someinstance.\",nothing but \"--(insert)--\" in bottom. If I type \"::\" after \"someclass\", I can\nsee a few function of that class is displayed with [I], which means it's from include_cache?\nOK, I'll try clang_complete now, but if neco can do that,please tell me. i prefer to use one tool instead of two :)\n. sorry for reopen!\nI have tried clang_complete: just put them into \"source\" directory without any configuration. I have \"c:\\python27\" in my system path. but It seems that libclang.py is not used because \"File 'clang' is not found' is prompted. then i copy a \"clang.exe\" into my path, but I'm discouraged that there is yet nothing after \".\" .\nany suggestion about getting ccomplete working with neco?\n. i delete all the other plugins and download an new clang_complete and clang.\nok, now clang_complete is working\nthanks\n. ",
    "teezoop": "How can I get the the dict file like c-c++-keywords.list?\n. ",
    "c10b10": "Ok, I did that but it didn't seem to help that much. The third buffer completion was expanded as if it was a snippet. I removed the SuperTab behavior and mapped snippet expansion to a separate key to avoid this.  \nAfter the snippet is expanded however, I can't navigate the snippet variables in any way.\n. Scratch that, navigation between snippet variables works. There are some issue however. Here's how func behaves: http://www.youtube.com/watch?v=ZG5rtGJSYYk\n. Thank you for your plugin and for all your help. \n. I changed permissions and rebooted and then it worked. \n. ",
    "Valloric": "Thanks, but I used let g:neocomplcache_lock_buffer_name_pattern = '\\.txt' in the end. This still doesn't address the issue of having neo loaded, setting g:neocomplcache_enable_at_startup to 1 and still seeing the completion menu offered on occasion.\n. I never said that g:neocomplcache_lock_buffer_name_pattern doesn't work. It works just fine. The problem I experienced is unrelated to this variable.\nThe problem was described in the initial issue report: if I use let g:neocomplcache_disable_auto_complete = 1, I still get the completion menu on occasion. In other words, the g:neocomplcache_disable_auto_complete variable does not the work the way it's supposed to. Neocomplcache still offers completions, although less often. It appears that it turns off most of the completion sources, but not all of them, namely searching text in the other opened buffers.\n. Oh, and this would need to be case-insensitive.\n. I thought that may be a problem... CommandT seems to preserve performance by using a custom C plugin. Maybe this work can be reused? \nIf not, could this behavior perhaps be enabled only when the list of candidates is below a certain threshold?\nA third idea would be to limit the behavior only to characters on word boundaries. This is how this feature works in the Visual Assist plugin for Visual Studio. There, if we have GetFooBar, GetBarFoo and GetBazBoo, typing gfb shows only GetFooBar because gfb are word-starting characters. Neo already has something similar with camel case and underbar completion, but it's frankly not well implemented because for camel case, you have to type capital letters (it should be case insensitive) and for underbar completion, you have to actually type the underbar (again, undesirable and unnecessary).\ngfb should work for GetFooBar and get_foo_bar without problems. I should not have to type GFB or g_f_b. The plugin should be smart enough to include candidates that are filtered by word-starting chars along with candidates that actually start with gfb (for instance, gfbfoo).\nBut I'd still prefer a FuzzyFinder-style completion system since it's more generic. CommandT was created specifically because FuzzyFinder was slow in certain situations, and CommandT is very fast because of the C plugin it uses for the actual filtering. It successfully uses this approach on tens of thousands of candidates, and CommandT candidates are full paths that have dozens upon dozens of characters... and it's still fast.\n. As a good starting optimization, the first character typed needs to be the first character of the candidate word. The other characters can be anywhere in the candidate.\nThis would substantially cut down on the number of searches needed. \nSo for gfb, only candidates that start with g would be searched for the letters f and b somewhere in the word.\n. This is MUCH better, thank you!\nIt's a bit rough around the edges, but it works in the vast majority of the cases.\n. For me it's not fixed as well. I'm using Vim 7.3.496.\nOn Tue, May 1, 2012 at 5:01 PM, Shougo <\nreply@reply.github.com\n\nwrote:\n\nAny clue on when this will be fixed? Is there some sort of workaround?\n\nYes. In my environment, it still not fixed. Can you check your environment?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/185#issuecomment-5451184\n. I've noticed this problem while developing a separate Vim plugin, but it should be reproducible with neo as well. One needs to have Vim >= 7.3.418 and g:neocomplcache_enable_cursor_hold_i = 1. Actually, it might be easier to reproduce if you just comment out the conditions and always return dict.refresh = 'always' (just for testing).\n\nBottom line, if the completefunc returns a dict with refresh = 'always', then neo will be called on every keystroke. If you then just type through the completions without accepting anything, the '.' register holds bad history. For me, when I type a word that's present in neo's database but ignore the offered completion, the insert history in the '.' register is broken and does not have the whole word stored.\n. Here's an example:\n1. if \"neocomplcache\" is stored in neo's database \n2. I have  g:neocomplcache_enable_cursor_hold_i = 1 and a recent Vim\n3. I enter insert mode and type \"neocomplcache testing\"  (NOT accepting the completion offered, just typing)\n4. I leave insert mode.\n5. press '.' to insert all that text again\n6. I get nonsense text instead of \"neocomplache testing\".\nThis is not a bug in neo but a bug in Vim; I get the same problem with a different custom completefunc.\n. I'll be thanking you if you provide a fix for this in Vim :). I'm new to the Vim codebase and tracking down the root cause of this seems non-trivial. I saw that @mattn tried to fix this once (Vim patch 7.3.404) so maybe with this new data, it will be easier to track down and fix for good.\n. Like I said, what you type in needs to be already in neo's database. You need to be offered a completion suggestion; the suggestion window needs to appear.\nHere's a screencast of the problem: http://dl.dropbox.com/u/2076969/vim_broken_dot_register.mov\n. @mattn Do you know when the patch you posted on the vim-dev thread is going to be officially upstreamed to Vim? I've been using Vim with your patch since you posted it and have had zero issues since. It fully fixes the problem I had.\n. I've just pinged the thread on vim-dev. Thanks for writing the patch\nand fixing the problem!\nOn Tue, May 15, 2012 at 6:19 PM, mattn\nreply@reply.github.com\nwrote:\n\nBram knows the answer. Probably it's in his todo list. He often pick up from the todo list in his priority. If you warry about, try to post 'ping'. Then, the post may change the priority. :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/185#issuecomment-5731666\n. \n",
    "bootleq": "I've read the help, but I am not sure.\nWhen disable IM, 'iminsert' is still 2.\nTested on Windows 7 (gVim) and Ubuntu 11.04 (term).\nHowever with cygwin term, it's always 0.\nI'll close this issue later, if no further ideas, thank you.\n. Seems some new commit has fixed this.\nClose this issue.\nMaybe at Shougo/neocomplcache@5e1245cb998ee38b96b4ebe12b3159f6ee8de026 - Fixed asyncronous cache bug\n. I'm using FuzzyFinder with neocomplcache together, both work well.\nI believe within FuzzyFinder buffer, neocomplcache locks itself automatically (neocomplcache#is_locked() returns 1).\nThe error message self.lastPattern can be found from FuzzyFinder source, but this information is not enough for debugging.\n. ",
    "Vayn": "Thanks.\n. ",
    "thebaggage": "Hi Shuogo - many thanks - :inoremap tipped me off.\nThe problem was with the supertab plugin - version 1.1, line 596 of plugin/supertab.vim\n\" inoremap <cr> <c-r>=<SID>SelectCompletion()<cr>\nI did have a scan through my .vimrc for another , but I missed going through the plugin mappings.\nThanks again.\n. ",
    "hinablue": "Thanks, a lot. I'll report it to vim_dev. :-)\n. ",
    "contentfree": "Checked out :help g:neocomplcache_compare_function. It just says \"This variable set compare candidates function. Default value is 'neocomplcache#compare_rank'\". Not terribly useful, unfortunately. Where can I find the list of compare functions? And how does compare_rank sort?\n. Are there other compare functions available? If not, what is the method signature for a compare function (I found neocomplcache#compare_rank in the source, but it's variables are nondescript i1 and i2).\n. ",
    "antcodd": "Wow, that was fast! I can definitely see reasons for hating the preview window (I think I might keep using my second idea of adding 'info' to 'menu' so I get the preview without the ugly preview window). I guess it's nice for neocomplcache to work properly with it though :) (and it can be easily turned off in completeopt)\nThanks\n. Thanks for the really fast response, but it doesn't seem to have fixed the problem (I made sure the file was updated). Calling neocomplcache#initialize() does though. Maybe something isn't right with my configuration?\n. Thanks, working now :)\n. ",
    "juanpabloaj": "ok, but when make \n:NeoComplCacheDisable\nI get \nError detected while processing function neocomplcache#disable:\nline   21:\nE716: Key not present in Dictionary: finalize\n. And if I make this sequence \n:NeoComplCacheDisable\n :NeoComplCacheEnable \n :NeoComplCacheDisable\nafter to this Disable, \necho neocomplcache#is_enabled()\nalways is 1 \n. other thing, \n:NeoComplCacheToggle\ndon't change the status of neocomplcache#is_enabled() , does not exist a variable associate to NeoComplCacheToggle ?\n. many thanks, now work.\nvim\n    set statusline+=%{HasNeocomplcache()}\n    ...\n    fun! HasNeocomplcache() \"{{{\n      return !neocomplcache#is_locked() ? \"nCompl\" : \"\"\n    endf \"}}}\n. I understand now, thanks for the info.\nI solved with this\nino <expr> <CR> pumvisible() ? \"<CR><c-o>:pclose<CR>\" : \"<CR>\"\n. but, I don't know, my ino doesn't work fine.\nwhen I use the first time, doesn't work. If I open and save my ~/.vimrc, the ino is fixed\n. with the \"\\\", I get similar problem\n. thanks\n. ",
    "yejianye": "Let me try to get a screenshot for you.\nThe screenshot shows how vim built-in python completion showing a preview window with python doc for the function.\nIn NeoComplete, the doc shows in popup menu, which is kind of useless due to the space limitation.\nhttp://blog.ryanye.me/wp-content/uploads/2011/10/Screen-shot-2011-10-11-at-3.12.08-PM.png\n. Yes, it's default omni completion. The preview window will show as long as\nset completeopt=preview\nAs for echodoc, I didn't see any documents in the repo. Would you mind\nbriefly talking about how it works ?\n2011/10/11 Shougo \nreply@reply.github.com\n\n\nThe screenshot shows how vim built-in python completion showing a preview\nwindow with python doc for the function.\n\nIs it default omni completion(pythonComplete)?\n\nIn NeoComplete, the doc shows in popup menu, which is kind of useless due\nto the space limitation.\n\nI recommend you to use echodoc.\nhttps://github.com/Shougo/echodoc/\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/109#issuecomment-2356267\n. Looks like echodoc is still in very early stage. I installed it and enabled\nit in .vimrc. But nothing happens when I move the cursor on the function.\n\nFor neocomplete, you said \"it doesn't support preview window, except\nomni_complete'. So it does support preview window when using omni_complete ?\nNo ?\nWhat I want is an option that instead of showing doc info in the popup menu,\nshow the info in a preview window.\nAlso, is there a way to manually invoke default vim omnicomplete while\nneocomplcache is enabled? If it's possible, I could fall back to default\npython onmicomplete when I want to see the doc.\nThanks,\nRyan\n2011/10/11 Shougo \nreply@reply.github.com\n\nneocomplcache doesn't support preview window(expect omni_complete).\nBut, echodoc is supported.\nSetting is only this:\nlet g:echodoc_enable_at_startup = 1\n\nAs for echodoc, I didn't see any documents in the repo. Would you mind\nbriefly talking about how it works ?\n\nhttps://github.com/Shougo/echodoc/blob/master/doc/echodoc.txt\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/109#issuecomment-2358874\n. Just pulled the latest code\n\nI think there's a bug in /neocomplcache/autoload/neocomplcache/sources/omni_complete.vim, line 254\nlet dict.kind = omni.info\nomni.info is assigned to dict.kind. That's why preview window won't show up (preview window will only show when 'info' is not empty). It should be\nlet dict.info = omni.info\n. Thanks. Works perfect now! Close the issue.\n. hey, Shougo\nI didn't understand your comment. I want to invoke clang_complete only when I hit . But using the configuration I posted, clang_complete will be automatically invoked when I hit '.'. For example, after I enter 'user.', clang_complete will be called automatically and try to complete properties of 'user' object. \n. Thanks, Shougo. I ended up set g:neocomplcache_force_omni_patterns to an impossible pattern to avoid auto-complete\nlet g:neocomplcache_force_omni_patterns.objc = '_____'\nNot sure whether there is a cleaner way to do this. \n. When I set g:neocomplcache_force_omni_patterns.objc to an empty string, the omnicompletion still happens. Here are my settings\nif !exists('g:neocomplcache_force_omni_patterns')\n    let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.objc = ''\nif !exists('g:neocomplcache_omni_patterns')\n    let g:neocomplcache_omni_patterns = {}\nendif\nlet g:neocomplcache_omni_patterns.objc = ''\nI have to set the omni pattern to '____' or other impossible pattern to disable omnicompletion.\n. ",
    "Phize": "I'm sorry, that's my misunderstanding.\nAll above snippets work well from this commit.\n( :BundleInstall! hadn't updated my neocomplcache, so I have re-installed neocomplcache after :BundleClean. )\n. ",
    "ressu": "Oh, and this is happening with the latest git master, synced a few hours ago.\n. It indeed looks like a vim bug in ubuntu. I'll try to reproduce the fix once i get back home (in a few days). Maybe I can finally re-enable all of the neocomplcache goodness.\n. Yup, dropping vim-gnome fixes the problem. Reporting the problem in ubuntu bugtracker.\n. ",
    "aert": "I had the same issue on Ubuntu 11.04 and vim-gnome (no problem in vim console mode).\nGot rid of this by removing vim-gnome and installing vim-gtk.\nCheers.\n. ",
    "mattn": "@ressu see https://bugs.launchpad.net/ubuntu/+source/vim/+bug/856779\n. Ah, sorry. this seem that it's not depended on my previous post.\nIgnore my comments.\n. :echo has(\"float\")\nWhat value can you see?\n. Hmm...\nWhat is your LC_NUMERIC? and :echo str2float(\"0.01\") ?\n. Please let me know your LANG LC_ALL LC_CTYPE.\nOn 2/22/12, Obedi Ferreira\nreply@reply.github.com\nwrote:\n\nAnd now, here is something. I edited\n/home/obedi/.vim/bundle/vimfiler/autoload/vital/_c7f20e/prelude.vim and\nchanged the line 27 from \\   type(3.14159) to \\   type('3.14159') and it\nworked!\nSame thing for neocomplcache, line 27 from \\   has('float') ? type(0.0) :\n-1 to \\   has('float') ? type('0.0') : -1.\nAlthough it works, I didn't understand well why. I dunno if that's the right\nthing to do either.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/142#issuecomment-4104999\n\n\n\nYasuhiro Matsumoto\n. Thanks. I figured out the problem maybe. Perhaps, your locale uses\ncomma to display floating point value. Fixing vital is so easy with\nusing str2float('0'). But this is problem related vim also.  I'll\nwrite patches to fix both in later.\n\nOn 2/23/12, Obedi Ferreira\nreply@reply.github.com\nwrote:\n\nLANG => pt_BR.UTF-8\nLC_ALL is empty\nLC_CTYPE => pt_BR.UTF-8\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/142#issuecomment-4105959\n\n\n\nYasuhiro Matsumoto\n. @Valloric please let us known the way to reproduce.\n. Sorry for delay. I'll look into it later.\n. I tested following.\nadded let g:neocomplcache_enable_at_startup = 1 and let g:neocomplcache_enable_cursor_hold_i = 1 into my vimrc\nstarted vim and typed neocomplcache testing  on insert mode.\ntyped <esc>:reg<cr>\n\nI can see \". neocomplcache testing.\n. Bram knows the answer. Probably it's in his todo list. He often pick up from the todo list in his priority. If you warry about, try to post 'ping'. Then, the post may change the priority. :)\n. ",
    "starrynight": "for example, a-zA-Z 0-9 and @ _ () these characters, which can compose a valid python statement that needs autocomplete. What do yo think?\n. I think I've been misunderstood. What I'm trying to say is don't trigger the popup by invisible input (like moving cursor) in the buffer.\nYou above tips can fix my problem. I'm  just wondering if there is a better way to to this. \nI will close this issue in case it takes too much of your time.\nYou have already made a GREAT plugin. I think many people including me really appreciate this. THANK YOU!!\n. ",
    "lilydjwg": "Thanks!\n. > Yes, and neocomplcache(and other plugins) make cache files, but if you are using sudo, will make cache files in super user permission. It causes many problems.\nIt caused less problems before than now it does. In the past, I only occasionally got some error; now, I get the warning every time.\n. I updated to the latest git version and the problem disappeared. Thanks!\n. ",
    "tungd": "Thanks\n. ",
    "cheung-chifung": "\u3053\u308c\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u3044\u3051\u308b\u305d\u3046\u3067\u3059\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. ",
    "jordwalke": "Shougo what should the values of conceallevel and concealcursor be for this to work as expected?\n. I saw the example in the txt file but it didn't really seem to work smoothly. Nothing was hidden until I began typing, then when typing the dollar signs were still visible. When I started typing, the autocomplete menu popped up way to the right of where it was supposed to be and I couldn't see what I was typing.\nHere's my setup:\n\" NeoComplCache Plugin Configuration:\nlet g:neocomplcache_enable_at_startup = 1 \nlet g:neocomplcache_enable_smart_case = 1 \nlet g:neocomplcache_enable_camel_case_completion = 1\n\"inoremap   pumvisible() ? \"\" : \"\"\nlet g:neocomplcache_enable_auto_select = 1\nimap  neocomplcache#sources#snippets_complete#expandable() ? \"(neocomplcache_snippets_expand)\" : pumvisible() ? \"\" : \"\"\nlet g:neocomplcache_snippets_dir='~/.vim/snippets'\nset completeopt=longest,preview\nif has('conceal')\n  set conceallevel=2 concealcursor=i\nendif\nHere's an example snippet that doesn't work - though none of mine work.\nforin (...) {...} (Improved Native Forin-Loop)\nsnippet forin\n    for (var ${2:kAtTop} in ${1:obj}) {\n        if (!$1.hasOwnProperty($2)) {\n            continue;\n        }\n        ${3:body}\n    }\n. ",
    "zhaocai": "I guess let g:neocomplcache_enable_fuzzy_completion = 1 is only work for _ and camel case but -. \n. Thanks! it works now. I just have to use neocomplcache_snippets_force_expand. But - will still break the completion context, i.e., previous popup menu disappears and restarts to search for possible matches based on what is typed after -.  Anyway, thanks! This is not important.\nBy the way, is is possible to active the completion popupmenu in the command mode? for example, to complete the cabbrev ...\nOn Dec 13, 2011, at 5:40 PM, Shougo wrote:\n\nOK. I fixed it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/129#issuecomment-3132006\n. set iskeyword+=- solved the problem... Thanks.\n. Suppose I have a snippet defined as:\n\nsnippet     todoCommented\n`comment#start_comment()` [TODO]( `strftime('%a %d %b %Y %I:%M:%S %p %Z')` ) ${1:task} `comment#end_comment()`\nNeocomplcache snippet expansion would fail (expand to nothing) because this snippet contains comment#start_comment() and comment#end_comment which are autoload functions located in ~/.vim/autoload/comment.vim and never called before. After I manually call comment#start_comment anywhere, snippet expansion succeeds. \n```\nfunction! comment#start_comment()\n    return substitute(&commentstring, '^([^ ])\\s%s(.*)$', '\\1', '')\nendfunction\nfunction! comment#end_comment()\n    return substitute(&commentstring, '^.%s(.)$', '\\1', '')\nendfunction\n``\n. thanks! it works well now.\n. To keep relative path... I have multiple machines( mac and linux) syncing and sharing similar directories relative to home. If I expand the~, the path would be invalid in other machine.\n. check the clip.\n![~ completion](https://img.skitch.com/20111217-gnii5rg39gbrb1kmmqw12esd6j.png)\n. Thanks! I think maybe it is better to add a option for this. I guess many people would desire to have ~ expanded. \n.g:neocomplcache_plugin_disable` is {}\nAnd as I said. buffer_complete is working. But I have to manually execute :NeoComplCacheCachingBuffer for current buffer to make it work. Do I miss some autocmd I guess?\n. vim\n--- Auto-Commands ---\nneocomplcache  BufNewFile\n    *.snip    set filetype=snippet\n    *.snippets\n              set filetype=snippet\n    *         syn match   NeoComplCacheExpandSnippets '\\${\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!}\\|\\$<\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!>\\|\\$\\d\\+' conceal cchar=$\nneocomplcache  BufRead\n    *.snip    set filetype=snippet\n    *.snippets\n              set filetype=snippet\n    *         syn match   NeoComplCacheExpandSnippets '\\${\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!}\\|\\$<\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!>\\|\\$\\d\\+' conceal cchar=$\nneocomplcache  BufWritePost\n    *.snip    call s:caching_snippets(expand('<afile>:t:r'))\n    *.snippets\n              call s:caching_snippets(expand('<afile>:t:r'))\n    *         call s:check_buffer('', 0)\nneocomplcache  ColorScheme\n    *         syn match   NeoComplCacheExpandSnippets '\\${\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!}\\|\\$<\\d\\+\\%(:.\\{-}\\)\\?\\\\\\@<!>\\|\\$\\d\\+' conceal cchar=$\nneocomplcache  FileType\n    *         call s:caching()\n              call s:caching()\n    *         call neocomplcache#sources#vim_complete#helper#on_filetype()\nneocomplcache  InsertEnter\n    *         call s:check_source()\n              call neocomplcache#sources#member_complete#caching_current_line()\nneocomplcache  InsertLeave\n    *         call s:on_insert_leave()\n              call neocomplcache#sources#buffer_complete#caching_current_line()\n              call neocomplcache#sources#member_complete#caching_current_line()\nneocomplcache  Syntax\n    *         call s:caching()\nneocomplcache  VimLeavePre\n    *         call s:save_all_cache()\nneocomplcache  CursorHold\n    *         call s:check_deleted_buffer()\n              call s:caching_current_buffer(line('.')-10, line('.')+10)\nneocomplcache  CursorHoldI\n    *         call s:on_hold_i()\nneocomplcache  CursorMovedI\n    *         call s:on_moved_i()\n. I checked the code,\nvim\n  command! -nargs=? -complete=buffer NeoComplCacheCachingBuffer call s:caching_buffer(<q-args>)\nbut s:caching_buffer is not listed in the augroup in buffer_complete.vim. And it is not called anywhere else in buffer_complete.vim.\n``` vim\n  augroup neocomplcache\"{{{\n    \" Caching events\n    autocmd InsertEnter * call s:check_source()\n    autocmd CursorHold * call s:check_deleted_buffer()\n    autocmd InsertLeave *\n          \\ call neocomplcache#sources#buffer_complete#caching_current_line()\n    autocmd VimLeavePre * call s:save_all_cache()\n  augroup END\"}}}\n```\n. > Please tell me a specific example.\nopen a file, like a markdown file. buffer complete is not working. Then I execute :NeoComplCacheCachingBuffer. After that, buffer complete shows up in the popup menu.\n. It works now! But It does not work immediately. I have to insert a few times to trigger the caching. My bad, I was not patient.\n. you are right! (^^;;\nOn Jan 10, 2012, at 9:18 PM, Shougo wrote:\n\n\nI have to insert a few times to trigger the caching. My bad, I was not patient.\n\nBecause auto caching take many times, can you wait? I can't.\nSo, caching routine is asynchronously.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/139#issuecomment-3440998\n. Maybe just check the length of a:cur_keyword_str > 2 before testing conversion. \n. have you pushed updates to neocomplcache-snippets-complete?\n. I found the cause. I have to disable the following two options\n\n``` vim\nlet g:neocomplcache_enable_cursor_hold_i           = 1\nlet g:neocomplcache_enable_insert_char_pre         = 1\n```\n. not fixed for me...\n. it happens whenever I set any of the two options:\n``` vim\nlet g:neocomplcache_enable_cursor_hold_i           = 1\nlet g:neocomplcache_enable_insert_char_pre         = 1\n```\nI guess I can bypass these two options since they are not 'mandatory'.\n. Thanks!\n. Glad to know it is not just me having this issue.\nBut I am not sure how 'Deleted save cache behavior' helps this situation. The problem is about not loading but saving.\nAnyway, I tried the newest version. And the problem remains.\nFor example, I have a file named: test2.pandoc\nI double check the cache file exist: =+Users=+zhaocai=+Downloads=+Workspace=+test2.pandoc\nvim\n[{'word': 'Love', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Love'}, {'word': 'You', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'You'}, {'word': 'Zhao', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Zhao'}, {'word': 'Cai', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Cai'}, {'word': 'Fri', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Fri'}, {'word': 'Dec', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Dec'}, {'word': 'clipboardtitleblock', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'clipboardtitleblock'}, {'word': 'line', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'line'}, {'word': 'cool', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'cool'}, {'word': 'Bug', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Bug'}, {'word': 'Report', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Report'}, {'word': 'bugme', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'bugme'}, {'word': 'what', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'what'}, {'word': 'you', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'you'}, {'word': 'want', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'want'}, {'word': 'This', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'This'}, {'word': 'block', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'block'}, {'word': 'quote', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'quote'}, {'word': 'paragraph', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'paragraph'}, {'word': 'has', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'has'}, {'word': 'two', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'two'}, {'word': 'lines', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'lines'}, {'word': 'list', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'list'}, {'word': 'inside', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'inside'}, {'word': 'Second', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Second'}, {'word': 'item', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'item'}, {'word': 'mak', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'mak'}, {'word': 'https:', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'https:'}, {'word': 'img', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'img'}, {'word': 'skitch', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'skitch'}, {'word': 'com', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'com'}, {'word': 'x5wbr36ni4mbjpq6223hg52axc', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'x5wbr36ni4mbjpq6223hg52axc'}, {'word': 'png', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'png'}, {'word': 'love', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'love'}, {'word': 'will', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'will'}, {'word': 'help', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'help'}, {'word': 'this', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'this'}, {'word': 'your', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'your'}, {'word': 'future', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'future'}, {'word': 'let', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'let'}, {'word': 'uifont', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'uifont'}, {'word': 'Bitstream', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Bitstream'}, {'word': 'Vera', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Vera'}, {'word': 'Sans', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Sans'}, {'word': 'Mono:h18', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Mono:h18'}, {'word': 'Will', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Will'}, {'word': 'give', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'give'}, {'word': 'the', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'the'}, {'word': 'strength', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'strength'}, {'word': 'Goodenia', 'menu': '[B] test2.pandoc', 'kind': '', 'abbr': 'Goodenia'}]\n- \u2713 The buffer cache is loaded if I do :NeoComplCacheCachingBuffer and make no change to the file. \n- \u2613 But it is not loaded if I write the file, open another MacVim window, and open the file.\n. I guess the problem is related to cached_time and check whether to load the buffer cache file or not.\n. Thanks! It is working for me now!\n. > This issue may be fixed by g:neocomplcache_enable_cursor_hold_i or g:neocomplcache_enable_insert_char_pre.\nI have enabled both\n. I guess I can fix it from the other plugin. I ask this for vim-smartinput issue with neocomplcache\n. Sorry, I missed that option! It is working now after I set a larger size of g:neocomplcache_tags_caching_limit_file_size\nThanks!\n. Thanks. \n. not working :( \nTest case:\nvim\ng:neocomplcache_wildcard_characters = {'_': '-'}\nlove-you will-you-give\nlove_you will_love_you\nwhen I type love both love_you and love-you show up as [B] candidates. \nHowever, l_y -> [B] love_you   while l-y -> nothing.\n. I did update neocomplcache. can you share me your working example (filetype and content) for me to test.\n. my settings\n``` vim\nlet g:neocomplcache_enable_camel_case_completion = 1\nlet g:neocomplcache_enable_underbar_completion   = 1\nif !exists('g:neocomplcache_wildcard_characters')\n    let g:neocomplcache_wildcard_characters      = {}\nendif\nlet g:neocomplcache_wildcard_characters._        = '-'\nlet g:neocomplcache_enable_fuzzy_completion      = 0\n```\n. I tried to trace function s:get_cur_text()\nafter i type l-y\nI get, \nwildcard: '-'\ns:cur_text: 'l*y'\nis this correct?\n. any hints to debug?\n. can you tell which function determine the final output? I can try to trace from there. Thanks!\n. # I found the problem:\n``` vim\nlet g:neocomplcache_enable_insert_char_pre = 1\n```\nwhen I use InsertCharPre, after I type l-y, in neocomplcache#keyword_filter() I get a:cur_keyword_str is 'l' but l*y. After I use g:neocomplcache_enable_cursor_hold_i, it is working\n. Great! Nicely done!\n. you forgot to remove (not a big problem though.)\nvim\nlet b:neocomplcache.last_line = line('.')\n. I did not notice the neosnippet branch. seems a lot of change. are you seriously want to improve neocomplcache-snippets-complete now? it does lack some of the features (live update and no ugly placeholder for example) compared with ultisnip or xptemplate.\n. > It is in my todo list.\nThat is great. I use most of your plugins and all of them are the best in their class except neosnippet. I almost switch to ultisnip if it was not too much trouble. \n. it is my problem. somehow autocrlf = true is set in .gitconfig.\n. looks promising!\n. have not tried YouCompleteMe. It looks nice based on the stars and readme. Is there anyway to integrate neocomplcache with YouCompleteMe at this time? How do you think of the differences? Thanks. \n. Tried YouCompleteMe. There are a few things I like:\n- the speed of completion\n- real fuzzy match\n- integration with syntastic \n- good support for c-family completion \nBut compared with neocomplcache, I consider it as \"incomplete\" - lack of many features like snippets_complete, tags_complete, etc.\nI just recompiled MacVim with if-lua support, will this help the speed of neocomplcache ver8? Thanks.\n. Thanks for the update. I have not check the FAQ for a while. Now I got jedi.vim and clang_complete working. great\n. checked neocomplcache#util#has_lua() \n\n1\n\nbut s:lua_filter is never called.\nis it disabled or do i need to set some option to make it work?\n. thanks.\n. ### about the choice of if_lua\nIt seems that if_lua is not widely compiled to vim. Based on neocomplcache#util#has_lua(), it looks like it also requires very new vim built. \nso my question is, why if_lua? Many people may not be able to use it because they do not have the root privilege to recompile vim. \n. thanks for the update! By the way, does the current s:lua_filter function have any fuzziness?\n. what is the progress now? \n. so fuzzy match will replace underbar completion, camel case completion, etc... I use these features a lot. But if fuzzy match is done right. It should be better. \n. I had it compiled. For mac user, (macvim), you have to patch the vim update to date by yourself. the official macvim only updated to patch 806. When you release, you may add some compile instructions.\n. By the way, neocomplcache#unlock_source is for current buffer only. Is there a standard way to enable and disable source globally?\n. I spent some time with the neosnippet source code. It has a few keys I am not sure about: real_name, neocomplcache__refresh , and rank. \n- Does neocomplcache honor the rank for individal candidate?\n- is neocomplcache__refresh a generic key which can be used in other sources?\n. > OK. I will write candidates specification in ver.8 branch.\nThanks.\nWhat will happen if neocomplcache__refresh is 1? Is it going to call a hook function?\n. thanks\n. Suppose you are writing an article. You may not leave insert mode but you do pause to think sometime. So CursorHoldI is the event for recaching what has been written.\n. It is just autocmd event. When should neocomplcache work on recache.\n``` vim\nCursorHold      When the user doesn't press a key for the time\n                specified with 'updatetime'.  Not re-triggered\n                until the user has pressed a key (i.e. doesn't\n                fire every 'updatetime' ms if you leave Vim to\n                make some coffee. :)  See |CursorHold-example|\n                for previewing tags.\n                This event is only triggered in Normal mode.\n                It is not triggered when waiting for a command\n                argument to be typed, or a movement after an\n                operator.\n                While recording the CursorHold event is not\n                triggered. |q|\n                Note: Interactive commands cannot be used for\n                this event.  There is no hit-enter prompt,\n                the screen is updated directly (when needed).\n                Note: In the future there will probably be\n                another option to set the time.\n                Hint: to force an update of the status lines\n                use: >\n                    :let &ro = &ro\n<               {only on Amiga, Unix, Win32, MSDOS and all GUI\n                versions}\n                            CursorHoldI\nCursorHoldI         Just like CursorHold, but in Insert mode.\n``\n. It looks to me that the ranks of the sources are not setting up based on some rules. For example, thevim_completeis 300.nesnippetis 8 (if I remember it correctly),buffer_completeis 5. For me, I usually bump up the rank ofbuffer_complete` to 100. \nI think maybe there is supposed to be some guideline for the ranks. For example, \n- < 0 : discardable, ( like neco-look, )\n- 0 : base priority, \n- 1 - 10 : if taken too long, ignore.\n- 10 - 20 : normal priority, \n- 20+ : first priority, cache first\n. I know 100 is too high ( it is just for me personal ) . But I think it should be higher than syntax_complete \n. thanks.\n. :+1: \n. neocomplcache is quite famous. Is it really necessary to change the name? \nIf you change the name, are you going to rename all the option variables, function names, etc. ? And how about all the extensions people write for neocomplcache?\n. how is the progress :question: \n. tried the new fuzzy_matcher in ver8.1. Very nice and the speed issue seems to be solved by if_lua.  How long do you plan to release a stable version?\nthanks :) \n- got A small bug...\nvim\nfunction neocomplcache#handler#_do_auto_complete..neocomplcache#complete#_get_results..neocomplcache#complete#_set_results_words..336..<SNR>189_check_source..neocomplcache#cache#check_cache_noindex, line 11\nVim(for):E121: Undefined variable: a:keyword_list\nSource name is buffer_complete\nError occured in source's gather_candidates()!\n. @Shougo I have tried to play with YouCompleteMe for a while recently. One thing I would like to share is ThreadedCompleter - in neocomplcache's term, threaded source. It really has significant impact on speed.\nAs stated in the YouCompleteMe code, \n\nIf you're confident your completer doesn't need a background task (think\n  again, you probably do) because you can \"certainly\" furnish a response in\n  under 10ms, then you can perform your backend processing in a synchronous\n  fashion.\n\nI tested this speed impact by implementing a simple spellsuggest completer in YouCompleteMe. Without using threaded completer, I can certainly feel a lag for each keystroke I type. After I move the code to use ThreadedCompleter, the typing become smooth without delay.\nAnd in YouCompleteMe, the auto event is CursorMovedI. In current neocomplcache, I have to use CursorHoldI event (but it is not as responsive as CursorMovedI). Otherwise, the lag of each keystroke is painful to waiting.\nIn short, I would ask about your plan for ver 8.1 in neocomplcache to solve the speed issue?\nWill it support similar threaded fashion for sources?\n. > PS: Your SpellcheckCompleter implementation is no input lag but too danger...\nI end up using a separate pyenchant lib instead spellsuggest() function provided by vim.\nI agree with you on that thread is dangerous to use. And vim sucks for still not thread-safe and provide functionalities for async operations. However, The future of CPU will be more cores but higher speed for single core. To provide completion from many sources, it is natural to use the power from multi-cores; and it is impossible to provide no-type-lagging performance without harness multithreads. \nI hope you may revise the source interface with thread support. Does lua have good thread support? I have no knowledge of the lua language.\n. ",
    "ronin13": "\nOn Fri, Dec 23, 2011 at 11:19:48PM -0800, Shougo reply@reply.github.com wrote:\n\nFor a particular filetype -- in this case ft=mail I want to use a custom completion function (based on lbdbq) .\n\nI recommend you to set omnifunc.\nautocmd VimEnter FileType mail setlocal omnifunc=LBDBCompleteFn\nAnd, set g:neocomplcache_omni_patterns['mail'].\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shougo/neocomplcache/issues/133#issuecomment-3266870\n\n\n\n\nHi,\nI have added the following to my vimrc:\nif !exists('g:neocomplcache_omni_patterns')\nlet g:neocomplcache_omni_patterns = {}\nendif\nlet g:neocomplcache_omni_patterns['mail'] = '^\\s*\\w+'\nautocmd FileType mail source ~/.vim/mail.vim | autocmd VimEnter * setlocal omnifunc=LBDBCompleteFn \nBtw,\nautocmd VimEnter FileType mail setlocal omnifunc=LBDBCompleteFn \n-- doesn't work, vim silent ignores this, ie. you cannot combine \nfiletype and VimEnter. \nSo coming back to neocomplcache, it doesn't work, omnifunc gets \nset correctly, but  I see \ncompletefunc=neocomplcache#manual_complete being set, anything \nwrong with my omni_pattern for mail ? Basically it is for \ncompletion of email address in Cc,Bcc,To fields.\nBut then I manually added ino   and that seems to \nbe doing the job.\n\nRaghavendra Prabhu\nGPG Id : 0xD72BE977\nFingerprint: B93F EBCB 8E05 7039 CD3C A4B8 A616 DCA1 D72B E977\nwww: wnohang.net\n. ",
    "markburns": "Cool, yeah it makes more sense now\n. ",
    "mutewinter": "Not sure how to set updatetime manually. Here's my neocomplcache config:\nviml\nlet g:neocomplcache_enable_at_startup=1\nlet g:neocomplcache_enable_auto_select=1\nlet g:neocomplcache_enable_cursor_hold_i=1\nlet g:neocomplcache_cursor_hold_i_time=300\nlet g:neocomplcache_auto_completion_start_length=1\nDo I need to add the autocmd InsertEnter * call s:on_insert_enter() to my .vimrc and upate datetime myself to make this work again?\n. Here's my neocomplcache setup in my vimrc that makes cursor_hold work:\n``` VimL\nlet g:neocomplcache_enable_cursor_hold_i=1\nlet g:neocomplcache_cursor_hold_i_time=300\n\" Required to make neocomplcache_cursor_hold_i_time work\nautocmd InsertEnter * call s:on_insert_enter()\nfunction! s:on_insert_enter()\n  if &updatetime > g:neocomplcache_cursor_hold_i_time\n    let s:update_time_save = &updatetime\n    let &updatetime = g:neocomplcache_cursor_hold_i_time\n  endif\nendfunction\n```\n. Ah, I updated my vimrc. Does this look good?\n``` VimL\nautocmd InsertEnter * call s:on_insert_enter()\nfunction! s:on_insert_enter()\n  if &updatetime > g:neocomplcache_cursor_hold_i_time\n    let s:update_time_save = &updatetime\n    let &updatetime = g:neocomplcache_cursor_hold_i_time\n  endif\nendfunction\nautocmd InsertLeave * call s:on_insert_leave()\nfunction! s:on_insert_leave()\n  if &updatetime < s:update_time_save\n    let &updatetime = s:update_time_save\n  endif\nendfunction\n```\n. Thanks for your help @Shougo, keep up the awesome work.\n. ",
    "helmuthdu": "i get this error with lion:\nError detected while processing /Users/helmuth/github/vim/bundle/neocomplcache/autoload/vital/_f9b384/prelude.vim:\nline   28:\nE806: using Float as a String\nPress ENTER or type command to continue\nError detected while processing /Users/helmuth/github/vim/bundle/neocomplcache/autoload/vital/_f9b384/prelude.vim:\nline   28:\nE116: Invalid arguments for function type(3.14159)]\nPress ENTER or type command to continue\nError detected while processing /Users/helmuth/github/vim/bundle/neocomplcache/autoload/vital/_f9b384/prelude.vim:\nline   28:\nE15: Invalid expression: [   type(3),   type(\"\"),   type(function('tr')),   type([]),type({}),   type(3.14159)]\nPress ENTER or type command to continue\nError detected while processing function neocomplcache#enable:\nline  421:\nE171: Missing :endif\n. ",
    "obxhdx": "I'm getting this same error. I checked my ~/.neocon folder and it has 777 permission.\nI've just updated neocomplcache and compiled Vim from source (version 7.3.446).\nI also tried with a version from Ubuntu official repositories (7.3.154).\nIt seems to work fine on terminal, but on GVim, whenever I start to type on insert mode, it pops out so many errors that it covers the whole visible screen.\nIt also works fine at my home computer, which has version 7.3.434-1 of Vim.\n. It doesn't looks like a permission issue indeed.\nAlthough it doesn't make much sense, I also rebooted here... no sucess.\nI got no idea of what could it be.\n. Nope. As I mentioned before, I've got GVim compiled from latest source today. These are the parameters I used:\n$ ./configure --with-features=huge --enable-gui=gnome2 \\\n            --enable-perlinterp \\\n            --enable-pythoninterp \\\n            --enable-rubyinterp\nFor now, I have just disabled neocomplcache on my office computer. And I believe that's something particular to my environment, since it works smoothly on my home computer. Btw, I (also) use Ubuntu (Oneiric) at the office, and Arch Linux at home.\n. I sourced the prelude.vim file as you asked and got the very same error. I cloned neocomplcache from scratch and the error still occurs.\nAnd :echo has(\"float\") results 1.\n. :echo str2float(\"0.01\") gives 0,0.\nAbout LC_NUMERIC, should I echo it as well? :echo $LC_NUMERIC doesn't give anything.\n. By chance, I just gave a try on Shougo's VimFiler bundle and got the same Float as a String error.\n. And now, here is something. I edited ~/.vim/bundle/vimfiler/autoload/vital/_c7f20e/prelude.vim and changed the line 27 from \\   type(3.14159) to \\   type('3.14159') and it worked!\nSame thing for neocomplcache, line 27 from \\   has('float') ? type(0.0) : -1 to \\   has('float') ? type('0.0') : -1.\nAlthough it works, I didn't understand well why. I dunno if that's the right thing to do either.\n. LANG => pt_BR.UTF-8\nLC_ALL is empty\nLC_CTYPE => pt_BR.UTF-8\n. Thank you very much for the support guys.\n. It's working! Thank you.\n. ",
    "eozw": "\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059. \u7121\u4e8b\u306b\u601d\u3063\u305f\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3057\u305f.\nTeX \u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u306f, \u4e0a\u306e\u30ea\u30f3\u30af\u306e\u8a2d\u5b9a\u306e tex.snip \u3092 lhaskell.snip \u306b\u305d\u306e\u307e\u307e\u30b3\u30d4\u30fc\u3057\u307e\u3057\u305f.\nHaskell \u306e\u30b3\u30fc\u30c9\u90e8\u5206\u306b\u3064\u3044\u3066\u306f, \u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3044\u305f\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u305f.\n[_vimrc]\nif !exists('g:neocomplcache_filetype_include_lists')\nlet g:neocomplcache_filetype_include_lists= {}\nendif\nlet g:neocomplcache_filetype_include_lists.lhaskell = [{'filetype' : 'haskell', 'start' : '\\begin{code}', 'end' : '\\end{code}'}]\n. ",
    "mityakrylov": "\nI don't recommend you move to arrow keys in buffer.\n\nSorry, I did not understand. Why is it bad? What should I use instead of arrows in insert mode to move in file?\n\nYou should set g:neocomplcache_enable_cursor_hold_i is 1\n\nYes, I have found this option, but it only prevents menu from showing immediately and does not help with problem\n\nwhen I move, for example, down and menu suddenly popups, next 'down' arrow pressing works for menu\n. > Because In Vim, To move cursor in normal mode. Moving in insert mode like other editor is evil.\n\nWell, maybe, but it's so oldschool :) In my opinion, moving in insert mode is convenient.\n\nBecause, you must prevent popup menu immediately when cursor moved.\nIn normal setting, neocomplcache popup when cursor moved immediately.\nIf popup menu is showed, cursor keys behavior is changed(Not move in buffer).\n\nYeah, I understand that. I just tried to find convenient way to work with autocompletion. Because in other IDEs (like Visual Studio for example) autocompletion menu popups only after typing, not when moving using arrows. Of course, these IDEs are not Vim and do not have different modes (like normal and insert), but still. Perhaps, it's a matter of habit.\n\nThen your demand is impossible. Please give it up.\n\nOk, thank you for explanation!\n. > Yes. But in Vim, to implement it is too difficult(and too complex). So, I don't implement it.\nOk, thanks for your help. Then the question is closed.\n. ",
    "gertcuykens": "my preferred workaround\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <Left> neocomplcache#close_popup() . \"\\<Left>\"\ninoremap <expr> <Right> neocomplcache#close_popup() . \"\\<Right>\"\ninoremap <expr> <Up> neocomplcache#close_popup() . \"\\<Up>\"\ninoremap <expr> <Down> neocomplcache#close_popup() . \"\\<Down>\"\ninoremap <expr> <Cr> neocomplcache#close_popup() . \"\\<Cr>\"\ninoremap <expr> <Bs> neocomplcache#cancel_popup() . \"\\<Bs>\"\n. ",
    "hail2u": ":+1:\n. ",
    "matthjes": "Sorry, forgot to add this. Currently there isn't much:\nlet g:neocomplcache_enable_at_startup = 1\nlet g:neocomplcache_disable_auto_complete = 1\ninoremap <expr><C-l> neocomplcache#complete_common_string()\ninoremap <expr><TAB> pumvisible() ? \"\\<C-n>\" : <SID>check_back_space() ? \"\\<TAB>\" : \"\\<C-x>\\<C-u>\"\n. Hi, \nThanks for the quick reply, but it's still the same. An example:\nI type \"obj.Setti\" and hit tab. Then the completion window shows up, setting the input to \"obj.Settings\". But I'd like to type on to narrow down the search, e.g. \"obj.Settings.db.\" but as soon as I start typing the window closes and I have to open it again by pressing tab.\nI've downloaded your update and installed it. Do I have to change some settings?\n. ",
    "chadhs": "not sure if this is 100% related but being able to keep hitting tab to cycle through choices in the popup would be VERY handy.\nalmost feels like if neocomplcache and supertab had a baby it would be the builtin completion behavior of Sublime Text 2.\n. would it be possible to set a keybind to allow tab to cycle through the options like supertab does?  tried messing with the examples in the readme etc.  if not no worries; just clarifying my question.  thank.\n. supertab does not auto pop anything up like neocomplcache does; you have to hit tab to start autocompletion on any word, etc.  if there are many choices, continuing to press tab with cycle forward through the choices, shift tab will cycle back in the opposite direction.  did that make sense?\n. ah... so essentially i want to try and map  and  to the control p control n type hotkeys to achieve that behavior.  cool i'll mess around with that and hopefully be able to get that working; thanks.\n. ",
    "kenshin54": "Thanks, It works.\n. ",
    "brookhong": "imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\nI used key mapping from example.\n. I input class Tab , got \n\nclass ClassName${3:extends}}\n{\n    argument\n    function __construct(argument)\n    {\n        # code...\n    }\n}\n\nthen Tab, got\n\nclass ClassName${3:extends}}\n{\n    argument\n    function ${4:__construct}(${5:argument})\n    {\n        ${0:# code...}\n    }\n}\n\ninput classname A, then Tab, got\n\nclass A extends}\n{\n    argument\n    function ${4:__construct}(${5:argument})\n    {\n        ${0:# code...}\n    }\n}\n\nwith extends hightlighted, then how to get extends auto input?\n. +1\n. ",
    "kentlius": "\u3054\u3081\u3093\u306a\u3055\u3001\u3053\u308c\u3082\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u304c\u539f\u56e0\u307f\u305f\u3044\u3067\u3059\u3002\u4f59\u8a08\u306a\u9801\u3092\u5897\u3084\u3057\u3066\u3059\u3044\u307e\u305b\u3093\u2026\n. ",
    "h14i": "\u4fee\u6b63\u78ba\u8a8d\u3057\u307e\u3057\u305f\uff0e\n\u8fc5\u901f\u306a\u5bfe\u5fdc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\n. \u76f4\u3063\u305f\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\uff0c\u307e\u305f\u767a\u751f\u3057\u307e\u3057\u305f\uff0e\n\u305f\u3060\uff0c\u3053\u306e\u73fe\u8c61\u306e\u524d\u5f8c\u3067 wildignore \u306e\u8a2d\u5b9a\u3092\u5f04\u3063\u3066\u3044\u305f\u308a\u3057\u305f\u306e\u3067\uff0c\u305d\u308c\u304c\u8a98\u767a\u3057\u305f\u306e\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\uff0e\n\u518d\u73fe\u3082\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u4e00\u5fdc\u5831\u544a\u3060\u3051\uff0e\n. \u5ea6\u3005\u3059\u3044\u307e\u305b\u3093\uff0e\n\u50d5\u306e\u74b0\u5883\u306e\u305b\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n1. \u8d77\u52d5\u76f4\u5f8c\u306e g:neocomplcache_temporary_dir \u306e\u5024\u306f\u6b63\u3057\u304f\u5c55\u958b\u3055\u308c\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\n    * \u50d5\u306e\u74b0\u5883\u3067\u306f echo g:neocomplcache_temporary_dir \u306f /home/tobira17/.vim/neocon_temp\n2. .vimrc \u3092\u30ea\u30ed\u30fc\u30c9\u3059\u308b\u3068( source $MYVIMRC \u3059\u308b\u3068) \u30c1\u30eb\u30c0\u304c\u30c1\u30eb\u30c0\u306e\u307e\u307e\u683c\u7d0d\u3055\u308c\u308b\n    * echo g:neocomplcache_temporary_dir \u306f ~/.vim/neocon_temp\n3. \u3053\u306e\u72b6\u614b\u306b\u306a\u308b\u3068\u4e00\u6642\u30d5\u30a1\u30a4\u30eb(\u3068\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\u304c\u7de8\u96c6\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u968e\u5c64\u306b\u4f5c\u3089\u308c\u308b\n\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u4f8b\u3092\u898b\u3066\u3044\u3066\u6c17\u4ed8\u3044\u305f\u3093\u3067\u3059\u304c\uff0c let g:neocomplcache_temporary_dir = $HOME . '/.vim/neocon_temp' \u3068\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\n\u3053\u3061\u3089\u306e\u66f8\u304d\u65b9\u306a\u3089 .vimrc \u3092\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u3082\u554f\u984c\u306a\u3044\u611f\u3058\u306a\u3093\u3067\u3059\u3088\u306d\uff0e\n. \u9045\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\u304a\u8fd4\u4e8b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\n\u306a\u308b\u307b\u3069\uff0c\u50d5\u306e\u8aa4\u89e3\u3060\u3063\u305f\u306e\u3067\u3059\u306d\uff0e\u4e00\u4eba\u524d\u306e Vimmer \u306b\u306a\u308c\u308b\u3088\u3046\u7cbe\u9032\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3054\u6559\u793a\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff0e\n. ",
    "sunadorineko3": "\u8fd4\u4fe1\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u3057\u304b\u30573\u67086\u65e5\u6642\u70b9\u3067\u306e\u6700\u65b0\u7248\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3057\u305f\u304c\u7279\u306b\u5909\u5316\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n1. let g:neocomplcache_enable_at_startup = 0\u3067gVim\u3092\u8d77\u52d5\u3059\u308b\u3068u\u9023\u6253\u3067\u30dd\u30f3\u30dd\u30f3\u9cf4\u308a\u307e\u3059\u3002\n2. Vim\u6a19\u6e96\u306e\u88dc\u5b8c\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3082\u97f3\u306f\u6d88\u3048\u307e\u305b\u3093\u3002\n3. NeoComplCacheEnable\u3059\u308b\u3068\u97f3\u304c\u9cf4\u3089\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n4. NeoComplCacheDisable\u3057\u3066\u3082\u97f3\u306f\u9cf4\u3089\u306a\u3044\u307e\u307e\u3067\u3059\u3002\n5. \u30b3\u30de\u30f3\u30c9\u30e2\u30fc\u30c9\u3067vb\u3001t_vb\u3001eb\u306a\u3069\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3044\u3058\u3063\u3066\u3082\u97f3\u306f\u51fa\u307e\u305b\u3093\u3002\n6. gVim\u3092\u518d\u8d77\u52d5\u3059\u308b\u3068\u97f3\u304c\u9cf4\u308a\u307e\u3059\uff08neocomplcache\u306f\u307e\u3060\u958b\u59cb\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\uff09\u3002\n\u3053\u3093\u306a\u72b6\u6cc1\u3067\u3059\u3002\n\u512a\u5148\u5ea6\u306f\u4f4e\u304f\u3066\u3082\u69cb\u308f\u306a\u3044\u306e\u3067\u3001\u5f15\u304d\u7d9a\u304d\u8abf\u67fb\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n. \u52d5\u4f5c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u8fc5\u901f\u306a\u5bfe\u5fdc\u306b\u611f\u8b1d\u3057\u307e\u3059\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. ",
    "teranex": "I'm using indeed symbolic links, but i'm using them in exact the same way on Xubuntu (works) and on Maemo (doesn't work):\n- .vimrc -> ~/dotvim/vimrc\n- .vim -> ~/dotvim\n  Since it works on Xubuntu with vim 7.3 I don't really think that is the problem.\n  In fact, I took another look at the log I created and I think i found the real problem. Vital is calling the globpath()-function with 3 arguments (in autoload/vital/_47e849.vim, line 62), but the 3th argument was only added in Vim 7.3. When I open :help globpath() on Vim 7.3 it shows me:\nglobpath({path}, {expr} [, {flag}])         globpath()\nHowever when I open de same help page in Vim 7.2 it shows me:\nglobpath({path}, {expr})            *globpath()*\nSo in fact I think this is an incompatibility in the Vital library.\nI also found a similar issue for vim-powerline: https://github.com/Lokaltog/vim-powerline/issues/50\n. To be more correct, the extra argument to globpath() was added in Patch 7.2.051 (http://vimdoc.sourceforge.net/htmldoc/version7.html). As far as I can see Vim on Maemo doesn't included any patches..\n. Tested and works! Thx!\n. ",
    "hlissner": "facepalm That fixed the issue. Sorry for wasting your time >.<\n. ",
    "cj": "Strange, it was woking just fine until I updated..... I'll try reverting to an older version....\n. @thinca Thank you.... this patch fixed it https://github.com/ujihisa/vital.vim/commit/35a05a23a7537e2df4922bdbb69c4ccf65459160\n. ",
    "jfelchner": "@Shougo I've spent over 8 hours trying to figure out why in the hell my keywords were not auto-completing.  I don't see why neocomplcache does not have an option to auto cache a buffer when it's opened.\nIt makes absolutely no sense to have to call :NeoComplCacheBuffer every time I want to update the buffer's cache.\nSorry, this is a great plugin, but I am also very frustrated that this isn't at least emphasized in the documentation.  I feel that the majority of people would be running into this very same problem.  Case in point is issue #176 and #139 which is referring to the same problem of not understanding how the buffer completion works.\nAgain, I'm very glad that you spend a lot of your time working on this.  Now that I know what I need to do, I can work around the limitation but I definitely feel it needs to be better documented/implemented.  My suggestion would be an option to synchronously update the cache on buffer load which can default to disabled.\n. @Shougo thank you!  I see the changes that you made, which should have worked, but it's still not working properly.  I think I may have tracked down the problem but I feel it is a separate issue so I have opened a new one: #184\n. I'm going to give it a couple days before I close the issue but it appears to be working.  Thank you very much for getting this fixed so quickly!\n. ",
    "wedgwood": "Hi Shougo,\nThe bug seems fixed, but there are something wrong in doc files as below.\nError detected while processing function pathogen#helptags:\nline    4:\nE154: Duplicate tag \"g:neocomplcache_cursor_hold_i_time\" in file /home/yuan/.vim/bundle/neocomplcache/doc/neocomplcache.txt\nPress ENTER or type command to continue\n. I have the same problem.\n. ",
    "heavenshell": "@wedgwood \nHi, I just sent pull request to @Shougo and it would be fix this problem.\nhttps://github.com/Shougo/neocomplcache/pull/173\n(Pull request message was written in Japanense)\n. Scientific Linux release 6.1 \u3067\u3001 vim.org \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u30d3\u30eb\u30c9\u3057\u305f Vim7.3 \u3067\u3082\u518d\u73fe\u3057\u307e\u3057\u305f\u3002\n. https://bitbucket.org/ns9tks/vim-fuzzyfinder\n\u3092 hg clone \u3057\u305f\u3082\u306e\u3067\u3059\u3002\n. neocomplcache \u6700\u65b0\u7248\u3092 pull \u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01\n. \u53d6\u308a\u8fbc\u3093\u3067\u9802\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01\n\u3059\u307f\u307e\u305b\u3093\u3001ChangeLog \u306b\u5909\u66f4\u5185\u5bb9\u3092\u8a18\u8f09\u3059\u308b\u306e\u3092\u5931\u5ff5\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u5225\u9014 Pull Request \u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u304b\uff1f\n. \u627f\u77e5\u3057\u307e\u3057\u305f\u3002\n\u304a\u624b\u6570\u3092\u304a\u304b\u3051\u3057\u307e\u3057\u305f\u3002\u6b21\u56de\u304b\u3089\u6c17\u3092\u3064\u3051\u307e\u3059\u2026\u3002\n. ",
    "sp3ctum": "I have a temporary workaround, and it is to 'git revert' this commit:\n```\ncommit 43750062ba92f6447c28baa2ee87ea8ec06ecf53\nAuthor: Shougo Matsushita Shougo.Matsu@gmail.com\nDate:   Wed Feb 8 23:59:21 2012 +0900\n- Improved fuzzy completion behavior.\n\nautoload/neocomplcache.vim |   13 +++++++++----\n doc/neocomplcache.txt      |    3 +++\n 2 files changed, 12 insertions(+), 4 deletions(-)\n```\nAfter reverting this, I get the old, reliable fuzzy completion behaviour.\n. After reverting, the bug can no longer be reproduced with the steps in the original post.\n. I see.\nI haven't hit any performance issues with my settings, but if you see\nthis a good feature, how about adding a setting for the minimum amount\nof characters?\nThe amount of characters is not the only issue, since the help file\ndocumentation states the exact same example I used in the original\npost. I don't know what the underlying issue is at the moment.\nAll I know is that by reverting the commit, the example in the help\nfile can be reproduced.\nMaybe the change introduced a side effect of some kind. I might try to\ninvestigate with my own changes and see if I can find out a better\nway.\n. Using let g:neocomplcache_fuzzy_completion_start_length=1 I am able\nto use the old functionality and the example in the help file can be\ncarried out as well.\nI guess my keyword cache was not large enough to hit any performance\nissues.\nThanks a lot!\n. I copied this bit of code, which I found in another issue, but it didn't help.\nNo noticeable improvement so far.\nNeoComplCache \u3067 InsertMode \u306b\u5165\u3063\u305f\u6642\u306b\u8f9e\u66f8\u3068\u30d0\u30c3\u30d5\u30a1\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b - basyura\u2019s blog\nhttp://d.hatena.ne.jp/basyura/20120318/p1\n. Thanks for getting back to me.\nI tested with the newest version, but am still having issues.\nHere's a test case you can try out in a Unix-like shell (I use bash).\nThe case is to create a new file and type some contents to it, and\nthen create another file. I expect the latter file to have access to\nthe former file's (key)words.\ncd /tmp/\nvim a.txt\nIn vim, write the following lines in insert mode:\nfileaAlpha\nfileaBeta\nfileaGamma\nfileaDelta\nfileaEpsilon\nThen do:\n:saveas a.txt\n(wait time at this point seems to not make any difference.)\n:vnew b.txt\nTyping 'filea' in buffer for file b.txt will complete to fileaDelta and\nfileaEpsilon only. Expected it to complete to all candidates.\n. Here's another case you can try out:\nCreate the file a.txt like in the previous example. Save and quit.\nStart Vim, editing a new file called b.txt.\nDo:\n:edit a.txt\n(go back to buffer b.txt)\nAttempt to complete words in a.txt.\nExpected result: words are completed.\nActual resut: they are not.\nThis is the workaround I mentioned in the original post:\n:bufdo NeoComplCacheCachingBuffer\nAfter this command the words in a.txt are completed.\nWith asynchronous caching, I expected neocomplcache not to require me\nto call :bufdo to manually cache each buffer.\n. Side note:\nVim's built-in keyword completion seems to find the correct candidates.\n. ",
    "laishulu": "the fix works, thanks!\n. ",
    "toupeira": "But why is it disabled, i.e. what are the security implications?\nI think it's better to leave it up to the user if he wants to use sudo directly or a plugin like sudo.vim, will you accept a pull request that adds an option to make this behaviour optional?\n. AFAIK most problems caused by using sudo in this way are due to the fact that by default, sudo doesn't change $HOME to the other user's home, but this can easily be changed by having always_set_home in sudoers.\nI just tested this by uncommenting the relevant lines in plugin/neocomplcache.vim and everything seems to work fine, the .neocon directory is correctly created inside /root (due to me having always_set_home enabled).\nI'd like to add an option to neocomplcache to disable the sudo check, with a clear warning in the documentation, and without any change to the current default behaviour. Would you still reject such a pull request? ;-)\n. > But neocomplcache cannot check it.\nYou could check it by comparing the UID of the cache directory's parent folder to the current user's ID.\n\nI must change other plugins behavior(unite.vim, vimshell, vimfiler), but I have no much time. Would you send all plugins pull requests?\n\nHmm I see :-) I think I'll first make a pull request for neocomplcache, improve it until you're happy with everything (coding style etc.), and then I'll make pull requests for your other plugins in the same style (assuming they're all organised similarly). Is this alright with you?\n. @Shougo awesome, thanks! To make it a bit more robust I would remove the explicit check for root, and just compare $HOME to the sudo user's home directory, i.e.:\n$SUDO_USER != '' && $USER !=# $SUDO_USER && $HOME !=# expand('~'.$SUDO_USER)\nSo with root, expand('~root') would return /root, or e.g. /var/root on OS X.\n. Whoops actually it's supposed to be expand('~'.$USER) instead of expand('~'.$SUDO_USER) (i.e. the effective user, not the user who invoked sudo), sorry about that!\n. Thanks, everything seems to work as expected now and I don't get a warning any more.\n. Ok I see... I think my issue has more to do with g:neocomplcache_enable_auto_select, it seems buffer keywords aren't always considered correctly. For example if I enter a few words in a file, and then again enter the first few letters of one of these words, the completion popup doesn't contain any of these buffer keywords, but does contain e.g. snippets and syntax keywords with beginning with the same letters.\nSometimes buffer keywords are indeed included, but I haven't yet found out under what circumstances exactly, and using Vim's Ctrl+N/Ctrl+P always works correctly.\nHere's the relevant configuration of my .vimrc if that helps:\n``` vim\n  let g:neocomplcache_enable_at_startup = 1\n  let g:neocomplcache_enable_auto_select = 1\n  let g:neocomplcache_enable_smart_case = 1\n  let g:neocomplcache_enable_camel_case_completion = 1\n  let g:neocomplcache_enable_underbar_completion = 1\nlet g:neocomplcache_source_disable = {\n    \\ 'syntax_complete': 1,\n  \\ }\nlet g:neocomplcache_auto_completion_start_length = 2\nif !exists('g:neocomplcache_omni_patterns')\n    let g:neocomplcache_omni_patterns = {}\n  endif\nlet g:neocomplcache_omni_patterns.ruby = '[^. \\t].\\w\\|\\h\\w::'\n  let g:neocomplcache_omni_patterns.php = '[^. \\t]->\\h\\w\\|\\h\\w::'\n  let g:neocomplcache_omni_patterns.c = '\\%(.\\|->)\\h\\w'\n  let g:neocomplcache_omni_patterns.cpp = '\\h\\w\\%(.\\|->)\\h\\w\\|\\h\\w*::'\n\" Recommended key-mappings.\n  if index(g:pathogen_disabled, 'neocomplcache') == -1\n    \" : close popup and save indent.\n    inoremap  neocomplcache#close_popup() . \"\\\"\n    \" , : close popup and delete backword char.\n    inoremap  neocomplcache#smart_close_popup().\"\\\"\n    inoremap  neocomplcache#smart_close_popup().\"\\\"\n    inoremap  neocomplcache#close_popup()\n    inoremap  neocomplcache#cancel_popup()\n  endif\n```\n. Thanks, let me know if there's anything I can do to help you :)\n. Thanks! It does work more reliably now, but still doesn't seem to cover all keywords used by Vim's keyword completion. For example, in a Ruby file it only seems to use variable names, class names etc., but not for example method calls, or arbitrary words from comments.\nI'm not sure how often I even use this in practice, but if possible it would be great if you could extend neocomplcache to support this too!\n. After calling :NeoComplCacheCachingBuffer all keywords indeed appear in the completion popup, even new words I add after calling that command. I first assumed that command would cache the keywords once, but it seems that's not how it works? So could I just add an auto-command to call  :NeoComplCacheCachingBuffer on BufRead/BufNewFile or something?\n. Ok, but thanks again for your changes! You may close this issue if you want.\n. ",
    "skwp": "@toupeira really great that you've taken this issue in your hands, it's been annoying the hell out of me as well :) \n@Shougo thanks for an awesome plugin\n. ",
    "udonmai": "When I set \u300calways_set_home\u300d, there is no waring msg, but the neocomplcache doesn't work as well as the vim seems will not read my .vimrc file? My .vimrc file is in my home and how the \u300calways_set_home\u300djust work? I'm on OS X and how could I echo $SUDO_USER ? Thanks~\n. aha, I got to know about this now. So actually I should install the sudo.vim or copy my vimrc to the root dir so that the vim config file could be work when I use sudo vim?\n. OK and Thanks~\n. Vim \u3067 PHP \u95a2\u6570\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\nthe way to create a PHP dict.\n. ok.. I would disable it later but Istill want to know clearly about it...\nWhy just 'f' appears here? It almost appears after '->' and is it the omni?\nI don't remember there is a kind of source called 'f'... If it is omni, it shoud be O, right?\n. Thanks for so fast reply!\nAnd I will close this soon after finishing some more questions... Thanks again.\nIf I comment the below,\nautocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP\nonly leave this,\nlet g:neocomplcache_force_omni_patterns.php = '[^. \\t]->\\h\\w*\\|\\h\\w*::'\nThe autocomplete like which above still appears. So PHP's omni complete is defaultly set to phpcomplete#CompletePHP?\nI also find this blog - Vim\u3067PHP\u3092\u66f8\u304f\u79c1\u306eneocomplcache\u8a2d\u5b9a\u3092\u516c\u958b\u3057\u3066\u307f\u308b (I could read japanese)\nIs the dict way the best way for PHP? \nIf I use cTags with vim-easytags ,is it still the omni way?\n. I got to know something from the doc about the last question - If I use cTags with vim-easytags ,is it still the omni way?\nand I will try include way then.\n. I found it so hard to use omni with PHP... Not only slow but also completed inappropriately...\nI just want the PHP complete a bit more intelligent..... \nBut I don't know how.. \nI'll try include_complete this time.\n. you are so kind and I will try something new and later tell you more here.\nI will surely colse this today since I don't want to make it pleased for me until tomorrow...\n. For the default set of PHP omni, here\n\n. hmmmm..... \nYes but I have no idea further yet... \nAnd What is manual completion? \uff1a\uff09\n. Got it~\n. I just use both dict and tags but have no idea with include_complete.\nAnd I think that I would not spend much time on PHP the coming several months.\nSo, anyway, some examples may appear on your docs about include way someday and I will check later.\nAgain thanks for reply and off course your kind~\nI should close this right now.\nplus: I may come to Japan for my further study this Oct and wish more communications with you the coming days, \u5148\u8f88.\n. aha~\nThat sounds great~ Here in my university, less people talk about this and it is hard for an individual do take over so many problems...\nand where do you live? I have not decide which university to go for... \nIf talking about the Internet company, Tokyo is better than Kyoto\uff1f This is the 2 citys I may go...\n. OK\uff0cI understand~\nI will if possible~ \n. =w=\nI should say Thanks as well.\n. ",
    "naoina": "I had the same problem.\nHowever, it solved by rebuild the Vim 7.3.495 with CFLAGS=-g option.\nBut this solution is not essentially and neocomplcache does not matter.\n. > This problem was fixed in Vim 7.3.495?\nNo, solved only if added debug option. otherwise fall by SEGV yet.\n. ",
    "aliva": "I have vim 7.3.495 on archlinux (package from repo) and it has this problem.\nI have sent an email to vim_dev mailing list:\nhttps://groups.google.com/forum/?fromgroups#!topic/vim_dev/JwCepZR1tD0\n. ",
    "sifue": "If using low-spec rental server(I use SAKURA), 100% CPU resource is consumed for several minutes.\n. ",
    "niejieqiang": "I had used perl_omni for a time, it requires several unixtools such as \"curl.exe,uniq.exe\" when works in windows.\nNow I  installed perl_omni again. It is terribly clumsy of me.I really don't know  what patterns should write about g:neocomplcache_omni_patterns. I copied perl_omni's example settings like this:\nif !exists('g:neocomplcache_omni_patterns')\n  let g:neocomplcache_omni_patterns = {}\nendif\nlet g:neocomplcache_omni_patterns.perl='[''\"]\\?\\w*$'\nit can work  but the \"BUILTIN_FUNCTIONS\" menu always poped.maybe the pattern I writed was wrong~~~\nhere is the screenshot: http://pic.yupoo.com/niejieqiang/BVXUj2JX/medish.jpg\nhttp://pic.yupoo.com/niejieqiang/BVXVtlze/medish.jpg\n. It seems I had to press C-x C-o to complete the function manually.forget it,It's much better than nothing before~~~~~;-)\nthank you again\n. ",
    "peterhoeg": ":message does not give any error.\n. And I've just tried the latest version - problem is not fixed. As before sometimes it is not set properly.\n. I admittedly do have a lot of other VIM plugins active, so it is entirely possible that something else is going on. Do you have any suggestions on how to easily troubleshoot it? I mean, I can of course start disable plugins, use an empty .vimrc file and so on but maybe you have an idea of what specifically I should be looking for?\n. Yep, that solves it, thanks!\n. ",
    "LeafCage": "\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u78ba\u304b\u306b\u3001\u4e0d\u601d\u8b70\u3067\u3059\u306d\u3002lcd\u3092\u5909\u66f4\u3057\u305f\u5f8c\u306b\u5272\u308a\u8fbc\u307f\u304c\u5165\u308b\u306a\u3093\u3066\u3053\u3068\u306f\u3042\u308a\u5f97\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. \u3059\u3044\u307e\u305b\u3093\u3002lingr\u3068\u884c\u304d\u9055\u3044\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u304a\u305d\u3089\u304f\u89e3\u6c7a\u3067\u304d\u307e\u3057\u305f\u3002\n. ",
    "guotsuan": "But in other language all import is not common(Python, Haskell, D language,...).\nWhy should I support this feature? Please explain other useful case to me\nI think you are right. I just found that this codes will cause troubles when you work with other lauguages. I just met one, lua.\nafter enable these codes. the :NeoComplcachecachingInclude will freeze. Including a directory could be ambitious and dangerous.  For now I only see my codes are useful for java. Probably there is a better solution there. \n. ",
    "dotdash": "Thanks, but there seems to be a problem left. The default expression is negated. So prefetch gets enabled for old versions of VIM, instead of newer ones. Sorry, didn't notice that earlier.\n. OK, then I just misunderstood the help entry about the default value.\n. ",
    "spl": "\nWhere is your MacVim path?\n\n$ ls /Applications/MacVim.app/Contents/MacOS/\nMacVim Vim\n\nAnd can you search your MacVim from $PATH?\n\nI use a script in my $HOME/bin to run MacVim, so the above path is not in my $PATH. The script comes with MacVim, so I don't think the situation is unusual.\n\nPlease check it.\n\nIt seems to work if I'm in $HOME but not if I'm in a subdirectory. This comes from logging with -V8log:\n...\n 55: /Users/leather/.repos/vim-config/cfg/bundle/neocomplcache/autoload/vital/_8e75d8b/system/cache.vim\nError detected while processing function neocomplcache#enable..8..<SNR>39_check_source..<SNR>39_word_caching..neocomplcache#cache#async_load_from_file..<SNR>54_async_load..vimproc#get_command_name:\nline  101:\nE605: Exception not caught: vimproc#get_command_name: File \"Vim\" is not found.\nError detected while processing function neocomplcache#enable..8..<SNR>39_check_source..<SNR>39_word_caching..neocomplcache#cache#async_load_from_file..<SNR>54_async_load:\nline    3:\nE171: Missing :endif\nError detected while processing function neocomplcache#enable..8..<SNR>39_check_source..<SNR>39_word_caching:\nline   17:\nE171: Missing :endif\nError detected while processing function neocomplcache#enable..8..<SNR>39_check_source:\nline   12:\nE171: Missing :endif\nError detected while processing function neocomplcache#enable:\nline  498:\nE171: Missing :endif\nExecuting VimLeavePre Auto commands for \"*\"\n...\nHowever, if I add the above MacVim path to $PATH, it does seem to work:\n...\n 55: /Users/leather/.repos/vim-config/cfg/bundle/neocomplcache/autoload/vital/_8e75d8b/system/cache.vim\n  1: /Applications/MacVim.app/Contents/Resources/vim/vimrc\n...\nExecuting VimLeavePre Auto commands for \"*\"\n...\nOf course, I would prefer not having to explicitly add the MacVim path. And you will probably avoid future problems if this is not required. However, at least it is a workaround, and I know what to do.\nIf it's necessary that the command be in the $PATH, perhaps you should add that to the INSTALL documentation.\nThanks for the quick response.\n. I've been looking at your latest commits and trying to understand the problem. It seems like the exception is coming from vimproc#get_command_name(v:progname) in s:async_load() here. If that's the case, should you move the MacVim check before calling vimproc#get_command_name(v:progname) instead of after?\nIf you prefer, I can try it out and submit a pull request.\n. > Please check below value.\nI can't even get past the following:\nlet base_path = neocomplcache#util#substitute_path_separator(\n      \\ fnamemodify(vimproc#get_command_name(v:progname), ':p:h'))\nI get this error:\nError detected while processing function vimproc#get_command_name:\nline  101: \nE605: Exception not caught: vimproc#get_command_name: File \"Vim\" is not found.\n\nI don't know why your vim_path is \"Vim\"?\n\nIt's not the vim_path that is \"Vim\". It's the v:progname.\n:echo v:progname\nVim\n. If I add the path...\n$ PATH=$PATH:/Applications/MacVim.app/Contents/MacOS\n... then things seem to work.\n:let base_path = neocomplcache#util#substitute_path_separator(\n      \\ fnamemodify(vimproc#get_command_name(v:progname), ':p:h'))\n:echo base_path\n/Applications/MacVim.app/Contents/MacOS\n:let vim_path = base_path . (neocomplcache#util#is_windows() ? '/vim.exe' : '/vim')\n:echo vim_path\n/Applications/MacVim.app/Contents/MacOS/vim\n:echo !executable(vim_path) && neocomplcache#util#is_mac()\n1\nBut of course this works:\n:echo executable(\"/Applications/MacVim.app/Contents/MacOS/Vim\")\n1\n. It works nicely. Thanks!\n. ",
    "withgod": "omni\u88dc\u5b8c\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u3068\u3053\u308d\u3001\u52d5\u4f5c\u306b\u554f\u984c\u306f\u7121\u304f\u306a\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\ndisable\u672a\u6307\u5b9a\u3001limit_file_size\u3092\u5897\u3084\u3057\u305f\u72b6\u614b\u3060\u3068\n\n\u3053\u3061\u3089\u3067\u3059\u304c\u3001\u3088\u304f\u8003\u3048\u305f\u3089\u5f53\u305f\u308a\u524d\u306e\u52d5\u4f5c\u3067\u3059\u30fb\u30fb\u30fb\ndisable\u672a\u6307\u5b9a(tags\u88dc\u5b8c\u6709\u52b9)\u3001limit_file_size\u5897\u3084\u3059(\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u7bc4\u56f2\u5185)\u306a\u306e\u3067\u3001tags\u88dc\u5b8c\u52b9\u3044\u3066\u5f53\u305f\u308a\u524d\u3067\u3059\u3002\n\u4f55\u304b\u8272\u3005\u8a66\u3057\u3066\u308b\u9593\u306b\u3054\u3063\u3061\u3083\u306b\u306a\u3063\u3066\u305f\u3088\u3046\u306a\u306e\u3067\u3001\u5fd8\u308c\u3066\u4e0b\u3055\u3044\u3002\n\u306a\u306e\u3067\u3001\u5f53\u521d\u306e\u554f\u984c\u306e \"limit_file_size\u8d85\u3048\u3066\u3066\u308b\u306e\u306btag\u88dc\u5b8c\u3055\u308c\u308b\u3001\u8ffd\u52a0\u3067disable\u6307\u5b9a\u3057\u3066\u3082tag\u88dc\u5b8c\u304c\u50cd\u304f\"\u3068\u3044\u3046\u554f\u984c\u306f\u3001omni\u88dc\u5b8c\u3092\u7121\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u6709\u308b\u3001\u3067\u3057\u305f\u3002\n\u4ed6\u306e\u8a00\u8a9e\u307e\u3067\u306f\u78ba\u8a8d\u51fa\u6765\u3066\u307e\u305b\u3093\u304c\u3001php\u306b\u95a2\u3057\u3066\u306fomni\u88dc\u5b8c\u3092\u7121\u52b9\u306b\u3059\u308c\u3070\u5bfe\u5fdc\u51fa\u6765\u307e\u3057\u305f\u3002\n. ",
    "sgur": "\u5bfe\u5fdc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. ",
    "maxfl": "that works, thank you very much\n. ",
    "jdonaldson": "Looks good so far, thanks!\n. ",
    "pasela": "\u306a\u3093\u304b\u96e3\u3057\u3044\u7406\u7531\u304c\u3042\u308b\u3093\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b let g:neocomplcache_enable_prefetch=1 \u3068\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u5909\u5316\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u74b0\u5883\u306f\u9999\u308a\u5c4b\u3055\u3093\u306e7.3.584\u3067\u3059\u3002\n. :NeoComplCacheDisable \u3068 :NeoComplCacheLock \u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u3053\u3061\u3089\u3067\u306f\u671f\u5f85\u901a\u308a\u306b\u304f\u3063\u3064\u304d\u307e\u3057\u305f\u3002\n\u3044\u3061\u304a\u3046\u307e\u3063\u3055\u3089\u306e\u74b0\u5883\u306b neocomplcache \u3060\u3051\u5165\u308c\u3066\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u540c\u3058\u3067\u3059\u306d\u3002\n\u4ed5\u69d8\u7684\u306b\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u3068\u3044\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u307e\u307e\u4f7f\u304a\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n. \u671f\u5f85\u901a\u308a\u306e\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n. ",
    "Layzie": "\u3053\u308c\u306b\u4f3c\u305f\u3082\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001JavaScript\u3067\u3082\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u52b9\u304b\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u6700\u521d\u306fjscomplete-vim\u3092\u4f7f\u7528\u3057\u3066\u3044\u3066\u3001\nfunction 135_do_auto_complete..neocomplcache#get_complete_results..135_set_complete_results_words..260..jscomplete#GetCompleteWords, \u884c 20 Vim(let):E121: \u672a\u5b9a\u7fa9\u306e\u5909\u6570\u3067\u3059: b:GlobalObject Error occured in complfunc's get_complete_words()! Source name is jscomplete\n\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u306e\u3067\u3001jscomplete-vim\u3092\u5916\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u30aa\u30e0\u30cb\u88dc\u5b8c\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u30aa\u30e0\u30cb\u88dc\u5b8c\u306e\u30a8\u30e9\u30fc\u306f\u53d6\u308b\u306e\u3092\u5fd8\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u5f8c\u65e5\u5831\u544a\u3057\u307e\u3059\u3002\u5ff5\u306e\u70ba.neocon\u3092\u6d88\u3057\u3066\u3082\u5909\u5316\u306f\u7121\u304b\u3063\u305f\u3067\u3059\u3002\n\u74b0\u5883\u306f\nMac OS 10.7.4\nMacVim KaoriYa\u7248Gvim Version 7.3 (KaoriYa 20120509)\n\u306b\u306a\u308a\u307e\u3059\n. \u4fee\u6b63\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\u66f4\u65b0\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u3001\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u5ff5\u306e\u70ba.neocon\u3092\u6d88\u3057\u3066\u3082\u5909\u5316\u306f\u7121\u304b\u3063\u305f\u3067\u3059\u3002\n\u30aa\u30e0\u30cb\u88dc\u5b8c\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5f53\u7136\u610f\u5473\u304c\u7121\u3044\u3067\u3059\u3002\n\n\u78ba\u304b\u306b\u30aa\u30e0\u30cb\u88dc\u5b8c\u3067\u3059\u3082\u3093\u306d\u2026\u3002\u3059\u307f\u307e\u305b\u3093\u3002\n. @teramako \u3055\u3093\n\u306f\u3044\u3001\u4e86\u89e3\u3057\u307e\u3057\u305f\u3002\n\u305f\u3060\u4eca\u56de\u306f\u3001jscomplete-vim\u3092\u5916\u3057\u3066\u3082\u540c\u7a2e\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304a\u308a\u3001\u3053\u3061\u3089\u306e\u4fee\u6b63\u3067jscomplete-vim\u3092\u5165\u308c\u3066\u3082\u30a8\u30e9\u30fc\u304c\u5410\u304b\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u554f\u984c\u7121\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\njscomplete-vim\u306e\u65b9\u3067\u4f55\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u3001issue\u306b\u767b\u9332\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\uff01\n. ",
    "kazoo0217": "\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u66f4\u65b0\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u76f4\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u53d6\u308a\u6025\u304e\u3001\u304a\u77e5\u3089\u305b\u307e\u3067\u3002\n. ",
    "teramako": "@Layzie \u3055\u3093\u3001\u3082\u3057 jscomplete-vim \u3067\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u306a\u3089\u3001 jscomplete-vim \u5074\u306e Issue \u306b\u3054\u5831\u544a\u9802\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n. ",
    "code2k": "Putting the following into my .vimrc fixed it for me:\nif has(\"ruby\")\n  silent! ruby nil\nendif\n. ",
    "HungYuHei": "I have the same problem\n. ",
    "jrhorn424": "This was fixed on my Mac (Mavericks) by:\n1. brew uninstall vim\n2. Change to system ruby if you're using rvm, rbenv, or chruby.\n3. brew install vim\n4. If you're using vimproc you must use gnumake instead of make to compile the native extension.\nHope this helps.\n. @Praful did you ever find a workaround or solution you liked? I'm currently experiencing the same issue.\n. That also fails. Both insert a space after the partial match instead of matching and then adding a space. Example\nvim\n\" `inor<space> foo` becomes:\ninor foo\n\" expected:\ninoremap foo\nDoes neocomplcache do something with spaces inside the plugin? I saw something in my searches that suggested it might have to do with collision with certain snippet plugins.\n. > I think you don't select the candidate.\nThe candidate is highlighted when I press tab. Sorry I didn't mention that previously.\n\nIt depends on snippet engine.\n\nI did some searching and it might be related to my use of snipmate. Everything else is working fine for now, just a feature a missed from omnicompletion. Thanks for your help.\n. ",
    "kikyous": "i set nothing.\n. yes\uff0cyou are right\nit is set by ftplugin\\python.vim.\nbut , is there some way to disable Pythoncomplete in neocomplcache when no python interface\n. good job\n. what kinds of vim implementation do you need ?\nwe can ask on vim-dev mailing list.\n. ",
    "yy0c": "@Shougo How cloud I specially disable neocomplcache's auto complete to Python?\n. ",
    "joar": "@Shougo Could you please specify what's wrong in the python interface and what could be done to solve this? I just had this bug in a file where I had:\npython\nfrom gi.repository import Gtk\nAnd whenever I would go on to type a dot vim would lock up.\n. @Shougo Bingo. Thank you.\n. ",
    "bsr203": "Shougo. Thank you for the help. I have tried setting neocomplcache_enable_insert_char_pre , before/after g:neocomplcache_enable_at_startup , but still if I move the cursor the list is shown. The main issue is when I use the mouse to scroll the window in edit mode, which is very common.\nIf no other solution, is there a regexp setting which only trigger omnicomplete/neocomplcache when I press \".\" char. My main use case is to get automatic omni complete listing when access members of a class/object.\nmy complete setting:\n\n\"Omni completion: disable automatically inserts the first result.\nset completeopt+=longest\nset rtp+=/Users/bsr/.vim/repo/neocomplcache\nset rtp+=/Users/bsr/.vim/repo/ack.vim\nset rtp+=/Users/bsr/.vim/repo/taglist.vim\nset rtp+=/Users/bsr/.vim/repo/tagbar\nset rtp+=/Users/bsr/.vim/repo/nerdtree\nset rtp+=/Users/bsr/.vim/repo/nerdcommenter\nlet g:neocomplcache_enable_insert_char_pre = 1\nlet g:neocomplcache_enable_at_startup = 1\n\"let g:neocomplcache_enable_smart_case = 1\n\"let g:neocomplcache_enable_camel_case_completion = 1\n\" SuperTab like snippets behavior. \n\"imap  neocomplcache#sources#snippets_complete#expandable() ? \"(neocomplcache_snippets_expand)\" : pumvisible() ? \"\" : \"\"\n\" Enable heavy omni completion.\n\"if !exists('g:neocomplcache_omni_patterns')\n\"  let g:neocomplcache_omni_patterns = {}\n\"endif\n\"autocmd FileType go setlocal omnifunc=gocomplete#Complete\n\"let g:neocomplcache_omni_patterns.go = '[^. \\t].\\w|\\h\\w*::'\n\"let g:neocomplcache_omni_patterns.go = '.'\n\"\n\" If you prefer the Omni-Completion tip window to close when a selection is\n\" made, these lines close it on movement in insert mode or when leaving\n\" insert mode\nautocmd CursorMovedI * if pumvisible() == 0|pclose|endif\nautocmd InsertLeave * if pumvisible() == 0|pclose|endif\n. thanks. I will do so. Since this answer my queries, closing the issue. Thanks again for the help.\n. Installed 7.3.604, and works as you explained. Thank you for the help, and the product.\n. ",
    "markson": "Sorry it doesn't work. I'm using the latest version\n. Shougo, Thanks for you quick reply, this is a great tool BTW, sorry, it's still not work. I'm not a heavy vim user, this is part of my .vimrc file:\nif has(\"gui_running\")\n    set guioptions=egmrt\n        colorscheme torte\n        set guifont=menlo:h14\n        hi Pmenu                    guibg=#4575A0\n        hi PmenuSel                 guifg=#4575A0 guibg=#4575A0\n        hi PmenuSbar                guibg=#4575A0\n        hi PmenuThumb               guifg=#4575A0\nendif\nI don't know each parameter you provide function, so for test purpose I chance all to #4575A0, and restart macvim , and the color still the same, pink background with grey selection foreground\n. ",
    "jchain": "I can change the color. \n. Thanks. It works like a charm.\n. ",
    "UncleBill": "Better now\n. There is already a plugin of neocmplcache neco-php\nYou can modify the make_dict.php and make a dict file in the language you use.\nBUT:this plugin is slow and flickers\n. Neo: Trinity,you complete me.LOL\n. @Shougo yes! I wrote in .vimrc file (autocmd! BufNewFile,BufRead *.html set ft=html.css.javascript) for I can use all sinppets of html , css and javascript.\n\nAnd what's the \"eocomplcache doesn't work in html file\"?\n\neocomplcache doesn't pop up any match list but error at the bottom.\n. Not manually.\nThis is the setting in .vimrc\nautocmd! BufNewFile,BufRead *.html set ft=html.css.javascript\nI did try comment the setting , restart vim and try \"set ft=html.css.javascript\", problem is still there.\nBTW, I had BundleUpdate my plugins.\n. Oh yes! I guess I find the reason out, that is not settings problem.\nWell, I am using a CPU freq. limitting tool(indicator-cpufreq) to control the CPU's frequency, that is the real reason.\nWhen I set CPU Perfomence( high frequency), neocomplecache works fine at both filetype setting.But after I switch it to Powersafe(low frequency), neocomplecache \"down\" immediately( without changing any setting ).\nIf neocomplcache is default to \"disable\" when CPU freq is low, please close this issue. Thanks!\nupdate: And I will enjoy neocomplcache in setting CPU's freq. high.\n. :+1: for you great job!\nReally hope vim support fuzzy match natively\n. > I will rename neocomplcache to neocomplete.vim in next week!\nAnd the API?\n\nAnd filename completion is too fast.\n\nGreat :+1: \n. Great! Thanks!\n. In patch 7.3.1111+, neo is really fast! almostly as fast as YouCompleteMe! Amazing! @Shougo \n. What about multi-dict, like\nvim\n'javascript' : [$DICTDIR . 'javascript.dict',$DICTDIR . 'node.dict'],\n. Thanks!\nVim support it natively: using <c-x><c-u> and  <c-x><c-p> \n. got it\n. fixed #416 \n. great! :+1: \n. > I don't want to use all buffers, just all buffers with same filetype.\n@adam-ho \nIn some cases, we need completting from other filetypes\nlike \n- .c and .h\n- .css,.javascript and .html\n- etc\n. just know that.\nis there defualt same_filetype settings?\n. @adam-ho <c-x><c-n> or <c-x><c-p> vim's built-in feature\n. Thanks!\n. > What's the release?\n\"head\" turn back \"he\"\n. I re-edited it\n. > I think you should map to  and .\nI tried that, it still flicks.\nproblem is:\n1. I type \"he\" \n2. [\"head\",\"heart\",\"heat\".etc] poped up\n3. \"head\" is automaticly select, \"head\", the whole word appended to file\n   \n4. soonly, \"head\" becomes \"he\", automaticly\n   \n. > But if your Vim is too slow, it flicks.\n\nIt is Vim's feature. I cannot fix it.\n\ngot it\n. ",
    "tanzhou007": "Thanks. The kay mapping is working for me. How do you use the register complete though?\n. I am confused...Is it the  key?\n. Oh, you are referring to the quick-match, I knew that. What I asked is how do you type \"re\"and it will pop up all the registers name with content in terms of snippets. Thanks.\n. Gotcha, thanks!\n. ",
    "montalvomiguelo": "How did u fix that?... I'm using janus and I have installed neocomplcache and neocomplcache-snippets-complete but still get:\n\n. ",
    "humiaozuzu": "I just reinstall all my plugins and <C-X><C-O> for c not working now.... so do you know what may cause this?\n. so every time I update my c file and I must re-generate ctags file?\nStatic language is so troublesome...\n. ",
    "aleprovencio": "I had this from the example configuration:\n    \" Define keyword.\n    if !exists('g:neocomplcache_keyword_patterns')\n      let g:neocomplcache_keyword_patterns = {}\n    endif\n    let g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\nTaking it out solved the problem. Thank you.\n. ",
    "ConanChou": "OK, I found the clashed plugin with\n$ grep -iR 'SnipMapKeys' . \n./plugin/snippetsEmu.vim:function! s:SnipMapKeys()\n./plugin/snippetsEmu.vim:call s:SnipMapKeys()\n./plugin/snippetsEmu.vim:    call s:SnipMapKeys()\n./plugin/snippetsEmu.vim:    call s:SnipMapKeys()\nI think the <TAB> key mapping is the problem. So I temporally removed the plugin. The Error is gone.\n. ",
    "vincentor": "How can i map the behavior of that to  key? What i exactly want is  to change the selection, and type   again to completion. \n. It didn't work in my environment, will they conflict whit other settings? This is my neocomplcache settings.\n```\nlet g:neocomplcache_enable_at_startup = 1 \nlet g:neocomplcache_enable_smart_case = 1 \nlet g:neocomplcache_enable_camel_case_completion = 1 \nlet g:neocomplcache_enable_underbar_completion = 1 \nlet g:neocomplcache_lock_buffer_name_pattern = '*ku*' \nlet g:neocomplcache_enable_quick_match = 1 \n\"inoremap   neocomplcache#smart_close_popup() . \"\\\" \ninoremap  neocomplcache#complete_common_string()\ninoremap  pumvisible()? \"\\\" : \"\\\"                                                                                                                         \ninoremap  pumvisible()? \"\\\" : \"\\\"\n\"inoremap   pumvisible() ? \"\\\" : \"\\\" \n\"imap  neocomplcache#sources#snippets_complete#expandable() ? \"\\(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\\" : \"\\\" \n\"inoremap   pumvisible() ? \"\\\" : \"\\\" \ninoremap   pumvisible() ? \"\\\".\"\\\" : \"\\\"\n\"inoremap   pumvisible() ? neocomplcache#smart_close_popup() . \"\\\" : \"\\\"\nnoremap  neocomplcache#smart_close_popup().\"\\\" \ninoremap  neocomplcache#smart_close_popup().\"\\\" \ninoremap   neocomplcache#close_popup() \ninoremap   neocomplcache#cancel_popup() \n```\n. I used the setting you provided:\n```\ninoremap   pumvisible()? \"\\\" : \"\\\"\ninoremap   pumvisible()? \"\\\" : \"\\\"\n```\nbut when i type 'fo' with the candidates of 'foo', 'fooo', 'foooo', but it still auto input the 'foo' to the edit line when i use <C-n> to make a selection. So when i use the mapping of this:\ninoremap pumvisible() ? \"<C-n>\".\"<SPACE>\" : \"<SPACE>\"\nI still can't type one <SPACE> to walk though the candidates, and then type <SPACE> to make a completion (i.e. Change the 'fo' to 'foo' when 'foo' is my selection).\n. Oh, github ate the \"\" i wrote.\n. I used the setting you provided:\n\ninoremap pumvisible()? \"\\\" : \"\\\"\ninoremap pumvisible()? \"\\\" : \"\\\"\n\nthen i type 'fo' with the candidates of 'foo', 'fooo', 'foooo', but it still auto input the 'foo' to the edit line when i use  to make a selection. So when i use the mapping of this:\n\n\"inoremap   pumvisible() ? \"\\\".\"\\\" : \"\\\"\n\nI still can't type one  to walk though the candidates, and then type another  to make a completion (i.e. Change the 'fo' to 'foo' when 'foo' is my selection).\n. Thanks for the reply, is there any way can achieve that type '' to select, and another '' to completion? For example, i input 'fo' with candidates 'foo', 'fooo', 'fooo', then i type '' to change the selection, e.g. i select 'fooo', then another '' to complete the input, finally i can type '' to really input a space. I seems if i map the '' to '', it can use  to walk through, but i will input the wrong candidate if i type  again.\n. I really appreciate your help.\n. ",
    "thenoseman": "You are my hero. Thanks for the swift solution!\n. ",
    "wangyu0248": "I have downloaded the 7.1 version and unpacked it to overwrite the 7.0 version , but it seams doesn't work yet , anyway thank you as well \n. That works , thank you very much!\n. ",
    "Yasumoto": "Yep, verified as fixed.\nThank you!\n. Yep, definitely. Thanks!\n. ",
    "osyo-manga": "\u30b3\u30e1\u30f3\u30c8\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u305f\u3002\n\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304bry\u3002\n\u305d\u308c\u306f\u3001\u30e6\u30fc\u30b6\u5074\u3067\u5bfe\u51e6\u51fa\u6765\u308b\u3088\u3046\u306a\u554f\u984c\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n. neocomplcache \u3092\u66f4\u65b0\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u5ea6\u306f\u5e38\u306b\u30e6\u30fc\u30b6\u5b9a\u7fa9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nneocomplcache \u306e\u8a2d\u5b9a\u306f\u7279\u306b\u5909\u3048\u3066\u3044\u307e\u305b\u3093\u3002\necho neocomplcache#is_omni_complete(\"str.\")\n\u3067\u306f 1 \u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n. \u3042\u3001\u3042\u3068 C++ \u306e\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n``` cpp\ninclude \nint\nmain(){\n    std::string str;\n    str.              // \u3053\u3053\u3067\u88dc\u5b8c\u3092\u884c\u3046\n    return 0;\n}\n```\n. \u3053\u3061\u3089\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u5c0f\u69cb\u6210\u306e vimrc \u3067\u306f\u554f\u984c\u306a\u304f\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u884c\u308f\u308c\u3066 clang_complete \u3067\u88dc\u5b8c\u304c\u304a\u3053\u306a\u308c\u307e\u3057\u305f\u3002\n2\u56de\u76ee\u4ee5\u964d\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\u305f\u3060\u3001\u3044\u3064\u3082\u306e vimrc \u3067\u306f\u3001\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u305f\u5f8c\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u884c\u308f\u308c\u3066\u3057\u307e\u3044\u3001\u3053\u3061\u306f\u3089\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u624b\u52d5\uff08\uff09 \u3067\u30aa\u30e0\u30cb\u88dc\u5b8c\u3057\u3066\u307f\u305f\u3093\u3067\u3059\u304c\u3001\u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3064\u304b\u3089\u305a\u306b\u6b63\u3057\u304f clang_complete \u3067\u88dc\u5b8c\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u3053\u3061\u3089\u3067\u3082\u3046\u3061\u3087\u3063\u3068\u8abf\u3079\u3066\u307f\u307e\u3059\u3001\u3002\n. \u3042\u3001\u624b\u52d5\uff08\uff09\u304c\u51fa\u529b\u3055\u3066\u306a\u304b\u3063\u305f\u2026\u3002\n\uff1cC-x\uff1e\uff1cC-o\uff1e\n\u3067\u3059\u3002\n. \u3082\u3046\u3061\u3087\u3063\u3068\u8a66\u3057\u3066\u307f\u305f\u3093\u3067\u3059\u304c\u3001\u3069\u3046\u3084\u3089\u624b\u52d5\u30aa\u30e0\u30cb\u88dc\u5b8c\u3057\u305f\u5834\u5408\u306b clang_complete \u304c\u6b63\u3057\u304f\u547c\u3073\u51fa\u3055\u308c\u308b\u5834\u5408\u3068\u3001\u6b63\u3057\u304f\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u4f55\u304c\u539f\u56e0\u306a\u306e\u304b\u306f\u4e0d\u660e\u3002\n\u3042\u3068\u624b\u52d5\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u5834\u5408\u3067\u3082\u3001\u81ea\u52d5\u88dc\u5b8c\u3067\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u5f8c\u306b\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n. 1\u3064\u539f\u56e0\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\nvim\ninoremap <expr><C-e> neocomplcache#cancel_popup()\n\u304c\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u30aa\u30e0\u30cb\u88dc\u5b8c\u3067\u306f\u306a\u304f\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\u30e6\u30fc\u30b6\u5074\u3067\u306f\u7279\u306b\u547c\u3073\u51fa\u3057\u3066\u306f\u3044\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u2026\u3002\n``` cpp\ninclude \nint\nmain(){\n    std::string str;\n    str.str         // \u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\n    return 0;\n}\n```\n\u305d\u3061\u3089\u3067\u3082\u518d\u73fe\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n. \u3042\u3068\nvim\nset path+=C:/MinGW/lib/gcc/mingw32/4.6.2/include/c++\n\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3068 str. \u3067\u300e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30ad\u30e3\u30f3\u300f\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002\n\u3053\u308c\u306f\u5225\u306b\u539f\u56e0\u304c\u3042\u308b\u306e\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u5bfe\u7b56\u3092\u3057\u305f\u3068\u3053\u308d\u3001\u3068\u308a\u3042\u3048\u305a\u554f\u984c\u306b\u306a\u3063\u3066\u3044\u305f\u70b9\u306f\u89e3\u6d88\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\u4eca\u306e\u3068\u3053\u308d\u7279\u306b\u554f\u984c\u306f\u51fa\u3066\u3044\u306a\u3044\u306e\u3067\u3082\u3046\u3061\u3087\u3063\u3068\u69d8\u5b50\u3092\u898b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u3068\u52d5\u4f5c\u306b\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u300e.\u300f\u3092\u6253\u3063\u305f\u76f4\u5f8c\u306b\u4e00\u77ac\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u30e1\u30cb\u30e5\u30fc\u304c\u51fa\u3066\u3059\u3050\u6d88\u3048\u3066\u3001\u305d\u306e\u5f8c\u306b\u30aa\u30e0\u30cb\u88dc\u5b8c\u306e\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u304c\u51fa\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u6319\u52d5\u3068\u3057\u3066\u306f\u5408\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\n. \u4e00\u77ac\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u30e1\u30cb\u30e5\u30fc\u304c\u51fa\u308b\u306e\u306f\u89e3\u6d88\u3055\u308c\u307e\u3057\u305f\u3002\n\u3042\u3068 complete \u30aa\u30d7\u30b7\u30e7\u30f3\u306b i \u304c\u4ed8\u3044\u3066\u3044\u3066\u3082\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u30aa\u30e0\u30cb\u88dc\u5b8c\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\n\u3057\u305f\u3002\n\u3056\u3063\u3068\u4f7f\u3063\u3066\u307f\u305f\u9650\u308a\u3067\u306f\u7279\u306b\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n. \u3068\u308a\u3042\u3048\u305a\u3001\u3057\u3070\u3089\u304f\u3053\u308c\u3067\u4f7f\u3063\u3066\u307f\u3066\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u3002\u3063\u3066\u611f\u3058\u3067\u3002\n. Twitter \u306e\u65b9\u306b\u3082\u5831\u544a\u3057\u305f\u3093\u3067\u3059\u304c\u3001\u3053\u3063\u3061\u306e\u65b9\u304c\u3044\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u8ee2\u8f09\u3002\n``` cpp\n// \u4e0b\u8a18\u306e\u8a2d\u5b9a\u306e\u5834\u5408\u3067\u518d\u73fe\n// let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] \\t]\\%(.\\|->)\\|\\h\\w::'\n// let g:neocomplcache_force_omni_patterns.cpp = '::'\n// \u3053\u308c\u3067\u3042\u308c\u3070\u52d5\u4f5c\u3057\u305f\u306e\u3067\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u304c\u539f\u56e0\uff1f\ninclude \n::iostream      // :: \u3092\u6253\u3064\n                        // \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u304c\u547c\u3070\u308c\u308b\n                        // iostream \u304c\u52dd\u624b\u306b\u9078\u629e\u3055\u308c\u308b\nint\nmain(){\n    return 0;\n\n}\n```\n. \uff71\uff70\uff72\uff74\uff70\uff71\uff70\u305d\u3046\u3044\u3046\u4e8b\u304b\u2026\u3002\n\u78ba\u304b\u306b\u308f\u305f\u3057\u306e\u74b0\u5883\u3060\u3068 let g:clang_complete_auto = 0 \u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u2026\u3002\n. \u3072\u3068\u307e\u305a\nvim\n let g:clang_complete_auto = 0\n\u3068\u3057\u305f\u3068\u3053\u308d\u4e0a\u8a18\u306b\u66f8\u3044\u305f\u30b0\u30ed\u30fc\u30d0\u30eb\u7a7a\u9593\u4e0a\u3067\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u88dc\u5b8c\u306f\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u3068 :: \u3060\u3051\u3067\u88dc\u5b8c\u3057\u3066\u6b32\u3057\u3044\u5834\u5408\u3082\u3042\u3063\u305f\u306e\u3067\ncpp\nlet g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|::'\n\u3068\u5909\u66f4\u3002\n. > Vim script\u306e\u95a2\u6570\u540d\u306f\u3068\u3066\u3082\u9577\u304f\u306a\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002call neocomplcache#enable()\u3068\u304b\u3002\u88dc\u5b8c\u3059\u308b\u3068\u304d\u306b\u4e0d\u4fbf\u306b\u306a\u308a\u307e\u305b\u3093\u304b\uff1f\n\n\u6700\u5927\u6587\u5b57\u9577\u3067\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u306a\u3089\u3001\u300c\u524d\u56de\u306e\u5165\u529b\u6642\u306b\u5019\u88dc\u304c\u306a\u3044\u3068\u304d\u306b\u9650\u308b\u300d\u7b49\u3001\u5de5\u592b\u304c\u5fc5\u8981\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3093\u30fc vim_complete \u306e\u5834\u5408\u306f\u5224\u5b9a\u3059\u308b\u6587\u5b57\u306e\u9577\u3055\u3092\u9577\u304f\u3059\u308b\uff08\u3082\u3057\u304f\u306f\u7121\u52b9\u306b\u3059\u308b\uff09\u307f\u305f\u3044\u306a\u8a2d\u5b9a\u3092\u3059\u308c\u3070\u56de\u907f\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u9006\u306b neosnippet \u306f\u6bd4\u8f03\u7684\u306b\u77ed\u3044\u30ef\u30fc\u30c9\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u305d\u3046\u3044\u3046\u88dc\u5b8c\u3060\u3068\u6709\u52b9\u306a\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n. \u306f\u3044\u3002\n\u5b9f\u88c5\u306e\u6709\u7121\u3001\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u95a2\u3057\u3066\u306f Shougo \u3055\u3093\u306b\u304a\u4efb\u305b\u3057\u307e\u3059:)\n. set foldmethod=marker \u3092\u8a2d\u5b9a\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3061\u3089\u3064\u304d\u304c\u518d\u73fe\u3057\u307e\u3059\u306d\u3002\nfor \u6587\u5185\u306esettabwinvar\u306e\u51e6\u7406\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3061\u3089\u3064\u304d\u304c\u518d\u73fe\u3059\u308b\u306e\u3067\u539f\u56e0\u306f\u5225\u306b\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u4e00\u756a\u3042\u3084\u3057\u3044\u306e\u306f filter(range(1, tabpagewinnr(tabnr, '$')),  \"!empty(gettabwinvar(tabnr, v:val, 'neocomplcache_foldinfo'))\") \u8fba\u308a\u3002\n. \u3046\u3052\u3001\u305d\u3093\u306a\u526f\u4f5c\u7528\u304c\u2026\u3002\n. \u4e86\u89e3\u3067\u3059\u3002\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n. \u3053\u3061\u3089\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. \u6b21\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n``` vim\nscriptencoding utf-8\nset nocompatible\nfiletype off\nset rtp+=$VIM/dotfiles/neobundle.vim/\nif has('vim_starting')\n    call neobundle#rc(expand($VIM.\"/.vim/neobundle\"))\nendif\n\" NeoBundle \"Shougo/neocomplcache\"\nNeoBundle \"Shougo/neocomplcache\", {\n\\   \"rev\" : \"ver.8.1\"\n}\nfiletype plugin indent on\n\" \u6709\u52b9\u306b\u3059\u308b\nlet g:neocomplcache_enable_at_startup=1\nlet g:neocomplcache_enable_fuzzy_completion = 0\ncall neocomplcache#custom_source('_', 'matchers', ['matcher_head'])\n```\n. \u3053\u3061\u3089\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n. \u30a8\u30e9\u30fc\u5185\u5bb9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\uff08\u91cf\u304c\u591a\u3059\u304e\u3066\u5168\u3066\u3092\u5217\u6319\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u2026\u3002\n\n. \u3059\u307f\u307e\u305b\u3093\u3001neobundle.vim\u304c\u53e4\u304b\u3063\u305f\u306e\u304c\u539f\u56e0\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\nneobundle.vim\u3092\u66f4\u65b0\u3057\u305f\u3089\u518d\u73fe\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n. ",
    "cs86661": "it should be changed to ...\nif b:neocomplcache.lock\n  echo 'neocomplcache is unlocked!'\n  call neocomplcache#unlock()\nelse\n  echo 'neocomplcache is locked!'\n  call neocomplcache#lock()\nendif\n;)\n. thanks for quick response\u2026\u2026but I see there has three more getbufvar(bufnr('%'), '&ooxx') not changed ?\n. ",
    "Jeswang": "I set the PYTHONPATH with a wrong value... Change it to /Library/Python/2.7/site-packages and problem solved.\n. ",
    "samuelololol": "could I ask what is the difference between neocomplcache_snippets_expand and neocomplcache_snippets_jump?? I cannot feel it\n. thanks!!!\nbtw, I want to bind  key to expand the snippts instead of  which I use for jumping lighting bar to next on menu, so I have the following setting\ninoremap <expr><TAB> pumvisible() ? \"\\<C-n>\" : <SID>check_back_space() ? \"\\<TAB>\" : \"\\<C-x>\\<C-u>\"\n    imap <expr><CR> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug> neocomplcache_snippets_jump)\" : pumvisible() ? neocomplcache#smart_close_popup() :     \"\\<CR>\"\nis this setting ok? any suggestion?\nthank you!\n. ",
    "MindTwister": "I can confirm this on vim 7.2\n. ",
    "ksu006": "Confirmed on vim 7.3 as well.\n. ",
    "gregrobbins": "Same here on Vim 7.2. Renders the plugin pretty much unusable.\n. ",
    "ujihisa": "Your <C-h>, neocomplcache#close_popup(), isn't for selecting a candidate of completion, so just map another key such as <C-y> to neocomplcache#close_popup().\n. Yes you can set neocomplcache insert mode key mappings with prefix keys you choose in your vimrc, and that sounds sound.\ne.g.\ninoremap <expr> \\<C-g> neocomplcache#undo_completion()\nIn this case the prefix key is backslash.\n. I'm not sure what's the purpose of making a key mapping for insert mode's  <C-n>.\na tip for github issue: use code block to show texts which look like html tags such as <expr>.\n. we can add the instructions to the FAQ section in the neocomplcache doc\n. Can you write a patch for doc/neocomplcache.txt and send a pull request? we are very welcome about that.\nThanks!\n. I couldn't reproduce it even with changing listchars to show . as space by\n:let &listchars = 'tab:>-,trail:.,extends:>,precedes:<'\nDoes somebody else succeed in reproducing it? > all\n. > In my env, it cannot  work, tab just tab.. not c-n\ndid it work when popup window is up there?\n. :h pumvisible() tells about the details of the line.\npumvisible()                        *pumvisible()*\n    Returns non-zero when the popup menu is visible, zero\n    otherwise.  See |ins-completion-menu|.\n    This can be used to avoid some things that would remove the\n    popup menu.\nIf no popup windows shown there, tab has to insert a tab character as the line says :)\n. which revision of neocomplcache is your Vim using?\n. fixed it just now ;)\n. awesome\n. I tried with the latest neocomplcache and with the vimrc on my MacVim, but I couldn't reproduce the issue you reported.\nThe version of my MacVim to test:\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Aug  7 2012 10:58:17)\nMacOS X (unix) version\nIncluded patches: 1-604\nyes, it's pretty old..\n. g:neocomplcache_skip_auto_completion_time may also help you\n```\ng:neocomplcache_skip_auto_completion_time\n        g:neocomplcache_skip_auto_completion_time\n    It is a string for skip auto completion.\n    If completion time is higher than it, neocomplcache will skip\n    auto completion.\n    If it is \"\", the skip feature will be disabled.\nDefault value is \"0.3\".\n{only available when compiled with the |+reltime| feature}\n\n``\n. thanks!\n.:h g:neocomplcache_skip_auto_completion_time`\n. I couldn't reproduce it as well with the config above.\n. > indentation\ncheck the FAQ section of neocomplcache doc :h neocomplcache\n. just in case can you clear cache files?\n- rm -r ~/.neocomplcache/*\n- rm -r ~/.neocon/*\none is older and the other is newer path; I forgot which was which though\n. +1\n. I guess you focused on a vim on remote shared server that people don't always have privilege to install vim for everyone on the server, but in that case I don't think people even try to use neocomplcache on the server since completion popup is really slow over ssh.\nif_lua on neocomplcache makes sense for me, as long as it doesn't crash ;)\n. yes!\n. \u3082\u3057\u3088\u308d\u3057\u3051\u308c\u3070\u3001\u8a66\u3057\u306b 2b36f097bc35d18dcc990f362f395e3bb18a2389\u306e\u4e00\u3064\u624b\u524d (\u3064\u307e\u308a 2b36f097bc35d18dcc990f362f395e3bb18a2389^ ) \u307e\u3067\u623b\u3057\u3066\u307f\u3066\u5b9f\u9a13\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n. NeoBundle 'Shougo/neocomplcache', {'rev' : '2b36f09^'}\n. \u3046\u30fc\u3080\u30012b36f09^\u6642\u70b9\u3067\u3059\u3067\u306b\u58ca\u308c\u3066\u3044\u305f\u306e\u3067\u3057\u305f\u304b\u3002\u3044\u305a\u308c\u306b\u305b\u3088\u4fee\u6b63\u3055\u308c\u3066\u3088\u304b\u3063\u305f\u3067\u3059\n. https://github.com/vim-jp/issues/issues/48#issuecomment-15354088\n\nn = 25\nVim Language -> 1.956016\nif_lua -> 0.026156\nif_python -> 0.053765\nif_lua was twice as fast as if_python\n. try\n\nlet g:neocomplcache_skip_auto_completion_time = \"\"\n. <expr> is missing\n. it's not because of neocomplcache but because of the ruby complete plugin you are using.\nTry disabling neocomplcache and config.<C-x><C-o> to call omni-completion manually to see if you get same warning or not.\n. :h NeoComplCacheLock\n. :sushi: :+1:\n. ",
    "itchyny": "\u78ba\u8a8d\u3057\u307e\u3057\u305f \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\n. ",
    "vqng": "any idea which setting is wrong? I am having the same problem.\n. conflicted with:\n\\ 'AutoClosePumvisible': {\"ENTER\": \"\\<C-Y>\", \"ESC\": \"\\<C-E>\"},\nfrom autoclose\n. ",
    "willthefrog": "I know,  this confuses me too,  i tried char2nr(cur_keyword_str) is 0,  and I even tried,\nVimL\n   echom cur_keyword_str == ''\nit was 1, so cur_keyword_str should be equal to '', right?  but in reality, if I change line 251 to:\nVimL\n   let list = call(omnifunc, [0, ''])\nclang_complete works and no error message was printed,\nall right, here is the full error message\nError occured calling omnifunction: ClangComplete\nfunction neocomplcache#sources_manual_complete..neocomplcache#get_complete_results..<SNR>107_set_complete_results_words..31..<SNR>123_set_comple\nte_results_words..ClangComplete, line 35\nVim(python):Traceback (most recent call last):\n. thanks, dude :+1: \n. ",
    "Goles": "Hey there, that mostly fixed the issue, had to force for objc and objcpp too.\nif !exists('g:neocomplcache_force_omni_patterns')\n    let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.c =\n            \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\nlet g:neocomplcache_force_omni_patterns.cpp =\n            \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:neocomplcache_force_omni_patterns.objc =\n            \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:neocomplcache_force_omni_patterns.objcpp =\n            \\ '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\nlet g:clang_complete_auto = 0\nlet g:clang_auto_select = 0\nlet g:clang_use_library = 1\nWorking fine now.\n. ",
    "akrawchyk": "\nNo. It is not relative with Shougo/neocomplcache#194.\n\nMy bad, that was the only issue I could find with similar errors.\n\nI have posted the error in vital.vim(Japanese).\nvim-jp/vital.vim#38\n\nThank you! I don't read Japanese so I greatly appreciate the help.\n\nCan you delete 'wildignore' option settings? It may cause the problem.\n\nThis seemed to fix the issue. Closing this.\n. ",
    "garrettoreilly": "Thanks!\n. ",
    "raiden325": ":Unite output:messages\u306e\u7d50\u679c\u3092\u8f09\u305b\u307e\u3059\u3002\n- \u65e5\u672c\u8a9e\u30e1\u30c3\u30bb\u30fc\u30b8\u7ffb\u8a33/\u76e3\u4fee: \u6751\u5ca1 \u592a\u90ce koron.kaoriya@gmail.com\n- /home/raiden325/.vim/bundle/neocomplcache/autoload/neocomplcache.vim, \u884c 768\n- Vim(function):E127: \u95a2\u6570 neocomplcache#manual_complete \u3092\u518d\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093: \u4f7f\u7528\u4e2d\u3067\u3059\n- Source name is keyword_complete\n- Error occured in source's get_complete_words()!\n- /home/raiden325/.vim/bundle/neocomplcache/autoload/neocomplcache.vim, \u884c 768\n- Vim(function):E127: \u95a2\u6570 neocomplcache#manual_complete \u3092\u518d\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093: \u4f7f\u7528\u4e2d\u3067\u3059\n- Source name is keyword_complete\n- Error occured in source's get_complete_words()!\n- /home/raiden325/.vim/bundle/neocomplcache/autoload/neocomplcache.vim, \u884c 768\n- Vim(function):E127: \u95a2\u6570 neocomplcache#manual_complete \u3092\u518d\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093: \u4f7f\u7528\u4e2d\u3067\u3059\n- Source name is keyword_complete\n- Error occured in source's get_complete_words()!\n\n\u3053\u308c\u3001\u4e00\u56de\u76ee\u306e\u88dc\u5b8c\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u307e\u3059\u304b\uff1f \n\u88dc\u5b8c\u5019\u88dc\u304c\u8868\u793a\u3055\u308c\u308b\u3068\u304d\u306b\u6bce\u56de\u51fa\u3066\u304d\u307e\u3059\u3002\n. \u7d20\u65e9\u3044\u5bfe\u5fdc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u75c7\u72b6\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n. \n",
    "cpiger": "I tested again, and find this:\nif  let g:clang_complete_auto = 0  in .vimrc ,   it will freeze.\n. yes, i am .\nand i found , if  let g:clang_complete_auto = 1,   after input  string::   in a cpp file, gvim will  \"Vim: Caught deadly signal SEGV\" \njust input  ::    in a cpp file, this \"signel SEGV\" will also happen.\n. ",
    "edtler": "This was fixed with the issue  view the patch in https://github.com/Shougo/neocomplcache/issues/323\n. ",
    "MortalCatalyst": "Yes I cloned it last night\n. Ok I had the same error as 325 & 326 when I cloned last night. I fixed that and when I restarted I received an error that line 2830 was missing endfunction.\nhttps://github.com/Shougo/neocomplcache/blob/master/plugin/neocomplcache.vim\n. ",
    "rtud": "Same here\n. ",
    "cpfaff": "Thx\n. I had a bit time to test it and I have to be more precise. It is not working in my LaTeX, R-Noweb files. But works nice in a simple text file. \n. Further testing tells me that completion is only not working (at all, not only underbar) if I open a file with unite file candidates. Then it is even not working for text files. If I open the any file via commandline it is working even for the R-Noweb and LaTeX files. And if I open it via :tabe file it also works nicely. So the bug might be unite related. \n. I see. This happens when using neocomplcache. I would switch to neocomplete but waiting for two things: First, your announcement that it is usable in production (but good to hear that the new completion system is in focus now). Second, vim in according patch level to be offered in my distribution (Ubuntu 13.04). As the first condition might be met already, the second will be when ubuntu 13.10 is released I think. I could also compile the latest patchlevel version which I tried but then syntax highlighting did not work anymore. So I just have to figure out how to build \"my\" own vim, setting the right flags on configure. How do you compile your vim, if you do (just the step of ./configure)?\n. No it is not your work to provide the right version thats right. I was telling what I am waiting for and asking you how you compile because your biuld config works good with your plugins and I use a lot of them. Meanwhile I found a way to build my vim the same way as the ubuntu maintainer does. And all works, thanks.\n. Thanks\n. ",
    "belkevich": "1) I just want to see autocomplete in \"IDE-style\". I don't understand why it works for tab and don't works for ctrl+space\n2) Fixed\n. ",
    "saihoooooooo": "\u66f4\u65b0\u3057\u305f\u3089\u7121\u4e8b\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01m( )m\n. ",
    "jinleileiking": "inoremap <expr><TAB>  \"\\<C-n>\"\nworks, \ni think the 'pumvisible' not work.\n. No popup window showed.\n. @supermomonga \nmy configure:\nlet g:neocomplcache_max_list = 10\nlet g:neocomplcache_manual_completion_start_length = 100\nlet g:neocomplcache_auto_completion_start_length = 5\nseems not work\n. In my project, I have a very big file 30000Lines, \nI will try g:neocomplcache_disable_caching_file_path_pattern to omit this f**king file\n. @supermomonga I want to do it auto.\nlet g:neocomplcache_enable_auto_select = 1\nlet g:neocomplcache_disable_auto_complete = 0\nlet g:neocomplcache_enable_at_startup = 1\nlet g:neocomplcache_max_list = 10\nlet g:neocomplcache_manual_completion_start_length = 100\nlet g:neocomplcache_auto_completion_start_length = 5\nlet g:neocomplcache_min_keyword_length = 10\nlet g:neocomplcache_min_syntax_length = 10\nlet g:neocomplcache_disable_caching_file_path_pattern = \"out*.*\"\nafter let \nlet g:neocomplcache_min_keyword_length = 10\nlet g:neocomplcache_min_syntax_length = 10\nto 10, the speed is up.\n. ",
    "bijzz": "When reading this, i issued an update and locking into the corresponding folder i now have to most recent version f92b280 but the issue persists.\n. Way to go!\nWorks like a charm.\n. ",
    "Alexander-Shukaev": "Are there any news on the issue? Does it seem to be solvable?\n. Sure, it is pretty simple, I bet you know it, just maybe unfamiliar with the term \"hard-wrapping\". Anyway here is how you can test it (lets test for vim script language, just as an example):\nAdd this into \".vimrc\":\nvim\nset textwidth=79\nCreate a file ~/.vim/after/ftplugin/vim.vim and put this:\nvim\nsetlocal formatoptions=c,r,q,a\nNow when you type comments in some vim script they will get automatically broken (hard-wrapped) if the word you are typing exceeds 79 columns, i.e. it will be automatically placed to the line below (comment leader is also inserted automatically). This is very handy feature, it allows to keep comments in those conventional bounds of 79-80 columns without any pain.\nNow you can reread my first post, and I guess now you have full info on how to reproduce the bug. Feel free to ask me for further details. BTW, thanks for the great plugin - you're the man! :D <3\n. :version\nVIM - Vi IMproved 7.3 (2010 Aug 15, compiled Aug 16 2010 10:31:31)\nMS-Windows 64-bit GUI version with OLE support\nCompiled by george@reilly.org\nHuge version with GUI.  Features included (+) or not (-):\n+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments +conceal +cryptv +cscope +cursorbind +cursorshape\n+dialog_con_gui +diff +digraphs -dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path +float +folding -footer +gettext/dyn -hangul_input +iconv/dyn +insert_expand +jumplist\n +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname +mouse +mouseshape +multi_byte_ime/dyn +multi_lang -mzscheme +netbeans_intg +ole -osfiletype\n+path_extra -perl +persistent_undo +postscript +printer +profile +python/dyn -python3 +quickfix +reltime +rightleft -ruby +scrollbind +signs +smartindent -sniff +startuptime +statusline -sun_workshop +syntax\n+tag_binary +tag_old_static -tag_any_white -tcl -tgetent -termresponse +textobjects +title +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace +wildignore +wildmenu\n+windows +writebackup -xfontset -xim -xterm_save -xpm_w32\n   system vimrc file: \"$VIM\\vimrc\"\n     user vimrc file: \"$HOME\\_vimrc\"\n 2nd user vimrc file: \"$VIM\\_vimrc\"\n      user exrc file: \"$HOME\\_exrc\"\n  2nd user exrc file: \"$VIM\\_exrc\"\n  system gvimrc file: \"$VIM\\gvimrc\"\n    user gvimrc file: \"$HOME\\_gvimrc\"\n2nd user gvimrc file: \"$VIM\\_gvimrc\"\n    system menu file: \"$VIMRUNTIME\\menu.vim\"\nCompilation: cl -c /W3 /nologo  -I. -Iproto -DHAVE_PATHDEF -DWIN32   -DFEAT_CSCOPE -DFEAT_NETBEANS_INTG      -DWINVER=0x0400 -D_WIN32_WINNT=0x0400  /Fo.\\ObjGOY/ /Ox /GL -DNDEBUG  /Zl /MT -DFEAT_OLE -DFEAT_MBYT\nE_IME -DDYNAMIC_IME -DFEAT_MBYTE -DFEAT_GUI_W32 -DDYNAMIC_ICONV -DDYNAMIC_GETTEXT -DFEAT_PYTHON -DDYNAMIC_PYTHON  -DDYNAMIC_PYTHON_DLL=\\\"python27.dll\\\" -DMSWINPS -DFEAT_HUGE /Fd.\\ObjGOY/ /Zi\nLinking: link /RELEASE /nologo /subsystem:windows /LTCG:STATUS oldnames.lib kernel32.lib advapi32.lib shell32.lib gdi32.lib  comdlg32.lib ole32.lib uuid.lib /machine:AMD64 /nodefaultlib gdi32.lib version.lib\n winspool.lib comctl32.lib advapi32.lib shell32.lib  /machine:AMD64 /nodefaultlib libcmt.lib oleaut32.lib  user32.lib      /nodefaultlib:python27.lib     WSock32.lib  /PDB:gvim.pdb -debug\n``` vim\nlet g:neocomplcache_enable_at_startup            = 1\nlet g:neocomplcache_enable_smart_case            = 1\nlet g:neocomplcache_enable_camel_case_completion = 1\nlet g:neocomplcache_enable_underbar_completion   = 1\nlet g:neocomplcache_min_syntax_length            = 2\nif !exists('g:neocomplcache_force_omni_patterns')\n  let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.c      = '[^.[:digit:] \\t]\\%(.\\|->)'\nlet g:neocomplcache_force_omni_patterns.cpp    = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w::'\nlet g:neocomplcache_force_omni_patterns.objc   = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w::'\nlet g:neocomplcache_force_omni_patterns.objcpp = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w*::'\ninoremap     pumvisible() ? \"\\\" : \"\\\"\ninoremap   pumvisible() ? \"\\\" : \"\\\"\n```\nDid you get the main point that there should be a candidate for the last word you are typing which is about to be hard-wrapped? I'll give an example once again. Create new vim script with the following in the 1st line:\nvim\n\" eirmod\nNow on some new line (does not matter which, just new) start typing:\nvim\n\" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\nThe next word we want to type is eirmod and it is going to be hard-wrapped to the next line automatically (if you have my 79 column limit), lets see what is going to happen:\nvim\n\" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy ei\nWe are still on this line because ei still fits it. At this point neocomplcache has to popup (according to my .vimrc) and it does, and theoretically it should just popup and neither highlight any candidate nor insert it (because this is how it is configured in .vimrc - it should be completely passive), however it inserts (for some unknown reason) the first candidate from its list. As we already have eirmod in our file - it will be a candidate (you can add more if you want - then it will choose one among them) that neocomplcache will insert. But eirmod does not fit the line width already and so it is hard-wrapped to the next line. In addition, ei that we've written is also there (I have no idea how - if it should have been replaced by neocomplcache when it automatically inserted eirmod instead - this is another \"subbug\" to look at). Long story short:\nvim\n\" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\n\" eirmodei\nI hope it was an exhaustive example.\n. My current .vimrc is on the Bitbucket repository. Concerning Vim's version, well, this is the only prebuilt 64-bit version for Windows that I found. I'll try to build myself today then.\n. I've built 64-bit variant of Vim 7.3.761 for Windows (64-bit) including support for both Python 2.7.3 and Python 3.2.3. Unfortunately, the bug still remains.\n. Just cloned neocomplcache again, and the bug still occurs. Note: it was not only textwidth, it was also setlocal formatoptions=c,r,q,a in ~/.vim/after/ftplugin/vim.vim.\n. Nope, fortunately, I didn't miss anything: :h fo-table:\nYou can use the 'formatoptions' option  to influence how Vim formats text.\n'formatoptions' is a string that can contain any of the letters below.  The\ndefault setting is \"tcq\".  You can separate the option letters with commas for\nreadability.\nRegarding the issue, alright I'll shrink my .vimrc to see how it goes, furthermore I'll try to leave your plugin as the only one, so that conflict scenarios are impossible. I'll report as soon as possible, but I am very skeptical that it can change anything.\n. As I thought nothing has changed, regardless of whether I shirked .vimrc or not because I know for sure that it is all about neocomplcache and not my configuration. Well, here you go the proof - minimal .vimrc:\n``` vim\nset nocompatible\nset fileformats=unix,dos\nif has('win32') || has('win64')\n  set runtimepath^=~/.vim\n  set runtimepath+=~/.vim/after\nendif\nset nolist\nset textwidth=79\nset magic\ncall pathogen#infect('plugins')\ncall pathogen#helptags()\nfiletype plugin indent on\nset colorcolumn=80\n\" -----------------------------------------------------------------------------\n\" \"neocomplcache\"\n\" -----------------------------------------------------------------------------\nlet g:neocomplcache_enable_at_startup            = 1\nlet g:neocomplcache_enable_smart_case            = 1\nlet g:neocomplcache_enable_camel_case_completion = 1\nlet g:neocomplcache_enable_underbar_completion   = 1\nlet g:neocomplcache_min_syntax_length            = 2\nif !exists('g:neocomplcache_force_omni_patterns')\n  let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_overwrite_completefunc = 1\nlet g:neocomplcache_force_omni_patterns.c      = '[^.[:digit:] \\t]\\%(.\\|->)'\nlet g:neocomplcache_force_omni_patterns.cpp    = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w::'\nlet g:neocomplcache_force_omni_patterns.objc   = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w::'\nlet g:neocomplcache_force_omni_patterns.objcpp = '[^.[:digit:] \\t]\\%(.\\|->)'\n    \\ . '\\|\\h\\w*::'\ninoremap     pumvisible() ? \"\\\" : \"\\\"\ninoremap   pumvisible() ? \"\\\" : \"\\\"\n```\nAnd of course ~/.vim/after/ftplugin/vim.vim:\n``` vim\nsetlocal tabstop=2\nsetlocal softtabstop=2\nsetlocal shiftwidth=2\nsetlocal expandtab\nlet g:vim_indent_cont = &shiftwidth * 2\nsetlocal formatoptions=c,r,q,a\n```\nThe bug is still there...\n. That's sad news...\nFirst of all, thank you all for your time on investigating and testing the issue. Secondly, one last thing I want to ascertain - all you who have tested - .vimrc is not the only piece of configuration here, ~/.vim/after/ftplugin/vim.vim from my last post is also very important (actually it is the one who defines formatoptions for Vim script) - didn't you forget to use it during testing, did you?\nHopefully, you didn't, but then I just can't find any reason why you were unable to reproduce the bug.\nThanks again, everyone.\n. So, do you confirm the issue? I've shown you this 'a' option several times before, but you never mentioned this recommendation, and said that you cannot reproduce it.\n. Finally I had a chance to test these new changes. I can also confirm too that the issue is resolved now - thank you very much for your effort Shougo! Best regards! :+1: \n. ",
    "twoquarterrican": "I have this problem.  I cannot have the 'a' flag in formatoptions for any file.  It causes the autoformatting function of vim to select an entry from neocomplcache's popup menu when I am typing close to the end of a line.  I am using gvim 7.3.762 on Windows 7.  part of my .vimrc:\n```\n     \" enable at startup\nlet g:neocomplcache_enable_at_startup = 1\n\" Plugin key-mappings.\nimap  (neocomplcache_snippets_expand)\nsmap  (neocomplcache_snippets_expand)\ninoremap      neocomplcache#undo_completion()\ninoremap      neocomplcache#complete_common_string()\n\" Recommended key-mappings.\n\" : close popup and save indent.\ninoremap   neocomplcache#smart_close_popup() . \"\\\"\n\" , : close popup and delete backword char.\ninoremap  neocomplcache#smart_close_popup().\"\\\"\ninoremap  neocomplcache#smart_close_popup().\"\\\"\ninoremap   neocomplcache#close_popup()\ninoremap   neocomplcache#cancel_popup()\n\"maximum number of candidates to show in a list\nlet g:neocomplcache_max_list=10\n```\n. ~/_vimrc:\nset nocompatible\nfiletype indent plugin on\nsyntax on\nset textwidth=78\n\"this fo option is usually set locally, but putting it here for simplicity\nset formatoptions+=a\nlet g:neocomplcache_enable_at_startup=1\n\njust to be sure, :scriptnames gives\n\n  1: C:\\Users\\_vimrc\n  2: C:\\Users\\\\tmp\\vim\\vim73\\filetype.vim\n  3: C:\\Users\\\\tmp\\vim\\vim73\\menu.vim\n  4: C:\\Users\\\\tmp\\vim\\vim73\\autoload\\paste.vim\n  5: C:\\Users\\\\tmp\\vim\\vim73\\ftplugin.vim\n  6: C:\\Users\\\\tmp\\vim\\vim73\\indent.vim\n  7: C:\\Users\\\\tmp\\vim\\vim73\\syntax\\syntax.vim\n  8: C:\\Users\\\\tmp\\vim\\vim73\\syntax\\synload.vim\n  9: C:\\Users\\\\tmp\\vim\\vim73\\syntax\\syncolor.vim\n 10: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache\\buffer_complete.vim\n 11: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache\\dictionary_complete.vim\n 12: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache\\include_complete.vim\n 13: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache\\syntax_complete.vim\n 14: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache\\tags_complete.vim\n 15: C:\\Users\\\\tmp\\vim\\vimfiles\\plugin\\neocomplcache.vim\n 16: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\getscriptPlugin.vim\n 17: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\gzip.vim\n 18: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\matchparen.vim\n 19: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\netrwPlugin.vim\n 20: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\rrhelper.vim\n 21: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\spellfile.vim\n 22: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\tarPlugin.vim\n 23: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\tohtml.vim\n 24: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\vimballPlugin.vim\n 25: C:\\Users\\\\tmp\\vim\\vim73\\plugin\\zipPlugin.vim\n 26: C:\\Users\\\\tmp\\vim\\vimfiles\\autoload\\neocomplcache.vim\n\nNow, do :e test.vim\nThe problem was not there on files where indent was not on, this is why I chose a .vim file\nIn that vein, problem is only there on indented lines.  Type the following out, the text is explaining what I am seeing as I am typing it.\n\" this is a line\n    \"this is an indented line.  It goes all the way to the end of the\n    \"scriptnames.txtscreen.  I never typed scriptnames.txt, it appeared\n    \"when the word 'screen' got to the end of the line.  However, the word\n    \"'when' on the line above had no problems.  Also, the problem does not\n    \"seem to exist on lines which are not indented.  I am typing more here\n    \"to see if I get another example.  So far, neocomplcache has only\n    \"autoloadautomatically chosen an autocomplete without me choosing\n    \"uninstal.exeuntil just now.  Oh look it did it again.  Both\n    \"'autocompleteautoload' and 'uninstal.exe' I did not type.  I think it\n    \"happens more when there are more words in the cache.  I think the\n    \"\n    \"I just entered the command :set fo-=a, now the problem is not there\n    \"automatic completion does not happen when the 'a' flag is not set in\n    \"the fo options\n\nAs explained in the text above, lines 3, 8, 9, 10 have weird words in them.  These were options on the neocomplcache popup menu which were automatically chosen by vim when I reached the end of the line.\n. Excellent, seems to be working just fine now!\n. ",
    "pablox-cl": "I'm sorry. I didn't read that part =/. In fact, in this case was the  endwise plugin. With that code it works (or at least, the wrong behaviour dissapears).\nI'm closing this issue.\n. ",
    "supermomonga": "I think it depends on the machine power.\nSee this. https://github.com/Shougo/neocomplcache/issues/216\nI also think we should use those options if we feel the not enough performance.\nneocomplcache_max_list\nneocomplcache_auto_completion_start_length\nneocomplcache_manual_completion_start_length\n. Why do you set 100? You need to type at least 100 chars to find completion.\nFirst, could you tell me which way do you want to complete manual or auto?\n. Rsense\u304c\u6b63\u5e38\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u3066\u307f\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n~/dotfiles/.vim/bundle/rsense-0.3/bin/rsense version\ncat ~/.rsense\n. :setfiletype ruby\n\u3068\u3057\u3066\u304b\u3089\u30aa\u30e0\u30cb\u88dc\u5b8c\uff08C-x C-o\uff09\u3092\u8a66\u3057\u3066\u307f\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u305d\u306e\u72b6\u614b\u3067\n:set omnifunc?\n\u3068\u3059\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n. .vimrc\u3092\u3088\u304f\u89b3\u305f\u3089\u3001rsense.vim\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\nC-x C-o\u3067\u30aa\u30e0\u30cb\u88dc\u5b8c\uff08 RSenseCompleteFunction \uff09\u3057\u305f\u3044\u5834\u5408\u306f\u3001\n\u5225\u9014rsense.vim\u3092\u5c0e\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nNeoBundle 'taichouchou2/vim-rsense'\n\u305f\u3060\u3001Shougo\u3055\u3093\u306e\u8a00\u3046\u3068\u304a\u308a\u3001neocomplcache\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u88dc\u5b8c\u3055\u305b\u308b\u306a\u3089\nrsense.vim\u3092\u5c0e\u5165\u3059\u308b\u3088\u308a\u3001\u76f4\u63a5neocomplcache-rsense\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n. neocomplcache\u3067\u88dc\u5b8c\u3055\u308c\u306a\u3044\u3068\u306f\u3001\u3082\u3046\u5c11\u3057\u5177\u4f53\u7684\u306b\u306f\u3069\u3046\u3044\u3046\u72b6\u6cc1\u3067\u3057\u3087\u3046\u304b\uff1f\n. hoge.rb\u306e\u30d0\u30c3\u30d5\u30a1\u3067\n:set completefunc?\n\u3068\u3059\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n\n\u901a\u5e38\u3067\u3057\u305f\u3089\u3053\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u88dc\u5b8c\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3088\u306d\u3002\u3002\u3002\uff1f\uff1e\uff1c\n\n\u306f\u3044\u3002\u305f\u3060\u305d\u306e\u52d5\u753b\u306fEmacs\u306eauto-complete.el\u306a\u306e\u3067\u3001Vim\u306eneocomplcache\u3068\u306f\u6319\u52d5\u304c\u7570\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n. ",
    "eagletmt": "Thanks!\n. ",
    "mjakl": "Thanks, I tried it on another computer with the same Vim version, but an older Neocomplcahe Version (dbeec93), it's working fine with that version (and stopped working after upgrading to 0cbcac0).\nI did a git bisect and identified the offending commit:\n82c65ac24d7d8076d8b75c871680dffb3dcc47aa is the first bad commit (from 2012-12-08)\n- Refactored script variables.\n. Here are the relevant parts of my .vimrc:\n```\nlet g:acp_enableAtStartup = 0\nlet g:neocomplcache_enable_at_startup = 1\nlet g:neocomplcache_disable_auto_complete = 1\nlet g:neocomplcache_enable_insert_char_pre = 1\nlet g:neocomplcache_enable_smart_case = 1\nlet g:neocomplcache_enable_camel_case_completion = 0\nlet g:neocomplcache_enable_underbar_completion = 0\nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete\nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\nsetlocal omnifunc=syntaxcomplete#Complete\ninoremap   pumvisible() ? neocomplcache#smart_close_popup() : \"\\\"\ninoremap  neocomplcache#smart_close_popup().\"\\\"\n```\n. Hmm, strange.\nDid you try it twice in the same line for different words?\nI'll try to get a better understanding and disable every other plugin I'm using, probably it's a conflict with another plugin (introduced with the refactoring commit).\n. I can reproduce it with these Steps:\n- Open a new file in gVim\n- Type a sentence like this: \"Neocomplcache is pretty awesome!\"\n- On a new Line enter \"Neo<C-x><C-u> is pretty awe<C-x><C-u>\"\nWith the older version of neocomplcache I get the correct completion of both words (\"Neocomplcache\" and \"awesome\"), with the current HEAD, the second completion deletes the line back to \"Neocomplcache\".\nThe console vim works as expected, the problem is only with gvim.\nMy .gvimrc does not change anything of importance:\n```\n\" Smooth fonts\nset antialias\n\" remove toolbar\nset go-=T\n\" different cursor-colors for different modes\nhighlight Cursor   guifg=white  guibg=red\nhighlight iCursor  guifg=white  guibg=steelblue\n\" Set a nice font:\nset gfn=Inconsolata\\ Medium\\ 13\n\" Use the solarized colorscheme\ncolorscheme solarized\n```\nThanks!\n. Thank you! It works for me too!\n. ",
    "sddhrthrt": "It is indeed fixed, thank you.\nOn Thu, Dec 20, 2012 at 8:22 AM, Shougo notifications@github.com wrote:\n\nWould you update neocomplcache?\nIn latest version, it is fixed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/345#issuecomment-11558505.\n. \n",
    "kuukunen": "I had this thing.\nWas fixed by removing the old version of neocomplcache-snippets-complete I had lying around.\n. ",
    "creati5": "This happens on my Ubuntu Server 12.10. Actually it happens with any line when input backspace by hand.\nBut if the line begins with space, the error doesn't disappear.\nP.S. I using Putty to connect my Server.\n[\u6211\u7528ubuntu server 12.10, \u5728win7\u4e0b\u7528putty\u8fde\u63a5Server\uff0c\u5982\u679c\u624b\u52a8\u56de\u8f66\uff0c\u4f1a\u53d1\u751f\u5982\u4e0a\u9519\u8bef\u3002\u4f46\u662f\u5982\u679c\u884c\u9996\u6709\u7a7a\u683c\u7684\u8bdd\uff0c\u5219\u6ca1\u6709\u9519\u8bef]\n. I have no idea. I found that if the line begin with space, the error disappears.\n. ",
    "rkumar": "Yes, i have the problem on backspace also. Is there no fix to the problem? I was checking the snippets to see if it was triggered by some snippet but there's no snippet for .txt files. I am on a desktop (OSX ML zsh 5.0.x inside tmux).\n. I've made a change to the line as per the commit mentioned and the error has stopped. Thanks for the immed resolution. Domo Arigatou Gozaimasu and a very happy new year to you all.\n. I notice I also need to press ENTER twice. I am not clear on what customizations spf13 does to neocomplcache, just wondering if you all use this plugin in vanilla form, or with a lot of customizations ?\n. Thanks. I will remove the settings and try. I am closing this issue since it is not an issue with this plugin. Would appreciate if you could share your settings for neo from your .vimrc.  \nI don't like spf13 either, it somehow messed things ups, ... but my snippets have stopped working after I reverted to my old environment (pathogen based), so i came back to spf13 just for the snippets. Anyway, ...\n. On Sat, Jan 12, 2013 at 11:59 AM, Shougo notifications@github.com wrote:\n\nI think you should install plugins manually. I recommend using neobundle(\nhttps://github.com/Shougo/neobundle.vim).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/350#issuecomment-12174451.\n\nI have now installed neocomplcache outside of spf13 in my old vimrc and it\nruns fine. I don't know what spf13 was doing with it.\nThanks.\nbtw, how is neobundle different from Vundle ?\n. The keymappings added by spf13 to this plugin were making it very painful to use. I don't know how other users are managing esp the problem where it goes back to INSERT mode after one escape. Maybe you can send a mail to the maintainer of spf13 to fix the mappings (since spf13 got a lot of attention on Hacker News and his mappings reflect badly on this plugin.)\n. On Thu, Jan 31, 2013 at 12:58 PM, Yu Yuankai notifications@github.comwrote:\n\nI'm have the same problem too. And I'm not using the spf13 nor the\nmapping. The behaviour is just the same as described by @rkumarhttps://github.com/rkumar. I think there may be some conflict with other scripts? As you may\nconcern, I use these submodules\nhttps://github.com/yyk/vimsettings-2013/blob/master/.gitmodules\nI'm trying to solve the problem too.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/350#issuecomment-12930922.\n\nI find I still have to press Enter two times at times. Let us say I am\ntyping \"fi\" to close a block in shell script. neo will pop up various\ncompletions, but i ignore the completions. Now I should only press ENTER\nonce to go to next line, but since neo did show me some options, i need to\npress ENTER 2 times, Or I press a SPACE and then backspace to clear the\nspace.\nHowever, it is still much better than SPF13 which was behaving very badly\nwith it's settings.\n. On Fri, Feb 1, 2013 at 10:42 PM, Yu Yuankai notifications@github.comwrote:\n\nI finally found my problem is caused by the autoclose script. After\nremoving it, everything works well. Just FYI.\nhttps://github.com/Townk/vim-autoclose\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/350#issuecomment-13003598.\n\nStrange, I am not using vim-autoclose. In fact, when  I tried spf13,\nautoclose was the first thing i had to deactivate since it tried to close\nstrings (and brackets) when i tried to enclose an existing string.\n. ",
    "gilligan": "I get the same error whenever I hit  in MacVim , and on  in vim on the terminal\n. 2012-12-31 34edf3a (origin/master, origin/HEAD) - Improved skip autocomplete.\nThis commit breaks it. As a quick fix you can just locally revert it or checkout the previous commit. Shougo can you look into this? :)\n. ",
    "take": "\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u65e9\u901f\u8a66\u3057\u3066\u307f\u307e\u3059\n. \u51fa\u6765\u307e\u3057\u305f\uff01\u7d20\u65e9\u3044\u5bfe\u5fdc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u301c\uff01\n. \u3082\u3061\u308d\u3093\u3057\u3066\u307e\u3059\uff01 => https://github.com/Takehiro-Adachi/dotfiles/blob/master/.vim/config/.vimrc.neobundle#L154\n\u4f7f\u7528\u3057\u3066\u3066\u3082\u3053\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3093\u3067\u3059\u304c\u4f55\u304b\u3042\u308a\u305d\u3046\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\uff1e\uff1c\n. @supermomonga \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\u8a66\u3057\u3066\u307f\u305f\u7d50\u679c\u3001\u6b63\u5e38\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\u3002\u3002\n[15:50:18] Takehiro:dotfiles git:(master) $ ~/dotfiles/.vim/bundle/rsense-0.3/bin/rsense version\nRSense 0.3\n[15:50:23] Takehiro:dotfiles git:(master) $ cat ~/.rsense\nhome = /Users/Takehiro/dotfiles/.vim/bundle/rsense-0.3\nload-path = /Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/site_ruby/1.9.1:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/site_ruby/1.9.1/x86_64-darwin12.2.0:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/site_ruby:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/vendor_ruby/1.9.1:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/vendor_ruby/1.9.1/x86_64-darwin12.2.0:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/vendor_ruby:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/1.9.1:/Users/Takehiro/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/1.9.1/x86_64-darwin12.2.0\ngem-path = /Users/Takehiro/.rvm/gems/ruby-1.9.3-p327:/Users/Takehiro/.rvm/gems/ruby-1.9.3-p327@global\n. @supermomonga\n\u8fd4\u4fe1\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\n:setfiletype ruby\n\u3068\u3057\u3066\u304b\u3089\u30aa\u30e0\u30cb\u88dc\u5b8c\uff08C-x C-o\uff09\u3092\u8a66\u3057\u3066\u307f\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u540c\u3058\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u3002\n\n:set omnifunc?\n\u3068\u3059\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n\nomnifunc= \u3068\u51fa\u529b\u3055\u308c\u307e\u3057\u305f :( \n. @supermomonga\n\n.vimrc\u3092\u3088\u304f\u89b3\u305f\u3089\u3001rsense.vim\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\nC-x C-o\u3067\u30aa\u30e0\u30cb\u88dc\u5b8c\uff08 RSenseCompleteFunction \uff09\u3057\u305f\u3044\u5834\u5408\u306f\u3001\n\u5225\u9014rsense.vim\u3092\u5c0e\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059\uff01C-x C-o\u3067\u88dc\u5b8c\u3055\u305b\u305f\u304b\u3063\u305f\u3089rsense.vim\u306e\u5c0e\u5165\u304c\u5fc5\u8981\u306a\u3093\u3067\u3059\u306d\u3002\u3002\u3002\uff01\u308f\u3056\u308f\u3056\u898b\u3066\u3044\u305f\u3060\u3044\u3066\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\uff1e\uff1c\n\n\u305f\u3060\u3001Shougo\u3055\u3093\u306e\u8a00\u3046\u3068\u304a\u308a\u3001neocomplcache\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u88dc\u5b8c\u3055\u305b\u308b\u306a\u3089\nrsense.vim\u3092\u5c0e\u5165\u3059\u308b\u3088\u308a\u3001\u76f4\u63a5neocomplcache-rsense\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nneocomplecache-rsense\u3092\u5165\u308c\u3066\nlet g:neocomplcache#sources#rsense#home_directory = neobundle#get_neobundle_dir() . '/rsense-0.3'\n\u3082\u8a2d\u5b9a\u3057\u3066\u3042\u308b\u3093\u3067\u3059\u304cneocomplcache\u3067\u88dc\u5b8c\u3055\u308c\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\u3002\u3002orz\n. @supermomonga\nhoge.rb\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\n1.\n\u3068\u6253\u3061\u8fbc\u3093\u3067\u3082neocomplecache\u306e\u4e88\u6e2c\u88dc\u5b8c\u304c\u51fa\u306a\u3044\u3002\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3059\u3002\u3002\uff01\n\u901a\u5e38\u3067\u3057\u305f\u3089\u3053\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u88dc\u5b8c\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3088\u306d\u3002\u3002\u3002\uff1f\uff1e\uff1c\n. @supermomonga\n\nhoge.rb\u306e\u30d0\u30c3\u30d5\u30a1\u3067\n:set completefunc?\n\u3068\u3059\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n\nhoge.rb\u3092\u958b\u3044\u305f\u77ac\u9593\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\ncompletefunc=\n\u3067\u3057\u3066\u3001\n1.\u7b49\u3092\u5165\u529b\u3057\u305f\u5f8c\u30b3\u30de\u30f3\u30c9\u3092\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3068\ncompletefunc=neocomplcache#auto_complete\n\u3068\u306a\u308a\u307e\u3057\u305f..!\n\n\u306f\u3044\u3002\u305f\u3060\u305d\u306e\u52d5\u753b\u306fEmacs\u306eauto-complete.el\u306a\u306e\u3067\u3001Vim\u306eneocomplcache\u3068\u306f\u6319\u52d5\u304c\u7570\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059...\uff01\u3061\u306a\u307f\u306b\u73fe\u72b6css\u306eomnifunc\u306f\u3053\u306e\u3088\u3046\u306b\u52d5\u3044\u3066\u3044\u307e\u3059\n\n. @Shougo \n\u30b3\u30e1\u30f3\u30c8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u3002\u3002\uff01\n\n\u305d\u3046\u3044\u3046\u6319\u52d5\u3092\u3059\u308b\u306e\u306fneocomplcache\u304c\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u305f\u3081\u3067\u3001\u6b63\u5e38\u3067\u3059\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059\u3002\u3002\uff01\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\nvimproc\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u306f\uff1f neocomplcache-rsense\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n:echo neocomplcache#sources#rsense#define()\u3092\u3084\u3063\u3066\u307f\u3066\u3001\u7a7a({})\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u306fneocomplcache-rsense\u304c\u52d5\u4f5c\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u591a\u5206\u3053\u308c\u304c\u539f\u56e0\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nvimproc\u306e\u65b9\u306fVimShell\u304c\u901a\u5e38\u306b\u52d5\u4f5c\u3057\u3066\u308b\u306e\u3067\u5165\u3063\u3066\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n:echo neocomplcache#sources#rsense#define()\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3001\n{'get_keyword_pos': function('625'), 'name': 'rsense', 'initialize': function('624'), 'kind': 'ftplugin', 'get_complete_words': function('626'), 'filetypes': {'ruby': 1}}\n\u3068\u51fa\u529b\u3055\u308c\u307e\u3057\u305f...!\n\u3068\u3044\u3046\u3053\u3068\u306fneocomplcache-rsense\u307e\u3067\u306f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304c\u3001\u6700\u5f8c\u306e\u8868\u793a\u304c\u3046\u307e\u304f\u3044\u3063\u3066\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u3093\u3067\u3059\u304b\u306d\u3002\u3002\u3002\uff1f\n\u3053\u3053\u306b\n\nneocomplcache\u306e\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u306f\u3001\u305d\u306e\u901a\u308a\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u4e00\u5ea6\u8a2d\u5b9a\u306e\u5909\u6570\u3092\u51fa\u6765\u308b\u9650\u308a\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u76f4\u3057\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3068\u66f8\u3044\u3066\u308b\u306e\u3067\u4e00\u5ea6\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u8fd1\u3044\u72b6\u614b\u3067\u8a66\u3057\u3066\u3044\u307e\u3059\n. \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8fd1\u3044\u72b6\u614b\u3067\u8a66\u3057\u307e\u3057\u305f\u304c\u3001\u7d50\u679c\u306f\u540c\u3058\u3067\u3057\u305f\u3002\u3002\u3002orz https://github.com/Takehiro-Adachi/dotfiles/commit/a618278352fa4890636b1c10cf371da2e50682f1\n. @Shougo \n\n\u3042\u3068\u306f\u3001neocomplcache-rsense\u304cneocomplcache\u306b\u8a8d\u8b58\u3055\u308c\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n:echo neocomplcache#avaiable_ftplugins()\u3067rsense source\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304b\uff1f\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b rsense \u306f\u3042\u308b\u3063\u307d\u3044\u306e\u3067\u3059\u304c\u3053\u308c\u306fneocomplecache-rsense\u304c\u8a8d\u8b58\u3055\u308c\u3066\u3044\u308b\u72b6\u614b\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n{'vim_complete': {'get_keyword_pos': function('668'), 'name': 'vim_complete', 'initialize': function('666'), 'loaded': 0, 'kind': 'ftplugin', 'get_complete_words': function('669'), 'finalize':\nfunction('667'), 'filetypes': {'vim': 1}}, 'vimshell_complete': {'get_keyword_pos': function('677'), 'name': 'vimshell_complete', 'initialize': function('676'), 'loaded': 0, 'kind': 'ftplugin',\n 'get_complete_words': function('678'), 'filetypes': {'vimshell': 1}}, 'rsense': {'get_keyword_pos': function('680'), 'name': 'rsense', 'initialize': function('679'), 'loaded': 1, 'kind': 'ftpl\nugin', 'get_complete_words': function('681'), 'filetypes': {'ruby': 1}}, 'ruby': {'get_keyword_pos': function('674'), 'name': 'ruby', 'initialize': function('673'), 'loaded': 1, 'kind': 'ftplug\nin', 'get_complete_words': function('675'), 'filetypes': {'ruby': 1}}}\n\n\u8868\u793a\u3055\u308c\u308b\u306a\u3089\u3001rsense source\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3093\u3067\u307f\u3066\u3001\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3059\u307f\u307e\u305b\u3093\u3001\u3053\u308c\u306fbin/rsense\u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ed5\u8fbc\u3080\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n``` ruby\n!/usr/bin/env ruby\nrequire 'optparse'\nrequire 'stringio'\nrequire 'socket'\nrequire 'shellwords'\nrequire 'pathname'\nprint 'hoge'\ndef Shellwords.unshellwords(array)\n  array.map {|elt| elt.index(/\\s/) ? \"\\\"#{elt.gsub(/([\\\"\\$])/, '\\1')}\\\"\" : elt}.join(' ')\nend\nwin32-deamon class\nmodule Win32\n  class Daemon\n    def self.set_proc(proc)\n      @@proc = proc\n...\n```\n\u8272\u3005\u3068\u8cea\u554f\u7b54\u3048\u3066\u3044\u305f\u3060\u3044\u3066\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u3002\u3002\n. @Shougo \n\n\u52d5\u3044\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u4e86\u89e3\u3067\u3059\n\n\u3042\u30fc\u3001\u305d\u3046\u3060\u3002neocmplcache-rsense\u306frsense\u306e\u89e3\u6790\u304c\u3042\u307e\u308a\u65e9\u304f\u306a\u3044\u306e\u3067\nlet g:neocomplcache_skip_auto_completion_time = '0.6'\n\u3068\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3002\u5024\u306f\u74b0\u5883\u306b\u3088\u308a\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\n\nautoload/neocomplcache/sources/rsense.vim\u306es:source.get_complete_words()\u304c\u4f55\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u304b\n:echomsg string(candidates)\u3067\u8abf\u3079\u3066\u4e0b\u3055\u3044\u3002return\u306e\u76f4\u524d\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u5019\u88dc\u304c\u51fa\u3066\u3044\u308c\u3070\u3001\u5358\u7d14\u306b\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059\uff01\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\n``` vimL\nfunction! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)\"{{{\n  let temp = s:get_temp_name()\nechomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u308b\ntry\nechomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u308b\n\nlet args = [\n      \\ 'ruby', s:get_rsense_command(),\n      \\ 'code-completion', '--detect-project=' . bufname('%')] +\n      \\ s:get_rsense_current_buffer_option(temp)\ncall add(args, '--prefix=' . a:cur_keyword_str)\ncall map(args, \"neocomplcache#util#iconv(v:val, &encoding, 'char')\")\n\n\" Async completion.\nlet process = vimproc#popen2(args)\nlet result = []\nwhile !process.stdout.eof\n  echomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u308b\n\n  let result += process.stdout.read_lines(-1, 100)\n\n  echomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u306a\u3044\n\n  if neocomplcache#complete_check()\n    call process.waitpid()\n    return []\n  endif\nendwhile\n\ncall process.waitpid()\n\ncall map(result, \"neocomplcache#util#iconv(v:val, 'char', &encoding)\")\n\nfinally\n    if filereadable(temp)\n      call delete(temp)\n    endif\n  endtry\nlet candidates = []\n  let kin...\n...\nreturn candidates\nendfunction\"}}}\n```\n\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3057\u305f\u3002\n\n:echomsg string(candidates)\u3067\u8abf\u3079\u3066\u4e0b\u3055\u3044\u3002return\u306e\u76f4\u524d\u3067\u3059\u306d\u3002\n\n\u306f\u4f55\u3082\u51fa\u529b\u3055\u308c\u305a\u3067\u3057\u305f\u3002\nlet result += process.stdout.read_lines(-1, 100)\n\u306b\u539f\u56e0\u304c\u6709\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3059\u304c\u3053\u308c\u306f\u3069\u3046\u3044\u3063\u305f\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u611f\u3058\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n. @Shougo \n\u8fd4\u4fe1\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\n\nif neocomplcache#complete_check()\n\n\u306e\u4e2d\u306b\u6765\u3066\u3044\u306a\u3044\u304b\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002\u3042\u3068\u306f\u3001:mes\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3001\u3068\u304b\u304b\u306a\u3002\n\n\u306e\u4e2d\u306b\u306f echomsg string('hoge') \u3067\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u304d\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n:mes \u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308b\u3060\u3051\u3067\u3057\u305f\u3002\u30a8\u30e9\u30fc\u767a\u751f\u3082\u3057\u3066\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\n\n\n\nlet result += process.stdout.read_lines(-1, 100)\n\n\u3053\u308c\u306fvimproc\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u3068\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u30d7\u30ed\u30bb\u30b9(rsense)\u306e\u51fa\u529b\u3092\u3068\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n100\u3068\u3044\u3046\u306e\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5024\u306a\u306e\u3067\u3001\u3053\u306e\u5024\u3092\u5897\u3084\u3059\u3068\u5019\u88dc\u304c\u8868\u793a\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001\n\n\u306a\u308b\u307b\u3069\u3067\u3059\u3002\u3002\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u502410000\u306b\u3057\u3066\u3082\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\n\nechomsg string('hoge') \" => \u51fa\u529b\u3055\u308c\u306a\u3044\n\u3053\u308c\u304c\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u306f\u4e0d\u601d\u8b70\u3060\u306a\u3041\u3002\u4f55\u304b\u4f8b\u5916\u3092\u6295\u3052\u3066\u3044\u308b\u306a\u3089\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u2026\u2026\u3002\n\nlet result += process.stdout.read_lines(-1, 100)\n\u4ee5\u964d\u306eechomsg\u304c\u51fa\u529b\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u30d7\u30ed\u30bb\u30b9(rsense)\u306e\u51fa\u529b\u3092\u3068\u3063\u3066\u304f\u308b\u51e6\u7406\u304c\u4f55\u304b\u3057\u3089\u306e\u7406\u7531\u3067\u6b62\u307e\u3063\u3066\u308b\u3068\u3044\u3046\u8a8d\u8b58\u304c\u3042\u3063\u3066\u308b\u304d\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u3067\u3059\u304b\u306d\u3001\u3001\u3001\uff1f\n. @Shougo \n\n\u3053\u308c\u304c\u52b9\u679c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001Vim\u3092\u6700\u65b0\u7248\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u52b9\u679c\u306a\u3057\u3067\u3057\u305f\u3002\u3002\u3002\n\nrsense\u3092vimshell\u3067\u52d5\u304b\u3057\u3066\u307f\u3066\u3001\u88dc\u5b8c\u5019\u88dc\u304c\u51fa\u308b\u304b\u8abf\u67fb\u3067\u304d\u307e\u3059\u304b\uff1f\nvimshell\u306a\u3089\u540c\u3058\u6319\u52d5\u3092\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059\uff01\u3059\u307f\u307e\u305b\u3093\u304crsense\u306f\u3069\u3046\u3084\u3063\u305f\u3089vimshell\u3067\u52d5\u304b\u305b\u308b\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\uff1e\uff1c\n. @Shougo \n\nneocomplcache-rsense\u3067rsense\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308bvimproc#popen2()\u306e\u5f15\u6570\u3092\u8abf\u3079\u308c\u3070\u3088\u3044\u3067\u3059\u3002\u540c\u3058\u5f15\u6570\u3092\u4e0e\u3048\u308c\u3070\u826f\u3044\u306f\u305a\u3002\n\n\u306a\u308b\u307b\u3069\u3067\u3059\uff01\n\u5f15\u6570\u3092echo\u3057\u305f\u3068\u3053\u308d\n['ruby', '/Users/Takehiro/dotfiles/.vim/bundle/rsense-0.3/bin/rsense', 'code-completion', '--detect-project=hoge.rb', '--file=/var/folders/1c/025l_w_52n90qdq48psqj7f80000gn/T/vTzT6uq/6', '--lo\ncation=3:6', '--prefix=']\n\u3060\u3063\u305f\u306e\u3067\u3001\nVimShell\u3067\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bJava\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f.... :O \n\n. Java\u306e\u30b9\u30ec\u30c3\u30c9\u95a2\u9023\u306e\u30a8\u30e9\u30fc\u306e\u3088\u3046\u3067\u3001\u3061\u3087\u3063\u3068\u8abf\u3079\u3066\u307f\u307e\u3059\u3002\u3002\u3002\n. \u3055\u3063\u304d\u306e\u30a8\u30e9\u30fc\u306ftmp file\u3092--file\u306b\u6307\u5b9a\u3057\u3066\u305f\u3060\u304b\u3089\u306e\u3088\u3046\u3067\u3057\u305f\u3002\nbash\n$ ./rsense code-completion --detect-project=hoge.rb --file=/Users/Takehiro/Desktop/hoge.rb --location=3:6 --prefix=\n\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u88dc\u5b8c\u5019\u88dc\u3089\u3057\u304d\u3082\u306e\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\n``` bash\n61 $ ./rsense code-completion --detect-project=hoge.rb --file=/Users/Takehiro/Desktop/hoge.rb --location=3:6 --prefix=\n 62 completion: to_enum Object#to_enum Object METHOD\n 63 completion: instance_variable_defined? Object#instance_variable_defined? Object METHOD\n 64 completion: untaint Object#untaint Object METHOD\n 65 completion: public_methods Object#public_methods Object METHOD\n 66 completion: equal? Object#equal? Object METHOD\n 67 completion: abs Fixnum#abs Fixnum METHOD\n 68 completion: _dump Object#_dump Object METHOD\n 69 completion: instance_eval Object#instance_eval Object METHOD\n 70 completion:  Integer# Integer METHOD\n 71 completion: clone Fixnum#clone Fixnum METHOD\n 72 completion: & Integer#& Integer METHOD\n 73 completion: divmod Fixnum#divmod Fixnum METHOD\n 74 completion: % Integer#% Integer METHOD\n 75 completion: * Integer#* Integer METHOD\n 76 completion: +@ Fixnum#+@ Fixnum METHOD\n 77 completion: + Integer#+ Integer METHOD\n 78 completion: singleton_methods Object#singleton_methods Object METHOD\n 79 completion: / Integer#/ Integer METHOD\n 80 completion: - Integer#- Integer METHOD\n 81 completion: floor Fixnum#floor Fixnum METHOD\n 82 completion: truncate Fixnum#truncate Fixnum METHOD\n 83 completion: id Object#id Object METHOD\n....\n144 completion: >= Numeric#>= Numeric METHOD\n145 completion: prec_i Precision#prec_i Precision METHOD\n146 completion: marshal_load Object#marshal_load Object METHOD\n147 completion: quo Fixnum#quo Fixnum METHOD\n148 completion: id Object#id Object METHOD\n149 completion: == Numeric#== Numeric METHOD\n150 completion: to_sym Fixnum#to_sym Fixnum METHOD\n151 completion: -@ Fixnum#-@ Fixnum METHOD\n152 completion: extend Object#extend Object METHOD\n153 completion: even? Integer#even? Integer METHOD\n154 completion: between? Numeric#between? Numeric METHOD\n155 completion: upto Integer#upto Integer METHOD\n156 completion: protected_methods Object#protected_methods Object METHOD\n157 completion: nil? Object#nil? Object METHOD\n158 completion: <= Numeric#<= Numeric METHOD\n159 completion: freeze Object#freeze Object METHOD\n160 completion: marshal_dump Object#marshal_dump Object METHOD\n161 completion: is_a? Object#is_a? Object METHOD\n162 completion: eql? Fixnum#eql? Fixnum METHOD\n163 completion: step Fixnum#step Fixnum METHOD\n```\n. \u3061\u306a\u307f\u306bVimShell\u3058\u3083\u306a\u304f\u3066\u901a\u5e38\u306ezsh\u3067\u3082\u540c\u3058\u7d50\u679c\u3067\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\u3002\u3002\uff01\n. @Shougo \nfunction! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)\n\u3067\n```\n  ...\necho canditates\n  return candidates\nendfunction\"}}}\n```\n\u3057\u305f\u3089\u4e88\u6e2c\u5909\u63db\u5185\u5bb9\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002echomsg\u3060\u3068\u51fa\u529b\u3055\u308c\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3002\u3002\u3002echo\u306a\u3089\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\ncandidates\u304c\u3061\u3083\u3093\u3068\u5185\u5bb9\u3092return\u3057\u3066\u308b\u3088\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u3042\u3068canditates\u3063\u3066\u3069\u3053\u306b\u884c\u304f\u306e\u3067\u3057\u3087\u3046\u304b\u3001\u3001\u3001\uff1f\n. \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u88dc\u5b8c\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\u3002!\n\u3053\u308c\u304comni\u88dc\u5b8c\u3067\u3059\u3088\u306d\u3002\u3002\u3002(\uff9f\u2200\uff9f)\uff1fcss\u7b49omni\u88dc\u5b8c\u306e[O]\u3068\u306f\u3061\u304c\u3063\u3066[R]\u306a\u3093\u3067\u3059\u306d\n\u3061\u306a\u307f\u306b\u539f\u56e0\u89e3\u6c7a\u306f\u7d50\u5c40\u3053\u308c\u3067\u3044\u3051\u307e\u3057\u305f\u3000\u2192\u3000http://qiita.com/items/f70c774c43422ab128c3\n\u305d\u3082\u305d\u3082rsense\u304c\u3046\u307e\u304f\u52d5\u3044\u3066\u306a\u304b\u3063\u305f\u306e\u304b\u306a\u3002\u3002\uff1f\n\u304a\u6642\u9593\u5272\u3044\u3066\u3044\u305f\u3060\u304d\u5927\u5909\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\u3002\u3002 /cc @Shougo @supermomonga\n\u6069\u8fd4\u3057\u3068\u8a00\u3063\u3066\u306f\u306a\u3093\u3067\u3059\u304cvim script\u529b\u306f\u7121\u3044\u306e\u3067\u3059\u304c\u82f1\u8a9e\u529b\u306f\u591a\u5c11\u3042\u308b\u306e\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u82f1\u8a33\u7b49\u306b\u8ca2\u732e\u51fa\u6765\u308c\u3070\u3068\u601d\u3044\u307e\u3059\n\n. > autoload/neocomplcache.vim\u306e\u4e2d\u3067get_complete_words()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u8abf\u3079\u308c\u3070\u89e3\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u5404source\u306e\u5019\u88dc\u306f\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u306a\u308b\u307b\u3069\u3067\u3059\uff01\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\n. > \u3042\u3042\u3001\u4e8c\u91cd\u8d77\u52d5\u3067\u5f15\u3063\u304b\u304b\u3063\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u2026\u2026\u3002\u4e86\u89e3\u3067\u3059\u3002\n\u306a\u308b\u307b\u3069\u30012\u91cd\u8d77\u52d5\u3057\u305f\u3068\u304d\u3001\u3053\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3093\u3067\u3059\u306d\u3002\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u306a\u304b\u306a\u304b\u624b\u304c\u56de\u3089\u306a\u3044\u306e\u3067\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\u4eca\u56de\u306e\u30a8\u30e9\u30fc\u3082\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u88dc\u8db3\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3055\u3063\u305d\u304fneocomplcache-rsense\u306e\u65b9\u306bPR\u9001\u3089\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u30fc\uff01\n\u89e3\u6c7a\u3057\u305f\u306e\u3067Close\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\n. ref #356 \n. ",
    "mightyguava": "For future reference, I narrowed this down to the following line in the Omnicomplete plugin settings in spf13.\ninoremap <expr> <Esc>      pumvisible() ? \"\\<C-e>\" : \"\\<Esc>\"\n. Yeah, it's a spf13 keymapping, but it's a binding added specifically for use with Omnicomplete, active even when you don't use Omnicomplete...\n. ",
    "yyk": "I'm having the same problem too. And I'm not using the spf13 nor the mapping. The behaviour is just the same as described by @rkumar  . I think there may be some conflict with other scripts? As you may concern, I use these submodules https://github.com/yyk/vimsettings-2013/blob/master/.gitmodules\nI'm trying to solve the problem too.\n. I finally found my problem is caused by the autoclose script. After removing it, everything works well. Just FYI. \nhttps://github.com/Townk/vim-autoclose\n. ",
    "waiting-for-dev": "Anyone has a workaround?\n. Great! auto-pairs looks very well and I won't have this issue :) thank you!\n. ",
    "dusans": "Good to know. I always thought that is how neocomplete was suppose to work. \nAfter deleting autoclose i only have to press Esc once.\nHope this get resolved.\nFor now i switched to:  https://github.com/jiangmiao/auto-pairs\n. I switched to neocomplete yesterday and on my large files (python, yaml) its noticeable faster. Thanks Shougo! :+1: \n. ",
    "cseelus": "Thanks @dusans for this hint. For me the problem was 'vim-autoclose' too.\nAnd thanks of course to @Shougo for this great plugin.\n. ",
    "diraol": "Friends, removing \"vim-autoclose\" has caused the problem, on spf13, related on spf13/spf13-vim#567 .\nDoes anyone knows how to fix it without the need to \"re-enable\" autoclose.\n. ",
    "cttttt": "@diraol what worked for me is to add:\niunmap <Esc>\n...to my ~/.vimrc.local.  AutoClose no longer required.\n. ",
    "dragongeek": "I know this thread is old, but I'm having this problem with plain vanilla 'vi' editor on Solaris, and I'm assuming it has to do with using the UTF-8 Locale. I thought I'd drop that in here and see if it rings any bells, and if someone has yet found a fix or workaround, beside hitting  all the time? \nThanks,\n. ",
    "benmezger": ":echo has('python') returns 0 and setl omnifunc? returns omnifunc=pythoncomplete#Complete\n. Fixed! Thank you!\n. Not a neocomplcache problem? I am asking how can I change the directory where neocomplcache reads the modules from. Since my Python installation is somewhere else. \n. Thanks for the reply, \nFunny thing is, if I run, which python I get /usr/local/bin/python as output. since now /usr/local/bin/python is my default Python, that's why I don't understand how is neocomplcache still using /usr/bin/python\nI am using the default vim installed with homebrew. \n```\n~ \u276f\u276f\u276f vim --version\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Aug 14 2013 02:00:06)\nMacOS X (unix) version\nCompiled by Homebrew\nHuge version without GUI.  Features included (+) or not (-):\n+arabic          +file_in_path    +mouse_sgr       +tag_binary\n+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static\n-balloon_eval    +float           +mouse_urxvt     -tag_any_white\n-browse          +folding         +mouse_xterm     -tcl\n++builtin_terms  -footer          +multi_byte      +terminfo\n+byte_offset     +fork()          +multi_lang      +termresponse\n+cindent         -gettext         -mzscheme        +textobjects\n-clientserver    -hangul_input    +netbeans_intg   +title\n+clipboard       +iconv           +path_extra      -toolbar\n+cmdline_compl   +insert_expand   -perl            +user_commands\n+cmdline_hist    +jumplist        +persistent_undo +vertsplit\n+cmdline_info    +keymap          +postscript      +virtualedit\n+comments        +langmap         +printer         +visual\n+conceal         +libcall         +profile         +visualextra\n+cryptv          +linebreak       +python          +viminfo\n+cscope          +lispindent      -python3         +vreplace\n+cursorbind      +listcmds        +quickfix        +wildignore\n+cursorshape     +localmap        +reltime         +wildmenu\n+dialog_con      -lua             +rightleft       +windows\n+diff            +menu            +ruby            +writebackup\n+digraphs        +mksession       +scrollbind      -X11\n-dnd             +modify_fname    +signs           -xfontset\n-ebcdic          +mouse           +smartindent     -xim\n+emacs_tags      -mouseshape      -sniff           -xsmp\n+eval            +mouse_dec       +startuptime     -xterm_clipboard\n+ex_extra        -mouse_gpm       +statusline      -xterm_save\n+extra_search    -mouse_jsbterm   -sun_workshop\n+farsi           +mouse_netterm   +syntax\n   system vimrc file: \"$VIM/vimrc\"\n     user vimrc file: \"$HOME/.vimrc\"\n 2nd user vimrc file: \"~/.vim/vimrc\"\n      user exrc file: \"$HOME/.exrc\"\n  fall-back for $VIM: \"/usr/local/share/vim\"\nCompilation: /usr/bin/clang -c -I. -Iproto -DHAVE_CONFIG_H   -DMACOS_X_UNIX -no-cpp-precomp  -Os -w -pipe -march=native -Qunused-arguments -mmacosx-version-min=10.8 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\nLinking: /usr/bin/clang   -L.    -L/usr/local/lib -o vim        -lm  -lncurses -liconv -framework Cocoa    -framework Python   -lruby -lobjc\n```\n. Ok, I managed to fix it, silly me, I forgot I installed Vim before I installed Python with homebrew, so vim was probably configured for python in /usr/bin/python, re-installed vim and everything seems to be working fine. \nThanks. \n. ",
    "docwhat": "This doesn't work:\nautocmd FileType markdown nested :NeoComplCacheLock\nHow else could I do this?\n. FYI: I'm just trying to do what the subject says: disable neocomplcache for ft=markdown.\n. Immediately after opening a markdown file: :echo neocomplcache#is_locked() returns 1 and b:neocomplcache isn't set.\nAfter going to insert and typing: b:neocomplcache and then :echo neocomplcache#is_locked() returns 0.\nIf this isn't right, can you give an example?  Or is this a bug in NeoComplCache that it isn't honoring #is_locked?.\n. Additional datapoint --\nImmediately after opening a markdown file: :echo neocomplcache#get_current_neocomplcache() shows locked set as 0.\nExecuting :NeoComplCacheLock again shows locked being set to 1.\n(I was looking at the source for function! neocomplcache#commands#_lock() which is apparently the internal function for :NeoComplCacheLock to try to figure out the problem.)\n. okay, I figured it out:\nautocmd FileType pandoc,markdown nested NeoComplCacheLock\nThe extra filetype is needed because I have pandoc installed, too... my bad.  Thanks for your help, @Shougo -- I probably wouldn't have figured it out without it.\n. ",
    "dezza": "Is there any reason why it would say Py3Init ?\nOn 17 January 2013 13:54, Shougo notifications@github.com wrote:\n\nI think this is not neocomplcache problem.\nIt is Python interface problem. Because,\neax=00000000 ebx=00000000 ecx=00000000 edx=ffffffff esi=00000000 edi=00000000\neip=0057f321 esp=0018bfe8 ebp=0018c004 iopl=0 nv up ei pl zr na pe nc\ncs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010246\ngvim!Py3Init_vim+0x13c691:\n0057f321 8b4804 mov ecx,dword ptr [eax+4] ds:002b:00000004=????????\nVim crashed in Python interface initialization. Python interpreter or Vim\nmay be broken.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/353#issuecomment-12366756.\n\n\nBest Regards/Venlig Hilsen\nChristoffer Aasted\n. I actually just did. I removed Python 2.7 x64 in favor of 32-bit along with\nVim 32-bit, because I had the illusion that it might have been trouble in\nthat area. Before I did run Vim with the 64-bit runtime and Python 2.7 with\nx64.\nI don't think it should require Python 3 should it ?\nEither way, I never heard or seen examples of people running multiple\nversions of Python simultaneous on Windows without much hazzle.\nOn 17 January 2013 21:55, Shougo notifications@github.com wrote:\n\nNo. But I think python interface has many problems...\nYou should reinstall Python interpreter.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/353#issuecomment-12391124.\n\n\nBest Regards/Venlig Hilsen\nChristoffer Aasted\n. I know that ...\nOn 19 January 2013 00:43, Shougo notifications@github.com wrote:\n\nI actually just did. I removed Python 2.7 x64 in favor of 32-bit along\nwith Vim 32-bit\nYou must not mix 32bit dll and 64bit dll.\nYou must use Python 32bit and Vim 32bit or Python 64bit and Vim 64bit.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache/issues/353#issuecomment-12446066.\n\n\nBest Regards/Venlig Hilsen\nChristoffer Aasted\n. ",
    "neersighted": ":+1:\n. ",
    "oryband": ":+1: \nIsn't this already supported by adding a custom <CR> function? It's written in the help file. Here's what I did in my .vimrc.\nAnyways I support having this as a built-in feature anyhow. I'd like that as well.\n. Hey, thanks. Can you explain what is causing this error, and what does it mean?\nI don't understand what's causing this.\n. If found FuzzyFinder's buffer name. I used :buffers inside FF's buffer and this is what I got:\n:buffers\n  1  h   \"Documents/ppl/ex2/ex2.rkt\"    line 108\n  3 %a   \"[fuf]\"                        line 1 <--- This one.\n  4  h   \"Desktop/ex2.rkt\"              line 119\n  6  a   \".vimrc\"                       line 245\nHowever, putting the following line in my .vimrc as you suggested doesn't solve the problem:\nlet g:neocomplcache_lock_buffer_name_pattern = 'fuf'\nWhat am I doing wrong?\nThanks.\n. Alright, l'll try and ask at FF's repo. Thanks for your time.\nHere's a link for the issue at FuzzyFinder's repo.\n. Never mind... You can WONTFIX this.\n. ",
    "minkyn": "First of all, your stuff closes the popup, not the preview window.\nHowever, you can do similar thing to remap <CR> with a following :pclose command. But I don't like this approach as it's adding overhead for every <CR> making it inefficient. The plug-in knows where the preview window shows up and should be closed, and it is both easier and more efficient for this feature to be baked in.\nIn addition, <CR> is not the only key to confirm the completion; there is <C-y> or <C-e> for cancelling. Moreover, people can keep on typing when what they want auto-completes under the cursor, and should expect the preview window to be also closed. In a word, all events that cause the popup to disappear should close the preview window as well if it was ever opened.\n. Thanks Shougo!\nHowever, there is a discrepancy between what's explained in the doc and what's actually coded about the default value for g:neocomplcache_enable_auto_close_preview. Can you take another look?\n. ",
    "reckhou": "It works now, thank you!\nBest regards,\nShuaiying Hou\nreckhou@gmail.com\nwww.reckhou.com\n\u5728 2013-2-16\uff0c\u4e0b\u53481:37\uff0cShougo notifications@github.com \u5199\u9053\uff1a\n\nYour pattern is wrong.\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*\\%.'\nI think:\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*.\\?'\n\u2014\nReply to this email directly or view it on GitHub.\n. Another suggestion, since  and  is conflicted with many other plugins, you can add this to suggest config:\n\ninoremap   pumvisible() ? neocomplcache#close_popup() : \"\"\nSo if  is not available, you can use ,  to scroll and  to choose, that's quicker than .\nBest regards,\nShuaiying Hou\nreckhou@gmail.com\nwww.reckhou.com\n\u5728 2013-2-16\uff0c\u4e0b\u53481:37\uff0cShougo notifications@github.com \u5199\u9053\uff1a\n\nYour pattern is wrong.\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*\\%.'\nI think:\nlet g:neocomplcache_omni_patterns.go = '\\h\\w*.\\?'\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "seschwar": "Yes, it is working in 3805649122a7f51f8af2b06e0c0aba1ab68df6e5.  Thank you!\n. ",
    "gokcehan": "I have been playing with my configuration lately and also updated my plugins and now I cannot reproduce this problem anymore. It is either I had some conflicting options set in my .vimrc or the problem has been fixed in the plugin. This issue may well be closed if noone else is experiencing this..\n. ",
    "marlun": "If it is a htmlomnicomplete problem I thought the change I've added in autoload/htmlcomplete.vim should have fixed it, I'll  look into it some more and see if I can find something.\nWill keep my eyes open for version 8. \n. It does not seem to be loaded for some reason. I have it inside a installed plugin: ~/.vim/bundle/vim-marlun/autoload/htmlcomplete.vim Before using neocomplcache and I only used Ctrl-X Ctrl-O it did work, is that file not run when neocomplcache uses the html omni completion?\n. /Users/marlun/.vim/bundle/vim-marlun is inside the &rtp. \n. I probably were doing the wrong thing before. I never did make an autocomplete before checking Scriptnames and since it's in an autoload folder it doesn't load until you do. However, after making an autocomplete it is loaded and I can see the following message if I check :messages\nError occured calling omnifunction: htmlcomplete#CompleteTags\nfunction neocomplcache#auto_complete..neocomplcache#manual_complete..neocomplcache#get_complete_results..<SNR>98_set_complete_results_words..632..<SNR>106_set_complete_r\nesults_words..htmlcomplete#CompleteTags, line 204\nVim(let):E684: list index out of range: 0\n. Yes, I went through the code and found where the problem originated from. There are several places where you need to edit the code if you don't want the quotes.\n. Will look into it some more and see if manual cache things will make the variable available.\n. ",
    "likaci": "Waiting for good news!\n. ",
    "almassapargali": "First of all, thank you for such great plugins)\nI use snipmate-snippets, and as you said I added options word.\nNow it works, but they don't shown in neocomplecache popup menu.\nCan u help me?\n. Here is my snippets https://gist.github.com/anonymous/5203253\nit,s taken from here: https://github.com/honza/snipmate-snippets\nI just added options word to ea and ead (lines 241, 244).\nin my code if i write ea it shows: (i tried this words before)\n\nbut if i press tab snippet ea expands.\nbtw, in new files options word works good (until first usage):\n\nHere is my settings:\nhttps://github.com/asapargali/dotfiles/blob/master/vim_settings/plugin/neo_stuff.vim\n. thank you, now it works\n. ",
    "BeyondIM": "It's my config file error, sorry.\n. Remove 'foldlevel=0' from your modeline.\n. ",
    "l-bujakowski": "Do you remember maybe what was causing this? I have the same problem.\n. I have foldmethod=syntax, and in the file I'm editing there is no modeline. Foldlevel set to 1 in .vimrc. Does .vimrc modeline has anything to do when I'm editing a diffrent file and haven't opened .vimrc file in current session at all? Also I don't think I've changed any related settings, but I can't really recreate this bug anymore. Strange.\n. ",
    "takutaku947": "\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3067\u52d5\u3051\u3070\u3053\u3053\u306fClose\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n. ",
    "januz": "OK, sorry to hear, but thanks!\n. ",
    "tiziano88": "I just tried: same result. I cleared the cache on both linux and osx, and the issue is exactly the same. Let me know if there's anything else I should try, or if you need more info!\n. Right, I just updated my osx vim plugin to the latest version, and it now behaves consistently in both OSs (i.e. without the extra info). Thanks a lot, keep up the great work!\n. ",
    "sheerun": "Removing neosnippet resolves problem.\n@update: Unfortunately it doesn't\n. More output:\nError detected while processing function vital#of:\nline    4:\nE605: Exception not caught: vital: version file not found: neocomplcache\nPress ENTER or type command to continue\nError detected while processing function neocomplcache#lazy_initialize:\nline    9:\nE171: Missing :endif\nPress ENTER or type command to continue\n. Disabling unite and neosnippet probably fixes that problem..\n. Nope, it happened again\n. ",
    "kwiknik": "@sheerun Use Pathogen to easily keep your Vim plugins installed separately. It's a total breeze to use and eliminates issues like this.\n. ",
    "zimbatm": "Having the same issue on both OSX and nixos using pathogen and vim-plug respectively.\nAfter changing the vital.vim for better output:\nfunction! vital#of(name)\n  let fpath = 'autoload/vital/' . a:name . '.vital'\n  let files = globpath(&runtimepath, fpath)\n  let file = split(files, \"\\n\")\n  if empty(file)\n    throw 'vital: not found: ' . fpath . ' in ' . &runtimepath\n  endif\n  let ver = readfile(file[0], 'b')\n  if empty(ver)\n    throw 'vital: invalid version file: ' . a:name\n  endif\n  return vital#_{substitute(ver[0], '\\W', '', 'g')}#new()\nendfunction\nI get this when trying to quit my vim session:\nError detected while processing function vital#of:\nline    5:\nE605: Exception not caught: vital: not found: autoload/vital/neocomplete.vital in /home/zimbatm/.vim,/home/zimbatm/.vim/plugge\nd/vim-sensible/,/home/zimbatm/.vim/plugged/neocomplete.vim/,/home/zimbatm/.vim/plugged/unite.vim/,/home/zimbatm/.vim/plugged/v\nimproc.vim/,/home/zimbatm/.vim/plugged/vimshell.vim/,/home/zimbatm/.vim/plugged/vim-colors-solarized/,/home/zimbatm/.vim/plugg\ned/vim-airline/,/home/zimbatm/.vim/plugged/vim-trailing-whitespace/,/home/zimbatm/.vim/plugged/editorconfig-vim/,/home/zimbatm\n/.vim/plugged/tabular/,/home/zimbatm/.vim/plugged/vim-sneak/,/home/zimbatm/.vim/plugged/mustache.vim/,/home/zimbatm/.vim/plugg\ned/vim-narrow/,/home/zimbatm/.vim/plugged/vim-textobj-user/,/home/zimbatm/.vim/plugged/ctrlp.vim/,/home/zimbatm/.vim/plugged/t\nypescript-vim/,/home/zimbatm/.vim/plugged/gist-vim/,/home/zimbatm/.vim/plugged/undotree/,/home/zimbatm/.vim/plugged/vim-textob\nj-rubyblock/,/home/zimbatm/.vim/plugged/ag.vim/,/home/zimbatm/.vim/plugged/syntastic/,/home/zimbatm/.vim/plugged/vim-pasta/,/h\nome/zimbatm/.vim\nError detected while processing function neocomplete#init#disable:\nline    2:\nE171: Missing :endif\nIt doesn't make any sense because the file exists:\n-rw-r--r-- 1 zimbatm users 72 Feb 21 18:35 /home/zimbatm/.vim/plugged/neocomplete.vim/autoload/vital/neocomplete.vital\nIs it possible that globpath gets confused somehow ?\n. I managed to reduce the issue down to:\nlet files=globpath(&runtimepath, 'autoload/vital/neocomplete.vital')\nin some projects of mine the files variables has a result and in some not. &runtimepath seem to contain a path to the neocomplete plugin in both cases.\n. The reason it changes between projects is because of the vim-scripts/gitignore. Adding the \"nosuf\" option to globpath fixes the issue.\n. ",
    "lookforit": "It's exciting !\n. I don\u2019t think YCM can replace neo.\nNeo is more powerful and much easier to use.\nIf neo can  make jedi and pydict integrated , it will be perfect for pythoner!\n. Thanks for your attention and be sorry to omit the jedi \u2013integrated feature .\nI tried this  feature as the FAQ instructs ,and I\u2019d like  to say something about what I expect for  this feature :\nwhen I typed a object and  dot ,all the pre \u2013defined  methods are  listed automatically. after I selecting  a item ,also the \nMRU will take effect for  this object \u2018s  next time  \u201ddot \u201d popup.\nIs  there any way to make neo behave like this ?\nHere is  the pydict detail : https://github.com/vim-scripts/Pydiction \n. you see, the menu poped up automatically by jedi.vim when press dot, listing all the methods the object can call.\nbut this menu is lack of MRU and fuuzy match features  ,which can be provided by neo .\n\n. for pydiction case ,i think i can put up with the  long time to load items  ,as long as it is supported by neo . \n. hi ,here is  the corresponding setting : \n```\n\" Define keyword.\nif !exists('g:neocomplcache_keyword_patterns')\n    let g:neocomplcache_keyword_patterns = {}\nendif\nlet g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\n\" Plugin key-mappings.\ninoremap      neocomplcache#undo_completion()\ninoremap      neocomplcache#complete_common_string()\n\" Recommended key-mappings.\n\" : close popup and save indent.\ninoremap   neocomplcache#close_popup() . \"\\\"\n\" : completion.\ninoremap   pumvisible() ? \"\\\" : \"\\\"\n\" , : close popup and delete backword char.\ninoremap  neocomplcache#smart_close_popup().\"\\\"\ninoremap  neocomplcache#smart_close_popup().\"\\\"\ninoremap   neocomplcache#close_popup()\ninoremap   neocomplcache#cancel_popup()\n\"Enter select items:\ninoremap   pumvisible() ? neocomplcache#close_popup()  : \"\\\"\n\"Caching everywhere:\nnoremap neo :NeoComplCacheCachingBuffer:NeoComplCacheCachingTags\n\" Enable omni completion.\nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete\nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\n\" Enable heavy omni completion.\nif !exists('g:neocomplcache_omni_patterns')\n    let g:neocomplcache_omni_patterns = {}\nendif\nlet g:neocomplcache_omni_patterns.ruby = '[^. \\t].\\h\\w\\|\\h\\w::'\n\"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete\nlet g:neocomplcache_omni_patterns.php = '[^. \\t]->\\h\\w\\|\\h\\w::'\nlet g:neocomplcache_omni_patterns.c = '\\%(.\\|->)\\h\\w'\nlet g:neocomplcache_omni_patterns.cpp = '\\h\\w\\%(.\\|->)\\h\\w\\|\\h\\w*::'\n\" For perlomni.vim setting.\n\" https://github.com/c9s/perlomni.vim\nlet g:neocomplcache_omni_patterns.perl = '\\h\\w->\\h\\w\\|\\h\\w*::'\n\" For rank priority setting in the popup list\nlet g:neocomplcache_source_rank = {\n            \\'snippets_complete' : 4,\n            \\ 'buffer_complete' : 8\n            \\ }\n\" For jedi-Vim\nlet g:jedi#auto_vim_configuration = 0\nlet g:jedi#show_function_definition = \"0\"\nlet g:jedi#popup_select_first = 0\n\" For jedi-Neo integrated : \nif !exists('g:neocomplcache_omni_functions')\n    let g:neocomplcache_omni_functions = {}\nendif\nlet g:neocomplcache_omni_functions.python = 'jedi#complete'\nlet g:jedi#popup_on_dot = 1\n```\n. Thanks for your updating to pydiction.I will try it at once!\n. > Oh, it is feature. Because, current fuzzy match is not supported omnifunc. This feature may be changed in neocomplcache ver.8.\n\nAnd currently disabled sorting in omnifunc. Because there was the demand\n\nthat's to say ,neither of these two features can apply to jedi in the current neo ?\n. hi .\nto use pydtiction , my neo configuration is this : \nlet g:neocomplcache_dictionary_filetype_lists = {\n\\ 'default' : '',\n_\\ 'python'  : 'D:\\Programe files\\Vim\\vimfiles\\bundle\\pydiction-1.2.1\\complete-dict',\n\\ 'vimshell' : $HOME.'/.vimshell_hist',\n\\ 'scheme' : $HOME.'/.gosh_completions'\n\\ }_\nbut none of item can be listed automatically ,is there anything wrong with the configuration ?\nps: neo is upgraded to latest version of master .\n. > You can check the dictionary path by:\n\n:echo filereadable(neocomplcache#util#substitute_path_separator(fnamemodify(g:neocomplcache_dictionar\n\nthis returns 1\n\nYou have to wait until vimproc finishes making cache.\n\nvery long time i waited.\nwhen i typed  3rd(neocomplcache_min_syntax_length = 3) character , the status line says : \"user defined completion (^U^N^P) can't find pattern \"\n. > You can make cache manually by :NeoComplCacheCachingDictionary\nthe problem is not only dictionary  items can't poped up ,but also other types of  completion disappeared ,such as buffer ,syntax ,and tags etc . \n. > In my environment, neocomplcache works. Hmmmm..\ncan you show your neo configuration ? i  want to check it with my _vimrc.\n. > No. My configuration is too long. Please show me your minimal neocomplcache settings.\n\nI will check it.\n\nwith pleasure .\n- \"general \n  let g:acp_enableAtStartup = 0\n  let g:neocomplcache_enable_at_startup = 1\n  let g:neocomplcache_enable_auto_select=0\n  let g:neocomplcache_enable_fuzzy_completion=1\n  let g:neocomplcache_enable_smart_case = 1\n  let g:neocomplcache_enable_camel_case_completion = 1\n  let g:neocomplcache_enable_underbar_completion = 1\n  let g:neocomplcache_min_syntax_length = 3\n  let g:neocomplcache_lock_buffer_name_pattern = 'ku'\n  let g:neocomplcache_use_vimproc=1\n- \" Define dictionary.\n  let g:neocomplcache_dictionary_filetype_lists = {\n          \\ 'default' : '',\n          \\ 'python'  : 'D:\\Programe files\\Vim\\vimfiles\\bundle\\pydiction-1.2.1\\complete-dict', \n          \\ 'vimshell' : $HOME.'/.vimshell_hist',\n          \\ 'scheme' : $HOME.'/.gosh_completions'\n          \\ }\n- \" Enable omni completion.\n  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\n  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\n  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\n  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete\n  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\n- \"Make jedi integreted  in NeoCompleteCache\n  if !exists('g:neocomplcache_omni_functions')\n  let g:neocomplcache_omni_functions = {}\n  endif\n  let g:neocomplcache_omni_functions.python = 'jedi#complete'\n  let g:jedi#popup_on_dot = 1\n. > I think I fixed the problem. Please update neocomplcache.\nThanks for that!\nI tried the latest push of master ,but the problem still exist...\n. Hi again.\nI updated the neo to V8.0, so I wonder does the MRU and Fuzzy matcher features for jedi implemented ?\nhere is my configuration ,followed by official FAQ :\nvim\n\"Make jedi integreted  in NeoCompleteCache\nif !exists('g:neocomplcache_force_omni_patterns')\n    let g:neocomplcache_force_omni_patterns = {}\nendif\nautocmd FileType python setlocal omnifunc=jedi#complete\nlet g:jedi#popup_on_dot = 0\nlet g:neocomplcache_force_omni_patterns.python = '[^. \\t]\\.\\w*'\n. > To enable neocomplcache feature, you must create neocomplcache source(extension) for jedi like neocomplcache-rsense.\nwish someone have time to contribute this extension :smile: \n. > You may type, hold, and think\nwhat does hold mean? a demonstration for this feature will be nice.\n. > It is just autocmd event. When should neocomplcache work on recache\nsounds make sense :smile: \n. > In patch 7.3.1111+, neo is really fast! almostly as fast as YouCompleteMe! Amazing! \nthat's amazing.\nwaiting for the compiled .1111 version of win32.\n. I correct the configuration ,and no error appears now .\nBut jedi seems still don't work integrated with Neo .\nFor example ,the word \"urllib\" in python can be popped up by jedi ,but can't be listed by Neo automatically .\n. Ok,got it .\nBut i 'm still wondering how to expand the pattern to make Neo  use the full completion power of Jedi. \n. > This is full power completion.\nYes ,it works.But truly a bit slow......\nAnother issue is the fuzzy match and mru feature cann't apply to jedi by now?\n. After tried let Neo with full completion of jedi for couple of hours, I prefer to trigger jedi completion by hand.\nBecause some precious features of Neo is overwritten in that way.\n. > ver.8.1 \u3067\u306e\u8cea\u554f\u306a\u306e\u3067\u3059\u304c,>\u5148\u982d\u306e\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3057\u305f\u5019\u88dc\u306e\u307f\u3092\u51fa\u529b\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3069\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\n+1\n. would you fix the V8.1 simultaneously\uff0cwhich i 'm using now.\n. > I fixed it.\nI updated to the latest(master branch), but it did not work(image is like below).:\n\nis there any configuration errors?\n. > You must make cache manually by :NeoComplCacheCachingSyntax.\nyes ,it works now.Thanks.\n. > I renamed neocomplete variables. So you can try it.\nGot it ,I will try it later.\n. > So, you must input some characters in buffer.\nyes , I typed some words already ,but the complete menu didn't popup.\n. > What's the \"NeoCompleteCache\"\nsorry ,is neocomplcache.vim, the plugin's name.\n\nIs neocomplcache#initializa() works?\n\nyes, i added it to vimrc,it works.\n. Thanks, it solved.\nBut the mru and fuzzy match features can't be  applied to standard package member completing.\nSo i wonder can neocomplete reach that?\n. ",
    "whour": "win7 X64 vim7.4 alert\u201cneocomplete does not work this version of Vim.\nIt requires Vim 7.3.885 or above and \"if_lua\" enabled Vim.\u201d\n. ",
    "jsit": "I think this is still happening for me. When in a file with ft=php.html, the completion popup is generated very slowly; the whole screen freezes for a few moments while it generates the completion list, it seems. As soon as I set ft=php, neocomplcache is much, much faster.\n. This seems to disappear when I remove filetype plugin on from my .vimrc. Hm.\n. Unfortunately I can't count on having Vim 7.3+ or Lua everywhere, so I'd rather not rely on those things.\nFYI, I can confirm that this problem is caused by having filetype plugin on and set ft=php.html. I tested with this command to load only one plugin:\nvim -Nu <(echo 'set rtp+=~/.vim/bundle/neocomplcache.vim/')\nThen I did :NeoComplCacheEnable, :filetype plugin on, and :set ft=php.html, and things became very slow; particularly when typing quote marks or brackets.\n. > I think it is omni completion problem. Please disable omni completion.\nYou were right! Thanks.\n\nOh, your environment is too bad. I don't recommend to use old Vim.\n\nI'd rather not but I have no choice. :\\\n. ",
    "hushicai": "@ujihisa as show in the picture,when i type in \"./\",i'd like file completion,but it show all the html tags?can i remove the html tags and just show file paths?\n. @Shougo Anyway,filename completion worked in fact,but show lots of html tags too.How can I avoid html tags completion when i just want the filename completion?\n. ",
    "smutch": "Here is a quick example.  Here the current line hasn't been scrolled to the bottom of the window, but has moved by several lines...\n\n\nThis occurs also for 500+ line files viewed in full screen mode on MacVim.\n. Fantastic!  Seems to work great.  Thanks so much for the rapid response!\n. ",
    "T0kumei-N0": "any idea on how to get it to work. i used your shougo-s-github vimrc, you think that might be the problem?\n. Shougo Just wanted to say that thank you for your hard work over the years really made my \"vim\" life a whole lot better. I also got the neocomplacache to work. The problem was just what you said it was..\nthank's again buddy\n. ",
    "viszu": "Hi again, maybe create global variable to let user disable this foldmethod change even if it is 'too heavy', or let user pick the number of lines at which this will occur (now it's  hard coded 1000) ? Also if I remember correctly, neosnippet is also changing fold method, so I would love to see this fix there too. \n. Ok, You know better :) Thank You for the fix!\n. ",
    "teasp00n": "Moving to neosnippets.\n. ",
    "slimane": "NeoBundle 'Shougo/neocomplcache'\n\u3092\nNeoBundle 'Shougo/neocomplcache', {'rev' : '2b36f09'}\n\u306b\u5909\u66f4\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u72b6\u6cc1\u306f\u540c\u69d8\u3067\u3059\u306d\u3002\n. @ujihisa\u3055\u3093\n\u4e0b\u8a18\u5b9f\u884c\u304c\u66f4\u65b0\u3057\u307e\u3057\u305f\u304c\u540c\u69d8\u306e\u72b6\u6cc1\u3067\u3057\u305f\u3002\nNeoBundle 'Shougo/neocomplcache', {'rev' : '2b36f09^'}\n@Shougo\u3055\u3093\n\u66f4\u65b0\u884c\u3044\u307e\u3057\u305f\u304c\u72b6\u6cc1\u306f\u540c\u69d8\u3067\u3057\u305f\u3002\n. \u66f4\u65b0\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u81ea\u52d5\u88dc\u5b8c\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5168\u6a5f\u80fd\u304c\u52d5\u3044\u3066\u308b\u306e\u304b\u306f\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u304c\u3001\n\u4eca\u306e\u3068\u3053\u308d\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. ",
    "Julian": "No need to apologize thanks for a great plugin :)\nI'll keep an eye out for the fix.\n. Sorry, didn't know you really meant it should be fixed already, I updated and it didn't appear to be, it still takes the same amount of time. This is with an empty vimrc with just neocomplcache and set dictionary+=/usr/share/dict/words.\n. Ah :D.\nTried updating, still takes a long time, though now it appears to also fail if I leave it for long enough:\nError detected while processing function neocomplcache#complete#auto_complete..neocomplcache#complete#manual_complete..neocomplcache#complete#_get_words:\nline   11:\nE686: Argument of sort() must be a List\nPress ENTER or type command to continue\nError detected while processing function neocomplcache#complete#auto_complete..neocomplcache#complete#manual_complete..neocomplcache#complete#_get_words:\nline   11:\nE714: List required\nPress ENTER or type command to continue\n. vimrc is just:\n```\nset nocompatible\nfiletype off\nset runtimepath+=~/.vim/bundle/vundle/\ncall vundle#rc()\n\" Let Vundle manage Vundle (required!).\nBundle 'gmarik/vundle'\nBundle 'Shougo/neocomplcache'\nif filereadable(\"/usr/share/dict/words\")\n    set dictionary+=/usr/share/dict/words\nendif\nlet g:neocomplcache_enable_at_startup = 1\n```\nI actually don't even care about dict completion too much, though it'd be nice for a few filetypes. What's the easiest way to just disable it?\n. Well, I don't use dictionary for neocomplcache. I've had it set for years, and use it for spell.\nUpdating neocomplcache again still doesn't seem like it's fixed it for me. let g:neocomplcache_disabled_sources_list = {'_' : ['dictionary_complete']} seems to get me something usable though.\nThanks for trying to look into it, feel free to close this unless you think I can provide anything else to help you out.\n. ",
    "weynhamz": "+1 for changing the name to neocomplete, it's better.\n. @Shougo I suggest that open a new repository called neocomplete, move this milestone as well as branch v8.1 to that repository, make the HEAD of this repository stay at current master and version only for bugfixes. These bugfixes should also be merged into v8.1 branch in the new repostory of course. This way, we can began to migrate our configurations for this renaming.\n. Wow, that is really quick.\n. @Shougo How do you make github redirect https://github.com/Shougo/neocomplete to https://github.com/Shougo/neocomplete.vim?\n. > > @Shougo How do you make github redirect https://github.com/Shougo/neocomplete to https://github.com/Shougo/neocomplete.vim?\n\nHow I set github redirect? I don't know it...\n\nFrom what I know, github does not do redirect for renamed repo? Did create neocomplete first, and then rename it to neocomplete.vim?\n. > > Did create neocomplete first, and then rename it to neocomplete.vim?\n\nYes.\n\nFrom what I know, github does not do redirect for renamed repo?\n\nI tested it. The redirection is worked.\n\nI have just tested and  confirmed that github can handle redirection for renamd repo even in git clone, this is awesome, finally, I can rename some my repos to a better naming covention. Maybe you should do the same to your other vim repos, change them to .vim, e.g. neocomplcache.vim, of course, just a thought.\n. I have just renamed my https://github.com/techlivezheng/tagbar-phpctags to https://github.com/techlivezheng/vim-plugin-tagbar-phpctags, a convention I am following for all my vim plugin repositories by prefixing 'vim-pluin-', just like .vim, it's a bit of personal taste.\n. > I renamed repositories name completely.\nThat is great, haha, cheers.\n. ",
    "jojojames": "I still get regular completions outside of the forced patterns. Is it possible to use Omnicppcomplete for completions outside of the forced patterns, and clang for the patterns itself?\nI would think with Omnicppcomplete and a tags file containing the completions I want, it would complete that way, but from what I've tried, it doesn't seem to work.\n. ",
    "okuramasafumi": "Thanks!\n. ",
    "epeli": "You're right!\nI was using vagrant and for some reason /vagrant mount was broken. cd /vagrant froze too.\n. I guess that's some kind of a feature?\nYour suggested workaround works well anyhow. Thanks.\nI'm using it only for gitcommit filetype if anyone is interested:\nviml\nautocmd FileType gitcommit let g:neocomplcache_enable_auto_close_preview = 0\n. ",
    "pluskid": "I found vim crashed a lot when I'm not using it, after I installed neocomplete with if_lua enabled. And then I found there bug report: https://code.google.com/p/vim/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Summary&groupby=&sort=&id=267\n. ",
    "xolox": "Just for the record the username is @xolox :-). I'm looking into the issue. Thanks for the feedback!\n. I just released a new version of the Lua file type plug-in for Vim (vim-lua-ftplugin) that fixes the issue mentioned here. Thanks for the heads up!\n. Define 'broken'? They look fine to me?\n. I ran into the following error message today after compiling Vim from source and editing a Lua script:\nbad argument #1 to 'ipairs' (table expected, got userdata)\nIt turns out the problem wasn't properly solved before (because I wasn't able to test back then). I now fixed this in 4746f4d4bddb51619c2956d73adfb22b73e066dd.\n@Shougo: Sorry I never saw your most recent message, yes it works fine now, those are the proper menu items. They are not the completion candidates but a preview of the values (strings in this case, with embedded newlines, which are rendered as \\n so that more than one line can be shown).\nIf you ask me this issue can be closed now.\n. ",
    "kdurant": "I set \"let g:neocomplcache_same_filetype_lists = {}\",but no effect.\n. I try it,but vim display \"E121: \u00ce\u00b4\u00b6\u00a8\u00d2\u00e5\u00b5\u00c4\u00b1\u00e4\u00c1\u00bf(undefine variable: g:neocomplcache_same_filetype_lists \"\n. This still does not work.\nI only set \nlet g:neocomplcache_same_filetype_lists = {}            \nlet g:neocomplcache_same_filetype_lists._ = '_'\n. it is ok now. May take time to analyze the buffer\n. thank you!\nAlso I hope that many file types you can use a dictionary file, how do I set up?\n. what's this? I can't find it in neocomplcache.txt\n. soryy ,I can't use it.\n. I only wait now!\nBut ver8.1 needs lua.\nThe default version does not support the lua, this is a problem.\n. You must set g:neocomplcache_disable_caching_file_path_pattern by regular expression.\nExample:\nlet g:neocomplcache_disable_caching_file_path_pattern = '.*.txt$'\nit still generates cache files\n. I tryed vim7.3.1136. when used unite , it is quick than vim7.3.969\nBut vim7.3.1136 can't use neocomlete, it include lua interface.\nSo ....\n. \n. \n. \nonly 11\n. and display six\n. it don't display all word that are in dictionary \n. But the word that displayed is less than 20\n. Why is not Vim  intended for auto completion\n. ",
    "HerringtonDarkholme": "Is it possible to use g:neocomplcache_force_omni_patterns while keeping auto-select feature enabled?\n. ",
    "adam-ah": "Thanks for the quick reply - however, I don't want to use all buffers, just all buffers with same filetype. I thought the default behaviour is to use that - so when I'm editing A.js and B.js is open as a buffer (#2) by default I would see completions from B.js in A.js.\n. Sorry, not too sure what you mean ?!\n. It's not fixed yet.\nSo the way I can reproduce it:\nvi A.js\n:badd B.js\nMyObj. # in A.js typing the . brings up only the default functions\n:buffer 2\nMyObjc.ban # typing the . correctly displays ban\n:buffer 1\nMyObj.b # .ban correctly appears\nMaybe adding a buffer does not refresh the cache?\n. Thanks Shougo, fcaa25e9b850a256f4027a89f2398ed422b97967 seems to fix it!\n. Just out of curiosity: maybe I'm doing something completely wrong but I'm not sure how people could use it before this fix? I mean completing across files is one of the most fundamental features right? So before this fix how could you complete across files? :)\n. erm... yeah, that's the title of the bug report :)\nHowever, the whole point of this plugin is to avoid using that, isn't it? :)\n. ",
    "pikajude": "No good - looks like that was the default anyway.\n(By \"no good\" I mean I get the same behavior.)\n. ",
    "Praful": "What is it that determines whether you get Ruby methods or other autocomplete options in neocomplete (not neocomplcache)?\nWhen I type \".fi\", I get the following:\n\nThere are no method options. If I press <c-x><c-o>, I get the following:\n\nI'd like all options to appear in the first list with the method options appearing first. How do I do this?\nThe help file suggestion of using\nif !exists('g:neocomplete#force_omni_input_patterns')\n  let g:neocomplete#force_omni_input_patterns = {}\nendif\nlet g:neocomplete#force_omni_input_patterns.ruby = '[^. *\\t]\\.\\w*\\|\\h\\w*::'\nresults in only the methods appearing as options after the dot (as in the second picture but no [O] at the end of the method as you have). This is slightly better but the complete list would be nice!\nI'm using gvim 7.4.3 on Win 7.\nThanks\n. OK - thanks for replying.\n. Alas no. In fact, now I get only the Ruby methods and none of the other autocomplete options! I may have done something to bring this about but I'm just living with it because most of the time I'm happy being presented with Ruby methods. When I want something else, I use the explicit <c-x> followed by the appropriate chord eg <c-x><c-f> to autocomplete files.\n. Thanks!\n. ",
    "nyangry": ":smiley: \n. ",
    "j5shi": "Hi, I'm suffering from the same problem, neocomplcache takes too much time on opening large files so that I tried to disable caching for some types of files, I tried this\nlet g:neocomplcache_disable_caching_file_path_pattern='.*\\.log$'\nfor  *.log files, but neocomplcache cached for log files anyway.\nIs there any way to check if it's my problem or neocomplcaches'?\n. I can send the pull request but I don't understand why you don't want to change neocomplcache? Are you trying to leave it out of developing? Or moving your main effort to neocomplete?\n. ",
    "ShawnHuang": "It still no use when I try the following code.>_<\nThere is a problem to display '\uff1c' or '\uff1e' @github\n\" For cursor moving in insert mode(Not recommended)\n\"inoremap \uff1cexpr\uff1e\uff1cLeft\uff1e  neocomplcache#close_popup() . \"\"\n\"inoremap \uff1cexpr\uff1e\uff1cRight\uff1e neocomplcache#close_popup() . \"\"\n\"inoremap \uff1cexpr\uff1e\uff1cUp\uff1e    neocomplcache#close_popup() . \"\"\n\"inoremap \uff1cexpr\uff1e\uff1cDown\uff1e  neocomplcache#close_popup() . \"\"\n. Thank you for your reply.\nThis plugin is really useful for me.\n. I've see the doc, but sorry for my foolish:(\nI put the https://github.com/teramako/jscomplete-vim in my bundle.\nAnd it cause the unknow result.\n. At first I think these results are the default sources in neocomplcache, but I am wrong.\nThank you, I get my answer :)\n. ",
    "rhysd": "\u7d20\u65e9\u3044\u3054\u5bfe\u5fdc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01\n. ",
    "flyingfishercn": "I tried as you said again, but nothing different happened. They finished the same job.\nFortunately, it didn't trouble my daily work.\nThe following is my config:\nvim\n 705     \" neocomplcache {\n 706     let g:acp_enableAtStartup = 0\n 707     let g:neocomplcache_enable_at_startup = 1\n 708     let g:neocomplcache_enable_camel_case_completion = 1\n 709     let g:neocomplcache_enable_smart_case = 1                                                                                                                       \n 710     let g:neocomplcache_enable_underbar_completion = 1\n 711     let g:neocomplcache_enable_auto_delimiter = 1\n 712     let g:neocomplcache_force_overwrite_completefunc = 1\n 713     let g:neocomplcache_min_syntax_length = 3\n 714     let g:neocomplcache_enable_auto_select = 1\n 715 \n 716     \" SuperTab like snippets behavior.\n 717     imap <silent><expr><TAB> neosnippet#expandable() ?\n 718                 \\ \"\\<Plug>(neosnippet_expand_or_jump)\" : (pumvisible() ?\n 719                 \\ \"\\<C-e>\" : \"\\<TAB>\")\n 720     smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)\n 721 \n 722     \" Define dictionary.\n 723     let g:neocomplcache_dictionary_filetype_lists = {\n 724                 \\ 'default' : '',\n 725                 \\ 'vimshell' : $HOME.'/.vimshell_hist',\n 726                 \\ 'scheme' : $HOME.'/.gosh_completions'\n 727                 \\ }\n 728 \n 729     \" Define keyword.\n 730     if !exists('g:neocomplcache_keyword_patterns')\n 731         let g:neocomplcache_keyword_patterns = {}\n 732     endif\n 733     let g:neocomplcache_keyword_patterns._ = '\\h\\w*'\n 734 \n 735     \" <TAB>: completion.\n 736     inoremap <expr><TAB> pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n 737     inoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<TAB>\"\n 738 \n 739     \" <CR>: close popup\n 740     \" <s-CR>: close popup and save indent.\n 741     inoremap <buffer> <expr><s-CR> pumvisible() ? neocomplcache#close_popup(): \"\\<CR>\\<CR>\"\n 742     inoremap <buffer> <expr><CR> pumvisible() ? neocomplcache#close_popup() : \"\\<CR>\"\n 743     inoremap <buffer> <expr><SPACE> pumvisible() ? neocomplcache#cancel_popup() : \"\\<SPACE>\"\n745     \" <C-h>, <BS>: close popup and delete backword char.\n 746     inoremap <buffer> <expr><BS> neocomplcache#smart_close_popup() \"\\<C-h>\"\n 747     inoremap <buffer> <expr><C-h> neocomplcache#smart_close_popup() \"\\<C-h>\"\n 748     inoremap <buffer> <expr><C-y> neocomplcache#smart_close_popup()\n 749     inoremap <buffer> <expr><C-e>  neocomplcache#cancel_popup()\n 750 \n 751     \" Enable omni completion.\n 752     autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\n 753     autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\n 754     autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\n 755     autocmd FileType python setlocal omnifunc=pythoncomplete#Complete\n 756     autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\n 757     autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete\n 758 \n 759     \" Enable heavy omni completion.\n 760     if !exists('g:neocomplcache_omni_patterns')\n 761         let g:neocomplcache_omni_patterns = {}\n 762     endif\n 763     let g:neocomplcache_omni_patterns.php = '[^. \\t]->\\h\\w*\\|\\h\\w*::'\n 764     let g:neocomplcache_omni_patterns.perl = '\\h\\w*->\\h\\w*\\|\\h\\w*::'\n 765     let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)'\n 766     let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\\t]\\%(\\.\\|->\\)\\|\\h\\w*::'\n 767     let g:neocomplcache_omni_patterns.ruby = '[^. *\\t]\\.\\h\\w*\\|\\h\\w*::'\n 768 \n 769     \" Use honza's snippets.\n 770     let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'\n 771 \n 772     \" Enable neosnippet snipmate compatibility mode\n 773     let g:neosnippet#enable_snipmate_compatibility = 1\n 774 \n 775     \" For snippet_complete marker.\n 776     if has('conceal')\n 777         set conceallevel=2 concealcursor=i\n 778     endif\n 779 \n 780     \" Disable the neosnippet preview candidate window\n 781     \" When enabled, there can be too much visual noise\n 782     \" especially when splits are used.                                                                                                                              \n 783     set completeopt-=preview\n 784     \"endif\n 785     \" }\n. God. I thought use OmniCppComplete as  neocomplete by mistake.  I checked my vim plugin and found the key error.\nIt is said neocomplete was better than OmniCppComplete everywhere , I will try it later.\nThank you,Shougo !!\n. ",
    "aymericbeaumet": "I read the documentation and I tried what you mentionned, but it totally disable <C-y> and <C-e> behavior in insert mode.\n. I understand that I have to rebind these keys, but I can't find how to restore the default vim behavior, \n. Thanks for you answer @Ferreus9001.\nIn insert mode, I expect this behaviour:\n1. Pressing <C-y> copy the character from the above line\n2. If needed, show to completion popup\n3. Pressing <C-y> again will close the completion popup and copy the character from the above line\n4. If needed, show to completion popup\n5. etc...\nThe below code closes the completion popup:\ninoremap <expr><C-y>  neocomplcache#close_popup()\ninoremap <expr><C-e>  neocomplcache#cancel_popup()\nHow to do the other actions?\n. Unfortunately it doesn't work for me... When I use your binds and type <C-y> in insert mode, I really write <C-y> in the editor. Does this solution work for you?\n. Hum it works, I found the problem. In my vim version (7.3) the cpoptions option causes a problem. When I removed it, everything worked fine!\n. ",
    "Ferreus9001": "I have the same problem here.\nIt turns out that closing an open popup actually is the default behavior for those keys.\nSee help tags complete_CTRL-E and complete_CTRL-Y.\n. I think i found a solution:\ninoremap <expr> <C-y> pumvisible() ? \"\\<C-y>\\<C-y>\" : \"\\<C-y>\"\ninoremap <expr> <C-e> pumvisible() ? \"\\<C-y>\\<C-e>\" : \"\\<C-e>\"\nNote that the popup is always closed with <C-y> or it won't work.\n. ",
    "benintech": "great thanks, I confirm it works\n. Ok so after Vim starts up, I type:\n:call neocomplcache#initialize()\n:NeoComplCacheCachingDictionary\nIndeed I don't have the \"undefined variable\" error anymore, but my dictionary files still don't seem to be loaded at startup. The first time the keyword list shows up still takes about 6 seconds. Is there anything else to do ?\nThanks for your help,\nBen\n. > > > To cache dictionary, you must set filetype same to dictionary filetype.\nI don't quite understand, what exactly should I type ?\nI'd like my dictionary files to be loaded regardless of what filetype I'm working on\nBelow my settings:\nfiletype plugin on\nlet g:neocomplcache_enable_at_startup = 1\nlet g:neocomplcache_dictionary_filetype_lists = {'_' : '/usr/share/dict/french,/usr/share/dict/american-english'} \nlet g:neocomplcache_caching_limit_file_size = 10000000\nlet g:neocomplcache_auto_completion_start_length = 3\nlet g:neocomplcache_min_keyword_length = 6\nlet g:neocomplcache_enable_auto_select = 1\nThen after vim starts up, I type\n:call neocomplcache#initialize()\n:NeoComplCacheCachingDictionary\nIs there something I did wrong ?\n(I also tried :NeoComplCacheCachingDictionary _)\nAs for vimproc, I installed it just after neocomplcache (I suppose I installed it correctly because now \"echo g:neocomplcache_use_vimproc\" gives me1). Although, I didn't notice any difference between with and without vimproc (but then again, I don't complain about the speed, I think the keyword list is pretty swift to pop up, EXCEPT for that first time I type something)\n. ",
    "dcy": "My problem is the variable in erlang can not popup\n2013/8/12 Shougo notifications@github.com\n\nIs it same problem?\nShougo/neocomplete.vim#42https://github.com/Shougo/neocomplete.vim/issues/42\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache.vim/issues/447#issuecomment-22471942\n.\n. Sorry! \nHere I will explain by screenshot.\nThe variable in python will auto popup\n\n\nbut can not popup in Erlang, beside the Erlang module's name like lists, file.\n\n\n. I sent the erlang script to you by gmail, because it can not upload file in\n\"issues\".\n2013/8/12 Shougo notifications@github.com\n\nCan you upload the erlang script for test?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shougo/neocomplcache.vim/issues/447#issuecomment-22480348\n.\n. Did you update neocomplete.vim? I use neocomplcache.vim.\n. Thanks!My problem is solved when i use neocomplete.vim.\n. \n",
    "amadeus": "Hmmm, I figured there might be a way like you can with key commands where you specify <silent>, like:\nnnoremap <silent> <leader>j gj\nObviously that's a poor command that won't spit anything out below.\n. ",
    "harciga": "This was pushed on patch 7.4.314 http://ftp.vim.org/pub/vim/patches/7.4/7.4.314 Perhaps you'd like to update your FAQ\n. ",
    "wimstefan": "Looks good.\nThank you very much! B-)\n. ",
    "jboadas": "Sorry didn't work and if you open a file with the context menu \"Edit with Vim\" (any file) you keep getting \"Completefunc not set\" until you open a file with \"e:\"\n. Awesome! now works thanks\n. ",
    "kawing-chiu": "But I need the \"longest\" option when using omni complete (I mean when neocomplete refer to some omni complete backend)? Is there a way?\n. In my case, it's vim-clang and I've figured out how to do it: vim-clang provides options g:clang_cpp_completeopt and g:clang_c_completeopt. Just set it there. So it seems that it's the job of the omni-completion provider to support it.\n. ",
    "hoagy-davis-digges": "Is there a command that allows me to do this on the fly, rather than by editing the .vimrc?\nBasically I want to use a wordpress dictionary for some of my PHP files, but not all of them, so I would like to be able to activate it occasionally. \n. ",
    "auduny": "Thank you so much!\n. ",
    "phanhaiquang": "@Shougo  Thank you very much for great support !\nIt works !\n. ",
    "fisadev": "Update: this problem only happens on vim 7.4. Downgraded to vim 7.3 to test, and there works fine. So its some sort of incompatibility of neocomplcache with vim 7.4.\n. ",
    "Kuniwak": "converter_case \u3092\u5916\u3059\u3053\u3068\u3067\u671b\u307f\u901a\u308a\u306e\u6319\u52d5\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\uff01\n. ",
    "chrisnicola": "Could be the way it's configured in SPF13, either way switching to neocomplete eliminated the problem.\n. ",
    "DaveDay": "Shougo, \nThanks for this, I have spent the last two days struggling with this also.\nPerhaps the readme needs updating?\nI know NeoComplete seems to be the preferred engine these days, but NeoComplCache works in\nvanilla environments which makes it very useful still.  Plus machines are getting faster, so NeoCompleCache works just fine on my laptop.  Those of us using Neovim also can use it now even\nthough Neovim has neither python for YCM or Lua for Neocomplete.\nWhen you update the readme, perhaps you could include omnicomplete regexs for GoLang, Python, &\nJava, as those are my most used languages these days.  Thanks for all your good efforts toward making\nVim completion smooth and reliable.\nDave\n. Shougo, \nThank you for responding.   I had no idea NeoComplCache is unsupported......\nIt seems that no plugin can provide a good universal completion experience.  I use NeoComplCache as \na fallback, with minimal dependencies.  It works on any of the machines I use, neovim included.\nAfter posting my questions above, I visited the Eclim website page which concerns Java.  I see they\nrecommend the following setup:\nlet g:EclimCompletionMethod = 'omnifunc'\nif !exists('g:neocomplcache_force_omni_patterns')\n  let g:neocomplcache_force_omni_patterns = {}\nendif\nlet g:neocomplcache_force_omni_patterns.java = '\\k.\\k*'\nI have included these lines and they have helped a lot for Java.  For Go, for the moment, I \nam using the regex for CPP and it seems to work fine so far.  So I seem to be able to use\nNeoComplCache for Java, Go, Python, and of course the usuals, C, C++,etc.\nOne thing I would still like to do is to turn off NeoComplCache's closing of the preview window.\nI have a very small Autocommand that does this when I escape from insert mode, which is\nwhen I prefer for that window to close and this autocommand does it uniformly for my various\nlanguages and completion plugins.\nI will clone NeoComplCache locally so I can experiment with an occasional local change.\nThanks so much for your efforts.\nDave Day\n. ",
    "wmax": "Hi, I've got rid of vim 7.3 and compiled vim 7.4 with python support and installed python-mode and pathogen only which works fine for me so far.\nNow I've tried to reproduce this behavior all over again by rolling back all my recent changes by removing all vim-related stuff manually and installing vim 7.3 plus spf13 but I've failed miserably to reproduce the issue.\nI'll come back to this ticket if I'll run into the issue again.\n. ",
    "fedf": "Sorry I posted the issue on the wrong place, I posted on neocomplcache instead of neocomplete.\nI close it but as I wrote the same test is valid for neocompcache.\n. ",
    "Ardakilic": "@Shougo Thanks for the links, the workaround in https://github.com/terryma/vim-multiple-cursors/issues/51#issuecomment-32344711 works as a treat!\n. ",
    "jrobeson": "if you end up agreeing to this  https://github.com/Shougo/neosnippet.vim/issues/239 for neosnippet, then i will attempt to adjust this to match.\n. ",
    "todashuta": "Please write this line in your .vimrc:\nvim\nset completeopt-=preview\n. ",
    "reem": "Reading some other issues, it looks like this is fixed if you use g:neocomplecache_force_omni_patterns instead of the same with force.\n. ",
    "fazlearefin": "Thanks!\n. ",
    "gunjiro": "\u305d\u3046\u3044\u3046\u3053\u3068\u3060\u3063\u305f\u306e\u3067\u3059\u306d\u3002\n\u3054\u56de\u7b54\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n. ",
    "raine": "I'll check neocomplete later, thanks!\n. Hey Shougo, now using neocomplete. \n\nIn neocomplete, you can complete files from buffer directory in file_include source.\n\nI don't quite understand how to get this working. Any pointers?\n. ",
    "Mmjavellana": "Ok thanks. I only discovered this because gvim had gotten into my path variable with the short form for some reason. I'm not sure if the installer did that, or if I did, but I changed it to the long form and it works fine.\n. ",
    "expipiplus1": "Oops!\nSee Shougo/Neocomplete#374\n. ",
    "ajpaulson": "The path is set correctly and if I use neocomplete in regular vim it suggests [FI] completions.\nMy compilers also find header files.\n. Thank you, it works perfectly now.\n. ",
    "wsdjeg": "I think you should use neocomplete or deoplete.. Shougo is author of neocomplcache, neocomplete and deoplete, he create neocomplete is because neocomplcache is too slow. in neovim I use the latest version of deoplete. it is async completion engein. \n. If you are use ubuntu, I think you can install vim-gtk, it should support lua, then you can use neocomplete, BTW, if you are a vimmer like Shougo, I think you can try to use neovim, and deoplete is for neovim.  I am using deoplete, \ud83d\ude04 , you can have a look at my SpaceVim.. ycm???? it is too large, and hard to install, I prefer deoplete. . I just test in depplete , it works well:\n\n. please read :h tw, it should be vim's feature.. ",
    "lokesh1729": "ohh... why??? neocomplcache is good no. ohh.... which one should I use?? neocomplete or deoplete. Ok... I tried using YouCompleteMe, but that's very slow and erroneous for larger projects. same problem with neocomplete too.... . I have disabled some of the plugins that I suspect causing this issue like python-mode, syntastic and restarted the vim. Now, the cursor line is gone, but now, when I am typing over 80 characters, it's coming to the next line..... I read, in my vimrc, text width is set to 120.. @Shougo Hi, any fix for this????. ",
    "lokeshatbigbasket": "Hi,\nThis is the output from my vim for :verbose setlocal formatoptions?\nformatoptions=tcq\n        Last set from ~/.vimrc\na flag is not set... and also I have grepped for formatoptions in my entire vim bundle, here's what I found.... I'm pretty new to vim... \n\n/home/lokesh1729/.vim/bundle/delimitMate/doc/delimitMate.txt:vim:tw=78:et:ts=8:sw=2:ft=help:norl:for atoptions+=tcroqn:autoindent:\n/home/lokesh1729/.vim/bundle/vim-markdown/indent/markdown.vim:setlocal formatoptions+=r\n/home/lokesh1729/.vim/bundle/vim-markdown/indent/markdown.vim:setlocal formatoptions-=c\n/home/lokesh1729/.vim/bundle/neocomplete.vim/autoload/neocomplete/handler.vim:        \\ || (&l:formatoptions =~# '[tca]' && &l:textwidth > 0\n/home/lokesh1729/.vim/bundle/tlib_vim/CHANGES.TXT:- tlib#buffer#InsertText(): Respect tabs and (experimental) formatoptions+=or\n/home/lokesh1729/.vim/bundle/python-mode/doc/pymode.txt:    setlocal formatoptions-=t\n/home/lokesh1729/.vim/bundle/python-mode/ftplugin/python/pymode.vim:    setlocal formatoptions-=t. \n",
    "xzwj": "Hey, Shougo. I have added autocmd FileType python setlocal omnifunc=pythoncomplete#Complete in .vimrc. but it have no effect. I have just started learning vim. could you tell me more detailed? Thank you!. Fixed! Thank you again :). "
}