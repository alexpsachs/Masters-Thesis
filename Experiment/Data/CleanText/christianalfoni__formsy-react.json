{
    "cmwelsh": "Perhaps there is a better paradigm for validation when using React.js...?\nFor example, let's suppose that the validation works as intended in my sample project. In that case I'd make a feature suggestion. Take the power of React.js and turn \"error messages\" into \"coaching messages\" and successful validation would transform from \"lack of errors\" into \"validation success messages\".\nSo I use your library to mark all failed validations in yellow text, and the default for non-blank field would be green (passes validation).\nCan you help guide me here? :)\n. I think your solution of using the onBlur property instead of onChange is perfect. I should have thought of that... :)\nThe tip about needing a custom submit button for this case helps a lot too. I will try these ideas out and let you know.\n. Ruby on Rails uses a hard-coded key base as the attribute to use for form-level (many fields involved or non-field-specific) errors. That way the client knows to place the error at the top of the form, not associated with a specific field. Is that sort of what you mean?\n. Perhaps there is a better paradigm for validation when using React.js...?\nFor example, let's suppose that the validation works as intended in my sample project. In that case I'd make a feature suggestion. Take the power of React.js and turn \"error messages\" into \"coaching messages\" and successful validation would transform from \"lack of errors\" into \"validation success messages\".\nSo I use your library to mark all failed validations in yellow text, and the default for non-blank field would be green (passes validation).\nCan you help guide me here? :)\n. I think your solution of using the onBlur property instead of onChange is perfect. I should have thought of that... :)\nThe tip about needing a custom submit button for this case helps a lot too. I will try these ideas out and let you know.\n. Ruby on Rails uses a hard-coded key base as the attribute to use for form-level (many fields involved or non-field-specific) errors. That way the client knows to place the error at the top of the form, not associated with a specific field. Is that sort of what you mean?\n. ",
    "christianalfoni": "Hi @cmwelsh and thanks for you feedback :-)\nWhen it comes to usability I would recommend validating on blur, not on submit as that will feel a bit annoying I think. That said, if the user would insert an email and hit submit, that would cause the input to blur and you would get the same effect. But there is one problem and that is the submit button. It will be disabled if an input is invalid after a submit and you would not be able to resubmit until the input was manually blurred. But I have a suggestion that will require me to implement a fix.\nDoes this seem like an okay solution?:\n``` javascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n  },\n  render: function () {\n    var color = 'gray';\n    if (this.showError()) {\n      color = 'red';\n    }\n    var border = {\n      border: '1px solid ' + color\n    };\n    return (\n      \n\n{this.getErrorMessage()}\n\n    );\n  }\n});\nvar MyTestComp = React.createClass({\n  render: function () {\n    return (\n      \n\nsubmit\n\n    );\n  }\n});\n```\nAs you can see I hide the \"native\" submit button and roll my own. You also see the input setting its value on blur instead of change.\nIf this solution is acceptable I will make the change to let developers use their own submit button. The onBlur part already works :-)\nWhen it comes to your second suggestion, I am a bit unsure what you mean. Maybe you could clarify with a specific example?\nThanks again for the feedback and glad this helped you out! :-)\n. Hi @mschipperheyn!\nI am working on an idea to exclude the buttons from the Formsy.Form itself and let you as a developer decide where they should be an how they should behave. Need to figure a couple of things out first though. I will let you know :-)\nI totally agree with your statement.\nI will let you know when I have worked out the idea and ask for your feedback before implementing :-)\n. Hi again @mschipperheyn , this is what I suggest:\nSince the lib is pretty new I would like to do an API change. First remove anything related to default buttons:\njavascript\nFormsy.defaults({\n  contentType: 'urlencoded', // default: 'json'\n  hideSubmit: true, // REMOVE IT\n  submitButtonClass: 'btn btn-success', // REMOVE IT\n  cancelButtonClass: 'btn btn-default', // REMOVE IT\n  buttonWrapperClass: 'my-wrapper' // REMOVE IT\n});\nInstead add two new handlers for the form:\njavascript\n<Formsy.Form onInvalid={this.disableButtons} onValid={this.enableButtons}></Formsy.Form>\nThat way you get a lot more flexibility. Yes, you would have to code that default behavior yourself, but the API is simpler and more flexible.\nWhat do you think?\n. Got those handlers in place :-)\n. Hehe, no worries @srconklin :-)\nIf you have time to summarize where the mistakes were made, I could update the readme and make some things more clear. To prevent others meeting those same challenges. \nIf you have time and see any value in it of course :-)\n. Hi again @mschipperheyn!\nThis is a great feature. I will add this with the handling of submit button. I suggest adding a \"headers\" object in the Formsy defaults config and of course as an attribute on the Formsy.Form components.\nThat seems okay?\n. Hi @mschipperheyn , got new version out with headers option. I chose not to go further than just the header object for now. Let me know if you get into a situation where more is needed :-)\n. @mschipperheyn No worries, thanks for checking out the lib :-)\n. Fantastic Laust, your are now the top contributor ;-)\n. AwesomeI Will just change \"isWordsSpecial\" to \"isSpecialWords\". Reads more human like ;-)\n. Hi @ztsmith , sorry about that and thanks for pointing it out. The 0.4.1 tag is now pushed to the repo :-)\n. Great! Thanks for the help :-)\n. Thanks for the pull request!\n. Hi @FoxxMD , this is a very good point!\nWe could add a new method to the form elements, something like: \"isPristine()\"? So you could check:\njavascript\nif (this.isRequired() && this.isPristine()) {\n  // Show required\n}\nCould that work?\n. Hi again,\nWhat triggers the change?\nGood point! :-) Conceptually you want to tell the parent form when the input is \"touched\", whatever that might be. By default that would be when the input changes its value, which lets us hook up \"isPrestine\" to the \"setValue\" method. But as you say, you might do it when blurring. To keep things simple I would suggest that you would have to run \"this.setValue(this.getValue())\" when blurring to achieve the prestine effect. That will keep the API simple, as it is only the \"setValue\" method that changes the pristine value. I fear the API becomes very complex if you get too much control of this. What do you think? \nCould all inputs be triggered globally?\nAnother good point! :-) I agree that submitting the form should set all elements to \u00ecsPrestine() -> false, as kind of a \"global touch\". At least make that part of the first implementation. It can be reconsidered if there is feedback on scenarios where that might be a problem. This happens in the background so can easily change it.\nProgramatic triggering?\nHm, yeah, it is an interesting scenario. Though I think it will add too much complexity, at least for now. I think it is a good idea to get some more experience with \"prestining\" in Formsy :-)\nLet me know what you think and we can start the implementation. I think it is time to bring in some tests now too, so that should also be part of the next release. Feel free to contribute to this with pull requests, or I will start on this next Wednesday :-) \n. Hi again @FoxxMD!\nI have the day off tomorrow so I will be looking into all current issues and create tests, but do feel free to apply a pull request, it would be cool to see how you would solve it in the current codebase :-)\nAbout your question I do see your point, but I think it should be up to the developer to decide if the form could be submitted or not while invalid. For example by disabling the submit button when the form is invalid. That is why the \"onInvalid\" and \"onValid\" handlers where introduced. Give more flexibility :-) Does that make sense? Please let me know if there are scenarios I have not considered.\n. Okay, this is now in the code, also with a test. Will be part of todays release.\n. Hi Scott!\nYou know what, we seem to have forgotten to document the \"value\" attribute.\njavascript\n<MyElement value=\"whatever\"/>\nThat should set the default value :-) Will update the readme now!\nDid that solve your problem?\n. I am having a look at this tomorrow, thanks for the feedback :-)\n. Hi again,\nThis is now fixed :-)\nWill be part of the release later today.\n. Hm, it is not fixed, broke all the tests.\nIt creates a circular reaction where the change of that value requires a new validation which again sets the value and again validates and so on.\nActually I think you have to structure this a bit differently. Instead of using the \"defaultValue\" on the input I would do this:\n``` javascript\n  componentWillReceiveProps: function (nextProps) {\n// Only change to the new default value if it is currently showing the old one\n    if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n      this.setValue(nextProps.defaultValue);\n    }\n  },\n```\nAnd if you want an empty input to change into the default input:\njavascript\n  changeValue: function (event) {\n    this.setValue(event.target.value || this.props.defaultValue);\n  }\nI think this will solve your problem :-)\n. Let me know if I misunderstand, but you want the input to show \"John\" instantly?\nI think the easiest way to achieve this is by also passing it as a value:\njavascript\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <Form.Input name=\"firstName\" required value={this.state.profile.first} defaultValue={this.state.profile.first}/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nSo you handle the \"initial value\" using the normal \"value\" attribute, and your custom \"defaultValue\" attribute as the fallback value. You could consider also using the \"componentWillMount\" method to grab the \"defaultValue\" prop and set the value of the input:\n``` javascript\nvar Input = React.createClass({\n    mixins: [Formsy.Mixin],\n    componentWillMount: function () {\n      this.setValue(this.props.defaultValue);\n    },\n    changeValue: function(event) {\n        this.setValue(event.currentTarget.value || this.props.defaultValue);\n    },\n    componentWillReceiveProps: function (nextProps) {\n        // Only change to the new default value if it is currently showing the old one\n        if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n            this.setValue(nextProps.defaultValue);\n        }\n    },\n    render: function() {\n        var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n        var errorMessage = this.getErrorMessage();\n    return (\n        <div className={className}>\n            <input type=\"text\" value={this.getValue()} onChange={this.changeValue} />\n        </div>\n    );\n}\n\n});\n```\nThen you do not have to pass the \"value\" attribute at all, as the \"defaultValue\" attribute will be the initial value of the input.\nHopefully I understood the problem :-)\n. Hi yeah, that sounds right :-)\nMaybe you should consider not rendering the form until the async mixin is done?\n. Hi there,\nCould you try updating to the latest version of the lib? It now supports dynamically inserted form elements, which I think might fix your problem too. Let me know if not and we will dive into this a bit more :-)\n. Hi there,\nGood to hear that it works! Hm, yeah, it could handle undefined as an empty string. But again:\njavascript\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email || ''} />\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nWould also work. It should at least throw an error. Have to think about that :-)\nThe issue with componentWillReceiveProps is that a setValue call will trigger a new form validation, which again triggers componentWillReceiveProps. So you should get a loop. You could of course just do:\njavascript\ncomponentWillReceiveProps: function (nextProps) {\n  if (nextProps.value !== this.getValue()) {\n    this.setValue(nextProps.value);\n  }    \n},\nI think :-)\n. Thanks for input @ppiekarczyk. This should be handled by Formsy now. About the pristine vs default value. Would you set up a new issue on the problem, if it still exists? Loosing my overview powers on this issue ;-)\n. Hi @MattAitchison,\nYeah, it should go through children of children until it meets a child with a \"name\" attribute or is at the end branch. Your experience differs?\n. Ah, sorry, I misunderstood. Currently it does not handle that. I am having a Formsy day tomorrow, so I will look into this :-)\n. Btw, how do you feel about just mapping the inputs to whatever you want instead? To me it does feel a bit weird to declare data structure in the \"HTML\" of the component. An example could be:\njavascript\nvar mapModel = function (model) {\n  return {\n    \"startYear\": model.startYear,\n    \"endYear\": model.endYear,\n    \"terms\": [\n      {\n        \"name\": \"term1\",\n        \"startDate\": model.term1_startDate\n        \"endDate\": model.term1_endDate\n      }\n      {\n        \"name\": \"term2\",\n        \"startDate\": model.term2_startDate\n        \"endDate\": model.term2_endDate\n      }\n    ]\n  };\n};\n<Formsy.Form mapModel={mapModel}/>\nThis gives a lot more freedom and it reduces code complexity a lot. It also prevents locking an \"HTML\"-definition into a certain data structure. What do you think?\n. Okay, goody, I have added a \"mapping\" property to the form where you can do as explained in the previous comment. Will be part of release later today :-)\n. DOH :-) Thanks @smokku!\n. New release pushed\n. You are perfectly right, working on bug fix release now :-)\nNext release will include tests as this is starting to shape up quite nicely!\n. New release is pushed\n. Hi guys,\nWe have this API now:\njavascript\nvar Comp = React.createClass({\n  onSubmit: function (data, resetForm, invalidateForm) {\n     myAjaxService('/url', data)\n      .error(function (errors) {\n        errors // { test: \"Not valid input says the server\" }\n        invalidateForm(errors);\n      }); \n  }, \n  render: function () {\n    return (\n      <Formsy.Form onSubmit={this.onSubmit}>\n        <MyInput name=\"test\"/>\n      </Formsy.Form>\n    );\n  }\n});\nYou could basically do whatever you want when server responds, but to map to inputs you use the \"invalidateForm\" callback.\nDoes that solve it? Maybe the documentation is lacking a bit here?\n. Hi @drewhamlett !\nDo you want to validate the form values before they are passed to the server? Or do you want to validate values passed from server before they are put into the form?\nWell... basically, do you want something like: Formsy.validate(myValue, 'isEmail') ? :-)\n. Hi again :-)\nThat is good to hear!\nAha, of course, now I understand. In theory this should work just fine, just have to implement promises support. The only restriction I see is that you might get into trouble if you run it a lot. You could add a debounce thingy around it though. Hm hm...\nLet me think about it and try it out, I think it should be good. It is a good idea :-)\n. Okay, so I thought about it some more. It adds a lot of complexity and it is an edge case. Is is even valid to ask the question if this really is the responsibility of Formsy.\nI would suggest using a \"required\" on this form element and do the ajax stuff inside it. Only if you get a valid value back from your ajax request you actually set the value, setValue(), which will fulfill the \"required\" and make the form element valid. \nDoes that make sense?\n. Just closing this as it is getting old\n. Ah, awesome, here it is :-)\nI will go through it tomorrow and create a new release. Thank you! :-)\n. This looks great! Thanks :-) Writing some tests and adding a couple of other things and will make a new release!\n. Hi @burtyish,\nActually, the input itself does not need a name attribute. Create your own credit card info formsy element, something like:\njavascript\nvar CreditCardInfoInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  updateValue: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return <input value={this.getValue()} onChange={this.updateValue}/>\n  }\n});\nThis wraps your plain input, without a name attribute, into a formsy element. You can now use it like this:\njavascript\n<Formsy.Form>\n  <CreditCardInfoInput name=\"creditcardinfo\"/>\n</Formsy.Form>\nThe name attribute used here has nothing to do with the input inside. It is just a property on the CreditCardInfoInput component that Formsy will use to identify the property name for the value. So you are following the guidelines with this solution.\nHope this was an okay explanation, but please let me know if you have more questions :-)\n. Sweet :-)\n. Hi @AlexeyFrolov and thanks for the input!\nI do see your point with doing the validation outside of the form and use props to tell which inputs has errors etc., but how would you handle validation done when the input itself is changing? How would you handle indicating required fields? How would you handle pristine state? \nWith a simple form that only changes state when it is submitted I totally agree with your argument, but the increase of complexity when validating the form \"as you type\" requires this tight coupling I think. Also looking at normal HTML5 attributes with the pattern-attribute and even just using a type-attribute (email, phonenumber) gives you validation on the form, much like Formsy validations-attribute (http://www.the-art-of-web.com/html/html5-form-validation/).\nBut you are very welcome to just use the onSubmit method and do the validation there, passing updated error props to the inputs in your form. But then you probably would be better of just using a normal form I think :-)\nPlease correct me if I misunderstood your input!\n. Hi again @AlexeyFrolov,\nHow would you feel about something like this:\nhtml\n<Formsy.Form onSubmit={this.validate} errors={this.state.errors}>\n  <MyInput name=\"myInputName\" validationError=\"Something wrong here\"/>\n</Formsy.Form>\nSo the errors object you pass in will be in the format of: { myInputName: true }. That way you can control all validation from outside the form. Would that make sense?\nIf not, please give me an example of how you would expand the API to cover the need discussed here :-)\n. This will soon be released as validationErrors property on the form. You can use onChange or onSubmit to set any errors manually by updating the object on the validationErrors prop.\n. Hi Brett!\nThis is a difficult one :-)\nFormsy allows for setting any value as the value of the form element, not just strings and booleans as you typically can with traditional form elements. If forcing everything to be a string I believe it will restrict too much, at least for now.\nI suppose you created the isInteger validation rule yourself? Or are you referring to the isNumeric default validation rule?\nIf you created isInteger yourself I suggest you add a check to the validation rule, or convert it to string as that is what you want for your specific forms. If you are referring to the default isNumeric validation rule I think it should also be \"true\" when validating integers, so I can fix that.\nDid I understand you correctly on this? :-)\n. Hehe, thanks for that note ;-)\nI will add this as a bug and fix it. Thanks for the report!\n. This should be fixed\n. Hi there!\nFormsy.Forms require Formsy elements, you are using a native input. If you wrap those inputs in components:\n``` javascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return \n  }\n});\n// In form component\n\n\n\n```\nMaybe I should document this a bit better? The reason it works this way is that creating formsy element components, like MyInput, is what gives you all the functionality. It has been suggested to give a default input out of the box, but it is so rarely you actually need just a simple input. You probably always want to wrap some divs, show your validation errors as you see fit etc.\n. Hi Brett,\nSorry for late response, this issue got totally lost on me!\nThis should be fixed for next version!\n. Should be fixed\n. Looking good, except I was a bit unsure of the timeout thingy to prevent too many onChange events. I changed it around a bit and needed also to do so to make dynamic inputs work. They also trigger a change event, when they occur.\nAlso wrote a test for this. It is included in next release :-) thanks for the reference code!\n. Hi @gilbarbara, sorry for the late reply!\nAs I understand it you might get away with using an internal state:\njavascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  getInitialState: function () {\n    return {\n      value: this.props.value\n    };\n  },\n  updateValue: function (event) {\n    this.setState({ value: event.target.value });\n  },\n  syncValue: function () {\n    this.setValue(this.state.value);\n  },\n  render: function () {\n    return (\n      <input\n        type={this.props.type}  \n        name={this.props.name} \n        onChange={this.updateValue}\n        onBlur={this.syncValue} \n        value={this.state.value}  \n      />\n    )\n  }\n});\nYou think that could work?\n. Hi @gilbarbara,\nSo you basically just want freedom to run the validation rule on the current value, without actually triggering validation?\njavascript\n  render: function () {\n    var isValid = this.testValid();\n  }\nSomething like that? The only thing it does is run the current value against the validator.\n. Will see if I can include this in next version :-)\n. This got a bit more complex than first expected, have to wait for next release\n. Okay, this will be part of next release :-)\n. And it has been accepted, awesome stuff, thanks :-)\n. Awesome, thanks :-)\nWill include it in next release!\n. And again, thanks! I will pull it in, just verify a couple of things before release, but looks good! :-)\n. That makes sense, thanks Hana :-)\n. Nice :-) I will just move the querySelector line to be run once. Not that we will hit a performance issue... have to blame OCD. Glad you like it!\n. Lets give it a try :-)\n. Yeah, that would be awesome. Starting to work on next release tomorrow:\njavascript\n<MyInput validationError={{email: 'whatup', foo: 'bar'}}/>\nJust makes sense :-) You think so too?\n. Jup, thats what I wrote too? :-)\n. Ah, yeah, hehe, sorry. Will implement this for next version. Thanks for a great input!\n. Is included in next version\n. Ah, sorry, I confused this with a different issue. Will implement very soon :-)\n. Hi!\nYeah, it was a usability decision there. Please give me a comment on how it went converting the rules. Maybe we can find a solution here :-)\n. @jhampton You know, the next release has a validationsError prop on the form which can be used for external validation tools. Will give an example in next release which is right around the corner :-)\n. Hi @sdemjanenko ,\nDo you have an example of when this happened? Its just to keep my head wrapped around the scenarios the form can get into :-)\n. Hi @bryannaegele! This looks great, thanks!\n. btw, I added a validation run when the validations change, so that existing values that receives new validations are validated against those immediately.\n. Checking this out for the next release :-)\n. This should work with version 0.8.0\n. Hi @sdemjanenko , you have lots of ideas, great! :-)\nSo what you are suggesting here is the need for having a reusable set of inputs that would namespace their names? So in your example the inputs would be:\n- one.foo and on.bar\n- two.foo and two.bar\n?\nYou should be able to solve this with just plain React and Formsy though?\n``` js\nvar ScopedInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function() {\n    return \n\n\n;\n  }\n});\nvar ConfigureForm = React.createClass({\n  render: function() {\n    return \n\n\n\n  }\n});\n```\nI think a mixin hides too much implementation details, unless I am misunderstanding something here of course :-)\n. Hi guys,\nSorry that I do not quite understand why you need this ;-) You have a couple of more examples?\nTo namespace inputs I would suggest as the example above:\n``` js\nvar ScopedInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function() {\n    return \n\n\n;\n  }\n});\nvar ConfigureForm = React.createClass({\n  render: function() {\n    return \n\n\n\n  }\n});\n```\nBut I think there is something I do not quite get here maybe? Would be great with some more code examples :-)\n. Hm hm, do you have some example code @sebas5384? I have a feeling I am misunderstanding? Or does my example above solve the issue? :-)\n. Nested inputs are implemented in last version. name=\"foo.bar\" = {foo: {bar: VALUE}}\n. Hm, okay, I will check this locally first. Thanks for contributing! :-)\n. Okay, I have to solve this a bit differently, but thanks for contributing to the solution!\n. Okido, I will try to provoke this error and create a test for it too, thanks! \n. Ah, of course, thanks for that @snario !\n. Hi @sdemjanenko,\nYou should be able to do that using the \"onChange\" property of the form? Or does that not suffice?\n. Yeah, you make a good point here, I will bring it in with the next version :-)\n. hi again @sdemjanenko ,\nLooking at this again I just want to discuss a bit more before implementing. I just have to make sure that I do not add something that does not cover the challenge you are having.\nSo, the issue here is that you want to grab the initial state of the form. Saying that you are referring to the inputs and their values? The object that you receive on onChange?\nWould it not be possible to just set that initial state on your wrapping form component?\njs\nvar FormWrapper = React.createClass({\n  getInitialState: function () {\n    return {\n      values: {\n        foo: 'bar'\n      }\n    };\n  },\n  setValues: function (values) {\n    this.setState({values: values});\n  },\n  render: function () {\n    return (\n      <Formsy.Form onChange={this.setValues}>\n        <MyInput value={this.state.values.foo}/>\n      </Formsy.Form>\n    );\n  }\n});\nAnd when the \"onChange\" event is received you use that to set the new values?\n. Looking at the implementation it seems that you want to check if the values of the form has changed? So if a user has changed something back to the pristine value you want it to be \"hasChanged = false\"?\n. @eventhough This is an interesting suggestion! Would you mind creating a new issue on that? I will close this now. I would suspect we have to add a flag-property to the form. Thanks :-)\n. Aha, nice, thanks :-)\n. Yeah, you make a good point here. Though I think we get more flexibility by introducing: onValidSubmitand onInvalidSubmit. So onSubmit always fires. What do you think?\n. Allrighty, this is part of next release :-)\n. Yeah, that would be awesome :-) I was thinking of including \"clean implementations\" of the default form elements. So instead of <input type=\"text\" name=\"foo\" value=\"bar\"/> you would say: <Formsy.Input type=\"text\" name=\"foo\" value=\"bar\"/> and you would get the exact same thing.\nWhat do you think? Not possible to do it with native inputs, at least not with current implementation, and what current implementation details would be lost if going down that path.\nIt is an interesting idea for a second version of Formsy though. The lib is not really very \"simplistic\" right now, but it solves the complexity of forms I think, and that was the main focus of the first version :-)\n. Will include this on release after next one :-)\n. @eriklharper Since you mentioned contributing, this would also be an awesome contribution. You seem to have some ideas there too ;-)\n@alexduan Yeah, could have a separate project bringing wrapped bootstrap components. That would indeed be very nice :-)\n. hi @afitiskin and thanks for the suggestion!\nThough I like the concept of a container, I am a bit uncertain how this would be reusable. I think it would be nice to just:\njs\n<Formsy.Form>\n    <Formsy.Input/>\n    <Formsy.Textarea/>\n</Formsy.Form>\nAnd implement a Formsy version of displaying validation errors etc. ReactSelect would not work of course, but again you would have to implement all the required, validation error display etc., so you would have to build a form element component for ReactSelect regardless.\nLet me know if I misunderstood your example!\n. I have been thinking about this some more and though I think it is nice with a default set of elements I do not think Formsy itself should have this. There are just so many ways to handle validation. Its better that other projects provide form elements with custom validation handling in regards of UI.\nLike the https://github.com/twisty/formsy-react-components project.\nI will update the README to point to that project.\n. Hi @simiographics ,\nFormsy does support dynamic inputs. It should be possible in your form wrapper component to have custom logic for your checkboxes. When clicking them you render the different input groups. Formsy should notice this and change its internal model. \ndid that make sense? I could give you an example if it seems a bit fuzzy :-)\n. Hi @eriklharper ,\nAha, I see. Yeah, onSubmit should trigger when the form itself is programmatically triggered. Will check this out, keeping it open as a BUG. thanks and glad you worked it out :-) \n. Hi @eriklharper,\nHave you tried not wrapping in jQuery? This seems to work on my end. Just do:\njs\nthis.refs.question1.getDOMNode().submit();\nUse native behavior. jQuery probably does some crazy wrapping messing things up :-)\n. Hi again @eriklharper ,\nHm, yeah. You would have to register a native event listener preventing that behavior. What a pickle this is :-D\nYeah, getCurrentValues() is actually an internal method, but glad I exposed it now. Let me add this as an enhancement and document it. Glad it worked out for you. Sounds like a very reasonable implementation.\nYeah, jQuery registers a listener and wraps \"event.preventDefault\" by default I believe :-)\n. Hi @mull,\nCould you explain a bit more what you are trying to achieve? Formsy handles the native form submition and prevents default behaviour. What do you need the form event for?\n. Hi @mull,\nThis is probably the wiring of React I believe, since you trigger a native event doing that. But you can do this:\n``` js\ntestSubmit() {\n  this.refs.form.submit(); // Point directly to the form component\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n```\nDoes that solve your challenge?\n. Hehe, great ;-)\n. @mull ,\nBut things work as you want now? If so, I will close the issue :-)\n. Sweet!\n. Second argument should be a reset function. Does it not set pristine state\nmaybe?\nOn tor. 12. mars 2015 at 20:25 Stephen Demjanenko notifications@github.com\nwrote:\n\nI have a case where after submitting a form I would like to reset it to\nthe pristine state.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/46.\n. Yes, you are right! There was an initial uncertainty on \"what is a none value\". But since Formsy ended up allowing any kind of value really this should be given an other look.\n. This is fixed in next version\n. Cool :-)\n. Jup, I agree, this fits well with the new validationErrors prop on the form. Will include in next release :-)\n. Hi again,\n\nI started to implement this and realized that though an object would be nice it is difficult to translate some values. Like:\nisLength:5:12\nAnd most validators are simple strings. Like if you create an app you would rather create your own validators like \"isUser\", \"isProduct\" etc.\nBut I fixed the bug :-)\nI want to keep the API as simple as possible, so I think it should be strings or object. not both. I hope to get around to build Formsy React 2, which probably will use objects instead. Learned a lot from inputs on this project. Some good decisions and some bad were made ;-)\n. I decided to use: 'value' in this.props as you really should allow any value. But great contribution and thanks for the tests :-)\n. Thanks for that @sdemjanenko :-)\n. Ops, thanks ;-)\n. Hi @sdemjanenko,\nThe implementation looks good, but I just have to understand the scenario where you need it. The API is getting pretty large and I try to be a bit restrictive if it can be solved an other way :-)\nLets continue discussion on #40 \n. You know, I am sold on this implementation, will just change the dep to the internal isSame util. Thanks @sdemjanenko , will be part of next release!\n. Will manually bring this in.\n. @sdemjanenko You make an excellent point. I will try to make this part of next release!\n. This is part of next release now\n. Good point, hm... I just want to get this next release out and will look into this when its out. Thanks for the input!\n. Just wanted to let you know that this will be part of release 0.13\n. This is now added! :-)\n. I am having a full review of testing before next release. With Node 0.4 release I have to change the way testing is done. It will be better :-)\n. Fantastic, thanks for contributing! :-)\n. Hi @Semigradsky, thanks for bringing that to my attention. That is a bug, will be fixed with next release, thanks :-)\n. Fixed in next release\n. Hi @Semigradsky ,\nThanks for the input, this looks like a good idea!\n. Decided that XHR will be removed in 1.0 release as it is very easy to hook that manually to the form. Formsy is a form lib, not xhr lib. Covered too much initially ;-)\n. Hi @frost555 ,\nSorry for late response, I have been suck with the flue.\nAs I understand it when an error from the server occurs you want that error message to be ignored when the input is changed? The error should be reset every time setValue() is called. Does that not happen?\n. hi again @frost555,\nI will check this ASAP\n. Hi @frost555 ,\nVery sorry about the delay here. I can confirm the error and will try to make a fix right now. Thanks for reporting!\n. Okay, fixed, there was indeed a bug here. Thanks for reporting @frost555 ! Will be part of next release\n. Hi @mistakster ,\nSo sorry for late reply, but I have been sick with the flue, but back on my feet now :-)\nWill merge an release new version!\n. At 99% ;-)\nReleased new version, hope everything works okay now.\n. Hi @philippotto ,\nThanks for the input!\nDo you have a code example of how you would like this to work? Just so I am completely sure that I understand what you are asking for :-)\n. Cool, I will check it out :-)\n. Ah, great, thanks for that :-)\n. Hi @jonaswindey ,\nSo sorry for the delay here, but I have been sick withe the flue and at the same time moving across the country, bad timing on my part ;-)\nI have merged and released a new version supporting 0.13.1. Thanks so much for your patience!\nbtw, made sure old version of React still works so will just close this pull request.\n. Hi @philippotto,\nI have implemented a isValidValue that you can use inside a component to run any value against the set validators for that component. So it runs the exact same code as when the real validation occurs. Let me know if this does not behave as expected :-)\nI will work on running the tests with travis as soon as the next release is out :-)\n. Hi again @philippotto ,\nAha, I see, sorry about my confusion on this :-)\nYou are correct in your assumption about isValidValue. Okay, I think I understand what you want now :-)\nYou want Formsy to validate in two different ways. Either by passing global formsy validation rules as props or, as you propose, run a method on the component which has its own validation logic.\nThat makes sense :-)\nI would suggest just calling it : validate. Let me pull this request now and put it next release.\n. This is fixed :-)\n. Hi guys,\nYeah. Formsy does take an approach with React that is not best practice. There is a new release coming up now with some more functionality. After that I will start on Formsy 2, which conforms more to best practices, but will probably have a few breaking changes.\nThe challenge is that a form needs to create a relationship with its children form elements. Now this is done by iterating the children of the form instance, adding some properties and a mixin on the form elements uses these props to communicate with the form instance.\nAn other way to go about this is using pure events, but that changes the syntax and I am unsure if it is doable. It would be something like this:\njs\nvar Form = React.createClass({\n  mixins: [Formsy.FormMixin],\n  render: function () {\n    return (\n      <Formsy.Form>\n        <MyFormElement name=\"foo\"/>\n      </Formsy.Form>\n    );\n  }\n});\nThe mixin finds the FormsyForm element in the component and registers custom event listeners like: \"Formsy.setValue\", which then the children form elements can trigger and will be catched by the parent form. The problem is that React JS does not support custom events, would have to use native events, which reduces the testability with Formsy as tests would have to be run in the browser. I think this might be a good tradeoff though. \nLet me create an issue discussing next version of Formsy :-)\n. Linking to issue: #66 \n. @gaeron , thanks for that input! This definitely seems like a valid way to go. I have been using it to solve other scenarios, so I will play around with it a bit :-)\n. Hm,\nSeems we have to wait for React 0.14. Tried getting this new parent-child context temporary patch working, https://gist.github.com/jamesknelson/1481521444e1529d59aa#file-react-parent-context-patch-js, but can not get it to work.\n. @jmartin84 Will look into it, might work :-) Thanks!\n. @jmartin84 I checked it out, but it only works with immediate children, need something a bit more flexible. Got the new parent-child context thing running now so I think we will end with that solution .It is also confirmed for next React release, so I think we are in the clear on this challenge :-) Thanks for the suggestion though! \n. @jmartin84 Actually, this is exactly what we can do. I just did not see clearly how to handle nested children, but I do now :-) Will create a fix for this. Will still change to context on React 0.14, @gaearon , as it is more optimized. But now we are in the clear, awesome, thanks!\n. Hi @Semigradsky,\nThat is the bundled release. To use formsy in Node environments you require it like a normal NPM module:\njs\nvar a = require('formsy-react');\nHope that answers your quesiton :-)\n. Hi again,\nIt is for people using bower or just use a normal script tag and use it globally :-) Or requirejs.\n. Hm, bower.json we still need though? Bower checks what tag to download by looking at that file?\n. Ah, sorry, I am confusing with .gitignore :-)\nI will pull it in! Thanks\n. Hi @Semigradsky,\nThis is a great contribution, thanks! Version 1.0.0 of Formsy will use webpack also for development, so this is very welcome indeed. \n. @Semigradsky ,\nYeah, I agree on that. I will remove it for next version. Thanks for the input!\n. Hi @gpbmike ,\nDo you set the initial value to false? \njs\n<MyCheckBox value={false}/>\nIf so it should work. The 'value' in this.props only checks if the key \"value\" exists in props, not if the value is \"truthy\".\nThe reason behind '' is that you can really create any element. If a checkbox has its value by default false, there is no way for Formsy to understand that. You kinda have to tell it by passing a default \"false\" value. What you get back though is lots of flexibility in what kind of form elements you want to build :-) \nExample of checkbox:\n``` js\nvar MyCheckbox = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(!this.getValue());\n  },\n  render: function () {\n    return (\n      \n\n\n    )\n  }\n});\n\n```\n. Ah, cool, great :-)\n. Hi @marnusw ,\nThanks for taking the time to review the implementation :-)\nThe reason I implemented setInputValidationErrors is because that one will always go through all inputs and set the valid state based on any errors passed. It basically resets the input if there was an error there, and then there is no error. So it is needed.\nThe updateInputsWithError does the opposite. It goes through any errors passed and set those errors, as you say.\nThat said, you might be right :-) But I believe the first method has to be used, because it makes sure that any inputs that current state is error is reset to valid state when there is no error anymore. Does that make sense?\nI agree that getCurrentValues() eliminates updateModel(). Cleans up the code :-)\nWould be great if created a pull request for this, though make sure that passing errors on the form, and then removing them, resets the inputs to valid state.\n. Cool! I will just close this issue. Please comment again if you want to discuss some details on this :)\n. Thanks @paddyinpdx, will fix this on next release :-)\n. This one should work on release 0.12\n. Hi @gilbarbara ,\nFound the bug, it will be fixed on next release, thanks for reporting :-)\n. Hi @mloginov ,\nFound the bug, will be fixed on next version, thanks for reporting! :-)\n. Hi @arunthampi, yeah, that would be great! Thanks a lot, and thanks @Semigradsky for helping out with support! :+1: \n. Hi @frost555,\nThanks for noticing, will fix that!\n. Fixed, will be in next release\n. Hi @Semigradsky, thanks for the pull! I chose to handpick and implement myself, but you will get credit for it, thanks for the pull! ;-)\n. Hi @Semigradsky,\nAwesome stuff! Could you create a pull to document the example and how to run it? That would be awesome!\n. @Semigradsky, maybe add it with a pull to explain how to run the examples? As mentioned in #79. Would be really great, thanks for contributing! :-)\n. HI @frost555 ,\nYeah, I think you are right, I can not see a scenario where it would be useful. But if it appears, we know what to implement :-)\n. HI @eriklharper ,\nI think you have to fix a couple of things first:\nevent.target.value, not currentTarget. currentTarget would be the body I think, as that is where the event is captured. target is the element that triggered the event, the input :-)\nAnd I also see you referencing this.state.required,should be this.props.required?\nHope this helps!\n. Hi @eriklharper,\nGreat you got it working :-)\nI would love getting started with the wiki. The repo has a technical description, but the wiki could be a more practical description. Showing how you build different types of form elements and explaining strategies to validations etc.\nhttps://github.com/christianalfoni/formsy-react/wiki\nFeel free to do whatever you want there, or nothing if its boring ;-)\n. Hi @janmyler ,\nSorry for late response. Formsy will still require mixins, but the relationship between the form and the form elements will technically use context. It is more performant than the current solution and the Formsy.Form element and its child form elements can actually live in different \"owners\". Which basically means they can live inside different \"render\" methods and still have a relationship.\n. @pkmiec and @firstdoit , yeah, I totally agree. I have no experience with React Intl (You referring to Yahoo?) or formatjs, but I am very open to suggestions and examples of how to handle this!\n. React 0.14 is now in Beta and I am working on the next release. When 0.14 is released and the new version has been tested, we go for 1.0 release :-) \nWhen it comes to translation I do not see why formsy needs a wrapper for this. As you probably have other translations in your project already, so:\njs\n<MyInput validations=\"isEmail\" validationErrors={{isEmail: translate('invalidEmail') }}/>\nIt would work just like translating any other text in your components?\nClosing this issue as things are moving along.\n. Hi @bryannaegele,\nJust wondered why you closed it? Did it not work out?\nI have just been busy working on fixing the props warning stuff for React 0.13.1, so have not had time reviewing the pull. Overall it makes a lot of sense, but have to dive into it a bit more :-)\n. Hi guys,\n@adamellsworth, @jmartin84 @darth10 @sdemjanenko @Semigradsky \nI have an idea! :-)\nI have been thinking a lot about the warnings on props being overriden. There are a few different strategies, but all of them involve \"heavy lifting\". The most effective and least intrusive is just for Formsy to suppress the specific props warnings. Normally I would say that is a bad thing, but since warnings are there to notify changes in the API and Formsy already has the implementation ready for next version AND you can not update to 1.0.0 without specifically telling NPM to do s, I believe this to be the best solution. It will ONLY suppress Formsy props warning, not other prop overrides. It does this by wrapping console.warn and checks for those specific messages.\nThe will be implemented as:\njs\nFormsy.suppressWarnings();\n// Log will show: \"Formsy is suppressing its props override until React 0.14. console.warning is wrapped and will not display correct source and line number in console\"\nIf I get an ok on this I will release a new version instantly :-)\nThanks!\n. I did some more research on this. There is a different method that will avoid this \"hack\". It is actually a method that would work even after React 0.14, though using context will optimize it. Will release it as soon as I can.\n. Ready for release.\n. Ah, missing a test for that one! Will create and thanks for fixing it @gneutzling! Will release new version now.\n. Hi @olimsaidov, \nThe change log is the releases. On the \"releases\" tab. I can point it out more in the documentation :-)\n. Hi @frost555 , since version 0.11 Formsy no longer handles Ajax directly. You have to wire it up manually. The reason is that Formsy should focus on being a good form validation tool, not ajax tool :-)\nSo by using onSubmit or onValidSubmit you can do the ajax call there and reset/invalidate the form with the callbacks received as arguments to these methods. That way you can also map whatever response you get from the server.\nI have fixed the error you pointed out, thanks for that ;-)\n. I suggest adding this as a default property on the form. Is there any reason you would not want to have \"novalidate\"... I mean, the reason you use formsy is to handle custom validation? :-)\n. Added this now. You can turn it off with: ` will be part of next release :-) Thanks!\n. Hi @dprentis,\nI did something wrong on first implementation. You should be able to use formNoValidate on the inputs too... the actual native inputs that is :-)\n. Hi guys, sorry for late reply, been in loss of time.\nI have not tested this very well. So what you are saying is that if we change documentation to:\njs\n<Formsy.Form>\n   <input name=\"foo\" required />\n   <input name=\"submit\" formNoValidate type=\"Submit\" />\n</Formsy.Form>\nWe are in the clear on this? formNoValidate does the job, though only on the native form element that runs the submit of the form? It being an input or a button?\n. Jup, I agree, will fix this for next release\n. @e-monson This seems like native behaviour. If you want commas you have to run with your own input where you suppress letters.\n. I absolutely agree. This was changed due to Formsy allowing any kind of form element with any kind of value, but these validations specifically point to \"inputs\", where a \"none-value\" should be valid.\nThis is fixed in next version! Thanks :-)\n. Hi @dprentis,\nThere seems to be a bug here, working on it now. Thanks for reporting!\n. Okay, fixed it... releasing new version now. Sorry about that, but written test for it too. Will not happen again :-)\n. Thanks for reporting, this is fixed in next release which arrives today :-)\n. Thanks for reporting @adamellsworth !\nReleased 0.12.1 now. The implementation was misunderstood. Sorry about that.\n. Hi guys!\nI am releasing a new version now where this is fixed :-) let you know!\n. Okay, released 0.12.5, https://github.com/christianalfoni/formsy-react/releases/tag/v0.12.5, would be great if you could verify that it works :-)\n. Hi @pkmiec ,\nGreat, thanks!\nYeah, this is a very specific implementation detail. The onSubmit you can register on a Formsy.Form  could get more information than just the value. Could even pass the component itself. So you would:\njs\nvar MyForm = React.createClass({\n  mySubmit: function (inputs, reset, invalidate) {\n    inputs.foo.getValue();\n    inputs.foo.isPristine();\n    inputs.foo.isValid();\n    inputs.foo.hasExternalError(); // new method\n  },\n  render: function () {\n    return (\n      <Formsy.Form onSubmit={this.submit}>\n        <MyInput name=\"foo\" validations=\"isEmail\"/>\n      </Formsy.Form>\n    );\n  }\n});\nDo you think something like that would be valuable?\n. Hi again guys and thanks for the discussion! This is a tough one and its difficult for me to decide on a good solution as I have not really been in this specific situation before. So I will just give some more suggestions on solving it with focus on keeping the API clean and simple :-)\njs\nonSubmit: function (model, reset, setErrors) {\n  setErrors(serverErrors, false); // Passing false will not invalidate the inputs, only set errors\n}\nYou think that would cover the need? The way you can decide by scenario if you want external errors to actually invalidate the inputs, or just give an error? Again, any change to the input would clear the error of that specific input.\n. Hi @pkmiec ,\nThanks for the suggestion! I think we are getting somewhere here, though I am not quite sure about delegating it to the mixin. I do see the advantage of overriding, I think it looks quite nice, but the validation of an input is not determined by the mixin, but the form. Because the valid state affects both the form and possibly other inputs.\nSo if I understand your suggestion correctly the form would not be able to invalidate on external errors, only a particular input would. \nThe way I see it is that we have two very specific behaviours we want to achieve. \"Should external errors invalidate the input and form, or should it not?\". Translating this to an API change that question is most simply answered with a boolean. My initial suggestion was on the callback of invalidating with external errors, but what about a form prop instead?\njs\n<Formsy.Form preventExternalErrorValidation/>\nOr did I miss an important point here? ;-)\n. Okay, adding preventExternalInvalidation in new release\n. Hi @pkmiec ,\nCould you check again with latest version? There was a bug with the required validation\n. Hmf, git is doing something weird with this code. Fixed with new version and added tests for it. Thanks for reporting!\n. Hi @Semigradsky,\nThanks for the fix! Great, I really appreciate the help :-) If you are ever in Trondheim, Norway, I will buy you a beer!\n. Great stuff! Thanks! Would you like to become official contributor @Semigradsky? Any changes to Formsy API have to be discussed of course, but you can go crazy with examples and documentation. And tests... ;-)\n. Cool, done, and thanks again :-)\n. Hi guys,\nReleased 0.12.5 which should fix this error. https://github.com/christianalfoni/formsy-react/releases/tag/v0.12.5\n. Hi Bryan,\n1. This absolutely makes sense\n2. If I understand you correctly you would get the opposite problem if pre populating with invalid data and expect it to trigger onInvalid? :-) Maybe a better solution is to ensure that the onValid/onInvalid always triggers after initialising?\nThanks for contributing with this!\n. Just cleaning up issues. Though you pointed out some good stuff here I will close the issue, as I have not gotten feedback on this by anyone else and I require some more discussions to make a solution. Please keep on commenting to make this part of formsy.\n. Hey @dprentis ,\nGot a pull request with lots of validation fixes, including this one. Could you verify that pull? #105 supports what you have considered? I will be releasing that now first. So it would be great with a new pull if you see anything it does not support. Sorry for the inconvenience. \n. @aesopwolf Are you not able to update to React 0.13.x? If so, that would be great, or we have to look more into it with more information.\n. Okay, glad you found a solution.  I say we just close this as people will be moving on to React 0.13 and especially React 0.14 with its new \"parent-child\" context which will help a lot of libraries out there.\n. I think it looks awesome! I have also opened up the WIKI for a more \"practical approach to Formsy\", as the README is very technical, and should be really.\nIf you have ideas to adding examples of building for elements and/or validation strategies, please feel free to go crazy :-)\nThanks, this is an awesome pull!\n. Hi @erwanjegouzo ,\nThis is really great work. Pulling it in! Thanks a bunch!\n. Hi @simiographics ,\nCould you paste a bit more code that causes the crash? If you are doing something wrong, something is missing in the documentation ;-)\n. Hi @simiographics,\nYou seem to be creating a loop here. Whenever the input changes you clean it again. In what situation do you want the input to be cleared? I suppose you do not want that whenever it changes?\n. Hi again,\nThis is very strange. I was not able to reproduce the error on a test I ran locally. I am thinking there is something \"outside\" causing the issue.\nCould you paste the complete code that runs on the previous example you gave? Try to narrow it completely down to just rendering the form with the input? I have to reproduce it to figure out what is happening.\nWould also be great to know what version of React your are running.\nNobody else has reported this kind of error so I would believe it is a weird edge case. Would be great to get to the bottom of it though :-)\n. Thanks so much for helping me out with this! Looking at it right now!\n. Okay, it is definitely a bug here. Tracking it now and will release a new version when it is fixed.\n. Okay, found the bug, fixing it now. It was a value comparison that did not handle objects and arrays.\n. Okay, fixed, creating a new release now. Just have to document a couple of things :)\n. Okay, released version 0.13 with some other fixes too\n. Great, let me know how it goes :-)\n. Hi @simiographics,\nIt seems my test did not cover this scenario. Working on it now!\n. Okay, a stupid mistake, strange that the test did not get it. Now tested with your example. Will release later today.\n. Okay, released new version, would be awesome if you could test it again. Thanks for your patience @simiographics !\n. Sweet! Good to hear and thanks!\n. Hi there! Thanks for checking this out and creating a great test case. I\nwill look into this tomorrow morning :-)\nOn Thu 23 Apr 2015 at 17:45 Pavel Nuzhdin notifications@github.com wrote:\n\n+1 it affects me too!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95629513\n.\n. Hi there,\n\nWhen testing React and Formsy in Node you need to load up JSDOM. At least currently. This is also required by other libraries so please do something like this in your test setup:\njs\nvar jsdom = require(\"jsdom\").jsdom;\nglobal.document = jsdom();\nglobal.window = document.defaultView;\nglobal.navigator = global.window.navigator;\nI am releasing a new test suite with Formsy today that uses this setup. You can check that out for more inspiration :-)\n. Hi again,\nHm, thats weird. The Formsy tests runs fine, though using jasmine-node and jsdom. Let me complete the test setup here as there might be a code change in Formsy since I last run that setup.\nIf I get the same error I will fix it or I will check out the repo with tests to dive into as it must be jest related.\n. Okay, I can verify that all Formsy tests runs fine with jasmine-node and jsdom. Looking into jest now\n. @worklez \nWhat verison of Node are you running? Seems that Jest does not support 0.12? Trying version 0.10.25, but getting an error there too.\n. Okay,\nI figured it out. Not quite sure why this happens. It might be a JSDOM thing. But you can not require the component inside the test, you have to do this:\n``` js\njest.autoMockOff();\nvar React = require('react/addons');\nvar TestUtils = React.addons.TestUtils;\nvar LoginPage = require('./../LoginPage.js');\ndescribe('LoginPage', function () {\n    it('has submit button disabled', function () {\n        var loginPage = TestUtils.renderIntoDocument(React.createElement(LoginPage));\n    });\n});\n```\n. Great, let me know how it works out! I keep pondering on why this causes an issue, it should not matter where you require. But I definitely think it is an environment thing and not a Formsy thing. Anyways, it is better to require them at the top because you probable have multiple tests using the same component :-)\n. Great! I will close the issue then. Yeah, it is a really weird problem. It would be worth checking out if this works:\n``` js\njest.autoMockOff();\nvar React = require('react/addons');\nvar TestUtils = React.addons.TestUtils;\ndescribe('LoginPage', function () {\n    it('has submit button disabled', function () {\n        var LoginPage = require('./../LoginPage.js');\n        var loginPage = TestUtils.renderIntoDocument(LoginPage());\n    });\n});\n```\nThe error itself is related to how the component is wrapped I think, or lack there of. You have createElement and also createFactory which needs to be used as wrappers on plain components. JSX syntax does this for you. Maybe the components gets wrapped automatically when required inside the tests?\n. Ah, hm, okay thanks for reporting that back. I am out of theories, at least right now. Let you know if I figure it out ;-)\n. Great input @erwanjegouzo, I think this follows the current API. Will need a couple of tests and some README documentation. If you have time, please fork latest version with jasmine-node tests and create a pull for that too. Or else I will find some time to do it :-)\n. Already did it, no worries :-)\n. Hi @binarykitchen ,\nIf that native feature is enough you should definitely use it. But Formsy is a form element builder and validator that takes the concept of form validation a lot further than native functionality. Formsy gives you any type of validation you desire and form handlers that triggers whenever the form elements you build change, becomes valid, invalid. External errors can be injected, cross input validation is not a problem etc.\nPlease let me know if you have any more questions to Formsy :-)\n. @binarykitchen using native validation would not conform with the validation possibilities you have with Formsy. So even though it would be one less validation rule packed into Formsy, setting type=\"email\" would not give you the possibility to check if input is pristine, it is required, disable the form when it is invalid etc. Btw, native invalid inputs looks different in all browsers, it is not very nice ;-)\n. You have to wrap all your form elements in a Formsy.Form:\njs\n<Formsy.Form>\n  <MyInputElement/>\n</Formsy.Form>\n. I can improve that error message to be more explicit :-)\n. This is supported yes, but not when the Form is located in a different component... a different render method\n. @firstdoit ,\nYou are perfectly right :-) Looking forward to React 0.14 with parent-child context though, then this will not be an issue anymore!\nThanks for the feedback, much appreciated ;-)\n. Hi @binarykitchen ,\nYou have to provide a Formsy.Form element too:\njs\n<Formsy.Form>\n        <MyInput\n          hasFeedback\n          required\n          name  = {@props.passwordName}\n          label = {t(\"Password\")}\n          value = {@state.password}\n        >\n</Formsy.Form>\n. It has to be inside the same component :-)\nIn React 0.14 we get parent-child context which will fix this, but currently it is not possible.\n. You are the first person to point it out actually ;-)\nWe are using Formsy on a huge project with a lot of forms and have not met that issue. That said, it would be nice to have, and it will when React 0.14 is released.\n. Jup, the important thing is that you find something that works for you :-)\n. Just to make sure there was no misunderstanding here :-) :\nThis works:\njs\nvar MyForm = React.createClass({\n  render: function () {\n    return (\n      <Formsy.Form>\n        <div>\n          <MyInput/>\n        </div>\n        <div>\n          <div>\n             <MyInput/>\n           </div>\n        </div>\n      </Formsy.Form>\n    );\n  }\n});\nBut this does not until React 0.14:\n``` js\nvar MyFormContent = React.createClass({\n  render: function () {\n    return (\n        \n\n\n\n\n\n\n\n    );\n  }\n});\nvar MyForm = React.createClass({\n  render: function () {\n    \n\n\n  }\n});\n```\n. React 0.14 is now in BETA and new formsy version is right around the corner. Will release some test info very soon.\n. Great @michaelcontento , thanks for taking the time! :-)\n. @sanemat ,\nJust want to make sure things are working for you after the latest release?\n. Good question!\nMaybe just remove it. Formsy adds complexity allowing for any kind of form element, not just traditional inputs, so I think that is too generic.\nMaybe change it out with the new \"isExisty\" function instead? And call is: \"isExisty\"? :-)\n. @Semigradsky Cool, nice! Will release new version with changes. \nBtw, I think it is easier to control releases if changes are pull requests. NPM and bower uses the tags and the current tag does not have isExisty in it, but people can read about it on the repo :-)\nNo biggy, but seems like a good way to do it?\n. Lets add a new tag, just have to review pull requests etc. do document a new release. Will do that tomorrow :-)\n. Hi there,\nThanks for discussing this. It has been a bit difficult identifying required/validation regarding \"empty values\" as formsy supports any kind of form element, not just traditional inputs.\nBut we are getting there :-)\n. Hi @mloginov ,\nIdentified problem, working on fix now, will probably be released later today. Thanks for reporting!\n. Okay, released new version, please try again :-)\n. Hi @tomaash and thanks for the pull!\nI agree this should be in there, but I have a suggestion for you. Since the goal here is to set some initial values, maybe we should put:\njs\n<Formsy.Form values={{\n  foo: 'bar',\n  bar: 'foo'\n}}>\n  <MyInput name=\"foo\"/>\n  <MyInput name=\"bar\"/>\n</Formsy.Form>\nThat way it is very specific to what you want to achieve, set some initial data. We could of course also merge in your change, as you still might need to reset the values easily :-)\n. Hi @tomaash , so sorry for late reply, but I have been completely in loss of time the last week. I will release a new version tomorrow morning including your fix!\n. Hi @crdeutsch and so sorry for the late reply. I have been deep into a different project and have just been in loss of time.\nIt might seem a bit aggressive to do the validation on each key press, though as I understand it you mean that from a user experience perspective, not a technical perspective?\nI would suggest that you add your own state to your form element. Something like, showValidation. That way you can choose with onBlur or Enter to set that state to true and combine it with the internal methods of Formsy. Like:\njs\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  getInitialState: function () {\n    return {\n      showValidation: false\n    },\n    onInputChange: function (event) {\n      this.setValue(event.target.value);\n    },\n    onInputBlur: function () {\n      this.setState({\n        showValidation: true\n      });\n    },\n    onInputFocus: function () {\n      this.setState({\n        showValidation: false\n      });\n    },\n    render: function () {\n      return (\n        <div>\n          <input onChange={this.onInputChange} value={this.getValue()}/>\n          <div>{this.showError() && this.state.showValidation ? this.getErrorMessage() : null}</div>\n        </div>\n      );\n    }\n  }\n});\nWould that make sense?\nI do not think it is a good idea to grab value from DOM node as it breaks with the principles of React. The state of the component defines what is in the UI, not the other way around. I am sure we can find a solution for this :-)\nLet me know if I misunderstood any needs and we can keep working towards a solution!\n. Hi again!\nHm, I am very certain that the DOM should not be the \"source of truth\". The component state should be the \"source of truth\". I can not quite wrap my head around how you get the inputs to go out of sync with the state of the component.\nTo solve this I think we need to set up a small project I can run locally to see the problem in context. I am sure there is a \"component state way\" to solve this :-)\nI will close this for now since you solved it with a fork and I have not gotten feedback on this from anyone else, but please keep commenting if you want this put into Formsy. Thanks for contributing with the feedback and examples :-)\n. Great! :+1: \n. Hi guys and thanks for the discussion!\nWhen React 0.14 is out, with the new context handling I think we could do something like this\n``` js\nvar AddressForm = React.createClass({\n[...]\nrender: function(){\n    return (\n        \n\n\n\n\n    ); \n}\n});\n\n\n\n\n\n```\nSo the idea here is that the extended prop would be passed into the sub Formsy.Form, causing Formsy to return a plain DIV instead of a FORM. That way you could easily include forms in forms. But we depend on the context change to make the sub elements work I believe. I will do some tests tomorrow to verify if current context implementation can make things a bit easier for us.\nBut would this useful?\n. Cool, let me put this in on release today. Getting to work now :-)\n. Hi guys,\nAre you referring to using other string values? Have now implemented:\njs\n<input name=\"address.street\"/> => {address: { street: 'value' } }\nCan not see any reason to support anything else?\n. This is the code btw:\n``` js\nreturn Object.keys(this.model).reduce(function (mappedModel, key) {\nvar keyArray = key.split('.');\n  while (keyArray.length) {\n    var currentKey = keyArray.shift();\n    mappedModel[currentKey] = keyArray.length ? mappedModel[currentKey] || {} : this.model[key];\n  }\nreturn mappedModel;\n}.bind(this), {});\n``\n. Just closing it for now as any more complex implementation has to be next version. Want to get new version out today :-)\n. But how could it be an array?` is always a string?\n. Sorry, but I do not understand how the name of an input could lead to that structure? As I understand this you want:\njs\n<Formsy.Form>\n  <MyInput name=\"foo\"/>\n  <MyInput name=\"address.street\"/>\n  <MyInput name=\"address.postCode\"/>\n</Formsy.Form>\nWhich leads to this structure:\njs\n{\n  foo: 'value',\n  address: {\n    street: 'value',\n    postCode: 'value'\n  }\n}\nHow would you structure the inputs to give a structure that would require arrays? Sorry for my misunderstanding... but its Friday after all ;-)\n. Please describe \"list support\". I do not understand what a \"list\" is in regards of naming an input? Would be great with an example of html syntax and how that translates to:\njs\n{nav_items: [{a:b, c:d}, {a:f, c:g}]}\nWhat does this form look like?\n. Hi guys,\nsorry for late reply. I think it makes sense to conform the name syntax to application/x-www-form-urlencoded type of data, which is like you describe @chrbala.\nTried finding a good lib for this, but there does not seem to exist any? But we can sure build it. So does everybody feel comfortable with:\n``` js\n< MyInput name=\"addresses[0][street]\" value=\"Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"Different Street\"/>\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\n```\n. Yes, sorry, of course. Copy/paste error :-)\n. me too,heh\n. Okay, this is now implemented, using the separate project: https://github.com/christianalfoni/form-data-to-object. Using it as a hard dependency as it is unlikely you need it for something else... will be part of next release\n. Hi guys!\nI was hoping React 0.14 would be right around the corner with its parent-child context. That should solve the issue without any changes.\nIt should be possible to fix it with a mixin too. let me try out an implementation so that it will be easy to switch when React 0.14 gets here\n. Hi guys,\nI will check out the suggestion as soon as I can and if it does not break anything I will bring it into next release :-) Thanks for taking the time @nathanwelch!\n. React 0.14 is in BETA now, and right around the corner. Implemented with context now, and other fixes. This will be the next release as soon as React 0.14 is released. Sorry for the wait, but this is the best solution (I would say).\n. I suppose this is solved?\n. Thanks for including Formsy, great comparison project btw :-)\n. Totally agree, will fix this for next release tomorrow.\n. Great, thanks :+1: \n. Hi @jcapogna,\nThat is an excellent question :-)\nI have not tried this, though I believe there are some events you can use? I think onChange will trigger on a normal FileInput\njs\nvar MyFileInput = React.createClass({\n  onInputChange: function (event) {\n    // Verify that file is correct via the event\n    this.setValue(true);\n    // Or if not valid\n    this.setValue(false);\n  },\n  render: function () {\n    return <input type=\"file\" onChange={this.onInputChange}/>\n  }\n});\nAnd then just validate with:\njs\n<MyFileInput validations=\"isTrue\"/>\nYou think that would work?\n. Hi again @jcapogna. I believe you should be able to just store the \"files\" property from the input, instead of its \"value\" property. Check out this article:\nhttp://blog.teamtreehouse.com/uploading-files-ajax\n. Closing this, hopefully it worked out :-)\n. Okay, cool, good luck! :-)\n. Hi guys, version will be bumped tomorrow morning :-)\n. This is not taken into account, but should. Might get into tomorrows release or most certainly the next after that :-)\n. Okay, this is now fixed for next release. Both validations and required can be changed at runtime and instantly a new validation check will be run. Thanks for the tip!\n. Hi @alexjg,\nJup, from the API documentation:\njs\n<MyInputComponent \n  name=\"email\" \n  validations={{\n    isEmail: true,\n    maxLength: 50\n  }} \n  validationErrors={{\n    isEmail: 'You have to type valid email',\n    maxLength: 'You can not type in more than 50 characters'\n  }}\n/>\nThat solved it?\n. Ah, sorry @alexjg , now I understand.\nYes, this should absolutely be in there. It would be great if you created a pull. I am releasing a new version today, but this would indeed be welcomed in the next release!\n. Okay, this is now in for next release. Thanks for contributing!\n. Ah, I know whats wrong. Its the passing of props to to the form element. It seems that a native form also has an onChange. Will revert back to strict control of props passed. Will release fix now :-)\n. Try now\n. Hi guys,\nYes, this is indeed something nice to have, though I am unsure that this job is for Formsy. I would expect this scenario has a model with the state of some entity on the server, like a person. The model is presented in a formsy form. Deciding what to pass to the server I think is the responsibility of the model layer, not the UI layer. So you would rather pass the whole form to the model-layer, figure out what is actually necessary to pass to the server and then do that. If Formsy is in control of this you will most likely meet scenarios where Formsy has some logic deciding what to pass to the server, and the model layer might have some of the other logic, maybe Formsy does not do a good enough job and we have to build upon the API to solve lots of different scenarios.\nSo yeah, I am concerned about introducing it in Formsy, as this is closer to the model layer than the UI layer I think. It basically drills down to comparing two objects and extracting the diff, which some other lib probably already does  very effectively.\nBut please, if you disagree we can discuss it more :-) Just my initial thoughts!\n. Yeah, though it depends on how you implement it. Either Formsy needs to keep track on \"changed values\" or it does a \"diffing\" of initial form values and current values when submitting.\nThe last part if the simplest and most effective implementation I would suggest... that said, it is very easy to make yourself. Often libraries like Backbone Model or Angular Resource allows you to do this very easily.\nSorry, but I think it is the correct choice to have this logic closer to where you communicate with the server, not inside Formsy. But please, if a lot of people disagree I will of course reconsider.\n. Let me keep this open and we will revisit after next release\n. Hi @davidtinker and thanks for looking into this :-)\nI think the best solution is to make the function referenced, instead of creating it each time (inside formsy source code). That way the diff check will not see them as different values and you do not have to do anything about it :-)\nI have changed this now, so it should be okay. Let me know if you see something I do not see!\n. Hi guys,\nHm, do you have a small code example? Currently the mixin for elements checks if the value of the element has changed, and if so, it will run \"setValue\"... also running the validation. I am a bit unsure where this list state is being used?\nChanging \"validations\" prop and \"required\" prop will correctly run a new validation in next release btw.\n. Closing old issue\n. Cool! Will create a new release as soon as I have gotten through all the latest issues :-)\n. Yup, would suggest setting the value on the blur event, instead of the change event. \njs\nvar Comp = React.createClass({\n  mixins: [Formsy.Mixin],\n  onInputBlur: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return <input onBlur={this.onInputBlur}/>\n  }\n});\nClosing this as it seems to be solved?\n. Got this example from someone too: https://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\nWhen next release is out we should start the work on some \"default elements\", where this validate on blur input could be one of them :-)\n. Hi @endragor ,\nThere are two ways to fix this. Either you make pure versions of DateInput and TimeInput, which is not Formsy related. Then you create a small wrapper for DateInput and TimeInput, which uses the mixin. That leaves you open to create a DateTimeInput, using the pure DateInput and TimeInput and exposing its name: \"dateAndTime\" or whatever which holds both values, date and time... does that make sense?\nIn the next version of Formsy the traverseChildrenAndRegisterInputs will not be used. It will use context instead, which means that this should probably work.\nKeep an eye out for the preview and we can try it out :-)\n. Closing old issue\n. Hi guys!\nHm, that kinda sucks. The really good thing about React is that the UI is a reflection of the state in the components, not the other way around. It is also an issue that we do want to know exactly when the inputs are filled, as it should trigger validation...\nAnd this seems to be a browser issue, as autofill should trigger a change event. If it does not trigger any event it is impossible for Formsy to run its validations, even though we could grab values from inputs on submit. \nhm hm, what a pickle... have to think about this, though it might be better to push the browser vendors to implement this correctly.\n. Well, we could add a property to the form which will check the inputs. Something like <Formsy.Form autorefill></Formsy.Form>, which would trigger this manual check of the inputs.\nThe problem is that formsy elements are not only typical form inputs, they can be anything really. So a better approach might be to add a method to the mixin: componentDidMount() { this.checkAutoRefill(this.refs.input) }. Which of course unregisters on unmount.\nWhat do you think?\n. I do, thanks for putting focus on this though :-)\n. Hi there,\nThe next version should allow you to do this as it uses context instead of props. I will soon give some information on how to try out the new version which requires React 0.14. Stay tuned :-)\n. Check out this issue: https://github.com/christianalfoni/formsy-react/issues/158 :-)\n. Hi there!\nYou can solve this by manually submitting the form :-)\nQuick example:\njs\nonSubmit: function (model) {\n  if (this.state.typeOfSubmit === 'oneOfThem') {\n    // doe something\n  }\n},\nsubmit1: function () {\n  this.setState({\n    typeOfSubmit: 'oneOfThem'\n  }, this.refs.form.submit);\n},\nsubmit2: function () {\n  this.setState({\n    typeOfSubmit: 'theOther'\n  }, this.refs.form.submit);\n},\nrender: function () {\n  return (\n    <Formsy.Form onSubmit={this.onSubmit} ref=\"form\">\n      <button onClick={this.submit1}>Submit1</button>\n      <button onClick={this.submit2}>Submit2</button>\n    </Formsy.Form>\n  );\n}\nWould that work for you?\n. @aphillipo Yeah, I see your point on it being automatic :-) But I think the stability of Formsy is due to all these \"special scenarios\" not being implemented, rather have good enough hooks to solve anything. There are so many suggestions and if all of them were implemented it would be very hard to document it all and keeping it stable :-)\nThanks for the feedback!\n. Hi there!\nThis seems strange. Could you try to just put your error out in a separate element? Just to make sure that it is not material-ui making any problems? Also try with a different validation rule. \n. Closing old issue\n. Hi guys!\nThis is a very typical question, \"why required?\". The thing is that indicating if something is required is different than indicating validation. For example an empty input that validates as email is not invalid because it it empty, but it is invalid if it also is required :-) Confusing, yes, but let me try this:\nRequired defines what a missing value is, (no text, is false, is undefined etc.) and invalidates the input as \"missing value\" when that occurs.\nValidations defines what values are valid, WHEN there is value in the input.  \nIt is really difficult to express this in a good way :-)\n. Adding a \"validateOnSubmit\" prop to the form is a good idea. My personal opinion is that users hate filling out a complete form and submit just to get an error in their face and figure out where it happened. Its better to notify at once... or on blur. But yeah, have to get new version out first, but lets keep this open :)\n. @idream3 Its because a formsy element can be any kind of input. Lets say you have an element that is a list and you want it to be required, which is when the length of the value is 0 :-) You need required=\"hasLength\" or something. Does that make sense?\nBut this feature is at the top of the priority list now, so it will be implemented very soon.\n@silvenon Great tip on the debounce thingy, never thought of that :-) \n. Hi guys!\nI got a really interesting suggestion on a different issue. You should easily be able to achieve \"validate on submit\" by just adding a class to the form. This class hides all validation messages. When you hit submit, you remove the class and any validation errors is now displayed.\nDoes this solve the issue?\n. Awesome, thanks @Semigradsky . Really struggling with getting time to work on formsy, but got vacation now and will create a new release that supports React 0.14. So will work using the BETA, fix the nesting stuff of components and go through all issues to fix bugs.\nI think you are doing a great job replying and working on the project. Would you like to get more involved? Actually, I am proposing that you take the lead of the project. I will of course still be involved, but I think the project would be better of having you as lead on the project :-)\nI completely understand if you do not have time, but though I could suggest it\n. That is great! :-) Let me just wrap up the next React 0.14 version and clean things up for you in the issues etc. Then I will announce with the next release. Again, I am still around, so please do not hesitate to contact me to discuss things etc., but feel completely free to do whatever you want. I have faith in you ;-)\n. Hi @ericdfields and thanks for looking into this! In the next version Formsy stops messing around with the children and will use \"react context\" instead. That will fix the issue :-)\n. Hi there,\nFormsy is built for flexibility. There are so many different ways of handling a form and to support most of them Formsy has a lot of hooks. Initially Formsy did support posting data directly to the server and handle any errors, but the implementation was too specific. There were so many requests on support of headers, map errors from server etc. It just got way out of control. So instead of having one very opinionated implementation of talking to the server, it has an extremely flexible hook that lets you do it exactly as you want to.\nSo I am sorry to say that this will not be implemented... and I can not really see that this is a problem?:\njs\nsendData(form, reset, invalidate) {\n  myAjaxLib.post('/form', form)\n    .success(this.doWhatever)\n    .error(invalidate);\n},\nrender() {\n  return <Formsy.Form onSubmit={this.sendData}/>\n}\nSorry to be such a dick about it ;-)\n. Hi @garbin , great! Thanks. Working on a new version of formsy now, going through all open issues and adding support for React 0.14, adding support for the new parent-child context relationship\n. Hi!\nYeah, @rblakeley, please set up a new issue on that. Currently it just builds objects by splitting on .. It was implemented like this based on a discussion, but lets review it :-)\n. Hi guys,\nYes, the fix is not part of the current release, but the next one. It is right around the corner :-)\n. Hi, yeah, I agree... lets make this part of next release. \n. Okay, got Mixin, HOC and Decorator in the new branch now. Using a traditional approach from other projects.\n. Hi guys!\n@twisty thanks so much for taking the time to test! \n@Semigradsky Great work, we are closing in on release :-)\nNOTE! to get the latest version of master in the TEST-project, run npm install --force\n. @Semigradsky Maybe create a couple of tests for these errors messages, I was not in the mood for it when I implemented... you know how it is ;-)\n. @richardaday , jup it does :-)\n. Hi there!\nAs soon as React 0.14 is released it will be released :-) The code is ready, working with React 0.14 Beta 1\n. Decorators will be part of next release :-)\n. Hm, I did not quite understand what you mean @eriknyk? \n. New version out\n. Will close this as it is fixed in new version coming soon, thanks for the feedback @ajaykurien :-)\n. Release Candidate out now on React, right around the corner :-) Took a bit longer than I thought, but now it is really close!\n. It seems that this is solved? Closing it, thanks for suggestions and hope you got it fixed @sloria!\n. Hi there,\nThe required prop can take a validation value, just like validations. This is to define what validation rule should define the input as required. By default that is required, required={true} and required=\"isDefaultRequiredValue\". They are the same and checks if the value is undefined or an empty string. But you can change this to f.ex. required=\"isFalse\". If the value now becomes false it will be indicated as required. Good for a checkbox the is required to be checked.\nDoes that make sense? validations and required is hard to express in a good way :-/\n. Closing this as it does work, reopen if still having problems\n. Hi guys,\nThere has been a bit confusion on how required is being used and it will be cleaned up after next release of Formsy.\nThe prop validations uses validation rules to set errors. The prop required can also use validation rules to indicate when an input should be required.\nSo:\n`` js\n// When the value of the input isfalse`, showRequired() will give true\n\n// When the value of the input is falsy (empty string etc), showRequired() will give true\n\n// showRequired() will always be false \n\n```\nSo what we need to clean up here is maybe use a new property. Just throwing it out there:\njs\n<MyInput name=\"some_field\" type=\"text\" required={true/false} requiredRule=\"isFalse\">\nBut yeah, I hope this explained how it works now.\n. Hi @eventhough, yeah, I think you might be right about this. Just to summarize with my own words here.\n\nWhenever \"someValue\" changes that should become the new pristine value of \"MyInput\". Whenever \"MyInput\" uses \"setValue\" that will of course not become the new pristine value.\nWould love some comments on this, @Semigradsky, @idream3?\n. Hm, I have been thinking a bit more on this. Like a plain input you might want to pass the changes through your application state store. Typically onChange on an input and value={this.state.value}. With Formsy, in combination with f.ex. Cerebral:\njs\n@Cerebral({\n  form: ['form']\n})\nclass MyForm extends React.Component {\n  onFormChange(data) {\n    this.props.signals.formChanged({form: data});\n  }\n  render() {\n    return (\n      <Formsy.Form onChange={(data) => this.onFormChange(data)}>\n        <MyInput name=\"foo\" value={this.props.form.foo}/>\n      </Formsy.Form>\n    );\n  }\n}\nThis is a typical setup for creating \"application state\". The problem with implementing what is suggested here is that the value prop will change on every change of the form. So it will always be a pristine value.\nThis is the difficult balance of internal/external state handling. I think it is important to let developers control the form from some external state store, without messing up the pristine stuff. Maybe we should rather have a pristineValue or defaultValue? That way you can control it however you like?\n. Will add defaultValue in next release, it just gives a lot more control. Let me know if this is a problem\n. You actually have access to all the elements of the form through the formsy.form component. You could go through those instead of wrapping. So:\njs\nvar MyForm = React.createClass({\n  mixins: [Formsy.Mixin],\n  showErrors: function () {\n    this.refs.form.inputs // All components registered to form. Check their state prop etc.\n  },\n  render: function () {\n    <Formsy.Form ref=\"form\" onInvalidSubmit={this.showErrors}/>\n  }\n});\nThough it would be good to get this info directly. So maybe \"onInvalidSubmit\" and \"onInvalid\" hooks should pass an object with elements and their error messages. What do you think?\n. Will make part of next release :-)\n. @Semigradsky I was thinking about adding a \"ELEMENT EXAMPLES\" next to \"HOW TO USE\". Just lots of different examples of how to write different kinds of elements. You up for starting on that? :-)\n. Hm, could you give a code example that breaks? Just have to understand exactly where the problem is :-)\n. Old issue\n. Hi there!\nThanks for the heads up! What is the exact syntax where you get this error? \n. Formsy is just a normal element, <Formsy.Form/>, Higher Order Components and Decorator version of the elements you build for the form will arrive in next version :-)\n. I believe this is the same as #147 ?\nIt depends on the user experience here. Normally you would not allow a submit when any of the elements are invalid. So in the component with your Formsy form you use onValid and onInvalid to track when the submit button actually can be pressed.\nBut the issue mentioned here is about allowing validations to run only when submitting, not as you change the value of the inputs. Would that work for you?\n. Hi, thanks for a great example!\nAnd yeah, this can be solved by just having an error class on the form and toggle it when actually hitting the \"submit\" button. So the validation is happening \"under the hood\", but the class decides to display them or not.\nSo yeah, will not implement new logic for this as it can be solved with current hooks!\n. It will be 0.14.x on next release, but thanks for the heads up :-)\n. Eyh, nice, thanks :-)\n. Sorry for very late reply, but this is great, thanks! :-)\n. Hehe, I think this is right. You state what rule it needs to match to indicate that it is required. And that is when it is \"isFalse\", when checkbox is unchecked... but \"required to be checked\" is the opposite, so yeah, correct :-) Ah, validation is hard! :-D\n. You can do async validation if you run your own validation. If you use the following hooks, as an example:\n``` js\nvar validate = function (values, reset, invalidate) {\n // Check the values of the form and do your async validation, then\n// run the invalidate function to invalidate the form\n};\n\n// Your elements\n\n```\nI am very unsure how Formsy would handle this internally, as those validations run as values change. Not good user experience. I suppose you want to run it on submit? So yeah, I would solve it with the code above :-)\nLet us know if that does not work for you, but it would be nice with a use case to assist you better\n. This still has to be done using existing hooks. Async validation is way too complex for Formsy to handle internally I believe. There are just so many ways to handle it, so it is better to have some hooks that manages it exactly like you want. Added example here to wiki. \nLet me know if there are specific scenarios and we can take a look at them?\n. ah, can not see any problem with having this in there, thanks!\n. Hi there @jaraquistain,\nAre you passing null as the value to the input? You have some snippets, just to make sure I understand this correctly\n. Hi @rodryquintero, in what way is it jerky? :-) I think it would be better to fix that as it is more \"future proof\" in regards of accessing child components in React.\n. Hi again,\nHm, what did you put inside the onChange handler? diffing two shallow objects should not cause jerkyness. I have this feeling there is something special happening inside the onChange handler in this specific scenario. Calling a function vs accessing an object should not have any noticeable performance issues\n. Ah, yes, its important to give key values so that React can identify them \"as the same component\". Please elaborate if you think I misunderstand something, but yeah, my interpretation is that this is a React issue :)\n. Eyh, this is really great!\nThere are so many different ways to handle stuff so Formsy tries to give all the hooks needed to do whatever you want. That said, sometimes it can be very verbose.\nI will add this code example to the WIKI first. It might be better to have this stuff as addon components rather than properties/options inside Formsy. So lets keep this and figure out where it fits best.\n. Closing this, please reopen if still a problem\n. Hi guys!\nYes, this is something that has been requested before too. \nAdding it to list for next release: https://github.com/christianalfoni/formsy-react/issues/206\n. Makes sense, let me add it to next release, https://github.com/christianalfoni/formsy-react/issues/206\n. Hi @wwsun Yes, it is because you validate asynchronously, which does not work. It will not be part of the API as it is a very complex operation that devs want to handle very differently. You have to move this logic outside the form.\njs\nvar nameBeingValidated = null;\nvar onSubmit = function (data, reset, invalidate) {\n  if (data.name && nameBeingValidated !== data.name) {\n    // Validate name on server\n    // If not valid\n   invalidate({name: 'That name is not valid');\n  }\n};\n<Formsy.Form onSubmit={onSubmit}>\n  <MyInput name=\"name\">\n</Formsy.Form>\nSimple example, I hope it makes sense\n. Hi guys,\nSo sorry for my wrong example. Yes, you would do this on the submit.\n. Let me know if is needed to discuss this more!\n. Thanks for this, fixed now :-)\n. I believe you are calling the method incorrectly. Using class syntax? Make sure you bind the method to the component :-)\njs\n  <div onClick={this.changeValue.bind(this)}/>\n. @EthanML , you can access it by using \"ref\" on the form elements and dive into the component, but that is not really the way to go :-)\nIf you give some more context to the challenge I am sure we can figure out a good way to handle this!\n. Added to list: https://github.com/christianalfoni/formsy-react/issues/206\n. When next version is released I will start working on formsy-addons which will have different types of form elements that handles complex validation and I think this fits in! Sounds okay?\nSomething like:\njs\nimport FormsyComponent from 'formsy-react-addons/Component';\n. Awesome stuff, thanks! Hopefully we are right around the corner for React 0.14 and can officially release :-)\n. You know how that works? Trying to find some documentation. Thought I could just checkout the branch and publish it with --tag beta?\n. Hm, for some reason it states that I can not publish over the previous version. Maybe I still have to give it a new version number, but using --tag beta it will not be installed by default?\n. ah, yes, there we go:\nnpm install formsy-react@beta :-)\n. Would be great if you could confirm that everything works as expected, and especially if not :-)\n. No worries, thanks for following it up :-)\n. let me update and release new package\n. Okay, try now :)\n. Hi @blittle,\nThanks for this. Yes, I am going through the tests for next release. New version of node etc. have to fix it :-)\n. Hm, yes, this is interesting. The state should be reset with the this.updateModel();, but have to test it more closely. I see you removed it on a commit to your fork? Any reason for that? I can not see how that could fix the issue... did it? :-)\nLet me know and I will put this on the block\n. Aha, I see you fixed it :-) This makes sense, thanks!\n. Maybe add link to README? :-)\nJust closing this...\n. Just bring in everything. Tests has to be cleaned. New version of Node etc.\n. Everything except validate on submit is now part of it. Validate on submit can still be used by having a className on the form that you flip on when submitting the first time. By default validations are just hidden\n. Hi guys,\nI am bringing branch React 0.14 into master this weekend and releasing new version. There are so many people using new version of React RC so I do not see any reason to wait.\nAll fixes will be included in this new release. \n. If I understand you correctly you can add a validation rule here:\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\nIf you create a function that takes a value and validates it you could call that function from Formsy addValidationRule and reuse the same function on the server. Does that make sense?\n. There will be a defaultValue prop in next version. It is related to how pristine values are handled, though conceptually I think it will help with your scenario too :-)\n. defaultValue not in yet, preparing it for next version :-)\n. Ah, thanks, and thanks for your feedback :-)\n. Great, thanks! :-)\n. 0.16 out now :-)\n. Perfect, thanks :-)\n. Great stuff, thanks a lot :-)\n. Great it worked out @salayev .\nWhen next version of Formsy is released it will have a review as there has been many changes since its release. The though it to build a suggested spec for 1.0 version where APIs and how the internal state of the component will be perfected.\n. Hi @salayev ,\nValidation vs required is a surprisingly difficult concept. validations is related to showError() and getErrorMessages(). required is related to showRequired(). So you never check errors related to required. The reason is that they are two different things. You want to indicate a required input differently than when a validation is wrong :-)\n- validations prop => showError() / getErrorMessages()\n- required prop => showRequired()\n. I think you have to give us some more details than that :-)\n. Jup, agreed, https://github.com/christianalfoni/formsy-react/issues/206\n. Great, thanks!\nNew version will be released this weekend, with latest version of React 0.14\n. Thanks for the heads up! https://github.com/christianalfoni/formsy-react/issues/206\n. Great thanks! :-)\n. Ah, must have been a merge issue here, sorry about that!\n. Hi @cmwelsh and thanks for you feedback :-)\nWhen it comes to usability I would recommend validating on blur, not on submit as that will feel a bit annoying I think. That said, if the user would insert an email and hit submit, that would cause the input to blur and you would get the same effect. But there is one problem and that is the submit button. It will be disabled if an input is invalid after a submit and you would not be able to resubmit until the input was manually blurred. But I have a suggestion that will require me to implement a fix.\nDoes this seem like an okay solution?:\n``` javascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n  },\n  render: function () {\n    var color = 'gray';\n    if (this.showError()) {\n      color = 'red';\n    }\n    var border = {\n      border: '1px solid ' + color\n    };\n    return (\n      \n\n{this.getErrorMessage()}\n\n    );\n  }\n});\nvar MyTestComp = React.createClass({\n  render: function () {\n    return (\n      \n\nsubmit\n\n    );\n  }\n});\n```\nAs you can see I hide the \"native\" submit button and roll my own. You also see the input setting its value on blur instead of change.\nIf this solution is acceptable I will make the change to let developers use their own submit button. The onBlur part already works :-)\nWhen it comes to your second suggestion, I am a bit unsure what you mean. Maybe you could clarify with a specific example?\nThanks again for the feedback and glad this helped you out! :-)\n. Hi @mschipperheyn!\nI am working on an idea to exclude the buttons from the Formsy.Form itself and let you as a developer decide where they should be an how they should behave. Need to figure a couple of things out first though. I will let you know :-)\nI totally agree with your statement.\nI will let you know when I have worked out the idea and ask for your feedback before implementing :-)\n. Hi again @mschipperheyn , this is what I suggest:\nSince the lib is pretty new I would like to do an API change. First remove anything related to default buttons:\njavascript\nFormsy.defaults({\n  contentType: 'urlencoded', // default: 'json'\n  hideSubmit: true, // REMOVE IT\n  submitButtonClass: 'btn btn-success', // REMOVE IT\n  cancelButtonClass: 'btn btn-default', // REMOVE IT\n  buttonWrapperClass: 'my-wrapper' // REMOVE IT\n});\nInstead add two new handlers for the form:\njavascript\n<Formsy.Form onInvalid={this.disableButtons} onValid={this.enableButtons}></Formsy.Form>\nThat way you get a lot more flexibility. Yes, you would have to code that default behavior yourself, but the API is simpler and more flexible.\nWhat do you think?\n. Got those handlers in place :-)\n. Hehe, no worries @srconklin :-)\nIf you have time to summarize where the mistakes were made, I could update the readme and make some things more clear. To prevent others meeting those same challenges. \nIf you have time and see any value in it of course :-)\n. Hi again @mschipperheyn!\nThis is a great feature. I will add this with the handling of submit button. I suggest adding a \"headers\" object in the Formsy defaults config and of course as an attribute on the Formsy.Form components.\nThat seems okay?\n. Hi @mschipperheyn , got new version out with headers option. I chose not to go further than just the header object for now. Let me know if you get into a situation where more is needed :-)\n. @mschipperheyn No worries, thanks for checking out the lib :-)\n. Fantastic Laust, your are now the top contributor ;-)\n. AwesomeI Will just change \"isWordsSpecial\" to \"isSpecialWords\". Reads more human like ;-)\n. Hi @ztsmith , sorry about that and thanks for pointing it out. The 0.4.1 tag is now pushed to the repo :-)\n. Great! Thanks for the help :-)\n. Thanks for the pull request!\n. Hi @FoxxMD , this is a very good point!\nWe could add a new method to the form elements, something like: \"isPristine()\"? So you could check:\njavascript\nif (this.isRequired() && this.isPristine()) {\n  // Show required\n}\nCould that work?\n. Hi again,\nWhat triggers the change?\nGood point! :-) Conceptually you want to tell the parent form when the input is \"touched\", whatever that might be. By default that would be when the input changes its value, which lets us hook up \"isPrestine\" to the \"setValue\" method. But as you say, you might do it when blurring. To keep things simple I would suggest that you would have to run \"this.setValue(this.getValue())\" when blurring to achieve the prestine effect. That will keep the API simple, as it is only the \"setValue\" method that changes the pristine value. I fear the API becomes very complex if you get too much control of this. What do you think? \nCould all inputs be triggered globally?\nAnother good point! :-) I agree that submitting the form should set all elements to \u00ecsPrestine() -> false, as kind of a \"global touch\". At least make that part of the first implementation. It can be reconsidered if there is feedback on scenarios where that might be a problem. This happens in the background so can easily change it.\nProgramatic triggering?\nHm, yeah, it is an interesting scenario. Though I think it will add too much complexity, at least for now. I think it is a good idea to get some more experience with \"prestining\" in Formsy :-)\nLet me know what you think and we can start the implementation. I think it is time to bring in some tests now too, so that should also be part of the next release. Feel free to contribute to this with pull requests, or I will start on this next Wednesday :-) \n. Hi again @FoxxMD!\nI have the day off tomorrow so I will be looking into all current issues and create tests, but do feel free to apply a pull request, it would be cool to see how you would solve it in the current codebase :-)\nAbout your question I do see your point, but I think it should be up to the developer to decide if the form could be submitted or not while invalid. For example by disabling the submit button when the form is invalid. That is why the \"onInvalid\" and \"onValid\" handlers where introduced. Give more flexibility :-) Does that make sense? Please let me know if there are scenarios I have not considered.\n. Okay, this is now in the code, also with a test. Will be part of todays release.\n. Hi Scott!\nYou know what, we seem to have forgotten to document the \"value\" attribute.\njavascript\n<MyElement value=\"whatever\"/>\nThat should set the default value :-) Will update the readme now!\nDid that solve your problem?\n. I am having a look at this tomorrow, thanks for the feedback :-)\n. Hi again,\nThis is now fixed :-)\nWill be part of the release later today.\n. Hm, it is not fixed, broke all the tests.\nIt creates a circular reaction where the change of that value requires a new validation which again sets the value and again validates and so on.\nActually I think you have to structure this a bit differently. Instead of using the \"defaultValue\" on the input I would do this:\n``` javascript\n  componentWillReceiveProps: function (nextProps) {\n// Only change to the new default value if it is currently showing the old one\n    if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n      this.setValue(nextProps.defaultValue);\n    }\n  },\n```\nAnd if you want an empty input to change into the default input:\njavascript\n  changeValue: function (event) {\n    this.setValue(event.target.value || this.props.defaultValue);\n  }\nI think this will solve your problem :-)\n. Let me know if I misunderstand, but you want the input to show \"John\" instantly?\nI think the easiest way to achieve this is by also passing it as a value:\njavascript\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <Form.Input name=\"firstName\" required value={this.state.profile.first} defaultValue={this.state.profile.first}/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nSo you handle the \"initial value\" using the normal \"value\" attribute, and your custom \"defaultValue\" attribute as the fallback value. You could consider also using the \"componentWillMount\" method to grab the \"defaultValue\" prop and set the value of the input:\n``` javascript\nvar Input = React.createClass({\n    mixins: [Formsy.Mixin],\n    componentWillMount: function () {\n      this.setValue(this.props.defaultValue);\n    },\n    changeValue: function(event) {\n        this.setValue(event.currentTarget.value || this.props.defaultValue);\n    },\n    componentWillReceiveProps: function (nextProps) {\n        // Only change to the new default value if it is currently showing the old one\n        if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n            this.setValue(nextProps.defaultValue);\n        }\n    },\n    render: function() {\n        var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n        var errorMessage = this.getErrorMessage();\n    return (\n        <div className={className}>\n            <input type=\"text\" value={this.getValue()} onChange={this.changeValue} />\n        </div>\n    );\n}\n\n});\n```\nThen you do not have to pass the \"value\" attribute at all, as the \"defaultValue\" attribute will be the initial value of the input.\nHopefully I understood the problem :-)\n. Hi yeah, that sounds right :-)\nMaybe you should consider not rendering the form until the async mixin is done?\n. Hi there,\nCould you try updating to the latest version of the lib? It now supports dynamically inserted form elements, which I think might fix your problem too. Let me know if not and we will dive into this a bit more :-)\n. Hi there,\nGood to hear that it works! Hm, yeah, it could handle undefined as an empty string. But again:\njavascript\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email || ''} />\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nWould also work. It should at least throw an error. Have to think about that :-)\nThe issue with componentWillReceiveProps is that a setValue call will trigger a new form validation, which again triggers componentWillReceiveProps. So you should get a loop. You could of course just do:\njavascript\ncomponentWillReceiveProps: function (nextProps) {\n  if (nextProps.value !== this.getValue()) {\n    this.setValue(nextProps.value);\n  }    \n},\nI think :-)\n. Thanks for input @ppiekarczyk. This should be handled by Formsy now. About the pristine vs default value. Would you set up a new issue on the problem, if it still exists? Loosing my overview powers on this issue ;-)\n. Hi @MattAitchison,\nYeah, it should go through children of children until it meets a child with a \"name\" attribute or is at the end branch. Your experience differs?\n. Ah, sorry, I misunderstood. Currently it does not handle that. I am having a Formsy day tomorrow, so I will look into this :-)\n. Btw, how do you feel about just mapping the inputs to whatever you want instead? To me it does feel a bit weird to declare data structure in the \"HTML\" of the component. An example could be:\njavascript\nvar mapModel = function (model) {\n  return {\n    \"startYear\": model.startYear,\n    \"endYear\": model.endYear,\n    \"terms\": [\n      {\n        \"name\": \"term1\",\n        \"startDate\": model.term1_startDate\n        \"endDate\": model.term1_endDate\n      }\n      {\n        \"name\": \"term2\",\n        \"startDate\": model.term2_startDate\n        \"endDate\": model.term2_endDate\n      }\n    ]\n  };\n};\n<Formsy.Form mapModel={mapModel}/>\nThis gives a lot more freedom and it reduces code complexity a lot. It also prevents locking an \"HTML\"-definition into a certain data structure. What do you think?\n. Okay, goody, I have added a \"mapping\" property to the form where you can do as explained in the previous comment. Will be part of release later today :-)\n. DOH :-) Thanks @smokku!\n. New release pushed\n. You are perfectly right, working on bug fix release now :-)\nNext release will include tests as this is starting to shape up quite nicely!\n. New release is pushed\n. Hi guys,\nWe have this API now:\njavascript\nvar Comp = React.createClass({\n  onSubmit: function (data, resetForm, invalidateForm) {\n     myAjaxService('/url', data)\n      .error(function (errors) {\n        errors // { test: \"Not valid input says the server\" }\n        invalidateForm(errors);\n      }); \n  }, \n  render: function () {\n    return (\n      <Formsy.Form onSubmit={this.onSubmit}>\n        <MyInput name=\"test\"/>\n      </Formsy.Form>\n    );\n  }\n});\nYou could basically do whatever you want when server responds, but to map to inputs you use the \"invalidateForm\" callback.\nDoes that solve it? Maybe the documentation is lacking a bit here?\n. Hi @drewhamlett !\nDo you want to validate the form values before they are passed to the server? Or do you want to validate values passed from server before they are put into the form?\nWell... basically, do you want something like: Formsy.validate(myValue, 'isEmail') ? :-)\n. Hi again :-)\nThat is good to hear!\nAha, of course, now I understand. In theory this should work just fine, just have to implement promises support. The only restriction I see is that you might get into trouble if you run it a lot. You could add a debounce thingy around it though. Hm hm...\nLet me think about it and try it out, I think it should be good. It is a good idea :-)\n. Okay, so I thought about it some more. It adds a lot of complexity and it is an edge case. Is is even valid to ask the question if this really is the responsibility of Formsy.\nI would suggest using a \"required\" on this form element and do the ajax stuff inside it. Only if you get a valid value back from your ajax request you actually set the value, setValue(), which will fulfill the \"required\" and make the form element valid. \nDoes that make sense?\n. Just closing this as it is getting old\n. Ah, awesome, here it is :-)\nI will go through it tomorrow and create a new release. Thank you! :-)\n. This looks great! Thanks :-) Writing some tests and adding a couple of other things and will make a new release!\n. Hi @burtyish,\nActually, the input itself does not need a name attribute. Create your own credit card info formsy element, something like:\njavascript\nvar CreditCardInfoInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  updateValue: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return <input value={this.getValue()} onChange={this.updateValue}/>\n  }\n});\nThis wraps your plain input, without a name attribute, into a formsy element. You can now use it like this:\njavascript\n<Formsy.Form>\n  <CreditCardInfoInput name=\"creditcardinfo\"/>\n</Formsy.Form>\nThe name attribute used here has nothing to do with the input inside. It is just a property on the CreditCardInfoInput component that Formsy will use to identify the property name for the value. So you are following the guidelines with this solution.\nHope this was an okay explanation, but please let me know if you have more questions :-)\n. Sweet :-)\n. Hi @AlexeyFrolov and thanks for the input!\nI do see your point with doing the validation outside of the form and use props to tell which inputs has errors etc., but how would you handle validation done when the input itself is changing? How would you handle indicating required fields? How would you handle pristine state? \nWith a simple form that only changes state when it is submitted I totally agree with your argument, but the increase of complexity when validating the form \"as you type\" requires this tight coupling I think. Also looking at normal HTML5 attributes with the pattern-attribute and even just using a type-attribute (email, phonenumber) gives you validation on the form, much like Formsy validations-attribute (http://www.the-art-of-web.com/html/html5-form-validation/).\nBut you are very welcome to just use the onSubmit method and do the validation there, passing updated error props to the inputs in your form. But then you probably would be better of just using a normal form I think :-)\nPlease correct me if I misunderstood your input!\n. Hi again @AlexeyFrolov,\nHow would you feel about something like this:\nhtml\n<Formsy.Form onSubmit={this.validate} errors={this.state.errors}>\n  <MyInput name=\"myInputName\" validationError=\"Something wrong here\"/>\n</Formsy.Form>\nSo the errors object you pass in will be in the format of: { myInputName: true }. That way you can control all validation from outside the form. Would that make sense?\nIf not, please give me an example of how you would expand the API to cover the need discussed here :-)\n. This will soon be released as validationErrors property on the form. You can use onChange or onSubmit to set any errors manually by updating the object on the validationErrors prop.\n. Hi Brett!\nThis is a difficult one :-)\nFormsy allows for setting any value as the value of the form element, not just strings and booleans as you typically can with traditional form elements. If forcing everything to be a string I believe it will restrict too much, at least for now.\nI suppose you created the isInteger validation rule yourself? Or are you referring to the isNumeric default validation rule?\nIf you created isInteger yourself I suggest you add a check to the validation rule, or convert it to string as that is what you want for your specific forms. If you are referring to the default isNumeric validation rule I think it should also be \"true\" when validating integers, so I can fix that.\nDid I understand you correctly on this? :-)\n. Hehe, thanks for that note ;-)\nI will add this as a bug and fix it. Thanks for the report!\n. This should be fixed\n. Hi there!\nFormsy.Forms require Formsy elements, you are using a native input. If you wrap those inputs in components:\n``` javascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return \n  }\n});\n// In form component\n\n\n\n```\nMaybe I should document this a bit better? The reason it works this way is that creating formsy element components, like MyInput, is what gives you all the functionality. It has been suggested to give a default input out of the box, but it is so rarely you actually need just a simple input. You probably always want to wrap some divs, show your validation errors as you see fit etc.\n. Hi Brett,\nSorry for late response, this issue got totally lost on me!\nThis should be fixed for next version!\n. Should be fixed\n. Looking good, except I was a bit unsure of the timeout thingy to prevent too many onChange events. I changed it around a bit and needed also to do so to make dynamic inputs work. They also trigger a change event, when they occur.\nAlso wrote a test for this. It is included in next release :-) thanks for the reference code!\n. Hi @gilbarbara, sorry for the late reply!\nAs I understand it you might get away with using an internal state:\njavascript\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  getInitialState: function () {\n    return {\n      value: this.props.value\n    };\n  },\n  updateValue: function (event) {\n    this.setState({ value: event.target.value });\n  },\n  syncValue: function () {\n    this.setValue(this.state.value);\n  },\n  render: function () {\n    return (\n      <input\n        type={this.props.type}  \n        name={this.props.name} \n        onChange={this.updateValue}\n        onBlur={this.syncValue} \n        value={this.state.value}  \n      />\n    )\n  }\n});\nYou think that could work?\n. Hi @gilbarbara,\nSo you basically just want freedom to run the validation rule on the current value, without actually triggering validation?\njavascript\n  render: function () {\n    var isValid = this.testValid();\n  }\nSomething like that? The only thing it does is run the current value against the validator.\n. Will see if I can include this in next version :-)\n. This got a bit more complex than first expected, have to wait for next release\n. Okay, this will be part of next release :-)\n. And it has been accepted, awesome stuff, thanks :-)\n. Awesome, thanks :-)\nWill include it in next release!\n. And again, thanks! I will pull it in, just verify a couple of things before release, but looks good! :-)\n. That makes sense, thanks Hana :-)\n. Nice :-) I will just move the querySelector line to be run once. Not that we will hit a performance issue... have to blame OCD. Glad you like it!\n. Lets give it a try :-)\n. Yeah, that would be awesome. Starting to work on next release tomorrow:\njavascript\n<MyInput validationError={{email: 'whatup', foo: 'bar'}}/>\nJust makes sense :-) You think so too?\n. Jup, thats what I wrote too? :-)\n. Ah, yeah, hehe, sorry. Will implement this for next version. Thanks for a great input!\n. Is included in next version\n. Ah, sorry, I confused this with a different issue. Will implement very soon :-)\n. Hi!\nYeah, it was a usability decision there. Please give me a comment on how it went converting the rules. Maybe we can find a solution here :-)\n. @jhampton You know, the next release has a validationsError prop on the form which can be used for external validation tools. Will give an example in next release which is right around the corner :-)\n. Hi @sdemjanenko ,\nDo you have an example of when this happened? Its just to keep my head wrapped around the scenarios the form can get into :-)\n. Hi @bryannaegele! This looks great, thanks!\n. btw, I added a validation run when the validations change, so that existing values that receives new validations are validated against those immediately.\n. Checking this out for the next release :-)\n. This should work with version 0.8.0\n. Hi @sdemjanenko , you have lots of ideas, great! :-)\nSo what you are suggesting here is the need for having a reusable set of inputs that would namespace their names? So in your example the inputs would be:\n- one.foo and on.bar\n- two.foo and two.bar\n?\nYou should be able to solve this with just plain React and Formsy though?\n``` js\nvar ScopedInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function() {\n    return \n\n\n;\n  }\n});\nvar ConfigureForm = React.createClass({\n  render: function() {\n    return \n\n\n\n  }\n});\n```\nI think a mixin hides too much implementation details, unless I am misunderstanding something here of course :-)\n. Hi guys,\nSorry that I do not quite understand why you need this ;-) You have a couple of more examples?\nTo namespace inputs I would suggest as the example above:\n``` js\nvar ScopedInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function() {\n    return \n\n\n;\n  }\n});\nvar ConfigureForm = React.createClass({\n  render: function() {\n    return \n\n\n\n  }\n});\n```\nBut I think there is something I do not quite get here maybe? Would be great with some more code examples :-)\n. Hm hm, do you have some example code @sebas5384? I have a feeling I am misunderstanding? Or does my example above solve the issue? :-)\n. Nested inputs are implemented in last version. name=\"foo.bar\" = {foo: {bar: VALUE}}\n. Hm, okay, I will check this locally first. Thanks for contributing! :-)\n. Okay, I have to solve this a bit differently, but thanks for contributing to the solution!\n. Okido, I will try to provoke this error and create a test for it too, thanks! \n. Ah, of course, thanks for that @snario !\n. Hi @sdemjanenko,\nYou should be able to do that using the \"onChange\" property of the form? Or does that not suffice?\n. Yeah, you make a good point here, I will bring it in with the next version :-)\n. hi again @sdemjanenko ,\nLooking at this again I just want to discuss a bit more before implementing. I just have to make sure that I do not add something that does not cover the challenge you are having.\nSo, the issue here is that you want to grab the initial state of the form. Saying that you are referring to the inputs and their values? The object that you receive on onChange?\nWould it not be possible to just set that initial state on your wrapping form component?\njs\nvar FormWrapper = React.createClass({\n  getInitialState: function () {\n    return {\n      values: {\n        foo: 'bar'\n      }\n    };\n  },\n  setValues: function (values) {\n    this.setState({values: values});\n  },\n  render: function () {\n    return (\n      <Formsy.Form onChange={this.setValues}>\n        <MyInput value={this.state.values.foo}/>\n      </Formsy.Form>\n    );\n  }\n});\nAnd when the \"onChange\" event is received you use that to set the new values?\n. Looking at the implementation it seems that you want to check if the values of the form has changed? So if a user has changed something back to the pristine value you want it to be \"hasChanged = false\"?\n. @eventhough This is an interesting suggestion! Would you mind creating a new issue on that? I will close this now. I would suspect we have to add a flag-property to the form. Thanks :-)\n. Aha, nice, thanks :-)\n. Yeah, you make a good point here. Though I think we get more flexibility by introducing: onValidSubmitand onInvalidSubmit. So onSubmit always fires. What do you think?\n. Allrighty, this is part of next release :-)\n. Yeah, that would be awesome :-) I was thinking of including \"clean implementations\" of the default form elements. So instead of <input type=\"text\" name=\"foo\" value=\"bar\"/> you would say: <Formsy.Input type=\"text\" name=\"foo\" value=\"bar\"/> and you would get the exact same thing.\nWhat do you think? Not possible to do it with native inputs, at least not with current implementation, and what current implementation details would be lost if going down that path.\nIt is an interesting idea for a second version of Formsy though. The lib is not really very \"simplistic\" right now, but it solves the complexity of forms I think, and that was the main focus of the first version :-)\n. Will include this on release after next one :-)\n. @eriklharper Since you mentioned contributing, this would also be an awesome contribution. You seem to have some ideas there too ;-)\n@alexduan Yeah, could have a separate project bringing wrapped bootstrap components. That would indeed be very nice :-)\n. hi @afitiskin and thanks for the suggestion!\nThough I like the concept of a container, I am a bit uncertain how this would be reusable. I think it would be nice to just:\njs\n<Formsy.Form>\n    <Formsy.Input/>\n    <Formsy.Textarea/>\n</Formsy.Form>\nAnd implement a Formsy version of displaying validation errors etc. ReactSelect would not work of course, but again you would have to implement all the required, validation error display etc., so you would have to build a form element component for ReactSelect regardless.\nLet me know if I misunderstood your example!\n. I have been thinking about this some more and though I think it is nice with a default set of elements I do not think Formsy itself should have this. There are just so many ways to handle validation. Its better that other projects provide form elements with custom validation handling in regards of UI.\nLike the https://github.com/twisty/formsy-react-components project.\nI will update the README to point to that project.\n. Hi @simiographics ,\nFormsy does support dynamic inputs. It should be possible in your form wrapper component to have custom logic for your checkboxes. When clicking them you render the different input groups. Formsy should notice this and change its internal model. \ndid that make sense? I could give you an example if it seems a bit fuzzy :-)\n. Hi @eriklharper ,\nAha, I see. Yeah, onSubmit should trigger when the form itself is programmatically triggered. Will check this out, keeping it open as a BUG. thanks and glad you worked it out :-) \n. Hi @eriklharper,\nHave you tried not wrapping in jQuery? This seems to work on my end. Just do:\njs\nthis.refs.question1.getDOMNode().submit();\nUse native behavior. jQuery probably does some crazy wrapping messing things up :-)\n. Hi again @eriklharper ,\nHm, yeah. You would have to register a native event listener preventing that behavior. What a pickle this is :-D\nYeah, getCurrentValues() is actually an internal method, but glad I exposed it now. Let me add this as an enhancement and document it. Glad it worked out for you. Sounds like a very reasonable implementation.\nYeah, jQuery registers a listener and wraps \"event.preventDefault\" by default I believe :-)\n. Hi @mull,\nCould you explain a bit more what you are trying to achieve? Formsy handles the native form submition and prevents default behaviour. What do you need the form event for?\n. Hi @mull,\nThis is probably the wiring of React I believe, since you trigger a native event doing that. But you can do this:\n``` js\ntestSubmit() {\n  this.refs.form.submit(); // Point directly to the form component\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n```\nDoes that solve your challenge?\n. Hehe, great ;-)\n. @mull ,\nBut things work as you want now? If so, I will close the issue :-)\n. Sweet!\n. Second argument should be a reset function. Does it not set pristine state\nmaybe?\nOn tor. 12. mars 2015 at 20:25 Stephen Demjanenko notifications@github.com\nwrote:\n\nI have a case where after submitting a form I would like to reset it to\nthe pristine state.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/46.\n. Yes, you are right! There was an initial uncertainty on \"what is a none value\". But since Formsy ended up allowing any kind of value really this should be given an other look.\n. This is fixed in next version\n. Cool :-)\n. Jup, I agree, this fits well with the new validationErrors prop on the form. Will include in next release :-)\n. Hi again,\n\nI started to implement this and realized that though an object would be nice it is difficult to translate some values. Like:\nisLength:5:12\nAnd most validators are simple strings. Like if you create an app you would rather create your own validators like \"isUser\", \"isProduct\" etc.\nBut I fixed the bug :-)\nI want to keep the API as simple as possible, so I think it should be strings or object. not both. I hope to get around to build Formsy React 2, which probably will use objects instead. Learned a lot from inputs on this project. Some good decisions and some bad were made ;-)\n. I decided to use: 'value' in this.props as you really should allow any value. But great contribution and thanks for the tests :-)\n. Thanks for that @sdemjanenko :-)\n. Ops, thanks ;-)\n. Hi @sdemjanenko,\nThe implementation looks good, but I just have to understand the scenario where you need it. The API is getting pretty large and I try to be a bit restrictive if it can be solved an other way :-)\nLets continue discussion on #40 \n. You know, I am sold on this implementation, will just change the dep to the internal isSame util. Thanks @sdemjanenko , will be part of next release!\n. Will manually bring this in.\n. @sdemjanenko You make an excellent point. I will try to make this part of next release!\n. This is part of next release now\n. Good point, hm... I just want to get this next release out and will look into this when its out. Thanks for the input!\n. Just wanted to let you know that this will be part of release 0.13\n. This is now added! :-)\n. I am having a full review of testing before next release. With Node 0.4 release I have to change the way testing is done. It will be better :-)\n. Fantastic, thanks for contributing! :-)\n. Hi @Semigradsky, thanks for bringing that to my attention. That is a bug, will be fixed with next release, thanks :-)\n. Fixed in next release\n. Hi @Semigradsky ,\nThanks for the input, this looks like a good idea!\n. Decided that XHR will be removed in 1.0 release as it is very easy to hook that manually to the form. Formsy is a form lib, not xhr lib. Covered too much initially ;-)\n. Hi @frost555 ,\nSorry for late response, I have been suck with the flue.\nAs I understand it when an error from the server occurs you want that error message to be ignored when the input is changed? The error should be reset every time setValue() is called. Does that not happen?\n. hi again @frost555,\nI will check this ASAP\n. Hi @frost555 ,\nVery sorry about the delay here. I can confirm the error and will try to make a fix right now. Thanks for reporting!\n. Okay, fixed, there was indeed a bug here. Thanks for reporting @frost555 ! Will be part of next release\n. Hi @mistakster ,\nSo sorry for late reply, but I have been sick with the flue, but back on my feet now :-)\nWill merge an release new version!\n. At 99% ;-)\nReleased new version, hope everything works okay now.\n. Hi @philippotto ,\nThanks for the input!\nDo you have a code example of how you would like this to work? Just so I am completely sure that I understand what you are asking for :-)\n. Cool, I will check it out :-)\n. Ah, great, thanks for that :-)\n. Hi @jonaswindey ,\nSo sorry for the delay here, but I have been sick withe the flue and at the same time moving across the country, bad timing on my part ;-)\nI have merged and released a new version supporting 0.13.1. Thanks so much for your patience!\nbtw, made sure old version of React still works so will just close this pull request.\n. Hi @philippotto,\nI have implemented a isValidValue that you can use inside a component to run any value against the set validators for that component. So it runs the exact same code as when the real validation occurs. Let me know if this does not behave as expected :-)\nI will work on running the tests with travis as soon as the next release is out :-)\n. Hi again @philippotto ,\nAha, I see, sorry about my confusion on this :-)\nYou are correct in your assumption about isValidValue. Okay, I think I understand what you want now :-)\nYou want Formsy to validate in two different ways. Either by passing global formsy validation rules as props or, as you propose, run a method on the component which has its own validation logic.\nThat makes sense :-)\nI would suggest just calling it : validate. Let me pull this request now and put it next release.\n. This is fixed :-)\n. Hi guys,\nYeah. Formsy does take an approach with React that is not best practice. There is a new release coming up now with some more functionality. After that I will start on Formsy 2, which conforms more to best practices, but will probably have a few breaking changes.\nThe challenge is that a form needs to create a relationship with its children form elements. Now this is done by iterating the children of the form instance, adding some properties and a mixin on the form elements uses these props to communicate with the form instance.\nAn other way to go about this is using pure events, but that changes the syntax and I am unsure if it is doable. It would be something like this:\njs\nvar Form = React.createClass({\n  mixins: [Formsy.FormMixin],\n  render: function () {\n    return (\n      <Formsy.Form>\n        <MyFormElement name=\"foo\"/>\n      </Formsy.Form>\n    );\n  }\n});\nThe mixin finds the FormsyForm element in the component and registers custom event listeners like: \"Formsy.setValue\", which then the children form elements can trigger and will be catched by the parent form. The problem is that React JS does not support custom events, would have to use native events, which reduces the testability with Formsy as tests would have to be run in the browser. I think this might be a good tradeoff though. \nLet me create an issue discussing next version of Formsy :-)\n. Linking to issue: #66 \n. @gaeron , thanks for that input! This definitely seems like a valid way to go. I have been using it to solve other scenarios, so I will play around with it a bit :-)\n. Hm,\nSeems we have to wait for React 0.14. Tried getting this new parent-child context temporary patch working, https://gist.github.com/jamesknelson/1481521444e1529d59aa#file-react-parent-context-patch-js, but can not get it to work.\n. @jmartin84 Will look into it, might work :-) Thanks!\n. @jmartin84 I checked it out, but it only works with immediate children, need something a bit more flexible. Got the new parent-child context thing running now so I think we will end with that solution .It is also confirmed for next React release, so I think we are in the clear on this challenge :-) Thanks for the suggestion though! \n. @jmartin84 Actually, this is exactly what we can do. I just did not see clearly how to handle nested children, but I do now :-) Will create a fix for this. Will still change to context on React 0.14, @gaearon , as it is more optimized. But now we are in the clear, awesome, thanks!\n. Hi @Semigradsky,\nThat is the bundled release. To use formsy in Node environments you require it like a normal NPM module:\njs\nvar a = require('formsy-react');\nHope that answers your quesiton :-)\n. Hi again,\nIt is for people using bower or just use a normal script tag and use it globally :-) Or requirejs.\n. Hm, bower.json we still need though? Bower checks what tag to download by looking at that file?\n. Ah, sorry, I am confusing with .gitignore :-)\nI will pull it in! Thanks\n. Hi @Semigradsky,\nThis is a great contribution, thanks! Version 1.0.0 of Formsy will use webpack also for development, so this is very welcome indeed. \n. @Semigradsky ,\nYeah, I agree on that. I will remove it for next version. Thanks for the input!\n. Hi @gpbmike ,\nDo you set the initial value to false? \njs\n<MyCheckBox value={false}/>\nIf so it should work. The 'value' in this.props only checks if the key \"value\" exists in props, not if the value is \"truthy\".\nThe reason behind '' is that you can really create any element. If a checkbox has its value by default false, there is no way for Formsy to understand that. You kinda have to tell it by passing a default \"false\" value. What you get back though is lots of flexibility in what kind of form elements you want to build :-) \nExample of checkbox:\n``` js\nvar MyCheckbox = React.createClass({\n  mixins: [Formsy.Mixin],\n  changeValue: function (event) {\n    this.setValue(!this.getValue());\n  },\n  render: function () {\n    return (\n      \n\n\n    )\n  }\n});\n\n```\n. Ah, cool, great :-)\n. Hi @marnusw ,\nThanks for taking the time to review the implementation :-)\nThe reason I implemented setInputValidationErrors is because that one will always go through all inputs and set the valid state based on any errors passed. It basically resets the input if there was an error there, and then there is no error. So it is needed.\nThe updateInputsWithError does the opposite. It goes through any errors passed and set those errors, as you say.\nThat said, you might be right :-) But I believe the first method has to be used, because it makes sure that any inputs that current state is error is reset to valid state when there is no error anymore. Does that make sense?\nI agree that getCurrentValues() eliminates updateModel(). Cleans up the code :-)\nWould be great if created a pull request for this, though make sure that passing errors on the form, and then removing them, resets the inputs to valid state.\n. Cool! I will just close this issue. Please comment again if you want to discuss some details on this :)\n. Thanks @paddyinpdx, will fix this on next release :-)\n. This one should work on release 0.12\n. Hi @gilbarbara ,\nFound the bug, it will be fixed on next release, thanks for reporting :-)\n. Hi @mloginov ,\nFound the bug, will be fixed on next version, thanks for reporting! :-)\n. Hi @arunthampi, yeah, that would be great! Thanks a lot, and thanks @Semigradsky for helping out with support! :+1: \n. Hi @frost555,\nThanks for noticing, will fix that!\n. Fixed, will be in next release\n. Hi @Semigradsky, thanks for the pull! I chose to handpick and implement myself, but you will get credit for it, thanks for the pull! ;-)\n. Hi @Semigradsky,\nAwesome stuff! Could you create a pull to document the example and how to run it? That would be awesome!\n. @Semigradsky, maybe add it with a pull to explain how to run the examples? As mentioned in #79. Would be really great, thanks for contributing! :-)\n. HI @frost555 ,\nYeah, I think you are right, I can not see a scenario where it would be useful. But if it appears, we know what to implement :-)\n. HI @eriklharper ,\nI think you have to fix a couple of things first:\nevent.target.value, not currentTarget. currentTarget would be the body I think, as that is where the event is captured. target is the element that triggered the event, the input :-)\nAnd I also see you referencing this.state.required,should be this.props.required?\nHope this helps!\n. Hi @eriklharper,\nGreat you got it working :-)\nI would love getting started with the wiki. The repo has a technical description, but the wiki could be a more practical description. Showing how you build different types of form elements and explaining strategies to validations etc.\nhttps://github.com/christianalfoni/formsy-react/wiki\nFeel free to do whatever you want there, or nothing if its boring ;-)\n. Hi @janmyler ,\nSorry for late response. Formsy will still require mixins, but the relationship between the form and the form elements will technically use context. It is more performant than the current solution and the Formsy.Form element and its child form elements can actually live in different \"owners\". Which basically means they can live inside different \"render\" methods and still have a relationship.\n. @pkmiec and @firstdoit , yeah, I totally agree. I have no experience with React Intl (You referring to Yahoo?) or formatjs, but I am very open to suggestions and examples of how to handle this!\n. React 0.14 is now in Beta and I am working on the next release. When 0.14 is released and the new version has been tested, we go for 1.0 release :-) \nWhen it comes to translation I do not see why formsy needs a wrapper for this. As you probably have other translations in your project already, so:\njs\n<MyInput validations=\"isEmail\" validationErrors={{isEmail: translate('invalidEmail') }}/>\nIt would work just like translating any other text in your components?\nClosing this issue as things are moving along.\n. Hi @bryannaegele,\nJust wondered why you closed it? Did it not work out?\nI have just been busy working on fixing the props warning stuff for React 0.13.1, so have not had time reviewing the pull. Overall it makes a lot of sense, but have to dive into it a bit more :-)\n. Hi guys,\n@adamellsworth, @jmartin84 @darth10 @sdemjanenko @Semigradsky \nI have an idea! :-)\nI have been thinking a lot about the warnings on props being overriden. There are a few different strategies, but all of them involve \"heavy lifting\". The most effective and least intrusive is just for Formsy to suppress the specific props warnings. Normally I would say that is a bad thing, but since warnings are there to notify changes in the API and Formsy already has the implementation ready for next version AND you can not update to 1.0.0 without specifically telling NPM to do s, I believe this to be the best solution. It will ONLY suppress Formsy props warning, not other prop overrides. It does this by wrapping console.warn and checks for those specific messages.\nThe will be implemented as:\njs\nFormsy.suppressWarnings();\n// Log will show: \"Formsy is suppressing its props override until React 0.14. console.warning is wrapped and will not display correct source and line number in console\"\nIf I get an ok on this I will release a new version instantly :-)\nThanks!\n. I did some more research on this. There is a different method that will avoid this \"hack\". It is actually a method that would work even after React 0.14, though using context will optimize it. Will release it as soon as I can.\n. Ready for release.\n. Ah, missing a test for that one! Will create and thanks for fixing it @gneutzling! Will release new version now.\n. Hi @olimsaidov, \nThe change log is the releases. On the \"releases\" tab. I can point it out more in the documentation :-)\n. Hi @frost555 , since version 0.11 Formsy no longer handles Ajax directly. You have to wire it up manually. The reason is that Formsy should focus on being a good form validation tool, not ajax tool :-)\nSo by using onSubmit or onValidSubmit you can do the ajax call there and reset/invalidate the form with the callbacks received as arguments to these methods. That way you can also map whatever response you get from the server.\nI have fixed the error you pointed out, thanks for that ;-)\n. I suggest adding this as a default property on the form. Is there any reason you would not want to have \"novalidate\"... I mean, the reason you use formsy is to handle custom validation? :-)\n. Added this now. You can turn it off with: ` will be part of next release :-) Thanks!\n. Hi @dprentis,\nI did something wrong on first implementation. You should be able to use formNoValidate on the inputs too... the actual native inputs that is :-)\n. Hi guys, sorry for late reply, been in loss of time.\nI have not tested this very well. So what you are saying is that if we change documentation to:\njs\n<Formsy.Form>\n   <input name=\"foo\" required />\n   <input name=\"submit\" formNoValidate type=\"Submit\" />\n</Formsy.Form>\nWe are in the clear on this? formNoValidate does the job, though only on the native form element that runs the submit of the form? It being an input or a button?\n. Jup, I agree, will fix this for next release\n. @e-monson This seems like native behaviour. If you want commas you have to run with your own input where you suppress letters.\n. I absolutely agree. This was changed due to Formsy allowing any kind of form element with any kind of value, but these validations specifically point to \"inputs\", where a \"none-value\" should be valid.\nThis is fixed in next version! Thanks :-)\n. Hi @dprentis,\nThere seems to be a bug here, working on it now. Thanks for reporting!\n. Okay, fixed it... releasing new version now. Sorry about that, but written test for it too. Will not happen again :-)\n. Thanks for reporting, this is fixed in next release which arrives today :-)\n. Thanks for reporting @adamellsworth !\nReleased 0.12.1 now. The implementation was misunderstood. Sorry about that.\n. Hi guys!\nI am releasing a new version now where this is fixed :-) let you know!\n. Okay, released 0.12.5, https://github.com/christianalfoni/formsy-react/releases/tag/v0.12.5, would be great if you could verify that it works :-)\n. Hi @pkmiec ,\nGreat, thanks!\nYeah, this is a very specific implementation detail. The onSubmit you can register on a Formsy.Form  could get more information than just the value. Could even pass the component itself. So you would:\njs\nvar MyForm = React.createClass({\n  mySubmit: function (inputs, reset, invalidate) {\n    inputs.foo.getValue();\n    inputs.foo.isPristine();\n    inputs.foo.isValid();\n    inputs.foo.hasExternalError(); // new method\n  },\n  render: function () {\n    return (\n      <Formsy.Form onSubmit={this.submit}>\n        <MyInput name=\"foo\" validations=\"isEmail\"/>\n      </Formsy.Form>\n    );\n  }\n});\nDo you think something like that would be valuable?\n. Hi again guys and thanks for the discussion! This is a tough one and its difficult for me to decide on a good solution as I have not really been in this specific situation before. So I will just give some more suggestions on solving it with focus on keeping the API clean and simple :-)\njs\nonSubmit: function (model, reset, setErrors) {\n  setErrors(serverErrors, false); // Passing false will not invalidate the inputs, only set errors\n}\nYou think that would cover the need? The way you can decide by scenario if you want external errors to actually invalidate the inputs, or just give an error? Again, any change to the input would clear the error of that specific input.\n. Hi @pkmiec ,\nThanks for the suggestion! I think we are getting somewhere here, though I am not quite sure about delegating it to the mixin. I do see the advantage of overriding, I think it looks quite nice, but the validation of an input is not determined by the mixin, but the form. Because the valid state affects both the form and possibly other inputs.\nSo if I understand your suggestion correctly the form would not be able to invalidate on external errors, only a particular input would. \nThe way I see it is that we have two very specific behaviours we want to achieve. \"Should external errors invalidate the input and form, or should it not?\". Translating this to an API change that question is most simply answered with a boolean. My initial suggestion was on the callback of invalidating with external errors, but what about a form prop instead?\njs\n<Formsy.Form preventExternalErrorValidation/>\nOr did I miss an important point here? ;-)\n. Okay, adding preventExternalInvalidation in new release\n. Hi @pkmiec ,\nCould you check again with latest version? There was a bug with the required validation\n. Hmf, git is doing something weird with this code. Fixed with new version and added tests for it. Thanks for reporting!\n. Hi @Semigradsky,\nThanks for the fix! Great, I really appreciate the help :-) If you are ever in Trondheim, Norway, I will buy you a beer!\n. Great stuff! Thanks! Would you like to become official contributor @Semigradsky? Any changes to Formsy API have to be discussed of course, but you can go crazy with examples and documentation. And tests... ;-)\n. Cool, done, and thanks again :-)\n. Hi guys,\nReleased 0.12.5 which should fix this error. https://github.com/christianalfoni/formsy-react/releases/tag/v0.12.5\n. Hi Bryan,\n1. This absolutely makes sense\n2. If I understand you correctly you would get the opposite problem if pre populating with invalid data and expect it to trigger onInvalid? :-) Maybe a better solution is to ensure that the onValid/onInvalid always triggers after initialising?\nThanks for contributing with this!\n. Just cleaning up issues. Though you pointed out some good stuff here I will close the issue, as I have not gotten feedback on this by anyone else and I require some more discussions to make a solution. Please keep on commenting to make this part of formsy.\n. Hey @dprentis ,\nGot a pull request with lots of validation fixes, including this one. Could you verify that pull? #105 supports what you have considered? I will be releasing that now first. So it would be great with a new pull if you see anything it does not support. Sorry for the inconvenience. \n. @aesopwolf Are you not able to update to React 0.13.x? If so, that would be great, or we have to look more into it with more information.\n. Okay, glad you found a solution.  I say we just close this as people will be moving on to React 0.13 and especially React 0.14 with its new \"parent-child\" context which will help a lot of libraries out there.\n. I think it looks awesome! I have also opened up the WIKI for a more \"practical approach to Formsy\", as the README is very technical, and should be really.\nIf you have ideas to adding examples of building for elements and/or validation strategies, please feel free to go crazy :-)\nThanks, this is an awesome pull!\n. Hi @erwanjegouzo ,\nThis is really great work. Pulling it in! Thanks a bunch!\n. Hi @simiographics ,\nCould you paste a bit more code that causes the crash? If you are doing something wrong, something is missing in the documentation ;-)\n. Hi @simiographics,\nYou seem to be creating a loop here. Whenever the input changes you clean it again. In what situation do you want the input to be cleared? I suppose you do not want that whenever it changes?\n. Hi again,\nThis is very strange. I was not able to reproduce the error on a test I ran locally. I am thinking there is something \"outside\" causing the issue.\nCould you paste the complete code that runs on the previous example you gave? Try to narrow it completely down to just rendering the form with the input? I have to reproduce it to figure out what is happening.\nWould also be great to know what version of React your are running.\nNobody else has reported this kind of error so I would believe it is a weird edge case. Would be great to get to the bottom of it though :-)\n. Thanks so much for helping me out with this! Looking at it right now!\n. Okay, it is definitely a bug here. Tracking it now and will release a new version when it is fixed.\n. Okay, found the bug, fixing it now. It was a value comparison that did not handle objects and arrays.\n. Okay, fixed, creating a new release now. Just have to document a couple of things :)\n. Okay, released version 0.13 with some other fixes too\n. Great, let me know how it goes :-)\n. Hi @simiographics,\nIt seems my test did not cover this scenario. Working on it now!\n. Okay, a stupid mistake, strange that the test did not get it. Now tested with your example. Will release later today.\n. Okay, released new version, would be awesome if you could test it again. Thanks for your patience @simiographics !\n. Sweet! Good to hear and thanks!\n. Hi there! Thanks for checking this out and creating a great test case. I\nwill look into this tomorrow morning :-)\nOn Thu 23 Apr 2015 at 17:45 Pavel Nuzhdin notifications@github.com wrote:\n\n+1 it affects me too!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95629513\n.\n. Hi there,\n\nWhen testing React and Formsy in Node you need to load up JSDOM. At least currently. This is also required by other libraries so please do something like this in your test setup:\njs\nvar jsdom = require(\"jsdom\").jsdom;\nglobal.document = jsdom();\nglobal.window = document.defaultView;\nglobal.navigator = global.window.navigator;\nI am releasing a new test suite with Formsy today that uses this setup. You can check that out for more inspiration :-)\n. Hi again,\nHm, thats weird. The Formsy tests runs fine, though using jasmine-node and jsdom. Let me complete the test setup here as there might be a code change in Formsy since I last run that setup.\nIf I get the same error I will fix it or I will check out the repo with tests to dive into as it must be jest related.\n. Okay, I can verify that all Formsy tests runs fine with jasmine-node and jsdom. Looking into jest now\n. @worklez \nWhat verison of Node are you running? Seems that Jest does not support 0.12? Trying version 0.10.25, but getting an error there too.\n. Okay,\nI figured it out. Not quite sure why this happens. It might be a JSDOM thing. But you can not require the component inside the test, you have to do this:\n``` js\njest.autoMockOff();\nvar React = require('react/addons');\nvar TestUtils = React.addons.TestUtils;\nvar LoginPage = require('./../LoginPage.js');\ndescribe('LoginPage', function () {\n    it('has submit button disabled', function () {\n        var loginPage = TestUtils.renderIntoDocument(React.createElement(LoginPage));\n    });\n});\n```\n. Great, let me know how it works out! I keep pondering on why this causes an issue, it should not matter where you require. But I definitely think it is an environment thing and not a Formsy thing. Anyways, it is better to require them at the top because you probable have multiple tests using the same component :-)\n. Great! I will close the issue then. Yeah, it is a really weird problem. It would be worth checking out if this works:\n``` js\njest.autoMockOff();\nvar React = require('react/addons');\nvar TestUtils = React.addons.TestUtils;\ndescribe('LoginPage', function () {\n    it('has submit button disabled', function () {\n        var LoginPage = require('./../LoginPage.js');\n        var loginPage = TestUtils.renderIntoDocument(LoginPage());\n    });\n});\n```\nThe error itself is related to how the component is wrapped I think, or lack there of. You have createElement and also createFactory which needs to be used as wrappers on plain components. JSX syntax does this for you. Maybe the components gets wrapped automatically when required inside the tests?\n. Ah, hm, okay thanks for reporting that back. I am out of theories, at least right now. Let you know if I figure it out ;-)\n. Great input @erwanjegouzo, I think this follows the current API. Will need a couple of tests and some README documentation. If you have time, please fork latest version with jasmine-node tests and create a pull for that too. Or else I will find some time to do it :-)\n. Already did it, no worries :-)\n. Hi @binarykitchen ,\nIf that native feature is enough you should definitely use it. But Formsy is a form element builder and validator that takes the concept of form validation a lot further than native functionality. Formsy gives you any type of validation you desire and form handlers that triggers whenever the form elements you build change, becomes valid, invalid. External errors can be injected, cross input validation is not a problem etc.\nPlease let me know if you have any more questions to Formsy :-)\n. @binarykitchen using native validation would not conform with the validation possibilities you have with Formsy. So even though it would be one less validation rule packed into Formsy, setting type=\"email\" would not give you the possibility to check if input is pristine, it is required, disable the form when it is invalid etc. Btw, native invalid inputs looks different in all browsers, it is not very nice ;-)\n. You have to wrap all your form elements in a Formsy.Form:\njs\n<Formsy.Form>\n  <MyInputElement/>\n</Formsy.Form>\n. I can improve that error message to be more explicit :-)\n. This is supported yes, but not when the Form is located in a different component... a different render method\n. @firstdoit ,\nYou are perfectly right :-) Looking forward to React 0.14 with parent-child context though, then this will not be an issue anymore!\nThanks for the feedback, much appreciated ;-)\n. Hi @binarykitchen ,\nYou have to provide a Formsy.Form element too:\njs\n<Formsy.Form>\n        <MyInput\n          hasFeedback\n          required\n          name  = {@props.passwordName}\n          label = {t(\"Password\")}\n          value = {@state.password}\n        >\n</Formsy.Form>\n. It has to be inside the same component :-)\nIn React 0.14 we get parent-child context which will fix this, but currently it is not possible.\n. You are the first person to point it out actually ;-)\nWe are using Formsy on a huge project with a lot of forms and have not met that issue. That said, it would be nice to have, and it will when React 0.14 is released.\n. Jup, the important thing is that you find something that works for you :-)\n. Just to make sure there was no misunderstanding here :-) :\nThis works:\njs\nvar MyForm = React.createClass({\n  render: function () {\n    return (\n      <Formsy.Form>\n        <div>\n          <MyInput/>\n        </div>\n        <div>\n          <div>\n             <MyInput/>\n           </div>\n        </div>\n      </Formsy.Form>\n    );\n  }\n});\nBut this does not until React 0.14:\n``` js\nvar MyFormContent = React.createClass({\n  render: function () {\n    return (\n        \n\n\n\n\n\n\n\n    );\n  }\n});\nvar MyForm = React.createClass({\n  render: function () {\n    \n\n\n  }\n});\n```\n. React 0.14 is now in BETA and new formsy version is right around the corner. Will release some test info very soon.\n. Great @michaelcontento , thanks for taking the time! :-)\n. @sanemat ,\nJust want to make sure things are working for you after the latest release?\n. Good question!\nMaybe just remove it. Formsy adds complexity allowing for any kind of form element, not just traditional inputs, so I think that is too generic.\nMaybe change it out with the new \"isExisty\" function instead? And call is: \"isExisty\"? :-)\n. @Semigradsky Cool, nice! Will release new version with changes. \nBtw, I think it is easier to control releases if changes are pull requests. NPM and bower uses the tags and the current tag does not have isExisty in it, but people can read about it on the repo :-)\nNo biggy, but seems like a good way to do it?\n. Lets add a new tag, just have to review pull requests etc. do document a new release. Will do that tomorrow :-)\n. Hi there,\nThanks for discussing this. It has been a bit difficult identifying required/validation regarding \"empty values\" as formsy supports any kind of form element, not just traditional inputs.\nBut we are getting there :-)\n. Hi @mloginov ,\nIdentified problem, working on fix now, will probably be released later today. Thanks for reporting!\n. Okay, released new version, please try again :-)\n. Hi @tomaash and thanks for the pull!\nI agree this should be in there, but I have a suggestion for you. Since the goal here is to set some initial values, maybe we should put:\njs\n<Formsy.Form values={{\n  foo: 'bar',\n  bar: 'foo'\n}}>\n  <MyInput name=\"foo\"/>\n  <MyInput name=\"bar\"/>\n</Formsy.Form>\nThat way it is very specific to what you want to achieve, set some initial data. We could of course also merge in your change, as you still might need to reset the values easily :-)\n. Hi @tomaash , so sorry for late reply, but I have been completely in loss of time the last week. I will release a new version tomorrow morning including your fix!\n. Hi @crdeutsch and so sorry for the late reply. I have been deep into a different project and have just been in loss of time.\nIt might seem a bit aggressive to do the validation on each key press, though as I understand it you mean that from a user experience perspective, not a technical perspective?\nI would suggest that you add your own state to your form element. Something like, showValidation. That way you can choose with onBlur or Enter to set that state to true and combine it with the internal methods of Formsy. Like:\njs\nvar MyInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  getInitialState: function () {\n    return {\n      showValidation: false\n    },\n    onInputChange: function (event) {\n      this.setValue(event.target.value);\n    },\n    onInputBlur: function () {\n      this.setState({\n        showValidation: true\n      });\n    },\n    onInputFocus: function () {\n      this.setState({\n        showValidation: false\n      });\n    },\n    render: function () {\n      return (\n        <div>\n          <input onChange={this.onInputChange} value={this.getValue()}/>\n          <div>{this.showError() && this.state.showValidation ? this.getErrorMessage() : null}</div>\n        </div>\n      );\n    }\n  }\n});\nWould that make sense?\nI do not think it is a good idea to grab value from DOM node as it breaks with the principles of React. The state of the component defines what is in the UI, not the other way around. I am sure we can find a solution for this :-)\nLet me know if I misunderstood any needs and we can keep working towards a solution!\n. Hi again!\nHm, I am very certain that the DOM should not be the \"source of truth\". The component state should be the \"source of truth\". I can not quite wrap my head around how you get the inputs to go out of sync with the state of the component.\nTo solve this I think we need to set up a small project I can run locally to see the problem in context. I am sure there is a \"component state way\" to solve this :-)\nI will close this for now since you solved it with a fork and I have not gotten feedback on this from anyone else, but please keep commenting if you want this put into Formsy. Thanks for contributing with the feedback and examples :-)\n. Great! :+1: \n. Hi guys and thanks for the discussion!\nWhen React 0.14 is out, with the new context handling I think we could do something like this\n``` js\nvar AddressForm = React.createClass({\n[...]\nrender: function(){\n    return (\n        \n\n\n\n\n    ); \n}\n});\n\n\n\n\n\n```\nSo the idea here is that the extended prop would be passed into the sub Formsy.Form, causing Formsy to return a plain DIV instead of a FORM. That way you could easily include forms in forms. But we depend on the context change to make the sub elements work I believe. I will do some tests tomorrow to verify if current context implementation can make things a bit easier for us.\nBut would this useful?\n. Cool, let me put this in on release today. Getting to work now :-)\n. Hi guys,\nAre you referring to using other string values? Have now implemented:\njs\n<input name=\"address.street\"/> => {address: { street: 'value' } }\nCan not see any reason to support anything else?\n. This is the code btw:\n``` js\nreturn Object.keys(this.model).reduce(function (mappedModel, key) {\nvar keyArray = key.split('.');\n  while (keyArray.length) {\n    var currentKey = keyArray.shift();\n    mappedModel[currentKey] = keyArray.length ? mappedModel[currentKey] || {} : this.model[key];\n  }\nreturn mappedModel;\n}.bind(this), {});\n``\n. Just closing it for now as any more complex implementation has to be next version. Want to get new version out today :-)\n. But how could it be an array?` is always a string?\n. Sorry, but I do not understand how the name of an input could lead to that structure? As I understand this you want:\njs\n<Formsy.Form>\n  <MyInput name=\"foo\"/>\n  <MyInput name=\"address.street\"/>\n  <MyInput name=\"address.postCode\"/>\n</Formsy.Form>\nWhich leads to this structure:\njs\n{\n  foo: 'value',\n  address: {\n    street: 'value',\n    postCode: 'value'\n  }\n}\nHow would you structure the inputs to give a structure that would require arrays? Sorry for my misunderstanding... but its Friday after all ;-)\n. Please describe \"list support\". I do not understand what a \"list\" is in regards of naming an input? Would be great with an example of html syntax and how that translates to:\njs\n{nav_items: [{a:b, c:d}, {a:f, c:g}]}\nWhat does this form look like?\n. Hi guys,\nsorry for late reply. I think it makes sense to conform the name syntax to application/x-www-form-urlencoded type of data, which is like you describe @chrbala.\nTried finding a good lib for this, but there does not seem to exist any? But we can sure build it. So does everybody feel comfortable with:\n``` js\n< MyInput name=\"addresses[0][street]\" value=\"Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"Different Street\"/>\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\n```\n. Yes, sorry, of course. Copy/paste error :-)\n. me too,heh\n. Okay, this is now implemented, using the separate project: https://github.com/christianalfoni/form-data-to-object. Using it as a hard dependency as it is unlikely you need it for something else... will be part of next release\n. Hi guys!\nI was hoping React 0.14 would be right around the corner with its parent-child context. That should solve the issue without any changes.\nIt should be possible to fix it with a mixin too. let me try out an implementation so that it will be easy to switch when React 0.14 gets here\n. Hi guys,\nI will check out the suggestion as soon as I can and if it does not break anything I will bring it into next release :-) Thanks for taking the time @nathanwelch!\n. React 0.14 is in BETA now, and right around the corner. Implemented with context now, and other fixes. This will be the next release as soon as React 0.14 is released. Sorry for the wait, but this is the best solution (I would say).\n. I suppose this is solved?\n. Thanks for including Formsy, great comparison project btw :-)\n. Totally agree, will fix this for next release tomorrow.\n. Great, thanks :+1: \n. Hi @jcapogna,\nThat is an excellent question :-)\nI have not tried this, though I believe there are some events you can use? I think onChange will trigger on a normal FileInput\njs\nvar MyFileInput = React.createClass({\n  onInputChange: function (event) {\n    // Verify that file is correct via the event\n    this.setValue(true);\n    // Or if not valid\n    this.setValue(false);\n  },\n  render: function () {\n    return <input type=\"file\" onChange={this.onInputChange}/>\n  }\n});\nAnd then just validate with:\njs\n<MyFileInput validations=\"isTrue\"/>\nYou think that would work?\n. Hi again @jcapogna. I believe you should be able to just store the \"files\" property from the input, instead of its \"value\" property. Check out this article:\nhttp://blog.teamtreehouse.com/uploading-files-ajax\n. Closing this, hopefully it worked out :-)\n. Okay, cool, good luck! :-)\n. Hi guys, version will be bumped tomorrow morning :-)\n. This is not taken into account, but should. Might get into tomorrows release or most certainly the next after that :-)\n. Okay, this is now fixed for next release. Both validations and required can be changed at runtime and instantly a new validation check will be run. Thanks for the tip!\n. Hi @alexjg,\nJup, from the API documentation:\njs\n<MyInputComponent \n  name=\"email\" \n  validations={{\n    isEmail: true,\n    maxLength: 50\n  }} \n  validationErrors={{\n    isEmail: 'You have to type valid email',\n    maxLength: 'You can not type in more than 50 characters'\n  }}\n/>\nThat solved it?\n. Ah, sorry @alexjg , now I understand.\nYes, this should absolutely be in there. It would be great if you created a pull. I am releasing a new version today, but this would indeed be welcomed in the next release!\n. Okay, this is now in for next release. Thanks for contributing!\n. Ah, I know whats wrong. Its the passing of props to to the form element. It seems that a native form also has an onChange. Will revert back to strict control of props passed. Will release fix now :-)\n. Try now\n. Hi guys,\nYes, this is indeed something nice to have, though I am unsure that this job is for Formsy. I would expect this scenario has a model with the state of some entity on the server, like a person. The model is presented in a formsy form. Deciding what to pass to the server I think is the responsibility of the model layer, not the UI layer. So you would rather pass the whole form to the model-layer, figure out what is actually necessary to pass to the server and then do that. If Formsy is in control of this you will most likely meet scenarios where Formsy has some logic deciding what to pass to the server, and the model layer might have some of the other logic, maybe Formsy does not do a good enough job and we have to build upon the API to solve lots of different scenarios.\nSo yeah, I am concerned about introducing it in Formsy, as this is closer to the model layer than the UI layer I think. It basically drills down to comparing two objects and extracting the diff, which some other lib probably already does  very effectively.\nBut please, if you disagree we can discuss it more :-) Just my initial thoughts!\n. Yeah, though it depends on how you implement it. Either Formsy needs to keep track on \"changed values\" or it does a \"diffing\" of initial form values and current values when submitting.\nThe last part if the simplest and most effective implementation I would suggest... that said, it is very easy to make yourself. Often libraries like Backbone Model or Angular Resource allows you to do this very easily.\nSorry, but I think it is the correct choice to have this logic closer to where you communicate with the server, not inside Formsy. But please, if a lot of people disagree I will of course reconsider.\n. Let me keep this open and we will revisit after next release\n. Hi @davidtinker and thanks for looking into this :-)\nI think the best solution is to make the function referenced, instead of creating it each time (inside formsy source code). That way the diff check will not see them as different values and you do not have to do anything about it :-)\nI have changed this now, so it should be okay. Let me know if you see something I do not see!\n. Hi guys,\nHm, do you have a small code example? Currently the mixin for elements checks if the value of the element has changed, and if so, it will run \"setValue\"... also running the validation. I am a bit unsure where this list state is being used?\nChanging \"validations\" prop and \"required\" prop will correctly run a new validation in next release btw.\n. Closing old issue\n. Cool! Will create a new release as soon as I have gotten through all the latest issues :-)\n. Yup, would suggest setting the value on the blur event, instead of the change event. \njs\nvar Comp = React.createClass({\n  mixins: [Formsy.Mixin],\n  onInputBlur: function (event) {\n    this.setValue(event.target.value);\n  },\n  render: function () {\n    return <input onBlur={this.onInputBlur}/>\n  }\n});\nClosing this as it seems to be solved?\n. Got this example from someone too: https://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\nWhen next release is out we should start the work on some \"default elements\", where this validate on blur input could be one of them :-)\n. Hi @endragor ,\nThere are two ways to fix this. Either you make pure versions of DateInput and TimeInput, which is not Formsy related. Then you create a small wrapper for DateInput and TimeInput, which uses the mixin. That leaves you open to create a DateTimeInput, using the pure DateInput and TimeInput and exposing its name: \"dateAndTime\" or whatever which holds both values, date and time... does that make sense?\nIn the next version of Formsy the traverseChildrenAndRegisterInputs will not be used. It will use context instead, which means that this should probably work.\nKeep an eye out for the preview and we can try it out :-)\n. Closing old issue\n. Hi guys!\nHm, that kinda sucks. The really good thing about React is that the UI is a reflection of the state in the components, not the other way around. It is also an issue that we do want to know exactly when the inputs are filled, as it should trigger validation...\nAnd this seems to be a browser issue, as autofill should trigger a change event. If it does not trigger any event it is impossible for Formsy to run its validations, even though we could grab values from inputs on submit. \nhm hm, what a pickle... have to think about this, though it might be better to push the browser vendors to implement this correctly.\n. Well, we could add a property to the form which will check the inputs. Something like <Formsy.Form autorefill></Formsy.Form>, which would trigger this manual check of the inputs.\nThe problem is that formsy elements are not only typical form inputs, they can be anything really. So a better approach might be to add a method to the mixin: componentDidMount() { this.checkAutoRefill(this.refs.input) }. Which of course unregisters on unmount.\nWhat do you think?\n. I do, thanks for putting focus on this though :-)\n. Hi there,\nThe next version should allow you to do this as it uses context instead of props. I will soon give some information on how to try out the new version which requires React 0.14. Stay tuned :-)\n. Check out this issue: https://github.com/christianalfoni/formsy-react/issues/158 :-)\n. Hi there!\nYou can solve this by manually submitting the form :-)\nQuick example:\njs\nonSubmit: function (model) {\n  if (this.state.typeOfSubmit === 'oneOfThem') {\n    // doe something\n  }\n},\nsubmit1: function () {\n  this.setState({\n    typeOfSubmit: 'oneOfThem'\n  }, this.refs.form.submit);\n},\nsubmit2: function () {\n  this.setState({\n    typeOfSubmit: 'theOther'\n  }, this.refs.form.submit);\n},\nrender: function () {\n  return (\n    <Formsy.Form onSubmit={this.onSubmit} ref=\"form\">\n      <button onClick={this.submit1}>Submit1</button>\n      <button onClick={this.submit2}>Submit2</button>\n    </Formsy.Form>\n  );\n}\nWould that work for you?\n. @aphillipo Yeah, I see your point on it being automatic :-) But I think the stability of Formsy is due to all these \"special scenarios\" not being implemented, rather have good enough hooks to solve anything. There are so many suggestions and if all of them were implemented it would be very hard to document it all and keeping it stable :-)\nThanks for the feedback!\n. Hi there!\nThis seems strange. Could you try to just put your error out in a separate element? Just to make sure that it is not material-ui making any problems? Also try with a different validation rule. \n. Closing old issue\n. Hi guys!\nThis is a very typical question, \"why required?\". The thing is that indicating if something is required is different than indicating validation. For example an empty input that validates as email is not invalid because it it empty, but it is invalid if it also is required :-) Confusing, yes, but let me try this:\nRequired defines what a missing value is, (no text, is false, is undefined etc.) and invalidates the input as \"missing value\" when that occurs.\nValidations defines what values are valid, WHEN there is value in the input.  \nIt is really difficult to express this in a good way :-)\n. Adding a \"validateOnSubmit\" prop to the form is a good idea. My personal opinion is that users hate filling out a complete form and submit just to get an error in their face and figure out where it happened. Its better to notify at once... or on blur. But yeah, have to get new version out first, but lets keep this open :)\n. @idream3 Its because a formsy element can be any kind of input. Lets say you have an element that is a list and you want it to be required, which is when the length of the value is 0 :-) You need required=\"hasLength\" or something. Does that make sense?\nBut this feature is at the top of the priority list now, so it will be implemented very soon.\n@silvenon Great tip on the debounce thingy, never thought of that :-) \n. Hi guys!\nI got a really interesting suggestion on a different issue. You should easily be able to achieve \"validate on submit\" by just adding a class to the form. This class hides all validation messages. When you hit submit, you remove the class and any validation errors is now displayed.\nDoes this solve the issue?\n. Awesome, thanks @Semigradsky . Really struggling with getting time to work on formsy, but got vacation now and will create a new release that supports React 0.14. So will work using the BETA, fix the nesting stuff of components and go through all issues to fix bugs.\nI think you are doing a great job replying and working on the project. Would you like to get more involved? Actually, I am proposing that you take the lead of the project. I will of course still be involved, but I think the project would be better of having you as lead on the project :-)\nI completely understand if you do not have time, but though I could suggest it\n. That is great! :-) Let me just wrap up the next React 0.14 version and clean things up for you in the issues etc. Then I will announce with the next release. Again, I am still around, so please do not hesitate to contact me to discuss things etc., but feel completely free to do whatever you want. I have faith in you ;-)\n. Hi @ericdfields and thanks for looking into this! In the next version Formsy stops messing around with the children and will use \"react context\" instead. That will fix the issue :-)\n. Hi there,\nFormsy is built for flexibility. There are so many different ways of handling a form and to support most of them Formsy has a lot of hooks. Initially Formsy did support posting data directly to the server and handle any errors, but the implementation was too specific. There were so many requests on support of headers, map errors from server etc. It just got way out of control. So instead of having one very opinionated implementation of talking to the server, it has an extremely flexible hook that lets you do it exactly as you want to.\nSo I am sorry to say that this will not be implemented... and I can not really see that this is a problem?:\njs\nsendData(form, reset, invalidate) {\n  myAjaxLib.post('/form', form)\n    .success(this.doWhatever)\n    .error(invalidate);\n},\nrender() {\n  return <Formsy.Form onSubmit={this.sendData}/>\n}\nSorry to be such a dick about it ;-)\n. Hi @garbin , great! Thanks. Working on a new version of formsy now, going through all open issues and adding support for React 0.14, adding support for the new parent-child context relationship\n. Hi!\nYeah, @rblakeley, please set up a new issue on that. Currently it just builds objects by splitting on .. It was implemented like this based on a discussion, but lets review it :-)\n. Hi guys,\nYes, the fix is not part of the current release, but the next one. It is right around the corner :-)\n. Hi, yeah, I agree... lets make this part of next release. \n. Okay, got Mixin, HOC and Decorator in the new branch now. Using a traditional approach from other projects.\n. Hi guys!\n@twisty thanks so much for taking the time to test! \n@Semigradsky Great work, we are closing in on release :-)\nNOTE! to get the latest version of master in the TEST-project, run npm install --force\n. @Semigradsky Maybe create a couple of tests for these errors messages, I was not in the mood for it when I implemented... you know how it is ;-)\n. @richardaday , jup it does :-)\n. Hi there!\nAs soon as React 0.14 is released it will be released :-) The code is ready, working with React 0.14 Beta 1\n. Decorators will be part of next release :-)\n. Hm, I did not quite understand what you mean @eriknyk? \n. New version out\n. Will close this as it is fixed in new version coming soon, thanks for the feedback @ajaykurien :-)\n. Release Candidate out now on React, right around the corner :-) Took a bit longer than I thought, but now it is really close!\n. It seems that this is solved? Closing it, thanks for suggestions and hope you got it fixed @sloria!\n. Hi there,\nThe required prop can take a validation value, just like validations. This is to define what validation rule should define the input as required. By default that is required, required={true} and required=\"isDefaultRequiredValue\". They are the same and checks if the value is undefined or an empty string. But you can change this to f.ex. required=\"isFalse\". If the value now becomes false it will be indicated as required. Good for a checkbox the is required to be checked.\nDoes that make sense? validations and required is hard to express in a good way :-/\n. Closing this as it does work, reopen if still having problems\n. Hi guys,\nThere has been a bit confusion on how required is being used and it will be cleaned up after next release of Formsy.\nThe prop validations uses validation rules to set errors. The prop required can also use validation rules to indicate when an input should be required.\nSo:\n`` js\n// When the value of the input isfalse`, showRequired() will give true\n\n// When the value of the input is falsy (empty string etc), showRequired() will give true\n\n// showRequired() will always be false \n\n```\nSo what we need to clean up here is maybe use a new property. Just throwing it out there:\njs\n<MyInput name=\"some_field\" type=\"text\" required={true/false} requiredRule=\"isFalse\">\nBut yeah, I hope this explained how it works now.\n. Hi @eventhough, yeah, I think you might be right about this. Just to summarize with my own words here.\n\nWhenever \"someValue\" changes that should become the new pristine value of \"MyInput\". Whenever \"MyInput\" uses \"setValue\" that will of course not become the new pristine value.\nWould love some comments on this, @Semigradsky, @idream3?\n. Hm, I have been thinking a bit more on this. Like a plain input you might want to pass the changes through your application state store. Typically onChange on an input and value={this.state.value}. With Formsy, in combination with f.ex. Cerebral:\njs\n@Cerebral({\n  form: ['form']\n})\nclass MyForm extends React.Component {\n  onFormChange(data) {\n    this.props.signals.formChanged({form: data});\n  }\n  render() {\n    return (\n      <Formsy.Form onChange={(data) => this.onFormChange(data)}>\n        <MyInput name=\"foo\" value={this.props.form.foo}/>\n      </Formsy.Form>\n    );\n  }\n}\nThis is a typical setup for creating \"application state\". The problem with implementing what is suggested here is that the value prop will change on every change of the form. So it will always be a pristine value.\nThis is the difficult balance of internal/external state handling. I think it is important to let developers control the form from some external state store, without messing up the pristine stuff. Maybe we should rather have a pristineValue or defaultValue? That way you can control it however you like?\n. Will add defaultValue in next release, it just gives a lot more control. Let me know if this is a problem\n. You actually have access to all the elements of the form through the formsy.form component. You could go through those instead of wrapping. So:\njs\nvar MyForm = React.createClass({\n  mixins: [Formsy.Mixin],\n  showErrors: function () {\n    this.refs.form.inputs // All components registered to form. Check their state prop etc.\n  },\n  render: function () {\n    <Formsy.Form ref=\"form\" onInvalidSubmit={this.showErrors}/>\n  }\n});\nThough it would be good to get this info directly. So maybe \"onInvalidSubmit\" and \"onInvalid\" hooks should pass an object with elements and their error messages. What do you think?\n. Will make part of next release :-)\n. @Semigradsky I was thinking about adding a \"ELEMENT EXAMPLES\" next to \"HOW TO USE\". Just lots of different examples of how to write different kinds of elements. You up for starting on that? :-)\n. Hm, could you give a code example that breaks? Just have to understand exactly where the problem is :-)\n. Old issue\n. Hi there!\nThanks for the heads up! What is the exact syntax where you get this error? \n. Formsy is just a normal element, <Formsy.Form/>, Higher Order Components and Decorator version of the elements you build for the form will arrive in next version :-)\n. I believe this is the same as #147 ?\nIt depends on the user experience here. Normally you would not allow a submit when any of the elements are invalid. So in the component with your Formsy form you use onValid and onInvalid to track when the submit button actually can be pressed.\nBut the issue mentioned here is about allowing validations to run only when submitting, not as you change the value of the inputs. Would that work for you?\n. Hi, thanks for a great example!\nAnd yeah, this can be solved by just having an error class on the form and toggle it when actually hitting the \"submit\" button. So the validation is happening \"under the hood\", but the class decides to display them or not.\nSo yeah, will not implement new logic for this as it can be solved with current hooks!\n. It will be 0.14.x on next release, but thanks for the heads up :-)\n. Eyh, nice, thanks :-)\n. Sorry for very late reply, but this is great, thanks! :-)\n. Hehe, I think this is right. You state what rule it needs to match to indicate that it is required. And that is when it is \"isFalse\", when checkbox is unchecked... but \"required to be checked\" is the opposite, so yeah, correct :-) Ah, validation is hard! :-D\n. You can do async validation if you run your own validation. If you use the following hooks, as an example:\n``` js\nvar validate = function (values, reset, invalidate) {\n // Check the values of the form and do your async validation, then\n// run the invalidate function to invalidate the form\n};\n\n// Your elements\n\n```\nI am very unsure how Formsy would handle this internally, as those validations run as values change. Not good user experience. I suppose you want to run it on submit? So yeah, I would solve it with the code above :-)\nLet us know if that does not work for you, but it would be nice with a use case to assist you better\n. This still has to be done using existing hooks. Async validation is way too complex for Formsy to handle internally I believe. There are just so many ways to handle it, so it is better to have some hooks that manages it exactly like you want. Added example here to wiki. \nLet me know if there are specific scenarios and we can take a look at them?\n. ah, can not see any problem with having this in there, thanks!\n. Hi there @jaraquistain,\nAre you passing null as the value to the input? You have some snippets, just to make sure I understand this correctly\n. Hi @rodryquintero, in what way is it jerky? :-) I think it would be better to fix that as it is more \"future proof\" in regards of accessing child components in React.\n. Hi again,\nHm, what did you put inside the onChange handler? diffing two shallow objects should not cause jerkyness. I have this feeling there is something special happening inside the onChange handler in this specific scenario. Calling a function vs accessing an object should not have any noticeable performance issues\n. Ah, yes, its important to give key values so that React can identify them \"as the same component\". Please elaborate if you think I misunderstand something, but yeah, my interpretation is that this is a React issue :)\n. Eyh, this is really great!\nThere are so many different ways to handle stuff so Formsy tries to give all the hooks needed to do whatever you want. That said, sometimes it can be very verbose.\nI will add this code example to the WIKI first. It might be better to have this stuff as addon components rather than properties/options inside Formsy. So lets keep this and figure out where it fits best.\n. Closing this, please reopen if still a problem\n. Hi guys!\nYes, this is something that has been requested before too. \nAdding it to list for next release: https://github.com/christianalfoni/formsy-react/issues/206\n. Makes sense, let me add it to next release, https://github.com/christianalfoni/formsy-react/issues/206\n. Hi @wwsun Yes, it is because you validate asynchronously, which does not work. It will not be part of the API as it is a very complex operation that devs want to handle very differently. You have to move this logic outside the form.\njs\nvar nameBeingValidated = null;\nvar onSubmit = function (data, reset, invalidate) {\n  if (data.name && nameBeingValidated !== data.name) {\n    // Validate name on server\n    // If not valid\n   invalidate({name: 'That name is not valid');\n  }\n};\n<Formsy.Form onSubmit={onSubmit}>\n  <MyInput name=\"name\">\n</Formsy.Form>\nSimple example, I hope it makes sense\n. Hi guys,\nSo sorry for my wrong example. Yes, you would do this on the submit.\n. Let me know if is needed to discuss this more!\n. Thanks for this, fixed now :-)\n. I believe you are calling the method incorrectly. Using class syntax? Make sure you bind the method to the component :-)\njs\n  <div onClick={this.changeValue.bind(this)}/>\n. @EthanML , you can access it by using \"ref\" on the form elements and dive into the component, but that is not really the way to go :-)\nIf you give some more context to the challenge I am sure we can figure out a good way to handle this!\n. Added to list: https://github.com/christianalfoni/formsy-react/issues/206\n. When next version is released I will start working on formsy-addons which will have different types of form elements that handles complex validation and I think this fits in! Sounds okay?\nSomething like:\njs\nimport FormsyComponent from 'formsy-react-addons/Component';\n. Awesome stuff, thanks! Hopefully we are right around the corner for React 0.14 and can officially release :-)\n. You know how that works? Trying to find some documentation. Thought I could just checkout the branch and publish it with --tag beta?\n. Hm, for some reason it states that I can not publish over the previous version. Maybe I still have to give it a new version number, but using --tag beta it will not be installed by default?\n. ah, yes, there we go:\nnpm install formsy-react@beta :-)\n. Would be great if you could confirm that everything works as expected, and especially if not :-)\n. No worries, thanks for following it up :-)\n. let me update and release new package\n. Okay, try now :)\n. Hi @blittle,\nThanks for this. Yes, I am going through the tests for next release. New version of node etc. have to fix it :-)\n. Hm, yes, this is interesting. The state should be reset with the this.updateModel();, but have to test it more closely. I see you removed it on a commit to your fork? Any reason for that? I can not see how that could fix the issue... did it? :-)\nLet me know and I will put this on the block\n. Aha, I see you fixed it :-) This makes sense, thanks!\n. Maybe add link to README? :-)\nJust closing this...\n. Just bring in everything. Tests has to be cleaned. New version of Node etc.\n. Everything except validate on submit is now part of it. Validate on submit can still be used by having a className on the form that you flip on when submitting the first time. By default validations are just hidden\n. Hi guys,\nI am bringing branch React 0.14 into master this weekend and releasing new version. There are so many people using new version of React RC so I do not see any reason to wait.\nAll fixes will be included in this new release. \n. If I understand you correctly you can add a validation rule here:\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\nIf you create a function that takes a value and validates it you could call that function from Formsy addValidationRule and reuse the same function on the server. Does that make sense?\n. There will be a defaultValue prop in next version. It is related to how pristine values are handled, though conceptually I think it will help with your scenario too :-)\n. defaultValue not in yet, preparing it for next version :-)\n. Ah, thanks, and thanks for your feedback :-)\n. Great, thanks! :-)\n. 0.16 out now :-)\n. Perfect, thanks :-)\n. Great stuff, thanks a lot :-)\n. Great it worked out @salayev .\nWhen next version of Formsy is released it will have a review as there has been many changes since its release. The though it to build a suggested spec for 1.0 version where APIs and how the internal state of the component will be perfected.\n. Hi @salayev ,\nValidation vs required is a surprisingly difficult concept. validations is related to showError() and getErrorMessages(). required is related to showRequired(). So you never check errors related to required. The reason is that they are two different things. You want to indicate a required input differently than when a validation is wrong :-)\n- validations prop => showError() / getErrorMessages()\n- required prop => showRequired()\n. I think you have to give us some more details than that :-)\n. Jup, agreed, https://github.com/christianalfoni/formsy-react/issues/206\n. Great, thanks!\nNew version will be released this weekend, with latest version of React 0.14\n. Thanks for the heads up! https://github.com/christianalfoni/formsy-react/issues/206\n. Great thanks! :-)\n. Ah, must have been a merge issue here, sorry about that!\n. ",
    "mschipperheyn": "cool! Looking forward to it\n. Yeah, providing handlers would make a lot more sense. \n. makes sense to me. You might want to examine some other superagent options that might be set so as to open up whatever other options might be there to the api. Perhaps even a generic options object that doesn't overwrite the key aspects you use such as action, method etc \n. Sorry. Not an issue. Typo. I used Formsy.form and got a cryptic exception from React\n. cool! Looking forward to it\n. Yeah, providing handlers would make a lot more sense. \n. makes sense to me. You might want to examine some other superagent options that might be set so as to open up whatever other options might be there to the api. Perhaps even a generic options object that doesn't overwrite the key aspects you use such as action, method etc \n. Sorry. Not an issue. Typo. I used Formsy.form and got a cryptic exception from React\n. ",
    "srconklin": "I followed the advice above and changed the onChange to onBlur for a login form. (data validation while typing email and password for a login modal is annoying)... that worked great! \nI also used the form in the sample here \nhttps://github.com/christianalfoni/formsy-react#formsy-gives-you-a-form-straight-out-of-the-box\nso that the button is disabled until data validation is complete. \nthat i also working great! \nThen I modified MyInput component to place the name and id the input into the input tag itself like so:\n \nwhich makes google Chrome recognize it as a common form element and autofill it...\nwhich i find very useful... \n(until i gave the input tag the email and password names, there was no autofilling)\nBut then I noticed that when the form loads the onInvalid={this.disableButton}  handler \n fires which sets the canSubmit = false and overrides my default setting of canSubmit = true\nNow , i am left with a form that has good cached input but i cannot submit it until i blur one of the fields.\nso....\nWhy does the onInvalid handler fire on load?\nor more importantly do you know of a work-around to make it where the button is NOT disabled until the user actually types something in and blurs out of the field? \nOR how can enable the button on load? \nhttp://www.evernote.com/shard/s349/sh/f5c5714e-583a-4c76-858e-633b86fceb24/c9958eed29fdf12bfdda0160c57da9d8\n. arghh! I posted this to the wrong issue.. sorry.. \nwhen i said.. \"follow the advice above\" I was refering to what you recommended to the user in this thread\nhttps://github.com/christianalfoni/formsy-react/issues/1\n. Now i see that my code that i was referring to  was removed by github\nthis is what i was referring to  when i said how i modified the MYInput component like so\nid={this.props.name} name={this.props.name} \nI added these properties to input tag.\n. Sorry to bother.. but i turned off disableButton just to test something and realized that when the input boxes are prefilled with the autofill data from chrome.. the this.setValue function is never called....\n // setValue() will set the value of the component, which in\n  // turn will validate it and the rest of the form\n  changeValue: function(event) {\n    this.setValue(event.currentTarget.value);\n  },\nWhat would be the best practice for calling this function to set the value of the component when the component mounts? \n. Sorry to Bother... Disregard all my comments. i have figured out what i need and some of the issues that i reported were because of my own mistakes. \n. Hi Christian-\nThanks for the quick response. \nwell, it seems to work if I pass a hardcoded value as you have done in the example:\n \nwhich then sets it until some user input overwrites it which is fine.\nbut i need to be like this:\n \nso that the onchange of my select box (in another sibling component) will pass its value (via the prop agency) to it and i can see it update on every change in the option selection.\nThat does not seem to be working....Seems like i can only set it once with  the value attribute.. then i can never get a new value to overwrite it.. must be something in the way my components are structured?  see screenshot... thanks for your help..\nhttp://www.evernote.com/shard/s349/sh/32d2f31c-3b19-436c-b325-9950cee769f1/5ecdb65e62000af079d97e35541fdf1c\n. Thanks. I will give this a try later today.. thanks for looking into the issue\n. I followed the advice above and changed the onChange to onBlur for a login form. (data validation while typing email and password for a login modal is annoying)... that worked great! \nI also used the form in the sample here \nhttps://github.com/christianalfoni/formsy-react#formsy-gives-you-a-form-straight-out-of-the-box\nso that the button is disabled until data validation is complete. \nthat i also working great! \nThen I modified MyInput component to place the name and id the input into the input tag itself like so:\n \nwhich makes google Chrome recognize it as a common form element and autofill it...\nwhich i find very useful... \n(until i gave the input tag the email and password names, there was no autofilling)\nBut then I noticed that when the form loads the onInvalid={this.disableButton}  handler \n fires which sets the canSubmit = false and overrides my default setting of canSubmit = true\nNow , i am left with a form that has good cached input but i cannot submit it until i blur one of the fields.\nso....\nWhy does the onInvalid handler fire on load?\nor more importantly do you know of a work-around to make it where the button is NOT disabled until the user actually types something in and blurs out of the field? \nOR how can enable the button on load? \nhttp://www.evernote.com/shard/s349/sh/f5c5714e-583a-4c76-858e-633b86fceb24/c9958eed29fdf12bfdda0160c57da9d8\n. arghh! I posted this to the wrong issue.. sorry.. \nwhen i said.. \"follow the advice above\" I was refering to what you recommended to the user in this thread\nhttps://github.com/christianalfoni/formsy-react/issues/1\n. Now i see that my code that i was referring to  was removed by github\nthis is what i was referring to  when i said how i modified the MYInput component like so\nid={this.props.name} name={this.props.name} \nI added these properties to input tag.\n. Sorry to bother.. but i turned off disableButton just to test something and realized that when the input boxes are prefilled with the autofill data from chrome.. the this.setValue function is never called....\n // setValue() will set the value of the component, which in\n  // turn will validate it and the rest of the form\n  changeValue: function(event) {\n    this.setValue(event.currentTarget.value);\n  },\nWhat would be the best practice for calling this function to set the value of the component when the component mounts? \n. Sorry to Bother... Disregard all my comments. i have figured out what i need and some of the issues that i reported were because of my own mistakes. \n. Hi Christian-\nThanks for the quick response. \nwell, it seems to work if I pass a hardcoded value as you have done in the example:\n \nwhich then sets it until some user input overwrites it which is fine.\nbut i need to be like this:\n \nso that the onchange of my select box (in another sibling component) will pass its value (via the prop agency) to it and i can see it update on every change in the option selection.\nThat does not seem to be working....Seems like i can only set it once with  the value attribute.. then i can never get a new value to overwrite it.. must be something in the way my components are structured?  see screenshot... thanks for your help..\nhttp://www.evernote.com/shard/s349/sh/32d2f31c-3b19-436c-b325-9950cee769f1/5ecdb65e62000af079d97e35541fdf1c\n. Thanks. I will give this a try later today.. thanks for looking into the issue\n. ",
    "asafshen": "Hey @christianalfoni @srconklin \nI ran into this issue as well (Chrome autofill values do not trigger input onChange)\nSolved it by this by the following:\n```\ncomponentDidMount() {\n    setTimeout(() =>{\n      const input = this.refs[this.props.name];\n      const autofillValue = input.defaultValue;\n      if(autofillValue) {\n        this.props.setValue(this.state.value);\n      }\n    },2000);\n  }\nrender () {\n  return (\n   \n       ....\n       <input \n         ... \n         ref={this.props.name}\n  />\n\n\n  );\n``\n- the timeout got by trial and error...\n. Hey @christianalfoni @srconklin \nI ran into this issue as well (Chrome autofill values do not trigger inputonChange`)\nSolved it by this by the following:\n```\ncomponentDidMount() {\n    setTimeout(() =>{\n      const input = this.refs[this.props.name];\n      const autofillValue = input.defaultValue;\n      if(autofillValue) {\n        this.props.setValue(this.state.value);\n      }\n    },2000);\n  }\nrender () {\n  return (\n   \n       ....\n       <input \n         ... \n         ref={this.props.name}\n  />\n\n\n  );\n```\n- the timeout got by trial and error...\n. ",
    "FoxxMD": "That would be perfect.\nBehaviors to consider for isPristine():\nWhat will trigger the change? \nI'm using onBlur but there might be benefits to letting the user decide (someone else may want to trigger on onChange\nCould all inputs be triggered globally?\nI'm thinking of a use case where a user only touches some inputs and ignores other, then tries to submit a form.\n- User triggers onSubmit\n- isPristine is set to false for all inputs even if they have not been touched so that validation displays for the entire form. (Something to consider if resetForm is going to do the opposite IE set isPristine to true for all inputs)\nProgramatic triggering?\nThe only use case I can think of is if you have two related inputs and you want one to have validation triggered after the first one is touched as a visual cue to the user.\n\nIn any case, only the first two are relevant to my scenario :) If you'd like any help implementing this let me know!\n. > What triggers the change? \nYour approach makes more sense. Keeping isPristine hooked into setValue definitely makes usage simpler and still allows for customizing the cue (like you mentioned in my case for onBlur).\n\nprogramatic triggering\n\nAlso agree with you that it's too complex to try to implement now. It'd be better to wait and see how the api gets used first.\n\nI also have a question about onSubmit but it may need its own issue: \nWhy does formsy-react allow submitting without first checking if the form is valid? I realize that if I don't use the url property I can handle the onSubmit action on my own (and use isValid to check everything is ok before taking the next step) -- but if I do use url then the form is submitted regardless of its validity. Wouldn't you want to prevent submission if the form is valid? Being as that's the point of client-side validation.\nI will put in a pull request today btw.\n. Woops my commit message has true and false backward for the 2nd and 3rd bullet point! But it's correct in the code.\n. :+1: \n. That would be perfect.\nBehaviors to consider for isPristine():\nWhat will trigger the change? \nI'm using onBlur but there might be benefits to letting the user decide (someone else may want to trigger on onChange\nCould all inputs be triggered globally?\nI'm thinking of a use case where a user only touches some inputs and ignores other, then tries to submit a form.\n- User triggers onSubmit\n- isPristine is set to false for all inputs even if they have not been touched so that validation displays for the entire form. (Something to consider if resetForm is going to do the opposite IE set isPristine to true for all inputs)\nProgramatic triggering?\nThe only use case I can think of is if you have two related inputs and you want one to have validation triggered after the first one is touched as a visual cue to the user.\n\nIn any case, only the first two are relevant to my scenario :) If you'd like any help implementing this let me know!\n. > What triggers the change? \nYour approach makes more sense. Keeping isPristine hooked into setValue definitely makes usage simpler and still allows for customizing the cue (like you mentioned in my case for onBlur).\n\nprogramatic triggering\n\nAlso agree with you that it's too complex to try to implement now. It'd be better to wait and see how the api gets used first.\n\nI also have a question about onSubmit but it may need its own issue: \nWhy does formsy-react allow submitting without first checking if the form is valid? I realize that if I don't use the url property I can handle the onSubmit action on my own (and use isValid to check everything is ok before taking the next step) -- but if I do use url then the form is submitted regardless of its validity. Wouldn't you want to prevent submission if the form is valid? Being as that's the point of client-side validation.\nI will put in a pull request today btw.\n. Woops my commit message has true and false backward for the 2nd and 3rd bullet point! But it's correct in the code.\n. :+1: \n. ",
    "aesopwolf": "This almost works. The problem is that the defaultValue (value?) doesn't get loaded on first page load. For example, this code block:\n``` jsx\n'use strict';\nvar React = require('react');\nvar Formsy = require('formsy-react');\nvar Input = React.createClass({\n    mixins: [Formsy.Mixin],\n    changeValue: function(event) {\n        this.setValue(event.currentTarget.value || this.props.defaultValue);\n    },\n    componentWillReceiveProps: function (nextProps) {\n        // Only change to the new default value if it is currently showing the old one\n        if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n            this.setValue(nextProps.defaultValue);\n        }\n    },\n    render: function() {\n        var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n        var errorMessage = this.getErrorMessage();\n    return (\n        <div className={className}>\n            <input type=\"text\" value={this.getValue()} onChange={this.changeValue} />\n        </div>\n    );\n}\n\n});\nmodule.exports = Input;\n```\nand this component...\njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <Form.Input name=\"firstName\" required defaultValue={this.state.profile.first}/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nWill load an input element with an empty value. However, by entering value AND THEN deleting it will the defaultValue appear in the input. Here's a .gif:\n\nI think the reason for this behavior might be because nextProps.defaultValue is undefined on the first  load. I guess it's because componentWillReceiveProps is not called on the initial render. Any suggestions on what to do here? \n. Thanks for the quick reply! You indeed understood the problem correctly :)\nI tried both methods you suggested, but ran into the same problem as @srconklin, which is that these methods only seem to work with hardcoded strings, and not from the react state {this.state.profile.first}\n. Actually, on second hand... My problem might not be related to formsy, and instead an issue of the way {this.state.profile.first} is being set. It's an async api call to a server that's happening in a mixin. So that's why it's undefined here:\njsx\ncomponentWillMount: function() {\n    console.log(this.props.defaultValue); // undefined?\n    this.setValue(this.props.defaultValue);\n},\nDo you think that sounds right?\n. @christianalfoni sorry for my amateur hour from before... I got it figured it out! But I'm back to the endless loop.\n@srconklin did you figure out how to avoid the endless loop? \nI'm thinking a new method setValueNoValidate might be needed for the componentWillReceiveProps method that does just as it says, it sets the value but doesn't validate it. Thus preventing an endless loop, maybe? \nObviously this wouldn't be good for data that needs to be validated as soon as it loaded, but if it's coming from the server you can probably safely assume it's already validated. \nWhat do you guys think?\n. Oh! That's good news. I tried it out, and I don't get the endless loop anymore! However, I still have one more problem.\nThis code will work fine: \njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email} />\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nBut as soon as I put any validations on it:\njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email} validations=\"isEmail\" validationError=\"This is not a valid email\" required/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nThen it will throw the error Uncaught TypeError: Cannot read property 'match' of undefined in the console. This could probably be fixed in the validationRules with a check to make sure the value argument is defined. \njsx\n'isEmail': function (value) {\n  // do a check for `value` first, otherwise the next line throws an error since `value` is sometimes undefined (like on first page load)\n  return value.match(/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]...\n}\n\nAlso, to double check. When building my form element, should componentWillRecieveProps be as simple as this?:\njsx\ncomponentWillReceiveProps: function (nextProps) {\n    this.setValue(nextProps.value);\n},\n. Gotcha. I had assumed that was just a second option, not the required way. Thanks for clearing it up!\n. disabled={false} doesn't make any sense, try disabled={true}. Unfortunately, I'm not able to update to React 0.13.x (at least at the moment).\nIn the mean time I've added my own addValidationRule that takes care of my use case. I'm okay with this solution. So if you want to close this feel free! Thanks\n. @IanVS yes, closing this.. Just merged and published @wuct 's fix\nIt's available on npm under v0.19.1 https://www.npmjs.com/package/formsy-react. I had to revert the original pull request that @wuct created. I published the reversion under v0.19.2. \nIt was a breaking change for existing components. I really should've released it as 1.0.\nI've setup a 1.0 milestone that will re-release a fix for this (might still use https://github.com/christianalfoni/formsy-react/pull/386 but will have to update all of the docs/examples and also need to account for forms that are disabled until inputs are valid). Looks good to me, any reason this hasn't been merged in yet?. @mikaelengstrom looks like this PR is outdated. Since it's so small, please feel free to recreate this PR. It will probably be easier/faster than having @gabrielboucher update this branch.. @SaitejaP I would recommend trying @keul's solution. It's what I use myself.. Thanks @tjcampbell for suggesting the idea of implementing getInstance(). I just submitted a PR that does exactly that. Feel free to chime in / do a peer review on https://github.com/christianalfoni/formsy-react/pull/399\n. When using your component you should provide a value attribute to suppress the React warning about \"elements should not switch from uncontrolled to controlled \". For example:\njsx\n<MyInput value=\"\" name=\"password\" title=\"Password\" type=\"password\" required />. I'm in favor of moving to the @dperini regex. We can hardcode, but I'd also be okay with pulling in https://github.com/kevva/url-regex. Mainly since it seems that there are occasional updates to the regex itself. So it's nice to have a repo that keeps up to date with the original gist and runs unit tests.. @cgood92 while it's possible to get a list of all the validation errors in user-land, it would still be nice to have this built into Formsy.\nWe currently have getModel, but I would like to see either a new method, maybe getExtendedModel, or just an argument passed to getModel that would return extra meta data about each input, which would obviously include validation status.\nSo yes, it's 'on the roadmap', but the priority isn't super high. I'll gladly accept a PR for it though!. @keown Sorry, formsy requires you to write custom components. Have you looked through the examples or read the README? I'm going to close this since this isn't an issue with formsy itself. This type of question would be better suited for stackoverflow.\n. The current validator is a beastly regex:\njs\n  isUrl: function (values, value) {\n    return validations.matchRegexp(values, value, /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i);\n  },\nSo I'd rather not touch it. Fortunately, you can actually add your own custom validation rules . Here's one you can add to your own project:\njs\nFormsy.addValidationRule('isLocalUrl', function (values, value) {\n  return (/^(http:\\/\\/)?localhost$|^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^(?:0*:)*?:?0*1$/gi.test(value));\n});\nI based it off this stackoverflow answer. Thanks @wuct, just published v0.19.1 with this in it https://www.npmjs.com/package/formsy-react. Give this a try:\n```jsx\nimport React, { Component } from 'react';\nimport { HOC } from 'formsy-react';\nclass FormInput extends Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  blurred: false,\n};\n\n}\nhandleBlur() {\n    this.setState({\n      blurred: true,\n    })\n  }\nhandleFocus() {\n    this.setState({\n      blurred: false,\n    })\n  }\nrender() {\n    var errorMessageFromBluring = this.state.blurred ? this.props.getErrorMessage() : '';\n    return (\n      \n{errorMessageFromBluring}\n this.props.setValue(e.target.value)}\n          value={this.props.getValue() || ''}\n        />\n      \n    );\n  }\n}\nexport default HOC(FormInput);\n``. Ah, yes! This has been on my todo list for a long time.. @Jareechang I haven't made an progress with this. I'll gladly accept a PR though!. Are you guys usinggetValue()` on your custom input element?\n\nYou should always use the getValue() method inside your formsy form element.. @brianfegan and @prasanna1211 would you mind providing sample code? In my experience reset works fine but only when you use getValue() in your component.. @brianfegan as the value attribute itself https://github.com/christianalfoni/formsy-react/blob/master/examples/components/Input.js#L35\n\nTry updating your component to use getValue and let me know how it goes.. @brianfegan Yeah you really should be using getValue. Would you mind setting up a demo repo of the problem you're facing?. pinging @christianalfoni do you need additional maintainers for this project?\n. I came across a different approach that might be slightly better, which is to pass a prop called innerRef that takes a function just like the normal ref prop. A full example can be seen here https://github.com/styled-components/styled-components/pull/122\nWhat do you think @christianalfoni?\n. @Semigradsky are you able to chime in here and help approve this?\n. No movement. I haven't heard anything from the maintainers since opening the PR. They seem to have abandoned the project.\nI'm debating forking it and getting a majority of the other PR's merged in as well.\n\nOn Nov 23, 2016, at 3:49 PM, Brian Fegan notifications@github.com wrote:\nIs there any movement on this? I'm seeing this as a blocker to being able to reset a multi checkbox group of checkbox inputs to their initial state. While this.refs.form.reset() will reset the overall form value to that initial state, the HOC wrapped checkboxes still remain checked.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I pulled the trigger and forked the repo. I published it to npm under formsy (can't believe it was available!). I also merged in this PR to the new fork.\n\nYou can check it out here:\n\nhttps://www.npmjs.com/package/formsy\nhttps://github.com/aesopwolf/formsy\n\nI think I'll make an issue to advertise the new fork and it's location.. I was given write access to the repo (see https://github.com/christianalfoni/formsy-react/issues/411). So I'm going to reopen this PR and get it merged in.. @acomito You're correct, you can't access this.refs inside the render function.\nHiding/showing form fields based on another fields current value really varies depending on your situation. Would you mind pasting some code? If not, then I would suggest using setting up an onChange handler for your <Formsy.Form>, for example:\njsx\nformChangeHandler(model) {\n  if(model.employmentStatus === 'Full time') {\n    this.setState({askForEmployerName: true});\n  } else {\n    this.setState({askForEmployerName: false});\n  }\n}\nThen you can hide/show the \"Employer Name\" input in your form based on this.state.askForEmployerName.\nI'm going to close this as is since it's not actual issue with formsy, but we can still continue the discussion.. @you-fail-me is your custom input component using getValue()?. @you-fail-me Try updating your component to use getValue(). It should fix your problem\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#value. Thanks. Not sure if it makes sense for PR's to commit release files though. I think npm run deploy should be something we run when we're ready to deploy a new version. So, after x new features or every x weeks.\nPlus it seems like a pain for contributors to have to go through.\nWhat are your thoughts? (I was just made a collaborator on the project and you seem to have some previous contributions so I'd like to get your feedback \ud83d\ude42). Ah that's a good point about being able to use your fork, I didn't think of that. I guess we can leave the release files as 'optional' for PRs.\nI'll go ahead and merge this as is.. This is a really good point, thanks for bringing it up. I've struggled with something similar when I wanted to allow emoji characters.\nI think this can probably be solved in user land. We expose a validator called matchRegexp. And since the xregexp library on npm advertises that it compiles to native RegExp objects then in theory you can just pass pass the compiled regular expression to matchRegexp.\nLet me know if that works for you or not.. I just gave it a quick test and it worked as expected! Didn't have to do anything special. For example:\njsx\n<InputGroup\n  name=\"emoji\"\n  label=\"emoji\"\n  type=\"text\"\n  validations={{\n    matchRegexp: XRegExp('^\\\\pS$', 'A'), // https://github.com/slevithan/xregexp#unicode\n  }}\n  validationError=\"Please enter an emoji\"\n/>\nI'll leave this open for now and close it once I add a note to our documentation.. Docs updated https://github.com/christianalfoni/formsy-react/blob/master/API.md#validators. We probably won't merge anything in using Promise for awhile. Browser support is definitely getting better but IE still doesn't provide support. See https://github.com/christianalfoni/formsy-react/issues/70 for a previous discussion.. Have you looked into updateInputsWithError(errors)? I have a feeling that might solve your use case.. No worries, this was actually an earlier issue https://github.com/christianalfoni/formsy-react/issues/371\nLong story short you need to ask https://github.com/mbrookes/formsy-material-ui to update their formsy-react dependency to v0.18.1. @Casy Are you using formsy-material-ui?. Ah, well their latest version hasn't updated to formsy-react@0.18.1, you see they are still on 0.18.0. Update: I sent an email to the original maintainer and he made me a Collaborator on the project. Thanks @christianalfoni \ud83d\ude00\nI'll be able to help close issues, merge PR's and even publish to npm. Do you have a full repo where I can reproduce the bug? This is kind of hard to debug based just on the code samples.. Thanks for the PR \ud83d\ude03\nWould you mind describing the problem more clearly when you say nested data? Did you have nested form elements? I'm not even sure that's allowed/possible. If you could provide some sample code that would be great.\nAlso, it looks like one of the tests is failing.. Thanks for the sample code. This is a situation that should be solved in user-land then. Just import form-data-to-object into your app and call:\njs\nthis.refs.form.reset(formDataToObject(newProps.model));\nBut really, I would suggest naming your inputs something more friendly, like so:\njsx\n<Input name=\"_id\" value={null} type='hidden'/>\n<Input name=\"identifier\" label=\"National ID\" required/>\n<Checkbox name=\"active\" label=\"active?\" value={false}/>\n<Input name=\"name\" label=\"Patient's Name\" required/>\nAnd then you can normalize your reset data to look like this:\njs\n{\n  _id: 123,\n  identifier: 'abc'\n  active: 'checked',\n  name: 'John Doe'\n}\nI'm going to close this since it's not something that should be in the core library. We appreciate the PR though!. Thanks for catching this. @lennardschutter what version of formsy-react are you on? If things were working correctly before and suddenly changed it was probably due to the 0.19.1 release. See the discussion here https://github.com/christianalfoni/formsy-react/commit/57f97cb0459a539c0533e305dbd1bfd85ad1a02f\nIn short, you can use isFormSubmitted() to conditionally show your errors.. Might be worth using 0.19.1 then and conditionally showing your errors by using isFormSubmitted().\nThe validations will run but you will only display the errors if the form has been submitted.\nOr I might be reading your issue wrong. What do you mean by \"from a partial save\"?. Never mind my comment about 0.19.1, we actually just issued a rollback of that version. (long story).\nBack to your issue... Would you mind copy/pasting your Formsy.Form component and also your custom form element (just one should be enough)? It will help me a lot to debug this.. Hmm, that looks like it will work. Mind giving me a little bit to think about it? I might want to wait for the 1.0.0 release to expose the new method.. @alexhawkins thanks for opening the issue. Would you mind taking a look at the discussion here\nEven if we rollback we're still contemplating re-releasing the breaking change in the next 0.20.x release. So, it would be best practice for you to version lock your dependencies in production (especially for pre 1.0 releases).\nAnyways, we will probably roll back before the end of the day. But it would be nice if you added your input at the above link just to help move forward.\nThanks, and sorry for pushing the breaking change.. What's the use case here? Maybe we should just extend reset instead of introducing a new method?. This looks fine, but I'm hesitant to expose new methods. What's the use case here? Any reason resetValue doesn't suffice?. First glance this looks fine. Ideally we will rewrite all the docs (and source) to use ES6 classes and High Order Components though. https://github.com/christianalfoni/formsy-react/issues/395\nI'll wait a week (maybe 2?) before merging this. Hopefully myself, or someone else can create a PR to fully deprecate createClass/createReactClass. @ottis and @drewlustro are you guys on the latest version? v0.19.5?. This is amazing. Since this kills the decorator we should bump the version to 1.0.0. Thoughts?. Thanks for this. I started testing the beta branch this morning. I'll open a PR with a few tweaks of my own and let you review, then if all is good we can publish v1. @track0x1 I'm running into a problem with the reset-values example. Would you mind taking a look at it? Just run yarn examples, open up http://localhost:8080/reset-values/index.html and click the \"Reset\" button -- I can't figure out why the checkbox disappears. I've been trying to debug this for 2 days. \nI'm thinking about using \"defaultChecked\" in Checkbox.js but will need to wait for react v15.6.2 since there's a bug at the moment. Wow... I have no words. Thank you so much. I was going crazy.. It's been a while since I've touched this. I'm just going to merge it in to the beta branch as is and open up more PR's as need be.. I've been debating forking this repo to it's own organization so that I can easily add more owners.\n@track0x1 would you be interested in being added as an owner?. I thought I had the time to help bring this project back to life, but I haven't be able to help out nearly as much as I thought I could.\nI just gave @maccuaa, @track0x1, @twisty, and @sdemjanenko access to the npm project. (You were just the first people that came to mind).\nLastly, this project should be converted to a github org, preferably https://github.com/formsy (but that's currently taken). So maybe https://github.com/formsy-react for the time being, @rkuykendall do you want to set that up? You could then invite those 4 people I mentioned above to be owners on the github org.. This almost works. The problem is that the defaultValue (value?) doesn't get loaded on first page load. For example, this code block:\n``` jsx\n'use strict';\nvar React = require('react');\nvar Formsy = require('formsy-react');\nvar Input = React.createClass({\n    mixins: [Formsy.Mixin],\n    changeValue: function(event) {\n        this.setValue(event.currentTarget.value || this.props.defaultValue);\n    },\n    componentWillReceiveProps: function (nextProps) {\n        // Only change to the new default value if it is currently showing the old one\n        if (this.getValue() === this.props.defaultValue && nextProps.defaultValue !== this.props.defaultValue) {\n            this.setValue(nextProps.defaultValue);\n        }\n    },\n    render: function() {\n        var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n        var errorMessage = this.getErrorMessage();\n    return (\n        <div className={className}>\n            <input type=\"text\" value={this.getValue()} onChange={this.changeValue} />\n        </div>\n    );\n}\n\n});\nmodule.exports = Input;\n```\nand this component...\njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <Form.Input name=\"firstName\" required defaultValue={this.state.profile.first}/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nWill load an input element with an empty value. However, by entering value AND THEN deleting it will the defaultValue appear in the input. Here's a .gif:\n\nI think the reason for this behavior might be because nextProps.defaultValue is undefined on the first  load. I guess it's because componentWillReceiveProps is not called on the initial render. Any suggestions on what to do here? \n. Thanks for the quick reply! You indeed understood the problem correctly :)\nI tried both methods you suggested, but ran into the same problem as @srconklin, which is that these methods only seem to work with hardcoded strings, and not from the react state {this.state.profile.first}\n. Actually, on second hand... My problem might not be related to formsy, and instead an issue of the way {this.state.profile.first} is being set. It's an async api call to a server that's happening in a mixin. So that's why it's undefined here:\njsx\ncomponentWillMount: function() {\n    console.log(this.props.defaultValue); // undefined?\n    this.setValue(this.props.defaultValue);\n},\nDo you think that sounds right?\n. @christianalfoni sorry for my amateur hour from before... I got it figured it out! But I'm back to the endless loop.\n@srconklin did you figure out how to avoid the endless loop? \nI'm thinking a new method setValueNoValidate might be needed for the componentWillReceiveProps method that does just as it says, it sets the value but doesn't validate it. Thus preventing an endless loop, maybe? \nObviously this wouldn't be good for data that needs to be validated as soon as it loaded, but if it's coming from the server you can probably safely assume it's already validated. \nWhat do you guys think?\n. Oh! That's good news. I tried it out, and I don't get the endless loop anymore! However, I still have one more problem.\nThis code will work fine: \njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email} />\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nBut as soon as I put any validations on it:\njsx\n<Formsy.Form url=\"/users\" onSuccess={this.changeUrl} onValid={this.enableButton} onInvalid={this.disableButton}>\n  <MyOwnInput name=\"email\" value={this.state.profile.email} validations=\"isEmail\" validationError=\"This is not a valid email\" required/>\n  <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nThen it will throw the error Uncaught TypeError: Cannot read property 'match' of undefined in the console. This could probably be fixed in the validationRules with a check to make sure the value argument is defined. \njsx\n'isEmail': function (value) {\n  // do a check for `value` first, otherwise the next line throws an error since `value` is sometimes undefined (like on first page load)\n  return value.match(/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]...\n}\n\nAlso, to double check. When building my form element, should componentWillRecieveProps be as simple as this?:\njsx\ncomponentWillReceiveProps: function (nextProps) {\n    this.setValue(nextProps.value);\n},\n. Gotcha. I had assumed that was just a second option, not the required way. Thanks for clearing it up!\n. disabled={false} doesn't make any sense, try disabled={true}. Unfortunately, I'm not able to update to React 0.13.x (at least at the moment).\nIn the mean time I've added my own addValidationRule that takes care of my use case. I'm okay with this solution. So if you want to close this feel free! Thanks\n. @IanVS yes, closing this.. Just merged and published @wuct 's fix\nIt's available on npm under v0.19.1 https://www.npmjs.com/package/formsy-react. I had to revert the original pull request that @wuct created. I published the reversion under v0.19.2. \nIt was a breaking change for existing components. I really should've released it as 1.0.\nI've setup a 1.0 milestone that will re-release a fix for this (might still use https://github.com/christianalfoni/formsy-react/pull/386 but will have to update all of the docs/examples and also need to account for forms that are disabled until inputs are valid). Looks good to me, any reason this hasn't been merged in yet?. @mikaelengstrom looks like this PR is outdated. Since it's so small, please feel free to recreate this PR. It will probably be easier/faster than having @gabrielboucher update this branch.. @SaitejaP I would recommend trying @keul's solution. It's what I use myself.. Thanks @tjcampbell for suggesting the idea of implementing getInstance(). I just submitted a PR that does exactly that. Feel free to chime in / do a peer review on https://github.com/christianalfoni/formsy-react/pull/399\n. When using your component you should provide a value attribute to suppress the React warning about \"elements should not switch from uncontrolled to controlled \". For example:\njsx\n<MyInput value=\"\" name=\"password\" title=\"Password\" type=\"password\" required />. I'm in favor of moving to the @dperini regex. We can hardcode, but I'd also be okay with pulling in https://github.com/kevva/url-regex. Mainly since it seems that there are occasional updates to the regex itself. So it's nice to have a repo that keeps up to date with the original gist and runs unit tests.. @cgood92 while it's possible to get a list of all the validation errors in user-land, it would still be nice to have this built into Formsy.\nWe currently have getModel, but I would like to see either a new method, maybe getExtendedModel, or just an argument passed to getModel that would return extra meta data about each input, which would obviously include validation status.\nSo yes, it's 'on the roadmap', but the priority isn't super high. I'll gladly accept a PR for it though!. @keown Sorry, formsy requires you to write custom components. Have you looked through the examples or read the README? I'm going to close this since this isn't an issue with formsy itself. This type of question would be better suited for stackoverflow.\n. The current validator is a beastly regex:\njs\n  isUrl: function (values, value) {\n    return validations.matchRegexp(values, value, /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i);\n  },\nSo I'd rather not touch it. Fortunately, you can actually add your own custom validation rules . Here's one you can add to your own project:\njs\nFormsy.addValidationRule('isLocalUrl', function (values, value) {\n  return (/^(http:\\/\\/)?localhost$|^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^(?:0*:)*?:?0*1$/gi.test(value));\n});\nI based it off this stackoverflow answer. Thanks @wuct, just published v0.19.1 with this in it https://www.npmjs.com/package/formsy-react. Give this a try:\n```jsx\nimport React, { Component } from 'react';\nimport { HOC } from 'formsy-react';\nclass FormInput extends Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  blurred: false,\n};\n\n}\nhandleBlur() {\n    this.setState({\n      blurred: true,\n    })\n  }\nhandleFocus() {\n    this.setState({\n      blurred: false,\n    })\n  }\nrender() {\n    var errorMessageFromBluring = this.state.blurred ? this.props.getErrorMessage() : '';\n    return (\n      \n{errorMessageFromBluring}\n this.props.setValue(e.target.value)}\n          value={this.props.getValue() || ''}\n        />\n      \n    );\n  }\n}\nexport default HOC(FormInput);\n``. Ah, yes! This has been on my todo list for a long time.. @Jareechang I haven't made an progress with this. I'll gladly accept a PR though!. Are you guys usinggetValue()` on your custom input element?\n\nYou should always use the getValue() method inside your formsy form element.. @brianfegan and @prasanna1211 would you mind providing sample code? In my experience reset works fine but only when you use getValue() in your component.. @brianfegan as the value attribute itself https://github.com/christianalfoni/formsy-react/blob/master/examples/components/Input.js#L35\n\nTry updating your component to use getValue and let me know how it goes.. @brianfegan Yeah you really should be using getValue. Would you mind setting up a demo repo of the problem you're facing?. pinging @christianalfoni do you need additional maintainers for this project?\n. I came across a different approach that might be slightly better, which is to pass a prop called innerRef that takes a function just like the normal ref prop. A full example can be seen here https://github.com/styled-components/styled-components/pull/122\nWhat do you think @christianalfoni?\n. @Semigradsky are you able to chime in here and help approve this?\n. No movement. I haven't heard anything from the maintainers since opening the PR. They seem to have abandoned the project.\nI'm debating forking it and getting a majority of the other PR's merged in as well.\n\nOn Nov 23, 2016, at 3:49 PM, Brian Fegan notifications@github.com wrote:\nIs there any movement on this? I'm seeing this as a blocker to being able to reset a multi checkbox group of checkbox inputs to their initial state. While this.refs.form.reset() will reset the overall form value to that initial state, the HOC wrapped checkboxes still remain checked.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I pulled the trigger and forked the repo. I published it to npm under formsy (can't believe it was available!). I also merged in this PR to the new fork.\n\nYou can check it out here:\n\nhttps://www.npmjs.com/package/formsy\nhttps://github.com/aesopwolf/formsy\n\nI think I'll make an issue to advertise the new fork and it's location.. I was given write access to the repo (see https://github.com/christianalfoni/formsy-react/issues/411). So I'm going to reopen this PR and get it merged in.. @acomito You're correct, you can't access this.refs inside the render function.\nHiding/showing form fields based on another fields current value really varies depending on your situation. Would you mind pasting some code? If not, then I would suggest using setting up an onChange handler for your <Formsy.Form>, for example:\njsx\nformChangeHandler(model) {\n  if(model.employmentStatus === 'Full time') {\n    this.setState({askForEmployerName: true});\n  } else {\n    this.setState({askForEmployerName: false});\n  }\n}\nThen you can hide/show the \"Employer Name\" input in your form based on this.state.askForEmployerName.\nI'm going to close this as is since it's not actual issue with formsy, but we can still continue the discussion.. @you-fail-me is your custom input component using getValue()?. @you-fail-me Try updating your component to use getValue(). It should fix your problem\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#value. Thanks. Not sure if it makes sense for PR's to commit release files though. I think npm run deploy should be something we run when we're ready to deploy a new version. So, after x new features or every x weeks.\nPlus it seems like a pain for contributors to have to go through.\nWhat are your thoughts? (I was just made a collaborator on the project and you seem to have some previous contributions so I'd like to get your feedback \ud83d\ude42). Ah that's a good point about being able to use your fork, I didn't think of that. I guess we can leave the release files as 'optional' for PRs.\nI'll go ahead and merge this as is.. This is a really good point, thanks for bringing it up. I've struggled with something similar when I wanted to allow emoji characters.\nI think this can probably be solved in user land. We expose a validator called matchRegexp. And since the xregexp library on npm advertises that it compiles to native RegExp objects then in theory you can just pass pass the compiled regular expression to matchRegexp.\nLet me know if that works for you or not.. I just gave it a quick test and it worked as expected! Didn't have to do anything special. For example:\njsx\n<InputGroup\n  name=\"emoji\"\n  label=\"emoji\"\n  type=\"text\"\n  validations={{\n    matchRegexp: XRegExp('^\\\\pS$', 'A'), // https://github.com/slevithan/xregexp#unicode\n  }}\n  validationError=\"Please enter an emoji\"\n/>\nI'll leave this open for now and close it once I add a note to our documentation.. Docs updated https://github.com/christianalfoni/formsy-react/blob/master/API.md#validators. We probably won't merge anything in using Promise for awhile. Browser support is definitely getting better but IE still doesn't provide support. See https://github.com/christianalfoni/formsy-react/issues/70 for a previous discussion.. Have you looked into updateInputsWithError(errors)? I have a feeling that might solve your use case.. No worries, this was actually an earlier issue https://github.com/christianalfoni/formsy-react/issues/371\nLong story short you need to ask https://github.com/mbrookes/formsy-material-ui to update their formsy-react dependency to v0.18.1. @Casy Are you using formsy-material-ui?. Ah, well their latest version hasn't updated to formsy-react@0.18.1, you see they are still on 0.18.0. Update: I sent an email to the original maintainer and he made me a Collaborator on the project. Thanks @christianalfoni \ud83d\ude00\nI'll be able to help close issues, merge PR's and even publish to npm. Do you have a full repo where I can reproduce the bug? This is kind of hard to debug based just on the code samples.. Thanks for the PR \ud83d\ude03\nWould you mind describing the problem more clearly when you say nested data? Did you have nested form elements? I'm not even sure that's allowed/possible. If you could provide some sample code that would be great.\nAlso, it looks like one of the tests is failing.. Thanks for the sample code. This is a situation that should be solved in user-land then. Just import form-data-to-object into your app and call:\njs\nthis.refs.form.reset(formDataToObject(newProps.model));\nBut really, I would suggest naming your inputs something more friendly, like so:\njsx\n<Input name=\"_id\" value={null} type='hidden'/>\n<Input name=\"identifier\" label=\"National ID\" required/>\n<Checkbox name=\"active\" label=\"active?\" value={false}/>\n<Input name=\"name\" label=\"Patient's Name\" required/>\nAnd then you can normalize your reset data to look like this:\njs\n{\n  _id: 123,\n  identifier: 'abc'\n  active: 'checked',\n  name: 'John Doe'\n}\nI'm going to close this since it's not something that should be in the core library. We appreciate the PR though!. Thanks for catching this. @lennardschutter what version of formsy-react are you on? If things were working correctly before and suddenly changed it was probably due to the 0.19.1 release. See the discussion here https://github.com/christianalfoni/formsy-react/commit/57f97cb0459a539c0533e305dbd1bfd85ad1a02f\nIn short, you can use isFormSubmitted() to conditionally show your errors.. Might be worth using 0.19.1 then and conditionally showing your errors by using isFormSubmitted().\nThe validations will run but you will only display the errors if the form has been submitted.\nOr I might be reading your issue wrong. What do you mean by \"from a partial save\"?. Never mind my comment about 0.19.1, we actually just issued a rollback of that version. (long story).\nBack to your issue... Would you mind copy/pasting your Formsy.Form component and also your custom form element (just one should be enough)? It will help me a lot to debug this.. Hmm, that looks like it will work. Mind giving me a little bit to think about it? I might want to wait for the 1.0.0 release to expose the new method.. @alexhawkins thanks for opening the issue. Would you mind taking a look at the discussion here\nEven if we rollback we're still contemplating re-releasing the breaking change in the next 0.20.x release. So, it would be best practice for you to version lock your dependencies in production (especially for pre 1.0 releases).\nAnyways, we will probably roll back before the end of the day. But it would be nice if you added your input at the above link just to help move forward.\nThanks, and sorry for pushing the breaking change.. What's the use case here? Maybe we should just extend reset instead of introducing a new method?. This looks fine, but I'm hesitant to expose new methods. What's the use case here? Any reason resetValue doesn't suffice?. First glance this looks fine. Ideally we will rewrite all the docs (and source) to use ES6 classes and High Order Components though. https://github.com/christianalfoni/formsy-react/issues/395\nI'll wait a week (maybe 2?) before merging this. Hopefully myself, or someone else can create a PR to fully deprecate createClass/createReactClass. @ottis and @drewlustro are you guys on the latest version? v0.19.5?. This is amazing. Since this kills the decorator we should bump the version to 1.0.0. Thoughts?. Thanks for this. I started testing the beta branch this morning. I'll open a PR with a few tweaks of my own and let you review, then if all is good we can publish v1. @track0x1 I'm running into a problem with the reset-values example. Would you mind taking a look at it? Just run yarn examples, open up http://localhost:8080/reset-values/index.html and click the \"Reset\" button -- I can't figure out why the checkbox disappears. I've been trying to debug this for 2 days. \nI'm thinking about using \"defaultChecked\" in Checkbox.js but will need to wait for react v15.6.2 since there's a bug at the moment. Wow... I have no words. Thank you so much. I was going crazy.. It's been a while since I've touched this. I'm just going to merge it in to the beta branch as is and open up more PR's as need be.. I've been debating forking this repo to it's own organization so that I can easily add more owners.\n@track0x1 would you be interested in being added as an owner?. I thought I had the time to help bring this project back to life, but I haven't be able to help out nearly as much as I thought I could.\nI just gave @maccuaa, @track0x1, @twisty, and @sdemjanenko access to the npm project. (You were just the first people that came to mind).\nLastly, this project should be converted to a github org, preferably https://github.com/formsy (but that's currently taken). So maybe https://github.com/formsy-react for the time being, @rkuykendall do you want to set that up? You could then invite those 4 people I mentioned above to be owners on the github org.. ",
    "peterpme": "javascript\ncomponentWillReceiveProps: function (nextProps) {\n  if (nextProps.value !== this.getValue()) {\n    this.setValue(nextProps.value);\n  }\nFWIW, this solution works. \nOn the subject of using a default value while keeping the form pristine (not triggering validation), that's a different story.\n. I like this idea, but #121 and this are separate issues. I'd like to be able to pass through React components and consume React components several levels deep, but keep the data structure in tact.\n. :+1:\n. :+1: where I can ignore validating inputs that are not required until the user engages the input.\n. +1\n. javascript\ncomponentWillReceiveProps: function (nextProps) {\n  if (nextProps.value !== this.getValue()) {\n    this.setValue(nextProps.value);\n  }\nFWIW, this solution works. \nOn the subject of using a default value while keeping the form pristine (not triggering validation), that's a different story.\n. I like this idea, but #121 and this are separate issues. I'd like to be able to pass through React components and consume React components several levels deep, but keep the data structure in tact.\n. :+1:\n. :+1: where I can ignore validating inputs that are not required until the user engages the input.\n. +1\n. ",
    "mattatcha": "@christianalfoni Something like that could work. I also agree about the complexity and locking HTML into data definitions. Ill try it out and let you know how it goes!\n. @christianalfoni Something like that could work. I also agree about the complexity and locking HTML into data definitions. Ill try it out and let you know how it goes!\n. ",
    "drewhamlett": "Is it possible to do ajax validation with the Formsy.addValidationRule API?\n. Something like.  Thanks for your help!\n``` js\nFormsy.addValidationRule('isValidUPC', function (value) {\n$.post('/api/validate/upc.json', {\n    value: value\n  }, function (data) {\n    if (!data.isValid) {\n      return Promise.reject();\n    }\nreturn Promise.resolve(true);\n\n});\n});\n```\nAlso thanks for this library.  It's working awesome.\n. Ok cool thanks.  That would be awesome.\n. Is it possible to do ajax validation with the Formsy.addValidationRule API?\n. Something like.  Thanks for your help!\n``` js\nFormsy.addValidationRule('isValidUPC', function (value) {\n$.post('/api/validate/upc.json', {\n    value: value\n  }, function (data) {\n    if (!data.isValid) {\n      return Promise.reject();\n    }\nreturn Promise.resolve(true);\n\n});\n});\n```\nAlso thanks for this library.  It's working awesome.\n. Ok cool thanks.  That would be awesome.\n. ",
    "burtyish": "I see that the name is used to register the input to the form so maybe an optional property could be used to specify that inputs are registered using id instead of name.\n. Thanks for the quick response. I'll try it and update.\n. Works like a charm, thanks!\n. I see that the name is used to register the input to the form so maybe an optional property could be used to specify that inputs are registered using id instead of name.\n. Thanks for the quick response. I'll try it and update.\n. Works like a charm, thanks!\n. ",
    "amartracxn": "If I push some input element dynamically in to the Form (after rendering of form) then is it going to be a registered element for that form. Or the consequence is expected as \"NO\"\n. If I push some input element dynamically in to the Form (after rendering of form) then is it going to be a registered element for that form. Or the consequence is expected as \"NO\"\n. ",
    "fckt": "Any way, if you have business logic, you should consider to store this logic in a single layer. This logic could be distributed to other layers (forms for example) in different ways, but you should have that single layer which consist validation as well, as part of business logic.\n\nWith a simple form that only changes state when it is submitted I totally agree with your argument, but the increase of complexity when validating the form \"as you type\" requires this tight coupling I think\n\nIt doesn't matter what kind of event you're using to trigger validation, I guess \n. And because of that I think you need to think of convenient way how user of your library could distribute his validation logic with your implementation \n. Any way, if you have business logic, you should consider to store this logic in a single layer. This logic could be distributed to other layers (forms for example) in different ways, but you should have that single layer which consist validation as well, as part of business logic.\n\nWith a simple form that only changes state when it is submitted I totally agree with your argument, but the increase of complexity when validating the form \"as you type\" requires this tight coupling I think\n\nIt doesn't matter what kind of event you're using to trigger validation, I guess \n. And because of that I think you need to think of convenient way how user of your library could distribute his validation logic with your implementation \n. ",
    "BrettThePark": "The issue was with the built in validation method isNumeric and it erroring for an integer (which I thought would work by default). \nBrett\nP.S. I'm enjoying your library:-)\n\nOn Jan 30, 2015, at 1:56 AM, Christian Alfoni notifications@github.com wrote:\nHi Brett!\nThis is a difficult one :-)\nFormsy allows for setting any value as the value of the form element, not just strings and booleans as you typically can with traditional form elements. If forcing everything to be a string I believe it will restrict too much, at least for now.\nI suppose you created the isInteger validation rule yourself? Or are you referring to the isNumeric default validation rule?\nIf you created isInteger yourself I suggest you add a check to the validation rule, or convert it to string as that is what you want for your specific forms. If you are referring to the default isNumeric validation rule I think it should also be \"true\" when validating integers, so I can fix that.\nDid I understand you correctly on this? :-)\n\u2014\nReply to this email directly or view it on GitHub.\n. Upon further investigation this is only appearing to be an issue when a number contains a decimal. Will update.\n. This is an issue with isNumeric. Will close and make a new ticket.\n. I might propose something like this for isNumeric. It fixes this issue and https://github.com/christianalfoni/formsy-react/issues/19\n\nFormsy.addValidationRule('isNumeric', function(value) {\n  var stringVal = value + '';\n  return stringVal.match(/^\\d+\\.?\\d*$/);\n});\n. The issue was with the built in validation method isNumeric and it erroring for an integer (which I thought would work by default). \nBrett\nP.S. I'm enjoying your library:-)\n\nOn Jan 30, 2015, at 1:56 AM, Christian Alfoni notifications@github.com wrote:\nHi Brett!\nThis is a difficult one :-)\nFormsy allows for setting any value as the value of the form element, not just strings and booleans as you typically can with traditional form elements. If forcing everything to be a string I believe it will restrict too much, at least for now.\nI suppose you created the isInteger validation rule yourself? Or are you referring to the isNumeric default validation rule?\nIf you created isInteger yourself I suggest you add a check to the validation rule, or convert it to string as that is what you want for your specific forms. If you are referring to the default isNumeric validation rule I think it should also be \"true\" when validating integers, so I can fix that.\nDid I understand you correctly on this? :-)\n\u2014\nReply to this email directly or view it on GitHub.\n. Upon further investigation this is only appearing to be an issue when a number contains a decimal. Will update.\n. This is an issue with isNumeric. Will close and make a new ticket.\n. I might propose something like this for isNumeric. It fixes this issue and https://github.com/christianalfoni/formsy-react/issues/19\n\nFormsy.addValidationRule('isNumeric', function(value) {\n  var stringVal = value + '';\n  return stringVal.match(/^\\d+\\.?\\d*$/);\n});\n. ",
    "gilbarbara": "Hey\nThanks, I'll try this way.\nAnother quick question: Is there anyway to check the validity of an input without triggering the error?\nIf the value pass the validation with onChange I will display the OK but I'll only display the error with onBlur\n. Hey @christianalfoni,\nSorry about the delay!\nYeah, I needed something like this and I already implemented that in my fork (well, almost. I couldn't get que equalsField to work yet).\nBut I had to change setValue to skipValidation too. I didn't want to set states in my child components.\nhttps://github.com/gilbarbara/formsy-react/commits/master\n[s]\n. Awesome! :+1: \n. I forgot to mention that it keeps working after the error, it just fail once.\n. Awesome, I dig the flexible validations with regex.\nBut I think React 0.14 will take some time to hit the stove and I keep getting the mutation warnings in my forms. Maybe you could make a pre-1.0 using the parent-child context?\nreact-router is already using it with a ContextWrapper solution for the owner/parent warnings.\ncheers\n. @Semigradsky \nMaybe it's time to change formsy versioning to follow React's 15.x? :)\n. I think this repo is dead. \ud83d\ude22 \n. Hey\nThanks, I'll try this way.\nAnother quick question: Is there anyway to check the validity of an input without triggering the error?\nIf the value pass the validation with onChange I will display the OK but I'll only display the error with onBlur\n. Hey @christianalfoni,\nSorry about the delay!\nYeah, I needed something like this and I already implemented that in my fork (well, almost. I couldn't get que equalsField to work yet).\nBut I had to change setValue to skipValidation too. I didn't want to set states in my child components.\nhttps://github.com/gilbarbara/formsy-react/commits/master\n[s]\n. Awesome! :+1: \n. I forgot to mention that it keeps working after the error, it just fail once.\n. Awesome, I dig the flexible validations with regex.\nBut I think React 0.14 will take some time to hit the stove and I keep getting the mutation warnings in my forms. Maybe you could make a pre-1.0 using the parent-child context?\nreact-router is already using it with a ContextWrapper solution for the owner/parent warnings.\ncheers\n. @Semigradsky \nMaybe it's time to change formsy versioning to follow React's 15.x? :)\n. I think this repo is dead. \ud83d\ude22 \n. ",
    "jonaswindey": "Does the same happen when you declare your var outside the condition as an empty object?\n. Did some further investigation (especially #11), and when I set \nvalue={this.state.user._id || ''}\nit works correctly. Is there a way to avoid having to set a default value? \n. Does the same happen when you declare your var outside the condition as an empty object?\n. Did some further investigation (especially #11), and when I set \nvalue={this.state.user._id || ''}\nit works correctly. Is there a way to avoid having to set a default value? \n. ",
    "sdemjanenko": "No but a lot of the react examples have render functions which return null.  I just submitted a PR #26 for this issue.\n. I was thinking about supporting keys based on the validation rule name:\nvalidationError={ {isAlpha: \"Must be letters.\"} }\n. Cool.  I wasn't sure since I wasn't clear what email and foo were.\n. This doesn't seem to be working.  When I do validationError ={ {isLength: \"Maximum length of 64 characters\", isNodeName: \"Only letters, numbers, spaces, and common punctuation\"} }\nand I put \"5 D3 Carnage&\" in the field, I see \"Maximum length of 64 charactersOnly letters, numbers, spaces, and common punctuation\" rendered as an error message.  It should not render the message about maximum length.\n. I think this is due to the the setTimeout call in componentWillUpdate in Formsy.Form.  I'll try to write a test for this.\n. I just submitted a better fix #38.\n. I think this fixes #35.\n. I don't think it quite works.  I've found that onChange does not fire for the initial render.  This makes it hard to get the initial state of the form.  I will be doing this on most of my forms.\nI think storing the initial state and diff it with the current state is something Formsy could be quite excellent at.\n. That seems reasonable.\n. I think Formsy.Input would be acceptable for the time being.  Down the road I could see some post-processing of the v-dom to wire up the standard inputs.\n. Actually i think resetModel does what I want.\n. It would be nice if documentation was added for this.\n. It would be really cool if validations could be an object. e.g. validations={ {isIn: ['foo', 'bar']} }\n. This fixes #47.\n. Cool. Looking forward to it. Thanks for all the hard work!\nOn Tuesday, April 14, 2015, Christian Alfoni notifications@github.com\nwrote:\n\nJust wanted to let you know that this will be part of release 0.13\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/54#issuecomment-92976931\n.\n. Im running into the same issue.  I think its because of the render function's <form {...this.props} onSubmit={this.submit}>.  The props are not having Formsy-only props filtered out (such as onChange).\n. I have a PR for a fix #258.\n. @Semigradsky: updated.\n. @Semigradsky: test still pass on #258 so all good :smile: \n. No but a lot of the react examples have render functions which return null.  I just submitted a PR #26 for this issue.\n. I was thinking about supporting keys based on the validation rule name:\nvalidationError={ {isAlpha: \"Must be letters.\"} }\n. Cool.  I wasn't sure since I wasn't clear what email and foo were.\n. This doesn't seem to be working.  When I do validationError ={ {isLength: \"Maximum length of 64 characters\", isNodeName: \"Only letters, numbers, spaces, and common punctuation\"} }\n\nand I put \"5 D3 Carnage&\" in the field, I see \"Maximum length of 64 charactersOnly letters, numbers, spaces, and common punctuation\" rendered as an error message.  It should not render the message about maximum length.\n. I think this is due to the the setTimeout call in componentWillUpdate in Formsy.Form.  I'll try to write a test for this.\n. I just submitted a better fix #38.\n. I think this fixes #35.\n. I don't think it quite works.  I've found that onChange does not fire for the initial render.  This makes it hard to get the initial state of the form.  I will be doing this on most of my forms.\nI think storing the initial state and diff it with the current state is something Formsy could be quite excellent at.\n. That seems reasonable.\n. I think Formsy.Input would be acceptable for the time being.  Down the road I could see some post-processing of the v-dom to wire up the standard inputs.\n. Actually i think resetModel does what I want.\n. It would be nice if documentation was added for this.\n. It would be really cool if validations could be an object. e.g. validations={ {isIn: ['foo', 'bar']} }\n. This fixes #47.\n. Cool. Looking forward to it. Thanks for all the hard work!\nOn Tuesday, April 14, 2015, Christian Alfoni notifications@github.com\nwrote:\n\nJust wanted to let you know that this will be part of release 0.13\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/54#issuecomment-92976931\n.\n. Im running into the same issue.  I think its because of the render function's <form {...this.props} onSubmit={this.submit}>.  The props are not having Formsy-only props filtered out (such as onChange).\n. I have a PR for a fix #258.\n. @Semigradsky: updated.\n. @Semigradsky: test still pass on #258 so all good :smile: \n. \n",
    "vladejs": "Is this implemented yet? I set disabled={false} prop to form but it doesn't work. I ask because this issue is closed. Is this implemented yet? I set disabled={false} prop to form but it doesn't work. I ask because this issue is closed. ",
    "jhampton": "Quick question - would it be possible to allow validate.js, validator, verify.js, or another third-party validation library in place of the default validator?  That might alleviate a lot of the burden of handling validation (and you get server-side/client-side validation parity for free with the above).\n=== EDIT ===\nI just re-read your article about this project and saw your paragraph about this, sorry!  I still think having rule parity would be super-sweet, but I understand the need to separate them.  As a test, I'm going to add validation rules from validate.js dynamically and see how it goes.  Thanks!\nCheers, and thanks for the great work!\n. Quick question - would it be possible to allow validate.js, validator, verify.js, or another third-party validation library in place of the default validator?  That might alleviate a lot of the burden of handling validation (and you get server-side/client-side validation parity for free with the above).\n=== EDIT ===\nI just re-read your article about this project and saw your paragraph about this, sorry!  I still think having rule parity would be super-sweet, but I understand the need to separate them.  As a test, I'm going to add validation rules from validate.js dynamically and see how it goes.  Thanks!\nCheers, and thanks for the great work!\n. ",
    "sebas5384": "@christianalfoni, I have the same need.\nMy ScopedInput is a reusable component input that haves to work with Formsy, for example a dependent dropdown/selects widget.\n. @christianalfoni thanks for response :)\nIn my case, the  component, is a Formsy input too, that we use in all forms.\n. thanks @gneutzling !\n. @christianalfoni, I have the same need.\nMy ScopedInput is a reusable component input that haves to work with Formsy, for example a dependent dropdown/selects widget.\n. @christianalfoni thanks for response :)\nIn my case, the  component, is a Formsy input too, that we use in all forms.\n. thanks @gneutzling !\n. ",
    "eventhough": "@christianalfoni Is it possible to also add the ability to get only the changed input values when a form is submitted? If the input is still pristine, do not include the data in the submit function. This is useful for a database update where you really only need the values that have changed.\n. Awesome! Being able to iterate across all the form inputs would be really useful if we want to build a re-usable form container. There's no way right now for us to iterate across all the child inputs without knowing exactly which refs to use.\n. @christianalfoni Is it possible to also add the ability to get only the changed input values when a form is submitted? If the input is still pristine, do not include the data in the submit function. This is useful for a database update where you really only need the values that have changed.\n. Awesome! Being able to iterate across all the form inputs would be really useful if we want to build a re-usable form container. There's no way right now for us to iterate across all the child inputs without knowing exactly which refs to use.\n. ",
    "eriklharper": "+1 for clean implementations of native dom inputs.  I think it would be good to package these up into the repo and provide some good usage docs and examples for newbies to get started easier.  I'm also seeing a benefit to have a place where the community can contribute their own Formsy Inputs.  Would be really cool to see other's approaches to solving their specific form problems and a great way to share the knowledge base across the React community.\n. Seems silly, but I got this to work by adding an invisible submit button and then triggering a click on it in my submit function:\nForm:\n<Formsy.Form id=\"question1\" ref=\"question1\" onSubmit={this.onSubmit} onSuccess={this.onSuccess} onValid={this.onValid} onInvalid={this.onInvalid}>\n    <RadioButtonGroup name='user_type' options={options} class={classes} validationError=\"This is a required field.\" required />\n    <button style={{display:'none'}} ref=\"question1button\" type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nSubmit Function:\n```\nsubmit: function () {\n    if (this.state.canSubmit) {\n    // Submit the Form\n    $(this.refs.question1button.getDOMNode()).click();\n}\n\n}\n``\n. Thanks @christianalfoni for looking into that, will be interested to see the solution!  I'll look into things on my end here as well.\n. Thanks @christianalfoni that does work for me, except that I can't stop the form from performing its default action for some reason.  It submits the form and refreshes the page, which is not what I want to happen since my form is submitting data to a local store instead of a server.  I've since changed the implementation to not actually call the native form submit function, and instead I've relied on a custom action that I can call from elsewhere to trigger saving the form data usinggetCurrentValues()` which, by the way is a handy feature that isn't well documented in the Readme.  \nI found that to get around cross-browser form implementation issues, I've come to rely more on handling the submit action of my forms manually and not relying on the browser's native form behavior.\nAlso, for some reason when I wrap it in the jquery selector, it prevents the page reload on submit, and that's probably because by default jQuery prevents the default action?\n. Yeah, this is one thing about React that takes some time to sink in.  A lot of times you are re-implementing features of a native DOM element (in this case the submit action of a <form>).  This is the beauty of React and Formsy: you rely on the Formsy API to handle the submit, not the DOM api, which brings the benefit of allowing custom behavior and removes the complexities that occur with the native DOM implementations, which tend to vary across browsers as we all know.\n. Thanks that helped.  After running through those commands I did see this as a result:\n```\nnpm run examples\n\nformsy-react@0.10.1 examples /x/vendor/christianalfoni/formsy-react\nwebpack-dev-server --config examples/webpack.config.js --content-base examples\n\nhttp://localhost:8080/webpack-dev-server/\nwebpack result is served from /build/\ncontent is served from /x/vendor/christianalfoni/formsy-react/examples\nHash: c274df21ee4ed4697d54\nVersion: webpack 1.8.4\nTime: 299ms\n    Asset     Size  Chunks             Chunk Names\n login.js  78.4 kB    0, 1  [emitted]  login\nshared.js  8.59 kB       1  [emitted]  shared.js\nchunk    {0} login.js (login) 21.4 kB {1} [rendered]\n    [0] ./examples/login/app.js 2.4 kB {0} [built] [1 error]\n    [1] ./src/main.js 11 kB {0} [built] [1 error]\n    [2] ./src/validationRules.js 1.97 kB {0} [built]\n    [3] ./src/utils.js 2.21 kB {0} [built]\n    [4] ./src/Mixin.js 3.77 kB {0} [built]\nchunk    {1} shared.js (shared.js) 0 bytes [rendered]\nERROR in ./examples/login/app.js\nModule not found: Error: Cannot resolve module 'react' in /x/vendor/christianalfoni/formsy-react/examples/login\n @ ./examples/login/app.js 1:12-28\nERROR in ./src/main.js\nModule not found: Error: Cannot resolve module 'react' in /x/vendor/christianalfoni/formsy-react/src\n @ ./src/main.js 1:28-44\nwebpack: bundle is now VALID.\n```\nI resolved it by simply doing npm install react.  Might be a good idea to update the examples Readme to include the step of installing react.  It worked for me after that.  Thanks!\n. Yeah, that's definitely why.\n. Thanks for the tips @christianalfoni !  I got this working now with the number input.  I'm using event.target.value now, which is pulling in the proper typed value.  Also, to clear up confusion, I've renamed this.state.required to be this.state.displayRequired instead.  \nThe meaning behind that state object is that my parent form component is wired up to control when the required css class is present on the text input or not based on its validation status.  I have a requirement to show required fields when the submit button is clicked, so I created a displayRequired prop that holds a boolean to do just that.  I take the displayRequired prop, store it in this.state.displayRequired in the text input component so that I can toggle it off from within once the user starts typing a value.  It works pretty well!\nThanks again for your help!  Looking very forward to 1.0!   Let me know if there is anything you need help with, would love to contribute!\n. fwiw, I think this project is quite valuable, as its been versatile in many types of form scenarios that I've used it in.  Thanks @Semigradsky for picking up the baton on it.  I will continue to support the project any way I can :)\n. @aight8 not everybody is using or needs redux.  I think its good to support libraries like Formsy that apply a minimal approach to form management without extra dependencies.  While Formsy isn't the best for your use case, it doesn't diminish its value for others.\n. +1 for clean implementations of native dom inputs.  I think it would be good to package these up into the repo and provide some good usage docs and examples for newbies to get started easier.  I'm also seeing a benefit to have a place where the community can contribute their own Formsy Inputs.  Would be really cool to see other's approaches to solving their specific form problems and a great way to share the knowledge base across the React community.\n. Seems silly, but I got this to work by adding an invisible submit button and then triggering a click on it in my submit function:\nForm:\n<Formsy.Form id=\"question1\" ref=\"question1\" onSubmit={this.onSubmit} onSuccess={this.onSuccess} onValid={this.onValid} onInvalid={this.onInvalid}>\n    <RadioButtonGroup name='user_type' options={options} class={classes} validationError=\"This is a required field.\" required />\n    <button style={{display:'none'}} ref=\"question1button\" type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n</Formsy.Form>\nSubmit Function:\n```\nsubmit: function () {\n    if (this.state.canSubmit) {\n    // Submit the Form\n    $(this.refs.question1button.getDOMNode()).click();\n}\n\n}\n``\n. Thanks @christianalfoni for looking into that, will be interested to see the solution!  I'll look into things on my end here as well.\n. Thanks @christianalfoni that does work for me, except that I can't stop the form from performing its default action for some reason.  It submits the form and refreshes the page, which is not what I want to happen since my form is submitting data to a local store instead of a server.  I've since changed the implementation to not actually call the native form submit function, and instead I've relied on a custom action that I can call from elsewhere to trigger saving the form data usinggetCurrentValues()` which, by the way is a handy feature that isn't well documented in the Readme.  \nI found that to get around cross-browser form implementation issues, I've come to rely more on handling the submit action of my forms manually and not relying on the browser's native form behavior.\nAlso, for some reason when I wrap it in the jquery selector, it prevents the page reload on submit, and that's probably because by default jQuery prevents the default action?\n. Yeah, this is one thing about React that takes some time to sink in.  A lot of times you are re-implementing features of a native DOM element (in this case the submit action of a <form>).  This is the beauty of React and Formsy: you rely on the Formsy API to handle the submit, not the DOM api, which brings the benefit of allowing custom behavior and removes the complexities that occur with the native DOM implementations, which tend to vary across browsers as we all know.\n. Thanks that helped.  After running through those commands I did see this as a result:\n```\nnpm run examples\n\nformsy-react@0.10.1 examples /x/vendor/christianalfoni/formsy-react\nwebpack-dev-server --config examples/webpack.config.js --content-base examples\n\nhttp://localhost:8080/webpack-dev-server/\nwebpack result is served from /build/\ncontent is served from /x/vendor/christianalfoni/formsy-react/examples\nHash: c274df21ee4ed4697d54\nVersion: webpack 1.8.4\nTime: 299ms\n    Asset     Size  Chunks             Chunk Names\n login.js  78.4 kB    0, 1  [emitted]  login\nshared.js  8.59 kB       1  [emitted]  shared.js\nchunk    {0} login.js (login) 21.4 kB {1} [rendered]\n    [0] ./examples/login/app.js 2.4 kB {0} [built] [1 error]\n    [1] ./src/main.js 11 kB {0} [built] [1 error]\n    [2] ./src/validationRules.js 1.97 kB {0} [built]\n    [3] ./src/utils.js 2.21 kB {0} [built]\n    [4] ./src/Mixin.js 3.77 kB {0} [built]\nchunk    {1} shared.js (shared.js) 0 bytes [rendered]\nERROR in ./examples/login/app.js\nModule not found: Error: Cannot resolve module 'react' in /x/vendor/christianalfoni/formsy-react/examples/login\n @ ./examples/login/app.js 1:12-28\nERROR in ./src/main.js\nModule not found: Error: Cannot resolve module 'react' in /x/vendor/christianalfoni/formsy-react/src\n @ ./src/main.js 1:28-44\nwebpack: bundle is now VALID.\n```\nI resolved it by simply doing npm install react.  Might be a good idea to update the examples Readme to include the step of installing react.  It worked for me after that.  Thanks!\n. Yeah, that's definitely why.\n. Thanks for the tips @christianalfoni !  I got this working now with the number input.  I'm using event.target.value now, which is pulling in the proper typed value.  Also, to clear up confusion, I've renamed this.state.required to be this.state.displayRequired instead.  \nThe meaning behind that state object is that my parent form component is wired up to control when the required css class is present on the text input or not based on its validation status.  I have a requirement to show required fields when the submit button is clicked, so I created a displayRequired prop that holds a boolean to do just that.  I take the displayRequired prop, store it in this.state.displayRequired in the text input component so that I can toggle it off from within once the user starts typing a value.  It works pretty well!\nThanks again for your help!  Looking very forward to 1.0!   Let me know if there is anything you need help with, would love to contribute!\n. fwiw, I think this project is quite valuable, as its been versatile in many types of form scenarios that I've used it in.  Thanks @Semigradsky for picking up the baton on it.  I will continue to support the project any way I can :)\n. @aight8 not everybody is using or needs redux.  I think its good to support libraries like Formsy that apply a minimal approach to form management without extra dependencies.  While Formsy isn't the best for your use case, it doesn't diminish its value for others.\n. ",
    "alexduan": "+1 - would definitely love to incorporate this with something like react-bootstrap\n. +1 - would definitely love to incorporate this with something like react-bootstrap\n. ",
    "afitiskin": "What if instead of Formsy.Input implement something like Formsy.InputContainer, that will wrap any kind of input fields (native <input> or <textarea> or something like react-select or react-slider)? So we will be able use any kind of input without some workaround:\n<Formsy.Form>\n    <Formsy.InputContainer>\n        <input type=\"email\" ... />\n    </Formsy.InputContainer>\n    <Formsy.InputContainer>\n        <ReactSelect ... />\n    </Formsy.InputContainer>\n</Formsy.Form>\nIt will be like a connector between the real input field and our form element, which will do all dirty job.\n. What if instead of Formsy.Input implement something like Formsy.InputContainer, that will wrap any kind of input fields (native <input> or <textarea> or something like react-select or react-slider)? So we will be able use any kind of input without some workaround:\n<Formsy.Form>\n    <Formsy.InputContainer>\n        <input type=\"email\" ... />\n    </Formsy.InputContainer>\n    <Formsy.InputContainer>\n        <ReactSelect ... />\n    </Formsy.InputContainer>\n</Formsy.Form>\nIt will be like a connector between the real input field and our form element, which will do all dirty job.\n. ",
    "tnrich": "Hey @christianalfoni, can you or someone else give an example of this. I saw : https://github.com/christianalfoni/formsy-react/blob/master/examples/dynamic-form-fields/app.js\nbut it seemed a little complicated and I was wondering if there was perhaps a better way of doing it. Thanks!\n. @dsteinbach I'm looking for an answer to this one as well. Do you know if it got resolved? I couldn't find the other issues that you mentioned.\nThanks!\n. I think this should solve my problem: \nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\n:)\n. That doesn't seem to do it unfortunately. You can see that in the demos\nOn Thu, Dec 3, 2015, 12:43 AM Dmitry Semigradsky notifications@github.com\nwrote:\n\nHow about just add required atribute?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/276#issuecomment-161553437\n.\n. Or 'isExisty' should fire that error ?\n\nOn Sat, Dec 12, 2015, 9:41 AM inchr notifications@github.com wrote:\n\nI confirm that the required attribute don't show any error...(but the form\nis not submitted if you're using onValidSubmit)\nShould be added a simple isBlank validation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/276#issuecomment-164170919\n.\n. I think I found my solution from this question: https://github.com/christianalfoni/formsy-react/issues/45\n\n``` js\ntestSubmit() {\n  this.refs.form.submit(); // Point directly to the form component\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n```\nI think I can just trigger a manual submit that way. I'm not quite sure why the model wouldn't be provided in the onValid, onInvalid methods as well though? It would definitely make the above use case a lot cleaner.\nThanks!\n. I'd also like to know if there is a solution here! If @christianalfoni or anyone else has suggestions for improving rendering speeds, I'd love to hear it. @AugustinLF , have you had any success with this?\n. I am also seeing this error. Either this should get fixed, or the \"inline\" custom validator examples should be removed\n. Hey @christianalfoni, can you or someone else give an example of this. I saw : https://github.com/christianalfoni/formsy-react/blob/master/examples/dynamic-form-fields/app.js\nbut it seemed a little complicated and I was wondering if there was perhaps a better way of doing it. Thanks!\n. @dsteinbach I'm looking for an answer to this one as well. Do you know if it got resolved? I couldn't find the other issues that you mentioned.\nThanks!\n. I think this should solve my problem: \nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\n:)\n. That doesn't seem to do it unfortunately. You can see that in the demos\nOn Thu, Dec 3, 2015, 12:43 AM Dmitry Semigradsky notifications@github.com\nwrote:\n\nHow about just add required atribute?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/276#issuecomment-161553437\n.\n. Or 'isExisty' should fire that error ?\n\nOn Sat, Dec 12, 2015, 9:41 AM inchr notifications@github.com wrote:\n\nI confirm that the required attribute don't show any error...(but the form\nis not submitted if you're using onValidSubmit)\nShould be added a simple isBlank validation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/276#issuecomment-164170919\n.\n. I think I found my solution from this question: https://github.com/christianalfoni/formsy-react/issues/45\n\n``` js\ntestSubmit() {\n  this.refs.form.submit(); // Point directly to the form component\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n```\nI think I can just trigger a manual submit that way. I'm not quite sure why the model wouldn't be provided in the onValid, onInvalid methods as well though? It would definitely make the above use case a lot cleaner.\nThanks!\n. I'd also like to know if there is a solution here! If @christianalfoni or anyone else has suggestions for improving rendering speeds, I'd love to hear it. @AugustinLF , have you had any success with this?\n. I am also seeing this error. Either this should get fixed, or the \"inline\" custom validator examples should be removed\n. ",
    "mull": "Am I the only one having trouble intercepting the submit event for a form created with Formsy.Form? I cannot get either onsubmit or onSubmit callbacks to be called at all.\n. That's the thing, it doesn't seem to! Perhaps it does on master, I did only try with the latest version through npm. The code below is basically my setup. Calling the testSubmit method would submit the form and reload the page. Trying to add an event listener to the  node in the DOM and using preventDefault wouldn't work either.\n``` jsx\ntestSubmit() {\n  this.refs.form.getDOMNode().submit();\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n``\n. Well crap! That looks easy enough... dang. :) I'll get back to you within 24hrs on that!\n. I kind of confused myself here. We're actually wrapping Formsy.Form with our own component, which of course didn't have the submit() function. Gotta remember that next time. :grin:\n. Oh yeah it works for sure. :) thanks!\n. There's not really any reason to not go straight to ES7 though is there?\n. Am I the only one having trouble intercepting the submit event for a form created with Formsy.Form? I cannot get eitheronsubmitoronSubmitcallbacks to be called at all.\n. That's the thing, it doesn't seem to! Perhaps it does on master, I did only try with the latest version through npm. The code below is basically my setup. Calling thetestSubmitmethod would submit the form and reload the page. Trying to add an event listener to the <form> node in the DOM and usingpreventDefault` wouldn't work either.\n``` jsx\ntestSubmit() {\n  this.refs.form.getDOMNode().submit();\n},\nrender() {\n  return (\n    \n      {/ some inputs /}\n    </Formsy.Form\n  );\n}\n```\n. Well crap! That looks easy enough... dang. :) I'll get back to you within 24hrs on that!\n. I kind of confused myself here. We're actually wrapping Formsy.Form with our own component, which of course didn't have the submit() function. Gotta remember that next time. :grin:\n. Oh yeah it works for sure. :) thanks!\n. There's not really any reason to not go straight to ES7 though is there?\n. ",
    "arshdkhn1": "@christianalfoni calling submit via ref will make a native event. Programatically clicking submit button will make a synthetic event - http://codepen.io/arshdkhn1/pen/WpQwxX?editors=0110 . @christianalfoni calling submit via ref will make a native event. Programatically clicking submit button will make a synthetic event - http://codepen.io/arshdkhn1/pen/WpQwxX?editors=0110 . ",
    "kristian-puccio": "is this also working for getValue() ?\nFor radioboxes with a value of {true} I get a string 'true'.\n. Sorry ignore it, browsers render boolean radio values as strings.\n. One thing I've noticed is that if you submit the form by pressing enter the native validation is triggered.\nI think we need to be able to pass 'noValidate' to the form element. That way we can catch both the button click or hitting enter.\nEven just allowing the prop to be passed down to the form would do the trick.\n. Nice! that would be very handy.\nThe other thing that might also work is keypaths so the input name describes the data structure.\n<input name=\"address.street\"/>\nBoth approaches would be very handy in different situations.\n. There are a few node modules that do this already. Maybe they might be\nuseful?\nhttps://www.npmjs.com/package/key-path\nOn 22 May 2015 at 21:49, ivome notifications@github.com wrote:\n\nHere is a mapping function I wrote to support object and array values. It\nhas a dependency on lodash atm.\nNot tested much yet, but could be used as an idea:\n```\n/*     * Maps the input values into a complex object     * Notation for value names:     *     * myobject[property]     * myobject[test][] -> array value     * myobject[nestedobject][otherproperty]     *     * @param {Array} inputs     * @return {Object}     /\nmapInputsToValue: function(inputs){\n    var values = {};\n    _.each(inputs, function(value, key){\n        var currentIndex = 0;\n        var objectPath = [];\n        // Iterate through the whole part of the obejct\n        var foundPosition = key.indexOf(']', currentIndex);\n    // We have simple value\n    if (foundPosition === -1){\n        values[key] = value;\n    } else {\n        // Add complex object\n        var openingBracket = key.indexOf('[');\n        if (openingBracket <= 0){\n            throw new Error('Invalid name for input field: ' + key);\n        } else {\n            objectPath.push(key.substring(0, openingBracket));\n        }\n\n        // We have object property\n        while (foundPosition !== -1){\n            // Get current attribute name\n            var attributeName = _.last(key.substring(0, foundPosition).split('['));\n            objectPath.push(attributeName);\n\n            foundPosition = key.indexOf(']', foundPosition + 1);\n        }\n\n        // Get object property\n        var obj = values;\n        for (var i = 0; i < objectPath.length - 1; i++) {\n            var n = objectPath[i];\n            if (n in obj) {\n                obj = obj[n];\n            } else {\n                obj[n] = {};\n                obj = obj[n];\n            }\n        }\n        obj[objectPath[objectPath.length - 1]] = value;\n    }\n});\nreturn values;\n\n}\n```\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/120#issuecomment-104641730\n.\n. I've been thinking about this and one way of implementing this is to have the input have a getDomValue function that is called either on change or on blur (if you wish to delay validation showing until they tab off).\n\nThen when the form submit hapens it runs though all the inputs calling the getDomValue function before the onSubmit functions are called.\n. I think the best approach is to get the DOM values on submit. It mimics the behaviour of a statically posted form.\nOne of the reasons is that not all browsers support the auto fill events and the ones that do seem to use different events.\nI have actually implemented this in a flux based form that I've created. I used signal.js to register a function on each of the input that is run on submit. I'm suspecting as each input is registered with a parent form object here that that approach isn't necessary.\n. is this also working for getValue() ?\nFor radioboxes with a value of {true} I get a string 'true'.\n. Sorry ignore it, browsers render boolean radio values as strings.\n. One thing I've noticed is that if you submit the form by pressing enter the native validation is triggered.\nI think we need to be able to pass 'noValidate' to the form element. That way we can catch both the button click or hitting enter.\nEven just allowing the prop to be passed down to the form would do the trick.\n. Nice! that would be very handy.\nThe other thing that might also work is keypaths so the input name describes the data structure.\n<input name=\"address.street\"/>\nBoth approaches would be very handy in different situations.\n. There are a few node modules that do this already. Maybe they might be\nuseful?\nhttps://www.npmjs.com/package/key-path\nOn 22 May 2015 at 21:49, ivome notifications@github.com wrote:\n\nHere is a mapping function I wrote to support object and array values. It\nhas a dependency on lodash atm.\nNot tested much yet, but could be used as an idea:\n```\n/*     * Maps the input values into a complex object     * Notation for value names:     *     * myobject[property]     * myobject[test][] -> array value     * myobject[nestedobject][otherproperty]     *     * @param {Array} inputs     * @return {Object}     /\nmapInputsToValue: function(inputs){\n    var values = {};\n    _.each(inputs, function(value, key){\n        var currentIndex = 0;\n        var objectPath = [];\n        // Iterate through the whole part of the obejct\n        var foundPosition = key.indexOf(']', currentIndex);\n    // We have simple value\n    if (foundPosition === -1){\n        values[key] = value;\n    } else {\n        // Add complex object\n        var openingBracket = key.indexOf('[');\n        if (openingBracket <= 0){\n            throw new Error('Invalid name for input field: ' + key);\n        } else {\n            objectPath.push(key.substring(0, openingBracket));\n        }\n\n        // We have object property\n        while (foundPosition !== -1){\n            // Get current attribute name\n            var attributeName = _.last(key.substring(0, foundPosition).split('['));\n            objectPath.push(attributeName);\n\n            foundPosition = key.indexOf(']', foundPosition + 1);\n        }\n\n        // Get object property\n        var obj = values;\n        for (var i = 0; i < objectPath.length - 1; i++) {\n            var n = objectPath[i];\n            if (n in obj) {\n                obj = obj[n];\n            } else {\n                obj[n] = {};\n                obj = obj[n];\n            }\n        }\n        obj[objectPath[objectPath.length - 1]] = value;\n    }\n});\nreturn values;\n\n}\n```\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/120#issuecomment-104641730\n.\n. I've been thinking about this and one way of implementing this is to have the input have a getDomValue function that is called either on change or on blur (if you wish to delay validation showing until they tab off).\n\nThen when the form submit hapens it runs though all the inputs calling the getDomValue function before the onSubmit functions are called.\n. I think the best approach is to get the DOM values on submit. It mimics the behaviour of a statically posted form.\nOne of the reasons is that not all browsers support the auto fill events and the ones that do seem to use different events.\nI have actually implemented this in a flux based form that I've created. I used signal.js to register a function on each of the input that is run on submit. I'm suspecting as each input is registered with a parent form object here that that approach isn't necessary.\n. ",
    "rojobuffalo": "@christianalfoni \nSeems like there is an issue with this feature, first noted in #195.\nAlso noticed in #197.\nPossibly related to this update in the travis-ci project.\n. Is Array support not included? My use case is:\n{\n  foo: ['','']\n}\n...\nname='foo[0]'\nname='foo[1]'\nThis PR allows:\n{\n  foo: {\n    0: '',\n    1: ''\n  }\n}\n...\nname='foo.0'\nname='foo.1'\n. @garbin @christianalfoni \nThe inputs parameter for the handler props.mapping is not getting mapped for nested objects like this.model.\n```\n// inputs\n{\n  'foo.0': '',\n  'foo.1': ''\n}\n// this.model\n{\n  foo: {\n    0: '',\n    1: ''\n  }\n}\nIs this intentional or a bug?\n```\n. Built-in validation is probably the most important selling point of using this form component. For the average user, writing a custom rule doesn't seem like an attractive option for something as common as an alphanumeric check (e.x. mailing address).\nI think this should be patched. But should it be patched with an isAlphanumeric rule or some functionality for combining validation rules that works like an \"or\" statement?\n. Awesome, thanks!\n. @Semigradsky nice!\nI have an unrelated PR which failed the travis-ci build for reasons I don't understand. Did you have any issues getting this to pass?\n. @christianalfoni \nSeems like there is an issue with this feature, first noted in #195.\nAlso noticed in #197.\nPossibly related to this update in the travis-ci project.\n. Is Array support not included? My use case is:\n{\n  foo: ['','']\n}\n...\nname='foo[0]'\nname='foo[1]'\nThis PR allows:\n{\n  foo: {\n    0: '',\n    1: ''\n  }\n}\n...\nname='foo.0'\nname='foo.1'\n. @garbin @christianalfoni \nThe inputs parameter for the handler props.mapping is not getting mapped for nested objects like this.model.\n```\n// inputs\n{\n  'foo.0': '',\n  'foo.1': ''\n}\n// this.model\n{\n  foo: {\n    0: '',\n    1: ''\n  }\n}\nIs this intentional or a bug?\n```\n. Built-in validation is probably the most important selling point of using this form component. For the average user, writing a custom rule doesn't seem like an attractive option for something as common as an alphanumeric check (e.x. mailing address).\nI think this should be patched. But should it be patched with an isAlphanumeric rule or some functionality for combining validation rules that works like an \"or\" statement?\n. Awesome, thanks!\n. @Semigradsky nice!\nI have an unrelated PR which failed the travis-ci build for reasons I don't understand. Did you have any issues getting this to pass?\n. ",
    "frost555": "No, it does't happen. I invalidate input in handle submit function and check for error message in my input component with 'this.showError()'. I also do call this.setValue(val) when value changes. Can anyone confirm the issue?\n. Though i think it is not very useful. Finding hard to find a good use case. Therefore closed.\n. ASP.NET Web API server by default (using ModelStateDictionary.AddModelError) returns errors in the following format:\n{\"modelState\":{\"email\":[\"Email is already in use\"]}}\nThere is an array associated with property name. Would it be possible to support such responses? At  least with array size equal to  one.\n. I can see it was removed from the source code. Just didn't notice the change. Need to update readme.\n. Sorry, it was old cache issue on my side. Please close.\n. You can pass desired type as prop.\nThen you just set it in your input component. I do it this way with password. I think email type also won't be an issue.\n<input  type={this.props.type ? this.props.type : 'text'} />\n. No, it does't happen. I invalidate input in handle submit function and check for error message in my input component with 'this.showError()'. I also do call this.setValue(val) when value changes. Can anyone confirm the issue?\n. Though i think it is not very useful. Finding hard to find a good use case. Therefore closed.\n. ASP.NET Web API server by default (using ModelStateDictionary.AddModelError) returns errors in the following format:\n{\"modelState\":{\"email\":[\"Email is already in use\"]}}\nThere is an array associated with property name. Would it be possible to support such responses? At  least with array size equal to  one.\n. I can see it was removed from the source code. Just didn't notice the change. Need to update readme.\n. Sorry, it was old cache issue on my side. Please close.\n. You can pass desired type as prop.\nThen you just set it in your input component. I do it this way with password. I think email type also won't be an issue.\n<input  type={this.props.type ? this.props.type : 'text'} />\n. ",
    "mistakster": "Hey! Hope you are well now. Thanks a lot.\n. Sure. I updated my project today and your module works without issues. Thanks.\n. Hey! Hope you are well now. Thanks a lot.\n. Sure. I updated my project today and your module works without issues. Thanks.\n. ",
    "philippotto": "Even better: I opened a PR :)\n. Hi @christianalfoni,\nI'm afraid, we are talking about different subjects. As far as I understand, your suggested isValidValue enables to check whether a certain value would be valid.\nSo, executing aComponent.isValidValue('aValue') is possible and basically evaluates aValue against the validation rules set for aComponent. Correct?\nHowever, my PR enables executing aComponent.checkValidity() (or some better name :)), which simply asks the component to validate its current state (no parameter is passed) against own validation rules.\nAs described in #60 this is very useful for input-components which are complex and whose rules are only used within these components. So, it wouldn't make sense to add a \"global\" validation rule if it is only used by one component. Additionally, it makes it more complicated to access state and methods of the component.\nYou can also take a look at the spec added in this PR, in case my explanation was not good enough :)\n. Perfect, thank you! And validate is definitely a better choice. The problem about naming things.. ;)\n. Even better: I opened a PR :)\n. Hi @christianalfoni,\nI'm afraid, we are talking about different subjects. As far as I understand, your suggested isValidValue enables to check whether a certain value would be valid.\nSo, executing aComponent.isValidValue('aValue') is possible and basically evaluates aValue against the validation rules set for aComponent. Correct?\nHowever, my PR enables executing aComponent.checkValidity() (or some better name :)), which simply asks the component to validate its current state (no parameter is passed) against own validation rules.\nAs described in #60 this is very useful for input-components which are complex and whose rules are only used within these components. So, it wouldn't make sense to add a \"global\" validation rule if it is only used by one component. Additionally, it makes it more complicated to access state and methods of the component.\nYou can also take a look at the spec added in this PR, in case my explanation was not good enough :)\n. Perfect, thank you! And validate is definitely a better choice. The problem about naming things.. ;)\n. ",
    "darth10": "This is from the registerInputs function, which mutates props of all child form input controls. Hmm... \n. This is from the registerInputs function, which mutates props of all child form input controls. Hmm... \n. ",
    "gaearon": "You can try using context for \u201chidden\u201d props, like React Router and a few other libraries. It's going to be parent-based in React 0.14, so with <Parent> ... <Child /> ... </Parent> Child will receive Paren't context (this is your use case isn't?). Before React 0.14, context is owner-based, so this doesn't quite work nicely.\nOverall context is an undocumented feature and it's better not to rely on it too much, but forms seem like a valid use case, and we know it's not going away anywhere.\n. Btw I remember reading that parent context can already be accessed in React 0.13 via this._reactInternalInstance._context. In React 0.14, this.context will switch to it.\n. You can try using context for \u201chidden\u201d props, like React Router and a few other libraries. It's going to be parent-based in React 0.14, so with <Parent> ... <Child /> ... </Parent> Child will receive Paren't context (this is your use case isn't?). Before React 0.14, context is owner-based, so this doesn't quite work nicely.\nOverall context is an undocumented feature and it's better not to rely on it too much, but forms seem like a valid use case, and we know it's not going away anywhere.\n. Btw I remember reading that parent context can already be accessed in React 0.13 via this._reactInternalInstance._context. In React 0.14, this.context will switch to it.\n. ",
    "jmartin84": "Does the new cloneElement in 0.13 function solve the use case of dynamic props?\nhttps://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html\n. Does the new cloneElement in 0.13 function solve the use case of dynamic props?\nhttps://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html\n. ",
    "Semigradsky": "\nThat is the bundled release.\n\nHow to use it? Why do it?\n. Oh, I see, thank you!\n. I think bower.json is not needed in npm package\n\n. Now this issue is not actual =)\n. Try this mapInputs function:\ncoffee\nmapInputs: (inputs) ->\n  member:\n    email: inputs.email\n    first_name: inputs.first_name\n    last_name: inputs.last_name\n. :+1: \n. Try clear npm cache and before installing dependencies:\nrm -rf node_modules\nnpm cache clean\nnpm install\nnpm run examples\nIf it is not helped try update your node.js and npm.\n. Hmm, strange, maybe this is determined by the fact that react is peerDependency. I could not repeat.\n. I think it will not be superfluous :)\n. @christianalfoni how about just passing all props?\nThis\njs\n    return (\n        <form {...this.props} onSubmit={this.submit}>\n            {this.traverseChildrenAndRegisterInputs(this.props.children)}\n        </form>\n    );\ninstead\njs\n    return React.DOM.form({\n        onSubmit: this.submit,\n        className: this.props.className,\n        autoComplete: this.props.autoComplete\n      },\n      this.traverseChildrenAndRegisterInputs(this.props.children)\n    );\n. :laughing: \n. It would be great! =)\n. Maybe you can give more information? Have you checked that after the removal of the matchRegexp rule all worked fine?\nCan you give your regexp?\n. Which version are you using?\nminLength validation will be added in 0.11.0 version. And it is still present.\n. Yeah, that looks as a bug.\njs\n// Another validation brings another error (wrong api document?)\nvalidations=\"isLength:10:10\"\n//=> Error: Formsy does not support multiple args on string validations. Use object format of validations instead.\nYes, it is not updated api. Now you should use minLength and maxLength validators.\nI corrected it.\n. Some questions:\nFormsy has hasValue validation. But that is not documented in API\n- should pass with empty string?\n- should pass with zero?\n. Good, I added isExisty and updated api\n. @christianalfoni I'm not well understood.\nDo you want me to add new tag (0.13.2) to repo?\nOr move changes (f168b53, 7ef6c51) to pull request?\n. Should fix #113 \n. > ``` js\n\n//valid\n'sup', ''\n```\n\nThat is confused me. Length of empty string is not 3 ;)\n@sanemat  How about extending the syntax?\njs\n<TestInput\n  name=\"foo\" \n  validations=\"isLength:0:3\" />\nand\njs\n<TestInput\n  name=\"foo\" \n  validations={{\n    isLength: [0, 3]\n  }} />\nThis should not be difficult to implement)\n. Looks good. Can you add tests for these cases?\nhttps://github.com/christianalfoni/formsy-react/blob/master/specs/Utils-spec.jsx\n. Nice! Thanks :+1: \n. @dsteinbach you can not nesting forms:\nhttp://www.w3.org/TR/2011/WD-html5-20110525/forms.html#the-form-element\n\nContent model:\nFlow content, but with no form element descendants.\n. You want check valid email or not?\nYou can use isValidValue method for this.\n. Thanks!\n. Yeah dependency was be removed. I have changed it to babel-loader. https://github.com/christianalfoni/formsy-react/commit/cca4973382a6c85be4f4e1f844c656d67bc8ffa8 Now all should be fine.\n. This is not exist in this version. @christianalfoni can you bump version? Or add me as collaborator to npm and I will do it.\n. It seems the best solution is to create your own rule for this.\n. @Nicolab You want something like this?\n\n``` js\nvar rules = Formsy.validators();\nFormsy.addValidationRule('minLengthOrEmpty', function (values, value) {\n  return rules.isEmptyString(values, value) || rules.minLength(values, value);\n});\n```\n. > If a field is not required and empty, needless to validate given that the field is optional (so, is a valid value).\nNow I understand, that is really problem.\n. @jswxwxf I tried to get your result, but I did not succeed.\nI changed a little login example. I removed required rule from password field. And submit button is shown when filling correct value to email field.\nCould you give more details?\n. You can pre-verify value or trigger validation (this.setValue(this.getValue());) in your onBlur handler.\n. > Take for example the maxLength validation. I can't use that when the field is optional.\nThat was fixed in #138 \nBut the new version is not yet published\n. I think it makes sense\n. Thank you for your trust! I will try to develop formsy :smile: \n. How about run stopPropagation submit event in your field?\n. You can use your favorite library for this. Superagent for example:\njs\nvar request = require('superagent');\n...\nvar Login = React.createClass({\n  ...\n  submit: function (data) {\n    request.post('/app/login', data).end(function (err, res) {\n      // do smth\n    });\n  },\n  ...\n  render: function () {\n    return (\n      <Formsy.Form onValidSubmit={this.submit}>\n        ...\n. I'm sorry, I can't quite understand why not make http post requests from the script.\n. Thanks for the issue. We will check the performance.\n. Are you tried use pure-render-mixin in your inputs?\n. Could you provide some of your code? So we might better understand where the bottleneck :snail: \n. Now it is not the priority, maybe after a new release\n. Thank!\n. Yeah, higher-order-component and decorator should be implemented.\nExample of realizing: https://github.com/Yomguithereal/baobab-react/tree/master/src\n. It is necessary to check, perhaps you can just use https://github.com/brigand/react-mixin?\n. @twisty thanks for response!\nFixed in 89759fefdedcd013fca45b248f4d12232123f3bb\n. Yeah, I think getErrorMessages should return [] instead of null\n:+1: 357f4adf715a58b17faa3b6094aef6b8f7de4391\n. Hi, this is fixed in new version #158\n. Nice! Thanks for assistance!\n. Already, you can use this:\njs\n<Formsy.Form id=\"some-id\"></Formsy.Form>\n. A good idea! I'll do it when I have enough time.\n. This issue resolved in #138 \n. @rodryquintero Hi! Use getModel() for taking values from attached inputs.\n. It should already be fixed in the new version. Try react-0.14 branch\nRelease is coming )\n. See https://github.com/christianalfoni/formsy-react/issues/158\nDependencies will be changed after releasing new version.\n. @emeeks The issue resolved?\n. Hello!\nI have merged your commit to working branch.\nThanks for activity!\n. @EthanML @CharlieGreenman  Hi! Use getModel() for taking values from attached inputs.\n. The new version has not yet been released\n. You can check more than one validation rule:\njs\n<MyInputComponent name=\"number\" validations=\"isNumeric,isLength:5\"/>\n<MyInputComponent name=\"number\" validations={{\n  isNumeric: true,\n  isLength: 5\n}}/>\nHowever, the value must comply with all these rules.\nYou'd better add your rule: addValidationRule\n. Add new isAlphanumeric rule to built-in validations will be easier =)\n. Hi!\nSee reset-values example (https://github.com/christianalfoni/formsy-react/tree/react-0.14/examples)\n. Hello!\nInitially, it was so intended. But it seems it is confusing.\nI have merged your commit to working branch.\nThanks for activity!\n. I think that is the onChange event from the input. Just add stopPropaganation:\njs\n  changeValue: function (event) {\n    event.stopPropagation();\n    this.setValue(event.currentTarget.value);\n  },\n. I a little changed login example:\nIn Input.js:\njs\n  changeValue(event) {\n    console.log('Change!');\n    this.setValue(event.currentTarget[this.props.type === 'checkbox' ? 'checked' : 'value']);\n  },\nIn app.js:\njs\n  onChange() {\n    console.log('Changed!');\n    console.log(arguments);\n  },\n  render() {\n    return (\n      <Form onChange={this.onChange} ...\nI see in console:\n\nWhen I changed changeValue to:\njs\n  changeValue(event) {\n    event.stopPropagation();\n    console.log('Change!');\n    this.setValue(event.currentTarget[this.props.type === 'checkbox' ? 'checked' : 'value']);\n  },\nI see:\n\n. If this does not help, can you show your code?\n. How about CodePen? :-)\nhttp://codepen.io/semigradsky/pen/dYYpwv/?editors=001\n. Nice! :+1: \n. Why not just:\njs\n<MyOwnInput name=\"example\" value=\"hello\" />\n?\n. See #135\nThis has been fixed, but the stable new version is not released yet.\nYou can use formsy-react@0.15.1 (beta version)\n. js\n{this.state.validSubmit ? \"Thanks for contacting us\" : \"\"}\nin render, and\njs\nthis.setState({ validSubmit: true });\nin onValidSubmit\n. Just add isNumeric validation:\njs\n<MyInputComponent name=\"foo\" validations=\"isNumeric\"/>\n. See #135\n. Fixed in #229\n. What's your problem with style?\njs\nreturn (\n      <Formsy.Form style={{background: \"black\"}} ...>\n. You can use any method. Formsy does not limit you in this. See source:\njs\n    return (\n      <form {...this.props} onSubmit={this.submit}>\n        {this.props.children}\n      </form>\n    );\n. @christianalfoni could you see? This PR looks good.\n. :smile_cat: \n. > minLength:1 should give the error message when the input is not pristine and it's length is less than 1.\n@dsteinbach , @eriknyk , @CrisLi , @dayAlone   why? What should I do if I want to validate minLength only when field not empty?\nNow you have more flexibility in adding or removing required attribute.\n. See #135 \n. Hi! Could you add a test for this case?\n. Nice, thanks!\n. Something like this?\n``` js\nfunction overrideValue(value) {\n  return value + '42';\n}\nconst MyInput = React.createClass({\n  ...,\n  changeValue(event) {\n    const value = event.currentTarget.value;\n    this.setValue(overrideValue(value));\n  },\n  render() {\n    return \n```\nPlease, provide more information.\n. @neoziro  Hi! Could you add a test for this case?\n. @neoziro ok, could you show this in http://codepen.io/semigradsky/pen/dYYpwv?editors=001 ? Just fork this pen and edit it.\n. Nice! I added test 59bde8324c013f5d7f63307f3645a772e8a5a5b4 and merged it\n. Nope. @christianalfoni ?\n. Fix in #251 \n. @sdemjanenko Hi! Thanks for PR\nCould you use spread syntax instead adding new dependency?\nhttps://facebook.github.io/react/docs/transferring-props.html#transferring-with-...-in-jsx\nvar {\n      mapping,\n      validationErrors,\n      onSubmit,\n      onValid,\n      onInvalid,\n      onInvalidSubmit,\n      onChange,\n      reset,\n      preventExternalInvalidation,\n      onSuccess,\n      onError,\n      ...nonFormsyProps\n} = this.props;\n. Nice!\n. I can't. Ping @christianalfoni \n. Thank you for your help\nFixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Use required=\"isExisty\" if you want to validate null.\n. Done! 18467a94a1ea95fd4ffe168218a59a9c07781dbc\n. Yeah! Use required if you want validate empty value.\n. Hi! The problem arises from the fact that the library is heavily dependent on the input names.\nTherefore, problems occur when changing the name of the input.\nI tried to get rid of it. See #275 \n. @sdemjanenko @farisj @meikoudras @josercruz01 Hi! Could you test #275 on your code? If everything is fine, I will merge it.\n. FormData?\n. @574196906 you should use own form element not just input. You can see example here\n. Right! :)\n. How about just add required atribute?\n. @tnrich Hi! Use getModel() for taking values from attached inputs.\n. @SimonVaucher Hi! Thanks for PR\nI think it is very rarely used the feature to include it in the library. In most cases, will be used custom error messages.\nYou can create a separate repository with errors messages and using it this way:\njsx\nvar validationMessages = require('formsy-validation-messages'); // or some other name\n...\n  render() {\n    return (\n      <Form ...>\n          <Input validationErrors={validationMessages} ... />\n          ...\n      </Form>\n    );\n  }\n...\nMaybe @christianalfoni has a different opinion on this matter.\n. Use updateInputsWithError\n. Yes, that makes sense\n. Fixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Maybe just use matchRegexp validation?\n. Use validationErrors\njsx\n<MyInputComponent\n  name=\"email\"\n  validations={{\n    isEmail: true,\n    maxLength: 50\n  }}\n  validationErrors={{\n    isEmail: 'You have to type valid email',\n    maxLength: 'You can not type in more than 50 characters'\n  }}\n/>\n. Yeah, new Formsy version not realised yet.\n@christianalfoni ping\n. Sorry for the long pause. Formsy-react updated, check new version.\n. It would be great.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Hi for all! @twisty @mbrookes @sdemjanenko and other\n@christianalfoni has promised to give me rights in npm.\nThis means that soon there will be a new version :smile_cat: \n. Sorry for the long pause. The new version is here!\n. You mean formsy-react 15.0.0?\nI don't think it's really necessary.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. @pizzurro current behavior is correct. If you want get \"fail\" with empty value, you should add required validation additionally.\nI'll update the documentation that it was more clear.\n. 89a2d4287ba3decab2b9a52214cf881e60fb7d77\n. Fixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Formsy-react dependencies updated. Now there should be no error messages during installation.\n. Thanks for your help! I updated Formsy, check new version.\n. @kremez19 I'm sorry, my mistake. Check now\n. @keul you can use mapping for define only fields you want.\n. Another variant:\n1. Add boolean properties to Form: validateOnChange, validateOnInit\n2. Rename validate to customValidate.\n3. Add validate method to Form and Mixin for manually validation.\n. jsx\n<div className=\"container\" styles={styles.container} refs=\"form\" mapping={this.mapInputs}>\nrefs=\"form\" and mapping must be on Formsy.Formelement\n. You can write custom validation:\njsx\nfunction requiredOneFrom(names) {\n  return function(values, value) {\n    const valid = names.some(name => isExist(values[name]));\n    return valid ? true : isExist(value);\n  };\n}\n...\n...\n<Input name=\"foo1\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n<Input name=\"foo2\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n<Input name=\"foo3\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n. @574196906 you should use own form element not just input. You can see example here\n. @hifitodd , @Steinarthor just use required\n. It makes sense to change the validator to Diego Perini variant:\nhttps://mathiasbynens.be/demo/url-regex\n. Yes, it should be fixed\n. How about use object notation?\njsx\n<FRC.Input name=\"value\"\n    validations={{ notEqualsAny: this.state.data }}\n/>\n. nope https://www.npmjs.com/package/form-data-to-object\nLooks like npm problem. Try again.\n. Thanks!\n. js\n...\nonKeyPress(event) {\n    if (event.which === 13 /* Enter */) {\n      event.preventDefault();\n    }\n},\nrender() {\n  return (\n      <Form onKeyPress={this.onKeyPress} ...\n...\n. It looks like problem in formsy-react-components. Please open issue in that repo\n. @albertotorresfoltyn just update formsy-react-components\n. Are you using formsy-material-ui?\nIt looks like problem in formsy-material-ui. Please open issue in that repo\n. Something wrong :smile_cat: \n. Did you look reset-values example in examples?\n. Did you have imported  React before formsy-react?\n. @giovannicode hi! I have checked your example. Fix for it: https://github.com/giovannicode/formsy-import-test/pull/1\n. @CrazyDeveloper see https://github.com/twisty/formsy-react-components/issues/80\n. There are no any conversions. If you want validate numbers you should set numbers. https://github.com/christianalfoni/formsy-react/blob/master/API.md#setvalue\nSomething like this:\njs\n    changeValue(event) {\n        var value = event.currentTarget.value;\n        value = parseInt(value, 10);\n        this.setValue(value);\n    },\n. Because this validation is performed only after submitting form =)\n. Yeah, native submit will not work. You must do it yourself.\n. 1) isExisty returns true if the value is not undefined or null\nrequired failed when values is undefined or empty string\n2) Others form inputs values. See cross input validation example here: https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\n. If you want to consider null value as no value you can add your own required validation:\njs\nFormsy.addValidationRule('myRequired', function (values, value) {\n  return value === undefined || value === '' || value === null;\n});\nand use it\njsx\n<MyInputComponent name=\"email\" required=\"myRequired\" />\n. You can write mixin (or higher order component) for it. And add this mixin (call this higher order component) for your input.\n. 1. Check validation and requirements on inputs. Get first failed.\n2. Get top position of failed input. el.getBoundingClientRect().top + window.scrollY\n3. Scroll to it. window.scrollTo(0, topPosition)\n. jsx\n<input type=\"checkbox\" name=\"foo[0]\" value=\"value1\"/>\n<input type=\"checkbox\" name=\"foo[1]\" value=\"value2\"/>\nFormsy used form-data-to-object\n. @aesopwolf @rkuykendall Hi guys. I removed @formsy org, you can use this if you want.\nUnfortunately, I'm not interested in this project now.. Looks like you confused the repo.. > That is the bundled release.\nHow to use it? Why do it?\n. Oh, I see, thank you!\n. I think bower.json is not needed in npm package\n\n. Now this issue is not actual =)\n. Try this mapInputs function:\ncoffee\nmapInputs: (inputs) ->\n  member:\n    email: inputs.email\n    first_name: inputs.first_name\n    last_name: inputs.last_name\n. :+1: \n. Try clear npm cache and before installing dependencies:\nrm -rf node_modules\nnpm cache clean\nnpm install\nnpm run examples\nIf it is not helped try update your node.js and npm.\n. Hmm, strange, maybe this is determined by the fact that react is peerDependency. I could not repeat.\n. I think it will not be superfluous :)\n. @christianalfoni how about just passing all props?\nThis\njs\n    return (\n        <form {...this.props} onSubmit={this.submit}>\n            {this.traverseChildrenAndRegisterInputs(this.props.children)}\n        </form>\n    );\ninstead\njs\n    return React.DOM.form({\n        onSubmit: this.submit,\n        className: this.props.className,\n        autoComplete: this.props.autoComplete\n      },\n      this.traverseChildrenAndRegisterInputs(this.props.children)\n    );\n. :laughing: \n. It would be great! =)\n. Maybe you can give more information? Have you checked that after the removal of the matchRegexp rule all worked fine?\nCan you give your regexp?\n. Which version are you using?\nminLength validation will be added in 0.11.0 version. And it is still present.\n. Yeah, that looks as a bug.\njs\n// Another validation brings another error (wrong api document?)\nvalidations=\"isLength:10:10\"\n//=> Error: Formsy does not support multiple args on string validations. Use object format of validations instead.\nYes, it is not updated api. Now you should use minLength and maxLength validators.\nI corrected it.\n. Some questions:\nFormsy has hasValue validation. But that is not documented in API\n- should pass with empty string?\n- should pass with zero?\n. Good, I added isExisty and updated api\n. @christianalfoni I'm not well understood.\nDo you want me to add new tag (0.13.2) to repo?\nOr move changes (f168b53, 7ef6c51) to pull request?\n. Should fix #113 \n. > ``` js\n\n//valid\n'sup', ''\n```\n\nThat is confused me. Length of empty string is not 3 ;)\n@sanemat  How about extending the syntax?\njs\n<TestInput\n  name=\"foo\" \n  validations=\"isLength:0:3\" />\nand\njs\n<TestInput\n  name=\"foo\" \n  validations={{\n    isLength: [0, 3]\n  }} />\nThis should not be difficult to implement)\n. Looks good. Can you add tests for these cases?\nhttps://github.com/christianalfoni/formsy-react/blob/master/specs/Utils-spec.jsx\n. Nice! Thanks :+1: \n. @dsteinbach you can not nesting forms:\nhttp://www.w3.org/TR/2011/WD-html5-20110525/forms.html#the-form-element\n\nContent model:\nFlow content, but with no form element descendants.\n. You want check valid email or not?\nYou can use isValidValue method for this.\n. Thanks!\n. Yeah dependency was be removed. I have changed it to babel-loader. https://github.com/christianalfoni/formsy-react/commit/cca4973382a6c85be4f4e1f844c656d67bc8ffa8 Now all should be fine.\n. This is not exist in this version. @christianalfoni can you bump version? Or add me as collaborator to npm and I will do it.\n. It seems the best solution is to create your own rule for this.\n. @Nicolab You want something like this?\n\n``` js\nvar rules = Formsy.validators();\nFormsy.addValidationRule('minLengthOrEmpty', function (values, value) {\n  return rules.isEmptyString(values, value) || rules.minLength(values, value);\n});\n```\n. > If a field is not required and empty, needless to validate given that the field is optional (so, is a valid value).\nNow I understand, that is really problem.\n. @jswxwxf I tried to get your result, but I did not succeed.\nI changed a little login example. I removed required rule from password field. And submit button is shown when filling correct value to email field.\nCould you give more details?\n. You can pre-verify value or trigger validation (this.setValue(this.getValue());) in your onBlur handler.\n. > Take for example the maxLength validation. I can't use that when the field is optional.\nThat was fixed in #138 \nBut the new version is not yet published\n. I think it makes sense\n. Thank you for your trust! I will try to develop formsy :smile: \n. How about run stopPropagation submit event in your field?\n. You can use your favorite library for this. Superagent for example:\njs\nvar request = require('superagent');\n...\nvar Login = React.createClass({\n  ...\n  submit: function (data) {\n    request.post('/app/login', data).end(function (err, res) {\n      // do smth\n    });\n  },\n  ...\n  render: function () {\n    return (\n      <Formsy.Form onValidSubmit={this.submit}>\n        ...\n. I'm sorry, I can't quite understand why not make http post requests from the script.\n. Thanks for the issue. We will check the performance.\n. Are you tried use pure-render-mixin in your inputs?\n. Could you provide some of your code? So we might better understand where the bottleneck :snail: \n. Now it is not the priority, maybe after a new release\n. Thank!\n. Yeah, higher-order-component and decorator should be implemented.\nExample of realizing: https://github.com/Yomguithereal/baobab-react/tree/master/src\n. It is necessary to check, perhaps you can just use https://github.com/brigand/react-mixin?\n. @twisty thanks for response!\nFixed in 89759fefdedcd013fca45b248f4d12232123f3bb\n. Yeah, I think getErrorMessages should return [] instead of null\n:+1: 357f4adf715a58b17faa3b6094aef6b8f7de4391\n. Hi, this is fixed in new version #158\n. Nice! Thanks for assistance!\n. Already, you can use this:\njs\n<Formsy.Form id=\"some-id\"></Formsy.Form>\n. A good idea! I'll do it when I have enough time.\n. This issue resolved in #138 \n. @rodryquintero Hi! Use getModel() for taking values from attached inputs.\n. It should already be fixed in the new version. Try react-0.14 branch\nRelease is coming )\n. See https://github.com/christianalfoni/formsy-react/issues/158\nDependencies will be changed after releasing new version.\n. @emeeks The issue resolved?\n. Hello!\nI have merged your commit to working branch.\nThanks for activity!\n. @EthanML @CharlieGreenman  Hi! Use getModel() for taking values from attached inputs.\n. The new version has not yet been released\n. You can check more than one validation rule:\njs\n<MyInputComponent name=\"number\" validations=\"isNumeric,isLength:5\"/>\n<MyInputComponent name=\"number\" validations={{\n  isNumeric: true,\n  isLength: 5\n}}/>\nHowever, the value must comply with all these rules.\nYou'd better add your rule: addValidationRule\n. Add new isAlphanumeric rule to built-in validations will be easier =)\n. Hi!\nSee reset-values example (https://github.com/christianalfoni/formsy-react/tree/react-0.14/examples)\n. Hello!\nInitially, it was so intended. But it seems it is confusing.\nI have merged your commit to working branch.\nThanks for activity!\n. I think that is the onChange event from the input. Just add stopPropaganation:\njs\n  changeValue: function (event) {\n    event.stopPropagation();\n    this.setValue(event.currentTarget.value);\n  },\n. I a little changed login example:\nIn Input.js:\njs\n  changeValue(event) {\n    console.log('Change!');\n    this.setValue(event.currentTarget[this.props.type === 'checkbox' ? 'checked' : 'value']);\n  },\nIn app.js:\njs\n  onChange() {\n    console.log('Changed!');\n    console.log(arguments);\n  },\n  render() {\n    return (\n      <Form onChange={this.onChange} ...\nI see in console:\n\nWhen I changed changeValue to:\njs\n  changeValue(event) {\n    event.stopPropagation();\n    console.log('Change!');\n    this.setValue(event.currentTarget[this.props.type === 'checkbox' ? 'checked' : 'value']);\n  },\nI see:\n\n. If this does not help, can you show your code?\n. How about CodePen? :-)\nhttp://codepen.io/semigradsky/pen/dYYpwv/?editors=001\n. Nice! :+1: \n. Why not just:\njs\n<MyOwnInput name=\"example\" value=\"hello\" />\n?\n. See #135\nThis has been fixed, but the stable new version is not released yet.\nYou can use formsy-react@0.15.1 (beta version)\n. js\n{this.state.validSubmit ? \"Thanks for contacting us\" : \"\"}\nin render, and\njs\nthis.setState({ validSubmit: true });\nin onValidSubmit\n. Just add isNumeric validation:\njs\n<MyInputComponent name=\"foo\" validations=\"isNumeric\"/>\n. See #135\n. Fixed in #229\n. What's your problem with style?\njs\nreturn (\n      <Formsy.Form style={{background: \"black\"}} ...>\n. You can use any method. Formsy does not limit you in this. See source:\njs\n    return (\n      <form {...this.props} onSubmit={this.submit}>\n        {this.props.children}\n      </form>\n    );\n. @christianalfoni could you see? This PR looks good.\n. :smile_cat: \n. > minLength:1 should give the error message when the input is not pristine and it's length is less than 1.\n@dsteinbach , @eriknyk , @CrisLi , @dayAlone   why? What should I do if I want to validate minLength only when field not empty?\nNow you have more flexibility in adding or removing required attribute.\n. See #135 \n. Hi! Could you add a test for this case?\n. Nice, thanks!\n. Something like this?\n``` js\nfunction overrideValue(value) {\n  return value + '42';\n}\nconst MyInput = React.createClass({\n  ...,\n  changeValue(event) {\n    const value = event.currentTarget.value;\n    this.setValue(overrideValue(value));\n  },\n  render() {\n    return \n```\nPlease, provide more information.\n. @neoziro  Hi! Could you add a test for this case?\n. @neoziro ok, could you show this in http://codepen.io/semigradsky/pen/dYYpwv?editors=001 ? Just fork this pen and edit it.\n. Nice! I added test 59bde8324c013f5d7f63307f3645a772e8a5a5b4 and merged it\n. Nope. @christianalfoni ?\n. Fix in #251 \n. @sdemjanenko Hi! Thanks for PR\nCould you use spread syntax instead adding new dependency?\nhttps://facebook.github.io/react/docs/transferring-props.html#transferring-with-...-in-jsx\nvar {\n      mapping,\n      validationErrors,\n      onSubmit,\n      onValid,\n      onInvalid,\n      onInvalidSubmit,\n      onChange,\n      reset,\n      preventExternalInvalidation,\n      onSuccess,\n      onError,\n      ...nonFormsyProps\n} = this.props;\n. Nice!\n. I can't. Ping @christianalfoni \n. Thank you for your help\nFixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Use required=\"isExisty\" if you want to validate null.\n. Done! 18467a94a1ea95fd4ffe168218a59a9c07781dbc\n. Yeah! Use required if you want validate empty value.\n. Hi! The problem arises from the fact that the library is heavily dependent on the input names.\nTherefore, problems occur when changing the name of the input.\nI tried to get rid of it. See #275 \n. @sdemjanenko @farisj @meikoudras @josercruz01 Hi! Could you test #275 on your code? If everything is fine, I will merge it.\n. FormData?\n. @574196906 you should use own form element not just input. You can see example here\n. Right! :)\n. How about just add required atribute?\n. @tnrich Hi! Use getModel() for taking values from attached inputs.\n. @SimonVaucher Hi! Thanks for PR\nI think it is very rarely used the feature to include it in the library. In most cases, will be used custom error messages.\nYou can create a separate repository with errors messages and using it this way:\njsx\nvar validationMessages = require('formsy-validation-messages'); // or some other name\n...\n  render() {\n    return (\n      <Form ...>\n          <Input validationErrors={validationMessages} ... />\n          ...\n      </Form>\n    );\n  }\n...\nMaybe @christianalfoni has a different opinion on this matter.\n. Use updateInputsWithError\n. Yes, that makes sense\n. Fixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Maybe just use matchRegexp validation?\n. Use validationErrors\njsx\n<MyInputComponent\n  name=\"email\"\n  validations={{\n    isEmail: true,\n    maxLength: 50\n  }}\n  validationErrors={{\n    isEmail: 'You have to type valid email',\n    maxLength: 'You can not type in more than 50 characters'\n  }}\n/>\n. Yeah, new Formsy version not realised yet.\n@christianalfoni ping\n. Sorry for the long pause. Formsy-react updated, check new version.\n. It would be great.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Hi for all! @twisty @mbrookes @sdemjanenko and other\n@christianalfoni has promised to give me rights in npm.\nThis means that soon there will be a new version :smile_cat: \n. Sorry for the long pause. The new version is here!\n. You mean formsy-react 15.0.0?\nI don't think it's really necessary.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. @pizzurro current behavior is correct. If you want get \"fail\" with empty value, you should add required validation additionally.\nI'll update the documentation that it was more clear.\n. 89a2d4287ba3decab2b9a52214cf881e60fb7d77\n. Fixed in 6767a6b9eba9c0a7c255c46ce2d6f84dc69eeeb4\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Sorry for the long pause. Formsy-react updated, check new version.\n. Formsy-react dependencies updated. Now there should be no error messages during installation.\n. Thanks for your help! I updated Formsy, check new version.\n. @kremez19 I'm sorry, my mistake. Check now\n. @keul you can use mapping for define only fields you want.\n. Another variant:\n1. Add boolean properties to Form: validateOnChange, validateOnInit\n2. Rename validate to customValidate.\n3. Add validate method to Form and Mixin for manually validation.\n. jsx\n<div className=\"container\" styles={styles.container} refs=\"form\" mapping={this.mapInputs}>\nrefs=\"form\" and mapping must be on Formsy.Formelement\n. You can write custom validation:\njsx\nfunction requiredOneFrom(names) {\n  return function(values, value) {\n    const valid = names.some(name => isExist(values[name]));\n    return valid ? true : isExist(value);\n  };\n}\n...\n...\n<Input name=\"foo1\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n<Input name=\"foo2\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n<Input name=\"foo3\" validations={{ myCustomValidation: requiredOneFrom(['foo1', 'foo2', 'foo3']) }}/>\n. @574196906 you should use own form element not just input. You can see example here\n. @hifitodd , @Steinarthor just use required\n. It makes sense to change the validator to Diego Perini variant:\nhttps://mathiasbynens.be/demo/url-regex\n. Yes, it should be fixed\n. How about use object notation?\njsx\n<FRC.Input name=\"value\"\n    validations={{ notEqualsAny: this.state.data }}\n/>\n. nope https://www.npmjs.com/package/form-data-to-object\nLooks like npm problem. Try again.\n. Thanks!\n. js\n...\nonKeyPress(event) {\n    if (event.which === 13 /* Enter */) {\n      event.preventDefault();\n    }\n},\nrender() {\n  return (\n      <Form onKeyPress={this.onKeyPress} ...\n...\n. It looks like problem in formsy-react-components. Please open issue in that repo\n. @albertotorresfoltyn just update formsy-react-components\n. Are you using formsy-material-ui?\nIt looks like problem in formsy-material-ui. Please open issue in that repo\n. Something wrong :smile_cat: \n. Did you look reset-values example in examples?\n. Did you have imported  React before formsy-react?\n. @giovannicode hi! I have checked your example. Fix for it: https://github.com/giovannicode/formsy-import-test/pull/1\n. @CrazyDeveloper see https://github.com/twisty/formsy-react-components/issues/80\n. There are no any conversions. If you want validate numbers you should set numbers. https://github.com/christianalfoni/formsy-react/blob/master/API.md#setvalue\nSomething like this:\njs\n    changeValue(event) {\n        var value = event.currentTarget.value;\n        value = parseInt(value, 10);\n        this.setValue(value);\n    },\n. Because this validation is performed only after submitting form =)\n. Yeah, native submit will not work. You must do it yourself.\n. 1) isExisty returns true if the value is not undefined or null\nrequired failed when values is undefined or empty string\n2) Others form inputs values. See cross input validation example here: https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\n. If you want to consider null value as no value you can add your own required validation:\njs\nFormsy.addValidationRule('myRequired', function (values, value) {\n  return value === undefined || value === '' || value === null;\n});\nand use it\njsx\n<MyInputComponent name=\"email\" required=\"myRequired\" />\n. You can write mixin (or higher order component) for it. And add this mixin (call this higher order component) for your input.\n. 1. Check validation and requirements on inputs. Get first failed.\n2. Get top position of failed input. el.getBoundingClientRect().top + window.scrollY\n3. Scroll to it. window.scrollTo(0, topPosition)\n. jsx\n<input type=\"checkbox\" name=\"foo[0]\" value=\"value1\"/>\n<input type=\"checkbox\" name=\"foo[1]\" value=\"value2\"/>\nFormsy used form-data-to-object\n. @aesopwolf @rkuykendall Hi guys. I removed @formsy org, you can use this if you want.\nUnfortunately, I'm not interested in this project now.. Looks like you confused the repo.. ",
    "gpbmike": "My bad, I'm using an older version. My problem was fixed with these commits:\nhttps://github.com/christianalfoni/formsy-react/commit/bade05b9cd2e3845ecc7814fe5d1516b05c82133\nhttps://github.com/christianalfoni/formsy-react/commit/dca9f785248346431a32e0121d970b6a0a4a55b8\nI thought I was linking to the erroneous line I found in my local version. I didn't look close enough. :)\nCheers.\n. My bad, I'm using an older version. My problem was fixed with these commits:\nhttps://github.com/christianalfoni/formsy-react/commit/bade05b9cd2e3845ecc7814fe5d1516b05c82133\nhttps://github.com/christianalfoni/formsy-react/commit/dca9f785248346431a32e0121d970b6a0a4a55b8\nI thought I was linking to the erroneous line I found in my local version. I didn't look close enough. :)\nCheers.\n. ",
    "marnusw": "It seems like getCurrentValues() could also be used instead of updateModel() and then the concept of this.model could be removed entirely. The only place where the model is actually used is in submit(), and then it is always regenerated from the input values anyway, so dropping the model property wouldn't make a difference as far as I can see?\nIf it seems to you that I'm correct and you're open to it I'll create a pull request with the changes after making sure the tests all still pass.\n. Sure thing, I'll work on the PR in the very near future. Thanks.\n. It seems like getCurrentValues() could also be used instead of updateModel() and then the concept of this.model could be removed entirely. The only place where the model is actually used is in submit(), and then it is always regenerated from the input values anyway, so dropping the model property wouldn't make a difference as far as I can see?\nIf it seems to you that I'm correct and you're open to it I'll create a pull request with the changes after making sure the tests all still pass.\n. Sure thing, I'll work on the PR in the very near future. Thanks.\n. ",
    "arunthampi": "That worked, thanks @Semigradsky!\nClosing for now, @christianalfoni shall I open a pull request to add @Semigradsky's solution as documentation in the mapInputs section of the README?\n. That worked, thanks @Semigradsky!\nClosing for now, @christianalfoni shall I open a pull request to add @Semigradsky's solution as documentation in the mapInputs section of the README?\n. ",
    "pkmiec": "I've been experimenting with different form libraries for react and I think formsy is very good. Thanks for putting it together. \nHowever, I think it is still lacking on the validation front. Validations are common and often the same validation is used over and over again. Take isEmail for example. I may want to use isEmail on various fields throughout the app, but I don't really want to keep saying errors = { isEmail: 'You have to type a valid email address' }. Also, the message is not a static string, but rather needs to be generated dynamically based on the parameters of the validation (e.g. maxLength: X => 'Your email can not be longer than X characters'). \nI think Rails does this pretty well, where you'd say,\nruby\nvalidates_email :foo\nwhich will check whether foo is a valid email and if not add a default validation error for email (e.g. \"is not a valid email address\"). I can change that default message globally if I want. Or I can also change the message on a particular instance,\nruby\nvalidates_email :foo, :message => \"really needs to be an email address\"\nThe main point here is a field has a list of validators. All that validator needs to do is take a value (or perhaps all the values from the form) and produce an error string or null if there is no error (i.e. it is valid).\nTranslating this to type of approach to formsy, maybe you'd end up with something like,\n<MyElement name=\"foo\" validations={[\n  validators.email(),\n  validators.length({ min: 10, max: 255 })\n]}/>\nThis would first check whether foo is an email and use a default validation error for email (e.g. \"is not a valid email address\"). And then it would check whether foo is within the length limits and use a default validation error for length (e.g. \"needs to be between 10 and 255 characters\").\nI could change the default messages with maybe, \nvalidators.email.error = \"my own static default message\"\n  validators.length.error = function(options) { \"my own custom message - min:\" + options.min }\nOr I could provide a custom message and / or custom validators,\nvar myValidator = {\n  validate: function(value) {\n    if (!!value) { return \"oops\" }\n  }\n}\n<MyElement name=\"foo\" validations={[\n  validators.email(message: \"my own message\"),\n  validators.length({ min: 10, max: 255, message:  function(options) { \"my own dynamic message\" } }),\n  myValidator\n]}/>\nThanks for listening. Let me know what you think.\nEdit: minor naming change.\n. One more thought ... I was looking at I18N and http://formatjs.io/react/. It would be good to support localization for error messages.\nAny idea on how to support something like http://formatjs.io/react/?\n. Thanks. That confirms my suspicions. \nI actually have a work around much like what you are describing. I made my own method to set server errors,\n``` js\n  setServerErrors: function(errors) {\n    var form = this.refs.formsy;\nObject.keys(form.inputs).forEach(function (name, index) {\n  var component = form.inputs[name];\n  var args = [{\n    _isPristine: true,\n    serverError: errors[name]\n  }];\n  component.setState.apply(component, args);\n});\n\n},\n```\nAnd then I can explicitly check for isPristine() && this.state.serverError in the input.\nNotice I don't set _isValid to false like setInputValidationErrors since I thought the user should be able to submit the form again in this case.\n. Yes, it works! The external errors for an input do not disappear until that input is touched by the user.\nI still prefer to be able to submit the form when they are only external errors. I can continue to do that with a custom method.\n. @christianalfoni, I don't think your suggestion works for me. The reason is that in order to submit the form, I'd need have to loop over all the inputs checking whether each one is valid or is invalid with an external error. And I would have to apply similar logic if I wanted to disable / enable the form submit button.\nI view it like @ordinathorreur does. Where the external errors do not affect the client side form validity. \n. Yeah, I can see how different people may want different behaviors. Let me play with your suggestion locally and see if it works.\n. Hmm .. just not setting isValid in updateInputsWithError is not enough. You run into this,\njs\nif (validation.isValid && component.state._externalError) {\n  validation.isValid = false;\n}\nIt seems to me we're discussing whether server errors / external errors make a field invalid and therefore make the form invalid. Perhaps best is to delegate that to the Mixin (as it is already required that it is used to implement an Input). We'd replace _isValid on the input with isValid(). That way, it is very easy to choose which way it should work. Here is some rough code, \njs\n// rename updateInputsWithError to setExternalErrors\n  setExternalErrors: function (errors) {\n    Object.keys(this.inputs).forEach(function (name, index) {\n      this.inputs[name].setExternalError(errors[name]);\n    }.bind(this));\n  }\nand in the Mixin would be implemented like this,\n``` js\nsetExternalError(error) {\n  this.setState({\n    _externalError: error\n  });\n},\nsetValidationError(error) {\n  this.setState({\n    _validationError: error\n  });\n},\nisValid: function() {\n  !!this.state._validationError || !!this.state._externalError\n},\ngetErrorMessage() {\n  this.state._externalError || this.state.validationError\n},\n```\nthen I could override isValid to not consider external errors, \njs\nisValid: function() {\n  !!this.state._validationError\n}\n. Actually, I just noticed I had required on username / password. So it works when it is like this,\njsx\n<Formsy.Form onSubmit={this.onSubmit}>\n  <Input type=\"text\" name=\"username\" label=\"Username\" validations={{isEmail: true}} /> // work when no required here\n  <Input type=\"password\" name=\"password\" label=\"Password\" required/>\n  <Button type=\"submit\" bsStyle=\"primary\" disabled={this.state.isSubmitting}>Login</Button>\n</Formsy.Form>\n. Yes, fixed. Thanks.\n. I believe you're getting at the same thing as I was in https://github.com/christianalfoni/formsy-react/issues/93.\nYou want to continue to show the server side error message on a field until the user modifies that field.\n. I've been experimenting with different form libraries for react and I think formsy is very good. Thanks for putting it together. \nHowever, I think it is still lacking on the validation front. Validations are common and often the same validation is used over and over again. Take isEmail for example. I may want to use isEmail on various fields throughout the app, but I don't really want to keep saying errors = { isEmail: 'You have to type a valid email address' }. Also, the message is not a static string, but rather needs to be generated dynamically based on the parameters of the validation (e.g. maxLength: X => 'Your email can not be longer than X characters'). \nI think Rails does this pretty well, where you'd say,\nruby\nvalidates_email :foo\nwhich will check whether foo is a valid email and if not add a default validation error for email (e.g. \"is not a valid email address\"). I can change that default message globally if I want. Or I can also change the message on a particular instance,\nruby\nvalidates_email :foo, :message => \"really needs to be an email address\"\nThe main point here is a field has a list of validators. All that validator needs to do is take a value (or perhaps all the values from the form) and produce an error string or null if there is no error (i.e. it is valid).\nTranslating this to type of approach to formsy, maybe you'd end up with something like,\n<MyElement name=\"foo\" validations={[\n  validators.email(),\n  validators.length({ min: 10, max: 255 })\n]}/>\nThis would first check whether foo is an email and use a default validation error for email (e.g. \"is not a valid email address\"). And then it would check whether foo is within the length limits and use a default validation error for length (e.g. \"needs to be between 10 and 255 characters\").\nI could change the default messages with maybe, \nvalidators.email.error = \"my own static default message\"\n  validators.length.error = function(options) { \"my own custom message - min:\" + options.min }\nOr I could provide a custom message and / or custom validators,\nvar myValidator = {\n  validate: function(value) {\n    if (!!value) { return \"oops\" }\n  }\n}\n<MyElement name=\"foo\" validations={[\n  validators.email(message: \"my own message\"),\n  validators.length({ min: 10, max: 255, message:  function(options) { \"my own dynamic message\" } }),\n  myValidator\n]}/>\nThanks for listening. Let me know what you think.\nEdit: minor naming change.\n. One more thought ... I was looking at I18N and http://formatjs.io/react/. It would be good to support localization for error messages.\nAny idea on how to support something like http://formatjs.io/react/?\n. Thanks. That confirms my suspicions. \nI actually have a work around much like what you are describing. I made my own method to set server errors,\n``` js\n  setServerErrors: function(errors) {\n    var form = this.refs.formsy;\nObject.keys(form.inputs).forEach(function (name, index) {\n  var component = form.inputs[name];\n  var args = [{\n    _isPristine: true,\n    serverError: errors[name]\n  }];\n  component.setState.apply(component, args);\n});\n\n},\n```\nAnd then I can explicitly check for isPristine() && this.state.serverError in the input.\nNotice I don't set _isValid to false like setInputValidationErrors since I thought the user should be able to submit the form again in this case.\n. Yes, it works! The external errors for an input do not disappear until that input is touched by the user.\nI still prefer to be able to submit the form when they are only external errors. I can continue to do that with a custom method.\n. @christianalfoni, I don't think your suggestion works for me. The reason is that in order to submit the form, I'd need have to loop over all the inputs checking whether each one is valid or is invalid with an external error. And I would have to apply similar logic if I wanted to disable / enable the form submit button.\nI view it like @ordinathorreur does. Where the external errors do not affect the client side form validity. \n. Yeah, I can see how different people may want different behaviors. Let me play with your suggestion locally and see if it works.\n. Hmm .. just not setting isValid in updateInputsWithError is not enough. You run into this,\njs\nif (validation.isValid && component.state._externalError) {\n  validation.isValid = false;\n}\nIt seems to me we're discussing whether server errors / external errors make a field invalid and therefore make the form invalid. Perhaps best is to delegate that to the Mixin (as it is already required that it is used to implement an Input). We'd replace _isValid on the input with isValid(). That way, it is very easy to choose which way it should work. Here is some rough code, \njs\n// rename updateInputsWithError to setExternalErrors\n  setExternalErrors: function (errors) {\n    Object.keys(this.inputs).forEach(function (name, index) {\n      this.inputs[name].setExternalError(errors[name]);\n    }.bind(this));\n  }\nand in the Mixin would be implemented like this,\n``` js\nsetExternalError(error) {\n  this.setState({\n    _externalError: error\n  });\n},\nsetValidationError(error) {\n  this.setState({\n    _validationError: error\n  });\n},\nisValid: function() {\n  !!this.state._validationError || !!this.state._externalError\n},\ngetErrorMessage() {\n  this.state._externalError || this.state.validationError\n},\n```\nthen I could override isValid to not consider external errors, \njs\nisValid: function() {\n  !!this.state._validationError\n}\n. Actually, I just noticed I had required on username / password. So it works when it is like this,\njsx\n<Formsy.Form onSubmit={this.onSubmit}>\n  <Input type=\"text\" name=\"username\" label=\"Username\" validations={{isEmail: true}} /> // work when no required here\n  <Input type=\"password\" name=\"password\" label=\"Password\" required/>\n  <Button type=\"submit\" bsStyle=\"primary\" disabled={this.state.isSubmitting}>Login</Button>\n</Formsy.Form>\n. Yes, fixed. Thanks.\n. I believe you're getting at the same thing as I was in https://github.com/christianalfoni/formsy-react/issues/93.\nYou want to continue to show the server side error message on a field until the user modifies that field.\n. ",
    "janmyler": "Hi, maybe I just didn't get it, is it that Formsy v1.0.0 will not require the use of mixins anymore?\n. +1 for this. We should be able to pass props to form element, thinking of autocomplete and novalidate for example.\n. Thank you! :+1: \n. Hi, maybe I just didn't get it, is it that Formsy v1.0.0 will not require the use of mixins anymore?\n. +1 for this. We should be able to pass props to form element, thinking of autocomplete and novalidate for example.\n. Thank you! :+1: \n. ",
    "firstdoit": "@pkmiec :+1: very important to keep i18n in mind, and React Intl is the de-facto solution right now. \n. @binarykitchen I had the same problem. I needed to have a form with different inputs depending on country:\n<Formsy.Form>\n  {countryInputs}\n</Formsy.Form>\nInstead of making countryInputs a component, I simply defined a function that returns arbitrary elements. Formsy is happy with that because the Formsy and the Inputs are still on the same render.\nhttps://github.com/vtex/react-address-book/blob/f0eb8f1e111e3e286c7ef5378ad12c191f53b6c6/src/components/input-groups/InputGroupBRA.js\nhttps://github.com/vtex/react-address-book/blob/f0eb8f1e111e3e286c7ef5378ad12c191f53b6c6/src/components/AddressForm.js#L57\nBTW, thanks for this awesome lib, @christianalfoni :)\n. Nice! Looking forward indeed. \n. @pkmiec :+1: very important to keep i18n in mind, and React Intl is the de-facto solution right now. \n. @binarykitchen I had the same problem. I needed to have a form with different inputs depending on country:\n<Formsy.Form>\n  {countryInputs}\n</Formsy.Form>\nInstead of making countryInputs a component, I simply defined a function that returns arbitrary elements. Formsy is happy with that because the Formsy and the Inputs are still on the same render.\nhttps://github.com/vtex/react-address-book/blob/f0eb8f1e111e3e286c7ef5378ad12c191f53b6c6/src/components/input-groups/InputGroupBRA.js\nhttps://github.com/vtex/react-address-book/blob/f0eb8f1e111e3e286c7ef5378ad12c191f53b6c6/src/components/AddressForm.js#L57\nBTW, thanks for this awesome lib, @christianalfoni :)\n. Nice! Looking forward indeed. \n. ",
    "Nicolab": "i18n is a great idea. However, to better integrate into existing projects, no module should be imposed.\nThe ideal would be to go through an adapter, like this:\njs\nFormsy.translate(function(errorMessage) {\n  return anyTranslator(errorMessage);\n});\nOr via a config container:\njs\nFormsy.config.translate(function(errorMessage) {\n  return anyTranslator(errorMessage);\n});\n. It would work just like translating any other text in your components?\nIndeed, it makes sense\n. Thank you for your reply.\nIf I do it this way, I lose the interest of generic validators :(\nThere must be another way, a hook, a wrapper or other ?\n. @Semigradsky it's a solution :) \nThe ideal would be to avoid creating duplicate rules for the same thing.\nIf a field is not required and empty, needless to validate given that the field is optional (so, is a valid value).\n. Excellent, thanks !\n. :+1: \n. The fix #138 does not provide this behavior. If required=\"false\" is used then an error is thrown (because false validator doesn't exist)\n. Hello,\nthanks for the replies and explanation (sorry for my late response).\n\nI'm using required=\"false\" and it works as expected. Maybe it got fixed since you tried it.\n\nrequired=\"false\"\nvalidations=\"minLength:2\"\nThrown Error: Formsy does not have the validation rule: false\nAnd\nrequired={false}\nvalidations=\"minLength:2\"\nminLength is called\n. Thanks for the explanation @christianalfoni \njs\n<MyInput name=\"some_field\" type=\"text\" required={true/false} requiredRule=\"isFalse\">\n:+1:  Would be very useful\n. Hi,\nsee #163, you'll find may be your answer.\n. i18n is a great idea. However, to better integrate into existing projects, no module should be imposed.\nThe ideal would be to go through an adapter, like this:\njs\nFormsy.translate(function(errorMessage) {\n  return anyTranslator(errorMessage);\n});\nOr via a config container:\njs\nFormsy.config.translate(function(errorMessage) {\n  return anyTranslator(errorMessage);\n});\n. It would work just like translating any other text in your components?\nIndeed, it makes sense\n. Thank you for your reply.\nIf I do it this way, I lose the interest of generic validators :(\nThere must be another way, a hook, a wrapper or other ?\n. @Semigradsky it's a solution :) \nThe ideal would be to avoid creating duplicate rules for the same thing.\nIf a field is not required and empty, needless to validate given that the field is optional (so, is a valid value).\n. Excellent, thanks !\n. :+1: \n. The fix #138 does not provide this behavior. If required=\"false\" is used then an error is thrown (because false validator doesn't exist)\n. Hello,\nthanks for the replies and explanation (sorry for my late response).\n\nI'm using required=\"false\" and it works as expected. Maybe it got fixed since you tried it.\n\nrequired=\"false\"\nvalidations=\"minLength:2\"\nThrown Error: Formsy does not have the validation rule: false\nAnd\nrequired={false}\nvalidations=\"minLength:2\"\nminLength is called\n. Thanks for the explanation @christianalfoni \njs\n<MyInput name=\"some_field\" type=\"text\" required={true/false} requiredRule=\"isFalse\">\n:+1:  Would be very useful\n. Hi,\nsee #163, you'll find may be your answer.\n. ",
    "bryannaegele": "@christianalfoni We made a few other modifications. I opened an issue to have an open discussion around it. I will put the PR back up when you and anyone else has had time to ponder it.\n. @christianalfoni We made a few other modifications. I opened an issue to have an open discussion around it. I will put the PR back up when you and anyone else has had time to ponder it.\n. ",
    "adamellsworth": "Oh sorry, I see this has already been addressed: https://github.com/christianalfoni/formsy-react/issues/65\n. Thanks for addressing this so quickly.\n. Oh sorry, I see this has already been addressed: https://github.com/christianalfoni/formsy-react/issues/65\n. Thanks for addressing this so quickly.\n. ",
    "dprentis": "Ah, method above doesn't work either, throws:\nUncaught Error: Invariant Violation: findComponentRoot(... etc.\n. Wow! thanks for addressing this so fast - I'll check it out :)\n. So, got this to work using this:\n<Formsy.Form>\n      <Input name=\"myNumber\" />\n      <button type=\"submit\" formNoValidate>Update</button>\n    </Formsy.Form>\nI think the input element has to be a submit button (see w3)\n. Again, thanks for addressing this so fast! :) will take a look at the latest version..\n. I can't get required validation to work with version 0.12.2 eg.\n<Input name=\"myInput\" required />\nThe form is valid even though the input (a textbox) is empty.\nCurrent work-around is just to implement an isRequired validation rule and use that instead.\nFormsy.addValidationRule('isRequired', function(values, value) {\n  return typeof value !== 'undefined' && value !== '' && value !== false;\n});\n. Ah, method above doesn't work either, throws:\nUncaught Error: Invariant Violation: findComponentRoot(... etc.\n. Wow! thanks for addressing this so fast - I'll check it out :)\n. So, got this to work using this:\n<Formsy.Form>\n      <Input name=\"myNumber\" />\n      <button type=\"submit\" formNoValidate>Update</button>\n    </Formsy.Form>\nI think the input element has to be a submit button (see w3)\n. Again, thanks for addressing this so fast! :) will take a look at the latest version..\n. I can't get required validation to work with version 0.12.2 eg.\n<Input name=\"myInput\" required />\nThe form is valid even though the input (a textbox) is empty.\nCurrent work-around is just to implement an isRequired validation rule and use that instead.\nFormsy.addValidationRule('isRequired', function(values, value) {\n  return typeof value !== 'undefined' && value !== '' && value !== false;\n});\n. ",
    "jcapogna": "As a workaround, you should be able to add novalidate to each of your inputs. \n. That would work if I was submitting the HTML form directly. I am using the Formsy 'onSubmit' handler and then making an ajax call with the 'data' value passed to the onSubmit handler. The value you get from the file input is a fake path. For example, I selected \"/home/jcapogna/foo.txt\" and the value of the form element was \"C:\\fakepath\\foo.txt\"\n. Thanks @christianalfoni \nThis part of my project got pushed back and I still haven't gotten to it yet. Hopefully I'll be working in this again in the next month or so. I'll let you know if I run into any problems. \n. Apologies. I now see that this is supported. \n. As a workaround, you should be able to add novalidate to each of your inputs. \n. That would work if I was submitting the HTML form directly. I am using the Formsy 'onSubmit' handler and then making an ajax call with the 'data' value passed to the onSubmit handler. The value you get from the file input is a fake path. For example, I selected \"/home/jcapogna/foo.txt\" and the value of the form element was \"C:\\fakepath\\foo.txt\"\n. Thanks @christianalfoni \nThis part of my project got pushed back and I still haven't gotten to it yet. Hopefully I'll be working in this again in the next month or so. I'll let you know if I run into any problems. \n. Apologies. I now see that this is supported. \n. ",
    "twisty": "I think @dprentis is right, the formnovalidate attribute is only allowed on submit and image input types. So if it's present on the default button for the form, native validation is skipped. If formnovalidate is not present on the default button, then a novalidate attribute on the form element comes into play.\nFrom what I can see, adding formNoValidate to other inputs (as shown in the API documentation) has no effect.\nNative validation shown:\n<Formsy.Form>\n   <input name=\"foo\" formNoValidate required />\n   <input name=\"submit\" type=\"Submit\" />\n</Formsy.Form>\nNative validation supressed:\n<Formsy.Form>\n   <input name=\"foo\" required />\n   <input name=\"submit\" formNoValidate type=\"Submit\" />\n</Formsy.Form>\n. Yes, that's the way to do it with formNoValidate on a submit button. We should change the docs to show this.\n. There's another case where formNoValidate works:\nxml\n<Formsy.Form>\n   <input type=\"search\" name=\"q\" formNoValidate required />\n</Formsy.Form>\nI think what happens here is that in a form with a single \"texty\" type of input, that element also takes the role of the submit button, so formNoValidate applies and native validation is skipped.\nIn the docs, it maybe worth noting that formsy-react isn't performing any \"special magic\", and provide a link to the html5 spec?\n. Also! Maybe we should whitelist the noValidate attribute on the form element?\n. @colinmccann In FRC, there is a File component. You should use that instead!\nSee release notes for 0.4.0 for a bit more detail.\nThe C:\\fakepath is added by your browser.\n. There's an interesting approach using the -webkit-autofill selector that may be worth examining. See: https://github.com/appsforartists/gravel/commit/d868d68559047199dd53860c874dad9bf9a63cf3\nSee also:\n- https://github.com/facebook/react/issues/1159\n- http://stackoverflow.com/questions/11708092/detecting-browser-autofill/\n- https://github.com/tbosch/autofill-event\n. I suppose it could be technically possible to ditch the required prop, but I think it's there for convenience and discoverability...\nIt's a common UI pattern to present asterisks next to required fields, using the isRequired() function is perhaps \"cleaner\" than inspecting a component's validators to work out if the component is required or not (particularly as presenting a \"required\" indicator in the UI is often separate from presenting other validation errors).\nAlso, as there is a required attribute for HTML5 form controls, developers coming to this library are already likely to be familiar with setting a required attribute separately to other input constraints (specific input types, validations, etc.).\n. Hello there,\nSome good stuff in this release, thanks!\nI've been having trouble getting the multiple error messages to show (code below). The validations seem to be running correctly, but it seems to only return the generic \"fallback\" error message.\n``` javascript\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar Formsy = require('formsy-react');\nvar ValidationTest = React.createClass({\nmixins: [Formsy.Mixin],\n\nrenderErrors() {\n    var errorMessages = this.getErrorMessages() || [];\n    return errorMessages.map((message, key) => {\n          return (\n              <p key={key}>Error: {message}</p>\n        );\n    });\n},\n\nonChange(e) {\n    this.setValue(e.currentTarget.value);\n},\n\nrender() {\n    return (\n        <div>\n            {this.isRequired() ? '* ' : ''}\n            <input\n                type=\"text\"\n                value={this.getValue()}\n                onChange={this.onChange}\n                required={this.props.required}\n            />\n            {this.renderErrors()}\n        </div>\n    );\n}\n\n});\nvar App = React.createClass({\n    render() {\n        return (\n             { console.log(model); }} noValidate>\n                \n\n\n        )\n    }\n});\nReactDOM.render(, document.body);\n```\n. @Semigradsky super!\nHere's an edge case for you! When the component is set as 'required', and the value is empty (i.e showRequired() is true) getErrorMessages() returns [undefined]. It feels like it should return [].\nThe work-around is to check for showRequired() before showing error messages, but the current behaviour doesn't seem intuitive. What do you think?\n. You could just modify the user input before passing it to setValue. Presumably you're calling setValue in an onBlur callback? Something like this could work:\n``` javascript\nvar Url = React.createClass({\nmixins: [Formsy.Mixin],\n\nonChange(e) {\n    this.setState({displayValue: e.currentTarget.value});\n},\n\nonBlur(e) {\n    var value = e.currentTarget.value;\n    if (value.indexOf('http://') !== 0) {\n        value = 'http://' + value;\n    }\n    this.setState({displayValue: value});\n    this.setValue(value);\n},\n\nrender() {\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={this.state.displayValue}\n                onChange={this.onChange}\n                onBlur={this.onBlur}\n            />\n        </div>\n    );\n}\n\n});\n```\n. Hi, validating after blur is possible, delaying running validations until submit isn't possible at the moment.\n- Validate email after blur: #139\n- Add optional prop 'validateOnSubmit' to Form component: #147\nMaybe you could work around this by suppressing the rendering the validation warnings? For example, you could set a property on the form components that dictates whether to render the validation errors, and change this property on onValidSubmit and onInvalidSubmit callback.\n. It's not possible with the currently released version, but will be coming in a future release.\nSee https://github.com/christianalfoni/formsy-react/issues/158.\n. In twisty/formsy-react-components we set a validatePristine property, and then test for it before rendering error messages etc.:\n``` jsx\n    renderErrorMessage: function() {\n        if (!this.showErrors()) {\n            return '';\n        }\n        var errorMessages = this.getErrorMessages() || [];\n        return errorMessages.map((message, key) => {\n            return (\n                {message}\n            );\n        });\n    },\nshowErrors: function() {\n    if (this.isPristine() === true) {\n        if (this.props.validatePristine === false) {\n            return false;\n        }\n    }\n    return (this.isValid() === false);\n}\n\n```\nSee: https://github.com/twisty/formsy-react-components/blob/68d5fb86bdaf9fb2cd8000c51b4269bd8049d3ab/src/mixins/component.js#L51-L70\n. Form Input requires a name property when used\nI think this message could be clearer. For example, you may have an formsy component called Input in the form, but the error could be triggered by any of the other formsy components in the form.\nMaybe the following would be better?\nFormsy components require a name prop\nCan send a PR if you like.\n. I may be wrong, but I think @Semigradsky already has write access to this repo?\nThere is enough improvement to justify a new release, but only @christianalfoni has the power to push releases on npm, and he has no time for formsy-react right now. This looks like a source of frustration that could be eased by adding another owner to the npm project.\nOf course, this is @christianalfoni's project and he is at liberty to do as he wishes! If he has no more interest or time for this, or is unwilling or unable to grant others to push releases on npm, then forking is a natural progression. I'd rather It didn't come to this, though.\nAs for the name, how about formsky-react ;-)\n. Hello there, first thoughts:\n1. Automatic validation:\n   1. validateOnChange: I guess if this is true it would be the same as now, where validation is run on setValue, then it validates all values?\n   2. validateOnInit: If there is going to be a validate method on the form, maybe leaving it to the user to call that in componentWillMount is sufficient? Would that work?\nI think being able to opt-in or opt-out of  'automatic' validation for both scenarios would be okay.\n2. We don't use a component validate function in any of the FRC components, so changing this to customValidate (or similar) looks good to me, especially as this releases the validate function name to (presumably) run validations for that component only. We already have isValidValue, so need some clarification what the intent is here.\nI guess having a way of checking a value for validity at a component-level and returning validation messages (\u00e0 la getErrorMessages()) is missing at the moment.\n3. Yes, seems good. From a user perspective being able to call validate on components and the form as-a-whole is probably an expected use-case.\n. Also see: https://github.com/erikras/redux-form/issues/735\n. I think something like @zimt28's defensive fix is the way to go; changing getValue to return an empty string wouldn't be useful for components that don't expect a \"texty\" type of value.\nIf you're passing the getValue() value directly to your form control element, you could set a defaultProp of '' (empty string) for value in your component?\n. Is this is a warning in both production and development mode? Does it still work on production mode? I'll look into this, of course, but apart from the warning is anything actually \"seriously broken\" in production mode?\n. Hi @martinhbramwell, thanks for the detail. It's pretty easy to reproduce. I've added an issue over here. This should be okay to close here, I think.\n. Actually, I think that code block a child of the isValid heading? Also, getErrorMessages returns an array, not a string, so the changed example wouldn't work anyway. \ud83d\ude3f \n. This looks good-to-go.\n. This isn't an issue for formsy-react. Opened new issue at https://github.com/twisty/formsy-react-components/issues/92.\nShould be okay to close this here.. This should do it:\njsx\ncomponentDidMount(){\n   this.refs.nameInput.element.focus();\n}\nSee: https://github.com/twisty/formsy-react-components/releases/tag/v0.8.0. The php convention of creating an array when the control names are appended with [] might be something to consider. Although, I can see this getting pretty hairy with Formsy.reset where there are no named keys. Other options might be something like dot notation. \nAlso, in php, the current behaviour (last control with 'name' value clobbers all previous?) is sometimes used for patterns like:\nhtml\n<input type=\"hidden\" name=\"foo\" value=\"my default value\">\n<input type=\"checkbox\" name=\"foo\" checked=\"false\" value=\"my overridden value\">. From the API docs:\njsx\n<MyInputComponent name=\"password\"/>\n<MyInputComponent name=\"repeated_password\" validations=\"equalsField:password\"/>. Hi, isSaving and isDirty aren't part of formsy-react. Can you share some code?. This is probably due to a cut-and-paste from the project Readme (see mention of someDep here). Maybe we should just have a console.log instead? Then the example would run without error.. formsy-react doesn't ship with any form controls, so this is an implementation detail of the input component that you create. So, you can use an uncontrolled input (defaultValue) in your component if you like. Just be sure to call the formsy-react methods setValue and getValue when appropriate.. Is this just a matter of adding || ^16.0.0 to the peerDependencies?\nhttps://github.com/christianalfoni/formsy-react/blob/ebd84bb02613b355a02fd3e3cffb9d6dcd46b500/package.json#L47\nThat should be okay for the upcoming 1.0.x release, but the 0.x releases use mixins \u2013 are they supported in React 16?. The current release of the beta on npm has React v15 listed as a dependency. If you upgrade your app to React v16, two versions of React are loaded and chaos ensues.\nhttps://github.com/christianalfoni/formsy-react/blob/998e2be44f4dcf3c49162244a4ef9e813af6f5c3/package.json\nAs this has already been fixed on the beta branch, is there any word on pushing a new release to npm?. Hi @aliogaili, (Speaking as the maintainer of the formsy-react-components package). I'm not keen to support forks of formsy-react right now.\nI agree the stuttered release pattern of formsy-react is frustrating, especially when we want to test with the latest shiny new React. But there is some nice stuff on the beta branch that seems like it could reboot this project, and I'd like to support that before switching to or otherwise supporting forks.\nNote: I'm not passing any judgment or expressing a preference about any forks here. It's just easier for consumers of formsy-react-components to couple with the formsy-react mothership.. @aliogaili The reason react 15 is getting installed again is that the beta published to npm has react 15 listed as a dependency. It should be a peerDependency. This was fixed on the beta branch over a month ago, but there hasn't been a new beta release pushed to npm since the fix.\n\"I know!\", you might think. \"I'll just install it straight from the github repo!\". Well, this does work, but takes a bit of twiddling. You may not get the built release files (the lib folder doesn't exist in the repo, and for some reason yarn wasn't transcoding them on install, YMMV):\nThis installs the latest version of the beta branch, transcodes the source, then removes any devDependencies.\nsh\nyarn add https://github.com/christianalfoni/formsy-react#beta\ncd ./node_modules/formsy-react\nyarn install\nyarn install --production --ignore-scripts\nI think you'll still get a warning about the react peer dependency, but it should run okay.. Hi @aliogaili, I think technically it's all installed properly, but I think those errors are because the alpha 7 of formsy-react-components doesn't support the tip of the formsy-react beta branch. (It looks like Formsy.Form has gone away).\nI've got an alpha ready to go that fixes this, but would prefer to wait for a new release from this repo.\n I'm not keen on documenting the process of depending on this branch, which won't be fun.\nI'm hesitant to call out the batsignal for @aesopwolf or another maintainer, but it would really help to get a response or an ETA on this.. Is the <Input > that you're using from formsy-react-components? If so, is it from the alpha?. I think @dprentis is right, the formnovalidate attribute is only allowed on submit and image input types. So if it's present on the default button for the form, native validation is skipped. If formnovalidate is not present on the default button, then a novalidate attribute on the form element comes into play.\nFrom what I can see, adding formNoValidate to other inputs (as shown in the API documentation) has no effect.\nNative validation shown:\n<Formsy.Form>\n   <input name=\"foo\" formNoValidate required />\n   <input name=\"submit\" type=\"Submit\" />\n</Formsy.Form>\nNative validation supressed:\n<Formsy.Form>\n   <input name=\"foo\" required />\n   <input name=\"submit\" formNoValidate type=\"Submit\" />\n</Formsy.Form>\n. Yes, that's the way to do it with formNoValidate on a submit button. We should change the docs to show this.\n. There's another case where formNoValidate works:\nxml\n<Formsy.Form>\n   <input type=\"search\" name=\"q\" formNoValidate required />\n</Formsy.Form>\nI think what happens here is that in a form with a single \"texty\" type of input, that element also takes the role of the submit button, so formNoValidate applies and native validation is skipped.\nIn the docs, it maybe worth noting that formsy-react isn't performing any \"special magic\", and provide a link to the html5 spec?\n. Also! Maybe we should whitelist the noValidate attribute on the form element?\n. @colinmccann In FRC, there is a File component. You should use that instead!\nSee release notes for 0.4.0 for a bit more detail.\nThe C:\\fakepath is added by your browser.\n. There's an interesting approach using the -webkit-autofill selector that may be worth examining. See: https://github.com/appsforartists/gravel/commit/d868d68559047199dd53860c874dad9bf9a63cf3\nSee also:\n- https://github.com/facebook/react/issues/1159\n- http://stackoverflow.com/questions/11708092/detecting-browser-autofill/\n- https://github.com/tbosch/autofill-event\n. I suppose it could be technically possible to ditch the required prop, but I think it's there for convenience and discoverability...\nIt's a common UI pattern to present asterisks next to required fields, using the isRequired() function is perhaps \"cleaner\" than inspecting a component's validators to work out if the component is required or not (particularly as presenting a \"required\" indicator in the UI is often separate from presenting other validation errors).\nAlso, as there is a required attribute for HTML5 form controls, developers coming to this library are already likely to be familiar with setting a required attribute separately to other input constraints (specific input types, validations, etc.).\n. Hello there,\nSome good stuff in this release, thanks!\nI've been having trouble getting the multiple error messages to show (code below). The validations seem to be running correctly, but it seems to only return the generic \"fallback\" error message.\n``` javascript\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar Formsy = require('formsy-react');\nvar ValidationTest = React.createClass({\nmixins: [Formsy.Mixin],\n\nrenderErrors() {\n    var errorMessages = this.getErrorMessages() || [];\n    return errorMessages.map((message, key) => {\n          return (\n              <p key={key}>Error: {message}</p>\n        );\n    });\n},\n\nonChange(e) {\n    this.setValue(e.currentTarget.value);\n},\n\nrender() {\n    return (\n        <div>\n            {this.isRequired() ? '* ' : ''}\n            <input\n                type=\"text\"\n                value={this.getValue()}\n                onChange={this.onChange}\n                required={this.props.required}\n            />\n            {this.renderErrors()}\n        </div>\n    );\n}\n\n});\nvar App = React.createClass({\n    render() {\n        return (\n             { console.log(model); }} noValidate>\n                \n\n\n        )\n    }\n});\nReactDOM.render(, document.body);\n```\n. @Semigradsky super!\nHere's an edge case for you! When the component is set as 'required', and the value is empty (i.e showRequired() is true) getErrorMessages() returns [undefined]. It feels like it should return [].\nThe work-around is to check for showRequired() before showing error messages, but the current behaviour doesn't seem intuitive. What do you think?\n. You could just modify the user input before passing it to setValue. Presumably you're calling setValue in an onBlur callback? Something like this could work:\n``` javascript\nvar Url = React.createClass({\nmixins: [Formsy.Mixin],\n\nonChange(e) {\n    this.setState({displayValue: e.currentTarget.value});\n},\n\nonBlur(e) {\n    var value = e.currentTarget.value;\n    if (value.indexOf('http://') !== 0) {\n        value = 'http://' + value;\n    }\n    this.setState({displayValue: value});\n    this.setValue(value);\n},\n\nrender() {\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={this.state.displayValue}\n                onChange={this.onChange}\n                onBlur={this.onBlur}\n            />\n        </div>\n    );\n}\n\n});\n```\n. Hi, validating after blur is possible, delaying running validations until submit isn't possible at the moment.\n- Validate email after blur: #139\n- Add optional prop 'validateOnSubmit' to Form component: #147\nMaybe you could work around this by suppressing the rendering the validation warnings? For example, you could set a property on the form components that dictates whether to render the validation errors, and change this property on onValidSubmit and onInvalidSubmit callback.\n. It's not possible with the currently released version, but will be coming in a future release.\nSee https://github.com/christianalfoni/formsy-react/issues/158.\n. In twisty/formsy-react-components we set a validatePristine property, and then test for it before rendering error messages etc.:\n``` jsx\n    renderErrorMessage: function() {\n        if (!this.showErrors()) {\n            return '';\n        }\n        var errorMessages = this.getErrorMessages() || [];\n        return errorMessages.map((message, key) => {\n            return (\n                {message}\n            );\n        });\n    },\nshowErrors: function() {\n    if (this.isPristine() === true) {\n        if (this.props.validatePristine === false) {\n            return false;\n        }\n    }\n    return (this.isValid() === false);\n}\n\n```\nSee: https://github.com/twisty/formsy-react-components/blob/68d5fb86bdaf9fb2cd8000c51b4269bd8049d3ab/src/mixins/component.js#L51-L70\n. Form Input requires a name property when used\nI think this message could be clearer. For example, you may have an formsy component called Input in the form, but the error could be triggered by any of the other formsy components in the form.\nMaybe the following would be better?\nFormsy components require a name prop\nCan send a PR if you like.\n. I may be wrong, but I think @Semigradsky already has write access to this repo?\nThere is enough improvement to justify a new release, but only @christianalfoni has the power to push releases on npm, and he has no time for formsy-react right now. This looks like a source of frustration that could be eased by adding another owner to the npm project.\nOf course, this is @christianalfoni's project and he is at liberty to do as he wishes! If he has no more interest or time for this, or is unwilling or unable to grant others to push releases on npm, then forking is a natural progression. I'd rather It didn't come to this, though.\nAs for the name, how about formsky-react ;-)\n. Hello there, first thoughts:\n1. Automatic validation:\n   1. validateOnChange: I guess if this is true it would be the same as now, where validation is run on setValue, then it validates all values?\n   2. validateOnInit: If there is going to be a validate method on the form, maybe leaving it to the user to call that in componentWillMount is sufficient? Would that work?\nI think being able to opt-in or opt-out of  'automatic' validation for both scenarios would be okay.\n2. We don't use a component validate function in any of the FRC components, so changing this to customValidate (or similar) looks good to me, especially as this releases the validate function name to (presumably) run validations for that component only. We already have isValidValue, so need some clarification what the intent is here.\nI guess having a way of checking a value for validity at a component-level and returning validation messages (\u00e0 la getErrorMessages()) is missing at the moment.\n3. Yes, seems good. From a user perspective being able to call validate on components and the form as-a-whole is probably an expected use-case.\n. Also see: https://github.com/erikras/redux-form/issues/735\n. I think something like @zimt28's defensive fix is the way to go; changing getValue to return an empty string wouldn't be useful for components that don't expect a \"texty\" type of value.\nIf you're passing the getValue() value directly to your form control element, you could set a defaultProp of '' (empty string) for value in your component?\n. Is this is a warning in both production and development mode? Does it still work on production mode? I'll look into this, of course, but apart from the warning is anything actually \"seriously broken\" in production mode?\n. Hi @martinhbramwell, thanks for the detail. It's pretty easy to reproduce. I've added an issue over here. This should be okay to close here, I think.\n. Actually, I think that code block a child of the isValid heading? Also, getErrorMessages returns an array, not a string, so the changed example wouldn't work anyway. \ud83d\ude3f \n. This looks good-to-go.\n. This isn't an issue for formsy-react. Opened new issue at https://github.com/twisty/formsy-react-components/issues/92.\nShould be okay to close this here.. This should do it:\njsx\ncomponentDidMount(){\n   this.refs.nameInput.element.focus();\n}\nSee: https://github.com/twisty/formsy-react-components/releases/tag/v0.8.0. The php convention of creating an array when the control names are appended with [] might be something to consider. Although, I can see this getting pretty hairy with Formsy.reset where there are no named keys. Other options might be something like dot notation. \nAlso, in php, the current behaviour (last control with 'name' value clobbers all previous?) is sometimes used for patterns like:\nhtml\n<input type=\"hidden\" name=\"foo\" value=\"my default value\">\n<input type=\"checkbox\" name=\"foo\" checked=\"false\" value=\"my overridden value\">. From the API docs:\njsx\n<MyInputComponent name=\"password\"/>\n<MyInputComponent name=\"repeated_password\" validations=\"equalsField:password\"/>. Hi, isSaving and isDirty aren't part of formsy-react. Can you share some code?. This is probably due to a cut-and-paste from the project Readme (see mention of someDep here). Maybe we should just have a console.log instead? Then the example would run without error.. formsy-react doesn't ship with any form controls, so this is an implementation detail of the input component that you create. So, you can use an uncontrolled input (defaultValue) in your component if you like. Just be sure to call the formsy-react methods setValue and getValue when appropriate.. Is this just a matter of adding || ^16.0.0 to the peerDependencies?\nhttps://github.com/christianalfoni/formsy-react/blob/ebd84bb02613b355a02fd3e3cffb9d6dcd46b500/package.json#L47\nThat should be okay for the upcoming 1.0.x release, but the 0.x releases use mixins \u2013 are they supported in React 16?. The current release of the beta on npm has React v15 listed as a dependency. If you upgrade your app to React v16, two versions of React are loaded and chaos ensues.\nhttps://github.com/christianalfoni/formsy-react/blob/998e2be44f4dcf3c49162244a4ef9e813af6f5c3/package.json\nAs this has already been fixed on the beta branch, is there any word on pushing a new release to npm?. Hi @aliogaili, (Speaking as the maintainer of the formsy-react-components package). I'm not keen to support forks of formsy-react right now.\nI agree the stuttered release pattern of formsy-react is frustrating, especially when we want to test with the latest shiny new React. But there is some nice stuff on the beta branch that seems like it could reboot this project, and I'd like to support that before switching to or otherwise supporting forks.\nNote: I'm not passing any judgment or expressing a preference about any forks here. It's just easier for consumers of formsy-react-components to couple with the formsy-react mothership.. @aliogaili The reason react 15 is getting installed again is that the beta published to npm has react 15 listed as a dependency. It should be a peerDependency. This was fixed on the beta branch over a month ago, but there hasn't been a new beta release pushed to npm since the fix.\n\"I know!\", you might think. \"I'll just install it straight from the github repo!\". Well, this does work, but takes a bit of twiddling. You may not get the built release files (the lib folder doesn't exist in the repo, and for some reason yarn wasn't transcoding them on install, YMMV):\nThis installs the latest version of the beta branch, transcodes the source, then removes any devDependencies.\nsh\nyarn add https://github.com/christianalfoni/formsy-react#beta\ncd ./node_modules/formsy-react\nyarn install\nyarn install --production --ignore-scripts\nI think you'll still get a warning about the react peer dependency, but it should run okay.. Hi @aliogaili, I think technically it's all installed properly, but I think those errors are because the alpha 7 of formsy-react-components doesn't support the tip of the formsy-react beta branch. (It looks like Formsy.Form has gone away).\nI've got an alpha ready to go that fixes this, but would prefer to wait for a new release from this repo.\n I'm not keen on documenting the process of depending on this branch, which won't be fun.\nI'm hesitant to call out the batsignal for @aesopwolf or another maintainer, but it would really help to get a response or an ETA on this.. Is the <Input > that you're using from formsy-react-components? If so, is it from the alpha?. ",
    "remisture": "@christianalfoni, when are you planning to release a fix for this?\nhttp://stackoverflow.com/questions/31021922/how-to-disable-html5-validation-in-react-using-formsy-react\n. @christianalfoni, when are you planning to release a fix for this?\nhttp://stackoverflow.com/questions/31021922/how-to-disable-html5-validation-in-react-using-formsy-react\n. ",
    "e-monson": "I have an input field of type 'number' that I want to be able to accept commas. As far as I can tell, neither 'formNoValidate' on the submit button nor 'noValidate' on the Formsy.Form element works to suppress the default validation in this case.\n. Unfortunately, I just tried that, and it didn't work. Not even nativeEvent.stopImmediatePropagation works. I wonder if it's related to https://github.com/facebook/react/issues/1691.\n. I was able to solve the problem by drilling down to the buttons themselves with document.getElementsByClassName and adding a click event listener calling e.preventDefault. Whew!\n. I have an input field of type 'number' that I want to be able to accept commas. As far as I can tell, neither 'formNoValidate' on the submit button nor 'noValidate' on the Formsy.Form element works to suppress the default validation in this case.\n. Unfortunately, I just tried that, and it didn't work. Not even nativeEvent.stopImmediatePropagation works. I wonder if it's related to https://github.com/facebook/react/issues/1691.\n. I was able to solve the problem by drilling down to the buttons themselves with document.getElementsByClassName and adding a click event listener calling e.preventDefault. Whew!\n. ",
    "ordinathorreur": "I was having some difficulty displaying server error messages in a Flux app with an older version of Formsy and upgraded to the latest version to see if anything had changed to make this easier, perhaps by allowing you to set a serverErrors prop on the form itself, much the same way as the current implementation allows you to pass a validationErrors prop.\nTaking a look at the latest code I think the behaviour you're describing here is related to some recent changes. I haven't looked at the recent commits in detail, but I'm guessing this probably happened when the ajax stuff was pulled out.\nLooking through the latest code there are two methods that look to have changed a bit recently: setInputValidationErrors and updateInputsWithError. In fact the comment above the updateInputsWithError no longer seems correct.\nsetInputValidationErrors sets a _serverError object, but this is not used by the getErrorMessage method anymore. This means that the easiest way to display a server error message is to pretend it's a custom local validation error and set the validationErrors prop on the form component. This of course gets blown away as soon as the form gets revalidated.\nI think the old version of Formsy I had used to look at the _serverErrors as well as the _validationErrors hashes in the getErrorMessage method, but it looks like it doesn't do that anymore. I would love to be able to set a serverErrors prop on the form in much the same way as you can now set validationErrors props.\n. Looks good, thanks for this @christianalfoni \nI too think it would be quite useful to be able to set errors that don't actually affect the form's valid/invalid state. The external errors applied to the form are really just async errors; errors you can't check on each local validation cycle. The presence of an external error shouldn't necessarily affect the form's valid state; having an external error that says \"username already taken\" in a signup form shouldn't make the whole form invalid. \nI don't think this functionality is an edge case and writing the code in my own app to implement this looks like it may add a lot of additional overhead/maintenance, something I was hoping a form abstraction library would take away.\nCould it be an idea to pass a prop that lets the form know that the external errors should/shouldn't affect it's validity?\n. I was having some difficulty displaying server error messages in a Flux app with an older version of Formsy and upgraded to the latest version to see if anything had changed to make this easier, perhaps by allowing you to set a serverErrors prop on the form itself, much the same way as the current implementation allows you to pass a validationErrors prop.\nTaking a look at the latest code I think the behaviour you're describing here is related to some recent changes. I haven't looked at the recent commits in detail, but I'm guessing this probably happened when the ajax stuff was pulled out.\nLooking through the latest code there are two methods that look to have changed a bit recently: setInputValidationErrors and updateInputsWithError. In fact the comment above the updateInputsWithError no longer seems correct.\nsetInputValidationErrors sets a _serverError object, but this is not used by the getErrorMessage method anymore. This means that the easiest way to display a server error message is to pretend it's a custom local validation error and set the validationErrors prop on the form component. This of course gets blown away as soon as the form gets revalidated.\nI think the old version of Formsy I had used to look at the _serverErrors as well as the _validationErrors hashes in the getErrorMessage method, but it looks like it doesn't do that anymore. I would love to be able to set a serverErrors prop on the form in much the same way as you can now set validationErrors props.\n. Looks good, thanks for this @christianalfoni \nI too think it would be quite useful to be able to set errors that don't actually affect the form's valid/invalid state. The external errors applied to the form are really just async errors; errors you can't check on each local validation cycle. The presence of an external error shouldn't necessarily affect the form's valid state; having an external error that says \"username already taken\" in a signup form shouldn't make the whole form invalid. \nI don't think this functionality is an edge case and writing the code in my own app to implement this looks like it may add a lot of additional overhead/maintenance, something I was hoping a form abstraction library would take away.\nCould it be an idea to pass a prop that lets the form know that the external errors should/shouldn't affect it's validity?\n. ",
    "th3fallen": "super late on this but i totally agree onValid should be false if the fields are populated by value when the form boots\n. issue was from getValue not returning an empty string \n. Solved it by doing it this way https://gist.github.com/th3fallen/bdf94643fdf57b035cf5f8f251b5b67c\n. (derp) that's because i have to populate it myself.... any updates here? since atm this lib will not work with fiber due to the mixin i suspect. even if this is forked it'd be awesome because currently this lib is preventing me from updating to 15.5.4 :( these updates should allow for me to update. @brandondurham please/thanks. @aesopwolf honestly i'd fork this one if you were going to go that route https://github.com/maccuaa/formsy-react-2. i'd also love to lend a hand. @rkuykendall formsy-react-2 works with 16 atm not sure about this version but i can confirm im using version 2 with react 16 with no issues. @rkuykendall totally agree was just letting you know. super late on this but i totally agree onValid should be false if the fields are populated by value when the form boots\n. issue was from getValue not returning an empty string \n. Solved it by doing it this way https://gist.github.com/th3fallen/bdf94643fdf57b035cf5f8f251b5b67c\n. (derp) that's because i have to populate it myself.... any updates here? since atm this lib will not work with fiber due to the mixin i suspect. even if this is forked it'd be awesome because currently this lib is preventing me from updating to 15.5.4 :( these updates should allow for me to update. @brandondurham please/thanks. @aesopwolf honestly i'd fork this one if you were going to go that route https://github.com/maccuaa/formsy-react-2. i'd also love to lend a hand. @rkuykendall formsy-react-2 works with 16 atm not sure about this version but i can confirm im using version 2 with react 16 with no issues. @rkuykendall totally agree was just letting you know. ",
    "sallomendo": "Sure, here is the input code:\n``` javascript\nlet AddressInput = React.createClass({\ndisplayName: 'AddressInput',\nmixins: [FormsyMixin],\ncomponentDidMount () {\n    let Google = require('google');\n    let input = this.refs[this.props.name].getDOMNode();\n    let autocomplete = new Google.maps.places.Autocomplete(input, {\n      types: ['geocode']\n    });\nGoogle.maps.event.addListener(autocomplete, 'place_changed', this.handlePlaceChange.bind(this, autocomplete));\n\n},\nhandlePlaceChange (autocomplete) {\n    let place = autocomplete.getPlace();\n    let lat = place.geometry.location.lat();\n    let lng = place.geometry.location.lng();\n    let address = this.refs[this.props.name].getDOMNode().value;\nthis.setValue({\n  lng: lng,\n  lat: lat,\n  address: address\n});\n\n},\ncleanAddress () {\n    this.setValue({\n      lng: '',\n      lat: '',\n      address: ''\n    });\n  },\nrender () {\n    return (\n      \n;\n      \n    );\n  }\n});\n```\nThis is how I'm trying to to call it:\njavascript\n<Address name=\"place\"\n         value={{ lng: \"\", lat: \"\", address: \"\" }}\n         className=\"outlined-input\"\n         placeholder=\"Address\"\n         validations=\"isAddress\"\n         {...this.props} required />\nAnd the validation method:\njavascript\nFormsy.addValidationRule('isAddress', function(values, value) {\n  if ( value.lng === \"\" || value.lat === \"\" || value.address === \"\" ) {\n    return false;\n  } else {\n    return true;\n  };\n});\n. I don't think thats the problem man, even this code don't work: \n``` javascript\nconst AddressInput = React.createClass({\ndisplayName: 'AddressInput',\nmixins: [FormsyMixin],\nrender () {\n    return (\n      \n;\n      \n    );\n  }\n});\n```\nI get Uncaught RangeError: Maximum call stack size exceeded\n. Versions: react@0.13.2 and formsy-react@0.12.6\nBrowser: Google Chrome\nI tried to make it work in a isolated code and got the same result, I think it have something to do with the onValid and onInvalid callbacks, I console.log in those function and it seems they are being called in a loop.\n``` javascript\nvar React = require('react');\nvar Formsy = require('./formsy-react/src/main.js');\nFormsy.addValidationRule('isAddress', function (values, value) {\n  if (value.lng === \"\" || value.lat === \"\" || value.address === \"\") {\n    return false;\n  } else {\n    return true;\n  };\n});\nvar Input = React.createClass({\nmixins: [Formsy.Mixin],\nrender: function () {\n    return \n  }\n});\nvar FormApp = React.createClass({\n  getInitialState: function () {\n    return {\n      canSubmit: false\n    };\n  },\nenableButton: function () {\n    console.log(\"Enabling Button\");\nthis.setState({\n  canSubmit: true\n});\n\n},\ndisableButton: function () {\n    console.log(\"Disabling Button\");\nthis.setState({\n  canSubmit: false\n});\n\n},\nsubmit: function (values) {\n},\ngetAddressModel: function () {\n    return {\n      lat: \"\",\n      lng: \"\",\n      address: \"\"\n    };\n  },\nrender: function () {\n    return (\n      \n \n\n    );\n  }\n});\nReact.render(, document.getElementById('app'));\n```\n. Thanks a lot man, I was going crazy about this. I need to try it now\n. For some reason I'm having the same results, even with the new version, exactly with the code I pasted above. Any suggestions?\n. @christianalfoni It's working! thanks a lot for this great library :+1:\n. Sure, here is the input code:\n``` javascript\nlet AddressInput = React.createClass({\ndisplayName: 'AddressInput',\nmixins: [FormsyMixin],\ncomponentDidMount () {\n    let Google = require('google');\n    let input = this.refs[this.props.name].getDOMNode();\n    let autocomplete = new Google.maps.places.Autocomplete(input, {\n      types: ['geocode']\n    });\nGoogle.maps.event.addListener(autocomplete, 'place_changed', this.handlePlaceChange.bind(this, autocomplete));\n\n},\nhandlePlaceChange (autocomplete) {\n    let place = autocomplete.getPlace();\n    let lat = place.geometry.location.lat();\n    let lng = place.geometry.location.lng();\n    let address = this.refs[this.props.name].getDOMNode().value;\nthis.setValue({\n  lng: lng,\n  lat: lat,\n  address: address\n});\n\n},\ncleanAddress () {\n    this.setValue({\n      lng: '',\n      lat: '',\n      address: ''\n    });\n  },\nrender () {\n    return (\n      \n;\n      \n    );\n  }\n});\n```\nThis is how I'm trying to to call it:\njavascript\n<Address name=\"place\"\n         value={{ lng: \"\", lat: \"\", address: \"\" }}\n         className=\"outlined-input\"\n         placeholder=\"Address\"\n         validations=\"isAddress\"\n         {...this.props} required />\nAnd the validation method:\njavascript\nFormsy.addValidationRule('isAddress', function(values, value) {\n  if ( value.lng === \"\" || value.lat === \"\" || value.address === \"\" ) {\n    return false;\n  } else {\n    return true;\n  };\n});\n. I don't think thats the problem man, even this code don't work: \n``` javascript\nconst AddressInput = React.createClass({\ndisplayName: 'AddressInput',\nmixins: [FormsyMixin],\nrender () {\n    return (\n      \n;\n      \n    );\n  }\n});\n```\nI get Uncaught RangeError: Maximum call stack size exceeded\n. Versions: react@0.13.2 and formsy-react@0.12.6\nBrowser: Google Chrome\nI tried to make it work in a isolated code and got the same result, I think it have something to do with the onValid and onInvalid callbacks, I console.log in those function and it seems they are being called in a loop.\n``` javascript\nvar React = require('react');\nvar Formsy = require('./formsy-react/src/main.js');\nFormsy.addValidationRule('isAddress', function (values, value) {\n  if (value.lng === \"\" || value.lat === \"\" || value.address === \"\") {\n    return false;\n  } else {\n    return true;\n  };\n});\nvar Input = React.createClass({\nmixins: [Formsy.Mixin],\nrender: function () {\n    return \n  }\n});\nvar FormApp = React.createClass({\n  getInitialState: function () {\n    return {\n      canSubmit: false\n    };\n  },\nenableButton: function () {\n    console.log(\"Enabling Button\");\nthis.setState({\n  canSubmit: true\n});\n\n},\ndisableButton: function () {\n    console.log(\"Disabling Button\");\nthis.setState({\n  canSubmit: false\n});\n\n},\nsubmit: function (values) {\n},\ngetAddressModel: function () {\n    return {\n      lat: \"\",\n      lng: \"\",\n      address: \"\"\n    };\n  },\nrender: function () {\n    return (\n      \n \n\n    );\n  }\n});\nReact.render(, document.getElementById('app'));\n```\n. Thanks a lot man, I was going crazy about this. I need to try it now\n. For some reason I'm having the same results, even with the new version, exactly with the code I pasted above. Any suggestions?\n. @christianalfoni It's working! thanks a lot for this great library :+1:\n. ",
    "worklez": "I've verified that all \"Rules\" tests fail when changing componentWillMount to componentDidMount, so apparently this is not an option.\n. Hi Christian,\nThank you for the suggestion and looking into this! Jest already includes\njsdom, and other UI tests (also React-based, but without Formsy.Mixin) pass\nfine.\n2015-04-24 11:59 GMT+06:00 Christian Alfoni notifications@github.com:\n\nHi there,\nWhen testing React and Formsy in Node you need to load up JSDOM. At least\ncurrently. This is also required by other libraries so please do something\nlike this in your test setup:\nvar jsdom = require(\"jsdom\").jsdom;global.document = jsdom();global.window = document.defaultView;global.navigator = global.window.navigator;\nI am releasing a new test suite with Formsy today that uses this setup.\nYou can check that out for more inspiration :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95810535\n.\n. I am running node 0.10.35.\n\n2015-04-24 12:49 GMT+06:00 Christian Alfoni notifications@github.com:\n\n@worklez https://github.com/worklez\nWhat verison of Node are you running? Seems that Jest does not support\n0.12? Trying version 0.10.25, but getting an error there too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95823626\n.\n. Thank you for the investigation. Will try moving the require out in the full testcase.\n. @christianalfoni Thanks! I've refactored tests and they pass now. I wanted to keep things local requiring needed deps and setting mocks up in it blocks, but having common requires works for me too.\nStill interesting what is the cause of the issue though.\n. I do actually use JSX in tests, just wanted to keep the example small without transpiler configuration.\nRequiring inside it and calling LoginPage() directly gives React warning about factories and an exception:\n\n- TypeError: Cannot read property '__reactAutoBindMap' of undefined\n        at Constructor (node_modules/react/lib/ReactClass.js:842:15)\n        at Spec.<anonymous> (__tests__/LoginPage-test.js:8:54)\n        at jasmine.Block.execute (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:1065:17)\n        at jasmine.Queue.next_ (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:2098:31)\n        at null._onTimeout (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:2088:18)\n        at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n. I've verified that all \"Rules\" tests fail when changing componentWillMount to componentDidMount, so apparently this is not an option.\n. Hi Christian,\nThank you for the suggestion and looking into this! Jest already includes\njsdom, and other UI tests (also React-based, but without Formsy.Mixin) pass\nfine.\n2015-04-24 11:59 GMT+06:00 Christian Alfoni notifications@github.com:\n\nHi there,\nWhen testing React and Formsy in Node you need to load up JSDOM. At least\ncurrently. This is also required by other libraries so please do something\nlike this in your test setup:\nvar jsdom = require(\"jsdom\").jsdom;global.document = jsdom();global.window = document.defaultView;global.navigator = global.window.navigator;\nI am releasing a new test suite with Formsy today that uses this setup.\nYou can check that out for more inspiration :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95810535\n.\n. I am running node 0.10.35.\n\n2015-04-24 12:49 GMT+06:00 Christian Alfoni notifications@github.com:\n\n@worklez https://github.com/worklez\nWhat verison of Node are you running? Seems that Jest does not support\n0.12? Trying version 0.10.25, but getting an error there too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/107#issuecomment-95823626\n.\n. Thank you for the investigation. Will try moving the require out in the full testcase.\n. @christianalfoni Thanks! I've refactored tests and they pass now. I wanted to keep things local requiring needed deps and setting mocks up in it blocks, but having common requires works for me too.\nStill interesting what is the cause of the issue though.\n. I do actually use JSX in tests, just wanted to keep the example small without transpiler configuration.\nRequiring inside it and calling LoginPage() directly gives React warning about factories and an exception:\n\n- TypeError: Cannot read property '__reactAutoBindMap' of undefined\n        at Constructor (node_modules/react/lib/ReactClass.js:842:15)\n        at Spec.<anonymous> (__tests__/LoginPage-test.js:8:54)\n        at jasmine.Block.execute (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:1065:17)\n        at jasmine.Queue.next_ (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:2098:31)\n        at null._onTimeout (node_modules/jest-cli/vendor/jasmine/jasmine-1.3.0.js:2088:18)\n        at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n. ",
    "pnuzhdin": "+1 it affects me too!\n. +1 it affects me too!\n. ",
    "erwanjegouzo": "sure, I'll work on that!\n. sure, I'll work on that!\n. ",
    "binarykitchen": "sure, fair enough, all that is very nice ... but using type='email' can save you some code\n. Well, I already do, sort of, but nested:\njsx\n<Formsy.Form>\n  <Row>\n    <MyInputElement/>\n  </Row>\n</Formsy.Form>\nis this supported?\n. I already do in a parent element.\n. ah, that is very unfortunate :(\n. alright, i ll have to search for another react form validation library for now or go with the native setCustomValidity() ...\n. sure, fair enough, all that is very nice ... but using type='email' can save you some code\n. Well, I already do, sort of, but nested:\njsx\n<Formsy.Form>\n  <Row>\n    <MyInputElement/>\n  </Row>\n</Formsy.Form>\nis this supported?\n. I already do in a parent element.\n. ah, that is very unfortunate :(\n. alright, i ll have to search for another react form validation library for now or go with the native setCustomValidity() ...\n. ",
    "morenoh149": "I want mobile browsers to not suggest a leading uppercase character. I passing type=\"email\" avoids this.\n. @Jareechang I'd submit a quick PR and link here a gist. I'm sure 20 other folks would appreciate it even if the maintainers choose never to change the readme. Sadly I've lost the context I had when I opened this issue \ud83d\ude1b . With the announced changes in v16 this will become a more pressing topic https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html. I have not found a solution. I have had to make my component stateful and append any non_field_error to the component's state. Then in the render block I do\nrender() {\n  const flashError = this.state.errors.map((e) => <div class=\"error\">{e.message}</div>);\n  return (\n    {flashError}\n    ...\n  )\n}\nI feel like this is a common enough problem (not my solution necessarily) that it bears adding to the formsy examples.. right, fundamentally formsy attempts to map an error to an input. But we are currently handling errors that don't map to any particular input. It'd be great to get some guidance on this usecase from the authors.. I want mobile browsers to not suggest a leading uppercase character. I passing type=\"email\" avoids this.\n. @Jareechang I'd submit a quick PR and link here a gist. I'm sure 20 other folks would appreciate it even if the maintainers choose never to change the readme. Sadly I've lost the context I had when I opened this issue \ud83d\ude1b . With the announced changes in v16 this will become a more pressing topic https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html. I have not found a solution. I have had to make my component stateful and append any non_field_error to the component's state. Then in the render block I do\nrender() {\n  const flashError = this.state.errors.map((e) => <div class=\"error\">{e.message}</div>);\n  return (\n    {flashError}\n    ...\n  )\n}\nI feel like this is a common enough problem (not my solution necessarily) that it bears adding to the formsy examples.. right, fundamentally formsy attempts to map an error to an input. But we are currently handling errors that don't map to any particular input. It'd be great to get some guidance on this usecase from the authors.. ",
    "anavarro9731": "Great news. I have just encountered the problem as well with the \"multi-step/wizard\" control I am building (each step as its own control). formsy is fantastic BTW really fills a much needed gap IMO\n. Right now I am having to create loads of custom validations to support both the required and optional scenario. Take for example the maxLength validation. I can't use that when the field is optional. I am creating a maxLengthOnOptionalField validator. I'd much rather do \" required validations=\"maxLength:50\" \"and have that run only when the users has put something in the field. And while maxLength works fine for required fields it kind of makes the required attribute redundant since maxLength implicitly requires a value\n. Yeah great, I found the logic up above doesn't actually work anyway.\n. Great news. I have just encountered the problem as well with the \"multi-step/wizard\" control I am building (each step as its own control). formsy is fantastic BTW really fills a much needed gap IMO\n. Right now I am having to create loads of custom validations to support both the required and optional scenario. Take for example the maxLength validation. I can't use that when the field is optional. I am creating a maxLengthOnOptionalField validator. I'd much rather do \" required validations=\"maxLength:50\" \"and have that run only when the users has put something in the field. And while maxLength works fine for required fields it kind of makes the required attribute redundant since maxLength implicitly requires a value\n. Yeah great, I found the logic up above doesn't actually work anyway.\n. ",
    "ziflex": "Same here :(\n. @Semigradsky each pattern has its own message.\n. Same here :(\n. @Semigradsky each pattern has its own message.\n. ",
    "sanemat": "@christianalfoni @Semigradsky v0.13.1 works fine :smile:\nThanks!\n. @Semigradsky \nI have a question.\nThis pull request's behavior\n```\n\n//valid\n'sup'\n//invalid\n'hi', 'foo bar', undefined, null, ''\n```\nBut I think this is expected. What do you think?\n```\n// no-required\n\n//valid\n'sup', ''\n//invalid\n'hi', 'foo bar', undefined, null\n// --------\n// required\n\n//valid\n'sup'\n//invalid\n'hi', 'foo bar', undefined, null, ''\n```\n. > Length of empty string is not 3 ;)\nMy question is unclear. Sorry. Length of empty string is not 3.\n. @christianalfoni @Semigradsky v0.13.1 works fine :smile:\nThanks!\n. @Semigradsky \nI have a question.\nThis pull request's behavior\n```\n\n//valid\n'sup'\n//invalid\n'hi', 'foo bar', undefined, null, ''\n```\nBut I think this is expected. What do you think?\n```\n// no-required\n\n//valid\n'sup', ''\n//invalid\n'hi', 'foo bar', undefined, null\n// --------\n// required\n\n//valid\n'sup'\n//invalid\n'hi', 'foo bar', undefined, null, ''\n```\n. > Length of empty string is not 3 ;)\nMy question is unclear. Sorry. Length of empty string is not 3.\n. ",
    "mloginov": "Thanks! Will try.\n. Thanks! Will try.\n. ",
    "tomaash": "Yes, exactly. Having the values in markup is not sufficient, I need to set them during runtime. Of course, api can be different. For example, there could be a new method called \"setValues\" or something. But passing argument to reset felt natural enough to me.\n. \n. @christianalfoni can we merge this please? I already had to pull upstream to have some other bugs fixed in my brach. I'd really prefer to have this change there. Thanks..\n. Cool, thanks!\n. It works for me, but I did not try in the latest version. Also, check if your formsy inputs are sane, and if render method gets called properly.\n. I'd try to debug formsy-material-ui, their inputs might rely on some other mechanism to re-render. \n. @vijayrawatsan How about executing resetForm earlier, for example in componentWillReceiveProps or componentWillMount ? If this does not help try another formsy inputs. If this does not help, try it with https://github.com/twisty/formsy-react-components or with the sample input from initial documentation - if those works, you can track down the difference or make your own component from it and restyle it. \n. That was quite an omission there. Good job! :+1:\n. Yes, exactly. Having the values in markup is not sufficient, I need to set them during runtime. Of course, api can be different. For example, there could be a new method called \"setValues\" or something. But passing argument to reset felt natural enough to me.\n. \n. @christianalfoni can we merge this please? I already had to pull upstream to have some other bugs fixed in my brach. I'd really prefer to have this change there. Thanks..\n. Cool, thanks!\n. It works for me, but I did not try in the latest version. Also, check if your formsy inputs are sane, and if render method gets called properly.\n. I'd try to debug formsy-material-ui, their inputs might rely on some other mechanism to re-render. \n. @vijayrawatsan How about executing resetForm earlier, for example in componentWillReceiveProps or componentWillMount ? If this does not help try another formsy inputs. If this does not help, try it with https://github.com/twisty/formsy-react-components or with the sample input from initial documentation - if those works, you can track down the difference or make your own component from it and restyle it. \n. That was quite an omission there. Good job! :+1:\n. ",
    "vijayrawatsan": "I tried this.refs.form.reset(model). Value passed in the model does attach to textfields but it does not reflect in the ui.\n. I am using formsy-react 0.14.1 & formsy-material-ui 0.2.2\njavascript\ncomponentDidMount: function(nextProps) {\n        this.resetForm({\n            'name': 'asd',\n            'email': 'asd@asd.com'\n        });\n    },\nresetForm: function (model) {\n        this.refs.form.reset(model);\n    },\nsubmitForm: function (model) {\n        console.log(model);\n    }\nWhen I submit I could see asd and asd@asd.com, but I can not see the value in the form itself.\n. @tomaash Thanks :+1: \n. By the way, is there any other hackish way of prefilling the values? I am kind of on a strict timeline.\n. @tomaash I solved it in formsy-material-ui. https://github.com/mbrookes/formsy-material-ui/pull/10/files\nThanks a lot for the help. :santa: \n. Please look into https://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\n. I used https://github.com/mbrookes/formsy-material-ui \nWe have solved most of the issues there.\n. @ciaoben \nThis might help.\nhttps://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\nMost of my issues were resolved using the solution in this link.\n. I tried this.refs.form.reset(model). Value passed in the model does attach to textfields but it does not reflect in the ui.\n. I am using formsy-react 0.14.1 & formsy-material-ui 0.2.2\njavascript\ncomponentDidMount: function(nextProps) {\n        this.resetForm({\n            'name': 'asd',\n            'email': 'asd@asd.com'\n        });\n    },\nresetForm: function (model) {\n        this.refs.form.reset(model);\n    },\nsubmitForm: function (model) {\n        console.log(model);\n    }\nWhen I submit I could see asd and asd@asd.com, but I can not see the value in the form itself.\n. @tomaash Thanks :+1: \n. By the way, is there any other hackish way of prefilling the values? I am kind of on a strict timeline.\n. @tomaash I solved it in formsy-material-ui. https://github.com/mbrookes/formsy-material-ui/pull/10/files\nThanks a lot for the help. :santa: \n. Please look into https://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\n. I used https://github.com/mbrookes/formsy-material-ui \nWe have solved most of the issues there.\n. @ciaoben \nThis might help.\nhttps://github.com/christianalfoni/formsy-react/wiki/validate-on-blur\nMost of my issues were resolved using the solution in this link.\n. ",
    "utkuturunc": "@tomaash I am having a very similar issue to @vijayrawatsan. I added getValue() and setValue(), but event the simplest custom input component of mine is doing this.\nIf I reset a form, all boxes in the ui gets emptied. Then when I type on any one of the inputs, all other fields get set to correct reset values.\nIf I reset the form in setTimeout, fields blink for a moment but they get the correct values in.\nThe problem is \nIf I want to reset to an empty form (create forms) resetting in timeout will not work.\nIf I want to reset to initial values (update forms) resetting outside timeout will not work.\nHaving both of them makes the form very unstable.\nEither way I don't want to have timeout as a workaround.\n. +1\n. +1\n. I would like to change pristine values of a form. This would help me.\n. @tomaash I am having a very similar issue to @vijayrawatsan. I added getValue() and setValue(), but event the simplest custom input component of mine is doing this.\nIf I reset a form, all boxes in the ui gets emptied. Then when I type on any one of the inputs, all other fields get set to correct reset values.\nIf I reset the form in setTimeout, fields blink for a moment but they get the correct values in.\nThe problem is \nIf I want to reset to an empty form (create forms) resetting in timeout will not work.\nIf I want to reset to initial values (update forms) resetting outside timeout will not work.\nHaving both of them makes the form very unstable.\nEither way I don't want to have timeout as a workaround.\n. +1\n. +1\n. I would like to change pristine values of a form. This would help me.\n. ",
    "cdeutsch": "No worries. \nYes, I meant aggressive from a UX perspective.\nI ended up forking it for my use case (didn't finish re-doing the tests yes, FYI, for anybody who finds it).\nhttps://github.com/crdeutsch/formsy-react/commits/f9c1d418cea488e65b19a97e1ee6cc6c6d188193\nI leave it up to the Component to implement a getValue function so you can chose whether using the Input's actual value as the \"state\" makes sense to you or not.\nA simple example:\njs\nvar TestInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function () {\n    return <input {...this.props}/>\n  },\n  getValue: function() {\n    return this.isMounted() ? this.getDOMNode().value : '';\n  }\n});\nThe addon class I use (defaults to Bootstrap styling):\nhttps://gist.github.com/crdeutsch/f953400daae0a739659a\nFor my use case using the DOM node as the \"source of truth\" is the only option. I tried it the other way for over a day in a real world app and there were too many edge cases where the inputs would get out of sync or the error message is displayed at the wrong time.\nIdeally I need a clean way to validate \"on submit\".  I went back and tried your example but it doesn't show the message if you submit a clean form with required fields. If I update it to handle that case, the error won't go away when I use \"enter\" to submit the form because the input doesn't blur. So I'd have to add more logic to check for keypresses and at that point it just seems like way too much effort to duplicate the experience of validating \"on submit\".\nAs for it breaking the principles of React, the React team recognizes Input components are unique, which is why there is a defaultValue and not just a value\nhttps://facebook.github.io/react/docs/forms.html#uncontrolled-components\nHere's the Component I was trying to use:\nhttps://gist.github.com/crdeutsch/490103d3610a5ce9f42d\nThe amount of logic vs my fork just keeps growing.\njs\n<Formsy.Form key=\"linkForm\" onValidSubmit={self._onSubmit}>\n  <Formsy.Input className=\"form-control\"\n                ref=\"url\"\n                name=\"url\"\n                type=\"text\"\n                placeholder=\"Enter Issue Url\"\n                validationErrors={{isRequired: \"Url is required.\", isUrl: \"Url is not valid.\"}}\n                validations=\"isRequired,isUrl\" \n                />\n  <div className=\"btn-groups\">\n    <button type=\"submit\" className=\"btn btn-primary\" ref=\"linkBtn\">Create</button>\n  </div>\n</Formsy.Form>\n. No worries. \nYes, I meant aggressive from a UX perspective.\nI ended up forking it for my use case (didn't finish re-doing the tests yes, FYI, for anybody who finds it).\nhttps://github.com/crdeutsch/formsy-react/commits/f9c1d418cea488e65b19a97e1ee6cc6c6d188193\nI leave it up to the Component to implement a getValue function so you can chose whether using the Input's actual value as the \"state\" makes sense to you or not.\nA simple example:\njs\nvar TestInput = React.createClass({\n  mixins: [Formsy.Mixin],\n  render: function () {\n    return <input {...this.props}/>\n  },\n  getValue: function() {\n    return this.isMounted() ? this.getDOMNode().value : '';\n  }\n});\nThe addon class I use (defaults to Bootstrap styling):\nhttps://gist.github.com/crdeutsch/f953400daae0a739659a\nFor my use case using the DOM node as the \"source of truth\" is the only option. I tried it the other way for over a day in a real world app and there were too many edge cases where the inputs would get out of sync or the error message is displayed at the wrong time.\nIdeally I need a clean way to validate \"on submit\".  I went back and tried your example but it doesn't show the message if you submit a clean form with required fields. If I update it to handle that case, the error won't go away when I use \"enter\" to submit the form because the input doesn't blur. So I'd have to add more logic to check for keypresses and at that point it just seems like way too much effort to duplicate the experience of validating \"on submit\".\nAs for it breaking the principles of React, the React team recognizes Input components are unique, which is why there is a defaultValue and not just a value\nhttps://facebook.github.io/react/docs/forms.html#uncontrolled-components\nHere's the Component I was trying to use:\nhttps://gist.github.com/crdeutsch/490103d3610a5ce9f42d\nThe amount of logic vs my fork just keeps growing.\njs\n<Formsy.Form key=\"linkForm\" onValidSubmit={self._onSubmit}>\n  <Formsy.Input className=\"form-control\"\n                ref=\"url\"\n                name=\"url\"\n                type=\"text\"\n                placeholder=\"Enter Issue Url\"\n                validationErrors={{isRequired: \"Url is required.\", isUrl: \"Url is not valid.\"}}\n                validations=\"isRequired,isUrl\" \n                />\n  <div className=\"btn-groups\">\n    <button type=\"submit\" className=\"btn btn-primary\" ref=\"linkBtn\">Create</button>\n  </div>\n</Formsy.Form>\n. ",
    "esseguin": "Good call. I just added some tests, which exposed another issue where the error would happen if a was an object but b was null. I put in a fix for that too.\n. Good call. I just added some tests, which exposed another issue where the error would happen if a was an object but b was null. I put in a fix for that too.\n. ",
    "ntucker": "@christianalfoni that sounds good, for now it would be nice to have the keypath as @kristian-puccio described, as that would make this usable until React 0.14. Something to go with that might also be a context manager like Handlebar.js's with, as well as path (parent) navigation with .. Of course that last thing is a nicety, but having SOME way of doing nesting is very necessary right now.\n. Here's my quick hack to get nesting working that transforms . paths. It's very quick so probably needs some optimizations before inclusion. If you want I can polish it and create a PR.\njs\n    for (let k in model) {\n      if (k.indexOf(\".\") >= 0) {\n        let parts = k.split(\".\")\n        let cur = model\n        for (let part of parts.slice(0, -1)) {\n          if (cur[part] === undefined) {\n            cur[part] = {}\n          }\n          cur = cur[part]\n        }\n        cur[parts[parts.length-1]] = model[k]\n        delete model[k]\n      }\n    }\n. FYI: trying to figure out how to work with arrays now. My sample code doesn't work with them currently, though I'm not sure this library is built for it at all given you can't hold state externally.\nI don't think the disallowment of managed values is a good idea - how do I add something to a list when I can't push state down via props?\n. this won't work on arrays I don't think; since model[key] will be a string\n. The structure could be an array, and y ou need to refer to that in name.\ni.e.,\n{nav_items: [{a:b, c:d}, {a:f, c:g}]}\nPS) This doesn't seem to be called with onChange event? currentValues seesm unaltered\n. That's exactly my point. This doesn't allow working with a very common use case. Even tcomb-form has built in list support ableit with a terrible UI and convoluted api.\n. http://gcanti.github.io/resources/tcomb-form/playground/playground.html select 'lists' in the dropdown on the left\n. I am currently using a + to refer to an item in an Array. aka) name=\"nav_items.+.a\"\nAfter further pursuit, I found my initial suggestion (below) leads to ambiguity as to where in the nested hierarchy the array lives, which led me to my current + version\nMultiple inputs with the same name are supported - their extracted data will always be contained in an Array when they have some submittable data, with the exception of a group of radio buttons all having the same name, which will return the selected value only.\n. Do you mean?\n```\n< MyInput name=\"addresses[0][street]\" value=\"Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"Different Street\"/>\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\n```\n. Yup, that's fixed now, thx :)\n. @christianalfoni that sounds good, for now it would be nice to have the keypath as @kristian-puccio described, as that would make this usable until React 0.14. Something to go with that might also be a context manager like Handlebar.js's with, as well as path (parent) navigation with .. Of course that last thing is a nicety, but having SOME way of doing nesting is very necessary right now.\n. Here's my quick hack to get nesting working that transforms . paths. It's very quick so probably needs some optimizations before inclusion. If you want I can polish it and create a PR.\njs\n    for (let k in model) {\n      if (k.indexOf(\".\") >= 0) {\n        let parts = k.split(\".\")\n        let cur = model\n        for (let part of parts.slice(0, -1)) {\n          if (cur[part] === undefined) {\n            cur[part] = {}\n          }\n          cur = cur[part]\n        }\n        cur[parts[parts.length-1]] = model[k]\n        delete model[k]\n      }\n    }\n. FYI: trying to figure out how to work with arrays now. My sample code doesn't work with them currently, though I'm not sure this library is built for it at all given you can't hold state externally.\nI don't think the disallowment of managed values is a good idea - how do I add something to a list when I can't push state down via props?\n. this won't work on arrays I don't think; since model[key] will be a string\n. The structure could be an array, and y ou need to refer to that in name.\ni.e.,\n{nav_items: [{a:b, c:d}, {a:f, c:g}]}\nPS) This doesn't seem to be called with onChange event? currentValues seesm unaltered\n. That's exactly my point. This doesn't allow working with a very common use case. Even tcomb-form has built in list support ableit with a terrible UI and convoluted api.\n. http://gcanti.github.io/resources/tcomb-form/playground/playground.html select 'lists' in the dropdown on the left\n. I am currently using a + to refer to an item in an Array. aka) name=\"nav_items.+.a\"\nAfter further pursuit, I found my initial suggestion (below) leads to ambiguity as to where in the nested hierarchy the array lives, which led me to my current + version\nMultiple inputs with the same name are supported - their extracted data will always be contained in an Array when they have some submittable data, with the exception of a group of radio buttons all having the same name, which will return the selected value only.\n. Do you mean?\n```\n< MyInput name=\"addresses[0][street]\" value=\"Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"Different Street\"/>\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\n```\n. Yup, that's fixed now, thx :)\n. ",
    "LeoIannacone": "Thank @ntucker !\n@christianalfoni can you please look at it? nesting forms are really useful in many many scenario...\n. We are actually using this implementation in production. Looks working very well, what you have to do is just have a \"global Promise\" object.\nWe are using: https://polyfill.io/v2/docs/\nA simple async validation should return the Promise.. Thank @ntucker !\n@christianalfoni can you please look at it? nesting forms are really useful in many many scenario...\n. We are actually using this implementation in production. Looks working very well, what you have to do is just have a \"global Promise\" object.\nWe are using: https://polyfill.io/v2/docs/\nA simple async validation should return the Promise.. ",
    "ivome": "Here is a mapping function I wrote to support object and array values. It has a dependency on lodash atm. \nNot tested much yet, but could be used as an idea: \n``` javascript\n    /*\n     * Maps the input values into a complex object\n     * Notation for value names:\n     *\n     * myobject[property]\n     * myobject[test][] -> array value\n     * myobject[nestedobject][otherproperty]\n     *\n     * @param {Array} inputs\n     * @return {Object}\n     /\n    mapInputsToValue: function(inputs){\n        var values = {};\n        _.each(inputs, function(value, key){\n            var currentIndex = 0;\n            var objectPath = [];\n            // Iterate through the whole part of the obejct\n            var foundPosition = key.indexOf(']', currentIndex);\n        // We have simple value\n        if (foundPosition === -1){\n            values[key] = value;\n        } else {\n            // Add complex object\n            var openingBracket = key.indexOf('[');\n            if (openingBracket <= 0){\n                throw new Error('Invalid name for input field: ' + key);\n            } else {\n                objectPath.push(key.substring(0, openingBracket));\n            }\n\n            // We have object property\n            while (foundPosition !== -1){\n                // Get current attribute name\n                var attributeName = _.last(key.substring(0, foundPosition).split('['));\n                objectPath.push(attributeName);\n\n                foundPosition = key.indexOf(']', foundPosition + 1);\n            }\n\n            // Get object property\n            var obj = values;\n            for (var i = 0; i < objectPath.length - 1; i++) {\n                var n = objectPath[i];\n                if (n in obj) {\n                    obj = obj[n];\n                } else {\n                    obj[n] = {};\n                    obj = obj[n];\n                }\n            }\n            obj[objectPath[objectPath.length - 1]] = value;\n        }\n    });\n    return values;\n}\n\n```\n. Seems to be along the lines of #120 If we would have something like form nesting, we could organize the components way better. \n. Here is a mapping function I wrote to support object and array values. It has a dependency on lodash atm. \nNot tested much yet, but could be used as an idea: \n``` javascript\n    /*\n     * Maps the input values into a complex object\n     * Notation for value names:\n     *\n     * myobject[property]\n     * myobject[test][] -> array value\n     * myobject[nestedobject][otherproperty]\n     *\n     * @param {Array} inputs\n     * @return {Object}\n     /\n    mapInputsToValue: function(inputs){\n        var values = {};\n        _.each(inputs, function(value, key){\n            var currentIndex = 0;\n            var objectPath = [];\n            // Iterate through the whole part of the obejct\n            var foundPosition = key.indexOf(']', currentIndex);\n        // We have simple value\n        if (foundPosition === -1){\n            values[key] = value;\n        } else {\n            // Add complex object\n            var openingBracket = key.indexOf('[');\n            if (openingBracket <= 0){\n                throw new Error('Invalid name for input field: ' + key);\n            } else {\n                objectPath.push(key.substring(0, openingBracket));\n            }\n\n            // We have object property\n            while (foundPosition !== -1){\n                // Get current attribute name\n                var attributeName = _.last(key.substring(0, foundPosition).split('['));\n                objectPath.push(attributeName);\n\n                foundPosition = key.indexOf(']', foundPosition + 1);\n            }\n\n            // Get object property\n            var obj = values;\n            for (var i = 0; i < objectPath.length - 1; i++) {\n                var n = objectPath[i];\n                if (n in obj) {\n                    obj = obj[n];\n                } else {\n                    obj[n] = {};\n                    obj = obj[n];\n                }\n            }\n            obj[objectPath[objectPath.length - 1]] = value;\n        }\n    });\n    return values;\n}\n\n```\n. Seems to be along the lines of #120 If we would have something like form nesting, we could organize the components way better. \n. ",
    "chrbala": "I'd like to add my voice on the array issue.\nThe syntax could be something like this:\n< MyInput name=\"addresses[0]\" value=\"123 Some Street\" />\n< MyInput name=\"addresses[1]\" value=\"456 Different Street\" />\nSo right now that results in this kind of data:\n{\n    \"addresses[0]\": \"123 Some Street\",\n    \"addresses[1]\": \"456 Different Street\"\n}\nIt would be better if it added the data as an array like this:\n{\n    \"addresses\":\n        [\"123 Some Street\", \n        \"456 Different Street\"]\n}\nAnd of course the primary use case for something like this would be to add a series of objects to an array with something like this:\n< MyInput name={\"addresses[\" + index + \"]\"} />\nIt isn't the most convenient syntax to write in this case, so maybe there is a better way of writing it. But that's my idea for how this could be implemented.\nFinally, dot notation could be used on the array like this:\n< MyInput name=\"addresses[0].street\" value=\"Some Street\"/>\nWhich would result in an object like this:\n{\n    \"addresses\": [{street: \"Some Street\"}]\n}\n. Upon further research, it looks like the jQuery ajax function I am using to post data to the server expects associative data and parses it into a hierarchical JSON object.\nThe syntax is like this:\n< MyInput name=\"addresses[0][street]\" value=\"123 Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"456 Different Street\"/>\nwhich resolves to:\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\nHopefully this is helpful to those trying to get hierarchical forms working with arrays - and possibly the development of this project.\n. Ah, yeah, I did mean that. I edited my above post to reflect that.\n. I'd like to add my voice on the array issue.\nThe syntax could be something like this:\n< MyInput name=\"addresses[0]\" value=\"123 Some Street\" />\n< MyInput name=\"addresses[1]\" value=\"456 Different Street\" />\nSo right now that results in this kind of data:\n{\n    \"addresses[0]\": \"123 Some Street\",\n    \"addresses[1]\": \"456 Different Street\"\n}\nIt would be better if it added the data as an array like this:\n{\n    \"addresses\":\n        [\"123 Some Street\", \n        \"456 Different Street\"]\n}\nAnd of course the primary use case for something like this would be to add a series of objects to an array with something like this:\n< MyInput name={\"addresses[\" + index + \"]\"} />\nIt isn't the most convenient syntax to write in this case, so maybe there is a better way of writing it. But that's my idea for how this could be implemented.\nFinally, dot notation could be used on the array like this:\n< MyInput name=\"addresses[0].street\" value=\"Some Street\"/>\nWhich would result in an object like this:\n{\n    \"addresses\": [{street: \"Some Street\"}]\n}\n. Upon further research, it looks like the jQuery ajax function I am using to post data to the server expects associative data and parses it into a hierarchical JSON object.\nThe syntax is like this:\n< MyInput name=\"addresses[0][street]\" value=\"123 Some Street\"/>\n< MyInput name=\"addresses[1][street]\" value=\"456 Different Street\"/>\nwhich resolves to:\n{\n    addresses:\n        [{\"street\": \"123 Some Street\"}, \n        {\"street\": \"456 Different Street\"}]\n}\nHopefully this is helpful to those trying to get hierarchical forms working with arrays - and possibly the development of this project.\n. Ah, yeah, I did mean that. I edited my above post to reflect that.\n. ",
    "ericdfields": "I'm dealing w/ the same data structure for nested objects (rails api). I built a Formsy form that handles formatting of the data quite well. The following is not pretty, nor well-tested, but it handles nested objects (at least one-level deep) just fine, and minimizes the amount of boilerplate you have to write.\nMy lib:\n``` javascript\nvar React = require('react')\nvar Formsy = require('formsy-react');\nexport class FormFor extends React.Component {\nconstructor(props) {\n    super(props)\n    this.formatChild = this.formatChild.bind(this)\n  }\nformatChild(child) {\n    if (typeof child == 'string') {\n      return child\n    }\nlet entityName = this.props.entity\n\nif (child.props.fields_for) {\n  child.props.entity = this.props.entity\n  return child\n}\nif (!_.isEmpty(child.props.name)) {\n  child.props.field_name = child.props.name\n  if (child.props.name.match(/[\\d*]/g)) {\n    child.props.name = [entityName, child.props.name].join('')\n  } else {\n    child.props.name = [entityName, '[', child.props.name, ']'].join('')\n  }\n}\nif (child.props.children) {\n  child.props.children = React.Children.map(child.props.children, this.formatChild)\n}\nreturn child\n\n}\nrender() {\n    let children = React.Children.map( this.props.children, this.formatChild )\n    return (\n      \n        { children }\n      \n    )\n  }\n}\n```\nAnd then in your render method:\njavascript\n        <FormFor \n          entity=\"patient\" \n          onValidSubmit={this.submit.bind(this)} \n          onValid={this.enableButton.bind(this)} \n          onInvalid={this.disableButton.bind(this)}>\n                  <TextInput\n                    wrapperClass=\"col-md-3\"\n                    name=\"first_name\"  \n                    label=\"First name:\" \n                    value={ this.props.patient.first_name } \n                    required />\n     </FormFor>\nA nested object component might look like so:\n``` javascript\nimport { attributesPrefixer } from 'helpers/forms_helper'\nvar HiddenInput = require('components/ui/forms/hidden_input_component')\nvar TextInput = require('components/ui/forms/text_input_component')\nvar CheckboxInput = require('components/ui/forms/checkbox_input_component')\nvar classNames = require('classnames')\nfunction patientPhoneNumberFieldsTemplate(field_group,i) {\nfunction handleRemove(i,event) {\n    event.preventDefault()\n    Vanda.flux.getActions('CaseManagerPatient').removePhoneNumber(i)\n  }\nfunction prefixer(index,name) {\n    return attributesPrefixer('phone_numbers', index, name)\n  }\nlet classes = classNames({\n    'row': true,\n    'inset-row': true,\n    'hide': field_group.mark_for_destroy\n  })\nreturn (\n    \n\n  <TextInput\n    wrapperClass=\"col-md-3\"\n    name={ prefixer(i,'value') } \n    label=\"Number:\" \n    value={ field_group.value } />\n\n  <CheckboxInput\n    wrapperClass=\"col-md-3\"\n    name={ prefixer(i, 'is_primary') }\n    label=\"Primary number:\"\n    value={ field_group.is_primary } />\n\n  <HiddenInput\n    name={ prefixer(i, 'id') }\n    value={ field_group.id } />\n\n  <button className=\"btn btn-danger\" onClick={ handleRemove.bind(null,i) }>Remove</button>\n</div>\n\n)\n}\nexport function patientPhoneNumberFields(fields) {\n  let fields = fields.map( patientPhoneNumberFieldsTemplate )\nreturn (\n    { fields }\n  )\n}\n```\nAnd that super-handy attributesPrefixer up there looks like this:\njavascript\n  attributesPrefixer(attributes_name,index,name) {\n    return '[' + attributes_name + '_attributes][' + index + '][' + name + ']'\n  },\nTHE PAYOFF\nYou get the naming convention you need to submit the form:\n<input name=\"patient[first_name]\" type=\"text\" class=\"form-control\" value=\"Testing\" data-reactid=\".0.$=11:0.0.0.3.1.$=1$=010=20:0.$=1$=011=20:0.$=1$=010=20:0.1:0\">\nSome nested inputs, out of context:\n```\n\n\n\n```\nEtc.\nAgain, suits my needs, is not a solution, but maybe this helps. Happy to answer questions.\n. I think refs will help you out.\n. Dug into this a little more today. The way in which formsy manipulates and returns its children makes it incompatible with other components that manipulate children. I've tested both react-tabs and react-simpletabs and they each get stuck looking for an array of valid React components on this.props.children, and instead get objects similar to the above screenshot.\n. At this point I'm thinking it's related to #120 and/or #121 \n. I can't quite tell what you're going for either. Do you want to perform client-side validation and then, if the validations are all good, perform a standard POST? \n. You could use any of the validation-related methods described in the API to achieve your goal, depending on the behavior you're looking for. \nThe example in the Readme will, for example, disable the submit button until the form is valid. Upon submitting the form, it will do a standard POST.\n. My apologies. You\u2019re correct and it does expect you to handle POST your own way. Here is the function: https://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L81-L94 https://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L81-L94\nI don\u2019t think you can pull of what you want to then. Just might not be the library you\u2019re looking for.\n\nOn Jun 29, 2015, at 12:19 PM, vinylrain notifications@github.com wrote:\nIt does not do a standard POST. It triggers a submit method that has some unknown function. There is also no way to set an action or a method AFAIK.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/christianalfoni/formsy-react/issues/152#issuecomment-116748286.\n. Any updates here?\n. I'm dealing w/ the same data structure for nested objects (rails api). I built a Formsy form that handles formatting of the data quite well. The following is not pretty, nor well-tested, but it handles nested objects (at least one-level deep) just fine, and minimizes the amount of boilerplate you have to write.\n\nMy lib:\n``` javascript\nvar React = require('react')\nvar Formsy = require('formsy-react');\nexport class FormFor extends React.Component {\nconstructor(props) {\n    super(props)\n    this.formatChild = this.formatChild.bind(this)\n  }\nformatChild(child) {\n    if (typeof child == 'string') {\n      return child\n    }\nlet entityName = this.props.entity\n\nif (child.props.fields_for) {\n  child.props.entity = this.props.entity\n  return child\n}\nif (!_.isEmpty(child.props.name)) {\n  child.props.field_name = child.props.name\n  if (child.props.name.match(/[\\d*]/g)) {\n    child.props.name = [entityName, child.props.name].join('')\n  } else {\n    child.props.name = [entityName, '[', child.props.name, ']'].join('')\n  }\n}\nif (child.props.children) {\n  child.props.children = React.Children.map(child.props.children, this.formatChild)\n}\nreturn child\n\n}\nrender() {\n    let children = React.Children.map( this.props.children, this.formatChild )\n    return (\n      \n        { children }\n      \n    )\n  }\n}\n```\nAnd then in your render method:\njavascript\n        <FormFor \n          entity=\"patient\" \n          onValidSubmit={this.submit.bind(this)} \n          onValid={this.enableButton.bind(this)} \n          onInvalid={this.disableButton.bind(this)}>\n                  <TextInput\n                    wrapperClass=\"col-md-3\"\n                    name=\"first_name\"  \n                    label=\"First name:\" \n                    value={ this.props.patient.first_name } \n                    required />\n     </FormFor>\nA nested object component might look like so:\n``` javascript\nimport { attributesPrefixer } from 'helpers/forms_helper'\nvar HiddenInput = require('components/ui/forms/hidden_input_component')\nvar TextInput = require('components/ui/forms/text_input_component')\nvar CheckboxInput = require('components/ui/forms/checkbox_input_component')\nvar classNames = require('classnames')\nfunction patientPhoneNumberFieldsTemplate(field_group,i) {\nfunction handleRemove(i,event) {\n    event.preventDefault()\n    Vanda.flux.getActions('CaseManagerPatient').removePhoneNumber(i)\n  }\nfunction prefixer(index,name) {\n    return attributesPrefixer('phone_numbers', index, name)\n  }\nlet classes = classNames({\n    'row': true,\n    'inset-row': true,\n    'hide': field_group.mark_for_destroy\n  })\nreturn (\n    \n\n  <TextInput\n    wrapperClass=\"col-md-3\"\n    name={ prefixer(i,'value') } \n    label=\"Number:\" \n    value={ field_group.value } />\n\n  <CheckboxInput\n    wrapperClass=\"col-md-3\"\n    name={ prefixer(i, 'is_primary') }\n    label=\"Primary number:\"\n    value={ field_group.is_primary } />\n\n  <HiddenInput\n    name={ prefixer(i, 'id') }\n    value={ field_group.id } />\n\n  <button className=\"btn btn-danger\" onClick={ handleRemove.bind(null,i) }>Remove</button>\n</div>\n\n)\n}\nexport function patientPhoneNumberFields(fields) {\n  let fields = fields.map( patientPhoneNumberFieldsTemplate )\nreturn (\n    { fields }\n  )\n}\n```\nAnd that super-handy attributesPrefixer up there looks like this:\njavascript\n  attributesPrefixer(attributes_name,index,name) {\n    return '[' + attributes_name + '_attributes][' + index + '][' + name + ']'\n  },\nTHE PAYOFF\nYou get the naming convention you need to submit the form:\n<input name=\"patient[first_name]\" type=\"text\" class=\"form-control\" value=\"Testing\" data-reactid=\".0.$=11:0.0.0.3.1.$=1$=010=20:0.$=1$=011=20:0.$=1$=010=20:0.1:0\">\nSome nested inputs, out of context:\n```\n\n\n\n```\nEtc.\nAgain, suits my needs, is not a solution, but maybe this helps. Happy to answer questions.\n. I think refs will help you out.\n. Dug into this a little more today. The way in which formsy manipulates and returns its children makes it incompatible with other components that manipulate children. I've tested both react-tabs and react-simpletabs and they each get stuck looking for an array of valid React components on this.props.children, and instead get objects similar to the above screenshot.\n. At this point I'm thinking it's related to #120 and/or #121 \n. I can't quite tell what you're going for either. Do you want to perform client-side validation and then, if the validations are all good, perform a standard POST? \n. You could use any of the validation-related methods described in the API to achieve your goal, depending on the behavior you're looking for. \nThe example in the Readme will, for example, disable the submit button until the form is valid. Upon submitting the form, it will do a standard POST.\n. My apologies. You\u2019re correct and it does expect you to handle POST your own way. Here is the function: https://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L81-L94 https://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L81-L94\nI don\u2019t think you can pull of what you want to then. Just might not be the library you\u2019re looking for.\n\nOn Jun 29, 2015, at 12:19 PM, vinylrain notifications@github.com wrote:\nIt does not do a standard POST. It triggers a submit method that has some unknown function. There is also no way to set an action or a method AFAIK.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/christianalfoni/formsy-react/issues/152#issuecomment-116748286.\n. Any updates here?\n. \n",
    "dsteinbach": "Sorry, I am not sure if this was addressed in this issue but can I now do something like this to take advantage of \"sub-validation\"?\nvar AddressForm = React.createClass({\n   [...]\n   addValidAddress:function(){\n      this.setValue(this.model());\n   }\n   render: function(){\n      return (\n          <Formsy.Form {...this.props} onValidSubmit={::this.addValidAddress}>\n               <input name=\"street\"/>\n               <input name=\"zip\"/>\n               <input name=\"city\"/>\n          </Formsy.Form>\n      ); \n   }\n});\n <Formsy.Form>\n   <input name=\"name\"/>\n   <input name=\"otherProperty\"/>\n   <AddressForm name=\"address\"/>\n</Formsy.Form>\n@christianalfoni mentioned this would be available once react@0.14 came out\n. +1\nminLength:1 should give the error message when the input is not pristine and it's length is less than 1.\n. I came up with a workaround that goes agaisnt recommended usage but it works:\n```\n  render() {\n    const { showRequired, showError, getValue, name, title, className, isPristine, type, hasValue, getErrorMessage, validationError } = this.props;\n    const hasError = (!isPristine() && (showError() || !hasValue()));\n    const errorMessage = hasError ? validationError : null;\n    return (\n      \n{title}\n\n{errorMessage}\n\n    );\n  }\n```\n. I guess this is a dupe of the many other similar issues others are having.\n. I guess I was confused by the behavior of required fields (required is what I was looking for not no minlength:1). Required fields won't display their error until you try submitting the form which is fine. The only problem is if you disable the submit button until the form is valid, the user might not realize which form elements need to be filled out. \n. +1\nSeems to be a race condition. I have the following (mock) setup:\n<ul>\n   {workExp.map(function(exp, index){\n      <li>\n         <Input name={\"work_exp[\" + index + \"].title\"} value={exp.title} />\n         <button onClick={removeWorkExp.bind(self, index)}>X</button>\n         {exp.skills.map(function(skill, subindex){\n            <Input name={\"work_exp[\" + index + \"].skills[\" + subindex + \"]\"} value={skill} />\n         })}\n     </li>\n   })}\n</ul>\nWhen the user clicks X to remove a work experience, work_exp[0].title is unmounted first and validateForm is run too soon and is trying to validate this.inputs[\"work_exp[0].skills[0]\"] which also has been unmounted.\nThe error is on this line:\nhttps://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L373\n\"Uncaught TypeError: Cannot read property 'state' of undefined\"\nPerhaps we want that line to be more defensive?\n. Worked for me, thanks!\n. :+1: thanks, tested this in my project and it fixes my issue. \n. Sorry, I am not sure if this was addressed in this issue but can I now do something like this to take advantage of \"sub-validation\"?\nvar AddressForm = React.createClass({\n   [...]\n   addValidAddress:function(){\n      this.setValue(this.model());\n   }\n   render: function(){\n      return (\n          <Formsy.Form {...this.props} onValidSubmit={::this.addValidAddress}>\n               <input name=\"street\"/>\n               <input name=\"zip\"/>\n               <input name=\"city\"/>\n          </Formsy.Form>\n      ); \n   }\n});\n <Formsy.Form>\n   <input name=\"name\"/>\n   <input name=\"otherProperty\"/>\n   <AddressForm name=\"address\"/>\n</Formsy.Form>\n@christianalfoni mentioned this would be available once react@0.14 came out\n. +1\nminLength:1 should give the error message when the input is not pristine and it's length is less than 1.\n. I came up with a workaround that goes agaisnt recommended usage but it works:\n```\n  render() {\n    const { showRequired, showError, getValue, name, title, className, isPristine, type, hasValue, getErrorMessage, validationError } = this.props;\n    const hasError = (!isPristine() && (showError() || !hasValue()));\n    const errorMessage = hasError ? validationError : null;\n    return (\n      \n{title}\n\n{errorMessage}\n\n    );\n  }\n```\n. I guess this is a dupe of the many other similar issues others are having.\n. I guess I was confused by the behavior of required fields (required is what I was looking for not no minlength:1). Required fields won't display their error until you try submitting the form which is fine. The only problem is if you disable the submit button until the form is valid, the user might not realize which form elements need to be filled out. \n. +1\nSeems to be a race condition. I have the following (mock) setup:\n<ul>\n   {workExp.map(function(exp, index){\n      <li>\n         <Input name={\"work_exp[\" + index + \"].title\"} value={exp.title} />\n         <button onClick={removeWorkExp.bind(self, index)}>X</button>\n         {exp.skills.map(function(skill, subindex){\n            <Input name={\"work_exp[\" + index + \"].skills[\" + subindex + \"]\"} value={skill} />\n         })}\n     </li>\n   })}\n</ul>\nWhen the user clicks X to remove a work experience, work_exp[0].title is unmounted first and validateForm is run too soon and is trying to validate this.inputs[\"work_exp[0].skills[0]\"] which also has been unmounted.\nThe error is on this line:\nhttps://github.com/christianalfoni/formsy-react/blob/master/src/main.js#L373\n\"Uncaught TypeError: Cannot read property 'state' of undefined\"\nPerhaps we want that line to be more defensive?\n. Worked for me, thanks!\n. :+1: thanks, tested this in my project and it fixes my issue. \n. ",
    "klis87": "@Semigradsky Nested form could be displayed as div, then we could check whether part of a form is valid or not - this functionality is present in many form libraries, including Angular and Redux Form and it is implemented without any violation of HTML5 spec.. @Semigradsky Nested form could be displayed as div, then we could check whether part of a form is valid or not - this functionality is present in many form libraries, including Angular and Redux Form and it is implemented without any violation of HTML5 spec.. ",
    "shatran": "I have the same issue. My form is also complex with multiple layers, and i couldn't get any separation for the different form sections, and of course i couldn't build reusable components that are parents of the inputs components. Wish this issue could be fixed in the near future.\nBTW Thanks for this awesome library!\n. I have the same issue. My form is also complex with multiple layers, and i couldn't get any separation for the different form sections, and of course i couldn't build reusable components that are parents of the inputs components. Wish this issue could be fixed in the near future.\nBTW Thanks for this awesome library!\n. ",
    "nathanwelch": "Hey @christianalfoni did you ever get a chance to try implementing the solution you were referring to that doesn't require React 0.14? I think it was what you were referring to here with the extended prop that would cause Formsy.Form to return a <div> instead of a <form> if it was nested: https://github.com/christianalfoni/formsy-react/issues/120#issuecomment-104406816.\nI implemented it in a fork to play around with nesting forms: https://github.com/christianalfoni/formsy-react/compare/master...smashgg:nested-forms. It seems to work so far but I did it pretty quickly and I'm sure I missed something. \nJust curious: are you planning to release a version that would support nested forms before React 0.14 is out?\n. Hey @christianalfoni did you ever get a chance to try implementing the solution you were referring to that doesn't require React 0.14? I think it was what you were referring to here with the extended prop that would cause Formsy.Form to return a <div> instead of a <form> if it was nested: https://github.com/christianalfoni/formsy-react/issues/120#issuecomment-104406816.\nI implemented it in a fork to play around with nesting forms: https://github.com/christianalfoni/formsy-react/compare/master...smashgg:nested-forms. It seems to work so far but I did it pretty quickly and I'm sure I missed something. \nJust curious: are you planning to release a version that would support nested forms before React 0.14 is out?\n. ",
    "iandeherdt": "I tried @nathanwelch his solution and it seems to work. Can this be merged into the current branch please?\n. I tried @nathanwelch his solution and it seems to work. Can this be merged into the current branch please?\n. ",
    "stephenrs": "In case it helps someone while we're waiting for React 0.14, I can confirm that the solution proposed by @nathanwelch is working (so far) quite well for splitting up big forms into separate components. I'm using it with react-bootstrap (TabbedArea/TabbedPane) to display a complex form across several tabs.\nThanks @nathanwelch, @christianalfoni, and thanks for the discussion guys!\n. In case it helps someone while we're waiting for React 0.14, I can confirm that the solution proposed by @nathanwelch is working (so far) quite well for splitting up big forms into separate components. I'm using it with react-bootstrap (TabbedArea/TabbedPane) to display a complex form across several tabs.\nThanks @nathanwelch, @christianalfoni, and thanks for the discussion guys!\n. ",
    "colinmccann": "Can we re-open this plz? I have essentially the same issue and am also getting hung up on the C:/fakepath/xyz\nCode snippet:\n<fieldset>\n            {this.fields()}               // created elsewhere\n            <FRC.Input ref=\"file\" type=\"file\" name=\"file\" accept=\".jpg,.gif,.jpeg,.png,.mp4,.m4v,.mov\" />\n          </fieldset>\n          <input\n            className = \"btn btn-primary\"\n            type = \"submit\"\n            defaultValue = \"Submit\"\n            disabled = {!this.state.valid}\n            {...this.props.submitButton}\n          />\nSee attached. Note both the:\nC:\\fakepath\\13112411_10206316238800722_777633898_o.jpg\nand the possibly (but unlikely) related:\nWarning: Failed propType: Invalid prop type of value file supplied to Input, expected one of [\"color\",\"date\",\"datetime\",\"datetime-local\",\"email\",\"hidden\",\"month\",\"number\",\"password\",\"range\",\"search\",\"tel\",\"text\",\"time\",\"url\",\"week\"].\nI'm not attaching the C:\\fakepath - not even on a Windows machine. I would guess it buried somewhere in the formsy code?\n\n. Hot damn, that is perfect. Thanks!\n. Can we re-open this plz? I have essentially the same issue and am also getting hung up on the C:/fakepath/xyz\nCode snippet:\n<fieldset>\n            {this.fields()}               // created elsewhere\n            <FRC.Input ref=\"file\" type=\"file\" name=\"file\" accept=\".jpg,.gif,.jpeg,.png,.mp4,.m4v,.mov\" />\n          </fieldset>\n          <input\n            className = \"btn btn-primary\"\n            type = \"submit\"\n            defaultValue = \"Submit\"\n            disabled = {!this.state.valid}\n            {...this.props.submitButton}\n          />\nSee attached. Note both the:\nC:\\fakepath\\13112411_10206316238800722_777633898_o.jpg\nand the possibly (but unlikely) related:\nWarning: Failed propType: Invalid prop type of value file supplied to Input, expected one of [\"color\",\"date\",\"datetime\",\"datetime-local\",\"email\",\"hidden\",\"month\",\"number\",\"password\",\"range\",\"search\",\"tel\",\"text\",\"time\",\"url\",\"week\"].\nI'm not attaching the C:\\fakepath - not even on a Windows machine. I would guess it buried somewhere in the formsy code?\n\n. Hot damn, that is perfect. Thanks!\n. ",
    "arjunmehta": "Ah I see. That makes sense. I just assumed that since its in the docs it should be in the latest published package. :) it's good practice to move into a working branch and merge to master only when you publish to npm.\n. Ah I see. That makes sense. I just assumed that since its in the docs it should be in the latest published package. :) it's good practice to move into a working branch and merge to master only when you publish to npm.\n. ",
    "alexjg": "I probably wasn't very clear there, what I mean is that you can have multiple errors at the same time. For example if an input is both too long and not a valid email address, currently the getErrorMessages method returns a string, which makes it impossible to do something like rendering a list of errors under the input. \nIdeally I would like to be able to do something like this:\ncoffee\nrender: ->\n    <input type=\"text\" ...>\n    <ul>\n            {@getErrorMessages().map(error -> <li>{message}</li>)}\n    </ul>\nMy use case for this is actually when returning errors from server side validation so I would also need a way to set multiple errors on an input, so something like \ncoffee\nupdateInputsWithErrors(fieldname: [\"error1\", \"error2\"])\nI'm happy to have a shot at implementing this if it's something you think would be worth having.\n. I probably wasn't very clear there, what I mean is that you can have multiple errors at the same time. For example if an input is both too long and not a valid email address, currently the getErrorMessages method returns a string, which makes it impossible to do something like rendering a list of errors under the input. \nIdeally I would like to be able to do something like this:\ncoffee\nrender: ->\n    <input type=\"text\" ...>\n    <ul>\n            {@getErrorMessages().map(error -> <li>{message}</li>)}\n    </ul>\nMy use case for this is actually when returning errors from server side validation so I would also need a way to set multiple errors on an input, so something like \ncoffee\nupdateInputsWithErrors(fieldname: [\"error1\", \"error2\"])\nI'm happy to have a shot at implementing this if it's something you think would be worth having.\n. ",
    "arismarko": "Hi Christian,\nIs it possible to have two custom validations in the same field\nlet validations = {\n  customValidation1: true,\n  customValidation2: true\n};\n\nlet errors = {\n  customValidation1: 'Message for first custom',\n  customValidation2: 'Message for second custom'\n};\n\n. Hi Christian,\nIs it possible to have two custom validations in the same field\nlet validations = {\n  customValidation1: true,\n  customValidation2: true\n};\n\nlet errors = {\n  customValidation1: 'Message for first custom',\n  customValidation2: 'Message for second custom'\n};\n\n. ",
    "aphillipo": "This sounds amazing.  Means you are less likely to have multiple people editing the same thing clobber eachothers results.\n. Yeah I suppose it works both ways doesn't it (do it on the backend or the front end is a marginal tradeoff), probably you could say it's one for the backend, but then over the wire transmission should aim to be as small as possible.\nI say keep formsy as simple as is possible, but then it should not be so difficult to have an object of bits to say which fields have changed and _.filter the stuff passed to submit.\n. Well the argument is that formsy probably:\na) knows what the original data was\nb) knows which fields are no longer \"pristine\"\nc) the difference being sent over the wire is \"cheaper\" than everything being sent\nI think this should be possible to build separately from formsy though - there should be an easy way to get this info and do the diff??  \nI'm not massively worried by this in general though.  Bigger fish to fry ;-)\n. I've actually figured this out.  I'll post a solution and close once it works!\n. Here is how (uses Formsy React Components):\n``` js\n    var IPAddressOrHostnameInput = React.createClass({\n        mixins: [Formsy.Mixin, ComponentMixin],\n    getInitialState: function () {\n        return {\n            validationMessage: 'Invalid'\n        };\n    },\n\n    changeValue: function (event) {\n        this.setValue(event.currentTarget.value);\n    },\n\n    validate: function () {\n        var value = this.getValue();\n        console.log(value);\n        if (value === '' || value === undefined) {\n            this.setState({validationMessage: 'Invalid'});\n            return true; // is required should pick this up\n        } else {\n            var validIPRegexp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,\n                validHostnameRegexp = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n\n            if (validIPRegexp.test(value)) {\n                this.setState({validationMessage: 'Valid IP'});\n                return true;\n            } else if (validHostnameRegexp.test(value)) {\n                this.setState({validationMessage: 'Valid Hostname'});\n                return true;\n            } else {\n                this.setState({validationMessage: 'Invalid'});\n                return false;\n            }\n        }\n    },\n\n    getDefaultProps: function () {\n        return {\n            type: 'text'\n        };\n    },\n\n    render: function() {\n\n        var element = this.renderElement();\n\n        if (this.getLayout() === 'elementOnly' || this.props.type === 'hidden') {\n            return element;\n        }\n\n        var warningIcon = '';\n        if (this.showErrors()) {\n            warningIcon = (\n                <Icon symbol=\"remove\" className=\"form-control-feedback\" />\n            );\n        }\n\n        return (\n            <Row\n                label={this.props.label}\n                required={this.isRequired()}\n                hasErrors={this.showErrors()}\n                layout={this.getLayout()}\n            >\n                <div className=\"input-group\">\n                    {element}\n                    <span className=\"input-group-addon\">\n                        {warningIcon}\n                        {this.state.validationMessage}\n                    </span>\n                </div>\n\n                {this.renderHelp()}\n                {this.renderErrorMessage()}\n            </Row>\n        );\n    },\n\n    renderElement: function() {\n        var className = 'form-control';\n        if (['file', 'range'].indexOf(this.props.type) !== -1) {\n            className = null;\n        }\n        return (\n            <input\n                className={className}\n                {...this.props}\n                label={null}\n                value={this.getValue()}\n                onChange={this.changeValue}\n                disabled={this.isFormDisabled() || this.props.disabled}\n            />\n        );\n    }\n});\n\n```\n. Closing as solved.\n. Yeah it's okay.  Would be nicer, obviously, if this was automatic.  What I do now is set an onClick event to update a temporary value on the class (i.e. onClick: function(e) { this.saveButton = e.currentTarget.innerText; }).\nI then test for and reset this.saveButton in my submit method.\nThanks for Formsy it's excellent; probably one of the best and most stable react components/libraries.\n. +1 for defaultValue - it would make it explicit what is happening - defaultValue always replaces pristine form data and value is always the latest edited version?  \nI also really need this now really, as a temporary fix can I call setPristine in the mean time if I know that to be the case?\n. That is not what I mean - here are the steps I expect to be able to happen.\n1) I load a form with some customer data from a Redux store/action.\n2) The form data is edited in various places\n3) One of the actions/edits loads other parts of the form and this causes data in the store to change, which causes data in the props to changes which updates data in the form.\n4) Under certain conditions I wish for the edited data to be overridden by these updated props.\n5) Obviously edits take precedence over prop changes, I guess this is correct...?\nMaybe in componentWillReceiveProps I can setValue on the ref of the relevant input.\n. Yep, this is exactly how I ended up doing things.  I have say it feels like a bit of a mess.  As I'm writing this I'm wondering if there is a form on change event that I should use instead...\n. I could do with this being merged - I'm loading lots of data into my forms and validating it means the form is \"changed\" which it obviously isn't.\n. This sounds amazing.  Means you are less likely to have multiple people editing the same thing clobber eachothers results.\n. Yeah I suppose it works both ways doesn't it (do it on the backend or the front end is a marginal tradeoff), probably you could say it's one for the backend, but then over the wire transmission should aim to be as small as possible.\nI say keep formsy as simple as is possible, but then it should not be so difficult to have an object of bits to say which fields have changed and _.filter the stuff passed to submit.\n. Well the argument is that formsy probably:\na) knows what the original data was\nb) knows which fields are no longer \"pristine\"\nc) the difference being sent over the wire is \"cheaper\" than everything being sent\nI think this should be possible to build separately from formsy though - there should be an easy way to get this info and do the diff??  \nI'm not massively worried by this in general though.  Bigger fish to fry ;-)\n. I've actually figured this out.  I'll post a solution and close once it works!\n. Here is how (uses Formsy React Components):\n``` js\n    var IPAddressOrHostnameInput = React.createClass({\n        mixins: [Formsy.Mixin, ComponentMixin],\n    getInitialState: function () {\n        return {\n            validationMessage: 'Invalid'\n        };\n    },\n\n    changeValue: function (event) {\n        this.setValue(event.currentTarget.value);\n    },\n\n    validate: function () {\n        var value = this.getValue();\n        console.log(value);\n        if (value === '' || value === undefined) {\n            this.setState({validationMessage: 'Invalid'});\n            return true; // is required should pick this up\n        } else {\n            var validIPRegexp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,\n                validHostnameRegexp = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n\n            if (validIPRegexp.test(value)) {\n                this.setState({validationMessage: 'Valid IP'});\n                return true;\n            } else if (validHostnameRegexp.test(value)) {\n                this.setState({validationMessage: 'Valid Hostname'});\n                return true;\n            } else {\n                this.setState({validationMessage: 'Invalid'});\n                return false;\n            }\n        }\n    },\n\n    getDefaultProps: function () {\n        return {\n            type: 'text'\n        };\n    },\n\n    render: function() {\n\n        var element = this.renderElement();\n\n        if (this.getLayout() === 'elementOnly' || this.props.type === 'hidden') {\n            return element;\n        }\n\n        var warningIcon = '';\n        if (this.showErrors()) {\n            warningIcon = (\n                <Icon symbol=\"remove\" className=\"form-control-feedback\" />\n            );\n        }\n\n        return (\n            <Row\n                label={this.props.label}\n                required={this.isRequired()}\n                hasErrors={this.showErrors()}\n                layout={this.getLayout()}\n            >\n                <div className=\"input-group\">\n                    {element}\n                    <span className=\"input-group-addon\">\n                        {warningIcon}\n                        {this.state.validationMessage}\n                    </span>\n                </div>\n\n                {this.renderHelp()}\n                {this.renderErrorMessage()}\n            </Row>\n        );\n    },\n\n    renderElement: function() {\n        var className = 'form-control';\n        if (['file', 'range'].indexOf(this.props.type) !== -1) {\n            className = null;\n        }\n        return (\n            <input\n                className={className}\n                {...this.props}\n                label={null}\n                value={this.getValue()}\n                onChange={this.changeValue}\n                disabled={this.isFormDisabled() || this.props.disabled}\n            />\n        );\n    }\n});\n\n```\n. Closing as solved.\n. Yeah it's okay.  Would be nicer, obviously, if this was automatic.  What I do now is set an onClick event to update a temporary value on the class (i.e. onClick: function(e) { this.saveButton = e.currentTarget.innerText; }).\nI then test for and reset this.saveButton in my submit method.\nThanks for Formsy it's excellent; probably one of the best and most stable react components/libraries.\n. +1 for defaultValue - it would make it explicit what is happening - defaultValue always replaces pristine form data and value is always the latest edited version?  \nI also really need this now really, as a temporary fix can I call setPristine in the mean time if I know that to be the case?\n. That is not what I mean - here are the steps I expect to be able to happen.\n1) I load a form with some customer data from a Redux store/action.\n2) The form data is edited in various places\n3) One of the actions/edits loads other parts of the form and this causes data in the store to change, which causes data in the props to changes which updates data in the form.\n4) Under certain conditions I wish for the edited data to be overridden by these updated props.\n5) Obviously edits take precedence over prop changes, I guess this is correct...?\nMaybe in componentWillReceiveProps I can setValue on the ref of the relevant input.\n. Yep, this is exactly how I ended up doing things.  I have say it feels like a bit of a mess.  As I'm writing this I'm wondering if there is a form on change event that I should use instead...\n. I could do with this being merged - I'm loading lots of data into my forms and validating it means the form is \"changed\" which it obviously isn't.\n. ",
    "mbrookes": "@aphillipo you've mentioned back-end v front-end, and network bandwidth concerns, but front-end doesn't mean this has to be performed by formsy, your onValidSubmit method can take care of it client side, so your \"over-the-wire\" is minimised, without it being a function of formsy. \nHaving said that, I do agree that there's an argument to be made for an option for formsy to only pass changed properties - there are enough use cases for that to be useful as a binary option, without overloading the API. \n. http://formsy-mui-demo.meteor.com/ ?\n. @arush - thanks. @christianalfoni - would you be happy to release 0.14.2 if I submit this as a PR against 0.14.1?\n. As an individual form component default value, yes; but we were asking about using an object to populate multiple fields.\n. Thanks to @christianalfoni for creating this library with such passion in the first place! :+1: \n@Semigradsky you've done a fine job of maintaining the library so far, so it's great news that you're picking it up.\nIt's perfectly possible to have multiple users able to update npm, however if forking/moving the repo is part of the plan, it might make sense to move it under its own org (formsy?), so: formsy/formsy-react. A complete rename might be too confusing.\nI would be happy for formsy-material-ul to live there to.\n. @Semigradsky - you're obviously under no obligation to continue development of formsy-react, but it would be good to know what your plans are one way or the other. :+1: \n. @dlivas - wrong repo, material-ui support is over here: https://github.com/mbrookes/formsy-material-ui, and the material-ui 0.15.0 branch is here: https://github.com/mbrookes/formsy-material-ui/tree/mui-0150\n(but broken ATM).\n. @dlivas material-ui:0.15.0-beta.1@next IIRC, but please close this issue - it's unfair on the maintainers of this unrelated repo.\n. HI @Semigradsky - sorry, was travelling last week and just catching up. I think I understand where you're going with this, but please could you expand in the proposal with regards to what problem this is solving for, and how the two scenarios differ (pros & cons)?\n. @Semigradsky Having been working of formsy-material-ui a bit, your proposals make a bit more sense to me now that I've refamiliarised myself with the formsy-react API.\nFor the first proposal, I'm currently using setValue to trigger the validation (and not to actually set the value), but if I understand correctly, validate would replace this?\nLike @twisty I don't use the current validate, so can't comment on that.\nFor the second, I'm not sure of the value of validateOnInit? validateOnChange might be helpful for simple use-cases.\n. @aphillipo you've mentioned back-end v front-end, and network bandwidth concerns, but front-end doesn't mean this has to be performed by formsy, your onValidSubmit method can take care of it client side, so your \"over-the-wire\" is minimised, without it being a function of formsy. \nHaving said that, I do agree that there's an argument to be made for an option for formsy to only pass changed properties - there are enough use cases for that to be useful as a binary option, without overloading the API. \n. http://formsy-mui-demo.meteor.com/ ?\n. @arush - thanks. @christianalfoni - would you be happy to release 0.14.2 if I submit this as a PR against 0.14.1?\n. As an individual form component default value, yes; but we were asking about using an object to populate multiple fields.\n. Thanks to @christianalfoni for creating this library with such passion in the first place! :+1: \n@Semigradsky you've done a fine job of maintaining the library so far, so it's great news that you're picking it up.\nIt's perfectly possible to have multiple users able to update npm, however if forking/moving the repo is part of the plan, it might make sense to move it under its own org (formsy?), so: formsy/formsy-react. A complete rename might be too confusing.\nI would be happy for formsy-material-ul to live there to.\n. @Semigradsky - you're obviously under no obligation to continue development of formsy-react, but it would be good to know what your plans are one way or the other. :+1: \n. @dlivas - wrong repo, material-ui support is over here: https://github.com/mbrookes/formsy-material-ui, and the material-ui 0.15.0 branch is here: https://github.com/mbrookes/formsy-material-ui/tree/mui-0150\n(but broken ATM).\n. @dlivas material-ui:0.15.0-beta.1@next IIRC, but please close this issue - it's unfair on the maintainers of this unrelated repo.\n. HI @Semigradsky - sorry, was travelling last week and just catching up. I think I understand where you're going with this, but please could you expand in the proposal with regards to what problem this is solving for, and how the two scenarios differ (pros & cons)?\n. @Semigradsky Having been working of formsy-material-ui a bit, your proposals make a bit more sense to me now that I've refamiliarised myself with the formsy-react API.\nFor the first proposal, I'm currently using setValue to trigger the validation (and not to actually set the value), but if I understand correctly, validate would replace this?\nLike @twisty I don't use the current validate, so can't comment on that.\nFor the second, I'm not sure of the value of validateOnInit? validateOnChange might be helpful for simple use-cases.\n. ",
    "davidtinker": "Tx for making this excellent library available to everyone.\n. Alternate workaround is to use a PureRenderMixin that ignores _isValidValue in props:\n``` javascript\n/*\n * Same as React's PureRenderMixin but excludes _isValidValue from the props comparison to workaround this issue:\n * https://github.com/christianalfoni/formsy-react/issues/134\n /\nvar PureRenderMixin = {\n    shouldComponentUpdate: function(nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps, '_isValidValue') ||\n            !shallowEqual(this.state, nextState);\n    }\n};\nmodule.exports = PureRenderMixin;\nfunction shallowEqual(objA, objB, ignoreKey) {\n    if (objA === objB) {\n        return true;\n    }\n    var key;\n    // Test for A's keys different from B.\n    for (key in objA) {\n        if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n            if (!ignoreKey || ignoreKey != key) return false;\n        }\n    }\n    // Test for B's keys missing from A.\n    for (key in objB) {\n        if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n            if (!ignoreKey || ignoreKey != key) return false;\n        }\n    }\n    return true;\n}\n```\n. Tx for making this excellent library available to everyone.\n. Alternate workaround is to use a PureRenderMixin that ignores _isValidValue in props:\n``` javascript\n/*\n * Same as React's PureRenderMixin but excludes _isValidValue from the props comparison to workaround this issue:\n * https://github.com/christianalfoni/formsy-react/issues/134\n /\nvar PureRenderMixin = {\n    shouldComponentUpdate: function(nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps, '_isValidValue') ||\n            !shallowEqual(this.state, nextState);\n    }\n};\nmodule.exports = PureRenderMixin;\nfunction shallowEqual(objA, objB, ignoreKey) {\n    if (objA === objB) {\n        return true;\n    }\n    var key;\n    // Test for A's keys different from B.\n    for (key in objA) {\n        if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n            if (!ignoreKey || ignoreKey != key) return false;\n        }\n    }\n    // Test for B's keys missing from A.\n    for (key in objB) {\n        if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n            if (!ignoreKey || ignoreKey != key) return false;\n        }\n    }\n    return true;\n}\n```\n. ",
    "adrienharnay": "Hello, how is one supposed to display error and required messages using showError() and showRequired() (using the HOC) when also using the pure-render-mixin ? Those functions depend on context therefore the components don't update. Thanks in advance for the insight.\n. Hello, actually I changed the way I was using setValue (triggering it only when necessary - only onBlur for inputs for example). Now no more latency!\n. Hello,\nI'm not using formsy-react-components, but instead made my own. Here is the input for instance:\n```\nimport React from 'react';\nimport { HOC } from 'formsy-react';\nimport ValidationMessages from '../messages/ValidationMessages';\nclass ValidationInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialValue || '',\n      focused: false,\n    };\nthis.changeValue = this.changeValue.bind(this);\nthis.onKeyDown = this.onKeyDown.bind(this);\nthis.onFocus = this.onFocus.bind(this);\nthis.onBlur = this.onBlur.bind(this);\n\n}\n  componentDidMount() {\n    if (this.props.initialValue) {\n      this.props.setValue(this.state.value);\n    }\n  }\n  changeValue(event) {\n    const newValue = event.currentTarget.value;\nif (this.state.value !== newValue) {\n  this.setState({ value: newValue }, () => {\n    if (!this.state.focused) {\n      this.props.setValue(this.state.value);\n    }\n  });\n}\n\n}\n  onKeyDown(e) {\n    if (e.keyCode === 13) {\n      this.setState({ focused: false });\n      this.props.setValue(this.state.value);\n    }\n  }\n  onFocus() {\n    this.setState({ focused: true });\n  }\n  onBlur(e) {\n    this.setState({ focused: false });\n    this.props.setValue(this.state.value);\nif (this.props.onBlur) {\n  this.props.onBlur(this.state.value);\n}\n\n}\n  render() {\n    const {\n      children,\n      name, id, value, initialValue, required,\n      onChange, onFocus, onBlur,\n      hasValue, getValue, setValue, resetValue,\n      isValid, isValidValue, isPristine, isRequired,\n      validations, setValidations, validationError, validationErrors,\n      getErrorMessage, getErrorMessages, showError, showRequired,\n      isFormDisabled, isFormSubmitted,\n      className,\n      ...otherProps } = this.props;\nreturn (\n  <ValidationMessages\n    showError={!this.state.focused && this.props.showError()}\n    showRequired={!this.state.focused && this.props.showRequired()}\n    isPristine={this.props.isPristine()}\n    errorMessage={this.props.getErrorMessage()}\n  >\n    <input {...otherProps} className={className} value={this.state.value} onChange={this.changeValue} onKeyDown={this.onKeyDown} onFocus={this.onFocus} onBlur={this.onBlur} />\n  </ValidationMessages>\n);\n\n}\n}\nValidationInput.propTypes = {\n  children: React.PropTypes.node,\n  initialValue: React.PropTypes.string,\n};\nexport default HOC(ValidationInput);\n```\n. This is true, I am sorry!. Hello, how is one supposed to display error and required messages using showError() and showRequired() (using the HOC) when also using the pure-render-mixin ? Those functions depend on context therefore the components don't update. Thanks in advance for the insight.\n. Hello, actually I changed the way I was using setValue (triggering it only when necessary - only onBlur for inputs for example). Now no more latency!\n. Hello,\nI'm not using formsy-react-components, but instead made my own. Here is the input for instance:\n```\nimport React from 'react';\nimport { HOC } from 'formsy-react';\nimport ValidationMessages from '../messages/ValidationMessages';\nclass ValidationInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialValue || '',\n      focused: false,\n    };\nthis.changeValue = this.changeValue.bind(this);\nthis.onKeyDown = this.onKeyDown.bind(this);\nthis.onFocus = this.onFocus.bind(this);\nthis.onBlur = this.onBlur.bind(this);\n\n}\n  componentDidMount() {\n    if (this.props.initialValue) {\n      this.props.setValue(this.state.value);\n    }\n  }\n  changeValue(event) {\n    const newValue = event.currentTarget.value;\nif (this.state.value !== newValue) {\n  this.setState({ value: newValue }, () => {\n    if (!this.state.focused) {\n      this.props.setValue(this.state.value);\n    }\n  });\n}\n\n}\n  onKeyDown(e) {\n    if (e.keyCode === 13) {\n      this.setState({ focused: false });\n      this.props.setValue(this.state.value);\n    }\n  }\n  onFocus() {\n    this.setState({ focused: true });\n  }\n  onBlur(e) {\n    this.setState({ focused: false });\n    this.props.setValue(this.state.value);\nif (this.props.onBlur) {\n  this.props.onBlur(this.state.value);\n}\n\n}\n  render() {\n    const {\n      children,\n      name, id, value, initialValue, required,\n      onChange, onFocus, onBlur,\n      hasValue, getValue, setValue, resetValue,\n      isValid, isValidValue, isPristine, isRequired,\n      validations, setValidations, validationError, validationErrors,\n      getErrorMessage, getErrorMessages, showError, showRequired,\n      isFormDisabled, isFormSubmitted,\n      className,\n      ...otherProps } = this.props;\nreturn (\n  <ValidationMessages\n    showError={!this.state.focused && this.props.showError()}\n    showRequired={!this.state.focused && this.props.showRequired()}\n    isPristine={this.props.isPristine()}\n    errorMessage={this.props.getErrorMessage()}\n  >\n    <input {...otherProps} className={className} value={this.state.value} onChange={this.changeValue} onKeyDown={this.onKeyDown} onFocus={this.onFocus} onBlur={this.onBlur} />\n  </ValidationMessages>\n);\n\n}\n}\nValidationInput.propTypes = {\n  children: React.PropTypes.node,\n  initialValue: React.PropTypes.string,\n};\nexport default HOC(ValidationInput);\n```\n. This is true, I am sorry!. ",
    "renak": "It looks like this issue was addressed before and implemented into the module: https://github.com/christianalfoni/formsy-react/issues/90\nMaybe there's a bug preventing it from working again now?\nI'm using the Form's onValid/onInvalid to enable/disable the submit button. Unfortunately, the button gets disabled when a non-required input is empty because it triggers invalid. I'm hoping we can get a fix for this soon.\n. Will this change be released soon? Or is there another stable version that had this working before that I could use for now?\n. It looks like this issue was addressed before and implemented into the module: https://github.com/christianalfoni/formsy-react/issues/90\nMaybe there's a bug preventing it from working again now?\nI'm using the Form's onValid/onInvalid to enable/disable the submit button. Unfortunately, the button gets disabled when a non-required input is empty because it triggers invalid. I'm hoping we can get a fix for this soon.\n. Will this change be released soon? Or is there another stable version that had this working before that I could use for now?\n. ",
    "mindcruzer": "I'm also in need of this. If you try to force re-validation in componentWillReceiveProps() with this.props._validate(this); it causes an infinite loop because the validate function causes a re-render of the component, which calls componentWillReceiveProps() again, and so on.\nThe way to do this that won't result in an infinite loop is to only re-validate on a condition that will be true on the first render, but not on subsequent renders. In my case I am altering the required prop so in componentWillReceiveProps():\njavascript\ncomponentWillReceiveProps: function (newProps) {\n    if (newProps.required != this.props.required) {\n        // force re-validation because the validation requirements have changed\n        this.props._validate(this); \n    }\n}\nYou could do the same thing with newProps.validations != this.props.validations. \n. I would like to see official support for something like this as well. I have a project using Formsy that I am porting to TypeScript, and the mixin approach is not ideal. I have come up a with a similar inheritance approach (which I will post when I get a chance). \n. In case anyone is interested in type declarations for TypeScript:\n``` ts\n// Formsy.d.ts\n// Type definitions for Formsy-React\n// Project: https://github.com/christianalfoni/formsy-react\ndeclare module Formsy {\ninterface ValidationErrors {\n    [key: string]: string;\n}\n\n// This is declared for a reference to Formsy.Mixin in FormsyFormComponent.ts\nvar Mixin: any;\n\ninterface FormProps {\n    className?: string;\n    mapping?: Function;\n    onSuccess?: Function;\n    onError?: Function;\n    onSubmit?: Function;\n    onValidSubmit?: Function; \n    onInvalidSubmit?: Function;\n    onSubmitted?: Function;\n    onValid?: Function;\n    onInvalid?: Function;\n    onChange?: Function;\n    validationErrors?: ValidationErrors;\n    preventExternalValidation?: boolean;\n}\n\nclass Form extends React.Component<FormProps, any> { }\n\n}\n```\n``` ts\n// FormsyFormComponent.ts\n// Type wrapper for Formsy-React\n// Project: https://github.com/christianalfoni/formsy-react\n/\n * Here the Formsy.Mixin is wrapped as an abstract class, so that it can \n * be used effectively with TypeScript.\n /\nnamespace Formsy {\nexport interface FormComponentProps {\n    name: string;\n    value?: any;\n    validations?: string;\n    validationError?: string;\n    validationErrors?: ValidationErrors;\n    required?: boolean;\n    _validate?: Function;\n}\n\nexport interface FormComponentState {\n    _value: any;\n    _isRequired: boolean;\n    _isValid: boolean;\n    _isPristine: boolean;\n    _pristineValue: any,\n    _validationError: string;\n    _externalError: string;\n    _formSubmitted: boolean;\n}\n\nexport abstract class FormComponent<V, P extends FormComponentProps, S extends FormComponentState> extends React.Component<P, S> {\n\n    static defaultProps: FormComponentProps = {\n        name: null,  // this can be set to whatever, since it will be overwritten when child components are created\n        validationError: '',\n        validationErrors: {}\n    };\n\n    constructor(props: P) {\n        super(props);\n\n        // Default values for state\n        this.state = <S>Mixin.getInitialState.call(this);\n    }\n\n    // Lifecycle methods\n    componentWillMount() {\n        Mixin.componentWillMount.call(this);\n    }\n\n    componentWillReceiveProps(nextProps: P) {\n        Mixin.componentWillReceiveProps.call(this, nextProps);\n    }\n\n    componentDidUpdate(prevProps: P) {\n        Mixin.componentDidUpdate.call(this, prevProps);\n    }\n\n    componentWillUnmount() {\n        Mixin.componentWillUnmount.call(this);\n    }\n\n    // Formsy methods\n    setValue(value: V) {\n        Mixin.setValue.call(this, value);\n    }\n\n    resetvalue() {\n        Mixin.resetValue.call(this);\n    }\n\n    getValue() {\n        return <V>Mixin.getValue.call(this);\n    }\n\n    hasValue() {\n        return <boolean>Mixin.hasValue.call(this);\n    }\n\n    getErrorMessage() {\n        return <string>Mixin.getErrorMessage.call(this);\n    }\n\n    isFormDisabled() {\n        return <boolean>Mixin.isFormDisabled.call(this);\n    }\n\n    isValid() {\n        return <boolean>Mixin.isValid.call(this);\n    }\n\n    isPristine() {\n        return <boolean>Mixin.isPristine.call(this);\n    }\n\n    isFormSubmitted() {\n        return <boolean>Mixin.isFormSubmitted.call(this);\n    }\n\n    isRequired() {\n        return <boolean>Mixin.isRequired.call(this);\n    }\n\n    showRequired() {\n        return <boolean>Mixin.showRequired.call(this);\n    }\n\n    showError() {\n        return <boolean>Mixin.showError.call(this);\n    }\n\n    isValidValue(value: any) {\n        return <boolean>Mixin.isValidValue.call(this);\n    }\n\n    private setValidations(validations: string, required: boolean) {\n        Mixin.setValidations.call(this, validations, required);\n    }\n}\n\n}\n```\nExample use:\n``` ts\nnamespace MyProject.Components {\ninterface CheckboxInputProps extends Formsy.FormComponentProps {\n    label: string;\n    disabled?: boolean;\n    onChange?: (checked: boolean) => any\n}\n\n/**\n * Checkbox control for inclusion in Formsy forms.\n */\nexport class CheckboxInput extends Formsy.FormComponent<boolean, CheckboxInputProps, any> {\n\n    constructor(props: CheckboxInputProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <label>\n                <input type=\"checkbox\" checked={ this.getValue() } disabled={ this.props.disabled }\n                       onChange={ this._onChange } /> { this.props.label }\n            </label>\n        );\n    }\n\n    private _onChange = (e: React.FormEvent) => {\n        var checked = (e.nativeEvent.srcElement as HTMLInputElement).checked;\n\n        this.setValue(checked);\n\n        if (this.props.onChange) {\n            this.props.onChange(checked);\n        }\n    } \n}\n\n}\n``\n. @eriknyk The latest formsy version is using parent contexts to pass theattachToForm()function to children, which will be undefined in @r-tock's solution because it was for an earlier version of formsy. If you use formsy 0.14.1 it should work. Formsy 0.17 I see also has an alternative solution to this using decorators. \n. @eriknyk You need to declare what parts of the context you're going to use in your component (see [here](https://facebook.github.io/react/docs/context.html)), but you should probably just use [this](https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsydecorator). \n. I'm also in need of this. If you try to force re-validation incomponentWillReceiveProps()withthis.props._validate(this);it causes an infinite loop because the validate function causes a re-render of the component, which callscomponentWillReceiveProps()` again, and so on.\nThe way to do this that won't result in an infinite loop is to only re-validate on a condition that will be true on the first render, but not on subsequent renders. In my case I am altering the required prop so in componentWillReceiveProps():\njavascript\ncomponentWillReceiveProps: function (newProps) {\n    if (newProps.required != this.props.required) {\n        // force re-validation because the validation requirements have changed\n        this.props._validate(this); \n    }\n}\nYou could do the same thing with newProps.validations != this.props.validations. \n. I would like to see official support for something like this as well. I have a project using Formsy that I am porting to TypeScript, and the mixin approach is not ideal. I have come up a with a similar inheritance approach (which I will post when I get a chance). \n. In case anyone is interested in type declarations for TypeScript:\n``` ts\n// Formsy.d.ts\n// Type definitions for Formsy-React\n// Project: https://github.com/christianalfoni/formsy-react\ndeclare module Formsy {\ninterface ValidationErrors {\n    [key: string]: string;\n}\n\n// This is declared for a reference to Formsy.Mixin in FormsyFormComponent.ts\nvar Mixin: any;\n\ninterface FormProps {\n    className?: string;\n    mapping?: Function;\n    onSuccess?: Function;\n    onError?: Function;\n    onSubmit?: Function;\n    onValidSubmit?: Function; \n    onInvalidSubmit?: Function;\n    onSubmitted?: Function;\n    onValid?: Function;\n    onInvalid?: Function;\n    onChange?: Function;\n    validationErrors?: ValidationErrors;\n    preventExternalValidation?: boolean;\n}\n\nclass Form extends React.Component<FormProps, any> { }\n\n}\n```\n``` ts\n// FormsyFormComponent.ts\n// Type wrapper for Formsy-React\n// Project: https://github.com/christianalfoni/formsy-react\n/\n * Here the Formsy.Mixin is wrapped as an abstract class, so that it can \n * be used effectively with TypeScript.\n /\nnamespace Formsy {\nexport interface FormComponentProps {\n    name: string;\n    value?: any;\n    validations?: string;\n    validationError?: string;\n    validationErrors?: ValidationErrors;\n    required?: boolean;\n    _validate?: Function;\n}\n\nexport interface FormComponentState {\n    _value: any;\n    _isRequired: boolean;\n    _isValid: boolean;\n    _isPristine: boolean;\n    _pristineValue: any,\n    _validationError: string;\n    _externalError: string;\n    _formSubmitted: boolean;\n}\n\nexport abstract class FormComponent<V, P extends FormComponentProps, S extends FormComponentState> extends React.Component<P, S> {\n\n    static defaultProps: FormComponentProps = {\n        name: null,  // this can be set to whatever, since it will be overwritten when child components are created\n        validationError: '',\n        validationErrors: {}\n    };\n\n    constructor(props: P) {\n        super(props);\n\n        // Default values for state\n        this.state = <S>Mixin.getInitialState.call(this);\n    }\n\n    // Lifecycle methods\n    componentWillMount() {\n        Mixin.componentWillMount.call(this);\n    }\n\n    componentWillReceiveProps(nextProps: P) {\n        Mixin.componentWillReceiveProps.call(this, nextProps);\n    }\n\n    componentDidUpdate(prevProps: P) {\n        Mixin.componentDidUpdate.call(this, prevProps);\n    }\n\n    componentWillUnmount() {\n        Mixin.componentWillUnmount.call(this);\n    }\n\n    // Formsy methods\n    setValue(value: V) {\n        Mixin.setValue.call(this, value);\n    }\n\n    resetvalue() {\n        Mixin.resetValue.call(this);\n    }\n\n    getValue() {\n        return <V>Mixin.getValue.call(this);\n    }\n\n    hasValue() {\n        return <boolean>Mixin.hasValue.call(this);\n    }\n\n    getErrorMessage() {\n        return <string>Mixin.getErrorMessage.call(this);\n    }\n\n    isFormDisabled() {\n        return <boolean>Mixin.isFormDisabled.call(this);\n    }\n\n    isValid() {\n        return <boolean>Mixin.isValid.call(this);\n    }\n\n    isPristine() {\n        return <boolean>Mixin.isPristine.call(this);\n    }\n\n    isFormSubmitted() {\n        return <boolean>Mixin.isFormSubmitted.call(this);\n    }\n\n    isRequired() {\n        return <boolean>Mixin.isRequired.call(this);\n    }\n\n    showRequired() {\n        return <boolean>Mixin.showRequired.call(this);\n    }\n\n    showError() {\n        return <boolean>Mixin.showError.call(this);\n    }\n\n    isValidValue(value: any) {\n        return <boolean>Mixin.isValidValue.call(this);\n    }\n\n    private setValidations(validations: string, required: boolean) {\n        Mixin.setValidations.call(this, validations, required);\n    }\n}\n\n}\n```\nExample use:\n``` ts\nnamespace MyProject.Components {\ninterface CheckboxInputProps extends Formsy.FormComponentProps {\n    label: string;\n    disabled?: boolean;\n    onChange?: (checked: boolean) => any\n}\n\n/**\n * Checkbox control for inclusion in Formsy forms.\n */\nexport class CheckboxInput extends Formsy.FormComponent<boolean, CheckboxInputProps, any> {\n\n    constructor(props: CheckboxInputProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <label>\n                <input type=\"checkbox\" checked={ this.getValue() } disabled={ this.props.disabled }\n                       onChange={ this._onChange } /> { this.props.label }\n            </label>\n        );\n    }\n\n    private _onChange = (e: React.FormEvent) => {\n        var checked = (e.nativeEvent.srcElement as HTMLInputElement).checked;\n\n        this.setValue(checked);\n\n        if (this.props.onChange) {\n            this.props.onChange(checked);\n        }\n    } \n}\n\n}\n``\n. @eriknyk The latest formsy version is using parent contexts to pass theattachToForm()` function to children, which will be undefined in @r-tock's solution because it was for an earlier version of formsy. If you use formsy 0.14.1 it should work. Formsy 0.17 I see also has an alternative solution to this using decorators. \n. @eriknyk You need to declare what parts of the context you're going to use in your component (see here), but you should probably just use this. \n. ",
    "jswxwxf": "I'm thinking that maybe we should check the isRequired when validateForm.\njs\n// We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n    var onValidationComplete = function () {\n      inputKeys.forEach(function (name) {\n        if (!inputs[name].state._isValid) {    // **should check isRequired also.**\n          allIsValid = false;\n        }\n      }.bind(this));\n. You're right.\nSorry my bad. I just tried and it works as expected. :)\n. I'm thinking that maybe we should check the isRequired when validateForm.\njs\n// We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n    var onValidationComplete = function () {\n      inputKeys.forEach(function (name) {\n        if (!inputs[name].state._isValid) {    // **should check isRequired also.**\n          allIsValid = false;\n        }\n      }.bind(this));\n. You're right.\nSorry my bad. I just tried and it works as expected. :)\n. ",
    "silvenon": "The tricky thing here is that you can no longer modify the field after the blur. You have to also setState onChange.\n. @richardaday it is confusing, yeah :+1: \n. What about the isExisty validator? Doesn't that do the same thing?\n. @christianalfoni totally agreed, the difference is clear.\nI think these are the 4 most common events to validate:\n1. on change (immediately as you type) \u2013 annoying because it screams before you had a chance to type it right\n2. when you stop typing (debounced) \u2013 IMO the coolest, but toughest to implement :grin: \n3. on blur \u2013 very cool, but works well only if you move focus to an element which is close, otherwise you might miss the error\n4. on submit \u2013 a bit too late and can be annoying for larger forms (convenient for server validations)\nIt would be nice if all 4 are implemented eventually.\n. There are a few use cases, I outlined one of them in #174.\n. I was wondering about this as well. When I don't use required, the validations are executed immediately.\n. > The fix #138 does not provide this behavior. If required=\"false\" is used then an error is thrown (because false validator doesn't exist)\nI'm using required=\"false\" and it works as expected. Maybe it got fixed since you tried it.\n. JSFiddle/JS Bin?\n. Oh, I see the issue. In case it's not clear to @christianalfoni, they're looking for a way to do something like this:\njsx\nconst App = React.createClass({\n  getInitialState() {\n    return { isRequired: false }\n  },\n  someMethod() {\n    this.setState({isRequired: true});\n  },\n  render() {\n    return (\n      <MyInput name=\"some_field\" type=\"text\" required={this.state.isRequired}>\n    );\n  }\n});\nSo when isRequired is false, the field is not required, and when it's true, the field is required. isFalse is not what they're looking for, because that requires the field to be false.\n. Hm, strange, that didn't happen to me on a very recent project :confused: \n. Validating on blur is enough for me, I didn't know it was solved already, might be a good addition to the docs :+1: \n. I suggest reading this post. React supports ES6+, therefore formsy-react supports it as well. I'm not sure how you do mixins with ES6 classes, though, the post doesn't mention it\u2026\n. To give more info, some parts of my form are a collection of inputs which affect each other, so I extracted them as separate components and nested them inside the Formsy.Form.\n. Great! Closing this then\u2026\nThis was also a duplicate of #110, my bad.\n. Or is it unchecked?\n. Indeed!\n. The tricky thing here is that you can no longer modify the field after the blur. You have to also setState onChange.\n. @richardaday it is confusing, yeah :+1: \n. What about the isExisty validator? Doesn't that do the same thing?\n. @christianalfoni totally agreed, the difference is clear.\nI think these are the 4 most common events to validate:\n1. on change (immediately as you type) \u2013 annoying because it screams before you had a chance to type it right\n2. when you stop typing (debounced) \u2013 IMO the coolest, but toughest to implement :grin: \n3. on blur \u2013 very cool, but works well only if you move focus to an element which is close, otherwise you might miss the error\n4. on submit \u2013 a bit too late and can be annoying for larger forms (convenient for server validations)\nIt would be nice if all 4 are implemented eventually.\n. There are a few use cases, I outlined one of them in #174.\n. I was wondering about this as well. When I don't use required, the validations are executed immediately.\n. > The fix #138 does not provide this behavior. If required=\"false\" is used then an error is thrown (because false validator doesn't exist)\nI'm using required=\"false\" and it works as expected. Maybe it got fixed since you tried it.\n. JSFiddle/JS Bin?\n. Oh, I see the issue. In case it's not clear to @christianalfoni, they're looking for a way to do something like this:\njsx\nconst App = React.createClass({\n  getInitialState() {\n    return { isRequired: false }\n  },\n  someMethod() {\n    this.setState({isRequired: true});\n  },\n  render() {\n    return (\n      <MyInput name=\"some_field\" type=\"text\" required={this.state.isRequired}>\n    );\n  }\n});\nSo when isRequired is false, the field is not required, and when it's true, the field is required. isFalse is not what they're looking for, because that requires the field to be false.\n. Hm, strange, that didn't happen to me on a very recent project :confused: \n. Validating on blur is enough for me, I didn't know it was solved already, might be a good addition to the docs :+1: \n. I suggest reading this post. React supports ES6+, therefore formsy-react supports it as well. I'm not sure how you do mixins with ES6 classes, though, the post doesn't mention it\u2026\n. To give more info, some parts of my form are a collection of inputs which affect each other, so I extracted them as separate components and nested them inside the Formsy.Form.\n. Great! Closing this then\u2026\nThis was also a duplicate of #110, my bad.\n. Or is it unchecked?\n. Indeed!\n. ",
    "horikx": "I inserted an initialBlur flag which was set to true on first blur then checked if initialBlur was true before executing this.getErrorMessage() in render.\n. I inserted an initialBlur flag which was set to true on first blur then checked if initialBlur was true before executing this.getErrorMessage() in render.\n. ",
    "webmasterkai": "This is the sledgehammer solution. When added to the input component it will check for a new value every 250ms and update the component value if it finds something new.\nlookForChanges: function() {\n    var fieldVal, name, stateVal;\n    name = this.props.name;\n    fieldVal = this.refs[name].getDOMNode().value;\n    if (!fieldVal) {\n      return;\n    }\n    stateVal = this.getValue();\n    if (stateVal !== fieldVal) {\n      this.setValue(fieldVal);\n      return console.log(fieldVal);\n    }\n  },\n  componentDidMount: function() {\n    var pauseBetweenCheck;\n    pauseBetweenCheck = 250;//ms\n    this.interval = setInterval(this.lookForChanges, pauseBetweenCheck);\n    return;\n  },\n  componentWillUnmount: function() {\n    return clearInterval(this.interval);\n  }\n. This is the sledgehammer solution. When added to the input component it will check for a new value every 250ms and update the component value if it finds something new.\nlookForChanges: function() {\n    var fieldVal, name, stateVal;\n    name = this.props.name;\n    fieldVal = this.refs[name].getDOMNode().value;\n    if (!fieldVal) {\n      return;\n    }\n    stateVal = this.getValue();\n    if (stateVal !== fieldVal) {\n      this.setValue(fieldVal);\n      return console.log(fieldVal);\n    }\n  },\n  componentDidMount: function() {\n    var pauseBetweenCheck;\n    pauseBetweenCheck = 250;//ms\n    this.interval = setInterval(this.lookForChanges, pauseBetweenCheck);\n    return;\n  },\n  componentWillUnmount: function() {\n    return clearInterval(this.interval);\n  }\n. ",
    "mciparelli": "I opened the bug because at first I thought it was related to the library. Now you've given your opinion @christianalfoni and I agree with you. I don't think you should pollute the library with a solution browsers should give us. I think it's better to just listen on input changes before submit in our form wrappers (although ugly), and when browsers all agree on which event should be fired when an autocomplete is performed, then we'll be able to remove that code. Feel free to close the issue if you agree with me on this.\n. I opened the bug because at first I thought it was related to the library. Now you've given your opinion @christianalfoni and I agree with you. I don't think you should pollute the library with a solution browsers should give us. I think it's better to just listen on input changes before submit in our form wrappers (although ugly), and when browsers all agree on which event should be fired when an autocomplete is performed, then we'll be able to remove that code. Feel free to close the issue if you agree with me on this.\n. ",
    "achtan": "here is my hack for text input:\n<FormsyText\n                  ref={(c) => {setTimeout(() => {c.setValue(c.muiComponent.input.value)}, 500);}}\n                  name=\"email\"\n                  required\n                  validations=\"isEmail\"\n                  floatingLabelText=\"Email\"\n                  hintText=\"email@domain.com\"\n                  fullWidth={true}\n                />\ni am using formsy-material-ui\nbut this still not enough for password field :(\n. @fxfilmxf how do you use this HOC component, can you show me an example, thx\n. here is my hack for text input:\n<FormsyText\n                  ref={(c) => {setTimeout(() => {c.setValue(c.muiComponent.input.value)}, 500);}}\n                  name=\"email\"\n                  required\n                  validations=\"isEmail\"\n                  floatingLabelText=\"Email\"\n                  hintText=\"email@domain.com\"\n                  fullWidth={true}\n                />\ni am using formsy-material-ui\nbut this still not enough for password field :(\n. @fxfilmxf how do you use this HOC component, can you show me an example, thx\n. ",
    "nye": "@christianalfoni  But now you don't have a submit button, so you can't submit on press enter key?\n. @christianalfoni  But now you don't have a submit button, so you can't submit on press enter key?\n. ",
    "richardaday": "I think this needs to be thought out some more.  For my application, I would like to validate on blur of specific inputs.  I'm in the initial stages of setting up my first Form with Formsy and am finding the error notification show up too quickly.\nA good example is an email input with a validation of isEmail.  As soon as you type the first letter of your valid email, showError() goes true.\nI can also think of many situations where the current behavior makes sense: If you have an input with an isNumeric validation, then showError() should go true as soon as someone types in a letter.\n. I did some browsing through the formsy-react code, and I do have one question: What is the purpose of formsy-react being able to manage both isValid and isRequired?  Couldn't we have treated isRequired just like any other validation and make it set isValid to false when the value is not provided?\n. Thanks for the great project.  Does this version fix the issue presented in #110?\n. Anyway to publish it to npm with a beta version?\n. I think this needs to be thought out some more.  For my application, I would like to validate on blur of specific inputs.  I'm in the initial stages of setting up my first Form with Formsy and am finding the error notification show up too quickly.\nA good example is an email input with a validation of isEmail.  As soon as you type the first letter of your valid email, showError() goes true.\nI can also think of many situations where the current behavior makes sense: If you have an input with an isNumeric validation, then showError() should go true as soon as someone types in a letter.\n. I did some browsing through the formsy-react code, and I do have one question: What is the purpose of formsy-react being able to manage both isValid and isRequired?  Couldn't we have treated isRequired just like any other validation and make it set isValid to false when the value is not provided?\n. Thanks for the great project.  Does this version fix the issue presented in #110?\n. Anyway to publish it to npm with a beta version?\n. ",
    "mguterl": "We are also interested in validate on submit and have been trying to get the current project to work this way and we're not having much luck.\n. Thanks @christianalfoni this solved my problem!\nI agree that onInvalidSubmit and onInvalid should probably pass some type of object. It seems like you could either pass a collection of errors or pass the form component and add a function that provides easier access to the errors.\n. We are also interested in validate on submit and have been trying to get the current project to work this way and we're not having much luck.\n. Thanks @christianalfoni this solved my problem!\nI agree that onInvalidSubmit and onInvalid should probably pass some type of object. It seems like you could either pass a collection of errors or pass the form component and add a function that provides easier access to the errors.\n. ",
    "idream3": "@silvenon nice summation of form events! \nI didn't know about the debounced behaviour, but now I do I want to explore it.\n@christianalfoni I don't understand why the required prop can take a validator. Shouldn't the required prop simply be present or not present (true or false) on the InputComponent?\nIsn't the use case for required to:\n1. be able to style differenty\n2. be able to prevent submit if no value is present and then highlight validation error messages such as notEmpty, isNumeric or whatever is defined for the input.\n. Here is one solution:\nAdd your own URL validation rule and sanitize your input there.\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\nThere might be a way to run the bundled URL validator within your new validator but not sure if you can access it in the current API.  Composing validators would be an interesting concept. \n. @christianalfoni @eventhough @Semigradsky \n+1 for this behaviour :)\nThis is actually a situation in our app - we display form fields all the time and are available to edit and save with no explicity 'edit' state or modal popup.\nAlthough we don't implement a reset function, if we did, I would want the pristine value to be the latest that is passed in via props and not the original value.\n. @silvenon nice summation of form events! \nI didn't know about the debounced behaviour, but now I do I want to explore it.\n@christianalfoni I don't understand why the required prop can take a validator. Shouldn't the required prop simply be present or not present (true or false) on the InputComponent?\nIsn't the use case for required to:\n1. be able to style differenty\n2. be able to prevent submit if no value is present and then highlight validation error messages such as notEmpty, isNumeric or whatever is defined for the input.\n. Here is one solution:\nAdd your own URL validation rule and sanitize your input there.\nhttps://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyaddvalidationrule\nThere might be a way to run the bundled URL validator within your new validator but not sure if you can access it in the current API.  Composing validators would be an interesting concept. \n. @christianalfoni @eventhough @Semigradsky \n+1 for this behaviour :)\nThis is actually a situation in our app - we display form fields all the time and are available to edit and save with no explicity 'edit' state or modal popup.\nAlthough we don't implement a reset function, if we did, I would want the pristine value to be the latest that is passed in via props and not the original value.\n. ",
    "dptoot": "I think this does allow for the functionality but doesn't solve the issue.  The functionality you describe to remove the classes or render outright would need to be called in an onInvalidSubmit callback.  At that point Formsy knows that the form is invalid and has errors.  A possible built in method supplied as a 4th argument to show errors on child Formsy components could facilitate this globally.\nMy concern is having to code this behaviour in to all our forms.\n. @christianalfoni Per your suggestion on Sept. 12th I am not sure that addresses the issue because a user would have had to interact with that input in some capacity.  Whether it be onChange or onBlur any pristine but required validations aren't going to get processed.  Unless I am doing something wrong (likely) it seems that required is actually falling back on HTML5 validation and bypassing formsy all together.  If we are to use isExisty or something similar to enable custom and identical validation messages then we need some hook to process those rules. \n. By no means an expert so be warned... :) \nI believe usage of the Formsy High Order Component should be used for this.\n. I think this does allow for the functionality but doesn't solve the issue.  The functionality you describe to remove the classes or render outright would need to be called in an onInvalidSubmit callback.  At that point Formsy knows that the form is invalid and has errors.  A possible built in method supplied as a 4th argument to show errors on child Formsy components could facilitate this globally.\nMy concern is having to code this behaviour in to all our forms.\n. @christianalfoni Per your suggestion on Sept. 12th I am not sure that addresses the issue because a user would have had to interact with that input in some capacity.  Whether it be onChange or onBlur any pristine but required validations aren't going to get processed.  Unless I am doing something wrong (likely) it seems that required is actually falling back on HTML5 validation and bypassing formsy all together.  If we are to use isExisty or something similar to enable custom and identical validation messages then we need some hook to process those rules. \n. By no means an expert so be warned... :) \nI believe usage of the Formsy High Order Component should be used for this.\n. ",
    "uglow": "I'm new to React, and the thing that's bugging me the most is the lack of a decent form library that allows custom components, showing errors when you want to (which is what this issue is about) and doesn't have the \"disable submit button until valid\" example which is a total UX anti-pattern.\nIs anyone interested in creating a framework-agnostic form-policy implementation (such as the one here: https://odecee.github.io/angular-form-lib/#/formPolicy (note: I'm the main contributor)), which would allow React/Ember/Polymer/Angular users to specify when errors should appear?\n. I'm new to React, and the thing that's bugging me the most is the lack of a decent form library that allows custom components, showing errors when you want to (which is what this issue is about) and doesn't have the \"disable submit button until valid\" example which is a total UX anti-pattern.\nIs anyone interested in creating a framework-agnostic form-policy implementation (such as the one here: https://odecee.github.io/angular-form-lib/#/formPolicy (note: I'm the main contributor)), which would allow React/Ember/Polymer/Angular users to specify when errors should appear?\n. ",
    "wingleungchoi": "button without type-attributes; Formsy.Form will treat those buttons as submit buttons\nadding  type='button'  can prevent this issue happen\ne.g. <button type='button' onClick={this.foo)}>foo</button>. button without type-attributes; Formsy.Form will treat those buttons as submit buttons\nadding  type='button'  can prevent this issue happen\ne.g. <button type='button' onClick={this.foo)}>foo</button>. ",
    "prattcmp": "I don't want to do client-side requests. I want to use HTTP POST. Method=\"post\" action=\"mypage.php\"\nThanks for setting the label. I couldn't do it on my phone.\n. Because then I have to handle errors and routing clientside. That would make a huge mess in my code.\n. I believe that this feature does not exist, so this is less of a question and more of a request.\n. Yes.\n. It does not do a standard POST. It triggers a submit method that has some unknown function. There is also no way to set an action or a method AFAIK.\n. Yeah, this is more of a feature request than a question now.\n. I don't want to do client-side requests. I want to use HTTP POST. Method=\"post\" action=\"mypage.php\"\nThanks for setting the label. I couldn't do it on my phone.\n. Because then I have to handle errors and routing clientside. That would make a huge mess in my code.\n. I believe that this feature does not exist, so this is less of a question and more of a request.\n. Yes.\n. It does not do a standard POST. It triggers a submit method that has some unknown function. There is also no way to set an action or a method AFAIK.\n. Yeah, this is more of a feature request than a question now.\n. ",
    "Checksum": "+1 to this. I'm using formsy mainly to maintain state for a complex form, including custom validations. Works well for that. What I would then like to do is trigger a normal HTTP post by passing the action and method parameter.\nIf this is something that will be considered, I can send a pull request.\n. +1 to this. I'm using formsy mainly to maintain state for a complex form, including custom validations. Works well for that. What I would then like to do is trigger a normal HTTP post by passing the action and method parameter.\nIf this is something that will be considered, I can send a pull request.\n. ",
    "Nopik": "I also can't believe that Formsy doesn't have this out of the box. Thats literally a book example of what <form> is for. And explaination that it does so, because of flexibility is really astounding.. as Formsy out of the box is not flexible enough to support using the existing mechanisms (and e.g. getting html response from submit, or handle target property of <form>).\nAnyway, I added https://github.com/christianalfoni/formsy-react/pull/441 to add support for standard submit. @christianalfoni: any chances to get this merged?. Bump. @aesopwolf any chances to get this merged?. I also can't believe that Formsy doesn't have this out of the box. Thats literally a book example of what <form> is for. And explaination that it does so, because of flexibility is really astounding.. as Formsy out of the box is not flexible enough to support using the existing mechanisms (and e.g. getting html response from submit, or handle target property of <form>).\nAnyway, I added https://github.com/christianalfoni/formsy-react/pull/441 to add support for standard submit. @christianalfoni: any chances to get this merged?. Bump. @aesopwolf any chances to get this merged?. ",
    "garbin": "I think this is a new feature that needs to be discussed.\n. I think this is a new feature that needs to be discussed.\n. ",
    "Ezekiah": "Thank you, I just tested with pure-render-mixin as you proposed and the speed is better, but still slow on mobile.\n. Here this is my input classe : \n```\n    import React from \"react/addons\";\nimport AppFormsMixin from \"./app_form_mixin\";\nimport Formsy from \"formsy-react\";\nimport {Alert, Col, Row} from \"react-bootstrap\";\nimport {Button} from \"react-bootstrap\";\nimport {Input} from \"react-bootstrap\";\nimport {Glyphicon} from \"react-bootstrap\";\nimport {OverlayTrigger} from \"react-bootstrap\";\nimport {Popover} from \"react-bootstrap\";\nvar PureRenderMixin = require('react/addons').addons.PureRenderMixin;\nvar CsInput = React.createClass({\n// Add the Formsy Mixin\nmixins: [Formsy.Mixin, PureRenderMixin],\n\ngetInitialState() {\n    return {\n        bsStyle:'default',\n\n    };\n},\n\ntriggerErrorInput() {\n    this.setState({\n        bsStyle:'error'\n    });\n},\n\nsetErrorMessage(error) {\n    this.setState({\n        serverError:error\n    });\n},\n\n// setValue() will set the value of the component, which in \n// turn will validate it and the rest of the form\nchangeValue(event) {\n    this.setValue(event.currentTarget.value);\n\n    if( this.props.onChange2 )\n        this.props.onChange2();\n\n    if(this.isValidValue(event.target.value))  {\n        this.setState({\n            bsStyle: \"success\",\n            serverError:''\n        });\n\n    } else {\n        this.setState({\n            bsStyle: \"error\",\n            serverError:''\n        });\n    }\n\n},\n\ngetDataId() {\n\n    return $(React.findDOMNode(this.refs.input)).find('input').dataset;\n\n},\n\nrender() {\n\n\n    var cx = React.addons.classSet;\n    var className = cx({\n        'form-group':true,\n        'required': this.showRequired(),\n        'has-error': this.showError(),\n    });\n\n    // Set a specific className based on the validation\n    // state of this component. showRequired() is true \n    // when the value is empty and the required prop is \n    // passed to the input. showError() is true when the \n    // value typed is invalid\n    //var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n\n    // An error message is returned ONLY if the component is invalid\n    // or the server has returned an error message\n    var errorMessage = this.getErrorMessage();\n\n    var inputId='input'+this.props.id;\n\n\n    return (\n\n            <div className={className}>\n\n\n                <Input {...this.props}\n                    ref=\"input\" \n                    data-id={this.props.dataId} \n                    id={inputId}\n                    label={this.props.label} \n                    onChange={this.changeValue}\n                    value={this.getValue()}\n                    bsStyle={this.state.bsStyle}\n                    groupClassName='group-class'\n                    labelClassName='label-class'\n                    hasFeedback\n                    help={this.props.popoverContent}\n                    >\n\n\n                    <span className=\"text-danger\"><b>{this.state.serverError}{errorMessage}</b></span>\n\n                </Input>\n\n\n\n\n\n\n\n            </div>\n\n\n\n    );\n}\n\n});\nexport default CsInput;\n```\nAnd here I call the class :\n```\nvar config_params = this.props.config[0].params.map(function(param,index) {\n            var id = param.label+param.id\n        return (\n\n                <div>\n                    <CsInput type='text' label={param.label}\n                        id={id} value={param.value} name={param.label}\n\n                        dataId={param.id} data-label={param.label} data-value={param.value}\n                        required\n                        validations={{matchRegexp: /^([A-Za-z0-9]{1,30})$/}}\n                        validationError='Les caract\u00e8res sp\u00e9ciaux ne sont pas autoris\u00e9s'\n\n                    />\n\n\n                </div>\n        );\n\n        i = i+1;\n    });\n\n```\nI notice that each time i write something in an input, all cs_inputs are re rendered, but I think it's normal, thanks to pureRenderMixin ProductConfigForm doesn't update when I change an input. \n. No, setvalue validate all the form, that's why all inputs are rerendered.\n. I made a test by commenting this.validateForm  here and it became perfectly fast but that's not surprising, maybe launching regex validations on 50 inputs eat performance.\n. Thank you, I just tested with pure-render-mixin as you proposed and the speed is better, but still slow on mobile.\n. Here this is my input classe : \n```\n    import React from \"react/addons\";\nimport AppFormsMixin from \"./app_form_mixin\";\nimport Formsy from \"formsy-react\";\nimport {Alert, Col, Row} from \"react-bootstrap\";\nimport {Button} from \"react-bootstrap\";\nimport {Input} from \"react-bootstrap\";\nimport {Glyphicon} from \"react-bootstrap\";\nimport {OverlayTrigger} from \"react-bootstrap\";\nimport {Popover} from \"react-bootstrap\";\nvar PureRenderMixin = require('react/addons').addons.PureRenderMixin;\nvar CsInput = React.createClass({\n// Add the Formsy Mixin\nmixins: [Formsy.Mixin, PureRenderMixin],\n\ngetInitialState() {\n    return {\n        bsStyle:'default',\n\n    };\n},\n\ntriggerErrorInput() {\n    this.setState({\n        bsStyle:'error'\n    });\n},\n\nsetErrorMessage(error) {\n    this.setState({\n        serverError:error\n    });\n},\n\n// setValue() will set the value of the component, which in \n// turn will validate it and the rest of the form\nchangeValue(event) {\n    this.setValue(event.currentTarget.value);\n\n    if( this.props.onChange2 )\n        this.props.onChange2();\n\n    if(this.isValidValue(event.target.value))  {\n        this.setState({\n            bsStyle: \"success\",\n            serverError:''\n        });\n\n    } else {\n        this.setState({\n            bsStyle: \"error\",\n            serverError:''\n        });\n    }\n\n},\n\ngetDataId() {\n\n    return $(React.findDOMNode(this.refs.input)).find('input').dataset;\n\n},\n\nrender() {\n\n\n    var cx = React.addons.classSet;\n    var className = cx({\n        'form-group':true,\n        'required': this.showRequired(),\n        'has-error': this.showError(),\n    });\n\n    // Set a specific className based on the validation\n    // state of this component. showRequired() is true \n    // when the value is empty and the required prop is \n    // passed to the input. showError() is true when the \n    // value typed is invalid\n    //var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n\n    // An error message is returned ONLY if the component is invalid\n    // or the server has returned an error message\n    var errorMessage = this.getErrorMessage();\n\n    var inputId='input'+this.props.id;\n\n\n    return (\n\n            <div className={className}>\n\n\n                <Input {...this.props}\n                    ref=\"input\" \n                    data-id={this.props.dataId} \n                    id={inputId}\n                    label={this.props.label} \n                    onChange={this.changeValue}\n                    value={this.getValue()}\n                    bsStyle={this.state.bsStyle}\n                    groupClassName='group-class'\n                    labelClassName='label-class'\n                    hasFeedback\n                    help={this.props.popoverContent}\n                    >\n\n\n                    <span className=\"text-danger\"><b>{this.state.serverError}{errorMessage}</b></span>\n\n                </Input>\n\n\n\n\n\n\n\n            </div>\n\n\n\n    );\n}\n\n});\nexport default CsInput;\n```\nAnd here I call the class :\n```\nvar config_params = this.props.config[0].params.map(function(param,index) {\n            var id = param.label+param.id\n        return (\n\n                <div>\n                    <CsInput type='text' label={param.label}\n                        id={id} value={param.value} name={param.label}\n\n                        dataId={param.id} data-label={param.label} data-value={param.value}\n                        required\n                        validations={{matchRegexp: /^([A-Za-z0-9]{1,30})$/}}\n                        validationError='Les caract\u00e8res sp\u00e9ciaux ne sont pas autoris\u00e9s'\n\n                    />\n\n\n                </div>\n        );\n\n        i = i+1;\n    });\n\n```\nI notice that each time i write something in an input, all cs_inputs are re rendered, but I think it's normal, thanks to pureRenderMixin ProductConfigForm doesn't update when I change an input. \n. No, setvalue validate all the form, that's why all inputs are rerendered.\n. I made a test by commenting this.validateForm  here and it became perfectly fast but that's not surprising, maybe launching regex validations on 50 inputs eat performance.\n. ",
    "charles-tai": "Purerendermixin currently doesn't work with Formsy as discussed here: \nhttps://github.com/christianalfoni/formsy-react/issues/134\n(The solution is also provided in the discussion) \nI've created a patch with the solution proposed by christianalfoni: \nhttps://www.npmjs.com/package/formsy-react-patch\n. Purerendermixin currently doesn't work with Formsy as discussed here: \nhttps://github.com/christianalfoni/formsy-react/issues/134\n(The solution is also provided in the discussion) \nI've created a patch with the solution proposed by christianalfoni: \nhttps://www.npmjs.com/package/formsy-react-patch\n. ",
    "vikasrohit": "Thanks @charles-tai for the patch.\n@christianalfoni I am not able to see the changes yet in latest release. Are you planning to have it in latest one?. Thanks @rkuykendall for pointer. I would file it at appropriate location.. Thanks @charles-tai for the patch.\n@christianalfoni I am not able to see the changes yet in latest release. Are you planning to have it in latest one?. Thanks @rkuykendall for pointer. I would file it at appropriate location.. ",
    "elverskog": "Hi. Thanks for the great work. Really like the flexibility. Any plans to convert to using a decorator (or away from a mixin in some fashion)? I tried using react-mixin-decorator but the issue where dug too deep in to mess with it.\n. Hi. Thanks for the great work. Really like the flexibility. Any plans to convert to using a decorator (or away from a mixin in some fashion)? I tried using react-mixin-decorator but the issue where dug too deep in to mess with it.\n. ",
    "eriknyk": "Hi, \nit is not good time to have ES6 classes support from here, at this branch?\nBest Regards.\n. great! +1\n. Hi @r-tock,\nYour temporal solutions was working fine until now, I'm getting \nUncaught TypeError: Cannot read property 'attachToForm' of undefined\nI tried the changes that you posted above:\n(version without lodash)\n``` javascript\nimport React, { Component } from 'react';\nimport Formsy from 'formsy-react';\nimport BaseComponent from './BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be\n * extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseComponent {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n\n  if (FormComponent.ignoredMixinMethods.indexOf(method) !== -1) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\n  componentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\nBut the error still is being thrown:\nUncaught TypeError: Cannot read property 'attachToForm' of undefined\nMixin.js\n\ndo you have any idea? I'm using the latest version of formsy-react@0.17.0\nBest Regards.\n. Thanks @mindcruzer,\nthere is some of documentation about howto pass the formsy context, to the childs?\n. :o @FormsyElement()\nI will immediately try it\nthank you a lot! @mindcruzer \n. Thanks \n. any update for this?\n. I have an issue regarding with this issue,\nfor a select component,\nthe only way to set a default value is setting  value=\"US\", because setting defaultValue=\"US\" is null when the form is submitted, if the user leaves the default value for it,\nbut when I set (value=\"US\") the select control wont change its value visually\n. +1\n. +1\n. any thoughts from maintainers? is something missing for the PR? \n. it would be great some feedback from the authors\n. I've notice the same, \nseems by some reason onChange event of all inputs of the form are being fired at same time of the current input \n. Hi, \nit is not good time to have ES6 classes support from here, at this branch?\nBest Regards.\n. great! +1\n. Hi @r-tock,\nYour temporal solutions was working fine until now, I'm getting \nUncaught TypeError: Cannot read property 'attachToForm' of undefined\nI tried the changes that you posted above:\n(version without lodash)\n``` javascript\nimport React, { Component } from 'react';\nimport Formsy from 'formsy-react';\nimport BaseComponent from './BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be\n * extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseComponent {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n\n  if (FormComponent.ignoredMixinMethods.indexOf(method) !== -1) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\n  componentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\nBut the error still is being thrown:\nUncaught TypeError: Cannot read property 'attachToForm' of undefined\nMixin.js\n\ndo you have any idea? I'm using the latest version of formsy-react@0.17.0\nBest Regards.\n. Thanks @mindcruzer,\nthere is some of documentation about howto pass the formsy context, to the childs?\n. :o @FormsyElement()\nI will immediately try it\nthank you a lot! @mindcruzer \n. Thanks \n. any update for this?\n. I have an issue regarding with this issue,\nfor a select component,\nthe only way to set a default value is setting  value=\"US\", because setting defaultValue=\"US\" is null when the form is submitted, if the user leaves the default value for it,\nbut when I set (value=\"US\") the select control wont change its value visually\n. +1\n. +1\n. any thoughts from maintainers? is something missing for the PR? \n. it would be great some feedback from the authors\n. I've notice the same, \nseems by some reason onChange event of all inputs of the form are being fired at same time of the current input \n. ",
    "yesmeck": "Great! :beers: \n. Great! :beers: \n. ",
    "adamalbrecht": "+1 just ran into this\n. +1 just ran into this\n. ",
    "ajaykurien": "Thanks @Semigradsky, and to @christianalfoni for a superb library.\n@adamalbrecht, a short term workaround courtesy of @garbin, detailed at https://github.com/christianalfoni/formsy-react/pull/153/files\nsrc/main.js:\n``` js\nmapModel: function () {\n    if (this.props.mapping) {\n      return this.props.mapping(this.model)\n    } else {\n      return Object.keys(this.model).reduce(function (mappedModel, key) {\n    var keyArray = key.split('.');\n    var base = mappedModel;\n    while (keyArray.length) {\n      var currentKey = keyArray.shift();\n      base = (base[currentKey] = keyArray.length ? base[currentKey] || {} : this.model[key]);\n    }\n\n    return mappedModel;\n\n  }.bind(this), {});\n}\n\n},\n```\n. Thanks @Semigradsky, and to @christianalfoni for a superb library.\n@adamalbrecht, a short term workaround courtesy of @garbin, detailed at https://github.com/christianalfoni/formsy-react/pull/153/files\nsrc/main.js:\n``` js\nmapModel: function () {\n    if (this.props.mapping) {\n      return this.props.mapping(this.model)\n    } else {\n      return Object.keys(this.model).reduce(function (mappedModel, key) {\n    var keyArray = key.split('.');\n    var base = mappedModel;\n    while (keyArray.length) {\n      var currentKey = keyArray.shift();\n      base = (base[currentKey] = keyArray.length ? base[currentKey] || {} : this.model[key]);\n    }\n\n    return mappedModel;\n\n  }.bind(this), {});\n}\n\n},\n```\n. ",
    "jaraquistain": "@christianalfoni Any idea when the next version containing this fix will be released?\n. @rockingskier My solution for that kind of experience in the past has been to have an error message associated with each input that is populated by either \"required\" or its error message. You can style this whole error state however you'd like, but the important thing is that none of the styles are visible unless there is a \"show-errors\" class on the form itself (controlled either manually or tied to some state value).\nThat way you can setState({ showErrors: true }) inside of your onInvalidSubmit handler.\nThe net result is that the user will only see validation errors when they try to submit the form with invalid values, including whatever messaging you had styled for required fields. This may or may not be your desired experience as its very subjective, but in my opinion the most common use case is correct form filling so its best to not disrupt the user with immediate validation.\n_Validated Form Component_\n``` jsx\nimport React from \"react\";\nimport Formsy from \"formsy-react\";\nlet ValidatedInput = React.createClass({\n    mixins: [Formsy.Mixin],\n    propTypes: {\n        name: React.PropTypes.string.isRequired,\n        type: React.PropTypes.string,\n        inputClassName: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        label: React.PropTypes.string\n    },\n    changeValue(e) {\n        this.setValue(e.currentTarget.value);\n        this.props.onChange(e);\n    },\n    render() {\n        let errorMessage = this.getErrorMessage();\n    return (\n        <div\n            className={[\"eo-validated-input\", this.props.className, (this.showError() ? \"error\" : null), (this.showRequired() ? \"required\" : null)].join(\" \")}>\n            { this.props.label ?\n                <label className=\"eo-input-label\" htmlFor={this.props.name}>{this.props.label}</label> : null }\n            <input placeholder={this.props.placeholder}\n                   className={[\"eo-input\", this.props.inputClassName].join(\" \")}\n                   type={this.props.type || \"text\"}\n                   name={this.props.name}\n                   onChange={this.changeValue}\n                   value={this.getValue()}/>\n            <span className=\"eo-validation-error\">{this.showRequired() ? \"Required\" : errorMessage}</span>\n        </div>\n    );\n}\n\n});\nexport default ValidatedInput;\n```\n_Relevant error styles_\ncss\n.show-errors {\n     .error, .required {\n         .eo-input {\n             border: 1px solid $eo-red;\n             color: $eo-red;\n             @include placeholder {\n                 color: $eo-red;\n             }\n         }\n         .eo-validation-error {\n             display: block;\n             color: $eo-red;\n             @include font-smoothing();\n         }\n     }\n     .eo-form-validation-error {\n         color: $eo-red;\n         margin: $eo-gutter/4 0;\n     }\n }\n. Anyone?\n. You could wrap the form in a ternary like { this.state.validSubmit ? [Thanks markup] : [Form markup]}\n. If this were the case I'd definitely be using it over redux-form in my new app refactor\n. Nvm I'm an idiot, it was an unrelated error on the page killing Javascript.\n. @christianalfoni Any idea when the next version containing this fix will be released?\n. @rockingskier My solution for that kind of experience in the past has been to have an error message associated with each input that is populated by either \"required\" or its error message. You can style this whole error state however you'd like, but the important thing is that none of the styles are visible unless there is a \"show-errors\" class on the form itself (controlled either manually or tied to some state value).\nThat way you can setState({ showErrors: true }) inside of your onInvalidSubmit handler.\nThe net result is that the user will only see validation errors when they try to submit the form with invalid values, including whatever messaging you had styled for required fields. This may or may not be your desired experience as its very subjective, but in my opinion the most common use case is correct form filling so its best to not disrupt the user with immediate validation.\n_Validated Form Component_\n``` jsx\nimport React from \"react\";\nimport Formsy from \"formsy-react\";\nlet ValidatedInput = React.createClass({\n    mixins: [Formsy.Mixin],\n    propTypes: {\n        name: React.PropTypes.string.isRequired,\n        type: React.PropTypes.string,\n        inputClassName: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        label: React.PropTypes.string\n    },\n    changeValue(e) {\n        this.setValue(e.currentTarget.value);\n        this.props.onChange(e);\n    },\n    render() {\n        let errorMessage = this.getErrorMessage();\n    return (\n        <div\n            className={[\"eo-validated-input\", this.props.className, (this.showError() ? \"error\" : null), (this.showRequired() ? \"required\" : null)].join(\" \")}>\n            { this.props.label ?\n                <label className=\"eo-input-label\" htmlFor={this.props.name}>{this.props.label}</label> : null }\n            <input placeholder={this.props.placeholder}\n                   className={[\"eo-input\", this.props.inputClassName].join(\" \")}\n                   type={this.props.type || \"text\"}\n                   name={this.props.name}\n                   onChange={this.changeValue}\n                   value={this.getValue()}/>\n            <span className=\"eo-validation-error\">{this.showRequired() ? \"Required\" : errorMessage}</span>\n        </div>\n    );\n}\n\n});\nexport default ValidatedInput;\n```\n_Relevant error styles_\ncss\n.show-errors {\n     .error, .required {\n         .eo-input {\n             border: 1px solid $eo-red;\n             color: $eo-red;\n             @include placeholder {\n                 color: $eo-red;\n             }\n         }\n         .eo-validation-error {\n             display: block;\n             color: $eo-red;\n             @include font-smoothing();\n         }\n     }\n     .eo-form-validation-error {\n         color: $eo-red;\n         margin: $eo-gutter/4 0;\n     }\n }\n. Anyone?\n. You could wrap the form in a ternary like { this.state.validSubmit ? [Thanks markup] : [Form markup]}\n. If this were the case I'd definitely be using it over redux-form in my new app refactor\n. Nvm I'm an idiot, it was an unrelated error on the page killing Javascript.\n. ",
    "sloria": "Thanks for the response @idream3 . That could work, but I'd like to display the sanitized value on blur. I'm not sure that there is a way to modify the value within a validator.\n. Thanks for the response @idream3 . That could work, but I'd like to display the sanitized value on blur. I'm not sure that there is a way to modify the value within a validator.\n. ",
    "benjamindulau": "This seems to be fixed in master by https://github.com/christianalfoni/formsy-react/pull/138\nCan we expect a new version to be published soon? ;-)\n. This seems to be fixed in master by https://github.com/christianalfoni/formsy-react/pull/138\nCan we expect a new version to be published soon? ;-)\n. ",
    "varzock": "I'm reporting the same issue (v. 0.14.1) as Nicolab. It's very irritating. Hope it gets fixed soon.\n. I'm reporting the same issue (v. 0.14.1) as Nicolab. It's very irritating. Hope it gets fixed soon.\n. ",
    "C3PablO": "@silvenon Here is a jsfiddle running the problem with the \"login\" example: https://jsfiddle.net/69z2wepo/15415/\nIt works with the repository configuration but not in different environments.\nIt triggers the email validation if the field is not required.\n. tried with last release and it works\n. Works nice! Thanks! When are you planning next release?\n. I had the same problem but just with textarea fields. I have a formsy-react wrapper for my input components so I can use them with o without formsy-react. Calling reset was cleaning the values as expected but passing undefined as a value to the children component didn't updated it so I end up passing value={this.getValue() || ''} and that solved the issue . @silvenon Here is a jsfiddle running the problem with the \"login\" example: https://jsfiddle.net/69z2wepo/15415/\nIt works with the repository configuration but not in different environments.\nIt triggers the email validation if the field is not required.\n. tried with last release and it works\n. Works nice! Thanks! When are you planning next release?\n. I had the same problem but just with textarea fields. I have a formsy-react wrapper for my input components so I can use them with o without formsy-react. Calling reset was cleaning the values as expected but passing undefined as a value to the children component didn't updated it so I end up passing value={this.getValue() || ''} and that solved the issue . ",
    "mythfish": "+1\n. I want the empty is a valid value. The validation you mentioned can not match the requirement.\nValidation \"isEmptyOrNumeric\" is what I want.\n. @Semigradsky , thanks.\n. +1\n. I want the empty is a valid value. The validation you mentioned can not match the requirement.\nValidation \"isEmptyOrNumeric\" is what I want.\n. @Semigradsky , thanks.\n. ",
    "martindederer": "Did this feature make it into a release yet?\n. I did some digging and apparently it is still missing.\n@christianalfoni: Do you have any preference on the method signature of the onSubmit/onInvalidSubmit methods? Would supplying the \"this.inputs\" member of Formsy.Form in fourth position of the said methods be ok?\n. Did this feature make it into a release yet?\n. I did some digging and apparently it is still missing.\n@christianalfoni: Do you have any preference on the method signature of the onSubmit/onInvalidSubmit methods? Would supplying the \"this.inputs\" member of Formsy.Form in fourth position of the said methods be ok?\n. ",
    "israelidanny": "+1 \nI think this is a great idea. Validating on the fly can be incredibly annoying.\n. +1 \nI think this is a great idea. Validating on the fly can be incredibly annoying.\n. ",
    "CrisLi": "I think I posted a similar request. After did that I found this thread. It will be very nice if formsy-react has this feature.\n. @christianalfoni \nDo you have any plans when validateOnSubmit will be released? We are using formsy-react in our project, currently, we take your suggestion (by having a className on the form). But it is not efficient, each Input component will be rendered 4 times after user type some thing into it.\n. I think I posted a similar request. After did that I found this thread. It will be very nice if formsy-react has this feature.\n. @christianalfoni \nDo you have any plans when validateOnSubmit will be released? We are using formsy-react in our project, currently, we take your suggestion (by having a className on the form). But it is not efficient, each Input component will be rendered 4 times after user type some thing into it.\n. ",
    "josecanhelp": "I came across this issue as well, but using 0.14. It turned out I was including react twice on the page in question. Removed one of the references and it cleared up the error.\n. I came across this issue as well, but using 0.14. It turned out I was including react twice on the page in question. Removed one of the references and it cleared up the error.\n. ",
    "oscar-g": "I got it to work by using React.createClass in MyInput (or wherever you want to use mixins).  I use the extends React.Component syntax everywhere else in my app.\nStraight from the docs:\n```\nexport const Input = React.createClass({\n    mixins: [Formsy.Mixin],\n// setValue() will set the value of the component, which in \n// turn will validate it and the rest of the form\nchangeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n},\nrender: function () {\n\n    var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n    var errorMessage = this.getErrorMessage();\n\n    return (\n    <div className={className}>\n        <input type=\"text\" onChange={this.changeValue} value={this.getValue()} placeholder={this.props.placeholder}/>\n        <span>{errorMessage}</span>\n    </div>\n    );\n}\n\n});\n```\nI hope that helps someone :)\n. @diessica Yes, that is the way to go now! +1\n. I got it to work by using React.createClass in MyInput (or wherever you want to use mixins).  I use the extends React.Component syntax everywhere else in my app.\nStraight from the docs:\n```\nexport const Input = React.createClass({\n    mixins: [Formsy.Mixin],\n// setValue() will set the value of the component, which in \n// turn will validate it and the rest of the form\nchangeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n},\nrender: function () {\n\n    var className = this.showRequired() ? 'required' : this.showError() ? 'error' : null;\n    var errorMessage = this.getErrorMessage();\n\n    return (\n    <div className={className}>\n        <input type=\"text\" onChange={this.changeValue} value={this.getValue()} placeholder={this.props.placeholder}/>\n        <span>{errorMessage}</span>\n    </div>\n    );\n}\n\n});\n```\nI hope that helps someone :)\n. @diessica Yes, that is the way to go now! +1\n. ",
    "diessica": "See https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc\n. See https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc\n. ",
    "alexfqc": "@oscar-g I think the same! +1!\n. @oscar-g I think the same! +1!\n. ",
    "rockingskier": "147 is definitely headed in the right direction.\nI guess what I am looking for isn't validation on submit necessarily but more for \"You missed a field\" to highlight required fields.\nWith larger forms the user might miss a field and we don't want to ask them to review the whole form to find it before we enable the submit button.  Personally, allowing them to submit and then highlight missed fields is a better user experience.\n. #147 is definitely headed in the right direction.\nI guess what I am looking for isn't validation on submit necessarily but more for \"You missed a field\" to highlight required fields.\nWith larger forms the user might miss a field and we don't want to ask them to review the whole form to find it before we enable the submit button.  Personally, allowing them to submit and then highlight missed fields is a better user experience.\n. ",
    "kibs": "A use case could be, lets say an email or username field, when typing in the field, a validator could call an API to check if the email/username is already taken by another user. This could happen onBlur, or maybe using a debounce function.\n. A use case could be, lets say an email or username field, when typing in the field, a validator could call an API to check if the email/username is already taken by another user. This could happen onBlur, or maybe using a debounce function.\n. ",
    "pjanik": "Hm, any good examples for async validation performed onChange (with some debounce) or onBlur?\nI've been trying to design something nice using Formsy API, but each time I hit the wall.\n. Hm, any good examples for async validation performed onChange (with some debounce) or onBlur?\nI've been trying to design something nice using Formsy API, but each time I hit the wall.\n. ",
    "lfbn": "Interesting question.\nWhat I ended up doing was having a reference to the input, and after the validation response from the server called setValue with it's getValue. Not pretty.\nIn my case this was a situation where I needed to do a debounced server-side validation on each key press.\nAnyone has better ideas?\n. Interesting question.\nWhat I ended up doing was having a reference to the input, and after the validation response from the server called setValue with it's getValue. Not pretty.\nIn my case this was a situation where I needed to do a debounced server-side validation on each key press.\nAnyone has better ideas?\n. ",
    "neopeak": "Depending on your use case, the onChange event will receive all the currentValues of the form, so you can track the values this way.\n. Depending on your use case, the onChange event will receive all the currentValues of the form, so you can track the values this way.\n. ",
    "rodryquintero": "I tried the onChange event on the form, but it can make the component a\nlittle jerky at times.\nThis is why I think it is very convenient to just have access to the form's\nstate at any time.\nOn Wed, Aug 5, 2015 at 10:49 AM, Cedric Veilleux notifications@github.com\nwrote:\n\nDepending on your use case, the onChange event will receive all the\ncurrentValues of the form, so you can track the values this way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/178#issuecomment-128046644\n.\n\n\n**** Ivan Quintero\n. It feels jerky everytime you start typing text into the child components. It stopped when I removed the callback. If the forms form values (state) is accesible/public to parent components at all times we would not need to populate an object with the values everytime there is a change event on children.\n. I don't remember what I was doing exactly on the callback, but it is very probable that I was updating an object to keep track of the form changes. Every keystroke on the form would trigger this callback.\nSince I  know that Formsy, somewhere, keeps track of these changes, I thought it would be more efficient to simply look at the variable holding this information.\n. I tried the onChange event on the form, but it can make the component a\nlittle jerky at times.\nThis is why I think it is very convenient to just have access to the form's\nstate at any time.\nOn Wed, Aug 5, 2015 at 10:49 AM, Cedric Veilleux notifications@github.com\nwrote:\n\nDepending on your use case, the onChange event will receive all the\ncurrentValues of the form, so you can track the values this way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/178#issuecomment-128046644\n.\n\n\n**** Ivan Quintero\n. It feels jerky everytime you start typing text into the child components. It stopped when I removed the callback. If the forms form values (state) is accesible/public to parent components at all times we would not need to populate an object with the values everytime there is a change event on children.\n. I don't remember what I was doing exactly on the callback, but it is very probable that I was updating an object to keep track of the form changes. Every keystroke on the form would trigger this callback.\nSince I  know that Formsy, somewhere, keeps track of these changes, I thought it would be more efficient to simply look at the variable holding this information.\n. ",
    "rohithkutty": "How to use isGreaterThan function in validation of forms.\nit is throwing an error to me saying \"isGreaterThan\" is not a validation rule of formsy. How to use isGreaterThan function in validation of forms.\nit is throwing an error to me saying \"isGreaterThan\" is not a validation rule of formsy. ",
    "anilljoshi": "how can i give validation error for minLength and maxLength in react-material-ui-form-validator. Please help\nTIA. how can i give validation error for minLength and maxLength in react-material-ui-form-validator. Please help\nTIA. ",
    "feorex": "Also we can add a bit of dumb heuristics to recognize Arrays:\njavascript\nif (keyArray.length > 0) {\n    if (!!currentModel[currentKey]) {\n        currentModel = currentModel[currentKey];\n    } else {\n        currentModel = currentModel[currentKey] = isNaN(keyArray[0]) ? {} : [];\n    }\n} else {\n    currentModel[currentKey] = model[key];\n}\n. Also we can add a bit of dumb heuristics to recognize Arrays:\njavascript\nif (keyArray.length > 0) {\n    if (!!currentModel[currentKey]) {\n        currentModel = currentModel[currentKey];\n    } else {\n        currentModel = currentModel[currentKey] = isNaN(keyArray[0]) ? {} : [];\n    }\n} else {\n    currentModel[currentKey] = model[key];\n}\n. ",
    "ColeTownsend": "+1 on this. In most cases people won't be simply copying and pasting a valid email into the form, instantly. I'd love to have a setTimeout option on the onError or validation function.\n. +1 on this. In most cases people won't be simply copying and pasting a valid email into the form, instantly. I'd love to have a setTimeout option on the onError or validation function.\n. ",
    "camerow": "Another +1 here. Any way we can get something like an onBlur validation check. Or perhaps you have a Formsy way for doing such a thing already?\n. Another +1 here. Any way we can get something like an onBlur validation check. Or perhaps you have a Formsy way for doing such a thing already?\n. ",
    "lsgrep": "+1 this will be nice.\n. +1 this will be nice.\n. ",
    "frederickfogerty": "Sorry for being so ignorant, I should've checked the issues first\n. Sorry for being so ignorant, I should've checked the issues first\n. ",
    "wwsun": "thx\n. thx\n. ",
    "scotro": "The example would work for onSubmit, however onChange doesn't provide an invalidate in the args it passes to the handler.\nIt is possible to set validation errors on the form component as an alternative to calling invalidate. Unfortunately, doing so appears to override the built-in validation at the component level.\n. The example would work for onSubmit, however onChange doesn't provide an invalidate in the args it passes to the handler.\nIt is possible to set validation errors on the form component as an alternative to calling invalidate. Unfortunately, doing so appears to override the built-in validation at the component level.\n. ",
    "CharlieGreenman": "@EthanML did you ever find a viable solution for accessing child components? Thanks!\n. @EthanML , thank you for responding, that really helped. Your own solution, did you manage to use a ref on components, with Formsy, or did you have to forgo Formsy altogether? Thanks again :)\n. @EthanML did you ever find a viable solution for accessing child components? Thanks!\n. @EthanML , thank you for responding, that really helped. Your own solution, did you manage to use a ref on components, with Formsy, or did you have to forgo Formsy altogether? Thanks again :)\n. ",
    "EthanML": "@CharlieGreenman I'm afraid not, we ended up rolling our own solution in the end for this. \n. @CharlieGreenman I'm afraid not, we ended up rolling our own solution in the end for this. \n. ",
    "vishesh774": "@Semigradsky I have a problem with using getModel(). I tried whats there in the documentation but end up getting \"Uncaught TypeError: this.refs.form.getModel is not a function\"\nMy Code is \nvar VehicleFilters = React.createClass({\n    filterVehicles : function(){\n      alert(this.refs.form.getModel());\n    },\n    render: function () {\n      return (\n<Formsy.Form ref=\"form\">\n<NumberBox name=\"vehiclelength\" labelval=\"L\"/>\n</Formsy.Form>\n      );\n    }\n  });\nNumberBox is a component which i require() from a different file.Any help on this is appreciated.\n. @Semigradsky I have a problem with using getModel(). I tried whats there in the documentation but end up getting \"Uncaught TypeError: this.refs.form.getModel is not a function\"\nMy Code is \nvar VehicleFilters = React.createClass({\n    filterVehicles : function(){\n      alert(this.refs.form.getModel());\n    },\n    render: function () {\n      return (\n<Formsy.Form ref=\"form\">\n<NumberBox name=\"vehiclelength\" labelval=\"L\"/>\n</Formsy.Form>\n      );\n    }\n  });\nNumberBox is a component which i require() from a different file.Any help on this is appreciated.\n. ",
    "jamesjjk": "@r-tock Nicely done! Would be great to see a ES7 decorator and the Mixin deprecated.. I read its being worked on. Just incase you need it for other components: https://github.com/brigand/react-mixin\n. @r-tock Nicely done! Would be great to see a ES7 decorator and the Mixin deprecated.. I read its being worked on. Just incase you need it for other components: https://github.com/brigand/react-mixin\n. ",
    "ekaradon": "@r-tock, beware, this part is not a valid ES6 solution:\n``` javascript\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\n// Use this instead:\nFormComponent.defaultProps = {\n    validationError: '',\n    validationErrors: {}\n};\n```\nFurthermore, using Babel as transtyper, I had to add this part:\njavascript\n    isMounted() {\n        return super.isMounted();\n    }\nProbably because the method is deprecated:\nconsole\nWarning: isMounted(...) is deprecated in plain JavaScript React classes. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\n. @r-tock, beware, this part is not a valid ES6 solution:\n``` javascript\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\n// Use this instead:\nFormComponent.defaultProps = {\n    validationError: '',\n    validationErrors: {}\n};\n```\nFurthermore, using Babel as transtyper, I had to add this part:\njavascript\n    isMounted() {\n        return super.isMounted();\n    }\nProbably because the method is deprecated:\nconsole\nWarning: isMounted(...) is deprecated in plain JavaScript React classes. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\n. ",
    "r-tock": "I am aware. I should have prefixed that I was using some of es7 in there.\nLike you have shown it should have an easy transformation to es6. The goal\nwas to showcase that FormComponent to see if React-Formsy is willing to go\nthat direction.\nOn Sep 7, 2015 10:59, \"ekaradon\" notifications@github.com wrote:\n\n@r-tock https://github.com/r-tock, beware, this is part is not a valid\nES6 solution:\nstatic defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\n// Use this instead:\nFormComponent.defaultProps = {\n    validationError: '',\n    validationErrors: {}\n};\nFurthermore, using Babel as transtyper, I had to add this part:\nisMounted() {\n    return super.isMounted();\n}\nProbably because the method is deprecated:\nWarning: isMounted(...) is deprecated in plain JavaScript React classes. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/191#issuecomment-138330790\n.\n. Sounds great!\n. Here is the updated state of the FormComponent fixing some of the issues I have seen with it. Lodash is strictly not required by we are using it.\n\nFor reference.\n``` jsx\nimport _ from 'lodash';\nimport Formsy from 'formsy-react';\nimport BaseComponent from 'components/BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseConnector {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n  if (_.contains(FormComponent.ignoredMixinMethods, method)) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\n  componentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\n. Again to re-iterate,  I would much rather use the Formsy's version of such a component. This is temporary.\n. Unfortunately, I don't have a solution, we haven't been able to move to new Formsy as they use react-0.14 and our dependency on MartyJS (sigh) is preventing us from moving ahead. Hopefully I will be with you guys soon enough once we move to Redux and get us over to use the new Formsy version.\n. Also please keep the thread updated with with your working version.\n. Here is the version that works with React 0.14\n``` jsx\nimport React from 'react';\nimport Formsy from 'formsy-react';\nimport BaseComponent from 'components/BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseConnector {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  };\nstatic contextTypes = {\n    formsy: React.PropTypes.object,\n  };\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n\n  if (FormComponent.ignoredMixinMethods.indexOf(method) !== -1) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\ncomponentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\n. FWIW, My team, is actively migrating away from Formsy to redux-form. We have tried to get the most out of Formsy. However redux has taken over our world, and redux-form solves some of the weird data cycles we see with Formsy and we find it easier to build form components with it.\n. I am aware. I should have prefixed that I was using some of es7 in there.\nLike you have shown it should have an easy transformation to es6. The goal\nwas to showcase that FormComponent to see if React-Formsy is willing to go\nthat direction.\nOn Sep 7, 2015 10:59, \"ekaradon\" notifications@github.com wrote:\n\n@r-tock https://github.com/r-tock, beware, this is part is not a valid\nES6 solution:\nstatic defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\n// Use this instead:\nFormComponent.defaultProps = {\n    validationError: '',\n    validationErrors: {}\n};\nFurthermore, using Babel as transtyper, I had to add this part:\nisMounted() {\n    return super.isMounted();\n}\nProbably because the method is deprecated:\nWarning: isMounted(...) is deprecated in plain JavaScript React classes. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/191#issuecomment-138330790\n.\n. Sounds great!\n. Here is the updated state of the FormComponent fixing some of the issues I have seen with it. Lodash is strictly not required by we are using it.\n\nFor reference.\n``` jsx\nimport _ from 'lodash';\nimport Formsy from 'formsy-react';\nimport BaseComponent from 'components/BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseConnector {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  }\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n  if (_.contains(FormComponent.ignoredMixinMethods, method)) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\n  componentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\n. Again to re-iterate,  I would much rather use the Formsy's version of such a component. This is temporary.\n. Unfortunately, I don't have a solution, we haven't been able to move to new Formsy as they use react-0.14 and our dependency on MartyJS (sigh) is preventing us from moving ahead. Hopefully I will be with you guys soon enough once we move to Redux and get us over to use the new Formsy version.\n. Also please keep the thread updated with with your working version.\n. Here is the version that works with React 0.14\n``` jsx\nimport React from 'react';\nimport Formsy from 'formsy-react';\nimport BaseComponent from 'components/BaseComponent';\n/*\n * The base component that binds all Formsy Mixin methods so that they can be extended by es6 Formsy components.\n /\nexport default class FormComponent extends BaseConnector {\n  static defaultProps = {\n    validationError: '',\n    validationErrors: {}\n  };\nstatic contextTypes = {\n    formsy: React.PropTypes.object,\n  };\nstatic ignoredMixinMethods = [\n    'getDefaultProps',\n    'getInitialState',\n    'componentWillMount',\n    'componentWillUnmount'\n  ];\nconstructor(props) {\n    super(props);\nthis.state = Object.assign(this.state || {}, Formsy.Mixin.getInitialState.bind(this)());\nObject.getOwnPropertyNames(Formsy.Mixin).forEach((method) => {\n  if (typeof Formsy.Mixin[method] !== 'function') {\n    return;\n  }\n\n  if (FormComponent.ignoredMixinMethods.indexOf(method) !== -1) {\n    return;\n  }\n  this[method] = Formsy.Mixin[method].bind(this);\n});\n\n}\ncomponentWillMount() {\n    Formsy.Mixin.componentWillMount.bind(this)();\n  }\ncomponentWillUnmount() {\n    Formsy.Mixin.componentWillUnmount.bind(this)();\n  }\n}\n```\n. FWIW, My team, is actively migrating away from Formsy to redux-form. We have tried to get the most out of Formsy. However redux has taken over our world, and redux-form solves some of the weird data cycles we see with Formsy and we find it easier to build form components with it.\n. ",
    "teripaquitinho": "With the proposed solution (class FormComponent extends BaseComponent {}) I get a\nTypeError: Cannot read property 'attachToForm' of undefined \nAny help? Any news about the announced update?\n. With the proposed solution (class FormComponent extends BaseComponent {}) I get a\nTypeError: Cannot read property 'attachToForm' of undefined \nAny help? Any news about the announced update?\n. ",
    "sdbondi": "Using contexts in my own Form validation implementation after trying Formsy and coming across an undefined Formsy context (attachToForm yada yada)\nI used this to hack around the problem in the form component when rendering the children:\njavascript\nvar ValidationForm = React.createClass({\n  (...)\n  render () {\n     <form (...)>\n       {React.Children.map(this.props.children, React.addons.cloneWithProps)}\n     </form>\n  }\n});\nNow the children have access to the parent context. \n(EDIT: Used React.Children.map to prevent key warning)\n. Using contexts in my own Form validation implementation after trying Formsy and coming across an undefined Formsy context (attachToForm yada yada)\nI used this to hack around the problem in the form component when rendering the children:\njavascript\nvar ValidationForm = React.createClass({\n  (...)\n  render () {\n     <form (...)>\n       {React.Children.map(this.props.children, React.addons.cloneWithProps)}\n     </form>\n  }\n});\nNow the children have access to the parent context. \n(EDIT: Used React.Children.map to prevent key warning)\n. ",
    "IanVS": "It seems like this issue can be closed now that formsy-react officially includes HOC and decorators, yes?\n. Now that I think of it some more, I should probably ask this question of the linting rule authors, as I don't think it's really something that can be solved from within formsy-react.\n. It seems like this issue can be closed now that formsy-react officially includes HOC and decorators, yes?\n. Now that I think of it some more, I should probably ask this question of the linting rule authors, as I don't think it's really something that can be solved from within formsy-react.\n. ",
    "ghost": "Even with Decorators I'd argue we should keep this open until usage examples have been added to the repo. I too am struggling with the attachToForm error, and I'm using the Decorator pattern. @eriknyk any luck using the decorators to resolve the context-related issue?\n. Personally ended up using a Semantic UI port to React library for UI and client-side form validation. There are other form validation tools, but with the continually evolving patterns and OSS projects emerging in the React ecosystem are causing libraries to going out of date the moment they hit shelves.\nI'd suggest keeping an eye on what's emerging in the community via newsletter subscriptions and archives, or building something custom to meet your specific needs depending on how badly you need it.\n. I'm in a similar situation: model object with nested phones array, which I then translate into input fields. The user can customize the list of phone elements with + - buttons. The fields are named according to a pattern I found elsewhere: \"phones[0][number]\". \nI can get the data out of the form using submit and that translates pretty well, however the reset function does not seem to populate the input fields. \n. Fixed this by adding:\njs\nif (_.isFunction(this.props.onBlur)) {\n    this.props.onBlur(value);\n}\non input blur event. this.props.onBlur function updates the value with an Action (I'm using Flux) in the parent which then passes it back to the input component.\n. Even with Decorators I'd argue we should keep this open until usage examples have been added to the repo. I too am struggling with the attachToForm error, and I'm using the Decorator pattern. @eriknyk any luck using the decorators to resolve the context-related issue?\n. Personally ended up using a Semantic UI port to React library for UI and client-side form validation. There are other form validation tools, but with the continually evolving patterns and OSS projects emerging in the React ecosystem are causing libraries to going out of date the moment they hit shelves.\nI'd suggest keeping an eye on what's emerging in the community via newsletter subscriptions and archives, or building something custom to meet your specific needs depending on how badly you need it.\n. I'm in a similar situation: model object with nested phones array, which I then translate into input fields. The user can customize the list of phone elements with + - buttons. The fields are named according to a pattern I found elsewhere: \"phones[0][number]\". \nI can get the data out of the form using submit and that translates pretty well, however the reset function does not seem to populate the input fields. \n. Fixed this by adding:\njs\nif (_.isFunction(this.props.onBlur)) {\n    this.props.onBlur(value);\n}\non input blur event. this.props.onBlur function updates the value with an Action (I'm using Flux) in the parent which then passes it back to the input component.\n. ",
    "przeor": "+1 ... anyone ?\n. +1 ... anyone ?\n. ",
    "mikeerickson": "+1\n. Seems to be not actively maintained, but still works as intended.\n. +1\n. Seems to be not actively maintained, but still works as intended.\n. ",
    "mdarif": "+1, formsy creating lot issues now a days, facing Cannot read property 'attachToForm' of undefined\nThough I got it solved earlier but it's becoming unbearable to use formsy anymore.\n. +1\n. +1, formsy creating lot issues now a days, facing Cannot read property 'attachToForm' of undefined\nThough I got it solved earlier but it's becoming unbearable to use formsy anymore.\n. +1\n. ",
    "davidblurton": "Great - can you publish this as a beta version to npm?\n. Yup, just use npm publish --tag beta and it won't be installed by default.\n. Yeah, change the version number to 0.14.1-beta1 or something. Unfortunate version number coincidence with react 0.14 :)\n. nice - thanks!\n. Not working - fixed in https://github.com/christianalfoni/formsy-react/pull/193\n. Rebased and ran npm run deploy. @aesopwolf PTAL. Yeah I agree, I just ran it because the last time I contributed I was asked to build these files. \nThe only downside to not committing these files is that you can't use your fork while you're waiting for a PR to be merged.\nHowever, not including these files in PRs will make them easier to merge more quickly. \n\nOn 9 Dec 2016, at 15:51, Aesop Wolf notifications@github.com wrote:\nThanks. Not sure if it makes sense for PR's to commit release files though. I think npm run deploy should be something we run when we're ready to deploy a new version. So, after x new features or every x weeks.\nPlus it seems like a pain for contributors to have go through.\nWhat are your thoughts? (I was just made a collaborator on the project and you seem to have some previous contributions so I'd like to get your feedback \ud83d\ude42)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Great - can you publish this as a beta version to npm?\n. Yup, just use npm publish --tag beta and it won't be installed by default.\n. Yeah, change the version number to 0.14.1-beta1 or something. Unfortunate version number coincidence with react 0.14 :)\n. nice - thanks!\n. Not working - fixed in https://github.com/christianalfoni/formsy-react/pull/193\n. Rebased and ran npm run deploy. @aesopwolf PTAL. Yeah I agree, I just ran it because the last time I contributed I was asked to build these files. \n\nThe only downside to not committing these files is that you can't use your fork while you're waiting for a PR to be merged.\nHowever, not including these files in PRs will make them easier to merge more quickly. \n\nOn 9 Dec 2016, at 15:51, Aesop Wolf notifications@github.com wrote:\nThanks. Not sure if it makes sense for PR's to commit release files though. I think npm run deploy should be something we run when we're ready to deploy a new version. So, after x new features or every x weeks.\nPlus it seems like a pain for contributors to have go through.\nWhat are your thoughts? (I was just made a collaborator on the project and you seem to have some previous contributions so I'd like to get your feedback \ud83d\ude42)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "blittle": "It looks like there is something wrong with the travis ci setup for one of the test runs. 3 of the 4 runs succeed though.\n. It looks like there is something wrong with the travis ci setup for one of the test runs. 3 of the 4 runs succeed though.\n. ",
    "zpalexander": "Ahhh, understood. Do what you will, I just figured I'd propose the change. Thanks for a great project!\n. Ahhh, understood. Do what you will, I just figured I'd propose the change. Thanks for a great project!\n. ",
    "brewern": "Nevermind. validationError on the input works with the custom validate function.\n. Nevermind. validationError on the input works with the custom validate function.\n. ",
    "TuxujPes": "Nope, that didn't help. And i don't think it could, it reacts solely to setValue, no?\nWell, at least, this.isChanged() second argument on second change is false, so i can check on that and prevent unnecessary store updates.\n. My Formsy.Form.onChange does not get fired with SyntheticEvent, it is (object, bool) both times.\ninput.js\njs\nonChange: function(e) {\n  e.stopPropagation(); // having this here does not affect anything for me\n  this.props.onChange(e.currentTarget.value); // fired once\n}\ninput_formsy.js\njs\nonChange: function(value) {\n  this.setValue(value); // fired once\n}\nsome_form.js\njs\nonChange: function(data, isChanged) {\n  actions.updateSomeForm(data); // fired twice\n}\nactually, i do not see this behaviour anymore... probably was some temp binding issue.. or whatever.\nAnyway, thanks for the time spent on investigation.\n. Nope, that didn't help. And i don't think it could, it reacts solely to setValue, no?\nWell, at least, this.isChanged() second argument on second change is false, so i can check on that and prevent unnecessary store updates.\n. My Formsy.Form.onChange does not get fired with SyntheticEvent, it is (object, bool) both times.\ninput.js\njs\nonChange: function(e) {\n  e.stopPropagation(); // having this here does not affect anything for me\n  this.props.onChange(e.currentTarget.value); // fired once\n}\ninput_formsy.js\njs\nonChange: function(value) {\n  this.setValue(value); // fired once\n}\nsome_form.js\njs\nonChange: function(data, isChanged) {\n  actions.updateSomeForm(data); // fired twice\n}\nactually, i do not see this behaviour anymore... probably was some temp binding issue.. or whatever.\nAnyway, thanks for the time spent on investigation.\n. ",
    "tomatau": "I have the same issue as the OP.\nUsing e.stopPropagation fixed the issue.\n. :+1: \n. :+1:  please merge this\n. If anyone wants to use this now - I've forked your fork with the ./lib built and checked in. https://github.com/tomatau/formsy-react/tree/react-0.14\nyou can:\n```\n\"dependencies\": {\n \"formsy-react\": \"tomatau/formsy-react#react-0.14\"\n```\n. Precisely!  But we don't want to create an npm module copy of formsy-react just whilst waiting for this merge :)\n. I have the same issue as the OP.\nUsing e.stopPropagation fixed the issue.\n. :+1: \n. :+1:  please merge this\n. If anyone wants to use this now - I've forked your fork with the ./lib built and checked in. https://github.com/tomatau/formsy-react/tree/react-0.14\nyou can:\n```\n\"dependencies\": {\n \"formsy-react\": \"tomatau/formsy-react#react-0.14\"\n```\n. Precisely!  But we don't want to create an npm module copy of formsy-react just whilst waiting for this merge :)\n. ",
    "luqin": ":+1: \n. :+1: \n. ",
    "yasserzubair": "Hey! I cannot see any examples or explanation about values prop.  Can anyone please explain about it? I tried but cannot seem to set the value. Thank you.. Hey! I cannot see any examples or explanation about values prop.  Can anyone please explain about it? I tried but cannot seem to set the value. Thank you.. ",
    "broveloper": "@christianalfoni could we push a new tag of 0.14.2 for the current master?  I noticed that the updates for nested names are not in 0.14.1\n. :+1:\n. @christianalfoni could we push a new tag of 0.14.2 for the current master?  I noticed that the updates for nested names are not in 0.14.1\n. :+1:\n. ",
    "avnersorek": "This doesn't work for me with React 15.3.0\nCovering for it using -\nmapInputs: function(input) {\n    let mapped = {};\n    // this is so we can use nested structure in our form attributes\n    Object.keys(input).filter(key => input.hasOwnProperty(key)).forEach(key => _.set(mapped, key, input[key]));\n    return mapped;\n  },. This doesn't work for me with React 15.3.0\nCovering for it using -\nmapInputs: function(input) {\n    let mapped = {};\n    // this is so we can use nested structure in our form attributes\n    Object.keys(input).filter(key => input.hasOwnProperty(key)).forEach(key => _.set(mapped, key, input[key]));\n    return mapped;\n  },. ",
    "mrhwick": "You might export the validationRules in main.js as a part of the exported Formsy object. \nThen, developers can compose those rules inside of their custom validation rules.\nFormsy.validationRules = validationRules;\n. You might export the validationRules in main.js as a part of the exported Formsy object. \nThen, developers can compose those rules inside of their custom validation rules.\nFormsy.validationRules = validationRules;\n. ",
    "martinpesout": "There is my implementation of defaultValue. My component is quite complex because I need to have it more universal in my app. But check only lines with defaultValue definition. \n```\n/ global clearTimeout setTimeout /\nimport classNames from 'classnames';\nimport React, { PropTypes } from 'react';\nimport Formsy from 'formsy-react';\nimport touchSupported from '../../../../utilities/touchSupported.js';\nexport const STYLE_DEFAULT = 'STYLE_DEFAULT';\nexport const STYLE_SHORT = 'STYLE_SHORT';\nexport const STYLE_FULLWIDTH = 'STYLE_FULLWIDTH';\nexport default React.createClass({\n// Add the Formsy Mixin\nmixins: [Formsy.Mixin],\n\npropTypes: {\n    autofocus: PropTypes.bool,\n    className: PropTypes.string,\n    defaultValue: PropTypes.bool,\n    invalidateEmpty: PropTypes.bool,\n    inline: PropTypes.bool,\n    label: PropTypes.string,\n    labelClass: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    onBlurCallback: PropTypes.func,\n    onChangeCallback: PropTypes.func,\n    onFocusCallback: PropTypes.func,\n    onResetCallback: PropTypes.func,\n    placeholder: PropTypes.string,\n    resetButton: PropTypes.bool,\n    type: PropTypes.oneOf([\n        'color',\n        'date',\n        'datetime',\n        'datetime-local',\n        'email',\n        'month',\n        'number',\n        'password',\n        'search',\n        'tel',\n        'text',\n        'time',\n        'url',\n        'week',\n    ]),\n    value: PropTypes.string,\n},\n\n\n\ngetDefaultProps: function() {\n    return {\n        defaultValue: false,\n        invalidateEmpty: false,\n        labelClass: 'field__label',\n        type: 'text',\n    };\n},\n\n\n\ngetInitialState: function() {\n    return {\n        blurTriggered: false,\n        defaultValue: this.props.defaultValue,\n    };\n},\n\n\n\ncomponentDidMount: function() {\n    if (this.props.autofocus) {\n        // when allowed focus this field everytime when component is mounted\n        this.didMountTimeout = setTimeout(() => {\n            if (this.refs.formField) {\n                this.refs.formField.focus();\n            }\n\n            this.didMountTimeout = undefined;\n        }, 0);\n    }\n},\n\n\n\ncomponentWillUnmount: function() {\n    if (this.didMountTimeout) {\n        clearTimeout(this.didMountTimeout);\n    }\n},\n\n\n\n// setValue() will set the value of the component, which in\n// turn will validate it and the rest of the form\n_changeValue: function(event) {\n    if (this.getErrorMessage() != null) {\n        this.setValue(event.currentTarget.value);\n    } else {\n        if (this.isValidValue(event.target.value)) {\n            this.setValue(event.target.value);\n        } else {\n            this.setState({\n                _value: event.currentTarget.value,\n                _isPristine: false,\n            });\n        }\n    }\n\n    if (this.props.onChangeCallback) {\n        this.props.onChangeCallback(event.currentTarget.value);\n    }\n},\n\n\n\n_blurValue: function(event) {\n    this.setValue(event.currentTarget.value);\n\n    this.setState({\n        blurTriggered: true,\n    });\n\n    if (this.props.onBlurCallback) {\n        this.props.onBlurCallback(event.currentTarget.value);\n    }\n},\n\n\n\n_focusField: function() {\n    if (this.props.onFocusCallback) {\n        this.props.onFocusCallback();\n    }\n},\n\n\n\n_resetValue: function() {\n    // This workaround has to be there because in some cases we are using\n    // <input defaultValue=\"\" /> instead of <input value=\"\" />.\n    // And to reset such field we have to use next trick.\n    if (this.props.defaultValue) {\n        this.refs.formField.value = '';\n    } else {\n        this.setValue('');\n    }\n\n    if (this.props.onResetCallback) {\n        this.props.onResetCallback();\n    }\n\n    // don't focus field again on touch devices to prevent opening of keyboard\n    if (!touchSupported) {\n        this.refs.formField.focus();\n    }\n},\n\n\n\n_keyDown: function(event) {\n    if (event.keyCode == '13') {\n        this.setValue(event.currentTarget.value);\n    }\n},\n\n\n\nrender: function () {\n    const {\n        inline,\n        invalidateEmpty,\n        label,\n        labelClass,\n        name,\n        placeholder,\n        resetButton,\n        style,\n        type,\n    } = this.props;\n\n    const {\n        blurTriggered,\n    } = this.state;\n\n    // Set a specific className based on the validation\n    // state of this component. showRequired() is true\n    // when the value is empty and the required prop is\n    // passed to the input. showError() is true when the\n    // value typed is invalid\n    var componentClasses = classNames({\n        'field': true,\n        'field--inline': inline,\n        'field--required': this.showRequired(),\n        'field--invalid': (invalidateEmpty && this.showRequired() && !this.getValue() && blurTriggered) || this.showError(),\n\n        // display valid only when field is required\n        'field--valid': this.showRequired() && this.isValid(),\n    });\n\n    // An error message is returned ONLY if the component is invalid\n    // or the server has returned an error message\n    var errorMessage = this.getErrorMessage();\n\n    if (errorMessage) {\n        errorMessage = (\n            <span className=\"form-bubble\">\n                {errorMessage}\n            </span>\n        );\n    }\n\n    var formLabel;\n\n    if (label) {\n        formLabel = (\n            <label htmlFor={name} className={labelClass}>{label}</label>\n        );\n    }\n\n    var resetButtonElement;\n\n    if (resetButton && this.getValue().length > 0) {\n        resetButtonElement = (\n            <div\n                className=\"field__reset-btn\"\n                onClick={this._resetValue}\n            >\n                &times;\n            </div>\n        );\n    }\n\n    var valueParams = {};\n\n    if (this.state.defaultValue) {\n        valueParams.defaultValue = this.state._value;\n    } else {\n        valueParams.value = this.state._value;\n    }\n\n    return (\n        <div className={componentClasses}>\n            {formLabel}\n            <div className=\"field__field-wrapper\">\n                <input\n                    id={name}\n                    className={this.props.className}\n                    name={name}\n                    onBlur={this._blurValue}\n                    onChange={this._changeValue}\n                    onFocus={this._focusField}\n                    onKeyDown={this._keyDown}\n                    placeholder={placeholder}\n                    ref=\"formField\"\n                    required={this.isRequired()}\n                    type={type}\n                    {...valueParams}\n                />\n                {resetButtonElement}\n            </div>\n            {errorMessage}\n        </div>\n    );\n},\n\n});\n``\n. There is my implementation ofdefaultValue. My component is quite complex because I need to have it more universal in my app. But check only lines withdefaultValue` definition. \n```\n/ global clearTimeout setTimeout /\nimport classNames from 'classnames';\nimport React, { PropTypes } from 'react';\nimport Formsy from 'formsy-react';\nimport touchSupported from '../../../../utilities/touchSupported.js';\nexport const STYLE_DEFAULT = 'STYLE_DEFAULT';\nexport const STYLE_SHORT = 'STYLE_SHORT';\nexport const STYLE_FULLWIDTH = 'STYLE_FULLWIDTH';\nexport default React.createClass({\n// Add the Formsy Mixin\nmixins: [Formsy.Mixin],\n\npropTypes: {\n    autofocus: PropTypes.bool,\n    className: PropTypes.string,\n    defaultValue: PropTypes.bool,\n    invalidateEmpty: PropTypes.bool,\n    inline: PropTypes.bool,\n    label: PropTypes.string,\n    labelClass: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    onBlurCallback: PropTypes.func,\n    onChangeCallback: PropTypes.func,\n    onFocusCallback: PropTypes.func,\n    onResetCallback: PropTypes.func,\n    placeholder: PropTypes.string,\n    resetButton: PropTypes.bool,\n    type: PropTypes.oneOf([\n        'color',\n        'date',\n        'datetime',\n        'datetime-local',\n        'email',\n        'month',\n        'number',\n        'password',\n        'search',\n        'tel',\n        'text',\n        'time',\n        'url',\n        'week',\n    ]),\n    value: PropTypes.string,\n},\n\n\n\ngetDefaultProps: function() {\n    return {\n        defaultValue: false,\n        invalidateEmpty: false,\n        labelClass: 'field__label',\n        type: 'text',\n    };\n},\n\n\n\ngetInitialState: function() {\n    return {\n        blurTriggered: false,\n        defaultValue: this.props.defaultValue,\n    };\n},\n\n\n\ncomponentDidMount: function() {\n    if (this.props.autofocus) {\n        // when allowed focus this field everytime when component is mounted\n        this.didMountTimeout = setTimeout(() => {\n            if (this.refs.formField) {\n                this.refs.formField.focus();\n            }\n\n            this.didMountTimeout = undefined;\n        }, 0);\n    }\n},\n\n\n\ncomponentWillUnmount: function() {\n    if (this.didMountTimeout) {\n        clearTimeout(this.didMountTimeout);\n    }\n},\n\n\n\n// setValue() will set the value of the component, which in\n// turn will validate it and the rest of the form\n_changeValue: function(event) {\n    if (this.getErrorMessage() != null) {\n        this.setValue(event.currentTarget.value);\n    } else {\n        if (this.isValidValue(event.target.value)) {\n            this.setValue(event.target.value);\n        } else {\n            this.setState({\n                _value: event.currentTarget.value,\n                _isPristine: false,\n            });\n        }\n    }\n\n    if (this.props.onChangeCallback) {\n        this.props.onChangeCallback(event.currentTarget.value);\n    }\n},\n\n\n\n_blurValue: function(event) {\n    this.setValue(event.currentTarget.value);\n\n    this.setState({\n        blurTriggered: true,\n    });\n\n    if (this.props.onBlurCallback) {\n        this.props.onBlurCallback(event.currentTarget.value);\n    }\n},\n\n\n\n_focusField: function() {\n    if (this.props.onFocusCallback) {\n        this.props.onFocusCallback();\n    }\n},\n\n\n\n_resetValue: function() {\n    // This workaround has to be there because in some cases we are using\n    // <input defaultValue=\"\" /> instead of <input value=\"\" />.\n    // And to reset such field we have to use next trick.\n    if (this.props.defaultValue) {\n        this.refs.formField.value = '';\n    } else {\n        this.setValue('');\n    }\n\n    if (this.props.onResetCallback) {\n        this.props.onResetCallback();\n    }\n\n    // don't focus field again on touch devices to prevent opening of keyboard\n    if (!touchSupported) {\n        this.refs.formField.focus();\n    }\n},\n\n\n\n_keyDown: function(event) {\n    if (event.keyCode == '13') {\n        this.setValue(event.currentTarget.value);\n    }\n},\n\n\n\nrender: function () {\n    const {\n        inline,\n        invalidateEmpty,\n        label,\n        labelClass,\n        name,\n        placeholder,\n        resetButton,\n        style,\n        type,\n    } = this.props;\n\n    const {\n        blurTriggered,\n    } = this.state;\n\n    // Set a specific className based on the validation\n    // state of this component. showRequired() is true\n    // when the value is empty and the required prop is\n    // passed to the input. showError() is true when the\n    // value typed is invalid\n    var componentClasses = classNames({\n        'field': true,\n        'field--inline': inline,\n        'field--required': this.showRequired(),\n        'field--invalid': (invalidateEmpty && this.showRequired() && !this.getValue() && blurTriggered) || this.showError(),\n\n        // display valid only when field is required\n        'field--valid': this.showRequired() && this.isValid(),\n    });\n\n    // An error message is returned ONLY if the component is invalid\n    // or the server has returned an error message\n    var errorMessage = this.getErrorMessage();\n\n    if (errorMessage) {\n        errorMessage = (\n            <span className=\"form-bubble\">\n                {errorMessage}\n            </span>\n        );\n    }\n\n    var formLabel;\n\n    if (label) {\n        formLabel = (\n            <label htmlFor={name} className={labelClass}>{label}</label>\n        );\n    }\n\n    var resetButtonElement;\n\n    if (resetButton && this.getValue().length > 0) {\n        resetButtonElement = (\n            <div\n                className=\"field__reset-btn\"\n                onClick={this._resetValue}\n            >\n                &times;\n            </div>\n        );\n    }\n\n    var valueParams = {};\n\n    if (this.state.defaultValue) {\n        valueParams.defaultValue = this.state._value;\n    } else {\n        valueParams.value = this.state._value;\n    }\n\n    return (\n        <div className={componentClasses}>\n            {formLabel}\n            <div className=\"field__field-wrapper\">\n                <input\n                    id={name}\n                    className={this.props.className}\n                    name={name}\n                    onBlur={this._blurValue}\n                    onChange={this._changeValue}\n                    onFocus={this._focusField}\n                    onKeyDown={this._keyDown}\n                    placeholder={placeholder}\n                    ref=\"formField\"\n                    required={this.isRequired()}\n                    type={type}\n                    {...valueParams}\n                />\n                {resetButtonElement}\n            </div>\n            {errorMessage}\n        </div>\n    );\n},\n\n});\n```\n. ",
    "codeurge": "Did defaultValue get added? I wasn't able to find mention in the API docs.\n. Did defaultValue get added? I wasn't able to find mention in the API docs.\n. ",
    "elstob": "\ud83d\udc4d on this issue. Working on forms with default value requirements right now.\n. \ud83d\udc4d on this issue. Working on forms with default value requirements right now.\n. ",
    "GautierT": "Any news on the defaultValue support ? Thanks\n. +1. HOC doesn't behave like mixin and i don't know why. So i have to switch to classic React.createClass for now.\n. Any news on the defaultValue support ? Thanks\n. +1. HOC doesn't behave like mixin and i don't know why. So i have to switch to classic React.createClass for now.\n. ",
    "raaymax": "+1\n. +1\n. ",
    "gusaiani": "Thank you, I'm enjoying using Formsy :)\n. Thank you, I'm enjoying using Formsy :)\n. ",
    "paali": "+1. I have exactly the same issue. Need validation to happen if the field is not empty but empty is fine.\n. Thanks! That version is not visible on npmjs or github so this information is really useful!\n. +1. I have exactly the same issue. Need validation to happen if the field is not empty but empty is fine.\n. Thanks! That version is not visible on npmjs or github so this information is really useful!\n. ",
    "wkerswell": "Ah ok thanks. \n. Ah ok thanks. \n. ",
    "redhat-raptor": "My bad! The key should be validationErrors not validationError\nAll good!\n. My bad! The key should be validationErrors not validationError\nAll good!\n. ",
    "naoyeye": "https://github.com/christianalfoni/formsy-react/issues/147\n. my solution is remove all error messages and when user submitting the form (e.g. click the submit button etc ) I'll checkout the class name of all form input elements,  if the (or one) element have a error class, then alert the error message. ( clumsy... :-(\n. +1\n. same problem.\nthanks @megapctr\nand I found form.model returns an Object, so it solved my problem.\n\n. https://github.com/christianalfoni/formsy-react/issues/147\n. my solution is remove all error messages and when user submitting the form (e.g. click the submit button etc ) I'll checkout the class name of all form input elements,  if the (or one) element have a error class, then alert the error message. ( clumsy... :-(\n. +1\n. same problem.\nthanks @megapctr\nand I found form.model returns an Object, so it solved my problem.\n\n. ",
    "danpantry": "FYI I wrote this on react-0.14 because that's the branch I am using. This should apply without issues to master, too.\n. Thanks @tomatau \nIdeally we'd configure the .npmignore so it doesn't include ./src files, but only ./lib files - that way people who download the package don't have extraneous files\n. @christianalfoni :beers: :+1: \n. FYI I wrote this on react-0.14 because that's the branch I am using. This should apply without issues to master, too.\n. Thanks @tomatau \nIdeally we'd configure the .npmignore so it doesn't include ./src files, but only ./lib files - that way people who download the package don't have extraneous files\n. @christianalfoni :beers: :+1: \n. ",
    "almeynman": "Nice, what about mixin some inline style library, for example Radium, so that inline styles get prefixed?\n. Thanks, made it work with Radium! awesome lib, guys!\n. Oh, sorry, haven't noticed\n. Nice, what about mixin some inline style library, for example Radium, so that inline styles get prefixed?\n. Thanks, made it work with Radium! awesome lib, guys!\n. Oh, sorry, haven't noticed\n. ",
    "chrisbull": "Same problem. Please help!\n. Same problem. Please help!\n. ",
    "arnif": "I solved this by creating a Formsy stub\n``` js\nvar React = require('react');\nexport default class FormsyStub extends React.Component {\n  static childContextTypes = {\n    formsy: React.PropTypes.object.isRequired\n  };\ngetChildContext() {\n      return {\n          formsy: {\n              attachToForm() { },\n              detachFromForm() { },\n              validate() { },\n              isFormDisabled() { },\n              isValidValue() { }\n          }\n      };\n  }\nrender() {\n    return this.props.children();\n}\n\n}\n```\nThen in my test:\njs\nimport Stub from './FormsyStub';\nconst target = TestUtils.renderIntoDocument(<Stub>{ () => <Component stuff=\"stuff\" /> }</Stub>);\n. I solved this by creating a Formsy stub\n``` js\nvar React = require('react');\nexport default class FormsyStub extends React.Component {\n  static childContextTypes = {\n    formsy: React.PropTypes.object.isRequired\n  };\ngetChildContext() {\n      return {\n          formsy: {\n              attachToForm() { },\n              detachFromForm() { },\n              validate() { },\n              isFormDisabled() { },\n              isValidValue() { }\n          }\n      };\n  }\nrender() {\n    return this.props.children();\n}\n\n}\n```\nThen in my test:\njs\nimport Stub from './FormsyStub';\nconst target = TestUtils.renderIntoDocument(<Stub>{ () => <Component stuff=\"stuff\" /> }</Stub>);\n. ",
    "damon-kreft": "Also having this <Formsy.Form> dependency problem but for different use cases:\nI have a custom checkbox which could be used in a form as normal or in a non-form context such as a control to select a row in a data grid. I would either have to create and use two checkbox components throughout my app (a base checkbox and a Formsy friendly one that extends it) which isn't good, or wrap all checkboxes in a <Formsy.Form> which is over-kill in the case.\nThe same thing could happen for custom radio buttons used purely for list selection or a <select> used purely for navigation.\nNot sure how hard the dependency is, but the ideal would be to have checks for lack of context (surrounding Formsy.Form) and do nothing rather than error thus allowing single Formsy friendly custom control that will work with or without a surrounding <Formsy.Form>.\n:grinning: \nEdit: I subsequently realise this issue is probably more appropriate given it isn't as specific to tests\n. Also having this <Formsy.Form> dependency problem but for different use cases:\nI have a custom checkbox which could be used in a form as normal or in a non-form context such as a control to select a row in a data grid. I would either have to create and use two checkbox components throughout my app (a base checkbox and a Formsy friendly one that extends it) which isn't good, or wrap all checkboxes in a <Formsy.Form> which is over-kill in the case.\nThe same thing could happen for custom radio buttons used purely for list selection or a <select> used purely for navigation.\nNot sure how hard the dependency is, but the ideal would be to have checks for lack of context (surrounding Formsy.Form) and do nothing rather than error thus allowing single Formsy friendly custom control that will work with or without a surrounding <Formsy.Form>.\n:grinning: \n. Also having this <Formsy.Form> dependency problem but for different use cases:\nI have a custom checkbox which could be used in a form as normal or in a non-form context such as a control to select a row in a data grid. I would either have to create and use two checkbox components throughout my app (a base checkbox and a Formsy friendly one that extends it) which isn't good, or wrap all checkboxes in a <Formsy.Form> which is over-kill in the case.\nThe same thing could happen for custom radio buttons used purely for list selection or a <select> used purely for navigation.\nNot sure how hard the dependency is, but the ideal would be to have checks for lack of context (surrounding Formsy.Form) and do nothing rather than error thus allowing single Formsy friendly custom control that will work with or without a surrounding <Formsy.Form>.\n:grinning: \nEdit: I subsequently realise this issue is probably more appropriate given it isn't as specific to tests\n. Also having this <Formsy.Form> dependency problem but for different use cases:\nI have a custom checkbox which could be used in a form as normal or in a non-form context such as a control to select a row in a data grid. I would either have to create and use two checkbox components throughout my app (a base checkbox and a Formsy friendly one that extends it) which isn't good, or wrap all checkboxes in a <Formsy.Form> which is over-kill in the case.\nThe same thing could happen for custom radio buttons used purely for list selection or a <select> used purely for navigation.\nNot sure how hard the dependency is, but the ideal would be to have checks for lack of context (surrounding Formsy.Form) and do nothing rather than error thus allowing single Formsy friendly custom control that will work with or without a surrounding <Formsy.Form>.\n:grinning: \n. ",
    "clayne11": "A much better solution to this is to separate out the Formsy dependency into a higher-order-component rather than a mixin.\nWhen you need to use a component within a Formsy.Form, wrap the component with the higher-order-component and use it in the form. When using it otherwise, use the plain component.\nThis is also a great solution for testing where you can test the component outside of the Formsy context. \n. Something like this: https://gist.github.com/clayne11/1ae19045adf31ddf51b9868288aefda5\nWith the way I have exported the TextField component, you can import it into a test file and test it independently of Formsy.\nThat being said, I don't like the way Formsy uses functions rather than values. In certain situations props won't update because the function hasn't changed, even though the value has.\nI use a different HOC than the one included with Formsy. This is mine:\n``` javascript\nimport React, {PropTypes} from 'react';\nimport Formsy from 'formsy-react';\nconst {Mixin} = Formsy;\nexport default () => (Component) => {\n  if (process.env.NODE_ENV !== 'production' && !Component) {\n    console.error(Must pass a component into FormsyDecorator); // eslint-disable-line no-console\n  }\nreturn (\n    React.createClass({\n      propTypes: {\n        disabled: PropTypes.bool,\n      },\n  mixins: [Mixin],\n\n  render() {\n    const props = _.omit(this.props, 'value');\n    return React.createElement(Component, {\n      setValidations: this.setValidations,\n      setValue: this.setValue,\n      resetValue: this.resetValue,\n      getValue: this.getValue,\n      hasValue: this.hasValue,\n      getErrorMessage: this.getErrorMessage,\n      getErrorMessages: this.getErrorMessages,\n      isFormDisabled: this.isFormDisabled,\n      isValid: this.isValid,\n      isPristine: this.isPristine,\n      isFormSubmitted: this.isFormSubmitted,\n      isRequired: this.isRequired,\n      showRequired: this.showRequired,\n      isValidValue: this.isValidValue,\n      showError: this.showError(),\n      ...props,\n      onChange: this.setValue,\n      value: this.getValue(),\n      disabled: this.props.disabled || this.isFormDisabled(),\n      errorMessage: this.getErrorMessage(),\n    });\n  }\n})\n\n);\n};\n```\n. A much better solution to this is to separate out the Formsy dependency into a higher-order-component rather than a mixin.\nWhen you need to use a component within a Formsy.Form, wrap the component with the higher-order-component and use it in the form. When using it otherwise, use the plain component.\nThis is also a great solution for testing where you can test the component outside of the Formsy context. \n. Formsy uses the context to pass down attachToForm / detachFromForm to its children. As long as the context chain doesn't get broken you can put form children as deeply down the render tree as you'd like.\nOne thing to be aware of is that if any component in the tree returns false from shouldComponentUpdate, then it's children will not receive context updates.\n. It's not really documented. I figured it out by reading the code.\n. +1 - I would love this.\n. You should never mutate state, especially when using redux. That's one of redux's core principles.\nOne of the huge advantages to storing form state in the redux store is conditional forms. When the form items you display are dependent on values that are currently filled out in the form it is easy to determine what to show when the form state comes in from props. When you have to pull state out of the components or store a copy of the state in the current component you're working on things get messy and extremely coupled.\n. +1\n. The HOC passes all props through to the component it is wrapping, so you can simply use a callback ref to achieve your goal.\nhttps://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n. A much better solution to this is to separate out the Formsy dependency into a higher-order-component rather than a mixin.\nWhen you need to use a component within a Formsy.Form, wrap the component with the higher-order-component and use it in the form. When using it otherwise, use the plain component.\nThis is also a great solution for testing where you can test the component outside of the Formsy context. \n. Something like this: https://gist.github.com/clayne11/1ae19045adf31ddf51b9868288aefda5\nWith the way I have exported the TextField component, you can import it into a test file and test it independently of Formsy.\nThat being said, I don't like the way Formsy uses functions rather than values. In certain situations props won't update because the function hasn't changed, even though the value has.\nI use a different HOC than the one included with Formsy. This is mine:\n``` javascript\nimport React, {PropTypes} from 'react';\nimport Formsy from 'formsy-react';\nconst {Mixin} = Formsy;\nexport default () => (Component) => {\n  if (process.env.NODE_ENV !== 'production' && !Component) {\n    console.error(Must pass a component into FormsyDecorator); // eslint-disable-line no-console\n  }\nreturn (\n    React.createClass({\n      propTypes: {\n        disabled: PropTypes.bool,\n      },\n  mixins: [Mixin],\n\n  render() {\n    const props = _.omit(this.props, 'value');\n    return React.createElement(Component, {\n      setValidations: this.setValidations,\n      setValue: this.setValue,\n      resetValue: this.resetValue,\n      getValue: this.getValue,\n      hasValue: this.hasValue,\n      getErrorMessage: this.getErrorMessage,\n      getErrorMessages: this.getErrorMessages,\n      isFormDisabled: this.isFormDisabled,\n      isValid: this.isValid,\n      isPristine: this.isPristine,\n      isFormSubmitted: this.isFormSubmitted,\n      isRequired: this.isRequired,\n      showRequired: this.showRequired,\n      isValidValue: this.isValidValue,\n      showError: this.showError(),\n      ...props,\n      onChange: this.setValue,\n      value: this.getValue(),\n      disabled: this.props.disabled || this.isFormDisabled(),\n      errorMessage: this.getErrorMessage(),\n    });\n  }\n})\n\n);\n};\n```\n. A much better solution to this is to separate out the Formsy dependency into a higher-order-component rather than a mixin.\nWhen you need to use a component within a Formsy.Form, wrap the component with the higher-order-component and use it in the form. When using it otherwise, use the plain component.\nThis is also a great solution for testing where you can test the component outside of the Formsy context. \n. Formsy uses the context to pass down attachToForm / detachFromForm to its children. As long as the context chain doesn't get broken you can put form children as deeply down the render tree as you'd like.\nOne thing to be aware of is that if any component in the tree returns false from shouldComponentUpdate, then it's children will not receive context updates.\n. It's not really documented. I figured it out by reading the code.\n. +1 - I would love this.\n. You should never mutate state, especially when using redux. That's one of redux's core principles.\nOne of the huge advantages to storing form state in the redux store is conditional forms. When the form items you display are dependent on values that are currently filled out in the form it is easy to determine what to show when the form state comes in from props. When you have to pull state out of the components or store a copy of the state in the current component you're working on things get messy and extremely coupled.\n. +1\n. The HOC passes all props through to the component it is wrapping, so you can simply use a callback ref to achieve your goal.\nhttps://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute\n. ",
    "2color": "@clayne11 can you maybe share a gist of how you do it. I've tried this approach and I'm still feeling mixed.\n. @clayne11 can you maybe share a gist of how you do it. I've tried this approach and I'm still feeling mixed.\n. ",
    "bebraw": "See https://github.com/christianalfoni/formsy-react/commit/2be44f1b3248b4c0e2e504d807ac64835ddfb5f7 .\n. See https://github.com/christianalfoni/formsy-react/commit/2be44f1b3248b4c0e2e504d807ac64835ddfb5f7 .\n. ",
    "benwestrate": "+1 Would love to see something like this \n. +1 Would love to see something like this \n. ",
    "nodkrot": "Here use  this isDefaultRequiredValue\nThe doc: https://github.com/christianalfoni/formsy-react/blob/master/API.md#required\n. Here use  this isDefaultRequiredValue\nThe doc: https://github.com/christianalfoni/formsy-react/blob/master/API.md#required\n. ",
    "pawelgalazka": "sorry, not this project...\n. sorry, not this project...\n. ",
    "AugustinLF": "Would it be possible to get any feedback on this PR? I understand that this might be an edge case that doesn't need to be merged, but if so, let me know, I'll figure another way to fix my problem :)\n. @Semigradsky @christianalfoni I've seen on Twitter that @christianalfoni said that he lacks of time to properly manage formsy-react, which I perfectly understand, but is there anything that could be done?\n. Sadly no, I stop using shouldComponentUpdate on my forsmy elements, and anyway, I'm moving away from formsy... So sorry, but I can't help you :/\n. Would it be possible to get any feedback on this PR? I understand that this might be an edge case that doesn't need to be merged, but if so, let me know, I'll figure another way to fix my problem :)\n. @Semigradsky @christianalfoni I've seen on Twitter that @christianalfoni said that he lacks of time to properly manage formsy-react, which I perfectly understand, but is there anything that could be done?\n. Sadly no, I stop using shouldComponentUpdate on my forsmy elements, and anyway, I'm moving away from formsy... So sorry, but I can't help you :/\n. ",
    "easyrider": "Hi,\nI had a similar issue and solved it that way: https://github.com/christianalfoni/formsy-react/pull/242\n. @Semigradsky - I've just added the test\n. Hi,\nI had a similar issue and solved it that way: https://github.com/christianalfoni/formsy-react/pull/242\n. @Semigradsky - I've just added the test\n. ",
    "makstr": "There is a two way binding helper in react which looks interesting: \nhttps://facebook.github.io/react/docs/two-way-binding-helpers.html\nI haven't tried it yet but I am curious if it could work with formsy?\n. Same here, form submits as valid when the email field is empty, but when I start typing in that field all of the sudden it starts checking for email validatoin\n. +1\n. There is a two way binding helper in react which looks interesting: \nhttps://facebook.github.io/react/docs/two-way-binding-helpers.html\nI haven't tried it yet but I am curious if it could work with formsy?\n. Same here, form submits as valid when the email field is empty, but when I start typing in that field all of the sudden it starts checking for email validatoin\n. +1\n. ",
    "dayAlone": "+1\nIt will be great if minLength:1 checked that field value is not null, '' or undefined\n. +1\nIt will be great if minLength:1 checked that field value is not null, '' or undefined\n. ",
    "ctumolosus": "So, I did some digging in the implementation and it looks like when you use the required attribute and the field has no value the validation error messages are skipped even though they are computed. It was not clearly documented, but adding { isDefaultRequiredValue: \"Your error message when field is required\" } to validationErrors will actually output that error message. \n. So, I did some digging in the implementation and it looks like when you use the required attribute and the field has no value the validation error messages are skipped even though they are computed. It was not clearly documented, but adding { isDefaultRequiredValue: \"Your error message when field is required\" } to validationErrors will actually output that error message. \n. ",
    "arush": "formsy-react v0.15 and up rely on React 0.14 parent context types. You can make 0.17 work on 0.13.x if you replace {this.props.children} in main.js render() with  {this.traverseChildrenAndRegisterInputs(this.props.children)}\nthen replace all references to this.context.formsy.**methodname** in Mixin.js with this.props._**methodname**\n. formsy-react v0.15 and up rely on React 0.14 parent context types. You can make 0.17 work on 0.13.x if you replace {this.props.children} in main.js render() with  {this.traverseChildrenAndRegisterInputs(this.props.children)}\nthen replace all references to this.context.formsy.**methodname** in Mixin.js with this.props._**methodname**\n. ",
    "ingro": "I've stumbled in the same issue too, the problem with reset is (unless I'm doing something wrong) didn't set the pristine value of the field, so it remains undefined, which is not a desired behaviour.\n. I've stumbled in the same issue too, the problem with reset is (unless I'm doing something wrong) didn't set the pristine value of the field, so it remains undefined, which is not a desired behaviour.\n. ",
    "mj12albert": "Could it be this? https://github.com/christianalfoni/formsy-react/blob/master/API.md#value\nAlso looking to do this for an edit form.\n. Could it be this? https://github.com/christianalfoni/formsy-react/blob/master/API.md#value\nAlso looking to do this for an edit form.\n. ",
    "0m15": "I spent some time hacking on formsy-react (kudos to creators).\nHad the same case as @aphillipo and solved in this way: \n1) load form data from store and attach it to props (and passed to your form)\n2) attach an onChange event listener on each form input\n3) form get edited by user\n4) listeners set on onChange propagate changed properties to the store (you can also read current form state with this.refs.form.getCurrentValues()), so every input stays in sync between store and form\nlet me know if it can help you \n. there's a \"global\" onChange event that you can attach to the <Formsy.Form> component itself. Even though I had some issues using it as I needed more granular control of what changed on the form. \n. @nvarchar nothing stops you to use formsy react with a flux store. I'm successfully \"baking\" my form components using redux. You have to slightly modify some aspects of the component that handles and owns your form (i.e. no encapsulated state), by treating it as a dumb component and propagate needed props to keep form in sync with the store.\n. why just not putting the wrapping divs  directly inside <MyOwnInput> render method?\n. I spent some time hacking on formsy-react (kudos to creators).\nHad the same case as @aphillipo and solved in this way: \n1) load form data from store and attach it to props (and passed to your form)\n2) attach an onChange event listener on each form input\n3) form get edited by user\n4) listeners set on onChange propagate changed properties to the store (you can also read current form state with this.refs.form.getCurrentValues()), so every input stays in sync between store and form\nlet me know if it can help you \n. there's a \"global\" onChange event that you can attach to the <Formsy.Form> component itself. Even though I had some issues using it as I needed more granular control of what changed on the form. \n. @nvarchar nothing stops you to use formsy react with a flux store. I'm successfully \"baking\" my form components using redux. You have to slightly modify some aspects of the component that handles and owns your form (i.e. no encapsulated state), by treating it as a dumb component and propagate needed props to keep form in sync with the store.\n. why just not putting the wrapping divs  directly inside <MyOwnInput> render method?\n. ",
    "track0x1": "how about on submit?\n. +1\n. +1\nWhy is this not part of formsy-react's default return for getValue()?\n. Oh this would be fantastic!. @leemachin Can I help expedite this somehow?. Awesome, sounds good @aesopwolf!. @aesopwolf Looks like its caused by the behavior of the browsers <form> API\n\ntype reset: The button resets all the controls to their initial values.\n\nThe problem is that in a field like a checkbox, you have to actually change the value of the checked attribute to check/uncheck it, which removes our initial state that would otherwise be used by reset() provided via form API.\nEasiest solution is to avoid using reset button type and switch it to something like type=\"button\".\n. Closing because was removed in #473 . @aesopwolf Sure, I'm interested in keeping this thing alive.\nI've also been toying around with the idea of a react-native version of this too.. FWIW... https://github.com/track0x1/formsy-react (published to npm as formsy-react-es6)\nand https://github.com/track0x1/formsy-react-native (published to npm as formsy-react-native) a port of Formsy to React Native :). how about on submit?\n. +1\n. +1\nWhy is this not part of formsy-react's default return for getValue()?\n. Oh this would be fantastic!. @leemachin Can I help expedite this somehow?. Awesome, sounds good @aesopwolf!. @aesopwolf Looks like its caused by the behavior of the browsers <form> API\n\ntype reset: The button resets all the controls to their initial values.\n\nThe problem is that in a field like a checkbox, you have to actually change the value of the checked attribute to check/uncheck it, which removes our initial state that would otherwise be used by reset() provided via form API.\nEasiest solution is to avoid using reset button type and switch it to something like type=\"button\".\n. Closing because was removed in #473 . @aesopwolf Sure, I'm interested in keeping this thing alive.\nI've also been toying around with the idea of a react-native version of this too.. FWIW... https://github.com/track0x1/formsy-react (published to npm as formsy-react-es6)\nand https://github.com/track0x1/formsy-react-native (published to npm as formsy-react-native) a port of Formsy to React Native :). ",
    "neoziro": "It's very very annoying! I don't know why you put it because the module is compiled before publishing.\n. @christianalfoni do you intend to merge it? Also can you make a release after? Thanks :+1: \n. @Semigradsky for multiple rendering I don't see how to write the test :/\n. @Semigradsky you can see 3 render in the console http://codepen.io/anon/pen/EVpEpd?editors=001\nWith my modification, you will see only one.\n. @Semigradsky thanks, can you release it?\n. It's very very annoying! I don't know why you put it because the module is compiled before publishing.\n. @christianalfoni do you intend to merge it? Also can you make a release after? Thanks :+1: \n. @Semigradsky for multiple rendering I don't see how to write the test :/\n. @Semigradsky you can see 3 render in the console http://codepen.io/anon/pen/EVpEpd?editors=001\nWith my modification, you will see only one.\n. @Semigradsky thanks, can you release it?\n. ",
    "2j2e": "Please push this merge into 0.17.1 asap.\nI can't just add babelify even temporarily there is a blocker with babelify versions in my project and the library.\n. Please push this merge into 0.17.1 asap.\nI can't just add babelify even temporarily there is a blocker with babelify versions in my project and the library.\n. ",
    "mantagen": "Any word on when this merge will be released?\n. @christianalfoni Or anyone else got any update on this?\nPerformance is becoming an issue due to plenty of superfluous re-rendering\n. Thank you @0xori !!\nUpdate API to reflect this?\n. Any word on when this merge will be released?\n. @christianalfoni Or anyone else got any update on this?\nPerformance is becoming an issue due to plenty of superfluous re-rendering\n. Thank you @0xori !!\nUpdate API to reflect this?\n. ",
    "avetisk": "@christianalfoni: could you transfer the ownership of this project if you're not maintaining it anymore.\n. +1\n. @christianalfoni: could you transfer the ownership of this project if you're not maintaining it anymore.\n. +1\n. ",
    "cruzlutor": "+1\n. +1\n. ",
    "tugberkugurlu": "This would be good to know, especially after this: https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html I guess https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc answers this a bit.\n. This would be good to know, especially after this: https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html I guess https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc answers this a bit.\n. ",
    "ciaoben": "@vijayrawatsan Have you came up with the solution? I am stuck with 0.14.1 and using the @twisty solution it only 'hide' the errors, but If I have a button controlled by the validity of the form, my input is anyway validated on the first render and so not valid.\nIn my specific case:\nI have a input that has a isUrl validation, and as soon as I visualize it, it shows me the red alert because obviously has no value in it, and no value is not a valid url. Using the @twisty  method I have hided the error, but the component run anyway the validation so the component is invalid, and block all the form.\n. @vijayrawatsan it does not seems a optimal solution for my case, since I don't want to use material design. I guess I will need to do somework for myself.\n. @vijayrawatsan \nThanks, but I had already implemented that solution but it does not solve directly the problem.\nI managed to solved now, here how I did this, for future reference:\nI debugged a little the library code, and find out that the problem is that when the field is empty, withou the required prop, the validation trigger anyway, and this is a mistake, because if a have a not required field with isUrl validation, if the field is empty, it should be valid.\nI noticed that in the last version the problem was not present, so I searched in the commits, and voil\u00e0:\nhttps://github.com/christianalfoni/formsy-react/commit/0395f61233a533ea83c0436153447811eeb81d90\nThe validationRules.js file in this commit has the right changes to make it works wonderfully. Just change the first 18 lines of this file, and everything will work as expected.\n. @vijayrawatsan Have you came up with the solution? I am stuck with 0.14.1 and using the @twisty solution it only 'hide' the errors, but If I have a button controlled by the validity of the form, my input is anyway validated on the first render and so not valid.\nIn my specific case:\nI have a input that has a isUrl validation, and as soon as I visualize it, it shows me the red alert because obviously has no value in it, and no value is not a valid url. Using the @twisty  method I have hided the error, but the component run anyway the validation so the component is invalid, and block all the form.\n. @vijayrawatsan it does not seems a optimal solution for my case, since I don't want to use material design. I guess I will need to do somework for myself.\n. @vijayrawatsan \nThanks, but I had already implemented that solution but it does not solve directly the problem.\nI managed to solved now, here how I did this, for future reference:\nI debugged a little the library code, and find out that the problem is that when the field is empty, withou the required prop, the validation trigger anyway, and this is a mistake, because if a have a not required field with isUrl validation, if the field is empty, it should be valid.\nI noticed that in the last version the problem was not present, so I searched in the commits, and voil\u00e0:\nhttps://github.com/christianalfoni/formsy-react/commit/0395f61233a533ea83c0436153447811eeb81d90\nThe validationRules.js file in this commit has the right changes to make it works wonderfully. Just change the first 18 lines of this file, and everything will work as expected.\n. ",
    "duylam": "Currently I'm experiencing this issue. After going through code, I see that the validation is triggered immediately on componentDidMount() of  component (see https://github.com/christianalfoni/formsy-react/blob/master/src%2Fmain.js#L73). So the possible solution is to introduce one more boolean option on  to indicate whether the validation is triggered at first render or not\nI submitted PR https://github.com/christianalfoni/formsy-react/pull/277 to fix this\n. @tanneess Thanks for your feedback, I added the missing check in attachToForm method. Per the article in README.md (http://christianalfoni.github.io/javascript/2014/10/22/nailing-that-validation-with-reactjs.html) I assume the attachToForm() is called only in \"mount\" event\n. Currently I'm experiencing this issue. After going through code, I see that the validation is triggered immediately on componentDidMount() of  component (see https://github.com/christianalfoni/formsy-react/blob/master/src%2Fmain.js#L73). So the possible solution is to introduce one more boolean option on  to indicate whether the validation is triggered at first render or not\nI submitted PR https://github.com/christianalfoni/formsy-react/pull/277 to fix this\n. @tanneess Thanks for your feedback, I added the missing check in attachToForm method. Per the article in README.md (http://christianalfoni.github.io/javascript/2014/10/22/nailing-that-validation-with-reactjs.html) I assume the attachToForm() is called only in \"mount\" event\n. ",
    "sys13": "My workaround: I just added babelify to browserify as a dependency and it worked without having to add any babelify plugins.\n. My workaround: I just added babelify to browserify as a dependency and it worked without having to add any babelify plugins.\n. ",
    "tobyredd": "@sys13 What do you mean by \"it worked without having to add any babelify plugins\"? What version of babelify did you add to browserify's dependencies? Either way it's still gonna add a bunch to your node_modules directory right?\n. @sys13 What do you mean by \"it worked without having to add any babelify plugins\"? What version of babelify did you add to browserify's dependencies? Either way it's still gonna add a bunch to your node_modules directory right?\n. ",
    "paulkarpenko": "I've created a workaround by just not using ES6 syntax in the input component.\n```\nvar React = require('react');\nvar Formsy = require('formsy-react');\nvar FormsyInput = React.createClass({\n    mixins: [Formsy.Mixin],\nchangeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n},\n\nrender: function () { return ( ... ) }\n\n});\nmodule.exports = FormsyInput;\n```\nSo I guess now I'm wondering if there's a better way.\n. I've created a workaround by just not using ES6 syntax in the input component.\n```\nvar React = require('react');\nvar Formsy = require('formsy-react');\nvar FormsyInput = React.createClass({\n    mixins: [Formsy.Mixin],\nchangeValue: function (event) {\n    this.setValue(event.currentTarget.value);\n},\n\nrender: function () { return ( ... ) }\n\n});\nmodule.exports = FormsyInput;\n```\nSo I guess now I'm wondering if there's a better way.\n. ",
    "TomOlivier": "You can use the HOC version, which wraps your component and gives you all the props needed to define a Formsy form component.\nHere is the doc: HOC\n. You can use the HOC version, which wraps your component and gives you all the props needed to define a Formsy form component.\nHere is the doc: HOC\n. ",
    "valerymercury": "+1\n. @Semigradsky Can you update npm version please ? \n. +1\n. @Semigradsky Can you update npm version please ? \n. ",
    "seburgi": "+1\n. +1\n. ",
    "sb2nov": "@christianalfoni ping on new release ?\n. @christianalfoni ping^ \n. +1 \n. @christianalfoni ping on new release ?\n. @christianalfoni ping^ \n. +1 \n. ",
    "mciastek": "@christianalfoni ping\n. @christianalfoni ping\n. ",
    "aight8": "+1 . please merge\n. What's the benefit of storing the forms state in the redux store? I don't get this 100%. Isn't that a little bit an overkill? I ask because the form-redux project facing performance issues since all store subscribers are notified on every change except you use Immutables everywhere etc. When you forget somewhere to optimize the shouldUpdate function it automatically cause serious performance issues. Or have I overlooked something?\n. Is there any news related to the future fork of this project?\n. Definitely not. It's really worth it switch to the redux-form library, this project is death (last commit was in december 2015) and the maintainer don't reply to any requests in this repo (there was some requests about a takeover too but no response). This library is easier to use at the first sight since it uses internal states and the context functionality of react instead of i.e. redux. Nevertheless, it's full of fundamental bugs so you will getting stuck sometime to one of these and get headache since this library isn't maintained anymore. So I really suggest you to take an extra effort to use a library which is future proof including a better architecture (i.e. redux). A wonder if this library will ever support react15 officially.\n. +1 . please merge\n. What's the benefit of storing the forms state in the redux store? I don't get this 100%. Isn't that a little bit an overkill? I ask because the form-redux project facing performance issues since all store subscribers are notified on every change except you use Immutables everywhere etc. When you forget somewhere to optimize the shouldUpdate function it automatically cause serious performance issues. Or have I overlooked something?\n. Is there any news related to the future fork of this project?\n. Definitely not. It's really worth it switch to the redux-form library, this project is death (last commit was in december 2015) and the maintainer don't reply to any requests in this repo (there was some requests about a takeover too but no response). This library is easier to use at the first sight since it uses internal states and the context functionality of react instead of i.e. redux. Nevertheless, it's full of fundamental bugs so you will getting stuck sometime to one of these and get headache since this library isn't maintained anymore. So I really suggest you to take an extra effort to use a library which is future proof including a better architecture (i.e. redux). A wonder if this library will ever support react15 officially.\n. ",
    "minvs1": "The perfect solution I think would allow to invalidate input like this:\n``` coffeescript\nFormsy.addValidationRule 'isUnique', (inputRef, values, value)->\n  return checkUnique(inputRef, values, value)\ncheckUnique = _.debounce((inputRef, values, value)=>\n  unique = false\nrequest = $.ajax url: '/uniqueness-check', method: 'POST', data: {field: 'PaymentGateway.name', value: value}, dataType: 'json'\nrequest.done (response)->\n    if response.status\n      unique = true\nunless unique\n    inputRef.invalidate()\n, 300)\n```\n. The perfect solution I think would allow to invalidate input like this:\n``` coffeescript\nFormsy.addValidationRule 'isUnique', (inputRef, values, value)->\n  return checkUnique(inputRef, values, value)\ncheckUnique = _.debounce((inputRef, values, value)=>\n  unique = false\nrequest = $.ajax url: '/uniqueness-check', method: 'POST', data: {field: 'PaymentGateway.name', value: value}, dataType: 'json'\nrequest.done (response)->\n    if response.status\n      unique = true\nunless unique\n    inputRef.invalidate()\n, 300)\n```\n. ",
    "kelly-kellerheikkila": "+1\nIt would be great to arbitrarily declare an input as invalid.\n. +1\nIt would be great to arbitrarily declare an input as invalid.\n. ",
    "jcrjaci": "For anyone who need to validate some field with an AJAX request here are an work around example:\nthis.validateName = _.debounce(this.validateName.bind(this), 500);\n\nvalidateName(field, value) {\n    const state = {};\n\n    $.when(this.serverValidation(value)).then((validation) => {\n        state.nameIsValid = validation;\n    }).catch((validation) => {\n        state.nameIsValid = validation;\n    })\n    .done(() => {\n        state.name = value;\n        this.setState(state);\n    });\n}\n\nserverValidation(name) {\n// make your server request and resolve the validation\n}\n\n<MyInput\n    name={this.state.name}\n    onChange={this.validateName}\n    validations={{\n        nameIsValid: () => this.state.nameIsValid,\n    }}\n>. For anyone who need to validate some field with an AJAX request here are an work around example:\n\n\n\nthis.validateName = _.debounce(this.validateName.bind(this), 500);\n\nvalidateName(field, value) {\n    const state = {};\n\n    $.when(this.serverValidation(value)).then((validation) => {\n        state.nameIsValid = validation;\n    }).catch((validation) => {\n        state.nameIsValid = validation;\n    })\n    .done(() => {\n        state.name = value;\n        this.setState(state);\n    });\n}\n\nserverValidation(name) {\n// make your server request and resolve the validation\n}\n\n<MyInput\n    name={this.state.name}\n    onChange={this.validateName}\n    validations={{\n        nameIsValid: () => this.state.nameIsValid,\n    }}\n>.\n",
    "ivantsov": "@C3PablO can you share the source code? \nDid you try this code? It perfectly works for me, I just call this.refs.form.reset({email: 'smth new'}) and an input change the value to 'smth new'.\nAlso check that you use value={this.getValue()} like here.\n. @C3PablO can you share the source code? \nDid you try this code? It perfectly works for me, I just call this.refs.form.reset({email: 'smth new'}) and an input change the value to 'smth new'.\nAlso check that you use value={this.getValue()} like here.\n. ",
    "warmbowski": "I think deleting data in Safari/FF might set the field value to an empty string instead of undefined (or null), which is what isExist needs. So in your onChange or onBlur, wherever you setValue(), just check if it's an empty string and if so set to null. \nif (this.state.value === '') {\n      this.setValue(null)\n    } else {\n      this.setValue(this.state.value);\n    }\n. I think deleting data in Safari/FF might set the field value to an empty string instead of undefined (or null), which is what isExist needs. So in your onChange or onBlur, wherever you setValue(), just check if it's an empty string and if so set to null. \nif (this.state.value === '') {\n      this.setValue(null)\n    } else {\n      this.setValue(this.state.value);\n    }\n. ",
    "agroves333": "It's so that the field will not be considered invalid when empty. (On page load, clearing the field. etc.)\n. It's so that the field will not be considered invalid when empty. (On page load, clearing the field. etc.)\n. ",
    "farisj": "Having this same problem.\n. @Semigradsky looks good!\n. Having this same problem.\n. @Semigradsky looks good!\n. ",
    "meikoudras": "+1\n. +1\n. ",
    "josercruz01": "+1\n. All good on my side as well @Semigradsky, thanks a lot for the fast response on this.\n. +1\n. All good on my side as well @Semigradsky, thanks a lot for the fast response on this.\n. ",
    "revolunet": "anyone as an integration example for formsy ?\n. so i had to do this : \n``` js\nsubmitForm(data) {\n    const POST_URL = '/test';\nvar formData = new FormData();\nObject.keys(data).forEach(key => {\n  formData.append(key, data[key]);\n});\n\naxios.post(POST_URL, formData).then(() => {\n  console.log('ok');\n}).catch(() => {\n  console.log('not ok');\n});\n\n}\n```\nMy input file component has this for upload : \njs\nonInputChange = e => {\n    let file = e.target.files[0];\n    this.props.setValue(file);\n}\n. anyone as an integration example for formsy ?\n. so i had to do this : \n``` js\nsubmitForm(data) {\n    const POST_URL = '/test';\nvar formData = new FormData();\nObject.keys(data).forEach(key => {\n  formData.append(key, data[key]);\n});\n\naxios.post(POST_URL, formData).then(() => {\n  console.log('ok');\n}).catch(() => {\n  console.log('not ok');\n});\n\n}\n```\nMy input file component has this for upload : \njs\nonInputChange = e => {\n    let file = e.target.files[0];\n    this.props.setValue(file);\n}\n. ",
    "fabiosussetto": "As the error message says, you need to give your custom input a name property, so that Formsy can use that to build its internal state and keep track of the data:\n<Formsy.Form onValid={this.enableButton} onInvalid={this.disableButton} id=\"userProfile\" ref=\"user-profile\" className=\"user-profile\">\n    <DropzoneUpload name=\"myFile\" getFile={this.getUserFileDragged} />\n</Formsy.Form>\n. As the error message says, you need to give your custom input a name property, so that Formsy can use that to build its internal state and keep track of the data:\n<Formsy.Form onValid={this.enableButton} onInvalid={this.disableButton} id=\"userProfile\" ref=\"user-profile\" className=\"user-profile\">\n    <DropzoneUpload name=\"myFile\" getFile={this.getUserFileDragged} />\n</Formsy.Form>\n. ",
    "cornerolive": "Ok, I'll try. Thank you!\n. Ok, I'll try. Thank you!\n. ",
    "NOlanguage1993": "``` jsx\nimport React from 'react'\nimport '../css/InputText.css'\nimport $ from 'jquery'\nimport Formsy from \"formsy-react\";\nconst WebCreate = React.createClass({\n    mixins: [Formsy.Mixin],\n    submit(){\n        console.log('submit')\n    },\n    inVaildSubmit(){\n        console.log('inVaildsubmit')\n    },\n    vaild(){\n        console.log('vaild')\n    },\n    inVaild(){\n        console.log('Invalid');\n    },\nchange(event) {\n    this.setValue(event.currentTarget.value);\n},\n\nrender() {\n    return (\n        <Formsy.Form onValidSubmit={this.submit.bind(this)}\n                     onValid={this.vaild.bind(this)}\n                     onInvalid={this.inVaild.bind(this)}\n                     onInvalidSubmit={this.inVaildSubmit.bind(this)}>\n            <div className='inputDiv'>\n                <input\n                    type = 'text'\n                    onChange={this.change.bind(this)}\n                    className='input'\n                    ref=\"myInput\"\n                    name='appName'\n                    value={this.getValue()}\n                    validations={{\n                               myCustomIsFiveValidation: function (values, value) {\n                                    console.log('myCustomIsFiveValidation value'+value)\n                                    if (value==\"\" || value==0) {\n                                        return \"\u8bf7\u9009\u62e9\u5e94\u7528\u7c7b\u578b\"; // You can return an error\n                                    }\n                                    else {\n                                        return true;\n                                    }\n                                }\n                            }}\n                    />\n                <input type=\"submit\" className='submit_btn' value=\"\u521b\u5efa\u5e94\u7528\"/>\n            </div>\n        </Formsy.Form>\n    )\n}\n\n});\nmodule.exports = WebCreate;\n```\n@twisty  I've had the same problem, please help me to see why this is so. \n. @Semigradsky please help me\n. @Semigradsky  thanks,I just tried it out use own form element\u3002but\uff0cI dont understand Why not just input why so design\n. ``` jsx\nimport React from 'react'\nimport '../css/InputText.css'\nimport $ from 'jquery'\nimport Formsy from \"formsy-react\";\nconst WebCreate = React.createClass({\n    mixins: [Formsy.Mixin],\n    submit(){\n        console.log('submit')\n    },\n    inVaildSubmit(){\n        console.log('inVaildsubmit')\n    },\n    vaild(){\n        console.log('vaild')\n    },\n    inVaild(){\n        console.log('Invalid');\n    },\nchange(event) {\n    this.setValue(event.currentTarget.value);\n},\n\nrender() {\n    return (\n        <Formsy.Form onValidSubmit={this.submit.bind(this)}\n                     onValid={this.vaild.bind(this)}\n                     onInvalid={this.inVaild.bind(this)}\n                     onInvalidSubmit={this.inVaildSubmit.bind(this)}>\n            <div className='inputDiv'>\n                <input\n                    type = 'text'\n                    onChange={this.change.bind(this)}\n                    className='input'\n                    ref=\"myInput\"\n                    name='appName'\n                    value={this.getValue()}\n                    validations={{\n                               myCustomIsFiveValidation: function (values, value) {\n                                    console.log('myCustomIsFiveValidation value'+value)\n                                    if (value==\"\" || value==0) {\n                                        return \"\u8bf7\u9009\u62e9\u5e94\u7528\u7c7b\u578b\"; // You can return an error\n                                    }\n                                    else {\n                                        return true;\n                                    }\n                                }\n                            }}\n                    />\n                <input type=\"submit\" className='submit_btn' value=\"\u521b\u5efa\u5e94\u7528\"/>\n            </div>\n        </Formsy.Form>\n    )\n}\n\n});\nmodule.exports = WebCreate;\n```\n@twisty  I've had the same problem, please help me to see why this is so. \n. @Semigradsky please help me\n. @Semigradsky  thanks,I just tried it out use own form element\u3002but\uff0cI dont understand Why not just input why so design\n. ",
    "gCardinal": "Ok, maybe my example was too simple. I'm asking this question because, let's say I have a really big form, there will be many components composing it and it's not guaranteed that the Inputs will be at the first level.\nSay I have:\n<Formsy.Form>\n    <BootstrapPanel>\n        <CheckboxWrapperComponent>\n            <MyOwnCheckbox />\n            <MyOwnCheckbox />\n        </CheckboxWrapperComponent>\n    </BootstrapPanel>\n    <BootstrapPanel>\n        <CheckboxWrapperComponent>\n            <MyOwnCheckbox />\n            <MyOwnCheckbox />\n        </CheckboxWrapperComponent>\n    </BootstrapPanel>\n    <button>Submit</button>\n</Formsy.Form>\nI don't want to put the <BootstrapPanel> or <CheckboxWrapperComponent> in an input component, because then it won't be as reusable. It will be bound to that particular implementation and really, the only thing the input should do and know is validation stuff due to being an input. Layout and grouping stuff should got elsewhere, hence why I don't want to put either my previous example's wrapping <div or this example's <BootstrapPanel> and <CheckboxWrapperComponent> in <MyOwnCheckbox>.\nSo, this means <MyOwnCheckbox> is not a direct children of <Formsy.Form> and this seems to cause problems.\n. Aaah ok! That makes sense.\nDid I just miss it in the doc or is that not really documented well? \n. Ok, maybe my example was too simple. I'm asking this question because, let's say I have a really big form, there will be many components composing it and it's not guaranteed that the Inputs will be at the first level.\nSay I have:\n<Formsy.Form>\n    <BootstrapPanel>\n        <CheckboxWrapperComponent>\n            <MyOwnCheckbox />\n            <MyOwnCheckbox />\n        </CheckboxWrapperComponent>\n    </BootstrapPanel>\n    <BootstrapPanel>\n        <CheckboxWrapperComponent>\n            <MyOwnCheckbox />\n            <MyOwnCheckbox />\n        </CheckboxWrapperComponent>\n    </BootstrapPanel>\n    <button>Submit</button>\n</Formsy.Form>\nI don't want to put the <BootstrapPanel> or <CheckboxWrapperComponent> in an input component, because then it won't be as reusable. It will be bound to that particular implementation and really, the only thing the input should do and know is validation stuff due to being an input. Layout and grouping stuff should got elsewhere, hence why I don't want to put either my previous example's wrapping <div or this example's <BootstrapPanel> and <CheckboxWrapperComponent> in <MyOwnCheckbox>.\nSo, this means <MyOwnCheckbox> is not a direct children of <Formsy.Form> and this seems to cause problems.\n. Aaah ok! That makes sense.\nDid I just miss it in the doc or is that not really documented well? \n. ",
    "ufocoder": "@drahnieR You could use setValidations from props\n```\nimport React from 'react';\nimport {Decorator} from 'formsy-react';\n@Decorator()\nexport default class MyCustomComponent extends React.Component {\nconstructor(props) {\n      super(props);\n      this.setValidator(props);\n  }\ncomponentWillReceiveProps(nextProps) {\n      this.setValidator(nextProps);\n  }\nsetValidator = (props) => {\n    const validations = {\n      'myCustomValidator': (formValues, formValue) => {\n        return parseInt(formValue) > 10; // validation body\n      }\n    }\nprops.setValidations(validations, props.required);\n\n}\n//..\n}\n. @umair-khanzada Because you have a type in your example, there's a correct variant https://jsfiddle.net/s5v6fn8w/. @drahnieR You could use `setValidations` from props\nimport React from 'react';\nimport {Decorator} from 'formsy-react';\n@Decorator()\nexport default class MyCustomComponent extends React.Component {\nconstructor(props) {\n      super(props);\n      this.setValidator(props);\n  }\ncomponentWillReceiveProps(nextProps) {\n      this.setValidator(nextProps);\n  }\nsetValidator = (props) => {\n    const validations = {\n      'myCustomValidator': (formValues, formValue) => {\n        return parseInt(formValue) > 10; // validation body\n      }\n    }\nprops.setValidations(validations, props.required);\n\n}\n//..\n}\n```. @umair-khanzada Because you have a type in your example, there's a correct variant https://jsfiddle.net/s5v6fn8w/. ",
    "mingliii": "Hello, I got some issue which maybe can be resolved by this fix. However, it looks like the issue is not in react-0.14 branch which is the current release version?\n. Hello, I got some issue which maybe can be resolved by this fix. However, it looks like the issue is not in react-0.14 branch which is the current release version?\n. ",
    "inchr": "I confirm that the required attribute don't show any error...(but the form is not submitted if you're using onValidSubmit)\nShould be added a simple isBlank validation.\n. I confirm that the required attribute don't show any error...(but the form is not submitted if you're using onValidSubmit)\nShould be added a simple isBlank validation.\n. ",
    "maticrivo": "you can add this to your element:\nrequired\nvalidationErrors={{\n  isDefaultRequiredValue: 'Field is required'\n}}\n. you can add this to your element:\nrequired\nvalidationErrors={{\n  isDefaultRequiredValue: 'Field is required'\n}}\n. ",
    "senthilcse49": "Thanks @maticrivo , it worked but error message is visible always instead of showing it in blur/focusout event. is there any other way to show onBlur event ?\n. Thanks @maticrivo , it worked but error message is visible always instead of showing it in blur/focusout event. is there any other way to show onBlur event ?\n. ",
    "SaitejaP": "Using validationErrors, the error message is visible but this.showError() still returns false. Is it possible that when the input is required and left blank, this.showError() returns true?\n. +1\n. Using validationErrors, the error message is visible but this.showError() still returns false. Is it possible that when the input is required and left blank, this.showError() returns true?\n. +1\n. ",
    "wuct": "Fixed by #386 \n. Might related to #276.\nHowever, showError() is still buggy.\n. OK, I manage to fix showError() by this commit .\n. Thanks for merging. Fixed by #386 \n. Might related to #276.\nHowever, showError() is still buggy.\n. OK, I manage to fix showError() by this commit .\n. Thanks for merging. ",
    "charleskoehl": "This workaround displays 'Please fill out this field' on every empty required field when the form is submitted. (This workaround should be obviated by https://github.com/christianalfoni/formsy-react/pull/386.)\nclass FormContainer extends Component\n\n  submitForm(data) {\n    console.log('valid data',data)\n  }\n\n  notifyFormError(data, resetForm, invalidateForm) {\n    let errs = {}\n    this.refs.form.inputs.forEach( (input) => {\n      if(input.showRequired()) {\n      errs[input.props.name] = typeof input.props.validationError === 'string' ? input.props.validationError : 'Please fill out this field.'\n      }\n    })\n    invalidateForm(errs)\n  }\n\n  render() {\n    return (\n      <Formsy.Form\n        onValidSubmit={this.submitForm}\n        onInvalidSubmit={this.notifyFormError}\n        noValidate\n        ref=\"form\"\n      >\n      // some inputs\n      </Formsy.Form>\n    )\n  }\n}. This workaround displays 'Please fill out this field' on every empty required field when the form is submitted. (This workaround should be obviated by https://github.com/christianalfoni/formsy-react/pull/386.)\n\nclass FormContainer extends Component\n\n  submitForm(data) {\n    console.log('valid data',data)\n  }\n\n  notifyFormError(data, resetForm, invalidateForm) {\n    let errs = {}\n    this.refs.form.inputs.forEach( (input) => {\n      if(input.showRequired()) {\n      errs[input.props.name] = typeof input.props.validationError === 'string' ? input.props.validationError : 'Please fill out this field.'\n      }\n    })\n    invalidateForm(errs)\n  }\n\n  render() {\n    return (\n      <Formsy.Form\n        onValidSubmit={this.submitForm}\n        onInvalidSubmit={this.notifyFormError}\n        noValidate\n        ref=\"form\"\n      >\n      // some inputs\n      </Formsy.Form>\n    )\n  }\n}.\n",
    "tanneess": "Hi I personally tried your fix. For my use case it missed one extra check in the attachToForm method. This method is also calling this.validate for each component that gets attached to the form => Validation at first render.\n. Hi I personally tried your fix. For my use case it missed one extra check in the attachToForm method. This method is also calling this.validate for each component that gets attached to the form => Validation at first render.\n. ",
    "brodrigu": "\ud83d\udc4d  for adding the functionality enabled by this PR.\n. \ud83d\udc4d  for adding the functionality enabled by this PR.\n. ",
    "mikaelengstrom": "@Semigradsky Is there any reason this have not been merged?  Let me know if I can help out in any way. \n. @christianalfoni Could you please merge this?. @Semigradsky Is there any reason this have not been merged?  Let me know if I can help out in any way. \n. @christianalfoni Could you please merge this?. ",
    "andrewdavidcostello": "This is also a good PR for performance issues. Loading in 125 rows with 5 Selects in each rows causes validation to happen constantly and you have to wait 20 seconds till the form becomes available. This PR works fine for the most part but I get errors stating to remove the prop from the form tag.\nThe render method needs to be updated to include the prop in nonFormsyProps and in the list above.\nTo round off performance issues, ideally validation needs disabling when the component is unmounted as well as it tries to validate at this point also. For now I have added a simple check for this to set a validation = false in componentWillUnmount and a check at the top of validate form against it.. This is also a good PR for performance issues. Loading in 125 rows with 5 Selects in each rows causes validation to happen constantly and you have to wait 20 seconds till the form becomes available. This PR works fine for the most part but I get errors stating to remove the prop from the form tag.\nThe render method needs to be updated to include the prop in nonFormsyProps and in the list above.\nTo round off performance issues, ideally validation needs disabling when the component is unmounted as well as it tries to validate at this point also. For now I have added a simple check for this to set a validation = false in componentWillUnmount and a check at the top of validate form against it.. ",
    "yuliroth": ":+1: \n. :+1: \n. ",
    "simonvaucher": "Thanks for the suggestion, @Semigradsky - I am a bit concerned avout the creating a too-big overhead, but will try.\n. Thanks for the suggestion, @Semigradsky - I am a bit concerned avout the creating a too-big overhead, but will try.\n. ",
    "tylercollier": "+1\n. @Semigradsky Where is your fork? I assumed https://github.com/Semigradsky/formsy-react but it's not there.\n. +1\n. @Semigradsky Where is your fork? I assumed https://github.com/Semigradsky/formsy-react but it's not there.\n. ",
    "raveclassic": "I'm running into similar issue - can't validate on submit. \nSeems like all examples relay on the fact that submit button is disabled until onValidSubmit is called. But in my case the button is enabled always and the form has to show all error messages if user submits it empty. I tried calling setPrisine and validateForm in onInvalidSubmit hook but with no luck - is this possible?\n. I'm running into similar issue - can't validate on submit. \nSeems like all examples relay on the fact that submit button is disabled until onValidSubmit is called. But in my case the button is enabled always and the form has to show all error messages if user submits it empty. I tried calling setPrisine and validateForm in onInvalidSubmit hook but with no luck - is this possible?\n. ",
    "albertolive": "Try using formNoValidate and set to true:\njavascript\n<button formNoValidate={true} type=\"submit\"></button>\nAlso validate form onValidSubmit and use preventExternalInvalidation:\njavascript\n<Formsy.Form onValidSubmit={this._submit.bind(this)} ref=\"form\" preventExternalInvalidation>\n  <Input\n    ...\n    type=\"email\"\n    autoComplete=\"off\"\n    validations=\"isEmail\"\n    required />\n  ...\n  <button formNoValidate={true} type=\"submit\"></button>\n</Formsy.Form>\nhttp://twisty.github.io/formsy-react-components/playground/\nHope it helps!\n. Sorry, this is the correct link: \nhttps://github.com/twisty/formsy-react-components/blob/gh-pages/playground/src/app.js\nI don't really know how formNoValidate works (It just worked for me). I just only know that when some input is required (I'm using formsy-react-components), putting formNoValidate to true, when the user clicks on submit, it will validate it.\n. +1\n. Try using formNoValidate and set to true:\njavascript\n<button formNoValidate={true} type=\"submit\"></button>\nAlso validate form onValidSubmit and use preventExternalInvalidation:\njavascript\n<Formsy.Form onValidSubmit={this._submit.bind(this)} ref=\"form\" preventExternalInvalidation>\n  <Input\n    ...\n    type=\"email\"\n    autoComplete=\"off\"\n    validations=\"isEmail\"\n    required />\n  ...\n  <button formNoValidate={true} type=\"submit\"></button>\n</Formsy.Form>\nhttp://twisty.github.io/formsy-react-components/playground/\nHope it helps!\n. Sorry, this is the correct link: \nhttps://github.com/twisty/formsy-react-components/blob/gh-pages/playground/src/app.js\nI don't really know how formNoValidate works (It just worked for me). I just only know that when some input is required (I'm using formsy-react-components), putting formNoValidate to true, when the user clicks on submit, it will validate it.\n. +1\n. ",
    "fxfilmxf": "@albertolive I don't see this behavior in the playground page that you linked (I tried the email field). I also can't get it to work for myself. Can you explain to me how formNoValidate works with Formsy? \n. +1\n. I ended up making my own higher order component that overrides the validate and showError methods.\nSomething like this:\n``` javascript\nimport { Mixin as FormsyMixin } from 'formsy-react';\nconst HOC = (FormComponent) =>\n  React.createClass({\n    displayName: 'FormComponent',\npropTypes: {\n  disabled: PropTypes.bool,\n},\n\nmixins: [FormsyMixin],\n\n// Override formsy's showError because it returns true as soon as\n// the input is invalid (which for required fields is immediately)\n// Instead we return true if the field is invalid AND the form\n// has attempted to be submitted\nourShowError() {\n  return !this.props.disabled &&\n    !this.isValid() &&\n    this.isFormSubmitted();\n},\n\nrender() {\n  return (\n    <FormComponent\n      setValidations={this.setValidations}\n      setValue={this.setValue}\n      resetValue={this.resetValue}\n      getValue={this.getValue}\n      hasValue={this.hasValue}\n      getErrorMessage={this.getErrorMessage}\n      getErrorMessages={this.getErrorMessages}\n      isFormDisabled={this.isFormDisabled}\n      isValid={this.isValid}\n      isPristine={this.isPristine}\n      isFormSubmitted={this.isFormSubmitted}\n      isRequired={this.isRequired}\n      showRequired={this.showRequired}\n      showError={this.ourShowError}\n      isValidValue={this.isValidValue}\n      {...this.props}\n    />\n  );\n},\n\n});\nexport default HOC;\n```\n. @achtan \n``` ruby\n...\nimport HOC from './yourHOC'\nclass MyComponent extends React.Component {\n  ...\n   fooBar() {\n     this.props.getValue() # the HOC exposes it's functionality through this component's props\n   }\n  ...\n}\nexport default HOC(MyComponent);\n```\n. @albertolive I don't see this behavior in the playground page that you linked (I tried the email field). I also can't get it to work for myself. Can you explain to me how formNoValidate works with Formsy? \n. +1\n. I ended up making my own higher order component that overrides the validate and showError methods.\nSomething like this:\n``` javascript\nimport { Mixin as FormsyMixin } from 'formsy-react';\nconst HOC = (FormComponent) =>\n  React.createClass({\n    displayName: 'FormComponent',\npropTypes: {\n  disabled: PropTypes.bool,\n},\n\nmixins: [FormsyMixin],\n\n// Override formsy's showError because it returns true as soon as\n// the input is invalid (which for required fields is immediately)\n// Instead we return true if the field is invalid AND the form\n// has attempted to be submitted\nourShowError() {\n  return !this.props.disabled &&\n    !this.isValid() &&\n    this.isFormSubmitted();\n},\n\nrender() {\n  return (\n    <FormComponent\n      setValidations={this.setValidations}\n      setValue={this.setValue}\n      resetValue={this.resetValue}\n      getValue={this.getValue}\n      hasValue={this.hasValue}\n      getErrorMessage={this.getErrorMessage}\n      getErrorMessages={this.getErrorMessages}\n      isFormDisabled={this.isFormDisabled}\n      isValid={this.isValid}\n      isPristine={this.isPristine}\n      isFormSubmitted={this.isFormSubmitted}\n      isRequired={this.isRequired}\n      showRequired={this.showRequired}\n      showError={this.ourShowError}\n      isValidValue={this.isValidValue}\n      {...this.props}\n    />\n  );\n},\n\n});\nexport default HOC;\n```\n. @achtan \n``` ruby\n...\nimport HOC from './yourHOC'\nclass MyComponent extends React.Component {\n  ...\n   fooBar() {\n     this.props.getValue() # the HOC exposes it's functionality through this component's props\n   }\n  ...\n}\nexport default HOC(MyComponent);\n```\n. ",
    "megapctr": "Did you set the method attribute in your Formsy.Form?\n. @jamedranoa fantastic job debugging this!\n. Other way you can get custom validators is this\n``` js\nFormsy.addValidationRule('notIn', (values, value, array) => !_.includes(array, value))\n// usage\nvalidations: {\n    matchRegexp: /^[\\w -]+$/,\n    notIn: reservedNames,\n},\n```\n. :+1: I had the same problem.\nTurns out this feature hasn't been released yet, but documentation already mentions it.\n@christianalfoni any plans for a new release?\nAlso, linking to documentation from latest release in the readme file (instead of master) would be very useful IMO\n. @liuyutao for now you can reproduce the behavior of getModel manually:\ngetModel: function () {\n  var currentValues = this.getCurrentValues();\n  return this.mapModel(currentValues);\n},\nThough I'm not sure why calling getCurrentValues is not enough? what does mapModel do?\nedit: mapModel applies custom mapping, so make sure to use that as well if you're going to use mapping\nedit2: I don't use mapping and mapModel breaks stuff:\n```\n\nform.getCurrentValues()\nObject {size: \"llkj\"}\nform.mapModel(form.getCurrentValues())\nObject {size: undefined}\n``\n. Did you set themethodattribute in yourFormsy.Form`?\n. @jamedranoa fantastic job debugging this!\n. Other way you can get custom validators is this\n\n``` js\nFormsy.addValidationRule('notIn', (values, value, array) => !_.includes(array, value))\n// usage\nvalidations: {\n    matchRegexp: /^[\\w -]+$/,\n    notIn: reservedNames,\n},\n```\n. :+1: I had the same problem.\nTurns out this feature hasn't been released yet, but documentation already mentions it.\n@christianalfoni any plans for a new release?\nAlso, linking to documentation from latest release in the readme file (instead of master) would be very useful IMO\n. @liuyutao for now you can reproduce the behavior of getModel manually:\ngetModel: function () {\n  var currentValues = this.getCurrentValues();\n  return this.mapModel(currentValues);\n},\nThough I'm not sure why calling getCurrentValues is not enough? what does mapModel do?\nedit: mapModel applies custom mapping, so make sure to use that as well if you're going to use mapping\nedit2: I don't use mapping and mapModel breaks stuff:\n```\n\nform.getCurrentValues()\nObject {size: \"llkj\"}\nform.mapModel(form.getCurrentValues())\nObject {size: undefined}\n```\n. \n",
    "gcanti": "Have you tried using different type attributes?\nhtml\n<button type=\"submit\">Submit</button>\n<button type=\"button\">Clear</button>\n. Have you tried using different type attributes?\nhtml\n<button type=\"submit\">Submit</button>\n<button type=\"button\">Clear</button>\n. ",
    "JeremyBYU": "I also need the getModel function. It doesnt seem to be available in the 0.17.0 release.  I see it on the master branch however.  \nI'm having an issue where my package manager (Meteor) doesnt seem to work when referencing a specific git commit (in order to get master branch).  Would really like it if you could push this functionality into another version (like 0.18.0)\n. I also need the getModel function. It doesnt seem to be available in the 0.17.0 release.  I see it on the master branch however.  \nI'm having an issue where my package manager (Meteor) doesnt seem to work when referencing a specific git commit (in order to get master branch).  Would really like it if you could push this functionality into another version (like 0.18.0)\n. ",
    "abejfehr": "This ^^ it's a potential deal-breaker\n. This ^^ it's a potential deal-breaker\n. ",
    "daGrevis": "Hello?!\n. Hello?!\n. ",
    "0xori": "try this.refs.form.model , works for me.\n. try this.refs.form.model , works for me.\n. ",
    "benknight": "Update: This seems to be most noticeable when the input is required.\n. Update: This seems to be most noticeable when the input is required.\n. ",
    "te-chris": "I'm seeing this as well.  I've created a custom component and it's causing an infinite loop when there is no validation set.  When I set validations to isExisty it behaves as expected.\n. I'm seeing this as well.  I've created a custom component and it's causing an infinite loop when there is no validation set.  When I set validations to isExisty it behaves as expected.\n. ",
    "jwohlfert23": "+1\n. +1\n. ",
    "jamedranoa": "the problem is coming from here, that if condition will always be false if the component has a custom validation (a function) because  the function isSame will always return false when is comparing the two functions allocated in two different objects (new props, prevProps). and the function formsy.validate will make use of setState which will repeat the cycle.\none solution (not ideal) could be adding a condition to compare functions on the isSame function and compare the toString result. \njavascript\n fun1.toString() === fun2.toString();\nbut I'm not sure if this could have negative implications in others parts of the code. \n. +1\n. the problem is coming from here, that if condition will always be false if the component has a custom validation (a function) because  the function isSame will always return false when is comparing the two functions allocated in two different objects (new props, prevProps). and the function formsy.validate will make use of setState which will repeat the cycle.\none solution (not ideal) could be adding a condition to compare functions on the isSame function and compare the toString result. \njavascript\n fun1.toString() === fun2.toString();\nbut I'm not sure if this could have negative implications in others parts of the code. \n. +1\n. ",
    "Stupidism": "Why is this not fixed yet?\nI came up into this bug last week and it has wasted me several hours locating the problem into formsy-react.\n. Somebody is doing this?\n. Why is this not fixed yet?\nI came up into this bug last week and it has wasted me several hours locating the problem into formsy-react.\n. Somebody is doing this?\n. ",
    "dgcoffman": "I think removing it from the docs and marking wontfix would be sufficient, if maintainers have no interest in fixing this feature.\n. I think removing it from the docs and marking wontfix would be sufficient, if maintainers have no interest in fixing this feature.\n. ",
    "cj3kim": "+1\n. When will the solution be merged in?\n. +1\n. When will the solution be merged in?\n. ",
    "Azerothian": "+!\n. I think i need to put it out there that react-formsy in its current state works fine with React 16.\nTested with a basic form and a custom HOC class based textfield control. +!\n. I think i need to put it out there that react-formsy in its current state works fine with React 16.\nTested with a basic form and a custom HOC class based textfield control. ",
    "apuntovanini": "+1\n. @simondell @ffxsam you guys can also check new and maintained repo https://github.com/formsy/formsy-react\n. +1\n. @simondell @ffxsam you guys can also check new and maintained repo https://github.com/formsy/formsy-react\n. ",
    "poluyanov": "Formzy :)\n. Formzy :)\n. ",
    "kirkov": "Great you are stepping in and continuing the development!\nRegarding the name - I think it's just fine :) \n. Great you are stepping in and continuing the development!\nRegarding the name - I think it's just fine :) \n. ",
    "jrm2k6": "Would it be possible for the original contributor to give full access to this repo to some other contributors? That would avoid having to move the repo around. It can be confusing for new users?\n. @twisty Yes this is what I meant! npm rights to be able to publish.\nI would be more than willing to contribute if needed also!\n. Would it be possible for the original contributor to give full access to this repo to some other contributors? That would avoid having to move the repo around. It can be confusing for new users?\n. @twisty Yes this is what I meant! npm rights to be able to publish.\nI would be more than willing to contribute if needed also!\n. ",
    "rawrmaan": "@Semigradsky Where is your fork? I assumed https://github.com/Semigradsky/formsy-react but it's not there.\n. @Semigradsky Where is your fork? I assumed https://github.com/Semigradsky/formsy-react but it's not there.\n. ",
    "ffxsam": "I'd be interested in knowing where the new fork is, as well as contributing where I can. IMO, it would be nice to ditch the mixin and make it a high-order function instead.\n. I personally went with react-redux-form and highly recommend it!\n. Are you using an ES6 class for your component? I believe this package requires that you use React.createClass to create your components.\n. Oh, now I remember. I had this error in material-ui, and it was because material-ui has its own react install in node_modules. So I just had to rm -rf node_modules/react in my material-ui folder and it fixed it.\n. I'd be interested in knowing where the new fork is, as well as contributing where I can. IMO, it would be nice to ditch the mixin and make it a high-order function instead.\n. I personally went with react-redux-form and highly recommend it!\n. Are you using an ES6 class for your component? I believe this package requires that you use React.createClass to create your components.\n. Oh, now I remember. I had this error in material-ui, and it was because material-ui has its own react install in node_modules. So I just had to rm -rf node_modules/react in my material-ui folder and it fixed it.\n. ",
    "tomzmtl": "@Semigradsky Do you have any news on this? We are considering using formsy but its development state may be a key in our decision.\n. @Semigradsky Do you have any news on this? We are considering using formsy but its development state may be a key in our decision.\n. ",
    "jackyon": "@Semigradsky  \nstill waiting for the feature:\nonInvalid and onInvalidSubmit should pass a map of input names and their errors\ncan you advise how or when this can be support? thx!\n. +1\n. @Semigradsky  \nstill waiting for the feature:\nonInvalid and onInvalidSubmit should pass a map of input names and their errors\ncan you advise how or when this can be support? thx!\n. +1\n. ",
    "pizzurro": "@Semigradsky  I think the important concept to point out is why the current implementation is valid.  In thinking through this some more, it seems that the reason to allow minLength to pass if there are no characters is to allow a field to be optional but require a minimum number of characters if a value is provided.  When thinking about it this way, the current implementation makes sense as does your advice.\n. @Semigradsky  I think the important concept to point out is why the current implementation is valid.  In thinking through this some more, it seems that the reason to allow minLength to pass if there are no characters is to allow a field to be optional but require a minimum number of characters if a value is provided.  When thinking about it this way, the current implementation makes sense as does your advice.\n. ",
    "CoveTechnologyAus": "+1\n. +1\n. ",
    "xiuwyang": "+1\n. +1\n. ",
    "Jareechang": "doesn't onValidSubmit do just that ? It should trigger validations before allow for submission. . @aesopwolf and @morenoh149 any progressive with this ? If not, I could help with this!. @morenoh149, ok. I'll go ahead and do that \ud83d\ude04. \nup to date documentation / examples = \u2764\ufe0f  for developers! . Sorry for being late on this one. I am currently updating the DOCS and examples with new syntax which hopefully would help! PR coming soon, stay tuned peeps! . if anyone is interested is still stuck on how to convert away from using mixins, see my PR at #449. It provides an example of this. Feel free to reach out to me if you are stuck. . you are using event.currentTarget.checked, which is undefined. It should just be event.target.checked.. you will have to use set ref for this. Please see https://facebook.github.io/react/docs/refs-and-the-dom.html. whats the road map right now ? I would love to contribute and make updates but this project seems pretty in-active.\n\n. doesn't onValidSubmit do just that ? It should trigger validations before allow for submission. . @aesopwolf and @morenoh149 any progressive with this ? If not, I could help with this!. @morenoh149, ok. I'll go ahead and do that \ud83d\ude04. \nup to date documentation / examples = \u2764\ufe0f  for developers! . Sorry for being late on this one. I am currently updating the DOCS and examples with new syntax which hopefully would help! PR coming soon, stay tuned peeps! . if anyone is interested is still stuck on how to convert away from using mixins, see my PR at #449. It provides an example of this. Feel free to reach out to me if you are stuck. . you are using event.currentTarget.checked, which is undefined. It should just be event.target.checked.. you will have to use set ref for this. Please see https://facebook.github.io/react/docs/refs-and-the-dom.html. whats the road map right now ? I would love to contribute and make updates but this project seems pretty in-active.\n\n. ",
    "cdroulers": "Have you tried adding the noValidate attribute to your <Formsy.Form> element? I think that's what fixed this for me.\n. I think it should be validations={{isEmptyString: true}}, otherwise you are disabling the rule.\n. Could also be related to https://github.com/christianalfoni/formsy-react/issues/338\n. Have you tried adding the noValidate attribute to your <Formsy.Form> element? I think that's what fixed this for me.\n. I think it should be validations={{isEmptyString: true}}, otherwise you are disabling the rule.\n. Could also be related to https://github.com/christianalfoni/formsy-react/issues/338\n. ",
    "keul": "I've a similar issue with version 0.17.0: I use \"required\" attribute on formsy fields but I disabled the browser validation adding noValidate on form.\nThis prevents the browser to manage required data by default but at the same time required field are not checked at all by formsy.\nAs soon as I put data inside the field, other validations runs normally.\n. @Semigradsky I missed this feature!\nThanks\n. I've a similar issue with version 0.17.0: I use \"required\" attribute on formsy fields but I disabled the browser validation adding noValidate on form.\nThis prevents the browser to manage required data by default but at the same time required field are not checked at all by formsy.\nAs soon as I put data inside the field, other validations runs normally.\n. @Semigradsky I missed this feature!\nThanks\n. ",
    "tonykung06": "I am wondering if there is a way to have form's validationErrors, which could be coming from server validation, work well with inputs' validations.\n. I am wondering if there is a way to have form's validationErrors, which could be coming from server validation, work well with inputs' validations.\n. ",
    "altaha": "@tonykung06 There is also the updateInputsWithError method, which has a similar usecase as validationErrors props but works a little differently. It does not override the inputs' validations, but you need to make sure to clear it to remove the external error!\nI still think validationErrors should be updated so that it does not override input validations even when validationErrors is an empty object. I'll try to open a pull request for that!\n. @tonykung06 There is also the updateInputsWithError method, which has a similar usecase as validationErrors props but works a little differently. It does not override the inputs' validations, but you need to make sure to clear it to remove the external error!\nI still think validationErrors should be updated so that it does not override input validations even when validationErrors is an empty object. I'll try to open a pull request for that!\n. ",
    "tjcampbell": "A few months late but @clayne11 I think you are mistaken. AFAIK with Formsy there is no way to access an external component API through refs when using the HOC. #341 brings up the same issue. I've seen some libraries implement a getInstance() function on their HOCs to return the inner component's instance. @Semigradsky is there a workaround?\n. A few months late but @clayne11 I think you are mistaken. AFAIK with Formsy there is no way to access an external component API through refs when using the HOC. #341 brings up the same issue. I've seen some libraries implement a getInstance() function on their HOCs to return the inner component's instance. @Semigradsky is there a workaround?\n. ",
    "FutureKode": "For use with es6 I think you can use this https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc\n. For use with es6 I think you can use this https://github.com/christianalfoni/formsy-react/blob/master/API.md#formsyhoc\n. ",
    "donaldparker": "You can use HOC or the Decorator\n. I could use this, fields that are auto-completed are not marked as valid. I've reported the issue here #356\n. You can use HOC or the Decorator\n. I could use this, fields that are auto-completed are not marked as valid. I've reported the issue here #356\n. ",
    "hantsy": "Decorator is better for ES6.\n. Decorator is better for ES6.\n. ",
    "simondell": "If you're using the HOC or the decorator, note that the validation() method doesn't seem to work as described for components using React.createClass. #272 offers a workaround.. @apuntovanini Thanks!. Issue #272 offers a workaround for this problem (or some similar ones). It worked for me.. If you're using the HOC or the decorator, note that the validation() method doesn't seem to work as described for components using React.createClass. #272 offers a workaround.. @apuntovanini Thanks!. Issue #272 offers a workaround for this problem (or some similar ones). It worked for me.. ",
    "mikedizon": "+1\n. +1\n. ",
    "davidpelayo": "+1 same here!\n. +1 same here!\n. ",
    "hevar": "Well, I guess no one cares....\n. I solved it by:\n1. Remove the /tmp folder (suggested by @hiro1107 ), or you can simply reboot your computer.\n2. rm -rf node_modules (deleten all npm packags)\n3. npm cache clean (clearing the cache)\n4. npm run start. You can replace start with one of the other scripts (deploy, test, examples and prepublish) depending on what you want to do. \n. Well, I guess no one cares....\n. I solved it by:\n1. Remove the /tmp folder (suggested by @hiro1107 ), or you can simply reboot your computer.\n2. rm -rf node_modules (deleten all npm packags)\n3. npm cache clean (clearing the cache)\n4. npm run start. You can replace start with one of the other scripts (deploy, test, examples and prepublish) depending on what you want to do. \n. ",
    "tal952": "+1\n. +1\n. ",
    "hiro1107": "I got the same error. \nI deleted tmp folder and it is now working again. Hope it will help!\n. I got the same error. \nI deleted tmp folder and it is now working again. Hope it will help!\n. ",
    "dsaket": "I removed the /tmp folder and my chrome crashed and then it refused to restart. Then when I tried rebooting, my system got stuck in a login loop.\nI think simply rebooting could have done the work.\n. I removed the /tmp folder and my chrome crashed and then it refused to restart. Then when I tried rebooting, my system got stuck in a login loop.\nI think simply rebooting could have done the work.\n. ",
    "SachaG": "No, I'm using React.createClass. \n. Is this package still maintained? Or is there a more active fork somewhere?\n. Awesome work!\n. No, I'm using React.createClass. \n. Is this package still maintained? Or is there a more active fork somewhere?\n. Awesome work!\n. ",
    "Grmiade": "I think that the PR #259 could help me. Any news ?\n. I think that the PR #259 could help me. Any news ?\n. ",
    "liuyutao": "@megapctr thanks your help.\n. @megapctr thanks your help.\n. ",
    "sebfek": "hm no idea?\n. hm no idea?\n. ",
    "lance-anderson": "I have the same need but for a different use case. I'd like to reset the pristine values after the user saves the data to the server. In this scenario, the pristine state is the last saved state, not the initial state.\n. I have the same need but for a different use case. I'd like to reset the pristine values after the user saves the data to the server. In this scenario, the pristine state is the last saved state, not the initial state.\n. ",
    "Colmea": "I'm facing this \"issue\" too (but with Stepper from material-ui) and would like suggestions.\nActually it's logical: when you submit your form, your first tabs are not mounted in the DOM anymore. The only existing inputs are those in the last tab.\nThe question is, how to handle such cases ? The only work around I see is to populate a global \"formData\" variable before switching on each tab, But then you can't use form validation, form submit event, ...\nIt would be nice to have your point of view !\n. I'm facing this \"issue\" too (but with Stepper from material-ui) and would like suggestions.\nActually it's logical: when you submit your form, your first tabs are not mounted in the DOM anymore. The only existing inputs are those in the last tab.\nThe question is, how to handle such cases ? The only work around I see is to populate a global \"formData\" variable before switching on each tab, But then you can't use form validation, form submit event, ...\nIt would be nice to have your point of view !\n. ",
    "acomito": "I'm using stepper from material-ui as well. I just ran into this problem too.\nYou could create a global variable (or use state) but, like @Colmea noted, at that point there is no reason to use formsy (no submit, validation, etc.)\nright now I have the stepper nested inside formsy (which doesnt work):\n<Formsy.Form> // stepper stuff </Formsy.Form>\nI may try a formsy inside each stepper content section... and have the \"next button\" populate state or something. \n```\n        \n\n this.setState({stepIndex: 0})}>\n              Basic Information\n            \n\n\n\n\n\n\n\n              {this.renderStepActions(0)}\n            \n\n// rinse and repeat for each step\n```\nBut it is probably better to just build from scratch at this point.\n. I'm having trouble with this too. I can't seem to get this.refs.form.reset() to work at all, inside the submit() method or otherwise.\n. @jarussi-luizalabs did you make sure the fields all have initial values set in value= or defaultValue=?\n. Thats what got me too\n. I couldn't get it working. I'm using the material-ui version, so maybe it is related to that. I forget the work around I used but will post it when I have the project open again... I'll close this for now.\n. I can't seem to get reset to work. I'm trying it like in the examples, and this.refs.form.reset() is running, but nothing is resetting and it doesn't throw any errors.\n. aaaaaand I forgot to pass it an initial value like value=''\n. same here. using material-ui version.\n. I'm using stepper from material-ui as well. I just ran into this problem too.\nYou could create a global variable (or use state) but, like @Colmea noted, at that point there is no reason to use formsy (no submit, validation, etc.)\nright now I have the stepper nested inside formsy (which doesnt work):\n<Formsy.Form> // stepper stuff </Formsy.Form>\nI may try a formsy inside each stepper content section... and have the \"next button\" populate state or something. \n```\n        \n\n this.setState({stepIndex: 0})}>\n              Basic Information\n            \n\n\n\n\n\n\n\n              {this.renderStepActions(0)}\n            \n\n// rinse and repeat for each step\n```\nBut it is probably better to just build from scratch at this point.\n. I'm having trouble with this too. I can't seem to get this.refs.form.reset() to work at all, inside the submit() method or otherwise.\n. @jarussi-luizalabs did you make sure the fields all have initial values set in value= or defaultValue=?\n. Thats what got me too\n. I couldn't get it working. I'm using the material-ui version, so maybe it is related to that. I forget the work around I used but will post it when I have the project open again... I'll close this for now.\n. I can't seem to get reset to work. I'm trying it like in the examples, and this.refs.form.reset() is running, but nothing is resetting and it doesn't throw any errors.\n. aaaaaand I forgot to pass it an initial value like value=''\n. same here. using material-ui version.\n. ",
    "jmsherry": "It's on this.props, you just have to make sure that this is bound properly\n. It's on this.props, you just have to make sure that this is bound properly\n. ",
    "steelx": "same here ...wondering \n. same here ...wondering \n. ",
    "IronTony": "So guys, any help about this?\nSorry but the HOC documentation is not so clear to me. Thank you very much, my bad!. So guys, any help about this?\nSorry but the HOC documentation is not so clear to me. Thank you very much, my bad!. ",
    "copas2": "This definitely needs to be changed in /src/Mixin.js since undefined values of input components result in uncontrolled components in v15.\ngetValue: function () {\n    return this.state._value || \"\";\n  },\n. This definitely needs to be changed in /src/Mixin.js since undefined values of input components result in uncontrolled components in v15.\ngetValue: function () {\n    return this.state._value || \"\";\n  },\n. ",
    "dlivas": "@mbrookes - many thanks! is there a tag for material-ui 0.15.0 that I could use in my package.json? for material-ui 0.15.0? \nI need to do something like \nnpm --save install formsy-material-ui@x\nwhat x can I use?\nmany thanks!\n. @mbrookes - many thanks! is there a tag for material-ui 0.15.0 that I could use in my package.json? for material-ui 0.15.0? \nI need to do something like \nnpm --save install formsy-material-ui@x\nwhat x can I use?\nmany thanks!\n. ",
    "cumbreras": "Nice one!\n. Nice one!\n. ",
    "dkremez": "@Semigradsky sorry. Have you made npm publish? As npm show 0.17.0 version as letest https://www.npmjs.com/package/formsy-react\n. @Semigradsky sorry. Have you made npm publish? As npm show 0.17.0 version as letest https://www.npmjs.com/package/formsy-react\n. ",
    "Ismael": "Yes: Development is being picked up again, see\nhttps://github.com/christianalfoni/formsy-react/issues/301#issuecomment-211562388\n. Yes: Development is being picked up again, see\nhttps://github.com/christianalfoni/formsy-react/issues/301#issuecomment-211562388\n. ",
    "scottburch": "Is there a status update on this?  I am running into non-optimal form behavior using formsy-material-ui.  In my case, the submit button is not being enabled when a field becomes valid as I would expect.  I have to blur first.  \nLet me know if I am missing something obvious.\n. I will probably just write a wrapper to provide the behavior that I want.  It took me too long, but I figured out a way to get similar behaviour to what I was looking for.  This is not good code, but it shows kind of what I want in behaviour.  (this is using formsy material-ui).  Let me know if there is a plan to integrate this behaviour.  \nThanks for making the source code pretty easy to read. \n```\n    validate(ev) {\n        this.refs.pass.setValue(ev.target.value);\n    }\n---------------- and in render -------------------\n\n```\n. Sorry about all of the comments.  I figured out how to do what I wanted.  I also found some of this in the docs, after I had figured it out.  I just did not know where to look.  Just for anyone else that is trying to do the same thing and stumbles across this issue.  \nThe following code will:\n- Run validation once the value in the field is valid causing the form to show valid and running any reactive updates.  In my case, enabling the submit button.\n- Run validation again if the field then becomes invalid causing the form to show invalid and again disabling the submit button.\n```\nvar TextField = class TextField extends Component {\n    render() {\n        var {onChange, ...props} = this.props;\n    return <FormsyText ref=\"field\" onChange={onChangeWrapper.bind(this)} {...props} />\n\n    function onChangeWrapper(ev) {\n        var value = ev.target.value;\n        var field = this.refs.field;\n        field.isValidValue(value) ? field.setValue(value) : field.isValid() && field.setValue(value);\n        onChange && onChange.call(this, ev);\n    }\n}\n\n};\n```\n. Is there a status update on this?  I am running into non-optimal form behavior using formsy-material-ui.  In my case, the submit button is not being enabled when a field becomes valid as I would expect.  I have to blur first.  \nLet me know if I am missing something obvious.\n. I will probably just write a wrapper to provide the behavior that I want.  It took me too long, but I figured out a way to get similar behaviour to what I was looking for.  This is not good code, but it shows kind of what I want in behaviour.  (this is using formsy material-ui).  Let me know if there is a plan to integrate this behaviour.  \nThanks for making the source code pretty easy to read. \n```\n    validate(ev) {\n        this.refs.pass.setValue(ev.target.value);\n    }\n---------------- and in render -------------------\n\n```\n. Sorry about all of the comments.  I figured out how to do what I wanted.  I also found some of this in the docs, after I had figured it out.  I just did not know where to look.  Just for anyone else that is trying to do the same thing and stumbles across this issue.  \nThe following code will:\n- Run validation once the value in the field is valid causing the form to show valid and running any reactive updates.  In my case, enabling the submit button.\n- Run validation again if the field then becomes invalid causing the form to show invalid and again disabling the submit button.\n```\nvar TextField = class TextField extends Component {\n    render() {\n        var {onChange, ...props} = this.props;\n    return <FormsyText ref=\"field\" onChange={onChangeWrapper.bind(this)} {...props} />\n\n    function onChangeWrapper(ev) {\n        var value = ev.target.value;\n        var field = this.refs.field;\n        field.isValidValue(value) ? field.setValue(value) : field.isValid() && field.setValue(value);\n        onChange && onChange.call(this, ev);\n    }\n}\n\n};\n```\n. ",
    "erifranck": "thank :+1: i didn't see this error XD\n. thank :+1: i didn't see this error XD\n. ",
    "zimt28": "Same issue, value={props.getValue() || ''} fixes this for now.\n. Same issue, value={props.getValue() || ''} fixes this for now.\n. ",
    "andreechristian": "+1\n. +1\n. ",
    "uzarubin": "Just wanted to point out that it's this.getValue() instead of props.getValue()\n. Just wanted to point out that it's this.getValue() instead of props.getValue()\n. ",
    "JosephClay": "@uzarubin The HOC will attach the methods to props, the mixin to this. \n. @uzarubin The HOC will attach the methods to props, the mixin to this. \n. ",
    "mohithg": "@Semigradsky  I have a use case like \n```\n\n\n\n\n\n\n\n\n\n\n```\nThese groups are optional, but if user types in any one of input1, 2 or 3 then these three will become mandatory. How to solve this?\n. This is neat. @Semigradsky  I have a use case like \n```\n\n\n\n\n\n\n\n\n\n\n```\nThese groups are optional, but if user types in any one of input1, 2 or 3 then these three will become mandatory. How to solve this?\n. This is neat. ",
    "Steinarthor": "I've noticed this as well. I'm really just trying to do a very simple validation with one input field for the Name. If the field is left blank, a error message should appear. \nIs there really no simple way to do this ?\n. I've noticed this as well. I'm really just trying to do a very simple validation with one input field for the Name. If the field is left blank, a error message should appear. \nIs there really no simple way to do this ?\n. ",
    "sean-ww": "@Semigradsky required doesn't prevent just blank spaces being added. @Semigradsky required doesn't prevent just blank spaces being added. ",
    "rkuykendall": "If anyone has interest in continuing this issue, please make a new one in the new 'formsy' organization: formsy/formsy-react/issues.\nI think this could easily be solved with a custom ( or maybe even added to repo ) validator, similar to below:\n```js\nimport { addValidationRule } from 'formsy-react';\nfunction isNotBlankString (values, value) {\n  return value && value.trim().length > 0;\n}\naddValidationRule('isNotBlankString', isNotBlankString);\n``. Moved issue to newformsyorganization: https://github.com/formsy/formsy-react/issues/10. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react. This issue has been moved to the newformsyorganization: https://github.com/formsy/formsy-react/issues/2. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react/issues/2. Moved this issue to the new formsy organization: https://github.com/formsy/formsy-react/issues/6. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react. I believe this has been solved? Check out the newformsyorganization with Formsy1.0.1`: https://github.com/formsy/formsy-react. This looks like a very valid issue. This repo has moved to formsy/formsy-react.\nCan someone recreate it there with a list of values that you think should and should not be valid? Right now this is the spec that this validator is tested against: tests/Rules-isExisty-spec.js.. This issue has been SOLVED in the new formsy organization with Formsy 1.0.1: https://github.com/formsy/formsy-react. @aesopwolf Any update on this? The beta PR you opened ( https://github.com/christianalfoni/formsy-react/pull/477 ) sounds hopeful that this project is no longer dead?\nWe are trying to evaluate if we need to move formsy-react-2 to ever get react 16 support.. @th3fallen Thanks, but if this project has figured out how to un-stick itself that would be a much better solution, as the fork would need to gain a lot of momentum.. This issue has been SOLVED! Multiple owners have been added to a new formsy organization.\nhttps://github.com/formsy/formsy-react/. @aesopwolf Is this project abandoned? Are we limited by the owner? Is there anything we can do to un-stick the project and start getting updates out?. Done. https://github.com/formsy-react\nReally appreciate all the work you've done and your help making sure this project is able to continue to succeed when you don't have as much time as you would like.. @aesopwolf Added all as owners. Let me know if there's anything else you need from me.. Hey @jcalfee! I think this issue has a strong case to make. My coworker actually thinks should happen. Can you make an issue on the new formsy organization? https://github.com/formsy/formsy-react/. This issue has been moved to the new formsy organization: https://github.com/formsy/formsy-react/issues/7. This issue has been SOLVED in the new formsy organization with Formsy 1.1.0: https://github.com/formsy/formsy-react/. This is an interesting issue. If you're still interested, can you re-create it in the new formsy organization? https://github.com/formsy/formsy-react. Hey @vikasrohit! This project is now managed at formsy/formsy-react.\nCould you re-create your issue there, and include some relevant snippets of your code? As far as I'm aware, this is not a known bug. You should be getting the correct error message with validationErrors. . If anyone has interest in continuing this issue, please make a new one in the new 'formsy' organization: formsy/formsy-react/issues.\nI think this could easily be solved with a custom ( or maybe even added to repo ) validator, similar to below:\n```js\nimport { addValidationRule } from 'formsy-react';\nfunction isNotBlankString (values, value) {\n  return value && value.trim().length > 0;\n}\naddValidationRule('isNotBlankString', isNotBlankString);\n``. Moved issue to newformsyorganization: https://github.com/formsy/formsy-react/issues/10. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react. This issue has been moved to the newformsyorganization: https://github.com/formsy/formsy-react/issues/2. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react/issues/2. Moved this issue to the new formsy organization: https://github.com/formsy/formsy-react/issues/6. This issue has been **SOLVED** in the newformsyorganization with Formsy1.0.1: https://github.com/formsy/formsy-react. I believe this has been solved? Check out the newformsyorganization with Formsy1.0.1`: https://github.com/formsy/formsy-react. This looks like a very valid issue. This repo has moved to formsy/formsy-react.\nCan someone recreate it there with a list of values that you think should and should not be valid? Right now this is the spec that this validator is tested against: tests/Rules-isExisty-spec.js.. This issue has been SOLVED in the new formsy organization with Formsy 1.0.1: https://github.com/formsy/formsy-react. @aesopwolf Any update on this? The beta PR you opened ( https://github.com/christianalfoni/formsy-react/pull/477 ) sounds hopeful that this project is no longer dead?\nWe are trying to evaluate if we need to move formsy-react-2 to ever get react 16 support.. @th3fallen Thanks, but if this project has figured out how to un-stick itself that would be a much better solution, as the fork would need to gain a lot of momentum.. This issue has been SOLVED! Multiple owners have been added to a new formsy organization.\nhttps://github.com/formsy/formsy-react/. @aesopwolf Is this project abandoned? Are we limited by the owner? Is there anything we can do to un-stick the project and start getting updates out?. Done. https://github.com/formsy-react\nReally appreciate all the work you've done and your help making sure this project is able to continue to succeed when you don't have as much time as you would like.. @aesopwolf Added all as owners. Let me know if there's anything else you need from me.. Hey @jcalfee! I think this issue has a strong case to make. My coworker actually thinks should happen. Can you make an issue on the new formsy organization? https://github.com/formsy/formsy-react/. This issue has been moved to the new formsy organization: https://github.com/formsy/formsy-react/issues/7. This issue has been SOLVED in the new formsy organization with Formsy 1.1.0: https://github.com/formsy/formsy-react/. This is an interesting issue. If you're still interested, can you re-create it in the new formsy organization? https://github.com/formsy/formsy-react. Hey @vikasrohit! This project is now managed at formsy/formsy-react.\nCould you re-create your issue there, and include some relevant snippets of your code? As far as I'm aware, this is not a known bug. You should be getting the correct error message with validationErrors. . ",
    "ryangall7": "Hard to say without seeing your code. But how are you building out your form elements? Be sure to read this section of the Formsy documentation  https://github.com/christianalfoni/formsy-react#building-a-form-element-required\n\nOn May 18, 2016, at 8:08 PM, Lance Anderson notifications@github.com wrote:\n@ryangall7 https://github.com/ryangall7 thanks! this is just what I was looking for. I'm having trouble figuring out how to get this validation rule (or any other custom or built-in validation rules) to run onChange. It'd be nice to notify the user of the state of the rule as they are filling out the CC form.\nAny ideas?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub https://github.com/christianalfoni/formsy-react/issues/339#issuecomment-220216918\n. Hard to say without seeing your code. But how are you building out your form elements? Be sure to read this section of the Formsy documentation  https://github.com/christianalfoni/formsy-react#building-a-form-element-required\nOn May 18, 2016, at 8:08 PM, Lance Anderson notifications@github.com wrote:\n@ryangall7 https://github.com/ryangall7 thanks! this is just what I was looking for. I'm having trouble figuring out how to get this validation rule (or any other custom or built-in validation rules) to run onChange. It'd be nice to notify the user of the state of the rule as they are filling out the CC form.\nAny ideas?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub https://github.com/christianalfoni/formsy-react/issues/339#issuecomment-220216918\n. \n",
    "MatthewVita": "Noticing this when the value is a number. As soon as I change that incoming value to a string, everything is fine :x \nNot good.. Noticing this when the value is a number. As soon as I change that incoming value to a string, everything is fine :x \nNot good.. ",
    "ramusus": "+1 for this feature\n. +1 for this feature\n. ",
    "syyed51": "I am facing the same issue. Did you find any work around ?\n. I am facing the same issue. Did you find any work around ?\n. ",
    "sashee": "If you hide instead of remove the unneeded inputs, then it's working fine. It's not ideal, but works.\n. Sure, that works. But using the string notation seems quite error-prone to me if it has some user-provided data. The problem is that even with a properly escaped JSON structure, the validation throws an error.\n. If you hide instead of remove the unneeded inputs, then it's working fine. It's not ideal, but works.\n. Sure, that works. But using the string notation seems quite error-prone to me if it has some user-provided data. The problem is that even with a properly escaped JSON structure, the validation throws an error.\n. ",
    "chienvuhoang": "@christianalfoni can you tell me. :(\n. thanks @cdroulers  i'll try it. :)\n. @christianalfoni can you tell me. :(\n. thanks @cdroulers  i'll try it. :)\n. ",
    "simpixelated": "I'm looking for a similar solution -- at the very least would like to display a count of the validation errors. But if you're not manually passing down validationErrors, is it even possible via the API to get the current validation errors?\n. I was able to get this working by using ref to keep track of all fields in a parent component, then updating a count of which ones returned false for isValid() inside Formsy.Form.onChange. Feels pretty hacky, but it appears to be working.\n. I'm looking for a similar solution -- at the very least would like to display a count of the validation errors. But if you're not manually passing down validationErrors, is it even possible via the API to get the current validation errors?\n. I was able to get this working by using ref to keep track of all fields in a parent component, then updating a count of which ones returned false for isValid() inside Formsy.Form.onChange. Feels pretty hacky, but it appears to be working.\n. ",
    "cgood92": "I would also like to see a way that all the validation errors for the whole form could be collected in one place.  I would think that on the Form's onInvalid(), for instance, you should be provided with an array containing all the errors in the form.  How is that not a part of this package yet??!\nUse case:\nYou have a form, and want a bullet point list of errors at the top of it, indicating all the validation errors in the form below.  \nThat's one of the most common needs in form validations.\n@christianalfoni Is this on the roadmap at all?. Maybe something like:\n```\n  // Validate the form by going through all child input components\n  // and check their state\n  validateForm: function () {\n// We need a callback as we are validating all inputs again. This will\n// run when the last component has set its state\nvar onValidationComplete = function () {\n  var allErrors = this.inputs\n    .filter(component => component.state.validationError.length)\n    .map(component => ({ [component.props.name]: component.state.validationError }))\n  });\n\n  var allIsValid = allErrors.length === 0\n\n  this.setState({\n    isValid: allIsValid\n  });\n\n  if (allIsValid) {\n    this.props.onValid();\n  } else {\n    this.props.onInvalid(allErrors);\n  }\n\n  // Tell the form that it can start to trigger change events\n  this.setState({\n    canChange: true\n  });\n\n}.bind(this);\n\n``. I would also like to see a way that all the validation errors for the whole form could be collected in one place.  I would think that on the Form'sonInvalid()`, for instance, you should be provided with an array containing all the errors in the form.  How is that not a part of this package yet??!\nUse case:\nYou have a form, and want a bullet point list of errors at the top of it, indicating all the validation errors in the form below.  \nThat's one of the most common needs in form validations.\n@christianalfoni Is this on the roadmap at all?. Maybe something like:\n```\n  // Validate the form by going through all child input components\n  // and check their state\n  validateForm: function () {\n// We need a callback as we are validating all inputs again. This will\n// run when the last component has set its state\nvar onValidationComplete = function () {\n  var allErrors = this.inputs\n    .filter(component => component.state.validationError.length)\n    .map(component => ({ [component.props.name]: component.state.validationError }))\n  });\n\n  var allIsValid = allErrors.length === 0\n\n  this.setState({\n    isValid: allIsValid\n  });\n\n  if (allIsValid) {\n    this.props.onValid();\n  } else {\n    this.props.onInvalid(allErrors);\n  }\n\n  // Tell the form that it can start to trigger change events\n  this.setState({\n    canChange: true\n  });\n\n}.bind(this);\n\n```. ",
    "coderabsolute": "Did you manage to figure out the workaround? Not sure, how is the behavior with IE?\n. Did you manage to figure out the workaround? Not sure, how is the behavior with IE?\n. ",
    "jazznov": "@Zephir77167, could you post the code change you made to fix your issue? I'm running into this as well but am unsure where to change the setValue() behavior, as I'm not using it directly but instead using https://github.com/twisty/formsy-react-componentss where believe setValue() via onChange is set by default per input component. Are you using https://github.com/twisty/formsy-react-components for your individual inputs as well?\nThanks!\n. @Zephir77167, could you post the code change you made to fix your issue? I'm running into this as well but am unsure where to change the setValue() behavior, as I'm not using it directly but instead using https://github.com/twisty/formsy-react-componentss where believe setValue() via onChange is set by default per input component. Are you using https://github.com/twisty/formsy-react-components for your individual inputs as well?\nThanks!\n. ",
    "prasanna1211": "I had a form in which I had 500 fields. What I did was to maintain state in the component which renders what is the current value. I used this.props.setValue() to make formsy aware of changes when the state changes by using componentWillUpdate. So by using shouldComponentUpdate I can prevent unnecessary pre rendering of all the forms by using state\ncomponentDidMount() {\n    this.setState({\n      currentValue : this.props.defaultValue\n    });\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return (nextState.currentValue != this.state.currentValue);\n  }\n  componentWillUpdate(nextProps, nextState) {\n    if(nextState.currentValue != this.state.currentValue) {\n       this.props.setValue(e.target.value);\n    }\n  }\n  selectChange(e) {\n    this.setState({\n      currentValue : e.target.value\n    });\n  }\nHere the value passed to  will be state.currentValue. . I agree with that. Resetting the form values is not same as resetting the form elements. Writing the formsyComponents in such a way that resetting the values using this.refs.form.reset() will reset the value of the element thereby forcing the form elements to change would do.. One of the reason this.refs.form.getModel() is being is used for the same purpose. I guess in initial render refs is undefined since the component is yet to load. See whether if is that the case. \nOne practice can be, have a common parent on top of both the forms. Provide callbacks to both the form. Maintain dependant form fields in state and access them appropriately.  . I had a form in which I had 500 fields. What I did was to maintain state in the component which renders what is the current value. I used this.props.setValue() to make formsy aware of changes when the state changes by using componentWillUpdate. So by using shouldComponentUpdate I can prevent unnecessary pre rendering of all the forms by using state\ncomponentDidMount() {\n    this.setState({\n      currentValue : this.props.defaultValue\n    });\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return (nextState.currentValue != this.state.currentValue);\n  }\n  componentWillUpdate(nextProps, nextState) {\n    if(nextState.currentValue != this.state.currentValue) {\n       this.props.setValue(e.target.value);\n    }\n  }\n  selectChange(e) {\n    this.setState({\n      currentValue : e.target.value\n    });\n  }\nHere the value passed to  will be state.currentValue. . I agree with that. Resetting the form values is not same as resetting the form elements. Writing the formsyComponents in such a way that resetting the values using this.refs.form.reset() will reset the value of the element thereby forcing the form elements to change would do.. One of the reason this.refs.form.getModel() is being is used for the same purpose. I guess in initial render refs is undefined since the component is yet to load. See whether if is that the case. \nOne practice can be, have a common parent on top of both the forms. Provide callbacks to both the form. Maintain dependant form fields in state and access them appropriately.  . ",
    "lennardschutter": "I added a custom rule for this for the time being because I did not want to fall back to the HTML5 validation.\nFormsy.addValidationRule('isRequired', (values, value) => {\n  return value && value.toString().trim().length;\n});. @Semigradsky Is this not what the isDefaultRequiredValue() validation is for? Although it is missing some cases (whitespace, null)... I think I ran in to the same issue this week. Might look at creating a pull request. \n\nOn 7 Feb 2017, at 7:02 pm, Awwab Ul Haq notifications@github.com wrote:\n@lennardschutter i had the same issue with null cases being let through\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @aesopwolf it seems to happen on all versions for me. I think it might have to do with a custom validation rule I added for isRequired (I don't want to use the HTML5 implementation for this to keep the form and UX consistent).\n\nFormsy.addValidationRule('isRequired', (values, value) => {\n  return value && value.toString().trim().length;\n});. So if I understand correctly IisFormSubmitted() that on the input component? Not a big issue but it is a little bit annoying on large forms.\nAt the moment I am working around the issue by not setting the model via reset() but on each individual input. As you would understand it would be a lot easier if I could just call reset(model, false) eg. to populate the without running any validation.\nJust to give you a little more context. The form I built is a confirmation form that confirms some final details before handing out some information. In this form some information might already be filled out in another part of the application but others fields might not have.\n. I just created a PR https://github.com/christianalfoni/formsy-react/pull/420  for this. \nMight be a better way to set the initial form data.\nI am actually using formsy-react-components.\n. That is alright. As I said I have got a workaround in my app for now. I will wait until we can implement something like this before I migrate my other forms to Formsy.. We could extend the reset function too, so it can run w/o running the validation.  I thought it would make more sense having a seperate method to set the data since we are not always resetting (e.g. data loaded remotely).. You can create a custom validation rule with a regular expression. \n\nOn 27 Feb 2017, at 8:59 pm, Jacky Lee notifications@github.com wrote:\nIs there a way to include 3 validation checks for the password field?\nminLength serves its purpose, but isNumeric only allows the entire field to only be numerical, and there isn't an uppercase API method.\nUppercase seems overkill, but is there a hacky way to get the validations with at least 1 numerical character?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You can either create a single validation rule with a single error message\nor you could create multiple custom validation rules, e.g. one to check\nwether it contains an uppercase character, one for a number, etc.\n\nOn 28 February 2017 at 14:30, Jacky Lee notifications@github.com wrote:\n\n@lennardschutter https://github.com/lennardschutter Thanks, that would\nwork. I assume there can only be 1 validationError text for 1 custom regex\nrule?\nI.e., the user enters the required minimal characters, but doesn't have a\nnumber - and since this is a regex rule covering multiple validations, I'm\nassuming I'd have to create a generic error message for them.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/425#issuecomment-282931801,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACynnBXtiWwT93HRhuHS79cndSWD4mM2ks5rg5THgaJpZM4MM5yd\n.\n. I added a custom rule for this for the time being because I did not want to fall back to the HTML5 validation.\n\nFormsy.addValidationRule('isRequired', (values, value) => {\n  return value && value.toString().trim().length;\n});. @Semigradsky Is this not what the isDefaultRequiredValue() validation is for? Although it is missing some cases (whitespace, null)... I think I ran in to the same issue this week. Might look at creating a pull request. \n\nOn 7 Feb 2017, at 7:02 pm, Awwab Ul Haq notifications@github.com wrote:\n@lennardschutter i had the same issue with null cases being let through\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @aesopwolf it seems to happen on all versions for me. I think it might have to do with a custom validation rule I added for isRequired (I don't want to use the HTML5 implementation for this to keep the form and UX consistent).\n\nFormsy.addValidationRule('isRequired', (values, value) => {\n  return value && value.toString().trim().length;\n});. So if I understand correctly IisFormSubmitted() that on the input component? Not a big issue but it is a little bit annoying on large forms.\nAt the moment I am working around the issue by not setting the model via reset() but on each individual input. As you would understand it would be a lot easier if I could just call reset(model, false) eg. to populate the without running any validation.\nJust to give you a little more context. The form I built is a confirmation form that confirms some final details before handing out some information. In this form some information might already be filled out in another part of the application but others fields might not have.\n. I just created a PR https://github.com/christianalfoni/formsy-react/pull/420  for this. \nMight be a better way to set the initial form data.\nI am actually using formsy-react-components.\n. That is alright. As I said I have got a workaround in my app for now. I will wait until we can implement something like this before I migrate my other forms to Formsy.. We could extend the reset function too, so it can run w/o running the validation.  I thought it would make more sense having a seperate method to set the data since we are not always resetting (e.g. data loaded remotely).. You can create a custom validation rule with a regular expression. \n\nOn 27 Feb 2017, at 8:59 pm, Jacky Lee notifications@github.com wrote:\nIs there a way to include 3 validation checks for the password field?\nminLength serves its purpose, but isNumeric only allows the entire field to only be numerical, and there isn't an uppercase API method.\nUppercase seems overkill, but is there a hacky way to get the validations with at least 1 numerical character?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You can either create a single validation rule with a single error message\nor you could create multiple custom validation rules, e.g. one to check\nwether it contains an uppercase character, one for a number, etc.\n\nOn 28 February 2017 at 14:30, Jacky Lee notifications@github.com wrote:\n\n@lennardschutter https://github.com/lennardschutter Thanks, that would\nwork. I assume there can only be 1 validationError text for 1 custom regex\nrule?\nI.e., the user enters the required minimal characters, but doesn't have a\nnumber - and since this is a regex rule covering multiple validations, I'm\nassuming I'd have to create a generic error message for them.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/christianalfoni/formsy-react/issues/425#issuecomment-282931801,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACynnBXtiWwT93HRhuHS79cndSWD4mM2ks5rg5THgaJpZM4MM5yd\n.\n. \n",
    "krazi3": "@lennardschutter i had the same issue with null cases being let through. @lennardschutter i had the same issue with null cases being let through. ",
    "jarussi-luizalabs": "same here! anyone found a solution for this?\nAlso .. the link on the first post is incorrect .. the correct one is https://github.com/christianalfoni/formsy-react/blob/master/examples/reset-values/app.js\n. @acomito thank you very much! That did the trick for me! \ud83d\udc4d \n. same here! anyone found a solution for this?\nAlso .. the link on the first post is incorrect .. the correct one is https://github.com/christianalfoni/formsy-react/blob/master/examples/reset-values/app.js\n. @acomito thank you very much! That did the trick for me! \ud83d\udc4d \n. ",
    "berrydanielt": "@acomito thanks! just got this thanks to you. was so close to giving up and writing less pretty code. @acomito thanks! just got this thanks to you. was so close to giving up and writing less pretty code. ",
    "hak11": "i have same issue, and I fix it like this\nsubmitForm(data) {\n  alert(JSON.stringify(data, null, 4));\n  this.areaForm.reset();\n}\n\nresetForm() {\n  this.areaForm.reset();\n}\n\n\nrender () {\n  return (\n      <Formsy.Form\n        ref={(event) => { this.areaForm = event; }}\n        onValid={this.enableButton}\n        onInvalid={this.disableButton}\n        onValidSubmit={this.submitForm}\n        onInvalidSubmit={this.notifyFormError}\n      >\n        .................\n        .................\n       <RaisedButton\n          primary={true}\n          style={{marginTop: 32}}\n          type=\"submit\"\n          label=\"Simpan\"\n          disabled={!this.state.canSubmit}\n          value={this.state.nameForm}\n        />\n        <RaisedButton\n          secondary={true}\n          onClick={this.resetForm}\n          style={{marginTop: 32,marginLeft:32}}\n          type=\"reset\"\n          label=\"Reset\"\n          value={this.state.nameForm}\n        />\n      </Formsy.Form>\n\n. i have same issue, and I fix it like this\nsubmitForm(data) {\n  alert(JSON.stringify(data, null, 4));\n  this.areaForm.reset();\n}\n\nresetForm() {\n  this.areaForm.reset();\n}\n\n\nrender () {\n  return (\n      <Formsy.Form\n        ref={(event) => { this.areaForm = event; }}\n        onValid={this.enableButton}\n        onInvalid={this.disableButton}\n        onValidSubmit={this.submitForm}\n        onInvalidSubmit={this.notifyFormError}\n      >\n        .................\n        .................\n       <RaisedButton\n          primary={true}\n          style={{marginTop: 32}}\n          type=\"submit\"\n          label=\"Simpan\"\n          disabled={!this.state.canSubmit}\n          value={this.state.nameForm}\n        />\n        <RaisedButton\n          secondary={true}\n          onClick={this.resetForm}\n          style={{marginTop: 32,marginLeft:32}}\n          type=\"reset\"\n          label=\"Reset\"\n          value={this.state.nameForm}\n        />\n      </Formsy.Form>\n\n. ",
    "ivanoats": "Any tips on where to start on a P.R. for this?\n. Any tips on where to start on a P.R. for this?\n. ",
    "chmanie": "I was confronted with this error message after upgrading to react 15.\n. I was confronted with this error message after upgrading to react 15.\n. ",
    "mtmr0x": "They solved this for now on this issue. \ud83d\udc4d \n. They solved this for now on this issue. \ud83d\udc4d \n. ",
    "TylerYang": "That's cool. Thx.\n. That's cool. Thx.\n. ",
    "shahrajat": "@Semigradsky Nice suggestion. It also requires extra caution when you have text-area element in the form.\nCan be fixed with:\nif (event.target.type != 'textarea' && event.which === 13 /* Enter */) {\n      event.preventDefault();\n}. @Semigradsky Nice suggestion. It also requires extra caution when you have text-area element in the form.\nCan be fixed with:\nif (event.target.type != 'textarea' && event.which === 13 /* Enter */) {\n      event.preventDefault();\n}. ",
    "graphman65": "I'm facing the exact same issue.\n. I'm facing the exact same issue.\n. ",
    "philwhln": "Same here. This is related to a very recent React update 15.2.0. Discussion on the React-side is here\nhttps://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b\n. Same here. This is related to a very recent React update 15.2.0. Discussion on the React-side is here\nhttps://gist.github.com/jimfb/d99e0678e9da715ccf6454961ef04d1b\n. ",
    "martinhbramwell": "I have no prior experience with formsy and only a little bit of experience with the app that uses it.  The bug is certainly a complete show stopper, but that may simply be due to poor exception handling, I do not know.  \nFacebook has changed the rules about passing properties to React components.  When I saw that, and saw formsy's dependence on passing non-React properties into form components, I did not investigate further. \nThe failure is in the v0.2.1 branch of this repo if you want to see it \"in-the-wild\".  (Installation instructions are at the bottom of the README) \n. Ok.  As far as I'm concerned I am trapped at React 15.1.  If I try to upgrade to 15.2 then formsy seems to kill my app.  Possibly Facebook's changes are killing some other thing that fails to throw a visible exception.\nI don't know, I haven't been able to determine what's really going on.\n. I have no prior experience with formsy and only a little bit of experience with the app that uses it.  The bug is certainly a complete show stopper, but that may simply be due to poor exception handling, I do not know.  \nFacebook has changed the rules about passing properties to React components.  When I saw that, and saw formsy's dependence on passing non-React properties into form components, I did not investigate further. \nThe failure is in the v0.2.1 branch of this repo if you want to see it \"in-the-wild\".  (Installation instructions are at the bottom of the README) \n. Ok.  As far as I'm concerned I am trapped at React 15.1.  If I try to upgrade to 15.2 then formsy seems to kill my app.  Possibly Facebook's changes are killing some other thing that fails to throw a visible exception.\nI don't know, I haven't been able to determine what's really going on.\n. ",
    "albertotorresfoltyn": "Why is that closed if is not fixed yet? (I stilll have the issue by the way, but i've settled for 15.1 for now)\n. Why is that closed if is not fixed yet? (I stilll have the issue by the way, but i've settled for 15.1 for now)\n. ",
    "giovannicode": "Yea I did,\nI simplified the example and created a git repo to replicate the issue.\nhttps://github.com/giovannicode/formsy-import-test\nThe app breaks when I try to import formsy-react, but if I comment it out, the app will work fine\n. Yea I did,\nI simplified the example and created a git repo to replicate the issue.\nhttps://github.com/giovannicode/formsy-import-test\nThe app breaks when I try to import formsy-react, but if I comment it out, the app will work fine\n. ",
    "CrazyDeveloper": "It works like a charm. Npm didn't pulled latest formsy-react-components\n. It works like a charm. Npm didn't pulled latest formsy-react-components\n. ",
    "JLGouwy": "I'm totally stupid ... \nIn reading \"my problem\", I saw I forgot part of code ... Sorry. End of hard day :D \n. I'm totally stupid ... \nIn reading \"my problem\", I saw I forgot part of code ... Sorry. End of hard day :D \n. ",
    "html-krit": "Ok, but it will not be submitted.\n. Ok, but it will not be submitted.\n. ",
    "MilosRasic": "+1 for not submitting disabled elements\nComponents that wrap and extend DOM functionality should follow natural DOM behaviour as much as possible to avoid wtf moments.\n. +1 for not submitting disabled elements\nComponents that wrap and extend DOM functionality should follow natural DOM behaviour as much as possible to avoid wtf moments.\n. ",
    "im-fortech": "Thank you.\n. Thank you.\n. ",
    "valoricDe": "@christianalfoni Works for me.\n. @christianalfoni Works for me.\n. ",
    "plitex": "I'm facing the same problem...\n. I'm facing the same problem...\n. ",
    "MHerszak": "@twisty thanks. Can you please leave a comment here when this issue is resolved?. @twisty thanks. Can you please leave a comment here when this issue is resolved?. ",
    "mathportillo": "I agree that this is a good behaviour, but there is two considerations to me made:\n- onChange prop on React behaves like onInput described by your link, as seen here\n- There is a bad outcome of just triggering validation on React onChange event (js onInput), as better explained below:\nCurrently, the Formsy.Form onValid event is only called when a child input is blurred (focus out). This has a bad behavior of only executing the Formsy.Form onValid event on input blurs. If, for example, a submit button should be activated when the form is valid, this ends up only happening on blur, and not really when the form becomes valid.\nBy reading the issues I realized (correct me if I am wrong), that erstwhile a form validation occurred when onChange events triggered on child input elements. This triggered the Formsy.Form onValid as soon as possible, but had the bad behavior of displaying error messages while user was typing.\nI think that an optimal behavior was to trigger a Formsy.Form onValid event as soon as the form is valid (on input onChange event is triggered). And to trigger error messages only on blurs (as of now). Based on my experience, this is the behavior of old good form solutions (as for example the default Angular 1 form helper).\nIf the optimal behavior I described is already possible to be achieved in formsy-react, please teach me how and pardon my bother.\nIf it is currently not possible to be achieved, please consider if it is a good idea to do so.\nIf agreed that its a good idea, I suggest two solutions (I believe that perhaps these are not so good since I haven't examined the code enough):\n1.  Conservative solution:\n   - A additional onValueValid event prop to be added to the Formsy.Form component, this would keep the current onValid behavior untouched,\n   - A onChange listener at the Mixin that, each time the value is changed, sets a new isValueValid based on the return of the runValidation function. It would also a method in Formsy.Form that would check if all the child mixins isValidValue function returns true, if so, it would trigger onValueValid\n   - Instead ofMixinisValueValidrun the functionrunValidation, it could only return theisValueValidstate of the Mixin itself.\n2. Aggressive solution:\n   - Thevalidatefunction would not set the component_validationErrorstate.\n   - The_validationErrorstate would only be set on input blur.\n   - Thevalidatefuncion would be trigered on input change. This would change when the currentFormsy.FormonValidevent is called.\n. I agree that this is a good behaviour, but there is two considerations to me made:\n-onChangeprop on React behaves like onInput described by your link, as seen [here](https://facebook.github.io/react/docs/forms.html#interactive-props)\n- There is a bad outcome of just triggering validation on ReactonChange` event (js onInput), as better explained below:\nCurrently, the Formsy.Form onValid event is only called when a child input is blurred (focus out). This has a bad behavior of only executing the Formsy.Form onValid event on input blurs. If, for example, a submit button should be activated when the form is valid, this ends up only happening on blur, and not really when the form becomes valid.\nBy reading the issues I realized (correct me if I am wrong), that erstwhile a form validation occurred when onChange events triggered on child input elements. This triggered the Formsy.Form onValid as soon as possible, but had the bad behavior of displaying error messages while user was typing.\nI think that an optimal behavior was to trigger a Formsy.Form onValid event as soon as the form is valid (on input onChange event is triggered). And to trigger error messages only on blurs (as of now). Based on my experience, this is the behavior of old good form solutions (as for example the default Angular 1 form helper).\nIf the optimal behavior I described is already possible to be achieved in formsy-react, please teach me how and pardon my bother.\nIf it is currently not possible to be achieved, please consider if it is a good idea to do so.\nIf agreed that its a good idea, I suggest two solutions (I believe that perhaps these are not so good since I haven't examined the code enough):\n1.  Conservative solution:\n   - A additional onValueValid event prop to be added to the Formsy.Form component, this would keep the current onValid behavior untouched,\n   - A onChange listener at the Mixin that, each time the value is changed, sets a new isValueValid based on the return of the runValidation function. It would also a method in Formsy.Form that would check if all the child mixins isValidValue function returns true, if so, it would trigger onValueValid\n   - Instead ofMixinisValueValidrun the functionrunValidation, it could only return theisValueValidstate of the Mixin itself.\n2. Aggressive solution:\n   - Thevalidatefunction would not set the component_validationErrorstate.\n   - The_validationErrorstate would only be set on input blur.\n   - Thevalidatefuncion would be trigered on input change. This would change when the currentFormsy.FormonValid` event is called.\n. ",
    "navasiloy": "there is a workaround \nyou can \ncomponentDidMount() {\n        this.refs.labeledInput.focus()\n        this.refs.labeledInput.blur()\n    }\nit fill fire validation rules. there is a workaround \nyou can \ncomponentDidMount() {\n        this.refs.labeledInput.focus()\n        this.refs.labeledInput.blur()\n    }\nit fill fire validation rules. ",
    "01binary": "I couldn't find a way to change my own code to fix this issue, however changing Formsy code makes this very simple. Perhaps this is the way to go? I can do a PR. Yellow box is the scope of my proposed change to Formsy; the source line with orange underline is a new line being added, with the line directly below modified (total 1 line added, 1 line changed).\n\nWhat this accomplishes:\nAllows me to wrap Formsy HOC into my own Validator class that does custom validation. This change makes it possible for Formsy mixin code to discover a 'validate' function if I specify it on wrapped Formsy HOC myself in the render() of my Validator class that takes in Formsy HOC.\nNote that I also changed wrapping order. In my first post above, I did Formsy.HOC(CustomValidator(InputComponent)). In this post, I changed my wrap to CustomValidator(Formsy.HOC(InputComponent)). This has the effect of allowing me to access Formsy mixin functions like getValue() using \"this\" from my custom component; also, if I put one or more props on the Formsy component being wrapped, they appear in its props. For example, I can put \"validate = this.validate\" in the props. When mixin executes validateComponent, the component being validated will not have validate() when using HOC because for some reason that doesn't get exported, but it will have props.validate(). If it's able to use either one, I can now do custom validation when using HOC.\n. I gave up on using HOC, never did get this to work. When I changed the direction of wrapping I could no longer access Formsy methods like setValue.\n. I couldn't find a way to change my own code to fix this issue, however changing Formsy code makes this very simple. Perhaps this is the way to go? I can do a PR. Yellow box is the scope of my proposed change to Formsy; the source line with orange underline is a new line being added, with the line directly below modified (total 1 line added, 1 line changed).\n\nWhat this accomplishes:\nAllows me to wrap Formsy HOC into my own Validator class that does custom validation. This change makes it possible for Formsy mixin code to discover a 'validate' function if I specify it on wrapped Formsy HOC myself in the render() of my Validator class that takes in Formsy HOC.\nNote that I also changed wrapping order. In my first post above, I did Formsy.HOC(CustomValidator(InputComponent)). In this post, I changed my wrap to CustomValidator(Formsy.HOC(InputComponent)). This has the effect of allowing me to access Formsy mixin functions like getValue() using \"this\" from my custom component; also, if I put one or more props on the Formsy component being wrapped, they appear in its props. For example, I can put \"validate = this.validate\" in the props. When mixin executes validateComponent, the component being validated will not have validate() when using HOC because for some reason that doesn't get exported, but it will have props.validate(). If it's able to use either one, I can now do custom validation when using HOC.\n. I gave up on using HOC, never did get this to work. When I changed the direction of wrapping I could no longer access Formsy methods like setValue.\n. ",
    "cristianocca": "I'm with the same issue using HOC, defining a validate method on the class doesn't work and never gets called. The only work around so far is to try and validate before calling this.props.setValue but that can cause very odd results like not allowing to write partially incomplete values into the input.\nWould another option be to wrap the original component with HOC, but use a wrapper version of that that actually defines the validation properties?. So is there a way to manually set the value of an input of a FormsyText component and have the actual form input get updated?\nI have tried setValue through a very ugly way ( something like this.refs.form.inputs[this.refs.form.prevInputNames.indexOf(\"name\")].setValue(\"TEST\")) and the value is updated when getting it back, for the form UI is never updated, there are no visual changes.\nHow can this be achieved easier?. Hi, did you find any answer to this? I'm struggling with the same.\nFor example, the API returns an error key 'all' which isn't mapped to any field, and some other field errors, but the updateInputsWithError will fail because of the all key that is not an actual field.\nI tried building a custom input that will simply be a placeholder for the all key, but adding an error there would cause the form to be in a permanent invalid status since the input is invalid and there's no easy way to make it valid while at the same time contain an error.. Does that mean you can't use updateInputsWithError directly from the server response so you don't need to map each field to form field manually one by one? I was doing things this way so errors would be really easy to manage as long as name and error keys match (which happens by design)\nI came with probably a very ugly work around, but I ended up extending the Formsy.Form class, and added a different updateInputsWithError method which is basically a copy paste of the original, but rather than raising an exception on invalid keys, they are all sent to the last input error field. So all the non field errors always end up at the bottom. Not a great solution but allows me to leave the code as it is for error - field mapping.\n. I'm with the same issue using HOC, defining a validate method on the class doesn't work and never gets called. The only work around so far is to try and validate before calling this.props.setValue but that can cause very odd results like not allowing to write partially incomplete values into the input.\nWould another option be to wrap the original component with HOC, but use a wrapper version of that that actually defines the validation properties?. So is there a way to manually set the value of an input of a FormsyText component and have the actual form input get updated?\nI have tried setValue through a very ugly way ( something like this.refs.form.inputs[this.refs.form.prevInputNames.indexOf(\"name\")].setValue(\"TEST\")) and the value is updated when getting it back, for the form UI is never updated, there are no visual changes.\nHow can this be achieved easier?. Hi, did you find any answer to this? I'm struggling with the same.\nFor example, the API returns an error key 'all' which isn't mapped to any field, and some other field errors, but the updateInputsWithError will fail because of the all key that is not an actual field.\nI tried building a custom input that will simply be a placeholder for the all key, but adding an error there would cause the form to be in a permanent invalid status since the input is invalid and there's no easy way to make it valid while at the same time contain an error.. Does that mean you can't use updateInputsWithError directly from the server response so you don't need to map each field to form field manually one by one? I was doing things this way so errors would be really easy to manage as long as name and error keys match (which happens by design)\nI came with probably a very ugly work around, but I ended up extending the Formsy.Form class, and added a different updateInputsWithError method which is basically a copy paste of the original, but rather than raising an exception on invalid keys, they are all sent to the last input error field. So all the non field errors always end up at the bottom. Not a great solution but allows me to leave the code as it is for error - field mapping.\n. ",
    "mattfordham": "I too am having this issue. It seems setting _value within state should have some effect, but it doesn't when using HOC. \n. I too am having this issue. It seems setting _value within state should have some effect, but it doesn't when using HOC. \n. ",
    "chipit24": "this inside Mixin.js refers to a different scope than this when called within the HOC wrapped component - this is the problem ;)\nFor now, I've decided to use the mixin.\n. this inside Mixin.js refers to a different scope than this when called within the HOC wrapped component - this is the problem ;)\nFor now, I've decided to use the mixin.\n. ",
    "Extra-lightwill": "+1. has anyone made any progress with this?. @aesopwolf Really cool, this works. Thanks!. +1. has anyone made any progress with this?. @aesopwolf Really cool, this works. Thanks!. ",
    "Aeilko": "You could add an onClick method to your component which submits the form as is discussed in #45 .\nBasically you add create a reference to the Formsy.Form component on which you are allowed to call submit(). So you could submit the form from code, and so from an onClick method.\n. You could add an onClick method to your component which submits the form as is discussed in #45 .\nBasically you add create a reference to the Formsy.Form component on which you are allowed to call submit(). So you could submit the form from code, and so from an onClick method.\n. ",
    "hschoenburg": "I'm having the same issue. Can't get the form to reset\n. Cannot for the life of me get the from to reset its inputs.\nTrying:\nthis.refs.form.reset();\nTried passing value={this.state.something} and then calling this.setState({value: ''}) on submit. That didn't work either. \n. I'm having the same issue. Can't get the form to reset\n. Cannot for the life of me get the from to reset its inputs.\nTrying:\nthis.refs.form.reset();\nTried passing value={this.state.something} and then calling this.setState({value: ''}) on submit. That didn't work either. \n. ",
    "jdhollander": "Me too, using formsy-material-ui. And I'm stuck when it comes to debugging it too.. Me too, using formsy-material-ui. And I'm stuck when it comes to debugging it too.. ",
    "sutiwo": "Me too.\nI'm not having the issue with react v0.14.x but having it used with react 15.x. Me too.\nI'm not having the issue with react v0.14.x but having it used with react 15.x. ",
    "brianfegan": "In my experience it resets the formsy val, but not the values of the form elements.. Where would the getValue() go in the form element component? Currently, I'm just using setValue inside onChange event handlers.\nTo actually reset the HOC form element value, I pass a callback into HOC form element from the formsy form component that gets called when the HOC form element mounts. That formsy form callback has an  arg that's a ref to a custom HOC form element reset method callback to setValue within the form element component.\nIt works but its not the cleanest implementation for sure.. Yeah, I'm using that for individual text inputs. But the issue I described deals with multi checkbox values, where the value of the multi checkbox group is stored in component state as an array. So whether a checkbox is checked or not depends on whether the value of the checkbox is in the state array.\nIf you reset the form to say a checkbox name group is either name=1,2,3 or just empty, there's no way to do it with formsy that I've found without the callback refs approach I outlined above.. ...though I suppose based on what you said, the custom reset method in the HOC could call getValue to repopulate the state in the HOC component (currently I pass the new value in as an arg and don't use getValue).. I'm using a very slightly modified version of https://github.com/christianalfoni/formsy-react/blob/master/examples/components/MultiCheckboxSet.js. Just added some markup for styling. As you can see, there's no getValue in that example.. Is there any movement on this? I'm seeing this as a blocker to being able to reset a multi checkbox group of checkbox inputs to their initial state. While this.refs.form.reset() will reset the overall form value to that initial state, the HOC wrapped checkboxes still remain checked.. In my experience it resets the formsy val, but not the values of the form elements.. Where would the getValue() go in the form element component? Currently, I'm just using setValue inside onChange event handlers.\nTo actually reset the HOC form element value, I pass a callback into HOC form element from the formsy form component that gets called when the HOC form element mounts. That formsy form callback has an  arg that's a ref to a custom HOC form element reset method callback to setValue within the form element component.\nIt works but its not the cleanest implementation for sure.. Yeah, I'm using that for individual text inputs. But the issue I described deals with multi checkbox values, where the value of the multi checkbox group is stored in component state as an array. So whether a checkbox is checked or not depends on whether the value of the checkbox is in the state array.\nIf you reset the form to say a checkbox name group is either name=1,2,3 or just empty, there's no way to do it with formsy that I've found without the callback refs approach I outlined above.. ...though I suppose based on what you said, the custom reset method in the HOC could call getValue to repopulate the state in the HOC component (currently I pass the new value in as an arg and don't use getValue).. I'm using a very slightly modified version of https://github.com/christianalfoni/formsy-react/blob/master/examples/components/MultiCheckboxSet.js. Just added some markup for styling. As you can see, there's no getValue in that example.. Is there any movement on this? I'm seeing this as a blocker to being able to reset a multi checkbox group of checkbox inputs to their initial state. While this.refs.form.reset() will reset the overall form value to that initial state, the HOC wrapped checkboxes still remain checked.. ",
    "micabe": "Ive made this work like this:\ncomponentDidMount() {\n    this.inputEmail.changeValue = onChangeCustom.bind(this.inputEmail)\n    this.inputPassword.changeValue = onChangeCustom.bind(this.inputPassword)\n  }\nand\nconst onChangeCustom = function (event) {\n  this.setValue(event.currentTarget.value.trim())\n}\nref={c => { this.inputEmail = c }}\n. Can we listen to reset event ?. Ive made this work like this:\ncomponentDidMount() {\n    this.inputEmail.changeValue = onChangeCustom.bind(this.inputEmail)\n    this.inputPassword.changeValue = onChangeCustom.bind(this.inputPassword)\n  }\nand\nconst onChangeCustom = function (event) {\n  this.setValue(event.currentTarget.value.trim())\n}\nref={c => { this.inputEmail = c }}\n. Can we listen to reset event ?. ",
    "you-fail-me": "@aesopwolf no, it doesn't. @aesopwolf any explanation on why is it so important except you should always use getValue found in docs? What if I don't use the value from the input? I'm just setting state based on input's value and working with state after that?. @aesopwolf no, it doesn't. @aesopwolf any explanation on why is it so important except you should always use getValue found in docs? What if I don't use the value from the input? I'm just setting state based on input's value and working with state after that?. ",
    "Shion093": "Having same issue on Chrome for iOS\n. Having same issue on Chrome for iOS\n. ",
    "whitelizard": "Seems to work now on 0.18.1.... Seems to work now on 0.18.1.... ",
    "amireldor": "It sounds as if it would work but I can't test that in a timely manner and get back here to report the results. If I do manage to get a project using formsy I will definitely try and let you know.. Good to know it worked, thanks.. It sounds as if it would work but I can't test that in a timely manner and get back here to report the results. If I do manage to get a project using formsy I will definitely try and let you know.. Good to know it worked, thanks.. ",
    "coleturner": "Async validation is a critical use case for me and I'm sure it would open up the potential for formsy-react to be used for a wider variety of validations. One example is checking for username uniqueness on a registration form. \nThe impression I get from formsy-react is that the best UX is having validations prior to submit, and indicating whether a form is valid by enabling the submit button. The only option as it stands is to validate on submit which is alarming because it negates that principle and the only other option is to roll your own.\nIs there an ETA on when some form of asynchronous validation will be released?\nThanks!. Async validation is a critical use case for me and I'm sure it would open up the potential for formsy-react to be used for a wider variety of validations. One example is checking for username uniqueness on a registration form. \nThe impression I get from formsy-react is that the best UX is having validations prior to submit, and indicating whether a form is valid by enabling the submit button. The only option as it stands is to validate on submit which is alarming because it negates that principle and the only other option is to roll your own.\nIs there an ETA on when some form of asynchronous validation will be released?\nThanks!. ",
    "StarkTS": "i have formsy-react@0.18.1 and still geting this error \ud83d\ude22 \n@aesopwolf . \nYea, the last versi\u00f3n of it\n\nEl 6 ene. 2017, a las 21:19, Aesop Wolf notifications@github.com escribi\u00f3:\n@Casy Are you using formsy-material-ui?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. i have formsy-react@0.18.1 and still geting this error \ud83d\ude22 \n@aesopwolf . \nYea, the last versi\u00f3n of it\nEl 6 ene. 2017, a las 21:19, Aesop Wolf notifications@github.com escribi\u00f3:\n@Casy Are you using formsy-material-ui?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "mazli84": "@aesopwolf Honestly, I might do something wrong here. formsy-material-ui -> formsy-react dependency is 0.19.0 and above and I still have the same issue.. @aesopwolf Honestly, I might do something wrong here. formsy-material-ui -> formsy-react dependency is 0.19.0 and above and I still have the same issue.. ",
    "shalkam": "Hi @aesopwolf ,\nSo, I will explain the problem I was facing .....\nI have a form that it using nested fields like this \njavascript \nrender() {\n    return <Formsy.Form ref='form' onValidSubmit={this.submit.bind(this)} onValid={this.enableButton.bind(this)} onInvalid={this.disableButton.bind(this)}>\n        <Input name=\"_id\" value={null} type='hidden'/>\n        <Input name=\"identifier[0][value]\" label=\"National ID\" required/>\n        <Checkbox name=\"active\" label=\"active?\" value={false}/>\n        <Input name=\"name[0][text]\" label=\"Patient's Name\" required/>\n        <fieldset>\n          <legend>Telecom</legend>\n          <Select\n            name=\"telecom[0][system]\"\n            label=\"System\"\n            help=\"This is a required select element.\"\n            options={[\n              {value: '', label: 'Select...'},\n              {value: 'Phone', label: 'phone'},\n              {value: 'Fax', label: 'fax'},\n              {value: 'Email', label: 'email'},\n              {value: 'Pager', label: 'pager'},\n              {value: 'URL', label: 'URL'}\n            ]}\n            required\n            />\n          <Select\n            name=\"telecom[0][use]\"\n            label=\"Use\"\n            help=\"This is a required select element.\"\n            options={[\n              {value: '', label: 'Select...'},\n              {value: 'Home', label: 'Home'},\n              {value: 'Work', label: 'Work'},\n              {value: 'Temp', label: 'Temp'},\n              {value: 'Old', label: 'Old'},\n              {value: 'Mobile', label: 'Mobile'}\n            ]}\n            required\n            />\n          <Input name=\"telecom[0][value]\" label=\"Value\" required/>\n        </fieldset>\n        <Select\n          name=\"gender\"\n          label=\"Gender\"\n          options={[\n            {value: '', label: 'Select...'},\n            {value: 'Male', label: 'Male'},\n            {value: 'Female', label: 'Female'},\n            {value: 'Other', label: 'Other'},\n            {value: 'Unknown', label: 'Unknown'}\n          ]}\n          required\n          />\n        <Input name='birthDate' label='Birth Date' type=\"date\"/>\n        <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n      </Formsy.Form>\n  }\n}\nAnd on the edit page I need to load the existing data for the patient using the form.reset() method.\nand simply it was not working.\njavascript\ncomponentWillReceiveProps(newProps){\n    this.refs.form.reset(newProps.model);\n  }\nSo the model is a nested object with arrays and stuff. like this for instance\njavascript\n{\nname: [\n{text: 'John Doe'}\n]\n}\nSo I've taken a look at the existing code in the resetModel method, I thought that converting the object to this format will solve the issue:\njavascript\n{\n'name[0][text]': 'John Doe'\n}\nSo, I started to try to figure out how to do this and luckily the code for that has already been there in the form-data-to-object package :smiley: \n\nAlso, it looks like one of the tests is failing.\n\nI don't know why I just added a single line fixing the problem\n. @aesopwolf  Well, I disagree. for my use case I am implementing a rather complex data structure you can check it out HL7 Patient Resource and the data has to be this way.\nAnd since it's by default formsy supports submitting complex forms ( discussed Here ), it should work the other way around too.\nAnyway, I had my problem solved and this can remain as a reference for people facing the same problem.. Hi @aesopwolf ,\nSo, I will explain the problem I was facing .....\nI have a form that it using nested fields like this \njavascript \nrender() {\n    return <Formsy.Form ref='form' onValidSubmit={this.submit.bind(this)} onValid={this.enableButton.bind(this)} onInvalid={this.disableButton.bind(this)}>\n        <Input name=\"_id\" value={null} type='hidden'/>\n        <Input name=\"identifier[0][value]\" label=\"National ID\" required/>\n        <Checkbox name=\"active\" label=\"active?\" value={false}/>\n        <Input name=\"name[0][text]\" label=\"Patient's Name\" required/>\n        <fieldset>\n          <legend>Telecom</legend>\n          <Select\n            name=\"telecom[0][system]\"\n            label=\"System\"\n            help=\"This is a required select element.\"\n            options={[\n              {value: '', label: 'Select...'},\n              {value: 'Phone', label: 'phone'},\n              {value: 'Fax', label: 'fax'},\n              {value: 'Email', label: 'email'},\n              {value: 'Pager', label: 'pager'},\n              {value: 'URL', label: 'URL'}\n            ]}\n            required\n            />\n          <Select\n            name=\"telecom[0][use]\"\n            label=\"Use\"\n            help=\"This is a required select element.\"\n            options={[\n              {value: '', label: 'Select...'},\n              {value: 'Home', label: 'Home'},\n              {value: 'Work', label: 'Work'},\n              {value: 'Temp', label: 'Temp'},\n              {value: 'Old', label: 'Old'},\n              {value: 'Mobile', label: 'Mobile'}\n            ]}\n            required\n            />\n          <Input name=\"telecom[0][value]\" label=\"Value\" required/>\n        </fieldset>\n        <Select\n          name=\"gender\"\n          label=\"Gender\"\n          options={[\n            {value: '', label: 'Select...'},\n            {value: 'Male', label: 'Male'},\n            {value: 'Female', label: 'Female'},\n            {value: 'Other', label: 'Other'},\n            {value: 'Unknown', label: 'Unknown'}\n          ]}\n          required\n          />\n        <Input name='birthDate' label='Birth Date' type=\"date\"/>\n        <button type=\"submit\" disabled={!this.state.canSubmit}>Submit</button>\n      </Formsy.Form>\n  }\n}\nAnd on the edit page I need to load the existing data for the patient using the form.reset() method.\nand simply it was not working.\njavascript\ncomponentWillReceiveProps(newProps){\n    this.refs.form.reset(newProps.model);\n  }\nSo the model is a nested object with arrays and stuff. like this for instance\njavascript\n{\nname: [\n{text: 'John Doe'}\n]\n}\nSo I've taken a look at the existing code in the resetModel method, I thought that converting the object to this format will solve the issue:\njavascript\n{\n'name[0][text]': 'John Doe'\n}\nSo, I started to try to figure out how to do this and luckily the code for that has already been there in the form-data-to-object package :smiley: \n\nAlso, it looks like one of the tests is failing.\n\nI don't know why I just added a single line fixing the problem\n. @aesopwolf  Well, I disagree. for my use case I am implementing a rather complex data structure you can check it out HL7 Patient Resource and the data has to be this way.\nAnd since it's by default formsy supports submitting complex forms ( discussed Here ), it should work the other way around too.\nAnyway, I had my problem solved and this can remain as a reference for people facing the same problem.. ",
    "MikaelCarpenter": "ah yea we have a custom mixin, but we set isDirty using\nonFormsyChange: (currentValues, isChanged) ->\n    if currentValues and isChanged and not @state.isDirty\n      @setState isDirty: true, ->\n        @props.onChange()\nwhich is what is passed to the forms onChange prop\nso basically a change is being triggered on the form after submitting and I'm not sure why. The only thing that we do for a submit is call an Action and in the success callback we do\n@setState { isSaving: false, isDirty: false, submitted: false }. ah yea we have a custom mixin, but we set isDirty using\nonFormsyChange: (currentValues, isChanged) ->\n    if currentValues and isChanged and not @state.isDirty\n      @setState isDirty: true, ->\n        @props.onChange()\nwhich is what is passed to the forms onChange prop\nso basically a change is being triggered on the form after submitting and I'm not sure why. The only thing that we do for a submit is call an Action and in the success callback we do\n@setState { isSaving: false, isDirty: false, submitted: false }. ",
    "jackywhlee": "@lennardschutter Thanks, that would work. I assume there can only be 1 validationError text for 1 custom regex rule?\nI.e., the user enters the required minimal characters, but doesn't have a number - and since this is a regex rule covering multiple validations, I'm assuming I'd have to create a generic error message for them. . Interesting, thanks! Consider this closed!. @lennardschutter Thanks, that would work. I assume there can only be 1 validationError text for 1 custom regex rule?\nI.e., the user enters the required minimal characters, but doesn't have a number - and since this is a regex rule covering multiple validations, I'm assuming I'd have to create a generic error message for them. . Interesting, thanks! Consider this closed!. ",
    "sfdsffwf": "I found the form can onChange to handle the error. I found the form can onChange to handle the error. ",
    "StanislavMayorov": "Default select option is empty string.\n<option value=\"\"></option>.  Default select option is empty string.\n<option value=\"\"></option>. ",
    "jganz": "On many of my pages I'm including multiple forms on a component and have an 'Apply' button on the parent component for submitting changes.  The user can make additional changes to the form inputs and click apply multiple times.  I am calling my updateModel method after my the changes have been applied.  There is also a 'Cancel' button on my page to allow the user to revert changes since the last apply, which I handle by calling resetForm.\nI was having issues before in cases where a user would apply changes, then set the field back to the original values and try to click apply, because I have logic trying to determine if the form has changed from its pristine state, because the _pristineValue and the new current value were the same.  \nWe also try to keep track of any unsaved changes on the page and bring up a dialog if the user tries to navigate away before hitting 'Apply'.  The same logic for determining if the form is Changed compares the currentValues against the _pristineValue.  So, if a user edits a form, then edits it back to its pristine value, I want them to be able to navigate away without getting the dialog.  \nAdditionally, there were issues where if the user made changes, then clicked apply any number of times, and then wanted to cancel changes, I didn't want to have to keep a state of the most recent applied settings to resetForm to.. On many of my pages I'm including multiple forms on a component and have an 'Apply' button on the parent component for submitting changes.  The user can make additional changes to the form inputs and click apply multiple times.  I am calling my updateModel method after my the changes have been applied.  There is also a 'Cancel' button on my page to allow the user to revert changes since the last apply, which I handle by calling resetForm.\nI was having issues before in cases where a user would apply changes, then set the field back to the original values and try to click apply, because I have logic trying to determine if the form has changed from its pristine state, because the _pristineValue and the new current value were the same.  \nWe also try to keep track of any unsaved changes on the page and bring up a dialog if the user tries to navigate away before hitting 'Apply'.  The same logic for determining if the form is Changed compares the currentValues against the _pristineValue.  So, if a user edits a form, then edits it back to its pristine value, I want them to be able to navigate away without getting the dialog.  \nAdditionally, there were issues where if the user made changes, then clicked apply any number of times, and then wanted to cancel changes, I didn't want to have to keep a state of the most recent applied settings to resetForm to.. ",
    "mpelham": "We definitely have similar use cases that this PR solves.. We definitely have similar use cases that this PR solves.. ",
    "vitjouda": "Hi, \nI have a very similar problem. I have a custom required validation (because I have some issues with the Formsy one). But like you, this validation fires before the user touches the input or submits the form.\nI believe it is caused when you have inputs in a controlled mode. Whenever you provide some value to the input, even on initial render, it runs all the validations on it. \nAlso, I have noticed, that when I provide some server validations to updateInputsWithError method in componentWillReceiveProps (because I use redux), the input is once again validated on render and my custom errors are overwritten.. Hi, \nI have a very similar problem. I have a custom required validation (because I have some issues with the Formsy one). But like you, this validation fires before the user touches the input or submits the form.\nI believe it is caused when you have inputs in a controlled mode. Whenever you provide some value to the input, even on initial render, it runs all the validations on it. \nAlso, I have noticed, that when I provide some server validations to updateInputsWithError method in componentWillReceiveProps (because I use redux), the input is once again validated on render and my custom errors are overwritten.. ",
    "peterholcomb": "I was having the same issue, but I got around it by adding an onInvalidSubmit() method that updated the state of the component to add a 'invalidSubmit = true'.  I would then put a class on the form that depended on the invalidSubmit state called 'invalid'.  I then used css to show/hide the errors only when the form had the 'invalid' class.\nThis allowed me to only show the errors after the form had been submitted.  Hope that helps.. I was having the same issue, but I got around it by adding an onInvalidSubmit() method that updated the state of the component to add a 'invalidSubmit = true'.  I would then put a class on the form that depended on the invalidSubmit state called 'invalid'.  I then used css to show/hide the errors only when the form had the 'invalid' class.\nThis allowed me to only show the errors after the form had been submitted.  Hope that helps.. ",
    "brandondurham": "I came here to open a PR for this, but there are 21 pull requests currently open. I\u2019m beginning to think it\u2019s going to be a while.. Anything we can do about it?. I\u2019d be more than happy to point to a forked version, even if it was temporary.. Currently I just keep validation rules in an object and apply conditionally:\n```\nif (validateCreditCart) {\n    Object.assign(ccProps, {\n        cardExpiration: {\n            required: true,\n            validations: true\n        },\n        cardNumber: {\n            required: true,\n            validationErrors: { isCreditCardNumber: 'Invalid card number' },\n            validations: 'isCreditCardNumber'\n        },\n        cardCvv: {\n            required: true,\n            validationErrors: { isCreditCardCvv: 'Invalid cvv' },\n            validations: 'isCreditCardCvv'\n        }\n    });\n}\n\u2026\n\n```\nIs there a better way that you recommend?. I came here to open a PR for this, but there are 21 pull requests currently open. I\u2019m beginning to think it\u2019s going to be a while.. Anything we can do about it?. I\u2019d be more than happy to point to a forked version, even if it was temporary.. Currently I just keep validation rules in an object and apply conditionally:\n```\nif (validateCreditCart) {\n    Object.assign(ccProps, {\n        cardExpiration: {\n            required: true,\n            validations: true\n        },\n        cardNumber: {\n            required: true,\n            validationErrors: { isCreditCardNumber: 'Invalid card number' },\n            validations: 'isCreditCardNumber'\n        },\n        cardCvv: {\n            required: true,\n            validationErrors: { isCreditCardCvv: 'Invalid cvv' },\n            validations: 'isCreditCardCvv'\n        }\n    });\n}\n\u2026\n\n```\nIs there a better way that you recommend?. ",
    "sibelius": "this is a better approach https://github.com/jaredpalmer/formik for forms. this is a better approach https://github.com/jaredpalmer/formik for forms. ",
    "leemachin": "If that's the plan it should be no problem for me to kill 2 birds with one stone and do that here :) the question is what to do with the mixin related code though: should that be removed along with createClass, so only the higher order component remains?\nI'm happy to change this PR to do that (which fixes the warnings anyway).. Ok, here's the beginning of it, all but 10 or 11 tests are passing. Once they're fixed then we can see if anything in there should be cleaned up. :). It's been taking a teensy bit longer than I planned, sorry :(. @track0x1 there are just the last ~10 failing tests, some of which may be due to the testing utilities (that all relied on mixin behaviour previously), and others because I started moving the handlers into props.\ne.g. the two main failures are this:\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\nThat's likely to be a render method in one of the test components. The stack trace reveals nothing, though, so it's difficult to pinpoint.\nTypeError: Cannot read property 'setFormPristine' of undefined\n    at submit (/home/travis/build/christianalfoni/formsy-react/lib/main.js:237:7)\nThat one's pretty easy to debug. :). Okay, apart from the documentation and examples (simple find and replace changes I guess) the last question is how to deal with all of the handlers that were once mixed in. Since they're all props now they have to be extracted before the main elements are rendered, otherwise React will complain.\nThe Mixin and HOC have to be renamed too, because they don't make sense as they are (and it's kind of confusing). The mixin looks more like the base component (the Formsy.Form component) because everything appears to rely on it. Some opinions on tidying that up would be welcome.\nThose are the final two problems.\n. @samuv that would help, I think. It feels more and more like a rewrite as I try to make changes; it's too much to do all at once.. If that's the plan it should be no problem for me to kill 2 birds with one stone and do that here :) the question is what to do with the mixin related code though: should that be removed along with createClass, so only the higher order component remains?\nI'm happy to change this PR to do that (which fixes the warnings anyway).. Ok, here's the beginning of it, all but 10 or 11 tests are passing. Once they're fixed then we can see if anything in there should be cleaned up. :). It's been taking a teensy bit longer than I planned, sorry :(. @track0x1 there are just the last ~10 failing tests, some of which may be due to the testing utilities (that all relied on mixin behaviour previously), and others because I started moving the handlers into props.\ne.g. the two main failures are this:\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\nThat's likely to be a render method in one of the test components. The stack trace reveals nothing, though, so it's difficult to pinpoint.\nTypeError: Cannot read property 'setFormPristine' of undefined\n    at submit (/home/travis/build/christianalfoni/formsy-react/lib/main.js:237:7)\nThat one's pretty easy to debug. :). Okay, apart from the documentation and examples (simple find and replace changes I guess) the last question is how to deal with all of the handlers that were once mixed in. Since they're all props now they have to be extracted before the main elements are rendered, otherwise React will complain.\nThe Mixin and HOC have to be renamed too, because they don't make sense as they are (and it's kind of confusing). The mixin looks more like the base component (the Formsy.Form component) because everything appears to rely on it. Some opinions on tidying that up would be welcome.\nThose are the final two problems.\n. @samuv that would help, I think. It feels more and more like a rewrite as I try to make changes; it's too much to do all at once.. ",
    "samuv": "@leemachin @aesopwolf \nDo you guys need some help? I would love to help you out to release this version.\nMaybe we can create a dedicated branch and not do all in one pull request.\nWhat do you think?\n. @leemachin Yep, it feels like a rewrite to me, if we move everything on the specific branch we can focus on each problem with dedicated pull request and isolate all the things that we need.\nHow can we move forward with this approach?\n. Thank you @st-andrew, the only thing I don't understand if there is an active maintainer in this thread that can help us to create a doable workflow for this release. \nIt would nice to have the possibility to create a project here in this repo for understanding the effort and creating some tasks for what we need.\nIn the case, that something has breaking changes on the API we need to document the changes and help in the transition from one version to the latest.\nFYI @christianalfoni @aesopwolf\n. @leemachin @aesopwolf \nDo you guys need some help? I would love to help you out to release this version.\nMaybe we can create a dedicated branch and not do all in one pull request.\nWhat do you think?\n. @leemachin Yep, it feels like a rewrite to me, if we move everything on the specific branch we can focus on each problem with dedicated pull request and isolate all the things that we need.\nHow can we move forward with this approach?\n. Thank you @st-andrew, the only thing I don't understand if there is an active maintainer in this thread that can help us to create a doable workflow for this release. \nIt would nice to have the possibility to create a project here in this repo for understanding the effort and creating some tasks for what we need.\nIn the case, that something has breaking changes on the API we need to document the changes and help in the transition from one version to the latest.\nFYI @christianalfoni @aesopwolf\n. ",
    "maccuaa": "@leemachin @samuv - I've created a PR to @leemachin's branch that fixes the remaining tests.. Yea because of the size of these changes, a beta release would be good to catch any breaking behavior.\nI hope there's still a maintainer kicking around to review these changes, otherwise might have to fork and republish under a different name to carry on (but i'd rather contribute to this repo).. @bigblind - I'm almost done my fork.  Hoping to have it published this week.. I've published a new fork to npm called formsy-react-2.  Make sure you read the README, there are definitely areas for improvement and I will gladly accept PRs.\nI've also published a new package based on formsy-material-ui called formsy-mui that makes use of formsy-react-2 if you're looking for examples.   \nEventually I'll update the documentation and add examples, for now I just wanted to get these released.. I'd be fine with forking this repo to it's own organization.  This way I could drop formsy-react-2.  I can also lend a hand if needed.. I agree, I would rather contribute to this project than have to maintain a fork.. @leemachin @samuv - I've created a PR to @leemachin's branch that fixes the remaining tests.. Yea because of the size of these changes, a beta release would be good to catch any breaking behavior.\nI hope there's still a maintainer kicking around to review these changes, otherwise might have to fork and republish under a different name to carry on (but i'd rather contribute to this repo).. @bigblind - I'm almost done my fork.  Hoping to have it published this week.. I've published a new fork to npm called formsy-react-2.  Make sure you read the README, there are definitely areas for improvement and I will gladly accept PRs.\nI've also published a new package based on formsy-material-ui called formsy-mui that makes use of formsy-react-2 if you're looking for examples.   \nEventually I'll update the documentation and add examples, for now I just wanted to get these released.. I'd be fine with forking this repo to it's own organization.  This way I could drop formsy-react-2.  I can also lend a hand if needed.. I agree, I would rather contribute to this project than have to maintain a fork.. ",
    "bigblind": "@brandondurham Have you had a chance to fork this? I'm reviewing other form libraries, but I haven't found any that are as easy to use as Formsy.. @brandondurham Have you had a chance to fork this? I'm reviewing other form libraries, but I haven't found any that are as easy to use as Formsy.. ",
    "unematiii": "I'm looking a solution to the same problem myself. @breeswish Did you notice the innerRef prop in the source (the link you posted)? That seems to do the trick:\n```\nconst CheckBox = Formsy.HOC(MyCustomComponentWithItsOwnState)\nclass SomeFormGroup extends Component { \n    constructor(props) {\n        super(props)\n    this.inputs = {}\n}\n\nrender() {\n    return <CheckBox innerRef={(input) => { this.inputs['someCheckbox'] = input }} />\n}\n\n}\n```\nNot sure if this is the correct way to do it.... I'm looking a solution to the same problem myself. @breeswish Did you notice the innerRef prop in the source (the link you posted)? That seems to do the trick:\n```\nconst CheckBox = Formsy.HOC(MyCustomComponentWithItsOwnState)\nclass SomeFormGroup extends Component { \n    constructor(props) {\n        super(props)\n    this.inputs = {}\n}\n\nrender() {\n    return <CheckBox innerRef={(input) => { this.inputs['someCheckbox'] = input }} />\n}\n\n}\n```\nNot sure if this is the correct way to do it.... ",
    "mijamo": "You might want to take a look at #439 that also fixed those issues but might lead to a more elaborate rewriting apparently.. You might want to take a look at #439 that also fixed those issues but might lead to a more elaborate rewriting apparently.. ",
    "ottis": "Ah I see (I didn't try and tackle the createClass issue as it looked like a rewrite as you mentioned), maybe i'll jump onto that branch and see if there's anything I can help with \ud83d\ude04  cheers!. @drewlustro I'm in agreement, would be good to get rid of these annoying warnings for now, not sure when that massive rewrite is going to be merged \u2639\ufe0f . Ah I see (I didn't try and tackle the createClass issue as it looked like a rewrite as you mentioned), maybe i'll jump onto that branch and see if there's anything I can help with \ud83d\ude04  cheers!. @drewlustro I'm in agreement, would be good to get rid of these annoying warnings for now, not sure when that massive rewrite is going to be merged \u2639\ufe0f . ",
    "drewlustro": "\ud83c\udfc6 \nI really wish this would be merged in and accepted into master before the massive rewrite at #439 gets vetted. There is very little reason tolerate these warnings given the fix is so simple.. \ud83c\udfc6 \nI really wish this would be merged in and accepted into master before the massive rewrite at #439 gets vetted. There is very little reason tolerate these warnings given the fix is so simple.. ",
    "satyavh": "I confirm this bug.\nWhen using isExisty validation and setting required=false the input is still required. I confirm this bug.\nWhen using isExisty validation and setting required=false the input is still required. ",
    "RodrigoLeiteF": "data isn't a JSON object.. There's no someDep in the snippet you posted. The error is somewhere else.. data isn't a JSON object.. There's no someDep in the snippet you posted. The error is somewhere else.. ",
    "tonybennett": "FYI: https://github.com/christianalfoni/formsy-react/releases/tag/0.19.5. FYI: https://github.com/christianalfoni/formsy-react/releases/tag/0.19.5. ",
    "ekrokowski": "@tonybennett Thank you, didn't see that it is fixed now. Nice!. @tonybennett Thank you, didn't see that it is fixed now. Nice!. ",
    "attiqeurrehman": "I was able to do it by getting the name of prop in render function and then adding it with the component. \nvar componentName = this.props.name;\n<Formsy.Input\n                            name={componentName + '.country'}\n                            value=\"\"\n                            type=\"text\"\n                            placeholder=\"Country/Region\" />\n. I was able to do it by getting the name of prop in render function and then adding it with the component. \nvar componentName = this.props.name;\n<Formsy.Input\n                            name={componentName + '.country'}\n                            value=\"\"\n                            type=\"text\"\n                            placeholder=\"Country/Region\" />\n. ",
    "nickmccurdy": "create-react-class has been extracted from React and isn't recommended for most projects. Use ES6 classes, if you can't then you have to install create-create-class yourself.. create-react-class has been extracted from React and isn't recommended for most projects. Use ES6 classes, if you can't then you have to install create-create-class yourself.. ",
    "veob": "@nickmccurdy, formsy uses create-react-class in the dist, but doesn't have it in dependencies. Basically the package is broken. Or am I doing something wrong?. @nickmccurdy, formsy uses create-react-class in the dist, but doesn't have it in dependencies. Basically the package is broken. Or am I doing something wrong?. ",
    "Piroru": "Same here, we aren't using create-react-class in our app, but cos of such formsy behaviour we have to :(. Same here, we aren't using create-react-class in our app, but cos of such formsy behaviour we have to :(. ",
    "de-ocampo": "Any updates on this? A bit frustrating to have this dependency in there.. Any updates on this? A bit frustrating to have this dependency in there.. ",
    "RavenHursT": "Wow.. almost a month on this?  Maybe formsy-react isn't the way to go... :-(. Wow.. almost a month on this?  Maybe formsy-react isn't the way to go... :-(. ",
    "lei-clearsky": "This is great!!. This is great!!. ",
    "tijs": "i'm currently investigating some of the form handling options for react and this seems like a pretty solid choice if it weren't for the commit situation. it looked to me like the mixin issues were mostly settled in the beta branch but from this i gather that that branch is not about to be merged into master anytime soon... if you guys fork this will you fork form the beta branch or more likely forms-react-2 (or something else). guess that's hard to say right now, just looking for hints :). i'm currently investigating some of the form handling options for react and this seems like a pretty solid choice if it weren't for the commit situation. it looked to me like the mixin issues were mostly settled in the beta branch but from this i gather that that branch is not about to be merged into master anytime soon... if you guys fork this will you fork form the beta branch or more likely forms-react-2 (or something else). guess that's hard to say right now, just looking for hints :). ",
    "AlexHenkel": "Is there any date for a preview release of this version? Really looking forward to integrate to our projects!. Is there any date for a preview release of this version? Really looking forward to integrate to our projects!. ",
    "HashemKhalifa": "any plans for releasing date?. any plans for releasing date?. ",
    "jcalfee": "Never-mind, I see value and onChange working as one might expect.. Shouldn't validations=\"equalsField:password\" pass when the password and confirmation are empty and not required?  See bip0039. . Looks pretty serious... I can't reliable get the password field value when I submit via Enter... yes and yes.. Sorry I though it was just wrapping.  I'm retesting.. thank you. Never-mind, I see value and onChange working as one might expect.. Shouldn't validations=\"equalsField:password\" pass when the password and confirmation are empty and not required?  See bip0039. . Looks pretty serious... I can't reliable get the password field value when I submit via Enter... yes and yes.. Sorry I though it was just wrapping.  I'm retesting.. thank you. ",
    "Kaishiyoku": "The blog post is saying that there aren't many breaking changes when coming from 15.6 (https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html#upgrading). Thanks for the link to the fork! Will look forward to it. It's sad that there hasn't happened much recently.. The blog post is saying that there aren't many breaking changes when coming from 15.6 (https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html#upgrading). Thanks for the link to the fork! Will look forward to it. It's sad that there hasn't happened much recently.. ",
    "kernel72": "There is another repo presents on Github - fork of this one. https://github.com/maccuaa/formsy-react-2. It looks like ready for React 16. AFAIK it was made because of low activity of this one repo. \nI have tried it in my projects, and looks like ok.. There is another repo presents on Github - fork of this one. https://github.com/maccuaa/formsy-react-2. It looks like ready for React 16. AFAIK it was made because of low activity of this one repo. \nI have tried it in my projects, and looks like ok.. ",
    "aliogaili": "The other repo doesn't seem to work with formsy-react-components  I hope this repo get updated.\n@twisty what's your take on this?. Thanks @twisty, I also think that's the right path. Looking forward for more releases from formsy-reactand formsy-react-components :) . I'm running into the following error when I update to React 16:\n\nAny idea on what might be causing this?\n. Ok I went to the node_modules/formsy-react/node_modules and deleted the react folder and the error went away! when I do npm install again, the folder gets recreated (with react react@15.6.2) and the error comes back. I'm using NPM 5.4.2.\nDoes anyone know what might be causing this behavior? This might be trivial question, but how are you guys installing the beta version? are using the beta tag from npm?\nWhen I do npm install formsy-react@beta npm downloads the package.json file below which has   \"react\": \"^15.0.0\" as dependency, then npm will install react15 under the formsy-react node_modules folder which will get loaded at the client and result in the equeueCallback exception..am I missing something here? \n{\n  \"_from\": \"formsy-react@beta\",\n  \"_id\": \"formsy-react@1.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-anFitmAKhZ9XK7lfkzxy1ugl+Tyn7mR3tkFsI8KkLCKRUL2nY8hpUWvTgczTaqzvqROc95+bCRuWoJ79ZyJqtA==\",\n  \"_location\": \"/formsy-react\",\n  \"_phantomChildren\": {\n    \"create-react-class\": \"15.6.2\",\n    \"fbjs\": \"0.8.16\",\n    \"loose-envify\": \"1.3.1\",\n    \"object-assign\": \"4.1.1\",\n    \"prop-types\": \"15.6.0\"\n  },\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"formsy-react@beta\",\n    \"name\": \"formsy-react\",\n    \"escapedName\": \"formsy-react\",\n    \"rawSpec\": \"beta\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"beta\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/formsy-react/-/formsy-react-1.0.0.tgz\",\n  \"_shasum\": \"305d4f1da8144badbe9847b1a9b509dc00a77881\",\n  \"_spec\": \"formsy-react@beta\",\n  \"_where\": \"/Users/Alawi/Development/Meronex/Applications/Products/residentsClub/app\",\n  \"author\": {\n    \"name\": \"Christian Alfoni\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/christianalfoni/formsy-react/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"form-data-to-object\": \"^0.2.0\",\n    \"hoist-non-react-statics\": \"^2.2.1\",\n    \"react\": \"^15.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"A form input builder and validator for React JS\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.6.5\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-2\": \"^6.5.0\",\n    \"create-react-class\": \"^15.6.0\",\n    \"jsdom\": \"^6.5.1\",\n    \"nodeunit\": \"^0.9.1\",\n    \"prop-types\": \"^15.5.10\",\n    \"react\": \"^15.0.0\",\n    \"react-addons-pure-render-mixin\": \"^15.0.0\",\n    \"react-addons-test-utils\": \"^15.0.0\",\n    \"react-dom\": \"^15.0.0\",\n    \"sinon\": \"^1.17.3\",\n    \"webpack\": \"^1.12.14\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"homepage\": \"https://github.com/christianalfoni/formsy-react#readme\",\n  \"keywords\": [\n    \"react\",\n    \"form\",\n    \"forms\",\n    \"validation\",\n    \"react-component\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"lib/index.js\",\n  \"name\": \"formsy-react\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/christianalfoni/formsy-react.git\"\n  },\n  \"scripts\": {\n    \"build\": \"NODE_ENV=production webpack -p --config webpack.production.config.js\",\n    \"examples\": \"webpack-dev-server --config examples/webpack.config.js --content-base examples\",\n    \"prepublish\": \"babel ./src/ -d ./lib/\",\n    \"test\": \"babel-node testrunner\"\n  },\n  \"version\": \"1.0.0\"\n}\n. If you download the tar referenced by the resolved url then you'll get a package.json that has react 15 referenced as a dependency (and not peer dependency). \nMoving react from dependency to peer dependency was done by the last commit here and it has not been published to npm  yet, which explains why I keep getting the older package.json with the react 15 as dependency. \nSo how are you folks using the last commit? . Thank you so much @twisty ! that's what I'm looking for, it was a bit confusing for me, but now it's clear. . @twisty I've following the steps you gave and I keep getting uncaughtException: Cannot find module 'formsy-react\nFormsy-react is in the package.json and in the node_modules folders but the app doesn't start and I receive this exception :( . I just downloaded the version currently published on the NPM registry, patched it to remove the react dependency and installed it locally, it's working, for now.\nBut I really hope we can hear soon from the maintainer(s) of formsy-react and we get a newer version on NPM. This is a very useful and well designed library and really not much effort needs to get it up and running. I'm sure more people will run through this issue as they start updating to React 16, so the sooner this get resolved the better. Hopefully, the batsignal does it job :) . @Semigradsky I see you made contributions to formsy-react, and as it stand it's currently blocking the adoption of React 16 because the last comment has not been published to NPM.\n@twisty there are two forks of this library due to the inactivity here:\n\nformsy-react-2 which has been created by the @maccuaa who is also maintaining formsy-mui\nformsy-react-es6 forked by @track0x1 who is also maintaining formsy-react-native \n\nI think both of those forks exist due to the lack of activity here at the moment. I'm blocked from publishing my project because I'm using formsy-react-components which is depending on this version of formsy-react and it's conflicting with React 16. Thus can you please consider aligning with one of the two libraries (or even maintaining your own fork if you wish) until we can get some traction here so we can at least move forward with React 16? \nThanks!. The other repo doesn't seem to work with formsy-react-components  I hope this repo get updated.\n@twisty what's your take on this?. Thanks @twisty, I also think that's the right path. Looking forward for more releases from formsy-reactand formsy-react-components :) . I'm running into the following error when I update to React 16:\n\nAny idea on what might be causing this?\n. Ok I went to the node_modules/formsy-react/node_modules and deleted the react folder and the error went away! when I do npm install again, the folder gets recreated (with react react@15.6.2) and the error comes back. I'm using NPM 5.4.2.\nDoes anyone know what might be causing this behavior? This might be trivial question, but how are you guys installing the beta version? are using the beta tag from npm?\nWhen I do npm install formsy-react@beta npm downloads the package.json file below which has   \"react\": \"^15.0.0\" as dependency, then npm will install react15 under the formsy-react node_modules folder which will get loaded at the client and result in the equeueCallback exception..am I missing something here? \n{\n  \"_from\": \"formsy-react@beta\",\n  \"_id\": \"formsy-react@1.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-anFitmAKhZ9XK7lfkzxy1ugl+Tyn7mR3tkFsI8KkLCKRUL2nY8hpUWvTgczTaqzvqROc95+bCRuWoJ79ZyJqtA==\",\n  \"_location\": \"/formsy-react\",\n  \"_phantomChildren\": {\n    \"create-react-class\": \"15.6.2\",\n    \"fbjs\": \"0.8.16\",\n    \"loose-envify\": \"1.3.1\",\n    \"object-assign\": \"4.1.1\",\n    \"prop-types\": \"15.6.0\"\n  },\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"formsy-react@beta\",\n    \"name\": \"formsy-react\",\n    \"escapedName\": \"formsy-react\",\n    \"rawSpec\": \"beta\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"beta\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/formsy-react/-/formsy-react-1.0.0.tgz\",\n  \"_shasum\": \"305d4f1da8144badbe9847b1a9b509dc00a77881\",\n  \"_spec\": \"formsy-react@beta\",\n  \"_where\": \"/Users/Alawi/Development/Meronex/Applications/Products/residentsClub/app\",\n  \"author\": {\n    \"name\": \"Christian Alfoni\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/christianalfoni/formsy-react/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"form-data-to-object\": \"^0.2.0\",\n    \"hoist-non-react-statics\": \"^2.2.1\",\n    \"react\": \"^15.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"A form input builder and validator for React JS\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.6.5\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-2\": \"^6.5.0\",\n    \"create-react-class\": \"^15.6.0\",\n    \"jsdom\": \"^6.5.1\",\n    \"nodeunit\": \"^0.9.1\",\n    \"prop-types\": \"^15.5.10\",\n    \"react\": \"^15.0.0\",\n    \"react-addons-pure-render-mixin\": \"^15.0.0\",\n    \"react-addons-test-utils\": \"^15.0.0\",\n    \"react-dom\": \"^15.0.0\",\n    \"sinon\": \"^1.17.3\",\n    \"webpack\": \"^1.12.14\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"homepage\": \"https://github.com/christianalfoni/formsy-react#readme\",\n  \"keywords\": [\n    \"react\",\n    \"form\",\n    \"forms\",\n    \"validation\",\n    \"react-component\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"lib/index.js\",\n  \"name\": \"formsy-react\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/christianalfoni/formsy-react.git\"\n  },\n  \"scripts\": {\n    \"build\": \"NODE_ENV=production webpack -p --config webpack.production.config.js\",\n    \"examples\": \"webpack-dev-server --config examples/webpack.config.js --content-base examples\",\n    \"prepublish\": \"babel ./src/ -d ./lib/\",\n    \"test\": \"babel-node testrunner\"\n  },\n  \"version\": \"1.0.0\"\n}\n. If you download the tar referenced by the resolved url then you'll get a package.json that has react 15 referenced as a dependency (and not peer dependency). \nMoving react from dependency to peer dependency was done by the last commit here and it has not been published to npm  yet, which explains why I keep getting the older package.json with the react 15 as dependency. \nSo how are you folks using the last commit? . Thank you so much @twisty ! that's what I'm looking for, it was a bit confusing for me, but now it's clear. . @twisty I've following the steps you gave and I keep getting uncaughtException: Cannot find module 'formsy-react\nFormsy-react is in the package.json and in the node_modules folders but the app doesn't start and I receive this exception :( . I just downloaded the version currently published on the NPM registry, patched it to remove the react dependency and installed it locally, it's working, for now.\nBut I really hope we can hear soon from the maintainer(s) of formsy-react and we get a newer version on NPM. This is a very useful and well designed library and really not much effort needs to get it up and running. I'm sure more people will run through this issue as they start updating to React 16, so the sooner this get resolved the better. Hopefully, the batsignal does it job :) . @Semigradsky I see you made contributions to formsy-react, and as it stand it's currently blocking the adoption of React 16 because the last comment has not been published to NPM.\n@twisty there are two forks of this library due to the inactivity here:\n\nformsy-react-2 which has been created by the @maccuaa who is also maintaining formsy-mui\nformsy-react-es6 forked by @track0x1 who is also maintaining formsy-react-native \n\nI think both of those forks exist due to the lack of activity here at the moment. I'm blocked from publishing my project because I'm using formsy-react-components which is depending on this version of formsy-react and it's conflicting with React 16. Thus can you please consider aligning with one of the two libraries (or even maintaining your own fork if you wish) until we can get some traction here so we can at least move forward with React 16? \nThanks!. "
}