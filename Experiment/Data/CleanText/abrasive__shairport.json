{
    "albertz": "Applied.\nI wonder though why you haven't merged that into your master.\n. For you, too? See my comment on the commit. This is not the right fix. It is pure random that this change makes the noise go away. We should try to figure out why this happens. Unfortunately, I cannot reproduce the problem here.\n. Btw., why have you made this a manual commit and not just merged Martin Spasovs commit? That way, we have several unrelated branches now.\n. Cools, thanks! :)\n. $HOSTTYPE is unset on my machine.\n. I would prefer to not clutter the doc with information which is only for very specific cases for people who should know anyway what they are doing. People only need cross compiling for PPC if they really want to redistribute it. And as said, I think PPC (i.e. big endian) is probably broken anyway. But I didn't tested it. I'm not sure if anyone did.\n. I merged it in. Though, I removed the shell-wrap hack again in this commit because it caused warnings here and it should work anyway if you just use perl -w shairport.pl and probably many people don't want it this way. And after all, shairport.pl should print useful warnings anyway, also when not started with -w.\n. ```az@Albert-Zeyer-MacBook-Pro 1161 (shairport) %./shairport.pl \nv-string in use/require non-portable at ./shairport.pl line 40.\nCan't exec \"avahi-publish-service\": No such file or directory at ./shairport.pl line 153.\nRegistering Service 0051F2CD5C4F@ShairPort 10817 on Albert-Zeyer-MacBook-Pro.local._raop._tcp port 5000 TXT tp=UDP sm=false sv=false ek=1 et=0,1 cn=0,1 ch=2 ss=16 sr=44100 pw=false vn=3 txtvers=1\nlistening...\n11:53:40.838  Got a reply for service 0051F2CD5C4F@ShairPort 10817 on Albert-Zeyer-MacBook-Pro.local._raop._tcp.local.: Name now registered and active\n^Ckilled\n``````\nAlso, this didn't worked at all:\n```az@Albert-Zeyer-MacBook-Pro 1157 (shairport) %perl -w shairport.pl \n/bin/sh: -w: invalid option\nUsage:  /bin/sh [GNU long option] [option] ...\n...\n``````\nAlso, I saw you added a check for Perl 5.10.0. Isn't that what use 5.10.0; does already?\n. I just checked it. http://perldoc.perl.org/functions/use.html\nIt doesn't work prior to 5.6.0. That was released in March 2000. So more than 10 years ago. We shouldn't take any care about that. Nobody should use such old stuff anyway and he might have other problems than to use ShairPort.\nuse 5.10.0; is just much more clean and clear than the hack. So I guess we should leave it like this.\n. First of all, thanks!\nSeveral things about your commit:\n- Avoid the #!/bin/sh hack.\n- Avoid the reformating.\n- You made a lot of changes. I don't really see the reason for most of them. Can you split all changes up into several commits and comment on each one? And make separate pull requests if possible.\n. Can you rebase it to clean it up and avoid those reformating commits?\n. I mean git rebase. Probably the easiest thing would be to do git rebase -i and then get rid of the commits which shouldn't be there (i.e. all that do some reformating or so) and you can also merge commits together there, etc. And then, to push that, you need to do a git push --force because you have altered the history.\nYou have to specify the range for git rebase. I.e., start with the top of my master up to your head.\n. Thanks, that was in good shape now. :)\n. Isn't the pipe support trivial in the sense that it only forwards the cmd-parameter to hairtunes? I haven't really looked at it...\nI think the IPv6 support is quite important though. There were many discussions about it and I'm not sure if it may break things if IPv6 is not supported. Somebody should check this. Or just implement it.\nBtw., you have put the private key into a separate file and commented it out from the source. Why?\n. Can you clean up that pull request? I.e. git rebase.\n. It seems your formatting is wrong. Can you fix that?\n. Can you rebase that? I.e. git rebase -i and squash/fixup them.\n. Go into the directory, then type git rebase -i <last-revision>, then do a fixup (it is all explained there how to do that), then type git push --force and then update this pull request.\n. Why should that commit change anything?\nYou replaced char tServerName[56] = \"ShairPort\"; by char tServerName[56]; strcpy(tServerName, \"Shairport\");.\nAlso, why have you changed \"ShairPort\" to \"Shairport\"?\n. Yea you are right.\n. Why? Maybe people want to use different compilers.\n. The system should define the default compiler. Our makefile should not overwrite this.\n. Yea, that was mostly what I meant, i.e. the debug message removal. But it isn't really that important. I merged it in. Thanks for the work!\nI cannot really test it though but I guess other people will report if there are issues.\n. Thanks. :)\n. I'm not sure if this is really needed. libao is really lightweight. There shouldn't be any reason to not just use libao. If there are, libao should be fixed then.\n. What mixer data? What commit is that?\nBtw., the commits also need some cleanup.\n. (For reference: Here is @mikejuni 's fork.)\nAbout the mixer: Is it just the volume? That is a trivial calculation which can easily be done by hairtunes itself.\nIf so, I still don't really see the benefits. I only see that the code gets much more complicated.\n. I see. I just gave @mikejuni full access to this repo. He can merge his changes in once he feels that they are stable.\n. I'm a bit busy right now. I gave you full access to the repo. Feel free to merge it in yourself. :)\n. I'm a bit busy right now. I just gave you full access to this repo. Feel free to merge it in yourself.\n. ",
    "okertanov": "Thanks. i've left it clean for the futher upstream & 0.04 merge.\n...\ni've rebased it into my \"master\".\n. yes, reproduced with ubuntu 10.04 & iTunes 10xx. i'll try to debug the issue.\nok, reject this pool request and merge via Martin's one to be synchronized well. \n. ",
    "Crazor": "Same problem here. -O2 gives stuttering on debian, while -O0 works.\n. ",
    "pepijndevos": "Do they still exist? Will this work on PPC as well then? Is it relevant to this pull? :)\nIf it even works on Windows, I'm sure Macports can compile all the perquisites on PPC and 32 bit as well. At least someone must be running Leopard...\n. Oh that is what you are referring to. Well, I suppose you should just set it to whatever arch you have.\nOn second thought, running arch returns i386 even on my machine, so I guess that's why. Can anyone confirm echo $HOSTTYPE returns the right thing everywhere?\nMaybe this should be in the makefile rather than in an extra command.\n. ",
    "mspasov": "I don't have access to PPC based Mac.. Let's keep the docs pointing to\n , and if there's a problem, someone will report it.\nps, It took me some time to figure this out, before this was available in INSTALL file.\n. Can't be in our Makefile :). This is only needed for the perl modules compilation.\n. $HOSTTYPE is set by bash, and we cannot expect all users to use bash on macos. Not a reliable source:\n\nAvatars-MBP:~ avatar$ set |grep HOSTTYPE\nHOSTTYPE=x86_64\nAvatars-MBP:~ avatar$ sh\nsh-3.2$ set |grep HOSTTYPE\nHOSTTYPE=x86_64\nsh-3.2$ csh\n[Avatars-MBP:~] avatar% set |grep HOSTTYPE\n[Avatars-MBP:~] avatar% sh\nsh-3.2$ set |grep HOSTTYPE\nHOSTTYPE=intel-mac\n\nI think we should stat that only for Xcode4 user should set $ARCHFLAGS to -arch i386 -arch x86_64 (because Xcode4 lost support for ppc and ppc64) and for Xcode3 the default will work (cross compile for all architectures).\n. ",
    "mflint": "Darn - missing a commit. Will re-submit\n. Darn again - not missing a commit. Re-opening...\n. ",
    "abrasive": "Just consistency - the rest of the code uses 4-space indents, and hard tabs get rendered all different sizes. Thanks :)\n. Added this and some other ports that people have 'mailed me.\n. Interestingly - since shairport originated as a vehicle for publishing & proving the key extracted from an AirPort - that key is verbatim from the hardware (IIRC, it was base64 encoded and everything).\nThanks for the AES cleanup :)\n. Oops! That wasn't very portable, I did this on BSD. Sorry!\n. Thanks for all the cleanups!\nI don't see how using a mutex (for eg. the volume control) has any bearing on marking things volatile.\nCertainly I'm a little over-eager with volatile (courtesy of a lot of pain with embedded compilers), but I wasn't aware of any mutex semantics that cause the compiler to reconsider its variable values!\nAlso, there's no point to using a mutex with the volume control at all - it doesn't matter whether it changes mid-block or not.\n. Interesting. Thank you.\n. I hate dbus/avahi. Thank you!\n. There is a major rewrite of Shairport in the works which includes modular audio - for details, see issue #188. The existing codebase will be no longer supported. Please consider porting your patch.\n. It's perfectly legitimate to have more than 1 hairtunes instance running, for example if more than one host is outputting to the same shairport instance.\nIf turning on airplane mode doesn't cleanly close the connection, then hairtunes itself needs to implement the timeout.\n. Thanks for the patch!\n. There is a major rewrite of shairport in the works (see issue #188), which will shortly replace the current codebase. Would you like to retarget your patch?\n. Functionality implemented in 1.0-dev.\n. Patched manually. Thank you!\n. Thanks!\n. char is signed on x86 and amd64, I never realised it wasn't on arm with gcc! Thank you for the patch!\n. Thanks.\n. I get the feeling you're hoping for this to become the mainline soon ;-)\nPatched it manually, thank you for the fix!\n. That's the correct fix and it's the way I should have done it originally. Using its int value makes you endian sensitive where you needn't be.\n. merged. thank you!\n. Lovely. Thank you!\n. Did you get this one working?\n. You need to be careful here - signals are essential to the RTSP multiple connection handling functionality. Also if your external script takes too long at startup, the connection might run into trouble.\nfork() would be a better choice from an isolation point of view, but then you start getting SIGCHLD instead - which is currently used to detect death of the mDNS advertising subprocess.\nAny idea if SIGCHLD is delivered to the parent thread of the subprocess, or to any old thread that has SIGCHLD unblocked?\n. You could block SIGCHLD globally (in the main() before threads are spawned) and then add a thread in the mDNS handler that does nothing but waitpid()... but there'd need to be a wait somewhere else to mop up all the dead subprocesses too.\n. I'd like to have this functionality in the 1.0 release. We need to figure out how to do this right.\n. Implemented. Thanks for the patch!\n. Thanks for the patch. The shairport master (0.x) branch is no longer maintained pending release of 1.0 -- check out the 1.0-dev branch for details.\n. Fixed. Thanks.\n. Not everyone has libao, nor alsa. That's why the effort was made to include pluggable backends.\nIf you really want to force the issue, then please manually write the config.* files, or submit a patch to the configure script that takes a --force-alsa flag.\n. It does use the --libs option - see line 13 - as long as there is a package named 'openssl' installed and visible to pkg-config. Is this not the case on Ubuntu?\nPS. Your replies are full of quoted text, maybe try deleting it before sending?\n. Thanks for the patch! This looks great too.\nSome small things:\n- consider wrapping the longer lines\n- I've just fixed argument handling in audio_ao's init(), please do the same\n- perhaps an option for setting the PA source name from a) the AP name or b) an option?\n. Great! Thank you.\n. Thanks for the patch! This code looks very good, and I think splitting out the daemonising code is an excellent idea.\nJust a couple of issues to clean up:\n- getopt_long is a GNU extension. Everything previously is strictly POSIX (or at least I've tried to make it so). Can this cleanly be made optional, do you think?\n- Please use the same brace style as elsewhere.\n. Your Pulseaudio patch highlights that init()ing audio before forking is a bit silly.\nMight this be a good point to move the fork much earlier? We could use a pipe to notify the spawning process whether the init steps succeeded or not, at which point it can exit.\n. I agree that long options are desirable. It needs to not be in the log redirection patch, though :) I'll include the Postgres getopt_long implementation now.\n. The fork() has also been moved up. Sorry for breaking your patch.\n. Merged. Thanks, Paul!\n. Thanks for the patch! This looks great.\nJust a few issues:\n- Put your name (and/or @Skaman's) in the copyright notice, not mine! You wrote it, after all.\n- Argument handling is broken as it was in audio_ao, please apply the same fix for now, including check for unknown args.\n- Make the mixer variables static.\n. Thanks, this is fantastic! Merged.\n. Merged. Thanks again!\n. Merged. Thanks!\n. I think the first is the best approach.\nStatic build still needs to be an option for lower-end embedded devices.\nThe helptext for each driver might need to move to audio.c, so that it doesn't bomb when displaying usage. That'd make it easier to format consistently too.\nMy main concern is complexity. How are you intending to build libraries in a portable way? From memory, it takes a fair bit of GNU-specific incantation to get ld to spit one out on Linux.\n. Because the global usage function rolls through all the drivers' helps now, so if one driver doesn't load, its help won't be available. Could just display a message to that effect, I suppose.\n. Compilers other than gcc will barf. Also, the rpath needs to be set according to the install dir, which isn't even vaguely portable. I'm not liking the added complexity for such a limited benefit.\n. OS X is actually the most common hairy case and should be easy enough to detect. Cygwin has some quirks too if I remember correctly. On reflection, as long as it fails gracefully, it really doesn't have to work everywhere. If you're using Cygwin you're already screwed.\nOf course, libtool is an option, but... sledgehammer.\n. This isn't a leak, as it's freed when the program terminates - cleaner than chasing it down several paths. It's <=64 bytes, anyway. This would only matter for someone who turns Shairport into a library again, in which case there are probably a number of places that deinitialisation would want cleaning up - not to mention all the uses of signals now, which would be a little disruptive. I suggest to either convert it to a static char[64] or ignore it.\n. Well found. Thanks, Paul!\nInterestingly, #217 was filed before I even committed the thread reaping code. I'm guessing it started as a threzad exhaustion issue before changing to the failure you identified.\n. Thanks for the patch!\n. Hi Paul! Sorry for the delay in getting to this one. This is a great piece of work, and I'm sure a lot of people will be very grateful for the tinysvcmdns inclusion.\nIt doesn't compile for me - for one, dns_sd.h is present in some versions of Avahi. Perhaps a test that uses the compiler? Or perhaps a detected avahi install should disable mDNSResponder checking entirely -- as far as I know there's no system that would genuinely have both.\n. The link step fails - none of the Bonjour symbols are available. They don't need some linker flags on OS X? I think it would be appropriate to test for bonjour only if avahi is not found.\nautotools is definitely not OK, and I'd be pretty leery of cmake too.\nPaul Lietar notifications@github.com wrote:\n\nThanks for the feedback.\nWhat compile error do you get ? On my linux box (a raspbian) I don't\nhave the dns_sd.h file.\nAny way It's (I believe) a compatibilty layer to use software designed\nfor bonjour on avahi. Build should be ok.\nI'll have to improve to test in the Makefile.\nI think the in house configure script is starting to show it's limits.\nWhould you be against using some other tool, such as autotools ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/abrasive/shairport/pull/243#issuecomment-23678185\n. Finally merged! Thanks again for the contribution, this is really useful.\n. Merged. Thanks!\n. Merged. Thanks, Paul!\n. Thanks for the patch! I'd love to have the Gentoo needful in the tree. There are a few little things that need to be addressed before I can merge this.\n- Changes to the Makefile will not be accepted. Please make an ebuild, that'd be perfect.\n- What is the copyright notice doing in init.d.sh?\n- You almost certainly want a -- before $BACKEND_OPTS on init.d.sh line 37\n- the long options like error and output should be set with double dashes --output= etc.\n- if someone hasn't explicitly specified a logfile, then don't log; if logging is wise by default then enable it in the cfg file (ref init.d.sh line 32-33).\n- a comment in the cfg file on how to ask shairport for the available backends & their options would enlighten new users.\n. Sorry this got dropped. I'll consider an ebuild & associated files if someone can pop up an up-to-date verson.\n. Merged. Thanks!\n. The initscript assumes that it was installed with PREFIX=/usr. This should probably be documented but is not a bug.\n. Cleaning up pre-1.0 issues.\n. Fixed, thank you!\n. Merged, thanks!\n. Wow, I really dropped this one... sorry! I think I just broke the installation, having changed the default path to the binary in all the initscripts to /usr/local/shairport. I'd be happy to revert it if it's specifically for an Arch build, although now that Debian/Ubuntu are transitioning to systemd the file is going to end up shared.\nI don't have an Arch system to test on anymore, unfortunately. Is this still good to merge, other than the path change? My apologies again for the drop.\n. I was actually wondering about the \"RTP/AVP/UDP;unicast;interleaved=0-1;mode=record\".\n\nI forgot to credit you in the commit, sorry; have fixed it up. I also went with using the same local port for all three, for now; if it turns out to be a performance issue then we can split them later.\n. Oh, I'm an idiot. Ugh. Will fix my \"fix\", as what I committed will tag extra ports on the end.\n. I haven't yet had a chance to look through this properly (let alone test it), but still, some quick thoughts.\nPrimarily: this is a really important feature that shairport has never had. Thanks for addressing it, and for the quality code.\nWhat is the significance of npt_* identifiers? Equiv ntp?\nI suggest using the linear filtering bits for all the offset measurement and calculation stuff. There are also 2 things that could be done better than linear filtering:\n- Speed of convergence could be much improved by using adaptive filters or preloading filter state\n- median filtering rather than min/max removal for smoothing jumpy network lagged packets if linear/adaptive filters are not enough\nSuggest also using uint32_t, uint64_t rather than traditional C int names.\ncport, tport are malloc()'d but never free()'d in the timing fns commit.\nDelay can probably be estimated for generic outputs by seeing how many samples they swallow before slowing down to realtime data consumption; that's why the original buffer fill tracking sets its target fill value after it starts to play.\noutbuf = silence + 4 * (frame_size - play_samples);\ncould just be\noutbuf = silence ??\nThe player_thread_func is getting a bit heavy, I think it's time to break it up.\nFinally, the app should probably report its audio latency in RTSP header, once everything is firmed up a bit.\n. Because silence is all full of zeroes, you don't need to start playing it partway through?\n. That's not a BSD issue, it's a Mac issue. clock_gettime() is POSIX.1 as of 1993, but on a Mac you have to use Mach calls - host_get_clock_service() for the SYSTEM_CLOCK (which is supposed to be monotonic). Yum.\n. > and I guess the old rate control stuff should be ripped out?\nYes. Please.\nAmazing piece of work!\n. A condensed patchset would be ideal, if you have the time. Looking forward to merging this!\n. This is why good developers should always check their return codes! Would that I were one...\nI'm going to try and make some time to review this in detail in the next fortnight.\n. The problem is that player_flush sets the ring buffer pointers as if seqno were the next expected packet, whereas I'm pretty sure it's actually the last packet in the pre-flush stream. Then, if the packet arrives after the flush, it gets played.\nFix is to set both ab_read=seqno+1, ab_write=seqno in player_flush. Does that fix the audio glitch?\n. What's the difference between ab_buffering and the player BUFFERING/SYNCING states? I'm a little confused (after an admittedly quick scan).\n. shairport has also always supported libsamplerate for those who have cycles to burn and feel they can't tolerate stuffing. I'm not sure anyone has ever used it, though, and I'm not sure they ever should need to. The rate should never be so high as to be audible; if you can hear something, it's not that. (Modulo any stuffing bugs, of course.)\n. @mantheman @yenchee1970 There's no reason an ApEx shouldn't be able to deliver a bit-perfect output stream; indeed, it's the simplest way to engineer such a thing. The key difference between ApEx and shairport is that they control the DAC/SPDIF output clocks, and can adjust them directly; shairport has to work with what it's been given (which can be hairy if there's a big rate mismatch). Of course, who knows what the ApEx jitter is like? But bits over timing, apparently.\n@Nachtzuster you're absolutely right, the thing has rotted away. It always had to be manually configured (due to its massive CPU usage) but the documentation disappeared around 1.0. If drop/dup is really too noisy on some systems (how big does the rate mismatch have to be for it to become noticeable?) then either using resampling just for that buffer, or using a cheaper algorithm (first-order rather than zeroth-order hold, for example) might be necessary.\n. The libsamplerate resampler rings quite a lot on single buffers, it might not be suitable. I think your suggestion of choosing good samples is wise; finding ones which introduce the smallest spectral difference is an interesting problem (for example in a sine it's probably those at the peaks).\n. NAK.\nAt the moment, audio init is performed upfront so that errors can be detected on startup, as far as is possible. The alternative is having shairport fall over when someone hits play, which is a bad user experience.\nThe first target for this sort of issue is the PA config. Doesn't PA upsample to the engine default rate?\nThe Pulse backend would also be a good place to work on this. It's not clear to me whether the asynch API allows server connection to be separated more cleanly from streaming activity. Certainly the connection to the server should be tested at startup, even if by playing some zero samples and then closing up if that's what it takes.\n(Your patch is incomplete, by the way; newArgv and newArgc are never set).\n. This output is called 'pipe', not 'file'. It's for streaming to realtime consumers.\nShairport manages the audio resampling rate to very delicately match the sender and the output device, so the buffer stays filled (but neither over- nor under-filled).\nIn order to do so it expects the consumer to buffer some frames at the start, then consume at real time, plus or minus a few percent.\nAnd it sends silence when packets are missing to keep normal audio drivers happy.\nIf you pipe it to a file, you end up reading at hundreds of times realtime speed, which it will faithfully try and adapt to and fail.\nIf you want file output for whatever strange reason, make a file output out of audio_dummy.c, which has accurate sleeps between consuming frames for just this reason.\n. Yes, ideally you should do flow control yourself. You can also use the dummy output and tap the data on the way in to alac_decode() if you want an ALAC stream and the consumer is smart enough to do its own rate control for streaming sources.\n. Yes. You'll probably need to generate and output an alac header, the source sends the relevant parameters but not the header itself. You can reconstruct it using David Hammerton's original alac decoder source, which reads such a header into the relevant fields for the decoder.\nUsing the dummy output ensures sane timing.\n. This is being folded into the new timing algorithm, I think.\n. OK. Will address these after those.\n. Merged as metadata branch with FIFO support. @allesblinkt, I have credited you as 'allesblinkt' with a link to your GH page in the README.md, what would you prefer? @wnielson, and you?\nTest reports welcome, will promote to master in a few days if I don't hear anything terrible.\n. Merged. Thanks, everyone!\n. Wonderful! A launchd plist has been in my TODO list for about a year. Unfortunately I don't have the machine to test one...\nCan you fix the small typos (deamon->daemon) and check that it works with the latest master? Then I'll merge it.\nThanks very much!\n. Great! Thanks.\n. Merged! Thanks. Also fixed the #321 issue, thanks for pointing that out!\n. Fixed in master.\n. Merged. Thanks very much!\n. #297 does this too, without changing the individual drivers. I'm not sure about this; it introduces the possibility of runtime crashes of audio drivers if the audio situation changes. Perhaps they need to be reworked to report errors and ditch the connection rather than dying.\nAlso, @ejurgensen, will forked-daapd be happy with a closed pipe?\n. Thanks for this! Merged.\n. Committed the fix; edited your patch so it doesn't misbehave if the hostname is less than 6 characters long, hope you don't mind :)\n. Thank you!\n. This patch is against the originally released Perl/C hybrid design (versions 0.0x). The current master branch is a monolithic C implementation (1.x) and doesn't use Perl at all. You should probably upgrade, unless there is a reason 0.0x is better for you?\n. Cool.. Not a typo.\n$clen will compare as a number anyway - the // ensures that $clen is defined, avoiding compare-to-undefined warning.\n|| 0 is meaningless :)\n. // is a 5.10ism. Should've put a require 5.10 at the top, sorry this wasn't obviously a necessity.\n. ",
    "srcshelton": "Fair enough.\nOut of interest, though, what warnings did you see?  I'm on perl 5.12.2, and the code-changes in the push fixed all warnings I came across...\nOn 26 Apr 2011, at 11:01, albertz wrote:\n\nI merged it in. Though, I removed the shell-wrap hack again in this commit because it caused warnings here and it should work anyway if you just use perl -w shairport.pl and probably many people don't want it this way. And after all, shairport.pl should print useful warnings anyway, also when not started with -w.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/albertz/shairport/pull/49#issuecomment-1057466\n. I didn't see the Line 40 warning, but I guess that's from 'use '... see here for a further discussion:\n\nhttp://www.effectiveperlprogramming.com/blog/396\nThe logic at the top doesn't handle parameters, it's intended for when the script is invoked directly (which I'd suggest is going to be the majority of the time).  From perlrun(1), a suggested header is:\n#!/bin/sh\n       #! -*-perl-*-\n       eval 'exec perl -x -wS $0 ${1+\"$@\"}'\n           if 0;\nThe 'use ' syntax, as mentioned, only works for versions of perl more recent than a certain point - perl 5.8, IIRC.  For older versions, the 'use' line will generate a warning but execution will attempt to continue regardless.  The logic at the top merely gives these potential users a clean error message rather than a stack of compilation failures.\nOn 26 Apr 2011, at 11:09, albertz wrote:\n\n```az@Albert-Zeyer-MacBook-Pro 1161 (shairport) %./shairport.pl \nv-string in use/require non-portable at ./shairport.pl line 40.\nCan't exec \"avahi-publish-service\": No such file or directory at ./shairport.pl line 153.\nRegistering Service 0051F2CD5C4F@ShairPort 10817 on Albert-Zeyer-MacBook-Pro.local._raop._tcp port 5000 TXT tp=UDP sm=false sv=false ek=1 et=0,1 cn=0,1 ch=2 ss=16 sr=44100 pw=false vn=3 txtvers=1\nlistening...\n11:53:40.838  Got a reply for service 0051F2CD5C4F@ShairPort 10817 on Albert-Zeyer-MacBook-Pro.local._raop._tcp.local.: Name now registered and active\n^Ckilled\n```\nAlso, this didn't worked at all:\n```\naz@Albert-Zeyer-MacBook-Pro 1157 (shairport) %perl -w shairport.pl \n/bin/sh: -w: invalid option\nUsage:    /bin/sh [GNU long option] [option] ...\n...\n```\nAlso, I saw you added a check for Perl 5.10.0. Isn't that what use 5.10.0; does already?\n-- \nReply to this email directly or view it on GitHub:\nhttps://github.com/albertz/shairport/pull/49#issuecomment-1057490\n```\n. Commit ead60d4:\nPerhaps some Perl ninja could suggest otherwise, but the existing fork()/daemonise code seemed to get things backwards.  Given my understanding of what this process should entail and the Perl documentation, I'd suggest the version included in this commit is more correct.  I'm happy to be corrected by more informed Perl hackers ;)\n\n(Incidentally, this is also the sequence that Perl's Proc::Daemon module uses - and perhaps the best solution of all would be to use Proc::Daemon::daemon_init() instead of daemonising manually?  Other enhancements could be to add a post-fork 'close $ for @;' to close any open file-handles, and a second fork after calling sedsid() to guarantee complete detachment)\n. Commit e2da69d:\nThis brings us back up to the same state of the previous patch.  The code assumes that the Squeezebox Server is on the same host as ShairPort (which is probably a fair bet when we're using Named Pipes, not so much if AO is used...) and doesn't attempt to handle Squeezebox Server's (optional) security/authentication.  I have the CLI port of SBS listening on 127.0.0.1 in any case - and this is probably the advisable setup.\nThe one thing I've not been able to diagnose is why sending \" power 1\" is fine via telnet, but hangs shairport.pl the next time the socket is read from.  All other commands work.\nI hope that these two commits make my changes sufficiently understandable to be accepted onto the master branch?  If there's anything that still needs work, please let me know!\nAll the best,\nStuart\n. Could you give me a clue about using the 'rebase' option (unless github allows this in a friendlier fashion)?\nI'm still sorta stumped after reading git's documentation and searching Google (in that I understand the concept, but can't work out how to get git to rebase anything but the most recent change, d99abfc)\n. Ugh - that was painful :(\nAnyway - the above should be the changes in the form of two commits only (the first for debug/verbose messages & misc. fixes/cleanups; the second actually adding the Squeezebox integration code), for which all of the above comments should still apply.  Enjoy ;)\n. Sorry, my bad - the original code called POSIX::setsid directly, which I changed to call setsid() given that POSIX is 'use'd, but forgot to modify the use line.  Strangely, I didn't see this error (with perl-5.12.3)...\nI think you're now missing a colon before sys_wait_h, though...\n. ",
    "franzem": "I get this error on Fedora 14, any idea why?\n[root@smith shairport-0.05]# make\ngcc hairtunes.c alac.c -lm pkg-config --cflags --libs ao openssl -o hairtunes\n/usr/bin/ld: /tmp/ccYOsEPp.o: undefined reference to symbol 'pthread_create@@GLIBC_2.2.5'\n/usr/bin/ld: note: 'pthread_create@@GLIBC_2.2.5' is defined in DSO /lib64/libpthread.so.0 so try adding it to the linker command line\n/lib64/libpthread.so.0: could not read symbols: Invalid operation\ncollect2: ld returned 1 exit status\nmake: *** [hairtunes] Error 1\n. ",
    "askedrelic": "Might I suggest this practical guide for rebasing: http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\nMore in depth, you have made 5 commits on your fork. You probably want git rebase -i HEAD~5 and then you can squash all 5 of your commits into 1 single commit, which is easier to merge and view in the overall repo timeline.\n. ",
    "Stevo83": "Thanks a lot for putting this up. I will try to run this on my router in the next days. \n. ",
    "Andywebs": "All of your points are valid, if someone else doesn't get to them first, I'll definitely fix it.  I've been avoiding working on a take home final for my class, and really need to get to it.  I had noticed the flurry of development on the perl version, and thought I should get in what I had worked on.\nThe IPv6 Support is ALMOST there.  The only thing I didn't finish was conversion of the ipv6 format from colon notation to the joined binary.  All of the socket communications are ipv6/ipv4 agnostic.  I couldn't figure out how to get the iphone to connect over ipv6, it didn't seem possible.\nI wanted to compile the private key in, but couldn't figure out how to do it with the methods that openssl provides.  There may be some C trick that would do it, but my C is about 10 years from being an everyday language.\nIf these deficiencies aren't fixed by May 9th, i'll be back to working on them.\nAndrew\n. ",
    "jed-frey": "Could you also add all of the functionality to specify the output sink?\n. ",
    "ffainelli": "The fallback code omits doing a new call to getAddr() with AF_INET as a family, which results in the following:\n\nsocket(PF_INET6, SOCK_STREAM, IPPROTO_IP) = -1 EAFNOSUPPORT (Address family not supported by protocol)\nsocket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 3\nsetsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0\nbind(3, {sa_family=AF_INET6, sin6_port=htons(5002), inet_pton(AF_INET6, \"::\", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = -1 EAFNOSUPPORT (Address family not supported by protocol)\n\nI will try to come up with a patch fixing this properly.\n. Here is a patch fixing this, let me know if you prefer using another method for applying patches, thanks!\n\ndiff --git a/socketlib.c b/socketlib.c\nindex 9efdf22..eb44bcf 100644\n--- a/socketlib.c\n+++ b/socketlib.c\n@@ -39,9 +39,11 @@\n #include \n #include \n\n-int common_setup(struct addrinfo *pAddrInfo)\n-{  \n+int common_setup(struct addrinfo **ppAddrInfo, int pPort)\n+{\n   int tSock;\n+  struct addrinfo *pAddrInfo = *ppAddrInfo;\n+\n   //printAddrs(pAddrInfo);\n   tSock = socket(pAddrInfo->ai_family, pAddrInfo->ai_socktype, 0);\n #ifdef AF_INET6\n@@ -49,7 +51,17 @@ int common_setup(struct addrinfo *pAddrInfo)\n   {\n     //Fallback to ipv4\n     perror(\"Failed to create ipv6 socket. Trying ipv4\");\n-    pAddrInfo->ai_family = AF_INET;\n+    (*ppAddrInfo)->ai_family = AF_INET;\n+    if (pPort != -1)\n+    {\n+       char tService[SERVLEN];\n+       sprintf(tService, \"%d\", pPort); // copies port to string\n+       int tFamily = AF_INET;\n+       if(getAddr(NULL, tService, tFamily, SOCK_STREAM, ppAddrInfo))\n+       {\n+           return ERROR; // getAddr prints out error message\n+       }\n+    }\n     tSock = socket(pAddrInfo->ai_family, pAddrInfo->ai_socktype, 0);\n   }\n #endif\n@@ -63,7 +75,7 @@ int setup_client(struct addrinfo *server_host)\n\n   while(tIdx++ < RETRY_COUNT)\n   {\n-    tSockDesc = common_setup(server_host);\n+    tSockDesc = common_setup(&server_host, -1);\n     if (tSockDesc < 0 && tIdx >= RETRY_COUNT)\n     {\n       perror(\"Error: Could not create socket\");\n@@ -107,9 +119,23 @@ int getAddr(char *pHostname, char *pService, int pFamily, int pSockType, struct\n   return tError;\n }\n\n-int setup_server(struct addrinfo *server_addr)\n+int setup_server(struct addrinfo *server_addr, int pPort)\n {\n-  int tSock = common_setup(server_addr);\n+  char tService[SERVLEN];\n+  sprintf(tService, \"%d\", pPort); // copies port to string\n+  int tFamily = AF_INET;\n+  #ifdef AF_INET6\n+  //printf(\"Listening on IPv6 Socket\\n\");\n+  tFamily = AF_INET6;\n+  #else\n+  //printf(\"Listening on IPv4 Socket\");\n+  #endif\n+  if(getAddr(NULL, tService, tFamily, SOCK_STREAM, &server_addr))\n+  {\n+     return ERROR; // getAddr prints out error message\n+  }\n+\n+  int tSock = common_setup(&server_addr, pPort);\n   if (tSock < 0)\n   {\n     perror(\"Error: Could not create server socket\");\n@@ -154,21 +180,7 @@ int acceptClient(int pSock, struct addrinfo *server_addr)\n\n int setupListenServer(struct addrinfo **pAddrInfo, int pPort)\n {\n-    char tService[SERVLEN];\n-    sprintf(tService, \"%d\", pPort); // copies port to string\n-    int tFamily = AF_INET;\n-    #ifdef AF_INET6\n-    //printf(\"Listening on IPv6 Socket\\n\");\n-    tFamily = AF_INET6;\n-    #else\n-    //printf(\"Listening on IPv4 Socket\");\n-    #endif\n-    if(getAddr(NULL, tService, tFamily, SOCK_STREAM, pAddrInfo))\n-    {\n-      return ERROR; // getAddr prints out error message\n-    }\n-\n-    int tSocketDescriptor = setup_server(*pAddrInfo);\n+    int tSocketDescriptor = setup_server(*pAddrInfo, pPort);\n     char tAddr[INET6_ADDRSTRLEN];\n     socklen_t tSize = INET6_ADDRSTRLEN;\n     inet_ntop((*pAddrInfo)->ai_family, (*pAddrInfo)->ai_addr, tAddr, tSize);\ndiff --git a/socketlib.h b/socketlib.h\nindex 6d501f3..5cb1bf0 100644\n--- a/socketlib.h\n+++ b/socketlib.h\n@@ -24,7 +24,7 @@\n #define DEFAULT_UNIX \"/unix\"\n\n int setup_client(struct addrinfo *server_info);\n-int setup_server(struct addrinfo *server_address);\n+int setup_server(struct addrinfo *server_address, int pPort);\n int setupListenServer(struct addrinfo **pAddrInfo, int pPort);\n int acceptClient(int pSock, struct addrinfo *server_addr);\n void delay(long pMillisecs, struct timeval *pRes);\n\n. ",
    "magnusmoaner": "There. That should do the trick\n. I'd love to, but I'm not that familiar with git so I couldn't get it work properly. A little help would be appreciated =)\n. Thanks. And now it's updated.\n. ",
    "osheroff": "Eh, you're right, that commit doesn't change a thing.  The ApName certainly was turning out blank, but that wasn't the reason.  Nor do I have a repro now.   So, nevermind.\n. ",
    "xseregax": "May be change char tHWID_Hex[HWID_SIZE * 2] to char tHWID_Hex[HWID_SIZE * 2 + 1];\n. ",
    "rene-dev": "ok, just a thought to use gcc as the default...\n. I see, for some reason the toolchain for the motorola vip1710 does not provide a symlink.\n. ",
    "yuvalt": "Opened another one.\n. Oops\n. ",
    "juhovh": "Oh, I kind of expected the additional bytes at the end of the key were part of the firmware image and got accidentally encoded as base64 by you...but they were added by Apple? That's interesting, makes me wanna know the story how they got there. :)\nBut yeah, the base64 decoded key starts with DER encoded bytes \"30 82 04 a5\" where 0x04a5 is the content length and therefore the total key length is 1189+4=1193 bytes, three less than were originally included. And thank you once more for digging out the key, it makes life so much easier...\n. ",
    "toofishes": "This has been merged upstream in #138.\n. Calling pthread_mutex_lock() and unlock() guarantee memory synchronization: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_11\nRight now, you are doing something absolutely silly- reading from the volatile variable 'volume' in a tight loop, which requires a memory access every single time, as the compiler is held hostage and can't just store that value in a register.\nvolatile is like using a bomb when you need a flyswatter; it has some very bad consequences, and I'm still not sure it actually gives you the guarantees you are looking for.\nSo in short, the mutex is much much cheaper than the volatile in all respects.\n- http://stackoverflow.com/questions/78172/using-c-pthreads-do-shared-variables-need-to-be-volatile\n- http://stackoverflow.com/questions/3208060/does-guarding-a-variable-with-a-pthread-mutex-guarantee-its-also-not-cached\n. ",
    "alenichev": "OpenBSD installation instructions added\n. ",
    "sodabrew": "Thanks! This is the change I've made locally to run on my Chumby.\n. @skaman Just compiled this on my Chumby - it works great! Significantly more reliable than my libao build. I did have to use a large buffer (-b 128 results in many underruns, -b 512 works nicely).\n@albertz Combined with the already-accepted mDNS support, these changesets allow Shairport to run directly on embedded Linux devices, Chumby in particular. I think the key problem might be needing Makefile options or (gasp) a configure script to detect/select compile settings...\n. ",
    "skaman": "This is not exactly what you asked for. But it clean the code inside hairtunes (i suppose this was your concern) and i thought it's really easy to understand from anyone need to add another audio implementation (maybe another os?)\nWhat you think?\n. Sorry.. i missed a piece of code :)\nNow it work :)\nI've a question, the function hairtunes_init need also these arguments:\ncharpPipeName, char pLibaoDriver, char *pLibaoDeviceName\nHairtunes as standalone application set them directly inside the main, instead shairport do something strange:\nfirst set 3 vars as NULL\nchar *tAoDriver = NULL;\n  char *tAoDeviceName = NULL;\n  char *tAoDeviceId = NULL;\nafter it pass these vars without any modification to them\nhairtunes_init(tKeys->aeskey, tKeys->aesiv, tKeys->fmt, tControlport, tTimingport,\n                      tDataport, tRtp, tPipe, tAoDriver, tAoDeviceName, tAoDeviceId,\n                      bufferStartFill);\nMaybe there is something broken in shairport?\n. If someone is interested:\n- here there is a python implementation of shairport protocol (+ airplay protocol): https://github.com/E2OpenPlugins/e2openplugin-OpenAirPlay/blob/master/plugin/airplayserver.py\n- here an example of bitbake recipe for compile hairtunes with openembedded: https://github.com/SIFTeam/openembedded/blob/master/recipes/sifteam/hairtunes.bb\n- here the application in action: http://www.youtube.com/watch?v=RG7QnS7xCcw\n. ",
    "sjtoik": "Tested and works great.\n. ",
    "roji": "Same here, works perfectly and also seems more reliable than the libao build (will post if changes)\n. ",
    "therealmuffin": "Compiled the package with alsa and it works great. However, it does consume 50% percent more cpu than using it with libao. Does anyone else experience this? I'm using plughw with both options (changed that in audio_alsa.c).\n. @mikejuni : it seems we've been working partially on the same thing. I've directed the volume info to alsa mixer device and left libao with the internal mixer as it was. Pretty much as you're doing, but in a slightly different way. In addition made some configuration options. This seemed like the right moment to learn myself how to work github. I've created a fork. See if there is anything useful in there.\n. For just audio it works fine. However, since Airplay sends out mixer data we might as well use it. So my fork uses that data and sends it to Alsa. Works quite well I think.\n. I haven't submitted any commit's yet. I'm not much of a programmer and since Mikejuni is working on the same thing I figured I might better let him do it.\n. My soundcard supports mixer data. I prefer a hardware volume control over a software one, sounds a lot better. In addition I can control my amplifier with that data (volume wise).\n. Excellent, thanks.\n. No change (#188) on Linux, same message from iTunes. On OSX it\nintroduces a whole lot of warnings and errors; warnings about\ndepreciated MD5_* functions, depreciated BIO_* functions, and errors\nabout undeclared ao_* functions.\n. Hello,\nI got some errors compiling this branch with OS-X 10.9 (on two different\nmachines):\ncc -c -O2 -I/opt/local/include  rtp.c\nrtp.c:70:5: warning: implicit declaration of function 'clock_gettime' is\ninvalid in C99 [-Wimplicit-function-declaration]\n    clock_gettime(CLOCK_MONOTONIC, tsp);\n    ^\nrtp.c:70:19: error: use of undeclared identifier 'CLOCK_MONOTONIC'\n    clock_gettime(CLOCK_MONOTONIC, tsp);\n                  ^\nrtp.c:79:5: warning: array index -9223372036854775808 is before the\nbeginning of the array [-Warray-bounds]\n    ntp_cache[LLONG_MIN] = 0;\n    ^         ~~~~~~~~~\nrtp.c:55:1: note: array 'ntp_cache' declared here\nlong long ntp_cache[NTPCACHESIZE + 1];\n^\nrtp.c:109:9: warning: expression result unused [-Wunused-value]\n        minindex, maxindex = -1;\n        ^~~~~~~~\n3 warnings and 1 error generated.\nmake: *** [rtp.o] Error 1\nOn 17-04-14 08:40, Nachtzuster wrote:\n\n@abrasive https://github.com/abrasive things are spread out in 16\ncommits right now, I'm guessing this should be reduced to 5-6 aptly\ncommented commits - or you want everything squashed down into one\ncommit? After that is done, I'm at the bottom of my to-do list\napart from:\n-OSX support: need testers\n-verify the default delay: working on testing on a couple of different\nmachines.\n@BewickPlace https://github.com/BewickPlace should compile/work on a\nPi out-of-the-box now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/abrasive/shairport/pull/296#issuecomment-40685663.\n. Hello,\n\nIt compiles fine now. Other than that I get a lot of messages and no\nsound. I've used OS-X 10.9.2 as server and use two different clients, a\niPod Touch 3g running iOS 5.1.1 and iTunes on OS-X 10.9.2 (different\ncomputer) as client\nUsing the iTouch:\n ./shairport -vvv\nBound to address 0.0.0.0\nBound to address ::\nListening for connections.\nculling threads.\nnew RTSP connection\nreceived request: OPTIONS * RTSP/1.0\n    CSeq: 8\n    Apple-Challenge: h/WD50yttwiIHF0v6bWYmQ==\n    DACP-ID: 8F6C7E54975A56E7\n    Active-Remote: 3595065267\nsending response: RTSP/1.0 200 OK\n    Apple-Response:\nl/5VI/S1WlSTFyHazUxGawiTXC0ZE+n0ytgtGfGGEm1Of7h7FVOTpetjA4aXGIgILoIbCrO70u86uhWP2oHlRlt61tI8jpC24XowqgugDT7GUF5mT9xhT7NdSKB0tJiuZhxl7hiC11cavddPZqj4/sFB7mzWBfkQ42RUwOK7ligBBVPeyo+BeNVUVjbu57qZCrGNj5OzKPMAu74wLTjbfxKaNYt29FJpFQBAV0l7P/CAQbFGzmIqTErUQ3S0mK4esMgG5sXxoyop8nqtY+IA+htL29loEaA3TdBw5noXGyOBWSRU8rJUMZiYKdu6UdI3P9i8Cy3KuoIhwgJM4pFVrg\n    CSeq: 8\n    Audio-Jack-Status: connected; type=analog\n    Public: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS,\nGET_PARAMETER, SET_PARAMETER\nreceived request: ANNOUNCE rtsp://192.168.1.210/1244386191825306948 RTSP/1.0\n    X-Apple-Device-ID: 0x64b9e8ef7a3b\n    CSeq: 9\n    DACP-ID: 8F6C7E54975A56E7\n    Active-Remote: 3595065267\n    Content-Type: application/sdp\n    Content-Length: 610\nsending response: RTSP/1.0 200 OK\n    CSeq: 9\n    Audio-Jack-Status: connected; type=analog\nreceived request: SETUP rtsp://192.168.1.210/1244386191825306948/audio\nRTSP/1.0\n    Transport:\nRTP/AVP/UDP;unicast;mode=record;timing_port=50571;events;control_port=58801\n    CSeq: 10\n    DACP-ID: 8F6C7E54975A56E7\n    Active-Remote: 3595065267\nTransport:RTP/AVP/UDP;unicast;mode=record;timing_port=50571;events;control_port=58801\nrtp listening on dataport 50130, controlport 2091914032\nstarting player_play\nCurrent time s:387621 us:50571\nbuffer size set to 184\ntotaltime 276, last loop time 11594, loop 55\nGeneric output delay 249149\nsending response: RTSP/1.0 200 OK\n    CSeq: 10\n    Audio-Jack-Status: connected; type=analog\n    Transport:\nRTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=50130;control_port=50130;timing_port=56970\n    Session: 1\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.1.210/1244386191825306948 RTSP/1.0\n    Range: npt=0-\n    CSeq: 11\n    DACP-ID: 8F6C7E54975A56E7\n    Active-Remote: 3595065267\nsending response: RTSP/1.0 400 Error\n    CSeq: 11\n    Audio-Jack-Status: connected; type=analog\nCurrent time s:387621 us:101130\nRTSP connection closed\nclosing RTSP connection\nshutting down RTP thread\nRTP thread interrupted. terminating.\nTime send thread interrupted. terminating.\nTime receive thread interrupted. terminating.\nterminating RTSP thread\n^CShutting down...\nUsing OS-X (ends when I hit pause on client):\n./shairport -vvv\nBound to address 0.0.0.0\nBound to address ::\nListening for connections.\nculling threads.\nnew RTSP connection\nreceived request: OPTIONS * RTSP/1.0\n    CSeq: 1\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\n    Apple-Challenge: PuWCbIJRhLNN22C55EX5hg\nsending response: RTSP/1.0 200 OK\n    Apple-Response:\naeGjSr+FxpQYxggDIxjqLql+n2bW8qzT5Wh9Btny7I0nbzzF6T2mCegN2BVx58j1lqciXQpeugNxy0AQPz90wpVsQ286qvc4ImZwqr5cGA7YB6xOA/U9laRm0Birrf/XHyi0YcimlW4iLuPUYovbfySGIbJKVC5z6rq6OezH2nhNsXbhQ+pTNORMm72ChzIG0lTlHuQaycIY5cV6WQHIbkYWrEg+LvmnRKWjQGkzYg0sgtKzUfPvug7yXgrnv2Ed00mQeHSAtYbu2uNqbLCcR7kfF+EOrHeoiCCCNYv98T4q/IW/zIuzgUAImeOtNFr2zbeZE/8ZlXQBU3bdibPK8A\n    CSeq: 1\n    Audio-Jack-Status: connected; type=analog\n    Public: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS,\nGET_PARAMETER, SET_PARAMETER\nRTSP connection closed\nclosing RTSP connection\nterminating RTSP thread\nculling threads.\none joined\nnew RTSP connection\nreceived request: ANNOUNCE rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 1\n    Content-Type: application/sdp\n    Content-Length: 572\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nsending response: RTSP/1.0 200 OK\n    CSeq: 1\n    Audio-Jack-Status: connected; type=analog\nreceived request: SETUP rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 2\n    Transport:\nRTP/AVP/UDP;unicast;interleaved=0-1;mode=record;control_port=6001;timing_port=6002\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nTransport:RTP/AVP/UDP;unicast;interleaved=0-1;mode=record;control_port=6001;timing_port=6002\nrtp listening on dataport 55273, controlport 839934656\nstarting player_play\nCurrent time s:388083 us:430629\nbuffer size set to 184\ntotaltime 279, last loop time 11657, loop 55\nGeneric output delay 249146\nsending response: RTSP/1.0 200 OK\n    CSeq: 2\n    Audio-Jack-Status: connected; type=analog\n    Transport:\nRTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=55273;control_port=55273;timing_port=63802\n    Session: 1\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 3\n    Session: 1\n    Range: npt=0-\n    RTP-Info: seq=33964;rtptime=2815002702\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nReceived seq: 84AC, rtptime: 2815002702\nReporting 2205ms delay\nsending response: RTSP/1.0 200 OK\n    CSeq: 3\n    Audio-Jack-Status: connected; type=analog\n    Audio-Latency: 2205\nreceived request: SET_PARAMETER rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 4\n    Session: 1\n    Content-Type: text/parameters\n    Content-Length: 20\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nvolume: -15.109602\nsending response: RTSP/1.0 200 OK\n    CSeq: 4\n    Audio-Jack-Status: connected; type=analog\nreceived request: SET_PARAMETER rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 5\n    Session: 1\n    Content-Type: text/parameters\n    Content-Length: 20\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nvolume: -15.109602\nsending response: RTSP/1.0 200 OK\n    CSeq: 5\n    Audio-Jack-Status: connected; type=analog\nSync packet rtp_tsp 2815002702\nSync packet ntp_tsp 2209045549276476\nPacket for with sync data was sent has arrived (84AC)\npacket: ab_write 84AB, ab_read 84AC, seqno 84AC\nfound good sync (84AC:84AC) sync: 2208657467777931\npacket: ab_write 84AC, ab_read 84AC, seqno 84AD\npacket: ab_write 84AD, ab_read 84AC, seqno 84AE\npacket: ab_write 84AE, ab_read 84AC, seqno 84AF\npacket: ab_write 84AF, ab_read 84AC, seqno 84B0\nCurrent time s:388083 us:481710\npacket: ab_write 84B0, ab_read 84AC, seqno 84B1\n[... this goes on as long as something's audio data comes in]\nSamples to go before playback start: 1227733736\npacket: ab_write 8AFE, ab_read 84AD, seqno 8AFF\npacket: ab_write 8AFF, ab_read 84AD, seqno 8B00\nSamples to go before playback start: 1227733384\npacket: ab_write 8B00, ab_read 84AD, seqno 8B01\nreceived request: FLUSH rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 6\n    Session: 1\n    RTP-Info: seq=35587;rtptime=2815573998\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nReceived seq: 8B03, rtptime: 2815573998\nReporting RTP-Info: rtptime=2815543726\nsending response: RTSP/1.0 200 OK\n    CSeq: 6\n    Audio-Jack-Status: connected; type=analog\n    RTP-Info: rtptime=2815543726\npacket: ab_write 8B02, ab_read 8B03, seqno 8B02\nlate packet 8B02 (8B03:8B02)\nCurrent time s:388098 us:535889\nreceived request: TEARDOWN rtsp://192.168.1.211/3480583405 RTSP/1.0\n    CSeq: 7\n    Session: 1\n    User-Agent: iTunes/11.1.5 (Macintosh; OS X 10.9.2) AppleWebKit/537.74.9\n    Client-Instance: 9E14B0C195D087E8\n    DACP-ID: 9E14B0C195D087E8\n    Active-Remote: 107014569\nsending response: RTSP/1.0 200 OK\n    CSeq: 7\n    Audio-Jack-Status: connected; type=analog\n    Connection: close\nRTSP shutdown requested\nclosing RTSP connection\nshutting down RTP thread\nRTP thread interrupted. terminating.\nTime receive thread interrupted. terminating.\nCurrent time s:388099 us:884712\nTime send thread interrupted. terminating.\nterminating RTSP thread\nculling threads.\none joined\n. Forgot to mention, I disabled the firewall (on the server that is). Just\ntried to disable PF on the OS-X client, no difference there.\n. To confirm it is not client related, I tried connecting iTunes on OS-X\nto the sntp branch running on Linux. That one works fine. However,\nconnecting from iOS 5.1.1. gives the same errors on both plaforms. The\n1.0 banch works fine. Same goes for iOS 7.?.? (latest).\n. $ ./configure\nConfiguring Shairport\nOpenSSL found\nlibao found\nPulseAudio or its dev package not found\nALSA or its dev package not found\nAvahi client or its dev package not found\ngetopt.h found\ndns_sd.h found\nTrying if we should be using mach time\nmach/mach.h found\nmach/clock.h found\nCFLAGS: -I/opt/local/include -I/opt/local/include\nLDFLAGS: -lm -lpthread -L/opt/local/lib -lssl -lcrypto -L/opt/local/lib -lao\nConfigure successful. You may now build with 'make'\n$ make\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  shairport.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  daemon.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  rtsp.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  mdns.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  mdns_external.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  mdns_tinysvcmdns.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  common.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  rtp.c\nrtp.c:110:9: warning: expression result unused [-Wunused-value]\n        minindex, maxindex = -1;\n        ^~~~~~~~\n1 warning generated.\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  player.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  alac.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  audio.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  audio_dummy.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  audio_pipe.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  tinysvcmdns.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  audio_ao.c\ncc -c -O2 -I/opt/local/include  -I/opt/local/include  mdns_dns_sd.c\ncc shairport.o daemon.o rtsp.o mdns.o mdns_external.o mdns_tinysvcmdns.o\ncommon.o rtp.o player.o alac.o audio.o audio_dummy.o audio_pipe.o\ntinysvcmdns.o audio_ao.o mdns_dns_sd.o -lm -lpthread -L/opt/local/lib\n-lssl -lcrypto  -L/opt/local/lib -lao  -o shairport\n. Hello,\nI'm not that crafted with Wireshark, but this should contain all\ninformation between client and server. I filtered out VNC traffic.\nRegards, Maarten\nhttps://drive.google.com/file/d/0B8NXrvg2PO7hdFhMa3RycGZLejg\n. @Nachtzuster Unfortunately no change (except for different error\nmessages). Firewall is turned off. I tried both iOS 5.1.1 and latest iOS\n7. In addition I have to kill it with SIGKILL, otherwise it will not exit.\nsending response: RTSP/1.0 200 OK\n    CSeq: 2\n    Audio-Jack-Status: connected; type=analog\n    Transport:\nRTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=53693;control_port=53693;timing_port=53694\n    Session: 1\nPlayer STATE: 0\nRTSP shutdown requested\nclosing RTSP connection\nshutting down RTP thread\nRTP thread interrupted. terminating.\nTime receive thread interrupted. terminating.\nKilled: 9\n. @Nachtzuster Here's the requested output:\nreceived request: SETUP rtsp://192.168.1.210/696310191842851713/audio\nRTSP/1.0\n    Transport:\nRTP/AVP/UDP;unicast;mode=record;timing_port=60475;events;control_port=50342\n    CSeq: 2\n    DACP-ID: E873D7600C69FC0E\n    Active-Remote: 142138336\nTransport:RTP/AVP/UDP;unicast;mode=record;timing_port=60475;events;control_port=50342\nrtp listening on dataport 54062, controlport 54062\nstarting player_play\nAF_INET6 defined\nsend packet failed in send_timing_packet\nFATAL: error(22)\nbuffer size set to 184\nShutting down...\nshutting down playing thread\ntotaltime 197, last loop time 11481, loop 55\nGeneric output delay 249228\nsending response: RTSP/1.0 200 OK\n    CSeq: 2\n    Audio-Jack-Status: connected; type=analog\n    Transport:\nRTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=54062;control_port=54062;timing_port=56617\n    Session: 1\nPlayer STATE: 0\nRTSP shutdown requested\nclosing RTSP connection\nshutting down RTP thread\nRTP thread interrupted. terminating.\nTime receive thread interrupted. terminating.\n. @Nachtzuster This seems to work very well!! Running on latest OSX10.9\nand clients iOS 5.1.1, 7 and iTunes on the same machine as the server.\nAlso, it seems to sync properly, though I haven't tested that over a\nlonger period.\nOne small issue I haven't noticed before: when switching clients or when\ndisconnecting and connecting the same client it seems the buffer from\nthe previous session get pushed to the pcm device creating a 'not so\nnice' glitch, a pause for the buffer to fill, and then the actual audio.\nHere's the log:\n./shairport -v\nBound to address 0.0.0.0\nBound to address ::\nListening for connections.\nnew RTSP connection\nreceived request: OPTIONS * RTSP/1.0\nsending response: RTSP/1.0 200 OK\nreceived request: ANNOUNCE rtsp://192.168.1.210/11628403259697635785\nRTSP/1.0\nsending response: RTSP/1.0 200 OK\nreceived request: SETUP rtsp://192.168.1.210/11628403259697635785/audio\nRTSP/1.0\nTransport:RTP/AVP/UDP;unicast;mode=record;timing_port=53762;events;control_port=55717\nsocklen = 16\nsizeof(struct sockaddr) = 16\nrtp listening on dataport 61892, controlport 61892\nstarting player_play\nbuffer size set to 184\nCurrent time s:376097 us:821142\nsending response: RTSP/1.0 200 OK\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.1.210/11628403259697635785 RTSP/1.0\nReceived seq: FFFFFFFF, rtptime: 0\nReporting 2205ms delay\nsending response: RTSP/1.0 200 OK\nreceived request: SET_PARAMETER\nrtsp://192.168.1.210/11628403259697635785/audio RTSP/1.0\nvolume: 0.000000\nsending response: RTSP/1.0 200 OK\nCurrent time s:376097 us:872239\nfound good sync (7D98:7D98) sync: 1952602\nrequesting resend on 5 packets (7DB5:7DB9)buffering over. starting play\nFill with 58 frames and 291 samples\nChanging player STATE: 1\nChanging player STATE: 2\nrequesting resend on 1 packets (7EAF:7EAF)Current time s:376100 us:924505\nrequesting resend on 1 packets (7F2C:7F2C)requesting resend on 1 packets\n(7FAB:7FAB)received request: OPTIONS * RTSP/1.0\nsending response: RTSP/1.0 200 OK\nrequesting resend on 1 packets (801E:801E)requesting resend on 1 packets\n(8026:8026)Current time s:376103 us:925742\nrequesting resend on 1 packets (80A1:80A1)requesting resend on 1 packets\n(80A6:80A6)requesting resend on 1 packets (81A0:81A0)Current time\ns:376106 us:926990\nreceived request: OPTIONS * RTSP/1.0\nsending response: RTSP/1.0 200 OK\nrequesting resend on 1 packets (8298:8298)received request: FLUSH\nrtsp://192.168.1.210/11628403259697635785/audio RTSP/1.0\nReceived seq: 82BD, rtptime: 2735012961\nReporting RTP-Info: rtptime=2734920106\nsending response: RTSP/1.0 200 OK\nfound good sync (82BD:830E) sync: 1950418\nrequesting resend on 1 packets (8316:8316)received request: TEARDOWN\nrtsp://192.168.1.210/11628403259697635785 RTSP/1.0\nsending response: RTSP/1.0 200 OK\nRTSP shutdown requested\nclosing RTSP connection\nRTP thread interrupted. terminating.\nTime receive thread interrupted. terminating.\nCurrent time s:376109 us:287685\nTime send thread interrupted. terminating.\nAnd here's the part of the glitch:\nRTSP shutdown requested\nclosing RTSP connection\nTime receive thread interrupted. terminating.\nRTP thread interrupted. terminating.\nCurrent time s:376313 us:581347\nTime send thread interrupted. terminating.\nnew RTSP connection\nreceived request: OPTIONS * RTSP/1.0\nsending response: RTSP/1.0 200 OK\nreceived request: ANNOUNCE rtsp://192.168.1.210/4489135513959048233 RTSP/1.0\nsending response: RTSP/1.0 200 OK\nreceived request: SETUP rtsp://192.168.1.210/4489135513959048233/audio\nRTSP/1.0\nTransport:RTP/AVP/UDP;unicast;mode=record;timing_port=52046;events;control_port=50134\nsocklen = 16\nsizeof(struct sockaddr) = 16\nrtp listening on dataport 59890, controlport 59890\nstarting player_play\nbuffer size set to 184\nsending response: RTSP/1.0 200 OK\nCurrent time s:376317 us:306512\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.1.210/4489135513959048233 RTSP/1.0\nReceived seq: FFFFFFFF, rtptime: 0\nReporting 2205ms delay\nsending response: RTSP/1.0 200 OK\nreceived request: SET_PARAMETER\nrtsp://192.168.1.210/4489135513959048233/audio RTSP/1.0\nvolume: 0.000000\nsending response: RTSP/1.0 200 OK\nCurrent time s:376317 us:357109\nfound good sync (4AF5:4AF5) sync: 1915646\n. @Nachtzuster, I'm a bit unsure how to roll back commits, so I hope I did\nthat right:\n- I tried the latest sntp branch (no change).\n- git reset --hard  d427c9d (idem)\n- git reset --hard  e61eda9 (idem)\nOn Linux I don't observe the same effect.\n. @Nachtzuster yes it is on OS-X. And I never noticed it on Master, then\nagain, I mainly use shairport on Linux... so checking it again... and it\nseems it also happens with master\n@abrasive while your description seems accurate of what happens, the fix\ndoes not solve it.\n. ",
    "mikejuni": "I also have this compiled and working in OpenWRy after reverting some recent patch (which I will post later) only that CPU load is higher then the build from @albertz (I've pulled directly from @skaman ). But stability is good and I don't have skips whatsoever. Will try different compile flags to see I it improve the CPU load. \n. @therealmuffin looks like you have abstracted and refactored the code for mixer as well. I tried not to do it because I am more interested in pure C version of the shairport and don't want to make things too complex by changing the codes for hairtunes_init. Also the main objective of my code is to try to improve CPU utilisation by not having too much calculations (thus trying in compile time ignore volume soft setting and dithering) in order to make it work better in embedded environment (like OpenWRT and routers). Now with proper setting I could get CPU load down to 10% compared with 40% previously in my router (buffalo ag300h). Lets see if I could make use of some of your codes. \n. ",
    "hendrikwedhorn": "I still got an SDP-Parsing error with iOS 6 beta 2 and this patch of shairport, so i created my own patch using Net::SDP. Now it works perfectly...\n. No, i got instant Audio with iOS 6.0 newest Beta.\nMfG Hendrik....\nAm 31.07.2012 um 21:35 schrieb HogeBlekker reply@reply.github.com:\n\nIndeed it works now. But, you have to try multiple times before audio comes through. Anyone else with the same problem?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/albertz/shairport/pull/152#issuecomment-7409070\n. These 2x print could be deletet.\n. \n",
    "trustin": "I wouldn't say this is an optimal implementation.  Someone who got better knowledge in Perl could rather fix this problem by modifying shairport.pl directly.\n. ",
    "mrpippy": "This patch is also required for OS X Mountain Lion's AirPlay mirroring. Working for me with both Mountain Lion and iOS 6.\n. ",
    "HogeBlekker": "Indeed it works now. But, you have to try multiple times before audio comes through. Anyone else with the same problem?\n. @hendrikw82 I can't comment on iOS 6 as I don't have it. I have to try multiple times with system-wide AirPlay audio (option click on speaker icon) on Mountain Lion 10.8.0\nEDIT: recompiled using newer hairtunes.c and restarted avahi. Seems to have disappeared now. Not to worry :)\n. ",
    "eminence": "If this adds a new dependency (on Net::SDP), you should update INSTALL.md to reflect this\n. ",
    "jpoehls": "I'm hitting this error as well when streaming from iOS 6. I applied the patch locally but I get an error Can't locate Net/SDP.pm in @inc. I'm a Perl noob, what is the proper way to install this dependency?\n. ",
    "blongden": "cpan install Net::SDP worked for me - I accepted all the defaults when it was configuring cpan. You may need to run as root if you get a permissions error.\n. This patch worked perfectly for me on iOS 6 beta 4, btw.\n. ",
    "badboy": "+1 for this patch. Works for me on iOS 6 (final)\n. ",
    "qnology": "Thanks for catching this.\n. ",
    "sm3rt": "Hi sorry getting to grips with GIT... I didn't use msg_add_header as I was being lazy I guess..\n. Hi,\nThe code you have in ./configure as it stands doesn\u2019t appear to work on ubuntu to detect the installed libraries...\nUsing the \u2013libs option seems a better approach as it returns the compiler options with correct libs? \neg\n pkg-config --libs openssl\nFrom: James Laird \nSent: Monday, April 22, 2013 7:35 PM\nTo: abrasive/shairport \nCc: Quentin Smart \nSubject: Re: [shairport] Update Makefile to support OpenWRT (#206)\nNot everyone has libao, nor alsa. That's why the effort was made to include pluggable backends.\nIf you really want to force the issue, then please manually write the config.* files, or submit a patch to the configure script that takes a --force-alsa flag.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi I know it's probably a bit late but had you thought of using http://www.portaudio.com/ this would make cross platform and sound simple? It's used in squeezeslave https://code.google.com/p/squeezeslave/ which compiles and works well on openwrt and clearly other platforms. The sound quality is better than shairport currently as it suffers from no occasional noise.\n. ",
    "MaZderMind": "Did you test that it still works on other platforms (x86, amd64, arm)?\n. Hmm well I should have testet that in the wild before; fails with\nShutting down...\nGot SIGTERM, quitting.\nfailed to accept connection: Interrupted system call\nfailed to accept connection: Interrupted system call\non my raspi, have to check why\n. No but I know what the problem is: launching the subprocess from the player thread makes it receive signals from that subprocess. One of these signales interrupt a connect()-call somewhere else in the code.\nI see that I'm novice when it comes to unix multithreading, so I'll have to try different solutions:\n- block signales from the thread: http://stackoverflow.com/a/8093964/1659732\n- use SA_RESTART http://permalink.gmane.org/gmane.comp.standards.posix.austin.general/6362\n- handle EINTER on the connect() http://www.madore.org/~david/computers/connect-intr.html\n. ",
    "chappy72": "I am interested in using a gpio to switch inputs on my radio already got the circuitry figured out and working but, I am super new to all things unix so i dont think i will be of much help as far as the coding goes, but i figured i would say something ...\n. ",
    "plietar": "About getopt_long, I believe the options are clearer using long names, and avoid mixing up.\nWhy not include an implementation of getopt_long on non-GNU platforms ?\nThere's one there : http://www.netmite.com/android/mydroid/external/androidmono/mono/msvc/getopt_long.c\n. I've rebased the commits on 1.0-dev\nThe daemon related code is in a different file, including the pipe communication.\nFor now the log redirection is left in shairport.c, as I think it can be useful in non-daemon mode too.\n. The second method implies static linking is not possible. Is that a problem ?\nThe modularity could be disabled at build time, with a configure option, to make it possible to link statically.\n. I believe I'll go with the first option finally.\nLocating the shared libraries for dlopen is way too difficult.\nOutput driver plugins make it possible to rely pkg-config and gcc to locate shared library.\nUnless someone knows another way of doing it ?\n. Isn't -fPIC and -shared enough ? I'll work on it tomorrow.\nI don't understand why you want to move drivers' help in audio.c ?\n. I've started working on it.\nNot sure it is portable right now. On what compilers should it work other than gcc ?\n@omor1 making it suitable for distributions is what I had in mind.\n. Almost there !\nlibtool is not used finally. This implies the use of a file per platform to define the correct flags.\nI've wrote the files for linux and osx. Can someone try on other platforms (Cygwin/Mingw, BSD, ...).\nmake installis required so that shairport can find the modules. For now, prefix is defined by environment variable when running configure. Have to add a command line flag.\nI might add a 'development' mode (chosen at build time), which would cause shairport to look in current directory rather than installation directory.\nAlso static plugins are not implemented (Yet !)\n. mdns_apname is used later, if avahi_register fails or is not available.\nIn fact is should be freed :\n- If avahi_register is successful, before returning\n- In the parent thread, after forking, before returning too\n- In child thread, if all execvp failed before calling die\nIf execvp is successful, then all the child's allocated memory (including mdns_apname) is freed automatically.\n. Thanks for the feedback.\nWhat compile error do you get ? On my linux box (a raspbian) I don't have the dns_sd.h file.\nAny way It's (I believe) a compatibilty layer to use software designed for bonjour on avahi. Build should be ok.\nI'll have to improve to test in the Makefile.\nI think the in house configure script is starting to show it's limits.\nWhould you be against using some other tool, such as autotools ?\n. @MohammadAG Building with make CFLAGS=\"-O0 -g\" will give you debug symbols.\n. @Nachtzuster Great work, thanks\nHowever, the code does not build on OS X (and probably other BSDs) due to the lack of clock_gettime()/CLOCK_MONOTONIC. I haven't looked at the code, but the calls can probably be replaced by other on these platforms.\nI'll try tomorrow on my Raspberry Pis\n. @casr About using launchd to advertise the service, AFAIK launchd doesn't support TXT records, which is required by airplay.\nSee https://lists.macosforge.org/pipermail/launchd-dev/2010-August/000829.html\n. This is related to #337.\nI'm the author of the logrotate file and init scripts. On my system I had a shairport user whose primary group was nogroup, and also had audio as a supplementary group.\nI think the correct 'Debian' way would be to not use a shairport user at all, and simply start the daemon with nobody:nogroup, and audio as a supplementary group.\n. ",
    "omor1": "When this graduates to 1.0 and is (possibly) put on distributions' repositories, it would be nice to have this feature.\nOtherwise, the only way it could be installed is if it was compiled for all three backends and all of them were listed as dependencies, which is bothersome and clunky for the end-user.\nOut of the two options, it seems that the first is the easier and better option.\nPerhaps it is worthwhile to see how other software with multiple backends deal with this situation?\n. Note that ./configure scripts generally take long-format options: --help and --prefix=PREFIX, for example.\nTake a look at https://www.gnu.org/prep/standards/html_node/Configuration.html.\nOf course, this is neither GNU software nor released under the GNU GPL, but nevertheless, it would be nice to implement this.\n. I'll take a look at it later and figure out if it's still good.\n. Have you given any thought to having shairport itself read a configuration file (in /etc/shairport.conf by default), similar to how most other daemons do? A -c --conf=FILE flag could be added to optionally change the location. I think this would be the best solution for configuration; I previously had issues when using the EnvironmentFile configuration in /etc/conf.d/shairport and I do not like the current solution I have of using /etc/systemd/system/shairport.service.d/.\nI think it would be best to keep a very similar, but separate shairport.service file for Arch; users expect (almost) all pacman-managed binaries (including shairport) to be installed in /usr/bin, and telling them to manually modify the initscript is counter to expectations. (This is also why I suggested the configuration file in /etc/shairport.conf.) Also, my PKGBUILD sets up a shairport user and adds it to the audio group to run the daemon under to increase security; this is reflected int the shairport.service initscript.\n. ",
    "jclehner": "Wouldn't it be better to write an .ebuild instead and install the initscript from there? Also, checking /proc/version just tells you that the kernel was compiled on Gentoo, not that it's actually running Gentoo!\n. On both of my Gentoo systems there's a file called /etc/gentoo-release which is owned by the baselayout package; I'd say that's your best bet!\nI might hack together an .ebuild if I find the time to do so!\n. ",
    "firelizzard18": "I'm not familiar enough with .ebuilds to make one. That initscript is (basically) the one I made for and I'm currently using with my system.\nDo you happen to know of a better way of checking the current running version?\n. ",
    "Gacko": "Okay. I'm used to configure builds with a specific prefix if I DON'T want them to be installed in /usr. \n. ",
    "mdshw5": "Thanks, @abrasive all your work. It really was a better idea to just move the warnings to a higher debug level.\n. ",
    "Nachtzuster": "'we' used to just take the setup string from the client and stick our ';server_port=xxx' on.\nin other words, we were telling the client our control and timing port was the same as theirs.\nNow we are giving the control_port we are actually listening on.\nTiming port is still theirs, though, but it is not used anyway.\n. I had a look at you variant, this was actually very close to my first, failed, attempt :-)\n. Thanks for taking time to look into this.\nFor now I fixed the most embarrassing things, ie the npt<>ntp naming, the free() - woops\noutbuf = silence + 4 * (frame_size - play_samples);\ndoes indeed reduce to outbuf = silence; most of the time,\nexcept the very last time, there we have an partial silence frame\nwhen you get around to trying the code, note that I've only tested with the Alsa sink for now.\n. ok, now I get it.\nYes it should be outbuf = silence;\nit doesn't really matter which zeroes get played out :-)\n. Hi Mohammad,\nI'm guessing you're not using the alsa sink. For now that is the only tested/working sink.\nPulse might work too, all the rest won't work, they'll segfault on you :-)\n. Fixed some more leaks/naming.\nAlso corrected outputbuffer pointer, fixing the glitches. That makes it a bit more usable.\n@MohammadAG: I had not bothered with figuring out what the exact delay should be, so thanks for the better number, its in there now.\nAnyway, the code is a decent enough state to add more features like support for generic outputs and a decent regulation. I'll be working on that now.\n. Been low on activity, but still getting closer to completion :-)\nflush/record rtsp calls are now handled properly, which means pause/resume will also work and stay in sync.\nstill need:\n- a better rate control algorithm\n- delay needs to be user settable @MohammadAG On my machine, 2205000 sounds spot on. It is also the value I found in the unofficial documentation on the web somewhere, So I'll probably use that in the end.\n- need to (better) handle buffer under-runs\n@arodd Great ideas! If you want to help; just testing code is already helpful - for any code base :+1: \n. Moving on: all features are in place and working more or less properly now, still some loose end though... and I guess the old rate control stuff should be ripped out?\nAlso the issues on OSX and Pi need addressing. (don't have access to those systems though)\nStill need to properly measure the delay, will just record output from iTunes (R) and remote Shairport (L) and check the waveform in some editor.\nAnyway:\n- rate control is simpler/smoother\n- will properly handle under-runs: drop everything and re-start at the right time\n@BewickPlace: Thanks! testing again would be great now :-)\n. Looks like iTunes isn't sending sync along with the first packet for late joiners.... Hey! that does not comply with the unofficial spec. :-)\n@BewickPlace your code looks good, I'll fold that in, thanks!\nThe ratecontrol not working is probably to another constant type error, maybe\n#define LOSS 850000 should be\n#define LOSS 850000.0 to make it work.\nLooking to borrow a Pi to debug, that might help too ;-)\n. @plietar I've added mach timing support. Well, at least I tried to, zero experience with OSX... \nWould you -or anyone else for that matter- mind trying how far I got it right and report back?\nFor now, it does not get configured in automatically yet, it requires a manual hack to do so:\nadd #define MACH_TIME to config.h after you've run ./configure\nThanks a lot.\n. Looks like you're having alsa buffer underruns, hmmm. Are you seeing the same if you lower the verbosity to -vv -v or even w/o logging?\n. @mcantarutti can't reproduce the issue I'm afraid: the dmix sink work fine here. so it might be specific to you alsa setup.\n. @abrasive things are spread out in 16 commits right now, I'm guessing this should be reduced to 5-6 aptly commented commits - or you want everything squashed down into one commit? After that is done, I'm at the bottom of my to-do list\napart from:\n-OSX support: need testers\n-verify the default delay: working on testing on a couple of different machines.\n@BewickPlace should compile/work on a Pi out-of-the-box now.\n. @therealmuffin I forgot to include the config header.... could you give it another go?\n. looks like there are no timing packets coming back from iTunes. hmmm, is iTunes running on a machine with a firewall?\n. Thanks for confirming!\nCould you post the output from the./configure and make command?\n. > Seems like the RECORD request is missing the RTP-Info statement...\nyes, that would be my guess too. Seems like the protocol is not implemented the same way on IOS products. :-( I wonder if RECORD contains no usable header at all or if it just has another name.\n. > A condensed patchset would be ideal, if you have the time.\nCompacted the commits to 6+1\n. Really need to have a look at the network traffic between iTunes and shairport-on-OSX to figure out where (and why) the timing loop is broken...\nIf someone could provide a 5-10s wireshark capture, that would be really helpful.\nThanks in advance!\n. @therealmuffin cool, thanks! this is exactly what I need.\nthe dump does not show any timing packets from shairport to the client. that means things break from step one :-)\nThat's is odd; the log showed that the timing thread is sending packets to the socket, but there's no packets on the network. that kinda smells like a security thing.\n. ...and so the reverse engineering continues ... :-)\nThanks for looking into this!\n\nTime sync however is slightly different - from iTunes the first data packet after a time sync has the same timestamp (and we use it to mark sync mode as NTPSYNC). From the iPad mini the timestamp on the audio packets is only identical on the very first frame - we need to determine the best approach to this.\n\nLet me see if I get this straight:rtp_tsp == rtp_tsp_sync isn't happening after the first sync, I'm assuming it's rtp_tsp_sync that is not advancing? Staying at the initial value I guess?\nMaybe a short -vv log snippet could clarify things.\n. So: the IOS clients do everything right, except that the syncs do not convey sync information about the first sample in a data packet. The sync'ed sample could be anywhere in a data packet.\n...Would this be a good explanation on what is going on?\n\nInterestingly rtp_tsp_sync is in advance of the rtp_tsp_sync for one or two packets each time - just never the exact same apart from the very first packet.\n\nI don't quite get this, could you elaborate?\n. Thanks for the log, I think there is enough here to work out a solution...\n. Hmmm, it seems odd that with IOS devices RTP ticks do not match with samples. The whole point with RTP is precisely that equivalence. Then again, without the hardware, one cannot tell.\nI think I will lay it to rest for a while and see if I can arrange a debug session with a friend who has both iPhone and an AirportExpress. :-)\n. ...on second thought, as they say the proof of the pudding is in the eating:\n@BewickPlace  Could you check if these last commits work for you?\nIf no RTP-Info header is found in the RECORD call, shairplay goes into a loose mode (aka IOS mode):\n    - start the receive queue in SIGNALLOSS mode (not bother about the first seqno)\n    - stick SYNC to the 'next' data packet (not bother about matching RTP-timestamps)\nIn other words, it implements your conclusion. tries to at least. :-)\nI guess I want to know if:\n    - it starts playback\n    - remains in sync with the IOS device's playback long term (>1/2h)\nIt probably won't solve the pauze/resume thing, but I want the 'normal' operation nailed down first.\n. @BewickPlace Thanks for testing. I'm not sure what the IOS clent does or does not support, but seems you covered most of it. One more thing though: is pause/resume working?\n. @greend139  , @BewickPlace  thanks for testing! As I have limited HW to verify on, it would be helpful to also report the HW/OS/sink combination shairport is running on too. That way I can keep track on where the blind spots remain - testing wise. thanks.\n. Running on OS X probably means using the libao sink. Unfortunately, libao does not provide a way to report back the actual playback delay for the samples we put in. shairplay will try to estimate the depth of the playback buffer instead.\nBottom line: on OS X you will not get any better timing accuracy than current master.\nThe libao case might be improved by some fine tuning, but the best way to get accurate timing on OS X is to implement a native Core Audio sink.  I don't have that on my to-do list though: don't have an OS X system.\n. @therealmuffin there's a fix in for OpenBSB that fixes a problem similar to what you saw... Could you check if it works for you too?\n. @therealmuffin could you give it another spin? It will still terminate, but now the output should help to figure out if I'm on the right track or not.\n. @therealmuffin Good stuff! Looks like it is indeed the same issue as on OpenBSD... sendto() saying 'Invalid argument'. Odd that the fix does work for you though.\nOh well, at least I know what read up upon ;-)\n@abrasive Another odd thing: the same sendto() call is used in the 'resend' function, which has been in master forever. All I did now is make it yell when it fails. I bet it has been failing in master silently ...  :-) on OS X that is.\n. @therealmuffin could you give it another go and report the results/log? Thanks!\n. @therealmuffin Wow, great! Still need to clean things up a bit but this is great news. Thanks\nI'll have a look at the glitch thing too, good feedback.\n@abrasive seems I've got the sendto() issue nailed down :-)\n. > One small issue I haven't noticed before: when switching clients or when disconnecting and connecting the same client it seems the buffer from the previous session get pushed to the pcm device creating a 'not so nice' glitch, a pause for the buffer to fill, and then the actual audio.\nhmmm, can't really reproduce... so attempting a blind fix\n@therealmuffin please give a a spin?\n. hmmm, on second thought, there are actually two potential fixes in here:\nfirst shutdown player, otherwhise this hangs shairport on OpenBSD     e61eda9\nand\nglitch fix trial, mutex in put_packet                 d427c9d\ncould you first try without this last commit?\n. hmm, I'm wondering if the glitch is audio that was already in the sink's buffer.\n@therealmuffin Are you seeing - err hearing, the same with master? also, just to confirm, this is on OS X, right?\n. >  I'm pretty sure it's actually the last packet in the pre-flush stream\nno, contrary to some unofficial documentation floating around the web, it is the first in the post-flush:\nthe log snippet below should show that seqno 32509 (0x7EFD) is in the flush command, and it is also the fist post-flush packet (hence the sync packet)\nreceived request: FLUSH rtsp://192.168.3.10/3484715325 RTSP/1.0\n    CSeq: 6\n    Session: 1\n    RTP-Info: seq=32509;rtptime=4038997961\n    User-Agent: iTunes/10.5.3 (Windows; Microsoft Windows XP Professional Service Pack 3 (Build 2600)) AppleWebKit/534.52.7\n    Client-Instance: 6F0BB90811FE51C2\n    DACP-ID: 6F0BB90811FE51C2\n    Active-Remote: 3436477073\nReceived seq: 7EFD, rtptime: 4038997961\nReporting RTP-Info: rtptime=4038908201\nsending response: RTSP/1.0 200 OK\n    CSeq: 6\n    Audio-Jack-Status: connected; type=analog\n    RTP-Info: rtptime=4038908201\nlate packet 7EFC (7EFD:7EFC)\n.......there's some pause time here......\nSync packet rtp_tsp 4038997961\nSync packet ntp_tsp 2208999055447755\nPacket for with sync data was sent has arrived (7EFD)\nfound good sync (7EFD:7EFD) sync: 2025936\nab_buffering denotes that receive buffer is filling up to a sane level\nplayer BUFFERING while ab_buffering, player SYNCING between BUFFERING and playing out real audio, ie running up to the first sync point.\n\nI'm a little confused (after an admittedly quick scan).\n\nnote to self: code needs more comments\nI actually think the glitch is due to the playout buffer not being drained when we receive the RTSP FLUSH command. Normally the sink's drain command is being called in the stop() function. libao does not provide a drain() command, like alsa, pulse etc. do. So it is not due to OS X per s\u00e9, but rather libao\n. @mikebrady seems the time is right to add time-synced playback to shairport :-) Finally got around to look into your code...\nLike you I noticed the first sync always seemed to be off, I always assumed I had some weird off-by one error in my code, but never quite figured out where. Never occurred to me the sync itself was off by one ;-)\nAnyway, bumping the first sync does indeed straighten things out. Thanks for giving me the insight!\n. @BewickPlace See if it is ok now?\n. To be honest, the code was incorrect, so thanks for reporting ;-)\n. I think I'm about done here, so I cleaned up the patch set a bit:\n- rebased on current master (26e9cadd82), which was a bit of a challenge due to some conflicts\n- extracted some patches that are not needed for this feature, it is just stuff I ran into while developing this. these are marked by 'fix:'.\n@abrasive Could you have another look to see if you'd like to see stuff changed? Also, I'm not sure on how you would like to handle the 'unneeded' patches - separate pull requests?\n. Minor update: added another fix and added delay reporting to the sndio sink.\n. Fixed the memory weirdness...\n@yenchee1970 could you post a log with -vv of the first 6s of playback and then another 3s of the 'stable' playback? also, what sink is being used, I presume ALSA?\nThanks.\n. @yenchee1970 the usb DAC just has a very deep buffer of about 2.3s, instead of the usual .25s. This means playback is bound to start too late.\nI guess the sink initialiser needs to set this buffer to some sane value instead of going with the default.\nStay tuned...\n. > the usb DAC just has a very deep buffer of about 2.3s\nThat should be 2.5s....\n@yenchee1970 as a test, could you try with -t 3000 That sets the play out delay at 3s and should allow shairport to start normally.\nSee if it still the playbackrate settles down faster (it should not have to catch up now)\n. @yenchee1970 so my theory is right, cool\n\nI set the period to 4410\n\n64 is indeed way too small... \nI picked 2048, because it's a nicer number :-) It doesn't matter too much, I guess\nIt also gives a delay close to what I've seen a couple of applications aim at.\n. Looking at how projects like XBMC, Pulse, VLC set up their alsa sink, this current set up is too naive, or they are grossly over-engineering...\nThey all seem to think along the same lines and get a pretty solid result, I believe.\nSo I'll try to plug in that logic. \n. @BewickPlace , @yenchee1970 please evaluate?\nnote: Debug level is still set at 1, so use -v, will change to 3 when this is working well\n. > We're talking about fixed 16/44,1 frequnecy here\nUnfortunately, that is not the case. Neither the local sound card, nor iTunes play out at exactly 44100.000...Hz. The number of samples that iTunes transmit will never be the same as the number that need to played out to keep everything in perfect sync.\nIn other words, creating extra samples or skipping samples is a necessary evil.\nThis is not unique to shairport, any RTP based system needs to do this. Unless an Airport has some kind of specialty DAC with adjustable playout-rate, even an Airport does this. The only reason you do not hear it, is because it has a refined re-sample algorithm.\nHope that makes it clear.\n. to narrow down this thing: please comment out\nbf_playback_rate = 1.0 - (sync_time_diff / LOSS);\nplayout rate stays at 1.0 that way; that should make sure no stuffing is going on.\ndoes this make any difference?\n. > I would rather miss a sample/add a sample instead of resampling.\n@mantheman  That is the default in shairport, and I'm pretty sure that is the noise you're hearing. Good ears BTW, I needed the 1kHz sine + headphone to notice. But then again, I've been mostly developing this on a noisy commuter train.\n\nshairport has also always supported libsamplerate for those who have cycles to burn and feel they can't tolerate stuffing.\n\n@abrasive seems this option is broken:\n- doesn't get configured\n- player.c does not include config.h\n- gives a core dump at run time.\nso, I'm pretty sure no-one uses it ;-)\n@yenchee1970 the noise is present in master too, but since in master the regulation is a bit gentler, it tends to come up more slowly\nAnyway, the noise doesn't seem to be a straight bug, but I'll see if I can ease the pain somehow.\n. > how big does the rate mismatch have to be for it to become noticeable?\nI think it depends more on the programe material than on the rate mismatch. On a 1k sine it is easy to pick out, in fact, I can hear each and every inserted/deleted sample. They sound like tiny clicks.\nOn 'normal' material I cannot hear it, but I'm using fairy non-critical material.\n\nusing resampling just for that buffer\n\nyes, this seems the best approach.\nAlthough making sure current algorithm picks low level samples instead of random ones might help too\n. @abrasive \nA quick hack shows that samples chosen because they are close to their neighbor (in amplitude) do produce less bright clicks. Selecting samples close to zero does not yield improvement. On a sine that is.\nedit: plots are obtained by hard coding bf_playback_rate = 1.001;\n random:\n\nequal neighbor:\n\nminimum:\n\n. Rebased to current master (409abe5d09952e14d05db2728b7e4d0a5ec39ecb)\n. @abrasive , @mikebrady , @yenchee1970 , @mantheman \nhttps://github.com/Nachtzuster/shairport/tree/sox_stuff\nis a fork of the sntp branch is which I attempt to replace current rather blunt stuff algorithm, by\n\nusing resampling just for that buffer\n\nI get a pretty smooth result already, without much tweaking.\nLet me know what you think....\n. @mantheman it is indeed not bit perfect, but, like master/sntp, for most setups 99+% of the time, it will be.\nMost of the time the samples just get passed along. But to keep in sync, shairport will, now and then, need to extend a 352 sample packet to 353 or squash down to 351. This is still the same between master and this. This is where the bit perfection is lost.\n- master/sntp will interpolate two samples to get to 353 or delete one to get 351.\n- This branch will use soxr to stretch 352 to 353 or squash to 351.\nlibsamplerate is needed because of two helper functions, the soxr code example this is based upon is using these, so I am too ;-)\nlibsamplerate could be designed out, I think\n. > libsamplerate could be designed out, I think\ndone\n. I've been working on improving playback timing accuracy/stability. These last two commits do just that, but are still work-in-progress...\n- ntp drift estimate could probably be simplified\n- Current P controller for playback_rate should probably be replaced by a proper PI(D)\n. The clock offset algorithm could still use a bit more work, but I wanted to show the performance of current code with some graphs. these are from a 260s run. The scale is in us.\nFirst is the jitter, ie second derivative\nThe raw input's rms value is 1480\nThe code reduces that to 94, that is the 'out' trace\n\nSecond is the output normalized against the raw input, tho show the tracking.\nIdeally, the trace should be nicely centered around the x-axis. The help gauge that, I added a trend line. (black)\n\n. ",
    "MohammadAG": "Hey, this looks promising!\nUnfortunately, it segfaults on two machines, (32-bit and 64-bit).\nI enabled debug logs in common.c, here's a log http://pastebin.com/raw.php?i=FhDyikPg\nI can't seem to figure out how to get debugging symbols compiled, so logs from gdb would be useless.\nLet me know if you need any more info.\nOh, and it failed to get compile on the 32-bit one with undefined reference to `clock_gettime', I worked around that by adding -lrt.\n. Here's a log with a backtrace then, thanks.\nhttp://pastebin.com/raw.php?i=EPRNNmsp\nEdit: okay, I've debug into the code more, it seems like this issue happens when neither alas or pulse audio are there.\n. Hi,\nYup, you're right (I guess you didn't see my edit above :p)\nAnyway, the issue now is that shairport is now ahead of my Mac (which is sending the audio).\nShould it be doing that? I'm trying to find the right value for config.delay, just in case it's the reason this is happening.\nAnother edit: 1750000 seems to be perfect.\n. ",
    "arodd": "I would like to express my interest in the functionality.   Originally I was going to offer to help but it looks like the learning curve on the audio areas are pretty steep and it will probably take me awhile to get into understanding how all of this works.  I'm thinking the only way to get synchronous whole home playback when paired with AirFoil and matched to other apple and licenced airplay devices is with time synched vs. buffered playback.   I have all of the airport express hardware to not care, but think that this project would really kick off in embedded applications if the time synchronized feature was available.  I want to build an embedded device that has airplay/google cast/and bt 4.0 incoming playback support with automatic handoff between protocols.  Then I want to make an iOS/Android app that will let you create custom \"zones\" with your embedded devices paired in different combos.   IE:  Living Room + Kitchen = Zone A and then it would create services for AirPlay/GoogleCast.   Basically an Audio only version of the AirPort Express with other protocol support and Android NFC pairing for BT.  Your project is a great foundation in making something like that exist.\n. ",
    "BewickPlace": "This is a nice piece of work and I'm really excited to see it coming through.\nI've only had a quick look at it and realise there are couple of parts which are still being tuned so I'd just add two comments at this stage:\n- the delay default required by my airport express is approx. 23000000\n- config.start_buffer_size is used in a couple of places to determine the buffering effect.  This could\n  be set with the calculated buffering level or it's use should be re-evaluated.\nI'd be happy to soak test the timing/sync algorithm when it's refined.  I run multiple Pi based Shairports plus a couple of airport expresses in a domestic environment.\n. Had another play with this tonight and it works quite well for me, plus when combined with my suggested refinements of resync and retransmission  (  #307 / #310 ) I can get a good stable operation.\nJust a couple of issues came out on the Pi:\n- LL casting of the constants in the time algorithms is required (otherwise time goes negative).\n- ()s are required in the get_delay return statement to ensure precedence (otherwise this goes negative)\nThanks again for the good work.\n. I've spent some time on this today, looking at general performance together with implementing my #307 #310 changes as required.\nRegarding the rate control, I found the algorithm was divergent on my Pi, with the extremes of the error growing over time.  I thought I might try copying the existing biquad algorithm, but then realised this wasn't necessary as \"sync_time\" is proportional to the error and by altering the playback rate by simple linear function of this I achieved a very stable sync.\nBy taking elements of #307 and #310 updates relevant to the new buffering approach I have now not only been able to get rapid auto re-sync after underrun, but also achieve good synchronisation between the impacted device and other devices that are playing.\nOne other change I made was to force all synchronisation to start from a timestamp - the \"Ouch!\" warning - as I found this was a repeatable situation when selecting the shairport device (on iTunes) when itunes was already streaming to another device.\nThe overall package is a very pleasing step forwards.\nI would offer up my changes but am unsure how to push them back to someone else's fork.   Do let me know.\n. Strike most of my comments from above.  I've just discovered that you updated the files after I'd pulled down a close and started trying it out.  I haven't looked closely at your changes but a couple look very similar.  I'll take a closer look when I have time.\n. I agree great work!\nHave looked at it tonight and my comments above re the Ouch warning and the rate control still stand.  So I pulled the changes into a branch off my fork and reimplemented my upgrades albeit on your slightly changed approach to resyncing.  There are also a couple of tweaks tightening the resend and buffer handling.  You can see this on my sntp branch. \nI hope the changes are something you want to take on board.\nAs I said the results are really pleasing.\n. Thanks for your help on this.  I've been using my build of this (which is Pi based) over the last week or so and it remains good.  I've now scaled this up with multiple \"rooms\" (devices) playing simultaneously.  This is generally fine but I do get the occasional drop out.  This is caused by the Pi wifi adapter!! (any help on this gratefully received) but the seamless in-sync recovery now does a excellent job for me.  I posted up a couple of tweaks to the advance packet handling yesterday.\n. I've just come to realise that direct Airplay from my IOS devices (iPhone/iPad mini) as opposed to iTunes doesn't work.  The symptoms are the same no RTP-info statement in the RECORD request.  I can get this set up to work just by allowing handle_record to complete with success, however I don't yet know what other elements of the time syncing may be broken.\nI intend to do a bit more digging tomorrow and will advise on what I find.\n. OK, have spent some time this morning looking at this with the following results:\n- RECORD (on my IOS sources) doesn't include RTP_Info:  Instead these devices send a FLUSH before the start of play which does include the RTP_Info data including start sequence number.  Thus it is safe to always respond OK to the RECORD only processing RTP Info if available.\n- Timing packets are both sent and received\n- Time sync however is slightly different - from iTunes the first data packet after a time sync has the same timestamp (and we use it to mark sync mode as NTPSYNC).  From the iPad mini the timestamp on the audio packets is only identical on the very first frame - we need to determine the best approach to this.\n- When we pause on the iPad we get a FLUSH, but we also continue to get audio packets (silence - I think) and so our code resyncs and plays this - not a problem - until either a TEARDOWN or pause is turned off when the data stream reverts to full audio (no new FLUSH).\n  [Note:  this did uncover a slight timing issue in buffer_get_frame where the test on ab_buffering must be performed when holding the mutex otherwise it is possible for flush to come along and reset the buffer under our feet].\nThe main issue to be resolved is how to handle the different timing behaviour - I've tried out a simple workaround setting NTPSYNC when the timestamps are +/- 200 ticks of each other, however I'm not certain if there is a more appropriate approach.\nLook forward to your feedback.\n. You're close!  \nThe : rtp_tsp == rtp_tsp_sync  isn't happening, but everything does move on correctly rtp_tsp in each message and rtp_tsp_sync on each timing message.\nI would put up some trace, but I'm just using my setup to resolve a totally different (non-shairport) issue.  I hope my description is clear.\nInterestingly rtp_tsp_sync is in advance of the rtp_tsp_sync for one or two packets each time - just never the exact same apart from the very first packet.  I assume this is all down to packet priorities etc.\nHence the nature of my workaround is to assume a \"near enough\" sync @ +/- 200 ticks.\n. Best if I do provide some debug.  Below is trace isolating the relevant debug statements show rtp_tsp and rtp_tsp_sync and the difference between the two.\nFrom iTunes:\nListening for connections\nFri Apr 25 07:54:47 2014 DEBUG: Sync packet rtp_tsp 1465438258\nFri Apr 25 07:54:47 2014 DEBUG: Packet for with sync data was sent has arrived (3E35) 1465438258:1465438258 diff:0\nFri Apr 25 07:54:47 2014 DEBUG: Packet no sync (3E36) 1465438610:1465438258 diff:352\nFri Apr 25 07:54:47 2014 DEBUG: Packet no sync (3E37) 1465438962:1465438258 diff:704\nFri Apr 25 07:54:47 2014 DEBUG: Packet no sync (3E38) 1465439314:1465438258 diff:1056\nFri Apr 25 07:54:47 2014 DEBUG: Packet no sync (3E39) 1465439666:1465438258 diff:1408\n...\nFri Apr 25 07:54:48 2014 DEBUG: Packet no sync (3EB2) 1465482258:1465438258 diff:44000\nFri Apr 25 07:54:48 2014 DEBUG: Packet no sync (3EB3) 1465482610:1465438258 diff:44352\nFri Apr 25 07:54:48 2014 DEBUG: Sync packet rtp_tsp 1465482962\nFri Apr 25 07:54:48 2014 DEBUG: Packet for with sync data was sent has arrived (3EB4) 1465482962:1465482962 diff:0\nFri Apr 25 07:54:48 2014 DEBUG: Packet no sync (3EB5) 1465483314:1465482962 diff:352\nFri Apr 25 07:54:48 2014 DEBUG: Packet no sync (3EB6) 1465483666:1465482962 diff:704\n...etc\nFrom iPad Mini:\nListening for connections.\nFri Apr 25 08:11:01 2014 DEBUG: Sync packet rtp_tsp 1129224321\nFri Apr 25 08:11:01 2014 DEBUG: Packet for with sync data was sent has arrived (FC03) 1129224321:1129224321 diff:0\nFri Apr 25 08:11:01 2014 DEBUG: Packet no sync (FC04) 1129224673:1129224321 diff:352\nFri Apr 25 08:11:01 2014 DEBUG: Packet no sync (FC05) 1129225025:1129224321 diff:704\n...\nFri Apr 25 08:11:02 2014 DEBUG: Packet no sync (FC81) 1129268673:1129224321 diff:44352\nFri Apr 25 08:11:02 2014 DEBUG: Packet no sync (FC82) 1129269025:1129224321 diff:44704\nFri Apr 25 08:11:02 2014 DEBUG: Sync packet rtp_tsp 1129269306\nFri Apr 25 08:11:02 2014 DEBUG: Packet no sync (FC83) 1129269377:1129269306 diff:71\nFri Apr 25 08:11:02 2014 DEBUG: Packet no sync (FC84) 1129269729:1129269306 diff:423\nFri Apr 25 08:11:02 2014 DEBUG: Packet no sync (FC85) 1129270081:1129269306 diff:775\n...\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFA) 1129581781:1129539186 diff:42595\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFB) 1129582133:1129539186 diff:42947\nFri Apr 25 08:11:09 2014 DEBUG: Sync packet rtp_tsp 1129584181\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFC) 1129582485:1129584181 diff:-1696\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFD) 1129582837:1129584181 diff:-1344\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFE) 1129583189:1129584181 diff:-992\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (FFFF) 1129583541:1129584181 diff:-640\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (0000) 1129583893:1129584181 diff:-288\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (0001) 1129584245:1129584181 diff:64\nFri Apr 25 08:11:09 2014 DEBUG: Packet no sync (0002) 1129584597:1129584181 diff:416\n...\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (01FB) 1129762357:1129719126 diff:43231\nFri Apr 25 08:11:13 2014 DEBUG: Sync packet rtp_tsp 1129764108\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (01FC) 1129762709:1129764108 diff:-1399\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (01FD) 1129763061:1129764108 diff:-1047\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (01FE) 1129763413:1129764108 diff:-695\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (01FF) 1129763765:1129764108 diff:-343\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (0200) 1129764117:1129764108 diff:9\nFri Apr 25 08:11:13 2014 DEBUG: Packet no sync (0201) 1129764469:1129764108 diff:361\n...etc\niTunes always achieves a zero diff on the next packet, iPad mini gets zero diff on the first packet but then only close to zero within a few packets.\nThe consequence of this is we do not start playing after a pause as we rely on sync being established.\nAs I posted previously, I have a simple workaround on achieving a \"near enough\" sync (+/-200 ticks) but I'm not sure that this is the most appropriate solution.\nI hope this clarifies.\n. Well I've convinced myself that the \"near enough\" approach is incorrect having put the system under some stress and forcing resync's.  It would appear that it really should use the next audio packet.  The question remaining is whether the delta in rtp/rtp sync timestamps should be used to adjust the ntp timestamp - having tried to read behind the protocol I still can't get my head around what the right answer is.  We need an expert!\n. Well, as you said the reverse engineering continues....\nI think I've worked out what is going on:\n- on iTunes the time sync and audio packets rtp time represents the number of audio frames sent and they progress at exactly the same rate; \n- on my IOS device (ipad min/iPhone) the sync packet rtp time appears to be derived based on the time relative to the start of the audio stream ie the ideal number of audio frames sent (audio remains as per iTunes the actual number of frames sent).  This allows a slight drift in the sync delta which we observe.\n- on pause IOS devices flush and then continue sending silence, and on play revert to audio - this again causes a slight drift which again we can see (with appropriate debug). [absolute time sync rtp time continues, but we send slightly fewer than anticipated in the time, so the sync time appears to move ahead of the audio time - seen as a -ve sync difference in the debug]\nMy conclusion to this is:\n- we can safely ignore the actual rtp time of the sync packet, what is important is that it contains the ntp time of the next audio frame;\n- we should therefore sync on the next audio packet without the need to adjust the ntp timestamp.\nWould help to know if you draw the same conclusion.\n. I can confirm the commits work to allow my iPad mini or IPhone to play via Airplay.  These devices don't support (or I don't know how) to stream to multiple speakers so time sync is a non-issue.  That said I can see the basic mechanics continue to function so I'd expect sync to be fine.\n. Pause/Resume is fine, both for short breaks and long breaks (with teardown).\n. @mcantarutti are you working off the latest commits, because we have just addressed an issue in this area within the last couple of days.\nThe problem was that in the sntp version we would generate an error response if the RECORD statement did not include the RTP-info.  You can see exactly that behaviour in the logs you've provided.\nHopefully you can retest and confirm that this works for you?\n. Is it just my setup (raspberry Pi), but the current version of the software seems to need a config.delay of circa 1850 rather than the 2205 default to be in sync with an airport express.  I'm sure this is a new characteristic as I've been using 2205 for the last few weeks.\nCan anyone else comment?\n. Well I've managed to answer my own question.  I've been running my own fork as I have a number of minor improvements to the resend algorithm and merged the sntp fork thus picking up a couple of changes from the original implementation.\nThe problem lies in get_delay (audio_alsa) as on the Pi this needs a couple of brackets to calculate correctly and stay within the range of the long type:\nreturn (long long) (frames * (1000000L /device_sample_rate));\n. PS now back in sync @ 2205 delay.\n. If you could start with a little more information on your set-up and the exact nature of your problem.\nA level 1 debug log would be useful capturing the initial start of playback. \nRegards,\nFrom: Stefan D. [mailto:notifications@github.com] \nSent: 15 May 2014 18:43\nTo: abrasive/shairport\nCc: BewickPlace\nSubject: Re: [shairport] RFC: time synchronised playback (#296)\n@BewickPlace https://github.com/BewickPlace  I'm running your fork right now, it works flawlessly with my iOS 7 iPhone 4, but I'm still experiencing some delay on my MacBook running OS X 10.9.2. Please let me know what information you need to debug, I'd be happy to help! Thanks for all the effort by the way :)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/abrasive/shairport/pull/296#issuecomment-43241560 .  https://github.com/notifications/beacon/6917759__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcxNTc5NDk3NSwiZGF0YSI6eyJpZCI6MjQ3MzczNDF9fQ==--4ae67d49bfaef92a6720beeda8c0b924c538564d.gif \n. I've taken the updates and merged them into my fork which I use on the PI, but this leads to a slight problem.\nI get a fatal error (9) on teardown, which appears to be caused by the send timing thread attempting to send rather than shut straight down when requested.\nSee log below:\nMon May 26 13:28:29 2014 DEBUG: Current time s:3346 us:519291\nMon May 26 13:28:32 2014 DEBUG: received request: OPTIONS * RTSP/1.0\nMon May 26 13:28:32 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:32 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:32 2014 DEBUG: Current time s:3349 us:520709\nMon May 26 13:28:34 2014 DEBUG: received request: FLUSH rtsp://192.168.4.10/3483959301 RTSP/1.0\nMon May 26 13:28:35 2014 DEBUG: Received seq: 0D6C, rtptime: 269021253\nMon May 26 13:28:35 2014 DEBUG: Reporting RTP-Info: rtptime=268962117\nMon May 26 13:28:35 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:35 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:35 2014 DEBUG: Current time s:3352 us:521864\nMon May 26 13:28:38 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:38 2014 DEBUG: Current time s:3355 us:849588\nMon May 26 13:28:41 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:41 2014 DEBUG: Current time s:3358 us:850681\nMon May 26 13:28:44 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:44 2014 DEBUG: Current time s:3361 us:851655\nMon May 26 13:28:46 2014 DEBUG: received request: TEARDOWN rtsp://192.168.4.10/3483959301 RTSP/1.0\nMon May 26 13:28:46 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:46 2014 DEBUG: RTSP shutdown requested\nMon May 26 13:28:46 2014 DEBUG: closing RTSP connection\nMon May 26 13:28:46 2014 DEBUG: RTP thread interrupted. terminating.\nMon May 26 13:28:46 2014 DEBUG: Time receive thread interrupted. terminating.\nMon May 26 13:28:46 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:46 2014 DEBUG: send packet failed in send_timing_packet\nFATAL: error(9)\nShutting down...\nMon May 26 13:28:46 2014 DEBUG: avahi: avahi_unregister\nMon May 26 13:28:46 2014 DEBUG: shutting down playing thread\n. The issue is simple.  The time receive thread closes the socket before time send has terminated.  It then gets a Bad File Descriptor error on use.\nThere are number of solutions to this but we'd better let @Nachtzuster determine what he feels is best.\n. This looks like another OS-X \"feature\" as the behaviour of (OS-X) iTunes appears different to other platforms or indeed iPhone or iPad.\nI don't have a fix yet, but my observations are as follows:\n- the RECORD statement doesn't contain RTP-info, as we know\n- in normal operation iTunes doesn't use the flush command unlike iPhone or iPad\n- a FLUSH is issued with seqno 82BD\n- after the flush a stream of packets continue to be received - not just one\n- the stream (82BD:830E) generates good sync on 830E\n- this does not complete buffering (and so nothing is played here)\n- a resend of 8316 is requested - probably due to the advance arrival of 8317 (similar seen earlier)\n- still nothing should be played so the ring buffer should have 830E:8317 at least and is still buffering\n- we then see the TEARDOWN\n- when the new connection is created we start up as normal\n- note ab_read/ab_write will be carried over with the old values\n- we enter the play loop but silence should be played\n- the buffer is reinitialised and set for resync (init_buffer & ab_resync) audio frames set not ready\n- a RECORD is received which causes a player_flush which will now reset ab_read/ab_write\n- we find good sync at 4AF5 but without \"picking up first seqno\"  (probably debug level)\n- we are still not at the point something should be played\nI'm sure the answer is in here somewhere, but at the moment I need to ponder....\n...any good ideas appreciated.\n. As part of my project to build a music server on the Pi I've been trying out Shairport in combination with the improved forked-daapd rather than iTunes.\nI've noticed  a minor glitch since the revision to socket closures where Shairport sends an extra timing request packet after teardown has been responded to which forked-daapd sees as an error.\nMon Jun 16 15:50:04 2014 DEBUG: Current time s:1594 us:21149\nMon Jun 16 15:50:07 2014 DEBUG: Current time s:1597 us:22423\nMon Jun 16 15:50:10 2014 DEBUG: Current time s:1600 us:23898\nMon Jun 16 15:50:10 2014 DEBUG: received request: TEARDOWN rtsp://192.168.4.12/1277463484 RTSP/1.0\nMon Jun 16 15:50:10 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon Jun 16 15:50:10 2014 DEBUG: RTSP shutdown requested\nMon Jun 16 15:50:10 2014 DEBUG: closing RTSP connection\nMon Jun 16 15:50:11 2014 DEBUG: RTP thread interrupted. terminating.\nMon Jun 16 15:50:11 2014 DEBUG: Time receive thread interrupted. terminating.\nMon Jun 16 15:50:11 2014 DEBUG: Current time s:1600 us:437916\nMon Jun 16 15:50:11 2014 DEBUG: Time send thread interrupted. terminating.\nI'd appreciate it if you could make the necessary slight adjustment.\n. It's a 1 minute fix, to check for shutdown after the sleep statement.\n. Perfect.  Thank you.\n. @yenchee1970 not sure if this is your problem, but your dump has highlighted an error we introduced.\nThe extended bit tweak to ntp sync time meant we didn't actually play the first set of frames, but actually started from the next full sync packet.  I've addressed the issue in my fork.\nLooking at the dump this seems to cause us to get behind time and be forced to \"catch up\" with a playback rate of circa 1.05 which then takes time to settle.  This does not now happen in my setup.\n@mantheman I tried your suggested track, but maybe my ear couldn't pick it up.  It is possible that what you hear is the affect of skipping samples due to the above problem and it's impact on the playback rate at start up.  Perhaps you could try and advise.\n. I presume we have to be a little careful here as differing hardware will support differing buffer configurations.  The standard audio on my little Raspberry Pi for instance will not support 4x buffer at 4410 period size.  Attempting this and the buffer ends up only 4412!\nOn the assumption that a larger period size the better and with an aim to always have 4x buffer, I have adjusted my fork to scale the period size depending on max buffer supported starting at 4410.\nI'll run this on my setup for the next few days to ensure there are no hidden consequences.\n. That sounds like the best answer.  Thanks a lot.\n. Inspired by the above issue/posts and with a philosophy of less is more I've taken the opportunity to revise the rate matching algorithm to take advantage of the fact that we have the actual sample delta from full sync.\nThe overall gambit was to reduce the number of corrections (stuffs +ve or -ve) we were making as I found on my Pi I was seeing 600+ corrections per million samples.  This clearly contributes to the noise issue.  Trying the @mikebrady fork, which has it's own matching algorithm I was seeing circa 180 corrections per million.\nFollowing some of the logic from @mikebrady and @yenchee1970 the revised algorithm uses the filtered sample error and determines required stuffs after applying a quadratic.  Minor stuffs are ignored although this has only marginal benefit, but may assist with keeping bit perfect playback in a suitably robust environment.\nThe impact on my Pi has been good, bringing corrections down to circa 120ppm or less, and with a sync error which typically stays within +/- 100 samples.\nThese were taken over a wireless network with iTunes on windows as the source.  For iPad/iPhone the deltas are significantly larger, but the improvement is comparable. \nI'd be interested to know how this performs on other platforms, please let me have your comments and thoughts.  I've just pushed the changes back to my sntp fork.\n. @mantheman could you identify the correction rate you are seeing and the spread of sync error - these are shown at debug level 1.\n. @mantheman thanks for posting that.\nI've since re-checked my build and can hear the distortion introduced even with minor amounts of stuffing.  I've since built in the libsoxr changes (including a couple of small fixes) and this works extremely well.  I use a Raspberry-Pi and as @yenchee1970 identified we have to run at a lower soxr quality setting.  I find this both eliminates the distortion and is sufficient for the Pi to continue to stuff at a maximum rate of 126 adjusted frames every ntp sync period (ie every frame) when it needs to.   I'm also re-tuning the rate matching algorithm as the new stuffing has some impact.\n@yenchee1970 was there a reason why you implemented the soxr using short to float rather than sticking with the short as per @Nachtzuster?\nUnfortunately the logfile itself is showing too much detail (level 2 or 3?) to determine the true stuffing performance on your platform. It only has one \"Playback: corrections\" debug statement which shows corrections (stuffs) @ 1766 ppm.  These show up about every 20 seconds and need themselves to be averaged.  Not to worry there is no necessity to look more closely at this.  I'll push the changes back to my fork in a few days once I'm happy with them.\n. For those that are interested my fork is now up to date with both revised rate matching (lower) stuffs and libsoxr stuffing using  @Nachtzuster's revised (short) implementation.  I've included simple parameterisation for libsoxr Quality as per @yenchee1970.\n. These aren't currently in  Nachtzuster's fork, however I have maintained my own fork which combines the two.\n. ",
    "mcantarutti": "Hi, I wanted to report my experience. I'm running the code in an olinuxino board (iMX233 454Mhz, 64Mb) with 3.14.0-1-ARCH linux with the integrated sound card. Transmitting from iTunes in a mac.\nAfter setting asound.conf to dmix and 44100 I was getting great results (with the master branch) for the first audio track, but if it keep playing the following ones, It started to increase the number of (++++++++) messages. If I restarted the track, it came perfect again, so there was some kind of accumulative problem with the playback rate I imagine.\nAfter trying with Nachtzuster branch, the transmission goes wild from the start.\nPlease find the output file here:\nhttps://www.dropbox.com/s/6ewaf8a93ey3j81/debug.txt\nDo you know what it may be causing it?\nthanks for your feedback and keep up with the good work.\n. yes\n. @Nachtzuster, I have detected a problem when trying to select the device as sound card from the mac rather than from the itunes. With the master it works. I have extracted the conversations with wireshark (first time using the program though..) I hope it's enough for addressing the issue, otherwise please tell me which information would be useful. Cheers on the good work.\nMASTER\nOPTIONS * RTSP/1.0\nCSeq: 0\nX-Apple-Device-ID: 0xd49a200000d6\nApple-Challenge: a0jCA9k7aXa/Nh05040NLA==\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nApple-Response: uSgsnoK6TnBEV4uCKN4jGe9yg78G3EFdEWStP8h7VGY6gHLQ3+rWbJkfYAbveyn5/Pohud558jHgn7NnkemGqayiQu7kdKF8d1l7pzJUTjGK0XIZe5mIg8OXoXtbC1Ws29rcXPg+/lr2CcVyEUqOV6QEtGf3dy278n2wlU7AaBRGdV8rtxPW5whmCemJm/NjKY/Kf3bALIZTM72+d8D+lJNhmloyJYCprAxSR7WOQ5tsQFZy7FVzCpn60uUfLtcaQttb62TRckSDJI8pGAQd07+XKvdEKnUsnwNJY6hN499oEB8xGevM42j9uarSzuZdGvegTvxneG6bwd3mar8Nsw\nCSeq: 0\nAudio-Jack-Status: connected; type=analog\nPublic: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS, GET_PARAMETER, SET_PARAMETER\nANNOUNCE rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/3142064095555897690 RTSP/1.0\nX-Apple-Client-Name: MacBook MC\nCSeq: 1\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nContent-Type: application/sdp\nContent-Length: 697\nUser-Agent: AirPlay/200.34.4\nv=0\no=AirTunes 3142064095555897690 0 IN IP6 2a02:a03f:14c7:7500:d69a:20ff:fe6c:9080\ns=AirTunes\ni=MacBook MC\nc=IN IP6 2a02:a03f:14c7:7500:d69a:20ff:fe6c:9080\nt=0 0\nm=audio 0 RTP/AVP 96\na=rtpmap:96 AppleLossless\na=fmtp:96 352 0 16 40 10 14 2 255 0 0 44100\na=rsaaeskey:fSHPla9G1R32uWcdPtHsmEZHKhN80eUicJg9nXl3wMjTG8jSVL4Em1Otb9wdEaWSx0m6ps+U6QzgUF45CKIKbuViYKz/3CdPfc3ArqPDlgNjqLI6DkhWoq4o3CcOB2VNmzgavuhY1VlCvppYTIZdSiq5Y2cSQr3oHq8heOB+QHi3HlcQ6rYR/oY2CpbtSIAS89K39tD5O9hz0Bc0VpdsfFoSPqVS9x9jYP88mXnBFLwLph665zm6WqMwK41HT0sYnzV/0MRntm0NM34bPCLpiAh4CTELmX7J0vgIArbQJlS2WO7rJcA/0fOKDZucHdNyTl8U9SAvuVMstQ5C2NvUEQ==\na=aesiv:TYpN/3MSf+yFMn5MZSY1nw==\na=min-latency:11025\na=max-latency:88200\nRTSP/1.0 200 OK\nCSeq: 1\nAudio-Jack-Status: connected; type=analog\nSETUP rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/3142064095555897690 RTSP/1.0\nTransport: RTP/AVP/UDP;unicast;mode=record;timing_port=55742;x-events;control_port=53676\nCSeq: 2\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nCSeq: 2\nAudio-Jack-Status: connected; type=analog\nTransport: RTP/AVP/UDP;unicast;mode=record;timing_port=55742;x-events;control_port=53676;server_port=39935\nSession: 1\nRECORD rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/3142064095555897690 RTSP/1.0\nRange: npt=0-\nX-Apple-Durations: b=1; c=10; au=145; an=141; sa=16\nCSeq: 3\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nCSeq: 3\nAudio-Jack-Status: connected; type=analog\nSET_PARAMETER rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/3142064095555897690 RTSP/1.0\nCSeq: 4\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nContent-Type: text/parameters\nContent-Length: 19\nUser-Agent: AirPlay/200.34.4\nvolume: -7.500000\nRTSP/1.0 200 OK\nCSeq: 4\nAudio-Jack-Status: connected; type=analog\nFLUSH rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/3142064095555897690 RTSP/1.0\nRTP-Info: seq=52010;rtptime=2238139260\nCSeq: 5\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nCSeq: 5\nAudio-Jack-Status: connected; type=analog\nOPTIONS * RTSP/1.0\nCSeq: 6\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 1695667333\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nCSeq: 6\nAudio-Jack-Status: connected; type=analog\nPublic: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS, GET_PARAMETER, SET_PARAMETER\nSNTP\nOPTIONS * RTSP/1.0\nCSeq: 80\nX-Apple-Device-ID: 0xd49a200000d6\nApple-Challenge: wKt85d+DuNaC7rL67bZ/Kg==\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 540178789\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nApple-Response: 50GavQPUGe5e4isrjDSu7iQxGKoYjLVLqKHHq9DbdElMTr6DDGT8lXG7pBBuHIpZdPq4itRXWwSVHw6+TjwHa8EKjGAJB4o7jkPF7kCQDS1W86DtD3ZzXuxL4v9RrJIPzA8jlEMPAflED7J9U58OKuX/aJ6wtAhF4K9hlvQItc9yHnFv5ttp3hguwtrn4kGMfoWyzHvDooN23aI4bXf9RcEZlZ28MK8GZ2dHYTnOYoAaG/oeUT4nEsjEal1d+7sIA5HBlNjasMnXizXc3fgGlSaxCuxi0U3zGhnjhuwtTXDrzfTx6E2ycRyxGdFJ88QHGZtYYH5b0qgz9G0nC07DQg\nCSeq: 80\nAudio-Jack-Status: connected; type=analog\nPublic: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS, GET_PARAMETER, SET_PARAMETER\nANNOUNCE rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/17843441130600615047 RTSP/1.0\nX-Apple-Client-Name: MacBook MC\nCSeq: 81\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 540178789\nContent-Type: application/sdp\nContent-Length: 698\nUser-Agent: AirPlay/200.34.4\nv=0\no=AirTunes 17843441130600615047 0 IN IP6 2a02:a03f:14c7:7500:d69a:20ff:fe6c:9080\ns=AirTunes\ni=MacBook MC\nc=IN IP6 2a02:a03f:14c7:7500:d69a:20ff:fe6c:9080\nt=0 0\nm=audio 0 RTP/AVP 96\na=rtpmap:96 AppleLossless\na=fmtp:96 352 0 16 40 10 14 2 255 0 0 44100\na=rsaaeskey:2Cyki40PHISiUjYFAt4xOBUN36ixfLXXE0KII3lGzZBwFYoU25yNbcXniWTCASWdxXeDYWF6uF/bSsHFZgDQarBsiLjuVyrgZ9FBnlWsSPjRYX1yPiYSp23BjOMAvGSg0znFQcAR1JR0HCwT1K9ugbxxkGnhurIBvk+/q0Hz0iVJsR09RKg1FKss5lDw1FkqbeaYp9x+GBNmaeTtf8raB+cihPOPyo+b4TQMSKeTPYYUFgxZePRNHuYSagLkNkUq6rbG6OujdH2d8M8qmOVTg4cSkrHA4x8Hgry+C2+Ly9dFY2M/PkR1pu/bKz3lKA4/kU3PnhOQ/yK3KTtx5crtyQ==\na=aesiv:D7uO4CqAEyuetiPEwQ9X/A==\na=min-latency:11025\na=max-latency:88200\nRTSP/1.0 200 OK\nCSeq: 81\nAudio-Jack-Status: connected; type=analog\nSETUP rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/17843441130600615047 RTSP/1.0\nTransport: RTP/AVP/UDP;unicast;mode=record;timing_port=50436;x-events;control_port=63504\nCSeq: 82\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 540178789\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 200 OK\nCSeq: 82\nAudio-Jack-Status: connected; type=analog\nTransport: RTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=46869;control_port=46869;timing_port=36859\nSession: 1\nRECORD rtsp://2a02:a03f:14c7:7500:4633:4cff:fe80:cccc/17843441130600615047 RTSP/1.0\nRange: npt=0-\nX-Apple-Durations: b=6; c=5; au=278; an=153; sa=851\nCSeq: 83\nX-Apple-Device-ID: 0xd49a200000d6\nDACP-ID: 454BB3D2292513C7\nActive-Remote: 540178789\nUser-Agent: AirPlay/200.34.4\nRTSP/1.0 400 Error\nCSeq: 83\nAudio-Jack-Status: connected; type=analog\n. Many thanks! it's working now.\n. Hello, I'm having trouble with line   \nrtsp.c:469 uint32_t vl = ntohl((uint32_t )(cp+off));\nwhich then occasionates a segfault with \nchar *val = malloc(vl+1);\nafter a couple of loops.\nI am running the code in a arm with arch.\nremoving the ntohl() seems to help but I've no idea which is the background problem...\nHope this helps.\nThanks!\n. ",
    "greend139": "Testing your branch, I cannot connect using IOS7.1(Error Below).  iTunes 11.1.5 works great!\nSeems like the RECORD request is missing the RTP-Info statement...\nThis is excellent work.  Thank You.\none joined\nnew RTSP connection\nreceived request: OPTIONS * RTSP/1.0\n    CSeq: 0\n    X-Apple-Device-ID: 0x8c58774fb400\n    Apple-Challenge: QKF2j4yeqD7qI66d3H/qcg==\n    DACP-ID: 97021F1CB4CA4FD8\n    Active-Remote: 1370471995\n    User-Agent: AirPlay/200.54\nsending response: RTSP/1.0 200 OK\n    Apple-Response: OTVXl6nwoIl1FOUqXYJ8Q3dmEBuBHjwDPcFOrwn+ltmOi6zn+f1sbLNrA7O+nqONspR//A+giFKNTUin+sWChvHTPpFB/HOSQetHbHW/szI+2iJTrg8ZFDWvLxlI2T99/s2LWMQkXFkD0w4l7bI0RCr5yrCi0mtAnSWnJ/wOAaXlTJ213PHM/MGrUXwmVY0WGF/UeJpgJxQcH9VIUzPk1dSCkxRwgbYuXp0v2tWvTXVUrnUG/dpMI+Bm1ruRCaByc/kMnjH0HlGVLOJttLstrSm4CD97D4R+nuvVjqGt9vtoHosajtmdl/J3OB467LeFUj49obOpjLf7ebW9Z0NJTg\n    CSeq: 0\n    Audio-Jack-Status: connected; type=analog\n    Public: ANNOUNCE, SETUP, RECORD, PAUSE, FLUSH, TEARDOWN, OPTIONS, GET_PARAMETER, SET_PARAMETER\nreceived request: ANNOUNCE rtsp://192.168.1.10/7216976225656654863 RTSP/1.0\n    X-Apple-Client-Name: iPhone\n    CSeq: 1\n    X-Apple-Device-ID: 0x8c58774fb400\n    DACP-ID: 97021F1CB4CA4FD8\n    Active-Remote: 1370471995\n    Content-Type: application/sdp\n    Content-Length: 646\n    User-Agent: AirPlay/200.54\nsending response: RTSP/1.0 200 OK\n    CSeq: 1\n    Audio-Jack-Status: connected; type=analog\nreceived request: SETUP rtsp://192.168.1.10/7216976225656654863 RTSP/1.0\n    Transport: RTP/AVP/UDP;unicast;mode=record;timing_port=56344;x-events;control_port=55372\n    CSeq: 2\n    X-Apple-Device-ID: 0x8c58774fb400\n    DACP-ID: 97021F1CB4CA4FD8\n    Active-Remote: 1370471995\n    User-Agent: AirPlay/200.54\nTransport:RTP/AVP/UDP;unicast;mode=record;timing_port=56344;x-events;control_port=55372\nrtp listening on dataport 47401, controlport 23004000 \nstarting player_play\nCurrent time s:1221410 us:184280\nbuffer size set to 184\nTiming packet ntp_ref_tsp 1221410184280\nTiming packet ntp_rec_tsp 2208992580933557\nTiming packet ntp_sen_tsp 2208992580933692\nTiming packet ntp_loc_tsp 1221410187620\nRound-trip delay 3205 us\nClock offset 2207771170747674 us\nntp: valid entries: 1\nntp: offset: 2207771170747674, d: 1\nsending response: RTSP/1.0 200 OK\n    CSeq: 2\n    Audio-Jack-Status: connected; type=analog\n    Transport: RTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=47401;control_port=47401;timing_port=33513\n    Session: 1\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.1.10/7216976225656654863 RTSP/1.0\n    Range: npt=0-\n    X-Apple-Durations: b=11; c=16; au=32; an=32; sa=36\n    CSeq: 3\n    X-Apple-Device-ID: 0x8c58774fb400\n    DACP-ID: 97021F1CB4CA4FD8\n    Active-Remote: 1370471995\n    User-Agent: AirPlay/200.54\nsending response: RTSP/1.0 400 Error\n    CSeq: 3\n    Audio-Jack-Status: connected; type=analog\nRTSP connection closed\nclosing RTSP connection\nshutting down RTP thread\nRTP thread interrupted. terminating.\nTime receive thread interrupted. terminating.\nCurrent time s:1221410 us:232171\nTime send thread interrupted. terminating.\nterminating RTSP thread\n. The commits work great on my IOS7  iPhone.  Sync works nicely from my 10.9 OSX iTunes to two instances of shairport with these commits, and an appleTV2. Been waiting for this for a long time.\nThanks!\n. I am noticing the same issue running on my linux boxes.  Happens using avahi, and tinysvcmdns.  Reverting before the sendto patches fixed the issue for me.\nMike\nOn May 26, 2014, at 9:51 AM, BewickPlace notifications@github.com wrote:\n\nI've taken the updates and merged them into my fork which I use on the PI, but this leads to a slight problem.\nI get a fatal error (9) on teardown, which appears to be caused by the send timing thread attempting to send rather than shut straight down when requested.\nSee log below:\nMon May 26 13:28:29 2014 DEBUG: Current time s:3346 us:519291\nMon May 26 13:28:32 2014 DEBUG: received request: OPTIONS * RTSP/1.0\nMon May 26 13:28:32 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:32 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:32 2014 DEBUG: Current time s:3349 us:520709\nMon May 26 13:28:34 2014 DEBUG: received request: FLUSH rtsp://192.168.4.10/3483959301 RTSP/1.0\nMon May 26 13:28:35 2014 DEBUG: Received seq: 0D6C, rtptime: 269021253\nMon May 26 13:28:35 2014 DEBUG: Reporting RTP-Info: rtptime=268962117\nMon May 26 13:28:35 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:35 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:35 2014 DEBUG: Current time s:3352 us:521864\nMon May 26 13:28:38 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:38 2014 DEBUG: Current time s:3355 us:849588\nMon May 26 13:28:41 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:41 2014 DEBUG: Current time s:3358 us:850681\nMon May 26 13:28:44 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:44 2014 DEBUG: Current time s:3361 us:851655\nMon May 26 13:28:46 2014 DEBUG: received request: TEARDOWN rtsp://192.168.4.10/3483959301 RTSP/1.0\nMon May 26 13:28:46 2014 DEBUG: sending response: RTSP/1.0 200 OK\nMon May 26 13:28:46 2014 DEBUG: RTSP shutdown requested\nMon May 26 13:28:46 2014 DEBUG: closing RTSP connection\nMon May 26 13:28:46 2014 DEBUG: RTP thread interrupted. terminating.\nMon May 26 13:28:46 2014 DEBUG: Time receive thread interrupted. terminating.\nMon May 26 13:28:46 2014 DEBUG: AF_INET6 defined\nMon May 26 13:28:46 2014 DEBUG: send packet failed in send_timing_packet\nFATAL: error(9)\nShutting down...\nMon May 26 13:28:46 2014 DEBUG: avahi: avahi_unregister\nMon May 26 13:28:46 2014 DEBUG: shutting down playing thread\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mikebrady": "Hi there. I've been working on this exact problem for the past few weeks, and have a pretty workable solution. It's at https://github.com/mikebrady/shairport-sync. It's a pretty big rewrite to use the extra timing and control functionality available from iTunes, etc. It only works for Linux and requires ALSA. \nTo keep sync, it will remove or insert frames of audio. It works with Debian, Ubuntu, Raspian, OpenWrt and I've run it on regular laptops, Raspberry Pi and Linksys NSLU2s over ethernet and wifi. It works well with internal sound cards and with USB-connected DACs. I've tried it with source from iTunes on Mac and Windows, iPhones and iPads.\nIt seems quite robust, and I'd be interested in your comments and experiences. \n. You're welcome, @Nachtzuster.\n. I'll certainly look into it. Would it be a big problem to just ignore it at the forked-daapd end?\n. Thanks. Just thinking about it, it should be a fairly simple fix at this end too. I'll try to get to it in the next day or so. \n. @mantheman that is a very interesting observation.\nI've been listening via a Raspberry Pi connected to a Topping TP30, which uses a TI2704 DAC connected over USB. I've also listened via an IQaudIO Pi-DAC, a Griffin iMic and others.\nShairport Sync makes a pretty good initial estimate of latency and then adjusts it in the first few seconds alright, but after that it is fairly continually adding or deleting frames, in my experience up to about 100 parts per million of adjustment if the source is an iPhone, much less from a Mac. I never hear any clicks, and \u2013 once I got Shairport Sync actually working \u2013 I've never actually heard any of the distortion. I've only listened to regular material \u2013 music and speech \u2013 and I can't hear any distortion, even at the start of a run of Shairport Sync. So, I must try your test, but it'll be about a month before I get to it.\n@Nachtzuster, @abrasive, I looked at the FANCY RESAMPLING code too, and dropped it, mainly for simplicity.\nBut even if it was working, I think it works on a 352-frame buffer at a time. If I'm not mistaken, 352 frames at 44,100 samples per second doesn't translate into an integer number of frames at, say, 48,000 samples per second and this would inevitably add extra distortion and noise.\n. Okay, I listened to the 1khz 0db sinewave at http://www.realmofexcursion.com/audio/1khz.mp3 and the distortion is clearly audible at the start on Shairport Sync and at points along it. I'll certainly be looking at that in the next month or so. Thank you @mantheman!\n. Thanks @Nachtzuster and @mantheman for the encouragement and the hints. I followed your suggestions and tried out libsoxr. It works well, only cutting in when needed, and in that mode IMHO only needs the first seven frames of a buffer to be replaced (and not the last seven).\nUnfortunately, I am away for about three more weeks, and can't test the code thoroughly, except on a virtual machine, where it certainly sounds a lot better on the 1kHz test.\n. While working on Shairport Sync \u2013 2.1 is just out, with libsoxr support \u2013 I believe I came across errors in the handling of the packet buffer which might also be affecting your work. FWIW, I could not convince myself that the seq_diff and seq_order worked properly with respect to wraparound from 65535 to 0, so I wrote versions I could believe in \u2013 in player.c. \n. Thanks for the report. You are right that resyncing is more \"aggressive\" in 2.1 \u2014 I was concentrating on allowing libsoxr to run without undue constraint due to processor load, and I removed the \"throttling\" code. I'll put something like it back, to limit the maximum rate of resyncing.\nThe sync signals come from the source even when it's playing audio to one sink, so there will always be sync activity.\n. Just pushed a slight update limiting interpolation to about 1 in 1000 frames (about one in three packets).\nFor the life of me, I can't hear the fixed 1-2 second interval noise bursts you refer to. I'm testing on an iMac with iTunes over Ethernet to a Raspberry Pi driving a Topping TP30 and also an iPhone 5 with the Music app to the same Raspberry Pi. Here are representative log lines with soxr stuffing enabled:\nAug 27 18:35:33 raspberrypi shairport-sync[4804]: Play connection from \"iTunes/11.3.1 (Macintosh; OS X 10.9.4)\".\nAug 27 18:36:09 raspberrypi shairport-sync[4804]: Sync error: -53.3 (frames); net correction: 77.1 (ppm); corrections: 77.1 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 3384.\nAug 27 18:36:39 raspberrypi shairport-sync[4804]: Sync error: -69.0 (frames); net correction: 128.5 (ppm); corrections: 128.5 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 5729.\n...\nAug 27 18:43:04 raspberrypi shairport-sync[4804]: Play connection from \"xxxxxxxx's iPhone 5\".\nAug 27 18:43:36 raspberrypi shairport-sync[4804]: Sync error: -114.9 (frames); net correction: 371.9 (ppm); corrections: 371.9 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 3761.\nAug 27 18:44:06 raspberrypi shairport-sync[4804]: Sync error: -62.0 (frames); net correction: 36.3 (ppm); corrections: 36.3 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 4923.\nAug 27 18:44:36 raspberrypi shairport-sync[4804]: Sync error: -57.4 (frames); net correction: 23.4 (ppm); corrections: 23.4 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 5600.\n. Thanks for that. As you say, the crackles on the 1kHz tone are a bit academic. I pushed a few tiny updates that reduce them a bit further, I think. Could you turn on -v and get a few stats from the log file?\n. Thanks again. Nothing there jumping out \u2013 a lowish rate of correction, no untoward overcorrection.\nRegarding the \u2013on-start stuff, maybe we should move the discussion to https://github.com/mikebrady/shairport-sync/issues/7?\n. I think you've submitted this pull request to the wrong repository!\nIt should be to mikebrady/shairport-sync.. ",
    "yenchee1970": "I just noticed the great improvement for this project yesterday and I tried it on my Raspberry Pi with USB DAC (PS Audio DLiii). I found there are two problems so far. Both are also existed in the original code too.\nFirstly, there is a memory leakage of resphdr in handle_setup. During the end of the function, it shall be freed. Besides that, the size of allocation is based on the request header which is weird. Actually, the code crash on my Pi every three times of play from my iPad Air because resphdr is not big enough and overwrite other area of stack.\nThe second problem is the delay of USB DAC. Here is the dump of my running status.\npi@raspberrypi /etc/init.d $ cat /proc/asound/card0/pcm0p/sub0/status\nstate: RUNNING\nowner_pid   : 12885\ntrigger_time: 30025.471824552\ntstamp      : 30829.312002686\ndelay       : 46080\navail       : 44\navail_max  : 45728\nhw_ptr      : 35450363\nappl_ptr    : 35496399\npi@raspberrypi /etc/init.d $\nThe delay is signifcant larger than other branch as shairport-sync from mikebrady which is approximately below 8000. I am not sure if it caused sync problem. At my enviornment, my Pi takes up to 3 mins to be stable at playback_rate down to 1.0 +- 0.001.\n. Here is the 1st 6 seconds log:\nnew RTSP connection\nreceived request: ANNOUNCE rtsp://192.168.147.39/3487093456 RTSP/1.0\n    CSeq: 1\n    Content-Type: application/sdp\n    Content-Length: 574\n    User-Agent: iTunes/11.2.2 (Windows; Microsoft Windows 8 x64 Business Edition (Build 9200))\n    Client-Instance: 780C6916360BCD8B\n    DACP-ID: 780C6916360BCD8B\n    Active-Remote: 2480222884\nsending response: RTSP/1.0 200 OK\n    CSeq: 1\n    Audio-Jack-Status: connected; type=analog\nreceived request: SETUP rtsp://192.168.147.39/3487093456 RTSP/1.0\n    CSeq: 2\n    Transport: RTP/AVP/UDP;unicast;interleaved=0-1;mode=record;control_port=6001;timing_port=6002\n    User-Agent: iTunes/11.2.2 (Windows; Microsoft Windows 8 x64 Business Edition (Build 9200))\n    Client-Instance: 780C6916360BCD8B\n    DACP-ID: 780C6916360BCD8B\n    Active-Remote: 2480222884\nRtp listening on dataport 38856, controlport 38856. Timing port is 46118.\nbuffer size set to 184\nTiming packet ntp_ref_tsp 2752492781\nTiming packet ntp_rec_tsp 2209767410389830\nTiming packet ntp_sen_tsp 2209767410389841\nTiming packet ntp_loc_tsp 2752494152\nRound-trip delay 1360 us\nClock offset 2209764657896369 us\nCurrent time s:2752 us:492781\nntp: valid entries: 1\nntp: offset: 2209764657896369, d: 1\nset sample rate 44100\nset period time 45usec\nsending response: RTSP/1.0 200 OK\n    CSeq: 2\n    Audio-Jack-Status: connected; type=analog\n    Transport: RTP/AVP/UDP;unicast;interleaved=0-1;mode=record;server_port=38856;control_port=38856;timing_port=46118\n    Session: 1\nPlayer STATE: 0\nreceived request: RECORD rtsp://192.168.147.39/3487093456 RTSP/1.0\n    CSeq: 3\n    Session: 1\n    Range: npt=0-\n    RTP-Info: seq=11319;rtptime=3537963280\n    User-Agent: iTunes/11.2.2 (Windows; Microsoft Windows 8 x64 Business Edition (Build 9200))\n    Client-Instance: 780C6916360BCD8B\n    DACP-ID: 780C6916360BCD8B\n    Active-Remote: 2480222884\nReceived seq: 2C37, rtptime: 3537963280\nSetting strict_rtp to 1\nReporting 2205ms delay\nsending response: RTSP/1.0 200 OK\n    CSeq: 3\n    Audio-Jack-Status: connected; type=analog\n    Audio-Latency: 2205\nreceived request: SET_PARAMETER rtsp://192.168.147.39/3487093456 RTSP/1.0\n    CSeq: 4\n    Session: 1\n    Content-Type: text/parameters\n    Content-Length: 18\n    User-Agent: iTunes/11.2.2 (Windows; Microsoft Windows 8 x64 Business Edition (Build 9200))\n    Client-Instance: 780C6916360BCD8B\n    DACP-ID: 780C6916360BCD8B\n    Active-Remote: 2480222884\nvolume: 0.000000\nsending response: RTSP/1.0 200 OK\n    CSeq: 4\n    Audio-Jack-Status: connected; type=analog\nCurrent time s:2752 us:552562\nTiming packet ntp_ref_tsp 2752552562\nTiming packet ntp_rec_tsp 2209767410449701\nTiming packet ntp_sen_tsp 2209767410449711\nTiming packet ntp_loc_tsp 2752554438\nRound-trip delay 1866 us\nClock offset 2209764657896206 us\nntp: valid entries: 2\nntp: offset: 2209764657896287, d: 2\nreceived request: SET_PARAMETER rtsp://192.168.147.39/3487093456 RTSP/1.0\n    CSeq: 5\n    Session: 1\n    Content-Type: text/parameters\n    Content-Length: 18\n    User-Agent: iTunes/11.2.2 (Windows; Microsoft Windows 8 x64 Business Edition (Build 9200))\n    Client-Instance: 780C6916360BCD8B\nPacket for with sync data was sent has arrived (2C37)\n    DACP-ID: 780C6916360BCD8B\n    Active-Remote: 2480222884\nvolume: 0.000000\nsending response: RTSP/1.0 200 OK\n    CSeq: 5\n    Audio-Jack-Status: connected; type=analog\nCurrent time s:2752 us:603370\nTiming packet ntp_ref_tsp 2752603370\nTiming packet ntp_rec_tsp 2209767410500264\nTiming packet ntp_sen_tsp 2209767410500272\nTiming packet ntp_loc_tsp 2752605097\nRound-trip delay 1719 us\nClock offset 2209764657896034 us\nntp: valid entries: 3\nntp: offset: 2209764657896203, d: 3\nPacket for with sync data was sent has arrived (2CB6)\nfound good sync (2C37:2CB6) sync: 1156608\nPacket for with sync data was sent has arrived (2D34)\nbuffering over. starting play\nFill with 0 frames and 0 samples\nChanging player STATE: 1\nChanging player STATE: 2\nPacket for with sync data was sent has arrived (2DB2)\nCurrent time s:2755 us:604061\nTiming packet ntp_ref_tsp 2755604061\nTiming packet ntp_rec_tsp 2209767413501266\nTiming packet ntp_sen_tsp 2209767413501276\nTiming packet ntp_loc_tsp 2755605626\nRound-trip delay 1555 us\nClock offset 2209764657896427 us\nntp: valid entries: 4\nntp: offset: 2209764657896259, d: 4\nPlayback rate 1.020654, sync_time -319193\nPacket for with sync data was sent has arrived (2E30)\nPlayback rate 1.039996, sync_time -316485\nPacket for with sync data was sent has arrived (2EAE)\nPlayback rate 1.058086, sync_time -313565\nPacket for with sync data was sent has arrived (2F2C)\nHere is another log while it's stablized:\nCurrent time s:3046 us:692381\nTiming packet ntp_ref_tsp 3046692381\nTiming packet ntp_rec_tsp 2209767704595155\nTiming packet ntp_sen_tsp 2209767704595167\nTiming packet ntp_loc_tsp 3046694096\nRound-trip delay 1703 us\nClock offset 2209764657901922 us\nntp: valid entries: 7\nntp: offset: 2209764657901682, d: 5\nPacket for with sync data was sent has arrived (BC78)\nPlayback rate 1.000164, sync_time -2122\nPacket for with sync data was sent has arrived (BCF6)\nPlayback rate 1.000288, sync_time -2049\nPacket for with sync data was sent has arrived (BD74)\nPlayback rate 1.000394, sync_time -1890\nCurrent time s:3049 us:693091\nTiming packet ntp_ref_tsp 3049693091\nTiming packet ntp_rec_tsp 2209767707595879\nTiming packet ntp_sen_tsp 2209767707595891\nTiming packet ntp_loc_tsp 3049694700\nRound-trip delay 1597 us\nClock offset 2209764657901989 us\nntp: valid entries: 7\nntp: offset: 2209764657901754, d: 5\nPacket for with sync data was sent has arrived (BDF2)\nPlayback rate 1.000480, sync_time -1660\nPacket for with sync data was sent has arrived (BE70)\nPlayback rate 1.000530, sync_time -1174\n. @BewickPlace I just got my another Pi with HiFiberry DAC. It's weird that the new Pi does not have the problem as the original Pi + USB DAC does. The new Pi stablize just within a couple of seconds. I suspect the long delay in the USB DAC generate some ill-effect with the 1st play. I checked the delay in the alsa driver. USB DAC takes 45000-46000us at the driver but HiFiberry through I2S takes only 8000us. I am not sure the long delay is the result of missing 1st sync or cause to miss the 1st sync.\n. @Nachtzuster I checked audio_alsa.c and I found the original code set the period size but not buffer size. In the mean time, the period frame is very small (64). I set the period to 4410, and set the buffer to 4 * 4410. Now my USB DAC got a perfect synchronization.\n. 4410 stands for 100ms in the samping rate 44100. I initially use 2205 instead. However, my USB DAC glitch very often. And I realize Raspberry is very poor on USB throughput. Since DAC is competing with my 5GHz dongle, it underrun very often in that case. Therefor, I enlarged to 4410 which runs very well so far. Now my HiFiBerry can sync with USB DAC instantly.\n. It works pretty well here. By the way, I am investigating the code stuff_buffer in player.c\nWhen I try to airplay a 0db 1K sine wave, I can hear the glitch sound introduced by stuff_buffer clearly.\nIt is also very annoying on a piano solo music as the background noise. During the check, I found the code has  a small bug on adding a sample. The original code is actually go over the allocated buffer for 1 more sample. Here is my modified code.\nif (stuff) {\n    if (stuff==1) {\n        debug(3, \"+++++++++\\n\");\n        // interpolate one sample\n        *outptr++ = dithered_vol(((long)inptr[-2] + (long)inptr[0]) >> 1);\n        *outptr++ = dithered_vol(((long)inptr[-1] + (long)inptr[1]) >> 1);\n        i++;\n    } else if (stuff==-1) {\n        debug(3, \"---------\\n\");\n        inptr++;\n        inptr++;\n    }\n    for (; i<frame_size + stuff; i++) {\n        *outptr++ = dithered_vol(*inptr++);\n        *outptr++ = dithered_vol(*inptr++);\n    }\n}\nIt doesn't improve the sound. I try to tweak the probability and playback_rate.\nDoesn't work either. Maybe the better way is to upsamping, resamping and downsampling.\nBut it will consume too much computing resource and distort the original sample.\nAny better idea?\n. Just found another memory overlapped issue. The allocated buffer of outbuf in player_thread_func miss 1 sample. Stuff_buffer will use one more to adjust the time. Fix it, but still not helping on the glitch.\n. I did set bf_playback_rate at 1.0 before, and it play perfect 1Khz sine wave. However, the sync time is gettting larger and larger. By the trend, it will be either overrun or underrun at the end. I have no choice to put the stuffing back. By the way, most of the time won't notice the big difference by stuffing. It only happened on quite background, then the glitch will be noticed.\n. @mantheman I highly doubt the correctness from stereophile review. Airplay is streaming by IP traffic. I believe it adopts the same technology as @Nachtzuster implemented by NTP protocol. I don't think Apple is really drive the clock into the hardware. In reality, I found airplay from iPad drift a lot. If they use the derived clock from the IP traffic, it will sound poorly. By the way, the code in shairport with FANCY_RESAMPLING is not working at all. config.h is not included, the allocation size is wrong and the sample size is wrong too. I did make it work, but it sounds very poor. I guess the poor sound is because the resampling is based on a small period (352 samples per frame here). Think about resampling for every 352 samples, no wonder it sounds poor. I gave up the work at last.\n@Nachtzuster I finally realize airplay from iPad drift a lot which make stuff_buffer function poorly. Also, the original playback_rate is for the buffer rate matching algorithm. Because of NTP, we have exact time and we know how long a sample will compensate, I drop the playback rate totally. Instead, I use the number of targeting stuff sample by sync_time_diff. There are some difference in player.c. I don't know how to post the diff here. If you are interested in it, you can check it from my fork. With steady steaming from Windows, the number of stuffing is very few now so the glitch is hardly audiable.\n. I just tested the soxr improvement. It works great except raspberry pi is not powerful enough to handle too many resample chunk at a second. We have two options to improve it. I add a SOXR parameter to change the soxr quality to speed up it. The library default is low quality. It is typically 128 chunks per second in an airplay stream. With quick quality, Raspberry pi is able to handle it without glitch. The other option is to limit number of resample per second. I change the number to 32. As long as the sender and receiver are not more than 32 samples apart which turns to be 725us, both stream will be in sync at last. It works very well here with both Windows with Airfoil and iTune or iPad air. Anyone who is interested on my patch can retrieve it under my fork.\n. @BewickPlace I merged the original work from @Nachtzuster where I believe the oneshot API takes float array only. To use interger instead, you have to use stream API. In the mean time, float shall give you better quality and dynamic range than all integer implementation unless it is changed to float in the library. If that is the case, it does not improve anything to use all short implentation.\n. @BewickPlace I took a look at rate.h and I found all the calculation is done in double datatype while computing. Also, oneshot is able to deal with int16s. I modify my code to use that type directly, and remove float translation completely. It looks more clean now.\n. ",
    "mantheman": "Hi. I've been trying out both the sntp branches at @Nachtzuster  and @BewickPlace  (Built on Debian Wheezy AMD64 with alsa only, commented out the rpi-specific lwiring/digitalwrite stuff @BewickPlace sntp branch) Both have some kind of distortion in its sound. Do you have Spotify? Search for \"Sad Classical Music, the song \"Ave Maria Schubert\". It is very very clearly heard there. The distortion sounds like a faint digital clipping. The official one doesn't have this distortion, so that means there might some funny business going on with the sntp patches that introduce a horrible distortion, plus it's not bitperfect anymore. Hope someone can figure this out before the patches get pulled. Btw Shairport-sync over at @mikebrady works like a champ. No distortion, always perfectly in sync from the first sample, forward/rewind in youtube (on ipad) etc. How about merging back to master @mikebrady ?\n. @BewickPlace, I found your fork did sync better and quicker than just the isolated sntp patches. Anyways, it is not just distortion in the beginning. It is all the time. It sounds like a slight dsp is going on. Dont know how to elaborate on this. This is with a usb dac, playing at 44,1khz. The old perl version of shairport works fine, mpd works fine, the official shairport works fine, but both the sntp forks distorts..i dont really know what's going on.\n. Can we for the love of god agree on that resampling, upsampling, downsampling and whatnot is not the way forward. We're talking about fixed 16/44,1 frequnecy here, the apple airport express is bitperfect so I don't see the need to make it more complex than it should.\n. > Unfortunately, that is not the case. Neither the local sound card, nor iTunes play out at exactly 44100.000...Hz. The number of samples that iTunes transmit will never be the same as the number that need to played out to keep everything in perfect sync.\n\nIn other words, creating extra samples or skipping samples is a necessary evil.\nThis is not unique to shairport, any RTP based system needs to do this. Unless an Airport has some kind of specialty DAC with adjustable playout-rate, even an Airport does this. The only reason you do not hear it, is because it has a refined re-sample algorithm.\nHope that makes it clear.\n\n@Nachtzuster I see where youre coming from, espescially with async usb dacs that have local fixed clocks. But what youre saying isn't true according to http://www.stereophile.com/digitalprocessors/505apple/ and I quote: \"Some audiophiles have dissed the AirPort Express on the grounds that its digital output is not bit-accurate. However, I found that this was not the case, that the data appearing on the AE's digital output were identical in the original file. To check this, I compared a WAV file with a duplicate that I had captured on my PC from the AirPort Express's S/PDIF output. I used iTunes on my PowerBook playing a version of the file encoded with Apple Lossless Compression to feed data to the AE. The files were bit-for-bit identical, proving that the AirPort Express is transparent to the music data (as is ALC, for that matter).\"\nNow the Airport derives its clock directly from the incoming stream, and the toslink input of dacs will simply use a pll to sync it's clock. Obviously we cant do that with a \"normal\" pc since the soundcard output is fixed. But Airplay is inherently bitperfect, so I would rather miss a sample/add a sample instead of resampling.\nAirfoil Speakers for OSX (havent tried the windows version) have had synchronized playback from day one, and they even tell you how to play back DTS wav files (max volume, turn off all dsp functions). If the \"DTS over wav file\" is resampled, there simply would be white noise. And everything stays perfectly in sync, with the same sound coming from my desktop computer, airfoil speakers on the stereo via a mac mini running osx, and an airport in another room. You can literally go from room to room and you'd think everything was connected to the same physical cable.\nAlso the same could be said of radio streams that are streamed in real time (they are not exactly 44,1khz/48khz compared to your soundcards rate),  but I've never had the need to resample radio streams with any program in any setup althoughI could imagne playing a stream non-stop for a couple of days might trigger some over/underrun.\nThe ATV on the other hand, is resampling everything to 48khz (even 48khz gets resampled to 48khz I think). Probably because it needs to have 1 reference clock that both video and audio sync to. \nAnyways, I wouldn't mind the option to choose resampling at build time. Maybe someone could implement libsoxr instead of libsamplerate. Soxr is using a tenth or less to resample with better quality than libsamplerate at its highest setting. In my tests (using MPD), even a Core i5@2,5ghz (although probably singlethreaded) had no chance using libsamplerate at the highest setting, I had to use the next best setting and even then it would be a no-go when playing back hi-rez files. Libsoxr on the other hand is using 3-4% at its highest setting at resampling 32/384 files. I guess Libsoxr would work perfectly on the ARM based machines @ 44100.\n. @Nachtzuster I did try playing a 1khz 0db sinewave ( http://www.realmofexcursion.com/audio/1khz.mp3 ) , and on Shairport-sync by @mikebrady there is distortion  the first few seconds, and maybe a burst or two after that, until about 7-8 seconds in there is no distortion anymore. When it sometimes resyncs in the middle of the track, I do hear the distortion again. I think I could live with that. But the problem with your fork of shairport is that this distortion is there all the time till the end of the track, and that is on normal songs found on spotify. It might be dependant on the type/model of the soundcard/dac among other things. I use an USB DAC with the XMOS USB chipset, pretty much the industry standard among the boutique manufacturers. I also have another DAC using the same chipset in my second stereo system. I'll try the same with that DAC and report back. \n. That was indeed smooth sailing! no distortion/clicking with the 1khz file and a couple of songs on Spotify that was troublesome before. \nI get this isnt bitperfect? And why is both libsamplerate and soxr required, and how do you switch between them? IMHO libsamplerate should be deprecated since soxr is tenfolds better in cpu usage and also sound quality. It should also be possible to choose among different quality settings with soxr. \n. I did mean bitperfect as in drop/missed frames, since we've established it's virtually impossible to get true bitperfect output:) I like the idea that the resampling comes into play only when needed, that's very elegant. This being still proof-of-concept, I was pleasantly surprised. I guess it's still a good idea to try to perfect the sntp code, to minimize when resync (and subsequently resampling) is needed? If underneath the resampling code, it still clicks all the time, like the sntp code currently does in my setup, then one may as well resample 100% of the time. Truth be told, if Mike Brady can perfect the code on his shairport-sync fork, then that's probably good enough too,since already in its current state it's mostly impossible to hear any clicks/distortion when playing normal music. \n. Good job! However, I just tried it, and unfortunately I couldn't hear any improvements. The ticking distortion is just as bad as it was before. (GUIless Debian Wheezy x64, Async USB soundcard). Do you want me to record the distortion or doesnt it matter?\n. does this help: http://tny.cz/bc11592b\n. Could you implement an option to choose the resample quality: You might want to take a look at how Squeezelite have done it: http://manpages.ubuntu.com/manpages/trusty/man1/squeezelite.1.html\nHeres the output with loglevel 1: http://pastebin.com/ErDQArVm\n. @mikebrady \nCompared your new version 2.1 vs 2.0 without soxr with http://www.realmofexcursion.com/audio/1khz.mp3. The first 10 seconds are almost the same, a lot of small \"static\" noises. After 10 seconds version 2.0 seems less aggressive and is playing far longer without inducing noise. Version 2.1 seems to have more aggressive syncing and has those static noises at fixed approx 1-2 second intervals.\nWith soxr enabled, I can still hear static noises the first 10 seconds, albeit much lower in strenght, After those 10 seconds soxr seems to work properly. It seems the heavy resyncing at the beginning is throwing the resampling a little bit off.\nIf I remember correctly, I didn't hear any noise at all with @BewickPlace implementation of soxr. (But without soxr it has an unbearable amount of noise)\nAnother thing is that the 1khz file is just audio, it shouldn't be trying to resync it at all unless to it drifts off really bad. It may or may not be possible to differentiate between video and just audio, but you guys know this better than me.\n. This is my commandline: shairport -d -a hostname --wait-cmd --on-start='/usr/local/bin/mpc -q stop' -- -d plughw:0,0 (Can't use hw:0,0 since my DAC is 32bit input only, and only produced garble). to enable soxr i add \"-S soxr\". \nThis is a recording done with my iphone of the 1khz tone playing (played directly from safari ios) through my stereo. The Dac is an Ayre QB-9 with the 192khz xmos USB chip.\nhttps://www.dropbox.com/s/eopr61jyinkxniq/Shairport%202.1%20commit%20601%20crackling.m4a?dl=0\nYou can hear the crackling the first 10 seconds and after that short bursts all the time. I can't hear any crackling when streaming normal music from Spotify (unlike the forks by @Nachtzuster or @BewickPlace which are clearly distorting normal music, but works really well with soxr) , so for all intents and purposes it behaves pretty much like version 2.0, which is good. I have used version 2.0 daily for a couple of months and I really have no complaints, and I view the crackles when playing a 1khz tone almost purely academic.\nThis is with Soxr enabled : https://www.dropbox.com/s/ddpmw4h72uajnpp/Shairport%20Sync%202.1%20Soxr%20Commit%20601.m4a?dl=0\nI also got a compiler warning: My system is a Debian Wheezy amd64.\ngcc -DHAVE_CONFIG_H -I.     -g -O2 -MT rtsp.o -MD -MP -MF .deps/rtsp.Tpo -c -o rtsp.o rtsp.c\nrtsp.c:73:35: warning: initialization makes integer from pointer without a cast [enabled by default]\n. Sounds about the same. Shairport 2.0 corrects a littles less, but makes a little more noise when doing so, whereas 2.1 corrects a little all the time. That is my impression. \nPlay connection from \"xxx's iPad\". (ipad 4 ios 7.1.2 safari browser playing http://www.realmofexcursion.com/audio/1khz.mp3)\nSync error: -112.4 (frames); net correction: 359.1 (ppm); corrections: 359.1 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 6108.\nSync error: -53.6 (frames); net correction: 17.4 (ppm); corrections: 17.4 (ppm); missing packets 0; late packets 2; too late packets 0; resend requests 4; min DAC queue size 6109.\nPlay connection from \"iTunes/12.0 (Macintosh; OS X 10.10)\". (Norah Jones - Chasing Pirates alac)\nSync error: -69.5 (frames); net correction: 183.7 (ppm); corrections: 183.7 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 6203.\nSync error: -65.0 (frames); net correction: 84.7 (ppm); corrections: 84.7 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 6203.\nSync error: -65.2 (frames); net correction: 88.4 (ppm); corrections: 88.4 (ppm); missing packets 0; late packets 0; too late packets 0; resend requests 0; min DAC queue size 6199.\nSync error: -55.1 (frames); net correction: 39.3 (ppm); corrections: 39.3 (ppm); missing packets 0; late packets 1; too late packets 0; resend requests 1; min DAC queue size 6170.\nSync error: -54.2 (frames); net correction: 17.4 (ppm); corrections: 17.4 (ppm); missing packets 0; late packets 1; too late packets 0; resend requests 1; min DAC queue size 6204.\nBtw can you fix the --on-start --on-stop options?\nwith the commandline  /usr/local/bin/shairport -d -a hostname --wait-cmd --on-start='/usr/local/bin/mpc -q stop' -- -d plughw:0,0 I get: \n/usr/local/bin/shairport: invalid option -- 'q'\n/usr/local/bin/shairport -d -a hostname --wait-cmd --on-start=\"/usr/local/bin/mpc -q stop\" -- -d plughw:0,0 -- -d plughw:0,0 doesn't give the invalid option but doesn't work either. The same happens with /usr/local/bin/shairport -d -a hostname --wait-cmd --on-start='/usr/local/bin/mpc\\  -q\\  stop' -- -d plughw:0,0\nIt works with the official version, and also when I merged the on-start/stop/wait commit myself into shairport-sync 2.0. Of course I see why it doesn't work, and I could just make a script, but..\n. ",
    "PeterPablo": "Dear @Nachtzuster,\nI tried your current 'sntp' branch and am experiencing plenty of drop outs. You can find a debugging log file here: http://pastebin.com/sPu3L8d5\nUnfortunately I had to shorten it due to the length.\nThe regular shairport also fails after a short while of playback. \nI guess this has to do with the USB Sound Card from Creative I am evaluating right now. With the onboard line-in output of the Raspberry PI, everything works fine on the master branch.\nuname -a\nLinux rpi 3.12.24+ #693 PREEMPT Sat Jul 5 15:25:33 BST 2014 armv6l GNU/Linux\nWhat kind of additional information may help you with debugging?\n. ",
    "czyz": "I'm unfortunately not enough of a coder to contribute, but I am looking forward to attempting to compile this to run on a TL-WR703n router running OpenWRT. \n. ",
    "ghost": "Hi, thanks for the reply. \nIn PA config one can specify the default and the alternative sampling frequency. It's good idea to make that alternative equals your sound card max samp freq. If you then play a stream having either default or alternative sampling rate, there will be no conversion at all. When you play stream with FS>alternative, it will be downsampled to the alternative fs. However it gets more messy when there are couple of streams (clients) connected to PA.\nWhen there is more then one stream, they all get downsampled to the fs=min(f1,f2,f3..), where f- sample rates of particular streams. This is described in PA doc and it's a proper, understandable behaviour. \nSo the problem is that when the shairport is always connected to the PA and visible as a \"sink input\" and it has 44kHz sampling, it forces PA to downsample all the other clients to 44kHz. So even though my sound card can handle 96kHz, my flac files playd by lets say MPD will be downsampled. It causes both unnecesary CPU load (high for tiny machines) and quality downgrade. \nI agree that the connection should be checked at startup to detect configuration issues, I will add it. And it my previous commit I forgot one file, that's why my patch was not complete ;)\n\nOn Feb 3, 2014, at 1:37 AM, James Laird notifications@github.com wrote:\nNAK.\nAt the moment, audio init is performed upfront so that errors can be detected on startup, as far as is possible. The alternative is having shairport fall over when someone hits play, which is a bad user experience.\nThe first target for this sort of issue is the PA config. Doesn't PA upsample to the engine default rate?\nThe Pulse backend would also be a good place to work on this. It's not clear to me whether the asynch API allows server connection to be separated more cleanly from streaming activity. Certainly the connection to the server should be tested at startup, even if by playing some zero samples and then closing up if that's what it takes.\n(Your patch is incomplete, by the way; newArgv and newArgc are never set).\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "jishi": "Hm, alright, I follow you. But the file was just an example, the real user scenario was actually a fifo pipe which was read and forwarded over http to a streaming client. The problem that occured was that it flooded the fifo with 0x00 and audio only came through every minute or less.\nI realize that my user case is a bit edge, but the behavior still didn't seemed right. Of course, the other end of the pipe did try and read as soon as there was data there, but it just got filled with 0x00 then, of course. \nI have seen people piping the output to vlc and transcoding in realtime to MP3, are you saying that a software like that would only read at the same rate as the audio should arrive (taking sample rate and sample size in account)?\nI guess the correct approach would be to block the fifo from the other end and just read samplerate  * channels * 2 bytes per second then. Sorry for the confusion.\n. Gotcha. When you say tap, you mean modifying the source, not that there is some sort of hook with the dummy output? Because I can't figure out how that would work in that case.\n. ",
    "peec": "+1 for this awesome feature. Great for integration with other apps. Even though JSON might be a better format for the file itself instead of newline separated.\n. ",
    "fatso83": ":+1: \n. ",
    "allesblinkt": "@abrasive Oh, I overlooked this. Crediting as allesblinkt with the link to GH is fine. \nThank you very much!\n. ",
    "casr": "I've fixed that typo and rebased on master. I'll try and test properly tomorrow if I find the time!\n. @plietar ah I was unaware of that. I've had a quick look around the man pages and the Internet and the situation appears unchanged. Shame! I'll remove the note from the commit message.\n. @abrasive I've tested now and should be ready to merge (ignoring the issues with #321)\n. This is failing for me on OS X. I've added a note to the commit. I'm guessing it's because it clobbers the namespace so perhaps all that is required is a different function name? (My C knowledge is limited, however!)\nhttps://github.com/abrasive/shairport/commit/8572b88d9f38faf19101e41345c32e355dd7a68f#commitcomment-6791543\n. This is enough to fix the compile:\n``` diff\ndiff --git a/audio_pipe.c b/audio_pipe.c\nindex 77a42b0..e5784bc 100644\n--- a/audio_pipe.c\n+++ b/audio_pipe.c\n@@ -67,7 +67,7 @@ static void start(int sample_rate) {\n }\n// Wait procedure taken from audio_dummy.c\n-static void wait(int samples) {\n+static void sp_wait(int samples) {\n     struct timeval tv;\n // this is all a bit expensive but it's long-term stable.\n\n@@ -87,7 +87,7 @@ static void wait(int samples) {\nstatic void play(short buf[], int samples) {\n     if (fd < 0) {\n-        wait(samples);\n+        sp_wait(samples);\n     // check if the other end is ready every 5 seconds\n     if (samples_played > 5 * Fs)\n\n```\n. ",
    "gonewest818": "I saw #297 and your objection to it ... the (sort of) difference here is that the full audio stack does initialize immediately and you would get prompt feedback of a failure.  It does not solve the case where the audio situation changes, but then again -- I'm experiencing the problem right now where the audio situation has changed and all I get is silence.\nSo for instance let's say I do catch the return code from ao_play() and detect an error...  I could try to re initialize audio based on that error, but what if that fails? Is that any better than failing this automatic deinit/reinit ?\nJust my opinion, totally up to you. \n. Also fwiw this patch has been running on a rpi continuously for 6 weeks, never rebooted not even the process restarted as far as I can recall.  In my case anyway this has solved the problem completely (although to be fair I still lack any true insight what the underlying issue is/was).\n. I finally confirmed that a recent clone of this project using alsa rather than libao does not exhibit the big reported in #303. I'm closing this pull request as no longer relevant. \n. ",
    "ejurgensen": "No-one likes a closed pipe ;-) But forked-daapd can kinda handle it, since it opens the reading end with nonblock. I didn't test this change, but I have tested that it is possible to start Shairport, begin streaming through a pipe to forked-daapd, shutdown Shairport, restart it and continue streaming. However, as I recall, forked-daapd does not detect the pipe closing, so it doesn't close/reopen the streams to its own AirPlay targets - which is not so nice. I should fix that at some point.\n. ",
    "derekatkins": "Cool, this seems to work for me!  Although I did have a couple of patch-merge conflicts against master.\n. ",
    "koter84": "it works for me too! this is quite needed when running on a machine with a firewall\n. ",
    "wildsurfer": "like it\n. ",
    "justfalter": "Actually, I'm going to bail on this pull request. If you do not specify any arguments to the \"create\" command, it simply copies the existing owner:group and permissions. \nSee: http://linuxcommand.org/man_pages/logrotate8.html\n. ",
    "wnielson": "The \"paused\" functionality doesn't work correctly yet.  This causes the position to continue to be updated for a few seconds after hitting \"pause\" on the client.\n. ",
    "Xinnony": ":+1: \n. ",
    "erawk": "This was a typo to ensure $clen is always a number.\n. Interesting, because with the \"//\" I get the following compilation error:\n  Scalar found where operator expected at /usr/local/bin/shairport.pl line 265, near \")$/\"\n    (Missing operator before $/?)\n  syntax error at /usr/local/bin/shairport.pl line 265, near \"if ($ip =~ /(\"\n       (Might be a runaway multi-line // string starting on line 249)\n  syntax error at /usr/local/bin/shairport.pl line 265, near \"+)\"\n  Execution of /usr/local/bin/shairport.pl aborted due to compilation errors.\n\nAnd my perl is perl -v\nThis is perl, v5.8.9 built for darwin-2level\n. "
}