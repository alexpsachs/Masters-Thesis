{
    "ebryn": "Seems good. Thanks!\n. Thanks for keeping me honest. The current pushed code isn't completely up to date with what I was demoing at the meetup :)\nI'll push it out the next chance I get.\n. I have pushed: https://github.com/emberjs/list-view/commit/c20a2e7588234b8c4b9de29c5db4cfe6739fcc3a\n. @stefanpenner Could you see if this test is still failing on your branch?\n. <3 <3 <3 <3 \n. Thanks!\n. Thanks!\n. Can you squash these commits/rebase on master rather than have all these merge commits?\n. Closing since it sounds like 1.7 is working fine, 1.8 is still in progress.\n. What's the latest here?\n. Was there a conversation about renaming to \"Ember List\"?\n. I'm not really a fan of Ember List, it's too generic sounding. It also supports grids, so list doesn't feel totally right either.\n. I think we can punt on it a bit longer since it's still a View, and when we need to change it for 2.0 come up with a name potentially better than ListComponent :P \n. ember-list-view seems fine for now and we can always rename it later?\n. ListView seems good to me\n. ",
    "sebastianseilund": "Ah okay. Looking forward to that.\n. ",
    "ppong": "+1 that be awesome!\n. ",
    "stefanpenner": "@ebryn @sebastianseilund I can confirm that this test passes on my branch and was fixed by https://github.com/stefanpenner/list-view/commit/b67809d62e8d5d43a5d3ba4d3f81914e2f08aa7a\nMy branch still has some bugs (related to: flexible width/height and grid layouts) which I am currently working on, and will hopefully have sorted out today. Before it gets pulled into master it will likely need some cleanup/refactoring, so I will gladly backport my life cycle fix right now. Just give me the word.\n. @sebastianseilund I really appreciate the failing test. Hopefully this solves the issue, if not I will get on it ASAP.\n. this should just work. this seems the same as iterating over a normal array, but rather it would be a record array.\nIs there something that doesn't appear to work?\nAre you thinking of lazy fetching large lists of data?\n. seems like ember or ember-data needs the idea of a SparseArray or SparseRecordArray\n. You can keep track of the current position at the controller level, and request more data as that cursor changes.\n. I am not sure  lazy loading of data is part of list-view. As I mentioned earlier, this should be done at the controller, or data layer. List view merely iterates a list, regardless of it is complete or not.\nIf I had some more time, I would likely still setup a nice example, but time is unfortunately pretty limited.\n. this doesn't merge cleanly anymore.\nAlso during development having the demos continuously recompiled by the rakep rack app is very important, i would like it if we can preserve that behaviour somehow.\n. we have these now\n. i think this is handled\n. > if (start >= this._lastStartingIndex || start < this._lastEndingIndex) {\nI believe this is to take into account optional elastic snap like in pull to refresh mode.\n. @Leooo sorry, i haven't looked at this code in ages.\nNew array computed (in ember 2.0 beta) wont have this problem, as its all lazy and well behaved. \n. > And this is how I understand it: check that the changes are in the visible range. In that case, this should be \"&&\" not \"||\".\nif you can provide a failing test or something, i would love to be confident in the change. Unfortunately i don't have the extra cycles right now to validate your finding myself. (although i truly wish i could)\n. > Fair enough, not able to provide a test given my Ember level so forget it.\nwe need more hours in the day :(\n. ah, seems like a correctly placed mouseleave would solve this. I may have time this weekend, if someone can get on this before, that would be lovely.\n. we likely want to add image pooling support (we do this at work with great success)\n. @KenanBek although this isn't a bug, it is possible to improve performance if you retain the images yourself. (Especially on mobile devices)\nThat being said, you are correct this issue isn't really an issue. closing now, thanks!\n. Awesome dude.\n. make sure to explain non-virtual list sorta works, but due to Safari optimization we do not get the needed events. For full support VirtualListView is likely the best bet.\n. @mehulkar if you can provide a jsfiddle or jsbin that has this issue, it will help us solve it much quicker.\n. @kselden if u have a chance to take a look that would be great. I wanted these tests or something like them to ensure we troll ourselves going forward.\n. this seems to be un-mergeable?\n. thanks. @pivotal-medici is it possible for you guys to initial your comments/pr's. I would love to associate these PR's with more then some pivots in the ether.\n. thanks AK\n. closed many months ago, by  #59 \n. this is how collection view gets it's content, its not quite like an each.\n. Unfortunately this is a caveat of optimization, and will likely require some improvements within ember. Likely an issue should be opened there.\n. something to keep in mind, is that testing this is quite annoying, what can we do to prevent future regressions. While keeping out time investment to a minimum.\n. @minusfive we might be forced to have a manual aspect to the testing process. We are trying really hard to have solid executable test coverage. But something like ^ is tricky.\n. @kemenaran oh I believe the layering is fixed, but the issue you brought up I believe is not yet.\n. @kemenaran lets create a new one, as 1/2 of this issue has been resolved.  Feel free to cross link\n. you should likely use Ember.$ instead of $ \n. @arkadiyk awesome thanks (I forgot that this project was offending)\n. @joselo wanna submit a PR for the readme? (typically you will want to use controller)\n. :+1: \n. status?\n. @minusfive would u like to make the adjustments, if you are to busy me or @kselden can jump on it.\n. @LevelbossMike I can't wait to see your implementation. I am sure many people would be pretty excited for this.\n. i think 3 steps exists.\n- typed rows\n- height known ahead of time\n- height approximated, and learned over time (or in the background)\n. @JordyLangen no progress.\n. Ya, list view is really good for table like data, or mobile lists of fixed size.\n. I am hopefully starting work now to support a subset of the variable height problem. The idea for the first pass is as follows:\nSupporting several known variable height types. So given a iOS style list that has  shorter headers rows for section headers, and normal height rows you will be able to define 2 view classes, and list-view will understand when to recycle which type.\nThis wont support 100% variable height, but may lead us down the path where we can also support that.\nwish me luck!\n. @pearkes i dont see your app on http://emberjs.com/ember-users/  ;)\n. fixed by #142  hopefully merging this in shortly\n. #142 is in!\n. unsure if I will have the bandwidth to investigate this. But for whomever can, I have had good luck using dynatrace for IE profiling.\n. @twokul is this one good to go?\n. There is always interest in improving and refactoring the code. I am unsure about this particular refactor. That being said, I can be convinced, If anyone has strong feelings feel free to chime in.\n. addepar essentially rebuilt tables using divs + something similar to list-view. There are some thoughts/plans for them to utilize list-view, although I believe progress on that has stagnated. \nThis is clearly a common use-case we should have a good answer. \n. this div was to keep the virtual + normal list views structure the same. If someone wants to experiment with table support I would be quite excited.\n. Although this seems to make sense, it gets really confusing when you think about a not-fully rendered table, and what happens when new rows enter. Especially as columns change size. Im not sure having table will be any better, then some clever divs + css.\n. closing unless someone has a proposal that makes sense. (i am unsure if using the native table stuff even works)\n. Yes the height and width of the entire listview can be adjusted at run-time. When this occurs the list-view will transform existing listViewItems to the new locations, and create and position any new listViewItems that might be needed. This is meant to make resizing as cheap as possible.\nThis feature should be documented, and is safe to rely on. We have a good number of tests covering this functionality\n@arkadiyk do you think u can add this snippet to the readme?\n. :+1: \n. related:  https://github.com/emberjs/ember.js/issues/3259\n. @jasonmit a jsbin or fiddle would be fantastic.\nit appears there are some issues on rc8. I hope to carve out some time this weekend to dig in.\n. lets leave this open until list-view master works out of the box with the latest ember.\nwe should also start proper tagged releases.\nthe init time property set change  is likely causing some of this grief.\n. @elucid, @twokul and me are hacking together shortly we will correct this.\n@twokul thanks for getting stuff passing!\n. https://github.com/emberjs/list-view/commit/a69f20403745be461f71c72e3f0114266fd30952\n@elucid let us know if other issues exist.\n. hmm, it seems to be scrolling backwords..\n. we should likely transition to 2d transitions, as 55 suggests.\n. height is bound, if u change the bound properties the list-view will recalculate as needed.\n. someone got time for a PR?\n. this requires ruby 1.9 or greater.\n. woop!\n. interesting, i'll take a thorough look afterwork. (or maybe over lunch)\n. @twokul i'll have a short period this evening. maybe around 7 EST?\n. We don't currently support this, although the scenario of \"all the rows are the same height\" should make it easier to implement, then a random assortment of heights.\nSupporting this would be awesome, and as general bandwidth is limited PR's are very welcome.\n. closing in favour of #56\n. phat fingered\n. @billdami you wrap the listView in another entity that provides height/width via bindings. I wouldn't be apposed to a mixin or subclass that has the jQuery resize behavior out-of-the-box.\n. can you provide an example?\nI'll reopen when we have a jsbin/jsfiddle demonstrating.\n. all but (https://github.com/emberjs/list-view/issues/84) of the demos appear to work correctly.\nIs this the same issue you are having or, is their another? If so, can you please provide an example (jsbin or jsfiddle would be great).\n. we work on master.\n. oops, i forgot to merge this one.\n. recommended solution is good.\nIf someone has ideas to another solution, I am all ears.\n. fixed\n. cool i like this idea. Its abit of a heft PR so ill try and find some time to review.\n. ya, i had a quick read, it seems entirely reasonable.  If we can reduce some of the branching it would make me happier, but we not be able to.\n. @kselden i would love some of your feedback (if you have time)\n. Although this looks pretty cool, i am unsure if this should be added to list-view. In theory expanding list-views grid functionality would be accepted, but horiz vs vertical flag doesn't really seem that great.\n. My apologies for leaving this hanging. I also want this functionality, but I would like it instead in the form of making list-view support lazy horizontal and vertical rows at the same time, rather then one or the other. \nI don't mind if you maintain a fork that does this, but I unfortunately won't have the bandwidth to maintain this and the future full grid lazy support. I am also nervous supporting some intermediate manifestation.\nAdditionally this will be out of sync pretty seriously once i merge in the multi-height stuff (which should be this week as i need it for work)\nSorry for closing this, i do appreciate the work put into it!\n. it might also be worth implementing a mechanism of not loading expensive entities until the scroll speed stops (or slows to a specific rate)\nA good example for this is scrolling the facebook feed on iOS, and seeing new images only get loaded when the scroll speed as decreased significantly \n. closing in favor of threshold related life cyclees notifications\n. I mean, the correct solution is to provide the components with the list, information such that they can render expensive things once the scroll rate dips bellow a certain amount.\nIf you scroll around on the facebook iOS app, or other apps with photos, they tend not to load them until the scroll rate reaches a sufficiently slow rate. This helps keep scroll speed nice and snappy.\n. I think we may want to provide it as post of the list view. It's a common enough problem\n. Sorry for letting this idle, it has not been forgotten my time available on this project is unfortunately pretty limited. Hopefully we can get to this sometime soon...\n. ideally we have 2 layers, efficient rendering +  hooks, and then app level features that change + styling for good conventions that sits on top. \n. i think we have most of layer 1, we need layer 2\n. fixed by se\u00f1or @fivetanley\n. <3\n. i think https://github.com/emberjs/list-view/blob/master/packages/list-view/lib/list_view_mixin.js#L469-L470 going through a run.once may mitigate this, I will look closely tonight\n. on second thought, that proposed fix will likely not do anything\n. tests still fail with f7d9223\n. but a step in the correct direction i believe.\n. @jonnii do you have time to help investigate the build failure? I'll get to it eventually, but my Queue of tasks is rather deep\n(cc @fivetanley)\n. As it turns out, we accidentally revoked our s3 key for publishing post build. This is being looked into now be @fivetanely \nWith that version, the jsbin seems to work correctly, closing for now.\n. shoot, thanks for reminding me. I keep forgetting to fix this. I'll drop it tonight\n. Thanks!\n. ya it would be great, unfortunately its a time thing :( We could use the help if you have some extra time.\n. @fivetanley got time? (as you have they keys to are various deploy kingdoms)\n. @FellowMD we would love to add a more descriptive website, but unfortunately are limited by time. Do you by any chance have time to help improve the site? \n. tracking this in #153\n. strange, I am using this in production without issue. Will investigate, but a failing test case would be very valuable.\n. I am always slightly nervous about adding CSS from js, but ya it might be a good idea. Feel free to open an issue specifically to that and we can discuss\n. Coulda sworn this was what @raycohen fixed afew days ago. I assume this is a variation of that\nI'll try to review shortly\n. @teddyzeenny wanna confirm we no longer need f7d9223 ? If so your PR could revert it\n. @teddyzeenny thanks dude!\n. quick solution is to do this.model although the link-to should unwrap and be bound.\n. Awesome, this makes it obvious what the intent is\n. thanks for reporting this and pairing on a potential solution, I like what we came up with. Hopefully it works as expected.\n. as neither of us had time to implement our potential solution, i'll note it here.\nrather then a stable context, we may want to refactor the reusableListItemView to have a stable controller, this controller then handles the various divergent behaviors we need. It also should prevent a new controller from causing an expensive re-render.\n. related: https://github.com/emberjs/list-view/issues/106\n. @bcleary6 your comment appears to be unrelated to this specific issue. Please open a dedicated issue, with a concise example.\n. ember is deprecating itemControllers, as such I have no plans on fixing these issues. As even the current implementation adds unwanted complexity\n. @jmonma ya i added readOnly because most alias's oneWays are really just supposed to be oneWay readOnly's\n. @lukemelia I know you added this, so we should chat about this at work tomorrow.\n. @lukemelia we forgot to talk about this one...\n. Sorry for letting this idle, it has not been forgotten my time available on this project is unfortunately pretty limited. Hopefully we can get to this sometime soon...\n. thanks!\n. :+1: \n. :+1: \n. Can you provide a failing test or jsbin. This will help someone start on a solution quickly \n. anyways, likely related: https://github.com/emberjs/list-view/pull/98\n. @gigafied that shouldn't be needed, I do exactly what you describe with several applications in production without issue.\nLikely some underlying issue.\n. I believe this is fixed on master. If not, i'll gladly reopen.\n(we had some build tooling issues, and the last few masters did not get pushed to s3 correctly)\n. sir @fivetanley got time to work your magic?\n. rebuild has been triggered :)\n. @fivetanley is issuing us a new s3 key.\n. you must include zinga scroller see: https://github.com/emberjs/list-view/blob/master/demos/virtual.html#L37-L38\n. this is likely a documentation issue on our side. If you  have time to look at https://github.com/emberjs/list-view/tree/gh-pages and suggest something that would approve clarity on this topic.\n. +1 for bower support, but i prefer we publish dist to components/ember-list-view the noise introduced for commits and PR's is unwieldy. \n@fivetanley || @rjackson can you guys help out with the release tooling on this? \n. @johnnyshields if you have time and bandwidth, I would be super appreciative for the help.\n. sorry, i actually meant https://github.com/components/ember-list-view, as we have https://github.com/components/ember We will need to but the components guys to give us another repo.\n. @fivetanley / @rjackson either of you guys got time this weekend for this?\n. closing in favor of components repo\n. listview supports an array that grows dynamically. If you detect access to the array near the end of the current window, you can fetch more, and list-view should \"just work\"\n. So to summarize:\n1. it would be great if an example existed\n2. list-view handles dynamically growing lists correctly already (so yes it supports this case)\n3. paging/infinite scroll with lazy loaded data is the responsibility of the controller/data layers.\nI'm going to close this, as it is not a list-view issue, and although I would love to prepare a good demo I don't have the available bandwidth.\nIf a bug exists in list-view that prevents this, I'll gladly reopen (or we should create a new targeted issue)\n. @marinho this scenario is ripe for a blog post from someone wanting some ember street cred.\na SO question is a good bet\n. <3\n. scrollTop is actually currently reserved as non-bindable This is to mitigate the need for run-loops in many scenarios.  This does improve scrolling on iOS. I would prefer to leave this is possible\n. closing this for now.\n. this would be the responsibly of something above list-view maybe a component or controller that is aware of your app.\n. view.scrollTop should be correct. It isn't observable (for mobile performance reasons, but i hope to make this available soon), but can be access ondemand.\n. @lukemelia the problem is that we mutate scrollTop outside of the run-loop so that we don't need to invoke a run-loop if no ember level mutations occur. This means we would only inform bindings when we recycle a view, which only happens every rowHeight pixels.\nI suspect we can remove this requirement as all the mobile phones keep getting faster, but I would like to make this change while doing tests on actual hardware.\n. It seems like in addition to scrollTop, we will want scrollToIndex which is typically what you really want, as with re-sizing or morphing from list to grid, you will want the scrollIndex preserved an don't actually care about scrollTop.\nThis is also nice, because it is something we only need to incremental once every recycle. Rather then at 60fps\n. I believe I'm going to need this shortly, so hopefully i will get time to work on it soon!\n. ReusableListItemView has some quirks :(\nReusableListItemView doesn't re-render itself when recycled, and as such is much faster.\nOnce HTMLBars + ember-metal views land, we should no longer re-render when contexts change. And ReusableListItemView will not be a thing anymore as the primary should be fast enough.\n. @vampolo correct\n. once we metal-views enters ember, the reusable list item view will likely be unneeded as ember views will start doing the right thing\n. <3\n. Scroll to is a exposed but I suspect that the might be slightly tedious\n. are you on master?\n. @roosnic1 :+1: \n. @vampolo sorry for letting this linger, It appears good.. Could you add some tests?\n. @vampolo ping re: tests?\n. @vampolo awesome thank you! \n. @vampolo strange, seems to work fine on my end.\nwhats the output of npm version and which OS are you on?\n. i wonder if thesis an issue with phantom...\nso for reference travis also runs this without problems: https://github.com/emberjs/list-view/blob/master/.travis.yml#L5\nBut for local development, running npm start and navigating to http://0.0.0.0:4200 will run the tests in your browser. So don't worry about the headless tests, travis will catch issues.\n. @vampolo LGTM :)\n. superseded by: https://github.com/emberjs/list-view/pull/140\n. it seems like the innermost div (or the one contained by the transformed div, must be position absolute.\nI will investigate further, if others have thoughts that would be great. If it turns out to be the solution, we must document this.\n. this also seems to happen without an extra innerDiv.. hmmm\n. Although it isn't quite perfect yet, the virtual version does not appear to suffer from this problem\n. We will when time permits. metal-views simplifies a lot of things we had to work around in list-view.\n. I believe @mmun work will make the reusable list item view entirely needless. I am excited!\n. we shouldn't commit dist.\n. travis seems unhappy\n. doesn't seem like its happy yet. triggering rebuild\n. thank you good sir!\n. @cowboyd can you open a chrome issue as well. I believe this is something we need to prevent them from introducing in the wild.\n. @cowboyd did you open a chrome bug?\n. Yay\n. @igillis can you try a PR replacing the usages where this is violated? It is not obvious to me from this Issue exactly where the violations are happening.\n. cc @ofbriggs\n. @ofbriggs I have pulled in your memoization work. Is there anything else outstanding you know about?\n. still some work todo, could use some help on improving the docs/website especially outlining this new feature.\n. @rondale-sc @fivetanley can one of your guys make sure the download links in the readme are up to date?\n. @fivetanley oh? new entirely or just additional\n. for now: bower install rondale-sc/list-view-dist\n. @rondale-sc @fivetanley do either of you have time to move that to components/ember-list-view ? If possible adding a release.md so I know the magic of release\n. @annismckenzie the top level directory should contain the built output. I just confirmed in a sample app and all seems to work as expected.\n. sorry, the test docs are out-of-date\n. <3\n. @jasonmit this is an earlier tracking issue, I will provide you with the video you requested re:strange scrolling when the mouse/os adds its own momentum.\n. fixed by #158\n. @billdami variable row height exists on master. Please note it doesn't measure the height itself that is up to you, the list-view layout code is merely aware of it. see the following test for an example: https://github.com/emberjs/list-view/blob/master/packages/list-view/tests/multi_height_list_view_test.js#L36-L130 \n. no work has been done yet.\n. > I think it would be best to turn this into an addon versus having a shim around it.\n:+1: \n. @marcemira no, not currently. As this route results in some pretty serious performance problems that are quite hard to mitigate.\nHeights must be specified upfront, and currently only rowHeight is dynamic. It should be possible to also bind to each entries height, but it will also come at a cost so it has not been implemented yet.\n. @marcemira also, don't get me wrong I hope to support this in some capacity in the future. My above statements where merely to give information on the current state, and some context as to why.\n. :) I'm working on more of this tomorrow, and some this weekend. Lets see how far i get.\n. fixed by https://github.com/emberjs/list-view/pull/173\n. @sebastianszturo  i'll try to actually addonize it this weekend. It has been extremely overdue.\n. i wonder if we should add the concept of focusing a row, this could handle the promotion/demotion of rows. Children would just need to emit focusRow.... the naming isn't good. I'll noodle on this more.\n. Both,\nAdditionally, something we should chat about is the ability to subscribe to something to know the list has stopped or is slowing down. So we know we can render costly things. For example on iOS you scroll quickly in. A native app, it will often not even try to fetch new images until the list slows. If the images are cached they are rendered right away. I suspect this is a larger concept, but something we may want to look into.\nCc @lukemelia \n. this should work with ReusableListItemView as well , so leaving this open as a bug, although i suspect its a bug in link-to itself.\n. @sebastianseilund yes that is required for, do to how link-to \"binds\" to data, and how reusable list item view does its thing. I am pretty excited for the new HTMLBars + view layer work happening in ember, as those features will ultimately prevent us from needing the ReusableListItemView instead the ListItemView will be sufficient, and many bugs (hopfully) like this one, will go away.\nI should check and see how far along that specific effort is, in-regards to list-view's needs.\n. Nice. I'll thoroughly review this week\n. Unfortunately all this code changes dramatically in the soon to be merged pack branch  work to provide horizontal/grid scroll would likely be split between that and the new packing algorithm library https://github.com/stefanpenner/pack\nAdditionally without tests this is unlikely to be accepted.\nWhen it comes to horizontal scroll, I like the approach were we are basically scrolling through an infinite grid. My skim indicates this is closer to that.\n. list-view reaches into internals to bypass issues with older ember, and as such it does not yet work on 1.8x\n. @arenoir it does not\n. not yet, haven't had time.\n. @mmun maybe we can find some time this weekend to pair on this.\n. I have not looked into it yet so I am unsure. @krisselden may know off the top of his head but I unfortunately won't know till I look into it\n. > Update: I realized this is going to require a bit more work to get Ember.ListViewItem to work.\nIdeally we will deprecate this\n@jasonmit thanks for your help here :)\n. In a future world, ListItemView + ReusableListItemView become the same thing, because ember views will correctly update and not require re-rendering or crazy hacks to prevent re-rendering.\nI suspect 1.8 will require both. Maybe 1.9 or 1.10 won't.\n@mmun / @mixonic / @krisselden will be able to tell us more on that timeline.\n. can you try explicitly adding a { pointer:cursor; } to you a css\n. @lukemelia @krisselden @raycohen seen anything like this in our apps?\n. you must use CSS to style the divs. browsers typically don't like you recycling and re-poisitioning table rows\n. - [x] move padding calculations to the bin\n- [x] get rid of columnCount (move hasGrid check to the bin)\n. add tests for: https://github.com/emberjs/list-view/commit/f5acfd2d6e51a75e1d7dc6aa6d42ffdcb8461d38\n. - [ ] list-view position syncing isn't working correctly when scrolled down and large chunks of content are removed or added.\n. superseded by #204 \n. use {{view Ember.Select content=options value=content.opt}} select was some quirks\n. i got some list-view stuff to-do this week. I'll provide feedback here towards the end of the week.\n. are their questions I can answer re: the failing tests?\n. Will review after over the holiday \n. @kenips actually the internals list-view depends on keep changing, as ember keeps improving more of our internal reachings start to go away. So each ember upgraded stuff gets simpler\n. @jasonmit I would love the to schedule some time for us to interact\n. your late night may be my extremely late night, but lets try it.\n. lets aim for a release over the next few days.\n. then a follow up release for the pack branch\n. maybe  0.1.0 for this\nand       0.2.0 for pack\nMaybe consider 1.0 for a pre ember 2.0 release, and 2.0 for an ember 2.0 release after which i would like to try and keep releases here in lock step with ember.\ncc @rwjblue \n. great work @jasonmit \n. @jasonmit fixed this, thanks for reminding me of this :)\n. might be worth trying https://github.com/emberjs/list-view/pull/173  I believe i added support for this their..\n. @imkmf heightForIndex should do the trick for you\n. @mkolenda sorry for all the config steps needed :(\n. yes, you can choose a view based on content index:\nhttps://github.com/emberjs/list-view/blob/master/demos/multi-height-multi-view.html#L72-L74\nthe API isn't great, but it works.\n. > Doesn't really work with grid view and I would have to add an empty first object in the content, which is not really optimal.\nbut it works, this project isn't at the \"polish phase\" yet\n. thanks, we need to nail down the automation on this project. It's so hard to keep all the pieces moving across all these projects.\n. @kenips would love the help, @fivetanley and @rwjblue are more familiar with that part of our deployment process.\n. @jasonmit awesome work!\n. LGTM\n. <3\n. I think we need to fork or change the scroller. As it doesn't handle momentum correct for desktops...\n. @jasonmit sorry about this one, wanna do a quick hangout sometime? I am concerned the video recording wont demonstrate. Basically the momentum of zynga scrolling and of the touch pad / might mouse affect each other, resulting in strange momentum surges.\n. regardless, if you can rebase lets get this bad boy in. We can improve the scroller later.\n. I suspect this is fixed (or easier to fix) in the pack branch. I promise to find time soon to get that branch in sync in master..\n. amazing!\n. > Why do we use the collection helper?\nlegacy... :P\n. > Why a view rather than a component?\nlegacy\n. > When to use List vs VirtualList? CSS media query to guess when on mobile device? Which mobile OSs?\ntouch enabled devices, various mobiles browsers don't report scroll during the momentum phase, but we should likely make a table of cases.\n. > Is there a build anywhere I can link JSBins to? I see the \"latest\" link but I believe the examples are using .05. Which version should I use?\nthere was once, i suspect the build is borked. We need to resurrect this effort.\n. seems like you are missing the list-view global, does the component form of {{ember-list}} not work for you?\nI am using this in my app without trouble, i'll try to see if i can reproduce your issue\n. works now (although it depends on ember 1.11.1 which will be released with ember-cli shortly\n. i believe this is fixed in the pack branch\nhttps://github.com/emberjs/list-view/blob/master/packages/list-view/lib/list_view_mixin.js#L137-L147\nshould actually be:\nhttps://github.com/emberjs/list-view/blob/pack/packages/list-view/lib/list_view_mixin.js#L228-L239\n. can you put together a jsbin or a failing test?\n. seems like a bug we should fix, that being said, im not sure why createChildViewsMorph is needed here at all. @jasonmit do you remember why?\n. good incremental step :+1: this looks good to merge right now.\nAny time/interest in moving it to a full ember-cli addon, with app/* and addon/* and automatic transpiling\n. @taras awesome, thanks dude.\n. @jasonmit thanks :) Maybe we can pair on this soon!\n. > Fixed tests to start runloop when creating views\nThis seems in-error. Or something I am not aware of changed in ember, and may have been a mistake.\nI am very happy this is moving to compatibility, but it does appear this isn't backwards compatible. Either we need to figure out a strategy to support both, or we need a different release/versioning strategy.\nGoing forward, I would love for list-view to just be in lock-step with ember, so the compatibility can also remain ember-version locked.\n. > I don't know how to test for this.\ndid u test manually between those versions?\n. > Yeah, I blew away dependencies, changed version in bower.json, ran install and then ran tests\nAwesome, that is good enough for now.\nIt's abit tricky to get tests to run across multiple version. But maybe something some future effort can make easier for ember-addons.\n. woohoo!\n. https://github.com/emberjs/list-view/issues/193 solves the problem entirely, without needing the intermediate build step\n. :+1: \n. interesting\n. > My guess is that this library would be added by the blueprint, right?\nwe should just bundle it i this repo, and the act of using virtual list view should pull it in.\n. @taras this is like good to merge :)\n. that was extremely satisfying.\n. I have very little  motivation to support globals, but if that is a popular request we can easily support it, but wrapping the output with it's own local loader and re-exporting the things we need for globals.\n. > I think we spoke about bringing over something comparable to what liquid fire does to handle custom builds. It doesn't involve globals :)\nah ok\n. Good quick hack, but I suspect that code should be in the brocfile anyways. So before we cut a new-release lets try to move it there.\n. @taras and me resolved many of the issues, several stream related ones remain\n. @marcemira https://github.com/emberjs/list-view/pull/219 is the WIP PR, it will likely work for your needs, but we still have some failing tests to fix. Unfortunately we haven't had a chance to bring those to completion yet.\n. @mrinterweb you don't need to build that PR, it is an addon, it should just work as other addons\ncc @taras\n. @mrinterweb npm can download git repo's and branches aswell\n. most of this looks great, 2 things:\n1. import ListView from 'list-view/list-view' is kinda crappy\n2. should we bike-shed the nameListViewnow or later? I thinkember-list-vieworlist-view` is good, even if it it does a grid, or variable height grids. As it is common to want to display a list-in many ways.\n. > @stefanpenner what about ember-masonry (rim-shot).\nheh, maybe once/if we actually support more packing algorithms. Unfortunately writing them in way that supports memorization, that is incremental + bound data structure friendly in a performant way is tricky. But i hope it happens someday :)\n. > Can we do import ListView from 'ember-list-view'?\nthis would be lovely.\n. actually its kinda crappy, @joliss had a good idea but we haven't implemented it yet. For now it actually uses the re-exporter. https://github.com/ember-cli/ember-cli/blob/e38e6d8a65b9977ad3f51bbf57336deb77f2fd56/lib/models/addon.js#L472\n. > @ebryn suggested that we call it ember-list-view\n:+1: \n. it works as of iOS 8 they now report the scroll events even during momentum phase, which means you don't need to use the virtualListView on the newest iOS's\n. yes please\n. :+1: \nyes, I forgot that block helpers can't be bound.\n. actually, this.scrollTop was left as non-observable for performance reasons. Especially when tuning for some of the extremely crappy older android devices.\n@ruperteder i suspect your code is accidentally observing scrollTop?\n. yes, it is currently not public API because of this. Although something like this should likely be public, but likely an action.\n@ruperteder can you share an example of your usage ?\n. :). I do suspect some addition api, likely an action should exists to fill this void. But observing scrollTop is nearly always some work around for something else.\nDo you mind if I close this PR?\n. list-view works hard to minimize work, it doesn't even enter a run-loop until something actually needs to change. So exposing _scrollTop as something observable forces us to do lots of extra work at often > 60FPS.\nUltimately my concern is only the slower android devices, hopefully they age out.\n. LGTM, @taras r?\n. <3\n. @taras it was fun pairing on this stuff! I'll have time again Sunday for another round\n. Yes. I am unfortunately spoken for until sunday. I may be able to sneak in some time before then. But does sometime Sunday work for you?\n. sinister sounds like fun to me\n. It is currently not targeting ie8. \n. left a comment but still +1\n. @pedrokiefer tests appear to be failing\n. released as 0.0.6\n. :dancers: \n. pushed,\n@taras has been added as an owner, @tim-evans what is your npm username?\n. the following is known to work:\nhbs\n{{#ember-list height=100  items=model.items width=100 rowHeight=20}}\n  <div> hi </div>\n{{/ember-list}}\n. i think the docs are just out of date, only the helper form uses items=\n. in-fact item just becomes content https://github.com/emberjs/list-view/blob/master/addon/helper.js#L20\n. looks like you may answered your own question?\n. > ^ No that doesn't work. It creates list of list-item-view but each view is empty.\nah, that was not clear from your comment.\n. unfortunately I am unable to reproduce issues. Feel free to submit an example app showing your pain point, and i'll be able to look later this week.\n. you must add an addition element within the row to have bound classes.\nhbs\n{{#ember-list height=100  items=model.items width=100 rowHeight=20}}\n  <div class=\"{{myClass}}\">\n    Hello\n  </div>\n{{/ember-list}}\n. we may open up support to the inner row in the future, but at the time, due to an issue in ember we could enable this.\n. likely something we need to address in the docs.\n. why not just use non-virtual? \n. I believe recent iOS sorted out the main problem. It would be worth seeing how your app performs \n. we likely need to add hooks to invalidate the height externally..\n. This is something that may get added once @taras has a chance to help me finish syncing pack branch into master.\n. I think this was working around visual artifact issues. Maybe @krisselden can shed light\n. @daem0ndev I know yapp where @krisselden and @lukemelia work uses virtual on android. I am surprised you are having issues\n. Can you provide an example. Does this affect both virtual and non virtual. Which a versions of ember/list-view does this affect\n. Maybe you can share the cause. So future travelers can solve there issue easiser\n. > This is very disappointing because other than this issue,\nya it's a bummer, we will need to fix this. But a good scenario :)\n. > This will probably be fixed on the pack branch.\nmaybe, im unsure about this specific use-case though. But i'll be working with @taras this week to fixup @krisselden's code so we can actually merge pack finally. At which point, we should likely add ^^ as a test case.\n. nope, this one isn't supposed to be wrapped in a bind.\nBasically, only very a small subset of the scroll events must actually trigger ember mutations. So we handle that internally.\nYou are likely observing scrollTop, which is not currently supported.\n. > @stefanpenner what are scroll events should trigger ember mutations?\nBasically, we only need to enter ember world, when a view is recycled. Although we may receive scroll events extremely often and quickly. We only need to update the scrolling slabs position each scroll event.\nEvery 1/8 or so scroll events (depending on the scroll rate) we need to recycle views, this is the only time we actually need to enter the run-loop.\nDesktop browsers wont notice but some of our slower mobile browsers will notice.\n. > @stefanpenner ok, i understand you, think one may close pull request.\nSometime in the future i hope to restore this functionality.  Likely as devices get faster, and as ember gets faster :)\n. Ya. We are aware. Just lack the time currently to update it. Hopefully soon :)\n. > @stefanpenner is there any low hanging fruit that I could help with here?\nI don't believe so, the upgrade will require some effort. I would be excited if someone had time for it soon .\n. @taras sounds great :) See you at dinner!\n. > @stefanpenner @taras Any news from dinner?\nI plan to take an afternoon this week to dig into the current status of things, and we hope @krisselden is in-fact able to get some time to come up with an MVP we can role with.\n. > Sweet if there are any easy to explain items on the punch list feel free to post them and I can try to tackle as time allows\nya, i haven't even gotten to that phase yet\n. i believe @krisselden and @raytiley are working on it\n. like: https://github.com/ember-cli/ember-cli/commit/6ac18227ea571988fa9d9950e9a1051fdd990c7c\n. Let's rename the other one. As it has meow context and ongoing messaging as progress is being made\n. LGTM \u2013 when the above comment has been resolved.\n. Although this list has the best of intentions, it was removed for several reasons: \n- there are several key people who contributed advice and guidance, and set much of the groundwork (but they did not directly contribute commits), where to draw the line is ambiguous.\n- the list is hard to maintain, and it turns out (for commit contributes) github provides a a great interface that stays in sync.\nWe all really appreciate the contributions of everyone on this list, and those that helped but are not on the list, but we should likely leave the README shout-out out.\n. the classNameBindings issue is very low priority, as reusing views is basically only used in listView. I would likely leave out that this is on a list to fix, rather just leave it at \"known caveats\"... As we don't want to give false hope.\n. Ember.run.later\n. This specific refactor should likely also be tested.\n. can you extract this to a helper method\n. can you also be explicit about the length check, just so its entirely obvious contentLength === 0\n. this should only be called if we now have length change, that results in > 0, which would likely also only be in the branch @ 528\n. you should also test that once the content goes back to 0, that the empty view is restored.\n. a good point, we likely need to check both. My goal is just want to mitigate going down that branch if we know we don't need any work.\n. i think this is fine then. We can always revisit\n. this should likely be a oneWay readOnly CP\n. this should happen during afterRender\n. can we do this via npm run bower-install  (this way we use the npm local bower, kinda like bundle exec)\n. i would prefer f we remove all uses of syncForTest\n. this should be npm run build-all\n. This was done for performance reasons, bypassing everything and directly applying to the element itself. That being said, it seems like in metal views we will need to take a different approach. But going through all this extra machinery will likely hurt mobile \nIf this helps us get to 1.8, then that is fine. We can re-invest after to make it performant if it is an issue.\n. haha sorry :P \n. we should (as time permits) sorta that out.\n. this.isDestroying || this.isDestroyed should be fine, as those are explicitly non observable properties.\n. ah, good catch.\nSometimes i think by default this is the functionality observers should just have.\n. :+1: \n. I am slightly concerned introducing this via a binding, re: perf. Older mobile devices blow.\nThat being said, I am fine we can always revisit this perf concern later if it proves to be a problem still.\n. :+1: \n. how about list-view users just pull in the code like ember-addon's do, and get the primary app to build the es6\n. i would prefer for ember-cli users to not also force a bower install. Instead consume the es6 directly.\n. > soon we will be the rails of slow boot times :P\nnah, lots of work being done to improve the various parses + broccoli, additionally we have plans to add fast-boot of sorts.\n. @rwjblue any ideas what changed that make extend require a run ?\n. @taras what is causing the run-loops here, it should be sync.\n. i think this should remain consistent, row-height element-width.\n. this is a bug.\n. looking now\n. its not a bug in your code, but it is making several issues in list-view apparent. I am also surprised this wasn't an issue pre the latest beta.\nI need to grab dinner and stuff, I'll try to look more closely afterwords \nTL;DR initial render should create views with the right context, rather then create them, then add the context. This is causing additional change events an re-renders.\nI need to think about how to implement this nicely in list-view. As it will result in a much better initial render.\n. Unfortunately this doesn't appear related to your PR, rather just something we will need to fix sometime afterwards https://github.com/emberjs/list-view/issues/196\n. keep it for now. The fix is likely some-time off.\n. just kategengler/ember-try should be sufficient\n. lets make this npm run test:all\n. because some mobile browsers\nit also can happen if the browser is under heavy load, it will just stop emitting some events.\n. this should likely be, if you do experience this problem. We offer an API compatible VirtualListView that does the momentum scroll entirely in JS\n. still needs readOnly\n. this is a prototype extension, which means it wont work for users with those disabled, please use the long-form version\n. ",
    "cryptoquick": "+1 for this...\n. ",
    "jrabary": "Yes, I'm thinking of lazy fetching large lists of data. I can't figure how to make this.\n. ",
    "willemdewit": "Is it possible to use the 'meta'-data instead of the total size of the array returned from the server? The list should have the length of the meta[total]-property and should provide a hook for fetching new pages. That way, the list-view supports pagination.\n. ",
    "runspired": "@jrabary I need lazy loading for lists with large amounts of data as well, did you get anything hooked up where there's an example/proven approach I could build off of or is this still a \"start from scratch\" item.\n. ",
    "ralfschimmel": "Ensure you have ruby installed (1.9.3 works for me).\n$ bundle install\n$ bundle exec rake dist\nThen check your dist folder.\n. Try\nbundle exec rake\nOp 21 apr. 2013 om 19:41 heeft \"Grayson Koonce\" notifications@github.com<mailto:notifications@github.com> het volgende geschreven:\nHere is the bundle install output\nbundle install\nUsing rake (10.0.3)\nUsing colored (1.2)\nUsing diff-lcs (1.2.0)\nUsing multi_json (1.5.0)\nUsing execjs (1.4.0)\nUsing mime-types (1.20.1)\nUsing posix-spawn (0.3.6)\nUsing grit (2.5.0)\nUsing listen (0.7.2)\nUsing kicker (2.6.1)\nUsing rack (1.5.1)\nUsing json (1.7.6)\nUsing thor (0.17.0)\nUsing rake-pipeline (0.8.0) from https://github.com/livingsocial/rake-pipeline.git (at master)\nUsing rake-pipeline-web-filters (0.7.0)\nUsing uglifier (1.3.0)\nUsing ember-dev (0.1) from https://github.com/emberjs/ember-dev.git (at master)\nUsing bundler (1.3.4)\nYour bundle is complete!\nUse bundle show [gemname] to see where a bundled gem is installed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/emberjs/list-view/issues/5#issuecomment-16737862.\n. ",
    "breerly": "After running the commands I still cannot rake, I get the following output:\nsudo rake\nhttps://github.com/livingsocial/rake-pipeline.git (at master) is not checked out. Please run `bundle install`\n. Here is the bundle install output\nbundle install\nUsing rake (10.0.3)\nUsing colored (1.2)\nUsing diff-lcs (1.2.0)\nUsing multi_json (1.5.0)\nUsing execjs (1.4.0)\nUsing mime-types (1.20.1)\nUsing posix-spawn (0.3.6)\nUsing grit (2.5.0)\nUsing listen (0.7.2)\nUsing kicker (2.6.1)\nUsing rack (1.5.1)\nUsing json (1.7.6)\nUsing thor (0.17.0)\nUsing rake-pipeline (0.8.0) from https://github.com/livingsocial/rake-pipeline.git (at master)\nUsing rake-pipeline-web-filters (0.7.0)\nUsing uglifier (1.3.0)\nUsing ember-dev (0.1) from https://github.com/emberjs/ember-dev.git (at master)\nUsing bundler (1.3.4)\nYour bundle is complete!\nUse `bundle show [gemname]` to see where a bundled gem is installed.\n. @kamal the demo doesn't appear to be working. I was trying to open it via my iPhone.\n. Got it.\nrvm autolibs enable\nrvm install 2.0.0\nrvm use 2.0.0\nbundle install\nrake\n. ",
    "twokul": "@christophermanning \"ul > li\" scenario is not supported and there's no short plan to support that as of now. But please feel free to investigate and submit a PR. We would gladly look at what u come up with.\n. @kamal yes, demo doesn't seem to work. could you try this demo and let me know if you still have the same issue?\n. https://github.com/emberjs/list-view/pull/26\n. @mehulkar could you take a look at this link and share your example with us?\n. @mehulkar you shouldn't have any problems but I would suggest you to upgrade.\n. @minusfive thanks for catching it! I wonder if we should just update list-view required css with:\ncss\n.ember-list-view {\n  overflow: auto;\n  position: relative;\n  z-index: 1;\n}\n.ember-list-item-view {\n  position: absolute;\n}\n.ember-list-scrolling-view {\n  position: relative;\n}\ninstead of using scrolling events for that. /cc @stefanpenner \n. @Gargron it's something we're planning to do in the near future\n. closes #43 \n. @stefanpenner si, senior\n. @jasonf20 you cannot use list-view with tables like that, we use divs instead. is there a reason to use table?\n. @jasonf20 also, what do you have setInterval inside setupController?\n. I'll try to take a look at it today\u00a0\nthanks,\n/alex\nOn Tue, Sep 3, 2013 at 7:57 AM, Stefan Penner notifications@github.com\nwrote:\n\nhmm, it seems to be scrolling backwords..\nReply to this email directly or view it on GitHub:\nhttps://github.com/emberjs/list-view/issues/70#issuecomment-23707128\n. it seems like IE 10 doesn't support nested 3d transforms, still looking into it.\n. @stefanpenner might be an option\n. @HEMENDRA27 jsbin would be helpful. thanks!\n. @jankopriva @stefanpenner I remember adding these tests, but as always\n\n\n@stefanpenner do you want to pair? I'm pretty sure it's something simple\n. @jankopriva :+1: \n. I feel like I'm missing something obvious here.\n. ",
    "Leooo": "The following condition is always true?\njavascript\n  if (start >= this._lastStartingIndex || start < this._lastEndingIndex) {\n=> This should be \"&&\" instead of \"||\", more precisely:\njavascript\n  if ( (start+Math.max(addedCount,removedCount) >= this._lastStartingIndex) && start < this._lastEndingIndex) {\n?\n. I see another thing too, opening a new issue as I never know if closed issues are red.\n. Wow you lost me. The only thing that I noticed is that, whatever the value of start, if this._lastStartingIndex < this._lastEndIndex, then the above condition is true.\nMoreover, at least in my case (content array built using a reduceComputed property), even with the changes above which help, arrayDidChange is still running too many times (around square times the number of items). Adding an Ember.run.once condition to launch the forEach loop solves the redundancies, I hope it is alright to use run.once here.\n. OK forget my second point above then, the first point, your initial comment for your code was:\n\"// ignore if all changes are out of the visible change\"\nAnd this is how I understand it: check that the changes are in the visible range. In that case, this should be \"&&\" not \"||\".\nLeaving the issue closed it works on my side now.\n. Fair enough, not able to provide a test given my Ember level so forget it.\n. ",
    "thomasboyt": "Fixed by c11336d.\n. ",
    "KenanBek": "I want to become ember.js contributor and reviewing all previously happened issues. It is interesting to me: This issue have been created 11 month ago. In comments I understand that there is no actual bug. But why issue's status still Open?\n. ",
    "krisselden": "I know what it is\n. @joefiorini thanks for catching this!!\nI triaged this, but it is actually an issue with ember: https://github.com/emberjs/ember.js/issues/2572\n. That is exactly what I mean, clearRenderChildren doesn't actually remove the rendered children, it just calls destroy, it expects that the children will remove themselves from their parent view, but _SimpleHandlebarsView views do not do this.\n. fixed scrollbar layering with c55ae13c5c75b4af7857bbf4b4da3f09b552d75a\n. @kemenaran the underlying cause of the initial report of this bug was fixed, but there maybe something you are doing inside of the list item view or css that causes the same symptom as this bug. Can you make a jsbin or fiddle demonstrating the problem with the latest version?\n. before you were binding each to the controller which was sorting, now you are binding to the controller's underlying content\nyou should try {{view App.EntryListView contentBinding=\"controller\"}}\n. @stefanpenner transform2d provided the perf without the bug was the conclusion of our discusion\n. @twokul I'm about to submit a fix for this\n. In order to handle scrolling itself, the virtual list view preventsDefault() on touchstart or mousedown, code would have to be added to disambiguate a horizontal drag from a vertical and manually trigger the drag events.\n. synthesizeClick is a workaround specific to input fields not for getting a click event where it wouldn't be synthesized normally. If you want an element to get a click event on touch use an  or  or style it with cursor pointer\n. @tim-evans https://github.com/emberjs/ember.js/pull/5493\n. @stefanpenner this was in the zip file I gave to you and @taras \n. @tim-evans this will be how it has to work for ember 2, I'm planning on moving it away from item views.\n. @taras what is the status here?\n. @taras I'll try to help you shortly, I have to do some more refactoring beyond this too, to get to an API that feels right for Ember 2.0.  I've got a plan, it will affect a few APIs, like the item view stuff, it will be more about layout and yielding, no more item view class stuff.\n. you'll be able to refactor item view stuff using the component helper within the block.\n. @daem0ndev there was a chrome bug with compositing, mac scroll bars, and 3d transforms that would composite the render buffer on top of the scroll bars.  I haven't checked recently to see if it has been fixed.\n. @shaunc to reiterate what @raytiley said, there is only one template we were hacking on https://github.com/krisselden/list-view/blob/2.0.0/tests/dummy/app/templates/simple.hbs which is what you should look at if you are looking to try it out.\nAlso, will be moving to a branch on this repo soon.  As for 1.13 support, I plan for it to pass the 1.13 tests, I'm just not sure I plan for IE 8 support.\n. No views\n. @jdjkelly this will not be an issue with the next major version of list-view, since takes a very different approach to fit with the glimmer update in 1.13 and 2.0\n. ",
    "joefiorini": "Thanks @kselden! What exactly do you mean by \"triage\" here? Looks like you committed some code, is it a workaround for the Ember bug or something that will fix the leak once emberjs/emberjs#2572 is fixed?\n. @stefanpenner reopened?\n. ",
    "mehulkar": "Working on making the jsbin from that link @twokul. PS I'm using Ember RC1. Is that a potential problem?\n. Closing this. I hadn't included the required css from the readme. Including it breaks the rest of my layout, but I should be able to fix it. \n. ",
    "pivotal-medici": "I think I accidentally created the PR from master. I've re-created the PR from the branch.\nhttps://github.com/emberjs/list-view/pull/40\n. Yeah sorry forgot about the initial in the PR. My name is on this really useful commit ;P\n-- AK\n. ",
    "jankopriva": "I have run into this recently, any plans to address this? Thanks.\n. ",
    "minusfive": "I tried this, and unfortunately won't work because it would cause .ember-list-scrolling-view to be constantly positioned on top of the .ember-list-item-views. It could work if we also added pointer-events: none; to .ember-list-scrolling-view, but Internet Explorer doesn't support that property (yet?). Perhaps with some Internet Explorer specific hack on top of it?\n. Heres one solution for IE http://www.vinylfox.com/forwarding-mouse-events-through-layers/\n. Also, my pleasure @twokul ;)\n. Sorry, so the pointer-events: none; trick won't work either, precisely because it simply transfers all mouse events transparently to the rows, which leaves us back where we started (just tested on this fiddle: http://jsfiddle.net/minusfive/Fs4fY/).\nI forgot I had already tested this :P\n. Yeah, this one is tough to test. I'm spending some time this week familiarizing myself more with all the pieces, seeing whether I can come up with a good solution for this.\n. I think it may be related to this https://code.google.com/p/chromium/issues/detail?id=241476\n. @mixonic thanks for looking into this!\nI was going through your code and feel you're definitely going in the right direction\u2014I feel that adding the pointer-events: none; to the list-view-items is definitely a more semantic solution than the one I came up with (position: relative; to the .ember-list-scrolling-view), since it's stating the effect we aim to accomplish, on the elements we want to affect. And we only need it to work on browsers which support this CSS property, so it's perfect.\nHowever, I wonder if the mixin is the right place for it, considering it is also used by VirtualListView, and we don't really need it there. I have a feeling this would work better on the ListView itself. What do you think? I'm going to give it a try now, see if it works.\nAlso, and this may be a minor thing, but the .scrolling class could probably use better namespacing, perhaps something like .ember-list-view-is-scrolling would be better?\n. Also, perhaps instead of requiring another piece of external CSS, considering this (and other properties) are required anyway, we should probably put them inline, along with the others already in use. Thoughts?\n. I just tested and can confirm both the bug and the solution also apply to VirtualListView... on desktop browsers. On touch devices it doesn't, since for inertial scrolling you must remove your finger from the screen, and there is no cursor in that case so there are no \"mouseover\" events to be triggered.\nThe question, then, is whether it is still necessary on Virtual, considering its main use case is touch devices.\nOn my apps I prefer to test for whether the client is a touch device or not, and use the right class in each case; but I can see why someone wouldn't do that, and would prefer to simply use Virtual all the time. I guess in those cases it's better to have the solution present in both implementations.\nNot sure I agree with you on the external CSS vs. inline, though\u2014which is more ironic than you think, considering I'm usually on the other side of this argument. I think that in cases in which the CSS controls some variable behaviour (like turning animations on/of, manipulating their timing/direction, x/y position, dimensions, etc.), external CSS is definitely the way to go. But in cases where the CSS is fixed and required, it should be part of the implementation so the possibility of user-error is reduced. Just my 2\u00a2, of course.\nBut if everyone agrees on keeping the CSS external, what do you think about better naming of the class?\n. Thinking more about the external vs. inline CSS thing, perhaps your solution is better since it's only applying the class to one element, instead of adding the inline property to every item-view while scrolling, which [seems like it would be?] slower.\n. I split the z-index issue into its own: https://github.com/emberjs/list-view/issues/54\n. So please hold on this. We've been discussing with @kselden and a few changes need to be made here. Will update asap.\n. Yeah, I'm terribly sorry guys, the project I've been working on has been ramping up for launch, so I've been busier than anticipated. Haven't had a chance to continue work on this.\nPlease move forward without me, and thank you so much for your work.\n. Awwww yeah!\n. ",
    "mixonic": "I've got a clean fix for this, I believe: https://github.com/mixonic/list-view/commit/adfc03c6442e0947946d58d94a43e497a9b3beac\nBut I am having issues getting the tests updated for rc5. That patch requires rc5 for backburner.debounce. I'm also not explicitly removing the scrollYChanged listener, but I don't believe it is required.\n/cc @kselden from our chat earlier.\n. @minusfive I know Safari and Chrome exhibited the bad behavior. This code looks good in Safari, Chrome, FireFox on OSX and IE9 with click testing. @kselden's fix for the scrolling element is part of why my change is clean- I suspect mouse events on the scrolling element would have needed to be blocked with the old dom layout.\nLingering issues:\n- Tests. I'm kind of blocked on getting tests to run with rc5. Stefan offered to pair on it.\n- I believe Kris has an alternative strategy for stopping mousemove events. And legitimate concerns about this blocking click events and such while scrolling (I'm willing to take that compromise).\n- Virtual should be tested for the same bug. I don't expect to find it there, and if it is not there the fix should only be applied to list-view.\nPersonally I'm happy to keep this fix in CSS. Let's not go crazy adding a third thing (inlining more styles) to this ticket :-)\n. Yeah, I haven't looked at the internals here in a long while. @raytiley let me know if you run into anything confusing and I'm happy to lend an eye.\n. @jasonmit happy to vet the use of Ember's rendering API in a PR! Wish I had the time to dive in with you :weary: \n. It is hard to tease out what is just old copy-pasta-with-one-super-important-change and what is intentional. The nature of the beast I presume.\nIn general, if you are ever passing around an innerHTML string, you are probably working too hard. Metal-views means the rendering pipeline wants DOM and not strings (the buffer creates DOM from strings for you).\n. Look as sane as anything in list-view to me :-) :+1: thanks @jasonmit. I'll give @stefanpenner the final word.\n. :+1: :+1: :+1: \n. Maybe an _scrollTop is in order\n. multi-line makes for good great debugging\n. What calls this?\n. So the special sauce is that you always want to create a child morph on a the first child element instead of the view's element. Gotcha.\n. Likely you could just do that instead keeping all this logic. I don't think you need support for tagless views on this mixin, for example. And it confuses the intent of the code.\n. fwiw it should still be possible to use a buffer instead of a whole view. I'm surprised to see createElement in the wild.\nvar buffer = new RenderBuffer('', element);\nview.render(buffer);\nview.element.appendChild(buffer.element());\nSee https://github.com/emberjs/ember.js/blob/stable/packages/ember-views/lib/system/render_buffer.js for details. I think that code should work, and avoids all this innerHTML and view creation stuff.\n. I'm not sure what should be going on here. The renderer should be doing all this.\n. I means with the recursive invokes/triggers. Seems like you are managing hooks that Ember should be managing.\n. this schedule once might be faster as a mark-as-dirty, render-if-dirty-and-clean process.\nbut it seems rare that context would switch multiple times in a single runloop.\n. I bet this loop could be cached, or the proper prop-mapping determined at load time instead of render time\n. Might be able to pass a fragment here, just a DOM node instead of a string.\n. I believe view.element will be sufficient.\n. Strong in the ways of the morph is this one.\n. ",
    "kemenaran": "Is this issue really fixed? I ran into this problem today, using the latest ember-list-view version.\nI eventually subclassed the ListView and disabled pointer-events during the scroll; is this expected?\n. Here is a JS Bin demonstrating the issue in Webkit browsers (tested on Chrome 30 and Safari 7).\n1. Put the mouse cursor over an item of the list (see the hover effet)\n2. Scroll the list quickly and repeatedly using an input method that trigger inertial scrolling (like a trackpad)\n3. Half of the time, instead of decelerating slowly, the scrolling stops, and the whole page bounces instead\nThe issue doesn't appear if the cursor is over a section of the list without text (for instance the right side of the sample).\n. @stefanpenner ok, so I'm not just misusing the ListView :) Should this issue be re-opened, then ? Otherwise I can create a new one.\n. Note that the issue can be worked around by disabling the hover effect during the scroll.\n. Shouldn't this rather be ms: '-ms-' + prop ?\nWithout this change, applyTransform attempts to set a style like msTransform: translate(\u2026); \u2014 and it breaks on IE9, as it want -ms-transform: translate(\u2026);.\n. ",
    "arkadiyk": "@stefanpenner Thanks for the suggestion!\n. I found that view.set('height', new_height) surprisingly just works.. Here is a code snippet which works for me:\ncoffeescript\nApp.TheListView = Ember.ListView.extend\n  height: 500\n  width: 960\n  adjustLayout: (new_width, new_height) ->\n    @set('width', new_width)\n    @set('height', new_height)\nSince this feature is not documented I am not sure if it's safe to rely on it though.\n. :+1: Thanks @kemenaran for the work around! You saved my day :)\n. :+1: \nI just bumped into this issue as well\n. ",
    "joselo": "Thanks @kselden \nI was doing as the README file said \nhtml\n<script type=\"text/x-handlebars\" data-template-name=\"index\">\n  {{view App.ListView contentBinding=\"content\"}}\n</script>\nThanks again!!\n. @twokul thanks :+1: \n. ",
    "isaacbowen": "Missing a code sample; apologies. In Ember/Handlebars 1.0.0-rc.4, the collection Handlebars helper trips up when it tries to extend the undefined emptyViewClass. This patch defines that property the same way that CollectionView does (vis).\n. ",
    "iest": "+1 for this. Tried doing the dirtiest of hacks and couldn't quite manage it...\n. ",
    "borisrorsvort": ":+1: \n. :clap::clap::clap::clap:\n. ",
    "tim-evans": "I need this for our app, so I'm going to take a stab at this. I'd like to contribute back, but would like some design feedback.\nSproutCore's implementation had the following for ListViews:\n(Starting from https://github.com/sproutcore/sproutcore/blob/master/frameworks/desktop/views/list.js#L170 for those of you brave enough to delve into it).\nThe implementation used an IndexSet that told the view which indexes in the list had custom heights. It would then ask a delegate what the height was for those indexes whenever they were rendered.\nWhen I was using it, I had trouble wrangling some of it. I think that a more suitable approach would be to assume that content heights will vary because the type of item is distinct. So I propose a mapping that would map property paths on the content of the item to the height:\njavascript\nEmber.ListView.extend({\n  rowHeight: 50,\n  customRowHeights: {\n    isHeader: 20\n  }\n});\nIf the height should be computed on a per-item basis, then I think the following approach would be useful:\njavascript\nEmber.ListView.extend({\n  rowHeight: 50,\n  customRowHeights: {\n    isHeader: function (content, contentIndex) { // What should be passed in here?\n      return Math.log(contentIndex) * 5;\n    }\n  }\n});\nIf every index should be handled, then the following code should work:\njavascript\nEmber.ListView.extend({\n  customRowHeights: function (content, contentIndex) {\n    return 20; // Equivalent to `rowHeight: 50`\n  }\n});\nAny feedback on this? I can also implement the IndexSet approach, but I feel that is disjoint from the design aspect. I would prefer to tell the list view what I want, with it divining the correct layout rather than having to jump through hoops to tell it which indexes are different and what the height is for each of those indexes.\n. I would also like this so the list view is a direct member of the body element and incrementally renders when the page scrolls\n. The path going forward for this project is as an ember-cli addon. I agree that it would be nice to be able to use this as a bower addon.\nFor the meantime, let's put this on ice until list-view has moved to an addon.\n. Controllers are going to be deprecated, so I don't see this as a big priority.\n. I believe that this will be solved by #185. (When it's merged in, that is)\n. This should be resolved when #185 is merged in\n. I'm trying to update my app, and I'm stuck on this ticket. Any pointers as to how to get this working?\n. I did some work and came up with the following solution:\nInstrumented blocks are not called unless there is a subscriber on them. Therefore, all instrumented blocks should go away -or- ember should be updated to always call these blocks.\nThe domManager should be removed as per above, and override render on the ListViewMixin:\njavascript\nrender: function (element) {\n  var renderer = this._renderer;\n  this._childViewsMorph = renderer._dom.createMorph(element.lastChild, element.lastChild, null);\n  return element;\n},\n(Updated to reflect master)\n. @krisselden thanks!\n. @mmun has the correct solution. I'll update my comment so it is relevant with master.\n. I couldn't get this working on master of ember. :< Once the beta-2 comes out and I upgrade our app, I'll dig in yet again. (@mmun - not sure if your change broke the change in scope for ListViewMixin or not.)\n. Ooooo! That's fantastic news\n. closed by https://github.com/emberjs/list-view/pull/203\n. Wait... do you still want to handle the blueprints?\n. Cool. I'd consider this ticket closed, then.\n. This is a duplicate of #153.\n. Mr. @samselikoff is working on the documentation ticket for this. If you'd like a separate ticket for deprecation warnings, we'd definitely welcome that!\n. (This is blocked by #173)\n. @imkmf @stefanpenner is working on the pack branch- he's stuck on a bug here in the pack code: https://github.com/stefanpenner/pack/blob/master/index.js#L259-L282\nAny help would be very welcome :)\n. No problem! Could you let us know which library you moved to? It'd be good to see where people are landing.\nCheers!\n. That seems like the best choice for variable height rows at the moment :)\nI'll close this issue as you're no longer tracking it.\n. @codepreneur master is currently updated to work as an addon. Could you test to see if the current version works for you? If not, we can add another item to ember-try for your particular version. Thanks!\n. :+1:  #193 seems like the right place to do this work\n. list-view currently doesn't work as an ember-cli addon, but it will in the near(ish) future. For now, please use the download as a file under vendor in your ember-cli app and import it by calling:\njavascript\napp.import('vendor/list-view.js');\nDocumentation and installation instructions will be updated when the 0.1.0 milestone is complete.\n. You also may have to build the repo by following the instructions in the README.\n. Yep! Keep in mind that that will be deprecated in favor of the canonical ember-list-view addon that will be published as part of the 0.1.0 milestone.\n. Thanks, @mysterlune - I'll be sure that this gets done when 0.1.0 hits :)\n. @sly7-7 I believe this is fixed by the recent merge by @taras.\n. Thanks :heart: \n. @oskarrough The template you provided is a good interim step for refactoring.\nYour template would change to:\nhandlebars\n{{#ember-list items=model height=500 rowHeight=40 as |track index|}}\n  {{track-item track=track fish=controller.something}}\n{{/ember-list}}\n. Correct. This isn't implemented yet.\n. @krisselden super!\n. I was on 1.11-canary, which worked for me. I'm not sure what happened between the releases\n. Hrrm, you use bower install ember#canary, but that would leave you at 1.12 canary rather than 1.11\n. Closed by #225 \n. Closing this because of #225 being merged. :+1: \n. @ruperteder is it ok for us to close out this ticket?\n. :heart: \n. tce\n. I think this has to deal with list-view not processing view recycling fast enough for the browser.\n. Try https://github.com/ef4/ember-giftwrap :)\n. This is unsupported. Could you explain your use case so we can figure out how to creat cowpaths for you to do this?\n. I think there was a reason for this. Would anyone like to shed some light on this decision?\n. This will probably be fixed on the pack branch.\n. Closing in favor of #91 Thanks for the report!\n. A component is a view, but I think there may be some corner cases around this. I would recommend that you simply use a component in the template rather than the view declaration. @stefanpenner thoughts?\n. Any reason we just didn't rename this repository to ember-collection?\n. @stefanpenner done.\n. This looks good to me. Let's get this merged in ASAP.\n. Nice catch :P\n. ",
    "zeeraw": ":+1: this would be really useful.\nI started playing around with a solution myself but stopped before my brain started to evaporate.\nIt would be cool if there was a index set alongside the content where heights and widths were stored. If this was the case I suppose you could also mock render views in to the container to calculate height and width for the index when the array change. Then you could aggregate with map/reduce over the index derive all other data.\nNot sure if this is too inefficient or even a good approach to achieve the effect.\n. :joy: Exciting! @LevelBossMike\n. Really exciting, good job!\n. ",
    "LevelbossMike": "I am currently working on a solution for variable row heights. We need this functionality in a list where items can be expanded.\nThe expanding functionality is working right now with variable rowHeights but it needs some cleanup/testing before I can send a pull request.\nThe approach I took was the indexSet approach where all the expanded rowHeights are stored as an arrayComputed on the list-view and used for calculation.\nI will also have a look if it is possible to extend list-view to make it work out of the box with variable rowHeights but that will need some more work as well.\n. As I said. I got expandable rows working but there are still some minor issues and I have problems with writing tests.\nI don't think variable row heights are that well suited for list-view and for the project I am working on that needs this feature I went back and took the infinite scrolling approach. I think you would have to know every items height and you only can get the height when rendering into the dom. And that's something you don't want to do in long lists. \nExpandable rows are doable with the indexed-set approach but I don't think I will get it working with completely variable row heights without expanding.\n. @JordyLangen I stopped working on this and switched to an infinite scrolling approach that renders items into the DOM after reaching the end of the list. @stefanpenner's suggested approach should work fine. Especially the learned over time part with expandable row heights. I don't know if Htmlbars will 'fix' the issue with long lists but for the use case I had there is not a big win for users when using list-view over an infinite scrolling approach so I took the easy way in the end.\n. ",
    "wycats": "@LevelbossMike I would love to see this as well. Excited! :exclamation: \n. ",
    "JordyLangen": "Whats the status on this one?\n. We are currently using a infinite scrolling implementation. I was hoping we could avoid the constant 'is in view' check since we are also doing this on every 'list item' because well, IE8 support.\nI hoped the ListView could releave some pain, but the list items have various heights. Too bad.\n. ",
    "pearkes": "@stefanpenner Awesome! Looking forward to adding this to the Consul UI, thanks for your efforts. :+1: \n. :clap: :clap:\nExcited to see this merged!\n. Thank you :)\n. ",
    "alexspeller": "You should try http://addepar.github.io/ember-table/\n. There are lots of examples of ember-table in the examples directory.\nIf there are any problems, it may be because it hasn't been updated in a while for the latest ember, I just looked and it seems pretty quiet - there is a pull request for the updating the handlebars version here: https://github.com/Addepar/ember-table/pull/54\n. OK, so I just filed another PR to update the bundled libraries to be the latest ember and handlebars.\nTo get the examples running, you should:\n1) Clone my fork which has the updated bundle ember and handlebars libraries\n2) cd into the cloned directory\n3) run npm install -g grunt-cli (if you don't have grunt already installed)\n4) run npm install\n5) run grunt, then ctrl+c when it's finished compiling (otherwise it will keep watching for file changes)\n6) run python -m SimpleHTTPServer to start a simple http server to look at the examples.\nYou can now browse to http://localhost:8000/examples to see the examples. They are all working fine for me with the latest version of ember.\nIn my opinion it's worth sticking with it, I'm using ember-table on another project to successfully  render 10,000+ rows with no speed issues.\nAlso, I suggest that if you continue to have ember-table issues you open a new issue  on the ember-table project so we can stop spamming the authors of list-view with irrelevant problems.\n. Would you like a docs PR?\n. Updated based on comments, if this is good I'll PR the same changes to the README too\n. I missed your other comment, updated for that too\n. ",
    "jasonf20": "@alexspeller I did, however it was very slow. (I have no idea why) even the simple sample (after hours of work to get it running - since the sample does not work out of the box and it took me a long time to find out why). So I decided to try this. \n. @twokul Ah I edited that by mistake, while doing some experiments. I guess I could just render out divs and pretend its a table, But it's much easier to format a table then to arrange divs the way I want them.\nDo any of you have a working sample of ember-table perhaps I'm doing something wrong? (though I pretty much took their example and fixed some incorrect versions of libs)\n. @alexspeller Yea, I solved that problem, I managed to get the sample running. and then It was the slowest...\n. @alexspeller I looked at that pull and I'ts different then what I did. I changed the handlebars.js to a different version. Is that not good enough?\n. @alexspeller Haha, I just did everything you said  then came here and saw this. I got it to work now. Thanks a lot. I just hope I can get it to work now at my other environment which has no internet. But I guess it should be fine!\nThanks a lot. and sorry for the spam everyone else.\n. ",
    "yossi-shasho": "+1 \n. ",
    "jasonmit": "I was able to resolve the issue by using the version:\n// Last commit: 2dd59fb (2013-06-03 16:55:01 -0700)\nIs there a versioning system for list viiew or a recommended release version?\n. Assigning to myself, will start once 1.9 and pack PRs are merged.\n. I think it would be best to turn this into an addon versus having a shim around it. \u00a0\nWe would then be able to take advantage of all the addon benefits and avoid the confusion of having a third party wrapper around it.\n\u2014\nSent from Mailbox\nOn Tue, Jan 6, 2015 at 8:13 AM, River Lune notifications@github.com\nwrote:\n\ni've already got a shim available for this as an ember add-on. \nhttps://github.com/mysterlune/ember-cli-list-view\nthere was yet another shim started by someone else, though the setup was wrong and made it so nobody could pull dependencies, etc, which is why i started my own. i followed the pattern for registering with Bower and NPM the way @marcoow did for ember-simple-auth, etc.\nwhile it's a bit rube-goldberg-ish, it does the trick for you to be able to do:\nnpm install\nember generate ember-cli-list-view\nand add:\napp.import('bower_components/ember-cli-list-view/list-view.js');\n... do your project's Brocfile.js.\nfeel free to fork and pr. there's a Maintenance.md file in the project i'm using to document the process i follow for updating the package.\nReply to this email directly or view it on GitHub:\nhttps://github.com/emberjs/list-view/issues/160#issuecomment-68886646\n. For the virtual list view, or both?  I can take this on\n. We're also blocked on our 1.8x migration so I started beating it with a hammer and now have a working version:\nhttp://jsbin.com/doqocizomu/1/edit?html,output\n\nI'm not /entirely/ confident in the changes (still wrapping my head around the view layer changes), but I'll submit a PR soon to start the formal process and hopefully collectively we can come up with the correct solution.\nI think it starts go south when we're pushing the childViews to the wrong element (wrong in the context of the list-view not container view):\nhttps://github.com/emberjs/ember.js/blob/b87696b07b5ef7d585225ca1b375d5a528c379f3/packages/ember-views/lib/system/renderer.js#L103\nIn the current implementation, the childViews are pushed into the ember-list-container.  So, I had to override the createChildViewsMorph hook within Ember.ListViewMixin to select the proper element to target.\n. Update: I realized this is going to require a bit more work to get Ember.ListViewItem to work.\nUpdate 2:\nSince renderToBuffer was removed, below is my ugly work around.  Certainly not something I want to commit.  @mixonic I may need you help with this.  https://github.com/emberjs/list-view/blob/master/packages/list-view/lib/list_item_view.js#L46-L77\njs\nvar temp = view.constructor.create({ context: context });\nelement.innerHTML = temp.createElement().element.innerHTML;\ntemp.destroy();\n. First pass here https://github.com/emberjs/list-view/pull/175\n@stefanpenner what's the gameplan for removing Ember.ListViewItem?\n. @mixonic I've updated the PR to take on a different approach.  It now depends on ember's native render flow instead of overriding rerender (and style attributes) and only updating the innerHTML.  Perhaps there is a performance cost to this approach, but I don't notice a visual difference.\nI could be overlooking the reason why it was done this way to begin with.  @stefanpenner can likely shed light on that so I can ensure I don't introduce any regressions.\n. @mrinterweb if you're not using Ember.VirtualListView then you should be fine leveraging what I have on my branch.  If you are using Ember.VirtualListView then the proposed solution will not work.\n. https://github.com/emberjs/list-view/pull/175 is merged and should now resolve this.  Look out for a release this week, but feel free to battle test it in your app ahead of the release and open any issues you see.\n. @jonnii awesome, glad it's covering your use case(s).\n. > are their questions I can answer re: the failing tests?\nI wasn't worried about solving the test issues yet until I have something that we plan to run with.  If you could provide feedback around https://github.com/emberjs/list-view/pull/175#discussion_r20274269 then I may be able to prevent the performance cost on mobile you mentioned.\n. Will do, was testing the build within our app. \u00a0Will update and fix tests tonight.\n\u2014\nSent from Mailbox\nOn Tue, Nov 25, 2014 at 7:05 AM, Stanley Stuart notifications@github.com\nwrote:\n\n@jsonmit can you take dist back out of this commit and ammend? (git reset --hard HEAD~1; git push -f origin HEAD) We have builds automatically pushed to S3 on master.\nReply to this email directly or view it on GitHub:\nhttps://github.com/emberjs/list-view/pull/175#issuecomment-64412677\n. @zackangelo thanks for your feedback, my last commit should fix the Safari issue you indicated.\n\n@fivetanley I've updated the PR (removed dist, squashed and tests are now passing).\n. @jdurand I'll investigate tonight\nUpdate: Confirmed not working with VirtualListView and for different reason.  I'm transforming the ContainerView's element's styles and not the first child, ember-list-container.  This only is the behavior of the VirtualListView (which I haven't used until today).  So, I'll look closer at it tomorrow.\n. @fivetanley I've been sick recently, but I have some free time Thursday to take a crack at the virtual list view problem.  \nThe fix will require the style attribute to change on ember-list-container, the first child element of the CollectionView, instead of the collection view's root element.\nhttps://github.com/emberjs/list-view/pull/175/files#diff-5a719aa951308e7e03489bc2a510c614R58 is the offending logic\n. @mansona https://github.com/emberjs/list-view#installation\nember-list-view is on a much older version of ember-cli and including it in package.json is not the only step.  You'll need to build it, and then toss the dist into your vendor file and app.import that file in Brocfile.js\nI'm sure this was done intentionally to support both ember-cli and non-ember-cli consumers.\n. Happy to report, VirtualListView is now working.  I'm doing some testing and attempting to clean it up before committing.\n@stefanpenner lets do it.  Ping me on IRC (jasonmit@freenode) whenever you are free (prefer late night since I'm all over the place during the day).\n. Demo: http://jsbin.com/qehuqonunu/1/edit?html,js,output\n. Whoops, on my phone.  Thanks\nAnd for those using my \"dist branch,\" it's out of date but will update it once I fix, or verify, that the pull to refresh logic is working.  Which will happen likely in the morning. \n. Okay, we're good to go whenever someone wants to review and if looks okay to merge.  \nHere is a working example with VirtualListView + pull down: http://jsbin.com/lubofiyaqo/1/edit?html,js,output\n. Just a quick note, this will not work for 1.9. \u00a0Will begin to investigate that over the weekend, hopefully before a version is cut.\n\u2014\nSent from Mailbox\nOn Fri, Dec 12, 2014 at 7:21 PM, Taylor Brown notifications@github.com\nwrote:\n\nNice work!!\nOn Fri, Dec 12, 2014 at 3:54 PM, Jonathan Goldman notifications@github.com\nwrote:\n\nI will try this first thing on monday and come back with a full trip\nreport, very excited to be able to finally upgrade to 1.8!\n\nReply to this email directly or view it on GitHub\nhttps://github.com/emberjs/list-view/pull/175#issuecomment-66841321.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/emberjs/list-view/pull/175#issuecomment-66863216\n. https://github.com/emberjs/ember.js/commit/2a747379d06ce7a4d975349c81a0abd8e5d39a0e is what ended up breaking list-view on 1.9.  I should have this fixed shortly..\n\n\nCustom build of 1.9 with that commit reverted http://jsbin.com/sivaxidade/1/edit?html,js,output\n. @rwjblue I just know this line breaks list-view:\nhttps://github.com/emberjs/ember.js/commit/2a747379d06ce7a4d975349c81a0abd8e5d39a0e#diff-a0d09bb980f6aac41530e708d6ea31a8R276\nI will have some bandwidth today to look deeper into the cause. \nUpdate: should be a simple fix.. we're overriding arrayDidChange on the ContainerView which doesn't take into account _itemViewProps\n. > @jasonmit i hear you were also working on something like this? i can't keep up with email! it's too much!\nI was planning on it, you beat me to it :)\n:+1: \n. Demo: http://jsbin.com/mifazutifu/1/edit?html,css,output\n. > As it doesn't handle momentum correct for desktops...\nCan you screen cast, I can't reproduce or I'm not looking close enough.  But I'm all for forking zygna/scroller just need to know where to apply the fix :)\n. :+1: \n. > emit a legacy build\nWorth mentioning, since I just did this on one of my other addons, liquid-fire has a custom build pipeline for addons to build for legacy. https://github.com/ef4/liquid-fire/tree/master/packaging\nCould be a good resource for whoever takes this up\n. @taras yes please :heart: \n. Ping @taras \n. Intentional as we moved this to an ember-cli addon.  \nThere may be work to create a custom build pipeline to support globals for backwards compat.\nCc @stefanpenner To hear his thoughts\n. Err, sorry.  \nI think we spoke about bringing over something comparable to what liquid fire does to handle custom builds.  It doesn't involve globals :)\n. :+1:\n. @taras great job in moving this forward :+1: \n. Looks to be stale so I'm going to close.  Feel free to reopen if it's relevant after a rebase.. Will be removing this prior to a merge.  The project is littered with unused variables :)\n. https://github.com/emberjs/ember.js/blob/v1.8.1/packages/ember-views/lib/system/renderer.js#L44\nIt's to get the child elements to push to .ember-list-container to behave like it was prior to the 1.8 changes.  Likely a better way and opened to suggestions.\n. Agreed. I was just trying to quite some of the linting rules.  Will fix.\n. I had to bring these back in.  They were removed from ember view during the refactor but we're dependent on them.  Perhaps there is a different, undocumented, way of achieving this now?\n. :+1: will fix\nEdit: fixed\n. code smell.  need help on this\n. I originally tried that but couldn't get it working since the view is in the state of inDOM when invoked and throws:\nhttps://github.com/emberjs/ember.js/blob/d4d1e7f55881dc3375238be58dfdd4321c4b2aa5/packages/ember-views/lib/views/states/default.js#L14\nAny ideas?\n. This was there previously, I moved it while debugging.  Moved it back, but I also agree with what you're saying.  Perhaps when we resolve the rendering, this will resolve itself and Ember event properly.\n. I tried a few different approaches but this ended up being the cleanest since I couldn't write the view to a RenderBuffer due to the view not being in the proper state when it's invoked.  See: https://github.com/emberjs/list-view/pull/175#discussion_r20274269\nIn any case, I'll wait for your feedback later in the week.\n. Rewritten to fix an issue with Safari\n. Ah, I was under the impression msTransform worked with both.  Not a windows user myself, but I'll take your word for it and make this change.\n. Agreed. I was going to send a PR to add observerOnce since this is a pattern that gets annoying to type out\n. For sure.  I'll follow up with another PR once this is merged.\n. Note to myself, this extending logic may not be needed anymore since we're no longer going through ember's view layer on the virtual list view to list item repositioning (just ListView).\n. :+1: will attempt & include in my follow up PR along with your other comments!\n. This should satisfy the prior PRs comments by @mixonic \n. Would be awesome if we could use scrollComplete event on zynga's scroller for the virtual list view but it's broken.  Pull request opened since January to fix it.\n. Is this no longer possible with htmlbars?\n. env.helpers.collection.helperFunction\n. :+1: \n. We should keep repository\n. Keep description\n. ",
    "elucid": "@twokul You should change the computed properties and observers back to the APIs that don't use prototype extensions.\n. Very excited, thanks guys.\n. ",
    "HEMENDRA27": "http://jsfiddle.net/testemberudr/WLXgt/4/\n. ",
    "Chandler": "oops..wrong repo. #doh\n. ",
    "andremalan": "Yep, it's simple to change the height on the fly, but an initial height is still required or an exception is thrown.\nIt feels wrong to set an arbitrary height, then update it based on the screen size after the fact. Instead of throwing the exception, wouldn't it be better to have it just fill the parent element?\n. ",
    "billdami": "I would definitely love to see this as well, considering that in cases where you want the list view to always fill up a particular portion of the screen, and be resized when the browser window size changes, ect, it would be alot cleaner to just be able to specify CSS offsets like position:fixed; top:0; right:0; bottom:0; left:0; to make the list view fill the entire screen for example.\nCurrently, if you want the list view container to adjust its dimensions when events like a window resize occur, is it the preferred practice to subclass ListView setup a listener in the didInsertElement hook?\n. @stefanpenner pretty much every example out there demonstrates the behavior from what I can see, such as this jsbin from the readme, http://jsbin.com/omobov/19. \nUnless I'm missing something, it's just because list-view is applying an inline  overflow:scroll style, which will always cause both vertical and horizontal scrollbar tracks to be displayed, instead of overflow:auto which will only show them when needed.\nIt looks like this can be overridden, albeit a bit messily, via a overflow:auto !important in my CSS. However I just wasn't sure if this would mess up any height/width calculations that list-view makes, if its always assumming that the scrollbars are present for example.\n. >  limited variable height\n@stefanpenner does this pertain to row height? I.e. will it allow for something like a chat messages type view to use list-view (where rows can obviously have variable height due to the message text spanning multiple lines)?\n. ",
    "helm168": "I try to provide an example on jsbin, but I can't find online handlebars to include.\nI copy the code from http://jsbin.com/omobov/19. It works well, then I replace handlebars.js -> handlebars-1.0.0.js and ember.js -> ember-1.1.2.js(lasted version), then run again, it doesn't work.\n. ",
    "bazzel": "I have the same issue. I tried replacing with ember up to 1.2.0-beta.4.\n. ",
    "huafu": "Yeah, it\u2019s a lot of code, but it\u2019s not that complex ;-)\nI think if you\u2019re not reviewing soon I\u2019m gonna add some check so that if you change the isHorizontal property after initialization it\u2019ll throw an exception, or i\u2019ll handle it but it\u2019s kinda weird to change on the fly the orientation.\n\nHuafu Gandon | gmail (mailto:huafu.gandon@gmail.com) | github (https://github.com/huafu) | linkedin (http://www.linkedin.com/in/pgandon)\nOn Thursday 9 January 2014 at 20:39, Stefan Penner wrote:\n\ncool i like this idea. Its abit of a heft PR so ill try and find some time to review.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/emberjs/list-view/pull/88#issuecomment-31931332).\n. @stefanpenner can you provide one or more link about what you call the \"threshold related life cycles notification\"? I tried to find on google but didn't reach anything\n. Oh, so you meant it has to be done outside the list component right?\n. I added this to remove more jsHint warnings\n. This is avoiding the index below 0 when the user is trying to scroll more then there are elements on the top\n. The click must be synthesized even if it's not a field. The functions is called after testing if the touch actually did some scroll or not, so it's ok to remove the check here.\n. This is the test for negative startingIndex in case of bouncing\n. There was an error in the test header in the function firing events\n. This test is passing when you activate the touch emulation. The emulation has to be activated in the test, and the package reloaded, or at least the file responsible of events on virtual list view. I couldn't find a way of doing all those\n. \n",
    "mmun": "@stefanpenner I think your solution is better and prevents the need for the hooks I mentioned. Delay is the wrong metric because it depends on the height of the list view. It would just be a matter of adding an overridable thresholdSpeed\n. FYI, I removed createChildViewsMorphon master and moved the functionality into render. Let me know if that is problematic. I haven't dug into this codebase much.\n. Awesome :+1: \n. Agree with @ebryn.\n. @mbrakken @shaunc Hey folks! I've \"officially\" moved kris' branch to https://github.com/emberjs/ember-collection and started with some cosmetic changes. The first order of business is getting some basic tests passing. Please contribute there! :) If you want to chat you can hop into #dev-ember in the Ember community slack channel.\n. @shaunc Can we start with component integration tests instead of acceptance tests?\n. Awesome :+1: I left some comments on your commit.\n. Not sure. Either way seems fine to me. We can revisit it.\n. @shaunc You should get the tests passing and submit a PR so we can iterate together. Feel free to replace any failing QUnit.tests with QUnit.skip (via import { skip } from ...) and comment out whatever you need to.\n. ",
    "rwjblue": "I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... Yes, that would work.\n. :+1: - Thank you!\n. @rondale-sc - Can you monitor the Travis run, and let us know if it worked properly?\n. Thanks!\n. I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... That change came from https://github.com/emberjs/ember.js/pull/9716.  Extending to create a new view for every {{each}} is very costly.\nWhy does this change break list-view?\n. I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... It need to be packaged and pushed to NPM with the built assets, not force them to be built by every consumer.  That would be the prepublish hook...\n. It will need to be included when we publish to NPM, not stored in the repo.\n. > Could we use the private method, or use the public makeBoud/ViewHelper method ?\nYes, the simplest work around for now would be to use Ember.HTMLBars._registerHelper.\n\nAlso unless I'm missing something Ember.HTMLBars.helpers does not exists.\n\nYou are not mistaken, there is no Ember.HTMLBars.helpers API.  You can use the older Ember.Handlebars.helpers API if you need it..\n. I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... Yes, ember-collection will be replacing list-view.\nI definitely agree that we should make a meta issue in ember-collection repo.  I am unsure of the major points so I'll leave that to @mmun.\n. @tim-evans - I suggested against it (@mmun would have preferred that too).  Sorry about the confusion. :disappointed: \nMy thought process was that the fundamental concept of the new \"thing\" is roughly the same was previously published versions of list-view, but it really is a whole new beast.\n- The new repo will be dropping (or has already) support for all Ember versions prior to Ember 1.13.\n- The issues open here are no longer applicable to the new codebase.\n- Views are dead, so a new name makes sense.\nAgain, sorry if my suggestion was ultimately a mistake...\n. I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... Yes, it is broken on 1.13.  This is a duplicate of https://github.com/emberjs/list-view/issues/245 (though this issue is better named :wink: ).\n. I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... I'm sorry we didn't get back to this previously, but at this point this repo is essentially unmaintained.  Please use @html-next/vertical-collection or ember-collection for similar functionality.\nClosing.... Yes, I believe that it should work (for example, in Ember we do not use it).\n. This has been moved to be a private API (in https://github.com/emberjs/ember.js/pull/10379).\n. My guess is that the create caused the requirement to wrap in a run-loop, not the extend.\n. :+1:\n. Should be:\njavascript\nvar registerHelper;\nif (Ember.HTMLBars) {\n  // registerHelper was used for some 1.10-beta's and _registerHelper is for 1.10.0 final.\n  registerHelper = Ember.HTMLBars._registerHelper || Ember.HTMLBars.registerHelper;\n} else {\n  registerHelper = Ember.Handlebars.registerHelper;\n}\n. ",
    "zolzaya": "Same here :(. Did u solve it?\n. ",
    "sharavsambuu": "on firefox, mouse wheel scrolling is too slow and almost unusable. Any suggestions to deal with that?\n. if we remove \n    this._scrollTo(y); \nfrom scrollTo function of list_view.js,\nit seems working on firefox.\nbut will it be affecting to other functionality?\n. ",
    "acreatist": "Hi gyus!\nI think the scrolling issue is caused by Firefox's 'smooth scrolling' option, found in Options->Advanced->General tab.\nIf you disable the option, scrolling works alright.\nI tried to call 'that.scroll' function in didInsertElement with a 100ms timeout. It actually does the trick, but maybe it's not the best solution.\nIf any ideas and fixes, It'll be great, as I've adopted ember-listview in my app as a lib and don't want to mess it.\nThanks!\n. ",
    "denisnazarov": "I have discovered the ReusableListItemVIew which does exactly what I want. :+1:  @lukemelia\nhttp://jsbin.com/ebUjAkEW/4/\nhttps://github.com/emberjs/list-view/blob/master/packages/list-view/lib/reusable_list_item_view.js\n. ",
    "raycohen": "@denisnazarov curious if f7d92235f1a604d90644b6a4911fdf13c71a30de has any impact on this issue?\n. ",
    "sytong": "I am not sure if this is the reason why I see this error whenever I replaced the list-view content AFTER scrolling:\nUncaught TypeError: Cannot call method 'updatePosition' of undefined\nThe failure happened here in the copy of my list-view.js\n```\n  /*\n    @private\n    @method _reuseChildForContentIndex\n  /\n  _reuseChildForContentIndex: function(childView, contentIndex) {\n    var content, context, newContext, childsCurrentContentIndex, position, enableProfiling;\ncontent = get(this, 'content');\nenableProfiling = get(this, 'enableProfiling');\nposition = this.positionForIndex(contentIndex);\nchildView.updatePosition(position);\n\n```\n. ",
    "gigafied": "This also seems to happen if you update the height of the list view after you scroll, so it's not just related to swapping the content.\n. The test has an error in it. \n{ x: 0, y: 150 }], \"The rows are in the correct positions\");\nshould be:\n{ x: 0, y: 100 }], \"The rows are in the correct positions\");\nBut even when fixed, that test doesn't actually properly reflect the issue, because the updating of rows is not necessarily sync. If you use asyncTest and use Ember.run.later to compare the values, the test passes.\nThis is what fixed it for me:\n```\n  _reuseChildForContentIndex: function(childView, contentIndex) {\n    var content, context, newContext, childsCurrentContentIndex, position, enableProfiling;\nif (!childView) {\n  return;\n}\n\ncontent = get(this, 'content');\nenableProfiling = get(this, 'enableProfiling');\nposition = this.positionForIndex(contentIndex);\nchildView.updatePosition(position);\n\nset(childView, 'contentIndex', contentIndex);\n\nif (enableProfiling) {\n  Ember.instrument('view._reuseChildForContentIndex', position, function(){}, this);\n}\n\nnewContext = content.objectAt(contentIndex);\nchildView.updateContext(newContext);\n\n}\n```\n. I'm pretty sure you're using an old version of ember-list-view, thus your fix is no longer relevant, but in either case actually linking to line numbers and source files helps a lot :)\n. Yeah, so I saw that too and I replaced lines 222-223 with your fix and still had the issue.\n. No, but my issue isn't the same as this one, so this might fix this issue even if it doesn't fix mine.\n. Err, nevermind. Still an issue, but this doesn't fix it (for obvious reasons)\n. Can't reproduce in a JSBin for whatever reason. Spent about 4 hours trying to debug this :( \nThis is all I have to go off of: http://d.pr/i/1QBm\nI've been increasingly removing more and more to try to find what is breaking it. That stack trace sure doesn't help much.\n. I'm not entirely sure it's even an issue with ember-list-view, but I don't know ember's internals well enough to competently debug this. I've just resorted to destroying the entire list view and recreating it everytime the window is resized (which sucks, but it works).\n. It has something to do with the scroll position. Instead of redrawing, I'm calling scrollTo(0) before I resize and it fixes the issue.\nI'm still not sure yet if it is ember-list-view or something else. The App is pretty large so while I can turn off a lot of pieces to isolate, I can't turn off everything. \n. Just tried using this fork with Ember 1.10.0, I get \"Uncaught Error: Assertion Failed: A fragment cannot be pushed into a buffer that contains content\", which I suspect is due to how I'm using it. I have a ContainerView and am using createChildView to create the list-view instance.\n. ",
    "jonnii": "I'm seeing this too when the list view content is based on an array computed... \n. I have made some progress on this. To reproduce:\n- Create a list view\n- Bind a computed property to the content\n- Add a button to filter this list view\n- Scroll half way down the list view\n- Filter the computed property\nIt seems that this line in _scrollContentTo is causing a negative scrollTop in this case:\nscrollTop = Math.min(scrollTop, (totalHeight - height));\nChanging this to the following solves this for me:\n```\nvar totalHeight = get(this, 'totalHeight');\nvar height = get(this, 'height')\nif(totalHeight - height > 0) {\n  scrollTop = Math.min(scrollTop, (totalHeight - height));\n}\n```\nLater on the scrollTop is used to recalculate the content of the child views, which then results in looking up a negative index in the childViews collection.\n. Not an old version of list view, see:\nhttps://github.com/emberjs/list-view/blob/master/packages/list-view/lib/list_view_mixin.js#L222\n. When you see this issue do you see a negative value for scrollTop?\n. Ok good to know. I'm working on a test case for this to prove the bug, it's tricky because it depends on the DOM being in a certain state.\n. @rubiii make sure you're using the latest version, as that fixed it for us. the link on the homepage isn't the latest (travis is failing...?), you'll need to clone the repo and build it yourself. I've taken the liberty of gisting the build version here:\nhttps://gist.github.com/jonnii/8998ad8fa4736c444a25\n. It looks like the build is passing now, this is a link to the build for the latest commit to master:\nhttps://travis-ci.org/emberjs/list-view/builds/23137825\nThere's no logs for the rake publish build step, so not sure why it's not uploading the bits to S3.\n. @gigafied can you try the fix i proposed in https://github.com/emberjs/list-view/pull/98? it works for us.\n. the build runs ok on my machine, not sure why travis is complaining, is it possible to re-run the build?\n. :+1: \n. @shturm are you using canary?\n. @jasonmit if you create the PR i'll try it on our app which uses list view all over the place. \n. @jasonmit I just tried the .js file in your jsbin in our app (also upgrading it from 1.7 => 1.8) and our list views render correctly. \n. I will try this first thing on monday and come back with a full trip report, very excited to be able to finally upgrade to 1.8!\n. @stefanpenner just an FYI but the development/minified links in the README aren't up to date with the latest master.\n. What about for us poor individuals who haven't upgraded to ember-cli yet? Would be nice to bower install ember-list-view.\n. @stefanpenner what about ember-masonry (rim-shot).\n. @stefanpenner on a serious note, what about instead of ember-list-view, something like ember-layouts or something like that. I know the plan is to land the packing stuff at some point, and then the name ember-list-view will be just one of the things this does.\n. @stefanpenner totally off topic, but I always assumed that Ember.computed.* properties were readOnly. Other than causing an error if you try to set it, are there any other advantages to marking a property as readOnly?\n. Is there anything I can do to help with this? Does the build no longer produce a globals version of list-view?\n. Can you point me in the direction of where to start? I have some time I can take a look.\n. @taras I'm assuming this problem is solver in ember itself, I'm going to poke around and see what I can find. There might be other add-ons that have had to solve this, probably something like ember-validations.\n. @ef4 i'll try giftwrap on monday... \n. @catc not yet, I'm spending Friday's upgrading ember, so will give it a try in a couple of days. Right now we're trying to upgrade from 1.8 => 1.10 (this is the last version of list-view which has globals), but there's a bug with 1.10 which results in our modals not working (something to do with controller bindings in views without outlets according to the changelog), so we might have to skip to 1.11. Will revert with full trip report.\n. @ef4 @catc finally got around to trying giftwrap and everything has seemed to work. A few things like having to remove the ember-data and ic-ajax packages from ember-cli's default output should be documented, plus it's a little out of date in terms of ember install:addon vs ember install. but other than that so far so good.\n. EmberListView = GiftWrap.require('ember-list-view').default. \ntry that.\n. no problem, took me a while to work that one out... :dancer: \n. ",
    "rubiii": "hitting the same problem with a filtered collection only after scrolling. let me know if i can help.\n. @jonnii awesome :+1: thank you very much. this seems to be fixed!\n. ",
    "johnnyshields": "PR raised here: https://github.com/emberjs/list-view/pull/121\n. @stefanpenner I can write a release Rake task that does:\n1. build dist\n2. run tests\n3. bumps version\n4. copies components\n5. publishes build\n. Done--see commit\n. Ah... oops. Don't know much about that, better let @fivetanley and @rjackson assist as it looks like they've done it before.\n. ",
    "Glavin001": "+1 for Bower support. Let me know if there is anything I can help with to move this along.\n/cc @frozenfire92 \n. ",
    "cfstras": ":+1: on this!\nI can see the repo components/ember-list-view, but it seems to be empty... what gives?\n. ",
    "courajs": "Assuming we can figure out #104 and I actually start pulling this into our app, I probably do :)\n. Yes, and all the demos everywhere work just fine for me. I will dig in tomorrow and try to reproduce in a simple github repo\n. Didn't have a chance to look into this yesterday. If I don't get to it today I will over the weekend\n. For anyone hitting this issue in the future, this was caused for me by omitting the 'required css' specified in the readme. I managed to completely miss that entry.\nPerhaps this should not rely on people adding two entries to their stylesheets? The styles could be applied in JS. There could be an included stylesheet. I'm sure there are a few options here. @stefanpenner any thoughts?\n. ",
    "teddyzeenny": "Yeah looks like they're related.\nf7d92235f1a604d90644b6a4911fdf13c71a30de seems to fix a specific issue suffering from a negative scrollTop.  This commit will prevent the negative scrollTop from happening in the first place.\nI think this might remove the need for f7d92235f1a604d90644b6a4911fdf13c71a30de.\n. Confirmed and reverted.\n. Would var state = this._state || this.state work?\n. ",
    "cmosguy": "@jmonma do you have an example code on how you override this to work in the responsive system?  I am trying to figure out how to do this with bootstraps responsive grid.\n. ",
    "raytiley": "Spent some time trying to track this down today. What I found was that if the context of a ReusableListViewItem is a controller, then the controller property of the ReusableListItemView is set to the newContext. This is so actions get handled by the controller properly. \nIf I comment out where the controller of the ReusableListItemView gets set scrolling works, but breaks action handling.\nWhat I can't figure out is why setting the controller even affects this? Stepping through the code the elements are getting the correct transform applied to them, but somehow that gets lost when the dom is actually rendered.\nAccording to @stefanpenner this all might become a moot point with metal-views... but it would be great to get this working sooner than later. If someone could give me more instruction on a fix, I would be happy to dump some more time on this.\nThanks\n. @stefanpenner @mmun @mixonic Anyone able to offer some broad strokes about what needs to be done to get this to work? Until 1.10 lands and we see the performance promise land of HTMLbars, ListView is necessary for many apps including mine. I'm willing to drop some time into this, but a point in the right direction would be welcome.\n. Thanks... I'll start digging in this week.\n. There is some initial spikes how of how list-view will work in glimmer. https://github.com/krisselden/list-view/tree/2.0.0. \nYou can see how the new syntax looks here: https://github.com/krisselden/list-view/blob/2.0.0/tests/dummy/app/templates/simple.hbs#L18-L22\n. @stefanpenner @taras Any news from dinner?\n. > plan to take an afternoon this week to dig into the current status of things, and we hope @krisselden is in-fact able to get some time to come up with an MVP we can role with.\nSweet if there are any easy to explain items on the punch list feel free to post them and I can try to tackle as time allows\n. @mrinterweb - @krisselden  and I spiked out a quick and dirty compatible version, definitely not production ready. The internals are much simpler now, but there is still work needed to get it releasable. I'm on vacation all of next week, but I hope to really dig into after that and get something out that is workable soon.\n@ivan-granulin you'll almost definitely need to update your app. In the current spike here is what the syntax looks like:\n{{#ember-list\n            items=model\n            height=500\n            width=800\n            cell-layout=(fixed-grid-layout 800 25)\n            as |run|}}\n  {{! Your markup goes here }}\n{{/ember-list}}\nSo basically the ember-list works the same as each but takes some additional properties. The interesting one is the cell-layout property which takes the result of a helper to determine the layout. This means you can inject different layouts pretty easily. Think rows vs grids.\n. @shaunc What is implemented so far is still proof of concept. I'll be circling around soon and writing / updating tests.\n. @krisselden @stefanpenner I'm going to start working on some cleanup and test migration for the glimmer support. Is the end goal to have a single version that provides 1.12 support and 1.13+ (glimmer) support? Or should all the legacy views be removed? I guess another option would be a brand new addon renamed ember-list (since views are evil right). Just looking for some direction.\n. > LGTM \u2013 when the above comment has been resolved.\nOk fixed the type. Hit the button.\n. ugh... I hate writing docs... but someone has to do it. Will push the fix soon.\n. ",
    "bcleary6": "@stefanpenner it appears the latest build is throwing an exception when it is calling render().  buffer.dom is undefined which causes dom.createElement('div') to throw the exception.\nUnless one of my dependent libraries is not on the correct version?\n. ",
    "jmonma": "correct you are! the funny thing is, I just went through my apps last week and converted unnecessary 2-way bindings/CPs to be oneWay. hooray for peer review. Perhaps soon we can use Ember.computed.readOnly :)\n. It appears that this fix is contained within PR #90 so I'm not sure if you'd want to merge this since it's smaller/lower-risk or close this in relation to that PR.\n. Oops, I accidentally clicked 'close' while checking on this PR on my phone. It was not a 'bump' I promise :)\nThis should be pretty uncontroversial since, as it is now, users can't interact with any item in the VirtualListView, which in my case makes it unusable. Also, synthesizeClick is only called once we've verified the user tapped without intent to scroll, and its only job is to forward that tap event to the intended target.\n. @krisselden: the VirtualListView intercepts all click/touch events. The check for input fields happens in handleStart on line 11. Per your comment on line 24, the purpose of synthesizeClick is to forward the click event once you determine that the user's intent was to click, not scroll. Since we intercepted the click initially, the only way for the event to reach the target is via synthesizeClick.\nThis PR comes from the fact that VirtualListView, as tested on several iOS devices, does not allow touch events through to any elements in the list (anchor tags, link-to's, actions, etc)\n. No problem, I know you're a busy man! I haven't pushed the issue for that reason, not to mention dealing with a baby and preparing to move up to the Bay to work for Netflix. We'll see if I can get my hands on some Ember while I'm there.\nI'll keep my eye on this down the road.\n. Ahh, Interesting. I'll think about this and re-evaluate. Thanks.\n. I can extract that block into an addEmptyView() helper. What about the cases where content isn't defined and therefore has no length?\n. This actually needs to run if delta is greater or less than 0 so I can move the remaining if statement in the branch @ 527 into the else along with the removeEmptyView call.\n. Good idea\n. That makes sense. I'll make it more explicit contentLength === 0 || contentLength === undefined\n. The best we can do for limiting the removeEmptyView work is to check childViews to make sure emptyView is there before calling remove. Otherwise, we always need to remove the emptyView before calculating the delta (which is based on the number of childViews) and before attempting to position the child elements (since empty views won't necessarily have the correct interface), but we can at least make sure to only run it whenever it's actually a childView.\n. Doesn't this already happen afterRender since line 147 calls _updateScrollableHeight afterRender? _updateScrollableHeight is for updating the height of the container element when its children change, and I believe should already take into account the necessary scenarios.\n. ",
    "elsurudo": "This fix works nicely for me \u2013 thanks.\n. ",
    "fivetanley": "Looks like the travis badge image in the README is lying: the build is failing. It won't publish unless the build is passing.\n. @eviltrout if you have a wip branch/commit you could link to i bet that would help stef or kris track it down\n. i think we need new S3 creds\n. did you specify -r when using travis encrypt ?\n. nope, -r specifies the project the variables will be exposed to, so emberjs/list-view\n. @stefanpenner did you have time to review this?\n. @Genkilabs any luck?\n. @jasonmit can you take dist back out of this commit and ammend? (git reset --hard HEAD~1; git push -f origin HEAD) We have builds automatically pushed to S3 on master.\n. @jasonmit this has been tremendous. Can you point me in the right direction regarding mobile support with virtual list view?\n. reopening. seems like closing was an accident because of how github places buttons? :P\n. @kenips Sorry for the delay, I will catch up this weekend. For now the README has been replaced to use https://rawgit.com/rondale-sc/list-view-dist/canary/list-view.js as the download link. You can put that in bower as well. If you want to tie it to a commit you can use a SHA url by clicking on the history and going to \"view\" and then \"raw\" once the SHA is in the url.\n. @jasonmit i hear you were also working on something like this? i can't keep up with email! it's too much!\n. I also made components/ember-list-view for the dist directory, so we should probably update the script there. I don't care whether this lives here or in @rondale-sc's bower repo, but i feel it's probably good to be consistent with ember-data and ember so people know where to look (we can also put it in the README).\n. you are my hero <3\n. Oh wow, guess my tired eyes missed https://github.com/emberjs/list-view/pull/112 by @jmonma. Glad we came up with a similar fix though. :) cursor: pointer as @krisselden suggested in that PR does not make stuff like link-to etc work, so we need one of these PRs\n. awesome!\n. I checked out the demo on OSX and Chrome as well, seems good.\n. we need to get this moved in the bower registry\n. seems like we could save some compile time for the end user since we're building and they're bringing the repo in anyway. we have to have a bower for global build anyway it seems.\n. soon we will be the rails of slow boot times :P\n. also we would have to add an import to their app to get the handlebars helper registered in main.\n. ",
    "kingartes": "oh, didn`t notice this demo ) Thak you for help\n. ",
    "geekingreen": "@johnnyshields sounds like a good idea to me.\n. ",
    "ghedamat": "Sorry to bother but it doesn't look like the components repo got set-up, \nis there any way I can help?\n. ",
    "marinho": "Yep, I know, but is there a way to the grow the array with items coming through Ajax requests as Ember Data does?\nBecause, you know, without any support for remote source, an Infinite scrolling widget is almost useless.\n. I am sorry if I am saying anything stupid, but I couldn't find anything about it, that's why I am asking here and willing to help if there is space for it.\nMaybe I am just missing anything about growing arrays from the data source...\n. Sure I can, can you give me a hint on how to do it? Thanks :)\nUpdate: I am not that experienced on EmberJS / Ember Data / ListView so, as I said above, maybe I just missed something on how to do it. I just couldn't find anywhere a way to do it and just by trying the ListView it worked just by using the list coming from model, so, it just did the lazy DOM creation but by that way it would be loading the whole database at once, which doesn't make sense (I took the example as my reference here).\nBut that would be nice if there is a way to load this data lazily as the user scrolls with no reworking :)\n. Ok, I thank you for your help, but in this case I am going to open a question in StackOverflow then, because I am still lost of what I have to do to implement this (I couldn't find out what you mean by \"growing lists\" as model function in Route doesn't come with any other way but just returning a simple list. Is that any feature of Em.Array or kind of? etc... so, I am going to place this in SO to ask for help and will paste the link here in case anyone read this and knows how to do it :)\nthanks\n. @JulianLeviston here is it:\nhttp://stackoverflow.com/questions/23249736/how-to-use-emberjs-listview-with-data-from-remote-source\n. ",
    "GetContented": "@marinho Why can't you just bind a reference to it?\nThe function that gets the data as it comes in simply adds to the array, and the bound property will automagically update the view because it's bound to that array.\n. @marinho when you open one, could you please link to it here?\n. ",
    "inDream": "In fact, I am asking is there any public/private method to get/set the scroll position.\n. Thanks for your work, I am looking forward to test this feature.\n. ",
    "lukemelia": "Maybe we should expose something like startingScrollTop, to make it\neasier to configure via a binding.\nOn Wed, Aug 27, 2014 at 11:10 PM, Stefan Penner notifications@github.com\nwrote:\n\nview.scrollTop should be correct. It isn't observable (for mobile\nperformance reasons, but i hope to make this available soon), but can be\naccess ondemand.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/emberjs/list-view/issues/126#issuecomment-53668903.\n. What I meant to suggest is that if we had a startingScrollTop property,\nthat we read at initial rendering time, then we can keep our perf\noptimization of mutating outside the run loop. A developer could read and\nreport their current scrollTop to a controller on willDestroyElement, and\nuse that value to set startingScrollTop for the next render.\n\nOn Wed, Aug 27, 2014 at 11:43 PM, Stefan Penner notifications@github.com\nwrote:\n\n@lukemelia https://github.com/lukemelia the problem is that we mutate\nscrollTop outside of the run-loop so that we don't need to invoke a\nrun-loop if no ember level mutations occur. This means we would only inform\nbindings when we recycle a view, which only happens every rowHeight\npixels.\nI suspect we can remove this requirement as all the mobile phones keep\ngetting faster, but I would like to make this change while doing tests on\nactual hardware.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/emberjs/list-view/issues/126#issuecomment-53670461.\n. It should be ok with ember 1.7 save one deprecation warning. Haven't tried\nwith jQuery 2. Process would be what you describe plus trying out the demo\npages.\n\nOn Wednesday, October 8, 2014, Sam Selikoff notifications@github.com\nwrote:\n\nIs list-view compatible? (Perhaps I can help, what's the normal process,\nrun tests with new versions?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/emberjs/list-view/issues/171.\n. I just checked out code, and we have the following monkeypatch:\n\n``` javascript\nif (isAndroid) {\n  VirtualRowView.reopen({\n    applyTransform(element, position) {\n      let {x, y} = position;\n  element.style.top = y + 'px';\n  element.style.left = x + 'px';\n}\n\n});\n}\n```\n. ",
    "sbounmy": "Hello,\nI am having this issue when I am dynamically appending contents to controller, it is scrolling to top.\nWould be great if we could prevent scroll from happening !\nHere is my fiddle : http://jsfiddle.net/stifou/bycmto2y\nPlease let me know if I can help out with anything,\nStephane.\n. ",
    "vampolo": "Thanks for the fast answer. \nIf I understand correcty ReusableListItemView should be used for maximize efficiency but soon it will be as fast as ListItemView. Right?\n. @stefanpenner I've been busy lately. I'll try to make up some tests this weekend and close the issue.\n. How do i run the test ? I've synced to emberjs/list-view master but i get:\n```\n\u279c  list-view git:(master) \u2717 npm test\n\nlist-view@0.0.5 test /home/vampolo/Projects/list-view\nember test\n\nversion: 0.0.44\nBuilt project successfully. Stored in \"/home/vampolo/Projects/list-view/tmp/class-tests_dist-zIogbRlf.tmp\".\n1..0\ntests 0\npass  0\nfail  0\nok\n\u279c  list-view git:(master) \u2717 \n. @stefanpenner  ping. i wrote some tests but looks like the way described in README.md to run the tests does not work\n.\n\u279c  list-view git:(master) \u2717 npm version\n{ http_parser: '1.0',\n  node: '0.10.25',\n  v8: '3.14.5.9',\n  ares: '1.10.0',\n  uv: '0.10.23',\n  zlib: '1.2.8',\n  modules: '11',\n  openssl: '1.0.1f',\n  npm: '1.3.10',\n  'list-view': '0.0.5' }\n\u279c  list-view git:(master) \u2717 uname -a\nLinux earth 3.13.0-35-generic #62-Ubuntu SMP Fri Aug 15 01:58:42 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\n\u279c  list-view git:(master) \u2717 npm test\n\nlist-view@0.0.5 test /home/vampolo/Projects/list-view\nember test\n\nversion: 0.0.44\nBuilt project successfully. Stored in \"/home/vampolo/Projects/list-view/tmp/class-tests_dist-MC6oDkFl.tmp\".\n1..0\ntests 0\npass  0\nfail  0\nok\n\u279c  list-view git:(master) \u2717 \n```\n. @stefanpenner  I've also tried it from scratch: https://gist.github.com/vampolo/1cca152f81aa6e8bc54b\n. @stefanpenner allright let me know if it is all good for  u\n. ",
    "sly7-7": "@teddyzeenny Thanks :) I've seen your comment late during the night and wanted to do it this morning. \nI have a dumb question though (since the PR was approved), this._state is private, so I wondered if this may be used in production code or in external libs based on ember ?\n. @tim-evans Thank you for the reminder. I closed my related PR, but I forgot to close this one.\n. oops, sorry, seems like a dup of #197. Though this one seems to be simpler. I must have forgotten some mandatory things.\ncc/ @taras \n. This is likely superseded by #203\n. Wow thanks a lot @taras !\n. Thanks :+1: \n. ",
    "roosnic1": "Sorry my bad. Error is gone with the newest commit on master. Thanks :+1: \n. ",
    "annismckenzie": "Sorry, didn't mean to open this here. :-/\n. @stefanpenner: just did that. It just puts the whole project into my bower_components directory but there's no dist folder to be found.\n. Sorry for the noise \u2013 it's working now. Shall I close this issue?\n. Did you really want to add this whitespace here? :)\n. ",
    "lumenlunae": "Having the same problem, and this issue sounds really similar, though supposedly fixed: https://github.com/emberjs/list-view/issues/86\nI'm trying to figure out the main difference between both scroll views but still can't figure it out. :\\\nUpdate: So it really boils down to including the itemViewClass. If I embed the template, it scrolls fine. I might have to embed the HTML for now. \n. ",
    "marcemira": "Thanks stefan, I just commented these lines and happen to be working right as expected:\n\n. :+1: \n. :+1: Great!! \n. :+1: \n. Same here :+1: , the reason appears to be several files at the code syntax, that jshint won't approve, and travis will fail, hence won't auto-generate a dist build to use on ember-cli (or be available on bower).\n. @stefanpenner is it possible to calculate height of each row, in order to have a list where every row have it's own height? Additionally, do observe height change event for each row and re-calculate total height of internal container and position of below rows? Thanks\n. No problem! :+1:  Love your work btw.. :)\n. any news?\n. I did patched some code in order to make it work, but the dramatic change on ember-view makes it very hard to cover all cases where the app blows up :boom: \n. :+1: Any news on 1.11 compat?\n. :+1:  Thanks Stef\n. ",
    "eviltrout": "I tried updating Discourse and got stuck here too. I've removed the domManager stuff and am no longer getting errors, but nothing is displaying in my list view either. I've tried @tim-evans's patch and it seems to make no difference. \nIn fact, it's weird because createChildViewsMorph doesn't seem to be called at all when added to that mixin? What am I doing wrong? \n. ",
    "slindberg": "Tweaking @tim-evans workaround for 1.8.0-beta.2 to use element._element makes things mostly work:\njs\n    render: function (element) {\n      var renderer = this._renderer;\n      this._childViewsMorph = renderer._dom.createMorph(element._element, element._element, null);\n      return element;\n    },\nHowever I've run into a wall trying to figure out how to prepend the ember-list-container element with metal-views. Can someone point me in the right direction?\n. Thanks @taras! :beers: \n. ",
    "shturm": "Don't you guys get \"renderer is undefined\" with the described setup ?\nSorry to revive a closed issue\n. ",
    "rondale-sc": "Just removed dist.  Didn't realize it was in there.  I copied this over from a different branch I was working on. \n. I have appeased the mighty Travis!   :))\n. @fivetanley @stefanpenner I think righ tnow the issue is that travis isnt picking up my GH_TOKEN that I set in the travis.yml.  I'm tryin' to figure it out now.  Hopefully I'll have something soon.\n. @fivetanley I did not.  Should it be -r rondale-sc/list-view-dist ?\n. Ah.  Awesome.  I'll push the updated var.\n. Please hold off merging this for a bit, while I debug it.  thnx.  :)))\n. I did a dry-run on this locally and it updated appropriately.  While troubleshooting with @rwjblue we figured out that I had forgotten to set the canary/beta/release branches on the shim repo which likely caused this issue.  \nI did follow @fivetanley's advice and explicitly set the -r fag to emberjs/list-view.  Though when I generated the otken the first time it likely had this.  I think this is ready to merge.\n. @fivetanley Couldn't agree more.  Once the script is updated we can transfer the repo wherever.  :+1: \n. Okay.  I had just copied this config from ember-data.  Will removing all instances still work as expected?\n. ",
    "cowboyd": "Also note, this only effects ListView and not VirtualListView\n. I did not, since I was unable to reproduce the issue in Canary, and if I go back to the jsbin with Chrome 37, I no longer see it. If it can't be reproduced, then it doesn't exist :)\n. ",
    "igillis": "Looks like this was on my end -- list-view does indeed support this option. Sorry for the confusion!\n. ",
    "lkroshchuk": "Thanks for the feature! One small bug: items height is cashed and not cleared on content change.\nThis is fix my issue:\ncontentDidChange: Ember.observer(function() {\n                //Height cache should be cleared on content change\n                this._cachedHeights = [0];\n                this._cachedPos = 0;\n                addContentArrayObserver.call(this);\n                syncChildViews.call(this);\n            }, 'content'),\n. ",
    "kgish": "So does that mean that it'll be fixed?\n. Just a little something to contribute, every little bit helps.\n. ",
    "samselikoff": "This is my top OSS priority right now, you can assign to me. I'm setting up a jekyll site and will show you progress on http://www.samselikoff.com/list-view/.\n. Some Q's:\n1. Why do we use the collection helper?\n2. Which params are required - content, height and rowHeight?\n3. Why a view rather than a component?\n4. When to use List vs VirtualList? CSS media query to guess when on mobile device? Which mobile OSs?\n5. Is there a build anywhere I can link JSBins to? I see the \"latest\" link but I believe the examples are using .05. Which version should I use?\n. p.s. @stefanpenner i'm blocked on some of these, particularly number 5\n. yes now that #203 is merged I'm going to go back through and update (after this week's conference)\n. #153 for reference\n. Some info I need to fill in the blanks:\n1. Why do we use the collection helper?\n2. Which params are required - content, height and rowHeight?\n3. Why a view rather than a component?\n4. When to use List vs VirtualList? CSS media query to guess when on mobile device? Which mobile OSs?\n5. Is there a build anywhere I can link JSBins to? I see the \"latest\" link but I believe the examples are using .05. Which version should I use?\n. ",
    "karlguillotte": "It would be more enjoyable to use it inside an Ember CLI application. I could find some time to convert it. Is there some work that has been done by someone? \n. ",
    "mysterlune": "i've already got a shim available for this as an ember add-on. \nhttps://github.com/mysterlune/ember-cli-list-view\nthere was yet another shim started by someone else, though the setup was wrong and made it so nobody could pull dependencies, etc, which is why i started my own. i followed the pattern for registering with Bower and NPM the way @marcoow did for ember-simple-auth, etc.\nwhile it's a bit rube-goldberg-ish, it does the trick for you to be able to do:\nnpm install\nember generate ember-cli-list-view\nand add:\napp.import('bower_components/ember-cli-list-view/list-view.js');\n... do your project's Brocfile.js.\nfeel free to fork and pr. there's a Maintenance.md file in the project i'm using to document the process i follow for updating the package.\n. makes sense. i agree the whole shim thing is a bit messy.\n. right on. well, please keep me in the loop when dev starts on this. i'm interested in contributing if it wouldn't add more cooks than necessary to the kitchen.\nfor now, when folks need to use this as a shim'd addon, there's something for them. i'm happy to pull that repo offline, off-registry when this project is addon-ified.\nkeep up the great work, y'allz.\n. Closing this PR since there are a number of issues I just saw that I hadn't accounted for. Will resubmit when things are a little closer to correct.\n. @stefanpenner, i'll give it a try.\n@imkmf, thanks for your interest. one of the main things that is causing me trouble is being unable to know much about views outside the viewport and/or buffer (other than their proto() values from class definition). it's easy to track an item view's dynamically updated rowHeight if it's in the viewport or buffer because there's an actual instance in the list view's childViews and/or positionOrderedChildViews() response. but unfortunately, for all the other n-item views, there's only cached data (e.g. _cachedHeights, _cachedPos, etc.). and the cache, when necessary, gets rebuilt off of the proto().rowHeight values, not the dynamically generated values resulting from possible user and/or binding updates.\nfor a situation where an item view contains an accordion that becomes isExpanded or something, its own height and the positions of items lower in the list need to recompute and update the _cachedHeights and totalHeight values of the list view. that doesn't seem too difficult until the user scrolls down the list so the expanded view leaves the viewport/buffer altogether and gets re-rendered when scrolling back to it. then the cache is all off and the position y-values are not accurate anymore.\nfor an item view like this:\n...\n  itemViewClass: ListView.ItemView.extend({\n    rowHeight: 200,\n    fooHeightObserver: function() { \n      // compute a new height\n      this.set('rowHeight', [new height]);\n    }.observes('someExternalInfo')\n  }),\n  ...\n... i can only know the itemViewClass.proto().rowHeight, which is fine at first. then, say, someExternalInfo updates and provides the item view with data it needs to compute the height (e.g. a scale factor for \"zooming\" in and out using a slider control, or whatever). at that point, all views (not just this one) need to have a different rowHeight. again, scrolling the view causes the cache of heights and positions to recompute based on the proto() value and positions are all off. \nthe case i'm fighting with is where i'm trying to put images (of document pages) into the background style of the item view, and i don't know the image dimensions up front. for my purpose, a document may have many pages of varying sizes. while i know i can fix the width, i don't know what the height of the item view should be until the model for the displayed document returns from the service via ajax. the model contains the height/width dimensions of the full size image, which i then use to create an aspect ratio constrained on the list view's width in the DOM. however, other factors (e.g. sidebar expand/collapse) may update the list view's width in the DOM as well, adding to the multifactorial complexity of updating and caching the correct item view data.\ni'm able to get the first few images positioned correctly. also, as i scroll and the item views go out of the viewport into the buffer and beyond, they don't re-render at all. that's probably a different issue, but it's where i'm at.\ni might be trying to push ListView harder than it was intended for, given the tall items and relatively short viewport height. i'd concluded that if there was a way to more actively manage the values in _cachedHeights and _cachedPos, etc., based on what views were rendering and re-rendering, then the list view could scale fluidly in height and/or width for its item views and always have an accurate record of their y-positions based on dynamic changes rather than their proto().rowHeight values.\ni'd be interested to hear what kind of issues you've been facing, and whether #173 has resolved your issues.\n. @tim-evans, @flyswatter, indeed. the build i published was a stop-gap for those of us who want to just bang out projects with the addon style implementation. watching the list-view repo (and the issue https://github.com/emberjs/list-view/issues/160) for my cue to pull my repo down.\nnot much will change for consumers; just need to make sure list-view@0.1.0 hits this todo so i can deprecate.\n. ",
    "taras": "@tim-evans I don't think we should add blueprints because views are on their way out anyway. There is no reason to create new Api that won't last long.\n. Close it :)\n. @stefanpenner yeah, definitely, just gotta find the time :)\n. Well, this was awesome!\n. Dasherized arguments have been restored.\n. @stefanpenner @jasonmit I made the helper compatible with both Ember 1.9.1 & Ember 1.10.\nI don't know how to test for this.\n. Yeah, I blew away dependencies, changed version in bower.json, ran install and then ran tests\nOn Sun, Feb 8, 2015 at 9:13 AM, Stefan Penner notifications@github.com\nwrote:\n\n\nI don't know how to test for this.\ndid u test manually between those versions?\nReply to this email directly or view it on GitHub:\nhttps://github.com/emberjs/list-view/pull/194#issuecomment-73412391\n. @stefanpenner should I updated dependency to 1.10?\n. \"scripts\": {\n    \"start\": \"ember server\",\n    \"postinstall\": \"bower install\",\n    \"demo\": \"ember build && node lib/demo_server.js\",\n    \"docs\": \"./bin/generate_docs.js\",\n    \"test\": \"ember test\",\n    \"build-all\": \"ember build --environment production\",\n    \"prepublish\": \"ember build --environment production\"\n  },\n\n\nLike this? Are we ok with including the built assets in the library?\n. Ok, I'll leave it then. I just wanted to bring it your attention because the library is still not usable as an ember-cli addon in it's current state.\n. @tim-evans I think we can close this issue.\n. @stefanpenner there are a few things to fix but a big chunk of this is ready.\n. @stefanpenner push the big green button!\n. That's a lot of issues with one PR\n. <3\n. Rebased this branch against master after NPM release. Got some tests to fix.\n. @stefanpenner @krisselden a87bdac3e28a80bab27668ec8325c4c5a1bea6b8 includes Kris' changes to pack. I'll create a list of fixes that need to be made.\n. I haven't allocated the time to work on this because Stef was busy and I don't know enough about list-view internals to know what tests fail because they're broken vs expected. If you have some cycles to work on this with me, then we should be able to make progress pretty quickly. \n. That's great. I'll take direction from you about the changes that need to be done. Let me know when you're ready to spend some time on this and I'll be available. Look forward to working on this :)\n. Thank you :)\n. I created an issue to remove moduleForView in favour of moduleForIntegration or something similar #207  I'll do this at some point in the near future.\n. @danielspaniel it's happened before, so I wouldn't be surprised :)\n. @mrinterweb you should be able to install list-view from that branch with npm install --save \"emberjs/list-view#pr-219-fix\"\nI'm putting together an example app right now.\n. Here is an example app that shows it working (not very well) and package.json\n. @stefanpenner and I started talking about releasing the addon and we agreed to publish it on NPM as ember-list. Also, I'm using {{ember-list}} helper in the examples since the View will become increasingly less relevant as approach Ember 2.0.\n. @ebryn I'm with you. We need something other than ListView but I don't know what. Suggestions?\n. Sure, what about npm package name?\n. Ok, but I still want to remove reference to Ember.ListView because that's misleading. Should I just call it ListView in the README?\n. Ok, I renamed Ember.ListView to ListView and Ember.VirtualListView to VirtualListView.\n. > `import ListView from 'list-view/list-view' is kinda crappy\nCan we do import ListView from 'ember-list-view'?\n. @stefanpenner I don't know how to do that with EmberCLI. Can you give me a hint and I'll figure it out from there?\nI asked @rwjblue about this before and he said: \"That's not how ES6 modules work.\" and then went and did it for Pretender import Pretender from 'pretender' :hushed:\n. It looks like in the mixin, scrollTop is set with this.scrollTop and this.set('scrollTop', scrollTop) - potentially depending on wether it should fire observers or not.\nCurious, what prompted you to make this change? \n. LGTM, Once this is merged, I'll update my PR\n. @stefanpenner I spent all night yesterday trying to figure out why the remaining tests are failing and I didn't even make scratch. We might need to do it again if we want to get it out of the door in the near future.\n. Yep, let me know on Slack when you want to start. \nI did some investigating of the controller issue that we were debugging and it looks like it works correctly when I rebuild the example in dummy app and it work correctly. Either the helper is unreliable or something more sinister is going on :speak_no_evil: \n. I tested this branch against Ember master that includes #10795 and all tests are passing. We're very close to being able to cut our first major releases with EmberCLI compatibility and Ember 1.10 & Ember 1.11.1 compatibility.\n. You need to upgrade your project to Ember 1.11.1. 1.11.0 has a regression that breaks ember-list-view. I submitted a PR to your example project.\n. as @davidsteinberger suggested, using {{collection}} renders the list view. I believe reference to {{view}} helper in the documentation is incorrect. I submitted a PR to update the documentation and add an acceptance test to make sure that list view renders when using {{collection}} helper.\n. ember-list helper uses collection helper to render ListView https://github.com/emberjs/list-view/blob/master/addon/helper.js#L32. Until that changes, my guess is that it's safe to use the {{collection}} helper. \n. It doesn't at the moment, but a PR would be welcomed :)\n. @ef4 @stefanpenner do you guys have any direction on how we should provide a globalized build for this addon? \n. This is very interesting. \n\nreverse of the concept of Antiscroll\n\nIs it reverse in what it will do or reverse in how it works?\nIs the intention to allow scrolling the page and thereby scrolling the content inside of the list-view? \n. Ember 1.11 has a regression, use 1.11.1\n. I will have time to do it but the path forward has been muddled by the state of the pack branch and refactoring that Kris wants to do to make it Ember 2.0 compatible. Let's chat about it tonight.\n. Looking forward to it :)\n. What's the alternative to doing this?\n. It's not necessary to do most of what old helper was doing to arguments. Please, read my comment above.\n. Ember.ListView.create requires run loop. I've seen this in other code, I'm not sure why it worked before.\n. Ok, I will add it.\n. Yes.\n. Done.\n. What should we do with what we have here?\n. No, they should actually not be included in vendor. Those are only necessary while doing addon development. index.js needs to make sure that they're only included when this.isDevelopingAddon() !== true\nTry the following code in your addon's index.js, if it works, make a PR please :)\n```\n/ jshint node: true /\n'use strict';\nmodule.exports = {\n  name: 'list-view',\n  treeForVendor: function() {\n    if (!this.isDevelopingAddon()) {\n       return;\n    }\n    var klassy = new this.Funnel('bower_components', {\n      srcDir: '/klassy/lib',\n      files: ['klassy.js'],\n      destDir: '/'\n    });\nvar emberTestHelpers = new this.Funnel('bower_components', {\n  srcDir: '/ember-test-helpers/lib',\n  include: [/.js$/],\n  destDir: '/'\n});\n\nvar es6EmberTestHelpers = new this.transpileModules(this.mergeTrees([klassy, emberTestHelpers]), {\n  esperantoOptions: {\n    _evilES3SafeReExports: true,\n    strict: true\n  }\n});\n\nvar emberTestHelpersAMD = this.concatFiles(es6EmberTestHelpers, {\n  inputFiles: ['**/*.js'],\n  outputFile: '/ember-test-helpers.amd.js'\n});\n\nvar qunitModule = new this.Funnel('bower_components', {\n  srcDir: '/ember-qunit-source/lib/ember-qunit',\n  include: [/qunit-module.js$/],\n  destDir: '/'\n});\n\nvar es6QunitModule = new this.transpileModules(this.mergeTrees([klassy, qunitModule]), {\n  esperantoOptions: {\n    _evilES3SafeReExports: true,\n    strict: true\n  }\n});\n\nvar qunitModuleAMD = this.concatFiles(es6QunitModule, {\n  inputFiles: ['**/*.js'],\n  outputFile: '/ember-qunit-module.amd.js'\n});\n\nreturn this.mergeTrees(['vendor', emberTestHelpersAMD, qunitModuleAMD]);\n\n}\n};\n```\n. ",
    "Genkilabs": "+1\nIf the {{#collection ...}} syntax will be removed after deprecation, I'd like to know the correct alternative.\nAlso, it would be great to include how to use and subclass this in ember-cli. I know it's a separate project, but this is the first place people will come to figure out how to use it.\n. Thank you @stefanpenner. The CLI seems to be becoming the norm so making list-view integrate smoothly is greatly appreciated. \n. +1\nI found this too. If you have a split view with a listing of link-to's on one side and an {{outlet}} for the selected item, then the context of that outlet will become the controller of the top visible item on scroll.\n. No luck. I am doing something like this:\n{{#collection Ember.VirtualListView contentBinding=\"controller\" height=661 rowHeight=82 width=320}}\n    {{#link-to 'news-articles.show' this classNames=\"cursor-pointer\"}}\n        <h1 class=\"truncate\">{{{title}}}</h1>\n        <p class=\"truncate author\">{{#if author}}By: {{author}}{{/if}}</p>\n        <data class=\"truncate\">{{from-now published}}</data>\n    {{/link-to}}\n{{/collection}}\nand of course\n.cursor-pointer{\n    cursor: pointer;\n}\na { pointer:cursor; }\nWorks great on all my browsers but iOS.\n. I should point out I also tested this on ember-cli-cordova and experienced this in both the xcode/emulator environment and when pushed onto an iPad, as well as in the regular mobile safari.\nDoes anyone by chance have an example up that uses virtual-list-view with working links I could look at?\n. Nope, I ended up giving up on the list-view projects and rendering full lists then wrapping them in https://github.com/eviltrout/ember-cloaking\nThis seems to perform even better on desktop, and also works on iOS through ember-cli-cordova\n. ",
    "SebastianSzturo": "Could someone explain how to use list-view in ember-cli atm? \n. Another fix for that is to use link-to with this.id\n{{#collection Ember.ListView contentBinding=\"items\" height=900 rowHeight=132 width=595}}\n  {{#link-to \"item\" this.id}}\n    {{list-view-item item=this}}\n  {{/link-to}}\n{{/collection}}\n. \n. Also not working for me. Anyone figured this out?\n. ",
    "mrinterweb": "Issue #153 is closed, and the documentation still references globals. I don't think this issue should be considered a duplicate. I am currently trying to figure out how to fix the deprecation warnings being thrown by the use of globals. So far, I have not had any luck. I'll just live with the deprecation warnings for now.\n. I'm guessing that this commit, in Ember, is the one that initially breaks list-view's compatibility with ember 1.8. https://github.com/emberjs/ember.js/commit/b87696b07b5ef7d585225ca1b375d5a528c379f3\n. Just curious what the status of this is. I use ember list-view pretty heavily in my project, and I am unable to update to 1.8. From what I gathered, @jasonmit was getting close on that pull request.\n. @jasonmit that is good news. I found that there was one place that I was using Ember.VirtualListView, but all the other places were just using Ember.ListView. My app is a mobile app so I should have been using VirtualListView, but I don't see that big of a difference between the two. I'll give your solution a try and report how it worked for me.\n. Turns out that I still need VirtualListView for now. I don't have the time resources or knowledge share to help much on updating this at the time. I'll stick with Ember 1.7 until another solution is available. Thank you for your work on this @jasonmit.\n. I've been using ember-list-view with JQuery 2 and ember 1.7 for a while, and I have not ran into any issues.\n. I checked out the pr-219-fix branch and tried to build. The readme instructions of npm run build-all result in \"missing script: build-all\". npm run build produces something that I don't believe to be usable. Can anyone suggest a way to build list-view? I'm trying to use it with ember 1.11 and ember-cli 0.2.2.\n. @stefanpenner for ember-cli should I run ember install:addon list-view? If so, how would I specify the pr-219-fix branch? I think I'm missing something here in terms of how to get list view working with ember-cli.\n. Thank you @taras. That example is useful. Things \nKind of unrelated question: What should be imported when defining a view that extends Ember.ListView?\nI tried:\njavascript\nimport ListView from \"list-view/list-view\";\nMyView = ListView.extend({});\n\"Uncaught TypeError: Cannot read property 'extend' of undefined\"\nThanks to your example, I learned about the ember-list component. Everything is working for me except extending ListView (which I don't really need to do).\n. @taras this is fantastic. I believe these issues were blocking my 1.11 upgrade. Thank you :beers: :cocktail: \n. Is list-view still incompatible with 1.13?\n. I'm also available to help test.\n. It would be easier to test from a feature branch.\n. ",
    "samratjp": "Yeahh that's exactly the setup I have. Do you guys have any suggestions for this?!\n. +1 @jonwingfield - totally works!! Now the only other issue I need to resolve is that when i scroll the listview the other pane scrolls along too (this only happens if the list is still getting rendered). \n. ",
    "jonwingfield": "I figured this out. \nReusableListItemView is the default ItemView for Ember.ListView, but it \"has some quirks.  This appears to be one of them.  \nTo fix this, in Ember.ListViewMixin, I changed\nEmber.ListViewMixin = Ember.Mixin.create({\n  itemViewClass: Ember.ReusableListItemView,\n  emptyViewClass: Ember.View,\n  classNames: ['ember-list-view'],\nto\nEmber.ListViewMixin = Ember.Mixin.create({\n  itemViewClass: Ember.ListItemView,\n  emptyViewClass: Ember.View,\n  classNames: ['ember-list-view'],\nhttps://github.com/emberjs/list-view/issues/128\n. ",
    "Josh-Mosh": "Has anyone found a fix for this issue involving select elements?  When scrolling out of view, the first option is automatically selected.  We're already using ListItemView over ReusableListItemView so far as I can tell.  I can provide project context if it would be helpful.\nMy current fix is to watch the didInsertElement event for selects with blank values, and set their values as they are inserted / reinserted into the dom.\n. ",
    "arenoir": "Any word on this?  Does the pack branch address the domManager issue?\n. ",
    "opichals": "+1 for somebody looking at this\n. Any branch to look at and test?\n. ",
    "kumavis": "much engineering :smile_cat: \n. this has been a long time coming! nice work\n. ",
    "ianbale": "Brilliant! Thank you. I thought I;d tried everythign to make this work, but it seems there was one thing I hadn't!\n. ",
    "zackangelo": "Tested this PR, worked on Chrome but not on Safari (all of the rows were rendered on top of each other). It appears to be using the incorrect transform css property prefix. Changing the prefix from WebKit to -webkit- seemed to fix it. \n. Seems to work in the latest 1.9 beta as well, as long as I force it to fall back to the top: and left: css properties. \n. ",
    "jdurand": "@jasonmit I've been following this PR; I had the Safari issue and I confirm that it is now fixed. :+1: \n. I take back what I said earlier. ListView works fine, but VirtualListView is broken. It looks like it could be a similar issue to what was happening with ListView on Safari, but it happens in Chrome as well.\n. Great work guys :100: \n. @MaxSanKyu I managed to do something similar by using an array as the content for my list view. Each item specifies a template (or view) to render and list-view takes care of the rest.\n\nYour controller can then just deal with the array and tell the list view to scroll at a specific position based on some user action.\n. ",
    "Taytay": "Just wanted to pop in and say thanks for the hard work on this issue. It's the only thing keeping us from the 1.8 upgrade, and I was relieved to see that folks were on top of it!\n. Nice work!!\nOn Fri, Dec 12, 2014 at 3:54 PM, Jonathan Goldman notifications@github.com\nwrote:\n\nI will try this first thing on monday and come back with a full trip\nreport, very excited to be able to finally upgrade to 1.8!\n\nReply to this email directly or view it on GitHub\nhttps://github.com/emberjs/list-view/pull/175#issuecomment-66841321.\n. \n",
    "kenips": "Ditto! Really appreciated the work you've done so far @jasonmit! So any ideas on getting VirtualListView to work? If 1.9 lands final next week we'll be two version behind :'(.\n. @stefanpenner yes I heard and good to know - so what's the plan in getting this PR merged? Is 1.9 simplified enough for this to be looked at or we're looking at further improvements in 1.10 so that major rework is settled before looking at this again? \n. @mansona try the dist version here: https://github.com/jasonmit/list-view/tree/1.8-rerender-dist/dist\n. :heart: :heart: :heart: \n. @stefanpenner what are the steps remaining to get http://builds.emberjs.com/list-view/list-view-latest.js updated? Need help?\n. ping @rwjblue - sorry know you're super busy but if you can take a look - desperately need builds.emberjs.com to have the 1.9 goodies.\n. Thanks @fivetanley! Yeah I've been using custom dist for awhile now. Just trying to send PRs to some repos that rely on builds.emberjs.com so will wait for that to update :). Thanks so much!\n. ",
    "mansona": "Hey folks, Just trying to test this in my ember-cli app but i'm running into a few difficulties. I've included a built version in my bower_components folder (instead of vendor) and done this in my Brocfile: \napp.import({\n    development: 'bower_components/list-view/list-view.js',\n    production: 'bower_components/list-view/list-view.js'\n});\nNow the file is getting included in my vendor.js asset but Ember.ListView doesn't seem to be available. \nI would love to help testing this but I'm just finding it a bit difficult to include so any help would be appreciated. Cheers! \n. So is https://github.com/emberjs/ember-collection now the \"official\" successor to ember-list-view? If so can we create a meta issue over there that people can follow for updates on it's 1.13 and 2.0 readiness? \nI'm only asking because to me (as an outside observer) it is almost impossible to track the progress of this issue. \n. @rwjblue I think ultimately your suggestion to make a new repo was the right choice, and again in the same sentiment as my last question it just needs to be documented somewhere :joy: A simple update of ember-list-view's Readme pointing to ember-collection's Readme should solve the issue for any brave adventurers straying here in the future.\nI think we're agreed that we should create an issue on ember-collection. Although I do agree with @rwjblue that @mmun should be one to create the issue seeing as he is closest to the implementation I just went ahead and did it because: \n1. I believe in \"ask forgiveness not permission\" and \n2. As @mmun hasn't responded yet I figured he was busy and I wanted to take some of the pressure off. \nIf I become a bottleneck here we can just create a new one over then :wink: \nHere is the link: https://github.com/emberjs/ember-collection/issues/5\n. ",
    "jayphelps": "Which browser and scroll direction setting? I'm on OS X 10.10.1, Chrome, both natural/historic scrolling settings = works as expected.\nI'm guessing this is happening in a browser that doesn't support event.webkitDirectionInvertedFromDevice, but this may no longer be an issue (Chrome or what ever browser you were using may have added it)\n. ",
    "signalnerve": "@mysterlune I'm attempting something similar to this \u2013 curious what kind of issues you ran into?\n. hey @stefanpenner, @mysterlune \u2013 been playing around with this new info and PR this morning/afternoon, thought I'd give a bit of a progress report: \nwe're also working with variable row heights. it sounds like our implementation isn't as complicated as @mysterlune's, though; we have two pre-defined rowHeight (default and expanded). \ni saw a little bit of progress in #173 \u2013\u00a0updating the listView instance's rowHeight does re-render the view, where it didn't before. the final missing piece is being able to specify different rowHeight based on each row's content. i think i spotted the beginnings of something like this in the multi-height demo. the part i'm having trouble with is actually overriding the listView instance's rowHeight to call heightForIndex. any suggestions there, @stefanpenner? lmk if i can clarify any of this, i'm still wrapping my head around the internals of this project :)\n. ah, that worked! <3 thanks for the help @stefanpenner \n. thought I'd update for future reference - I ended up not needing the aforementioned pull request, and heightForIndex was the magic key here. gist with the implementation\n. Ah, I forgot to mention that the JSBin is using a version of ListView built the week of 12/1/14 so if this is something that's been fixed since then, my bad!\n. Damn, I'm actually seeing now in my app that even a single expanded row can cause similar display issues. I can't recreate it in the JSBin (only with multiple expanded rows) so I'm hoping that if we find a fix to this it'll solve both situations.\n. Ah, curious what makes you suspect that? Trying to determine if there's an alternate approach I should be taking (as in, am I doing this wrong?) or if it's just worth it to wait for the new branch to make it to master...\n. @stefanpenner sorry to be that guy, but any update on this? Alternatively, would you consider the pack branch safe for us to merge locally on our list-view.js for the sake of getting this fixed temporarily?\n. @tim-evans, @stefanpenner we've since moved to a different lib :( sorry I can't be much help on this\n. We went with ember-cloaking. Was pretty easy to transition between the two.\n. ",
    "mkolenda": "Closing this bug.  Silly guy, forgot to add:\n<style>\n    .ember-list-view {\n        overflow: auto;\n        position: relative;\n    }\n    .ember-list-item-view {\n        position: absolute;\n    }\n</style>\n. My bad really.  Another case of RTFM.\n. ",
    "bargar": "Thanks, @mkolenda - you saved me some time by pointing this out!\n. ",
    "oskarrough": "Another case of RTFM: be sure to define rowHeight on the component to match the exact height of your items.\n. Is this what is needed before this will work? Need to pass a property from my controller down to the component. Or am I missing something super basic about contexts here?\nJavaScript\n{{#ember-list items=model height=500 rowHeight=40}}\n  {{track-item track=content fish=controller.something}}\n{{/ember-list}}\n. @tim-evans exactly. But it doesn't work yet. Correct?\n. ",
    "MaxSanKyu": "Sadly not exactly what I was looking for.\nDoesn't really work with grid view and I would have to add an empty first object in the content, which is not really optimal.\n. Thanks for the quick answer.\nI tried it out but unfortunately the error still shows up :(\n. No need, already solved it by also replacing createChildViewsMorph()\n``` javascript\n      render: function (buffer) {\n        var element          = buffer.element();\n        var dom              = buffer.dom;\n        var container        = dom.createElement('div');\n    container.className  = 'ember-list-container';\n    element.appendChild(container);\n\n    this._childViewsMorph = dom.appendMorph(container, container);\n\n    return container;\n  },\n\n  createChildViewsMorph: function (element) {\n    this._childViewsMorph = this._renderer._dom.appendMorph(element.lastChild, element.lastChild);\n    return element;\n  },\n\n```\nThanks so much for your help!\n. ",
    "codepreneur": "If I use {{ember-list}} i.e. :\n{{#ember-list items=controller height=300 width=500 row-height=100 element-width=100}}\n  {{name}}\n{{/ember-list}}\nthen I get the following error:\nUncaught Error: <something@view:default::ember318> Handlebars error: Could not find property 'ember-list' on object (generated index controller).\nI am on:\nember -v\nversion: 0.1.7\nCould not find watchman, falling back to NodeWatcher for file system events\nnode: 0.10.35\nnpm: 2.1.8\nAnd I have Mac OS X Yosemite. Version 10.10\nAlso, based on the error I get, it seems that Ember.ListView is dependent on Ember Views and they are going to be deprecated in Ember 2.0 hence how is this going to affect Ember.ListView, 2.0 onwards?\n. Andrew Hacking did on my stack overflow question (I am citing):\nI've just forked the ember-cli-list-view and ember-list-view-component to get it working with the latest Ember CLI 0.1.7 and Ember 1.9.1 with handlebars 2.0.0.\nI needed to use the latest master version of Ember ListView. I intend to raise a PR against the ember-cli-list-view package, but in the meantime, my fork of the add-on is available here: https://github.com/ahacking/ember-cli-list-view\nYou can install it by adding the following to package.json:\n{\n  \"devDependencies\": {\n    \"ember-cli-list-view\": \"ahacking/ember-cli-list-view#0.0.6-alpha.1\"\n  }\n}\nThen run npm install.\nYou won't be able to use ember generate ... since Ember CLI doesn't currently support adding bower packages at a URL. Instead you will need to add the ember-list-view-component package and zynga scroller to bower.json manually:\n{\n  \"dependencies\": {\n    \"ember-cli-list-view\": \"ahacking/ember-list-view-component#0.0.6-alpha.1\",\n    \"zynga-scroller\": \"https://raw.github.com/zynga/scroller/master/src/Scroller.js\",\n    \"zynga-scroller-animate\": \"https://raw.github.com/zynga/scroller/master/src/Animate.js\"\n  }\n}\nThen run bower install.\nYou will then need to add the following to Brocfile.js:\napp.import(\"bower_components/zynga-scroller/index.js\");\napp.import(\"bower_components/zynga-scroller-animate/index.js\");\nProviding you have followed the above instructions precisely, you can then use Ember ListView and VirtualListView as follows:\n```\n// app/views/my-list-view.js\nimport Ember from 'ember';\n// can also use Ember.VirtualListView (for iOS scrolling support)\nexport default Ember.ListView.extend({\n  height: 500,\n  rowHeight: 30,\n  itemViewClass: Ember.ListItemView.extend({\n    templateName: \"some-item-template\"\n  })\n});\n```\n. ",
    "xrl": "I can confirm this issue as well. I tried starting up the server with a debugger statement at the top of https://github.com/emberjs/list-view/blob/master/packages/list-view/lib/main.js and it never triggered when starting the app (I restart the ember serve process so it would reload libraries). Is the issue that I added list-view from bower when it should have been added from npm?\nThis is my bower.json:\n\"dependencies\": {\n    \"handlebars\": \"~1.3.0\",\n    \"jquery\": \"^1.11.1\",\n    \"ember\": \"1.8.1\",\n    \"ember-data\": \"components/ember-data#canary\",\n  [[ SNIP ]]\n    \"list-view\": \"emberjs/list-view#master\"\n  },\nReading over how ember-cli addons are processed, http://reefpoints.dockyard.com/2014/06/24/introducing_ember_cli_addons.html, should the list-vew package.json have a ember-addon tag?\n. ",
    "mike-north": "Thanks for this @taras! This lets me put multiple projects on 1.10!\n. ",
    "zachaysan": "Hey when is this getting merged? :8ball:\n. ",
    "alexdiliberto": "Has this been abandoned in favor of the full CLI Addon integration PR? \n. :+1: Awesome!\n. @taras :metal: :beer:\n. ",
    "danfinlay": "Oh also looks like @mysterlune made this an addon already.\n. ",
    "ahmed1490": "Hi any update here?\n. ",
    "givanse": "I was trying out this PR and found that the zynga-scrollbar dependency wasn't easy to add for the consuming application. My guess is that this library would be added by the blueprint, right?\nI could write a shim that would:\n-Provide ES6 modules (remove globals)\n-Make the libs available through bower, so its available always. You would just add the correct imports to the Brocfile depending on the views used.\nDoes it sound like a good plan?\n. ",
    "jrhe": "Just set up my app with this branch and its working well. One bug though is that it no longer seems to add position:absolute to the list view items meaning that all the item transforms are wrong.\nAdditionally the layout-bin-packer dependency doesn't seem to be set up properly so I had to manually add it to vendor to get things working. Maybe related:\n[Deprecated] new this.Funnel(..) is deprecated, please use broccoli-funnel directly instead  [addon: ember-list-view] when building.\nWhat is left to do on this branch? If theres anything that I can do do/ test, let me know.\n. ",
    "danielspaniel": "@tim-evans, what is the last version of ember that supported list-view  for you?\nCurious, because I am trying to upgrade to ember 1.11 - anything, and am blocked by this one. \n. How do you set the ember setting in bower.json to use the canary release?\n. Got it .. will give that a try\n. Using bower install ember#canary I am still getting that \"nextSibling\"  error  ( ember 1.12 canary ) .. crazy .. how did you get ember 1.11-canary .. ?\n Seems hard to believe that this would work in 1.11 canary, then break again in 1.12 ?? \n can you send you bower.json and package.json?\n. thanks @stefanpenner for update .. should I wait for 0.1.0 release to start using this with ember 1.11 \n. If you put this line in Brocfile.js \njs\napp.import('bower_components/ember-list-view/list-view.js');\nright below here:\njs\n// Use `app.import` to add additional libraries to the generated\n// output files.\nEmber.ListView will be available in your application to use as you described. You don't need to import it when your about to use it in other words.\n. ",
    "davidsteinberger": "@taras: Thanks for the PR and the example. What would be the best way to extend the list-view used by the ember-list helper? I tried using an initializer, however that did not work out.\n. I'm facing the same issue and haven't been able to fully figure that out myself: \n- Trying to render {{#view 'list-view' ...}} ... {{/view}} renders and empty item view.\n- Subclassing ListView and providing itemViewClass works just fine.\nBy looking at the tests this may be intentional: No test within https://github.com/emberjs/list-view/tree/master/tests/dummy actually instantiates the list-view that way. They either use #collection or a subclass which provides an itemViewClass (via itemViewForIndex).\n. @maulsea The issue is not #ember-list. That's known to work just fine. However the new Readme suggests view 'list-view' ... but then the items render blank. Does that work for you?\nNote: Using the #collection helper or providing a itemViewClass get the list-view working for me. \n. ",
    "redvalley": "For me the ListView component throws an error when I am not using this.set here:\nUncaught Error: Assertion Failed: You must use Ember.set() to set the scrollTop property (of <(subclass of Ember.ListView):ember1662>) to 50.ember.js:3940 Ember.assertember.js:15818 SETTER_FUNCTIONlist-view.js:667 (anonymous function)ember.js:13173 instrumentlist-view.js:661 exports.default.Ember.Mixin.create._scrollContentTolist-view.js:1449 exports.default.Ember.ContainerView.extend.scrollTolist-view.js:1444 exports.default.Ember.ContainerView.extend.scroll\n. Ok, I see. I am using ember list view for building an autocomplete component with endless scrolling functionality. Therefor I had to to observe the scrollTop property. I was not aware of that the scrollTop property should not be used as observable property.\n. Actually the scrollTop property was used in the past by my organization to fix a problem:\n fixNegativeScrollTop: ember.observer(function () {\n                    if (this.get('scrollTop') < 0) {\n                        this.set('scrollTop', 0);\n                    }\n                }, 'scrollTop'),\nToday and yesterday I retested this and found out that the problem does no more occure.\nSo forget about my small change, it seems that it is not required anymore -. also by me.\nGood thing is that now I know that scrollTop should not be observed, so thank you very much for this hint :-)\n. ",
    "pedrokiefer": "@taras :+1: :beer: \n. @stefanpenner PR updated as requested.\n. My bad, it was missing a parentheses!\n. ",
    "AmilKey": "@stefanpenner updated, added readOnly\n. @stefanpenner what are scroll events should trigger ember mutations?\n. @stefanpenner ok, i understand you, think one may close pull request.\n. @stefanpenner updated\n. ",
    "xkb": "Indeed that does work. That's when you're using the ember-list helper. \nIn the case of using the view helper what needs to be changed here?\n{{#view 'list-view' content=model height=500 rowHeight=50}}\n <div> hi </div>\n{{/view}}\n. ^ No that doesn't work. It creates list of list-item-view but each view is empty.\n.  Apologizes. If you have a vague idea of what might be causing this, I can spend some time on it!\n. I created an app showcasing my issue HERE. ~~There also seems be to an issue with items disappearing when you scroll ( throwing morph.destroy is not a function )~~\nAm I doing something wrong here?\n. @taras: Thank you! That fixes the second problem.\n. Back to the first issue.\nDoesn't work:\n{{view 'list-view' content=model.content height=500 rowHeight=50 width=500}}\nWorks:\n{{view 'list-view' content=model.content itemViewClass=viewItem  height=500 rowHeight=50 width=500}}\nSeems that the itemViewClass must be explicitly passed, is this expected? \n. @taras: I was aware of this when I opened the issue, I didn't mention it because the collection helper is deprecate. According to the APIs the view helper should be used to render CollectionView instances as well. Which makes this a bug either with the helper or list-view.\n. ",
    "maulsea": "FYI, @stefanpenner Your example did work for me.\n{{#ember-list height=100  items=model.items width=100 rowHeight=20}}\n  <div> hi </div>\n{{/ember-list}}\nJust had to remove .items from model.items. We need to map it directly to model as per model set in docs example.\ncc: @KarimBaaba \n. @davidsteinberger You are right! That does not work. I can't even get it to work with itemViewClass.\n. ",
    "jacojoubert": "This was my fault. I guess something changed in how scrolling is handled in the newest list-view and it invalidated my previous code. Sorry to have wasted your time.\n. Yeah seems to be my fault. My bad. \n. So I have spend a bunch of time investigating this and it is related to #229 \nI am using list-view in a popup and don't want the page to scroll when it runs out of items. So I watch the mousewheel event for the element so I can prevent the default scroll event and do it manually via the scrollTo method on list-view.\nIn the latest version of list-view some of the internals must have changed such that calling scrollTo in rapid succession causes it to have unexpected behaviour (though on Safari it works just fine). On firefox it scrolls to the top and in Chrome it causes the scroll event to bubble up to the page and scroll it. \nI am still looking for a better way to do this. In firefox watching the DOMMouseScroll event and setting cancelBubble to true does what I want. Have not been able to find a simple solution for Chrome. \n. I will also add  that Chrome seems to have a lot worse performance than other browsers so that may be related. Scrolling really fast shows the rows empty for a split second before the label shows up whereas that does not happen in Firefox or Safari. \n. ",
    "ef4": "It should be possible to produce a globals-compatible build using http://github.com/ef4/ember-giftwrap\n. ",
    "catc": "@jonnii any luck with giftwrap?\n. ",
    "severinedarlot": "Hello, we have the same problem than @jonnii . We don't use ember-cli. We use gem ember-rails. Usually we use the link 'latest development' in the readme but now it is not up-to-date.\nI try to create a globalized build with giftwrap but I failed. Here is what I did :\n```\nember new list-view\nedit the package.json file to remove \"ember-cli-sri\": \"^1.0.1\", \"ember-cli-ic-ajax\": \"0.2.1\", \"ember-data\": \"1.13.7\",\nnpm rm ember-data --save-dev\nnpm rm ember-cli-ic-ajax --save-dev\nnpm rm ember-cli-sri --save-dev\nnpm install\nbower install\nember install ember-list-view\nember install ember-giftwrap\nember giftwrap\n```\nI obtain a file addon.js and I put its content in our application\nNext, I added after our app creation:\nGiftWrap.install(App)\nBut when I run our application, on the line App.MyListView = Ember.ListView.extend({.. I obtain the error:\nUncaught TypeError: Cannot read property 'extend' of undefined\nI try to add\nEmber.ListView = GiftWrap.require('ember-list-view')\nBut it didn't help me. I guess I should use GiftWraph in a particular manner but I don't find how. @ef4 @catc have you got an idea to help me ? We just want to use the last version of list-view.\nThanks\n. Wonderful, it works ! I had:\nEmber.ListView = GiftWrap.require('ember-list-view').default;\nEmber.ListItemView = GiftWrap.require('ember-list-view/list-item-view').default;\nThank you very much.\n. ",
    "pichfl": "@taras I should have clarified that: Antiscroll adds custom scrollbars to an element by wrapping the element in a container, hiding the regular scrollbars in the overflow. This way all native scrolling behaviour for the element is retained. \nFor the virtual-list-view, we already have simulated scrolling behaviour, so we pretty much want the opposite of Antiscroll, showing native scrollbars for virtual overflow like I described in the ticket. The scrollbars would still be with the element, not somewhere else on the page, as I just wanted to bring the virtual view on the same level as the regular one.\n@stefanpenner We have a lot of users on iPhone and iPad, so preventing any lag would be preferred. If the non-virtual view no longer suffers the problems described in the first paragraphs of the README, I'll happily switch over :smile: \n. We don't use list-view right now (doing a lot of pagination), but I'll see if can try it's current version in a branch and/or create a testcase for our scenario.\nHowever, while iOS 8 is great (and solves at least this problem for me), I'm not so sure about Android or the behaviour found in #229 though. If you think those concerns become invalid with the latest version of list-view, feel free to close this ticket, if not, I'll give it a shot and try to extend virtual-list-view.\nEdit: I just learned that Chrome on Android fires the scroll event correctly, but funnily enough, if you run your app as a Web Clip in iOS, it won't fire the events correctly as Web Clips will use the older rendering engine. \n. ",
    "patuku": "Hi @taras ... thanks for the clue ... it works :+1: :+1: :+1: \n. @tim-evans we want to create a timeline with a various type of data and below each data will show up the comments from all participants, which means each item will have their own rowHeight. I'm trying to update the position after the element available at DOM, since ember-listview using CSS transition. Is that doable? or maybe we can do it another way?\n. Can you point me the direction how to invalidate the rowHeight and updatePosition correctly? so maybe I can do some PR also if I can add the method.\n. Okay then, I think I have to wait until it happened ... Thanks anyway, good work.\n. ",
    "drewcovi": "@stefanpenner any recommended paths forward for something like this?\nWe're in a project faced with a ton of data in some accordion style rows, so this would be a huge win.  The only other solution I can think of is to rebuild the entire dataset inserting the drawer where needed, but the drawer would still need to be a known height since we can't dynamically update rowHeight...\n. ",
    "daem0ndev": "very cool, thanks for the quick feedback! hope to hear from @krisselden...\nin my specific use case, I was getting parts of my list items completely blanking out and not redrawing when scrolling on a nexus 5 android phone. Using translate3d resolved the issue and actually made it quite a bit more fluid. \nAdditionally, I would love to have used VirtualListView, but its severely broken on this same android phone in question. The scroll is not fluid or momentum at all, and it only goes one list item at a time it feels like, no matter how long or intense the swipe is. \n. at worst, I would also even propose making it a configurable option per list view instance... I dont mind doing the commits if I get the go ahead from you guys!\n. I am using latest chrome on Mac and everything seems just fine ;) can we try revisiting this?\n. ",
    "tp": "For a tree-view like structure I built a component (in-house), that has no nested list views, but rather just indents items based on their depth in a single list view.\nThe code slightly more complicated than the straightforward way, but uses much less elements than other approaches and is always fast, no matter how many nodes are open/visible.\nMaybe that would work for you as well.\n. ",
    "Geokoumpa": "I would gladly try your component as well tp, thanks!\n. ",
    "scooterlord": "Hello. Any news on this one? Haivng the same issue and would be glad to have this solved!\n. ",
    "jmurphyau": "Issue #227 and pull request #230 both relate to this problem. There is discussion around the collection helper and additional changes in #230 - I was going to close this PR but I'll leave it open for someone with access to close if they see fit.. \nThis PR solves the main issue on README and doesn't really cover anything else like #230 does. Merging this PR might solve the larger problem quicker leaving #230 open for all the other things? Or get rid of this and leave it all as #230..\n. ",
    "shishirmk": "Looking to solve a similar scenario.\n. ",
    "berislavbabic": "@stefanpenner is there any low hanging fruit that I could help with here?\n. ",
    "tschoartschi": "I'm very interested in using \"list-view\", so are there any news on this issue?\n. ",
    "ivan-granulin": "@stefanpenner @krisselden @raytiley Will the new list-view be backwards compatible with the current one (version 0.5)?\nWill there be any syntactical changes? In other words - will I have to change the code of my app that's using list-view 0.5?\n. @raytiley Thank you for reply. I do really appreciate your work. The syntax looks just superb! What a pity we have to wait till July 24 to get it in our hands - having said that, do you plan any \"pre-July-24\" release of ember-list?\nBy the way, if the ember-list works basically the same as each, does that mean it could replace it when rendering an html's table-based grid (maybe with some modifications)? - Example:\n<table>\n {{#ember-list items=model height=500 width=800 cell-layout=(fixed-grid-layout 800 800) as |item|}}\n    <tr>\n       <td>{{item.prop1}}</td>  <td>{{item.prop2}}</td>  <td>{{item.propN}}</td>\n    </tr>\n {{/ember-list}}\n</table>\nEdit: Is it possible for you to share the \"quick and dirty compatible version\" of Glimmer-ready ember-list?\n. @karanjthakkar Unfortunately, I'm not a member of the core team so I don't know when it will be released.\nBut looking at https://github.com/emberjs/list-view/network you'll see that version 2.0.0 can be found at https://github.com/krisselden/list-view/tree/2.0.0 - as pointed out by @troyhalden.\n. ",
    "sberan": ":+1: to a pre-release if available I'd love to beta-test.\n. ",
    "troyhalden": "@raytiley What's the current status of ember-list?  Could you please share a .zip version?\n. Had I had noticed before...\nThe new, Glimmer-ready ember-list is available at https://github.com/krisselden/list-view/tree/2.0.0\n. ",
    "karanjthakkar": "@ivan-granulin Is this going to be released today? Eagerly waiting for it.\n. ",
    "shaunc": "I checked out https://github.com/krisselden/list-view/tree/2.0.0 and tried to run tests -- unsuccessfully (see below). I'm not sure if this is due to unstability of canary build of ember of the new list-view, something in my local environment, or in a related package. (Any suggestions?)\nFailures (23 -- 47) were mostly like 23 -- \nnot ok 23 PhantomJS 1.9 - TestLoader Failures: dummy/tests/unit/content-test: could not be loaded\n    ---\n        actual: >\n            null\n        message: >\n            Died on test #1     at http://localhost:7357/assets/test-support.js:2887\n                at http://localhost:7357/assets/test-support.js:5652\n                at http://localhost:7357/assets/test-loader.js:31\n                at http://localhost:7357/assets/test-loader.js:21\n                at http://localhost:7357/assets/test-loader.js:40\n                at http://localhost:7357/assets/test-support.js:5659: Could not find module qunit-module imported from dummy/tests/helpers/module-for-view\n        Log: >\n    ...\n\nFailure 27 was a bit different:\n\nnot ok 27 PhantomJS 1.9 - TestLoader Failures: dummy/tests/unit/initializers/list-view-helper-test: could not be loaded\n    ---\n        actual: >\n            null\n        message: >\n            Died on test #1     at http://localhost:7357/assets/test-support.js:2887\n                at http://localhost:7357/assets/test-support.js:5652\n                at http://localhost:7357/assets/test-loader.js:31\n                at http://localhost:7357/assets/test-loader.js:21\n                at http://localhost:7357/assets/test-loader.js:40\n                at http://localhost:7357/assets/test-support.js:5659: Could not find module dummy/initializers/list-view-helper imported from dummy/tests/unit/initializers/list-view-helper-test\n        Log: >\n    ...\n\nNB during pull before tests:\nPlease note that,\n    ember-list-view depends on ember#beta which resolved to ember#cfd23c6f18\n    ember-cli-shims#0.0.3, ember-load-initializers#0.1.4 depends on ember#>=1.4 <2 which resolved to ember#1.13.5\n    ember-resolver#0.1.18 depends on ember#> 1.5.0-beta.3 which resolved to ember#1.13.5\nResort to using ember#beta which resolved to ember#cfd23c6f18\nCode incompatibilities may occur.\n. Sure - - Thanks. With so much flux in the ecosystem I thought it could be a package.json with wrong version of something. \n. @mbrakken -- I've been working off krisselden/raytiley branch, trying to get the tests working. Are you using the same block interface as they are, and have you worked on the tests yet? I'd be eager to merge if it makes sense, and even better to throw out my work if its superfluous :). I'm most eager to get ember-table working with glimmer, and it's supposed to be based on ember-list now. If you have a public repo please post a link!\nThanks!\n. @mbrakken -- great - thanks! It looks like we've made a few similar changes. :) I'm trying to slog my way through the tests (\"learning by doing\": seems that there are some undocumented changes in test infrastructure) though I must admit I'm slacking a bit on some. (Do we really need a test that the component properly bubbles actions, for instance? [controller-test.js] Presumably this had something to do with the details of the old implementation. For now in my branch I've dropped this test; we'll see if project owners will complain.)\nI'm not sure if I'll get all the way through, but I'll post something at the end of the day and include a link here regardless.\n. Thats great! I've manually merged in my changes and posted here. https://github.com/shaunc/ember-collection/tree/tests-2.0. Various changes (which may or may not be a good idea :)). In particular I'm now observing the array for changes to get \"content-test\" working. Is this how it should be done?\nRight now this is still very far from being a pull request. (e.g. jshint is a mess.) As there is activity now I thought I'd post what I have.\nI have \"content-test\" running -- comments/suggestions welcome. I threw out \"controller-test\" (comments also welcome :)), and am currently puzzling over \"list-view-test\".\nI'm doing my best to use standard testing tools only... avoiding moduleForView etc. Perhaps I should generate an acceptance test skeleton for \"list-view-test\"?\n. @mmun The first test I did was \"content-test\" which is integration. I was thinking about list-ivew-test next just to get the general structure down. I'd be happy to go on to other integration tests... but am trying to get rid of \"moduleForTest\" everywhere so thought I'd ask about the skeleton.\n(NB I'm trying to adapt old tests where reasonable rather than write new ones. Probably some new ones will be a good idea as well, but adapting old where possible will be a good diagnostic to users of the old component.)\n. Thanks!\nI am looking into \"multi-height-list-view\" test now. It seems the old implementation used \"heightForIndex\" function. Now it looks like \"layout-bin-packer\" just reads the \"height\" property off the content.\nBin.prototype.heightAtIndex = function (index) {\n  return this.content[index].height;\n};\nAre we comfortable with that? Or should there be an attribute that provides a function to get a height?\n. @mmun -- ok -- slashed & burned; submitted. :) It seems to me that to deal with the concerns of \"multi-height-list-view\" the layout should be the thing that can figure out item heights. In particular, its silly to adapt these tests for \"fixed-grid\". What is the \"mixed-grid\" layout supposed to do? It looks like it should put items of various sizes on \"shelves\", wrapping when necessary. Perhaps I should adapt the \"multi-height-list-view\" tests to be tests of \"mixed-grid\"?\n. NB: https://github.com/shaunc/ember-collection/tree/phantom-offset\nand https://github.com/stefanpenner/layout-bin-packer/issues/9\nThe branch has more tests including a failing one demonstrating bug in layout-bin-packer\n. @masona - As long as we assume that @mmun isn't a fiendish impostor (and if he is he's playing a long game, because he seems like a pretty nice guy), then I think you're right. I'm eager to get this finished because I want to use a glimmer-based ember-table in my project, so am pushing ahead. If you open an issue over there I'll be glad to post status to it (as far as it depends on me -- I'm not an official contributor).\n. ",
    "mbrakken": "Thanks for the work on the 2.0.0 branch @krisselden and @raytiley. I currently have a version in production with Ember 1.13.6, and it seems to be pretty happy. Certainly happier than not using ember-list. I hope to try it with Ember 2 soon, and I'm excited to see the eventual release.\nI haven't dug into this yet, but I just wanted to leave a note that the 2.0.0 branch currently doesn't work with ember 1.13.7 and 1.13.8 (initial content renders but doesn't update, and declaring widths on cells doesn't result in a grid), and with ember-cli 1.13.8 the layout import in addon/components/ember-list.js, import layout from './ember-list-template'; fails.\nI hope to find some time to look into those issues, but I'm not sure when.\n. @shaunc I am using the block interface, but I haven't touched tests in any way. Partially I wasn't sure how much thrash there'd still be on the branch, so I just went with getting things functional. Also, I need to get better at bothering to actually write tests for ember :(\nThe repo / branch I'm working off is here: https://github.com/mbrakken/list-view/tree/2.0.0. I only made a few rather small modifications so far.\n. ",
    "sivakumar-kailasam": "@taras  Klassy and other dependencies being included here aren't imported into target ember-cli projects, so apps fail to come up since they don't find them in bower_components. Shouldn't these be included into the target project through addBowerPackageToProject in a blueprint?\n. That worked raised #206 for this.\n. ",
    "Robdel12": "\"wember\" :P\n. "
}