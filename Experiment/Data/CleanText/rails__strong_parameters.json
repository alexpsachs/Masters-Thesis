{
    "tenderlove": "Wouldn't you use permit(:post, :title, :body) in that case?  Then normal validations will pick up the \"blank or not blank\"ness of the field.\nI think require is when you want something to be absolutely required, and when it isn't, return a 400.\n. Ah, I see.  I think in that case you could do something like this:\nruby\nparams.fetch(:post) { ActionController::Parameters.new }.permit(:title, :body)\nIt's a little more verbose, but follow the same semantics as Hash.\n. Yup.  I don't really get the point of require when we have fetch.  Maybe @dhh can comment with a use case?\n. ",
    "technoweenie": "I want to permit the title/body attributes in the post hash.  I want #require to initialize with an empty hash if it's not there.  Maybe there can be another method for that?\nruby\nparams.setup(:post).permit(:title, :body)\n. Sure, and you could replace #require too:\nparams.fetch(:post) { raise ActionController::ParameterMissing }\nThat's also verbose and follows the same semantics as Hash :)\n. ",
    "dhh": "require is to ensure that the broken requests are routed the wrong way. We get exceptions like that all the time. Someone uses the API wrong and submits a request with :message instead of :post and the controller throws an uncaught exception. #require gives this a natural flow that doesn't require any manual intervention. It's kinda like the old #validate method we used before REST, just only for the proper params.\n. Yeah, I always checkin Gemfile.locks. Want to make sure everyone is running exactly the same version.\n. Nice work!\nWe need to leave the attributes that are not permitted in place, though, just not marked as permitted. So if a sub-hash has not been filtered with permit, it should still be there, but Active Model will blow up if it's going to be used as part of mass assignment.\n.  Adman65, I don't think that sugar buys you enough over an explicit post_params method. And it makes it harder to account for things like if current_user.admin? then stuff.\n@drogus, actually, you're completely right. My bad. Permit should indeed be slicing the parameters and just return what you asked for. This is exactly right.\n. I don't think we need to do that. It would just lead to more exceptions that you're not going to do something about anyway. When you whitelist, the bonus is that you don't need to care about what's off the list.\n. I changed the implementation a bit, but great idea. Committed!\n. ahmejl, I'm not sure if this fits into this model. I think if you want to sanitize your input, you should just do that separately.\n. We just got another solution merged for the dup. Can you update and see if that fixes the problem? Otherwise I'm glad to see this become 3.0 compatible.\n. I'd be happy with 3.1 compatibility, then. Can we update this PR to get that done?\n. Please make this compatible with master and I'll apply.\n. This is definitely going into Rails core. We've abandoned doing the form signing idea, but what's in this plugin is going into core.\nCan someone explain again what the problem is with the nested attributes? Why isn't the nested permit we have right now good enough? (explanation in form of a failing test would be welcome!)\n. I'd rather we just default to permit :published_at will also just automatically allow :published_at(x) -- instead of all this extra configuration. If you want to take a stab at a pull request that does that, please open a new ticket. I posted the same message to pull request #21.\n. Please update to master and I'll merge.\n. I'd rather we just default to permit :published_at will also just automatically allow :published_at(x) -- instead of all this extra configuration. If you want to take a stab at a pull request that does that, please open a new ticket. I posted the same message to pull request #17.\n. Seems like strong_parameters should play nice. I never use nested params, so hopefully someone else from core can have a look when you come up with an implementation. I just want to make sure there are no side effects.\n. I don't see the purpose of this. Why would you ever want to run in strict! mode? Who cares if people are sending the wrong parameters if you're filtering them out? That's imo the whole point of strong parameters. Closing pending a strong rationale for existing.\n. I'm not sure I quite follow. Why don't you have tests for this? If you have a controller test that posts all the variables coming through and checks that they were saved, you should be good.\nIn any case, I don't think this is a general enough concern to warrant being part of core. Totally fine to just have this in your own app or publish a strict_strong_parameters gem or something like that.\nThanks for explaining the use case though!\nOn Oct 4, 2012, at 7:43 PM, Nikolai Vladimirov wrote:\n\nOk, first I absolutely think that \"strict\" mode makes no sense for any environment different from \"development\".\nHere is why I need this in a project:\nI'm working on a dating site where we use MongoDB. And we have this huge User model that stores all the information related to a user in embedded documents. Also have some large forms ( 40+ fields) for user preferences ( hair color, eye color, foods ,etc.) and because of a bad design decisions a few years ago some embedded document may have both \"public\" and \"system\" fields. And in \"system\" there may be some information about what the user bought.\nIn order to protect some huge ass form in a code base without any mass assignment protection we need to permit every single field, since permitting whole subsections can also leave some \"system\" fields unprotected. Our current workflow for doing this is just using \"strict\" mode in development environment and add fields to \"permit\" according to the exception message raised. If the update just passes without error we may miss some of the dozens fields. Double checking if a field is set in the DB is error prone when you have some bullshit form with a lot of fields and \"strict\" makes our lives easier and gives us more confidence that we didn't forget to permit some filed.\nAlso here is a cleaner version rebased to recent master, haven't submitted it because it's still being tested:\nnvloff/strong_parameters@474d99c\nI know that bad design should be just fixed, however we wanted to protect our application as fast as possible and this helped a great deal.\nAnd also ActiveModel::MassAssignmentSecurity has :strict option.\n\u2014\nReply to this email directly or view it on GitHub.\n. This should just be the default behavior of #permit!. Let's make it so.\n. Need this applied to rails/master itself too. Can you drum up a PR for that?\n. No kaboom. Just ignore illegal keys on a per-record basis (rather than all of them). \n\nOn Oct 16, 2012, at 13:16, Sven Schwyn notifications@github.com wrote:\n\n\nso does strong parameters usually remove extraneous params or blow up if there are extraneous params? \n\nSay you have a nested params hash with one post -> many comments. If one of the comments has an illegal key, all comments are stripped from the params hash and only the blog params remain.\n\u2014\nReply to this email directly or view it on GitHub.\n. That attribute is ignored if not listed in the permit call. No blow up needed. \n\nOn Oct 16, 2012, at 16:12, fringd notifications@github.com wrote:\n\n@svoop so what if the params hash has params[:post][:not_allowed_attribute]\nis the attribute removed, or is there an error, or is the whole [:post] killed?\n\u2014\nReply to this email directly or view it on GitHub.\n. This is expected behavior. Attributes that are not specifically permitted are ignored. The user should never be able to submit attributes that aren't permitted. That is up to the developer to prevent. \n\nOn Oct 25, 2012, at 10:10, Denis notifications@github.com wrote:\n\nAfter calling permit with permitted parameters set, exception is not raised even when someone tries to set forbidden attribute. So success message is displayed to user, but attribute actually is unchanged.\nIs it expected behaviour or something that should be fixed?\n\u2014\nReply to this email directly or view it on GitHub.\n. What's the use case for this? Why would you include the strong parameters gem if you do not intend to use it?\n. Gary, if your project can work either with or without Strong Parameters, you can just check whether the constant has been defined or not and let the user add the gem to his or her gemfile. I don't think you'd need a separate fork here.\n. That seems to be an application-specific concern that I don't think is a good fit for the general gem, to be honest.\n\nOn Oct 25, 2012, at 6:04 PM, Gary S. Weaver wrote:\n\n@dhh ActiveAdmin currently works under the premise that SP is not used, and because there is no way that I know of to easily reload the environment to use a different Gem right in the middle of testing (but maybe there is), this is the easiest way I know of to get the job done. It isn't just a matter of testing whether SP is loaded or not, it is a matter of having SP working only for certain tests.\n\u2014\nReply to this email directly or view it on GitHub.\n. I suggest that any project that wants to be able to operate both with and without strong parameters have the user add the gem to their gemfile and detect it by checking for the constant.\n\nAll this is a legacy concern anyway soon as Rails 4.0 will force strong parameters on everyone and you won't be able to turn it off.\n. Bug.\nOn Nov 5, 2012, at 10:40 AM, Benjamin Quorning wrote:\n\nI would expect that calling :slice on a permitted Parameters hash would return another permitted hash, just as :except does. But no:\n\nparams = ActionController::Parameters.new(:foo => 42, :bar => 1337).permit(:foo, :bar)\n => {\"foo\"=>42, \"bar\"=>1337}\nparams.except(:bar).permitted?\n => true\nparams.slice(:foo).permitted?\n => false\nIs this a feature, or is it a bug?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. No plans to have that as part of strong params. For your case, just convert to a regular hash and use #except or similar. \n. Done.\n. The default case is worsened and the side-effects are not compelling enough. To me it doesn't make sense to be able to apply this in any order. That's why require will pluck out variable for permit to continue working on.\n\nWhat is the use case you are trying to solve? Is it around deeply nested params?\n. Rob, can you post some examples of the code you're trying to use and how this helps it? All I can see now is that the default use case got significantly worse. So it would help to see where it's benefitting you. Although, I have a hard time seeing us adopting something like this that makes the default case that much worse. But maybe there is something else we can do.\nOn Jan 2, 2013, at 3:04 PM, Rob Nichols wrote:\n\nI started on this route because I wanted to be able to modify params in a before filter and not have to modify my existing code. With the current system, you have to modify current code to call a new private method.\nIf I use before_filters I might want to combine them for different actions, and I didn't want the filters to be order dependant.\nI believe my revision makes strong_parameters more flexible. You can use it to build up rules in a number of steps and to set rules anywhere within the params tree.\nThe security isn't dependant on calling a particular method, but instead modifies params itself strengthen it wherever it is used from that point forward.\n\u2014\nReply to this email directly or view it on GitHub.\n. @reggieb, the DSL is designed to be used like this:\n\n``` ruby\nclass NotificationsController < ApplicationController\n  before_filter :set_notification, :only => [:show, :edit, :update, :destroy]\ndef index\n    @notifications = Notification.all\n  end\ndef show\nend\ndef new\n    @notification = Notification.new\n  end\ndef edit\nend\ndef create\n    @notification = Notification.new(notification_params)\n    if @notification.save\n      redirect_to @notification\n    end\n  end\ndef update\n    if @notification.update_attributes(notification_params)\n      redirect_to @notification\n    end\n  end\ndef destroy\n    @notification.destroy\n    redirect_to notifications_url\n  end\nprivate\n    def set_notification\n      @notification = Notification.find(params[:id])\n    end\ndef notification_params\n  params.require(:notification).permit(:circumstances, :incident_at)\nend\n\nend\n```\nSame is true if you have a manager concern. Just change:\n``` ruby\n    def notification_params\n      permitted_notification_parameters = [ :circumstances, :incident_at ]\n      permitted_notification_parameters << :managers_comment if current_user.manager?\n  params.require(:notification).permit(permitted_notification_parameters)\nend\n\n```\nSo I'm not seeing the win with this added flexibility. I think it makes things more complex without actually making it bend any easier. Thanks for taking the time to explore the options though, but for now I don't think it's a good fit.\n. Good stuff. But let's stick the option on config.action_controller.raise_on_unexpected_params -- it's weird just floating off config itself.\n. That too. Need to keep parity between the two.\nOn Jan 4, 2013, at 4:07 PM, Rafael Mendon\u00e7a Fran\u00e7a notifications@github.com wrote:\n\nAlso, before adding things here is better to add it to rails itself.\n\u2014\nReply to this email directly or view it on GitHub.\n. This isn't working out well in practice for me. This case shows it well:\n\nruby\n    if person = authenticate(params.permit(:username, :password, :sig))\n      sign_in person, params.permit(:remember_me)\nFirst of all, I'll get a raise on action and controller parameters because they're present at the root. Second, I will get raises on the first permit call because :remember_me is present, and on the second one because the others are present.\nI don't see a way around this at the moment, so I think we're going to have to revert.\n. I found a good handful of cases in Basecamp where this assumption did not hold. And it's kinda like Clippy. He better be damn sure that you're \"writing a letter to a lawyer\" before he starts coming up with suggestions. Otherwise he's just in the way.\nThis is a nice feature, but it's not worth having to wrestle it and that's exactly what I felt like I had to do in Basecamp.\nWhat I could see instead is perhaps a logged warning instead of an exception. Hell, I could even see that you could be allowed to toggle between a log warning and an exception, but the default should be log warning.\nWant to give that a go?\nOn Jan 13, 2013, at 6:07 AM, thomasfedb notifications@github.com wrote:\n\nIn response to the example by @dhh, in such a situation I would write something like:\ndef create\n  if person = authenticate(auth_params.select(:username, :password, :sig))\n    sign_in person, auth_params.select(:remember_me)\nend\nprivate\ndef auth_params\n  params.permit(:username, :password, :remember_me)\nend\nAlternately the authenticate and sign_in methods could be written such that unexpected keys aren't a problem and in that case the .select statements could be dropped.\nAs I said before in the vast majority of cases in what I see as a typical rails application the params being handled relate directly to a resource and so I think the example above will be reasonably rare.\nPlease give me your thoughts @rafaelfranca, @jeremy and @dhh.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, would work nicely in production.\n\nBut I also want logging to be the default for test/development.\nOn Jan 14, 2013, at 7:41 PM, Sam Ruby notifications@github.com wrote:\n\nThe previous/current implementation had:\noptions.raise_on_unexpected_params ||= (Rails.env.test? || Rails.env.development?)\nLogging would be a useful addition to the production environment.\n\u2014\nReply to this email directly or view it on GitHub.\n. One config with options. Thanks!\n\nOn Jan 14, 2013, at 23:53, thomasfedb notifications@github.com wrote:\n\n@dhh Very happy to make the default a log entry. Should I make such changes against https://github.com/rails/rails first?\nWould you prefer two configuration toggles, one for raising an exception and one for logging, or one config options which takes a symbol of :log or :raise.\n\u2014\nReply to this email directly or view it on GitHub.\n. Egor, we have a proposal brewing for this that will ensure that by default permit(:age) will only return a string. You'll need to specify something other rules to get an array or a hash. @fxn is working on it.\n\nOn Jan 14, 2013, at 5:41 PM, Egor Homakov notifications@github.com wrote:\n\nRails Params Parsing is magic. You never know what it can lead to. Nested hash in params[:id], Array full of nils etc. \n1. Array stuffed with nils. \nUser.find_by_token(params[:token]) can find a user with empty token if we provide params[:token]=[nil] or [1,nil]. It was possible half a year ago, and then 'reinvented' with JSON/XML params parsers. \n2. Nested hashes - same problem would happen if we could get symbols in keys in {\"select\"=>\"code\"}. \n3. Did you know the trick with bruteforcing?: instead of passing ?token=abc you can pass ?token[]=abc2&token[]=abc2... Or for example username[]=testingfirst&username[]=testingsecond.. in find_by_username_and_password(params[:username], sha(params[:password))\nThus we need a reliable tool to get exact structure of params we asked for. Some people suggest to stringify it in ActiveRecord and find_by_ should accept only strings - i think it's just killing useful tool for no reason. \nMaybe strong_params should control all incoming params(before_filter), not only for mass assignment purposes? e.g.\nclass PeopleController < ActionController::Base\n  params.require(:person).permit(:name, :age)\ndef search\n    Person.find_by_age(params[:person][:age]) #if we pass ?person[age][]=1&person[age][]=2&person[age][]=3 it will be casted to \"[1,2,3]\"\nIf developer needs nested structures he will specify it explicitly in controller. Not so agile, but user input is the last thing that should be agile. will fix rails/rails#8831 and possible future vulnerabilities in params, once and for all.\nP.S I might be wrong thinking developer expects static structure - please point out if there are use cases with agile and random structure\n\u2014\nReply to this email directly or view it on GitHub.\n. Egor, well, we obviously need a way to allow you to specify arrays and hashes are OK before we force everything else into a string.\n\nOn Jan 14, 2013, at 6:05 PM, Egor Homakov notifications@github.com wrote:\n\nParticularly \"default permit(:age) will only return a string\" is easy to achieve, just add .to_sym at the end of https://github.com/rails/strong_parameters/blob/master/lib/action_controller/parameters.rb#L47 \nWhat i wonder about is built-in(pseudo code)\nbefore_filter :to_strong_params\ndef to_strong_params\n  \u00a3casting :id to string, person[name] and person[age] to strings\n  params = params.require(:person).permit(:name, :age)\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you elaborate on the need to serialize the params in the first place? Why is this needed?\n\nOn Jan 16, 2013, at 6:27, Mario Visic notifications@github.com wrote:\n\nIn an app i'm working on we sanitise some params inside of a controller and then serialise them for later use. When we deserialize the values the permitted? flag is lost.\nparams_hash = ActionController::Parameters.new(:foo => 'bar').permit(:foo)\nparams_hash.permitted? #=> true\nYAML.load(params_hash.to_yaml).permitted? #=> false\nWe could easily convert the paramaters to a regular hash, but nested hashes are a problem, it must be done recursively which is not ideal.\nWould it be good to override the serialisation of the parameters hash to record the permitted value? rather than serialising like a regular hash? Would there be any issues associated with that?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, I see. Yeah, I wouldn't recommend that as a general approach. By the time parameters cross over into the model, I don't think it's a good idea to retain ideas like permitted across the barrier.\n\nGlad you find a solution to your specific issue, though.\n. Looks good. Need docs though. \n. Yeah, it looks like we're also a little short on documentation of the class itself. But that's a somewhat orthogonal concern.\nOn Jan 20, 2013, at 10:29 AM, thomasfedb notifications@github.com wrote:\n\n@dhh Should docs be in the README.md or elsewhere?\n\u2014\nReply to this email directly or view it on GitHub.\n. Super. @rafaelfranca can you apply both?\n. Rafael, is all of @fxn's work in this repo as well?\n\nOn Jan 28, 2013, at 1:43 PM, Rafael Mendon\u00e7a Fran\u00e7a notifications@github.com wrote:\n\nI don't know. I can't push the gem. We have to wait @dhh\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet. I'll cut a new release.\n\nOn Jan 28, 2013, at 2:09 PM, Xavier Noria notifications@github.com wrote:\n\nYep, rails and this repo are in sync re permitted scalars.\n\u2014\nReply to this email directly or view it on GitHub.\n. Done. v0.2.0 is out.\n. This feels like far too much paperwork for me. I'd rather fix the find_by_token issue by having AR do a typecast. We already have a way of insuring that a certain parameter is a string or an integer .to_i/to_s.\n\nThanks for spiking it out, though.\n. Fine change, but please clean it up so it only changes the relevant part. No whitespace stuff. Also, needs rebase and corresponding commit against rails/master.\n. I'd be happy to see this. Needs a rebase.\n. Looks good to me. Added a few review notes. Also, needs a rebase.\n. Two more small issues, then good to go.\n. Can you submit a PR for rails/master as well with the same behavior?\n. This is way too unclear for me. I made a mistake merging. I'll revert. I don't think this confusing use case is something we need to support in the official gem. If you have this requirement, you can just implement it on your own in an app. It's not like strong params makes that any harder.\n. params.require(:modification).permit(opening_hours: { '0' => [] }) is the one that should work. It won't work with a variable number of keys, though. To allow your entire bit to work, it should be: params.require(:modification).permit(opening_hours: { '0' => [], '1' => [] })\nIf that's not working, it's a bug. Please do dig in!\n. Worth asking, though. Why is the value an array? Looks like there's no need for that?\n. Gotcha. The code I supplied is how it's supposed to be able to allow those parameters. If it's not working, there's a bug. Please do dig in and see if you can fix it and attach the PR to this ticket. Thanks!\nOn Mar 24, 2013, at 3:23 PM, Simon COURTOIS notifications@github.com wrote:\n\nYeah sorry, not a really good example, the value could also be:\n{\nmodification: {\nopening_hours: {\n\"0\" => [\"08:00 12:00\", \"14:00 19:00\"],\n\"1\" => [\"08:00 18:00\"]\n}\n}\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. @simonc, can you create a PR for rails/rails as well so we can get parity? Thanks!\n. Xavier, that looks reasonable to me.\n\nOn Apr 23, 2013, at 8:37 PM, Xavier Noria notifications@github.com wrote:\n\nThis solution seems suspicious to me at first sight.\nHashes whose keys are numeric in principle should be transparent. Point is you in general do not want to declare all possible indexes. Wouldn't\nparams.require(:modification).permit(opening_hours: [])\nbe the expected declaration? The same way today you declare\nparams.permit(:book => { :authors_attributes => [ :name ] })\nto match\nActionController::Parameters.new({\n:book => {\n:authors_attributes => {\n:'0' => { :name => 'William Shakespeare', :age_of_death => '52' },\n:'1' => { :name => 'Unattributed Assistant' },\n:'2' => { :name => %w(injected names)}\n}\n}\n})\n?\n\u2014\nReply to this email directly or view it on GitHub.\n. This is intended. Allowing an array of values need to be explicit for security reasons.\n\nWith 1.9, it looks much better, though, params.require(:mod).permit(collection_ids: [])\nOn Mar 18, 2013, at 11:16 AM, Alex Sharp notifications@github.com wrote:\n\nIn 0.1.6, the following code worked in whitelisting a key that represents a collection of values:\nparams.require(:mode).permit(:collection_ids)\nAs of 0.2.0, the above code no longer white-lists the collection_ids key, and the following code is necessary:\nparams.require(:mode).permit({:collection_ids => []})\nIs this intended functionality, or a regression?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks! You're getting a syntax error because what you're entering is not valid Ruby. In Ruby, you can only omit the hash brackets if the hash elements are the last in the method call. If you want the parent_ids to occur first, you have to do: params.require(:repo).permit({ parent_ids: [] }, :name).\n. Correct form for that is params.permit(my_model: :file).\n. I'm not sure I understand this? If you're looking through your logs, you'll see the start of a request, then this warning/error will pop up, then you'll see the completion of the request. What's the situation where this is not enough context for finding the problem?\n. If we had to include the full context for every single log line, that would make for some very long lines indeed. But if that's your use case, you can use the log tagger to achieve this.\n\nOn Apr 30, 2013, at 1:00 PM, Brendon Murphy notifications@github.com wrote:\n\n@dhh I'm not OP but I can envision one situation it could be useful: we use Papertrail for logging on our apps, and have the capability for setting alerts when patterns are matched for a given log line, and then include the line in the alert. So in that case the context of lines before would not come into play.\nThat said, the example is a bit of a stretch. In reality I'd probably have a generic enough pattern match, login to Papertrail, and then scan the context like you said.\n\u2014\nReply to this email directly or view it on GitHub.\n. Even in those cases, you should use the log tagger to achieve this. You can set the log tagger to tag every logged line with the controller/action.\n\nOn Apr 30, 2013, at 1:45 PM, Oren Dobzinski notifications@github.com wrote:\n\n@dhh Since request info is logged at \"info\" level they won't show up in production logs that are set to \"warn\". In such logs you are left with messages such as WARN: 04/30 18:30:10 #22496] Unpermitted parameters: title without any context.\n\u2014\nReply to this email directly or view it on GitHub.\n. We run all our production logs at debug, actually. Saved our bacon many times to be able to walk through the precise SQL statements called and so on.\n\nSo I'm -1 on this. We already have a general purpose solution in log tagging that allows for this functionality in every logging. Adding it just to strong params doesn't make sense to me given that.\nOn Apr 30, 2013, at 18:10, Peter Marreck notifications@github.com wrote:\n\nI think that expecting folks to look to the logs for the context makes more sense if parameter violations were simply Rails.logger.info'd (which I believe was the original behavior). Once you change the behavior to raising, though, I think the error should be fairly self-contained, informationally. And while you can probably determine it by looking at the stack trace attribute of the error object, if adding it to the main error message is not too computationally intensive and adds no additional coupling, I am leaning towards a +1\n\u2014\nReply to this email directly or view it on GitHub.\n. AR will update with no protection if you just use a regular hash. It's only AP::Parameter classes that are subjected to the check. \n\nOn May 17, 2013, at 23:08, Adriano Bacha notifications@github.com wrote:\n\nis it possible to lock down submit requests with ForbiddenAttributesProtection only if it came by a controller?\nI wish I could do a \"forced\" update inside my model without worrying about attributes protection\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes. Type is a reserved column name used for single-table inheritance. It's not available for general use. \n\nOn May 18, 2013, at 15:12, Adriano Bacha notifications@github.com wrote:\n\nthen, I don't get why I'm having this error:\n[1] pry > t\n  => {:status=>:received, :request_date=>\"2012-06-08\", :value_date=>\"2012-06-11\",\n    :settlement_date=>\"2012-06-12\", :value=>1500, :net_value=>1300, :type=>:rescue,\n    :amount=>5000, :account_id=>1, :fund_id=>1}\n[2] pry > Transaction.new(t)\nActiveModel::MassAssignmentSecurity::Error: Can't mass-assign protected attributes: type\n67  from /home/duke/.rvm/gems/ruby-1.9.3-p392@bigbang/gems/activemodel-3.2.13/lib/active_model/mass_assignment_security/sanitizer.rb:48:in `process_removed_attributes' \nmaybe problems with a field named \"type\"?\n\u2014\nReply to this email directly or view it on GitHub.\n. Logging was picked for a reason. There are multiple cases where you might well want to do two rounds of require/permit. If we're raising on either, then that doesn't work.\n. (If you don't have that in your app, you're of course free to change the setting in your config/environment/* files.)\n. I believe the one we had was where a token was passed in like params[:token] and the rest of the params where in params[:document] or something like that.\n\nOn May 31, 2013, at 3:08 PM, Caleb Thompson notifications@github.com wrote:\n\nThanks, @dhh. I haven't seen any use cases where two rounds made sense in my own applications. Can you provide a quick example of where that might be useful?\n\u2014\nReply to this email directly or view it on GitHub.\n. That's intentional and by design.\n\nOn Jun 12, 2013, at 21:07, sgrif notifications@github.com wrote:\n\nGiven the following:\ncreate_table :users do |t|\n  t.string :ethnicity, array: true\nend\nI can not pass parameters using params.require(:user).permit(:ethnicity). I instead need to do params.require(:user).permit(ethnicity: [])\n\u2014\nReply to this email directly or view it on GitHub.\n. Use require_multiple as method name\n. Extract these two lines into require_single(key) such that require itself is a Composed Method at the same level of abstraction.\n. use keys.many?\n. Use #blank?\n. Change this to:\n\nraise(ActionController::ParameterMissing.new(missing_keys.join(', '))) if missing_keys.compact.any?\n. Nix blank line.\n. ",
    "josevalim": "I actually don't agree with the blog post. I prefer to ensure that everyone is running against the same versions. :)\n. I am aware, still not a fan.\n. This behavior you mention happens just in development, as it doesn't make\nsense in production. You frequently have spurious params from google\nanalytics and you don't want to blow up because of it.\nThat said, I don't think we should have a different API, maybe simply a\nconfig flag.\n\nSent from my iPhone\n. ",
    "lest": "@josevalim It also allows to run tests with the latest allowed versions on CI.\n. ",
    "ahawkins": "This was my exact thought when I saw the announcement. It's nice to see that someone else thought of it as well.\nWhat about the idea of moving the permit logic outside of a method and into the class definition?\nPerhaps something like this:\nruby\nClass BlogController < ApplicationController\n  permit :title\n  permit :content\n  permit :comments do \n     premit :text\n  end\n. ",
    "drogus": "@dhh Won't that be different from the current implementation? Currently it's using slice, so it will actually get only those params that you specify, like:\n```\nActionController::Parameters.new(:book => {}, :magazine => {}).permit(:book)\n=> {\"book\"=>{}}\n```\n. 400 bad request is used when request's syntax is wrong, not when you get wrong params.\n. ",
    "plantbased": "Thanks for the tip @Flink, I was wondering why it wasn't working for me. So, I assume every model you want to protect has to include ActiveModel::ForbiddenAttributesProtection???\n. Great, thanks for info @Flink.\n. ",
    "Flink": "Yes that\u2019s right.\n. ",
    "fringd": "+1 +1 +!!_!!!!!111\n. totally jumping in out of the void, but i'd rather it completely explode if any parameters are illegal, forget dropping a single author, forget dropping all authors... just drop the whole thing, and throw Error::IllegalParameterOMFG\n. so does strong parameters usually remove extraneous params or blow up if there are extraneous params?\n. @svoop so what if the params hash has params[:post][:not_allowed_attribute]\nis the attribute removed, or is there an error, or is the whole [:post] killed?\n. ",
    "fd": ":+1:\n. ",
    "inopinatus": "There's an oops in the update method example in the readme, it needs curly braces rather than do..end for the tap block. Due to precedence the parser thinks the block is for redirect_to. Suggested:\nruby\nredirect_to current_account.people.find(params[:id]).tap { |person|\n  person.update_attributes!(person_params)\n}\nor (uglier IMO)\nruby\nredirect_to(current_account.people.find(params[:id]).tap do |person|\n  person.update_attributes!(person_params)\nend)\n. ",
    "carlosantoniodasilva": "@inopinatus fixed in 65666d3dc3f6ec22bbbaaf760e8f636334f49e62\n. Thanks.\n. It also needs another rebase, github says it cannot be merged anymore.\n. Thanks.\n. Sorry, I had to revert, since the readme is rdoc and not markdown.\n. Hey @joliss, sorry to not be able to get back to this before, and thanks to rework this. I'm not going to reopen nor do the work myself, since strong_parameters is going to be merged into Rails 4.0, as you can see in rails/rails#7251. Thanks again.\n. Just for the record, @fidothe and I have started a conversation about this and ways to extract multiparameter assignment from Active Record, but we haven't get to any code so far.\nThe main problem is that we need to know the attribute type so that we can instantiate the right object, ie a Date or Time object, and we use the column information from Active Record for that (or aggregation from composed_of).\nOne idea is to extract the parsing to something completely external to Active Record, happening before even touching the controller layer, and give a more useful definition to Active Record. I'm still unsure about how this can improve things for non Active Record objects, but lets see where our initial conversation will take us.\nIf anyone wants to help and give feedback, please feel free and let us know, thanks!\n. Which version are you using? I think you don't need _attributes, as you can see in the readme:  in this commit 93487f6c7e67b6735e3edf5c6ecd25424fff243f\n. Great to know it's working, we'll check about the gem update. Thanks.\n. Since slice is overridden, it is not taking into account the current permitted status.\n@bquorning would you like to try out a pull request to fix it? Thanks.\n. @bquorning awesome, thanks!\n. I think so, but please remove the Gemfile.lock modifications.\n. Thanks.\n. Thanks, #update was added to Rails master and will be available in 4.0, so I think it's fine to have it there. Perhaps you could add a comment in the line before the update call saying to use update_attributes in 3.x?\n. Fair enough :+1:\n. @thomasfedb rebase from current strong parameters master, but it says it can be applied now.\n. Please make sure you add some tests for it, thanks.\n. Thanks.\n. Are you bundling from current master? I think it may be properly fixed by 44cf253ca198a6a102c6bfd73a2e60f0f1a24b77, can you give it a try please?\n. Can't say for sure, but I think it's not going to take longer. It has a few things to be reviewed related to latest changes regarding permitting scalar values, issues like #89. I'm giving this a close for now, thanks for reporting.\n. @jaredbeck the readme should reflect the current master (which is confirmed to work right?). Or are you talking about the readme from the current stable release?\n. How are you declaring your permitted attributes now? You need to specifically say that you permit only arrays for that specific attribute, like so:\nruby\nparams.require(:a).permit(:id, b_ids: [])\n. Sure. This has been added recently and there's a section about Permitted Scalars in the readme, that has a simple example. But if you can think of ways to improve the Readme, that'd more than welcome. Thanks!\n. :heart:\n. The only issue is related to receiving external input and mass assigning to a model instance, which is likely to exist only in controller scenarios. Do you have any other use case where user input is expected? If that's a case, you should be able to manually instantiate the Parameters object and use permit and brothers as in the controllers.\n. Thanks for the examples. I think that for such scenarios, the best choice would be to either go with creating the parameters hash and permitting as necessary, or at least slicing the received args to only the ones you really want to pass along to the model, to avoid unwanted attributes. That's how I can think of contextual/case-by-case filtering, and indeed we'll have to get used to it :).\n. Thanks!\n. :smile: :trollface: \n. Thanks.\n. Please move this discussion to the Rails Core mailing list, where we discuss new features and changes on Rails, we reserve the issues tracker for issues only. Thanks.\n. Hm.... are you planning to bubble these up to the user? I'm not sure that's a good idea....\n. Can you use only \" please? Thanks.\n. I think the paste was mistaken, it's \"only call if self.class.action_on_unpermitted_parameters is set\". See rails/rails@16e0c8816c4c8a9fb5292278bf5753b026c1105c\n. is available in ..., and add a final .\n. There's no need to change the lock file, please revert this.\n. Missing space before }.\n. I think you should also assert that the key is there, right?\n. ",
    "frodsan": "@carlosantoniodasilva This is already in the README. This issue can be closed.\n. done. I will wait to Travis though :)\n. Thanks.\n. :green_heart: \n. /cc @fxn This issue can be closed.\n. ",
    "iGEL": "Never mind, see #10\n. Same problem here, while Flinks version works fine. #stringify_keys aka #dup gets called here: \nhttps://github.com/rails/rails/blob/v3.2.3.rc1/activerecord/lib/active_record/attribute_assignment.rb#L69\n+1\n. Sorry for the white space changes, Rubymine did this.\n. ",
    "joslynesser": "I tested with the recently merged dup solution (https://github.com/rails/strong_parameters/pull/12), but the test was still failing in rails 3-0 stable due to 3.0's HashWithIndifferentAccess#dup not using self.class.new: https://github.com/rails/rails/blob/3-0-stable/activesupport/lib/active_support/hash_with_indifferent_access.rb#L99-101\nI went ahead and merged the recent dup solution with the 3.0 fix and updated the commit. Tests are now fully passing in 3.0 and 3.2. Let me know if that works!\n. ",
    "brentvatne": "A new test failure has also arisen from the use of module_namespacing (introduced in Rails 3.1) in the controller scaffold template:\n```\nFinished tests in 0.263376s, 98.7182 tests/s, 212.6238 assertions/s.\n1) Error:\ntest_controller_content(StrongParametersControllerGeneratorTest):\nNoMethodError: undefined method module_namespacing' for #<Rails::Generators::StrongParametersControllerGenerator:0x007fcbb4dde190>\n    (erb):1:intemplate'\n26 tests, 56 assertions, 0 failures, 1 errors, 0 skips\n```\nThe current fixes in this pull request would make strong_parameters compatible with Rails 3.1, but fixing this failure for 3.0 would be hacky.\n. ",
    "orend": "This PR doesn't work with the current code base - rails 3.0 or 3.1. I've opened a new pull request for adding rails 3.1 compatibility here: https://github.com/rails/strong_parameters/pull/46. \n. re: stubbing. I cloned rails and ran bundle install. I got mocha 0.12.7 and minitest 4.1.0, both the latest versions. Are you sure they don't work together? The problem is that stub is not included in the version of minitest that ships with ruby, and it doesn't seem to work for module methods in version 4.1.0. I can also manually stub the method but it's too ugly, or use a different mocking library, just let me know.\n. Unfortunately this doesn't work. Rails.application needs to be stubbed for this particular test only - when I do it in the test helper or the test file other tests fail. This means I'll need to dynamically define it in the test and then undef it. So it looks like we really need a stub here, so it might be better just to add a library.\n. @rafaelfranca now please take a look at my other PR :)\n. @rafaelfranca I have a better idea. See https://github.com/rails/strong_parameters/pull/131\n. @rafaelfranca I fixed the travis CI failures with this PR, please take a look.\nThanks!\n. @rafaelfranca here's another one...\n. @rafaelfranca done. Though I do think that the gem version badge is nice to have...\n. Sure thing! done.\n. thanks for the feedback, @bemurphy.\nFor now I just wanted to note that the ability to use StrongParameters outside of a request is not lost. There's in fact a test that verifies that.\n. @dhh Since request info is logged at \"info\" level they won't show up in production logs that are set to \"warn\". In such logs you are left with messages such as WARN: 04/30 18:30:10 #22496] Unpermitted parameters: title without any context.\n. True, though I think it'd be much nicer if rails showed the controller and action info out of the box without needing to configure anything. It adds a few words only to the relevant debug statement, and it makes sense even if the log level is set to info without adding much code complexity. But it's obviously your call...\n. btw, most production logs are set to warn or error AFAIK\n. sorry, hit the wrong button. my argument is that the additional logging is useful for most people that actually need to read/parse this log message.\n. ",
    "rafaelfranca": "Closing this in favor of #46\n. Thank you\n. :+1:\n. Merged. Thanks\n. Agree with @dhh \n. Yes. Thanks\n. have you execute your unicorn using bundle exec?\n. The main diference is that we moved the responsibility from doing parameters filtering from Active Record model. This make easier to do filtering depending of the action, user input or your business logic.\nThis projects was already merged in the core and we are upgrading the guides to explain better how it works.\n. It will be fixed by #39\n. Make sense. Thanks\n. @svoop could you remove 450b0fb from this pull request?\n. @ollym do we have? We need tests to ensure that it will not break in the future.\n. We also have a.\n``` ruby\nUse i for Fixnum, f for Float, s for String, and a for Array.\n``\n. And the typecast information is optional, so our regexp should be/\\A#{Regexp.escape(filter)}(\\d+[aisf]?)\\z/. @ollym actually I'm checking what are the valid attributes types because I think we are [only supportingiandf`(https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_assignment.rb#L98-100).\nYou can add tests if you want but I'll an answers from the core team before merge this one\n. Yes, s seems to be supported, but I'm not sure about the array. I think is like you pointed.\nIs fine to add s for now I think\n. Why not (1), (2i) and (3i)?\n. Closed by 06854a5\n. You should not add this gem as dependency of a rails 4 application since it is already in the rails code. I'll leave this open to remember to change the gemspec to not allow this gem to be installed in a rails 4 application \n. Fine than. I'll merge this.\nThank you so much\n. There is no way to do that currently, but feel free to send a pull request.\nI'm closing this since we don't get feature requests in the issues tracker. If you want to get someone to work on it or feedback about the feature send an email in the Rails Core Mailing list.\nThanks.\n. Please tries the master branch.\n. About the gem version I think @dhh forgot to push the tag\n. The code included in the v0.1.4 is not the same that the master branch.\n. This is the last commit in the v0.1.5 8ade825a7280f48fe34d1f3684698dfc58581abd, the tag should be there. I'll create a tag later.\n. Tag pushed.\n. And the issue is fixed on master\n. Yes, it is still required.\n. > Why doesn't scaffold put it in?\nthe strong_parameters' generator only deals with controller, but I'd accept pull requests to deal with the model too.\n\nWhy does it work without it?\n\nIt should not work. Have you tried pass the parameters without filtering directly to the model and see if the exception is raised?\n\nWill Rails 4 require it?\n\nNo Rails 4 will use it by default.\n. Good post. Thanks for sharing.\n. @denispeplin I don't think SimpleForm should deal with this, but please send a suggestion in the SimpleForm mailing list and we can discuss.\nThnaks\n. > Some of the parameters_taint tests were broken.\nThey are not broken in our ci, so we don't need to change it.\nAlso the keep_if tests are passing with Rails 3.2.x because journey defines this core extension \n. Now I got, they are not asserting the right value since the key are strings and we was using symbols.\n. @bquorning no. It is a good idea. Please do it.\n. Thank you.\n. @bquorning could you open a pull request in the rails project too?\n. We are already doing this. See https://travis-ci.org/rails/strong_parameters/builds/3081261\n. Please remove the appraisal and create a new Gemfile inside the test/gemfiles folder.\n. @frodsan send to Rails first.\n. Could you update the tests here too?\n. :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n. cc @dhh \n. Also, before adding things here is better to add it to rails itself.\n. We renamed the option to raise_on_unpermitted_parameters\nSee https://github.com/rails/rails/commit/1401f96492d7fc7ea0688c1d4b7f0232d2f34eb6\n. :shipit: \n. This gem doesn't work with Rails 4. \n. It is already inside rails, So you don't need it\n. Before to merge you need to adapt your implementation to be like this https://github.com/rails/rails/commit/57126ee5e392a4dc2eed22963d25020a48a93413\n. Seems good. @dhh anything else?\n. :+1:\n. @thomasfedb I added a comment. Also it needs a rebase\n. Thank you\n. I don't know. I can't push the gem. We have to wait @dhh \n. I think so, but I'll review the issues and report later\n. Could you explain you issue better?\n. cc @fxn \n. > Do I always need to specify the array last?\nNo.\n\nThis gives syntax error:\nparams.require(:foo).permit(:id, bar: [], :foo)\n\nYes, because you need to wrap the hash between { },\nruby\nparams.require(:foo).permit(:id, { bar: [] }, :foo)\n. :-1:\n. Untracking Gemfile.lock makes more complicated for people to collaborate to the project. With Gemfile.lock, someone can checkout the project and run it against the same versions as I do, ensuring all tests pass.\n. We don't agree with Yehuda on this subject ;)\nThe Gemfile.lock is to ensure that all contributors will run the same version of the dependencies.\n. This is why we have Gemfiles to each rails version running on travis.\n. Of course no. Even without the lock file the build is still faling, so the culprit is not the lock file\n. First, we need to fix this issue on rails/rails, after this we can merge it on the gem.\n. Use the .md extension, also you need to update the Rakefile\n. This pull request cannot be automatically merged yet\n. have you tried .permit(photos_attributes: {})?\n. I think we will need to exclude Rails 3.0 and 3.1 when using 2.0.0 in the build matrix\n. Thank you\n. @orend please send this pull request to the rails/rails project first\n. Thank you\n. Could you add only the travis ci badge? I don't think others are relevant.\n. ahh, missed this one. True it is a good one. Could you add it?\nSorry\n. Thanks\n. This problem only occurs when the value of the key is an Array, so yes, the README should be update to say that require only works when the value of the key is a hash.\n. No, it only work if the value is a hash.\nThis should work:\nirb\nirb(main):002:0> raw_parameters = { :teams => { :number => \"37\" } }\nirb(main):003:0> parameters = ActionController::Parameters.new(raw_parameters)\nirb(main):004:0> parameters.require(:teams).permit!\n. Already fixed by #165\n. Any changes for this code should be submitted first to rails/rails.\n. Could you open a PR in the rails repository? It is the main entry for new feature on this plugin\n. Yes. We can merge this PR on this repo too\n. Yes. This gem don't make sense in Rails 4 anymore. And since we don't support Rails 3.2 we are not releasing this gem.\n. \"continuing development\" is being made in Rails 4, this plugin have to mimic Rails 4 behavior to make easier to people upgrade to Rails 4. We can still maintain this project, but I'd not expect regular version bumps.\nI'll release a new version with the code on master soon.\n. This was already suggested and rejected. See https://github.com/rails/strong_parameters/pull/75\n. There are still some places that need to be fixed. Could you take a look?\n. Please report the issue in the rails/rails repository.\n. What is the difference between this and permit!?\n. I mean, we already have permit! to permit all the values in a scope. Is there any difference?\n. ``` irb\n\n\npermited = params.permit(owner: [:name, :age])\n=> {\"owner\"=>{\"name\"=>\"Owner name\", \"age\"=>31}}\npermited[:owner][:child] = params[:owner][:child].permit!\n=> {\"name\"=>\"name\", \"whatever\"=>\"whatever\"}\npermited\n=> {\"owner\"=>{\"name\"=>\"Owner name\", \"age\"=>31, \"child\"=>{\"name\"=>\"name\", \"whatever\"=>\"whatever\"}}}\n``\n. I'm almost sure it is possible to do withpermit!` but I'm not going to try.\n\n\nThis repository is only to Rails < 4 support, so if you want this you should submit your pull request to rails/rails.\n. Thank you for the pull request. Could you send it to rails/rails? This\nproject is only for rails 3 compatibility.\nSent using mobile Gmail\nOn Mar 19, 2014 7:19 AM, \"Antonio Parisi\" notifications@github.com wrote:\n\nRequired parameters\n- Add possibility to use in a require an array of parameters\nUsage\nIf you want to make sure only certain parameters have to be required you\ncan do:\nparams.require([:foo, :bar])\nConclusion\nHope this could help someone as me,\nthank you\nYou can merge this Pull Request by running\ngit pull https://github.com/antonioparisi/strong_parameters feature/require-parameters-as-array\nOr view, comment on, or merge it at:\nhttps://github.com/rails/strong_parameters/pull/194\nCommit Summary\n- require improvements\nFile Changes\n- M README.mdhttps://github.com/rails/strong_parameters/pull/194/files#diff-0(6)\n- M lib/action_controller/parameters.rbhttps://github.com/rails/strong_parameters/pull/194/files#diff-1(11)\n- M test/action_controller_required_params_test.rbhttps://github.com/rails/strong_parameters/pull/194/files#diff-2(14)\nPatch Links:\n- https://github.com/rails/strong_parameters/pull/194.patch\n- https://github.com/rails/strong_parameters/pull/194.diff\n\nReply to this email directly or view it on GitHubhttps://github.com/rails/strong_parameters/pull/194\n.\n. Please send feature requests to Rails core mailing list. Also this project is only to Rails 3 compatibility so strong parameters are not developed here but in rails/rails.\n\nThanks\n. No it doesn't have. Use the github compare view for this.\n. If you want I'd love to merge. I could do it but this gem is for Rails 3.x support only and we don't support Rails 3 anymore, so I don't want to work on it neither keep the issue open for this reason.\n. ActionController::Parameters is going to not inherit from Hash in future versions. When this happen reverse_merge will be not even defined on it (and neither it should be)\nThank you for reporting\n. The implementation is not under this gem. It is only at the Rails repository and there are tests there.\n. It seems to be related to can can callback\nOn Wed, Jan 7, 2015, 09:50 vijikumar notifications@github.com wrote:\n\nI entered the details(name and description) in the form. after clicking\nthe submit button it's directly throwing ActiveModel::ForbiddenAttributes\nerror. Please find the attached error message.\n[image: forbidden_error]\nhttps://cloud.githubusercontent.com/assets/6594913/5645779/d6ba3a28-9699-11e4-8893-f35bc2c3c13e.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rails/strong_parameters/issues/213#issuecomment-69017436\n.\n. I believe you opened the PR against the wrong repository.\n. @gogonathan are you sure you are submitting to the right repository?\n. You are receiving documents and permitting documents_attributes. You should permit documents\n. Because you need to pass documents_attributes to the model creating. So you should:\n1. Permit documents and pass it to the model as documents_attributes\n2. Receive documents_attributes, permit it and pass to the model.\n. Yes. This is the rails convention. If you don't want to use it you would have to permit the keys by yourself.\n. Yes. I think you are correct. Feel free to write tests for it.\n. I see that you are using Rails 4.1. You don't need to install strong_parameters since it is already included.\n. Could you try the 5-0-stable branch?\nOn qui, 18 de ago de 2016 at 14:15 Kristian Gerardsson \nnotifications@github.com wrote:\n(I hope this is the right repo for this issue)\nCan't seem to read a serialized column after upgrading to Rails 5.0 stable.\nI haven't used a specific serialization class, I assume YAML is the\ndefault? (Thought, before the upgrade, the values were saved as\n!ruby/hash:ActionController::Parameters)\nclass PaymentNotification < ActiveRecord::Base\n  serialize :raw_IPN\n  ...\nend\nValue in the serialized database column:\n--- !ruby/hash:ActionController::Parameters\naddress_status: confirmed\nsubscr_date: 12:42:39 Dec 20, 2015 PST\npayer_id: 123\naddress_street: 1 Main St\nmc_amount1: '6.00'\nmc_amount3: '12.00'\ncharset: windows-1252\naddress_zip: '123'\nfirst_name: Test\nreattempt: '1'\naddress_country_code: US\naddress_name: Test Buyer\nnotify_version: '3.8'\nsubscr_id: I-123123123\ncustom: '2'\npayer_status: verified\nbusiness: payments-facilitator@test.com\naddress_country: United States\naddress_city: San Jose\nverify_sign: 123-12312312321312.2JohI99Xp56cvu9zc\npayer_email: payments-buyer@test.com\nbtn_id: '123'\nlast_name: Buyer\naddress_state: CA\nreceiver_email: test@email.com\nrecurring: '1'\ntxn_type: subscr_signup\nitem_name: asd\nmc_currency: EUR\nitem_number: asd\nresidence_country: US\ntest_ipn: '1'\nperiod1: 12 M\nperiod3: 12 M\nipn_track_id: 111\ncontroller: payment_notifications\naction: create\nGetting this error when it tries to deserialize it (Just by doing\nPaymentNotification.first for example)\nNoMethodError - undefined method []=' for nil:NilClass:\n  actionpack (5.0.0) lib/action_controller/metal/strong_parameters.rb:414:in[]='\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:362:in block in revive_hash'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:336:inrevive_hash'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:281:in visit_Psych_Nodes_Mapping'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/visitor.rb:16:invisit'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/visitor.rb:6:in accept'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:32:inaccept'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:311:in visit_Psych_Nodes_Document'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/visitor.rb:16:invisit'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/visitor.rb:6:in accept'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/visitors/to_ruby.rb:32:inaccept'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych/nodes/node.rb:38:in to_ruby'\n  /home/frexuz/.rbenv/versions/2.3.1/lib/ruby/2.3.0/psych.rb:253:inload'\n  activerecord (5.0.0) lib/active_record/coders/yaml_column.rb:24:in load'\n  activerecord (5.0.0) lib/active_record/type/serialized.rb:18:indeserialize'\n  activerecord (5.0.0) lib/active_record/attribute.rb:140:in type_cast'\n  activerecord (5.0.0) lib/active_record/attribute.rb:38:invalue'\n  activerecord (5.0.0) lib/active_record/attribute_set.rb:42:in fetch_value'\n  activerecord (5.0.0) lib/active_record/attribute_methods/read.rb:66:in_read_attribute'\n  activerecord (5.0.0) lib/active_record/attribute_methods/read.rb:36:in __temp__271677f59405e4'\n  app/admin/payment_notifications.rb:17:inblock (3 levels) in '\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/rails/strong_parameters/issues/241, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAC66PTO6cmF0mTm2vAXBewuE1NeQ84tks5qhJMwgaJpZM4JntwL\n.\n. This issue was moved to rails/rails#26215\n. Could you add a test case?\n.  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only..  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only..  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only..  Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.. Thank you for the pull request but this kind of validation is better suited to Active Model validations.. I think we should be more restrictive here.\n\nruby\n/\\A#{filter}\\(\\di\\)\\z/\n. We should escape filter too\nruby\n/\\A#{Regexp.escape(filter)}\\(\\di\\)\\z/\n. \"~> 3.1\" should work\n. This is not a good idea. mocha doesn't work with the last version of minitest\n. If we are adding a mock library only for this case I think is better do\nruby\ndef Rails.application\n  nil\nend\n. This options should be set before action_controller.set_configs and deleted from app.config.action_controller or Rails will raise an exception.\nSee https://github.com/rails/protected_attributes/blob/master/lib/protected_attributes/railtie.rb#L10 to an example\n. Just\nruby\nActionController::Parameters.raise_on_unexpected = app.config.action_controller.delete(:raise_on_unexpected_params) { Rails.env.test? || Rails.env.development? }\nwill work fine\n. Only call this method if https://travis-ci.org/rails/activerecord-session_store is present\n. LOL clipboard \n. You don't need to pass the exception.\n. ",
    "pimpin": "It's usefull for me.\n. ",
    "steveklabnik": "@iGEL it's been three months since we've heard from you. If you're interested in getting this in, please rebase and I'll re-open. Thanks.\n. This came out of a discussion @jrgifford and I had. I don't think using #tap here is a good idea; the feature is already new, and it leads to assuming you need #tap/#update_attributes in general, since it's the only code example:\nruby\n  def create\n    @article = Article.find(params[:article_id])\n    @comment = @article.comments.create.tap {|comment|\n      comment.update_attributes!(comment_params)}\n    redirect_to article_path(@article)\n  end\nSo I'm obviously :+1:, but I figured I'd let someone else double-check and then merge.\n. Your wish is my command. :confetti_ball: \nThank you for your contribution, @jrgifford \n. @chikamichi any chance of updating this in the way @fxn asked?\n. I think it's fine for now. We already have a few simple examples up top, having a more complex one is good. Thank you! :heart:\n. ",
    "m4tm4t": "I'm running into issues with mongoid\nSaying:\nruby\n  def actu_params\n    allowed_attributes = [:title, :subtitle, :body, :pages_attributes, :image_id]\n    allowed_attributes += [\"publish_at(3i)\", \"publish_at(2i)\", \"publish_at(1i)\", \"publish_at(4i)\", \"publish_at(5i)\"]\n    allowed_attributes += [:user_id, :draft, :slidable] if current_user.has_role?(:superadmin)\n    params.require(:actu).permit(*allowed_attributes)\n  end\nreturn WARNING: Can't mass-assign protected attributes: id (that happen only with publish_at fields\n\nIf I put attributes in symbols (Like my working ActiveRecord version)\nruby\nallowed_attributes += [:\"publish_at(3i)\", :\"publish_at(2i)\", :\"publish_at(1i)\", :\"publish_at(4i)\", :\"publish_at(5i)\"]\nNow I'm getting an exception:\nSyntaxError in Admin::ActusController#update\nFull trace: http://pastehtml.com/view/c5bqljgnz.html\n``` ruby\ndef update\n    if @actu.update_attributes(actu_params)\n      redirect_to edit_admin_actu_path(@actu), notice: \"updated\"\n    else\n      render :edit\n    end\n  end\n```\nThe same thing is working great with AR\nEDIT: not a strong_parameters issue. http://mongoid.org/en/mongoid/docs/rails.html#multi_param\nsorry !\n. @hackeron yes, here my params for a full datetime (publish_at)\nruby\n  def article_params\n    allowed_attributes = [:title, :subtitle, :body, :pages_attributes, :image_id, :game_id, :console_ids]\n    allowed_attributes += [:\"publish_at(3i)\", :\"publish_at(2i)\", :\"publish_at(1i)\", :\"publish_at(4i)\", :\"publish_at(5i)\"]\n    allowed_attributes += [:user_id, :draft, :slidable] if current_user.has_role?(:superadmin)\n    params.require(:actu).permit(*allowed_attributes)\n  end\n. Seems fixed by only defining :publish_at on 0.2.0\n. ",
    "xanview": "So after adding include Mongoid::MultiParameterAttributes, all works fine for you with Mongoid?\n. This worked, thank you :) -\nruby\nMongoid::Document.send(:include, ActiveModel::ForbiddenAttributesProtection)\n. Ah, it seems this changed and from the README it says: \"arrays, hashes, or any other objects cannot be injected.\"\nSo now in order to permit an array value in your param you have to do:\nruby\nparams.permit(:name, :layout, {zone_ids: []}, :default, :position)\nJust took me by surprise :) - closing.\n. ",
    "dpmccabe": "This is also a problem with ActiveRecord. You mus also specify attributes like :\"exam_time(1i)\", :\"exam_time(2i)\", :\"exam_time(3i)\", :\"exam_time(4i)\", :\"exam_time(5i)\" in addition to :exam_time.\n. ",
    "rthbound": "@nakajima, can you confirm the problem has been fixed (@foohey suggests it has been) and close the issue if so?\n. @KevinSjoberg ... The keys, :name, :unit, and :value are nested under :entries.  Perhaps an adjustment to your syntax would solve the problem?  The code I've included below looks more similar to the README's information on using Nested Parameters\nparams.require(:entries).permit(entries: [:name, :unit, :value])\nLet me know if this helps :)\n. ",
    "awakia": "hi, any updates for this issue?\n. ",
    "ghost": "Also trying to figure this out...\n. ",
    "bloudermilk": "Just hit the same wall...\n/cc @dhh\n. Just found this on the Rails blog:\n\nMore work to be done\nWe're still working on a tidy way to deal with nested parameters, but there's a design ready for implementation, so it shouldn't be far off. \n\nIf someone wants to share the mentioned design I'd be happy to implement it.\n. I ended up writing a simple before_filter that circumvents this issue for all params in a Rails app. It's working great in our app.\n. @erichmenge Unfortunately I don't have the time to commit to that at the moment (no pun intended). This is just something I whipped up for the project I'm currently on. Also it seems like the @rails team has abandoned this gem since @dhh published it some months ago.\n. Excellent. I'll submit a new pull request this afternoon\n. @dhh would be happy to!\n. ",
    "erichmenge": "@bloudermilk Looks pretty good, have you considered doing a pull request?\n. @bloudermilk One of the Rails team started to integrate this into Rails 4 and was told to wait by a Core team member because they haven't figured out exactly how they're going to do it yet.\nI don't think they'll end up using a gem, but will pull over this code into Rails master when/if the time comes.\nI am a bit concerned they've thought of a new approach and have decided against this method, being I'm using this approach on my latest project.\nIt would be nice to get an update on if the strong_parameters approach is still in the plan or what.\n. @spastorino Would a PR request that implements something like this be welcome?\n. @dhh Sure, I'll try to get something worked up shortly.\n. This issue can be closed now. /cc @rafaelfranca \n. Relates to #16\n. Adding one possible solution as well.\n. @dhh I put your name in the pull request, but I'm not sure if it pings you if you include someone's name in the actual PR description. I wanted to make sure you saw this. My apologies if you just haven't gotten to it.\n. @guilleiguaran I see you are integrating strong_parameters into rails. Maybe you want to take a look at this? Right now strong_parameters does not work with fields_for on collections of nested records.\n. @guilleiguaran @dhh said in #24 that he doesn't use nested_attributes_for so I think he wants someone else from core to take a look at it. I'm not sure who that should be. I guess someone with the most familiarity with the way nested attributes work in Active Model.\n. Thank you @rafaelfranca :heart:\n. ",
    "spastorino": "/cc @dhh \n. ",
    "sh286": "I tested it here and everything works as expected. I think it was already fixed.\nruby\nnew_params = ::ActionController::Parameters.new.permit\nnew_params.permitted? # returns true\nnew_params.is_a?(Hash) # returns true\ncontroller.params = new_params\ncontroller.params.permitted? # returns *true*\n. Include it in Mongoid::Document might work.\n. Hey @ejstembler, could you show your strong_parameters configuration code of your controller?\n. ",
    "tilsammans": "Would be good if this got pulled in, I am going to need this gem on a 1.8.7 app pretty soon.\n. ",
    "fvaleur": "Yes, this would be great.\n. ",
    "chikamichi": "Any updates on this issue? The proposed behaviour is really convenient.\n. @steveklabnik done, but I think the example is somewhat bloated now :) My initial goal was to mention the syntax to be used to allow for an array of arbitrary scalar values (using the {:foo => []} trick, but nested, which was/is not so obvious).\nMaybe this could be split, or worded differently?\n. You're welcome!\n. Hi,\nThis PR never got any feedback. Would such a change make sense to the maintainers? It could provide more consistency IMO.\n. ",
    "kiela": "@bjhess could you finish this PR?\nIt would be nice to have this merged in master\n. ",
    "bjhess": "Sorry, folks, I didn't even realize there was any discussion on this PR until @kiela commented. I've put together a new PR at https://github.com/rails/strong_parameters/pull/151. Closing this one.\n. (Oh, and thanks for the feedback @carlosantoniodasilva. I made use of it in the updated PR.)\n. @dhh My 2\u00a2.\nWhile I can be convinced that the DateHelper problem specifically could be solved in a more convention-based way, I still think there is tons of value in supporting regex. I'll try to convince you. :)\nWe have project edit pages that provide a one stop shop for managing budgets, rates and project manager status on all the users assigned to the project. Every single one of these input fields is going to come through the params hash. As a point of reference, here is how you'd look each one up:\n``` ruby\nparams[:user-assignment-1234][:budget]\nparams[:user-assignment-1234][:hourly_rate]\nparams[:user-assignment-1234][:is_project_manager]\nparams[:user-assignment-4567][:budget]\nparams[:user-assignment-4567][:hourly_rate]\nparams[:user-assignment-4567][:is_project_manager]\netc\n```\nBeing able to do a strong params declaration like the following turns out to greatly reduce the amount of configuration, as it were, that we are doing in our controllers:\nruby\nparams.permit(/^user-assignment-\\d+$/ => [:budget, :hourly_rate, :is_project_manager])\nThis is why we chose the regex route, rather than trying to code up each possible use case (DateHelper, DOM ids, etc). It is extremely flexible.\n. ",
    "DouweM": ":+1:\n. ",
    "tjschuck": "Added 929332d0f2a6528c1300209e624930ad1ec3e438 to revert to 1.8 hash syntax after the merging of pull request #19\n. Though this does solve the ActionView DateHelper problem, we use the regex syntax for conveniences beyond just that.\n. ",
    "guilleiguaran": "/cc @dhh \n. /cc @josevalim \n. This was discussed in https://github.com/rails/strong_parameters/commit/ec02f78e042ca2ed4011917fc8793aa6e2018a5a#commitcomment-1800334\n. ",
    "ekampp": "+1\n. ",
    "nvloff": "Thanks @drogus , is 422 Unprocessable Entity ok?\n. I modified the code so that a config option could work. Also the parameter listing goes only in permit. \n@josevalim yes, I also think that should be the behaviour, however I couldn't figure out how to properly add a config option for rails.\n. @josevalim should work as a config option now, wasn't sure how to namespace it.\n. @dhh Ok, first I absolutely think that \"strict\" mode makes no sense for any environment different from \"development\". \nHere is why I need this in a project:\nI'm working on a dating site where we use MongoDB. And we have this huge User model that stores all the information related to a user in embedded documents. Also have some large forms ( 40+ fields) for user preferences ( hair color, eye color, foods ,etc.) and because of a bad design decisions a few years ago some embedded document may have both \"public\" and \"system\" fields. And in \"system\" there may be some information about what the user bought. \nIn order to protect some huge ass form in a code base without any mass assignment protection we need to permit every single field, since permitting whole subsections can also leave some \"system\" fields unprotected. Our current workflow for doing this is just using \"strict\" mode in development environment and add fields to \"permit\" according to the exception message raised. If the update just passes without error we may miss some of the dozens fields. Double checking if a field is set in the DB is error prone when you have some bullshit form with a lot of fields and \"strict\" makes our lives easier and gives us more confidence that we didn't forget to permit some filed.\nAlso here is a cleaner version rebased to recent master, haven't submitted it because it's still being tested:\nhttps://github.com/nvloff/strong_parameters/commit/474d99c18b54b1960ee53f49e51e5f917d0f0ee8\nI know that bad design should just be fixed, however we wanted to protect our application as fast as possible and this helped a great deal. \nAnd also ActiveModel::MassAssignmentSecurity has :strict option. \n. @dhh We assume that Mongoid works and we don't test if update_attributes on a model also works. And at the current state of the project it's just not possible to add large tests that test if an attribute was assigned in a form, especially for those 40+ field ones. This kind of test is also something we can't maintain reliably.  \nWe currently are in this forked situation - strict_parameters gem and it works. If you think this is not general enough we'll just continue using it. \nThanks for your time! \nedit:\nTo summarize: We just don't want to test things that should \"Just work\" ( fast tests and overtesting, etc.)\n. ",
    "joliss": "Ah, never mind. Who cares.\nclosing\n. Hm, is this why we want RDoc? I'm not sure if there's a way to include README.md in the RDoc output.\n. ",
    "svoop": "(+1)\nSame problem here with an active_admin backend. These generated backends are for a trusted usergroup only, no need (and no budget) to implement parameter whitelisting here. This solution can easily enable active_admin and similar to work seemlessly with strong_params.\n. Related to #39\n. As a side note:\nI'd also vote for additionally allowing regular expressions as suggested in #21. It makes sense to keep things configuration-less and straight forward (as does this commit for multi parameter attributes), but there are many cases where regular expressions would offer huge benefit. Two examples:\n- We're storing i18nized attributes with locale postfixes such as title_en, title_de etc Allowing a regular expression filter such as ^title_\\w{2}$ is both elegant and flexible. And it doesn't pose really any new security risks.\n- On a submission form, we have several virtual attributes for accept checkboxes such as accept_min_age, accept_terms etc which are never persisted to the db. One regex filter ^accept_ would match them all at no additional risk.\n. @rafaelfranca Oops, 450b0fb slipped in because I needed it to continue working here. It's removed and I've applied the more restricitve regex you've suggested.\n. I'm struggling with nested resources as well. However, your problem should IMHO be fixed on the nested_form gem. The prefix author_in keys such as author_1 inside the authors_attributes is redundant and inconsistent with out of the box nested forms. I'm not sure to what extend numeric keys may be a convention already, but it seems to make sense to stick to such a rule in order to keep other code working with the params hash (such as strong_parameters) as configuration free as possible.\n. @kibs: Ah, good point, forgot about that.\n. Or both behaviors (full kaboom or drop illegal keys) configurable via e.g. ActionController::StrongParameters.ignore_illegal_nested_parameter_keys\n. > so does strong parameters usually remove extraneous params or blow up if there are extraneous params?\nSay you have a nested params hash with one post -> many comments. If one of the comments has an illegal key, all comments are stripped from the params hash and only the blog params remain.\n. ",
    "PikachuEXE": "Let's close this issue?\n. still opened?\n. ",
    "Fustrate": "Did you ever find an answer to this? I'm running into the same problem, though I haven't started trying to solve it yet.\nUpdate: rebooting the server solved the problem. Not sure why such a drastic action was necessary, but hey, whatever works.\n. Yes. (Un)fortunately, this only happened on the first update after adding the strong parameters gem, so I'm not sure if I'd be able to add any more relevant information to this issue.\n. ",
    "zackfern": "@Fustrate Unfortunately I didn't find an answer to this, I just stopped using Strong Parameters.\n@rafaelfranca Honestly I can't remember. \n. ",
    "iHiD": "@rafaelfranca I just hit this issue. I believe it is due to unicorn's restart (kill -s USR2) not updating the Gemfile that is used. I found this related PR that shows the error and a fix: https://github.com/sosedoff/capistrano-unicorn/pull/2. This would also explain @Fustrate's experience of it only happening on restart.\nIn summary, I'm pretty certain it's not a strong_paramaters issue :+1: \n. ",
    "casoetan": "If you are using rails 4 then remove the strong_parameters initializer (or from your model) and gem 'strong_parameters' from your gemfile. Rails 4 comes with strong parameters enabled by default.\n. ",
    "ollym": "That works even less. The input parameters:\nruby\n{\"utf8\"=>\"\u2713\",\n \"authenticity_token\"=>\"tK8UFImYUDuu2sqyPSiw8VOc9QHklVWvFYsGt9SuQtE=\",\n \"account\"=>{\"name\"=>\"Foo Bar\",\n \"users_attributes\"=>{\"0\"=>{\"first_name\"=>\"Oliver\",\n \"last_name\"=>\"Morgan\",\n \"email\"=>\"ollym@me.com\",\n \"password\"=>\"[FILTERED]\",\n \"password_confirmation\"=>\"[FILTERED]\"}}},\n \"commit\"=>\"Create Account\"}\nWith my original code, I get:\nruby\n{\"name\"=>\"Foo Bar\", \"users_attributes\"=>{}}:ActionController::Parameters\nWithout _attributes I get:\nruby\n{\"name\"=>\"Foo Bar\"}:ActionController::Parameters\n. Just to confirm, I'm using the latest strong_parameters gem and the most recent Rails rev on 3-2-stable.\nIt's strange because https://github.com/rails/strong_parameters/commit/8d3357499d27763381b720db4609fb30179c7f45 looks to have fixed my issue, but yet it's still not working.\n. The issue was that I was using the gem and not the edge release from the git repository. Please update the gem soon.\n. yea sorry, just threw it together as a quick fix for my solution and couldn't remember the full list of parameter types! When I get a chance I'll turn it into a pull-request you can actually merge.\n. @rafaelfranca well \"s\" is also still supported as it doesn't require a type cast. I'm not sure how an array would be cast even if it was supported. Something like: my_param(1a) => '[1,2,3]' ?\nI just need \"s\" for my project :)\n. @NZKoz Within the Form Builder Rails uses select fields for dates with 1i, 2i, 3i, 4i, 5i for year, month, day, hour and minute respectively. I wanted to use a datepicker, so my system inputs 1s, 2i, 3i for date (Y-m-d), hour and minute. \nWithout having to monkey-patch every model that uses the date-picker, I wrote a little class extension that allowed me to achieve it using multi-parameter assignments. The code is as follows:\n``` ruby\nRails 4\n\nclass ActiveRecord::AttributeAssignment::ClassMethods::MultiparameterAttribute\ndef read_time\n# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_assignment.rb#L224\n# Logic goes here\nend\nend\nRails 3.x\nActiveRecord::AttributeAssignment.read_time_parameter_value\nclass ActiveRecord::Base\n  def read_time_parameter_value name, values_hash\n    if values_hash[1].is_a?(String) && (match = values_hash[1].match /(\\d{4})-(\\d{2})-(\\d{2})/)\n      (values_hash[1].split('-').map(&:to_i) + values_hash.values[1..-1]).each_with_index do |value, index|\n        values_hash[index + 1] = value\n      end\n    end\nsuper name, values_hash\n\nend\nend\n```\nI know the code could be cleared up a little, but I put it together in a rush as a proof of concept.\n... Actually reading it back now I'm not even using the values I'm capturing lol. Very messy, please don't copy it!\n. ruby\nform_for @user, multipart: true do |f|\n   f.file_field :image\nend\nWhen using master branch:\nruby\nparams.require(:user).permit :image # => {}\nWhen using gem:\nruby\nparams.require(:user).permit :image # => { image: ... }\n. @fxn Looks like you would have fixed in that latest commit. However I'm not sure why, but in the back of my mind I remember the file coming in as a Rack class? Maybe http://rack.rubyforge.org/doc/Multipart/UploadedFile.html ?\nYou need to write better test cases for this.\n. @fxn What issue does this strict whitelisting solve?\n. ",
    "clemens": "Whoops \u2013 didn't mean to submit this. :) But I guess it should work anyway since the OR clause breaks at the previous clause anyway if new_attributes doesn't respond to permitted?.\n. ",
    "kibs": "Thank you for your comments. I looked into the nested form gem, trying to understand why they prefix some with new_. It is to prevent clashes with the ids generated and existing ids in the db\nhttps://github.com/ryanb/nested_form/issues/21\n. nested_form has removed the new prefix, the id is not taken from the key anyway. At least not anymore. I am closing this.\n. ",
    "lhm": "I had a similar problem, and believe the bug is the method arguments to sanitize_for_mass_assignment in strong_parameters. See #50 for a patch.\n. this seems to be fixed by 0d21cc58167df513ee9581170c862901697b3827 \n. ",
    "miry": "outdated\n. ",
    "NZKoz": "you shouldn't really need s as the values are strings already right?\n. I'd personally not allow symbols, because there's essentially no legitimate reason for them to be in the kind of hash which strong_parameters is designed to handle.\nHowever, you're right in saying that they've already been created at this point so you're mostly dead.\nI would say that we shouldn't be permitting them as keys in hashes that are permitted.  That will prevent most attacks which involve tricking you into calling extract_options and pulling out a user-created hash.\n. I could conjur up crazy user code which relies on that, but I'd prefer we pushed that interning into their application so we forced them to pass a string, and convert it in their model.\nBelt and suspenders and all that.\n. No, to avoid confusion.\nat present I'm only aware of attacks and types of attacks where symbols are allowed as keys to a Hash.  However in an abundance of caution I'd exclude them as values to.  This will be painful for users whose apps rely on that, but it should be painful as that's a pretty terrible idea.\n. ",
    "olivierlacan": "Noted, I assumed I would see it in my Gemfile.lock as a dependency, since I didn't see it, I tried to shove it in. \nDidn't realize it was not incorporated as a gem. \nOn Oct 12, 2012, at 3:40 PM, Rafael Mendon\u00e7a Fran\u00e7a notifications@github.com wrote:\n\nYou should not add this gem as dependency of a rails 4 application since it is already in the rails code. I'll leave this open to remember to change the gemspec to not allow this gem to be installed in a rails 4 application\n\u2014\nReply to this email directly or view it on GitHub.\n. @fxn Any reason this hasn't been merged in or closed (if it's bad advice)?\n. @mauriciopasquier @BRMatt The build only fails on Ruby 1.8.7. Apparently it's just because of the use of 1.9 Hash syntax unless I'm mistaken.\n\n@rafaelfranca Any reason this hasn't been merged yet?\n. @rafaelfranca I'm sorry but that's not what a CHANGELOG is for. Would you mind if I submitted a PR with a proper CHANGELOG that addressed this?\n. Yeah, but there are a ton of Rails 3 apps in the wild and I happen to be running several of them. In order to update them smoothly to Rails 4 I need to be able to migrate to strong_parameters and I can't do that if I don't know when bugs are fixed and features added or removed. \nPR incoming.\n. ",
    "hkarthik": "+1 to this. It would be nice to have strong_parameters available for folks that are still on Rails 3.1 and want the extra security.\n. ",
    "pmarreck": "+1\n. I think that expecting folks to look to the logs for the context makes more sense if parameter violations were simply Rails.logger.info'd (which I believe was the original behavior). Once you change the behavior to raising, though, I think the error should be fairly self-contained, informationally. And while you can probably determine it by looking at the stack trace attribute of the error object, if adding it to the main error message is not too computationally intensive and adds no additional coupling, I am leaning towards a +1\n. ",
    "astorije": "This issue can now be closed (even though build is currently failing, Travis CI is configured and running).\n. @rafaelfranca, done.\nI ran a Travis build with my fix temporarily disabled to see it fail, see this.\nTest case inspired by upstream project one.\n. Build errors just like master (see #244) but Ruby 2.0.0 \u00d7 Rails 3.2 job passes the existing and new tests.\n. @rafaelfranca, any plans for a release? :)\n. Ping @rafaelfranca? Are you planning on making this part of version 0.2.4? We are currently working on a massive upgrade and Strong Params are one of the last steps \ud83c\udf89 . ",
    "garysweaver": "Thanks, I had already sent an email on the core list with no views or feedback, so I will take a hack at it.\n. @dhh Thanks for asking! In ActiveAdmin primarily those using Rails 3.x will not be using SP, but we need a way to be able to test SP support in the Gem, specifically for this ticket in which we are trying to get a patch in to ActiveAdmin to support SP: https://github.com/gregbell/active_admin/issues/1731\nI think having the ability to disable SP will provide a way for projects to ease into using SP without having to have separate forks. There is a high probability that the way I went about making it configurable is not optimal. I'd be happy to try to improve it, but could use some light guidance if you think that would be a good direction. If there is a better way in general to address testing of optional inclusion of SP, please let me know. Thanks!\n. @dhh ActiveAdmin currently works under the premise that SP is not used, and because there is no way that I know of to easily reload the environment to use a different Gem right in the middle of testing (but maybe there is), this is the easiest way I know of to get the job done. It isn't just a matter of testing whether SP is loaded or not, it is a matter of having SP working only for certain tests.\n. @dhh I understand. However, this will very likely come up again for others that want to use SP and want to ease the transition. Unless there is an alternative, then the projects seem to have to fork just to be able to test with and without SP. That does not seem like a good solution. So, what would you suggest?\n. Figured it out. Was doing this in my spec_helper.rb:\nActiveRecord::Base.send(:include, ActiveModel::ForbiddenAttributesProtection)\nBut also was doing this in the model:\nclass Employee < ActiveRecord::Base\n  include ActiveModel::ForbiddenAttributesProtection\nend\nLesson learned: don't do that.\n. @rafaelfranca Sure. https://github.com/rails/rails/pull/12682 Thanks. Should the S.P. issue be left open?\n. ",
    "bsingr": "Trying the master is what I wanted to do, but as I said, master is still v0.1.4. So trying the master makes no sense right now, I'd guess. Maybe I'll diff the two gems I've got installed locally and see if I can determine the commits from that. Right now I can't tell what exactly is contained in v0.1.5 and if this is already in master...\n. ",
    "GantMan": "Excellent.  Couple of questions come to mind then.\nWhy doesn't scaffold put it in?\nWhy does it work without it?\nWill Rails 4 require it?\nThanks!\n. Thank you so much for helping me understand.  I've put some good time into it and wrote a blog post on the matter to clear up confusing issues for others.  I'd of course, appreciate any feedback on the writing:\nhttp://iconoclastlabs.com/cms/blog/posts/upgrading-to-rails-4-parameters-security-tour\n. ",
    "denispeplin": "Thank for explanation!\nI'm use simple_form gem, and I'm sure it can be modified to handle forbidden attributes, thus avoiding complex code in a form views.\n. Done!\nhttps://groups.google.com/forum/?fromgroups=#!topic/plataformatec-simpleform/E60n5gzMF6o\n. The article about filtering attributes in simple_form:\nhttps://github.com/plataformatec/simple_form/wiki/Attributes-filter\n. ",
    "vishnuatrai": "@phene convert_hashes_to_parameters is available in ActionController::Parameters so this can work if hash is a object of class ActionController::Parameters. in your second example ruby#hash default fetch method is invoking so its not updating the receiver. \n/cc @rafaelfranca\n. ",
    "phene": "@vatrai but convert_hashes_to_parameters modifies the receiver, and fetch calls it.  This is a pretty bad break of the Hash#fetch contract.\n. Huge +1  This has been a really annoying bug. \n. @bemurphy Could you get the tests passing again?\n. ",
    "bemurphy": "I've noticed btw this only happens when the default value provided is a hash.  If it's a string, fixnum, etc, won't happen.  I think the fix is for fetch to handle the hash wrapping and not rely on convert_hashes_to_parameters so its not surprising.\n. Just to add to this, I'm working with another developer that was initially confused by this same thing.  Throwing this in because, two independent parties getting confused by same thing might be a sign of something.\nI do see however, there is a very explicit test that checks for this, introduced here:\nhttps://github.com/rails/strong_parameters/blob/e2d6ba29cdec02bb51167dd24fa5b499641d8226/test/parameters_require_test.rb#L5\nThe commit message is very explicit about it preventing bugs with params wrapped from JSON calls.\n. @carlosantoniodasilva Thanks for your reply.\nAs a specific example, I've written code before in the context of callbacks, where our server would receive an id via a POST, create a background job, which then would call out to a remote endpoint url to fetch more complete json data that was used to create a new model.  Usually we try to be clean and remember to sanitize the JSON we get back, but it could be easy to forget or be lazy and send the unchecked or partially checked hash on for mass assignment.\nAnother possible scenario is if you have a mounted rack app alongside your rails app, that is sharing the db connection and models.  In such a situation it would definitely be prudent to wrap the params in the rack app as ActionController::Parameters as you have suggested.\nI'm asking this because the previous (well, current) attr_accessible scheme protects against forgetting/sloppiness in such instances.\nI very much like having the strong_parameters contextually filtering in this new way, I just have this one hangup I'm trying to hone so I don't make mistakes.\nThanks!\n. @fxn thanks for the guidance.  Added, tried not to clutter with http client code.\n. closing, doc merged at pr gh-108\n. Thanks, your use case examples here make perfect sense.  In fact I had done this when using ActiveAdmin in one app and had forgotten about it!\n. I like the extra visibility this gives to the logging.   ~~I think the before/after examples in the PR are flipped btw.~~ Fixed\nAlso, I'd be kind of bummed if I lost the ability to use StrongParameters for dicing up hashes where a Rails request wasn't in scope (other Rack middleware in play or cutting up parsed json replies from API calls to other systems for example).  Perhaps long term, those aren't consistent with the intention of StrongParameters, but if not, it'd leave mass assignment protection outside the context of a controller request as up to you.\nOne alternative I can think of would be to make the extra exception info more generic, and the params wrapper in the controller could pass in options with :params_action_context as a string (like 'books#update') to reduce the coupling to ActionController. \n. @orend awesome, thanks for pointing that out!\n. This is the test I missed when reading first time through, for anybody else curious:\nhttps://github.com/orend/strong_parameters/commit/72cb2ba0377b469a8ba9a763ec7fdd55f41bc67e#L3R38\n. @dhh I'm not OP but I can envision one situation it could be useful:  we use Papertrail for logging on our apps, and have the capability for setting alerts when patterns are matched for a given log line, and then include the line in the alert.  So in that case the context of lines before would not come into play.\nThat said, the example is a bit of a stretch.  In reality I'd probably have a generic enough pattern match, login to Papertrail, and then scan the context like you said.\n. ",
    "bquorning": "@carlosantoniodasilva There is your pull request :-)\nAs mentioned in the #58, I found that parts of ParametersTaintTest were confusing and some outright wrong. So I fixed that as well. I hope it's ok to keep all of it in one pull request.\n. \"The Travis build failed\" - because the tests are using #keep_if, which is only available in Ruby 1.9. I'm not sure why it passes on 1.8.7+3.2.x though.\n. Yes, sorry. What I meant was of course: \"Some of the parameters_taint tests didn't test anything. Fixed in f2a639f\" :-)\n. Regarding the trouble with keep_if: Would it be too ugly to end the relevant assertion lines with if @params.respond_to?(:keep_if)?\n. @rafaelfranca Done. And \u201cThe Travis build passed\u201d.\n. Absolutely\n. ",
    "grosser": "Done\n. @carlosantoniodasilva can this get merged ?\n. Done!\n. ",
    "nullstyle": "IMO, the problem with just using params[:user] instead of params.require(:user) is that it lets through the class of errors as described by DHH in his comment here:  https://github.com/rails/strong_parameters/issues/2#issuecomment-4601499\n. ",
    "sevenseacat": "+1 to this idea, I can very easily see the scenario where fields are added to a form, the controllers don't get updated, and the data is just silently lost. With attr_accessible, it would throw a mass assignment exception.\n. \\o/\n. ",
    "xxswingxx": "Similar issue here, without attr_accessible in some of my models keep saying WARNING: Can't mass-assign protected attributes: account_id.\nEDIT: Never mind, It was me, I had a pair of strays 'attr_accessible' that I forget to get rid of.\n. ",
    "askehansen": "I have the same issue, using rails 3.2.12\nI have set the config.active_record.whitelist_attributes = false in application.rb\nbut if i go into rails console and type MyApp::Application.config.active_record.whitelist_attributes it returns nil\n. ",
    "metalelf0": "A little late on the train, but it could be helpful for anyone googling this issue: make sure you don't have config.active_record.mass_assignment_sanitizer = :strict in your configuration. This would cause MassAssignmentSecurity errors even though you set config.active_record.whitelist_attributes = false.. ",
    "reggieb": "Looking at the code, require is best used to identify the root element, and permit to define the permissible children of that element. So for your example you would do:\ndef user_params\n  params.require(:user).permit(:id)\nend\nor\ndef user_params\n  params.require(:user).permit(:authorization, :token, {book: [:title, :author]})\nend\n. Looking at this again, this should be a valid input:\nparams.require(:user).require(:id)\nAs is evident from this test: action_controller_required_params_test.rb\nThe problem is Parameters#require:\ndef require(key)\n  self[key].presence || raise(ActionController::ParameterMissing.new(key))\nend\npresence returns the value of self[key], so it is the child that is being passed along chain and not the root hash. Used this way require will do some unexpected things. For example:\n```\nprams = {\n  user: {\n    name: Fred,\n    book: {title: 'A book'}\n  }\n}\ndef user_params\n  params.require(:user).require(:book)\nend\nuser_params ---->   {title: 'A book'}\n```\nThat is, the object returned would be the value of the last required item.\nSo a fix could be to rewrite Parameters#require, so that it returns the root hash (self), and accepts a syntax that allows you to identify which nested parameters are required.\nPermit already has much of that functionality. So you could code Parameters#require so that it goes through each element and raises an exception if it doesn't find them in the parent hash, and then passed them onto permit to do its magic.\nThen the syntax would become:\ndef user_params\n  params[:user].require(:name, {book: [:title]}).permit(:age, {book: [:author]})\nend\nThis would in effect run permit twice - the first time raising an exception if a parameter is missing. The second time just marking the fields as permitted.\nNote that params[:user] is called first, as require is no longer passing on a part of the root hash, but the root hash itself.\n. You may want to have a look at:\nhttps://github.com/reggieb/remembering_strong_parameters\n. I think I've found the problem. Please see this pull request: https://github.com/rails/strong_parameters/pull/72\n. Actually this isn't right yet. I've just added this test and it passes!\ntest \"forbidden attributes cannot be used for mass updating when there are some matches\" do\n  assert_raises(ActiveModel::ForbiddenAttributes) do\n    Person.new.sanitize_for_mass_assignment(ActionController::Parameters.new(:a => \"b\", :c => 'd').permit(:c))\n  end\nend\n. This is now ready to merge. \nHowever, I think this needs checking at is does change the way Parameters#permitted? works. \nLooking at the tests, it appears to me that permitted? has been used to identify whether permit has been run. \nFor example have a look at this version of multi_parameter_attributes_test.rb. In particular, line 23:\nassert permitted.permitted?\nThis is expected to return true even though there are elements in params that are not permitted, as demonstrated by lines 34 to 36:\nassert_nil permitted[:book][\"published_at(1i)\"]\nassert_nil permitted[:book][\"published_at(2i)\"]\nassert_nil permitted[:book][\"published_at(3i)\"]\nThis pull request modifies this test to expect permitted.permitted? to be false\n. I've been working on the code and now see that permitted? does not signify that parameters are permitted, but rather that the permit method has been run.\n. I started on this route because I wanted to be able to modify params in a before filter and not have to modify my existing code. With the current system, you have to modify current code to call a new private method.\nIf I use before_filters I might want to combine them for different actions, and I didn't want the filters to be order dependant.\nI believe my revision makes strong_parameters more flexible. You can use it to build up rules in a number of steps and to set rules anywhere within the params tree.\nThe security isn't dependant on calling a particular method, but instead modifies params itself, strengthening it wherever it is used from that point forward.\n. dhh, First an admission - I started working on this because I thought permitted? was broken and like esad hadn't realised that require returned the value of the key being required and therefore it is not designed to be chained. Once I  worked out how everything worked, it seemed wrong to me. I've lots of concept uses in my head that become possible with an uncoupled require, and I've become a little blind to the original usage. This not being helped by me burying myself in the strong_parameters code for a few days getting my new version to pass all the tests. So in hindsight I've posted the pull request too early. \nAt the moment my example case is very simple:\n```\nclass NotificationsController < ApplicationController\nbefore_filter :strengthen_notification_params, :only => [:create, :update]\n  before_filter :get_notification, :only => [:show, :edit, :update, :destroy]\ndef index\n    @notifications = Notification.all\n  end\ndef show\nend\ndef new\n    @notification = Notification.new\n  end\ndef edit\nend\ndef create\n    @notification = Notification.new(params[:notification])\n    if @notification.save\n      redirect_to @notification\n    end\n  end\ndef update\n    if @notification.update_attributes(params[:notification])\n      redirect_to @notification\n    end\n  end\ndef destroy\n    @notification.destroy\n    redirect_to notifications_url\n  end\nprivate\n  def get_notification\n    params.require(:id)\n    @notification = Notification.find(params[:id])\n  end\ndef strengthen_notification_params\n    params.require(:notification)\n    params.permit(:notification => [:circumstances, :incident_at])\n  end\nend\n```\nFirst note that both create and update are using params[:notification]. The action method and the security setting methods have been decoupled.\nSecond, for update require is called twice. Once in get_notification and then again in strengthen_notification_params. This being a simple example of how rules can be built up in steps.\nIt is also of note that this example doesn't use chained calls. I should have labelled this pull request \"Strengthen with uncoupled require\"! I think the uncoupling is the empowering aspect. Once you've uncoupled require, being able to chain calls in just one benefit. \nI can fully understand that you won't find this one example compelling. I think I need to use my new version in earnest for a while longer so as to build up a better set of use cases, or perhaps realise that I'm heading down a blind alley.\nSo, may I suggest we put this on hold.\n. Having slept on this and considered your comments and reviewed my usage, I've refactored Parameters#require. The functionality has returned to that of the original (it takes a single key and returns the value of that key unless the key is not present in which case an error is raised).\nWith this modification, you can still chain a sequence of requiring and permitting statements, but now, for the requires you need to use the strengthen format:\nparams.strengthen(:foo => :require).permit(:foo => [:bar])\nWith this in place, the advantages of this version of strong_parameters are:\n- Adds facility to build up a strengthened params in a number of steps\n- Allows requiring and permitting statements to be chained\n- Allows requiring and permitting to be combined within a single strengthen statement\n- Replaces permitted? with strengthened? (permitted? implies that permission is being passed, where as in fact the method is a test of whether a process has run).\nI believe this version is more flexible than the original. \nThe key difference is that params itself is modified by each strengthening action (permit or require). I think that makes the solution more secure, because once params is strengthened, that action is enforced wherever params are used. I've added a public method 'original' that allows easy access to the untainted params as required.\n. ## Better example of action based stengthening\n```\nbefore_filter :require_reason_for_update, :only => [:update]\nprivate\ndef require_reason_for_update\n  params.strengthen(:notification => {:reason_for_update => :require})\nend\n```\n. ## Role based stengthening\nAs models don't know about roles (unless you make them know), and you can't guarantee that a particular form will be used to submit the data, the place to enforce role based rules is the controller.\n```\nbefore_filter :strengthen_params_based_on_role, :only => [:update, :create]\nprivate\ndef strengthen_params_based_on_role\nusers_must_admins_can = current_user.admin? ? :permit : :require\n  manager_must = current_user.manager? ? :require : :ignore\nparams.strengthen(\n    :notification => {\n      :managers_comment => manager_must,\n      :user_comment => users_must_admins_can\n    }\n  )\nend\n```\nWith params remembering each strengthening applied to them, a role based before filter can be used on its own, or in combination with other filters.\nYou could also apply role base strengthening like this:\n```\nbefore_filter :strengthen_params, :only => [:update, :create]\nprivate\ndef manager_rule\n  {  :managers_comment => :permit }\nend\ndef stengthen_params\n  rule = {\n     :body => :permit\n   }\n   rule.merge! manager_rule if current_user.manager?    \n   params.strengthen(:notification => rule)\nend\n```\nmanager_rule is a simple hash that you could pass forward to the form in new and edit actions, and use there to define which form fields are displayed to the user.\n. ## Working with strong_parameters agnostic engines\nAs the strengthening is applied to params and does not rely on the use of a special method, parts of the application that use params, don't need to know about strong_parameters.\nFor example, active_admin\nTo make active admin work with strong_parameters I used this pattern in the register: \napp/admin/users.rb\n```\nActiveAdmin.register User do\ncontroller do\nbefore_filter :strengthen_params, :only => [:update, :create]\n\nprivate\ndef strengthen_params\n  params.require(:user)\n  params.permit(:id)\n  params.permit(:user => [:email])\nend\n\nend\nend\n```\nIn a live system I'd need to update the last permit statement to include all the user attributes that are submitted.\n. @dhh \nOK. I can understand the complexity issue. \nThanks for taking the time to consider these options. \n. @dhh \nI've repackaged my code as remembering_strong_parameters and released it as a gem. The more I am using it, the more the fact that params remembers strong parameter setting across multiple calls, is the most useful attribute of this code. Hence my choice of name.\nI'll keep playing with it, and those of a similar bent can do likewise.\nBTW, I also think the best case for using this code was presented in \"Working with strong_parameters agnostic engines\" above.\nThank you again\nRob\n. Does this work:\nparams.require(:claim).permit(\n    :review_type,\n    :number,\n    :point_of_impact,\n    :deductible,\n    :company_id,\n    :appraisal_author,\n    :type_of_loss,\n    :estimate_written_on,\n    :carrier_id,\n    :carrier_office_id,\n    :carrier_number,\n    :carrier_office_adjuster_id,\n    :vehicle_attributes,\n    :carrier_office_adjuster_attributes,\n    carrier_office: [:name, :address_attributes]\n  )\nA\n. ",
    "supercodepoet": "There needs to be a way to make sure the nested model parameters are required and then permit those nested values.\n. ",
    "rodrei": "I'm finding myself in a similar situation. I need to require nested params and the current implementation doesn't provide that functionality.\n@reggieb The approach you proposed solves the issue and keeps the syntax clear.\n. ",
    "jessesanford": "No one has had a need for requiring nested parameters since 2013? . ",
    "mariovisic": "+1 would be very useful.\n. Using the permit! method  solves my issue, calling it on the unserialised ActionController::Parameters hash sets permitted? to true and we've already sanitised the hash in the controller. If you don't think serialising the permitted? value makes sense then feel free to close the issue, i've worked around my problem and I don't think too many people will be serialising their params hashes like we are in our app.\nAs for why we're doing it:\nOur app users create a job brief, with a description as well as some attachment attributes. In the controller:\nruby\ndef brief_params\n  params.require(:brief).permit(:description, :attachments => [ :name, :url, :size ])\nend\nWe don't want to create attachments just yet, we just want to save them for later so they are serialised as a hash:\nruby\nclass Brief < ActiveRecord::Base\n  serialize :attachments, Hash\nend\nOnce the brief is reviewed and accepted, we create a Job record with attachments in the database with our attributes. At this point we're accessing the serialised hash params to create our database objects.\n. @bxt .to_h will only change the top level hash so you'll run into problems with any nesting:\nruby\nparams = ActionController::Parameters.new({'top' => { 'bottom' => 'hi' } })\nparams.to_h.class  # => Hash\nparams.to_h['top'].class #=> ActionController::Parameters\n. ",
    "thomasfedb": "That should fix the failing travis builds.\n. Rebased to remove changes to .gitignore.\n. @dhh sure, I'll change that up right now.\n. @rafaelfranca OK. I'll get that done.\n. Pull request has been submitted against rails/rails here: https://github.com/rails/rails/pull/8752\n. I'll be porting the changes requested at https://github.com/rails/rails/issues/8752 back to this pull request.\n. This should now be in like with what was accepted into rails here: https://github.com/rails/rails/pull/8752.\n. @rafaelfranca OK, made that change. Let me know if that's OK now.\n. @rafaelfranca I'm away from my computer for a week starting in 5 minutes. I will get this done immediately on my return.\nThanks for the feedback and guiding.\n. Makes sense. Alternately you can .permit in an action such as user_params\nand then .select on that.\nAlthough I should point out that the major use case I see for this is more\n\"normal\" resources, unlike authentication, where the permitted params\nvaries little.\nOften there is little variance in what you intend to accept, particularly\non a per-action basis.\nCurrently away from my computer, sending thus from phone. I will have a\nserious look into resolving your issue by Monday when I return to\ncivilization.\n. In response to the example by @dhh, in such a situation I would write something like:\n``` ruby\ndef create\n  if person = authenticate(auth_params.select(:username, :password, :sig))\n    sign_in person, auth_params.select(:remember_me)\nend\nprivate\ndef auth_params\n  params.permit(:username, :password, :remember_me)\nend\n```\nAlternately the authenticate and sign_in methods could be written such that unexpected keys aren't a problem and in that case the .select statements could be dropped.\nAs I said before in the vast majority of cases in what I see as a typical rails application the params being handled relate directly to a resource and so I think the example above will be reasonably rare.\nPlease give me your thoughts @rafaelfranca, @jeremy and @dhh.\n. @dhh Very happy to make the default a log entry. Should I make such changes against https://github.com/rails/rails first?\nWould you prefer two configuration toggles, one for raising an exception and one for logging, or one config options which takes a symbol of :log or :raise.\n. @dhh and @rafaelfranca  Please see https://github.com/rails/rails/pull/8999\n. I changed branch so any discussion should continue here: https://github.com/rails/strong_parameters/pull/85\n. Whoops, still had a 1.9-style hash in there. Should be fixed now.\n. @rafaelfranca OK, let me know if you're happy with it now.\n. @dhh Should docs be in the README.md or elsewhere?\n. @fxn Ok, will change.\n. Travis CI doesn't seem to want to run the suite. Odd.\n. @dhh I didn't copy the docs that were include on rails/rails across because the class in general didn't seem to be documented. I will add docs to the readme now.\n. @dhh I have updated README.rdoc. I haven't documented the class, I think there's another job there to document the entire class.\n. Also, what rebase is required?\n. @carlosantoniodasilva I have already rebased onto upstream/master.\nAlso, Travis failures don't seem related to my code. Travis reports that the current master is already failing.\n. Cheers.\n. @rafaelfranca @dhh When will the next gem be published?\n. Hey @dhh, did you ever get around to cutting that release?\n. This looks fine, although a test would be nice. Not sure who is mean to deal with this sorting thing. @dhh?\n. Can this be merged?\n. Can this be closed please?\n. Specifying identity_attributes: [] will allows params[identity_attributes] to be an array of scalars. This is documented in the README.md, and is not a bug.\n. The issue you have @matisoffn is that you are permitting the key :documents_attributes, but using the key :documents in your request. You need to choose one. The error is entirely correct.\n. Also @matisoffn, you should note that (as specified in the README.md) this is a compatability gem for versions of Rails prior to 4.0. If you are using Rails 4.0 or later you should raise issues against https://github.com/rails/rails.\n. @d-Pixie I think this needs to be fixed. Are you prepared to make the changes of should I?\n. I think the best solution for you would be to add a rescue_from to your controller (or ApplicationController):\nruby\nrescue_from ActionController::ParameterMissing do |exception|\n  render json: {exception.param => \"is required\"}, status: 422\nend\n. @aesnyder I think its a fairly accepted way to rescue from exceptions in Rails controllers using a rescue_from block, yes.\n. If you don't want an error to be raised if they key is missing, don't use #require. The whole purpose of #require is to assert. You can use #[] instead, e.g. params[:notice].permit(:title).\n. @fxn @rafaelfranca This can be closed.\n. Hey @leonelgalan, that's a reasonable suggestion. This repo is only for the compatibility gem, and is designed to match the behaviour of Rails 4+. I'd suggest you check the behaviour of Rails 4+ and submit an issue against rails/rails.\n. The changes suggested here would constitute a massive breaking change to the vast majority of Rails applications which are using strong parameters correctly without issue.\nIf you feel that this is a particularly important change to have in your applications it would not be particularly difficult to implement as a gem which replaced the existing behaviour of #require.\n@fxn this can likely be closed.\n. @johnnyshields You'd have to convince @dhh or other Rails core members. In any case, you had better continue the discussion over at rails/rails as this is just a compatability gem.\n. Hey @OrlandoLee. This is a compatibility gem for Rails versions prior to 4. Perhaps you should submit an issue against rails/rails to see if they consider this to be a security issue.\n. What version of Rails are you using? If you're using Rails 4 of later, you should submit your issues against rails/rails. This is a compatibility gem for Rails versions prior to 4.\nFurther, sending an array of array of integers is not something that is generally accommodated by Rails, which generally would represent such data using a hash.\nI'd suggest this be closed @fxn.\n. Hi @kaspernj, you should avoid spamming your PR as a 'magic bullet' to any issue raised against this gem.\n. Hi @mockdeep. This is a compatibility gem for Rails versions prior to 4. You'd probably be best submitting a PR against rails/rails with an implimentation, or suggesting it as an issue against the same.\n. This can be closed @fxn.\n. What version of Rails are you using? If you're using Rails 4 of later, you should submit your issues against rails/rails. This is a compatibility gem for Rails versions prior to 4.\n. @kaspernj Your PR fails to pass the test suite. You should address this.\nFurther, it is my understanding that parameter keys arrive as strings when submitted via HTTP requests, which is the scenario that Rails targets. Correct me if I am wrong.\n. Cheers for the example, needed that. Will fix.\n. Why is this?\n. That makes more sense. Done.\n. Language could, perhaps, be a little less flowery.\n. ",
    "jeremy": "We could track which params were touched with #permit or #require and have #tainted return those that were not. Then report on unexpected params after the action:\nruby\nafter_action do |c|\n  if c.params.tainted.any?\n    raise \"You have some params that you didn't #permit or #require: #{c.params.tainted.keys.to_sentence}\"\n  end\nend\n. Thanks for spiking this out.\nCould you update the pull request description to show some before/after code?\n. :+1:\nThe whitespace changes are unrelated and make it difficult to see what exactly you changed. Please limit the change the just the relevant code.\n. (FYI, if you rebase your changes on your branch you can just git push -f and the pull request will automatically reflect the new commits :heart:)\n. Agreed! However, this lib merged to Rails as of version 4.0, so that's the place to do new non-bugfix work :heart:\n. Sounds like the upstream package should be namespacing its libs. Strange to see multiple gems being stuffed in vendor_ruby/ toplevel\u2014that's begging for all kinds of collisions.\n. Note these are template files, not libraries for the ruby load path.\nThey're packaged in the wrong dir.\nOn Friday, May 2, 2014, Praveen Arimbrathodiyil notifications@github.com\nwrote:\n\n@jeremy https://github.com/jeremy , all libraries are installed to\nvendor_ruby in debian. Now the collition is between jbuilder and\nstrong_parameters. Only when the upstreams are careless we get collitions.\nstrong_parameters is an upstream for debian.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/strong_parameters/issues/200#issuecomment-42000058\n.\n. \n",
    "rubys": "The previous/current implementation had:\n\noptions.raise_on_unexpected_params  ||= (Rails.env.test? || Rails.env.development?)\n\nLogging would be a useful addition to the production environment.\n. ",
    "jrgifford": "My pleasure @steveklabnik. :grinning: \n. ",
    "alexpls": "The reason that you're getting this issue is because you're not marking id as a permitted attribute for poll_options.\nThe below change to your poll_params method should solve your problems.\nruby\ndef poll_params\n  params.require(:poll).permit(:title, :poll_options_attributes => [:title, :id, '_destroy'])\nend\n. ",
    "BaylorRae": "@alexpls ah, I forgot those attributes needed to be submitted too.\nThanks!\n. ",
    "tomkrus": "Nice one! Thx.\n. ",
    "adamyonk": "This should be better documented. Major pitfall.\n. ",
    "ankit8898": "thanks it worked, it was nowhere documented.. created a tip for it at Coderwall\n. ",
    "cj": "@reggieb thank you for the reply.  That doesn't work, as it doesn't save without using _attributes.\n. ",
    "previousgtbash": "I have the same problem with nested attributes.\nparams.require(:service).permit(\n    :name,\n    :duration,\n    price_tags: [ :price ]\n  )\nIn this example a Service has many PriceTags, the service is saved but without the price_tags. \n. ",
    "camoedo": "I have the same problem with nested attributes.\n. ",
    "fxn": "The released version of the gem does not yet bring permitted scalars if I am not mistaken. With permitted scalars in master  article_attributes must be one of them to pass the filter as you have declared it. Nested hashes must be declared recursively.\nRegarding the ID, that is fine, if you want the ID to be whitelisted you need to declare it as any other attribute. If you have use cases with and without ID, then you can maybe have two declarations:\n``` ruby\ndef claim_params_permitting_address_id\n  ...\nend\ndef claim_params_blacklisting_address_id\n   ...\nend\n```\nOne of the keys in the design of the feature is that in the end it is just Ruby, you can invoke different filters, extract common declarations for reuse... you can customize it to your needs.\nPlease point your Gemfile to this repo while a new gem is released.\n. Can we close this one after the introduction of permitted scalars?\n. Excellent, thanks Egor.\n. IMO the patch should avoid computing the non-permitted keys if the config parameter is false. Think this runs in every request.\n. Yep, rails and this repo are in sync re permitted scalars.\n. Not sure I follow... the method each_element has three cases. Regular hashes are yielded in the last one.\nWe do not certainly want to accept arbitrary keys, strong parameters must be super strict in what it whitelists, if your code uses custom keys then you need to declare them.\n. If you cannot whitelist the attributes because they are dynamic, then you have two options: one is to generate the declarations dynamically somehow, and the other one is not to use strong params in that call, which is probably the one that makes more sense. If you don't really know in advance which are the parameters that are going to come, you cannot whitelist them, which is the whole purpose of permit.\n. Yeah, I think we can close this one, by design strong params does not support unknown hash keys.\n. Can you try using the master branch of the gem? We whitelist scalar values now maybe there's an edge case there.\n. It is not a matter of better tests. We have a strict list of whitelisted types, if the type is not there it is not a permitted scalar by definition.\nThe list of permitted scalars is new, if you confirm the type is legit and not included, then we will include it.\n. It is a first-line defense against unwanted injections.\n. It is a good addition, but I would add it to the existing key, rather than replacing it.\n. I think it's OK, it is a generic example depicting different declarations and nestings. Thanks for the update.\n. That is pure Ruby:\nm(1, 2, a: 1, b: 2)\nRuby converts the trailing hash-like arguments into a hash, as if you wrote\nm(1, 2, {a: 1, b: 2})\nbut you can pass a hash anywhere using curlies.\n. I don't think this is really necessary, the previous example depicts how to declare an array of permitted scalars. There are many use cases for that I don't think mentioning one particular case adds much to what is already said.\n. Alright, thanks anyway Jos\u00e9.\n. The problem with symbols is that they are not garbage collected. Once you have created them, they stick around.\nRejecting symbols as unpermitted parameters is orthogonal to that I believe, no matter whether you permit it or reject it, the symbol has already been created anyway.\n. That's a good point. They are there to be able to handle ordinary XML payloads... let me summon granpa @nzkoz.\n. Whitelisted hashes are recursively built with indifferent access, all keys should be strings.\n. The gem currently permits a dozen types, based on what the builtin deserializers support. Today in theory you could be sending XML payloads that use any of those types. And the server side may expect any of them, for example to round-trip non-AR models or whatever.\n. Why do you open a pull request if there is ongoing discussion here?\nIf you have whitelisted a symbol, the symbol is already in memory. You filtered it out didn't you? As I said before, leaking symbols and strong params are orthogonal topics.\nI am closing the pull request to prevent its merge until there's an agreement here.\n. I sympathize with the sentiment of being more restrictive with the default collection, but would like to address that in a more generic way rather than just blacklisting a type. As I said, symbols round-trip in XML for example, so people may have legit use cases for them. It is not a terrible idea a priori, it depends on your objects, and since that was supported you may be using it just fine.\n. Closing to prevent merges until an agreement is reached in the issue linked above.\n. Good. Would you please add an example that depicts how to instantiate and pass the wrapper?\n. Awesome, thanks @bemurphy.\n. Good, could you please edit \"ActiveRecord\" -> \"Active Record\"?\n. Thanks!\n. Why is a library different from any other project?\n. The Gemfile of a gem only has project development dependencies, and loads the runtime dependencies from the gemspec.\nIncluding Gemfile.lock in the repository is a widespread practice. Everybody does bundle install except when you do need to upgrade something, in which case you do it and upload the new Gemfile.lock. In turn, people will run bundle install when the new .lock gets pulled. All environments are consistent with this workflow.\n. Good, thanks! Would you like to do the same in rails master?\n. I believe there are legit cases for permit!, internal applications or protected admin sections where the user is trusted and thus you don't need all the ceremony. Applied the README patch, thanks!\n. If you change this, then the rake task that generates API needs to be removed or use a different main file.\n. Were you able to generate the API and looks good?\n. If you manage to get it working with RDoc 4, which supports Markdown, that's maybe enough.\n. Awesome, in!\n. The permit method is a whitelist filter. Either you know what to expect and declare it, or else you cannot whitelist it. If you cannot whitelist then it follows you need to trust whatever comes.\n. I cannot try now, but if my memory is not wrong (rare, but sometimes it happens!) I believe you can declare the atributes as if they were direct children. Strong parameters special-cases hashes whose keys are integers.\n. @senny maybe we could add it to the \"more examples\" section?\n. Fantastic Yves!\n. It is a little surprising to me that you have to permit what you just required. Do you believe the example in the CHANGELOG is plausible?\n. @dhh :+1: \n. This solution seems suspicious to me at first sight.\nHashes whose keys are numeric in principle should be transparent. Point is you in general do not want to declare all possible indexes. Wouldn't\nruby\nparams.require(:modification).permit(opening_hours: [])\nbe the expected declaration? The same way today you declare\nruby\nparams.permit(:book => { :authors_attributes => [ :name ] })\nto match\nruby\nActionController::Parameters.new({\n  :book => {\n    :authors_attributes => {\n      :'0' => { :name => 'William Shakespeare', :age_of_death => '52' },\n      :'1' => { :name => 'Unattributed Assistant' },\n      :'2' => { :name => %w(injected names)}\n    }\n  }\n})\n?\n. Excellent David, I'll have a stab at it.\n. That is your first line of defense: you use require when not getting the required key is an error condition. For example, UsersController#update  either receives a \"user\" key or else the submitted form is invalid. Invalid in the sense that the controller has absolutely nothing to do with the data and should err fast in a controlled way.\n. Yes. The API does not support this use case but you can pick at params and see whether you got a string or a hash, and call permit depending on the case.\n. Hi, this is only for bug reports.\nPlease make sure you understand the README, and if you have difficulties then maybe ask for help in the mailing list, IRC, or StackOverflow.\nThanks.\n. If you believe there is a bug in the gem please provide minimal code to reproduce it.\n. Can you copy & paste verbatim the way you get the exception? (Please use Markdown format for code and keep indentation, see the link at the top-right corner of the comment box.)\n. The original CanCan gem does not support strong params, please use cancancan instead.\n. @vijikumar55 closing in principle then.\n. As seen in the example, the integers have to be strings.\n. ",
    "nickurban": "According to the comparability section of the README:\n\"This plugin is only fully compatible with Rails versions 3.0, 3.1 and 3.2 but not 4.0+, as it is part of Rails Core in 4.0.\"\nSince the plugin is only for Rails 3, and since Rails 3 does not include the update method, I think it should be changed to update_attributes. Do you agree?\n. ",
    "the-teacher": "ok. thanks! console notifications confused me.\n. ",
    "sureshe": "thanks!\n. ",
    "ponyczek": "thank you that advise helped me as well \n. ",
    "seanabrahams": "+1 This is a problem.\n. ",
    "atipugin": "Same here, can't use STI with strong_parameters :(\n. Any progress here?\n. Would be nice to see it in master.\n. ",
    "goshakkk": "I am just curious, how awkward it will be to do the following with this stuff:\nSuppose I allow users to allow create web portals and add quizzes to them. I am going to allow portal creation with quizzes with questions with options all in one form. Using your proposed solution, how would I tell that portal can have multiple quizzes, and quizzes have multiple questions, which, in turn, what multiple options? Oh, and depending on type of questions there might be other extra-nested resources. (Yes, I had to do similar app in the past for real.)\nWould it be something like this?\nruby\nparams.require(:portal).permit(:title, :slug, :description,\n  params.nested(:quizzes).permit(:title, :info, :max_score,\n    params.nested(:questions).permit(:title,\n      params.nested(:options).permit(:value, :score)))))\n. ",
    "homakov": "Particularly \"default permit(:age) will only return a string\" is easy to achieve, just add .to_sym at the end of  https://github.com/rails/strong_parameters/blob/master/lib/action_controller/parameters.rb#L47 \nWhat i wonder about is built-in(pseudo code)\n```\nbefore_filter :to_strong_params\ndef to_strong_params\n  \u00a3casting :id to string, person[name] and person[age] to strings\n  params = params.require(:person).permit(:name, :age)\nend\n```\n. @goshakkk permit accepts nested arguments now. This structure is long - so definition is long too. Dont expect magic tool, many rules lead to many lines\n. Waiting for super strong params, thank you :)\n. ",
    "svs": "a DSL for parameter parsing does not give the programmer enough space to properly specify what the params should look like. Better to create an object with the params and do validations on it in the comfort of its own class. i.e.\n```\nclass QuizesController < ActionController::Base\n  def create\n    @params = QuizesCreateParams.new(params).sanitize!\n     @quiz = Quiz.new(@params)\n    .....\nend\n```\nMore here: http://svs.io/post/38090231306/param-objects-in-rails\n. ",
    "bxt": "I ran into the same problem today. I think it is a better solution to call to_h before serialising instead of permit! afterwards. You'll have cleaner objects in your database and no problems with permitted flags. \n. I noticed this too, this is why I came up with this code: JSON(params.to_json).deep_symbolize_keys which is unfortunately less then optimal :) Any ideas for a good conversion method?\n. ",
    "HurricaneJames": "Maybe I don't fully understand what the gem code is doing here.  I found the line after about 30 minutes with a debugger trying to figure out why MyModel.build(my_params) did not build any of the nested resources (yet MyModel.build(params[:my]) works just fine.\nIn the specific case that created the problem this afternoon (though I have a couple of apps that are going to be difficult to upgrade) params looks something like this using form builder:\nuser_entry => {\n    entry_field_responses_attributes => {\n        0 => { response => abc, entry_field_id => 3 },\n        1 => { response => def, entry_field_id => 2 }\n    }\n}\nin my performance test code this gets re-encoded to look more like\nuser_entry => {\n    entry_field_responses_attributes => {\n        first_name => { response => abc, entry_field_id => 3 },\n        last_name => { response => def, entry_field_id => 2 }\n    }\n}\nThis is done because JMeter can be really difficult to setup for large, deeply nested forms and saying first_name is easier than remembering that entry_field_id=3 maps to first_name.  This has never been a problem with the entry_field_responses_attributes= method generated by accepted_nested_attributes_for :entry_field_responses because it ignores the indices and just looks at the values.\nI assumed my solution did not break anything because the hash_filter method still runs element.permit on everything.  Though, admittedly, I really should have run some tests before doing a pull request.\nNow that it looks like I was being stupid, I guess I need to spend a couple hours seeing if it is possible to make strong_parameters play nicely with accepts_nested_attributes_for or if the fields_for convention of numeric indices is a necessary evil when using strong_parameters.\n. Oh, and I should point out that is is impossible to white list the attributes because they are user defined in the database.  \"first_name\" was just an example, it could very easily have been named \"control_parameter_xyz_of_the_fifth_gate_beta.\"\n. ",
    "oivoodoo": "Hi, @HurricaneJames \nI've created the gist probably it could help you to deal with the none numeric keys in the nested attributes.\ngist\n. ",
    "dmathieu": "The failing travis build is due to an other problem, which is already occuring in master.\n. ",
    "cayblood": "Yes, master seems to be working. Any idea when the next release will come?\n. ",
    "jaredbeck": "Just a friendly note because @cayblood didn't mention it:  The readme says that this configuration option exists.  Until there is a new release, the readme is incorrect.\nAs a workaround, bundling from master worked for me too. \n. Ahh, I see.  Nevermind, the readme from the latest release tag correctly omits mention of this configuration option.  Please disregard my comment.\n. ",
    "josemotanet": "Oh, that wasn't obvious to me, thanks! Perhaps I can suggest a README pull request as I feel many people will fall over this common use case. I'll post soon.\n. I understand, Xavier. I did it as a way of highlighting the possibility of passing in arrays in that particular case. I wasn't entirely aware of it and faced the trouble so I thought of contributing.\nThanks for pointing it out though. Also, thanks @carlosantoniodasilva for helping me. Closing.\n. ",
    "Linuus": "Do I always need to specify the array last?\nThis works:\nruby\nparams.require(:foo).permit(:id, :foo, bar: [])\nThis gives syntax error:\nruby\nparams.require(:foo).permit(:id, bar: [], :foo)\nIs this correct behavior?\n. Ah, of course. Thanks :+1: \n. ",
    "stouset": "That's one issue with symbols. The other is that they're frequently used as special values when passed to methods (this is used heavily in ActiveRecord, for instance). Filtering out symbols won't prevent DOS attacks, but it can help prevent the types of SQL injection and code injection attacks that were reported in CVE-2013-0156.\nWhile higher-level components of Rails should prevent any parameters from being parsed as symbols, obviously there have been oversights that have allowed them to make it through. Having overlapping security measures like filtering them out in this component can help limit the effectiveness of these types of exploits.\nAnd really, since we don't expect any parameters to be parsed as symbols (for the reasons already mentioned: inability to be garbage collected, SQL injection, and code injection), why explicitly allow them here?\n. @nzkoz Is there any case where we would want them as a value?\nI ask, because I suspect the easiest way to address this is to simply remove Symbol from the whitelist (which would prevent it from being either a key or a value). If there's no real solid need for symbols-as-values, that could be done as a one-line change. If you know of a case where they're necessary, though, another approach would be required.\n. Ok. It sounded like you were advocating filtering symbols in keys, but permitting them as values.\n. So there's a possible backwards-compatibility issue, but if people are relying on it they're almost inevitably vulnerable to a denial of service attack by leaking symbols (which this doesn't fix).\nI'll submit a PR to fix. Should just be a single line.\n. Does it make sense to log the case when Symbols are passed and filtered, to alert the user that they're vulnerable to a DOS?\n. Apologies \u2014 I thought there was consensus. I didn't realize the pull request was premature. Leaking symbols and strong params are orthogonal, but that's not the issue here. Per @nzkoz, \n\nthere's essentially no legitimate reason for them to be in the kind of hash which strong_parameters is designed to handle\n\nBy filtering out symbols in strong_parameters, it can act as another layer of defense against SQL injection and code injection attacks made possible by flaws or oversights in the params-parsing layer. This doesn't fix (and indeed it can't) symbol leakage, but it can prevent more severe types of attacks.\n. People might have legitimate uses for round-tripping all sorts of objects which aren't safe for parsing as params. That doesn't mean the default should be to accept them. Symbols are exactly this kind of case: people should be forced to toggle a switch saying, \"I am aware of the potentially hazardous consequences of this decision\" before being able to use the feature.\nDo you want people to be able to reenable Symbols on an app-level basis, or for only specific param uses?\n. ",
    "bryanrite": "@fxn Should be good now!\n. :+1: on strong_parameters with a JSON API like @wrwright.\nEven if I don't want to allow an array, this is allows user input to cause NoMethod Errors and return a 500, when really this is probably a 400 or 422.\nAside from rescuing from NoMethod and matching on the error message, there is no good way to gracefully recover from bad user input.\nWhat if we ensured that the require returned the proper type or responded to permit here:\nhttps://github.com/rails/strong_parameters/blob/master/lib/action_controller/parameters.rb#L54\nThoughts? I can make a pull request if we like it.\n. @KevinSjoberg I guess my issue is more that I don't want the array, or anything in it, but it is valid JSON and I may receive it from a client request.  I would think the response should be a 4xx rather than a 500.\n. Alternatively, I've implemented this in my API specific application controller:\nruby\nrescue_from NoMethodError do |exception|\n  if exception.message =~ /undefined method `permit' for/\n    render json: { message: \"Helpful error message...\" }, status: :bad_request\n  else\n    raise\n  end\nend\n. Ping? Can I help move this along in any way?\nSince valid JSON sent to a controller but not in the right \"format\" that strong params expects should return a 4xx... not a 500.  My current solution to this (as I stated in #140) is:\nruby\nrescue_from NoMethodError do |exception|\n  if exception.message =~ /undefined method `permit' for/\n    render json: { message: \"Helpful error message...\" }, status: :bad_request\n  else\n    raise\n  end\nend\nNot ideal but functional.\n. ",
    "teeparham": "See http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/\nIncluding a Gemfile.lock is misleading, since users of this gem can use newer gem dependencies without violating the gemspec. If there is a real version dependency on another library, it needs to be specified in the gemspec.\n. As proof of the usefulness of removing it, you can see that the build fails on rails 3.1 using the current gemspec.\n. You're saying that as long as the gem works in development, it's ok if it fails when actually used?\n. By including it, you make it harder to notice incompatibilities. You won't notice problems until you release it & someone uses the library with a valid dependency that does not work. I'll leave it at that.\n. Having a Gemfile.lock forces me to test the library against an essentially arbitrary set of gems. Removing it allows me to find a bug caused by a newer gem version that I might be using. Also I can run bundle update to test against the latest compatible gems without affecting anyone else.\nHere are a few projects without a Gemfile.lock: arel, active_model_serializers, jbuilder, jquery-rails, resque, cancan, ...\n. ",
    "dougcole": "I resubmitted this to rails, it's merged here: https://github.com/rails/rails/pull/12656\n. ",
    "bencates": "This appears to still be an issue.\n. ",
    "nfm": "I don't have much to offer apart from a +1 - this is still the case. I'm not sure what the security implications are of allowing multi-dimensional arrays. In my case, I want to submit something like:\nruby\nmovements: { id: 1, path: [[0, 0], [100, 100]] }\nThere's no way to specify that an array of arrays of integers is permitted.\n. ",
    "jsanders67": "+1 for this issue\n. ",
    "shaw3257": "+1\nIt would be nice to do the following:\nRuby\nlambda = -> { | path |  } # My Filter Block\nparams.permit(path: lambda)\n. ",
    "ifunke93": "+1\n. ",
    "Cramsden": "+1\n. ",
    "dman7": ":+1: \n. ",
    "esambo": "+1\n. Perhaps your photos_attributes object is not one of the supported types: https://github.com/rails/strong_parameters#permitted-scalar-values\n. You cannot \"require\" your model if it is not required!\nFor models that are \"optional\", try: \nparams.fetch(:my_model, {}).fetch(:file)\nCorrection: I meant to say: \nparams.fetch(:my_model, {}).permit(:file)\nBut the solution from dhh is even better.\n. ",
    "DavidHuie": "Done. :D\n. ",
    "soffes": "Rebased, changed to README.md, and updated Rakefile.\n. Merged master into my branch and rebased.\n. @fxn just realized it isn't working as Markdown. Fought with it for a bit and couldn't figure it out. I generally use YARD for my projects.\nIf someone knows how to fix the RDoc task to generate the homepage from a Markdown file, that would be awesome. If not, I guess you can just close this. Sorry to take so much time for such a little change.\n. @fxn went back before my change and realized that the \"home page\" never worked. Fought with it for awhile and couldn't figure it out. Got the README showing up on the sidebar. It looks just fine and has coloring in the generated docs.\nMerge away.\n. ",
    "aspiers": "I agree this is unclear; furthermore, once you realise how the require -> permit chain is expected to be used, it still leaves unanswered questions, e.g.\n- Are name and age both required nested parameters, or would { :person => { :name => \"John\" } } be accepted?\n- If the latter, how do I make them required nested parameters?\n- How would I make name required but age optional (but still permitted via the whitelist) ?\n- Is it enough to call these methods on params, or does the result have to be used in resulting calls to the model's #create / #update actions?  It seems the answer is the latter, but this is not explicitly mentioned, and it's extra confusing given that in the case where multiple parameters are required, all but the penultimate return value are discarded.\n. Just found another apparently undocumented ambiguity:\n- .permit(nested: []) allows { nested: [ 'anything', 'goes', 'here' ] }, whereas\n- .permit(nested: [ :foo ]) allows { nested: { foo: 'bar' } }\n. And another weakness: \nhttp://guides.rubyonrails.org/action_controller_overview.html#more-examples explains that in order to allow a nested hash with arbitrary keys, you need to jump through ugly hoops:\nruby\ndef product_params\n  params.require(:product).permit(:data).tap do |whitelisted|\n    whitelisted[:data] = params[:product][:data]\n  end\nend\n(Actually that's not quite what it says, but I already submitted rails/rails#12151 to fix the existing typo.)\nHowever this recommended code is hard to understand, and also emits a highly misleading error message: Unpermitted parameters: data.  Furthermore, it's not clear why this is better than simply writing:\nruby\npa.require(:product)[:data].permit!\nEven if the recommended code is deliberately more complicated than it needs to be in order to suggest a way of doing more complicated validations, it still seems unnecessary.  For example, if you wanted to filter certain parts of params[:product][:data] (e.g. via regular expressions), you could do something like:\nruby\ndef product_params\n  params.require(:product).fetch(:data, {}).inject({}) do |whitelisted, (k, v)|\n    whitelisted[k] = v if k =~ allowed_key_regexp\n    whitelisted\n  end\nend\nsince presumably there is no hard requirement to return an ActionController::Parameters object when a vanilla Hash will suffice.\n. ",
    "route": "Oh and seems like it's related to #81\n. ",
    "frootloops": "And mocha.gem update\n. ",
    "firedev": "It's just a key in params hash, besides what now, I can't upload files anymore?\n. @fxn Yes, I expect an array of hashes with nested values for photos. So can I whitelist it? And the other question is how can I make to save the uuid attribute which exists in the model when it is getting saved, but isn't appearing in the actual sql query? \n@rafaelfranca Yes, that is what I've tried, params return this then:\nUnpermitted parameters: image, title, _destroy\n{\n    #...\n    \"photos_attributes\" => {\n        \"1362762269211\" => {}\n    }\n}\nBut it skips the hash inside.\n. In fact this worked, thanks!\n.permit( ..., :photos_attributes => ['title', 'image', '_destroy'])\n. ",
    "senny": "@fxn I'll add an example for hashes with integer keys!\n. I added the example: https://github.com/lifo/docrails/commit/1d8b56647859fc0c66149642d83b29e3118d2cb0\n. ",
    "jpb": "I could really use this feature. The way require() works right now there is no way do catch ActionController::ParameterMissing and display an error message that lists all the required parameters. \n. ",
    "d-Pixie": "Fixed all the issues mentioned by David (thank you for the pointers), squashed my commits into one and rebased of current master.Also added a short section in the README about the feature.\n. CI is failing, for some cases, but with an error: NameError: uninitialized constant Mocha::Integration. I haven't used Travis myself (guard for unit tests and a manual rspec before committing has sufficed so far), is this something I should fix?\n. Rebased and updated. Sorry for the delay, I have been sick for two weeks :/\n. Rebased again ...\n. @dhh, @ajsharp As @fxn pointed out require with multiple keys returns self if they are all present. It can't work, sanely, like to single key version since you would then have to glob the nested hashes together and that might clobber keys etc.\nI tried to make this clear in the initial examples, but I must have gone awry somewhere.\nMy initial case for this was that I picked up the gem for an API implementation and looked at the docs quickly then went: params.require(:username, :password) and it blew up in my face ;) It seamed like it should work. After looking at the then implementation of require I realized that the semantics for the single and multi key versions could not be the same, but neither are the use cases.\nSo for normal rails use you would only use the single key version anyway, when was the last time you posted two models in a form and not in a nested relationship? This then while still providing a sane multi key implementation.\nSo, to further explain, the single key version works the same as ever. The multi key version will raise if any of the keys are missing and include all the missing keys in the error or return the hash, unmodified, if all the required keys are there.\nIf you have {username: \"user\", password: \"<3<3<3\", version: \"1\"} and require(:username, :password) you would get the original hash back that you can then run permit(:version) on.\nI agree that the semantics here are not crystal. Maybe this would then be better as a new function to reduce the confusion? But on the other hand, and what made me go with this, it's a decent semantic for a multi key require, it's just not in line with the single key one ;)\n. Ah, I see .. No of cause you should not have to permit what you have\nrequired. I missed that, probably since the original semantics kind of\npermit the required hash, implicitly ... I will fix that.\nWas that the part of the conversation I was missing up until now? Or is\nthere even further issues with the implementation?\n. Ok\n. I'll write a proposal patch today ...\n. @rafaelfranca - The patch is now available as a pull request in rails/rails. If/when accepted I'll backport it here ...\n. @thomasfedb - The code is in, comments are welcome.\n. ",
    "ajsharp": "Ignore my last comment, just saw this, thx @dhh @fxn \n. Oh, in that case it'd be nice to put something very prominent in the readme that the gem is effectively deprecated, and continuing development for rails 3.2 support is not planned.\n. ",
    "nixpulvis": ":+1: Just what I need.\n. ",
    "yordis": "@hackeron I got this problem and at the same time I ask myself: Why have to be that way? I just wanna do it without the create a new object.\nCode wanted:\nruby\n@search_params = params.permit(:q, resources: [])\nRails: 4.2.0\n. ",
    "mhenrixon": ":+1: this is really frustrating. Right now we have to resource to some really ugly hacks.\n. ",
    "graudeejs": "Same problem\n. ",
    "simonc": "Yeah sorry, not a really good example, the value could also be:\nruby\n{\n  modification: {\n    opening_hours: {\n      \"0\" => [\"08:00 12:00\", \"14:00 19:00\"],\n      \"1\" => [\"08:00 18:00\"]\n    }\n  }\n}\n. I checked with this code:\n``` ruby\nparams = ActionController::Parameters.new({\n  modification: {\n    opening_hours: {\n      \"0\" => [\"08:00 12:00\", \"14:00 19:00\"],\n      \"1\" => [\"08:00 18:00\"]\n    }\n  }\n})\nparams.require(:modification).permit(opening_hours: { '0' => [], '1' => [] })\n=> {\"opening_hours\"=>{\"0\"=>nil, \"1\"=>nil}}\n```\nSo I guess it's a bug. I'll try to find a way to fix this and PR.\nThanks for your feedback.\n. I found a solution. It may not be the prettiest but it works and passes the tests.\n. @dhh I'll try but I'm on hollidays in California right now and the wifi in hotels is not so great, a simple bundle install is taking forever. I do it as soon as possible.\n. It depends of the use cases I guess. In mine it's a limited set of indexes and they should be considered as any string indexes just as \"name\".\nI guess allowing undefined numerical keys should be another subject but maybe I missing something :)\n. @superp I don't see how your example is supposed to work :/\nskill_attributes is a hash and you're trying to permit it as an array.\n. @superp sorry I read it wrong. But still, I'm not sure it's supposed to work. I may be wrong though.\n. ",
    "arthurnn": ":+1: \n. lol @dhh , I was about to PR myself, as today I was having hard time with this on rails/rails 4 ...\n. :+1: for this, or a new method, which would force the hash type. right now it is really common to follow the pattern:\nruby\ndef person_params\n  params.require(:person).permit(:name, :age)\nend\nand if someone send a string on the person parameter, that would cause a 500 and not a 400. \n. FAST as a :zap: =)\n. ",
    "superp": "It stay have a bug at 0.2.1 version\n```\ncontroller\nparams.require(:specialist).permit(:skills_attributes => [:id, :price, :subcategory_ids => {} ])\nincoming params\n\"specialist\" => {\"skills_attributes\" => {\"0\"=>{\"_destroy\"=>\"false\", \"subcategory_ids\"=>{\"22\"=>\"1\", \"23\"=>\"0\", \"24\"=>\"1\"}\nin model\nsubcategory_ids # {\"22\"=>nil, \"23\"=>nil, \"24\"=>nil}\n```\n. ",
    "thomasklemm": "Thanks David for the quick reply, that helps a lot!\n. ",
    "pwim": "When I use  params.fetch(:my_model, {}).fetch(:file) I got Required parameter missing: file. params.fetch(:my_model, {}).permit(:file) works though.\nIt feels weird to me that I have to handle the case when I have a single file upload differently than a single text input,  but I supposed that is because they work differently.\nAlso, I didn't see any documentation about the differences in fetch, require, and permit in the README, and looking at the code, there doesn't seem to be any rdoc about them either.\n. ",
    "ricardokrieg": "OK. It makes sense. Thanks!\n. ",
    "derekprior": "Oh, of course. Thanks @rafaelfranca. The PR has been updated.\n. ",
    "silasjmatson": "``` ruby\nif params[:product][:variant_attributes][:thing] == \"something\"\n  permitted_variant_attrs = [:thing, :attribute_a]\nelse\n  permitted_variant_attrs = [:thing, :attribute_b]\nend\nparams.require(:product).permit(:name, variant_attributes: permitted_variant_attrs)\n```\n. I'm not quite sure I understand the problem. A StackOverflow question with code examples and specific details may be of more help to you.\n. Try something like so:\n``` ruby\npermitted_variant_attrs = []\nparams[:product][:variant_attributes].each do |key, attrs|\n  if attrs[:kind] == \"1\"\n    permitted_variant_attrs << { key => [ :id, :name, :attribute_a ] } # => and others\n  elsif attrs[:kind] == \"2\"\n    permitted_variant_attrs << { key => [ :id, :name, :attribute_b ] } # => and others\n  end\nend\nparams.require(:product).permit(:name, variant_attributes: *permitted_variant_attrs)\n```\nIt may be a bit off, but you should be able to loop and specify which attributes are allowed.\n. I see your problem now. Given its current form, it appears that you can't parse your params dynamically like that.\nYou could try controlling this behavior in your models.\n``` ruby\ndef attribute_a=(val)\n  return if kind == \"2\"\n# ... regular assignment\nend\ndef attribute_b=(val)\n  return if kind == \"1\"\n# ... regular assignment\nend\ndef kind=(val)\n  if val == \"1\"\n    attribute_b = nil\n  elsif val == \"2\"\n    attribute_a = nil\n  end\n# .. regular assignment\nend\n```\nDifficult problem. I'm sorry I can't be of more help.\n. ",
    "thelucid": "@silasj Thanks for the reply but I should have been more specific. I'm taking about a has_many relationship where there will be multiple variants in the params.\n. ...and :thing in the example could be different for each variant.\n. @silasj It's a pretty basic requirement, especially when working with document based databases such as MongoDB. Lets say you have a product that has many variants, the params might look something like:\n``` ruby\n\"product\" => { \"id\" => \"10\", \"name\" => \"Product A\",\n  \"variants_attributes\" => {\n    \"0\" => {  \"id\" => \"21\",\n              \"name\" => \"Variant A\",\n              \"kind\" => \"1\",\n              \"attribute_a\" => \"I should be permitted\",\n              \"attribute_b\" => \"I should be rejected\" },\n\"1\" => {  \"id\" => \"22\",\n          \"name\" => \"Variant B\",\n          \"kind\" => \"2\",\n          \"attribute_a\" => \"I should be rejected\",\n          \"attribute_b\" => \"I should be permitted\" }\n# etc...\n\n}\n}\n```\nNow:\n- attribute_a should only be permitted when the kind is 1.\n- attribute_b should only be permitted when the kind is 2.\nThe reason I've asked the question here it that I can't see how it's possible with the current strong_parameters implementation which is a problem if that's the case.\n. @silasj That doesn't work as permitted_variant_attrs will end up containing all attributes for all variants combined, meaning that attribute_b would get through to 'Variant A' and and attribute_a would get through to 'Variant B'.\n. @silasj Thanks for trying to find a solution. Unfortunately handling it in the model isn't really a viable solution as ideally the data should never make it to the model and it also adds unnecessary logic to the model layer.\nI'm pretty sure there would be the same issue with polymorphic relationships in nested attributes. I would consider this issue that should probably be addressed before Rails 4.0 is released.\n. Solved thanks to this new documentation (you wouldn't believe how long it took me to find this): http://guides.rubyonrails.org/action_controller_overview.html#outside-the-scope-of-strong-parameters\n. @hoetmaaiers No problem, glad it helped.\n. ",
    "hoetmaaiers": "@thelucid thanks for sharing your results, that saved me some time!\n. ",
    "tylerlong": "It turns out that I made a mistake in the testing code. the correct one should be:\nput :update, id: users(:one).id, user: { \"name\" => \"newname\" }\nassert_redirected_to user_path(users(:one))                    \nassert_match /updated/i, flash[:notice]\n. ",
    "oriolgual": "I think I;ll closes this myself, using params.require(:book).fetch(:released) already works an it's a better approach.\n. ",
    "KevinSjoberg": "@rthbound does your example work for the example JSON I provided? require returns the value stored by the provided key. In this case that would be an array, so the call to permit would fail due to permit being called on an array.\n. Since @wizztjh seems to have a working solution for this problem I'm closing the issue.\n. This is a duplicate of #139.\n. Currently I'm solving these issues by iterating over the array and manually require and permit the elements within.\n. ",
    "corbt": "I'm also facing this issue with a request generated by AngularJS.  The requested parameters parse as\nruby\nParameters: {\"$$hashKey\"=>\"00N\", \"author\"=>\"Hiroya Oku\", \"author_url\"=>\"http://isbndb.com/author/hiroya_oku\", \"isbn\"=>\"9788483573983\", \"readingState\"=>\"searching\", \"title\"=>\"Gantz 22 (Spanish Edition)\", \"url\"=>\"http://isbndb.com/book/gantz_22\"}\nWhen I try to use strong parameters, require returns the value of the parameter so permit fails.\nruby\nparams.require(:isbn).permit(:title, :url, :author, :author_url)\nthrows the error NoMethodError (undefined methodpermit' for \"9788483573983\":String)`\nRemoving the require allows permit to function as intended.\nI'm willing to investigate this issue and submit a patch if it's an actual problem.\n. ",
    "wizztjh": "I am facing this issue. This is my solution\n```\nparams\n{\"client_side_logs\"=>[{\"timestamp\"=>\"\", \"level\"=>\"LOG\", \"message\"=>\"Hello there\"}],    \n\"controller\"=>\"api/client_side_logs\", \"action\"=>\"create_all\"}\nparams.permit(client_side_logs: [:timestamp, :level]).require(:client_side_logs)\n```\n. ",
    "newterminator": "@wizztjh Your solution worked 100%. Thanks for sharing.\n. ",
    "lalitlogical": "@wizztjh Thanks for your solution :+1: \n. ",
    "rodrigomageste": "@wizztjh  Thanks !\n. ",
    "alexpacer": "Thanks for the solution @wizztjh, Works perfectly! :). ",
    "tejashjl": "@wizztjh thanks man..solved the problem\n. ",
    "johnmckinght": "@wizztjh thanks man you save my day.. ",
    "leckylao": "Hi @KevinSjoberg @rafaelfranca , it looks similar, but my issue's title is better for searching. As the issue is on the require method:\nruby\ndef require(key)\n      self[key].presence || raise(ActionController::ParameterMissing.new(key))\nend\nWhich returns the value instead of returning the ActionController::Parameters instance. So it will never works for calling any other ActionController::Parameters instance method like permit. Therefore the README and API is wrong and has to be updated\n. Thx @rafaelfranca for the reply, But I am afraid it is not working at all as long as it doesn't return the ActionController::Parameters instance. \nruby\nirb(main):002:0> raw_parameters = { :teams => \"37\" }\n=> {:teams=>\"37\"}\nirb(main):003:0> parameters = ActionController::Parameters.new(raw_parameters)\n=> {\"teams\"=>\"37\"}\nirb(main):004:0> parameters.require(:teams).permit!\nNoMethodError: undefined method `permit!' for \"37\":String\nIt would be good that if you could provide an example that actually works. Thx. \n. IC, cool. Thank you very much @rafaelfranca. Once README updated then it's all good :+1: :smile: \n. ",
    "wrightling": "Running into the same issue as I look to introduce strong_parameters to my JSON rails-api.  Typical request JSON as seen in the examples at jsonapi.org looks something like this:\njs\n{\"cards\":[{\"subject\":\"some subject\", \"reference\":\"some reference\"}] }\nNote the array mixed into this.  If I start my strong_parameters statement with something like params.require(:cards), I get back an Array, not an instance of ActionController::Parameters, and even accepting that, if I go through each array member, they are not ActionController::Parameters instances either (they are instances of ActiveSupport::HashWithIndifferentAccess).\n. ",
    "vdmgolub": "@wrightling that's how I do it, maybe it may be still useful to you :) https://github.com/json-api/json-api/issues/121#issuecomment-21631332\n``` ruby\ndef create\n  photos = []\nphoto_params.each do |p|\n    photo = Photo.new(p)\n    photos << photo if photo.save\n  end\nrender json: photos, status: 201\nend\ndef photo_params\n  params.require(:photos).map do |p|\n     ActionController::Parameters.new(p.to_hash).permit(:title, :src)\n   end\nend\n```\n. Duplication of #147\n. It should be ActionController::ParameterMissing instead.\nI believe mine #158 can be closed when your pull request is merged.\n. ",
    "hirokishirai": "@vdmgolub \nI was also facing this issue.However, it solved by your comment! Thanks!\n. ",
    "NikoRoberts": "@guy-silva and I ran into this dealing with Mandrill inbound webhooks\nHopefully this helps some people \n``` ruby\nparams = ActionController::Parameters.new({\n  mandrill_events: [\n    {\n      msg: {\n          name: 'Francesco',\n          age:  22,\n          role: 'admin'\n        }\n    },\n    {\n      msg: {\n        name: 'steve',\n        age:  22,\n        role: 'admin'\n      }\n    }\n  ]\n})\npermitted = params.require(:mandrill_events).map { |m| m.require(:msg).permit(:name, :age) }\n=> [{\"name\"=>\"Francesco\", \"age\"=>22}, {\"name\"=>\"steve\", \"age\"=>22}]\n```\n. ",
    "ryankc33": "@vdmgolub \nYou're a lifesaver!\n. ",
    "ryanmtaylor": "It's honestly so much easier to do\nparams.require :photos\nparams.permit photos: [:title, :src]\nand just not chain them.\n. ",
    "kirantpatil": "@ryanmtaylor  I am getting ActiveModel::ForbiddenAttributesError (ActiveModel::ForbiddenAttributesError).\nError log:\nActiveModel::ForbiddenAttributesError (ActiveModel::ForbiddenAttributesError):\napp/controllers/traumas_controller.rb:28:in block in create_multiple'\napp/controllers/traumas_controller.rb:27:ineach'\napp/controllers/traumas_controller.rb:27:in `create_multiple'\nI did as per your suggestion as below.\nstdout output:\nStarted POST \"/traumas/create_multiple\" for 127.0.0.1 at 2016-10-05 14:38:49 +0530\nProcessing by TraumasController#create_multiple as JS\n  Parameters: {\"utf8\"=>\"\u2713\", \"fields\"=>[{\"contusions\"=>\"1\", \"burns\"=>\"\", \"at_scene\"=>\"At Scene\", \"emergency_detail_id\"=>\"97\", \"trauma_region\"=>\"Head-Back\"}], \"commit\"=>\"Submit\"}\n  User Load (1.6ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = ? ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"id\", 3], [\"LIMIT\", 1]]\nUnpermitted parameters: utf8, commit\n[\"1\", \"burns\"=>\"\", \"at_scene\"=>\"At Scene\", \"emergency_detail_id\"=>\"97\", \"trauma_region\"=>\"Head-Back\"} permitted: false>]\nCompleted 500 Internal Server Error in 6ms (ActiveRecord: 1.6ms)\nController method:\ndef create_multiple\n    trauma_params\n    puts params[:fields].inspect\n    params[:fields].each do |values|\n       u = Trauma.create(values)\n    end\n  end\ndef trauma_params\n      params.require :fields\n   params.permit fields: [:fractures, :abrasions, :contusions, :laceration , :bleeding_controlled, :bleeding_uncontrolled ,:burns, :at_scene, :emergency_detail_id, :trauma_region]\n    end\n. Resolved by referring @vdmgolub  code.\n. ",
    "abacha": "then, I don't get why I'm having this error:\n```\n[1] pry > t                   \n  => {:status=>:received, :request_date=>\"2012-06-08\", :value_date=>\"2012-06-11\",\n    :settlement_date=>\"2012-06-12\", :value=>1500, :net_value=>1300, :type=>:rescue,\n    :amount=>5000, :account_id=>1, :fund_id=>1}\n[2] pry > Transaction.new(t)\nActiveModel::MassAssignmentSecurity::Error: Can't mass-assign protected attributes: type\n67  from /home/duke/.rvm/gems/ruby-1.9.3-p392@bigbang/gems/activemodel-3.2.13/lib/active_model/mass_assignment_security/sanitizer.rb:48:in `process_removed_attributes' \n```\nmaybe problems with a field named \"type\"?\n. but without strong_params I could use it without any trouble\nSTI do not use \"type\" column, its \"entity_type\", \"entity_id\", it has a\nprefix\n\nAdriano Neder Bacha\ngtalk: abacha\nskype: adriano.bacha\nOn Sun, May 19, 2013 at 1:22 AM, David Heinemeier Hansson \nnotifications@github.com wrote:\n\nYes. Type is a reserved column name used for single-table inheritance.\nIt's not available for general use.\nOn May 18, 2013, at 15:12, Adriano Bacha notifications@github.com\nwrote:\n\nthen, I don't get why I'm having this error:\n[1] pry > t\n=> {:status=>:received, :request_date=>\"2012-06-08\",\n:value_date=>\"2012-06-11\",\n:settlement_date=>\"2012-06-12\", :value=>1500, :net_value=>1300,\n:type=>:rescue,\n:amount=>5000, :account_id=>1, :fund_id=>1}\n[2] pry > Transaction.new(t)\nActiveModel::MassAssignmentSecurity::Error: Can't mass-assign protected\nattributes: type\n67 from /home/duke/.rvm/gems/ruby-1.9.3-p392@bigbang/gems/activemodel-3.2.13/lib/active_model/mass_assignment_security/sanitizer.rb:48:in\n`process_removed_attributes'\nmaybe problems with a field named \"type\"?\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/strong_parameters/issues/142#issuecomment-18112187\n.\n. and I don't use it as a column name, its a simple enum field\n. \n",
    "lowgravityday": "I'm new to rails and trying to deploy a rails-api api. I believe this may solve my issue of fields not being written to the DB, but I cannot figure out how to implement this. Could you give a few hints? Seen StackOverflow question: http://stackoverflow.com/questions/19871786/rails-api-post-params-being-set-to-null\n. ",
    "kreeger": "@jeremy I can do that; let me close this PR and open a new one with only those changes. \n. ",
    "odinsy": "Use deep_merge http://apidock.com/rails/Hash/deep_merge\n. ",
    "airhorns": ":+1:\n. ",
    "bds": "I think I am running into a similar issue.\n``` ruby\nit \"should return 400 (Bad Request) when the job_template is missing an :id attribute\" do\n  post(api_v1_jobs_path, {:job_template => \"5ceb8bb8235bcc76bf475e21\"}, @env)\n  response.status.should eql(400)                                         \nend\n=> returns 500\n```\nruby\ndef create                                                                \n  params.require(:job_template).permit(:id)                               \n  render json: {}                                                         \nend\nWould a better way to handle this be?\n``` ruby\ncode not tested\ndef create                                                              \n  params.require(:job_template)\n  @job_template = JobTemplate.new(params[:job_template])\n  render :status => 400 and return unless @job_template.valid?\nend\n```\nI have not tried this yet since I have not yet created a JobTemplate model\n. ",
    "calebthompson": "Thanks, @dhh. I haven't seen any use cases where two rounds made sense in my own applications. Can you provide a quick example of where that might be useful?\n. ",
    "lukebyrne": "Please ignore, I have realised my mistake. Was passing in video_attributes: nil instead of video_attributes: {}.\nApologies. \n. ",
    "phron": "Thanks for clarification, it's the expected behavior so I can close this (not) issue...\n. ",
    "matisoffn": "I'm having a similar problem and have tried quite a few solutions on the web.  I have a model Note and it has many of the Document model.\nruby\nclass Note < ActiveRecord::Base\n  has_many :documents\n  accepts_nested_attributes_for :documents\nend\nAnd then in my controller (simple RESTful actions) when I try to create a note I continuously get back Unpermitted parameters: documents.\nIn my controller, I permit the params like so:\nruby\nparams\n  .require(:note)\n  .permit(:description, documents_attributes: [:id, :name, :ext, :mime_type])\nBut I still receive the unpermitted parameters and the records are not saved to the DB.  I'm posting an array of objects (JSON), that looks somewhat like this:\njson\n{\n  \"note\": {\n    \"description\": \"test note\",\n    \"documents\": [{\n      \"name\": \"testdoc.jpg\",\n      \"mime_type\": \"image/jpg\"\n    }]\n  }\n}\n. @thomasfedb thanks so much.\n. @rafaelfranca I've tried that, and I get back a {Model} expected, got ActionController::Parameters error.\nWhen I run .permit(:documents, documents_attributes: [:id, :name, :ext, :mime_type]) I still get an Unpermitted parameters: documents\n. ",
    "ClayShentrup": "This is still broken.\n. ",
    "leonelgalan": ":+1: The status code is also 200 (:ok) for the strong param failure. It should be a 422 or 400 in my opinion. \n. @thomasfedb, don't you think the status code should at least be a 4xx and not 200? I agree that the user should rescue from the exception to customize the response, but responding with 200 it's wrong. \n. Thanks, I'll put something together a PR and give it a shot! Thanks\n. ",
    "aesnyder": "Is @thomasfedb the generally accepted way to handle this?\n. Is there a way to have strong_paramters do nothing when the root element is missing? That way I could just have my model validations handle the rest.\n. Thanks @thomasfedb!\n. ",
    "moger777": "I have a similar issue, params update correctly but don't propagate to tests:\n``` ruby\n   # in controller\n  def some_action\n    params[:some_attr] = 'foo'\n    redirect_to params[:some_attr] # works fine\n  end\n# in test\n  def test_some_action\n    get :some_action\n    assert_equal 'foo', request.params[:some_attr]\n  end\n```\n. ok, so, modifying params works, passing request.params won't work in your case. For my tests, I was able to fix by doing @controller.params[:some_attr] in the test\n. ",
    "kangguru": "I was also stumbling about that. But actually this looks like intended behavior as one can see from:\nhttps://github.com/rails/strong_parameters/blob/master/test/parameters_require_test.rb#L7\nQuestions is if a required parameter is present though it is just empty :) \n. ",
    "just3ws": "Came to submit an issue on this exact topic. My example was I have a parameter that's present but has an empty hash.\n```\n    [5] badgiy(#) \u00bb  ap params\n    {\n                \"id\" => \"tkg0ca\",\n            \"protip\" => {},\n        \"controller\" => \"protips\",\n            \"action\" => \"update\"\n    }\n    => nil\n[6] badgiy(#<ProtipsController>) \u00bb  params[:protip]\n=> {}\n\n[7] badgiy(#<ProtipsController>) \u00bb  params.require(:protip)\nActionController::ParameterMissing: param is missing or the value is empty: protip\nfrom /Users/mike/.rvm/gems/ruby-1.9.3-p545@coderwall-web/gems/strong_parameters-0.2.3/lib/action_controller/parameters.rb:58:in `require'\n\n```\nIt seems unintuitive for the key to present and not be nil but still have the validation fail with an exception.\n. ",
    "flatrocks": "Yes, my opinion too.  Throwing an \"ActionController::ParameterMissing\" exception when a require()-ed parameter is present as an empty hash (common in testing) seemed wrong, but the docs do say require() \"Ensures that a parameter is present\" and {}.present? evaluates to false, so I suppose it's just an annoying design decision and not really a bug.\nSince I don't really care if \"strong parameters\" protect against missing parameters anyway, this:\nparams.fetch(:csv_import, Hash.new).permit(:target_class_name, :csv_file, :delimiter, :encoding)\nworks well, using fetch to replace the annoying require() method.  Perhaps examples and scaffolding should use this approach.\n. ",
    "mjrk": "+1 scaffolds should be changed. When submitting empty forms - it results in an exception. This is really counter-intuitive. Newly generated scaffolds should kind of work.\nThe point with require() to be patched nil? and not present? is that it would not fix the issue for submitting empty forms.\nIMHO the perfect solution: forms - even though all inputs are empty - should transmit the key with an empty hash and require should check for nil? then. But this would require too many changes. Too bad, at the end I cannot use strong parameters' require() anymore.\n. ",
    "MrTheWalrus": "+1 something here should be changed.  An empty form/parameter hash may or may not be a valid submission, but it's definitely not the kind of thing that strong params is supposed to be catching - that's what validations are for.\n. ",
    "hernansartorio": "+1\n. ",
    "askl56": "I agree. It demands needless complexity in your tests. \n. ",
    "fredngo": "Agreed. Ran into this most recently when a form had only radio inputs, and it is submitted without selecting an option. It turns out radio buttons don't create a parameter when they are empty. \nI agree with @MrTheWalrus that validations should handle when an option isn't selected, not strong parameters.\n. I found myself implementing a hack similar to that described by @flatrocks all over the place, so I've replaced them all with this monkey patch. I know monkey patches are not in style anymore, but in this case it allows me to keep my controller code idiomatic. So for anyone else who might need something similar, here it is:\n``` ruby\nmodule ActionController\n  module ParametersExtensions\n# See https://github.com/rails/strong_parameters/issues/162\ndef require key\n  begin\n    super key\n  rescue ParameterMissing => e\n    if self[key].nil?\n      return Parameters.new\n    else\n      raise e\n    end\n  end\nend\n\nend\nclass Parameters\n    prepend ParametersExtensions\n  end\nend\n```\n. ",
    "ryannealmes": "+1\n. ",
    "adilsoncarvalho": "I solved that by creating an instance of the parameters class and passed it to the method. Doing so it finds no issue with strong parameters params.require(:user).permit(:email, :password) blocks.\nruby\nprocess :create, method: :post, params: { session: { email: 'a@a.com', password: 'pwd' } }\nI hope that it helps someone.. ",
    "teamon": "https://github.com/rails/rails/issues/12149\n. ",
    "seifsallam": "Sorry nvm that. It was a problem with cancan\n. ",
    "ka8725": "Of  course it's possible but you pass params in the wrong order. The right order should be :name, :bio, role: [\"editor\", \"reader\"]\n. ",
    "gotjosh": "Thank You! I have submitted a pull request. To document such feature. It's Issue #169.\n. ",
    "jhephs": "Is this still working? Tried it just recently with Rails 4.1 and it seems not to be working anymore. :(\n. ",
    "doits": "Stumbled across this too. Tested with Rails 4.2.0.beta2 and this does not work?\nActionController::Parameters.new({:bla => 'blub'}).permit(:bla => ['blub'])\n=> {\"bla\"=>nil}\nAs this use case is not documented, it might be reasonable this does not work. But this might be a nice feature to implement, then :-)\n. ",
    "amngibson": "Did this ever get resolved in rails 4? Looking to filter role values on signup with devise and this looked like the only solution.\n. ",
    "greyvugrin": "@gotjosh found this because I was following a similar approach. If you're going to use those params to create a user it seems like doing the validation in the model is the way to go:\nhttp://stackoverflow.com/questions/16818117/rails-where-to-add-validation-code-controller-or-model. ",
    "BRMatt": "Please could somebody merge this in? Just got bitten by this myself and it seems a little crazy that the gem's been out of sync for ~1 year.\n. ",
    "skandragon": "bump\n. ",
    "mauriciopasquier": "I didn't use the new syntax. In fact, I just copied rails 4 implementation!\n. Closing because it was fixed in #242. ",
    "fseefried": "It is working fine as long as you do not have\nconfig.action_controller.action_on_unpermitted_parameters = :raise\nin your environment enabled.\nIf enabled it will raise an error before going into the whitelisted block. Is it a Bug?\n. Hmm - I've the same problem on most recent Rails 4.2, as soon as I enable config.action_controller.action_on_unpermitted_parameters = :raise\n. ",
    "styx": "@fseefried I really don't remember what happened on Sep 30, 2013. This seems to be obsolete.\n. ",
    "ptoomey3": "It loos like this issue may be accidentally handled by https://github.com/rails/rails/pull/11695.  That PR was originally referenced from https://github.com/rails/strong_parameters/pull/156.   It looks like the proposed PR fixes both the Exception issue as well as the convert_hashes_to_parameters issue.  I can submit a reasonable unit test once that PR is merged.\n. ",
    "freemanoid": "duplicate of #174 \n. ",
    "coreyward": "require requires the argument you pass, so to speak, so in this example the only thing you're requiring is :user. \nYou are also permiting the use of three additional keys: :name, :weight, :avatar under :user, thus: \nruby\n{ user: { name: 'selvan', weight: 100, avatar: 'pink_dude.png' } }\n. ",
    "seivan": "@coreyward Thanks for responding.\nBut this doesn't make things any clearer.\nI just did a request with name \"name\" : \"TheNameWrittenHere\" without any user at all, and it still worked. As in it permitted \"name\" outside \"user\" - in fact, there wasn't even a \"user\" there in the request. \n. ",
    "edelpero": "Hello Raphael, yes, I will take a look at it. Thanks.\nEl domingo, 1 de diciembre de 2013, Rafael Mendon\u00e7a Fran\u00e7a escribi\u00f3:\n\nThere are still some places that need to be fixed. Could you take a look?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/rails/strong_parameters/pull/180#issuecomment-29574621\n.\n. @rafaelfranca, builds are passing now +1 :)\n. \n",
    "scrapcupcake": "Yes please. This section of the rails guides in particular totally bombs when trying to use it, because if you try it in a real app, in the person_params method, the variable params is nil, and nil.require ends up actually being Kernel.require... which is a totally different beast and throws the VERY confusing error of TypeError (can't convert Symbol into String)\nhttp://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters\nFor the love of cake, please change the name of this method. I'm going to go make a pull request on the guides to fix that one section.\n. My issue was occurring because I'd managed to create a local params variable that got set to nil.\nIt's still way too easy, and confusing, to end up with an object other than the expected params hash, and accidentally calling Kernel.require, leading to very surprising results.\n. ",
    "fotinakis": "Wow, totally agree here. I just spent way too long debugging this because I didn't expect that .require(:foo) would return the value, since so many docs directly contradict this by showing chaining like params.require(:post).permit(:title) (on the front page of https://github.com/rails/strong_parameters ).\n. That makes more sense, the reason it was confusing to me was because I tried to do something like params.require(:id).permit(:other_param) thinking that those methods behaved the same way and all applied to the base params hash.\nI agree with this issue in general, I think clearer naming could help here.\n. ",
    "chancancode": "Probably a tangent, but the example above is actually correct. params.require(:post) returns params[:post] (when present) \u2013 which is a strong parameters hash. Then you call permit on it to whitelist params[:post][:title].\nI don't know about this for sure, but I think the rationale to return the value when present is precisely to make this possible. Otherwise permitting nested hashes (nested attributes) would be a lot clumsier. \n. ",
    "nickhoffman": "It's definitely confusing. Another thing that's confusing is how to require nested parameters. Say you want to ensure that params[:foo][:bar] exists. params.require :foo gets you half-way, but how do you do the rest? The only solution that I've found is fugly, surprising, and not idiomatic:\nruby\nparams.require :foo\nparams[:foo].require :bar\nI expected to be able to chain these calls, like params.require(:foo).require(:bar), or provide a hash along the lines of params.require :foo => [:bar].\n. ",
    "atrauzzi": "Totally agree, require should only throw an exception if the parameter is missing, but otherwise do nothing.  As an addition, it should also be able to accept an array of parameters to check for:\nparams.require :username, :password, :password_confirmation\nDocumentation is otherwise not clear on the usage and this might be as a result of being \"astonishing\".\n. ",
    "johnnyshields": ":+1: It is quite confusing how .require returns the key (like [] method)  while .permit behaves like .slice. It would be nice to have .slice-like and []-like variants of both require and permit (a total of 4 methods.). For the sake of argument maybe something like:\nruby\nparams.must_have(:foo)   # .require without scoping\nparams.may_have(:foo)    # current .permit\nparams.scope!(:foo)      # current .require\nparams.scope(:foo)       # .permit with scoping\n. Could we propose other method names here which would make sense, and deprecate the old ones? I think the key request here is to distinguish the roles of \"requiring/permitting\" versus \"shifting scope\"\nI think #require is a bad name for a method anyway since it's a reserved word in Ruby, granted it's valid to use but I think it adds to the confusion here.\n. OK moved to https://github.com/rails/rails/issues/19963\n. ",
    "jondeandres": "This is solved in https://github.com/rails/strong_parameters/pull/102, I close this PR.\n. ",
    "yyyc514": "Sorry, dup of #159, but I added a test.\n. A patch like this works but seems a bit brute force.  Although it's the exact same method HashWithIndifferentAccess uses to convert hashes.\n```\nmodule ActionController\n  class Parameters < ActiveSupport::HashWithIndifferentAccess\ndef initialize(attributes = nil)\n  super()\n  # this forces a deep traverse using convert_value which will make sure all hashes inside params\n  # are truly params hashes without any loopholes\n  attributes.each_pair { |key, value| regular_writer(convert_key(key), convert_value(value)) } if attributes\n  @permitted = false\nend\n\ndef convert_value(value)\n  # Hash, IndifferentHash, and other not-Parameters should be turned into Parameters\n  if value.is_a?(Hash) and not value.class == self.class \n    self.class.new_from_hash_copying_default(value)\n  elsif value.is_a?(Array)\n    value.dup.replace(value.map { |e| convert_value(e) })\n  else\n    value\n  end\nend\n\nend\nend\n```\n. Is this worthy of a version bump for the gem?\n. ",
    "leofrozenyogurt": "Why is this closed? I currently have this issue as well \n. ",
    "matthewd": "@leofrozenyogurt as @doabit closed it himself shortly after creating it, I'd guess he found the source of the problem locally (which, from reading the above description, doesn't sound likely to be the fault of the strong_parameters gem).\n. ",
    "akiomik": "This PR is duplicate (#147, #158), sorry.\n. ",
    "farneman": "I'm running into this issue on a project as well. The workaround I came up with was just to do something like params[:array] ||= [] just before calling .require or .permit to ensure that the array exists before being run through strong_parameters.\nruby\nparams[:role_ids] ||= []\nparams.permit(:role_ids => [])\n. ",
    "alvarezloaiciga": "It works within the permit, so for example home.permit(owner: [ :name, :age, children: ActionController::AnyParam ] ). So it's to scope the permit all.\n. how can you do this (owner: [ :name, :age, child: ActionController::AnyParam ] ) it will return { owner: { name: \"Owner name\", age: 31, child: { name: \"name\", whatever: \"whatever\" } } with a permit!. I though permit! only works for the entire hash. As it is in the test https://github.com/rails/strong_parameters/pull/193/files#diff-cc5c50ab9fdafbbeab836323faf59132R367\n. yep, but imagine you have an array of chidren and on each of them there is a girlfriend Hash that you want to permit it all, so then you will need a method to iterate over the array and do what you are doing there\nruby\npermitted = params.permit(owner: [ children: [ :name, :age ] ] )\nparams[:owner][:children].each_with_index do |child, index|\n   permited[:owner][:children][index][:girlfriend] = child[:girlfriend]\nend\nAn also doing the permit on the children attributes you want there.\nrather than just doing\nruby\nparams.permit(owner: [ children: [ :name, :age, girlfriend: ActionController::AnyParam ] ]\nAnd if there is an array within that girlfriend's array it's going to be a mess, because the complexity on doing it will grow exponentially\n. ",
    "Fire-Dragon-DoL": "@rafaelfranca I found a usecase where permit! won't work: when you have an array of hashes with one of the field being a hash of unknown keys (which should all be allowed). Now this looks like a security flaw but it is not if you consider that this dynamic hash it's an hstore field, so it will become a common use case: submit multiple rows at once with one hstore field each.\nYou can do it with plain ruby obviously, but I think the purpose of strong_parameters it's also making these things easier.\nHere's my example:\nruby\n{ contact_sources: [\n  { id: 1, filled_fields: { randomstuff: 'randomdata', dunno: 123 } },\n  { id: 2, filled_fields: { blah: 'blabla', dunno: 9043 } }\n] }\nAnd what I tried:\nruby\nparams.permit(contact_sources: [{:filled_fields => []}, 'id'])\nSomething like this should be enough (it's a very simple idea):\nruby\nparams.permit(contact_sources: [{:filled_fields => true}, 'id'])\nA reference to my original StackOverflow question: http://stackoverflow.com/questions/24794040/allow-an-array-of-hashes-with-a-dynamic-hash-hstore-inside\n. ",
    "akz92": "I found this alternative on Rails core mailing list. I'll post here for future reference:\nparams.tap { |p| p[:prices_attributes] = p[:prices] }.permit(:prices_attributes)\n. ",
    "michaelglass": ":+1: Will this be considered for merge? If so I'll take a stab at fixing tests.\n. thanks @razum2um \n. @bump please merge\n. ",
    "razum2um": "rebased on master with deleted Gemfile.lock\n. @jackwu-figured - thanks for reminder, I rebased it on master again\n. ",
    "jackwu-figured": "Can we merge this into master branch? It is a such important feature.\n. ",
    "pravi": "@jeremy , all libraries are installed to vendor_ruby in debian. Now the collition is between jbuilder and strong_parameters. Only when the upstreams are careless we get collitions. strong_parameters is an upstream for debian.\n. ",
    "terceiro": "it would be nice if you could namespace inside lib/generators ... for example rspec-rails has its generators under lib/generators/rspec/\n. ",
    "rwz": "They could not be namespaced. Rspec is adding it's own generators, so they can namespace them. Both jbuilder and strong_parameters are overrideing existing rails generators, which makes it impossible to namespace.\nBundling multiple gems into the same directory is plain wrong and unsafe. Gems are not designed to work this way.\n. ",
    "sergey-alekseev": "I was thinking of it when was developing an API. So, it could be shown to the API consumers.\n. ",
    "thalesfp": ":thumbsup:\n. ",
    "eltoob": "Thanks\nThat makes sense ...\nI was just wondering if it was possible to use one permit call for both cases\n. ",
    "kaspernj": "Try this fix:\nruby\ngem 'strong_parameters', git: \"https://github.com/kaspernj/strong_parameters.git\", branch: \"kj/fixed_integers_as_keys\"\nAlso submitted as PR here:\nhttps://github.com/rails/strong_parameters/pull/221\n. +1\n. If you somehow used integers as keys (as with nested parameters for multiple models), then I have made a fix that you can test:\nruby\ngem 'strong_parameters', git: \"https://github.com/kaspernj/strong_parameters.git\", branch: \"kj/fixed_integers_as_keys\"\nAlso submitted as a PR here:\nhttps://github.com/rails/strong_parameters/pull/221\n. +1\n. @pruchai: Try this fork and branch:\nruby\ngem 'strong_parameters', git: \"https://github.com/kaspernj/strong_parameters.git\", branch: \"kj/fixed_integers_as_keys\"\nAlso submitted as PR here:\nhttps://github.com/rails/strong_parameters/pull/221\n. Tests pass locally on my machine by running bundle exec rake.\n. ",
    "csaunders": ":+1:\n. ",
    "Hammadk": "@rafaelfranca Glad you have this under control. Should we add regression tests in version 0.2.4 to prevent this?\n. ",
    "vijikumar55": "I am recording bug only.\n. config/initializers/strong_parameters.rb\nActiveRecord::Base.send(:include, ActiveModel::ForbiddenAttributesProtection)\napp/models/role.rb\nclass Role < ActiveRecord::Base\n    #attr_accessible :name, :description\n        validates :name, presence: true, uniqueness: { case_sensitive: false}\nend\napp/controllers/roles_controller.rb\nclass RolesController < ApplicationController\ndef create\n    @role = Role.new(role_params)\n    if @role.save\n      redirect_to roles_path, notice: t('Role was successfully created.', default: 'Role was successfully created.')\n    else\n      render action: \"new\"\n    end\n  end\nprivate\ndef role_params\n   params.require(:role).permit(:name,:description)\nend\nend\n. I entered the details(name and description) in the form. after clicking the submit button it's directly throwing ActiveModel::ForbiddenAttributes  error. Please find the attached error message.\n\n. ok. Thanks a lot for you help :+1: \n. ",
    "mattbrictson": "@scottjacobsen Thanks for mentioning this! I was stuck trying to figure out why the migration instructions were not working for me. I like your suggestion, which would make the steps:\n- Work one model at a time\n- First add include ActiveModel::ForbiddenAttributesProtection\n- And add attr_protected\n- Verify controller/integration tests fail\n- Fix by using require and permit\n- Move on to the next model\nThen set config.active_record.whitelist_attributes = false once the migration is complete.\n. ",
    "genreil": "My apologies, I put object_params into \"find\" instead of \"update_attributes\" and after getting unfamiliar error and behavior made incorrect conclusions.\n. ",
    "sandstrom": "Would be very useful, nice!\n. ",
    "adrianoresende": "I found in StackOverflow http://stackoverflow.com/questions/18844435/rails-4-strong-parameters-can-i-exclude-blacklist-attributes-instead-of-pe\n\nNo, this is not possible.\nBlacklisting attributes would be a security issue, since your codebase can evolve, and other attributes, which should be blacklisted can be forgotten in the future.\nAdding all your whitelisted attributes might seem like a complicated thing when implementing it.\nHowever, it's the only way of keeping your application secure and avoiding disturbing things.\n-- Damien MATHIEU\n. \n",
    "gregblass": "Blah, this is totally not a real issue. Something else was wrong. Please delete.\n. ",
    "amatsuda": "It's been fixed now. https://travis-ci.org/rails/strong_parameters/builds/175399230\n. ",
    "sumitmah": "so we can have params.require(:parameter).permit(:another_parameter)?. ",
    "seebs": "I am confused.\nI did not ask a question, I did not request help. I already found a workaround. But so far as I can tell, every observable discussion of this concludes that the right thing to do is something deeply insane, like \"just unconditionally whitelist the entire parameter tree starting at the nested parameter\", and that is an issue. Maybe it's a documentation issue. Maybe it's a design choice not to support that.\nBut this certainly looks to me like what I'd usually consider an \"issue\": A common use case where the public discussion of it consistently involves people recommending deeply insane ideas to work around a thing that's otherwise impossible to achieve.. ",
    "msimonborg": "The use case is more to filter params at the controller level based on the roles/permissions of the user submitting the request, not to supersede or compete with model validations. An attribute may be valid for the application, but you want to restrict the ability of a user to submit that particular value in mass assignment based on roles.\nIt comes from this SO question https://stackoverflow.com/questions/45439684/allowing-only-certain-values-though-a-strong-parameter-in-rails-4/45440625#45440625\nAnd it appears it used to be possible and people took advantage of the ability https://github.com/rails/strong_parameters/issues/167 & https://stackoverflow.com/questions/18279229/rails-4-forcing-specific-values-with-strong-parameters\nIn any case, I wrote a gem for it https://github.com/msimonborg/allowable\nI hope you think it's appropriate to reopen the issue, but thanks anyway for considering!. ",
    "zlw": "Why not just use regexp for this?\nruby\nkeys.select do |key|\n  key.match /#{filter}\\(\\d+i\\)/\nend\n. i found regexp are almost always faster than anything when it comes to strings. maybe with other regexp it will be faster:\nruby\nkey.match /\\A#{filter}\\(\\d{1}i\\)\\z/i\n. ",
    "jpignata": "#index was the fastest way to figure it out when I measured different approaches. I agree it's cleaner with a Regexp though.\n. ",
    "biow0lf": "Sure. Done. Pushed with force. Thanks!\n. ",
    "mehdi-farsi": "It's better to test each entries of the NEVER_UNPERMITTED_PARAMS array. isn't it?\n. "
}