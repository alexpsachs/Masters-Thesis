{
    "brockallen": "Ok, this now exists on the UserAccountService or you can check manually via the repository GetAll()\n. So just brainstorming here... we either add a new column to the user table with this or do it as a extra claim.\nIf we do it as a new column, then I'd also still like a option somewhere that forces unique usernames across all tenants. Login then gets tricky -- do we ask them for the tenant as well, or do we just check all matching usernames until one password works (ick). But users won't always know the tenant name either and I don't think we want to show the tenant names in a list on the login screen. \nAs a claim then there's nothing in the core infrastructure that helps with this at all (that could be good or bad).\nAny other thoughts? \n. I added the beginnings of multi-tenant support. I have a new security setting which indicates if you want multi-tenant or not (it defaults to false). All the account related APIs now have overloads that accept the tenant, but all the old APIs still exists and they use a default tenant name. \nI guess the real trick is to now think about how the UI wants to surface the mult-tenant aspect of the identity system. I imagine in many apps this wants to be hidden from the user and then the tenant will be inferred or supplied somehow at runtime.\nBut the core \"engine\" itself now supports it. The rest is up to the consuming application.\n. Done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/c7abae7cbacad3172c8267d4facbf8052c739c17\n. Yes, this is absolutely possible -- I'm doing exactly this in a non-OSS project now. I'll give you the short answer here and then maybe (if I get time) I can post a sample it in code. \nYou need to build a bridge between MR and IdSrv. This is done by writing a class that implements IUserRepository, IUserManagementRepository, and IClaimsRepository. These would then use the UserAccountService to provide the backing implementation. Once you've done that, you need to configure this bridge class in Configuration/repositories.config as the userManagement, userValidation and claimsRepository entries.\nHTH\n. No, I didn't sorry. \n. Yea, sorry I never replied to this. Agreed, that adding proper IoC to IdentityServer seems counter to its original design and thus isn't what I tend to do when I need to extend it.\n. Did you configure the  settings in web.config? The ones checked in are not valid.\n. Oh also, make sure you uncomment the Smtp implementation configured in App_Start/NinjectWebCommon.cs and comment out the Nop implementation:\n//kernel.Bind<IMessageDelivery>().To();\nkernel.Bind<IMessageDelivery>().To();\n. I guess it'd help if we saw what exception was being thrown.\n. Run this in the debugger and simply look at the exception message. It'd be helpful to know what it is.\n. Ok, I'll put this on my official TODO list. I don't have an ETA though. I'd like to get more feedback on the feature.\n. I'd want a separate API, I think. I'd also not populate the claims table with claims from external identity providers and instead keep a separate table I think. At runtime any claims would need to be qualified with the issuer (which is something claims support but now we're not using per-se). \nI think more thought needs to go into it. \n. FYI: This is still on my radar.\n. First pass checked in: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/55e80a2159a7e5a0d2bc7a6e2b2ef564ab12fc82. Feedback welcome.\n. Some slight modifications: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/485f0662eb5e9ccef137a051e7efb1e972c64485\n. Ok, I updated this a bit. @codingoutloud, I don't know if you've been keeping up to date, but I always love feedback :)\nhttps://github.com/brockallen/BrockAllen.MembershipReboot\n. I'm still doing lots of little updates here & there (as I'm sure you've noticed) so make sure you have the latest updates.\nSo related to multi-tenancy, there are two \"modes\" (so-to-speak): 1) Single-tenant, and 2) Multi-tenant.\nIf you leave the default setting of SecuritySettings.MultiTenant = false then anytime you use the APIs that don't accept a tenant it uses SecuritySettings.DefaultTenant as the default. If you use the APIs that accept a tenant parameter then that param is ignored and the SecuritySettings.DefaultTenant is used instead.\nIf you switch to multi-tenant mode (by setting SecuritySettings.MultiTenant = true) then the app must always use the version of the APIs that accept a tenant param. The SecuritySettings.DefaultTenant value is never automatically used. In other words, you have to be explicit and use the version of the APIs that accept the tenant.\nSo in a sense the two modes really affect the rest of the app -- either the app doesn't know or support multi-tenancy or it does. It seemed necessary to do it this way -- I didn't want to try to accommodate and app that was half one way and half the other.\n. And just to clarify this open issue -- I think what you're asking is for a sample that illustrates multi-tenancy, yes? The sample app is only working in single-tenant mode.\n. A tenant claim is issued once the user logs in. So this logic you have for deciding the tenant could be moved into the login action code and then you can stop using session (which is evil: http://brockallen.com/2012/04/07/think-twice-about-using-session-state/). Then anywhere else you can just use ClaimsPrincipal.Current.FindFirst(MembershipRebootConstants.ClaimTypes.Tenant).\n. I'm going to close this since right now I don't have any plans (or time) to do a multi-tenanacy sample. If you're willing to do one, then feel free to submit/contribute it.\n. My only issue is allowing users to change their username -- think about forums where your username is your identity and if you were to change your username you can escape your prior identity. But perhaps that could be another global SecuritySetting.\n. Sure, I totally understand about the benefit of using a semanticless PK. I think I was also having a problem with EF and cascading deletes (with the Claims table). Let me go double check on that.\n. Ok, just went back and tested and as far as I'm concerned, I think it's fine to rework the PK for USerAccount to be an ID field. For the claims, we get a nice delete model if we leave all the properties as part of the key -- that acceptable?\n. Ok, change made: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/eddb16a37037e6383b10ccd2ce0d98262d5a9e48\nI still have some more cleanup related to this -- migrations and the SecuritySettings.\n. Ok, reworked migrations (started over since this was such a big change schema-wise and it was a pain to do a proper migration): https://github.com/brockallen/BrockAllen.MembershipReboot/commit/cefd783cb8be690eac5b24ef4234ed6d8c504e8a\nAlso, added the new security setting to allow for usernames to be unique across all tenants: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/5e1caedc4f4147509758f6196279eb6c0f697be2\n. Added: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/ae704ec535e937aad9d0c6b2ae5b53836c081f80\n. The idea of multi-tenancy is to allow for the same username to be used for different tenants. How you decide what the tenant will be is up to you. There should be a unique constraint on the tenant/username columns -- check the migrations folder.\n. Which code path/scenario are you experiencing this? You are correct that SqlCe has issues with TransactionScope -- I tried to come up with a solution but I couldn't come up with one. If this remains an issue, then I'm inclined to drop SqlCe support and only support SqlServer (which would be easier and we'd have more correct code). \n. So a while back I had moved the Db checks for username and email out of the TxScope to avoid this error on SqlServerCompact. Ideally it should be inside the transaction, but for now I'm willing to let this go (but I'm not happy about it). Can't have the transaction code DB-agnostic until SqlServerCompact supports it. :(\n. The SqlCe and SqlServer are meant for when I do the migrations so I don't have to muck with the .config file. I'll put a comment in .config to indicate that.\n. Sure, and that's by design. If you notice almost every other API works that way. Multi-tenant is a major setting and should be decided upon ahead of time for the app. It really affects how all the APIs are invoked such that if it's set to true then the app should never use the APIs that don't accept the tenant and instead should always pass it. The sample app is not meant to be multi-tenant so I don't think this is an issue.\nPerhaps what we really need is another sample that shows what some of the differences would be for a multi-tenant app. The problem with a multi-tenant app is that everyone always has different requirements for where the tenant comes from. I'm not sure how to express that in a sample. \n. No, separate tables need to be maintained for external identity providers. The MR tables are for the MR identities and are trusted as such. It's ok to link the MR identities with external identities but I'd not want to mix that identity information with MR's account data. Also, this would bloat the MR account data with stuff that might not be needed/wanted by everyone. \nLike I said on the other thread, I need to take some time to sit down and think/design this, but I've not had much time recently (or in the near future).\n. FYI: This is still on my radar.\n. First pass checked in: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/55e80a2159a7e5a0d2bc7a6e2b2ef564ab12fc82. Feedback welcome.\n. I'm closing this issue. Any comments/feedback please post to the other: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/6\n. That's a .suo setting (user setting file), which is not checked into github. Are you suggesting i check that in?\n. So Bill, are you looking for me to check-in the .suo?\n. Added: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/fb98723ae0fe04e42d38481772c25a59685a7b00\n. Closing this since I provided a sample on how to do this: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/CurrentSamples/CustomizationsSample/Customizations.cs#L58\n. The methods should all be virtual, so you can just derive and override the ones you want for testing. Or you can mock the entire thing. Either way.\n. Added: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/c84e3c8df94195c6d5b7a393495f4983be7857c3\nLet me know if you have any issues with it.\n. Ok, thanks. I'll get it fixed.\n. ok, finally fixed here: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/be4c243118631a64322f4ce998d7719c5b907636\n. Added: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/6e1cf28b135d1d0a4f8a05e58d03e1fed7725b95\n. Prelim unit tests done.\n. unit tests need updating\n. Ok, I've reworked the UserAccountService unit tests and am much happier with them.\n. Yea, that code I grabbed from the MSFT open source and I didn't bother to rename the classes or namespaces. Maybe I should...\nI'm guessing you added a reference to something razor related and then accidentally got the same namespaces/assemblies from MSFT and thus the compiler confusion. \n. I renamed the namespace for those internal helpers so they'd not conflict with the namespace that they originally came from. https://github.com/brockallen/BrockAllen.MembershipReboot/commit/d038c01cc0105f7fbfca2f0be3f83a6fef431660\n. Yea, no idea. I don't use resharper.\n. Ok, I changed the casing in the reference. Let me know if that helps. https://github.com/brockallen/BrockAllen.MembershipReboot/commit/553eeb0277f713b6917941ec016864c24b91180b\n. I'll get this merged soon.\n. Thanks for the contribution. \n. Done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/5ffe37f7739e9c20ae7286bfcc7bb89dfd5d5f65\n. I already implemented these in Thinktecture.IdentityModel (http://brockallen.com/2013/02/12/wif-session-helper-apis-for-passive-applications-in-thinktecture-identitymodel/), so I'm not inclined to re-do them in MembershipReboot. Sorry. \nI did update the ClaimsBasedAuthenticationService to not use hard coded values and instead use the values from the SessionSecurityTokenHandler and the SAM's and FAM's various settings, so you can achieve your goals (just not via the settings you wanted to use): https://github.com/brockallen/BrockAllen.MembershipReboot/commit/00b01f1c253994eb3fc33e0478b0514e5b978f9f\n. Same answer as the other issue: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/30\n. thx for the fix!\n. As much as I'd like to have this feature, I think I've decided that 2FA isn't the realm of MR. There are too many different styles such that there's not much that MR would be involved in and most of the coordination would/should be done at the application level anyway. Perhaps a new/different project would be in order.\n. Reopening this because I'm pissed that I gave up so easily. I have a branch that I will push soon and would love feedback.\n. Ok, branch pushed: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/b99b6c0deaf6c4a56dc2091d9eb2476ce5ab2147\nFeedback welcome (the sooner the better, plz).\nOh also, I don't have a real SMS event listener -- for testing you'll just have to check the DB (or in the single tenant sample you can check the admin web page) and enter the correct SMS code.\n. Ok, the initial implementation is done. \n. Right now it just generates a 6-digit code using a RNGCrypto provider. You could replace that method with your own, tho. Here's the method: \nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/Crypto/CryptoHelper.cs#L22\n. This is super low on my priority list given all the other stuff I have going on, but when I get back to it I'll check it out. Thx.\n. I want to accommodate the \"email is username\" option but also allow for user's to change their email address. Currently when an account is created the username is just assigned from the email, so if at any point they change their email then the nameidentifier claim will have the old email which will look odd if/when the email is changed.\nIf we use a GUID (or something else like it) then what we'll have is a nameidentifier like tenant:guid, a email and name claims which match the current email. \nThe other change this entails is that when authenticating if the app has set the \"email is username\" option, then we'll have to load the account by email (not username). This is an internal detail, but I note it here for completeness. \nThis shouldn't break anything and shouldn't require any DB changes when upgrading (one the feature is done) as long as the app has been relying upon the nameidentifier claim for a unique ID for the account (or the int PK if you've been doing it at the DB level).\n. I think this will assuage my concern: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/943dc842925a5d15318d42cf9959b7a553067a86\n. UserClaims are generally meant for identity information, not your normal business data. If you want to have foreign keys to the UserAccount table then you can use the ID column.\nAs for the other questions, those are general EF questions. I'd suggest the MSDN forums or stackoverflow.\n. Thanks!\n. Closing since this needs to be its own project, I think.\n. reopening to have an open issue for this. something is needed in this space.\n. Well, this is a tricky space since the new spec is still being worked on, yet it seems like a waste to just implement the prior spec. \nAlso, permissions are tricky too. Doing a permissions library is on my TODO list but I think it should be separate from MR.\n. Right, but for the client to do it they need the salt. If they have access to the salt then the attacker can do an offline rainbow table and then brute force the password remotely. Doing the stretching on the server, while taking upon the burden on the server, is still slowing the attacker down. \n. Not necessary since derived classes can simply re-implement the interface.\n. Ok closing this issue for the same reason as account audit activity -- this can now be easily achieved via the eventing system. See the sample: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/CurrentSamples/CustomizationsSample/Customizations.cs#L58\n. How does this look:\npublic interface IRepository<T> : IDisposable\n     where T : class\n{\n    IQueryable<T> GetAll();\n    T Get(params object[] keys);\n    T Create();\n    void Add(T item);\n    void Remove(T item);\n    void Update(T item);\n}\n. Ok, see if this works for you. If is does then we can close this.\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/44e8bb57716930ab3ad60892a1ca471333d48a43\n. What do you mean about extra properties? You can add arbitrary claims to the UserAccount -- or is that not what you mean?\n. Did you notice the new Create() API on the repository? This would allow you to derive and add whatever you wanted (and not use the claims collection). \n. Nope -- no where do we create a concrete instance of UserAccount. We use the Create APi on the repository now (and then call an Init method, IIRC). It ended up being similar to yours, but not with the generic and with the base ctor.\n. No worries :)\n. So here's my grand plan for user account management: \nFirst I need to build a general .NET implementation of SCIM. See this: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/40.\nOnce that's done, then I plan to develop a MembershipReboot adapter for the above SCIM library.\nThen finally I plan to develop a SCIM-compliant account management application.\n. Well, this management app could be deployed anywhere, but yes, in general I think of it as a separate app (since it's meant to be used by admin types).\nThe other thing about this plan is that it's a lot of work, so it's not like it's going to be done in the near future (plus I have my other consulting work to do also).\n. Ah no, I had looked for .NET SCIM implementations but didn't find any. I'll check it out.\n. Ok, took a quick look -- it seems like a start, but it feels incomplete as if it's still a work in progress. Also, no activity in 6 months, so not sure where it stands.\n. My goal for a SCIM project was to provide the protocol plumbing and endpoints and then expose an extensible interface so people could then adapt it to their custom storage by deriving and implementing the interface.\n. Right. Again, my idea was to build a SCIM framework that was not coupled to MR. I'd then of course build a MR adapter, but others could build adapters for the old ASP.NET Membership, or the new ASP.NET Identity.\n. I'm closing this since the SCIM project is beyond the scope of MembershipReboot.\n. This rework has been done. Adding custom validation for username, password and email should now be much easier and more flexible. Also, adding code that receives notifications for important activity should be easier (for whatever purpose, such as sending emails, but auditing or anything). \n. Email is pretty important, as it is the mechanism for resetting passwords. I think not requiring email weakens the intended security of the library. Also, external providers only need an email is the user doesn't already have an account, as this email is used to initialize the auto created account.\n. So two accounts can use same email?\n. Right, ok I see the problem with this flow. Making the email address non-unique is not the answer. We want the linked account to be associated with the existing local account, not create a new local account.\nI'll have to rework the SignInWithLinkedAccount to somehow accommodate this possibility. What will most likely need to happen is one or both of:\n1) the account is automatically linked to the matching email address\n2) the user is prompted to enter their local credentials to confirm the association\nThe main concern is how do we confirm that the external provider has really validated the user's email. We don't want to just assume and then associate the account because a rogue external IdP might issue bad email claims to allow a bad guy to take over another account.\nAgain, I'll have to think about how to solve this with the least effort on the application's part.\n. Ok, this is what I changed: \nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/873a9df8e54f7355f4ebd5ef36180d451d6f9416\nBasically, I don't want to automatically associate the linked account with the existing local account because I don't trust the external identity provider to have validated the email owner (even tho many do and are even the email provider like google). So instead I throw a validation exception to show the user how to associate the external account with the local one. It's not perfect, but it's better than nothing.\nAlso, you don't have to use the SignInWithLinkedAccount if you don't like the logic. You can look at the code to see what it does and you can always implement something else more suited to your requirements in your application.\nOne last thing: would it help you if I were to add a global config setting that allowed the app to trust the external identity providers to have validated the email?\n. Any thoughts on my last question?\n. What do you not understand? Feel free to ask here.\nWhat are the build errors? Feel free to report them here.\nThe \"Single Tenant\" is sort of the \"Hello World\" -- once you get it all compiled, run it and walk thru what it does. Hopefully it will make more sense. If not, post questions here.\n. For #1 -- try building the component first in the src folder. This seems to be a chronoc problem with NuGet and various solutions referencing the same project from different locations.\nFro #2 -- I think your copy of the source is out of date. Check the latest from github.\n. Well, it's not a nuget issue, per-se. It's more of an issue that two solutions reference the same project, so the project-relative paths to the packages gets confused.\nI'll leave this open as a reminder for me to see if there's' anything I can do with the code organization to help with this.\nGlad it's working better for you now.\n. yea, i should reopen this:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/7\n. Not sure -- I'd suggest debugging it so that as you walk thru the code you become more familiar with how it works.\n. Well, if you configure that setting that then don't expose any web pages or APIs that allow users to change their username :)\nInternally we throw if you try to change the username and that setting is configured. use the ChangeEmail API instead.\n. Not perfect, but reworked how the email notifications are generated and how the templates are stored and loaded.\n. I just built it myself -- nothing magic about it.\nAs for using something else, MR is more about the security not about the email templates. If you want something better or more robust, go for it, but it's not something I have time to do. If someone finds a nice way to bundle a better template engine into MR, then I'd consider a PR.\n. Well, I implemented the token replacement one first and a razor approach would be more work. In short, I am lazy.\n. This is because the info for authentication is in the cookie, not in the DB. You need to reissue the cookie -- see the sample code that allows the user to change the gender.\n. This issue is beyond the scope of MembershipReboot. MR uses the SAM to issue a cookie that contains the claims so the server-side knows the user's identity. If you want your JavaScript code to know the claims then it's up to you to architect that. And then on top of that if you change those claims in the DB it'd be up to your app to keep the in-memory JavaScript state in sync.\n. You can do for that, @hades200082, but it's now how the plumbing has ever worked in ASP.NET.\n. It's a tricky thing. For example, say it's an authentication request from an anonymous user. What should the server logs say? Was the request authenticated or not? Also, it seems perhaps odd if the identity coming in is not the same as the identity going out. \n. Right -- this is what i meant when i said the identity coming in isn't the same as the identity going out. it's ok to do this, it's just that you need to be aware of this sort of side effect.\n. Imagine you have some logs that are written before and after the request. In the before log it says alice made the request but in the after log you see bob. This is the sort of issue I meant -- one identity on the way in and another on the way out. Now, you can make the code do anything you want, as long as you understand these subtleties. \nAlso, what if the current ClaimsPrincipal is not the same as the UserAccount being updated?\nAs for \"fixing\" this in MembershipReboot, I don't plan on changing the current behavior. For one, the behavior is consistent with the rest of .NET and ASP.NET. Moreover, I see this as the responsibility of the hosting app. Only your app knows when you're changing the account info and thus would know that it need/wants to reissue the cookie. That's why the sample app does exactly this in the code where the user's claims are changed.\nYou're free to fork and change the code to work any way you want.\n. Well, the behavior is whatever you want it to be for your app. It just depends app by app what you want.\n. Good feature request.\n. Right now, no, not preserving the right semantics, but it'd be very simple to add. I was going to work on this tonight.\n. Ok, so take a look: \nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/8cb87b2a28ee23085b4da884b111b38bcf279176\nFeedback?\n. So yes, this change imposes a constraint that the username does not contain the \"@\" character. I think this is the safest way to go and a minor inconvenience for users' preferences. \n. Just a heads up, I changed the signatures slightly for consistency: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/88b3032807dbce4f681cf5681a0bb9c5bfe6bc48\n. Clams are a superset of roles. Just look for claims with Type of ClaimTypes.Role.\n. As far as linking to your own UserProfile table, you can just use the ID column. But the UserAccount has claims which is an extensible store for identity information. What's in your UserProfile that you don't/can't use claims for?\n. If you don't understand claims, then I'd suggest watching this video -- it's well worth the hour:\nhttp://vimeo.com/43549130\nSo then yes, you can do User.IsInRole or ClaimsPrincipal.IsInRole -- they map to the same thing and they look in the ClaimsPrincipal.Current.Claims for a claim of Type ClaimType.Role.\n. Yes, claims are flexible.\nAs for hierarchal roles, nothing in claims provides you meta-information about the roles themselves so you'd need to build that yourself.\n. Yes, each question should be its own issue.\nThe authentication for MR is using WIF's SAM (session authentication module) so you'd have to configure it directly. Here's some help:\nhttp://brockallen.com/2013/02/14/configuring-session-token-lifetime-in-wif-with-the-session-authentication-module-sam-and-thinktecture-identitymodel/\nYes, the NuGet is out of date with the current state of the code.\n. thx!\n. This is a application level setting (for WIF), and not really related to MembershipReboot. But sure, if you want to do this, then go for it.\n. Sure. The PK in the UserAccounts table is a guid and you can easily swap out a different DbContext (as long as the new one has a DbSet) -- just create your own class like the EFUserAccountRepository.\n. Sure -- I'd suggest reading up on EF Code first to configure these relationships.\n. Hmmm, have you not made the binary available to TFS?\n. The latest is now on NuGet -- does that suffice?\n. Yep, I'm working on it. I just have a lot in the air now.\n. Ok, I just checked in a sample for the new/updated configuration system.\n. I also added a new sample project that shows the various ways to customize MembershipReboot. I'll close this issue now -- if you have anything further, open a new issue. Thx.\n. This is an interesting requirement. My only problem is that at the library level there's no way to force the user to do anything -- that's up to the UI or whatever application is using the library. I could add a \"MustChangePassword\" property on the UserAccount -- would this suffice?\n. Normally for other info I might suggest a custom claim, but since there's already the concept of \"must change password\" (or I guess I should say \"should\") then I don't mind making a dedicated flag in the UserAccount model.\n. Ok, done.\n. It's already extensible -- implement INotificationService. One thing is that I am planning on refactoring that interface. I'll try to stay backwards compat, but I plan on doing some sort of INotificationMessage instead.\n. Just a heads up -- with v2.0 I reworked the configuration system a bit. Part of that included how notifications are handled. I just checked in a sample to show the new approach. And this approach is also extensible :)\n. Ok, I finally got around to reworking the email templating (it's been on my TODO for a while). The email templates are now embedded .txt resource files, so you can change those directly or derive and build your own custom email formatter class.\nAlso, in the new sample project that shows the various ways to customize MembershipReboot, there's now a sample for customizing the email notifications (via derivation) I'll close this issue now -- if you have anything further, open a new issue. Thx.\n. You can replace the email notification system. Read these wiki entries and then look at this sample and then let me know if it helps (or not).\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Account-Events\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/tree/master/samples/CustomizationsSample\n. Yea, I've been meaning to but I wanted to get my unit tests reworked first. But I'll do it tomorrow.\n. Done\n. Yep, there's now a MembershipRebootConfiguration -- I didn't have a chance to update the sample yet (since folks where in a hurry to get the latest :)).\n. BTW, the current samples still work, so for the time being you can follow those examples. I kept the updated code backwards compat.\n. Ok, I just uploaded a new sample to show how the new configuration is meant to work. I also removed the obsolete error so it won't be so jarring.\n. Oh did I screw something up? Sorry -- I'll go fix.\n. Ok, I think you're referring to the Microsoft.Bcl.Build.targets file? I checked it in. Let me know if this fixes it for you.\n. Create a custom DbContext and just make sure you have a DbSet. Then you would just use a custom repository class like EFUserAccountRepository but derive from DbContextRepository and just fill in your custom DbCtx class.\n. Not sure :)\nLater today I can do a upload a quick sample to github to show doing what you're asking for. \n. Ok, I checked in a new sample that shows doing a custom database/DbContext class. HTH\n. Also, going to close this now -- if you have any issues with the customization approach in the sample open a new issue.\n. Thx. Also, I'm dying for feedback so as you're working with the APIs, please let me know if things work well or don't work so well.\n. Let's open a new issue for discussing maintenance.\n. Sure, since it's related.\n. Are you building on the most recent samples I checked in the past 24 hours? I've not updated NuGet yet based upon all these recent changes. Waiting for some feedback first :)\n. Hmm, odd... ok, i can look into it.\n. I think what's happening is that you're looking at the latest code checked in, but trying to reference the library from NuGet? Is this correct? If so, then it makes sense because I've not yet done a release to NuGet with the latest bits (and yes, I have changed some class names around for clarity and correctness).\n. Also, I am planning on a v2.1 release (to NuGet) later today or tomorrow.\n. I don't plan on either. The sample I checked in last night shows how to override (and/or replace) the existing formatter. See this: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/CurrentSamples/CustomizationsSample/Customizations.cs#L113\n. Ok, just released v2.1.\n. Ok, I removed/sorted usings on my latest version. I did not rename the `1 file since I'm not convinced it's necessary. Thx.\n. Also, just a heads-up to anyone watching... this will be a breaking change. Any API that assumes a authenticated user that takes a username will get changed to take the accountID instead. Speak now or don't complain later :)\n. done\n. Because guids are fixed in time/space. They make for better and more consistent identity identifiers. I was going for application correctness over perf. Also, but not that this was a reason, they work better for object databases. \n. Hmm... well, that's just a data problem, right? I mean, that's not a hard security problem (just a hard data problem) :)\nMaybe just migrate? Unless you have lots and lots of other data based upon those FKs. Then perhaps just add an int column to the MR UserAccount table?\nIf you come up with a good idea/solution, please post it here. Thx.\n. Yea, that'd be a huge undertaking given the current architecture. Not sure I could pull that off anytime soon. Also, SimpleMembership gets away with that because they've embedded all the SQL into their library. MR abstracts the DB via the model classes. That;'s why I think the best approach is a data migration to MR's model (assuming you're using EF).\n. Yea, I'm thinking of also making the user account primary key a generic argument as well. But if I can get it working soon then MR will allow for this flexibility.\n. done\n. done\n. Done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/4c8f2f54bccf02694fc4a666d13a2d0d163060d0\n. cleaned up relationship between MRConfig and userAccountRepo by decoupling the two -- unfortunately this is a breaking changing but just ctor param ordering.\n. Yea, I left those in in case people wanted to upgrade but not change as much of their code. I will remove the old stuff at some point.\n. For the \"new stuff\" look at the \"Current Samples\" folder. The shift way away from the INotificationService and toward the event based approach. The MembershipRebootConfiguration is now the centerpiece. \n. ok, cleaned up on dev branch. will go out with v2.3.0\n. ok, cleaned up on dev branch. will go out with v2.3.0\n. ok, cleaned up on dev branch. will go out with v2.3.0\n. I didn't think EF6 was released yet. Is it?\n. Once it's officially released then I have no issues upgrading. I'd guess it will come at the same time as ASP.NET v5, VS2013, etc. and so that's still months away.\nI'll leave this issue open as an upgrade reminder.\n. Ok, EF6 added.\n. This is more of a WIF issue than a MR issue. I suspect you need to configure the SAM to use the machine key (by default it uses DPAPI): \nhttp://brockallen.com/2013/02/18/configuring-machine-key-protection-of-session-tokens-in-wif-and-thinktecture-identitymodel/\n. Let me know if that ends up working (as I've not run into that myself on azure). \n. Nope.\n. Yes, I had noticed this issue earlier today and I did some checkins to fix it. Was the snapshot you were working from earlier than today?\n. If you're struggling with git, then consider SourceTree -- it's quite nice: \nhttp://www.sourcetreeapp.com/\n. Oh and since you were working from last night's code then I've already fixed the issue. Perhaps you should merge into your branch. I'd suggest merging from the v2.2.0 label -- this is the label for the released bits to nuget and include my fixes for the build issue from today.\n. As for contributing -- any ideas you have open new issues so we can discuss.\n. Sure, I think you're right -- there are prolly more events that we can surface. But please open an issue first (or email me directly) -- I just want to discuss the changes before getting blindsided by a pull request with something unexpected. \n. Can you confirm that the changes I made today solve your original issue (so I can close this)?\n. These used to be a services folder but it ended up getting too generic, so i moved everything up a level. shrug\nI'd suggest doing all your checkins and pushing to github and then deleting the local directory and then reloading from github -- it's like a enema (in a good way).\nAs for enums, i like i keep them close to their semantic location not based upon the .net type. IOW, we'd not do a classes folder and interfaces folder, so i'd not do an enums folder.\n. Ah I see. Thx and fixed: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/3905bf4e976f3e31aa02b0d9569c7e28a6bf1f80\n. Are you not using EF then?\n. I see... ok, it's a good idea, so I probably should do it.\n. Ok, this split will be done in the next release. It's already been checked into the dev branch.\n. Because guids are fixed in time/space. They make for better and more consistent identity identifiers. I was going for application correctness over perf. Also, but not that this was a reason, they work better for object databases.\n. No, it's the ID of the role itself. \nThe new role stuff is sort of a work in progress and it's meant to support SCIM. It's meant to simply provide a convenience to define roles. It does not associate a role with a user in any way. That's done in the user's claims collection. \nAgain, work in progress.\n. I think most of the work to use MR with WS-Fed is to handle the right events on the FAM to map the identity to MR and to control what claims get passed into the SAM for authentication. Anyway, it's an exercise I wanted to go thru.\n. If you want multiple roles for the user, just call AddClaim multiple times with the different claims/roles.\n. Ok, if that fails then it's a bug. I'll look into it.\n. Ok, when I get time later today I'll start to flesh out some top-level topics under the wiki.\n. Just as an updated, I finally got some time today to start working on some crude documentation: \nhttps://github.com/brockallen/BrockAllen.MembershipReboot/wiki\nIt's not done yet and it's certainly not exhaustive, but it's something (and better than the nothing we had before).\nHTH \n. Ok, I just finished filling in the last topic. Again, these docs aren't perfect but it's a start. Feel free to build upon and enhance them. Thx.\n. Sure -- anything you want to provide I'll put up int he wiki.\n. I think this would be nice as well, but I'll have to look into it.\n. Question for those interested in this feature: \nDo you need to support a single client cert, or multiple?\n. Meh, nevermind -- I think I need to support multiple regardless.\n. ok, in the latest checkin i added the ability to add/remove certs from a user account and to authenticate with a client certificate. also, i added a sample to show doing this (see CertificateLogin)\n. Yep, it will be on NuGet in the next week or so. My plan is to either allow cert authN or cert 2FA.\n. Done: http://brockallen.com/2013/08/14/client-certificates-and-two-factor-authentication-with-client-certificates-in-membershipreboot/\n. No, MembershipReboot defines its own database model/schema and is not intended to be compatible with ASP.NET Membership. \nYou could import the ASP.NET Membership data into MembershipReboot (except the password might be a problem), but then your old ASP.NET Membership tables would be unnecessary. \n. Ah I see. Yes, I'd suggest just migrating the data -- load it from the DB and then use MR to persist it. \nAs for transactions, sure, if you do your work in a TxScope (and using SqlServer) then it should be fine. SqlCompact has some issues with TxScope, so I am not confident SqlCompact will work for you.\n. i did a whole lot of updates to the tracing\n. I'd love to get feedback in the next few days if possible -- i want to get out an update ASAP. Thx.\n. I added several new user account events such as\n- claims added/removed\n- mobile phone added/removed\n- linked accounts added/removed\n- certificates added/removed\n- two factor auth enabled/disabled\ni'll close this now, but if you have any others please re-open and provide suggestions.\n. ok, good ideas. \nfor hooking into external tools for logging/auditing then it's simple -- it just involves building an IEventHandler<T> for the various events from the UserAccount you care about. so to build that hook into something like elmah would be fine, but i see it as external to the core project. it would be very simple as it's own library -- an addon to MR (deployed via nuget). \nas for admin filtering of the events, i guess your event handler would log everything and then only display it to the admin. unless i'm missing something... the way the event bus works is that as a user account is in-memory and being \"worked\" it collects these events. so the opportunity to persist them is only for the event handler in a short time. nothing built-into MR persists them. again, i was designing this as an extensibility point so different apps could make their own determination what (and how) to store the event info. I feel like i'm missing what you're looking for, though.\n. ok, cool. i'll be excited to see what extensions you come up with :)\n. @christolo -- even if you just built a library that had the repository (like the new EF library: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/master/src/BrockAllen.MembershipReboot.Ef), then i could duplicate the current single tenant sample and plug in your repository.\n. So Create just needs to instantiate the UserAccount. This hook was added in case you built your own derived class. I think you can just return new UserAccount() if RavenDb doesn't need anything special.\nSo for the event stuff... yea, we need a way to mark that as non-serializable. What would Raven need in the UserAccount class to know not to serialize that property?\n. Ah, ok... so maybe I now understand your create comment more: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/94\n. @christolo, mind looking at this comment and thread and chiming in? Thanks.\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/94#issuecomment-22659099\n. Ok, closing this now -- many thanks @christolo!\nhttp://brockallen.com/2013/08/14/ravendb-support-in-membershipreboot/\n. From the release notes:\n\"added concept of groups (or group definitions). this doesn't affect how roles (or groups) are associated with user accounts. rather it's just a new entity/table where an application can define what groups the application uses. this was mainly added for scim support (http://www.simplecloud.info/).\"\nAnd I should add that it's not wired in any way to the user account classes. So in other words, it can be used how ever you want. It's just meant to be a storage for group (or role) definitions. And yes, they support nesting, so I can have \"Group A\" contain \"Group B\" (and vice versa). Again, it's mainly only storage of this data and associations. There's little else what uses it and is pretty wide open for an application to use it however it sees fit. For example, you could query the groups to populate a drop down list to allow an admin to know what roles your application supports.\n. Yes, the role class that was there a week ago was renamed to groups (mainly to be more in alignment with the SCIM spec). Again, between the official releases it's always a work in progress :)\n. Add a user to a role by adding a claim.\nThe groups API is for modeling group definitions, as described above.\n. Groups are just a named set of claims.\n. Ok, I'm not able to repo. \n@christolo  -- in what way does it fail?\n. I checked in code to show that it seems to work: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/f3e936788b8dfb4e2a01470366cb037f42bd749c\nLet me know what I'm missing.\n. Well, if you call:\nAddClaim(ClaimTypes.Role, \"Admin\")\nAddClaim(ClaimTypes.Role, \"Admin\")\nthen you're correct -- it prevents duplicate claim type/value pairs, but different values for the same claim type should work.\n. I guess, do you have a use case for adding the same claim type/value pairs multiple times?\n. What do you mean? If you're talking about the dependencies on System.Web, it's because MR itself has those dependencies.\n. I sill am not clear on what aspect of the project makes you say that it's a \"web project\".\n. Ok, yea... I dug into the project file and sure enough all kinds of web related stuff. I have no recollection of how that project was created so I'm surprised that I would have done it as a web project (but apparently I did). Anyway, it's all cleaned up now.\nThanks.\n. Yep, this is a very valid point. Are you not using EF? I'm happy to work with you to get a solution -- can you describe your scenario a little more?\nOne approach would be to derive from UserAccount, but I don't know if there will be more issues beyond this one.\n. Ok, so I spent some time thinking about this. \nMy intent with locking them all down was to try to ensure that they weren't corrupted in anyway, but since I'm trying to let someone plug in a custom repository there's no guarantee that the values wouldn't get corrupted (consciously or not) in the database.\nI suspect opening up the ctor to public and marking all the properties as protected would help your scenario, yes?\n. @christolo yea, i saw that. i guess opening up the ctor will work. \n@raphsharp -- any other thoughts?\n. Ok, I opened up the ctor: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/6f5044e7d76384d5c955bff5ff0b32764e5a899b\nHTH\n. @raphsharp Isn't that what the code is already doing?\npublic interface IUserAccountRepository : IRepository\n{\n}\npublic interface IRepository : IDisposable\n        where T : class\n{\n    IQueryable GetAll();\n    T Get(params object[] keys);\n    T Create();\n    void Add(T item);\n    void Remove(T item);\n    void Update(T item);\n}\n. Ah, so not the repository, but the service itself you want to customize. Or rather, both.\nDo you have some specific use-cases that can help me think about this?\n. @raphsharp just to let you know, i've been thinking about this issue. Also coincidentally another person has emailed me with some thoughts somewhat related to some of these ideas. So I've not forgotten about this. My main constraint is finding a day to prototype some of it.\n. Ok, time for feedback -- I spent the entire day working on making MR have better support for custom user account classes and for custom properties on the user account class. While I wasn't able to pull off a pure interface based approach, I did end up with an ok approach where it's easy to add custom properties to your own user account table and the user account service is a generic class based upon your custom user account type.\nThis is prototyped on a branch: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco\nThe customization sample is the best example of it in use: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco/samples/CustomizationsSample\nPlease look over this and provide feedback and let me know if you think this is a move in the right direction and if it satisfies your requirements. Thanks! \n. Ok, closing this now given that the rework is mostly done.\n. Ok, thx for this. I'll check it out later tonight.\n. Hey @christolo -- So I took a look and a couple of things didn't work. Here's what I had to do to make it work:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/3535d602012f36c2bc422c5646cae67aaeb21d3c\nLet me know what you think (I don't know Raven at all). The Get method with the \"In\" call didn't seem like it was working. Let me know if what I did is legit. Thx.\n. Ok, to solve the \"events\" issue, I change the events API to be a method from a property to the serializer wouldn't get confused over what needed to be persisted and what didn't.\nthanks for the help!\n. http://brockallen.com/2013/08/14/client-certificates-and-two-factor-authentication-with-client-certificates-in-membershipreboot/\n. Well, in the very early versions the repository was separate from the security settings. I then added the concept of the MRConfig to encapsulate the security settings and a place to configure validation and event handlers. I also lumped in the repository into MRConfig. I have since change that design choice and removed the repository from MRConfig given the various reasons cited in the release notes. And yes, it's a cleaner design, I think.\n. Ok, done.\n. It's as fast as /dev/null!\n. What type of settings and how/where are they used? Just trying to get an idea on the sorts of things you're looking to extend to know best how to advise.\n. @drewid ?\n. Yep, I'm looking for help with the docs: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/84\nBut for now, yea, it's mainly looking at the sample. I don't think it would be that hard to follow the MVC sample and map it to webforms. YMMV\n. It takes time to write docs. I (and perhaps others) will get to it, but given that this project is done in my free time I only have so much time to devote to it.\n. I'm going to close this issue since it's a duplicate of the doc issue: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/84\n. If you access the Claims or UserCertificates via the UserAcount Claims or UserCertificates properties they are loaded (albeit lazy-loaded). If you'd prefer eager loading then it's possible to derive and alter how EF is building the SQL.\n. I'm not following... In SignIn it will load the claims (if necessary) to populate the SAM cookie. This is all working properly.\nCan you help me understand your issue better?\n. I don't think I ever had EF lazy loading disabled in the default implementation. Perhaps you had made this change?\n. Not a problem.\n. You can't share the same instance of DbContext across all instances of the repositories because of thread-safety. Each request needs its own private instance of the DbContext -- and this is simply true for any EF + web development. You don't want two requests hitting the same DbContext instance. \n. Well, the per-http request is something that can be done by the DI container -- if you look at the sample it's doing this already with Ninject. Is this what you're looking for?\n. I'd suggest building your own repository (maybe one that even derives and just overrides GetAll()).\n. They're not public because I don't want an application to assign them incorrectly. Yes, EF and other repositories will be setting them when loading from the DB, but I felt like I wanted some level of safety. \n. Because it was moved to the new Ef project.\n. This is because the SAM (the authentication cookie library) uses DPAPI to protect the cookie and this requires a user profile loaded, which you don't have in Azure. So there's an option... oh damn, Chris beat me to it. Ok, see his link.\n. I love an issue opened, 3 posts and closed all with in 6 minutes.\n. Yea @JellyMaster , good point. I think the same could be said for adding requireSsl = false for the SAM config for new folks testing.\n. @HaroonCalculus2013 sounds like you're in azuire web sites which is using DPAPI by default -- you should change the SAM to use the machine key API instead. See this:\nhttp://brockallen.com/2013/02/18/configuring-machine-key-protection-of-session-tokens-in-wif-and-thinktecture-identitymodel/\n. I've never heard of NuoDB, but go for it. If you get something working that you'd like to add to the repo, then I can put it in. I think we might need a separate section for repository implementations/samples.\n. Any progress?\n. For WCF you would just implement a custom UsernamePasswordValidator and configure it in the serviceCredentials/userNameAuthentication configuration element.\n. 1. MR is about managing user identities. How you expose or express those in your application is up to you.\n2. MR provides APIs to manage those identities. You'd need to build the UI.\n3. MR is about managing use identities. Forms authentication is different (perhaps you mean ASP.NET Membership?). Windows and third parties are separate from MR. \nI sense you don't have the right mindset for MR -- MR is about managing a database for you (and related identity functions like password checking, etc). Everything else is outside MR's scope.\n. I suspect you mean MembershipProvider? I supposed you could implement a custom MembershipProvider in terms of MembershipReboot. MembershipProvider is just an abstract base class.\n. MR is about managing a database of identities. Build whatever you want to on top of it.\n. For this I'd suggest using two different MR Configuration instances with different events configured. \n. Yes, fixed. Thanks.\n. I've reworked the design for the repository for specific APIs to load by linked accounts. I don't know if this new design helps raven db. Since the code has changed so much since this PR, I'll close it.\n. I'm more than happy for you to review the NoSql samples and get raven back to a working state with the new design. I don't knwo much about raven, so I'm at a loss to get it working with my recent changes.\n. Not sure what you're running into. But I will say the unit test project is currently quite neglected and out of date (unfortunately).\n. Oh you might just need to enable NuGet package restore in VS. And yes, the test project is not part of the samples. \n. Well, for the time being remove the test project from the solution. I'll try to repo when I get time.\n. Yep, I understand -- it's a huge item on my TODO list.\n. Closing this issue since this one is already open: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/25\n. MR keeps claims in two places: one is a collection on the user account and another is a collection on the linked account. So for external identity providers, the linked account has the ability to store those claims from the external provider. That was a round about way of saying \"yes'.\n. So why are you using MR anyway? If all you need is the storage of claims from some IdP then just store them in your own DB table.\n. Well it does sound like MR has many things you want. So back to your first question -- do you have to create those accounts up front? Not necessarily -- look into the AuthenticationService API that does external authentication. You can build your own helper that's similar to do your own logins from external IdPs and build your own logic about creating the accounts on demand.\n. Sure, do it however it works for you :) \nOh you might want to change the password hashing iterations then so it doesn't take so long (and since you're not using MR for passwords).\nG'dluck.\n. Excellent question. And I don't have an answer. :)\nLet me take a look and see what makes sense.\n. Go for it.\n. Thinking more about this, I think it might be best to leave the API the way it is (and perhaps this is why I never added an UpdateClaim method). The main reason is that it's possible to have many claims of the same type, so a hypothetical AddOrUpdateClaim -- would it remove all of the existing claims of the type? If not, then you need to pass in the old value as well as the new value to ensure you match the correct claim.\n. Yea, that looks close to what I would have suggested. But given my prior comment, this makes me a bit uneasy. Thx for the code snippet.\n. A couple of points -- this sounds more like a ef/migrations issue than an issue with MR. Also, I removed the migrations some time ago from MR because I was finding that migrations are too painful to keep up. In other words, I am leaving that up to the consumer of this library.\n. I can open it up if you'd like -- what's your use case?\n. Ah ok. \n. Ok, I went to go open this up and noticed that it's already open. What else do you need/want public?\n. @jzinedine can you comment further? if not, i'd like to close this.\n. Ok, EF6 added.\n. I can look into this. What DB are you using? SqlServer or Azure or SqlCompact?\n. When do you see this error/problem? Is it when the DB is created? What database? I just ran with SqlCE, SqlServer and SqlAzure and none of them gave me any errors like this.\n. @jlsfernandez Do you have any more info that can help me reproduce your error? If not, I plan to close this issue.\n. Ok, if this is still an issue or you are able to tell me what steps to repro, please reopen.\n. Yea, the groups feature is still somewhat a work in progress. It's meant to just be a place to store groups. MR doesn't do any sort of authorization.\n. Maybe this logic should be in your login UI code or in some abstraction used by the UI code that then knows how to sort out which source to check for validating credentials.\n. I think we now have this.\n. My mistake -- you're absolutely right. I'll reopen. And if anyone has an implementation they'd like to contribute, by all means, please do.\n-----Original Message-----\nFrom: \"namtih58\" notifications@github.com\nSent: \u200e10/\u200e14/\u200e2013 3:09 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] Nhibernate support/Samples (#123)\nI can only find EF, MongoDb and Raven. Where exactly is the nhibernate \nsurport? \nOn Sun, Oct 13, 2013 at 5:04 PM, Brock Allen notifications@github.comwrote: \n\nI think we now have this. \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/123#issuecomment-26228237 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. BTW, I don't plan to do this myself, so this issue is more of a placeholder for anyone else that wants to contribute a NHibernate sample. \n. So since I don't plan on adding NH sample/support and since this isn't a defect, I'm closing this issue. If you happen to get around to building a sample, I'd be happy for the contribution.\n. EF6 is not out yet, so I've not yet taken that dependency.\n\nAs for the new ASP.NET Identity -- many aspects of it are similar to MembershipReboot. Unfortunately, their first version has very few features. Perhaps in a year they will catch up to what MR has today.\nAs for deriving from UserAccount -- I suppose you can go down that path (others have when they implemented MR with other databases), but that's not how I originally envisioned adding custom data. The claims collection is meant for additional identity data on the UserAccount (like roles/groups). If you have other non-identity data that is more like \"business data\" then I'd suggesting storing that somewhere else. \n. I'd add FirstName and LastName as extension methods that pull from the claims collection.\n. The groups feature in MR supports nesting groups in other groups and then providing a flattened list. \n. Ok, I spent half the day prototyping the pure interface approach. This works for the UserAccount level, but since that class needs child objects (like claims, etc) then those would also need to be interfaces and that causes quite a bit of hassle and I don't think I can pull it off.\nHow about having the user account service be generic and allow for a custom user account class, like such:\nUserAccountService where T : UserAccount, new\nWould that suffice?\n. Ok, time for feedback -- I spent the entire day working on making MR have better support for custom user account classes and for custom properties on the user account class. While I wasn't able to pull off a pure interface based approach, I did end up with an ok approach where it's easy to add custom properties to your own user account table and the user account service is a generic class based upon your custom user account type.\nThis is prototyped on a branch: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco\nThe customization sample is the best example of it in use: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco/samples/CustomizationsSample\nPlease look over this and provide feedback and let me know if you think this is a move in the right direction and if it satisfies your requirements. Thanks! \n. Ok, I'll close this now given that the rework is mostly done. \n. @drewid i forget if you were using NHibernate or not, but in the v5 release i reworked quite a bit and removed the key material from the main entity classes. Also, it's easier to now derive from UserAccount. These two changes mean than you can derive and add an integer PK, assuming your DB layer allows you to designate a primary key in code. See the updated customization sample for an example of this.\n. The role APIs are about role metadata, not assigning users into roles. If you want a user in a role, then add it as a claim to that user's claims collection.\n. Oh I missed the part of the question about roles inside of other roles. Well, if you need/want that sort of feature then I'd suggest doing this mapping in a custom claims transformer -- WIF supports this already as an extensibility point via the ClaimsAuthenticationManager. MembershipReboot will use any ClaimsAuthenticationManager you have configured with WIF. \nIn short, this is not a feature of MR since it's already a feature of WIF (meaning .NET 4.5).\n. Tokens for Web API is not the realm of MembershipReboot. MR is about managing identities. If you want to do authentication in Web API, then I'd suggest looking into Thinktecture IdentityModel -- it has this feature: http://thinktecture.github.io/Thinktecture.IdentityModel.45/. \nYou could then use IdentityModel for the token processing and MR for the credentials validation. They work well together.\n. I don't know what to say, except that security is hard and perhaps things you've read elsewhere have been misleading, unclear or just incorrect.\nAs for the sample using [Authorization] -- it's not for authentication, it's for authorization (hence the name).\nMR is for managing identities, not for building authorization rules. These identities might not even be owned by any one application and it's usually at the application level where authorization rules are maintained and enforced.\nIf you want to add more schema for supporting authorization rules, then feel free -- it's open source.\n. Answered here: https://github.com/thinktecture/Thinktecture.IdentityServer.v2/issues/452\n. Yep, this is a bug. Thanks.\n. Fixed: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/b0499c7b17370315a5290bb0812911af3eaf42b8\n. You should configure custom mappings in the EF project. Look in the EF documentation for how to do this.\n. There's one main model -- UserAccount. EF then gens tables form this class and all its children.\n. Roles and Profile data can be added to the UserAccount claims collection. If that doesn't work, then you'd need to create your own userAccount-derived class and implement your own IUserAccountRepository.\n. Done.\n. Done.\n. I'm need to think about what to include. But yes, I'll get to this in the next 48 hours.\nAs for Mongo/Raven -- I don't know those engines well enough to evaluate the code quality or know the right API packaging.\n. Just as a heads up -- I think I'm going to hold off on this for the time being. You can upgrade the hosting app to EF6 and MR will still work -- I just tested it.\n. Yep, you guys are right -- my test from above was flawed. This is on my TODO, so don't worry.\n. Status is soon. Maybe later today, but no later than tomorrow. \n. Done. See this: https://github.com/brockallen/BrockAllen.MembershipReboot/releases/tag/v4.0.0\n. Done: https://github.com/brockallen/BrockAllen.MembershipReboot/releases/tag/v4.0.0\n. You can replace the email notification system. Read these wiki entries and then look at this sample and then let me know if it helps (or not).\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Account-Events\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/tree/master/samples/CustomizationsSample\n. Please, discuss.\nWould you want the pocos as a base class or an interface?\n-----Original Message-----\nFrom: \"Richard Bennett\" notifications@github.com\nSent: \u200e10/\u200e26/\u200e2013 6:51 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: [BrockAllen.MembershipReboot] Convert objects to be pure POCO (#135)\nJust wondering if we could discuss the option to roll the objects to be purely poco... Tried to use NHibernate from the compiled *.dll, and since the objects don't override equals (maybe implement IEquatable()), NHibernate puked.\nRolled over to Entity Framework using the fluent mapping stuff, and I think I still need to run the mapping for the base models within the membership reboot dll.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, time for feedback -- I spent the entire day working on making MR have better support for custom user account classes and for custom properties on the user account class. While I wasn't able to pull off a pure interface based approach, I did end up with an ok approach where it's easy to add custom properties to your own user account table and the user account service is a generic class based upon your custom user account type.\nThis is prototyped on a branch: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco\nThe customization sample is the best example of it in use: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco/samples/CustomizationsSample\nPlease look over this and provide feedback and let me know if you think this is a move in the right direction and if it satisfies your requirements. Thanks! \n. Yes, if you look at the code under v5 the class you use is now a generic parameter and thus you can do whatever concrete class you want/need.\n. @calebkiage yea, this has been another idea i've been toying with -- having interfaces to model the different \"sections\" of feature for MR -- 2fa for example. if you don't need it, then your user account class can not implement the interface. i'm back home end of this week, so i'll be trying to finish up all these recent changes i've been making.\n. Yep, I think that's a good idea. I've been traveling so I won't get back until tomorrow -- so please be patient while I get thru my backlog over the next few days.\n. Ok, this major rework has been checked in and all the samples now build. The customization sample shows how to defined your own UserAccount-derived class.\n. @calebkiage Yea, I can look into those -- open a new issue so we can track it.\n. @UkraineTrain yes, IdentityServer (intentionally) doesn't provide user management features and this would be up to you, depending upon how you manage your users.\n. It's basically here: http://brockallen.com/2014/04/09/introducing-thinktecture-identitymanager/\n. Well, if the users are already in AD, then you'd not be using many of the features of MR. It just sounds like to me you need a custom database for your data.\n. Well, I suppose you could. \n. Well, the reason I wasn't able to help you is that MembershipReboot is an identity management library and you're using AD for that. Also you're looking for other things beyond what MR does. Sorry.\n. Correct, there's no password validation of any significance in MR, but you can easily plug in your own via the RegisterPasswordValidator API on the MembershipRebootConfiguration. See the CustomizationsSample for an example.\n. Oh I wonder if you're not using SSL with the SAM?\n. So I'm wondering if you're not getting your claims because you're not using SSL. Let me check if that flag is configured in the sample.\n. Hmm, the sample has <cookieHandler requireSsl=\"false\" />, so this should not be an issue.\n. Hmm, sounds like you had lazy loading disabled. You were using EF, right?\n. Ok, glad you got it figured out.\n. Done: reworked MembershipRebootConfiguration to have a copy of the values from SecuritySettings. \n. Emailing the user a password is a bad idea -- they'll use their email as password storage and will never be forced to change it. I don't plan on implementing this -- sorry.\n. Yea, this is already a TODO. See this one: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/130\nBasically MR does need to support some way of supporting admin created accounts. \n. So perhaps you could use the existing password reset APIs with a custom event handler to send a specially worded email that allows them to get sent to what would normally be the password reset screen, but in your system it appears as a \"complete you account creation\" screen where they enter a password. IOW, i think this flow can be accommodated with the current extensibility points without adding additional complexity to the system. give it a try and let me know if this approach works. \n. BTW, I spent some more time thinking about this, and an admin-created account without a password of any sort is not a good idea. It's possible that the admin enters the wrong email, and an email verification token by itself is dangerous to verify the account. You need the email verification token and some sort of password (even if it's the user's last name, their last 4 of social, whatever). This prevents admins from making mistakes.\nI had this on my internal TODO for a while, but having said all of this, I decided I won't be trying to support this scenario given that I think it's a bad security practice.\n. Yes, I've been trying to support that scenario. What exactly were you looking for? I still think it makes sense for an admin-created account top set some sort of initial password. This prevents mistakes (email typo, for example).\n. Yea... but in this scenario last name is safe-ish since it's a corp environment. Also, you can also use the \"must change password\" flag that's now in the DB. \nSo, just so I'm clear -- you're happy? Or is there still a missing feature?\n. Something like an invitation code you might need to build yourself. Then once the user has arrived via the code you can walk them thru the account creation process, and since you're confident that they are in control of the email that you sent the code to, I'd say you can mark the email as verified.\n. Excellent point. I'll consider it a bug and see what I can do to fix it.\n. Ok, I just fixed this with this checkin: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/f63d8f83f265238ba333948b4f679903db5e1416\nTest it and let me know if it solves your problem.\n. I didn't update nuget with this change, so you'd have to test with the code from github.\n-Brock \n-----Original Message-----\nFrom: \"martyt\" notifications@github.com\nSent: \u200e11/\u200e11/\u200e2013 12:28 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] Authenticate with unknown TenantID(#142)\nDoesn't seem to be working. If I call UserAccountService.Authenticate() with no tenant, it returns false. There is no attempt to go the user repository, so it's short-circuiting somewhere. Haven't had time to pull down the source and step through it.\n\u2014\nReply to this email directly or view it on GitHub.\n. So is it now working? If so, then I'll push an update to NuGet.\n. Ok, thanks for the update.\n. I'm working on v5 -- will get released this week sometime (end of week, prolly).\n. This is a tricky problem to solve. You need something from the HTTP request to distinguish the two categories of users (URL, IP address, etc). \n. Well, my point was that you would have to determine what distinguishes the different types of users. I don't know your environment. Since this isn't an issue per se with MR, I'm going to close this.\n. You can register a claims authentication manager with WIF and that will be used to provide claims transformation.\n. Here's a sample of the repositories needed for IdentityServer that use MR: https://github.com/thinktecture/Thinktecture.IdentityServer.v2/tree/master/samples/MembershipRebootUserRepository\n. Nope, I never coded anything like that. I don't think it'd be hard to do, though.\n. Ok, good ideas. I'll put it on my TODO list, but I can't promise it'll be done soon. \n. So I've started looking into this for you. What scenario is this being used in -- by an admin or the end user? Reason being, I'm having a hard time with the password -- if this is an admin reopening, then I think we need to set a new password since the user might have forgotten it. If this is a user driven re-open, then I want to require the password to reopen the account. But again, bootstrapping -- if they've forgotten the password then we have a problem. \nAlso, if the user has no email, then I don't see how we can reopen the account at all, because there's no way to verify their request.\n. Part of the issue here is that the act of reopening the account means that the account goes into an unverified state while we're waiting for the email token to be verified (at least this approach requires the fewest changes to the current code and I don't want to overhaul the system just for reopening accounts).\nOk, so I think what I'll do is add two versions: One API to allow an end user to reopen their own account where they must enter their current password (and if they've forgotten they can always use password reset, even if account is closed which works today). The other API to allow an admin to just indicate the account ID and the assumption is the user remembers their own password. Once they do this, then if they don't know the password then an admin can always be used to explicitly set a password. Also, any UI you build to allow an admin to reset the password could also explicitly set the password first to some known value (like user's last 4 of SSN or last name or whatever) before the reopen is issued.\n. Ok, added here: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/0ac318371680ea3a32aea45e079f9e300cde650b\nLet me know how it works for you.\n. The \"config\" variable would then be passed to the UserAccountService ctor (in addition to the repository).\nIf you're not using DI, then you'd just need a helper API to create the config and service and you could use that from your WebForms code.\nHTH\n. Re: IMembershipRebootConfiguration -- you might be on an old version. \nAs for the multi-lingual, you'd need to use something dynamic then in your DI container, rather than a static mapping. Again, this is more of a DI concern.\n. I think you're accidentally triggering simple membership -- try to disable it with this .config:\n<appSettings>\n    <add key=\"enableSimpleMembership\" value=\"false\"/>\n</appSettings>\n. If you have a reference to it, it will just run.\n. @justSteve yep, sounds like it\n. @samsal123 let me know if this is solved so i can close the issue.\n. What do you mean, specifically? MR isn't responsible for the login redirects -- that's the job of the cookie library (WIF/SAM or OWIN cookie middleware).\n. Ah yes, I see. Good point -- the OWIN API I have right now for configuring MR's cookie stuff isn't ideal. Let me think about a better approach.\n. Ok, the OWIN APIs now accept a CookieAuthenticationOptions so you can use the redirect feature.\n. Yep, I'm aware of this. Just submit a pull request.\n. ok, i upgraded the sample projects to localdb.\n. Just checked in something like this int eh past week. I don't know if this is what you're looking for:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/e42c241ea65c0ff40a0378759c7c7c64f8142725\n. Ok, I'll take a look at this when I get back to MR issues (later this week).\n. The way the API is now requires you to derive -- is this still not sufficient?\n. Ok, nevermind -- I added a ctor where you pass the base url param.\n. This should be possible, but I don't have any samples right now.\n. @SovietSam yep, it's still on my radar. \n. @SovietSam  would this approach as described in this comment work for you? https://github.com/brockallen/BrockAllen.MembershipReboot/issues/94#issuecomment-22674142\n. Ok, time for feedback -- I spent the entire day working on making MR have better support for custom user account classes and for custom properties on the user account class. While I wasn't able to pull off a pure interface based approach, I did end up with an ok approach where it's easy to add custom properties to your own user account table and the user account service is a generic class based upon your custom user account type.\nThis is prototyped on a branch: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco\nThe customization sample is the best example of it in use: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/poco/samples/CustomizationsSample\nPlease look over this and provide feedback and let me know if you think this is a move in the right direction and if it satisfies your requirements. Thanks! \n. Ok, thanks for taking the time to look and give some feedback. I've been working all week on this branch and so this will be the design going forward, I think.\n. Ok, closing this now.\n. Is this something than can/should be done in the MR EF code, you think? I'll reopen until I have time to investigate. Thanks for the info.\n. @drewid -- i added back migrations to the ef project (mainly because msft doesn't support sql compact anymore, so there's only one flavor to support). mind looking at them and seeing if they have the indexes you/azure needs?\n. Ok, I think all the rework I've done recently addresses this. If not, please re-open.\n. Have you tested with the latest source from github?\n. Ok, this thread has gotten past me and I'd like to sort out the problem. I've been making many changes recently to the codebase -- can you @drewid let me know if the latest changes work for you? I changed some of the columns to be a bit shorter given this feedback and I think it'll fit within those azure constraints. Thx.\n. Ok, @drewid , I'll close this for now then. Like I said, with the latest code I reduced the width of some of those columns and I think it's within the constraints. If you ever upgrade to the latest code and run into the issue again, open a new issue. Thanks.\n. this requires the POCO refactor so that all the code is pushed into the user account service\n. Done.\n. yes, i could add resx files for this.\n. Ok, done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/546f6c483de012c248c981b4f03aad96afe1ec77\n. De rien\n. If I were to do this, it would most likely be done as a new DNX style project with a major version change (which is a breaking change).\n. Perhaps...\n. So you want an option account by account?\n. Ok, I guess I'm confused. Maybe you've not seen the SecuritySettings AllowAccountDeletion property? If this is true, then when you \"Close\" an account then it gets deleted. If this is false then when you \"Close\" an account it gets marked as logically closed, but the record is preserved.\nIs this what you are looking for?\n. I see... well, you can always create a new security settings and then pass it into a new user account service with different settings for each button.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. I'm running on the latest and just tested it and it's working.\nAre you running with a version from NuGet or the samples or your own custom copy of the code? You need to make sure there's an event handler registered for those events (password reset). \n. Ok, I'll look into the latest not compiling -- I've been doing a lot of changes over the past few days (I suspect it's some NuGet issue).\nAs for the email -- did you comment out the line in ~/App_Start/MembershipRebootConfig.cs did you uncomment the lines that add the EmailAccountCreatedEventHandler and/or EmailAccountEventsHandler handler classes?\n. If you're doing federation, then there's little need for MR in the RP. MR is best for identity management & authentication, so you'd use MR inside of your STS (IdentityServer).\nFor the \"identity management\" in the RP, what features from MR would you need? Storing claims is something you can do with any old database (there's no real effort), so all you need is a database, right? \n. Ok, well that's cool if you need all those feature -- then MR has them.\nSo yea (from the bits I understand from what you're saying), then I'd put MR into your STS (and not as a separate app). \n. Did you register an event handler for emails like the single tenant sample does in the mr configuration?\n-Brock \n-----Original Message-----\nFrom: \"asadsa\" notifications@github.com\nSent: \u200e11/\u200e29/\u200e2013 3:31 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: [BrockAllen.MembershipReboot] When verification email send? (#161)\nI integrate BR with Thinktecture Identity server V2 , all things is work fine , but not receive any email for verification. Where the verivifaction send so i trace it?\n\u2014\nReply to this email directly or view it on GitHub.\n. Look in app_start folder in web project.\n-Brock \n-----Original Message-----\nFrom: \"asadsa\" notifications@github.com\nSent: \u200e11/\u200e29/\u200e2013 4:26 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] When verification email send?(#161)\nCan point me where is the evet registration?\n\u2014\nReply to this email directly or view it on GitHub.\n. It sounds as if you've never opened the single tenant sample -- you should do this to get a better understanding on how to configure MR.\n. Are you using the latest version of NuGet (v2.7)? That's required for the automatic download of missing packages.\n. There's no official support for SMS. In the sample there's a hacked up event handler that uses twilio, so you can use/modify that one if you want.\n. Since you got email working, i'll close this thread.\n. Not a bad idea, but the built-in notification system is minimal and is meant to be more of an example. \n. You'd have to build this yourself on top of MR (presumably via a web api).\n. If you'd like to, sure. If you can think of a better model for localization then I'm willing to discuss.\n. You can email me, or do a pull request here on github. Make sure you've translated the latest .resx -- thanks.\n. ok i added what you sent me. check in the main branch if there are any missing items\n. thanks for the kudos :)\n1 -- Depends what you need to do, I suppose. The main way to extend MR is to register event handlers for the various events that are raised. Check the Customization sample to get an idea of this. If that's not sufficient, then you can derive and override the various methods, but that's more for changing the behavior, rather than just adding behavior (if that makes sense).\n2 -- Again, see the customization sample. But you can always modify the source (it's open source, after all).\n3 -- Wait for v5. It will be done/official soon -- just busy this week. :)\nAs for accessing these properties, I'll leave this issue open as a reminder to think about that again. As other issues have mentioned, I didn't want to encourage app level code from \"mucking\" with the properties. Anyway, I'll think about it.\n. v5 is mostly done now. A few more tweaks here & there, but I think it's pretty stable now.\n. You can take the source-code approach,. but I'll also be releasing NuGet packages as well.\n. Ok, as I mentioned in another issue I'm still working on v5 so I'll try to think about this request and see what I can do to help this sort of scenario.\n. Ok, got back to thinking about this issue. I think what needs to be done is some API on the group service for unwinding the nested groups. I meant to do this, but got side tracked and never really completed the groups implementation.\n. Well, I did it that way because SCIM allows for it and I was trying to target SCIM. I'll be back on this later today, so I'll think about it some and get back to you.\n. I'm sorry, @keithharvey, I'm confused. You're trying to derive from the Group class?\n. Do you have a public repo so I can see what you're trying to do?\n. Ok, hold off for now -- I'm busy on other parts of MR right now anyway.\nAlso, FWIW, I updated the group service API to prevent recursion. I don't know if this was getting in your way.\n. Yep I hear ya.. I'm in the middle of some rework. Will be back on it after weekend\n-Brock \n-----Original Message-----\nFrom: \"martyt\" notifications@github.com\nSent: \u200e12/\u200e5/\u200e2013 4:22 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: Re: [BrockAllen.MembershipReboot] UserAccount.AddClaim() and.GetClaimValue() ??  (#167)\nAnd FYI the current Samples solution won't build either for the same reason (plus a few more). \n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, the read APIs for claims are back. But the write APIs are all now moved to the authentication service class given the recent rework/reorg. I hope this doesn't cause too many headaches.\n. Re-open if this causes you major problems so we can discuss.\n. Yes, sorry -- I meant UserAccountService.\n. This property is being removed in v5. I've not yet gotten to update the OWIN projects for the recent updates (I'm working on it this week).\n. This has been fixed in all the recent work I've been doing.\n. Yep, all fixed now.\n. Yep, all fixed now -- I've been making some changes (shame on me for doing it on the main branch). Thx.\n. Ok, I added a persistent flag to the SignIn APIs. The cookie lifetime is controlled via the SAM config:\n<cookieHandler requireSsl=\"false\" persistentSessionLifetime=\"30:00:00\" />\n. Are you using SSL? The cookie has the secure flag set by default.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Does the MySql provider support IQueryable?\n. I understand the issues with IQueryable, but don't have a great solution right now. The original audience was EF and NoSql (which most support iQueryable), but if more people want other databases, then we can consider changing this.\nAre you looking to use a custom database?\n. Ah ok. Hmm, let me think about this for a bit and see if I can come up with something.\n. Sure -- I'd be happy to see it.\n. As I mentioned on the PR, I've reworked many things in the past week related to the entities and repository -- please check the latest code and let me know if it works for your scenarios or if there are other issues. I'll close this issue -- open a new one if needed.\n. This is a common request and I'm working on allowing an easy way to override the PK for the UserAccount table for v5. Soon :)\n. I've pushed many changes in the past week related to this. Check the latest code and let me know if the redesign works for you or not. I'll close this issue for now -- open a new one if you have any problems. Thx,.\n. Also, BTW, you can always change the key material (ID) in the repository Add API. \n. ok, thx. i'll look at it later today.\n. I used your PR as inspiration for my most recent changes. Please have a look and see if it satisfies your needs.\n. As stated in the open issue -- open a new issue if you have issues with the latest design.\n. Sorry -- I'm still in the middle of v5 rework and I know I shouldn't be doing it in the main branch, but it's too late :)\nAnyway, I keep changing my mind on how I want to do the DB work. I have several requests for non-EF relations DBs as well as requests for non-GUID primary keys, so I'm trying to work thru all of those requests and come up with a flexible approach for most, if not all, scenarios. \nAnyway, hold tight -- I am working on this today and tomorrow, so I hope to have a solution soon.\n. Yep -- Still working. I put them back because I made a big mistake for the EF scenario. I'm still re-working this, but I'm trying to be as mindful of EF table backwards comparability. Once I'm done, I'll make a blog post and will update the release. But again, soon -- I need to get this sorted out by end of this week.\n. Ok, I pushed many changes related to the rework to support both relational and hierarchical and to allow for custom properties and non-guid primary keys. These changes are breaking changes. See if the recent code addresses your needs and if not, let me know.\n. Are they marked as virtual?\n. Ok, see this thread for an approach to address the problem: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/199\n. Yep, bug from the recent changes. Check the latest code and see if it's better.\n. The sample doesn't configure a password since it's up to you to setup your own account. If you don't want SMTP, then don't use the SmtpMessageDelivery and configure your own IMessageDelivery using DI.\n. I'm still a little confused. The sample code is just that -- a sample. It's intended to give you an idea on how sending mails could work. You can always build your own messaging system to send emails instead. HTH\n. Yes, I looked at your code from the Azure PR and I agree -- your exception handling was a good idea. I just added it:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/0600bb5ad5a9ff1dcc3c68058b26be654d903f63\n. Yep, that's a bug in the recent rework\n I'll have am update later today.\n-Brock \n-----Original Message-----\nFrom: \"Damiano\" notifications@github.com\nSent: \u200e12/\u200e18/\u200e2013 11:06 AM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: [BrockAllen.MembershipReboot] linked.Claims.Clear() (#181)\nIn external login first time I register with external login (facebook). When after close and login for the second time with external provider I get this error:\nA relationship from the 'LinkedAccount_Claims' AssociationSet is in the 'Deleted' state. Given multiplicity constraints, a corresponding 'LinkedAccount_Claims_Target' must also in the 'Deleted' state.\n\u2014\nReply to this email directly or view it on GitHub.\n. There has been much work in the past week on redesigning the database entities. Please check the latest code for updates.\n. If you don't like the logic for the first login from an external provider, you can build your own. In other words, you don't have to use the SignInWithLinkedAccount API.\n. The latest code allows for a user account to not have a password. Re-test with the latest code, please.\n. I think too many things have changed since this RP -- and I still am unclear on what it's doing. I'll close -- open a new issue if you want to discuss.\n. Internally in MR when something interesting happens it adds an event object specific to the type of event to an internal queue. When the user account is updated to the database MR runs thru that queue and will \"raise\" the event with any registered event listeners for the event type. So, I suspect in your case you do not have the EmailAccountEventsHandler registered on the MembershipRebootConfiguration in ~/App_Start/MembershipRebootConfiguration.cs.\n. Hmm, check that the file is marked as an embedded resource in VS. I assume you didn't change anything in the files?\n. Also, is it just the username event or all events?\n. Just tested sending username reminder and it seems to be working fine for me.\n. Any progress?\n. Yes, I think this is a bug in the most recent code. I'll look into it.\n. Ok, I just tested with the latest code and an empty database and this is working correctly. \n. Ah good point -- let me look into that.\n. Ok, see if this commit fixes it for you: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/33714f963958158ecbae7fe6e03c9091d9ae65ec\n. Yes, I'm sure that sample is now out of date. I'll update it once I release MR v5 (today or this weekend).\n. None yet.\n. Yes, that's a change in v5 that I need to figure out.\n. Ok, I've added query interfaces for v6. No release to NuGet yet, but I'll update the IdSrv sample soon.\n. Ok, I updated the sample against the latest here on github (since I've not pushed a v6 for MR on NuGet).\n. Yes, I have to work on migrations today -- I removed them temporarily because there were causing me problems with all this rework.\n. Ok, I added my v5 migrations back in. I still don't know what the azure issue is, but I think I'm finally done with all the major changes I've been making to the entity classes.\n. Yes, I'm aware the InitialCreate migration has the index length exceeded problem. In v5 I reduced the column widths and I thought it brought it below the limits -- was I wrong?\n. Ok, I looked at the pull request -- I can't accept it because it's huge and not focused. I did look at the Azure migrations you added and I also am not sure if I can accept that because it's a brand new migration -- it doesn't migrate from the v4 database. \nSo to fix the azure issue, I'll try to setup MR v4 on Azure and then I'll run the v5 migration and try to reproduce the problem.\n. Ok, I see the problem. I don't know how to change that existing column size from migrations -- do you?\n. This doesn't seem to work, as far as I can tell. It fails on the DropPrimaryKey(\"dbo.LinkedAccountClaims\") which is before the fake PK you add.\n. I think the solution will be create a temp table with the correct column sizes, copy the data over, drop the old table and rename the new table. sigh\n. Ok, I just updated the v5 migration to take a different approach to the schema change. Take a look at the latest code and see if it works for you.\n. @dandresini FYI - there was a slight bug -- i forgot to add the cascade on the FK config. i updated the code and pushed a new nuget (v5.0.2 in the EF assembly)\n. and password, i assume?\n. It's a big change. I don't have the cycles right now to think about the ramifications.\n. There are two issues here: 1) mobile phone for username, and 2) username validation.\nFor (1) I mentioned above that it's an interesting idea, but I don't have the time right now. If someone feels they're up to that challenge, go ahead and we can discuss and then do a PR.\nFor (2), I didn't want usernames like \"\\$%\". I don't see much benefit in usernames like that and there are ways that might be used against a novice website developer. If there's something specific that you need allow for username, please open a new issue (I don't want the two threads to get polluted with mixed topics).\n. So now that usernames can contain all digits, does this allow for MR to be used in an app where the username is the mobile phone? I could see a custom app building a AccountCreatedEvent event handler to then call ChangeMobilePhoneRequest to verify it. \n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. This is up to the external identity provider how they manage allowing you to login with multiple accounts at the same time. Google does this well -- got o goole and in the top right corner click your account icon and choose \"Add Account\" and then you can have both at the same time. I don't know if facebook supports this.\n. Yep, looks like it got deleted somehow -- will add back in and re-release. Thx for the heads up.\n. fixed and pushed (both github and nuget)\n. I'd suggest going down the path of having a custom UserAccount class with whatever additional properties you need (like this sent column). And then, you can hook into the eventing system for the events that matter to you to do your additional customizations -- this way you will be extending the system without changing the code. I'd love to hear hiw this approach works for you, and if not what changes to the core can help with this approach to customization. My goal is to allow this style of customization without the need to change the code code itself.\nLook at the customization sample for more info.\nFinally, if you really need to, then you can derive from the UserAccountService and override any of the base class methods. Personally, I'd prefer you to do the first approach I suggested if that works, but this second approach is if you really need to change something about the internals.\nAgain, let me know your progress and I'd be happy to help change the core extensibility model if it makes sense and helps support your customization requirements.\n. I prototyped it and it requires the PK type to ripple thru all the class definitions such that we'd end up with UserAccountService<TAccount, TKey>, IValidator<TAccount, TKey>, MembershipRebootConfiguration<TAccount, TKey>, etc. etc. and I really didn't like how that felt.\nWhat are you trying to do or achieve?\n. The system is designed to need the GUID for lookups. If you want a PK other than GUID, that's ok, but the GUID is still needed and you will probably want an index on that column.\n. @drewid With v5 this shouldn't be necessary.\n. Look at the customizations sample (under the v5.0.0 label). It defines a custom user account class that uses an int primary key. All the other child tables necessary for MR use that int as their FK. And then of course you could build any other tables you needed in your app that reference the user account table by the int PK. This was one of the major features in this v5 release. \nPlease let me know ASAP if it doesn't achieve what you were looking for (as I did spend a bunch of time on it).\n. @drewid did you look at the customizations sample?\n. I'll close this now. If you have other problems/questions, open new issues please. Thx.\n. added here: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/a715055101605088fb186a4963b377da6467e484\n. added here: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/6915bd36a3fe1b9ee1dd034c2369118d5d5c61fe\nnow consumers can register a ICommandHandler<GetValidationMessage> to replace the built in validation messages\n. Yes, all of the public APIs that were previously on the UserAccount class are now on the UserAccountService.\n. {confirmVerificationUrl} was removed in v5 -- we just use the {confirmChangeEmail}\n. Well, in the event you can see if the account is new with the IsNew() extension method and dynamically change your code. You can always put in your own URLs in the email and have a custom endpoint that deals with new accounts vs. change email requests. \nThis was changed because the code inside of MR for account verification is essentially the same as the code for email verification, so it made no sense to have two APIs that did the same thing. I can understand your account wanting different behavior, but there's enough extensibility in the API to be able for your app to customize itself.\n. If you want an int PK then look at the customizations sample, but the guid is still needed and so you'd want an index on that column.\n. I guess I'm not following 100% -- do you have the smallest sample that illustrates the problem (perhaps even in a console app)? Or perhaps a PR on the SingleTenant or Customization sample that shows the problem?\n. Ok, so then the same answer applies :)\n. Hmm, well, you could implement the repository to do eager loading?\n. This was always what the cancel verification was doing -- in essence it's meant to allow the person who owns the real email to say \"no that wasn't me who signed up\" so it allows the account to be removed from the system (assuming no one ever verified the account and logged in).\n. As yes, ok, I see -- yes, the email change request shouldn't have the cancel link in it.\n. Or... I guess we could modify the \"cancel\" API on the user account service to simply cancel the current request and \"do the right thing\".\n. Actually, I think that's what I'll do -- I'll change the CancelNewAccount to CancelVerification -- any objections?\n. See if this works for you: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/ac0a0ef8240e2737daa26e0965f44be7c7fe13a8\n. Nope, but if you put one together we can put it into the NoSql samples. :)\n. Yes, you're right and I was aware of this. Given that 1) Mongo is a sample and 2) I don't know much about Mongo, I'd love some help to debug/diagnose if you have the expertise. If you don't, no worries -- it's on my TODO list.\n. If you have a fork on your github account then I can do the merge. Or you can just do a pull request from your fork/branch to this one.\n. Hmm, then i guess you don't have the <smtp> config setup? Also if you run in the debugger and there's an exception sending emails you'll see it in the output window.\n. Ok, I found the email issue. I'll work on it now.\n. Yea, it's now fixed -- I just pushed the code. It has to do with the internal event bus and the user account class being used. Unfortunately it does a strict type match for the EventHandler<T> type, so the \"UserAccount\" convenience helpers aren't type compatible with any different types (Hierarchical in this case).\nGrab the latest code and check to see if it works for you, please.\n. No, thank you for helping to push the Mongo sample to a working state!\n. I didn't check -- did your NH sample include the groups tables or is this issue still holing you up?\n. Also, can you elaborate on specifically what you need? Are you looking for the ICollection to be changed to IEnumerable with Add/Remove APIs?\n. Ok, sorry - I should have looked closer at the NH code. I see, I think the IEnumeable and Add/Remove APIs is what you're looking for.\n. Yep. I'm working on it.\n. Ok, I've added it. The one last thing is that I left a GetAll API on the repository -- any comments on that API or would you like to see a separate IGroupQuery like I recently did for IUserAccountQuery?\n. Yep -- I forgot to leave those protected -- thanks.\n. Ok, I added the group query interface and did my best to update the NHibernate sample but I can't seem to get the DI right with it -- mind looking at it, @calebkiage? Thanks.\n. Merged in -- thanks for the sample!\n. @calebkiage so we came across an issue related to case insensitive string comparisons. The solution was here: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/288\nBut I notice this breaks the NHibernate sample. Any suggestions?\n. Thanks, keep me posted. \nI thought that maybe adding a flag to the Queryable repo base class might help, but when I tested it on SQL Lite, it seems the DB itself still does case sensitive comparisons so this idea doesn't work because the library needs to ensure correctness (so we don't have duplicate usernames or emails in the DB that differ only by case).\nThx.\n. Yep, the NoSql samples need some love right now: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/203\nAs for IdentityServer and AuthorizationServer -- they don't support NoSql -- they require EF.\n. Ok, the raven sample is working again.\n. I'll close this for now since it's got many issues referenced. Open a new issue if you have more questions. Thx.\n. Thanks for fixing this! Also, make sure you get the latest changes -- I updated the nosql samples for some recent updates\n. @AlonCG, open a new issue to discuss if you're having a problem getting something to work.\n. Ok, I decided to keep the validation APIs the way there are to reduce the churn.\n. thx\n. @swellfr Yep, I see what you're saying and I think I agree with you. Let me think about moving the IsLoginAllowed check out to the calling function -- I want to spend the time to make sure I'm not opening anything else up.\n. @swellfr see if this checkin works for you: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/432e1dda0012473dbc8718b22a1f84e9ab8af667\n. Np. thanks.\n. I just tested the NoSql sample (with Mongo) and it sends emails fine.\nThe event bus does exact type checking when raising events, so for example, any IEventHandler<Event<Type>> needs to match the exact type you're using in your MembershipRebootConfiguration<Type> and UserAccountService<Type>. Perhaps you have some type mismatches?\n. Yea, the Raven sample also works for me. \n. Any luck?\n. Ok, keep me posted. Thx.\n. IUserAccountQuery is somewhat new -- if your controllers don't use it, then no it's not needed.\n. So what was the solution?\n. These sound more like Nancy questions (and are unrelated to MR). I don't have any suggestions for these.\n. Yep, good catch. I added order by and that logic is replaceable.\n. Hmm, odd. Maybe I didn't update something on NuGet properly?\n. I'll close this since I think you're all set now.\n. The reason the OwinApplicationInformation needs the environment is because it uses the request to determine the full URL for URLs to put into the emails. You don't have to use the OwinApplicationInformation and can implement your own app info derived class, but that would require the full URls to be known at compile time (or loaded from config). So a custom implementation would work if you only wanted to create the config once. This would certainly be ideal, but it's a trade off.\nUnless someone knows how to get the hosting app's base URL from the IAppBuilder? I was not able to find anything.\n. Another idea could be to create other an Owin specific EmailAccountEventsHandler derived class that uses a delegate to the current environment. It'd allow for all the other MR config to be global.\n. Any thoughts on this @echo1?\n. Ok, I think I've come up with a solution -- I'll be adding it in today.\n. So what if we stick an entry for the hosting URL into the IAppBuilder.Properties? Then the OwinApplicationInformation can pull form there. We'd have a MW set it based upon the request if it's not set. Feels hacky, but there's a lot of katana that works that way :)\n. Ok, take a look at this and see if you think it's better: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/ebd018984f9ef770bbc42930f54a62cd93fb7519\n. Also, I just pushed a change to improve all the owin context dependencies. It's still rough -- I need to clean some of it up, but I think it's the right direction.\n. Have you had a chance to look at the latest Owin sample? Like I said, I'm pretty happy with the solution. \n. MR doesn't have anything specific to any 3rd party external provider. The sample is using this project (https://github.com/brockallen/BrockAllen.OAuth2), but you can use any library you want to do external authentication. \n. Fixed: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/e7a25b50e02c2c1106de232aa3cc888bf3ed7977\nthanks.\n. If you want to build this out and submit a PR, go ahead. The email plumbing wasn't meant to be a core feature, and the current official way to replace emails would be to build your own IEventhandler<TAccount>.\n. So forgetting abort mobile phone usernames, is a username of \"111\" meaningful?\n. Yea, ok... I guess I can't see anything terribly problematic about it.\n. Ok, done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/3c8eb132af84349daab5327849cc55b7f29f5d4e\n. I might have some sample code somewhere. Let me dig it up and add it to the samples.\n. Actually, so you're looking for an OWIN OAuth2 authorization server middleware sample?\n. Ok, done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/023c631992c000af24993a646cf96be87375caa1\n. @DavidRogersDev Of course. Look into the Cors OWIN middleware.\n. thx\n. My main concern is when the email is being used as username -- the username is at 100 length. I was hesitant to allow the PK column too large. \n. Yes you're absolutely right - that's what I get for working at 11 at night. I'll look at it tomorrow. Thx.\n-Brock \n-----Original Message-----\nFrom: \"Jeremy Cade\" notifications@github.com\nSent: \u200e1/\u200e11/\u200e2014 12:28 AM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] UserAccount model: Username andEmail properties should have a 254 character StringLength annotation. (#224)\nMy understanding from the EF implementation was that the Id property was marked as the primary key?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, I merged in part of the PR. The migration I added to v6. Thanks.\n. Do whatever works :)\n. I think this has already been fixed -- check the latest version in the repo.\n. Yea, I just double checked -- this was already fixed. Thx.\n. RequireAccountverification means \"does a user need to have their email verified before they can login\". \nThe property IsAccountVerified is used to know if the user's email was confirmed. The purpose is for safe password resets - if the email is not verified we're not going to trust it.\nSo, your app can have RequireAccountverification, but users can still verify their email. Once they've verified email, then they can do password resets.\nThe term (and APIs that have the term) \"account verification\" was around before we had mobile phone support, and I didn't want to change it for compat reasons. Since we don't do password resets via mobile, then honoring that setting for mobile doesn't apply. \n. There's certainly a lot more that could be done with the focus on mobile phone, but I don't have the time right now to invest in that direction.\n. Why aren't you using the katana middleware for the social media logins (like facebook)?\n. Ok, I think I see the issue you're hitting. OWIN uses two different MW for normal login vs. external authentication. I'll have to think about that.\n. I just put up a sample for OWIN/SystemWeb + MVC -- it's basically the full single tenant sample but using OWIN. External providers are using Katana's MW and it's working. Here's the checkin: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/3841b00b4c70055e54e593d40cb29df38b4cb31b\n. You don't need to use the authentication service -- you can just do something similar in your own code (or your own logic for mapping to local accounts). This would all be orthogonal to creating a JWT.\n. Hmm, ok, so you basically need a solution to import existing user account data. Let me think about that.\n. What if I alter the CreateAccount API to this signature:\nCreateAccount(string tenant, string username,\n                          string password, string email,\n                          Guid? id = null, DateTime? dateCreated = null)\nWill this support your import scenario?\n. Ok, I pushed this change to master. Open a new issue if there are other things that are blocking your user account import requirements.\n. Ok, good. I just released this in the v6 NuGet earlier this evening. :)\n. The DefaultMembershipRebootDatabase ctor accepts a ctor argument for the connection string to use. \nFor migrations, I believe you can indicate with a param which connection string to use, but I've not tried it. If you determine a better way, then I'm happy to hear a suggestion for improving it.\nI'm not sure migrations are intended to be derived from -- is that common?\n. Yea, sorry -- if I were a better EF programmer I'd have done that part better. Also, my sense is that if people are using the default EF then they're using it as-is. If not, they they're building their own DbContexts. \nIf you have specific proposal on fixing the issue, please send a PR so I can make it better. But for now, I'll close this issue.\n. Yea, ok, I guess I'm convinced. I'll work on it.\n. Ok, added: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/bc1686bdfb7c53e2d40132901333a28d26ce752f\nPlease take and look and provide any feedback. Thanks.\n. Hmm, I might suggest adding a custom ICollection to your custom user account class and then map this as a custom table in your own DbContext class. \n. See the customization sample for an example of building your own DbConetxt.\n. You can put this logic into your own custom ClaimsAuthorizationManager -- that's WIF's approach to decoupling the location where the authorization check needs to take place and the logic behind the authorization (which might need to access a permissions database).\n. No they don't. Look into the helpers in thinktecture identity model.\n-Brock \n-----Original Message-----\nFrom: \"zsu\" notifications@github.com\nSent: \u200e1/\u200e26/\u200e2014 8:16 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] Where to add server side customclaims? (#233)\nI don't think the User.IsInRole and those delcarative role permission checks(like location in web.config) use the ClaimsAuthorizationManger.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmm, this has never come up. Let me think about it.\n. I'm not sure I want to allow this and would prefer to make you go thru the process of creating a new account and copying over the values. The main reason is that in a multi-tenant system each user in each tenant is a unique identity. So a user \"bob\" from tenant \"A\" is a different identity than user \"bob\" from tenant \"B\". It seems to me that allowing a user \"bob\" from one tenant to switch to another tenant is disingenuous to the idea of multi-tenancy.\n. I guess what's your definition of a tenant?\n. So when it comes to authentication, could you have two different \"client groups\" each with a user named \"bob\" and as far as each of those is concerned each one is a different \"bob\"? That's what multi-tenancy means for authentication.\n. Well, I still can't tell what your user base looks like. It sounds like you have a single application and users login and they need to be uniquely identified by their email (perhaps even consider making email the username). That's a single tenant situation. \n. No worries. I appreciate the discussion.\n. Well, this google integration is not a feature of MR -- it's a feature of the OAuth2 library being used. MR does not implement the protocols for externals authentication -- it simply can record the outcome and associate that external info with a local user account.\n. The email templates are embedded text resources and the code just does some token substitution with the user's data. If you don't like them, you can either 1: get the code and change them in the solution and rebuild/redeploy your custom build, or 2: build your own IEventHandler<> for the events you want to send emails for.\n. That would be up to your app. Either something in the URL or a query string might hint to the login page which tenant you're trying to sign into.\n. Sure, it's possible, but it's not the realm of MR. MR uses either the SAM (for ASP.NET hosting) or Katana Cookie MW (for OWIN hosting), so you'd need to get those technologies to work for your scenario.\n. I'd ask on the ASP.NET support forums.\n. Well, I'm not sure why you're seeing this odd behavior. You can always create your own IMessageDelivery and pass it to the EmailAccountEventsHandler ctor.\n. Sorry, this sounds like an issue unrelated to MR.\n. Yep, I'll look into this by the end of the week. thx.\n. Ok, I took some time to start looking into this issue. I guess I'm having a problem with your premise. The UsernamesUniqueAcrossTenants setting is for username, not email. So when a user is entering the email to authenticate then the tenant is needed, since the configuration setting is for username. \nIt also sounds like you're assuming that determining the tenant is somehow the responsibility of MR, when I would disagree. It's always been by design that the application must supply the tenant. The UsernameUniqueAcrossTenants is a slight exception, but its semantics do not carry over into email.\nI also don't understand the comment \"There seems to be no point to a MultiTenant scenario within a single Website\". Again, I suspect this comes from a misunderstanding of some assumption. \nAnyway, let's start from your setup and requirements and what you're trying to do. That way I have a better understand so I can try to help.\n. As for docs, I agree there are not a lot, but the wiki does have some.\nAs for the semantics of tenant, it is a means for distinguishing an identity. \"bob\" from one tenant is a different identity from \"bob\" in a different tenant -- they are not the same user. This is how pretty much any identity system works (think of active directory at your company vs. active directory at my company).\nI do see your confusion about the inconsistency, but that's caused (I think) by the exceptional nature of the UsernameUniqueAcrossTenants configuration. Modulo this setting, I think the tenant behavior is consistent across all other APIs. And they do behave as you suggest -- if MultiTenant is true and the version of the API is called without a tenant, then null is used and thus ultimately throws.\nBasically, if you're using multitenancy, then your app should always use the APIs that accept a tenant. If you are not using multitenancy, then you can use the APIs that do not have a tenant param. Perhaps this statement should be added to the wiki. \nSo, given all of this, for your scenario do you still need multi-tenancy?\n. IQueryable is no longer required, no. You just need to  implement the IUserAccountRepository interface, which has no IQueryable.\n. Do you mean the message bus? That was simply inspired when I was learning about CQRS and looking at the CQRS Journey sample app from MSFT: http://msdn.microsoft.com/en-us/library/jj554200.aspx\n. I'll close this, but if you make progress be sure to report back!\n. You can always use some reflection/serialization library or you can derived and set from the derived class (from a custom ctor, say).\n. requireAccountVerification = false means that we don't require email verifications for the user to login.\nEach user can verify their email (or not) regardless of requireAccountVerification. A user can't use any feature that sends them an email until their email account is verified (such as password resets).\n. Yes, this is an application setting, not a user setting. So if you have two apps sharing the same DB, then you should make the decision for both apps. That's why it's a setting in code, not in the user record.\n. RequireAccountVerification means the email needs to be verified to login. If you have half that don't follow this, then what's the point of the flag being true. The intent of the flag is to allow your application to be confident the user is accessible via the email they provided. This is very important for password resets as well. The IsAccountVerified should not be set to true in the DB unless the account is actually verified, otherwise we might be sending emails to the wrong person for password reset. \nI'd suggest if you change your mind then you send an email to all accounts that have not verified informing them of this change and include a link to verify their emails. \n. Yep, good catch. Good thing the SingleOrDefault prevents potential misuse. I suppose I'll need to do soem better validation when linking a accounts.\n. Oh and for the multi-tenant approach, when making the calls your app needs to indicate which tenant is being used. So the multi-tenant scenario shouldn't be an issue.\n. Ok, I think it's fixed: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/feed2ef43eebee3244245191383bf3f03382e56e\n. If you don't want emails sent, or you want them to behave differently then you can register your own event handler for the pertinent events. See the MR source to understand better how the event bus and how the default email code works.\n. Not sure -- I don't have enough into. Are you using OWIN or SAM? If you're using SAM, did you disable the SSL requirement (since I suspect you're in dev mode)?\n. So if you're using Owin hosting then you don't need the MR.SystemWeb library (and as such you don't want to have the SAM configured in web.config). And with Owin you don't need my other OAuth2 library since those are provided by Owin/Katana. \nIs it possible you have the wrong [Authorize] (from Web API)?\n. Sorry, yes, I meant WebHost -- this is the ASP.NET/IIS library that uses the SAM. If you're doing Owin, then you don't need the WebHost library.\nIs your Startup.cs code running?\n. I'd suggest looking at the templates. You have two hosting options: OWIN or SystemWeb. OWIN means you're using the new cookie authentication middleware released with VS2013/MVC5. SystemWeb means you're using the SessionAuthenticationManager from WIF and .NET 4.5. They both achieve the same thing, just in different ways.\nHere are two blog posts that might help:\nhttp://brockallen.com/2013/01/26/replacing-forms-authentication-with-wifs-session-authentication-module-sam-to-enable-claims-aware-identity/\nhttp://brockallen.com/2013/10/24/a-primer-on-owin-cookie-authentication-middleware-for-the-asp-net-developer/\n. Yea, each sample illustrates slightly different configurations and contexts. \n. Open a new issue if/when you have more questions.\n. This should not be the default behavior. Check to see if somehow the RequiresPasswordReset is getting set when the account is created.\n. Any update?\n. Well double zero is still zero :) But in all seriousness, I'm always happy to do consulting -- email me if interested.\nAs for your question -- MR doesn't prevent this in any way and you'd just do it in a similar way to how you're doing in your other system (unless you're asking the user for their username/password). Your code can simply issue a new cookie as any user it wants to and thus the admin can impersonate another user this way.\n. Is the user logged in (do you see their username)? \n. Ok, so this either means the cookie is not being issued or the browser isn't sending it. Do some http tracing to find out which of these two it is. \n. That doesn't look like the right cookie. See if your startup.cs is being invoked.\n. So this explains why the cookie is not being issued or processed.\n. Ok, open a new issue if/when you have more questions.\n. OWIN is about hosting. NoSql is the DB. They are orthogonal, so yes, it's possible. I don't have time to put a sample together. I'd suggest starting with the OwinSystemWeb sample but then look at the NoSql samples in terms of how they wire up the repository.\n. To learn about owin, I'd suggest visiting www.asp.net. There's a section in there for OWIN and Katana. Since it's the new stuff, I'd suggest going with it (if you can).\n. Yes this is possible, but keep in mind that MR is about identity management (so it can store claims and roles for users). Permissions are normally the job of the application itself and thus that logic must be coded and enforced by the app. In short -- MR is not library to model or enforce permissions (if that distinction makes sense).\n. Well, there is already a way to override/customize the validation messages. It's not perfect, but at least there's a way. I don't have time to devise a different or better way right now (it's not high priority).\n. See this unit test: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot.Test/AccountService/UserAccountServiceTests.cs#L1729\n. Also, this checkin shows how as well: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/de88a6531ddbfe24aa75b35b5890674757b853ec\n. Sure, open a new issue and submit a PR and I can incorporate those in.\n. Hmm, sounds like the cascade delete is not working. I'll look into it.\n. I describe that here: http://brockallen.com/2014/01/09/a-primer-on-external-login-providers-social-logins-with-owinkatana-authentication-middleware/\n. What was it? :)\n. Ah. Glad it's working now.\n. I accept pull requests :)\n. Why do you want to disable these from EF? If you want more control, then you should consider writing your own repository.\n. Right, but if you disable LazyLoading then you need to code against the entity objects differently. This means you'd need to customize the UserAccount-derived class to make sure the child collections are made available. \n. Oh I see -- sorry, that was me confusing you since I was answering the opposite question. \nSo yea, LazyLoading should be on. But also the proxy creation should be enabled, unless you want to manually create those collections. In a sense, it's sort of the same answer as before -- if you want different behavior then you'll have to create a custom entity and/or repository. \nWhy do you want to disable proxy creation? That's how EF does its change tracking and lazy loading. \n. Yes, you simply branch in your razor code based upon the user's claims. Just downcast the User object to a ClaimsPrincipal and check the claims collection for what you're interested in.\n. The sample is fixed now.\n. Uploaded a branch for feedback on addressing the compound keys on the EF tables:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commits/fix_compound_pks\n. Done in v7.\n. No, because it still doesn't mean the account is verified.\n. So given my comment, do you still have any issues or questions?\n. How is this more useful than having a blank password to indicate that there is no password?\n. Ok, thanks for the explanation. I'll look into it.\n. Ok, I went back and tried to repo and was unable to. Can you provide me with a callstack and/or a tracelog? Any additional settings you have configured on the MR Configuration?\n. Well, your app can always issue a cookie for the user to log you in. But via MR, the UserAccountService requires a password to authenticate with a password. See this: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountService.cs#L905\n. Well, I don't think it's safer to have a password that's not used. And the absence of a password does tell you something about the account (maybe not terribly useful). \nAny last objections to me closing this?\n. Hmm, can you double check this against the latest on master -- in my copy the ProviderAccountID is being set AFAICT. Am I seeing things?\n. Ok, thanks -- I was looking at the wrong thing.\n. Thanks.\n. BTW, take a look at the branch I just put up yesterday - it's a better approach for int PKs -- I plan to deprecate the \"RelationXyzInt\" classes.\n. Hmm, I wonder if you're on an old branch of the code since this feature also exists in the master branch.\n. Ok, again -- my apologies. I was missing the point of this PR (overworked/underpaid) :)\nSo yea, I see... I like the idea (and it was certainly missing). I wonder if this command makes more sense inside the UserAccountService itself in the AddOrUpdateLinkedAccount API. Thoughts?\n. The other thing (now that I'm thinking about this) is that are you sure you want to blindly map claims from an external provider into MR's primary claims table? IOW, the external claims are already stored and can be issued at login via the MapClaimsFromAccount command, so there might not be the need to have a MapClaimsToAccount. \n. So you're doing something when the account is created to associate more claims with account (from some external system, for example). Where/when are you doing this -- perhaps in an AccountCreated event handler?\n. Ok, so the external system is really trusted as a primary identity system.\n. Done.\n. You can either do the lookup to the UserAccountService when you need them (which means a DB round trip) or you can issue the claims you want when the user authenticates. This latter option can be done by providing a mapping via registering a MapClaimsFromAccount<TAccount> with the MR configuration. See the customization sample for an example.\n. For 1) I recently added APIs to allow an app to just mark an account as verified. See here: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/231\n. 2) MR allows for blank passwords, but won't allow password authentication against those accounts. So I don't see the need for a \"dummy\" password to be created. If you find an issue/bug with the code related to this, please open a a new issue.\n. 3) Uhh, you're asking about several things at once. \nWanting to create a separate table for additional permissions seems fine -- MR doesn't really do that, so build whatever you need. \nI'm not an ORM/EF expert, so complicated issues related to that I won't be able to help with. \nMR could also work fine with a SSO solution -- depends how you want to stitch everything together. But again, it all just depends on requirements/constraints.\n. 4) Claim types are just a string, so they don't have to be a URI. Put whatever you want in there and devise any scheme you want for identifying yours. Also, you might consider the \"Issuer\" property of the Claim class to help distinguish external provider claims from local claims, for example.\nIf you're worried about the cookie size and you're using the SAM, then you can look into this: http://brockallen.com/2013/02/21/server-side-session-token-caching-in-wif-and-thinktecture-identitymodel/\nThe other thought would be to use the OWIN/Katana cookie middleware instead -- their cookies are smaller.\n. In terms of acknowledgements, here's the license: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/license.txt\nI don't think this prevents you from putting a credits section on your site.\n. You're right -- some APIs have been added since v6. I just put up a v7 beta this morning: http://www.nuget.org/packages/BrockAllen.MembershipReboot/7.0.0-beta-1\nMR won't allow a user to authenticate with a password if it's blank in the DB.\nFor the credits, I think what you want to do is fine.\n. Just past experience. What is a user uses two spaces for registration and doesn't know. So not a real huge security reason -- just trying to avoid small usability issues.\nAlso, the AuthenticationService logic for external logins isn't meant to be for everyone -- you don't have to use it and can always customize your own approach to dealing with external providers.\n. It's all optional :)\n. Yea, I'd suggest #2 -- bring your old data into an app that then uses MR to create the new records. If you already use a GUID for the users, then you can pass the GUID you want to use as a param to the CreateAccount API.\n. If you can get 10 other people to chime in here and agree, I'll change it in v7 :)\n. But to answer your question as to \"why\", I think lower \"d\" in Id is ugly and personally I find it harder to read.\n. ID remains, it's just no longer the PK. \n. @christianacca soon.\n. @AlonCG oh wow, yea that sucks. i always set the json serializer to camel case and it always converts ID to id\n. v7 is now released. \n. If an account is closed and it's considered a new account (meaning the user has never logged in), then despite this setting the record will be deleted.\n. Yea, I've not yet worked out how the migrations are going to work. These DB changes are significant and I don't think EF's migrations are up to the task to be honest. I'll know what I'm going to do in the next day or so. For now, I'd suggest just working with a new DB for testing.\n. @JellyMaster Mind testing out a migration SQL script for me in azure? It's here:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/fix_compound_pks/src/BrockAllen.MembershipReboot.Ef/Sql/v6_to_v7_migration.sql\nIf you have a v6 DB this should get you to the v7 schema and preserve all your data. If you give the green light that it works in azure, then i'll be closer to getting v7 released.\nThx.\n. I also updated the NuGets to v7-beta-3\n. Both would ensure that both approaches work :)\nI'd do it myself, but I am not so much of an azure guy. thx.\n. Just updated the NuGet to beta-4, FYI.\n. Ok, thanks. I was hoping it'd be easier since it was working on sql 2012. I guess I'll see if I can setup a sql azure and work thru these. \nthx.\n. Ok, I just updated my original scripts for azure. It was just a few tweaks here and there. I tested the v7 migrations to create a new DB from VS and that worked fine. Also, I tested all the script too. If you can just confirm for me they work for you and we'll be good for azure. Thx.\n. Hmm, I wasn't able to repo the error and AFAICT the SQL i have has these indexes. What am I missing? Can you tell me how to repo the error?\n. Ok, I'm an idiot -- I see the problem. My index is plain wrong.\n. Ok, I fixed my indexes and pushed beta-5. Sorry for the silly oversight.\n. Also, the sql files are updated as well.\n. What, you don't have a script to recreate? :)\nMy error was that I made an index on the email and mobile columns, but I completely forgot that I allowed those to be null, so two users that has no mobile phone violated the mobile unique constraint. So same thing for  I also removed the unique constraint on the email index because we can have users without emails. And finally I removed the unique constraint on the verification key, because it allows nulls as well. \nSo your modifications to the indexes should be discarded. I'd restore to your v6 DB and then run the v6_to_v7 migration script. I also put that whole ting in a transaction in case it fails and so hopefully your data won't be borked.\nSo, again, my apologies. I am not database focused, so these were silly noob mistakes.\n. Ok, thanks for taking the time to validate this -- you're my confirmation that all is good in azure and I can now move forward to an official v7 release. Thx.\n. v7 is now released -- the EF nuget has the SQL files in the packages folder.\n. Can you explain in words what was incorrect or missing before or describe the scenario? Thx.\n. Ok, I now see where you're talking about. I fixed this (as well as reworked some of the logic -- there were some things wrong).\nThanks for bringing this to my attention.\n. Make sure all the places you are using the generic UserAccountService<T> and MembershipRebootConfiguration<T> are all using the same user account type. In the above code you're using two different types.\n. Oh sorry -- I saw the RegistrationInputModelDto  and mistakenly assumed that was derived HierarchicalUserAccountclass (I wasn't thinking).\nYour problem sounded like another problem I had where if you had mismatched the types, for example you had a MembershipRebootConfiguration<UserAccount> yet you had registered a IEventHandler<UserAccountCreatedEvent<CustomUserAccount>> then it'd crash in an odd way (which reminds me I should lookin to).\nBut no, I don't know azure so I don't know these tools. Perhaps a call stack would help diagnose.\n. Well, that top line in the stack trace: \n  at Manager.MembershipProvider.UserManagement.Implementation.RegistrationServices.CreateAccount(RegistrationInputModelDto model) in f:\\Projects\\Manager\\Manager.Maintenance\\Manager.MembershipProvider\\UserManagement\\Implementation\\RegistrationServices.cs:line 25\nThat's not in MR is it?\n. Ok, keep me posted. Thanks.\n. I'm not understanding your question.\n. You can always write your own repository and map this however you want to any DB. That's one approach, but requires code.\nThe other approach is you can use the EF code that's provided, but you're subject to its implementation. I'm very close to releasing v7 which changes up the DB schema for PKs/FKs and it uses an int, but it's called Key and not ID. I don't know how important these column names are to you, but if you can live with Key and not ID then v7 is for you.\n. The guid ID property in the base is staying. The derived classes for relational storage add an int Key property for the DB identity field. \nWhy do you need the column names to be different? If you build your own DbContext then EF's fluent config API will allow you to map those to diff column names.\n-Brock \n-----Original Message-----\nFrom: \"calebboyd\" notifications@github.com\nSent: \u200e3/\u200e5/\u200e2014 4:19 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] Implement PK on UserAccount as intID? (#278)\nHmm v7 sounds like it may be a solution. Will it retain the UserAccount base with a Guid ID field, or will that go away. That's really what is causing all my issues... I'm not seeing how a custom implementation can gain me that field since it would have to extend UserAccount.\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, you don't seem to understand the need for the GUID -- for small apps this isn't an issue, but for larger identity management solutions we need a non-sequential unique and consistent identifier for a user, thus the GUID. The int/identity wouldn't cut it for certain types of apps.\n. Security trumps performance -- always :)\nFor an identity provider, you don't want to refer to a user by the DB generated identity column when you're issuing claims. You want something non sequential, yet unique. Also, some systems need the user ID to be passed in and relying upon a DB generated value isn't possible (and in some circumstances a bottleneck).\n. So in v7 the PK in the DB when using EF and the RelationalUserAccount is an int, it's just that the name is Key and not ID.\n. v7 is now released, FWIW\n. Yep, that's it @calebkiage \n. Fixed\n. Oh also, I thought I had sorted this out, but apparently not -- ensure you've built the main source solution first, then build the sample you're interested in. \n. Well, the app is using the Katana middleware for external authentication, so that's less of a MR issue and more of a Katana issue. \nHaving said that, it should work -- the project should be running on localhost on port 2222 and I have setup an app already in FB for that callback URL. Google should work, since it's using Open ID.\n. Oh also, I did find a bug just last night in the single tenant owin sample: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/280\nI'll fix it later today.\n. Ok, they're updated now and v7 is released.\n. Sorry it took me this long to respond -- I just noticed this issue today.\nMR provides a helper for augmenting the claims issues. It's sort of like the claims authentication manager, but since MR doesn't assume you're using WIF I couldn't assume that'd be something available. \nYou'd need to add a command handler on the MR config class for the MapClaimsFromAccount<TAccount> command. There's an example of this in the customization sample (look for the CustomClaimsMapper class).\n. Tom -- if this doesn't work for you, then re-open the issue. For now, I'll close it. Thx.\n. I've not really thought about trying to solve that problem. I'll do some thinking. Do you have any ideas or thoughts on it?\n. Well, for the resource owner password flow OAuth doesn't really do anything here. You'd have to have some schema where you overload the password with the 2nd factor. Also, how woul[d you trigger a mobile code SMS via resource owner flow? You'd be customizing it at that point.\nYou could achieve 2fa via the implicit or code flows, though. But then that's just a feature in your normal identity management library (like MR) since you're dealing with a browser at that point.\n. Also, thinking a bit more about this, I think you're asking for something more at the OAuth2 layer, and not so much at the MR layer. I think given how MR works now, you could get your OAuth2 layer to trigger 2fa. You'd just need to design the OAuth2 later to somehow accept the code and password. Given all of this, I'll close the issue as it's not a MR issue. Thx for the conversation, tho :)\n. You're the second person to recently ask about this: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/271\nI guess I could have an option for this. Personally I don't like the whitespace for username. If you need a display name with whitespace, then consider adding a Name claim. \n. Well, it's important to understand that the text you type in to login doesn't have to be the human name of the person.\n. Ok guys -- I'm sort of coming around on this issue. I ran into a scenario where I needed/wanted to allow spaces and periods. I pushed up a branch to prototype this. Any feedback welcome:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/tree/username_validation\n. Ok -- the rules I put in place were that the username must start/end with letter or digit, but other characters can be letter, digit, underscore, period, space, and/or dash.\n. Any chance to think about this?\n. Ok, merged to master.\n. Not a bad idea -- I'll leave this open and put this in when an admin sets the password.\n. Ok, done: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/600bab49cab699dfbccd0a3c5458495a47f45ffd\n. This was fixed back in March. If you're still having the problem on the latest version then open a new issue and describe the steps to reproduce the problem.\n. This is a feature :)\nYou need to set the password hashing iterations to a number that suits your hardware and time requirements. Start with 50K and move it up as you can tolerate the delay.\n. For the current year the value is like 128K, so that might be pushing it for your hardware. So start at 50K and go up by 10K blocks :)\nI'm working on another approach where you configure it with a TimeSpan, but I'm still working on it.\n. Hmm, odd. How did you create the database?\n. Let me see if I can repo it myself and I'll get back to you. I'll get to it soon.\n. In my tests, I see less than 250ms for the first time any EF code loads up for MR. Then for the any time after it's less than 10ms, even for a different DB connection to a different MR database. I tested this with both the DB created with the .sql scripts that come with v7 and with Database.SetInitializer letting EF auto-create it on first access.\nMy client app is on the same machine as the DB. But the main point is the EF initialization for MR seems to only be one time. \n```\n    using (var repo = new DefaultUserAccountRepository())\n    {\n        var svc = new UserAccountService(repo);\n    var sw = new Stopwatch();\n    sw.Start();\n    var acct = svc.GetByUsername(\"test\");\n    sw.Stop();\n    Console.WriteLine(sw.ElapsedMilliseconds);\n\n    sw.Restart();\n    acct = svc.GetByUsername(\"test\");\n    sw.Stop();\n    Console.WriteLine(sw.ElapsedMilliseconds);\n\n    sw.Restart();\n    svc.Authenticate(\"test\", \"pass\");\n    sw.Stop();\n    Console.WriteLine(sw.ElapsedMilliseconds);\n}\n\n```\n. I don't know what to tell you -- lower the hashing iterations even more if you feel that will help your throughput, but you're compromising security. I don't know what the EF issues are -- they seem to only be on the first request. I still can't tell if you still have any issues with EF.\n. Ok, keep me posted. I don't think there's anything unusual about MR's EF usage, but if you find something let me know. Thanks.\n. The SQL scripts are in the NuGet ~/packages/BrockAllen.MembershipReboot.Ef.7.0.1/Sql folder. Make sure you have the 7.0.1 package.\n. Well, that was the main focus of v7 -- reworking the DB PKs and FKs and indexes. But this is surprising.\n. So it all works locally (with RavenDB), but doesn't when you push to Azure? \n. I don't think anything he's doing is using session state. The SessionAuthenticationManager is unrelated to session state.\n. I'm not going to be of much help -- I don't know Raven at all. The Raven sample for MR was contributed by someone else. Sorry.\n. I'll close this now. If you have any insights, feel free to add them here. If there's an issue with MR then please open a new issue. thanks.\n. What database are you using? I just tried to reproduce this with EF and SQL Server and it was working correctly. \n. So does mongo not do case insensitive comparisons? This check is done in the repository's GetByEmail API. You would have the same problem for the username check too.\n. Ok, I confirmed the problem. Now the question is, for the fix I don't know if the LINQ provider will \"do the right thing\". The problem is this line:\nQueryable.SingleOrDefault(x => x.Tenant == tenant && x.Email == email);\nand so the fix is this line:\nreturn Queryable.SingleOrDefault(x => x.Tenant.Equals(tenant, StringComparison.OrdinalIgnoreCase) && x.Email.Equals(email, StringComparison.OrdinalIgnoreCase));\nSo I worry this will turn into a LINQ to Objects query rather than a LINQ to Mongo query. Do you know Mongo well enough to know the answer?\n. Yea, normally ToLower/ToUpper cause issues (like the Turkish I problem), so my understanding is that the best comparison is the one I did above. Plus I don't want the table scan either.\nAlso, I'm pretty sure you'd want an index on the Email field regardless.\nBTW, Raven seems to always do case insensitive string comparisons, so Mongo is the only one with different behavior.\nSo... what to do?\n. I went ahead and checked in my changes. Maybe for now (if your tables are small) you can live with any perf issues, and then when the new driver comes out it will be faster. Here's the checkin: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/cf79d22973cd463edc1e52c05c01522b61c7fcae\n. For browser based apps, we use cookies to authenticate. For API projects we use bearer tokens that are passed via the authorization header. It's two different styles because of the nature of the two different types of application. \nTechnically you could use cookies for the API, but I discourage it because of XSRF attacks.\nYou won't be able to use bearer tokens for the browser based app, because you need to explicitly set the bearer token. This is why we use cookies -- the browser implicitly passes the cookie.\n. Are you using a custom DbContext?\n. To follow up on this, look at the ctor for DefaultMembershipRebootDatabase and see how it uses the RegisterUserAccountChildTablesForDelete and RegisterGroupChildTablesForDeleteAPIs. These extension methods will address the non-null FK issue in EF.\nI need to write a blog post on this technique.\n. Hmm, I tried to repo this on SingleTenantOwin sample and am not seeing what you describe. Can you walk me thru the repo steps on the sample (assuming a clean DB)?\nAlso, are your collections all virtual? Sounds like you're using some of the provided EF classes and some custom ones.\n. Ok, keep me posted. Thx.\n. Yep, that's what I surmised (since I ran into that myself). \n. Woah, that's a pretty serious looking change -- got a link to explain?\n. ok, thanks,\n. Why doesn't your code just call CreateAccount instead if there's no local account?\nThe other thing is that the SignInWithLinkedAccount API just might not work for your scenario -- feel free to write your own helper and copy over as much of that code as makes sense for your scenario.\n. IIRC, the password validation only runs if the password is not null. Are you running into a scenario where this is not the case?\n. Ok, yep. I repro'd it. I need to think about it some.\n. Ok, I changed this by not running the password validator if the password is null. All other avenues into the library where the password is being set/changed checks for empty passwords. \nIf the app doesn't want external providers, then the UI will simply require a password on registration and the there'd be no UI for logging in with external providers. I suppose this could be a config setting in the MR, but this seems like a reasonable approach.\n. Incidentally this issue made me comb thru the code and I found a subtle bug (which I fixed), so thanks.\n. thanks!\n. Yea, that's stinky. So you think this is an EF issue? Anything MR can do differently in the repo or its own DbContext to avoid this?\nAlso, I've asked an EF person to comment (http://blog.oneunicorn.com/2012/06/02/deleting-orphans-with-entity-framework/#comment-2567). Hope they do. \n. Looks like a bug in EF: http://blog.oneunicorn.com/2012/06/02/deleting-orphans-with-entity-framework/#comment-2569\nFixed in 6.1, so I'll leave this issue open as a reminder to upgrade.\n. Also, looks like EF 6.1 was released yesterday, so I'll work on that later/sooon.\n. Ok, now done. No apparent changes, other than update the nuget. Please check to see if this is now (hopefully) fixed.\n. Yea, I was just looking at this the other day and wondering if I should rework it.\n. Are you using the DbContextUserAccountRepository base class and passing in the DbContext? \n. The reason I ask is that I'm inclined to remove the IDisposable from DbContextUserAccountRepository and just have it accept a DbContext as a ctor param. I suppose that just pushes the problem elsewhere tho... thoughts?\n. Meh, this is good enough I guess. Thx :)\n. Yea, I look at it and think I could have done it differently. Then I change my mind again an hour later. I can see both side of it. I just need to leave it be :)\n. thx\n. For security reasons I'm not sure I would want this. In the UserAccountService once I change something (like a failed login attempt), I want to ensure it's persisted. I don't want some other vulnerability to be attacked that allows an attacker to rollback the fact a password was incorrect.\nI also want to avoid as many major API changes as possible.\n. The other thing thinking about this is that... you could always go and write your own repository implementation, right? And then in your implementation you could follow the UoW pattern and I don't think anything in the UserAccountService would change or break.\nBack in a very old version of MR I did have a \"SaveChanges\" API (in addition to Add/Update/Delete) on the repository interface, but now that I recall I think I changed it to support this style (if it was desired).\nSo much like the oddball logic in the AuthorizationService for external account -- you can take it or leave it, same for the DefaultUserAccountRepository implementation.\nSo in short, if I'm not mistaken, with a custom repository you can achieve UoW.\n. @christianacca eh? seem to have missed your reply.\n. Any more time to ponder? I have a distaste for open issues that linger :)\n. How's that: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/08f912a2c238d58ed6a4726f6ef920e87d3d3a6c\n. thanks!\n. That's a hard question to answer. Without a verified email, what do you propose?\n. So what you're saying is that when you load users into MR, they already have confirmed emails via an external process? In that case, you can just use the UserAccountService to SetConfirmedEmail. Then when they try to do self-service MR will allow the password reset operation.\n. Was added here: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/bc1686bdfb7c53e2d40132901333a28d26ce752f\nSo that's part of the v7 release.\n. It sounds like you don't have the latest version of the NuGet extension in Visual Studio. Version 2.8 is what I have been using for all the code I've been checking into this repository.\n. The intent was for the date to be compatible with DateTime.Parse.\n. Hmm, not so keen on the KeyValuePair<string, string> param type. Any suggestions or other ideas?\n. Ok, so no easy answers. I'll look again tomorrow and see if I can think of something. Worst case scenario, this becomes an extension method?\n. Ok, I have a branch here with some proposed changes: https://github.com/brockallen/BrockAllen.MembershipReboot/compare/bulk?expand=1\nTake a look and let me know what you think. The new unit tests (mainly for the UpdateClaims) shows how you'd use the API and I think I came up with a decent compromise for the parameters.\n. I used ICollection because I didn't need IList semantics -- HashSet doesn't prevent duplicates. I created a custom class to be able to get the implicit cast operator from various sources. Am I missing something?\n. Yea, but that\u2019d prevented once we get to the AddClaim API internally in the userAccountService, right?\n-Brock\n. My goal was to have an API that was super easy to accept the claims -- KeyValuePair<K,V> felt like a lot to type. So that's why I went with a custom collection class -- also so that the compiler could emit the calls to Add.\n. Ok then \u2013 later when I get some time I\u2019ll merge it to master.\nThanks for looking at it.\n-Brock\nFrom: Christian Crowhurst [mailto:notifications@github.com] \nSent: Friday, March 28, 2014 4:35 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Brock Allen\nSubject: Re: [BrockAllen.MembershipReboot] Feat(UserAccountService): Bulk Add/Remove of Claims (#303)\nWell looks good to me\nOn Fri, Mar 28, 2014 at 8:07 PM, Brock Allen notifications@github.comwrote:\n\nMy goal was to have an API that was super easy to accept the claims --\nKeyValuePair felt like a lot to type. So that's why I went with a\ncustom collection class -- also so that the compiler could emit the calls\nto Add.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/303#issuecomment-38962488\n.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/brockallen/BrockAllen.MembershipReboot/pull/303#issuecomment-38965067 .\n. Ok, thanks. Someone else mentioned this recently. I'll look into it.\n. I was only able to repo this once and it was only during the very early stages of the app where the DB is first created. I wonder if this is still related to an EF bug from v6? \nhttp://blog.oneunicorn.com/2012/06/02/deleting-orphans-with-entity-framework/#comment-2569\nOnce you restart the web app, does the problem remain?\n. So yea, once my app is up and running I don't see this issue again. It feels like a threading issue between multiple instances of the DbContext and MigrateDatabaseToLatestVersion initializer. \n. Ok, so I think I tracked it down -- for some reason EF's migrations now thinks it needs indexes it already has. sigh I'm about ready to give up on EF migrations. Perhaps this is a new behavior in v6.1?\n. Ok, something in EF 6.1 wants to add a new migration for indexes that already exist (that were created by one of its earlier migrations). So I added a phantom migration and all seems to be well. This is released in v7.0.3 of the MR Ef NuGet.\nI hate EF migrations.\n. Ok, just as a follow up -- simply upgrading a project from EF 6 to 6.1 (with no other changes) triggers a new migration that EF didn't previously think was needed. So this confirms the issue being EF 6.1 related. sigh\n. I published 7.0.3 about 15 minutes ago -- you already tested with it? :)\nHow many rows are in the __MigrationHistory table?\n. Ok, so you're missing the new 3rd row. So either drop the DB and start again with a MigrateDatabaseToLatestVersion initializer, or you can run the v7 schema SQL script from the ~/packages folder for MR EF. Or if you have an existing DB and don't want to lose the data just do the last insert in the migrations table that you'll find in the SQL file. One of those 3 approaches should solve your problem.\n. Ah, ok. good to hear. I suspect you now have 3 rows in the migrations table.\n. Yep. Oh and I still hate migrations -- it's such a headache.\n. Ok, I can look into it. I am aware that EF does caching, whereas Mongo doesn't and I've tried very hard in MR to not assume how EF works, but maybe I missed something.\n. So there's a test that checks this already: ChangePassword_ChangesPassword (in UserAccountServiceTests). Does this one not work for you?\n. Ok, just tried to repo and I can't when using the SingleTenantSystemWebOwin sample. \n. Ah ok -- that explains the caching behavior you saw.\n. Hey Lars -- \nI just tried to reproduce the problem and I don't see the error.\nThe only thing I can think of is that the code related to paging was recently changed (here's the checkin on Mar 19th: https://github.com/thinktecture/Thinktecture.IdentityServer.v2/commit/245806ca0ec5f39a7fbbaef37126c38ef53caffe). Are you on the latest version?\n. Did you update the reference for EF to be v6.1 in IdentityServer?\n. Yes, MR supports hierarchical storage and you can use a GUID as the ID. There are already several NoSql samples -- check the ~/samples directory.\n. MR has OWIN support. Look at the SingleTenantOwinSystemWeb sample.\n. Yes, that will work (I'm assuming these are properties on an instance such as a web forms page class or a MVC controller where you will get one per HTTP request).\nThe only issue is that you're relying upon the static HttpContext.Current which isn't ideal with OWIN/Katana, but it will work as long as you're running in IIS using Katana's SystemWeb runtime.\n. I'd suggest making it a static variable in your app. \n. This is a setting on your config, yes. This config is passed to the UserAccountService ctor.\n. Sounds like the company is a claim of the user, which of course MR can store for you.\n. Sure -- I see that the company will be its own entity. You need something to show the relationship in the DB. Either a claim on the user, or you can customize the UserAccount class and add a foreign key property to make this relationship more formal/deliberate.\n. Oh and the customization sample shows how you'd add custom fields to a UserAccount-derived class.\n. I don't follow exactly... MR allows you to use email for the username (and thus login will be with email). You can then also store additional claims on the user, which could be more email values, but as far as MR is concerned the one primary email is what's used for authentication and password resets.\n. And so the user can login with any number of emails with the same single password?\n. Huh, interesting. I never knew you could do that here on github. \nThinking about this, it seems like a pretty specialized requirement... or maybe this just isn't mainstream enough yet for me to think of it that way.\nAlso, looking at your schema -- I'm not sure I'd want FailedAttempts per-email. This allows an attacker to switch emails and increase the number of guesses (tho, still, a low number). The failed guesses, IMO, should be at the account level.\n. But those are more of identity providers and tend to have more elaborate requirements, rather than just local application authentication. \n. IdentityServer v3 will be in alpha soon :)\n. @StateBarofArizona http://leastprivilege.com/2014/04/09/announcing-thinktecture-identityserver-v3-preview-1/\n. Your event handlers need to be of type IEventHandler<IdentityUser>. The ones you're using are of type IEventHandler<UserAccount> and that's a different type.\n. Also, see the customization sample for how to do this.\n. Any update?\n. As for the redirect I guess it depends how you're logging the user in -- Katana or SAM?\n. Yes, Katana is the OWIN implementation. And sorry -- I see you have that above. \nSo are the pages you're visiting -- do they have any authorization on them? IOW, do they return 401 if the user is anonymous?\n. The other thing is on your CookieAuthenticationOptions for MR (not for the external authN) -- you can set a LoginPath where the user should be redirected if the user is not authorized.\n. @pardha83 open a new issue if you're stuck on something\n. Yea that's leftover from a bug in the VS templates \n-Brock \n-----Original Message-----\nFrom: \"prabu2sec\" notifications@github.com\nSent: \u200e9/\u200e30/\u200e2014 9:04 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nCc: \"Brock Allen\" brockallen@gmail.com\nSubject: Re: [BrockAllen.MembershipReboot] Help with configuration (#314)\nIn your web.config, do not remove the \"FormsAuthenticationModule\" from the pipeline.\nRemove \"FormsAuthentication\".\n\u2014\nReply to this email directly or view it on GitHub.=\n. You either need 1) some sort of delegation technique from the UI layer to the backend layer, or 2) the backend layer just trusts the UI layer. \nFor #1, AuthorizationServer supports this with the assertion flow: \nhttp://leastprivilege.com/2013/12/23/advanced-oauth2-assertion-flow-why/\nFor #2, you could use OAuth2 client credentials flow to authenticate the UI layer.\n. I guess I was confused on your original requirement. So you want a user in website A to be authenticated, then the code in JS makes API calls to website B with the same security context as the user? So yes, sounds like some sort of SSO is in order and for the API site you'd need to support OAuth2 for the tokens (implicit flow it sounds like). \n. He has a newer PS course, but it's not yet released. That would be a good resource.\n. Thx\n. Yea, it's been on my radar, but it's a major breaking change, thus my hesitation. \n. I'll leave this open as a reminder. Perhaps we could have both sets. But yea, the repository would have to change as well.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. I'm sorry -- can you elaborate?\n. No worries -- I'll take a look.\n. Ok, fixed. thx\n. What's the error you're getting?\nThe require account verification setting means that the user must confirm their email before logging in -- that's all.\n. If you don't want the email, then don't configure the email event handler on the configuration.\n. cool, thanks\n. This is a hard problem to solve. The reason we require a password to confirm email is to ensure the wrong email was not provided (like a typo). This is why it's very important a user confirm their email while they remember their password. Otherwise they will have to contact an admin and you'll have to have something in place to help the user.\n. How would the reset password page know that the user doesn't remember their password? All it knows is if the user has verified the email or not.\nAnyway, again, this is a hard problem to solve. I'll think some more about it.\n. But still, if the email address has not been confirmed then you want to trust sending an email to an unknown address to delete the account?\n. Yes, the admin intervention was assumed for this situation. Again, I'll think some more about this flow when I get some time.\n. Given the complexity and the disruption of the logic, I'm going to pass on this. Sorry.\n. Which sample are you looking at?\n. Ok, yea -- some of the UI workflow is a little broken -- it was mostly adapted from the single tenant samples. I'll go clean it up.\n. Ok, fixed. Thx.\n. Yep, Confirm and ConfirmResult.\n. On your DbContext did you use the RegisterUserAccountChildTablesForDelete API in the DbContext ctor? See the provided EF implementation for an example.\nI see in the customization sample I've omitted it -- I'll go fix it now.\n. Ok, I just cleaned up the customization sample. Sorry -- it was out of date with some of the recent EF changes. It should now be a solid example to work from. Also, make sure your custom account properties are all virtual.\n. Sorry, your question didn't get any visibility because it's in a closed issue. Perhaps if you're still having a problem you should open a new issue. thx.\n. Huh, this must have been caused by something different in EF 6 or 6.1. Thx.\n. The customizations sample has an example of how you could do this -- it's just sample code, so take it with a grain of salt :)\n. Perhaps - I'm not an EF guru.\n. Yea, I think that sounds right. In any event good question but nothing really to do here. Thx.\n. There's a SQL script that should convert all your schema for you. It's in the EF project. And yes, I understand this is a pain -- my apologies, but I had a client beat me up about the inefficient keys from EF code first -- thus the change.\n. This is a pretty big change, as we'd have to confirm both email addresses. I don't have the time to make this significant of a change/reworking of MR.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. So you want a username to be anything, but it could be the email? If this is the case, then you'll need to change the core code as that level of flexibility doesn't exist. The username is either configured as email or not, but no support for either. Sorry./\n. Ok, let me look into this a bit and see what the tradeoff would be.\n. Yea, sorry -- been very busy the past 2 weeks.\n. This is related: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/339\nCan you add to the conversation at all?\n. Closing. See: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/339\n. thx\n. Are you using a custom UserAccount type? What does your MembershipReboot configuration look like?\n. Did you configure the <smtp> element in your .config?\n. Not sure -- i'd try just taking the SMTP code and calling it directly. \n. I asked you to test calling the SMTP code without MR in the way. \n. Where is this being called from that's a problem?\n. Well, then you'll have to somehow map from the string username to the right GUID for the user in MR.\n. Well, I don't know what the change really looks like, but given that MR is making an assumption about the NameID then as long as you can deal with the differences in assumptions then I think whatever you've done should be fine.\n. Well, I think I need to spend time on IdentityManager more right now (and I've been pretty busy). Are you looking to use the Katana middleware or IdSvr 3?\n. I'm going to close this because the effort will be over in the IdMgr project.\n. It's just a sample of how to be notified when the password is changed so you can store that in a history table. I think it's then used in the change password validation to ensure you don't use one of your last 3 passwords (or something like that).\n. Yea, it's just an example of how you could audit user logins.\n. Not by default because there's no way MR could know what data should be a claim and what data shouldn't. You need to map those yourself in the event @HaJoB mentions from the sample.\n. Yea, you might have a point. I'd have to look into it and see if there's some path that break or wouldn't work if these semantics were changed.\n. So I started to look into this. If this change is made, then what do you suggest for the AuthenticateWithUsernameOrEmail API? I feel like this API is then worthless since it keys off the @ sign to know to lookup the account by email or username. This API was added previously due to user feedback looking to allow a login page with a single textbox that the user can enter either. Maybe this API that already exists solves your problem?\n. Yea, the more I think about this, I'm really hesitant to make this change. I'll spend some more time this weekend thinking about it.\n. Yes, @davidgrey152, this is one reason for my hesitation and it's a good point.\n. Yea, I'm closing this -- I worry about the implications and don't have the time to dedicate to really solve this in a good way. Sorry.\n. It sounds like you're using a custom UserAccount class and are not calling the RegisterUserAccountChildTablesForDelete extension method from the custom DbContext's ctor. See the customization sample for an example.\n. To determine who calls Dispose on the DbContext.\n. Sorry, I've not really been following this conversation -- if you have a problem, then please open a new issue. Thx.\n. Ugg, ok. I'll look into it. Thx.\n. Well, do whatever you can to determine what the real issue is -- I don't have a lot of time, so if you figure it out sooner then that's help all of us.\n. The salt is created by the PBKDF2 implementation. It's the same as this API: http://brockallen.com/2012/10/19/password-management-made-easy-in-asp-net-with-the-crypto-api/\n. BTW, there is a ICrypto interface that you can implement if you'd like to change the implementation. It's assignable as a property on the MembershipRebootConfiguration.\n. I'd have to try to reproduce. Unfortunately I'm quite swamped right now, so this might take me some time to follow up on.\n. Actually, there are unit tests for this -- can you look at them and re-verify the issue?\n. Did you get a chance to verify the unit tests?\n. Those URLs would want to be determined at runtime. That's what the OwinApplicationInformation and AspNetApplicationInformation classes are for -- they determine those URLs based on the live HTTP requests (since it's not available dynamically when an app starts up). The other option is to hard code the URLs and use some config-driven approach to choose different URLs.\n. Nope, this does not sound like a MR issue -- perhaps more of a AuthN Cookie MW issue.\n. Any update?\n. Well, I think this is something you'll have to keep debugging. I think the real question is to determine which HTTP module or middleware you're using that triggers the 302.\n. This is not a MR issue. But to help you should go read up on the concept of delegation. WS-Trust supports this as does OAuth2 with the custom grant type.\n. Hmm, ok. I'll have to find someone with Raven experience to help out then.\n. Ok, I think I finally came to a reasonable solution -- I'm adding a UseEqualsOrdinalIgnoreCaseForQueries property to the QueryableUserAccountRepository class. I should have done this in the first place, but I was short sighted. Sorry to the mongo and raven users\n. Ok, checked in the code. Mind checking to see if it works for you?\nSorry for the delay.\n. thanks\n. Ok, I think it was the old version of EF that was referenced. I updated it and now it seems to be ok. HTH\n. What checkin are you missing? I think the only one I didn't update recently was the german resx.\n. I have a bit of backlog here on the issue tracker -- mind if I get to it after the weekend when I can look into some of these other issues?\n. Sorry -- I forgot to follow up on this. 7.2 is now up.\n. Sorry on the delay in responding. Can you provide a call stack for this so I can track down what's happening?\n. Hmm, yea, this all looks very straight forward and thus is not obvious what the issue is. \n. Perhaps if you have the smallest sample that can repro this, I can look into it briefly.\n. @tjrobinson nice catch. @shurub3l see if that's the issue.\n. I tried to clone the repo in BB and it failed for some reason. I then downloaded the code and tried to build and that failed. Maybe you have another way to share the code so I can look at it?\n. @threeel sure, send it along.\n. @threeel i was able to access your code, but i have build errors. not sure where else to go from here.\n. Since I'm not able to repo this, I'll close this issue.\n. Ah yes -- that's a common issue. Thanks for the reminder.\n. Yes, this sort of thing has been requested in the past and is a significant change and work to MR. No time now, but a nice idea for a feature.\n. This is a dup of this: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/330\n. If you use the built-in EmailAccountEventsHandler then yes, it sends an email. If you don't want that email, then don't use it. \nRequireAccountVerification just means that they can't login if they haven't yet verified their email. They can still verify their email and it's required if they want to do password resets.\n. IIRC if they've never verified their email then that triggers the initial 'welcome' style message.\n. You're correct about the welcome -- I was going from memory, so I had to look thru the code again.\nYou can't reset a password unless the email has been verified. So anytime you request email reset and the account's email has not been verified then it sends the email confirmation event. \nThe RequireAccountVerification flag is poorly named. It means if the email is not verified then don't let the user login.\n. Mind forking and writing a unit test to show the problem?\n. Well, there's a unit test project in the source that exercises the methods to prove they work the way they're expected to work. Perhaps it's a chance to learn how to do that.\n. Yes, at some point I made the design change that verify is the same as a change email. You can always check in the email verification event handler to see if the email is yet verified to know if it's the first time. But there's also an account created event for the initial email.\n. Yea, sorry @AlonCG -- I don't know what the EF issue is. For the EF repository implementation, it's always been designed to work with lazy loading and proxy generation enabled. I know this might not be ideal, but you can always implement IUserAccountRepository and then use EF anyway you want.\n. I wrote about the FK/null issue here: http://brockallen.com/2014/03/30/how-i-made-ef-work-more-like-an-object-database/\nAnd that's what the RegisterUserAccountChildTablesForDelete helper does. \n. No worries. :)\n. I just tested the customization sample -- it can add and remove claims and I do not see the non-null FK issue you mention. I am using the add/remove gender claim on the home page of the customization sample. \n. I just went and tested it in the customization sample bu disabling lazy loading and it fails, but not in the way you describe. Again, I never designed this to allow to disable lazy loading -- the library is assuming the repo should be loading the data.\nSo I think the suggestion of using a separate DbContext for MR where you can use lazy loading would work. The other option would be to code a custom repository.\n. Hmm, ok, so now I'm pretty sure I'm lost with what's happening in your EF code  :)\nAgain - the semantics of the repository is that when the Get methods are called that the data is returned. If the repo returns a partially populated object then it's not implementing the full semantics.\n. Well, the extension method is meant to be used if you're using the EF-provided DbContext. If you do everything all on your own then you can do it anyway you want.\nSorry we weren't able to track this down.\n. So should we close this, or are you still waiting on some more help/info/guidance?\n. Ok, sorry we couldn't sort it. If you start again and run into issues, then open a new issue.\n. Sounds like an IoC issue, not a MR issue.\n. IoC is inversion of control and is a pattern to require dependencies to be passed in as parameters. Much of the code in IdSvr and MR use this pattern and thus customizing the code might require some understanding of this technique. Usually this is configured at the hosting layer, so you might see in the specific controller the real issue, rather how the application is bootstrapped will be the issue. IdSvr uses one IoC framework (MEF) and the sample you are moving from uses a different approach (Ninject). Since you're introducing MR into IdSvr you'll need to adopt the IdSvr approach and get the IoC framework to learn about MR as a dependency.\n. Cool, thanks for helping out @JellyMaster \n. The password is required to verify that the email to which the key was sent is really owned by the correct user.\n. Yep.\n. > I have rarely seen any current website where a user would have to confirm an account by typing in the same password after the account has been created.\nAnd that's a potential security flaw. That's why this library requires it for the self-registration flows.\n\nmy company doesn't do self service membership, the admin is the one that takes care of everything.\n\nHave you considered using the SetConfirmedEmail API then?\n\nThis enforced solution has gotten everyone annoyed.\n\nSorry, security is hard.\n. The security flaw is if the email is incorrect or entered as a typo. The incorrect recipient can now potentially pwn the account (via password reset). Requiring re-entering the password with the confirmation key ensures that the email matches the user who provided the initial password. This, of course, is only possible with user self-registration, but that's how to protect the user from themselves. \nFor admin-created accounts, it's a similar concern, but you don't have a good way to mitigate it. Hopefully the email is correct and is not sent to the wrong person. Also, for these admin-created accounts if you don't want the same notifications that are sent for self-registration then I'd suggest using a different MR Config with different event registration. Not sure if that's part of your complaint. Finally, I think what you could do is use SetConfirmedEmail when you create the account, then trigger the password reset -- this would just allow them to come in and set a new password.\n. Email must be unique since we have APIs to look the user up by email. This is used for login and for password reset.\n. Are you using OWIN cookie MW or the WIF and the SAM to log the user in? Maybe it's an SSL thing and the cookie plumbing is issuing a cooki0e with the secure flag set (meaning the browser refuses to send it back to server since you're not using ssl?). \n. Well, the NameID claim should be a guid -- that's what the extension method is trying to convert it to. You'd need to debug why you don't have the NameID claim or why it's not a GUID.\n. Won't have time to look into this until after NDC, but I'll add it to my work queue. Nice to meet you last week :)\n. Ok, I did it on this branch: https://github.com/brockallen/BrockAllen.MembershipReboot/commit/3589c1a180aa44b472f167696f2bb325dd7aa17b\nTake a look and think about it (since my brain is fried ATM) and see if you think there might be any problems/issues (again, thinking about others having used MR).\n. So I think this is a good plan, but yes I agree it's tricky for backwards compat. Perhaps I can take this under consideration when I upgrade to EF7, which will be a significant update.\n. Finally bit the bullet on this -- v8 now on nuget\n. I'll check this out when I get some free time.\n. Ok, thanks - I'll put this in my work queue to follow up on. It'll be a week or so. Thx.\n. Ok, fixed. thx.\n. Yes, there is logic to prevent re-using the same password. This is for those scenarios where you want the user to change the password every 180 days and prevent them from just re-using the same password.\n. You'd need to implement a trace listener -- this is a core .NET feature, so I'd suggest checking the MSDN docs.\n. Sorry I didn't reply sooner -- 150 was chosen as an arbitrary value. \n. You need to add this to either the claims cookie when the user logs in, or implement this in the claims repository. Either will work.\n. MR is an identity management library, not a protocol library. You'd have to build a service on top or use something like OAuth2 to issue tokens to your mobile apps.\n. Yep, understood. It's a complicated space, but once you spend enough time you'll be like Neo -- you'll be able to make sense of the matrix.\n. There's already an API for this: AuthWithUsernameOrEmail.\n. Check the LoginController in the SingleTenantOwinSystemWeb sample\n. Ah so this is more of an IdSvr v3 issue. In IdSvr v3 if you want to change the behavior of the MR UserService, then derive and override the API for password authentication.\n. You can add a custom claim type with any type -- it's just a string and your app would then impart semantics to that type. MR allows you to register a MapClaimsFromAccount command handler to do this customization. See the customization sample (the CustomClaimsMapper class)\n. And then did you register this class as a command handler with the MR config (as in the customization sample) via AddCommandHandler?\n. IdentityServer is unrelated to your question.\nIf you're using MR then somewhere there must be a MR configuration. \n. Hmm, look good. And I guess you don't get a breakpoint in the claims mapper? Perhaps try debugging into MR where it normally invokes it (from the AuthenticationService's SignIn method).\n. Ah, you're using this from IdentityServer, right? So then you're not using MR's SignIn API -- you're doing that from IdentityServer. IdentityServer has its own claims mapping mechanism since it's doing the login with WIF. You'd have to do the claims transformation in IdentityServer with its approach.\n. Read the customizations link on the wiki.\n. The OwinApplicationInformation or AspNetApplicationInformation objects used in the EmailMessageFormatter are meant to dynamically use the current host name to emit in the emails. This is necessary since in app startup we don't know the host name. \nThe other approach is that you can just use the ApplicationInformation base class and set all the URLs to be fixed to what you want the URLs to be.\n. Yea, something like that.\n. Did it work?\n. Very good. thx\n. There have been several people asking for this and I still think this rule is needed. Check the history for those conversations. What you might want to do is use AuthWithUsernameOrEmail on the login page if you want them to be able to enter either. Hope this helps.\n. Did you disable lazy loading or the EF proxy features?\n. Yea, I just re-ran this to test and it's working fine in the SingleTenantOwinSample -- my bet is that you have LazyLoadingEnabled and/or ProxyCreationEnabled set to false on the DbContext.\n. Well, not loading the entire entity violates the semantics of the user account repository. \n. You'd need to implement your own IEventHandler for the various events you want to send email for. Alternatively you could implement a custom IMessageFormatter and still use the built-in EmailEventHandler. The built-in email templates are more for debugging/samples. These extensibility points I mention are meant for the customization you're looking for.\n. Yea, something like that would work.\n. Does it work?\n. Sorry -- I don't follow. Under what conditions is it being called with the same value? I don't see this behavior you describe.\nThe value stored in the DB is hashed already. The key passed in is then hashed and those two values are what's compared.\n. Any comments?\n. Last chance to let me know what I'm missing...?\n. Right, so if the default provided repository code that uses EF doesn't work the way you want, then inherit and configre and/or replace with your own EF layer with the settings you want. And yes, this is mostly EF's nonsense behavior, so I don't have a lot of help on this front. Sorry.\n. MR only maintains the identity data (such as roles) -- it does not enforce any sort of authorization. Authorization is typically an application level detail and thus it would be up to your code to check the claims on the user object and return 401 if the user is denied access.\n. Yep, that's it. The best place is to start in the samples -- there are several, but the SingleTenantOwin is the best. Once you're comfortable with the basics, then the customizations is a good place to see how to further extend MR.\n. Yes, this was a recent change -- the URL for confirming the account is the same as changing email. All that's being done is that we need to confirm the email. You can make it any URL you want if you feel the term \"ChangeEmail\" in the URL is confusing for users.\n. You need to map it when the cookie is issued. If you're using the MR AuthenticationManager then it's done by registering a command handler for the MapClaimsFromAccount<CustomUserAccount> command. Look in the customization sample where it calls config.AddCommandHandler(new CustomClaimsMapper()) on the MembershipRebootConfiguration\n. I have no idea what the Discriminator value is. Sounds like it's coming from your EF code.\n. This is hard to diagnose. You need to know what your URLs for doing email confirmation and make sure they're configured properly in the ApplicationInformation (or ApplicationInformation-derived) class you've used with the MR Configuration in the hosting application (IdSvr in your case).\n. Well, then you can not use the AuthentictionService and just take over that yourself. It's just a matter of getting the claims you want and issuing whatever kind of cookie you want to use (WIF or Katana).\nIf there's a lot of code from the AuthentictionService you're using then perhaps we can open it up with some more virtuals. \n. What @dealproc said.\n. I'm traveling right now, but I'll look into this (and the other cert related issue https://github.com/brockallen/BrockAllen.MembershipReboot/issues/371) when I get home. Thx.\n. Hmm, now that I'm thinking about this do you have lazy loading or the proxy stuff disabled in your EF code?\n. Same comment for you from here: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/371\n. I don't have a project template for this. I know someone else had emailed me about this -- did you check on the VS gallery to see if there if was one?\n. Yea, someone had contacted me about a template in VS -- I wasn't sure if they put it up for people to use or not. That's too bad.\nAs for a reference, I'd suggest looking at the samples here in the MR repo -- those are more focused when you want to embed the identity management right into the app itself. \n. What do you mean by an existing DB? You mean you already have tables for username and password storage?\n. Well, I guess I'm still a little confused. If you're using the EF provided base classes then it mandates the DB schema and so existing tables with your own identity data (such as passwords, usernames, etc) won't really work. The other approach would be to implement the IUserAccountRepository directly then you can implement the persistence anyway you want.\n. So MR requires certain values to be managed in the DB by the user account repository. Those are modeled by the UserAccount and related classes. It's just data. So MR needs to read and write said data. How you map it to a DB is up to you. EF makes this very simple (as does NoSql DBs) since they will map the entities back and forth to the DB. In a sense, the DB is derived from the entity classes.\nIf you have existing tables/columns then this will be harder since you have to take existing columns and map them to these entity classes. Also, I doubt you will be able to use any existing rows/values in these tables since I'm sure the semantics don't match (other than very obvious values such as username, email). \nWhy not just migrate the existing tables/columns to the new schema defined by MR?\n. Yea, I think that will be the best approach. How are your passwords stored now? Migrating those might be the trickiest part.\n. Ah, so migrating this will be fairly easy. G'dluck.\n. This is a significant change, so I don't think I'd be able to consider it unless/until we have a major point release.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Yea, that's a bit tricky. You could always just not handle the account created event when the account is actually created and manually send an email from after the place where the first/last names are set. \n. The only thing that might be a problem is what the AccountCreatedEvent is re-used when a user tries to reset their password and the email has not yet been verified. But in that scenario the first/last name will be available and you could use them from the event.\nSo in short -- your AccountCreatedEvent knows to not send the email if first/last aren't populated. Something like that. Sorry I don't have a better answer off the top of my head.\n. Any thoughts?\n. What about an overload to CreateAccount that allows you to pass the custom account (as last param):\npublic virtual TAccount CreateAccount(string tenant, string username, string password, string email, Guid? id = null, DateTime? dateCreated = null, TAccount account = null)\n. I just pushed this branch for you to test: https://github.com/brockallen/BrockAllen.MembershipReboot/tree/allow_passing_custom_useraccount_to_create\n. Any progress update?\n. Ok, I'll merge this into the master branch then.\n. Well, IIRC, the reason I did it this way is that if you have EmailIsUsername then in a sense you're not using username (and just email). Also, forcing you to go thru the email APIs ensures we get email validation (even though it's being used as username).\n. Any further comments on this issue?\n. How would the code look different? Can you show me an example?\n. The way i see this is that the EF code provided is just a sample of implementing the user account repository. If you want different behavior, then it's not that difficult to build something else more tailored for your requirements.\n. Well, in your IUserAccountRepository you can map to a different column, like a string column.\n. Well, if you can't use EF then you can still implement the IUserAccountRepository and work with MR that way.\n. If you are successful and are willing to contribute your oracle implementation let me know -- I'm happy to add it to the samples for others to use to get started.\nG'dluck.\n. Very possible -- thanks for the note. As for the migration scripts -- they're SQL specific (as all EF migrations are).\n. Sure, if you can show me the code so I can get an idea of what's involved, that would be helpful. Do you have a fork or a public repo?\n. Ah, interesting. How are you determining your tenant for things such as the login page?\n. So then I'd recommend you building your own version of the AspNetApplicationInformation (or really a ApplicationInformation derived class), or I could look into disabling the caching.\nThoughts?\n. Yea, ok, I can look into it to make a change. Give me a day or so...\n. Or you can propose a change and do a PR?\n. Ok, thanks. Fixed by https://github.com/brockallen/BrockAllen.MembershipReboot/pull/396\n. Deleting vs Marking as closed is an option in MR. IdSvr doesn't know the distinction and given it's abstraction from the identity management library being used wouldn't know to have a re-open button. Of course, you could add this extra functionality to the IdSvr admin UI given that you know you're using MR.\nAs for .config overriding in-memory settings -- that's not always true. It depends on how you're doing your MR initialization.\n. Ok, thanks.\n. I did this to address the scathing feedback I got about GUIDs as PKs. And for security reasons, I require non-sequential GUIDs, so sequential GUIDs was a non-starter. \nOf course, it's just in the EF implementation that's provided that it's done this way -- you can build your own repository to abstract how the data is stored (especially if you don't have the strong objections to the GUID PKs). \n. I just went thru the exercise of setting up IdMgr on IIS and did run into some issues. Perhaps you can get the latest code and try again? Also, this is the MR issue tracker, not IdMgr, so post over there next time. :)\n. No updates for those, so IIRC everything on NuGet is latest and greatest.\n. And yea, NuGet doesn't automatically grab the latest dependencies, which seems silly.\n. Ok, I'll take a look.\n. I already merged the PR, but do you mind if I make it a time span like the other settings?\n. Also, I want to rename it to verification key lifetime (from verification key stale duration).\nAnyway, I've made these changes locally and unless you have a strong distaste for these changes I'll push them up.\n. Ok, released to NuGet in v7.4\n. Ok, looks good,. thanks.\n. I'm not a RavenDB expert and that sample was submitted by someone from the community. Feel free to improve upon it and submit a PR.\n. Any progress?\n. I merged this and tried to run and got many exceptions while running the sample. For example, when trying to do a password reset:\nSystem.NotImplementedException: The method or operation is not implemented. at BrockAllen.MembershipReboot.RavenDb.RavenUserAccountRepository.GetByVerificationKey(String key) in\nDid you run into any similar issues? I'm hesitant to merge this if there are such runtime exceptions.\n. http://msdn.microsoft.com/en-us/library/bb986855.aspx\n. There's nothing built in for this, just the link I provided.\n. So everything is working then? Any other issues?\n. Sorry -- was traveling and didn't get around to testing this. Are you using the public DB or do I need to setup a local DB to test this?\n. Merged on dev (finally). Thanks!\n. If you're using MembershipReboot then you can choose how to issue your authentication cookies. There are two helpers as well -- one that uses WIF (which is System.Web based) and the other that uses Katana. But if you don't want either, then that's ok as well -- you can do your own.\n. Ah, interesting problem you've gotten yourself into :)\nTo be honest this is more of an issue with AntiForgeryToken. You might have to work around this by doing some redirects in order to not issue a new cookie and use an anti forgery token on the same response. I don't have any better suggestions, since I've not had deal with that problem myself.\n. The NameIdentifier claim is usually used for that.\n. No sorry -- \nNameId is usually meant as an internal identifier to the application for the user (such as a PK or for MR we use it for the UserAccount ID GUID). Name is usually meant as a display name or perhaps the username used to login. So the Name claim is certainly ambiguous --  you can use it for either style.\n. If you trigger a password reset and the account had never verified the email in the first place then MR will trigger the account created event which will resend that initial email.\n-Brock \n-----Original Message-----\nFrom: \"StateBarofArizona\" notifications@github.com\nSent: \u200e8/\u200e8/\u200e2014 5:18 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: [BrockAllen.MembershipReboot] Resend Email Verify Message and Link(#408)\nDoes anyone have sample code of how to regenerate and resend the email verification message and link? When a user loses/deletes their verify email or lets it expire we need to be able to go into the admin and create/send a new one.\nI see methods to resend mobile code, etc. but nothing for email code.\n\u2014\nReply to this email directly or view it on GitHub.\n. You do not need to use the DefaultMembershipRebootDatabase provided DbCOntext if you don't want the provided functionality (which includes migrations). You can always build your own DbContext or the MembershipRebootDbContext and then use the DbContextUserAccountRepository with your DbContext. \nThe other alternative is to use the SQL files to create the DB instead (they're in the sql folder in the MR EF NuGet in ~/packages). \nFinally if none of the above suits your taste, then you can just build your own IUserAccountRepository -- it's not that difficult with EF.\n. Those are different projects for different contexts. MembershipReboot.EF is when you need to use MR and want to use an EF supported database. If you need MR in IdentityServer, then you will also need IdentityServer.v3.MembershipReboot.\n. Well, each of the github repos should have a readme that describe what they do. \nMembershipReboot is an identity management library.\nMembershipReboot.EF is for storing that identity data using EF.\nIdentityServer.v3 is a token service that supports OIDC and WS-Fed.\nIdentityServer.v3.MembershipReboot is the user service for IdentityServer that uses MembershipReboot as the source for identity data.\nThey're all BSD and we don't plan to change that.\n. Umm, sorry. I guess I can't help you then with your personal roadmap. I can only help you with issues or questions related the these OSS projects. Open a new issue if you have further questions or problems.\n. The rules are meant to protect the app. But I can understand your issue migrating from a different system, so I can look at this again. No promises though :)\n. So it seems that the only special character that you need added is the single quote (') yes?\n. Ok, I added the single quote to the allowed username characters. If others are needed, let me know soon before I push to NuGet.\n. Yea, I understand. Right now the design isn't so great for having a default validator yet allowing the hosting code to remove the default -- mainly because those validators are conditionally added based upon the EmailIsUsername config setting.\n. Always happy to have people helping (and especially adding tests). Merged on dev.\n. Ok, this doesn't look like it will hurt (since we're trigger execution on the next line). \nThanks.\n. Hmm, email changed shouldn't send a link. Perhaps that's a bug?\nBut to answer your question, no, there's no official docs for that. The names are meant to be as self-explanatory as possible. Feel free to start a wiki entry on it :)\n. Ok, I'll look into it. thx.\n. Ok, this link makes sense -- it's used when email confirmation is not required. It allows a user to confirm the new email.\n. Thx, I'll look into it\n. I'd suggest adding a separate event handler for those recipients.\n. I suppose that would mean you'd be storing the roles as GUIDs in your user then, right?\n. No, I guess that seems fine. I was just making sure you were using the Group GUID and not the name to associate the user with the role. Of course if you were using the name and then changed it then it would break the user's association.\nAlso, I'm thinking of adding a Description property -- thoughts on that?\n. Well, that's why I submitted this issue -- right now the GroupService doesn't support updating anything but the name.\nOh, BTW you can already change the name via the ChangeName API.\n. Done.\n. thanks,\n. Yes, you can configure MR without an IoC or a DI library. See this console application sample:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/tree/master/samples/CustomUserAccount\n. Good to hear.\n. I can open that API up -- I was just looking at this situation recently.\n-Brock \n-----Original Message-----\nFrom: \"StateBarofArizona\" notifications@github.com\nSent: \u200e8/\u200e20/\u200e2014 7:12 PM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com\nSubject: [BrockAllen.MembershipReboot] userAccountService CloseAccount (#420)\nIn userAccountService it appears that only DeleteAccount is exposed but not CloseAccount. Even though I appear to have AllowAccountDeletion set to false, when I use DeleteAccount, the account is deleted. I would prefer to close the account in certain circumstances. Other than changing the MR core, is there another way?\n\u2014\nReply to this email directly or view it on GitHub.\n. Done.\n. When you create an account and the email is wrong, that introduces a fairly complex problem. The email can not be trusted to verify the account. This then also means if you try to change the email that you can't trust the current email to confirm the change request. There's another closed issue here on the issue tracker where this problem is discussed. There's no real good trustworthy solution other than to delete the account with the bad email.\nAs for the username not being synch'd with the email -- this is confusing to me because MR is supposed to do that when you have EmailIsUsername configured. Perhaps what you're seeing is that the request to change the email was done but the confirmation was not and thus the username (and email) wasn't updated to the new one. Again, this gets back to the lack of trust in the initial incorrect email.\n. If you find yourself needing different settings for different scenarios, then create different MR config objects for those different scenarios to initialize your UserAccountService.\nRequireAccountVerification is a poor name, I admit, but is that way due to historical reasons. If true it means that the user is not allowed to login until they have verified their email address.\n. The FB access token is short lived, whereas the claims you put in the DB are meant to be identity information (name, age, URLs, etc).\nIf you're really interested in the columns being larger, let me know.\n. Sorry for the delay. I'm traveling and I'll look into this when I return.\n. Ok, sorry for not getting back to this. I misread part of the original question -- my apologies. Yes, this is a DB issue, not an EF or MR issue. The DB is what controls how those comparisons are done. This flag was added to placate the different NoSql providers and how they map the LINQ queries to their plumbing. IOW, some can translate == and other only translate .Equals.\nSo yea, if you're using EF then this flag doesn't really matter (AFAIK).\n. Hmm, well, maybe. Suggestions?\n. Yea, I don't like that one either. Not sure there's a good answer. Anyway, too many other things to work on, so closing this. Thx.\n. One of the samples uses Ninject for MVC, but not for Owin.\nMy example using Autofac was really just me hacking away to make it work. I'm sure they have a better or more official approach. Same would be for Ninject, so you should contact that project and see what they're doing to support Owin. \n. All set then, I trust?\n. Why do you need or want the BaseEntity?\n. Well, the design of MR doesn't fit into that design so if those are all requirements for you then you need to work with MR at the source level.\n. Umm... everywhere it's needed?\n. I don't know of any, but it's on my TODO this week to update MR and IR to the latest bits. If something's not working, feel free to raise the issue here and we can discuss the solution (before you do a ton of work on any PR).\n. There is support to name the schema. Is this not sufficient?\n. You'd do so where you instantiate the MembershipRebootDbContext (your own MembershipRebootDbContext-derived) class.\n. Yea, this has always been a tricky value. I'll see if I can get to it. If you need it sooner, then submit a PR.\n. Ok, I added a SmtpTimeout property to the SmtpMessageDelivery class (on dev branch).\n. Ok, thanks. I'll look into it.\n. Ok, I can't repo this. I debugged into VerifyEmailFromKey and forced the line of code to execute where the \"key verification failed\" log entry is bring written, but I don't see the exception you're reporting.\nCan you debug and provide me some more info on tracking this down. \n. Any update?\n. Ok, thanks -- keep me posted.\n. Any update or ability to reproduce?\n. This is a SQL Express issue, I imagine. You need to delete its reference to the DB from the mgmt studio or from VS.\n. <= 0 uses the PKCS#5 recommendation, which for the year 2014 is 128K. If you want a low (and therefore weak) number, then I'd suggest 10000.\n. Is this advisable in what way? What are you looking for otherwise? What are you trying to accomplish?\n. Yep, that's the flexibility of a claim. But if you need to access it as a column, than add a property to the user account class. You have the choice depending on how you want the value stored.\n. Yes, you need to use the derived implementation for either using WIF's SAM for session cookies, or for using the Katana cookie authentication middleware.\n. Well, you can email your user any URL you want and then do anything you want if they click those links. So in short, the built-in stuff only needs the one, but you could do something different.\n. Yes, the email templates are more just there for development. You can replace any or all of them.\n. What was the fix?\n. Ah ok. Glad you have a solution.\n. I'm sure you could have a UoW/TxContext container surrounding the calls -- just make a custom repository to manage it. I imagine this is just some console app you're building to migrate records, right? IOW, you don't have to run in a web server.\n. The other thought -- similar to my original -- custom DbContextUserAccountRepository-derived class w/ a no-op SaveChanges -- then do the real DbContext save changes in your UoW wrapper/API.\n. No, nothing like that is built-in. You'd just need to run some periodic code to find those old account and for each one mark it as closed (via the UserAccountService API). Sounds like it'd easily be done as a NT Service or a windows task scheduler item.\n. Sure, that'd work. You'd just instantiate your custom UserAccountServive<T> instead of the built-in implementations.\n. No problem\n. The DB is managed by the repository you use. If you use a custom one, then you're expected to create whatever storage you need. If you use the EF ones, then it's managed by EF.\n. All set?\n. The built-in EmailAccountEventsHandler ctor has a param for the message delivery you want to use. If you don't pass one, then the built-in SmtpMessageDelivery is used. If it has problems sending then it writes to the trace log. I'd look there to see if calling the SMTP APIs failed.\n. Those lines are conditionally registering an event handler. That specific class (EmailAccountCreatedEventHandler) does not exist anymore. Perhaps you're looking at an old sample? That class used to send emails just for account created events, but this was merged into the main EmailAccountEventsHandler class. \n. If there is no exception in the log, then the problem might be with your SMTP provider. I assume you've configured something in the <smtp> settings in web.config?\nOh, actually, I don't even see any trace statements that say \"Processing Event ...\" -- it sounds like the event handler is not registered at all. It might be easier to download the source and put breakpoints to ensure if they are getting called (or not).\n. Good to hear. \n. I'd enable the tracing for MR to ensure that the email code is being hit or if there's an error being thrown.\n. Sounds more like a network/firewall issue. The SMTP timeout is configurable, so maybe increase the value and see if that helps. If not, then my guess is a network/port issue.\n. Sorry, I don't have much help for you -- I don't know or use MySql in any way. I'd love for it to be able to work with MR, but this sounds more like an EF issue than anything else. \nAnother approach would be to skip EF and build a MySql specific IUserAccountRepository implementation. \nIf you figure out what the problem is, feel free to submit an issue so we can get it fixed and support MySql.\n. Thanks.\nOnce you have a fix, open a new issue (so I'll close this one for now). Thx.\n. Live doesn't support \"localhost\" callback URLs. You'd need to configure a DNS hack to point to your localhost.\n. All set?\n. MR doesn't \"do\" this -- it only manages the data for your local users (and their associated external authentication providers), but it is not responsible for the network protocols to do that external authentication. So in short, your issue has nothing to do with MR. \nBut to help out, the answer is \"it depends\". The whole move to OpenID Connect and OAuth2 is meant to provide a standard protocol so you don't need vendor specific libraries, but unfortunately many have tweaked the protocols. This leaves you with the task of figuring out which is which, and this stinks for you (and everyone else). Sorry I don't have a better answer.\n. I don't know which OAuth2 flow it's using, but chances are that it doesn't give you the hook you need to map from the facebook user to your app's user. IOW, you need to interrupt that login sequence to know wihch local user maps to the facebook user. \nI'd suggest using the Katana authentication middleware for this, not the facebook libraries.\n. Because Katana is supported by Microsoft and has more options. My OAuth2 implementation is a bit older and is not as flexible as the Katana implementation. \n. A persistent cookie is the realm of your cookie authentication library. What are you using for cookie authentication?\n. I don't know which sample or which cookie library you're using.\n. When you call SignIn on the AuthenticationService there is a bool param for persistent cookies. The lifetime is then configured via your cookie library. For the Mongo sample it's using the WIF SAM so that lifetime setting is in web.config.\n. Consider without the password:\n1) User creates account with wrong email.\n2) Wrong user clicks link and now owns the account.\n. Yep, that's one approach. There is a IsNew() extension method (IIRC) that will let you know if an account has never been logged into. This could be another flag to let you know if it's safe to delete. \n. BTW, Pinterest is an example of an app that gets this wrong -- someone signed up with my email and I was able to pwn their account since they never made the email owner verify the password.\n. I'd suggest configuring in  your DI system a custom instantiation of your DbContext-derived class passing the connection string you want (the DefaultMembershipRebootDatabase has a ctor that will accept one).\nOr derive from DefaultMembershipRebootDatabase and pass your connection string to the base and register the custom one with DI.\n. Ok, I think I follow. I'll take a look.\n. Ok, I was able to repo this -- something is wrong with the EF NuGet. I'll patch and republish.\n. Updated NuGet with v8 -- plz try again\n. @mcianc dunno -- i'll take a look when i get chance.\n. Sorry -- I was traveling and just am getting back to these issues.\nHere's the ctor for the MR DbContext:\n```\npublic class MembershipRebootDbContext : DbContext\n        where TUserAccount : RelationalUserAccount\n        where TGroup : RelationalGroup\n    {\n        public MembershipRebootDbContext()\n            : this(\"MembershipReboot\", null)\n        {\n        }\n    public MembershipRebootDbContext(string nameOrConnectionString)\n        : this(nameOrConnectionString, null)\n    {\n    }\n\n    public MembershipRebootDbContext(string nameOrConnectionString, string schemaName)\n        : base(nameOrConnectionString)\n    {\n        this.SchemaName = schemaName;\n        this.RegisterUserAccountChildTablesForDelete<TUserAccount>();\n        this.RegisterGroupChildTablesForDelete<TGroup>();\n    }\n\n    // ....\n\n}\n```\nIf you want to specify a connection string, then you need to create the MembershipRebootDbContext and pass the name you want to use.\n. Ok, I'll look into it.\n. Ah, sorry -- I didn't ever look in detail at the sample you have. So you're using the user account service from across multiple threads. It's not designed to be thread safe. You need to instantiate the user account service for each request coming into your application, not use a shared/static instance.\n. Yea, but the events are per-user. Sorry for the confusion.\n. Did you also update the EF NuGet?\n. Ijust grabbed the latest from NuGet and I was able to compile this just fine:\nIUserAccountRepository r = new BrockAllen.MembershipReboot.Ef.DefaultUserAccountRepository();\n. <package id=\"BrockAllen.MembershipReboot\" version=\"7.5.0\" targetFramework=\"net45\" />\n  <package id=\"BrockAllen.MembershipReboot.Ef\" version=\"7.1.1\" targetFramework=\"net45\" />\n. Just updated NuGet -- plz try again\n. Any update?\n. Not sure -- the only thing I can suggest is to either enable tracing and see what the log messages are, or if that doesn't show anything then debug it.\n. Any update?\n. There are APIs like SetConfirmedEmail where you don't have to go through the verification process.\n. If you have a certain workflow where you want different behavior, then consider building a different MembershipRebootConfiguration -- specifically one without the email notifications. You can create different instances of MembershipRebootConfiguration for different situations.\n. You're on the right track of creating a different config for that special scenario (so emails are not sent), but instead you should just use the SetConfirmedEmail API.\n. BTW, require account verification prevents logins until the email has been verified.\n. np\n. Ok, thanks. This tells me more and more that migrations suck for people writing libraries.\n. BTW, update on this -- I spoke to someone on the EF team and they gave me an idea for working around this... mainly by maybe providing a virtual or some other hook that can be called at runtime to inject the string you need.\nThoughts?\n. Yes, something like that. I don't want to put DB provider specific stuff into MR because then every time there's a new provider then I need to re-release it. Unless you can make a better argument? shrug\n. Following up on this  -- it's been a while since I've looked into migrations. Can you use a derived migration class? Does the command line let you indicate the class name?\n. Ok, thx,\n. Sounds like you've not configured the \"ApplicationInformation\" configuration object for your email message formatter, as this sample shows:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/SingleTenant/SingleTenantWebApp/App_Start/MembershipRebootConfiguration.cs#L18\n. Cool -- i'll merge these in next weekend. Thx.\n. Thanks - I finally got to them!\n. I'd skip it -- devs speak English (typically).\n. The only things that can be set in .config are from this class: \nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/Configuration/SecuritySettings.cs\neverything else would be from code (or your own custom config of some sort).\n. It is just code, so yes :)\n. Why do the MR entities have to be domain entities? IOW, it's a blurry line where the identity data stops and the domain specific data begins. I don't know the right line to draw, but I try to keep the data for identity separate from the domain \"stuff\".\n. The user ID is what provides the consistent association. What's nice about that level of coupling is that at some point the authentication can be extracted form the app (typically for single signon purposes), yet your app can still function and work off the correct identity for the user.\n. I mean the ID property which is a consistent, non-sequential identifier for the user (and no, it's not the PK). \nYou'd use the Owin package when hosting in an Owin host. grin Maybe this video would help you on owin: http://vimeo.com/97329189\n. It's not shameless if it's helpful :)\n. Hmm... on the surface that feels more like a Ninject issue.\nDo you have a proposal for a solution?\n. Ok, let's call that the solution then :)\n. Finally got to this -- thanks.\n. That sounds like it would be some EF configuration setting.\n. There's a SetConfirmedEmail API if that's what you're looking for. Also, there's a SetPassword API too. Not sure which you're looking for.\nAnd yes, you can create accounts with a null password.\n. You'd have to control/define the metadata that IdMgr uses to build its model.\n. Well, the app that deals with password reset, etc. is just another client app to IdSvr. So having a link from one to another is just like having 2 apps that just know the URL of the other. I don't see any issues.\n. Yep.\n. Look at the OAuth2 resource owner password flow. You'll need a token service like IdentityServer: https://github.com/thinktecture/Thinktecture.IdentityServer.v3/\n. You're on your own for registrations.\nThinktecture is a company name. We produce many libraries. You're talking about IdentityModel in the client -- it's a helper library for obtaining tokens.\nIdentityServer is a token service. It can be used instead of the Microsoft Katana OAuth2 authorization server for creating tokens. I'd suggest using IdentityServer instead of the Katana authorization server.\n. Sure.\n. Very cool -- I'll check it out next week (when I get home).\n. Ok, np -- I'm busy so it might be a week or so before I have time to look.\n. Perhaps you can fork and mock up in some code what you'd be interested in? I don't have time to work on this right now, and I'd be happy to accept a PR assuming the feature doesn't adversely affect other things.\n. Any updates?\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. A tenant is just a discriminator column in the user account table. It's just a way to allow two different users with the same username to be treated as distinct users. \n. Sounds like an error when sending email. I'd look into the SMTP code and perhaps get a call stack to confirm where the error is coming from.\n. So I'd suggest enable tracing to see what the debugging output says for why the key is invalid.\n. It says key is stale -- this means they key wasn't used within the timeout.\n. That's configurable on the MR settings.\n. Call the API again :)\n. No, the resetpassword API\n. So you can't trust the email you currently have for them?\n. So if you already know their email is confirmed, then you can set it as confirmed via the SetConfirmedEmail API.\n. MR only knows about one confirmed email and that's the one used to reset passwords. So whatever the last confirmed email the user has is the one used.\nYou can always build an admin page to do anything you want with MR. There's an API to set the confirmed email (skipping the verification process).\n. Ah, great find. Does this proposed change add the same lockout to change password? Is that what you were suggesting?\n. Ok, so I finally had time to look into this and I now see and understand the details. So really tehc hange is just an ordering change -- correct? I think that's fine. I'll make this change on dev now. Again, nice find.\n. Ok, done. Thx.\n. My first question is around all of the Task code you have. From what I can tell, none of it is necessary or useful. MR does not have an async API, so I think this is a lot of overhead/confusion for no benefit. It also make the code hard for me to follow :S\n. Right, so that looks like it should be ok. Each time you call into the user account service to perform an operation it does query the repository and if you're using EF it will pull from any in-memory cached instance. But, having said that, the in-mem cached instance should get updated when SaveChanges is called internally.\nAre you able to debug into it anymore (into the MR code) and perhaps do some more investigation?\n. Ah, good news then.\n. Closing an account originally meant deleting the record, but sometimes people want the row to exist for foreign key constraints, so this concept of a closed account was added. It's meant to be like the record was deleted without removing it. \nAs for the full ramifications I'd have to look to fully remember, but closed accounts don't show up in queries, IIRC. This means things like password resets won't work. Also, the email might then get used by another new account. \n. Are you mixing the Owin and System.Web hosting models with MR?\n. You should only be using one of either the MR.Owin or MR.WebHost library (but not both).\n. I'd suggest looking in the SingleTenantOwinSystemWeb sample to model what you need -- it's an example of using MR with OWIN/Katana in IIS. \nThe main change is that you'd use OwinApplicationInformation instead of AspNetApplicationInformation.\n. No, sorry.\n. The idea is that the IUserAccountQuery is for high level queries so then an individual account can be loaded. \nRecently I added IQueryable Users property on the UserAccountService -- I don't know if that's in the latest on NuGet or not...\n. It's been so long, so not sure I can recall the thinking... but since Init is meant for internal purposes, I think that's why the super set of params is used.\n. I don't know of any issues. It should work as the password hashing does not depend on anything related to the host.\n. Implement your own user repository.\n. If they request a password reset and their email account has never been verified then a new verification email will be sent (as if they had just signed up). \nThe email verification token expiration timeout can be changed via .config or in the MR config object.\nYou can also configure MR to not require email verification to allow login, but password resets still won't be allowed until the email is confirmed.\n. Ok, not sure I follow the sequence. I'll see if I can find time to repro what you're saying. Any interesting configuration you have that might affect this or be related?\n. To re-trigger the verification email for new accounts just call ResetPassword\n. No. If the account has never confirmed the email we don't trust the email, so we don't allow password resets until the email has been confirmed. \n. Sure, make it a month if you want. The idea is that normally when a user is sitting there setting up an account, they're actively waiting to get the link so they can login. \n. Oh and I've not had the time to try to repo this yet. I've been busy on IdSvr's release (due next week). Once that's done, I'll have some breathing room to come back and follow up on these open issues.\n. We plan on shipping next week: https://github.com/thinktecture/Thinktecture.IdentityServer.v3/milestones\n. What version are you on? The latest on NuGet has it in there.\n. You know what -- I've not been keeping up on that (mainly because there have not been many changes). The main place is the commit history. But since you're on 7.x and it's now up to 8.x that means there is at least one breaking change. Again -- look at the checkin history. I know that's not a very satisfactory answer, so my apologies.\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commits/master\n. You should be creating a new instance of the UserAccountService, and the UserAccounrRepository, and thus the DbContext on each request. These classes aren't thread safe or meant to be cached. I suspect this is the issue.\n. Are you asking about IdentityServer3? I think you're posting to the wrong repository. \n. Do you have the SAM configured in <modules> in web.config? Also, do you want to use OWIN or SYstemWeb?\n. Well, it affects how you manage cookies. OWIN does the authentication cookie differently than if you're doing SystemWeb hosting. OWIN is newer and thus the one that will typically be used moving forward.\n. Here's a video on OWIN:\nhttp://vimeo.com/97329189\nHere's a post on the cookie middleware:\nhttp://brockallen.com/2013/10/24/a-primer-on-owin-cookie-authentication-middleware-for-the-asp-net-developer/\n. merged on dev. thanks!\n. Well, how could you validate the credentials to allow them to change the password if it's expired? This is something that is up to the hosting app to check after authentication -- as the samples show.\n. Sure -- but this grew over time into that list. Thus the extension methods on the UserAccount. shrug\n. I'd be ok making that change -- in a vNext (since it's a breaking change). This then gets into the question of ASP.NET 5 and their new (new new) Identity library (since v3 isn't compat with v2 -- so much for them finally getting it right) -- I'm wondering if MR offers anything beyond what's in AspNet5. \n. Perhaps put this on a branch to review, chat about it, etc.\n. Also, feel free to ping me on skype.\n. Fixed via PR.\n. The reason it's that way is because the 6-digit mobile code is stored in a non-revsersible way in the DB, so we can't re-send the original code. We can only send a new code. This is why we throttle it with the CanResend API.\n. That's something really outside the realm of MembershipReboot. Just use EF or whatever DB library you want.\n. Yes, this was one change. A DefaultMembershipRebootDatabase is now required as a ctor param. So you'd just create one of those (either with or without its own ctor param to indicate the connection string).\n. That would be up to the app. That means the email-only based way to reset password would not work.\n. Yep, that gets complex.\n. Ok, this has now been added to dev. \n@tjrobinson if you'd like to look at how to change things to support the post-closed scenario, and propose a change or PR, let me know.\n. You should provide a link to resend the verification -- I think one of the samples has that. IIRC, if the user tried to reset the password but they've never logged in, MR re-sends the original verification email, rather than sending a password reset email (IOW, it raises 2 diff events based upon the state of the user account).\n. Do you mean the RequestAccountVerification API?\n. Ok, glad you found it. As for the bot... yea... perhaps an exercise for the reader? :)\n. You can also send the code in the email and provide a UI for them to enter said code. IIRC, one of the samples has this.\n. So ensure the email is actually being sent (and not an error in some way). \nEmail is what the entire security model relies upon for validating users so that they can reset password at some point. If you don't care about secure password reset, then you can disable the \"require account verification\" to let them login before email is verified.\n. any update?\n. You can create an account in MR without a password (for this external-provider only scenario).\n. 1) Password can be null -- MR allows for this, but then of course password authentication is not allowed\n2) See (1)\n. I guess I don't see the need to generate a strong password -- MR allows for null passwords and knows to not allow users to try to user username/password to login (only external logins). What am I missing?\n. Right -- the complexity is only enforced if a non-null password is provided. Are you seeing a different behavior?\n. That's called a custom grant type. You'd need to implement the \"assertion flow\" of OAuth2.\n. np\n. Identity data would be shared across many apps, whereas app specific data should stay in the application database.\n. I tried to reproduce this and can't. Here's what I did:\n```\n[TestMethod]\n        public void MyTestMethod()\n        {\n            configuration.AllowLoginAfterAccountCreation = true;\n        var acct = subject.CreateAccount(\"test\", \"pass\", \"test@test.com\");\n\n        var result = subject.Authenticate(\"test\", \"badpass\");\n        Assert.IsFalse(result);\n\n        acct = subject.GetByID(acct.ID);\n        Assert.IsTrue(acct.IsNew());\n\n    }\n\n```\nIsNew checks last login for null. \nSo since I can't reproduce it, perhaps you can write a test to reproduce the problem you're seeing?\n. Ah, ok -- missed that. I'll try again.\n. Ok, so yes, was now able to repro this -- looks like it was a bug due to a typo in Authenticate. Fixed on dev and will release updated NuGet soon.\n. You should be able to manually update the nuget. \n. For the scenario where you don't want emails sent, use a user account service whose MR configuration don't have an email handler registered.\n. Sounds like that'd work.\n. Ah, that looks like a bug then.\n. Fixed and pushed to NuGet. Thx.\n. Well, we did a version bump (7 to 8) so something is a breaking change. I admit I've not done a good job of keeping on top of the releases to list these things though. IIRC, it was a minor API change (but breaking nonetheless). The only other source, of course, is the checkin history.\n. Ok, so no promises, but I don't think there have been any schema changes recently.\n. Thanks for doing that @tjrobinson \n. This is more up to your application and how you're doing cookies. MR has samples that work with the WIF SAM and the Katana Cookie middleware... but neither is \"owned\" my MR -- you still need to configure them.\n. They're in UTC.\n. This would be another thing to change for ASP.NET Core -- how MR does logging. So many new things for the new scenario.\n. Cool, thanks.\n. So to address your first question, you would need to have your OAuth token endpoint issue a access token based upon the google id token. If you're using the Microsoft middleware as the OAuth authorization server, then you'd need to contact them for support on how to do that.\n. I'm not clear on why the code in MR needs to change to accommodate the code that's issuing your token. If you're able to determine the user from the google id token, then that's all the role that MR takes -- you can find the account from the linked provider/id and now you have the account, you just need to issue the claims. There's no need to call Authenticate since that's for password authentication. The valid id token from google is just as good as the user's password.\n. Right... ok, now it's more clear. For external accounts this was done via the AuthenticationService class and its SignInWithLinkedAccount, but that was certainly designed to do two things: do the checks you said, and issue a login cookie. Your scenario makes that more of a challenge since you're not issuing a cookie in the OAuth token service scenario,\nSo solution? Not sure... \n. Yep, understood. Not sure what (if anything) will be done, but I'll leave this open as a reminder to think about it.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Check the list of claims you have and the claim types. Something in the token is not lining up with the expectation.\n. Well, if the GetUserID() you're using is the one from MR, then it's expecting a claim of type NameIdentifider, but in the WebAPI with the UseIdSvrBearerToken middleware, it's creating a claim of type sub. The claim types are different.\n. So then why not just look for the sub claim directly? Do you need to use the GetUserID extension method?\n. You need to provide more context to your question.\n. Yep, please check 8.2 and let me know how it goes.\n. Ok, good news then.\n. You can add this to the email messages -- just do your own formatter.\n. Not sure there are docs, since the \"configurability\" of expiration was added later. It's on the MR Config class, IIRC.\n. Yep, SecuritySettings (the class for loading settings from .config) and MembershipRebootConfiguration (the in-mem settings passes to the UserAccountService) both have a VerificationKeyLifetime property to control that.\n. Why don't you just create a different MR config and thus different UserAccountService for the other scenario?\n. Perhaps use a transactional queue.\n. There's a .sql file in the EF NuGet's folder structure (in ~/packages).\n. merged on dev, thx\n. ok, thanks!\n. Hey Christian -- I'll take a look as soon as as I can.\n. merged on dev. thx. i think if/when we do a point release, these can be made the primary APIs and the old ones can be removed\n. done on dev\n. Looks like 8.3 or beyond.\n. I don't think I have a public API to do that. Feel free to add one and send a PR. \n. I didn't add a Remove because the Config (and thus the event handlers) is shared across all instances of the user account service. If you need a different set of event handlers for a different scenario then use a different config.\n. fixed w/ PR\n. Yep\n. Yes, you'd need to implement the user service to use these new APIs.\n. I just tested this and I'm not seeing what you describe. You should debug into your email formatting code.\n. thanks -- i'll be getting to my MR backlog over the weekend!\n. ok, looks useful for an admin type\n. Good catch, thanks.\n. The RequireAccountVerification  flag is a bit misleading -- it means that the user can login even if their email is not verified. We never allow a password to be reset if the email is not confirmed. So if you let them login without email confirmation and they forget the password they're in trouble.\n. Sorry -- was traveling so I got behind on these issues.\nHowever, what I'm arguing for: clicking a link in an email implicitly confirms the user's identity (in so far as we're talking email access == verified identity) - yet is prompted for a password simply because user.HasPassword().\nI'd disagree with this statement. Just because you click a link in your email does not confirm your identity. It simply confirms that you control the email that MR sent the message to. Forcing a user to re-enter their password is what really confirms their identity. This protects against incorrect/typo'd email addresses. And that happens all the time.\n. Yea, at this point it's safe to delete the account because: 1) the account has never been logged into (IsNew extension method can check this), and 2) You don't let them login to the app until email has been confirmed (via RequireAccount Confirmation in MR Config).\n. You can just configure different MR configs for the delete scenario and don't add an email event handler.\n. What is the email address on record is incorrect -- for example if you self-register and enter the wrong email (or have a typo)? That's the context for that statement.\n. BTW, this is why email confirmation in MR also requires re-entering the password. That really confirms that the person whose email was used is the same person that owns the account. Once that's confirmed, then the email can be trusted for things like password reset.\n. Right, and MR does not do that (unless there's a bug). Perhaps that's what some of this thread is getting at?\n. I'll have to go back thru the code then to trace the logic. \nI do recall some path where an email reset is requested but the email is not yet verified. What should happen is the trigger the email that is the initial email (which at this point might be the email verification)... so yes, there's a state you can get into where the user is stuck if they never confirm their email and forget their password. It's a hard problem to solve (if you agree the possibility of invalid emails entering the system). \nIf the emails being provided are already confirmed (from some other source), then you can just mark the email for that account as being confirmed (there's an API for that).\n. absolutely\n. But I do caution you about making the assumption that an end user will enter the right email address. They often get something like that wrong (believe it or not).\n. Not a bad idea. I think what I've done in the past is in the email verification I check IsNew() to know if the user has logged in or not. I think some of the samples might even show this... but yes, certainly room for improvement and/or clarification.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Sorry -- was traveling and this issue fell off my radar.\nIdentityServer needs a sub claim and you'd map that from the UserAccount.ID property of MembershipReboot. I'd suggest looking at this code to get an idea how to implement the user service in IdentityServer:\nhttps://github.com/IdentityServer/IdentityServer3.MembershipReboot/blob/master/source/MembershipRebootUserService/MembershipRebootUserService.cs\n. Also, this is not really an issue with MembershipReboot, so I'll close it. If you have more questions, open an issue in the more appropriate repo.\n. Make the page POST back with JS -- the automated scanners will not submit the page.\n. Nice, thanks!\n. i guess you could override the Update methods to no-op on those read only deployments. but then how do you do brute force protection? or password reset?\n. There's support in the EF implementation for using a DB schema.\n. This is the wrong repo for IdentityManager. It's here: https://github.com/IdentityManager/IdentityManager\nPlease check the docs on the security config: https://github.com/IdentityManager/IdentityManager/wiki/Security-Configuration\n. Yes, I have a good idea what the issue is. That's why I suggested:\nPlease check the docs on the security config: https://github.com/IdentityManager/IdentityManager/wiki/Security-Configuration\n. Please open an issue in the correct repo.\n. Configure your EF code how you want it (with Database.SetInitializer).\n. Perhaps -- I was trying to use this API last week and it just wasn't working as expected. I have yet to really debug into it.\n. This API raises the EmailChangeRequestedEvent event -- are you handling that?\n. As for IdSvr, no -- nothing in IdSvr does registration, so you have to build that yourself.\n. Yea, upgrade.\n. so if no updates available, then i'm confused about the error -- is this just that the EF is bound to an older version of MR? if that's the case, then do binding redirects. otherwise i'm confused.\n. Is that just a matter of updating each project's NuGet reference? I guess I've never really run into this issue..\n. Not sure... I can check.\n. Just reopening to remind me to look... still swamped from travel\n. Sorry I wasn't able to find the time to help on it, but good to hear and a pain to track down. \n. Hmm, i guess I never ran into this.\n. thanks\n. Sure, not a bad idea. Feel free to fork and prototype something. We accept PRs.\n. Sorry -- somehow I missed this issue.\nMR will throw ValidationExceptions so you'd need to catch that and translate that back to some logical error to your Ajax client. This is pretty much what the MVC samples do (but they're translating the ValidaitonException into an error message for the UI).\n. Oh sorry -- I was traveling and so I guess I missed this. Thx for the reminder.\n. ok, thanks\n. Good question. I certainly don't know.\n. Sorry -- somehow I missed this issue.\nRoles are just claims. So if you have one app that only needs a few claims, then filter them when the user is logging in. There's a claim filter map command on the MR config for this sort of thing.\n. Hmm, yea... I think this would require a change to how the events are deigned -- they'd need to be injected/instantiated on every request. You could, of course, change the Di system to create them on every request when you provide the MR Config.\n. For OWIN there's a non-System.Web implementation (see: the MembershipReboot.Owin project).\n. All set with this issue?\n. Sorry, I don't even know what dapper is. Maybe someone else has though.\n. If Dapper supports proper IQueryable semantics, then you could derive your Dapper repository from the QueryableUserAccountRepository. If not, then you'd need to implement the interfaces yourself manually. \n. There is the EF course (of course) and there are samples of no-sql in the ~/samples folder.\n. You asked examples of implementations and I pointed you at the ones we have -- EF, NHibernate, Mongo, and RavenDb. Once you have a Dapper implementation I'm happy to include it as a sample or link to it from here.\n. So there's a Dapper repository implementation for ASP.NET Identity?\n. Yea, I think the remarks might just be in general (EF vs. Dapper). I guess what's a more honest assessment is using MR with both DB implementations and comparing those. Also, the thing is, the identity management library is infrequently used -- only at login time typically, so if you're only talking a few percentage difference then perhaps the effort on optimization is  better spent elsewhere. shrug\n. Seems like this issue can be closed now.\n. How do other event bus systems handle this?\n. Any update?\n. So you want to have an admin to hit a button that emails the end user to change their password?\n. There's already a SetConfirmedEmail API IIRC. You'd user this API from your trusted admin UI.\n. We're full of surprises. \n. Sorry for the delay -- this got lost in the past month of me traveling.\nSo yea, I guess this might be an issue. Is the problem just the email notifications?\n. Yes, we always require a confirmed email before password reset is allowed -- it's just not secure otherwise. The RequireAccountVerification  name is a bit misleading -- that just means if the user's email must be confirmed for them to login.\n. @DavidChristiansen right -- the allow anon on the controller will let in anon users.\n. Ok, cleaning up old issues. I don't know what verifier, but this was working.\n. Feel free to send a PR and I can verify it.\n. For 2fa codes? Not sure how much effort this would be to rework MR's semantics around this... but you're saying you did this already?\n. I think having an option for something other than SMS is great. Maybe we can chat over skype and see what you have.\n. I just got back from holiday, so you'll have to give me some time to get to this. Thx.\n. Thanks.\n. thx\n. @girtsl thanks\n. Ok, done.\n. I just merged that PR and the tests (for me) are all passing (after I fixed one).\n. @girtsl can you re-check and confirm that they're working for you now? thx\n. Ok, thanks.\nCan we close this now @Allann?\n. Oh wow -- at least I was consistent.\nThis will be a breaking change, so I'll have to bump this to v9 i guess.\n. Do you mind re-pointing this PR at dev? \n. thanks!\n. In IdSvr 2.0.0 we've added the client ID making the token request to the user service get get profile API. This allows you to decide what claims to return to which client.\nAs for the storage of the claims and how they map to clients -- yea, MR doesn't have that concept, so your naming convention might just be as good as anything.\nOh and sorry for the delay -- I missed this issue in the weeks of traveling and me trying to get all caught up.\n. Sorry -- I meant IdSvr3 build 2.0.0 in my prior statement.\n. Ok, ping me in skype.\n. Look at how the samples do this.\n. If the user account has secrets registered, then they must be used to reset the password. That's the whole point of the feature. Is that not the behavior you want?\n. You'd need to really build your own message formatter. The built-in formatting is really there for development/illustration.\n. Use the SmtpMessageDelivery and set sendAsHtml to true. If you don't want that, then implement your own IMessageDelivery with the EmailEventHandler. If you don't use any of those, then you can just do that yourself in your own event handler.\n. This is a current limitation of the system -- it can only handle doing confirmation of one thing at a time (email vs mobile). Sorry.\n. MR has support for doing the confirmation process for email and mobile phone, but it uses the same column in the DB for each, so only one can be done at a time. If I could start all over again, I'd not have done it that way... it grew over time, so that's why it is the way it is.\n. MR can support managing your users' identities and credentials. Beyond that is authorization and that's up to your app. So in short, MR is an identity management library, not an authorization framework.\n. Hmm, ok. It's a breaking change... I'll leave this as an enhancement in case other major breaking changes get added.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Correct. But we do store the external claims just not as part of the primary claims collection. If you want them in the primary claims collection, then you can do that mapping yourself.\n. The UserAccount has a collection of the linked accounts and that has the claims.\n. Can you provide a all stack showing which API call triggers that?\n. Given that it's using HashAlgorithm.Create, this means you should be able to configure in .config that you want to use the FIPS compliant implementations. I'd search the MSDN docs for this setting.\n. Check in the ~/packages folder -- there's a SQL script to install the migrations. Or you can create the DB using the migrations update-database tool. I'd not trust the auto-created DB that EF gives you -- something about that creates the DB doesn't seem to work well with proper migrations.\n. This tells me you don't understand how IsInRole works. The user needs to logout and login again, since IsInRole works off of the identity produced from the cookie.\n. Also, when you call IsInRole it's checking for a claim in the claims collection. That claim type depends on how the ClaimsIdentity was created. \n. How are you creating the ClaimsIdentity -- what are you using to authenticate the user? OWIN cookie authentication or WIF's SAM?\n. I don't think the groups samples even does a user login, does it?\n. That uses the ClaimTypes.Role claim type for IsInRole. If you're using IdentityManager, then it's adding the role with claim type \"role\". \n. You'd create a different MR config for different scenarios.\n. Just create a new instance in your code where you know the tenant. \nNext question is where do you get the tenant from on each request?\n-Brock\n\nOn Sep 3, 2015, at 5:21 PM, aaronwjha notifications@github.com wrote:\nI'm not sure I follow. Are you saying it is possible to apply a different MR config to each tenant within a single MR instance? I've looked over all the docs I can find and don't see how this is accomplished.\n\u2014\nReply to this email directly or view it on GitHub.\n. So do you now understand what I'm suggesting?\n. So in your code that uses MR, MR expects you to pass tenant as params to various APIs. How does your code get that value?\n. So if you're doing DI then you'll have to do some callback to create a custom MR config for the tenant from the URL. Check the DI docs on the version of Registration that accepts a delegate.\n. I don't follow.\n. Sure.\n. Yes, email can be specific to a tenant.\n. Not sure. It's unrelated to anything in .config (meaning there's no use of <machineKey> for exmaple). The only thing I can think of is if the iteration count is somehow broken.\n. Right -- the only expiration would be something your app enforces. Thanks for the update.\n. No plans right now to update this to async/await -- I'm just too busy. \n. Closing as dup of #568\n. Odd. Not sure, someone will have to debug it :)\n. So all set now? We can close this?\n. No idea right now. Is there something that prevents you from using it now in ASP.NET 5?\n. Well, the core of MR is separate from whatever cookie middleware you use. So in theory MR should work just fine w/ ASP.NET 5 -- you'd just need to bridge the gap with a ASP.NET 5 specific AuthenticationService (the thing that manages the cookie).\n\nAlso, though, to make MR more ASP.NET 5 friendly, I'd really want to make some breaking changes and make everything Task-centric. That's more work/time I don't have right now.\n. Well, if you can come up with a proposal then I'm happy to consider it. Maybe just another ctor param for the from?\n. Sure, send a PR if you'd like.\n. I think a breaking change would be ok since it's work to support ASP.NET 5. I should start a new branch for it for the time being.\n. Since we're talking about breaking changes, I think I want to have the various APIs that gen a key (email, sms) to return that string as a return value. To me this is one of the most confusing parts for people using MR (rather than using a event handler).\n. Another thing I thought of -- all async. If async is ever going to get into MR, then this would be the time.\nThoughts?\n. Sorry -- I missed your recent questions. Yea, I'm not sure about ASP.NET 5. If we do, then perhaps a new project name/assembly.etc -- I've not had time to think about it fully. Also, RC2 will bring about some changes... though, not sure how many would affect us at this level.\n. So do we need a new repo, or will these changes be usable from an old ASP.NET/.NET project? IOW, will these changes move MR into being more like a PCL?\n. If we're going to rip off the bandaid, then why not support both. \nTo be honest, I was on the fence if I wanted to continue MR into ASP.NET 5/Core. ASP.NET Identity 3 technically has all the features necessary. The only real reason to keep working on MR was to help people support existing use. And maybe this would even mean a new project to help migrate from MR to the new ASP.NET Identity 3.\nAre there features in MR you feel are more useful than what's in ASP.NET Identity 3, such that it warrants the effort porting this to the new runtime?\n. Maybe we start with a rev to support the minimal changes for ASP.NET Core. After that then we could maybe discuss having you contribute/fork to an ASP.NET Core version.\n. I think I did :)\nI did not meant to say that the next minor update of MR (mainly the one you're working on) would work on .NET Core. If we or someone wanted .NET Core, then that would require the \"latter\" option I suggested of forking and making a new repo specifically for that platform.\n. It's not a problem -- I don't have any cycles to put into this, so it's no rush for me. Plus there will be many changes in RC2 so it's ok to wait for that.\n. https://github.com/aspnet/Home/wiki/Roadmap\n. > Are you getting much requests for support on using MR in RC1\nNope; this thread is it.\n\nIf so, I could go ahead and write a wiki detailing how I got up and running. It's not altogether too involved but it did take me some time to get all the pieces in place. LMK\n\nOnly if you really feel you need to or someone else here asks. Otherwise I'd save your energy.\n. I still think there are many ways in ASP.NET Identity to shoot yourself in the foot that MR prevents.\n. I think it's a good idea. It would certainly be a major breaking change. \n. Sure, and I know I was vague :)\nI just honestly don't know if I have time in the next ~6 months. Is someone here interested in stepping up and helping maintain?\n. I just spent a day going over all of the new AspNet Identity 3 code and features. Some of the messiness of AspId 1&2 has now been cleaned up and simplified, IMO (much of that is due to a standard DI system in ASP.NET Core).\nI then went and looked at the readme here to see what the purported feature list was for comparison. AspId3 has all of those features covered except for the event-bus feature, nested role definitions, and multi-tenancy. On top of it, AspId3 is async, has explicit storage for tokens (minor feature IMO), security stamp validation, and arbitrary claims on roles (which somewhat makes up for the nested roles feature).\nAt this point, I don't think it makes sense to try to push MR forward into ASP.NET Core now that AspId3 has finally caught up with (and in many regards surpassed) MR.\nWhat I could see going forward is: 1) a MR user store in AspId3 to maintain the existing MR DB/schema/data, and/or 2) a migration tool to move the MR data to AspId3. In either case there is a need to improve on AspId3 with an iterative password hasher (as I did with IdentityReboot), especially if existing MR data needs to be moved to AspId3. Multi-tenancy is easily added by tweaking the AspId3 code in the DI system.\nIn a sense, MR has served its purpose -- I'd like to think it somewhat forced Microsoft (and perhaps guided them even) to address the state of their identity management and bring it into a more modern time. I appreciate all the of kind and encouraging words I've heard about MR.\n. No they don't force the same set of requirements around those areas. \n. Yep, all correct and agreed.\n. My opinion is that if any of these features are desired in .NET Core, then they should be added on top of ASP.NET Identity 3.\n. You'd dynamically change the stores based on the tenant in DI -- this means you need to implement the delegate to create the dependencies.\n. I mean the IXxxStore or DbContext instances. If you have one DB with a tenant column, then you'd need to instantiate the IXxxStore or DbContext and set a tenant property so that it can be included in the query. The other approach could be to inject the IHttpContextAccessor int eh IxxStore or DbContext.\n. I've never tried to extend MR's user account class with custom collections so I really don't know if it's possible and/or if it'd work. Usually if you need other tables, you do this in a custom DbContext layer (with new DbSets). If you get it working keep us posted.\nAlso, why are you adding roles separately and not just using the built-in claims support? Roles are just claims.\n. So from my understanding this means that the app is generating the code, right? That would be some rework to MR to allow for the code to be generated and validated by an external app. I think there's a PR for something like this (not sure since I've not had time to look into it) https://github.com/brockallen/BrockAllen.MembershipReboot/pull/552\n. Can we close this if it's a dup of another issue?\n. Yep, I see that. I'd have to spend some time thinking about this (and adding unit tests since none cover this ATM), but I think it's probably ok to add.\n. MR stores a hash of the key. So when you're looking up the account you need to also hash the incoming key (which MR does internally when using the various APIs to find an account by key). If these return a non=null account, then it's valid./\n. yes\n. I don't think there was a real reason -- I guess I assumed there was no reason to get at them. Can you show me a snippet of code of what you're trying to do? \n. Yes, it's not ideal. Have a look and let me know if you would like to improve on the code and we could discuss a PR.\n. Well, if you can change the existing code so there's no breaking change, that'd be best.\n. thanks!\n. What's the motivation for this? Can you provide some context.\nIt's a breaking change, you realize.\n. No problem.\n. Sounds like a web api that needs an access token to change the user's password.\n. In IdMgr and in IdSvr you might be creating 2 different MR configs with different require account verification settings?\n. Well, if you want them to use the same MR settings, then factor out the code that creates the MR config into some common location and use that across both.\n. So you're real question is about the 2 different DI systems? This is a limitation of OWIN and Katana since there's no common DI system in the spec.\n. Those are 2 different Registration classes -- check the namespaces. IdMgr and IdSvr aren't using the same implementation.\n. So you will build a new API that changes the password. In that code you will connect to MR. This API has nothing to do with IdMgr. To secure this API you need an access token with a scope. This scope represents the user management feature and it's only issued to your client app that the user uses to manage their account. You get tokens for this app the way you would any app you build that uses IdSvr.\nI guess this is all obvious to me and it's not clear what else I can suggest. Perhaps just the concept that the feature needs to be it's own app is what you need.\n. IsAccountVerified is a config property. The instance of the MR config in the app where passwords are validated controls if they're allowed to authenticate if the account's email is verified. So if you're using IdSvr for logins to your other apps, then in that instance of the MR config don't set require account verification. \nOr am I still not answering the question? It seems that there are 2 or 3 questions in this thread (or again, I'm simply not understanding).\n. Hmm, which one of these was the one you wanted to submit?\n. Ah yes, certainly a bug. I'll fix it locally. Thanks\n. The expected/normal flow is this: When a request comes in the new email is stored in the state column, and so the old email is not lost. The email is not overwritten until the new email is confirmed.\nIf you're getting different behavior, then you might be using SetConfirmedEmail? Or somehow bypassing the expected workflow?\nAlso, there's a separate column/property to track if the email was confirmed. The confirmation set this.\n. Really sorry for letting these issues get so old without attention.\nThe intent with RequireAccountVerification was the prevent the user from logging in until they confirmed their email. \n. If they're using the external provider workflow then use a different MR config that does not have an email confirmed handler registered.\n. Well, IdSvr uses its own DI system so you should look at those samples. https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/MembershipReboot\n. I have no inputs on what DB you should use.\n. DI is unrelated to MR -- You'll have to figure out the DI framework you want in your app and understand how configure it. Sorry.\n. Hmm... well, if MR is configured to require an email and the external provider doesn't have one, then how would MR allow the account? I don't think that scenario should be allowed. OTOH, if the MR config says an email is not required, then pass null for email, as that seems allowed.\n. Well, email being verified is for password resets. If you only have an external account then you don't have a password.\n. Really sorry for letting these issues get so old without attention.\nSo are you all set, or do you think there's something further in MR that you'd like fixed/changed?\n. I guess it's possible unless you put a constraint on the DB. I'd check and see if 2 rows are there.\n. GetByID is failing and it's searching by that ID -- so check for that ID being duplicate (but that doesn't make much sense to me).\n. Well, given the exception and the call stack I am unsure. From the code it looks like the ID is being searched. One last thing to check is to see if the verification key is duplicated.\n. The last idea is to enable logging -- that way you can watch the path as the execution flows thru the code.\n. Good to hear. Thx\n. Hmmm... so should the default EF repository logic change to just call new?\n. That's EF giving the error, since MR is just passing along the connection string.\n. Does it make sense to allow two accounts to share a mobile phone? Doesn't sound very secure to me.\n. IdentityServer will give you SSO. Within IdentityServer you will need your user database, and MembershipReboot can manage that piece. As for the many other questions, you should read the docs for IdentityServer.\n. You'd have to build a web api to use MR -- that would be all your code.\n. Just Add or Remove.\n. There's a IQueryable property on the UserAccountService (if your DB layer supports it), or you can hit the DB directly via your DB framework.\n. Yes.\n. Well, you could handle the right events in MR and use the phone number to deliver the password reset, but the logic about mobile being verified is not in MR core for password resets. \n. Not sure off the top of my head -- things like this require a lot of time to think about it, since we're talking about security and ensuring there are no attack vectors.\nIn short, to use mobile for password resets you need to first ensure that the mobile phone has been confirmed first. Once that's done then it can be trusted for password resets.\n. I think this PR is dead, no? It's quite out of sync now.\n. Okies.\n. Give it a try :)\n. Leave this open so I remember to come back to it when I have some time...\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Really sorry for letting these issues get so old without attention.\nYes, I see. I think you have a really good point but to be honest you're more in the middle of it than I am (meaning I think you've got a better idea on perhaps a solution than I would). Perhaps we do need more verification purpose flags.\nDo you have a workaround, or are you looking to get a fix into MR? If so, then I'd suggest first building several unit tests to illustrate the broken workflows and then we can fix them one by one. Would you be interesting in forking and then working on a PR?\n. Hmm, really not sure.\n. Maybe it's just a DB failure?\n. It always fails from this same place?\n. I guess I'd wonder how the DbContext is configured in DI -- per-instance, or per-http-request?\nFrom the call stack, it's hard to say if it's anything in MR, or from EF, or from SqlServer...\n. This looks like you're doing all this setup per-request, which seems reasonable. None of the MR code is designed to be multi-threaded. Out of curiosity, when is the DbContext disposed? \n. I don't recall, to be honest, when it's disposed. I know there was a PR at some point to allow the mechanics to be configurable.\nSo looking thru the code, I don't see anywhere the ctx is disposed -- that's normally the job of the DI layer.\n. thanks.\n. Self-hosted? Well, depends what libraries you were using. There's a SystemWeb for IIS hosting, and an Owin for Katana hosting.\n. Well, if that's the case then I don't think you should see any code trying to access HttpContext.Current in the OWIN hosted scenario.\n. So I'd suggest setting up the trace config to see the log file. This might help you diagnose how far in the code it gets and then where/why it starts to go south.\n. The .NET trace mechanism is used for logging. One of the samples have the trace listener configured in web.config -- you can look for that for how to set it up.\nAh, here it is:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/SingleTenant/SingleTenantWebApp/Web.config#L167\n. The verification key is hashed so that if the DB is compromised that the attacker can't use the confirmation codes.\nAs for it not matching -- maybe case sensitivity in the DB query?\n. I'm sorry you had problems. I do have a day job and have to attend to those meddlesome burdens. That means I can't spend the time on your schedule to address your issues. I wish there were more time in the day, as I'd love to be able to help. I really would. If you have more patience then I can get to it eventually, but if you need immediate support then pick a library where you can hire someone to help. Or build one yourself.\n. > > The verification key is hashed so that if the DB is compromised that the attacker can't use the confirmation codes. As for it not matching -- maybe case sensitivity in the DB query?\n\nOk, well, I didn't respond till now, because it was hard for me to think of how do I put this. I don't know what to make of what you just said, I didn't alter the db query, so I don't know how that makes sense.\n\nSo this verification key is what's sent to a user. It's the key that proves the owner of the email account received the email. You don't want this stored in the DB in plaintext, as an attacker with read access to the DB could then lift the value and resubmit it to compromise the system. This is more of a threat around password reset, rather than email verification, but it's the same column in the DB so for both scenarios the value is hashed.\nSo, if the key being sent is not matching, then either the DB query is case sensitive (I don't know what DB you're using or how it's configured and that was my first guess), or there's simply no match. There could be no match because you generated a new key and overwrote the prior value in the DB (for example if you tried to re-send the verification key, or tried to register a new email). This would be triggered by your code so you'd need to watch your DB to see why it changed from the time it was generated and sent to the time you tried to use it to verify the account. \nDo the samples work for you as-is? Usually that's what people do -- get those working as expected, then figure out the deltas from the samples to your code.\nFrom your prior issues above, it sounds like the verification key not working was not your original issue. I guess you solved the null reference exception?\nAs for the rest of it all, I'll basically don't know what the issue is and I can't tell from the info you've posted. I've tried to give the hints that I'd use to try to track down the problem. As for the last question -- I can't recommend altering or overriding aspects of MR unless you fully understand what MR is doing.\n\nOk, since you didn't respond, I guess I'll have no choice but to\n\nThis and the other comments that exhibit a sort of blackmail-like passive-aggressive tone to force my hand is the main reason for my frustration expressed in the above post. Perhaps I misread them. \nI'll admit there is so much ponderous text that it makes it difficult to wade thru the information. Maybe others respond better to that verbosity level, but it's simply impedance for me trying to understand the issue and provide help. I'd recommend concise questions without the conversational aspects (such as \"Happy New Year\").\nSo have a Happy New Year.\n. > I write a lot of words so that you can have as much information about this as possible.\nThis is why I'm slow to respond. It takes a lot of time to parse and attempt to make sense of it all given the verbosity level.\nBack to your question/issue -- From all the other stuff you just said, it sounds like perhaps what's being sent in the email is the wrong value. Are you sending the hashed value? If so, that's the wrong value. You need to email the user the verification key from the account created event. This is the property to send: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountEvents.cs#L24\nThat's what the default email implementation does: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/Notification/Email/EmailNotificationEventHandlers.cs#L102\nThe sample doesn't send emails at all -- if you notice, emails are just written to disk. See this line of config: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/SingleTenant/SingleTenantWebApp/Web.config#L155\nI suspect all of this originated because you couldn't get the sample to work. So your changes to send the email is where the original error arose (by sending the wrong value). Just the latest guess.\n. MR uses an event bus. In retrospect, it was not the right design (or something easier should have been used), but it is currently the way it is. The wiki might be slightly out of date but IIRC it covers some of these basics, no?\nYou need to register an event handler for those events to send the key. That's the short of it.\n. Something like this:\npublic class CustomEmailEventHandler : IEventHandler<AccountCreatedEvent<UserAccount>>\n    {\n        public void Handle(AccountCreatedEvent<UserAccount> evt)\n        {\n            // send evt.VerificationKey to evt.Account.Email\n        }\n    }\nand then register it with the MR config:\nvar config = new MembershipRebootConfiguration();\nconfig.AddEventHandler(new CustomEmailEventHandler());\nThat's roughly it. You'd need to implement additional IEventHandler<T> for the other events you cared about from here: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountEvents.cs\nAs for support and which library to use -- you will certainly get more support by using Microsoft's ASP.NET Identity -- many more people use that and thus there are more people to support it (community & Microsoft).\n. Go ahead and answer it on SO if it's the right thing. No worries, and thanks for following up here.\n. Not sure, but if you want write a unit test to reproduce it then we can get it fixed. Also, it might be just easier to send a PR that checks that for null.\n. Thx @christianacca \n. what @nicholas-brooks said :)\nand to clarify -- each hashed password should be different because of the salt.\n. Any tests to add, perhaps? :)\n. you have the power!\n. BTW, was this a breaking change? IOW, how likely would this break any existing code?\n. Ok, great. thanks.\n. Closing since we decided to not carry MR forward to ASP.NET Core.\n. Usually when you have different scenarios where you want different event behavior, I recommend having different configs that have the different event handlers for those scenarios. Then you use the one you want/need for those scenarios. It's only really tricky when you have multiple scenarios in the same project (and thus complexity of DI).\n. Long thread here: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/568\n. You need to register the SAM http module like this: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/SingleTenant/SingleTenantWebApp/Web.config#L69\n. Well, depends -- do you allow users to sef-register? If so, then they can discover usernames that way. If not, then you can always put a constant time middleware to ensure all login requests always take the same amount of time.\n. It'd be something like:\napp.Use(async (ctx, next)=>{\n    var now = DateTimw.Now;\n    await next();\n    var diff = DateTime.Now.Subtract(now);\n    if (diff < TimeSpan.FromSeconds(5)){\n       await Task.Delay(TimeSpan.FromSeconds(5).Subtract(diff));\n    }\n});\n. RequireAccountVerification: https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Security-Settings-Configuration\n. Well, RequireAccountVerification tells MR to allow logins even though email is not verified. If you want something in-between then you'll have to do something else.\nGive me a high level of what you want to add before you do the work. Unless it's small, I don't know how much disruption I want to introduce.\n. Honestly I don't like letting users in until they've confirmed their email. It allows them to use the system and accumulate data in the system before they have a safe way to reset password. If the email that was entered was incorrect, and the user forgets their password, then they have no way to get back into their account without an admin helping.\nNow not everyone cares, so that's why I added the RequireAccountVerification to allow people to relax that rule, but I think it's the wrong approach.\nThere might already be another hook somewhere in the MR pipeline at login time where you can enforce your logic. You'd have to look...\n. I don't see how Slack verifies the user's email -- do they require a password when verifying the code sent to the email?\n. > I wonder how they would handle such an occurrence\nExactly. At that point the account is hosed until an admin intervenes.\n. > how would you handle users who can't successfully enter their password upon account activation? \nAn admin must intervene. \n. Yes, if you enable that flag your entire app has to be tenant aware, meaning you need to use the APIs that pass which tenant you're using.\n. Well, they're all the same APIs, just overloaded versions that accept the tenant param. My point is that the app needs to know it's using the tenant versions of the APIs.\n. Your assumption was incorrect. If you want multi tenancy you need to pass that as a param. MR doesn't know what a tenant means to your app, thus the requirement.\n. thanks (my spelling is awful)\n. You'd change your user service in IdSvr to issue whatever error you want when this condition arises.\n. You should really use your own IEventHandler<T> rather than the built-in one. The built-in one is mainly for testing/dev sceanrios. \n. MR uses an event bus architecture for raising notification when stuff happens in MR. Stuff could be like \"a user logged in\", and other stuff could be \"an account was created and we have a email confirmation code that can be sent\". MR then provides a default implementation (handler) for these and uses a message formatter object and a message delivery object to format and send the messages. The default formatter is what then uses the \"AppInfo\" to know what URLs to embed into the emails. And within that, yes, the \"Confirm change email url\" is used for account creation and changing emails, because it's the same operation within MR (although perhaps different within your branding). You can always read the account and know if it's a new account or not -- there's an extension method for that.\nTo edit the email content you could either: 1) replace the built in message formatter, or 2) not use any of the default messaging architecture and just implement the IEventHandler<AccountCreatedEvent> yourself and do anything you need/want. You'll have much more control if you choose the latter.\n. Sure, that seems fine. Thx.\n. I think I started a sample for that here: https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/samples/CustomUserAccount/CustomUserAccount/Program.cs\nAs for migrations, you might want to build your own migrations. When I started MR I tried to maintain migrations in the project, but then realized that was the wrong approach. Migrations should be the app's responsibility, not the library's.\n. I think I prefer (4).\n. Well, there is no real functionality around password expired -- it's really just a helper to calculate if the password is expired. Your UI would need to check it and enforce it in some way.\n. If you don't care about the event, then don't register a handler for the event.\n. How do you know with the old system which algorithm to use?\n. There's an interface called ICrypto on the MR config (IIRC) that does the hashing. Not sure you can get away with implementing that interface, since I don't think any account info is passed (just the password to hash or verify). There's not a great abstraction in MR to support exactly what you're looking for. \nIf you could merge the alg into the password column, then you might get away with it.\n. I'm a bit confused (but I've also not looked at the sample in a long time)... the 2fa cookie is if you're doing, well, 2 factor auth, and it's not really related to password reset. It's a temp cookie to remember who you are while you visit the 2fa page.\nPassword reset is just a flag that needs to be checked and force the user to change their password -- that's after they've logged in properly. \n. If you want a temp cookie (like 2fa is doing) then notice how the 2fa cookie MW is configured to be passive -- this means you must explicitly call Authenticate in the code to have the cookie read. You don't automatically get the user populated.\n. I think that's done when the email is confirmed (IIRC)\n. Well, that was certainly never the design (meaning custom events) but if you can get it to work, then great.\n. > Wouldn't it make more sense to add a \"SuccessfulLoginFromExternalProviderEvent\" that is raised in AddOrUpdateLinkedAccount ?\nPossibly -- so you're looking for a native event from MR for this activity? Open an issue in MR.\n. > This is MR ;) \nOh jeeze. #embarassed #toomanyOSSprojects\n. Yea, those seem to make sense.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Not sure yet. See this thread: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/568\n. There's an ICrypto interface you can plug in.\n. BTW, do you have a bcrypt implementation in .NET? If so I'd be interested.\n. I was just asking which bcrypt library you were using. But yea, if you do an ICrytpo using it, let me know. I'm interested in both :)\n. Any update on finding a good .NET based bcrypt?\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Sure.\n. There is some client cert support -- check the samples. Basically, MR assumes IIS has done the cert validation and then your loign page needs to pass that along to ask MR to signin (meaning find a matching account based on thumbprint).\n. Yea, you're going to have to copy those values. Or pass the context... but not sure what sort of trouble that might get you into.\n. IIRC, I think it depends on the state of the user account -- take a look at the code to see why (i don't recall off the top of my head).\n. You need to set the iteration count to a number that feels right for your production scenarios.\n. Changing that value will only affect new accounts. The existing accounts will use the old iteration count. You will need to write some logic at login time if you want to rehash existing account's passwords. \n-Brock\n\nOn Apr 22, 2016, at 11:17 AM, jlehew-sd notifications@github.com wrote:\nOk, changed the passwordHashingIterationCount in web.config to 1 (from 0) and the 5.43s time above is now 5.14s. It improved it slightly but needs to run under 1 second if possible.\nOur production system is in beta and has less than 5 concurrent users. The times above are for the 2nd login attempt to ensure the web pages, data, etc. are already JIT compiled and in cache.\nAny other suggestions?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\n. Also, I forget how the internals of MR work when the account's stored count is different than the current configured count. If it does nothing, then perhaps there's an enhancement here that should re-hash and store with the current configured count.\n. Some reading: https://brockallen.com/2014/02/09/how-membershipreboot-stores-passwords-properly/\n. Yea, I think I've seen this before when there's some version mismatch. Are all the nugets up to date.\n. You could possibly handle the locked out event and then toggle the other flag (is login allowed, IIRC?) which is more explicit/manual.\n. Aren't there extension methods or other help APIs to get at it? I don't remember, to be honest, and would have to look at the code.\n. Use AddCommandHandler on the UserAccountService. Looks like an oversight that the config command bus is not getting wired up. \n. https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountService.cs#L132\n. Well, you'd have to intercept the creation and add it there. \n\nIf you want the config done, then send a PR  :)\n. > Thank you for the very kind offer but I can't share the code with you as it doesn't belong to me.\nThat's too bad that the company is ok with using \"free\" open source, but not willing to contribute back to help fix bugs or improve the software for others. That's not a personal attack - it's just a commentary on how businesses are behind the times and are mired in myopic legal policies. It sort of kills my motivation to help \"the community\".\nAs for pointing you in the right direction -- I was suggesting that you look at how the existing code works in the UserAccountService ctor and try to get that to merge in the commands from the config object.\n. Sure, I get that (I'm also a consultant). Personally, I don't sign contracts where I'm prohibited from contributing back to OSS projects that are being used by the company/project. Again, wasn't a personal attack on you. It's just another straw on the camel's back.\nHopefully my previous comment should be enough to help you move forward.\n. No worries on the confusion. \n\nShould I create an AggregateCommandBus\n\nYea, why not - it'd be consistent then. Then just merge the two lists -- one from the config and another from the member variable on the user account service.\n. No worries. Is this now working for you with the commands in the config?\n. Any chance of getting this on dev instead of master? Thx.\n. Finally got around to it. thx.\n. Can you explain the use case for multiple certs for one user?\n. I'd have to think about this. It's certainly not a hard change... but it might affect current uses. Maybe a setting that would say this is allowed?\n. I don't have time. You can propose a PR.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Ok, cool. Thx.\n. > Understanding that newly added claims do not become operative within a current session - the user has to have logged in to see the effect of a new claim.\nOr you can just re-issue the cookie if the app knows the claims have changed.\nIn any event, this issue is not a MR specific problem -- it's a data in 2 places problem. If the data changes then your app somehow would need to know it's changed and re-issue the cookie.\n. I can take a look when I get some time...\n. Sorry I just looked at this today. How are you dealing with this now (without this PR added)?\nI'm just worried that others will see this here and expect the core library to implement/support them.\n. >  It makes me wonder if this style would make is easy for contributors to implement new 2fa types as contrib modules?\nDon't know, but I don't foresee having time to curate such additions/modifications. \n. So what changes are you thinking are necessary to MR?\n. Sure, as long as it's not too intricate -- if we merge this then I'm going to have to understand and maintain it.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. I've not really been involved in MR for some time, so I'm preparing for it to be officially \"no longer supported\". ASP.NET Identity is more widely used, and now finally (with v3) has (for the most part) comparable features. As a single individual I can't keep up with them. If you need these feature then you're more than welcome to fork, or if you're interesting in taking over maintenance here then I'm willing to consider that.\n. Send me an email and we can setup a phone/skype call.\n. Cool, thx. I hope it's all right :)\n. Yea, you're now fighting in the world of EF. I don't have a good answer for you other than perhaps us ea different DbCtx for your other data.\n. You can always customize those emails, and maybe just for that scenario (meaning logging in via external provider).\n. Ah ok... good catch. Do you have a suggestion on how to fix it?\n. Or add a new column for \"has logged in\" (or \"is new\" or somesuch) that specifically tracks this scenario. I used to have this distinction a while back... and of course i forgot why i changed it.\n. Yes, agreed. But given that I don't foresee making this change, I'll close this issue. Thanks.\n. odd that it was in there... maybe merge problem. thx\n. MR is just an API to read/write to a user database. Use MR anywhere in WCF you would have otherwise validated a username/password.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Mainly time/bandwidth. And without the time, I don't want to add a feature such as this that requires time to think about the security ramifications.\nDoes Google allow re-use of the same mobile number for 2fa?. Sorry, I don't have the bandwidth to try to make this change.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Submit a PR please to dev.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. That's just a different DI system. I'd go read their docs. \n. Is there a reason this library needs to newest? It's more flexible to leave it older and let hosting apps choose to grab the latest.\n. I got some push back from others, thus my reason for asking. Thanks.\n. > When created this way they don't want the initial Account Verification email to be sent out to the user. \nI can't tell if you found a workaround, but my suggestion is to use a different MR Config for that instance of the UserAccountService (IOW, don't register for that event).\n. thanks!\n. Submit a PR please (on the dev branch).\n. Hmm, not sure -- debug into it. Looks like there's a nl-nl resx, so maybe it would be better to just rename it to nl.\n. If you can propose a PR to merge it all into one, I'm happy with that.\n. Not sure... You might have to debug into it all to uncover the issue.\n. Ah sounds like you're deriving from the entity base and adding your own properties. I guess the raven code thinks it should store those as well.\n. 9.0.0 was released and the translations should now be with the one package. IdentityServer manages its own cookie. You'd not be using the OwinAuthenticationService if you were using MR with IdentityServer. You'd just use the APIs to validate credentials. See here: https://github.com/IdentityServer/IdentityServer3.MembershipReboot/blob/master/source/IdentityServer3.MembershipReboot/IdentityServer3.MembershipReboot.cs\n. > It will only tell if credentials are valid or not, but won't sign user in, correct?\nCorrect -- IdSvr signs them in.\n\nIs there some way to seamlessly sign user in (get a token from IdServ) without having him to enter credentials at IdServ?\n\nTo get tokens from IdSvr you need to authenticate.\n. You can always re-issue the cookie at IdSvr with the IssueLoginCookie OWIN extension: https://identityserver.github.io/Documentation/docsv2/advanced/owin.html \n. That's because ids are/should be unique. If you're doing multi-tenancy by separate DBs, then you don't need the built-in multi-tenancy feature of MR, IMO.\n. > That will require a straightforward change to dependency injection configuration. \nYea, this is a common way to achieve multi-tenancy. Just have the DI system dynamically inject the right store/repository to the right tenant DB. \n. Ah quite possibly. If you feel like helping out, you could write a unit test to show that it's broken. That way when it's fixed, we have a test to show it's fixed (forever). Also, I'm on holiday for a few weeks, so I won't have time to really look into this until I'm back.\n. Any update?\n. Depends. Are the users doing the modification from the same system? Use whatever makes sense for your system. The GUID is the unique identifier for the user. The int is just a DB index/key.\n. >  I scanned through the code, and it looks like it is also only persisting the \"Type\" and \"Value\" fields of the Claim objects.\nYou are correct.\n. I doubt it'd be easy to extend. Perhaps overloading the value would work... you could do a decorator pattern on the repository...\n. Why does LoadUserProfile need to be true?\n. Right, so same as the other issue -- this is not a MR issue, it's a WIF issue.\n. To be honest I've forgotten what the original reason in WIF was... so no, i don't have an answer off the top of my head. Sorry.\n. Yes, which is configurable.\n. Yes, that's possible as well. You use a different MR config for those scenarios (where an email notification is not registered). Also, there's an API to mark an email as verified.\n. https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountService.cs#L1870\n. well, i'd use the APIs to create a new account. the main issue is if there's already a user with the same username/email.\n. if there's already a user with the same name, do you know if it's the same person or a different person? is it safe to delete it?\n. Ah right... well, you could just change the tenant column in the DB, but like I said, you need to make sure there is no other username/email.\n. search the issues -- this has been discussed before\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. Are you using WIF or Katana for your cookie management?\n. Well, you can set it to None, but then no redirects happen to your login page (as you saw). IIRC, you can still the forms auth redirect and it will kick in and redirect your users (even though you're not using forms auth for actually logging in the users). The other option is to build a module to redirect on a 401 response.\n. Given that I don't foresee making this change, I'll close this issue. Thanks.\n. I'll do this manually since the migrations weren't quite done right. No worries -- I'll get them.\n. there have been several updates recently and we've not done a release. we should chat about getting a new build/release.\n. thanks!\n. the wiki is about all there is (beyond the samples). sorry.\n. Hmm, not sure. More info needed I think.\n. No idea what the Discriminator column is.\n. yes, 9.0 was expected to contain some breaking changes. you can submit a PR for the web host if you'd like.. Ask @christianacca about this. Ah ok -- sorry, I had forgotten about the rename issue. I'll try to get these to nuget soon.. I think I just successfully pushed them -- please test? Thx. MR doesn't need anything special for load balancing. Your cookie library might though.. I would like to build a  migration helper (if I had the time). As of now, I don't have the time. If someone wants to start one, I'm happy to review any part of it.. Thanks. No timeline yet on a migration tool yet (since no direct customers need it right now). But yea, basically what's needed is to look at the 2 object models and find out how to map from one to the other. Many of the concepts are the same, but some don't map.. You can plug in your own hashing logic in AspId3, so that logic could be carried over.. > asp.net identity however I just went looking for an updated package for that and noticed that it has not been updated since mid 2015\nI'm suggesting ASP.NET Identity 3. If you're still on ASP.NET pre-core, then I don't see any reason to change. Migrating from ASP.NET Identity 2 to ASP.NET Identity 3 will be just as much work, so no need to do it twice.\n\nThe other thing i'd like to offer is to take on the maintenance of MembershipReboot\n\nThere are one or two others that have offered this. I'd suggest getting on a brief call all together to see what you all have in mind.. Maybe this helps: https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Implementing-A-Custom-Storage-Mechanism. Whichever you want. All of those are just samples.. If you have an existing DB for users, then I don't see why you want to use MR. Just implement the IUserService in IdentityServer. . yep, looks like it. thanks.. IIRC we don't want to trust the new email until the new email has been confirmed. If you change it prior to that then the account is in an inconsistent state.. You want the lowest netstandard that is needed to make it work.. Well, you have a point... so if netstandard2 has it all, then use it.. ",
    "drewid": "Thanks.  I am absolutely fascinated by the idea and any guidance would be a big help.  Trying not to flail.\n. Hmm - so that's where that is set...  Well that should help (editing the App_Start/NinjectWebCommon.cs file).  Will check and get back.  My settings were definitely right.\n. There is still a problem down in smtp.Send for some reason. in SmtpMessageDelivery.cs.  I modified my settings with yours, but they may be incomplete as it is throwing an exception.  Still digging\n. Will try - elmah's not setup on the MVC project that I have and it is doing a weird timeout.\n. It was just timing out.\n1) Once I figured out the commenting out of kernel.Bind().To(); that really helped.\n2) I am using an Amazon EC2 instance and for some reason, my provider I guess just wasn't accepting SSL port 465 authentication.  Once I switched to non-ssl and part 2025 it finally worked.\nThanks for the help - the email works fine now, and hopefully this helps someone else. \n. Yes, Yes, Yes please.  I was/am going to be trying to implement but if the expert took a shot ;)\n. Quick question / comment - would you then have a separate table like in simple membership to map the user and source?\nOne other slight mod I would think is to add a column in the claims table for the source of the claim?\nSounds simple and straight forward?  Am I missing something?\nThis capability is critical to what I am doing so will try to plow ahead.\nThanks, and again you rock!\n. Hey Brock - yes regarding multi-tenancy issue.  I have been updating the sample app and have it working (so far) in multi-tenancy for registering, confirmation and login.  Working my way through.\nI have gone ahead and added a session variable in Session_Start for multi-tenancy as I am basing my  tenancy off of the subdomain of the main domain.  I would prefer some other way to do that, but am not sure if there is a way since it is needed per application instance.\nUnfortunately it does not cleanly fit in the App_Start folder and the App_Start call in Global.asax.cs since it is per application instance and not per application.\nI have the following.  Any suggestions are appreciated.  It \"does\" take into account the multi tenant and default tenant settings you have for the application.\nIn Global.asax.cs:\nprotected void Session_Start()\n    {\n        TenantConfig tenant = new TenantConfig();\n        Session[\"Tenant\"] = tenant.Tenant;\n    }\nIn a file called TenantConfig.cs I have the following.  It is in the App_Start folder for now.\n//Am including this in the App_Start folder but is really associated with Session_Start\n    public class TenantConfig\n    {\n        private string _tenant;\n```\n    public string Tenant\n    {\n        get\n        {\n            if (SecuritySettings.Instance.MultiTenant)\n            {\n                _tenant = GetSubdomain(HttpContext.Current.Request.Url);\n            }\n            else\n            {\n                _tenant = SecuritySettings.Instance.DefaultTenant;\n            }\n            return _tenant;\n        }\n    }\nprivate static string GetSubdomain(Uri uri)\n{\n    string subdomain = null;\n    if (uri.HostNameType == UriHostNameType.Dns)\n    {\n        string host = uri.Host;\n        int lastIndex = host.LastIndexOf('.') - 1;\n        if (lastIndex > 0)\n        {\n            if ((lastIndex = host.LastIndexOf('.', lastIndex)) != -1)\n                subdomain = host.Substring(0, lastIndex);\n        }\n    }\n    return subdomain;\n}\n\n}\n```\nIn files like RegisterController, I am then referencing the session variable for tenant:\nthis.userAccountService.CreateAccount(Session[\"Tenant\"].ToString(), model.Username, model.Password, model.Email);\n. Hmm - I do see what you mean... In general I don't like them, but trying to then figure out how to handle any conditional decisions - display/theme/colors/options that would be prior to login.  Maybe just a lookup where needed.\nIn this case since the value is based off of the url - the session should work across any webfarm scenario, etc. since if it doesn't have a value it could always get reset.  BUT my case is specifically an edge case I guess.\nBTW - definitely agree with the shopping cart scenario.\n. Never mind.  The version of System.Web.Webpages is different (more current) than the one that is available in Nu Get conveniently but is not current.\nOnce I reapplied the ones you were using it went just fine... argh that took a crap ton of time.\n. Hmm, like the thought about the SecuritySetting.\nUnfortunately I have been in too many situations where an key identifier was used that was not just \"an identifier only the db knows about\".  Thus when the username type identifier was changed it caused all sorts of issues necessitating cascading updates and db craziness.\nFor just dealing with the two tables it wouldn't be needed, but the minute you starting referencing other tables...\n. Perfect with me - wish I would have seen this earlier to comment\n. any luck yet on a code change?  I bow down to the expert ;)\n. I actually think the identity provider column in the UserClaims table would work best.  That way it is self identifiable who the claim is coming from.  That way you can have a central user and have all the different accounts/ids from the identity providers all linked to the same account.\n. So why did it go from int to guid?\nOr rather - was there never an int and that was my own construct before guid was ued (shaking my head as I have confused myself).\n. An additional comment/question which may be a religious question regarding guids:\nIn the question of ints vs. guids, guids are supposedly:\nHard to manipulate\nCauses indexes to bloat\nCan cause fragmentation\nCan increase the cost of table maintenance\nProblems are worse when a GUID is used as a basis for clustering \nWhat are your thoughts as an extremely proficient dot.net developer??\n. Looking forward to this - as in an earlier version I completely modified MembershipReboot to use an int instead of guid, but of course it does not allow easily for keeping up with changes (unfortunately MR uses int, would be fantastic if it was int - life would be perfect).\nMy needs are very pervasive to use a user identifier with storing information in many tables, and it seems to be that guid just doesn't scale anywhere near as much as int does on joining, searching and indexing, etc.\nA \"translater\" is necessary, so would be great if the additional association is possible without breaking everything (forward compatibility, etc.)\n. Am confused.  How do we just use the new stuff.  Is the old code needed?  Have not gone in depth on what the consequences are if I comment out the calls.\n. it is beta - but the strange thing is that when you go to nuget and install the standard EF - it tells you to use the beta if you are using SQL Server Compact as their are some \"issues\" with the current EF.\n. If you go to manage nuget packages for the solution it then prompts you to download missing packages.\nWhile that downloads the nuget packages for the BrockAllen.MembershipReboot project that still does not solve the issue where Microsoft.Bcl.Build.1.0.8 is missing.\n. Adding the Microsoft.Bcl.Build.1.0.8 package to the solution (used the LinkedAccounts as a temporary project to assign it) solved the problem.  You can then disassociate it with LinkedAccounts.\nAfterward reloading the projects you then need to also download the missing packages for the other two projects.\n. Last night...  Would like to help contribute.  Have forked MembershipReboot and am figuring out how to do commits with Github for Windows and Visual Studio.  Not really any good comprehensive tutorials that I have found.\n. Sure - there are some additional events, etc. which would be good to track.  With mods to the fork, that can help initiate discussions.\n. Will do and thanks for the SourceTree reference - looks really good, and things have just been too complex getting setup for no really good reason.\n. Yes, thanks\n. Understood.  Still trying to figure out why the purpose files are where they are though. :)\n. Am I correct in understanding that Groups has replaced Roles?  Not that clear, but it looks like it.\n. Regular MR itself is just a c# project, and EF, which is arguably even more of just a regular c# project is a web project.  Just making sure I haven't overlooked anything - seems like an accident/oversight on project creation?  Just checking as there is a lot to absorb and trying to make sure I understand everything.\n. Still lost in the nuances of what that actually means or gives us, except for the fact that it is a lot cleaner without it.  Not sure what the positive was before, or why it was originally architected that way.\n. Oh, duh... I see now in the path that the EF is after the repository and not before it.  LOL\n. Awesome.  Again, thanks for the tip.  Would have been lost without it.\n. I've been hearing very good things about NuoDB.  Will report back when I get things working.  Again, if someone beats me to it, even better.\n. Will take a look - in theory I am very excited.\n. Sorry; the error was itself enough to solve things.  Thought it might be something more complex and related to injection and/or dbcontexts and/or repositories.\nWith SQL Azure you have to add a clustered index no matter what.  For instance, For UserClaims:\nDROP TABLE [dbo].[UserClaims];\nGO\nCREATE TABLE [dbo].UserClaims;\nOnce you have your tables all have the clustered primary key it is very easy to swap back and forth between LocalDB and Sql Azure as the underlying plumbing in the project and web.config is the same.\n. Sorry - just saw this, will take a look at it, and yes, is nice to only need to support the one version (as long as you use the least common denominator of what works with SQL Azure - and for relatively straight forward sql needs shouldn't bee too much of an issue)\n. @brockallen - I'll check too; to be honest, when I ran into the issues I pulled out the sql needs and created sql scripts to handle things for the database. Is not nicely built into the project as the Migrations code, but SQL Azure has been working solid with MR the past month.\n. Thanks, I had that set fine and dug further.\nThink I figured out the issue, though I have no idea what is wrong.  Stepped through the code in EmailMessageFormatter.cs while debugging and came across the following problem:\nIn EmailMessageFormatter, at the following line: \nusing (var s = asm.GetManifestResourceStream(name))\nit is returning null, though the name/path is right and the following is in the corresponding text file:\n[{applicationName}] Username Reminder\n. Upgrading to 5.0 and will see how that goes.\n. Same problem with V5, though you may be right on the money.  Which files need to be marked as embedded resources?\nThanks\n. Duh, sorry, I see now where the txt files need to be marked as embedded resources.  Finally sent email.\n. @jamesholcomb I also would have much preferred having an int instead of a guid, but as a compromise created a table called UserIds where I just have the useraccountid (guid) and a userid (int).  I then am tying my other systems/sites to that table.  \nI created the following trigger on that table to add an entry on user account creation.  It is all just sql script format and not in a migration type format at this time.  Any improvements or tweaks are welcome.\n1) TRIGGER ON UserAccounts: \nCREATE TRIGGER [dbo].[trgUserAccountsOnInsertCreateUserIdEntry]\nON [dbo].[UserAccounts]\nAFTER INSERT \nAS\nBEGIN\n    SET NOCOUNT ON\n```\n-- Get the last ID (UserAccountID) value of the record inserted\nDECLARE @UserAccountID UNIQUEIDENTIFIER\nSELECT @UserAccountID = [ID]\nFROM INSERTED\n-- Insert the UserAccountID into UserIds table, will cause Id field to create with incremented Id\nINSERT INTO [dbo].[UserIds] (UserAccountID) Values (@UserAccountID)\n```\nEND\n2) USERIDS TABLE\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nDROP TABLE [dbo].[UserIds];\nGO\nCREATE TABLE [dbo].[UserIds] (\n    [Id]                INT                 DEFAULT ([dbo].fnGetMaxPlusOneForUserId) NOT NULL,\n    [UserAccountID]     UNIQUEIDENTIFIER    NOT NULL,\nCONSTRAINT [PK_UserIds] PRIMARY KEY CLUSTERED \n(\n      [Id]\n)\n);\n3) UDF FUNCTION (I always want it to increment by one, but don't want an identity)\nDROP FUNCTION [dbo].[fnGetMaxPlusOneForUserId];\nGO\nCREATE FUNCTION [dbo].fnGetMaxPlusOneForUserId\nRETURNS INT\nAS\nBEGIN\n    DECLARE\n        @id INT\n    SELECT @id = ISNULL(MAX(ID)+1, 1) FROM [dbo].[UserIds]\nRETURN @id\nEND;\n. @brockallen can you please elaborate on that?  Why? Thanks\n. Sorry, I haven't gotten back to things this week.  will definitely take a look and is greatly appreciated.\n. It looks like it got (purposely or accidentally?) deleted/removed in the update to v5.  I am looking at seeing what it would take to add it in to my code as the link is just to weird referring it as a changed email.  Also it does not anymore use the VerificationKeyPurpose.VerifyAccount enum so that is a bit misleading.\nThe affected files are:\nMembershipReboot:\nApplicationInformation.cs\nRelativePathApplicationInformation.cs\nEmailFormatter.cs\nWebHost:\nAspNetApplicationInformation.cs\nWeb App:\nMembershipConfig\n. :(.  Ok, my version will be a slight variant then.  The confirm change email is (maybe irrationally) bugging me due to it being a bit confusing/misleading on account creation.\n. Well, there is also a cancel for email or password reset, etc and it is trying to cancel the whole account and failing.\n. The proposed change \"username must start/end with letter or digit, but other characters can be letter, digit, underscore, period, space, and/or dash.\" sounds good.\n. ",
    "badbadman": "Did you ever get a chance to post some code on using this with IdentityServer 2?\n. Started working on this, running into some difficulty. Your MR example uses Ninject which has multiple constructor arguments, and IdSrv uses MEF (I think) which requires a single constructor with no arguments, is that correct? I'm not that familiar with MEF, but not sure how to reconcile the two, it seems like a pretty big impedence mismatch. Seems smelly to add Ninject in IdSrv, but so does the alternative, which is spinning up the MR instances directly. Unless I'm missing something - any suggestions on how to approach it? \n. ",
    "codingoutloud": "Also - there is an example of how to set up for SendGrid shown in the readme.md (https://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/README.md)\n. This relates to #17.\n. No - I have alternative solution. Give me 5 minutes.\nOn Thu, Jan 31, 2013 at 6:14 PM, Brock Allen notifications@github.comwrote:\n\nSo Bill, are you looking for me to check-in the .suo?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/18#issuecomment-12971835.\n\n\nBill Wilder\n\u00b7 book http://www.cloudarchitecturepatterns.com \u00b7\nconsulthttp://www.devpartners.com/\n\u00b7 community http://www.bostonazure.org/ \u00b7 bloghttp://blog.codingoutloud.com\n\u00b7 @ https://twitter.com/codingoutloud \u00b7\n. Mother's Day is Sunday. Must be related.\n[Actually, a pretty cool idea. For the curious.]\n. ",
    "binskeep": "So - How do you reapply the ones you were using?\n. ",
    "hades200082": "I think something like this should be an optional extra component.  It's not really required for most apps.\n. This would be very useful... especially if it provided a means/method of generating the 2nd factor (i.e. for a mobile app)\n. Is support built in for algorithmic generation of tokens?\nI.e. I could define an algorithm to generate token and then use that on web and in a smartphone app? Like blizzard authenticator for example?\n. 1. Build error on sample app was VS2012 not correctly identifying that it needed to download EF.  Even though it was set to install missing packages automatically.  Had this a few times with other projects and haven't tracked down the cause yet... reinstalling EF manually seems to work though.\nI've tried configuring it in my own project though and keep hitting the following two problems.\n1\nIn NinjectWebCommon.cs ...\ncsharp\nvar baseUrl = HttpContext.Current.GetApplicationUrl();\n... the above code tells me that GetApplicationUrl() doesn't exist. (I have using BrockAllen.MembershipReboot; at the top.)\n2\nIn Global.asax.cs under InitDatabase() (as copied directly from your sample app)...\ncsharp\nsvc.Update(account);\n... tells me that ...\n'BrockAllen.MembershipReboot.UserAccountService' does not contain a definition for 'Update' and no extension method 'Update' accepting a first argument of type 'BrockAllen.MembershipReboot.UserAccountService' could be found\nI can't se a difference between what I have in my project and the sample project at present... any ideas or a swift kick in the right direction would be appreciated :)\n. I used the NuGet install for it so that may be the problem. I'll test it with latest version. \nAny idea when NuGet will be updated?  I prefer to use it for package management to keep things tidy and my repo size down.\n. Update : Compiling the latest from GitHub fixed both errors.  Any idea when NuGet will be updated?\n. One other item to note... on your github readme it mentions the emailIsUsername config option and the other web.config entries but it doesn't mention needing the following in the configSections node\nxml\n<section name=\"membershipReboot\" type=\"BrockAllen.MembershipReboot.SecuritySettings, BrockAllen.MembershipReboot\" />\nCaused me an issue too until I compared my web.config with yours and spotted the difference.  You may want to add it to the readme :)\n. Hmm... got another one for you.\nAfter logging in on the sample the top menu fails to change.\nIn the view you have @if (User.Identity.IsAuthenticated) but this seems to always evaluate to false.\n. Debugging no help.... it was another web.config omission...\nxml\n<system.identityModel.services>\n    <federationConfiguration>\n        <cookieHandler requireSsl=\"false\" />\n    </federationConfiguration>\n</system.identityModel.services>\nAnother one for you to add to readme :+1: \n. Here's a complete list of all the web.config sections I needed to get it working....  I've snipped out all the standard stuff that was already in there so you can see only the relevant entries.\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n // ...... // \n\n\n\n // ...... // \n\n\n\n\n\n // ...... // \n\n<!-- // ...... // -->\n\n<authentication mode=\"Forms\">\n  <forms loginUrl=\"~/UserAccount/Login\"></forms>\n</authentication>\n\n<!-- // ...... // -->\n\n\n\n<!-- // ...... // -->\n\n<modules>\n  <add name=\"SessionAuthenticationModule\" type=\"System.IdentityModel.Services.SessionAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" preCondition=\"managedHandler\" />\n</modules>\n\n<!-- // ...... // -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- // ...... // -->\n\n\n``\n. If I set it toemailIsUsername=\"true\"`, what happens if I let the user change their username to something other than their email address?  Would it still use their email address to log in with?\nFor example... I want it to use either email or username as their login... users choice at time of logging in.\nI hope this makes sense?\n. The following code demonstrates the problem... if the claim is updated via ajax it doesn't actually update until the next full page request.\n``` csharp\nprivate function UpdateGender(string newGender)\n{\n    account.RemoveClaim(ClaimTypes.Gender);\n    account.AddClaim(ClaimTypes.Gender, newGender);\n    userAccountService.Update(account);\n// since we've changed the claims, we need to re-issue the cookie that\n// contains the claims.\nauthSvc.SignIn(User.Identity.Name);\n\n}\n[HttpPost]\npublic JsonResult function myAjaxMethod(){\n    UpdateGender(\"male\");\nstring gender = System.Security.Claims.ClaimsPrincipal.Current.Claims.GetValue(ClaimTypes.Gender);\n\n// the \"gender\" variable will never be \"male\" in this request (unless it was already male)\n// because although we've set the cookie it hasn't updated the claim until the next request \n// when it reads the cookie again.\nreturn Json(gender);\n\n}\n```\nSince it is possible to set cookies on the response to any HTTP request, including those made via ajax (http://stackoverflow.com/questions/3340797/can-an-ajax-response-set-a-cookie) I'm a little confused as to why this would be a problem.\nAdditionally, why can I not get the value I just set for a claim later in my code execution using System.Security.Claims.ClaimsPrincipal.Current.Claims.GetValue()?  Surely when setting this should be updated immediately?\n. That's what I mean. Shouldn't the current claimsprinciple be recreated when we resend the cookie instead of waiting for the next request?\nso when calling authSvc.SignIn(User.Identity.Name) it should do what you describe automatically?\n. Yes, I just came across the same issue in a knockout/ajax based app that uses MembershipProvider ... a most illogical way to do it imho.\nIt would make more sense that after I've just updated the claim I can then retrieve the claim from the system and get the value I just set rather than having to wait for the next request.\n. csharp\nauthSvc.SignIn(User.Identity.Name);\nThis method should update the ClaimsPrincipal.Current.  If we've just signed them in then they are now the current signed in identity & claims from that point onwards.\nI may be missing something obvious here but I just think that once we've chosen to sign them in the claims in memory should be updated so that they can be reliably accessed in other methods and get the correct data for the newly signed in user.\n. http://stackoverflow.com/questions/17095246/system-security-claims-claimsprincipal-not-updating/17103019?noredirect=1#17103019\n. I'm still not sure what side effect you're referring to.  \nIf I'm writing code and I have a request that updates some claims first, then goes on to do other stuff... I would want that other stuff to know what the new claims are, not what they were.  What they were is no longer relevant to the currently executing request.\nIMHO this is a flaw currently and caused me a lot of confusion as it didn't behave as I would have expected (i.e. once I've updated something for it to actually be updated later in the code, not reverted back to it's previous value)\nIs there some gotcha that I'm missing here?\n. I understand now... profile fields are claims just like the identity fields ... I guess it would have to have a custom claim type for profile fields on a per app basis to make sure that it only did this for non-identity claims?\n. I assume from that reply that it is currently not possible?\n. One comment made inline... the rest looks good.  I'll check it out tonight and have a play :)\n. Yes. And you already have the password expiry ..  could work in a similar way to that.\n. Thankyou :)\n. Just a thought.... have you considered including all the required/default web.config entries in the nuget script?\ni.e. the entries like in the sample project?\n. I may have been hitting my head against this particular wall for too long but I'm not sure I understand you.\nWe tried creating a custom DbContext with a custom initializer, etc. but we kept hitting problems where the first hit to the site was for a login... having the initializer for MembershipReboot set to null meant that this would error because our own DataContext hadn't been called yet.\nAlso we've been seeing another problem with MembershipReboot (or EF in general) communicating with SQL Server 2012 ... it seems to be trying to look for a local SQL Server instance on the webserver box rather than using the connection string we've given it.... even though tracing shows that the calls to our connection string are in fact going through ok... it's after that it throws its wobbly.\nAm I making any sense?\n. Ok... .I'll try to explain a little better for you.\n1. We have a ClassLibrary project in our solution for our own model.  This contains our own DbContext, Entities and our Repositories.\n2. Our MVC4 (.Net4.5) project references our model class library AND MembershipReboot\nCurrently we have it configured the only way we could get it to work, using a 2nd database for the membership reboot stuff.\nGlobal.asax sets a CreateDatabaseIfNotExists Initializer for MembershipReboot AND sets our custom Initializer for our own model.\nWhat we would like to do is have the membership tables in the same database as our own model.   Things we have tried so far include....\n1. Having our DbContext inherit EFMembershipRebootDatabase and using our own initializer to seed the user account data.  At the same time we set the initializer for MembershipReboot to null.\n2. Creating a new DbContext that has our DbSet's and your DbSet<UserAccount> and setting that to DropCreateDatabaseIfModelChanges\n. If I use version 2.0.0 from NuGet then those classes don't appear to exist so I can't extend them to customise.\nIf I build from master then it all works fine.\nThe problem is that even in the older versions the EmailMessageFormatter was declared as public, yet it doesn't appear to exist in the NuGet version.\n. Great :)  I look forward to it.\nTwo questions....\n1. Will you also be releasing a sample app showing how to override the text files for email customisations?\n2. Do you have any plans to allow the use of resource files (or an example app to show how) to allow for internationalisation?\nOr have I totally missed something obvious?\n. Ok.. the answer to my last question is \"Yes\" ... I was being totally dumb.  Of course I can use that to read from resource files if I want to ... thanks for slapping me with the anti-dumb stick :+1: \n. ",
    "justSteve": "Happy to confirm that the most recent release addresses Issue #114: Adding the Tests project. Highly appreciative to have something to break!\n. FWIW, it didn't change anything - but clearly a false positive. [shrugs]\n. Curious as to how you've arrived to the current implementation. Love how the templates are organized and editable. But you went in a different direction than strongly typed, Razor-based templates. In that this issue closed 7 months ago, you've had enough time to draw conclusions on pro v. con...any thoughts to share?\nthx\n. Understood re: focus of MR. But since you opened this thread with a consideration of a Razor-based template and ended up implementing token-based templates, just wondering what drove that decision and any possible 2nd guesses? \n. Thanks - just the answer I was looking for. thx\nOn Mon, Feb 3, 2014 at 12:47 PM, Brock Allen notifications@github.comwrote:\n\nWell, I implemented the token replacement one first and a razor approach\nwould be more work. In short, I am lazy.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/50#issuecomment-33985920\n.\n. Perhaps the problem lies in how I'm going about opening/including the test project itself. When I open Samples.sln I'm not seeing the Test project so am thinking I should be able to (have to) 'Add Existing Project' - 'src\\BrockAllen.MembershipReboot.Test'.\n\nIn doing that and then looking in the References folder I see that Moq is marked with the '!'. I've tried re-installing via Package Manger's GUI and CLI - newly updated and matching the version 4.0.10827 - none of the methods result in a compilable project. Error list has 184 errors of the pattern:\nThe Type Or Namespace Name 'Reflectionfactory' Could Not Be Found (Are You Missing A Using Directive Or An Assembly Reference?)\nI'm probably missing some embarrassingly simple step.\n. I'd checked that I'd had both 'Allow VS to dl' & 'Auto check for missing during build' enabled. I've wiped the solution dir and am starting again from scratch. Opened Samples and hit Build. 'Add Existing Project' and added /src/Test. Looked to verify that 'Moq' still had the bang (yes, but that's what package restore's for, right?). At this point, I hit 'Clean Solution' & 'Build' and get 8 errors pointing to Moq namespace and another 4 to Mock namespace not existing.\nAnd next I've added Moq via Nuget (Gui & CLI - current version and matching the project) - (Moq is now listed in References folder with no bang) - no matter the method or version I'm looking at 185 errors in the list. \nOutput of my Build messages (set to verbose) and the error list.\nhttps://docs.google.com/file/d/0B6G93XSUDulETXExV2xvVHVzdUk/edit?usp=sharing\nhttps://docs.google.com/file/d/0B6G93XSUDulESEMzS1VsUDhjejA/edit?usp=sharing\n. If working with the default template there's a Filters folder that has a single file. I don't have a one of these projects handy right now but the filter/class name clearly pointed at 'SimpleMembership'. Also in the default MVC4 Internet Application template in the AccountController I recall seeing a compiler attribute i think named '[InitializeSimpleMembership]'. \n. Am right now in the thick of this particular battle - how to join Brock's 'Membership management ' with a wider, more generalized notion of 'User management'. Where Brock's project focuses on logging someone in (authentication) and, via the Claims infrastructure, authorization the main aspects of managing Membership is covered.\nThe obvious next step is binding User entities to (those things with addresses and company names, etc) with that more narrowly defined thing that logged in.\nThe tree my project is barking up right now is trying to merge this 'logging in thing' (Brock's term is UserAccount and is stored in the UserAccounts table) with my website's concept of and end user - I'm choosing the term 'WebUser'. \nThe site's Register screen includes the same few fields as Brocks - email/username and password but extends that to also include all the things that my website expects a User to have - Address, Company name and so on.\nWhen the form is submitted we first call Brock's CreateAccount(userName, password, email) and if that works we pass the resulting Account object to our own 'CreateWebUser' method with the rest of form's info. Currently looks something like:\n```\n    public WebUser CreateUser(\n        string firstName,\n        string lastName,\n        string userName,\n        string password,\n        string email,\n        USTimeZone timeZone,\n        UserType userType,\n        int institutionId,\n        IList addresses,\n        string accountStatus = null\n        )\n    {\n        var account = userAccountService.CreateAccount(userName, password, email);\n    WebUser webUser = new WebUser\n    {\n        AccountStatus = accountStatus ?? \"A\",\n        DateCreated = DateTime.Now,\n        Email = email,\n        FirstName = firstName,\n        InstitutionId = institutionId,\n        LastName = lastName,\n        Password = string.Empty,\n        timeZone = timeZone,\n        UserType = UserType.Customer,\n        UserAccountId = account.ID\n    };\n\n    webUserRepository.Add(webUser);            \n    return webUser;\n\n```\n}\nBut the act of merging Brock's entity with our own is non-trivial. Getting repositories to blend seems to be the pain point and EF's entities are showing anomalous behavior. Probably because, currently we a mixing both Brock's UserAccount entities with our own in a single dbContext. We are about to try breaking those a part to separate  entities context and hoping for the best. \nIt would be just downright awesome to see how other folks have handled this hurdle.\n. That looks to be a really valuable link. Great to be able to match up the working code from this repo to the source. Thanks.\n. ||simply issue a new cookie as any user it wants to and thus the admin can impersonate another user this way.||\nAt first glance this seems way easier than the hoops the current system is jumping thru. I'll be stepping back here with a report back of our outcome.\nSincerely hoping your efforts here result in consulting bucks from other folks - I know I'll be back with special request$ as they popup. thnkx!\n. I've gained the understanding that the VerificationPurpose and VerificationKey are combined when the hash is produced. Had trouble at first with the idea that I couldn't just update the vPurpose field and have things 'just work' but got it now.\n. Has this feature made it to production? Which version? thx\n. Thanks much Brock -- totally get that this is tangential to MR but highly appreciate the reply.\n. @Robban1980 I'm facing the same task an am hoping you could expand on the steps taken a bit.. ",
    "rodmjay": "I was going to do that (:  good work\n. Looks great, thanks.\n. so what you are saying is that there will always be a username, but in the case of EmailIsUsername it would be a guid, correct?\n. [ConfigurationProperty(ACCOUNTLOCKOUTDURATION, DefaultValue = 10)]\n    public int AccountLockoutMinutes\n    {\n        get { return (int)this[ACCOUNTLOCKOUTDURATION]; }\n        set { this[ACCOUNTLOCKOUTDURATION] = value; }\n    }\n. If the value from AccountLockoutMinutes isn't set in config, will it throw an exception?  looks like it would try the get, throw an exception, and then this would fail.  Maybe you should use a int.tryparse there?\n. compilers don't like when the default value type doesn't match the type of the property\n. ",
    "keizof": "As I look into this more, it looks this library assumes an email address can be associated with only one account. So the actual fix is to prevent multiple accounts to use the same email address. If that's the case, please ignore this pull request and close this.\nI've sent another pull request to fix the issue of multiple accounts can have the same email address 94283be540c4f5f08dccedc0ff533b5d0a7e8deb.\n. ",
    "robdmoore": "Not sure if you've seen it before, but feel free to check out the TestStack.Seleno library - it makes it really easy to do automated UI tests using Selenium Web Driver the right way (e.g. page objects, etc.) and has some nice stuff in there to make ASP.NET applications in particular easy to test.\nhttps://github.com/TestStack/TestStack.Seleno\nFeel free to reach out if you want some help.\n. No worries mate ;)\n. ",
    "rdaddis": "I'm glad to see you reopened this. How do you feel about extending SCIM groups to include permission records?  This could be used to add authorization functionality to MembershipReboot.\nAs an example, I would like to map a group named \"Accounts Payable Clerk\" to \"Enter invoices\" and \"Print Checks\" permission records.\n. ",
    "beyond-code-github": "Looks like it will fit with our Mongo implementation certainly, does it fit for your EF stuff too?\n. Sorry still need to look at this... did you also have a solution for adding extra properties to the model?\n. Yeah similar... although for us we don't want to have all information being passed around as claims as it could get quite large.\nWe store things like permissions, access rights and other things in Mongo on the user entity. We could technically create another entity and link it to the useraccount, but this would interfere with some of our performance plans. This PR also addresses this need for us by means of the generic useraccount bits..\n. I did, but figured the implementation you were using was still IUserAccountRepository with the concrete reference to useraccount. If this is not the case though it should be ok.... will try to get to it this week :)\n. Ahh ok, I do apologise, I should have looked properly before asking!\n. ",
    "talves": "Ok.  Now I am glad I mentioned it before I started to run down this road.  You are definitely on the right track here.\nSo, our public site would be separate from the management side of the account management?  Correct?\n. Have you seen the project here called SCIM.Net ?\n. I will fork it and play with it and see if I can get anywhere.  If I do, I will post it here.\n. I see, hence your statement \"The other thing about this plan is that it's a lot of work\".\nThat would definitely be the better of the solution.  If my expertise was more in this area, I would take the first stab at it to alleviate the work for you, but I would probably just be spinning my wheels without a lot of research first.\n. I created a Gist of the files to solve this problem.  I was wondering if this was an acceptable change for the samples to make it compatible with Shared Hosted servers where the loadUserProfile setting on the Application Pool = true is not an option.  This should also solve the issue of putting on a web farm where the machine keys are different (not tested).\nhttps://gist.github.com/talves/7609029\n. Thanks Brock, just wanted to make sure there was not an issue with what I was trying to do with WIF.\nYou can take this out as an issue... Like you said this is an application issue not MembershipReboot.  I just wanted anyone else that may use it to be able to have the solution.\nUpdate... I closed the issue.\n. @psenechal try these files to compare.  I hope they are not out of date.  Been away for awhile.  I will look at it with you if you do not get it working, but I have to step out right now. \nhttps://gist.github.com/talves/7609029\nYou will have to clone and replace these files and compare to see what I changed.\n. +1\nI  came to the partial conclusion that there is a process for this using your application.  Maybe some discussion is in order to decide if this should be within MembershipReboot. My alternatives are how I plan to handle it.\nAlternative for forgotten password: The admin requests a password change on the behalf of the user using the users email address.  This will request a validation email to the user and the user clicks on the link to change their password.  The admin has no need to enter a new password or know what it is.\nAlternative for forcing a password:  The code behind in the application could change the password with a unique guid or other random string that no one would know.  Then email the user with a change password validation.  This would force the user to reset the password and not allow the user to login until they validated.  \nAlternative for requiring a password change: The application could add a claim to the user account that would set a reset password flag to require a password change and redirect to the change password page until the password was changed.\nI am sure Brock will have some feedback on this one.\n. Your solution would allow the tracking of the flag easier, but it would be just as easy to create a claim by creating a role called \"MustChangePassword\" also, so it is up to you whether it is beneficial or not?  I would end up doing the same logic whether you make the change or not.  Up to you.  I do agree with you after working on this, that it should be up to each individual application unless you decided to tie it to logging in successfully.\n. Fantastic! I am really liking what you have done here.  This has made me realize how tied to Membership I was.\nThank You for making this available and the time spent.\n. Thanks Brock.  Do you mind committing the packages folder, so it will load without error?  Thanks.\n. That Fixed it!\n. These new samples are great!  Thanks for taking the time.  It really explains a lot of what was intended.\n. Sure.  I am creating a base membership application that I can use for all my custom apps.  I have hooked in your example with Bootstrap.  Coming along nicely.\nI will be creating the Maintenance pieces for the Admin, so I was curious what you had in mind for a controller for maintenance methods.  I do not want to go too far down the road without using best practices.\n. Is This Issue the one we would use for this discussion?\n. +1\nI am glad this will be addressed.  I figured you did not have the time.\n. If you do not want to use ThinkTecture.  You could try the solution I used for my Hosting server.  I am not sure it applies here, but I believe it does.\nhttps://gist.github.com/talves/6151710\nLet me know if this works, or puts you on the right track.  It worked great on ARVIXE\n. Would be great to be able to flip a switch to let the admin email know that a user  event happened.  Maybe the fact that there is an email for admin notify or something like that.  Have not thought it all the way through, but I may have some ideas soon.\n. Ok, here is a short list of the items mentioned above.  Just thoughts, so nothing concrete:\n- I was thinking I could hook into a tool like elmah, so there would first and foremost need to be an event for logging to be able to log (not spent enough time to see if it's already supplied)\n- User events turned on for Admin level only, so allow for Admin to track what to receive on the event bus. ie (notifications of logged in failed attempts, failed validation attempts, general errors, etc)\nI can extend this great assembly, but these were the gist (no pun intended) of my ideas.\n. No, you got it.  Wanted to make sure I was not going down the wrong path.  Exactly how I would proceed on my own.  Happy to see we are on the same page.  Nothing needed then on these items.\n. @brockallen , Ef is showing up as a web project due to it having the web.config file in the project.  I think this is what he is talking about.\nNote: I think this is an issue with VS, because it is an assembly in the properties.\n. Hi Kaush,\nYou will see in the samples that this is by design.  These are just to show how to add custom claims.\nIn the HomeController.cs you will see the following:\n// if you only want one of these claim types, uncomment the next line\n//account.RemoveClaim(ClaimTypes.Gender);\n-Tony\nYou can close this issue.\n. @brockallen you were wrong.  You do know what to say, and it was well said.  Add that summary right there to the front Readme.md!\n. _Correction:_ You need to first go into the main solution for MembershipReboot and restore the NuGet packages then open the samples solution.\n. @gardavis the issue comment by Brock below may answer at least why you are seeing these problems.\nComment in issue 168\n. ",
    "huan086": "Yes. Was trying to combine the two sample projects so as to support both local accounts and linked accounts. Then had the problem where my local account email and the linked account emails are the same, and thus could not sign in using the linked account.\n. ",
    "Nuschler": "In the SignIn method, after this code...\n// create principal/identity\nvar id = new ClaimsIdentity(claims, method);\nvar cp = new ClaimsPrincipal(id);\nadd this...\nHttpContext.Current.User = cp;\nThread.CurrentPrincipal = cp;\nOtherwise, \nSystem.Security.Claims.ClaimsPrincipal.Current\nis referring to the ClaimsPrincipal created from cookie on initial request.\n. ",
    "ashkansk": "Does this method \"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" do the same (look for claims of type ClaimTypes.Role)?\nActually I don't understand Claims! It's a new shiny thing for me right now :d, do you know any good article about Claims?\nMy UserProfile table has information like Address, Phone, ManagerID. As a matter of fact I'm thinking to use multiple UserAccounts for a single UserProfile record, meaning that a single user can have multiple accounts.\n. Ok great, I will download the video, but our internet connection is a little slow, it will take at least 2 hours.\nI'm sorry this question turned out to be about everything! I have another question if you don't mind.\nAs you mentioned that claims is an extensible store for identity information, I'm assuming claims could be used for almost any information that we want for our user, like Role, secondary emails, address and etc?\nAs for Roles, how can we implement Hierarchical Roles ?\n. Hi @brockallen ,\nI wanted to thank you for the useful information. Now I have another problem, I cannot find the setting for cookie lifetime (\"Remember me\" tick). I'm not really familiar with Github, should I open another issue for this question?\nI have another issue, I wanted to use AuthenticateWithUsernameOrEmail but this method is not available when we add MembershipReboot via Nuget Package manager. So I ended up compiling the source and adding the dll manually. Is the current code reliable for production use ?\nthanks\n. I have a DbContext class, it has a DbSet named Users of type User. The User entity has a GUID field named UserAccountID, so the question is can I enforce a ForeignKey Constraint on UserAccountID via codefirst approach ?\nthanks\n. It's not actually ASP.NET membership tables, it's custom tables that a legacy system is using. Passwords are not even hashed. So I should create an application that reads from my custom tables (Users and Roles) and creates the corresponding record in MembershipReboot.\nIs there a way to use TransactionScope for inserting a User with its Roles ?\n. Thank you for the help :)\n. I think it's a good functionality, there are many applications that have user groups, beside Roles/Claims. Also it can be used as a hierarchical role table.\nthanks.\n. @drewid : I don't think so. As brock pointed out, \"it's just a new entity/table where an application can define what groups the application uses.\", and it's pretty wide open for an application to use it however it sees fit.\nOne obvious reason that clarifies groups don't replace roles is that you cannot use it the standard way like [Authorize(Roles=\"...\")] or use IsInRole method.\n. Yes I saw it. So you recommend to use the OWIN authentication.\nAs I'm not using DI container this is how I use MR:\n```\n    private UserAccountService accService;\n    private OwinAuthenticationService authSvc;\npublic UserAccountService UAS\n{\n    get\n    {\n        if (accService == null)\n            accService = new UserAccountService(new DefaultUserAccountRepository());\n        return accService;\n    }\n}\n\npublic AuthenticationService AuthService\n{\n    get\n    {\n\n        if (authSvc == null)\n        {\n            var owin = System.Web.HttpContext.Current.GetOwinContext();\n            authSvc = new OwinAuthenticationService(MembershipRebootOwinConstants.AuthenticationType, UAS, owin.Environment);\n        }\n        return authSvc;\n    }\n}\n\n```\nIs this the right way ?\n. aah, OK, thanks.\n. oh, OK, that's a workaround. In that case how MR decides what to do, for example whether UserAccountService.Configuration.RequireAccountVerification is true or false ?\n. ah, I see. thank you brock.\n. Sorry for delay, I changed two lines of code as you said:\nvar emailFormatter = new EmailMessageFormatter<IdentityUser>(appInfo);\nand \nconfig.AddEventHandler(new EmailAccountEventsHandler<IdentityUser>(emailFormatter, delivery));\nAnd the email problem is solved :)\nBut the other problem still exists (Unauthorized request does not redirect to the login page), I don't know if this concerns Membership reboot or not.\n. I'm using OWIN authentication. I don't know about Katana or SAM. I assume OWIN is part of Katana...\n. Yes, my action method was decorated with [Authorize] attribute and when tried to open, it returned 401. I had set the LoginPath in CookieAuthenticationOptions for OWIN, but not MR, happily by setting the LoginPath for MR the problem went away, Unauthorized is redirected to login page and also ReturnUrl is being set correctly. I removed the LoginPath in OWIN CookieAuthenticationOptions and it still works.\nThank you brock.\n. I have exactly the same error and I did call RegisterUserAccountChildTablesForDelete in my custom dbcontext's constructor:\npublic CMDB()\n        : this(CONNECTION_STR_NAME) { }\n    public CMDB(string name)\n        : base(name) \n    {\n        //this.Configuration.LazyLoadingEnabled = false;\n        this.RegisterUserAccountChildTablesForDelete<IdentityUser>();\n    }\nI'm trying to remove a claim from users claim using this line of code:\n// uas is UserAccountService<IdentityUser>\nUAS.RemoveClaim(account.ID, ClaimTypes.Role, role.RoleName); // this throws exception\n. I don't know what UserManager are you talking about.\nthis is the code I use to bind my custom UserAccountRepository in Autofac:\nbuilder.RegisterType<CMUserAccountRepository>()\n            .As<IUserAccountRepository<IdentityUser>>()\n            .As<IUserAccountQuery>()\n            .InstancePerLifetimeScope();\nWhere CMUserAccountRepository is:\npublic class CMUserAccountRepository : DbContextUserAccountRepository<CMDB, IdentityUser>, IUserAccountRepository<IdentityUser>\n{\n    ...\n}\nthanx.\n. Strangely I get this exception on my release database:\n\nThe source query for this EntityCollection or EntityReference cannot be returned when the related object is in either an added state or a detached state and was not originally retrieved using the NoTracking merge option.\n. Thanks, that solves the problem, but another problem raises, because Oracle cannot be used with EF6.0 and the HasColumnType(...) is introduced in EF6.0.\n. I can use EF5.0, and cannot use HasColumnType(...) method.\nOK, thanks for your support Brock.\n. \n. OK, did that too. This is the trace:\n\n. How much is the timeout ?\nI used the key within maximum 30 minutes, as you can see in the screenshot below, the verification key sent is \"2014-12-11 13:07:11.147\":\n\n. I just searched the source code and saw that MembershipRebootConstants.UserAccount.VerificationKeyStaleDurationMinutes is set to 20 minutes!\nI think this is my problem. Our SMTP server is somehow slow and the sent emails may take more than 20 minutes to be delivered to the recipient.\nIs there any way to override the constant ?\n. Great thanks, it can be set via verificationKeyLifetime in web.config or via config.VerificationKeyLifetime programmatically. The problem is solved, thanks brock.\n. Sorry for being a noob! One other question! How can I resend the verification key or reissue the verification key for an expired key?\n. Do you mean the RequestAccountVerification(Guid id) method ?\n. Oh ok, thanks.\n. ",
    "psenechal": "@talves Tony...I couldn't find another way to contact you, so I thought I'd try replying here. I'm running into the same issue with Arvixe when trying to use SignalR. Can you possibly point me to what you did to circumvent the oadUserProfile issue with Arvixe? Thanks so much!\n. ",
    "JellyMaster": "Hi, That seems to work. I think maybe my references got a bit messed up so I removed the package from my project and then re-added. \nIs there any chance of providing some form of wiki/tutorial on how to use the membership as I have just used the sample project really just to get this in and would like to try and understand how this works a little more. (I'm still fairly new to using membership type security as I have always created mine own in webforms but as I have moved over to MVC I want to use more tried and tested user management solutions that will take out the headache of having to build a custom solution every time. \nThanks in advance. \n. Never mind it seems this link helped to get around it: \nhttp://brockallen.com/2013/02/18/configuring-machine-key-protection-of-session-tokens-in-wif-and-thinktecture-identitymodel/\nDidn't see the issue it related to originally. \nMy website appears to be working now. happy days:) \n. I was looking all round the houses trying to find an answer and nothing was really clicking. Not sure if others have stumbled across this but it may be worth including in the sample project as a footnote/on the main project page like you have done with the email setup with sendgrid. \n. Well I am kind of doing this within my website (still building this at the moment) \nI have setup an admin user section that is able to create new accounts. To ensure the admin user doesn't know the user's password I have created a complex password method that will generate a password that has varying levels of complexity from simple all the way to ultra complex. (I'll list my  password generating code at the end with sample output) \nOnce the account is created a verification email is then sent out and as part of the verification process the user will be forced to enter a new password so thus keeping any system admin's blind of the end user's password (again enforcing complex password checking here). \nPersonally I think that the system admin's shouldn't know the end users password as that has the potential for misuse. As for importing external accounts as part of a migration process I think the user should be forced to change the password as part of this process. Again we can enforce password complexity. Maybe if we are importing an external account and need to verify it then the password expired flag should be set to true to again force the user to change their password. \nHappy to discuss any possible solutions you may have thought about. \n(feel free to rip my code to pieces if you see any obvious flaws :) ) \n```\n        /// \n        /// This is the auto generated password process\n        /// \n        /// A character set used to generate passwords\n        /// minimum length the password should be \n        /// enforce complexity checking from the generated password process\n        /// enforce checking to ensure password has a lowercase letter in the password\n        /// enforce checking to ensure password has an uppercase letter in the password\n        /// enforce checking to ensure numeric digit is in the password\n        /// enforce checking to ensure a special character is in the password\n        /// returns the created password. \n        public string GeneratePassword(string charSet = \"\" ,  int minpasswordlength = 16, bool complexity = true, bool lowercase = true, bool uppercase = true, bool numeric = true, bool specialCharacter = true)\n        {\n            //lowercase, uppercase, numeric and special checks are only processed when complexity checking is set to true. \n            //default character set is: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!\\\"\u00a3$%^&*()_+=-[]{};:'@#~<,>.?/|\\\"\n            //need to decide if we should enforce some checking should the character set be changed and not contain a value that is required. \n            //e.g. lowercase checking is enabled but no lowercase values in the character set. \n        //set a random value based on number of ticks (helps when multiple passwords need to be created in a single go) \n        Random rand = new Random((int)DateTime.Now.Ticks);\n\n        string password = string.Empty; \n        bool meetsRequirements = false;\n\n        //if the character set is passed in as null or empty string used default character set listed above.\n        if(string.IsNullOrEmpty(charSet))\n        {\n            charSet = passwordCharSet;\n        }\n\n\n        //if complexity is swicthed on then we enforce the password checking other just generate any random password. \n        if (complexity)\n        {\n            //we will be enforcing complexity here.\n\n\n            //keep looping through the password generator until a valid password is created. \n            while( !meetsRequirements)\n            {\n                //presume the password meets requirements by default and set to false if a check that is switched on fails. \n                meetsRequirements = true;\n\n                //create a list of char's (bit of linq here) that make up the password\n                List<char> passwordList =  Enumerable.Repeat(charSet, minpasswordlength).Select(s => s[rand.Next(s.Length)]).ToList();\n\n                //if lowercase letter checking is turned on\n                if(lowercase)\n                {\n                    //check the count to see if we have at least one lowercase letter in the password.\n                    if(passwordList.Count(s => char.IsLower(s)) <= 0)\n                    {\n                        meetsRequirements = false; \n                    }\n                }\n\n                //if we are still valid then check if uppercase letter checking is on. \n                if (uppercase && meetsRequirements)\n                {\n                    //check the count to see if we have at least one uppercase letter in the password.\n                    if (passwordList.Count(s => char.IsUpper(s)) <= 0)\n                    {\n                        meetsRequirements = false;\n                    }\n                }\n\n                //if we are still valid then check if numeric checking is on.\n                if (numeric && meetsRequirements)\n                {\n                    //check the count to see if we have at least one numeric in the password.\n                    if (passwordList.Count(s => char.IsNumber(s)) <= 0)\n                    {\n                        meetsRequirements = false;\n                    }\n                }\n\n                //if we are still valid then check if special character checking is on.\n                if (specialCharacter && meetsRequirements)\n                {\n                    //check the count to see if we have at least one special character in the password.\n                    if (passwordList.Count(s => !char.IsLetterOrDigit(s)) <= 0)\n                    {\n                        meetsRequirements = false;\n                    }\n                }\n\n                //if the passwordList has passed all checking set it to the returned password variable\n                if(meetsRequirements)\n                {\n                    password = new string(passwordList.ToArray());\n                }\n\n            }\n\n\n        }\n        else\n        {\n            //no password complexity checking but we will probably get a pretty complex password using the default length and character set. \n            password = new string(Enumerable.Repeat(charSet, minpasswordlength).Select(s => s[rand.Next(s.Length)]).ToArray()); \n        }\n\n\n        //return the generated password. \n        return password; \n    }\n\n```\nSample output using default settings: \n```\nPassword generated = pD9\u00a3\"W&SC5>5.$+\nPassword generated = #6kl_1uspc?0O8$X\nPassword generated = @6/[4Y}$e/CqF_u6\nPassword generated = '7{XOUTs,,9\"w<&%\nPassword generated = ;7$uxRk\u00a3['\\snfy-\nPassword generated = }81~gOr$]G$es_#\nPassword generated = ]8O5@LJ\"3+\"u.FC\\\nPassword generated = [9BD^IaqS&c^;T[i\nPassword generated = =9oaZF8!H\u00a3Jw)6Gr\nPassword generated = +0b$ICzpw8^!(;A\nPassword generated = )!'Lrz#0l3fy2@KJ\nPassword generated = U[4^/;\\l>pNsF7I=\nPassword generated = &\"5={tq0#U(AKqO1\nPassword generated = ^\"SU0q-o+Pj+BD>0\nPassword generated = $\u00a3FsTnP9!LPCsQR(\nPassword generated = \u00a3\u00a3s@Dkgn0G+-j3|}\nPassword generated = \"$f3mh$8PBmDa&V>\nPassword generated = 0$~A.eFmExT]~:cd\nPassword generated = 9%|_b?7ts[FaZm\nPassword generated = hR|>Wii4^rjxo<%H\nPassword generated = 6^VJO.v6/jWH7B3E\nPassword generated = 4^Igx<;k;e;:YOkN\nPassword generated = 3&v_g@U6\\sJP17W\nPassword generated = 1iS#;lk7.Z@G$o5\nPassword generated = 0*.p^Zys&9iq(<,?yv|\nPassword generated = U)M.b$A3f$zP:M(g\nPassword generated = S_z0{!~h>05._Zzp\nPassword generated = R_mH08Z2]5.R\"\"=y\nPassword generated = Q+\\eU5rh%1C/3[DH\nPassword generated = Y'N@y0H:E{x|67}\nPassword generated = 8R-k%vr}(Ar)@(n>\nPassword generated = 7S![Ys[G8vYz=@0d\nPassword generated = 5SYWIpQ{Xq'+$crm\nPassword generated = 4TLtrmhFNmuB5q$v\nPassword generated = 3Ty#aj%]Ch1=WDvE\nPassword generated = 1Ul5]gGFrc~DNQN\nPassword generated = 0U|C0d/]g|y[E3zW\nPassword generated = YV}\\Ta5E.,4Fv^+5\nPassword generated = AHfZ~cx.>s0u];(\nPassword generated = VW2Ll>'D^{BHda]=\nPassword generated = UWPi.~W-5+8;>nH@\nPassword generated = R.rxDiG\\2mLO=wEl\nPassword generated = RYpU4}_=J\u00a3E'(OKh\nPassword generated = e]j6Jr4I)qQKS?b<\nPassword generated = w}!8FL(rI~lM^b}\nPassword generated = 2]9rK:n9~\\&rlq0)\nPassword generated = YEL'4\nPassword generated = \u00a3I\"OMS0,LAdvYL\u00a3\nPassword generated = &\u00a3vJxJje[H70m\"<+\nPassword generated = H8'T\\GkW0=-^;ozV\nPassword generated = $$._#DId3xE2>.?/\nPassword generated = \"%[S^A\\YSt0h}iTg\nPassword generated = !%\"pZx7cHoa3(wap\nPassword generated = 9^Z;IuyYwjHj0JXy\nPassword generated = >xtmK[7xtH$@UEd9\nPassword generated = ,xg{t+yiCdMLR0\nPassword generated = ~y,Yc(@w/xK~C4h{\nPassword generated = #y=v;^X&;t&Ot&4,\nPassword generated = CPX:b0rBWyrN;DXJ\nPassword generated = :zX7V0+^8jNQbb8l\nPassword generated = ;AKEE7NuXf).tf;n\\Z%x4\nPassword generated = Emw,;m#Q\u00a3ApR\u00a3E2U\nPassword generated = )D1WzPts])]bH|A+\nPassword generated = X=a}Ly;da4uQRsv%\nPassword generated = W-:ZvvUY@Z1?IG-\nPassword generated = 710|SI!Vv)Xra:#4\nPassword generated = T[4>:p(X0Qx|q6+\\\nPassword generated = wCdAa|LI{A8NA]^<\nPassword generated = Y]\u00a30b4)i-X|uk_wD\nPassword generated = W]0x{1L3\u00a3SF^b~(M\nPassword generated = V{N>!Ych2N!w<eAV\nPassword generated = T{A9UV02RJb*]s=4\n```\nThis is still code being tested but hopefully gives you an idea of what I am trying to do to secure my system. \n. I guess in my scenario I am using the email address as the username which should obviously be unique. I am wondering if in that respect I may be using/ understanding the tenant incorrectly. (I have been recently reading up a lot on authentication/authorization solutions and I feel more confused about this than ever- but I digress) \nAs my solution will not allow users to create their own accounts and it is controlled by an \"Administrator\" (currently me) \nMy only concern is that over time more and more users will be getting created and if they swap \"tenants\" (in my case clients/divisions etc) then unless I set the account deletion to physically remove the accounts when closed the system will be littered with dead accounts. \nMaybe I need to think a bit more about what it is I am trying to achieve and maybe use a claim to derive the functionality I am looking for. \nI'm looking to eventually provide some sort of sso solution (which is just blowing my mind) so that I can offload all authentication/authorization functions to the sso solution and just hook into from my applications. (I know not completely relevant here - but this is my ultimate goal I guess)\nAgain thanks for the great work you have done. \n. I understand a \"tenant\" to be in my situation to be a \"client group\" ie we have someone like google \"the client group/ tenant\" and then under that we have clients associated with that group ie Search, Marketing, Maps, Infrastructure, R&D etc\"\nAnd this could be applied to other client groups with this sort of structure. \nI guess I would have users that potentially would need access to everything within the client group/ \"tenant\" and then other users would be restricted to their own client/division ie \"bob\" only has access to the data within \"Maps\" and can't access the \"Search\" data. Where as \"Bert\" has access to everything within the Google \"tenant\" so they can have an overall picture of their data. \nBut a user associated to the \"Google\" tenant would not have access to say the \"Microsoft\" tenant and vice-versa. \n(edit below)\nBut a user within the \"Google\" tenant may move from say Maps to Search and this would be allowed. Or alternatively may move from just viewing Maps to being a group user. \n. well I guess we could have a user with the name  \"bob\" in multiple \"client groups\" but they would be identified via their email addresses which would be unique. \nso we could have the following scenario: \nbob (1) has an email bob@google.com\nbob (2) has an email Robert@google.com \nBut then we could have a user named \"bob\" in say the Microsoft \"client group\" and he would be identified with bob@microsoft.com \nAs I said I think this is where I am probably confusing/ incorrectly associating the term \"tenant\" \n. Hi Brock, Thanks for the debate on this. \nAfter thinking about this more I am clearly using the idea of a tenant in a different way than was probably envisaged and stated in the idea of a multi-tenant solution. \nI guess me trying to shoehorn the tenant attribute as a kind of identifying permission was incorrect of me (plus smacks of a quick and dirty solution from my part) . \nI guess this is where my understanding of the architecture of authorization/authentication systems has failed me (I have read so much over recent days/weeks it has muddled my brain a bit). \n. bitzblitz I am currently in the process of doing this at the moment for a site I am building. \nIn order to avoid having a lot of messy code I am building a htmlHelper class that you will be able to pass in the claim you are looking for into it and it should output the resulting value if that user has the claim. Once I have a tested solution I will be more than happy to share. \n. Hi blitzblitz this is the code I have produced so far and it seems to be working ok for me at the moment (still testing it though)\n```\n        public static class ClaimsToRazorParser\n        {\n        public static MvcHtmlString ClaimToString(this HtmlHelper helper,string type )\n        {\n    string returnItem = string.Empty;\n\n\n\n    List<Claim> claims = GetClaims(helper);\n\n    if(claims == null || claims.Count == 0)\n    {\n        throw new InvalidProgramException(\"There was a problem with the user passed in. It has no claims \"); \n    }\n    else\n    {\n        Claim claim = claims.FirstOrDefault(c => c.Type == type);\n\n        if(claim != null)\n        {\n            returnItem = claim.Value;\n        }\n\n    }\n\n    MvcHtmlString returnString = new MvcHtmlString(returnItem);\n\n\n    return returnString;\n}\n\n\n\n\nprivate static List<Claim> GetClaims(HtmlHelper helper)\n{\n\n    ClaimsPrincipal principal = helper.ViewContext.HttpContext.User as ClaimsPrincipal;\n    if (principal == null)\n    {\n        throw new InvalidCastException(\"The current principal is not a claims principal.\");\n    }\n    List<Claim> returnList = new List<Claim>();\n\n    returnList = principal.Claims.ToList();\n\n    return returnList;\n}\n\n}\n```\nThen to actually use it if you do something like this on your page \n@Html.ClaimToString(ClaimTypes.GivenName)\n. Thanks for the responses. \nI take it the NuGet Packages haven't been updated? I'm currently using version 6.0.0 which I think maybe missing these features. \nIn response to point 2) I wanted to set a dummy complex password as a safety net to prevent anyone other than the user knowing the password for the newly created accounts. This would then force the user to create their own password based on our password validation rules. Maybe overkill and as you said already addressed by you but I wanted it as my own safety net. \nPoint 3) I will stick with what I currently have in terms of using my extended repository for custom claims management \nAs for the SSO portion of the request I am looking to host everything in Azure so any helpful tips on doing this would be great. \nPoint 4) I guess I am just trying to confirm that the way I was indicating my custom claims was a sensible way and wasn't going against the \"spirit\" of how claims should be used. \nI will also take a look at that link. \nI noticed in point 3 of the license it states: \n3. The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission.\nAll I will be doing Is providing a small section for each of the technology partners/tools that I am using as a bit of a thank you (including link back to any sites) \n. Thanks. Have updated my project with this build so will see what changes I need to make and let you know if there are any issues.\n. Hi Brock, \nI am experiencing an issue with the pre-release. \nIf I try to run this code: \n Database.SetInitializer(new DropCreateDatabaseAlways()); \nand then create and account I get the following YSOD being returned: \n\nIf I try to run this instead: \nDatabase.SetInitializer(new MigrateDatabaseToLatestVersion());\nI get this YSOD:\n\nOther than completing dropping the database at the server level and getting the system to rebuild it from scratch (which is what the dropcreate should be doing) I am at a loss. (Also the version number for Membershipreboot, Membershipreboot.ef, membershipreboot.webhost are still at 6.0.0\nIdeally I don't want to drop the database as I have my user accounts set up. \n. I have reverted back to version 6 until a stable release is released. Luckily this is a test database that I am working on at the moment so I haven't had to destroy my live database yet which is still running an older version of the library. I'm personally all in favour of just having a sql script to run to create the database. Selfishly as long as it works on Azure I'll be happy :p \n. Ok. Will be testing it within the hour. \nDo you want me to test the SQL script direct from SQL management studio or run the database initializer and migrate. \n. so after much tweaking of the script I have finally got it to work on azure. \nI did this through Sql Management Studio 2012 and have changed the script a lot (some clean up and removing none azure/ deprecated commands) \nI will aid it into the next comment to make it easy for you to copy. \n. /** groups **/\n/ To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer./\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @Groups TABLE \n(\n    ID uniqueidentifier NOT NULL,\n    Tenant nvarchar(50) NOT NULL,\n    Name nvarchar(100) NOT NULL,\n    Created datetime NOT NULL,\n    LastUpdated datetime NOT NULL\n)\nINSERT INTO @Groups\nSELECT \n    ID, \n    Tenant, \n    Name, \n    Created, \n    LastUpdated \nFROM \n    dbo.Groups\nALTER TABLE dbo.GroupChilds\n    DROP CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_GroupID]\nDROP TABLE dbo.Groups\nCREATE TABLE dbo.Groups\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ID uniqueidentifier NOT NULL,\n    Tenant nvarchar(50) NOT NULL,\n    Name nvarchar(100) NOT NULL,\n    Created datetime NOT NULL,\n    LastUpdated datetime NOT NULL,\nCONSTRAINT\n    [PK_dbo.Groups] PRIMARY KEY CLUSTERED \n    (\n    [Key] ASC\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )\nINSERT INTO dbo.Groups (ID, \n    Tenant, \n    Name, \n    Created, \n    LastUpdated )\nSELECT \n    ID, \n    Tenant, \n    Name, \n    Created, \n    LastUpdated \nFROM \n    @Groups\nCOMMIT\nBEGIN TRANSACTION\nDECLARE @GroupChilds  TABLE \n(\nGroupID uniqueidentifier NOT NULL,\n    ChildGroupID uniqueidentifier NOT NULL\n)\nINSERT INTO @GroupChilds \nSELECT \n    GroupID, \n    ChildGroupID \nFROM dbo.GroupChilds \nDROP TABLE dbo.GroupChilds\nCREATE TABLE dbo.GroupChilds\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    GroupID uniqueidentifier NOT NULL,\n    ChildGroupID uniqueidentifier NOT NULL,\n    CONSTRAINT\n    [PK_dbo.GroupChilds] PRIMARY KEY CLUSTERED \n    (\n    [Key] ASC\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )\nINSERT INTO GroupChilds (GroupID, ChildGroupID)\nSELECT \n    GroupID, \n    ChildGroupID \nFROM\n    @GroupChilds\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nDECLARE @UserAccounts TABLE \n(\nID uniqueidentifier NOT NULL,\n    Tenant nvarchar(50) NOT NULL,\n    Username nvarchar(254) NOT NULL,\n    Email nvarchar(254) NULL,\n    Created datetime NOT NULL,\n    LastUpdated datetime NOT NULL,\n    PasswordChanged datetime NULL,\n    RequiresPasswordReset bit NOT NULL,\n    MobileCode nvarchar(100) NULL,\n    MobileCodeSent datetime NULL,\n    MobilePhoneNumber nvarchar(20) NULL,\n    AccountTwoFactorAuthMode int NOT NULL,\n    CurrentTwoFactorAuthStatus int NOT NULL,\n    IsAccountVerified bit NOT NULL,\n    IsLoginAllowed bit NOT NULL,\n    IsAccountClosed bit NOT NULL,\n    AccountClosed datetime NULL,\n    LastLogin datetime NULL,\n    LastFailedLogin datetime NULL,\n    FailedLoginCount int NOT NULL,\n    VerificationKey nvarchar(100) NULL,\n    VerificationPurpose int NULL,\n    VerificationKeySent datetime NULL,\n    HashedPassword nvarchar(200) NULL,\n    LastFailedPasswordReset datetime NULL,\n    FailedPasswordResetCount int NOT NULL,\n    MobilePhoneNumberChanged datetime NULL,\n    VerificationStorage nvarchar(100) NULL\n)\nINSERT INTO @UserAccounts \nSELECT \n    ID, \n    Tenant, \n    Username, \n    Email, \n    Created, \n    LastUpdated, \n    PasswordChanged, \n    RequiresPasswordReset, \n    MobileCode, \n    MobileCodeSent, \n    MobilePhoneNumber, \n    AccountTwoFactorAuthMode, \n    CurrentTwoFactorAuthStatus, \n    IsAccountVerified, \n    IsLoginAllowed, \n    IsAccountClosed, \n    AccountClosed, \n    LastLogin, \n    LastFailedLogin, \n    FailedLoginCount, \n    VerificationKey, \n    VerificationPurpose, \n    VerificationKeySent, \n    HashedPassword, \n    LastFailedPasswordReset, \n    FailedPasswordResetCount, \n    MobilePhoneNumberChanged, \n    VerificationStorage \nFROM \n    dbo.UserAccounts\nALTER TABLE dbo.LinkedAccountClaims\n    DROP CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_UserAccountID]\nALTER TABLE dbo.LinkedAccounts\n    DROP CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_UserAccountID]\nALTER TABLE dbo.PasswordResetSecrets\n    DROP CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_UserAccountID]\nALTER TABLE dbo.TwoFactorAuthTokens\n    DROP CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_UserAccountID]\nALTER TABLE dbo.UserCertificates\n    DROP CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_UserAccountID]\nALTER TABLE dbo.UserClaims\n    DROP CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_UserAccountID]\nDROP TABLE dbo.UserAccounts\nCREATE TABLE dbo.UserAccounts\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ID uniqueidentifier NOT NULL,\n    Tenant nvarchar(50) NOT NULL,\n    Username nvarchar(254) NOT NULL,\n    Email nvarchar(254) NULL,\n    Created datetime NOT NULL,\n    LastUpdated datetime NOT NULL,\n    PasswordChanged datetime NULL,\n    RequiresPasswordReset bit NOT NULL,\n    MobileCode nvarchar(100) NULL,\n    MobileCodeSent datetime NULL,\n    MobilePhoneNumber nvarchar(20) NULL,\n    AccountTwoFactorAuthMode int NOT NULL,\n    CurrentTwoFactorAuthStatus int NOT NULL,\n    IsAccountVerified bit NOT NULL,\n    IsLoginAllowed bit NOT NULL,\n    IsAccountClosed bit NOT NULL,\n    AccountClosed datetime NULL,\n    LastLogin datetime NULL,\n    LastFailedLogin datetime NULL,\n    FailedLoginCount int NOT NULL,\n    VerificationKey nvarchar(100) NULL,\n    VerificationPurpose int NULL,\n    VerificationKeySent datetime NULL,\n    HashedPassword nvarchar(200) NULL,\n    LastFailedPasswordReset datetime NULL,\n    FailedPasswordResetCount int NOT NULL,\n    MobilePhoneNumberChanged datetime NULL,\n    VerificationStorage nvarchar(100) NULL, \n    CONSTRAINT\n    [PK_dbo.UserAccounts] PRIMARY KEY CLUSTERED \n    (\n    [Key] ASC\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    )  \nALTER TABLE dbo.UserAccounts ADD CONSTRAINT\n    DF__UserAccou__Faile__21B6055D DEFAULT ((0)) FOR FailedPasswordResetCount\nINSERT INTO dbo.UserAccounts (ID, Tenant, Username, Email, Created, LastUpdated, PasswordChanged, RequiresPasswordReset, MobileCode, MobileCodeSent, MobilePhoneNumber, AccountTwoFactorAuthMode, CurrentTwoFactorAuthStatus, IsAccountVerified, IsLoginAllowed, IsAccountClosed, AccountClosed, LastLogin, LastFailedLogin, FailedLoginCount, VerificationKey, VerificationPurpose, VerificationKeySent, HashedPassword, LastFailedPasswordReset, FailedPasswordResetCount, MobilePhoneNumberChanged, VerificationStorage)\nSELECT ID, Tenant, Username, Email, Created, LastUpdated, PasswordChanged, RequiresPasswordReset, MobileCode, MobileCodeSent, MobilePhoneNumber, AccountTwoFactorAuthMode, CurrentTwoFactorAuthStatus, IsAccountVerified, IsLoginAllowed, IsAccountClosed, AccountClosed, LastLogin, LastFailedLogin, FailedLoginCount, VerificationKey, VerificationPurpose, VerificationKeySent, HashedPassword, LastFailedPasswordReset, FailedPasswordResetCount, MobilePhoneNumberChanged, VerificationStorage FROM @UserAccounts \nCOMMIT\nGO\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nDECLARE @LinkedAccountClaims TABLE \n(\nUserAccountID uniqueidentifier NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL\n)\nINSERT INTO @LinkedAccountClaims\nSELECT UserAccountID, ProviderName, ProviderAccountID, Type, Value FROM dbo.LinkedAccountClaims\nDROP TABLE dbo.LinkedAccountClaims\nCREATE TABLE dbo.LinkedAccountClaims\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL, \n    CONSTRAINT\n    [PK_dbo.LinkedAccountClaims] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    ) \nINSERT INTO dbo.LinkedAccountClaims (UserAccountID, ProviderName, ProviderAccountID, Type, Value)\nSELECT UserAccountID, ProviderName, ProviderAccountID, Type, Value FROM @LinkedAccountClaims\nGO\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nDECLARE @LinkedAccounts TABLE \n(\nUserAccountID uniqueidentifier NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    LastLogin datetime NOT NULL\n)\nINSERT INTO @LinkedAccounts\nSELECT UserAccountID, ProviderName, ProviderAccountID, LastLogin FROM dbo.LinkedAccounts\nDROP TABLE dbo.LinkedAccounts\nCREATE TABLE dbo.LinkedAccounts\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    LastLogin datetime NOT NULL, \n    CONSTRAINT\n    [PK_dbo.LinkedAccounts] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )   \nINSERT INTO dbo.LinkedAccounts (UserAccountID, ProviderName, ProviderAccountID, LastLogin)\n        SELECT UserAccountID, ProviderName, ProviderAccountID, LastLogin FROM @LinkedAccounts\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @PasswordResetSecrets TABLE \n(\n PasswordResetSecretID uniqueidentifier NOT NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    Question nvarchar(150) NOT NULL,\n    Answer nvarchar(150) NOT NULL\n)\nINSERT INTO @PasswordResetSecrets\nSELECT PasswordResetSecretID, UserAccountID, Question, Answer FROM dbo.PasswordResetSecrets \nDROP TABLE dbo.PasswordResetSecrets\nCREATE TABLE dbo.PasswordResetSecrets\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    PasswordResetSecretID uniqueidentifier NOT NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    Question nvarchar(150) NOT NULL,\n    Answer nvarchar(150) NOT NULL, \n    CONSTRAINT\n    [PK_dbo.PasswordResetSecrets] PRIMARY KEY CLUSTERED \n    (\n    [Key] ASC\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )   \nINSERT INTO dbo.PasswordResetSecrets (PasswordResetSecretID, UserAccountID, Question, Answer)\n        SELECT PasswordResetSecretID, UserAccountID, Question, Answer FROM @PasswordResetSecrets\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @TwoFactorAuthTokens TABLE \n(\nUserAccountID uniqueidentifier NOT NULL,\n    Token nvarchar(100) NOT NULL,\n    Issued datetime NOT NULL\n)\nINSERT INTO @TwoFactorAuthTokens \nSELECT UserAccountID, Token, Issued FROM dbo.TwoFactorAuthTokens\nDROP TABLE dbo.TwoFactorAuthTokens\nCREATE TABLE dbo.TwoFactorAuthTokens\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    Token nvarchar(100) NOT NULL,\n    Issued datetime NOT NULL, \n    CONSTRAINT\n    [PK_dbo.TwoFactorAuthTokens] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )  \nINSERT INTO dbo.TwoFactorAuthTokens (UserAccountID, Token, Issued)\n    SELECT UserAccountID, Token, Issued FROM @TwoFactorAuthTokens\nGO\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nDECLARE @UserCertificates TABLE \n(\nUserAccountID uniqueidentifier NOT NULL,\n    Thumbprint nvarchar(150) NOT NULL,\n    Subject nvarchar(250) NULL\n)\nINSERT INTO @UserCertificates\nSELECT UserAccountID, Thumbprint, Subject FROM dbo.UserCertificates\nDROP TABLE dbo.UserCertificates\nCREATE TABLE dbo.UserCertificates\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    Thumbprint nvarchar(150) NOT NULL,\n    Subject nvarchar(250) NULL, \n    CONSTRAINT\n    [PK_dbo.UserCertificates] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    )  \nINSERT INTO dbo.UserCertificates (UserAccountID, Thumbprint, Subject)\n        SELECT UserAccountID, Thumbprint, Subject FROM @UserCertificates \nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @UserClaims TABLE \n(\nUserAccountID uniqueidentifier NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL\n)\nINSERT INTO @UserClaims\nSELECT UserAccountID, Type, Value FROM dbo.UserClaims\nDROP TABLE dbo.UserClaims\nCREATE TABLE dbo.UserClaims\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NULL,\n    UserAccountID uniqueidentifier NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL, \n    CONSTRAINT\n    [PK_dbo.UserClaims] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )  \nINSERT INTO dbo.UserClaims (UserAccountID, Type, Value)\n        SELECT UserAccountID, Type, Value FROM @UserClaims\nCOMMIT\n/* update keys */\nupdate GroupChilds set parentkey = (select [key] from Groups g where GroupID = g.ID)\ngo\nupdate LinkedAccountClaims set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\nupdate LinkedAccounts set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\nupdate PasswordResetSecrets set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\nupdate TwoFactorAuthTokens set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\nupdate UserCertificates set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\nupdate UserClaims set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)\ngo\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nGO\nDECLARE @GroupChilds TABLE \n(\n    [Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    ChildGroupID uniqueidentifier NOT NULL\n)\nINSERT INTO @GroupChilds \nSELECT [Key], ParentKey, ChildGroupID FROM dbo.GroupChilds\nDROP TABLE dbo.GroupChilds\nCREATE TABLE dbo.GroupChilds\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    ChildGroupID uniqueidentifier NOT NULL, \n    CONSTRAINT\n    [PK_dbo.GroupChilds] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )  \nSET IDENTITY_INSERT dbo.GroupChilds ON\nINSERT INTO dbo.GroupChilds ([Key], ParentKey, ChildGroupID)\n        SELECT [Key], ParentKey, ChildGroupID FROM @GroupChilds\nSET IDENTITY_INSERT dbo.GroupChilds OFF\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @LinkedAccountClaims TABLE \n(\n[Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL\n)\nINSERT INTO @LinkedAccountClaims\nSELECT [Key], ParentKey, ProviderName, ProviderAccountID, Type, Value FROM dbo.LinkedAccountClaims \nDROP TABLE dbo.LinkedAccountClaims\nCREATE TABLE dbo.LinkedAccountClaims\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL, \n    CONSTRAINT\n    [PK_dbo.LinkedAccountClaims] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    )   \nSET IDENTITY_INSERT dbo.LinkedAccountClaims ON\nALTER TABLE dbo.LinkedAccountClaims SET (LOCK_ESCALATION = TABLE)\nINSERT INTO dbo.LinkedAccountClaims ([Key], ParentKey, ProviderName, ProviderAccountID, Type, Value)\n        SELECT [Key], ParentKey, ProviderName, ProviderAccountID, Type, Value FROM @LinkedAccountClaims \nSET IDENTITY_INSERT dbo.LinkedAccountClaims OFF\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @LinkedAccounts TABLE \n(\n    [Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    LastLogin datetime NOT NULL\n)\nINSERT INTO @LinkedAccounts\nSELECT [Key], ParentKey, ProviderName, ProviderAccountID, LastLogin FROM dbo.LinkedAccounts \nDROP TABLE dbo.LinkedAccounts\nCREATE TABLE dbo.LinkedAccounts\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    ProviderName nvarchar(30) NOT NULL,\n    ProviderAccountID nvarchar(100) NOT NULL,\n    LastLogin datetime NOT NULL, \n    CONSTRAINT\n    [PK_dbo.LinkedAccounts] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    )   \nSET IDENTITY_INSERT dbo.LinkedAccounts ON\nINSERT INTO dbo.LinkedAccounts ([Key], ParentKey, ProviderName, ProviderAccountID, LastLogin)\nSELECT [Key], ParentKey, ProviderName, ProviderAccountID, LastLogin FROM @LinkedAccounts\nSET IDENTITY_INSERT dbo.LinkedAccounts OFF\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @PasswordResetSecrets TABLE \n(\n    [Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    PasswordResetSecretID uniqueidentifier NOT NULL,\n    Question nvarchar(150) NOT NULL,\n    Answer nvarchar(150) NOT NULL\n)\nINSERT INTO @PasswordResetSecrets\nSELECT [Key], ParentKey, PasswordResetSecretID, Question, Answer FROM dbo.PasswordResetSecrets\nDROP TABLE dbo.PasswordResetSecrets\nCREATE TABLE dbo.PasswordResetSecrets\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    PasswordResetSecretID uniqueidentifier NOT NULL,\n    Question nvarchar(150) NOT NULL,\n    Answer nvarchar(150) NOT NULL, \n     CONSTRAINT\n    [PK_dbo.PasswordResetSecrets] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    )   \nSET IDENTITY_INSERT dbo.PasswordResetSecrets ON\nINSERT INTO dbo.PasswordResetSecrets ([Key], ParentKey, PasswordResetSecretID, Question, Answer)\n        SELECT [Key], ParentKey, PasswordResetSecretID, Question, Answer FROM @PasswordResetSecrets\nSET IDENTITY_INSERT dbo.PasswordResetSecrets OFF\nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @TwoFactorAuthTokens TABLE \n(\n[Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    Token nvarchar(100) NOT NULL,\n    Issued datetime NOT NULL\n)\nINSERT INTO @TwoFactorAuthTokens\nSELECT  [Key], ParentKey, Token, Issued FROM dbo.TwoFactorAuthTokens\nDROP TABLE dbo.TwoFactorAuthTokens\nCREATE TABLE dbo.TwoFactorAuthTokens\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    Token nvarchar(100) NOT NULL,\n    Issued datetime NOT NULL, \n    CONSTRAINT\n    [PK_dbo.TwoFactorAuthTokens] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\n    ) \nSET IDENTITY_INSERT dbo.TwoFactorAuthTokens ON\nINSERT INTO dbo.TwoFactorAuthTokens ([Key], ParentKey, Token, Issued)\nSELECT [Key], ParentKey, Token, Issued FROM @TwoFactorAuthTokens\nSET IDENTITY_INSERT dbo.TwoFactorAuthTokens OFF \nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @UserCertificates TABLE \n(\n[Key] int NOT NULL,\n    ParentKey int NOT NULL,\n    Thumbprint nvarchar(150) NOT NULL,\n    Subject nvarchar(250) NULL\n)\nINSERT INTO @UserCertificates\nSELECT [Key], ParentKey, Thumbprint, Subject FROM dbo.UserCertificates\nDROP TABLE dbo.UserCertificates\nCREATE TABLE dbo.UserCertificates\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    Thumbprint nvarchar(150) NOT NULL,\n    Subject nvarchar(250) NULL, \n    CONSTRAINT\n    [PK_dbo.UserCertificates] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    )\nSET IDENTITY_INSERT dbo.UserCertificates ON\nINSERT INTO dbo.UserCertificates ([Key], ParentKey, Thumbprint, Subject)\n        SELECT [Key], ParentKey, Thumbprint, Subject FROM @UserCertificates\nSET IDENTITY_INSERT dbo.UserCertificates OFF \nCOMMIT\n/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/\nBEGIN TRANSACTION\nSET QUOTED_IDENTIFIER ON\nSET ARITHABORT ON\nSET NUMERIC_ROUNDABORT OFF\nSET CONCAT_NULL_YIELDS_NULL ON\nSET ANSI_NULLS ON\nSET ANSI_PADDING ON\nSET ANSI_WARNINGS ON\nCOMMIT\nBEGIN TRANSACTION\nGO\nDECLARE @UserClaims TABLE \n(\n[Key] int NOT NULL ,\n    ParentKey int NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL\n)\nINSERT INTO @UserClaims\nSELECT [Key], ParentKey, Type, Value FROM dbo.UserClaims\nDROP TABLE dbo.UserClaims\nCREATE TABLE dbo.UserClaims\n    (\n    [Key] int NOT NULL IDENTITY (1, 1),\n    ParentKey int NOT NULL,\n    Type nvarchar(150) NOT NULL,\n    Value nvarchar(150) NOT NULL, \n    CONSTRAINT\n    [PK_dbo.UserClaims] PRIMARY KEY CLUSTERED \n    (\n    [Key]\n    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) \n    ) \nSET IDENTITY_INSERT dbo.UserClaims ON\nINSERT INTO dbo.UserClaims ([Key], ParentKey, Type, Value)\n        SELECT [Key], ParentKey, Type, Value FROM @UserClaims\nGO\nSET IDENTITY_INSERT dbo.UserClaims OFF\nCOMMIT\nALTER TABLE [dbo].[GroupChilds]  WITH CHECK ADD  CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].Groups\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[GroupChilds] CHECK CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_ParentKey]\nGO\nALTER TABLE [dbo].[LinkedAccountClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[LinkedAccountClaims] CHECK CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_ParentKey]\nGO\nALTER TABLE [dbo].[LinkedAccounts]  WITH CHECK ADD  CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[LinkedAccounts] CHECK CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_ParentKey]\nGO\nALTER TABLE [dbo].[PasswordResetSecrets]  WITH CHECK ADD  CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[PasswordResetSecrets] CHECK CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_ParentKey]\nGO\nALTER TABLE [dbo].[TwoFactorAuthTokens]  WITH CHECK ADD  CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[TwoFactorAuthTokens] CHECK CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_ParentKey]\nGO\nALTER TABLE [dbo].[UserCertificates]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[UserCertificates] CHECK CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_ParentKey]\nGO\nALTER TABLE [dbo].[UserClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])\nREFERENCES [dbo].UserAccounts\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[UserClaims] CHECK CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_ParentKey]\nGO\n/** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM _/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].GroupChildsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/*_* Object:  Index [IX_ID]    Script Date: 3/4/2014 9:01:48 PM **/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_ID] ON [dbo].GroupsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Tenant_Name]    Script Date: 3/4/2014 9:01:48 PM _/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Name] ON [dbo].GroupsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/*_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM *_/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].LinkedAccountClaimsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ****/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].LinkedAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_ProviderName_ProviderAccountID]    Script Date: 3/4/2014 9:01:48 PM _/\nCREATE NONCLUSTERED INDEX [IX_ProviderName_ProviderAccountID] ON [dbo].LinkedAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/*_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM *_/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].PasswordResetSecretsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM *_/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].TwoFactorAuthTokensWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/_* Object:  Index [IX_ID]    Script Date: 3/4/2014 9:01:48 PM **/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_ID] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Tenant_Email]    Script Date: 3/4/2014 9:01:48 PM ****/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Email] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Tenant_MobilePhoneNumber]    Script Date: 3/4/2014 9:01:48 PM ****/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_MobilePhoneNumber] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Tenant_Username]    Script Date: 3/4/2014 9:01:48 PM ****/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Username] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Username]    Script Date: 3/4/2014 9:01:48 PM ****/\nCREATE NONCLUSTERED INDEX [IX_Username] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_VerificationKey]    Script Date: 3/4/2014 9:01:48 PM _/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_VerificationKey] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/*_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM **/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].UserCertificatesWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nSET ANSI_PADDING ON\nGO\n/** Object:  Index [IX_Thumbprint]    Script Date: 3/4/2014 9:01:48 PM _/\nCREATE NONCLUSTERED INDEX [IX_Thumbprint] ON [dbo].UserCertificatesWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\n/*_* Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM **/\nCREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].UserClaimsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)\nGO\nALTER TABLE [dbo].[GroupChilds] ADD CONSTRAINT [UK_ParentKey_ChildGroupID] UNIQUE NONCLUSTERED  ([ParentKey], [ChildGroupID])\nGO\nALTER TABLE [dbo].[LinkedAccountClaims] ADD CONSTRAINT [UK_ParentKey_ProviderName_ProviderAccountID_Type_Value] UNIQUE NONCLUSTERED  ([ParentKey], [ProviderName], [ProviderAccountID], [Type], [Value])\nGO\nALTER TABLE [dbo].[LinkedAccounts] ADD CONSTRAINT [UK_ParentKey_ProviderName_ProviderAccountID] UNIQUE NONCLUSTERED  ([ParentKey], [ProviderName], [ProviderAccountID])\nGO\nALTER TABLE [dbo].[PasswordResetSecrets] ADD CONSTRAINT [UK_ParentKey_Question] UNIQUE NONCLUSTERED  ([ParentKey], [Question])\nGO\nALTER TABLE [dbo].[UserCertificates] ADD CONSTRAINT [UK_ParentKey_Thumbprint] UNIQUE NONCLUSTERED  ([ParentKey], [Thumbprint])\nGO\nALTER TABLE [dbo].[UserClaims] ADD CONSTRAINT [UK_ParentKey_Type_Value] UNIQUE NONCLUSTERED  ([ParentKey], [Type], [Value])\nGO\n/* migration table */\nDELETE from [dbo].[__MigrationHistory] where [ContextKey] = 'BrockAllen.MembershipReboot.Ef.DefaultMembershipRebootDatabase'\nGO\nINSERT [dbo].__MigrationHistory VALUES (N'201403032007363_v7_InitialCreate', N'BrockAllen.MembershipReboot.Ef.Migrations.Configuration', 0xnGO\nINSERT [dbo].__MigrationHistory VALUES (N'201403032007511_v7_Indexes', N'BrockAllen.MembershipReboot.Ef.Migrations.Configuration', 0xnGO\n. I have confirmed that this script has worked to enable the v7-b4 release to work. \nThis script should work on sql 2005 - 2014. \n. spoke to soon. \nWhen trying to create a new user in the system I am now getting this error thrown up: \n{\"Cannot insert duplicate key row in object 'dbo.UserAccounts' with unique index 'IX_Tenant_MobilePhoneNumber'. The duplicate key value is (default, <NULL>).\\r\\nThe statement has been terminated.\"}\nI wonder if this would be resolved by changing the IGNORE_DUP_KEY = OFF to IGNORE_DUP_KEY = ON on the index being created. \nI am not passing in a mobile phone number as it is not required for my needs so unless a user fills one out as part of their profile section it should remain NULL. \n. Hi Brock, \nHave tested the script and it worked for the most part. (Azure doesn't like to swap databases via sql Management Studio) \nAlthough I was still getting index issues when creating new accounts and also verifying accounts. \nI have amended the indexes for the IX_Tenant_MobilePhonerNumber and IX_Verification_Key to the following: \n/** Object:  Index [IX_Tenant_MobilePhoneNumber]    Script Date: 06/03/2014 10:30:33 ****/\nDROP INDEX [IX_Tenant_MobilePhoneNumber] ON [dbo].[UserAccounts]\nGO\n/** Object:  Index [IX_Tenant_MobilePhoneNumber]    Script Date: 06/03/2014 10:30:33 ****/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_MobilePhoneNumber] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\n/** Object:  Index [IX_VerificationKey]    Script Date: 06/03/2014 10:30:42 ****/\nDROP INDEX [IX_VerificationKey] ON [dbo].[UserAccounts]\nGO\n/** Object:  Index [IX_VerificationKey]    Script Date: 06/03/2014 10:30:42 ****/\nCREATE UNIQUE NONCLUSTERED INDEX [IX_VerificationKey] ON [dbo].UserAccountsWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\nThis then resolved the issues I was having with the indexes complaining about duplicate keys being included in the index. \n. ok these are the steps I went through: \n1) Delete existing database from Azure \n2) Run first part of your script to create the database from master\n3) Change to MembershipReboot database and ran entire script except last database change \n4) Change back to master and ran last section of script. \n4a) Make sure that the membership reboot settings are set to \n<membershipReboot requireAccountVerification=\"false\" allowLoginAfterAccountCreation=\"true\" emailIsUsername=\"true\" multiTenant=\"false\" allowAccountDeletion=\"false\" passwordHashingIterationCount=\"0\" accountLockoutDuration=\"00:01:00\" passwordResetFrequency=\"0\" />\n5) Go to my MVC application and enabled my initDatabase() function in global.asax file that runs on start up and creates an initial admin user account for me: \nprotected void Application_Start()\n        {\n            InitDatabase();\n            AntiForgeryConfig.UniqueClaimTypeIdentifier = ClaimTypes.NameIdentifier;\n            AreaRegistration.RegisterAllAreas();\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n}\nprivate void InitDatabase()\n        {\n            try\n            {\n                //var i = new DefaultMembershipRebootDatabase(\"MembershipReboot\");\n```\n            //var e = new MigrateDatabaseToLatestVersion();\n           // e.InitializeDatabase(i);\n        //Database.SetInitializer<DefaultMembershipRebootDatabase>(e);\n\n\n        //Database.SetInitializer<DefaultMembershipRebootDatabase>(new DropCreateDatabaseAlways<DefaultMembershipRebootDatabase>()); \n        //Database.SetInitializer(new MigrateDatabaseToLatestVersion<DefaultMembershipRebootDatabase, BrockAllen.MembershipReboot.Ef.Migrations.Configuration>());\n\n        var svc = DependencyResolver.Current.GetService<UserAccountService>();\n        var user = svc.GetByEmail(\"default\", \"myaccount@adminuser.com\");\n        if (user == null)\n        {\n            var account = svc.CreateAccount(\"default\", \"myaccount@adminuser.com\", \"{my secure password}\", \"myaccount@adminuser.com\");\n\n\n            svc.SetConfirmedEmail(account.ID, account.Email); \n            account = svc.GetByID(account.ID);\n            svc.AddClaim(account.ID, \"Role\", \"Developer\");\n\n            svc.AddClaim(account.ID, \"Country\", \"UK\");\n\n            svc.Update(account);\n        }\n        else\n        {\n            if (!user.IsAccountVerified)\n            {\n                svc.RequestAccountVerification(user.ID);\n                user = svc.GetByID(user.ID);\n               // svc.VerifyEmailFromKey(user.VerificationKey);\n                svc.AddClaim(user.ID, ClaimTypes.Role, \"Developer\");\n\n                svc.AddClaim(user.ID, ClaimTypes.Country, \"UK\");\n\n\n                svc.Update(user);\n            }\n        }\n    }\n    catch (Exception error)\n    {\n        throw error;\n    }\n}\n\n```\nat this point I can log in with just one user account happily and no error is thrown at this point. \n6)  When I go to my User Admin Panel to create a user I then provide the following details: \ni) First Name \nii) Last Name \niii) Email Address \niv) Role \nv) Login Is allowed \nvi) Account is closed\nThis information maps to the following model: \npublic class UserAccountModel : IUserAccountModel\n    {\n```\n    public string ID { get; set; }\npublic Guid GuidID\n{\n    get {\n        Guid id = new Guid();\n\n        Guid.TryParse(ID, out id);\n\n\n        return id; \n    }\n}\n\n\n[Required]\n[Display(Name = \"Email Address\")]\npublic string Email { get; set; }\n\n\n\n\n\n\n//[Required]\n[Display(Name = \"Website Access\")]\n\npublic string SiteAccess { get; set; }\n\n//[Required]\n[Display(Name = \"Username \")]\n\npublic string UserName { get; set; }\n\n[Required]\n[Display(Name = \"First Name\")]\n\npublic string FirstName { get; set; }\n\n[Required]\n[Display(Name = \"Last Name\")]\n\npublic string LastName { get; set; }\n\n[Required]\n[Display(Name = \"Access Level\")]\n\npublic string Role { get; set; }\n\n[Required]\n[Display(Name = \"Login Allowed\")]\n\npublic bool IsLoginAllowed { get; set; }\n\n[Required]\n[Display(Name = \"Close Account\")]\n\n\npublic bool IsAccountClosed { get; set; }\n\n\n//[Required]\n[Display(Name = \"Automatically Verify Account\")]\n\npublic bool IsAccountVerified { get; set; }\n\npublic bool IsAccountLocked { get; set; }\n\n\n/// <summary>\n/// default constructor\n/// This will automatically set the default tenant and will set the account to verified. \n/// </summary>\npublic UserAccountModel()\n{\n    SiteAccess = \"default\";\n    IsAccountVerified = true;\n    UserName = \"\";\n    IsAccountClosed = false;\n\n}\n\n}\n```\n7) This model is then passed from the controller to a data access repository that then creates the user account for me:\n```\npublic class MembershipRebootRepository : BaseEfRepository\n{\nUserAccountService userSvc;\nAuthenticationService authSvc;\n\npublic MembershipRebootRepository(string context, AuthenticationService service)\n    : base(context)\n{\n    authSvc = service;\n    userSvc = service.UserAccountService;\n}\n\n```\n//some more code here....\npublic UserAccountModel CreateUser(UserAccountModel model)\n        {\n            //stubbing out for now. \n```\n        try\n        {\n            string password = new Passwords().GeneratePassword();\n        **//Its at this point that the error is thrown**\n        UserAccount user = userSvc.CreateAccount(model.Email, password, model.Email, null, DateTime.Now);\n\n        if (user != null)\n        {\n            model.ID = user.ID.ToString();\n\n            //userSvc.RequestAccountVerification(user.ID);\n\n            //userSvc.Update(user);\n\n            userSvc.SetConfirmedEmail(model.GuidID, model.Email);\n\n           // user = userSvc.GetByID(model.GuidID);\n\n            AddClaim(model.GuidID, ClaimTypes.GivenName, model.FirstName);\n            AddClaim(model.GuidID, ClaimTypes.Surname, model.LastName);\n            AddClaim(model.GuidID, ClaimTypes.Role, model.Role);\n            CreateUpdateBasicClaims(model);\n            OpenCloseUserAccount(model);\n            userSvc.SetIsLoginAllowed(model.GuidID, model.IsLoginAllowed);\n            //userSvc.SetRequiresPasswordReset(user.ID, true);\n\n\n            //AccountIsVerified(model.IsAccountVerified, user, true);\n\n\n            //userSvc.Update(user);\n        }\n        else\n        {\n            AddError(new InvalidOperationException(\"User was not created. Something went wrong. \"), ErrorLevel.Defcon1);\n        }\n    }\n    catch (Exception error)\n    {\n        AddError(error, ErrorLevel.Defcon1);\n\n    }\n\n\n    return model;\n}\n\n```\n}\nthe base class that this inherits from is; \npublic class BaseEfRepository : IBaseEfRepository\n    {\n        public DbContext Context\n        {\n            get;\n            set;\n        }\n```\n    /// \n    /// The base repository for the data access objects. \n    /// \n    /// The name of the ef context we are using or the connection string\n    /// If no context is sent then the system will try and use the first context added to the connection strings area.  \n    public BaseEfRepository(string context = \"\")\n    {\n    if (string.IsNullOrEmpty(context))\n    {\n        try\n        {\n            //get the first connection string from the database as a fail over. \n            context = ConfigurationManager.ConnectionStrings[0].Name;\n\n        }\n        catch(Exception error)\n        {\n\n            Exception newError = new InvalidOperationException(\"The system was unable to establish which connection string to use via the given context: \" + context, error);\n\n            AddError(newError, ErrorLevel.Defcon1);\n            return; \n        }\n\n\n    }\n\n\n    Context = new DbContext(context);\n\n\n}\n\n```\n}\nMaybe it is something that I am doing wrong here with EF? \nBut changing those indexes appears to make the process work. \n. So before I flatten my database again for the umpteenth time are the indexes that I have altered ok? Or are these now completely removed? \n. Hi Brock, \nThanks for the update. \nI have updated to the latest v7 sql script and updated to beta 6 and touch wood everything appears to be working correctly. \nI have finally got a test version of my centralized user panel working with custom claims so my next job now is to expand this to work in an SSO environment as mentioned before. \nOn another note hopefully I will be hitting SDD for the first time (if work gets round to sorting me out with a ticket). I have already highlighted your sessions as priority number 1. :)\n. Have you enabled nuGet package restore?  You can do this by right clicking the main solution and then selecting Enable NuGet Package Restore \nYou are missing the Entity Framework References from the solution. \nif that doesn't work just go into Nuget Package manager and search for Entity Framework and add to all applicable projects. \n. Hi Brock, \nApologies for not coming back to you on this earlier. \nI am a little confused with how I should be implementing this. \nI'm not sure if I am understanding this correctly or if I am just misunderstanding something. \nSo let me see if I can example my scenario a little better and hopefully this will aid understanding. \nUser Management and Creation \nSo I currently have a site where I am managing and creating all my users using MR and this is uses a single MVC5 website with the logic for doing all the login, adding/removing claims, etc into a service library class. \nHopefully the attached images will help with showing how this website works. \nLogin Page \n\nSummary of system \n\nListing all users set up in the system (Admin view) \n\nEditing/Adding user screen\n\nList of allowed applications that the system knows about\n\nEditing/Adding allowed applications\n\nAllowed Claims setup for applications\n\nEditing/Adding claims setup for applications\n\nApplying claims to a user for allowed/denied access\n\nin addition to this I have also created a custom Authorize attribute which will be used by all sites which looks through the claims and checks to see if a user has the required access to the controller/action. \nsee below: \nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Security.Claims;\nusing System.Web;\nusing System.Web.Mvc;\nnamespace Common.Library.DataAnnotations.Attributes\n{\n    /// \n/// This is the Claims Authorize attribute used for Brock Allen's MembershipReboot implementation \n/// This is designed for a single tenant based solution rather than multitenant \n/// \n/// </summary>\n\n\npublic class ClaimsMRSingleAuthorizeAttribute : AuthorizeAttribute\n{\n\n```\n    private string app;\n//private string claimAction;\n\n\n\n\nprivate string resourceValue;\n\n\n\n\n\n/// <summary>\n/// This is the claims authorize attribute using the resource/action/claim values pattern\n/// </summary>\n/// <param name=\"resource\">The Resource we are accessing</param>\n/// <remarks>There is no default being passed here.</remarks>\n/// <param name=\"action\">The action we are checking for. </param>\n/// <remarks>The default action passed in is null </remarks>\n/// <param name=\"values\">the claims we are looking to check against for authorization. If none present then we assume the user has access to the action </param>\n/// <remarks>If no values are pass we will assume if they have access to required resource with the appropriate action this is good enough.</remarks>\npublic ClaimsMRSingleAuthorizeAttribute(string application = null, string resource = null)\n{\n\n\n    app = application;\n    resourceValue = resource;\n\n\n\n}\n\n\n\n\n\nprotected override bool AuthorizeCore(HttpContextBase httpContext)\n{\n    bool valid = false;\n\n    if (httpContext == null)\n    {\n        throw new InvalidOperationException(\"invalid httpContext passed into Claims Authorize Attribute\");\n    }\n\n    ClaimsPrincipal user = httpContext.User as ClaimsPrincipal;\n\n    if (user == null)\n    {\n        throw new InvalidCastException(string.Format(\"httpContext user is not a claims based principal the user principal is: {0}\", httpContext.User.GetType().ToString()));\n    }\n    else\n    {\n\n\n\n        //do authorization logic in here. \n        //probably offload this onto a centralized authentication manager. \n        List<Claim> claimsList = new List<Claim>();\n        claimsList = user.Claims.ToList();\n\n        if (claimsList == null || claimsList.Count == 0)\n        {\n            throw new InvalidOperationException(string.Format(\"No valid claims found for the current user principal: {0}\", user.Identity.Name));\n        }\n        else\n        {\n\n            //we have some claims so do they match the current actions requested for this user. \n            //so we need to understand if the user can access the current application. \n            //given that we are using the membership reboot solution in single tenant mode then we need to check the authorized application.\n\n            //first check is see if the user has the claim Developer. If they do we are effectively saying god mode is enabled \n            Claim role = claimsList.FirstOrDefault(c => c.Type == ClaimTypes.Role && c.Value == \"Developer\");\n\n            //valid = true; \n            if (role != null)\n            {\n                valid = true;\n            }\n            else\n            {\n                //else we need to check if they have the appropriate claims based on the application/resource. \n                //we need to determine if we have the application, resource and action being passed in.\n\n                if (string.IsNullOrWhiteSpace(app))\n                {\n                    //this will get everything before the path \n                    app = httpContext.Request.Url.GetLeftPart(UriPartial.Authority);\n\n                }\n\n\n                if (string.IsNullOrWhiteSpace(resourceValue))\n                {\n                    resourceValue = httpContext.Request.Url.AbsolutePath;\n                }\n\n\n                //so we need to find out if we have any claims associated to this user for this application \n                //we check the issuer attribute\n\n                List<Claim> appSpecificClaims = claimsList.Where(c => c.Type.ToLower().Contains(app.ToLower())).ToList();\n\n                if (appSpecificClaims != null && appSpecificClaims.Count > 0)\n                {\n                    //so we have some claims lets see if we have one specific to access this application.\n\n                    string providedClaim = string.Format(\"{0}/claims{1}\", app, resourceValue);\n\n                    //first try to match the specific claim\n                    Claim matchedClaim = appSpecificClaims.FirstOrDefault(c => c.Type.ToLower() == providedClaim.ToLower());\n\n                    if (matchedClaim != null)\n                    {\n                        bool.TryParse(matchedClaim.Value, out valid);\n                    }\n                    else\n                    {\n                        //we may have a match but due to routing we may have something like id being included in the path. \n                        //remove the last item of this and see if we have a value that matches.\n\n                        matchedClaim = appSpecificClaims.FirstOrDefault(c => c.Type.ToLower() == providedClaim.ToLower().Substring(0,providedClaim.LastIndexOf(\"/\")));\n\n                        if (matchedClaim != null)\n                        {\n                            bool.TryParse(matchedClaim.Value, out valid);\n\n                        }\n                        else\n                        {\n                            //as a complete fail over try and match any item maybe at the route level. This should be the first one that gets picked. \n                            matchedClaim = appSpecificClaims.OrderBy(c => c.Type).FirstOrDefault(c => providedClaim.ToLower().Contains(c.Type.ToLower()));\n\n                            if(matchedClaim != null )\n                            {\n                                bool.TryParse(matchedClaim.Value, out valid);\n\n                            }\n                        }\n\n\n                    }\n\n                }\n\n\n\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n\n\n\n    app = resourceValue = string.Empty;\n\n\n\n\n    return valid;\n\n}\n\n\nprotected override void HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext filterContext)\n{\n    if (filterContext.HttpContext.User.Identity.IsAuthenticated)\n    {\n        if (filterContext.HttpContext.Request.IsAjaxRequest())\n        {\n            filterContext.HttpContext.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n            //filterContext.Result = new RedirectToRouteResult(new System.Web.Routing.RouteValueDictionary(new { controller = \"Login\", action = \"Index\" }));\n            filterContext.HttpContext.Response.End();\n        }\n    }\n\n\n\n\n\n    base.HandleUnauthorizedRequest(filterContext);\n}\n\n}\n```\n}\nSo this application used the SingleTenantSolution (The very basic one) as the basis of the site and how I have implemented MR security within this site. \nNow to use this \"single database\" I have extracted out all the MR elements (That I require) within a class library that can be just dropped into a new site with the Login/Logout controllers and associated views. \nDue to deploying this to the cloud I am also having to change the webconfig for the session provider to be: \n\n            If you are deploying to a cloud environment that has multiple web server instances,\n            you should change session state mode from \"InProc\" to \"Custom\". In addition,\n            change the connection string named \"DefaultConnection\" to connect to an instance\n            of SQL Server (including SQL Azure and SQL  Compact) instead of to SQL Server Express.\n      \n<sessionState mode=\"Custom\" customProvider=\"DefaultSessionProvider\" timeout=\"60\">\n  <providers>\n    <add name=\"DefaultSessionProvider\" type=\"System.Web.Providers.DefaultSessionStateProvider, System.Web.Providers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" connectionStringName=\"MembershipReboot\" />\n  </providers>\n</sessionState>\nIn addition to this (Not sure if this is correct I have also included the following section into my webconfig \n<system.identityModel>\n    <identityConfiguration>\n      <securityTokenHandlers>\n        <remove type=\"System.IdentityModel.Tokens.SessionSecurityTokenHandler,System.IdentityModel, Version=4.0.0.0, Culture=neutral,PublicKeyToken=B77A5C561934E089\" />\n        <add type=\"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler,System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral,PublicKeyToken=B77A5C561934E089\">\n          <sessionTokenRequirement lifetime=\"08:00:00\" />\n        </add>\n      </securityTokenHandlers>\n    </identityConfiguration>\n  </system.identityModel>\n  <system.identityModel.services>\n    <federationConfiguration>\n      <cookieHandler requireSsl=\"false\" persistentSessionLifetime=\"08:00:00\" mode=\"Chunked\" />\n    </federationConfiguration>\n  </system.identityModel.services>\nSo I am currently having to repeat a lot/ cut and paste a lot of code across to new projects just to get the authentication solution working. In order to remove this I am now looking at the sso approach as this would be a far better solution long term for me. \nWhich leads me back to the original question where I need to split out the Front End and the back end layer to allow easy code reuse for additional sites that will use the central MR database. \nDo I integrate the \"ThinkTecture\" Authorization server into my user admin site and then pass the login/logout responsibilities to this single user management site \"sso style\" in some federated way (WIF) or do I include the Authorization server in to each project and authenticate as I currently do in an isolated manner and then have to somehow pass either some user credentials across or some form of \"token\" from my front end to my back end solution to indicated that the user requesting the WebApi resource is a) Authenticated and b) Authorised to access this resource? \nSorry if this sounds a bit like security 101 but I am trying to get my head around this security business and ensure I have implemented in the correct way. \n. It difficult as I have some paid controls from telerik (kendo ui for mvc) in my project. \nI am also using telerik's data access as my preferred ORM for the additional applications/claims management bit. \nI could provide access to the abstracted service layer and non-telerik based bits but giving you the front end would be difficult unless you are telerik licensed. \nIf you wanted to see a demo site I could set one up and host it (I use azure) I would just need to set you up with access. \nIf there are any specific questions about my implementation I will share as much as I can with you \n. The front end could be retro coded to use the open source version of the telerik controls. \nI have used a mixture of bootstrap 3, font awesome and telerik to provide all the front end elements. It is mainly the grids and the editing screen that are telerik based which could be done using similar bootstrap/ other js frameworks. \nI like using the telerik mvc controls as it means I can get a front end up and running quickly and focus more on the back end/ middleware elements. \n. Yes sorry. I was trying to think of the best way of explaining it. Hence the images to try and express what it is I am trying to do. \nI will look at the oauth2 stuff. So should I be looking at re-engineering my solution with using owin under the hood? \nShould I be looking at anything else to aid my understanding on implementing this. I have been looking at Dominic's pluralsight course but I feel I need to try and see some more of the fundamentals. \n. I have fallen foul of this in a project more than once :) . If you are using ninject make sure you have included the ninject.mvc package. \n. If you can provide a copy of your project I can take a look and see if I can fix it for you. \n. @StateBarofArizona not a problem. If you give me. Link to a download then I will take a look at it for you as soon as I can. I'm pretty busy at work at the moment but I should be able to put an hour or two to see what is going on.\n. @StateBarofArizona apologies for not coming back to you on this. As I said I am a little bit busy at the moment. I should be able to take a proper look at this later this week. I took a quick look last week but noticed you had a number of double up sections in the web config as well as a number of post build processes. I haven't looked at the code in depth yet but I will aim to look at it before Thursday for you. \n. I currently have a site set up on Azure and do not experience this issue even forcing it to go from my azurewebsites.net domain it still uses my custom applied domain (I don't have subdomains set up) I am guessing the email handler is mapping the first domain name it finds marked against the server instance as I noticed the emails do seem to come from my www address of the site rather than the non-www instance ie https://wwww.mywebsite.com and not https://mywebsite.com. \nYou could provide an override within the email event handler to change the email's that are being generated. \nI am assuming you have configured the Azure website instance to know about your custom domains and have configured these correctly. \n. Ok. Thanks Brock. I will probably test it out and see what has affected my projects. I am more concerned about the database than I am the API's. I will run a schema compare and see if there is anything that has fundamentally changed (hopefully not) and then upgrade my project accordingly. I will try to list any breaking changes in this thread for anyone else who needs to do this upgrade. \n. @tjrobinson Thanks for this. Big help as a starter and it also seems that using Just a simple implementation of the solution eg no 2fa seems to be working without any further changes. \neg. I have been able to do the following: \nThis is based from the simple web application (demo as a base)\n(Client Application) \n1) Log in through my existing login page (No code change required)\n2) Reset Password (No code change required)\n3) Email's for all resets sent out and reset password api's worked as expected. (No code changed required) \n(Admin Site for managing users) \n1) Listed all users as expected (no code change required) \n2) Log in working as expected (same code base as client application) \n3) Able to Deny login (no code change required) \n4) Close Account (No code change required) \n5) Create New Account (No code change required) \n6) Close a none accessed account (delete it) (No code change required) \n7) Assigning claims to user (no code change required) \nSo it does seem that in the implementation that I am using the update has worked perfectly fine. \nSo currently it seems that what ever changes have occurred since 7.1 to 8.2 either are features I am not using or the changes have not been breaking changes and expected behaviour is working as expected. \nIf I do find any issues I will get back to you. \n. It's fine Brock, I am sure you are a very busy boy with all the various conferences that seem to be occurring this year. \nIs this same feature of getting the profile data/claims for the calling app in idSvr 3.0 as well?\nWell I have implemented my \"solution\" so we will have to see how well it works. I think the concept of it is sound but only time will tell once we have implemented it into a number of solutions. and see how flexible it is. As for forcing a refresh of the Token from the client is it possible to point me in the right direction within idSvr 3.0 to do this as it would be a nice feature to implement \"under the hood\" to get people the access rights straight away rather than having to log out and back in again as we are currently having to do during testing. \n. Is Build 2.0.0 out yet as it seems to be 1.6.2 as the latest build. \nedit: sorry I can see 2 is currently in rc1 mode. I guess we will hang on to using 1.6.2 for now as we are still getting to grips with it and changing to an rc1 version is a bit too risky at the minute. \nI will have a look into the new features and respond back via the IdSvr project if I have any issues. \n. ",
    "ImranAppdev": "Hello,\nPredefined Email templates are used here. Is it possible to use our own templates say (cshtml) templates to compose mail body without having to rewrite the business or changing your code , may be with a handler inside our project ?\nThx.\n. ",
    "jamesholcomb": "First off, thanks for implementing such a well thought out solution to a major pain point in .NET.\nWhat is your recommendation for integrating MR with apps that have existing User tables with [Key] int ID?\nI am just guessing here, but it seems the majority of systems will bring their own User tables and they'll be int ID PKs.  The old clunky WebMatrix impl got around this via WebSecurity.InitializeDatabaseConnection\n. Indeed a data problem...particularly with more mature apps.  The approach SimpleMembership uses with InitializeDatabaseConnection works well enough.  You give it the app User table name, Id col name, username col name, connection, and it manages the row inserts/updates when the API (e.g CreateUserAndAccount) is called, in which you can also specify additional User columns. Code is here: http://aspnetwebstack.codeplex.com/SourceControl/changeset/view/c91461f723f4#src/WebMatrix.WebData/WebSecurity.cs\nFor starters, you could expose just UserTable, UserIdColumn and UserNameColumn properties so that the repository can allow the app User table to participate in the transaction on Add, Remove and Update.  Sorry if I'm not getting the MR terminology right here.\n. If you were to follow the CustomizationsSample (v5.0.0) approach and add column UserId as int FK to User.Id in CustomUserAccount,  can the CustomRepository hook into IRepository.Add() so that it can participate in the same transaction?  Need some guidance as it seems possible, but it's not obvious to me.\nI think this is essentially migrating as you suggested, but not forcing the app to use a Guid.\n. I was thinking about  the scenario of using the out of the box RelationalUserAccountInt (but no custom table) and the MR provided default repositories and dbcontexts.\nIt seems this can be achieved using the RelationalUserAccount based on Guid but not Int?\n. Yes using the revamped Thinktecture.IdentityModel\nOn Monday, January 13, 2014 at 12:49 PM, Brock Allen wrote:\n\nActually, so you're looking for an OWIN OAuth2 authorization server middleware sample?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/brockallen/BrockAllen.MembershipReboot/issues/222#issuecomment-32198279).\n. \n",
    "raysuelzer": "Thank you so much.\nRay Suelzer\nMobile: (202) 714-8676\nOn Sun, Aug 4, 2013 at 1:14 PM, Brock Allen notifications@github.comwrote:\n\nThis is more of a WIF issue than a MR issue. I suspect you need to\nconfigure the SAM to use the machine key (by default it uses DPAPI):\nhttp://brockallen.com/2013/02/18/configuring-machine-key-protection-of-session-tokens-in-wif-and-thinktecture-identitymodel/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/75#issuecomment-22075097\n.\n. Brock -- Installing the ThinkTecture Nuget package won't interfere with\nMembership.Reboot?\n\nRay Suelzer\nMobile: (202) 714-8676\nOn Sun, Aug 4, 2013 at 1:21 PM, Brock Allen notifications@github.comwrote:\n\nLet me know if that ends up working (as I've not run into that myself on\nazure).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/75#issuecomment-22075198\n.\n. BaseEntity serves a few purposes.  One is to make sure that all entities have certain properties, such as CreatedTime, ModifiedTime, Id, SoftDeleted.  It also provides methods such as .Modified(); .Restore(); .SoftDelete(), etc.\n\nAdditionally, it is used in some abstract classes and interfaces \"where T : BaseEntity\". \n. Thank you! I figured this was the case, but wanted to be sure before I started down that road.  Thanks Brock for everything. \n. Hey Brock,\nSorry to re-open this.  But, where would you want to install the Nuget Pacakge in a multi-project solution.  I.E.   Project.WebMVC references Project.DataAccessLayer\n. ",
    "swellfr": "Right now, I'm using the full package with EF.\nI will try in a near future MongoDb or Cassandra and was wondering if it was possible to split the package.\nThanks\n. The behavior has changed a little bit since v2\nThis code from SingleTenantSample was fetching the Additional Claims in v2\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic ActionResult Index(LoginInputModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            BrockAllen.MembershipReboot.UserAccount account;\n            if (userAccountService.AuthenticateWithUsernameOrEmail(model.Username, model.Password, out account))\n            {\n                authSvc.SignIn(account);\n                ...\n}\nWith v3 the login function should fetch the additional claims before calling SignIn(account)\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic ActionResult Index(LoginInputModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            BrockAllen.MembershipReboot.UserAccount account;\n            if (userAccountService.AuthenticateWithUsernameOrEmail(model.Username, model.Password, out account))\n            {\n                // Add code here to fetch Additional Claims\n                authSvc.SignIn(account);\n                ...\n}\nV3 is now the normal behavior?\nThanks\n. For V2 and V3 My DbContext has lazy loading disabled.\nIn V2 the AuthenticateWithUsernameOrEmail was returning an account with all additional claims populated.\nIn V3 this is not the case anymore.\nI was wondering if this change was normal.\n. Brock, thanks for your help... \nYour code is fine! :)\nLazy Loading was not disabled, this is why it was working in the SignIn method. \nI made the mistake... There is no issue... Sorry for that :/\n. Hello Brock,\nI was thinking a little bit more about the problem of having different EF configurations in a project:\n- MembershipReboot EF provider => LazyLoading is required\n- ProjectA => LazyLoading disabled\nThe problem of having LazyLoading required is that we can't share the same instance of  a DbContext through all repositories.\nDon't you think MembershipReboot EF provider should be written with LazyLoading and ProxyCreation disabled?\nThis would give the advantage of being agnostic to the webapp's DbContext.Configuration parameters...\n. My previous was not clear sorry for that.\nI meant sharing the instance of a DbContext per http request :)\nThe problem comes when you try to create an instance of a controller using your UserAccountRepository and an ActionRepository.for exemple.\nYou cannot inject the application context in your UserAccountRepository.\nThanks for taking time answering! \n. Hi,\nI've tried updating my project to EF6, but when I try to log in I have this exception\n```\nAn exception of type 'System.MissingMethodException' occurred in BrockAllen.MembershipReboot.dll but was not handled in user code\nAdditional information: Method not found: 'System.Data.EntityState System.Data.Entity.Infrastructure.DbEntityEntry`1.get_State()'.\n```\nwith this stacktrace\nat BrockAllen.MembershipReboot.Ef.DbContextRepository`1.BrockAllen.MembershipReboot.IRepository<T>.Update(T item)\n   at BrockAllen.MembershipReboot.EventBusRepository`1.Update(T item) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\Repository\\EventBusRepository.cs:line 81\n   at BrockAllen.MembershipReboot.UserAccountService.Update(UserAccount account) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:line 126\n   at BrockAllen.MembershipReboot.UserAccountService.Authenticate(UserAccount account, String password, AuthenticationPurpose purpose) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:line 571\n   at BrockAllen.MembershipReboot.UserAccountService.Authenticate(String tenant, String username, String password, UserAccount& account) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:line 462\n   at BrockAllen.MembershipReboot.UserAccountService.AuthenticateWithUsernameOrEmail(String tenant, String userNameOrEmail, String password, UserAccount& account) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:line 530\n   at BrockAllen.MembershipReboot.UserAccountService.AuthenticateWithUsernameOrEmail(String userNameOrEmail, String password, UserAccount& account) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:line 503\n   at MyWebsite.Web.Controllers.UserController.Login(UserLoginVM vm) in c:\\Dev\\MyWebsite\\MyWebsite.Web\\Controllers\\UserController.cs:line 80\n   at lambda_method(Closure , ControllerBase , Object[] )\n   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)\n   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)\n   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()\n   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)\n   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()\nThe problem probably comes from the few changes in namespaces in EF6: ie System.Data.EntityState => System.Data.Entity.EntityState\n. I just read your blog post about the cookie middleware... \nAccording to it:\n\nThe new OWIN cookie authentication middleware is configured in App_Start/Startup.Auth.cs and consists of these lines of code:\n\nc#\npublic void ConfigureAuth(IAppBuilder app)\n{\n   app.UseCookieAuthentication(new CookieAuthenticationOptions\n   {\n      AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,\n      LoginPath = new PathString(\"/Account/Login\")\n   });\n}\n\nThis API call is configuring an identifier (or name) for this authentication middleware (AuthenticationType) and this is needed since there can be different authentication middleware. Also, this name influences the name of the cookie that will be used. The LoginPath is simply the URL to the login page when unauthorized requests need to be redirected.\n\nAdding the \"app.UseCookieAuthentication\" before configuring MR should do the job, right?\n. Actually, there are many ways to bypass this issue, but it's awkward to check the IsLoginAllowed when we just want to verify an email.\n. It's working! Thanks!\n. Consider this scenario, if you start an application and you first don't require accountVerification when a user register.\nIf you change your mind and require an account verification during the registration process then, all users created before won't be able to log in anymore.\nDo you think MR should behave like that?\n. OK, I see the exact mean of RequireAccountVerification. \nThanks for your answers Broke!\n. Broke,\nMy code assumes that if we don't require AccountVerification we don't send any email, which may be a problem...\n. After our discussion on the meaning of RequireAccountVerification, this pull request is not required at all.\n. ",
    "gbarker": "Hi.  Many thanks for this great library.  I am also not using EF (trying dapper) so would benefit from this split.\n. I'm in a similar position.  I did an implementation of a prior version of MembershipReboot.  Having the tests project there was a big help as I changed some stuff around and broke things.  I now want to upgrade to the latest and greatest and refactor my implementation - but I'm a little reluctant to proceed without the test library there to back me up.  \nThanks again for all the articles and for creating this project.  It's been a huge help.\n. ",
    "pksorensen": "Just a comment on this as I was thinking about this the other day also, while preparing to integrate M.Reboot into our CMS. Inspired by your IdentityServer, and that I am integrating this into a CMS - I think it make sense to combine M.Reboot and Identity Server in some way.\nI am going to take a look at your Linked Account example and properly take some parts from the Identity Server such I can from the the CMS add identity providers that it allows to link accounts from. Including ws-fed (i want to let WAAD organizations log into the CMS).\nAlso - have you considered refactoring the Brockallen.Oauth2 project such we possible could add Oauth2 providers as a plugin. (noticed how you used it in Identity Server also) It would be cool as we could get more oauth providers into both solutions. I think I came to the conclusion that it was not possible at this point because some stuff was coded to take a enum - some time ago i did that.\n. The end of next week I will share a blog post of how I used MembershipReboot in a non MVC project. (in the process of finding the right solution to it :))  Goal is to integrate it into the Composite C1 CMS. http://compositec1.codeplex.com/\nAs I love playing with new technologies also, i at this point is working on doing it with html5/knockout backed with a WebAPI exposing the data system of the CMS. \nMaybe there will be something for others to inspirer from. \nOne question Brock - saw the sample where you added the claim gender for a user ect. Is that what you would recommend for storing profile information ? Just added claims ? Are there any disadvantages if the amount of claims get to big? \n. 3) tested and reflection was able to set the internal methods without problems.\nFeels like I am building my own EF right now. \nI will just close this againt, properly not the right place to ask these questions. Feel free to drop a comment if you have any inputs. (Might be others that need to implement something where the datastore is not EF or something like that)\n. Thanks, makes sense.\n. ",
    "christolo": "I will try to help. I do have one question. What are your thoughts about adding multiple values for ClaimTypes.Role? I see AddClaim doesn't allow you to add duplicates. I can see why this makes sense for most claim types, but i'm struggling with Role. For instance, a user might be an Editor (allowed to post content) and an ContentApprover (able to approve and publish content).\n. Right, but this fails:\naccount.AddClaim(ClaimTypes.Role, \"Administrator\");\naccount.AddClaim(ClaimTypes.Role, \"SomeOtherRole\");\nIt would have to be something like this:\naccount.AddClaim(ClaimTypes.Role, \"Administrator\");\naccount.AddClaim(ClaimTypes.CustomRole, \"SomeOtherRole\");\nSorry this isn't the right place for this discussion.\n. If no one has volunteered, I'll take a stab at a RavenDb provider.\n. Ok, I'll have something for you to look at EOD (Eastern Standard Time) today. I've created a copy of SingleTenantWebApp to get it working. I've run into 2 issues. First, IRepository.Create. You're using DbSet.Create which will create a proxy. I borrowed some code from System.Data that will create a proxy on the fly. I'm sure we can improve upon that if needed. Second, I'm getting this error when updating an account:\nRaven.Imports.Newtonsoft.Json.JsonSerializationException: Self referencing loop detected for property 'Account' with type 'BrockAllen.MembershipReboot.UserAccount'. Path 'BrockAllen.MembershipReboot.IEventSource.Events[0]'. at Raven.Imports.Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(JsonWriter writer, Object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty) in c:\\Builds\\RavenDB-Stable\\Imports\\Newtonsoft.Json\\Src\\Newtonsoft.Json\\Serialization\\JsonSerializerInternalWriter.cs:line 241\nSo the fact that UserAccount has a list of IEvents, which might be of type UserAccountEvent which has a User Account is causing a problem. Not sure how you'd want to solve that.\n. That didn't work for me. In UserAccount, line #1009 if (!this.HasClaim(type, value)) prevents the second claim from being added. Maybe I haven't pulled lately.\n. No, definitely don't have a use case for adding the same type/value multiple times. I'm looking closer at it. I'll provide an update.\n. Sorry, such a waste of your time. It works. I can't explain how it was failing for me. I'm sure it's something I was doing.\n. I suspect that a public constructor would help. How I got around this while messing around for RavenDb was to create a proxy at runtime for T.\n```\n    #region Create Proxies\nprivate static T CreateObject<T>()\n{\n    var obj = CreateConstructor<T>() as Func<T>;\n    return obj != null ? obj() : default(T);\n}\n\nprivate static ConstructorInfo GetConstructorForType(Type type)\n{\n    ConstructorInfo constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, Type.EmptyTypes, null);\n    if (null == constructor)\n    {\n        var message = string.Format(\"No constructor available for type '{0}'.\", type);\n        throw new Exception(message);\n    }\n    return constructor;\n}\n\nprivate static Delegate CreateConstructor<T>()\n{\n    ConstructorInfo constructorForType = GetConstructorForType(typeof (T));\n    DynamicMethod dynamicMethod = CreateDynamicMethod(constructorForType.DeclaringType.Name, typeof(T), Type.EmptyTypes);\n    ILGenerator iLGenerator = dynamicMethod.GetILGenerator();\n    iLGenerator.Emit(OpCodes.Newobj, constructorForType);\n    iLGenerator.Emit(OpCodes.Ret);\n    return dynamicMethod.CreateDelegate(typeof(Func<T>));\n}\n\nprivate static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes)\n{\n    return new DynamicMethod(name, returnType, parameterTypes, true);\n}\n\n#endregion Create Proxies\n\n```\n. I don't know a lot about Raven either. Just starting out with it. But the changes look good.\n. Seriously, the samples provide a ton of information. This project will evolve over time and the docs will be fleshed out, but in the meantime get your hands dirty.\n. This might be relevant:\nhttp://brockallen.com/2013/02/18/configuring-machine-key-protection-of-session-tokens-in-wif-and-thinktecture-identitymodel/\n. That blog post was a life saver in a project at work, so I keep it handy. :)\n. ",
    "ahmgeek": "am in :) \n. guys please :smile:  there is a lot of people like me who want to know how to use it in web forms .\n. ",
    "jlsfernandez": "i\u00b4m nterested in documentation, please let me know what is your idea (tutorial like, class description, etc)\n,you want to do it also in Spanish?\nTx\n. OK i will try to do waht you mention, by the way, waht i\u00b4m really interest is to know how to:\n1) use with membershipReboot authorization with WCF an silverlight.\n        it's the same using if (WebContext.Current.User.IsInRole(\"Managers\")) or\n        there is a best way using decorators for methods, any example?\n2) Management of profiles with membershipReboot.\n      as with any other framework?\n      there is other way with it, any example?\n3) can we manage forms, windows and third party authentications in the same project?\nThanks a lot\n. Well the way i has been doing is create  a SQL repository (from membership provider datasets) and then if you have and MVC4 application Sharepoint with forms auth a web site and so on.... sharing the key server id inside the web.config, lets you that all this applications can auth against the same sql server because all of them use the same algorith to desencrypt the password using the keyserver id.\nThanks\n. Hi\nwhen trying to use SQL Server as backend for UserRepository i got this msg:\nMethod 'get_OpenIdConnect' in type 'Thinktecture.IdentityServer.Repositories.Sql.ConfigurationRepository' from assembly 'Thinktecture.IdentityServer.Core.Repositories, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' does not have an implementation.\nWhen trying access IdSrv.\nI have apply the changes to Idsrv config files as explained in the Idsrv sample MembershipRebbotUserRepository and also rebuild IDserv with this sample.\nPlease Help\nupdate......\nI think I found the Broke sample project hasn't got all the MEF \"artifacts\" needed so i\u00b4m implementing\n. OK fixed.\nTaking the Thinktecture identity server project and creating a library based on sample from Brock and later creating the MEF \"artifacts it's running.\n. ",
    "dealproc": "Are you still accepting pull requests for documentation?  I'm in the process of setting up the email generation portion of MR on a client product, and it's a painful experience because of the cross-referencing back to the User Service on when each event is fired.\nI'm not saying what I'll provide would be perfect, but it'd be a start that may make it easier for the inline docs to then be finessed as required.\n. sounds like having a group/role/permission hierarchy could solve your needs, where you assign your organizations to groups which contains role that offer permissions (old school roles from asp.net membership)\ntake a look at teamcity for an example of how to setup per-project permissions... same thing, but sub out your organizations for the projects.\n. leave 'em as is... just get rid of all the attributes, and roll over to the entitytypeconfiguration stuff.  I'll have code for you shortly if I can get over a stupid error.\n. So, to do NHibernate, as I stated in the OP, we need to override Equals() or implement the IEquatable() interface on a few of the objects (those with compound keys).  After our discussion on Jabbr, and wiping the proverbial egg off of my face, I think it'd be the only low-hanging fruit.  I know that there are many that believe that data objects should contain zero business logic, but I am not one of them.  So long as UserAccount is not sealed, I can always inherit from it and add my extra properties to the object and commit that to the table... we're still golden (I believe)\nI'm also thinking that maybe MR could follow the same ideals as many of the other projects coming to market in the past 18 months by offering an IDependencyResolver which would allow end users to provider to MR whatever IoC container they choose to provide.  This may give the ability, esp. for the plugin architecture that is in place for extensibility (all of the IEventHandler<> stuff) to be resolved as needed, instead of having to provide a singleton instance.  Works out better for database connection lifetime management... leave that concern to the integration developer's discretion what the lifetime should be.\nWe could then potentially refactor the code to not be so dependent on automatically committing the objects to the database as soon as the Update() method is called, unless there is fear of the event pipeline doing work that may be invalid.\n. @calebkiage You may want to just implement the Equals() call, or IEquatable, and then provide @brockallen with a pull request.  I did my work as a marathon session, and abandoned NHibernate because of it... i'm too far in to roll back to something else at this point, or i would have done so.\n. @brockallen published in the /Samples folder a way to replace IdSrv's storage for users with MR.  You'd start there.  I'm actually working on the same exact issue, and am tooling my own bits.  I added suggestions back to @brockallen on other issues asking if we can get the 2-factor auth, etc. moved into IdSrv.\nhttps://github.com/thinktecture/Thinktecture.IdentityServer.v2/issues/466#issuecomment-27172251 << should get you started.\n. @UkraineTrain - did you look at the sample that @brockallen put together which allows the basics to integrate IdentityServer and MR together, via replacing the repositories in IdentityServer?  If not, then look there.  The link above should be where you want to find that sample.\n. What about if we did similar to what you have for changing email... email them a link that they are \"invited\" to the membership pool, and they finish the work there?  My point being, i have no way of creating a user in the system without providing a password to the membership product, and it's going to be difficult for a support tech to create an account for someone as part of a billing account setup.  Just thinking through the scenarios we are facing.\n. different use case.. this is i want to create the placeholder for a new user, as a tech on the product, and setup the accounts permissions before the user finishes their account creation, etc.  there's more biz logic against it, but those bits are outside the scope of MR.\nProbably tomorrows task to pull latest from /master on your stuff to my own copy of the repo and try to script in what i need to support the second bit, hopefully to fulfill #130 for you.\n. Yea.. that's this week's task.  Thought I'd be hammering that out yesterday, but alas, i was fried and couldn't bring myself to sit in front of the computer for any length of time.  Should be the last piece of this puzzle.\n. after thinking about this... you're right.  this doesn't get done until the user finishes their profile.  Can and should be done outside the scope of MR until they come in to finalize the profile.\n. Yea... after thinking it through, and having a few discussions with a few other people, I've changed my thought on it.  no worries.\n. yea... BaseUrl needs to be able to be set.  i pulled code and tweaked that a slight bit to get what i needed.  wasn't sure if it was kosher in your eyes to go this route, but needed it, and needed to remove the block of using only \"released\" dlls.\n. When dealing with emailing issues, PaperCut is a great solution for doing a base configuration... http://papercut.codeplex.com/\nOnce you have the emails going via PaperCut, then you can reconfigure it to go through Gmail, etc.\n. public class {YourClass}\n{\nUserAccountService _UserAccountService;\npublic {YourClass} (UserAccountService userAccountService){\n_UserAccountService = userAccountService;\n}\npublic void CreateAccount(){\n... {whatever you need before}\nvar userAccount = this._UserAccountService.CreateAccount(this.Username, this.Password, this.Email);\n... {whatever you need after}\n}\nThis is the class that you need to reference:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/AccountService/UserAccountService.cs\n. curious about this myself.  customer is running into this need right now (puke) and need to support.  other option is to build a custom projection object and go to town, i believe.\n. The only issue I see with relying on HttpContext.Current is two folds:\n1) When you are not using the MembershipReboot system on a web application\n2) When you are working within the Owin context, and HttpContext.Current is unavailable.\nWould it be more advisable to create some sort of interface, so that the SystemWeb package gets the ability to ping HttpContext.Current, the Owin package gets to play within the IOwinContext as necessary, and outside of those two mainstream use-cases, I think that the developer should be responsible for implementing the required interface to resolve the pertinent information that matches their scenario (or default to empty/nulls as necessary)\n. What i was getting at was (I should have grabbed line 51 instead) if you run that postback, you're not going to have an identifier going into the validation method, and it's going to fail.\n. first thoughts... how are you mapped?  are you mapping like @brockallen  has the entity framework package setup?  If not, you may want to mimic that functionality and see if you have it resolved.  Brock had a blog post about OR/Ms and how Entity Framework really doesn't behave like one, and what needs to be done in order to get it to behave more like one.\n. Right... obviously... the difference is with netstandard 1.3; I have a good list of libraries i had to include that seems to be within netstandard 2.0 out of the box.\nWith things like IdentityServer 4.0 going to netstandard 2.0, etc., wasn't sure if it was wortwhile to follow in-step; or still stick with the \"lowest version possible\" mantra.. ",
    "matthewfincher": "Multiple.\nThanks Brock!\nSent from my iPhone\nOn Aug 11, 2013, at 9:27 PM, Brock Allen notifications@github.com wrote:\n\nQuestion for those interested in this feature:\nDo you need to support a single client cert, or multiple?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "theDiverDK": "Thanks a lot, looking forward to test it in 2 weeks after my holiday :-)\nWill it be on nuget by then?\nRegards S\u00f8ren \nOn 12/08/2013, at 05.59, Brock Allen notifications@github.com wrote:\n\nok, in the latest checkin i added the ability to add/remove certs from a user account and to authenticate with a client certificate\n\u2014\nReply to this email directly or view it on GitHub.\n. Excellent, thanks for the addition ;-)\n\nOn 12/08/2013, at 16.09, Brock Allen notifications@github.com wrote:\n\nYep, it will be on NuGet in the next week or so. My plan is to either allow cert authN or cert 2FA.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "KevinPan": "I just want to know how a user is related to a group\n. ",
    "kishorkadam": "Hi Brock, I am using MR in my project . May I know  what way are Groups related to USER if Groups are different than ROLES .\nAlso, what information can be stored in Groups and Group Child.\n. ",
    "rducom": "If I inherits from UserAccount, the problem would be the same : If I create a CustomAccountClass, I can't implement a parameter-less CustomAccountClass constructor...\nMy scenario is a little specific : I work in a enterprise context, developing some enterprise back-offices, deploying apps on customers Active's Directory, and I intend to make a cross application authentication system, lettings users to log in against their active directory, and in the same time, lettings some external users to log in the same apps but with few rights, so I need to have a link between active directory accounts and Google/Facebook account. \nThe goal is to build a system letting user log from anywhere, and let users go from on application to any other with login again (a form of SSO, cross authentication platform).\n. Yes, one other thought one the same subject :\nMaybe it should be easier to implement extensibility over the \"core\" structure by replacing the IUserAccountRepository and IGroupRepository by theses generic's versions : \npublic interface IGroupRepository < T >  : IRepository< T > where T : Group\n{\n}\npublic interface IUserAccountRepository< T > : IRepository< T > where T : UserAccount\n{\n}\n. For example the UserAccountService class exposes virtual methods, so the goal is to inherits this class. Actually this is the class declaration :\npublic class UserAccountService : IDisposable\n{\n    public virtual void Update(UserAccount account)\n    {\n    }\n}\nIf I want to use my CustomUserAccount  class with a CustomUserAccountService , it should be easier to inherits from :\npublic class UserAccountService< T > : IDisposable where T : AccountAccount\n{\n    public virtual void Update(T account)\n    {\n    }\n}\nby this way, I can write : \npublic class CustomUserAccountService ; UserAccountService< CustomUserAccount >\n{\n    public override void Update(CustomUserAccount account)\n    {\n         base.Update(account);\n         .............\n    }\n}\nand a simple \npublic class UserAccountService : UserAccountService< UserAccount > { }\nlet a all the code be compatible with previous versions.\n. Yes, the services themselves : the User's and the Group's ones. \nI actually work on a \"solution\" witch includes a lot of components (apps) : some back and front offices in MVC, Silvelight, or WPF/WCF. Here are the constraints and the goals I have :\n- All the web apps we have can redirect from one application to another. (some times, we encapsulate the Silvelight one directly into the MVC one). Actually, each time a user go to another app, he needs to log in again and again. The goal is let the user log in only once, and then share the user credential between all the apps. By this way, the user don't have to log again and again.\n- The solution is most of the time deployed over an Active Directory environment. Users have already logged in with their windows credential. The goal is to get the logged windows account user name on the client machine, check that the windows machine belongs to the same AD domain, then check in MembershipReboot that the user is recognized, and then automatically authenticate him. \n- I also plan to implement a client IP checking in order to prevent session hijacking, etc.. in a way similar to facebook : if a user is authenticated from an unknown IP, they force explicit login with username / passwd, then send a mail letting the user know an unknow IP have been used, and then requesting a validation by a link in the mail. (A form of two-passes authentication when there is a doubt).\n- We use the notion of \"GroupRoles\" : each user is attached to a group, and each group have application specific roles.  A role is a right to access some parts of applications, or read / edit / delete specific type of data. WIF aims at managing roles with claims belonging to a user, and I need to extend the Group class to include a kind of claim inheritance.\n- One another thought on the Group implementation in MR : I didn't find a way to link a user to a group, neither on the Group or on the UserAccount class, what am I missing ?\n. No PB. I also miss free time to work on this project, but be sure I'll contact you as soon as I'll start to build it.\nBests,\n. ",
    "HaroonCalculus2013": "I am Facing same issue but I am using Microsoft.IdentityModel and I have a azure hosted web site not in web role. I am logging using ACS for AD users. I am again- again redirected to login page after providing AD credentials for users. When I saw EventLog.xml in Log of Azure web site it shows me following error.\n130920Keywords1618669421ApplicationRD00155D3819B33005An unhandled exception has occurred.12/15/2013 8:28:08 PM12/15/2013 8:28:08 PM4feaece8fa4a42a8a552b3e50bb11581320/LM/W3SVC/274274796/ROOT-1-130316119043373773Full/C:\\DWASFiles\\Sites\\hrapp\\VirtualDirectory0\\site\\wwwrootRD00155D3819B344760w3wp.exeIIS APPPOOL\\xyzappCryptographicExceptionThe data protection operation was unsuccessful. This may have been caused by not having the user profile loaded for the current thread's user context, which may be the case when the thread is impersonating.\n   at System.Security.Cryptography.ProtectedData.Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)\n   at Microsoft.IdentityModel.Web.ProtectedDataCookieTransform.Encode(Byte[] value)\nhttp://xyzapp.azurewebsites.net//Some IPAddressEricTrueFederationIIS APPPOOL\\xyzapp12IIS APPPOOL\\hrappFalse   at System.Security.Cryptography.ProtectedData.Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope)\n   at Microsoft.IdentityModel.Web.ProtectedDataCookieTransform.Encode(Byte[] value)\n\nCan Any body help me to resolve this?\n. @brockallen \nCan you please tell me how to do it, as below is my web config  section:\n\nand \nglobal.asax.cs application start section below:\nprotected void Application_Start()\n   {\n            AreaRegistration.RegisterAllAreas();\n            WebApiConfig.Register(GlobalConfiguration.Configuration);\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n            AuthConfig.RegisterAuth();\n}\nWhere exactly I have to make changes so that I have a success login and no redirect to same login page.\n. ",
    "srasch": "please see #113\n. ",
    "danwinters": "Is there any way to do this without creating base user accounts for each ADFS user first?  Our ADFS is on a service domain that has about 75 domain trusts, and it would be a lot of accounts.\n. I have to store local users for use with IdentityServer (with additional claims), and claims for ADFS users.  I also would like to leverage your 2 factor auth.  I was looking to see if there was a way I could leverage MR for both.\nMy environment is also multi-tenant, where each tenant can have have a mix of AD (via ADFS) and non-AD users (via idsrv).  I can have both ADFS and IdentityServer (local) users assigned to one tenant. I'm not certain MR is a good fit for me, but I thought I'd ask a few questions to see if it's feasible.\n. Thank you for your answers, they've been very helpful. I'm thinking that I'll create \"shadow\" accounts for the AD users with randomly generated passwords.  These are always the primary accounts, so creating them as linked accounts seemed a bit redundant.\n. ",
    "phillee007": "Cheers Brock. Perhaps an AddOrUpdateClaim method? I could add it if you think it's ok and do a pull request\n. Cool, will do it today. One question about HasClaim - the current code does the following:\npublic virtual bool HasClaim(string type, string value)\n        {\n            if (String.IsNullOrWhiteSpace(type)) throw new ArgumentException(\"type\");\n            if (String.IsNullOrWhiteSpace(value)) throw new ArgumentException(\"value\");\nreturn this.Claims.Any(x => x.Type == type && x.Value == value);\n    }\nThis will only return true if the existing claim has both the same type AND value as the old claim. So if I call AddClaim(type, value) multiple times with multiple values, the account ends up with multiple values for the same claim type. Is this intended, or should there only ever be a single value for a given claim type?\nIf the latter is the case, I'll fix it while doing the other change as well. \nCheers,\nPhil\n. Oh dear my bad - I'd been looking at the overload of HasClaim. My apologies!\n. Fair enough - I initially was going to remove the code in the AddClaim method and delegate to AddUpdateClaim, however, after seeing the issue with multiple types of a given claim I had to leave AddClaim as-is and add a new AddOrUpdateClaim method, with an additional remark which wasn't as tidy as I'd hoped. \nFor now I'll just keep my own project-specific code that removes the claims and updates them via an extension method.\nI've shown the code that I would've added to UserAccount below in case this gets revisited in future as follows (note I haven't checked it in as I'd like to write some tests first, but as per the other threads the test project explodes as I don't think it's been updated to use the most recent MR api):\n``` c#\n/// This should only be used for claim types which have a single claim for the given claim type\n        public virtual void AddOrUpdateClaim(string type, string value)\n        {\n            Tracing.Information(\"[UserAccount.AddOrUpdateClaim] called for accountID: {0}\", this.ID);\n        if (String.IsNullOrWhiteSpace(type))\n        {\n            Tracing.Error(\"[UserAccount.AddOrUpdateClaim] failed -- null type\");\n            throw new ArgumentException(\"type\");\n        }\n        if (String.IsNullOrWhiteSpace(value))\n        {\n            Tracing.Error(\"[UserAccount.AddOrUpdateClaim] failed -- null value\");\n            throw new ArgumentException(\"value\");\n        }\n\n        if (this.HasClaim(type))\n        {\n            var claim = this.Claims.First(x => x.Type == type);\n            claim.Value = value;\n            this.AddEvent(new ClaimUpdatedEvent { Account = this, Claim = claim });\n        }\n        else\n        {\n            var claim = new UserClaim\n            {\n                Type = type,\n                Value = value\n            };\n            this.Claims.Add(claim);\n            this.AddEvent(new ClaimAddedEvent { Account = this, Claim = claim });\n        }\n    }\n\n```\n. ",
    "jzinedine": "Just because it's used in one of sample projects.\n. Is there anywhere we can talk about some design decisions?\nFor example, there is no easy way to inherit the UserAccount object and e.g. add properties like those in standard claim types (GivenName, Surname and ...).\nI'd like to contribute to the project, and Thanks for developing such a useful and missed project in .NET era.\n. Regarding the mentioned use case I've made the GetBasicClaims method of AuthenticationService protected virtual and override it to add additional claims.\n. Nothing else atm, Thanks.\n. EF 6 has not been added because it hasn't been released yet, but you can use my fork even though it's just a matter of simple namespace change.\nI've faced the same issue and opened an issue: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/118\n. @brockallen Regarding inhering UserAccount, developer will face issues as he/she go forward.\nIf you want to add FirstName, LastName e.g., you should add another class named Person, and define a one-to-one relationship between Person and UserAccount.\nBut soon you'll face an issue when trying to add a relationship between Person and another class, because it's primary key is also it's foreign key to UserAccount table.\nThen you must change the first relation to one-to-many and add a unique index to prevent having more than one Person related to a UserAccount.\n. If it would be possible to override the way claims would be collected, then developer could add his/her own logic there.\n. IMHO PossessProperty/Right also is in the realm of Authroization not Authentication/Identity Management.\nEven though Authentication/Authorization seems very close to each other from the User/Developer point of view at the start but as you go forward you will realize that Authorization is very dependent of business and can not be generalized easily .\nThe equivalent of those stuff in this project are Resource and Action which you'll specify as attribute parameters above your Controller Actions for example.\nThen using the Claims which comes to you along the request you will decide if this user can do this Action on this Resource.\nHere is the way to go: http://leastprivilege.com/2012/10/26/using-claims-based-authorization-in-mvc-and-web-api/\nMore at: http://dotnetcodr.com/2013/02/25/claims-based-authentication-in-mvc4-with-net4-5-c-part-1-claims-transformation/\n. I think part of it is due the ASP.NET way of design which has intertwined both concepts through using the same  attribute to do the both Authentication and Authorization.\nAnd regarding your last point, yeah I totally agree that even for somewhat experienced developer it takes time to get his head around this new way of doing Authentication/Authorization.\n. ",
    "fmeijer": "Sorry, I should have read this first: http://msdn.microsoft.com/en-us/library/hh545448.aspx\n. ",
    "namtih58": "I can only find EF, MongoDb and Raven. Where exactly is the nhibernate\nsurport?\nOn Sun, Oct 13, 2013 at 5:04 PM, Brock Allen notifications@github.comwrote:\n\nI think we now have this.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/123#issuecomment-26228237\n.\n. \n",
    "jnmoons": "Thanks for the replies. I don't think this is quite what I was thinking about (maybe I misunderstood the answers, maybe I did not phrase the question well enough). First of all, again thanks for MR, the integration is going really well, and updating to EF6 does not seem to be hard, so we are moving forward with MR.\nSo to the issue described: these are the requirements:\nWe have an application where there are different organizations contributing to a centralized repository. Each organization has one or more roles (roles can be shared accross organizations), so we will have e.g. manager role in CNN organiation and manager role in NBC organization. What people can do (for authorization) depends on what role they have in what organization (since a person can have e.g. two roles in the same organization, or one role in one organization and another role in another organization, this system needs to be pretty flexible. \nThat is why we need an Organization entity (we have named it SecurityGroup, but that is not important here) and a Role entity and an OrganizationRole entity. A User can have multiple OrganizationRoles (meaning he can be (manager at CNN) and (reporter AND manager at NBC) for instance\nThis means I cannot just add the following claims:\nrole: manager\nrole: reporter\norganization: CNN\norganization: NBC\nsince that does not tell us what role the user has at which organization. So we would need sort of a complex claim like:\nRoleOrganization: Manager | CNN\nRoleOrganization: Reporter | NBC\nRoleOrganization: Manager | NBC\nBut unfortunately complex claim types do not seem to be supported - at least not in a standard way. That is why, for authorization purposes I would not look at the claims, but look at these things stored in the database. Which brought me to the question how I would need to extend the UserAccount. Isn't this a requirement that is often encoutered? I would be very happy to hear your thoughts on this!\nSecond reason is the performance that I mentioned in the other issue. I still do not see how I can make Claims performant. Suppose we have 10.000 users, and all of them have certain roles. What should I do if I want to show an overview per role of the users in that role. Wouldn't that be terrible performance wise? The Claims are all String based, so search will be very slow. For this requirement, would you suggest also storing this information in the database (so both in the UserClaims table, and in a separate Role table) so that such requirements can be answered quickly. But if that is the approach, then doesn't it negate the usefulness of Claims? Sorry - still struggling with this. Maybe our requirements are a lot different from others...\nThanks a lot for your reply. It is genuinely appreciated.\n@jzinedine : that is indeed an issue we are facing now. We are seeing if it can't be solved as well by using the \"one table per hierarchy\" strategy instead of \"one table per type\". Will update you when we know more.\nAs a sidenote, one of the things I like with the new Identity approach is that I can implement a User interface instead of having to inherit from User (such as mentioned in the question above). What are your thoughts on this? For the rest MR is indeed a lot more fully featured and very nicely designed.\n. ",
    "brgrz": "Also, looking at the implementation of AuthenticationService and SamAuthenticationService I cannot find where the two FedAuth cookies/token actually get issued (and why there are two of them?)\n. Brock, after reading more on the topic and diving into this Claims based auth stuff, I figured out what's bothering me with MembershipReboot's SingleTenant sample. When talking about claims most articles will talk about Claim Type, Claim Right and Claim Value. (This one for instance http://msdn.microsoft.com/en-us/library/ms729851.aspx)\nSo I can say a certain user's claim type is Email, claim right is PossessProperty and claim value as someemail@domain.com. Now this specific PossessProperty case can be supported with SQL schema that comes with your library but only this case. \nHowever, what if I wanted to say my claim type is ProductManager, claim right is ReadProducts and claim value is an ID of a Product? We cannot model that with your structure.\nMore than that, for someone starting with claims based auth this important concept of Claim Right is hidden when starts using your library (I, for one, was unaware of it) and it soon hits him that something is missing because he cannot model his claims about specific resources and persist them nicely in datastore.\nWould you mind to expain on that a bit or maybe alter the samples?\n. I understand authorization is very business dependent but then why the claims table anyways he could just store those properties in the UserAccount table would make more sense and would be less confusing, there's some concepts in MR that are very close to the authorization stuff even though the library is meant for authentication/identity storage.\nAlso, lots of confusion comes from the fact that MR is using the [Authorize] attribute to actually do authentication not authorization which kinda doesn't make sense.\n. I get it, if you want to do authorization, you have to incorporate ThinkTecture.IdentityModel45 and use [ClaimsAuthorize], which is fine, it's just that it takes novice claims developer hours and days to figure out how everything fits together part of that is due to the fact that MR incorporates some confusing stuff, that is possibly not essential to MR.\n. ",
    "gagoole": "Where did you define the database models?I could'n find them.\nCan you help me how to configure costume mapping in MR?\n. I want to Add Roles and Profiles and UsersInRoles like the  IdentityServer to MR project .Can you Help me?\n. ",
    "mafis": "Ok that's sounds logic. \nI start working with MongoDB a lot so i will take a look at this part. \n. :+1: Same Problem\n. ",
    "aleborg": "Any status on this? Or should I downgrade my project to EF5 to get everything working?\n. ",
    "calebkiage": "@dealproc, Did you manage to get MembershipReboot to work with NHibernate? I am thinking of using re-mix to override Equals() and GetHashCode() without changing the base entity classes in MembershipReboot. But this is easier said than done so I wouldn't want to try it if there's a solution.\n. Using re-mix doesn't work as the mapping requires the actual entity class to override equals thus the proxy class is never used. I suggest allowing the entity classes to be pluggable to enable NHibernate composite ids. @brockallen, do you think this is a viable option or do you see a better one?\n. Can all the entity classes be switched with custom versions? I find that the LinkedAccount class for example cannot be switched for a custom one without performing refactoring on the AccountService. NHibernate requires all persistent classes with composite ids to override Equals().\n. @dealproc I am thinking of adding Interfaces and then using generics to have all the entities pluggable for example have an ILinkedAccount, IUserAccount etc. I'll provide a pull request if I manage to pull it off.\n. @brockallen In that case maybe I should wait to see your implementation before applying modifications. I will implement the NHibernate persistence based on that.\n. I've implemented persistence with nhibernate and i'm looking to add a sample. Problem is that i'm having issues with the Group and GroupChild classes. Is it possible to make the group classes abstract like the useraccount?\n. I've created a new issue #204.\n. Yes. That's exactly what i meant. I could add the Group and GroupChild classes to the sample if i had the APIs.\n. I've issued a pull request with the updated sample. I had to edit the group classes and add a protected access modifier to the properties in the Group and GroupChild classes (NHibernate doesn't sit well with internal accessor methods). I like the IUserAccountQuery API. A seperate IGroupQuery seems like a good idea.\n. I've seen that issue. NHibernate doesn't seem to support the use of string.Equals(string, StringComparison) yet. I'll try and find a work around for that.\n. I had to extend NHibernate to use the built in LOWER() SQL function for case insensitive comparisons. This will ensure that we get the desired behavior even with database engines that use case sensitive comparisons by default.\n. I issued a pull request with the fix.\n. Have u tried creating a derived class that overrides the authenticate method to fit your requirements?\n. I guess relational is for Relational (SQL based) database engines and Hierarchical is for Document (NoSQL) database engines.\n. Yeah, I first got the idea to extend NHibernate from this page and then as I was looking around I found this one which eased my work as the guy had done what we needed. It was the only way I saw to keep the new code you'd added.\n. ",
    "vafis": "add the sample library to your Thinktecture identity server. Add connection string, add MembershipReboot repositories, delete Thinktecture repositories according sample help.\nFinally add a claim type role with value IdentityServerAdministrators in MembershipReboot user who is going to login to Thinktecture identity server and you are OK !!\nHope this helps\n. I am trying to build one application using Identity Server and MembershipReboot and i am thinking about this. The disadvantage for me is that never had access to other database IndetityUser to have overall opinion. I don't know i can't load it using sql 2008R2 and this maybe my approach is wrong\nI don't agree with synchronization.\nOK they are two different products...but from the other side Identity Server needs or should include  MembershipReboot for user management such as users with claims IdentityServerAdministrators/IdentityServerUsers.\nIN my opinion there are two option:\n1. Use  MembershipReboot  for read/write/update (cancelling database IndetityUser) and just only read form Identity Server side\n2. Build a plugin and adapt it in MembershipReboot \nfor me maybe its the first choice the best...... for you in order to products be more commercial the second\nIn case i have any new idea i'll return\nHope this helps\nKostas\n. ",
    "UkraineTrain": "Thanks a lot, everybody, for the above suggestions. They look like they should help me integrate MembershipReboot into Identity Server. So, I will go ahead and try to do that right now. \nHowever, if I'm not mistaken, the creators of the Identity Server had originally suggested that the best practice is to keep it as a pure STS and separate from MembershipReboot, which should serve as a User Management system sitting on top of the database storing user information.\nSo, my original question was on how to synchronize the Identity Server with MembershipReboot, where, when I register a new user through MembershipReboot, his username and password end up being stored in the Identity Server database.\n. ",
    "StateBarofArizona": "What ever happened with this effort?  I am now struggling with the same thing, I need all the user management etc. of MembershipReboot, including protection from login attacks, while also issuing a security token for websites outside our domain.\n. Is there a current tease of features expected to be in ISv3?\n. @israelpereira can you share how you solved this?  I am having the same or a similar issue trying to combine MR with idSrv.\n. You\u2019re in the ball park.  I\u2019ve been fiddling with that method all day but can\u2019t get it right.  Your solution is showing an error, ClaimsRepository does not exist in the current context.  I tried a few things but cannot seem to figure out how to correct this.\nFrom: israelpereira [mailto:notifications@github.com]\nSent: Monday, May 19, 2014 8:18 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Connie DeCinko\nSubject: Re: [BrockAllen.MembershipReboot] Identity Server + MembershipReboot - ClaimsPrincipalExtensions - GetUserID Method (#334)\nHi @StateBarofArizonahttps://github.com/StateBarofArizona I did a minimal change within the method \"CreatePrincipal\" of the AuthenticationHelper.cs of Identity Server.\nTake a look at the end of the method, the line is commented:\npublic ClaimsPrincipal CreatePrincipal(string username, string authenticationMethod, IEnumerable additionalClaims = null)\n```\n    {\n    List<Claim> claims = null;\n\n\n\n    if (additionalClaims != null)\n\n    {\n\n        claims = additionalClaims.ToList();\n\n    }\n\n    else\n\n    {\n\n        claims = new List<Claim>();\n\n    }\n\n\n\n    if (!claims.Exists((p) => p.Type == ClaimTypes.NameIdentifier))\n\n    {\n\n        claims.Add(new Claim(ClaimTypes.NameIdentifier, username));\n\n    }\n\n\n\n    if (!claims.Exists((p) => p.Type == ClaimTypes.Name))\n\n    {\n\n        claims.Add(new Claim(ClaimTypes.Name, username));\n\n    }\n\n\n\n    if (!claims.Exists((p) => p.Type == ClaimTypes.AuthenticationMethod))\n\n    {\n\n        claims.Add(new Claim(ClaimTypes.AuthenticationMethod, authenticationMethod));\n\n    }\n\n\n\n    claims.Add(AuthenticationInstantClaim.Now);\n\n\n\n    ClaimsPrincipal principal = new ClaimsPrincipal(new ClaimsIdentity(claims, Constants.AuthenticationType));\n\n\n\n    //Added this line to fix MR Invalid NameIdentifier problem\n\n    principal = new ClaimsPrincipal(new ClaimsIdentity(ClaimsRepository.GetClaims(principal, null), Constants.AuthenticationType));\n\n\n\n    return FederatedAuthentication.FederationConfiguration.IdentityConfiguration.ClaimsAuthenticationManager.Authenticate(string.Empty, principal);\n\n}\n\n```\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/334#issuecomment-43582628.\nTop-notch continuing legal education on your summer vacation.\nJoin us for CLE by the Sea! http://azbar.org/CLEbytheSea\nEmbracing Our Future - SBA 2014 Annual Convention\nWestin La Paloma Resort & Spa, Tucson  http://azbar.org/Convention\n. That\u2019s better.  I knew it was something simple.  I\u2019m slowly learning.\nThanks!\nFrom: israelpereira [mailto:notifications@github.com]\nSent: Tuesday, May 20, 2014 5:23 AM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Connie DeCinko\nSubject: Re: [BrockAllen.MembershipReboot] Identity Server + MembershipReboot - ClaimsPrincipalExtensions - GetUserID Method (#334)\nMy Solution Works pretty well..\nI just forgot to say that you need to add a new property to use the ClaimsRepository and initialize it within the helper constructor.\npublic class AuthenticationHelper\n```\n{\n[Import]\n\npublic IUserRepository UserRepository { get; set; }\n\n\n\n[Import]\n\npublic IRelyingPartyRepository RelyingPartyRepository { get; set; }\n\n//Add this to Use the ClaimsRepository\n[Import]\n\npublic IClaimsRepository ClaimsRepository { get; set; }\n\n\n\npublic AuthenticationHelper()\n\n{\n\n    Container.Current.SatisfyImportsOnce(this);\n\n}\n\n\n\npublic AuthenticationHelper(IUserRepository userRepository, IRelyingPartyRepository relyingPartyRepository, IClaimsRepository claimsRepository)\n\n{\n\n    UserRepository = userRepository;\n\n    RelyingPartyRepository = relyingPartyRepository;\n\n\n\n     //Add to get the an instance of the claimsRepository\n\n    ClaimsRepository = claimsRepository;\n\n}\n\n```\nAnd Ofcourse, remember to use the sample \"MembershipReboot UserRepository\" to integrate Idsrv and MR.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/334#issuecomment-43618231.\nTop-notch continuing legal education on your summer vacation.\nJoin us for CLE by the Sea! http://azbar.org/CLEbytheSea\nEmbracing Our Future - SBA 2014 Annual Convention\nWestin La Paloma Resort & Spa, Tucson  http://azbar.org/Convention\n. We'd like to see a similar feature but so that the second or third email can be used as a recovery. So in case you lose access to your primary account, say job change, you can still access via your recovery email address.\n. Say what?  English please?  What is IoC?  What is ninject.mvc?  I don't recall seeing that in the Single TenantWebApp but I'll go check.\n. Ok, found the reference, add all three Ninject packages.  Now, I get this error:\nError activating AuthenticationService\nNo matching bindings are available, and the type is not self-bindable.\nActivation path:\n  2) Injection of dependency AuthenticationService into parameter authSvc of constructor of type RegisterController\n  1) Request for RegisterController\n. Added a few more missing references and now the register page displays.  But... where once my login page was working, now it throws and Object reference not set error.  It's like trying to create a working solution with apples and oranges.\n. @JellyMaster , if you can take a look, that would be great.  I got more of it working. Now the login and register screens display.  But I get an error when trying to login and that used to work.  I thought this would be easier.  Let IR do what it does best, manage login/logout.  Then let MR do what it does best and manage the user account.  Seems simple enough.  However it's not simple at all.\n. It looks like I finally got it working.  However, I would not mind another set of eyes to take a look and see how badly I hacked it up.  Overlook the horrible layout as the CSS still needs some work.  http://download.azbar.org/Thinktecture.idSrv2-MR7.zip\n. Oh man, do I feel stupid.  I didn't realize I was not hitting the site via https (I thought I had http blocked).  Now it's working!  Guess I need to put back my code that forces all traffic through https.\n. That's why I need help.  I've looked at this several times and many ways and as far as I see I am passing in a GUID and as far as I can tell, a NameID, that's what is supposed to be generated by User.GetUserID() in IdentityServer v.2.\nI am having trouble debugging locally as the lack of a matching SSL cert on my local machine prevents the app from running.\n. Resolved by adding to AuthenticationHelper.cs.\n. Never mind.  My changes to web.config were not being copied to the server.\n. I created a Customizations.cs class in the root of the project and added the following code.  It does not appear anything happens, my claim does not appear.\n```\nusing BrockAllen.MembershipReboot;\nusing BrockAllen.MembershipReboot.Relational;\nnamespace Thinktecture.IdentityServer.Web\n{\n    public class CustomUserAccount : RelationalUserAccount\n    {\n        public virtual int EntityID { get; set; }\n    }\npublic class CustomClaimsMapper : ICommandHandler<MapClaimsFromAccount<CustomUserAccount>>\n{\n    public void Handle(MapClaimsFromAccount<CustomUserAccount> cmd)\n    {\n        cmd.MappedClaims = new System.Security.Claims.Claim[]\n        {\n            new System.Security.Claims.Claim(\"EntityID\", cmd.Account.EntityID.ToString()),\n        };\n    }\n}\n\n}\n```\nNote: I'm using idSrv2 backed by MR7.\n. Did not mean to close, meant to keep open.\n. Command handler: Thinktecture.IdentityServer.Web.CustomClaimsMapper must handle commands for User Account type: BrockAllen.MembershipReboot.UserAccount \n. Ok, having an issue with TwilloSmsEventHandler so commented out for now.  No more errors, but still not seeing my claim using @foreach (var claim in System.Security.Claims.ClaimsPrincipal.Current.Claims)\n. Still not seeing my custom claim.  Here is my config:\n```\n    public class MembershipRebootConfig\n    {\n        public static MembershipRebootConfiguration Create()\n        {\n            var config = new MembershipRebootConfiguration();\n            config.RequireAccountVerification = true;\n            config.AddEventHandler(new DebuggerEventHandler());\n        // uncomment to ensure proper password complexity\n        config.ConfigurePasswordComplexity(5, 3);\n\n        config.AddCommandHandler(new CustomClaimsMapper());\n\n        var appinfo = new AspNetApplicationInformation(\"AZBar.org\", \"State Bar of Arizona\",\n            \"Account/Login\",\n            \"Account/ChangeEmail/Confirm/\",\n            \"Account/Register/Cancel/\",\n            \"Account/PasswordReset/Confirm/\");\n        var emailFormatter = new CustomEmailMessageFormatter(appinfo);\n        // uncomment if you want email notifications -- also update smtp settings in web.config\n        config.AddEventHandler(new EmailAccountEventsHandler<CustomUserAccount>(emailFormatter));\n\n        // uncomment to enable SMS notifications -- also update TwilloSmsEventHandler class below\n        //config.AddEventHandler(new TwilloSmsEventHandler<CustomUserAccount>(appinfo));\n\n        var debugging = false;\n\nif DEBUG\n        debugging = true;\n\nendif\n        // this config enables cookies to be issued once user logs in with mobile code\n        config.ConfigureTwoFactorAuthenticationCookies(debugging);\n\n        return config;\n    }\n}\n\n```\n. And here is my Customizations.cs which is in the root of my project.  Still nothing appears to happen.  I've tried adding a claim in over a dozen locations in the code and nothing shows up.  I even tried to comment out the claim that is used for emailaddress, yet it continues to display.  What am I missing here?  Are there any other users that can assist?\n```\nusing BrockAllen.MembershipReboot;\nusing BrockAllen.MembershipReboot.Relational;\nusing System.Security.Claims;\nusing System.Threading;\nnamespace Thinktecture.IdentityServer.Web\n{\n    public class CustomUserAccount : RelationalUserAccount\n    {\n        public virtual int EntityID { get; set; }\n    }\n// customize default email messages\npublic class CustomEmailMessageFormatter : EmailMessageFormatter<CustomUserAccount>\n{\n    public CustomEmailMessageFormatter(ApplicationInformation info)\n        : base(info)\n    {\n    }\n}\n\npublic class CustomClaimsMapper : ICommandHandler<MapClaimsFromAccount<CustomUserAccount>>\n{\n    public void Handle(MapClaimsFromAccount<CustomUserAccount> cmd)\n    {\n        cmd.MappedClaims = new System.Security.Claims.Claim[]\n        {\n            new Claim(\"http://auth.azbar.org/identity/claims/entityId\", \"999\"),\n            new Claim(ClaimTypes.SerialNumber, \"999\")\n        };\n    }\n}\n\n}\n```\n. And how do I do that?\nFrom: Brock Allen [mailto:notifications@github.com]\nSent: Thursday, June 05, 2014 9:45 AM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Connie DeCinko\nSubject: Re: [BrockAllen.MembershipReboot] How to add custom claimType (#368)\nAh, you're using this from IdentityServer, right? So then you're not using MR's SignIn API -- you're doing that from IdentityServer. IdentityServer has its own claims mapping mechanism since it's doing the login with WIF. You'd have to do the claims transformation in IdentityServer with its approach.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/368#issuecomment-45244168.\nTop-notch continuing legal education on your summer vacation.\nJoin us for CLE by the Sea! http://azbar.org/CLEbytheSea\nEmbracing Our Future - SBA 2014 Annual Convention\nWestin La Paloma Resort & Spa, Tucson  http://azbar.org/Convention\n. I did and it is of little help.  I followed the information and my custom claims still do not appear.\nFrom: Brock Allen [mailto:notifications@github.com]\nSent: Tuesday, June 10, 2014 3:45 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Connie DeCinko\nSubject: Re: [BrockAllen.MembershipReboot] How to add custom claimType (#368)\nRead the customizations link on the wiki.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/368#issuecomment-45681723.\nTop-notch continuing legal education on your summer vacation.\nJoin us for CLE by the Sea! http://azbar.org/CLEbytheSea\nEmbracing Our Future - SBA 2014 Annual Convention\nWestin La Paloma Resort & Spa, Tucson  http://azbar.org/Convention\n. Resolved.  emailFormatter was trying to use CustomEmailMessageFormatter which I had removed.  Changed back to EmalMessageFormatter.\n. Would this code in customizations.cs be good to use or is there a better way?\n```\n    // customize default email messages\n    public class CustomEmailMessageFormatter : EmailMessageFormatter\n    {\n        public CustomEmailMessageFormatter(ApplicationInformation info)\n            : base(info)\n        {\n        }\n    protected override string GetBody(UserAccountEvent<CustomUserAccount> evt, IDictionary<string, string> values)\n    {\n        if (evt is EmailVerifiedEvent<CustomUserAccount>)\n        {\n            return \"your account was verified with \" + this.ApplicationInformation.ApplicationName + \". good for you.\";\n        }\n\n        if (evt is AccountClosedEvent<CustomUserAccount>)\n        {\n            return FormatValue(evt, \"your account was closed with {applicationName}. good riddance.\", values);\n        }\n\n        return base.GetBody(evt, values);\n    }\n}\n\n```\n. Upgraded to MR7.2, updated EF, etc.  Had issues with EF wanting to recreate the database when it already exists!  Fought with that for several hours and finally got it working once again on dev.  Now, I copy everything to my staging server and run the site.  I get an error about not having create table permissions.  Really?  The database and tables already exist!  How friggen stupid is EF?  Life was much easier before all these \"time saving\" tools came along.\nHow can I make the app understand the tables already exist and get it to stop trying to recreate?\n. Closing, see #377.\n. Commented out guts of migrations and elevated permissions of database user.  Apparently, even though EF does not need to create tables, at least at this time, it barfs if it does not have create permissions?  Site is now working.\n. Also helpful to document:  Any properties set in the web.config override any in MemberShipRebootConfiguration.cs (i.e. allowAccountDelete=\"false\" in web.config means accounts will only be closed).\n. Yeah, EmailChangedEvent_Body.txt contains the following:\n```\nThis email is to confirm that your email has been changed for your account with {applicationName}.\nUsername: {username}\nEmail: {email}\nIt will be helpful for you to confirm this new email address by following this link:\n{confirmChangeEmailUrl}\nThanks!\n{emailSignature}\n```\nLooks like a bug.\n. What is the correct update for IdentityReposity.cs  when using with IdentityServer2?  The arguments can no longer be empty.\n. Still occurring.  Hope to find time soon to debug and see if I can locate the cause.\nFrom: Brock Allen [mailto:notifications@github.com]\nSent: Thursday, October 9, 2014 1:36 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Connie DeCinko\nSubject: Re: [BrockAllen.MembershipReboot] System.Exception: Missing validation message for ID : failed -- key verification failed (#430)\nAny update?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/430#issuecomment-58573314.\n. Brock, we are seeing a similar situation.  Either the email never reaches them or they just don't bother to check for the email.  They try to login right away and then they brick their account.  How long can you realistically extend the expiration of the verification link?  Is it safe to let them say verify several days or a week later?\n. Actually IdSvr is something I need to take another look at, before building my own solution.  Any teases or can you be sure to let us know when it\u2019s official?\n. I added verificationKeyLifetime=\"02:00:00\" to the <membershipReboot section of our web.config but it's causing the server to throw an error:  Unrecognized attribute 'verificationKeyLifetime'. Note that attribute names are case-sensitive.\nIs this the correct format?  I see that it's supposed to be a timespan so I formatted it like accountLockoutDuration.\n<membershipReboot \n        requireAccountVerification=\"true\" \n        emailIsUsername=\"true\" \n        multiTenant=\"false\"\n        defaultTenant=\"AZBar\"\n        allowAccountDeletion=\"false\" \n        passwordHashingIterationCount=\"3\" \n        accountLockoutFailedLoginAttempts=\"5\"\n        accountLockoutDuration=\"00:05:00\" \n        passwordResetFrequency=\"0\"\n        verificationKeyLifetime=\"02:00:00\"/>\n. Using 7.2.  Looks like you exposed this feature just after that version.\n. Brock, where is the change log? I need to see what is going to break when I go from 7.2 to 8.1.  Thanks.\n. OK, got it to build.  Now let's see if it will run!\n. Problem solved.\nDefaultMembershipRebootDatabase db = new DefaultMembershipRebootDatabase();\n...\nvar uarepo = new DefaultUserAccountRepository(db);\n. Then how do you verify/validate a user's identity if their email is not unique?\n. Actually, if the user tries to reset a password and hasn't logged in, they get an Email Change email.\nTake a look at public virtual void RequestAccountVerification(Guid accountID) in UserAccountService.cs, the last part seems wrong.\nTracing.Verbose(\"[UserAccountService.RequestAccountVerification] creating a new verification key\");\n        var key = SetVerificationKey(account, VerificationKeyPurpose.ChangeEmail, state: account.Email);\n        this.AddEvent(new EmailChangeRequestedEvent<TAccount> { Account = account, NewEmail = account.Email, VerificationKey = key });\nWhy would you send an EmailChangeRequestedEvent?\n. Actually, I see what you are doing.  You use the same \"Validate your Email Address\" email for a new account and for anyone changing the email address on their account.  I just need to make my custom verbiage more generic.\n. Brock, do you happen to recall which sample has the resend verification link?  I've not been able to find it. Also, I don't want to trigger a password reset for someone who is already validated but happens to fill out and send the Resend Validation form.\n. I figured it out.  First, pass the email to userAccountService.GetByEmail to get the account.  From account pass the ID to userAccountService.RequestAccountVerification.  Now I get the correct responses for existing, non-existing and already verified accounts.  Works like a charm.  Next would be adding a layer of protection from abuse.  I don't want a bot sitting on that page passing email addresses over and over looking for valid ones.\n. The problem is they are not getting any emails from our system.  We have yet to figure out if we are being blocked as spam due to volume, content or other?  Most users get the emails.  Some behind corporate firewalls or, ahem, still using AOL or other older systems don't receive the MR messages but they claim they get personal messages.\n. No change.  Go ahead and close as informational, discussion for a later date.\n. ",
    "alexandrejobin": "AD is there only to support login/password. After that, access policies, profile, groups, etc would be in a database. I thought that your framework would do the job by only override the authentication part and tell him to use AD instead.\n. i thought you would give me more help than that by answering a few of my questions in my first post. It would have helped me to understand your framework.\nanyway, thank you for your code.\n. That's why i was asking the question in the first place: if your framework could answer my needs. Thank you for your answer.\n. ",
    "AlonCG": "Yeah, I am not ... at least not in the development environment. \nEventually when we get to test and live, we will go SSL. So then ... I guess I really do not understand the \"CustomizationsSample\" project. I am not aware that it uses an SSL ... and the claims are populating correctly. I will definitely have to go back and see what I am missing.\nOn a side note, Thanks! I feel that if I had used this to begin with ... instead of ASP.Net Identity stuff I would have less grey hair!\n. Thanks for your assistance. \nI will go through the sample again bit-by-bit and see what I can find. If I find anything I will let you know right away. \nJust a note that it will most likely be on Sunday (our weekends over here are Friday and Saturday).\nThanks again!\n. Just wanted to thank you and apologize for wasting your time. \nI reread issue 102 and then went through my code (as promised ;) to compare to your examples (after updating to the latest source). \nLo-and-Behold ... I had ProxyCreation disabled (Configuration.ProxyCreationEnabled = false;) on my data context. For a quick test, I added the same setting to the CustomizationsSample and as expected, I received the same behavior. \nIn the end ... I basically inherited UserAccountService and overrode GetByEmail so that I could specifically include the Claims and Certificates objects (though I prolly will never use the Certificates) in the GetAll call: \n... GetAll(tenant).Include(u => u.Claims).Include(u => u.Certificates).SingleOrDefault(x => (x.Email == email));\nAnd this seems to work as expected. \nAgain apologies. If this seems like the \"correct\" think to-do, please close this issue. My Bad!\n. Yep ... by disabling ProxyCreation, it also disables lazy loading. Only thing I need to consider is if I am disabling ProxyCreation for a valid reason. It may just be an elephant thing.\n. Thanks for this code by the way. Been much easier than trying to implement the Asp.Net Identity stuff!!!\nThough I have been writing code of some sort since 1997, I am not too comfortable thinking I actually know what I am doing to contribute to an open source project :) \nEverything is nicely packaged within MR (eg. internal methods and \"sets\") that I just didn't want to hack it :)  My suggestion would be something like this within the UserAccount class ...\n```\n    protected internal virtual void ReopenAcount()\n    {\n        Tracing.Information(\"[UserAccount.ReopenAcount] called for accountID: {0}\", this.ID);\n        if (IsAccountClosed) {\n            Tracing.Verbose(\"[UserAccount.ReopenAcount] success\");\n        SetVerificationKey(VerificationKeyPurpose.VerifyAccount);\n\n        IsLoginAllowed = true;\n        IsAccountClosed = false;\n        AccountClosed = null;\n\n        this.AddEvent(new AccountReopenedEvent { Account = this } );\n    } else {\n        Tracing.Warning(\"[UserAccount.ReopenAcount] account is not closed\");\n    }\n}\n\n```\nIn UserAccountEvents <?>:\npublic class AccountReopenedEvent : UserAccountEvent { }\nI would also like to do the same thing with forcing an account to be re-verified without the need to change the emailaddress (username). Just some administration stuff that could be useful. \nI had switched to your latest NuGet package to make builds easier and less code to maintain, but maybe I should just figure out how to use Git properly so it can be integrated into my TFS project?\n. Oops ... didn't put in the UserAccountServiceCode ... \nwhich could possibly be like this ...\n```\n    public virtual void ReopenAccount(Guid accountID)\n    {\n        Tracing.Information(\"[UserAccountService.ReopenAccount] called: {0}\", accountID);\n    var account = this.GetByID(accountID);\n    if (account == null) throw new ArgumentException(\"Invalid AccountID\");\n\n    DeleteAccount(account);\n}\n\nprotected internal virtual void ReopenAccount(UserAccount account)\n{\n    if (account == null) throw new ArgumentNullException(\"account\");\n\n    Tracing.Verbose(\"[UserAccountService.ReopenAccount] reopening account: {0}\", account.ID);\n\n    account.ReopenAcount();\n    Update(account);\n}\n\n```\n. No worries. \nReopenAccount(account);\nshould be the last line in ReopenAccount \n. Using v5, I've added the following changes:\nUserAccountEvents.cs\npublic class AccountReopenedEvent<T> : UserAccountEvent<T> \n{\n    public string VerificationKey { get; set; }\n}\nUserAccountService.cs\n```\npublic virtual void ReopenAccount(Guid accountID) {\n    Tracing.Information(\"[UserAccountService.ReopenAccount] called: {0}\", accountID);\nvar account = this.GetByID(accountID);\nif (account == null) throw new ArgumentException(\"Invalid AccountID\");\n\nReopenAccount(account);\n\n}\nprotected virtual void ReopenAccount(TAccount account) {\n    if (account == null) throw new ArgumentNullException(\"account\");\nif (!account.IsAccountClosed) {\n    Tracing.Warning(\"[UserAccountService.ReopenAcount] account is not closed {0}\", account.ID);\n    return;\n}\n\nTracing.Verbose(\"[UserAccountService.ReopenAccount] reopening account: {0}\", account.ID);\nClearVerificationKey(account);\nvar key = SetVerificationKey(account, VerificationKeyPurpose.VerifyAccount, state: account.Username);\n\naccount.IsLoginAllowed = true;\naccount.IsAccountClosed = false;\naccount.AccountClosed = null;\n\nUpdate(account);\n\nthis.AddEvent(new AccountReopenedEvent<TAccount> { Account = account, VerificationKey = key});\n\n}\n```\nThis seem reasonable? If so, I assume you can close this since I seem to be the only one that needs this funcitonality :) And thanks for all your assistance.\n. Awesome, thanks for all your hard work. It looks good and I will be able to test it tomorrow (when I am at the office).\nSorry I was unable to get back to you earlier ... I am offline from Friday afternoons through Saturday evenings (local time).\nAll the best.\n. Seems good for me ... you even added the additional email messages, thanks!\n. Awesome, thanks for the reply and all your work. \nI will wait for v5 as you suggested ... playing with SignalR and client/server messaging now so will be lost in a rabbit hole for a bit!\n. Thanks! \nI am going to attempt to start upgrading my project from v4 to v5, though I will need to make some custom changes as mentioned here and elsewhere. \nI know this is not really a MR question, but a Git question, if you have a quick second ... and this is not too juvenile ... I want to make sure this is what I want to do ...\n1) download the latest code using Git (for Windows) to my local machine\n2) create a local branch of that code ... make my changes to my local branch and integrate (w/ Success) into my project!\n3) keep the main branch synced with your code and sync your code one-way to my branch\nThanks again!\nEdit: after some thought ... I will just copy your code into my TFS project and do manual syncs ... that will most likely be easiest!\n. Do you mean UserAccountService? \nOr have you moved \"UserAccountService.AddClaim\" to the AuthenticationService class? \n. Great ... thanks for your response. \n. Guess I was impatient. I started my migration from v4 yesterday :-) TFS tells me that I changed 95 files! \nI admire your commitment and desire to please everyone. I guess that is why I have been lucky to work on projects where I define the development environment before accepting them (not saying that is a good or bad thing, just a thing!)\n. I see that you have added some of the Keys back ... if you have a moment, can you just let us know the status of your changes/additions? With the current keys back, I am able to run my project (after EF creates the DB). \nSince there are no (or don't appear to be any) navigation properties assigned to the linked UserAccount entities (Certificates, PasswordResetSecrets, TwoFactorAuthTokens, etc) back to the UserAccount entity ... EF creates it's own foreign key back to the EtdsUserAccount entity ... meaning that even though your entities define \"UserAccountId\" ... EF still creates a FK mapping using \"EtdsUserAccount_ID\".\nIt may be that my DbContext is mucking it up, I did rename the tables, but I did not change any of the Key properties that are defined in your ConfigureMembershipRebootUserAccounts.\nAny ideas ... or am I jumping the gun again?\n. Thanks ... was about ready to go hack all the objects, but I will take a breather and get back to it on Sunday :) \nHave a rewarding end-of-week and weekend!\n. Yep, this should be good!\n. Back to the double foreign keys (UserAccountID and EtdsUserAccount_ID) in both the UserCertificates and UserClaims tables. I may be able to update my DBContext class to do additional mappings after:\nmodelBuilder.ConfigureMembershipRebootUserAccounts<EtdsUSerAccount>();\nWhich may explain why my Claims and Certificates (from UserAccount) collections are null causing the UserAccountService to error. Though I was able to get around this by adding the following initializes to my EtdsUserAccount constructor:\nClaimCollection = new Collection<RelationalUserClaim>();\nUserCertificateCollection = new Collection<RelationalUserCertificate>();\nI must have something configured incorrectly, because the Customizations sample works correctly and I am now  allowing ProxyCreation and LazyLoading.\n. In regards to the double keys, it looks like this may be a problem with a Migration not generating correctly.\nI am in the process of re-generating an \"Initial\" migration and will see if that resolves this!\n. Deleted my database and started again. This resolved the double key issue ... got messed up in the Migrations I guess. \nBut now I can't get the UserAccount object to populate with the Claims and Certificates when signing in ... all the navigation properties are null ... Even with Lazy Loading enabled. #139 all over again :(\n. Yeah! Thanks ... that was me too :-) Hope it solved my problems! Sorry for being so verbose. \n. One better idea that I will implement (not sure why I did not do this in the first place?) ... add a single simple method to the UserAccountService class to change the \"account.VerificationKeySent\" field ... and then put all my other code int the UserAccountService class. It would keep your code cleaner and still just give me the one change I could not get too. \nOnly Change to UserAccountService ... everything else done in my EtdsUserAccountService class.\n```\npublic bool UpdateVerificationKeySent(TAccount account, DateTime newDate)\n{\n    if (account == null) throw new ArgumentNullException(\"account\");\n    if (account.IsAccountClosed)\n    {\n        Tracing.Warning(\"[UserAccountService.UpdateVerificationKeySent] account is closed: {0}\", account.ID);\n        return false;\n    }\nTracing.Information(\"[UserAccountService.UpdateVerificationKeySent] called for: {0}, {1}\", account.ID, newDate);\n\naccount.VerificationKeySent = newDate;\n\nUpdate(account);\nTracing.Verbose(\"[UserAccountService.UpdateVerificationKeySent] success\");\nreturn true;\n\n}\n```\n. Sorry, I hit the wrong button. Would still like your feedback/suggestion.\n. Thanks Brock ... I think I am not understanding something basic ... so I apologize if this is frustrating. \nI do have a custom UserAccount class that has my additional properties (this works as expected). And I think I am using the event system when I change items correctly. I also have created a Custom UserAccountService that has most of my needed functionality set up ...\nI have just not been able (or just don't know how) to access the underlying properties on the UserAccount (or really the RelationalUserAccount) object that I need to modify from my classes ... VerificationKeySent and IsAccountVerified. \nGenerally ... I don't want to change anything that you have written! I would definitely like to use it out of the box ... as a NuGet package of course! Just not quite sure how.\n. I think I have an \"iD-ten-T \" error. If I have any additional questions or issues, I will let you know. Thanks!\n. This issue appears to be resolved ... it was just a stupid misconception on my part. I am now using the NuGet package and a few custom implementations. Now ... if I could get some other stuff to work ... that would be great!\n. Same as #200, just not as concisely and succinctly put. Thanks!\n. Of course, giving that a try ... though I am not sure I want to refactor again to use multiple DBContexts ... though that is also appetizing.\n. For some reason I don't think KISS when dealing with others' code ... though it is desirable by all means.\nBased on the CustomizationsSample ... I already had a custom account repository:\npublic class AccountRepository : DbContextUserAccountRepository<EtdsContext, EtdsUserAccount>\nAll I needed to do was override the Queryable property ... which actually seems to work. (Of course, I didn't think of this until after I had already created my own EagerLoadingAccountRepository implementation and read up on the EF6 multi-tenants approach -> #200 !) \nSo ... here is the only code so far that needed to be added to my AccountRepository ...\nprotected override IQueryable<EtdsUserAccount> Queryable\n{\n    get { return base.Queryable.Include(a => a.ClaimCollection).Include(a => a.UserCertificateCollection); }\n}\nNo null errors when signing in with LazyLoading disabled\nAND\nThe claims collection is populating correctly\nThanks for all of your assistance over these past few weeks. \nIf this sounds like a proper approach, please go ahead and close this.\nHappy Holidays to all.\n. Just so I have a basis for using this in my application... you split your original DBContext into two, one for the MR stuff and one for all the rest? Did you use new schemas or just basically 2 DBContext classes? I realize this is an EF issue, but what about navigation properties between objects in different contexts?\n. Just a note, that after some initial consideration with multiple Entity Contexts, I realized I did not want to refactor again, so I just added one override to my custom AccountRepository:\nprotected override IQueryable<EtdsUserAccount> Queryable\n{\n    get { return base.Queryable.Include(a => a.ClaimCollection).Include(a => a.UserCertificateCollection); }\n}\nThis worked for me. \n. Hello Brock, not sure what you are looking for ... but since I \"copied\" the sample application, I do have a custom password validator where I am making sure the password also follows some additional rules. Not sure what is good/bad .. it seems to work for me, which is what I was looking for. Sorry I am not of any more assistance.\n[Well, I kinda lied ... ]\nIn testing ... which I just started ... this does not yet work ... attempting to do a fix now... The issue is that the validator is testing the password against values in my custom object that have not been set yet (when the CreateAccount is called) .... so once I have it working I will let you know.\n-> No answer ... I did not want to rewrite all the CreateAccount/Init functionality ... so I am looking for another solution. Though I do use the custom validator for anything that does not require access to my custom UserAccount properties.\n. I'll chime in ... \"ID\" just reminds me that I am fat whereas \"Id\" has the illusion of my former skinnier self.\n. (Without really thinking about or getting into it ... ) My $.02 is that if you wanted to have a different schema for your MR context as compared to the rest of your app domain entites, then the \"HasDefaultSchema\" would not suffice.  That is just assuming though that the developer desires different schemas! ... if only one schema then HasDefaultSchema wins in EF > 6.\n. No worries, I just wanted to make sure I didn't miss something easier. I've had some problems with the EF 6.1 update, so I decided to rebuild my database from scratch anyway. I renamed a bunch of your entity tables, so I decided to bypass the script and just generate a new initial migration.\nOn a unrelated side note (since I've seen some gripes) ... other than a few recent issues, I tend to like EF migrations (now I never used anything competing and am by o means an expert) ... but for 70 or so entities with trivial changes ... migrations seem to work well!\n. I was not trying to offend you or be mean. It looks like your issue was solved, but the OP still had his issue (at least up until 9 days ago anyway) ... and Brock had closed the issue that was resolved for you, but not the OP. \nAnyhow ... you mention that you have LazyLoading and ProxyCreation Enabled. I basically have them set to false ... and as you can see in my post #199, this was working by using a custom AccountRepository.. This did work until recently as I did a major refactoring of my app to get MR v7 to run. While MR seems to work for most things ... I am just unable to delete the claims.\nIn my AccountRepository I have ...\nprotected override IQueryable<EtdsUserAccount> Queryable\n{\n    get { return base.Queryable.Include(a => a.ClaimCollection).Include(a => a.UserCertificateCollection); }\n}\nI followed a bunch of stuff in the CustomizationSample, just nothing seems to work.\n. Adding and retrieving claims works ... so I am assuming that my implementation (overridden Queryable) is at least partially working. So I just need to figure out why the delete is crashing.\nYou suggest to implement all methods from IUserAccountRepository  as compared to inheriting DbContextUserAccountRepository ?\n. Thanks! I will take a look at these ... hopefully breaking your sample and attempting a resolution ... without having to rewrite a ton of stuff ;-)\nI am still appreciative of all the work you have done ... just to rant ... since I have started on this project, I must have spent about 2 months total time working on the membership bits. A month alone basically with AspNet Identity through the RCs, RTM, and final before finding MR. I was able to get MR v3 up and running for my app in less than a week, so I was pretty ecstatic (Identity killed my enthusiasm a bit!) Anyhow ... since I am currently the only developer on this, each time I go back to refactor, I lose time ... (these are the joys of development) end of rant\nSo please don't think I am ungrateful, I just hope to find a way to move forward and maybe let you know what I ended up doing!\n. So yeah ... I can get the Customizations Sample app to behave the same way. Can add and read the claims ... but can't delete. FYI ... Our weekend is almost here ... so I may not get back onto this until Sunday.\n. Time for home :)\nI am not quite sure ... but I think what is happening is that when LazyLoading is disabled ... the call \"RegisterUserAccountChildTablesForDelete\" does not really do anything. \nWhen \"RegisterDeleteOnRemove\" is called (let's say) on the RelationalUserClaim collection (or any of them) ... the collection is null, the claims are not in the collection at this time ... so the AssociationChanged event hook is never called. \nSo finally when dbContext.SaveChanges() is called, the error is thrown.\nThe Custom AccountRepository Queryable property mentioned above, obviously is not used, since the calls to QueryableUserAccountRepository::GetById only sees the Queryable property from DbContextUserAccountRepository ? \nDoes that make any sense? Sorry it has been a long week.\n. You have to disable the lazy loading ... Then you can reproduce the error. I don't think I can enable it in my app (lazyloading) ... So I have to come up with a way to make MR work again with my existing configuration.\n. Thanks Brock for your assistance. Most likely the error you received was that none of the claims were loading. That is why I created a custom AccountRepository where you can explicitly include additional entities ... eg: \nprotected override IQueryable<EtdsUserAccount> Queryable\n{\n    get { return base.Queryable.Include(a => a.ClaimCollection).Include(a => a.UserCertificateCollection); }\n}\nNow, I tried out separate DBContexts when v5 came out. Since I have references to the CustomUserAccount's primary key in many of my entities, this did not seem to work. Lazy loading (Proxy Creation) is also not an option I am comfortable with. Not only have I not enabled ProxyCreation since EF 1, enabling proxy creation it did not work in my scenario with MR previously. (On a side note ... my DB schema has not had significant changes since October of last year ... except to accommodate changes made in MR. Note this is not a complaint, since I could have always wrote my own implementation ... hindsight is 20/20 they say.)\nIf I can not figure out a way to remove the claims (since again, that is the only thing not working) elegantly, then my only option would be to completely implement the custom repository (and never update MR again after v7 bascially) ... or find another solution, since it seems that ever other version (in my case v5 and v7) causes major havoc to the previous releases (you can see the posts I have created over the past months).  \nNow, I am just curious ... I have not used LazyLoading (for better or worse) since EF 1 was originally released (back then I created EDMX files, now strictly code-first). Now, once I overrode Queryable in my custom repository (in versions < MR 7) ... I did not have any problems. Yet, in the post you linked above (http://brockallen.com/2014/03/30/how-i-made-ef-work-more-like-an-object-database/) ... is the attempt to make \"EF work like an object database\" actually part of the problem? \n. Writing a Custom Repository did not resolve this issue.\nI had already overridden Queryable in the repository so that I could \"Include\" the linked table. So anyway, I implemented a custom repository defined as:\npublic class CustomRepositoryEx : IUserAccountRepository<CustomUserAccount>, IUserAccountQuery, IDisposable\nand implemented all the methods ... which was basically copy and paste except for:\nprotected IQueryable<CustomUserAccount> Queryable\n{\n    get {\n        try {\n            CheckDisposed();\n            var query = items.Include(a => a.ClaimCollection)\n                .Include(a => a.LinkedAccountClaimCollection)      \n                .Include(a => a.LinkedAccountCollection)               \n                .Include(a => a.PasswordResetSecretCollection)\n                .Include(a => a.TwoFactorAuthTokenCollection)     \n                .Include(a => a.UserCertificateCollection);\n            return query;\n        } catch (Exception exception) {\n            return null;\n        }\n    }\n}\nEven though this custom repo gets called ... the call to\ninternal static void RegisterDeleteOnRemove<TChild>(this ICollection<TChild> collection, DbContext ctx) where TChild : class\nstill has a \"null\" collection. So \"entities.AssociationChanged\" never gets registered. Basically the same thing as I ran into Thursday.\nAny other suggestions?\n. Actually ... in the call RegisterUserAccountChildTablesForDelete, on the CollectionChanged event ... the \"NewItems\" new account in NotifyCollectionChangedEventArgs does not have any of the linked entities populated. So when the RegisterDeleteOnRemove is called, that collection is always empty.\nctx.Set<TAccount>().Local.CollectionChanged +=\n    delegate(object sender, NotifyCollectionChangedEventArgs e) {\n        if (e.Action == NotifyCollectionChangedAction.Add) {\n            foreach (TAccount account in e.NewItems) {\n                //No claims exists for account here\n                account.ClaimCollection.RegisterDeleteOnRemove(ctx);\n                [...]\n            }\n        }\n    };\nSo the custom repository does squat in this situation.\n. Just for Ss&Gs, I changed my DbContext to allow LazyLoading ...\nConfiguration.LazyLoadingEnabled = true;\nConfiguration.ProxyCreationEnabled = true;\nand removed my CustomAccount repository ... and I still received the original error even though my claims are loaded. So Enabling Lazy loading (as I discovered when upgrading to v5) did not do anything of use.\n. Yeah I am completely lost as well, most likely will have to start all over with a new solution, not really what I want to do, but am not sure I will have a choice. \nJust to wrap up ...\nWhen MR accesses the repo, everything is loaded correctly. It gets loaded through the custom repository. The problem is in the CollectionChanged event handler ... none of the account collections are populated with data (in this case, the event handler is not going through the repo?) so the RegisterDeleteOnRemove trick is not registering. Strangely though ... even when I enable LazyLoading and ProxyCreation, when the event fires, those collections are still empty (only empty in the event handler, not anywhere else in the code).\nI guess since there does not appear to be a solution available, we should just close this issue?\nAll the best, keep up your hard work. I appreciate all you've done and tried to do here. \n. On a side note ... I now think I know why I have ProxyCreation and LazyLoading disabled. As I mentioned previously ... I don't remember ever really enabling them since I started using EF sometime in 2008. And quite possibly ... it was due to an original misconception (and/or bad implementation) that I carried forward through additional projects and iterations. \nThe problem I was attempting to bypass was circular reference errors (from entities with one-to-many relationships) serializing the dynamic proxies. Since I was getting circular references, disabling dynamic proxies basically solves this issue and I loaded the related data as needed.\nI remember not liking the way EF created ForeignKeys automatically when implying the navigation properties. eg -> NavigationProperty_PrimaryKey (I think the \"_\" annoyed me). So I remember creating the navigation properties on both ends and then either using the fluent api at first then  DataAnnotations to mark the \"ForeignKey\" properties. (I typically do not rely on the EF conventions so that other developers could understand the code without knowing any \"magic\" .) \nThis in fact does create a circular reference since let's say Teacher contains a collection of students while student has a foreign key back (navigation property) to teacher. \npublic class Teacher {\n    [Key]\n    public Guid TeacherId { get; set; }\n    public virtual ICollection<Student> Students { get; set; }\n}\npublic class Student {\n    [Key]\n    public Guid StudentId { get; set; }\n    [ForeignKey(\"Teacher\")]\n    public Guid TeacherId { get; set; }\n    public virtual Teacher Teacher { get; set; }\n}\nWhen serializing this ... I can see that the serializer could get lost going back and forth between Teacher -> Students [Student -> {Teacher -> Students} ...] \nI just may need to reprogram myself to thinking EF properly in this regard ... and then maybe I could get ProxyCreation to work <?>\n. From the sound of it ... It seems like nothing can be done so you can clean up your backlog and close this out. Thanks for trying.\n. ",
    "keithharvey": "I think a good example of this working is www.basecamp.com. Their onboarding process for a project allows you to type emails to invite and then it automatically send an invite to those emails, inviting them to set their first name, last name, and password. We have a similar top-down, b2b use-case, where user-driven registration really doesn't make much sense because it's usually a company administrator setting their projects up.\n. Looks like this was added to master. Thanks Brock works great.\n. In our case it's almost always company domain emails, so the while typos happen, the typical typo would result in someone at the client company gets an unexpected email. There is a risk there, I agree with you, but it's pretty small. The cost of having a default password provided by the admin is they just paid for a license and now have to go and hunt that information down from all their coworkers. Not a very friendly on-boarding process. Last name is about the best candidate I can think of and even that has problems (typos of that value).\n. I'm happy, thanks.\n. Are we sure the group hierarchies are necessary? For my use case I really just need groups of claims that can be assigned to users or license types in either a one to many or a many to many relationship. The hierarchies seem to bring up a lot of edge cases, like circular dependencies. It's easy enough to implement your own but if we're going for a base implementation it might be easiest to start without the nesting?\n. I started trying to implement this and hit some road blocks. Deriving from user has a few problems, the user collections being a hard type instead of a HasMany().WithMany() is problematic since I get an extra column CustomUserType_ID foreign keyed in every table.\n. Yes, because groups are open-ended in your system I didn't want to modify the library. Instead, I tried to use custom groups to add claims, and custom users in order to associate with groups. Problem with this was, and correct me if I'm wrong, but it was making a pretty nasty looking schema because the user-associated collections (Claims, Certificates, LinkedAccounts) are all entities themselves, with hard coded column order and keys. This was causing a duplicate foreign key on each of those many-to-many tables. What I have now is working great, but it's not well integrated so would like to revisit it later.\n. No but I can build one. Won't have much free time until the weekend though.\n. ",
    "robertorodes": "Hello @brockallen and everyone else,\nI know this issue was opened quite a while ago but currently I am facing a similar scenario to the one  @keithharvey talked about in his comment (the basecamp.com example). Basically, I need to implement an invitations based onboarding process (closed registration) through which users will only be allowed to signup with an invitation. Obviously, this is something quite usual in many applications, mainly in their first market stage as a mechanism to grow their user base in a controlled way.\nI've been working with MR for a quite a while (together with Thinktecture Identity Server 3) and read its related documentation but I have not been able to find the way to support this use case, although @keithharvey in his comment mentions it is really supported.\nAny explanation or hints about how to implement this behavior if actually possible would be really appreciated.\nThank you all in advance and best regards.\n. Ok, that's what I wanted to know. Thanks a lot for your help.\n. ",
    "SeriousM": "\nOk, that's what I wanted to know. Thanks a lot for your help.\n\nHi @robertorodes,\ncould you provice a bit of code or steps to be done to implement the invitation process?\nOr didn't you implemented it?\nThank you very much!!\n. ",
    "martyt": "Wait, my bad... Assumed the build in the current NuGet package included this fix but apparently it does not. Grabbed current Master and built and all is well. \n. Yeah, seems to be working in my limited testing. \n. Any chance you could update the NuGet package with this fix? I keep running into an issue where the custom built version I'm using gets replaced by the version in the package... Thanks!\n. Looks like I might able to call UserAccount.AddClaim() in my Login() action, after authenticating and before calling SignIn(), but that feels like a hack.\n. Perfect. That's just what I needed!\n. And FYI  the current Samples solution won't build either for the same reason (plus a few more). \n. ",
    "samsal123": "Thanks for the reply!\nDo you have some sample applications addressing this. Thanks!\nAlso, how do you set roles for the users from the AD?\n. P.S : I cannot attach images to this. Pls send me an email id / location where I can upload the snapshots. Thanks!\n. Thanks Allen. \nThe above solution of disabling the simple membership worked for me. I am still confused as to how the simple membership is enabled. I haven't enabled anywhere as part of my code. Is it enabled by default. Any hints?\nThanks\nSam\n. ",
    "DejanMilicic": "Thamx, I missed ctor overload that accepts configuration as a first parameter. Works like a charm. Is there any specific reason why IMembershipRebootConfiguration (i.e. interface) is not used?\nIn line of this discussion one more question - I am creating multilingual site and I will have one configuration per language, passing appropriate one to the constructor, based on the language of current page. What would be solution for multilingual sites when using DI?\n. In addition to steps mentioned in Getting Started article https://pmbanugo.wordpress.com/2014/07/12/getting-started-with-membershipreboot/ I had to perform one more registration\nkernel.Bind<DefaultMembershipRebootDatabase>().ToSelf();\nNB: I was using NuGet packages\n. ",
    "SovietSam": "Yeah. I thought about this aproach. But it's not so smooth for me. One of the disadvantages is that there will be always additional request to the database. I really love the features of Brock's product but that little nuance kept me out of using it in my new project in favor of new ASP.Net Identity framework. So I really hope Brock will give us the opportunity to pass our own User class to his service someday.\n. Yes, it worked for me! At least registration process (don't have enough time for testing other things now), but I think everything else will be fine too. So thank you very much. You made our lifes a little bit easier!\n. How can I send you resource file?\n. Hi! Sended to your gmail.\n. One bad thing with this approach I think that things tend to change. Maybe in next version of MR there will be need for some other objects that you didn't include in a query (maybe they don't even exist for now). So you'll get an error and may be it will be hard to detect.\n. Ok. Got it. Thanks!\n. Just for consideration, EF 6 supports multiple EntityContexts for one DB. So I created one just for MembershipReboot with lazy loading enabled. Worked for me.\n. Yes, I splited my original DBContext into two, one for the MR stuff and one for all the rest. I didn't use new schemas. And I don't have logic for navigate between objects in different contexts. Context for MR is used strictly for MR purposes and strictly by MR logic. Throughout of my code I use other context and different repo.\n. ",
    "ultragizmoboard": "I'm actually still seeing this issue out of the box. I also can't get it running in Azure right now as it seems like everything correctly has a clustered index. I'm not sure what the error message is referring to at this point.\nIs anyone else seeing this issue? It's possible I just have some weird config in my world somewhere.\nE.g. when I get SSMS to create a script for PK_dbo.UserAccounts it gives me:\n/** Object:  Index [PK_dbo.UserAccounts]    Script Date: 12/14/2013 19:12:05 ****/\nALTER TABLE [dbo].[UserAccounts] ADD  CONSTRAINT [PK_dbo.UserAccounts] PRIMARY KEY CLUSTERED \n(\n    [ID] ASC\n)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)\nGO\nWhich looks correct... All the others are similar. However I still get:\n\"Tables without a clustered index are not supported in this version of SQL Server. Please create a clustered index and try again.\"\n. Ya, I'm sitting on: cbdf5da65973182824d999f02e816a5bb4f8123a\nThere was a bug in a beta version of EF6 that caused __MigrationHistory to have a non clustered index but that was fixed in the version I'm on (6.0.2). And in this case I don't see any table without a clustered index.\nI do a git clean -fdx, rebuild, delete all the tables that MR creates plus __MigrationHistory, deploy locally to the emulator, invoke the relevant code, notice the correct tables are created in Azure and then get the exception.\nDbContextRepository->Create where T is a UserAccount.\nSystem.Data.SqlClient.SqlException occurred\n  HResult=-2146232060\n  Message=Tables without a clustered index are not supported in this version of SQL Server. Please create a clustered index and try again.\nThe statement has been terminated.\n  Source=.Net SqlClient Data Provider\n  ErrorCode=-2146232060\n  Class=16\n  LineNumber=1\n  Number=40054\n  Procedure=\"\"\n  Server=.database.windows.net\n  State=1\n  StackTrace:\n       at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action1 wrapCloseInAction)\n       at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\n       at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\n       at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)\n       at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)\n       at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()\n       at System.Data.Entity.Infrastructure.Interception.InternalDispatcher1.Dispatch[TInterceptionContext,TResult](Func1 operation, TInterceptionContext interceptionContext, Action1 executing, Action1 executed)\n       at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext)\n       at System.Data.Entity.Internal.InterceptableDbCommand.ExecuteNonQuery()\n       at System.Data.Entity.Migrations.DbMigrator.ExecuteSql(DbTransaction transaction, MigrationStatement migrationStatement)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.ExecuteSql(DbTransaction transaction, MigrationStatement migrationStatement)\n       at System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable1 migrationStatements, DbConnection connection)\n       at System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClass32.<ExecuteStatements>b__2e()\n       at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()\n       at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func1 operation)\n       at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)\n       at System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable1 migrationStatements)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.ExecuteStatements(IEnumerable1 migrationStatements)\n       at System.Data.Entity.Migrations.DbMigrator.ExecuteOperations(String migrationId, XDocument targetModel, IEnumerable1 operations, IEnumerable1 systemOperations, Boolean downgrading, Boolean auto)\n       at System.Data.Entity.Migrations.DbMigrator.ApplyMigration(DbMigration migration, DbMigration lastMigration)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.ApplyMigration(DbMigration migration, DbMigration lastMigration)\n       at System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable1 pendingMigrations, String targetMigrationId, String lastMigrationId)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.Upgrade(IEnumerable1 pendingMigrations, String targetMigrationId, String lastMigrationId)\n       at System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)\n       at System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.b__b()\n       at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)\n       at System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)\n       at System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update()\n       at System.Data.Entity.MigrateDatabaseToLatestVersion2.InitializeDatabase(TContext context)\n       at System.Data.Entity.Internal.InternalContext.<>c__DisplayClasse1.b__d()\n       at System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)\n       at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()\n       at System.Data.Entity.Internal.LazyInternalContext.b__4(InternalContext c)\n       at System.Data.Entity.Internal.RetryAction1.PerformAction(TInput input)\n       at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action1 action)\n       at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()\n       at System.Data.Entity.Internal.InternalContext.Initialize()\n       at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)\n       at System.Data.Entity.Internal.Linq.InternalSet1.Initialize()\n       at System.Data.Entity.Internal.Linq.InternalSet1.get_InternalContext()\n       at System.Data.Entity.Internal.Linq.InternalSet1.Create()\n       at System.Data.Entity.DbSet1.Create()\n       at BrockAllen.MembershipReboot.Ef.DbContextRepository`1.BrockAllen.MembershipReboot.IRepository.Create()\n  InnerException: \n. @dandresini running your code during migration throws the following:\nA first chance exception of type 'System.Data.SqlClient.SqlException' occurred in EntityFramework.dll\nAdditional information: The constraint 'PK_dbo.LinkedAccounts' is being referenced by table 'LinkedAccountClaims', foreign key constraint 'FK_dbo.LinkedAccountClaims_dbo.LinkedAccounts_LinkedAccount_ProviderName_LinkedAccount_ProviderAccountID'.\nCould not drop constraint. See previous errors.\n. @brockallen 31882fd723ae1f1d2644079f7d32b022e8486b43 works for me now. Thanks for your hard work!\n. ",
    "dandresini": "For SQL AZURE need fix some part of migration code for working fine: when I execute IniziatCreate I have a Warnig \"The maximum key length is 900 bytes. The index 'PK_dbo.LinkedAccountClaims' has maximum length of 916 bytes. For some combination of large values, the insert/update operation will fail.\", in this moment not is important because the index is recreated in second step of migration. In second step  if you changed the name of index column, the code go on error; also the operation can't be performed if there isn't a primary key. To solve the bug I create first a key index, and then a new column, updated value from older to new column and then drop the older column \n```\n        AddPrimaryKey(\"dbo.UserCertificates\", \"Thumbprint\");\n        AddColumn(\"dbo.UserCertificates\", \"UserAccount_ID\", c => c.Guid(nullable: false));\n        CreateIndex(\"dbo.UserCertificates\", \"UserAccount_ID\");\n        AddForeignKey(\"dbo.UserCertificates\", \"UserAccount_ID\", \"dbo.UserAccounts\", \"ID\", cascadeDelete: true);\n        this.Sql(@\"UPDATE dbo.UserCertificates SET UserAccount_ID=UserAccountID\");\n        DropColumn(\"dbo.UserCertificates\", \"UserAccountID\");\n    AddPrimaryKey(\"dbo.UserClaims\", new[] { \"Type\", \"Value\" });\n    AddColumn(\"dbo.UserClaims\", \"UserAccount_ID\", c => c.Guid(nullable: false));\n    this.Sql(@\"UPDATE dbo.UserClaims SET UserAccount_ID=UserAccountID\");\n    CreateIndex(\"dbo.UserClaims\", \"UserAccount_ID\");\n    AddForeignKey(\"dbo.UserClaims\", \"UserAccount_ID\", \"dbo.UserAccounts\", \"ID\", cascadeDelete: true);\n    DropColumn(\"dbo.UserClaims\", \"UserAccountID\");\n\n```\nfor LinkedAccounts table  we have that the providername column is a part of primary key, so i create a temporany primary key with unique value, I modified the column and then I recreate the key:\n```\n       AddPrimaryKey(\"dbo.LinkedAccounts\", new[] { \"ProviderAccountID\",\"LastLogin\" });\n        AlterColumn(\"dbo.LinkedAccounts\", \"ProviderName\", c => c.String(maxLength: 30,nullable:false));\n        DropPrimaryKey(\"dbo.LinkedAccounts\");\n        AddPrimaryKey(\"dbo.LinkedAccounts\", new[] { \"ProviderName\", \"ProviderAccountID\" });\n        AddColumn(\"dbo.LinkedAccounts\", \"UserAccount_ID\", c => c.Guid(nullable: false));\n        this.Sql(@\"UPDATE dbo.LinkedAccounts SET UserAccount_ID=UserAccountID\");\n        CreateIndex(\"dbo.LinkedAccounts\", \"UserAccount_ID\");\n        DropColumn(\"dbo.LinkedAccounts\", \"UserAccountID\");\n        AddForeignKey(\"dbo.LinkedAccounts\", \"UserAccount_ID\", \"dbo.UserAccounts\", \"ID\", cascadeDelete: true);\n    AddPrimaryKey(\"dbo.LinkedAccountClaims\", new[] { \"Type\", \"Value\" });\n    AddColumn(\"dbo.LinkedAccountClaims\", \"LinkedAccount_ProviderName\", c => c.String(nullable: false, maxLength: 30));\n    AddColumn(\"dbo.LinkedAccountClaims\", \"LinkedAccount_ProviderAccountID\", c => c.String(nullable: false, maxLength: 100));\n    CreateIndex(\"dbo.LinkedAccountClaims\", new[] { \"LinkedAccount_ProviderName\", \"LinkedAccount_ProviderAccountID\" });\n    this.Sql(@\"UPDATE dbo.LinkedAccountClaims SET  LinkedAccount_ProviderName=CONVERT(nvarchar(30),ProviderName), LinkedAccount_ProviderAccountID=UserAccountID\");\n    AddForeignKey(\"dbo.LinkedAccountClaims\", new[] { \"LinkedAccount_ProviderName\", \"LinkedAccount_ProviderAccountID\" }, \"dbo.LinkedAccounts\", new[] { \"ProviderName\", \"ProviderAccountID\" }, cascadeDelete: true);\n    DropColumn(\"dbo.LinkedAccountClaims\", \"ProviderAccountID\");\n    DropColumn(\"dbo.LinkedAccountClaims\", \"ProviderName\");\n\n```\nNow the code work fine. Now I solve downgrade migration.\n. Ok, Now for me worked fine. I prefer to use a new configuration for SqlAzure. In Ef project I create a new class SqlAzureMembershioRebootDatabase: \n```\n  namespace BrockAllen.MembershipReboot.Ef\n  {\n    public class SqlAzureMembershipRebootDatabase : DefaultMembershipRebootDatabase\n    {\n        public SqlAzureMembershipRebootDatabase(): base(\"name=MembershipReboot\"){}\n    public SqlAzureMembershipRebootDatabase(string nameOrConnectionString): base(nameOrConnectionString){}\n\n    public DbSet<UserAccount> Users { get; set; }\n    public DbSet<Group> Groups { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n       modelBuilder.ConfigureMembershipRebootUserAccounts<UserAccount>();\n       modelBuilder.ConfigureMembershipRebootGroups<Group>();\n    }\n\n}\n```\nThen in Configuration.cs I had created a new sealed class  ConfigurationAzure:\n```\n  public sealed class ConfigurationAzure : DbMigrationsConfiguration\n   {\n      public ConfigurationAzure()\n      {\n        AutomaticMigrationsEnabled = false;\n        ContextKey = \"BrockAllen.MembershipReboot.Ef.SqlAzureMembershipRebootDatabase\";\n        MigrationsDirectory = @\"Migrations\\SqlAzure\";\n        MigrationsNamespace = \"BrockAllen.MembershipReboot.Ef.Migrations.SqlAzure\";\n      }\n  protected override void Seed(BrockAllen.MembershipReboot.Ef.SqlAzureMembershipRebootDatabase context){}\n\n }\n\n```\nBefore to create file for migration I modify the value of Type in  BrockAllen.MembershipReboot.LinkedAccountClaims to StringLength of 100 (so index not exeded of length great then 900 byte)and then  I execute in PMC the command for create a initial migration for SqlAzure: \nAdd-Migration -ConfigurationTypeName ConfigurationAzure InitialCreate\nFor use this in SingleTenantWebApp example in file class NinjectWebCommon I added \nprivate static void RegisterEntityFrameworkSqlAzure(IKernel kernel)\n    {\n        System.Data.Entity.Database.SetInitializer(new System.Data.Entity.MigrateDatabaseToLatestVersion<SqlAzureMembershipRebootDatabase, BrockAllen.MembershipReboot.Ef.Migrations.ConfigurationAzure>());\n        kernel.Bind<IUserAccountRepository>().ToMethod(ctx => new DefaultUserAccountRepository()).InRequestScope();\n    }\nand I call this function in RegisterServices. I don't know if this is the best solution but now I solved my problem in SQL AZURE database and can work in my project.\n. Yesterday just work fine\n. perhaps I have not explained. If the configuration is incorrect or the messaging system go  Time-out all functionality gone on error. So if I change a phone number, password o user name, every function go on error.\n. Yeap, but if in a real scenario  a mail server service go down, (i have aTime out error in function). So all function that use Event go on error. \n. Ok now work fine, but when update Database in Sql Azure I got error for index maximum exceded for 16 byte. At this point I created a new Configuration for Azure.\n. Excuse me if i have  touched your work. I like MembershipReboot, but when the first time I execute login with external provider, Membership register the user with a default password even if I not inserted nothing. If I find to change the password I must inserted the old that I don't know. that's all. I used the same functionality of ASP.net Identity when the first time I enter with external provider. Are there any other solution for that?\n. Solved, but I prefer the old implementation because I can added plus account for provider,\n. Yeap, but if I have two accont of Google provider I can add only for a provider. With the previous version I can add multi account for the same Provider\n. Ok now work fine. I added two Google account.\n. news?\n. I fix for my example:\n userSvc.AddCertificate(user.ID, certificate.Thumbprint, certificate.Description);\nuserSvc.RemoveCertificate(user.ID, certificate.Thumbprint);\nuserSvc.AddClaim(user.ID, ClaimTypes.Role, role);\nBut I not sure for GetAll()\nIQueryable GetAll();\n.  In Azure the problem is the key index length for LinkedAccountClaims table. With default configuration I used \"Update-Database -Verbose -Name InitialCreate\" I setted the LinkedAccountClaims Value field to 100 and the default Configuration worked fine (even if I must change v5 migration for wrong EF dropped index). The simple solution for me was \"Add-Migration -ContentTypeName ConfigurationAzure\" so the EF has created a migration that was the fusion of InitialCreate and v5 of default configuration.\n. The problem was that when update a database EF first execute InitialCreate (give a warning) and then v5. In version 5 the step of EF for drop band create index foreign key are in wrong order for Azure. In SQL Azure then renaming a index column give an error, so first step is drop index and foreign key, then create new foreign key add a new column and then copy previous valute from old to new column band final re create index. So many work in refactoring EF file migration. I think that create a new migration is a fast solution. I sen ed you a pull request.\n. I create an Azure MIgration, with notepad I changed csproj so the file of migration have the same name of default. Then I modify v5  and now work. After giving the food to baby I change the downgrade. What do you think?? I don't know if no change to InitialCreate where I set dbo.LinkedAccountClaims.Value to 130\nhttps://github.com/dandresini/BrockAllen.MembershipReboot/commit/23384074f8e78f73ed4c283d53004bf74b7380e2\n. I update only v5 and InitialCreate is the same of you and now work all fine: Upgrade and downgrade\nfor configuration Azure I use\n```\npublic sealed class ConfigurationAzure : DbMigrationsConfiguration\n{\n    public ConfigurationAzure()\n    {\n        AutomaticMigrationsEnabled = true;\n        //to change\n        AutomaticMigrationDataLossAllowed = true;\n        ContextKey = \"BrockAllen.MembershipReboot.Ef.SqlAzureMembershipRebootDatabase\";\n        MigrationsDirectory = @\"Migrations\\SqlAzure\";\n        MigrationsNamespace = \"BrockAllen.MembershipReboot.Ef.Migrations.SqlAzure\";\n    }\nprotected override void Seed(BrockAllen.MembershipReboot.Ef.DefaultMembershipRebootDatabase context)\n{\n    //  This method will be called after migrating to the latest version.\n\n\n    //  You can use the DbSet<T>.AddOrUpdate() helper extension method \n    //  to avoid creating duplicate seed data. E.g.\n    //\n    //    context.People.AddOrUpdate(\n    //      p => p.FullName,\n    //      new Person { FullName = \"Andrew Peters\" },\n    //      new Person { FullName = \"Brice Lambson\" },\n    //      new Person { FullName = \"Rowan Miller\" }\n    //    );\n    //\n}\n\n}\n```\nI used   AutomaticMigrationDataLossAllowed = true;\nhttps://github.com/dandresini/BrockAllen.MembershipReboot/commit/bae3e0b05332effcc84f2c464286e19a69e46072\n. Yeap,it's worked on SqlAzure.. I used Configuration class and I tested Upgrade Downgrade and Update. thank's you I merged your code\nGod bless you\n. @WilliamDoman  are you started from an empty db or from previous version? In this moment I cleared my db in Sql Azure and I executed from PMC \"Update-Database -Verbose\" and all work fine (only two warnig). I think you have a previous version of project.\n. ok if a newer version in v5 Migration @brockallen  has created a new table of LinkedAccounts with LinkedAccounts2, after he has imported data from dbo.LinkedAccounts he has deleted the table. If you want, use a migration step, with -verbose properties.\n. I see that this.GetByID(accountID); is the core of many function. Another point to solve is where a Account is created\n. ok thanks\n. ",
    "abyshai": "Nice. Good job Mr.\nMerci\n. ",
    "calebboyd": "+1\n. I would chime in and say this would solve my problems... here Though, It would just be because It would free-up the ID property as the relational key.\n. Ok, sorry, I've added a summarized question.\n. Hmm v7 sounds like it may be a solution. Will it retain the UserAccount base with a Guid ID field? That's really what is causing all my issues... I'm not seeing how a custom implementation can gain me that field since it would have to extend UserAccount.\n. Yeah, I'm not too concerned about column names, only model property names. The model implementation for base UserAccount restricts the property name ID  to a Guid type, when it is consistently an Int the entirety our application...(and most examples)  I'm simply trying to avoid re-factoring to an inconsistency.\nI arrived at the same conclusion you posted here about what looks to be a similar issue... Its not really a nice solution to ripple the type throughout the \nimplementations. \nPerhaps it could be solved with an interface. And impl like this\nClosing for now...\n. .... I'm not suggesting an implementation change or removal of the Guid. Merely an contractual interface for MyUserAccount.\nSomething akin to:\n```\npublic class MyUserAccount: IUserAccount\n{\n    [Key]\n    public int ID { get; set; }\npublic Guid UID { get; set; }\n//Computed interface property.\nGuid IUserAccount.ID { get { return UID; } set { UID = value; } }\n...\n\n}\n```\nThis would allow granular control over model implementation, e.g. a property name of ID that produces the expected type, consistent with who ever's implementation, for whatever property.\nThis doesn't fit right in with what you have due to how protection levels are set up. That is why I'm wondering if it is at all applicable..\nThanks,\n. I am not too familiar MRs 2fa and have not dived into the way its currently implemented...but one idea might be to manage the presence of a custom header with some sort of middleware\n. After working on this for a while it seems that my real question would be how to implement 2fa when using an Authorization and Authentication scheme as you demoed in your ResourceOwner Sample\n. You just need to build the main solution. (not samples) Nuget should restore the packages.\n. The extensibility for this scenario is demonstrated in the Customizations sample. \nhere\n. It would seem then the answer is no then :/. Essentially It could behave exactly like multiple emails per user account in Github. Maybe some food for thought, a neat feature if added.\nMy Pre-MR schema was something like:\n```\nUserAccount\n      ID\n      HashedPassword...\n      UserName    \n      etc...\nEmails\n     UserID\n     Address\n     IsPrimary\n     IsVerified\nEmailVerificationCodes\n    Address PK,FK\n    Code (aka password plain text version sent to email)\n    Salt\n    CreationDate\n    FailedAttempts\n```\nThis sort of resembles the way you have many PasswordSecrets implemented. Generally one will only want to operate on the First() instance.\n. Correct, just as you can here on github\n. Ahh yeah. That's a good idea.\nAs for being mainstream...\nI'm thinking it is/has been mainstream. Here are the places I know of and actively use this functionality.\n- github (account settings -> email)\n- google\n- microsoft\n- ...facebook (accont settings -> email)\nI can login to my Google account with my outlook address and visaversa. \n. Yeah, I can agree with that. I think I'm avoiding federated identity, when it is really what I want...\n. ",
    "dgreif": "+1\n. @brockallen Could you elaborate further on why GUIDs are preferable for larger apps?  They seem fairly interchangeable with integer IDs, but have worse performance database wise.  What is the advantage with them that exceeds the performance issues?\n. ",
    "nonnb": "+1\n. ",
    "huysentruitw": "Why not add ...Async variants?\n. fixes issue #514\n. ",
    "mplatoff": "+1\n. ",
    "eric-swann-q2": "+1\n. I have a related but slightly different issue:\nI have RequireAccountVerification = false and am using the email as the username, although don't think it is important to this scenario.  When the user attempts to reset their password the AccountService insists on confirming the account before allowing password reset.  But I've already indicated that the account confirmation should not be required in the settings.  Is this by design or just a miss?  \nI see the configuration is available already in the account service so the \"Require Verification\" setting could be checked as part of the condition for password reset.  If that sounds ok, happy to do a pull request.\nBest,\nEric\n. Cool thanks.\n. ",
    "rverhulst": "No, not account by account. Just in general the possibility to Close (and Re-open) accounts, and if needed Delete accounts. \n. I understand the security settings. But want if I want to have them both. Show for example 2 buttons, Close Account and Delete Account next to each other? Now this is not possible. \n. Thanks for your quick replies!\n. ",
    "DavidRogersDev": "I cannot get the latest code to compile, so I am using v.4.0.0.\nIn the sample app, an PasswordResetRequestedEvent is definitely added. In the EventBus class, there's a method called RaiseEvent. when that is passed to GetHandlers, no items are returned in the matchingHandlers variable. So the foreach loop iterates 0 items. \n. Ah that's what did it. I had not uncommented that line in MembershipRebootConfig.cs\nSorry about that. Thanks for your time in helping me out with that.\n. Does one need to add anything server-side to permit CORS? My attempts to hit the token endpoint from a different domain are failing. The js is:\n    var headers = {\n        'Access-Control-Request-Method': 'POST',\n        'Origin': 'http://localhost:54437/',\n        'Access-Control-Request-Headers': 'origin, content-type, accept'\n    };\n```\n$.ajax({\n    type: \"POST\",\n    url: 'http://localhost:5034/token',\n    data: JSON.stringify({ userName: 'alice', password: 'pass' }),\n    contentType: 'application/json',\n    headers: headers\n}).done(function (data) {\n});\n```\nI've also enabled CORS on the HttpConfiguration object at the server:\nconfig.EnableCors();\nThere's no rush on getting back to me. Only if you have time.\nCheers\n. Thanks Brock. \n. Thanks Brock. \nBy all means close this.\n. Thanks Brock. Much appreciated!\n. Thanks Brock. As great as it is, EF can be a hard mistress.\n. Oh, and as an FYI, I think I just discovered why there is a __MigrationHistory table, even though I am not using Migrations (I much prefer Paul Stovell's DbUp). It is by design and a new thing in EF6.\n. ",
    "AndreaCuneo": "The STS(IdP) have to support both OAuth2 and WsFed. What needs to be done is to serve a custom user profile as claims to various applications. The problem I see is when the user updates his profile infos (contact, company reference, roles) on the User Management application, the applications should get the updated claims as soon as them make a pass on the STS.\nAbout the identity management & authentication part, I need most of what MR have: events, auditing, password reset, register, claims, retry lockdown and maybe 2-fact-auth.\nMy first idea was to have two separate applications: one MR website and one IdSrv website connected using the sample you provided but, this way, I lose most of what MR does for authentication. My current idea is to create a single application with both MR and IdPSrv but maybe I'm going in the wrong direction...\n. ",
    "mikeandersun": "Can point me where is the evet registration?\n. I don't add reference to BrockAllen.MembershipReboot.WebHost project. It is a core project? I integrate SingleTanentWebApp with WebSite project of Thinkstecture. Am I in a right way?\nThank in advance for your advises.\n. I open it :) but can't run it, because I get 61 errors that all related to nuget packages. Anyway thanks to advise and nice product and quick an answer. I hope I can help you when I more understanding on you projects. We plan to use your projects in a production service.\n. I thinks it is a network issue . I try to get the packages and understand it. Thanks a lot\n. I use Autofac as IoC container, I can't make an association between MembershipRebootConfig ,MembershipRebootConfiguration instances. There no Eventhander load for Create account in this method:\n public void RaiseEvent(IEvent evt)\n        {\n            var action = GetAction(evt);\n            var matchingHandlers = GetHandlers(evt);\n            var eventHandlers = matchingHandlers as IList ?? matchingHandlers.ToList();\n            int hc=  eventHandlers.Count();\n            foreach (var handler in eventHandlers)\n            {\n                action(handler, evt);\n            }\n        }\nSo   action(handler, evt); not execute at all.\n. Solved. \nNever mind.\n. I sent. Can you give me a gidance to SMS notification? Is it completed on is in development progress?\n. I thinks is requires a cellphone centric registration with providing a MobilePhoneNumber and  a password, then we can have authenticate with MobilePhoneNumber and password. This flow is better for Mobile base applications.Of course we have a email(username) centric registration and authentication flow at general ( better for web applications).\nthanks to attentions.\n. Just think user haven't any email. Is there signup and sign in solutions?\nBest,\n. I thinks we need another methods for signup and signing with mobile, so we separate two flow (mobile and Email).\nThen we can have 3 method for authentication: with username, with email and with mobile number. \nYou override the user name with email if EMAILISUSERNAME is true. In my opinion we not need this option and it is better that we authentication be on : username+ password, mobilenumber+password, email+password.\nIf you agree the approach  give me some advises. I can contribute with you to have it.\nI think this flexibility useful for business that have native App and web interface on own business.\nBest,\n. Thanks, I solved it by add a hidden field to the log in form.\n. I add it in the claims repository and work fine. \nThanks a lot\n. ",
    "jahnavisdba": "Hi Brock, I am also having issues getting the remember me functionality working. I added the above mentioned persistent flag as well as the security token handlers.\nThis is not working in the samples also. Am I missing something? Can you please point me the right configuration?\nThanks.\n. Hi Brock, Thanks for the response. I am just using a simple MVC web app like one of your samples. I would like to encrypt only the password in the database connection string. How to do accomplish this? please throw some light.\n. Thank you!\n. Hi Brock,\nThank you. I had looked at your WebApiResourceOwner sample and implemented\nit. How do we extend the Test Controller to implement the registrations,\nlogout, etc for API? Please explain.\nAlso, WebApiResourceOwner is using Thinktecture in the client. But,\n\"Thinktecture IdentityServer v3 MembershipReboot\" project has the server\ncomponent. Should we be using this framework for API authentication?\nWe are kind of confused in the approach here. We just want to be able to\nextend the below approach using your membership framework for API\nauthentication..\nhttp://www.asp.net/web-api/overview/security/individual-accounts-in-web-api\nPlease advice.\nThanks.\nOn Wed, Dec 3, 2014 at 7:58 PM, Brock Allen notifications@github.com\nwrote:\n\nLook at the OAuth2 resource owner password flow. You'll need a token\nservice like IdentityServer:\nhttps://github.com/thinktecture/Thinktecture.IdentityServer.v3/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/465#issuecomment-65520914\n.\n. Thanks Brock. We have already implemented per your WebApiResourceOwner\nsample, on the server side for authenticating based on membership reboot\ndatabase.\nWe just need to enhance the existing test controller for registration and\nother user management operations.\n\nFrom what you say below, we could just use the any registration; something\nlike the registration in singleTenant sample calling membershipReboot\nuserAccountService, correct?\nPlease suggest.\nThank you...\nOn Tuesday, December 9, 2014, Brock Allen notifications@github.com wrote:\n\nYou're on your own for registrations.\nThinktecture is a company name. We produce many libraries. You're talking\nabout IdentityModel in the client -- it's a helper library for obtaining\ntokens.\nIdentityServer is a token service. It can be used instead of the Microsoft\nKatana OAuth2 authorization server for creating tokens. I'd suggest using\nIdentityServer instead of the Katana authorization server.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/465#issuecomment-66371057\n.\n. Hi Brock,\n\nSo based on the above suggested approach, we are trying to extend the\nWebApiResourceOwner application to include registration, etc for\nauthenticating the API.\nHowever, we are not able to get the UserAccountService\nand AuthenticationService instances.\nIn your WebApiResourceOwner ServerApp project, we added a\nUserAccountController, as below. The control does not go to the first\nconstructor but only to the other one. Are we missing anything here? Or we\nwould like to derive the service from the context but the context is also\nnot coming up.\nCan you please guide where we are going wrong in adding authentication to\nthe web API?\n//Constructor\n        public UserAccountController(AuthenticationService\nauthService, UserAccountService userAccountService)\n        {\n            _userAccountService = userAccountService;\n            _authService = authService;\n        }\npublic UserAccountController()\n        : this(Startup.UserManagerFactory(),\nStartup.OAuthOptions.AccessTokenFormat)\n        {\n```\n    }\n   public UserAccountController(UserManager<IdentityUser>\n\n```\nuserManager,\n            ISecureDataFormat accessTokenFormat)\n        {\n            UserManager = userManager;\n            AccessTokenFormat = accessTokenFormat;\n            //Context = context;\n}\nOn Wed, Dec 10, 2014 at 7:38 AM, Brock Allen notifications@github.com\nwrote:\n\nSure.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/465#issuecomment-66445614\n.\n. To add more,\nWe are trying to enforce the authentication on each of the controller as\nsuggested in\nhttp://www.asp.net/web-api/overview/security/individual-accounts-in-web-api\n(For local login, Web API uses the resource owner password flow\nhttp://oauthlib.readthedocs.org/en/latest/oauth2/grants/password.html\ndefined in OAuth2.)\n\nSo, we need to combine this with the membershipReboot solution in\nWebApiResourceOwner.\nPlease guide us.\nOn Thu, Dec 11, 2014 at 5:51 PM, Jahnavi DBA jahnavis.dba@gmail.com wrote:\n\nHi Brock,\nSo based on the above suggested approach, we are trying to extend the\nWebApiResourceOwner application to include registration, etc for\nauthenticating the API.\nHowever, we are not able to get the UserAccountService\nand AuthenticationService instances.\nIn your WebApiResourceOwner ServerApp project, we added a\nUserAccountController, as below. The control does not go to the first\nconstructor but only to the other one. Are we missing anything here? Or we\nwould like to derive the service from the context but the context is also\nnot coming up.\nCan you please guide where we are going wrong in adding authentication to\nthe web API?\n//Constructor\n        public UserAccountController(AuthenticationService\nauthService, UserAccountService userAccountService)\n        {\n            _userAccountService = userAccountService;\n            _authService = authService;\n        }\npublic UserAccountController()\n        : this(Startup.UserManagerFactory(),\nStartup.OAuthOptions.AccessTokenFormat)\n        {\n```\n    }\n   public UserAccountController(UserManager<IdentityUser>\n\n```\nuserManager,\n            ISecureDataFormat accessTokenFormat)\n        {\n            UserManager = userManager;\n            AccessTokenFormat = accessTokenFormat;\n            //Context = context;\n}\nOn Wed, Dec 10, 2014 at 7:38 AM, Brock Allen notifications@github.com\nwrote:\n\nSure.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/465#issuecomment-66445614\n.\n. \n\n",
    "xmkevin": "I know that I should implement an IQueryable provider instead of fetching all data. thanks.\n. I find the #175 is a better solution. remove the dependency of IQueryable, hope it can be merged.\n. Also want the methods of getting Claims, LinkedAccounts, Certificates, TwoFactorAuthTokens, PasswordResetSecrets are exposed in the IUserAccountRepository interface.\n. Yes, they are in the UserAccount class, but if you don't use entity framework, which can load properties by itself, how can you load Claims into UserAccount instance ?  Do we need a repository interface to load data from database ?\n. ",
    "NanosoftDK": "I was looking into implementing a provider for ms sql server, but using stored procedures for a very tight security lockdown. \nAnd for the normal web application connection i don't want to expose a way to enumerate all users.\n. if you want i can make a suggestion in a pull request\n. pull request is here:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/177\n. It looks good, I will try it out when I get back to work in the new year. I will post the provider implementation when it works. Keep up the great work.\n. they already are, by the individual user account, or do want to list them all?\n. thanks, i will try to implement that.\n. ",
    "stefanveliki": "NanosoftDK... your code doesn't compile.\n. Interesting, I am not even slightly familiar with transactional queues, but I'll certainly read a bit more about them. \nThanks\n. ",
    "WilliamDoman": "How does this work? \nI tried to run the 6.x.x today and I get issues creating the tables, but the code-first entity classes look like it has keys defined in the model.\n\"One or more validation errors were detected during model generation:\\r\\n\\r\\nBrockAllen.MembershipReboot.Ef.RelationalUserClaim: : EntityType 'RelationalUserClaim' has no key defined. Define the key for this EntityType.\\r\\nBrockAllen.MembershipReboot.Ef.RelationalLinkedAccountClaim: : EntityType 'RelationalLinkedAccountClaim' has no key defined. Define the key for this EntityType.\\r\\nBrockAllen.MembershipReboot.Ef.RelationalLinkedAccount: : EntityType 'RelationalLinkedAccount' has no key defined. Define the key for this EntityType.\\r\\nBrockAllen.MembershipReboot.Ef.RelationalPasswordResetSecret: : EntityType 'RelationalPasswordResetSecret' has no key defined. Define the key for this EntityType.\\r\\nBrockAllen.MembershipReboot.Ef.RelationalTwoFactorAuthToken: : EntityType 'RelationalTwoFactorAuthToken' has no key defined. Define the key for this EntityType.\\r\\nBrockAllen.MembershipReboot.Ef.RelationalUserCertificate: : EntityType 'RelationalUserCertificate' has no key defined. Define the key for this EntityType.\\r\\nRelationalUserClaims: EntityType: EntitySet 'RelationalUserClaims' is based on type 'RelationalUserClaim' that has no keys defined.\\r\\nRelationalLinkedAccountClaims: EntityType: EntitySet 'RelationalLinkedAccountClaims' is based on type 'RelationalLinkedAccountClaim' that has no keys defined.\\r\\nRelationalLinkedAccounts: EntityType: EntitySet 'RelationalLinkedAccounts' is based on type 'RelationalLinkedAccount' that has no keys defined.\\r\\nRelationalPasswordResetSecrets: EntityType: EntitySet 'RelationalPasswordResetSecrets' is based on type 'RelationalPasswordResetSecret' that has no keys defined.\\r\\nRelationalTwoFactorAuthTokens: EntityType: EntitySet 'RelationalTwoFactorAuthTokens' is based on type 'RelationalTwoFactorAuthToken' that has no keys defined.\\r\\nRelationalUserCertificates: EntityType: EntitySet 'RelationalUserCertificates' is based on type 'RelationalUserCertificate' that has no keys defined.\\r\\n\"\n. I thought it was Azure thing but I just tried on my local sql server and get the same error... I'll have to dig in.\n. @dandresini, new install.  The MembershipReebot EF code was pulled from 3 days ago.\nI haven't been able to dig into it yet, maybe tonight or tomorrow.\n. I cant seem to get the samples to compile.  I must be missing something.\nThis is from the nosql sample. \nIdeas?\nError   8   'BrockAllen.MembershipReboot.UserAccountService' does not contain a definition for 'TwoFactorAuthenticationPolicy' and no extension method 'TwoFactorAuthenticationPolicy' accepting a first argument of type 'BrockAllen.MembershipReboot.UserAccountService' could be found (are you missing a using directive or an assembly reference?) D:\\Development\\BrockAllen.MembershipReboot-5.1.0\\samples\\NoSql\\SingleTenantWebApp\\App_Start\\NinjectWebCommon.cs 62  21  SingleTenantWebApp\n. Oops.. didnt mean to close that.  LOL\n. I cant seem to get any of the handlers to work.\nusing this from the sample code, no handler fires either.\n``` C#\n config.AddEventHandler(new DebuggerEventHandler());\npublic class DebuggerEventHandler : \n        IEventHandler>,\n        IEventHandler>,\n        IEventHandler>,\n        IEventHandler>,\n        IEventHandler>,\n        IEventHandler>\n    {\n        public void Handle(AccountCreatedEvent evt)\n        {\n            Debug.WriteLine(\"AccountCreatedEvent: \" + evt.VerificationKey);\n        }\n```\n. I'll walk the code and see, but I'm not doing any custom stuff, only code from the samples.\nFYI, i'm using the ravendb store and manually building the objects.   Its an azure webrole MVC 5, although I havent published it yet.\nThis is the object..  \n``` C#\n AuthenticationService svc =\n                    new SamAuthenticationService(\n                         new UserAccountService(\n                             new RavenUserAccountRepository(\"RavenDB\")));\n            svc.UserAccountService.Configuration = MembershipRebootConfig.Create();\n\n```\nand the config looks like\n``` C#\n  var config = new MembershipRebootConfiguration(); //settings\n        config.AddEventHandler(new DebuggerEventHandler<HierarchicalUserAccount>());\n\n        var appinfo = new AspNetApplicationInformation(\"App\", \"Email Signature\",\n            \"Users/Login\", \n            \"Users/ChangeEmail/Confirm/\",\n            \"Users/Register/Cancel/\",\n            \"Users/PasswordReset/Confirm/\");\n\n       //var delivery = new SmtpMessageDelivery();\n       // delivery.Send(new Message() { Body = \"Test\", To = \"me@gmail.com\", Subject = \"Subject\" });\n\n        var emailFormatter = new EmailMessageFormatter<HierarchicalUserAccount>(appinfo);\n        config.AddEventHandler(new EmailAccountEventsHandler<HierarchicalUserAccount>(emailFormatter));\n\n```\n. Nope.  If i take the sample and run it, it works.  If i update the dependencies with nuget to bring it inline with my azure webrole project it doesn't work.  Still trying to narrow it down.\n. I got it running with the updated dependencies and I'm going to compare to the azure project.\n. Well... I could'nt break the sample.  I noticed some slightly different code in the nosql sample in the ninject registration, and what I downloaded this morning, so I pointed my project to the newly downloaded code and it worked.\nC#\nkernel.Bind<IUserAccountQuery>().ToMethod(ctx => new BrockAllen.MembershipReboot.RavenDb.RavenUserAccountRepository(\"Raven\"));\nIs this needed??\nThanks, and Sorry!! =)\n. Thanks!\n. Basically getting the latest MR.dll source.  What ever version I had between 5.1 and the this morning was not very happy.\n. Azure doesn't support inproc session like local emulator does.  You probably need to setup a cache worker role or use the cache service to store your token in cache. \n. ",
    "girtsl": "First of all, thanks for making this and also providing the source!\nI have the same requirement - login using mobile phone number - for a project I'm working on.\nI thought using the phone number as username would be sufficient until a proper solution is in place but the built in validation requires the username to contain at least one letter. Unfortunately there doesn't seem to be an easy way to override it. The configuration only allows to add new validations.\nIs there a good (security related) reason for this validation rule - 'UsernameOnlyContainsLettersAndDigits'?\nAlternatively could you please implement means to easily override built-in functionality (e.g. validation) without ending up re-creating the whole thing sans some features? I believe this was one of the reasons why this project came into existence :)\n. Calling ChangeMobilePhoneRequest in a custom AccountCreatedEvent will result in the user not being able to verify the email address as the VerificationKey gets overridden. If the users only need to authenticate using MobilePhoneNumber and the email verification email is not sent at all, then I guess it's fine but to verify both email and mobile phone, the ChangeMobilePhoneRequest should be called after the user has verified the email address.\nJudging from the OP's last post, they would want to authenticate with either username+password, email+password or mobile+password. Don't see much point of the username being different from email or mobile phone, but maybe the OP has some specific requirements.\n. I believe it makes as much sense as \"a111\". The developer can always choose to add additional restrictions, e.g. minimum length.\n. Much appreciated, thanks! \nI have a couple of other suggestions regarding validation (i.e. overriding it), will open new issue[s] for them.\n. Ah, thanks for the explanation. The property name is a bit misleading.\nIt actually makes sense to not send Reset Password emails to unverified addresses - so that a malicious user wouldn't spam another user.\nHave you thought about similar configuration setting for turning off mobile phone verification? \nThis would allow to store the phone number without verification. It would then be up to the application to enable phone-based features based on whether the number is verified or not.\n. I'm very much in favor of such APIs. \nRecently our customer requested that the administrator users should be able to create other accounts and because the verification would have been done already using different means it would be very inconvenient to require it once again.\nIt is true that app developers could misuse these APIs and shoot themselves in the foot. If well documented, perhaps that wouldn't be an issue?\n. Good point, I hadn't considered that.\nDo you have any ideas on how to remediate the situation described above when users have effectively prevented themselves from gaining access to the system?\nOne solution that comes to mind would be to have a scheduled job that deletes accounts that haven't been verified in a while.\n. Ok, thanks for the fast responses!\n. Sorry, I don't speak in any of the languages above - they were provided by our client. \nAlso I'm not sure about the value of providing localized package metadata, but that's just my thoughts.\n. I'm experiencing the same issue. As usual, the devil is in the details - \"If the user attempts to log in without verifying their account with the correct username and password\".\nIf you change your test to use correct password for authentication, the test will fail.\n. Hi! Any comment on the PR?\n. The reason and fix for test 1 might be in #534.\n. Hi! The only tests failing for me involved the use of DateTime.Now instead of DateTime.UtcNow, which are now fixed.\n@Allann was the OP.\n. ",
    "Sobieck": "I don't have much experience with Mongo but I'll see if I can get it working over the next couple of days.\n. I've fixed that issue on my machine. However, I'm having issues committing it to Github. Do I have to branch to commit? I've never used Github as a source control. \n. Thanks. I'll update that a little bit later today. I've got the basic functions working with mongo (create new user, delete, change password, etc.), but for some reason the email alerts haven't been working when the exact same settings work for EF. \n. I'm pretty sure that it isn't smtp config. I just cut and pasted that section of the config file from the EF sample (in which notifications were working) to the fixed mongo sample. I'll watch the output window as I debug and see if that gives me any insight. Thanks for the help. And thanks for making this library. It is wonderful to be able to separate out the security logic from the MVC application. \n. Ok. So this is an extremely odd situation. \nI run the NoSql sample with Mongo and my config setting. It doesn't send the emails. Then I run the SingleTenant sample with my config settings and it works. Then I run the NoSql sample again without changing a thing and its email then works. I closed all instances of Visual Studio and was able to replicate this behavior. \nIn the initial run I got this on the output:\nMembershipReboot Verbose: 0 : [UserAccountService.CreateAccount] Email was provided, so creating email verification request\nMembershipReboot Information: 0 : [UserAccountService.EmailExistsOtherThan] called for account id: 4624ace2-11b5-44a4-b619-a457f576a500, email; [MyEmailAddress]\n'iisexpress.exe' (CLR v4.0.30319: /LM/W3SVC/4/ROOT-1-130326495565190172): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_32\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'iisexpress.exe' (CLR v4.0.30319: /LM/W3SVC/4/ROOT-1-130326495565190172): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0__31bf3856ad364e35\\WindowsBase.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\nMembershipReboot Information: 0 : [UserAccountService.UsernameExists] called for tenant: default, username; Sobieck00\nMembershipReboot Verbose: 0 : [UserAccountService.UsernameExists] applying default tenant\nMembershipReboot Verbose: 0 : [UserAccountService.CreateAccount] success\nThe iisexpress.exe line in the output doesn't look right. Do you know what could be causing this?\n. To be clear, I stopped debugging after each test and left VS open. \n. Will do. \n. Thank you! Works at my local machine. I don't think I would have ever thought to change the config file like that. \n. No problem. Let me know if you need things like that fixed with Mongo. I'll have a look at the updated sample. \n. Thank you!\n. Thanks for the reply Brock. \nWhere in that code am I using different types? In the constructor I instantiate a UserAccountService<HierarchicalUserAccount> and then use that instance in the CreateAccount method. \nMy config looks like this:\n```\n  public static MembershipRebootConfiguration Create()\n    {\n    var config = new MembershipRebootConfiguration<HierarchicalUserAccount> {RequireAccountVerification = false}; \n}\n\n```\nThen with Ninject I do this:\nvar config = MembershipRebootConfig.Create();\nBind<MembershipRebootConfiguration<HierarchicalUserAccount>>().ToConstant(config);\n. Here is what I'm getting this morning. \n```\nSystem.AccessViolationException was unhandled\n_HResult=-2147467261\n_message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nHResult=-2147467261\nIsTransient=false\nMessage=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nSource=Manager.MembershipProvider\nStackTrace:\n   at Manager.MembershipProvider.UserManagement.Implementation.RegistrationServices.CreateAccount(RegistrationInputModelDto model) in f:\\Projects\\Manager\\Manager.Maintenance\\Manager.MembershipProvider\\UserManagement\\Implementation\\RegistrationServices.cs:line 25\n   at Manager.MessageHandlers.Commands.Membership.Implementation.RegisterNewUserHandler.Handle(Message message) in f:\\Projects\\Manager\\Manager.Maintenance\\Manager.MessageHandlers\\Commands\\Membership\\Implementation\\RegisterNewUserHandler.cs:line 25\n   at Manager.MessageHandlers.HostAndFactories.Host.OnMessageReceived(Message message) in f:\\Projects\\Manager\\Manager.Maintenance\\Manager.MessageHandlers\\HostAndFactories\\Host.cs:line 66\n   at Manager.ServiceBusMessaging.Azure.Messaging.Implementation.AzureQueueClient.OnMessageReceived(BrokeredMessage brokeredMessage) in f:\\Projects\\Manager\\Manager.Maintenance\\Manager.ServiceBusMessaging\\Azure\\Messaging\\Implementation\\AzureQueueClient.cs:line 58\n   at Microsoft.ServiceBus.Messaging.MessageReceivePump.SyncCallbackAsyncResult.ExecuteSyncCallback(Object state)\n   at Microsoft.ServiceBus.Common.IOThreadScheduler.ScheduledOverlapped.IOCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped nativeOverlappedCallback)\n   at Microsoft.ServiceBus.Common.Fx.IOCompletionThunk.UnhandledExceptionFrame(UInt32 error, UInt32 bytesRead, NativeOverlapped nativeOverlapped)\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)\nInnerException: \n```\nIt has only happened when I emulate the worker role in azure, and only then when I try to register a new member. Logins seem to work whatever the execution environment. \n. Yep, that is in my implementation of MR. The exception is thrown when this code is executed in that class. \nvar result = _userAccountService.CreateAccount(model.Username, model.Password, model.Email);\n. I'm pretty positive that it is an issue within the azure emulator. I'm going to see if it works deployed on the server. Thanks for your help. \n. Will do. If it doesn't work on the server I'll be in trouble and I'm more likely to follow up on that particular bug. But if it ends up working in Azure, I'm just going to run that backend worker process in a console application on my dev machine for integration testing. I've already made that application and it is working great.\nThanks for all the work you do on this library. It is really fantastic.\nFrom: Brock Allenmailto:notifications@github.com\nSent: ?Thursday?, ?March? ?6?, ?2014 ?12?:?55? ?PM\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: Thomas Anderson Sobieckmailto:Thomas@Sobieck.com\nOk, keep me posted. Thanks.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/277#issuecomment-36922660.\n. Mongo.\nThomas Anderson Sobieck\n\nFrom: Brock Allenmailto:notifications@github.com\nSent: \u00fd3/\u00fd16/\u00fd2014 9:54\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: Thomas Anderson Sobieckmailto:Thomas@Sobieck.com\nSubject: Re: [BrockAllen.MembershipReboot] Nonunique email addresses being accepted (#288)\nWhat database are you using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/288#issuecomment-37759108.\n. I'm working on this project to learn Mongo, so I'm a bit of a novice. But I think it would turn it into a LINQ to Objects query. From what I'm reading, bizarrely, case insensitive queries are not supported in Mongo v2.x. They are planned it in the next release(https://jira.mongodb.org/browse/SERVER-90).\nOn Stackoverflow it seems that the preferred method is to use a regex to query. However, this doesn't seem to use an index and will trigger a full scan of the table. \nThis is from the C# Driver tutorial you can do something like this(http://docs.mongodb.org/ecosystem/tutorial/use-linq-queries-with-csharp-driver/) :\ncollection.AsQueryable<C>().Where(c => c.S.ToLower() == \"abc\");\nAnd that queries the db with a case insensitive regex. I'm not sure if it would do a table scan though. \nOr it is suggested that you can make a normalized field to query against and an original format field to return to users.  So, as a bit of a hack, I think I'm going to just normalize usernames and email addresses to lowercase and create claims with the original cases to display to users. \n. Honestly, I'm not entirely sure what to do. I think your suggestion might be worth a go just to see how Mongo behaves. But if that doesn't work I'm sure there is a solution out there somewhere. This can't be a unique issue to MR. \nI'll have a look around, do some experiments and let you know what I've come up with in a couple days.\n. That should work for me. Thanks! \n. Yeah, I was watching the previous thread to see if it fixed my problem. I'm a bit of a stalker. \nThere are two. \n201403032007363_v7_InitialCreate\nand\n201403032007511_v7_Indexes\n. Nevermind, it looks like it is working now. \n. I have the three indexes now. I must have not deleted all the tables in the db before running my first round of tests. Thanks!\n. Great. I'm trying to replicate the behavior in a branch of MR. I'll let you know if I get something definitive. \n. Good Morning. I just solved my problem. \nI'm now injecting a new DefaultUserAccountRepository in each thread like this:\nBind<IUserAccountRepository<RelationalUserAccount>>().To<DefaultUserAccountRepository>().InThreadScope();\nFrom what I gather, ninject was injecting the same instance of DefaultUserAccountRepository which in turn was caching the query for the password hash which was returning stale data. By forcing ninject to create a new object for each thread I was able to bypass the cache. \nI'm going to try to replicate the situation with a test that is a little less complex than my tests later today. I'll let you know how it goes.\n. I'm having a hard time getting this to manifest itself outside my original code. So, I'm just going to give up and accept the fact that my fix from this morning is about as good as it will get. Thanks for your help. \n. Cool. Thanks for the quick response. That answered my question.\nThomas Anderson Sobieck\n\nFrom: Brock Allenmailto:notifications@github.com\nSent: \u00fd4/\u00fd23/\u00fd2014 13:50\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: Thomas Anderson Sobieckmailto:Thomas@Sobieck.com\nSubject: Re: [BrockAllen.MembershipReboot] Azure, addresses in emails (#343)\nThose URLs would want to be determined at runtime. That's what the OwinApplicationInformation and AspNetApplicationInformation classes are for -- they determine those URLs based on the live HTTP requests (since it's not available dynamically when an app starts up). The other option is to hard code the URLs and use some config-driven approach to choose different URLs.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/343#issuecomment-41199681.\n. ",
    "jamessdixon": "I want only the user accounts that are no verified.  I wrote this:\nint count;\n        String filter = \"Where IsAccountVerified=0\";\n        return query.Query(userAccountService.Configuration.DefaultTenant, filter, 0, 1000, out count);\nI am getting 0 records back.  What is the syntax of the filter?\n. ",
    "juanonsoftware": "I got the same problem today, but it's due to security issue, the port is not open to Gmail on my environment :)\n. ",
    "aminjam": "Agreed. Thank you. https://github.com/NancyFx/Nancy/issues/1391\n. Yes, a Bearer token sample with OWIN would be very helpful. \n. I was able to fix this, by returning the ClaimsPrincipal.Current and modifying the OwinAuthenticationService.cs. I hope that was a correct change.\nprotected override ClaimsPrincipal GetCurentPrincipal()\n    {\n        try\n        {\n            var cp = context.Request.User as ClaimsPrincipal;\n            if (cp == null) cp = new ClaimsPrincipal(context.Request.User);\n            return cp;\n        }\n        catch (Exception exception)\n        {\n            return ClaimsPrincipal.Current;\n        }\n    }\n. I have looked at your post http://brockallen.com/2014/01/09/a-primer-on-external-login-providers-social-logins-with-owinkatana-authentication-middleware/ in regards to the external login providers, but I couldn't get it to work with membership reboot. Do you happen to have any example for that?\n. Thanks, I now see what I was missing. A follow up question, with social logins AuthenticationService is creating an account without password. Is there a way to generate a JWT token like this example https://github.com/brockallen/BrockAllen.MembershipReboot/issues/222. Assuming we don't have to verify email address, I would like to provide the user with a JWT Bearer token after they login with FB. I am using the MR as a service, and my client web app is configured to only access Bearer Authorization Header. I got around that by modifying the AuthencticationService to generate a default password, and use https://github.com/brockallen/BrockAllen.MembershipReboot/commit/023c631992c000af24993a646cf96be87375caa1 example you provided, but I don't think that's the best practice.\n. ",
    "rlvandaveer": "I took the src for BrockAllen.MembershipReboot.WebHost v5 and compiled it and referenced it instead of the NuGet package of the same version. This resolved the issue.\n. ",
    "echo1": "Unfortunately no thought on this but I would try to separate the configuration of the middleware p\u00eepeline from the request workflow. I don't know yet how to achieve this but I like the OwinMiddleware interface and I think it is a very good way to separate the configuration (using the constructor interface) from the execution (the Invoke method that takes an IOwinContext )\nI am still learning OWin and MembershipReboot\n. Cool, I have started to think about it myself too. I think that we should may be adding a callback method to the MembershipRebootConfiguration object that will be dependant of the hosting (asp.net , owin, .... ) that will returns the current Url . A bit more work would be to model  a simpler environment along with the Owin interface (which is just a dictionary). Going forward the later would probably grows simpler than add extra callback \n. I do think it is much better too. I like the fact that there is not much impact on the rest of the code. \n. ",
    "JeremyCade": "My understanding from the EF implementation was that the Id property was marked as the primary key?\n. ",
    "rklachko": "Found it, thanks!\nDeleted the branch.\n. Thanks, now I see the Wiki answers much of my questions: https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration\n. I searched the vs gallery but couldn't find any. Should the work done in the Thinktecture.IdentityManager or Thinktecture.IdentityServer.v3 be used as a reference?\n. ",
    "jgilm": "Although not the original requester, this solution would work for me.\n. ",
    "bitzblitz": "Yea, I think that would work.\nSent from my Windows Phone\n\nFrom: Brock Allenmailto:notifications@github.com\nSent: \u200e2014-\u200e01-\u200e23 3:43 PM\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: bitzblitzmailto:bitzblitz@live.com\nSubject: Re: [BrockAllen.MembershipReboot] UserAccount.ID should have a public set method. (#229)\nWhat if I alter the CreateAccount API to this signature:\nCreateAccount(string tenant, string username, string password, string email, Guid? id = null, DateTime? dateCreated = null)\nWill this support your import scenario?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/229#issuecomment-33166251\n. I eventually got this to work:\n```\n          @{\n      System.Security.Claims.ClaimsIdentity user = (System.Security.Claims.ClaimsIdentity)(User.Identity);\n\n      if(user.HasClaim(\"Users\",\"Edit\"))\n\n             {\n\n             <div class=\"form-group\">\n\n                   @Html.LabelFor(model => model.Claims, new {@class = \"control-label col-md-2\"})\n\n                   <div class=\"col-md-10\">\n\n                          @Html.ActionLink(\"Edit\",\"Index\",\"Claims\",new {id=Model.ID},null)\n\n                   </div>\n\n             </div>\n\n             }\n\n      }\n\n```\nwhat do you think of this approach?\nNext I have to tackle conditional menus in Sitemaps\u2026\nFrom: JellyMaster [mailto:notifications@github.com] \nSent: Wednesday, February 26, 2014 2:51 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: bitzblitz\nSubject: Re: [BrockAllen.MembershipReboot] Any way to use claims to control how MVC Views are generated? (#262)\nHi blitzblitz this is the code I have produced so far and it seems to be working ok for me at the moment (still testing it though)\n```\n    public static class ClaimsToRazorParser\n    {\n    public static MvcHtmlString ClaimToString(this HtmlHelper helper,string type )\n    {\nstring returnItem = string.Empty;\n\n\n\nList<Claim> claims = GetClaims(helper);\n\nif(claims == null || claims.Count == 0)\n{\n    throw new InvalidProgramException(\"There was a problem with the user passed in. It has no claims \"); \n}\nelse\n{\n    Claim claim = claims.FirstOrDefault(c => c.Type == type);\n\n    if(claim != null)\n    {\n        returnItem = claim.Value;\n    }\n\n}\n\nMvcHtmlString returnString = new MvcHtmlString(returnItem);\n\n\nreturn returnString;\n\n}\nprivate static List GetClaims(HtmlHelper helper)\n{\nClaimsPrincipal principal = helper.ViewContext.HttpContext.User as ClaimsPrincipal;\nif (principal == null)\n{\n    throw new InvalidCastException(\"The current principal is not a claims principal.\");\n}\nList<Claim> returnList = new List<Claim>();\n\nreturnList = principal.Claims.ToList();\n\nreturn returnList;\n\n}\n```\n}\nThen to actually use it if you do something like this on your page \n@Html.ClaimToString(ClaimTypes.GivenName)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/brockallen/BrockAllen.MembershipReboot/issues/262#issuecomment-36168516 .  https://github.com/notifications/beacon/6438786__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwODk3NzA0NCwiZGF0YSI6eyJpZCI6MjY0NTk5MTJ9fQ==--7e64f805859e78834a6dbf9f591031135d56f068.gif \n. I eventually got this to work:\n```\n          @{\n      System.Security.Claims.ClaimsIdentity user = (System.Security.Claims.ClaimsIdentity)(User.Identity);\n\n      if(user.HasClaim(\"Users\",\"Edit\"))\n\n             {\n\n             <div class=\"form-group\">\n\n                   @Html.LabelFor(model => model.Claims, new {@class = \"control-label col-md-2\"})\n\n                   <div class=\"col-md-10\">\n\n                          @Html.ActionLink(\"Edit\",\"Index\",\"Claims\",new {id=Model.ID},null)\n\n                   </div>\n\n             </div>\n\n             }\n\n      }\n\n```\nFar from obvious. Now on to conditional navigation with Sitemap\u2026.\nFrom: Brock Allen [mailto:notifications@github.com] \nSent: Tuesday, February 25, 2014 8:34 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: bitzblitz\nSubject: Re: [BrockAllen.MembershipReboot] Any way to use claims to control how MVC Views are generated? (#262)\nYes, you simply branch in your razor code based upon the user's claims. Just downcast the User object to a ClaimsPrincipal and check the claims collection for what you're interested in.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/brockallen/BrockAllen.MembershipReboot/issues/262#issuecomment-36081379 .  https://github.com/notifications/beacon/6438786__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcwODkxMTIzNywiZGF0YSI6eyJpZCI6MjY0NTk5MTJ9fQ==--0e6616b9c9fb2ff9c9c1a85ddb37f59a8fd5da4d.gif \n. I have to agree with Brock on this one. Consider a distributed system where members may be created off-line or from sources other than a single server (i.e. multiple sign-in stations that accept new memberships off-line). Also the situation where your system has to import, export or synchronize membership information with other systems (databases) where a database generated key will not be unique across systems. A GUID is the best way to identify member entities.\n. I don't understand why this issue was closed. I too am importing legacy data and some users have put in @ characters, and possibly other symbols, in their usernames. I don't see how this affects the AuthenticateWithUsernameOrEmail functionality. Are you worried about one user using another user's email as a username? Even if this happens, the password should only match one of the accounts unless both users used the same password. On account creation you could still check for duplicates across both username and email if necessary.\nIn the end, it should still be configurable by the developer, I think.\n. Thanks - that was it. I replaced\n    public class DbContextUserAccount:QueryableUserAccountRepository, IDisposable\n        where Ctx:DbContext, new()\n        where TAccount:RelationalUserAccount\n        {\nwith:\n    public class DbContextUserAccount:QueryableUserAccountRepository, IDisposable\n        where Ctx:DbContext, new()\n        where TAccount:RelationalUserAccount\n        , RelationalLinkedAccountClaim\n        , RelationalPasswordResetSecret\n        , RelationalTwoFactorAuthToken\n        , RelationalUserCertificate>\n        {\nI missed that because I am fixing an application that was broken after updating MembershipReboot.\n. Correction: If the users does remember the old password, the e-mail WILL confirm (I must have tested with a password that had to be modified due to character content before).\nThere is still a problem if the user doesn't remember their old password.\n. I'm only worried about the ones with valid email for now. When these people go to login they can't use their password until their email is confirmed so they can click the reset password link on the login page. This works if they remember their old password, and i didn't have to modify the password to get past character filter.\nFor those with modified passwords or who forgot them, I'm not sure how to handle them.\nThere may be an issue with legacy passwords that don't meet the complexity requirements, but i still have to confirm this.\nSent from my Windows Phone\n\nFrom: Brock Allenmailto:notifications@github.com\nSent: \u200e2014-\u200e12-\u200e15 3:26 PM\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: bitzblitzmailto:bitzblitz@live.com\nSubject: Re: [BrockAllen.MembershipReboot] Resetting password for legacy users. (#471)\nSo you can't trust the email you currently have for them?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/471#issuecomment-67059369\n. When I create and account in MR 7.2 a key is created in Init with:\nkey = SetVerificationKey(account, VerificationKeyPurpose.VerifyAccount, state: account.Email);\nbut when the account is verified this is called:\nif (!IsVerificationKeyValid(account, VerificationKeyPurpose.ChangeEmail, key))\nso the key is invalid.\nThis seems to be fixed in 8.2, so I\u2019m going to try using that version.\nSent from Windows Mail\nFrom: Brock Allen\nSent: \u200eFriday\u200e, \u200eMarch\u200e \u200e6\u200e, \u200e2015 \u200e8\u200e:\u200e37\u200e \u200eAM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: John Dubois\nYou need to provide more context to your question.\n\u2014\nReply to this email directly or view it on GitHub.\n. Integrated the 8.2.1 package and tested account creation and email change. Both worked.\nSent from Windows Mail\nFrom: Brock Allen\nSent: \u200eFriday\u200e, \u200eMarch\u200e \u200e6\u200e, \u200e2015 \u200e11\u200e:\u200e56\u200e \u200eAM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: John Dubois\nYep, please check 8.2 and let me know how it goes.\n\u2014\nReply to this email directly or view it on GitHub.\n. Is there documentation on this or on getting the expiry time?\nSent from my Windows Phone\n\nFrom: Brock Allenmailto:notifications@github.com\nSent: \u200e2015-\u200e03-\u200e06 5:17 PM\nTo: brockallen/BrockAllen.MembershipRebootmailto:BrockAllen.MembershipReboot@noreply.github.com\nCc: bitzblitzmailto:bitzblitz@live.com\nSubject: Re: [BrockAllen.MembershipReboot] Expiry indicator in confirmation e-mails. (#506)\nYou can add this to the email messages -- just do your own formatter.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/506#issuecomment-77646599\n. ",
    "batkuip": "You can indeed specify the connection string for DbMigrator, however before it assigns this, it has to create the DbContext and it does this through reflection and it picks the default constructor, the default constructor specifies as default connection name and if this doesn't exist it blows up (before it gets to assign the connectionstring/name you've passed to the DbMigrator).  This is probably more an issue with EF though.  \nOne way around this is, is to subclass DbContext and change the default.  However this would mean you have to subclass Migrations as well because it's typed against a specific context. \nI've sort of gotten around it for now, by using the customized context you have outlined in one for samples (using  modelBuilder.ConfigureMembershipRebootUserAccounts).  This simply means I have to manage those migrations myself (which might get a bit tricky in a multi-tenant setup).\n. ",
    "kabongsteve": "I agree that such APIs are required.\nMy scenario is that we will have both internal users and external users (different tenants for each).\nThe internal useraccounts will be created by the administrator and they'll know and have verified these users and email addresses.\nSome external user types will also be created by the administrator, who can \"vouch\" for the validity of the user.\nAny external user who \"registers\" through the system should have to verify email/mobile, but those created by an internal admin should not.\nAn alternate scenario for me would to be able to set the requireAccountVerification on a tenant by tenant basis (other settings like allowAccountDeletion would also be useful on a tenant by tenant basis)\n. Using UsernamesUniqueAcrossTenants should potentially also mean EmailUniqueAcrossTenants, otherwise the AuthenticateWithUsernameorEmail is of no benefit.\nWithout Email being unique, you can't login via email to determine the appropriate Tenant.\nI have also tried validation with an EmailExists call, unfortunately I cannot call EmailExists without a tenant, so there is no built in methods do not support EmailUniqueAcrossTenants.\nThere seems to be no point to a MultiTenant scenario within a single Website\n. Hi Brock,\nThanks for the response.\nThe main reason I raised the issue is that there is inconsistent behaviour\nacross different methods.\nMethods exist where tenant is not supplied and when\nUsernamesUniqueAcrossTenants config is set, they behave differently and\ninconsistently.\nYou say above that \"It's always been by design that the application must\nsupply the tenant.\", but these methods don't follow that design.  And I\ndon't remember seeing any documentation explaining this key premise for\nMulti-Tenant operation, but now i understand it\nSo perhaps as an alternate for consistency with the above premise, when\nMultiTenant is true, the methods without tenant as a parameter should fail,\nor always use the DefaultTenant setting.\nOr perhaps these should be two different services or interfaces,\nSingleTenant and MultiTenant\nAs further background and explanation.\nMy assumption was that a Tenant could be used to define the type of user\nfor my application.  I have \"internal\" users, as well as 2 types of\nexternal in this instance.\nMuch of the development is to use separate Areas in an MVC5 app, so my\nassumption was that I could map the Tenant to an Area, so after login, i'd\nknow the tenant and redirect the user into the associated Area controllers.\nAnd on reviewing the code and seeing the examples and the use of the\nUsernamesUniqueAcrossTenants config setting, this scenario seemed possible,\nwith an Authenticate authenticating the user, and then letting me know the\nassociated tenant.\nTo some degree I also assumed that this config would also make Email's\nunique across Tenats as well.\nThis assumption then broken down with the AuthenticateWithEmailOrUsername\nand attempting to validate an email address as unique across all Tenants,\nas this is not a config option.\nI think in your scenarios, as part of a login process you'd possibly verify\nthat the users \"tenant\" matches the application tenant.\nTo me, in most cases, its irrelevant to users, what type of user that they\nare or what claims or sec, and thus shouldn't have to say, or use different\nlogin pages when they login to a system. Either of these options would be\nneed to to select the tenant.  Most security systems handle this internally.\nSo basically I was attempting to use the Tenant as just another Claimtype\nwhich i could use to determine application behaviour for the user, and this\nis not what it is for and my incorrect assumption.\nthanks\nSteve\nOn Fri, Feb 7, 2014 at 6:58 AM, Brock Allen notifications@github.comwrote:\n\nOk, I took some time to start looking into this issue. I guess I'm having\na problem with your premise. The UsernamesUniqueAcrossTenants setting is\nfor username, not email. So when a user is entering the email to\nauthenticate then the tenant is needed, since the configuration setting is\nfor username.\nIt also sounds like you're assuming that determining the tenant is somehow\nthe responsibility of MR, when I would disagree. It's always been by design\nthat the application must supply the tenant. The\nUsernameUniqueAcrossTenants is a slight exception, but its semantics do not\ncarry over into email.\nI also don't understand the comment \"There seems to be no point to a\nMultiTenant scenario within a single Website\". Again, I suspect this comes\nfrom a misunderstanding of some assumption.\nAnyway, let's start from your setup and requirements and what you're\ntrying to do. That way I have a better understand so I can try to help.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/241#issuecomment-34363929\n.\n. As you say, its about distinguishing different systems that happen to share\nan underlying service.\n\nIn regards to this, I don't have need for multi-tenacy\nOn Fri, Feb 7, 2014 at 9:41 AM, Brock Allen notifications@github.comwrote:\n\nAs for docs, I agree there are not a lot, but the wiki does have some.\nAs for the semantics of tenant, it is a means for distinguishing an\nidentity. \"bob\" from one tenant is a different identity from \"bob\" in a\ndifferent tenant -- they are not the same user. This is how pretty much any\nidentity system works (think of active directory at your company vs. active\ndirectory at my company).\nI do see your confusion about the inconsistency, but that's caused (I\nthink) by the exceptional nature of the UsernameUniqueAcrossTenants\nconfiguration. Modulo this setting, I think the tenant behavior is\nconsistent across all other APIs. And they do behave as you suggest -- if\nMultiTenant is true and the version of the API is called without a tenant,\nthen null is used and thus ultimately throws.\nBasically, if you're using multitenancy, then your app should always use\nthe APIs that accept a tenant. If you are not using multitenancy, then you\ncan use the APIs that do not have a tenant param. Perhaps this statement\nshould be added to the wiki.\nSo, given all of this, for your scenario do you still need multi-tenancy?\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/241#issuecomment-34383190\n.\n. \n",
    "nathanp812": "Thanks for the suggestion, I will will try that and see how I go.\nOn Mon, Jan 27, 2014 at 8:26 AM, Brock Allen notifications@github.comwrote:\n\nHmm, I might suggest adding a custom ICollection to your custom user\naccount class and then map this as a custom table in your own DbContext\nclass.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/232#issuecomment-33330961\n.\n. Ok, thanks, I actually downloaded that yesterday because I needed info on\nhow to set up a custom user and DbContext.\nI found the sample extremely useful to help me wrap my head around things.\n\nOn Mon, Jan 27, 2014 at 12:07 PM, Brock Allen notifications@github.comwrote:\n\nSee the customization sample for an example of building your own DbConetxt.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/232#issuecomment-33336411\n.\n. Yes, adding a custom collection worked.  Thanks @brockallen for the help.\n. \n",
    "rugaju": "Thank you so much. Ill give it a shot bit may take me a while since this is\nnew.\nOn Jan 26, 2014 3:28 PM, \"Brock Allen\" notifications@github.com wrote:\n\nYou can put this logic into your own custom ClaimsAuthorizationManager --\nthat's WIF's approach to decoupling the location where the authorization\ncheck needs to take place and the logic behind the authorization (which\nmight need to access a permissions database).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/233#issuecomment-33331012\n.\n. \n",
    "zsu": "I don't think the User.IsInRole and those delcarative role permission checks(like location in web.config) use the ClaimsAuthorizationManger.\n. ",
    "davidavc": "Thanks for the feedback.  I'll go with the sub-domain approach. \n. ",
    "gooozas": "Ah so.. Do you have some sample or some url for such case? Thank you.\n. ",
    "ankeshdave": "Thanks for a quick reply... \nI'll use a CustomSmtpMessageDelivery  class to handle email sending.\nAlso, I have one question which is not an issue so ill not ask it here so ill provide a link to Stackoverlflow and hope that you can shed some light on it...\nSorry... I forgot to paste the link to question\nhttp://stackoverflow.com/questions/21479247/mixed-mode-authentication-with-membershipreboot-and-asp-net-mvc\nThanks and Regards\nAnkesh\n. Sorry...  I forgot to paste the link to question \nhttp://stackoverflow.com/questions/21479247/mixed-mode-authentication-with-membershipreboot-and-asp-net-mvc\n. ",
    "Frank118": "That's great. Thank you for the quick reply.\n. Thank you for the fast reply!\n. Thank you for your reply, I'm using OWIN and have referenced the following three source projects from my MVC 5 project...\nBrockAllen.MembershipReboot\nBrockAllen.MembershipReboot.Owin\nBrockAllen.MembershipReboot.WebHost\nI've configured 'MembershipRebootConfiguration' and the 'Web.Config' but even in actions the 'Authorize' attribute isn't working...\n```\n    [Authorize]\n    public ActionResult Hello()\n    {\n        if (!User.Identity.IsAuthenticated) // IsAuthenticated is false????\n            return RedirectToAction(\"Index\", \"Home\", new { area = \"\" });\n    return View();\n}\n\n```\nAre there any additional Nuget packages I need such as BrockAllen.OAuth2 ?\nThank you for your help.\n. Thank you for your reply.\nI'm not referencing a MR.SystemWeb library or is this the 'WebHost' library?\nThere is no SAM configuration in the Web.Config file.\nThe 'Authorize' attribute comes from the 'System.Web.Mvc' namespace.\n. Sorry, I'm very confused, removing WebHost means this will no longer compile...\nvar appinfo = new AspNetApplicationInformation(\"MyTestApp\", \"Test Team\",\n                \"Account/SignIn\",\n                \"Account/ChangeEmail/Confirm/\",\n                \"Account/Join/Cancel/\",\n                \"Account/ResetPassword/Confirm/\");\nWhich was all working fine for joining and signing in?\nSo I guess I shouldn't be using OWIN.  Can you point me in the direction of some explanation of all the different types of implementation there are? \nThanks.\n. Thank you for your help and time.\n. I think some of my problems are that I've been using the 'NoSQL' sample as a guide (SystemWeb), as I wish to use SQL Server but without EF, and I'm also using SignalR which uses OWIN?\n. Thank you fro your reply. The user isn't logged in and the User.Identity.Name is empty.\n. I've got Fiddler and the browser appears to be sending the cookie...\nConnection: Keep-Alive\nCookie:_RequestVerificationToken_L1Nwb3RPbkRhdGluZw2=ScjGR9bJtQhE9hGBLdkyo_hrVcQrOG9ZpWPaAK0bK2bildJbKAMTmt3sNB3O8sqiYjkeG-mxV0BxaecUS5Cg0Y8Gw_yngS-N0vsyGrnW9UE1\n. No, my startup doesn't appear to be called.\n. Thank you for your help. I'll do some reading up.\n. Thank you for your reply.\nIs there a comparison somewhere of OWIN vs SAM and the pros and cons of each?\nOnce again, thank you for your time and help.\n. I think I've found my problems...\n```\n    private static void BuildAutofacContainer(IAppBuilder app, string authType)\n    {\n        var builder = new ContainerBuilder();\n    var config = CreateMembershipRebootConfiguration(app);\n\n    builder.RegisterInstance(config).As<MembershipRebootConfiguration>();\n\n    builder.RegisterType<UserAccountRepository>()\n        .As<IUserAccountRepository<ApplicationUser>>()\n        //.As<IUserAccountQuery>()\n        .InstancePerLifetimeScope()\n        .WithParameter(\"connectionString\", ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString);\n\n    builder.RegisterType<UserAccountService<ApplicationUser>>()\n        .AsSelf()\n        .InstancePerLifetimeScope(); ;\n\n    builder.RegisterType<UserAccountService>().OnActivating(e =>\n    {\n        var owin = e.Context.Resolve<IOwinContext>();\n        var debugging = false;\n        #if DEBUG\n        debugging = true;\n        #endif\n        e.Instance.ConfigureTwoFactorAuthenticationCookies(owin.Environment, debugging);\n    })\n    .AsSelf()\n    .InstancePerLifetimeScope();\n\n    builder.Register(ctx =>\n    {\n        var owin = ctx.Resolve<IOwinContext>();\n        return new OwinAuthenticationService<ApplicationUser>(authType, ctx.Resolve<UserAccountService<ApplicationUser>>(), owin.Environment);\n    })\n    .As<AuthenticationService<ApplicationUser>>()\n    .InstancePerLifetimeScope();\n\n    builder.Register(ctx=>HttpContext.Current.GetOwinContext()).As<IOwinContext>();\n\n    builder.RegisterControllers(typeof(Startup).Assembly);\n\n    var container = builder.Build();\n\n    System.Web.Mvc.DependencyResolver.SetResolver(new AutofacDependencyResolver(container));\n}\n\n```\n. Thank you for your help.\n. Breakpoints work fine in startup when IIS Express is used.\n. Getting closer to finding the problem. In my project the 'public class UserAccountService' class is created multiple times, but I'm struggling to see what's wrong with my AutoFac configuration...\n```\n        var config = CreateMembershipRebootConfiguration(app);\n    builder.RegisterInstance(config).As<MembershipRebootConfiguration>();\n\n    builder.RegisterType<UserAccountRepository>()\n        .As<IUserAccountRepository<ApplicationUser>>()\n        //.As<IUserAccountQuery>()\n        .InstancePerLifetimeScope()\n        .WithParameter(\"connectionString\", ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString);\n\n    builder.RegisterType<UserAccountService<ApplicationUser>>().OnActivating(e =>\n    {\n        var owin = e.Context.Resolve<IOwinContext>();\n        var debugging = false;\n        #if DEBUG\n        debugging = true;\n        #endif\n        e.Instance.ConfigureTwoFactorAuthenticationCookies(owin.Environment, debugging);\n    })\n    .AsSelf()\n    .InstancePerLifetimeScope();\n\n```\n. Found the problem!\n. When the EmailAccountEventsHandler etc are created, I forgot to append my 'TAccount'!\n. ",
    "jenkinei": "That makes sense. Thanks for the quick response!\n. ",
    "julianpaulozzi": "And how would that be? I wish I could contribute.\n. Ok thanks\n. I believe that something with 'Katana middleware' ou something using the existing project itself replacing 'UserAccount' area where: \n- 'Controllers' to 'ApiControllers'; \n- 'cshtml views' to 'html templates with AngularJS' where the services is manipulated using the AngularJS services '$resorce' or '$http'; \nWhere can I find more difficult to use something like 'ValidateAntiForgeryToken' together with WebApi  services from javascriptn client, or any other way to keep something safe like the same.\nSomething that actually manipulate UserAccount data securely using the 'SPA' structure of AngularJS.\n. I observed this approach, however the UserClaims (table created by default) data is not used to populate the collection after authentication by default?\n. Got the same error we ended up here:  https://github.com/thinktecture/Thinktecture.IdentityManager/issues/11\n. In fact that was the problem. What is the role of 'isContextOwner'?\n. You created a custom DbContextUserAccountRepository to set this. If yes you set use a custom repository in UserManager Ctor ou binding in IoC?\n. His mistake is not what I thought. UserManager is something specific in Thinktecture.IdentityManager project where I got my solved error.\n. I will not try to hijack the problem again.\nThe problem was solved after adding the RegisterUserAccountChildTablesForDelete.\nIn addition:\ncontext.Configuration.LazyLoadingEnabled = true;\ncontext.Configuration.ProxyCreationEnabled = true;\n. Yes, just that. So did not know that was possible. Sorry to trouble you, where configure it?\n. Yes, I felt oblivious to not have seen it in the Ctor. Thanks.\n. And this would go in \"Client\" to \"IdentityServerServiceFactory\"?\nAnother thing I noticed is that when authenticating so is not called my ClaimsTransformer. More there is nothing there that can cause lack for now.\n. At exactly this, the guid is in \"sub\", and the code below does not seem to affect anything this.\nJwtSecurityTokenHandler.InboundClaimTypeMap = new Dictionary<string, string>\n{\n    { Thinktecture.IdentityManager.Constants.ClaimTypes.Subject, System.Security.Claims.ClaimTypes.NameIdentifier }\n};\nAuthentication with \"UseOpenIdConnectAuthentication\" exposes the \"Notifications\" that could use to transform a claim, however is not the case as the \"UseIdentityServerBearerTokenAuthentication\" does not.\n. Yes this is a minor problem. \nBesides this claim, I use other claims (not mapped in this case) of \"Principal\" (populated from claims transformer) in some algorithms that can be problematic.\nAnyway I am studying the case.\nThank you for your attention.\n. ",
    "lgoudriaan": "would it be possible to add globalization with resx files? \nps. I can translate them in dutch\n. ah sorry, I forgot to mention that i have AllowAccountDeletion set on false\n. Ok I found it, I was doing something wrong.\nI had this in my databasecontext: \nVB\nmodelBuilder.Conventions.Remove(Of modelConfiguration.Conventions.OneToManyCascadeDeleteConvention)()\nSorry.\n. No, sorry I haven't looked in it yet. \n. I finally had time to look into this.\nI found out that the project uses the Satellite Package Approach and those packages aren't released in NuGet.\n@brockallen can you publish these packages? or maybe switch to the Single Package Approach it wil only add 10Kb for each language\n. @jonbarthol Did you use the NuGet packages?\n. ",
    "HaJoB": "May be I don't understand EF correctly, but from my understanding enabling LazyLoading does not mean to disable EF.\nThe Problem is not the repository, the Problem in the HasClaim-function that cannot handle LazyLoading because the Claims-property is not virtual. It Returns the ClaimsCollection which is virtual but Claims itself is not and cannot be virtual.\n. Sorry, but I don't understand. The Problem does not exist when I disable LazyLoading but only when I enable it.\n. Thank you. Turning Proxy creation on solves the Problem.\n. You could create a 'WorkContext' where you put in all necessary information at the beginning of a request. Then you could either use a BaseControler where you add the information to the ViewData or you populate the ViewModel for the view directly.\n. @JellyMaster \nIs it possible to get a fork or copy from your version?\n. The data layer is not important for me as I'm using EF, but you have a nice front end. I'm not telerik licenced. I see, it would be quite difficult. \n. Sorry, I didn't finished my post. Now it is updated.\n. I understand, but then the user could already get a validation message when he wants to reset the password. (similar as when he try to resent the username) Now he don't get any information that he cannot reset his password.\nThe used email could not be used again. The created account would be useless. How this account could be deleted? How the admin even could know about that this account is dead?\nI think that the user should receive the following when he request a password reset and his email is not verified:\n1. validation message that a password reset is not possible and he will get an email to delete this account to be able to create a new one\n2. send him an email where he can delete this account.\nThis would grant the user the possibility to delete his account and create a new one using his originally email. If there was a wrong email provided (like a typo) the unauthorized recipient of that email could only delete the (incorrect) account, but does not have access.\n. Many Login-Systems have the functions:\n1. forgot Password\n2. forgot Username\nThe forgot password-function would trigger reset password. If the email is not verified the validation could give the information to the user that a password reset is not possible if the email is not verified and that he would need the password to verify the email. He will get a email with which he can either verify his email (if he remember the password) or he can delete his account and create a new one.\n. Why not? The account anyway is faulty (wrong email). What is the alternative? We could work with security questions to reset the password, but if the email is incorrect it will not help. If the email cannot be verified it is insecure and cannot be used. An alternative is just to inform the site admin about the problem and request help.\n. CustomizationsSample \n. Isn't it now possible to delete BrockAllen.MembershipReboot / samples / CustomizationsSample / CustomizationsSample / Areas / UserAccount / Views / Register / Confirm.cshtml ?\n. look at BrockAllen.MembershipReboot / samples / CustomizationsSample / CustomizationsSample / Customizations.cs\nThere are a vew funtions using the table...\n. this shows the extensibility point of being notified of account activity\nlook at BrockAllen.MembershipReboot / samples / CustomizationsSample / CustomizationsSample / Customizations.cs\n. You can look in the BrockAllen.MembershipReboot / samples / CustomizationsSample / CustomizationsSample / Customizations.cs how to map the custom claims.\n. ",
    "christianacca": "The existing code in SignInWithLinkedAccount that passes null to the createaccount method fails with a validation check(s) later on in the execution path.\nSo I guessed that the existing code hadn't yet been completed. So I filled\nin the missing password with the implementation in the pull request.\nWhat you seem to suggest is that the code meant to work with the null\nsupplied by SignInWithLinkedAccount. If that is the case then I think there's \na bug because it doesn't work. The problem is very easy to reproduce in\nthe single tenant sample - just try logging in with google without first\ncreating a local account.\nChristian\nOn 28 Feb 2014 17:29, \"Brock Allen\" notifications@github.com wrote:\n\nHow is this more useful than having a blank password to indicate that\nthere is no password?\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/266#issuecomment-36374201\n.\n. Of course I will do that this morning\nOn 2 Mar 2014 23:27, \"Brock Allen\" notifications@github.com wrote:\nOk, I went back and tried to repo and was unable to. Can you provide me\nwith a callstack and/or a tracelog? Any additional settings you have\nconfigured on the MR Configuration?\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/266#issuecomment-36471677\n.\n. OK. I think I must have been smoking something. I can't reproduce the problem!\n\nActually, in hindsight it was combination of doing a code review and seeing password validation, me thinking - that null looks problematic. I then \"backed up\" my assumption by being able to provoke an error in SingleTenant solution when logging in with an external account without first creating a local account - grrr.\nQuestion: Is it possible now or in the future to login to a local account with a null password without going through the external identity provider? That would be the only motivation I can give to want to be able to auto-gen a user with an actual password.\n. Just feels more secure to have a password on disk!\n. Or at least to have the option to always have one...\n. Nope\n. Let me know what you're looking at:\n- The SHA of the github commit\n- The file that you are seeing ProviderAccountID being set\n- The line number\nHopefully the above will remove any ambiguity in communication.\n. That would be just my luck! Again I'll check this morning.\nOn 3 Mar 2014 00:43, \"Brock Allen\" notifications@github.com wrote:\n\nHmm, I wonder if you're on an old branch of the code since this feature\nalso exists in the master branch.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/268#issuecomment-36473814\n.\n. Here's what my local cloned version of the MembershipReboot fork. Notice that my changes are commits on top of your commits (except for the one you did last night):\n\n\n. Oh dear I managed to close the pull request by mistake!\n. Brock, what is the name of the Command that implements the feature in the code base? That way I can look out for the code.\n. I was thinking the same thing but hit a problem. In summary waiting\nfor SignInWithLinkedAccount to complete before populating custom\nUserAccount properties ends up being to late.\nHere's the current order of significant events:\n1. SignInWithLinkedAccount creates an account\n2. calls SignIn\n3. SignIn gathers together all the claims which include claims returned by\nMapClaimsFromAccount command handlers\n4. my handler for MapClaimsFromAccount sees that the custom UserAccount\nproperties are not populated so does not return it's claims\n5. SignIn issues a token containing the claims it has gathered\nSo basically the token being issued does not contain claims\nMapClaimsFromAccount would ordinarily return.\nIf, on the other hand, the UserAccount is populated before step 2 by\nexecuting the handler to the (new) MapClaimsToAccount, then all is well -\nMapClaimsFromAccount will see the now populated custom UserAccount\nproperties and return it's claims.\nDoes that make sense? Maybe there is a better way to solve the problem?\nChristian\nOn Mon, Mar 3, 2014 at 3:56 PM, Brock Allen notifications@github.comwrote:\n\nThe other thing (now that I'm thinking about this) is that are you sure\nyou want to blindly map claims from an external provider into MR's primary\nclaims table? IOW, the external claims are already stored and can be issued\nat login via the MapClaimsFromAccount command, so there might not be the\nneed to have a MapClaimsToAccount.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/268#issuecomment-36523813\n.\n. Here's the code flow (starting in the external system)\n1. The external system is responsible for transforming a WindowsPrincipal into a principal with a set of claims. It then issues a SAM token for this transformed principal.\n2. Back in the main website, the principal above is available by virtual of the incoming SAM token. This principal represents the external identity which now needs to be linked to a local account.\n3. A call is made to SignInWithLinkedAccount (creates the local account, links the external identity, and issues a token with a set of claims derived from the UserAccount).\n4. The new command MapClaimsToAccount in my pull request is responsible for populating custom properties on the UserAccount. This command runs inside of SignInWithLinkedAccount just after the UserAccount is created and before the call to IssueToken.\n\nSo without the new command it seems like I would need to throw away and write my own SignInWithLinkedAccount method. I get nervous about introducing home grown code for a number of reasons.\n. Cool, thanks for that Brock\n. OK, makes sense. Glad to hear it's one of the optional things. My use case is having to deal with Windows Authenticated users where the name claim ideally would be include spaces.\n. Yeah, I guess so, then again I think it's personal taste - I'm so used to Id that ID looks ugly ;-)\nThe main pain point I think is the burden on reflection based code. In some ways the identity property shouldn't be \"hard coded\" in conventions, but I often find that is the case.\n. Oh BTW, am I reading things correctly - the ID property has been changed to Key in that branch you mentioned?\n. OK\n. ... pun not intended!\n. How about this for ugliness:iD\nThat's how I have to refer to the ID properties in my javascript application. \nJSON serialization conventions in Web API are pretty much applied as global conventions so that's what I get when the serializer is configured to use camel casing.\nJust saying...\n. I actually laughed out loud... then I remembered the code changes I'm going to have to make to conventions in a dozen places... thanks for bringing a little cheer into the day ;-)\n. Brock, do you have an approx ETA for the branch where you remove the Int classes?\n. I ended up using a custom claim - \"DisplayName\". I derived the value of this custom claim from the FirstName + LastName properties I already store on a custom UserAccount subclass.\nI used a custom MapClaimsFromAccount ICommandHandler to ensure this custom claim is added to the claims collection when the UserAccount is loaded from the database.\nFrom memory I went down the custom claim route because I think I ran into conflicts when I used the standard Name claim.\nChristian\n. I'll have a look at testing against allowable windows AD account names.\nProbably tomorrow.\nC\nOn 1 Apr 2014 03:42, \"Brock Allen\" notifications@github.com wrote:\n\nOk guys -- I'm sort of coming around on this issue. I ran into a scenario\nwhere I needed/wanted to allow spaces and periods. I pushed up a branch to\nprototype this. Any feedback welcome:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/tree/username_validation\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/284#issuecomment-39165578\n.\n. Ok, I've added a call to RegisterUserAccountChildTablesForDelete in the ctor of my custom DbContext. However the same problem remains.\n\nStepping through the code in the debugger, I can see that RegisterUserAccountChildTablesForDelete is watching for additions to the DbSet. When an TAccount instance is added, an event handler is wired up to the LinkedAccountClaimCollection of this instance. This handler in turn  fires whenever a LinkedAccountClaim is removed from the EntityCollection.\nProblem is that when the UserAccount is fetched from the database, the proxy that you get back has its LinkedAccountClaimCollection property set to null.\nThis means the event handler for listening to EntityCollection changes are not getting wired up and hence the logic for flagging the DdContext.Entry as EntityState.Deleted is not running.\nC\n. I have a custom UserAccount that inherits from RelationalUserAccount and a custom DbContext but the rest of the classes (eg LinkedAccountClaim) are standard.\nI'll was going to try to reproduce the problem on the CustomizationsSample but this doesn't have the entry point for logging in using an external account.\nI'll try adapting SingleTenant sample with a custom UserAccount and see what happens.\n. Right, the reason for the collections being null was because one of the non-navigation properties on my custom UserAccount was not virtual (collection properties were virtual BTW). \nApparently this causes EF to generate lazy loading proxies and NOT change tracking proxies. Only change tracking proxies have the collection initialized to a non-null value. For more info: http://msdn.microsoft.com/en-us/library/vstudio/dd468057(v=vs.100).aspx\nAnyway, mystery solved.\nChristian\n. On balance I think there's more benefit for calling SignInWithLinkedAccount and just working around the one assumption my scenario doesn't like. Maybe if alignment of assumptions drift further I'll roll my own.\nThanks\n. Yup got a scenario where null is failure the PasswordComplexityValidator check. I'm 99% confident that it's not just my setup this time!\nTo reproduce the problem in the SingleTenant sample:\n1. Modify MembershipRebootConfiguration.Create method, adding the line:\n    config.ConfigurePasswordComplexity();\n2. Delete any existing MR db\n3. Configure MR to NOT requireAccountVerification (I think this is non-essential, just makes the repro smaller)\n4. Login with an external identity provider\n5. Notice that you are prompted with the message in red \"Password is required.5\n. I was thinking of creating a custom IValidator that stores a dictionary of PasswordComplexityValidator's keyed by AuthenticationType. In my validator I could inspect ClaimsPrincipal.Current.Identity.AuthenticationType to pick the PasswordComplexityValidator to delegate to.\nThat doesn't work of course because that would mean ClaimsPrincipal.Current being already considered authenticated. This in turn would cause SignInWithLinkedAccount to throw an exception as explained here: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/292\n. Cool\n. So I've come up with a workaround. \nThe essence of the workaround is to ensure that RegisterUserAccountChildTablesForDelete isn't the first block of code that triggers the DropCreateDatabaseIfModelChanges to run. This then avoids the code chain that ends with the exception being thrown when running a linq query in the MVC controller.\nI still wanted the call to RegisterUserAccountChildTablesForDelete to happen any time that a DbContext is spun up for use by the MembershipReboot library.\nSo I have wired up DI container (Castle Windsor in my case) to create a DbContext that is dedicated for use by the MR library. Only this specific instance calls RegisterUserAccountChildTablesForDelete.\nHere's the registration code for your interest:\n```\n        container.Register(\n            Component.For()\n                     .Named(\"DbContext.MR\")\n                     .OnCreate(context => context.RegisterUserAccountChildTablesForDelete())\n                     .Properties(PropertyFilter.IgnoreAll)\n                     .LifestylePerWebRequest());\n    container.Register(\n        Component.For<IUserAccountRepository<Series5User>, IUserAccountQuery>()\n                 .ImplementedBy<UserRepository>()\n                 .DependsOn(Dependency.OnComponent(\"db\", \"DbContext.MR\"))\n                 .LifestylePerWebRequest());\n\n```\n. The stack trace in that workitem looks identical, at the top 7 or so frames.\nThat one got me scratching my head for hours, good to see a fix for it.\n. Nice one\n. Yup that fixed it\n. Also shouldn't the event handler wired up by RegisterUserAccountChildTablesForDelete be unregistered when the DbContext is disposed?\n. Glad to help out :-)\nOn 18 Mar 2014 20:19, \"Brock Allen\" notifications@github.com wrote:\n\nMeh, this is good enough I guess. Thx :)\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/296#issuecomment-37982443\n.\n. The other thing thinking about this is that... you could always go and\nwrite your own repository implementation, right? And then in your\nimplementation you could follow the UoW pattern and I don't think anything\nin the UserAccountService would change or break.\n\nBack in a very old version of MR I did have a \"SaveChanges\" API (in\naddition to Add/Update/Delete) on the repository interface, but now that I\nrecall I think I changed it to support this style (if it was desired).\nSo much like the oddball logic in the AuthorizationService for external\naccount -- you can take it or leave it, same for the\nDefaultUserAccountRepository implementation.\nSo in short, if I'm not mistaken, with a custom repository you can achieve\nUoW.\n\nReply to this email directly or view it on GitHub.\n. Nope that was me messing up on my mobile.\nGot things to debate but want to look at the code before creating just\nnoise!\nC\nOn 20 Mar 2014 15:57, \"Brock Allen\" notifications@github.com wrote:\n\n@christianacca https://github.com/christianacca eh? seem to have missed\nyour reply.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/298#issuecomment-38184832\n.\n. You right. doing a spot of procrastination which is no good at all.\n\nDidn't think about creating a custom Repository that would not call SaveChanges on the DbContext, but instead leave that responsibility to the consumer of the MR library - that would work.\nThis idea would be even easier to implement if DbContextUserAccountRepository implemented a protected SaveChanges method that merely delegates straight to calling DbContext.SaveChanges. That way a custom Repository could have the convenience of inheriting DbContextUserAccountRepository code while overriding the protected SaveChanges making it a noop method.\nWhat do you think? I can send a pull request for this.\nC\n. Yup that's exactly what I was thinking :-)\n. FYI, here's what I ended up coding to implement Unit Of Work / Transactions\nConsumer code example:\nSeries5User account =\n_repository.WithinTransaction(() =>\n{\n    account = _accountService.CreateAccount(model.Username, model.Password, model.Email);\n    if (model.Claims.Count > 0)\n    {\n        _accountService.AddClaims(account.ID, model.Claims.Select(c => c.ToUserClaim()).ToArray());\n    }\n    return account;\n});\nreturn Created(\"api/Series5Users\", account.ID);\nImplementation:\n```\npublic interface ITransactionalUserRepository : IUserAccountRepository where T : UserAccount\n{\n    void BeginTransaction();\n    void CommitTransaction();\n    void RollbackTransaction();\n}\npublic static class TransactionalUserRepositoryExts\n{\n    public static TResult WithinTransaction(this ITransactionalUserRepository repository, Func action) where T : UserAccount\n    {\n        repository.BeginTransaction();\n        try\n        {\n            TResult result = action();\n            repository.CommitTransaction();\n            return result;\n        }\n        catch (Exception)\n        {\n            repository.RollbackTransaction();\n            throw;\n        }\n    }\n}\npublic class UserRepository : DbContextUserAccountRepository, ITransactionalUserRepository, IDisposable\n{\n    private DbContextTransaction _transaction;\npublic UserRepository(Series5DbContext db) : base(db)\n{\n}\n\npublic virtual void BeginTransaction()\n{\n    if (_transaction != null)\n    {\n        throw new InvalidOperationException(\"Transaction already started\");\n    }\n    _transaction = db.Database.BeginTransaction();\n}\n\npublic virtual void CommitTransaction()\n{\n    if (_transaction == null)\n    {\n        throw new InvalidOperationException(\"Transaction not started\");\n    }\n    _transaction.Commit();\n    DisposeTransaction();\n}\n\npublic virtual void RollbackTransaction()\n{\n    if (_transaction == null)\n    {\n        throw new InvalidOperationException(\"Transaction not started\");\n    }\n    _transaction.Rollback();\n    DisposeTransaction();\n}\n\nprivate void DisposeTransaction()\n{\n    if (_transaction == null) return;\n\n    // note: dispose will rollback any transaction not yes committed\n    _transaction.Dispose();\n    _transaction = null;\n}\n\nprotected virtual void Dispose(bool disposing)\n{\n    // free managed resources\n    if (disposing)\n    {\n        DisposeTransaction();\n    }\n}\n\npublic void Dispose()\n{\n    Dispose(true);\n    GC.SuppressFinalize(this);\n}\n\n}\n```\n. FYI, here's the consuming Web API method:\n```\n    [HttpPost]\n    public IHttpActionResult UpdateRoles([FromBody] UpdateRolesInputModel model)\n    {\n        if (!ModelState.IsValid)\n        {\n            return BadRequest(ModelState);\n        }\n    try\n    {\n        _accountService.UpdateClaims(model.Id,\n                                     model.Changes.Where(x => x.IsAdd).Select(x => x.ToClaim()),\n                                     model.Changes.Where(x => x.IsRemove).Select(x => x.ToClaim()));\n    }\n    catch (ArgumentException e)\n    {\n        if (e.ParamName == \"accountID\")\n        {\n            return NotFound();\n        }\n        throw;\n    }\n\n    return Ok();\n}\n\n```\n. Me to! I was thinking either:\n1. Make UserClaim.Type and UserClaim.Value public and accept parameters of type IEnumerable<UserClaim>\n2. Create another class UserClaimInfo class that has Value and Type (and maybe Issuer) and accept parameters of type IEnumerable<UserClaimInfo >\nI worry that the first option breaks encapsulation / Value object immutability semantics of UserClaim\nThe second option, I was worried about introducing another abstraction. If I was in charge I would probably go for the second option.\nC\n. The key thing is that each claim to add/remove gets done in a single transaction to the db, plus only one call to fetching the UserAccount from the DbContext.\n. Looks good. One question (or maybe two) - why did you choose the HashSet? In fact why did you create a custom collection class? I tend to find myself steering away from specialised collection classes as they can introduce friction when doing adopting a more functional programming style. Although I see you do mitigate that with an implicit conversion.\nIf the choice of HashSet was to avoid duplicates then doesn't UserClaim need to override the Equals and GetHash method so that a UserClaim would be considered equal (equivalent) if the Type and Value properties were the same?\nC\n. Assuming that two UserClaim's are equivalent if their Type and Value are\nequal, you could ensure that a HashSet rejects equivalent UserClaim's if\nthe UserClaim overrides Equals and GetHashCode.\nJust a quick google search see:\nhttp://stackoverflow.com/questions/8747577/hashset-allows-duplicate-item-insertion-c-sharp\nThat said it's not a biggy\nC\nOn Fri, Mar 28, 2014 at 7:21 PM, Brock Allen notifications@github.comwrote:\n\nI used ICollection because I didn't need IList semantics -- HashSet\ndoesn't prevent duplicates. I created a custom class to be able to get the\nimplicit cast operator from various sources. Am I missing something?\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/303#issuecomment-38958158\n.\n. Yup you're right. Just thought that you might have chosen HashSet for its\nability to reject duplicates but had then missed the fact that UserClaim\nwould then need to override Equals ;-0\n\nOn Fri, Mar 28, 2014 at 7:35 PM, Brock Allen notifications@github.comwrote:\n\nYea, but that'd prevented once we get to the AddClaim API internally in\nthe userAccountService, right?\n-Brock\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/303#issuecomment-38959526\n.\n. Well looks good to me\n\nOn Fri, Mar 28, 2014 at 8:07 PM, Brock Allen notifications@github.comwrote:\n\nMy goal was to have an API that was super easy to accept the claims --\nKeyValuePair felt like a lot to type. So that's why I went with a\ncustom collection class -- also so that the compiler could emit the calls\nto Add.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/303#issuecomment-38962488\n.\n. Well I think it's missing the checkin \"extension methods for UpdateClaims that accept IEnumberable\". At least this checkin is after the publish date for the Nuget package (http://www.nuget.org/packages/BrockAllen.MembershipReboot/)\n. Of course :-)\n. Hi Brock, sorry to be a pain for asking, but... do you think you could push another refresh of nuget?\n. Yeah no rush Brock. And yeah good to meet face to face :-)\nOn 25 May 2014 12:37, \"Brock Allen\" notifications@github.com wrote:\nWon't have time to look into this until after NDC, but I'll add it to my\nwork queue. Nice to meet you last week :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/358#issuecomment-44128892\n.\n. Hey brock, thanks for this. It will probably be the weekend before I get a\nchance to look.\n\nC\nOn 11 Jun 2014 17:53, \"Brock Allen\" notifications@github.com wrote:\n\nOk, I did it on this branch: 3589c1a\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/commit/3589c1a180aa44b472f167696f2bb325dd7aa17b\nTake a look and think about it (since my brain is fried ATM) and see if\nyou think there might be any problems/issues (again, thinking about others\nhaving used MR).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/358#issuecomment-45768537\n.\n. Had a look at the branch. Here's my observations and conclusion...\n\nAll custom subclasses of DbContextUserAccountRepository now responsible for disposing of DbContext\n- pro: previous design where disposal was optional increased the likelihood of a developer NOT disposing when they should\n- con: breaking change to existing subclasses. However compiler should alert of the breaking change as subclasses unlikely to have also implemented IDisposable, plus the subclasses will expect a parameterless constructor which is no longer present\nConclusion:\n- If maintaining backwards compatibility is of prime importance, this is not an appropriate implementation. An alternative would be for DbContextUserAccountRepository to use reflection to construct an instance of DbContext.\n- Assuming breaking compatibility is acceptable, then this change yields a more explicit design (see above) and therefore IMO a better design\n- If I were in charge I would probably go with the change you have made - I think the fact that the compiler will complain after upgrade for 90% (guess) of existing installations, plus the improved design offsets the risk of silently introducing breaking\n. Ok,  I thought as much. I've found a workaround for my scenario so I'll\npark this until such times as I need it again. Feel free to close the issue\nor maybe keep ot open as an enhancement request.\nC\nOn 28 Jun 2014 17:51, \"Brock Allen\" notifications@github.com wrote:\n\nWell, then you can not use the AuthentictionService and just take over\nthat yourself. It's just a matter of getting the claims you want and\nissuing whatever kind of cookie you want to use (WIF or Katana).\nIf there's a lot of code from the AuthentictionService you're using then\nperhaps we can open it up with some more virtuals.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/383#issuecomment-47432508\n.\n. I've just added batch files to build nuget packages for these satellite assemblies.\n\nMaybe @girtsl can make a pull request with translated nuspec files? I'm thinking that the description tag should be in the target language. The nuspec files are located subfolders of the NuGet folder\n. Agreed. It just took me by surprise.\nI think I would have preferred the Authenticate method to have returned an AuthenticateFailureType enum\nThat way for the simple case where consumer code just wants to know if the user is allowed to login:\nif (userAccountService.AuthenticateWithEmail(...) == AuthenticateFailureType.None) {\n  // allow login\n} else {\n // disallow login\n}\nOr for the more sophisticated consumer:\nswitch (userAccountService.AuthenticateWithEmail(...).FailureType)\n{\n    case AuthenticateFailureType.None:\n        // handle login success\n    case AuthenticateFailureType.InvalidCredentials:\n        // handle failure\n    case AuthenticateFailureType.PasswordExpired:\n        // handle failure\n    case AuthenticateFailureType.TwoFactorAuthCodeRequired:\n        // handle failure\n    case AuthenticateFailureType.TwoFactorAuthCertRequired:\n        // handle failure\n    case AuthenticateFailureType.PasswordResetRequired:\n        // handle failure\n}\n. Seems a shame not to change things so that it could return an enum.\nI think it would provide a much simpler api to the consumer - a single query method to call rather than have to fish around in all the properties and extension methods of the UserAccount.\nC\n. Also by returning an enum, the api would afford to take on extra reasons for not allowing login without all consumers necessarily having to be adjusted to check for this new reason.\n. Ah so I didn't know about this new new Identity library!\n. I do prefer most of the design choices in MR over what I have seen in Identity 2.0\n. Cool thanks Brock\nOn Wednesday, April 8, 2015, Brock Allen notifications@github.com wrote:\n\nHey Christian -- I'll take a look as soon as as I can.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/512#issuecomment-90913072\n.\n. The UserAccountService has the UpdateClaims method that takes two collections - one for adding claims the other to remove them. Internally these changes are then saved to the database with a call to DbContext.SaveChanges which is itself is transactional.\n. No probs\n. Brock, I've added some tests to the original commit. Plus another commit that adds EmailVerifiedEvent.IsNewAccount property.\n\nI don't think I see any other changes on this PR so I'm going to merge to master tomorrow if that's OK with you?\nThanks\nC\n. Cool :-)\n. No breaking changes, just a tiny new feature. If you're following semver you would bump to 8.5.0...\n. Just merged :-)\n. MembershipRebootConfiguration.AllowLoginAfterAccountCreation is probably the closest thing in MR that currently supports an approval process.\nRequireAccountApproval that I propose above would be used instead to prevent the login until the account is approved. \nAllowLoginAfterAccountCreation would need to obsoleted to allow a period of backward compatibility.\n. I would also be tempted to rename IsLoginAllowed -> IsLocked.\nI won't of course as it would be a big breaking change. Instead I'll add a summary xml comment to the property:\ncs\n/// <summary>\n/// Returns true when the account is locked\n/// </summary>\n/// <remarks>\n/// An locked account will not be able to sign in\n/// </remarks>\npublic virtual bool IsLoginAllowed { get; protected internal set; }\n. I've submitted the PR: https://github.com/brockallen/BrockAllen.MembershipReboot/pull/634\n. See also https://github.com/brockallen/BrockAllen.MembershipReboot/pull/631\n\nisn't this a breaking change - ie now MR will start sending out an email when an account is unlocked when previously it didn't?\n... include a breaking change section in the release notes and bump the version to 9.0.0?\n. ## PR summary\n- [x] modify existing APIs:\n  - add two methods to UserAccountService - ApproveAccount, RejectAccount\n  - add two mapped DateTime? properties to UserAccount - AccountApproved, AccountRejected\n  - add two computed properties to UserAccount - IsAccountApproved, IsAccountRejected\n  - add two classes - AccountApprovedEvent, AccountRejectedEvent\n  - add two overloads to EmailAccountEventsHandler for the two new event classes above\n  - add MembershipRebootConfiguration.RequireAccountApproval\n  - add SecuritySettings.RequireAccountApproval\n  - add necessary MR constants to support above\n  - obsolete MembershipRebootConfiguration.AllowLoginAfterAccountCreation\n- [x] add additional localized validation messages\n- [x] add email templates for the new events\n- [x] add EF migrations for two new (nullable) columns in the UserAccount table \n- [x] add tests for new feature and make all existing tests pass\n- [x] ensure backwards compatibility\n. Hi @brockallen, a decision needs to be made whether - feat(EmailNotification): send email when account is unlocked (or https://github.com/brockallen/BrockAllen.MembershipReboot/commit/277607b0b77d50c2356ea4d6449bdf0c4cb4e9bd) - over on master is a breaking change.\n\nMy gut feel is that it is a breaking change - the new emails that would be sent would not follow any branding customizations that maybe being applied by host app using MR.\nIf it is I'll update the nuspec files accordingly on master, then update this PR before merging into master...\nIf I don't here back (which is fine of course), I'll take a safe position and update the nuspec files to be a breaking change.\n. when is good for you to chat?\n. I'd be interested in being included in that conversation, if only to hear\nwhat others say.\nBrok you've kindly discussed MR maintenance with me and although I've been\nrubbish at contributing, it's not because of lack of interest...\nOn Sun, Feb 5, 2017 at 4:26 PM, Brock Allen notifications@github.com\nwrote:\n\nasp.net identity however I just went looking for an updated package for\nthat and noticed that it has not been updated since mid 2015\nI'm suggesting ASP.NET Identity 3. If you're still on ASP.NET pre-core,\nthen I don't see any reason to change. Migrating from ASP.NET Identity 2\nto ASP.NET Identity 3 will be just as much work, so no need to do it\ntwice.\nThe other thing i'd like to offer is to take on the maintenance of\nMembershipReboot\nThere are one or two others that have offered this. I'd suggest getting on\na brief call all together to see what you all have in mind.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/700#issuecomment-277530489,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA2HPuzmvrBgaezGpHLZaG8G_SXH3Hqdks5rZfhTgaJpZM4L3Uvi\n.\n. \n",
    "mdocter": "@HaJoB @brockallen Thank you both for your quick replies! Comparing the suggested options, I'll probably go for the custom claims options Brock mentioned. I think it's the cleanest and most programmer friendly. It will also save me the db roundtrip a few times.\n. ",
    "rhavlick": "Thanks again Brock, got it.  \nJust in the event someone else needs this, it's pretty simple, but here is what you'd need to do to build a console app that creates user accounts:\n1) Go into App.config, add the connectionstrings and point to the database to store user accounts.\n2) In the console app, add references to the BrockAllen.MembershipReboot and BrockAllen.MembershipReboot.Ef projects.  Also add the EntityFramework Nuget package.\n3) To add user accounts do something like:\nBrockAllen.MembershipReboot.Ef.DefaultUserAccountRepository repository = new DefaultUserAccountRepository();\nBrockAllen.MembershipReboot.UserAccountService svc = new UserAccountService(repository);\nUserAccount acct = svc.CreateAccount(\"JohnSmith\", \"Password\", \"jsmith@domain.com\");\n. Thanks Brock, good idea.  I'm unfortunately migrating from another system that allowed spaces.  I just commented out 2 lines for now.  Thanks again.\n. Thanks Christian, that's a good idea.\n. I'm very sorry Brock, I started working on this and got side tracked all week on other projects, but I actually have the exact same problem, I'm migrating from AD and in AD you can have the spaces and alpha numeric characters.?  I just took a look, I haven't tested it but I would think this would work perfect, so yeah if you make that part of the main branch I would greatly appreciate it.\nThanks again for your help with this whole project and all the help you provided.\n\nFrom: Brock Allen notifications@github.com\nSent: Thursday, April 03, 2014 9:42 PM\nTo: brockallen/BrockAllen.MembershipReboot\nCc: Ryan Havlick\nSubject: Re: [BrockAllen.MembershipReboot] User Name Containing A Space (#284)\nAny change to think about this?\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/284#issuecomment-39527109.\n. Great thanks Brock.\n. That's what I thought it was - so what does it default to if not set?  (Doesn't it go off the year * some constant)?\nThanks again Brock.\n. I'll give that a shot, that should fix between 3 & 4 when it's authenticating the user.  As far as the EF - between time 1 & 2 in the above example, that appears to be 1.7 seconds to do the initial operation, then < 1 second to do the second operation.  So I'm guessing there is some overhead on loading the EF or models?  (1.7 seconds is small but each time the user attempts to authenticate it's 1.7 seconds + 1.3 seconds to get a yes / no validation of the credentials).  Do you know if there is any tweak for that?\nThanks again Brock.\n. Brock, strange thing - I just re-created the database, and all issues went away.  Not sure how or why but maybe the EF was trying to re-create the DB or something each time?  Not sure.  The 50K thing is not an issue either.\nThanks.\n. Just using the Entity Framework - unfortunately this CPU issue came back and I can't get rid of it now.  I really think there is an issue with the EF - I'm not sure if you wanted to take a look at this?  I can create a VM and email you the user name and password and you can see what's happening.  I don't have the previous build, but I was going to try to compare it to that one because I think this just started happening after the latest version.\nThanks Brock.\n. Great, thanks Brock.  Again, I really appreciate all your help.\nRyan Havlick  [LI] http://www.linkedin.com/in/ryanhavlick\nHands On Technology Inc.http://www.rehabsoftware.com/\nMain:   (866) 562-8413\nFax:      (630) 455-1865\n[Hands On Technology Inc Logo]\nFrom: Brock Allen notifications@github.com<mailto:notifications@github.com>\nReply-To: \"brockallen/BrockAllen.MembershipReboot\" reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Monday, March 17, 2014 at 9:30 AM\nTo: \"brockallen/BrockAllen.MembershipReboot\" BrockAllen.MembershipReboot@noreply.github.com<mailto:BrockAllen.MembershipReboot@noreply.github.com>\nCc: Ryan Havlick rhavlick@rehabsoftware.com<mailto:rhavlick@rehabsoftware.com>\nSubject: Re: [BrockAllen.MembershipReboot] Performance (#286)\nLet me see if I can repo it myself and I'll get back to you. I'll get to it soon.\n\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/286#issuecomment-37821487.\n. Thanks again Brock, just because it's Monday and I'm running at 1/2 speed today - I setup a cloud VM that I did basically the same thing as you to make sure I'm not doing anything different, and I'm getting about 2639 ms for the GetByUserName (first call of the EF), then 2 ms for the second.  When I authenticate I'm at 1012 and then if I do it a second time I'm at 838.  This is with the PasswordHashingIterationsCount = 50000.  So my speed is a lot slower than yours and what's worse is my CPU spikes almost up to 100% on one of the two cores.  Because this is going to be a web application where 10 people could be performing a login all at the same time, it's going to really tax the the web server, so I'd have to scale out and add more cores to handle the load just to authenticate.  \nI also tested this with the SingleTenant MVC sample with similar results when authenticating.\nThe strange thing is that I definitely have had times where the CPU hasn't spiked and the speed was much faster, but now I can't get that to happen again even on different servers.\nI REALLY want to use MembershipReboot - it's going to save so much time on development, and the features you have implemented are already further than Microsoft's and other commercial frameworks, unfortunately I can't deploy this if it's going to kill my servers.\nYou've helped me so much already so I hate to even ask but if I emailed you the credentials to this test VM would you be able to RDP in and see if there is anything different you are doing than I am?  (Begging)\nThanks Brock.\n. Thanks Brock, lowering the password iterations does reduce the cost per authentication but the EF is still an issue.  I'll keep trying, thanks again for all your help.\n. Thanks Brock, I think you are right, it may just be the EF.  I'm out of ideas, the only other thing that I can think of is that it's my DB - It WAS working with performance like what you were stating early last week after I dropped and re-created the DB.  When you said you created the DB using the SQL scripts, I looked for those but couldn't find them.  Do you post those in the project somewhere?  I was going to try to create the DB using SQL vs. EF and maybe just see if there is any difference.\nThanks again.\n. OK Brock, so my load time goes from 3048 ms to 635 when I switch over from v6 to v7.  I thought I was on v7 but I guess I wasn't.  Was there a major performance change from v6 to v7?  At this point this is fast enough so I think the problem is fixed but I'm just perplexed on what this is.  Been banging my head on my desk for like 3 days straight now.\nThanks again Brock.\n. Must have missed it, that sounds good, thanks again Brock.\n. ",
    "bigredjelly": "Ah - that makes sense then! Thanks.\n. ",
    "luboid": "Check for user existence is performed with name which contain spaces, but account creation is performed with name in which spaces are replaced.\n. ",
    "Neilski": "Building the source first fixed the problem - thank you.\nOne more question if I may... I have literally just run up the SingleTenantOwinSystemWeb web site and tried to login with an external account.  With both Google and Facebook I get an 'error signing in' error - Facebook displays the following 'App Not Setup: The developers of this app have not set up this app properly for Facebook Login.'  Sorry to be 'needy', but I'm somewhat new to this (this is my first venture away from the original Membership system).\n. Thanks Brock, I'll do some investigation and try and see if I can see what's going wrong at my end.\n. Thanks Brock - all seems to be working now.  Thank you for you assistance and for creating the project in the first place.\n. Thank you - that's very helpful.  We will investigate the MembershipReboot library in more detail.\n. ",
    "tomascassidy": "Thanks!  That works perfectly.  I did have it working in another way by getting the SAM token after doing auth.SignIn(), and modifying the claims directly on the token before writing the token back to the cookie; but this way is much nicer and easier.\n. Solved the problem.  The page was using the ASP:Login control which was doing some black magic internally and adding the .ASPXAUTH cookie.  Switched to individual form controls and it's now working fine.\n. I just checked the 6 locations where Configuration.EmailIsUsername is used in UserAccountService.cs.  One prevents changing username when Configuration.EmailIsUsername = true, another three to set username = email, one for the AuthenticateWithUsernameOrEmail method, and the final for setting the validation checks.\nDoesn't look like any problems there if the validation check is removed for Configuration.EmailIsUsername = false.  The only other changes required would be adding @ char to SpecialChars array in UserAccountValidation.cs and removing the UsernameOnlySingleInstanceOfSpecialCharacters validator from UserAccountService.\nI don't really understand why it is restricting the number of special chars?\n. You're right that it might cause problems with AuthenticateWithUsernameOrEmail, since you would have to assume that username and email were set to the same email address.  If not, then you would run into authentication problems.\nPerhaps you could forget checking for the '@' in username, and just have AuthenticateWithUsernameOrEmail do return Authenticate(username) || AuthenticateWithEmail(username) (or reversed return AuthenticateWithEmail(username) || Authenticate(username))?\nThe only problem I can see with this (might also be others that I've missed) is if one user account has the username set as the same value used for the email address on another account, but not sure how often that would occur?\n. I don't think so.  I wasn't sure if there would be compatibility issues with not upgrading it.  I guess it's ok to leave it then.\n. There was a breaking change in the MembershipReboot package for 9.0.0 changing GetCurentPrincipal to GetCurrentPrincipal.  The other packages just need to be recompiled to be compatible with that naming change and bumping the version number seemed the easiest option.\nThe current situation is described in #693 where the MembershipReboot 9.0.0 package is not compatible with MembershipReboot.Webhost 7.1.0.. ",
    "hilts001": "I had same problem as \"rhavlick\" login fail error too many attempts can and I have reset the password but still it won't let me sign in. how can i fix that?\n. ",
    "JayQuerido": "Also, I notice that the RavenDB sample project hasn't changed since I downloaded the sample a few days ago. So I don't think it's that code.\n. That's right... works locally but not in an Azure Website (with RavenDB running against RavenHQ or embedded).\nAnd no, I haven't done anything that should use the Session.\nI hate that this is another \"works on my machine\"\" scenario. Let me know what kind of info may be helpful.\n. ",
    "mikeckennedy": "Hi guys. You are right that users.Where(u => u.email.ToLower() == email) will use a RegEx and because it's case insensitive, it WILL do a full table scan (can't be indexed).\nI would recommend either:\n1. Store the email as lowercase always and just compare to email at login (making the input lowercase).\n2. Store a second field called email_lowercase or something like that and of course put email.ToLower() there on account creation.\nPersonally, I'd choose the first. Also, put an index on that field:\ndb.users.ensureIndex({email_lowercase: 1})\n. Oh, one more thing. Make that index unique!\ndb.users.ensureIndex({email_lowercase: 1}, {unique: true})\n. ",
    "chuckscheier": "Good question. I don't have a proposition, but I'll tell you what we're gonna do. Use UserAccountService.SetPassword() to set a new random password and sent it by email. Note that we do have our own registration workflow, so our users are not anonymous. It would be nice if we could set the IsAccountVerified bit when we confirm a user.\n. Yes perfect! But not finding SetConfirmedEmail?\n. Got it. This works well now. Thanks Brock!\n. ",
    "Beats001": "Basically entity framework had to be installed via Nuget also.\n. Hi thanks for that, when I open the solution two of the projects don't load:\nFor reference sake ...\nI had to enable allow nuget restore at solution level and close the solution and reopen.\nThanks\nMark\nDate: Tue, 25 Mar 2014 08:46:29 -0700\nFrom: notifications@github.com\nTo: BrockAllen.MembershipReboot@noreply.github.com\nCC: markbeattie2003@hotmail.co.uk\nSubject: Re: [BrockAllen.MembershipReboot] Issue running SingleTenant web app (#301)\nYou just need to build the main solution. (not samples) Nuget should restore the packages.\n\u2014\nReply to this email directly or view it on GitHub.                  \n. That could well be the problem.Thanks a lot for your help.\nI will continue my research into your great product.\nMuch appreciated.\nMark\nDate: Tue, 25 Mar 2014 19:19:55 -0700\nFrom: notifications@github.com\nTo: BrockAllen.MembershipReboot@noreply.github.com\nCC: markbeattie2003@hotmail.co.uk\nSubject: Re: [BrockAllen.MembershipReboot] Issue running SingleTenant web app (#301)\nIt sounds like you don't have the latest version of the NuGet extension in Visual Studio. Version 2.8 is what I have been using for all the code I've been checking into this repository.\n\u2014\nReply to this email directly or view it on GitHub.                  \n. ",
    "bipa": "Thanks for the information and follow-up\nI hate EF migrations too :-)\n. Understandable, would be nice though!\n. ",
    "Lars-Kolsaker": "Hi\nThanks for quick reply !\nI started from scratch again. Downloaded lateset source, build the IdentityServer solution and the MembershipRebootUserRepository solution. Also recreated the two databases.\nNow It looks like I have a problem when populating the databases.\n\nIn the MembershipRebootUserRepository solution I got ReSharper warning on this linee in IdentityRepository.cs\nDatabase.SetInitializer(new MigrateDatabaseToLatestVersion());\n\n. Ah, did forget that.\nAfter updateing to 6.1 it all come up. \nThanks for helping me.\nLars\n. Do not get any error. but get an email even if I have set RequireAccountVerification=false in the configuration.\nlars\n. Thanks\n. ",
    "Leandro-Andrade": "Thanks for reply Brock, but it seems not to fit. Company will be treated as an entity, I mean a table on the DB with fields like Id, LegalName, Address, Phone, etc.\nThere will be a one-to-many (one company to many users).\nWould be a good practice to have ClaimType: CompanyId, and ClaimValue: ID# only for access tracking and have a table called Companies with its required fields?\n. That helps!\nThanks man\n. ",
    "pardha83": "Hi brockallen,\nI am going through email sending from brockallen membership reboot. I just tried to create instance for BrockAllen.MembershipReboot.SmtpMessageDelivery, and used Send(Message). Also set up the smtp configuration in web.config in my MVC application. But I am neither getting exception nor email. Please help me on this.\n. I have not yet get into handlers/user account. in my controller I just did like:\nBrockAllen.MembershipReboot.SmtpMessageDelivery delivery = new BrockAllen.MembershipReboot.SmtpMessageDelivery();\ndelivery.Send(new Message({body=\"\", subject\"\", to=\"\"}));\n. yes, gmail one:\n\n\n\n. is there anything that I am missing?\n. did you get a chance to try this?\n. yes, it was working for me without MR, using SmtpClient()\n. Thanks @brockallen , @dealproc .\nI figured out the issue, firewall is stopping the mails.\n. ",
    "JDetmar": "yup, I was missing the RegisterUserAccountChildTablesForDelete\nThanks!\n. ",
    "shurub3l": "I was thinking about opening a new issue, but I see this one is related and it has the same name I wanted to use.\nSo, I impemented SingleTenantOwin and everything worked fine. After I implemented custom user account class, user repository, and db context (as in the Customizations sample), when I try to register a new account, I get the following error:\nThe source query for this EntityCollection or EntityReference cannot be returned when the related object is in either an added state or a detached state and was not originally retrieved using the NoTracking merge option.\non the line\nvar account = _userAccountService.CreateAccount(null, model.Password, model.Email);\nHave I done something wrong?\n. Here is my source code.\nStartup\n```\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseCookieAuthentication(new CookieAuthenticationOptions\n        {\n            AuthenticationType = \"External\",\n            AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode.Passive\n        });\n    ConfigureMembershipReboot(app);\n}\n\nprivate static void ConfigureMembershipReboot(IAppBuilder app)\n{\n    var cookieOptions = new CookieAuthenticationOptions\n    {\n        AuthenticationType = MembershipRebootOwinConstants.AuthenticationType,\n        LoginPath = new PathString(\"/User/Login\")\n    };\n    BuildAutofacContainer(app, cookieOptions.AuthenticationType);\n    app.UseMembershipReboot(cookieOptions);\n}\n\nprivate static void BuildAutofacContainer(IAppBuilder app, string authType)\n{\n    var builder = new ContainerBuilder();\n\n    var config = CreateMembershipRebootConfiguration(app);\n\n    builder.RegisterInstance(config).As<MembershipRebootConfiguration<User>>();\n    builder.RegisterType<UserRepository>()\n        .As<IUserAccountRepository<User>>()\n        .As<IUserAccountQuery>()\n        .InstancePerLifetimeScope();\n    builder.RegisterType<UserAccountService<User>>().OnActivating(e =>\n        {\n            var owin = e.Context.Resolve<IOwinContext>();\n            var debugging = false;\n\nif DEBUG\n            debugging = true;\n\nendif\n            e.Instance.ConfigureTwoFactorAuthenticationCookies(owin.Environment, debugging);\n        })\n        .AsSelf()\n        .InstancePerLifetimeScope();\n    builder.Register(ctx =>\n        {\n            var owin = ctx.Resolve<IOwinContext>();\n            return new OwinAuthenticationService<User>(authType, ctx.Resolve<UserAccountService<User>>(), owin.Environment);\n        })\n        .As<AuthenticationService<User>>()\n        .InstancePerLifetimeScope();\n\n    builder.Register(ctx => HttpContext.Current.GetOwinContext()).As<IOwinContext>();\n    builder.RegisterControllers(typeof(Startup).Assembly);\n\n    var container = builder.Build();\n    System.Web.Mvc.DependencyResolver.SetResolver(new AutofacDependencyResolver(container));\n}\n\nprivate static MembershipRebootConfiguration<User> CreateMembershipRebootConfiguration(IAppBuilder app)\n{\n    var config = new MembershipRebootConfiguration<User>();\n    config.RequireAccountVerification = false;\n    config.AddEventHandler(new DebuggerEventHandler<User>());\n\n    var appInfo = new OwinApplicationInformation(\n        app,\n        \"Recipes\",\n        \"Test Email Signature\",\n        \"/User/Login\",\n        \"/User/ChangeEmail/Confirm/\",\n        \"/User/Register/Cancel/\",\n        \"/User/PasswordReset/Confirm/\");\n\n    var emailFormatter = new EmailMessageFormatter<User>(appInfo);\n    config.AddEventHandler(new EmailAccountEventsHandler<User>(emailFormatter));\n\n    return config;\n}\n\n}\n```\nRecipesContext\n```\npublic class RecipesContext : DbContext\n{\n    static RecipesContext()\n    {\n        Database.SetInitializer(new DropCreateDatabaseIfModelChanges());\n    }\npublic RecipesContext()\n    : this(\"name=RecipesContext\")\n{\n    this.RegisterUserAccountChildTablesForDelete<User>();\n}\n\npublic RecipesContext(string connectionName)\n    : base(connectionName)\n{\n    this.RegisterUserAccountChildTablesForDelete<User>();\n}\n\npublic DbSet<User> Users { get; set; }\n\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.ConfigureMembershipRebootUserAccounts<User>();\n}\n\n}\n```\nUserRepository\n```\npublic class UserRepository : DbContextUserAccountRepository, IUserAccountRepository\n{\n    public UserRepository()\n        : base(new RecipesContext())\n    {\n        this.isContextOwner = true;\n    }\n    public UserRepository(string name)\n        : base(new RecipesContext(name))\n    {\n        this.isContextOwner = true;\n    }\n    public UserRepository(RecipesContext db)\n        : base(db)\n    {\n    }\nprotected override IQueryable<User> DefaultQueryFilter(IQueryable<User> query, string filter)\n{\n    if (query == null) throw new ArgumentNullException(\"query\");\n    if (filter == null) throw new ArgumentNullException(\"filter\");\n\n    return\n        from a in query\n        from c in a.ClaimCollection\n        where c.Value.Contains(filter)\n        select a;\n}\n\n}\n```\nUser\npublic class User : RelationalUserAccount\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n. Any ideas? Anyone?\n. Here is my source code.\nStartup\n```\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseCookieAuthentication(new CookieAuthenticationOptions\n        {\n            AuthenticationType = \"External\",\n            AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode.Passive\n        });\n    ConfigureMembershipReboot(app);\n}\n\nprivate static void ConfigureMembershipReboot(IAppBuilder app)\n{\n    var cookieOptions = new CookieAuthenticationOptions\n    {\n        AuthenticationType = MembershipRebootOwinConstants.AuthenticationType,\n        LoginPath = new PathString(\"/User/Login\")\n    };\n    BuildAutofacContainer(app, cookieOptions.AuthenticationType);\n    app.UseMembershipReboot(cookieOptions);\n}\n\nprivate static void BuildAutofacContainer(IAppBuilder app, string authType)\n{\n    var builder = new ContainerBuilder();\n\n    var config = CreateMembershipRebootConfiguration(app);\n\n    builder.RegisterInstance(config).As<MembershipRebootConfiguration<User>>();\n    builder.RegisterType<UserRepository>()\n        .As<IUserAccountRepository<User>>()\n        .As<IUserAccountQuery>()\n        .InstancePerLifetimeScope();\n    builder.RegisterType<UserAccountService<User>>().OnActivating(e =>\n        {\n            var owin = e.Context.Resolve<IOwinContext>();\n            var debugging = false;\n\nif DEBUG\n            debugging = true;\n\nendif\n            e.Instance.ConfigureTwoFactorAuthenticationCookies(owin.Environment, debugging);\n        })\n        .AsSelf()\n        .InstancePerLifetimeScope();\n    builder.Register(ctx =>\n        {\n            var owin = ctx.Resolve<IOwinContext>();\n            return new OwinAuthenticationService<User>(authType, ctx.Resolve<UserAccountService<User>>(), owin.Environment);\n        })\n        .As<AuthenticationService<User>>()\n        .InstancePerLifetimeScope();\n\n    builder.Register(ctx => HttpContext.Current.GetOwinContext()).As<IOwinContext>();\n    builder.RegisterControllers(typeof(Startup).Assembly);\n\n    var container = builder.Build();\n    System.Web.Mvc.DependencyResolver.SetResolver(new AutofacDependencyResolver(container));\n}\n\nprivate static MembershipRebootConfiguration<User> CreateMembershipRebootConfiguration(IAppBuilder app)\n{\n    var config = new MembershipRebootConfiguration<User>();\n    config.RequireAccountVerification = false;\n    config.AddEventHandler(new DebuggerEventHandler<User>());\n\n    var appInfo = new OwinApplicationInformation(\n        app,\n        \"Recipes\",\n        \"Test Email Signature\",\n        \"/User/Login\",\n        \"/User/ChangeEmail/Confirm/\",\n        \"/User/Register/Cancel/\",\n        \"/User/PasswordReset/Confirm/\");\n\n    var emailFormatter = new EmailMessageFormatter<User>(appInfo);\n    config.AddEventHandler(new EmailAccountEventsHandler<User>(emailFormatter));\n\n    return config;\n}\n\n}\n```\nRecipesContext\n```\npublic class RecipesContext : DbContext\n{\n    static RecipesContext()\n    {\n        Database.SetInitializer(new DropCreateDatabaseIfModelChanges());\n    }\npublic RecipesContext()\n    : this(\"name=RecipesContext\")\n{\n    this.RegisterUserAccountChildTablesForDelete<User>();\n}\n\npublic RecipesContext(string connectionName)\n    : base(connectionName)\n{\n    this.RegisterUserAccountChildTablesForDelete<User>();\n}\n\npublic DbSet<User> Users { get; set; }\n\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.ConfigureMembershipRebootUserAccounts<User>();\n}\n\n}\n```\nUserRepository\n```\npublic class UserRepository : DbContextUserAccountRepository, IUserAccountRepository\n{\n    public UserRepository()\n        : base(new RecipesContext())\n    {\n        this.isContextOwner = true;\n    }\n    public UserRepository(string name)\n        : base(new RecipesContext(name))\n    {\n        this.isContextOwner = true;\n    }\n    public UserRepository(RecipesContext db)\n        : base(db)\n    {\n    }\nprotected override IQueryable<User> DefaultQueryFilter(IQueryable<User> query, string filter)\n{\n    if (query == null) throw new ArgumentNullException(\"query\");\n    if (filter == null) throw new ArgumentNullException(\"filter\");\n\n    return\n        from a in query\n        from c in a.ClaimCollection\n        where c.Value.Contains(filter)\n        select a;\n}\n\n}\n```\nUser\npublic class User : RelationalUserAccount\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n. Stack Trace:\n[InvalidOperationException: The source query for this EntityCollection or EntityReference cannot be returned when the related object is in either an added state or a detached state and was not originally retrieved using the NoTracking merge option.]\nSystem.Data.Entity.Core.Objects.DataClasses.RelatedEnd.CreateSourceQuery(MergeOption mergeOption, Boolean& hasResults) +461\nSystem.Data.Entity.Core.Objects.DataClasses.RelatedEnd.ValidateLoad(MergeOption mergeOption, String relatedEndName, Boolean& hasResults) +86\nSystem.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(List`1 collection, MergeOption mergeOption) +130\nSystem.Data.Entity.Core.Objects.DataClasses.RelatedEnd.DeferredLoad() +475\nSystem.Data.Entity.Core.Objects.Internal.LazyLoadBehavior.LoadProperty(TItem propertyValue, String relationshipName, String targetRoleName, Boolean mustBeNull, Object wrapperObject) +236\nSystem.Data.Entity.Core.Objects.Internal.<>c__DisplayClass7`2.<GetInterceptorDelegate>b__1(TProxy proxy, TItem item) +153\nSystem.Data.Entity.DynamicProxies.User_9F3666F8493BEB52F0F1DD783AE58F5F89F6BD13D0F5AF8639E935D0C4B9E610.get_ClaimCollection() +42\nSystem.Data.Entity.<>c__DisplayClass1`8.<RegisterUserAccountChildTablesForDelete>b__0(Object sender, NotifyCollectionChangedEventArgs e) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot.Ef\\DbModelBuilderExtensions.cs:33\nSystem.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(Object sender, NotifyCollectionChangedEventArgs e) +0\nSystem.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e) +61\nSystem.Data.Entity.Internal.DbLocalView`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e) +706\nSystem.Data.Entity.Internal.DbLocalView`1.StateManagerChangedHandler(Object sender, CollectionChangeEventArgs e) +255\nSystem.Data.Entity.Core.Objects.ObjectStateManager.AddEntry(IEntityWrapper wrappedObject, EntityKey passedKey, EntitySet entitySet, String argumentName, Boolean isAdded) +936\nSystem.Data.Entity.Core.Objects.ObjectContext.AddSingleObject(EntitySet entitySet, IEntityWrapper wrappedEntity, String argumentName) +175\nSystem.Data.Entity.Core.Objects.ObjectContext.AddObject(String entitySetName, Object entity) +425\nSystem.Data.Entity.Internal.Linq.InternalSet`1.ActOnSet(Action action, EntityState newState, Object entity, String methodName) +202\nSystem.Data.Entity.Internal.Linq.InternalSet`1.Add(Object entity) +165\nSystem.Data.Entity.DbSet`1.Add(TEntity entity) +70\nBrockAllen.MembershipReboot.Ef.DbContextUserAccountRepository`2.Add(TAccount item) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot.Ef\\DbContextUserAccountRepository.cs:75\nBrockAllen.MembershipReboot.EventBusUserAccountRepository`1.Add(TAccount item) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\Repository\\EventBusUserAccountRepository.cs:58\nBrockAllen.MembershipReboot.UserAccountService`1.CreateAccount(String tenant, String username, String password, String email, Nullable`1 id, Nullable`1 dateCreated) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:433\nBrockAllen.MembershipReboot.UserAccountService`1.CreateAccount(String username, String password, String email, Nullable`1 id, Nullable`1 dateCreated) in c:\\ballen\\github\\BrockAllen.MembershipReboot\\src\\BrockAllen.MembershipReboot\\AccountService\\UserAccountService.cs:403\nRecipes.Controllers.UserController.Register(RegisterModel model) in c:\\Projects\\Apps\\KitchenShop\\Retete\\src\\Recipes\\Controllers\\UserController.cs:96\nlambda_method(Closure , ControllerBase , Object[] ) +127\nSystem.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters) +242\nSystem.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters) +39\nSystem.Web.Mvc.Async.AsyncControllerActionInvoker.<BeginInvokeSynchronousActionMethod>b__39(IAsyncResult asyncResult, ActionInvocation innerInvokeState) +12\nSystem.Web.Mvc.Async.WrappedAsyncResult`2.CallEndDelegate(IAsyncResult asyncResult) +139\nSystem.Web.Mvc.Async.AsyncInvocationWithFilters.<InvokeActionMethodFilterAsynchronouslyRecursive>b__3f() +112\nSystem.Web.Mvc.Async.<>c__DisplayClass48.<InvokeActionMethodFilterAsynchronouslyRecursive>b__41() +452\nSystem.Web.Mvc.Async.<>c__DisplayClass33.<BeginInvokeActionMethodWithFilters>b__32(IAsyncResult asyncResult) +15\nSystem.Web.Mvc.Async.<>c__DisplayClass2b.<BeginInvokeAction>b__1c() +37\nSystem.Web.Mvc.Async.<>c__DisplayClass21.<BeginInvokeAction>b__1e(IAsyncResult asyncResult) +241\nSystem.Web.Mvc.Controller.<BeginExecuteCore>b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState) +29\nSystem.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\nSystem.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult) +53\nSystem.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +19\nSystem.Web.Mvc.MvcHandler.<BeginProcessRequest>b__5(IAsyncResult asyncResult, ProcessRequestState innerState) +51\nSystem.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\nSystem.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +606\nSystem.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +288\n. Any ideas?\n. That was not problem. I still get the error.\nI shared the repo with you (https://bitbucket.org/shurub3l/retete).\n. ",
    "mmercure": "Could you make the method ValidateUsername, ValidatePassword, ValidateEmail of UserAccountService virtual?\nor these\nLazy<AggregateValidator<TAccount>> usernameValidator;\nLazy<AggregateValidator<TAccount>> emailValidator;\nLazy<AggregateValidator<TAccount>> passwordValidator;\nprotected?\nthat way I could just override them with what i need\n. Good Thanks, happy to here from you... I'll be waiting.\nOn Sun, Apr 20, 2014 at 6:36 PM, Brock Allen notifications@github.comwrote:\n\nOk, let me look into this a bit and see what the tradeoff would be.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/331#issuecomment-40906732\n.\n. \n",
    "tjrobinson": "See also: #370\n. See: #410 for a possible workaround.\n. See also: #331 and #370\n. See: #410 for a possible workaround.\n. In your RecipesContext it looks like you'd be calling RegisterUserAccountChildTablesForDelete() twice if you use the default constructor.\nI had the same error message earlier today and I'm not sure exactly how I fixed it, but the approach I took was to delete my custom DbContext implementation, and replace it with a copy of DefaultMembershipRebootDatabase which I then renamed and re-customised with my UserAccount and Group types. That resolved it for me.\n. @brockallen Oops, I did try and find some previous discussions on the topic but will try again. Thanks for the tip. We're currently just using the core packages \"BrockAllen.MembershipReboot\" and \"BrockAllen.MembershipReboot.Ef\" but I'll take a look at AuthWithUsernameOrEmail (presumably in the WebHost/OwinHost packages). I think I understand what you're saying but I'm having to fit this on top of legacy data which makes it a bit trickier to \"do the right thing\".\n. See also: #331 and #339\n. See: #410 for a possible workaround.\n. The UserAccountService has a SetPassword method which will allows you to do that.\nvoid SetPassword(Guid accountID, string newPassword)\n. Related links:\nhttp://brockallen.com/2012/07/08/mvc-4-antiforgerytoken-and-claims/\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/51\n. I've fixed this problem by changing from:\nAntiForgeryConfig.UniqueClaimTypeIdentifier = ClaimTypes.Sid;\nTo:\nAntiForgeryConfig.UniqueClaimTypeIdentifier = ClaimTypes.Name;\nI'm not fully confident that this is the best fix, but it works in my scenario.\nClaimTypes.Sid is the AccountID\nClaimTypes.Name is the Username, which will change occasionally for some users\n. @brockallen Do you mean I should be using NameIdentifier instead of Name for the Username? I'm finding some of the specs I read a bit ambiguous.\n. Thanks, that's all I can think of for now and fits my needs but I have a nagging feeling there could be more.\n. The group deletion problem is described in #412 but unfortunately only exposes itself when run against a real database, so the tests I've written don't help that much.\n. I understand what you're saying but at the time I suggested this change (the surrounding code may now have changed) I experienced this issue and making this change solved it. It's a while since I looked at this but I think there are multiple deferred query executions happening and colliding.\nSorry, a bit vague in detail but it is/was definitely a real problem. Maybe there's a better fix?\n. It would also be handy if the Name could be updated.\n. We're storing user roles as a flat list of multiple claims of type http://schemas.microsoft.com/ws/2008/06/identity/claims/role. We're using the Groups functionality to represent organisational structure for reporting purposes. And in that case, each user belongs to one group at a time via a GUID on the user (custom UserAccount).\nThe main reason I'm interested in being able to rename the groups is that I ideally want to be able to have multiple groups with the same name (e.g. \"Sales Team\" but under different regions). The group names have to be unique though so I'm actually naming them using a path format, e.g. \"North West\\Sales Team\". It's ok until you want to move a child group from one parent to another.\nThis is probably going against how you intended groups to be used?\n. I'm never sure about Description properties. I can see why they're useful but I've seen far too many projects where they end up being set to the same value (or more wordy variation) of the entity name, because nobody can think of anything interesting to write! So I guess I would personally say no. It should be relatively easy for someone to create a custom type with a Description property if they need it?\n. I just noticed that the sample code I'm basing this experiment on explicitly adds the access token to the set of claims. I have a feeling the solution to my problem above is - don't do that!\nhttp://blogs.msdn.com/b/webdev/archive/2013/10/16/get-more-information-from-social-providers-used-in-the-vs-2013-project-templates.aspx\n. Makes sense. Do you think it should fail in some way if this is set to false when using EF - to avoid people thinking it's doing something it isn't?\n. Check the value of UseEqualsOrdinalIgnoreCaseForQueries in the constructor of the repository and throw there? I'm not sure really, as I'm not familiar with your code and design principles.\n. Thanks Brock, will do.\n. There are two concerns - performance and the possibility of the user being partially created, since the Updates are in separate transactions.\n. Thanks, I'll see what I can come up with.\n. I can confirm that this works as we have a very similar scenario. We also have users that we are migrating from an existing system who we have to automatically verify on migration.\n. We have an awkward scenario where users are soft-deleted - CloseAccount() rather than DeleteAccount() - and then re-created at a later date with a different username but the same email address. In these cases it would be possible to allow the email to be non-unique within the set of all currently \"unclosed\" users. Obviously this would mean you wouldn't be able to re-open the original user account.\n. @JellyMaster Thanks, that would be useful as I am in a similar situation. If I get there first, I'll also share what I find.\n. @JellyMaster @brockallen I've confirmed that the schema hasn't changed between v7.5.0. and v8.2.1 by...\n- Checking out the v7.5.0 tag, building and running the SingleTenantWebApp sample with a local SQL server connection string and using the \"Generate scripts...\" command in SQL Server Management Studio to dump the schema to a file\n- Doing the same for the v8.2.1 tag\n- Comparing the two outputs in a text diff tool\n. @TDK1964 Which specific bits are too slow?\n. @TDK1964 Sorry, I should have been more specific. I meant which bits of MembershipReboot are running slowly using EF? Or is it just generally \"too slow\"?\n. ",
    "israelpereira": "It is being called from ChangePasswordController, where is needed use GetUserID() method. I took this controller from the SingleTenantWebApp sample.\n. I already made some changes on AuthenticationHelper of Identity Server. \nI included the IClaimsRepository property, and I used it to call the GetClaims within  the method CreatePrincipal().. \nDo you think it is a bad change ? \nI using the sample (MembershipRebootUserRepository)\n. Hi @StateBarofArizona I did a minimal change within the method \"CreatePrincipal\" of the AuthenticationHelper.cs of Identity Server.\nTake a look at the end of the method, the line is commented:\n``` C#\n  public ClaimsPrincipal CreatePrincipal(string username, string authenticationMethod, IEnumerable additionalClaims = null)\n        {\n            List claims = null;\n        if (additionalClaims != null)\n        {\n            claims = additionalClaims.ToList();\n        }\n        else\n        {\n            claims = new List<Claim>();\n        }\n\n        if (!claims.Exists((p) => p.Type == ClaimTypes.NameIdentifier))\n        {\n            claims.Add(new Claim(ClaimTypes.NameIdentifier, username));\n        }\n\n        if (!claims.Exists((p) => p.Type == ClaimTypes.Name))\n        {\n            claims.Add(new Claim(ClaimTypes.Name, username));\n        }\n\n        if (!claims.Exists((p) => p.Type == ClaimTypes.AuthenticationMethod))\n        {\n            claims.Add(new Claim(ClaimTypes.AuthenticationMethod, authenticationMethod));\n        }\n\n        claims.Add(AuthenticationInstantClaim.Now);\n\n        ClaimsPrincipal principal = new ClaimsPrincipal(new ClaimsIdentity(claims, Constants.AuthenticationType));\n\n        //Added this line to fix MR Invalid NameIdentifier problem \n        principal = new ClaimsPrincipal(new ClaimsIdentity(ClaimsRepository.GetClaims(principal, null), Constants.AuthenticationType));\n\n        return FederatedAuthentication.FederationConfiguration.IdentityConfiguration.ClaimsAuthenticationManager.Authenticate(string.Empty, principal);\n    }\n\n```\n. My Solution Works pretty well..\nI just forgot to say that you need to add a new property to use the ClaimsRepository and initialize it  within the helper constructor.\n``` C#\n   public class AuthenticationHelper\n    {\n        [Import]\n        public IUserRepository UserRepository { get; set; }\n    [Import]\n    public IRelyingPartyRepository RelyingPartyRepository { get; set; }\n\n //Add this to Use the ClaimsRepository \n    [Import]\n    public IClaimsRepository ClaimsRepository { get; set; }\n\n    public AuthenticationHelper()\n    {\n        Container.Current.SatisfyImportsOnce(this);\n    }\n\n    public AuthenticationHelper(IUserRepository userRepository, IRelyingPartyRepository relyingPartyRepository, IClaimsRepository claimsRepository)\n    {\n        UserRepository = userRepository;\n        RelyingPartyRepository = relyingPartyRepository;\n\n         //Add to get the an instance of the claimsRepository\n        ClaimsRepository = claimsRepository;\n    }\n\n```\nAnd Ofcourse, remember to use the sample \"MembershipReboot UserRepository\" to integrate Idsrv and MR.\n. ",
    "davidgrey152": "I would suggest not making a change here.  If EmailIsUserName = False and you want to switch this in the future, you might have a scenario where a username is presented like an email address, but the user does not own the email address.\n. ",
    "domtheluck": "Got exactly the same error after adding RegisterUserAccountChildTablesForDelete to my custom class. \n. ",
    "Danthar": "Just for kicks: I have the exact same issue.\nAnd yes I have added the RegisterUserAccountChildTablesForDelete and I have not changed anything concerning lazyloading or such.\nIt seems to be related to the latest EF version (6.1) Its easy to reproduce as well. Checkout the customization sample from github. Try to register an account and stuff starts failing.\nAfter thinking about this some more. I think the RegisterUserAccountChildTablesForDelete is not working anymore, for some obscure reason. \nIll try to hack in an example just for the claimscollection to try and verify my assumption.\n. Ah. I just came to the exact conclusion as AlonCG did in his referenced issue. Shall we continue this in there? Due to that issue being more relevant to the problem at hand ?\n. Ok ill stay in this thread then. \nHere is what I found out:\nWhen using the current source, build against the latest EF (6.1.2). It works. My previous attempts failed due to unrelated issues, which weren't immediately clear due to EF mucking up Exceptions.\nSo then I started comparing stuff. A few things became clear quite fast.\n- The nuget packages still use the RelationalUserAccount with the generic key. Where the current source does not.\n- The RegisterUserAccountChildTablesForDelete is gone.\n  And so a few other things. For example: useraccount name validation has been tightened. (no more spaces! aww...)\nSo I updated my project to use the latest source build. And after fixing some EF \"database changed\" troubles, stuff works now.\nSo sorry for scaring you by necromancing this issue back from the dead. But I am actually more then curious as to what the fundamental change was that fixed this issue?\nAnd I advice updating the nuget packages, it will save new users quite abit of grief.\n. ",
    "adrianhara": "What does MW stand for? :)\n. Ah ok thnx :)\nI'll keep playing around with stuff then, I don't really know what the problem could be as the scenario doesn't reproduce in the default mvc 5.1 template...\nI'll come back and write the solution if I find it.\n. Not yet, been working on other stuff. But it's top of the list for the upcoming week. Stay tuned...\n. I've managed to reproduce the issue in a blank app. I only get it on IIS, not on the webdevserver. I'll keep fiddling around on the test app, see if I figure it out.\nWould it help if I uploaded this repro app somewhere for you guys to take a look?\n. Ok, figured it out. It was, as expected, my own stupidity: I was all configured for Owin (web.config and also Startup.cs) BUT I had configured SamAuthenticationService in the IOC container. \nI switched to OwinAuthenticationService and everything works as expected now :)\n. Based on the subdomain name. Each tenant gets his own subdomain. \n. I could build my own class, the thing is I'd have to build the RelativePathApplicationInformation class as well, because that's the one caching the url. Not a big deal, but maybe it would be nicer to actually be able to configure this caching.\nI see several approaches to this, one of which would be to have RelativePathApplicationInformation actually NOT cache anything, but leave this decision up to implementors of the GetApplicationBaseUrl() method. This way the default AspNetApplicationInformation class could cache it, but anyone (me for example :) ) could write his own AspNetApplicationInformation-like class which would not cache, the advantage being I'd only have to override one method.\nWhat do you think?\n. Sure I'll do it and submit a PR tomorrow morning.\n. https://github.com/brockallen/BrockAllen.MembershipReboot/pull/396\nIn the end I did a simple flag. I first tried the subclass/template method approach but, to be honest, it ended up quite complicated, as BaseUrl wasn't the only cached value, most other Url properties were cached as well. So, pragmatism ftw :)\n. ",
    "leastprivilege": "middleware ;)\n. ",
    "pjcunningham": "Yes it's working - checked against Raven 2.5.2879\nThanks for the fix.\n. ",
    "kjellski": "It works like a charm now, thanks for the headsup :+1: \n. ",
    "threeel": "i Have the same issue as well. with the exact implementation. is there any solution or point of where is the possible problem?\nthanks\n. is it ok to share my repo with you brock which is the same problem... maybe this ticket can go away.\nthank you.\n. @brockallen here you go (https://github.com/threeel/soccer)\n. thank you for the reply. still the issue persist! \n. ",
    "archiebunclt": "You need to declare the properties on the User class as virtual. I'm not familiar enough with Ef to explain why, though.\n. ",
    "sheam": "Making 'FirstName' and 'LastName' virtual fixed the issue for me too. \n. Brock,\nIndeed my web.config was badly out of shape. This commit fixed everything:\nhttps://bitbucket.org/sheam/mr-test-app/commits/94e174abae643dcaea82cc77c7c446644f0d0810\nHopefully it helps others.\nOWIN would be nice, but likely not needed for me at this point... is it something I should decide now? Or is easy to change my mind later?\nThanks again.\n. Thanks for the advice. I will look into OWIN more. Feel free to close this.\n. And then with the email handler null, I could just SetConfirmedEmail(account.ID, \"retired_\" + account.Email), which would allow that user to sign up with that email again?\n. Calling CloseAccount(uid) does not work, as the source for that f'n does not call Update on the account. The CloseAccount(userObject) is inaccessible.\nShould I be using DeleteAccount(uid) with AllowAccountDeletion = false?\n. Thank you.\n. Data layer has nugets: MembershipReboot 8.3, and MembershipReboot.Ef 8.0.0, with no updates available.\nService layer has nugets: MembershipReboot 8.3, and MembershipReboot.Ef 8.0.0, with no updates available.\nMy presentation layer (controllers/mvc/etc): MembershipReboot 8.3, and MembershipReboot.WebHost 7.1.0, with no updates available.\nDo I need to enable pre-release packages?\n. Yeah, I am confused too...\nJust run update all packages, and restarted VS. After weeks the error seems to have gone away. \nPreviously, I had blown away packages directory, reinstalled the, updated all, built clean, etc, and nothing seemed to fix it. \nBut now it seems fine. The only package that seems to have been updated which is remotely connected is System.IdentityModel which went from 1.0 to 4.2! Not sure what was going on there.\nOk, sorry to waste your time.\n. I am getting these errors again. Using AsmSpy, I can see that that BrockAllen.MembershipReboot.Ef depends on BrockAllen.MembershipReboot 8.0, and BrockAllen.MembershipReboot.WebHost depends on version 7.11.\nSo we either need an updated version of those two that depend on the 8.4 version of BrockAllen.MembershipReboot, or downgrade everything to 7.1 I guess.... which doesn't feel very good to be running old version of authentication software.\nOther option is to download source and fix it... I'll live with the warnings for now.\n~S\n. If it helps, if I do a logout, then login again it is fine.\nI am just using the nuget package, I could download source, and have a look, which projects would I need to reference? But I need to know what is expected behavior. I am assuming that HasUserID should be returning false if Identity.Name has a value and Identity.IsAuthenticated is true? Is it just a cookie not being wiped out?\n. Sorry, I am not meaning to say the problem lies in MR, nor am I saying I want someone else to solve my issue. But in order for me to do anything, I need some clarification on the MembershipReboot's helper function HttpContext.User.HasUserID() . \nI'll try and be more clear:\nShould it ever return false when HttpContext.User.Identity.Name has a valid value?\n. Hmmm, digging a little deeper, and looking at cookies, I did not have a FedAuth cookie. But I did have a ASP_AUTH cookie. Not sure where this cookie came from, but it seems to be the reason that HttpContext.User.Identity.Name has a value when it shouldn't and also why Request.IsAuthenticated is returning true when it should not.\nMust be a cross contamination of cookies from another MVC project I am working on and debugging on locatlhost...\n. Yes, go ahead and close it.\n. Ok, now I feel stupid... but hopefully this helps someone else. I forgot to make WarehouseId and DefaultWarehouse virtual property. Chaging to the following worked:\n```\n    public class User : RelationalUserAccount\n    {\n        [MaxLength(50)]\n        public virtual String FirstName { get; set; }\n    [MaxLength(50)]\n    public virtual String LastName { get; set; }\n\n    [ForeignKey(\"WarehouseId\")]\n    public virtual Warehouse DefaultWarehouse { get; set; }\n\n    public virtual Int32 WarehouseId { get; set; }\n}\n\n```\n. ",
    "TheOtherOnes": "I still don't understand why EmailChangeRequestedEvent email is sent and not the PasswordResetRequestedEvent email when ResetPassword is called.\n. The 'Welcome' message would be AccountCreatedEvent, wouldn't it?  The one that is being sent EmailChangeRequestedEvent which requires me to enter my password (which I've just asked to reset because I forgot it).  \nThe text of the EmailChangeRequestedEvent email isn't appropriate for a request to verify an email address.  Plus, the web page is asking you to enter your password.  How can you if you've just asked to reset it?\nI see that you are saying that the email verification is still required after account creation.  If users can ignore it (because RequireAccountVerification is false), they are likely to.  In fact, the problem is that I took out the {confirmChangeEmailUrl} from the AccountCreatedEvent_body because it didn't seem to be necessary.  I guess now it is.  \nIs there any way to disable the need to verify the email?  My UX guy is the one who required that I take it out.\nAdam\n. Thanks, but the problem now is that the wrong event is fired.  EmailChangeRequestedEvent is fired when AccountCreatedEvent is fired.  Any chance this will be fixed?\n. I'm embarrassed to say that I have never done that and don't really know how.\n. I think I found the issue. It's in VerificationKeyPurpose.cs.  You've commented out VerifyAccount and when a user registers, ChangeEmail (3) is stored as the VerificationKeyPurpose in the database.  That's why later, when the user attempts to change their password they get a ChangeEmail email.\nnamespace BrockAllen.MembershipReboot\n{\n    public enum VerificationKeyPurpose\n    {\n        //VerifyAccount = 1,\n        ResetPassword = 2,\n        ChangeEmail = 3,\n        ChangeMobile = 4\n    }\n}\n. Ok, I figured out that the email confirmation does get sent, but it gets sent to the new email, not the old email.  \nNow I find it odd that, although I'm calling _userAccountService.ChangeEmailRequest, evt.GetType().Name is EmailChangedEvent.  This means that the EmailChanged email is sent rather than the ChangeEmailRequest email.  This is confusing because the process isn't really complete until confirmed and the username has been changed.\nI do realize that the email has already been changed by the time the email is sent, but with emailIsUsername=true, it really isn't complete.  If the verification email times out before the user confirms, they are stuck in limbo and can't get back.\nAdam\n. > So yea, I guess this might be an issue. Is the problem just the email notifications?\nSorry for my delay.  Yes, it's the events that are raised that cause the emails to get sent that are confusing me.  EmailChangedEvent vs. EmailChangeRequestedEvent.  They don't seem to be aligned properly.\n. I've already implemented a CustomEmailMessageFormatter based on your example to handle localized emails.  How can I take that to the next level and make them html?  Seems like I'd have to customize EmailEventHandler.  Is that possible?  Can you provide some guidance if that's the way to go?\n. Thank Brock.  That was easier than I thought.\nvar delivery = new SmtpMessageDelivery();\ndelivery.SendAsHtml = true;\nconfig.AddEventHandler(new EmailAccountEventsHandler<CustomUserAccount>(emailFormatter, delivery));\nNow all I have to do it redo all those message bodies :-) \n. Thanks @brockallen.  I'm not sure what you mean \"it can only handle doing confirmation of one thing at a time (email vs mobile).\"  Is there any chance of added MobilePhone to CreateAccount()?  Where you thinking that MobilePhone would always be added at a later time, rather than during registration?\nI thought I could just add a claim called MobilePhoneNumber during registration, but that added a record in UserClaims instead (that's a very nice feature though).\n. When you say \"state column\" do you mean VerificationStorage?\nI think what I'm seeing is a side effect of RequireAccountVerification=false.  Looks like you are updating the email address directly, yet all the verification fields are filled too.\nC#\n            if (!Configuration.RequireAccountVerification)\n            {\n                Tracing.Verbose(\"[UserAccountService.ChangeEmailRequest] RequireAccountVerification false, changing email\");\n                account.IsAccountVerified = false;\n                account.Email = newEmail;\n                this.AddEvent(new EmailChangedEvent<TAccount> { Account = account, OldEmail = oldEmail, VerificationKey = key });\n                Update(account);\n            }\nI don't suppose all the effects of RequireAccountVerification is documented anywhere.  It looks to me like it does many things.\n. ",
    "alex9o6": "@AlonCG I know it has been a lot of time since you asked your question. But in case you are still interested - ensure that you define all the properties of your custom UserAccount-derived type with the virtual keyword. This was the case for me.\n. ",
    "paheal": "Thanks for responding quickly. So, what if the user forgets the password they registered with between doing the registration and getting/performing the verification?\nWould they have to cancel the verification and restart the registration process?\n. ",
    "cloudybrain": "I really wish I can override this functionality.. my company doesn't do self service membership, the admin is the one that takes care of everything. They are the ones responsible for the creating of users, passwords, etc. I have rarely seen any current website where a user would have to confirm an account by typing in the same password after the account has been created. It's usually one of two options:\nSent to a page that says \"Confirmation success.. proceed to login\"\nor \"Please enter in new password\"\nThis enforced solution has gotten everyone annoyed.\n. Well I'm not sure how much of a security flaw it would be if the admin and the client already has a close connection. The current security flaw is that they'd have to email the password to the user they created the account for. So I decided to remove the feature of including an password.\nWhen an admin creates a user, they only enter the user's email. A password is automatically entered hardcoded behind the scenes. This password will never be known by the admin or the actual client. So I had to edit the IdentityManager directly to automatically include this private password.\nClient receives an email with a link to reset their password. The code uses GetByVerificationKey. When they sign in, and select a new password. The old password on the MembershipReboot end will be the actual password the admin used (without his knowledge), and all the user has to do is enter in their new password. When they change their password, I used the method: SetConfirmedEmail, to set the user as verified.\nThis will never work as long as they get the email with the confirmationkey, which is what I used in the previous method: GetByVerificationKey.\nThough this is more streamlined, I don't think this exposes any extra security flaws. As long as the workflow is: admin creates and maintains all users.. then users confirm by reset password as a response, this should be fine.\nYes.. security is hard, but I'm not giving you guys any flack for this project, it's an impressive solution, and I'm learning to love it more and more.\n. I think this problem is okay for them. We have a bunch of authorization rules that gets followed up when they successfully log in and confirm. admin and clients have a close knit relationship. This kind of security flaw is definitely something that might happen whenever any admin creates a user.\nI am also definitely using an integrated MR config for admin, with custom built emails. And yes, the SetConfirmedEmail is being triggered, but because of the new work flow of having their account confirmed when they reset the password, the \"required password reset\" doesn't need to be triggered. The email requests the user reset their password in order for their account to be confirmed :)\n. ",
    "ccrowhurstram": "Just taken the update! Thanks Brock\n. OK no problem girtsl. I agree myself that it might be not that valuable to localize the description of these satellite nuget packages.\nI know Microsoft does it, so was thinking it would be nice if MembershipReboot followed suite.\n@brockallen, do you think it's worth localizing the nuget metadata?\n. So Brock are you happy for an API change as mentioned: https://github.com/brockallen/BrockAllen.MembershipReboot/issues/487#issuecomment-72376170\n. OK makes sense\n. Thanks Brock\n. Not sure this is the only thread discussing uniqueness of email address...\nAnyway, I've hit problems with soft deleted records failing unique constraints - it's a general problem and a pain not limited to user accounts.\nOne general approach I've taken is to ensure that linq queries exclude soft deleted records by default. To then offer a consumer a way to \"opt in\" to returning set's that include soft deleted records on a query by query basis.\nI've found in practice that most code should not receive the soft deleted records and by making this the default, such problems like duplicates don't bite.\nFor those use cases that really need to see soft deleted, that code only asks for them.\nSo the above sounds a bit vague and lacking implementation detail. The reason for vagueness is that I have never been completely satisfied when using Entity Framework in making the implementation transparent to the majority of the code.\nC\n. Brok, another feature of MR is that it provides guidance with regard to higher level workflows around password reset, change of email, etc. Specifically I'm thinking of the methods on the UserAccountService class for executing these workflows.\nIn your exploration of AspId3 did you find a comparable set of operations implemented?\n. So in summary:\n- there are a number of features in MR that are not available in AspId3\n- it is bad use of someone's time (certainly bad use of yours) to rewrite MR against Asp Core given just these features\nI think you're right. I also think that it makes sense for a new project to be created \"on top of\" AspId3 that provides some of the features from MR. \nYou already hinted at something like this. But correct me if I 'm wrong, you have thought of this as more of a migration project with the implication that only existing MR consumers would use. Whereas I see this as providing value to anyone using AspId3.\nFrom me the important features from MR that would be included in this new project:\n- higher level workflow support\n- event bus\n- multi-tenancy\nC\n. Actually, I've got more changes I think that need to be added. See PR: https://github.com/brockallen/BrockAllen.MembershipReboot/pull/631\n. Brock, I've just realised I forgot to create an email template and handler for this new event.\nI was about to add it, but then if I do then isn't this a breaking change - ie now MR will start sending out an email when an account is unlocked when previously it didn't?\nWhat's your thoughts? Just add it and then include a breaking change section in the release notes and bump the version to 9.0.0?\n. Hi @tomascassidy, what's the motivation for bumping all the libraries? I'm sure there are good reasons, but technically I don't think it's required.. To me it looks like login will not be allowed, at least looking at these lines of code in the AuthenticationService. ",
    "adminnz": "It should be like this. However the policy on Expired passwords would need some consideration.\nIf a password is extremely old, is it wise to let someone still login with it?\n```\n[HttpPost]\npublic ActionResult Login(LoginViewModel model)\n{\n    if (this.ModelState.IsValid)\n    {\n        NhUserAccount account;\n        using (var tx = this.session.BeginTransaction())\n        {\n            if (this.userAccountService.AuthenticateWithUsernameOrEmail(model.Username, model.Password, out account))\n            {\n                this.authenticationService.SignIn(account, model.RememberMe);\n            if (this.userAccountService.IsPasswordExpired(account))\n            {\n                return this.RedirectToAction(\"Login\", \"ChangePassword\");\n            }\n            else\n            {\n                if (this.Url.IsLocalUrl(model.ReturnUrl))\n                {\n                    return this.Redirect(model.ReturnUrl);\n                }\n                else\n                {\n                    return this.RedirectToAction(\"Index\", \"Home\");\n                }\n            }\n        }\n        else\n        {\n            this.ModelState.AddModelError(string.Empty, \"Invalid Username or Password\");\n        }\n        tx.Commit();\n    }\n}\nreturn this.View(model);\n\n}\n```\n. ",
    "RickTheHat": "tx for the feedback, trying to figure out a way to make make membership w/email & social logins a simple process for web & mobile. lots of yak shaving to find the best solution :(\n. ",
    "mauriciod73": "Where is this api used? how is it used?\n. I'm using MembershipReboot's login via the OAuth2Client for authentication against IdSrv3. Is there a way to add just a flag for using this kind of authorization? Or would I need to override the implementation in IdSrv's code for this to work?\nThanks\n. Thanks guys :)\n. it's not available for update, neither in pre or in stable\n. That's weird... What version of membershipreboot.ef did it download? I'm at 7.1.1 and nuget doesn't find updates\n. Hey Brock, I updated with v8,* and now it all works great. Thanks!\n. ",
    "shaneprice": "Thanks guys.\nOk that makes since about the OwinApplicationInformation & AspNetApplicationInformation, it looks like the host name is set once at app_start which I believe is why I am getting the wrong url. \nI think your 2nd approach maybe the answer. The url needs to be dynamic as I don't know the name of the tenant creating the account so it this approach correct?\n```\n string GetApplicationBaseUrl(IOwinContext owinContext)\n    {\n       // var tmp = owinContext.Request.Scheme + \"://\" + owinContext.Request.Host;\n    return string.Format(\"https://{0}.mydomain.com\", owinContext.Request.Host);\n\n```\n. Great thank you.\n. Yes it did :)\nstring GetApplicationBaseUrl(IOwinContext owinContext)\n    {\n        return string.Format(\"{0}://{1}/\",owinContext.Request.Scheme, owinContext.Request.Host);\n    }\n. ",
    "mikeIpreo": "We are using Dapper. So, no lazy loading, or EF proxy.\nI ended up wrapping these fields and some others in a 'MyApplicationUserAccount' class derived from RelationalUserAccount:\n```\npublic class MyApplicationUserAccount: RelationalUserAccount\n{\n    public override IEnumerable Certificates\n    {\n        get\n        {\n            return base.Certificates ?? Enumerable.Empty();\n        }\n    }\npublic override IEnumerable<UserClaim> Claims\n{\n    get\n    {\n        return base.Claims ?? Enumerable.Empty<UserClaim>();\n    }\n}\n\n```\n...\n}\n. what does DbContextUserAccount derive from?\n. I am unable to reproduce this behavior anymore. please close. Thank you.\n. ",
    "apuchkov": "Config sample above is missing \"from\" attribute, so emails won't be sent silently!\nIt should be:\n<mailSettings>\n    <smtp deliveryMethod=\"SpecifiedPickupDirectory\" from=\"no-reply@mydomain.com\">\n        <specifiedPickupDirectory pickupDirectoryLocation=\"D:\\temp\" />\n    </smtp>\n</mailSettings>\nOtherwise this exception is thrown (can be seen only in a trace log):\n[SmtpMessageDelivery.Send] Exception: Value cannot be null. Parameter name: from\n. Here's an example how to find accounts by particular claim:\ncs\npublic IEnumerable<UserAccountQueryResult> GetUsersByClaim(string claimType, string claimValue)\n{\n    return userAccountService.Query.Query(\n        users =>\n            users.Where(user => user.ClaimCollection.Any(claim => claim.Type == claimType && claim.Value == claimValue)));\n}\n. Is it how you suggesting to use API to validate credentials: \nuserAccountService.Authenticate(account.Username, model.Password, out account);? \nIt will only tell if credentials are valid or not, but won't sign user in, correct?\nIs there some way to seamlessly sign user in (get a token from IdServ) without having him to enter credentials at IdServ?\n. Then I guess we have to sign user out after he changed his email and confirmed it. So he will have to re sign in via IdSvr and get updated email claim.\nThanks!\n. Thanks a lot for pointing to IssueLoginCookie(). It seems exactly what I need to get user authenticated at IdSvr without having him to reenter a password.\nI will just need somehow to expose this method in IdSvr app, so I can call it from my user account app. Custom MVC endpoint will probably do the job.\n. Just checking when BrockAllen.MembershipReboot.Ef version 9.0.0 nuget will be published. Thanks. I see a new version on nuget. Thanks for a quick turnaround!. ",
    "bertsinnema": "I think I found it.\nThis approach allows me to do some code-first migrations\n``` csharp\nusing BrockAllen.MembershipReboot.Ef;\nusing BrockAllen.MembershipReboot.Relational;\nusing System.Data.Entity;\nnamespace BrockAllen.MembershipReboot.Mvc.Model\n{\npublic class MyUser : RelationalUserAccount\n{\n    public string MyAttribute { get; set; }\n}\n\npublic class MyContext : DefaultMembershipRebootDatabase\n{\n    public MyContext() { }\n\n    DbSet<MyUser> Users { get; set; }\n}\n\n}\n```\n. Thanks a bunch!\nSent from my iPhone\n\nOn 25 jun. 2014, at 20:15, Brock Allen notifications@github.com wrote:\nYep, that's it. The best place is to start in the samples -- there are several, but the SingleTenantOwin is the best. Once you're comfortable with the basics, then the customizations is a good place to see how to further extend MR.\n\u2014\nReply to this email directly or view it on GitHub.\n. So I took the customization example.  Tough cookie at first but i think I get it now. Although I can't register a user cause it cannot write NULL to the Discriminator field in the UserAccount table.  Any idea what this could be?\n\nCannot insert the value NULL into column 'Discriminator', table 'AIT.dbo.UserAccounts'; column does not allow nulls. INSERT fails.\\r\\nThe statement has been terminated.\nI can't find where or what it is used for..\n. ",
    "mrotherm": "Hey. I had to deal with that odd discriminator error, too. Just if anyone else is stumbling upon this: In my case I made the mistake to inherit from DefaultMembershipRebootDatabase but should've inherited my CustomDatabase directly from DbContext instead:\n``` csharp\npublic class CustomDatabase : DbContext // instead of DefaultMembershipRebootDatabase\n{\n    static CustomDatabase()\n    {\n        Database.SetInitializer(new MigrateDatabaseToLatestVersion());\n    }\npublic CustomDatabase()\n    : this(\"name=MembershipReboot\")\n{\n}\n\npublic CustomDatabase(string connectionName)\n    : base(connectionName)\n{\n    this.RegisterUserAccountChildTablesForDelete<MyUser>();\n}\n\n// Configure new UserAccount type \"MyUser\"\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\n    modelBuilder.ConfigureMembershipRebootUserAccounts<MyUser>();\n}\n\n// ...\n\n}\n```\nIn your CustomizationsSample projects it's admittedly done right but pen slips can happen all the time, I guess ;-).\n. ",
    "SteveMets": "Yes.  But For your sample, I just need to see a fully configured EF sample, connecting to the MembershipReboot database.  I looked at the Customization sample, but when I started modifying the \u201cDefaultUserAccountRepository class as the constructor parameter to the UserAccountService. \u201c it would NOT work- it was not recognized, ReSharper did not suggest an existing class to replace (i.e. add the reference).   I\u2019d just like to see a working EF sample, and I can take it from there.  Thanks!\nWhat do you mean by an existing DB? You mean you already have tables for username and password storage?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/387#issuecomment-47808767.\n. I guess I'm not sure how to use the EF base class, given the topic says that modifications need to be made such as \u201cDefaultUserAccountRepository class as the constructor parameter to the UserAccountService.\"  What I was looking for is an EF example with these modifications made, that will run just like the other samples.  Whether I can then use this with my existing Client tables, etc. would be something I would have to extend from there.  When I work with EF I'm used to using an .edmx, modifying and adding Tables and Views, even SP's.  So I am just unfamiliar with how to get there without a little help.\nThanks\n. Hi,\nThe only reason I wanted a sample was to see how Mr. Allen would implement it.  I want to make sure that anything I modify will not break future releases.  I'm quite fine with making modifications, but I wanted the authors take on it.\nThanks\n. That's what I was going to do, since I have flexibility with the code, not the data.\n. PW's are in plain text in SQL table- again, not something I would advocate, but it's a 7 year old database that I'm forced to work with\n. ",
    "assimoes": "I think your best best would be to create your own useraccount repository. Just grab the EF sample provided and build from there. It's not that hard...I've just finished implementing a Neo4J repository just by modifying the RavenDB sample a little bit.\n. Alright, sounds fair.\nI'll try to implement a JsonConverter in my Neo4j repo sample and see if I can work this around without making changes to the UserAccount base class\n. ",
    "prism2407": "Sorry I couldn't get back earlier. \nI really liked the idea of mbr worrying about raising events when it thinks necessary and we just handle in EmailAccountEventsHandler, as oppose to we sending email manually.\nSuggestion: Can there be a delegate passed as argument to CreateAccount. The delegate can have a parameter UserAccount. This way it gives flexibility to end user to set any additional fields before adding the user to repository.\nI guess I will try to dig further on how to manually fire AccountCreatedEvent and still handling it centrally in EmailAccountEventsHandler.\n. yeah that would be ok, this way we can prepopulate fields. do you think you\ncan change and we can test on a nightly build.\n. The overloaded parameter definitely worked and I could populate\nfirstname/lastname in my email. Thanks brock.\n. I see your point, using PluralizingTableNameConvention might be difficult.\nbut it might be possible if we pass pluralize parameter to ConfigureMembershipRebootUserAccounts.\nmodelBuilder.Entity().ToTable(GetTableName(false, typeof(PasswordHistory)), SecuritySchema);\n```\n    private string GetTableName(bool pluralize, Type type)\n    {\n        if(pluralize)\n        {\n            var pluralizationService = DbConfiguration.DependencyResolver.GetService();\n        var result = pluralizationService.Pluralize(type.Name);\n\n        return result;\n    }\n    else\n    {\n        return type.Name;\n    }\n}\n\n```\nfunction definition can change as required.\nplease correct me if wrong. thanks.\n. Thanks for that, don't know how i missed that.\n. ",
    "teabaggs": "Hi Brock,\nNo please close it.\nOn Jul 25, 2014 11:26 AM, \"Brock Allen\" notifications@github.com wrote:\n\nAny further comments on this issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/390#issuecomment-50172362\n.\n. \n",
    "LeandroPT": "Hello,\nWith the beta 2 version of ODP 12C release 3, it is now possible with oracle to use code first and EF6\nHowever, there is a problem in the current migration class in the BrockAllen.MembershipReboot.Ef project, that uses the owner \"dbo\" prefix in the migration script.\nIn order to get it working i had to remove all the migration code, and change the initializer to CreateDatabaseIfNotExists.\n. Sorry for reopening this, but i managed with an interceptor to get this to work with Oracle. If you want i can send the sample.\n. ",
    "andy194": "Np, but thought the main problem was using a Guid as PK and not a sequential guid (although it's required to be issued by the Db).  Just wondered what your thoughts were and reasons for making the changes.  Granted it is just the provided Ef that is working this way.  Ok cheers.\n. ",
    "rallman": "See PR #402\n. ",
    "kebin": "I will do that over the weekend. \nAlso Queryable.SingleOrDefault(predicate) doesn't produce right result. RavenDb by default will only return first 128 items. So the SingleOrDefault will only be filtered on the first 128 items but not the entire collection!\nQueryable.Where(predicate).SingleOrDefault() should filter through entire collection.\nHere's the discussion on that\n. Yes so far :) I think this can still be improved by creating indexes on email/username. Also use Load<> to get the document by id instead of using Query. But that requires we either change ID to Id(ravendb convention) or change the ravendb convention to use ID instead. But I think thats a different discussion. Thanks!\n. No worries. I'm actually using a free plan at https://ravenhq.com/. But installing it locally is just as easy.  http://blogs.hibernatingrhinos.com/5/ravendb-in-practice-part-1-an-introduction-to-ravendb\n. One way to do this would be to register custom email account events handler that subclasses EmailAccountEventsHandler.\nThen you can then do many other things...format the email template, add extra recipient, log, use 3rd party email service etc..\nHere's a gist that shows a custom handler. This uses Mandril to send out actual email. The templates are stored in Mandril. https://gist.github.com/kebin/bc334de668ff5c60ead4\nBe sure to register this handler instead of a default one.\n. Ravendb queries are made against the index and not the collection directly.\nSo its likely that your index was stale when you tried to login. I.e that\nparticular account was not in the index yet.\nOn Jan 9, 2015 3:47 AM, \"Steven\" notifications@github.com wrote:\n\nClosed #480\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/480.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/480#event-216462194\n.\n. \n",
    "stevenfirstrowinc": "@brockallen does this still work for 8.2.1?  I'm calling UserAccountService.SetRequiresPasswordReset but get no email\n. @brockallen  nevermind I guess there is a method RequestAccountVerification.  sorry about that\n. Thanks for the response.  I'll update my code to use IsLoginAllowed.  I think that makes more sense to me.\n. Thank you.  It's working now, if only I knew what I did...\n. ",
    "skbelalmd": "I think there is an issue with RequestAccountVerification api.\nIt is not sending any e-mail.\n. The user account is verified.\nCan you please share the exact portion of the code where I should look.\n. ",
    "galenp": "I'm actually encountering this just now also, but figured it was more than likely a configuration issue. The fact @skbelalmd has hit this at the same time tho... \nSo assuming SMTP is correctly configured.\n``` c#\n //Create Account\nvar service = new UserAccountService(userAccountRepository);\nvar userId = Guid.NewGuid();\nservice.CreateAccount(registration.Email, registration.Password, registration.Email, userId);\nservice.AddClaim(userId, \"name\", displayName);\nservice.AddClaim(userId, \"email\", registration.Email);\nif (!string.IsNullOrEmpty(registration.Mobile))\n    service.AddClaim(userId, \"mobile\", registration.Mobile);\nif (!string.IsNullOrEmpty(registration.Company))\n    service.AddClaim(userId, \"company\", registration.Company);\nservice.RequestAccountVerification(userId); \n```\nAm I correct to assume there is no more additional configuration required for the 'default' verification emails to be sent by MR to the email address of the new account?\nI do understand that the URL's contained within these emails would be incorrect for my implementation.\n. Sorry Brock, just realised how old this ticket originally is...\n. ",
    "buybackoff": "Thanks for your quick comments! Am I right that I should use Thinktecture.IdentityServer.v3.EntityFramework instead of MembershipReboot.EF for a new project (and IdentityManager will soon support it)?\n. Well, the only thing I need is JWT/cookieless Auth and least friction I could get it for a single page app and different clients. It was a hard day for me to understand differences between all your projects... Would appreciate a guide on what and when to use different projects from http://thinktecture.github.io/ and you repos.\nAs I understand (watched your videos and all I could find on the web), IdentityServer works with the new OpenId Connect 1.0 standard, while other projects do not and are too old.\nAlso it would be nice to know if the projects will remain FOSS after beta-1 to start working with them.\n. I think I could already tell almost as well as you which project for what, in isolation... :)\nBut what should I use for Single_page_app/Desktop/Mobile/(future_proof) stack? Should I learn Scala!?\nEven the start page http://thinktecture.github.io/ is extremely ambiguous... Which are better - the greatest ones or the released ones?\nI have just given up on ServiceStack (because \"it is the greatest, but hell knows when actually\") for OWIN, but the route from 0 to 1 on OWIN is even harder that in SS (but SS has problems from 1 to further, exactly what your libraries are for). Really need some overview/giudance on where the technology goes in the context of .NET/ASP/OWIN.\n. Hope you enjoy you vacations after the beta-1 release :) Your (et al.) libraries look the most comprehensive and useful, hope you will not repeat ServiceStack's 'no-open-standard'-path! \nI will continue playing with your latest v3, it looks great.\n. ",
    "eman-ali-mughal": "Hi Brock, \nThank you so much, I was referring to Old Customization code, But this code helps me and email is going out correctly. I have been stuck in this for about a week, but you have solved my problem :)\nThanks Again\nEman\n. Thank you @brockallen and @pmbanugo.\nIt worked for me now AutSrv is signing in the user, and I believe that after signing in, we can access User.Identity.Name and IsAuthenticated fields ?\n. ",
    "necttoagsn": "Thanks,\nThat clarifies. This is a strange use case in that we are partitioning users by tenant, one tenant uses robust registration/verification, the other does not verify (many of these users will not have access to email).\nIt seems that Security.EmailIsUsername assumes security.requireAccountVerification is true. Correct?\n. ",
    "nparadis": "Sorry.  New to git hub.\nThanks\nNorm Paradis   MCSA\nSent from Samsung Mobile\n-------- Original message --------\nFrom: Brock Allen\nDate:09-11-2014 5:29 PM (GMT-06:00)\nTo: \"brockallen/BrockAllen.MembershipReboot\"\nCc: Norm Paradis\nSubject: Re: [BrockAllen.MembershipReboot] Owin Example using Ninject instead of Autofac (#424)\nAll set then, I trust?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/424#issuecomment-55343425.\n. ",
    "mdmoura": "Got it ... Thank you.\n. I mean a claim can be anything.  From a birthday, an address, etc. And\noften it is necessary to run queries on these values or is some cases there\nare relations on the database, for example, to a country lookup table ...\nJust a few examples ... holding claims as it is can be enough in many cases\nbut not all. IMHO the ideal would be to load claims from the database using\na custom interceptor so it would be database scheme independent ...\nEm 23/09/2014 00:59, \"Brock Allen\" notifications@github.com escreveu:\n\nIs this advisable in what way? What are you looking for otherwise? What\nare you trying to accomplish?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/433#issuecomment-56461367\n.\n. Yes, that is what I am doing ... I get data from user, countries, and roles\ntables and fill the user claims on the application. Thank you.\nEm 23/09/2014 01:45, \"Brock Allen\" notifications@github.com escreveu:\nYep, that's the flexibility of a claim. But if you need to access it as a\ncolumn, than add a property to the user account class. You have the choice\ndepending on how you want the value stored.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/433#issuecomment-56464501\n.\n. \n",
    "pmbanugo": "You just need to use to do just like @brockallen said above. here is a sample code of instantiating Authentication service without an IoC\n``` c#\nauthService = new SamAuthenticationService(new UserAccountService(configuration,accountRepo));\nuserAccountService = authService.UserAccountService;\nOR\nauthService = new SamAuthenticationService(userAccountService);//since you're able to create the account service\n```\nThe code above is using the derived implementation of AuthenticationService without an IoC container.\n. Sure\n. If it's an empty database the tables will be added automatically, if it's not created it will create the database with the required tables. If you already have a database u use for your app, it will only add the required tables. \nSent from my iPhone\n\nOn 2 Oct 2014, at 05:54 pm, greatbear302 notifications@github.com wrote:\nWhere exactly do the tables live when using MembershipReboot with EntityFramework?\nThis article http://pmbanugo.wordpress.com/2014/07/12/getting-started-with-membershipreboot/\nexplains to add a connection string in web.config that points to a local .mdf file. I can create an empty mdf file, but how do I create the tables etc. which the MR assembly expects to find in that mdf?\nPuzzling, sorry.\n\u2014\nReply to this email directly or view it on GitHub.\n. If you aren't using katana you can try SimpleAuthentication (https://github.com/SimpleAuthentication/SimpleAuthentication) it's a nice way to add social authentication to your web app.\n\nPeter\nOn Wednesday, October 8, 2014 9:27 PM, greatbear302 notifications@github.com wrote:\nFair enough. Will give it a try. Thanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. check the wiki https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/EF-Configuration\nPeter Mbanugo\nOn Monday, October 20, 2014 3:00 PM, Brock Allen notifications@github.com wrote:\nI'd suggest configuring in  your DI system a custom instantiation of your DbContext-derived class passing the connection string you want (the DefaultMembershipRebootDatabase has a ctor that will accept one).\n\u2014\nReply to this email directly or view it on GitHub.\n. @amirhp there is a difference between role based authorization and claims based authorization. Your application is claims aware. In claims-aware applications, the role is expressed by a role claim type. check this https://msdn.microsoft.com/en-us/library/hh545448(v=vs.110).aspx to see if it clears your misunderstanding.\n. Ok. Found that as the \"VerificationKeyLifetime\" settings. Thanks\n. Ok. The one of a different MR config I can get around by, but I can't seem to find an API to mark the user's account as verified. Please note, that I want this to be done at users account creation without sending email. \n. Thanks. will try that out now. \n. yes there is a user with that name. it is just moving the user from one tenant to another. From what you're saying, I the solution should be: Delete and recreate the the user account to a different tenant?\n. it's the same person. there are no users with the same name in the different tenants. It's just moving them to a diff tenant, basically, trying to change the tenant value in the db.\n. I think it will be a tricky one as I need to know the users password. I don't want to pop-out a screen asking for password. I just want to silently move the user to a different tenant. What I can think of right now as a solution to my problem is just a simple query called in code that updates the value of the tenant column\n. I'm using WIF\n. Ok thanks\n. ",
    "billpratt": "Right but the reset password functionality uses a default email template that includes the cancel verification link, correct? Can you override the default email template for resetting your password?\n\nOn Sep 24, 2014, at 10:32 PM, Brock Allen notifications@github.com wrote:\nWell, you can email your user any URL you want and then do anything you want if they click those links. So in short, the built-in stuff only needs the one, but you could do something different.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "digitalgym": "Found related issue\n. The fix is here https://github.com/brockallen/BrockAllen.MembershipReboot/issues/106\n. Arrrr nothing what do you recommend?\n. Sorry I'm using the MongoDb sample\n. ",
    "chrisaswain": "As an extra safe-guard, is it possible to create a CustomUserAccountService and override the Authenticate method so I can add a check for a custom UserAccount property like AccountExpiration (DateTime)?  It looks easy enough to make that change, but I'm not sure how to tell the rest of MembershipReboot to use the new CustomUserAccountService.  Or even if that is possible. \n. Great!  I'll give that a try.  I was afraid there was going to be more to using the CustomUserAccountService than just wiring it up in my IoC container.  Thanks for the fast response!\n. Here is the code from my Web Api Put method.  The _userAccountService object is the UserAccountService injected into the ApiController via the Unity container.\n```\n    [Route(\"{id:guid}\")]\n    [ResponseType(typeof(AccountRepresentation))]\n    public async Task Put(Guid id, [FromBody]UpdateAccountRepresentation updateAccountRepresentation)\n    {\n        if (id != updateAccountRepresentation.Id)\n        {\n            return BadRequest(\"The Id in the url and the Id in the request body do not match.\");\n        }\n    CustomUserAccount customUserAccount = null;\n\n    var getCurrentCustomUserAccountTask = new Task<CustomUserAccount>(() =>\n    {\n        customUserAccount = _userAccountService.GetByID(id);\n        customUserAccount.UpdateWith(updateAccountRepresentation); //Maps changes to CustomUserAccount from the updateAccountRepresentation object.\n        return customUserAccount;\n    });\n\n    var updateCustomUserAccountTask = getCurrentCustomUserAccountTask.ContinueWith((t) =>\n    {\n        _userAccountService.Update(customUserAccount);\n    });\n\n    var updateCustomUserAccountUsernameTask = updateCustomUserAccountTask.ContinueWith((t) =>\n    {\n        if (updateAccountRepresentation.Username != customUserAccount.Username)\n        {\n            _userAccountService.ChangeUsername(id, updateAccountRepresentation.Username);\n        }\n    });\n\n    var updateCustomUserAccountEmailTask = updateCustomUserAccountUsernameTask.ContinueWith((t) =>\n    {\n        if (updateAccountRepresentation.Email != customUserAccount.Email)\n        {\n            _userAccountService.ChangeEmailRequest(id, updateAccountRepresentation.Email);\n        }\n    });\n\n    var getUpdatedCustomUserAccountTask = updateCustomUserAccountEmailTask.ContinueWith((t) =>\n    {\n        customUserAccount = _userAccountService.GetByID(id);\n    });\n\n    getCurrentCustomUserAccountTask.Start();\n\n    await getCurrentCustomUserAccountTask;\n\n    return Ok(customUserAccount.ToAccountRepresentation());\n}\n\n```\n. Sorry.  The async code was my attempt to force the processes to run in a particular order and it originally had some sleep code in there to give the database time to update before trying the next method.  \nHere is the code now:\n```\n        CustomUserAccount customUserAccount = null;\n    customUserAccount = _userAccountService.GetByID(id);\n    customUserAccount.UpdateWith(updateAccountRepresentation); //Maps changes to CustomUserAccount from the updateAccountRepresentation object.\n\n    _userAccountService.Update(customUserAccount);\n\n    if (updateAccountRepresentation.Username != customUserAccount.Username)\n    {\n        _userAccountService.ChangeUsername(id, updateAccountRepresentation.Username);\n    }\n    if (updateAccountRepresentation.Email != customUserAccount.Email)\n    {\n        _userAccountService.ChangeEmailRequest(id, updateAccountRepresentation.Email);\n    }\n    customUserAccount = _userAccountService.GetByID(id);\n\n    return Ok(customUserAccount.ToAccountRepresentation());\n\n```\nI get the CustomUserAccount by Id, map the changes to the writable properties on it, update it, then update the Username and Email.  Finally, I get a refreshed version of the CustomUserAccount to return back to the client.  \nI made some changes based on the following issue:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/476\nAnd I think things are working fine now.\n. I think the root of the problem somehow was coming from the fact that I was using both MR.WebHost and MR.Owin assemblies.  Removing the use of MR.WebHost seems to have cleared things up.\n. I think I might be.  I started off with the project being just a plain vanilla Web Api template with the default \"Help\" area and all.  Then I added the startup.cs and tried to move everything over to it and stop using the Global.asax. \nI plan to deploy it to IIS on Azure at a later date, so I don't want to do anything that will prevent that.  \nWhat might I need to do to strictly use the Owin model and stop using the System.Web model?\n. Okay, I just removed the reference to MR.WebHost and there are some things broken.  \nI have the following code that is not recognized now:\n```\n        var appinfo = new AspNetApplicationInformation(\"Test\", \"Test Email Signature\",\n            \"UserAccount/Login\",\n            \"UserAccount/ChangeEmail/Confirm/\",\n            \"UserAccount/Register/Cancel/\",\n            \"UserAccount/PasswordReset/Confirm/\");\n        var formatter = new CustomEmailMessageFormatter(appinfo);\n    config.AddEventHandler(new EmailAccountEventsHandler<CustomUserAccount>(formatter, delivery));\n\n```\nAnd in my Unity regristration:\ncontainer.RegisterType, SamAuthenticationService>();\nIt doesn't recognize \"AspNetApplicationInformation\" and \"SamAuthenticationService\".  Do I even want these anymore?  If so, what is the MR.Owin way of doing it?\n. Here is my full configuration for MR:\n```\npublic class MembershipRebootConfiguration\n{\n    public static MembershipRebootConfiguration Create()\n    {\n        var settings = SecuritySettings.Instance;\n        settings.MultiTenant = false;\n        settings.DefaultTenant = ConfigurationManager.AppSettings[\"defaultMembershipTenant\"];\n        settings.RequireAccountVerification = false;  //TODO:Set this to true before pushing to production\n    var config = new MembershipRebootConfiguration<CustomUserAccount>(settings);\n    config.AddEventHandler(new DebuggerEventHandler<CustomUserAccount>());\n\n    //config.RegisterPasswordValidator(new CustomPasswordValidator());\n    config.ConfigurePasswordComplexity(6, 4);\n\n    config.AddCommandHandler(new CustomClaimsMapper());\n\n    var delivery = new SmtpMessageDelivery();\n\n    var appinfo = new AspNetApplicationInformation(\"Test\", \"Test Email Signature\",\n        \"UserAccount/Login\",\n        \"UserAccount/ChangeEmail/Confirm/\",\n        \"UserAccount/Register/Cancel/\",\n        \"UserAccount/PasswordReset/Confirm/\");\n    var formatter = new CustomEmailMessageFormatter(appinfo);\n\n    config.AddEventHandler(new EmailAccountEventsHandler<CustomUserAccount>(formatter, delivery));\n    config.AddEventHandler(new AuthenticationAuditEventHandler());\n    config.AddEventHandler(new NotifyAccountOwnerWhenTooManyFailedLoginAttempts());\n\n    config.AddValidationHandler(new PasswordChanging());\n    config.AddEventHandler(new PasswordChanged());\n    config.AddCommandHandler(new CustomValidationMessages());\n\n    return config;\n}\n\n}\n```\n. That did it!  Thanks!\n. Two questions come to mind with the no password suggestion:\n1. How would I create a user with no password if I have MR configured to require a strong password?\n2. If there is not a password for a user, but that user has a valid username, wouldn't that be a security hole that could allow someone to use that username with a blank password to authenticate?\n. Regarding queston #1 I suppose I could generate a random strong password.  I could also store an extra bit of metadata in the UserAccounts table indicating that the account is external only.  Then, if they wanted to switch over to using just a local login, that process would be little more than the password change/reset process.  \nOnce the user is created using just their linked account credentials, I suppose the login process via the \"/token\" endpoint should include a way for an app to pass the external access token provided by Google to the client app rather than the standard username/password/client_id/grant_type combo in order to get a valid JWT for my web api.  Does that sound right?  If so, is there a standard OAuth flow that I should follow for requesting a local access token using an external access token?\n. So even though in my MembershipRebootConfiguration I have config.ConfigurePasswordComplexity(6, 4);, I should be able to call '_userAccountService.CreateAccount(\"someUserName\", null, ...)` and it won't give me a validation exception?\nNote that I need the password complexity for the scenarios when the user is registering with just a local account.  The app will support both scenarios.\n. Awesome!  No, haven't tried it yet.  Just working through the logic and process flow.  Not sure if you hear this enough, but you've done a great job with MR!\nI know this is off topic, but you wouldn't happen to know if there is an OAuth 2 flow (maybe a special grant_type) that would support a client passing the Google or Facebook access_token to my auth provider \"/token\"?  All of the example I find out on the web have a separate Web Api action like \"api/Account/ObtainLocalAccessToken(string provider, string externalAccessToken)\" and that feels like it is breaking the OAuth flow.  It seems like there should be a grant_type=external, provider=Google and external_token=xxxxx...\n. Excellent!  I was reading through the OAuth 2 specs, but you just saved me some time!  Thanks!\n. Maybe it would make sense to refactor the protected Authticate(TAccount account, string password) method into an AuthenticateAccount and VerifyPassword method so that the AuthenticateAccount method could accept just the account and run the validation logic.  Then the existing Authenticate method could just call the VerifyPassword like it does now and also call the AuthenticateAccount method.  That would allow for cases of external linked account to authenticate an account without requiring a password.  I would make AuthenticateAccount a protected method like Authticate(TAccount account, string password) with a signature of AuthticateAccount(TAccount account), then I could implement an AuthenticateLinkedAccount public method that internally calls the AuthenticateAccount method.  What do you think?\n. I created this method as a stopgap:\n```\n        /// \n        /// Similar to the protected method Authenticate, this method authenticates a user account.\n        /// Unlike the protected Authenticate method, this method does not verify a password.\n        /// This method is to be used in cases where the user account was found via a linked account\n        /// such as a call to GetByLinkedAccount.\n        /// \n        /// A CustomUserAccount object.\n        /// Returns true if the account is active and can be used.  Returns false if not. \n        public bool AuthenticateLinkedAccount(TAccount account)\n        {\n            Tracing.Verbose(\"[UserAccountService.Authenticate] for account: {0}\", account.ID);\n        bool result = false;\n\n        try\n        {\n            if (!account.IsLoginAllowed)\n            {\n                Tracing.Error(\"[UserAccountService.Authenticate] failed -- account not allowed to login\");\n                this.AddEvent(new AccountLockedEvent<TAccount> { Account = account });\n                return false;\n            }\n\n            if (account.IsAccountClosed)\n            {\n                Tracing.Error(\"[UserAccountService.Authenticate] failed -- account closed\");\n                this.AddEvent(new InvalidAccountEvent<TAccount> { Account = account });\n                return false;\n            }\n\n            if (Configuration.RequireAccountVerification &&\n                !account.IsAccountVerified)\n            {\n                Tracing.Error(\"[UserAccountService.Authenticate] failed -- account not verified\");\n                this.AddEvent(new AccountNotVerifiedEvent<TAccount>() { Account = account });\n                return false;\n            }\n\n            Tracing.Verbose(\"[UserAccountService.Authenticate] authentication success\");\n            account.LastLogin = UtcNow;\n            this.AddEvent(new SuccessfulPasswordLoginEvent<TAccount> { Account = account });\n\n            if (account.AccountTwoFactorAuthMode != TwoFactorAuthMode.None)\n            {\n                Tracing.Verbose(\"[UserAccountService.Authenticate] doing two factor auth checks: {0}, {1}\", account.Tenant, account.Username);\n\n                bool shouldRequestTwoFactorAuthCode = true;\n\n                GetTwoFactorAuthToken getToken = new GetTwoFactorAuthToken() { Account = account };\n                ExecuteCommand(getToken);\n\n                if (getToken.Token != null)\n                {\n                    Tracing.Verbose(\"[UserAccountService.Authenticate] GetTwoFactorAuthToken returned token\");\n\n                    var verified = VerifyTwoFactorAuthToken(account, getToken.Token);\n                    Tracing.Verbose(\"[UserAccountService.Authenticate] verifying token, result: {0}\", verified);\n                    shouldRequestTwoFactorAuthCode = !verified;\n                }\n\n                if (shouldRequestTwoFactorAuthCode)\n                {\n                    if (account.AccountTwoFactorAuthMode == TwoFactorAuthMode.Certificate)\n                    {\n                        Tracing.Verbose(\"[UserAccountService.Authenticate] requesting 2fa certificate: {0}, {1}\", account.Tenant, account.Username);\n                        result = RequestTwoFactorAuthCertificate(account);\n                    }\n\n                    if (account.AccountTwoFactorAuthMode == TwoFactorAuthMode.Mobile)\n                    {\n                        Tracing.Verbose(\"[UserAccountService.Authenticate] requesting 2fa mobile code: {0}, {1}\", account.Tenant, account.Username);\n                        result = RequestTwoFactorAuthCode(account);\n                    }\n                }\n                else\n                {\n                    Tracing.Verbose(\"[UserAccountService.Authenticate] setting two factor auth status to None\");\n                    account.CurrentTwoFactorAuthStatus = TwoFactorAuthMode.None;\n                }\n            }\n        }\n        finally\n        {\n            UpdateInternal(account);\n        }\n\n        Tracing.Verbose(\"[UserAccountService.Authenticate] authentication outcome: {0}\", result ? \"Successful Login\" : \"Failed Login\");\n\n        return result;\n    }\n\n```\nI also had to override/new the following properties on my CustomUserAccount that inherits from RelationalUserAccount since the new method needs to modify them and they are inaccessible:\n```\n        public virtual new DateTime? LastLogin { get; protected internal set; }\n    public virtual new TwoFactorAuthMode CurrentTwoFactorAuthStatus { get; protected internal set; }\n\n```\n. I wanted to call Authenticate because it seems to have validation logic to determine if the account not only exists, but is verified, active/closed, login allowed, etc.  As you can see in my posted code above, I just took out that logic and created my own new AuthenticateLinkedAccount method that will run those checks on the account found based on the provider string and id.  \nI was just thinking it might make sense to pull out the logic that does that checking in the Authenticate method into another protected method so it can be used by Authenticate and any methods users want to add like my AuthenticateLinkedAccount method.  \nHopefully I'm making sense and not misunderstanding how the code should be used.\n. Looking forward to seeing what you come up with.  In the meantime, I have my work-around, but it would be nice to be able to use MR code that stays up to date rather than my cheap knock off.\n. ",
    "greatbear302": "What is it some magic?! LOL thanks for quick reply.\n. On the page https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration where there is C# code towards the end - the EmailAccountCreatedEventHandler class needs to be created by me? VS is giving type or namespace could not  be found.\nAlso it needs to be config.RequireAccountVerification instead of config.Settings.RequireAccountVerification on that page\n. Could you kindly clarify - do you mean line 26-29 in the attached image is not necessarily required? Also, why is VS complaining about the EmailAccountCreatedEventHandler  type?\n\nAlso, does it write the trace log to the database or some text file or windows application events? I didn't notice any windows or database logs. Do I need to configure something to start viewing the logs? \n. I was looking at the email configuration help page on https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration\nLooked at the logs, I don't see anything particularly saying \"email send error\" or \"email sent successfully\". Here is the applicationData part of the log\n\n. Working now. Got the confirmation email. \nI was following the getting started article on http://pmbanugo.wordpress.com/2014/07/12/getting-started-with-membershipreboot/\nI guess these lines can be added to that tutorial in Step 3:\nvar config = MembershipRebootConfig.Create();\nkernel.Bind<MembershipRebootConfiguration>().ToConstant(config);\nThank for pointing to the right direction!\n. Sorry I need to re-word and be more specific about my issue. I went to Facebook and downloaded the javascript code to generate the login button. In my app, once that button is clicked, and OAuth happens, the \"flow\" returns to my app (MR had nothing to do until this point). What is the next step? Should I call the LinkedAccountController's Login action so that it can be determined if this FB user is registered, verified and so forth? I guess I'm answering my own question but need a confirmation that I'm on the right path. The confusing part is calling the Login action after login has actually happened.\n. I just noticed the BrockAllen.OAuth2.OAuth2Client.OAuthCallbackUrl property and the OAuthCallback action in the LinkedAccountController. \nWill this property and action not be sufficient to map FB (etc.) user to my app user - when used in conjunction with (in FB case) the redirect_uri property in https://www.facebook.com/dialog/oauth?client_id={app-id}&redirect_uri={redirect-uri}? \nWhy do I need Katana?\n. Fair enough. Will give it a try. Thanks.\n. ",
    "parkinsona": "I am getting the following error:\n[SmtpMessageDelivery.Send] SmtpException: The operation has timed out.\nThis is curious, because I'm using the same smtp setup in both the Owin sample and IdentityServer.\nI tried adding my own call to send a test email from IdentityServer, but this also timed out. \nTo make sure I'm not losing the plot, I started a fresh console application to test. This worked fine.\nSo the smtp server is correct, but something in the identityserver config is stopping it from running.\nIs there something in OWin that could be stopping emails?\n. Hi Brock,\nThis was a network issue. After trying many different exchange servers with our system admin, we discovered Symantec Endpoint was blocking some of the outgoing emails. Others it would delay by up to 15 mins, and some it allowed through. Disabling some things in symantec has this working again. This was a tricky one to debug because the sample app had 100% success, whereas the others would behave weirdly.\nGlad to have it sorted now.\n. Also, is there a way to set ApplicationInformation from the web.config using the membership reboot section?\n. Thanks for the update. It would be a handy feature, but no biggie.\n. SetPassword API is what I was after.\nGood to know I can create an account with a null password. Is there a way to do this in IdentityManager?\n. That sounds promising. I'm guessing I could use the same principal to also add other properties for the Create user page in IdMgr. \nIs this the spot to add it? But I would add/remove items from meta.UserMetadata.CreateProperties?\n``` c#\n  idMgr = new MembershipRebootIdentityManagerService(userSvc, userRepo, groupSvc, groupRepo, () =>\n            {\n                var meta = idMgr.GetStandardMetadata();\n            meta.UserMetadata.UpdateProperties =\n                meta.UserMetadata.UpdateProperties.Union(\n                    new PropertyMetadata[] { \n                        idMgr.GetMetadataForClaim(Constants.ClaimTypes.Name, \"Name\")\n                    }\n                );\n            return Task.FromResult(meta);\n        });\n\n```\n. I hada look through how the meta data works and it looks pretty cool. But I have a few questions.\nI can see that the required update properties are automatically added to the  create properties.\nTo make the password optional, I tried the following:\nc#\nvar pwordProp = meta.UserMetadata.UpdateProperties.Where(t => t.Name == \"Password\");\n                foreach( var prop in pwordProp)\n                {\n                    prop.Required = false;\n                }\nThis removed the password fields from the Create User screen, but it errored when I hit the Create button. I assume this is because something else requires the Password property. There is nothing in the event log unfortunately.\nI am using the RelationalUserAccount as my UserAccount type. Is there a way to make password optional using this?\n. I'm going to close this issue, because my new questions are related to IdentityManager.\nThanks for helping with the initial queries.\n. That's good to know. We figured that we weren't sending any information back to the client application so if the redirecturi did get fiddled, the suspect site wouldn't get any of our info.\nAlso, we'd travelling via SSL so that should give us another layer.\n. Thanks for confirming this.\n. Hey Brock, \nWill IdentityServer.MembershipReboot be updated to include this update?\n. Hi Brock,\nI had already coded my suggestion up, but I redid it as per your suggestion with a 2nd MR config. It differs by just the VerificationKey expiry.\nWould be nice if there was a 2nd attribute to set these separately by default.\nI'm sorted for now :)\n. Thanks for this update. It looks good now.\nI noticed the following in the releast notes for v8.3: \noverloaded authN APIs to indicate authentication result (e.g. locked account, failed credentials, etc)\nDoes this mean it would be possible to show  an IdentityServer user that their account is locked?\n. Is there something I need to update in IdentityServer to make this happen?\nIn the UI it kept showing me username or password invalid after the account was locked.\nI did have the \"account in lockout due to failed login attempts\" in the event log though.\n. Thanks for that. At the moment, I don't really need it. But it's good to have it for the future.\n. I have also tried adding in different event types, but with no success.\n. The only reason I'm really looking at a custom event is because I can't see a way of logging when external logins occur. So I guess, is it something I should be doing, or can we add an event for when someone logs in externally? Not sure if this is feasible or not.\n. Ok, I found out where I was going wrong.\nRaiseEvents was not being fired after I added my customEvents. Moving them prior to AddOrUpdateLinkedAccount gets around this because it calls Update(account), which in turn calls RaiseEvents.\nThis is what my ProcessExternal looks like now:\n``` c#\n protected override async Task ProcessExistingExternalAccountAsync(Guid accountID, string provider, string providerId, IEnumerable claims)\n        {\n            //UpdatedLinkedAccount\n            var user = userAccountService.GetByID(accountID);\nvar cuas = (userAccountService as CustomUserAccountService);\n            cuas.AddEvent(new SuccessfulExternalAccountLoginEvent { Account = account, ProviderAccountId = providerId, ProviderName = provider });\n        //Remove any duplicate claims to avoid any DB constraint issues when adding them\n        var distinctExternalClaims = claims.GroupBy(t => t.Type + t.Value).Select(t => t.First());\n\n        //Create a linked Account record for the external user and update linked claims. The following will remove all existing linked claims and add the newly supplied ones.\n        userAccountService.AddOrUpdateLinkedAccount(account, provider, providerId, distinctExternalClaims);\n\n        return await SignInFromExternalProviderAsync(user, provider, providerId, claims);\n    }\n\n```\nNow having said that. Wouldn't it make more sense to add a \"SuccessfulLoginFromExternalProviderEvent\" that is raised in AddOrUpdateLinkedAccount ?\n. Yes that would be great. This is MR ;) \n. No worries. I still think its amazing you can manage all these things.\nIn the new event, could we include ProviderName and ProviderAccountID in the object?\n. I think I was going to be stuck raising my own event without some form of update to the UserAccount table. I think to get around this, if EventBusUserAccountRepository userRepository; in UserAccountService was made protected, then I could call RaiseEvents myself for any other custom events I may have.\nI wouldn't need this for ExternalProvider Logins. However, in my UserManagement application, I may wish to capture other update events that are specific to my application.\n. Hi, \nI've come across another scenario where I would want to write my own events.\nIs it possible to expose EventBusUserAccountRepository from UserAccountService so that I can call RaiseEvents? Or, could you add a RaiseEvents & AddEvent method to UserService?\n. Exposing IAllowMultiple would also be helpful.\n. So I'm thinking the best way to pass these through would be updating the eventHandler and updating my config like so:\nc#\n  Config.AddEventHandler(new AuditEventHandler(HttpContext.Current.User as ClaimsPrincipal));\nThis would be ok, but I'm using a static MembershipRebootConfiguration as per the samples in the Customizations Sample. Does the MembershipRebootConfiguration have to be static? Will there be any odd effects if its non-static?\nMy other thought, is that I could remove the Task.Run from my controller action and make the call synchronous. Then in the View, I would call it using Ajax, instead of a full post back. This might give me the desired result. The only concern here, is if the user navigates away from the page, the ajax response won't be received. This is ok from a user perspective because they'll be sent an email on completion of the process.\n. ",
    "esko22": "Thanks for the quick response. When I get some time I'll trace the gen'd SQL and see what it's not happy about.\nAlso, just want to say thanks to you and Dominick for everything from Identity Server down. The entire stack is awesome!\n. Just to make sure I am on the same page,  you are considering removing sealed from the MR Migration Configuration class and exposing a virtual to allow you to inherit and tap in? Or maybe I am completely off here...  \nI was originally looking at from the prospective of being 100% out of the box or not.. With no modifications needed to MR, it would be nice to have it as something you can specify in the MR factory configuration like a migration provider type... which under the hood would instantiate the appropriate migration type for Database.SetInitializer() at runtime... of course assuming a MySql migration provider existed in the MR library removing the need to extend anything nor need the knowledge of calling the Database.SetInitializer(). \nJust allow the extension and set your inherited type in the MR factory config? \n. Ahhh... totally makes sense to not want to go that route... turning it into your maintenance burden would suck...  Much easier to just post an example of how to extend.\nYour solution sounds good me.\n. Sorry for the delayed response. Yes, my work around was to use a derived class so I could specify the MigrationSqlGenerator. \nInitially I was just hoping to get an out of box solution since I didn't change the schema at all.  I wasn't sure if it would make sense to extend the MR migration config in the case you needed to put something  explicit in there but since it is sealed you can't.\nI don't believe the command line allows you to specify the migration configuration class, only the specific migration to ran. With as wonky as migrations get, I think your call to put it on the owner makes complete sense as long as nothing custom winds up in your MR migration config class. \n. ",
    "Topkapi": "@brockallen I am using SimpleInjector and I am already doing what you are saying. Here is the code that I am using:\ncontainer.Register(()=>new DefaultUserAccountRepository(\"connectionStringName\"));\nand it works fine when I am using the code from GitHub repo. The trouble arises when I use the nuget package. When I decompile the source and look at the DefaultMembershipRebootDatabase class, here is what I see:\npublic DefaultMembershipRebootDatabase(string nameOrConnectionString)\n    {\n    }\nI am pretty sure that is \"not\" the way it should be. It should call the base constructor and pass the connectionstring along. I think it's a bug in nuget package. Can you look at that?\nThank you.\n. I tested it. Looks like it accepts context now instead of connection string name but it is working properly. Thank you for taking care of it.\n. ",
    "mcianc": "i'm using the nuget version and after many months from last post I see the same bug. it's still a nuget bug?\nI Was not able to have a connectionString named with a custom name, Otherwise EF continue to create a database (in localhost MSSQL) named MembershipReboot.\nThe only workaround was to use a connection string named MembershipReboot\nSomeone continue to have same issue?\n. ",
    "claq2": "I think using the MigrateDatabaseToLatestVersion creator overload that takes a connection string name will fix the issue. E.g. \nDatabase.SetInitializer(new MigrateDatabaseToLatestVersion<DefaultMembershipRebootDatabase, BrockAllen.MembershipReboot.Ef.Migrations.Configuration>(\"myConnName\"));\n. ",
    "CrescentFresh": "Well alright alright! Will switch to per-request instantiation.\nOn a side note, the implied scope (per request/thread) was surprising moreso when I started using the events feature. It seemed like the perfect place to listen to \"global\" events, like users logging in.\n. Yes I understand what MR is doing.\nHowever, what I'm arguing for: clicking a link in an email implicitly confirms the user's identity (in so far as we're talking email access == verified identity) - yet is prompted for a password simply because user.HasPassword().\nWhat about new account creation? The same logic sits at the end of the verification ux there too.\nI believe that the logic in ResetPassword() should be symmetrical to that of VerifyEmailFromKey():\nTo recap ResetPassword() contains the following logic:\nResetPassword():\nif (!account.IsAccountVerified)\n{\n    // if they've not yet verified then don't allow password reset\n    if (account.IsNew())\n    {\n        // ... account created event -> sends email\n    }\n    else\n    {\n        // ... email change event -> sends email\n    }\n}\nCould it not follow that the logic should be reflected in VerifyEmailFromKey()?\nVerifyEmailFromKey():\nif (account.IsAccountVerified)\n{\n    // as before, validate given password\n}\nelse\n{\n    // if they've not yet verified then implicitly verify without password requirement\n    if (account.IsNew())\n    {\n        // check VerificationPurpose == VerificationKeyPurpose.VerifyAccount?\n    }\n    else\n    {\n        // check VerificationPurpose == VerificationKeyPurpose.ResetPassword?\n    }\n}\nOtherwise, why support resetting of password for unverified accounts at all (provided RequireAccountVerification = true)? Or if you don't like that logic, why require new account registrations to have to enter their password to verify their account? It's a small but meaningful UX change that may reduce the \"barrier of entry\" to the application.\n. @brockallen: \n\nJust because you click a link in your email does not confirm your identity\n\nYes, it does. That's the point of verification urls via email. You (or Dominik, I'll track it down) even say this in a talk you give. Yes it's one of many verification methods (passwords is one, 2fa being another, security questions being another), but in this particular flow access to the email link is implicitly confirming identity. \nOtherwise why use email at all for the initial verification email?\n. If MR is configured to require Email, that applies to local accounts only. It has to. Otherwise attempts to create a linked account with an email would trigger an email verification to be sent out, would it not?\nMy understanding is external accounts should not require verification.\n. I've investigated this further. MR's logic is as follows:\nIf asked to create an account and an email address is given, MR requests account verification (via verification key). Simple and expected.\nI'm arguing that when configuring MR with RequireAccountVerification=false I very intentionally do not want this behavior.\nIn this case I'm configuring MR this way because I am creating a 3rd party external user locally, who happens to have an email address.\n. Our workaround looks similar to:\n```\n// Save off the email and tell MR email is null, then restore \n// the email property to its expected value after the save \n// (and hit the datastore a 2nd time to update this model).\nvar emailSaved = user.Email;\n_mrConfiguredForExternalUsers\n    .CreateAccount(TENANT, user.Username, null/password/,\n        null/email/, // <-- HERE\n        account: user);\nuser.Email = emailSaved;\n_mrConfiguredForExternalUsers.Update(user);\n```\nThis bypasses the verification key being set (and EmailAccountEventsHandler attempting to send a verification email)\n. ",
    "RaulMo7": "SMTP problem.\nThanks guys!\n. ",
    "michael-wolfenden": "The issue is that the CreateAccount call for this administrator account is sending an email which is what I want to prevent. \nAm I misunderstanding?\n. Thanks all, you may close this question\n. ",
    "binarysenator": "Thanks very much! Solved thats brilliant :)\n. ",
    "codedevote": "Ok, thanks for pointing me in the right direction. \nI actually did configure the \"ApplicationInformation\" using the OwinApplicationInformation. The problem only arises, if I configure MembershipReboot per request, it does not occur, when I configure it in application scope. Not sure, if MR is not intended to be used in request scope. I understand that if it is e.g. the backend of identiy server, but for the frontend parts (reset password, confirm email, ...) I thought I can use it in per request scope. To keep it short, I currently don't have an issue with using it in application scope, so problem solved :-) Thanks for your help.\n. ",
    "tafs7": "Not certain how to tie the domain user and the MR user in this case.\nAlso, wouldn't adding the MR EF package to my web project create another DbContext, and a wide table with columns I don't really need? My app's db context is defined not in my web project.  It's similar to an onion architecture.\n. hmm...I like that decoupling. Makes a lot of sense.  I assume by user ID you mean the user name, not the actual database PK, correct?\nAlso, when would I use the Owin package? Is it a Owin or WebHost pkg decision?  My web app is MVC but also has Web API 2 for the ajax calls from the angular front end. \nWould I need the Owin pkg at all, if I am running on IIS? And would the Web API controllers benefit from the same forms authentication pipeline as MVC if they're in the same application?\nSorry for all the questions, but I couldn't find these details from the Wiki pages.\n. shameless plug on the video...thanks for the help!\n. i tried several ways of registering that DbContext class with Ninject, and found that it still was trying to use a different constructor.  However, when I created my own DbContext, deriving from the DefaultMembershipRebootDatabase class, and using the specific ctor, that worked:\n``` csharp\n//ninject kernel configuration code\nkernel.Bind()\n                .ToConstructor(ctorArg => new MyContextDb(\"MyContext\"));\n//create this class to \"shim\" the construction using a specific overload of the base class\npublic class MyContextDb : DefaultMembershipRebootDatabase\n    {\n        public MyContextDb(string conn)\n            : base(conn)\n        {\n        }\n    }\n```\n. ",
    "rpundlik": "@jahnavisdba How can I contact you regarding this ? I just wanted to ask finally how you have implemented everything ?\n. Hello Brock,\nThanks for the reply !\nActually after reading the documentation I posted this question. \nAs per you answer, It means IdentityServer and MembershipReboot should be in same project ?\nIf yes, how can I call the MembershipReboot method through web api\nRegards,\nRohit\n. Thanks for the reply Brock,\nYou mean just like this\n. ",
    "alikor": "The Linq Provider for DocumentDb is not complete so I would wait a while before merging this pull request\n. This is not needed\nThe foreach will cause the query to execute \nhttp://blogs.msdn.com/b/charlie/archive/2007/12/09/deferred-execution.aspx\n. ",
    "johnbirdau": "No worries Brock - will see if I can find some time :-)\n. Correct. The client (either a GUI screen that user is typing into or some other programmatic process) should know the current password - at least within a few tries in the case of a GUI. The same lockout and wrong password audit logging should apply for change password as for authentication. Unless membership reboot can trust who they are, there is no reason to validate the new password.\n. Correct. Just an ordering change. \nJohn\n\nOn 10 Feb 2015, at 2:07 pm, Brock Allen notifications@github.com wrote:\nOk, so I finally had time to look into this and I now see and understand the details. So really tehc hange is just an ordering change -- correct? I think that's fine. I'll make this change on dev now. Again, nice find.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "woodwardmatt": "Just working through this area of MR myself at the moment. I think the confusion creeps in because you expect that when you close an account the user shouldn't be able to login (but OOTB they still can). It feels that given the option to either close or delete that: \n- Delete should permanently delete the user account data\n- Close should flag the account as closed (which it does) and suspend access rights i.e. no login allowed.\nAs it stands at this point the account.IsLoginAllowed = false isn't implemented as part of the account closure routine so you have to do this independently using SetIsLoginAllowed(Guid accountID, bool isLoginAllowed):\n//Close Account & Suspend Access\n            userAccountService.CloseAccount(ID);\n            userAccountService.SetIsLoginAllowed(ID, false);\nWhilst this provides complete flexibility to do as you please within your own application, maybe an override on the userAccountService.CloseAccount() method to provision for an IsLoginAllowed boolean parameter may help to smooth out the implementation for some :)\n(Just working my way through the re-open process so the reverse may also be true for this)\nJust my two cents worth on an old thread :)\n. Hey Brock, I think it would mean that MR would generate a Secret key to use within Google authenticator, but that GA would be generating the Two-Factor Auth code which MR would then need to validate against the Secret key (taking into account the time step).\nWas thinking that this would be an awesome addition to MR as I've been knee deep in MR, IdentityServer & Identity Manager this week :) Not sure what the implication of the change would be on the login flow for IdentityServer though.\n. Yep this request matches with PR in #544\n. Hey @brockallen  No drama, I know what its like :)\nI've moved on a little with my work since this issue, but i'll revisit this in a few days and see if I can come up with something for you. \nEqually, I may be a little slow, but I will do my best :)\n. ",
    "theythinkimmexican": "Thanks for the quick response. There's no Users property on the UserAccountService in my solution which is using the NuGet package so I guess it's not been updated. I'll get the source and use that instead. \nCheers!\n. ",
    "kalanbates": "Thanks for taking the time to the reply.  \nThe fact that it is protected is what caused me to gut the question in case you hadn't come across it yet. \n. ",
    "StevenReachSoftware": "hadn't thought about that but yes of course you are right.  Thanks.\n. ",
    "ascottwhite": "Thanks for your quick response.\nIt doesn't seem to be a token expiration issue. Sometimes less than a minute or two has passed. It seems as though the login attempt itself is invalidating the token/key sent in the verification email. Is that possible?\n. One other question: Is there a way to resend the verification email without requiring that they change their password?\nThanks again.\n. Nothing fancy.\n<membershipReboot requireAccountVerification=\"true\" emailIsUsername=\"true\" multiTenant=\"false\" passwordHashingIterationCount=\"0\" accountLockoutDuration=\"00:01:00\" passwordResetFrequency=\"0\"/>\nThanks.\n. Will they have to actually change their password? Thanks again.\n. Got it. Thanks again.\n. ",
    "jamyryals": "It seems you've hit the nail on the head. We are keeping an instance of the UserAccountService and UserAccountRepository in an IOC container. I'll update here when we've made the modifications to confirm. Thanks!\n. I forgot to reply after confirming fix. That was exactly it Brock, thanks!\n. ",
    "rmatrix": "No it was with the MembershipReboot samples in this git repository. I figured it out. I installed SQL Express as a default instance and the Config files in the sample were pointing to (LocalDb)11.0....  I  removed the 11.0 and now all samples work fine :)\nThanks for getting back to me and sorry for my misconfiguration.\nR\n. ",
    "dpapada": "My apologies, I got to quick on the the keyboard.\nif (CanResendMobileCode(account) ||\n                account.CurrentTwoFactorAuthStatus != TwoFactorAuthMode.Mobile)\nIs there some way to re-send the the MobileCode other than I am doing it?\n. Hi Brock,\nThanks for that information. I understand that completely,\n I did some more digging and realized I wasn't meeting the minimum time requirements, in some cases. I was debugging my process flow, and after I enabled two-factor mode for a particular test user, I immediately went to my login screen and attempted a login in which I would fail on the condition to wait for i think it was 1 or 2 minutes after first enabling. Thus the reason for it not triggering the event...I am now getting the TwoFactorAuthenticationCodeNotificationEvent triggered as expected.\nI apologize, I should have commented on this earlier and closed it.\n. ",
    "kenny-f": "Figured it out.\nJust had to add a switch in the web.config.\nHope this helps others:\n<system.diagnostics>\n    <switches>\n      <add name=\"MembershipReboot\" value=\"Verbose\"/>\n    </switches>\n  </system.diagnostics>\n. ",
    "vinneyk": "Any ideas how to get this working with ASP.NET 5 / Core? I've tried adding a similar structure to the appsetting.json of my MVC 6 project (running RC1) but no trace statements are being displayed for MR. Here's the JSON:\n\"system\": {\n  \"diagnostics\": {\n    \"switches\": {\n       \"add\": {\n      \"name\": \"MembershipReboot\",\n      \"value\": \"Verbose\"\n       }\n    }\n  }\n}\n. It's not entirely incompatible; at least I don't think it is. I was able to output a Trace log from within my project by writing something along the lines of Trace.WriteLine(\"I have nothing to say.\"). I'll do some further testing with the TraceSource object as is used by MR. However, I believe I'm just missing the equivalent of the config noted above to add the trace switch. The answer's out... \n. +1\n. I'm working out the differences but it stems from the divergence from IAppBuilder in the new pipeline builder. Admittedly, this can be reverted back to the \"old\" OWIN pipeline but, let's face it, if you're on vNext, you're not about reverting back ;)\nI'll report back with the specific findings when I get to a working implementation.\n. That's what I'm seeing as well: it's just the configuration helpers that are antiquated. I appreciate your ambitions and hesitations for the vNext targeted revamp. What would you think about a shim project to include the new helpers in the meanwhile? Either way, I'll share my code with you (when I have the opportunity to write it, that is!)\n. I finally got around to getting MR working with ASP.NET 5 / MVC 6. I intend to document my findings but the most jarring diff is due to reading settings from ConfigurationManager. I've been able to sidestep it via dependency injection using the following:\n// reads configuration from appsettings.json\nservices.AddSingleton(p => new MembershipRebootConfiguration<ApplicationUser>(p.GetService<IOptions<SecuritySettings>>().Value));\nHowever, I just hit an unavoidable wall in the SmtpMessageDelivery due to the fact that it's reading settings from ConfigurationManager without constructor a override for SmtpSection. It's not a huge setback since the class is small and unlikely to change but, to my knowledge, I'll have to replace the class with a version that doesn't reference ConfigurationManager directly. \nThis dependency on ConfigurationManager seems to be the biggest issue in utilizing MR in vNext; which is not too bad!\n. Yeah, that's exactly what I came up with:  \n```\n[MembershipRebootReplacementNote(typeof(BrockAllen.MembershipReboot.SmtpMessageDelivery), \"Dependency of ConfigurationManager for retrieval of SmtpSection values\")]\npublic class SmtpMessageDelivery : IMessageDelivery\n{\n    private readonly StmpDeliveryConfig _config;\n    private readonly bool _sendAsHtml;\npublic SmtpMessageDelivery(StmpDeliveryConfig config, bool sendAsHtml = false)\n{\n    _config = config;\n    _sendAsHtml = sendAsHtml;\n}\n\npublic void Send(Message msg)\n{\n    Tracing.Information(\"[SmtpMessageDelivery.Send] sending mail to \" + msg.To);\n    if (string.IsNullOrWhiteSpace(msg.From))\n    {\n        msg.From = _config.FromEmailAddress;\n    }\n    using (var smtpClient = new SmtpClient())\n    {\n        smtpClient.Timeout = 5000;\n        try\n        {\n            var message = new MailMessage(msg.From, msg.To, msg.Subject, msg.Body)\n            {\n                IsBodyHtml = _sendAsHtml\n            };\n            smtpClient.UseDefaultCredentials = false;\n            smtpClient.Host = _config.Host;\n            smtpClient.Credentials = new NetworkCredential(_config.UserName, _config.Password);\n            smtpClient.Port = _config.Port;\n            smtpClient.EnableSsl = _config.EnableSsl;\n\n            smtpClient.Send(message);\n        }\n        catch (SmtpException ex)\n        {\n            Tracing.Error(\"[SmtpMessageDelivery.Send] SmtpException: \" + ex.Message);\n        }\n        catch (Exception ex)\n        {\n            Tracing.Error(\"[SmtpMessageDelivery.Send] Exception: \" + ex.Message);\n        }\n    }\n}\n\n}\n```\n. I'd be glad to. Are you wanting to maintain backward compatibility or would this be an acceptable breaking change? \nI have identified at least one more non-vNext compatible concept regarding the RelativePathApplicationInformation which uses HttpContext.Current within the GetApplicationUrl method. I have a replacement method for this as well. Would you like me to continue posting such findings on this thread or save them for a PR? \n. Hey @nikcub I probably won't get to it before the weekend. If you are quicker on the trigger, I'll follow your lead. Otherwise, yes, I'll fork and add my changes. Looking forward to working with you :)\n. I agree 100%.Do you care to have non-async options as well?\n. What are your thoughts about rebuilding the project on the new ASP.NET project templates? I'm thinking we'd start a new solution and just start porting projects into it one at a time. It would obviously make it more difficult to diff so your review may become more cumbersome. I don't know. What do you think? Would it be easier for you if we upgrade in place and then port to the new structure later (if at all)?\n. Put another way, is the aim to support ASP.NET 5 or embrace it?\n. @nikcub, I branched and added my few modifications in my fork. I've submitted a pull request to @brockallen. There were only two objects I've had to modify so far in order to get MR working in my MVC 6 application. In addition, I have had to include a couple settings for IServiceCollection and IApplicationBuilder configuration. That'll likely change be submitted, in some form, soon.\n. From what I've seen thus far, we don't have to loose support for previous .NET versions. If we take the path of least destruction, we can simply replace dependencies on antiquated concepts and potentially support both (at least the non-core frameworks). \nAdmittedly, I've not had much opportunity to play with coreclr since I tend to have other dependencies which prevent it. That said, @VanLePham, I don't see any dependencies in MR which would prevent support so it should be doable. Though, as I understand it, we'd need to decide to draw a line in the sand and port to a completely new project. I could be wrong but it seems like that's the ultimate answer to your question, @brockallen: do we want coreclr support?\n. You're right, Identity 3 does technically have the same features; on the surface at least. \nSince I've really started to get to know MR, I've been more excited about what it has at it's core. The capability to customize the membership pipeline is a really great asset! For example, I'm writing a multi-tenant application to which users can be invited by another user. I really like the possibility of composing new membership features out of the event components. In this case, perhaps invited users aren't created using the same path as regular sign-ups. This is not something I've seen supported by ASP.NET Identity. \nIf you decide to deprecate support moving forward, then we can make the minimal changes required in order to add support for the full framework beyond 4.5.1. In fact, I've been able to get the current MR release working in 4.6.1 by providing a couple classes and a few lines of configuration so perhaps I could contribute that to your wiki. However, if you haven't already, I suggest you write an app on the new architecture and Identity library, or perhaps adapt an existing app with slightly more complex logic, and see for yourself if it's \"good enough\" for your liking. I would respect your insights if you said it was me who was missing the picture regarding Identity 3.\n. Did you mean to reference Core in both statements there?\n. Just wanted to let you know I'm still here. Big push for a demo this week so I'll continue to be quiet for a little while longer.\n. Do you have any information of when that might drop?\n. Just heard your DNR interview with Dominick Baier. I'm guessing that roadmap doesn't fully encompass that 30 minute explanation of the versioning diagram but I did find the article linked on the RC2 release to be insightful. I respect this statement most of all:\n\nIt\u2019s clear to us now that we were running too fast and didn\u2019t take the time to fully think this one all the way through. \n\nI agree with your earlier assessment  of waiting for RC2 as it seems that does indeed introduce some pretty radical changes. Are you getting much requests for support on using MR in RC1? If so, I could go ahead and write a wiki detailing how I got up and running. It's not altogether too involved but it did take me some time to get all the pieces in place. LMK\n. I can certainly live with that :) For the most part, the necessary changes are already documented within this thread. That should be enough for anyone brave enough to be using RC1 anyways.\n. @brockallen PR incoming for this feature, should you choose to accept it. All UserAccountServiceTests tests, including a couple new tests to cover the new logic, are passing. https://github.com/vinneyk/BrockAllen.MembershipReboot/pull/1\n. Are you suggesting that the RequireAccountVerification feature does what I'm looking for? Again, I want to require account authorization but I want to allow new users to access their account for some period of time before they verify the account. After the allotted time, users will not be able to access their account unless/until the account is verified. \nWhen I set RequireAccountVerification=true, I am unable to authenticate the users who have not yet verified the account. If is set it to false then there is no verification requirement which is also not what I want. The supplied changeset does exactly what I'm proposing: grants temporary access to un-validated user accounts with a configurable access timeout.\n. What I'm looking for is an in-between but the required change is small and unobtrusive to existing code. I've already completed the necessary change and now I'm, sadly and rather victoriously, trying to grasp the difference between GitHub and BitBucket so I can create pull request. Check this, if you want to see the impending request's content: https://github.com/vinneyk/BrockAllen.MembershipReboot/commit/4966eaffef838260f7639c23c6704dc3b5a70c8e\n. I retracted my commit because it's incomplete but, before I pursue it any further, I'd like to know whether that's a feature you'd consider pulling into the project.\n. I agree it's a bit more of a complex pipeline and one that I might need to table for now. I was inspired by Slack's user onboarding process which goes something like this:\n1. Create account w/o password\n2. Send account activation email\n3. Log users in with persistent cookie\n4. After x days, automatically log the user out and prevent continued access to the site until the account is verified.\n5. Upon account verification, have the user set their password.\nThere's no hook that I can see because it always comes to the if(account.IsAccountVerified || !UserAccountService.Configuration.RequireAccountVerification) or some variation of that logic which prevents login and authentication. I've considered adding an override to a enable programmatic a bypass of that check but I'm not sure that's the best way about it either. I'd appreciate your thoughts.\n. The email contains an activation link. When the user's click the link within the email, they are presented with the page where they will first create their password. So, it is possible for someone to take over an account if the user enters the wrong email address and someone else get's the invitation. That's something to consider. I wonder how they would handle such an occurrence...\n. @brockallen how would you handle users who can't successfully enter their password upon account activation? I'm pretty sure you wouldn't issue a password reset link to an unverified account. Would you consider the account to be hosed without admin intervention in that case? Perhaps that's where the Cancel Validation link would come into play? \n. I'm retracting my PR because it does not handle the AuthenticationService.SignIn which is really where it was needed.\n. ",
    "huytranco": "Ah.. thanks for that.\n. ",
    "raghubhat4u": "Thank you..\n. Yeah.. it was my bad..\n. ",
    "jeremycook": "I'm running into this password reset conundrum myself. In my case I require email verification, and getting the same outcome. I'm throwing in my 2p to weigh in that this really is problematic.\nHere's a scenario:\n1. A user registers. The site doesn't error but for whatever reason the user never gets (or finds) the confirmation email.\n2. The user moves on and forgets about the site for a while. It wasn't a high priority at the time, they got distracted by some other site/event/etc..\n3. The user comes back to the site and tries registering again some time later (they forgot that they ever tried registering).\n4. The user is told \"that email address is already in use.\"\n5. Next they try signing in a couple times to no avail. They can't remember the password they set.\n6. So they try the reset password feature, and receive an email with a link.\n7. They follow the link and are prompted for their password.\n8. They give up and never try again, or they contact support and complain heartily.\nAnother scenario is the user simply fat fingered their password, and need to go back to zero because they don't know what they did wrong (yes, twice in a row, maybe caps lock was bumped).\nHow can this scenario be handled? Right now the user is stuck unless they reach out to support.\n. Thanks @brockallen I've updated my register action to delete a new account with matching email before allowing CreateAccount to be called in the normal way. The one downside I ran into is that an account closed email is sent at the same time as the account created email. To avoid that email being sent I can delete the user account from the repository and basically replicate DeleteAccount, but was wondering, is there a more elegant way to handle this?\nAn example of deleting a new account with the same email as part of the user registration process:\n```\n// If a new, unconfirmed user already exists with the same email\n// address delete the user account and then permit new account creation\n// to proceed normally.\nvar account = this.userAccountService.GetByEmail(model.Email);\nif (account != null && account.IsNew())\n{\n    this.userAccountService.DeleteAccount(account.ID);\n}\n// Register like normal:\naccount = this.userAccountService.CreateAccount(model.Username, model.Password, model.Email);\n// ...\n``\n. @brockallen if you have any suggestions for handling this more elegantly I'm all ears but in order to keep things simple I decided to useDeleteAccount` as in my previous comment, and display a message to the user letting them know what happened. That kind of double registration should be fairly rare and I guess I'll find out if the closed account notice causes confusion.\nHere's how I implemented it for anyone interested. You'll notice that I only do this if account verification is required. I wouldn't want someone to accidentally close their own account because they re-register when they already have an active, valid account. You may notice that this doesn't solve the password reset when account verification is not required problem that started this discussion, unfortunately. This solution is good enough for me for now.\n```\nif (this.userAccountService.Configuration.RequireAccountVerification)\n{\n    // If a new, unconfirmed user already exists with the same email\n    // address delete the user account and then permit new account creation\n    // to proceed normally.\n    var existingAccount = this.userAccountService.GetByEmail(model.Email);\n    if (existingAccount != null && existingAccount.IsNew())\n    {\n        var created = existingAccount.Created;\n        this.userAccountService.DeleteAccount(existingAccount.ID);\n        ViewBag.AccountDeletedMessage = string.Format(\"A previous registration was started {0:g} but never finished for an account with the email address you entered. The old account had to be closed before creating the new account you just registered. You will receive an account closed email very soon that you can safely ignore. Be sure to confirm your email address to finish registering this account.\",\n            created.ToLocalTime());\n    }\n}\nvar account = this.userAccountService.CreateAccount(model.Username, model.Password, model.Email);\n```\n. Thank you for the suggestion! In case others will benefit, here's what I ended up with. Note that I'm using a custom user account service and configuration class.\n```\nif (this.userAccountService.Configuration.RequireAccountVerification)\n{\n    // If a new, unconfirmed user already exists with the same email\n    // address delete the user account before continuing with account creation.\n    var existingAccount = this.userAccountService.GetByEmail(model.Email);\n    if (existingAccount != null && existingAccount.IsNew())\n    {\n        // Use a user account service that is not configured to send emails\n        // when the account is deleted.\n        var tempUserAccountService = new CityUserAccountService(new CityMembershipRebootConfiguration(), this.userRepository);\n        tempUserAccountService.DeleteAccount(existingAccount.ID);\n    ViewBag.AccountDeletedMessage = string.Format(\"A previous registration was started {0:g} but never finished for an account with the email address you entered. The old account had to be closed before creating the new account you just registered. Be sure to check your email, and verify your account to finish registering this account.\",\n        existingAccount.Created.ToLocalTime());\n}\n\n}\n```\n. ",
    "geetar85": "\nWe never allow a password to be reset if the email is not confirmed. So if you let them login without email confirmation and they forget the password they're in trouble.\n\n@brockallen - adding to @CrescentFresh's initial question. Since the user initiated reset password because they have forgotten their password, why even kick off the EmailChangeRequestedEvent if it will never work? Is there an alternate use case where sending the email verification makes sense in this scenario? Even when they are new, they still initiated reset password, so kicking off the AccountCreatedEvent doesn't seem to be helpful either.\n. But in the scenario where a password reset is initiated and the email has not been verified, sending the email verification email is pointless as it will leave the user stuck. If you really want to keep the password requirement on verification, doing a password reset when not verified should throw an error, I would think.\n. which \"that\" are you referring to? It does send the email verification on password reset for an unverified email, are you saying that is the bug?\n. Ah didn't notice that API - so it looks like we could actually build our own Email Verification without requiring a password (if we disagree with your assessment on requiring password) by calling GetByVerificationKey and SetConfirmedEmail...\n. Yep - definitely get that. One other thought on this scenario - I think it would be useful to have a different Event raised when a user is not verified but they do a password reset. I would want to tailor my message to the user differently in that scenario because a standard email verification email will likely be confusing to the user when they have just selected the forgot password option. Something to think about - I'll see if I can find some time to do a pull request on it.\nThanks as always!\n. Thanks, Brock. Is there a way in the MapClaimsFromAccount handler to determine which provider they are currently logged in with so I can only grab claims from that specific linked account?\n. Ahh, I get it now. I was under the assumption that the LinkedAccountClaims included claims for all linked accounts, not specific to the one the user signed in with. That does the trick - thanks.\n. ",
    "vinaykasireddy": "Hi Allen,\nThanks for the qucik response. Not sure if you have got my point. But here are the direct links. Just access. You might get a clear cut idea where exactly the issue could be. Thanks in advance.\nhttps://appsworldidentity.azurewebsites.net/identity (WORKING)\nhttps://appsworldidentity.azurewebsites.net/admin (NOT WORKING)\n. Hi Allen,\nI tried to put the below piece of code. Is it deprecated as i do not found this property in Thinktecture.IdentityManager.Configuration.IdentityManagerOptions class.\nSecurityConfiguration = new HostSecurityConfiguration\n{\n     HostAuthenticationType = \"Cookies\"\n}\n. Hi Allen,\nSolved the issue now. The difference is instead of using IdentityManager, i used Thinktecture.IdentityManager.\nBut why is this confusion for us? I was under impression that Thinktecture.IdentityManager is stable and i used it. Infact the github examples are using the same dll giving the same impression for us.\n. Yes. I tried in all the combinations unless u want me to downgrade everything, which is not possible.\nYou might have seen the similar issue at the below link. I even replied the same thing there but no support. Thought it will be rectified by now and upgraded everything to latest. But still the problem exists.\nhttps://github.com/IdentityServer/IdentityServer3/issues/1790\n. ",
    "schmosef": "Actually, it looks like it clears the database every time the application restarts. How do I stop that from happening?\n. Sorry if this is a stupid question but I don't understand what my configuration options are.\nIs this documented somewhere?\nI tested the IdentityManger.MembershipReboot demo project and it created the database the first time it ran but it does not clear the database when the app is restarted. And it does not even have a call to Database.SetInitializer as far as I can see.\n~~Should I just comment out the line?~~\nEdit:\nCommenting out the line did not seem to do anything. It still tried to delete the database.\nAny advice? I'd really like to use this for the multi-tenant feature but I'm struggling to wrap my head around how all the pieces fit together.\n. ",
    "joffies": "Its because you probably are setting it in the web.config file too. Remove it from either the web.config or the RegisterServices section.\n. ",
    "rvdkooy": "I'm getting a null exception when doing CreateUserAsync and then calling AddUserClaimAsync on the IdentityManagerService.\nThis is because the claimscollections of the useraccount is null when creating a new user:\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/blob/master/src/BrockAllen.MembershipReboot/Account/Relational/RelationalUserAccount.cs#L21\nOnly when I have a new database session and the user is retrieved from the db again I can call UpdateClaimsAsync again. (ClaimsCollection is set to an empty collection by EF??)\nIs this related you think?\n. great, thanks!\n. ",
    "skasti": "UpdateClaims adds new claims instead of updating existing ones in my case...\nEDIT: Aha, so update means \"add some, delete some, but only when specified\"... I thought it was a smart way to update claims. silly me.\n. ",
    "f0rt": "Actually, I was able to setup and run IdentityServer3 / MembershipReboot / IdentityManager. Is there build in user self-registration pages or I need to create one myself?\n. Thanks. It works now.\n. ",
    "dasch88": "I am running into a similar issue now regarding a binding conflict between MembershipReboot 8.4 and 8.0. Similar to @sheam, sometimes if I clean the project and reopen visual studio, it goes away. However once I rebuild the project it comes back. \nI would love to do a binding redirect, but the assemblies from nuget are not strongly named, so binding redirects are ignored. \nIt appears this happens if you have multiple projects, multiples referencing the latest MembershipReboot nuget package, and only one referencing the latest MembershipReboot.Ef package.\n3>  There was a conflict between \"BrockAllen.MembershipReboot, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null\" and \"BrockAllen.MembershipReboot, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null\".\n3>      \"BrockAllen.MembershipReboot, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null\" was chosen because it was primary and \"BrockAllen.MembershipReboot, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null\" was not.\n3>      References which depend on \"BrockAllen.MembershipReboot, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null\" [C:\\Users\\david\\Projects\\Web\\packages\\BrockAllen.MembershipReboot.8.4.0\\lib\\net45\\BrockAllen.MembershipReboot.dll].\n3>          C:\\Users\\david\\Projects\\Web\\packages\\BrockAllen.MembershipReboot.8.4.0\\lib\\net45\\BrockAllen.MembershipReboot.dll\n3>            Project file item includes which caused reference \"C:\\Users\\david\\Projects\\Web\\packages\\BrockAllen.MembershipReboot.8.4.0\\lib\\net45\\BrockAllen.MembershipReboot.dll\".\n3>              BrockAllen.MembershipReboot, Version=8.4.0.0, Culture=neutral, processorArchitecture=MSIL\n3>      References which depend on \"BrockAllen.MembershipReboot, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null\" [].\n3>          C:\\Users\\david\\Projects\\Web\\packages\\BrockAllen.MembershipReboot.Ef.8.0.0\\lib\\net45\\BrockAllen.MembershipReboot.Ef.dll\n3>            Project file item includes which caused reference \"C:\\Users\\david\\Projects\\Web\\packages\\BrockAllen.MembershipReboot.Ef.8.0.0\\lib\\net45\\BrockAllen.MembershipReboot.Ef.dll\".\n3>              BrockAllen.MembershipReboot.Ef, Version=8.0.0.0, Culture=neutral, processorArchitecture=MSIL\nAny thoughts on how to proceed?\n. That's what I thought to at first, until I checked and all packages were\nthe most recent version. I even reinstalled all the MembershipReboot\npackages without success.\nIt's it possible that internally the MembershipReboot.EF assembly is\nreferencing v8.0.0 of MembershipReboot?\nOn May 11, 2016 8:13 AM, \"Brock Allen\" notifications@github.com wrote:\n\nIs that just a matter of updating each project's NuGet reference? I guess\nI've never really run into this issue..\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/530#issuecomment-218441382\n. Wow that's formatted weird... That's what I get for replying via email :)\n. Great, thank you--I appreciate it!\n. So I was able to get it fixed. It turned out that in my multi-project solution, I had two projects that were referencing two different versions of System.Web.Http. After getting that fixed (I had used \"Copy Reference\" within visual studio instead of downloading the nuget package like I should have), then I uninstalled and reinstalled all of the MembershipReboot nuget packages. After that--and some deleting of the packages folder, restoring nuget packages, and reopening visual studio--it finally went away!! \n\nGood to know that other reference mismatches can cause more down the line that aren't necessarily related :)\n. ",
    "kendaleiv": "I'm good with closing for now. Thanks!\n. Basically, a text box and a button that will immediately force change a user's email address. The user does not need to verify the change.\n. Ah, it looks like that'll do it, awesome! Thanks!\n. ",
    "TDK1964": "Dapper is a lightweight ORM https://github.com/StackExchange/dapper-dot-net\nBasically it just enables hand-cranked sql e.g. Query(\"SELECT * FROM UserAccounts\")\nThe thing is which implementation should I use?\npublic class DapperUserAccountRepository : QueryableUserAccountRepository where T : UserAccount\nor\npublic class DapperUserAccountRepository : IUserAccountRepository where T : UserAccount\nor\npublic partial class DapperUserAccountRepository : IUserAccountRepository\n. Any chance of a quick example of implementing the interfaces manually?\n. Unfortunately EF is too slow.\n. Unfortunately, I don't have the skills to be able create a Dapper version :( \nI guess I'm going to have to resort to the default ASP.NET Identity solution which is a shame :(\n. There is a basic version at http://blog.markjohnson.io/exorcising-entity-framework-from-asp-net-identity/\n. @tjrobinson Have a look at the performance comparison on the Dapper site https://github.com/StackExchange/dapper-dot-net\n. As Brock says, I was referring to EF vs Dapper. The speed of MR was perfectly acceptable however, my application uses Dapper and I didn't want to have both running.  I would have loved to use MR but just don't have the skills or time to create a Dapper version.\n. ",
    "synesthesia": "Good question, haven't researched.\n. I changed my implementation - provisioning in the remote system in the validation stage for IdSrv.\n. ",
    "DavidChristiansen": "The controller is dressed with the [AllowAnonymous] attribute, which means that all methods will not require an authenticated context does it not?\n. Will do.\n. Also maybe worth noting the typo in the method name GetCurentPrincipal ;)\n. I have a rough working prototype which I am planning on completing and making releasable. You interested? Do you think there would be a demand for this feature?\n. Working Time-based One-time Password example ready to demonstrate.\nConfiguring Authenticator\n\nUser clicks \"Configure Authenticator\"\n\nUser adds Membership Reboot Sample to authenticator app, and tells the sample the code generated by Authenticator.  This is confirmed and user is good to go.\n\nNew two factor auth option\n\nSo, once logged out again\n\n\n\n\nChecked into my fork / branch -- https://github.com/DavidChristiansen/BrockAllen.MembershipReboot/tree/feature/RFC-6238\n. Once we have talked this over, I think can strip out the CSS changes etc so a PR is purely RFC-6238 (unless you want the UI changes aswell)\n. Hi Eric, The PR was resubmitted under #594 - needs to be updated in line with recent changes but its all there.  Brock and I just need to sit down for an hour to go through it before it goes in.\n. @hanskhe https://twitter.com/dchristiansen/status/836609064981446656. Implemented to Dev branch. Killing this off and recreating to kick off a CI build\n. Well it can be brought back in line. We never did catch up to go over it.  It's a good feature and implemented, so let's not throw it away\n. @brockallen Things are in sync now - Over to you for final pull.\n. Given that Brock has stated that he is no longer in a position to maintain MBR, I have taken the decision to merge this PR into Dev.  All compiles/green based on current head.. Note: You may require to perform a DB migration to reflect schema changes to the UserAccount object.. Thanks for taking the time to do this.  I am going to update my original PR #594 \n. ",
    "ericlink": "It seems the fork @ https://github.com/DavidChristiansen/BrockAllen.MembershipReboot/tree/feature/RFC-6238 is not longer there... has it moved somewhere, or is there another implementation of TOTP somewhere else?\nThanks, - Eric\n. Ah great, thanks David!  We are doing a two factor project, and this is something we'll want to add.  It's great it's so close.  If we get to that point before you've gotten to it, I'll be happy to help.   Until then, we're just working hard to get version one of our project going... \n. Thanks @brockallen. If it makes it easier, even placeholders would allow us to extend MR without building the the whole thing locally.  What I mean is, just \npublic enum TwoFactorAuthMode\n{        \n  {\n      None = 0,     \n      Mobile = 1,       \n      Certificate = 2,\n      Extension3 = 3,\n      Extension4 = 4, \n      Extension5 = 5, \n      etc...    \n }\n}\nThen we could use the existing extension points, like custom user service, and access these values from account as intended.\n. Ah, yes, that is probably likely!\nWe made some minor mods to the User Service so that it would fire the two factor events in SMS mode, even if a mobile number was not on the profile.  This allows us to run MR with the 2fa enum set to sms, regardless of the actual type we are using.   That way MR handles creating, storing and verifying the code for us, which works great.\nWe added a field to the account to keep track of the users currently selected 2fa mode (using a string \"email\", \"sms\", \"voice\").   We have event handlers for each type of 2fa.  They have a guard that checks for currently selected 2fa mode and disregard messages that they are not supposed to handle.   \nSo MR thinks we are in sms mode, but we can handle all three on our side.  It makes me wonder if this style would make is easy for contributors to implement new 2fa types as contrib modules?\n. Exactly, I was thinking a more open plugin model would mean contributors could maintain those modules outside of identity server.  Kind of like ws-fed entity framework nuget, stuff like that.  If the 2fa was pluggable, then could someone implement OTAP, push to phone to accept login, etc. without touching MR directly?\n. I could do a PR if you want, just to show what I'm thinking? \n. OK, that sounds good.  I'll see how simple I can make it.\n. @amd989 this is right along the lines of what I have in mind.  I'll get the PR together; glad there is some interest (and folks to review it!). - Eric\n. Hey Brock, why are you no longer interested? Just curious. We have a need\nfor TOTP and push 2fa, especially since nist deprecated sms for 2fa. Also,\nsorry i haven't been able to get pr in yet. You understand how busy things\ncan get. - Eric\nOn Nov 17, 2016 7:50 PM, \"Brock Allen\" notifications@github.com wrote:\n\nGiven that I don't foresee making this change, I'll close this issue.\nThanks.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/649#issuecomment-261426549,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAzSxqCwNfQQpsR17QJ26ueEnHf0EmEPks5q_QRYgaJpZM4Iji1K\n.\n. Thanks Brock.  We may be interested in taking over maintenance. We've\ninvested a lot in apps around MR and if it's not a quick switch to asp.net\nidentity and there is feature parity, then we would want to continue with\nMR for some time.  How would you see a transfer of maintenance\nresponsibility working? Just add some of our folks as repo admins? I have a\ngreat architect that could participate as our maintainer.  And BTW, thanks\nfor all your contribution to the identity space in .net. Great stuff and\nwe've built our identity solution around it. - Eric\n\nOn Thu, Nov 17, 2016 at 8:03 PM, Brock Allen notifications@github.com\nwrote:\n\nI've not really been involved in MR for some time, so I'm preparing for it\nto be officially \"no longer supported\". ASP.NET Identity is more widely\nused, and now finally (with v3) has (for the most part) comparable\nfeatures. As a single individual I can't keep up with them. If you need\nthese feature then you're more than welcome to fork, or if you're\ninteresting in taking over maintenance here then I'm willing to consider\nthat.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/649#issuecomment-261428595,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAzSxrw2wwrVB--8oJqaEaNCBu6C6xTxks5q_Qd-gaJpZM4Iji1K\n.\n\n\nEric Link\n214.641.5465\n. Great I'll set something up after Thanksgiving holiday, - Eric\nOn Fri, Nov 18, 2016 at 9:50 AM, Brock Allen notifications@github.com\nwrote:\n\nSend me an email and we can setup a phone/skype call.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/pull/649#issuecomment-261565101,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAzSxu_2ny0bn_SSHKUj24vblmPBF9q4ks5q_clcgaJpZM4Iji1K\n.\n\n\nEric Link\n214.641.5465\n. ",
    "hanskhe": "Any idea about when this might be completed? It is a feature we would love to have in our system, as SMS-delivery is not very reliable in all corners of the world.. ",
    "khellang": "LGTM! :+1:\n. ",
    "rhunt79": "I have and if I am following correct, it appears to check if the account does not have any secrets then it submits the reset request but if it does it returns the questions to be displayed but we'd like to just send the validation email from the reset request and then have the user follow the link and return the questions at that point. Is that not possible?\n. yes and no. It doesn't seem very secure to enter the email address and be presented with the questions immediately without having them be directed back to their email to follow a link?  That seems to be common practice no?\n. Hey Brock you can close this. They wanted the order the process a little different but once I implemented how it was setup in the samples and showed them that flow they were Ok with at process.\n. ",
    "manriquelogany2k": "Hi Brock,\nHere is the call stack:\nat System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\\r\\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\\r\\n   at System.Security.Cryptography.CryptoConfig.CreateFromName(String name, Object[] args)\\r\\n   at BrockAllen.MembershipReboot.Helpers.Crypto.Hash(Byte[] input, String algorithm)\\r\\n   at BrockAllen.MembershipReboot.UserAccountService1.SetVerificationKey(TAccount account, VerificationKeyPurpose purpose, String key, String state)\\r\\n   at BrockAllen.MembershipReboot.UserAccountService1.Init(TAccount account, String tenant, String username, String password, String email, Nullable1 id, Nullable1 dateCreated)\\r\\n   at BrockAllen.MembershipReboot.UserAccountService1.CreateAccount(String tenant, String username, String password, String email, Nullable1 id, Nullable1 dateCreated, TAccount account)\\r\\n   at ASEBA.PIe.Customer.Infrastructure.Security.Web.AuthN.Services.UserAccountService.<>c__DisplayClass6.<CreateUserAccount>b__4()\\r\\n   at ASEBA.PIe.Customer.Infrastructure.Security.Web.AuthN.Services.UserAccountService.tryCatchThrow(Action tryAction, Action1 catchValidationExceptionAction, Action1 catchArgumentExceptionAction)\\r\\n   at ASEBA.PIe.Customer.ApplicationServices.AdministrationApplicationServices.UserManagement.UserManagementApplicationService.<>c__DisplayClass9.<CreateUser>b__7()\\r\\n   at ASEBA.PIe.Customer.ApplicationServices.AdministrationApplicationServices.UserManagement.UserManagementApplicationService.tryCatch(Action tryAction, ViewModel viewModel, HttpStatusCode onExceptionHttpStatusCode)\\r\\n   at ASEBA.PIe.Customer.ApplicationServices.AdministrationApplicationServices.UserManagement.UserManagementApplicationService.CreateUser(CreateUserViewModel createUserAccountViewModel)\\r\\n   at ASEBA.PIe.Customer.Presentation.WebApi.Controllers.AdministrationControllers.UserManagement.CreateUserController.Post(CreateUserViewModel createUserAccountViewModel)\\r\\n   at lambda_method(Closure , Object , Object[] )\\r\\n   at System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionExecutor.<>c__DisplayClass13.<GetExecutor>b__c(Object instance, Object[] methodParameters)\\r\\n   at System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionExecutor.Execute(Object instance, Object[] arguments)\\r\\n   at System.Threading.Tasks.TaskHelpers.RunSynchronously[TResult](Func1 func, CancellationToken cancellationToken)\nI did disabled the \"System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing\" policy and the issue went away.  I did enable the policy and the issue came back. I only tried this in Windows 2012 R2. \nThank you for MembershipReboot and your other projects! \nBest regards,\nManrique\n. Hi Brock,\nThank you.\nManrique\n. ",
    "LorryMoller": "Thanks! Will try that out.\n. Thanks! We worked with that and it resolved our issue.\n. ",
    "amirhp": "I know always return false. is it something i missed?\n. the role calim record seems fine so how can i check this claim exist for a user or not?\n. Im using your groups sample.  https://github.com/brockallen/BrockAllen.MembershipReboot/tree/master/samples/Groups\n. yeah\n. It does \nuserAccountService.AuthenticateWithUsernameOrEmail(model.Username, model.Password, out account)\n. so it use SamAuthenticationService\n. Can we have same email between different tenant like what we have in username.\nwhich can be unique in tenant.\n. I try to describe my problem in an other way I have members with same username across different tenants is possible to have same email address unique only in tenant and maybe repeated in other tenants.\n. Raise an error otherwise there is an issue for this before.\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/55\n. :) yeah do you know any way to work around?\n. ",
    "aaronwjha": "I'm not sure I follow. Are you saying it is possible to apply a different MR config to each tenant within a single MR instance? I've looked over all the docs I can find and don't see how this is accomplished.\n. Yes, this is exactly what we are trying to work out at the moment. We are planning a deployment that will support 90M users across 1.5K tenants. Any recommendations for a large deployment like this would be welcomed.\n. No. I feel like I'm getting close, but the implementation details are still unclear to me.\n. We intend to use MR as the user service for IdentityServer3. Our goal is to configure endpoints to include tenant info in the URL (e.g. https://idsrv.com/[tenant]/connect/token). We haven't worked how to make that happen.\n. That did it. Thanks for the help!\n. ",
    "kylegalbraith": "I have revised this as I do not think it has anything to do with an upgrade because we have actually been on 8.3.0 without a problem for a while now. Yet mysteriously some passwords had to be reset this morning as users could no longer log in with them.\nThis is hosted in AWS elasticbeanstalk using Sql Server as the database to house MembershipReboot. Passwords do not automatically expire in MR or anything like that correct? Seems there is further investigation I need to do. But again this has nothing to do with the upgrade. Apologies for the confusion.\n. When a reset password is initiated will an email be sent as well with a similar token on the end of the url?\n. Thanks for the quick response @brockallen I think I got enough to run with for now.\n. This is still a randomly occurring incident that I cannot seem to nail down. Below is a more detailed stack trace that shows the error bubbling up through the EventBusUserAccountRespository.cs. The connection string is correctly in the web.config and the api that is kicking this off is a normal Web Api 2, in fact it isn't even async or anything like that.\n\"name\": \"EntityException\",\n  \"message\": \"The underlying provider failed on Open.\",\n  \"source\": \"EntityFramework\",\n  \"site\": \"Open\",\n  \"stack\": [\n    \"   at System.Data.Entity.Core.EntityClient.EntityConnection.Open()\",\n    \"   at System.Data.Entity.Core.Objects.ObjectContext.EnsureConnection(Boolean shouldMonitorTransactions)\",\n    \"   at System.Data.Entity.Core.Objects.ObjectContext.ExecuteInTransaction[T](Func`1 func, IDbExecutionStrategy executionStrategy, Boolean startLocalTransaction, Boolean releaseConnectionOnSuccess)\",\n    \"   at System.Data.Entity.Core.Objects.ObjectQuery`1.<>c__DisplayClass7.<GetResults>b__5()\",\n    \"   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)\",\n    \"   at System.Data.Entity.Core.Objects.ObjectQuery`1.GetResults(Nullable`1 forMergeOption)\",\n    \"   at System.Data.Entity.Core.Objects.ObjectQuery`1.<System.Collections.Generic.IEnumerable<T>.GetEnumerator>b__0()\",\n    \"   at System.Data.Entity.Internal.LazyEnumerator`1.MoveNext()\",\n    \"   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)\",\n    \"   at System.Linq.Queryable.SingleOrDefault[TSource](IQueryable`1 source, Expression`1 predicate)\",\n    \"   at BrockAllen.MembershipReboot.EventBusUserAccountRepository`1.GetByID(Guid id) in c:\\\\ballen\\\\github\\\\brockallen\\\\BrockAllen.MembershipReboot\\\\src\\\\BrockAllen.MembershipReboot\\\\Repository\\\\EventBusUserAccountRepository.cs:line 77\",\n    \"   at BrockAllen.MembershipReboot.UserAccountService`1.GetByID(Guid id) in c:\\\\ballen\\\\github\\\\brockallen\\\\BrockAllen.MembershipReboot\\\\src\\\\BrockAllen.MembershipReboot\\\\AccountService\\\\UserAccountService.cs:line 265\",\n. I tried upgrading the db and even added MultipleActiveResultSet and yet I still get this failure. The innerException looks like this\n\"innerException\": {\n    \"name\": \"InvalidOperationException\",\n    \"message\": \"The connection was not closed. The connection's current state is connecting.\",\n    \"source\": \"System.Data\",\n    \"site\": \"TryOpenConnection\",\n    \"stack\": [\n      \"   at System.Data.ProviderBase.DbConnectionClosedConnecting.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\",\n      \"   at System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)\",\n      \"   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\",\n      \"   at System.Data.SqlClient.SqlConnection.Open()\",\n      \"   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)\",\n      \"   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)\",\n      \"   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()\",\n      \"   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)\",\n      \"   at System.Data.Entity.Core.EntityClient.EntityConnection.Open()\"\n    ],\nAn example of where I am making this call and perhaps someone can spot my mistake...\n``` C#\nif (userGuids == null || userGuids.Length == 0)\n{\n     throw new ArgumentException(\"Invalid user identifiers\");\n}\nList returnList = new List();\nforeach (Guid userGuid in userGuids)\n{\n     CustomUser account = _service.GetByID(userGuid);\n if (account == null)\n {\n     throw new ArgumentException(string.Format(\"{0} is invalid\", userGuid));\n  }\n\n returnList.Add(CustomUserToUserInfo(account));\n\n}\n```\n. Yes, but it does not fail every time. \n. I believe we are thinking all the same lines. This is setup in web api 2 via a startup class, below is the code snippet.\n``` C#\nprotected virtual void SetupServices(HttpConfiguration config, IAppBuilder app)\n{\n    CustomDatabase db = new CustomDatabase(\"MembershipReboot\");\nCustomUserRepository cup = new CustomUserRepository(db);\nvar websiteUrl = ConfigurationManager.AppSettings[\"websiteForEmails\"];\nvar emailFormatter = EmailMessageConfiguration.EmailConfig(app, websiteUrl);\n\nCustomConfig cc = new CustomConfig()\n{\n    PasswordHashingIterationCount = 10000,\n    RequireAccountVerification = false,\n    EmailIsUsername = true,\n    VerificationKeyLifetime = new TimeSpan(1, 0, 0, 0)\n};\n\ncc.AddEventHandler(new EmailAccountEventsHandler<CustomUser>(emailFormatter, new EmailMessageDelivery(Log)));\nCustomUserAccountService accountService = new CustomUserAccountService(cc, cup);\nconfig.Properties[ServiceNames.UserService] = new UserService(accountService);\n\n}\n```\n. Well this is happening in the startup class of a web api 2 project, so I think it is a one time deal instead of request based, no? I was under the impression that the disposal of the context was handled in MR based on this...\nC#\npublic class CustomDatabase : MembershipRebootDbContext<CustomUser, CustomGroup>\n{\n    public CustomDatabase(string name)\n        : base(name)\n    {\n    }\n}\n. ",
    "nikcub": "hey @vinneyk i'm currently also working on this - do you want to create a pull request and i'll add my changes as well? \nIt might be a good idea to keep this in a separate branch for now while we have a chance to test\n. @vinneyk thanks for that - i've pulled it into my fork and i'm going through it now - plan to work on it this weekend\nTo answer the question about how to setup the project - most projects that i've come across that are looking to port are splitting into separate projects.\nand +1 to async\n. @VanLePham  will eventually be able to target coreclr\n. ",
    "VanLePham": "I saw @vinneyk pull requests about changing the target framework from 4.5 to 4.6.1, but not to the new light weight dotnet5.4.\nDo you have any plan to port the projects, or create new ones to support the new .Net platform standard (dotnet5.4) framework? \n. ",
    "rdefreitas": "I was curious about it myself (how I found this issue), but like @brockallen said I don't really see what problems MR solves that ASP.NET Identity 3 doesn't.\n. I'm interested in porting it and doing a deep comparison feature-wise as I do so, but i'm wondering if I should wait for RC2 before I tackle this.\n. ",
    "j-hurst": "I too was curious about adding the support for async/await in the repo.  I am currently using MR with identityserver and am working on calling the repositories through web api service calls.\nI could not tell from this thread, is this a change that you are looking to make MR, or do you not feel it is worth it?\n. Yea, I was going to look at how big of change it would be, but I did not know based on your guys' discussion above, if some of it was already being looked into.\n. ",
    "stewart-noll-q2": "@brockallen thanks for your time looking through AspId3.  You mentioned that\n\nMulti-tenancy is easily added by tweaking the AspId3 code in the DI system.\n\nAfter looking through the code base of AspId3 I am a bit perplexed on how this could be done.  For example in the UserStore, there is code like this:\ncsharp\npublic virtual Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = default(CancellationToken))\n{\n  cancellationToken.ThrowIfCancellationRequested();\n  ThrowIfDisposed();\n  return Users.FirstOrDefaultAsync(u => u.NormalizedUserName == normalizedUserName, cancellationToken);\n}\nOther than say intercepting the EF db connection and rewriting commands to include tenantid or authoring my own IUserStore with a DI'd tenant context, multi-tenancy feels out of reach. \nI'm most likely missing something here, could you please point me in the right direction?\n. @brockallen By store, I'm assuming you're referring to the physical db.  In our case we have a single db with it's tables keyed off of tenantid.  Would you suggest we move away from that approach to a db per tenant?\n. understood, thanks for your help.\n. ",
    "gilm0079": "@brockallen It sounds like the best option for a local identity store (after catching on up these threads) is to go with the ASP.NET core identity, but it sounds like there are a few short comings to that solution that extensions would need to be developed to fill in the gaps for things that MR did that ASP.NET core identity does not.  Do you know of anyone currently working on a project to do this?  Figured I would ask.  We are looking at IdSvr4 now. We were on IdSvr3 + MR and now we're trying to figure out the roadmap to move forward since it sounds like MR is discontinued.. ",
    "cjdutoit": "Yes thanks. Have not had achance to reply yet, but it is definately the same as the other one.\nSent from my iPhone\n\nOn 28 Sep 2015, at 20:31, Brock Allen notifications@github.com wrote:\nCan we close this if it's a dup of another issue?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Winters44": "+1, I think those should be public as well.  However, I wonder if Brock has a reason for keeping them private.  I'm curious to hear as well, since I ran into this same issue :)\nSince the IEventBus interface is public, you could always create your own EventBus and AggregateEventBus classes.\n. Sure, why not? :)   So far, I only had time to create a \"dirty\" quick fix.\nMy original goal was to edit the source as little as possible.  Do you think this sort of update would fit better in the UserAccountService class?  I was hesitant to make a breaking change, so I created a new RelationalUserAccountService.\n. I'll submit a PR something in the next week or 2.  I think the technique will be to overload the AddOrUpdateLinkedAccount as shown below and make an additional method to update claims.\nWhen the \"claims\" param is null on #2, no claims are updated.  When not null, claims will be overwritten.  I believe this will be non-breaking.\npublic virtual void AddOrUpdateLinkedAccount(TAccount account, string provider, string id)\npublic virtual void AddOrUpdateLinkedAccount(TAccount account, string provider, string id, IEnumerable claims)\n. ",
    "tvdburgt": "Here's an example for custom email validation with typed exception values (this method is used by CreateAccount which requires access to UserRepository):\n```\n    protected new void ValidateEmail(SsoUserAccount account, string value)\n    {\n        EmailAddressAttribute validator = new EmailAddressAttribute();\n    if (!validator.IsValid(value))\n    {\n        Tracing.Verbose(\"[UserAccountValidation.EmailIsValidFormat] validation failed: {0}, {1}, {2}\", account.Tenant, account.Username, value);\n\n        throw new CreateAccountValidationException(\n            GetValidationMessage(MembershipRebootConstants.ValidationMessages.InvalidEmail),\n            MembershipRebootConstants.ValidationMessages.InvalidEmail);\n    }\n\n    if (EmailExistsOtherThan(account, value))\n    {\n        Tracing.Verbose(\"[UserAccountValidation.EmailMustNotAlreadyExist] validation failed: {0}, {1}, {2}\", account.Tenant, account.Username, value);\n\n        throw new CreateAccountValidationException(\n            GetValidationMessage(MembershipRebootConstants.ValidationMessages.EmailAlreadyInUse),\n            MembershipRebootConstants.ValidationMessages.EmailAlreadyInUse);\n    }\n}\n\n``\n. I solved this for now by just handling allGetValidationMessage` commands and simply setting the message as resource key. Now my client application can supply their own translations at a later point.\npublic class GetValidationMessageCommandHandler : ICommandHandler<GetValidationMessage>\n{\n    public void Handle(GetValidationMessage cmd)\n    {\n        cmd.Message = cmd.ID;\n    }\n}\n. ",
    "benleishman": "Sorry first time using GitHub.\nThe Configuration.MultiTenant check is backward. It's preventing the default tenant from being applied. So when you try to add a user to an unspecified Tenant it fails because the default tenant is always null.\nFix is easy. Just changed the same line in 13 places:\n// Issue: This says don't set default tenant variable if MultiTenant is true\nif (!Configuration.MultiTenant) \nto \n// Fix: If MultiTenant mode is true and tenant not specified then set it.\nif ((Configuration.MultiTenant) && (string.IsNullOrWhiteSpace(tenant)))\n. Just realized I have it wrong. The \"default\" tenant isn't meant to be used in Multi-Tenant mode. It's to set the default for single-tenant mode. And in Multi-tenant mode specifying the tenant is required. Sorry I just misunderstood this feature. The code was correct as I understand it now. I'll revert the commits.\n. I think the GitHub desktop application has bugs. I'm only asking to merge the last commit not all 7. I think I'll go to the command line tools from now on.\n. Just this commit: https://github.com/benleishman/BrockAllen.MembershipReboot/commit/3d868b472d9a9e3e4454fe3285d2e119d899cd1b\nI believe MinimumNumberOfComplexityRules  should have a lower case M.\n. ",
    "peymanebrahimi": "@brockallen Thanks for your reply, I'll use \"SingleTenantWebApp\" example to create ApiController.\nIn the above mentioned system, when I create new user via IdentityManager, however in CustomConfig in MembershipReboot the Config.RequireAccountVerification = false; but the user can not login and In UserAccounts table, the isAccountVerified=0, and I have to manually make it true.\nAm I missing something?\n. @brockallen tnx man, that's the point, \nHow should I combine these 2 extension methods?\nnamespace IdentityServerIdmMemReb.IdSrv\n{\n    public static class CustomUserServiceExtensions\n    {\n        public static void ConfigureCustomUserService(this IdentityServerServiceFactory factory,\n                                                                    string connString, string idsrvSchema,\n                                                                    IAppBuilder serverApp)\n        {\n            factory.UserService = new Registration();\n            factory.Register(new Registration());\n            factory.Register(new Registration(r => CustomMRConfiguration.CreateCustomConfig(serverApp)));\n            factory.Register(new Registration());\n            factory.Register(new Registration(resolver => new CustomDatabase(connString, idsrvSchema)));\n        }\n    }\n}\nnamespace IdentityServerIdmMemReb.IdMgr\n{\n    public static class MembershipRebootIdentityManagerServiceExtensions\n    {\n        public static void Configure(this IdentityManagerServiceFactory factory,\n                                string connectionString, string idmSchema, IAppBuilder adminApp)\n        {\n            factory.IdentityManagerService = new Registration();\n            factory.Register(new Registration());\n            factory.Register(new Registration());\n            factory.Register(new Registration());\n            factory.Register(new Registration());\n            factory.Register(new Registration(resolver => new CustomDatabase(connectionString, idmSchema)));\n            factory.Register(new Registration(r => CustomMRConfiguration.CreateCustomConfig(adminApp)));\n        }\n    }\n}\nI wanted to different schema for MR and Idsrv related tables. To get a clue to the big picture.\nAlso for customeEmailEvents I ended up with a new parameter as IAppBuilder.\nI wish I had deeper understanding of Factory &/| Service Design patterns. Any road map will be appreciated Sir.\n. Thanks I know It is very nice of you to answer. and It is not your job to answer following question.\nBut I do not have any idea to register one common config in that Registration system.\nI noticed right now that all code between \"< >\" was excluded from above posts. and don't know why.\nThere is one customDb, customConfig, customUser, and ... .\nbut in the registration system, I think each one new up these classes for themselves.\n. No, no\nidsrv needs \"factory.UserService = new Registration();\"\nand idm needs \"factory.IdentityManagerService = new Registration();\"\nshame on me if it s obvious, but both of above follow other registration.\ntherefore each will new up separate objects of customConfig, however it is 1 unique class.\n. \n\n. I know. Does it mean registration has nothing to do with object instantiation?\nI emphasis that there is one unique customConfig which \"RequireAccountVerification\" is sat in.\nand \"config.EmailIsUsername = true;\" \n. I will try webApi for change password.\nBut the question was the users which created by the admin in localhost, are not able to login till I set their isAccountVerified manually in db.\nwhen I try to login in clientApp with credential that I made in Idm, it says usename or password are invalid.\n. You answered main question, and I really appreciate it.\nThanks for your time.\n. ",
    "Moonsk313": "Thanks, it works like a charm!\ngreat work ;)\n. ",
    "looking-promising": "@windischb did you figure this out?  We have IdentityServer3+mongodb running with asp.net 5 & MembershipReboot+mongodb.  Much of what we needed was in the samples and some was available as other open source projects.  So, I'm here to say that it can be done.  I'm not sure @brockallen would recommend running with MongoDB (I'm not sure I'd recommend it at this point), yet our implementation is fully functional.\nIf you are stuck or have any specific questions, I may be able to help.\n. Thanks @nicholas-brooks.  Your explanation makes perfect sense (and is blatantly obvious in retrospect given the referenced code) and clarifies both of my questions.  I'm sure that when I visually compared two different hashes for the same password, they looked the same when in fact they were not.\n. ",
    "minajevs": "Ok, I checked UserAccounts DB and all the IDs and emails are unique. What else can cause that crash? \n. Yeah, already checked ID for that user and it's unique. Damn, I am stuck \n. Well, everything is unique in the database. Looks like I need to check logs again. \n. Ok, it was a long night, but the problem was found. It appeared that before passwordresetkey every e-mail was verified through external service which I have no access to, and somehow that service returned that exact mail twice. Problem is fixed now, thanks for help! \n. ",
    "kabua": "I just go the same issue with trying to create a Group, and I'm currently block on this issue.\nI think you might be right, that perhaps the EF logic should be changed to calling 'new'.Otherwise, I don't think any of the RegisterXXXXXForDelete will work as expected.\nOr perhaps just change:\npublic override TGroup Create()\n        {\n            return items.Create();\n        }\nto\npublic override TGroup Create()\n        {\n            return items.AsNoTracking().Create();\n        }\nSo that the new item isn't being tracked, I'm testing it now. I'll let you know what I find.\n. That didn't work because I was working on a cached file and didn't realized that I couldn't call Create() after .AsNoTracking(). So, I tried this:\n```\n            var item = items.Create();\n            db.Entry(item).State = EntityState.Detached;\n        return item;\n\n```\nbut that didn't work. However, this did:\npublic override TGroup Create()\n        {\n            return new TGroup();\n        }\nHad to change\nwhere TGroup : RelationalGroup\nto\nwhere TGroup : RelationalGroup, new()\nHope that helps.\n. ",
    "Wesley82": "Thank you very much, Brock!\nOn Tue, Feb 23, 2016 at 7:55 AM, Brock Allen notifications@github.com\nwrote:\n\nClosed #586\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/586.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/586#event-560379146\n.\n. \n",
    "strizzaflex": "OK. So this website was \"setup\" before I got into it and it looks like in the end the issue was there wasn't a proper dependency injection system setup so things were being newed up and I assume that means the events were getting added and then blown away before they could send. I took a look into the samples and setup our ninject container based on the autofac stuff. Seems to be working now. \nSo I guess if that helps someone good. This can be deleted or closed or whatever. \n. ",
    "zebamba": "Is this method on line 143?\n\n public virtual IUserAccountQuery Query \n\nThank you.\n. You can close the question.\nThank you.\n. ",
    "ghost": "Thanks for getting back to me so quickly. So let's see here. I need to do something like:\n- Extend the EmailAccountEventsHandler and do nothing when processing a password reset event\n- Extend the SMSEventHandler and add handling for the password reset event\n- Override the ResetPassword method have my implementation resend the mobile verification if the account isn't verified? (I'm least clear on this last item as i see only account verification related code and not email verification (unless those are essentially the same thing).\nWould it be easier to just send the password reset to a backup email using Step 1 above?\nThanks for all your help.\n. Thanks for your help, Brock. I think i have a clear path to implementing this now. Closing this question.\n. I second the thanks, Brock. MR has been huge time saver and looking through it's source has taught me a lot. Much appreciated.\nI'm also interested in this migration helper. Totally understand about not having time to write it. Do you think you might have time to describe the major components of the helper at a high level? Stuff like:\n\nChange crypto (wait for user to login, then re-hash using ASP.NET Identity?)\nMap existing user account service methods to ASP.NET Identity methods \nChanges to 2FA, Linked Accounts etc.\n\nThis would definitely help point folks like me in the right direction.\nThanks again!. Makes sense. Do you see the migration as a one time execution type of deal? Or do you think we'll have to wait till each user logs in and then transition them over during the session. I ask because i'm not sure how the transition of the password would work (i imagine ASP.NET doesn't have an identical cryptographic scheme, schema etc).. ",
    "amd989": "I have created a fork with the merge. Fork #688 So far, I only got 3 hard conflicts mainly with the readme, and resources.\nI've been getting familiarized with this PR for a while, I have tested its functionality and seems to be working fine. No weird errors ATM.\nThe only thing I would add, is the ability to generate secrets based on a configuration property rather than hard-coded value, allowing secrets to be bigger if needed.\n. I would benefit from something like this as well. Currently the business needs to support more factors/steps of authentication. \nSMS is okay, but it seems it is not bulletproof. Certificates are awesome but not widely used. This is further improved with PR #594 by adding something like TOTP.\nThe problem is extensibility. By following PR #594 example, I was able to add email based 2-Step verification by just overriding methods from UserAccountService, and sending codes to emails instead of SMS. However the main limitation was this enum (TwoFactorAuthMode), I had to add a new \"Email\" option in order to make the solution work.\nFollowing the proposed PR here, by adding these new options anyone could extend 2FA functionality without touching MembershipReboot's code. To a certain degree.\nA better pattern should be considered. A common interface with different implementations should allow more flexibility.\nI was thinking something along the lines of:\npublic interface ITwoStepVerification {\n   int Id { get; set; };\n}\npublic class SmsTwoStep : ITwoStepVerification { Id = 1; }\npublic class CertificateTwoStep : ITwoStepVerification { Id = 2; }\npublic class TotpTwoStep : ITwoStepVerification { Id = 3; }\npublic class VoiceTwoStep : ITwoStepVerification { Id = 4; }\npublic class EmailTwoStep : ITwoStepVerification { Id = 5; }\nCode will ship with the current two types, people will be able to add more as needed. The Id would work fine with existing UserAccount table (where the int is the key AccountTwoFactorAuthMode). Each implementation will take care of checking conditions (such as the mobile is not null, cert is not null, etc. ) That way the Authenticate method can be made dynamic instead of explicit. \nJust some food for thought! \nThanks!\n. ",
    "NigeB": "Ok, so I thought that would be easy enough...\nI created a CustomUserClaim type with the new property values:\n```\npublic class CustomUserClaim {\npublic CustomUserClaim() {}\npublic CustomUserClaim(string type, string value) {\n    this.Type = type;\n    this.Value = value;\n}\n\n[Required]\n[StringLength(150)]\npublic  string Type { get; protected internal set; }\n[Required]\n[StringLength(255)]\npublic  string Value { get; protected internal set; }\n\n}\n```\nThen created a CustomRelationalUserClaim derived from the CustomUserClaim:\n```\npublic class CustomRelationalUserClaim : CustomUserClaim {\n    public virtual TKey Key { get; set; }\n    public virtual TKey ParentKey { get; set; }\n}\npublic class CustomRelationalUserClaim : CustomRelationalUserClaim { }\n```\nThen created a CustomRelationalUserAccount derived from RelationalUserAccount to take a CustomRelationalUserClaim type parameter:\npublic class CustomRelationalUserAccount<TKey, TCustomRelationalUserClaim, TRelationalLinkedAccount, TRelationalLinkedAccountClaim, TRelationalPasswordResetSecret, TRelationalTwoFactorAuthToken, TRelationalUserCertificate> : RelationalUserAccount {\n    public CustomRelationalUserAccount() : base() { }\n}\nThen derived my CustomUser class from CustomRelationalUserAccount instead of RelationalUserAccount.\nFinally overriding AddClaim() in CustomUserAccountService to use the new CustomUserClaim type, which doesn't seem to work anyway.\nAll of which suggests to me I must be going horribly wrong and that this is really a two liner change that I'm not seeing.\nCould you possibly point me in the right direction please Brock?\n. OK, so I cheated - after battling with that on and off, I just downloaded the source and changed the model :-)\n. Would still be interested in the more appropriate tho!\n. Yep. I use SystemWeb for hosting on the iis server, but Owin for running it in a console window on my local machine. That should work, right?\n. ",
    "thj-dk": "Having this increased would be very helpful.\n. As a quick workaround, I disabled EF validation completely, and manually altered the SQL schema. Not ideal, but it works.\n. ",
    "bandrews": "Just wanted to vote on this, as I'm running into this issue as well, and would also appreciate the ability to have claims >150 characters.    I too don't see an obvious way to easily increase the lengths without overriding a bunch of stuff I'd rather not touch (although I could be missing something).\n. ",
    "ckieran": "@kylegalbraith FYI in case this helps, I have seen errors like this when two threads are re-using the same DB context and are calling Find at the same time.\n@brockallen is correct - you should setup dbContext to be instance per http request in your DI config.  Then within a request try not to use any multi-threaded code as an EntityConnection is not guaranteed to be threadsafe.\nHappened upon this issue via a google search as I just added a Parallel.ForEach to my code to do 4 IO bound operations in parallel which ends up calling .Find() in my repo in 4 separate threads that resolve the same dbContext from DI .... which now reliably throws the above exception...  :+1: \nHope you guys resolved your issues!\n. ",
    "AnMVCCoder": "Thanks for the quick response. But, how do I set up the trace config?\n. Well, I tried one method of tracing, from what I found in https://msdn.microsoft.com/en-us/library/wwh16c6c.aspx - and putting this node in the system.web section of web.config -  - and got information through the trace.axd file - this information to me, kind of seems useless as to helping me \"diagnose how far in the code it gets and then where/why it starts to go south\". But, I don't know, clearly you have more knowledge in programming than I do, maybe you might find some of it of use, but I kind of doubt it from what I see, but who knows. This is the most interesting information I got from trace.axd:\nALL_HTTP:\nHTTP_CACHE_CONTROL:max-age=0 HTTP_CONNECTION:keep-alive HTTP_ACCEPT:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8 HTTP_ACCEPT_ENCODING:gzip, deflate, sdch HTTP_ACCEPT_LANGUAGE:en-US,en;q=0.8 HTTP_COOKIE:__RequestVerificationToken=IlPAmmS0DEVgvKB-RIOVk2XXJddG3ty3CY1pMvfTVuMCu7TLyumsyk2_vE-TzXDw7MnoFpfKNFYB3Mvsn7rm_AFQEumTYOBW6c_pbJwKxGA1 HTTP_HOST:localhost:5613 HTTP_USER_AGENT:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36 HTTP_UPGRADE_INSECURE_REQUESTS:1\nALL_RAW:\nCache-Control: max-age=0 Connection: keep-alive Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8 Accept-Encoding: gzip, deflate, sdch Accept-Language: en-US,en;q=0.8 Cookie: __RequestVerificationToken=IlPAmmS0DEVgvKB-RIOVk2XXJddG3ty3CY1pMvfTVuMCu7TLyumsyk2_vE-TzXDw7MnoFpfKNFYB3Mvsn7rm_AFQEumTYOBW6c_pbJwKxGA1 Host: localhost:5613 User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36 Upgrade-Insecure-Requests: 1\nAPPL_MD_PATH:   /LM/W3SVC/2/ROOT\nBut, I must add, I looked online for tracing methods for MVC, and there seems like there're a few options, but I don't know which one in particular would provide the best data. I also know about Profiling (like RedGate tools). But, I don't know which would provide the best details in these regards, so again, I ask, what do you suggest when it comes to tracing? If you want, I can upload my project to a download source, and you can download it and see it for yourself, I'll do whatever it is you ask in order to help me fix this issue. I really do like MembershipReboot, and I know, with your help, this matter will be resolved.\n. Or, in the mean time, in waiting for your response, maybe the stack trace information can come handy, I don't know. Well here it is:\n[NullReferenceException: Object reference not set to an instance of an object.]\n   BrockAllen.MembershipReboot.Mvc.Areas.UserAccount.Controllers.ChangeEmailController.Confirm(String id) in C:\\Users\\Big Pill_-\\Documents\\Visual Studio 2015\\Projects\\brockallen_MembershipReboot_WithoutExtraSamplesCode\\brockallen_MembershipReboot\\Controllers\\ChangeEmailController.cs:63\n   lambda_method(Closure , ControllerBase , Object[] ) +104\n   System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters) +14\n   System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary2 parameters) +157\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary2 parameters) +27\n   System.Web.Mvc.Async.AsyncControllerActionInvoker.b__39(IAsyncResult asyncResult, ActionInvocation innerInvokeState) +22\n   System.Web.Mvc.Async.WrappedAsyncResult2.CallEndDelegate(IAsyncResult asyncResult) +29\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult) +32\n   System.Web.Mvc.Async.AsyncInvocationWithFilters.b__3d() +50\n   System.Web.Mvc.Async.<>c__DisplayClass46.b__3f() +225\n   System.Web.Mvc.Async.<>c__DisplayClass33.b__32(IAsyncResult asyncResult) +10\n   System.Web.Mvc.Async.WrappedAsyncResult1.CallEndDelegate(IAsyncResult asyncResult) +10\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult) +34\n   System.Web.Mvc.Async.<>c__DisplayClass2b.b__1c() +26\n   System.Web.Mvc.Async.<>c__DisplayClass21.b__1e(IAsyncResult asyncResult) +100\n   System.Web.Mvc.Async.WrappedAsyncResult1.CallEndDelegate(IAsyncResult asyncResult) +10\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(IAsyncResult asyncResult) +27\n   System.Web.Mvc.Controller.b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState) +13\n   System.Web.Mvc.Async.WrappedAsyncVoid1.CallEndDelegate(IAsyncResult asyncResult) +29\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult) +36\n   System.Web.Mvc.Controller.b__15(IAsyncResult asyncResult, Controller controller) +12\n   System.Web.Mvc.Async.WrappedAsyncVoid1.CallEndDelegate(IAsyncResult asyncResult) +22\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.Controller.EndExecute(IAsyncResult asyncResult) +26\n   System.Web.Mvc.Controller.System.Web.Mvc.Async.IAsyncController.EndExecute(IAsyncResult asyncResult) +10\n   System.Web.Mvc.MvcHandler.b__5(IAsyncResult asyncResult, ProcessRequestState innerState) +21\n   System.Web.Mvc.Async.WrappedAsyncVoid1.CallEndDelegate(IAsyncResult asyncResult) +29\n   System.Web.Mvc.Async.WrappedAsyncResultBase1.End() +49\n   System.Web.Mvc.MvcHandler.EndProcessRequest(IAsyncResult asyncResult) +28\n   System.Web.Mvc.MvcHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result) +9\n   System.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +576\n   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +157\n. Actually, the thing is, I have it set up and working with ninject, and I prefer lightinject, so I have it set up and working in the exact same way with both di's, and the app has the same error whether it's ninject or lightinject, but, when the system is set up with one or the other di, the stack trace is actually different (it's a noticeably longer list with ninject, from what I can see), the stack trace I posted earlier was from the version of the app with lightinject. Also, from what I've seen, the stack trace seemed to have been a longer list of information when I implemented another method for tracing shown to me through Microsoft. I was intending to include all of this in this message, but I looked at the time, and it's getting late, and I have work tomorrow so I can get some extra overtime with holiday pay at my day job, Happy Holidays by the way. Anyway, I assume you'll message back before I'll be back from work tomorrow, I will do what you suggest, and respond accordingly. Again, thank you.\n. Ok, so, I got some trace data to show you (directly from the log file, in xml form). But first let me say, to me it kind of makes no sense, but since this is your project, I'm sure it's more than likely it'd make more sense to you. Well, the thing is, when it does a call to userAccountService.GetByVerificationKey - it does what it's supposed to, and then the trace reports \"[userAccountService.GetByVerificationKey] failed to locate account: (a long id number)\" - and digging deeper, going into your sample code for the single tenant project, I see that GetByVerificationKey in UserAcccountService has this line of code - \"key = this.Configuration.Crypto.Hash(key);\" - so, this might explain my confusion. You see, what confuses me is that when it says \"failed to locate account: (a long id number)\" - that \"long id number\" - is different from the id number I see in the database. Also, in the method GetByVerificationKey in UserAcccountService  in the single tenant project, this error is displayed after another check on \"var account = userRepository.GetByVerificationKey(key);\" and if \"(account == null)\" - which is not the case, the account exists, and that verification key provided is the exact key in the account when looking in the database. So, obviously this has me scratching my head. Hopefully, you can provide some kind of tip that'd fix this for me based on all this information. As I said, I can give you a link to the project, after I upload it to some download place online, and you can see for yourself. I have Visual Studio 2015 Enterprise, if that helps.\nAnyway, these are the two trace nodes specifically associated with that request (there aren't any other nodes associated with that request) (since it won't let me to include direct xml, from what I can tell, I formatted it, but you can tell it came from the trace, and it has the important data that you'd expect):\nE2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\"\n    EventID: 0\n    Type: 3\n    SubType Name=\"Information\": 0\n    Level: 8\n    TimeCreated SystemTime=\"2015-12-27T02:31:41.2917739Z\"\n    Source Name=\"MembershipReboot\"\n    Correlation ActivityID=\"{80000011-0001-f600-b63f-84710c7967bb}\" \n    Execution ProcessName=\"iisexpress\" ProcessID=\"14088\" ThreadID=\"7\"\n    Channel/\n    Computer: (mypc)\n  ApplicationData: [UserAccountService.GetByVerificationKey] called for key: 91F3F7554616559526146F9CBEC3AA1BD18CE7AB513E9D55E459280A6536C7B0\n/E2ETraceEvent\nE2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\"\n  EventID: 0\n    Type: 3\n    SubType Name=\"Warning\": 0\n    Level: 4\n    TimeCreated SystemTime=\"2015-12-27T02:31:41.8252309Z\" \n    Source Name=\"MembershipReboot\" \n    Correlation ActivityID=\"{80000011-0001-f600-b63f-84710c7967bb}\"\n    Execution ProcessName=\"iisexpress\" ProcessID=\"14088\" ThreadID=\"7\" \n    Channel/\n    Computer: (mypc)\n  ApplicationData: [UserAccountService.GetByVerificationKey] failed to locate account: 7A5F053864FC699211B4CF159A4BA900E4273BB191247862FAEA736D7065597D\n/E2ETraceEvent\n. And by the way, obviously you are a very well experienced programmer, to make such an ambitious goal of making a security project that is more advanced than what Microsoft is offering, you clearly are an expert. I know there must be something here that I must've done wrong, though it is not at all close to obvious to me what that may be, and I'm sure after some more back and forth, you'll be able to help me. I, and surely all the other developers out there that are using membershipreboot are clearly thankful for your work, and your willingness to help us when we have such problems.\n. Ok, well, I didn't respond till now, because it was hard for me to think of how do I put this. I don't know what to make of what you just said, I didn't alter the db query, so I don't know how that makes sense. I decided I can always make my own hack-fix - by creating my own method doing the exact same thing. But, it's just quite a bit troubling to see that this is even occurring. It's even more troubling to see that upon doing various searches through google on this issue, and not one, from what I can see, other person has even reported this happening. I don't know why I seem to be the only person on the internet that has encountered this problem. But, I assure you, I did not change your code, and am strictly relying on your library (in it's most up-to-date Nuget packages) as it's supposed to be implemented. As I said, I can upload my project to the internet, and you can download it, and see for yourself. I don't have a clue why this is happening, and it just doesn't make any sense that it's happening. Yes, I can hack it and create a custom method, but first, I hope I can get a more accurate response from you. Clearly something strange is going on here, and I just hope you can help me in these regards.\n. Ok, since you didn't respond, I guess I'll have no choice but to make verification happen with the system with my own code I write (what I previously called a \"hack-fix\") that does what membershipreboot is supposed to be doing, but for some reason doesn't. You're explanation is odd though, I mean you are the author of this library, and you don't have any interest as to why such weird behaviour is occurring for me? All you offer is - maybe - \"case sensitivity in the DB query\"?  I didn't write the query, you did. But I digress, I'm not even sure if membershipreboot is such a great idea anymore, seeing as how there are over 600 (although, I'm pretty sure many of them have been addressed seeing as it is at version 8 (I think it was)) (isn't it possible that verification has been somehow broken on the newest version you released to nuget, and you weren't aware of it? (which was kind of the reason why I said \"and you don't have any interest as to why such weird behaviour is occurring for me?\")) issues mentioned by those that have or have tried - to implement it. But, I'm a risk taker by nature, so I say, ok, I'll give it a shot, overlooking this problem I originally was talking about, as well as the concerns I just raised (among others). I'm not trying to sound rude towards you, I just thought your behaviour has been just a little odd here. But, I have a lot of respect for you, and it's unfortunate you're not as willing to help me here as I wish you would.\nBut since you chose not to respond to my previous most recent comment before this one, and so I obviously guess what you expect me to do is figure it out, and leave you alone on this matter.\nI just have one new question on this matter before I do that, and please let me know as good of an answer as you can on the matter:\nThe question: So, if I do create my own custom code (EntityFramework based mainly) that does the same thing membershipreboot should be doing when it comes to verification, will it in any way effect the functionality of membershipreboot, are there any negatives to this approach? Please let me know, thank you.\nPS: I just remembered, at first I wasn't even able to make membershipreboot run through the nuget package in my own project (which I figured out how to do a few days later), and I was at that time checking out the sample projects, and upon registering a user with the singletenant project, and receiving the email - and by the way, that's another thing, you're default email mechanism doesn't seem to work either, I had to add my own code for it, but that's fine... Anyway, once the email was received in that situation, I went to the verification (for the singletentant project) link in the email - and it too had a problem - with a different error message, but there was problem there too. After that I was hoping it wouldn't happen with my custom project, but as I said - it does - just with a different error message.\n. I understand where you're coming from, I too have a busy life and day job. Ok, well, as I said, I guess I'll create my own mechanism for verification. But, you didn't address my question on the matter, will me implementing a custom mechanism for verification have any negative side-effect on the membershipreboot functionality? All I'm thinking about is receiving the verification key in the controller, adding my own custom model and entityframework code that looks at the database and tells the database this user has been verified upon receiving the verification code. Just please answer that question. And if you can help me to do it through membershipreboot instead of my custom code on a future date, on your own time, I definitely have the patience for that. I have an ambitious idea to create a website kind of quickly in the next couple months, and I wanted a comments section - where users can register, login, and comment, and have the abilities they'd expect from a standard system of this kind. I also wanted it to be as secure as possible, not just for the website itself, but so I can have a better understanding of website security than I ever did. I also want to take the Microsoft Certification Test, and become a Certified developer within the new year so I can get a job as a developer. And yeah, security is not the only thing when it comes MVC development that I need to understand, but it still is (obviously) a good asset to have knowledge in. Thank you for creating the library, and being willing to help people like me when you do have time in your busy life. Though it's not 2016 yet, I say Happy New Year to you - and probably will say it again when the year has changed.\n. I said Happy New Year because I'm a human being, and I'm talking to you, another human being, and it turns out at the time of the writing, it was New Years, and since I say Happy New Years to everybody, even strangers, I said it to you too. You said I wrote a lot of words, but so did you in your response, but that's fine, you gave some good insights into your thinking on the matter.\nAnyways, so, you wrote \"Do the samples work for you as-is? Usually that's what people do -- get those working as expected, then figure out the deltas from the samples to your code.\" But, that was after I already wrote in a previous comment \" I just remembered, at first I wasn't even able to make membershipreboot run through the nuget package in my own project (which I figured out how to do a few days later), and I was at that time checking out the sample projects, and upon registering a user with the singletenant project, and receiving the email - and by the way, that's another thing, you're default email mechanism doesn't seem to work either, I had to add my own code for it, but that's fine... Anyway, once the email was received in that situation, I went to the verification (for the singletentant project) link in the email - and it too had a problem - with a different error message, but there was problem there too. After that I was hoping it wouldn't happen with my custom project, but as I said - it does - just with a different error message.\" - so - I already addressed that question.\nYou also wrote \"So, if the key being sent is not matching, then either the DB query is case sensitive (I don't know what DB you're using or how it's configured and that was my first guess), or there's simply no match.\" Good point, I never gave you that information, and yeah, I see from your samples, there's more than one option in these regards. Although, on your documentation wiki, you did specifically suggest using the SQL DB default, and actually, that is what I'm using, but I never did clarify that till now. I have SQL Server 2014 Express (with Advanced Services) installed on my computer. The DB itself was auto-configured upon first build of the Project - which I think had something to do with the code \"Database.SetInitializer(new MigrateDatabaseToLatestVersion());\" - but I'm not sure of that, all I know is it was auto-configured, and I'm sure it's the standard DB from your Project, it has these Tables in it \"_MigrationHistory, GroupChilds, Groups, LinkedAccountClaims, LinkedAccounts, PasswordResetSecrets, TwoFactorAuthTokens, UserAccounts, UserCertificates, and - UserClaims\".\nIn that same paragraph I just referenced, you continued to say \"...or there's simply no match. There could be no match because you generated a new key and overwrote the prior value in the DB (for example if you tried to re-send the verification key, or tried to register a new email). This would be triggered by your code so you'd need to watch your DB to see why it changed from the time it was generated and sent to the time you tried to use it to verify the account.\" I'm pretty sure I'm not overwriting the original key, because, upon account creation, when it comes to the code that sends the verification email, the way it retrieves the verification key is like \"var vk = account.VerificationKey;\" (and the variable vk is included in the text of the body of the email message), the \"account\" variable I used in that statement is the same one that creates the account \"var account = _userAccountService.CreateAccount(model.Username, model.Password, model.Email);\". You also said \"So this verification key is what's sent to a user. It's the key that proves the owner of the email account received the email. You don't want this stored in the DB in plaintext, as an attacker with read access to the DB could then lift the value and resubmit it to compromise the system. This is more of a threat around password reset, rather than email verification, but it's the same column in the DB so for both scenarios the value is hashed.\" And I already said in a previous comment \"proper verification key (I compared it to the database entry, it was the same code).\" - so I don't know how this hashing works, but it is the exact same key in the VerificationKey column of the UserAccounts Table - the exact same key that is sent in the email upon registration, same case, same characters, everything.\nNow, I'm unsure if what I'm going to say here is a valid point, but maybe it is, or maybe it isn't, it's just an observation based on the behaviour, and I may be wrong in my observation. Maybe it is the hashing causing the inability of membershipreboot's mechanism of verifying the account to work, it not being able to match the verification key provided through the email link with the one from the database. As can be seen in the information I provided from tracing - which wrote \" [UserAccountService.GetByVerificationKey] called for key: 91F3F7554616559526146F9CBEC3AA1BD18CE7AB513E9D55E459280A6536C7B0\", but then also wrote (in the trace right after it) - \"[UserAccountService.GetByVerificationKey] failed to locate account: 7A5F053864FC699211B4CF159A4BA900E4273BB191247862FAEA736D7065597D\" - and that id code (\"7A5F053864FC699211B4CF159A4BA900E4273BB191247862FAEA736D7065597D\") in the failed trace message - does not match up with the verification key, or the ID column for the UserAccount Table. And when I wrote (at the beginning of this paragraph) \"Maybe it is the hashing causing the inability of membershipreboot's mechanism of verifying the account to work\" - what I'm implying (to be specific) is - I send the actual raw verification key entered into the DB - retrieving it from the account variable associated with creating the account - through the email - and it's included in the link. When, in my inbox, I see the email, and click the link, and it sends that data with the raw key provided in the link, and then tries to find it in the DB, you see, again, I'm unsure of how exactly your hashing mechanism works, but, maybe (a guess from my part) - what the method is expecting here is a hashed version of the verification key, not the raw version (which is what I sent in the email with the link) - and it receives the raw version, and since it's expecting the hashed version, it actually doesn't see a match because it's the raw version it received rather than the hashed version it was expecting. Again, maybe I'm wrong, but I'm just going out on a limb, and making a guess.\nI write a lot of words so that you can have as much information about this as possible. I tried to address as much of what you brought up in your previous comment as possible. I still hope you can help me. It never was my intent to have a \"blackmail-like passive-aggressive tone\", I just was hoping you can help me, I do not by any means want to sound rude, I'm sorry if I came off that way.\n. Ok, that is some interesting information. Thank you. But, I'm trying to figure out how do I actually implement it, I mean, as I said, I create the account with \"var account = userAccountService.CreateAccount(model.Username, model.Password, model.Email);\", and then, I had attempted to get the proper verification key with \"var vk = account.VerificationKey;\" - but you're now telling me to get it through the \"AccountCreatedEvent\" - which contains the proper verification key I should be sending in the email. Ok, that's really promising, but, my question now is - how do I get the verification key from the AccountCreatedEvent - in a way that's similar to my previous attempt at retrieving the verification key (\"var vk = account.VerificationKey;\") (maybe something like \"var vk = AccountCreatedEvent.VerificationKey;\" - which obviously is not it (I tried something like it...) - but you know what I mean - how do I get the key and put it in a variable object like that so I can easily put it in the text of an email body)?\n. Honestly, I am learning advanced computer programming, especially MVC development, I'm sure I will get to the point where I _fully understand advanced concepts like Event Handling - and how to implement it in such a way that would be able to do exactly what you're referring to - with just what you said as an explanation, and not need to come and ask such a follow-up question, and just be able to do it, no problem. But, unfortunately, I'm not at that level currently. I'm honestly sorry I'm asking you for help in such a way, seeing as how you're expecting me to just know. I'm actually embarrassed that I'm asking this.\nPlease overlook my non-understanding on this, and offer me information on how do I actually set up an event handler that detects the AccountCreatedEvent and reveals the VerificationKey that is associated with an actual account upon account creation - enabling that key to be put in a variable that can be used in the body of an email message to be sent. I really tried to look into your wiki, and the SingleTenant Project, and tried my best to understand how to do this on my own, but I just couldn't figure out a way to do it.\nI ended up with this problem because initially (as I previously mentioned) - I had problems sending the verification email itself, originally, I gave the email information in the system.net section of the web.config, and just assumed your system auto-sends the verification email, and found it wasn't just auto-sent, but didn't mind, because a concern of mine was having the control of creating custom verification email messages - so I can phrase it however I wanted, and include custom html and such. But now I see it's harder than I thought to include the proper VerificationKey, so I need this further help I asked from you in the previous paragraph.\nAnother idea that came to me while writing this was - MembershipReboot is clearly a powerful library offering a much better level of security than the Microsoft defaults, but, and this wasn't obvious to me at the start, it is clearly made for more advanced developers, and those that're like me don't have the knowledge to easily implement it. I hope you can help me in the way I asked in the second paragraph of this post. But, on the other hand, I do remember reading you also offer another library with similar functionality and level of security - as a layer placed on top of the Microsoft defaults - IdentityReboot. I kind of like MembershipReboot even more than IdentityReboot. But a quick question I have is - is IdentityReboot more easy to implement? I mean the Microsoft defaults are pretty simple to work with and there documentation makes it pretty simple to understand. I do understand that you are just one man, and you humbly made this free-to-use, and I truly do appreciate that, and I'm sure everyone else that uses it feels the same. I thank you for creating these libraries, being willing to help people when they have questions, and helping me. I also apologize for having such verbose posts in talking with you. But, on the matter of IdentityReboot, I'd rather use MembershipReboot, and I hope you can help me as I asked in the second paragraph of this post.\n. Thank you so much, it works! Now that you provided me the details on how to detect the Events, I am almost positive I will have no issues from this point with the system. I might not be as advanced in my understanding of development techniques as I wish, but, I am not exactly an amateur neither, though it may have sounded a bit like it at points in our conversation. Event Handling is something I haven't really done much - especially with custom libraries. But, I do have a pretty good understanding with many c#, ASP.NET, and MVC functionalities. Thanks so much again, issue closed :)\n. I just remembered I wanted to say to you - actually, you're wrong, your event bus system is a good way to do this. I know the way I thought would've been more optimal is pretty standard (like \"account.VerificationKey\")  - but - your event bus way with event handling is good too. And actually, I'm thankful you introduced me to this concept - now I know even more about programming than before - I know event handling, and will obviously use some of these concepts in my own code.\nAlso, I mentioned in my original question - that I asked the same question on stackoverflow. Obviously it was you who answered my question here, and I thank you. But, since that question is there on stackoverflow, it's best to have the question answered there too. So, I hope you read this, and I'm unsure of how GitHub works, maybe you'll be notified about this comment I just made, and if so, I assume you'll read it. But, without some kind of response from you, I'll be unsure of that. Since you answered my question here, I would hope you can go over to that stackoverflow page with my question and answer it there (with the answer that worked here), and I would mark that as the answer. I'll give that some time, and if you don't answer that question there for me to mark it as the answer, or respond to this comment in the next 5 days - then I'll just answer my question with the answer that worked here on stackoverflow on that page I linked to. Thanks a lot again.\n. ",
    "Robban1980": "Will try to fix it an do a PR. \n. I recently did the move from IdentityServer3 and MR to IdentityServer4 and AspNet Identity 3. And it was quite painless. Given i have not been using all functionality in MR, but still really easy.\nTo not make any difference for the users, i implemented a custom password validator, that can handle both old MR hashes and the new ones for Identity 3. Then the password transition part can be done gradually as the users changes passwords.. @justSteve it would be easier to answer if you had specific questions. :)\nBasic things i did was setting up the DB for AspNet identity to be able to see what it looked like and how i should do the migration of the users. There is a bit of differences between the databases, roles and claim can be mapped quite easily. Token generation is done in AspNet Identity so these no longer needs to be stored in the DB, unless you want to do something custom with them. \nAspNet identity has most of what MR offers, if it does not have something specific it can easily be added.\n. @TheeJamesLee no promises, but i will try to throw together an example of a custom password validator implementation for AspNet identity this week with some instructions, and upload it. \nI would recommend transforming your MR data to fit AspNet identity. You might need to add some new columns to AspNet Identity User table as AspNet Identity is very bare bone. This would be completely from case to case on what you use and not. I did it this way to make AspNet identity easier to upgrade in the future.\n. @TheeJamesLee please check here for an example https://github.com/Robban1980/MembershipRebootToAspNetIdentity.PasswordHasher. ",
    "KathleenDollard": "Sounds perfect. Had overlooked it. Thanks!\n. ",
    "nicholas-brooks": "I've been looking at this code today, so thought I'd take stab at answering.  Disclaimer - newbie to membershipreboot and to security in general.\n1. This doesn't answer your question directly, but from what I can see in BrockAllen.MembershipReboot/Crypto/System.Web.Helpers.Crypto.cs the HashPassword method returns a base64 encoded byte array of the salt + the calculated hash.  If you just looked at the first bit of the hashed value in the database, it might appear they are the same however.. see point 2 as to why.\n2. No it shouldn't as the iteration count used originally is stored with the hashed value.  If you look at  HashPassword in BrockAllen.MembershipReboot/Crypto/DefaultCrypto.cs you can see that the string returned (that ends up being persisted) is the iterationCount + PasswordHashingIterationCountSeparator + Hashed Password (salt + hash).\nAs for suggested reading, me too!\n. @brockallen - No, users do not self-register.\nDo you know of any existing constant-time middleware packages?  I'd rather use something that is tried and tested than roll my own.\n. @brockallen  - Thanks for that. I was thinking along those lines as well, however would need to only do it for certain endpoints (e.g. sign in) and certain verbs.\n. ",
    "kryptx": "@brockallen We were able to make that work. Thank you!\n. ",
    "rtassarone": "Terrific thank you Brock...\n. I'm reading https://github.com/brockallen/BrockAllen.MembershipReboot/wiki/Email-Configuration and I see the section about configuring an AspNetApplicationInformation object to inform the EmailMessageFormatter of the URLs.  Per https://github.com/brockallen/BrockAllen.MembershipReboot/blob/01a256b3de9979b0bc5b32441d673f22c54d40d4/src/BrockAllen.MembershipReboot.WebHost/AspNetApplicationInformation.cs the only configurable URLs are:\n- Login url\n- Confirm change email url\n- Cancel verification url\n- Confirm password reset url\nI guess the account verification operation just uses the confirm change email url (without actually doing an email address change) and if I want to implement a new, dedicated account verification url it's up to me?  Or is there a dedicated endpoint for that that I'm not seeing in any of the existing controllers?\nFinally how do I exit the email content?  I read in your docs that the strings are embedded.\n. Hi Brock, could I bug you here....?   Thanks\n. ",
    "cbomkamp": "I've noticed the same issue. The longer the normal login takes, the more pronounced the difference is. I had the same thought as you but I would just hash the entered password if the user doesn't exist.\n. Sorry for commenting on a closed issue, but I thought this might help someone else. I had the same problem so I made a unit test to ensure custom properties were virtual.\n```\n[Test]\npublic void AllCustomPropertiesMustBeVirtualToSupportDeletingOfChildCollectionItems()\n{\n    var properties = typeof(MyCustomUserClass).GetProperties(BindingFlags.DeclaredOnly | .BindingFlags.Public | BindingFlags.Instance);\nforeach (var accessor in properties.Select(property => property.GetAccessors().First()))\n{\n    Assert.IsTrue(accessor.IsVirtual, string.Format(\"{0}.{1} was expected to be virtual but was not.\", accessor.DeclaringType.Name, accessor.Name));\n}\n\n}\n```\n. We implemented a custom ICrypto implementation to migrate existing users from straight up SHA1. DefaultCrypto already prepends the iteration count with a period as the separator. So the custom crypto checks if the hashed password contains the separator. If not, we know it's SHA1. If it does have the separator, we just use the DefaultCrypto implementation. Then in the custom UserAccountService we rehash with the new algorithm.\n. ",
    "kwaller-ral": "What API do I need to use? I was expecting there to be a HTML Input for Tenant when turning on the boolean flag, similar to adding params to the \"CustomUser.cs\" class (ie add Age, get input for Age etc..)\n. Yeah I get that I would need to pass a string \"tenant\" along with the command. I figured that this would work out of the box just by ticking the Config.MultiTenant = true; box, and having the UI display an input box for tenant, however this does not work.\n. ",
    "markchipman": "On second thought, I can now see that in doing such a things I'm just moving concerns from one table to another.  I can simply adopt the existing MR structure into my desired schema and get to where I need to be. :)\n. ",
    "najeebzohaib": "Brilliant! Thanks \n. ",
    "doublej42": "I'm actually using route code from:\nhttps://github.com/IdentityServer/IdentityServer3.MembershipReboot/blob/41d0651924d153f56478384e75d98edb764a0e60/source/WebHost/MR/CustomUser.cs\nI ended up modifying the database by hand.\n. ",
    "SteelsenS": "This fell off my radar but I noticed it in my queue. @brockallen - any preference on which path to take? I'm happy to submit a PR but since there are side effects to every option would like your feedback first.\n. ",
    "joramwangi": "Is there a way to call  passwordreset but but not trigger the password\nreset event\nOn Thu, Mar 10, 2016 at 12:24 AM, Brock Allen notifications@github.com\nwrote:\n\nWell, there is no real functionality around password expired -- it's\nreally just a helper to calculate if the password is expired. Your UI would\nneed to check it and enforce it in some way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/brockallen/BrockAllen.MembershipReboot/issues/622#issuecomment-194512170\n.\n. \n",
    "mroskamp": "Our current system has a separate field for specifying the hashing algorithm. It currently has options for plaintext, MD5 and salted MD5. During migration, plaintext passwords would use the DefaultCrypto. \nA solution similar to cbomkamp's might work for us, we'd just have to figure out how to get it to work the a few different possible hashing algorithms. \n. @neilhosey & @FullyCSharped, I was able to implement multiple hashing algorithms, much like how @brockallen described.\nOn a basic level, the passwords coming in from our current system are in the format <alg>.<password>, so we implemented the ICrypto service and created a few new classes for verifying our custom hashing algorithms. In our VerifyHashedPassword we parse hashedPassword and verify the password based on the <alg>. When a user changes his or her password, the default MR algorithm is used.\n. ",
    "neilhosey": "Im also running into the exact same problem.  Im trying to migrate several systems with different hashing algorithms to MR, but I am stuck, as i need to be able to switch between algorithm based on system the user was synced from.\nWas there any work around for this in the end?\n. ",
    "CSharped": "Hi @brockallen \nI am also facing the same challenge as @neilhosey and @mroskamp . I was looking at the code in github for UserAccountService and the DefaultCrypto class which has the hashing algo implementation. May be what could help is instead of ICrypto interface we could use an abstract class which will also have all the default functionalities and also lets us override any required methods which in this case is the HashingAlgo\n. ",
    "imonthercks": "Thanks for the response.  I will take a closer look at my code.  \nIs the intent that a temporary cookie be created in the case of authenticating with an expired password so that the identity of the user is available for the HasUserID extension method in the context of another request to the actual \"Change Password\" screen?\nTracing through the MR code, it appears that when the password is expired, it is calling IssuePartialSignInToken from the AuthenticationService.SignIn method...\n```\n        private void IssuePartialSignInToken(TAccount account, string method)\n        {\n            if (account == null) throw new ArgumentNullException(\"account\");\n        Tracing.Verbose(\"[AuthenticationService.IssuePartialSignInCookieForTwoFactorAuth] Account ID: {0}\", account.ID);\n\n        var claims = GetBasicClaims(account, method).Union(GetPendingAuthClaims(account));\n\n        var ci = new ClaimsIdentity(claims); // no auth type param so user will not be actually authenticated\n        var cp = new ClaimsPrincipal(ci);\n\n        IssueToken(cp, MembershipRebootConstants.AuthenticationService.TwoFactorAuthTokenLifetime, false);\n    }\n\n```\nI would assume that this token is what the should contain the user's identifier to make HasUserId() return true.\nFor now, I have worked around by passing the userid to the Change Password screen, and then re-authenticating them before actually changing the password.\nThanks for your help.\n. ",
    "sevenzsu": "Having the same problem here. I have a method to create a user with temporary password(expired password) to force the user to change it the first time they login. IssuePartialSignInToken won't populate the user object and hence User.HasUserID() will failed in changepasswordcontroller. What is the best solution here? Could you make the IssuePartialSignInToken public virtual method like IssueToken so we can override it to authenticate the user?\n. ",
    "jonbarthol": "I realized I wasn't very clear in my initial post. It's easy to append any returnUrl to the link in the password reset email. But what I need to append is the URL that the user came from initially when attempting to login. This returnUrl is in IdSrv's signin message. But I don't think I can use the GetSignInMessage method from the EmailMessageFormatter.GetBody method which I'm overriding.\n. I decided to use a new VerificationReturnUrl column on the UserAccounts table. Thanks.\n. Ok. That makes sense. Thanks.\n. I'm not sure this will work. The \"account created\" event happens before the \"linked account added\" event. So there's no way to know if I should hide the cancel link in the \"account created\" email. Also, is there a way to include the verification key in the \"linked account added\" email? The verification key that's included in the UserAccountEvent object is the hashed value. Thanks.\n. Sorry, I misinterpreted the behavior I'm seeing. The problem isn't that the verification key is overwritten. It is in fact the correct verification key. The problem is that there is no way to delete the newly added account by clicking on the \"Cancel request\" link in the \"account created\" email. This is because the \"linked account added\" event causes the LastLogin on the user record to be updated. So the user is no  longer considered a new account.\n. Maybe you could re-implement the VerificationKeyPurpose value of \"VerifyAccount.\" It's currently commented out in VerificationKeyPurpose.cs. You could delete the user record if IsAccountVerified is false and VerificationKeyPurpose is \"VerifyAccount.\"  A side note to this is our company has \"RequireAccountVerfication\" set to false, so a user is immediately logged in. But it seems a little odd (bad?) that LastLogin on the user record isn't set, even though the user is actually logged in. It's not set until they log in a second time.\n. But wouldn't a new \"has logged in\" column serve the same purpose as the LastLogin column being set to a non-null value? I guess we need to determine in what state the user record can be deleted via a cancel request. I could imagine a scenario where a user has never verified his email, has logged in a hundred times, but then goes back to his original \"account created\" email and attempts to cancel the request. Should his user record be deleted?\n. @lgoudriaan: Did you ever resolve this? I think I'm having a similar issue. See issue #670. Thanks!\n. @lgoudriaan which NuGet packages are your referring to? I just have the BrockAllen.MembershipReboot version 8.4.0 package. No other package has been released.\n. Thanks, @brockallen !. ",
    "ZBlocker655": "You mean an implementation of your ICrypto interface that uses BCrypt?  Not yet, since I just found out about it.  Are you saying that if I end up writing one you'd be interested in adding it to this framework? \n. I might end up using BCrypt.Net.   Not sure yet.  Still in evaluation phase. \n. Still discussing with my team whether we need to put in BCrypt hashing or not.  So far we're using the default for MembershipReboot.  If we do go BCrypt, we'll probably use BCrypt.Net.\n. ",
    "jlehew-sd": "Ok, changed the passwordHashingIterationCount in web.config to 1 (from 0) and the 5.43s time above is now 5.14s. It improved it slightly but needs to run under 1 second if possible.\nOur production system is in beta and has less than 5 concurrent users.  The times above are for the 2nd login attempt to ensure the web pages, data, etc. are already JIT compiled and in cache.\nAny other suggestions?\n. I loaded up the source and stepped thru the code...\nThe slow code is in the VerifyHashedPassword method in the Crypto static class, namespace BrockAllen.MembershipReboot.Helpers.\non the lines 127-130, it has using (var deriveBytes = new Rfc2898DeriveBytes(password, salt, iterationCount))  plus the .GetBytes call in the using statement.\nYou were correct about the iterationCount as the cause.  It was set to 256000 in the Locals window and the .GetBytes call took 3.4 second.  Changing iterationCount to 20 reduced it to under <= 1ms.\nWhat's the best way to change the iterationCount as changing in the Web.config didn't affect it? And what is the lowest value iterationCount should be set to?  Setting to 10,000 took 170ms.\nThanks!\nJohn\n. ",
    "mafshin": "Thanks @brockallen , I faced the very same exception and as you suggested it was because of version mismatch. The Consolidateoption in Nuget Package Manager fixed that.\n. No idea on this? A MembershipReboot database is created when I want to initialize my db!!\n. ",
    "JohnMcAvinue": "That could work alright. Thanks for the quick reply!\n. The problem with this code is that the IsLoginAllowed property is protected internal so I can't access that value from the event:\npublic class LockAccountWhenTooManyFailedLoginAttempts : IEventHandler<TooManyRecentPasswordFailuresEvent<CustomUser>>\n    {\n        public void Handle(TooManyRecentPasswordFailuresEvent<CustomUser> evt)\n        {\n            evt.Account.IsLoginAllowed = false;\n        }\n    }\n. Yeah you're right there's a method on UserAccountService which does this. Thanks!\n. Can you clarify what you mean by on the UserAccountService? I've tried adding the CommandHandler in the Constructor but that didn't work. I can't see where else it could be registered?\n. Thanks but I meant at what point do I add this? I've currently done this because with using the Factory to create everything, the constructor is the only point at which I can be sure that the AddCommandHandler method will be called:\npublic class CustomUserAccountService : UserAccountService<CustomUser>\n    {\n        public CustomUserAccountService(CustomConfig config, CustomUserRepository repo)\n            : base(config, repo)\n        {\n            AddCommandHandler(new CustomErrorDescriptionCommand());\n        }\n    }\n. Thank you for the very kind offer but I can't share the code with you as it doesn't belong to me.\nIf you point me in the right direction though I can probably figure it out and stop taking up your time. We're using OWIN middleware so that's throwing me off a bit with finding where it's created & initalised.\n. That's a bit harsh. \nI'm just a developer, even worse a contractor, and cannot open support requests to 3rd parties which costs money without going through proper channels first. I'd have to escalate this to my manager who would then make the decision and get approval for the financing. \nI'm sure they wouldn't have a problem doing this and therefore supporting/rewarding you for your hard work but it could not happen without me doing my job and eliminating the possibility that I can do this myself. That is after all what they are paying me to do.\n. Sorry I misunderstood when you mentioned the pull request. I thought you wanted a version of our source code and not a corrected copy of M.R!\nYes I can do the latter no problem. From reading the source code I need to replicate how events on the event bus are merged in from the config in the UserAccountService. Should I create an AggregateCommandBus object in the same manner as AggregateEventBus? Any problems with that approach?\n. New Pull Request on Dev branch. Sorry about that - still finding my way around Git!\n. Yes it's working fine for me now thanks\n. Great thanks! Any plans for a new version of Nuget any time soon?\n. ",
    "mirecg": "Hi, not multiple certificates for one user, this is allowed. But multiple users to have the same certificate. We have a customer where multiple users share the same certificate for login to our system. This was allowed in our currently used identity model. But we are migrating to this MembershipReboot identity model. This is killer requirement for us. \nWe use certificate as the second authentication factor, so there's no identification problem when authenticating user by certificate as a second factor, because user is already identified by username/password.\n. The setting controlling the uniqueness of the certificate is sufficient. \n. Hi, how do you see this, when are you going to incorporate this setting into release? Without it I will need to go with own version of code which would be my last resort. \n. hmm, the same on my side\nAs I can see there are already several PRs waiting for quite a long time. This will not be the solution ...\n. Hi, I've finaly created a PR for this issue. Be the meantime I've found simmilar issue with the phone uniqueness. Would mind allowing non-unique mobile phones? The reason is the same as for the certificates. In our existing solution the customers have several accounts with same certificate and with the same phone number. I would open another issue for this and I would create another PR with simmilar solution, as having configuration property PhoneNumberIsUnique.\n. ",
    "EsaHub": "Hi brockallen,\nfor this issues you said \"I don't foresee making this\". Do you have some special reason for reject this issue? Some security issue? Or some other? (Some other than your work bandwidth only)\nI'd like that mobile number is unique, but real life is many times different.\nOur company has been used your great membershipreboot component. Currently in production we have problem that some customers (companies and their employees) does not have personal mobile numbers/devices. It means that it should be possible to add non unique mobile number for different user account.\nIf you don't agree this pull request, do u see any risk (e.g. security or some other) that we can take to use this kind of functionality?\n. ",
    "stephan-simondshealth-com-au": "@brockallen \nHi Brock, I understand time is always scarce and I appreciate the amount of effort you put in already, but....\nThis change request looks really straight forward to me. @mirecg has done good work, it's just a  matter of merging it in, isn't it??\nIt would resolve a business blocker for us, as we need this need feature as we will have users with several accounts linking them to their one mobile phone....\nCan I ask you to pls pls pls pls reconsider ?\n. ",
    "stevengopmo": "I haven't figured out direct cause yet, but adding JsonIgnore to the Claims public property seemed to solve.  Somehow it seems like both the Claims property and the ClaimsCollection are being enumerated to get the claims which is causing duplication.  If it helps anyone, my CustomUser Claims property now looks like\n[JsonIgnore]\n        public override IEnumerable<UserClaim> Claims => base.Claims;\n. yes I am, I switched to HierarchicalUser to see if it was my class but still the same.  Previous version I use of MembershipReboot does not do this.  Raven does store both properties in the db as separate collections, but when reading I've never had the duplication problem.  Of course I'm also using a newer version of Raven in this project so I'm not sure whether it's Raven or something funky in my custom classes for interacting with Raven & Membership & IdSrv.  If I do find the root cause I'll document here, but at least I have a simple workaround.\n. adding the JsonIgnore also solved the problem of both the property and the field being stored in the db.\n. ",
    "jkonecki": "So you're suggesting one has a separate instance or Service and Repository for each tenant? That will require a straightforward change to dependency injection configuration. \n. That information could be useful on the multitenancy wiki page.\n. ",
    "Steven-Pingel": "\nIf you feel like helping out, you could write a unit test to show that it's broken.\n\nI'm looking into that now actually.  Enjoy your holiday!\n. No, we've actually forked this project locally, I'll update if/when we fix it.  I need to get a more robust test in place to prove the issue, as it seems to work when tested in the context of the user service.  Point still stands though that it's a bit odd the created event is pushed into the queue prior to the validation calls.\n. ",
    "philpowers": "Ok thanks. Is there any means for extending that? Or any other clever ideas for storing Claim-specific metadata? My current solution was to encode the information in the \"Value\" field and then do pre/post-processing on it wherever it's coming out of the DB. \n. Sounds good. Thanks for the info.\n. ",
    "vjkr14": "Any body else can help?\n. ",
    "AKlaus": "@brockallen, could you please confirm that you meant ASP.NET Core Identity as a way to move on? And would you still advise to use MR to the .NET developers (not .NET Core)?. ",
    "TheeJamesLee": "@Robban1980 this is something that we are going to have to do shortly.  I was wondering if you were able to share the custom password validator and more detail around the defined steps you took for the migration, with any chance example code if there was anything specific?\nI'm just thinking as well that more and more developers are going to need to do this so would be ace if we could put something together to let more people take advantage of the move and make it easier for the masses. :)\nSo I think the main steps from reading this (and from the top of my head).\n*'existing' = MembershipReboot  |||  'newer' = AspNet Identity\n1) Create AspNet Identity solution + custom password validator that can handle 'existing' account passwords and 'newer' account passwords, converting to 'newer' on change password.\n2) Create 'newer' fresh database.\n3) Migrate 'existing' data into 'newer' database  (Or did you change the models in AspNet identity to match the 'existing' data and just point at the DB?)\n4) Test\n5) Retire 'existing'\n. ",
    "Vincent026": "Thanks for the quick response Brock! I will have a close look at this article again. . Our current implementation, based on your examples, uses some InMemory clients, users and scopes, registered in the IdentityServerServiceFactory, which is mapped to the path \"/identity\". I see that there is also a mapped path named \"/core\". Which mapping do I need to the configure the IdentityServerServiceFactory, in order to register the custom user service?\nkind regards. Thanks! My first thought was that these where compulsory predefined end points. I am getting closer to what I want. . I am making progress with implementing CustomUserAccountService and CustomUserRepository. It seems that a hashed password is expected to be stored. Our table has a readable password field and that is ok with us. I rather don't modify the schema of the user table, What I am trying to do now is intercepting authentication by overriding the Authenticate method(s) in the CustomUserAccountService. Is this a good strategy for overriding authentication (to validate the password with the readable field instead of using the hashedpassword)?. You are right that we already have a way of filling our DB and there is no need for us to have MR to do the CRUD actions. However, this may change in the future. Besides that, we have several user sources and I can use MR to show the combined set. I don't implement the Create, Update and Delete methods in the repo. . ",
    "HenkHui": "Thanks for the quick response Brock.\nThe e-mail is changed and the account state is set to not verified:\nif (!Configuration.RequireAccountVerification)\n  {\n               Tracing.Verbose(\"[UserAccountService.ChangeEmailRequest] RequireAccountVerification false, changing email\");             \n                account.IsAccountVerified = false;\n                account.Email = newEmail;\n               this.AddEvent(new EmailChangedEvent { Account = account, OldEmail = oldEmail, VerificationKey = key });\n                Update(account);\n            }\n            else\n            {\n                Tracing.Verbose(\"[UserAccountService.ChangeEmailRequest] RequireAccountVerification true, sending changing email\");\n                this.AddEvent(new EmailChangeRequestedEvent { Account = account, OldEmail = oldEmail, NewEmail = newEmail, VerificationKey = key });\n                UpdateInternal(account);\n            }\nSo the state of the account is the same as it would be when you created it with the RequireAccountVerification set to false, however the only thing off is the username.\nEven more, the state of the account is now inconsistent because the username and the e-mailaddress are not the same despite of setting EmailIsUsername to true.. ",
    "simongh": "If it's not set, it uses the default value of 10 set in the attribute. If you set a value that can't be cast to an int then it should throw an error related to that. I don't think using TryParse would add anything...\n. "
}